package om0l;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import ku.common.*;
import ob.common.*;
import om.common.*;
import op.common.*;
import os.common.*;
import pc.common.*;
import pk.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
//*** PROGRAM=OM0L ****
// nike order entry - enter customer information
// 
// overview: this application displays and accepts allocation
//           control data for the entered order.
// 
// date created: 01/18/86
//       author: steve noble
// 
// maintenance history:
// 
//     date     by whom     overview of changes made
//   --------  ----------  ------------------------------------
//   11/25/86  tmai        allow allocation manager all sales
//                         offices
//   03/12/87  ssayew      change in om0ls2g to not allow
//                         allocation force code to be entered
//                         if a bulk order.
//   10/14/87  tfox        chg s2g to allow 't' as valid wipinv
//                         code for nalmgrs for whs shutdown.{
//   10/22/88  tfox        chg cd in s2e to prevent maint of
//                         rebook bulk orders.
//   11/04/88  jwood       noncsp opt added to calls
//   02/20/89  jwood       set segmented trans id logic added
//   04/04/90  cgrice      db changes - renamed op1blkcd to
//                         xbdcd.  s2e, s2d, s2g
//   02/12/91  tfox        regen for db2 chgs
//   04/25/91  bbake2      added processing for cust po #
//                         allocation hold.  Changes to
//                         om0l, om0ls1a, om0ls1f, om0ls2j,
//                         om0ls2f, om0ls2g, om0lsah, om0lsbh,
//                         added om0lw01 and all data items
//   05/30/91  tfox        menu services s01,s2b,s2i - check
//                         for prepacks
//   06/11/91  dharri     database chgs -om0lm001 name changes
//                        names chgs in s1c,s2g, s2f, s2j, s1f,
//                        s2a. op1nmalp to kunmapct, kuncrfl to
//                        kucvndfl, kunalseq to op1alseq.
//   12/02/91  jhecke     695 - Prepack of footwear. s01
//   12/11/91  gwells     713 - add allocation code '05' for
//                              draws.
//   04/02/92  jhecke     755 - default 'n' to wip inventory
//                              (op1wipin) s1c.
//   06/22/92  jhecke     xxx - allow allocation hold code of
//                              06. s2f
//   10/18/93  gacalki    986 - remove restrictions on changing
//                              allocation hold codes. s1f
//   04/28/94  jather     log 1003. renamed causera to
//                        ca-user-workarea-4k to hold opwrec
//                        which has increased to 3072 bytes.
//   09/12/95  craine     removed op1wipin - now used in om0i
//                        to indicate po money month for kinney
//   04/02/97  eshanm     values for the fields OP1ALSEQ and
//                        OP1OALSQ were swapped in display. Map
//                        variable definition was corrected for
//                        these fields.
//   08/27/98  udafon     #178 - Increased size of OMWREC to
//                        3505 bytes. Recompiled application.
// *********************
Program OM0L type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  OM0LW01 OM0LW01; // record
  OMAREC OMAREC; // record
  OMWREC OMWREC; // record
  OP1REC OP1REC; // record
  OP4REC OP4REC; // record
  OSNREC OSNREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XAFTBL {deleteAfterUse = yes}; // table
  use XAHTBL {deleteAfterUse = yes}; // table
  use XACTBL {deleteAfterUse = yes}; // table
  use XOSTBL {deleteAfterUse = yes}; // table
  use XPATBL; // table
  use XSOTBL {deleteAfterUse = yes}; // table
  use XBDTBL {deleteAfterUse = yes}; // table
  use OM0LM.OM0LM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OM0L001: OM0L001();
    goto OM0L005;
    OM0L005: OM0L005();
     /* *************************************************************/



        /* branch to converse*/

    goto OM0L005; /* branch to converse*/


  end // end main
end // end OM0L

// program init
Function OM0L001()



     /* **********************************************************/
     /* * this process initializes program work area and clears **/
     /* * the map areas.                                        **/
     /* **********************************************************/

      /* retrieve user common area and init flags*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  OM0LS1A();


   /* *************************************************************/
end // end OM0L001

// converse map and edit data
Function OM0L005()



      /* *********************************************************/
      /* * this process converses the map, edits the entered    **/
      /* * fields and if possible, xfer's to the requested      **/
      /* * application                                          **/
      /* *********************************************************/



  OM0LS2A();


   /* *************************************************************/
  converse OM0LM001 ;
   /* *************************************************************/



      /* clear (reset fields)*/



  OM0LS2B();


   /* *************************************************************/
end // end OM0L005

// CHECK FOR PREPACK
Function OM0LS01()


   /* THIS STATEMENT GROUP CHECKS THE PREPACK DATABASE*/
   /* TO SEE IF THE ORDER EXISTS*/

  OMWREC.OMWPKCHF = "N"; /* pack change flag*/
  OMWREC.OMWPPEXF = "N"; /* prepack exists flag*/
  sysVar.arrayIndex = 1;

  if (OP1REC.XGPCD == "03" /* APPAREL ORDER*/
   || OP1REC.XGPCD == "02") /* footwear order*/
    if (OP1REC.XPACD in XPATBL.XPACD /* IF VALID PACK CODE*/
     && XPATBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XPATBL.XPASPFFL[sysVar.arrayIndex] == "Y") /* CUST WANTS PREPACK*/
           /* NEXT SENTENCE   SEE IF ORDER IS ON DBASE*/
      else
        return;
      end
    else
      return;
    end
  else
    return;
  end

   /* BUILD THE KEY TO SPECIFIED PREPACK TABLE*/

  set OSNREC empty;
  set SQLCA empty;

  OSNREC.XWHCD = OP1REC.XWHCD; /* WAREHOUSE*/
  OSNREC.OP1PARTN = OP1REC.OP1PARTN; /* PART CHAR*/
  OSNREC.OP1CUOID = OP1REC.OP1CUOID; /* ORDER NUM*/
  OSNREC.OP1NORID = OP1REC.OP1NORID; /* NIKE ORD ID*/

  call "IO5650" ("SE", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == -811) /* multi records found*/
    OMWREC.OMWPPEXF = "Y"; /* prepack exists flag*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OMWREC.OMWPPEXF = "N"; /* prepack exists flag*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        OMWREC.OMWPKCHF = "Y"; /* reset pack change flag*/
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(672); /* prepack db busy try again*/
        return;
      else
        OMAREC.OMAERR = "Y";
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "OM0L    ";
        TA1REC.TA1LOCAT[1] = "SE      ";
        TA1REC.TA1LOCAT[2] = "OM0LS01 ";
        TA1REC.TA1LOCAT[3] = "IO5650  ";
        TA1REC.TA1DBASE = "DORDER  ";
        TA1REC.TA1TBLVU = "VCSPRP01";
        OM0LW01.OM0LWPTN = OP1REC.OP1PARTN;
        OM0LW01.OM0LWOID = OP1REC.OP1CUOID;
        OM0LW01.OM0LWNID = OP1REC.OP1NORID;
        OM0LW01.OM0LWTYP = " ";
        OM0LW01.OM0LWSQN = 0;
        TA1REC.TA1TBLKE = OM0LW01.OM0LWERR;
        try
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        end
        COMMAREA.CAMSGA = "PREPACK DB PROBLEMS";
        COMMAREA.CAMSGB = "ORDER MAY HAVE PREPACK CALL USER ANALYST";
        COMMAREA.CACURRAP = "OM0M";
        transfer to program "OM0M" passing COMMAREA;
      end
    end
  end

end // end OM0LS01

// initialize and set security
Function OM0LS1A()



     /* initialize and set security*/
  set OM0LW01 empty;
  XSENTRY();

   /* ****************************************************/
   /* *** set segmented trans id                      ****/
   /* ****************************************************/

  CAEZSAP = sysVar.transactionID;
  CAEZSG12 = "OM";
  CAEZSG4 = "L";
  sysVar.transactionID = CAEZSAP;

   /* *************************************************************/
  XSOMS01(); /* order inquiry change and security*/



      /* initialize map*/

  OM0LS1B(); /* set up screen om0lm001*/

  OM0LS1F(); /* set up security level of user*/

     /* read kucrec for later editing of allocation hold code*/

  set KUCREC empty; /* init record*/

  KUCREC.KUCCOID = OP1REC.KUCCOID; /* load key - company*/
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/

      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
    OM0LW01.OM0LWBTN = KUCREC.KUCCOID; /* bin to num*/
    TA1REC.TA1TBLKE = OM0LW01.OM0LWBTN; /* key value*/
    TA1REC.TA1LOCAT[3] = "OM0LS1A "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0240  "; /* i/o mod name*/
    XSOPS02(); /* abend routine*/
  end



   /* *************************************************************/
end // end OM0LS1A

// get order header information
Function OM0LS1B()



            /* get order header information*/




  OP1REC.OP1GROUP = OMWREC.OP1GROUP;
  OMWREC.OMWPF2CH = "N";
  if (OMWREC.OMWOPTN == 11) /* this application ?*/
    OMWREC.OMWEOF = "Y"; /* set end of flow*/
  end

  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OM0LS1C(); /* format data move to screen*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    TA1REC.TA1LOCAT[3] = "OM0LS1B";
    TA1REC.TA1LOCAT[4] = "IO0430";
    XSOPS02(); /* abort program*/
  end



end // end OM0LS1B

// move op1rec to screen
Function OM0LS1C()



                /* move op1rec to screen*/




  OMAREC.OMACUCO = OP1REC.KUCCOID;
  OMAREC.OMACUSR = OP1REC.KUMSTRID;
  OMAREC.OMACUDP = OP1REC.XNXCD;
  OMAREC.OMASEP1 = ".";
  OMAREC.OMASEP2 = ".";
  OM0LM001.OMACUNO = OMAREC.OMACUNO;
  OM0LM001.KUMSTRNM = OMWREC.KUMSTRNM;
  OMWREC.OMWORDN = OP1REC.OP1CUOID;
  OMWREC.OMWSORDN = OP1REC.OP1NORID;
  OMWREC.OMWSEP1 = ".";
  OM0LM001.OMWORD = OMWREC.OMWORD;
  OM0LM001.KUNMAPCT = OP1REC.KUNMAPCT;
  OM0LM001.KUNNOSFL = OP1REC.KUNNOSFL;
  OM0LM001.OP1ACNLF = OP1REC.OP1ACNLF;
  OM0LM001.OP1ASHDF = OP1REC.OP1ASHDF;
  OM0LM001.KUCVNDFL = OP1REC.KUCVNDFL;
  OM0LM001.OP1VAUNB = OP1REC.OP1VAUNB;
  OM0LM001.OP1NTMAL = OP1REC.OP1NTMAL;
  OM0LM001.XAFCD = OP1REC.XAFCD;
  OM0LM001.XAHCD = OP1REC.XAHCD;
  OM0LM001.OP1PAHCD = OP1REC.OP1PAHCD;
  OM0LM001.OP1RSVF = OP1REC.OP1RSVF;
  OM0LM001.XACCD = OP1REC.XACCD;
  OM0LM001.OP1OALSQ = OP1REC.OP1OALSQ;
  OM0LM001.OP1ALSEQ = OP1REC.OP1ALSEQ;
  OM0LM001.OP1LALDT = OP1REC.OP1LALDT;
  OM0LM001.OP1ALFDT = OP1REC.OP1ALFDT;
  OM0LM001.OP1ALHDT = OP1REC.OP1ALHDT;
  OM0LM001.OP1ALRDT = OP1REC.OP1ALRDT;


  OM0LS1D(); /* get descriptions for codes*/


  OM0LS1E(); /* format dates for screen*/


end // end OM0LS1C

// get abreviations for codes
Function OM0LS1D()



               /* get abreviations for codes*/




  if (OM0LM001.XAFCD == " ")
       /* next sentence*/
  else
    if (OM0LM001.XAFCD in XAFTBL.XAFCD)
      OM0LM001.XAFABRV = XAFTBL.XAFABRV[sysVar.arrayIndex];
    else
      OM0LM001.XAFABRV = "NODESC";
    end
  end

  if (OM0LM001.XAHCD == " ")
      /* next sentence*/
  else
    if (OM0LM001.XAHCD in XAHTBL.XAHCD)
      OM0LM001.XAHABRV[1] = XAHTBL.XAHABRV[sysVar.arrayIndex];
    else
      OM0LM001.XAHABRV[1] = "NODESC";
    end
  end

  if (OM0LM001.OP1PAHCD == " ")
       /* next sentence*/
  else
    if (OM0LM001.OP1PAHCD in XAHTBL.XAHCD)
      OM0LM001.XAHABRV[2] = XAHTBL.XAHABRV[sysVar.arrayIndex];
    else
      OM0LM001.XAHABRV[2] = "NODESC";
    end
  end

  if (OM0LM001.XACCD == " ")
      /* next sentence*/
  else
    if (OM0LM001.XACCD in XACTBL.XACCD)
      OM0LM001.XACABRV = XACTBL.XACABRV[sysVar.arrayIndex];
    else
      OM0LM001.XACABRV = "NODESC";
    end
  end

  if (OP1REC.OP1ASGCO != " ")
    OM0LM001.OM0LWACA = "*";
  end


end // end OM0LS1D

// format dates for screen
Function OM0LS1E()



                    /* format dates for screen*/




  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";

  if (OP1REC.OP1VAUDT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1VAUDT;

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD != 0)
      TA1REC.TA1DBASE = " ";
      TA1REC.TA1TBLVU = " ";
      TA1REC.TA1TBLKE = " ";
      TA1REC.TA1LOCAT[3] = "OM0LS1E";
      TA1REC.TA1LOCAT[4] = "TA0040";
      TA1REC.TA1LOCAT[1] = "GETDATE";
      set SQLCA empty;
      XSOPS02(); /* abort program*/
    else
      OM0LM001.OP1VAUDT = TA2REC.TA2GRGB;
    end

  end


  if (OP1REC.OP1DRBDT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1DRBDT;

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD != 0)
      TA1REC.TA1DBASE = " ";
      TA1REC.TA1TBLVU = " ";
      TA1REC.TA1TBLKE = " ";
      TA1REC.TA1LOCAT[3] = "OM0LS1E";
      TA1REC.TA1LOCAT[4] = "TA0040";
      TA1REC.TA1LOCAT[1] = "GETDATE";
      set SQLCA empty;
      XSOPS02(); /* abort program*/
    else
      OM0LM001.OP1DRBDT = TA2REC.TA2GRGB;
    end

  end


  if (OP1REC.OP1DABDT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1DABDT;

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD != 0)
      TA1REC.TA1DBASE = " ";
      TA1REC.TA1TBLVU = " ";
      TA1REC.TA1TBLKE = " ";
      TA1REC.TA1LOCAT[3] = "OM0LS1E";
      TA1REC.TA1LOCAT[4] = "TA0040";
      TA1REC.TA1LOCAT[1] = "GETDATE";
      set SQLCA empty;
      XSOPS02(); /* abort program*/
    else
      OM0LM001.OP1DABDT = TA2REC.TA2GRGB;
    end

  end



end // end OM0LS1E

// check security level of user
Function OM0LS1F()



              /* check security level of user*/




  if (OMWREC.OMWCHGFL == "Y"
   || OMWREC.OMWPF2CH == "Y")
    if (COMMAREA.CACLVL[1] == "Y")
      set OM0LM001.OP1DRBDT normal;
      set OM0LM001.OP1DABDT normal;
      set OM0LM001.XAFCD normal;
      set OM0LM001.XAHCD normal;
      set OM0LM001.OP1RSVF normal;
      set OM0LM001.OM0LWACI skip;
      set OM0LM001.XACCD normal;
      set OM0LM001.XACABRV protect;
      set OM0LM001.OM0LWCAS skip;
      set OM0LM001.OP1OALSQ normal;
      set OM0LM001.OM0LWOAS skip;
      set OM0LM001.OP1ALSEQ normal;
    else
      set OM0LM001.XAHCD normal;
      if (COMMAREA.CACHGFL == "Y")
        set OM0LM001.KUNMAPCT normal;
        set OM0LM001.KUNNOSFL normal;
        set OM0LM001.OP1ACNLF normal;
        set OM0LM001.OP1ASHDF normal;
        set OM0LM001.KUCVNDFL normal;
        set OM0LM001.OP1VAUNB normal;
      end
    end
  else
    if (COMMAREA.CACLVL[1] == "Y")
      set OM0LM001.OM0LWACI skip;
      set OM0LM001.XACCD skip;
      set OM0LM001.XACABRV skip;
      set OM0LM001.OM0LWCAS skip;
      set OM0LM001.OP1OALSQ skip;
      set OM0LM001.OM0LWOAS skip;
      set OM0LM001.OP1ALSEQ skip;
    end
  end


end // end OM0LS1F

// move title
Function OM0LS2A()



        /* move title*/


      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/


  if (converseVar.validationMsgNum > 0)
       /* next sentence*/
  else
    if (OMWREC.OMWCHGFL == "Y"
     || OMWREC.OMWPF2CH == "Y")
      OM0LM001.OM0LMTLE = "CHANGE";
      set OM0LM001.OM0LMPF2 skip, invisible;
      if (COMMAREA.CACLVL[1] == "Y")
        set OM0LM001.OP1DRBDT cursor;
      else
        set OM0LM001.KUNMAPCT cursor;
      end
    else
      OM0LM001.OM0LMTLE = "INQUIRY";
      set OM0LM001.OM0LMCUR cursor, skip;
      set OM0LM001.OM0LMPF2 skip, bold;
    end
  end


  OM0LM001.OMMDT = VGVar.currentShortGregorianDate;


end // end OM0LS2A

// validate scrn pfkeys, & update
Function OM0LS2B()



      /* clear (reset fields)*/

  OM0LM001.VAGen_EZEMSG = " "; /* clear err msg*/
  OMAREC.OMAERR = "N"; /* clear error flag*/


      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* pf2 - switch to change mode*/
        /* pf3 - order/suborder selection*/
        /* pf4 - master menu*/
        /* pf12 - edit only*/
        /* pf13 - order header 1*/
        /* pf14 - order header 2*/
        /* pf15 - allocation info*/
        /* pf16 - addresses*/
        /* pf18 - comment*/
        /* pf19 - skip updates*/
        /* pf24 - order/sub-order cancel*/


  if (converseVar.eventKey is pf2)
    OM0LS2E(); /* check security and change screen attributes*/
  else
    if (converseVar.eventKey is pf3)
      if (OMWREC.OMWPKCHF == "Y") /* pack change flag*/
        OM0LS01(); /* check for prepack*/
        if (OMAREC.OMAERR == "Y")
          return;
        end
        if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
          COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
          COMMAREA.CAMSG = "ORDER MAINTAINED - UPDATE PREPACK";
          sysVar.transferName = "OS0G";
          transfer to program sysVar.transferName passing COMMAREA;
        else
          sysVar.transferName = "OM0M";
          transfer to program sysVar.transferName passing COMMAREA;
        end
      else
        sysVar.transferName = "OM0M";
        transfer to program sysVar.transferName passing COMMAREA;
      end
    else
      if (converseVar.eventKey is pf4)
        if (OMWREC.OMWPKCHF == "Y") /* pack change flag*/
          OM0LS01(); /* check for prepack*/
          if (OMAREC.OMAERR == "Y")
            return;
          end
          if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
            COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
            COMMAREA.CAMSG = "ORDER MAINTAINED - UPDATE PREPACK";
            sysVar.transferName = "OS0G";
            transfer to program sysVar.transferName passing COMMAREA;
          else
            XSPF4();
          end
        else
          XSPF4();
        end
      else
        if (converseVar.eventKey is enter
         || converseVar.eventKey is pf12
         || converseVar.eventKey is pf13
         || converseVar.eventKey is pf14
         || converseVar.eventKey is pf15
         || converseVar.eventKey is pf16
         || converseVar.eventKey is pf18)
          OM0LS2D(); /* edit screen, update and transfer*/
        else
          if (converseVar.eventKey is pf19)
            OM0LS1C(); /* redisplay the screen*/
          else
            converseLib.validationFailed(8);
               /* option is not valid*/
          end
        end
      end
    end
  end




end // end OM0LS2B

Function OM0LS2D()




                 /* edit screen, update and transfer*/

  if (converseVar.eventKey is pf12)
    if (OP1REC.XBDCD == "R")
      converseLib.validationFailed(392);
      return;
    end
  end


  if (OMWREC.OMWCHGFL == "Y"
   || OMWREC.OMWPF2CH == "Y")
    if (COMMAREA.CACLVL[1] == "Y")
      OM0LS2G(); /* edit other part of screen*/
        /* if they had autority to change it*/
    else
      OM0LS2F(); /* edit part of screen*/
    end
    if (converseVar.eventKey is pf12)
         /* next sentence*/
    else
      if (converseVar.validationMsgNum == 0
       && OMAREC.OMAERR == "N")
        OM0LS2H(); /* update record*/
        if (converseVar.validationMsgNum == 0)
          OM0LS2I(); /* transfer to where ever*/
        end
      end
    end
  else
    if (converseVar.eventKey is pf12)
         /* next sentence*/
    else
      OM0LS2I(); /* transfer to where ever*/
    end
  end



end // end OM0LS2D

// check security and chg for upd
Function OM0LS2E()




                  /* check security and change to update mode*/
                  /* if security ok.*/



  if (OP1REC.XOSCD in XOSTBL.XOSCD)
    if (XOSTBL.XOSALWCH[sysVar.arrayIndex] == "N")
      converseLib.validationFailed(368);
         /* order status does not allow changes to order*/
    else
      if (COMMAREA.CACHGFL == "N")
        converseLib.validationFailed(352);
            /* id is not authorized to change orders*/
      else
        if (COMMAREA.XSOCD == OP1REC.XSOCD)
          OMWREC.OMWPF2CH = "Y";
          OM0LS1F(); /* check security and change screen attributes*/
        else
          if (COMMAREA.CACHGFL == "Y"
           && COMMAREA.CACLVL[1] == "Y") /* allocation manager*/
            OMWREC.OMWPF2CH = "Y";
            OM0LS1F();
                                   /* check security and chg scr attributes*/
          else
            converseLib.validationFailed(355);
               /* id is not authoried to change other sales office*/
          end
        end
      end
    end
  else
    if (COMMAREA.CACHGFL == "N")
      converseLib.validationFailed(352);
          /* id is not authorized to change orders*/
    else
      if (COMMAREA.XSOCD == OP1REC.XSOCD)
        OMWREC.OMWPF2CH = "Y";
        OM0LS1F(); /* check security and change screen attributes*/
      else
        converseLib.validationFailed(355);
           /* id is not authoried to change other sales office*/
      end
    end
  end



   /* added for rebooking 10/88 tjf*/
  if (OP1REC.XBDCD == "R")
    converseLib.validationFailed(392);
  end
end // end OM0LS2E

// edit part of screen
Function OM0LS2F()



       /* edit part of screen, if the user is*/
             /* not an allocation manager*/

  set OM0LM001.KUNMAPCT cursor; /* this field is edited*/
                                       /* later in the sgrp,*/
                                       /* but the set cursor is*/
                                       /* done here so that it*/
                                       /* it won't reset the*/
                                       /* cursor if xahcd is in*/
                                       /* error*/

    /* notes on what happens when xahcd = 04 - hold for cust po#*/
    /* 1.  This is the only allocation hold code that is*/
        /* allowed on an order while some other hold code is*/
        /* present.  Since there is only one field available*/
        /* for storing the active hold code, the hold for*/
        /* cust po# is 'stacked' when some other hold code*/
        /* is active, by being stored in the*/
        /* previous hold code field, with the release date*/
        /* set to spaces to indicate it's really active.*/
    /* 2 - to remove it, the po# must be present, it cannot be*/
        /* stacked, and the user*/
        /* must actually blank out the field.  Overtyping with a*/
        /* new value simply causes it to be switched to 'stacked'*/
        /* status.*/

    /* 3 - for csr's, xahcd is only available for*/
        /* entry if it was originally blank or 04.*/
        /* so the only changes we can make here*/
        /* are blank -> 04 (always legal)*/
        /* 04 -> blank (only legal if a po# is present)*/

  set OM0LM001.XAHCD normal;
  set OM0LM001.XAHABRV initialAttributes;

  if (OM0LM001.XAHCD == " ")
    if (OP1REC.XAHCD == "04"  /* this is a sneaky attempt to remove*/
     && OP1REC.OP1CUPO == " " /* a hold for po#, with out actually*/
     && KUCREC.KUCYPOFT != "00") /* having put a cust po# on the order*/
      converseLib.validationFailed(663); /* we don't let em*/
      OM0LM001.XAHCD = "04"; /* apparently the user wants this reset*/
      set OM0LM001.XAHCD cursor, bold;
      set OM0LM001.XAHABRV skip, bold;
    else
      OM0LM001.XAHABRV = " ";
    end
  else
    if (OM0LM001.XAHCD != OP1REC.XAHCD)
      if (OM0LM001.XAHCD in XAHTBL.XAHCD
       && XAHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        if (OM0LM001.XAHCD == "04" /* added a hold for po#*/
         || OM0LM001.XAHCD == "05") /* added a hold for draw*/
          OM0LM001.XAHABRV[1] = XAHTBL.XAHABRV[sysVar.arrayIndex];
        end
      else
        converseLib.validationFailed(662);
             /* csr is not allowed to add this hold code*/
        set OM0LM001.XAHCD cursor, bold;
      end
    end
  end

   /* SET OM0LM001.OP1MNALP NORMAL;*/

  if (OM0LM001.OP1VAUNB > " ")
    set TA2REC empty;

    TA2REC.TA2DTOPT = "GETDATE";

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      OM0LM001.OP1VAUDT = TA2REC.TA2GRGB;
    else
      TA1REC.TA1DBASE = " ";
      TA1REC.TA1TBLVU = " ";
      TA1REC.TA1TBLKE = " ";
      TA1REC.TA1LOCAT[1] = "OM0LS2J";
      TA1REC.TA1LOCAT[2] = "GETDATE";
      TA1REC.TA1LOCAT[3] = "TA0040";
      set SQLCA empty;
      XSOPS02(); /* abort program*/
    end


  else
    OM0LM001.OP1VAUDT = " ";
  end

  if (OM0LM001.KUCVNDFL == "Y"
   || OM0LM001.KUCVNDFL == "N")
    set OM0LM001.KUCVNDFL normal;
  else
    converseLib.validationFailed(118);
    set OM0LM001.KUCVNDFL cursor, bold;
      /* allow subs?---correct response is 'y' or 'n'*/
  end

  if (OM0LM001.OP1ASHDF == "Y"
   || OM0LM001.OP1ASHDF == "N")
    set OM0LM001.OP1ASHDF normal;
  else
    converseLib.validationFailed(116);
    set OM0LM001.OP1ASHDF cursor, bold;
      /* allow subs?---correct response is 'y' or 'n'*/
  end

  if (OM0LM001.OP1ACNLF == "Y"
   || OM0LM001.OP1ACNLF == "N")
    set OM0LM001.OP1ACNLF normal;
      /* next sentence*/
  else
    converseLib.validationFailed(115);
    set OM0LM001.OP1ACNLF cursor, bold;
      /* allow subs?---correct response is 'y' or 'n'*/
  end

  if (OM0LM001.KUNNOSFL == "Y"
   || OM0LM001.KUNNOSFL == "N")
    set OM0LM001.KUNNOSFL normal;
  else
    converseLib.validationFailed(300);
    set OM0LM001.KUNNOSFL cursor, bold;
      /* allow subs?---correct response is 'y' or 'n'*/
  end

  if (OM0LM001.KUNMAPCT > 100.00)
    converseLib.validationFailed(114);
    set OM0LM001.KUNMAPCT cursor, bold;
      /* minimum allocation % cannot exceed 100%*/
  else
    set OM0LM001.KUNMAPCT normal;
  end


end // end OM0LS2F

// edit rest of screen
Function OM0LS2G()



               /* if the user has the security to change*/
               /* then edit the rest of the screen*/




  set OM0LM001.XACCD normal;

  if (OM0LM001.XACCD == " ")
      /* next sentece*/
  else
    if (OM0LM001.XACCD != OP1REC.XACCD)
      if (OM0LM001.XACCD in XACTBL.XACCD)
        if (XACTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          OM0LM001.XACABRV = XACTBL.XACABRV[sysVar.arrayIndex];
        else
          converseLib.validationFailed(309);
          set OM0LM001.XACCD cursor, bold;
             /* assignment control id is not valid*/
        end
      else
        converseLib.validationFailed(309);
        set OM0LM001.XACCD cursor, bold;
           /* assignment control id is not valid*/
      end
    end
  end



  if (OM0LM001.OP1RSVF == "Y"
   || OM0LM001.OP1RSVF == "N")
    set OM0LM001.OP1RSVF normal;
  else
    converseLib.validationFailed(302);
        /* reserve inventory?--correct response is "y" or "n"*/
    set OM0LM001.OP1RSVF cursor, bold;
  end

    /* notes on what happens when xahcd = 04 - hold for cust po#*/
    /* 1.  This is the only allocation hold code that is*/
        /* allowed on an order while some other hold code is*/
        /* present.  Since there is only one field available*/
        /* for storing the active hold code, the hold for*/
        /* cust po# is 'stacked' when some other hold code*/
        /* is active, by being stored in the*/
        /* previous hold code field, with the release date*/
        /* set to spaces to indicate it's really active.*/
    /* 2 - to remove it, the po# must be present, it cannot be*/
        /* stacked, and the user*/
        /* must actually blank out the field.  Overtyping with a*/
        /* new value simply causes it to be switched to 'stacked'*/
        /* status.*/
  set OM0LM001.XAHCD normal;
  set OM0LM001.XAHABRV initialAttributes;

  if (OM0LM001.XAHCD == " ")
    if (OP1REC.XAHCD == "04"  /* this is a sneaky attempt to remove*/
     && OP1REC.OP1CUPO == " " /* the hold for po#, with out actually*/
     && KUCREC.KUCYPOFT != "00") /* having put a cust po# on the order*/
      converseLib.validationFailed(663); /* we don't let em.*/
      OM0LM001.XAHCD = "04"; /* apparently the user wants this reset*/
      set OM0LM001.XAHCD cursor, bold;
      set OM0LM001.XAHABRV skip, bold;
    else
      OM0LM001.XAHABRV = " ";
    end
  else
    if (OM0LM001.XAHCD != OP1REC.XAHCD)
      if (OM0LM001.XAHCD in XAHTBL.XAHCD)
        if (XAHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          OM0LM001.XAHABRV[1] = XAHTBL.XAHABRV[sysVar.arrayIndex];
        else
          converseLib.validationFailed(303);
               /* allocation hold  code is not valid*/
          set OM0LM001.XAHCD cursor, bold;
        end
      else
        converseLib.validationFailed(303);
             /* allocation hold  code is not valid*/
        set OM0LM001.XAHCD cursor, bold;
      end
    end
  end

  set OM0LM001.XAFCD normal;

  if (OM0LM001.XAFCD != " ")
    if (OP1REC.XBDCD in XBDTBL.XBDCD)
      if (XBDTBL.XBDBKOFL[sysVar.arrayIndex] == "Y")
        converseLib.validationFailed(313);
        /* bulk order cannot be allocated;*/
        set OM0LM001.XAFCD cursor, bold;
      end
    end
  end

  if (OM0LM001.XAFCD == " ")
    OM0LM001.XAFABRV = " ";
  else
    if (OM0LM001.XAFCD != OP1REC.XAFCD)
      if (OM0LM001.XAFCD in XAFTBL.XAFCD)
        if (XAFTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          OM0LM001.XAFABRV = XAFTBL.XAFABRV[sysVar.arrayIndex];
          OM0LM001.OP1ALFDT = VGVar.currentShortGregorianDate;
        else
          converseLib.validationFailed(306);
               /* allocation hold  code is not valid*/
          set OM0LM001.XAFCD cursor, bold;
        end
      else
        converseLib.validationFailed(306);
             /* allocation hold  code is not valid*/
        set OM0LM001.XAFCD cursor, bold;
      end
    end
  end

  set TA2REC empty;

  TA2REC.TA2DTOPT = "GETDATE";

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    OMAREC.OMAWDT = TA2REC.TA2GRGGN;
  else
    TA1REC.TA1DBASE = " ";
    TA1REC.TA1TBLVU = " ";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOCAT[1] = "OM0LS2G";
    TA1REC.TA1LOCAT[2] = "GETDATE";
    TA1REC.TA1LOCAT[4] = "TA0040";
    set SQLCA empty;
    XSOPS02(); /* abort program*/
  end

  set OM0LM001.OP1DABDT normal;
  set OM0LM001.OP1DRBDT normal;

  if (OM0LM001.OP1DABDT == " ")
       /* next sentence*/
  else
    set TA2REC empty;

    OMASDATE = OM0LM001.OP1DABDT;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";

    if (OMAREC.OMAHP2 != "-")
      TA2REC.TA2GRGA = OM0LM001.OP1DABDT;
    else
      OMAREC.OMAMMDT = OMAREC.OMASMMDT;
      OMAREC.OMADDDT = OMAREC.OMASDDDT;
      OMAREC.OMAYYDT = OMAREC.OMASYYDT;
      TA2REC.TA2GRGA = OMAREC.OMADATE;
    end

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      OM0LM001.OP1DABDT = TA2REC.TA2GRGB;
      if (TA2REC.TA2GRGGN < OMAREC.OMAWDT)
        set OM0LM001.OP1DABDT cursor, bold;
        converseLib.validationFailed(304);
           /* dont allocate before date must be*/
           /* greater than or equall todays date*/
      else
        OM0LM001.OP1DABDT = TA2REC.TA2GRGB;
      end
    else
      set OM0LM001.OP1DABDT cursor, bold;
      converseLib.validationFailed(308);
         /* invalid dont allocate before date*/
    end
  end

  if (OM0LM001.OP1DRBDT == " ")
       /* next sentence*/
  else
    set TA2REC empty;

    OMASDATE = OM0LM001.OP1DRBDT;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";

    if (OMAREC.OMAHP2 != "-")
      TA2REC.TA2GRGA = OM0LM001.OP1DRBDT;
    else
      OMAREC.OMAMMDT = OMAREC.OMASMMDT;
      OMAREC.OMADDDT = OMAREC.OMASDDDT;
      OMAREC.OMAYYDT = OMAREC.OMASYYDT;
      TA2REC.TA2GRGA = OMAREC.OMADATE;
    end

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      OM0LM001.OP1DRBDT = TA2REC.TA2GRGB;
      if (TA2REC.TA2GRGGN < OMAREC.OMAWDT)
        set OM0LM001.OP1DRBDT cursor, bold;
        converseLib.validationFailed(305);
           /* dont reserve before date must be*/
           /* greater than or equall todays date*/
      else
        OM0LM001.OP1DRBDT = TA2REC.TA2GRGB;
      end
    else
      set OM0LM001.OP1DRBDT cursor, bold;
      converseLib.validationFailed(307);
         /* invalid dont reserve  before date*/
    end
  end





end // end OM0LS2G

// update order header record
Function OM0LS2H()



            /* update order header information*/





  OM0LS2J(); /* move data to order header record - op1rec*/

  call "IO0430" ("U ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* XSOMS02                ;     write an order tag record*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set OM0LM001 initial;
      OM0LS1B(); /* get order header information*/
      OM0LS1F(); /* check security of user*/
      converseLib.validationFailed(330);
           /* please reenter changes, someone else has updated*/
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VORHDR01";
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      TA1REC.TA1LOCAT[1] = "OM0LS2H";
      TA1REC.TA1LOCAT[2] = "IO0430";
      XSOPS02(); /* abort program*/
    end
  end



end // end OM0LS2H

// edit rest of screen
Function OM0LS2I()



               /* transfer to where ever*/




  OMWREC.OP1GROUP = OP1REC.OP1GROUP;
  COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;

  if (converseVar.eventKey is pf13)
    transfer to program "OM0H" passing COMMAREA;
  else
    if (converseVar.eventKey is pf14)
      transfer to program "OM0I" passing COMMAREA;
    else
      if (converseVar.eventKey is pf15)
        transfer to program "OM0J" passing COMMAREA;
      else
        if (converseVar.eventKey is pf16)
          transfer to program "OM0K" passing COMMAREA;
        else
          if (converseVar.eventKey is pf18)
            transfer to program "OM0C" passing COMMAREA;
          else
            if (OMWREC.OMWEOF == "Y")
              if (OMWREC.OMWPKCHF == "Y") /* pack change flag*/
                OM0LS01(); /* check for prepack*/
                if (OMAREC.OMAERR == "Y")
                  return;
                end
                if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
                  COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
                  COMMAREA.CAMSG = "ORDER MAINTAINED - UPDATE PREPACK";
                  transfer to program "OS0G" passing COMMAREA;
                else
                  transfer to program "OM0M" passing COMMAREA;
                end
              else
                transfer to program "OM0M" passing COMMAREA;
              end
            else
              if (OMWREC.OMWEOF == "N")
                if (OMWREC.OMWOPTN == 1)
                  transfer to program "OM0S" passing COMMAREA;
                else
                  if (OMWREC.OMWOPTN == 2
                   || OMWREC.OMWOPTN == 4)
                    if (OMWCHGFL == "N")
                      transfer to program "OM0O" passing COMMAREA;
                    else
                      transfer to program "OM0Q" passing COMMAREA;
                    end
                  else
                    if (OMWREC.OMWOPTN == 5)
                      if (OMWCHGFL == "N")
                        transfer to program "OM0O" passing COMMAREA;
                      else
                        transfer to program "OM0P" passing COMMAREA;
                      end
                    else
                      if (OMWREC.OMWOPTN == 6)
                        transfer to program "OM0A" passing COMMAREA;
                      else
                        transfer to program "OM0M" passing COMMAREA;
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end




end // end OM0LS2I

// move screen to op1rec
Function OM0LS2J()



                /* move screen to order header record - op1rec*/




  OP1REC.KUNMAPCT = OM0LM001.KUNMAPCT;
  OP1REC.KUNNOSFL = OM0LM001.KUNNOSFL;
  OP1REC.OP1ACNLF = OM0LM001.OP1ACNLF;
  OP1REC.OP1ASHDF = OM0LM001.OP1ASHDF;
  OP1REC.KUCVNDFL = OM0LM001.KUCVNDFL;
  OP1REC.XAFCD = OM0LM001.XAFCD;
  OP1REC.OP1VAUNB = OM0LM001.OP1VAUNB;

  OM0LSAH(); /* shift the hold codes around*/

  OP1REC.OP1RSVF = OM0LM001.OP1RSVF;

  if (OP1REC.XACCD == OM0LM001.XACCD)
      /* next sentence*/
  else
    OP1REC.OP1ASGCO = OP1REC.XACCD;
    OP1REC.XACCD = OM0LM001.XACCD;
  end

  OP1REC.XACCD = OM0LM001.XACCD;
  OP1REC.OP1OALSQ = OM0LM001.OP1OALSQ;
  OP1REC.OP1ALSEQ = OM0LM001.OP1ALSEQ;


  if (OM0LM001.OP1DABDT == " ")
    OP1REC.OP1DABDT = 0;
  else
    set TA2REC empty;

    OMAREC.OMASDATE = OM0LM001.OP1DABDT;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";

    OMAREC.OMAMMDT = OMAREC.OMASMMDT;
    OMAREC.OMADDDT = OMAREC.OMASDDDT;
    OMAREC.OMAYYDT = OMAREC.OMASYYDT;
    TA2REC.TA2GRGA = OMAREC.OMADATE;

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      OP1REC.OP1DABDT = TA2REC.TA2GRGGN;
    else
      TA1REC.TA1DBASE = " ";
      TA1REC.TA1TBLVU = " ";
      TA1REC.TA1TBLKE = " ";
      TA1REC.TA1LOCAT[1] = "OM0LS2J";
      TA1REC.TA1LOCAT[2] = "GREGGREG";
      TA1REC.TA1LOCAT[3] = "OP1DABDT";
      TA1REC.TA1LOCAT[4] = "TA0040";
      set SQLCA empty;
      XSOPS02(); /* abort program*/
    end
  end


  if (OM0LM001.OP1DRBDT == " ")
    OP1REC.OP1DRBDT = 0;
  else
    set TA2REC empty;

    OMASDATE = OM0LM001.OP1DRBDT;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";

    OMAREC.OMAMMDT = OMAREC.OMASMMDT;
    OMAREC.OMADDDT = OMAREC.OMASDDDT;
    OMAREC.OMAYYDT = OMAREC.OMASYYDT;
    TA2REC.TA2GRGA = OMAREC.OMADATE;

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      OP1REC.OP1DRBDT = TA2REC.TA2GRGGN;
    else
      TA1REC.TA1DBASE = " ";
      TA1REC.TA1TBLVU = " ";
      TA1REC.TA1TBLKE = " ";
      TA1REC.TA1LOCAT[1] = "OM0LS2J";
      TA1REC.TA1LOCAT[2] = "GREGGREG";
      TA1REC.TA1LOCAT[3] = "OP1DRBDT";
      TA1REC.TA1LOCAT[4] = "TA0040";
      set SQLCA empty;
      XSOPS02(); /* abort program*/
    end
  end

  if (OM0LM001.OP1VAUDT == " ")
    OP1REC.OP1VAUDT = 0;
  else
    set TA2REC empty;

    OMAREC.OMASDATE = OM0LM001.OP1VAUDT;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";

    OMAREC.OMAMMDT = OMAREC.OMASMMDT;
    OMAREC.OMADDDT = OMAREC.OMASDDDT;
    OMAREC.OMAYYDT = OMAREC.OMASYYDT;
    TA2REC.TA2GRGA = OMAREC.OMADATE;

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      OP1REC.OP1VAUDT = TA2REC.TA2GRGGN;
    else
      TA1REC.TA1DBASE = " ";
      TA1REC.TA1TBLVU = " ";
      TA1REC.TA1TBLKE = " ";
      TA1REC.TA1LOCAT[1] = "OM0LS2J";
      TA1REC.TA1LOCAT[2] = "GREGGREG";
      TA1REC.TA1LOCAT[3] = "OP1VAUDT";
      TA1REC.TA1LOCAT[4] = "TA0040";
      set SQLCA empty;
      XSOPS02(); /* abort program*/
    end
  end

  if (OM0LM001.OP1ALFDT == 0)
    OP1REC.OP1ALFDT = 0;
  else
    set TA2REC empty;

    TA2REC.TA2GRGEN = OM0LM001.OP1ALFDT;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "E";

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      OP1REC.OP1ALFDT = TA2REC.TA2GRGGN;
    else
      TA1REC.TA1DBASE = " ";
      TA1REC.TA1TBLVU = " ";
      TA1REC.TA1TBLKE = " ";
      TA1REC.TA1LOCAT[1] = "OM0LS2J";
      TA1REC.TA1LOCAT[2] = "GREGGREG";
      TA1REC.TA1LOCAT[3] = "OP1ALFDT";
      TA1REC.TA1LOCAT[4] = "TA0040";
      set SQLCA empty;
      XSOPS02(); /* abort program*/
    end
  end

  if (OM0LM001.OP1ALHDT == 0)
    OP1REC.OP1ALHDT = 0;
  else
    set TA2REC empty;

    TA2REC.TA2GRGEN = OM0LM001.OP1ALHDT;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "E";

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      OP1REC.OP1ALHDT = TA2REC.TA2GRGGN;
    else
      TA1REC.TA1DBASE = " ";
      TA1REC.TA1TBLVU = " ";
      TA1REC.TA1TBLKE = " ";
      TA1REC.TA1LOCAT[1] = "OM0LS2J";
      TA1REC.TA1LOCAT[2] = "GREGGREG";
      TA1REC.TA1LOCAT[3] = "OP1ALHDT";
      TA1REC.TA1LOCAT[4] = "TA0040";
      set SQLCA empty;
      XSOPS02(); /* abort program*/
    end
  end


  if (OM0LM001.OP1ALRDT == 0)
    OP1REC.OP1ALRDT = 0;
  else
    set TA2REC empty;

    TA2REC.TA2GRGEN = OM0LM001.OP1ALRDT;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "E";

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      OP1REC.OP1ALRDT = TA2REC.TA2GRGGN;
    else
      TA1REC.TA1DBASE = " ";
      TA1REC.TA1TBLVU = " ";
      TA1REC.TA1TBLKE = " ";
      TA1REC.TA1LOCAT[1] = "OM0LS2J";
      TA1REC.TA1LOCAT[2] = "GREGGREG";
      TA1REC.TA1LOCAT[3] = "OP1ALRDT";
      TA1REC.TA1LOCAT[4] = "TA0040";
      set SQLCA empty;
      XSOPS02(); /* abort program*/
    end
  end


  set TA2REC empty;

  TA2REC.TA2DTOPT = "GETDATE";

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    OP1REC.ZZZCHGDT = TA2REC.TA2GRGGN;
    OP1REC.ZZZCHGTM = TA2REC.TA2TIMHM;
  else
    TA1REC.TA1DBASE = " ";
    TA1REC.TA1TBLVU = " ";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOCAT[1] = "OM0LS2J";
    TA1REC.TA1LOCAT[2] = "GETDATE";
    TA1REC.TA1LOCAT[3] = "TA0040";
    set SQLCA empty;
    XSOPS02(); /* abort program*/
  end


end // end OM0LS2J

// value hold code
Function OM0LSAH()
    /* notes on what happens when xahcd = 04 - hold for cust po#*/
    /* 1.  This is the only allocation hold code that is*/
        /* allowed on an order while some other hold code is*/
        /* present.  Since there is only one field available*/
        /* for storing the active hold code, the hold for*/
        /* cust po# is 'stacked' when some other hold code*/
        /* is active, by being stored in the*/
        /* previous hold code field, with the release date*/
        /* set to spaces to indicate it's really active.*/
    /* 2 - to remove it, the po# must be present, it cannot be*/
        /* stacked, and the user*/
        /* must actually blank out the field.  Overtyping with a*/
        /* new value simply causes it to be switched to 'stacked'*/
        /* status.*/

  if (OM0LM001.XAHCD == OP1REC.XAHCD) /* no change*/
    return;
  end
  if (OM0LM001.XAHCD == " " /* we are releasing a hold on*/
   && OP1REC.XAHCD == "04") /* cust po number*/
    OM0LSBH(); /* so we want to write a comment*/
    OP1REC.OP1OMCMF = "Y"; /* this seems to indicate to the*/
                                      /* OM0C there are comments*/
                                      /* to be read.  I hope that's*/
                                      /* all it does.*/
  end

  if (OM0LM001.XAHCD == OP1REC.OP1PAHCD /* we are trying to*/
   && OP1REC.OP1PAHCD == "04"           /* 'unstack' the hold*/
   && OP1REC.OP1ALRDT == 0)             /* for cust po #?*/
    OM0LM001.XAHCD = " "; /* which is the same as*/
  end /* removing the first hold*/

  if (OM0LM001.XAHCD == " ") /* we are removing a hold*/

    if (OP1REC.OP1PAHCD == "04" /* but there is one 'stacked'*/
     && OP1REC.OP1ALRDT == 0)  

      OP1REC.OP1PAHCD = OP1REC.XAHCD; /* first get this one*/
     /* MOVE EZEDTE TO OM0LM001.OP1ALRDT;     /* set up as released*/

      OP1REC.XAHCD = "04"; /* now 'unstack' the*/
      OM0LM001.OP1ALHDT = VGVar.currentShortGregorianDate; /* 04 hold code.*/

    else /* there isn't one stacked*/

      OP1REC.OP1PAHCD = OP1REC.XAHCD; /* so set this one up*/
      OM0LM001.OP1ALRDT = VGVar.currentShortGregorianDate; /* as released*/

      OP1REC.XAHCD = " "; /* remove the hold*/
                               /* ****note, we keep the date*/
    end
    return;
  end

               /* so here we are adding a hold*/

  if (OP1REC.OP1PAHCD == "04" /* there is a hold 'stacked' for*/
   && OP1REC.OP1ALRDT == 0)   /* cust po #*/
    /* next sentence               and we don't want to overlay it*/
  else
    if (OP1REC.XAHCD == " " /* there is no hold to be moved back*/
     || OP1REC.XAHCD == "05") /* do not move back hold for draws*/
      /* next sentence*/
    else
      OP1REC.OP1PAHCD = OP1REC.XAHCD; /* move the previous hold back*/
      OM0LM001.OP1ALRDT = VGVar.currentShortGregorianDate; /* and add the release date*/
    end
  end
  if (OP1REC.XAHCD == "04") /* this type do not get released*/
    OM0LM001.OP1ALRDT = 0; /* they get stacked*/
  end
  OP1REC.XAHCD = OM0LM001.XAHCD;
                                   /* and now we can add the new hold*/
  OM0LM001.OP1ALHDT = VGVar.currentShortGregorianDate; /* and date*/
end // end OM0LSAH

// update comments
Function OM0LSBH()
   /* this statement grp adds a text record*/
   /* with the highest sequence number available*/
        /* omasub counts the number of existing*/
        /* text records, there is a*/
        /* maximum of 15 allowed per order*/
  set OP4REC empty;
  set SQLCA empty;
  OP4REC.OP4KEY = OP1REC.OP1KEY;
  OP4REC.OP4TRTYP = "C";
  OMAREC.OMASUB = 0;
  OP4REC.OP4TRSEQ = 0; /* if nothing is found we will*/
                                     /* use 1*/
   /* set cursor on text file to find any comments*/
   /* that may already be out there for this order*/

  call "IO0470" ("SS", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* cursor is set now*/
         /* next sentence             ; for this order*/
  else
                                   /* something dreadful has happened here*/
    TA1REC.TA1PGMNM = "OM0L    ";
    TA1REC.TA1MAP = "OM0LM001";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VTEXT001";
    TA1REC.TA1LOCAT[1] = "OM0LSBH";
    OM0LW01.OM0LWPTN = OP4REC.OP1PARTN;
    OM0LW01.OM0LWOID = OP4REC.OP1CUOID;
    OM0LW01.OM0LWNID = OP4REC.OP1NORID;
    OM0LW01.OM0LWTYP = OP4REC.OP4TRTYP;
    OM0LW01.OM0LWSQN = OP4REC.OP4TRSEQ;
    TA1REC.TA1TBLKE = OM0LW01.OM0LWERR;
    TA1REC.TA1LOCAT[3] = "OM0L";
    TA1REC.TA1LOCAT[4] = "IO0470";
    XSOPS02();
  end
  while (SQLCA.VAGen_SQLCODE == 0)
    call "IO0470" ("SN", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
    OMAREC.OMASUB = OMAREC.OMASUB + 1;
  end
  if (SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1PGMNM = "OM0L    ";
    TA1REC.TA1MAP = "OM0LM001";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VTEXT001";
    TA1REC.TA1LOCAT[1] = "OM0LSBH";
    OM0LW01.OM0LWPTN = OP4REC.OP1PARTN;
    OM0LW01.OM0LWOID = OP4REC.OP1CUOID;
    OM0LW01.OM0LWNID = OP4REC.OP1NORID;
    OM0LW01.OM0LWTYP = OP4REC.OP4TRTYP;
    OM0LW01.OM0LWSQN = OP4REC.OP4TRSEQ;
    TA1REC.TA1TBLKE = OM0LW01.OM0LWERR;
    TA1REC.TA1LOCAT[3] = "OM0L";
    TA1REC.TA1LOCAT[4] = "IO0470";
    XSOPS02();
  end
  call "IO0470" ("CS", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
  if (OMAREC.OMASUB > 14) /* there are already 15 comments*/
    return; /* and we can't add another*/
  end
     /* format new text record*/

     /* get current date and time*/
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = " ";
    TA1REC.TA1TBLVU = " ";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOCAT[1] = "OM0LSBJ";
    TA1REC.TA1LOCAT[2] = "GETDATE";
    TA1REC.TA1LOCAT[3] = "TA0040";
    set SQLCA empty;
    XSOPS02(); /* abort program*/
  end

   /* value text record*/
  OP4REC.OP4TRSEQ = OP4REC.OP4TRSEQ + 1; /* next available seq*/
  OP4REC.XNDCD = " ";
  OP4REC.OP4TXTOF = "N";
  OM0LW01.OP4TXT = " ";
  OM0LW01.OM0LWTX1 = "ALLOCATION HOLD RELEASED ON ";
  OM0LW01.OM0LWDTE = TA2REC.TA2GRGGN;
  OM0LW01.OM0LWSL1 = "/";
  OM0LW01.OM0LWSL2 = "/";
  OM0LW01.OM0LWTXY = OM0LW01.OM0LWYY;
  OM0LW01.OM0LWTXM = OM0LW01.OM0LWMM;
  OM0LW01.OM0LWTXD = OM0LW01.OM0LWDD;
  OM0LW01.OM0LWTX2 = "BY ";
  OM0LW01.CAUSERID = COMMAREA.CAUSERID;
  OP4REC.OP4TXT = OM0LW01.OP4TXT;
  OP4REC.ZZZCHGDT = TA2REC.TA2GRGGN;
  OP4REC.ZZZCHGTM = TA2REC.TA2TIMHM;
  OP4REC.ZZZCHGCT = 1;

    /* add text record*/
  call "IO0470" ("A ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1PGMNM = "OM0L    ";
    TA1REC.TA1MAP = "OM0LM001";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VTEXT001";
    TA1REC.TA1LOCAT[1] = "OM0LSBH";
    OM0LW01.OM0LWPTN = OP4REC.OP1PARTN;
    OM0LW01.OM0LWOID = OP4REC.OP1CUOID;
    OM0LW01.OM0LWNID = OP4REC.OP1NORID;
    OM0LW01.OM0LWTYP = OP4REC.OP4TRTYP;
    OM0LW01.OM0LWSQN = OP4REC.OP4TRSEQ;
    TA1REC.TA1TBLKE = OM0LW01.OM0LWERR;
    TA1REC.TA1LOCAT[3] = "OM0L";
    TA1REC.TA1LOCAT[4] = "IO0470";
    XSOPS02();
  end
end // end OM0LSBH

Record OM0LW01 type basicRecord
  10 OM0LWBTN OM0LWBTN ; 
  10 OM0LWERR OM0LWERR ; 
    15 OM0LWPTN OM0LWPTN ; 
    15 OM0LWOID OM0LWOID ; 
    15 OM0LWNID OM0LWNID ; 
    15 OM0LWTYP OM0LWTYP ; 
    15 OM0LWSQN OM0LWSQN ; 
  10 OM0LWDTE OM0LWDTE ; 
    15 OM0LWYY OM0LWYY ; 
    15 OM0LWMM OM0LWMM ; 
    15 OM0LWDD OM0LWDD ; 
  10 OP4TXT OP4TXT ; 
    15 OM0LWTX1 OM0LWTX1 ; 
    15 OM0LWTXM OM0LWTXM ; 
    15 OM0LWSL1 OM0LWSL1 ; 
    15 OM0LWTXD OM0LWTXD ; 
    15 OM0LWSL2 OM0LWSL2 ; 
    15 OM0LWTXY OM0LWTXY ; 
    15 * char(1) ; 
    15 OM0LWTX2 OM0LWTX2 ; 
    15 CAUSERID CAUSERID ; 
    15 * char(10) ; 
end // end OM0LW01

// convert bin to num
DataItem OM0LWBTN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   hold dd
DataItem OM0LWDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold date ccyymmdd
DataItem OM0LWDTE char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error diag fields
DataItem OM0LWERR char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   hold mm
DataItem OM0LWMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-nike-ord-id
DataItem OM0LWNID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-cust-ord-id
DataItem OM0LWOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-ord-part-char
DataItem OM0LWPTN num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0LWSL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0LWSL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-txt-rec-seq
DataItem OM0LWSQN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// text area 1
DataItem OM0LWTX1 char(28)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// text area 2
DataItem OM0LWTX2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// text area day
DataItem OM0LWTXD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// text area month
DataItem OM0LWTXM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// text area year
DataItem OM0LWTXY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-txt-rec-typ
DataItem OM0LWTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   hold ccyy
DataItem OM0LWYY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

