package om0s;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ob.common.*;
import om.common.*;
import op.common.*;
import os.common.*;
import oz.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=OM0S ****
// nike order entry - product summary sel by product number
// 
// 
// overview: this application displays up to 900 product
//           numbers for a given customer order number.
//           the user can browse through the list, and
//           select only those that he wants to update
//           or view.
// 
// 
// ************************************************************
// *    data base views   dorder.vitem001--item table--op2rec
// *                      dprod.vcolor02--color table--sycrec
// ************************************************************
// ************************************************************
// *    applications called  mnos om0q om0r
// *                         om0a om0h om0m om0o om0p
// ************************************************************
// ************************************************************
// *    sub programs called  ta0020
// *
// ************************************************************
// 
// date created: 06/27/86
//       author: robert kennedy -- informatics
// 
// maintenance history:
// 
//     when       who       what
//   --------  ----------  ------------------------------------
//   06/27/86   r kennedy   original creation
//   02/06/87   d shipp    changed s01 & s04 to fix alloc %
//   10/19/87   tfox       chg code in s00 to check sales
//                         office. must be the same as commarea
//   11/02/87   tfox       added new stmt grp s05 to read order
//                         header rec. refresh omwrec before
//                         dxfr's in s52,s57. added call to s05
//                         in om0s000.
//   02/04/88   craine     chg om0ss05 to use xspf4 instead of
//                         xfer to mn0m.
//   03/29/88   craine     chg s02 to ignore not found and not
//                         abend om0o and om0q will handle it.
//   08/15/88   gwells     rebook - added new edits for order
//                         maintenance reason code (xomcd) for
//                         rebooking - s57.  new sgrp -
//                         validate agency/customer (s59).
//                         disallow cancelling of other sales
//                         office orders - s00.
//   10/22/88   tfox       chg code in s56 to prevent mainte-
//                         nance of rebook bulk.
//   10/26/88   gwells     rebooking - add additional edit:
//                           cancellation date must be more
//                           than 45 days from needdate - s57.
//                           new sgrps - s58, s60.
//   11/04/88   JWOOD      NONCSP OPT ADDED TO CALLS
//   12/05/88   gwells     add credit hold edit to rebook 45
//                         day cancel window - s60.
//   11/09/89   dwalke     add segmented transaction id to appl
//   03/21/89   obecke     add xobtbl.  chg map to show
//                         xobabrv instead of xotabrv.m001,s01.
//   08/14/89   ssteph     added credit life code 30 to
//                         process s60.
//   04/04/90   cgrice     db changes - renamed op1blkcd to
//                         xbdcd.  s56, s58
//   04/11/90   schase     bug #278.  add reenter flag when
//                         cancel an item.  changed s51,54,57,
//                         010,map.
// ************* N O T E **************************************
//                      New OM0S Version !!!
//   09/24/90   schase     rewrite created.
//   10/27/90   tfox       increased size of temp storage 886
//                         to 914 inorder to read,write,purge.
//                         s1r,s1w,s1p.
//   01/11/91    craine    initialized total allocation percent
//                         before the temp storage load.
//   02/12/91    tfox      regen for db chgs
//   03/22/91    schase    clear the cancel reason cd and re-
//                         enter flag fields after om0r cancels
//                         the item. s80 s55.
//   04/10/91    CRAINE    PREVENT ADDING PRODUCTS WITH PF20 TO
//                         REBOOK BULK ORDERS
//   04/25/91    schen     log #585 - change om0ss81 to turn
//                         off rebooking of apparel if reason
//                         code is 01.
//   05/16/91    tfox      Menu of Services - add po line
//                         number to screen and allow changes.
//                         m001,spf,s05,s1r,s1u,s1w,s10,s14,
//                         s25,s26,s30,s31,s32,s35,s41,s50,s60,
//                         s61,s62,s80,s81,s90,
//                         om0sw02 -wgp2,wrow (incr size)
//   05/20/91    dflesh    log #535 expand price and qty fields
//                         increased unit price field by one.
//   05/21/91    gwells    Menu of Services - increase temp
//                         storage length- s1r,s1u,s1w
//   05/31/91    tfox      Menu of Services - m001,spf,s02,s60,
//                         s80 - check for prepacks
//   08/06/91    dharri    log #669 - rebook cancllation 45 day
//                         window ck no longer called in s82.
//   10/21/91    jjohn2    Log #697 - fix prepack editing to
//                         bypass comparing to the XPATBL when
//                         pack code is spaces (OM0SS02).  Fix
//                         -100 abend that occurred when XL'ing
//                         with PF24.  Saved and restored the
//                         current page while updating temp
//                         storage (OM0SS60).
//   12/02/91    jhecke    695 - Prepack of footwear. s02
//   12/28/92    jather    log #868 - transmitted airborne
//                         orders cannot be updated or
//                         cancelled. s15,s26,s31,s90
//   06/10/93    dcaust    #964 International Airborne.
//                         disallow pf20 if order class = 'tr'
//                         (transmitted Airborne ord). allow
//                         pf24, but chg ord cls from 'tr' to
//                         'au' (updtd Airborne order).
//                         s31, s90, s20, s80; new
//                         om0ss-updt-ord-hdr.
//   09/01/93    gcalki    CSP 4.1 changes - sub om0r no longer
//                         xfers on abort. it now passes a code
//                         through omerec.  if the code is not
//                         '00', control is passed to the main
//                         menu.  omerec, s80
//   02/28/94    scantr    db changes: length changes in
//                         om0sw02, resize temp storage s1w,
//                         s1r, s1u
//   04/28/94    jather    log 1003. renamed causera to
//                         ca-user-workarea-4k to hold opwrec
//                         which has increased to 3072 bytes.
//   04/20/95    craine    change om0ss81 to turn on rebooking
//                         if apparel if reason code is 01.
//   06/28/95    mmcgol    Canadian project-Added currency code
//                         to screen(om0ss20), Added call to
//                         sy2000(om0ss-sel-sy2000, om0ss12,
//                         om0sw01.om0sw-wsy2000-fnd-flag).
//   07/03/96    mvalbu    Changed to use regional data for
//                         US apparel by calling SY2000.
//                         Changed OM0SS12, and OM0SS-SEL-
//                         SY2000.
//   11/22/96   dliddl     Added PF key to allow transfer to
//                         cust xref screens OM0Y and OM0Z.
//   06/10/97   wleong     Added changes to display error msg
//                         if pack code is blank om0ss02.
//   09/01/97   RFREY      OCD Changes - write ocd change
//                         reason(vsoscr01).
//   10/29/97   LRAO       Changed code in OM0SSPF for pf1 key
//                         validation. This is to avoid looping
//                         of OM0G when enter is pressed in
//                         OM0G screen. Look for *TCS
//   11/04/97   MBURLE     Y2KFIX: added XX0XS01 to OM0SS01 for
//                         century windowing.
//   01/15/98   klee       bypass region edits for intl users.
//   04/13/98   wleong     changed prepack reminder message.
//   07/21/98   UDAFON     Changed message #942 in CALL-OZ2090.
//   08/27/98   UDAFON     #178 Increased size of OMWREC to
//                         3505 bytes. Re-compiled application
//   10/02/98   svargh     added changes to om0mss-check-updt
//                         ,om0ss-updte-ord-hdr,om0mss-updte-vb
//                       -ulks to update the bulk qty in the
//                         vbulks02 table when the header is up
//                         dated.
//   03/15/00   rsurap     SPAIN TRADEMARK PROJECT
//                         1.Added OM0SS-SPAIN-CHECK to find
//                         the product compliance
//                         2. Changed Map OM0SM OM0SM001 to
//                         display SPain complaince flag.
//                         3.Changed OM0SS10 to introduce the
//                         new OM0SS-SPAIN-CHECK.
//                         4.Added new varibles in OM0SW01
//                         and OM0SW02.
// ************************************************************
// *********************
Program OM0S type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  OBFREC OBFREC; // record
  OM0SW01 OM0SW01; // record
  OM0SW02 OM0SW02; // record
  OMEREC OMEREC; // record
  OMWREC OMWREC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  OSNREC OSNREC; // record
  SM1REC SM1REC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VBULKS02 VBULKS02; // record
  VOPPGM01 VOPPGM01; // record
  WOZ2090 WOZ2090; // record
  WSY2000 WSY2000; // record
  XP0QW00 XP0QW00; // record
  XS0MW01 XS0MW01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPATBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use XOSTBL {deleteAfterUse = yes}; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XOMTBL {deleteAfterUse = yes}; // table
  use OM0SM.OM0SM001,  // forms
      OM0SM.XP0QM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OM0S000: OM0S000();



    goto OM0S010; /* to begin building the map*/



    OM0S010: OM0S010();


    if (converseVar.eventKey is pf24 /* cancel product*/
     && OM0SW01.OM0SWERR == "N")     /* no errors*/
      goto OM0S000;
    else
      goto OM0S010;
    end


  end // end main
end // end OM0S

// MAIN EXECUTE PROCESS
Function OM0S000()

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  XSENTRY(); /* check csp security*/

     /* SET SEGMENTED TRANS ID*/

  COMMAREA.CAEZSAP = sysVar.transactionID;
  COMMAREA.CAEZSG12 = "OM";
  COMMAREA.CAEZSG4 = "S";
  sysVar.transactionID = COMMAREA.CAEZSAP;


  XSOMS01(); /* check order maint security*/

  OM0SS01(); /* initialize OM0S application*/

  OM0SS05(); /* load temp storage with products*/

  OM0SS03(); /* read company record*/

  OM0SS15(); /* build OM0SM001 map*/

end // end OM0S000

// CONVERSE/ AFTER PROCESS
Function OM0S010()

  converseVar.segmentedMode = 1; /* force segmented converse mode*/

  converse OM0SM001 ;

  OM0SW01.OM0SWERR = "N"; /* init error flag*/
  OM0SW01.OM0SWSFL = "N"; /* init select option flag*/
  converseLib.validationFailed(0); /* init error msg*/
  OM0SM001.VAGen_EZEMSG = " ";


    /* RESET FIELD ATTRIBUTES*/

  OM0SS30();

    /* EDIT MAP*/

  OM0SS35();

    /* CONVERSE UPDATE*/

  if (OM0SW01.OM0SWERR == "N") /* no errors*/
    OM0SS60();
  end

    /* EDIT PFKEYS*/

  OM0SSPF();


end // end OM0S010

// update ocd size item
Function OM0SS-CALL-OZ2090()

      /* use OZ2090 to update the VOCSIZ01 record*/
      /* call oz2090 for each line item selected on the screen*/

  OM0SW01.OM0SWF1S = 1;
  while (OM0SW01.OM0SWF1S <= 14)
    set WOZ2090 empty;
    if (OM0SW02.OM0SMSEL[OM0SWF1S] == "S")
      WOZ2090.OZ2090-OP-ORD-PART-CHAR = OP1REC.OP1PARTN;
      WOZ2090.OZ2090-OP-CUST-ORD-ID = OP1REC.OP1CUOID;
      WOZ2090.OZ2090-OP-NIKE-ORD-ID = OP1REC.OP1NORID;
      WOZ2090.OZ2090-OP-LINE-ITEM-NBR = OM0SW02.OP2LNINB[OM0SWF1S];
      WOZ2090.OZ2090-XOM-ORD-MNTN-CD = OM0SM001.XOMCD;
      WOZ2090.OZ2090-SOCD-APPL-SRC-CD = "OP";
      WOZ2090.OZ2090-SOCD-GLBL-MNTN-FL = "N";
      WOZ2090.OZ2090-SOCD-SZ-RSN-TXT = XP0QW00.XP0QW-RSN-TEXT;
      WOZ2090.OZ2090-XXX-USER-ID = COMMAREA.CAUSERID;
      call "OZ2090" (WOZ2090) {isNoRefresh = yes, isExternal = yes};

      if (WOZ2090.OZ2090-RETURN-CD == "00") /* good return*/
        /* ok - next sentence*/
      else
        converseLib.validationFailed(942);
      end
    end
    OM0SW01.OM0SWF1S = OM0SW01.OM0SWF1S + 1;
  end

end // end OM0SS-CALL-OZ2090

// CHECK FOR ORDER TO UPDATE BULK
Function OM0SS-CHECK-UPDATE()
   /* tcs include begin*/
  set VBULKS02 empty;
  set OBFREC empty;
  set SQLCA empty;
  VBULKS02.OP1PARTN = OP1REC.OP1PARTN;
  VBULKS02.OP1CUOID = OP1REC.OP1CUOID;
  VBULKS02.OP1NORID = OP1REC.OP1NORID;

  OBFREC.OBFTASK = "S ";
  call "VBULKS02" (OBFREC, SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    OM0SS-UPDTE-VBULK(); /* if there are records update*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)

    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VBULKS02"; /* table view*/
      TA1REC.TA1LOCAT[2] = "OM0SS-CHECK-U"; /* statement group nam*/
      TA1REC.TA1LOCAT[3] = "VBULKS02";
      TA1REC.TA1LOCAT[4] = "U     ";
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
    /* tcs include end*/
  end
end // end OM0SS-CHECK-UPDATE

// OCD COMMENT WINDOW
Function OM0SS-OCD-CMT()
   /* THIS STMT GROUP DISPLAYS A POP-UP WINDOW*/
   /* FOR THE USER TO ENTER THE OCD COMMENT*/

  XP0QW00.XP0QW-XOMCD = OM0SM001.XOMCD;

  XP0Q001(); /* pop-up window initialize*/

  converseLib.clearScreen();
   /* restore the original map*/

  OM0SW02.OM0SMSEL[1] = " ";
  OM0SW02.OM0SMSEL[2] = " ";
  OM0SW02.OM0SMSEL[3] = " ";
  OM0SW02.OM0SMSEL[4] = " ";
  OM0SW02.OM0SMSEL[5] = " ";
  OM0SW02.OM0SMSEL[6] = " ";
  OM0SW02.OM0SMSEL[7] = " ";
  OM0SW02.OM0SMSEL[8] = " ";
  OM0SW02.OM0SMSEL[9] = " ";
  OM0SW02.OM0SMSEL[10] = " ";
  OM0SW02.OM0SMSEL[11] = " ";
  OM0SW02.OM0SMSEL[12] = " ";
  OM0SW02.OM0SMSEL[13] = " ";
  OM0SW02.OM0SMSEL[14] = " ";

  converseLib.validationFailed(400);
  exit stack; /* display map*/


end // end OM0SS-OCD-CMT

// select dprod.vsyreg01
Function OM0SS-SEL-SY2000()

   /* CANADA 06/28/95*/

     /* get the product/region record*/

  set SQLCA empty;
  WSY2000.XGP-GPC-CD = SYCREC.XGPCD;
  WSY2000.SY-STY-NBR = SYCREC.SY1STNBR;
  WSY2000.SY-COLR-CD-ID = SYCREC.SY2CLRID;
  WSY2000.XDM-DIM-CD = SYCREC.XDMCD;
  WSY2000.WSY2000-OPTION-CODE = "S ";
  WSY2000.WSY2000-SUB-OPTION-CODE = "O";

  call "SY2000" (WSY2000) {isNoRefresh = yes, isExternal = yes};

  if (WSY2000.WSY2000-RETURN-CODE == 0)
    OM0SW01.OM0SW-WSY2000-FND-FLAG = "Y";

      /* move from wsy2000 to vcolor02*/

    SYCREC.PG1SC4CD = WSY2000.PG-SCHED-SPCLT-CD;
    SYCREC.PG1FCTCD = WSY2000.PG-FCST-CD;
    SYCREC.XSECD = WSY2000.XSE-SESN-CD;
    SYCREC.XSNYR = WSY2000.XSN-SESN-YR-RNG;

    SYCREC.SY2POFBD = WSY2000.SY-PROP-OFFER-BDT;
    SYCREC.SY2POFXD = WSY2000.SY-PROP-OFFER-XDT;
    SYCREC.SY2FOFBD = WSY2000.SY-FUTR-OFFER-BDT;
    SYCREC.SY2FOFXD = WSY2000.SY-FUTR-OFFER-XDT;

    SYCREC.XLCCD1 = WSY2000.XLC-LIFE-CYC-CD[1];
    SYCREC.XLCCD2 = WSY2000.XLC-LIFE-CYC-CD[2];
    SYCREC.XLCCD3 = WSY2000.XLC-LIFE-CYC-CD[3];
    SYCREC.XLCCD4 = WSY2000.XLC-LIFE-CYC-CD[4];

    SYCREC.SY2CEDT1 = WSY2000.SY-LIFE-CYC-EDT[1];
    SYCREC.SY2CEDT2 = WSY2000.SY-LIFE-CYC-EDT[2];
    SYCREC.SY2CEDT3 = WSY2000.SY-LIFE-CYC-EDT[3];
    SYCREC.SY2CEDT4 = WSY2000.SY-LIFE-CYC-EDT[4];

    SYCREC.XPRCD = WSY2000.XPR-PROD-TYP-CD;
    SYCREC.XPLCD = WSY2000.XPL-PROD-LN-CD;
    SYCREC.XPCCD = WSY2000.XPC-PROD-CAT-CD;

    SYCREC.SY2FDSMO = WSY2000.SY-FRST-DOM-SLS-MO;
    SYCREC.SY2PDCMO = WSY2000.SY-PROJ-DOM-CLS-MO;
    SYCREC.SY2SSCIN = WSY2000.SY-SFTY-STKCLS-IND;

    SYCREC.OPZHMIND = WSY2000.OP-HMDL-HOT-FL;
    SYCREC.SY2ALNOR = WSY2000.SY-ALW-NEW-ORD-FL;

    sysVar.arrayIndex = 1;
    while (sysVar.arrayIndex <= 6)
      SYCREC.XWHCD[sysVar.arrayIndex] = WSY2000.XWH-WHSE-CD[sysVar.arrayIndex];
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    end

    SYCREC.SY2RPRDI = WSY2000.SY-RSTR-XSO-IND;
    SYCREC.SY2BOSWI = WSY2000.SY-BO-SW;
    SYCREC.SY2BOEDT = WSY2000.SY-BO-SW-EDT;

  else
    if (WSY2000.WSY2000-RETURN-CODE == 02)
      OM0SW01.OM0SW-WSY2000-FND-FLAG = "N";
    else
      if (WSY2000.WSY2000-RETURN-CODE == 98) /* data base is busy*/
  /* next sentence*/
      else
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "OM0S";
        TA1REC.TA1LOC = "OM0SS-SEL-SY2000";
        OM0SW01.OM0SW-WSY2000-GPC-CD = SYCREC.XGPCD;
        OM0SW01.OM0SW-WSY2000-STY-NBR = SYCREC.SY1STNBR;
        OM0SW01.OM0SW-WSY2000-COLR-CD = SYCREC.SY2CLRID;
        OM0SW01.OM0SW-WSY2000-DIM-CD = SYCREC.XDMCD;
        OM0SW01.OM0SW-WSY2000-PROD-REG-CD = WSY2000.XDR-PROD-REG-CD;
        OM0SW01.OM0SW-WSY2000-RETURN-CD = WSY2000.WSY2000-RETURN-CODE;
        TAEREC.TAEDESC1 = OM0SW-WSY2000-POST-1;
        TAEREC.TAEDESC2 = "BAD RETURN CODE FROM SY2000";
        TA1REC.TA1DBASE = "DPROD";
        TA1REC.TA1TBLVU = "SYREG02";
        TA1REC.TA1MAP = "OM0SM001";
        try
          call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
        end
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error - clear ws*/
      end
    end
  end
end // end OM0SS-SEL-SY2000

// SPAIN TRADEMARK CHECK
Function OM0SS-SPAIN-CHECK()
     /* Call to IO0120 to access special feature code */
     /* If the any of the Special feature codes(1-6) is */
     /* '68' then the spain compliant flag is set to 'Y'*/
     /* else it is set to 'N'                           */


  set SQLCA empty;
  set SY1REC empty;

  SY1REC.SY1STNBR = OP2REC.SY1STNBR;
  SY1REC.XGPCD = OP2REC.XGPCD;
  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SY1REC.XFCCD1 == "68" || 
    SY1REC.XFCCD2 == "68" || 
    SY1REC.XFCCD3 == "68" || 
    SY1REC.XFCCD4 == "68" || 
    SY1REC.XFCCD5 == "68" || 
    SY1REC.XFCCD6 == "68")
      OM0SW02.OM0SW-SPAIN-COMP-FLAG[OM0SWF1S] = "Y"; /* compliant prd*/
    else
      OM0SW02.OM0SW-SPAIN-COMP-FLAG[OM0SWF1S] = "N"; /* non-compliant*/
    end
  else
    OM0SS1P(); /* purge temp storage*/
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSTYLE01";
    TA1REC.TA1LOCAT[1] = "S"; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO0120 O"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "M0SS-SPA"; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IN-CHECK"; /* stateme*/
    TA1REC.TA1TBLKE = " "; /* clear table key*/
    OM0SW01.OM0SW-SY1STNBR = OP2REC.SY1STNBR; /* frmt d*/
    OM0SW01.OM0SW-XGPCD = OP2REC.XGPCD; /* frmt display gpc*/
    TA1REC.TA1TBLKE = OM0SW01.OM0SW-OM1KEY; /* order key*/
    TA1REC.TA1TYPE = "DB2"; /* abend type*/
    TA1REC.TA1FUNC = "RETN"; /* abend func*/
    set ERRSQLCA empty; /* clear area*/
    move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* syncpoint rollback*/
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end /* abend module*/
    COMMAREA.CA-USER-WORKAREA-4K = " ";
    COMMAREA.CACURRAP = "OM0M";
    transfer to program "OM0M" passing COMMAREA;
  end
end // end OM0SS-SPAIN-CHECK

// update order header
Function OM0SS-UPDT-ORD-HDR()

   /* ************************************************************/

      /* this updates op1rec*/

   /* ************************************************************/


  call "IO0430" ("U ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good return*/
      /* Tcs include begin 08/25/98*/
    OM0SS-CHECK-UPDATE(); /* for updating corresp vbulk recs*/
      /* Tcs include end   08/25/98*/

  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0S    ";
    TA1REC.TA1LOCAT[1] = "U       ";
    TA1REC.TA1LOCAT[2] = "OM0SS-UP";
    TA1REC.TA1LOCAT[3] = "DT-ORD-H";
    TA1REC.TA1LOCAT[4] = "  IO0430";
    TA1REC.TA1MAP = "OM0SM001";
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    OMWREC.OMWORDN = OP1REC.OP1CUOID;
    OMWREC.OMWSORDN = OP1REC.OP1NORID;
    TA1REC.TA1TBLKE = OMWREC.OMWORD;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

end // end OM0SS-UPDT-ORD-HDR

// UPDATE VBULKS02
Function OM0SS-UPDTE-VBULK()
   /* tcs include begin*/
   /* to update vbulk*/
  set OBFREC empty;
  set SQLCA empty;
  VBULKS02.KUMSTRID = OP1REC.KUMSTRID;
  VBULKS02.XNXCD = OP1REC.XNXCD;
  VBULKS02.XBDCD = OP1REC.XBDCD;
  VBULKS02.OP1CUPO = OP1REC.OP1CUPO;
  VBULKS02.XDVCD = OP1REC.XDVCD;
  VBULKS02.XSOCD = OP1REC.XSOCD;
  VBULKS02.XWHCD = OP1REC.XWHCD;
  VBULKS02.OP1CUNDT = OP1REC.OP1CUNDT;
  VBULKS02.OP1DSADT = OP1REC.OP1DSADT;
  VBULKS02.SP1ID = OP1REC.SP1ID;
  VBULKS02.SM4REPID = OP1REC.SM4REPID;
  OBFREC.OBFTASK = "U ";
  call "VBULKS02" (OBFREC, SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

  else
    TA1REC.TA1LOCAT[1] = "U ";
    TA1REC.TA1LOCAT[2] = "VBULKS02";
    TA1REC.TA1LOCAT[3] = "OMOSS-UPDTE-VBULK";
    TA1REC.TA1DBASE = "DORDB  "; /* data base name*/
    TA1REC.TA1TBLVU = "VBULKS02"; /* data base view*/
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end
   /* tcs include end*/
end // end OM0SS-UPDTE-VBULK

// INITIALIZE OM0S APPLICATION
Function OM0SS01()

    /* SET RECORDS EMPTY*/

  set OMWREC empty;
  set OM0SW01 empty;
  set OM0SW02 empty;
  set OP1REC empty;
  set OP2REC empty;
  set SM1REC empty;
  set SYCREC empty;
  set ERRSQLCA empty;
  set SQLCA empty;
  set TAEREC empty;
  set TA1REC empty;
  set TA2REC empty;
  set TA5REC empty;

  if (OM0SM001.VAGen_EZEMSG == " ")
    set OM0SM001 empty;
  end

  OMWREC.OMWSGRP = COMMAREA.CA-USER-WORKAREA-4K;
  OP1REC.OP1GROUP = OMWREC.OP1GROUP;

  TA1REC.TA1MAP = "OM0SM001";

   /* ----------- Y2K OUT BEGIN -------------*/
   /* MOVE EZEDTE TO OM0SW01.OM0SWDT;  /* ws date*/
   /* MOVE 019 TO OM0SW01.OM0SWD1;     /* ws date century*/
   /* ----------- Y2K OUT END ---------------*/

   /* ----------- Y2K IN BEGIN --------------*/
  XX0XS01();
  OM0SW01.OM0SWDT = XX0XW01.XX0XWDAT; /* ws date*/
   /* ----------- Y2K IN END ----------------*/

  if (OMWREC.OMWPF2CH != "N")
    OMWREC.OMWPF2CH = "N"; /* set temp change flag to 'n'*/
  end

  COMMAREA.CAFROMAP = "OM0S";

  OM0SS1P(); /* purge temp storage*/


end // end OM0SS01

// CHECK FOR PREPACK
Function OM0SS02()

   /* THIS STATEMENT GROUP CHECKS THE PREPACK DATABASE*/
   /* TO SEE IF THE ORDER EXISTS*/

  OMWREC.OMWPKCHF = "N"; /* pack change flag*/
  OMWREC.OMWPPEXF = "N"; /* prepack exists flag*/
  sysVar.arrayIndex = 1;

  if (OP1REC.XGPCD == "03" /* APPAREL ORDER*/
   || OP1REC.XGPCD == "02") /* footwear order*/
    if (OP1REC.XPACD != " ") /* PACK CODE IS PRESENT LOG #697*/
      if (OP1REC.XPACD in XPATBL.XPACD /* IF VALID PACK CODE*/
       && XPATBL.XXXSTAT[sysVar.arrayIndex] == "A")
        if (XPATBL.XPASPFFL[sysVar.arrayIndex] == "Y") /* CUST WANTS PREPACK*/
           /* NEXT SENTENCE   SEE IF ORDER IS ON DBASE*/
        else
          OM0SW01.OM0SWERR = "Y";
          converseLib.validationFailed(664); /* pack code invalid for prepacks*/
          return;
        end
      else
        OM0SW01.OM0SWERR = "Y";
        converseLib.validationFailed(647); /* pack code invalid*/
        return;
      end
    else
      if (converseVar.eventKey is pf11)
        OM0SM001.VAGen_EZEMSG = "PACK CODE IS MISSING";
        OM0SW01.OM0SWERR = "Y";
        return;
      end
    end /* space is a valid pack code*/
  else
    OM0SW01.OM0SWERR = "Y";
    converseLib.validationFailed(665); /* gpc not valid for prepacks*/
    return;
  end

   /* BUILD THE KEY TO SPECIFIED PREPACK TABLE*/

  set OSNREC empty;
  set SQLCA empty;

  OSNREC.XWHCD = OP1REC.XWHCD; /* WAREHOUSE*/
  OSNREC.OP1PARTN = OP1REC.OP1PARTN; /* PART CHAR*/
  OSNREC.OP1CUOID = OP1REC.OP1CUOID; /* ORDER NUM*/
  OSNREC.OP1NORID = OP1REC.OP1NORID; /* NIKE ORD ID*/

  call "IO5650" ("SE", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == -811) /* multi records found*/
    OMWREC.OMWPPEXF = "Y"; /* prepack exists flag*/
    COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OMWREC.OMWPPEXF = "N"; /* prepack exists flag*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        OMWREC.OMWPKCHF = "Y"; /* reseet pack change flag*/
        COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
        OM0SW01.OM0SWERR = "Y";
        converseLib.validationFailed(672); /* prepack db busy try again*/
        return;
      else
        OM0SW01.OM0SWERR = "Y";
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "OM0S    ";
        TA1REC.TA1LOCAT[1] = "SE      ";
        TA1REC.TA1LOCAT[2] = "OM0SS02 ";
        TA1REC.TA1LOCAT[3] = "IO5650  ";
        TA1REC.TA1DBASE = "DORDER  ";
        TA1REC.TA1TBLVU = "VCSPRP01";
        TA1REC.TA1TBLKE = " ";
        OMWREC.OMWORDN = OP1REC.OP1CUOID;
        OMWREC.OMWSORDN = OP1REC.OP1NORID;
        TA1REC.TA1TBLKE = OMWREC.OMWORD;
        try
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        end
        COMMAREA.CAMSGA = "PREPACK DB PROBLEMS";
        COMMAREA.CAMSGB = "ORDER MAY HAVE PREPACK CALL USER ANALYST";
        COMMAREA.CACURRAP = "OM0M";
        transfer to program "OM0M" passing COMMAREA;
      end
    end
  end

end // end OM0SS02

// READ COMPANY RECORD
Function OM0SS03()
  set SQLCA empty;

  OM0SW01.OM0SW-XREFCUST = "N"; /* init customer xref flag*/
  KUCREC.KUCCOID = OP1REC.KUCCOID;

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    if (KUCREC.KUCSKIND != " ") /* xref customer*/
      OM0SW01.OM0SW-XREFCUST = "Y"; /* set customer xref flag*/
    end
  else
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCMPNY";
    TA1REC.TA1LOCAT[1] = "S "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO0240"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "OM0SS03"; /* statement group*/
    TA1REC.TA1TBLKE = OM0SW01.OM0SWKUC;
    OM0SSXS(); /* general abend*/
  end
end // end OM0SS03

// read products and load to temp
Function OM0SS05()


  OP2REC.OP2KEY = OP1REC.OP1KEY; /* format op2rec key*/
  OP2REC.OP2LNINB = 0; /* format line item w/ 0 to get all*/

  OM0SW01.OM0SWEOF = "N"; /* init products eof flag*/



       /* Select products and load temp storage*/

  OM0SS06(); /* ss order by po line number*/
  OM0SS07(); /* get first*/
  while (OM0SW01.OM0SWEOF == "N")
    OM0SS09(); /* load temp storage*/
  end
  OM0SS14(); /* close cursor*/


  OM0SW01.OM0SWF1P = 1; /* default to page 1*/

  OM0SS08(); /* determine omwrec.omwpctal*/


end // end OM0SS05

// SELECT ALL PRODS 4 TEMP STORE
Function OM0SS06()

    /* get items by customer po line number*/

  set SQLCA empty;


  call "IO0440" ("S3", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1LOCAT[1] = "S3"; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO0440"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "OM0SS06"; /* statement group*/
    TA1REC.TA1TBLKE = " "; /* clear table key*/
    OMWREC.OMWORDN = OP2REC.OP1CUOID; /* frmt display cust ord id*/
    OMWREC.OMWSORDN = OP2REC.OP1NORID; /* frmt display nike ord id*/
    TA1REC.TA1TBLKE = OMWREC.OMWORD; /* order key*/
    TA1REC.TA1LOCAT[4] = " "; /* order key*/
    OM0SSXS(); /* general abend*/
  end
end // end OM0SS06

// SELECT NEXT PRODUCT 4 TEMP STR
Function OM0SS07()

   /* get the next product*/

  set SQLCA empty;


  call "IO0440" ("N3", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OM0SW01.OM0SWEOF = "Y";
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VITEM001";
      TA1REC.TA1LOCAT[1] = "N3"; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO0440"; /* i/o mod*/
      TA1REC.TA1LOCAT[3] = "OM0SS07"; /* statement group*/
      TA1REC.TA1TBLKE = " "; /* clear table key*/
      OMWREC.OMWORDN = OP2REC.OP1CUOID; /* frmt display cust ord id*/
      OMWREC.OMWSORDN = OP2REC.OP1NORID; /* frmt display nike ord id*/
      TA1REC.TA1TBLKE = OMWREC.OMWORD; /* order key*/
      TA1REC.TA1LOCAT[4] = " "; /* order key*/
      OM0SSXS(); /* general abend*/
    end
  end
end // end OM0SS07

// DETERMINE OMWREC OMWPCTAL
Function OM0SS08()
   /* calculate total allocation percent- total allocated quantity*/
   /* is accumulated in om0s08 when temp storage is loaded.*/

  OMWREC.OMWPCTAL = 0;

  if (OM0SW01.OP2TALCQ == 0 /* no allocated quantity*/
   || OM0SW01.OP2TONOQ == 0) /* or no on-order quantity*/
     /* next sentence*/
  else
    OM0SW01.OP2TALCQ = OM0SW01.OP2TALCQ * 100;
    OM0SW01.OP2TALCQ = OM0SW01.OP2TALCQ / OM0SW01.OP2TONOQ;
    OMWREC.OMWPCTAL = OMWREC.OMWPCTAL + OM0SW01.OP2TALCQ;
  end


end // end OM0SS08

// LOOP/LOAD TEMP STORAGE
Function OM0SS09()


  set OM0SW02 empty; /* init work record*/

  OM0SW01.OM0SWF1S = 1; /* init temp storage subscript*/
  OM0SW01.OM0SWSUB = 1; /* init omwrec subscript*/

  while (OM0SW01.OM0SWF1S <= 14 /* while processing a page*/
   && OM0SW01.OM0SWEOF == "N") /* and not end of products*/

    OM0SS10(); /* format temp storage record*/

    OM0SW01.OM0SWF1S = OM0SW01.OM0SWF1S + 1; /* increment by +1*/
    OM0SS07(); /* select next product*/
  end


    /* WRITE TEMP STORAGE RECORD*/

  if (OM0SW01.OM0SWF1S > 1) /* at least one product exists*/
    OM0SS1W(); /* write temp storage page*/
  end


end // end OM0SS09

// FORMAT TEMP STORAGE FIELDS
Function OM0SS10()


    /* OM0SM001 MAP SELECTION FIELD*/

  if (OMWREC.OP2LNINB[OM0SWSUB] == OP2REC.OP2LNINB)
    OM0SW02.OM0SMSEL[OM0SWF1S] = OMWREC.OMWSELCD[OM0SWSUB];
    OM0SW01.OM0SWSUB = OM0SW01.OM0SWSUB + 1; /* increment omwrec sub*/
  else
    OM0SW02.OM0SMSEL[OM0SWF1S] = " ";
  end


    /* LINE ITEM NUMBER*/

  OM0SW02.OP2LNINB[OM0SWF1S] = OP2REC.OP2LNINB;
  OM0SW02.OP2CPLNB[OM0SWF1S] = OP2REC.OP2CPLNB;


    /* ACCUMULATE TOTAL ALLOCATED/ONORDER QUANTITIES*/

  OM0SS11();


    /* PRODUCT ID*/

  if (OP2REC.KUIPRDID == " ") /* a customer sytle id exists*/
    OM0SW01.SY1STNBR = OP2REC.SY1STNBR;
    OM0SW01.OM0SWF4 = "-";
    OM0SW01.SY2CLRID = OP2REC.SY2CLRID;
    OM0SW01.OM0SWF5 = "-";
    OM0SW01.XDMCD = OP2REC.XDMCD;
    OM0SW02.OM0SMSID[OM0SWF1S] = OM0SW01.OM0SWSID;
  else
    OM0SW02.OM0SMSID[OM0SWF1S] = OP2REC.KUIPRDID;
  end


    /* READ SYCREC FOR STYLE NAME/COLOR NAME/LIFE CYCLE CODE*/

  OM0SS12();


    /* LINE ITEM STATUS*/

  OM0SW02.OP2LNIST[OM0SWF1S] = OP2REC.OP2LNIST;


    /* TOTAL ON ORDER QUANTITY*/

  OM0SW02.OP2TONOQ[OM0SWF1S] = OP2REC.OP2TONOQ;


    /* TOTAL ALLOCATED QUANTITY OR SHIPPED QUANTITIY*/

  if (OP2REC.OP2TALCQ > 0)
    OM0SW02.OP2TALCQ[OM0SWF1S] = OP2REC.OP2TALCQ;
  else
    OM0SW02.OP2TALCQ[OM0SWF1S] = OP2REC.OP2TSHPQ;
  end


    /* AVERAGE UNIT PRICE*/

  OM0SW02.OP2AUPRC[OM0SWF1S] = OP2REC.OP2AUPRC;


    /* PRICE OVERRIDE FLAG*/

  if (OP2REC.OP2PRCOF == "Y")
    OM0SW02.OP2PRCOF[OM0SWF1S] = "*";
  else
    OM0SW02.OP2PRCOF[OM0SWF1S] = " ";
  end


    /* COORDINATE GROUP FLAG*/

  OM0SW02.OP2CGPCD[OM0SWF1S] = OP2REC.OP2CGPCD;


   /* SPAIN CHANGES   BEGIN : RSURAP   03/15/2000*/
   /* KEY STYLE FLAG COMMENTED AND SPAIN COMPLAINCE*/
   /* FLAG MOVED TO THE SCREEN*/
    /* KEY STYLE FLAG*/

   /* IF OP2REC.OP2KSTYF EQ 'Y';*/
   /* MOVE '*' TO OM0SW02.OP2KSTYF(OM0SWF1S);*/
   /* END;*/
  OM0SS-SPAIN-CHECK();

   /* SPAIN CHANGES   ENDS  : RSURAP   03/15/2000*/

end // end OM0SS10

// ACCUMULATE TOTAL QUANTITIES
Function OM0SS11()


    /* ACCUMULATE TOTAL ALLOCATED QUANTITY*/

  OM0SW01.OP2TALCQ = OM0SW01.OP2TALCQ + OP2REC.OP2TALCQ;

    /* ACCUMULATE TOTAL ON ORDER QUANTITY*/

  OM0SW01.OP2TONOQ = OM0SW01.OP2TONOQ + OP2REC.OP2TONOQ;


end // end OM0SS11

// READ SYCREC 4 STYLE/COLOR DESC
Function OM0SS12()


  set SYCREC empty; /* init record*/
  set SQLCA empty; /* init record*/


    /* FORMAT SYCREC KEY*/

  SYCREC.XGPCD = OP2REC.XGPCD;
  SYCREC.SY1STNBR = OP2REC.SY1STNBR;
  SYCREC.SY2CLRID = OP2REC.SY2CLRID;
  SYCREC.XDMCD = OP2REC.XDMCD;


  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0)

   /* Added for Canada --  June 28, 1995 --*/

    if (OP1REC.XDZ-DATA-DIST-CD == "CA")
      set WSY2000 empty;
      WSY2000.XDR-PROD-REG-CD = "05";
      OM0SS-SEL-SY2000();
      if (OM0SW01.OM0SW-WSY2000-FND-FLAG == "Y") /* Canadian product found*/
        OM0SS13(); /* format style/color names and life*/
      else
        if (WSY2000.WSY2000-RETURN-CODE == "98")
          converseLib.validationFailed(010);
          OM0SW01.OM0SWERR = "Y";
          exit stack;
        else
          if (WSY2000.WSY2000-RETURN-CODE == "02")
  /* next sentence*/
          else
            converseLib.validationFailed(909);
            OM0SW01.OM0SWERR = "Y";
            exit stack;
          end
        end
      end

      /* Added for US apparel --  June 20, 1996 --*/

    else
      if (OP1REC.XGPCD == "03")
        if (COMMAREA.XDVCD == "02" /* userid assigned to europe*/
         || COMMAREA.XDVCD == "03") /* userid assigned to asia*/
          OM0SS13(); /* format style/color names and life*/
        else
          set WSY2000 empty;
          WSY2000.XDR-PROD-REG-CD = "01";
          OM0SS-SEL-SY2000();
          if (OM0SW01.OM0SW-WSY2000-FND-FLAG == "Y") /* product found*/
            OM0SS13(); /* format style/color names and life*/
          else
            if (WSY2000.WSY2000-RETURN-CODE == "98")
              converseLib.validationFailed(010);
              OM0SW01.OM0SWERR = "Y";
              exit stack;
            else
              if (WSY2000.WSY2000-RETURN-CODE == "02")
     /* next sentence*/
              else
                converseLib.validationFailed(909);
                OM0SW01.OM0SWERR = "Y";
                exit stack;
              end
            end
          end
        end
      else
        OM0SS13(); /* format style/color names and life*/
      end
    end
                                   /* cycle code*/
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0S   ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "OM0SS12 ";
      TA1REC.TA1LOCAT[3] = "IO0560  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "OM0SM001";
      TA1REC.TA1DBASE = "DPROD ";
      TA1REC.TA1TBLVU = "        ";
      TA1TBLKE = SYCREC.SYCKEY;
      OM0SSXS(); /* general abend*/
    end
  end



end // end OM0SS12

// FORMAT STYLE/COLOR/LIFE CYCLE
Function OM0SS13()


    /* STYLE NAME*/

  OM0SW02.SY1SSTNM[OM0SWF1S] = SYCREC.SY1SSTNM;


    /* COLOR NAME*/

  OM0SW02.SY2CLRAB[OM0SWF1S] = SYCREC.SY2CLRAB;

  sysVar.arrayIndex = 0;

  while (sysVar.arrayIndex <= 0) /* to get the valid life cycle code*/
    if (SYCREC.XLCCD1 != " "
     && SYCREC.SY2CEDT1 <= OM0SW01.OM0SWDT
     && SYCREC.SY2CEDT1 != 0)
      OM0SW02.XLCCD[OM0SWF1S] = SYCREC.XLCCD1;
      sysVar.arrayIndex = 99;
    else
      if (SYCREC.XLCCD2 != " "
       && SYCREC.SY2CEDT2 <= OM0SW01.OM0SWDT
       && SYCREC.SY2CEDT2 != 0)
        OM0SW02.XLCCD[OM0SWF1S] = SYCREC.XLCCD2;
        sysVar.arrayIndex = 99;
      else
        if (SYCREC.XLCCD3 != " "
         && SYCREC.SY2CEDT3 <= OM0SW01.OM0SWDT
         && SYCREC.SY2CEDT3 != 0)
          OM0SW02.XLCCD[OM0SWF1S] = SYCREC.XLCCD3;
          sysVar.arrayIndex = 99;
        else
          if (SYCREC.XLCCD4 != " "
           && SYCREC.SY2CEDT4 <= OM0SW01.OM0SWDT
           && SYCREC.SY2CEDT4 != 0)
            OM0SW02.XLCCD[OM0SWF1S] = SYCREC.XLCCD4;
            sysVar.arrayIndex = 99;
          else
            OM0SW02.XLCCD[OM0SWF1S] = " ";
            sysVar.arrayIndex = 99;
          end
        end
      end
    end
  end


end // end OM0SS13

// CLOSE PRODUCTS SET
Function OM0SS14()

  call "IO0440" ("C3", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1LOCAT[1] = "C3"; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO0440"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "OM0SS14"; /* statement group*/
    TA1REC.TA1TBLKE = " "; /* clear table key*/
    OM0SSXS(); /* general abend*/
  end
end // end OM0SS14

// BUILD MAP
Function OM0SS15()

    /* LOAD MAP HEADINGS*/

  OM0SS20();


    /* BUILD PRODUCT ARRAY ON MAP*/

  OM0SS25();


    /* IS THIS ORDER A TRANSMITTED AIRBORNE ORDER?*/

  XS0MW01.XS0MWDIV = OP1REC.XDVCD; /* build a pass record*/
  XS0MW01.XS0MWORT = OP1REC.XOTCD;
  XS0MW01.XS0MWDIR = OP1REC.XDSCD;
  XS0MW01.XS0MWCUS = OP1REC.KUCCOID;
  XS0MW01.XS0MWGPC = OP1REC.XGPCD;
  XS0MW01.XS0MWNDT = OP1REC.OP1CUNDT;

  VOPPGM01.XXX-PGM-NBR = "OP1920"; /* date airborne orders*/
  call "IO6600" ("S ", SQLCA, VOPPGM01) {isNoRefresh = yes, isExternal = yes}; /* last transmitted*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VOPPGM01";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "OM0SS15";
    TA1REC.TA1LOCAT[3] = "IO6600";
    TA1REC.TA1TBLKE = "OP1920";
    OM0SSXS();
  end

  XS0MS-CHK-AIRBORNE();

    /* RESET FIELD ATTRIBUTES*/

  OM0SS30();


end // end OM0SS15

// PURGE TEMP STORAGE 1 - PRODUCT
Function OM0SS1P()



   /* purge temporary storage 1*/

  TA5REC.TA5APPID = "OM0S"; /* appl identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/
  call "TA0050" (OM0SW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    OM0SW01.OM0SWF1P = 1;
    OM0SW01.OM0SWF1M = 1;
    OM0SW01.OM0SWF1S = 1;
  else
    TA1REC.TA1LOCAT[1] = "PRG OM0S";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "PROBLEM PURGING TEMP STORAGE";
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end
    converseLib.validationFailed(487); /* database busy*/
    OM0SW01.OM0SWERR = "Y"; /* set error message on*/

  end
end // end OM0SS1P

// READ TEMP STORAGE 1 - PRODUCTS
Function OM0SS1R()



   /* read temporary storage 1*/

  set OM0SW02 empty;

  TA5REC.TA5APPID = "OM0S"; /* appl identification*/
  TA5REC.TA5FNCCD = "R"; /* function code*/
  TA5REC.TA5TSQIX = OM0SW01.OM0SWF1P; /* current page*/
  OM0SW02.OM0SWLEN = 970; /* length of record*/

  call "TA0050" (OM0SW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    OM0SS1P(); /* purge temp storage*/
    TA1REC.TA1LOCAT[1] = "READOM0S";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    OMWREC.OMWORDN = OP1REC.OP1CUOID; /* display cust ord id*/
    OMWREC.OMWSORDN = OP1REC.OP1NORID; /* display nike ord id*/
    TA1REC.TA1TBLKE = OMWREC.OMWORD; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "PROBLEM READING TEMP STORAGE";
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSPF4(); /* master menu*/
    exit program; /* failure master menu*/
  end
end // end OM0SS1R

// UPDATE TEMP STORAGE 1-PRODUCTS
Function OM0SS1U()



   /* update temporary storage 1*/

  TA5REC.TA5APPID = "OM0S"; /* appl identification*/
  TA5REC.TA5FNCCD = "U"; /* function code*/
  TA5REC.TA5TSQIX = OM0SW01.OM0SWF1P; /* current page*/
  OM0SW02.OM0SWLEN = 970; /* length of record*/

  call "TA0050" (OM0SW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    OM0SS1P(); /* purge temp storage*/
    TA1REC.TA1LOCAT[1] = "UPD OM0S";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    OMWREC.OMWORDN = OP1REC.OP1CUOID; /* display cust ord id*/
    OMWREC.OMWSORDN = OP1REC.OP1NORID; /* display nike ord id*/
    TA1REC.TA1TBLKE = OMWREC.OMWORD; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end
    converseLib.validationFailed(487); /* database busy*/
    OM0SW01.OM0SWERR = "Y"; /* set error flag*/

  end
end // end OM0SS1U

// WRITE TEMP STORAGE 1-PRODUCTS
Function OM0SS1W()



   /* write temporary storage 1*/

  TA5REC.TA5APPID = "OM0S"; /* appl identification*/
  TA5REC.TA5FNCCD = "A"; /* function code*/
  OM0SW02.OM0SWLEN = 970; /* length of record*/

  call "TA0050" (OM0SW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    OM0SW01.OM0SWF1M = TA5REC.TA5TSQIX;
  else
    OM0SS1P(); /* purge temp storage*/
    TA1REC.TA1LOCAT[1] = "ADD OM0S";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    OMWREC.OMWORDN = OP1REC.OP1CUOID; /* display cust ord id*/
    OMWREC.OMWSORDN = OP1REC.OP1NORID; /* display nike ord id*/
    TA1REC.TA1TBLKE = OMWREC.OMWORD; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "PROBLEM WRITING TEMP STORAGE";
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSPF4(); /* master menu*/
    exit program; /* master menu failure*/

  end
end // end OM0SS1W

// LOAD MAP HEADINGS
Function OM0SS20()

    /* READ ORDER HEADER*/

  OM0SS21();


    /* CHANGE/INQUIRY MODE*/

  if (OMWREC.OMWCHGFL == "Y")
    OM0SM001.OMTITLE = "CHANGE"; /* change mode*/
  else
    OM0SM001.OMTITLE = "INQUIRY"; /* inquiry mode*/
  end


    /* CURRENT DATE*/

  OM0SM001.OM0SMDTE = VGVar.currentShortGregorianDate;


    /* ORDER NUMBER*/

  OMWREC.OMWORDN = OP1REC.OP1CUOID; /* formated order number*/
  OMWREC.OMWSEP1 = ".";
  OMWREC.OMWSORDN = OP1REC.OP1NORID;
  OM0SM001.OM0SWOID = OMWREC.OMWORD;



    /* CUSTOMER NUMBER*/

  OM0SW01.OM0SWKUC = OP1REC.KUCCOID; /* formated customer number*/
  OM0SW01.OM0SWF2 = ".";
  OM0SW01.OM0SWKUM = OP1REC.KUMSTRID;
  OM0SW01.OM0SWF3 = ".";
  OM0SW01.OM0SWNX = OP1REC.XNXCD;
  OM0SM001.OM0SWCID = OM0SW01.OM0SWCID;


    /* STORE NAME*/

  OM0SM001.KUMSTRNM = OMWREC.KUMSTRNM; /* store name*/


    /* WAREHOUSE*/

  if (OP1REC.XWHCD == " ")
    OM0SM001.XWHSABRV = " ";
  else
    if (OP1REC.XWHCD in XWHTBL.XWHCD)
      OM0SM001.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    else
      OM0SM001.XWHSABRV = " ";
    end
  end


    /* CUSTOMER NEED DATE*/

  OM0SM001.OP1CUNDT = OP1REC.OP1CUNDT; /* customer need date*/


    /* ORDER TYPE*/

  if (OP1REC.XOBCD in XOBTBL.XOBCD) /* if xobcd exists*/
    OM0SM001.XOBABRV = XOBTBL.XOBABRV[sysVar.arrayIndex]; /* format xob abrev*/
  else
    OM0SM001.XOBABRV = "UNKNWN"; /* format with unknwn*/
  end


    /* PERCENT ALLOCATED*/

  OM0SM001.OMWPCTAL = OMWREC.OMWPCTAL; /* customer need date*/


    /* Added for Canada --  June 28, 1995 --*/

  if (OP1REC.XDZ-DATA-DIST-CD == "CA")
    OM0SM001.ZFCCD = OP1REC.ZFC-CRCY-CD;
  end

    /* MAXIMUM PAGE NUMBER*/

  OM0SM001.OM0SMF1M = OM0SW01.OM0SWF1M; /* max page number*/


    /* CANCEL FLAG*/

  OM0SM001.OM0SMXOM = " "; /* clear cancel reason flag*/


    /* CANCEL REENTER FLAG*/

  OM0SM001.OM0SMREL = " "; /* clear cancel reenter flag*/


  if (converseVar.validationMsgNum == 808) /* selection cxld; ord cls now 'au'*/
    /* next sentence*/
  else
    OM0SM001.VAGen_EZEMSG = "to select a record  ---  enter==>>> 's'";
  end

end // end OM0SS20

// READ ORDER HEADER RECORD
Function OM0SS21()

   /* ************************************************************/
   /* *                                                         **/
   /* *    Get the order header.  The key to the                **/
   /* *    order is passed through the COMMAREA into OMWREC     **/
   /* *    and then on to OP1REC.                               **/
   /* *                                                         **/
   /* ************************************************************/

  set SQLCA empty;

  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    OM0SS1P(); /* purge temp storage*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0S    ";
    TA1REC.TA1MAP = "OM0SM001";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VORHDR01";
    OMWREC.OMWORDN = OP1REC.OP1CUOID;
    OMWREC.OMWSORDN = OP1REC.OP1NORID;
    TA1REC.TA1TBLKE = OMWREC.OMWORD;
    TA1REC.TA1LOCAT[3] = "OM0SS21";
    TA1REC.TA1LOCAT[4] = "IO0430";
    OM0SSXS(); /* general abend*/
  end





end // end OM0SS21

// LOAD PRODUCTS ON MAP FROM TEMP
Function OM0SS25()

  OM0SM001.OM0SMF1P = OM0SW01.OM0SWF1P; /* format current page*/

  OM0SS1R(); /* read page of temp storage*/

  OM0SW01.OM0SWF1S = 1; /* init subscript*/

  while (OM0SW01.OM0SWF1S <= 14) /* less than or equal to 14*/
    OM0SM001.OM0SMSEL[OM0SWF1S] = OM0SW02.OM0SMSEL[OM0SWF1S];
    OM0SM001.OP2CPLNB[OM0SWF1S] = OM0SW02.OP2CPLNB[OM0SWF1S];
    OM0SM001.OM0SMSID[OM0SWF1S] = OM0SW02.OM0SMSID[OM0SWF1S];
    OM0SM001.SY1SSTNM[OM0SWF1S] = OM0SW02.SY1SSTNM[OM0SWF1S];
    OM0SM001.SY2CLRAB[OM0SWF1S] = OM0SW02.SY2CLRAB[OM0SWF1S];
    OM0SM001.OP2LNIST[OM0SWF1S] = OM0SW02.OP2LNIST[OM0SWF1S];
    OM0SM001.OP2TONOQ[OM0SWF1S] = OM0SW02.OP2TONOQ[OM0SWF1S];
    OM0SM001.OP2TALCQ[OM0SWF1S] = OM0SW02.OP2TALCQ[OM0SWF1S];
    OM0SM001.OP2AUPRC[OM0SWF1S] = OM0SW02.OP2AUPRC[OM0SWF1S];
    OM0SM001.OP2PRCOF[OM0SWF1S] = OM0SW02.OP2PRCOF[OM0SWF1S];
    OM0SM001.OP2CGPCD[OM0SWF1S] = OM0SW02.OP2CGPCD[OM0SWF1S];
    /* SPAIN CHANGES BEGIN : rsurap - 03/15/2000*/
    /* move the spain complaint flag to map field*/
    /* MOVE OM0SW02.OP2KSTYF(OM0SWF1S) TO OM0SM001.OP2KSTYF(OM0SWF1S);*/
    OM0SM001.OP2KSTYF[OM0SWF1S] = OM0SW02.OM0SW-SPAIN-COMP-FLAG[OM0SWF1S];
    /* SPAIN CHANGES ENDS  : rsurap - 03/15/2000*/
    OM0SM001.XLCCD[OM0SWF1S] = OM0SW02.XLCCD[OM0SWF1S];

    OM0SW01.OM0SWF1S = OM0SW01.OM0SWF1S + 1; /* increment by +1*/
  end


end // end OM0SS25

// check change level security
Function OM0SS26()

    /* see if customer service rep is authorized to change order*/


  if (COMMAREA.CACHGFL == "N")
    converseLib.validationFailed(352); /* id not authorized to chg ord*/
    OM0SW01.OM0SWERR = "Y"; /* set error flag*/
    return;
  else
    if (COMMAREA.CACHGFL == "Y"
     && COMMAREA.CACLVL[1] == "Y") /* nat alloc mgr*/
      converseLib.validationFailed(352); /* id not authorized to chg ord*/
      OM0SW01.OM0SWERR = "Y"; /* set error flag*/
      return;
    else
      if (COMMAREA.CACHGFL == "Y"
       && XS0MW01.XS0MWABF == "Y") /* transmitted airborne order?*/
        converseLib.validationFailed(788); /* updates not allowed*/
        OM0SW01.OM0SWERR = "Y";
        return;
      else
        if (COMMAREA.CACHGFL == "Y")
          OMWREC.OMWPF2CH = "Y"; /* temp change mode*/
          OM0SW01.OM0SWF1S = 14; /* init subscript*/

          OM0SS30(); /* reset attributes*/
          return;
        end
      end
    end
  end


end // end OM0SS26

// RESET FIELD ATTRIBUTES
Function OM0SS30()

    /* SET CURSOR AT PAGE IN CASE OF NO ENTERABLE SELECT CODES*/

  set OM0SM001.OM0SMF1P cursor, initialAttributes; /* page number*/


  OM0SW01.OM0SWF1S = 14; /* init subscript*/

  while (OM0SW01.OM0SWF1S >= 1)
    if (OM0SM001.OM0SMSID[OM0SWF1S] == " ")
      OM0SS32(); /* set row autoskip,dark*/
    else
      OM0SS31(); /* set row defined*/
      if (OM0SM001.OM0SMSEL[OM0SWF1S] == "E")
        set OM0SM001.OM0SMSEL[OM0SWF1S] bold; /* set sel opt bright*/
      else
        set OM0SM001.OM0SMSEL[OM0SWF1S] cursor, initialAttributes;
      end
      if (OP1REC.XOSCD == "AL" /* allocated*/
       || OP1REC.XOSCD == "PA" /* part allocated*/
       || OM0SM001.OP2LNIST[OM0SWF1S] == "XL") /* cancelled item*/
        set OM0SM001.OP2CPLNB[OM0SWF1S] skip;
      end
    end
    OM0SW01.OM0SWF1S = OM0SW01.OM0SWF1S - 1; /* decrement by 1*/
  end

end // end OM0SS30

// SET FIELDS DEFINED
Function OM0SS31()

  if (XS0MW01.XS0MWABF == "Y") /* airborne orders*/
    set OM0SM001.OM0SPF02 skip, invisible; /* no updates allowed*/
    set OM0SM001.OM0SPF20 skip, invisible;
    set OM0SM001.OM0SPF24 skip, invisible;
  else
    if (OP1REC.XDVCD == "02" /* international*/
     && OP1REC.XOCCD == "TR") /* transmitted airborne*/
      set OM0SM001.OM0SPF20 skip, invisible;
      OM0SM001.OM0SPF02 = "2:CHG";
      OM0SM001.OM0SPF24 = "24:CANCEL";
    else
      OM0SM001.OM0SPF02 = "2:CHG";
      OM0SM001.OM0SPF20 = "20:ADD PROD";
      OM0SM001.OM0SPF24 = "24:CANCEL";
    end
  end

  set OM0SM001.OM0SMSEL[OM0SWF1S] initialAttributes; /* select option*/
  set OM0SM001.OP2CPLNB[OM0SWF1S] initialAttributes; /* cust po line item nbr*/
  set OM0SM001.OM0SMSID[OM0SWF1S] initialAttributes; /* product id*/
  set OM0SM001.SY1SSTNM[OM0SWF1S] initialAttributes; /* style name*/
  set OM0SM001.SY2CLRAB[OM0SWF1S] initialAttributes; /* color abrv*/
  set OM0SM001.OP2LNIST[OM0SWF1S] initialAttributes; /* line item status*/
  set OM0SM001.OP2TONOQ[OM0SWF1S] initialAttributes; /* total on-order quantity*/
  set OM0SM001.OP2TALCQ[OM0SWF1S] initialAttributes; /* total allocated quantity*/
  set OM0SM001.OP2AUPRC[OM0SWF1S] initialAttributes; /* average unit price*/
  set OM0SM001.OP2PRCOF[OM0SWF1S] initialAttributes; /* price variance flag*/
  set OM0SM001.OP2CGPCD[OM0SWF1S] initialAttributes; /* coordinate group code*/
  set OM0SM001.OP2KSTYF[OM0SWF1S] initialAttributes; /* key style flag*/
  set OM0SM001.XLCCD[OM0SWF1S] initialAttributes; /* life cycle code*/

  if (OMWREC.OMWCHGFL == "N") /* inquiry mode*/
    set OM0SM001.OP2CPLNB[OM0SWF1S] skip;
  end
  if (OMWREC.OMWPF2CH == "Y") /* temp change*/
    set OM0SM001.OP2CPLNB[OM0SWF1S] initialAttributes; /* cust po line item nbr*/
  end


end // end OM0SS31

// SET FIELDS AUTOSKIP,DARK
Function OM0SS32()

  set OM0SM001.OM0SMSEL[OM0SWF1S] skip, invisible; /* select option*/
  set OM0SM001.OP2CPLNB[OM0SWF1S] skip, invisible; /* cust po line item nbr*/
  set OM0SM001.OM0SMSID[OM0SWF1S] skip, invisible; /* product id*/
  set OM0SM001.SY1SSTNM[OM0SWF1S] skip, invisible; /* style name*/
  set OM0SM001.SY2CLRAB[OM0SWF1S] skip, invisible; /* color abrv*/
  set OM0SM001.OP2LNIST[OM0SWF1S] skip, invisible; /* line item status*/
  set OM0SM001.OP2TONOQ[OM0SWF1S] skip, invisible; /* total on-order quantity*/
  set OM0SM001.OP2TALCQ[OM0SWF1S] skip, invisible;
                                   /* total allocated quantity*/
  set OM0SM001.OP2AUPRC[OM0SWF1S] skip, invisible; /* average unit price*/
  set OM0SM001.OP2PRCOF[OM0SWF1S] skip, invisible; /* price variance flag*/
  set OM0SM001.OP2CGPCD[OM0SWF1S] skip, invisible; /* coordinate group code*/
  set OM0SM001.OP2KSTYF[OM0SWF1S] skip, invisible; /* key style flag*/
  set OM0SM001.XLCCD[OM0SWF1S] skip, invisible; /* life cycle code*/


end // end OM0SS32

// EDIT MAP FIELDS
Function OM0SS35()

    /* EDIT SELECT OPTIONS*/

  OM0SW01.OM0SWSFL = "N"; /* init select option flag*/
  OM0SW01.OM0SWF1S = 14; /* init subscript*/

  while (OM0SW01.OM0SWF1S > 0) /* greater than 0*/
    OM0SS40(); /* edit select option*/
    OM0SW01.OM0SWF1S = OM0SW01.OM0SWF1S - 1; /* decrement by -1*/
  end

  OM0SW01.OM0SWF1S = 14; /* init subscript*/

  while (OM0SW01.OM0SWF1S > 0) /* greater than 0*/
    OM0SS41(); /* edit for po line nbr eq 0*/
    OM0SW01.OM0SWF1S = OM0SW01.OM0SWF1S - 1; /* decrement by -1*/
  end


    /* EDIT PAGE NUMBER*/

  OM0SS45();






  if (converseVar.eventKey is pf20 /* if add product*/
   || converseVar.eventKey is pf24) /* or cancel product*/
    OM0SS90(); /* checks cancel/change security*/
    OM0SS95(); /* checks status for cancel/change*/
  end

  OM0SW01.OM0SWF1S = 14; /* init subscript*/

  if (converseVar.eventKey is pf22) /* customer cross reference*/
    while (OM0SW01.OM0SWF1S > 0) /* greater than 0*/
      OM0SS42(); /* edit selection against customer*/
      OM0SW01.OM0SWF1S = OM0SW01.OM0SWF1S - 1; /* decrement by -1*/
    end
  end

  if (OM0SW01.OM0SWERR == "Y") /* error exists*/
    return;
  end


    /* EDIT PF7/PF8*/

  if (converseVar.eventKey is pf7 /* page backward*/
   || converseVar.eventKey is pf8) /* page forward*/
    OM0SS50();
  end

    /* EDIT PF24*/

  if (converseVar.eventKey is pf24) /* cancel product*/
    OM0SS55();
  end

end // end OM0SS35

// EDIT SELECT OPTIONS
Function OM0SS40()

    /* CHECK TEMP STORAGE FOR MATCH*/

  if (OM0SW02.OM0SMSEL[OM0SWF1S] == OM0SM001.OM0SMSEL[OM0SWF1S])
    /* next sentence*/
  else
    if (OM0SM001.OM0SMSEL[OM0SWF1S] == "S")
      OM0SW01.OM0SWSFL = "Y"; /* set selection flag on*/
    else
      if (OM0SM001.OM0SMSEL[OM0SWF1S] == " ")
         /* next sentence*/
      else
        converseLib.validationFailed(007); /* select option is invalid*/
        OM0SW01.OM0SWERR = "Y"; /* set error flag*/
        set OM0SM001.OM0SMSEL[OM0SWF1S] cursor, bold;
      end
    end
  end


end // end OM0SS40

// edit po line nbr
Function OM0SS41()

      /* edit po line number*/

  if (OM0SW02.OP2CPLNB[OM0SWF1S] == OM0SM001.OP2CPLNB[OM0SWF1S]) /* not chg*/
     /* next sentence*/
  else
    if (OM0SM001.OP2CPLNB[OM0SWF1S] == 0
     || OM0SM001.OP2CPLNB[OM0SWF1S] == " ")
      OM0SM001.OP2CPLNB[OM0SWF1S] = OM0SW02.OP2CPLNB[OM0SWF1S];
      converseLib.validationFailed(651); /* cust po line number cannot be zero*/
      OM0SW01.OM0SWERR = "Y";
      set OM0SM001.OP2CPLNB[OM0SWF1S] cursor, bold;
    end
  end

end // end OM0SS41

// EDIT SELECTION AGAINST CUST
Function OM0SS42()
  if (OM0SM001.OM0SMSEL[OM0SWF1S] == "S")
    if (OM0SW01.OM0SW-XREFCUST == "N") /* not a xref customer*/
      converseLib.validationFailed(928); /* customer is not a xref customer*/
      OM0SW01.OM0SWERR = "Y"; /* set error flag*/
      set OM0SM001.OM0SMSEL[OM0SWF1S] cursor, bold;
    end
  end

end // end OM0SS42

// EDIT PAGE NUMBER
Function OM0SS45()

    /* DETERMINE IF CURRENT PAGE NUMBER IS WITHIN RANGE*/

  if (OM0SM001.OM0SMF1P > OM0SM001.OM0SMF1M /* page # > max page #*/
   || OM0SM001.OM0SMF1P < 1)                /* or less than 1*/
    converseLib.validationFailed(603); /* page number must be between 1 and last page #*/
    OM0SW01.OM0SWERR = "Y"; /* set error flag*/
    set OM0SM001.OM0SMF1P cursor, bold;
    OM0SM001.OM0SMF1P = OM0SW01.OM0SWF1P; /* reset page number*/
    return;
  end


end // end OM0SS45

// EDIT PF7 AND PF8
Function OM0SS50()

    /* PF7 EDIT*/

  if (converseVar.eventKey is pf7
   && OM0SM001.OM0SMF1P == 1) /* page 1*/
    converseLib.validationFailed(192); /* cannot scroll backward*/
    OM0SW01.OM0SWERR = "Y"; /* set error flag*/
  end


    /* PF8 EDIT*/

  if (converseVar.eventKey is pf8
   && OM0SM001.OM0SMF1P == OM0SM001.OM0SMF1M) /* current page = last page*/
    converseLib.validationFailed(191); /* cannot scroll forward*/
    OM0SW01.OM0SWERR = "Y"; /* set error flag*/
  end


    /* CHECK FOR PAGE # CHANGING WHEN PF7 OR PF8*/

  if (OM0SM001.OM0SMF1P != OM0SW01.OM0SWF1P) /* current page has changed*/
    converseLib.validationFailed(597); /* cannot chg page # and pf7/pf8 at same time*/
    OM0SW01.OM0SWERR = "Y"; /* set error flag*/
    set OM0SM001.OM0SMF1P cursor, bold;
    OM0SM001.OM0SMF1P = OM0SW01.OM0SWF1P; /* reset page number*/
  end


end // end OM0SS50

// EDIT PF24 (CANCEL PRODUCT)
Function OM0SS55()

    /* EDIT AGAINST NO DELETE SELECT OPTION*/

  if (OM0SW01.OM0SWSFL == "N") /* no select option for delete*/
    converseLib.validationFailed(602); /* no product selected for cancel*/
    OM0SW01.OM0SWERR = "Y"; /* set error flag*/
    set OM0SM001.OM0SMSEL[1] cursor; /* position cursor*/
    return;
  end


    /* EDIT FOR PAGE # CHANGE AND PF24*/

  if (OM0SM001.OM0SMF1P != OM0SW01.OM0SWF1P) /* page # changed*/
    converseLib.validationFailed(599); /* cannot delete and change page at same time*/
    OM0SW01.OM0SWERR = "Y"; /* set error flag*/
    set OM0SM001.OM0SMF1P cursor, bold; /* position cursor*/
    OM0SM001.OM0SMF1P = OM0SW01.OM0SWF1P; /* reset original page #*/
    return;
  end


    /* EDIT CANCELLATION REASON CODE PROMPT*/

  if (OM0SM001.XOMCD == " ") /* no cancellation reason code entered*/
    converseLib.validationFailed(400); /* enter cancel reason code to cancel*/
    OM0SM001.OM0SMXOM = "CANCEL RSN";
    set OM0SM001.OM0SMXOM normal;
    set OM0SM001.XOMCD cursor, normal;
    OM0SM001.OM0SMREL = "WILL ITEM BE REENTERED?:";
    set OM0SM001.OM0SMREF normal;
    set OM0SM001.OM0SMREL normal;
    set OM0SM001.OM0SMREL skip;
    OM0SW01.OM0SWERR = "Y"; /* set error on to reconverse*/
    return;
  end


     /* EDIT REENTER FLAG - PF24 CANCEL*/

  if (OM0SM001.XOMCD != " ") /* cancel reason code entered*/
    if (OM0SM001.OM0SMREF == "Y"
     || OM0SM001.OM0SMREF == "N")
      OMWREC.OPUCRNTR = OM0SM001.OM0SMREF; /* cancel reenter flag*/
    else
      if (OM0SM001.OM0SMREF == " ")
        converseLib.validationFailed(562); /* fld reqd - must enter y or n*/
        set OM0SM001.OM0SMREF cursor, bold;
        OM0SW01.OM0SWERR = "Y"; /* set error flag on*/
      else
        converseLib.validationFailed(563); /* invalid char - must be y or n*/
        set OM0SM001.OM0SMREF cursor, bold;
        OM0SW01.OM0SWERR = "Y"; /* set error flag on*/
      end
    end
  end


end // end OM0SS55

// UPDATE FROM CONVERSE
Function OM0SS60()

    /* CHECK FOR PF24 (CANCEL PRODUCT)*/

  if (converseVar.eventKey is pf24)
    OM0SS80(); /* process cancellation*/
    return;
  end

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is enter)
    OM0SW01.OM0SWF1S = 1;

    while (OM0SW01.OM0SWF1S <= 14)
      if (OM0SM001.OP2CPLNB[OM0SWF1S] != OM0SW02.OP2CPLNB[OM0SWF1S])
        OM0SS62(); /* update op2rec*/
      end
      OM0SW01.OM0SWF1S = OM0SW01.OM0SWF1S + 1;
    end
  end

  if (OM0SW01.OM0SWERR == "Y")
    return;
  end

    /* MOVE MAP FIELDS TO TEMP STORAGE AND UPDATE*/

  OM0SS61();


    /* CHECK FOR PAGING*/

  if (converseVar.eventKey is pf7)
    OM0SW01.OM0SWF1P = OM0SW01.OM0SWF1P - 1; /* subtract 1 from page*/
    OM0SS25(); /* load products to map from temp*/
    OM0SS30(); /* reset field attributes*/
  end

  if (converseVar.eventKey is pf8)
    OM0SW01.OM0SWF1P = OM0SW01.OM0SWF1P + 1; /* add 1 to page*/
    OM0SS25(); /* load products to map from temp*/
    OM0SS30(); /* reset field attributes*/
  end


    /* ENTER WITH PAGE NUMBER CHANGE*/

  if (converseVar.eventKey is enter
   && OM0SM001.OM0SMF1P != OM0SW01.OM0SWF1P) /* page changed*/
    OM0SW01.OM0SWF1P = OM0SM001.OM0SMF1P; /* format current page #*/
    OM0SS25(); /* load products to map from temp*/
    OM0SS30(); /* reset field attributes*/
    OMWREC.OMWLINES = 0; /* clear number of selected lines*/
    return;
  end

    /* UPDATE OMWREC WITH ALL TEMP STORAGE SELECTIONS*/

  OM0SW01.OM0SWF2P = OM0SW01.OM0SWF1P; /* save page log #697*/
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf22)
    OM0SW01.OM0SWF1P = 1; /* start loading from page 1 of temp*/
    OMWREC.OMWLINES = 0; /* clear number of selected lines*/
    OM0SW01.OM0SWSUB = 0; /* clear omwrec subscript*/
    while (OM0SW01.OM0SWF1M >= OM0SW01.OM0SWF1P
     /* while max page ge curr page*/
     && OM0SW01.OM0SWERR == "N") /* and no errors*/
      OM0SS70(); /* read/process temp storage page*/
      OM0SW01.OM0SWF1P = OM0SW01.OM0SWF1P + 1; /* increment page number*/
    end
    OMWREC.OMWLINES = OM0SW01.OM0SWSUB; /* # of omwrec lines selected*/
  end
  OM0SW01.OM0SWF1P = OM0SW01.OM0SWF2P; /* restore page log #697*/


    /* CHECK FOR ENTER KEY*/

  if (converseVar.eventKey is enter
   && OMWREC.OMWLINES == 0) /* no selects made*/
    OM0SS1P(); /* purge temp storage*/
    OMWREC.OP1GROUP = OP1REC.OP1GROUP;
    if (OMWREC.OMWPKCHF == "Y")
      OM0SS02();
      if (OM0SW01.OM0SWERR == "Y") /* -911 from prepack*/
        return;
      end
      if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
        COMMAREA.CAMSG = "ORDER MAINTAINED - VERIFY PREPACKS";
        COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
        COMMAREA.CACURRAP = "OS0G";
        transfer to program "OS0G" passing COMMAREA;
      else
        COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
        COMMAREA.CACURRAP = "OM0M"; /* transfer to om0m*/
        transfer to program "OM0M" passing COMMAREA;
      end
    else
      COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
      COMMAREA.CACURRAP = "OM0M"; /* transfer to om0m*/
      transfer to program "OM0M" passing COMMAREA;
    end
  end


end // end OM0SS60

// UPDATE TEMP STORAGE FROM MAP
Function OM0SS61()

  OM0SW01.OM0SWF1S = 1; /* init subscript*/

  while (OM0SW01.OM0SWF1S <= 14) /* while less than or equal to 14*/
    OM0SW02.OM0SMSEL[OM0SWF1S] = OM0SM001.OM0SMSEL[OM0SWF1S];
    OM0SW02.OP2CPLNB[OM0SWF1S] = OM0SM001.OP2CPLNB[OM0SWF1S];
    OM0SW01.OM0SWF1S = OM0SW01.OM0SWF1S + 1; /* increment by +1*/
  end


  OM0SS1U(); /* update temp storage page*/


end // end OM0SS61

// UPDATE OP2REC
Function OM0SS62()

    /* update op2rec*/

  OP2REC.OP2KEY = OP1REC.OP1KEY;
  OP2REC.OP2LNINB = OM0SW02.OP2LNINB[OM0SWF1S];

  set SQLCA empty;

  call "IO0440" ("S ", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    OP2REC.OP2CPLNB = OM0SM001.OP2CPLNB[OM0SWF1S];

    set SQLCA empty;
    call "IO0440" ("U ", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
          /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(010); /* database busy - try again*/
        OM0SW01.OM0SWERR = "Y";
        OM0SM001.OP2CPLNB[OM0SWF1S] = OM0SW02.OP2CPLNB[OM0SWF1S];
        return; /* back to s60*/
      else
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VITEM001";
        TA1REC.TA1LOCAT[1] = "U "; /* calling option*/
        TA1REC.TA1LOCAT[2] = "IO0440"; /* i/o mod*/
        TA1REC.TA1LOCAT[3] = "OM0SS62"; /* statement group*/
        TA1REC.TA1TBLKE = " "; /* clear table key*/
        OMWREC.OMWORDN = OP2REC.OP1CUOID; /* frmt display cust ord id*/
        OMWREC.OMWSORDN = OP2REC.OP1NORID;
                                   /* frmt display nike ord id*/
        TA1REC.TA1TBLKE = OMWREC.OMWORD; /* order key*/
        TA1REC.TA1LOCAT[4] = " "; /* order key*/
        OM0SSXS(); /* general abend*/
      end

    end
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      OM0SM001.VAGen_EZEMSG = "DATABASE BUSY - REENTER CHANGES AND TRY AGAIN";
      OM0SW01.OM0SWERR = "Y";
      OM0SM001.OP2CPLNB[OM0SWF1S] = OM0SW02.OP2CPLNB[OM0SWF1S];
      return; /* back to s60*/
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VITEM001";
      TA1REC.TA1LOCAT[1] = "S "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO0440"; /* i/o mod*/
      TA1REC.TA1LOCAT[3] = "OM0SS62"; /* statement group*/
      TA1REC.TA1TBLKE = " "; /* clear table key*/
      OM0SW01.OM0SW-PART-CHAR = OP2REC.OP1PARTN;
      OM0SW01.OM0SW-CUST-ORD-ID = OP2REC.OP1CUOID;
      OM0SW01.OM0SW-NIKE-ORD-ID = OP2REC.OP1NORID;
      OM0SW01.OM0SW-LINE-ITEM-NBR = OP2REC.OP2LNINB;
      TA1REC.TA1TBLKE = OM0SW01.OM0SWKEY; /* order key*/
      TA1REC.TA1LOCAT[4] = " "; /* order key*/
      OM0SSXS(); /* general abend*/
    end
  end

end // end OM0SS62

// LOAD OMWREC WITH SELECTED PROD
Function OM0SS70()


  OM0SS1R(); /* read temp storage page 1*/

  OM0SW01.OM0SWF1S = 1; /* init temp storage sub*/

  while (OM0SW01.OM0SWF1S <= 14 /* less than or equal to a page*/
   && OM0SW02.OP2LNINB[OM0SWF1S] > 0) /* and line item number > 0*/
    if (OM0SW02.OM0SMSEL[OM0SWF1S] == "S")
      OM0SW01.OM0SWSUB = OM0SW01.OM0SWSUB + 1;
      OMWREC.OMWSELCD[OM0SWSUB] = "S";
      OMWREC.OP2LNINB[OM0SWSUB] = OM0SW02.OP2LNINB[OM0SWF1S];
      if (OM0SW01.OM0SWSUB > 900) /* reached 900 selected product limit*/
        converseLib.validationFailed(601); /* selected products exceeds 900 limit*/
        OM0SW01.OM0SWERR = "Y"; /* set error flag on*/
        return;
      end
    end
    OM0SW01.OM0SWF1S = OM0SW01.OM0SWF1S + 1;
  end


end // end OM0SS70

// VALIDATE XOMCD GOTO OM0R IF OK
Function OM0SS80()


    /* VALIDATE THE XOMCD (CANCEL REASON CODE)*/


  OM0SS81(); /* validate cancel reason*/


  if (OM0SW01.OM0SWERR == "Y") /* error found*/
    return;
  end


    /* UPDATE TEMP STORAGE WITH MAP SELECTIONS*/

  OM0SS61(); /* update selection fields*/


    /* UPDATE OMWREC WITH TEMP STORAGE*/

  OM0SS85(); /* update selection fields*/


   /* MOVE 'Y' TO OMWREC.OMWPF2CH;*/


    /* TRANSFER TO OM0R*/

  OMWREC.OP1GROUP = OP1REC.OP1GROUP;

  OMWREC.OP1SUBXL = 0;


    /* GO CANCEL SELECTED PRODUCTS*/

  set OMEREC empty; /* initialize omerec return code*/

  call "OM0R" (OMWREC, OMEREC) {isNoRefresh = yes};

  if (OMEREC.OME-RETURN-CD != "00") /* check om0r return code*/
    OM0SS1P(); /* purge temp storage*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSPF4(); /* master menu*/
    exit program; /* master menu failure*/
  else
    OM0SS-CALL-OZ2090(); /* call oz2090 to update vsohcr01*/
  end

  OMWREC.OMWPKCHF = "Y"; /* pack change flag*/
  COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;

  OM0SM001.XOMCD = " "; /* clear the cancel reason cd field*/
  OM0SM001.OM0SMREF = " "; /* clear the reenter flag field*/

   /* IF OMWREC.OMWPF2CH NE 'N';*/
    /* MOVE 'N' TO OMWREC.OMWPF2CH   ;set temp change flag to 'n'*/
   /* END ;*/


    /* LOOP THROUGH OMWREC AND CHECK FOR ANY PRODUCTS IN ERROR*/

  OM0SW01.OM0SWBXL = "N"; /* init bad cancel flag*/
  OM0SW01.OM0SWSUB = 1; /* init omwrec subscript*/
  while (OM0SW01.OM0SWSUB <= 900) /* while less than 900*/
    if (OMWREC.OMWSELCD == "E") /* product in error*/
      OM0SW01.OM0SWBXL = "Y"; /* set bad cancel flag*/
      OM0SM001.VAGen_EZEMSG = "WARNING -- PRODUCT(S) NOT CANCELLED";
    end
    OM0SW01.OM0SWSUB = OM0SW01.OM0SWSUB + 1; /* increment omwrec subscript*/
  end


    /* CHECK BAD CANCEL FLAG TO FORMAT GOOD CANCEL MESSAGE*/

  if (OM0SW01.OM0SWBXL == "N") /* no products in error from*/
                                   /* cancellation*/
    if (OP1REC.XDVCD == "02" /* international*/
     && OP1REC.XOCCD == "AU") /* transmitted airborne order*/
      converseLib.validationFailed(808); /* selection cxld; ord cls now 'au'*/
    else
      OM0SM001.VAGen_EZEMSG = "ALL SELECTED PRODUCTS WERE CANCELLED";
    end
  end



  set OM0SM001.XOMCD skip, invisible; /* clear cancel reason code*/
  set OM0SM001.OM0SMXOM skip, invisible; /* clear reason code literal*/
  set OM0SM001.OM0SMREF skip, invisible; /* clear reenter flag*/
  set OM0SM001.OM0SMREL skip, invisible; /* clear reenter literal*/


  exit stack;


end // end OM0SS80

// VALIDATE CANCEL REASON
Function OM0SS81()



  if (OM0SM001.XOMCD in XOMTBL.XOMCD /* valid maint reason*/
   && XOMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
    if (XOMTBL.XOMCANCF[sysVar.arrayIndex] == "D" /* decrease*/
     || XOMTBL.XOMCANCF[sysVar.arrayIndex] == "B") /* both - incr/decr*/
      if (XOMTBL.XOMRBKFL[sysVar.arrayIndex] == "Y") /* okay to rebook*/
        OM0SS82(); /* rebook for cancel*/
      else /* xomcd is valid for cancel*/
        OMWREC.XOMCD = OM0SM001.XOMCD;
         /* okay to transfer to 'om0r'*/
      end
    else
      converseLib.validationFailed(334); /* reason does not allow qty reductions*/
      set OM0SM001.XOMCD cursor, modified, bold;
      OM0SW01.OM0SWERR = "Y"; /* set error*/
    end
  else
    converseLib.validationFailed(372); /* invalid cancel reason*/
    set OM0SM001.XOMCD cursor, modified, bold;
    OM0SW01.OM0SWERR = "Y"; /* set error*/
  end


end // end OM0SS81

// REBOOK FOR CANCEL
Function OM0SS82()


  if (OP1REC.XOTCD in XOTTBL.XOTCD /* valid order type*/
   && XOTTBL.XOTFUTRF[sysVar.arrayIndex] == "Y") /* futures*/
    if (OP1REC.XBDCD == "0" /* reg order*/
     || OP1REC.XBDCD == "1" /* cust bulk*/
     || OP1REC.XBDCD == "5") /* cust draw*/

      OM0SS83(); /* validate agcy/customer*/

      if (OM0SW01.OM0SWERR == "Y") /* error found*/
        return; /* go redisplay map*/
      else /* xomcd okay for rebooking*/
        /* 8/6/91 no longer ;checking 45 day cancel window for rebook*/
            /* leave this code in place until the dust settles - when*/
            /* removing this commented out code also deinstall om0ss84*/
        /* OM0SS84         ; check rebook 45 day cancel window*/

        /* IF OM0SW01.OM0SWERR EQ 'Y'       ; error found*/
          /* EZERTN                  ; go redisplay map*/
        /* ELSE                      ; xomcd okay for rebooking*/
        OMWREC.XOMCD = OM0SM001.XOMCD;
         /* okay to transfer to 'om0r'*/
      end
      /* END ;*/
    else
      converseLib.validationFailed(398); /* must be reg or cust bulk/draw*/
      set OM0SM001.XOMCD cursor, modified, bold;
      OM0SW01.OM0SWERR = "Y"; /* set error*/
    end
  else
    converseLib.validationFailed(396); /* can not rebook non-futures*/
    set OM0SM001.XOMCD cursor, modified, bold;
    OM0SW01.OM0SWERR = "Y"; /* set error*/
  end


end // end OM0SS82

// VALIDATE AGENCY/CUSTOMER
Function OM0SS83()


          /* validate agency customer*/

  set SM1REC empty;
  set TA1REC empty;
  set SQLCA empty;

  SM1REC.SM1AGYID = OP1REC.SM1AGYID; /* setup key*/

  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SM1REC.KUCCOID > 0) /* cust is valid*/
       /* next sentence*/
    else /* cust is not valid*/
      converseLib.validationFailed(391); /* agcy/cust not valid for rebooking*/
      set OM0SM001.XOMCD cursor, modified, bold;
      OM0SW01.OM0SWERR = "Y"; /* set error flag on*/
      return;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      converseLib.validationFailed(205); /* agency is not valid*/
      set OM0SM001.XOMCD cursor, modified, bold;
      OM0SW01.OM0SWERR = "Y"; /* set error*/
      return;
    else
      OM0SS1P(); /* purge temp storage*/
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "OM0SS83 ";
      TA1REC.TA1LOCAT[3] = "IO0050  ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "OM0SM001";
      TA1REC.TA1DBASE = "DSLSMN  ";
      TA1REC.TA1TBLVU = "VSAGCY01";
      TA1REC.TA1TBLKE = SM1REC.SM1AGYID;
      OM0SSXS(); /* abort*/
    end
  end

end // end OM0SS83

// UPDATE OMWREC FROM TEMP STORAG
Function OM0SS85()


  OM0SS86(); /* init omwrec 200 prod array*/

  OM0SW01.OM0SWF1S = 1; /* init temp storage sub*/
  OM0SW01.OM0SWSUB = 0; /* init omwrec sub*/

  while (OM0SW01.OM0SWF1S <= 14) /* less than or equal to a page*/
    if (OM0SW02.OM0SMSEL[OM0SWF1S] == "S") /* selection was made*/
      OM0SW01.OM0SWSUB = OM0SW01.OM0SWSUB + 1; /* increment omwrec sub*/
      OMWREC.OMWSELCD[OM0SWSUB] = "E";
      OMWREC.OP2LNINB[OM0SWSUB] = OM0SW02.OP2LNINB[OM0SWF1S];
    end
    OM0SW01.OM0SWF1S = OM0SW01.OM0SWF1S + 1;
  end


end // end OM0SS85

// INITIALIZE OMWREC PRODUCT ARAY
Function OM0SS86()

  OM0SW01.OM0SWSUB = 1;
  while (OM0SW01.OM0SWSUB <= 900)
    OMWREC.OMWSELCD[OM0SWSUB] = " ";
    OMWREC.OP2LNINB[OM0SWSUB] = 0;
    OM0SW01.OM0SWSUB = OM0SWSUB + 1;
  end


end // end OM0SS86

// CHECKS CANCEL/CHANGE SECURITY
Function OM0SS90()

    /* CHECK FOR CANCEL*/

  OMWREC.OMWPF2CH = "N"; /* set pf2 change flag*/

  if (converseVar.eventKey is pf24)
    if (COMMAREA.CACHGFL == "N")
      converseLib.validationFailed(401);
      OM0SW01.OM0SWERR = "Y"; /* set error flag on*/
      return;
    else
      if (COMMAREA.CACHGFL == "Y"
       && COMMAREA.CACLVL[1] == "Y") /* nat alloc mgr*/
        converseLib.validationFailed(401);
        OM0SW01.OM0SWERR = "Y"; /* set error flag on*/
        return; /* cannot cancel*/
      end
      if (COMMAREA.CACHGFL == "Y"
       && XS0MW01.XS0MWABF == "Y") /* transmitted airborne order?*/
        converseLib.validationFailed(789); /* cannot be cancelled*/
        OM0SW01.OM0SWERR = "Y";
        return;
      end
      if (OP1REC.XBDCD == "R")
        converseLib.validationFailed(392);
        OM0SW01.OM0SWERR = "Y"; /* set error flag on*/
        return;
      end
      if (COMMAREA.CACHGFL == "Y")
        if (OP1REC.XDVCD == "02" /* international*/
         && OP1REC.XOCCD == "TR") /* transmitted airborne*/
          OP1REC.XOCCD = "AU"; /* default ord cls to 'au'*/
          OM0SS-UPDT-ORD-HDR();
          return;
        end
      end
    end
  end

    /* CHECK FOR ADD PRODUCT*/

  if (converseVar.eventKey is pf20)
    if (COMMAREA.CACHGFL == "N")
      converseLib.validationFailed(352);
      OM0SW01.OM0SWERR = "Y"; /* set error flag on*/
      return;
    else
      if (COMMAREA.CACHGFL == "Y"
       && COMMAREA.CACLVL[1] == "Y") /* nat alloc mgr*/
        converseLib.validationFailed(352);
        OM0SW01.OM0SWERR = "Y"; /* set error flag on*/
        return; /* cannot cancel*/
      end
      if (COMMAREA.CACHGFL == "Y"
       && XS0MW01.XS0MWABF == "Y") /* transmitted airborne order*/
        converseLib.validationFailed(788); /* updates not allowed*/
        OM0SW01.OM0SWERR = "Y";
        return;
      end
      if (OP1REC.XBDCD == "R")
        converseLib.validationFailed(392);
        OM0SW01.OM0SWERR = "Y"; /* set error flag on*/
        return;
      end
      if (COMMAREA.CACHGFL == "Y")
        if (OP1REC.XDVCD == "02" /* international*/
         && OP1REC.XOCCD == "TR") /* transmitted airborne*/
          converseLib.validationFailed(802); /* order class 'tr' prevents*/
          OM0SW01.OM0SWERR = "Y"; /* addition of product*/
          return;
        end
      end
    end
  end


  if (converseVar.eventKey is pf20
   || converseVar.eventKey is pf24)
    if (COMMAREA.CACHGFL == "Y")
      OMWREC.OMWPF2CH = "Y";
      return; /* ok to cancel or add*/
    end
  end


end // end OM0SS90

// CHECK STATUS FOR CANCEL/CHG
Function OM0SS95()


    /* DOES ORDER STATUS ALLOW CHANGE OR CANCEL ?????*/

  if (converseVar.eventKey is pf24)
    if (OP1REC.XOSCD in XOSTBL.XOSCD
     && XOSTBL.XOSALWXL[sysVar.arrayIndex] == "N") /* cannot change/cancel*/
      converseLib.validationFailed(373);
      OM0SW01.OM0SWERR = "Y"; /* set error flag on*/
      return;
    else

    end
  end


  if (converseVar.eventKey is pf20
   || converseVar.eventKey is pf24)
    if (OP1REC.XOSCD in XOSTBL.XOSCD
     && XOSTBL.XOSALWCH[sysVar.arrayIndex] == "N") /* cannot change*/
      converseLib.validationFailed(368);
      OM0SW01.OM0SWERR = "Y"; /* set error flag on*/
      return;
    end
    if (OP1REC.XSOCD == COMMAREA.XSOCD)
      /* next sentence*/
    else
      converseLib.validationFailed(355); /* can't change, different sales office*/
      OM0SW01.OM0SWERR = "Y"; /* set error flag on*/
      return;
    end
  end


end // end OM0SS95

// EDIT PFKEYS FOR OM0S
Function OM0SSPF()

  OMWREC.OP1GROUP = OP1REC.OP1GROUP;
  COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;


  if (converseVar.eventKey is pf1) /* change reason*/
    COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
   /* tcs change begin 10/29/97*/
   /* MOVE 'OM0G' TO COMMAREA.CACURRAP   to avoid looping in om0g*/
    COMMAREA.CACURRAP = "OM0S";
   /* tcs change end   10/29/97*/
    transfer to program "OM0G" passing COMMAREA;
  end

  if (converseVar.eventKey is pf2) /* change mode request*/
    OM0SS26(); /* check chg level security*/
    return;
  end


  if (converseVar.eventKey is pf3)
    if (OMWREC.OMWPKCHF == "Y") /* pack change flag*/
      OM0SS02();
      if (OM0SW01.OM0SWERR == "Y") /* -911 from prepack*/
        return;
      end
      if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
        COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
        OM0SS1P(); /* purge temp storage*/
        COMMAREA.CAMSG = "ORDER MAINTAINED - VERIFY PREPACKS";
        COMMAREA.CACURRAP = "OS0G";
        transfer to program "OS0G" passing COMMAREA;
      else
        OM0SS1P(); /* purge temp storage*/
        COMMAREA.CACURRAP = "OM0M";
        transfer to program "OM0M" passing COMMAREA;
      end
    else
      OM0SS1P(); /* purge temp storage*/
      COMMAREA.CACURRAP = "OM0M";
      transfer to program "OM0M" passing COMMAREA;
    end
  end

  if (converseVar.eventKey is pf4)
    if (OMWREC.OMWPKCHF == "Y") /* pack change flag*/
      OM0SS02();
      if (OM0SW01.OM0SWERR == "Y") /* -911 from prepack*/
        return;
      end
      if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
        COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
        OM0SS1P(); /* purge temp storage*/
        COMMAREA.CAMSG = "ORDER MAINTAINED - VERIFY PREPACKS";
        COMMAREA.CACURRAP = "OS0G";
        transfer to program "OS0G" passing COMMAREA;
      else
        OM0SS1P(); /* purge temp storage*/
        XSPF4();
        OM0SM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* format error msg*/
        COMMAREA.CATOAP = " "; /* clear app*/
        exit stack;
      end
    else
      OM0SS1P(); /* purge temp storage*/
      XSPF4();
      OM0SM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* format error msg*/
      COMMAREA.CATOAP = " "; /* clear app*/
      exit stack;
    end
  end


  if (converseVar.eventKey is pf11)
    OM0SS02(); /* check prepack*/
    if (OM0SW01.OM0SWERR == "Y") /* -911 from prepack*/
      return;
    end
    OM0SS1P(); /* purge temp storage*/
    COMMAREA.CACURRAP = "OS0G";
    transfer to program "OS0G" passing COMMAREA;
  end

  if (converseVar.eventKey is pf13)
    OM0SS1P(); /* purge temp storage*/
    COMMAREA.CACURRAP = "OM0H";
    transfer to program "OM0H" passing COMMAREA;
  end

  if (converseVar.eventKey is pf20
   && OM0SW01.OM0SWERR == "N") /* no errors*/
    OM0SS1P(); /* purge temp storage*/
    COMMAREA.CACURRAP = "OM0A";
    transfer to program "OM0A" passing COMMAREA; /* add product*/
  end

  if (converseVar.eventKey is pf22 /* customer cross reference*/
   && OM0SW01.OM0SWERR == "N"      /* no errors*/
   && OMWREC.OMWLINES > 0)         /* only 1 product selected*/
    OM0SS1P(); /* purge temp storage*/
    COMMAREA.CACURRAP = "OM0Y";
    transfer to program "OM0Y" passing COMMAREA; /* customer cross reference summary*/
  end

  if (converseVar.eventKey is pf23)
    if (OM0SM001.XOMCD == " ")
      converseLib.validationFailed(941);
      OM0SW01.OM0SWERR = "Y";
    else
      OM0SS-OCD-CMT();
    end
  end

    /* CHECK FOR INVALID PFKEY*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf11
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf20
   || converseVar.eventKey is pf22
   || converseVar.eventKey is pf23
   || converseVar.eventKey is pf24)
     /* next sentence*/
  else
    converseLib.validationFailed(1); /* invalid pf key*/
    OM0SW01.OM0SWERR = "Y"; /* set error flag*/
    return;
  end


    /* ENTER IN CHANGE MODE WHERE OPTION EQ 1  ---> OM0Q*/

  if (converseVar.eventKey is enter
   && OMWREC.OMWLINES > 0     /* product selected*/
   && OM0SW01.OM0SWERR == "N" /* no errors*/
   && OMWREC.OMWCHGFL == "Y"  
   && OMWREC.OMWOPTN == 1)    /* header to summary to detail*/
    OM0SS1P(); /* purge temp storage*/
    COMMAREA.CACURRAP = "OM0Q"; /* product change*/
    transfer to program "OM0Q" passing COMMAREA;
  end


    /* ENTER IN INQUIRY MODE WHERE OPTION EQ 1  ---> OM0O*/

  if (converseVar.eventKey is enter
   && OMWREC.OMWLINES > 0     /* product selected*/
   && OM0SW01.OM0SWERR == "N" /* no errors*/
   && OMWREC.OMWCHGFL == "N"  
   && OMWREC.OMWOPTN == 1)    /* header to summary to detail*/
    OM0SS1P(); /* purge temp storage*/
    COMMAREA.CACURRAP = "OM0O"; /* product inquiry*/
    transfer to program "OM0O" passing COMMAREA;
  end


    /* ENTER IN CHANGE MODE WHERE OPTION NE 5  ---> OM0Q*/

  if (converseVar.eventKey is enter
   && OMWREC.OMWLINES > 0     /* product selected*/
   && OM0SW01.OM0SWERR == "N" /* no errors*/
   && OMWREC.OMWCHGFL == "Y"  
   && OMWREC.OMWOPTN != 5)    /* header to summary to detail*/
    OM0SS1P(); /* purge temp storage*/
    COMMAREA.CACURRAP = "OM0Q"; /* product change*/
    transfer to program "OM0Q" passing COMMAREA;
  end


    /* ENTER IN CHANGE MODE WHERE OPTION EQ 5  ---> OM0P*/

  if (converseVar.eventKey is enter
   && OMWREC.OMWLINES > 0     /* product selected*/
   && OM0SW01.OM0SWERR == "N" /* no errors*/
   && OMWREC.OMWCHGFL == "Y"  
   && OMWREC.OMWOPTN == 5)   
    OM0SS1P(); /* purge temp storage*/
    COMMAREA.CACURRAP = "OM0P"; /* product change*/
    transfer to program "OM0P" passing COMMAREA;
  end


    /* ENTER WHERE OPTION NE 1  ---> OM0O*/

  if (converseVar.eventKey is enter
   && OMWREC.OMWLINES > 0     /* product selected*/
   && OM0SW01.OM0SWERR == "N" /* no errors*/
   && OMWREC.OMWOPTN != 1)    /* header to summary to detail*/
    OM0SS1P(); /* purge temp storage*/
    COMMAREA.CACURRAP = "OM0O"; /* product inquiry*/
    transfer to program "OM0O" passing COMMAREA;
  end


end // end OM0SSPF

// abort routine
Function OM0SSXS()



      /* *********************************************************/
      /* * online abort routine for OP0N application            **/
      /* *********************************************************/

  OM0SS1P(); /* purge temp storage*/


  TA1REC.TA1TYPE = "DB2"; /* abend type*/
  TA1REC.TA1FUNC = "RETN"; /* abend func*/
  set ERRSQLCA empty; /* clear area*/
  move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* synpoint rollback*/
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes}; /* abend module*/
  COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
  XSPF4(); /* master menu*/
  exit program; /* master menu failure*/



   /* *************************************************************/
end // end OM0SSXS

//*** RECORD=OM0SW01 ****
// * Maintenace History
// * 03/15/2000      Rsurap   As a Part of Spain Trademark
// *                          changes OM0SW-OM1KEY,OM0SW-SY1STN
// *                          BR, OM0SW-XGPCD was added .
// ************************************************************
// ***********************
Record OM0SW01 type basicRecord
  5 OM0SWGRP OM0SWGRP ; 
    10 OM0SWSFL OM0SWSFL ; 
    10 OM0SWBXL OM0SWBXL ; 
    10 OM0SWEOF OM0SWEOF ; 
    10 OM0SWSUB OM0SWSUB ; 
    10 OM0SWF1M OM0SWF1M ; 
    10 OM0SWF1P OM0SWF1P ; 
    10 OM0SWF2P OM0SWF2P ; 
    10 OM0SWF1S OM0SWF1S ; 
    10 OM0SWERR OM0SWERR ; 
    10 OM0SWCID OM0SWCID ; 
      15 OM0SWKUC OM0SWKUC ; 
      15 OM0SWF2 OM0SWF2 ; 
      15 OM0SWKUM OM0SWKUM ; 
      15 OM0SWF3 OM0SWF3 ; 
      15 OM0SWNX OM0SWNX ; 
    10 OM0SWDT OM0SWDT ; 
      15 OM0SWD1 OM0SWD1 ; 
      15 OM0SWD2 OM0SWD2 ; 
    10 OM0SWSID OM0SWSID ; 
      15 SY1STNBR SY1STNBR ; 
      15 OM0SWF4 OM0SWF4 ; 
      15 SY2CLRID SY2CLRID ; 
      15 OM0SWF5 OM0SWF5 ; 
      15 XDMCD XDMCD ; 
    10 OP2TALCQ OP2TALCQ ; 
    10 OP2TONOQ OP2TONOQ ; 
    10 OM0SW-XREFCUST OM0SW-XREFCUST ; 
    10 OM0SWKEY OM0SWKEY ; 
      15 OM0SW-PART-CHAR OM0SW-PART-CHAR ; 
      15 OM0SW-BLANK1 OM0SW-BLANK1 ; 
      15 OM0SW-CUST-ORD-ID OM0SW-CUST-ORD-ID ; 
      15 OM0SW-BLANK2 OM0SW-BLANK2 ; 
      15 OM0SW-NIKE-ORD-ID OM0SW-NIKE-ORD-ID ; 
      15 OM0SW-BLANK3 OM0SW-BLANK3 ; 
      15 OM0SW-LINE-ITEM-NBR OM0SW-LINE-ITEM-NBR ; 
    10 OM0SW-WSY2000-FND-FLAG OM0SW-WSY2000-FND-FLAG ; 
    10 OM0SW-WSY2000-POST-1 OM0SW-WSY2000-POST-1 ; 
      15 OM0SW-WSY2000-GPC-CD OM0SW-WSY2000-GPC-CD ; 
      15 OM0SW-WSY2000-STY-NBR OM0SW-WSY2000-STY-NBR ; 
      15 OM0SW-WSY2000-COLR-CD OM0SW-WSY2000-COLR-CD ; 
      15 OM0SW-WSY2000-DIM-CD OM0SW-WSY2000-DIM-CD ; 
      15 OM0SW-WSY2000-PROD-REG-CD OM0SW-WSY2000-PROD-REG-CD ; 
      15 OM0SW-WSY2000-RETURN-CD OM0SW-WSY2000-RETURN-CD ; 
    10 OM0SW-OM1KEY char(8) ; // Key for sy1rec
      15 OM0SW-SY1STNBR char(6) ; // style
      15 OM0SW-XGPCD char(2) ; // gpc
end // end OM0SW01

//*** RECORD=OM0SW02 ****
// *     Temporary storage record used to hold selected
// *     for the OM0M application
// *
// *     CSP Record: OM0MW02
// *
// *     OM0M Statement Groups: OM0MS1P - Purge
// *                            OM0MS1W - Write
// *                            OM0MS1R - Read
// *                            OM0MS1U - Update
// *
// *    Maintenance  History
// *   03/15/2000        Rsurap  1. Replace OP2KYSTF by
// *                             OM0SW-SPAIN-COMP-FLAG as part
// *                             of SPain Trademark Changes.
// ************************************************************
// ***********************
Record OM0SW02 type basicRecord
  5 OM0SWGP2 OM0SWGP2 ; 
    10 OM0SWLEN OM0SWLEN ; 
    10 OM0SWROW OM0SWROW [14] ; 
      15 OM0SMSEL OM0SMSEL ; 
      15 OP2CPLNB OP2CPLNB ; 
      15 OP2LNINB OP2LNINB ; 
      15 OM0SMSID OM0SMSID ; 
      15 SY1SSTNM SY1SSTNM ; 
      15 SY2CLRAB SY2CLRAB ; 
      15 OP2LNIST OP2LNIST ; 
      15 OP2TONOQ OP2TONOQ ; 
      15 OP2TALCQ OP2TALCQ ; 
      15 OP2AUPRC OP2AUPRC ; 
      15 OP2PRCOF OP2PRCOF ; 
      15 OP2CGPCD OP2CGPCD ; 
      15 OM0SW-SPAIN-COMP-FLAG char(1) ; // SPAIN COMPLAICE FLAG
      15 XLCCD XLCCD ; 
end // end OM0SW02

// suborder selection
DataItem OM0SMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// merged style id
DataItem OM0SMSID char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0SW-BLANK1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0SW-BLANK2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0SW-BLANK3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0SW-CUST-ORD-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0SW-LINE-ITEM-NBR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0SW-NIKE-ORD-ID num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0SW-PART-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0SW-WSY2000-COLR-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0SW-WSY2000-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sy2000 call rtn flag
DataItem OM0SW-WSY2000-FND-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0SW-WSY2000-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sy2000 posting area
DataItem OM0SW-WSY2000-POST-1 char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0SW-WSY2000-PROD-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0SW-WSY2000-RETURN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0SW-WSY2000-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0SW-XREFCUST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bad cancel flag
DataItem OM0SWBXL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// merged cust/store id
DataItem OM0SWCID char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws date century
DataItem OM0SWD1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws date yymmdd
DataItem OM0SWD2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws date
DataItem OM0SWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product eof flag
DataItem OM0SWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem OM0SWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max page number
DataItem OM0SWF1M num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current page number
DataItem OM0SWF1P num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage subscript
DataItem OM0SWF1S num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// filler is '.'
DataItem OM0SWF2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working page number log #697
DataItem OM0SWF2P num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// filler is '.'
DataItem OM0SWF3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler is '-'
DataItem OM0SWF4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler is '-'
DataItem OM0SWF5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// o/e group ws
DataItem OM0SWGP2 char(970)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// o/e group ws
DataItem OM0SWGRP char(115)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0SWKEY char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company id
DataItem OM0SWKUC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// store id
DataItem OM0SWKUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// temp storage lgnth
DataItem OM0SWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nike dept code
DataItem OM0SWNX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// temp storage row
DataItem OM0SWROW char(69)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select option flag
DataItem OM0SWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// merged style id
DataItem OM0SWSID char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// omwrec subscript
DataItem OM0SWSUB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

