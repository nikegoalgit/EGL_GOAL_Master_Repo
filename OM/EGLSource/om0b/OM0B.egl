package om0b;
import av.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import iv.common.*;
import ko.common.*;
import ku.common.*;
import ni.common.*;
import nl.common.*;
import ob.common.*;
import oi.common.*;
import om.common.*;
import op.common.*;
import os.common.*;
import oz.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=OM0B ****
// ;
// nike order entry - product size detail
// 
// overview: user keys in quantity by size for up to 40 sizes
// on the product.  the screen contains only 20 sizes, so
// we may show the screen twice.  then we edit screen 1
// top part only, and edit the entire screen 2.
// 
// this application may be executed for up to 6 products sent
// from the multiple product header screen.  the minimum
// number products is 1, from the single product header screen.
// 
// the screen data may come from 'initialization' of a new
// product, or from a product already entered - 'review' mode.
// both build data into op3rec in working-storage.
// the map is always built from op3rec.
// 
// there is no required data on this screen.  quantities in the
// requested first size & last size fields are edited as a
// warning only.  when quantity is entered, and this applic.
// came from the multiple product header (data entry form flow)
// then the quantity entered must equal the requested qty.
// either the qty entered or the qty requested may be changed
// to ensure the match.
// 
// the statement groups are numbered as follows:
//      s1x - first used in process p010
// 
//      s2x - first used in process p020
// 
//      s3x - first used in process p030
// 
//      s5x - first used in process p050
// 
//      s4x - first used in process p060 -
//            edits the top half of the screen -
//            requested total qty, qty by size & price by size.
//      s6x - first used in process p060
//      s7x - first used in process p060
//            edits the bottom half of the screen -
//            'price for all' through 'forecast'.
// 
//      s8x - exit flows, out of this application
// 
//      s9x - db2 data base access
// 
// ***********************************************************
// 
// sub-programs called:
// 
//    db1000   io0440   mn0s
//    io0040   io0460   om0a
//    io0080   io0470   om0g
//    io0090   io0560   om0m
//    io0110   io0570   om0n
//    io0240   io0900   ta0020
//    io0360   io0900   ta0040
//    io0380   io1450
//    io0420   io2640
//    io0430   io4500
//             io4590
// ************************************************************
// 
// files updated;
// 
//    oebrec  nil zero price audit record
//    op8rec  item table
//    op3rec  w/s item table
//    opbrec  db1000 formatter
//    op9rec  order tag table
//    op1rec  order header table
//    opfrec  audit report
//    op5rec  address table
//    om0bw04 w/s version of op1rec
// ************************************************************
// 
// date created: june 1986
//       author: bcourt
// 
// maintenance history:
// 
//    date     by whom     overview of changes made
//  --------  ----------  ------------------------------------
//  06-01-86  bcourt      initial code
//  09-16-86  jvande      changed to use warehouse required
//                        flag from direct ship table.
//  01-19-87  jvande **** hard coded s21 and s79 for special sl
//                        sales. skip 1-whs model edit
//  03-29-87  tmai        modified program to allow any service
//                        rep to add product to promo orders
//                        with the universal owner group code
//  04/06/87  jvande      changed sub, to fix status properly
//                        from new drawn item.
//  05/21/87  ssayew      changed criteria for writing audit
//                        record; added order type, need date
//                        and warehouse to audit record (s7c,
//                        s82, s83, w01, 050).
// 05/18/87   jvande      allow xdscd on bulk/draws as long as
//                        ds code requires a warehouse code.
// 07/10/87   jvande      init ezetst in s10 for xot, got not
//                        found out of the blue, this worked??!
// 07/20/87   jvande      mising subscript in swr against xds.
// 07/22/87   obecke      added qual abrv to screen
// 09/14/87   jvande      support xsdcd - m001, 020, 050
// 09/22/87   tfox        added code to 040 to compare uom when
//                        trying to dup sizes. ie: no dup of
//                        size run if uom not the same.
// 10/06/87   tfox        added code to 050,s6e,s47 for chgs to
//                        org ord qty definition for futures.
// 10/15/87   jvande      fixed bug from 10/6 change. in 050
//                        let ezetst go 1 past row sought.
// 01/15/88   jhh         added flexible bulk/draw to sub/s10/
//                        s47/s52/s6e/s61/s78/s82/s9a/020/040/
//                        050
// 02/23/88   gwells      check xomtbl.xxxstat. if status is
//                        inactive, display error - s70.
// 04/14/88   gwells      production deadline table - s7c & 050
//                          replaced xpdtbl with call to
//                          io2560 - dorder.vcutof01.  edit
//                          need date versus prod deadline
//                          via this module.  added opjrec &
//                          oplrec.
// 05/10/88   tfox        chg cd in s70 to only edit owner grp
//                        if owner grp is required
// 09/09/88   skott       added phased availability. includes:
//                        pushed need date, quantity versus
//                        availability checks.  not decrements
//                        op1rec.op1cundt = original need date,
//                        om0bw01.op1cundt = variable need dt.
// 09/20/88   gwells      check xomtbl cancel flag for 'a' or
//                        'b' on add product - s70.
// 09/23/88   gwells      check xomtbl cancel flag for 'a' or
//                        'b' on add product - s7c.
// 10/04/88   dwalke      added smart/flex avail bypass to sga
// 10/05/88   obecke      built hook to call op1610.  s6e does
//                        call.  added s6k to load pass record
//                        & added s6l to handle return codes.
// 10/20/88   skott       call op02 or op1610 for decrementing
//                        or allocating from s6e.
// 12/02/88   skott       call op1610 for decrementing for any
//                        order type.
// 12/13/88   dwalke      allow up to two year in advance
//                        need date - s78 bug #101
// 12/13/88   obecke      do not abend when avail recs are not
//                        available.  show msg and post error
//                        instead.  #105.  s6l.
// 12/21/88   skott       check opnrec.opnhar = 'y' before
//                        op1610 call.
// 01/06/89   skott       check product offering date in 050
//                        and s70 instead of om0a. added stmt
//                        grps sew, sex, sey, sez, s4a, s4b.
//                        modified s40, s70, 050, 060.
// 01/09/89   dwalke      add segmented transaction id to appl.
// 01/12/89   rdavis      change test if sample order from
//                        harded coded order types to use
//                        sample flag from order type tbl - sez
// 01/16/89   skott       if xdvcd = '03' (promo) skip offering
//                        date check -sez
// 01/20/89   skott       if draw order skip offering
//                        date check -sez
// 01/24/89   obecke      added oppdecav flag to opprec.  y=
//                        ck & decrement avail; n= ck only.
//                        om0b always uses y.  s6k.  #112.
//                        added xoccd to opprec.  ie and s1
//                        order classes are to always decrement
//                        regardless of 30-day window. #111
// 02/02/89   craine      chg sub, s47 always move zero to
//                        orig qty for rebook draws.
// 02/21/89   JWOOD       ADDED NONCSP OPTION TO CALLS
// 03/15/89   skott       new audit records showing added
//                        qtys at the size level for products
//                        added after production deadline.
//                        opurec, vorder.voraud01.  s8c, s8d,
//                        s82.
// 03/22/89   craine      remove use of opwrec from om0bs7c
//                        use map for whse, omwrec for xqacd
// 04/01/89   tfox        chg sycrec to sy2tmp in sew,sex,sey,
//                        sgl,shm,sov,s21,s22,s23,s24,s4b,s40,
//                        s64,s7c,s77,s79,s94,s95,s96,040,050,
//                        060. added hot model logic to 050,
//                        060. added new stmt grps shm,sov.
// 04/10/89   tfox        added logic to force recheck of hot
//                        model when need date is pushed out
//                        s64,shm,sov,s78.
// 04/11/89   mbarna      move zero to store and department
//                        on select to dorder.vhotcu01-shm.
// 04/24/89   skott       added code to display xdmcd. s82,050
//                        s7c, s6k
// 05/17/89   obecke      divisions added to xottbl. s23.
// 05/19/89   scantr      allow price override of zero if prod
//                        if raw material and cmpy acct class
//                        is salesmen or rep samples. s61,s6h,
//                        s6z, s45.  bug #189.
// 06/15/89   schase      added call to credit (cc1070) for new
//                        items added. s6e
// 08/03/89   rdavis      default owner group to '00' for whse
//                        '03'. se #203. om0b050, s81.
// 08/07/89   jbecke      omit hot model processing if division
//                        is '03' or prod quality is not '01'.
// 08/29/89   ssteph      initilize credit fields when creating
//                        orders. s7f.
// 09/01/89   craine      remove opfrec code (dorder.vopaud01)
// 09/05/89   schase      for NIL orders with first quality,
//                        '05' & '10' life cycles, check offer
//                        dates in product restriction table.
//                        050, s70, created sod & om0bw05.
// 09/06/89  gwells       display and decrement availability
//                        for futures if the order class code
//                        is 'gf'(golf) - sga.  move xoccd to
//                        the opprec - s6k.
// 09/07/89  rcoron       allow for duplicate products for
//                        promos only if the units of measure
//                        or the owner group codes are dif-
//                        ferent.  om0bs9a.
// 09/26/89  rcoron       #244  added the facility to read
//                        all colors from the sales program
//                        product file. (om0bs99)
// 10/31/89  scantr       added code for nil pricing.
//                        changed s20,s22,s24,s6e,s61,s97,w01,
//                        010,020.  added s9b-s9k.
// 11/14/89  rcoron       database changes. modified om0bsga
//                        because of name changes in av1rec.
// 11/21/89  oricha       #265.  allow coord groups on cust
//                        bulks & cust draws.  050.
// 11/30/89  rcoron       allow price by size changes to smart
//                        bulk/draw orders as well as for nil
//                        orders for in-development products.
// 12/05/89  scantr       added logic for comp nbrs to s20,s21
//                        s22,s24,s6a,s6e,s6h,s6n,s6o,s61,s7c,
//                        s7h,s9c,s9g,s97,w01,020.
// 12/06/89 tfox          added code to s22 to 0 price in devel
//                        products.
// 12/07/89  dwalke       added code to 060 to stop
//                        the change of terms,discounts, price
//                        on salesman orders. bug 270
// 12/19/89  cgrice       don't allow prices to be changed to
//                        zero.  s6h,s7a,s7b,s45,s9d
// 01/08/90  cgrice       bug #222 - cancelled bulk draws were
//                        adding back to wrong suborder.  s6e
// 02/19/90  oricha       add 'fill lost demand' to map and
//                        code. m001,s70,s8e,s82,050.
// 03/07/90  schase       bug #305 - allow price overrides on
//                        sales programs if division = '02'.
//                        s61.
// 04/04/90  cgrice       renamed op1blkcd to xbdcd, and
//                        removed the sp3rec
//                        s10, sga, sez, s9a, s98
// 05/15/90  mgatre       added order adjustment validation
//                        logic - e220
//                        new records: pazrec, pagrec
//                        new code:    soa
//                        changes:     050, 060
// 05/31/90  BWATSO       Brand code changes.  Changed S6K.
// 06/14/90  mgatre       eliminate invoice only orders from
//                        order adjustment requirements - 050
// 07/11/90  mgatre       add order adjustment number override
//                        new record: fb9rec (IO3650)
//                        new code:    sob
//                        changes:     050
// 07/30/90  mblail       added check for default handling code
//                        in 020.
// 08/07/90  jwood        changed om0bs6e,s7f to use xcscd as a
//                        character field
// 08/21/90  schase       Changed 10 suborder limit to 99. S7F.
// 10/30/90  tfox         removed op01 subroutine. replaces it
//                        with ob1210 sub. stmt grps chged are
//                        sra,srb,s32,w01,210,221,254,321,44a,
//                        44c,460,49d,490,494.
// 11/09/90  rdavis       database changes. renamed xsdcd to
//                        pc2inseg, xsacd to xegcd in op2rec.
//                        init new item fields op1alfdt, xafcd.
//                        in op2rec.0b0m005,sga,s85,s6k,020,
//                        050.
// 11/12/90  dharri       bug# 409 - add logic to handle return
//                        codes other than 0 & 1 from ob1210.
//                        stmt om0bs52.
// 11/27/90 craine        chg'd s40 to include 'c/ov' when edit
//                        ing avail conditions.
// 12/12/90  craine       reformat of spec code and package cd
//                        for decrementing availability. s6k.
//                        log #460.
// 12/17/90  dflesh       made comment change in s7c for whse
//                        '51'.  log #469.
// 12/29/90  jloyer       modified to process blank bulks...
//                        om0bsga, s10, 010, 020, 050
//                        new: om0bs2b; calls io5480 which
//                                    accesses davail.vblnkp01
//                             om0bs2c; calls io5470 which
//                                    accesses davail.vblnks01
//                             om0bs8a; get xowcd abrev
//                        new recs: avirec; pass keys to io5480
//                                  avgrec; rtn data frm io5480
//                                  avhrec; rtn data frm io5470
// 01/10/91  schase       added check for whse '51' to format
//                        the map with '00'. 050, s81.
// 01/26/91  swatso       Changed xchcd in s6e and s7f from
//                        numeric to alpha. (ie: 00 to '00')
// 02/28/91  dmeier       modified to process blank/finish
//                        draws: om0bsga, om0bs10, om0bs2c,
//                        om0bs24, om0b020, om0b050, om0bw01
//                        new: om0bs12 - set w/s bulk codes
//                             om0bs13 - set w/s draw codes
// 04/17/19  tfox         menu services 020,050,map,s6e,s62,s70
//                        s73.
// 05/20/91  dflesh       log #535 expand price for all sizes
//                        field.  change to map and s53.
//                        log #645 change msg #547 to #687 -if
//                        pf6 and order is for slsmn. don't
//                        allow price change.
// 05/20/91  tfox         menu services s6e
// 05/21/91  schen        log #554 - data base changes
//                        deleted kuprec from appl. also delete
//                        codes that read vcugrp01 and check
//                        for default handling code in om0b020.
// 05/28/91  craine       log # don't force product to be rejec
//                        ted when total qty is 0, S6C, S64.
// 06/10/91  bbake2       database changes - kucrec, kufrec,
//                        op1rec, op2rec, op3rec, sycrec,
//                        xbdtbl, w02, w03, w04
//                        rename ylbcd to pwrlbcd - 050
// 06/17/91  craine       log#650 - chg OM0BSOD to edit nil fut
//                        offering dates. Log #651 - don't edit
//                        offering dates for any futures orders
//                        with 'EARL' salesprogram and 12/1/91
//                        need date.
// 06/18/91  bbake2       screened products - changes to:
//                        sga, s20, s6k, s62, s7c, s70,
//                        020, 050, w01.  added sta, stb, stc,
//                        std, st1, st2, st3, st5, st6, st7,
//                        st8, st9.  added xprtbl, oecrec to
//                        appl.  changed s52 to use
//                        omarec.omaerr and removed oparec
//                        from appl.
// 06/26/91  bbake2       st9: don't let prop orders w/styles
//                        fitting into xow pgms do 60-day
//                        calc for blank avail.
// 10/08/91  dmeier       db2 changes - removed references to
//                        op1rec.op1owrdt and opurec.xxxpgmno
//                        (became opurec.xxxpgmnb). s85, s8c
//                         added xgpcd to xhdtbl for key. s73
//                         050, w01
// 10/25/91  dmeier       log #695 - don't allow orders to be
//                        placed on draws against blank bulks
//                        for sizes that are valid for the
//                        blank but not the finished style
//                       (020, 040)
// 12/09/91  jjohn2       References to OM0BWPDT has been
//                        removed due to a change in availabil-
//                        ity that returns available quantities
//                        with regard to the "lead time to
//                        screen". w01, SGA, S20, S6K, S7C, STC
//                        ST3, ST9.
// 01/08/92  schase       When a new suborder is created for a
//                        customer bulk record, insert a new
//                        corresponding dordb.vbbulk01 record.
//                        s6e,w01,om0bs-deter-jcps, om0bs-get-
//                        spec-cu,s10,om0bs-insert-bbulk.
// 01/09/92  jwils1       added availability control table
//                        processing to check level indicator.
//                        also added processing in SEZ to by-
//                        pass offering date edits for promo
//                        (09) and protek (03) warehouses.
// 01/10/92  bbake2       log#698 - open need date and warehous
//                        lots of procs, see log book.
// 01/21/92  bbake2       log#736 - open need date for customer
//                        smart and flex bulks (060) and skip
//                        editing need date against dont ship
//                        after date for apparel (s78)
// 01/27/92  bbake2       log#737 - initialize #of draws when
//                        splitting a bulk suborder (s7f).
// 01/29/92  trober       removed order adjustment number from
//                        the map.  Instead of displaying the
//                        order adjustment number a warning
//                        message will be displayed.  deleted
//                        i/o mod io5140, pagrec, pazrec and,
//                        om0bsoa.  changed statement groups
//                        om0bs-get-cutoffs, s7c, and 050.
// 02/07/92  jwils1       added  custom logo product prcsing.
//                        sga,s20,s6k,s7c,s40,s47,s52,s53,s6e.
// 02/24/92  jwils1       remove om0bs-get-sea-bdt and
//                        use 0 in place of xsntbl.xsnbdt to
//                        access av4rec - om0bs-get-lev-ind.
//                        remove av6rec from tbl & addl rec lst
// 03/04/92  jwils1       remove xsntbl from table and records
//                        list.
// 03/11/92  bbake2       database changes.  changed:
//                        -om0bw02 for new layout of op2rec
//                        -om0bw03 for new layout of op3rec
//                        -om0bw04 for new layout of op1rec
//                        -s9d, s9l, table and addl recs list,
//                         to read acct reg cd from vdstrb01
//                         (it was removed from kucrec)
// 04/08/92  jhecke       correct availability for cond=17
//                        sold out and blanks availability.
//                        s40.
// 06/08/92  bbake2       data base changes to W02 & W03
//                        for new field OP-CUST-LABL-PRTFL
//                        and to 020 & s79 for rename of XDVCD
//                        to XDVCD1.
// 06/15/92  bbake2       log#813 - change to timing for orig
//                        bookings.  Added new ws field to
//                        store # days past cutoff, logic to
//                        value it and examine it before
//                        updating maintenance fields and orig
//                        quantities.  W01, s-get-cutoffs, s47,
//                        s6e.
// 07/01/92  schase       Added code to maintain the DORDB.
//                        VBBULK01 Table for auto assigning
//                        Belk's Bulk Orders to draw orders.
//                        Similar to JC Penney's code. om0bs-
//                        insert-bbulk, om0bs-deter-belks, w01.
// 08/12/92  JLoyer       Modified to add a booking season and
//                        booking month to products added.
//                        010, 020, 040, 050, s10, s12, s20,
//                        s62, s7c, s70, om0bm001, w01.
//                        new: om0bs-call-ob1470, OBSREC,
//                             om0bs-map-bk-sesn,
//                             om0bs-edit-bk-sesn
// 08/14/92  DHARRI      LOG#893 - CUSTOM LOGO CHANGE calc need
//                       from today -45 to today -30.
//                       OM0QS-CALC-NEED-DT, SRA.
// 10/12/92  schase      October 92 database changes: changed
//                       om0bs-get-lev-ind (ren: xsdcd to
//                       pc2inseg, xsacd to xegcd), om0bw01
//                       (resize: om0bwni5 x(02) to x(03)).
// 11/10/92  dcaust      log #850.  change in s22, s6a.  allow
//                       pricing for nil footwear sample in
//                       development.
// 11/13/92  dcaust      log #847. chg for nil b-grade pricing.
//                       s97, s9i, s22, s24, 060, w01, s79.
//                       new stmt grp om0bs-add-1-dollar.
// 11/30/92  tfox        log #888/920 new screened product
//                       processing.  s-av1750-xow, s-calc-
//                       need-dt, s-calc-xow, s-chk-flyer,
//                       s-chk-promo, s-proces-flyr, sga, st7
//                       s20, s6k, s7c, w01, 020, 060
// 12/10/92  dcaust      log #855. if international order and
//                       order class = 'in', protect direct
//                       ship, whse & owner grp codes on map.
//                       060.
// 01/13/93  dcaust      log #934. if international order and
//                       b-grade product, round product price
//                       up to the nickel  (after any discount)
//                       s24, w01.
// 01/15/93  jather      log #868 Prevent maint of transmitted
//                       Airborne orders. cur, pf21, s7c, 010
//                       060.
// 03/03/93  clenni      log #842 allocation sales pgm edit
//                       added om0bs-spgm-dept-cd, updated
//                       s61, w01
// 05/01/93  dlegg       log #937. NSG changes. Modify screened
//                       product definition, custom logo edits.
//                       Add whse 25. 020, 050, sga, calc-need-
//                       dt, s81, s7c, s6k. New: s-map-own-grp.
// 05/13/93  sjob        log #937: add transfer to custom logo
//                       screen(AE09)- b020,bs6e,bs89,b060.
// 06/28/93  sjob        log #926: WHEN NO DOMEST.PRICE IS IN
//                       EFFECT,USE OLDEST EFF DATE.(BS28)
// 07/06/93  sjob        log #977:expand eff-prc-dt-fl to
//                       include 'N'=need date (om0bs6i)
// 07/14/93  gcalki      log #848 international divert orders
//                       protect warehouse & need date. 060
// 09/01/93  gcalki      CSP 4.1 changes - sub om0n no longer
//                       xfers on aborts. it now passes a code
//                       in omerec.  if the code is not '00'
//                       then control is passed to main menu.
// 09/16/93  schase      CSP 4.1 Change - Added check for valid
//                       size prior to formatting the price on
//                       the OP3REC.  Resolved S0C7 Abend. S24.
// 10/08/93  schase      CSP 4.1 Change - Correct the "fupa"
//                       (typo) with index op0iwsbr which
//                       should be om0bwsbr.  s24.
// 11/01/93  craine      removed AV1REC from table list, record
//                       hasn't been used for years.
// 11/15/93  dmeier      set om0bwcwh (warehouse change flag)
//                       to yes only if warehouse has changed.
//                       Modified existing code to edit if
//                       warehouse is changed or if warehouse
//                       is blank to preserve what the code was
//                       previously doing except for booking
//                       season edit, which will now only be
//                       down when warehouse actually changed.
// 11/22/93  gcalki      log#980 - added code to perform
//                       screened product processing only for
//                       first quality, active live cycle.
//                       020, s7c.
// 01/10/94  dmeier      Log #971 - musical size run changes.
//                       om0bs-get-msr, om0bs-msr-qtys,
//                       om0bs40, om0b020.
// 02/28/94  scantr      database changes: rename sy6cstfl in
//                       om0bs9i; add ctry and currancy to
//                       sy5rec call in s97 and s9i; update
//                       work records w01-w04
// 03/24/94  gcalki      #1010 - disable the 30 day need date
//                       calculation for crested prods. force
//                       availability for crested golf hats
//                       (crested prod/direct ship 1) sga, s6k.
//  04/28/94 jather      log 1003. renamed causera to
//                       ca-user-workarea-4k to hold opwrec
//                       which has increased to 3072 bytes.
//  05/19/94 jather      log 1015. divert orders - compare
//                       need date lt order set up date
//  06/21/94 schase      Virtual Airspeed Project/Task #15:
//                       Replaced insert of DORDB.VBBULK01 with
//                       insert into DORDB.VBULKS01.  Added new
//                       CSP Rec VBULKS01  for new table. Chgd
//                       s6e.  Added om0bs-insert-bulks, and
//                       om0bs-get-vdept001.
//   04/13/95 kkauth     no log - changed option on call to
//                       IO0200 to 'SF' - 050
//  06/20/95  CRAINE     CHG TO OBSREC FOR OB1470
//  06/27/95  PSTROE     Changed to accomodate addition of
//                       Canada to system.  Changed: OM0BS7C
//                       OM)BS-CALL-OB1470, OM0BS73, OM0BS79
//                       OM0BS9I, OM0BS94, OM0BS95, OM0BS97,
//                       OM0BS81, OM0B020, OM0BS-MAP-OWNER-GRP,
//                       OM0B050, OM0BS6K, and record OM0BW01,
//                       Added OM0BS-SEL-SY2000.
//  02/01/96  DLIDDL     Fixed handling code currency code and
//                       order header currency code comparison
//                       in OM0BS73 and OM0B050
//  03/22/96  MMCGOL     Fixed direct ship cd check in om0b050
//  04/22/96  NFIELD     change to use vbulks02 and load
//                       sm_srep_id
//  08/07/96  NFIELD     accommodate nike bulk/draw codes
//  11/10/96  wleong     removed musical size run logic
//  06/12/97  LRAO       When OM0B screen order cutoff table
//                       checks for row in cutoff table,it
//                       blows when row is not found. So, added
//                       code in OM0BS-GET-CUTOFFS for sqlcode
//                       '100' evaluation.The code sends the
//                       screen again with a error message. For
//                       this, I have included an error message
//                       in OP00ENU.
//  07/28/97  jnaemu     display reserved qty for n bulk draws
//  08/25/97  LRAO       When OM0B screen order cutoff table
//                       checks for row in cutoff table, it
//                       blows when row is not found. So, added
//                       code in OM0BS-GET-CUTOFFS for sqlcode
//                       '100' evaluation.The code sends the
//                       screen again with a error message. For
//                       this, I have included an error message
//                       in OP00ENU.
//  08/27/97  jnaemu     added whse 27
//  08/01/97  SLARSE     OCD Processing.
//  09/04/97  jnaemu     allow direct ship for apparel to
//                       decrement availability.
//  09/08/97  wleong     regen for yostbl structure change
//  10/28/97  SATYAM     Added edit in OM0BS7G, before calling
//                       iomod IO0460 to check whether any rows
//                       exist with the same key values. If it
//                       exists then it skips inserting rows in
//                       dorder.voaddr01 table.
//  12/10/97  joldin     Move 'op' to socd-hdr-rsn-seq before
//                       read of vsoshcr01 in get-max-vsohcro1.
//  12/17/97  SATYAM     Corrected the error in OM0BS7G, regard
//                       -ing insert and update.
//  02/04/98  klee       added bypass region lookup for intl
//                       users in om0bs94.
//  03/16/98  dsmit0     moved the call to oz2140 to below the
//                       split of the order - om0bs6e.
//  04/05/98  wleong     added changes to create prepack if
//                       pack code is ms or cu. om0bs40.
//                       om0bs6e.
//  06/03/98  jflor1     added if statement in om0bs95 to
//                       bypass SY2000 call if div 02 or 03.
//  06/15/98  SATYAM     Modified OM0B020 to default the bulk
//                       iseg code on to the draw (only if the
//                       order is a customer draw).
//  07/21/98  UDAFON     Changed message #942 in CALL-OZ2090.
//  08/27/98  UDAFON     # 178 Increased size of OMWREC to 3505
//                       bytes. Re-compiled application.
//  09/16/98  JFLOR1     Added logic for xdvcd=03 in om0bs10.
//                       Apparel promo orders need to get a
//                       season code, just as other orders.
//  10/02/98  svargh     added changes in om0bs-check-upda,
//                       om0bs-check-upda1,om0bs-updte-vbulk,
//                       om0bs-updte-vbulk1,om0bsub,om0bs6e
//                       to update the bulk qty in vbulks02
//                       yable when they are changed in header
//                       table
//  01/08/99   svargh    added a new error message so that
//                       the user is intimated when the carton
//                       is not large enough and he can retry.
//                       (change in om0bs-get-ctn-type)
//  01/29/99   jcarey    modified om0bs40 to exclude warehouse
//                       51 (apparel) from the msr footwear
//                       factory carton edit.
//  05/25/99   Rshaik    Commented the stmt group OM0BS-ALT-
//                       CTN-TYPE which gets the alternate
//                       carton type from VCMPNY01 and changed
//                       it to display relevant messages.
//                       changes are in OM0BS-GET-CTN-TYPE
//  03/28/00   Lrao1         BSSA GOES GPC02 PROJECT
//  TT#4752              Add pack codes for orders with BSSA
//                       products for specific  customers.
//                       Chg: OM0B050
//                       New:OM0BS-CHK-IF-BSSA
//                           OM0BS-EDT-BSSA-HND
//                           OM0BS-EDT-BSSA-LBL
//                           OM0BS-MOV-BSSA-HND
//  04/13/00   rharat      TT#4752-BSSA PROJECT
//                      Following are the new rules:
//                      Handling codes, charges,override flags
//                      for non-customer draw orders will 1st
//                      default from customer file. Handling cd
//                      which are on blk & not on customer will
//                      be added to item along with with char-
//                      ges,override fl. Label codes will
//                      always default from customer.
//                      At last if it is a bssa product, bssa
//                      edits will be made to override with
//                      hardcoded values.
//                      The handling codes, charges, override
//                      flags, label codes for all customer
//                      draws will default from customer bulk.
//                      Changed proc - OM0B050.
//                      Added stgrps
//                      OM0BS-ADD-BLK-DFLT,
//                      OM0BS-ADD-BSSA-HND,
//                      OM0BS-ADD-BLK-HND.
//                      Search for TT#4752 to find changes.
// 05/18/00  rharat TT#4752-BSSA PROJECT - phase II
//                  Following are the new rules:
//                  1. Even though BSSA products are equipment
//                  GPC '02' products, apparel handling
//                  exceptions should be applied to these ords
//                  2. Business is going to set up GPC 03 rows
//                  for all the BSSA customers if they already
//                  don't exist.
//                  3. Business is OK that all the apparal ord
//                  will get these handling exceptions.
//                  ***** To comply with the new rules all the
//                  BSSA customer specific logic put in as
//                  part of Phase I is deleted ***************
//                  modified sgrps:
//                  Omob050.
//                  Search for TT#4752 to find changes.
// 07/11/01  kshiva TT#12895 carton ratio edit for DS orders.
//                  Changes are made to include Direct ship
//                  code to the passing record used to call the
//                  sub program OP3850.
//                  Search for TT#12895 to find changes.
// *********************
Program OM0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AV4REC AV4REC; // record
  AVGREC AVGREC; // record
  AVHREC AVHREC; // record
  AVIREC AVIREC; // record
  AVOREC AVOREC; // record
  CC1REC CC1REC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FB9REC FB9REC; // record
  IVEREC IVEREC; // record
  KUCREC KUCREC; // record
  KUFREC KUFREC; // record
  KUJREC KUJREC; // record
  KUPREC KUPREC; // record
  OBFREC OBFREC; // record
  OBIREC OBIREC; // record
  OBSREC OBSREC; // record
  OEBREC OEBREC; // record
  OECREC OECREC; // record
  OM0BW01 OM0BW01; // record
  OM0BW02 OM0BW02; // record
  OM0BW03 OM0BW03; // record
  OM0BW04 OM0BW04; // record
  OM0BW05 OM0BW05; // record
  OMAREC OMAREC; // record
  OMEREC OMEREC; // record
  OMWREC OMWREC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  OP3REC OP3REC; // record
  OP4REC OP4REC; // record
  OP5REC OP5REC; // record
  OP8REC OP8REC; // record
  OPABREC OPABREC; // record
  OPBREC OPBREC; // record
  OPCREC OPCREC; // record
  OPJREC OPJREC; // record
  OPLREC OPLREC; // record
  OPMZREC OPMZREC; // record
  OPPREC OPPREC; // record
  OPRREC OPRREC; // record
  OPTREC OPTREC; // record
  OPUREC OPUREC; // record
  OPYREC OPYREC; // record
  OPZREC OPZREC; // record
  OSBREC OSBREC; // record
  OSNREC OSNREC; // record
  PWSREC PWSREC; // record
  SP0UW02 SP0UW02; // record
  SP1REC SP1REC; // record
  SP2REC SP2REC; // record
  SP5REC SP5REC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  SY5REC SY5REC; // record
  SY6REC SY6REC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  VBULKS02 VBULKS02; // record
  VDSTRB01 VDSTRB01; // record
  VNILSY01 VNILSY01; // record
  VNLXPY01 VNLXPY01; // record
  VOPPGM01 VOPPGM01; // record
  VSOHCR01 VSOHCR01; // record
  WOZ2090 WOZ2090; // record
  WOZ2140 WOZ2140; // record
  WSY2000 WSY2000; // record
  XOWREC XOWREC; // record
  XP0QW00 XP0QW00; // record
  XS0MW01 XS0MW01; // record
  XX0XW01 XX0XW01; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YOSTBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XBDTBL {deleteAfterUse = yes}; // table
  use XDSTBL {deleteAfterUse = yes}; // table
  use XHDTBL {deleteAfterUse = yes}; // table
  use XOATBL {deleteAfterUse = yes}; // table
  use XOLTBL {deleteAfterUse = yes}; // table
  use XOMTBL {deleteAfterUse = yes}; // table
  use XOSTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XSZTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use OM0BM.OM0BM001,  // forms
      OM0BM.XP0QM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OM0B010: OM0B010();




    if (OM0BW01.OM0BWREJ == "Y") /* reject product, missing order typ,*/
      goto OM0B050; /* set up screen header info*/
    end


    goto OM0B020; /* go to add new product.*/


     /* ******************************************************/
    OM0B020: OM0B020();



    if (OMWREC.OMWDUPSZ == "Y") /* dup.sizes*/
      goto OM0B040; /* ; then return to build prod line item*/
    else
      goto OM0B050; /* normal flow to build map*/
    end



     /* ********************************************************/
    OM0B040: OM0B040();



        /* decide where to go*/

    if (OM0BW01.OM0BWREJ == "Y") /* if had db2 error*/
      goto OM0B050; /* go set up screen header info*/
    else
      goto OM0B020; /* go back to build product line data*/
    end



    OM0B050: OM0B050();



        /* go to converse the map*/

     /* Om0b060;    comment for speed & csp efficiency*/


     /* ***********************************************************/
    OM0B060: OM0B060();



    if (OM0BW01.OM0BWRST == "Y")
      goto OM0B020;
    else
      goto OM0B060;
    end



     /* **********************************************************/
  end // end main
end // end OM0B

// ck sec,init w-s, prod add/rev?
Function OM0B010()


     /* **********************************************************/
     /* * first process in application -                        **/
     /* *                 - security check                      **/
     /* *********************************************************/


  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value


      /* *************************/
      /* * check entry security*/
      /* *************************/

  XSENTRY();

   /* ****************************************************/
   /* *** set segmented trans id                      ****/
   /* ****************************************************/

  COMMAREA.CAEZSAP = sysVar.transactionID;
  COMMAREA.CAEZSG12 = "OM";
  COMMAREA.CAEZSG4 = "B";
  sysVar.transactionID = COMMAREA.CAEZSAP;

   /* *************************************************************/

      /* *******************************/
      /* * retrieve user common area*/
      /* *******************************/

  XSOMS01(); /* check order entry security*/
  OP1REC.OP1GROUP = OMWREC.OP1GROUP; /* hold order header data*/
  COMMAREA.CACURRAP = "OM0B";


  set OBIREC empty;
  set OP3REC empty;
  set OPPREC empty;
  set KUCREC empty; /* used for nil pricing*/
  set VNLXPY01 empty; /* used for nil pricing*/
  set YSMREC empty; /* used for nil pricing*/
  set IVEREC empty; /* used for nil pricing*/
  set AVGREC empty;
  set AVHREC empty;
  set AVIREC empty;
  set OBSREC empty;






      /* *****************************/
      /* * init error diag areas*/
      /* *****************************/

  TA1REC.TA1TYPE = "DB2 "; /* abend type*/
  TA1REC.TA1FUNC = "RETN"; /* abend function (return)*/
  TA1REC.TA1PGMNM = "OM0B"; /* program name*/
  TA1REC.TA1MAP = "OM0BM001"; /* current map name*/
  TA1REC.TA1LOCAT[1] = "OM0B010 "; /* process name*/


      /* ********************************/
      /* * initialize working-storage*/
      /* ********************************/

  OM0BS10(); /* init omarec,omwrec,om0bw01*/
               /* ; get order type table xottbl*/
               /* ; get sales program order type table sp2rec*/



        /* get warehouse flag from xdstbl*/

  OM0BSWR(); /* warehouse required?*/

        /* is this a transmitted airborne order?*/

  XS0MW01.XS0MWDIV = OP1REC.XDVCD; /* build a pass record*/
  XS0MW01.XS0MWORT = OP1REC.XOTCD;
  XS0MW01.XS0MWDIR = OP1REC.XDSCD;
  XS0MW01.XS0MWCUS = OP1REC.KUCCOID;
  XS0MW01.XS0MWGPC = OP1REC.XGPCD;
  XS0MW01.XS0MWNDT = OP1REC.OP1CUNDT;

  VOPPGM01.XXX-PGM-NBR = "OP1920";
  call "IO6600" ("S ", SQLCA, VOPPGM01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VOPPGM01";
    TA1REC.TA1LOCAT[3] = "OM0B010";
    TA1REC.TA1LOCAT[4] = "IO6600";
    TA1REC.TA1TBLKE = "OP1920";
    XSOPS02();
  end

  XS0MS-CHK-AIRBORNE();



end // end OM0B010

// add product (INIT. DEFAULTS)
Function OM0B020()


      /* *********************************************************/
      /* * create new product record                            **/
      /* * consisting of product line item and 40 sizes.        **/
      /* * use hard-coded defaults,                             **/
      /* * and product array (from product header screen)       **/
      /* * and data from order header (op1rec)                  **/
      /* * and data from prod style, color, dim & size (sycrec) **/
      /* * and data from sales program (sp5rec)                 **/
      /* *********************************************************/


  TA1REC.TA1LOCAT[1] = "OM0B020"; /* error diag -process name*/
  TA1REC.TA1LOCAT[2] = " "; /* - group name*/


      /* **************************************************/
      /* * re-set flags for next product to be created*/
      /* **************************************************/

  if (OMWREC.OMWDUPSZ == "D") /* if dup done*/
    /* next sentence               (already init w-s)*/
  else
    OM0BS20(); /* init. work-storage,*/
  end /* get spgm prod pricing,if any*/


      /* ********************************************************/
      /* * check if sizes are to be duplicated from prev. product*/
      /* ********************************************************/

      /* dupsz values are n - dont dup*/
                       /* y - duplicate sizes from prev prod,all*/
                           /* sizes(&scale)must be good 4 new prd*/
                       /* d - done with duplicating sizes*/
                           /* now build rest of product line item*/

  if (OMWREC.OMWDUPSZ == "Y") /* go to duplicate sizes*/
    exit stack;
  end



      /* *********************************************************/
      /* * start at top of record and create each field until end*/
      /* *********************************************************/



      /* ******************/
      /* * product code*/
      /* ******************/

  OP3REC.XGPCD = OP1REC.XGPCD;
  OP3REC.SY1STNBR = OMWREC.SY1STNBR;
  OP3REC.SY2CLRID = OMWREC.SY2CLRID;
  OP3REC.XDMCD = OMWREC.XDMCD;
  OP3REC.KUIPRDID = OMWREC.KUIPRDID;
  OP3REC.PC2INSEG = OMWREC.PC2INSEG;


      /* *************************************/
      /* * move general product descriptors*/
      /* *************************************/

      /* note - unit of measure done below, with backorder*/

  OP3REC.OP2PRDSF = "N"; /* product substitution = n*/
  OP3REC.OP2SSTYN = " "; /* and subs. product = ' '*/
  OP3REC.OP2SCLCD = " ";
  OP3REC.OP2SDMCD = " ";
  OP3REC.OP2SUBQT = 0;

  OP3REC.OP2CGPCD = " "; /* blank coordinate group & key sty*/
  OP3REC.OP2KSTYF = "N";
  OP3REC.OP2GTSZF = "N"; /* gut sizes not required*/
  OP3REC.OP2GBLOF = "N"; /* global override flag*/
  OP3REC.XEGCD = "000"; /* shade code not required*/
  OP3REC.XOWCD = "00"; /* owner group code*/

  OP3REC.XPGCD = OMWREC.XPGCD; /* packaging type code*/
      /* phase 2 - package type will default from inventory*/
       /* and omwrec will be the user entered override value.*/

  OP3REC.OP2MSCDP = 000.00; /* maximum scaledown percent*/

  OP3REC.OP2PGRPF = "N"; /* process group flag*/

  OP3REC.OP2FSTFL = "Y"; /* forecast flag*/

  OP3REC.XQACD = OMWREC.XQACD; /* quality code*/

  OP3REC.OP2LNIST = "OP"; /* line item status = open*/

  OP3REC.OP2LNSDT = OMAREC.OMACDT; /* status date=current*/

  OP3REC.XBRCD = " "; /* backorder reason code set in alloc*/

  OP3REC.OP1ALFDT = 0; /* init allocation force date*/

  OP3REC.XAFCD = " "; /* init allocation force code*/

  OP3REC.XBK-BK-SESN-CD = "  "; /* booking season code*/
  OP3REC.OP-BK-YR = 0; /* booking season year (ccyy)*/
  OP3REC.OP-BK-MO = 0; /* booking season month (00mm)*/

      /* *********************************************************/
      /* * set up backorder flag*/
      /* * get product data into sycrec*/
      /* * style desc, color desc, prcng by sz fl, sz scl cd*/
      /* *********************************************************/

  OP3REC.OP1BOFL = OP1REC.OP1BOFL; /* backorder allowed flag*/


      /* if have sycrec from dup.size routine, skip get*/

  if (OMWREC.OMWDUPSZ == "D") /* done with dup sizes*/
    /* next sentence*/
  else
    OM0BS94(); /* get db2 for style data in sycrec*/
    OM0BW01.OM0BWPSC = SYCREC.SY4SZSCL; /* hold as prev prod size scale*/
  end


  if (SYCREC.SY2BOSWI == "N" /* if product has backorder switch*/
   && SYCREC.SY2BOEDT <= OMAREC.OMACDT) /* effective today*/
    OP3REC.OP1BOFL = SYCREC.SY2BOSWI; /* use it*/
  end

   /* SET UP FOR SCREENED PRODUCTS*/

  OM0BW01.OM0BW-BULK-FL = "N"; /* init the bulk ord flag*/
  if (OP1REC.XBDCD in XBDTBL.XBDCD)
    if (XBDTBL.XBDBKOFL[sysVar.arrayIndex] == "Y") /* this is a bulk*/
      OM0BW01.OM0BW-BULK-FL = "Y"; /* bulks can not xfr to ae09.*/
    end
  end

   /* PROCESS BLANK BULK DRAWS*/

  if (OP1REC.XGPCD == "03")
    if (OP1REC.XWHCD == "51"
     || OP1REC.XWHCD == "25"
     || OP1REC.XWHCD == "27"
     || OP1REC.XWHCD == "42") /* added for Canada*/
      if (OM0BW01.OM0BWBBF == "BB" /* FOR BLANK BULKS*/
       || OM0BW01.OM0BWBBF == "BD") /* OR DRAWS FROM BLANK BULKS*/
        OM0BST2();
        if (OP1REC.XOBCD == "M1") /* SPECIAL MAKEUPS*/
          OM0BM001.XOWCD = "SM";
        else /* REGULAR BLANK*/
          OM0BM001.XOWCD = "MR";
        end
        set OM0BM001.XOWCD skip;
        OP3REC.XOWCD = OM0BM001.XOWCD;
      end
    end
  end

  if (OP1REC.XGPCD == "03") /* only apparel are screened*/
    if (OP1REC.XWHCD == "51" /* and only from warehouse 51 or 25*/
     || OP1REC.XWHCD == "25" 
     || OP1REC.XWHCD == "27" 
     || OP1REC.XWHCD == "42") /* added for Canada*/
      if (SYCREC.SY1BSTNB > " " /* associated with blank style*/
       && SYCREC.XPRCD != "22") /* and not custom logo*/
        if (OP1REC.XBDCD == "0" /* reg order*/
         || OP1REC.XBDCD == "1") /* customer bulk*/
          OM0BS-CHK-FLYER(); /* check for flyer program*/
          if (SQLCA.VAGen_SQLCODE == 0 /* this is scrned prod & flyr pgm*/
           || SQLCA.VAGen_SQLCODE == -811) /* more than 1 row returned*/
            OM0BM001.XOWCD = "00";
            OM0BS-PROCES-FLYR(); /* process as flyer program*/
          end
        end
      end
    end
  end

      /* *************************************************/
      /* * unit of measure from screen, or style file*/
      /* *************************************************/

  if (OM0BW01.OM0BWBDF == "DS"
   || OM0BW01.OM0BWBDF == "DC"
   || OM0BW01.OM0BWBDF == "DX"
   || OM0BW01.OM0BWBDF == "DR"
   || OM0BW01.OM0BWBDF == "DN")
     /* next sentence -- will catch after bulk read*/
  else
    if (OMWREC.XUMCD == " " /* default uom from product*/
     || OMWREC.XUMCD == SYCREC.XUMCD)
      OP3REC.XUMCD = SYCREC.XUMCD;
    else /* user override uom*/
      OP3REC.XUMCD = OMWREC.XUMCD;
    end
  end


      /* **********************************/
      /* * init package handling data*/
      /* **********************************/

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex < 6)
    OP3REC.OP2HCHGO[sysVar.arrayIndex] = "N";
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end



      /* ********************************/
      /* * clear maintenance fields*/
      /* ********************************/

  sysVar.arrayIndex = 1; /* start at 1, go through 4*/
  while (sysVar.arrayIndex < 5)
    OP3REC.XOMCD[sysVar.arrayIndex] = " "; /* order maint reason code*/
    OP3REC.OP2OMQTY[sysVar.arrayIndex] = 0; /* quantity changed*/
    OP3REC.OP2OMDT[sysVar.arrayIndex] = 0; /* date changed*/
    OP3REC.OP1MTREP[sysVar.arrayIndex] = 0;
                                   /* service rep who did the change*/
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end


      /* *********************************************************/
      /* * next fields are summaries, created in the formatter*/
      /* * program.  they are all in the line item record.*/
      /* * the cobol program takes op3rec and writes the*/
      /* * product line item record and the size record(s)*/
      /* *********************************************************/

      /* op3rec.op2prcvf  price vary flag*/
            /* .op2torgq  total original quantity*/
            /* .op2tondq    "   on-order    "*/
            /* .op2talcq    "   allocated   "*/
            /* .op2tohrq    "   on-hand reserved quantity*/
            /* .op2twipq    "   work-in-process reserved quantity*/
            /* .op2tshpq    "   shipped     "*/
            /* .op2tcnlq    "   cancelled   "*/
            /* .op2auprc  average unit price*/
            /* .op2lnivl  line item value*/
            /* .op2nsize  number of sizes on product*/
            /* .zzzszchg  size change count*/
      /* note -setup date & time put into record*/
            /* before writing.*/

      /* change count = 0 for add record*/

  OP3REC.ZZZCHGCT = 0;


      /* ***********************************************/
      /* initialize 40 sizes and associated fields*/
      /* ***********************************************/

      /* edit for restricted warehouse*/
      /* let promo get around restricted warehouse edit.*/

  if (OP1REC.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XDVCD1[sysVar.arrayIndex] == "03") /* if promo*/
      OP1REC.OP1OWHMF = "N";
    else
      OM0BS21(); /* send msg if change warehouse*/
    end
  else
    OM0BS21();
  end


      /* if warehouse change, may recalculate price type codes*/

  if (OM0BW01.OM0BWNWH == "Y" /* if warehouse changed by s21*/
   && OP1REC.XDVCD == "02"    /* and a nil order*/
   && OP1REC.XOBCD == "S1")   /* and a sample order type*/
    if (OM0BW01.XAUCD == "31" /* and customer's account class*/
     || OM0BW01.XAUCD == "32") /* is nike owned or export co.*/
      if (OM0BM001.XWHCD == "12") /* if new warehouse is 12, nil whse*/
        OM0BS6O(); /* get prc type cd based on co.*/
      else /* else (xwhcd now entered but not 12)*/
        OM0BS6N(); /* get price typ cd based on comp nbr*/
      end
      if (OMWREC.OMWDUPSZ == "D") /* if dup sizing already done*/
        OM0BS7H(); /* redo pricing (else done later)*/
      end
    end
  end


     /* **************************************************************/
     /* * 08/12/92 JLoyer - if order requires booking seasons,      **/
     /* * assign the booking season by calling ob1470 (obsrec)      **/
     /* **************************************************************/

  if (OM0BW01.OM0BW-BK-SESN-REQUIRED == "Y") /* set in om0bs10*/
    if (OM0BW01.OM0BW-DEFAULT-BK-SESN == "Y") /* if we're defaulting*/
      if (OP1REC.XDVCD == "01") /* if domestic*/
        OM0BS-CALL-OB1470(); /* call ob1470*/
        if (OBSREC.OBS-RETN-CD == "00" /* if single bk-sesn*/
         || OBSREC.OBS-RETN-CD == "01") /* or two bk-sesns*/
          OP3REC.OP-BK-MO = OBSREC.OP-BK-MO[1]; /* use 1st bk-mo*/
        end /* (xbk-bk-sesn-cd and op-bk-yr*/
      end /* were defaulted from bulk)*/
    else /* else not defaulting*/
      OM0BS-CALL-OB1470(); /* call ob1470*/
      if (OBSREC.OBS-RETN-CD == "00") /* if single bk-sesn available*/
        OP3REC.XBK-BK-SESN-CD = OBSREC.XBK-BK-SESN-CD[1]; /* use 1st*/
        OP3REC.OP-BK-YR = OBSREC.OP-BK-YR[1]; /* occurs*/
        if (OP1REC.XDVCD == "01") /* if domestic*/
          OP3REC.OP-BK-MO = OBSREC.OP-BK-MO[1]; /* include bk-month*/
        end /* (not used by NIL)*/
      else /* else*/
        if (OBSREC.OBS-RETN-CD == "01") /* if two bk-sesns*/
          OP3REC.XBK-BK-SESN-CD = OBSREC.XBK-BK-SESN-CD[2]; /* use 2*/
          OP3REC.OP-BK-YR = OBSREC.OP-BK-YR[2]; /* occurs*/
          if (OP1REC.XDVCD == "01") /* if domestic*/
            OP3REC.OP-BK-MO = OBSREC.OP-BK-MO[2]; /* include bk-month*/
          end /* (not used by NIL)*/
          OM0BW01.OM0BW-MULTI-BK-SESN-MSG = "Y"; /* display multi*/
        end /* bk-sesn msg*/
      end
    end
  end


      /* if sizes duplicated from prev.prod, skip rest*/

  if (OMWREC.OMWDUPSZ == "D") /* dupli.size done?*/
    exit stack;
  end


  OP3REC.OP2TONOQ = 0; /* zero qty for prod verify*/


      /* get style and style/color price defaults to use*/
      /* when there is no price by size for the product*/

  OM0BS22(); /* db2 read product tables*/


  OM0BWSBR = 1; /* for all 40 sizes*/

  if (OM0BW01.OM0BWBDF == "DC" /* order is a draw order*/
   || OM0BW01.OM0BWBDF == "DR" 
   || OM0BW01.OM0BWBDF == "DS" 
   || OM0BW01.OM0BWBDF == "DX" 
   || OM0BW01.OM0BWBDF == "DN")
    OM0BS29(); /* read bulk order info*/

    if (OM0BW01.OM0BW-BK-SESN-REQUIRED == "Y" /* flags set in om0bs10*/
     && OM0BW01.OM0BW-DEFAULT-BK-SESN == "Y") /* default booking seasons*/
      OP3REC.XBK-BK-SESN-CD = OM0BW03.XBK-BK-SESN-CD; /**/
      OP3REC.OP-BK-YR = OM0BW03.OP-BK-YR; /**/
    end /* do not default bk-mo*/

    OP3REC.XUMCD = OM0BW03.XUMCD; /* default from bulk*/
    OMWREC.XUMCD = OM0BW03.XUMCD;

    if (OM0BW01.OM0BWBDF == "DC") /* only if it is a customer draw*/
      OP3REC.PC2INSEG = OM0BW03.PC2INSEG; /* default from the bulk*/
      OMWREC.PC2INSEG = OM0BW03.PC2INSEG;
    end /* do not default bk-mo*/

    if (OM0BW01.OM0BWBBF == "BD") /* draw is from a blank bulk*/
      while (OM0BWSBR < 41)
        OP3REC.OP3SZARY[OM0BWSBR] = OM0BW01.OP3SZARY;
                                   /* clear array line*/
        OM0BWVSZ = "N";
        OM0BS23(); /* finished size is valid*/
        if (OM0BWVSZ == "Y")
          if (OM0BW03.OP3SZAFL[OM0BWSBR] == "Y") /* bulk size is valid*/
            OP3REC.OP3SZAFL[OM0BWSBR] = "Y";
                                   /* build valid size in op3rec*/
            OM0BS24(); /* set-up size price*/
            OM0BS25(); /* chk.-move y to prc vary flag*/
            OM0BS26(); /* chk-set full range min/max*/
          end
        end
        OM0BWSBR = OM0BWSBR + 1;
      end

    else
      while (OM0BW01.OM0BWSBR <= 40)
        OP3REC.OP3SZARY[OM0BWSBR] = OM0BW01.OP3SZARY;
        if (OM0BW03.OP3SZAFL[OM0BWSBR] == "Y")
          OP3REC.OP3SZAFL[OM0BWSBR] = "Y";
          OM0BS24();
          OM0BS25();
          OM0BS26();
        end
        OM0BW01.OM0BWSBR = OM0BW01.OM0BWSBR + 1;
      end
    end

  else
    while (OM0BWSBR < 41)
      OP3REC.OP3SZARY[OM0BWSBR] = OM0BW01.OP3SZARY;
                                   /* clear array line*/
      OM0BWVSZ = "N";
      OM0BS23(); /* if size is valid*/
      if (OM0BWVSZ == "Y")
        OP3REC.OP3SZAFL[OM0BWSBR] = "Y";
                                   /* build valid size in op3rec*/
        OM0BS24(); /* set-up size price*/
        OM0BS25(); /* chk.-move y to prc vary flag*/
        OM0BS26(); /* chk-set full range min/max*/
      end
      OM0BWSBR = OM0BWSBR + 1;
    end
  end

      /* store original need date and don't ship after date*/
      /* for use in setting message 293 in om0bs78*/

  if (OM0BW01.OM0BWBDF == "DC" ||  /* customer draws*/
  OM0BW01.OM0BWBDF == "DN")        /* nike draws*/
    OM0BW01.OM0BW-BULK-NEED-DATE = OM0BW04.OP1CUNDT; /* use dates from*/
    OM0BW01.OM0BW-BULK-DONT-SHIP-AFTER-DATE = OM0BW04.OP1DSADT;
                                   /* bulk order*/
    OM0BM001.XOWCD = OM0BW02.XOWCD; /* owner group of bulk*/
    OP3REC.XOWCD = OM0BW02.XOWCD; /* style is used*/
  end
  if (OM0BW01.OM0BWBDF == "DS") /* smart reservation draws*/
    OM0BW01.OM0BW-BULK-NEED-DATE = OM0BW04.OP1CUNDT;
                                   /* use original dates*/
    OM0BW01.OM0BW-BULK-DONT-SHIP-AFTER-DATE = OM0BW04.OP1DSADT;
                                   /* of draw order*/
  end


      /* *********************/
      /* * pricing flags*/
      /* *********************/

  OP3REC.OP2PRCOF = "N"; /* price override on any size*/
  OP3REC.OP2PRCVF = "N"; /* price vary flag*/


      /* move key of partition number & customer order number*/

  OP3REC.OP1PARTN = OP1REC.OP1PARTN;
  OP3REC.OP1CUOID = OP1REC.OP1CUOID;


      /* if reqsted range = 0, then move full range to reqst*/

  if (OMWREC.OMWRQSZF == 0) /* first requested size = 0*/
    OMWREC.OMWRQSZF = OM0BW01.OM0BWSZF; /* set req=full range*/
    OMWREC.OMWRQSZL = OM0BW01.OM0BWSZL;
  end


      /* move reqst range to chosen range, first & last size*/

  OM0BW01.OM0BWSMF = OMWREC.OMWRQSZF;
  OM0BW01.OM0BWSML = OMWREC.OMWRQSZL;

  if (OMWREC.XSZCD > " ")
    if (OP1REC.XGPCD == "02")
      OM0BS-GET-MSR(); /* distribute sizes per msc sz run - ftwr*/
    else
      OM0BS2A(); /* distribute sizes per size dist - apprl*/
    end
  end


end // end OM0B020

// dup size run, before add prod
Function OM0B040()



      /* ********************************************************/
      /* * check that all sizes from prev. product are valid*/
      /* * for the new product number.*/
      /* * if valid - keep sizes and quantities for new product*/
      /* *   but get new prices.*/
      /* * if not valid - keep size range for new product, but*/
      /* *   use only valid sizes for this product. zero qty*/
      /* *   and get new prices.*/
      /* ********************************************************/

  TA1REC.TA1LOCAT[1] = "OM0B040"; /* error diag process name*/
  TA1REC.TA1LOCAT[2] = " "; /* and group name*/


      /* pre-set flag to skip dup, in case error on db2 access*/
      /* good dup sets flag to 'd' for dup done.*/

  OMWREC.OMWDUPSZ = "N"; /* no,don't dup*/


      /* **************************************************/
      /* * get previous product by reading data base*/
      /* **************************************************/

  sysVar.arrayIndex = OMWREC.OMWLNITX; /* pick up next product array entry*/
  sysVar.arrayIndex = sysVar.arrayIndex - 1; /* decrement it to last item*/
  OP3REC.OP1NORID = OMWREC.OMWSORDN; /* use as sub-order nbr*/
  OP3REC.OP2LNINB = sysVar.arrayIndex; /* product line item number*/
  OM0BS91(); /* db2 select of prev product*/
  OM0BS94(); /* db2 for style data in sycrec*/
  OM0BW01.OM0BWPSC = SYCREC.SY4SZSCL; /* hold prev.prod size scale*/
  OM0BW01.OM0BWPUM = SYCREC.XUMCD; /* hold prev unit of measure*/



      /* *****************************************/
      /* * move current new product data to key*/
      /* *****************************************/

  OP3REC.XGPCD = OP1REC.XGPCD; /* general product class*/
  OP3REC.SY1STNBR = OMWREC.SY1STNBR; /* style #*/
  OP3REC.SY2CLRID = OMWREC.SY2CLRID; /* color*/
  OP3REC.XDMCD = OMWREC.XDMCD; /* dimension*/


      /* get product data into sycrec*/
      /* style desc,color desc, prcng by sz fl, sz scl cd*/

  OM0BS94(); /* DB2 FOR STYLE DATA IN SYCREC*/

   /* don't allow duplication if diff unit of measure*/
  if (SYCREC.XUMCD != OM0BW01.OM0BWPUM)
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(183); /* can't dup diff uom*/
    OMWREC.OMWRQSZF = 0;
    OMWREC.OMWRQSZL = 0;
    exit stack;
  end
  if (SYCREC.SY4SZSCL != OM0BW01.OM0BWPSC) /* compare size scale codes*/
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(182); /* can not dup, diff size scale codes*/
    OMWREC.OMWRQSZF = 0; /* so reject reqstd range*/
    OMWREC.OMWRQSZL = 0;
    exit stack;
  end


      /* ***********************************************/
      /* * get ranges, validate sizes in old product*/
      /* * they must all be valid, or skip duplicate*/
      /* ***********************************************/


      /* get actual (requested) range in product*/

  OM0BS30();


      /* move reqst range to chosen range, first & last size*/

  OM0BW01.OM0BWSMF = OMWREC.OMWRQSZF;
  OM0BW01.OM0BWSML = OMWREC.OMWRQSZL;


  OP3REC.OP2TONOQ = 0; /* zero tot on-order units in prod*/
  OM0BWSBR = 1;

  if (OM0BW01.OM0BWBDF == "DC"
   || OM0BW01.OM0BWBDF == "DS"
   || OM0BW01.OM0BWBDF == "DX"
   || OM0BW01.OM0BWBDF == "DR"
   || OM0BW01.OM0BWBDF == "DN")
    OM0BS29();
    if (OM0BW01.OM0BW-BK-SESN-REQUIRED == "Y" /* if order requires bk-sesns*/
     && OM0BW01.OM0BW-DEFAULT-BK-SESN == "Y") /* and defaulting bk-sesns*/
      OP3REC.XBK-BK-SESN-CD = OM0BW03.XBK-BK-SESN-CD; /* copy*/
      OP3REC.OP-BK-YR = OM0BW03.OP-BK-YR; /* bk-sesn from bulk*/
    end

    if (OM0BW01.OM0BWBBF == "BD") /* draw from a blank bulk*/
      while (OM0BW01.OM0BWSBR <= 40)
        if (OP3REC.OP3SZAFL[OM0BWSBR] == "Y")
          OM0BW01.OM0BWVSZ = "N"; /* reset valid size flag*/

          OM0BS23(); /* check size for finished prod*/

          if (OM0BW01.OM0BWVSZ == "Y") /* valid size for finished prod*/
            if (OM0BW03.OP3SZAFL[OM0BWSBR] == "Y")
              OP3REC.OP2TONOQ = OP3REC.OP2TONOQ + OP3REC.OP3ONOQT[OM0BWSBR];
              OM0BS26();
              OP3REC.OP3OHRQT[OM0BWSBR] = 0;
            else
              OMAREC.OMAERR = "Y";
              converseLib.validationFailed(183); /* can't dup - out of synch*/
              OMWREC.OMWRQSZF = 0;
              OMWREC.OMWRQSZL = 0;
              exit stack;
            end
          end

        else
          OM0BW01.OM0BWVSZ = "N"; /* reset valid size flag*/

          OM0BS23(); /* validate size*/

          if (OM0BW01.OM0BWVSZ == "Y") /* valid size for finished prod*/
            if (OM0BW03.OP3SZAFL[OM0BWSBR] == "Y")
              OM0BS26();
              OP3REC.OP3SZAFL[OM0BWSBR] = "V";
            end
          end
        end

        OM0BW01.OM0BWSBR = OM0BW01.OM0BWSBR + 1;
      end

    else
      while (OM0BW01.OM0BWSBR <= 40)
        if (OP3REC.OP3SZAFL[OM0BWSBR] == "Y")
          if (OM0BW03.OP3SZAFL[OM0BWSBR] == "Y")
            OP3REC.OP2TONOQ = OP3REC.OP2TONOQ + OP3REC.OP3ONOQT[OM0BWSBR];
            OM0BS26();
            OP3REC.OP3OHRQT[OM0BWSBR] = 0;
          else
            OMAREC.OMAERR = "Y";
            converseLib.validationFailed(183); /* can't dup - out of synch*/
            OMWREC.OMWRQSZF = 0;
            OMWREC.OMWRQSZL = 0;
            exit stack;
          end
        else
          if (OM0BW03.OP3SZAFL[OM0BWSBR] == "Y")
            OM0BS26();
            OP3REC.OP3SZAFL[OM0BWSBR] = "V";
          end
        end
        OM0BW01.OM0BWSBR = OM0BW01.OM0BWSBR + 1;
      end
    end

  else
    while (OM0BWSBR < 41) /* loop all 40 sizes*/
      if (OP3REC.OP3SZAFL[OM0BWSBR] == "Y")
        OM0BW01.OM0BWVSZ = "N"; /* init valid size flag*/
        OM0BS23(); /* if size is valid*/
        if (OM0BW01.OM0BWVSZ == "Y")
          OP3REC.OP2TONOQ = OP3REC.OP2TONOQ + OP3REC.OP3ONOQT[OM0BWSBR];
          OM0BS26(); /* chk-set full range min/max*/
        else
          OMAREC.OMAERR = "Y";
          converseLib.validationFailed(183); /* dup sizes not valid, so cant dup*/
          OMWREC.OMWRQSZF = 0; /* reject reqstd range*/
          OMWREC.OMWRQSZL = 0;
          exit stack;
        end
      else
        OM0BW01.OM0BWVSZ = "N"; /* size not active on product*/
        OM0BS23(); /* but may be valid size*/
        if (OM0BW01.OM0BWVSZ == "Y") /* and need to get full range*/
          OM0BS26(); /* chk-set full range min/max*/
          OP3REC.OP3SZAFL[OM0BWSBR] = "V"; /* mark with 'v'*/
        end
      end
      OM0BWSBR = OM0BWSBR + 1;
    end
  end


      /* *************************************/
      /* * got here, so valid to dup sizes*/
      /* *************************************/

  OMWREC.OMWDUPSZ = "D"; /* done dup sizes*/

  converseLib.validationFailed(180); /* size run duplicated*/
  OMAREC.OMAERR = "Y";


      /* initialize pricing flags*/
      /* (op2prcvf set by db2 szrun formatter*/
      /* but need to use it during program)*/

  OP3REC.OP2PRCOF = "N"; /* price override on any size*/
  OP3REC.OP2PRCVF = "N"; /* price vary flag*/


      /* don't need product prices when have sales pgm prices.*/
      /* get style and style/color price defaults to use*/
      /* when there is no price by size for the product*/

  if (OM0BW01.OM0BWSPP == "N") /* if no sales pgm prices*/
    OM0BS22(); /* db2 read product tables*/
  end


  OM0BWSBR = OM0BW01.OM0BWSMF; /* for actual range*/
  while (OM0BWSBR < 41
   && OM0BWSBR <= OM0BW01.OM0BWSML)
    if (OP3REC.OP3SZAFL[OM0BWSBR] == "Y")
      OP3REC.OP3PRCOF[OM0BWSBR] = "N"; /* init override flag*/
      OM0BS24(); /* set-up size price*/
      OM0BS25(); /* chk-move y to prc vary flag*/
    end
    OM0BWSBR = OM0BWSBR + 1;
  end



end // end OM0B040

// initial map set-up, use op3rec
Function OM0B050()



      /* ******************************************/
      /* * move data to all fields on the map,*/
      /* * use data from op3rec*/
      /* * which may be initial default values*/
      /* * or previously entered product data.*/
      /* ******************************************/


  TA1REC.TA1LOCAT[1] = "OM0B050"; /* error diag data-process name*/
  TA1REC.TA1LOCAT[2] = " "; /* - group name*/


      /* ********************************************/
      /* * map line 1 - revision number, ord adj nbr*/
      /* ********************************************/


  OM0BM001.OM0BMRVN = "01"; /* set revision number*/

      /* ***************************************/
      /* * MAP LINE 2 - CUSTOMER ,XOMCD ,ORD ID*/
      /* ***************************************/


  if (OMWREC.XOMCD > " ") /* use prev chng rsn if there was one*/
    OM0BM001.XOMCD = OMWREC.XOMCD;
  else
    OM0BM001.XOMCD = " ";
  end


  OM0BM001.XOACD = " "; /* init auth code field*/

  OMWREC.OMWSEP1 = "."; /* init separator*/
  OM0BM001.OM0BMORN = OMWREC.OMWORD; /* set order number*/


      /* format customer number for display*/

  OMAREC.OMACUCO = OP1REC.KUCCOID;
  OMAREC.OMACUSR = OP1REC.KUMSTRID;
  OMAREC.OMACUDP = OP1REC.XNXCD;

  OM0BM001.OM0BMCNM = OMAREC.OMACUNO; /* full cust number*/



      /* ********************************************************/
      /* * MAp line 3 - product (nike or cust) & full size range*/
      /* ********************************************************/

  if (OP3REC.KUIPRDID == " ") /* if no cust product*/
    OM0BW01.SY1STNBR = OP3REC.SY1STNBR; /* format nike product*/
    OM0BW01.SY2CLRID = OP3REC.SY2CLRID;
    OM0BW01.XDMCD = OP3REC.XDMCD;
    OM0BM001.OM0BMPRD = OM0BW01.OM0BWPRD; /* nike prod code*/
  else
    OM0BM001.OM0BMPRD = OP3REC.KUIPRDID; /* cust prod #*/
  end


  OM0BM001.SY1SSTNM = SYCREC.SY1SSTNM; /* product style name*/
  OM0BM001.SY2CLRAB = SYCREC.SY2CLRAB; /* and color name*/


   /* if rejecting product, skip the reset of the map setup*/

  if (OM0BW01.OM0BWREJ == "Y")
    exit stack;
  end

  OM0BS-GET-CUTOFFS(); /* get cutoff date and set up production*/
                                   /* deadline flags*/

  if (OM0BW01.OM0BWOAF == "Y") /* order adjustment required*/
    if (converseVar.validationMsgNum == 0)
      converseLib.validationFailed(614); /* order adjustment number required*/
    end
  end

   /* set up the rest of the map info*/




   /* if order need date past production deadline date, need*/
   /* to enter an xomcd. if already on map,ok, else set field*/
   /* cursor,modified,bright and tell user it is needed.*/

  if (OM0BW01.OM0BWPAO == "Y"
   && OM0BM001.XOMCD == " "
   && OMAREC.OMAERR == "N")
    converseLib.validationFailed(399);
    OMAREC.OMAERR = "Y";
    set OM0BM001.XOMCD cursor, modified, bold;
  end



  if (OM0BW01.OM0BWSCR == 1) /* if on screen 1*/
    OM0BS96(); /* get product size scale record*/
  end

      /* use w-s first/last sizes as index to product size scale*/
      /* record for size description*/

  OM0BM001.OM0BMSZF = SY4REC.SY4IDDSC[OM0BWSZF];
                                   /* first & last sizes*/
  OM0BM001.OM0BMSZL = SY4REC.SY4IDDSC[OM0BWSZL]; /* for prod full range*/

      /* ********************************************************/
      /* * map line 15 - fill lost demand, pricing & more sizes*/
      /* ********************************************************/

  if (OM0BW01.OM0BWBDF == "DR"
   || OM0BW01.OM0BWBDF == "DC"
   || OM0BW01.OM0BWBDF == "DN")
    set OM0BM001.OM0BMFLD skip, invisible;
    set OM0BM001.OM0BMFIL skip, invisible;
  else
    if (XOTTBL.XOTDMRPF[OM0BWSBO] == "Y") /* allows lost demand*/
      OM0BM001.OM0BMFLD = "FILL DEMAND:"; /* show label*/
      OM0BM001.OM0BMFIL = "N"; /* default field*/
    else
      set OM0BM001.OM0BMFLD skip, invisible;
      set OM0BM001.OM0BMFIL skip, invisible;
    end
  end

      /* move price for all sizes, if appropriate*/

  if (OP3REC.OP2PRCOF == "N" /* no price override*/
   && OP3REC.OP2PRCVF == "N") /* and no price varies by size*/
    OM0BM001.OM0BMPAL = OP3REC.OP2AUPRC;
  end


      /* for set up of 'more sizes' flag*/
      /* see lines 5 - 14*/


      /* ********************************************************/
      /* * map line 16 - warehouse, needdate and backorder flag**/
      /* ********************************************************/

      /* move warehouse & needdate from op1rec*/

  OM0BM001.XWHCD = OP1REC.XWHCD;

      /* get warehouse short abbreviation from csp table*/
  OM0BM001.XWHSABRV = OP1REC.XWHCD; /* init abbrev to code*/
  if (OP1REC.XWHCD in XWHTBL.XWHCD)
    OM0BM001.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
  end



      /* reformat need date from 19yymmdd to mm-dd-yy for map*/

  OMAREC.OMAWDT = OP1REC.OP1CUNDT; /* need date*/
  OMAREC.OMAHP1 = "-";
  OMAREC.OMAHP2 = "-";
  OMAREC.OMASYYDT = OMAREC.OMAWYY;
  OMAREC.OMASMMDT = OMAREC.OMAWMM;
  OMAREC.OMASDDDT = OMAREC.OMAWDD;
  OM0BM001.OM0BMNDT = OMAREC.OMASDATE;

    /* set up direct ship code from op1rec*/

  OM0BM001.XDSCD = OP1REC.XDSCD;
  OM0BM001.XDSABRV = OP1REC.XDSCD;
  if (OP1REC.XDSCD in XDSTBL.XDSCD)
    OM0BM001.XDSABRV = XDSTBL.XDSABRV[sysVar.arrayIndex];
    if (OM0BW01.OM0BWBDF > " "
     && XDSTBL.XDSWHSEF[sysVar.arrayIndex] == "N")
      set OM0BM001.XDSCD protect;
    end
  end


      /* move backorder flag (from customer or product default)*/

  OM0BM001.OP1BOFL = OP3REC.OP1BOFL;



      /* ********************************************************/
      /* * map line 17 - owner grp code, spec code             **/
      /* ********************************************************/

  if (OM0BW01.OM0BWBBF == "BB" /* blank bulk*/
   || OM0BW01.OM0BWBBF == "BD") /* blank bulk draw*/
      /* next sentence              ;  owner group set up in st1*/
  else
    if (SYCREC.SY1BSTNB > " " /* associated with blank style*/
     && SYCREC.XPRCD != "22") /* and not custom logo*/
      if (OP1REC.XWHCD == "51" /* and whse 51 or 25 - this is*/
       || OP1REC.XWHCD == "25" /* a screened product*/
       || OP1REC.XWHCD == "27") /* a screened product*/
        /* next sentence          /* owner group code set up in st1*/
      else
        OM0BS-MAP-OWN-GRP(); /* setup map owner group*/
      end
    else
      OM0BS-MAP-OWN-GRP(); /* setup map owner group*/
    end
  end


   /* if blank bulk, blank bulk draw, or finished bulk draw*/
      /* get the xowabrv from xowtbl*/

  if (OM0BW01.OM0BWBBF != " ")
    OM0BS8A(); /* lookup xowcd abrev in xowtbl*/
  end


   /* spec code*/

  OM0BM001.PC2INSEG = OP3REC.PC2INSEG;




      /* ********************************************************/
      /* * map line 18 - coord group, key style, gut size & uom**/
      /* ********************************************************/

      /* move customer defined coordinate group & key style*/

  OM0BM001.OP2CGPCD = OP3REC.OP2CGPCD;
  OM0BM001.OP2KSTYF = OP3REC.OP2KSTYF;


      /* move gut size flag*/

  OM0BM001.OP2GTSZF = OP3REC.OP2GTSZF;


      /* move unit of measure description*/

  OM0BM001.XUMDESC = OP3REC.XUMCD; /* init descrip to code*/
  if (OP3REC.XUMCD in XUMTBL.XUMCD)
    OM0BM001.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
  end

  if (OM0BW01.OM0BWBDF == "BS"
   || OM0BW01.OM0BWBDF == "BX")
    set OM0BM001.OP2CGPCD protect;
  end

      /* ********************************************************/
      /* * 08/12/92 JLoyer - display booking season/mo on map. **/
      /* * Display multiple bk-sesn message if no other errors.**/
      /* ********************************************************/

  if (OM0BW01.OM0BW-BK-SESN-REQUIRED == "Y") /* bk-sesns-required (S10)*/
    OM0BS-MAP-BK-SESN(); /* move bk-sesns to map*/
    set OM0BM001.XBK-BK-SESN-CD initialAttributes; /* askip underscore*/
    set OM0BM001.OM0BM-OP-BK-YR-YY initialAttributes; /* askip underscore*/
    set OM0BM001.OM0BM-OP-BK-MO-MM initialAttributes; /* askip blue*/
    if (OM0BW01.OM0BW-MULTI-BK-SESN-MSG == "Y") /* need to display multi msg*/
      set OM0BM001.XBK-BK-SESN-CD normal; /* askip underscore*/
      set OM0BM001.OM0BM-OP-BK-YR-YY normal; /* askip underscore*/
      if (OMAREC.OMAERR == "Y") /* if prev errors*/
                                  /* don't over msg*/
      else /* else*/
        if (converseVar.validationMsgNum == 0) /* if no other msgs*/
          converseLib.validationFailed(776); /* dis multi bk-sesn msg*/
          OM0BW01.OM0BW-MULTI-BK-SESN-MSG = "N"; /* turn off flag*/
        end
      end
    end
  end

   /* TT#4752  BSSA GPC 02 CHANGES  Begin ***************************/

   /* Check for BSSA prods by calling the IO mod IO2640(DCORP.VSUMCD01)*/

  OM0BS-CHK-IF-BSSA(); /* Check for BSSA products*/

   /* following are the new rules * *********************************/
   /* handling codes, charges, override flags for non DC will first**/
   /* default from customer file. For draw orders handling codes on**/
   /* bulk and not on the customer will be added to item along with**/
   /* handling charges, override flag. Label codes and pack codes  **/
   /* will always default from customer for non Custmer draws.     **/
   /* After defaulting values BSSA hardcode logic will be applied. **/
   /* Changes will be made in Airspeed and maint to get all systems**/
   /* in sync.                                                     **/

   /* TT#4752  BSSA GPC 02 CHANGES  End   ***************************/

      /* ********************************************************/
      /* * map line 19 -five package handling codes & data    **/
      /* ********************************************************/

   /* call kufrec to get xpacd*/

  set KUFREC empty;

  KUFREC.KUCCOID = OP1REC.KUCCOID; /* cust num*/
  KUFREC.KUMSTRID = OP1REC.KUMSTRID; /* store*/
  KUFREC.XNXCD = OP1REC.XNXCD; /* dept*/
    /* TT#4752  BSSA GPC 02 CHANGES  Begin ***************************/
  if (OM0BW01.OM0BW-BSSA-PRODUCT == "Y") /* if bssa product*/
    KUFREC.XGPCD = "03"; /* GPC CODE*/
  else
    /* TT#4752  BSSA GPC 02 CHANGES   end  ***************************/
    KUFREC.XGPCD = OP1REC.XGPCD; /* gpc code*/
  end

  call "IO0200" ("SF", SQLCA, KUFREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
    /* TT#4752  BSSA GPC 02 CHANGES  Begin ***************************/
    if (OM0BW01.OM0BWBDF != "DC") /* not Customer draw order*/
      /* TT#4752  BSSA GPC 02 CHANGES   end  ***************************/
      OP3REC.XHDCD[1] = KUFREC.XHDCD[1];
      OP3REC.XHDCHG[1] = KUFREC.XHDCHG[1];
      OP3REC.XHDCD[2] = KUFREC.XHDCD[2];
      OP3REC.XHDCHG[2] = KUFREC.XHDCHG[2];
      OP3REC.XHDCD[3] = KUFREC.XHDCD[3];
      OP3REC.XHDCHG[3] = KUFREC.XHDCHG[3];
      OP3REC.XHDCD[4] = KUFREC.XHDCD[4];
      OP3REC.XHDCHG[4] = KUFREC.XHDCHG[4];
      OP3REC.XHDCD[5] = KUFREC.XHDCD[5];
      OP3REC.XHDCHG[5] = KUFREC.XHDCHG[5];
      OP3REC.PWRLBCD[1] = KUFREC.PWRLBCD[1];
      OP3REC.PWRLBCD[2] = KUFREC.PWRLBCD[2];
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
      TA1REC.TA1TBLVU = "VHNDLX01"; /* table view*/
      TA1REC.TA1TBLKE = KUCREC.KUCGRP; /* key value*/
      TA1REC.TA1LOCAT[3] = "OM0B020 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO0200  "; /* i/o mod name*/
      XSOPS02();
    end
  end

   /* TT#4752  BSSA GPC 02 CHANGES  Begin ***************************/
  if (OM0BW01.OM0BWBDF == "DC") /* Customer draw order*/
    OP3REC.XHDCD[1] = OM0BW02.XHDCD[1];
    OP3REC.XHDCHG[1] = OM0BW02.XHDCHG[1];
    OP3REC.OP2HCHGO[1] = OM0BW02.OP2HCHGO[1];
    OP3REC.XHDCD[2] = OM0BW02.XHDCD[2];
    OP3REC.XHDCHG[2] = OM0BW02.XHDCHG[2];
    OP3REC.OP2HCHGO[2] = OM0BW02.OP2HCHGO[2];
    OP3REC.XHDCD[3] = OM0BW02.XHDCD[3];
    OP3REC.XHDCHG[3] = OM0BW02.XHDCHG[3];
    OP3REC.OP2HCHGO[3] = OM0BW02.OP2HCHGO[3];
    OP3REC.XHDCD[4] = OM0BW02.XHDCD[4];
    OP3REC.XHDCHG[4] = OM0BW02.XHDCHG[4];
    OP3REC.OP2HCHGO[4] = OM0BW02.OP2HCHGO[4];
    OP3REC.XHDCD[5] = OM0BW02.XHDCD[5];
    OP3REC.XHDCHG[5] = OM0BW02.XHDCHG[5];
    OP3REC.OP2HCHGO[5] = OM0BW02.OP2HCHGO[5];
    OP3REC.PWRLBCD[1] = OM0BW02.PWRLBCD[1];
    OP3REC.PWRLBCD[2] = OM0BW02.PWRLBCD[2];
  end

  if (OM0BW01.OM0BWBDF == "DR"
   || OM0BW01.OM0BWBDF == "DS"
   || OM0BW01.OM0BWBDF == "DX"
   || OM0BW01.OM0BWBDF == "DN") /* if smrt,rebk,flexi of nike draw*/
    OM0BS-ADD-BLK-DFLT(); /* add bulk defaults*/
  end
   /* TT#4752  BSSA GPC 02 CHANGES  End   ***************************/

  OMAREC.OMASUB = 1; /* start at first handling code*/

  while (OMAREC.OMASUB < 6)
    OM0BW01.OM0BWHTP = " ";
    if (OP3REC.XHDCD[OMASUB] != " ")
      sysVar.arrayIndex = 1;
      OM0BM001.XHDCD[OMASUB] = OP3REC.XHDCD[OMASUB];
      OM0BW01.XHDCD = OP3REC.XHDCD[OMASUB];
      OM0BW01.XGPCD = OP1REC.XGPCD;
      if (OP1REC.ZFC-CRCY-CD == " ")
        OP1REC.ZFC-CRCY-CD = "USD"; /* if statement added for CANA*/
      end
      if (OM0BW01.XHDKEY in XHDTBL.XHDKEY)
        if (OP1REC.ZFC-CRCY-CD == XHDTBL.ZFC-CRCY-CD[sysVar.arrayIndex])
                                   /* added for Canada*/
          OM0BW01.XHDUCHFL = XHDTBL.XHDUCHFL[sysVar.arrayIndex];
        else
          converseLib.validationFailed(901); /* crcy mismatch*/
          OMAREC.OMAERR = "Y";
          exit stack;
        end
      end
      OM0BM001.XHDCHG[OMASUB] = OP3REC.XHDCHG[OMASUB];
      if (OP3REC.OP2HCHGO[OMASUB] == "Y") /* if charge was overridden*/
        OM0BW01.OP2HCHGO = "*"; /* move '*' to map*/
      end
      OM0BM001.OM0BMHTP[OMASUB] = OM0BW01.OM0BWHTP;
    end
    OMAREC.OMASUB = OMAREC.OMASUB + 1;
  end


      /* ********************************************************/
      /* * map line 20 - substitution product & qty,& forecast **/
      /* ********************************************************/

      /* if the current product was substituted for another*/
      /* nike product, then show the product number first wanted.*/

  OM0BM001.OP2SSTYN = OP3REC.OP2SSTYN;
  OM0BM001.OP2SCLCD = OP3REC.OP2SCLCD;
  OM0BM001.OP2SDMCD = OP3REC.OP2SDMCD;
  OM0BM001.OP2SUBQT = OP3REC.OP2SUBQT;


      /* show quality abbreviation for the product*/

  if (OMWREC.XQACD in XQATBL.XQACD)
    OM0BM001.XQAABRV = XQATBL.XQAABRV[sysVar.arrayIndex];
  else
    OM0BM001.XQAABRV = " ";
  end

      /* show flag if qty should be sent to forecasting dept.*/

  OM0BM001.OP2FSTFL = OP3REC.OP2FSTFL;


    /* ***********************************************************/
    /* *  If this product is hot, check for customer eligibility**/
    /* ***********************************************************/

  if (SYCREC.OPZHMIND == "Y" /* product is hot*/
   && OM0BW01.OM0BWBDF == " ") /* not a bulk or draw*/
    if (XOTTBL.XOTPROPF[OM0BWSBO] == "Y" /* is a prop ot*/
     && XOTTBL.XOTFUTRF[OM0BWSBO] == "N" /* not a futures ot*/
     && XOTTBL.XOTSMPLF[OM0BWSBO] == "N") /* not a sample*/
      OM0BSHM();
    end
  end


      /* **************************************/
      /* * map lines 5 - 14  all 20 sizes*/
      /* **************************************/

  if (OM0BW01.OM0BWBDF == "DS"
   || OM0BW01.OM0BWBDF == "DC"
   || OM0BW01.OM0BWBDF == "DX"
   || OM0BW01.OM0BWBDF == "DR"
   || OM0BW01.OM0BWBDF == "DN")
    OM0BM001.OM0BMLAV[1] = "BLK AVL:";
    OM0BM001.OM0BMLAV[2] = "BLK AVL:";
  else
    OM0BM001.OM0BMLAV[1] = "  AVAIL:";
    OM0BM001.OM0BMLAV[2] = "  AVAIL:";
  end


    /* call om0bsga to set up op01 key and call availability*/

  OM0BSGA(); /* get availability*/


    /* 9/5/89  -  for all nil orders with first quality products*/
    /* with active or in development life cycles, verify if there*/
    /* is a restriction on the customer ordering the specific*/
    /* product for the need date requested.*/
    /* determine product's life cycle for future nil orders so*/
    /* life style will be known for further edit checks.*/

  if (XOTTBL.XOTFUTRF[OM0BWSBO] == "Y" /* future order*/
   && OP1REC.XDVCD == "02")            /* and nil order*/
    OM0BSGL(); /* determine life cycle*/
  end

  if (OP1REC.XDVCD == "02") /* nil order*/
    if (OP3REC.XQACD == "01") /* first quality product*/
      if (OBIREC.XLCCD == "10" /* active life cycle*/
       || OBIREC.XLCCD == "05") /* OR IN DEVELOPMENT LIFE CYCLE*/
        OM0BW05.OM0BWDTE = OP1REC.OP1CUNDT; /* frmt need dte*/
        OM0BSOD(); /* verify nil cust/product elig.*/
      end
    end
  else
    OM0BSEZ(); /* check inc offering dates*/
  end

  OM0BW01.OM0BW-MOVE-QUANTITY-FLAG = "Y"; /* move quantities to screen*/
                                  /* for dup sizes*/

  OM0BS51(); /* move sizes,qty,(maybe avail),(maybe*/
                                   /* price) to map*/
        /* ; 'more sizes' done there*/
   /* *********************************************************/
end // end OM0B050

// converse the map, edit, exit
Function OM0B060()



  TA1REC.TA1LOCAT[1] = "OM0B060"; /* error diag -process*/
  TA1REC.TA1LOCAT[2] = " "; /* -group name*/


      /* add second message for forcibly rejected prod*/
      /* reason for rej appears in ezemsg*/

  if (OM0BW01.OM0BWREJ == "Y")
    OM0BM001.SY1SSTNM = "PROD.REJECTD";
    OM0BM001.SY2CLRAB = " -- HIT ENTER";
    set OM0BM001.SY1SSTNM cursor, bold;
    set OM0BM001.SY2CLRAB bold;
    if (OM0BW01.OM0BWNSF == "Y")
      OP1REC.OP1NORID = OP1REC.OP1NORID - 1; /* no new suborder*/
      OM0BW01.OP1NORID = OM0BW01.OP1NORID - 1;
    end
  end



    /* init restart flag*/

  OM0BW01.OM0BWRST = "N";


  /* protect map fields*/
  /* this is done prior to converse because there are some edits*/
  /* on other fields (like quantity fields) that will set these*/
  /* fields modified (which opens them for input).  Rather than*/
  /* add tests for bulks and draws to each of these edits, we*/
  /* will just reprotect the fields prior to converse.  bbake2 dec/91*/
  /*  */
  /* draws use warehouse of bulk, no changes allowed*/
  /* blank bulks can only come from warehouse 51*/
  /*  */
  if (OM0BW01.OM0BWBDF == "DS"
   || OM0BW01.OM0BWBDF == "DX"
   || OM0BW01.OM0BWBDF == "DR"
   || OM0BW01.OM0BWBDF == "DC"
   || OM0BW01.OM0BWBDF == "DN"
   || OM0BW01.OM0BWBBF == "BB")
    set OM0BM001.XWHCD protect;
  end

   /* need date cannot be changed for blank bulks and rebook draws*/

  if (OM0BW01.OM0BWBBF == "BB" /* blank bulk*/
   || OM0BW01.OM0BWBDF == "DR") /* rebook draw*/
    set OM0BM001.OM0BMNDT protect;
  end

  /* owner group cannot be changed for blank bulks/draws*/
  /* and customer draws*/
  /*  */
  if (OM0BW01.OM0BWBBF != " "
   || OM0BW01.OM0BWBDF == "DC"
   || OM0BW01.OM0BWBDF == "DN")
    set OM0BM001.XOWCD protect;
  end
   /* **************************************************************/
   /* protect the warehouse field for all International Orders using*/
   /* warehouse code '15'.*/
   /* **************************************************************/

  if (OP1REC.XDVCD == "02" /* International Order*/
   && OP1REC.XWHCD == "15") /* and consol delivery warehouse*/
    set OM0BM001.XWHCD protect; /* protect the warehouse code field*/
  end


   /* *******************************************************************/
   /* protect the warehouse, direct ship, and owner group fields for*/
   /* all international orders using order class code 'in', 'as', 'au'.*/
   /* *******************************************************************/

  if (OP1REC.XDVCD == "02") /* International Order*/
    if (OP1REC.XOCCD == "IN" /* order class 'international'*/
     || OP1REC.XOCCD == "AS" /* order class 'airborne sample' order*/
     || OP1REC.XOCCD == "AU") /* order class 'update airborne sample'*/
      set OM0BM001.XWHCD protect; /* protect the warehouse code field*/
      set OM0BM001.XDSCD protect; /* protect the direct ship code field*/
      set OM0BM001.XOWCD protect; /* protect the owner group code field*/
    end
  end

   /* *******************************************************************/
   /* divert order processing*/
   /* protect the warehouse, direct ship code and need date if the*/
   /* order is a divert.*/
   /* *******************************************************************/

  if (OP1REC.XDVCD == "02" /* international order*/
   && OP1REC.XOBCD == "F1" /* futures order*/
   && OP1REC.XDSCD == "1"  /* direct ship*/
   && OP1REC.OP1CUNDT < OP1REC.ZZZSDT) /* need dt < order dt*/
    set OM0BM001.XWHCD protect; /* protect warehouse*/
    set OM0BM001.XDSCD protect; /* protect direct ship*/
    set OM0BM001.OM0BMNDT protect; /* protect need date*/
  end

   /* ***************** end divert order processing *********************/


   /* if this is a transmitted airborne order (domestic)*/
   /* protect all map fields and disable the pf21 key*/
   /* this is done prior to the converse because of the edits*/
   /* on other fields throughout this program.*/

  if (XS0MW01.XS0MWABF == "Y") /* is a transmitted airborne order?*/
    XS0BS-SET-ATTRIB(); /* protect map*/
    converseLib.validationFailed(791); /* updates not allowed - press pf19*/
  else
    OM0BM001.OM0BPF21 = "21:ADD SIZ";
  end

      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1;


  converse OM0BM001 ;


      /* **************************************/
      /* * hot model eligible customer check*/
      /* **************************************/

    /* 08/07/89  bypass hot model logic if promo division*/
              /* or product is not first quality*/

  if (OP1REC.XDVCD == "03" /* if promo*/
   || OMWREC.XQACD != "01") /* or not first quality*/
      /* next sentence        bypass hot model logic*/
  else
    if (SYCREC.OPZHMIND == "Y") /* product is hot*/
      if (OM0BW01.OM0BWELI == "N" /* customer not eligible*/
       && OM0BW01.OM0BWAUT == "N") /* audit not ok*/
        if (converseVar.eventKey is pf24
         || converseVar.eventKey is pf19)
           /* next sentence*/
        else
          converseLib.validationFailed(479);
          exit stack;
        end
      end
    end
  end


      /* **********************************/
      /* * re-set messages and flags*/
      /* **********************************/

  OM0BM001.VAGen_EZEMSG = " "; /* clear error message*/
  OMAREC.OMAERR = "N"; /* no error flag*/
  OM0BW01.OM0BW-NEW-PROD-ADDED = "N"; /* used for cust.logo xfr*/
   /* MOVE 'N' TO OM0BW01.OM0BWCK2;    /* no availabilty check*/


      /* ***********************************************/
      /* * check & process valid pf aid key request*/
      /* ***********************************************/

      /* enter - continue*/
       /* pf 1 - no edits, flow out*/
       /* pf 6 - change size price(s)*/
      /* pf 12 - edit only*/
      /* pf 19 - no edits, reshow screen*/
      /* pf 21 - add sizes*/
      /* pf 23 - ocd comment*/

      /* phase 2 needs 2 more pf keys -*/
      /* - to product substitution inquiry*/
      /* - to availability inquiry*/




  if (converseVar.eventKey is enter /* valid pf keys in seq usually used*/
   || converseVar.eventKey is pf1   
   || converseVar.eventKey is pf12  
   || converseVar.eventKey is pf19  
   || converseVar.eventKey is pf21  
   || converseVar.eventKey is pf23)
    OM0BS62();
  else
    if (converseVar.eventKey is pf6)
      OM0BS61(); /* validate pf 6 chg size price*/
    else
      OM0BS62(); /* re-set mdt's for changed fields*/
      converseLib.validationFailed(008); /* invalid key pressed*/
      OMAREC.OMAERR = "Y"; /* re-show screen*/
      exit stack;
    end
  end


      /* ****************************************************/
      /* * bad data base access causes reject of product*/
      /* ****************************************************/

  if (OM0BW01.OM0BWREJ == "Y"
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf19)
    OM0BS89(); /* common exit to other applic.*/
  end



      /* *****************************************************/
      /* * control edits for all fields entered on the map*/
      /* *****************************************************/

      /* edit 'more sizes' before any other field*/

  if (OM0BM001.OM0BWMOR is modified) /* if 'more sizes' changed*/
    if (OM0BM001.OM0BWMOR == "N") /* only 'n' is valid*/
      OM0BW01.OM0BWMOR = OM0BM001.OM0BWMOR;
      set OM0BM001.OM0BWMOR initialAttributes;
    else
      if (OM0BM001.OM0BWMOR == "Y" /* y is valid on screen 1*/
       && OM0BW01.OM0BWSCR == 1)  
        OM0BW01.OM0BWMOR = OM0BM001.OM0BWMOR;
        set OM0BM001.OM0BWMOR initialAttributes;
      else
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(165); /* else message-correct response*/
        set OM0BM001.OM0BWMOR cursor, modified, bold;
        OM0BS62(); /* re-set mdt's on chgd flds*/
        exit stack; /* skip other edits*/
      end
    end
  end
  /*  */
  /* edit lower portion of screen, recheck availability*/
  /*  */
  OM0BS70();
  /*  */
  /* edit quantities entered*/
  /*  */
  if (OMAREC.OMAERR != "Y")
    OM0BS40();
  end
  /*  */
  /* edit change reason*/
  /*  */
  if (OMAREC.OMAERR != "Y")
    OM0BSER();
  end

      /* ***************************************/
      /* * if found errors, re-show the map*/
      /* ***************************************/

  if (OMAREC.OMAERR == "Y"
   || converseVar.validationMsgNum != 0)
    exit stack;
  end


    /* *****************************************************/
    /* *  check for override of possible ineligible cust  **/
    /* *****************************************************/



  if (converseVar.eventKey is enter) /* normal flow*/
    OM0BS64(); /* scrn 2 or verify/write, flow*/
  end


      /* ****************************************/
      /* * check pf keys for further action*/
      /* ****************************************/

  if (converseVar.eventKey is pf12) /* pf 12 edit only*/
    converseLib.validationFailed(009); /* press enter message*/
    exit stack; /* re-show the screen*/
  end


  if (converseVar.eventKey is pf21) /* pf 21 add sizes*/
    OM0BW01.OM0BWP21 = "Y";
    OM0BS65(); /* re-build screen-first to last sz*/
    exit stack; /* re-show the screen*/
  end

  if (converseVar.eventKey is pf23) /* ocd comment pop-up window*/
    if (OM0BM001.XOMCD == " ")
      converseLib.validationFailed(941);
      OMAREC.OMAERR = "Y";
      exit stack;
    else
      OM0BS-OCD-CMT();
    end
  end


  if (converseVar.eventKey is pf6) /* pf 6 allow size price change*/
    if (KUCREC.XAUCD == "26" /* if the order is a rep promo*/
     || KUCREC.XAUCD == "27") /* or a rep/agency personal purchase*/
      set OM0BM001.OM0BMPAD skip;
      set OM0BM001.OM0BMPAL skip;
      converseLib.validationFailed(687); /* cannot change prices on salesman*/
                                   /* orders*/
    else
      if (KUCREC.XAUCD == "64" /* if salesman sample*/
       && SYCREC.SY1FNSHG != "2") /* and not a raw material*/
        set OM0BM001.OM0BMPAD skip;
        set OM0BM001.OM0BMPAL skip;
        converseLib.validationFailed(687); /* cannot change prices for salesman*/
                                   /* orders*/
      else
        OM0BW01.OM0BWPF6 = "Y";
        OM0BS66(); /* put prices on map*/
        set OM0BM001.OM0BMPAD normal;
        set OM0BM001.OM0BMPAL normal;
      end
    end
    exit stack; /* re-show the screen*/
  end


   /* ***********************************************************/
end // end OM0B060

// add 1 dollar to price per unit
Function OM0BS-ADD-1-DOLLAR()

  if (OP3REC.SY5PRCUN[OM0BWSBR] != 0) /* price per unit not 0*/
    OP3REC.SY5PRCUN[OM0BWSBR] = OP3REC.SY5PRCUN[OM0BWSBR] +                               OM0BW-PRICING-FACTOR; /* 1 or 0*/
  end

end // end OM0BS-ADD-1-DOLLAR

// check if blk hndl cds 2b added
Function OM0BS-ADD-BLK-DFLT()
   /* **************************************************************/
   /* * This statement group is added as part of BSSA project. We **/
   /* * have defaulted handling codes, charges, override flags &  **/
   /* * and label codes from customer file. in this sgrp we will  **/
   /* * add handling codes which are on bulk and not on customer  **/
   /* * file to the draw order item.                              **/
   /* **************************************************************/

  sysVar.arrayIndex = 1; /* initialize subscript*/
  while (sysVar.arrayIndex <= 5) /* loop 5 time*/
    if (OM0BW02.XHDCD[sysVar.arrayIndex] != " ") /* valid handling code on blk*/
      OM0BS-ADD-BLK-HND(); /* add bulk handling codes*/
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1; /* increment subscript*/
  end
end // end OM0BS-ADD-BLK-DFLT

// add blk hndl cds to draws
Function OM0BS-ADD-BLK-HND()
   /* **************************************************************/
   /* * This statement group is added as part of BSSA project. We **/
   /* * have valid handling code on bulk. check if it already     **/
   /* * exists on item. if not on item add it to item.            **/
   /* **************************************************************/

  OM0BW01.OM0BW-HNDL-ON-CST = "N"; /* initialize flag*/
  OM0BW01.OM0BW-BSSA-SUB = 1; /* initialize subscript*/

  while (OM0BW01.OM0BW-BSSA-SUB <= 5) /* loop 5 times*/
    if (OM0BW02.XHDCD[sysVar.arrayIndex] == OP3REC.XHDCD[OM0BW-BSSA-SUB]) /* exists*/
      OM0BW01.OM0BW-HNDL-ON-CST = "Y"; /* set flag*/
      OM0BW01.OM0BW-BSSA-SUB = 5; /* come out of loop*/
    end
    OM0BW01.OM0BW-BSSA-SUB = OM0BW01.OM0BW-BSSA-SUB + 1; /* increment sub*/
  end

  if (OM0BW01.OM0BW-HNDL-ON-CST == "N") /* handling code not on cust*/
    OM0BW01.OM0BW-BSSA-SUB = 1; /* initialize subscript*/
    while (OM0BW01.OM0BW-BSSA-SUB <= 5) /* loop 5 times*/
      if (OP3REC.XHDCD[OM0BW-BSSA-SUB] == " ") /* if empty*/
        OP3REC.XHDCD[OM0BW-BSSA-SUB] = OM0BW02.XHDCD[sysVar.arrayIndex];
        OP3REC.XHDCHG[OM0BW-BSSA-SUB] = OM0BW02.XHDCHG[sysVar.arrayIndex];
        OP3REC.OP2HCHGO[OM0BW-BSSA-SUB] = OM0BW02.OP2HCHGO[sysVar.arrayIndex];
        OM0BW01.OM0BW-BSSA-SUB = 5; /* come out of loop*/
      end /* check for empty*/
      OM0BW01.OM0BW-BSSA-SUB = OM0BW01.OM0BW-BSSA-SUB + 1; /* increment sub*/
    end /* end while*/
  end /* final end*/
end // end OM0BS-ADD-BLK-HND

// DELETE/INSERT OB1REC
Function OM0BS-ADD-VSOHCR01()
   /* New Statement Group as of 7/22/97 modification.*/

   /* You should call OM0BS-MAX-VSOHCR01 and move only*/
   /* the changed PO, Need Date, DNSB, or DNSA value prior*/
   /* to calling this statement group.                     SLARSE*/

  VSOHCR01.SOCD-APPL-SRC-CD = "OP";
  VSOHCR01.SOCD-GLBL-MNTN-FL = "N";
  VSOHCR01.SOCD-HDR-RSN-TXT = XP0QW00.XP0QW-RSN-TEXT;
  VSOHCR01.XXX-USER-ID = COMMAREA.CAUSERID;
  VSOHCR01.ZZZSDT = XX0XW01.XX0XWDAT;
  VSOHCR01.ZZZSTM = XX0XW01.XX0XWTIM;
  VSOHCR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VSOHCR01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VSOHCR01.ZZZCHGCT = 0;

   /* ADD RECORD TO VSOHCR01*/

  call "VSOHCR01" ("A ", SQLCA, VSOHCR01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
         /* NEXT SENTENCE*/
  else
    TA1REC.TA1LOCAT[1] = "A "; /* CALLING OPTION*/
    TA1REC.TA1LOCAT[2] = "VSOHCR01"; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "A-VSOH "; /* stmt group*/
    TA1REC.TA1DBASE = "DORDCD  "; /* DATA BASE NAME*/
    TA1REC.TA1TBLVU = "VSOHCR01"; /* data base view*/
    TA1REC.TA1PGMAP = "OM0B"; /* program name*/
    TA1REC.TA1MAPAP = "OM0B"; /* map name*/
    TA1REC.TA1MAPNO = "M001"; /* map number*/
    OM0BWTK1 = VSOHCR01.OP1CUOID;
    OM0BWTK2 = VSOHCR01.OP1NORID;
    TA1REC.TA1TBLKE = OM0BWT1; /* table key*/
    if (SQLCA.VAGen_SQLCODE == -911)
      OM0BS84();
    else
      OM0BS02();
    end
  end

end // end OM0BS-ADD-VSOHCR01

// CALL AV1750 TO CALC OWNER GRP
Function OM0BS-AV1750-XOW()
   /* THIS STMT GROUP CALLS AV1750 TO CALCULATE THE OWNER GROUP*/

  set AVOREC empty;

   /* BUILD THE KEY USING AVOREC*/
  AVOREC.SY1STNBR = OP3REC.SY1STNBR;
  AVOREC.SY2CLRID = OP3REC.SY2CLRID;
  AVOREC.XDMCD = OP3REC.XDMCD;
  AVOREC.AVO-DATE = OM0BW01.OP1CUNDT;
  AVOREC.AVO-OPTION = "O";

  call "AV1750" (AVOREC) {isExternal = yes}; /* AVAILABILITY SUB TO CALCULATE XOWCD*/

  if (AVO-RETURN-STATUS == 0)
    OP3REC.XOWCD = AVOREC.XOWCD;
    OM0BM001.XOWCD = AVOREC.XOWCD;
    if (AVOREC.XOWCD == "SM"
     || AVOREC.XOWCD == "MR")
      OM0BW01.OM0BW-BLANK-BULK-ONLY-FL = "Y";
      OM0BW01.OM0BW-XOWCD-FOUND-FL = "Y";
    else
      if (AVOREC.XOWCD != "00")
        OM0BW01.OM0BW-XOWCD-FOUND-FL = "Y";
      else
        converseLib.validationFailed(785);
        OMAREC.OMAERR = "Y";
        set OM0BM001.OM0BMNDT cursor, modified, bold;
      end
    end
  else
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0B ";
    TA1REC.TA1LOC = "OM0BS-AV1750-XOWCD";
    TA1REC.TA1MAP = "OM0BM001";
    OM0BW01.OM0BW-AVOREC-RTN-STAT = AVOREC.AVO-RETURN-STATUS;
    OM0BW01.OM0BW-AVOREC-XOWCD = AVOREC.XOWCD;
    OM0BW01.OM0BW-AVOREC-SY1STYNBR = AVOREC.SY1STNBR;
    OM0BW01.OM0BW-AVOREC-SY2CLRID = AVOREC.SY2CLRID;
    OM0BW01.OM0BW-AVOREC-XDMCD = AVOREC.XDMCD;
    OM0BW01.OM0BW-AVOREC-OPTION = AVOREC.AVO-OPTION;
    OM0BW01.OM0BWDT1 = OM0BW01.OP1CUNDT;
    OM0BW01.OM0BW-AVOREC-DATE = OM0BW01.OM0BWDT1;
    TA1REC.TA1TBLKE = OM0BW01.OM0BW-AVOREC-ERRDIAG;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
    XSPF4();
  end

end // end OM0BS-AV1750-XOW

// set up draw availability
Function OM0BS-AVAIL-DRAW()
  /* draws availability is taken from the bulk, so OM0BWDAV is*/
  /* set to N to prevent decrementing from DAVAIL tables*/
  /*  */
  OM0BW01.OM0BWDAV = "N";
  /*  */
  /* find out where to take bulk quantities from.....*/
  /* --  smart res draws must use reserved quantities*/
  /* --  at once nike draws must use reserved quantities*/
  /* --  all other draws use on order quantities*/
  /*  */
  if (OM0BW01.OM0BWBDF == "DS")
    OM0BM001.OM0BMAVL[OM0BWSBM] = OM0BW03.OP3OHRQT[OM0BWSBR];
  else
    if (OM0BW01.OM0BWBDF == "DN"
     && XOTTBL.XOTATONF[OM0BWSBO] == "Y")
      OM0BM001.OM0BMAVL[OM0BWSBM] = OM0BW03.OP3OHRQT[OM0BWSBR];
    else
      OM0BM001.OM0BMAVL[OM0BWSBM] = OM0BW03.OP3ONOQT[OM0BWSBR];
    end
  end
  /*  */
  /* check for greater quantity requested than available*/
  /*  */
  /* note on om0bwrst:  if during update, we discover that*/
  /* bulk availability has been reduced by some other user,*/
  /* we have to redisplay the map showing the new quantities*/
  /* To avoid confusing the user - a separate message 297*/
  /* (BULK AVAILABILITY UPDATED - DRAW QTY EXCEEDS BULK AVAIL)*/
  /* is used, and om0bwrst is set to 'y' specifically to prevent*/
  /* message 297 from being overlaid by this one.*/
  /*  */
  if (OM0BM001.OP3ONOQT[OM0BWSBM] > OM0BM001.OM0BMAVL[OM0BWSBM])
    set OM0BM001.OP3ONOQT[OM0BWSBM] modified, bold;
    OMAREC.OMAERR = "Y";
    if (OM0BW01.OM0BWRST != "Y") /* this is not a restart*/
      converseLib.validationFailed(288); /* draw qty exceeds qty avail on bulk*/
    end
  end
end // end OM0BS-AVAIL-DRAW

// set up ob1210 availability
Function OM0BS-AVAIL-OB1210()
  /* ob1210 will send back a return code of:*/
  /* 0 - when conditions of the order require availability to*/
  /* be displayed and decremented*/
  /* so we want to show what we got, om0bmavl*/
  /* and when it is available, om0bmpof*/
  /* and check to make sure the quantity requested is*/
  /* not greater than the amount available*/
  /*  */
  if (OBIREC.OBIRTNCD == 0)
    OM0BM001.OM0BMPOF[OM0BWSBM] = OBIREC.OBICOND[OM0BWSBR];
    OM0BM001.OM0BMAVL[OM0BWSBM] = OBIREC.OBISZQTY[OM0BWSBR];
    if (OM0BM001.OM0BMAVL[OM0BWSBM] < OM0BM001.OP3ONOQT[OM0BWSBM])
      set OM0BM001.OP3ONOQT[OM0BWSBM] modified, bold;
      converseLib.validationFailed(385); /* more ordered then available msg*/
      OMAREC.OMAERR = "Y";
    end
    return;
  end
  /*  */
  /*  */
  /* ob1210 will send back a return code of:*/
  /* 1 - when conditions of the order are such that there are*/
  /* no availability restrictions, we don't have to decrement,*/
  /* and the user can order as much as they want*/
  /* so we want to set the availability amount and date fields*/
  /* dark*/
  /*  */
  if (OBIREC.OBIRTNCD == 1)
    OM0BW01.OM0BWDAV = "N";
    set OM0BM001.OM0BMAVL[OM0BWSBM] protect, invisible;
    set OM0BM001.OM0BMPOF[OM0BWSBM] protect, invisible;
    return;
  end
  /*  */
  /* ob1210 will send back a return code of:*/
  /* 2 - when there is something wrong in getting at the corporate*/
  /* tables (which were fine when we started adding this*/
  /* product) or a bad need date was passed to ob1210*/
  /* 3 - when there is a serious db2 error*/
  /* these are posted by ob1210, so we don't have to post here.*/
  /* Any other return code indicates a serious communication*/
  /* breakdown, and is handled like a db2 error*/
  /*  */
  OM0BM001.OM0BMAVL[OM0BWSBM] = "0";
  OM0BM001.OM0BMPOF[OM0BWSBM] = "999999";
  set OM0BM001.OM0BMPOF[OM0BWSBM] protect, invisible;
  set OM0BM001.OP3ONOQT[OM0BWSBM] modified, bold;
  OMAREC.OMAERR = "Y";
  if (OBIREC.OBIRTNCD == 2)
    converseLib.validationFailed(606); /* unable to determine avail for ot/need*/
  else
    converseLib.validationFailed(605); /* avail does not exist for product*/
  end
end // end OM0BS-AVAIL-OB1210

// CALUCLATE THE OWNER GROUP
Function OM0BS-CALC-XOWCD()
   /* THIS STMT GROUP CALCULATES THE OWNER GROUP FOR SCREENED FLYER STYLES*/
   /* IF NONE WAS ENTERED.*/

  OM0BST2(); /* GET THE PROGRAM INDICATOR*/
  OM0BST5(); /* GET XOWCD BY NEED DATE*/

  if (SQLCA.VAGen_SQLCODE == 0)
    OM0BST6(); /* VALIDATE OWNER GROUP/STYLE*/
    if (SQLCA.VAGen_SQLCODE == 0) /* VALID XOW/STYLE*/
      OM0BW01.OM0BW-BLANK-BULK-ONLY-FL = AVHREC.AVHBLKFL;
      OM0BW01.OM0BW-XOWCD-FOUND-FL = "Y";
      OP3REC.XOWCD = AVHREC.XOWCD;
      OM0BM001.XOWCD = AVHREC.XOWCD;
    else
      OM0BS-AV1750-XOW();
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* NO VALID XOW/STYLE FOUND*/
      OM0BS-AV1750-XOW();
    end
  end

end // end OM0BS-CALC-XOWCD

// call ob1470 for bk-sesn and mo
Function OM0BS-CALL-OB1470()
      /* ********************************************************/
      /* * 08/12/92 JLoyer #774: booking seasons               **/
      /* ********************************************************/
      /* * call ob1470 to calculate a product's available      **/
      /* * booking season(s) and booking month(s).             **/
      /* ********************************************************/

      /* set up OBSREC (pass record to and from ob1470)*/

  set OBSREC empty;

  OBSREC.OP1PARTN = OP1REC.OP1PARTN; /* op-ord-part-char*/
  OBSREC.OP1CUOID = OP1REC.OP1CUOID; /* op-cust-ord-id*/
  OBSREC.OP1NORID = OP1REC.OP1NORID; /* op-nike-ord-id*/
  OBSREC.OP2LNINB = OP3REC.OP2LNINB; /* op-line-item-nbr*/
  OBSREC.XGPCD = OP3REC.XGPCD; /* xgp-gpc-cd*/
  OBSREC.SY1STNBR = OP3REC.SY1STNBR; /* sy-sty-nbr*/
  OBSREC.SY2CLRID = OP3REC.SY2CLRID; /* sy-colr-cd-id*/
  OBSREC.XDMCD = OP3REC.XDMCD; /* xdm-dim-cd*/
  OBSREC.OP1CUNDT = OM0BW01.OP1CUNDT; /* op-cust-need-dt*/
  OBSREC.XOTCD = OP1REC.XOTCD; /* xot-ord-typ-cd*/
  OBSREC.XDVCD = OP1REC.XDVCD; /* xdv-div-cd*/
  OBSREC.XBCCD = OP1REC.XBCCD; /* xbc-brand-cd*/
  OBSREC.XQACD = OP3REC.XQACD; /* xqa-qual-cd*/
  OBSREC.KUCCOID = OP1REC.KUCCOID; /* cu-co-id*/
  OBSREC.KUMSTRID = OP1REC.KUMSTRID; /* cu-stor-id*/
  OBSREC.XNXCD = OP1REC.XNXCD; /* xnx-dept-id-xref*/
  OBSREC.XOTFUTRF = XOTTBL.XOTFUTRF[OM0BWSBO]; /* xottbl futr-fl*/
  OBSREC.XOTSMPLF = XOTTBL.XOTSMPLF[OM0BWSBO]; /* xottbl smpl-fl*/
  OBSREC.OBS-XDZCD = OP1REC.XDZ-DATA-DIST-CD; /* added for Canada*/
  OBSREC.OBS-SYS-ID = "OP"; /* system id*/


  call "OB1470" (OBSREC) {isNoRefresh = yes, isExternal = yes};

  if (OBSREC.OBS-RETN-CD == "00" /* if single bk-sesn and bk-mo*/
   || OBSREC.OBS-RETN-CD == "01") /* or multiple bk-sesns/bk-mos*/

  else
    OMAREC.OMAERR = "Y"; /* set error flag on*/
    if (OBSREC.OBS-RETN-CD == "02") /* order not eligable for*/
      converseLib.validationFailed(770); /* booking seasons*/
    else
      OM0BW01.OM0BWREJ = "Y"; /* set reject product flag*/
      if (OBSREC.OBS-RETN-CD == "03") /* invalid style*/
        converseLib.validationFailed(131); /**/
      else
        if (OBSREC.OBS-RETN-CD == "04") /* unable to calc bk-sesn*/
          converseLib.validationFailed(771); /* need-date not in XSNTBL*/
        else
          if (OBSREC.OBS-RETN-CD == "05") /* unable to calc bk-sesn*/
            converseLib.validationFailed(772); /* no bk-sesn on XSNTBL*/
          else
            if (OBSREC.OBS-RETN-CD == "06") /* ob1470 table overflow*/
              converseLib.validationFailed(773); /**/
            else
              if (OBSREC.OBS-RETN-CD == "08") /* misc db2 error*/
                converseLib.validationFailed(774); /* (sqlcd ^= 00, +100, -911)*/
              else
                if (OBSREC.OBS-RETN-CD == "09") /* -911 database busy*/
                  converseLib.validationFailed(010); /* database busy msg*/
                else
                  converseLib.validationFailed(775); /* unknown obsrec.retn-cd*/
                end
              end
            end
          end
        end
      end
    end
  end

  if (OBSREC.OBS-RETN-CD == "08") /* misc db2 error*/
    TA1REC.TA1TYPE = "APPL"; /* error type*/
    TA1REC.TA1FUNC = "RETN"; /* termination*/
    TA1REC.TA1PGMNM = "OM0B    "; /* calling pgm name*/
    TA1REC.TA1LOCAT[1] = "OM0BS-CA"; /* statement group*/
    TA1REC.TA1LOCAT[2] = "LL-OB147"; /* statement group*/
    TA1REC.TA1LOCAT[3] = "0 OB1470"; /* statement group/subpgm id*/
    TA1REC.TA1LOCAT[4] = OBSREC.OBS-RETN-CD; /* return-code*/
    TA1REC.TA1MAP = "OM0BM001"; /* map name*/
    TA1REC.TA1DBASE = "        "; /* database name*/
    TA1REC.TA1TBLVU = "        "; /* table view*/
    TA1REC.TA1TBLKE = "        "; /* table key*/
    TA1REC.TA1FYICD = "   "; /* fyi code*/
    TAEREC.TAEDESC1 = "ERROR CALLING OB1470 - OBSREC KEY IS: ";
    OM0BW01.OM0BW-OB1470-ERR-DESC = " "; /* init err-key*/
    OM0BW01.OM0BW-OB1470-OP1PARTN = OBSREC.OP1PARTN; /* part char*/
    OM0BW01.OM0BW-OB1470-DASH-1 = "-"; /* separator*/
    OM0BW01.OM0BW-OB1470-OP1CUOID = OBSREC.OP1CUOID; /* cust ord id*/
    OM0BW01.OM0BW-OB1470-DASH-2 = "-"; /* separator*/
    OM0BW01.OM0BW-OB1470-OP1NORID = OBSREC.OP1NORID; /* nike ord id*/
    OM0BW01.OM0BW-OB1470-DASH-3 = "-"; /* separator*/
    OM0BW01.OM0BW-OB1470-OP2LNINB = OBSREC.OP2LNINB; /* line item nbr*/
    OM0BW01.OM0BW-OB1470-DASH-4 = "-"; /* separator*/
    OM0BW01.OM0BW-OB1470-XGPCD = OBSREC.XGPCD; /* gpc cd*/
    OM0BW01.OM0BW-OB1470-DASH-5 = "-"; /* separator*/
    OM0BW01.OM0BW-OB1470-SY1STNBR = OBSREC.SY1STNBR; /* style*/
    OM0BW01.OM0BW-OB1470-DASH-6 = "-"; /* separator*/
    OM0BW01.OM0BW-OB1470-SY2CLRID = OBSREC.SY2CLRID; /* color*/
    OM0BW01.OM0BW-OB1470-DASH-7 = "-"; /* separator*/
    OM0BW01.OM0BW-OB1470-XDMCD = OBSREC.XDMCD; /* dim cd*/
    OM0BW01.OM0BW-OB1470-DASH-8 = "-"; /* separator*/
    OM0BW01.OM0BW-OB1470-NEED-DT = OBSREC.OP1CUNDT; /* cust need dt*/
    OM0BW01.OM0BW-OB1470-DASH-9 = "-"; /* separator*/
    OM0BW01.OM0BW-OB1470-XOTCD = OBSREC.XOTCD; /* sys order typ*/
    OM0BW01.OM0BW-OB1470-DASH-10 = "-"; /* separator*/
    OM0BW01.OM0BW-OB1470-XDVCD = OBSREC.XDVCD; /* division*/
    TAEREC.TAEDESC2 = OM0BW01.OM0BW-OB1470-ERR-DESC; /* display keys*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* back out any chgs*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* appl retn*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user area*/
    XSPF4(); /* master menu*/
    exit program; /* master menu failure*/
  end

end // end OM0BS-CALL-OB1470

// update ocd size item
Function OM0BS-CALL-OZ2090()

      /* use OZ2090 to update the VOCSIZ01 record*/

  set WOZ2090 empty;

  WOZ2090.OZ2090-OP-ORD-PART-CHAR = OP1REC.OP1PARTN;
  WOZ2090.OZ2090-OP-CUST-ORD-ID = OP1REC.OP1CUOID;
  WOZ2090.OZ2090-OP-NIKE-ORD-ID = OP1REC.OP1NORID;
  WOZ2090.OZ2090-OP-LINE-ITEM-NBR = OP3REC.OP2LNINB;
  WOZ2090.OZ2090-XOM-ORD-MNTN-CD = OM0BM001.XOMCD;
  WOZ2090.OZ2090-SOCD-APPL-SRC-CD = "OP";
  WOZ2090.OZ2090-SOCD-GLBL-MNTN-FL = "N";
  WOZ2090.OZ2090-SOCD-SZ-RSN-TXT = XP0QW00.XP0QW-RSN-TEXT;
  WOZ2090.OZ2090-XXX-USER-ID = COMMAREA.CAUSERID;


  call "OZ2090" (WOZ2090) {isNoRefresh = yes, isExternal = yes};


  if (WOZ2090.OZ2090-RETURN-CD == "00") /* good return*/
     /* ok - next sentence*/
  else
    converseLib.validationFailed(942);
    OMAREC.OMAERR = "Y";
  end

end // end OM0BS-CALL-OZ2090

// update ocd size item
Function OM0BS-CALL-OZ2140()

      /* use OZ2140 to migrate the keys when sub-order split occurs*/

  set WOZ2140 empty;

  WOZ2140.OZ2140-OP-ORD-PART-CHAR = OP1REC.OP1PARTN;
  WOZ2140.OZ2140-OP-CUST-ORD-ID = OP1REC.OP1CUOID;
  WOZ2140.OZ2140-OP-NIKE-ORD-ID-OLD = OM0BW01.OM0BWSSN;
  WOZ2140.OZ2140-OP-LINE-ITEM-NBR = OP3REC.OP2LNINB;
  WOZ2140.OZ2140-OP-NIKE-ORD-ID-NEW = OP1REC.OP1NORID;
  WOZ2140.OZ2140-CU-CO-ID = OP1REC.KUCCOID;
  WOZ2140.OZ2140-CU-STOR-ID = OP1REC.KUMSTRID;
  WOZ2140.OZ2140-XNX-DEPT-ID-XREF = OP1REC.XNXCD;
  OZ2140-XGP-GPC-CD = OP3REC.XGPCD;
  OZ2140-SP-SPGM-ID = OP1REC.SP1ID;
  WOZ2140.OZ2140-OP-CUST-NEED-DT = OM0BW01.OP1CUNDT;
  OZ2140-XOT-ORD-TYP-CD = OP1REC.XOTCD;
  OZ2140-OP-CUST-PO = OP1REC.OP1CUPO;
  /* MOVE COMMAREA.CAUSERID TO WOZ2140.OZ2140-XXX-USER-ID;*/


  call "OZ2140" (WOZ2140) {isNoRefresh = yes, isExternal = yes};


  if (WOZ2140.OZ2140-RETURN-CD == "00") /* good return*/
     /* ok - next sentence*/
  else
    converseLib.validationFailed(000);
    OMAREC.OMAERR = "Y";
  end

end // end OM0BS-CALL-OZ2140

// CHECK FOR ORDER TO UPDATE BULK
Function OM0BS-CHECK-UPDA()
   /* tcs include begin*/

  call "VBULKS02" (OBFREC, SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    OM0BS-UPDTE-VBULK(); /* if there are records update*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)

    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VBULKS02"; /* table view*/
      TA1REC.TA1LOCAT[3] = "OM0BS-CHECK-UPDA"; /* statement group*/
      TA1REC.TA1LOCAT[4] = "VBULKS02"; /* i/o mod name*/
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      OM0BS02(); /* abort*/
    end
   /* tcs include end*/
  end
end // end OM0BS-CHECK-UPDA

// CHECK FOR ORDER TO UPDATE BULK
Function OM0BS-CHECK-UPDA1()
   /* tcs include begin*/

  call "VBULKS02" (OBFREC, SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    OM0BS-UPDTE-VBULK1(); /* if there are records update*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)

    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VBULKS02"; /* table view*/
      TA1REC.TA1LOCAT[3] = "OM0BS-CHECK-UPDA1"; /* statement group*/
      TA1REC.TA1LOCAT[4] = "VBULKS02"; /* i/o mod name*/
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      OM0BS02(); /* abort*/
    end
   /* tcs include end*/
  end
end // end OM0BS-CHECK-UPDA1

// CHECK FOR FLYER PROGRAM
Function OM0BS-CHK-FLYER()
   /* THIS STMT GROUP DETERMINES IF THE*/
   /* STYLE IS ON A FLYER PROGRAM. IF ONE*/
   /* ROW IS FOUND ON DAVAIL.VBLNKS01 THEN THE STYLE QUALIFIES AND WE*/
   /* CONTINUE WITH SCREENED STYLE EDITING. IF NO ROWS ARE FOUND THE STYLE*/
   /* IS PROCESSED AS A NON-FLYER STYLE.*/

   /* BUILD KEY FOR READ OF VBLNKS01*/

  set AVHREC empty;
  AVHREC.SY1STNBR = OP3REC.SY1STNBR;
  AVHREC.SY2CLRID = OP3REC.SY2CLRID;
  AVHREC.XDMCD = OP3REC.XDMCD;

  call "IO5470" ("SF", SQLCA, AVHREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* FLYER STYLE FOUND*/
   || SQLCA.VAGen_SQLCODE == -811)
   /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      return;
    else
      TA1REC.TA1PGMNM = "OM0B ";
      TA1REC.TA1LOC = "OM0BS-CHK-FLYR";
      TA1REC.TA1LOCAT[4] = "IO5470";
      TA1REC.TA1MAP = "OM0BM001";
      TA1REC.TA1DBASE = "DAVAIL";
      TA1REC.TA1TBLVU = "VBLNKS01";
      TA1REC.TA1TBLKE = AVHREC.AVHKEY;
      XSOPS02();
    end
  end

end // end OM0BS-CHK-FLYER

// Check for BSSA product
Function OM0BS-CHK-IF-BSSA()
   /* *****************************************************************/
   /* TT#4752          03/28/00    LRAO1                            **/
   /* This SRGP is added to read the sum code table and  identify   **/
   /* BSSA products calling IO module IO2640.The flag OM0BW-BSSA    **/
   /* -PRODUCT is set to 'Y' if the product is BSSA else left as 'N'**/
   /* *****************************************************************/

  OM0BW01.OM0BW-BSSA-PRODUCT = "N"; /* set bssa flag 'N'*/
  YSMREC.YSMTBLPF = "XPC"; /* move table prefix XPC*/
  YSMREC.YSMSYSPF = "BS"; /* BS  system prefix for BSSA products*/
  YSMREC.YSMSUMID = 1; /* 1 to sum id*/
  YSMREC.YSMSUMCD = "1"; /* '1' to sum code*/
  YSMREC.YSMSRCVL = SYCREC.XPCCD; /* 1&2 positions of srce code is*/
                                  /* xpc code*/

  call "IO2640" ("S ", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* unique select*/

  if (SQLCA.VAGen_SQLCODE == 0) /* bssa product found*/
    OM0BW01.OM0BW-BSSA-PRODUCT = "Y"; /* move 'Y' to BSSA flag*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* bssa product not found*/
   /* next sentence*/
    else
      TA1REC.TA1LOCAT[1] = "OM0BS-CH"; /* move SRGP name*/
      TA1REC.TA1LOCAT[2] = "K-IF-BSS";
      TA1REC.TA1LOCAT[3] = "IO2640  "; /* move program name*/
      TA1REC.TA1DBASE = "DCORP   "; /* move table name*/
      TA1REC.TA1TBLVU = "VSUMCD01";
      TA1REC.TA1TBLKE = YSMREC.YSMGRP;
      XSOPS02(); /* DB2 abend*/
    end
  end
end // end OM0BS-CHK-IF-BSSA

// validate musical size runs
Function OM0BS-CHK-PREPKS()

   /* Call subprogram to validate the quantities*/

  set OPMZREC empty;

  OPMZREC.XGPCD = OP1REC.XGPCD;
  /* TT#12895-Changes begin - 07/11/2001 kshiva*/
  OPMZREC.XDSCD = OP1REC.XDSCD;
  /* TT#12895-Changes end -07/11/2001 kshiva*/
  OPMZREC.SY1STNBR = OP3REC.SY1STNBR;
  OPMZREC.SY2CLRID = OP3REC.SY2CLRID;
  OPMZREC.XDMCD = OP3REC.XDMCD;
  OPMZREC.OP2TONOQ = OP3REC.OP2TONOQ;

   /* Move qtys to pass record  - qty's were moved from the map to*/
   /* OP3REC in om0bS47*/

  OMAREC.OMASUB = 1;

  while (OMAREC.OMASUB <= 40)
    if (OP3REC.OP3SZAFL[OMASUB] == "Y")
      OPMZREC.OP3ONOQT[OMASUB] = OP3REC.OP3ONOQT[OMASUB];
    end
    OMAREC.OMASUB = OMAREC.OMASUB + 1;
  end


  call "OP3850" (OPMZREC) {isNoRefresh = yes, isExternal = yes};

  if (OPMZREC.OPMZ-RETURN-CD == 0)
    OM0BS-CRE-PREPKS();
  else
    if (OPMZREC.OPMZ-RETURN-CD == 1
     || OPMZREC.OPMZ-RETURN-CD == 2
     || OPMZREC.OPMZ-RETURN-CD == 3
     || OPMZREC.OPMZ-RETURN-CD == 4)
      OMAREC.OMAERR = "Y";
      OM0BM001.VAGen_EZEMSG = OPMZREC.OPMZ-RETURN-MSG;
    else
      if (OPMZREC.OPMZ-RETURN-CD == 8)
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(10);
      else
        if (OPMZREC.OPMZ-RETURN-CD == 7
         || OPMZREC.OPMZ-RETURN-CD == 9)
          OMAREC.OMAERR = "Y";
          TA1REC.TA1TYPE = "APPL";
          TA1REC.TA1FUNC = "RETN";
          TA1REC.TA1PGMNM = "OM0B    ";
          TA1REC.TA1LOCAT[1] = "OM0BS-VA";
          TA1REC.TA1LOCAT[2] = "L-PREPKS";
          TA1REC.TA1LOCAT[3] = "OP3850  ";
          TA1REC.TA1LOCAT[4] = OPMZREC.OPMZ-RETURN-CD;
          set TAEREC empty;
          OPMZREC.OPMZ-DIAG-KEY = " ";
          OPMZREC.OPMZ-DIAG-CUST-ORD-ID = OP1REC.OP1CUOID;
          OPMZREC.OPMZ-DIAG-NIKE-ORD-ID = OP1REC.OP1NORID;
          OPMZREC.OPMZ-DIAG-GPC-CD = OPMZREC.XGPCD;
          OPMZREC.OPMZ-DIAG-STY-NBR = OPMZREC.SY1STNBR;
          OPMZREC.OPMZ-DIAG-COLR-CD-ID = OPMZREC.SY2CLRID;
          OPMZREC.OPMZ-DIAG-DIM-CD = OPMZREC.XDMCD;
          OPMZREC.OPMZ-DIAG-RETURN-CD = OPMZREC.OPMZ-RETURN-CD;
          TAEREC.TAEDESC1 = OPMZREC.OPMZ-DIAG-KEY;
          TAEREC.TAEDESC2 = OPMZREC.OPMZ-RETURN-MSG;
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
          call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
          XSPF4();
          exit program;
        end
      end
    end
  end

end // end OM0BS-CHK-PREPKS

// CHECK FOR PROMO OWNER GROUP
Function OM0BS-CHK-PROMO()
   /* THIS STMT GROUP DETERMINES IF THE OWNER GROUP ENTERED IS A NON-FLYER*/
   /* (PROMO) OWNER GROUP.*/
                                  /* THIS IS A NON-FLYER OWNER GROUP IF NO*/
                                   /* ROW IS FOUND ON DAVAIL.VBLAKP01*/

  AVGREC.XOWCD = OM0BM001.XOWCD; /* LOAD THE KEY*/

  call "IO5480" ("S ", SQLCA, AVGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      OM0BW01.OM0BW-PROMO-XOWCD-FL = "Y";
    else
      TA1REC.TA1PGMNM = "OM0B ";
      TA1REC.TA1LOC = "OM0BS-CHK-PROMO";
      TA1REC.TA1LOCAT[4] = "IO5480";
      TA1REC.TA1MAP = "OM0BM001";
      TA1REC.TA1DBASE = "DAVAIL";
      TA1REC.TA1TBLVU = "VBLNKP01";
      TA1REC.TA1TBLKE = AVGREC.AVGKEY;
      XSOPS02();
    end
  end

   /* ************************************************************/
end // end OM0BS-CHK-PROMO

// insert msr prepack record
Function OM0BS-CRE-PREPKS()

   /* insert the prepack quantities for each line item if msr edit is ok*/

   /* format prepack record*/

  set OSNREC empty;

  OSNREC.XWHCD = OP1REC.XWHCD;
  OSNREC.OP1PARTN = OP1REC.OP1PARTN;
  OSNREC.OP1CUOID = OP1REC.OP1CUOID;
  OSNREC.OP1NORID = OP3REC.OP1NORID;
  OSNREC.OP2LNINB = OP3REC.OP2LNINB;
  OSNREC.XGPCD = OP3REC.XGPCD;
  OSNREC.OSNPKGNB = OP3REC.OP2LNINB; /* pkg# follows the line item #*/
  OSNREC.SY1STNBR = OP3REC.SY1STNBR;
  OSNREC.SY2CLRID = OP3REC.SY2CLRID;
  OSNREC.XDMCD = OP3REC.XDMCD;
  OSNREC.XPACD = OP1REC.XPACD;
  OSNREC.KUFMIXBL = "N";

   /* calculate total item qty and total carton ratio*/
  OMAREC.OMASUB = 1;

  while (OMAREC.OMASUB <= 40)
    if (OP3REC.OP3SZAFL[OMASUB] == "Y")
      OSNREC.PKTPPQTY[OMASUB] = OPMZREC.OP-MSZ-SZ-RATIO[OMASUB];
      OSNREC.KUCUNTCS = OSNREC.KUCUNTCS +                           OPMZREC.OP-MSZ-SZ-RATIO[OMASUB];
    end
    OMAREC.OMASUB = OMAREC.OMASUB + 1;
  end

  OSNREC.OSNTIQTY = OPMZREC.OP2TONOQ;

   /* find beginning active size*/
  sysVar.arrayIndex = 40;
  while (sysVar.arrayIndex >= 1)
    if (OPMZREC.OP-MSZ-SZ-RATIO[sysVar.arrayIndex] > 0)
      OSNREC.PKTBACTI = sysVar.arrayIndex;
    end
    sysVar.arrayIndex = sysVar.arrayIndex - 1;
  end

   /* get carton type code if pack code is 'cu'*/
  if (OP1REC.XPACD == "CU")
    OM0BS-GET-CTN-TYPE();
  end

  OSNREC.ZZZSDT = XX0XW01.XX0XWDAT;
  OSNREC.ZZZSTM = XX0XW01.XX0XWTIM;

  try
    call "IO5650" ("A ", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    /* /next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1LOCAT[1] = "OM0BS-CRE-PREPKS";
    TA1REC.TA1TBLVU = "VCSPRP01";
    TA1REC.TA1TBLKE = OSNREC.OSNKEY;
    TA1REC.TA1LOCAT[3] = "IO5650";
    TA1REC.TA1FUNC = "RETN";
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat; /* save the original sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes}; /* abend module*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user area*/
    COMMAREA.CATOAP = "MN0M"; /* go back to the o/m*/
    sysVar.transferName = "MN0M";
    transfer to transaction sysVar.transferName passing COMMAREA;
  end

end // end OM0BS-CRE-PREPKS

// edit booking seasons and month
Function OM0BS-EDIT-BK-SESN()

      /* ********************************************************/
      /* * 08/12/92 JLoyer #774 booking seasons                **/
      /* *                                                     **/
      /* * OBSREC contains the valid booking seasons available **/
      /* * for the current product.  if obsrec.retn-cd = '00', **/
      /* * only 1 booking season is available.  If the retn-cd **/
      /* * is '01', there are 2 booking seasons available and  **/
      /* * the user must enter 1 of the 2, or the existing one **/
      /* * must match 1 of the 2 obsrec-bk-sesns available.    **/
      /* ********************************************************/

  set OM0BM001.XBK-BK-SESN-CD initialAttributes; /* askip*/
  set OM0BM001.OM0BM-OP-BK-YR-YY initialAttributes; /* askip*/
  set OM0BM001.OM0BM-OP-BK-MO-MM initialAttributes; /* askip*/

  OM0BW01.OM0BW-BK-SESN-ERR = "N"; /* init bk-sesn-err flag*/


      /* ********************************************************/
      /* * op-bk-mo does not default from the bulk, even when  **/
      /* * we default xbk-bk-sesn-cd and op-bk-yr.  Int'l does **/
      /* * not use op-bk-mo.                                   **/
      /* ********************************************************/

  if (OM0BW01.OM0BW-DEFAULT-BK-SESN == "Y") /* if default bk-sesn*/
    if (OP1REC.XDVCD == "02") /* if NIL order*/
      return; /* no need to edit*/
    else /* else*/
      if (OBSREC.OBS-RETN-CD == "00" /* if single or multi*/
       || OBSREC.OBS-RETN-CD == "01") /* bk-sesns found*/
        OP3REC.OP-BK-MO = OBSREC.OP-BK-MO[1]; /* move 1st bk-mo*/
        OM0BS-MAP-BK-SESN(); /* move to map*/
        return; /* no need to edit*/
      end
    end
  end


      /* ********************************************************/
      /* * Retn-cd '00' means only 1 bk-sesn and bk-mo are     **/
      /* * available, move bk-sesn and bk-mo to op3rec and map.**/
      /* ********************************************************/

  if (OBSREC.OBS-RETN-CD == "00") /* single bk-sesn and mo*/
    OP3REC.XBK-BK-SESN-CD = OBSREC.XBK-BK-SESN-CD[1];
    OP3REC.OP-BK-YR = OBSREC.OP-BK-YR[1];
    OP3REC.OP-BK-MO = OBSREC.OP-BK-MO[1];
    OM0BS-MAP-BK-SESN(); /* move op3rec bk-sesn to map*/
  end


      /* ********************************************************/
      /* * Retn-cd '01' means 2 bk-sesns and bk-mos are        **/
      /* * available, the map must match 1 of the 2 available. **/
      /* * Numeric op-bk-yr must be moved to a character field **/
      /* * for comparison to the map, which is character.      **/
      /* ********************************************************/

  if (OBSREC.OBS-RETN-CD == "01") /* multi bk-sesn available*/
    set OM0BM001.XBK-BK-SESN-CD normal; /* no hilite and unprotect*/
    set OM0BM001.OM0BM-OP-BK-YR-YY normal; /* no hilite and unprotect*/
    if (OM0BM001.XBK-BK-SESN-CD == OBSREC.XBK-BK-SESN-CD[1]) /* map=bk-cd(1)*/
      OM0BW01.OM0BW-NUM-1-4 = OBSREC.OP-BK-YR[1];
      OM0BW01.OM0BW-CHA-BK-YY = OM0BW01.OM0BW-NUM-3-4; /* char yy*/
      if (OM0BM001.OM0BM-OP-BK-YR-YY == OM0BW01.OM0BW-CHA-BK-YY) /* yr(1)*/
        OP3REC.XBK-BK-SESN-CD = OBSREC.XBK-BK-SESN-CD[1];
        OP3REC.OP-BK-YR = OBSREC.OP-BK-YR[1];
        OP3REC.OP-BK-MO = OBSREC.OP-BK-MO[1];
        OM0BS-MAP-BK-SESN(); /* display bk-sesns on map*/
      else
        OM0BW01.OM0BW-BK-SESN-ERR = "Y"; /* map yr didn't match yr*/
      end /* for bk-sesn-cd(1)*/
    else
      if (OM0BM001.XBK-BK-SESN-CD == OBSREC.XBK-BK-SESN-CD[2]) /* map=bk-cd(2)*/
        OM0BW01.OM0BW-NUM-1-4 = OBSREC.OP-BK-YR[2]; /* extract last 2*/
        OM0BW01.OM0BW-CHA-BK-YY = OM0BW01.OM0BW-NUM-3-4; /* hold yy*/
        if (OM0BM001.OM0BM-OP-BK-YR-YY == OM0BW01.OM0BW-CHA-BK-YY) /* yr(2)*/
          OP3REC.XBK-BK-SESN-CD = OBSREC.XBK-BK-SESN-CD[2];
          OP3REC.OP-BK-YR = OBSREC.OP-BK-YR[2];
          OP3REC.OP-BK-MO = OBSREC.OP-BK-MO[2];
          OM0BS-MAP-BK-SESN(); /* display bk-sesn on map*/
        else
          OM0BW01.OM0BW-BK-SESN-ERR = "Y"; /* yr didn't match yr*/
        end /* for bk-sesn-cd(2)*/
      else
        OM0BW01.OM0BW-BK-SESN-ERR = "Y"; /* map bk-cd didn't match*/
      end /* either bk-cds in OBSREC*/
    end
  end

  if (OM0BW01.OM0BW-BK-SESN-ERR == "Y") /* bk-sesn error occurred*/
    OMAREC.OMAERR = "Y"; /* set error flag*/
    set OM0BM001.XBK-BK-SESN-CD cursor, modified, bold;
    set OM0BM001.OM0BM-OP-BK-YR-YY modified, bold;
    converseLib.validationFailed(777); /* disp bk-sesn/yr err-msg*/
    return;
  end


      /* ********************************************************/
      /* * multi-bk-sesn-msg = 'y' means display a map message **/
      /* * to inform users that 2 bk-sesns are available.      **/
      /* * Show this message for new multi bk-sesns and bk-mos.**/
      /* ********************************************************/

  if (OM0BW01.OM0BW-MULTI-BK-SESN-MSG == "Y") /* if we need to disp msg*/
    if (OMAREC.OMAERR == "Y") /* if prev errors exist*/
                                           /* skip*/
    else /* else*/
      if (converseVar.validationMsgNum == 0) /* if no prev msgs*/
        converseLib.validationFailed(776); /* bk-sesn can be 'SP' or 'FA'*/
        OM0BW01.OM0BW-MULTI-BK-SESN-MSG = "N"; /* turn off msg flag*/
      end
    end
  end

end // end OM0BS-EDIT-BK-SESN

// GET CARTON TYPE
Function OM0BS-GET-CTN-TYPE()
   /* since a 'cu' order must have a carton type code, we call pk4420*/
   /* to calculate the carton type code.  if pk4420 does not return a*/
   /* good value, get it from dcust.vcmpny01*/

  set PWSREC empty;
  PWSREC.KUCCOID = OP1REC.KUCCOID;
  PWSREC.OP1PARTN = OSNREC.OP1PARTN;
  PWSREC.OP1CUOID = OSNREC.OP1CUOID;
  PWSREC.OP1NORID = OSNREC.OP1NORID;
  PWSREC.XWHCD = OSNREC.XWHCD;
  PWSREC.XGPCD = OSNREC.XGPCD;
  PWSREC.XBCCD = OP1REC.XBCCD;
  PWSREC.OP2LNINB[1] = OSNREC.OP2LNINB;
  PWSREC.SY1STNBR[1] = OSNREC.SY1STNBR;
  PWSREC.SY2CLRID[1] = OSNREC.SY2CLRID;
  PWSREC.XDMCD[1] = OSNREC.XDMCD;
  PWSREC.PWSPPQ01[1] = OSNREC.PKTPPQTY[01];
  PWSREC.PWSPPQ02[1] = OSNREC.PKTPPQTY[02];
  PWSREC.PWSPPQ03[1] = OSNREC.PKTPPQTY[03];
  PWSREC.PWSPPQ04[1] = OSNREC.PKTPPQTY[04];
  PWSREC.PWSPPQ05[1] = OSNREC.PKTPPQTY[05];
  PWSREC.PWSPPQ06[1] = OSNREC.PKTPPQTY[06];
  PWSREC.PWSPPQ07[1] = OSNREC.PKTPPQTY[07];
  PWSREC.PWSPPQ08[1] = OSNREC.PKTPPQTY[08];
  PWSREC.PWSPPQ09[1] = OSNREC.PKTPPQTY[09];
  PWSREC.PWSPPQ10[1] = OSNREC.PKTPPQTY[10];
  PWSREC.PWSPPQ11[1] = OSNREC.PKTPPQTY[11];
  PWSREC.PWSPPQ12[1] = OSNREC.PKTPPQTY[12];
  PWSREC.PWSPPQ13[1] = OSNREC.PKTPPQTY[13];
  PWSREC.PWSPPQ14[1] = OSNREC.PKTPPQTY[14];
  PWSREC.PWSPPQ15[1] = OSNREC.PKTPPQTY[15];
  PWSREC.PWSPPQ16[1] = OSNREC.PKTPPQTY[16];
  PWSREC.PWSPPQ17[1] = OSNREC.PKTPPQTY[17];
  PWSREC.PWSPPQ18[1] = OSNREC.PKTPPQTY[18];
  PWSREC.PWSPPQ19[1] = OSNREC.PKTPPQTY[19];
  PWSREC.PWSPPQ20[1] = OSNREC.PKTPPQTY[20];
  PWSREC.PWSPPQ21[1] = OSNREC.PKTPPQTY[21];
  PWSREC.PWSPPQ22[1] = OSNREC.PKTPPQTY[22];
  PWSREC.PWSPPQ23[1] = OSNREC.PKTPPQTY[23];
  PWSREC.PWSPPQ24[1] = OSNREC.PKTPPQTY[24];
  PWSREC.PWSPPQ25[1] = OSNREC.PKTPPQTY[25];
  PWSREC.PWSPPQ26[1] = OSNREC.PKTPPQTY[26];
  PWSREC.PWSPPQ27[1] = OSNREC.PKTPPQTY[27];
  PWSREC.PWSPPQ28[1] = OSNREC.PKTPPQTY[28];
  PWSREC.PWSPPQ29[1] = OSNREC.PKTPPQTY[29];
  PWSREC.PWSPPQ30[1] = OSNREC.PKTPPQTY[30];
  PWSREC.PWSPPQ31[1] = OSNREC.PKTPPQTY[31];
  PWSREC.PWSPPQ32[1] = OSNREC.PKTPPQTY[32];
  PWSREC.PWSPPQ33[1] = OSNREC.PKTPPQTY[33];
  PWSREC.PWSPPQ34[1] = OSNREC.PKTPPQTY[34];
  PWSREC.PWSPPQ35[1] = OSNREC.PKTPPQTY[35];
  PWSREC.PWSPPQ36[1] = OSNREC.PKTPPQTY[36];
  PWSREC.PWSPPQ37[1] = OSNREC.PKTPPQTY[37];
  PWSREC.PWSPPQ38[1] = OSNREC.PKTPPQTY[38];
  PWSREC.PWSPPQ39[1] = OSNREC.PKTPPQTY[39];
  PWSREC.PWSPPQ40[1] = OSNREC.PKTPPQTY[40];

  try
    call "PK4420" (SQLCA, PWSREC) {isNoRefresh = yes, isExternal = yes};
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* db busy*/
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(010); /* database busy try again*/
    return;
  end
  if (PWSREC.PWSRTNCD == 0)
    OSNREC.YNTCD = PWSREC.YNTCD;
  else
    if (PWSREC.PWSRTNCD == 3)
      /* begin tcs*/
      OM0BM001.VAGen_EZEMSG = " NO CARTONS LARGE ENOUGH - RETRY";
      OMAREC.OMAERR = "Y"; /* error exist*/
      converseLib.validationFailed(996);
      exit stack;
      /* EZERTN;*/
      /* OM0BS-ALT-CTN-TYPE;*/
      /* end tcs*/
    else
      if (PWSREC.PWSRTNCD == 4)
        /* WIPRO Change Begin #05/25/99#*/
        OM0BM001.VAGen_EZEMSG = " PACKAGE REQUIRES MATCHING CARTON TYPES";
        OMAREC.OMAERR = "Y"; /* error exist*/
        exit stack;
        /* EZERTN;*/
        /* OM0BS-ALT-CTN-TYPE;*/
        /* WIPRO Change end*/
      else
        if (PWSREC.PWSRTNCD == 5)
          /* WIPRO Change Begin #05/25/99#*/
          OM0BM001.VAGen_EZEMSG = " NOT SET UP WITH CARTON CLASS";
          exit stack;
          /* EZERTN;*/
          /* OM0BS-ALT-CTN-TYPE;*/
          /* WIPRO Change end*/
        else
          if (PWSREC.PWSRTNCD == 6)
            /* WIPRO Change Begin #05/25/99#*/
            OM0BM001.VAGen_EZEMSG = " NOT SET UP WITH CARTON CLASS RECORD";
            exit stack;
            /* EZERTN;*/
            /* OM0BS-ALT-CTN-TYPE;*/
            /* WIPRO Change end*/
          else
            if (PWSREC.PWSRTNCD == 7)
              /* WIPRO Change Begin #05/25/99#*/
              OM0BM001.VAGen_EZEMSG = " NEEDS HANGING CARTON CLASS";
              exit stack;
              /* EZERTN;*/
              /* OM0BS-ALT-CTN-TYPE;*/
              /* WIPRO Change end*/
            else
              if (PWSREC.PWSRTNCD == 8)
                /* WIPRO Change Begin #05/25/99#*/
                OM0BM001.VAGen_EZEMSG = " NO ITEM PASSED";
                exit stack;
                /* EZERTN;*/
                /* OM0BS-ALT-CTN-TYPE;*/
                /* WIPRO Change end*/
              else
                if (PWSREC.PWSRTNCD == 9)
                  /* WIPRO Change Begin #05/25/99#*/
                  OM0BM001.VAGen_EZEMSG = " NO PREPACK QUANTITIES";
                  exit stack;
                  /* EZERTN;*/
                  /* OM0BS-ALT-CTN-TYPE;*/
                  /* WIPRO Change end*/
                else
                  TA1REC.TA1DBASE = "DORDER  ";
                  TA1REC.TA1TBLVU = "VCSPRP01";
                  TA1REC.TA1TBLKE = "PK4420";
                  TA1REC.TA1LOCAT[2] = "OM0BS-GET-CTN-TYPE";
                  XSOPS02();
                end
              end
            end
          end
        end
      end
    end
  end

end // end OM0BS-GET-CTN-TYPE

// get cutoff date
Function OM0BS-GET-CUTOFFS()
  TA1REC.TA1LOCAT[1] = "OM0BS32";

  set TA1REC empty;
  set TA2REC empty;
  set OPJREC empty;
  set OPLREC empty;
  set SQLCA empty;

  OM0BW01.OM0BWFND = "N";
  OM0BW01.OM0BWPAO = "N"; /* init prod add on flag*/
  OM0BW01.OM0BWP20 = "N"; /* 20 days past prod deadline*/
  OM0BW01.OM0BW-DAYS-PAST-CUTOFF = 0; /* # days past prod deadline*/
  /*  */
  if (OM0BW01.OM0BWBDF != "DC"     
   && OM0BW01.OM0BWBDF != "DS"     
   && OM0BW01.OM0BWBDF != "DX"     
   && OM0BW01.OM0BWBDF != "DR"     
   && OM0BW01.OM0BWBDF != "DN"     
   && OP1REC.XOTCD in XOTTBL.XOTCD /* order type in table*/
   && XOTTBL.XOTFUTRF[sysVar.arrayIndex] == "Y") /* futures*/
    OPJREC.XOTCD = OP1REC.XOTCD; /* order type code*/
    OPJREC.XPCCD = SYCREC.XPCCD; /* product cat code*/
    OPJREC.XGACD = SYCREC.XGACD; /* gender age code*/
    OPJREC.SY1STNBR = SYCREC.SY1STNBR; /* product style*/
    OPJREC.SY2CLRID = SYCREC.SY2CLRID; /* product color*/
    OPLREC.OPLSOP = "SF"; /* selection option*/
    OPLREC.OPJCNDTB = OM0BW01.OP1CUNDT; /* need date*/

    call "IO2560" (OPLREC, SQLCA, OPJREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0) /* record found*/
      OM0BW01.OM0BWFND = "Y"; /* deadline found*/
      if (OMAREC.OMACDT > OPJREC.OPJCUTDT) /* current date > prod d/l*/
        OM0BW01.OM0BWPAO = "Y"; /* set for production add-on*/
        TA2REC.TA2DBDFN = OPJREC.OPJCUTDT; /* move d/l date*/
        TA2REC.TA2DBDTN = OMAREC.OMACDT; /* today's date*/
        TA2REC.TA2DTOPT = "DAYSDIFF";
        TA2REC.TA2GRTYP = "G";

        call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

        if (TA2REC.TA2RTNCD == 0)
          OM0BW01.OM0BW-DAYS-PAST-CUTOFF = TA2REC.TA2DBDDN;
          if (TA2REC.TA2DBDDN >= 20)
            OM0BW01.OM0BWP20 = "Y"; /* 20 days past deadline*/
          end
        else
          TA1REC.TA1TYPE = "DB2 ";
          TA1REC.TA1PGMNM = "OM0B    ";
          TA1REC.TA1DBASE = "OP3REC  ";
          TA1REC.TA1TBLVU = "VITEM001";
          TA1REC.TA1TBLKE = OM0BW02.OP2KEY;
          COMMAREA.CA-USER-WORKAREA-4K = " ";
          XSPF4();
          exit program;
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if row not found in the table*/
        converseLib.validationFailed(940); /* populate the error message*/
        exit stack; /* display the screen with message*/
      else /* for sqlcode other than '0' and'100'*/
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "OM0B";
        TA1REC.TA1LOCAT[1] = "SF";
        TA1REC.TA1LOCAT[2] = "OM0BS32";
        TA1REC.TA1LOCAT[3] = "IO2560 ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1LOCAT[4] = "OM0BM001";
        TA1REC.TA1DBASE = "DORDER.";
        TA1REC.TA1TBLVU = "VCUTOF01";
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        XSPF4();
        OM0BM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      end
    end
  end

    /* see if order adjustment number required*/

  OM0BW01.OM0BWOAF = "N";

  if (OP1REC.XOCCD == "IN") /* invoice only order ?*/
     /* next sentence*/
  else
    if (OP1REC.XDVCD == "02" /* if nil*/
     && OP1REC.XGPCD == "02" /* and footwear*/
     && OM0BW01.OM0BWP20 == "Y")
                                   /* and 20 days past Futures cutoff date*/
      OM0BSOB(); /* o/a validation override test*/
      if (OM0BW01.OM0BWOAO == "N") /* if no override*/
        OM0BW01.OM0BWOAF = "Y"; /* set flag to trigger edit*/
      end
    end
  end

end // end OM0BS-GET-CUTOFFS

// distribute ftwr qtys by yms cd
Function OM0BS-GET-MSR()


    /* this statement group distributes the requested quantity*/
    /* from om0b across the requested sizes for footwear.*/
    /* Footwear uses the YMSTBL via op2830 instead of the XSZTBL.*/


   /* F OMWREC.XSZCD EQ ' ';*/
   /* EZERTN;*/
   /* ND;*/


   /* Code was entered, so call subprogram to distribute the quantities*/

   /* ET OPMSREC EMPTY;*/

   /* OVE 2 TO OPMSREC.OPMS-OPTION-CD;*/
   /* OVE OP1REC.XGPCD TO OPMSREC.XGPCD;*/
   /* OVE OMWREC.SY1STNBR TO OPMSREC.SY1STNBR;*/
   /* OVE OMWREC.SY2CLRID TO OPMSREC.SY2CLRID;*/
   /* OVE OMWREC.XDMCD TO OPMSREC.XDMCD;*/
   /* OVE OMWREC.OP2TONOQ TO OPMSREC.OP2TONOQ;*/
   /* OVE OMWREC.XSZCD TO OPMSREC.OP-MSC-SZ-RUN-CD;*/

   /* ALL OP2830 OPMSREC (NOMAPS,NONCSP;*/

   /* F OPMSREC.OPMS-RETURN-CD = 0;*/
   /* * CONTINUE;*/
   /* LSE;*/
   /* IF OPMSREC.OPMS-RETURN-CD = 1*/
     /* OR OPMSREC.OPMS-RETURN-CD = 2*/
     /* OR OPMSREC.OPMS-RETURN-CD = 3*/
     /* OR OPMSREC.OPMS-RETURN-CD = 4;*/
     /* MOVE 'Y' TO OMAREC.OMAERR;*/
     /* MOVE OPMSREC.OPMS-RETURN-MSG TO OM0BM001.EZEMSG;*/
     /* EZERTN;*/
   /* ELSE;*/
     /* IF OPMSREC.OPMS-RETURN-CD = 8;*/
       /* MOVE 'Y' TO OMAREC.OMAERR;*/
       /* MOVE 10 TO EZEMNO;*/
       /* EZERTN;*/
     /* ELSE;*/
       /* IF OPMSREC.OPMS-RETURN-CD = 7*/
         /* OR OPMSREC.OPMS-RETURN-CD = 9;*/
         /* MOVE 'Y' TO OMAREC.OMAERR;*/
         /* MOVE 'APPL' TO TA1REC.TA1TYPE;*/
         /* MOVE 'RETN' TO TA1REC.TA1FUNC;*/
         /* MOVE 'OM0B    ' TO TA1REC.TA1PGMNM;*/
         /* MOVE 'OM0BS-GE' TO TA1REC.TA1LOCAT(1);*/
         /* MOVE 'T-MSR   ' TO TA1REC.TA1LOCAT(2);*/
         /* MOVE 'OP2830  ' TO TA1REC.TA1LOCAT(3);*/
         /* MOVE OPMSREC.OPMS-RETURN-CD TO TA1REC.TA1LOCAT(4);*/
         /* SET TAEREC EMPTY;*/
         /* MOVE ' ' TO OPMSREC.OPMS-DIAG-KEY;*/
         /* MOVE OP1REC.OP1CUOID TO OPMSREC.OPMS-DIAG-CUST-ORD-ID;*/
         /* MOVE OP1REC.OP1NORID TO OPMSREC.OPMS-DIAG-NIKE-ORD-ID;*/
         /* MOVE OPMSREC.XGPCD TO OPMSREC.OPMS-DIAG-GPC-CD;*/
         /* MOVE OPMSREC.SY1STNBR TO OPMSREC.OPMS-DIAG-STY-NBR;*/
         /* MOVE OPMSREC.SY2CLRID TO OPMSREC.OPMS-DIAG-COLR-CD-ID;*/
         /* MOVE OPMSREC.XDMCD TO OPMSREC.OPMS-DIAG-DIM-CD;*/
                                  /* MOVE OPMSREC.OP-MSC-SZ-RUN-CD TO*/
                                   /* OPMSREC.OPMS-DIAG-MSC-SZ-RUN-CD;*/
         /* MOVE OPMSREC.OPMS-OPTION-CD TO OPMSREC.OPMS-DIAG-OPTION-CD;*/
         /* MOVE OPMSREC.OPMS-RETURN-CD TO OPMSREC.OPMS-DIAG-RETURN-CD;*/
         /* MOVE 'ORD' TO OPMSREC.OPMS-DIAG-LIT1;*/
         /* MOVE 'PRD' TO OPMSREC.OPMS-DIAG-LIT2;*/
         /* MOVE 'MSC CD' TO OPMSREC.OPMS-DIAG-LIT3;*/
         /* MOVE 'OPT' TO OPMSREC.OPMS-DIAG-LIT4;*/
         /* MOVE 'RTN' TO OPMSREC.OPMS-DIAG-LIT5;*/
         /* MOVE OPMSREC.OPMS-DIAG-KEY TO TAEREC.TAEDESC1;*/
         /* MOVE OPMSREC.OPMS-RETURN-MSG TO TAEREC.TAEDESC2;*/
         /* CALL RESET;*/
         /* CALL TA0020 TA1REC,TAEREC (NOMAPS,NONCSP;*/
         /* XSPF4;*/
         /* EZECLOS;*/
       /* END;*/
     /* END;*/
   /* END;*/
   /* ND;*/


   /* MOVE QTYS TO MAP*/

   /* OVE 1 TO OMAREC.OMASUB;*/

   /* HILE OMAREC.OMASUB LE 40;*/
   /* MOVE OPMSREC.OP3ONOQT(OMASUB) TO OP3REC.OP3ONOQT(OMASUB);*/
   /* OM0BW01.OM0BWTOT = OM0BW01.OM0BWTOT + OPMSREC.OP3ONOQT(OMASUB);*/
   /* OMAREC.OMASUB = OMAREC.OMASUB + 1;*/
   /* ND;*/


   /* for total quantity edit.*/

   /* OVE OMWREC.OP2TONOQ TO OP3REC.OP2TONOQ;*/



end // end OM0BS-GET-MSR

// GET DEPT FOR DEPT SELF ID
Function OM0BS-GET-VDEPT001()


      /* This routine reads the department record to obtain the*/
      /* department self id (kujslfid).*/


  call "IO0290" ("S ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[3] = "IO0290  ";
    TA1REC.TA1DBASE = "KUJREC  ";
    TA1REC.TA1TBLVU = "VDEPT001";
    OM0BW01.OM0BW-EK1-KEY = " ";
    OM0BW01.OM0BW-EK1-COMPANY = OP1REC.KUCCOID;
    OM0BW01.OM0BW-EK1-DEPT = OP1REC.XNXCD;
    TA1REC.TA1TBLKE = OM0BW01.OM0BW-EK1-KEY;
    XSOPS02(); /* abend*/
  end





end // end OM0BS-GET-VDEPT001

// WRITE CUSTOMER BULK RECORD
Function OM0BS-INSERT-BULKS()

     /* build customer bulk record*/

  VBULKS02.OP1PARTN = OP1REC.OP1PARTN; /* move part char*/
  VBULKS02.OP1CUOID = OP1REC.OP1CUOID; /* move order number*/
  VBULKS02.OP1NORID = OP1REC.OP1NORID; /* move nike order id*/

  KUCREC.KUCCOID = OP1REC.KUCCOID; /* move company id key*/
  OM0BS9C(); /* select comp for group/parent*/
  VBULKS02.KUCGRPID = KUCREC.KUCGRPID; /* move company group id*/
  VBULKS02.KUKPCOID = KUCREC.KUKPCOID; /* move parent company id*/
  VBULKS02.KUCCOID = OP1REC.KUCCOID; /* move company id*/
  VBULKS02.KUMSTRID = OP1REC.KUMSTRID; /* move store id*/
  VBULKS02.XNXCD = OP1REC.XNXCD; /* move department id*/

  KUJREC.KUCCOID = OP1REC.KUCCOID; /* move company id key*/
  KUJREC.XNXCD = OP1REC.XNXCD; /* move department id key*/
  OM0BS-GET-VDEPT001(); /* select dept for dept self id*/
  VBULKS02.KUJSLFID = KUJREC.KUJSLFID; /* move dept self id*/
  VBULKS02.XBDCD = OP1REC.XBDCD; /* move bulk draw code*/
  VBULKS02.XGPCD = OP1REC.XGPCD; /* move gpc code*/
  VBULKS02.OP1CUPO = OP1REC.OP1CUPO; /* move customer po*/
  VBULKS02.XDVCD = OP1REC.XDVCD; /* move division code*/
  VBULKS02.XSOCD = OP1REC.XSOCD; /* move sales office*/
  VBULKS02.XWHCD = OP1REC.XWHCD; /* move warehouse code*/
  VBULKS02.OP1CUNDT = OP1REC.OP1CUNDT; /* move need date*/
  VBULKS02.OP1DSADT = OP1REC.OP1DSADT; /* move don't ship after date*/
  VBULKS02.SP1ID = OP1REC.SP1ID; /* move sales program id*/
  VBULKS02.ZZZSDT = XX0XW01.XX0XWDAT; /* current date*/
  VBULKS02.ZZZSTM = XX0XW01.XX0XWTIM; /* current time*/
  VBULKS02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* current date*/
  VBULKS02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* current time*/
  VBULKS02.ZZZCHGCT = 0; /* init change count*/
  VBULKS02.SM4REPID = OP1REC.SM4REPID; /* move sales program id*/

  call "VBULKS02" ("A ", SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* NEXT SENTENCE*/
  else
    set TA1REC empty;
    set ERRSQLCA empty;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1DBASE = "DORDB ";
    TA1REC.TA1TBLVU = "VBULKS02";
    OM0BW01.OM0BW-EK2-PART-CHAR = OP1REC.OP1PARTN;
    OM0BW01.OM0BW-EK2-FILL-1 = " ";
    OM0BW01.OM0BW-EK2-CUST-ORD-ID = OP1REC.OP1CUOID;
    OM0BW01.OM0BW-EK2-FILL-2 = " ";
    OM0BW01.OM0BW-EK2-NIKE-ORD-ID = OP1REC.OP1NORID;
    TA1REC.TA1TBLKE = OM0BW01.OM0BW-EK2-KEY;
    TA1REC.TA1LOCAT[1] = "A/IO7250";
    TA1REC.TA1LOCAT[2] = "OM0BS-INSERT-BULKS";
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  end

end // end OM0BS-INSERT-BULKS

// move bk-sesn and bk-mo to map
Function OM0BS-MAP-BK-SESN()

      /* ********************************************************/
      /* * Move booking seasons and month to the map.  Only    **/
      /* * display the last two digits of year and month.  If  **/
      /* * the year or month are zeroes, display spaces.       **/
      /* ********************************************************/

  OM0BM001.XBK-BK-SESN-CD = OP3REC.XBK-BK-SESN-CD; /* display*/
                                                        /* bk-sesn-cd*/
  if (OP3REC.OP-BK-YR == 0)
    OM0BM001.OM0BM-OP-BK-YR-YY = "  ";
  else
    OM0BW01.OM0BW-NUM-1-4 = OP3REC.OP-BK-YR; /* display last*/
    OM0BM001.OM0BM-OP-BK-YR-YY = OM0BW01.OM0BW-NUM-3-4; /* 2 digits*/
  end

  if (OP3REC.OP-BK-MO == 0)
    OM0BM001.OM0BM-OP-BK-MO-MM = "  ";
  else
    OM0BW01.OM0BW-NUM-1-4 = OP3REC.OP-BK-MO; /* display last*/
    OM0BM001.OM0BM-OP-BK-MO-MM = OM0BW01.OM0BW-NUM-3-4; /* 2 digits*/
  end
end // end OM0BS-MAP-BK-SESN

// default map owner group
Function OM0BS-MAP-OWN-GRP()
   /* *************************************************************/
   /* set up map owner group for non-screened, non-blank bulk*/
   /* *************************************************************/

  if (OP1REC.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y") /* if owner grp required*/
      if (OP1REC.XWHCD == "03"
       || OP1REC.XWHCD == "51"
       || OP1REC.XWHCD == "25"
       || OP1REC.XWHCD == "27"
       || OP1REC.XWHCD == "42")
        OM0BM001.XOWCD = "00";
        OM0BM001.XOWABRV = " ";
        OP3REC.XOWCD = "00";
      else
        set OM0BM001.XOWCD modified; /* to trigger edit*/
        converseLib.validationFailed(103); /* owner grp required msg*/
      end
    else
      OM0BM001.XOWCD = "00";
      OM0BM001.XOWABRV = " ";
      OP3REC.XOWCD = "00";
    end
  else
    OM0BM001.XOWCD = "00";
    OM0BM001.XOWABRV = " ";
    OP3REC.XOWCD = "00";
  end
end // end OM0BS-MAP-OWN-GRP

// GET MAX SOCD-HRR-RSN-SEQ
Function OM0BS-MAX-VSOHCR01()

   /* New Statement Group as of 7/22/97 Modification.*/

   /* BUILD KEY TO READ VSOHCR01*/

  set VSOHCR01 empty;
  VSOHCR01.OP1PARTN = OP1REC.OP1PARTN;
  VSOHCR01.OP1CUOID = OP1REC.OP1CUOID;
  VSOHCR01.OP1NORID = OP1REC.OP1NORID;
  VSOHCR01.XOMCD = OMWREC.XOMCD;
  VSOHCR01.SOCD-APPL-SRC-CD = "OP";
  VSOHCR01.SOCD-HDR-RSN-SEQ = 1;

   /* DO A SEQLECT UNIQUE TO SEE IF THE ROW EXISTS*/

  call "VSOHCR01" ("S ", SQLCA, VSOHCR01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 100)
    VSOHCR01.SOCD-HDR-RSN-SEQ = 1;
  else
    if (SQLCA.VAGen_SQLCODE == 0)
      call "VSOHCR01" ("SM", SQLCA, VSOHCR01) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0
       || SQLCA.VAGen_SQLCODE == 100)
        VSOHCR01.SOCD-HDR-RSN-SEQ = VSOHCR01.SOCD-HDR-RSN-SEQ + 1;
      else
        TA1REC.TA1LOCAT[1] = "SM"; /* CALLING OPTION*/
        OM0BWTK1 = VSOHCR01.OP1CUOID;
        OM0BWTK2 = VSOHCR01.OP1NORID;
        TA1REC.TA1TBLKE = OM0BWT1; /* table key*/
        TA1REC.TA1PGMAP = "OM0B"; /* pgm name*/
        TA1REC.TA1MAPAP = "OM0B"; /* map name*/
        TA1REC.TA1MAPNO = "M001"; /* map number*/
        TA1REC.TA1LOCAT[2] = "VSOHCR01"; /* i/o mod name*/
        TA1REC.TA1LOCAT[3] = "MAX-SEQ"; /* stmt group*/
        TA1REC.TA1DBASE = "DORDCD  "; /* DATA BASE NAME*/
        TA1REC.TA1TBLVU = "VSOHCR01"; /* data base view*/
        if (SQLCA.VAGen_SQLCODE == -911)
          OM0BS84();
        else
          OM0BS02();
        end
      end
    else
      TA1REC.TA1LOCAT[1] = "S "; /* CALLING OPTION*/
      TA1REC.TA1LOCAT[2] = "VSOHCR01"; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "MAX-SEQ"; /* stmt group*/
      TA1REC.TA1DBASE = "DORDCD  "; /* DATA BASE NAME*/
      TA1REC.TA1TBLVU = "VSOHCR01"; /* data base view*/
      TA1REC.TA1PGMAP = "OM0B"; /* pgm name*/
      TA1REC.TA1MAPAP = "OM0B"; /* map name*/
      TA1REC.TA1MAPNO = "M001"; /* map number*/
      OM0BWTK1 = VSOHCR01.OP1CUOID;
      OM0BWTK2 = VSOHCR01.OP1NORID;
      TA1REC.TA1TBLKE = OM0BWT1; /* table key*/
      if (SQLCA.VAGen_SQLCODE == -911)
        OM0BS84();
      else
        OM0BS02();
      end
    end
  end

   /* Need to clear the PO, Need Date, Pterm, DNSB, and DNSA values.*/
   /* Because of the select unique above.  If we could eliminate the*/
   /* select unique (but DB2 Support doesn't want to add a null indi-*/
   /* cator to the select max) we wouldn't have to reset these fields.*/
   /* SLARSE*/
  VSOHCR01.OP1CUPO = " ";
  VSOHCR01.OP1CUNDT = 0;
  VSOHCR01.XPTCD = " ";
  VSOHCR01.OP1DSBDT = 0;
  VSOHCR01.OP1DSADT = 0;

end // end OM0BS-MAX-VSOHCR01

// CHECK FOR FLYER PROGRAM
Function OM0BS-OCD-CMT()
   /* THIS STMT GROUP DISPLAYS A POP-UP WINDOW*/
   /* FOR THE USER TO ENTER THE OCD COMMENT*/

  XP0QW00.XP0QW-XOMCD = OM0BM001.XOMCD;

  XP0Q001(); /* pop-up window initialize*/

  converseLib.clearScreen();
   /* restore the original map*/

  exit stack; /* display map*/


end // end OM0BS-OCD-CMT

// PROCESS FLYER STYLE
Function OM0BS-PROCES-FLYR()
   /* THIS STMT GRP CONTINUES THE EDITING OF A SCREENED PRODUCT*/
   /* THAT IS ON A FLYER PROGRAM*/

  OM0BW01.OM0BW-XOWCD-FOUND-FL = "N"; /* INIT FLAG*/
  OM0BW01.OM0BW-BLANK-BULK-ONLY-FL = "N"; /* INIT FLAG*/

  if (OM0BM001.XOWCD == " " /* NO OWNER GROUP ENTERED*/
   || OM0BM001.XOWCD == "00")
    if (XOTTBL.XOTFUTRF[OM0BWSBO] == "Y") /* FUTURES ORDER*/
      converseLib.validationFailed(784); /* CAN'T ORDER ON FUTURES OT*/
      OMAREC.OMAERR = "Y";
      set OM0BM001.XWHCD cursor, modified, bold;
      return;
    else
      OM0BS-CALC-XOWCD(); /* CALCULATE THE OWNER GROUP*/
    end
  else
    OM0BW01.OM0BW-PROMO-XOWCD-FL = "N"; /* INIT FLAG*/
    OM0BS-CHK-PROMO(); /* CHECK IF PROMO OWNER GROUP*/
    if (OM0BW01.OM0BW-PROMO-XOWCD-FL == "Y") /* THIS IS A PROMO OWNER GROUP*/
      return;
    else /* NOT A PROMO OWNER GROUP*/
      if (XOTTBL.XOTFUTRF[OM0BWSBO] == "Y") /* FUTURES ORDER TYPE*/
        converseLib.validationFailed(784); /* CAN'T ORDER ON FUTURES OT*/
        OMAREC.OMAERR = "Y";
        set OM0BM001.XOWCD cursor, modified, bold;
        return;
      else /* not promo not futures*/
        AVGREC.XOWCD = OM0BM001.XOWCD;
        OM0BST6(); /* VALIDATE XOWCD/STYLE*/
        if (SQLCA.VAGen_SQLCODE == 0)
          OM0BW01.OM0BW-BLANK-BULK-ONLY-FL = AVHREC.AVHBLKFL;
          OM0BW01.OM0BW-XOWCD-FOUND-FL = "Y";
        else
          converseLib.validationFailed(785); /* SC STYLE NOT AVAIL FOR NEEDDT*/
          OMAREC.OMAERR = "Y";
          set OM0BM001.XOWCD cursor, modified, bold;
          return;
        end
      end
    end
  end


  if (OM0BW01.OM0BW-XOWCD-FOUND-FL == "Y") /* GOOD OWNER GROUP FOUND*/
    if (OM0BW01.OM0BW-BLANK-BULK-ONLY-FL == "Y") /* BLANK BULK ONLY*/
      converseLib.validationFailed(682); /* BLANK BULK ONLY MSG*/
      OMAREC.OMAERR = "Y";
      set OM0BM001.XOWCD cursor, modified, bold;
      return;
    else
      OM0BST7(); /* CHECK THE CUTOFF TABLE*/
      if (SQLCA.VAGen_SQLCODE == 0)
        if (OECREC.OPJCUTDT < OMAREC.OMACDT) /* if cut-off-date < curr-date*/
          if (COMMAREA.CAUSERID in YOSTBL.XXXUSRID
           && YOSTBL.XXXSTAT[sysVar.arrayIndex] == "A"
           && YOSTBL.YOSNDTFL[sysVar.arrayIndex] == "Y") /* authorized for lateness*/
            if (converseVar.validationMsgNum == 0)
              converseLib.validationFailed(638); /* past cut-off date warning msg*/
            end
          else
            converseLib.validationFailed(679); /* CUTOFF DATE HAS PASSED*/
            OMAREC.OMAERR = "Y";
            set OM0BM001.OM0BMNDT cursor, modified, bold;
            return;
          end
        end
      else
        if (SQLCA.VAGen_SQLCODE == +100)
          converseLib.validationFailed(785);
          OMAREC.OMAERR = "Y";
          set OM0BM001.OM0BMNDT cursor, modified, bold;
          return;
        end
      end
    end
  end



end // end OM0BS-PROCES-FLYR

// round b-grade prc to nickel
Function OM0BS-ROUND-BG-PRC()

       /* you are here if the order is international and*/
       /* a b-grade product.  round the product price up*/
       /* to the nickel*/


  OM0BW-SAVE-PRICE-1 = 0;
  OM0BW-SAVE-PRICE-2 = 0;

  OM0BW-SAVE-PRICE-1 = OP3REC.SY5PRCUN[OM0BWSBR] / 5;

  OM0BW-SAVE-PRICE-2 = OM0BW-SAVE-PRICE-1 * 5;

  if (OP3REC.SY5PRCUN[OM0BWSBR] != OM0BW-SAVE-PRICE-2)
    OM0BW-SAVE-PRICE-2 = OM0BW-SAVE-PRICE-2 + .05;
    OP3REC.SY5PRCUN[OM0BWSBR] = OM0BW-SAVE-PRICE-2;
  end


end // end OM0BS-ROUND-BG-PRC

// select dprod.vsyreg01
Function OM0BS-SEL-SY2000()


   /* This statement group added for Canada -- June 27, 1995 --*/

     /* get the product/region record*/

  set SQLCA empty;
  WSY2000.XGP-GPC-CD = SYCREC.XGPCD;
  WSY2000.SY-STY-NBR = SYCREC.SY1STNBR;
  WSY2000.SY-COLR-CD-ID = SYCREC.SY2CLRID;
  WSY2000.XDM-DIM-CD = SYCREC.XDMCD;
  WSY2000.WSY2000-OPTION-CODE = "S ";
  WSY2000.WSY2000-SUB-OPTION-CODE = "O";


  call "SY2000" (WSY2000) {isNoRefresh = yes, isExternal = yes};

  if (WSY2000.WSY2000-RETURN-CODE == "00")
    OM0BW01.OM0BW-WSY2000-FND-FLAG = "Y";
  else
    if (WSY2000.WSY2000-RETURN-CODE == "02" /* product not found for region*/
     || WSY2000.WSY2000-RETURN-CODE == "98")
      OM0BW01.OM0BW-WSY2000-FND-FLAG = "N";
      return;
    else
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMNM = "OM0B";
      TA1REC.TA1LOC = "OM0BS-SEL-SY2000";
      OM0BW01.OM0BW-WSY2000-GPC-CD = SYCREC.XGPCD;
      OM0BW01.OM0BW-WSY2000-STY-NBR = SYCREC.SY1STNBR;
      OM0BW01.OM0BW-WSY2000-COLR-CD = SYCREC.SY2CLRID;
      OM0BW01.OM0BW-WSY2000-DIM-CD = SYCREC.XDMCD;
      OM0BW01.OM0BW-WSY2000-PROD-REG-CD = WSY2000.XDR-PROD-REG-CD;
      OM0BW01.OM0BW-WSY2000-RETURN-CD = WSY2000.WSY2000-RETURN-CODE;
      TAEREC.TAEDESC1 = OM0BW-WSY2000-POST-1;
      TAEREC.TAEDESC2 = "RETURN FROM CALL TO SY2000 - BAD RETURN CODE";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "SYREG02";
      TA1REC.TA1MAP = "OM0BM001";
      try
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      end
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error - clear ws*/
    end
  end

    /* move from wsy2000 to vcolor02*/

  SYCREC.PG1SC4CD = WSY2000.PG-SCHED-SPCLT-CD;
  SYCREC.PG1FCTCD = WSY2000.PG-FCST-CD;
  SYCREC.XSECD = WSY2000.XSE-SESN-CD;
  SYCREC.XSNYR = WSY2000.XSN-SESN-YR-RNG;

  SYCREC.SY2POFBD = WSY2000.SY-PROP-OFFER-BDT;
  SYCREC.SY2POFXD = WSY2000.SY-PROP-OFFER-XDT;
  SYCREC.SY2FOFBD = WSY2000.SY-FUTR-OFFER-BDT;
  SYCREC.SY2FOFXD = WSY2000.SY-FUTR-OFFER-XDT;

  SYCREC.XLCCD1 = WSY2000.XLC-LIFE-CYC-CD[1];
  SYCREC.XLCCD2 = WSY2000.XLC-LIFE-CYC-CD[2];
  SYCREC.XLCCD3 = WSY2000.XLC-LIFE-CYC-CD[3];
  SYCREC.XLCCD4 = WSY2000.XLC-LIFE-CYC-CD[4];

  SYCREC.SY2CEDT1 = WSY2000.SY-LIFE-CYC-EDT[1];
  SYCREC.SY2CEDT2 = WSY2000.SY-LIFE-CYC-EDT[2];
  SYCREC.SY2CEDT3 = WSY2000.SY-LIFE-CYC-EDT[3];
  SYCREC.SY2CEDT4 = WSY2000.SY-LIFE-CYC-EDT[4];

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 6)
    SYCREC.XWHCD[sysVar.arrayIndex] = WSY2000.XWH-WHSE-CD[sysVar.arrayIndex];
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end


end // end OM0BS-SEL-SY2000

// get the sales pgm record
Function OM0BS-SPGM-DEPT-CD()


      /* *************************************************/
      /* this statement group does a call to IO0070 to*/
      /* get the nike department code*/
      /* *************************************************/

  set SP0UW02 empty; /* input to IO0070 iomod*/
  set SQLCA empty; /* input to IO0070 iomod*/
  set SP1REC empty; /* need the department code*/

  SP0UW02.SP0UWSOP = "S "; /* a select unique will be done*/
  SP1REC.SP1ID = OP1REC.SP1ID; /* key for sp1rec in io0070 call*/
  call "IO0070" (SP0UW02, SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes}; /* obtain dept code*/
  if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(6); /* change not made (data base not*/
                                   /* available)*/
      exit stack;
    else
      if (SQLCA.VAGen_SQLCODE == -904
       || SQLCA.VAGen_SQLCODE == 100)
        TA1REC.TA1PGMNM = "OM0BS61";
        TA1REC.TA1DBASE = "DSPGM";
        TA1REC.TA1TBLVU = "VSPGM001";
        OM0BW01.OM0BW-SAY-ORDER = "ORDER # ";
        OM0BW01.OM0BW-ORDER-NUM = OP1REC.OP1CUOID;
        OM0BW01.OM0BW-SAY-PERIOD = ".";
        OM0BW01.OM0BW-SUB-ORDER = OP1REC.OP1NORID;
        OM0BW01.OM0BW-SAY-SPGM = "  SPGM ";
        OM0BW01.OM0BW-SPGM = OP1REC.SP1ID;
        TA1REC.TA1TBLKE = OM0BW-TABLE-KEY;
        TA1REC.TA1LOC = "OM0BS-SPGM-DEPT-CD";
        TA1REC.TA1LOCAT[4] = "IO0070";
        TA1REC.TA1MAPAP = "OM0B";
        TA1REC.TA1TYPE = "DB2"; /* abend type*/
        TA1REC.TA1FUNC = "RETN"; /* abend func*/
        set ERRSQLCA empty; /* clear area*/
        move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* syncpoint rollback*/
        try
          call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        end /* abend module*/
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
        XSPF4(); /* master menu*/
        exit program; /* master menu failure*/
      else
       /* next sentence*/
      end
    end
  end


end // end OM0BS-SPGM-DEPT-CD

// UPDATE VBULKS02
Function OM0BS-UPDTE-VBULK()
  /* tcs include begin*/
   /* to update vbulk*/
  set SQLCA empty;
  set OBFREC empty;
  VBULKS02.KUMSTRID = OP1REC.KUMSTRID;
  VBULKS02.XNXCD = OP1REC.XNXCD;
  VBULKS02.XBDCD = OP1REC.XBDCD;
  VBULKS02.OP1CUPO = OP1REC.OP1CUPO;
  VBULKS02.XDVCD = OP1REC.XDVCD;
  VBULKS02.XSOCD = OP1REC.XSOCD;
  VBULKS02.XWHCD = OP1REC.XWHCD;
  VBULKS02.OP1CUNDT = OP1REC.OP1CUNDT;
  VBULKS02.OP1DSADT = OP1REC.OP1DSADT;
  VBULKS02.SP1ID = OP1REC.SP1ID;
  VBULKS02.SM4REPID = OP1REC.SM4REPID;
  OBFREC.OBFTASK = "U ";
  call "VBULKS02" (OBFREC, SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

  else
    TA1REC.TA1LOCAT[1] = "U ";
    TA1REC.TA1LOCAT[2] = "VBULKS02";
    TA1REC.TA1LOCAT[3] = "OMOBS-UPDTE-VBULK";
    TA1REC.TA1DBASE = "DORDB  "; /* data base name*/
    TA1REC.TA1TBLVU = "VBULKS02"; /* data base view*/
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    OM0BS02();
  end
  /* tcs include end*/
end // end OM0BS-UPDTE-VBULK

// UPDATE VBULKS02
Function OM0BS-UPDTE-VBULK1()
   /* tcs include begin*/
   /* to update vbulk*/
  set SQLCA empty;
  set OBFREC empty;

  VBULKS02.KUMSTRID = OM0BW04.KUMSTRID;
  VBULKS02.XNXCD = OM0BW04.XNXCD;
  VBULKS02.XBDCD = OM0BW04.XBDCD;
  VBULKS02.OP1CUPO = OM0BW04.OP1CUPO;
  VBULKS02.XDVCD = OM0BW04.XDVCD;
  VBULKS02.XSOCD = OM0BW04.XSOCD;
  VBULKS02.XWHCD = OM0BW04.XWHCD;
  VBULKS02.OP1CUNDT = OM0BW04.OP1CUNDT;
  VBULKS02.OP1DSADT = OM0BW04.OP1DSADT;
  VBULKS02.SP1ID = OM0BW04.SP1ID;
  VBULKS02.SM4REPID = OM0BW04.SM4REPID;
  OBFREC.OBFTASK = "U ";
  call "VBULKS02" (OBFREC, SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

  else
    TA1REC.TA1LOCAT[1] = "U ";
    TA1REC.TA1LOCAT[2] = "VBULKS02";
    TA1REC.TA1LOCAT[3] = "OMOBS-UPDTE-VBULK1";
    TA1REC.TA1DBASE = "DORDB  "; /* data base name*/
    TA1REC.TA1TBLVU = "VBULKS02"; /* data base view*/
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    OM0BS02();
  end
   /* tcs include end*/
end // end OM0BS-UPDTE-VBULK1

// validate musical size runs
Function OM0BS-VAL-PREPKS()

   /* Call subprogram to validate the quantities*/

  set OPMZREC empty;

  OPMZREC.XGPCD = OP1REC.XGPCD;
  /* TT#12895-Changes begin - 07/11/2001 kshiva*/
  OPMZREC.XDSCD = OP1REC.XDSCD;
  /* TT#12895-Changes end - 07/11/2001 kshiva*/
  OPMZREC.SY1STNBR = OP3REC.SY1STNBR;
  OPMZREC.SY2CLRID = OP3REC.SY2CLRID;
  OPMZREC.XDMCD = OP3REC.XDMCD;
  OPMZREC.OP2TONOQ = OP3REC.OP2TONOQ;

   /* Move qtys to pass record  - qty's were moved from the map to*/
   /* OP3REC in om0bS47*/

  OMAREC.OMASUB = 1;

  while (OMAREC.OMASUB <= 40)
    if (OP3REC.OP3SZAFL[OMASUB] == "Y")
      OPMZREC.OP3ONOQT[OMASUB] = OP3REC.OP3ONOQT[OMASUB];
    end
    OMAREC.OMASUB = OMAREC.OMASUB + 1;
  end


  call "OP3850" (OPMZREC) {isNoRefresh = yes, isExternal = yes};

  if (OPMZREC.OPMZ-RETURN-CD == 0)
    /* /next sentence;*/
  else
    if (OPMZREC.OPMZ-RETURN-CD == 1
     || OPMZREC.OPMZ-RETURN-CD == 2
     || OPMZREC.OPMZ-RETURN-CD == 3
     || OPMZREC.OPMZ-RETURN-CD == 4)
      OMAREC.OMAERR = "Y";
      OM0BM001.VAGen_EZEMSG = OPMZREC.OPMZ-RETURN-MSG;
    else
      if (OPMZREC.OPMZ-RETURN-CD == 8)
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(10);
      else
        if (OPMZREC.OPMZ-RETURN-CD == 7
         || OPMZREC.OPMZ-RETURN-CD == 9)
          OMAREC.OMAERR = "Y";
          TA1REC.TA1TYPE = "APPL";
          TA1REC.TA1FUNC = "RETN";
          TA1REC.TA1PGMNM = "OM0B    ";
          TA1REC.TA1LOCAT[1] = "OM0BS-VA";
          TA1REC.TA1LOCAT[2] = "L-PREPKS";
          TA1REC.TA1LOCAT[3] = "OP3850  ";
          TA1REC.TA1LOCAT[4] = OPMZREC.OPMZ-RETURN-CD;
          set TAEREC empty;
          OPMZREC.OPMZ-DIAG-KEY = " ";
          OPMZREC.OPMZ-DIAG-CUST-ORD-ID = OP1REC.OP1CUOID;
          OPMZREC.OPMZ-DIAG-NIKE-ORD-ID = OP1REC.OP1NORID;
          OPMZREC.OPMZ-DIAG-GPC-CD = OPMZREC.XGPCD;
          OPMZREC.OPMZ-DIAG-STY-NBR = OPMZREC.SY1STNBR;
          OPMZREC.OPMZ-DIAG-COLR-CD-ID = OPMZREC.SY2CLRID;
          OPMZREC.OPMZ-DIAG-DIM-CD = OPMZREC.XDMCD;
          OPMZREC.OPMZ-DIAG-RETURN-CD = OPMZREC.OPMZ-RETURN-CD;
          TAEREC.TAEDESC1 = OPMZREC.OPMZ-DIAG-KEY;
          TAEREC.TAEDESC2 = OPMZREC.OPMZ-RETURN-MSG;
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
          call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
          XSPF4();
          exit program;
        end
      end
    end
  end

end // end OM0BS-VAL-PREPKS

// abort routine
Function OM0BS02()



      /* *********************************************************/
      /* * online abort routine for op system                   **/
      /* *********************************************************/

  TA1REC.TA1TYPE = "DB2"; /* abend type*/
  TA1REC.TA1FUNC = "RETN"; /* abend func*/
  set ERRSQLCA empty; /* clear area*/
  move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* synpoint rollback*/
  try
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  end /* abend module*/
  COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
  XSPF4(); /* master menu*/
  exit program; /* master menu failure*/



   /* *************************************************************/
end // end OM0BS02

// init w-s fields, ord-tp, spgm
Function OM0BS10()



      /* *************************************/
      /* * initialize all working-storages*/
      /* *************************************/

  TA1REC.TA1LOCAT[2] = "OM0BS10"; /* error diag group name*/


      /* *********************************/
      /* init oparec, temporary w-s*/
      /* *********************************/

  OMAREC.OMASEP1 = "."; /* set customer number separators*/
  OMAREC.OMASEP2 = ".";

  OMAREC.OMACYMD = VGVar.currentShortGregorianDate; /* keep current date*/
  if (OMAREC.OMACYY > 56) /* add correct century*/
    OMAREC.OMACCC = 19;
  else
    OMAREC.OMACCC = 20;
  end

  XX0XS01(); /* establish current date/time*/

  OMAREC.OMAWCC = OMAREC.OMACCC; /* init century in work date*/


      /* *********************************/
      /* init om0bws, application w-s*/
      /* *********************************/

   /* set up ws time*/

  OM0BW01.OM0BWTM1 = VGVar.currentFormattedTime;
  OM0BW01.OM0BWTHL = OM0BW01.OM0BWTHF;
  OM0BW01.OM0BWTML = OM0BW01.OM0BWTMF;
  OM0BW01.OM0BWTSL = OM0BW01.OM0BWTSF;



  OM0BW01.OM0BWS01 = "-"; /* set product number separators*/
  OM0BW01.OM0BWS02 = "-";
  OM0BW01.OM0BWREJ = "N"; /* no bad db2 access, yet . . .*/

  OM0BS11(); /* build empty size data*/


      /* ************************************************/
      /* get order type table to use to validate sizes*/
      /* ************************************************/

  sysVar.arrayIndex = 1;
  if (OP1REC.XOTCD in XOTTBL.XOTCD) /* find order type code in table*/
    OM0BW01.OM0BWSBO = sysVar.arrayIndex; /* hold index*/
  else /* else reject product*/
    converseLib.validationFailed(17); /* msg-order type not valid*/
    OM0BW01.OM0BWREJ = "Y";
    OMAREC.OMAERR = "Y";
    exit stack;
  end

  OM0BW01.OM0BWPCT = XOTTBL.XOTPRCVP[sysVar.arrayIndex] / 100; /* chg price vary to %*/


      /* set-up price effective date, either bookings or ship*/

  if (XOTTBL.XOTPRCDT[sysVar.arrayIndex] == "B")
    OM0BW01.OM0BWPED = OMAREC.OMACDT; /* bookings = today*/
  else
    OM0BW01.OM0BWPED = OP1REC.OP1CUNDT; /* ship = needdate*/
  end


      /* ************************************************/
      /* * if have sales program, get order type record*/
      /* * to use in editing need date*/
      /* ************************************************/

  if (OP1REC.SP1ID != " ") /* have sales pgm, so get rec*/
    SP2REC.SP1ID = OP1REC.SP1ID; /* set up key*/
    SP2REC.XOTCD = OP1REC.XOTCD;
    OM0BS98(); /* db2-get sp2rec spgm order type*/
  end

      /* ************************************************/
      /* * 08/12/92 JLoyer - init bk-sesn required fl  **/
      /* ************************************************/

  OM0BW01.OM0BW-BK-SESN-REQUIRED = "N"; /* set to not required*/
  OM0BW01.OM0BW-DEFAULT-BK-SESN = "N"; /* gets set in om0bs12*/

  if (OP1REC.XBCCD == "01") /* if nike brand order*/
    if (OP1REC.XDVCD == "01") /* if domestic*/
      if (OP1REC.XGPCD == "02" /* if footwear*/
       || OP1REC.XGPCD == "03") /* or apparel*/
        OM0BW01.OM0BW-BK-SESN-REQUIRED = "Y"; /* bk-sesn is required*/
      end
    else
      if (OP1REC.XDVCD == "02" /* if International*/
       && OP1REC.XGPCD == "03") /* and apparel*/
        OM0BW01.OM0BW-BK-SESN-REQUIRED = "Y"; /* bk-sesn required*/
      else
        if (OP1REC.XDVCD == "03" /* if promo order*/
         && OP1REC.XGPCD == "03") /* if apparel*/
          OM0BW01.OM0BW-BK-SESN-REQUIRED = "Y"; /* bk-sesn required*/
        end
      end
    end
  end




  OM0BW01.OM0BWBDF = " "; /* ; reset bulk/draw flag*/
  OM0BW01.OM0BWBBF = " "; /* ; reset blank bulk flag*/

  if (OP1REC.XBDCD in XBDTBL.XBDCD
   && XBDTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if active*/
    if (XBDTBL.XBDRWOFL[sysVar.arrayIndex] == "Y") /* if draw order*/
      OM0BS12(); /* ; set draw codes*/
    else
      if (XBDTBL.XBDBKOFL[sysVar.arrayIndex] == "Y") /* if bulk order*/
        OM0BS13(); /* ; set bulk codes*/
      end
    end
  end





end // end OM0BS10

// init array group moves in w-s
Function OM0BS11()



      /* ********************************************/
      /* * initialize working-storage*/
      /* * with blanks & zeroes to be used*/
      /* * in group moves to initialize array(s)*/
      /* ********************************************/

  TA1REC.TA1LOCAT[2] = "OM0BS11"; /* error diag group name*/

      /* *********************************************/
      /* initialize 40 sizes and associated fields*/
      /* *********************************************/

  OM0BW01.OP3SZAFL = " "; /* size active flag*/
  OM0BW01.OP2PRCOF = "N"; /* price override flag*/
  OM0BW01.SY5PRCUN = 0; /* price per unit*/
  OM0BW01.OP3ORGQT = 0; /* original quantity*/
  OM0BW01.OP3ONOQT = 0; /* on-order    "*/
  OM0BW01.OP3ALQT = 0; /* allocated   "*/
  OM0BW01.OP3OHRQT = 0; /* on-hand reserved quantity*/
  OM0BW01.OP3WPRQT = 0; /* work-in-process reserved quantity*/
  OM0BW01.OP3SHPQT = 0; /* shipped quantity*/
  OM0BW01.OP3CNLQT = 0; /* cancelled   "*/



end // end OM0BS11

// set OM0BWBDF for draws
Function OM0BS12()


       /* OM0BWBDF CODE FOR DRAWS*/

       /* dc = customer draw*/
       /* dr = rebook draw*/
       /* ds = smart draw*/
       /* dx = semi-smart/flexible draw*/
       /* dn = nike draw*/


  if (XBDTBL.XBDSETFL[sysVar.arrayIndex] == "Y" /* ; set-aside*/
   && XBDTBL.XBDRVRFL[sysVar.arrayIndex] == "Y") /* ; rsrvtion required*/
    OM0BW01.OM0BWBDF = "DS"; /* ;      ; smart draw*/
  else
    if (XBDTBL.XBDSETFL[sysVar.arrayIndex] == "Y" /* ; set-aside*/
     && XBDTBL.XBDRVRFL[sysVar.arrayIndex] != "Y") /* ; rsrvtion not required*/
      OM0BW01.OM0BWBDF = "DX"; /* ; semi-smart draw*/
    else
      if (XBDTBL.XBDXRFCD[sysVar.arrayIndex] == "R") /* ; x-ref = rebook*/
        OM0BW01.OM0BWBDF = "DR"; /* ; rebook draw*/
      else
        OM0BW01.OM0BWBDF = "DC"; /* ; customer draw*/

        if (OP1REC.XBDCD == "8" /* ;      ; draw frm blank bulk*/
         || OP1REC.XBDCD == "F") /* ;      ; bulk frm blank bulk*/
          OM0BW01.OM0BWBBF = "BD"; /* ; blank bulk draw*/
        else
          if (OP1REC.XBDCD == "3") /* ; draw frm finish bulk*/
            OM0BW01.OM0BWBBF = "FD"; /* ; finish bulk draw*/
          end
        end
      end
    end
  end

  if (OP1REC.XBDCD == "K")
    OM0BW01.OM0BWBDF = "DN";
  end

    /* *************************************************************/
    /* * 08/12/92 JLoyer - set default flag for bk-sesn orders    **/
    /* *************************************************************/

  if (OM0BW01.OM0BW-BK-SESN-REQUIRED == "Y") /* set in om0bs10*/
    if (OP1REC.XGPCD == "03") /* if apparel*/
      if (OP1REC.XDVCD == "01") /* if domestic*/
        if (OP1REC.XBDCD == "5" /* if cust draw*/
         || OP1REC.XBDCD == "8" /* or blank draw*/
         || OP1REC.XBDCD == "3") /* or finished draw*/
          OM0BW01.OM0BW-DEFAULT-BK-SESN = "Y"; /* default bk-sesn*/
        end
      else
        if (OP1REC.XDVCD == "02") /* if Int'l apparel*/
          OM0BW01.OM0BW-DEFAULT-BK-SESN = "Y"; /* default bk-sesn*/
        end
      end
    end
  end

   /* *************************************************************/
end // end OM0BS12

// set OM0BWBDF for bulks
Function OM0BS13()


       /* om0bw01.om0bwbdf for bulks*/

       /* bc = customer bulk*/
       /* bs = smart bulk*/
       /* bx = semi-smart/flexible bulk*/
       /* bn = nike bulk*/


  if (XBDTBL.XBDSETFL[sysVar.arrayIndex] == "Y" /* set-aside*/
   && XBDTBL.XBDRVRFL[sysVar.arrayIndex] == "Y") /* rsrvtion required*/
    OM0BW01.OM0BWBDF = "BS"; /* ; smart bulk*/
  else
    if (XBDTBL.XBDSETFL[sysVar.arrayIndex] == "Y" /* set-aside*/
     && XBDTBL.XBDRVRFL[sysVar.arrayIndex] != "Y") /* rsrvtion not required*/
      OM0BW01.OM0BWBDF = "BX"; /* semi-smart/flexible bulk*/
    else
      OM0BW01.OM0BWBDF = "BC"; /* customer bulk*/

      if (OP1REC.XBDCD == "B") /* ; blank bulk order*/
        OM0BW01.OM0BWBBF = "BB"; /* blank bulk*/
      end
    end
  end

  if (OP1REC.XBDCD == "N")
    OM0BW01.OM0BWBDF = "BN";
  end

   /* *************************************************************/
end // end OM0BS13

// re-set w-s for next product
Function OM0BS20()
      /* *********************************************************/
      /* * initialize flags for next product (add or review)*/
      /* * get sales pgm product prices, if any*/
      /* * re-set map to empty with original field attributes*/
      /* *********************************************************/

  TA1REC.TA1LOCAT[2] = "OM0BS20"; /* error diag group name*/

  OM0BW01.OM0BWPF6 = "N"; /* pf 6 change size price*/
  OM0BW01.OM0BWP21 = "N"; /* pf 21 add sizes*/
  OM0BW01.OM0BWARF = "N"; /* auth required flag*/
  OM0BW01.OM0BWREJ = "N"; /* rejected product*/
  OM0BW01.OM0BWDUP = "N"; /* duplicate product flag*/
  OM0BW01.OM0BWDPF = "N"; /* dup product error for reject*/

  OM0BW01.OM0BWCWH = "N"; /* no change to whs*/
  OM0BW01.OM0BWCND = "N"; /* no change to needdate*/
  OM0BW01.OM0BW-OWNER-GROUP-CHANGE-FLAG = "N";
                                   /* no change to owner group*/
  OM0BW01.OM0BWCDS = "N"; /* no change to direct ship*/
  OM0BW01.OM0BWNSF = "N"; /* so no suborder splits yet*/

  OM0BW01.OM0BWSPP = "N"; /* no sales pgm prod prices*/

  OM0BW01.OM0BWSCR = 1; /* start with screen #1*/

  OM0BW01.OM0BWSZF = 0; /* default full size range first = 0*/
  OM0BW01.OM0BWSZL = 0; /* last size = 0*/

  OM0BW01.OM0BWPRC = 0; /* initl price used to test prc vary*/
  OM0BW01.OM0BWPAD = "N"; /* no edit done, price adjust variance*/
  OM0BW01.OM0BWPAL = "N"; /* no edit done, price 4 all, variance*/
  OM0BW01.OM0BWPSZ = "N"; /* no edit done, size price variance*/

  OM0BW01.OM0BWZPR = "N"; /* flag to force zero price*/

  OM0BW01.OM0BWP01 = " "; /* key field for program table*/
  OM0BW01.OP1CUNDT = OP1REC.OP1CUNDT; /* need date*/
  OM0BW01.OM0BWPDT = 0; /* calc need date for cust logo product*/

  OM0BW01.OM0BW-MULTI-BK-SESN-MSG = "N"; /* display multi bk-sesn ms*/

      /* * if have sales program, get product pricing*/

  if (OP1REC.SP1ID != " ")
    OM0BS99(); /* db2-get spgm prod prices, if any*/
  end


     /* * if have an international customer, get price type code*/

  if (OP1REC.XDVCD == "02")
    OM0BS6A();
  end


      /* ********************************************************/
      /* * re-set map to empty with original field attributes*/
      /* ********************************************************/

  set OM0BM001 initial;
  set OM0BM001.OP3ONOQT[1] cursor;



end // end OM0BS20

// edit restricted warehouse prod
Function OM0BS21()



      /* *******************************************************/
      /* there are 6 warehouses on the product record*/
      /* if any is non-blank, there is a warehouse(s)*/
      /* restriction for the product.*/
      /* note-whs may not fill array consecutively, e.g.*/
        /* 1-blank  2-wh1  3-blank  4-wh2  5-blank  6-blank*/
      /* this explains all the fuss with om0bwwhs.*/
      /* note - also checked in warehouse edit*/
      /* *******************************************************/

  TA1REC.TA1LOCAT[2] = "OM0BS21"; /* error diag group name*/

   /* note: 3 exceptions 1) direct ship orders*/
                      /* 2) order types with either:*/
                          /* a) life cycle of 20 or,*/
                          /* b) quality code of 02 or 03.*/
                      /* 3) draws*/


  OM0BW01.OM0BWNWH = "N"; /* set new warehouse flag to no*/

    /* do direct ship first.use ws warehouse required flag.*/

  if (OM0BW01.XDSWHSEF == "Y") /* if whs required, not direct ship*/
     /* next sentence*/
  else
    return;
  end


   /* now check order type quality and life cycle.*/

  if (XOTTBL.XQACD1[OM0BWSBO] == "02"
   || XOTTBL.XQACD1[OM0BWSBO] == "03"
   || XOTTBL.XQACD2[OM0BWSBO] == "02"
   || XOTTBL.XQACD2[OM0BWSBO] == "03"
   || XOTTBL.XQACD3[OM0BWSBO] == "02"
   || XOTTBL.XQACD3[OM0BWSBO] == "03"
   || XOTTBL.XLCCD1[OM0BWSBO] == "20"
   || XOTTBL.XLCCD2[OM0BWSBO] == "20"
   || XOTTBL.XLCCD3[OM0BWSBO] == "20"
   || XOTTBL.XLCCD4[OM0BWSBO] == "20"
   || XOTTBL.XLCCD5[OM0BWSBO] == "20")
    return;
  end

     /* draws use warehouse of corresponding bulk,(no matter what)*/

  if (OM0BW01.OM0BWBDF == "DS"
   || OM0BW01.OM0BWBDF == "DX"
   || OM0BW01.OM0BWBDF == "DR"
   || OM0BW01.OM0BWBDF == "DC"
   || OM0BW01.OM0BWBDF == "DN")
    return;
  end


  sysVar.arrayIndex = 6; /* loop 6 whse*/
  OM0BW01.OM0BWWHS = " "; /* hold first restricted warehouse*/

  while (sysVar.arrayIndex > 0)
    if (SYCREC.XWHCD[sysVar.arrayIndex] != " ") /* match to restric whs is ok*/
      if (OP1REC.XWHCD == SYCREC.XWHCD[sysVar.arrayIndex])
        return;
      else
        OM0BW01.OM0BWWHS = SYCREC.XWHCD[sysVar.arrayIndex]; /* hold first whs*/
      end
    end
    sysVar.arrayIndex = sysVar.arrayIndex - 1;
  end

  if (OM0BW01.OM0BWWHS == " ") /* no whs restrictions*/
    return;
  end

  OM0BM001.XWHCD = OM0BW01.OM0BWWHS; /* change whse to 1st restric*/
  set OM0BM001.XWHCD bold;
  if (OM0BM001.XWHCD in XWHTBL.XWHCD)
    OM0BM001.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
  else
    OM0BM001.XWHSABRV = "UNKNWN";
  end
  set OM0BM001.XWHSABRV bold, protect;
  converseLib.validationFailed(164); /* whs changed -- style whs restriction*/
  OMAREC.OMAERR = "Y"; /* warning message*/

  OM0BW01.OM0BWNWH = "Y"; /* set xwhcd flag to yes for nil prcng*/


      /* take the first whs & curr needdate*/
      /* and put into sub-ord tbl(may match).*/
      /* re-set om0bwsbs value*/

  OM0BW01.OM0BWCWH = "Y";
  OM0BW01.OP1CUNDT = OP1REC.OP1CUNDT;
  OM0BM001.XDSCD = OP1REC.XDSCD;

  OM0BS27(); /* change sub-ord, whs changed*/

  OP1REC.OP1OWHMF = "Y"; /* set restricted warehouse flag*/



end // end OM0BS21

// get style/color & color prices
Function OM0BS22()



      /* ********************************************************/
      /* * get price or cost for product*/
      /* ********************************************************/


  TA1REC.TA1LOCAT[2] = "OM0BS22"; /* error diag group name*/


  OM0BW01.OM0BWSTP = 0; /* zero price defaults*/
  OM0BW01.OM0BWCLP = 0; /* default price by style & color*/


      /* ********************************************************/
      /* *  if it's an international apparel or footwear futures*/
      /* *  order whose product is in development, or an international*/
      /* *  apparel sample product in development, the price will be zero.*/
      /* *  if zero price (from this or from finding no international*/
      /* *  price type code), won't need to get the product price.*/
      /* ********************************************************/

  OM0BSGL(); /* get the product's life cycle*/
  if (OP1REC.XDVCD == "02") /* if a nil order*/
    if (OBIREC.XLCCD == "05") /* and prod is in development*/
      if (OP1REC.XOTCD == "31" /* and footwear futures*/
       || OP1REC.XOTCD == "36" /* or apparel futures*/
       || OP1REC.XOTCD == "49") /* or apparel samples*/
        OM0BW01.OM0BWZPR = "Y"; /* force zero prices*/
      end
    end
  end

  if (OM0BW01.OM0BWZPR == "Y") /* if zero price*/
    return; /* don't need product prices*/
  end

  if (OP1REC.XDVCD == "02") /* if a nil order*/
    if (IVEREC.IVEPCIND == "C") /* if price comes from cost tbl*/
      OM0BS9H(); /* get cost for nil prod price*/
    else /* otherwise*/
      OM0BS9K(); /* get price for nil prod price*/
    end
     /* apply price adjustment (default is 0)*/
    if (OM0BW01.OM0BWCLP > 0) /* adjust price by color if one*/
      if (OM0BW01.XAUCD == "33") /* nil independent distributor*/
        OM0BW01.OM0BWIPC = mathLib.round(OM0BW01.OM0BWCLP *         VNLXPY01.NL-PRC-COST-PCT / 100, -mathLib.decimals(OM0BW01.OM0BWIPC));
        OM0BW01.OM0BWCLP = OM0BW01.OM0BWCLP + OM0BW01.OM0BWIPC;
      else
        OM0BW01.OM0BWIPC = mathLib.round(OM0BW01.OM0BWCLP * IVEREC.IVEPCPCT / 100, -mathLib.decimals(OM0BW01.OM0BWIPC));
        OM0BW01.OM0BWCLP = OM0BW01.OM0BWCLP + OM0BW01.OM0BWIPC;
      end
    else /* otherwise adjust price by size*/
      if (OM0BW01.XAUCD == "33") /* nil independent distributor*/
        OM0BW01.OM0BWIPC = mathLib.round(OM0BW01.OM0BWSTP *         VNLXPY01.NL-PRC-COST-PCT / 100, -mathLib.decimals(OM0BW01.OM0BWIPC));
        OM0BW01.OM0BWSTP = OM0BW01.OM0BWSTP + OM0BW01.OM0BWIPC;
      else
        OM0BW01.OM0BWIPC = mathLib.round(OM0BW01.OM0BWSTP * IVEREC.IVEPCPCT / 100, -mathLib.decimals(OM0BW01.OM0BWIPC));
        OM0BW01.OM0BWSTP = OM0BW01.OM0BWSTP + OM0BW01.OM0BWIPC;
      end
    end
  else
    OM0BS9K(); /* get product price for all other*/
                                   /* divisions*/
  end


end // end OM0BS22

// edit for product size valid
Function OM0BS23()

  TA1REC.TA1LOCAT[2] = "OM0BS23"; /* error diag group name*/



   /* ----------------------------------------------------*/
   /* if flag = a (allowed) and the product division equals one*/
   /* of the order type's allowable divisions, it's ok*/
   /* else it's an error*/
   /* ----------------------------------------------------*/

  if (SYCREC.XDVCD[OM0BWSBR] != " "
   && XOTTBL.XOTALWDV[OM0BWSBO] == "A")
    if (SYCREC.XDVCD[OM0BWSBR] == XOTTBL.XDVCD1[OM0BWSBO]
     || SYCREC.XDVCD[OM0BWSBR] == XOTTBL.XDVCD2[OM0BWSBO]
     || SYCREC.XDVCD[OM0BWSBR] == XOTTBL.XDVCD3[OM0BWSBO]
     || SYCREC.XDVCD[OM0BWSBR] == XOTTBL.XDVCD4[OM0BWSBO]
     || SYCREC.XDVCD[OM0BWSBR] == XOTTBL.XDVCD5[OM0BWSBO])
       /* next sentence*/
    else
      return; /* division not allowed*/
    end
  end
       /* ----------------------------------------------------*/
       /* if flag = d (disallowed) this order type restricts*/
       /* the divisions listed from the product.  if no match,*/
       /* it's good; if there is a match, it's an error*/
       /* ----------------------------------------------------*/
  if (SYCREC.XDVCD[OM0BWSBR] != " "
   && XOTTBL.XOTALWDV[OM0BWSBO] == "D")
    if (SYCREC.XDVCD[OM0BWSBR] == XOTTBL.XDVCD1[OM0BWSBO]
     || SYCREC.XDVCD[OM0BWSBR] == XOTTBL.XDVCD2[OM0BWSBO]
     || SYCREC.XDVCD[OM0BWSBR] == XOTTBL.XDVCD3[OM0BWSBO]
     || SYCREC.XDVCD[OM0BWSBR] == XOTTBL.XDVCD4[OM0BWSBO]
     || SYCREC.XDVCD[OM0BWSBR] == XOTTBL.XDVCD5[OM0BWSBO])
      return; /* div not allowed*/
    end
  end




  if (XOTTBL.XOTXTRAS[OM0BWSBO] == "Y" /* if order type allows extras*/
   && SYCREC.SY3FRGUT[OM0BWSBR] == "X")
    OM0BW01.OM0BWVSZ = "Y"; /* match, set valid size flag*/
  else
    if (SYCREC.SY3FRGUT[OM0BWSBR] == "F" /* if size is fringe*/
     || SYCREC.SY3FRGUT[OM0BWSBR] == "G") /* or size is gut*/
      OM0BW01.OM0BWVSZ = "Y"; /* match, set valid size flag*/
    end
  end





end // end OM0BS23

// set size price (prod or spgm)
Function OM0BS24()



      /* *******************************************************/
      /* * if sales pgm has product pricing (op0iwspp = y)*/
      /* *   then use it*/
      /* * else*/
      /* * if international footwear or apparel futures order and*/
      /* *   the product is in development (life cycle = 05)*/
      /* *   or there is no int'l price type code*/
      /* *     the price is 0*/
      /* * else*/
      /* *   read db2 price by size,*/
      /* **/
      /* *    if price-size code = z:*/
      /* *      read price default for style,color,size*/
      /* *      use price directly into valid size on product*/
      /* *    else*/
      /* *      if color default price ne 0*/
      /* *        use it*/
      /* *      else*/
      /* *        use style default price.*/
      /* *******************************************************/



  OM0BW-PRICING-FACTOR = 0;

  if (OP1REC.XDVCD == "02" /* nil*/
   && OP3REC.XQACD == "02" /* b-grade product*/
   && OP1REC.XWHCD == "15") /* consol delivery*/
    OM0BW-PRICING-FACTOR = 1; /* for add 1$ to price per unit*/
  end

    /* set up unit of measure conver factor for the order.*/

  if (OP3REC.XUMCD in XUMTBL.XUMCD)
    OM0BW01.XUMCONVF = XUMTBL.XUMCONVF[sysVar.arrayIndex];
  end



   /* for customer, smart, and rebook draw orders,*/
     /* use the bulk order price unless the order uses*/
     /* international pricing*/


  if (OP1REC.XDVCD == "02") /* if an int'l order*/
     /* next sentence                 ;   redo price even if a draw*/
  else
    if (OM0BW01.OM0BWBDF == "DC" /* if cust draw*/
     || OM0BW01.OM0BWBDF == "DS" /* if smart draw*/
     || OM0BW01.OM0BWBDF == "DR" /* if rebook draw*/
     || OM0BW01.OM0BWBDF == "DN") /* if nike draw*/

      if (OM0BW01.OM0BWBBF != "BD") /* but not a blank bulk draw*/
     /* ******************** CSP 4.1 Change ***************************/
     /* ***  Added check for valid size prior to formatting the price*/
     /* ***  on OP3REC.  Correct SOC7 Abend.  9/16/93*/
     /* ***************************************************************/
        if (OM0BW03.OP3SZAFL[OM0BWSBR] == "Y") /* check for active flag*/
          OP3REC.SY5PRCUN[OM0BWSBR] = OM0BW03.SY5PRCUN[OM0BWSBR];
        else
          OP3REC.SY5PRCUN[OM0BWSBR] = 0; /* move zero to num fld*/
        end
        return;
      end
    end
  end

     /* note: in the large 'if' statement below iverec is used*/
           /* for nil pricing, the default value is 'IVEREC*/
           /* EMPTY', this will not effect domestic pricing*/


  if (OM0BW01.OM0BWSPP == "Y") /* may use sales pgm prices*/
    if (SP5REC.SP5PRCOF[OM0BWSBR] == "S")
      OP3REC.SY5PRCUN[OM0BWSBR] = SP5REC.SP5SZPR[OM0BWSBR];
    else
      if (SP5REC.SP5PRCOF[OM0BWSBR] == "P")
        if (SYCREC.SY1PRCZS == "Z" /* if might have size price*/
         && IVEREC.IVEPCIND != "C") /* & price not from cost table*/
          SY5REC.SY2CLRID = OP3REC.SY2CLRID; /* set up db key color*/
          SY5REC.XDMCD = OP3REC.XDMCD; /* & dimension*/
          SY5REC.SY5SZID = OM0BW01.OM0BWSBR; /* & size*/
          OM0BS97(); /* find size price, if any*/
          if (SQLCA.VAGen_SQLCODE == 0) /* pick out price effec.today*/
            OM0BS28(); /* from 6 possible prices*/
            if (sysVar.arrayIndex < 7) /* if found, adjust prc for nil*/
               /* (for domestic the adjustment is 0)*/
              if (OP1REC.XDVCD == "02" /* if international*/
               && OM0BW01.XAUCD == "33") /* nil independent distributor*/
                OM0BW01.OM0BWIPC = mathLib.round(SY5REC.SY5PRCUN[sysVar.arrayIndex] *                                        VNLXPY01.NL-PRC-COST-PCT / 100, -mathLib.decimals(OM0BW01.OM0BWIPC));
                OP3REC.SY5PRCUN[OM0BWSBR] = SY5REC.SY5PRCUN[sysVar.arrayIndex] + OM0BW01.OM0BWIPC;
              else
                OM0BW01.OM0BWIPC = mathLib.round(SY5REC.SY5PRCUN[sysVar.arrayIndex] * IVEREC.IVEPCPCT / 100, -mathLib.decimals(OM0BW01.OM0BWIPC));
                OP3REC.SY5PRCUN[OM0BWSBR] = SY5REC.SY5PRCUN[sysVar.arrayIndex] + OM0BW01.OM0BWIPC;
              end
            end
          end
        else
          if (OM0BW01.OM0BWCLP != 0) /* or use color default*/
            OP3REC.SY5PRCUN[OM0BWSBR] = OM0BW01.OM0BWCLP;
          else
            OP3REC.SY5PRCUN[OM0BWSBR] = OM0BW01.OM0BWSTP;
          end
        end
      else
        OM0BW01.OM0BWPR1 = SP5REC.SP5SZPR[OM0BWSBR];
        if (SYCREC.SY1PRCZS == "Z" /* if might have size price*/
         && IVEREC.IVEPCIND != "C") /* & price not from cost table*/
          SY5REC.SY2CLRID = OP3REC.SY2CLRID; /* set up db key color*/
          SY5REC.XDMCD = OP3REC.XDMCD; /* & dimension*/
          SY5REC.SY5SZID = OM0BW01.OM0BWSBR; /* & size*/
          OM0BS97(); /* find size price, if any*/
          if (SQLCA.VAGen_SQLCODE == 0) /* pick out price effec.today*/
            OM0BS28(); /* from 6 possible prices*/
            if (sysVar.arrayIndex < 7) /* if found, adjust prc for nil*/
               /* (for domestic the adjustment is 0)*/
              if (OP1REC.XDVCD == "02" /* if international*/
               && OM0BW01.XAUCD == "33") /* nil independent distributor*/
                OM0BW01.OM0BWIPC = mathLib.round(SY5REC.SY5PRCUN[sysVar.arrayIndex] *                                        VNLXPY01.NL-PRC-COST-PCT / 100, -mathLib.decimals(OM0BW01.OM0BWIPC));
                OM0BW01.OM0BWPR2 = SY5REC.SY5PRCUN[sysVar.arrayIndex] + OM0BW01.OM0BWIPC;
              else
                OM0BW01.OM0BWIPC = mathLib.round(SY5REC.SY5PRCUN[sysVar.arrayIndex] * IVEREC.IVEPCPCT / 100, -mathLib.decimals(OM0BW01.OM0BWIPC));
                OM0BW01.OM0BWPR2 = SY5REC.SY5PRCUN[sysVar.arrayIndex] + OM0BW01.OM0BWIPC;
              end
            end
          end
        else
          if (OM0BW01.OM0BWCLP != 0) /* or use color default*/
            OM0BW01.OM0BWPR2 = OM0BW01.OM0BWCLP;
          else /* or use style default*/
            OM0BW01.OM0BWPR2 = OM0BW01.OM0BWSTP;
          end
        end
        if (OM0BW01.OM0BWPR1 > OM0BW01.OM0BWPR2)
          OP3REC.SY5PRCUN[OM0BWSBR] = OM0BW01.OM0BWPR2;
        else
          OP3REC.SY5PRCUN[OM0BWSBR] = OM0BW01.OM0BWPR1;
        end
      end
    end
  end


  if (OM0BW01.OM0BWSPP == "Y") /* may use sales pgm prices*/
    if (SYCREC.XUMCD != OP3REC.XUMCD) /* if change u.o.m., calc 'each'*/
      if (SYCREC.XUMCD in XUMTBL.XUMCD)
                                   /* set style unit of meas conv factor*/
        OM0BW01.SY5PRCUN = OP3REC.SY5PRCUN[OM0BWSBR];
        OP3REC.SY5PRCUN[OM0BWSBR] = OM0BW01.SY5PRCUN / XUMTBL.XUMCONVF[sysVar.arrayIndex];
      end
       /* convert 'each' to new u.o.m. (.5 or 1 or 6 ...)*/
      OP3REC.SY5PRCUN[OM0BWSBR] = OP3REC.SY5PRCUN[OM0BWSBR] * OM0BW01.XUMCONVF;
    end

    OM0BW01.SY5PRCUN = 0;
    OM0BS-ADD-1-DOLLAR(); /* add 1$ to price per unit*/
                                    /* on op3rec.sy5prcun*/

    if (OP1REC.XDVCD == "02" /* international*/
     && OP3REC.XQACD == "02") /* and a b-grade product*/
      OM0BS-ROUND-BG-PRC(); /* round b-grade price up to the*/
                                    /* nickel*/
    end
    return;
  end


      /* force a zero price for nil apparel or footwear*/
      /* futures orders whose product is in development*/
      /* or for nil orders with no price type code*/

  if (OM0BW01.OM0BWZPR == "Y") /* if flag is set to force zero price*/
    OP3REC.SY5PRCUN[OM0BWSBR] = 0; /* set the price to zero*/
    OM0BW01.SY5PRCUN = 0;
    return;
  end


           /* otherwise, see if there is a price by size*/

  if (SYCREC.SY1PRCZS == "Z" /* if might have size price*/
   && IVEREC.IVEPCIND != "C")
                                   /* and price does not come from cost tbl*/
    SY5REC.SY2CLRID = OP3REC.SY2CLRID; /* set up db key color*/
    SY5REC.XDMCD = OP3REC.XDMCD; /* & dimension*/
    SY5REC.SY5SZID = OM0BW01.OM0BWSBR; /* & size*/
    OM0BS97(); /* find size price, if any*/
    if (SQLCA.VAGen_SQLCODE == 0) /* pick out price effec.today*/
      OM0BS28(); /* from 6 possible prices*/
      if (sysVar.arrayIndex < 7) /* adjust price for some nil orders*/
         /* (for domestic the adjustment is 0)*/
        if (OP1REC.XDVCD == "02" /* if international*/
         && OM0BW01.XAUCD == "33") /* nil independent distributor*/
          OM0BW01.OM0BWIPC = mathLib.round(SY5REC.SY5PRCUN[sysVar.arrayIndex] *                                        VNLXPY01.NL-PRC-COST-PCT / 100, -mathLib.decimals(OM0BW01.OM0BWIPC));
          OP3REC.SY5PRCUN[OM0BWSBR] = SY5REC.SY5PRCUN[sysVar.arrayIndex] + OM0BW01.OM0BWIPC;
        else
          OM0BW01.OM0BWIPC = mathLib.round(SY5REC.SY5PRCUN[sysVar.arrayIndex] * IVEREC.IVEPCPCT / 100, -mathLib.decimals(OM0BW01.OM0BWIPC));
          OP3REC.SY5PRCUN[OM0BWSBR] = SY5REC.SY5PRCUN[sysVar.arrayIndex] + OM0BW01.OM0BWIPC;
        end
        if (SYCREC.XUMCD != OP3REC.XUMCD) /* if change u.o.m., calc 'each'*/
          if (SYCREC.XUMCD in XUMTBL.XUMCD)
            OM0BW01.SY5PRCUN = OP3REC.SY5PRCUN[OM0BWSBR];
            OP3REC.SY5PRCUN[OM0BWSBR] = OM0BW01.SY5PRCUN / XUMTBL.XUMCONVF[sysVar.arrayIndex];
          end
           /* convert 'each' to new u.o.m. (.5, 1, 6, etc)*/
          OP3REC.SY5PRCUN[OM0BWSBR] = OP3REC.SY5PRCUN[OM0BWSBR] * OM0BW01.XUMCONVF;
        end
        OM0BW01.SY5PRCUN = 0;
        OM0BS-ADD-1-DOLLAR(); /* add 1$ to price per unit*/
                                        /* on op3rec.sy5prcun*/

        if (OP1REC.XDVCD == "02" /* international*/
         && OP3REC.XQACD == "02") /* and a b-grade product*/
          OM0BS-ROUND-BG-PRC(); /* round b-grade price up to*/
                                        /* the nickel*/
        end
        return;
      end
    end
  end


  if (OM0BW01.OM0BWCLP != 0) /* or use color default*/
    OP3REC.SY5PRCUN[OM0BWSBR] = OM0BW01.OM0BWCLP;
  else /* or use style default*/
    OP3REC.SY5PRCUN[OM0BWSBR] = OM0BW01.OM0BWSTP;
  end


  if (SYCREC.XUMCD != OP3REC.XUMCD) /* if change u.o.m., calc 'each'*/
    if (SYCREC.XUMCD in XUMTBL.XUMCD) /* set style unit of meas conv factor*/
      OM0BW01.SY5PRCUN = OP3REC.SY5PRCUN[OM0BWSBR];
      OP3REC.SY5PRCUN[OM0BWSBR] = OM0BW01.SY5PRCUN / XUMTBL.XUMCONVF[sysVar.arrayIndex];
    end
     /* convert 'each' to new u.o.m. (.5, 1, 6, etc)*/
    OP3REC.SY5PRCUN[OM0BWSBR] = OP3REC.SY5PRCUN[OM0BWSBR] * OM0BW01.XUMCONVF;
  end
  OM0BW01.SY5PRCUN = 0;

  OM0BS-ADD-1-DOLLAR(); /* add 1$ to price per unit*/
                                  /* on op3rec.sy5prcun*/


  if (OP1REC.XDVCD == "02" /* international*/
   && OP3REC.XQACD == "02") /* and a b-grade product*/
    OM0BS-ROUND-BG-PRC(); /* round b-grade price up*/
                                  /* to the nickel*/
  end


end // end OM0BS24

// check to set price vary flag
Function OM0BS25()



      /* compare each price against first price,*/
      /* if different, set on price vary flag*/

  TA1REC.TA1LOCAT[2] = "OM0BS25"; /* error diag group name*/


  if (OM0BW01.OM0BWPRC == 0) /* hold first price in record*/
    OM0BW01.OM0BWPRC = OP3REC.SY5PRCUN[OM0BWSBR];
    OP3REC.OP2AUPRC = OP3REC.SY5PRCUN[OM0BWSBR];
  else
    if (OP3REC.SY5PRCUN[OM0BWSBR] != OM0BW01.OM0BWPRC)
      OP3REC.OP2PRCVF = "Y";
    end
  end



end // end OM0BS25

// edit for min/max size range
Function OM0BS26()



      /* **************************************************/
      /* * hold min/max in w-s, compare all 40 valid sizes*/
      /* * to min/max to get a full range of sizes*/
      /* * for the product.*/
      /* **************************************************/

  TA1REC.TA1LOCAT[2] = "OM0BS26"; /* error diag group name*/


  if (OM0BW01.OM0BWSZF == 0) /* if first size still zero*/
    OM0BW01.OM0BWSZF = OM0BWSBR; /* move in first valid size*/
  end

  OM0BW01.OM0BWSZL = OM0BWSBR; /* move each valid size to range=last*/
                               /* ;then last one moved=last range*/



end // end OM0BS26

// set up new sub-order
Function OM0BS27()

      /* *******************************************************/
      /* *  take new warehouse, need date or direct ship*/
      /* *  and find a sub-order number.  check for max of 10.*/
      /* *  new codes may matck existing codes.*/
      /* *  whs, need date, dir ship put in common area prior*/
      /* *******************************************************/

  TA1REC.TA1LOCAT[2] = "OM0BS27"; /* error diag group name*/


       /* if new codes = original codes*/
          /* return*/
       /* else*/
          /* create new sub-order*/

  if (OM0BM001.XWHCD == OP1REC.XWHCD      /* warehouse*/
   && OM0BW01.OP1CUNDT == OP1REC.OP1CUNDT /* need date*/
   && OM0BM001.XDSCD == OP1REC.XDSCD)     /* direct ship*/
    return;
  end

  if (OM0BW01.OP1CUNDT != OP1REC.OP1CUNDT) /* SLARSE*/
    OM0BW01.OM0BW-SOCD-CHNG-NDT-FL = "Y";
  end

      /* ********************************************************/
      /* * need a different sub-order to work on. either find*/
      /* * one to add to or create a new one if room for another.*/
      /* ********************************************************/



  call "IO0430" ("SS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OM0BS7F(); /* find sub-order to add to, or new*/
  else
    TA1REC.TA1LOCAT[1] = "SS";
    TA1REC.TA1LOCAT[2] = "OM0BS27 ";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    TA1REC.TA1LOCAT[3] = "IO0430";
    OM0BS02();
  end



  call "IO0430" ("CS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/




end // end OM0BS27

// check prod price effective dte
Function OM0BS28()



      /* find current price among 6 possible prices*/
      /* new/future date is first, oldest date is last*/
      /* price effective date is booking or ship date,*/
      /* set by order type table in initial w-s.*/

   /* domestic:if no price found for an effect.date, a newer,valid price*/
   /* is used -- covers early shipments.*/
   /* ----------------------------------------------*/


  TA1REC.TA1LOCAT[2] = "OM0BS28"; /* error diag group name*/


  sysVar.arrayIndex = 1; /* check dates ascending seq*/
  OM0BW01.OM0BW-HOLD-EZETST-VAL = 0; /* init.subscript hold;*/


  while (sysVar.arrayIndex < 7)

   /* --use sub. if no valid effect.date found for domest.product.---*/
    if (SY5REC.SY5PCEDT[sysVar.arrayIndex] > 0) /* hold subscript of oldest price*/
      OM0BW01.OM0BW-HOLD-EZETST-VAL = sysVar.arrayIndex;
    end


    if (SY5REC.SY5PCEDT[sysVar.arrayIndex] <= OM0BW01.OM0BWPED /* price effective date*/
     && SY5REC.SY5PCEDT[sysVar.arrayIndex] > 0)                /* non-zero effect.date*/
      return; /* then use ezetst for price*/
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;

  end


  if (sysVar.arrayIndex == 7) /* no price for eff date*/
    if (OP1REC.XDVCD == "02") /* internation-do not substitute*/
         /* next sentence*/
    else
      if (OM0BW01.OM0BW-HOLD-EZETST-VAL > 0)
        sysVar.arrayIndex = OM0BW01.OM0BW-HOLD-EZETST-VAL; /* use oldest $*/
      end
    end
  end



end // end OM0BS28

// read bulk order info
Function OM0BS29()



   /* read the bulk order item and size records.*/


  OMAREC.OMAORDN = OP1REC.OP1BLKID;
  OM0BW02.OP1PARTN = OMAREC.OP1PARTN;
  OM0BW02.OP1CUOID = OP1REC.OP1BLKID;
  OM0BW02.OP2LNINB = OMWREC.OMWBKLIN;
  OM0BW02.OP1NORID = OMWREC.OP1NORID;

  call "IO0440" ("S ", SQLCA, OM0BW02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0B    ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "OM0BS29 ";
    TA1REC.TA1LOCAT[3] = "IO0440  ";
    TA1REC.TA1LOCAT[4] = "        ";
    TA1REC.TA1MAP = "OM0BM001";
    TA1REC.TA1DBASE = "OP2REC  ";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1TBLKE = OM0BW02.OP2KEY;
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
    COMMAREA.CA-USER-WORKAREA-4K = " ";
    XSPF4();
    exit program;
  end

  OM0BW03.OP2KEY = OM0BW02.OP2KEY;
  OP8REC.OP8TASK = "S ";

  call "DB1000" (OP8REC, OM0BW03, OPBREC) {isNoRefresh = yes, isExternal = yes};

  if (OPBREC.OPBSZRC == 0)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0B    ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "OM0BS29 ";
    TA1REC.TA1LOCAT[3] = "DB1000  ";
    TA1REC.TA1LOCAT[4] = "        ";
    TA1REC.TA1MAP = "OM0BM001";
    TA1REC.TA1DBASE = "OP3REC  ";
    TA1REC.TA1TBLKE = OM0BW03.OP2KEY;
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
    COMMAREA.CA-USER-WORKAREA-4K = " ";
    XSPF4();
    exit program;
  end


  OP3REC.OP2TONOQ = 0;
  OM0BW04.OP1KEY = OM0BW02.OP2KEY;

  call "IO0430" ("S ", SQLCA, OM0BW04) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0B    ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "OM0BS29 ";
    TA1REC.TA1LOCAT[3] = "IO0430  ";
    TA1REC.TA1LOCAT[4] = "        ";
    TA1REC.TA1MAP = "OM0BM001";
    TA1REC.TA1DBASE = "OM0BW04 ";
    TA1REC.TA1TBLKE = OM0BW04.OP1KEY;
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
    COMMAREA.CA-USER-WORKAREA-4K = " ";
    XSPF4();
    exit program;
  end




end // end OM0BS29

// distribute qtys by std dist cd
Function OM0BS2A()


   /* this statement group distributes the requested quantity*/
   /* from om0a across the requested size range.*/

   /* note:  for ease of coding i chose to use 40 moves and*/
          /* a while loop rather than 40 fall through if*/
          /* statements.  this pertains to the use of the 40*/
          /* percentage rate fields.*/


   /* F OMWREC.XSZCD IN XSZTBL.XSZCD;*/
   /* MOVE XSZTBL.XSZPCT1(EZETST) TO OM0BW01.OM0BWSSP(1);*/
   /* OM0BW01.OM0BWSSP(1) = OM0BW01.OM0BWSSP(1) / 100;*/
   /* MOVE XSZTBL.XSZPCT2(EZETST) TO OM0BW01.OM0BWSSP(2);*/
   /* OM0BW01.OM0BWSSP(2) = OM0BW01.OM0BWSSP(2) / 100;*/
   /* MOVE XSZTBL.XSZPCT3(EZETST) TO OM0BW01.OM0BWSSP(3);*/
   /* OM0BW01.OM0BWSSP(3) = OM0BW01.OM0BWSSP(3) / 100;*/
   /* MOVE XSZTBL.XSZPCT4(EZETST) TO OM0BW01.OM0BWSSP(4);*/
   /* OM0BW01.OM0BWSSP(4) = OM0BW01.OM0BWSSP(4) / 100;*/
   /* MOVE XSZTBL.XSZPCT5(EZETST) TO OM0BW01.OM0BWSSP(5);*/
   /* OM0BW01.OM0BWSSP(5) = OM0BW01.OM0BWSSP(5) / 100;*/
   /* MOVE XSZTBL.XSZPCT6(EZETST) TO OM0BW01.OM0BWSSP(6);*/
   /* OM0BW01.OM0BWSSP(6) = OM0BW01.OM0BWSSP(6) / 100;*/
   /* MOVE XSZTBL.XSZPCT7(EZETST) TO OM0BW01.OM0BWSSP(7);*/
   /* OM0BW01.OM0BWSSP(7) = OM0BW01.OM0BWSSP(7) / 100;*/
   /* MOVE XSZTBL.XSZPCT8(EZETST) TO OM0BW01.OM0BWSSP(8);*/
   /* OM0BW01.OM0BWSSP(8) = OM0BW01.OM0BWSSP(8) / 100;*/
   /* MOVE XSZTBL.XSZPCT9(EZETST) TO OM0BW01.OM0BWSSP(9);*/
   /* OM0BW01.OM0BWSSP(9) = OM0BW01.OM0BWSSP(9) / 100;*/
   /* MOVE XSZTBL.XSZPCT10(EZETST) TO OM0BW01.OM0BWSSP(10);*/
   /* OM0BW01.OM0BWSSP(10) = OM0BW01.OM0BWSSP(10) / 100;*/
   /* MOVE XSZTBL.XSZPCT11(EZETST) TO OM0BW01.OM0BWSSP(11);*/
   /* OM0BW01.OM0BWSSP(11) = OM0BW01.OM0BWSSP(11) / 100;*/
   /* MOVE XSZTBL.XSZPCT12(EZETST) TO OM0BW01.OM0BWSSP(12);*/
   /* OM0BW01.OM0BWSSP(12) = OM0BW01.OM0BWSSP(12) / 100;*/
   /* MOVE XSZTBL.XSZPCT13(EZETST) TO OM0BW01.OM0BWSSP(13);*/
   /* OM0BW01.OM0BWSSP(13) = OM0BW01.OM0BWSSP(13) / 100;*/
   /* MOVE XSZTBL.XSZPCT14(EZETST) TO OM0BW01.OM0BWSSP(14);*/
   /* OM0BW01.OM0BWSSP(14) = OM0BW01.OM0BWSSP(14) / 100;*/
   /* MOVE XSZTBL.XSZPCT15(EZETST) TO OM0BW01.OM0BWSSP(15);*/
   /* OM0BW01.OM0BWSSP(15) = OM0BW01.OM0BWSSP(15) / 100;*/
   /* MOVE XSZTBL.XSZPCT16(EZETST) TO OM0BW01.OM0BWSSP(16);*/
   /* OM0BW01.OM0BWSSP(16) = OM0BW01.OM0BWSSP(16) / 100;*/
   /* MOVE XSZTBL.XSZPCT17(EZETST) TO OM0BW01.OM0BWSSP(17);*/
   /* OM0BW01.OM0BWSSP(17) = OM0BW01.OM0BWSSP(17) / 100;*/
   /* MOVE XSZTBL.XSZPCT18(EZETST) TO OM0BW01.OM0BWSSP(18);*/
   /* OM0BW01.OM0BWSSP(18) = OM0BW01.OM0BWSSP(18) / 100;*/
   /* MOVE XSZTBL.XSZPCT19(EZETST) TO OM0BW01.OM0BWSSP(19);*/
   /* OM0BW01.OM0BWSSP(19) = OM0BW01.OM0BWSSP(19) / 100;*/
   /* MOVE XSZTBL.XSZPCT20(EZETST) TO OM0BW01.OM0BWSSP(20);*/
   /* OM0BW01.OM0BWSSP(20) = OM0BW01.OM0BWSSP(20) / 100;*/
   /* MOVE XSZTBL.XSZPCT21(EZETST) TO OM0BW01.OM0BWSSP(21);*/
   /* OM0BW01.OM0BWSSP(21) = OM0BW01.OM0BWSSP(21) / 100;*/
   /* MOVE XSZTBL.XSZPCT22(EZETST) TO OM0BW01.OM0BWSSP(22);*/
   /* OM0BW01.OM0BWSSP(22) = OM0BW01.OM0BWSSP(22) / 100;*/
   /* MOVE XSZTBL.XSZPCT23(EZETST) TO OM0BW01.OM0BWSSP(23);*/
   /* OM0BW01.OM0BWSSP(23) = OM0BW01.OM0BWSSP(23) / 100;*/
   /* MOVE XSZTBL.XSZPCT24(EZETST) TO OM0BW01.OM0BWSSP(24);*/
   /* OM0BW01.OM0BWSSP(24) = OM0BW01.OM0BWSSP(24) / 100;*/
   /* MOVE XSZTBL.XSZPCT25(EZETST) TO OM0BW01.OM0BWSSP(25);*/
   /* OM0BW01.OM0BWSSP(25) = OM0BW01.OM0BWSSP(25) / 100;*/
   /* MOVE XSZTBL.XSZPCT26(EZETST) TO OM0BW01.OM0BWSSP(26);*/
   /* OM0BW01.OM0BWSSP(26) = OM0BW01.OM0BWSSP(26) / 100;*/
   /* MOVE XSZTBL.XSZPCT27(EZETST) TO OM0BW01.OM0BWSSP(27);*/
   /* OM0BW01.OM0BWSSP(27) = OM0BW01.OM0BWSSP(27) / 100;*/
   /* MOVE XSZTBL.XSZPCT28(EZETST) TO OM0BW01.OM0BWSSP(28);*/
   /* OM0BW01.OM0BWSSP(28) = OM0BW01.OM0BWSSP(28) / 100;*/
   /* MOVE XSZTBL.XSZPCT29(EZETST) TO OM0BW01.OM0BWSSP(29);*/
   /* OM0BW01.OM0BWSSP(29) = OM0BW01.OM0BWSSP(29) / 100;*/
   /* MOVE XSZTBL.XSZPCT30(EZETST) TO OM0BW01.OM0BWSSP(30);*/
   /* OM0BW01.OM0BWSSP(30) = OM0BW01.OM0BWSSP(30) / 100;*/
   /* MOVE XSZTBL.XSZPCT31(EZETST) TO OM0BW01.OM0BWSSP(31);*/
   /* OM0BW01.OM0BWSSP(31) = OM0BW01.OM0BWSSP(31) / 100;*/
   /* MOVE XSZTBL.XSZPCT32(EZETST) TO OM0BW01.OM0BWSSP(32);*/
   /* OM0BW01.OM0BWSSP(32) = OM0BW01.OM0BWSSP(32) / 100;*/
   /* MOVE XSZTBL.XSZPCT33(EZETST) TO OM0BW01.OM0BWSSP(33);*/
   /* OM0BW01.OM0BWSSP(33) = OM0BW01.OM0BWSSP(33) / 100;*/
   /* MOVE XSZTBL.XSZPCT34(EZETST) TO OM0BW01.OM0BWSSP(34);*/
   /* OM0BW01.OM0BWSSP(34) = OM0BW01.OM0BWSSP(34) / 100;*/
   /* MOVE XSZTBL.XSZPCT35(EZETST) TO OM0BW01.OM0BWSSP(35);*/
   /* OM0BW01.OM0BWSSP(35) = OM0BW01.OM0BWSSP(35) / 100;*/
   /* MOVE XSZTBL.XSZPCT36(EZETST) TO OM0BW01.OM0BWSSP(36);*/
   /* OM0BW01.OM0BWSSP(36) = OM0BW01.OM0BWSSP(36) / 100;*/
   /* MOVE XSZTBL.XSZPCT37(EZETST) TO OM0BW01.OM0BWSSP(37);*/
   /* OM0BW01.OM0BWSSP(37) = OM0BW01.OM0BWSSP(37) / 100;*/
   /* MOVE XSZTBL.XSZPCT38(EZETST) TO OM0BW01.OM0BWSSP(38);*/
   /* OM0BW01.OM0BWSSP(38) = OM0BW01.OM0BWSSP(38) / 100;*/
   /* MOVE XSZTBL.XSZPCT39(EZETST) TO OM0BW01.OM0BWSSP(39);*/
   /* OM0BW01.OM0BWSSP(39) = OM0BW01.OM0BWSSP(39) / 100;*/
   /* MOVE XSZTBL.XSZPCT40(EZETST) TO OM0BW01.OM0BWSSP(40);*/
   /* OM0BW01.OM0BWSSP(40) = OM0BW01.OM0BWSSP(40) / 100;*/
   /* MOVE XSZTBL.XSZNBRSZ(EZETST) TO OM0BW01.XSZNBRSZ;*/
   /* ND;*/


   /* now distribute the quantities*/


   /* OVE 0 TO OM0BW01.OM0BWTOT;*/
   /* OVE 0 TO OM0BW01.OM0BWQTY;*/
   /* OVE 0 TO OM0BW01.OM0BWVAR;*/
   /* OVE 0 TO OM0BW01.OM0BWSZC;*/
   /* OVE 1 TO OMAREC.OMASUB;*/

   /* HILE OMAREC.OMASUB LE 40*/
   /* AND OM0BW01.OM0BWSZC LT OM0BW01.XSZNBRSZ;*/
   /* IF OP3REC.OP3SZAFL(OMASUB) EQ 'Y'      /* if size active*/
     /* AND OMAREC.OMASUB GE OMWREC.OMWRQSZF  /* and size is in*/
     /* AND OMAREC.OMASUB LE OMWREC.OMWRQSZL; /* requested range*/
     /* OM0BW01.OM0BWSZC = OM0BW01.OM0BWSZC + 1;*/
     /* MOVE 0 TO OP3REC.OP3ONOQT(OMASUB);*/
     /* OM0BW01.OM0BWQTY = OMWREC.OP2TONOQ * OM0BW01.OM0BWSSP(OM0BWSZC);*/
     /* OM0BW01.OM0BWQTY = OM0BW01.OM0BWQTY + 0.5;*/
     /* MOVE OM0BW01.OM0BWQTY TO OP3REC.OP3ONOQT(OMASUB);*/
     /* OM0BW01.OM0BWTOT = OM0BW01.OM0BWTOT + OM0BW01.OM0BWQTY;*/
   /* END;*/
   /* OMAREC.OMASUB = OMAREC.OMASUB + 1;*/
   /* ND;*/

   /* M0BW01.OM0BWVAR = OMWREC.OP2TONOQ - OM0BW01.OM0BWTOT;*/
   /* OVE OM0BW01.OM0BWVAR TO OM0BW01.OM0BWTOT;*/

   /* F OM0BW01.OM0BWTOT < 0;*/
   /* OM0BW01.OM0BWTOT = OM0BW01.OM0BWTOT * -1;*/
   /* ND;*/

   /* M0BW01.OM0BWSZC = OM0BW01.OM0BWSZC / 2 + 1;*/
   /* M0BW01.OM0BWSZC = OM0BW01.OM0BWTOT / 2 + OM0BW01.OM0BWSZC;*/
   /* MAREC.OMASUB = OMAREC.OMASUB - OM0BW01.OM0BWSZC;*/

   /* F OM0BW01.OM0BWVAR > 0;*/
   /* WHILE OM0BW01.OM0BWVAR > 0;*/
     /* OP3REC.OP3ONOQT(OMASUB) = OP3REC.OP3ONOQT(OMASUB) + 1;*/
     /* OM0BW01.OM0BWVAR = OM0BW01.OM0BWVAR - 1;*/
     /* IF OM0BW01.OM0BWVAR < 1;*/
       /* MOVE 0 TO OM0BW01.OM0BWVAR;*/
     /* END;*/
     /* OMAREC.OMASUB = OMAREC.OMASUB - 1;*/
   /* END;*/
   /* LSE;*/
   /* WHILE OM0BW01.OM0BWVAR LE -1;*/
     /* OP3REC.OP3ONOQT(OMASUB) = OP3REC.OP3ONOQT(OMASUB) - 1;*/
     /* IF OP3REC.OP3ONOQT(OMASUB) LT 0;*/
       /* MOVE 0 TO OP3REC.OP3ONOQT(OMASUB);*/
     /* END;*/
     /* OM0BW01.OM0BWVAR = OM0BW01.OM0BWVAR + 1;*/
     /* OMAREC.OMASUB = OMAREC.OMASUB - 1;*/
   /* END;*/
   /* ND;*/

   /* OVE OMWREC.OP2TONOQ TO OP3REC.OP2TONOQ;*/


end // end OM0BS2A

// get actual size range
Function OM0BS30()



      /* find first & last active sizes,*/
      /* move to requested size range for first prod in array*/

  TA1REC.TA1LOCAT[2] = "OM0BS30"; /* error diag group name*/


  sysVar.arrayIndex = 1;

  while (sysVar.arrayIndex < 41) /* find first active size*/
    if (OP3REC.OP3SZAFL[sysVar.arrayIndex] == "Y")
      OMWREC.OMWRQSZF = sysVar.arrayIndex;
      sysVar.arrayIndex = 49;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  sysVar.arrayIndex = 40;

  while (sysVar.arrayIndex > 0) /* find last active size*/
    if (OP3REC.OP3SZAFL[sysVar.arrayIndex] == "Y")
      OMWREC.OMWRQSZL = sysVar.arrayIndex;
      sysVar.arrayIndex = 0;
    end
    sysVar.arrayIndex = sysVar.arrayIndex - 1;
  end



end // end OM0BS30

// control edits-size.info,top
Function OM0BS40()



      /* *********************************************************/
      /* * control all editing for top half fields on the map*/
      /* * the fields are not edited in reverse order because*/
      /* * the logic became too convoluted (nice word) . . .*/
      /* *********************************************************/

  TA1REC.TA1LOCAT[2] = "OM0BS40"; /* error diag group name*/


  OM0BWSBM = 1; /* start at map column 1*/

  if (OM0BW01.OM0BWSCR == 1) /* start at record*/
    move OM0BWSMF to OM0BWSBR withV60Compat; /* first chosen size*/
  else
    move OM0BWSB2 to OM0BWSBR withV60Compat; /* or screen 2, starting point*/
  end

  if (OM0BW01.OM0BWPF6 == "Y") /* if allowed to change prices*/
    OM0BS42(); /* price edit/update, qty edit*/
  else
    OM0BS43(); /* no price change, qty edit only*/
  end

  if (OP1REC.XWHCD == "51") /* exclude apparel warehouse from*/
   /* next sentence               /* the footwear factory carton*/
  else /* edit*/
    if (OP1REC.XPACD == "MS" || 
    OP1REC.XPACD == "CU")
      OM0BS-VAL-PREPKS();
    end
  end

  if (OM0BW01.OM0BWDAV == "N") /* if not displaying availablity*/
    return;
  end


    /* 1.  when displaying availability,*/
        /* calculate latest availability date*/
      /* this includes reformatting the need date which is*/
      /* binary so that it can be used to compare with a*/
      /* character field (obicond). obicond can contain a*/
      /* date or a cond code (a/o s/o).*/

   /* if the condition code is in character format*/
   /* (s/o u/a) or blank move zeros to the numeric*/
   /* date field used when comparing condition date*/
   /* to need date. if the condition code is a/o*/
   /* move current date to the numeric date field.*/
   /* if the condition code is a date move the*/
   /* condition code to working storage so you can*/
   /* strip off the /. then if the condition code month*/
   /* is less than the current month add 1 to the year.*/
   /* otherwise if the current month is greater or equal*/
   /* the condition month you are still in the same year*/
   /* so move current year*/

  OM0BW01.OM0BWAVD = 0; /* assume nothing is available*/
  OMAREC.OMASUB = 1;

  while (OMAREC.OMASUB <= 40)
    if (OBIREC.OBICOND[OMASUB] == "A/O") /* at once*/
      OM0BW01.OM0BWNCD = OMAREC.OMACDT;
    else
      if (OBIREC.OBICOND[OMASUB] == "S/O"  /* sold out*/
       || OBIREC.OBICOND[OMASUB] == "U/A"  /* unavailable*/
       || OBIREC.OBICOND[OMASUB] == "O/B"  /* open book*/
       || OBIREC.OBICOND[OMASUB] == "C/OV" /* carry over*/
       || OBIREC.OBICOND[OMASUB] == "B/A"  /* blank availability*/
       || OBIREC.OBICOND[OMASUB] == "   ")
        OM0BW01.OM0BWNCD = 0;
      else
        OM0BW01.OM0BWHYY = OMAREC.OMACYY; /* cur yr to hold yr*/
        OM0BW01.OM0BWCON = OBIREC.OBICOND[OMASUB]; /* cond code*/
        OM0BW01.OM0BWNMO = OM0BW01.OM0BWCOM; /* move month*/
        OM0BW01.OM0BWNDA = OM0BW01.OM0BWCOD; /* move day*/
        if (OM0BW01.OM0BWNMO < OMAREC.OMACMM) /* cond month lt cur month*/
          OM0BW01.OM0BWHYY = OM0BW01.OM0BWHYY + 1; /* hold yr*/
          OM0BW01.OM0BWNYR = OM0BW01.OM0BWHYY; /* hold yr to cond yr*/
        else
          OM0BW01.OM0BWNYR = OMAREC.OMACYY; /* cur yr to cond yr*/
        end
        if (OM0BW01.OM0BWNYR > 56) /* SET UP CENTURY*/
          OM0BW01.OM0BWNCC = 19;
        else
          OM0BW01.OM0BWNCC = 20;
        end
      end
    end
    if (OP3REC.OP3SZAFL[OMASUB] == "Y") /* with active flag*/
      if (OP3REC.OP3ONOQT[OMASUB] > 0) /* if have qty ordered,*/
        OM0BW01.OM0BWBCD = OM0BW01.OM0BWNCD; /* num date to binary dt*/
        if (OM0BW01.OM0BWBCD > OM0BW01.OM0BWAVD)
          OM0BW01.OM0BWAVD = OM0BW01.OM0BWBCD;
        end
      end
    end
    OMAREC.OMASUB = OMAREC.OMASUB + 1;
  end

  OM0BW01.OM0BWSBM = 1; /* start at map column 1*/
  if (OM0BW01.OM0BWSCR == 1) /* start at record*/
    OM0BW01.OM0BWSBR = OM0BW01.OM0BWSMF; /* first chosen size*/
  else
    OM0BW01.OM0BWSBR = OM0BW01.OM0BWSB2; /* or screen 2, starting point*/
  end
  while (OM0BW01.OM0BWSBM < 21
   && OM0BW01.OM0BWSBR < 41
   && OM0BW01.OM0BWSBR <= OM0BW01.OM0BWSML)
    if (OP3REC.OP3SZAFL[OM0BWSBR] == "Y")
      if (OP3REC.OP3ONOQT[OM0BWSBR] > 0)
        if (OM0BM001.OP3ONOQT[OM0BWSBM] > OM0BM001.OM0BMAVL[OM0BWSBM])
          converseLib.validationFailed(385); /* not enough available*/
          OMAREC.OMAERR = "Y";
          set OM0BM001.OP3ONOQT[OM0BWSBM] cursor, modified, bold;
        end
      end
      OM0BW01.OM0BWSBM = OM0BW01.OM0BWSBM + 1;
      OM0BW01.OM0BWSBR = OM0BW01.OM0BWSBR + 1;
    else
      OM0BW01.OM0BWSBR = OM0BW01.OM0BWSBR + 1;
    end
  end

  /* the rest of these edits relate to the date product is*/
  /* available - OM0BWAVD.  if this field is 0, the user*/
  /* did not take any quantities, so we don't need to*/
  /* do the rest of the edits.*/
  /*  */
  if (OM0BW01.OM0BWAVD == 0)
    return;
  end
  /*  */
  if (OM0BW01.OP1CUNDT != OM0BW01.OM0BWAVD)
    set OM0BM001.OP3ONOQT[1] cursor;
    OM0BS4B();
    if (OMAREC.OMAERR == "Y")
      return;
    end
  end

  /* for at once orders, the need date can not be pushed any*/
  /* further than the latest available date for the sizes*/
  /* taken.*/
  /*  */
  if (XOTTBL.XOTATONF[OM0BWSBO] == "Y"    /* at once*/
   && OM0BW01.OM0BWAVD < OM0BW01.OP1CUNDT /* latest avail dt lt ndt*/
   && OM0BW01.OP1CUNDT > OMAREC.OMACDT)   /* need dt > today*/
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(443); /* nd dt must meet offer dt or today's*/
                                   /* date*/
    set OM0BM001.OM0BMNDT cursor, modified, bold;
  end
end // end OM0BS40

// control edit-prc ed/upd,qty ed
Function OM0BS42()



      /* edit size price & quantity, update if o.k.*/

  TA1REC.TA1LOCAT[2] = "OM0BS42"; /* error diag group name*/


  while (OM0BWSBM < 21 /* for each map size*/
   && OM0BWSBR < 41 /* that is in size range*/
   && OM0BWSBR <= OM0BW01.OM0BWSML)
    if (OP3REC.OP3SZAFL[OM0BWSBR] == "Y") /* with active flag*/
      if (OM0BM001.SY5PRCUN[OM0BWSBM] is modified)
        OM0BS45(); /* edit price variance*/
      else
        set OM0BM001.SY5PRCUN[OM0BWSBM] normal; /* unprotect*/
      end
      if (OM0BM001.OP3ONOQT[OM0BWSBM] is modified)
        OM0BS47(); /* quantity edit*/
      else
        set OM0BM001.OP3ONOQT[OM0BWSBM] initialAttributes;
      end
      OM0BWSBM = OM0BWSBM + 1; /* map subscript*/
    end
    OM0BWSBR = OM0BWSBR + 1; /* record subscript*/
  end


      /* note - check of msg 169 needed to avoid*/
           /* moving old op3rec price on top of price change*/
           /* edited with error 169 and not yet applied.*/

  if (OM0BW01.OM0BWPF6 == "Y") /* if show prices*/
    if (converseVar.validationMsgNum != 169) /* if size price edit is o.k.*/
      OM0BS66(); /* re-do price & **/
    end
  end



end // end OM0BS42

// control edit-qty edit/update
Function OM0BS43()



      /* edit only quantity, not price*/

  TA1REC.TA1LOCAT[2] = "OM0BS43"; /* error diag group name*/


  while (OM0BWSBM < 21 /* for each map size*/
   && OM0BWSBR < 41 /* that is in size range*/
   && OM0BWSBR <= OM0BW01.OM0BWSML)
    if (OP3REC.OP3SZAFL[OM0BWSBR] == "Y") /* with active flag*/
      if (OM0BM001.OP3ONOQT[OM0BWSBM] is modified)
        OM0BS47(); /* quantity edit/updt*/
      else
        set OM0BM001.OP3ONOQT[OM0BWSBM] initialAttributes;
      end
      OM0BWSBM = OM0BWSBM + 1; /* map subscript*/
    end
    OM0BWSBR = OM0BWSBR + 1; /* record subscript*/
  end



end // end OM0BS43

// edit size price
Function OM0BS45()


  TA1REC.TA1LOCAT[2] = "OM0BS45"; /* error diag group name*/

  OM0BW01.OM0BWPRO = OP3REC.SY5PRCUN[OM0BWSBR]; /* original price*/
  OM0BW01.OM0BWPRN = OM0BM001.SY5PRCUN[OM0BWSBM]; /* new price*/

  if (OM0BW01.OM0BWPRN <= 0) /* new price le 0 invalid*/
    if (OM0BW01.OM0BWPRN == 0 /* if new price is zero*/
     && SYCREC.SY1FNSHG == "2") /* and prod is raw materials*/
      if (OM0BW01.XAUCD == "64" /* class is salesman samples*/
       || OM0BW01.XAUCD == "82") /* or rep samples*/
          /* next sentence - price = 0 ok*/
      else
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(189); /* price can not be < or = zero*/
        set OM0BM001.SY5PRCUN[OM0BWSBM] cursor, modified, bold;
        return;
      end
    else
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(189); /* price can not be < or = zero*/
      set OM0BM001.SY5PRCUN[OM0BWSBM] cursor, modified, bold;
      return;
    end
  end


  OM0BW01.OM0BWFND = "N"; /* no error*/

      /* note - om0bwpsz = n, never changed*/
             /* om0bwpsz = y, warning given once, don't repeat,*/
                           /* apply any change*/
  if (OM0BW01.OM0BWPSZ == "N")
    OM0BS6H(); /* edit price variance*/
  end

  if (OM0BW01.OM0BWFND == "Y") /* edit once error found*/
    OM0BW01.OM0BWPSZ = "Y";
    converseLib.validationFailed(169); /* warning - outside ord type range*/
    set OM0BM001.SY5PRCUN[OM0BWSBM] cursor, modified, bold;
    return;
  end


      /* good price change for this size*/

  OP3REC.SY5PRCUN[OM0BWSBR] = OM0BM001.SY5PRCUN[OM0BWSBM];
  OP3REC.OP3PRCOF[OM0BWSBR] = "Y"; /* price override flag*/
  OP3REC.OP2PRCOF = "Y"; /* product price override*/
  OP3REC.OP2PRCVF = "Y"; /* product price varies*/
  if (XOTTBL.XOTAUTHF[OM0BWSBO] == "Y") /* if auth required*/
    OM0BW01.OM0BWARF = "Y"; /* set flag requiring it.*/
  end
  set OM0BM001.SY5PRCUN[OM0BWSBM] normal; /* unprotected*/



end // end OM0BS45

// edit size quantity
Function OM0BS47()
      /* total qty = total qty - old size qty + new size qty*/

  OP3REC.OP2TONOQ = OP3REC.OP2TONOQ - OP3REC.OP3ONOQT[OM0BWSBR];

    /* check availability for draw orders.*/

  if (OM0BW01.OM0BWBDF == "DS"
   || OM0BW01.OM0BWBDF == "DC"
   || OM0BW01.OM0BWBDF == "DX"
   || OM0BW01.OM0BWBDF == "DR"
   || OM0BW01.OM0BWBDF == "DN")
    if (OM0BM001.OP3ONOQT[OM0BWSBM] > OM0BM001.OM0BMAVL[OM0BWSBM])
      converseLib.validationFailed(288);
      OMAREC.OMAERR = "Y";
      set OM0BM001.OP3ONOQT[OM0BWSBM] modified, bold;
      OP3REC.OP2TONOQ = OP3REC.OP2TONOQ + OP3REC.OP3ONOQT[OM0BWSBR];
      if (OM0BW01.OM0BWBDF == "DR") /* if rebook draw*/
        OP3REC.OP3ORGQT[OM0BWSBR] = 0; /* draw orig qty*/
      end /* is always zero*/
      return;
    else
      set OM0BM001.OP3ONOQT[OM0BWSBM] initialAttributes;
    end
  end


    /* check quantity ordered against availability*/
    /* on regular orders, not bulk/draw*/

     /* NOTE:  SOME CONDITION CODES ALLOW THE QTY ENTERED TO BE*/
            /* greater then the qty avail.  (xcdentfl)*/
            /* for orders that can't be allocated, qty may be*/
            /* greater then avail if xcdentfl eq 'y'.*/


  if (OM0BW01.OM0BWDAV == "Y") /* if we are displaying availability*/
    OM0BW01.OM0BWQTY = OP3REC.OP3ONOQT[OM0BWSBR];
    OM0BW01.OM0BWQTY = OM0BM001.OP3ONOQT[OM0BWSBM] - OM0BW01.OM0BWQTY;
    set OM0BM001.OP3ONOQT[OM0BWSBM] initialAttributes;
  end


      /* move map to record, both on-order and original qtys*/
      /* only add to orig qty if before production deadline.*/

  OP3REC.OP3ONOQT[OM0BWSBR] = OM0BM001.OP3ONOQT[OM0BWSBM];

  /* additional quantities are recorded as original only if they*/
  /* are added less than 60 days after the cutoff date.*/

  if (OM0BW01.OM0BW-DAYS-PAST-CUTOFF < 60)
    OP3REC.OP3ORGQT[OM0BWSBR] = OM0BM001.OP3ONOQT[OM0BWSBM];
  end

  if (OM0BW01.OM0BWBDF == "DR") /* if rebook draw*/
    OP3REC.OP3ORGQT[OM0BWSBR] = 0; /* draw orig qty*/
  end /* is always zero*/

      /* add in new size qty to total qty for product*/

  OP3REC.OP2TONOQ = OP3REC.OP2TONOQ + OP3REC.OP3ONOQT[OM0BWSBR];





end // end OM0BS47

// check avail dt with need dt
Function OM0BS4B()
  TA1REC.TA1LOCAT[2] = "OM0BS4B"; /* error diag group name*/



  set OM0BM001.OP3ONOQT[1] cursor;
  /*  */
  /* the need date must be on or after the latest date quantities*/
  /* are available for sizes taken.  There is an exception to this*/
  /* rule, when we are adding product to an order with a need*/
  /* date prior to today.  In this case, we are displaying and*/
  /* decrementing quantity as of today, so we pretend the need*/
  /* date is today.*/
  /* Testing note:  in real life, the availability date is never*/
  /* less than today...some nightly batch run poddles thru the*/
  /* availability database changing all the period dates to today.*/
  /* In the wacky world of testing, this run is not done, and*/
  /* it is more likely that availability dates are somewhere in*/
  /* the misty past.*/
  /*  */
  if (OM0BW01.OP1CUNDT < OM0BW01.OM0BWAVD /* ndt is prior to avail dt*/
   && OM0BW01.OM0BWAVD > OMAREC.OMACDT)   /* product is not avail today*/
    converseLib.validationFailed(383); /* need date can't be LT furthest avail*/
                                   /* date*/
    OMAREC.OMAERR = "Y";
    set OM0BM001.OM0BMNDT cursor, modified, bold;
  end
end // end OM0BS4B

// choose sizes/price for map
Function OM0BS51()



      /* *************************************/
      /* * map lines 5 - 14  all 20 sizes*/
      /* *************************************/

  TA1REC.TA1LOCAT[2] = "OM0BS51"; /* error diag data-group*/


      /* * the theory is - screen 1 has record sizes  1 to 20*/
      /* *                 screen 2 has record sizes 21 to 40*/
      /* * if screen 2 has only 2 sizes shown,*/
      /* *   then screen 1 sizes 3 to 20 still show on scrn 2.*/
      /* *   excess sizes will be cleared in the next section.*/


  OM0BW01.OM0BWSBM = 1; /* map index = 1 to start*/

      /* note - om0bwsmf/l were set before got here*/
             /* could be reqstd range, full range or actual range*/

  if (OM0BW01.OM0BWSCR == 1) /* if on screen 1*/
    OM0BW01.OM0BWSBR = OM0BW01.OM0BWSMF; /* find first size to move*/
  else
    OM0BW01.OM0BWSBR = OM0BW01.OM0BWSB2; /* screen 2 starting place*/
  end


      /* move size,qty,alloc (and price, flag) to map*/

  if (OP3REC.OP2PRCOF == "Y" /* if multiple prices in the product*/
   || OP3REC.OP2PRCVF == "Y" /* or pf6 requested prices*/
   || OM0BW01.OM0BWPF6 == "Y")
                                   /* move size,qty,alloc,price & fl to map*/
    while (OM0BW01.OM0BWSBM < 21 /* for up to 20 sizes*/
     && OM0BW01.OM0BWSBR < 41 
     && OM0BW01.OM0BWSBR <= OM0BW01.OM0BWSML)
      if (OP3REC.OP3SZAFL[OM0BWSBR] == "Y") /* active size -*/
        OM0BS52(); /* get size descrip, move all data*/
        OM0BS53(); /* move size price and * flag to map*/
        OM0BW01.OM0BWSBM = OM0BW01.OM0BWSBM + 1; /* next map column*/
      end
      OM0BW01.OM0BWSBR = OM0BW01.OM0BWSBR + 1; /* try next size in record*/
    end
  else
    while (OM0BW01.OM0BWSBM < 21 /* if no multiple prices in the product*/
     && OM0BW01.OM0BWSBR < 41 /* move size,qty,alloc to map*/
     && OM0BW01.OM0BWSBR <= OM0BW01.OM0BWSML)
      if (OP3REC.OP3SZAFL[OM0BWSBR] == "Y") /* for up to 20 sizes*/
        OM0BS52(); /* get size descrip, move all data*/
        OM0BW01.OM0BWSBM = OM0BW01.OM0BWSBM + 1; /* next map column*/
      end
      OM0BW01.OM0BWSBR = OM0BW01.OM0BWSBR + 1; /* try next size in record*/
    end
  end


  if (OM0BW01.OM0BWSCR == 1) /* if screen # 1*/
    OM0BW01.OM0BWSB2 = OM0BWSBR; /* hold scrn 2 starting point*/
  end


      /* ********************************************************/
      /* * check where valid sizes stopped -*/
      /* *   if have more than 20, set more flag = y*/
      /* *   if have less than 20, darken rest of 20 fields*/
      /* ********************************************************/

  OM0BW01.OM0BWMOR = "N"; /* init more sizes = n*/

  if (OM0BW01.OM0BWSCR == 1) /* if screen # 1 and*/
    if (OM0BW01.OM0BWSML >= OM0BWSBR) /* chosen last size > or =*/
      OM0BW01.OM0BWMOR = "Y"; /* last size shown + 1*/
    end /* then have more sizes for map*/
  end

  while (OM0BWSBM < 21) /* for unused columns on screen*/
    OM0BS54(); /* clear size,qty,aloc,price,fl*/
    OM0BWSBM = OM0BWSBM + 1;
  end


      /* **********************************************/
      /* move correct value for 'more sizes' to map*/
      /* **********************************************/

  OM0BS55();



end // end OM0BS51

// move qty, avail, desc to map
Function OM0BS52()
  /* start by assuming we are displaying availaibility*/
  /* if not these map fields will be set dark later, and we'll*/
  /* turn off the availability flag*/
  /*  */
  set OM0BM001.SY4IDDSC[OM0BWSBM] initialAttributes;
  set OM0BM001.OM0BMAVL[OM0BWSBM] initialAttributes;
  set OM0BM001.OM0BMPOF[OM0BWSBM] initialAttributes;
  OM0BW01.OM0BWDAV = "Y";
  /*  */
  /* move size description to map*/
  /*  */
  OM0BM001.SY4IDDSC[OM0BWSBM] = SY4REC.SY4IDDSC[OM0BWSBR];
  /*  */
  /* move order quantities from op3rec to map*/
  /*  */
  /* for dup sizes, op3rec contains quantities*/
  /* that we want to show on the screen before the initial*/
  /* converse.  However, this sgrp is part of the get*/
  /* availability routines, which can be executed after the*/
  /* converse as well.*/
  /*  */
  /* When some change has been made that requires rechecking*/
  /* of availability, (warehouse, need date, etc.) this*/
  /* rechecking must be done BEFORE the quantity edits, to*/
  /* allow verification of the quantities against the new*/
  /* availability.  OP3REC will not be valued with the map*/
  /* quantities until AFTER quantity edits are completed.*/
  /*  */
  /* OM0BWAVX is a trigger that is set off when availability*/
  /* is called as the result of some change to need date,*/
  /* warehouse, etc.  It prevents the quantity fields*/
  /* on the map from being overlaid with the old quantities*/
  /* still on OP3REC.*/
  /*  */
  if (OM0BW01.OM0BW-MOVE-QUANTITY-FLAG == "Y") /* okay to move op3rec to map*/
    OM0BM001.OP3ONOQT[OM0BWSBM] = OP3REC.OP3ONOQT[OM0BWSBR];
    set OM0BM001.OP3ONOQT[OM0BWSBM] initialAttributes;
  end
  /*  */
  /* move availability to map*/
  /*  */
  if (OM0BW01.OM0BWBDF == "DS"
   || OM0BW01.OM0BWBDF == "DX"
   || OM0BW01.OM0BWBDF == "DC"
   || OM0BW01.OM0BWBDF == "DR"
   || OM0BW01.OM0BWBDF == "DN")
    OM0BS-AVAIL-DRAW(); /* move availability from bulk to map*/
  else
    OM0BS-AVAIL-OB1210(); /* move availability from ob1210 to map*/
  end
end // end OM0BS52

// move price & flag to map/unpro
Function OM0BS53()



      /* move price to map*/

  TA1REC.TA1LOCAT[2] = "OM0BS53"; /* error diag group name*/


  OM0BM001.SY5PRCUN[OM0BWSBM] = OP3REC.SY5PRCUN[OM0BWSBR];


  if (OM0BW01.OM0BWPF6 == "Y") /* if allowed to change prices*/
    set OM0BM001.SY5PRCUN[OM0BWSBM] normal; /* unprotect prices*/
  else
    set OM0BM001.SY5PRCUN[OM0BWSBM] initialAttributes;
  end


      /* move price override flag to map*/

  set OM0BM001.OP3PRCOF[OM0BWSBM] initialAttributes;

  if (OM0BW01.OM0BWDAV == "Y") /* skip prc ovrd,cond codes priority*/
      /* next sentence*/
  else
    if (OP3REC.OP3PRCOF[OM0BWSBR] == "Y")
      OM0BM001.OP3PRCOF[OM0BWSBM] = "*";
    else
      OM0BM001.OP3PRCOF[OM0BWSBM] = " ";
      OM0BM001.OM0BMPOF[OM0BWSBM] = " ";
    end
  end



   /* log 535 dflesh- if price per unit is gt $999.99,*/
   /* price per unit field would show a truncated value.*/

  if (OP3REC.SY5PRCUN[OM0BWSBR] > 999.99) /* price per unit gt $999.99*/
    set OM0BM001.SY5PRCUN[OM0BWSBM] skip, invisible;
  end


end // end OM0BS53

// clear size cols(5 flds) on map
Function OM0BS54()



      /* *********************************************/
      /* * in size columns not used on the map*/
      /* * darken unused fields - size descrip*/
      /* *                      - ordered quantity*/
      /* *                      - available quantity*/
      /* *                      - price per size*/
      /* *                      - price override flag*/
      /* *********************************************/

  TA1REC.TA1LOCAT[2] = "OM0BS54"; /* error diag group name*/


  set OM0BM001.SY4IDDSC[OM0BWSBM] protect, invisible;
  set OM0BM001.OP3ONOQT[OM0BWSBM] protect, invisible;
  set OM0BM001.OM0BMAVL[OM0BWSBM] protect, invisible;
  set OM0BM001.OM0BMPOF[OM0BWSBM] protect, invisible;
  set OM0BM001.SY5PRCUN[OM0BWSBM] protect, invisible;
  set OM0BM001.OP3PRCOF[OM0BWSBM] protect, invisible;



end // end OM0BS54

// move 'more sizes' to map
Function OM0BS55()



      /* ******************************/
      /* * set up 'more sizes' flag*/
      /* ******************************/

  TA1REC.TA1LOCAT[2] = "OM0BS55"; /* error diag group name*/


  if (OM0BW01.OM0BWMOR == "Y") /* if screen 1 has more than 20 sizes*/
    set OM0BM001.OM0BMWDM initialAttributes; /* show 'y' on the screen*/
    set OM0BM001.OM0BWMOR initialAttributes;
    OM0BM001.OM0BWMOR = "Y";
  else
    set OM0BM001.OM0BMWDM protect, invisible; /* else darken this area*/
    set OM0BM001.OM0BWMOR protect, invisible; /* of the screen*/
  end



end // end OM0BS55

// validate pf 6(chg size prices)
Function OM0BS61()



      /* *************************************************/
      /* * pf 6 not valid if order is on sales program*/
        /* unless the product is a sales tool like a component*/
        /* ring where the price needs to be changed to zero*/
        /* or is division '02'.*/
      /* * pf 6 (price by size change) can be done for*/
        /* smart reservation bulk/draw orders as well as*/
        /* for nil orders for products in development.*/
      /* *************************************************/

  if (OP1REC.SP1ID != "    ") /* if there is a sales pgm then get the nike*/
    OM0BS-SPGM-DEPT-CD(); /* department code that is associated with it*/
  else
    SP1REC.XNDCD = "    "; /* if no sales pgm then no nike dept code*/
  end

  TA1REC.TA1LOCAT[2] = "OM0BS61"; /* error diag group name*/


  if (KUCREC.KUCCOID == 0) /* if compy rec not read yet*/
    KUCREC.KUCCOID = OP1REC.KUCCOID;
    OM0BS9C(); /* read it to get acct class*/
    OM0BW01.XAUCD = KUCREC.XAUCD; /* save comp acct class*/
  end


  if (OP1REC.SP1ID == " "  /* if no sales program*/
   || OP1REC.XDVCD == "02" /* or international division*/
   || SP1REC.XNDCD == "ALLM") /* allocation sales program*/
     /* next sentence                    price ovrd ok*/
  else
    if (SYCREC.SY1FNSHG == "2") /* if the prod is raw materials*/
      if (KUCREC.XAUCD == "64" /* if the cmpy account class is*/
       || KUCREC.XAUCD == "82") /* salesmen or rep samples*/
        /* next sentence                  it is ok to override the prce*/
      else /* otherwise*/
        OMAREC.OMAERR = "Y"; /* error*/
        converseLib.validationFailed(168);
                                   /* msg: sales pgm cant change prices*/
        OM0BS62(); /* reset mdts for changed fields*/
        exit stack; /* return*/
      end
    else
                                   /* else (sales pgm & prod not raw mat)*/
      OMAREC.OMAERR = "Y"; /* error*/
      converseLib.validationFailed(168);
                                   /* msg: sales pgm cant change prices*/
      OM0BS62(); /* reset mdts for changed fields*/
      exit stack; /* return*/
    end
  end


  if (OM0BW01.OM0BWBDF == "BX")
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(294);
    OM0BS62();
    exit stack;
  end


end // end OM0BS61

// map fld attrib-if modfd,set md
Function OM0BS62()



      /* *************************************************/
      /* * set mdt's for fields previously changed*/
      /* * this allow user to press the correct pf key*/
      /* * without having to re-enter the data.*/
      /* * also, allows data entry on bottom of screen 1*/
      /* * to show on screen 2.*/
      /* * if field not modified, reset attributes*/
      /* *************************************************/

  TA1REC.TA1LOCAT[2] = "OM0BS62"; /* error diag-group name*/


      /* *************************************************/
      /* * check all 20 sizes for data entered*/
      /* *************************************************/


  if (OM0BM001.XOMCD is modified) /* change reason code*/
    set OM0BM001.XOMCD modified;
  end




  sysVar.arrayIndex = 1; /* start at 1*/

  while (sysVar.arrayIndex < 21)
    if (OM0BM001.OP3ONOQT[sysVar.arrayIndex] is modified)
      set OM0BM001.OP3ONOQT[sysVar.arrayIndex] modified;
         /* MOVE 'Y' TO OM0BW01.OM0BWCQM;*/
    end
    if (OM0BM001.SY5PRCUN[sysVar.arrayIndex] is modified)
      set OM0BM001.SY5PRCUN[sysVar.arrayIndex] modified;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end


      /* *************************************************/
      /* * continue with bottom half of screen*/
      /* *************************************************/

  if (OM0BM001.OM0BMPAL is modified) /* price for all sizes*/
    set OM0BM001.OM0BMPAL modified;
  end

  if (OM0BM001.OM0BMPAD is modified) /* price adjustment*/
    set OM0BM001.OM0BMPAD modified;
  end

  if (OM0BM001.OM0BWMOR is modified) /* more sizes*/
    set OM0BM001.OM0BWMOR modified;
  end

  if (OM0BM001.XWHCD is modified) /* warehouse*/
    set OM0BM001.XWHCD modified;
  end

  if (OM0BM001.OM0BMNDT is modified) /* need date*/
    set OM0BM001.OM0BMNDT modified;
    OM0BW01.OM0BWCND = "Y";
  end

  if (OM0BM001.XDSCD is modified) /* direct ship code*/
    set OM0BM001.XDSCD modified;
  end

  if (OM0BM001.OP1BOFL is modified) /* backorder flag*/
    set OM0BM001.OP1BOFL modified;
  end

  if (OM0BM001.XOWCD is modified) /* owner group code*/
    set OM0BM001.XOWCD modified;
    OM0BW01.OM0BW-OWNER-GROUP-CHANGE-FLAG = "Y";
  end

  if (OM0BM001.OP2CGPCD is modified) /* coordinate group*/
    set OM0BM001.OP2CGPCD modified;
  end

  if (OM0BM001.OP2KSTYF is modified) /* key style*/
    set OM0BM001.OP2KSTYF modified;
  end


  if (OM0BM001.OP2GTSZF is modified) /* gut size*/
    set OM0BM001.OP2GTSZF modified;
  end


      /* *************************************************/
      /* * check all 5 pack handling codes for change entered*/
      /* *************************************************/

  sysVar.arrayIndex = 1;

  while (sysVar.arrayIndex < 6)
    if (OM0BM001.XHDCD[sysVar.arrayIndex] is modified) /* handling code*/
      set OM0BM001.XHDCD[sysVar.arrayIndex] modified;
    end
    if (OM0BM001.XHDCHG[sysVar.arrayIndex] is modified) /* handling charge*/
      set OM0BM001.XHDCHG[sysVar.arrayIndex] modified;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end


      /* ********************************************************/
      /* * 08/12/92 JLoyer - set bk-sesns modified if modified **/
      /* ********************************************************/

  if (OM0BM001.XBK-BK-SESN-CD is modified /* if bk-sesn-cd modified*/
   || OM0BM001.OM0BM-OP-BK-YR-YY is modified) /* or op-bk-yr modified*/
    set OM0BM001.XBK-BK-SESN-CD modified; /* set bk-sesn-cd modified*/
    set OM0BM001.OM0BM-OP-BK-YR-YY modified; /* set op-bk-yr modified*/
  end


      /* *************************************************/
      /* * continue with bottom of screen*/
      /* *************************************************/

  if (OM0BM001.OP2SSTYN is modified) /* substitute style*/
    set OM0BM001.OP2SSTYN modified;
  end

  if (OM0BM001.OP2SCLCD is modified) /* substiture color*/
    set OM0BM001.OP2SCLCD modified;
  end

  if (OM0BM001.OP2SDMCD is modified) /* substitute dimension*/
    set OM0BM001.OP2SDMCD modified;
  end

  if (OM0BM001.OP2SUBQT is modified) /* substitute quantity*/
    set OM0BM001.OP2SUBQT modified;
  end

  if (OM0BM001.OP2FSTFL is modified) /* forecast flag*/
    set OM0BM001.OP2FSTFL modified;
  end



end // end OM0BS62

// control scr2,write action,flow
Function OM0BS64()



      /* ********************************************************/
      /* * flow -*/
      /* *     screen 2*/
      /* * or- verify sizes/qty -*/
      /* *       if bad verify - re-show screen*/
      /* *     write record*/
      /* *********************************************************/

  TA1REC.TA1LOCAT[2] = "OM0BS64"; /* error diag-group name*/


  if (OM0BW01.OM0BWMOR == "Y") /* if have more sizes,*/
    OM0BW01.OM0BWSCR = 2; /* get set to show screen 2*/
    set OM0BM001.OP3ONOQT[1] cursor, normal;
    OM0BS62(); /* re-set mdt's for chnd flds*/
    OM0BW01.OM0BW-MOVE-QUANTITY-FLAG = "Y";
                                           /* causes quantities to be moved*/
                                  /* from op3rec to map for duped sizes*/
    OM0BS51(); /* re-build sizes on map*/
    exit stack; /* go back to show screen 2*/
  end


  OM0BS6C(); /* edit 40 sizes for active*/

  if (OMAREC.OMAERR == "Y")
    exit stack;
  end

  OM0BS6E(); /* ok, write records*/

   /* 08/07/89  bypass hot model logic if promo division or*/
             /* product is not first quality*/

  if (OP1REC.XDVCD == "03" /* if promo division*/
   || OMWREC.XQACD != "01") /* or not first quality*/
      /* next sentence         bypass hot model logic*/
  else
    if (SYCREC.OPZHMIND == "Y")
      if (OM0BW01.OM0BWELI == "N"
       && OM0BW01.OM0BWAUT == "Y")
        OM0BSOV();
      end
    end
  end

  OM0BS89(); /* transfer flow to other applic*/



end // end OM0BS64

// pf21-activate sizes, full rnge
Function OM0BS65()



      /* ********************************************************/
      /* * re-set w-s map size range to be full size range     **/
      /* * convert valid size to active size for revu & duplict**/
      /* ********************************************************/

  TA1REC.TA1LOCAT[2] = "OM0BS65"; /* error diag-group name*/


  OM0BW01.OM0BWSMF = OM0BW01.OM0BWSZF;
                                   /* set first map size=full rnge*/
  OM0BW01.OM0BWSML = OM0BW01.OM0BWSZL;
                                   /* set last map size=full range*/

  OM0BW01.OM0BWSCR = 1; /* re-set to screen 1*/

  OM0BW01.OM0BW-MOVE-QUANTITY-FLAG = "Y";
                                            /* allow quantities to be moved*/
                                  /* moved to map from op3rec*/
  /*  */
  if (OMWREC.OMWDUPSZ == "D") /* duplicated sizes from prev prod*/
    OM0BS6F(); /* convert valid sizes to active*/
  end

  OM0BS51(); /* move sizes to map*/



end // end OM0BS65

// put size prices on the map
Function OM0BS66()



      /* ********************************************************/
      /* * loop 20 sizes, move price to map*/
      /* **/
      /* * note - om0bwsmf/l were set before got here*/
      /* *        could be reqstd range, full rnge or actual rnge*/
      /* ********************************************************/

  TA1REC.TA1LOCAT[2] = "OM0BS66"; /* error diag - group name*/


  if (OM0BW01.OM0BWSCR == 1) /* if on screen 1*/
    OM0BWSBR = OM0BW01.OM0BWSMF; /* find first size to move*/
  else
    OM0BWSBR = OM0BW01.OM0BWSB2; /* screen 2 starting size*/
  end


  OM0BWSBM = 1; /* map index = 1 to start*/

  while (OM0BWSBM < 21 /* for up to 20 sizes*/
   && OM0BWSBR < 41 
   && OM0BWSBR <= OM0BW01.OM0BWSML) /* until end of chosen range*/
    if (OP3REC.OP3SZAFL[OM0BWSBR] == "Y")
      OM0BS53(); /* move size price and * flag to map*/
      OM0BWSBM = OM0BWSBM + 1; /* next map column*/
    end
    OM0BWSBR = OM0BWSBR + 1; /* try next size in record*/
  end



end // end OM0BS66

// get nil price type codes
Function OM0BS6A()




  KUCREC.KUCCOID = OP1REC.KUCCOID;
  OM0BS9C(); /* read the customer rec (kucrec)*/

     /* save the account class of the company in case kucrec*/
     /* later contains info on the comp nbr rather than the co.*/

  OM0BW01.XAUCD = KUCREC.XAUCD;


   /* *  for nike international orders, price type code can*/
   /* *  come from several sources:*/
   /* *  - if the customer is a nil distributor*/
   /* *        the price type code comes from nimrec*/
   /* *  - if the customer is nike owned or exports*/
   /* *    and the order type is sample*/
   /* *    and it is a direct ship or from the nil warehse*/
   /* *        the price type code comes from the invoicing*/
   /* *        specialty table using the account class of the*/
   /* *        company as part of the key*/
   /* *  - if the customer is nike owned or exports*/
   /* *    and the order type is sample*/
   /* *    and the item comes from a regular warehouse (not 12)*/
   /* *        the price type code comes from the invoicing*/
   /* *        specialty table using the account class of the*/
   /* *        comp number as part of the key*/
   /* *  - if the customer is nike owned or exports*/
   /* *    and the order type is not a sample*/
   /* *    and the comp number is entered*/
   /* *        the price type code comes from the invoicing*/
   /* *        specialty table using the account class of the*/
   /* *        comp number as part of the key*/
   /* *  - if the customer is nike owned or exports*/
   /* *    and the order type is not sample*/
   /* *    and the comp number is not entered*/
   /* *        the price type code comes from the invoicing*/
   /* *        specialty table using the account class of the*/
   /* *        company as part of the key*/


  if (OM0BW01.XAUCD == "33") /* if the customer is a nil distrib*/
    OM0BS9D(); /* get price type from nimrec*/
  else /* otherwise*/
    if (OM0BW01.XAUCD == "31" /* if cust acct class is nike owned*/
     || OM0BW01.XAUCD == "32") /* or exports get it from inv specl tb*/
      if (OP1REC.XOBCD == "S1") /* if order type is sample*/
        if (OP1REC.XWHCD == " ") /* if direct ship*/
          OM0BS6O(); /* use cust acct class in key*/
        else /* otherwise*/
          OM0BS6N(); /* use comp acct class in key*/
        end
      else /* if not a sample*/
        if (OP1REC.OP1CMPNB == 0) /* if comp nbr not entered*/
          OM0BS6O(); /* use cust acct class in key*/
        else /* otherwise*/
          OM0BS6N(); /* use comp acct class in key*/
        end
      end
    else /* all else (xaucd ne 31,32,or33)*/
      OM0BW01.OM0BWZPR = "Y"; /* give the item a zero price*/
    end
  end



end // end OM0BS6A

// clean-up sizes before write
Function OM0BS6C()



      /* check each size, zero quantity = inactive size*/

  TA1REC.TA1LOCAT[2] = "OM0BS6C"; /* error diag group name*/

  if (OP3REC.OP2TONOQ == 0) /* no active sizes*/
    converseLib.validationFailed(153); /* reject or enter quantity*/
    OMAREC.OMAERR = "Y"; /* exit*/
     /* MOVE 'Y' TO OM0BW01.OM0BWREJ;*/
    exit stack;
  end

  move OM0BWSZF to OM0BWSBR withV60Compat; /* loop full size range*/

  while (OM0BWSBR < 41
   && OM0BWSBR <= OM0BWSZL)
    if (OP3REC.OP3SZAFL[OM0BWSBR] == "Y") /* check active sizes*/
      if (OP3REC.OP3ONOQT[OM0BWSBR] == 0) /* zero qty inactivates*/
        OP3REC.OP3SZAFL[OM0BWSBR] = "N"; /* the size*/
      end
    end
    OM0BWSBR = OM0BWSBR + 1;
  end




end // end OM0BS6C

// add/updt szrun,do sub-ord tots
Function OM0BS6E()


      /* ********************************************************/
      /* * put (new) nike sub-order into key*/
      /* * if adding product, build key-product line item #,*/
      /* *    then add.*/
      /* **/
      /* * also write op1rec with changes and create the needed*/
      /* * tag records.*/
      /* **/
      /* * SET A 'NEW PRODUCT ADDED' FLAG TO FORCE AN XFER TO AB09*/
      /* *ON CUSTOM LOGO ORDERS...          SSJ(5/13/93)*/
      /* ********************************************************/

  TA1REC.TA1LOCAT[2] = "OM0BS6E"; /* error diag group name*/


      /* ********************************************************/
      /* * put nike sub-order code into key*/
      /* ********************************************************/

  OP3REC.OP1NORID = OP1REC.OP1NORID;

      /* ************************************/
      /* * put in current date/time stamp*/
      /* ************************************/

  OP3REC.ZZZCHGDT = OMAREC.OMACDT;
  OM0BW03.ZZZCHGDT = OMAREC.OMACDT;
  OP3REC.ZZZSDT = OP3REC.ZZZCHGDT; /* add times = chg times*/
  OP3REC.OP2LNINB = OMWREC.OMWLNITX; /* set up new key*/
  OP3REC.OP2CPLNB = OMWREC.OMWLNITX; /* po line number*/

  OM0BW01.OM0BWTM1 = VGVar.currentFormattedTime;
  OM0BW01.OM0BWTHL = OM0BW01.OM0BWTHF;
  OM0BW01.OM0BWTML = OM0BW01.OM0BWTMF;
  OM0BW01.OM0BWTSL = OM0BW01.OM0BWTSF;
  OP3REC.ZZZCHGTM = OM0BW01.OM0BWTM3; /* hhmm binary*/
  OM0BW03.ZZZCHGTM = OM0BW01.OM0BWTM3; /* hhmm binary*/
  OP3REC.ZZZSTM = OP3REC.ZZZCHGTM;

      /* **********************************************/
      /* * add units and dollars to sub-order array*/
      /* * use current sub-order, write or add header.*/
      /* **********************************************/

   /* write the op3rec*/
  /*  */
  /* Maintenance history is recorded any time quantities are added 30*/
  /* or more past the cutoff date*/
  /*  */
  if (OM0BW01.OM0BW-DAYS-PAST-CUTOFF >= 30)
    OP3REC.XOMCD[1] = OM0BM001.XOMCD;
    OP3REC.OP2OMQTY[1] = OP3REC.OP2TONOQ;
    OP3REC.OP2OMDT[1] = OP3REC.ZZZCHGDT;
    OP3REC.OP1MTREP[1] = OMWREC.OP1MTREP;
  end
  /*  */
  /* additional quantities are not recorded as original if*/
  /* they are added 60 days or more after the cutoff date.*/
  /*  */
  if (OM0BW01.OM0BW-DAYS-PAST-CUTOFF >= 60)
    sysVar.arrayIndex = 0;
    while (sysVar.arrayIndex < 40)
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
      OP3REC.OP3ORGQT[sysVar.arrayIndex] = 0;
    end
  end
  /*  */
  OM0BS9A(); /* check for dup for sub-ord*/

  /* IF OM0BW-SPLIT-FL EQ 'Y';        /* slarse - New sub-ord*/
  /* OM0BS-CALL-OZ2140;            /* change key on originals db*/
  /* END;*/
  /* MOVE 'N' TO OM0BW-SPLIT-FL;*/

  if (OM0BW01.OM0BWBDF == "DS"
   || OM0BW01.OM0BWBDF == "DC"
   || OM0BW01.OM0BWBDF == "DX"
   || OM0BW01.OM0BWBDF == "DR"
   || OM0BW01.OM0BWBDF == "DN")
    OP3REC.OPRBNOID = OM0BW04.OP1NORID;
    OM0BSUB();
    OM0BS-CALL-OZ2090();
  end

  OM0BW01.OM0BWEZ1 = VGVar.currentShortGregorianDate; /* set up date format for compare*/
  OM0BW01.OM0BWDT1 = OP1REC.OP1CUNDT; /* yymmdd*/


     /* call op1610 to decrement, increment all orders that*/
     /* display availability.  originally, op02 was called to*/
     /* decrement and allocate a/o orders with today's need date,*/
     /* however, as of 12/01/88, the users requested that at once*/
     /* order types are not allocated thru om0b or om0b.*/
     /* the original code was retained as close to working for*/
     /* possible policy changes.*/

   /* IF om0bW01.om0bWDT3 EQ om0bW01.om0bWEZ1; if need date = toda*/
   /* next sentence*/
   /* ELSE ;*/
    /* OM0bS6k                       ; load opprec pass rec to ca*/
   /* END ;*/

     /* call op1610 to decrement, increment, or allocate*/

  if (OM0BW01.OM0BWDAV == "Y") /* display availability*/
    OM0BS6K(); /* load opprec*/
    call "OP1610" (OPPREC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    OM0BS6L(); /* process return code*/
  end

  if (OM0BW01.OM0BWBDF == "BC"
   || OM0BW01.OM0BWBDF == "BS"
   || OM0BW01.OM0BWBDF == "BX"
   || OM0BW01.OM0BWBDF == "BN")
    OP3REC.OP2TDRWQ = 0;
  end



  OM0BS90(); /* go add record*/

  OM0BS-CALL-OZ2090(); /* call oz2090 to add sz chg rsn recs*/

  if (OP1REC.XPACD == "MS" || 
  OP1REC.XPACD == "CU") /* 04/10/98*/
    OM0BS-CHK-PREPKS(); /**/
  end

  OMWREC.OMWPKCHF = "Y"; /* prepack change flag*/

   /* write a record to dorder.vzpric01 (oebrec) if an int'l*/
   /* apparel or footwear futures order whose product is in dev.*/

  if (OP1REC.XDVCD == "02") /* if a nil order*/
    if (OBIREC.XLCCD == "05") /* if the product's life cycle = 05*/
      if (OP1REC.XOTCD == "31" /* and a footwear*/
       || OP1REC.XOTCD == "36") /* or apparel futures order*/
        OM0BS9F(); /* write a tag record*/
      end
    end
  end




   /* add up dollars and units for credit checking.*/
   /* 6/15/89 - commented 4 lines below.*/

   /* IF XOTTBL.XOTFUTRF(OM0BWSBO) EQ 'Y';*/
    /* AND OP1REC.XCSCD GT '00';*/
  OMWREC.OMWONOVC = OMWREC.OMWONOVC + OP3REC.OP2LNIVL;
  OMWREC.OMWONOQC = OMWREC.OMWONOQC + OP3REC.OP2TONOQ;
   /* MOVE 'Y' TO OMWREC.OMWCRCKF;*/
   /* END ;*/

    /* 6/15/89 - check if new sub-order is being created for*/
             /* added product. if so, init credit related*/
             /* op1rec fields and use credit reason code of*/
             /* 4 when calling credit, else do not init and*/
             /* use a credit reason code of 3.*/

  if (OM0BW01.OM0BWNSF == "Y") /* if just created a new sub-order*/
    CC1REC.CC1CLRSN = 4; /* credit reason code for new sub-order*/
    OP1REC.XCHCD[1] = "00"; /* refer to credit reason*/
    OP1REC.XCHCD[2] = "00"; /* refer to credit reason*/
    OP1REC.XCHCD[3] = "00"; /* refer to credit reason*/
    OP1REC.XCSCD = "00"; /* credit status code*/
    OP1REC.OP1CSADT = 0; /* credit status add date*/
    OP1REC.OP1CSATM = 0; /* credit status add time*/
    OP1REC.OP1DCHLD = 0; /* days credit hold*/
    OP1REC.OP1CKAMT = 0; /* credit check amt*/
    OP1REC.OP1CCKOQ = 0; /* credit check qty*/
    OP1REC.OP1PCSCD = "00"; /* previous credit status code*/
    OP1REC.OP1PCSDT = 0; /* previous credit status date*/
    OP1REC.OP1PCSTM = 0; /* previous credit status time*/
    OP1REC.OP1CRLMP = " "; /* last credit check pgm*/
    OP1REC.OP1CRLMR = " "; /* last maint rep*/
  else
    CC1REC.CC1CLRSN = 3; /* add product credit reason code*/
  end


  OP1REC.OP1OVALU = OP1REC.OP1OVALU + OP3REC.OP2LNIVL;
  OP1REC.OP1OTUNT = OP1REC.OP1OTUNT + OP3REC.OP2TONOQ;

    /* if a product added to a suborder has pack handling codes*/
    /* the special handling flag on the order header is set on*/
  /*  */
  OMAREC.OMASUB = 1;
  while (OMAREC.OMASUB < 6)
    if (OP3REC.XHDCD[OMASUB] != " ")
      OP1REC.OP1SPHDF = "Y";
    end
    OMAREC.OMASUB = OMAREC.OMASUB + 1;
  end

     /* 6/15/89 - call to credit for newly added product.*/

  OM0BW01.OM0BWOVV = OP3REC.OP2TONOQ * OP3REC.OP2AUPRC; /* value variance*/
  CC1REC.CC1PVALU = OM0BW01.OM0BWOVV; /* value variance*/
  CC1REC.CC1PUNTS = OP3REC.OP2TONOQ; /* qty variance*/
  CC1REC.CC1AVALU = 0; /* zero out allocated value*/
  CC1REC.CC1AUNTS = 0; /* zero out allocated units*/
  CC1REC.CC1PGMNM = "OM0B"; /* program name*/
  CC1REC.CC1RTNCD = 0; /* clear return code*/
  CC1REC.CC1RTNMA = " "; /* clear message*/

  call "CC1070" (SQLCA, OP1REC, CC1REC) {isNoRefresh = yes, isExternal = yes};

  OP1REC.ZZZCHGDT = OMAREC.OMACDT;
  OP1REC.ZZZCHGTM = OM0BW01.OM0BWTM3;

   /* now see if need to add header or update the header*/

  if (OM0BW01.OM0BWNSF == "Y") /* if just created a new sub-order*/
    OM0BS7G(); /* go add associated sub-order records*/
    OP1REC.ZZZSDT = OP1REC.ZZZCHGDT;
    OP1REC.ZZZSTM = OP1REC.ZZZCHGTM;
    call "IO0430" ("A ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      if (OP1REC.XBDCD == "1") /* CUSTOMER BULK ORDER*/
        OM0BS-INSERT-BULKS(); /* INSERT DORDB.VBULKS01 RECORD*/
      end
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VORHDR01";
      TA1REC.TA1LOCAT[1] = "A ";
      TA1REC.TA1LOCAT[2] = "OM0BS6E";
      TA1REC.TA1LOCAT[3] = "IO0430";
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      OM0BS02(); /* abend*/
    end
  else /* change a sub-order*/
    call "IO0430" ("U ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      /* Tcs include begin 08/25/98*/
      set VBULKS02 empty;
      set OBFREC empty;
      set SQLCA empty;
      VBULKS02.OP1PARTN = OP1REC.OP1PARTN;
      VBULKS02.OP1CUOID = OP1REC.OP1CUOID;
      VBULKS02.OP1NORID = OP1REC.OP1NORID;
      OBFREC.OBFTASK = "S ";

      OM0BS-CHECK-UPDA(); /* for updating corresp vbulk recs*/
      /* Tcs include end   08/25/98*/

      OMWREC.OMWCHCTF = "N"; /* no change count error*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* change count error*/
        OMWREC.OMWCHCTF = "Y"; /* change count flag*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* backout op3rec just added*/
        OM0BS89(); /* exit appl*/
      else
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VORHDR01";
        TA1REC.TA1LOCAT[1] = "U ";
        TA1REC.TA1LOCAT[2] = "OM0BS6E";
        TA1REC.TA1LOCAT[3] = "IO0430";
        TA1REC.TA1TBLKE = OP1REC.OP1KEY;
        OM0BS02(); /* abend*/
      end
    end
  end

  if (OM0BW-SPLIT-FL == "Y") /* slarse - New sub-ord*/
    OM0BS-CALL-OZ2140(); /* change key on originals db*/
  end
  OM0BW-SPLIT-FL = "N";

   /* done with add, all records updated so release resources.*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

   /* set 'NEW PRODUCT' flag forcing xfer to 'AE09' for cust logo(SSJ)*/
  OM0BW01.OM0BW-NEW-PROD-ADDED = "Y";

    /* do what ever demand reporting is needed.*/

  OM0BS82();




   /* now that records are all written, call order status*/
   /* setter routine. don't call if order is open, 'op'.*/


  if (OP1REC.XOSCD != "OP")
    set OMEREC empty; /* initialize omerec return code*/
    OMWREC.OP1GROUP = OP1REC.OP1GROUP;
    call "OM0N" (OMWREC, OMEREC);
    if (OMEREC.OME-RETURN-CD != "00") /* check om0r return code*/
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
      XSPF4(); /* master menu*/
      exit program; /* master menu failure*/
    end
  end





end // end OM0BS6E

// init sizes on old szrun(revu)
Function OM0BS6F()
  /* this routine is to find prices*/


  TA1REC.TA1LOCAT[2] = "OM0BS6F"; /* error diag group name*/


  OM0BW01.OM0BWSBR = OM0BW01.OM0BWSZF;

  while (OM0BWSBR < 41 /* ; loop full size range*/
   && OM0BWSBR <= OM0BWSZL)
    if (OP3REC.OP3SZAFL[OM0BWSBR] == "V")
      OP3REC.OP3SZARY[OM0BWSBR] = OM0BW01.OP3SZARY;
                                   /* clear array line*/
      OM0BS24(); /* set-up size price*/
      OP3REC.OP3SZAFL[OM0BWSBR] = "Y";
    end
    if (OP3REC.OP3SZAFL[OM0BWSBR] == "Y")
      OM0BS25(); /* set price vary flag*/
    end
    OM0BWSBR = OM0BWSBR + 1;
  end



end // end OM0BS6F

// edit warehouse genl prod class
Function OM0BS6G()



      /* customer/order gpc must match 1 gpc on warehouse table*/

  TA1REC.TA1LOCAT[2] = "OM0BS6G"; /* error diag group name*/


  if (OP1REC.XGPCD == XWHTBL.XGPCD1[sysVar.arrayIndex]) /* match gpc*/
    OM0BW01.OM0BWFND = "Y";
    return;
  end

  if (OP1REC.XGPCD == XWHTBL.XGPCD2[sysVar.arrayIndex]) /* match gpc*/
    OM0BW01.OM0BWFND = "Y";
    return;
  end

  if (OP1REC.XGPCD == XWHTBL.XGPCD3[sysVar.arrayIndex]) /* match gpc*/
    OM0BW01.OM0BWFND = "Y";
    return;
  end

  if (OP1REC.XGPCD == XWHTBL.XGPCD4[sysVar.arrayIndex]) /* match gpc*/
    OM0BW01.OM0BWFND = "Y";
    return;
  end

  if (OP1REC.XGPCD == XWHTBL.XGPCD5[sysVar.arrayIndex]) /* match gpc*/
    OM0BW01.OM0BWFND = "Y";
    return;
  end

  if (OP1REC.XGPCD == XWHTBL.XGPCD6[sysVar.arrayIndex]) /* match gpc*/
    OM0BW01.OM0BWFND = "Y";
    return;
  end

  if (OP1REC.XGPCD == XWHTBL.XGPCD7[sysVar.arrayIndex]) /* match gpc*/
    OM0BW01.OM0BWFND = "Y";
    return;
  end



end // end OM0BS6G

// edit price variance
Function OM0BS6H()



  TA1REC.TA1LOCAT[2] = "OM0BS6H"; /* error diag group name*/


      /* note - om0bwpct is order type percent variance allowed*/

  if (OM0BW01.OM0BWPRO <= OM0BW01.OM0BWPRN) /* compare old to new*/
    OM0BW01.OM0BWPRO = OM0BW01.OM0BWPRO + OM0BW01.OM0BWPCT * OM0BW01.OM0BWPRO;
    if (OM0BW01.OM0BWPRO < OM0BW01.OM0BWPRN) /* if old + % < new*/
      OMAREC.OMAERR = "Y";
      OM0BW01.OM0BWFND = "Y";
    end
  else
    OM0BW01.OM0BWPRO = OM0BW01.OM0BWPRO - OM0BW01.OM0BWPCT * OM0BW01.OM0BWPRO;
    if (OM0BW01.OM0BWPRO > OM0BW01.OM0BWPRN) /* if old - % > new*/
      OMAREC.OMAERR = "Y";
      OM0BW01.OM0BWFND = "Y";
    end
  end


end // end OM0BS6H

// chg shipdate(needdt),redo pric
Function OM0BS6I()



      /* convert mdy date to cymd,*/
      /* re-calc size prices using new need date*/

  TA1REC.TA1LOCAT[2] = "OM0BS6I"; /* error diag group name*/


  if (XOTTBL.XOTPRCDT[OM0BWSBO] == "S" /* price eff date=ship date*/
   || XOTTBL.XOTPRCDT[OM0BWSBO] == "N") /* price eff date=need date*/
    OM0BW01.OM0BWPED = OM0BW01.OP1CUNDT; /* re-set price effec.date*/
    OM0BW01.OM0BWSBR = 1;
    while (OM0BW01.OM0BWSBR < 41
     && OM0BW01.OM0BWSBR <= OM0BW01.OM0BWSZL)
      OM0BS24(); /* re-do prices, use new eff date*/
      OM0BS25(); /* set price vary flag in op3rec*/
      OM0BW01.OM0BWSBR = OM0BW01.OM0BWSBR + 1;
    end
  end



end // end OM0BS6I

// load op1610 pass record
Function OM0BS6K()

  OPPREC.OPPDECAV = "Y";
  OPPREC.OP1CUNDT = OM0BW01.OP1CUNDT; /* need date*/
  OPPREC.XDSCD = OP1REC.XDSCD;
  OPPREC.XWHCD = OP1REC.XWHCD;

  if (SYCREC.XPRCD == "22") /* if a crested product*/
    OPPREC.SY1STNBR = SYCREC.SY1BSTNB; /* decrement blank style*/
    OPPREC.SY2CLRID = SYCREC.SY2BCLCD; /* and blank color*/
    if (OP1REC.XDSCD == "1") /* if a crested direct ship*/
      OPPREC.XDSCD = " "; /* direct ship defaults to ' '*/
      if (OP1REC.XDZ-DATA-DIST-CD == "CA") /* added for Canada*/
        OPPREC.XWHCD = "42"; /* warehouse defaults to '51'*/
      else
        OPPREC.XWHCD = "51"; /* warehouse defaults to '51'*/
      end
    end
  else
    OPPREC.SY1STNBR = OP3REC.SY1STNBR; /* decrement finished style*/
    OPPREC.SY2CLRID = OP3REC.SY2CLRID;
  end

    /* apparel direct ship use warehouse 51*/

  if (OP3REC.XGPCD == "03" /* apparel*/
   && OP1REC.XDSCD == "1") /* direct ship*/
    OPPREC.XWHCD = "51"; /* warehouse defaults to '51'*/
    OPPREC.XDSCD = " "; /* direct ship defaults to ' '*/
  end

  /* if the need date is in the past we used today's date*/
  /* to display availability, and we'll use today's date*/
  /* to decrement it.  see note in sga about why*/
  /*  */
  if (OPPREC.OP1CUNDT < OMAREC.OMACDT)
    OPPREC.OP1CUNDT = OMAREC.OMACDT;
  end

  OPPREC.XDMCD = OP3REC.XDMCD;
  OPPREC.XOTCD = OP1REC.XOTCD;
  OPPREC.XOCCD = OP1REC.XOCCD;
  OPPREC.XBCCD = OP1REC.XBCCD;
  OPPREC.XGPCD = OP3REC.XGPCD;
  OPPREC.XQACD = OP3REC.XQACD;
  OPPREC.XOWCD = OP3REC.XOWCD;
  OPPREC.XSDCD = OP3REC.PC2INSEG;

   /* MOVE OP3REC.XEGCD TO OPPREC.XSACD; avail still using*/
  OPPREC.XSACD = "000"; /* '000' as of 12/90*/

  OPPREC.XPGCD = OP3REC.XPGCD;
  OPPREC.XUMCD = OP3REC.XUMCD;
  OPPREC.XLCCD = OBIREC.XLCCD;

  sysVar.arrayIndex = 0;

  while (sysVar.arrayIndex < 40)
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
    OPPREC.OP3SZAFL[sysVar.arrayIndex] = OP3REC.OP3SZAFL[sysVar.arrayIndex];
    OPPREC.OPPQTY[sysVar.arrayIndex] = OP3REC.OP3ONOQT[sysVar.arrayIndex];
  end



end // end OM0BS6K

// process non 00 rtn from op1610
Function OM0BS6L()
  if (OPPREC.OPPRTNCD == 01)
    converseLib.validationFailed(166); /* qty requested exceeds qty avail*/
    exit stack; /* return to map with msg*/
  else
    if (OPPREC.OPPRTNCD == 02 /* -911 deadlock*/
     || OPPREC.OPPRTNCD == 03 /* bad key passed*/
     || OPPREC.OPPRTNCD == 04)
      TA1REC.TA1DBASE = "DAVAIL";
      TA1REC.TA1TBLVU = "HDR QTY";
      TA1REC.TA1LOCAT[1] = OPPREC.OPPLOC1;
      TA1REC.TA1LOCAT[2] = OPPREC.OPPLOC2;
      TA1REC.TA1LOCAT[3] = OPPREC.OPPLOC3;
      TA1REC.TA1LOCAT[4] = "OM0BS6L ";
      OM0BS6M();
      TA1REC.TA1TBLKE = OM0BW01.OM0BWT1;
      OM0BS02(); /* abend routine*/
    else
      if (OPPREC.OPPRTNCD == 05) /* tried ten times to update*/
        converseLib.validationFailed(010); /* database busy, please try again*/
        exit stack; /* return to map with msg*/
      end
    end
  end

end // end OM0BS6L

// load ta1rec translated key
Function OM0BS6M()



  OM0BW01.OM0BWTK1 = OP1REC.OP1CUOID;
  OM0BW01.OM0BWTK2 = OP1REC.OP1NORID;
  OM0BW01.OM0BWTK3 = OM0BW01.OM0BWDT1;
  OM0BW01.OM0BWTK4 = OPPREC.SY1STNBR;
  OM0BW01.OM0BWTK5 = OPPREC.SY2CLRID;
  OM0BW01.OM0BWTK6 = OPPREC.OPPRTNCD;



end // end OM0BS6M

// nil prc typ cd based on comp
Function OM0BS6N()


    /* **  get the price type code from the invoicing specialty*/
    /* **  table based on the comp number*/


   /* read the company record of the comp nbr to get its acct cls*/

  KUCREC.KUCCOID = OP1REC.OP1CMPNB; /* get kucrec using comp nbr*/
  OM0BS9C(); /* read company rec (kucrec)*/
  IVEREC.XAUCD = KUCREC.XAUCD; /* put acct class in key*/

    /* get the account type of the comp nbr & using it and the*/
    /* acct class as part of the key, get the price type from the*/
    /* invoicing specialty table*/


  sysVar.arrayIndex = 1;
  if (KUCREC.XAUCD in XAUTBL.XAUCD from sysVar.arrayIndex)
    IVEREC.XATCD = XAUTBL.XATCD[sysVar.arrayIndex]; /* put acct type in key*/
    OM0BS9G(); /* read inv specl tbl*/
  else /* if no account type*/
    OM0BW01.OM0BWZPR = "Y"; /* give the item a zero price*/
  end



end // end OM0BS6N

// nil price typ cd based on co.
Function OM0BS6O()


    /* **  get the price type code from the invoicing specialty*/
    /* **  table based on the company number*/


    /* put the account class of the company in the key*/

  IVEREC.XAUCD = OM0BW01.XAUCD;


    /* get the account type of the company & using it and the*/
    /* acct class as part of the key, get the price type from the*/
    /* invoicing specialty table*/


  sysVar.arrayIndex = 1;
  if (OM0BW01.XAUCD in XAUTBL.XAUCD from sysVar.arrayIndex)
    IVEREC.XATCD = XAUTBL.XATCD[sysVar.arrayIndex]; /* put acct type in key*/
    OM0BS9G(); /* read inv specl tbl*/
  else /* if no account type*/
    OM0BW01.OM0BWZPR = "Y"; /* give the item a zero price*/
  end



end // end OM0BS6O

// control edits-prod info,bottom
Function OM0BS70()



      /* *********************************************************/
      /* * control all editing for bottom half fields on the map*/
      /* * the fields are edited in reverse order so that the*/
      /* * cursor and error message will appear for the first*/
      /* * field in error on the map.*/
      /* * all fields in error will be highlighted.*/
      /* *********************************************************/

  TA1REC.TA1LOCAT[2] = "OM0BS70"; /* error diag group name*/


  set OM0BM001.SY1SSTNM initialAttributes; /* reset fields used for mesg*/
  set OM0BM001.SY2CLRAB initialAttributes;


  if (OM0BM001.OP2FSTFL is modified) /* forecast flag*/
    OM0BS71();
  else
    set OM0BM001.OP2FSTFL initialAttributes;
  end

  if (OM0BM001.OP2SSTYN is modified /* substitute product*/
   || OM0BM001.OP2SCLCD is modified 
   || OM0BM001.OP2SDMCD is modified)
    OM0BS95();
  else
    set OM0BM001.OP2SSTYN initialAttributes;
    set OM0BM001.OP2SCLCD initialAttributes;
    set OM0BM001.OP2SDMCD initialAttributes;
  end

  if (OM0BM001.OP2SUBQT is modified) /* substitute quantity*/
    OM0BS72();
  else
    set OM0BM001.OP2SUBQT initialAttributes;
  end

  OMAREC.OMASUB = 1; /* pack handling codes*/
  while (OMAREC.OMASUB < 6)
    if (OM0BM001.XHDCD[OMASUB] is modified
     || OM0BM001.XHDCHG[OMASUB] is modified)
      OM0BS73();
    else
      set OM0BM001.XHDCD[OMASUB] initialAttributes;
      set OM0BM001.XHDCHG[OMASUB] initialAttributes;
      set OM0BM001.OM0BMHTP[OMASUB] initialAttributes;
    end
    OMAREC.OMASUB = OMAREC.OMASUB + 1;
  end

    /* **************************************************************/
    /* * 08/12/92 JLoyer - if the need date or warehouse (for NIL) **/
    /* * were modified, the edit for bk-sesns will be done in S7C. **/
    /* **************************************************************/

  if (OM0BM001.XBK-BK-SESN-CD is modified    /* booking season code*/
   || OM0BM001.OM0BM-OP-BK-YR-YY is modified /* booking season year*/
   || OM0BW01.OM0BW-MULTI-BK-SESN-MSG == "Y") /* or display multi bk-sesns*/
    if (OP1REC.XDVCD == "01") /* if domestic*/
      if (OM0BM001.OM0BMNDT not modified) /* if need date not mod*/
        OM0BS-EDIT-BK-SESN(); /* edit booking seasons*/
      end /**/
    else /* else*/
      if (OP1REC.XDVCD == "02") /* if International*/
        if (OM0BM001.OM0BMNDT not modified /* if need date not mod*/
         && OM0BM001.XWHCD not modified)   /* and warehouse not mod*/
          OM0BS-EDIT-BK-SESN(); /* edit booking seasons*/
        end /* (ndt or whs chgs cause*/
      end /* a subord split which*/
    end /* may impact Int'l*/
  end /**/


  if (OM0BM001.OP2GTSZF is modified) /* gut size*/
    OM0BS74();
  else
    set OM0BM001.OP2GTSZF initialAttributes;
  end


  if (OM0BM001.OP2KSTYF is modified) /* key style*/
    OM0BS75();
  else
    set OM0BM001.OP2KSTYF initialAttributes;
  end

  if (OM0BM001.OP2CGPCD is modified) /* coordinate group*/
    OM0BS76();
  else
    set OM0BM001.OP2CGPCD initialAttributes;
  end

  if (OM0BM001.OP1BOFL is modified) /* backorder flag*/
    OM0BS77();
  else
    set OM0BM001.OP1BOFL initialAttributes;
  end

  if (OM0BM001.XDSCD is modified) /* direct ship code*/
    OM0BS7E();
  else
    set OM0BM001.XDSCD initialAttributes;
  end

  if (OM0BM001.OM0BMNDT is modified) /* need date*/
    OM0BS78();
  else
    set OM0BM001.OM0BMNDT initialAttributes;
  end

  if (OMAREC.OMAERR == "N")
      /* 9/5/89  -  For all NIL orders with first quality products*/
      /* with active or in development life cycles, verify if there*/
      /* is a restriction on the customer ordering the specific*/
      /* product for the need date requested.*/

    if (OP1REC.XDVCD == "02") /* nil order*/
      if (OP3REC.XQACD == "01") /* first quality*/
        if (OBIREC.XLCCD == "10" /* active life cycle*/
         || OBIREC.XLCCD == "05") /* in development*/
          OM0BW05.OM0BWDTE = OM0BW01.OP1CUNDT; /* frmt need dte*/
          OM0BSOD(); /* verify nil cust/prod elig.*/
          if (OMAREC.OMAERR == "Y") /* error exists*/
            return;
          end
        end
      end
    else
      OM0BSEZ();
    end
  end


  if (OM0BM001.XWHCD is modified /* warehouse*/
   || OM0BM001.XWHCD == " ")     /* whs is required*/
    OM0BS79();
  else
    set OM0BM001.XWHCD initialAttributes;
    set OM0BM001.XWHSABRV initialAttributes;
  end

  if (OM0BM001.XOWCD is modified  
   && OM0BM001.XWHCD not modified /* if warehouse is changed, owner*/
  )                               /* group was edited from S79*/
    OM0BS81(); /* edit owner group*/
  end


  if (OM0BM001.OM0BMPAD is modified
   && OM0BM001.OM0BMPAL is modified)
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(185); /* cant have new price and adjust.*/
    set OM0BM001.OM0BMPAD bold;
    set OM0BM001.OM0BMPAL cursor, bold;
  else
    if (OM0BM001.OM0BMPAD is modified) /* price adjustment*/
      OM0BS7A();
    else
      if (OM0BW01.OM0BWPF6 == "Y")
        set OM0BM001.OM0BMPAD normal;
      else
        set OM0BM001.OM0BMPAD initialAttributes;
      end
    end
    if (OM0BM001.OM0BMPAL is modified) /* price for all sizes*/
      OM0BS7B();
    else
      if (OM0BW01.OM0BWPF6 == "Y")
        set OM0BM001.OM0BMPAL normal;
      else
        set OM0BM001.OM0BMPAL initialAttributes;
      end
    end
  end

       /* was this style used to fill lost demand?*/

  if (OM0BM001.OM0BMFIL is modified)
    if (OM0BM001.OM0BMFIL == "Y"
     || OM0BM001.OM0BMFIL == "N")
      set OM0BM001.OM0BMFIL initialAttributes;
    else
      converseLib.validationFailed(563); /* correct response is y or n*/
      OMAREC.OMAERR = "Y";
      set OM0BM001.OM0BMFIL cursor, modified, bold;
    end
  end


   /* check if need to require override authorization*/

  if (OM0BW01.OM0BWARF == "Y") /* if auth req*/
    if (OM0BM001.XOACD > " ") /* if one entered*/
      OM0BS7D(); /* validate it*/
    else
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(200);
      set OM0BM001.XOACD cursor, modified, bold;
    end
  end




  if (OMAREC.OMAERR == "N") /* error free, do combo.edits*/
    OM0BS7C();
  end



end // end OM0BS70

// edit forecast flag
Function OM0BS71()



  TA1REC.TA1LOCAT[2] = "OM0BS71"; /* error diag group name*/


  if (OM0BM001.OP2FSTFL == "Y" /* forecast flag*/
   || OM0BM001.OP2FSTFL == "N")
    OP3REC.OP2FSTFL = OM0BM001.OP2FSTFL; /* good, hold*/
    set OM0BM001.OP2FSTFL initialAttributes;
  else
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(181); /* correct response is y or n*/
    set OM0BM001.OP2FSTFL cursor, modified, bold;
  end



end // end OM0BS71

// edit substitute quantity
Function OM0BS72()



      /* *****************************************/
      /* * note - substitute style already edited*/
      /* *****************************************/

  TA1REC.TA1LOCAT[2] = "OM0BS72"; /* error diag group name*/


  if (OM0BM001.OP2SUBQT != 0)
    if (OM0BM001.OP2SSTYN == " ")
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(178); /* sub qty not valid without sub prod*/
      set OM0BM001.OP2SUBQT cursor, modified, bold;
      return;
    end
  end

  OP3REC.OP2SUBQT = OM0BM001.OP2SUBQT; /* hold good qty*/
  set OM0BM001.OP2SUBQT initialAttributes;



end // end OM0BS72

// edit pack handle code/charge
Function OM0BS73()




  TA1REC.TA1LOCAT = "OM0BS73"; /* error diag group name*/


      /* edit pack handle code & charge*/

  OM0BW01.OM0BWFND = "N"; /* match not found*/

  if (OM0BM001.XHDCD[OMASUB] == " ") /* handling code removed*/
    OP3REC.XHDCD[OMASUB] = " "; /* blank out current code*/
    OP3REC.XHDCHG[OMASUB] = 0; /* zero out charge*/
    OP3REC.OP2HCHGO[OMASUB] = "N"; /* init override indicatior*/
    OM0BM001.XHDCHG[OMASUB] = 0;
    OM0BM001.OM0BMHTP[OMASUB] = " ";
    set OM0BM001.XHDCD[OMASUB] initialAttributes;
    OM0BW01.OM0BWHTP = " ";
    return;
  else
    sysVar.arrayIndex = 1;
    OM0BW01.XHDCD = OM0BM001.XHDCD[OMASUB];
    OM0BW01.XGPCD = OP1REC.XGPCD;
    if (OP1REC.ZFC-CRCY-CD == " ")
      OP1REC.ZFC-CRCY-CD = "USD"; /* added for Canada*/
    end
    if (OM0BW01.XHDKEY in XHDTBL.XHDKEY /* if in tbl*/
     && XHDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (OP1REC.ZFC-CRCY-CD == XHDTBL.ZFC-CRCY-CD[sysVar.arrayIndex])
                                   /* added for Canada*/
        OMAREC.OMASUB1 = sysVar.arrayIndex;
      else
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(901); /* customer currency does not match hndl*/
                                   /* crcy*/
        set OM0BM001.XHDCD[OMASUB] cursor, modified, bold;
        return;
      end
    else
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(120);
      set OM0BM001.XHDCD[OMASUB] cursor, modified, bold;
      return;
    end
  end


  OP3REC.OP2HCHGO[OMASUB] = "N"; /* init override indicatior*/
  if (OM0BM001.XHDCHG[OMASUB] != XHDTBL.XHDCHG[OMASUB1]
   && OM0BM001.XHDCHG[OMASUB] > 0)
    if (XOTTBL.XOTAUTHF[OM0BWSBO] == "Y") /* if auth required*/
      OM0BW01.OM0BWARF = "Y"; /* require auth*/
    end
    /* MOVE 'Y' TO OP1REC.OP1SPHDF;   /* set spec handling flag*/
    OP3REC.OP2HCHGO[OMASUB] = "Y";
    OM0BW01.OP2HCHGO = "*"; /* override flag to map*/
    OM0BW01.XHDUCHFL = XHDTBL.XHDUCHFL[OMASUB1];
    OM0BM001.OM0BMHTP[OMASUB] = OM0BW01.OM0BWHTP;
  else
    OM0BM001.XHDCHG[OMASUB] = XHDTBL.XHDCHG[OMASUB1];
  end



  OP3REC.XHDCD[OMASUB] = OM0BM001.XHDCD[OMASUB]; /* hold good stuff*/
  OP3REC.XHDCHG[OMASUB] = OM0BM001.XHDCHG[OMASUB];
  set OM0BM001.XHDCD[OMASUB] initialAttributes;



end // end OM0BS73

// edit gut size
Function OM0BS74()



  TA1REC.TA1LOCAT[2] = "OM0BS74"; /* error diag group name*/


  if (OM0BM001.OP2GTSZF == "Y" /* valid gut size is y/n*/
   || OM0BM001.OP2GTSZF == "N")
    OP3REC.OP2GTSZF = OM0BM001.OP2GTSZF;
    set OM0BM001.OP2GTSZF initialAttributes;
  else
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(161); /* bad gut size*/
    set OM0BM001.OP2GTSZF cursor, modified, bold;
  end



end // end OM0BS74

// edit key style
Function OM0BS75()



  TA1REC.TA1LOCAT[2] = "OM0BS75"; /* error diag group name*/


  if (OM0BM001.OP2KSTYF == "Y" /* valid key style is y/n*/
   || OM0BM001.OP2KSTYF == "N")
    OP3REC.OP2KSTYF = OM0BM001.OP2KSTYF;
    set OM0BM001.OP2KSTYF initialAttributes;
  else
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(160); /* bad key style*/
    set OM0BM001.OP2KSTYF cursor, modified, bold;
  end



end // end OM0BS75

// edit coordinate group
Function OM0BS76()



  TA1REC.TA1LOCAT[2] = "OM0BS76"; /* error diag group name*/


  OP3REC.OP2CGPCD = OM0BM001.OP2CGPCD; /* hold coordinate group*/
  set OM0BM001.OP2CGPCD initialAttributes;



end // end OM0BS76

// edit backorder flag
Function OM0BS77()



  TA1REC.TA1LOCAT[2] = "OM0BS77"; /* error diag group name*/


  if (OM0BM001.OP1BOFL == "Y" /* valid backorder is y/n*/
   || OM0BM001.OP1BOFL == "N")
    /* next sentence*/
  else
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(77); /* bad backorder*/
    set OM0BM001.OP1BOFL cursor, modified, bold;
    return;
  end

  if (OM0BM001.OP1BOFL == "Y") /* can not change product defined*/
    if (SYCREC.SY2BOSWI == "N" /* as 'no' backorder*/
     && SYCREC.SY2BOEDT <= OMAREC.OMACDT)
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(179); /* warning-prod requires bo=n*/
      OM0BM001.OP1BOFL = "N";
      set OM0BM001.OP1BOFL cursor, bold;
      return;
    end
  end

  OP3REC.OP1BOFL = OM0BM001.OP1BOFL; /* hold good stuff*/
  set OM0BM001.OP1BOFL initialAttributes;



end // end OM0BS77

// edit needdate
Function OM0BS78()



      /* convert mmddyy from map to ccyymmdd*/

  TA1REC.TA1LOCAT[2] = "OM0BS78"; /* error diag group name*/


  set TA2REC empty; /* clear before use*/



     /* date may be in mmddyy or mm-dd-yy*/

  OM0BW01.OM0BWWDT = OM0BM001.OM0BMNDT;
  if (OM0BW01.OM0BWSP2 != "-") /* entered in mmddyy format*/
    TA2REC.TA2GRGA = OM0BM001.OM0BMNDT;
    OMAREC.OMADATE = OM0BM001.OM0BMNDT;
     /* reformat from mmddyy to mm-dd-yy for map*/
    OMAREC.OMAHP1 = "-";
    OMAREC.OMAHP2 = "-";
    OMAREC.OMASMMDT = OMAREC.OMAMMDT;
    OMAREC.OMASDDDT = OMAREC.OMADDDT;
    OMAREC.OMASYYDT = OMAREC.OMAYYDT;
    OM0BM001.OM0BMNDT = OMAREC.OMASDATE;
  else /* entered in mm-dd-yy format*/
    OMAREC.OMAMMDT = OM0BW01.OM0BWWMM; /* take out '-'*/
    OMAREC.OMADDDT = OM0BW01.OM0BWWDD;
    OMAREC.OMAYYDT = OM0BW01.OM0BWWYY;
    TA2REC.TA2GRGA = OMAREC.OMADATE;
  end


  TA2REC.TA2DTOPT = "GREGGREG"; /* convert mmddyy*/
  TA2REC.TA2GRTYP = "A"; /* to ccyymmdd*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date module*/


  if (TA2REC.TA2RTNCD != 0)
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(013); /* need date is not a valid date*/
    set OM0BM001.OM0BMNDT cursor, modified, bold;
    return;
  end


  if (TA2REC.TA2GRGGN < OMAREC.OMACDT)
    converseLib.validationFailed(015); /* need date must not be before today's*/
                                   /* date*/
    OMAREC.OMAERR = "Y";
    set OM0BM001.OM0BMNDT cursor, modified, bold;
    return;
  end


  OMAREC.OMAWDT = OMAREC.OMACDT + 20000; /* wk-dt = curr-dt + 2 years*/
  if (TA2REC.TA2GRGGN > OMAREC.OMAWDT)
    converseLib.validationFailed(016); /* need date is more than two years in*/
                                   /* the future*/
    OMAREC.OMAERR = "Y";
    set OM0BM001.OM0BMNDT cursor, modified, bold;
    return;
  end


      /* *********************************************************/
      /* * edit order type against sales program delivery date*/
      /* *********************************************************/

  if (OP1REC.SP1ID != " ") /* have sales pgm, so edit*/
    if (TA2REC.TA2GRGGN < SP2REC.SP2DLBDT /* if date outside deliv.range*/
     || TA2REC.TA2GRGGN > SP2REC.SP2DLXDT)
      converseLib.validationFailed(027); /* need date is not a valid delivery*/
                                   /* date for this*/
                             /* sales program*/
      OMAREC.OMAERR = "Y"; /* set error flag*/
      set OM0BM001.OM0BMNDT cursor, modified, bold;
      return;
    end
  end


      /* *********************************************************/
      /* * calc # days between curr date and need date*/
      /* * check for sufficient lead time, by order type;*/
      /* * check for sufficient lead time, for sales program.*/
      /* *********************************************************/

  if (OM0BW01.OM0BWBDF != "DS"
   && OM0BW01.OM0BWBDF != "DC"
   && OM0BW01.OM0BWBDF != "DX"
   && OM0BW01.OM0BWBDF != "DR"
   && OM0BW01.OM0BWBDF != "DN")
    TA2REC.TA2DBDFN = OMAREC.OMACDT; /* curr date*/
    TA2REC.TA2DBDTN = TA2REC.TA2GRGGN; /* need date*/
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "DAYSDIFF";
    TA2REC.TA2RTNCD = 0;
    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* get # days*/
    if (TA2REC.TA2RTNCD == 0)
      if (TA2REC.TA2DBDDN < XOTTBL.XOTLDAYS[OM0BWSBO]) /* check order type,*/
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(051); /* warning-not enough lead time*/
        set OM0BM001.OM0BMNDT cursor, bold;
        /* EZERTN;not before we have valued w/s we don't*/
      end
      if (OP1REC.SP1ID != " ") /* have sales program*/
        if (TA2REC.TA2DBDDN >= SP2REC.SP2LEDTM)
          /* next sentence*/
        else
          OMAREC.OMAERR = "Y";
          converseLib.validationFailed(052); /* not within sales pgm lead time*/
          set OM0BM001.OM0BMNDT cursor, modified, bold;
          return;
        end
      end
    else
      OMAREC.OMAERR = "Y"; /* date not valid*/
      converseLib.validationFailed(13);
      set OM0BM001.OM0BMNDT cursor, modified, bold;
      return;
    end
  end

  /* the need date for a non-apparel order must be on or before the*/
  /* don't ship after date, if one is present*/
  /*  */
  if (OP1REC.OP1DSADT != 0 /* there is a don't ship after date*/
   && OP1REC.XGPCD != "03" /* this is not an apparel order*/
   && TA2REC.TA2GRGGN > OP1REC.OP1DSADT) /* need date is later*/
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(382); /* need date must be between current need*/
                                   /* date and don't ship after date*/
    set OM0BM001.OM0BMNDT cursor, modified, bold;
    return;
  end
  /*  */
  /* the need date for customer and smart draws must be between*/
  /* the need date and don't ship after date of:*/
  /* - the bulk order (for customer draws)*/
  /* - the original draw order (for smart res draws)*/
  /* this message is not set for flexible draws*/
  /* (note that the need date is protected for rebook draws*/
  /* so we never get to this code.  I've no idea what dates*/
  /* should be used for rebook draws.....bbake2  dec91)*/
  /*  */
  if (OM0BW01.OM0BWBDF == "DS" /* smart res draw*/
   || OM0BW01.OM0BWBDF == "DC" /* customer draw*/
   || OM0BW01.OM0BWBDF == "DR" /* rebook draw*/
   || OM0BW01.OM0BWBDF == "DN") /* nike draw*/
    if (OM0BW01.OM0BW-BULK-NEED-DATE > TA2REC.TA2GRGGN)
                                   /* new ndt prior to orig ndt*/
      converseLib.validationFailed(293);
      OMAREC.OMAERR = "Y";
      set OM0BM001.OM0BMNDT cursor, modified, bold;
      return;
    else
      if (OM0BW01.OM0BW-BULK-DONT-SHIP-AFTER-DATE == 0)
                                   /* there is no don't ship after date*/
        set OM0BM001.OM0BMNDT initialAttributes;
      else
        if (TA2REC.TA2GRGGN > OM0BW01.OM0BW-BULK-DONT-SHIP-AFTER-DATE)
                                   /* new ndt after dont ship after dt*/
          converseLib.validationFailed(293);
          OMAREC.OMAERR = "Y";
          set OM0BM001.OM0BMNDT cursor, modified, bold;
          return;
        else
          set OM0BM001.OM0BMNDT initialAttributes;
        end
      end
    end
  end

      /* *************************************/
      /* * need date passes stand-alone edits*/
      /* *************************************/

  OM0BW01.OP1CUNDT = TA2REC.TA2GRGGN; /* save for later use*/
  OM0BW01.OM0BWCHG = "Y"; /* flag as changed*/
  OM0BW01.OM0BWCND = "Y"; /* force edit of whs/needdate sub-order*/
  set OM0BM001.OM0BMNDT initialAttributes;

   /* 08/07/89  bypass hot model logic if promo division*/
             /* or product is not first quality*/

  if (OP1REC.XDVCD == "03" /* if promo*/
   || OMWREC.XQACD != "01") /* or not first quality*/
      /* next sentence        bypass hot model logic*/
  else
    if (SYCREC.OPZHMIND == "Y"
     && OM0BW01.OM0BWBDF == " ")
      if (XOTTBL.XOTPROPF[OM0BWSBO] == "Y"
       && XOTTBL.XOTFUTRF[OM0BWSBO] == "N"
       && XOTTBL.XOTSMPLF[OM0BWSBO] == "N"
       && OM0BW01.OM0BWCND == "Y")
        OM0BSHM();
      end
    end
  end
end // end OM0BS78

// edit warehouse
Function OM0BS79()



  TA1REC.TA1LOCAT[2] = "OM0BS79"; /* error diag group name*/

  if (OM0BM001.XWHCD is modified)
    OM0BW01.OM0BWCWH = "Y"; /* changed warehouse*/
  end

  set OM0BM001.XWHCD initialAttributes;
  set OM0BM001.XWHSABRV initialAttributes;

  /*  */
  sysVar.arrayIndex = 1;
  OM0BW01.OM0BWFND = "N"; /* not found fl on*/

  if (OM0BM001.XWHCD == " ")
    OM0BM001.XWHSABRV = " ";
    if (OM0BW01.XDSWHSEF == "Y")
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(098); /* warehouse is required*/
      set OM0BM001.XWHCD cursor, modified, bold;
    else
      OM0BM001.XOWCD = " "; /* owner group is not required*/
      set OM0BM001.XOWCD initialAttributes; /* when warehouse is spaces*/
    end
    return;
  end

    /* added for Canada*/
  if (OP1REC.XDZ-DATA-DIST-CD == "CA"
   && OM0BM001.XWHCD == "42")
     /* next sentence*/
  else
    if (OP1REC.XDZ-DATA-DIST-CD != "CA"
     && OM0BM001.XWHCD != "42"
    ) /* next sentence*/
    else
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(898); /* warehouse 42 only allowed for canada*/
      set OM0BM001.XWHCD cursor, modified, bold;
      return;
    end
  end



  /*  */
  /* if warehouse has been entered, but order is direct ship*/
  /* and warehouse is not required, we will blank out the entered*/
  /* warehouse to prevent splitting the suborder for the unneeded*/
  /* warehouse.  (This won't work if we open up direct ship code)*/
  /*  */
  if (OM0BW01.XDSWHSEF == "N")
    OM0BM001.XWHCD = " ";
    OM0BM001.XWHSABRV = " ";
    return;
  end
  /*  */
  while (XWHTBL.XWHCD[sysVar.arrayIndex] != "99" /* end of table = 99*/
   && OM0BW01.OM0BWFND == "N")
    if (OM0BM001.XWHCD == XWHTBL.XWHCD[sysVar.arrayIndex])
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* validate whs*/
        OM0BS6G(); /* validate general prod class*/
        if (OM0BW01.OM0BWFND == "Y")
          OM0BM001.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
                                   /* descr to map*/
        end
      end
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  if (OM0BW01.OM0BWFND == "N") /* whs not found is error*/
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(78);
    set OM0BM001.XWHCD cursor, modified, bold;
    return;
  end


    /* make sure that a international order cannot be changed*/
    /* to use warehouse code = '15'.*/

  if (OP1REC.XDVCD == "02") /* International Order*/
    if (OP1REC.XWHCD != "15" /* orig. order not for whse 15*/
     && OM0BM001.XWHCD == "15") /* but changed to use whse 15*/
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(783); /* can't change whse code to*/
                               /* 15 for this order*/
      set OM0BM001.XWHCD cursor, modified, bold;
      return;
    end
  end


    /* if warehouse division is promo, '03', let this*/
    /* item around the restricted warehouse edit*/

  if (OM0BM001.XWHCD in XWHTBL.XWHCD /* which it is*/
   && XWHTBL.XDVCD1[sysVar.arrayIndex] == "03") /* if promo*/
    return; /* exit*/
  end

      /* ****************************************************/
      /* * restricted warehouse edit*/
      /* ****************************************************/


   /* note: 2 exceptions 1) direct ship orders*/
                      /* 2) order types with either:*/
                          /* a) life cycle of 20 or,*/
                          /* b) quality code of 02 or 03.*/


    /* do direct ship first.use ws warehouse required flag.*/

  if (OM0BW01.XDSWHSEF == "Y") /* if whs required, not direct ship*/
     /* next sentence*/
  else
    return;
  end


   /* now check order type quality and life cycle.*/

  if (XOTTBL.XQACD1[OM0BWSBO] == "02"
   || XOTTBL.XQACD1[OM0BWSBO] == "03"
   || XOTTBL.XQACD2[OM0BWSBO] == "02"
   || XOTTBL.XQACD2[OM0BWSBO] == "03"
   || XOTTBL.XQACD3[OM0BWSBO] == "02"
   || XOTTBL.XQACD3[OM0BWSBO] == "03"
   || XOTTBL.XLCCD1[OM0BWSBO] == "20"
   || XOTTBL.XLCCD2[OM0BWSBO] == "20"
   || XOTTBL.XLCCD3[OM0BWSBO] == "20"
   || XOTTBL.XLCCD4[OM0BWSBO] == "20"
   || XOTTBL.XLCCD5[OM0BWSBO] == "20")
    return;
  end



  sysVar.arrayIndex = 6; /* check restricted warehouse*/
  OM0BW01.OM0BWWHS = " "; /* init first warehouse on prod*/
  OM0BW01.OM0BWFND = "N"; /* init not found*/

  while (sysVar.arrayIndex > 0) /* check 6 whs on product*/
    if (SYCREC.XWHCD[sysVar.arrayIndex] != " ")
      if (OM0BM001.XWHCD == SYCREC.XWHCD[sysVar.arrayIndex])
        OM0BW01.OM0BWFND = "Y";
      else
        OM0BW01.OM0BWWHS = SYCREC.XWHCD[sysVar.arrayIndex]; /* hold first whs*/
      end
    end
    sysVar.arrayIndex = sysVar.arrayIndex - 1;
  end

  if (OM0BW01.OM0BWWHS != " ") /* warehouse restriction*/
    if (OM0BW01.OM0BWFND == "N") /* must match map whs else error*/
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(163); /* whs not allowed for style*/
      set OM0BM001.XWHCD cursor, modified, bold;
      return;
    else
      OP1REC.OP1OWHMF = "Y"; /* flag order-have product restric*/
    end
  end
  /*  */
  /* because warehouse was changed, we are going to edit owner*/
  /* group from here.*/
  OM0BS81();
end // end OM0BS79

// edit price adjustment
Function OM0BS7A()



  TA1REC.TA1LOCAT[2] = "OM0BS7A"; /* error diag group name*/


  if (OM0BM001.OM0BMPAD == 0) /* zero adjust o.k.*/
    set OM0BM001.OM0BMPAD normal;
    return;
  end

  OM0BW01.OM0BWPRO = OP3REC.OP2AUPRC; /* original price*/
  OM0BW01.OM0BWPRN = OP3REC.OP2AUPRC + OM0BM001.OM0BMPAD; /* adjust*/


  if (OM0BW01.OM0BWPRN <= 0) /* new price le 0 invalid*/
    if (OM0BW01.OM0BWPRN == 0 /* if new price is zero*/
     && SYCREC.SY1FNSHG == "2") /* and prod is raw materials*/
      if (OM0BW01.XAUCD == "64" /* class is salesman samples*/
       || OM0BW01.XAUCD == "82") /* or rep samples*/
          /* next sentence - price = 0 ok*/
      else
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(189); /* price can not be < or = zero*/
        set OM0BM001.OM0BMPAD cursor, modified, bold;
        return;
      end
    else
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(189); /* price can not be < or = zero*/
      set OM0BM001.OM0BMPAD cursor, modified, bold;
      return;
    end
  end

  OM0BW01.OM0BWFND = "N"; /* no error*/


      /* note - om0bwpad = n, never changed*/
             /* om0bwpad = y, warning given once, don't repeat,*/
                           /* apply change*/

      /* note - use first-size-price for add mode*/

  if (OM0BW01.OM0BWPAD == "N") /* edit vary % only once*/
    OM0BS6H(); /* edit price variance*/
  end

  if (OM0BW01.OM0BWFND == "Y") /* edit once error found*/
    OM0BW01.OM0BWPAD = "Y"; /* give warning*/
    converseLib.validationFailed(169); /* warning - price outside range*/
    set OM0BM001.OM0BMPAD cursor, modified, bold;
    return;
  end


   /* make sure price adj doesn't make price < 0*/

  if (OM0BM001.OM0BMPAD < 0)
    OM0BW01.OM0BWNSN = OM0BM001.OM0BMPAD;
    OM0BW01.OM0BWNSN = OM0BW01.OM0BWNSN * -1;
    sysVar.arrayIndex = OM0BW01.OM0BWSZF;
    while (sysVar.arrayIndex < 41
     && sysVar.arrayIndex <= OM0BW01.OM0BWSZL)
      if (OP3REC.OP3SZAFL[sysVar.arrayIndex] == "Y")
        if (OM0BW01.OM0BWNSN >= OP3REC.SY5PRCUN[sysVar.arrayIndex])
          if (OM0BW01.OM0BWNSN == OP3REC.SY5PRCUN[sysVar.arrayIndex] /* if price 0*/
           && SYCREC.SY1FNSHG == "2")                                /* and prod is raw materials*/
            if (OM0BW01.XAUCD == "64" /* class is salesman samples*/
             || OM0BW01.XAUCD == "82") /* or rep samples*/
                /* next sentence - price = 0 ok*/
            else
              OMAREC.OMAERR = "Y";
              converseLib.validationFailed(189);
              set OM0BM001.OM0BMPAD cursor, modified, bold;
              return;
            end
          else
            OMAREC.OMAERR = "Y";
            converseLib.validationFailed(189);
            set OM0BM001.OM0BMPAD cursor, modified, bold;
            return;
          end
        end
      end
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    end
  end




      /* good price adjustment for all sizes*/

  sysVar.arrayIndex = OM0BWSZF; /* from first possible size*/

  while (sysVar.arrayIndex < 41 /* add price adjust to all sizes*/
   && sysVar.arrayIndex <= OM0BWSZL) /* that are in product*/
    if (OP3REC.OP3SZAFL[sysVar.arrayIndex] == "Y") /* and are active*/
      OP3REC.SY5PRCUN[sysVar.arrayIndex] = OP3REC.SY5PRCUN[sysVar.arrayIndex] + OM0BM001.OM0BMPAD;
      OP3REC.OP3PRCOF[sysVar.arrayIndex] = "Y";
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end


      /* also add adjustment to price for all sizes*/

  if (OM0BM001.OM0BMPAL != 0)
    OM0BM001.OM0BMPAL = OM0BM001.OM0BMPAL + OM0BM001.OM0BMPAD;
  end


      /* adjust price used in variance edit*/

  OP3REC.OP2AUPRC = OP3REC.OP2AUPRC + OM0BM001.OM0BMPAD;


  if (XOTTBL.XOTAUTHF[OM0BWSBO] == "Y") /* if auth required*/
    OM0BW01.OM0BWARF = "Y"; /* set flag requiring it.*/
  end
  OP3REC.OP2PRCOF = "Y"; /* prod override flag*/
  set OM0BM001.OM0BMPAD normal;
  OM0BM001.OM0BMPAD = 0; /* clear field*/


  if (OM0BW01.OM0BWPF6 == "Y") /* put new prices on map*/
    OM0BS66();
  end



end // end OM0BS7A

// edit price for all sizes
Function OM0BS7B()



  TA1REC.TA1LOCAT[2] = "OM0BS7B"; /* error diag group name*/

  OM0BW01.OM0BWPRO = OP3REC.OP2AUPRC; /* original priceall sizes*/
  OM0BW01.OM0BWPRN = OM0BM001.OM0BMPAL; /* new price*/

  if (OM0BW01.OM0BWPRN <= 0) /* new price le 0 invalid*/
    if (OM0BW01.OM0BWPRN == 0 /* if new price is zero*/
     && SYCREC.SY1FNSHG == "2") /* and prod is raw materials*/
      if (OM0BW01.XAUCD == "64" /* class is salesman samples*/
       || OM0BW01.XAUCD == "82") /* or rep samples*/
          /* next sentence - price = 0 ok*/
      else
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(189); /* price can not be < or = zero*/
        set OM0BM001.OM0BMPAL cursor, modified, bold;
        return;
      end
    else
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(189); /* price can not be < or = zero*/
      set OM0BM001.OM0BMPAL cursor, modified, bold;
      return;
    end
  end

  OM0BW01.OM0BWFND = "N"; /* no error*/

      /* note - om0bwpal = n, never checked*/
             /* om0bwpal = y, warning given once, dont repeat,*/
                           /* apply any change*/

  if (OM0BW01.OM0BWPAL == "N") /* edit only once*/
    OM0BS6H(); /* edit price variance*/
  end

  if (OM0BW01.OM0BWFND == "Y") /* if edit once error*/
    OM0BW01.OM0BWPAL = "Y"; /* give warning*/
    converseLib.validationFailed(169); /* warning - price outside range*/
    set OM0BM001.OM0BMPAL cursor, modified, bold;
    return;
  end


      /* good price for all sizes*/

  sysVar.arrayIndex = OM0BWSZF; /* from first possible size*/

  while (sysVar.arrayIndex < 41 /* move price to all sizes*/
   && sysVar.arrayIndex <= OM0BWSZL) /* until end of product sizes*/
    if (OP3REC.OP3SZAFL[sysVar.arrayIndex] == "Y") /* for all active sizes*/
      OP3REC.SY5PRCUN[sysVar.arrayIndex] = OM0BM001.OM0BMPAL;
      OP3REC.OP3PRCOF[sysVar.arrayIndex] = "Y";
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end


   /* hold new price for price variance edit*/

  OP3REC.OP2AUPRC = OM0BM001.OM0BMPAL;


  if (XOTTBL.XOTAUTHF[OM0BWSBO] == "Y") /* if require auth*/
    OM0BW01.OM0BWARF = "Y"; /* set flag to require.*/
  end
  OP3REC.OP2PRCOF = "Y"; /* prod override flag*/
  OP3REC.OP2PRCVF = "N"; /* prod prc vary flag*/
  set OM0BM001.OM0BMPAL normal;


  if (OM0BW01.OM0BWPF6 == "Y") /* move changed prices to map*/
    OM0BS66();
  end



end // end OM0BS7B

// combo edits-prod info,bottom
Function OM0BS7C()
  TA1REC.TA1LOCAT[2] = "OM0BS7C"; /* error diag group name*/

   /* **************************************************/
   /* have the changes made this a transmitted       **/
   /* airborne order?  if yes, do not allow any      **/
   /* updates - redisplay original data              **/
   /* **************************************************/
  if (OM0BW01.OM0BWCND == "Y" /* need date change?*/
   || OM0BW01.OM0BWCDS == "Y") /* direct ship change?*/
    XS0MW01.XS0MWDIV = OP1REC.XDVCD;
    XS0MW01.XS0MWORT = OP1REC.XOTCD;
    XS0MW01.XS0MWDIR = OM0BM001.XDSCD;
    XS0MW01.XS0MWCUS = OP1REC.KUCCOID;
    XS0MW01.XS0MWGPC = OP1REC.XGPCD;
    XS0MW01.XS0MWNDT = OM0BW01.OP1CUNDT;

    XS0MS-CHK-AIRBORNE();

    if (XS0MW01.XS0MWABF == "Y") /* changes make a transmitted*/
      OMAREC.OMAERR = "Y"; /* airborne order*/
      XS0MW01.XS0MWABF = "N"; /* reset airborne flag*/
      converseLib.validationFailed(790); /* updates not allowed*/
      if (OM0BW01.OM0BWCND == "Y")
        OM0BW01.OP1CUNDT = OP1REC.OP1CUNDT;
        set OM0BM001.OM0BMNDT cursor, bold;
      else
        OM0BM001.XDSABRV = " "; /* move original data*/
        OM0BM001.XDSCD = OP1REC.XDSCD;
        set OM0BM001.XDSCD cursor, bold;
        if (OP1REC.XDSCD in XDSTBL.XDSCD)
          OM0BM001.XDSABRV = XDSTBL.XDSABRV[sysVar.arrayIndex];
        else
          OM0BM001.XDSABRV = " ";
        end
      end
    end
  end

    /* re-check cut off date and re-calculate production add on flags*/

  OM0BS-GET-CUTOFFS();
  if (OM0BW01.OM0BWCND == "Y" /* if changed needdate,*/
   && OM0BW01.OM0BWOAF == "Y") /* order adjustment required*/
    if (converseVar.validationMsgNum == 0)
      converseLib.validationFailed(614); /* order adjustment number required*/
    end
  end

      /* changed need date may force re-do of size prices*/

  if (OM0BW01.OM0BWCND == "Y") /* if changed needdate,*/
    OM0BS6I(); /* re-calc size prices, maybe*/
  end

      /* if warehouse change, may recalculate prices*/

  if (OM0BW01.OM0BWCWH == "Y" /* if warehouse changed*/
   || OM0BM001.XWHCD == " ")  /* or warehouse is blank*/
    if (OP1REC.XDVCD == "02" /* and a nil order*/
     && OP1REC.XOBCD == "S1") /* and a sample order type*/
      if (OM0BW01.XAUCD == "31" /* and customer's account class*/
       || OM0BW01.XAUCD == "32") /* is nike owned or export co.*/
        if (OM0BM001.XWHCD == " " /* if warehouse is now blank*/
         || OM0BM001.XWHCD == "12") /* or 12 for nil warehouse*/
          OM0BS6O(); /* get prc type cd based on co.*/
          OM0BS7H(); /* redo pricing*/
        else
                                   /* else (xwhcd now entered but not 12)*/
          OM0BS6N(); /* get price typ cd based on comp nbr*/
          OM0BS7H(); /* redo the pricing*/
        end
      end
    end
  end


      /* warehouse or needdate or direct ship change forces*/
      /* this add to a different sub-order then came in with.*/

  if (OM0BW01.OM0BWCND == "Y" /* if need date change*/
   || OM0BW01.OM0BWCWH == "Y" /* or warehouse change*/
   || OM0BW01.OM0BWCDS == "Y" /* or direct ship change*/
   || OM0BM001.XWHCD == "  ") /* or warehouse is blank*/
    OM0BS27(); /* match/put in sub-ord array*/
    OM0BS21(); /* match/put in sub-ord array*/
    OM0BW01.OM0BWCDS = "N";
  end

  if (OP1REC.XGPCD == "03") /* only apparel are screened*/
    if (OM0BW01.OM0BWCND == "Y" /* need date changed*/
     || OM0BW01.OM0BW-OWNER-GROUP-CHANGE-FLAG == "Y"
     /* owner group changed*/
     || OM0BW01.OM0BWCWH == "Y" /* warehouse changed*/
     || OM0BM001.XWHCD == "  ") /* warehouse is blank*/
      if (OM0BW01.OM0BWBBF == "BB" /* blank bulk*/
       || OM0BW01.OM0BWBBF == "BD") /* blank bulk draw*/
        OM0BST8(); /* edit*/
      else
        if (SYCREC.SY1BSTNB > " " /* associated with blank style*/
         && SYCREC.XPRCD != "22"  /* and not a custom logo product*/
         && OP3REC.XQACD == "01"  /* first quality*/
         && OBIREC.XLCCD < "11")  /* active life cycle*/
          if (OM0BM001.XWHCD == "51"
           || OM0BM001.XWHCD == "25"
           || OM0BM001.XWHCD == "27"
           || OM0BM001.XWHCD == "42") /* added for Canada*/
            if (OP1REC.XBDCD == "0" /* REG ORDER*/
             || OP1REC.XBDCD == "1") /* CUSTOMER BULK*/
              OM0BS-CHK-FLYER(); /* CHECK FOR FLYER PROGRAM*/
              if (SQLCA.VAGen_SQLCODE == 0 /* ONE ROW FOUND*/
               || SQLCA.VAGen_SQLCODE == -811) /* MORE THAN ONE ROW FOUND*/
                OM0BS-PROCES-FLYR(); /* PROCESS FLYER*/
              end
            end
          end
        end
      end
    end
  end
  /*  */
  /* changes to need date, warehouse or owner group may have an*/
  /* effect on how much product is available, and require a*/
  /* re-call of ob1210.  Draws get availability from the bulk*/
  /* and are not effected by changes.*/
  /*  */
  if (OM0BW01.OM0BWBDF == "DC"
   || OM0BW01.OM0BWBDF == "DS"
   || OM0BW01.OM0BWBDF == "DX"
   || OM0BW01.OM0BWBDF == "DR"
   || OM0BW01.OM0BWBDF == "DN")
    /* next sentence*/
  else
    if (OM0BW01.OM0BWCWH == "Y" /* warehouse changed*/
     || OM0BW01.OM0BWCND == "Y" /* need date changed*/
     || OM0BW01.OM0BW-OWNER-GROUP-CHANGE-FLAG == "Y"
     /* .* owner group changed*/
     || OM0BM001.XWHCD == "  ") /* warehouse is blank*/
      OM0BW01.OM0BW-MOVE-QUANTITY-FLAG = "N";
                                   /* prevent quantities from being moved*/
                                  /* to map from op3rec*/
      OM0BSGA(); /* get availability again*/
      OM0BS51(); /* move it to the map*/
    end
  end


     /* ****************************************************************/
     /* * 08/12/92 JLoyer - If booking seasons are required and the   **/
     /* * need date changes, call ob1470 using the new need date and  **/
     /* * recheck the booking seasons.  If the order is International **/
     /* * apparel and the need date or warehouse change, call ob1470  **/
     /* * and recheck the booking seasons.                            **/
     /* ****************************************************************/

  if (OM0BW01.OM0BW-BK-SESN-REQUIRED == "Y") /* if bk-sesn required*/
    if (OP1REC.XDVCD == "02") /* if Int'l order*/
      if (OM0BW01.OM0BW-DEFAULT-BK-SESN == "Y") /* if defaulting bk-sesn*/
                                  /* skip*/
      else /* else*/
        if (OM0BW01.OM0BWCND == "Y" /* if ndt chgd*/
         || OM0BW01.OM0BWCWH == "Y") /* or whs chgd*/
          OM0BS-CALL-OB1470(); /* call ob1470*/
          if (OBSREC.OBS-RETN-CD == "00") /* if single bk-sesn*/
            OM0BW01.OM0BW-MULTI-BK-SESN-MSG = "N"; /* turn off msg*/
            OM0BS-EDIT-BK-SESN(); /* edit bk-sesn*/
          else /* else*/
            if (OBSREC.OBS-RETN-CD == "01") /* multi bk-sesns*/
              OM0BW01.OM0BW-MULTI-BK-SESN-MSG = "Y"; /* turn on msg*/
              OM0BS-EDIT-BK-SESN(); /* edit bk-sesn*/
            end
          end
        end
      end
    else
      if (OM0BW01.OM0BWCND == "Y") /* if ndt chgd*/
        OM0BS-CALL-OB1470(); /* call ob1470*/
        if (OBSREC.OBS-RETN-CD == "00") /* if single bk-sesn*/
          OM0BW01.OM0BW-MULTI-BK-SESN-MSG = "N"; /* turn off msg*/
          OM0BS-EDIT-BK-SESN(); /* edit bk-sesn*/
        else /* else*/
          if (OBSREC.OBS-RETN-CD == "01") /* multi bk-sesns*/
            OM0BW01.OM0BW-MULTI-BK-SESN-MSG = "Y"; /* turn on msg*/
            OM0BS-EDIT-BK-SESN(); /* edit bk-sesn*/
          end
        end
      end
    end
  end



  /*  */
  /* turn off change flags for next converse*/
  /*  */
  OM0BW01.OM0BWCND = "N"; /* need date change flag*/
  OM0BW01.OM0BWCWH = "N"; /* warehouse change flag*/
  OM0BW01.OM0BW-OWNER-GROUP-CHANGE-FLAG = "N";
                                   /* owner group change flag*/
end // end OM0BS7C

// check override authorization
Function OM0BS7D()




   /* this routine checks the users entered authorization*/
   /* code for validity. first it must exist on the table.*/
   /* second it must be active as far as the dates associated*/
   /* with this code.*/


  if (OM0BM001.XOACD in XOATBL.XOACD) /* if match*/
    OMAREC.OMASUB = sysVar.arrayIndex; /* save subscript*/
  else
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(200);
    set OM0BM001.XOACD cursor, modified, bold;
    return;
  end



  if (OMAREC.OMACDT >= XOATBL.XOABEGDT[OMASUB]
   && OMAREC.OMACDT <= XOATBL.XOAENDDT[OMASUB])
    OM0BW01.OM0BWARF = "N"; /* turn off required flag*/
    OP1REC.OP1OSRID = XOATBL.KUYSVRID[OMASUB];
    OP1REC.OP1ORADT = OMAREC.OMACDT;
    set OM0BM001.XOACD initialAttributes;
  else
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(200);
    set OM0BM001.XOACD cursor, modified, bold;
  end






end // end OM0BS7D

// edit direct ship code
Function OM0BS7E()





    /* this routine edits the override direct ship code entered*/
    /* by the user.*/


   /* check for direct ship blanks*/

  if (OM0BM001.XDSCD == " ")
    OM0BM001.XDSABRV = " ";
    OM0BW01.XDSWHSEF = "Y";
    return;
  end




   /* if changed back to original value, ok.*/

  if (OM0BM001.XDSCD == OP1REC.XDSCD)
    set OM0BM001.XDSCD initialAttributes;
    return;
  end



   /* now check against direct ship table*/

  if (OM0BM001.XDSCD in XDSTBL.XDSCD)
    OMAREC.OMASUB = sysVar.arrayIndex; /* save subscript*/
    OM0BW01.XDSWHSEF = XDSTBL.XDSWHSEF[OMASUB];
  else
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(74);
    set OM0BM001.XDSCD cursor, modified, bold;
    return;
  end






   /* now see if order type allows direct ship*/

  if (OP1REC.XOTCD in XOTTBL.XOTCD)
    if (XOTTBL.XOTADIRS[sysVar.arrayIndex] == "Y") /* if allowed*/
       /* next sentence*/
    else
      converseLib.validationFailed(75); /* dir shp not allowed*/
      OMAREC.OMAERR = "Y";
      set OM0BM001.XDSCD cursor, modified, bold;
      return;
    end
  end /* should never happen*/




   /* load desc, set defined, set change flag*/

  OM0BM001.XDSABRV = XDSTBL.XDSABRV[OMASUB];
  set OM0BM001.XDSCD initialAttributes;
  OM0BW01.OM0BWCDS = "Y";




end // end OM0BS7E

// find new sub-order to work on
Function OM0BS7F()





   /* this routine is invoked when we need to add the current*/
   /* product that can't be added to the current sub-order*/
   /* being maintenanced. it will try to find an existing sub-*/
   /* order to add to. if not one, it looks for an open or*/
   /* unused suborder number to create. if no available sub-*/
   /* orders to create send order full error message.*/
   /* as we are going through the sub-orders get the most current*/
   /* version of the sub-order we came in with so when we copy*/
   /* it to the new sub-order to be created, we have the newest*/
   /* version of the record.*/


      /* changed for phased availibility 9/7*/


  OM0BW01.OM0BWFND = "N";

  while (SQLCA.VAGen_SQLCODE != 100
   && OM0BW01.OM0BWFND == "N")
    call "IO0430" ("SN", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      if (OP1REC.OP1NORID == OMWREC.OMWSORDN)
        OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* save it*/
      end
      OM0BW01.OP1NORID = OP1REC.OP1NORID; /* save last used number*/
      if (OP1REC.OP1CUNDT == OM0BW01.OP1CUNDT /* changed 9/9*/
       && OP1REC.XWHCD == OM0BM001.XWHCD      /* if found matching suborder*/
       && OP1REC.XDSCD == OM0BM001.XDSCD)    
        if (OP1REC.XOSCD in XOSTBL.XOSCD)
          if (XOSTBL.XOSALWCH[sysVar.arrayIndex] == "Y") /* if os allows changes*/
            OM0BW01.OM0BWFND = "Y";
          end
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[1] = "SN";
        TA1REC.TA1DBASE = "DORDER  ";
        TA1REC.TA1TBLVU = "VORHDR01";
        TA1REC.TA1LOCAT[2] = "OM0BS7F ";
        TA1REC.TA1LOCAT[3] = "IO0430";
        TA1REC.TA1TBLKE = OP1REC.OP1KEY;
        OM0BS02();
      end
    end
  end



  if (OM0BW01.OM0BWFND == "Y") /* if existing one found to add to*/
    OM0BW01.OM0BWNSF = "N"; /* set new sub-order flag*/
    OMWREC.OMWSORDN = OP1REC.OP1NORID;
    OM0BM001.OM0BMORN = OMWREC.OMWORD; /* display new ord id*/
    return;
  end

  OP1REC.OP1GROUP = OMWREC.OP1GROUP; /* roll in newest version*/


   /* if got here must not have found a sub-order to add to. see*/
   /* if there is one i can create.*/

  if (OM0BW01.OP1NORID > 98) /* if there is a ninty-eighth sub-order*/
    if (OM0BW01.OM0BWCWH == "Y") /* if warehouse changed*/
      OM0BW01.OM0BWCWH = "N";
      set OM0BM001.XWHCD cursor, modified, bold;
    end
    if (OM0BW01.OM0BWCND == "Y")
      OM0BW01.OM0BWCND = "N";
      set OM0BM001.OM0BMNDT cursor, modified, bold;
    end
    if (OM0BW01.OM0BWCDS == "Y")
      OM0BW01.OM0BWCDS = "N";
      set OM0BM001.XDSCD cursor, modified, bold;
    end
    converseLib.validationFailed(174); /* order full message*/
    OMAREC.OMAERR = "Y";
    return;
  else
    OMWREC.OMWMULSO = "Y"; /* set multiple sub-order flag*/
    OM0BW01.OM0BWNSF = "Y"; /* set new sub-order flag*/
    OM0BW01.OP1NORID = OM0BW01.OP1NORID + 1;
    OP1REC.OP1NORID = OM0BW01.OP1NORID;
    OP1REC.XWHCD = OM0BM001.XWHCD; /* load new warehouse*/
    OP1REC.OP1CUNDT = OM0BW01.OP1CUNDT; /* load new nd  changed 9/9*/
    OP1REC.XDSCD = OM0BM001.XDSCD; /* load new ds code*/

     /* for international airborne edit*/
    if (OP1REC.XDVCD == "02") /* international*/
      if (OP1REC.XOCCD == "AU" /* updated airborne order*/
       || OP1REC.XOCCD == "AS") /* original airborne order*/
        OP1REC.XOCCD = "  "; /* init to blank*/
      end
    end

     /* init certain op1rec fields for a new sub-order*/
    OP1REC.XOSCD = "OP";
    OP1REC.OP1OSADT = OMAREC.OMACDT;
    OP1REC.OP1LALDT = 0;
    OP1REC.OP1OTUNT = 0;
    OP1REC.OP1OMCMF = "N";
    OP1REC.XCHCD[1] = "00";
    OP1REC.XCHCD[2] = "00";
    OP1REC.XCHCD[3] = "00";
    OP1REC.XCSCD = "00";
    OP1REC.OP1PCSCD = "00";
    OP1REC.OP1CRLMP = " ";
    OP1REC.OP1CRLMR = " ";
    OP1REC.OP1NTMAL = 0;
    OP1REC.OP1ALCQF = "N";
    OP1REC.OP1CSADT = 0;
    OP1REC.OP1CSATM = 0;
    OP1REC.OP1CKAMT = 0;
    OP1REC.OP1DCHLD = 0;
    OP1REC.OP1PCSDT = 0;
    OP1REC.OP1PCSTM = 0;
    OP1REC.OP1CCKOQ = 0;
    OP1REC.OP1OVALU = 0;
    OP1REC.OP1OSRID = 0;
    OP1REC.OP1NDRAW = 0;
    OP1REC.OP1SPHDF = "N";
     /* set up time date stamps*/
    OP1REC.ZZZSTM = OM0BW01.OM0BWTM3;
    OP1REC.ZZZSDT = OMAREC.OMACDT;
    OP1REC.ZZZCHGCT = 0;
  end





  OM0BW01.OM0BWSSN = OMWREC.OMWSORDN; /* save orig sub-order number*/
  OMWREC.OMWSORDN = OP1REC.OP1NORID; /* reset ws order number to new*/
  OM0BM001.OM0BMORN = OMWREC.OMWORD; /* put new ord number to map*/
  OM0BW-SPLIT-FL = "Y"; /* SLARSE*/





end // end OM0BS7F

// add new sub-order records
Function OM0BS7G()

   /* this routine is called when a new sub-order is created.*/
   /* it creates op5rec and op4rec records to associate with*/
   /* the newly created sub-order. this is done by reading*/
   /* the old sub-orders records in and writing them back out*/
   /* with the new sub-orders number on them.*/

    /* note: om0bw01.om0bwssn contains the original sub-order*/
          /* number that we entered the application with.*/

   /* new sub-order needs an SOCD Change Reason.*/

  if (OM0BW01.OM0BW-SOCD-CHNG-NDT-FL == "Y") /* SLARSE Begin*/
    OM0BW01.OM0BW-SOCD-CHNG-NDT-FL = "N";
    OM0BS-MAX-VSOHCR01(); /* Clear the record, fill key, get max seq*/
    VSOHCR01.OP1CUNDT = OP1REC.OP1CUNDT;
    OM0BS-ADD-VSOHCR01(); /* Write the Header Change     SLARSE End*/
  end

   /* first do the alt ship address record if needed.*/

  if (OP1REC.OP11TMSF == "Y") /* if one time drop ship*/
    OP5REC.OP1PARTN = OP1REC.OP1PARTN;
    OP5REC.OP1CUOID = OP1REC.OP1CUOID;
    OP5REC.OP1NORID = OM0BW01.OM0BWSSN;
    OP5REC.OP5BILIN = "N";
    OP5REC.OP5SHPIN = "Y";
    call "IO0460" ("S ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      OP5REC.OP1NORID = OP1REC.OP1NORID;
      OP5REC.ZZZCHGDT = OMAREC.OMACDT;
      OP5REC.ZZZCHGTM = OM0BW01.OM0BWTM3;
      OP5REC.ZZZCHGCT = 0;

  /*  */
  /* Befor inserting the row it is being checked whether any row*/
  /* exists with the same key values in dorder.voaddr01.*/
  /*  */
      call "IO0460" ("SA", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
  /*  */
  /* If no row exists then only, the row is added to dorder.voaddr01*/
  /* table, else it skips inserting the row.*/
  /*  */
      if (SQLCA.VAGen_SQLCODE == 100)
        call "IO0460" ("A ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
      else
        if (SQLCA.VAGen_SQLCODE == 0)
          call "IO0460" ("U ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
        else
          TA1REC.TA1DBASE = "DORDER";
          TA1REC.TA1TBLVU = "VADDR001";
          TA1REC.TA1TBLKE = OP5REC.OP5KEY;
          TA1REC.TA1LOCAT[2] = "OM0BS7G";
          TA1REC.TA1LOCAT[3] = "IO0460";
          TA1REC.TA1LOCAT[1] = "A";
          OM0BS02(); /* common abend*/
        end
      end
      if (SQLCA.VAGen_SQLCODE == 0)
         /* next sentence*/
      else
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VADDR001";
        TA1REC.TA1TBLKE = OP5REC.OP5KEY;
        TA1REC.TA1LOCAT[2] = "OM0BS7G";
        TA1REC.TA1LOCAT[3] = "IO0460";
        TA1REC.TA1LOCAT[1] = "A";
        OM0BS02(); /* common abend*/
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VADDR001";
        TA1REC.TA1TBLKE = OP5REC.OP5KEY;
        TA1REC.TA1LOCAT[2] = "OM0BS7G";
        TA1REC.TA1LOCAT[3] = "IO0460";
        TA1REC.TA1LOCAT[1] = "S";
        OM0BS02(); /* common abend*/
      end
    end
  end


   /* next do the alt bill address record if needed.*/

  if (OP1REC.OP11TMBF == "Y") /* if one time drop ship*/
    OP5REC.OP1PARTN = OP1REC.OP1PARTN;
    OP5REC.OP1CUOID = OP1REC.OP1CUOID;
    OP5REC.OP1NORID = OM0BW01.OM0BWSSN;
    OP5REC.OP5BILIN = "Y";
    OP5REC.OP5SHPIN = "N";
    call "IO0460" ("S ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      OP5REC.OP1NORID = OP1REC.OP1NORID;
      OP5REC.ZZZCHGDT = OMAREC.OMACDT;
      OP5REC.ZZZCHGTM = OM0BW01.OM0BWTM3;
      OP5REC.ZZZCHGCT = 0;
  /*  */
  /* Befor inserting the row it is being checked whether any row*/
  /* exists with the same key values in dorder.voaddr01.*/
  /*  */
      call "IO0460" ("SA", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
  /*  */
  /* If no row exists then only, the row is added to dorder.voaddr01*/
  /* table, else it skips inserting the row.*/
  /*  */
      if (SQLCA.VAGen_SQLCODE == 100)
        call "IO0460" ("A ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
      else
        if (SQLCA.VAGen_SQLCODE == 0)
          call "IO0460" ("U ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
        else
          TA1REC.TA1DBASE = "DORDER";
          TA1REC.TA1TBLVU = "VADDR001";
          TA1REC.TA1TBLKE = OP5REC.OP5KEY;
          TA1REC.TA1LOCAT[2] = "OM0BS7G";
          TA1REC.TA1LOCAT[3] = "IO0460";
          TA1REC.TA1LOCAT[1] = "A";
          OM0BS02(); /* common abend*/
        end
      end
      if (SQLCA.VAGen_SQLCODE == 0)
         /* next sentence*/
      else
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VOADDR01";
        TA1REC.TA1TBLKE = OP5REC.OP5KEY;
        TA1REC.TA1LOCAT[2] = "OM0BS7G";
        TA1REC.TA1LOCAT[3] = "IO0460";
        TA1REC.TA1LOCAT[1] = "A";
        OM0BS02(); /* common abend*/
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VOADDR01";
        TA1REC.TA1TBLKE = OP5REC.OP5KEY;
        TA1REC.TA1LOCAT[2] = "OM0BS7G";
        TA1REC.TA1LOCAT[3] = "IO0460";
        TA1REC.TA1LOCAT[1] = "S";
        OM0BS02(); /* common abend*/
      end
    end
  end


   /* now handle the labels and special instructions records*/


  if (OP1REC.OP1SPLBF == "Y" /* if order has special labels*/
   || OP1REC.OP1SPINF == "Y") /* or has special instructions*/
    OP4REC.OP1NORID = OM0BW01.OM0BWSSN;
    OP4REC.OP1PARTN = OP1REC.OP1PARTN;
    OP4REC.OP1CUOID = OP1REC.OP1CUOID;
    OP4REC.OP4TRTYP = " ";
    call "IO0470" ("SS", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      while (SQLCA.VAGen_SQLCODE != 100) /* while not end of records*/
        call "IO0470" ("SN", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
        if (SQLCA.VAGen_SQLCODE == 0)
          if (OP4REC.OP4TRTYP == "I" /* if instr record*/
           || OP4REC.OP4TRTYP == "L") /* or label record*/
            OP4REC.OP1NORID = OP1REC.OP1NORID;
            OP4REC.ZZZCHGDT = OMAREC.OMACDT;
            OP4REC.ZZZCHGTM = OM0BW01.OM0BWTM3;
            OP4REC.ZZZCHGCT = 0;
            call "IO0470" ("A ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
            if (SQLCA.VAGen_SQLCODE == 0)
              OP4REC.OP1NORID = OM0BW01.OM0BWSSN; /* reset old key*/
            else
              TA1REC.TA1DBASE = "DORDER";
              TA1REC.TA1TBLVU = "VTEXT001";
              TA1REC.TA1TBLKE = OP4REC.OP4KEY;
              TA1REC.TA1LOCAT[2] = "OM0BS7G";
              TA1REC.TA1LOCAT[3] = "IO0470";
              TA1REC.TA1LOCAT[1] = "A";
              OM0BS02(); /* common abend*/
            end
          end
        else
          if (SQLCA.VAGen_SQLCODE == 100)
             /* next sentence*/
          else
            TA1REC.TA1DBASE = "DORDER";
            TA1REC.TA1TBLVU = "VTEXT001";
            TA1REC.TA1TBLKE = OP4REC.OP4KEY;
            TA1REC.TA1LOCAT[2] = "OM0BS7G";
            TA1REC.TA1LOCAT[3] = "IO0470";
            TA1REC.TA1LOCAT[1] = "SN";
            OM0BS02(); /* common abend*/
          end
        end
      end
    else /* order says it's there, error*/
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VTEXT001";
      TA1REC.TA1TBLKE = OP4REC.OP4KEY;
      TA1REC.TA1LOCAT[2] = "OM0BS7G";
      TA1REC.TA1LOCAT[3] = "IO0470";
      TA1REC.TA1LOCAT[1] = "SN";
      OM0BS02(); /* common abend*/
    end
    call "IO0470" ("CS", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
  end



end // end OM0BS7G

// redo nike int'l pricing
Function OM0BS7H()


      /* redo nike international pricing when warehouse changes*/


  OM0BS22(); /* get pricefor style/color*/



  OM0BW01.OM0BWSBR = 1; /* recalculate prices for each size*/
  OM0BW01.OM0BWPRC = 0;
  while (OM0BW01.OM0BWSBR < 41
   && OM0BW01.OM0BWSBR <= OM0BW01.OM0BWSZL)
    OM0BS24(); /* re-do prices*/
    if (OP3REC.OP3SZAFL[OM0BWSBR] == "Y")
      OM0BS25(); /* set price vary flag*/
    end
    OP3REC.OP3PRCOF[OM0BWSBR] = "N";
    OM0BW01.OM0BWSBR = OM0BW01.OM0BWSBR + 1;
  end
  OM0BM001.OM0BMPAL = OP3REC.OP2AUPRC;


end // end OM0BS7H

// edit owner group code
Function OM0BS81()
  /* note that the edit of owner group assumes that the*/
  /* warehouse is correct.  if warehouse is invalid, or spaces*/
  /* none of these edits will work.*/
  /*  */
  /* if warehouse requires an owner group we fall thru and*/
  /* check out what we got.*/
  /* If no owner group is required, we*/
  /* a)  take what the user gave us for screened products*/
  /* b)  get rid of what the user entered for anything else*/
  /*  */
  if (OM0BM001.XWHCD in XWHTBL.XWHCD
   && XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y") /* owner group is required*/
  /* next sentence                    fall thru to edit owner group*/
  else
    set OM0BM001.XOWCD initialAttributes;
    if (SYCREC.SY1BSTNB > " " /* associated with blank style*/
     && SYCREC.XPRCD != "22") /* and not custom logo*/
      OP3REC.XOWCD = OM0BM001.XOWCD; /* keep entered owner group*/
    else
      OM0BM001.XOWCD = "  ";
      OP3REC.XOWCD = "00";
    end
    return;
  end

   /* default owner group code to '00' if warehouse '03'*/
   /* 8/03/89 rmd*/
   /* and warehouse '51' - 1/10/91*/
   /* and warehouse '25' - 5/01/93*/
   /* and warehouse '27' - 8/27/97*/

  if (OM0BM001.XOWCD > " ")
     /* next sentence*/
  else
    if (OM0BM001.XWHCD == "03"
     || OM0BM001.XWHCD == "51"
     || OM0BM001.XWHCD == "25"
     || OM0BM001.XWHCD == "27"
     || OM0BM001.XWHCD == "42") /* added for Canada*/
      OM0BM001.XOWCD = "00";
    else
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(103); /* owner group required*/
      set OM0BM001.XOWCD cursor, modified, bold;
    end
  end




   /* since owner code edit triggered when warehouse changes*/
   /* if xow code in error, also set xwhcd modified to trigger*/
   /* re-edit of owner code.*/




    /* look owner code up in xowtbl.*/


  XOWREC.XWHCD = OM0BM001.XWHCD;
  XOWREC.XOWCD = OM0BM001.XOWCD;

  if (XOWREC.XOWKEY in XOWTBL.XOWKEY /* if in table*/
   && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    set OM0BM001.XOWCD initialAttributes;
    OM0BM001.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
  else
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(101); /* owner group code not found on table*/
    set OM0BM001.XOWCD cursor, modified, bold;
    return;
  end



       /* check for the universal owner group code --*/
       /* any service rep is accepted if this owner group*/
       /* code was entered*/

  if (XOWTBL.XOWALUSR[sysVar.arrayIndex] == "Y") /* this is it*/
    OP3REC.XOWCD = OM0BM001.XOWCD;
    return; /* ok*/
  end /* continue editing*/




   /* if promo warehouse and a team sales group code*/
   /* then skip service rep edit*/


  if (OM0BM001.XWHCD == "09") /* if promo warehouse*/
    if (OM0BM001.XOWCD == "45" /* and a team sales owner group code*/
     || OM0BM001.XOWCD == "55" 
     || OM0BM001.XOWCD == "65" 
     || OM0BM001.XOWCD == "75")
      set OM0BM001.XOWCD initialAttributes;
      OP3REC.XOWCD = OM0BM001.XOWCD;
      return;
    end
  end



    /* match owner code to userid and warehouse*/


  OMAREC.OMASUB = 1;
  OM0BW01.OM0BWFND = "N";

  while (XOLTBL.XSVCD[OMASUB] != 9999 /* while not end of table*/
   && XOLTBL.XWHCD[OMASUB] != "99" 
   && OM0BW01.OM0BWFND == "N")
    if (XOLTBL.XWHCD[OMASUB] == OM0BM001.XWHCD
     && XOLTBL.XSVCD[OMASUB] == OP1REC.OP1ENREP
     && XOLTBL.XXXSTAT[OMASUB] == "A")
      OM0BW01.OM0BWFND = "Y"; /* found entry*/
    else
      OMAREC.OMASUB = OMAREC.OMASUB + 1;
    end
  end


  if (OM0BW01.OM0BWFND == "N")
    converseLib.validationFailed(102);
                                   /* owner code no match to whs and userid*/
    OMAREC.OMAERR = "Y";
    set OM0BM001.XOWCD cursor, modified, bold;
    return;
  end







   /* now see that the xowcd is on the xoltbl record.*/
   /* first check the all owners flag.*/


  if (XOLTBL.XOLALLOF[OMASUB] == "Y")
    set OM0BM001.XOWCD initialAttributes;
    OP3REC.XOWCD = OM0BM001.XOWCD;
    return;
  end


  if (XOLTBL.XOWCD1[OMASUB] == OM0BM001.XOWCD)
    set OM0BM001.XOWCD initialAttributes;
    OP3REC.XOWCD = OM0BM001.XOWCD;
    return;
  end

  if (XOLTBL.XOWCD2[OMASUB] == OM0BM001.XOWCD)
    set OM0BM001.XOWCD initialAttributes;
    OP3REC.XOWCD = OM0BM001.XOWCD;
    return;
  end

  if (XOLTBL.XOWCD3[OMASUB] == OM0BM001.XOWCD)
    set OM0BM001.XOWCD initialAttributes;
    OP3REC.XOWCD = OM0BM001.XOWCD;
    return;
  end

  if (XOLTBL.XOWCD4[OMASUB] == OM0BM001.XOWCD)
    set OM0BM001.XOWCD initialAttributes;
    OP3REC.XOWCD = OM0BM001.XOWCD;
    return;
  end

  if (XOLTBL.XOWCD5[OMASUB] == OM0BM001.XOWCD)
    set OM0BM001.XOWCD initialAttributes;
    OP3REC.XOWCD = OM0BM001.XOWCD;
    return;
  end

  if (XOLTBL.XOWCD6[OMASUB] == OM0BM001.XOWCD)
    set OM0BM001.XOWCD initialAttributes;
    OP3REC.XOWCD = OM0BM001.XOWCD;
    return;
  end

  if (XOLTBL.XOWCD7[OMASUB] == OM0BM001.XOWCD)
    set OM0BM001.XOWCD initialAttributes;
    OP3REC.XOWCD = OM0BM001.XOWCD;
    return;
  end

  if (XOLTBL.XOWCD8[OMASUB] == OM0BM001.XOWCD)
    set OM0BM001.XOWCD initialAttributes;
    OP3REC.XOWCD = OM0BM001.XOWCD;
    return;
  end

  if (XOLTBL.XOWCD9[OMASUB] == OM0BM001.XOWCD)
    set OM0BM001.XOWCD initialAttributes;
    OP3REC.XOWCD = OM0BM001.XOWCD;
    return;
  end

  if (XOLTBL.XOWCD10[OMASUB] == OM0BM001.XOWCD)
    set OM0BM001.XOWCD initialAttributes;
    OP3REC.XOWCD = OM0BM001.XOWCD;
    return;
  end

  if (XOLTBL.XOWCD11[OMASUB] == OM0BM001.XOWCD)
    set OM0BM001.XOWCD initialAttributes;
    OP3REC.XOWCD = OM0BM001.XOWCD;
    return;
  end

  if (XOLTBL.XOWCD12[OMASUB] == OM0BM001.XOWCD)
    set OM0BM001.XOWCD initialAttributes;
    OP3REC.XOWCD = OM0BM001.XOWCD;
    return;
  end

  if (XOLTBL.XOWCD13[OMASUB] == OM0BM001.XOWCD)
    set OM0BM001.XOWCD initialAttributes;
    OP3REC.XOWCD = OM0BM001.XOWCD;
    return;
  end

  if (XOLTBL.XOWCD14[OMASUB] == OM0BM001.XOWCD)
    set OM0BM001.XOWCD initialAttributes;
    OP3REC.XOWCD = OM0BM001.XOWCD;
    return;
  end

  if (XOLTBL.XOWCD15[OMASUB] == OM0BM001.XOWCD)
    set OM0BM001.XOWCD initialAttributes;
    OP3REC.XOWCD = OM0BM001.XOWCD;
    return;
  end

  if (XOLTBL.XOWCD16[OMASUB] == OM0BM001.XOWCD)
    set OM0BM001.XOWCD initialAttributes;
    OP3REC.XOWCD = OM0BM001.XOWCD;
    return;
  end

  if (XOLTBL.XOWCD17[OMASUB] == OM0BM001.XOWCD)
    set OM0BM001.XOWCD initialAttributes;
    OP3REC.XOWCD = OM0BM001.XOWCD;
    return;
  end

  if (XOLTBL.XOWCD18[OMASUB] == OM0BM001.XOWCD)
    set OM0BM001.XOWCD initialAttributes;
    OP3REC.XOWCD = OM0BM001.XOWCD;
    return;
  end

  if (XOLTBL.XOWCD19[OMASUB] == OM0BM001.XOWCD)
    set OM0BM001.XOWCD initialAttributes;
    OP3REC.XOWCD = OM0BM001.XOWCD;
    return;
  end

  if (XOLTBL.XOWCD20[OMASUB] == OM0BM001.XOWCD)
    set OM0BM001.XOWCD initialAttributes;
    OP3REC.XOWCD = OM0BM001.XOWCD;
    return;
  end




    /* if got here didn't find xowcd in the 20 xowcd's*/
    /* of the xoltbl.*/


  OMAREC.OMAERR = "Y";
  converseLib.validationFailed(102); /* owner group not allowable*/
  set OM0BM001.XOWCD cursor, modified, bold;





end // end OM0BS81

// do demand reporting
Function OM0BS82()



    /* this routine does the following demand reporting*/
    /* functions based on events throughout the entry*/
    /* of the last line item.*/

       /* 1.  "QA" - quantity added after production deadline.*/
       /* 2.  "XD" - cancelled demand*/


    /* 1. quantity added*/

  if (OM0BW01.OM0BWBDF == "BS" /* if smart reservation*/
   || OM0BW01.OM0BWBDF == "BX") /* if flexible bulk*/
    /* next sentence*/
  else

    if (OM0BW01.OM0BWPAO == "Y") /* if item was a prod add on*/
      if (OP1REC.XOTCD in XOTTBL.XOTCD) /* if valid order type code*/
        if (XOTTBL.XOTFUTRF[sysVar.arrayIndex] == "Y") /* if futures order*/
          OM0BS8C(); /* load opurec*/
          OM0BS8D(); /* write opurec*/
        end
      end
    end
  end



    /* 2. cancel lost demand.*/

  if (OM0BM001.OM0BMFIL == "Y") /* if fill lost demand flag on*/
    set OPTREC empty;
    OM0BS8E(); /* load and write cancelled demand*/
                                   /* record*/
  end





  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* set data base*/


end // end OM0BS82

// wait one second
Function OM0BS84()




    /* this routine waits one second. used for deadlock*/
    /* error trapping.*/


  OM0BW01.OM0BWTM1 = VGVar.currentFormattedTime;
  OM0BW01.OM0BWTHL = OM0BW01.OM0BWTHF;
  OM0BW01.OM0BWTML = OM0BW01.OM0BWTMF;
  OM0BW01.OM0BWTSL = OM0BW01.OM0BWTSF;

  OM0BW01.OM0BWSS1 = OM0BW01.OM0BWTSL;
  OM0BW01.OM0BWMM1 = OM0BW01.OM0BWTML;

  OM0BW01.OM0BWSS1 = OM0BW01.OM0BWSS1 + 1;
  OM0BW01.OM0BWTM1 = VGVar.currentFormattedTime;

  while (OM0BW01.OM0BWTSL < OM0BW01.OM0BWSS1
   && OM0BW01.OM0BWTML <= OM0BW01.OM0BWMM1)
    OM0BW01.OM0BWTHL = OM0BW01.OM0BWTHF;
    OM0BW01.OM0BWTML = OM0BW01.OM0BWTMF;
    OM0BW01.OM0BWTSL = OM0BW01.OM0BWTSF;
    OM0BW01.OM0BWTM1 = VGVar.currentFormattedTime;
  end






end // end OM0BS84

// build rebook draw audit
Function OM0BS85()

       /* build the rebook draw audit record*/


  OPRREC.OP1PARTN = OP1REC.OP1PARTN;
  OPRREC.OP1CUOID = OP1REC.OP1CUOID;
  OPRREC.OP1NORID = OP1REC.OP1NORID;
  OPRREC.KUCCOID = OP1REC.KUCCOID;
  OPRREC.KUMSTRID = OP1REC.KUMSTRID;
  OPRREC.XNXCD = OP1REC.XNXCD;
  OPRREC.XGPCD = OP1REC.XGPCD;
  OPRREC.XDVCD = OP1REC.XDVCD;
  OPRREC.XSOCD = OP1REC.XSOCD;
  OPRREC.XOTCD = OP1REC.XOTCD;
  OPRREC.XWHCD = OP1REC.XWHCD;
  OPRREC.OP1CUNDT = OP1REC.OP1CUNDT;
  OPRREC.SM1AGYID = OP1REC.SM1AGYID;
  OPRREC.SM4REPID = OP1REC.SM4REPID;
  OPRREC.OPRAUDTP = "2";
  OPRREC.OP1BLKID = OP1REC.OP1BLKID;
  OPRREC.OP1RSVQF = "N";
  OPRREC.OP2LNINB = OP3REC.OP2LNINB;
  OPRREC.SY1STNBR = OP3REC.SY1STNBR;
  OPRREC.SY2CLRID = OP3REC.SY2CLRID;
  OPRREC.XDMCD = OP3REC.XDMCD;
  OPRREC.XUMCD = OP3REC.XUMCD;
  OPRREC.XOWCD = OP3REC.XOWCD;
  OPRREC.XSACD = OP3REC.XEGCD;
  OPRREC.XSDCD = OP3REC.PC2INSEG;
  OPRREC.XPGCD = OP3REC.XPGCD;
  OPRREC.XQACD = OP3REC.XQACD;
  OPRREC.OPRQTYTP = "1";
  OPRREC.OPRTRBKQ = OP3REC.OP2TONOQ;
  OPRREC.OP2NSIZE = 0;

  OMAREC.OMASUB1 = 1; /* set subscript*/
  while (OMAREC.OMASUB1 <= 40)
    if (OP3REC.OP3SZAFL[OMASUB1] == "Y") /* size is active*/
      OPRREC.OP3SZAFL[OMASUB1] = OP3REC.OP3SZAFL[OMASUB1];
      OPRREC.OPRRBKQT[OMASUB1] = OP3REC.OP3ONOQT[OMASUB1];
      OPRREC.OP2NSIZE = OPRREC.OP2NSIZE + 1;
    end

    OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
  end




  OPRREC.ZZZCHGDT = 0;
  OPRREC.ZZZCHGTM = 0;
  OPRREC.ZZZCHGCT = 0;



end // end OM0BS85

// write rebook audit record
Function OM0BS86()


       /* ************************************************/
       /* * this statement group writes the rebook audit **/
       /* * records for draw orders                      **/
       /* *************************************************/





  call "IO2720" ("A ", SQLCA, OPRREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1LOCAT[1] = "OP0MS86";
    TA1REC.TA1TBLVU = "VRBAUD01";
    TA1REC.TA1TBLKE = OP3REC.OP2KEY;
    TA1REC.TA1LOCAT[3] = "IO2720";
    TA1REC.TA1FUNC = "RETN";
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat; /* save the original sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes}; /* abend module*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user area*/
    COMMAREA.CATOAP = "MN0M"; /* go back to the o/m menu*/
    sysVar.transferName = "MN0M";
    transfer to transaction sysVar.transferName passing COMMAREA;
  end



   /* *******************************************************/
end // end OM0BS86

// db2-abend szrun add/update
Function OM0BS88()



      /* ***********************/
      /* check db2 return code*/
      /* ***********************/

  TA1REC.TA1LOCAT[2] = "OM0BS88"; /* error diag group name*/


  if (OPBREC.OPBSZRC < 0) /* if negative return code*/
    XSPF4(); /* return to master menu*/
    OM0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* bad transfer*/
    exit stack;
  else
    TA1REC.TA1DBASE = "DORDER"; /* data base name*/
    TA1REC.TA1TBLVU = "SZRUN "; /* table view*/
    TA1REC.TA1TBLKE = OP3REC.OP2KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "DB1000"; /* i/o mod*/
    OM0BS02(); /* common abend routine*/
  end



end // end OM0BS88

// xfer to other application
Function OM0BS89()
  OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* set up commarea for xfer*/
  OMWREC.XOMCD = "  ";
  COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
  COMMAREA.CAFROMAP = COMMAREA.CACURRAP;

   /* force xfer to AE09 if the new product was custom logo and then*/
   /* transfer back to where they wanted to go in the first place.*/
   /* note: NO UPDATES HAVE OCCURED AFTER A PF1 OR PF19.*/

  if (converseVar.eventKey is pf1) /* change maint reason code*/
    COMMAREA.CACURRAP = "OM0G";
    transfer to program "OM0G" passing COMMAREA;
  else
    if (converseVar.eventKey is pf19) /* skip update*/
      COMMAREA.CACURRAP = "OM0M";
      transfer to program "OM0M" passing COMMAREA;
    end
  end


  if (converseVar.eventKey is enter)
    if (SYCREC.XPRCD == "22"                /* custom logo*/
     && OM0BW01.OM0BW-NEW-PROD-ADDED == "Y" /* got a live one*/
     && OM0BW01.OM0BW-BULK-FL == "N")       /* not a bulk order*/
      set OPABREC empty;
      OPABREC.OPAB-SYS-GRP = OMWREC.OMWSGRP; /* hold OMWREC*/
      OPABREC.OP-ORD-PART-CHAR = OP1REC.OP1PARTN; /* part char*/
      OPABREC.OP-CUST-ORD-ID = OP1REC.OP1CUOID; /* order*/
      OPABREC.OP-LINE-ITEM-NBR = OP3REC.OP2LNINB; /* line item #*/
      OPABREC.SY-STY-NBR = OP3REC.SY1STNBR; /* style*/
      OPABREC.SY-COLR-CD-ID = OP3REC.SY2CLRID; /* color*/
      OPABREC.XDM-DIM-CD = OP3REC.XDMCD; /* dim*/
      COMMAREA.CAFROMAP = "OM0B"; /* from om0b*/
      COMMAREA.CACURRAP = "AE09"; /* going to AE09*/
      COMMAREA.CATOAP = "    "; /* blank since xsexit not used*/
      OPABREC.OPAB-TO-APPL = "OM0A"; /* RETURN BACK TO OM0A*/
   /* move pass record to commarea and do a non-standard transfer.*/
      COMMAREA.CA-USER-WORKAREA-4K = OPABREC.OPAB-COMMON-REC;
      sysVar.transferName = COMMAREA.CACURRAP;
      transfer to transaction sysVar.transferName passing COMMAREA;
    else
      COMMAREA.CACURRAP = "OM0A"; /* send to product header add*/
      transfer to program "OM0A" passing COMMAREA;
    end
  end



end // end OM0BS89

// lookup xowcd in xowtbl
Function OM0BS8A()


    /* look owner code up in xowtbl.*/


  XOWREC.XWHCD = OM0BM001.XWHCD;
  XOWREC.XOWCD = OM0BM001.XOWCD;

  if (XOWREC.XOWKEY in XOWTBL.XOWKEY /* if in table*/
   && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    set OM0BM001.XOWCD initialAttributes;
    OM0BM001.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
  else
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(101); /* owner group code not found on table*/
    set OM0BM001.XOWCD cursor, modified, bold;
  end



end // end OM0BS8A

// load opurec from op1rec, op3re
Function OM0BS8C()

  TA1REC.TA1LOCAT[2] = "OM0BS8C"; /* group level diags*/

  set OPUREC empty;

      /* ********************************************************/
      /* * load opurec for audit reporting*/
      /* ********************************************************/


  OPUREC.OPUAUDTP = "QA"; /* demand type*/
  OPUREC.XXXPGMNB = "OM0B"; /* program name*/
  OPUREC.OP1PARTN = OP3REC.OP1PARTN; /* part char*/
  OPUREC.OP1CUOID = OP3REC.OP1CUOID; /* cust ord id*/
  OPUREC.OP1NORID = OP3REC.OP1NORID; /* nike ord id*/
  OPUREC.OP2LNINB = OP3REC.OP2LNINB; /* line item number*/
  OPUREC.XGPCD = OP3REC.XGPCD; /* gen prod class*/
  OPUREC.SY1STNBR = OP3REC.SY1STNBR; /* style*/
  OPUREC.SY2CLRID = OP3REC.SY2CLRID; /* color*/
  OPUREC.XDMCD = OP3REC.XDMCD; /* dimension*/
  OPUREC.XQACD = OP3REC.XQACD; /* quality code*/
  OPUREC.XOWCD = OP3REC.XOWCD; /* owner group*/
  OPUREC.XOMCD = OM0BM001.XOMCD; /* maint reason req'd*/
  OPUREC.XOTCD = OP1REC.XOTCD; /* order type*/
  OPUREC.OP1CUNDT = OP1REC.OP1CUNDT; /* map need date*/
  OPUREC.XWHCD = OP1REC.XWHCD; /* whse*/
  OPUREC.XDVCD = OP1REC.XDVCD; /* division*/

  OPUREC.ZZZSDT = OMAREC.OMACDT; /* date*/
  OPUREC.ZZZSTM = OM0BW01.OM0BWTM3; /* time*/

      /* ********************************************************/
      /* * load opurec qtys from op3rec for audit reporting*/
      /* ********************************************************/

  OM0BW01.OM0BWSBR = 1; /* first active size*/
  while (OM0BW01.OM0BWSBR <= 40) /* record le last active size*/
    if (OP3REC.OP3SZAFL[OM0BWSBR] == "Y") /* size active*/
      OPUREC.OPUAUDQT[OM0BWSBR] = OP3REC.OP3ONOQT[OM0BWSBR];
    else
      OPUREC.OPUAUDQT[OM0BWSBR] = 0;
    end
    OM0BW01.OM0BWSBR = OM0BW01.OM0BWSBR + 1;
  end




end // end OM0BS8C

// write report record
Function OM0BS8D()

  TA1REC.TA1LOCAT[2] = "OM0BS8D"; /* group level diags*/

    /* this routine writes dorder.voraud01 records.*/


  call "IO3210" ("A ", SQLCA, OPUREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1LOCAT[1] = "OM0BS8D";
    TA1REC.TA1TBLVU = "VORAUD01";
    OM0BW01.OM0BWTK1 = OPUREC.OP1CUOID; /* diagnostics*/
    OM0BW01.OM0BWTK2 = OPUREC.OP1NORID; /* diagnostics*/
    OM0BW01.OM0BWTK3 = OPUREC.OPUAUDTP; /* diagnostics*/
    OM0BW01.OM0BWTK4 = OPUREC.SY1STNBR; /* diagnostics*/
    OM0BW01.OM0BWTK5 = OPUREC.SY2CLRID; /* diagnostics*/
    TA1REC.TA1TBLKE = OM0BW01.OM0BWT1; /* diagnostics*/
    TA1REC.TA1LOCAT[3] = "IO3210";
    XSOPS02(); /* common abend*/
  end



end // end OM0BS8D

// load&write xd cancel dmd rec
Function OM0BS8E()

  OPTREC.OPTDMND = "XD";
  OPTREC.XDVCD = OP1REC.XDVCD;
  OPTREC.XSOCD = OP1REC.XSOCD;
  OPTREC.XOTCD = OP1REC.XOTCD;
  OPTREC.XWHCD = OP1REC.XWHCD;
  OPTREC.OP1PARTN = OP3REC.OP1PARTN;
  OPTREC.OP1CUOID = OP3REC.OP1CUOID;
  OPTREC.OP1CUNDT = OP1REC.OP1CUNDT;
  OPTREC.KUCCOID = OP1REC.KUCCOID;
  OPTREC.KUMSTRID = OP1REC.KUMSTRID;
  OPTREC.XNXCD = OP1REC.XNXCD;
  OPTREC.XGPCD = OP3REC.XGPCD;
  OPTREC.SY1STNBR = OP3REC.SY1STNBR;
  OPTREC.SY2CLRID = OP3REC.SY2CLRID;
  OPTREC.XDMCD = OP3REC.XDMCD;
  OPTREC.OP1TBREP = OP1REC.OP1TBREP; /* taken by rep*/
  OPTREC.OP1ORDBY = " ";
  OPTREC.XXXPHN = " ";
  OPTREC.OPTWAITF = "N";
  OPTREC.OPTDRPDT = 0;
  OPTREC.ZZZSDT = OMAREC.OMACDT;
  OPTREC.ZZZSTM = OM0BW01.OM0BWTM3;

  OM0BW01.OM0BWSBR = 1; /* first active size*/
  while (OM0BW01.OM0BWSBR <= 40)
    if (OP3REC.OP3SZAFL[OM0BWSBR] == "Y") /* size active*/
      OPTREC.OPTDMDQT[OM0BWSBR] = OP3REC.OP3ONOQT[OM0BWSBR];
      OPTREC.OPTDMDQT[OM0BWSBR] = OPTREC.OPTDMDQT[OM0BWSBR] * -1;
    else
      OPTREC.OPTDMDQT[OM0BWSBR] = 0;
    end
    OM0BW01.OM0BWSBR = OM0BW01.OM0BWSBR + 1;
  end


  call "IO3070" ("A ", SQLCA, OPTREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1LOCAT[1] = "OM0BS8E";
    TA1REC.TA1TBLVU = "VLOST001";
    TA1REC.TA1TBLKE = OPTREC.SY1STNBR;
    TA1REC.TA1LOCAT[3] = "IO3070";
    XSOPS02(); /* common abend*/
  end
end // end OM0BS8E

// db2-add szrun record
Function OM0BS90()



    /* this routine add the op3rec just built.*/


  OMAREC.OMASUB2 = 0;

  while (OMAREC.OMASUB2 < 6)
    OMAREC.OMASUB2 = OMAREC.OMASUB2 + 1;
    TA1REC.TA1LOCAT[2] = "OM0BS90"; /* error diag group name*/
    OP8REC.OP8TASK = "A ";
    OP8REC.OP8LOCAT[1] = "OM0B060";
    OP8REC.OP8LOCAT[2] = "OM0BS90";
    OP8REC.OP8LOCAT[3] = " ";
    OP8REC.OP8LOCAT[4] = " ";
    OP8REC.OP8MAP = "OM0BM001";
    call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod - add*/
    if (OPBREC.OPBSZRC == 0) /* check for good return*/
      OMAREC.OMASUB2 = 9; /* good write*/
    else
      if (OPBREC.OPBSZRC == -911) /* if deadlock*/
        OM0BS84(); /* wait a second*/
      else
        OM0BS88(); /* common abend routine*/
      end
    end
  end





  if (OMAREC.OMASUB2 == 6) /* deadlock too many times*/
    converseLib.validationFailed(6); /* system busy - try again*/
    exit stack;
  end




end // end OM0BS90

// db2-szrun select
Function OM0BS91()



      /* ********************************************************/
      /* * set up key to read data base*/
      /* ********************************************************/

  TA1REC.TA1LOCAT[2] = "OM0BS91"; /* error diag - group name*/


  OP3REC.OP1PARTN = OP1REC.OP1PARTN; /* partition*/
  OP3REC.OP1CUOID = OP1REC.OP1CUOID; /* customer order*/

      /* set-up of op1norid & op2lninb*/
      /* done before come here*/


      /* **************************************/
      /* * set up parm record for formatter*/
      /* **************************************/

  OP8REC.OP8TASK = "S "; /* single select*/

  OP8REC.OP8LOCAT[1] = "OM0B030"; /* process name*/
  OP8REC.OP8LOCAT[2] = "OM0BS91"; /* group name*/
  OP8REC.OP8LOCAT[3] = " "; /* filler*/
  OP8REC.OP8MAP = "OM0BM001"; /* map name*/



      /* ***************/
      /* * read db2*/
      /* ***************/

  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod - single selct*/


      /* check db2 return code*/

  if (OPBREC.OPBSZRC == 0 /* check for good return*/
   || OPBREC.OPBSZRC == 1) /* or not found*/
    /* next sentence*/
  else
    OM0BS88(); /* common error routine*/
  end


  if (OPBREC.OPBSZRC == 0) /* good return*/
    /* next sentence*/
  else
    OMAREC.OMAERR = "Y"; /* reject product*/
    OM0BW01.OM0BWREJ = "Y";
    converseLib.validationFailed(173); /* prod not on data base, hit enter*/
    exit stack;
  end



end // end OM0BS91

// db2-prod style,color,size recs
Function OM0BS94()



      /* ********************************************************/
      /* * read db2 for the product's style,color & size recs  **/
      /* * this is a combined view of 3 records.               **/
      /* ********************************************************/

  TA1REC.TA1LOCAT[2] = "OM0BS94"; /* error diag group name*/

      /* set up read key*/

  SYCREC.XGPCD = OP3REC.XGPCD; /* general product class*/
  SYCREC.SY1STNBR = OP3REC.SY1STNBR; /* style*/
  SYCREC.SY2CLRID = OP3REC.SY2CLRID; /* color*/
  SYCREC.XDMCD = OP3REC.XDMCD; /* dimension*/


      /* read db2*/

  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for single select*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good return*/
   || SQLCA.VAGen_SQLCODE == 100) /* or rec not found*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DPROD"; /* data base name*/
    TA1REC.TA1TBLVU = "VCOLOR04"; /* table view*/
    TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "IO0560"; /* i/o mod*/
    OM0BS02(); /* common abend routine*/
  end


      /* if product record(s) not found*/

  if (SQLCA.VAGen_SQLCODE == 100) /* reject product*/
    set SYCREC empty;
    converseLib.validationFailed(131); /* not valid style, color*/
    OMAREC.OMAERR = "Y";
    OM0BW01.OM0BWREJ = "Y"; /* set reject product flag*/
    exit stack;
  end


    /* -- Added for Canada --*/

  if (SQLCA.VAGen_SQLCODE == 0 /**/
   && OP1REC.XDZ-DATA-DIST-CD == "CA")
    set WSY2000 empty;
    WSY2000.XDR-PROD-REG-CD = "05";
    OM0BS-SEL-SY2000();
    if (WSY2000.WSY2000-RETURN-CODE == "98")
      set SYCREC empty;
      converseLib.validationFailed(10); /* database is busy*/
      OMAREC.OMAERR = "Y";
      OM0BW01.OM0BWREJ = "Y"; /* set reject product flag*/
      exit stack;
    end
    if (OM0BW01.OM0BW-WSY2000-FND-FLAG == "N")
      set SYCREC empty;
      converseLib.validationFailed(131); /* not valid style, color*/
      OMAREC.OMAERR = "Y";
      OM0BW01.OM0BWREJ = "Y"; /* set reject product flag*/
      exit stack;
    end

    /* -- Added for US apparel --*/

  else
    if (SQLCA.VAGen_SQLCODE == 0 /**/
     && OP1REC.XGPCD == "03")   

      if (COMMAREA.XDVCD == "02" /* userid assigned to europe*/
       || COMMAREA.XDVCD == "03") /* userid assigned to asia*/
      /* continue processing*/
      else
        set WSY2000 empty;
        WSY2000.XDR-PROD-REG-CD = "01";
        OM0BS-SEL-SY2000();
        if (WSY2000.WSY2000-RETURN-CODE == "98")
          set SYCREC empty;
          converseLib.validationFailed(10); /* database is busy*/
          OMAREC.OMAERR = "Y";
          OM0BW01.OM0BWREJ = "Y"; /* set reject product flag*/
          exit stack;
        end
        if (OM0BW01.OM0BW-WSY2000-FND-FLAG == "N")
          set SYCREC empty;
          converseLib.validationFailed(131); /* not valid style, color*/
          OMAREC.OMAERR = "Y";
          OM0BW01.OM0BWREJ = "Y"; /* set reject product flag*/
          exit stack;
        end
      end
    end
  end



end // end OM0BS94

// db2 selct/edit substit.product
Function OM0BS95()



      /* *****************************************/
      /* * read db2 for the substitute product's*/
      /* * style,color & size recs*/
      /* * this is a combined view of 3 records.*/
      /* *****************************************/

  TA1REC.TA1LOCAT[2] = "OM0BS95"; /* error diag group name*/


  if (OM0BM001.OP2SSTYN == " " /* change to blank is o.k.*/
   && OM0BM001.OP2SCLCD == " " 
   && OM0BM001.OP2SDMCD == " ")
    OP3REC.OP2SSTYN = OM0BM001.OP2SSTYN; /* hold good subs.prod*/
    OP3REC.OP2SCLCD = OM0BM001.OP2SCLCD;
    OP3REC.OP2SDMCD = OM0BM001.OP2SDMCD;
    set OM0BM001.OP2SSTYN initialAttributes;
    set OM0BM001.OP2SCLCD initialAttributes;
    set OM0BM001.OP2SDMCD initialAttributes;
    return;
  end

      /* set up read key using substitute prod #*/

  SYCREC.XGPCD = OP3REC.XGPCD; /* general product class*/
  SYCREC.SY1STNBR = OM0BM001.OP2SSTYN; /* style*/
  SYCREC.SY2CLRID = OM0BM001.OP2SCLCD; /* color*/
  if (OM0BM001.OP2SDMCD == " ") /* phase 1 has blank input*/
    SYCREC.XDMCD = "00"; /* with zero on data base*/
  else
    SYCREC.XDMCD = OM0BM001.OP2SDMCD; /* dimension*/
  end


      /* read db2*/

  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for single select*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good return*/
   || SQLCA.VAGen_SQLCODE == 100) /* or rec not found*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DPROD"; /* data base name*/
    TA1REC.TA1TBLVU = "VCOLOR04"; /* table view*/
    TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "IO0560"; /* i/o mod*/
    OM0BS02(); /* common abend routine*/
  end


  if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(162); /* substitution style not found*/
    set OM0BM001.OP2SSTYN cursor, modified, bold;
    set OM0BM001.OP2SCLCD modified, bold;
    set OM0BM001.OP2SDMCD modified, bold;
    return;
  else
    OP3REC.OP2SSTYN = OM0BM001.OP2SSTYN; /* hold good subs.prod*/
    OP3REC.OP2SCLCD = OM0BM001.OP2SCLCD;
    OP3REC.OP2SDMCD = OM0BM001.OP2SDMCD;
    set OM0BM001.OP2SSTYN initialAttributes;
    set OM0BM001.OP2SCLCD initialAttributes;
    set OM0BM001.OP2SDMCD initialAttributes;
    if (OP1REC.XDZ-DATA-DIST-CD == "CA") /* added for Canada*/
      set WSY2000 empty;
      WSY2000.XDR-PROD-REG-CD = "05";
      OM0BS-SEL-SY2000();
      if (WSY2000.WSY2000-RETURN-CODE == 98)
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(10); /* database is busy*/
        set OM0BM001.OP2SSTYN cursor, modified, bold;
        set OM0BM001.OP2SCLCD modified, bold;
        set OM0BM001.OP2SDMCD modified, bold; /* active in ph 2*/
        return;
      end
      if (OM0BW01.OM0BW-WSY2000-FND-FLAG == "N")
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(162); /* substitution style not found*/
        set OM0BM001.OP2SSTYN cursor, modified, bold;
        set OM0BM001.OP2SCLCD modified, bold;
        set OM0BM001.OP2SDMCD modified, bold; /* active in ph 2*/
        return;
      end
    else
      if (OP1REC.XGPCD == "03") /* added for US apparel*/
        if (COMMAREA.XDVCD == "02" /* userid assigned to europe*/
         || COMMAREA.XDVCD == "03") /* userid assigned to asia*/
         /* continue processing*/
        else
          set WSY2000 empty;
          WSY2000.XDR-PROD-REG-CD = "01";
          OM0BS-SEL-SY2000();
          if (WSY2000.WSY2000-RETURN-CODE == 98)
            OMAREC.OMAERR = "Y";
            converseLib.validationFailed(10); /* database is busy*/
            set OM0BM001.OP2SSTYN cursor, modified, bold;
            set OM0BM001.OP2SCLCD modified, bold;
            set OM0BM001.OP2SDMCD modified, bold; /* active in ph 2*/
            return;
          end
          if (OM0BW01.OM0BW-WSY2000-FND-FLAG == "N")
            OMAREC.OMAERR = "Y";
            converseLib.validationFailed(162); /* substitution style not found*/
            set OM0BM001.OP2SSTYN cursor, modified, bold;
            set OM0BM001.OP2SCLCD modified, bold;
            set OM0BM001.OP2SDMCD modified, bold; /* active in ph 2*/
            return;
          end
        end
      end
    end
  end



  OP3REC.OP2PRDSF = "N"; /* init to no subs.*/
  if (OP3REC.OP2SSTYN != " ")
    OP3REC.OP2PRDSF = "Y"; /* mark product is substitute*/
  end



end // end OM0BS95

// db2-get size scale descrips
Function OM0BS96()



      /* ********************************************************/
      /* * read db2 for the product's size scale code          **/
      /* * this give us a record with 40 size descriptions     **/
      /* ********************************************************/

  TA1REC.TA1LOCAT[2] = "OM0BS96"; /* error diag group name*/

      /* set up read key*/

  SY4REC.SY4SZSCL = SYCREC.SY4SZSCL; /* scale code*/


      /* read db2*/

  call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for single select*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good return*/
   || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DPROD"; /* data base name*/
    TA1REC.TA1TBLVU = "VSCALE01"; /* table view*/
    TA1REC.TA1TBLKE = SY4REC.SY4SZSCL; /* key value*/
    TA1REC.TA1LOCAT[3] = "IO0040"; /* i/o mod*/
    OM0BS02(); /* common abend routine*/
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* if scale code not found*/
    sysVar.arrayIndex = 1;
    while (sysVar.arrayIndex < 41) /* move constant to all size descrips*/
      SY4REC.SY4IDDSC[sysVar.arrayIndex] = "UNKWN";
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    end
  end




end // end OM0BS96

// db2-product prices
Function OM0BS97()



      /* common read of product price data base*/


  TA1REC.TA1LOCAT[2] = "OM0BS97"; /* error diag group name*/

      /* *******************************************************/
      /* * set up data base key, color&size from calling place*/
      /* *******************************************************/

  SY5REC.XGPCD = OP3REC.XGPCD; /* general prod.class*/
  SY5REC.SY1STNBR = OP3REC.SY1STNBR; /* style*/
  if (OP1REC.XDVCD == "02") /* if nil customer*/
    if (OM0BW01.XAUCD == "33") /* if cust's acct class 33*/
      SY5REC.XPYCD = VNLXPY01.XPYCD; /* use nimrec's price type cd*/
    else /* otherwise acct class 31, 32 or accnt*/
                                   /* type 06*/
      SY5REC.XPYCD = IVEREC.IVEPCTYP; /* use invspec's price tpe cd*/
    end
  else /* domestic orders*/
    SY5REC.XPYCD = XOTTBL.XPYCD[OM0BWSBO]; /* use prc typ cd from xot*/
  end

  if (OP1REC.XDVCD == "02" /* if nil*/
   && OP3REC.XQACD == "02") /* if b-grade product*/
    SY5REC.XQACD = "01"; /* quality code*/
  else
    SY5REC.XQACD = OP3REC.XQACD; /* quality code*/
  end


    /* --added for canada--*/

  if (OP1REC.XDZ-DATA-DIST-CD == "CA") /* country code*/
    SY5REC.XCT-CTRY-CD = "CANA";
  else
    SY5REC.XCT-CTRY-CD = "USA";
  end

  if (OP1REC.ZFC-CRCY-CD != " ")
    SY5REC.ZFC-CRCY-CD = OP1REC.ZFC-CRCY-CD; /* currency code*/
  else
    SY5REC.ZFC-CRCY-CD = "USD"; /* currency code*/
  end

      /* db2 read*/

  call "IO0380" ("S ", SQLCA, SY5REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for single select*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good return*/
   || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
    return;
  else
    TA1REC.TA1DBASE = "DPROD"; /* data base name*/
    TA1REC.TA1TBLVU = "VPRICE01"; /* table view*/
    TA1REC.TA1TBLKE = SY5REC.SY5KEY; /* key value*/
    TA1REC.TA1LOCAT[4] = "IO0380"; /* i/o mod*/
    XSOPS02(); /* common abend routine*/
  end



end // end OM0BS97

// db2-sales pgm order type read
Function OM0BS98()



      /* *****************************************/
      /* * get sales program order type record*/
      /* *****************************************/

  TA1REC.TA1LOCAT[2] = "OM0BS98"; /* error diag group name*/


      /* note - key set up from order header op1rec*/
      /* in op0is10, general initialization*/


  call "IO0080" ("S ", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VORTYP01"; /* table view*/
    TA1REC.TA1TBLKE = SP2REC.SP2KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "IO0080  "; /* i/o mod name*/
    OM0BS02(); /* common abend*/
  end


      /* if not found, then error*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    converseLib.validationFailed(025); /* sls pgm id is not valid for ord type*/
    OMAREC.OMAERR = "Y";
    OM0BW01.OM0BWREJ = "Y"; /* reject product*/
    exit stack;
  end


  OMWREC.OMWSPCHK = "N";





end // end OM0BS98

// db2-sales pgm product prices
Function OM0BS99()



      /* ************************************************/
      /* * get sales program product pricing record*/
      /* ************************************************/

  TA1REC.TA1LOCAT[2] = "OM0BS99"; /* error diag group name*/


  SP5REC.SP1ID = SP2REC.SP1ID; /* set-up key for prod price*/
  SP5REC.XGPCD = OP1REC.XGPCD;
  SP5REC.SY1STNBR = OMWREC.SY1STNBR;
  SP5REC.SY2CLRID = OMWREC.SY2CLRID;
  SP5REC.XDMCD = OMWREC.XDMCD;


  call "IO0110" ("S ", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
       /* try reading generic color record*/
      SP5REC.SY2CLRID = "***";
      SP5REC.XDMCD = "**";
      call "IO0110" ("S ", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes}; /* 2nd read try*/
      if (SQLCA.VAGen_SQLCODE == 0
       || SQLCA.VAGen_SQLCODE == 100)
        SP5REC.SY2CLRID = OMWREC.SY2CLRID;
        SP5REC.XDMCD = OMWREC.XDMCD;
         /* next sentence*/
      else
        TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
        TA1REC.TA1TBLVU = "VPROD001"; /* table view*/
        TA1REC.TA1TBLKE = SP5REC.SP5KEY; /* key value*/
        TA1REC.TA1LOCAT[3] = "IO0110  "; /* i/o mod name*/
        OM0BS02(); /* common abend*/
      end
    else
      TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
      TA1REC.TA1TBLVU = "VPROD001"; /* table view*/
      TA1REC.TA1TBLKE = SP5REC.SP5KEY; /* key value*/
      TA1REC.TA1LOCAT[3] = "IO0110  "; /* i/o mod name*/
      OM0BS02(); /* common abend*/
    end
  end


      /* if not found, leave flag = n (from init w-s)*/

  if (SQLCA.VAGen_SQLCODE == 0) /* found prod prices*/
    OM0BW01.OM0BWSPP = "Y";
  end



end // end OM0BS99

// db2-check if duplicate szrun
Function OM0BS9A()



      /* **********************************************/
      /* * check if duplicate record already on db2*/
      /* **********************************************/

  TA1REC.TA1LOCAT[2] = "OM0BS9A"; /* error diag - group name*/


      /* ****************************************************/
      /* * move data to opckey to read item view vitem003.*/
      /* * this view contains only op-ord-part-char,*/
      /* * op-cust-ord-id, op-nike-ord-id, xgp-gpc-cd,*/
      /* * sy-sty-nbr, sy-colr-cd-id, xdm-dim-cd,*/
      /* * op-coor-grp-cd, xum code and xow code.*/
      /* ****************************************************/

  OPCREC.OP1PARTN = OP3REC.OP1PARTN;
  OPCREC.OP1CUOID = OP3REC.OP1CUOID;
  OPCREC.OP1NORID = OP3REC.OP1NORID;
  OPCREC.XGPCD = OP3REC.XGPCD;
  OPCREC.SY1STNBR = OP3REC.SY1STNBR;
  OPCREC.SY2CLRID = OP3REC.SY2CLRID;
  OPCREC.XDMCD = OP3REC.XDMCD;
  if (OP1REC.XDVCD == "03" /* duplicate products allowed for*/
   && OP1REC.XBDCD == "0") /* division 03 regular orders only*/
    OPCREC.XUMCD = OP3REC.XUMCD;
    OPCREC.XOWCD = OP3REC.XOWCD;
  else
    OPCREC.XUMCD = "**";
    OPCREC.XOWCD = "**";
  end
  OPCREC.OP2CGPCD = OP3REC.OP2CGPCD;


      /* ***************/
      /* * read db2*/
      /* ***************/

  call "IO0570" ("S ", SQLCA, OPCREC) {isNoRefresh = yes, isExternal = yes};


      /* **************************/
      /* * check db2 return code*/
      /* **************************/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good return=duplicate*/
   || SQLCA.VAGen_SQLCODE == 100) /* or not found=not duplicate*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER"; /* data base name*/
    TA1REC.TA1TBLVU = "VITEM003"; /* table view*/
    TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "IO0570"; /* i/o mod*/
    OM0BS02(); /* common abend routine*/
  end


  if (SQLCA.VAGen_SQLCODE == 0) /* found key, may be duplicate*/
    OMAREC.OMAERR = "Y"; /* product, reject product*/
    converseLib.validationFailed(187); /* duplicate, can not add*/
    if (OM0BW01.OM0BWBDF == "BC" /* if bulk*/
     || OM0BW01.OM0BWBDF == "BS" 
     || OM0BW01.OM0BWBDF == "BX" 
     || OM0BW01.OM0BWBDF == "BN")
      exit stack; /* skip highlighting*/
    end
    /* SET OM0BM001.OP2CGPCD CURSOR,MODIFIED,BRIGHT; coord group*/
     /* SET OM0BM001.XWHCD MODIFIED,BRIGHT; warehouse*/
     /* SET OM0BM001.OM0BMNDT MODIFIED,BRIGHT; need date*/
    if (OM0BW01.OM0BWDPF == "Y")
      OM0BW01.OM0BWREJ = "Y"; /* reject the product on second time*/
    end
    OM0BW01.OM0BWDPF = "Y";
    exit stack;
  end



end // end OM0BS9A

// read company record for xaucd
Function OM0BS9C()


      /* this routine reads the company record to obtain the*/
      /* account class (xaucd).  account class is used to*/
      /* to determine whether a price override is valid*/


  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[3] = "IO0240  ";
    TA1REC.TA1DBASE = "KUCREC  ";
    TA1REC.TA1TBLVU = "VCMPNY01";
    OM0BW01.OM0BWTK1 = KUCREC.KUCCOID;
    OM0BW01.OM0BWTK1 = KUCREC.KUCCOID;
    TA1REC.TA1TBLKE = OM0BW01.OM0BWTK1;
    XSOPS02(); /* abend*/
  end





end // end OM0BS9C

// read nimrec for price code
Function OM0BS9D()



      /* ***************************************************/
      /* * get the price code from nimrec*/
      /* ***************************************************/



  OM0BS9E(); /* get the summary base order type*/

  if (OM0BW01.OM0BWZPR == "Y") /* if zero price flag set and ot not*/
                                   /* found*/
     /* next sentence*/
  else /* otherwise get nimrec*/
    OM0BS9L(); /* get acct reg cd from dnilo.vdstrb01*/
    VNLXPY01.ZARCD = VDSTRB01.ZARCD; /* acct reg. code*/
    VNLXPY01.KUCCOID = OP1REC.KUCCOID; /* customer*/
    VNLXPY01.ZFCCD = " "; /* currancy code*/
    VNLXPY01.YSMXOB = YSMREC.YSMSUMCD; /* sum base order type code*/
    VNLXPY01.XGPCD = OP1REC.XGPCD; /* gen prod class code*/


    call "IO4500" ("SF", SQLCA, VNLXPY01) {isNoRefresh = yes, isExternal = yes};


    if (SQLCA.VAGen_SQLCODE == 0) /* all ok if found*/
       /* next sentence*/
    else /* else*/
      if (SQLCA.VAGen_SQLCODE == 100) /* if price type code not found*/
        OM0BW01.OM0BWZPR = "Y"; /* force zero prices*/
      else /* else abend*/
        TA1REC.TA1LOCAT[2] = "OM0BS9D";
        TA1REC.TA1DBASE = "DNILO   "; /* data base name*/
        TA1REC.TA1TBLVU = "VNLXPY01"; /* table view*/
        OM0BW01.OM0BWNI1 = VNLXPY01.XGPCD; /* format key cuz*/
        OM0BW01.OM0BWNI2 = VNLXPY01.YSMXOB; /* kuccoid*/
        OM0BW01.OM0BWNI3 = VNLXPY01.ZARCD; /* is binary*/
        OM0BW01.OM0BWNI4 = VNLXPY01.KUCCOID;
        OM0BW01.OM0BWNI5 = VNLXPY01.ZFCCD;
        TA1REC.TA1TBLKE = OM0BW01.OM0BWNIM; /* move key to ta1rec*/
        TA1REC.TA1LOCAT[3] = "IO4500  "; /* i/o mod name*/
        XSOPS02(); /* common db abend*/
      end
    end

  end


end // end OM0BS9D

// read summary base order type
Function OM0BS9E()


      /* this routine reads the summary base order type table*/
      /* to convert the base order type to summary base order*/
      /* type.  this is part of the key to the international*/
      /* price type code table (nimrec).*/


  YSMREC.YSMTBLPF = "XOB"; /* table name of xob*/
  YSMREC.YSMSYSPF = "NL"; /* international system*/
  YSMREC.YSMSUMID = 2;
  YSMREC.YSMSUMCD = "**"; /* wild card for sum xob*/
  YSMREC.YSMSRCVL = OP1REC.XOBCD; /* order's base order type*/

  call "IO2640" ("S1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* declare & open cursor*/

  if (SQLCA.VAGen_SQLCODE == 0) /* all ok*/
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "S1      ";
    TA1REC.TA1LOCAT[2] = "OM0BS9E ";
    TA1REC.TA1LOCAT[3] = "IO2640  ";
    TA1REC.TA1DBASE = "DCORP   ";
    TA1REC.TA1TBLVU = "VSUMCD01";
    TA1REC.TA1TBLKE = YSMREC.YSMGRP;
    XSOPS02(); /* abend*/
  end


  call "IO2640" ("N1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* fetch record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if found, ok*/
     /* next sentence*/
  else /* else*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if none found*/
      OM0BW01.OM0BWZPR = "Y"; /* force zero price*/
    else /* else*/
      TA1REC.TA1LOCAT[1] = "N1      "; /* if other problems*/
      TA1REC.TA1LOCAT[2] = "OM0BS9E "; /* abend*/
      TA1REC.TA1LOCAT[3] = "IO2640  ";
      TA1REC.TA1DBASE = "DCORP   ";
      TA1REC.TA1TBLVU = "VSUMCD01";
      TA1REC.TA1TBLKE = YSMREC.YSMGRP;
      XSOPS02();
    end
  end


  while (SQLCA.VAGen_SQLCODE == 0 /* while record found*/
   && YSMREC.XXXSTAT != "A") /* but status not active*/
    call "IO2640" ("N1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* fetch next record*/

    if (SQLCA.VAGen_SQLCODE == 0 /* all ok*/
     || SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1LOCAT[1] = "N1      "; /* if other problems*/
      TA1REC.TA1LOCAT[2] = "OM0BS9E "; /* abend*/
      TA1REC.TA1LOCAT[3] = "IO2640  ";
      TA1REC.TA1DBASE = "DCORP   ";
      TA1REC.TA1TBLVU = "VSUMCD01";
      TA1REC.TA1TBLKE = YSMREC.YSMGRP;
      XSOPS02();
    end
  end


  if (YSMREC.XXXSTAT == "A") /* if active sum base ot found*/
      /* next sentence                ;    all ok*/
  else /* otherwise*/
    OM0BW01.OM0BWZPR = "Y"; /* force zero price*/
  end


  call "IO2640" ("C1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "C1      "; /* if problems*/
    TA1REC.TA1LOCAT[2] = "OM0BS9E "; /* abend*/
    TA1REC.TA1LOCAT[3] = "IO2640  ";
    TA1REC.TA1DBASE = "DCORP   ";
    TA1REC.TA1TBLVU = "VSUMCD01";
    TA1REC.TA1TBLKE = YSMREC.YSMGRP;
    XSOPS02();
  end
end // end OM0BS9E

// db2-add nil 0 price tag rec
Function OM0BS9F()



      /* ******************************************************/
      /* * write a tag record when a nil footwear or apparel*/
      /* * futures order whose product is in development*/
      /* * so the price was forced to zero*/
      /* * these are read by batch pgm op3400 that will update*/
      /* * the price when the product becomes active*/
      /* ******************************************************/


  OEBREC.XGPCD = OP3REC.XGPCD;
  OEBREC.SY1STNBR = OP3REC.SY1STNBR;
  OEBREC.SY2CLRID = OP3REC.SY2CLRID;
  OEBREC.XDMCD = OP3REC.XDMCD;
  OEBREC.ZZZSDT = OP3REC.ZZZCHGDT;
  OEBREC.ZZZSTM = OP3REC.ZZZCHGTM;


  call "IO4590" ("A ", SQLCA, OEBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VZPRIC01";
    TA1REC.TA1TBLKE = OEBREC.OEBGROUP;
    TA1REC.TA1LOCAT[3] = "OM0BS9F";
    TA1REC.TA1LOCAT[4] = "IO4590";
    XSOPS02(); /* abort program*/
  end



end // end OM0BS9F

// db2 - invoicing specialty tbl
Function OM0BS9G()



      /* *************************************************/
      /* * get the price or cost type code from invoicing*/
      /* *    specialty table*/
      /* *************************************************/


  IVEREC.XOTCD = OP1REC.XOTCD;

  call "IO1450" ("SF", SQLCA, IVEREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OM0BW01.OM0BWZPR = "Y"; /* force zero prices*/
    else
      TA1REC.TA1LOCAT[1] = "SF      ";
      TA1REC.TA1LOCAT[2] = "OM0BS9G ";
      TA1REC.TA1LOCAT[3] = "IO1450  ";
      TA1REC.TA1DBASE = "DINVC   ";
      TA1REC.TA1TBLVU = "VSPECL01";
      OM0BW01.OM0BWT1 = " ";
      OM0BW01.OM0BWTK3 = IVEREC.XATCD;
      OM0BW01.OM0BWTK4 = IVEREC.XAUCD;
      OM0BW01.OM0BWTK5 = IVEREC.XOTCD;
      TA1REC.TA1TBLKE = OM0BW01.OM0BWT1;
      XSOPS02();
    end
  end




end // end OM0BS9G

// get style/color & color cost
Function OM0BS9H()



      /* *******************************************************/
      /* * read db2 cost by style, color and dimension*/
      /* *******************************************************/


  OM0BS9I(); /* db2 read cost*/


  if (SQLCA.VAGen_SQLCODE == 0) /* if cost record found,*/
    OM0BS9J(); /* pick out cost effec today (from 6 possible)*/
    if (sysVar.arrayIndex < 7)
      OM0BW01.OM0BWCLP = SY6REC.SY6CSTUN[sysVar.arrayIndex]; /* hold cost*/
    end
  end




end // end OM0BS9H

// db2 - read product cost
Function OM0BS9I()





      /* ***********************/
      /* * set up data base key*/
      /* ***********************/

  SY6REC.XGPCD = OP3REC.XGPCD; /* general prod.class*/
  SY6REC.SY1STNBR = OP3REC.SY1STNBR; /* style*/
  SY6REC.SY2CLRID = OP3REC.SY2CLRID; /* color*/
  SY6REC.XDMCD = OP3REC.XDMCD; /* dimension*/
  SY6REC.XCOCD = IVEREC.IVEPCTYP; /* cost type code*/

    /* --added for Canada--*/

  if (OP1REC.XDZ-DATA-DIST-CD == "CA") /* country code*/
    SY6REC.XCT-CTRY-CD = "CANA";
  else
    SY6REC.XCT-CTRY-CD = "USA"; /**/
  end

  if (OP1REC.ZFC-CRCY-CD != " ") /* currency code*/
    SY6REC.ZFC-CRCY-CD = OP1REC.ZFC-CRCY-CD;
  else
    SY6REC.ZFC-CRCY-CD = "USD";
  end



  if (OP1REC.XDVCD == "02" /* if nil*/
   && OP3REC.XQACD == "02") /* if b-grade product*/
    SY6REC.XQACD = "01";
  else
    SY6REC.XQACD = OP3REC.XQACD; /* quality code*/
  end

      /* db2 read*/

  call "IO0360" ("S ", SQLCA, SY6REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for single select*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good return*/
   || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DPROD"; /* data base name*/
    TA1REC.TA1TBLVU = "VDCOST01"; /* table view*/
    TA1REC.TA1TBLKE = SY6REC.SY6KEY; /* key value*/
    TA1REC.TA1LOCAT[2] = "OM0BS9I"; /* module name*/
    TA1REC.TA1LOCAT[4] = "IO0360"; /* i/o mod*/
    XSOPS02(); /* common abend routine*/
  end



end // end OM0BS9I

// check cost effective dte
Function OM0BS9J()



      /* find current cost among 6 possible costs*/
      /* new/future date is first, oldest date is last*/
      /* price effective date is booking or ship date,*/
      /* set by order type table (found earlier)*/


  sysVar.arrayIndex = 1; /* check dates ascending seq*/

  while (sysVar.arrayIndex < 7)
    if (SY6REC.SY6CSEDT[sysVar.arrayIndex] <= OM0BW01.OM0BWPED) /* cost effective date*/
      return; /* then use ezetst for cost*/
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end



end // end OM0BS9J

// get style/color & color price
Function OM0BS9K()




      /* *******************************************************/
      /* * read db2 price by style or style & color for defaults*/
      /* **/
      /* * first - if price-size code = s or c or z (any):*/
      /* * _ read price default for style (all colors,dims,sizes)*/
      /* * - hold price in om0bwstp (style price)*/
      /* **/
      /* * second - if price-size code = c or z:*/
      /* *  - read price deflt for style & color & dim(all sizes)*/
      /* *  - hold price in om0bwclp (color price)*/
      /* *******************************************************/

      /* *****************************/
      /* * get style price record*/
      /* *****************************/

  SY5REC.SY2CLRID = "***"; /* default color code*/
  SY5REC.XDMCD = "**"; /* default dimension*/
  SY5REC.SY5SZID = 0; /* default size id*/

  OM0BS97(); /* db2 read price by style*/

  if (SQLCA.VAGen_SQLCODE == 100) /* if price record not found,*/
    OM0BW01.OM0BWSTP = 0; /* force zero prices*/
  else
    OM0BS28(); /* pick out price effec today (from 6 possible)*/
    if (sysVar.arrayIndex < 7)
      OM0BW01.OM0BWSTP = SY5REC.SY5PRCUN[sysVar.arrayIndex]; /* hold style price*/
    end
  end

      /* ******************************/
      /* * check if need second read*/
      /* ******************************/

  if (SYCREC.SY1PRCZS == "C" /* if have price by color or size*/
   || SYCREC.SY1PRCZS == "Z") /* get second default*/
    /* next sentence*/
  else /* else use only style default*/
    return;
  end


      /* *******************************************/
      /* * get style/color/dimension price record*/
      /* *******************************************/

  SY5REC.SY2CLRID = OP3REC.SY2CLRID; /* color*/
  SY5REC.XDMCD = OP3REC.XDMCD; /* dimension*/
  SY5REC.SY5SZID = 0; /* default size id*/

  OM0BS97(); /* db2 read price*/

  if (SQLCA.VAGen_SQLCODE == 100) /* price not found*/
    OM0BW01.OM0BWCLP = 0; /* forces price = 0*/
  else
    OM0BS28(); /* pick out price effec today (from 6 possible)*/
    if (sysVar.arrayIndex < 7)
      OM0BW01.OM0BWCLP = SY5REC.SY5PRCUN[sysVar.arrayIndex]; /* hold color price*/
    end
  end



end // end OM0BS9K

// read acct reg cd dnilo.vdstrb
Function OM0BS9L()


      /* this routine reads the dnilo.vdstrb01 to obtain the*/
      /* acct reg code to be used as part of the key for reading*/
      /* some other record i haven't got the time to find out about*/
      /* right now.  database changes suck.  bbake2 3/92*/

  set SQLCA empty;
  set VDSTRB01 empty;
  VDSTRB01.KUCCOID = KUCREC.KUCCOID;

  call "IO4600" ("S ", SQLCA, VDSTRB01) {isNoRefresh = yes, isExternal = yes}; /* declare & open cursor*/

  if (SQLCA.VAGen_SQLCODE == 0) /* all ok*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      set VDSTRB01 empty; /* we'll use blanks for acct reg cd*/
    else
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "OM0BS9L ";
      TA1REC.TA1LOCAT[3] = "IO4600  ";
      TA1REC.TA1DBASE = "DNILO   ";
      TA1REC.TA1TBLVU = "VDSTRB01";
      OM0BW01.OM0BWTK1 = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = OM0BW01.OM0BWTK1;
      XSOPS02(); /* abend*/
    end
  end
end // end OM0BS9L

// check maintenance reason
Function OM0BSER()
  TA1REC.TA1LOCAT[2] = "OM0BSER"; /* error diag group name*/
  /*  */
  if (OM0BM001.XOMCD == " ")
    converseLib.validationFailed(399); /* change reason is required*/
    OMAREC.OMAERR = "Y";
    set OM0BM001.XOMCD cursor, modified, bold;
    return;
  end
  /*  */
  if (OM0BM001.XOMCD in XOMTBL.XOMCD /* code is valid*/
   && XOMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* code is active*/
  /* next sentence*/
  else
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(395); /* change reason is invalid*/
    set OM0BM001.XOMCD cursor, modified, bold;
    return;
  end
  /*  */
  if (XOMTBL.XOMCANCF[sysVar.arrayIndex] == "A" /* add*/
   || XOMTBL.XOMCANCF[sysVar.arrayIndex] == "B") /* both*/
   /* next sentence - okay to add with this code*/
  else
    converseLib.validationFailed(390); /* can't add with this code*/
    OMAREC.OMAERR = "Y";
    set OM0BM001.XOMCD cursor, modified, bold;
    return;
  end
  /*  */
  set OM0BM001.XOMCD initialAttributes;
  OMWREC.XOMCD = OM0BM001.XOMCD; /* save new code in ws*/
end // end OM0BSER

// check prop date ranges for sty
Function OM0BSEW()



  if (SYCREC.SY2POFBD <= 0) /* if field is blank on database*/
    SYCREC.SY2POFBD = 0;
  end

  if (SYCREC.SY2POFXD <= 0) /* if field is blank on database*/
    SYCREC.SY2POFXD = 99999999;
  end

  if (OM0BW01.OP1CUNDT >= SYCREC.SY2POFBD) /* need dt>= prop begin dt*/
    if (OM0BW01.OP1CUNDT <= SYCREC.SY2POFXD) /* need dt <=prop expir dt*/
       /* next sentence--need date within range; ok to process*/
    else
      OM0BW01.OM0BWSFL = "Y";
    end
  else
    OM0BW01.OM0BWSFL = "Y";
  end



end // end OM0BSEW

// check futr date ranges for sty
Function OM0BSEX()



  if (SYCREC.SY2FOFBD <= 0) /* if field is blank on database*/
    SYCREC.SY2FOFBD = 0;
  end

  if (SYCREC.SY2FOFXD <= 0) /* if field is blank on database*/
    SYCREC.SY2FOFXD = 99999999;
  end

  if (OM0BW01.OP1CUNDT >= SYCREC.SY2FOFBD) /* need dt>= futr beg dt*/
    if (OM0BW01.OP1CUNDT <= SYCREC.SY2FOFXD) /* need dt <=futr xdt*/
       /* next sentence--need date within range; ok to process*/
    else
      OM0BW01.OM0BWSFL = "Y";
    end
  else
    OM0BW01.OM0BWSFL = "Y";
  end



end // end OM0BSEX

// check nil date ranges for styl
Function OM0BSEY()



  if (SYCREC.SY2NOFBD <= 0) /* if field is blank on database*/
    SYCREC.SY2NOFBD = 0;
  end

  if (SYCREC.SY2NOFXD <= 0) /* if field is blank on database*/
    SYCREC.SY2NOFXD = 99999999;
  end

  if (OM0BW01.OP1CUNDT >= SYCREC.SY2NOFBD) /* need dt >=nil begin dt*/
    if (OM0BW01.OP1CUNDT <= SYCREC.SY2NOFXD) /* need dt <=nil expir dt*/
       /* next sentence--need date within range; ok to process*/
    else
      OM0BW01.OM0BWSFL = "Y";
    end
  else
    OM0BW01.OM0BWSFL = "Y";
  end




end // end OM0BSEY

// check style date ranges for av
Function OM0BSEZ()


  TA1REC.TA1LOCAT[2] = "OM0BSEZ"; /* diag*/

  OM0BW01.OM0BWSFL = "N";


   /* *******************************************************/
   /* if any of the quality codes = 02*/
   /* or any of the life cycle codes = 20*/
    /* and quality or life cycle cd = 02 or 20 at*/
   /* the product level; or division cd = 03;*/
   /* or bulk draw*/
   /* or warehouse = 09 (promo) or 03 (protek)*/
   /* bypass the product offering date edits*/
   /* *******************************************************/

  if (OM0BW01.OM0BWBDF == "DS" /* if smart draw*/
   || OM0BW01.OM0BWBDF == "DX" /* if flexible draw*/
   || OM0BW01.OM0BWBDF == "DC" /* if customer draw*/
   || OM0BW01.OM0BWBDF == "DR" /* if rebook draw*/
   || OM0BW01.OM0BWBDF == "DN") /* if nike draw*/
    return; /* --return*/
  end


  if (OP1REC.XDVCD == "03") /* promo*/
    return; /* --return*/
  end

  if (OBIREC.XWHCD == "03" /* if protek warehouse or*/
   || OBIREC.XWHCD == "09") /* promo  warehouse*/
    return; /* --return*/
  end

  if (OP1REC.XOTCD in XOTTBL.XOTCD)
    if (XOTTBL.XQACD1[sysVar.arrayIndex] == "02"
     || XOTTBL.XQACD2[sysVar.arrayIndex] == "02"
     || XOTTBL.XQACD3[sysVar.arrayIndex] == "02"
     || XOTTBL.XLCCD1[sysVar.arrayIndex] == "20"
     || XOTTBL.XLCCD2[sysVar.arrayIndex] == "20"
     || XOTTBL.XLCCD3[sysVar.arrayIndex] == "20"
     || XOTTBL.XLCCD4[sysVar.arrayIndex] == "20"
     || XOTTBL.XLCCD5[sysVar.arrayIndex] == "20")
      if (OP3REC.XQACD == "02"
       || OBIREC.XLCCD == "20")
        return; /* --return*/
      end
    end
  end



  if (OP1REC.SP1ID == "EARL"       /* early futures allowed to*/
   && OM0BW01.OP1CUNDT == 19911201 /* order before the offering*/
   && XOTTBL.XOTFUTRF[sysVar.arrayIndex] == "Y") /* date*/
    return;
  end


  if (XOTTBL.XOTSMPLF[sysVar.arrayIndex] == "Y" /* if footwear/apparel samples*/
   || OP1REC.XBDCD == "2"                       /* or smart or flex bulks by-*/
   || OP1REC.XBDCD == "Z")                      /* pass product offering dates.*/
    /* next sentence*/
  else
    if (XOTTBL.XDVCD[sysVar.arrayIndex] == "02") /* if international order*/
      OM0BSEY(); /* check nil date ranges for the style*/
    else
      if (XOTTBL.XOTFUTRF[sysVar.arrayIndex] == "Y") /* if a futures order*/
        OM0BSEX(); /* check futures date ranges for the*/
                                   /* style*/
      else
        OM0BSEW(); /* check prop date ranges for the style*/
      end
    end
  end



  if (OM0BW01.OM0BWSFL == "Y")
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(394); /* product will not be avail by need dt*/
    set OM0BM001.OM0BMNDT cursor, modified, bold;
  end





end // end OM0BSEZ

// get availability for style
Function OM0BSGA()

  set OBIREC empty; /* initialize passed w/s for ob1210*/
  set SQLCA empty;

     /* normally, we can let ob1210 decided on whether or not*/
     /* availability should be displayed.  However, it does not*/
     /* handle bulks and draws, so we have to weed them out*/
     /* before calling ob1210.*/

  if (OM0BW01.OM0BWBDF == "BS" /* smart res bulk*/
   || OM0BW01.OM0BWBDF == "BX" /* flexible bulk*/
   || OM0BW01.OM0BWBDF == "DC" /* customer draw*/
   || OM0BW01.OM0BWBDF == "DS" /* smart res draw*/
   || OM0BW01.OM0BWBDF == "DX" /* flexible draw*/
   || OM0BW01.OM0BWBDF == "DR" /* rebook draw*/
   || OM0BW01.OM0BWBDF == "DN" /* nike draw*/
   || OM0BW01.OM0BWBBF == "BB") /* blank bulk*/
    OBIREC.OBIRTNCD = "1"; /* this is a fakeout move for om0bs57*/
                                  /* which will now treat these like any*/
                                  /* other order that does not display*/
                                  /* availability*/
    return; /* skip call to ob1210*/
  end
    /* set up the availability key.*/

  OBIREC.XWHCD = OM0BM001.XWHCD;
  OBIREC.XDSCD = OP1REC.XDSCD;
  OBIREC.OP1CUNDT = OM0BW01.OP1CUNDT; /* set up need date*/


  /* disable need date calc for crested prods as per Linda R. March '94*/

  if (SYCREC.XPRCD == "22") /* if crested product*/
    /* OM0BS-CALC-NEED-DT;                  /* edit need date (-30 days)*/
    OBIREC.SY1STNBR = SYCREC.SY1BSTNB; /* use blank style*/
    OBIREC.SY2CLRID = SYCREC.SY2BCLCD; /* and blank color*/
    if (OP1REC.XDSCD == "1") /* if crested direct ship*/
      OBIREC.XWHCD = "51"; /* warehouse defaults to '51'*/
      OBIREC.XDSCD = " "; /* direct ship defaults to ' '*/
    end
  else
    OBIREC.SY1STNBR = OP3REC.SY1STNBR; /* finished style codes*/
    OBIREC.SY2CLRID = OP3REC.SY2CLRID;
  end

    /* apparel direct ship use warehouse 51*/

  if (XOTTBL.XOTDSAVL[OM0BWSBO] == "Y" /* display available flag*/
   && OP3REC.XGPCD == "03"             /* apprarel*/
   && OP1REC.XDSCD == "1")             /* direct ship*/
    OBIREC.XWHCD = "51"; /* warehouse defaults to '51'*/
    OBIREC.XDSCD = " "; /* direct ship defaults to ' '*/
  end

  OM0BSGL(); /* get life cycle*/

  /*  */
  /* there is no rule against adding a product to an order*/
  /* with a need date in the past, but there is never availability*/
  /* for a date prior to today in production, because the availability*/
  /* fairy godmother sets all the availability period dates to*/
  /* the current date every night.  So if the need*/
  /* date is prior to today, we'll let him have anything available*/
  /* up to today.*/
  /*  */
  if (OBIREC.OP1CUNDT < OMAREC.OMACDT) /* need date is in the past*/
    OBIREC.OP1CUNDT = OMAREC.OMACDT; /* so we use today's date*/
  end /* to call availability*/

  OBIREC.XDMCD = OP3REC.XDMCD;
  OBIREC.XOTCD = OP1REC.XOTCD;
  OBIREC.XUMCD = OP3REC.XUMCD;
  OBIREC.XPGCD = OP3REC.XPGCD;
  OBIREC.XQACD = OP3REC.XQACD;
  OBIREC.XBCCD = OP1REC.XBCCD;
  OBIREC.XOCCD = OP1REC.XOCCD;
  OBIREC.XGPCD = OP3REC.XGPCD;
  OBIREC.PC2INSEG = OP3REC.PC2INSEG;
  OBIREC.XEGCD = OP3REC.XEGCD;

  if (OM0BM001.XOWCD == " ")
    OBIREC.XOWCD = "00";
    OM0BM001.XOWCD = "00";
  else
    OBIREC.XOWCD = OM0BM001.XOWCD;
  end

   /* call subprogram to get availability for all*/
   /* sizes.*/

  call "OB1210" (OBIREC, SQLCA) {isNoRefresh = yes, isExternal = yes};
  /*  */
  /* to save you some grief, the return codes from ob1210 are*/
  /* checked in om0bs56, which is called from om0bs52, which*/
  /* is called from om0bs51, which is always be called*/
  /* immediately following om0bsga.*/
  /* kind of like the 'begats' in the bible eh?*/
end // end OM0BSGA

// get current style life cycle
Function OM0BSGL()

    /* this routine gets the most current life cycle for*/
    /* the style being entered.*/


    /* this routine was converted for om0b 08/20/88  s.kott*/


  if (OMAREC.OMACDT >= SYCREC.SY2CEDT1)
    OBIREC.XLCCD = SYCREC.XLCCD1;
  else
    if (OMAREC.OMACDT >= SYCREC.SY2CEDT2)
      OBIREC.XLCCD = SYCREC.XLCCD2;
    else
      if (OMAREC.OMACDT >= SYCREC.SY2CEDT3)
        OBIREC.XLCCD = SYCREC.XLCCD3;
      else
        if (OMAREC.OMACDT >= SYCREC.SY2CEDT4)
          OBIREC.XLCCD = SYCREC.XLCCD4;
        else
          OBIREC.XLCCD = " ";
        end
      end
    end
  end




end // end OM0BSGL

// hot model check
Function OM0BSHM()
      /* *********************************************************/
      /* *  Check to see if this customer is eligible to order*/
      /* *  hot models.*/
      /* *********************************************************/

  TA1REC.TA1LOCAT[1] = "OM0BSHM"; /* error diag data process name*/

  OM0BW01.OM0BWELI = "Y";

  OPZREC.SY1STNBR = OP3REC.SY1STNBR;
  OPZREC.SY2CLRID = OP3REC.SY2CLRID;
  OPZREC.XDMCD = OP3REC.XDMCD;
  OPZREC.XGPCD = OP3REC.XGPCD;

  call "IO3180" ("S ", SQLCA, OPZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
      /* NEXT SENTENCE*/
  else
    TA1REC.TA1DBASE = "DORDER"; /* data base name*/
    TA1REC.TA1TBLVU = "VHOTSY01"; /* table view*/
    OM0BW01.OM0BWTK3 = OPZREC.SY1STNBR;
    OM0BW01.OM0BWTK4 = OPZREC.SY2CLRID;
    OM0BW01.OM0BWTK5 = OPZREC.XDMCD;
    TA1REC.TA1TBLKE = OM0BW01.OM0BWT1;
    TA1REC.TA1LOCAT[3] = "IO3180"; /* iomod*/
    XSOPS02(); /* standart abend routine*/
  end

  if (OMAREC.OMACDT >= OPZREC.OPZHMBDT
   && OMAREC.OMACDT <= OPZREC.OPZHMEDT)
    /* next sentence*/
  else
    return;
  end
   /* *************************************************/
   /* * call to eligible customer data base using*/
   /* * customer and hot model group code*/
   /* *************************************************/

  OPYREC.OPXHMGRP = OPZREC.OPXHMGRP;
  OPYREC.KUCCOID = OP1REC.KUCCOID;
  OPYREC.KUMSTRID = 0;
  OPYREC.XNXCD = 0;
  OPYREC.XGPCD = OP3REC.XGPCD;

  call "IO3170" ("SE", SQLCA, OPYREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER"; /* data base name*/
    TA1REC.TA1TBLVU = "VHOTCU01"; /* table view*/
     /* MOVE OPYREC.OPXHMGRP TO OM0BW01.OM0BWTK3;*/
     /* MOVE OPYREC.KUCCOID TO OM0BW01.OM0BWTK4;*/
     /* MOVE OPYREC.KUMSTRID TO OM0BW01.OM0BWTK5;*/
     /* MOVE OPYREC.XNXCD TO OM0BW01.OM0BWTK6;*/
    TA1REC.TA1TBLKE = OM0BW01.OM0BWT1;
    TA1REC.TA1LOCAT[3] = "IO3170"; /* iomod*/
    XSOPS02(); /* standart abend routine*/
  end

  OM0BW01.OM0BWAUT = "N";
  if (SQLCA.VAGen_SQLCODE == 100)
    OM0BW01.OM0BWELI = "N";
    if (COMMAREA.CAUSERID in YOSTBL.XXXUSRID
     && YOSTBL.YOSHMDFL[sysVar.arrayIndex] == "Y") /* authorized to change*/
      OM0BW01.OM0BWAUT = "Y";
      converseLib.validationFailed(481);
    else
      converseLib.validationFailed(479);
    end
  end

end // end OM0BSHM

// test for ord adj override
Function OM0BSOB()

   /* *************************************************************/
   /* Clear the row storage area*/
   /* Select row - Factory Control Table*/
   /* *************************************************************/

   /* *************************************************************/
  set FB9REC empty; /* initialize record*/
  OM0BW01.OM0BWOAO = "N"; /* and ord adj override flag*/

   /* *************************************************************/
   /* select requested row from table*/
   /* *************************************************************/

  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* *************************************************************/
   /* If successful or not found, determine effect on order*/
    /* adjustment validation process*/
   /* *************************************************************/

  if (SQLCA.VAGen_SQLCODE != 0) /* post and exit if bad return*/
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "OM0B";
    TA1REC.TA1LOCAT[1] = "S ";
    TA1REC.TA1LOCAT[2] = "OM0BSOB";
    TA1REC.TA1LOCAT[3] = "IO3650 ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1DBASE = "DFBUY.";
    TA1REC.TA1TBLVU = "VFMCTL01";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    return;
  end

    /* set up need date and buy date for compare*/

  OM0BW01.OM0BWOND = OP1REC.OP1CUNDT;

  OM0BW01.OM0BWOBD = FB9REC.FB8BUYDT;

  if (OM0BW01.OM0BWNYM > OM0BW01.OM0BWBYM) /* if need date gt buy date*/
    OM0BW01.OM0BWOAO = "Y"; /* turn on override flag*/
    return; /* and exit*/
  else
    if (OM0BW01.OM0BWNYM < OM0BW01.OM0BWBYM) /* if need date lt buy date*/
      return; /* exit (o/a required)*/
    end
  end

    /* need date and buy date are equal -*/
     /* must now compare current date*/
      /* and time to cutoff date and time*/
       /* in same manner.*/



    /* set up current date and time for compares*/

  OM0BW01.OM0BWTM1 = VGVar.currentFormattedTime; /* change hh:mm:ss to hhmm*/
  OM0BW01.OM0BWTHL = OM0BW01.OM0BWTHF;
  OM0BW01.OM0BWTML = OM0BW01.OM0BWTMF;
  OM0BW01.OM0BWTSL = OM0BW01.OM0BWTSF;

  OMAREC.OMACDT = VGVar.currentShortGregorianDate; /* set curr date*/
  if (OMAREC.OMACYY > 56) /* set century based on year*/
    OMAREC.OMACCC = 19;
  else
    OMAREC.OMACCC = 20;
  end

  if (OMAREC.OMACDT < FB9REC.FB9COFDT)
                                   /* if current date lt cutoff date*/
    OM0BW01.OM0BWOAO = "Y"; /* turn on override flag*/
    return; /* and exit*/
  else
    if (OMAREC.OMACDT > FB9REC.FB9COFDT)
                                   /* if current date gt cutoff date*/
      return; /* exit (o/a required)*/
    end
  end

     /* still equal - try time compare*/

  if (OM0BW01.OM0BWTM3 < FB9REC.FB9COFTM)
                                   /* if current date lt cutoff date*/
    OM0BW01.OM0BWOAO = "Y"; /* turn on override flag*/
  end
   /* *************************************************************/
end // end OM0BSOB

// verify nil offering dates
Function OM0BSOD()


  TA1REC.TA1LOCAT[2] = "OM0BSOD"; /* diag*/

   /* *******************************************************/
   /* *  verify if there is a restriction on the customer*/
   /* *  ordering the specified product for the need date*/
   /* *  requested.*/
   /* *******************************************************/


     /* format nparec for calling io4430.*/

  VNILSY01.KUCCOID = OP1REC.KUCCOID; /* customer number*/
  VNILSY01.XGPCD = OP1REC.XGPCD; /* gpc code*/
  VNILSY01.SY1STNBR = OP3REC.SY1STNBR; /* style number*/
  VNILSY01.SY2CLRID = OP3REC.SY2CLRID; /* color number*/
  VNILSY01.XDMCD = OP3REC.XDMCD; /* dimension code*/

  OM0BW05.OM0BWTSK = "S1"; /* select set for io-mod*/


     /* call io4430 to access dnilo.vnilsy01 inorder to*/
     /* open and declare cursor for select set on records.*/

  call "IO4430" (OM0BW05, SQLCA, VNILSY01) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
     /* next sentence*/
  else
    TA1REC.TA1PGMNM = "OM0B    ";
    TA1REC.TA1LOCAT[1] = "S1      ";
    TA1REC.TA1LOCAT[3] = "IO4430  ";
    TA1REC.TA1LOCAT[4] = "        ";
    TA1REC.TA1MAP = "OM0BM001";
    TA1REC.TA1DBASE = "DNILO   ";
    TA1REC.TA1TBLVU = "VNILSY01";
    OM0BW01.OM0BWNP1 = VNILSY01.KUCCOID; /* customer number*/
    OM0BW01.OM0BWNP2 = VNILSY01.XGPCD; /* gpc code*/
    OM0BW01.OM0BWNP3 = VNILSY01.SY1STNBR; /* style number*/
    OM0BW01.OM0BWNP4 = VNILSY01.SY2CLRID; /* color number*/
    OM0BW01.OM0BWNP5 = VNILSY01.XDMCD; /* dimension code*/
    TA1REC.TA1TBLKE = OM0BW01.OM0BWNPA;
    XSOPS02(); /* call reset, ta0020, abend*/
  end


  OM0BW05.OM0BWTSK = "N1"; /* fetch next task for io-mod*/


     /* call io4430 to access dnilo.vnilsy01 inorder to*/
     /* select next on the first(only) valid row.*/

  call "IO4430" (OM0BW05, SQLCA, VNILSY01) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0) /* product was found*/
    if (VNILSY01.XXXSTAT == "A") /* and is active status*/
      converseLib.validationFailed(508); /* cust, prod, need date combo inelig.*/
      set OM0BM001.OM0BMNDT modified, cursor, bold;
      OMAREC.OMAERR = "Y"; /* set error flag on*/
    else
      if (XOTTBL.XOTPROPF[OM0BWSBO] == "Y" /* prop order*/
       || XOTTBL.XOTFUTRF[OM0BWSBO] == "Y") /* future order*/
        OM0BSEZ(); /* check inc product offering dates*/
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* product was not found*/
      if (XOTTBL.XOTPROPF[OM0BWSBO] == "Y" /* prop order*/
       || XOTTBL.XOTFUTRF[OM0BWSBO] == "Y") /* future order*/
        OM0BSEZ(); /* check inc product offering dates*/
      end
    else
      TA1REC.TA1PGMNM = "OM0B    ";
      TA1REC.TA1LOCAT[1] = "N1      ";
      TA1REC.TA1LOCAT[3] = "IO4430  ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "OM0BM001";
      TA1REC.TA1DBASE = "DNILO   ";
      TA1REC.TA1TBLVU = "VNILSY01";
      OM0BW01.OM0BWNP1 = VNILSY01.KUCCOID; /* customer number*/
      OM0BW01.OM0BWNP2 = VNILSY01.XGPCD; /* gpc code*/
      OM0BW01.OM0BWNP3 = VNILSY01.SY1STNBR; /* style number*/
      OM0BW01.OM0BWNP4 = VNILSY01.SY2CLRID; /* color number*/
      OM0BW01.OM0BWNP5 = VNILSY01.XDMCD; /* dimension code*/
      TA1REC.TA1TBLKE = OM0BW01.OM0BWNPA;
      XSOPS02(); /* call reset, ta0020, abend*/
    end
  end


  OM0BW05.OM0BWTSK = "C1"; /* close cursor task for io-mod*/


     /* call io4430 to access dnilo.vnilsy01 inorder to*/
     /* close the cursor for the selected set.*/

  call "IO4430" (OM0BW05, SQLCA, VNILSY01) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
     /* next sentence*/
  else
    TA1REC.TA1PGMNM = "OM0B    ";
    TA1REC.TA1LOCAT[1] = "C1      ";
    TA1REC.TA1LOCAT[3] = "IO4430  ";
    TA1REC.TA1LOCAT[4] = "        ";
    TA1REC.TA1MAP = "OM0BM001";
    TA1REC.TA1DBASE = "DNILO   ";
    TA1REC.TA1TBLVU = "VNILSY01";
    OM0BW01.OM0BWNP1 = VNILSY01.KUCCOID; /* customer number*/
    OM0BW01.OM0BWNP2 = VNILSY01.XGPCD; /* gpc code*/
    OM0BW01.OM0BWNP3 = VNILSY01.SY1STNBR; /* style number*/
    OM0BW01.OM0BWNP4 = VNILSY01.SY2CLRID; /* color number*/
    OM0BW01.OM0BWNP5 = VNILSY01.XDMCD; /* dimension code*/
    TA1REC.TA1TBLKE = OM0BW01.OM0BWNPA;
    XSOPS02(); /* call reset, ta0020, abend*/
  end

end // end OM0BSOD

// create override report
Function OM0BSOV()

  TA1REC.TA1LOCAT[2] = "OM0BSOV";

  OSBREC.OSBOVTCD = "HM";
  OSBREC.OP1PARTN = OP3REC.OP1PARTN;
  OSBREC.OP1CUOID = OP3REC.OP1CUOID;
  OSBREC.OP1NORID = OP3REC.OP1NORID;
  OSBREC.OP2LNINB = OP3REC.OP2LNINB;
  OSBREC.XGPCD = OP3REC.XGPCD;
  OSBREC.SY1STNBR = OP3REC.SY1STNBR;
  OSBREC.SY2CLRID = OP3REC.SY2CLRID;
  OSBREC.XDMCD = OP3REC.XDMCD;
  OSBREC.OSBOVQTY = OP3REC.OP2TONOQ;
  OSBREC.ZZZSDT = OMAREC.OMACDT;
  OSBREC.ZZZSTM = OM0BW01.OM0BWTM3;
  if (COMMAREA.CAUSERID in YOSTBL.XXXUSRID)
    OSBREC.XXXUSRID = YOSTBL.XXXUSRID[sysVar.arrayIndex];
  end

  call "IO3410" ("A ", SQLCA, OSBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
      /* NEXT SENTENCE*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORIDA01";
    TA1REC.TA1LOCAT[3] = "IO3410";
    XSOPS02();
  end


end // end OM0BSOV

// get program indicator
Function OM0BST2()
   /* *************************************************************/
   /* LOAD P01 program indicator FOR BLANK BULKS*/
   /* *************************************************************/

  if (OM0BW01.OM0BWBBF == "BB") /* if blank bulk*/
    if (OP1REC.XOBCD == "M1")
      OM0BW01.OM0BWP01 = "M"; /* hold for special makeup blank bulk*/
    else
      OM0BW01.OM0BWP01 = "B"; /* hold for regular blank bulk*/
    end
    return;
  end

   /* *************************************************************/
   /* LOAD P01 program indicator FOR draws from blank bulks*/
   /* *************************************************************/

  if (OM0BW01.OM0BWBBF == "BD") /* draw from blank bulk*/
    if (OP1REC.XOBCD == "M1")
      OM0BW01.OM0BWP01 = "S"; /* hold for special makeup blank bulk*/
    else
      OM0BW01.OM0BWP01 = "T"; /* hold for regular blank bulk*/
    end
    return;
  end

   /* **********************************************************/
   /* load P01 program indicator for*/
              /* FLYERS AND SPCL MAKEUPS*/
    /* which is anything associated with a blank product*/
    /* that is not a draw and not a futures order type*/
   /* **********************************************************/
  if (OP1REC.XBDCD in XBDTBL.XBDCD              
   && XBDTBL.XBDRWOFL[sysVar.arrayIndex] != "Y" /* not a draw order*/
   && OP1REC.XOTCD in XOTTBL.XOTCD              
   && XOTTBL.XOTPROPF[sysVar.arrayIndex] == "Y") /* a prop order*/
    if (SYCREC.XPRCD in XPRTBL.XPRCD
     && XPRTBL.XPRSMKFL[sysVar.arrayIndex] == "Y") /* SPECIAL MAKEUP product*/
      OM0BW01.OM0BWP01 = "S"; /* HOLD FOR SPCL MAKEUP*/
    else
      OM0BW01.OM0BWP01 = "T"; /* HOLD AS REG PRODUCT*/
    end
  end
end // end OM0BST2

// scrn prod look for valid xow p
Function OM0BST5()


   /* this statement group calls io5480 to access davail.vblnkp01*/
   /* to validate the need date for screened products. we*/
   /* need the xowcd from davail.vblnkp01 which is part of the*/
   /* key to access davail.vblnks01 to validate the blank styles.*/


  set SQLCA empty;
  set AVGREC empty;

  AVGBPIND = OM0BW01.OM0BWP01;

  AVIREC.AVIFUNCD = "SA";
  AVIREC.OP1CUNDT = OM0BW01.OP1CUNDT;

  call "IO5480" (AVIREC, SQLCA, AVGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0
   || SQLCA.VAGen_SQLCODE == +100)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "OM0B   "; /* application*/
    TA1REC.TA1LOCAT[1] = "OM0BST5 "; /* statement group*/
    TA1REC.TA1LOCAT[2] = "IO5480  "; /* io mod called*/
    TA1REC.TA1LOCAT[3] = AVIREC.AVIFUNCD; /* function code passed*/
    TA1REC.TA1LOCAT[4] = OM0BM001.OM0BMNDT; /* pass need date*/
    TA1REC.TA1MAP = "OM0BM001"; /* map*/
    TA1REC.TA1DBASE = "DAVAIL"; /* database name*/
    TA1REC.TA1TBLVU = "VBLNKP01"; /* table view*/
    TA1REC.TA1TBLKE = AVGREC.AVGKEY; /* key*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end

   /* ************************************************************/
end // end OM0BST5

// validate style (vblnks01)
Function OM0BST6()

   /* IO5470 calls davail.vblnks01 to find out whether a finished*/
   /* style is valid for specific xowcd.  The xowcd is determined*/
   /* by davail.vblnkp01 (om0bs2b) based on need-date.*/

  set SQLCA empty;
  set AVHREC empty;

  AVHREC.XOWCD = AVGREC.XOWCD; /* owner code from vblnkp01*/
  AVHREC.SY1STNBR = OMWREC.SY1STNBR;
  AVHREC.SY2CLRID = OMWREC.SY2CLRID;
  AVHREC.XDMCD = OMWREC.XDMCD;

  call "IO5470" ("S ", SQLCA, AVHREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0 /* further processing will*/
   || SQLCA.VAGen_SQLCODE == +100) /* be determined based on the*/
      /* next sentence                  type of order, and where we*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "OM0B   "; /* application*/
    TA1REC.TA1LOCAT[1] = "OM0BST6 "; /* statement group*/
    TA1REC.TA1LOCAT[2] = "IO5470  "; /* io mod called*/
    TA1REC.TA1LOCAT[3] = "S "; /* function code used*/
    TA1REC.TA1LOCAT[4] = AVHREC.AVHKEY; /* avhrec key*/
    TA1REC.TA1MAP = "OM0BM001"; /* map*/
    TA1REC.TA1DBASE = "DAVAIL"; /* database name*/
    TA1REC.TA1TBLVU = "VBLNKS01"; /* table view*/
    TA1REC.TA1TBLKE = AVHREC.AVHKEY; /* key*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end /* were called from*/
end // end OM0BST6

// validate cutoff (vogcut01)
Function OM0BST7()

   /* IO5530 calls dorder.vogcut01 to verify that a finished*/
   /* style is valid for specific xowcd and provide us with*/
   /* the cut-off date*/
    /* the cutoff record we want to use varies,*/
    /* depending on the type of order.*/
    /* - blank bulks, regular prop, inline futures use the cutoff*/
        /* record appropiate to the finished style*/
        /* for which we got the owner group by*/
        /* reading davail.vblnkp01*/
    /* - draws from blank bulks must be validated against*/
        /* the owner group of the original blank bulk*/

  set SQLCA empty;
  set OPLREC empty;
  set OECREC empty;

  OPLREC.OPLSOP = "SF";
  OPLREC.OPJCNDTB = OM0BW01.OP1CUNDT;

  if (OM0BW01.OM0BWBBF == "BD") /* FOR DRAW FROM BLANK BULK*/
    if (OP1REC.XOBCD == "M1") /* for special makeup bulks*/
      OECREC.XOWCD = "SM"; /* use special makeup owner code*/
    else
      OECREC.XOWCD = "MR"; /* regular owner code*/
    end
  else
    OECREC.XOWCD = OM0BM001.XOWCD; /* owner code from vblnkp01*/
  end

  call "IO5530" (OPLREC, SQLCA, OECREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0 /* handling of cutoff depends*/
   || SQLCA.VAGen_SQLCODE == +100) /* on type of order and where*/
     /* next sentence                    this logic was called from*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "OM0B   "; /* application*/
    TA1REC.TA1LOCAT[1] = "OM0BST7 "; /* statement group*/
    TA1REC.TA1LOCAT[2] = "IO5530  "; /* io mod called*/
    TA1REC.TA1LOCAT[3] = "SF"; /* function code used*/
    TA1REC.TA1LOCAT[4] = OPLREC.OPLGRPL; /* avhrec key*/
    TA1REC.TA1MAP = "OM0BM001"; /* map*/
    TA1REC.TA1DBASE = "DORDER"; /* database name*/
    TA1REC.TA1TBLVU = "VOGCUT01"; /* table view*/
    TA1REC.TA1TBLKE = OPLREC.OPLGRPL; /* key*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
end // end OM0BST7

// edit blank bulks/draws
Function OM0BST8()
    /* this sgrp performs special edits for blank bulks/draws*/
   /* when need date changes*/

  OM0BST5(); /* read davail.vblnkp01 using key calculated in st2*/
  if (SQLCA.VAGen_SQLCODE == +100)
    converseLib.validationFailed(616); /* no program exists for this*/
    OMAREC.OMAERR = "Y"; /* need date*/
    set OM0BM001.OM0BMNDT cursor, modified, bold;
    return;
  end

  if (OM0BW01.OM0BWBBF == "BB") /* for blank bulks only p01*/
    return; /* table is checked*/
  end

    /* for draws from blank bulks, we have to check the cutoff*/

  OM0BST7(); /* get cutoff row*/
  if (SQLCA.VAGen_SQLCODE == +100)
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(632); /* no finished program cut-off date setup yet*/
    set OM0BM001.OM0BMNDT cursor, modified, bold;
    return;
  end

  if (OECREC.OPJCUTDT < OMAREC.OMACDT) /* if cut-off-date < curr-date*/
    if (COMMAREA.CAUSERID in YOSTBL.XXXUSRID
     && YOSTBL.XXXSTAT[sysVar.arrayIndex] == "A"
     && YOSTBL.YOSNDTFL[sysVar.arrayIndex] == "Y") /* authorized for lateness*/
      converseLib.validationFailed(638); /* past cut-off date warning msg*/
      set OM0BM001.OM0BMNDT cursor, bold;
    else
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(631); /* past cut-off date error msg*/
      set OM0BM001.OM0BMNDT cursor, modified, bold;
    end
  end

  OM0BST6(); /* validate finished style*/

  if (SQLCA.VAGen_SQLCODE == +100) /* no record for this style*/
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(636); /* ndt invalid for finished pgm assigned*/
    set OM0BM001.OM0BMNDT cursor, modified, bold; /* to the finished style*/
  end
   /* ************************************************************/
end // end OM0BST8

// update bulk order drawn from
Function OM0BSUB()




    /* this routine updates the bulk order just drawn from.*/

        /* this routine will recheck availablitity if a*/
        /* change count error occurs. it will keep doing*/
        /* this until we get a good write or until their*/
        /* is not enough available to enter this item.*/

           /* while write not complete*/
                /* roll item totals out of bulk*/
                /* try to update*/
                /* if good return, exit*/
                /* if change count error,*/
                    /* re-read bulk order*/
                    /* recheck availability*/
                    /* if ok, loop back*/
                    /* if not available, reconverse, ezeflo*/
                    /* if fatal, abend*/
                /* if fatal, abend.*/



  OM0BW01.OM0BWFND = "N";
  OMAREC.OMASUB = 0;
  OMAREC.OMASUB2 = 0;

  while (OMAREC.OMASUB < 6)
    OMAREC.OMASUB = OMAREC.OMASUB + 1;
    OMAREC.OMASUB1 = 1;
    while (OMAREC.OMASUB1 <= 40)
      if (OP3REC.OP3SZAFL[OMASUB1] == "Y") /* if active size*/
        OMAREC.OMASUB2 = OMAREC.OMASUB2 + 1;
        if (OP3REC.OP3ONOQT[OMASUB1] > OM0BW03.OP3ORGQT[OMASUB1])
          OP3REC.OP3ORGQT[OMASUB1] = OM0BW03.OP3ORGQT[OMASUB1];
          OM0BW03.OP3ORGQT[OMASUB1] = 0;
        else
          OP3REC.OP3ORGQT[OMASUB1] = OP3REC.OP3ONOQT[OMASUB1];
          OM0BW01.OM0BWQTY = OP3REC.OP3ONOQT[OMASUB1];
          OM0BW03.OP3ORGQT[OMASUB1] = OM0BW03.OP3ORGQT[OMASUB1] -           OM0BW01.OM0BWQTY;
        end
        if (OM0BW01.OM0BWBDF == "DR") /* if rebook draw*/
          OP3REC.OP3ORGQT[OMASUB1] = 0; /* draw orig qty*/
        end /* is always zero*/
        OM0BW01.OM0BWQTY = OP3REC.OP3ONOQT[OMASUB1];
        OM0BW03.OP3ONOQT[OMASUB1] = OM0BW03.OP3ONOQT[OMASUB1] - OM0BWQTY;
        if (OM0BW03.OP3OHRQT[OMASUB1] > 0)
          if (OP3REC.OP3ONOQT[OMASUB1] > OM0BW03.OP3OHRQT[OMASUB1])
            OP3REC.OP3OHRQT[OMASUB1] = OM0BW03.OP3OHRQT[OMASUB1];
            OM0BW03.OP3OHRQT[OMASUB1] = 0;
          else
            OP3REC.OP3OHRQT[OMASUB1] = OP3REC.OP3ONOQT[OMASUB1];
            OM0BW01.OM0BWQTY = OP3REC.OP3ONOQT[OMASUB1];
            OM0BW03.OP3OHRQT[OMASUB1] = OM0BW03.OP3OHRQT[OMASUB1] -             OM0BWQTY;
          end
        end
      end
      OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
    end
    OM0BW03.OP2TDRWQ = OM0BW03.OP2TDRWQ + OP3REC.OP2TONOQ;
    OP8REC.OP8TASK = "U ";
    OP8REC.OP8LOCAT[1] = "OP0I060";
    OP8REC.OP8LOCAT[2] = "OP0IS6E";
    call "DB1000" (OP8REC, OM0BW03, OPBREC) {isNoRefresh = yes, isExternal = yes};
    if (OPBREC.OPBSZRC == 0) /* good return*/
      OMAREC.OMASUB = 99;
    else
      if (OPBREC.OPBSZRC == 2 /* change count error codes*/
       || OPBREC.OPBSZRC == 3) /* re check availability*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        OP8REC.OP8TASK = "S ";
        call "DB1000" (OP8REC, OM0BW03, OPBREC) {isNoRefresh = yes, isExternal = yes};
        if (OPBREC.OPBSZRC == 0)
          OMAREC.OMASUB1 = 1;
          while (OMAREC.OMASUB1 <= 40)
            if (OP3REC.OP3SZAFL[OMASUB1] == "Y")
              if (OM0BW01.OM0BWBDF == "DS"
               || (OM0BW01.OM0BWBDF == "DN" && 
              XOTTBL.XOTATONF[OM0BWSBO] == "Y"))
                if (OP3REC.OP3ONOQT[OMASUB1] > OM0BW03.OP3OHRQT[OMASUB1])
                  OMAREC.OMASUB = 6;
                  OMAREC.OMASUB1 = 41;
                end
              else
                /* ***IF OM0BW01.OM0BWBDF EQ 'DS'or'dx'*/
                if (OP3REC.OP3ONOQT[OMASUB1] > OM0BW03.OP3ONOQT[OMASUB1])
                  OMAREC.OMASUB = 6;
                  OMAREC.OMASUB1 = 41;
                end
              end
            end
            OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
          end
        else
          OM0BS88(); /* abend*/
        end
      else
        OM0BS88(); /* abend*/
      end
    end
  end






      /* for the quantity ordered, set line item status*/
      /* appropriately.*/

   /* now reset the status based on item values.*/

  OM0BW01.OM0BWFND = "N";
  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 40)
    if (OP3REC.OP3SZAFL[sysVar.arrayIndex] == "Y" /* if size active*/
     && OP3REC.OP3ONOQT[sysVar.arrayIndex] > 0)  
      if (OP3REC.OP3ONOQT[sysVar.arrayIndex] > OP3REC.OP3OHRQT[sysVar.arrayIndex]
       && OP3REC.OP3OHRQT[sysVar.arrayIndex] > 0)
        OM0BW01.OM0BWFND = "P";
      else
        if (OP3REC.OP3ONOQT[sysVar.arrayIndex] == OP3REC.OP3OHRQT[sysVar.arrayIndex])
          if (OM0BW01.OM0BWFND == "P") /* don't reset 'pr' stat*/
             /* next sentence*/
          else
            if (OM0BW01.OM0BWFND == "O")
              OM0BW01.OM0BWFND = "P";
            else
              OM0BW01.OM0BWFND = "R";
            end
          end
        else
          if (OM0BW01.OM0BWFND == "R")
            OM0BW01.OM0BWFND = "P";
          else
            if (OM0BW01.OM0BWFND == "P")
               /* next sentence*/
            else
              OM0BW01.OM0BWFND = "O";
            end
          end
        end
      end
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end


  if (OM0BW01.OM0BWFND == "P")
    OP3REC.OP2LNIST = "PR"; /* set status to partailly reserved*/
    OP1REC.XOSCD = " "; /* trigger order level stat chk*/
  else
    if (OM0BW01.OM0BWFND == "R")
      OP3REC.OP2LNIST = "RS"; /* set status to reserved*/
      OP1REC.XOSCD = " "; /* trigger order level stat chk*/
    else
      OP3REC.OP2LNIST = "OP"; /* set status to open*/
    end
  end






  if (OMAREC.OMASUB == 6) /* if not enough availability*/
    OM0BW01.OM0BWRST = "Y"; /* set restart flag*/
    converseLib.validationFailed(297);
    exit stack;
  else
    OM0BW01.OM0BWRST = "N";
  end




    /* update bulk order header value and units.*/

       /* hdr = hdr - old line*/
       /* hdr = hdr + new line*/




  OMAREC.OMASUB = 0;

  while (OMAREC.OMASUB < 6)
    OMAREC.OMASUB = OMAREC.OMASUB + 1;
    OM0BW04.OP1OVALU = OM0BW04.OP1OVALU - OM0BW02.OP2LNIVL;
    OM0BW04.OP1OVALU = OM0BW04.OP1OVALU + OM0BW03.OP2LNIVL;
    OM0BW04.OP1OTUNT = OM0BW04.OP1OTUNT - OM0BW02.OP2TONOQ;
    OM0BW04.OP1OTUNT = OM0BW04.OP1OTUNT + OM0BW03.OP2TONOQ;
    if (OM0BW01.OM0BWNSF == "Y") /* new suborder will be written*/
      OM0BW04.OP1NDRAW = OM0BW04.OP1NDRAW + 1;
    end
    OM0BW04.ZZZCHGTM = OM0BW03.ZZZCHGTM;
    OM0BW04.ZZZCHGDT = OM0BW03.ZZZCHGDT;
    call "IO0430" ("U ", SQLCA, OM0BW04) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      /* Tcs include begin 08/25/98*/
      set VBULKS02 empty;
      set OBFREC empty;
      set SQLCA empty;
      VBULKS02.OP1PARTN = OM0BW04.OP1PARTN;
      VBULKS02.OP1CUOID = OM0BW04.OP1CUOID;
      VBULKS02.OP1NORID = OM0BW04.OP1NORID;
      OBFREC.OBFTASK = "S ";

      OM0BS-CHECK-UPDA1(); /* for updating corresp vbulk recs*/
      /* Tcs include end   08/25/98*/
      OMAREC.OMASUB = 9;
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* deadlock - all changes rolled out*/
        converseLib.validationFailed(6); /* bad system return code try again*/
        exit stack;
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* change count*/
          call "IO0430" ("S ", SQLCA, OM0BW04) {isNoRefresh = yes, isExternal = yes}; /* re-read header*/
          if (SQLCA.VAGen_SQLCODE == 0)
             /* next sentence*/
          else
            TA1REC.TA1DBASE = "DORDER";
            TA1REC.TA1TBLVU = "VORHDR01";
            TA1REC.TA1LOCAT[1] = "U ";
            TA1REC.TA1LOCAT[2] = "OM0BSUB";
            TA1REC.TA1LOCAT[3] = "IO0430";
            TA1REC.TA1TBLKE = OP1REC.OP1KEY;
            OM0BS02(); /* abend*/
          end
        else
          TA1REC.TA1DBASE = "DORDER";
          TA1REC.TA1TBLVU = "VORHDR01";
          TA1REC.TA1LOCAT[1] = "U ";
          TA1REC.TA1LOCAT[2] = "OM0BSUB";
          TA1REC.TA1LOCAT[3] = "IO0430";
          TA1REC.TA1TBLKE = OP1REC.OP1KEY;
          OM0BS02(); /* abend*/
        end
      end
    end
  end


   /* write rebook draw audit*/


  if (OM0BW01.OM0BWBDF == "DR")
    set OPRREC empty;
    OPRREC.OPRBNOID = OM0BW03.OP1NORID;
    OPRREC.ZZZCHGTM = OM0BW03.ZZZCHGTM;
    OPRREC.ZZZSDT = OM0BW03.ZZZCHGDT;
    OM0BS85(); /* build rebook audit*/
    OM0BS86(); /* write rebook audit*/
  end
end // end OM0BSUB

// get warehouse required flag
Function OM0BSWR()
   /* ************************************************************/


  sysVar.arrayIndex = 1;
  if (OP1REC.XDSCD == " ")
    OM0BW01.XDSWHSEF = "Y"; /* save whse flag*/
  else
    if (OP1REC.XDSCD in XDSTBL.XDSCD
     && XDSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      OM0BW01.XDSWHSEF = XDSTBL.XDSWHSEF[sysVar.arrayIndex]; /* save whse flag*/
    end
  end


   /* ***********************************************************/
end // end OM0BSWR

// protect map fields
Function XS0BS-SET-ATTRIB()
   /* ***************************************/
   /* protect all map fields for         **/
   /* transmitted airborne orders        **/
   /* updates are not allowed          **/
   /* **************************************/

  set OM0BM001.XOWCD protect;
  set OM0BM001.XOACD protect;
  set OM0BM001.XOMCD protect;
  set OM0BM001.OP3ONOQT[1] skip;
  set OM0BM001.OP3ONOQT[2] skip;
  set OM0BM001.OP3ONOQT[3] skip;
  set OM0BM001.OP3ONOQT[4] skip;
  set OM0BM001.OP3ONOQT[5] skip;
  set OM0BM001.OP3ONOQT[6] skip;
  set OM0BM001.OP3ONOQT[7] skip;
  set OM0BM001.OP3ONOQT[8] skip;
  set OM0BM001.OP3ONOQT[9] skip;
  set OM0BM001.OP3ONOQT[10] skip;
  set OM0BM001.OP3ONOQT[11] skip;
  set OM0BM001.OP3ONOQT[12] skip;
  set OM0BM001.OP3ONOQT[13] skip;
  set OM0BM001.OP3ONOQT[14] skip;
  set OM0BM001.OP3ONOQT[15] skip;
  set OM0BM001.OP3ONOQT[16] skip;
  set OM0BM001.OP3ONOQT[17] skip;
  set OM0BM001.OP3ONOQT[18] skip;
  set OM0BM001.OP3ONOQT[19] skip;
  set OM0BM001.OP3ONOQT[20] skip;

  set OM0BM001.OM0BMFIL skip;
  set OM0BM001.OM0BMPAL skip;
  set OM0BM001.OM0BMPAD skip;
  set OM0BM001.OM0BWMOR skip;
  set OM0BM001.XWHCD skip;
  set OM0BM001.OM0BMNDT skip;
  set OM0BM001.OP1BOFL skip;
  set OM0BM001.OP2GTSZF skip;

  set OM0BM001.XHDCD[1] skip;
  set OM0BM001.XHDCD[2] skip;
  set OM0BM001.XHDCD[3] skip;
  set OM0BM001.XHDCD[4] skip;
  set OM0BM001.XHDCD[5] skip;

  set OM0BM001.XHDCHG[1] skip;
  set OM0BM001.XHDCHG[2] skip;
  set OM0BM001.XHDCHG[3] skip;
  set OM0BM001.XHDCHG[4] skip;
  set OM0BM001.XHDCHG[5] skip;

  set OM0BM001.OM0BMHTP[1] skip;
  set OM0BM001.OM0BMHTP[2] skip;
  set OM0BM001.OM0BMHTP[3] skip;
  set OM0BM001.OM0BMHTP[4] skip;
  set OM0BM001.OM0BMHTP[5] skip;

  set OM0BM001.OP2CGPCD skip;
  set OM0BM001.OP2KSTYF skip;
  set OM0BM001.OP2SSTYN skip;
  set OM0BM001.OP2SCLCD skip;
  set OM0BM001.OP2SDMCD skip;
  set OM0BM001.OP2SUBQT skip;
  set OM0BM001.OP2FSTFL skip;
  set OM0BM001.OM0BMCUR cursor, protect;

  OM0BM001.OM0BPF21 = " ";
end // end XS0BS-SET-ATTRIB

//*** RECORD=OM0BW01 ****
// om0bw01 is the working-storage used only by application om0b
// ;
// it contains fields to
//     format product number for display
//     subscripts for various arrays
//     first & last sizes (both actual and those with qty ne 0.
// ;
// 10/23/92   dcaust    add om0bw-pricing-factor
// 12/15/92   dcaust    add om0bw-save-price-1,
//                          om0bw-save-price-2
//                          to round b-grade product price up
//                          to the nickel.
// 3/35/93    clenni    add om0bw-table-key,
//                          omobw-say-order,
//                          om0bw-order-num,
//                          om0bw-say-period,
//                          om0bw-sub-order,
//                          om0bw-say-spgm,
//                          om0bw-spgm
//                          to make the post for db2 error
// 6/28/93    sjob      add om0bw-hold-ezetst-val(last valid $)
// 2/28/94    scantr    resize fields used for price and value
// 3/29/00    lrao1     om0bw-bssa-product,om0bw-bssa-old-hnd,
// TT#4752              om0bw-bssa-hnd-cd,om0bw-bssa-sub-flag
//            rharat    OM0BW-BSSA-SUB   , OM0BW-HNDL-ON-CST
//                      added for - BSSA goes GPC02 project
// ;
// ***********************
Record OM0BW01 type basicRecord
  5 OM0BW01G OM0BW01G ; 
    10 OM0BWHTP OM0BWHTP ; 
      15 XHDUCHFL XHDUCHFL ; 
      15 OP2HCHGO OP2HCHGO ; 
    10 OM0BWAVD OM0BWAVD ; 
    10 OM0BWDAV OM0BWDAV ; 
    10 OM0BWCQT OM0BWCQT [40] ; 
    10 XUMCONVF XUMCONVF ; 
    10 OM0BWTOT OM0BWTOT ; 
    10 OM0BWQTY OM0BWQTY ; 
    10 OM0BWVAR OM0BWVAR ; 
    10 OM0BWSZC OM0BWSZC ; 
    10 XSZNBRSZ XSZNBRSZ ; 
    10 OM0BWWDT OM0BWWDT ; 
      15 OM0BWWMM OM0BWWMM ; 
      15 OM0BWSP1 OM0BWSP1 ; 
      15 OM0BWWDD OM0BWWDD ; 
      15 OM0BWSP2 OM0BWSP2 ; 
      15 OM0BWWYY OM0BWWYY ; 
    10 OM0BWTM1 OM0BWTM1 ; 
      15 OM0BWTHF OM0BWTHF ; 
      15 * char(1) ; 
      15 OM0BWTMF OM0BWTMF ; 
      15 * char(1) ; 
      15 OM0BWTSF OM0BWTSF ; 
    10 OM0BWTM2 OM0BWTM2 ; 
      15 OM0BWTM3 OM0BWTM3 ; 
        20 OM0BWTHL OM0BWTHL ; 
        20 OM0BWTML OM0BWTML ; 
      15 OM0BWTSL OM0BWTSL ; 
    10 OM0BWSS1 OM0BWSS1 ; 
    10 OM0BWMM1 OM0BWMM1 ; 
    10 OM0BWNSN OM0BWNSN ; 
    10 OM0BWDPF OM0BWDPF ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 OM0BWMOR OM0BWMOR ; 
    10 OM0BWSCR OM0BWSCR ; 
    10 OM0BWEDT OM0BWEDT ; 
    10 OM0BWFND OM0BWFND ; 
    10 OM0BWNSF OM0BWNSF ; 
    10 OM0BWOAF OM0BWOAF ; 
    10 OM0BWOAO OM0BWOAO ; 
    10 OM0BWPAO OM0BWPAO ; 
    10 OM0BWPF6 OM0BWPF6 ; 
    10 OM0BWP21 OM0BWP21 ; 
    10 OM0BWREJ OM0BWREJ ; 
    10 OM0BWDUP OM0BWDUP ; 
    10 OP1NORID OP1NORID ; 
    10 OM0BWSSN OM0BWSSN ; 
    10 OM0BWPRD OM0BWPRD ; 
      15 SY1STNBR SY1STNBR ; 
      15 OM0BWS01 OM0BWS01 ; 
      15 SY2CLRID SY2CLRID ; 
      15 OM0BWS02 OM0BWS02 ; 
      15 XDMCD XDMCD ; 
    10 OM0BWSBM OM0BWSBM ; 
    10 OM0BWSBR OM0BWSBR ; 
    10 OM0BWSB2 OM0BWSB2 ; 
    10 OM0BWSBO OM0BWSBO ; 
    10 OM0BWVSZ OM0BWVSZ ; 
    10 OM0BWSZF OM0BWSZF ; 
    10 OM0BWSZL OM0BWSZL ; 
    10 OM0BWSMF OM0BWSMF ; 
    10 OM0BWSML OM0BWSML ; 
    10 OM0BWWHS OM0BWWHS ; 
    10 OM0BWARF OM0BWARF ; 
    10 OM0BWCWH OM0BWCWH ; 
    10 XDSWHSEF XDSWHSEF ; 
    10 OM0BWCND OM0BWCND ; 
    10 OM0BWCDS OM0BWCDS ; 
    10 OM0BWSPP OM0BWSPP ; 
    10 OM0BWPSC OM0BWPSC ; 
    10 OM0BWPED OM0BWPED ; 
    10 OM0BWSTP OM0BWSTP ; 
    10 OM0BWCLP OM0BWCLP ; 
    10 OM0BWPRC OM0BWPRC ; 
    10 OM0BWPCT OM0BWPCT ; 
    10 OM0BWPRO OM0BWPRO ; 
    10 OM0BWPRN OM0BWPRN ; 
    10 OM0BWPAL OM0BWPAL ; 
    10 OM0BWPAD OM0BWPAD ; 
    10 OM0BWPSZ OM0BWPSZ ; 
    10 OM0BWSSP OM0BWSSP [40] ; 
    10 OM0BWBDF OM0BWBDF ; 
    10 OM0BWBBF OM0BWBBF ; 
    10 OM0BWRST OM0BWRST ; 
    10 OP3SZARY OP3SZARY ; 
      15 OP3SZAFL OP3SZAFL ; 
      15 OP2PRCOF OP2PRCOF ; 
      15 SY5PRCUN SY5PRCUN ; 
      15 OP3ORGQT OP3ORGQT ; 
      15 OP3ONOQT OP3ONOQT ; 
      15 OP3ALQT OP3ALQT ; 
      15 OP3OHRQT OP3OHRQT ; 
      15 OP3WPRQT OP3WPRQT ; 
      15 OP3SHPQT OP3SHPQT ; 
      15 OP3CNLQT OP3CNLQT ; 
    10 OM0BWOND OM0BWOND ; 
      15 OM0BWNYM OM0BWNYM ; 
      15 * num(2) ; 
    10 OM0BWOBD OM0BWOBD ; 
      15 OM0BWBYM OM0BWBYM ; 
      15 * num(2) ; 
    10 OM0BWNDT OM0BWNDT ; 
      15 OM0BWNYY OM0BWNYY ; 
      15 OM0BWNMM OM0BWNMM ; 
      15 OM0BWNDD OM0BWNDD ; 
    10 OM0BWFDA OM0BWFDA ; 
      15 XOTCD XOTCD ; 
      15 OM0BWCDT OM0BWCDT ; 
        20 OM0BWCMM OM0BWCMM ; 
        20 OM0BWCDD OM0BWCDD ; 
      15 OM0BWHS OM0BWHS ; 
    10 OM0BWPUM OM0BWPUM ; 
    10 OM0BWP20 OM0BWP20 ; 
    10 OM0BW-DAYS-PAST-CUTOFF OM0BW-DAYS-PAST-CUTOFF ; 
    10 OM0BWSFL OM0BWSFL ; 
    10 OM0BWSBS OM0BWSBS ; 
    10 OM0BWSBP OM0BWSBP ; 
    10 OM0BWCHG OM0BWCHG ; 
    10 OM0BWEZ1 OM0BWEZ1 ; 
    10 OM0BWDT1 OM0BWDT1 ; 
      15 OM0BWDT2 OM0BWDT2 ; 
      15 OM0BWDT3 OM0BWDT3 ; 
    10 OM0BWT1 OM0BWT1 ; 
      15 OM0BWTK1 OM0BWTK1 ; 
      15 OM0BWTK2 OM0BWTK2 ; 
      15 OM0BWTK3 OM0BWTK3 ; 
      15 OM0BWTK4 OM0BWTK4 ; 
      15 OM0BWTK5 OM0BWTK5 ; 
      15 OM0BWTK6 OM0BWTK6 ; 
      15 OM0BWTK7 OM0BWTK7 ; 
    10 OM0BWELI OM0BWELI ; 
    10 OM0BWAUT OM0BWAUT ; 
    10 OM0BWDIG OM0BWDIG ; 
      15 OM0BWDI1 OM0BWDI1 ; 
      15 OM0BWDI2 OM0BWDI2 ; 
      15 OM0BWDI3 OM0BWDI3 ; 
      15 OM0BWDI4 OM0BWDI4 ; 
    10 OM0BWOVV OM0BWOVV ; 
    10 OM0BWNPA OM0BWNPA ; 
      15 OM0BWNP1 OM0BWNP1 ; 
      15 OM0BWNP2 OM0BWNP2 ; 
      15 OM0BWNP3 OM0BWNP3 ; 
      15 OM0BWNP4 OM0BWNP4 ; 
      15 OM0BWNP5 OM0BWNP5 ; 
    10 OM0BWNIM OM0BWNIM ; 
      15 OM0BWNI1 OM0BWNI1 ; 
      15 OM0BWNI2 OM0BWNI2 ; 
      15 OM0BWNI3 OM0BWNI3 ; 
      15 OM0BWNI4 OM0BWNI4 ; 
      15 OM0BWNI5 OM0BWNI5 ; 
    10 OM0BWPR1 OM0BWPR1 ; 
    10 OM0BWPR2 OM0BWPR2 ; 
    10 OM0BWZPR OM0BWZPR ; 
    10 OM0BWIPC OM0BWIPC ; 
    10 XAUCD XAUCD ; 
    10 OM0BWNWH OM0BWNWH ; 
    10 OM0BWSU1 OM0BWSU1 ; 
      15 OM0BWDAY OM0BWDAY ; 
    10 OM0BWCON OM0BWCON ; 
      15 OM0BWCOM OM0BWCOM ; 
      15 OM0BWFIL OM0BWFIL ; 
      15 OM0BWCOD OM0BWCOD ; 
    10 OM0BWNCD OM0BWNCD ; 
      15 OM0BWNCC OM0BWNCC ; 
      15 OM0BWNYR OM0BWNYR ; 
      15 OM0BWNMO OM0BWNMO ; 
      15 OM0BWNDA OM0BWNDA ; 
    10 OM0BWHYY OM0BWHYY ; 
    10 OM0BWBCD OM0BWBCD ; 
    10 OM0BWP01 OM0BWP01 ; 
    10 XHDKEY XHDKEY ; 
      15 XHDCD XHDCD ; 
      15 XGPCD XGPCD ; 
    10 OM0BW-SUB1 OM0BW-SUB1 ; 
    10 OM0BW-EK1-KEY OM0BW-EK1-KEY ; 
      15 OM0BW-EK1-COMPANY OM0BW-EK1-COMPANY ; 
      15 OM0BW-EK1-FILL-1 OM0BW-EK1-FILL-1 ; 
      15 OM0BW-EK1-STORE OM0BW-EK1-STORE ; 
      15 OM0BW-EK1-FILL-2 OM0BW-EK1-FILL-2 ; 
      15 OM0BW-EK1-DEPT OM0BW-EK1-DEPT ; 
      15 OM0BW-EK1-FILL-3 OM0BW-EK1-FILL-3 ; 
      15 OM0BW-EK1-GPC OM0BW-EK1-GPC ; 
    10 OM0BW-EK2-KEY OM0BW-EK2-KEY ; 
      15 OM0BW-EK2-PART-CHAR OM0BW-EK2-PART-CHAR ; 
      15 OM0BW-EK2-FILL-1 OM0BW-EK2-FILL-1 ; 
      15 OM0BW-EK2-CUST-ORD-ID OM0BW-EK2-CUST-ORD-ID ; 
      15 OM0BW-EK2-FILL-2 OM0BW-EK2-FILL-2 ; 
      15 OM0BW-EK2-NIKE-ORD-ID OM0BW-EK2-NIKE-ORD-ID ; 
    10 OM0BW-BULK-DONT-SHIP-AFTER-DATE OM0BW-BULK-DONT-SHIP-AFTER-DATE ; 
    10 OM0BW-BULK-NEED-DATE OM0BW-BULK-NEED-DATE ; 
    10 OM0BW-MOVE-QUANTITY-FLAG OM0BW-MOVE-QUANTITY-FLAG ; 
    10 OM0BW-OWNER-GROUP-CHANGE-FLAG OM0BW-OWNER-GROUP-CHANGE-FLAG ; 
    10 OM0BWPDT OM0BWPDT ; 
    10 OM0BW-JC-PENNEYS-FL OM0BW-JC-PENNEYS-FL ; 
    10 OM0BW-SPLIT-FL OM0BW-SPLIT-FL ; 
    10 OM0BW-SOCD-CHNG-NDT-FL OM0BW-SOCD-CHNG-NDT-FL ; 
    10 OM0BW-BELKS-FL OM0BW-BELKS-FL ; 
    10 OM0BW-BK-SESN-REQUIRED OM0BW-BK-SESN-REQUIRED ; 
    10 OM0BW-DEFAULT-BK-SESN OM0BW-DEFAULT-BK-SESN ; 
    10 OM0BW-MULTI-BK-SESN-MSG OM0BW-MULTI-BK-SESN-MSG ; 
    10 OM0BW-BK-SESN-ERR OM0BW-BK-SESN-ERR ; 
    10 OM0BW-NUM-1-4 OM0BW-NUM-1-4 ; 
      15 OM0BW-NUM-1-2 OM0BW-NUM-1-2 ; 
      15 OM0BW-NUM-3-4 OM0BW-NUM-3-4 ; 
    10 OM0BW-CHA-BK-YY OM0BW-CHA-BK-YY ; 
    10 OM0BW-OB1470-ERR-DESC OM0BW-OB1470-ERR-DESC ; 
      15 OM0BW-OB1470-OP1PARTN OM0BW-OB1470-OP1PARTN ; 
      15 OM0BW-OB1470-DASH-1 OM0BW-OB1470-DASH-1 ; 
      15 OM0BW-OB1470-OP1CUOID OM0BW-OB1470-OP1CUOID ; 
      15 OM0BW-OB1470-DASH-2 OM0BW-OB1470-DASH-2 ; 
      15 OM0BW-OB1470-OP1NORID OM0BW-OB1470-OP1NORID ; 
      15 OM0BW-OB1470-DASH-3 OM0BW-OB1470-DASH-3 ; 
      15 OM0BW-OB1470-OP2LNINB OM0BW-OB1470-OP2LNINB ; 
      15 OM0BW-OB1470-DASH-4 OM0BW-OB1470-DASH-4 ; 
      15 OM0BW-OB1470-XGPCD OM0BW-OB1470-XGPCD ; 
      15 OM0BW-OB1470-DASH-5 OM0BW-OB1470-DASH-5 ; 
      15 OM0BW-OB1470-SY1STNBR OM0BW-OB1470-SY1STNBR ; 
      15 OM0BW-OB1470-DASH-6 OM0BW-OB1470-DASH-6 ; 
      15 OM0BW-OB1470-SY2CLRID OM0BW-OB1470-SY2CLRID ; 
      15 OM0BW-OB1470-DASH-7 OM0BW-OB1470-DASH-7 ; 
      15 OM0BW-OB1470-XDMCD OM0BW-OB1470-XDMCD ; 
      15 OM0BW-OB1470-DASH-8 OM0BW-OB1470-DASH-8 ; 
      15 OM0BW-OB1470-NEED-DT OM0BW-OB1470-NEED-DT ; 
      15 OM0BW-OB1470-DASH-9 OM0BW-OB1470-DASH-9 ; 
      15 OM0BW-OB1470-XOTCD OM0BW-OB1470-XOTCD ; 
      15 OM0BW-OB1470-DASH-10 OM0BW-OB1470-DASH-10 ; 
      15 OM0BW-OB1470-XDVCD OM0BW-OB1470-XDVCD ; 
    10 OM0BW-PRICING-FACTOR OM0BW-PRICING-FACTOR ; 
    10 OM0BW-XOWCD-FOUND-FL OM0BW-XOWCD-FOUND-FL ; 
    10 OM0BW-PROMO-XOWCD-FL OM0BW-PROMO-XOWCD-FL ; 
    10 OM0BW-BLANK-BULK-ONLY-FL OM0BW-BLANK-BULK-ONLY-FL ; 
    10 OM0BW-AVOREC-ERRDIAG OM0BW-AVOREC-ERRDIAG ; 
      15 OM0BW-AVOREC-XOWCD OM0BW-AVOREC-XOWCD ; 
      15 OM0BW-AVOREC-RTN-STAT OM0BW-AVOREC-RTN-STAT ; 
      15 OM0BW-AVOREC-SY1STYNBR OM0BW-AVOREC-SY1STYNBR ; 
      15 OM0BW-AVOREC-SY2CLRID OM0BW-AVOREC-SY2CLRID ; 
      15 OM0BW-AVOREC-XDMCD OM0BW-AVOREC-XDMCD ; 
      15 OM0BW-AVOREC-DATE OM0BW-AVOREC-DATE ; 
      15 OM0BW-AVOREC-OPTION OM0BW-AVOREC-OPTION ; 
    10 OM0BW-SAVE-PRICE-1 OM0BW-SAVE-PRICE-1 ; 
    10 OM0BW-SAVE-PRICE-2 OM0BW-SAVE-PRICE-2 ; 
    10 OM0BW-TABLE-KEY OM0BW-TABLE-KEY ; 
      15 OM0BW-SAY-ORDER OM0BW-SAY-ORDER ; 
      15 OM0BW-ORDER-NUM OM0BW-ORDER-NUM ; 
      15 OM0BW-SAY-PERIOD OM0BW-SAY-PERIOD ; 
      15 OM0BW-SUB-ORDER OM0BW-SUB-ORDER ; 
      15 OM0BW-SAY-SPGM OM0BW-SAY-SPGM ; 
      15 OM0BW-SPGM OM0BW-SPGM ; 
    10 OM0BW-NEW-PROD-ADDED OM0BW-NEW-PROD-ADDED ; 
    10 OM0BW-BULK-FL OM0BW-BULK-FL ; 
    10 OM0BW-HOLD-EZETST-VAL OM0BW-HOLD-EZETST-VAL ; 
    10 OM0BW-WSY2000-FND-FLAG OM0BW-WSY2000-FND-FLAG ; 
    10 OM0BW-WSY2000-POST-1 OM0BW-WSY2000-POST-1 ; 
      15 OM0BW-WSY2000-GPC-CD OM0BW-WSY2000-GPC-CD ; 
      15 OM0BW-WSY2000-STY-NBR OM0BW-WSY2000-STY-NBR ; 
      15 OM0BW-WSY2000-COLR-CD OM0BW-WSY2000-COLR-CD ; 
      15 OM0BW-WSY2000-DIM-CD OM0BW-WSY2000-DIM-CD ; 
      15 OM0BW-WSY2000-PROD-REG-CD OM0BW-WSY2000-PROD-REG-CD ; 
      15 OM0BW-WSY2000-RETURN-CD OM0BW-WSY2000-RETURN-CD ; 
    10 OM0BW-BSSA-PRODUCT char(1) ; // bssa product flag
    10 OM0BW-BSSA-OLD-HND char(3) ; // bssa old hndl code
    10 OM0BW-BSSA-HND-CD char(3) ; // bssa hndl code new
    10 OM0BW-BSSA-SUB-FLG char(1) ; // bssa substitution flag
    10 OM0BW-BSSA-SUB num(1) ; // subscript used for bssa
    10 OM0BW-HNDL-ON-CST char(1) ; // fl to chk if hndl is on cust
end // end OM0BW01

//*** RECORD=OM0BW02 ****
// w/s version of op2rec used to hold bulk item header.
// 
// note, this is an exact copy of op2rec as of 03/11/92
// (march 92 database changes)
//                                bbake2
// ***********************
Record OM0BW02 type basicRecord
  5 OP2GROUP OP2GROUP ; 
    10 OP2KEY OP2KEY ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
      15 OP2LNINB OP2LNINB ; 
    10 OP2CPLNB OP2CPLNB ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 KUIPRDID KUIPRDID ; 
    10 XUMCD XUMCD ; 
    10 XOWCD XOWCD ; 
    10 OP2PRDSF OP2PRDSF ; 
    10 OP2SSTYN OP2SSTYN ; 
    10 OP2SCLCD OP2SCLCD ; 
    10 OP2SDMCD OP2SDMCD ; 
    10 OP2SUBQT OP2SUBQT ; 
    10 OPRBNOID OPRBNOID ; 
    10 OP2TDRWQ OP2TDRWQ ; 
    10 OP2CGPCD OP2CGPCD ; 
    10 OP2KSTYF OP2KSTYF ; 
    10 OP2GTSZF OP2GTSZF ; 
    10 XEGCD XEGCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XBK-BK-SESN-CD XBK-BK-SESN-CD ; 
    10 OP-BK-YR OP-BK-YR ; 
    10 OP-BK-MO OP-BK-MO ; 
    10 OP2MSCDP OP2MSCDP ; 
    10 OP2PGRPF OP2PGRPF ; 
    10 OP2FSTFL OP2FSTFL ; 
    10 XQACD XQACD ; 
    10 OP2LNIST OP2LNIST ; 
    10 OP2LNSDT OP2LNSDT ; 
    10 XBRCD XBRCD ; 
    10 XDNCD XDNCD ; 
    10 XRSCD XRSCD ; 
    10 XAFCD XAFCD ; 
    10 OP1ALFDT OP1ALFDT ; 
    10 OP1BOFL OP1BOFL ; 
    10 XHDCD XHDCD [5] ; 
    10 XHDCHG XHDCHG [5] ; 
    10 OP2HCHGO OP2HCHGO [5] ; 
    10 PWRLBCD PWRLBCD [2] ; 
    10 OP-CUST-LABL-PRTFL OP-CUST-LABL-PRTFL ; 
    10 XOMCD XOMCD [4] ; 
    10 XMTCD XMTCD [4] ; 
    10 OP2OMQTY OP2OMQTY [4] ; 
    10 OP2OMDT OP2OMDT [4] ; 
    10 OP1MTREP OP1MTREP [4] ; 
    10 OP2GBLOF OP2GBLOF ; 
    10 OP2PRCOF OP2PRCOF ; 
    10 OP2PRCVF OP2PRCVF ; 
    10 OP2TOBKQ OP2TOBKQ ; 
    10 OP2TORGQ OP2TORGQ ; 
    10 OP2TONOQ OP2TONOQ ; 
    10 OP2TALCQ OP2TALCQ ; 
    10 OP2TOHRQ OP2TOHRQ ; 
    10 OP2TWIPQ OP2TWIPQ ; 
    10 OP2TSHPQ OP2TSHPQ ; 
    10 OP2TCNLQ OP2TCNLQ ; 
    10 OP2AUPRC OP2AUPRC ; 
    10 OP2LNIVL OP2LNIVL ; 
    10 OP2NSIZE OP2NSIZE ; 
    10 XDZ-DATA-DIST-CD XDZ-DATA-DIST-CD ; 
    10 ZZ-CS400-CHNG-DT ZZ-CS400-CHNG-DT ; 
    10 ZZ-CS400-CHNG-HHMM ZZ-CS400-CHNG-HHMM ; 
    10 ZZ-DS400-CHNG-DT ZZ-DS400-CHNG-DT ; 
    10 ZZ-DS400-CHNG-HHMM ZZ-DS400-CHNG-HHMM ; 
    10 ZZZSZCHG ZZZSZCHG ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end OM0BW02

//*** RECORD=OM0BW03 ****
// w/s version of op3rec used to hold bulk item details
// 
// note, this is an exact copy of op3rec as of 03/11/92
// (march 92 database changes.             bbake2
// ***********************
Record OM0BW03 type basicRecord
  5 OP3GROUP OP3GROUP ; 
    10 OP2KEY OP2KEY ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
      15 OP2LNINB OP2LNINB ; 
    10 OP2CPLNB OP2CPLNB ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 KUIPRDID KUIPRDID ; 
    10 XUMCD XUMCD ; 
    10 XOWCD XOWCD ; 
    10 OP2PRDSF OP2PRDSF ; 
    10 OP2SSTYN OP2SSTYN ; 
    10 OP2SCLCD OP2SCLCD ; 
    10 OP2SDMCD OP2SDMCD ; 
    10 OP2SUBQT OP2SUBQT ; 
    10 OPRBNOID OPRBNOID ; 
    10 OP2TDRWQ OP2TDRWQ ; 
    10 OP2CGPCD OP2CGPCD ; 
    10 OP2KSTYF OP2KSTYF ; 
    10 OP2GTSZF OP2GTSZF ; 
    10 XEGCD XEGCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XBK-BK-SESN-CD XBK-BK-SESN-CD ; 
    10 OP-BK-YR OP-BK-YR ; 
    10 OP-BK-MO OP-BK-MO ; 
    10 OP2MSCDP OP2MSCDP ; 
    10 OP2PGRPF OP2PGRPF ; 
    10 OP2FSTFL OP2FSTFL ; 
    10 XQACD XQACD ; 
    10 OP2LNIST OP2LNIST ; 
    10 OP2LNSDT OP2LNSDT ; 
    10 XBRCD XBRCD ; 
    10 XDNCD XDNCD ; 
    10 XRSCD XRSCD ; 
    10 XAFCD XAFCD ; 
    10 OP1ALFDT OP1ALFDT ; 
    10 OP1BOFL OP1BOFL ; 
    10 XHDCD XHDCD [5] ; 
    10 XHDCHG XHDCHG [5] ; 
    10 OP2HCHGO OP2HCHGO [5] ; 
    10 PWRLBCD PWRLBCD [2] ; 
    10 OP-CUST-LABL-PRTFL OP-CUST-LABL-PRTFL ; 
    10 XOMCD XOMCD [4] ; 
    10 XMTCD XMTCD [4] ; 
    10 OP2OMQTY OP2OMQTY [4] ; 
    10 OP2OMDT OP2OMDT [4] ; 
    10 OP1MTREP OP1MTREP [4] ; 
    10 OP2GBLOF OP2GBLOF ; 
    10 OP2PRCOF OP2PRCOF ; 
    10 OP2PRCVF OP2PRCVF ; 
    10 OP2TOBKQ OP2TOBKQ ; 
    10 OP2TORGQ OP2TORGQ ; 
    10 OP2TONOQ OP2TONOQ ; 
    10 OP2TALCQ OP2TALCQ ; 
    10 OP2TOHRQ OP2TOHRQ ; 
    10 OP2TWIPQ OP2TWIPQ ; 
    10 OP2TSHPQ OP2TSHPQ ; 
    10 OP2TCNLQ OP2TCNLQ ; 
    10 OP2AUPRC OP2AUPRC ; 
    10 OP2LNIVL OP2LNIVL ; 
    10 OP2NSIZE OP2NSIZE ; 
    10 ZZZSZCHG ZZZSZCHG ; 
    10 XDZ-DATA-DIST-CD XDZ-DATA-DIST-CD ; 
    10 ZZ-CS400-CHNG-DT ZZ-CS400-CHNG-DT ; 
    10 ZZ-CS400-CHNG-HHMM ZZ-CS400-CHNG-HHMM ; 
    10 ZZ-DS400-CHNG-DT ZZ-DS400-CHNG-DT ; 
    10 ZZ-DS400-CHNG-HHMM ZZ-DS400-CHNG-HHMM ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
    10 OP3SZARY OP3SZARY [40] ; 
      15 OP3SZAFL OP3SZAFL ; 
      15 OP3PRCOF OP3PRCOF ; 
      15 SY5PRCUN SY5PRCUN ; 
      15 OP3ORGQT OP3ORGQT ; 
      15 OP3ONOQT OP3ONOQT ; 
      15 OP3ALQT OP3ALQT ; 
      15 OP3OHRQT OP3OHRQT ; 
      15 OP3WPRQT OP3WPRQT ; 
      15 OP3SHPQT OP3SHPQT ; 
      15 OP3CNLQT OP3CNLQT ; 
end // end OM0BW03

//*** RECORD=OM0BW04 ****
// holding area for op1rec.  bulk order header
// 
// note, this is an exact copy of op1rec as of 03/11/92
// (march 92 database changes)             bbake2
// ***********************
Record OM0BW04 type basicRecord
  5 OP1GROUP OP1GROUP ; 
    10 OP1KEY OP1KEY ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
    10 OB1XREFN OB1XREFN ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 XGPCD XGPCD ; 
    10 OP1CMPNB OP1CMPNB ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1PORMF OP1PORMF ; 
    10 OP1ORDBY OP1ORDBY ; 
    10 OP1TBREP OP1TBREP ; 
    10 XDVCD XDVCD ; 
    10 XBCCD XBCCD ; 
    10 XSOCD XSOCD ; 
    10 XOTCD XOTCD ; 
    10 XOBCD XOBCD ; 
    10 XOCCD XOCCD ; 
    10 SP1ID SP1ID ; 
    10 SP6MDISC SP6MDISC ; 
    10 XWHCD XWHCD ; 
    10 OP1OWHMF OP1OWHMF ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 OP-ORIG-NEED-DT OP-ORIG-NEED-DT ; 
    10 XOSCD XOSCD ; 
    10 OP1OSADT OP1OSADT ; 
    10 OP1TDOF OP1TDOF ; 
    10 XTDPCT XTDPCT ; 
    10 OP1TDFCP OP1TDFCP ; 
    10 OP1TDBKP OP1TDBKP ; 
    10 OP1PTOF OP1PTOF ; 
    10 XPTCD XPTCD ; 
    10 OP1AAOF OP1AAOF ; 
    10 XAAPCT XAAPCT ; 
    10 OP1AAFCP OP1AAFCP ; 
    10 OP1AABKP OP1AABKP ; 
    10 OP1COPOF OP1COPOF ; 
    10 XCPPCT XCPPCT ; 
    10 OP1DFAOF OP1DFAOF ; 
    10 XDAPCT XDAPCT ; 
    10 XDSCD XDSCD ; 
    10 OP-DIRSHP-DSCT-PCT OP-DIRSHP-DSCT-PCT ; 
    10 SM1AGYID SM1AGYID ; 
    10 SM4REPID SM4REPID ; 
    10 OP-SREP-OVRD-FL OP-SREP-OVRD-FL ; 
    10 OP1SWORD OP1SWORD ; 
    10 XBDCD XBDCD ; 
    10 OP1BLKID OP1BLKID ; 
    10 OP1NDRAW OP1NDRAW ; 
    10 OP1COGID OP1COGID ; 
    10 OP1BLAID OP1BLAID ; 
    10 OP1SGPAO OP1SGPAO ; 
    10 OP1SHAID OP1SHAID ; 
    10 OP1ODSKF OP1ODSKF ; 
    10 OP1ENTDT OP1ENTDT ; 
    10 OP1ORCDT OP1ORCDT ; 
    10 OP1ENREP OP1ENREP ; 
    10 OP1CALDT OP1CALDT ; 
    10 OP-SND-CNFM-FL OP-SND-CNFM-FL ; 
    10 OP1DSBDT OP1DSBDT ; 
    10 OP1DSADT OP1DSADT ; 
    10 DN-PROD-INTR-DT DN-PROD-INTR-DT ; 
    10 OP1NTMAL OP1NTMAL ; 
    10 OP1ALSEQ OP1ALSEQ ; 
    10 OP1OALSQ OP1OALSQ ; 
    10 OP1LALDT OP1LALDT ; 
    10 OP1DABDT OP1DABDT ; 
    10 OP1DRBDT OP1DRBDT ; 
    10 XACCD XACCD ; 
    10 OP1ASGCO OP1ASGCO ; 
    10 XAHCD XAHCD ; 
    10 OP1ALHDT OP1ALHDT ; 
    10 OP1PAHCD OP1PAHCD ; 
    10 OP1ALRDT OP1ALRDT ; 
    10 XAFCD XAFCD ; 
    10 OP1ALFDT OP1ALFDT ; 
    10 KUNMAPCT KUNMAPCT ; 
    10 OP1RSVF OP1RSVF ; 
    10 OP1WIPIN OP1WIPIN ; 
    10 OP1EXPDF OP1EXPDF ; 
    10 KUNNOSFL KUNNOSFL ; 
    10 OP1ASHDF OP1ASHDF ; 
    10 OP1ACNLF OP1ACNLF ; 
    10 OP1SMSCF OP1SMSCF ; 
    10 OP1TIERF OP1TIERF ; 
    10 OP1TLVLN OP1TLVLN ; 
    10 OP1CPODT OP1CPODT ; 
    10 OP1BOFL OP1BOFL ; 
    10 XCHCD XCHCD [3] ; 
    10 XCSCD XCSCD ; 
    10 OP1CSADT OP1CSADT ; 
    10 OP1CSATM OP1CSATM ; 
    10 OP1CRLMP OP1CRLMP ; 
    10 OP1CRLMR OP1CRLMR ; 
    10 OP1PCSCD OP1PCSCD ; 
    10 OP1PCSDT OP1PCSDT ; 
    10 OP1PCSTM OP1PCSTM ; 
    10 OP1CCKOQ OP1CCKOQ ; 
    10 OP1CKAMT OP1CKAMT ; 
    10 OP1DCHLD OP1DCHLD ; 
    10 KUCVNDFL KUCVNDFL ; 
    10 OP1VAUDT OP1VAUDT ; 
    10 OP1VAUNB OP1VAUNB ; 
    10 OP-CALL-CR-CK-FL OP-CALL-CR-CK-FL ; 
    10 OP-LST-CR-CK-CO-ID OP-LST-CR-CK-CO-ID ; 
    10 XPACD XPACD ; 
    10 KUFMIXBL KUFMIXBL ; 
    10 KUCUNTCS KUCUNTCS ; 
    10 XPKCD XPKCD ; 
    10 XPPCD XPPCD ; 
    10 TF1CARCD TF1CARCD ; 
    10 OP1SSHPO OP1SSHPO ; 
    10 OP1ECADT OP1ECADT ; 
    10 OP1ECANM OP1ECANM ; 
    10 OP1IVADT OP1IVADT ; 
    10 OP1PCNDT OP1PCNDT ; 
    10 OP1CFMDT OP1CFMDT ; 
    10 OP1IPIND OP1IPIND ; 
    10 OP1FTIND OP1FTIND ; 
    10 OP1SHAMT OP1SHAMT ; 
    10 OP1IFAMT OP1IFAMT ; 
    10 XMDCD XMDCD ; 
    10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
    10 OP1OVALU OP1OVALU ; 
    10 OP1OTUNT OP1OTUNT ; 
    10 OP1ALCQF OP1ALCQF ; 
    10 OP1RSVQF OP1RSVQF ; 
    10 OP1SHPQF OP1SHPQF ; 
    10 OP1OSRID OP1OSRID ; 
    10 OP1ORADT OP1ORADT ; 
    10 XOMCD XOMCD ; 
    10 OP1OMDT OP1OMDT ; 
    10 OP1MTREP OP1MTREP ; 
    10 OP1SPLBF OP1SPLBF ; 
    10 OP1SPINF OP1SPINF ; 
    10 OP1SPHDF OP1SPHDF ; 
    10 OP1OMCMF OP1OMCMF ; 
    10 OP11TMSF OP11TMSF ; 
    10 OP11TMBF OP11TMBF ; 
    10 XID-IVC-DIST-CD XID-IVC-DIST-CD ; 
    10 DN-ORD-DIST-IND DN-ORD-DIST-IND ; 
    10 XDZ-DATA-DIST-CD XDZ-DATA-DIST-CD ; 
    10 ZZ-CS400-CHNG-DT ZZ-CS400-CHNG-DT ; 
    10 ZZ-CS400-CHNG-HHMM ZZ-CS400-CHNG-HHMM ; 
    10 ZZ-DS400-CHNG-DT ZZ-DS400-CHNG-DT ; 
    10 ZZ-DS400-CHNG-HHMM ZZ-DS400-CHNG-HHMM ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end OM0BW04

Record OM0BW05 type basicRecord
  5 OM0BWPA2 OM0BWPA2 ; 
    10 OM0BWTSK OM0BWTSK ; 
    10 OM0BWDTE OM0BWDTE ; 
end // end OM0BW05

// AVOREC DATE
DataItem OM0BW-AVOREC-DATE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AVOREC ERR DIAG AREA
DataItem OM0BW-AVOREC-ERRDIAG char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AVOREC OPTION
DataItem OM0BW-AVOREC-OPTION char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AVOREC RETURN STATUS
DataItem OM0BW-AVOREC-RTN-STAT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AVOREC STYLE
DataItem OM0BW-AVOREC-SY1STYNBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AVOREC COLOR
DataItem OM0BW-AVOREC-SY2CLRID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AVOREC DIM CODE
DataItem OM0BW-AVOREC-XDMCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AVOREC OWNER GROUP CODE
DataItem OM0BW-AVOREC-XOWCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Belk's Customer Flag
DataItem OM0BW-BELKS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// booking season error flag
DataItem OM0BW-BK-SESN-ERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// booking seasons required flag
DataItem OM0BW-BK-SESN-REQUIRED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// BLANK BULK ONLY FLAG
DataItem OM0BW-BLANK-BULK-ONLY-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold bulk's don't ship after
DataItem OM0BW-BULK-DONT-SHIP-AFTER-DATE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0BW-BULK-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold bulk's need date
DataItem OM0BW-BULK-NEED-DATE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cha field to hold op-bk-yy
DataItem OM0BW-CHA-BK-YY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of days past cutoff dt
DataItem OM0BW-DAYS-PAST-CUTOFF decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// default booking seasons flag
DataItem OM0BW-DEFAULT-BK-SESN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ERROR DIAG - COMPANY
DataItem OM0BW-EK1-COMPANY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ERROR DIAG - DEPT
DataItem OM0BW-EK1-DEPT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ERROR DIAG - FILLER
DataItem OM0BW-EK1-FILL-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ERROR DIAG - FILLER
DataItem OM0BW-EK1-FILL-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ERROR DIAG - FILLER
DataItem OM0BW-EK1-FILL-3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ERROR DIAG - GPC CODE
DataItem OM0BW-EK1-GPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ERROR DIAG KEY 1
DataItem OM0BW-EK1-KEY char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ERROR DIAG - STORE
DataItem OM0BW-EK1-STORE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ERROR DIAG - CUST ORD ID
DataItem OM0BW-EK2-CUST-ORD-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ERROR DIAG - FILLER
DataItem OM0BW-EK2-FILL-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ERROR DIAG - FILLER
DataItem OM0BW-EK2-FILL-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ERROR DIAG KEY 2
DataItem OM0BW-EK2-KEY char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ERROR DIAG - NIKE ORD ID
DataItem OM0BW-EK2-NIKE-ORD-ID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ERROR DIAG - PART CHAR
DataItem OM0BW-EK2-PART-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0BW-HOLD-EZETST-VAL num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// JC PENNEYS CUSTOMER FLAG
DataItem OM0BW-JC-PENNEYS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// move quantities to screen?
DataItem OM0BW-MOVE-QUANTITY-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display multi bk-sesn msg flag
DataItem OM0BW-MULTI-BK-SESN-MSG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// a new product has been added.
DataItem OM0BW-NEW-PROD-ADDED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first 2 bytes of 4 byte num
DataItem OM0BW-NUM-1-2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 4 byte numeric field
DataItem OM0BW-NUM-1-4 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last  2 bytes of 4 byte num
DataItem OM0BW-NUM-3-4 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data separator
DataItem OM0BW-OB1470-DASH-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data separator
DataItem OM0BW-OB1470-DASH-10 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data separator
DataItem OM0BW-OB1470-DASH-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data separator
DataItem OM0BW-OB1470-DASH-3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data separator
DataItem OM0BW-OB1470-DASH-4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data separator
DataItem OM0BW-OB1470-DASH-5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data separator
DataItem OM0BW-OB1470-DASH-6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data separator
DataItem OM0BW-OB1470-DASH-7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data separator
DataItem OM0BW-OB1470-DASH-8 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data separator
DataItem OM0BW-OB1470-DASH-9 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display keys sent to ob1470
DataItem OM0BW-OB1470-ERR-DESC char(54)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-cust-need-dt
DataItem OM0BW-OB1470-NEED-DT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-cust-ord-id
DataItem OM0BW-OB1470-OP1CUOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-nike-ord-id
DataItem OM0BW-OB1470-OP1NORID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-ord-part-char
DataItem OM0BW-OB1470-OP1PARTN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-line-item-nbr
DataItem OM0BW-OB1470-OP2LNINB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sy-sty-nbr
DataItem OM0BW-OB1470-SY1STNBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sy-colr-cd-id
DataItem OM0BW-OB1470-SY2CLRID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xdm-dim-cd
DataItem OM0BW-OB1470-XDMCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xdv-div-cd
DataItem OM0BW-OB1470-XDVCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xgp-gpc-cd
DataItem OM0BW-OB1470-XGPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-ord-typ-cd
DataItem OM0BW-OB1470-XOTCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order number for post
DataItem OM0BW-ORDER-NUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// owner group change flag
DataItem OM0BW-OWNER-GROUP-CHANGE-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// for add 1$ to price per unit
DataItem OM0BW-PRICING-FACTOR num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PROMO OWNER GROUP FLAG
DataItem OM0BW-PROMO-XOWCD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// for round b-grade price
DataItem OM0BW-SAVE-PRICE-1 decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// for round b-grade price
DataItem OM0BW-SAVE-PRICE-2 decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// literal
DataItem OM0BW-SAY-ORDER char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal
DataItem OM0BW-SAY-PERIOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal
DataItem OM0BW-SAY-SPGM char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JC PENNEYS CUSTOMER FLAG
DataItem OM0BW-SOCD-CHNG-NDT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales program of order
DataItem OM0BW-SPGM char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JC PENNEYS CUSTOMER FLAG
DataItem OM0BW-SPLIT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order sub number
DataItem OM0BW-SUB-ORDER num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSGCD SUBSCRIPT
DataItem OM0BW-SUB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error key for sales pgm
DataItem OM0BW-TABLE-KEY char(33)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0BW-WSY2000-COLR-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0BW-WSY2000-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found flag call to sy2000
DataItem OM0BW-WSY2000-FND-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0BW-WSY2000-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0BW-WSY2000-POST-1 char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0BW-WSY2000-PROD-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0BW-WSY2000-RETURN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0BW-WSY2000-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GOOD OWNER GROUP FOUND FLAG
DataItem OM0BW-XOWCD-FOUND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// om0b w/s
DataItem OM0BW01G char(917)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// override auth required flag
DataItem OM0BWARF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// audit flag
DataItem OM0BWAUT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// furthest out avail date
DataItem OM0BWAVD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// blank bulk flag
DataItem OM0BWBBF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// binary cond code hold
DataItem OM0BWBCD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bulk/draw type flag
DataItem OM0BWBDF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// yyyymm
DataItem OM0BWBYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dd
DataItem OM0BWCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// changed dir ship  (y/n)
DataItem OM0BWCDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// mmdd
DataItem OM0BWCDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0BWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// default price by style,color
DataItem OM0BWCLP decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mm
DataItem OM0BWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// changed needdate  (y/n)
DataItem OM0BWCND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cond code day
DataItem OM0BWCOD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cond code month
DataItem OM0BWCOM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cond code work area
DataItem OM0BWCON char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// qty changed field
DataItem OM0BWCQT decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// changed warehouse (y/n)
DataItem OM0BWCWH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// disp availability flag(y/n)
DataItem OM0BWDAV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save day
DataItem OM0BWDAY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag1
DataItem OM0BWDI1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// diag2
DataItem OM0BWDI2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// diag3
DataItem OM0BWDI3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// diag4
DataItem OM0BWDI4 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error diag
DataItem OM0BWDIG char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dup prd error flag
DataItem OM0BWDPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temporary hold ccyymmdd
DataItem OM0BWDT1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem OM0BWDT2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yymmdd
DataItem OM0BWDT3 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0BWDTE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// db2 dup.sub-ord,coord gr.erro
DataItem OM0BWDUP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// edit map (full/partial)
DataItem OM0BWEDT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// eligible customer flag
DataItem OM0BWELI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temporary hold yymmdd
DataItem OM0BWEZ1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// opfrec data
DataItem OM0BWFDA char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cond code delimiter
DataItem OM0BWFIL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found error or entry
DataItem OM0BWFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse
DataItem OM0BWHS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pack handle override field
DataItem OM0BWHTP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold year
DataItem OM0BWHYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// value * p/c percent
DataItem OM0BWIPC decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold minute
DataItem OM0BWMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// more sizes? (y/n)
DataItem OM0BWMOR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric cond code century
DataItem OM0BWNCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reformat cond code
DataItem OM0BWNCD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric cond code day
DataItem OM0BWNDA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// opfrec dd
DataItem OM0BWNDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// opfrec date
DataItem OM0BWNDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xgpcd
DataItem OM0BWNI1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xobcd
DataItem OM0BWNI2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zarcd
DataItem OM0BWNI3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// kuccoid
DataItem OM0BWNI4 num(12)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// zfccd
DataItem OM0BWNI5 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nimrec error diag key
DataItem OM0BWNIM char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// opfrec mm
DataItem OM0BWNMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric cond code month
DataItem OM0BWNMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// kuccoid
DataItem OM0BWNP1 num(12)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xgpcd
DataItem OM0BWNP2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sy1stnbr
DataItem OM0BWNP3 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sy2clrid
DataItem OM0BWNP4 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xdmcd
DataItem OM0BWNP5 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nparec error diag key
DataItem OM0BWNPA char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new sub-order flag (y/n)
DataItem OM0BWNSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// price adjust work field
DataItem OM0BWNSN num(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new xwhcd flag for nil pricing
DataItem OM0BWNWH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// yyyymm
DataItem OM0BWNYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric cond code year
DataItem OM0BWNYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// opfrec yy
DataItem OM0BWNYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order adjust req'd flag (y/n)
DataItem OM0BWOAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order adjust ovride flag (y/n)
DataItem OM0BWOAO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ord adj buy date
DataItem OM0BWOBD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ord adj need date
DataItem OM0BWOND num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// credit on-order value variance
DataItem OM0BWOVV decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// key to davail.vblnkp01
DataItem OM0BWP01 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prod d/l 20days past today)
DataItem OM0BWP20 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pf21 full size range (y/n)
DataItem OM0BWP21 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0BWPA2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// edt prc adj>ord/tp vary%(y/n)
DataItem OM0BWPAD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// edt prc4all>ord/tp vary%(y/n)
DataItem OM0BWPAL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// production add on flag(y/n)
DataItem OM0BWPAO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// price variance percent
DataItem OM0BWPCT decimal(5,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need date + 60 days
DataItem OM0BWPDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prod price effective date
DataItem OM0BWPED int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pf6 chg size price   (y/n)
DataItem OM0BWPF6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold price 1
DataItem OM0BWPR1 decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold price 2
DataItem OM0BWPR2 decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold 1st prd pric,chk vary fl
DataItem OM0BWPRC decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product number display area**
DataItem OM0BWPRD char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new price to chk prc variance
DataItem OM0BWPRN decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// old price to chk prc variance
DataItem OM0BWPRO decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// previous prod size scale code
DataItem OM0BWPSC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// edt siz prc>ord/tp vary%(y/n)
DataItem OM0BWPSZ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous unit of measure
DataItem OM0BWPUM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws quantity field
DataItem OM0BWQTY decimal(7,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// db2 bad-reject product (y/n)
DataItem OM0BWREJ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// restart product entry flag
DataItem OM0BWRST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// separator 01
DataItem OM0BWS01 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// separator 02
DataItem OM0BWS02 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   screen 2 start record(1-40)
DataItem OM0BWSB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subscript for map      (1-20)
DataItem OM0BWSBM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subscript for order typ(1-x)
DataItem OM0BWSBO smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0BWSBP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subscript for record   (1-40)
DataItem OM0BWSBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sub script for suborder
DataItem OM0BWSBS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// on screen 1 or 2 (1/2)
DataItem OM0BWSCR num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style error flag
DataItem OM0BWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first size for map display
DataItem OM0BWSMF smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last  size for map display
DataItem OM0BWSML smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//    '-'
DataItem OM0BWSP1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//    '-'
DataItem OM0BWSP2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// have sales pgm pricing (y/n)
DataItem OM0BWSPP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold second
DataItem OM0BWSS1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved sub-order number
DataItem OM0BWSSN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws size percent array
DataItem OM0BWSSP decimal(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// default price by style
DataItem OM0BWSTP decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subscript for handling code
DataItem OM0BWSU1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size counter
DataItem OM0BWSZC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product first size
DataItem OM0BWSZF smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product last size
DataItem OM0BWSZL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group item diagnostics
DataItem OM0BWT1 char(43)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hh
DataItem OM0BWTHF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hh
DataItem OM0BWTHL num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// diag field 1
DataItem OM0BWTK1 num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// diag field 2
DataItem OM0BWTK2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// diag field 3
DataItem OM0BWTK3 char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag field 4
DataItem OM0BWTK4 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag field 5
DataItem OM0BWTK5 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag field 6
DataItem OM0BWTK6 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag field 7
DataItem OM0BWTK7 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hh:mm:ss
DataItem OM0BWTM1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hhmmss
DataItem OM0BWTM2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hhmm
DataItem OM0BWTM3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mm
DataItem OM0BWTMF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// mm
DataItem OM0BWTML num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws total field
DataItem OM0BWTOT decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ss
DataItem OM0BWTSF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0BWTSK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ss
DataItem OM0BWTSL num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// variance field
DataItem OM0BWVAR decimal(7,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// valid size for product (y/n)
DataItem OM0BWVSZ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//    day
DataItem OM0BWWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted date:
DataItem OM0BWWDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold first 1 model whse
DataItem OM0BWWHS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   month
DataItem OM0BWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   year
DataItem OM0BWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// zero price flag
DataItem OM0BWZPR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

