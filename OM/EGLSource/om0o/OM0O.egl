package om0o;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ob.common.*;
import om.common.*;
import op.common.*;
import os.common.*;
import oz.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=OM0O ****
// nike order entry - product inquiry by order number
// 
// overview: this application gives product header and detail
//           information by order number for the nike order
//           entry system.  the user can remain in the inquiry
//           mode and view upto 200 records.
// 
// 
// 
// 
// 
// date created: 06/17/86
//       author: robert kennedy -- informatics
// 
// maintenance history:
// 
//     when       who   rev what
//   --------  ------------------------------------------------
// 06/17/86   rkennedy   original creation
// 11-14-86   bcourt  1  add owner group, pack handle type,
//                       maint type, take out shade,
//                       darken spec.
// 12-08-86   bcourt  2  add security check that user's sales
//                       office = order sales office before chg
//                       or cancel order.  also bring om0os00
//                       into om0os16.
// 08/11/87   tfox       switched backorder reason for order
//                       number. bo rsn on prd hdr.
// 09/14/87   jvande     support xsdcd - m001.
// 11/02/87   tfox       add new stmt grp s06 to read op1rec.
//                       refresh omwrec before dxfr to om0r in
//                       stmt grps s11 s17 s52 s57. added read
//                       of op1rec to om0o000.
// 02/02/87   craine     chg s06 to use xspf4 instead of xfer
// 02/29/88   gwells     diagnostoc bug - move op2key to
//                       display key  for ta1rec.ta1tblke.
//                       this will show exactly what order the
//                       appl. abended on - s02.
// 03/29/88   craine     added error msg 325 to s02, program
//                       abended when a line item was not found
//                       because it was moved to another subord
//                       between om0s and om0o.
// 06/14/88   scass      add a key when calling xowtbl
//                       om0os12 - om0ow1
// 08/23/88   gwells     rebook - added new edits for order
//                       maintenance reason code (xomcd) for
//                       rebooking - s17, s57.  new sgrp -
//                       validate agency/customer (s60).
// 10/22/88   tfox       chg code in s16 to prevent maintenance
//                       of rebook bulk.
// 10/26/88   gwells     rebook - add additional edit: cancel-
//                         lation date must be more than 45
//                         days from needdate - s17, s57. new
//                         sgrps - s18, s20, s58.
// 11/04/88   JWOOD      NONCSP OPT ADDED TO CALLS
// 12/05/88   gwells     add credit hold edit to rebook 45 day
//                       cancel window - s20.
// 01/09/89   dwalke     add segmented transaction id to appl.
// 05/10/89   jbecke     database changes:  om0om001, om0os05.
// 08/14/89   ssteph     added credit life code 30 to process
//                       s20.
// 10/25/89   rcoron     patched-in read only routine for
//                       night time inquiry. (om0om005,
//                       om0o001, om0o005, and osirec.
// 11/14/89   rcoron     database changes.  removed from list
//                       xbrtbl and xoatbl because they were
//                       not used.
// 04/04/90   skott      database changes.  s12 - call io3340
//                       s16,s18,s58 - replace op1blkcd with
//                       xbdcd.  added s40
// 04/10/90   skott      bug # 322  if spec code not found do
//                       not abend, display UNKN.  s40, w1
// 04/11/90   schase     bug #278 - add reenter flag when
//                       cancel an item.  changed s10,s17,s51,
//                       s57,005,maps.
// 05/01/90   oricha     add factory purchase order fields.
//                       m001,s07,s08,w1,010.
// 05/23/90   oricha     uncomment code so factory po can be
//                       used w/phase 4 production. s07.
// *********** N O T E ****************************************
//               New OM0O Version !!!!
// 09/24/90   schase     rewrite created.
// 10/19/90   schase     correct pf2/pf21 functioning as well
//                       as pf7/pf8 paging functioning. st2,s80
// 11/09/90   rdavis     data base changes. rename xsdcd to
//                       pc2inseg. s15,s17, om0om001.
// 11/12/90   dflesh     changed om0q to om0p for pf2 function
//                       in sst1.  added code to show value for
//                       omwlines (om0owsub - 1).
// 01/10/91   dflesh     maint. log #504
//                       code change in s15 to read service rep
//                       table only if maint rep id > 0.
//                       corrected database name for err diag
//                       in s18 from dorder to dcust.
// 01/11/91   schase     added check for whse '03' and '51' to
//                       display '00' for owner group code on
//                       map. s15.
// 02/08/91   dflesh     log #488.  created s2b to allow xl
//                       product to be reinstated to op status.
//                       changed map description of pf24 to
//                       read '24:xl/rein'.
// 02/12/91   tfox       regen for db chgs
// 04/10/91   CRAINE     FIX TO NOT ALLOW CANCELS OR ADDS TO
//                       REBOOK BULKS.
// 04/25/91   schen      log #585 - change om0os23 to turn off
//                       rebooking of apparel if reason code
//                       is 01.
// 05/21/91   dflesh     log #535 expand price field on map.
// 05/29/91   tfox       menu services st1,st2,s02,s2b,s30,s85
//                       010,030. check for prepacks
// 06/14/91   rdavis     data base changes:s15, om0m001,
//                       changed ylbcd to pwrlbcd.
// 08/06/91   dharri     log #669 - rebook cancellation 45 day
//                       window ck no longer called in s25 &
//                       s72.
// 08/28/91   JLoyer     Log #685 - prevent transfer to OM0Q
//                       for rebook bulks (PF21).  OM0Q was
//                       allowing updates to rebook bulks. ST2.
// 10/09/91   craine     db changes - added xgpcd to xhdtbl for
//                       key. s15, w01
// 12/02/91   jhecke     695 - Prepack of footwear. s02
// 12/22/92   jather     log 868 - transmitted airborne order
//                       cannot be updated or cancelled - s21,
//                       000,020,040
// 05/01/93   dlegg      log 937. NSG changes. Owner group init
//                       for whse 25. s15.
// 05/17/93   dlegg      log 937. NSG phase II. Transfer to
//                       AE09. st1, st2, s20, s70, 020, 040,
//                       s-xfr-ae09.
// 06/10/93   dcaust     #964 International Airborne.
//                       if order class is 'TR' disallow
//                       pf20, pf21. allow pf24, but chg order
//                       class from 'tr' to 'au'.
//                       s21, s2b, s30, s85; new om0os-updt-
//                       ord-hdr.
// 06/15/93   dcaust     #964 International Airborne.
//                       corrected message for cancellation &
//                       and reinstatement; display msg 807
//                       only when ord cls has been updt to AU.
//                       s2b, s21, s30, s85.
// 06/16/93   gcalki     #969 add booking season, year and
//                       month to the product header screen.
//                       s15, w01, m001.
// 09/01/93   gcalki     CSP 4.1 changes: sub om0r & om0n don't
//                       xfer to main on abends, instead they
//                       pass a return code which if not set to
//                       '00' means return control to main menu
//                       omerec, s30, s85, s2b
// 02/28/94   scantr     db changes: resize om0ow01
// 04/28/94   jather     log 1003. renamed causera to
//                       ca-user-workarea-4k to hold opwrec
//                       which has increased to 3072 bytes.
// 08/17/94   schase     Virtual Airspeed: added if > 0 check
//                       prior to formating the map add column
//                       field. s55, s57
// 05/04/95   craine     change om0os23 to turn on rebooking
//                       of apparel if reason code is 01
// 06/28/95   mmcgol     Canadian project-added currency to map
//                       (om0os15,om0os45)
// 02/01/96   dliddl     Added call to SY2000 to get regional
//                       product data for Canadian orders.
// 04/04/96   mvalbu     recompiled to pick up change made to
//                       the common statement group xpom100
//                       where nighttime inquiry mode was
//                       changed from 6 pm to 7 pm.
// 06/10/96   wleong     Added call to io mod vorcpx02 to get
//                       caselot nbr.
// 07/15/96   mvalbu     Changed to use regional data for US
//                       apparel. Changed OM0OS13, and OM0OS-
//                       SEL-SY2000.
// 10/28/96   CBRINE     Get caselot nbr from VORXRF01.
// 11/26/96   mvalbu     Change nighttime inquiry mode from
//                       7 pm to 6 pm until 4 am instead of
//                       3 am.
// 08/27/97   jnaemu     added whse 27
// 09/01/97   RFREY      OCD Changes - write ocd header and
//                       size change reasons(vsohcr01 and
//                       vocitm01)
// 10/06/97   dsmit0     rearranged the pf key display on m005
//                       per the users request
// 01/27/98   jflor1     Modified update/inquiry time
//                       module XPOM100.
// 02/11/98   klee       added test in s13 for intl division
//                       users to bypass region edit.
// 04/13/98   wleong     changed prepack reminder message.
// 
// 07/30/98   UDAFON     Got off msg 971 in OM0OS12. Task#178
//                       Increased size of OMWREC to 3505 bytes
// 10/16/98   UDAFON     BL2084. Cleared ADDS field in M005 map
// 10/20/98   svargh     changed om0os-updte-hdr to update the
//                       bulk quantities in the vbulks02 table
//                       when they are updated in the header
//                       table.
// 04/03/00   rharat     As part of Spain project - Modified
//            gsunda     OM0os20 & OM0Os70 - adde logic to rein
//                       only Spain compliant produts if order
//                       is being shipped to Spain or Canary.
//                       Added - OM0OS-OP6410-PSRTN &
//                               OM0OS-spain-check.
// 06/01/00   agooll     Added logic in OM0OS55 to display the
//                       third page to view sizes.
//                       Search for TT#6390.
// 07/26/00   agooll     Added logic in OM0OS75, OM0OS70,
//                       OM0OS21to display the adds total
//                       when pf8/pf7/PF2/PF10 key pressed
//                       Search for TT#7194.
// ************************************************************
// *********************
Program OM0O type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUYREC KUYREC; // record
  OBFREC OBFREC; // record
  OM0OW01 OM0OW01; // record
  OMEREC OMEREC; // record
  OMWREC OMWREC; // record
  OP10REC OP10REC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  OP3REC OP3REC; // record
  OP8REC OP8REC; // record
  OPABREC OPABREC; // record
  OPBREC OPBREC; // record
  OSIREC OSIREC; // record
  OSLREC OSLREC; // record
  OSNREC OSNREC; // record
  PC2REC PC2REC; // record
  SM1REC SM1REC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  VBULKS02 VBULKS02; // record
  VOPPGM01 VOPPGM01; // record
  VORXRF01 VORXRF01; // record
  WOZ2090 WOZ2090; // record
  WSY2000 WSY2000; // record
  XP0QW00 XP0QW00; // record
  XS0MW01 XS0MW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDNTBL {deleteAfterUse = yes}; // table
  use XDSTBL {deleteAfterUse = yes}; // table
  use XHDTBL {deleteAfterUse = yes}; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use XOMTBL {deleteAfterUse = yes}; // table
  use XOSTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPATBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XRSTBL {deleteAfterUse = yes}; // table
  use XSATBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use XBDTBL; // table
  use OM0OM.OM0OM001,  // forms
      OM0OM.OM0OM005, 
      OM0OM.XP0QM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OM0O000: OM0O000();


    if (OMWREC.OMWOPTN == 5) /* header/detail loop selected*/
      goto OM0O010; /* to build the product header inq*/
    else
      goto OM0O030; /* to build the product detail inq*/
    end


    OM0O010: OM0O010();


    goto OM0O020; /* to converse the product header inq*/


    OM0O020: OM0O020();


    if (OM0OW01.OM0OWERR == "Y") /* error exists*/
      goto OM0O020; /* reconverse map*/
    end


    if (converseVar.eventKey is pf24)
       /* next sentence*/
    else
      goto OM0O030; /* flow to product detail*/
      OM0OW01.OM0OWSUB = OM0OW01.OM0OWSUB + 1; /* increment omwrec counter*/
    end

    goto OM0O010; /* flow back to execute (build map) for om0om001*/


    OM0O030: OM0O030();


    goto OM0O040; /* flow to converse product detail inq*/


    OM0O040: OM0O040();


    if (OM0OW01.OM0OWERR == "Y") /* error exists*/
      goto OM0O040; /* reconverse map*/
    end


    if (converseVar.eventKey is pf5  /* prod hdr*/
     || converseVar.eventKey is pf7  /* page backward*/
     || converseVar.eventKey is pf8  /* page forward*/
     || converseVar.eventKey is pf24 /* cancel product*/
     || OM0OW01.OM0OWERR == "Y"      /* error exists*/
     || OM0OM005.OM0OMF1P != OM0OW01.OM0OWF1P) /* page number changed*/
       /* next sentence*/
    else
      OM0OW01.OM0OWSUB = OM0OW01.OM0OWSUB + 1; /* increment for next omwrec*/
    end


    if (converseVar.eventKey is pf5) /* converse product header inquiry*/
      goto OM0O010; /* return to build om0om001*/
    end


    if (converseVar.eventKey is enter
     && OMWREC.OMWOPTN == 5) /* header/detail loop selected*/
      goto OM0O010; /* return to build om0om001 map*/
    else
      if (converseVar.eventKey is enter
       && OMWREC.OMWOPTN == 2) /* header/detail loop selected*/
        goto OM0O010; /* return to build om0om001 map*/
      else
        goto OM0O030; /* return to build om0om005 map*/
      end
    end


  end // end main
end // end OM0O

// program init/init defaults
Function OM0O000()


  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value


  XSENTRY();

     /* SET SEGMENTED TRANS ID*/

  COMMAREA.CAEZSAP = sysVar.transactionID;
  COMMAREA.CAEZSG12 = "OM";
  COMMAREA.CAEZSG4 = "O";
  sysVar.transactionID = COMMAREA.CAEZSAP;


  XSOMS01(); /* order entry security*/


  OM0OS01(); /* initialize application*/

     /* ***************************************/
     /* is this a transmitted airborne order*/
     /* ****************************************/

  XS0MW01.XS0MWDIV = OP1REC.XDVCD; /* build a pass record*/
  XS0MW01.XS0MWORT = OP1REC.XOTCD;
  XS0MW01.XS0MWDIR = OP1REC.XDSCD;
  XS0MW01.XS0MWCUS = OP1REC.KUCCOID;
  XS0MW01.XS0MWGPC = OP1REC.XGPCD;
  XS0MW01.XS0MWNDT = OP1REC.OP1CUNDT;

  VOPPGM01.XXX-PGM-NBR = "OP1920"; /* last date transmitted*/
  call "IO6600" ("S ", SQLCA, VOPPGM01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
   /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VOPPGM01";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "IO6600";
    TA1REC.TA1LOCAT[3] = "OM0O000";
    TA1REC.TA1LOCAT[4] = "       ";
    TA1REC.TA1TBLKE = "OP1920";
    XSOPS02();
  end

  XS0MS-CHK-AIRBORNE();


   /* See if this is a bulk order (used*/
   /* in custom logo processing)*/

  OM0OW01.OM0OW-BULK-FL = "N";
  if (OP1REC.XBDCD in XBDTBL.XBDCD
   && XBDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    if (XBDTBL.XBDBKOFL[sysVar.arrayIndex] == "Y")
      OM0OW01.OM0OW-BULK-FL = "Y";
    end
  end


end // end OM0O000

// EXECUTE FOR PROD HEADER INQ
Function OM0O010()


  if (OMWREC.OMWSELCD[1] == " ") /* no selections*/
    OM0OS05(); /* select all products and load omwrec*/
  end

  COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;

  while (OM0OW01.OM0OWSUB <= 900) /* while less than or equal to max*/
    if (OMWREC.OP2LNINB[OM0OWSUB] > 0) /* if omwrec line item exists*/
      OM0OS10(); /* build om0om001 map*/
      exit stack;
    else
      if (OMWREC.OMWPKCHF == "Y") /* pack change flag*/
        OM0OS02(); /* check for prepack*/
        if (OM0OW01.OM0OWERR == "Y")
          return;
        end
        if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
          COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
          COMMAREA.CAMSG = "ORDER MAINTAINED - VERIFY PREPACKS";
          COMMAREA.CACURRAP = "OS0G";
          transfer to program "OS0G" passing COMMAREA;
        else
          COMMAREA.CACURRAP = "OM0M"; /* return to om0m*/
          transfer to program "OM0M" passing COMMAREA;
        end
      else
        COMMAREA.CACURRAP = "OM0M"; /* return to om0m*/
        transfer to program "OM0M" passing COMMAREA;
      end
      COMMAREA.CACURRAP = "OM0M"; /* return to om0m*/
      transfer to program "OM0M" passing COMMAREA;
    end
  end


end // end OM0O010

// CONVERSE OM0OM001 MAP
Function OM0O020()


  XPOM100(); /* check night time security*/


  if (XS0MW01.XS0MWABF == "Y") /* transmitted airborne order*/
    OM0OM001.OM0OMP02 = " "; /* darken update/cancel pfkeys*/
    OM0OM001.OM0OMP20 = " ";
    OM0OM001.OM0OMP24 = " ";
  else
    if (OSIREC.OSIMODE == "I")
      OM0OM001.OM0OMP02 = " "; /* change mode*/
      OM0OM001.OM0OMP24 = " "; /* cancel/reinstate mode*/
      OM0OM001.OM0OMP20 = "20:ADD PRD"; /* add product*/
    else
      OM0OM001.OM0OMP02 = "2:CHNG"; /* change mode*/
      OM0OM001.OM0OMP24 = "24:XL/REIN"; /* cancel/reinstate mode*/
      OM0OM001.OM0OMP20 = "20:ADD PRD"; /* add product*/
    end
  end

  if (SYCREC.XPRCD == "22" /* Custom logo product*/
   && OM0OW01.OM0OW-BULK-FL == "N") /* and not a bulk order*/
    OM0OM001.OM0OM-PF22-M1 = "22:CUST LOGO"; /* Cust logo cresting*/
  else /* instructions*/
    OM0OM001.OM0OM-PF22-M1 = " ";
  end

  OMWREC.OMWSELCD[OM0OWSUB] = "V";
                                   /* identify select code is viewed*/


  converse OM0OM001 ;


  OM0OW01.OM0OWERR = "N"; /* set error flag off*/
  OM0OM001.VAGen_EZEMSG = " "; /* clear map message*/

  OM0OS20(); /* edit map/pfkeys*/


  OM0OST1(); /* determine flow*/


end // end OM0O020

// EXECUTE FOR PROD DETAIL INQ
Function OM0O030()


  /* IF OMWREC.OMWSELCD(1) EQ ' ';  /* no selections  - udafon*/
  /* OM0OS05;                     /* select all products and load omwrec*/
  /* END;*/


  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    exit stack;
  end

  COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;


  while (OM0OW01.OM0OWSUB <= 900) /* while less than or equal to max*/
    if (OMWREC.OP2LNINB[OM0OWSUB] > 0 /* if omwrec line item exists*/
     && OPBREC.OPBSZRC == 0)          /* more styles on DB1000- udafon*/
      OM0OS40(); /* build om0om001 map*/
      exit stack;
    else
      if (OMWREC.OMWPKCHF == "Y") /* pack change flag*/
        OM0OS02(); /* check for prepack*/
        if (OM0OW01.OM0OWERR == "Y")
          return;
        end
        if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
          COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
          COMMAREA.CAMSG = "ORDER MAINTAINED - VERIFY PREPACKS";
          COMMAREA.CACURRAP = "OS0G";
          transfer to program "OS0G" passing COMMAREA;
        else
          COMMAREA.CACURRAP = "OM0M"; /* return to om0m*/
          transfer to program "OM0M" passing COMMAREA;
        end
        COMMAREA.CACURRAP = "OM0M"; /* return to om0m*/
        transfer to program "OM0M" passing COMMAREA;
      end
      COMMAREA.CACURRAP = "OM0M"; /* return to om0m*/
      transfer to program "OM0M" passing COMMAREA;
    end
  end

  if (OM0OW01.OM0OWSUB > 900) /* reached 900 selected product limit*/
    converseLib.validationFailed(601); /* selected product exceeds 900 limit*/
    OM0OW01.OM0OWERR = "Y"; /* set error flag*/
  end


end // end OM0O030

// CONVERSE OM0OM005 MAP
Function OM0O040()


  if (converseVar.eventKey is pf24 /* cancel/reinstate product*/
   || OM0OW01.OM0OW-OCDCMT-FL == "Y") /* returning from ocd pop-up window*/
     /* do not reset fields*/
  else
    OM0OM005.OM0OMX0M = " "; /* clear cancel reason code literal*/
    OM0OM005.XOMCD = " "; /* and reenter flag question plus*/
    OM0OM005.OM0OMREL = " "; /* related fields off of map.*/
    OM0OM005.OM0OMREF = " ";
    set OM0OM005.XOMCD skip, invisible;
    set OM0OM005.OM0OMREF skip, invisible;
    set OM0OM005.OM0OMF1P cursor;
  end


  XPOM100(); /* check night time security*/


  if (XS0MW01.XS0MWABF == "Y") /* transmitted Airborne order*/
    OM0OM005.OM0OMP02 = " "; /* cannot be updated or cancelled*/
    OM0OM005.OM0OMP20 = " ";
    OM0OM005.OM0OMP21 = " ";
    OM0OM005.OM0OMP24 = " ";
  else
    if (OSIREC.OSIMODE == "I") /* read only mode*/
      OM0OM005.OM0OMP02 = " ";
      OM0OM005.OM0OMP24 = " ";
      OM0OM005.OM0OMP20 = "20:ADD PRD";
      OM0OM005.OM0OMP21 = "21:ADD SIZ";
    else /* updates allowed*/
      OM0OM005.OM0OMP02 = "2:CHANGE";
      OM0OM005.OM0OMP24 = "24:XL/REIN";
      OM0OM005.OM0OMP20 = "20:ADD PRD";
      OM0OM005.OM0OMP21 = "21:ADD SIZ";
    end
  end

  if (SYCREC.XPRCD == "22" /* Custom logo product*/
   && OM0OW01.OM0OW-BULK-FL == "N") /* and not a bulk order*/
    OM0OM005.OM0OM-PF22-M5 = "22:LOGO"; /* Cresting instructions*/
  else
    OM0OM005.OM0OM-PF22-M5 = " ";
  end

  OMWREC.OMWSELCD[OM0OWSUB] = "V"; /* identify select code viewed*/


  converse OM0OM005 ;


  OM0OW01.OM0OWERR = "N"; /* set error flag off*/
  OM0OM005.VAGen_EZEMSG = " "; /* clear message field*/
  OM0OW01.OM0OW-OCDCMT-FL = " "; /* clear pop-up window flag*/
  OM0OM005.OM0OMTAD = 0; /* clear ADD     field*/

  OM0OS65(); /* reset field attributes*/


  OM0OS70(); /* edit map/pfkeys*/


  if (OM0OW01.OM0OWERR == "N") /* no errors*/
    OM0OS80(); /* execute updates*/
  end


  OM0OST2(); /* determine flow*/


end // end OM0O040

// CHECK FOR ORDER TO UPDATE BULK
Function OM0OS-CHECK-UPDATE()
   /* tcs include begin*/
  set VBULKS02 empty;
  set OBFREC empty;
  set SQLCA empty;
  VBULKS02.OP1PARTN = OP1REC.OP1PARTN;
  VBULKS02.OP1CUOID = OP1REC.OP1CUOID;
  VBULKS02.OP1NORID = OP1REC.OP1NORID;

  OBFREC.OBFTASK = "S ";
  call "VBULKS02" (OBFREC, SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    OM0OS-UPDTE-VBULK(); /* if there are records update*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)

    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VBULKS02"; /* table view*/
      TA1REC.TA1LOCAT[2] = "OM0OS-CHECK-UPDATE"; /* stmt group*/
      TA1REC.TA1LOCAT[3] = "VBULKS02";
      TA1REC.TA1LOCAT[4] = "U     ";
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
    /* tcs include end*/
  end
end // end OM0OS-CHECK-UPDATE

// get case lot number
Function OM0OS-GET-CASE-LOT()

   /* build record to pass to get caselot info*/


  set VORXRF01 empty;


  VORXRF01.OP1PARTN = OP1REC.OP1PARTN;
  VORXRF01.OP1CUOID = OP1REC.OP1CUOID;
  VORXRF01.OP1NORID = OP1REC.OP1NORID;
  VORXRF01.OP2LNINB = OP3REC.OP2LNINB;
  VORXRF01.SY5SZID = 0;


   /* call io mod to retrieve caselot nbr*/


  call "VORXRF01" ("S ", SQLCA, VORXRF01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OM0OM001.OP-CASE-LOT-NBR = VORXRF01.OP-CASE-LOT-NBR;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
   /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0O    ";
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VORCPX02";
      TA1REC.TA1LOCAT[1] = "S       "; /**/
      TA1REC.TA1LOCAT[2] = "OM0OS-GE"; /* statement group*/
      TA1REC.TA1LOCAT[3] = "T-CASE-L"; /* i/o mod name*/
      TA1REC.TA1LOCAT[4] = "OT      "; /* i/o mod name*/
      TA1REC.TA1MAP = "OM0OM001"; /* ;/* map name*/
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end

end // end OM0OS-GET-CASE-LOT

// update ocd size item
Function OM0OS-M1-OZ2090()

      /* use OZ2090 to update the VOCSIZ01 record*/
      /* call oz2090 for each line item selected on the screen*/

  set WOZ2090 empty;
  WOZ2090.OZ2090-OP-ORD-PART-CHAR = OP1REC.OP1PARTN;
  WOZ2090.OZ2090-OP-CUST-ORD-ID = OP1REC.OP1CUOID;
  WOZ2090.OZ2090-OP-NIKE-ORD-ID = OP1REC.OP1NORID;
  WOZ2090.OZ2090-OP-LINE-ITEM-NBR = OP3REC.OP2LNINB;
  WOZ2090.OZ2090-XOM-ORD-MNTN-CD = OM0OM001.XOMCD1;
  WOZ2090.OZ2090-SOCD-APPL-SRC-CD = "OP";
  WOZ2090.OZ2090-SOCD-GLBL-MNTN-FL = "N";
  WOZ2090.OZ2090-SOCD-SZ-RSN-TXT = XP0QW00.XP0QW-RSN-TEXT;
  WOZ2090.OZ2090-XXX-USER-ID = COMMAREA.CAUSERID;
  call "OZ2090" (WOZ2090) {isNoRefresh = yes, isExternal = yes};

  if (WOZ2090.OZ2090-RETURN-CD == "00") /* good return*/
        /* ok - next sentence*/
  else
    converseLib.validationFailed(942);
  end

end // end OM0OS-M1-OZ2090

// update ocd size item
Function OM0OS-M5-OZ2090()

      /* use OZ2090 to update the VOCSIZ01 record*/
      /* call oz2090 for each line item selected on the screen*/

  set WOZ2090 empty;
  WOZ2090.OZ2090-OP-ORD-PART-CHAR = OP1REC.OP1PARTN;
  WOZ2090.OZ2090-OP-CUST-ORD-ID = OP1REC.OP1CUOID;
  WOZ2090.OZ2090-OP-NIKE-ORD-ID = OP1REC.OP1NORID;
  WOZ2090.OZ2090-OP-LINE-ITEM-NBR = OP3REC.OP2LNINB;
  WOZ2090.OZ2090-XOM-ORD-MNTN-CD = OM0OM005.XOMCD;
  WOZ2090.OZ2090-SOCD-APPL-SRC-CD = "OP";
  WOZ2090.OZ2090-SOCD-GLBL-MNTN-FL = "N";
  WOZ2090.OZ2090-SOCD-SZ-RSN-TXT = XP0QW00.XP0QW-RSN-TEXT;
  WOZ2090.OZ2090-XXX-USER-ID = COMMAREA.CAUSERID;
  call "OZ2090" (WOZ2090) {isNoRefresh = yes, isExternal = yes};

  if (WOZ2090.OZ2090-RETURN-CD == "00") /* good return*/
        /* ok - next sentence*/
  else
    converseLib.validationFailed(942);
  end

end // end OM0OS-M5-OZ2090

// EDIT FOR CANCEL
Function OM0OS-MAP1-XOMCD()


    /* REQUIRE CHANGE REASON FOR REINSTATE*/

    /* EDIT CANCEL REASON/REENTER FLAG*/
     /* NOTE: THE XOMCD1 WILL ALWAYS BE BLANK THE FIRST TIME*/
           /* PASS.  USE THE FOLLOWING TO FORMAT MAP*/

  if (OM0OM001.XOMCD1 == " ")
    converseLib.validationFailed(944); /* enter xomcd msg*/
    OM0OM001.OM0OMX0M = "CHG REASON:";
    set OM0OM001.XOMCD1 cursor, normal;
    OM0OW01.OM0OWERR = "Y"; /* set error to reconverse*/
    return;
  end


    /* VALIDATE THE XOMCD*/

  OM0OS-REIN-RSN-M1(); /* validate reinstate reason map01*/


end // end OM0OS-MAP1-XOMCD

// EDIT FOR CANCEL
Function OM0OS-MAP5-XOMCD()


    /* REQUIRE A CHANGE REASON TO REINSTATE ORDER*/



  if (OM0OM005.XOMCD == " ")
    converseLib.validationFailed(944); /* enter xomcd msg*/
    OM0OM005.OM0OMX0M = "CHG REASON:";
    set OM0OM005.XOMCD cursor, normal;
    OM0OW01.OM0OWERR = "Y"; /* set error to reconverse*/
    return;
  end

    /* VALIDATE THE XOMCD*/

  OM0OS-REIN-RSN-M5(); /* validate reinstate reason map05*/



end // end OM0OS-MAP5-XOMCD

// OCD COMMENT WINDOW
Function OM0OS-OCD-CMT1()
   /* THIS STMT GROUP DISPLAYS A POP-UP WINDOW*/
   /* FOR THE USER TO ENTER THE OCD COMMENT*/

  XP0QW00.XP0QW-XOMCD = OM0OM001.XOMCD1;

  XP0Q001(); /* pop-up window initialize*/

  converseLib.clearScreen();
   /* restore the original map*/

  if (OP3REC.OP2LNIST == "XL")
    converseLib.validationFailed(939);
    OM0OM001.OM0OMX0M = "CHANGE RSN:";
    set OM0OM001.XOMCD1 cursor, normal;
  else
    converseLib.validationFailed(400);
    OM0OM001.OM0OMX0M = "CANCEL RSN:";
    set OM0OM001.XOMCD1 cursor, normal;
    OM0OM001.OM0OMREL = "WILL ITEM BE REENTERED?:";
    set OM0OM001.OM0OMREF normal;
  end
  OM0OWERR = "Y";

  exit stack; /* display map*/


end // end OM0OS-OCD-CMT1

// OCD COMMENT WINDOW
Function OM0OS-OCD-CMT5()
   /* THIS STMT GROUP DISPLAYS A POP-UP WINDOW*/
   /* FOR THE USER TO ENTER THE OCD COMMENT*/

  XP0QW00.XP0QW-XOMCD = OM0OM005.XOMCD;

  XP0Q001(); /* pop-up window initialize*/

  converseLib.clearScreen();
   /* restore the original map*/

  if (OP3REC.OP2LNIST == "XL")
    converseLib.validationFailed(939);
    OM0OM005.OM0OMX0M = "CHANGE RSN:";
    set OM0OM005.XOMCD cursor, normal;
  else
    converseLib.validationFailed(400);
    OM0OM005.OM0OMX0M = "CANCEL RSN:";
    set OM0OM005.XOMCD cursor, normal;
    OM0OM005.OM0OMREL = "WILL ITEM BE REENTERED?:";
    set OM0OM001.OM0OMREF normal;
  end
  OM0OW01.OM0OWERR = "Y";
  OM0OW01.OM0OW-OCDCMT-FL = "Y";

  exit stack; /* display map*/


end // end OM0OS-OCD-CMT5

// VALIDATE CANCEL REASON CODE
Function OM0OS-REIN-RSN-M1()


  if (OM0OM001.XOMCD1 in XOMTBL.XOMCD /* valid maint reason*/
   && XOMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
    if (XOMTBL.XOMCANCF[sysVar.arrayIndex] == "A" /* add*/
     || XOMTBL.XOMCANCF[sysVar.arrayIndex] == "B") /* both - incr/decr*/
        /* next sentence*/
    else
      converseLib.validationFailed(943); /* invalid reinstate reason*/
      OM0OW01.OM0OWERR = "Y"; /* set error flag*/
      set OM0OM001.XOMCD1 cursor, modified, bold;
    end
  else
    converseLib.validationFailed(395); /* invalid cancel reason*/
    set OM0OM001.XOMCD1 cursor, modified, bold;
    OM0OW01.OM0OWERR = "Y"; /* set error flag*/
    return;
  end


end // end OM0OS-REIN-RSN-M1

// VALIDATE CANCEL REASON CODE
Function OM0OS-REIN-RSN-M5()


  if (OM0OM005.XOMCD in XOMTBL.XOMCD /* valid maint reason*/
   && XOMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
    if (XOMTBL.XOMCANCF[sysVar.arrayIndex] == "A" /* add*/
     || XOMTBL.XOMCANCF[sysVar.arrayIndex] == "B") /* both - incr/decr*/
        /* next sentence*/
    else
      converseLib.validationFailed(943); /* invalid reinstate reason*/
      OM0OW01.OM0OWERR = "Y"; /* set error flag*/
      set OM0OM005.XOMCD cursor, modified, bold;
    end
  else
    converseLib.validationFailed(395); /* invalid cancel reason*/
    set OM0OM005.XOMCD cursor, modified, bold;
    OM0OW01.OM0OWERR = "Y"; /* set error flag*/
    return;
  end


end // end OM0OS-REIN-RSN-M5

// select dprod.vsyreg01
Function OM0OS-SEL-SY2000()

   /* CANADA 02/01/96*/

     /* get the product/region record*/

  set SQLCA empty;
  WSY2000.XGP-GPC-CD = SYCREC.XGPCD;
  WSY2000.SY-STY-NBR = SYCREC.SY1STNBR;
  WSY2000.SY-COLR-CD-ID = SYCREC.SY2CLRID;
  WSY2000.XDM-DIM-CD = SYCREC.XDMCD;
  WSY2000.WSY2000-OPTION-CODE = "S ";
  WSY2000.WSY2000-SUB-OPTION-CODE = "O";

  call "SY2000" (WSY2000) {isNoRefresh = yes, isExternal = yes};

   /* PRODUCT/REGION RECORD IS FOUND*/
   /* OVERLAY THOSE FIELDS COMMON TO BOTH RECORDS*/

  if (WSY2000.WSY2000-RETURN-CODE == 0)
    SYCREC.XGPCD = WSY2000.XGP-GPC-CD;
    SYCREC.SY1STNBR = WSY2000.SY-STY-NBR;
    SYCREC.SY2CLRID = WSY2000.SY-COLR-CD-ID;
    SYCREC.XDMCD = WSY2000.XDM-DIM-CD;
    SYCREC.PG1SC4CD = WSY2000.PG-SCHED-SPCLT-CD;
    SYCREC.PG1FCTCD = WSY2000.PG-FCST-CD;
    SYCREC.XSECD = WSY2000.XSE-SESN-CD;
    SYCREC.XSNYR = WSY2000.XSN-SESN-YR-RNG;
    SYCREC.SY2POFBD = WSY2000.SY-PROP-OFFER-BDT;
    SYCREC.SY2POFXD = WSY2000.SY-PROP-OFFER-XDT;
    SYCREC.SY2FOFBD = WSY2000.SY-FUTR-OFFER-BDT;
    SYCREC.SY2FOFXD = WSY2000.SY-FUTR-OFFER-XDT;
    SYCREC.XLCCD1 = WSY2000.XLC-LIFE-CYC-CD[1];
    SYCREC.XLCCD2 = WSY2000.XLC-LIFE-CYC-CD[2];
    SYCREC.XLCCD3 = WSY2000.XLC-LIFE-CYC-CD[3];
    SYCREC.XLCCD4 = WSY2000.XLC-LIFE-CYC-CD[4];
    SYCREC.SY2CEDT1 = WSY2000.SY-LIFE-CYC-EDT[1];
    SYCREC.SY2CEDT2 = WSY2000.SY-LIFE-CYC-EDT[2];
    SYCREC.SY2CEDT3 = WSY2000.SY-LIFE-CYC-EDT[3];
    SYCREC.SY2CEDT4 = WSY2000.SY-LIFE-CYC-EDT[4];
    SYCREC.XPRCD = WSY2000.XPR-PROD-TYP-CD;
    SYCREC.XPLCD = WSY2000.XPL-PROD-LN-CD;
    SYCREC.XPCCD = WSY2000.XPC-PROD-CAT-CD;
    SYCREC.SY2FDSMO = WSY2000.SY-FRST-DOM-SLS-MO;
    SYCREC.SY2PDCMO = WSY2000.SY-PROJ-DOM-CLS-MO;
    SYCREC.SY2SSCIN = WSY2000.SY-SFTY-STKCLS-IND;
    SYCREC.OPZHMIND = WSY2000.OP-HMDL-HOT-FL;
    SYCREC.SY2ALNOR = WSY2000.SY-ALW-NEW-ORD-FL;
    SYCREC.XWHCD[1] = WSY2000.XWH-WHSE-CD[1];
    SYCREC.XWHCD[2] = WSY2000.XWH-WHSE-CD[2];
    SYCREC.XWHCD[3] = WSY2000.XWH-WHSE-CD[3];
    SYCREC.XWHCD[4] = WSY2000.XWH-WHSE-CD[4];
    SYCREC.XWHCD[5] = WSY2000.XWH-WHSE-CD[5];
    SYCREC.XWHCD[6] = WSY2000.XWH-WHSE-CD[6];
    SYCREC.SY2RPRDI = WSY2000.SY-RSTR-XSO-IND;
    SYCREC.SY2BOSWI = WSY2000.SY-BO-SW;
    SYCREC.SY2BOEDT = WSY2000.SY-BO-SW-EDT;
  else
    if (WSY2000.WSY2000-RETURN-CODE == 98) /* data base is busy*/
    /* next sentence*/
    else
      if (WSY2000.WSY2000-RETURN-CODE == 02) /* style/color not found*/
    /* next sentence*/
      else /* bad return code*/
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "OM0O";
        TA1REC.TA1LOC = "OM0OS-SEL-SY2000";
        OM0OW01.OM0OW-WSY2000-GPC-CD = SYCREC.XGPCD;
        OM0OW01.OM0OW-WSY2000-STY-NBR = SYCREC.SY1STNBR;
        OM0OW01.OM0OW-WSY2000-COLR-CD = SYCREC.SY2CLRID;
        OM0OW01.OM0OW-WSY2000-DIM-CD = SYCREC.XDMCD;
        OM0OW01.OM0OW-WSY2000-PROD-REG-CD = WSY2000.XDR-PROD-REG-CD;
        OM0OW01.OM0OW-WSY2000-RETURN-CD = WSY2000.WSY2000-RETURN-CODE;
        TAEREC.TAEDESC1 = OM0OW-WSY2000-POST-1;
        TAEREC.TAEDESC2 = "RETURN FROM CALL TO SY2000 - BAD RETURN CODE";
        TA1REC.TA1DBASE = "DPROD";
        TA1REC.TA1TBLVU = "SYREG02";
        TA1REC.TA1MAP = "OM0OM001";
        try
          call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
        end
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error - clear ws*/
      end
    end
  end
end // end OM0OS-SEL-SY2000

// check for spain compliance
Function OM0OS-SPAIN-CHECK()

   /* ***************************************************************/
   /* check if order is being shipped to Spain or Canary Islands   */
   /* and the user is tring to reinstate a Spain non-complaint item*/
   /* ***************************************************************/
   /* If the Return-code is 02 then the product can't be reinstated*/
   /* the error message 1006 should be displayed.                  */
   /* ***************************************************************/

  OP10REC.OP10-PASSING-APPL = "OM0O"; /* Calling application*/
  OP10REC.OP1CUOID = OP1REC.OP1CUOID; /* Customer ord-id*/
  OP10REC.OP1NORID = OP1REC.OP1NORID; /* nike-ord-id*/
  OP10REC.KUCCOID = OP1REC.KUCCOID; /* customer*/
  OP10REC.KUMSTRID = OP1REC.KUMSTRID; /* store*/
  OP10REC.OP11TMSF = OP1REC.OP11TMSF; /* onetime ship flg*/
  OP10REC.OP1SGPAO = OP1REC.OP1SGPAO; /* shipgrp ovrd ind*/
  OP10REC.OP1SHAID = OP1REC.OP1SHAID; /* shipgrp addr id*/
  OP10REC.SY1STNBR = OP3REC.SY1STNBR; /* style*/
  OP10REC.XGPCD = OP1REC.XGPCD; /* gpc*/
  OP10REC.OP10-RETURN-CODE = "99"; /* intialise the return-code*/
  call "OP6410" (OP10REC) {isNoRefresh = yes, isExternal = yes}; /* call Spain compliance routine*/

  /* check for return code from Nike both */
  if (OP10REC.OP10-RETURN-CODE == "00" /* product is Spain/Cnry compliant*/
   || OP10REC.OP10-RETURN-CODE == "01") /* Countr-code is not SPAI/CNRY*/
    /* next sentence*/
  else
    if (OP10REC.OP10-RETURN-CODE == "02")
                                  /* order has  Spain/Cnry non-compliant*/
      OM0OW01.OM0OWERR = "Y";
      converseLib.validationFailed(1006); /* cannot reinstate*/
      return;
    else
      if (OP10REC.OP10-RETURN-CODE == "03") /* database busy */
        OM0OW01.OM0OWERR = "Y"; /* error flag*/
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
        TA1REC.TA1LOC = "OM0OS-SPAIN-CHECK "; /* location*/
        converseLib.validationFailed(010); /* database busy*/
        XSOMS-OP6410-PSRTN(); /* Error post routine*/
        return;
      else
        OM0OW01.OM0OWERR = "Y"; /* error flag*/
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
        TA1REC.TA1LOC = "OM0OS-SPAIN-CHECK"; /* location*/
        XSOMS-OP6410-ERRTN(); /* return to OM0M app*/
      end
    end
  end
end // end OM0OS-SPAIN-CHECK

// update order header
Function OM0OS-UPDT-ORD-HDR()
   /* This routine updates the order header.*/


  call "IO0430" ("U ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good return*/
     /* Tcs include begin 08/25/98*/
    OM0OS-CHECK-UPDATE(); /* for updating corresp vbulk recs*/
     /* Tcs include end   08/25/98*/

  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0O   ";
    TA1REC.TA1LOCAT[1] = "OM0OS-UP";
    TA1REC.TA1LOCAT[2] = "DT-ORD-H";
    TA1REC.TA1LOCAT[3] = "DR      ";
    TA1REC.TA1LOCAT[4] = "IO0430  ";
    TA1REC.TA1MAP = "OM0OM001";
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    OMWREC.OMWORDN = OP1REC.OP1CUOID;
    OMWREC.OMWSORDN = OP1REC.OP1NORID;
    TA1REC.TA1TBLKE = OMWREC.OMWORD;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

end // end OM0OS-UPDT-ORD-HDR

// UPDATE VBULKS02
Function OM0OS-UPDTE-VBULK()
   /* tcs include begin*/
   /* to update vbulk*/
  set OBFREC empty;
  set SQLCA empty;
  VBULKS02.KUMSTRID = OP1REC.KUMSTRID;
  VBULKS02.XNXCD = OP1REC.XNXCD;
  VBULKS02.XBDCD = OP1REC.XBDCD;
  VBULKS02.OP1CUPO = OP1REC.OP1CUPO;
  VBULKS02.XDVCD = OP1REC.XDVCD;
  VBULKS02.XSOCD = OP1REC.XSOCD;
  VBULKS02.XWHCD = OP1REC.XWHCD;
  VBULKS02.OP1CUNDT = OP1REC.OP1CUNDT;
  VBULKS02.OP1DSADT = OP1REC.OP1DSADT;
  VBULKS02.SP1ID = OP1REC.SP1ID;
  VBULKS02.SM4REPID = OP1REC.SM4REPID;
  OBFREC.OBFTASK = "U ";
  call "VBULKS02" (OBFREC, SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

  else
    TA1REC.TA1LOCAT[1] = "U ";
    TA1REC.TA1LOCAT[2] = "VBULKS02";
    TA1REC.TA1LOCAT[3] = "OMOOS-UPDTE-VBULK";
    TA1REC.TA1DBASE = "DORDB  "; /* data base name*/
    TA1REC.TA1TBLVU = "VBULKS02"; /* data base view*/
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end
   /* tcs include END*/
end // end OM0OS-UPDTE-VBULK

// Transfer to cresting instructs
Function OM0OS-XFR-AE09()

   /* ******************************************************************/
   /* Set up for current item and transfer to the product*/
   /* cresting information application.*/
   /* OPABREC is the record passed in the commarea user area*/
   /* for transfers AE and OP/OM applications. The first*/
   /* part of the record contains the system record (OMWREC in*/
   /* this case). The second part of the record contains*/
   /* fields needed by the AE appl.*/
   /* ******************************************************************/

  set OPABREC empty; /* Init common pass record*/

  OMWREC.OP1GROUP = OP1REC.OP1GROUP;
  OPABREC.OPAB-SYS-GRP = OMWREC.OMWSGRP; /* Pass OMWREC*/

   /* Move fields used by AE09*/

  OPABREC.OP-ORD-PART-CHAR = OP3REC.OP1PARTN;
  OPABREC.OP-CUST-ORD-ID = OP3REC.OP1CUOID;
  OPABREC.OP-NIKE-ORD-ID = OP3REC.OP1NORID;
  OPABREC.OP-LINE-ITEM-NBR = OP3REC.OP2LNINB;
  OPABREC.SY-STY-NBR = OP3REC.SY1STNBR;
  OPABREC.SY-COLR-CD-ID = OP3REC.SY2CLRID;
  OPABREC.XDM-DIM-CD = OP3REC.XDMCD;
  OPABREC.OPAB-TO-APPL = "OM0S"; /* Application AE09 will transfer*/
                                        /* back to*/

  COMMAREA.CA-USER-WORKAREA-4K = OPABREC.OPAB-COMMON-REC;

  COMMAREA.CACURRAP = "AE09";
  COMMAREA.CAFROMAP = "OM0O";
  COMMAREA.CATOAP = " ";
  sysVar.transferName = "AE09";
  transfer to transaction sysVar.transferName passing COMMAREA; /* Transfer*/

end // end OM0OS-XFR-AE09

// read op2rec,setup 200 prd aray
Function OM0OS01()



  set OMWREC empty;
  set OM0OW01 empty;
  set OP1REC empty;
  set OP2REC empty;
  set OP3REC empty;
  set OP8REC empty;
   /* SPAIN TRADEMARK CHANGES   03/17/2000*/
   /* The following statement is added to initialise Spain project*/
   /* validating record*/
   /* Spain project * changes * begin * 04/03/2000 *******/
  set OP10REC empty;
   /* Spain project * changes * end   * 04/03/2000 *******/
  set OPBREC empty;
  set OSLREC empty;
  set KUYREC empty;
  set PC2REC empty;
  set SM1REC empty;
  set SYCREC empty;
  set SY4REC empty;
  set TA1REC empty;
  set TA2REC empty;
  set OSIREC empty;
  set SQLCA empty;
  set ERRSQLCA empty;

  set OM0OM001 empty;
  set OM0OM005 empty;

  OMWREC.OMWSGRP = COMMAREA.CA-USER-WORKAREA-4K;
  OP1REC.OP1GROUP = OMWREC.OP1GROUP;

  TA1REC.TA1PGMNM = "OM0O"; /* info for abend*/

  OM0OW01.OM0OWDT = VGVar.currentShortGregorianDate;
  if (OM0OW01.OM0OWYY > 56)
    OM0OW01.OM0OWD1 = 19;
  else
    OM0OW01.OM0OWD1 = 20;
  end

  if (OMWREC.OMWPF2CH != "N")
    OMWREC.OMWPF2CH = "N";
  end

  COMMAREA.CAFROMAP = "OM0O";

  OM0OW01.OM0OWC1 = "-"; /* date separator*/
  OM0OW01.OM0OWC2 = "-"; /* date separator*/


  OM0OW01.OM0OWSUB = 1; /* init omwrec sub*/


  OM0OS11(); /* read op1rec (order header)*/


end // end OM0OS01

// CHECK FOR PREPACK
Function OM0OS02()

   /* THIS STATEMENT GROUP CHECKS THE PREPACK DATABASE*/
   /* TO SEE IF THE ORDER EXISTS*/

  OMWREC.OMWPKCHF = "N"; /* pack change flag*/
  OMWREC.OMWPPEXF = "N"; /* prepack exists flag*/
  sysVar.arrayIndex = 1;

  if (OP1REC.XGPCD == "03" /* APPAREL ORDER*/
   || OP1REC.XGPCD == "02") /* footwear order*/
    if (OP1REC.XPACD in XPATBL.XPACD /* IF VALID PACK CODE*/
     && XPATBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XPATBL.XPASPFFL[sysVar.arrayIndex] == "Y") /* CUST WANTS PREPACK*/
           /* NEXT SENTENCE   SEE IF ORDER IS ON DBASE*/
      else
        return;
      end
    else
      return;
    end
  else
    return;
  end

   /* BUILD THE KEY TO SPECIFIED PREPACK TABLE*/

  set OSNREC empty;
  set SQLCA empty;

  OSNREC.XWHCD = OP1REC.XWHCD; /* WAREHOUSE*/
  OSNREC.OP1PARTN = OP1REC.OP1PARTN; /* PART CHAR*/
  OSNREC.OP1CUOID = OP1REC.OP1CUOID; /* ORDER NUM*/
  OSNREC.OP1NORID = OP1REC.OP1NORID; /* NIKE ORD ID*/

  call "IO5650" ("SE", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == -811) /* multi records found*/
    OMWREC.OMWPPEXF = "Y"; /* prepack exists flag*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OMWREC.OMWPPEXF = "N"; /* prepack exists flag*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        OMWREC.OMWPKCHF = "Y"; /* reseet pack change flag*/
        OM0OW01.OM0OWERR = "Y";
        converseLib.validationFailed(672); /* prepack db busy try again*/
        return;
      else
        OM0OW01.OM0OWERR = "Y";
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "OM0O    ";
        TA1REC.TA1LOCAT[1] = "SE      ";
        TA1REC.TA1LOCAT[2] = "OM0OS02 ";
        TA1REC.TA1LOCAT[3] = "IO5650  ";
        TA1REC.TA1DBASE = "DORDER  ";
        TA1REC.TA1TBLVU = "VCSPRP01";
        OMWREC.OMWORDN = OP1REC.OP1CUOID;
        OMWREC.OMWSORDN = OP1REC.OP1NORID;
        TA1REC.TA1TBLKE = OMWREC.OMWORD;
        try
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        end
        COMMAREA.CAMSGA = "PREPACK DB PROBLEMS";
        COMMAREA.CAMSGB = "ORDER MAY HAVE PREPACK CALL USER ANALYST";
        COMMAREA.CACURRAP = "OM0M";
        transfer to program "OM0M" passing COMMAREA;
      end
    end
  end

end // end OM0OS02

// LOAD PRODUCTS TO TEMP STORAGE
Function OM0OS05()


  OP2REC.OP2KEY = OP1REC.OP1KEY; /* format op2rec key*/
  OP2REC.OP2LNINB = 0; /* format line item w/ 0 to get all*/

  OM0OW01.OM0OWEOF = "N"; /* init products eof flag*/


  OM0OS06(); /* select set of products*/

  OM0OS07(); /* select next(first) product*/

    /* WALK THROUGH ALL PRODUCTS AND LOAD INTO TEMP STORAGE*/

  OM0OW01.OM0OWSUB = 1; /* init subscript for omwrec*/

  while (OM0OW01.OM0OWSUB <= 900 /* while less than max prods for omwrec*/
   && OM0OW01.OM0OWEOF == "N") /* and more products exist*/
    OMWREC.OMWSELCD[OM0OWSUB] = "S"; /* load default selection code*/
    OMWREC.OP2LNINB[OM0OWSUB] = OP2REC.OP2LNINB; /* load line item #*/
    OM0OW01.OM0OWSUB = OM0OW01.OM0OWSUB + 1;
    if (OM0OW01.OM0OWSUB > 900) /* reached max for omwrec*/
      OM0OW01.OM0OWEOF = "Y"; /* set eof flag on*/
    end
    OM0OS07(); /* select next product*/
  end

  OMWREC.OMWLINES = OM0OW01.OM0OWSUB - 1;

  OM0OS08(); /* close cursor of products*/

  OM0OW01.OM0OWSUB = 1; /* init subscript for omwrec*/


end // end OM0OS05

// SEL ALL PRODs to load omwrec
Function OM0OS06()

  set SQLCA empty;


  call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1LOCAT[1] = "SS"; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO0440"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "OM0OS06"; /* statement group*/
    TA1REC.TA1LOCAT[4] = " "; /* order key*/
    TA1REC.TA1TBLKE = " "; /* clear table key*/
    OMWREC.OMWORDN = OP2REC.OP1CUOID; /* frmt display cust ord id*/
    OMWREC.OMWSORDN = OP2REC.OP1NORID; /* frmt display nike ord id*/
    TA1REC.TA1TBLKE = OMWREC.OMWORD; /* order key*/
    XSOPS02(); /* general abend*/
  end
end // end OM0OS06

// SELECT NEXT PRODUCT 4 TEMP STR
Function OM0OS07()

  set SQLCA empty;


  call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OM0OW01.OM0OWEOF = "Y";
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VITEM001";
      TA1REC.TA1LOCAT[1] = "SN"; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO0440"; /* i/o mod*/
      TA1REC.TA1LOCAT[3] = "OM0OS07"; /* statement group*/
      TA1REC.TA1LOCAT[4] = " "; /* order key*/
      TA1REC.TA1TBLKE = " "; /* clear table key*/
      OMWREC.OMWORDN = OP2REC.OP1CUOID; /* frmt display cust ord id*/
      OMWREC.OMWSORDN = OP2REC.OP1NORID; /* frmt display nike ord id*/
      TA1REC.TA1TBLKE = OMWREC.OMWORD; /* order key*/
      XSOPS02(); /* general abend*/
    end
  end
end // end OM0OS07

// CLOSE PRODUCTS SET
Function OM0OS08()

  call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1LOCAT[1] = "CS"; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO0440"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "OM0OS08"; /* statement group*/
    TA1REC.TA1TBLKE = " "; /* clear table key*/
    XSOPS02(); /* general abend*/
  end
end // end OM0OS08

// BUILD MAP OM0OM001
Function OM0OS10()


  OM0OS12(); /* get product using db1000*/


  OM0OS13(); /* get sycrec*/


  OM0OS15(); /* build om0om001 map*/


end // end OM0OS10

// READ ORDER HEADER
Function OM0OS11()


  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0O    ";
    TA1REC.TA1MAP = "OM0OM001";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VORHDR01";
    OMWREC.OMWORDN = OP1REC.OP1CUOID;
    OMWREC.OMWSORDN = OP1REC.OP1NORID;
    TA1REC.TA1TBLKE = OMWREC.OMWORD;
    TA1REC.TA1LOCAT[3] = "OM0OS11";
    TA1REC.TA1LOCAT[4] = "IO0430";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end





end // end OM0OS11

// READ OP3REC PRODUCT (DB1000)
Function OM0OS12()


  set OP3REC empty;
  set OP8REC empty;
  set OPBREC empty;

  OP3REC.OP2KEY = OP1REC.OP1KEY;
  OP3REC.OP2LNINB = OMWREC.OP2LNINB[OM0OWSUB];

  OP8REC.OP8TASK = "S ";
  OP8REC.OP8LOC = "PROG OM0O SGRP OM0OS12";
  OP8REC.OP8LOCAT[1] = "DB1000";
  OP8REC.OP8LOCAT[2] = " ";
  OP8REC.OP8LOCAT[3] = " ";
  OP8REC.OP8LOCAT[4] = " ";
  OP8REC.OP8MAP = "NONE";


  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};

  if (OPBREC.OPBSZRC == 0) /* check for good return*/
     /* next sentence*/
  else
  /* MOVE 971 TO EZEMNO;             /* no more styles on this order*/
    exit stack;
  end



end // end OM0OS12

// READ SYCREC,STYLE & COLOR
Function OM0OS13()


  set SYCREC empty;

  SYCREC.XGPCD = OP3REC.XGPCD;
  SYCREC.SY1STNBR = OP3REC.SY1STNBR;
  SYCREC.SY2CLRID = OP3REC.SY2CLRID;
  SYCREC.XDMCD = OP3REC.XDMCD;

  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

    /* added for Canada 02/01/96*/

    if (OP1REC.XDZ-DATA-DIST-CD == "CA") /* canadian order*/
      set WSY2000 empty;
      WSY2000.XDR-PROD-REG-CD = "05";
      OM0OS-SEL-SY2000(); /* get product region record*/
      if (WSY2000.WSY2000-RETURN-CODE == 0) /* row found*/
        /* next sentence*/
      else
        if (WSY2000.WSY2000-RETURN-CODE == 98) /* database busy*/
          converseLib.validationFailed(10); /* database busy*/
          OM0OW01.OM0OWERR = "Y";
          return; /* flow back to map*/
        else
          if (WSY2000.WSY2000-RETURN-CODE == 02) /* style/color not found*/
            converseLib.validationFailed(911); /* style/color not found*/
            OM0OW01.OM0OWERR = "Y";
            return; /* flow back to map*/
          else
            converseLib.validationFailed(909); /* database error*/
            OM0OW01.OM0OWERR = "Y";
            return; /* flow back to map*/
          end
        end
      end

      /* added for US apparel 06/20/96*/

    else
      if (OP1REC.XGPCD == "03")
        if (COMMAREA.XDVCD == "02" /* userid assigned to europe*/
         || COMMAREA.XDVCD == "03") /* userid assigned to asia*/
          /* continue processing*/
        else
          set WSY2000 empty;
          WSY2000.XDR-PROD-REG-CD = "01";
          OM0OS-SEL-SY2000(); /* get product region record*/
          if (WSY2000.WSY2000-RETURN-CODE == 0) /* row found*/
            /* next sentence*/
          else
            if (WSY2000.WSY2000-RETURN-CODE == 98) /* database busy*/
              converseLib.validationFailed(10); /* database busy*/
              OM0OW01.OM0OWERR = "Y";
              return; /* flow back to map*/
            else
              if (WSY2000.WSY2000-RETURN-CODE == 02) /* style/color not found*/
                converseLib.validationFailed(911); /* style/color not found*/
                OM0OW01.OM0OWERR = "Y";
                return; /* flow back to map*/
              else
                converseLib.validationFailed(909); /* database error*/
                OM0OW01.OM0OWERR = "Y";
                return; /* flow back to map*/
              end
            end
          end
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1DBASE = "DPROD ";
      TA1REC.TA1TBLVU = "VCOLOR02";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "IO0560  ";
      TA1REC.TA1LOCAT[3] = "OM0OS13 ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1TBLKE = SYCREC.SYCKEY;
      XSOPS02(); /* abort*/
    end
  end



end // end OM0OS13

// FORMAT MAP FIELDS
Function OM0OS15()


  OM0OM001.OM0OMDTE = VGVar.currentShortGregorianDate; /* current date*/
  OM0OM001.OM0OMTLE = "INQUIRY"; /* inquiry mode*/


    /* MOVE OP1REC FIELDS TO MAP*/

  OM0OM001.OP1CUNDT = OP1REC.OP1CUNDT;
  OM0OM001.XWHCD = OP1REC.XWHCD;

  OM0OM001.KUMSTRNM = OMWREC.KUMSTRNM;


    /* MOVE OP3REC FIELDS TO MAP*/

  OM0OM001.KUIPRDID = OP3REC.KUIPRDID;
  OM0OM001.XUMCD = OP3REC.XUMCD;
  OM0OM001.XOWCD = OP3REC.XOWCD;
  OM0OM001.OP2SSTYN = OP3REC.OP2SSTYN;
  OM0OM001.OP2SCLCD = OP3REC.OP2SCLCD;
  OM0OM001.OP2SDMCD = OP3REC.OP2SDMCD;
  OM0OM001.OP2SUBQT = OP3REC.OP2SUBQT;
  OM0OM001.OP2CGPCD = OP3REC.OP2CGPCD;
  OM0OM001.OP2KSTYF = OP3REC.OP2KSTYF;
  OM0OM001.OP2GTSZF = OP3REC.OP2GTSZF;
  OM0OM001.PC2INSEG = OP3REC.PC2INSEG;
  OM0OM001.OP2MSCDP = OP3REC.OP2MSCDP;
  OM0OM001.OP2FSTFL = OP3REC.OP2FSTFL;
  OM0OM001.XQACD = OP3REC.XQACD;
  OM0OM001.XPGCD = OP3REC.XPGCD;
  OM0OM001.PWRLBCD[1] = OP3REC.PWRLBCD[1];
  OM0OM001.PWRLBCD[2] = OP3REC.PWRLBCD[2];
  OM0OM001.OP2LNIST = OP3REC.OP2LNIST;
  OM0OM001.OP2LNSDT = OP3REC.OP2LNSDT;
  OM0OM001.XDNCD = OP3REC.XDNCD;
  OM0OM001.XRSCD = OP3REC.XRSCD;
  OM0OM001.OP1BOFL = OP3REC.OP1BOFL;
  OM0OM001.XHDCD[1] = OP3REC.XHDCD[1];
  OM0OM001.XHDCD[2] = OP3REC.XHDCD[2];
  OM0OM001.XHDCD[3] = OP3REC.XHDCD[3];
  OM0OM001.XHDCD[4] = OP3REC.XHDCD[4];
  OM0OM001.XHDCD[5] = OP3REC.XHDCD[5];
  OM0OM001.XHDCHG[1] = OP3REC.XHDCHG[1];
  OM0OM001.XHDCHG[2] = OP3REC.XHDCHG[2];
  OM0OM001.XHDCHG[3] = OP3REC.XHDCHG[3];
  OM0OM001.XHDCHG[4] = OP3REC.XHDCHG[4];
  OM0OM001.XHDCHG[5] = OP3REC.XHDCHG[5];
  OM0OM001.OP2OMQTY[1] = OP3REC.OP2OMQTY[1];
  OM0OM001.OP2OMQTY[2] = OP3REC.OP2OMQTY[2];
  OM0OM001.OP2OMQTY[3] = OP3REC.OP2OMQTY[3];
  OM0OM001.OP2OMQTY[4] = OP3REC.OP2OMQTY[4];
  OM0OM001.OP2PRCOF = OP3REC.OP2PRCOF;
  OM0OM001.OP2PRCVF = OP3REC.OP2PRCVF;
  OM0OM001.OP2AUPRC = OP3REC.OP2AUPRC;


    /* BOOKING SEASON*/

  if (OP3REC.XBK-BK-SESN-CD != " ")
    OM0OM001.XBK-BK-SESN-CD = OP3REC.XBK-BK-SESN-CD;
    OM0OW01.OM0OW-OP-BK-CCCYY = OP3REC.OP-BK-YR;
    OM0OM001.OM0OM-OP-BK-YY = OM0OW01.OM0OW-OP-BK-YY;
  else
    OM0OM001.XBK-BK-SESN-CD = "  ";
    OM0OM001.OM0OM-OP-BK-YY = "  ";
  end

  if (OP3REC.OP-BK-MO != 0)
    OM0OW01.OM0OW-OP-BK-MM = OP3REC.OP-BK-MO;
    OM0OM001.OM0OM-OP-BK-MM = OM0OW01.OM0OW-OP-BK-MM;
  else
    OM0OM001.OM0OM-OP-BK-MM = "  ";
  end


    /* ORDER NUMBER*/

  OMWREC.OMWORDN = OP3REC.OP1CUOID; /* formatted order number*/
  OMWREC.OMWSEP1 = ".";
  OMWREC.OMWSORDN = OP3REC.OP1NORID;
  OM0OM001.OM0OMOID = OMWREC.OMWORD;


    /* CUSTOMER NUMBER*/

  OM0OW01.OM0OWKUC = OP1REC.KUCCOID; /* formatted customer number*/
  OM0OW01.OM0OWF2 = ".";
  OM0OW01.OM0OWKUM = OP1REC.KUMSTRID;
  OM0OW01.OM0OWF3 = ".";
  OM0OW01.OM0OWNX = OP1REC.XNXCD;
  OM0OM001.OM0OMCID = OM0OW01.OM0OWCID;


    /* STYLE NUMBER*/

  OM0OW01.SY1STNBR = OP3REC.SY1STNBR; /* formatted sytle number*/
  OM0OW01.OM0OWF4 = "-";
  OM0OW01.SY2CLRID = OP3REC.SY2CLRID;
  OM0OW01.OM0OWF5 = "-";
  OM0OW01.XDMCD = OP3REC.XDMCD;
  OM0OM001.OM0OMSID = OM0OW01.OM0OWSID;


    /* STYLE NAME*/

  OM0OM001.SY1STYNM = SYCREC.SY1STYNM;


    /* COLOR NAME*/

  OM0OM001.SY2CLRDS = SYCREC.SY2CLRDS;


    /* PRODUCT STATUS (line item)*/

  if (OP3REC.OP2LNIST == " ")
    OM0OM001.OP2LNIST = " ";
  else
    if (OP3REC.OP2LNIST in XOSTBL.XOSCD)
      OM0OM001.OP2LNIST = XOSTBL.XOSABRV[sysVar.arrayIndex];
    else
      OM0OM001.OP2LNIST = " ";
    end
  end

    /* WAREHOUSE CODE*/

  if (OP1REC.XWHCD == " ")
    OM0OM001.XWHSABRV = " ";
  else
    if (OP1REC.XWHCD in XWHTBL.XWHCD)
      OM0OM001.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    else
      OM0OM001.XWHSABRV = " ";
    end
  end


    /* FACTORY PO*/

  if (OP1REC.XWHCD == " ")
    if (OP1REC.XGPCD == "02")
      OM0OM001.OM0OMFID = "FACTORY PO ID>";
      set OM0OM001.OM0OMFNB skip, invisible;
    else
      OM0OM001.OM0OMFNB = "FACTORY PO NBR>";
      set OM0OM001.OM0OMFID skip, invisible;
    end
    OM0OS16(); /* call io3260 oslrec*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (OP1REC.XGPCD == "02")
        OM0OW01.OM0OWPD1 = OSLREC.PC3POIDT;
        OM0OM001.OM0OMPDT = OM0OW01.OM0OWPDT;
        OM0OM001.FY1FCTYC = OSLREC.FY1FCTYC;
        set OM0OM001.OM0OMFNB skip, invisible;
      else
        OM0OM001.OM0OMPNB = OSLREC.PC3PONBR;
        set OM0OM001.OM0OMFID skip, invisible;
      end
    end
  else
    set OM0OM001.OM0OMFID skip, invisible;
    set OM0OM001.OM0OMFNB skip, invisible;
  end


      /* PRICE VARY FLAG*/

  if (OP3REC.OP2PRCVF == "Y")
    OM0OM001.OP2PRCVF = "AVG";
  else
    OM0OM001.OP2PRCVF = "   ";
  end


    /* PRICE OVERRIDE FLAG*/

  if (OP3REC.OP2PRCOF == "Y")
    OM0OM001.OP2PRCOF = "*";
  else
    OM0OM001.OP2PRCOF = " ";
  end


    /* added for Canada -- June 26, 1995 --*/

  if (OP1REC.XDZ-DATA-DIST-CD == "CA")
    OM0OM001.ZFCCD = OP1REC.ZFC-CRCY-CD;
    OM0OM001.OM0OM-CURR-LIT = "CURRENCY CODE:";
  else
    OM0OM001.OM0OM-CURR-LIT = " ";
  end

    /* DIRECT SHIP FLAG*/

  if (OM0OM001.XDSCD == " ")
    OM0OM001.XDSABRV = " ";
  else
    if (OM0OM001.XDSCD in XDSTBL.XDSCD)
      OM0OM001.XDSABRV = XDSTBL.XDSABRV[sysVar.arrayIndex];
    end
  end



  OM0OW01.XOWCD = OM0OM001.XOWCD;
  OM0OW01.XWHCD = OM0OM001.XWHCD;


    /* OWNER GROUP CODE*/

  if (OM0OM001.XOWCD == " "
   || OM0OM001.XOWCD == "00")
    if (OP1REC.XWHCD == "03"
     || OP1REC.XWHCD == "51"
     || OP1REC.XWHCD == "25"
     || OP1REC.XWHCD == "27")
      OM0OM001.XOWCD = "00";
      OM0OM001.XOWABRV = " ";
    else
      OM0OM001.XOWCD = " ";
      OM0OM001.XOWABRV = " ";
    end
  else
    if (OM0OW01.OM0OWOWK in XOWTBL.XOWKEY)
      OM0OM001.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
    end
  end


    /* RESERVATION REASON CODE*/

  if (OM0OM001.XRSCD == " ")
    OM0OM001.XRSABRV = " ";
  else
    if (OM0OM001.XRSCD in XRSTBL.XRSCD)
      OM0OM001.XRSABRV = XRSTBL.XRSABRV[sysVar.arrayIndex];
    end
  end


    /* DE-ALLOCATION REASON CODE*/

  if (OM0OM001.XDNCD == " ")
    OM0OM001.XDNABRV = " ";
  else
    if (OM0OM001.XDNCD in XDNTBL.XDNCD)
      OM0OM001.XDNABRV = XDNTBL.XDNABRV[sysVar.arrayIndex];
    end
  end


    /* QUALITY CODE*/

  if (OM0OM001.XQACD in XQATBL.XQACD) /* quality code*/
    OM0OM001.XQAABRV = XQATBL.XQAABRV[sysVar.arrayIndex];
  end


    /* INVENTORY SEGMENT CODE*/

  if (OM0OM001.PC2INSEG == " ")
    OM0OM001.PC2SEGAB = " ";
  else
    OM0OS17(); /* call io3340 for spec*/
    if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
      OM0OM001.PC2SEGAB = PC2REC.PC2SEGAB;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
        OM0OM001.PC2SEGAB = "UNKN";
      end
    end
  end


    /* PACKAGE TYPE*/

  if (OM0OM001.XPGCD == " ")
    OM0OM001.XPGABRV = " ";
  else
    if (OM0OM001.XPGCD in XPGTBL.XPGCD)
      OM0OM001.XPGABRV = XPGTBL.XPGABRV[sysVar.arrayIndex];
    end
  end


    /* UNIT OF MEASURE*/

  if (OM0OM001.XUMCD in XUMTBL.XUMCD)
    OM0OM001.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
  end


    /* LIFE CYCLE CODE*/

  if (SYCREC.XLCCD1 != " "
   && SYCREC.SY2CEDT1 <= OM0OW01.OM0OWDT
   && SYCREC.SY2CEDT1 != 0)
    OM0OM001.XLCCD = SYCREC.XLCCD1;
    sysVar.arrayIndex = 99;
  else
    if (SYCREC.XLCCD2 != " "
     && SYCREC.SY2CEDT2 <= OM0OW01.OM0OWDT
     && SYCREC.SY2CEDT2 != 0)
      OM0OM001.XLCCD = SYCREC.XLCCD2;
      sysVar.arrayIndex = 99;
    else
      if (SYCREC.XLCCD3 != " "
       && SYCREC.SY2CEDT3 <= OM0OW01.OM0OWDT
       && SYCREC.SY2CEDT3 != 0)
        OM0OM001.XLCCD = SYCREC.XLCCD3;
        sysVar.arrayIndex = 99;
      else
        if (SYCREC.XLCCD4 != " "
         && SYCREC.SY2CEDT4 <= OM0OW01.OM0OWDT
         && SYCREC.SY2CEDT4 != 0)
          OM0OM001.XLCCD = SYCREC.XLCCD4;
          sysVar.arrayIndex = 99;
        end
      end
    end
  end


    /* LIFE CYCLE ABREV*/

  if (OM0OM001.XLCCD in XLCTBL.XLCCD)
    OM0OM001.XLCABRV = XLCTBL.XLCABRV[sysVar.arrayIndex];
  end


    /* CUSTOMER LABEL CODE ABRV*/

    /* ***  until IO5750 is installed into production,*/
         /* move spaces to the label code abrv  ****/

  OM0OM001.PWRLBABR[1] = "      ";
  OM0OM001.PWRLBABR[2] = "      ";


    /* PACK HANDLING DATA*/

  OM0OW01.OM0OWSB1 = 1;
  while (OM0OW01.OM0OWSB1 < 6)
    if (OM0OM001.XHDCD[OM0OWSB1] != " ")
      sysVar.arrayIndex = 1;
      OM0OW01.XHDCD = OM0OM001.XHDCD[OM0OWSB1];
      OM0OW01.XGPCD = OP3REC.XGPCD;
      if (OM0OW01.XHDKEY in XHDTBL.XHDKEY)
        OM0OM001.XHDABRV[OM0OWSB1] = XHDTBL.XHDABRV[sysVar.arrayIndex];
        OM0OW01.XHDUCHFL = XHDTBL.XHDUCHFL[sysVar.arrayIndex];
      end
      if (OP3REC.OP2HCHGO[OM0OWSB1] == "Y")
        OM0OW01.OP2HCHGO = "*";
      else
        OM0OW01.OP2HCHGO = " ";
      end
       /* move combined field = xhduchfl & op2hchgo*/
      OM0OM001.OM0OMHTP[OM0OWSB1] = OM0OW01.OM0OMHTP;
    else
      OM0OM001.XHDCD[OM0OWSB1] = " ";
      OM0OM001.XHDABRV[OM0OWSB1] = " ";
      OM0OM001.XHDCHG[OM0OWSB1] = 0;
      OM0OM001.OM0OMHTP[OM0OWSB1] = " ";
    end
    OM0OW01.OM0OWSB1 = OM0OW01.OM0OWSB1 + 1;
  end


    /* ORDER MAINT CODES*/

  OM0OW01.OM0OWSB1 = 1;
  while (OM0OW01.OM0OWSB1 < 5)
    OM0OW01.XOMCD = OP3REC.XOMCD[OM0OWSB1]; /* order maint code*/
    OM0OW01.XMTCD = OP3REC.XMTCD[OM0OWSB1]; /* maint type code*/
    OM0OM001.OM0OMMTC[OM0OWSB1] = OM0OW01.OM0OMMTC;
    if (OP3REC.XOMCD[OM0OWSB1] in XOMTBL.XOMCD)
      OM0OM001.XOMABRV[OM0OWSB1] = XOMTBL.XOMABRV[sysVar.arrayIndex];
    else
      OM0OM001.XOMABRV[OM0OWSB1] = " ";
    end
    if (OP3REC.OP2OMDT[OM0OWSB1] == 0)
      OM0OM001.OM0OMMDT[OM0OWSB1] = " ";
    else
      OM0OW01.OM0OWDT = OP3REC.OP2OMDT[OM0OWSB1];
      OM0OW01.OM0OWDY = OM0OW01.OM0OWYY;
      OM0OW01.OM0OWDM = OM0OW01.OM0OWMM;
      OM0OW01.OM0OWDA = OM0OW01.OM0OWDD;
      OM0OM001.OM0OMMDT[OM0OWSB1] = OM0OW01.OM0OWDT2;
    end
    OM0OW01.OM0OWSB1 = OM0OW01.OM0OWSB1 + 1;
  end


    /* GET SERVICE REP NAMES*/


  OM0OW01.OM0OWSB1 = 1; /* init sub*/

  while (OM0OW01.OM0OWSB1 < 5)
    if (OP3REC.OP1MTREP[OM0OWSB1] > 0)
      set KUYREC empty;
      KUYREC.KUYSVRID = OP3REC.OP1MTREP[OM0OWSB1];
      OM0OS18();
      if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
        OM0OM001.XXXUSRID[OM0OWSB1] = KUYREC.XXXUSRID;
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
          OM0OM001.XXXUSRID[OM0OWSB1] = " ";
        end
      end
    else
      OM0OM001.XXXUSRID[OM0OWSB1] = " ";
    end
    OM0OW01.OM0OWSB1 = OM0OW01.OM0OWSB1 + 1;
  end

    /* get caselot info from calling VORXRF01*/
  OM0OS-GET-CASE-LOT();

end // end OM0OS15

// READ OSLREC FOR FACTORY PO
Function OM0OS16()


  set SQLCA empty;
  set OSLREC empty;


  OSLREC.OP1PARTN = OP1REC.OP1PARTN;
  OSLREC.OP1CUOID = OP1REC.OP1CUOID;
  OSLREC.OP1NORID = OP1REC.OP1NORID;
  OSLREC.OP2LNINB = OP3REC.OP2LNINB;


  call "IO3260" ("S ", SQLCA, OSLREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good return*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VPOOPX01";
    TA1REC.TA1LOCAT[1] = "S";
    TA1REC.TA1LOCAT[2] = "IO3260  ";
    TA1REC.TA1LOCAT[3] = "OM0OS16 ";
    TA1REC.TA1LOCAT[4] = "        ";
    OM0OW01.OM0OWT2 = OP1REC.OP1CUOID;
    OM0OW01.OM0OWT3 = OP1REC.OP1NORID;
    OM0OW01.OM0OWT4 = OP2REC.OP2LNINB;
    TA1TBLKE = OM0OW01.OM0OWT1;
    XSOPS02(); /* general abend*/
  end


end // end OM0OS16

// READ XSD/ISEG NUMBER
Function OM0OS17()


  set SQLCA empty;
  set PC2REC empty; /* init pc2rec*/

  PC2REC.PC2INSEG = OM0OM001.PC2INSEG;
  PC2REC.XGPCD = OP1REC.XGPCD;


  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes}; /* call spec cd*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DPROCC  ";
    TA1REC.TA1TBLVU = "VPRDCU01";
    TA1REC.TA1LOCAT[1] = "SG      ";
    TA1REC.TA1LOCAT[2] = "OM0OS17 ";
    TA1REC.TA1LOCAT[3] = "IO3340  ";
    TA1REC.TA1LOCAT[4] = "        ";
    OM0OW01.OM0OWTK1 = OP1REC.XGPCD;
    OM0OW01.OM0OWTK2 = OM0OM001.PC2INSEG;
    TA1REC.TA1TBLKE = OM0OW01.OM0OWTK;
    XSOPS02(); /* general abend*/
  end


end // end OM0OS17

// READ KUYREC SERVICE REP NAMES
Function OM0OS18()


  set SQLCA empty;


  call "IO0550" ("S ", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VSVREP01";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "IO0550  ";
    TA1REC.TA1LOCAT[3] = "OM0OS18 ";
    TA1REC.TA1LOCAT[4] = " ";
    OM0OW01.OM0OWTK4 = KUYREC.KUYSVRID;
    OM0OW01.OM0OWTK5 = KUYREC.XXXUSRID;
    TA1REC.TA1TBLKE = OM0OW01.OM0OWTK3;
    XSOPS02(); /* abort*/
  end


end // end OM0OS18

// EDIT MAP OM0OM001
Function OM0OS20()


  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf2
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf9
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf20
   || converseVar.eventKey is pf24
   || converseVar.eventKey is pf22
   || converseVar.eventKey is pf23
   || converseVar.eventKey is enter)
    /* next sentence*/
  else
    converseLib.validationFailed(001); /* invalid pfkey*/
    OM0OW01.OM0OWERR = "Y";
    return;
  end

  if (converseVar.eventKey is pf22) /* Request transfer to cust logo screen*/
    if (SYCREC.XPRCD == "22" /* Product is custom logo*/
     && OM0OW01.OM0OW-BULK-FL == "N") /* and not a bulk order*/
       /* next sentence*/
    else
      converseLib.validationFailed(001); /* Invalid pfkey request*/
      OM0OW01.OM0OWERR = "Y";
      return;
    end
  end

  if (converseVar.eventKey is pf23)
    if (OM0OM001.XOMCD1 == " ")
      converseLib.validationFailed(941);
      OM0OW01.OM0OWERR = "Y";
      return;
    else
      OM0OS-OCD-CMT1(); /* ocd comment pop-up window*/
    end
  end


  if (OSIREC.OSIMODE == "I") /* read only mode*/
    if (converseVar.eventKey is pf2 /* change*/
     || converseVar.eventKey is pf24) /* cancel/reinstate*/
      converseLib.validationFailed(533); /* night time inquiry - no updates*/
                                   /* allowed*/
      OM0OW01.OM0OWERR = "Y"; /* set error flag on*/
      return;
    end
  end


  if (converseVar.eventKey is pf2
   || converseVar.eventKey is pf20
   || converseVar.eventKey is pf24)
    OM0OS21(); /* edit change authority*/
  end

  if (OM0OW01.OM0OWERR == "Y") /* error flag on*/
    return;
  end

   /* SPAIN TRADEMARK CHANGES   04/02/2000*/
   /* the following code is modified to validate re-instated products*/
   /* for Spain Compliance. New statement group is*/
   /* introduced to check non-compliance product for all ship*/
   /* to country  code equal to 'Spain'/CNRY.*/
  if (converseVar.eventKey is pf24)
    if (OP3REC.OP2LNIST == "XL") /* if item status is cancelled*/
      OM0OS-MAP1-XOMCD(); /* validate reinstate chg rsn*/
      /* spain project * changes * begin *** 04/03/2000 **********/
      set TA1REC empty; /* intialize error display rec*/
      TA1REC.TA1MAP = "OM0OM001"; /* map  name*/
      OM0OS-SPAIN-CHECK(); /* chk if shiped to spain or cnry*/
      /* spain project * changes *  end  *** 04/03/2000 **********/
      if (OM0OW01.OM0OWERR == "N")
        OM0OS2B(); /* allow item to be reinstated to 'op'*/
        OM0OS-M1-OZ2090(); /* call oz2090 to update vsoscr01;*/
        OM0OM001.XOMCD1 = " ";
        OM0OM001.OM0OMREF = " ";
      end
    else
      OM0OS22(); /* edit cancel authority/validate xomcd*/
      if (OM0OW01.OM0OWERR == "N") /* no errors*/
        OM0OS30(); /* call om0r to cancel product*/
        if (OM0OW01.OM0OWERR == "N") /* no errors*/
          OM0OS-M1-OZ2090(); /* call oz2090 to update vsoscr01;*/
          OM0OM001.XOMCD1 = " ";
          OM0OM001.OM0OMREF = " ";
        end
      end
    end
  end


end // end OM0OS20

// CHECK CHANGE AUTHORIZATION
Function OM0OS21()


  if (converseVar.eventKey is pf2
   || converseVar.eventKey is pf20
   || converseVar.eventKey is pf21)
    /* wipro include begin  TT#7194*/
    /* move adds total to map*/
    if (OM0OW01.OM0OWADD > 0) /* check adds total gt 0*/
      OM0OM005.OM0OMTAD = OM0OW01.OM0OWADD; /* adds total to map*/
    end
    /* wipro include end    TT#7194*/
    if (XS0MW01.XS0MWABF == "Y") /* transmitted airborne orders?*/
      OM0OW01.OM0OWERR = "Y"; /* for domestic*/
      converseLib.validationFailed(788); /* updates not allowed*/
      return;
    end
  end

  if (converseVar.eventKey is pf24
   || converseVar.eventKey is pf1)
    if (XS0MW01.XS0MWABF == "Y") /* transmitted airborne orders?*/
      OM0OW01.OM0OWERR = "Y"; /* for domestic*/
      converseLib.validationFailed(789); /* cancellations not allowed*/
      return;
    end
  end


  if (converseVar.eventKey is pf24
   && COMMAREA.CACHGFL == "N")
    OM0OW01.OM0OWERR = "Y";
    converseLib.validationFailed(401); /* id is not authorized to cancel*/
                                   /* products*/
    return;
  end

  if (converseVar.eventKey is pf2
   || converseVar.eventKey is pf20
   || converseVar.eventKey is pf21)
    if (COMMAREA.CACHGFL == "N")
      OM0OW01.OM0OWERR = "Y";
      converseLib.validationFailed(352); /* id is not authorized to change orders*/
      return;
    end
  end


  if (OP1REC.XDVCD == "02" /* international*/
   && OP1REC.XOCCD == "TR") /* TRANSMITTED airborne order*/
    if (converseVar.eventKey is pf20)
      converseLib.validationFailed(802); /* order class 'tr' prevents*/
      OM0OW01.OM0OWERR = "Y"; /* addition of product*/
      return;
    else
      if (converseVar.eventKey is pf21)
        converseLib.validationFailed(805); /* order class 'tr' prevents*/
        OM0OW01.OM0OWERR = "Y"; /* changes to product*/
        return;
      end
    end
  end

   /* iF EZEAID IS PF24;*/
    /* IF OP1REC.XDVCD EQ '02';            /* international*/
     /* AND OP1REC.XOCCD EQ 'TR';          /* transmitted airborne order*/
       /* MOVE 'AU' TO OP1REC.XOCCD;       /* default 'au' order class*/
       /* OM0OS-UPDT-ORD-HDR;              /* updt ord hdr w/new ord cls*/
    /* END;*/
   /* END;*/


  if (converseVar.eventKey is pf20
   || converseVar.eventKey is pf21)
    if (COMMAREA.CACHGFL == "Y"
     && COMMAREA.CACLVL[1] == "Y") /* nat alloc mgr*/
      OM0OW01.OM0OWERR = "Y";
      converseLib.validationFailed(352); /* id is not authorized to change orders*/
      return;
    end
  end

  if (converseVar.eventKey is pf24)
    if (COMMAREA.CACHGFL == "Y"
     && COMMAREA.CACLVL[1] == "Y") /* nat alloc mgr*/
      OM0OW01.OM0OWERR = "Y";
      converseLib.validationFailed(401); /* id is not authorized to cancel*/
                                   /* products*/
      return;
    end
  end


  if (OP1REC.XSOCD == COMMAREA.XSOCD)
     /* o.k.*/
  else
    OM0OW01.OM0OWERR = "Y";
    converseLib.validationFailed(355); /* id not auth to chng other sales*/
                                   /* office ords*/
    return;
  end


  if (converseVar.eventKey is pf2
   || converseVar.eventKey is pf20
   || converseVar.eventKey is pf21
   || converseVar.eventKey is pf24)
    if (OP1REC.XBDCD == "R")
      OM0OW01.OM0OWERR = "Y";
      converseLib.validationFailed(392); /* rebook bulk orders cannot be*/
                                   /* changed/cancelled*/
      return;
    end
  end


    /* DOES LINE ITEM STATUS ALLOW CHANGE ?????*/

  if (converseVar.eventKey is pf2
   || converseVar.eventKey is pf20
   || converseVar.eventKey is pf21)
    if (OP3REC.OP2LNIST in XOSTBL.XOSCD)
      if (XOSTBL.XOSALWCH[sysVar.arrayIndex] != "N") /* change ok*/
         /* o.k.*/
      else
        OM0OW01.OM0OWERR = "Y";
        converseLib.validationFailed(375); /* line item status does not allow*/
                                   /* change*/
        return;
      end
    end
  end


    /* SECURITY OK*/

  OMWREC.OMWPF2CH = "Y";


end // end OM0OS21

// EDIT FOR CANCEL
Function OM0OS22()


    /* XOMCD OK - DOES LINE ITEM STATUS ALLOW CANCEL ?????*/

  if (OP3REC.OP2LNIST in XOSTBL.XOSCD)
    if (XOSTBL.XOSALWXL[sysVar.arrayIndex] != "N") /* cancel ok*/

    else
      converseLib.validationFailed(373); /* line item status does not allow cancellation*/
      OM0OW01.OM0OWERR = "Y";
      return;
    end
  end


    /* EDIT CANCEL REASON/REENTER FLAG*/
     /* NOTE: THE XOMCD1 WILL ALWAYS BE BLANK THE FIRST TIME*/
           /* PASS.  USE THE FOLLOWING TO FORMAT MAP*/

  if (OM0OM001.XOMCD1 == " ")
    converseLib.validationFailed(400); /* enter xomcd msg*/
    OM0OM001.OM0OMX0M = "CANCEL RSN:";
    set OM0OM001.XOMCD1 cursor, normal;
    OM0OM001.OM0OMREL = "WILL ITEM BE REENTERED?:";
    set OM0OM001.OM0OMREF normal;
    OM0OW01.OM0OWERR = "Y"; /* set error to reconverse*/
    return;
  end


     /* EDIT REENTER FLAG FIELD - PF24 CANCEL*/

  if (OM0OM001.OM0OMREF == "Y"
   || OM0OM001.OM0OMREF == "N")
    OMWREC.OPUCRNTR = OM0OM001.OM0OMREF; /* cancel reenter flag*/
  else
    if (OM0OM001.OM0OMREF == " ")
      converseLib.validationFailed(562); /* fld reqrd - must enter y or n*/
      set OM0OM001.OM0OMREF cursor, bold;
      OM0OW01.OM0OWERR = "Y"; /* set error to reconverse*/
    else
      converseLib.validationFailed(563); /* invld char - must be y or n*/
      set OM0OM001.OM0OMREF cursor, bold;
      OM0OW01.OM0OWERR = "Y"; /* set error to reconverse*/
    end
  end


    /* VALIDATE THE XOMCD*/

  OM0OS23(); /* validate cancel reason map01*/


  if (OM0OW01.OM0OWERR == "Y") /* error found*/
    return;
  end


    /* LINE ITEM STATUS OK - CHANGE 'S' TO 'E'*/

  OMWREC.OMWSELCD[OM0OWSUB] = "E";


end // end OM0OS22

// VALIDATE CANCEL REASON CODE
Function OM0OS23()


  if (OM0OM001.XOMCD1 in XOMTBL.XOMCD /* valid maint reason*/
   && XOMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
    if (XOMTBL.XOMCANCF[sysVar.arrayIndex] == "D" /* decrease*/
     || XOMTBL.XOMCANCF[sysVar.arrayIndex] == "B") /* both - incr/decr*/
      if (XOMTBL.XOMRBKFL[sysVar.arrayIndex] == "Y") /* okay to rebook*/
        if (OP1REC.XOTCD in XOTTBL.XOTCD /* valid order type*/
         && XOTTBL.XOTFUTRF[sysVar.arrayIndex] == "Y") /* futures*/
          if (OP1REC.XBDCD == "0" /* reg order*/
           || OP1REC.XBDCD == "1" /* cust bulk*/
           || OP1REC.XBDCD == "5") /* cust draw*/
            set TA1REC empty;
            TA1REC.TA1LOCAT[2] = "OM0OS23"; /* sgrp*/
            TA1REC.TA1MAP = "OM0OM001"; /* map name*/

            OM0OS24(); /* validate agcy/customer*/

            if (OM0OW01.OM0OWERR == "Y") /* error found*/
              set OM0OM001.XOMCD1 cursor, modified, bold;
              return; /* go redisplay map*/
              /* ELSE                  ; xomcd okay for rebooking*/
              /* 8/6/91 no longer checking 45 day cancel window for rebook*/
                                  /* leave this code in place until the*/
                                   /* dust settles - when*/
                  /* removing this commented out code also deinstall*/
                  /* om0os25*/

              /* OM0OS25             ; check rebook 45 day cancel window*/

              /* IF OM0OW01.OM0OWERR EQ 'Y' ; error found*/
                /* SET OM0OM001.XOMCD1 CURSOR,MODIFIED,BRIGHT;*/
                /* EZERTN            ; go redisplay map*/
            else /* xomcd okay for rebooking*/
              OMWREC.XOMCD = OM0OM001.XOMCD1;
            end
            /* END ;*/
          else
            converseLib.validationFailed(398); /* must be reg or cust bulk/draw*/
            set OM0OM001.XOMCD1 cursor, modified, bold;
            OM0OW01.OM0OWERR = "Y"; /* set error flag*/
            return;
          end
        else
          converseLib.validationFailed(396); /* can not rebook non-futures*/
          set OM0OM001.XOMCD1 cursor, modified, bold;
          OM0OW01.OM0OWERR = "Y"; /* set error flag*/
          return;
        end
      else /* xomcd is valid for cancel*/
        OMWREC.XOMCD = OM0OM001.XOMCD1;
      end
    else
      converseLib.validationFailed(334); /* reason does not allow qty reductions*/
      set OM0OM001.XOMCD1 cursor, modified, bold;
      OM0OW01.OM0OWERR = "Y"; /* set error flag*/
      return;
    end
  else
    converseLib.validationFailed(372); /* invalid cancel reason*/
    set OM0OM001.XOMCD1 cursor, modified, bold;
    OM0OW01.OM0OWERR = "Y"; /* set error flag*/
    return;
  end


end // end OM0OS23

// VALIDATE AGENCY/CUSTOMER
Function OM0OS24()


  set SM1REC empty;
  set SQLCA empty;

  SM1REC.SM1AGYID = OP1REC.SM1AGYID; /* setup key*/

  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SM1REC.KUCCOID > 0) /* cust is valid*/
       /* next sentence*/
    else /* cust is not valid*/
      converseLib.validationFailed(391); /* agcy/cust not valid for rebooking*/
      OM0OW01.OM0OWERR = "Y"; /* set error flag on*/
      return;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      converseLib.validationFailed(205); /* agency is not valid*/
      OM0OW01.OM0OWERR = "Y"; /* set error flag on*/
      return;
    else
      TA1REC.TA1DBASE = "DSLSMN  ";
      TA1REC.TA1TBLVU = "VSAGCY01";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "IO0050  ";
      TA1REC.TA1LOCAT[3] = "OM0OS24 ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1TBLKE = SM1REC.SM1AGYID;
      XSOPS02(); /* abort*/
    end
  end

end // end OM0OS24

// allow item to be reinstated
Function OM0OS2B()
   /* ********************************************/
   /* reinstate cancelled line item*/
   /* ********************************************/

  set OP8REC empty;
  set OPBREC empty;
  set SQLCA empty;


  OP3REC.OP2LNIST = "OP";
  OP3REC.OP2LNSDT = OM0OW01.OM0OWDT;

  OP8REC.OP8TASK = "U ";
  OP8REC.OP8LOC = "PROG OM0O SGRP OM0OS2B";
  OP8REC.OP8LOCAT[1] = "DB1000";
  OP8REC.OP8LOCAT[2] = " ";
  OP8REC.OP8LOCAT[3] = " ";
  OP8REC.OP8LOCAT[4] = " ";
  OP8REC.OP8MAP = "NONE";


  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};

  if (OPBREC.OPBSZRC == 0) /* check for good return*/
    OM0OM001.OP2LNIST = "OPEN"; /* DEPENDING ON WHICH MAP??*/
    OM0OM005.OP2LNIST = "OPEN";
    OM0OM001.OM0OMX0M = " ";
    OM0OM005.OM0OMX0M = " ";
    converseLib.validationFailed(627); /* item has been reinstated. reenter sizes*/
    OM0OW01.OM0OWERR = "Y"; /* set error flag on*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1LOCAT[1] = "U"; /* calling option*/
    TA1REC.TA1LOCAT[2] = "DB1000"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "OM0OS2B"; /* statement group*/
    TA1REC.TA1LOCAT[4] = " "; /* order key*/
    TA1REC.TA1TBLKE = " "; /* clear table key*/
    OM0OW01.OM0OWT2 = OP3REC.OP1CUOID; /* frmt display cust ord id*/
    OM0OW01.OM0OWT3 = OP3REC.OP1NORID; /* frmt display nike ord id*/
    OM0OW01.OM0OWT4 = OP3REC.OP2LNINB; /* frmt display line item id*/
    TA1REC.TA1TBLKE = OM0OW01.OM0OWT1; /* order key*/
    XSOPS02(); /* general abend*/
  end

  if (OP1REC.XDVCD == "02" /* INTERNATIONAL*/
   && OP1REC.XOCCD == "TR") /* ORD CLS = transmitted AIRBORNE ORDER*/
    OP1REC.XOCCD = "AU";
    OM0OS-UPDT-ORD-HDR();
    OM0OM001.OM0OMX0M = " ";
    OM0OM005.OM0OMX0M = " ";
    converseLib.validationFailed(807); /* ORD CLS UPDTD TO 'AU'. REENTER SIZES*/
  end


  set OMEREC empty; /* initialize omerec return code*/
  OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* new order to omwrec*/

  call "OM0N" (OMWREC, OMEREC) {isNoRefresh = yes}; /* redo order status*/

  if (OMEREC.OME-RETURN-CD != "00") /* check om0r return code*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSPF4(); /* master menu*/
    exit program; /* master menu failure*/
  end


  OMWREC.OMWPKCHF = "Y"; /* pack change flag*/
  OP1REC.OP1GROUP = OMWREC.OP1GROUP;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
end // end OM0OS2B

// CANCEL PRODUCT (OM0R)
Function OM0OS30()

    /* if cancelling a product from an International Airborne order*/
    /* with an order class of 'TR' (order has already been transmitted*/
    /* to Airborne) update the order class to 'AU' so the order will*/
    /* be retransmitted tonight.*/

  converseLib.validationFailed(000);

  if (OP1REC.XDVCD == "02"
   && OP1REC.XOCCD == "TR")
    OP1REC.XOCCD = "AU";
    OM0OS-UPDT-ORD-HDR();
    converseLib.validationFailed(806); /* ORD CLS HAS BEEN CHGD TO 'AU'*/
    OM0OW01.OM0OWERR = "Y";
  end

    /* TRANSFER TO OM0R TO CANCEL*/

  OMWREC.OP1GROUP = OP1REC.OP1GROUP;

  set OMEREC empty; /* initialize omerec return code*/

  call "OM0R" (OMWREC, OMEREC) {isNoRefresh = yes};

  if (OMEREC.OME-RETURN-CD != "00") /* check om0r return code*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSPF4(); /* master menu*/
    exit program; /* master menu failure*/
  end

  OMWREC.OMWPKCHF = "Y"; /* pack change flag*/

  OP1REC.OP1GROUP = OMWREC.OP1GROUP;

  OMWREC.OMWPF2CH = "N"; /* set temp change flag to 'no'*/

  COMMAREA.CAFROMAP = "OM0O";


  OM0OM001.OM0OMX0M = " ";
  set OM0OM001.XOMCD1 skip, invisible;
  OM0OM001.OM0OMREL = " ";
  set OM0OM001.OM0OMREF skip, invisible;


  if (OMWREC.OMWSELCD[OM0OWSUB] == "E")
    OM0OM001.VAGen_EZEMSG = "WARNING -- PRODUCT(S) NOT CANCELLED";
  else
    if (OMWREC.OMWSELCD[OM0OWSUB] == "X")
      OM0OM001.OP2LNIST = "CANCEL";
      if (converseVar.validationMsgNum == 806)
       /* next sentence*/
      else
        OM0OM001.VAGen_EZEMSG = "SELECTED PRODUCT WAS CANCELLED";
      end
    end
  end


end // end OM0OS30

// BUILD MAP OM0OM005
Function OM0OS40()


  OM0OS12(); /* get product using db1000*/


  OM0OS13(); /* get sycrec*/


  OM0OS45(); /* build map heading*/


  OM0OS50(); /* get sy4rec*/


  OM0OS52(); /* clean work record for size array*/


  OM0OS55(); /* load OM0OW01 size array*/


  OM0OS57(); /* determine total add*/


  OM0OW01.OM0OWSB1 = 1; /* init map subscript*/
  OM0OW01.OM0OWSB2 = 1; /* init work rec subscript*/
  if (OM0OM005.OM0OMF1P == 1) /* page 1*/
    OM0OW01.OM0OWSB2 = 1; /* init work rec subscript*/
    OM0OW01.OM0OWF1P = 1; /* format ws page number*/
  else
    if (OM0OM005.OM0OMF1P == 2) /* page 2*/
      OM0OW01.OM0OWSB2 = 14; /* init work rec subscript*/
      OM0OW01.OM0OWF1P = 2; /* format ws page number*/
    else
      if (OM0OM005.OM0OMF1P == 3) /* page 2*/
        OM0OW01.OM0OWSB2 = 27; /* init work rec subscript*/
        OM0OW01.OM0OWF1P = 3; /* format ws page number*/
      else
        OM0OW01.OM0OWSB2 = 1; /* init work rec subscript*/
        OM0OW01.OM0OWF1P = 1; /* format ws page number*/
      end
    end
  end

  while (OM0OW01.OM0OWSB1 <= 13) /* while le max per page*/
    OM0OS60(); /* format map from OM0OW01*/
    OM0OW01.OM0OWSB1 = OM0OW01.OM0OWSB1 + 1; /* increment by +1*/
    OM0OW01.OM0OWSB2 = OM0OW01.OM0OWSB2 + 1; /* increment by +1*/
  end

  OM0OM005.OM0OMF1P = OM0OW01.OM0OWF1P; /* format current page number*/
  OM0OM005.OM0OMF1M = OM0OW01.OM0OWF1M; /* format max page number*/

  OM0OS65(); /* reset field attributes*/


end // end OM0OS40

// FORMAT OM0OM005 MAP HEADINGS
Function OM0OS45()


  OM0OM005.OM0OMDTE = VGVar.currentShortGregorianDate; /* current date*/


    /* move op3rec fields to map*/


  OM0OM005.KUIPRDID = OP3REC.KUIPRDID; /* customer style number*/
  OM0OM005.OP2LNIST = OP3REC.OP2LNIST; /* line item status*/
  OM0OM005.OP2LNSDT = OP3REC.OP2LNSDT; /* line item status date*/
   /* MOVE OP3REC.XOMCD(1) TO OM0OM005.XOMCD;/* change/cancel reason code*/
  OM0OM005.OP2TONOQ = OP3REC.OP2TONOQ; /* total on-order qty*/
  OM0OM005.OP2TALCQ = OP3REC.OP2TALCQ; /* total allocated qty*/
  OM0OM005.OP2TSHPQ = OP3REC.OP2TSHPQ; /* total shipped qty*/
  OM0OM005.OP2TOHRQ = OP3REC.OP2TOHRQ; /* total reserved qty*/
  OM0OM005.OP2TWIPQ = OP3REC.OP2TWIPQ; /* total work in-process qty*/
  OM0OM005.OP2TCNLQ = OP3REC.OP2TCNLQ; /* total cancel qty*/
  OM0OM005.OP2TORGQ = OP3REC.OP2TORGQ; /* total original qty*/
  OM0OM005.OP2LNIVL = OP3REC.OP2LNIVL; /* total line item value*/


    /* CUSTOMER NUMBER*/

  OM0OW01.OM0OWKUC = OP1REC.KUCCOID; /* formatted customer number*/
  OM0OW01.OM0OWF2 = ".";
  OM0OW01.OM0OWKUM = OP1REC.KUMSTRID;
  OM0OW01.OM0OWF3 = ".";
  OM0OW01.OM0OWNX = OP1REC.XNXCD;
  OM0OM005.OM0OMCID = OM0OW01.OM0OWCID;


    /* CUSTOMER STORE NAME*/

  OM0OM005.KUMSTRNM = OMWREC.KUMSTRNM;


    /* STYLE NUMBER*/

  OM0OW01.SY1STNBR = OP3REC.SY1STNBR; /* formatted sytle number*/
  OM0OW01.OM0OWF4 = "-";
  OM0OW01.SY2CLRID = OP3REC.SY2CLRID;
  OM0OW01.OM0OWF5 = "-";
  OM0OW01.XDMCD = OP3REC.XDMCD;
  OM0OM005.OM0OMSID = OM0OW01.OM0OWSID;


    /* STYLE NAME*/

  OM0OM005.SY1STYNM = SYCREC.SY1STYNM;


    /* COLOR NAME*/

  OM0OM005.SY2CLRDS = SYCREC.SY2CLRDS;


    /* ORDER NUMBER*/

  OMWREC.OMWORDN = OP3REC.OP1CUOID; /* formatted order number*/
  OMWREC.OMWSEP1 = ".";
  OMWREC.OMWSORDN = OP3REC.OP1NORID;
  OM0OM005.OM0OMOID = OMWREC.OMWORD;


    /* CUSTOMER NEED DATE*/

  OM0OM005.OP1CUNDT = OP1REC.OP1CUNDT;


    /* WAREHOUSE CODE*/

  if (OP1REC.XWHCD == " ")
    OM0OM005.XWHCD = " ";
  else
    if (OP1REC.XWHCD in XWHTBL.XWHCD)
      OM0OM005.XWHCD = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    else
      OM0OM005.XWHCD = " ";
    end
  end


    /* PRODUCT STATUS (line item)*/

  if (OP3REC.OP2LNIST == " ")
    OM0OM005.OP2LNIST = " ";
  else
    if (OP3REC.OP2LNIST in XOSTBL.XOSCD)
      OM0OM005.OP2LNIST = XOSTBL.XOSABRV[sysVar.arrayIndex];
    else
      OM0OM005.OP2LNIST = " ";
    end
  end

    /* Added for Canada --  June 27, 1995*/

  if (OP1REC.XDZ-DATA-DIST-CD == "CA")
    OM0OM005.ZFCCD = OP1REC.ZFC-CRCY-CD;
  end


end // end OM0OS45

// GET SY4REC
Function OM0OS50()


  set SY4REC empty;

  SY4REC.SY4SZSCL = SYCREC.SY4SZSCL;


  call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
      /* next sentence to build the array and screen*/
  else
    TA1REC.TA1DBASE = "DPROD ";
    TA1REC.TA1TBLVU = "VSCALE01";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "IO0040  ";
    TA1REC.TA1LOCAT[3] = "OM0OS50 ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1TBLKE = SY4REC.SY4SZSCL;
    XSOPS02(); /* abort*/
  end


end // end OM0OS50

// INITIALIZE WORK REC SIZE ARRAY
Function OM0OS52()


  OM0OW01.OM0OWSB1 = 1; /* init product array sub*/

  while (OM0OW01.OM0OWSB1 <= 40) /* while le max number of sizes*/
    OM0OW01.SY4IDDSC[OM0OWSB1] = " ";
    OM0OW01.OP3ONOQT[OM0OWSB1] = 0;
    OM0OW01.OP3ALQT[OM0OWSB1] = 0;
    OM0OW01.OP3SHPQT[OM0OWSB1] = 0;
    OM0OW01.OP3WPRQT[OM0OWSB1] = 0;
    OM0OW01.OP3OHRQT[OM0OWSB1] = 0;
    OM0OW01.OM0OMADD[OM0OWSB1] = 0;
    OM0OW01.OP3CNLQT[OM0OWSB1] = 0;
    OM0OW01.OP3ORGQT[OM0OWSB1] = 0;
    OM0OW01.SY5PRCUN[OM0OWSB1] = 0;
    OM0OW01.OP3PRCOF[OM0OWSB1] = " ";
    OM0OW01.OM0OWSB1 = OM0OW01.OM0OWSB1 + 1; /* increment by +1*/
  end


end // end OM0OS52

// BUILD OM0OM005 PRODUCT ARRAY
Function OM0OS55()


  OM0OW01.OM0OWSB1 = 1; /* init size sub*/
  OM0OW01.OM0OWSB2 = 1; /* init working storage size sub*/
  OM0OW01.OM0OWF1M = 1; /* init working storage max page number*/

  while (OM0OW01.OM0OWSB1 <= 40)
                                   /* while less than or equal to max sizes*/
    if (OP3REC.OP3SZAFL[OM0OWSB1] == "Y") /* if size is active*/
      OM0OW01.SY4IDDSC[OM0OWSB2] = SY4REC.SY4IDDSC[OM0OWSB1];
      OM0OW01.OP3ONOQT[OM0OWSB2] = OP3REC.OP3ONOQT[OM0OWSB1];
      OM0OW01.OP3ALQT[OM0OWSB2] = OP3REC.OP3ALQT[OM0OWSB1];
      OM0OW01.OP3SHPQT[OM0OWSB2] = OP3REC.OP3SHPQT[OM0OWSB1];
      OM0OW01.OP3WPRQT[OM0OWSB2] = OP3REC.OP3WPRQT[OM0OWSB1];
      OM0OW01.OP3OHRQT[OM0OWSB2] = OP3REC.OP3OHRQT[OM0OWSB1];
      OM0OS56(); /* determine add amt*/
      if (OM0OW01.OM0OWADD > 0)
        OM0OW01.OM0OMADD[OM0OWSB2] = OM0OW01.OM0OWADD;
      else
        OM0OW01.OM0OMADD[OM0OWSB2] = 0;
      end
      OM0OW01.OP3CNLQT[OM0OWSB2] = OP3REC.OP3CNLQT[OM0OWSB1];
      OM0OW01.OP3ORGQT[OM0OWSB2] = OP3REC.OP3ORGQT[OM0OWSB1];
      OM0OW01.SY5PRCUN[OM0OWSB2] = OP3REC.SY5PRCUN[OM0OWSB1];

      if (OP3REC.OP3PRCOF[OM0OWSB1] == "Y")
        OM0OW01.OP3PRCOF[OM0OWSB2] = "*";
      else
        OM0OW01.OP3PRCOF[OM0OWSB2] = " ";
      end

      OM0OW01.OM0OWSB2 = OM0OW01.OM0OWSB2 + 1;
      if (OM0OW01.OM0OWSB2 > 13 /* more than one page exists*/
       && OM0OW01.OM0OWSB2 <= 26) /* wipro changes TT#6390*/
        OM0OW01.OM0OWF1M = 2;
      else
        if (OM0OW01.OM0OWSB2 > 26) /* more than two pages exists*/
          OM0OW01.OM0OWF1M = 3;
        end
      end
    end
    OM0OW01.OM0OWSB1 = OM0OW01.OM0OWSB1 + 1;
  end


end // end OM0OS55

// DETERMINE TOTAL ADDED
Function OM0OS56()


  OM0OW01.OM0OWADD = 0;

   /* *********************************************************/
    /* total added = tot on ord + tot shipped*/
                /* + tot cancelled - tot org ord*/
   /* *********************************************************/

  OM0OW01.OM0OWADD = OM0OW01.OM0OWADD + OP3REC.OP3ONOQT[OM0OWSB1];
  OM0OW01.OM0OWADD = OM0OW01.OM0OWADD + OP3REC.OP3SHPQT[OM0OWSB1];
  OM0OW01.OM0OWADD = OM0OW01.OM0OWADD + OP3REC.OP3CNLQT[OM0OWSB1];
  OM0OW01.OM0OWADD = OM0OW01.OM0OWADD - OP3REC.OP3ORGQT[OM0OWSB1];


end // end OM0OS56

// DETERMINE TOTAL ADDED
Function OM0OS57()


  OM0OW01.OM0OWADD = 0;

   /* *********************************************************/
   /* total added = tot on ord + tot shipped*/
   /* + tot cancelled - tot org ord*/
   /* *********************************************************/

  OM0OW01.OM0OWADD = OM0OW01.OM0OWADD + OP3REC.OP2TONOQ;
  OM0OW01.OM0OWADD = OM0OW01.OM0OWADD + OP3REC.OP2TSHPQ;
  OM0OW01.OM0OWADD = OM0OW01.OM0OWADD + OP3REC.OP2TCNLQ;
  OM0OW01.OM0OWADD = OM0OW01.OM0OWADD - OP3REC.OP2TORGQ;


  if (OM0OW01.OM0OWADD > 0)
    OM0OM005.OM0OMTAD = OM0OW01.OM0OWADD;
  end


end // end OM0OS57

// BUILD OM0OM005 PRODUCT ARRAY
Function OM0OS60()


  OM0OM005.SY4IDDSC[OM0OWSB1] = OM0OW01.SY4IDDSC[OM0OWSB2];
  OM0OM005.OP3ONOQT[OM0OWSB1] = OM0OW01.OP3ONOQT[OM0OWSB2];
  OM0OM005.OP3ALQT[OM0OWSB1] = OM0OW01.OP3ALQT[OM0OWSB2];
  OM0OM005.OP3SHPQT[OM0OWSB1] = OM0OW01.OP3SHPQT[OM0OWSB2];
  OM0OM005.OP3WPRQT[OM0OWSB1] = OM0OW01.OP3WPRQT[OM0OWSB2];
  OM0OM005.OP3OHRQT[OM0OWSB1] = OM0OW01.OP3OHRQT[OM0OWSB2];
  OM0OM005.OM0OMADD[OM0OWSB1] = OM0OW01.OM0OMADD[OM0OWSB2];
  OM0OM005.OP3CNLQT[OM0OWSB1] = OM0OW01.OP3CNLQT[OM0OWSB2];
  OM0OM005.OP3ORGQT[OM0OWSB1] = OM0OW01.OP3ORGQT[OM0OWSB2];
  OM0OM005.SY5PRCUN[OM0OWSB1] = OM0OW01.SY5PRCUN[OM0OWSB2];
  OM0OM005.OP3PRCOF[OM0OWSB1] = OM0OW01.OP3PRCOF[OM0OWSB2];


end // end OM0OS60

// RESET FIELD ATTRIBUTES
Function OM0OS65()


  OM0OW01.OM0OWSB1 = 1; /* init map sub*/

  while (OM0OW01.OM0OWSB1 <= 13)
    if (OM0OM005.SY4IDDSC[OM0OWSB1] == " ")
      OM0OS67(); /* set map fields autoskip,dark*/
    else
      OM0OS66(); /* set map fields defined*/
    end
    OM0OW01.OM0OWSB1 = OM0OW01.OM0OWSB1 + 1; /* increment by 1*/
  end


end // end OM0OS65

// SET MAP FIELDS DEFINED
Function OM0OS66()


  set OM0OM005.SY4IDDSC[OM0OWSB1] initialAttributes;
  set OM0OM005.OP3ONOQT[OM0OWSB1] initialAttributes;
  set OM0OM005.OP3ALQT[OM0OWSB1] initialAttributes;
  set OM0OM005.OP3SHPQT[OM0OWSB1] initialAttributes;
  set OM0OM005.OP3WPRQT[OM0OWSB1] initialAttributes;
  set OM0OM005.OP3OHRQT[OM0OWSB1] initialAttributes;
  set OM0OM005.OM0OMADD[OM0OWSB1] initialAttributes;
  set OM0OM005.OP3CNLQT[OM0OWSB1] initialAttributes;
  set OM0OM005.OP3ORGQT[OM0OWSB1] initialAttributes;
  set OM0OM005.SY5PRCUN[OM0OWSB1] initialAttributes;
  set OM0OM005.OP3PRCOF[OM0OWSB1] initialAttributes;


end // end OM0OS66

// SET MAP FIELDS AUTOSKIP,DARK
Function OM0OS67()


  set OM0OM005.SY4IDDSC[OM0OWSB1] skip, invisible;
  set OM0OM005.OP3ONOQT[OM0OWSB1] skip, invisible;
  set OM0OM005.OP3ALQT[OM0OWSB1] skip, invisible;
  set OM0OM005.OP3SHPQT[OM0OWSB1] skip, invisible;
  set OM0OM005.OP3WPRQT[OM0OWSB1] skip, invisible;
  set OM0OM005.OP3OHRQT[OM0OWSB1] skip, invisible;
  set OM0OM005.OM0OMADD[OM0OWSB1] skip, invisible;
  set OM0OM005.OP3CNLQT[OM0OWSB1] skip, invisible;
  set OM0OM005.OP3ORGQT[OM0OWSB1] skip, invisible;
  set OM0OM005.SY5PRCUN[OM0OWSB1] skip, invisible;
  set OM0OM005.OP3PRCOF[OM0OWSB1] skip, invisible;


end // end OM0OS67

// EDIT MAP OM0OM005
Function OM0OS70()


  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf2
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf9
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf20
   || converseVar.eventKey is pf21
   || converseVar.eventKey is pf22
   || converseVar.eventKey is pf23
   || converseVar.eventKey is pf24
   || converseVar.eventKey is enter)
     /* next sentence*/
  else
    /* wipro include begin  TT#7194*/
    /* move adds total to map when invalid key pressed*/
    if (OM0OW01.OM0OWADD > 0) /* check adds total gt 0*/
      OM0OM005.OM0OMTAD = OM0OW01.OM0OWADD;
    end
    /* wipro include end    TT#7194*/
    converseLib.validationFailed(001); /* invalid pfkey*/
    OM0OW01.OM0OWERR = "Y"; /* set error flag on*/
    return;
  end

  if (converseVar.eventKey is pf22) /* Transfer to custom logo instructs*/
    if (SYCREC.XPRCD == "22" /* Custom logo product*/
     && OM0OW01.OM0OW-BULK-FL == "N") /* and not a bulk order*/
       /* OK*/
    else
      converseLib.validationFailed(001); /* Invalid PFkey if product not*/
      OM0OW01.OM0OWERR = "Y"; /* custom logo*/
      return;
    end
  end

  if (OSIREC.OSIMODE == "I") /* read only mode*/
    if (converseVar.eventKey is pf2 /* change*/
     || converseVar.eventKey is pf24) /* cancel/reinstate*/
      /* wipro include begin  TT#7194*/
      /* MOVE ADDS TOTAL TO MAP WHEN PF2*/
      if (OM0OW01.OM0OWADD > 0) /* check adds total gt 0*/
        OM0OM005.OM0OMTAD = OM0OW01.OM0OWADD;
      end
      /* wipro include end    TT#7194*/
      converseLib.validationFailed(533); /* night time inquiry - no updates*/
                                   /* allowed*/
      OM0OW01.OM0OWERR = "Y"; /* set error flag on*/
      return;
    end
  end


  if (converseVar.eventKey is pf2
   || converseVar.eventKey is pf20
   || converseVar.eventKey is pf21
   || converseVar.eventKey is pf24)
    OM0OS21(); /* edit change authority*/
  end


  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    OM0OS75(); /* edit for pf7/pf8*/
  end


  if (OM0OW01.OM0OWF1P != OM0OM005.OM0OMF1P) /* current page has changed*/
    OM0OS77(); /* edit current page number*/
  end


  if (converseVar.eventKey is pf23)
    if (OM0OM005.XOMCD == " ")
      converseLib.validationFailed(941);
      OM0OW01.OM0OWERR = "Y";
      return;
    else
      OM0OS-OCD-CMT5(); /* ocd comment pop-up window*/
    end
  end
   /* SPAIN TRADEMARK CHANGES   04/02/2000*/
   /* The following code is modified to validate re-instated*/
   /* products  for Spain Compliance  New statement group*/
   /* is introduced to check non-compliance product for all ship*/
   /* to country  code equal to 'Spain'/CNRY.*/
  if (OM0OW01.OM0OWERR == "N") /* NO ERRORS*/
    if (converseVar.eventKey is pf24)
      if (OP3REC.OP2LNIST == "XL") /* item has a cancelled status*/
        OM0OS-MAP5-XOMCD(); /* edit chg reason*/
        /* spain project * changes * begin *** 04/03/2000 **********/
        set TA1REC empty; /* intialize error display rec*/
        TA1REC.TA1MAP = "OM0OM005"; /* map  name*/
        OM0OS-SPAIN-CHECK(); /* chk if shiped to spain or cnry*/
        /* spain project * changes *  end  *** 04/03/2000 **********/
        if (OM0OW01.OM0OWERR == "N") /* NO ERRORS*/
          OM0OS2B(); /* allow item to be reinstated to 'op'*/
          OM0OS-M5-OZ2090(); /* call oz2090 to update vsoscr01;*/
          OM0OM005.XOMCD = " ";
          OM0OM005.OM0OMREF = " ";
        end
      else
        OM0OS71(); /* edit cancel authority/validate xomcd*/
        if (OM0OW01.OM0OWERR == "N") /* NO ERRORS*/
          OM0OS85();
          if (OM0OW01.OM0OWERR == "N") /* NO ERRORS*/
            OM0OS-M5-OZ2090(); /* call oz2090 to update vsoscr01;*/
            OM0OM005.XOMCD = " ";
            OM0OM005.OM0OMREF = " ";
          end
          set OM0OM005.OM0OMF1P cursor;
        end
      end
    end
  end


end // end OM0OS70

// EDIT FOR CANCEL
Function OM0OS71()


    /* XOMCD OK - DOES LINE ITEM STATUS ALLOW CANCEL ?????*/

  if (OP3REC.OP2LNIST in XOSTBL.XOSCD)
    if (XOSTBL.XOSALWXL[sysVar.arrayIndex] != "N") /* cancel ok*/

    else
      converseLib.validationFailed(373); /* line item status does not allow*/
      OM0OW01.OM0OWERR = "Y"; /* cancel*/
      return;
    end
  end


  if (OM0OM005.XOMCD == " ")
    converseLib.validationFailed(400); /* enter xomcd msg*/
    OM0OM005.OM0OMX0M = "CANCEL RSN:";
    set OM0OM005.XOMCD cursor, normal;
    OM0OM005.OM0OMREL = "WILL ITEM BE REENTERED?:";
    set OM0OM005.OM0OMREF normal;
    OM0OW01.OM0OWERR = "Y"; /* set error to reconverse*/
    return;
  end


     /* EDIT REENTER FLAG FIELD - PF24 CANCEL*/

  if (OM0OM005.OM0OMREF == "Y"
   || OM0OM005.OM0OMREF == "N")
    OMWREC.OPUCRNTR = OM0OM005.OM0OMREF; /* cancel reenter flag*/
  else
    if (OM0OM005.OM0OMREF == " ")
      converseLib.validationFailed(562); /* fld reqrd - must enter y or n*/
      set OM0OM005.OM0OMREF cursor, bold;
      OM0OW01.OM0OWERR = "Y"; /* set error to reconverse*/
    else
      converseLib.validationFailed(563); /* invld char - must be y or n*/
      set OM0OM005.OM0OMREF cursor, bold;
      OM0OW01.OM0OWERR = "Y"; /* set error to reconverse*/
    end
  end


    /* VALIDATE THE XOMCD*/

  OM0OS72(); /* validate cancel reason map01*/


  if (OM0OW01.OM0OWERR == "Y") /* error found*/
    return;
  end


    /* LINE ITEM STATUS OK - CHANGE 'S' TO 'E'*/

  OMWREC.OMWPF2CH = "Y";
  OMWREC.OMWSELCD[OM0OWSUB] = "E";


end // end OM0OS71

// VALIDATE CANCEL REASON CODE
Function OM0OS72()


  if (OM0OM005.XOMCD in XOMTBL.XOMCD /* valid maint reason*/
   && XOMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
    if (XOMTBL.XOMCANCF[sysVar.arrayIndex] == "D" /* decrease*/
     || XOMTBL.XOMCANCF[sysVar.arrayIndex] == "B") /* both - incr/decr*/
      if (XOMTBL.XOMRBKFL[sysVar.arrayIndex] == "Y") /* okay to rebook*/
        if (OP1REC.XOTCD in XOTTBL.XOTCD /* valid order type*/
         && XOTTBL.XOTFUTRF[sysVar.arrayIndex] == "Y") /* futures*/
          if (OP1REC.XBDCD == "0" /* reg order*/
           || OP1REC.XBDCD == "1" /* cust bulk*/
           || OP1REC.XBDCD == "5") /* cust draw*/
            set TA1REC empty;
            TA1REC.TA1LOCAT[2] = "OM0OS72"; /* sgrp*/
            TA1REC.TA1MAP = "OM0OM005"; /* map name*/

            OM0OS24(); /* validate agcy/customer*/

            if (OM0OW01.OM0OWERR == "Y") /* error found*/
              set OM0OM005.XOMCD cursor, modified, bold;
              return; /* go redisplay map*/
            else /* xomcd okay for rebooking*/

              /* 8/6/91 no longer checking 45 day cancel window for*/
                  /* rebook.  leave this code in place until the dust*/
                  /* settles - when removing this commented out code*/
                  /* also deinstall om0s25.*/
               /* OM0OS25             ; check rebook 45 day cancel window*/
               /* IF OM0OW01.OM0OWERR EQ 'Y' ; error found*/
                 /* SET OM0OM005.XOMCD CURSOR,MODIFIED,BRIGHT;*/
                 /* EZERTN            ; go redisplay map*/
               /* ELSE                ; xomcd okay for rebooking*/
              OMWREC.XOMCD = OM0OM005.XOMCD;
            end
            /* END ;*/
          else
            converseLib.validationFailed(398); /* must be reg or cust bulk/draw*/
            set OM0OM005.XOMCD cursor, modified, bold;
            OM0OW01.OM0OWERR = "Y"; /* set error on*/
            return;
          end
        else
          converseLib.validationFailed(396); /* can not rebook non-futures*/
          set OM0OM005.XOMCD cursor, modified, bold;
          OM0OW01.OM0OWERR = "Y"; /* set error on*/
          return;
        end
      else /* xomcd is valid for cancel*/
        OMWREC.XOMCD = OM0OM005.XOMCD;
      end
    else
      converseLib.validationFailed(334); /* reason does not allow qty reductions*/
      OM0OW01.OM0OWERR = "Y"; /* set error on*/
      set OM0OM005.XOMCD cursor, modified, bold;
      OM0OW01.OM0OWERR = "Y"; /* set error on*/
      return;
    end
  else
    converseLib.validationFailed(372); /* invalid cancel reason*/
    set OM0OM005.XOMCD cursor, modified, bold;
    OM0OW01.OM0OWERR = "Y"; /* set error on*/
    return;
  end


end // end OM0OS72

// EDIT PF7 AND PF8
Function OM0OS75()

    /* PF7 EDIT*/

  if (converseVar.eventKey is pf7
   && OM0OM005.OM0OMF1P == 1) /* page 1*/
    converseLib.validationFailed(192); /* cannot scroll backward*/
    OM0OW01.OM0OWERR = "Y"; /* set error flag*/
  end


    /* PF8 EDIT*/

  if (converseVar.eventKey is pf8
   && OM0OM005.OM0OMF1P == OM0OM005.OM0OMF1M) /* current page = last page*/
    converseLib.validationFailed(191); /* cannot scroll forward*/
    OM0OW01.OM0OWERR = "Y"; /* set error flag*/
  end


    /* CHECK FOR PAGE # CHANGING WHEN PF7 OR PF8*/

  if (OM0OM005.OM0OMF1P != OM0OW01.OM0OWF1P) /* current page has changed*/
    converseLib.validationFailed(597); /* cannot chg page # and pf7/pf8 at same*/
                                   /* time*/
    OM0OW01.OM0OWERR = "Y"; /* set error flag*/
    set OM0OM005.OM0OMF1P cursor, bold;
    OM0OM005.OM0OMF1P = OM0OW01.OM0OWF1P; /* reset page number*/
  end

    /* wipro include begin  TT#7194*/

    /* MOVE ADDS TOTAL TO MAP WHEN PF7 OR PF8*/

  if (OM0OW01.OM0OWADD > 0) /* check adds total gt 0*/
    OM0OM005.OM0OMTAD = OM0OW01.OM0OWADD; /* adds total to map*/
  end

    /* wipro include end    TT#7194*/

end // end OM0OS75

// EDIT PAGE NUMBER
Function OM0OS77()

    /* DETERMINE IF CURRENT PAGE NUMBER IS WITHIN RANGE*/

  if (OM0OM005.OM0OMF1P > OM0OM005.OM0OMF1M /* page # > max page #*/
   || OM0OM005.OM0OMF1P < 1)                /* or less than 1*/
    converseLib.validationFailed(603); /* page number must be between 1 and last page #*/
    OM0OW01.OM0OWERR = "Y"; /* set error flag*/
    set OM0OM005.OM0OMF1P cursor, bold;
    OM0OM005.OM0OMF1P = OM0OW01.OM0OWF1P; /* reset page number*/
    return;
  end


end // end OM0OS77

// CONVERSE UPDATE FOR OM0OM005
Function OM0OS80()


  if (converseVar.eventKey is pf7) /* page backward*/
    OM0OW01.OM0OWSB1 = 1; /* init map subscript*/
    if (OM0OM005.OM0OMF1P == 2) /* page 1*/
      OM0OW01.OM0OWSB2 = 1; /* init work rec subscript*/
      OM0OW01.OM0OWF1P = 1; /* format ws page number*/
    else
      if (OM0OM005.OM0OMF1P == 3) /* page 2*/
        OM0OW01.OM0OWSB2 = 14; /* init work rec subscript*/
        OM0OW01.OM0OWF1P = 2; /* format ws page number*/
      else
        OM0OW01.OM0OWSB2 = 1; /* init work rec subscript*/
        OM0OW01.OM0OWF1P = 1; /* format ws page number*/
      end
    end
    while (OM0OW01.OM0OWSB1 <= 13)
      OM0OS60(); /* move fields to map*/
      OM0OW01.OM0OWSB1 = OM0OW01.OM0OWSB1 + 1;
      OM0OW01.OM0OWSB2 = OM0OW01.OM0OWSB2 + 1;
    end
    OM0OM005.OM0OMF1P = OM0OW01.OM0OWF1P; /* format map page*/
    OM0OS65(); /* reset field attributes*/
  end


  if (converseVar.eventKey is pf8) /* page forward*/
    OM0OW01.OM0OWSB1 = 1; /* set map subscript*/
    if (OM0OM005.OM0OMF1P == 1) /* page 1*/
      OM0OW01.OM0OWSB2 = 14; /* init work rec subscript*/
      OM0OW01.OM0OWF1P = 2; /* format ws page number*/
    else
      if (OM0OM005.OM0OMF1P == 2) /* page 2*/
        OM0OW01.OM0OWSB2 = 27; /* init work rec subscript*/
        OM0OW01.OM0OWF1P = 3; /* format ws page number*/
      else
        OM0OW01.OM0OWSB2 = 1; /* init work rec subscript*/
        OM0OW01.OM0OWF1P = 1; /* format ws page number*/
      end
    end
    while (OM0OW01.OM0OWSB1 <= 13)
      OM0OS60(); /* move fields to map*/
      OM0OW01.OM0OWSB1 = OM0OW01.OM0OWSB1 + 1;
      OM0OW01.OM0OWSB2 = OM0OW01.OM0OWSB2 + 1;
    end
    OM0OM005.OM0OMF1P = OM0OW01.OM0OWF1P; /* format map page*/
    OM0OS65(); /* reset field attributes*/
  end


end // end OM0OS80

// CANCEL PRODUCT (OM0R)
Function OM0OS85()

    /* if cancelling a product from an International Airborne order*/
    /* with an order class of 'TR' (order has already been transmitted*/
    /* to Airborne) update the order class to 'AU' so the order will*/
    /* be retransmitted tonight.*/

  converseLib.validationFailed(000);

  if (OP1REC.XDVCD == "02"
   && OP1REC.XOCCD == "TR")
    OP1REC.XOCCD = "AU";
    OM0OS-UPDT-ORD-HDR();
    converseLib.validationFailed(806); /* ord cls has been chgd to 'au'*/
    OM0OW01.OM0OWERR = "Y";
  end


    /* TRANSFER TO OM0R TO CANCEL*/

  OMWREC.OP1GROUP = OP1REC.OP1GROUP;

  set OMEREC empty; /* initialize omerec return code*/

  call "OM0R" (OMWREC, OMEREC) {isNoRefresh = yes};

  if (OMEREC.OME-RETURN-CD != "00") /* check om0r return code*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSPF4(); /* master menu*/
    exit program; /* master menu failure*/
  end

  OMWREC.OMWPKCHF = "Y"; /* pack change flag*/

  OP1REC.OP1GROUP = OMWREC.OP1GROUP;

  OMWREC.OMWPF2CH = "N"; /* set temp change flag to 'no'*/

  COMMAREA.CAFROMAP = "OM0O";


  OM0OM005.OM0OMX0M = " ";
  set OM0OM005.XOMCD skip, invisible;
  OM0OM005.OM0OMREL = " ";
  set OM0OM005.OM0OMREF skip, invisible;


  if (OMWREC.OMWSELCD[OM0OWSUB] == "E")
    OM0OM005.VAGen_EZEMSG = "WARNING -- PRODUCT(S) NOT CANCELLED";
  else
    if (OMWREC.OMWSELCD[OM0OWSUB] == "X")
      OM0OM005.OP2LNIST = "CANCEL";
      if (converseVar.validationMsgNum == 806)
       /* next sentence*/
      else
        OM0OM005.VAGen_EZEMSG = "SELECTED PRODUCT WAS CANCELLED";
      end
    end
  end


end // end OM0OS85

// CLEAR REMAINING SELECT CODES
Function OM0OS90()


    /* CLEAR THE REMAINING OMWREC SELECT CODE AND LINE ITEM NBR*/
    /* FROM THE OMWREC 900 PRODUCT ARRAY.  THIS IS DONE BECAUSE*/
    /* OMWREC IS PASSED ONTO OTHER APPLICATIONS.*/

  OM0OW01.OM0OWSUB = OM0OW01.OM0OWSUB + 1; /* increment to next line item*/

  while (OM0OW01.OM0OWSUB <= 900 /* while less than max prods for omwrec*/
   && OMWREC.OP2LNINB > 0) /* and more products exist*/
    OMWREC.OMWSELCD[OM0OWSUB] = " "; /* init remaining select codes*/
    OMWREC.OP2LNINB[OM0OWSUB] = 0; /* init remaining line item #'s*/
    OM0OW01.OM0OWSUB = OM0OW01.OM0OWSUB + 1;
  end


end // end OM0OS90

// EDIT PFKEYS
Function OM0OST1()


      /* PF KEY TRANSFER*/

  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf2
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf9
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf20
   || converseVar.eventKey is pf22
   || converseVar.eventKey is pf24
   || converseVar.eventKey is enter)
     /* valid pfkeys for possible transfer*/
  else
    return;
  end


  if (converseVar.eventKey is pf1)
    COMMAREA.CA-USER-WORKAREA = OMWREC.OMWSGRP;
    COMMAREA.CACURRAP = "OM0G";
    transfer to program "OM0G" passing COMMAREA;
  end


  if (converseVar.eventKey is pf2
   && OM0OW01.OM0OWERR == "N") /* and no errors*/
    OMWREC.OMWPF2CH = "Y";
    OMWREC.OMWSELCD[OM0OWSUB] = "S";
    OMWREC.OP1GROUP = OP1REC.OP1GROUP;
    COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
    COMMAREA.CACURRAP = "OM0P";
    transfer to program "OM0P" passing COMMAREA;
  end



  if (converseVar.eventKey is pf3)
    OMWREC.OP1GROUP = OP1REC.OP1GROUP;
    COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
    if (OMWREC.OMWPKCHF == "Y") /* pack change flag*/
      OM0OS02(); /* check for prepack*/
      if (OM0OW01.OM0OWERR == "Y")
        return;
      end
      if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
        COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
        COMMAREA.CAMSG = "ORDER MAINTAINED - VERIFY PREPACKS";
        COMMAREA.CACURRAP = "OS0G";
        transfer to program "OS0G" passing COMMAREA;
      else
        COMMAREA.CACURRAP = "OM0M";
        transfer to program "OM0M" passing COMMAREA;
      end
    else
      COMMAREA.CACURRAP = "OM0M";
      transfer to program "OM0M" passing COMMAREA;
    end
  end



  if (converseVar.eventKey is pf4) /* check for master menu level*/
    OMWREC.OP1GROUP = OP1REC.OP1GROUP;
    COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
    if (OMWREC.OMWPKCHF == "Y") /* pack change flag*/
      OM0OS02(); /* check for prepack*/
      if (OM0OW01.OM0OWERR == "Y")
        return;
      end
      if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
        COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
        COMMAREA.CAMSG = "ORDER MAINTAINED - VERIFY PREPACKS";
        COMMAREA.CACURRAP = "OS0G";
        transfer to program "OS0G" passing COMMAREA;
      else
        XSPF4(); /* invoke master menu request*/
        OM0OM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
        COMMAREA.CATOAP = " "; /* clear app*/
        exit stack;
      end
    else
      XSPF4(); /* invoke master menu request*/
      OM0OM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
      COMMAREA.CATOAP = " "; /* clear app*/
      exit stack;
    end
  end



  if (converseVar.eventKey is pf9)
    OM0OS90(); /* clear remaining omwrec select codes*/
    OMWREC.OP1GROUP = OP1REC.OP1GROUP;
    COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
    COMMAREA.CACURRAP = "OM0S";
    transfer to program "OM0S" passing COMMAREA;
  end



  if (converseVar.eventKey is pf13)
    OM0OS90(); /* clear remaining omwrec select codes*/
    OMWREC.OMWEOF = "Y";
    OMWREC.OP1GROUP = OP1REC.OP1GROUP;
    COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
    COMMAREA.CACURRAP = "OM0H";
    transfer to program "OM0H" passing COMMAREA;
  end



  if (converseVar.eventKey is pf18)
    OM0OS90(); /* clear remaining omwrec select codes*/
    OMWREC.OP1GROUP = OP1REC.OP1GROUP;
    COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
    COMMAREA.CACURRAP = "OM0C";
    transfer to program "OM0C" passing COMMAREA;
  end



  if (converseVar.eventKey is pf20
   && OM0OW01.OM0OWERR == "N") /* and no errors*/
    OM0OS90(); /* clear remaining omwrec select codes*/
    OMWREC.OMWEOF = "Y";
    OMWREC.OP1GROUP = OP1REC.OP1GROUP;
    COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
    COMMAREA.CACURRAP = "OM0A";
    transfer to program "OM0A" passing COMMAREA;
  end

  if (converseVar.eventKey is pf22
   && OM0OW01.OM0OWERR == "N") /* and no errors*/
    OM0OS90(); /**/
                                   /* clear remaining omwrec select codes*/
    OM0OS-XFR-AE09(); /* Transfer to cust logo instructions*/
  end


end // end OM0OST1

// DETERMINE TRANSFER 4 OM0OM005
Function OM0OST2()


      /* PF KEY TRANSFER*/

  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf2
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf9
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf20
   || converseVar.eventKey is pf21
   || converseVar.eventKey is pf22
   || converseVar.eventKey is enter)
     /* valid pfkeys for possible transfer*/
  else
    return;
  end




  if (converseVar.eventKey is pf1)
    OMWREC.OMWSELCD[OM0OWSUB] = "S";
    OMWREC.OP1GROUP = OP1REC.OP1GROUP;
    COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
    COMMAREA.CACURRAP = "OM0G";
    transfer to program "OM0G" passing COMMAREA;
  end



  if (converseVar.eventKey is pf2
   && OM0OW01.OM0OWERR == "N") /* and no errors*/
    OMWREC.OMWSELCD[OM0OWSUB] = "S";
    OMWREC.OMWPF2CH = "Y";
    OMWREC.OP1GROUP = OP1REC.OP1GROUP;
    COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
    COMMAREA.CACURRAP = "OM0Q";
    transfer to program "OM0Q" passing COMMAREA;
  end



  if (converseVar.eventKey is pf3)
    OMWREC.OP1GROUP = OP1REC.OP1GROUP;
    COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
    if (OMWREC.OMWPKCHF == "Y") /* pack change flag*/
      OM0OS02(); /* check for prepack*/
      if (OM0OW01.OM0OWERR == "Y")
        return;
      end
      if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
        COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
        COMMAREA.CAMSG = "ORDER MAINTAINED - VERIFY PREPACKS";
        COMMAREA.CACURRAP = "OS0G";
        transfer to program "OS0G" passing COMMAREA;
      else
        COMMAREA.CACURRAP = "OM0M";
        transfer to program "OM0M" passing COMMAREA;
      end
    else
      COMMAREA.CACURRAP = "OM0M";
      transfer to program "OM0M" passing COMMAREA;
    end
  end



  if (converseVar.eventKey is pf4) /* check for master menu level*/
    OMWREC.OP1GROUP = OP1REC.OP1GROUP;
    COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
    if (OMWREC.OMWPKCHF == "Y") /* pack change flag*/
      OM0OS02(); /* check for prepack*/
      if (OM0OW01.OM0OWERR == "Y")
        return;
      end
      if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
        COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
        COMMAREA.CAMSG = "ORDER MAINTAINED -  VERIFY PREPACKS";
        COMMAREA.CACURRAP = "OS0G";
        transfer to program "OS0G" passing COMMAREA;
      else
        XSPF4(); /* invoke master menu request*/
        OM0OM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
        COMMAREA.CATOAP = " "; /* clear app*/
        exit stack;
      end
    else
      XSPF4(); /* invoke master menu request*/
      OM0OM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
      COMMAREA.CATOAP = " "; /* clear app*/
      exit stack;
    end
  end


  if (converseVar.eventKey is pf9)
    OM0OS90(); /* clear remaining omwrec select codes*/
    OMWREC.OP1GROUP = OP1REC.OP1GROUP;
    COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
    COMMAREA.CACURRAP = "OM0S";
    transfer to program "OM0S" passing COMMAREA;
  end



  if (converseVar.eventKey is pf13)
    OM0OS90(); /* clear remaining omwrec select codes*/
    OMWREC.OMWEOF = "Y";
    OMWREC.OP1GROUP = OP1REC.OP1GROUP;
    COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
    COMMAREA.CACURRAP = "OM0H";
    transfer to program "OM0H" passing COMMAREA;
  end



  if (converseVar.eventKey is pf20
   && OM0OW01.OM0OWERR == "N") /* and no errors*/
    OM0OS90(); /* clear remaining omwrec select codes*/
    OMWREC.OMWEOF = "Y";
    OMWREC.OP1GROUP = OP1REC.OP1GROUP;
    COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
    COMMAREA.CACURRAP = "OM0A";
    transfer to program "OM0A" passing COMMAREA;
  end

   /* 08/28/91 JLoyer Bug#685: check om0owerr = 'n' before allowing*/
                            /* transfer to om0q.  This was allowing*/
                            /* updates to rebook bulks in om0q.*/

  if (converseVar.eventKey is pf21
   && OM0OW01.OM0OWERR == "N") /* and no errors*/
    OMWREC.OMWSELCD[OM0OWSUB] = "S";
    OM0OS90(); /* clear remaining omwrec select codes*/
    OMWREC.OMWEOF = "Y";
    OMWREC.OMWPF21 = "Y";
    OMWREC.OP1GROUP = OP1REC.OP1GROUP;
    COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
    COMMAREA.CACURRAP = "OM0Q";
    transfer to program "OM0Q" passing COMMAREA;
  end

   /* Transfer to custom logo cresting instruction screen*/

  if (converseVar.eventKey is pf22
   && OM0OW01.OM0OWERR == "N") /* and no errors*/
    OM0OS90(); /**/
                                   /* clear remaining omwrec select codes*/
    OM0OS-XFR-AE09(); /* Setup transfer*/
  end

end // end OM0OST2

//*** RECORD=OM0OW01 ****
// order entry working storage.
// this area is the working storage unique to
// application 0m0o for product inquiry by order number.
// ***********************
Record OM0OW01 type basicRecord
  5 OM0OWGRP OM0OWGRP ; 
    10 OM0OWERR OM0OWERR ; 
    10 OM0OWEOF OM0OWEOF ; 
    10 OM0OWADD OM0OWADD ; 
    10 * char(1) ; 
    10 OM0OW-OP-BK-CCCYY OM0OW-OP-BK-CCCYY ; 
      15 OM0OW-OP-BK-CCC OM0OW-OP-BK-CCC ; 
      15 OM0OW-OP-BK-YY OM0OW-OP-BK-YY ; 
    10 OM0OW-OP-BK-MM OM0OW-OP-BK-MM ; 
    10 * char(1) ; 
    10 OM0OWDT OM0OWDT ; 
      15 OM0OWD1 OM0OWD1 ; 
      15 OM0OWD2 OM0OWD2 ; 
        20 OM0OWYY OM0OWYY ; 
        20 OM0OWMM OM0OWMM ; 
        20 OM0OWDD OM0OWDD ; 
    10 OM0OWDT2 OM0OWDT2 ; 
      15 OM0OWDM OM0OWDM ; 
      15 OM0OWC1 OM0OWC1 ; 
      15 OM0OWDA OM0OWDA ; 
      15 OM0OWC2 OM0OWC2 ; 
      15 OM0OWDY OM0OWDY ; 
    10 OM0OWPAR OM0OWPAR [40] ; 
      15 SY4IDDSC SY4IDDSC ; 
      15 OP3ONOQT OP3ONOQT ; 
      15 OP3ALQT OP3ALQT ; 
      15 OP3SHPQT OP3SHPQT ; 
      15 OP3OHRQT OP3OHRQT ; 
      15 OP3WPRQT OP3WPRQT ; 
      15 OM0OMADD OM0OMADD ; 
      15 OP3CNLQT OP3CNLQT ; 
      15 OP3ORGQT OP3ORGQT ; 
      15 SY5PRCUN SY5PRCUN ; 
      15 OP3PRCOF OP3PRCOF ; 
    10 OM0OWCID OM0OWCID ; 
      15 OM0OWKUC OM0OWKUC ; 
      15 OM0OWF2 OM0OWF2 ; 
      15 OM0OWKUM OM0OWKUM ; 
      15 OM0OWF3 OM0OWF3 ; 
      15 OM0OWNX OM0OWNX ; 
    10 OM0OWSID OM0OWSID ; 
      15 SY1STNBR SY1STNBR ; 
      15 OM0OWF4 OM0OWF4 ; 
      15 SY2CLRID SY2CLRID ; 
      15 OM0OWF5 OM0OWF5 ; 
      15 XDMCD XDMCD ; 
    10 OM0OWSUB OM0OWSUB ; 
    10 OM0OWSB1 OM0OWSB1 ; 
    10 OM0OWSB2 OM0OWSB2 ; 
    10 OM0OWPD1 OM0OWPD1 ; 
    10 OM0OWPDT OM0OWPDT ; 
    10 XMTCD XMTCD ; 
    10 XOMCD XOMCD ; 
    10 XOWCD XOWCD ; 
    10 XWHCD XWHCD ; 
    10 OM0OWOWK OM0OWOWK ; 
    10 OP2HCHGO OP2HCHGO ; 
    10 XHDUCHFL XHDUCHFL ; 
    10 OM0OMHTP OM0OMHTP ; 
    10 OM0OMMTC OM0OMMTC ; 
    10 OM0OWT1 OM0OWT1 ; 
      15 OM0OWT2 OM0OWT2 ; 
      15 OM0OWT3 OM0OWT3 ; 
      15 OM0OWT4 OM0OWT4 ; 
    10 OM0OWTK OM0OWTK ; 
      15 OM0OWTK1 OM0OWTK1 ; 
      15 OM0OWTK2 OM0OWTK2 ; 
    10 OM0OWTK3 OM0OWTK3 ; 
      15 OM0OWTK4 OM0OWTK4 ; 
      15 OM0OWTK5 OM0OWTK5 ; 
    10 OM0OWF1P OM0OWF1P ; 
    10 OM0OWF1M OM0OWF1M ; 
    10 OM0OWMSG OM0OWMSG ; 
      15 OM0OWMS1 OM0OWMS1 ; 
      15 OM0OWMS2 OM0OWMS2 ; 
    10 XHDKEY XHDKEY ; 
      15 XHDCD XHDCD ; 
      15 XGPCD XGPCD ; 
    10 OM0OW-BULK-FL OM0OW-BULK-FL ; 
    10 OM0OW-WSY2000-POST-1 OM0OW-WSY2000-POST-1 ; 
      15 OM0OW-WSY2000-GPC-CD OM0OW-WSY2000-GPC-CD ; 
      15 OM0OW-WSY2000-STY-NBR OM0OW-WSY2000-STY-NBR ; 
      15 OM0OW-WSY2000-COLR-CD OM0OW-WSY2000-COLR-CD ; 
      15 OM0OW-WSY2000-DIM-CD OM0OW-WSY2000-DIM-CD ; 
      15 OM0OW-WSY2000-PROD-REG-CD OM0OW-WSY2000-PROD-REG-CD ; 
      15 OM0OW-WSY2000-RETURN-CD OM0OW-WSY2000-RETURN-CD ; 
    10 OM0OW-OCDCMT-FL OM0OW-OCDCMT-FL ; 
end // end OM0OW01

DataItem OM0OMADD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-hndl-chg-ovrd
DataItem OM0OMHTP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order maint code
DataItem OM0OMMTC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bulk order flag
DataItem OM0OW-BULK-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bulk order flag
DataItem OM0OW-OCDCMT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season century
DataItem OM0OW-OP-BK-CCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season year (full)
DataItem OM0OW-OP-BK-CCCYY num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op booking month
DataItem OM0OW-OP-BK-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season year
DataItem OM0OW-OP-BK-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0OW-WSY2000-COLR-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0OW-WSY2000-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0OW-WSY2000-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0OW-WSY2000-POST-1 char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0OW-WSY2000-PROD-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0OW-WSY2000-RETURN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0OW-WSY2000-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// added qty for detail
DataItem OM0OWADD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//    "      '-'
DataItem OM0OWC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//    "      '-'
DataItem OM0OWC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// merged cust/store id
DataItem OM0OWCID char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws date century
DataItem OM0OWD1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws date yymmdd
DataItem OM0OWD2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//    "      day
DataItem OM0OWDA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws date dd
DataItem OM0OWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//    "      month
DataItem OM0OWDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws date
DataItem OM0OWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted date
DataItem OM0OWDT2 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//    "      year
DataItem OM0OWDY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// omwrec eof flag
DataItem OM0OWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem OM0OWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max page number
DataItem OM0OWF1M num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current page number
DataItem OM0OWF1P num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// filler is '.'
DataItem OM0OWF2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler is '.'
DataItem OM0OWF3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler is '-'
DataItem OM0OWF4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler is '-'
DataItem OM0OWF5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// o/e group ws
DataItem OM0OWGRP char(2087)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company id
DataItem OM0OWKUC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// store id
DataItem OM0OWKUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ws date mm
DataItem OM0OWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// msg field for om0pm001
DataItem OM0OWMS1 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// msg field for om0pm001
DataItem OM0OWMS2 char(39)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// msg field for om0pm001
DataItem OM0OWMSG char(79)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nike dept code
DataItem OM0OWNX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// owner group table key
DataItem OM0OWOWK char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0OWPAR char(46)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ccyymmdd format
DataItem OM0OWPD1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yymmdd pc3poidt
DataItem OM0OWPDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// general subscript
DataItem OM0OWSB1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// general subscript 2
DataItem OM0OWSB2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// merged style id
DataItem OM0OWSID char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// omwrec subscript
DataItem OM0OWSUB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// errdiag table key info
DataItem OM0OWT1 char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0OWT2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0OWT3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0OWT4 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// diags
DataItem OM0OWTK char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diags
DataItem OM0OWTK1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diags
DataItem OM0OWTK2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag key
DataItem OM0OWTK3 char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diags
DataItem OM0OWTK4 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// diags
DataItem OM0OWTK5 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws date yy
DataItem OM0OWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

