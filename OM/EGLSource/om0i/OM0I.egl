package om0i;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import ku.common.*;
import ob.common.*;
import oi.common.*;
import om.common.*;
import op.common.*;
import os.common.*;
import pc.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=OM0I ****
// nike order maintenance - order header 2
// 
// 
// overview: this application updates fields on the order
//           header.
// 
// 
// date created: 07/12/86
//       author: Dave Brockway
// 
// maintenance history:
// 
//     date     by whom     overview of changes made
//   --------  ----------  ------------------------------------
//   01-15-87     das      allow split comm. if sales office 09
// 
//   02-17-87     lcr      allow ' ' for xpkcd and xppcd
//                         changed om0is39 and om0is40
//   02/18/87     jdv      changed to reuqire and use ovrd auth
//                         correctly for inv as of dt field.
//   03/10/87     sms      changed omoim001.op1ecanm to askip,
//                         dark when change mode is entered via
//                         pf2 and the "don't ship after date"
//                         is overridden.  change was made in
//                         om0is04.
//   03/10/87     sms      changed omoim001 so that the
//                         handling codes are not protected
//                         when omoi is entered in change mode
//                         and none of the products have
//                         handling codes.  change was made in
//                         omois18.
//   03/10/87     sms      made program update change date and
//                         time when updating items with new
//                         handling codes.  change was made in
//                         om0is29.
//   03/36/87     jvande   changed s10, added sir to handle
//                         multiple inactive agency/rep rows.
//   06/20/87     sjob     added carrier code (tf1carcd) to
//                         map.
//   07/15/87     t fox    added new stmt grp om01s2a to create
//                         a rec to be fed to picking system
//                         when chgs are made to an order that
//                         will affect the picking system.
//   09/30/87     tfox     turned on pick calls. hrd cd on whs
//                         that are on the new system.
//   11/02/87     tfox     added pa1,pa2,pa3 handling to flow
//                         of converse. move 'om0i' to cafromap
//                         added application name move to
//                         cacurrap in the flow of converse
//   11/25/87    jvande    hooked up whs 02 for picking.
//   12/04/87    jvande    hooked up whs 07 for picking.
//   01/06/88    tfox      hooked up whs 3,9,12 for picking.
//   02/25/88    gwells    set error flag to '0' before percent
//                         edits begin.  check flag before each
//                         edit - s30.
//   04/15/88    tfox      added code to s39, s32, s40 to set
//                         pick flag when hdlcd pkpriority or
//                         pkcd or carrier changed so pick rec
//                         could be written.
//   10/22/88    tfox      chg code in s21 to prevent maintenan
//                         ce of rebook bulk orders.
//   11/09/88    obecke    log #75. display warning msg if both
//                         a rush pick prty & don't ship b4
//                         dt on same order. 001,005,s88,w01.
//   12/05/88    obecke    #75. add logic to not display warn.
//                         msg 435 if don't ship b4 = today.
//                         s88.
//   12/05/88    obecke    #98: allow coop dept mgr to maint.
//                         coop% field.  s89,s04,m001,s44.
//   02/20/89    jwood     added noncsp option to calls
//   03/03/89    obecke    do not allow picking code of 40 for
//                         orders that are not for warehouse 32
//                         #159.  s39.
//   05/11/89    jbecke    remove op1sshpo and op1smscf from
//                         the map.  move spaces to op1rec.
//                         op1sshpo and op1rec.op1smscf.
//   8-16-89     obecke    tiered terms project.  m001,ssc,st1,
//                         st2,sz1,s03,s04,s05,s22,s26,s30,w01.
//   8-30-89     obecke    st2,s26,s30,w01.  update op1rec.
//                         sp3dpct when tier level changes.
//   9-18-89     oricha    s04,s03,m001,s49.  nil terms.
//  11-14-89     skott     s15,s03,st1,st2,s04,s30,s22,s05,s26
//                         om0im001.  db changes
//  12-07-89     dwalke    eliminate changing terms,discounts
//                         and prices on salesman orders.
//                         stgrps s04, added s71 - bug 270
//  02-06-90     ischmi    added 'retn' function & record key
//                         to error diags om0is2b - bug 292
//  03-12-90     ischmi    when order on a sales pgm, display
//                         tier level even if only 1 tier.
//                         s03,s04,st1,map.  bug #301
//  04-04-90     cgrice    db changes - renamed op1blkcd to
//                         xbdcd, and sp3dpct to spgmdisc.
//                         s20, s21, s26
//  10-04-90     dviert    removed op9rec from record list -
//                         tag logic no longer necessary
//  12-13-90     dflesh    added logic to s39 for whse '51' &
//                         deleted comments in s04.  Log #469.
//  04-04-91     dflesh    added code to s04 - allow nil spgm
//                         'nila' orders to override terms.
//                         log #483.
//  04/17/91     tfox      menu services map,s03,s04,s05,s15,
//                         s2a,s22,s25,s29,s3a,s30,s31,w01
//  05/24/91     gwells    Menu of Services - edit pack code
//                         status with 'a' not 'y'
//  05/30/91     tfox      menu of services s00,s20,s3a,s30
//                         w01,005.
//  06/11/91     tfox      june db chgs. remove all split comm
//                         ission logic s03,s04,s05,s09,s21,
//                         s22,s25,s30,s34. deleted these stmt
//                         grps s11,s12,s09,s14,s10,s34,s41,s42
//                         s33,s35,s36.
//  08/16/91     JLoyer    Log #675 - don't allow xpacd change
//                         if the order is allocated. OM0IS3A.
// 10/09/91      craine    db changes added xgpcd to xhdtbl for
//                         key. s29, s31, w01
// 10/31/91      craine    allow orders with allocation sales
//                         programs to have terms overriden.
//                         chg in om0is04
// 12/02/91      jhecke    695 - Prepack of footwear. s00
// 03/11/92      bbake2    database changes:
//                         - om0bw02 for new layout of op1rec
//                         - map, s03, s04, s22, s30, to remove
//                           op1dsdcf and op1rplor (removed
//                           from op1rec)
// 04/14/92      bbake2   removed sm5rec (unused) from tables
//                        and addtional records list
// 06/01/92      jhecke   expanded the key area for abends in
//                        s27.  log #836.
// 03/03/93      dcaust   Log #947 If div '02', and YOSTBL pay-
//                        ment term ovrrd fl = 'y', ok to chg
//                        payment terms code. s49.
// 05/01/93      dlegg    Log #937. NSG changes. Allow pick
//                        code 40 for whse 25. s39.
// 12/17/93      craine   log#971 - add edit to S3A to prevent
//                        entry of 'MS' pack code and to edit
//                        pack code against direct ship code.
// 02/28/94      scantr   db changes: resize om0iw02
// 04/28/94      jather   log #1003. renamed causera to
//                        ca-user-workarea-4k so it can hold
//                        opwrec which has been changed to
//                        3072 bytes(all)
// 06/21/95      pstroe   Canada.  Added edit to pick code
//                        for Canadain warehouse '42'.  Added
//                        edit to the "Ship with Order Nbr'
//                        logic.  Added currency code edit
//                        to handling code charges edit
//                        logic.
//                        Statement Groups S31, S38, and S39
// 09/11/95      CRAINE   Add po money month to map for Kinney
//                        accts. Uses op1wipin for money month
// 11/12/96      SLARSE   Default Traffic Alert to 'Y' for
//                        Same Day and Rush orders (non-Canada,
//                        and apparel only.)
// 06/05/97      wleong   changed to allow pack code changes
//                        and removal.  update prepack if pack
//                        code is changed. delete prepack if
//                        pack code is removed.
// 08/27/97      jnaemu   added changes for whse 27
// 09/08/97      wleong   regen for yostbl structure change
// 10/29/97      MBURLE   Y2KFIX: added century windowing to
//                        OM0I001.
// 08/27/98      udafon   #178 Increased size of OMWREC to 3505
//                        bytes. Re-compiled application.
// 05/20/98 jcarey  *** For warehouse 51 only ***
//                  Check status of order on the Mirror Pool
//                  Order Header before accepting a change.
//                  If status is allocated, accept changes to:
//                  Carrier code, Handling codes, Expedite flag
//                  Pick Priority.
//                  If status is selected, released, pack&held
//                  or shipped no change is allowed.
// 10/02/98 svargh  added new statement groups om0is-check-upd
//                  and om0is-updte-vbulk.Made changes to
//                  OM0Is27 so that the bulk quantities are
//                  updated in the vbulks02 table when the
//                  header table is updated.
// 07/08/99 OENFIE  <<< Multiple GPC Project changes:>>>
//                  Changed OM0IS40 to include GPC '02' &WHSE
//                  '51' condition in setting of the Traffic
//                  Alert Flag to 'Y'.  This is to handle
//                  Equipment products which is GPC '02' coming
//                  out of WHSE '51'.
// 12/01/00 Rshaik  Picking code 20 is not valid for any XWH 07
// TT#9179          Order.An error message will be generated in
//                  the above condition for any warehouse 07
//                  order. Please look for changes in OM0IS39.
// 01/18/01 Rshaik  WEP1301 record structure has been changed
// TT#9997          Pl refer WEP1301 prologue.
// *********************
Program OM0I type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  KUMREC KUMREC; // record
  OBFREC OBFREC; // record
  OIBREC OIBREC; // record
  OM0IW01 OM0IW01; // record
  OM0IW02 OM0IW02; // record
  OMAREC OMAREC; // record
  OMBREC OMBREC; // record
  OMWREC OMWREC; // record
  OP1REC OP1REC; // record
  OP6REC OP6REC; // record
  OSNREC OSNREC; // record
  SP1REC SP1REC; // record
  SP6REC SP6REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TF1REC TF1REC; // record
  VBULKS02 VBULKS02; // record
  WEP1301 WEP1301; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPATBL {deleteAfterUse = yes}; // table
  use XAATBL {deleteAfterUse = yes}; // table
  use XCPTBL {deleteAfterUse = yes}; // table
  use XDATBL {deleteAfterUse = yes}; // table
  use XHDTBL {deleteAfterUse = yes}; // table
  use XOATBL {deleteAfterUse = yes}; // table
  use XODTBL {deleteAfterUse = yes}; // table
  use XOSTBL {deleteAfterUse = yes}; // table
  use XPKTBL {deleteAfterUse = yes}; // table
  use XPPTBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use XRTTBL {deleteAfterUse = yes}; // table
  use XTDTBL {deleteAfterUse = yes}; // table
  use YOSTBL {deleteAfterUse = yes}; // table
  use OM0IM.OM0IM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OM0I001: OM0I001();




    goto OM0I005;




    OM0I005: OM0I005();
     /* *************************************************************/


     /* **** If any error occured, then branch back to the*/
          /* beginning of the converse  Only if a pf key*/
          /* was pressed that required data editing.*/


    if (OM0IW01.OM0IWFL1 == "Y"
     || OM0IW01.OM0IW435 == "Y")
      if (converseVar.eventKey is pf3
       || converseVar.eventKey is pf4
       || converseVar.eventKey is pf12
       || converseVar.eventKey is pf13
       || converseVar.eventKey is pf15
       || converseVar.eventKey is pf16
       || converseVar.eventKey is pf17
       || converseVar.eventKey is pf18
       || converseVar.eventKey is enter)
        goto OM0I005;
      end
    end


     /* **** If there was an error trying to update the order,*/
          /* the order was changed since this application started,*/
          /* go back to the beginning of this application.*/

    if (OM0IW01.OM0IWFL3 == "Y")
      goto OM0I001;
    end


     /* **** Change attributes to unprotected*/

    if (converseVar.eventKey is pf2)
      goto OM0I005;
    end


     /* **** transfer control to the order processing main*/
          /* menu*/

    if (converseVar.eventKey is pf3)
      if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
        COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
        COMMAREA.CAMSG = "ORDER MAINTAINED - UPDATE PREPACK";
        COMMAREA.CACURRAP = "OS0G";
        transfer to program "OS0G" passing COMMAREA;
      else
        COMMAREA.CACURRAP = "OM0M";
        transfer to program "OM0M" passing COMMAREA;
      end
    end


     /* **** transfer control to the main menu*/

    if (converseVar.eventKey is pf4)
      if (OMWREC.OMWPPEXF == "Y")
        COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
        COMMAREA.CAMSG = "ORDER MAINTAINED - UPDATE PREPACK";
        COMMAREA.CACURRAP = "OS0G";
        transfer to program "OS0G" passing COMMAREA;
      else
        COMMAREA.CACURRAP = "MN0M";
        transfer to transaction "MN0M" passing COMMAREA;
      end
    end


     /* **** edit only*/

    if (converseVar.eventKey is pf12)
      goto OM0I005;
    end


     /* **** go to the order header 1 screen*/

    if (converseVar.eventKey is pf13)
      COMMAREA.CACURRAP = "OM0H";
      transfer to program "OM0H" passing COMMAREA;
    end


     /* **** go to the order maintenance instructions screen*/

    if (converseVar.eventKey is pf15)
      COMMAREA.CACURRAP = "OM0J";
      transfer to program "OM0J" passing COMMAREA;
    end


     /* **** go to the order maintenance addresses screen*/

    if (converseVar.eventKey is pf16)
      COMMAREA.CACURRAP = "OM0K";
      transfer to program "OM0K" passing COMMAREA;
    end


     /* **** go to the order maintenance allocations screen*/

    if (converseVar.eventKey is pf17)
      COMMAREA.CACURRAP = "OM0L";
      transfer to program "OM0L" passing COMMAREA;
    end


     /* **** go to the order maintenance comments screen*/

    if (converseVar.eventKey is pf18)
      COMMAREA.CACURRAP = "OM0C";
      transfer to program "OM0C" passing COMMAREA;
    end


     /* **** ignore data entered and show original screen*/

    if (converseVar.eventKey is pf19
     || converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      goto OM0I001;
    end


     /* **** If the enter key was pressed, then the option*/
          /* will determine where the application will*/
          /* transfer to.*/

          /* how to decipher this if statement...*/

          /* if end-of-flow flag = 'y'*/
             /* go to the main order maintenance menu.*/

          /* If end-of-flow-flag is not = 'y' then the option field*/
             /* must be checked to determine where to transfer.*/
             /* If the option = 1*/
                /* transfer to the product summary om0s*/
             /* else*/
             /* if the option = 2 or 4 and change flag = 'y'*/
                /* transfer to the product detail om0q*/
             /* else*/
             /* if the option = 2 or 4 and change flag is not = 'y'*/
                /* transfer to the product detail om0d*/
             /* if the option = 5 and the change flag = 'y'*/
                /* transfer to the ????? om0p*/
             /* else*/
             /* if the option = 5 and the change flag not = 'y'*/
                /* transfer to the ????? om0o*/
             /* else*/
             /* if the option = 6*/
                /* transfer to the ????? om0a*/
             /* else*/
                /* transfer to the order maintenance main menu*/


    if (converseVar.eventKey is enter)
      if (OMWREC.OMWEOF == "Y")
        if (OMWREC.OMWPPEXF == "Y")
          COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
          COMMAREA.CAMSG = "ORDER MAINTAINED - UPDATE PREPACK";
          COMMAREA.CACURRAP = "OS0G";
          transfer to program "OS0G" passing COMMAREA;
        else
          COMMAREA.CACURRAP = "OM0M";
          transfer to program "OM0M" passing COMMAREA;
        end
      else
        if (OMWREC.OMWOPTN == 1)
          COMMAREA.CACURRAP = "OM0S";
          transfer to program "OM0S" passing COMMAREA;
        else
          if (OMWREC.OMWOPTN == 2
           || OMWREC.OMWOPTN == 4)
            if (OMWREC.OMWCHGFL == "Y")
              COMMAREA.CACURRAP = "OM0Q";
              transfer to program "OM0Q" passing COMMAREA;
            else
              COMMAREA.CACURRAP = "OM0O";
              transfer to program "OM0O" passing COMMAREA;
            end
          else
            if (OMWREC.OMWOPTN == 5)
              if (OMWREC.OMWCHGFL == "Y")
                COMMAREA.CACURRAP = "OM0P";
                transfer to program "OM0P" passing COMMAREA;
              else
                COMMAREA.CACURRAP = "OM0O";
                transfer to program "OM0O" passing COMMAREA;
              end
            else
              if (OMWREC.OMWOPTN == 6)
                COMMAREA.CACURRAP = "OM0A";
                transfer to program "OM0A" passing COMMAREA;
              else
                if (OMWREC.OMWPPEXF == "Y")
                  COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
                  COMMAREA.CACURRAP = "OS0G";
                  transfer to program "OS0G" passing COMMAREA;
                else
                  COMMAREA.CACURRAP = "OM0M";
                  transfer to program "OM0M" passing COMMAREA;
                end
              end
            end
          end
        end
      end
    end


     /* **** Invalid key if this point is reached*/

    converseLib.validationFailed(8);
    goto OM0I005;




  end // end main
end // end OM0I

// program init
Function OM0I001()



     /* **********************************************************/
     /* * this process initializes program work area and sets up**/
     /* * the map areas.                                        **/
     /* **********************************************************/

   /* **** Check to verify that they have entered this*/
        /* application though the proper method.  This statement*/
        /* group will also move the commarea.causera to omwrec.*/
        /* Commarea.causera is how data is tranfered between the*/
        /* order processing applications.*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  XSOMS01();

  XSENTRY();

   /* ****************************************************/
   /* *** set segmented trans id                      ****/
   /* ****************************************************/

  CAEZSAP = sysVar.transactionID;
  CAEZSG12 = "OM";
  CAEZSG4 = "I";
  sysVar.transactionID = CAEZSAP;

   /* *************************************************************/

   /* **** If the menu-option-flow field is equal to an 8*/
        /* then the end-of-flow flag needs to be set to 'Y'.*/
        /* Why I don't know.*/


  if (OMWREC.OMWOPTN == 8)
    OMWREC.OMWEOF = "Y";
  end


  set OM0IM001 initial;


  set OP6REC empty;
  set OMBREC empty;


  COMMAREA.CAFROMAP = "OM0I";


   /* **** initialize date field on the map*/

  OM0IM001.OMRUNDT = VGVar.currentShortGregorianDate;

   /* **** save the current date *****/
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    OMAREC.OMACDT = TA2REC.TA2GRGGN;
  end

   /* **** Get the order to be changed.*/

  OMWREC.OMWSGRP = COMMAREA.CA-USER-WORKAREA-4K;
  OP1REC.OP1GROUP = OMWREC.OP1GROUP;


  OM0IS01();


   /* **** Initialize the pf2 change flag*/

  if (OMWREC.OMWCHGFL == "Y")
    OMWREC.OMWPF2CH = "Y";
  else
    OMWREC.OMWPF2CH = "N";
  end

   /* **** If the omwchgfl = 'y' unprotect all the fields and*/
        /* go into change mode.  Otherwise protect all the fields*/
        /* and go into inquiry mode.*/
        /* The change pf2 key prompt will be darkened when in*/
        /* change mode.*/
        /* Things that can change the mode are...*/
        /* 1.  If the menu-change-flag = 'n' or*/
            /* the menu-change-flag-1 = 'y'*/
            /* then force inqury mode.  This person does*/
            /* not have athority to change this order.*/
        /* 2.  If Sales office on the order does not match the*/
            /* sales office for the user performing the*/
            /* maintenance then force the inquriy mode.*/
        /* 3.  Order status must be such that the order*/
            /* can be maintenanced.*/

  if (SQLCA.VAGen_SQLCODE == 0)
    OM0IS02();
  end


   /* **** Move the order record to the screen.*/

  if (SQLCA.VAGen_SQLCODE == 0)
    OM0IS05();
  end


   /* **** Get the system date.*/

   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* MOVE 19 TO OM0IW01.OM0IWCT;*/
   /* MOVE EZEDTE TO OM0IW01.OM0IWDT;*/
   /* ;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  OM0IW01.OM0IWDTE = VGVar.currentGregorianDate;
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/

   /* **** initialize any flags*/

  OM0IW01.OM0IWFL1 = "N";
  OM0IW01.OM0IWFL2 = "N";
  OM0IW01.OM0IWFL3 = "N";
  OM0IW01.OM0IWPCH = "N";
  OM0IW01.OM0IW435 = "N";




   /* *************************************************************/
end // end OM0I001

// converse map and edit data
Function OM0I005()



      /* *********************************************************/
      /* *                                                      **/
      /* * this process converses the map, edits the entered    **/
      /* * fields and if possible, xfer's to the requested      **/
      /* * application                                          **/
      /* *                                                      **/
      /* *********************************************************/


      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/



   /* *************************************************************/
  converse OM0IM001 ;
   /* *************************************************************/




   /* **** reset any error messages on the screen*/

  OM0IM001.VAGen_EZEMSG = " ";
  OM0IW01.OM0IWFL1 = "N";


   /* **** Process pf keys and enter key*/

  OM0IS20(); /* pf keys*/
  OM0IS88(); /* ck if both rush pick prty & don't ship b4 dt*/


   /* **** read the order header before exiting this application*/
        /* to get the current record to pass.  The order header*/
        /* will only be read if there are no errors and this*/
        /* application will be exited.*/

  if (OM0IW01.OM0IWFL1 == "N"
   && OM0IW01.OM0IWFL3 == "N")
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf3
     || converseVar.eventKey is pf4
     || converseVar.eventKey is pf12
     || converseVar.eventKey is pf13
     || converseVar.eventKey is pf15
     || converseVar.eventKey is pf16
     || converseVar.eventKey is pf17
     || converseVar.eventKey is pf18)
      OM0IS50();
    end
  end

  if (converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is enter)
    if (OMWREC.OMWPKCHF == "Y")
      OM0IS00(); /* check for prepack*/
      if (OM0IW01.OM0IWFL1 == "Y")
        return;
      end
    end
  end


   /* *************************************************************/
end // end OM0I005

// Order chg subrtn - Mirror Pool
Function OM0IS-CALL-EP1300()
   /* -----------------------------------------------------------*/
   /* Order Change Subroutine for editing and updating the Mirror*/
   /* Pool Database. Move the required fields into the passing*/
   /* record based upon modified flags.*/
   /*  */
   /* If return code is 1, no orders exist on the Mirror Pool*/
   /* database. If return code is 2,3,4,or 9 changes cannot be*/
   /* applied. If any others, indicate a system error.*/
   /* ----------------------------------------------------------*/

  try
    call "EP1300" (WEP1301) {isNoRefresh = yes, isExternal = yes};
  end

end // end OM0IS-CALL-EP1300

// CHECK FOR ORDER TO UPDATE BULK
Function OM0IS-CHECK-UPDATE()
   /* tcs include begin*/
  set VBULKS02 empty;
  set OBFREC empty;
  set SQLCA empty;
  VBULKS02.OP1PARTN = OP1REC.OP1PARTN;
  VBULKS02.OP1CUOID = OP1REC.OP1CUOID;
  VBULKS02.OP1NORID = OP1REC.OP1NORID;

  OBFREC.OBFTASK = "S ";
  call "VBULKS02" (OBFREC, SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    OM0IS-UPDTE-VBULK(); /* if there are records update*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)

    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VBULKS02"; /* table view*/
      TA1REC.TA1LOCAT[2] = "OM0IS-CHECK-UPDATE"; /* STMT.GRP.*/
      TA1REC.TA1LOCAT[3] = "VBULKS02";
      TA1REC.TA1LOCAT[4] = "U ";
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      transfer to transaction "MN0M" passing COMMAREA;

    end
    /* tcs include end*/
  end
end // end OM0IS-CHECK-UPDATE

// CHECK FOR PREPACK
Function OM0IS-CHK-PREPACK()
   /* BUILD THE KEY TO SPECIFIED PREPACK TABLE*/

  set OSNREC empty;
  set SQLCA empty;

  OSNREC.XWHCD = OP1REC.XWHCD; /* WAREHOUSE*/
  OSNREC.OP1PARTN = OP1REC.OP1PARTN; /* PART CHAR*/
  OSNREC.OP1CUOID = OP1REC.OP1CUOID; /* ORDER NUM*/
  OSNREC.OP1NORID = OP1REC.OP1NORID; /* NIKE ORD ID*/

  call "IO5650" ("S1", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence;*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VCSPRP01"; /* table view*/
    TA1REC.TA1TBLKE = OSNREC.OSNKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OM0IS-CH"; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO5650  "; /* i/o mod name*/
    XSOPS02(); /* abend routine*/
  end

  while (SQLCA.VAGen_SQLCODE == 0)
    call "IO5650" ("N1", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      if (OM0IM001.XPACD == " ") /* pack code is blanked out*/
        OM0IS-DELETE-PREPK();
      else
        OM0IS-UPDATE-PREPK();
      end
    else
      if (SQLCA.VAGen_SQLCODE == +100)
           /* next sentence;*/
      else
        TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
        TA1REC.TA1TBLVU = "VCSPRP01"; /* table view*/
        TA1REC.TA1TBLKE = OSNREC.OSNKEY; /* key value*/
        TA1REC.TA1LOCAT[3] = "OM0IS-UP"; /* statement group*/
        TA1REC.TA1LOCAT[4] = "IO5650  "; /* i/o mod name*/
        XSOPS02(); /* abend routine*/
      end
    end
  end

  call "IO5650" ("C1", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence;*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VCSPRP01"; /* table view*/
    TA1REC.TA1TBLKE = OSNREC.OSNKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OM0IS-CH"; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO5650  "; /* i/o mod name*/
    XSOPS02(); /* abend routine*/
  end
end // end OM0IS-CHK-PREPACK

// DELETE PREPACK
Function OM0IS-DELETE-PREPK()


   /* THIS STATEMENT GROUP DELETES THE PREPACK RECORD IF*/
   /* IT EXISTS*/

  call "IO5650" ("D ", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence;*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VCSPRP01"; /* table view*/
    TA1REC.TA1TBLKE = OSNREC.OSNKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OM0IS-CH"; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO5650  "; /* i/o mod name*/
    XSOPS02(); /* abend routine*/
  end

end // end OM0IS-DELETE-PREPK

// UPDATE PREPACK
Function OM0IS-UPDATE-PREPK()


   /* THIS STATEMENT GROUP UPDATES THE PREPACK RECORD IF*/
   /* IT EXISTS*/

  OSNREC.XPACD = OM0IM001.XPACD;
  OSNREC.XWHCD = OP1REC.XWHCD;

  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    OSNREC.ZZZCHGDT = TA2REC.TA2GRGGN;
    OSNREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  end

  call "IO5650" ("U1", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence;*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VCSPRP01"; /* table view*/
    TA1REC.TA1TBLKE = OSNREC.OSNKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OM0IS-CH"; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO5650  "; /* i/o mod name*/
    XSOPS02(); /* abend routine*/
  end

end // end OM0IS-UPDATE-PREPK

// UPDATE VBULKS02
Function OM0IS-UPDTE-VBULK()
   /* tcs include begin*/
   /* to update vbulk*/
  set OBFREC empty;
  set SQLCA empty;
  VBULKS02.KUMSTRID = OP1REC.KUMSTRID;
  VBULKS02.XNXCD = OP1REC.XNXCD;
  VBULKS02.XBDCD = OP1REC.XBDCD;
  VBULKS02.OP1CUPO = OP1REC.OP1CUPO;
  VBULKS02.XDVCD = OP1REC.XDVCD;
  VBULKS02.XSOCD = OP1REC.XSOCD;
  VBULKS02.XWHCD = OP1REC.XWHCD;
  VBULKS02.OP1CUNDT = OP1REC.OP1CUNDT;
  VBULKS02.OP1DSADT = OP1REC.OP1DSADT;
  VBULKS02.SP1ID = OP1REC.SP1ID;
  VBULKS02.SM4REPID = OP1REC.SM4REPID;
  OBFREC.OBFTASK = "U ";
  call "VBULKS02" (OBFREC, SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
   /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "U ";
    TA1REC.TA1LOCAT[2] = "VBULKS02";
    TA1REC.TA1LOCAT[3] = "OMOIS-UPDTE-VBULK";
    TA1REC.TA1DBASE = "DORDB  "; /* data base name*/
    TA1REC.TA1TBLVU = "VBULKS02"; /* data base view*/
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    transfer to transaction "MN0M" passing COMMAREA;
  end
   /* tcs include end*/
end // end OM0IS-UPDTE-VBULK

// CHECK FOR PREPACK
Function OM0IS00()

   /* THIS STATEMENT GROUP CHECKS THE PREPACK DATABASE*/
   /* TO SEE IF THE ORDER EXISTS*/

  OMWREC.OMWPKCHF = "N"; /* pack change flag*/
  OMWREC.OMWPPEXF = "N"; /* prepack exists flag*/
  sysVar.arrayIndex = 1;

  if (OP1REC.XGPCD == "03" /* APPAREL ORDER*/
   || OP1REC.XGPCD == "02") /* footwear order*/
    if (OP1REC.XPACD in XPATBL.XPACD /* IF VALID PACK CODE*/
     && XPATBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XPATBL.XPASPFFL[sysVar.arrayIndex] == "Y") /* CUST WANTS PREPACK*/
           /* NEXT SENTENCE   SEE IF ORDER IS ON DBASE*/
      else
        return;
      end
    else
      return;
    end
  else
    return;
  end

   /* BUILD THE KEY TO SPECIFIED PREPACK TABLE*/

  set OSNREC empty;
  set SQLCA empty;

  OSNREC.XWHCD = OP1REC.XWHCD; /* WAREHOUSE*/
  OSNREC.OP1PARTN = OP1REC.OP1PARTN; /* PART CHAR*/
  OSNREC.OP1CUOID = OP1REC.OP1CUOID; /* ORDER NUM*/
  OSNREC.OP1NORID = OP1REC.OP1NORID; /* NIKE ORD ID*/

  call "IO5650" ("SE", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == -811) /* multi records found*/
    OMWREC.OMWPPEXF = "Y"; /* prepack exists flag*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OMWREC.OMWPPEXF = "N"; /* prepack exists flag*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        OMWREC.OMWPKCHF = "Y"; /* reseet pack change flag*/
        OM0IW01.OM0IWFL1 = "Y"; /* error flag*/
        converseLib.validationFailed(672); /* prepack db busy try again*/
        OM0IW01.OM0IW911 = "Y";
        return;
      else
        OM0IW01.OM0IWFL1 = "Y"; /* error flag*/
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "OM0I    ";
        TA1REC.TA1LOCAT[1] = "SE      ";
        TA1REC.TA1LOCAT[2] = "OM0IS00 ";
        TA1REC.TA1LOCAT[3] = "IO5650  ";
        TA1REC.TA1DBASE = "DORDER  ";
        TA1REC.TA1TBLVU = "VCSPRP01";
        OMWREC.OMWORDN = OP1REC.OP1CUOID;
        OMWREC.OMWSEP1 = ".";
        OMWREC.OMWSORDN = OP1REC.OP1NORID;
        TA1REC.TA1TBLKE = OMWREC.OMWORD;
        try
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        end
        COMMAREA.CAMSGA = "PREPACK DB PROBLEMS";
        COMMAREA.CAMSGB = "ORDER MAY HAVE PREPACK CALL USER ANALYST";
        COMMAREA.CACURRAP = "OM0M";
        transfer to program "OM0M" passing COMMAREA;
      end
    end
  end

end // end OM0IS00

// get the order hdr to change
Function OM0IS01()

   /* ************************************************************/
   /* *                                                         **/
   /* *    Get the order header to change.  The key to the      **/
   /* *    order is passed through the commarea into omwrec     **/
   /* *    and then on to op1rec.  What a trip.                 **/
   /* *                                                         **/
   /* ************************************************************/


  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0I    ";
      TA1REC.TA1MAP = "OM0IM001";
      TA1REC.TA1DBASE = "DORDER  ";
      TA1REC.TA1TBLVU = "VORHDR01";
      OMWREC.OMWORDN = OP1REC.OP1CUOID;
      OMWSEP1 = ".";
      OMWREC.OMWSORDN = OP1REC.OP1NORID;
      TA1REC.TA1TBLKE = OMWREC.OMWORD;
      TA1REC.TA1LOCAT[3] = "OM0IS01";
      TA1REC.TA1LOCAT[4] = "IO0430";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      transfer to transaction "MN0M" passing COMMAREA;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0I    ";
      TA1REC.TA1MAP = "OM0IM001";
      TA1REC.TA1DBASE = "DORDER  ";
      TA1REC.TA1TBLVU = "VORHDR01";
      OMWREC.OMWORDN = OP1REC.OP1CUOID;
      OMWSEP1 = ".";
      OMWREC.OMWSORDN = OP1REC.OP1NORID;
      TA1REC.TA1TBLKE = OMWREC.OMWORD;
      TA1REC.TA1LOCAT[3] = "OM0IS01";
      TA1REC.TA1LOCAT[4] = "IO0430";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      transfer to transaction "MN0M" passing COMMAREA;
    end
  end





end // end OM0IS01

// set change/inquiry mode
Function OM0IS02()
   /* ************************************************************/
   /* *                                                         **/
   /* *    If the omwchgfl = 'y' unprotect all the fields and   **/
   /* *    go into change mode.  Otherwise protect all the fields*/
   /* *    and go into inquiry mode.                            **/
   /* *    The change pf2 key prompt will be darkened when in   **/
   /* *    change mode.                                         **/
   /* *    Things that can change the mode are...               **/
   /* *    1.  If the menu-change-flag = 'n' or                 **/
   /* *        the menu-change-flag-1 = 'y'                     **/
   /* *        then force inqury mode.  This person does        **/
   /* *        not have athority to change this order.          **/
   /* *    2.  If Sales office on the order does not match the  **/
   /* *        sales office for the user performing the         **/
   /* *        maintenance then force the inquriy mode.         **/
   /* *    3.  Order status must be such that the order         **/
   /* *        can be maintenanced.                             **/
   /* *                                                         **/
   /* ************************************************************/


   /* **** If the omwchgfl is set to a 'n' then go into inquriy*/
   /* mode.*/

  if (OMWREC.OMWCHGFL != "Y")
                            /* tcs change begin (11/21/97)*/
   /* OM0IS04;    /* was s03 -- slarse*/
    OM0IS03();
                            /* tcs change end   (11/21/97)*/
    return;
  end


   /* **** Check to see if the user has athority to maintenance*/
        /* the order.*/

  if (COMMAREA.CACHGFL != "Y")
    OM0IS03(); /* inquiry*/
    set OM0IM001 alarm;
    converseLib.validationFailed(352);
    return;
  end


   /* **** If the menu-change-flag-1 is set to a 'y' then*/
        /* this user does not have change capabilities but*/
        /* can inquire.*/

  if (COMMAREA.CACLVL[1] == "Y")
    OM0IS03(); /* inquriy*/
    set OM0IM001 alarm;
    converseLib.validationFailed(352);
    return;
  end


   /* **** Check to see if the users sales office id matches*/
        /* the orders sales office id.*/

  if (COMMAREA.XSOCD == OP1REC.XSOCD)
     /* next sentence*/
  else
    OM0IS03(); /* inquiry*/
    set OM0IM001 alarm;
    converseLib.validationFailed(355);
    return;
  end


   /* **** Check to see if the order status is such that the*/
        /* order is in a status to be changed.*/

  if (OP1REC.XOSCD in XOSTBL.XOSCD)
    if (XOSTBL.XOSALWCH[sysVar.arrayIndex] == "N")
      OM0IS03(); /* inquiry*/
      set OM0IM001 alarm;
      converseLib.validationFailed(368);
    else
      OM0IS04(); /* change*/
    end
  else
    OM0IS03(); /* inquiry*/
    set OM0IM001 alarm;
    converseLib.validationFailed(368);
  end




end // end OM0IS02

// set fields to protect
Function OM0IS03()

   /* ***********************************************************/
   /* *                                                        **/
   /* *         Set the screen fields to protect               **/
   /* *                                                        **/
   /* ***********************************************************/


  OM0IM001.OM0IMHDR = "INQUIRY";

  set OM0IM001.XPTCD cursor, protect;

  if (OP1REC.SP1ID == " ")
    set OM0IM001.OM0IMTL skip, invisible;
    set OM0IM001.OP1TLVLN skip, invisible;
  else
    OM0ISSC(); /* get spgm header sp1rec*/
    OM0IST1(); /* get spgm tier level*/
    set OM0IM001.OM0IMTL protect;
    set OM0IM001.OP1TLVLN protect;
  end

  if (OP1REC.XDVCD == "02") /* if international order*/
    set OM0IM001.OM0IMAL skip, invisible;
    set OM0IM001.OM0IMDL skip, invisible;
    set OM0IM001.OM0IMCL skip, invisible;
    set OM0IM001.OM0IMDSL skip, invisible;
    set OM0IM001.OM0IMAFL skip, invisible;
    set OM0IM001.OM0IMABL skip, invisible;
    set OM0IM001.XDAPCT skip, invisible;
    set OM0IM001.XTDPCT skip;
    set OM0IM001.OP1TDFCP skip;
    set OM0IM001.OP1TDBKP skip;
    set OM0IM001.XDAPCT skip, invisible;
    set OM0IM001.XCPPCT skip, invisible;
    set OM0IM001.XAAPCT skip, invisible;
    set OM0IM001.OP1AAFCP skip, invisible;
    set OM0IM001.OP1AABKP skip, invisible;
    set OM0IM001.OP1WIPIN skip, invisible;
  else
    set OM0IM001.XDAPCT skip;
    set OM0IM001.XTDPCT skip;
    set OM0IM001.OP1TDFCP skip;
    set OM0IM001.OP1TDBKP skip;
    set OM0IM001.XCPPCT skip;
    set OM0IM001.XAAPCT skip;
    set OM0IM001.OP1AAFCP skip;
    set OM0IM001.OP1AABKP skip;
    set OM0IM001.OP1WIPIN skip; /* po money month*/
  end

  set OM0IM001.XOACD skip;
  set OM0IM001.OM0IMIDT skip;
  set OM0IM001.OP1EXPDF skip;
  set OM0IM001.XPPCD skip;
  set OM0IM001.XPKCD skip;
  set OM0IM001.TF1CARCD skip; /* added 6/20/87 ssj*/
  set OM0IM001.OP1SWORD skip;
  set OM0IM001.XPACD skip;
  set OM0IM001.OP1ODSKF skip;
  set OM0IM001.XHDCD[1] skip;
  set OM0IM001.XHDCHG[1] skip;
  set OM0IM001.XHDCD[2] skip;
  set OM0IM001.XHDCHG[2] skip;
  set OM0IM001.XHDCD[3] skip;
  set OM0IM001.XHDCHG[3] skip;
  set OM0IM001.XHDCD[4] skip;
  set OM0IM001.XHDCHG[4] skip;
  set OM0IM001.XHDCD[5] skip;
  set OM0IM001.XHDCHG[5] skip;

  set OM0IM001.OM0IMP2P initialAttributes;
  set OM0IM001.OM0IMCRS cursor;




end // end OM0IS03

// set fields to unprotect
Function OM0IS04()

   /* ***********************************************************/
   /* *                                                        **/
   /* *         Set the screen fields to unprotect             **/
   /* *                                                        **/
   /* ***********************************************************/


  OM0IM001.OM0IMHDR = "CHANGE";

  OM0IW01.OM0IWCHG = "Y";


  if (OP1REC.SP1ID != " ")
    OM0ISSC(); /* get spgm header sp1rec*/
    OM0IST1(); /* get spgm tier level*/
    set OM0IM001.OP1TLVLN cursor, initialAttributes; /* set cursor on tier level*/
    if (SP1REC.XNDCD == "ALLM") /* allocation sales program*/
      set OM0IM001.XPTCD initialAttributes;
      set OM0IM001.XTDPCT initialAttributes;
      set OM0IM001.OP1TDFCP initialAttributes;
      set OM0IM001.OP1TDBKP initialAttributes;
      set OM0IM001.XCPPCT initialAttributes;
      set OM0IM001.XAAPCT initialAttributes;
      set OM0IM001.OP1AAFCP initialAttributes;
      set OM0IM001.OP1AABKP initialAttributes;
    else
      set OM0IM001.XPTCD protect;
      set OM0IM001.XTDPCT protect;
      set OM0IM001.OP1TDFCP protect;
      set OM0IM001.OP1TDBKP protect;
      set OM0IM001.XCPPCT protect;
      set OM0IM001.XAAPCT protect;
      set OM0IM001.OP1AAFCP protect;
      set OM0IM001.OP1AABKP protect;
    end
  else
    set OM0IM001.OM0IMTL skip, invisible;
    set OM0IM001.OM0IMTO skip, invisible;
    set OM0IM001.OP1TLVLN skip, invisible;
    set OM0IM001.XPTCD cursor, initialAttributes;
    set OM0IM001.XTDPCT initialAttributes;
    set OM0IM001.OP1TDFCP initialAttributes;
    set OM0IM001.OP1TDBKP initialAttributes;
    set OM0IM001.XDAPCT initialAttributes;
    set OM0IM001.XCPPCT initialAttributes;
    set OM0IM001.XAAPCT initialAttributes;
    set OM0IM001.OP1AAFCP initialAttributes;
    set OM0IM001.OP1AABKP initialAttributes;
  end

  set OM0IM001.OM0IMDF initialAttributes;
  set OM0IM001.XOACD initialAttributes;
  set OM0IM001.OM0IMIDT initialAttributes;
  set OM0IM001.XPPCD initialAttributes;
  set OM0IM001.XPKCD initialAttributes;
  set OM0IM001.OP1WIPIN initialAttributes;

  if (OP1REC.XDVCD == "02")
    set OM0IM001.OM0IMAL skip, invisible;
    set OM0IM001.OM0IMDL skip, invisible;
    set OM0IM001.OM0IMCL skip, invisible;
    set OM0IM001.OM0IMDSL skip, invisible;
    set OM0IM001.OM0IMAFL skip, invisible;
    set OM0IM001.OM0IMABL skip, invisible;
    set OM0IM001.XCPPCT skip, invisible;
    set OM0IM001.XAAPCT skip, invisible;
    set OM0IM001.OP1AAFCP skip, invisible;
    set OM0IM001.OP1AABKP skip, invisible;
    set OM0IM001.XDAPCT skip, invisible;
  end


  set OM0IM001.OP1EXPDF initialAttributes;



  if (COMMAREA.CACLVL[2] == "Y") /* if chg authorized; added oab 7/7/8*/
    set OM0IM001.TF1CARCD initialAttributes; /* added ssj 6/20/87*/
  else
    set OM0IM001.TF1CARCD skip;
  end

  set OM0IM001.OP1SWORD initialAttributes;
  set OM0IM001.XPACD initialAttributes;
  set OM0IM001.OP1ODSKF initialAttributes;
  set OM0IM001.OP1ECANM skip, invisible;
  set OM0IM001.XHDCD[1] initialAttributes;
  set OM0IM001.XHDCHG[1] initialAttributes;
  set OM0IM001.XHDCD[2] initialAttributes;
  set OM0IM001.XHDCHG[2] initialAttributes;
  set OM0IM001.XHDCD[3] initialAttributes;
  set OM0IM001.XHDCHG[3] initialAttributes;
  set OM0IM001.XHDCD[4] initialAttributes;
  set OM0IM001.XHDCHG[4] initialAttributes;
  set OM0IM001.XHDCD[5] initialAttributes;
  set OM0IM001.XHDCHG[5] initialAttributes;


   /* added to stop discounts on salesman orders - bug 270*/
   /* added by dwalke 11-28-89*/

  OM0IS71(); /* get customer information (kucrec)*/

  if (KUCREC.XAUCD == "26" /* if the order is a rep promo*/
   || KUCREC.XAUCD == "27" /* or a rep/agency personal order*/
   || KUCREC.XAUCD == "64") /* or a salesman sample*/
    set OM0IM001.XPTCD skip; /* set terms and discount fields*/
    set OM0IM001.XDAPCT skip; /* auto skip*/
    set OM0IM001.XTDPCT skip;
    set OM0IM001.OP1TDFCP skip;
    set OM0IM001.OP1TDBKP skip;
    set OM0IM001.XAAPCT skip;
    set OM0IM001.OP1AAFCP skip;
    set OM0IM001.OP1AABKP skip;
    set OM0IM001.XCPPCT skip;
    set OM0IM001.XOACD cursor;
  end

   /* **** Set the pf2 key prompt to dark.  Since we are in the*/
        /* change mode it does not make sense to show the prompt*/

  set OM0IM001.OM0IMP2P skip, invisible;




end // end OM0IS04

// move fields to the screen
Function OM0IS05()

   /* ***********************************************************/
   /* *                                                        **/
   /* *         Move the order header fields to the screen     **/
   /* *                                                        **/
   /* ***********************************************************/



  move OP1REC to OM0IM001 withV60Compat;


   /* **** set up the order number*/

  OM0IS06();


   /* **** set up the customer number/name*/

  OM0IS07();


   /* **** Set up the terms field*/

  OM0IS08();


   /* **** Set up the asterisk fields*/

  if (OP1REC.OP1TIERF == "Y" /* if tier has been overridden or*/
   || OP1REC.OP1TIERF == "A") /* it's seasonal & is*/
                                   /* still-to-be-applied*/
    OM0IM001.OM0IMTO = "*"; /* in batch*/
  else
    OM0IM001.OM0IMTO = " ";
  end

  if (OP1REC.OP1PTOF == "Y")
    OM0IM001.OM0IMTM = "*";
  else
    OM0IM001.OM0IMTM = " ";
  end


  if (OP1REC.OP1DFAOF == "Y")
    OM0IM001.OM0IMDF = "*";
  else
    OM0IM001.OM0IMDF = " ";
  end


  if (OP1REC.OP1TDOF == "Y")
    OM0IM001.OM0IMTD = "*";
  else
    OM0IM001.OM0IMTD = " ";
  end


  if (OP1REC.OP1AAOF == "Y")
    OM0IM001.OM0IMAD = "*";
  else
    OM0IM001.OM0IMAD = " ";
  end


  if (OP1REC.OP1COPOF == "Y")
    OM0IM001.OM0IMCO = "*";
  else
    OM0IM001.OM0IMCO = " ";
  end


   /* **** set up the invoice as of date*/

  if (OP1REC.OP1IVADT == +0)
    OM0IM001.OM0IMIDT = "MM-DD-YY";
  else
    OMAREC.OMAWDT = OP1REC.OP1IVADT;
    OMAREC.OMASMMDT = OMAREC.OMAWMM;
    OMAREC.OMAHP1 = "-";
    OMAREC.OMASDDDT = OMAREC.OMAWDD;
    OMAREC.OMAHP2 = "-";
    OMAREC.OMASYYDT = OMAREC.OMAWYY;
    OM0IM001.OM0IMIDT = OMAREC.OMASDATE;
  end


   /* **** Set up the picking priority and code descriptions*/

  if (OP1REC.XPPCD in XPPTBL.XPPCD)
    OM0IM001.XPPABRV = XPPTBL.XPPABRV[sysVar.arrayIndex];
  else
    OM0IM001.XPPABRV = " ";
  end


  if (OP1REC.XPKCD in XPKTBL.XPKCD)
    OM0IM001.XPKABRV = XPKTBL.XPKABRV[sysVar.arrayIndex];
  else
    OM0IM001.XPKABRV = " ";
  end

   /* **** Set up customer pack code*/

  OM0IM001.XPACD = OP1REC.XPACD;

   /* **** Set up carrier code  fields*/

  OM0IS19(); /* added ssj 6/20/87*/

   /* **** Set up the prior service hold*/

  OM0IS15();


   /* **** Set up the extended cancel fields*/

  OM0IS16();


   /* **** Set up the handling codes*/

  OM0IS18();

  if (OP1REC.OP1EXPDF == " ")
    OM0IM001.OP1EXPDF = "N";
  else
    OM0IM001.OP1EXPDF = OP1REC.OP1EXPDF;
  end

end // end OM0IS05

// Setup the order number
Function OM0IS06()

   /* ***********************************************************/
   /* *                                                        **/
   /* *         Set up the order number field                  **/
   /* *                                                        **/
   /* ***********************************************************/



  OMWREC.OMWORDN = OP1REC.OP1CUOID;
  OMWREC.OMWSEP1 = ".";
  OMWREC.OMWSORDN = OP1REC.OP1NORID;
  OM0IM001.OMWORD = OMWREC.OMWORD;




end // end OM0IS06

// setup the customer number/name
Function OM0IS07()

   /* ***********************************************************/
   /* *                                                        **/
   /* *         Set up the customer number/name                **/
   /* *                                                        **/
   /* ***********************************************************/


  OMAREC.OMACUCO = OP1REC.KUCCOID;
  OMAREC.OMASEP1 = ".";
  OMAREC.OMACUSR = OP1REC.KUMSTRID;
  OMAREC.OMASEP2 = ".";
  OMAREC.OMACUDP = OP1REC.XNXCD;
  OM0IM001.OMACUNO = OMAREC.OMACUNO;


  KUMREC.KUMSTRID = OP1REC.KUMSTRID;
  KUMREC.KUCCOID = OP1REC.KUCCOID;

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OM0IM001.KUMSTRNM = KUMREC.KUMSTRNM;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OM0IM001.KUMSTRNM = "NO STORE RECORD FOUND";
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0I    ";
      TA1REC.TA1MAP = "OM0IM001";
      TA1REC.TA1DBASE = "DCUST   ";
      TA1REC.TA1TBLVU = "VSTORE01";
      TA1REC.TA1TBLKE = OM0IM001.OMACUNO;
      TA1REC.TA1LOCAT[3] = "OM0IS05";
      TA1REC.TA1LOCAT[4] = "IO0340";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end




end // end OM0IS07

// setup the terms field
Function OM0IS08()

   /* *******************************************************/
   /* *                                                    **/
   /* *                Set up the terms field              **/
   /* *                                                    **/
   /* *******************************************************/


  if (OP1REC.XPTCD in XPTTBL.XPTCD)
    OM0IM001.XPTDESC = XPTTBL.XPTDESC[sysVar.arrayIndex];
  else
    OM0IM001.XPTDESC = "TERMS DESC NOT FOUND";
  end




end // end OM0IS08

// setup the prior service flds
Function OM0IS15()

   /* ***********************************************************/
   /* *                                                        **/
   /* *              Setup the prior service hold fields       **/
   /* *                                                        **/
   /* ***********************************************************/


   /* **** if the op1rec.op1pshcd field is equal to spaces*/
        /* then the prior service hold codes need to be*/
        /* darkened.*/

  set OM0IM001.OM0IMRLP skip, invisible;
  set OM0IM001.OP1CPODT skip, invisible;




end // end OM0IS15

// set up extended cancel fields
Function OM0IS16()


   /* ***********************************************************/
   /* *                                                        **/
   /* *              Setup the extended cancel fields          **/
   /* *                                                        **/
   /* ***********************************************************/


   /* **** if the op1rec.op1pcndt field is equal to +0*/
        /* then the prior dont ship after fields need to*/
        /* be darkened.*/

  if (OP1REC.OP1PCNDT == +0)
    set OM0IM001.OM0IMPDL skip, invisible;
    set OM0IM001.OM0IMPDS skip, invisible;
    set OM0IM001.OM0IMEDL skip, invisible;
    set OM0IM001.OM0IMEDT skip, invisible;
    set OM0IM001.OM0IMEXL skip, invisible;
    set OM0IM001.OP1ECANM skip, invisible;
    return;
  end

  set OM0IM001.OM0IMPDL initialAttributes;
  set OM0IM001.OM0IMPDS initialAttributes;
  set OM0IM001.OM0IMEDL initialAttributes;
  set OM0IM001.OM0IMEXL initialAttributes;
  set OM0IM001.OM0IMEDT initialAttributes;
  set OM0IM001.OP1ECANM initialAttributes;

  if (OMWREC.OMWCHGFL != "Y") /* not in change mode*/
    set OM0IM001.OP1ECANM skip;
  end

  OMAREC.OMAWDT = OP1REC.OP1PCNDT;
  OMAREC.OMASMMDT = OMAREC.OMAWMM;
  OMAREC.OMAHP1 = "-";
  OMAREC.OMASDDDT = OMAREC.OMAWDD;
  OMAREC.OMAHP2 = "-";
  OMAREC.OMASYYDT = OMAREC.OMAWYY;
  OM0IM001.OM0IMPDS = OMAREC.OMASDATE;

  OMAREC.OMAWDT = OP1REC.OP1ECADT;
  OMAREC.OMASMMDT = OMAREC.OMAWMM;
  OMAREC.OMAHP1 = "-";
  OMAREC.OMASDDDT = OMAREC.OMAWDD;
  OMAREC.OMAHP2 = "-";
  OMAREC.OMASYYDT = OMAREC.OMAWYY;
  OM0IM001.OM0IMEDT = OMAREC.OMASDATE;

  OM0IM001.OP1ECANM = OP1REC.OP1ECANM;


end // end OM0IS16

// Setup the handling codes
Function OM0IS18()

   /* **********************************************************/
   /* *                                                       **/
   /* *                 Setup the handling codes              **/
   /* *                                                       **/
   /* **********************************************************/


   /* **** Set the handling warning message to dark if no*/
        /* products on the order have handling codes.*/

  if (OP1REC.OP1SPHDF == "Y")
    set OM0IM001.OM0IMWRN initialAttributes;
    set OM0IM001.OM0IMHAN initialAttributes;
  else
    set OM0IM001.OM0IMWRN skip, invisible;
    set OM0IM001.OM0IMHAN skip, invisible;
  end



end // end OM0IS18

// setup the carrier code
Function OM0IS19()

   /* *******************************************************/
   /* *                                                    **/
   /* *                Set up the carrier field            **/
   /* *                                   added ssj 6/20/87**/
   /* *******************************************************/


  if (OP1REC.TF1CARCD > " ")
    TF1REC.TF1CARCD = OP1REC.TF1CARCD;

    call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      OM0IM001.TF1ABRV = TF1REC.TF1ABRV;
    else
      OM0IM001.TF1ABRV = " ";
    end
  end



end // end OM0IS19

// process pf keys
Function OM0IS20()

   /* **********************************************************/
   /* *                                                       **/
   /* *            This statement group will process all      **/
   /* *     the function keys.                                **/
   /* *                                                       **/
   /* **********************************************************/

  if (converseVar.eventKey is pf12
   || converseVar.eventKey is pf2)
    if (OP1REC.XBDCD == "R")
      OM0IS03(); /* protect screen for rebook*/
      converseLib.validationFailed(392);
      return;
    end
  end

   /* **** process pf2.  Change attributes from inquiry mode*/
        /* to change.*/
        /* If we are aleady in change mode and the pf2 key is*/
        /* pressed then display an error message.*/

  if (converseVar.eventKey is pf2)
    if (OMWREC.OMWPF2CH == "Y")
      converseLib.validationFailed(2);
    else
      OM0IS21(); /* change attributes*/
    end
  end


   /* **** edit the data on the screen only if in change mode*/

  if (OM0IW01.OM0IWCHG == "Y")
    if (converseVar.eventKey is pf12
     || converseVar.eventKey is pf13
     || converseVar.eventKey is pf15
     || converseVar.eventKey is pf16
     || converseVar.eventKey is pf17
     || converseVar.eventKey is pf18
     || converseVar.eventKey is enter)
      OM0IS30(); /* edit screen data*/
    end
  end


   /* **** perform table updates only if in change mode*/

  if (OM0IW01.OM0IWCHG == "Y")
    if (converseVar.eventKey is pf13
     || converseVar.eventKey is pf15
     || converseVar.eventKey is pf16
     || converseVar.eventKey is pf17
     || converseVar.eventKey is pf18
     || converseVar.eventKey is enter)
      if (OM0IW01.OM0IWFL1 == "Y" /* edit error*/
       || OM0IW01.OM0IW911 == "Y") /* -911 last time on menu services*/
           /* next sentence*/
      else
        OM0IS25(); /* update tables*/
      end
    end
  end


   /* **** If an invalid pf key was pressed then a routine*/
        /* needs to be done to set those fields that are*/
        /* modified back to modified so the data can be edited*/
        /* the next time through.*/

  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf6
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf9
   || converseVar.eventKey is pf10
   || converseVar.eventKey is pf11
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf20
   || converseVar.eventKey is pf21
   || converseVar.eventKey is pf22
   || converseVar.eventKey is pf23
   || converseVar.eventKey is pf24)
    OM0IS22();
                                   /* set fields to modified*/
  end




end // end OM0IS20

// process pf2 key
Function OM0IS21()

   /* **********************************************************/
   /* *                                                       **/
   /* *            This statement group will process the      **/
   /* *     pf2 fucntion key.  This key will change the mode  **/
   /* *     from inquiry to change.  But only if the user     **/
   /* *     and order will allow change.                      **/
   /* *                                                         **/
   /* *    The change pf2 key prompt will be darkened when in   **/
   /* *    change mode.                                         **/
   /* *    Things that can change the mode are...               **/
   /* *    1.  If the menu-change-flag = 'n' or                 **/
   /* *        the menu-change-flag-1 = 'y'                     **/
   /* *        then force inqury mode.  This person does        **/
   /* *        not have athority to change this order.          **/
   /* *    2.  If Sales office on the order does not match the  **/
   /* *        sales office for the user performing the         **/
   /* *        maintenance then force the inquriy mode.         **/
   /* *    3.  Order status must be such that the order         **/
   /* *        can be maintenanced.                             **/
   /* *                                                         **/
   /* ************************************************************/


   /* **** Check to see if the user has athority to maintenance*/
        /* the order.*/

  if (COMMAREA.CACHGFL != "Y")
    OM0IS03(); /* inquiry*/
    set OM0IM001 alarm;
    converseLib.validationFailed(352);
    return;
  end


   /* **** If the menu-change-flag-1 is set to a 'y' then*/
        /* this user does not have change capabilities but*/
        /* can inquire.*/

  if (COMMAREA.CACLVL[1] == "Y")
    OM0IS03(); /* inquriy*/
    set OM0IM001 alarm;
    converseLib.validationFailed(352);
    return;
  end


   /* **** Check to see if the users sales office id matches*/
        /* the orders sales office id.*/

  if (COMMAREA.XSOCD != OP1REC.XSOCD)
    OM0IS03(); /* inquiry*/
    converseLib.validationFailed(355);
    set OM0IM001 alarm;
    return;
  end


   /* **** Check to see if the order status is such that the*/
        /* order is in a status to be changed.*/

  if (OP1REC.XOSCD in XOSTBL.XOSCD)
    if (XOSTBL.XOSALWCH[sysVar.arrayIndex] == "N")
      OM0IS03(); /* inquiry*/
      set OM0IM001 alarm;
      converseLib.validationFailed(368);
    else
      OMWREC.OMWPF2CH = "Y";
      OM0IS04(); /* change*/
    end
  else
    OM0IS03(); /* inquiry*/
    set OM0IM001 alarm;
    converseLib.validationFailed(368);
  end


   /* added for rebooking 10/88 tjf*/
  if (OP1REC.XBDCD == "R")
    OM0IS03(); /* sets the screen fileds to portec.*/
    set OM0IM001 alarm;
    converseLib.validationFailed(392);
    return;
  end

   /* **** The statement groups to go into change or inquiry*/
        /* mode will set the attributes of the split commision*/
        /* lines to unprotected. We need to perform the statement*/
        /* group that will set the attributes to what they should*/
        /* be*/



end // end OM0IS21

// set fields to modified
Function OM0IS22()

   /* ***********************************************************/
   /* *                                                        **/
   /* *       Set those fields,that were set to modified       **/
   /* *   before the invalid pf key was pressed, to modified   **/
   /* *                                                        **/
   /* ***********************************************************/


  if (OM0IM001.OM0IMTM is modified)
    set OM0IM001.OM0IMTM modified;
  end

  if (OM0IM001.OP1TLVLN is modified)
    set OM0IM001.OP1TLVLN modified;
  end

  if (OM0IM001.XPTCD is modified)
    set OM0IM001.XPTCD modified;
  end

  if (OM0IM001.OM0IMDF is modified)
    set OM0IM001.OM0IMDF modified;
  end

  if (OM0IM001.XDAPCT is modified)
    set OM0IM001.XDAPCT modified;
  end

  if (OM0IM001.OM0IMTD is modified)
    set OM0IM001.OM0IMTD modified;
  end

  if (OM0IM001.XTDPCT is modified)
    set OM0IM001.XTDPCT modified;
  end

  if (OM0IM001.OP1TDFCP is modified)
    set OM0IM001.OP1TDFCP modified;
  end

  if (OM0IM001.OP1TDBKP is modified)
    set OM0IM001.OP1TDBKP modified;
  end

  if (OM0IM001.OM0IMCO is modified)
    set OM0IM001.OM0IMCO modified;
  end

  if (OM0IM001.XCPPCT is modified)
    set OM0IM001.XCPPCT modified;
  end

  if (OM0IM001.OM0IMAD is modified)
    set OM0IM001.OM0IMAD modified;
  end

  if (OM0IM001.XAAPCT is modified)
    set OM0IM001.XAAPCT modified;
  end

  if (OM0IM001.OP1AAFCP is modified)
    set OM0IM001.OP1AAFCP modified;
  end

  if (OM0IM001.OP1AABKP is modified)
    set OM0IM001.OP1AABKP modified;
  end

  if (OM0IM001.XOACD is modified)
    set OM0IM001.XOACD modified;
  end

  if (OM0IM001.XPPCD is modified)
    set OM0IM001.XPPCD modified;
  end

  if (OM0IM001.XPKCD is modified)
    set OM0IM001.XPKCD modified;
  end

  if (OM0IM001.OP1WIPIN is modified)
    set OM0IM001.OP1WIPIN modified;
  end

  if (OM0IM001.OP1SWORD is modified)
    set OM0IM001.OP1SWORD modified;
  end

  if (OM0IM001.TF1CARCD is modified)
    set OM0IM001.TF1CARCD modified;
  end

  if (OM0IM001.XPACD is modified)
    set OM0IM001.XPACD modified;
  end

  if (OM0IM001.OP1ODSKF is modified)
    set OM0IM001.OP1ODSKF modified;
  end

  if (OM0IM001.XHDCD[1] is modified)
    set OM0IM001.XHDCD[1] modified;
  end

  if (OM0IM001.XHDCHG[1] is modified)
    set OM0IM001.XHDCHG[1] modified;
  end

  if (OM0IM001.XHDCD[2] is modified)
    set OM0IM001.XHDCD[2] modified;
  end

  if (OM0IM001.XHDCHG[2] is modified)
    set OM0IM001.XHDCHG[2] modified;
  end

  if (OM0IM001.XHDCD[3] is modified)
    set OM0IM001.XHDCD[3] modified;
  end

  if (OM0IM001.XHDCHG[3] is modified)
    set OM0IM001.XHDCHG[3] modified;
  end

  if (OM0IM001.XHDCD[4] is modified)
    set OM0IM001.XHDCD[4] modified;
  end

  if (OM0IM001.XHDCHG[4] is modified)
    set OM0IM001.XHDCHG[4] modified;
  end

  if (OM0IM001.XHDCD[5] is modified)
    set OM0IM001.XHDCD[5] modified;
  end

  if (OM0IM001.XHDCHG[5] is modified)
    set OM0IM001.XHDCHG[5] modified;
  end





end // end OM0IS22

// perform table updates
Function OM0IS25()

   /* ***********************************************************/
   /* *                                                        **/
   /* *        Update the order header and line item tables    **/
   /* *                                                        **/
   /* ***********************************************************/


  if (OM0IM001.OP1EXPDF == "Y")
    OM0IS2B();
  end
  move OM0IM001 to OP1REC withV60Compat; /* move corresponding data names*/



   /* **** update the override flags.*/

  OM0IS26();


   /* **** if have 1 pack handle code, turn on flag*/

  if (OM0IM001.XHDCD[1] != " "
   || OM0IM001.XHDCD[2] != " "
   || OM0IM001.XHDCD[3] != " "
   || OM0IM001.XHDCD[4] != " "
   || OM0IM001.XHDCD[5] != " ")
    OP1REC.OP1SPHDF = "Y";
  end


   /* **** update the order header*/

  OM0IS27();


   /* **** update the handling codes on the item table*/
        /* if any handling codes were entered.*/

  if (OM0IM001.XHDCD[1] != " "
   || OM0IM001.XHDCD[2] != " "
   || OM0IM001.XHDCD[3] != " "
   || OM0IM001.XHDCD[4] != " "
   || OM0IM001.XHDCD[5] != " ")
    OM0IS28();
  end
  if (OM0IW01.OM0IWPCH == "Y") /* if a change was made that will affect*/
                                   /* picking*/
    if (OP1REC.XOSCD == "AL"
     || OP1REC.XOSCD == "PA")
      OM0IS2A(); /* write the picking change record*/
    end
  end




end // end OM0IS25

// update override flags
Function OM0IS26()

   /* ***********************************************************/
   /* *                                                        **/
   /* *        Update the override flags                       **/
   /* *                                                        **/
   /* ***********************************************************/


   /* **** update tier level override flag*/

  if (OM0IW01.OM0IWOR8 == "A")
    OP1REC.OP1TIERF = "A";
    OP1REC.SP6MDISC = OM0IW01.SP6MDISC;
  else
    if (OM0IW01.OM0IWOR8 == "Y")
      OP1REC.OP1TIERF = "Y";
      OP1REC.SP6MDISC = OM0IW01.SP6MDISC;
    end
  end



   /* **** update trade discount override flag*/

  if (OM0IW01.OM0IWOR1 == "Y")
    OP1REC.OP1TDOF = "Y";
  end


   /* **** update terms code override flag*/

  if (OM0IW01.OM0IWOR2 == "Y")
    OP1REC.OP1PTOF = "Y";
  end


   /* **** update ad allowance override flag*/

  if (OM0IW01.OM0IWOR3 == "Y")
    OP1REC.OP1AAOF = "Y";
  end


   /* **** update co op override flag*/

  if (OM0IW01.OM0IWOR4 == "Y")
    OP1REC.OP1COPOF = "Y";
  end


   /* **** update defective allowance override pct*/

  if (OM0IW01.OM0IWOR6 == "Y")
    OP1REC.OP1DFAOF = "Y";
  end


   /* *** update small change overide flag*/

  OP1REC.OP1SSHPO = " ";


end // end OM0IS26

// update the order header
Function OM0IS27()

   /* ************************************************************/
   /* *                                                         **/
   /* *    update the order header.  If the order has been      **/
   /* *    changed since the last read of the order header      **/
   /* *    then an error message will be displayed.             **/
   /* *                                                         **/
   /* ************************************************************/

  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    OP1REC.ZZZCHGDT = TA2REC.TA2GRGGN;
    OP1REC.ZZZCHGTM = TA2REC.TA2TIMHM;
  end


  call "IO0430" ("U ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0)
     /* Tcs include begin 08/25/98*/
    OM0IS-CHECK-UPDATE(); /* for updating corresp vbulk recs*/
   /* Tcs include end   08/25/98*/

  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OM0IW01.OM0IWFL3 = "Y";
      VAGen_EZEMSG = "ORDER HAS PREVIOUSLY BEEN CHANGED";
         /* move 330 to ezemno*/
      set OM0IM001 alarm;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0I    ";
      TA1REC.TA1MAP = "OM0IM001";
      TA1REC.TA1DBASE = "DORDER  ";
      TA1REC.TA1TBLVU = "VORHDR01";
     /* MOVE OP1REC.OP1CUOID TO OMWREC.OMWORDN;*/
     /* MOVE '.' TO OMWSEP1;*/
     /* MOVE OP1REC.OP1NORID TO OMWREC.OMWSORDN;*/
     /* MOVE OMWREC.OMWORD TO TA1REC.TA1TBLKE;*/
      OM0IW01.OM0IORD = OP1REC.OP1CUOID;
      OM0IW01.OM0IPR1 = ".";
      OM0IW01.OM0IORP = OP1REC.OP1NORID;
      OM0IW01.OM0ISPM = OP1REC.SP1ID;
      OM0IW01.OM0ITMP = OP1REC.SP6MDISC;
      OM0IW01.OM0IWHS = OP1REC.XWHCD;
      OM0IW01.OM0IXSO = OP1REC.XSOCD;
      OM0IW01.OM0IPCD = OP1REC.XPPCD;
      OM0IW01.OM0IPKC = OP1REC.XPKCD;
      TA1REC.TA1TBLKE = OM0IW01.OM0IABD;
      TA1REC.TA1LOCAT[3] = "OM0IS27";
      TA1REC.TA1LOCAT[4] = "IO0430";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      transfer to transaction "MN0M" passing COMMAREA;
    end
  end




end // end OM0IS27

// update all items
Function OM0IS28()

   /* ********************************************************/
   /* *                                                     **/
   /* *            Update all the items for this order      **/
   /* *      with the handling codes entered.               **/
   /* *                                                     **/
   /* ********************************************************/


   /* **** Declare the item cursor*/

  OP6REC.OP1PARTN = OP1REC.OP1PARTN;
  OP6REC.OP1CUOID = OP1REC.OP1CUOID;
  OP6REC.OP1NORID = OP1REC.OP1NORID;

  call "IO0450" ("SS", SQLCA, OP6REC) {isNoRefresh = yes, isExternal = yes};


   /* **** Get the first item to change*/


  call "IO0450" ("SN", SQLCA, OP6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0I    ";
      TA1REC.TA1MAP = "OM0IM001";
      TA1REC.TA1DBASE = "DORDER  ";
      TA1REC.TA1TBLVU = "VITEM02";
      OMWREC.OMWORDN = OP6REC.OP1CUOID;
      OMWSEP1 = ".";
      OMWREC.OMWSORDN = OP6REC.OP1NORID;
      TA1REC.TA1TBLKE = OMWREC.OMWORD;
      TA1REC.TA1LOCAT[3] = "OM0IS28";
      TA1REC.TA1LOCAT[4] = "IO0450";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      transfer to transaction "MN0M" passing COMMAREA;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0I    ";
      TA1REC.TA1MAP = "OM0IM001";
      TA1REC.TA1DBASE = "DORDER  ";
      TA1REC.TA1TBLVU = "VITEM02";
      OMWREC.OMWORDN = OP6REC.OP1CUOID;
      OMWSEP1 = ".";
      OMWREC.OMWSORDN = OP6REC.OP1NORID;
      TA1REC.TA1TBLKE = OMWREC.OMWORD;
      TA1REC.TA1LOCAT[3] = "OM0IS28";
      TA1REC.TA1LOCAT[4] = "IO0450";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      transfer to transaction "MN0M" passing COMMAREA;
    end
  end


   /* **** get and update each item*/

  while (SQLCA.VAGen_SQLCODE == 0)
    OM0IS29();
  end


   /* **** close item cursor*/

  call "IO0450" ("CS", SQLCA, OP6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0I    ";
    TA1REC.TA1MAP = "OM0IM001";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VITEM02";
    OMWREC.OMWORDN = OP6REC.OP1CUOID;
    OMWSEP1 = ".";
    OMWREC.OMWSORDN = OP6REC.OP1NORID;
    TA1REC.TA1TBLKE = OMWREC.OMWORD;
    TA1REC.TA1LOCAT[3] = "OM0IS28";
    TA1REC.TA1LOCAT[4] = "IO0450";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    transfer to transaction "MN0M" passing COMMAREA;
  end


   /* **** Commit the changes*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value




end // end OM0IS28

// update each item
Function OM0IS29()

   /* ********************************************************/
   /* *                                                     **/
   /* *            Update each item on the order.           **/
   /* *     If the handling code is blank then do not update**/
   /* *     it.                                             **/
   /* *                                                     **/
   /* ********************************************************/


   /* **** If the handling charge was overriden then update the*/
        /* item with the new handling charge and turn on the*/
        /* override flag for the charge being overriden.*/



  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    OP6REC.ZZZCHGDT = TA2REC.TA2GRGGN;
    OP6REC.ZZZCHGTM = TA2REC.TA2TIMHM;
  end

  OP6REC.XHDCD[1] = OM0IM001.XHDCD[1];
  OP6REC.XHDCHG[1] = OM0IM001.XHDCHG[1];
  sysVar.arrayIndex = 1;
  OM0IW01.XHDCD = OM0IM001.XHDCD[1];
  OM0IW01.XGPCD = OP1REC.XGPCD;
  if (OM0IW01.XHDKEY in XHDTBL.XHDKEY)
    OM0IW01.XHDUCHFL = XHDTBL.XHDUCHFL[sysVar.arrayIndex];
    OM0IW01.OP2HCHGO = OM0IW01.OM0IWOR5[1];
    OM0IM001.OM0IMHTP[1] = OM0IW01.OM0IMHTP;
  end

  OP6REC.OP2HCHGO[1] = OM0IW01.OM0IWOR5[1];


  OP6REC.XHDCD[2] = OM0IM001.XHDCD[2];
  OP6REC.XHDCHG[2] = OM0IM001.XHDCHG[2];
  sysVar.arrayIndex = 1;
  OM0IW01.XHDCD = OM0IM001.XHDCD[2];
  OM0IW01.XGPCD = OP6REC.XGPCD;
  if (OM0IW01.XHDKEY in XHDTBL.XHDKEY)
    OM0IW01.XHDUCHFL = XHDTBL.XHDUCHFL[sysVar.arrayIndex];
    OM0IW01.OP2HCHGO = OM0IW01.OM0IWOR5[2];
    OM0IM001.OM0IMHTP[2] = OM0IW01.OM0IMHTP;
  end
  OP6REC.OP2HCHGO[2] = OM0IW01.OM0IWOR5[2];


  OP6REC.XHDCD[3] = OM0IM001.XHDCD[3];
  OP6REC.XHDCHG[3] = OM0IM001.XHDCHG[3];
  sysVar.arrayIndex = 1;
  OM0IW01.XHDCD = OM0IM001.XHDCD[3];
  OM0IW01.XGPCD = OP6REC.XGPCD;
  if (OM0IW01.XHDKEY in XHDTBL.XHDKEY)
    OM0IW01.XHDUCHFL = XHDTBL.XHDUCHFL[sysVar.arrayIndex];
    OM0IW01.OP2HCHGO = OM0IW01.OM0IWOR5[3];
    OM0IM001.OM0IMHTP[3] = OM0IW01.OM0IMHTP;
  end
  OP6REC.OP2HCHGO[3] = OM0IW01.OM0IWOR5[3];

  OP6REC.XHDCD[4] = OM0IM001.XHDCD[4];
  OP6REC.XHDCHG[4] = OM0IM001.XHDCHG[4];
  sysVar.arrayIndex = 1;
  OM0IW01.XHDCD = OM0IM001.XHDCD[4];
  OM0IW01.XGPCD = OP6REC.XGPCD;
  if (OM0IW01.XHDKEY in XHDTBL.XHDKEY)
    OM0IW01.XHDUCHFL = XHDTBL.XHDUCHFL[sysVar.arrayIndex];
    OM0IW01.OP2HCHGO = OM0IW01.OM0IWOR5[4];
    OM0IM001.OM0IMHTP[4] = OM0IW01.OM0IMHTP;
  end
  OP6REC.OP2HCHGO[4] = OM0IW01.OM0IWOR5[4];

  OP6REC.XHDCD[5] = OM0IM001.XHDCD[5];
  OP6REC.XHDCHG[5] = OM0IM001.XHDCHG[5];
  sysVar.arrayIndex = 1;
  OM0IW01.XHDCD = OM0IM001.XHDCD[5];
  OM0IW01.XGPCD = OP6REC.XGPCD;
  if (OM0IW01.XHDKEY in XHDTBL.XHDKEY)
    OM0IW01.XHDUCHFL = XHDTBL.XHDUCHFL[sysVar.arrayIndex];
    OM0IW01.OP2HCHGO = OM0IW01.OM0IWOR5[5];
    OM0IM001.OM0IMHTP[5] = OM0IW01.OM0IMHTP;
  end
  OP6REC.OP2HCHGO[5] = OM0IW01.OM0IWOR5[5];

   /* IF OP6REC.XHDCD(1) NE ' '*/
    /* OR OP6REC.XHDCD(2) NE ' '*/
    /* or op6rec.xhdcd(3) ne ' '*/
    /* move 'y' to op1rec.*/



   /* **** update the line item.  If the item cannot*/
        /* be found then tell the user that the*/
        /* changes made must be input again*/


  call "IO0450" ("U ", SQLCA, OP6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OM0IW01.OM0IWFL3 = "Y";
      set OM0IM001 alarm;
      converseLib.validationFailed(330);
      return;
    else
      TA1REC.TA1PGMNM = "OM0I    ";
      TA1REC.TA1MAP = "OM0IM001";
      TA1REC.TA1DBASE = "DORDER  ";
      TA1REC.TA1TBLVU = "VITEM02";
      OMWREC.OMWORDN = OP6REC.OP1CUOID;
      OMWSEP1 = ".";
      OMWREC.OMWSORDN = OP6REC.OP1NORID;
      TA1REC.TA1TBLKE = OMWREC.OMWORD;
      TA1REC.TA1LOCAT[3] = "OM0IS29";
      TA1REC.TA1LOCAT[4] = "IO0450";
      XSOPS02(); /* aobrt*/
    end
  end


   /* **** Get the next line item*/


  call "IO0450" ("SN", SQLCA, OP6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1PGMNM = "OM0I    ";
      TA1REC.TA1MAP = "OM0IM001";
      TA1REC.TA1DBASE = "DORDER  ";
      TA1REC.TA1TBLVU = "VITEM02";
      OMWREC.OMWORDN = OP6REC.OP1CUOID;
      OMWSEP1 = ".";
      OMWREC.OMWSORDN = OP6REC.OP1NORID;
      TA1REC.TA1TBLKE = OMWREC.OMWORD;
      TA1REC.TA1LOCAT[3] = "OM0IS29";
      TA1REC.TA1LOCAT[4] = "IO0450";
      XSOPS02(); /* abort*/
    end
  end




end // end OM0IS29

// create picking chg record
Function OM0IS2A()
    /* *****************************************************/
    /* *  create a record to be fed to the picking system **/
    /* *  whenever a chg is made to an order that affects **/
    /* *  picking.***/
    /* *****************************************************/



  OMBREC.XPKCD = OP1REC.XPKCD;
  OMBREC.XPPCD = OP1REC.XPPCD;
  OMBREC.XPACD = OP1REC.XPACD;
  OMBREC.TF1CARCD = OP1REC.TF1CARCD;
  OMBREC.XWHCD = OP1REC.XWHCD;
  OMBREC.OP1CUOID = OP1REC.OP1CUOID;
  OMBREC.OP1PARTN = OP1REC.OP1PARTN;
  OMBREC.OP1NORID = OP1REC.OP1NORID;
  OMBREC.OP1EXPDF = OP1REC.OP1EXPDF;
  OMBREC.OMBMRTYP = "I";
  OMBREC.XHDCD[1] = OP6REC.XHDCD[1];
  OMBREC.XHDCD[2] = OP6REC.XHDCD[2];
  OMBREC.XHDCD[3] = OP6REC.XHDCD[3];
  OMBREC.XHDCD[4] = OP6REC.XHDCD[4];
  OMBREC.XHDCD[5] = OP6REC.XHDCD[5];
  OMBREC.ZZZSDT = OP1REC.ZZZCHGDT;
  OMBREC.ZZHHMMSS = TA2REC.TA2TIMEN;

  SQLCA.VAGen_SQLCODE = 0;

  if (OM0IW01.OM0IW-APPLY-CHG-FL == "Y")

    set WEP1301 empty;

    WEP1301.WEP1301-OPTION-CD = "U";
    WEP1301.WEP1301-CALLING-PGM-ID = "OM0I";
    WEP1301.WEP1301-XXX-USER-ID = COMMAREA.CAUSERID;
    WEP1301.WEP1301-XWH-WHSE-CD = OP1REC.XWHCD;
    WEP1301.WEP1301-PK-ORD-STKTF-ID = OP1REC.OP1CUOID;
    WEP1301.WEP1301-PK-NIKE-ORD-ID = OP1REC.OP1NORID;
    WEP1301.WEP1301-XOS-ORD-STAT-CD = OP1REC.XOSCD;
    WEP1301.WEP1301-XPP-PICK-PRTY-CD = OMBREC.XPPCD;
    WEP1301.WEP1301-TF-CARR-CD = OMBREC.TF1CARCD;
    WEP1301.WEP1301-XHD-HNDL-CD1 = OMBREC.XHDCD[1];
    WEP1301.WEP1301-XHD-HNDL-CD2 = OMBREC.XHDCD[2];
    WEP1301.WEP1301-XHD-HNDL-CD3 = OMBREC.XHDCD[3];
    WEP1301.WEP1301-XHD-HNDL-CD4 = OMBREC.XHDCD[4];
    WEP1301.WEP1301-XHD-HNDL-CD5 = OMBREC.XHDCD[5];
    WEP1301.WEP1301-TODAYS-DATE = OMBREC.ZZZSDT;
    WEP1301.WEP1301-CURRENT-TIME = TA2REC.TA2TIMHM;
    WEP1301.WEP1301-RETURN-CODE = 99;
    TA1REC.TA1TBLKE = WEP1301.WEP1301-PASS-INFO;

    OM0IS-CALL-EP1300();

    if (WEP1301.WEP1301-RETURN-CODE >= 5)
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0I  ";
      TA1REC.TA1MAP = "OM0IM001";
      TA1REC.TA1DBASE = "DPICK";
      TA1REC.TA1TBLVU = "VMPOLH01";
      TA1REC.TA1LOCAT[3] = "OM0IS2A";
      TA1REC.TA1LOCAT[2] = "EP1300";
      TA1REC.TA1LOCAT[1] = WEP1301.WEP1301-RETURN-CODE;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      transfer to transaction "MN0M" passing COMMAREA;
    end

  end

  SQLCA.VAGen_SQLCODE = 0;

  call "IO1680" ("A ", SQLCA, OMBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0I    ";
    TA1REC.TA1MAP = "OM0IM001";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1TBLKE = OM0IW02.OP1KEY;
    TA1REC.TA1LOCAT[3] = "OM0IS2A";
    TA1REC.TA1LOCAT[4] = "IO01680";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    transfer to transaction "MN0M" passing COMMAREA;
  end

end // end OM0IS2A

// create expedite record
Function OM0IS2B()
   /* this stmt grp creates an expedite record*/




   /* first find out if record already exists.*/


  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    OIBREC.ZZZCHGDT = TA2REC.TA2GRGGN;
    OIBREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  end
  OIBREC.OP1PARTN = OP1REC.OP1PARTN;
  OIBREC.OP1CUOID = OP1REC.OP1CUOID;
  OIBREC.OP1NORID = OP1REC.OP1NORID;
  call "IO1880" ("S  ", SQLCA, OIBREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0) /* if rec exists*/
    OIBREC.OIARECST = "A"; /* set it active*/
    OIBREC.ZZZCHGDT = TA2REC.TA2GRGGN;
    OIBREC.ZZZCHGTM = TA2REC.TA2TIMHM;
    call "IO1880" ("U  ", SQLCA, OIBREC) {isNoRefresh = yes, isExternal = yes}; /* and update it*/
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0I    ";
      TA1REC.TA1DBASE = "DORDER  ";
      OMWREC.OMWORDN = OP1REC.OP1CUOID;
      OMWSEP1 = ".";
      OMWREC.OMWSORDN = OP1REC.OP1NORID;
      TA1REC.TA1TBLKE = OMWREC.OMWORD;
      TA1REC.TA1TBLVU = "VXPDIT01";
      TA1REC.TA1LOCAT[2] = "U      ";
      TA1REC.TA1LOCAT[3] = "OM0IS2B";
      TA1REC.TA1LOCAT[4] = "IO1880";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* rec not found try to add*/
      OIBREC.OP1PARTN = OP1REC.OP1PARTN;
      OIBREC.OP1CUOID = OP1REC.OP1CUOID;
      OIBREC.OP1NORID = OP1REC.OP1NORID;
      OIBREC.KUCCOID = OP1REC.KUCCOID;
      OIBREC.KUMSTRID = OP1REC.KUMSTRID;
      OIBREC.XNXCD = OP1REC.XNXCD;
      OIBREC.XOTCD = OP1REC.XOTCD;
      OIBREC.XSOCD = OP1REC.XSOCD;
      OIBREC.OP1CUNDT = OP1REC.OP1CUNDT;
      OIBREC.XOSCD = OP1REC.XOSCD;
      OIBREC.XWHCD = OP1REC.XWHCD;
      OIBREC.OP1NTMAL = OP1REC.OP1NTMAL;
      OIBREC.OIARECST = "A";
      OIBREC.OIBPGM = "OM0I";
      OIBREC.ZZZCHGCT = 0;
      KUMREC.KUCCOID = OP1REC.KUCCOID;
      KUMREC.KUMSTRID = OP1REC.KUMSTRID;

      call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};

      if (SQLCA.VAGen_SQLCODE == 0)
        OIBREC.KUMSTSNM = KUMREC.KUMSTSNM;
      else
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1PGMNM = "OM0I    ";
        TA1REC.TA1DBASE = "DCUST   ";
        OMAREC.OMACUCO = KUMREC.KUCCOID;
        OMAREC.OMASEP1 = ".";
        OMAREC.OMACUSR = KUMREC.KUMSTRID;
        TA1REC.TA1TBLKE = OMAREC.OMACUNO;
        TA1REC.TA1TBLVU = "VSTORE01";
        TA1REC.TA1LOCAT[3] = "OM0IS2B";
        TA1REC.TA1LOCAT[4] = "IO0340";
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        XSPF4();
      end

      call "IO1880" ("A  ", SQLCA, OIBREC) {isNoRefresh = yes, isExternal = yes};

      if (SQLCA.VAGen_SQLCODE == 0)
        /* next sentence*/
      else
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "OM0I    ";
        OMWREC.OMWORDN = OP1REC.OP1CUOID;
        OMWSEP1 = ".";
        OMWREC.OMWSORDN = OP1REC.OP1NORID;
        TA1REC.TA1TBLKE = OMWREC.OMWORD;
        TA1REC.TA1DBASE = "DORDER  ";
        TA1REC.TA1TBLVU = "VXPDIT01";
        TA1REC.TA1LOCAT[2] = "A      ";
        TA1REC.TA1LOCAT[3] = "OM0IS2B";
        TA1REC.TA1LOCAT[4] = "IO1880";
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        XSPF4();
      end
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0I    ";
      TA1REC.TA1DBASE = "DORDER  ";
      OMWREC.OMWORDN = OP1REC.OP1CUOID;
      OMWSEP1 = ".";
      OMWREC.OMWSORDN = OP1REC.OP1NORID;
      TA1REC.TA1TBLKE = OMWREC.OMWORD;
      TA1REC.TA1TBLVU = "VXPDIT01";
      TA1REC.TA1LOCAT[2] = "S      ";
      TA1REC.TA1LOCAT[3] = "OM0IS2B";
      TA1REC.TA1LOCAT[4] = "IO1880";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end



end // end OM0IS2B

// edit screen data
Function OM0IS30()

   /* ***********************************************************/
   /* *                                                        **/
   /* *            Edits will be done in bottom to top order.  **/
   /* *     This will set all fields in error bright but the   **/
   /* *     cursor and the error message will correspond to the**/
   /* *     top most error.                                    **/
   /* *                                                        **/
   /* ***********************************************************/


  OM0IW01.OM0IWFL1 = "N"; /* set error flag*/

  if (OM0IM001.XOACD is modified)
    OM0IS60(); /* edit override auth*/
  else
    set OM0IM001.XOACD initialAttributes; /* set ovrd author field normal*/
  end


   /* **** edit the handling codes.*/


  OM0IW01.OM0IWIDX = 5;
  while (OM0IW01.OM0IWIDX > 0)
    if (OM0IM001.XHDCD[OM0IWIDX] is modified
     || OM0IM001.XHDCHG[OM0IWIDX] is modified)
      OM0IS31();
                                   /* edit handling codes*/
    end
    OM0IW01.OM0IWIDX = OM0IW01.OM0IWIDX - 1;
  end


   /* **** edit the order desk field*/

  if (OM0IM001.OP1ODSKF is modified)
    OM0IS37(); /* edit order desk*/
  end

   /* **** edit the customer pack code*/

  if (OM0IM001.XPACD is modified)
    OM0IS3A(); /* edit pack code*/
  end

   /* **** edit the ship with order number*/

  if (OM0IM001.OP1SWORD is modified)
    OM0IS38(); /* edit ship with order*/
  end


  if (OM0IM001.TF1CARCD is modified) /* added ssj 6/20/87*/
    OM0IS32(); /* edit carrier code*/
  end


   /* **** edit the po money month*/

  if (OM0IM001.OP1WIPIN is modified)
    OM0IS33(); /* edit po money month*/
  end


   /* **** edit the pick code*/

  if (OM0IM001.XPKCD is modified)
    OM0IS39(); /* edit pick code*/
  end


   /* **** edit the pick priority*/

  if (OM0IM001.XPPCD is modified)
    OM0IS40(); /* edit pick priority*/
  end


  if (OM0IM001.OP1EXPDF is modified) /* if the expedite flag has been chged*/
    if (OM0IM001.OP1EXPDF == "Y"
     || OM0IM001.OP1EXPDF == "N")
      if (OP1REC.XWHCD != "51") /* If not Memphis apparel*/
        OM0IW01.OM0IWPCH = "Y";
      end
    else
      set OM0IM001.OP1EXPDF cursor, modified, bold;
      converseLib.validationFailed(238);
      OM0IW01.OM0IWFL1 = "Y";
    end
  end

   /* **** edit the invoice as of date*/

  if (OM0IM001.OM0IMIDT is modified)
    OM0IS4B();
                                   /* EDIT INVOICE AS OF DATE*/
  end


   /* **** edit the small order charge*/

  OP1REC.OP1SSHPO = " "; /* EDIT SMALL ORDER CHARG*/



       /* set the terms & discounts error flag*/

  OM0IW01.OM0IWTER = "0";


   /* **** edit the co-op percent*/

  if (OM0IM001.XCPPCT is modified)
    if (OM0IW01.OM0IWTER == "Y")
       /* next sentence*/
    else
      OM0IW01.OM0IWTER = "N";
    end
    OM0IS44();
  end


   /* **** edit the ad-allowance percents*/

  if (OM0IM001.XAAPCT is modified
   || OM0IM001.OP1AAFCP is modified
   || OM0IM001.OP1AABKP is modified)
    if (OM0IW01.OM0IWTER == "Y")
       /* next sentence*/
    else
      OM0IW01.OM0IWTER = "N";
    end
    OM0IS45();
  end

   /* **** edit the trade discount percents*/

  if (OM0IM001.XTDPCT is modified
   || OM0IM001.OP1TDFCP is modified
   || OM0IM001.OP1TDBKP is modified)
    if (OM0IW01.OM0IWTER == "Y")
       /* next sentence*/
    else
      OM0IW01.OM0IWTER = "N";
    end
    OM0IS47();
  end


   /* **** edit the defective allowance percent*/

  if (OM0IM001.XDAPCT is modified)
    if (OM0IW01.OM0IWTER == "Y")
       /* next sentence*/
    else
      OM0IW01.OM0IWTER = "N";
    end
    OM0IS48();
  end


   /* **** edit the payment terms code*/

  if (OM0IM001.XPTCD is modified)
    OM0IS49();
  end


  if (OM0IM001.OP1TLVLN is modified)
    OM0IST2(); /* edit tier level*/
  end



   /* **** edit total discount percent-- only if no errors*/

  if (OM0IW01.OM0IWTER == "N")
    OM0IS4A();
  end

      /* edit Order status in the Mirror Pick Pool*/

  OM0IW01.OM0IW-APPLY-CHG-FL = "N";

  if (OP1REC.XWHCD == "51")

    if (OM0IW01.OM0IWPCH == "Y"
     && (OP1REC.XOSCD == "PA" || OP1REC.XOSCD == "AL"))

      set WEP1301 empty;

      WEP1301.WEP1301-OPTION-CD = "ED";
      WEP1301.WEP1301-CALLING-PGM-ID = "OM0I";
      WEP1301.WEP1301-XWH-WHSE-CD = OP1REC.XWHCD;
      WEP1301.WEP1301-PK-ORD-STKTF-ID = OP1REC.OP1CUOID;
      WEP1301.WEP1301-PK-NIKE-ORD-ID = OP1REC.OP1NORID;
      WEP1301.WEP1301-XOS-ORD-STAT-CD = OP1REC.XOSCD;
      WEP1301.WEP1301-TF-CARR-CD = OM0IM001.TF1CARCD;
      WEP1301.WEP1301-RETURN-CODE = 99;
      TA1REC.TA1TBLKE = WEP1301.WEP1301-PASS-INFO;

      OM0IS-CALL-EP1300();

      if (WEP1301.WEP1301-RETURN-CODE == 0) /* Status OK*/
        OM0IW01.OM0IW-APPLY-CHG-FL = "Y";
      else
        OM0IW01.OM0IW-APPLY-CHG-FL = "N";
        if (WEP1301.WEP1301-RETURN-CODE == 2
         || WEP1301.WEP1301-RETURN-CODE == 3
         || WEP1301.WEP1301-RETURN-CODE == 4)
          converseLib.validationFailed(968);
          OM0IW01.OM0IWFL1 = "Y";
          set OM0IM001.XPPCD cursor;
        else
          if (WEP1301.WEP1301-RETURN-CODE == 9)
            converseLib.validationFailed(969);
            OM0IW01.OM0IWFL1 = "Y";
            set OM0IM001.XPPCD cursor;
          else
            if (WEP1301.WEP1301-RETURN-CODE == 10)
              converseLib.validationFailed(315);
              OM0IW01.OM0IWFL1 = "Y";
              set OM0IM001.XPPCD cursor;
            else
              if (WEP1301.WEP1301-RETURN-CODE >= 5)
                TA1REC.TA1DBASE = "DPICK";
                TA1REC.TA1TBLVU = "VMPOLH01";
                TA1REC.TA1LOCAT[3] = "OM0IS30";
                TA1REC.TA1LOCAT[2] = "EP1300";
                TA1REC.TA1LOCAT[1] = WEP1301.WEP1301-RETURN-CODE;
                XSOPS02();
              end
            end
          end
        end
      end

    end

  end
end // end OM0IS30

// edit handling codes
Function OM0IS31()

   /* ***********************************************************/
   /* *                                                        **/
   /* *         Edit the handling codes.                       **/
   /* *                                                        **/
   /* *                                                        **/
   /* ***********************************************************/


  set OM0IM001.XHDCD[OM0IWIDX] initialAttributes;
  set OM0IM001.XHDCHG[OM0IWIDX] initialAttributes;


   /* **** Check to determine if the handling is valid*/

        /* How to decipfer this if statement...*/

        /* If the field was modified then editing must be done*/
           /* on the field.*/
           /* If the handling code was blanked out then blank*/
              /* out the abreviation and charge field and the*/
              /* overide authorization flag.  This will alow*/
              /* the user to get rid of any handling code*/
              /* they previously entered.*/
           /* If a handling code was entered then verify that*/
              /* it is a valid code.  If not display an error*/
              /* message. The code must be on the pack handle*/
              /* table and must have a status of 'active'.*/
              /* If a handling charge was entered and is*/
                 /* different from the handling charge on the*/
                 /* pack handle table then a flag must be set*/
                 /* so that an overide authorization has to be*/
                 /* entered.*/

  OM0IW01.OM0IMHTP = " ";

  if (OM0IM001.XHDCD[OM0IWIDX] == " ")
    OM0IM001.XHDABRV[OM0IWIDX] = " ";
    OM0IM001.XHDCHG[OM0IWIDX] = 0;
    return;
  end


  sysVar.arrayIndex = 1;
  OM0IW01.XHDCD = OM0IM001.XHDCD[OM0IWIDX];
  OM0IW01.XGPCD = OP1REC.XGPCD;
  if (OP1REC.ZFC-CRCY-CD == " ")
    OP1REC.ZFC-CRCY-CD = "USD"; /* added if statement for CANA*/
  end
  if (OM0IW01.XHDKEY in XHDTBL.XHDKEY
   && XHDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
     /* Added currency code check for Canada - CANA*/
    if (XHDTBL.ZFC-CRCY-CD[sysVar.arrayIndex] == OP1REC.ZFC-CRCY-CD) /* crcy cds match*/
      OM0IM001.XHDABRV[OM0IWIDX] = XHDTBL.XHDABRV[sysVar.arrayIndex];
      OM0IW01.XHDUCHFL = XHDTBL.XHDUCHFL[sysVar.arrayIndex];
    else
      OM0IW01.OM0IWFL1 = "Y";
      set OM0IM001.XHDCD[OM0IWIDX] cursor, modified, bold;
      set OM0IM001 alarm;
      converseLib.validationFailed(904);
      return;
    end
  else
    OM0IW01.OM0IWFL1 = "Y";
    set OM0IM001.XHDCD[OM0IWIDX] cursor, modified, bold;
    set OM0IM001 alarm;
    converseLib.validationFailed(120);
    return;
  end


  if (OM0IM001.XHDCHG[OM0IWIDX] is modified
   && OM0IM001.XHDCHG[OM0IWIDX] != XHDTBL.XHDCHG[sysVar.arrayIndex])
    OM0IS60();
    if (OM0IW01.OM0IWFL2 == "Y")
      set OM0IM001.XHDCHG[OM0IWIDX] modified, bold;
    else
      OM0IW01.OM0IWOR5[OM0IWIDX] = "Y";
      OM0IW01.OP2HCHGO = "*";
    end
  else
    OM0IM001.XHDCHG[OM0IWIDX] = XHDTBL.XHDCHG[sysVar.arrayIndex];
    OM0IW01.OM0IWOR5[OM0IWIDX] = "N";
    OM0IW01.OP2HCHGO = " ";
  end

  OM0IM001.OM0IMHTP[OM0IWIDX] = OM0IW01.OM0IMHTP;




   /* **** The handling codes cannot be the same*/


  if (OM0IM001.XHDCD[1] != " ")
    if (OM0IM001.XHDCD[1] == OM0IM001.XHDCD[2])
      OM0IW01.OM0IWFL1 = "Y";
      set OM0IM001.XHDCD[1] cursor, modified, bold;
      set OM0IM001.XHDCD[2] modified, bold;
      set OM0IM001 alarm;
      return;
    end
    if (OM0IM001.XHDCD[1] == OM0IM001.XHDCD[3])
      OM0IW01.OM0IWFL1 = "Y";
      set OM0IM001.XHDCD[1] cursor, modified, bold;
      set OM0IM001.XHDCD[3] modified, bold;
      set OM0IM001 alarm;
      return;
    end
    if (OM0IM001.XHDCD[1] == OM0IM001.XHDCD[4])
      OM0IW01.OM0IWFL1 = "Y";
      set OM0IM001.XHDCD[1] cursor, modified, bold;
      set OM0IM001.XHDCD[4] modified, bold;
      set OM0IM001 alarm;
      return;
    end
    if (OM0IM001.XHDCD[1] == OM0IM001.XHDCD[5])
      OM0IW01.OM0IWFL1 = "Y";
      set OM0IM001.XHDCD[1] cursor, modified, bold;
      set OM0IM001.XHDCD[5] modified, bold;
      set OM0IM001 alarm;
      return;
    end
  end

  if (OM0IM001.XHDCD[2] != " ")
    if (OM0IM001.XHDCD[2] == OM0IM001.XHDCD[3])
      OM0IW01.OM0IWFL1 = "Y";
      set OM0IM001.XHDCD[2] cursor, modified, bold;
      set OM0IM001.XHDCD[3] modified, bold;
      set OM0IM001 alarm;
      return;
    end
  end

  if (OM0IM001.XHDCD[2] != " ")
    if (OM0IM001.XHDCD[2] == OM0IM001.XHDCD[4])
      OM0IW01.OM0IWFL1 = "Y";
      set OM0IM001.XHDCD[2] cursor, modified, bold;
      set OM0IM001.XHDCD[4] modified, bold;
      set OM0IM001 alarm;
      return;
    end
  end

  if (OM0IM001.XHDCD[2] != " ")
    if (OM0IM001.XHDCD[2] == OM0IM001.XHDCD[5])
      OM0IW01.OM0IWFL1 = "Y";
      set OM0IM001.XHDCD[2] cursor, modified, bold;
      set OM0IM001.XHDCD[5] modified, bold;
      set OM0IM001 alarm;
      return;
    end
  end

  if (OM0IM001.XHDCD[3] != " ")
    if (OM0IM001.XHDCD[3] == OM0IM001.XHDCD[4])
      OM0IW01.OM0IWFL1 = "Y";
      set OM0IM001.XHDCD[3] cursor, modified, bold;
      set OM0IM001.XHDCD[4] modified, bold;
      set OM0IM001 alarm;
      return;
    end
  end

  if (OM0IM001.XHDCD[3] != " ")
    if (OM0IM001.XHDCD[3] == OM0IM001.XHDCD[5])
      OM0IW01.OM0IWFL1 = "Y";
      set OM0IM001.XHDCD[3] cursor, modified, bold;
      set OM0IM001.XHDCD[5] modified, bold;
      set OM0IM001 alarm;
      return;
    end
  end

  if (OM0IM001.XHDCD[4] != " ")
    if (OM0IM001.XHDCD[4] == OM0IM001.XHDCD[5])
      OM0IW01.OM0IWFL1 = "Y";
      set OM0IM001.XHDCD[4] cursor, modified, bold;
      set OM0IM001.XHDCD[5] modified, bold;
      set OM0IM001 alarm;
      return;
    end
  end
  OM0IW01.OM0IWPCH = "Y"; /* set pick chg flag to yes*/




end // end OM0IS31

// validate carrier code
Function OM0IS32()

   /* *******************************************************/
   /* *                                                    **/
   /* *                Set up the carrier field            **/
   /* *                                   added ssj 6/20/87**/
   /* *******************************************************/

  set OM0IM001.TF1CARCD initialAttributes; /* reset attributes*/


  if (OM0IM001.TF1CARCD == " ")
    OM0IM001.TF1ABRV = " ";
    OM0IW01.OM0IWPCH = "Y";
  else
    TF1REC.TF1CARCD = OM0IM001.TF1CARCD;
    call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      if (TF1REC.XXXSTAT == "A") /* active carrier*/
        OM0IM001.TF1ABRV = TF1REC.TF1ABRV;
        OM0IW01.OM0IWPCH = "Y"; /* set pick chg flag to yes*/
      else
        OM0IM001.TF1ABRV = " ";
        converseLib.validationFailed(154);
        OM0IW01.OM0IWFL1 = "Y";
        set OM0IM001.TF1CARCD cursor, modified, bold;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        OM0IM001.TF1ABRV = " ";
        converseLib.validationFailed(194);
        OM0IW01.OM0IWFL1 = "Y";
        set OM0IM001.TF1CARCD cursor, modified, bold;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          OM0IM001.TF1ABRV = " ";
          converseLib.validationFailed(006);
          OM0IW01.OM0IWFL1 = "Y";
          set OM0IM001.TF1CARCD cursor, modified, bold;
        else
          TA1REC.TA1TYPE = "DB2";
          TA1REC.TA1FUNC = "RETN";
          TA1REC.TA1PGMNM = "OM0I";
          TA1REC.TA1MAP = "OM0IM001";
          TA1REC.TA1DBASE = "TF1REC  ";
          TA1REC.TA1TBLVU = "VCARR001";
          TA1REC.TA1TBLKE = OM0IM001.TF1CARCD;
          TA1REC.TA1LOCAT[3] = "OM0IS32";
          TA1REC.TA1LOCAT[4] = "IO0860";
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
          transfer to transaction "MN0M" passing COMMAREA;
        end
      end
    end
  end



end // end OM0IS32

// edit po money month
Function OM0IS33()

   /* ***********************************************************/
   /* *                                                        **/
   /* *        Edit the po money month. value entered must     **/
   /* *   be a valid month or zero or spaces.                  **/
   /* *                                                        **/
   /* ***********************************************************/


   /* **** set the field to normal intensity*/

  set OM0IM001.OP1WIPIN initialAttributes;


   /* **** edit field*/

  if (OM0IM001.OP1WIPIN == " ")
    return;
  end

  if (OM0IM001.OP1WIPIN >= "01"
   && OM0IM001.OP1WIPIN <= "12")
    return;
  else
    converseLib.validationFailed(912); /* po money month not a valid month*/
    set OM0IM001.OP1WIPIN cursor, modified, bold;
    set OM0IM001 alarm;
  end


end // end OM0IS33

// edit the order desk field
Function OM0IS37()

   /* ***********************************************************/
   /* *                                                        **/
   /* *          Edit the order desk field.  The only valid    **/
   /* *     values are 'N' and 'Y'.                            **/
   /* *                                                        **/
   /* ***********************************************************/


   /* **** set the field back to normal intensity*/

  set OM0IM001.OP1ODSKF initialAttributes;


  if (OM0IM001.OP1ODSKF == "Y"
   || OM0IM001.OP1ODSKF == "N")
      /* next sentence*/
  else
    set OM0IM001.OP1ODSKF cursor, modified, bold;
    set OM0IM001 alarm;
    converseLib.validationFailed(28);
  end




end // end OM0IS37

// edit ship with order field
Function OM0IS38()

   /* ***********************************************************/
   /* *                                                        **/
   /* *         Edit the ship with order field.  The order     **/
   /* *   number entered must be a valid customer order        **/
   /* *                                                        **/
   /* *   Added logic for Canadian orders.  The xdz-data-dist- **/
   /* *   cd must match between the ship-to-order and the      **/
   /* *   order being modified.                                **/
   /* *                                                        **/
   /* *   An sqlcode of -811 means that there are more than    **/
   /* *   one suborder for the cust order id                   **/
   /* *                                                        **/
   /* ***********************************************************/


   /* **** set the field to normal intensity*/

  set OM0IM001.OP1SWORD initialAttributes;


   /* **** Zero is ok*/

  if (OM0IM001.OP1SWORD == 0)
    return;
  end





  OM0IW02.OP1CUOID = OM0IM001.OP1SWORD;
  OM0IW01.OM0IWORD = OM0IM001.OP1SWORD;
  OM0IW02.OP1PARTN = OM0IW01.OP1PARTN;


  call "IO0430" ("ST", SQLCA, OM0IW02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (OP1REC.XDZ-DATA-DIST-CD != OM0IW02.XDZ-DATA-DIST-CD) /* added for*/
      OM0IW01.OM0IWFL1 = "Y"; /* Canada- CANA*/
      set OM0IM001.OP1SWORD cursor, modified, bold;
      set OM0IM001 alarm;
      converseLib.validationFailed(905);
    end
  else
    if (SQLCA.VAGen_SQLCODE == -811)
         /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        OM0IW01.OM0IWFL1 = "Y";
        set OM0IM001.OP1SWORD cursor, modified, bold;
        set OM0IM001 alarm;
        converseLib.validationFailed(32);
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "OM0I    ";
        TA1REC.TA1MAP = "OM0IM001";
        TA1REC.TA1DBASE = "DORDER  ";
        TA1REC.TA1TBLVU = "VORHDR01";
        TA1REC.TA1TBLKE = OM0IW02.OP1KEY;
        TA1REC.TA1LOCAT[3] = "OM0IS38";
        TA1REC.TA1LOCAT[4] = "IO0430";
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        transfer to transaction "MN0M" passing COMMAREA;
      end
    end
  end




end // end OM0IS38

// edit the pick code
Function OM0IS39()

   /* ***********************************************************/
   /* *                                                        **/
   /* *        Edit the pick code.  The value entered must     **/
   /* *   be on the xpktbl table.                              **/
   /* *                                                        **/
   /* *   Added logic for Canada warehouse '42'.               **/
   /* *                                                        **/
   /* *   TT#9179: Change added to prevent Warehouse '07' users**/
   /* *   from entering Pick code 20.                          **/
   /* *                                                        **/
   /* ***********************************************************/


   /* **** set the field to normal intensity*/

  set OM0IM001.XPKCD initialAttributes;

   /* **** edit field*/

  if (OM0IM001.XPKCD == " ")
    if (OP1REC.XWHCD != "51")
      OM0IW01.OM0IWPCH = "Y";
    end
    OM0IM001.XPKABRV = " ";
  else
    if (OM0IM001.XPKCD == "40") /* picking code*/
      if (OP1REC.XWHCD == "51" /* whse code*/
       || OP1REC.XWHCD == "25" /* whse code*/
       || OP1REC.XWHCD == "27") /* whse code*/
           /* next sentence*/
      else
        if (OP1REC.XWHCD == "42" /* Canada whse code*/
         && OP1REC.XGPCD == "03") /* apperal only - CANA*/
           /* next sentence*/
        else
          OM0IW01.OM0IWFL1 = "Y";
          converseLib.validationFailed(906); /* picking code not valid for warehouse*/
        end
      end
    else
      if (OM0IM001.XPKCD in XPKTBL.XPKCD)
        if (XPKTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          OM0IM001.XPKABRV = XPKTBL.XPKABRV[sysVar.arrayIndex];
          if (OP1REC.XWHCD != "51")
            OM0IW01.OM0IWPCH = "Y"; /* set pick chg flag to yes*/
          end
        else
          OM0IW01.OM0IWFL1 = "Y";
          converseLib.validationFailed(111); /* picking code not valid*/
        end
      else
        OM0IW01.OM0IWFL1 = "Y";
        converseLib.validationFailed(111); /* picking code not valid*/
      end
    end
  end

   /* TT#9179 Change begin      12/01/00*/
  if (OM0IM001.XPKCD == "20") /* picking code*/
    if (OP1REC.XWHCD == "07") /* WHSE CODE 07*/
      OM0IW01.OM0IWFL1 = "Y";
      converseLib.validationFailed(1012); /* picking code not valid*/
    end
  end
   /* TT#9179 Change end*/

  if (OM0IW01.OM0IWFL1 == "Y")
    set OM0IM001.XPKCD cursor, modified, bold;
    set OM0IM001 alarm;
  end


end // end OM0IS39

// edit packing code
Function OM0IS3A()
   /* 08/16/91 JLoyer Log #675  Don't allow the xpacd to be*/
   /* changed if the order is allocated*/

  if (OP1REC.XOSCD == "AL") /* if order is allocated*/
    OM0IM001.XPACD = OP1REC.XPACD; /* move old xpacd to map*/
    converseLib.validationFailed(690); /* cannot change xpacd msg*/
    set OM0IM001.XPACD cursor, bold;
    OM0IW01.OM0IWFL1 = "Y"; /* error flag*/
    return;
  end

   /* the following is removed per sandi clark - allow pack code changes*/
   /* and removal if prepack exists     06/05/97*/

   /* THIS STATEMENT GROUP CHECKS THE PREPACK DATABASE*/
   /* TO SEE IF THE ORDER EXISTS*/

   /* MOVE 1 TO EZETST;*/

   /* BUILD THE KEY TO SPECIFIED PREPACK TABLE*/

   /* SET OSNREC EMPTY;*/
   /* SET SQLCA EMPTY;*/

   /* MOVE OP1REC.XWHCD TO OSNREC.XWHCD;/* WAREHOUSE*/
   /* MOVE OP1REC.OP1PARTN TO OSNREC.OP1PARTN;/* PART CHAR*/
   /* MOVE OP1REC.OP1CUOID TO OSNREC.OP1CUOID;/* ORDER NUM*/
   /* MOVE OP1REC.OP1NORID TO OSNREC.OP1NORID;/* NIKE ORD ID*/

   /* CALL IO5650 'SE',SQLCA,OSNREC (NOMAPS,NONCSP;*/

   /* IF SQLCA.SQLCODE EQ 0*/
    /* OR SQLCA.SQLCODE EQ -811;      /* multi records found*/
    /* MOVE OP1REC.XPACD TO OM0IM001.XPACD;/* move old one back*/
    /* MOVE 691 TO EZEMNO;*/
    /* SET OM0IM001.XPACD CURSOR,BRIGHT;*/
    /* MOVE 'Y' TO OM0IW01.OM0IWFL1;  /* error flag*/
    /* EZERTN;*/
   /* ELSE;*/
    /* IF SQLCA.SQLCODE EQ -911;*/
      /* MOVE 'Y' TO OM0IW01.OM0IWFL1;/* error flag*/
      /* MOVE 672 TO EZEMNO;          /* prepack db busy try again*/
      /* EZERTN;*/
    /* ELSE;*/
      /* IF SQLCA.SQLCODE NE 100;*/
        /* MOVE 'Y' TO OM0IW01.OM0IWFL1;/* error flag*/
        /* MOVE 'DB2 ' TO TA1REC.TA1TYPE;*/
       /* MOVE 'RETN' TO TA1REC.TA1FUNC;*/
       /* MOVE 'OM0I    ' TO TA1REC.TA1PGMNM;*/
       /* MOVE 'SE      ' TO TA1REC.TA1LOCAT(1);*/
       /* MOVE 'OM0IS00 ' TO TA1REC.TA1LOCAT(2);*/
       /* MOVE 'IO5650  ' TO TA1REC.TA1LOCAT(3);*/
       /* MOVE 'DORDER  ' TO TA1REC.TA1DBASE;*/
       /* MOVE 'VCSPRP01' TO TA1REC.TA1TBLVU;*/
       /* MOVE OP1REC.OP1CUOID TO OMWREC.OMWORDN;*/
       /* MOVE '.' TO OMWREC.OMWSEP1;*/
       /* MOVE OP1REC.OP1NORID TO OMWREC.OMWSORDN;*/
       /* MOVE OMWREC.OMWORD TO TA1REC.TA1TBLKE;*/
       /* CALL TA0020 TA1REC,SQLCA (REPLY,NONCSP;*/
       /* MOVE 'PREPACK DB PROBLEMS' TO COMMAREA.CAMSGA;*/
       /* MOVE 'ORDER MAY HAVE PREPACK CALL USER ANALYST' COMMAREA.CAMSGB;*/
       /* MOVE 'OM0M' TO COMMAREA.CACURRAP;*/
       /* DXFR OM0M COMMAREA;*/
      /* END;*/
    /* END;*/
   /* END;*/


  set OM0IM001.XPACD initialAttributes; /* reset attribute*/

   /* this statement group edits pack code*/

   /* removed 06/05/97*/

   /* IF OM0IM001.XPACD = ' ';         /* no pack entered*/
    /* EZERTN;*/
   /* END;*/

  if (OM0IM001.XPACD != " ")
    sysVar.arrayIndex = 1;
    if (OM0IM001.XPACD in XPATBL.XPACD
     && XPATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      converseLib.validationFailed(647); /* invalid pack code*/
      OM0IW01.OM0IWFL1 = "Y";
      set OM0IM001.XPACD cursor, bold;
    end
  end



  if (OM0IM001.XPACD == "MS")
    if (OP1REC.XDSCD == "1"
     || OP1REC.XDSCD == "2")
      /* continue - code is valid*/
    else
      converseLib.validationFailed(810); /* pack code invalid for non-direct ship*/
      OM0IW01.OM0IWFL1 = "Y";
      set OM0IM001.XPACD cursor, bold;
    end
   /* don't allow non-ms pack code for non-direct ship 06/05/97*/
  else
    if (OM0IM001.XPACD != " ")
      if (OP1REC.XDSCD == "1")
        OM0IM001.XPACD = OP1REC.XPACD; /* move old one back*/
        converseLib.validationFailed(813); /* pack code invalid for direct ship*/
        OM0IW01.OM0IWFL1 = "Y";
        set OM0IM001.XPACD cursor, bold;
      end
    end
  end

   /* edit for musical size runs - can't add 'MS' pack code to an order*/

  if (OM0IM001.XPACD == "MS"
   && OP1REC.XPACD != "MS")
    OM0IM001.XPACD = OP1REC.XPACD; /* move old one back*/
    converseLib.validationFailed(647); /* invalid pack code*/
    OM0IW01.OM0IWFL1 = "Y";
    set OM0IM001.XPACD cursor, bold;
  end


   /* update prepack if pack code is changed   06/05/97*/
   /* delete prepack if pack code is removed*/
  if (OM0IW01.OM0IWFL1 == "Y") /* error in previous steps*/
   /* next sentence*/
  else
    if (OM0IM001.XPACD != OP1REC.XPACD)
      OM0IS-CHK-PREPACK();
    end
  end



end // end OM0IS3A

// edit the pick priority field
Function OM0IS40()

   /* ***********************************************************/
   /* *                                                        **/
   /* *        Edit the pick priority.  the value entered must **/
   /* *   be on the xpptbl table.                              **/
   /* *                                                        **/
   /* ***********************************************************/


   /* **** set the field to normal intensity*/

  set OM0IM001.XPPCD initialAttributes;


   /* **** edit field*/

  if (OM0IM001.XPPCD == " ")
    OM0IM001.XPPABRV = " ";
    OM0IW01.OM0IWPCH = "Y";
  else
    if (OM0IM001.XPPCD in XPPTBL.XPPCD)
      if (XPPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        OM0IM001.XPPABRV = XPPTBL.XPPABRV[sysVar.arrayIndex];
        OM0IW01.OM0IWPCH = "Y"; /* set pick chg flag to yes*/
        /* SLarse Begin*/
        /* multiple GPC project change: added GPC '02' & whse '51'*/
        /* to handle Equipment from whse 51*/
        if ((OP1REC.XGPCD == "03" || 
        (OP1REC.XGPCD == "02" && OP1REC.XWHCD == "51")) && 
        OP1REC.XDZ-DATA-DIST-CD != "CA" && 
        (OP1REC.XPPCD == " " || 
        OP1REC.XPPCD == "30") && 
        (OM0IM001.XPPCD == "10" || 
        OM0IM001.XPPCD == "20") && 
        OP1REC.OP1EXPDF == "N" && 
        OM0IM001.OP1EXPDF == "N")
          OP1REC.XPPCD = OM0IM001.XPPCD;
          OP1REC.OP1EXPDF = "Y";
          OM0IM001.OP1EXPDF = "Y";
          converseLib.validationFailed(924);
          OM0IW01.OM0IWFL1 = "Y";
          set OM0IM001.OP1EXPDF cursor;
        end
        if ((OP1REC.XGPCD == "03" || 
        (OP1REC.XGPCD == "02" && OP1REC.XWHCD == "51")) && 
        OP1REC.XDZ-DATA-DIST-CD != "CA" && 
        (OP1REC.XPPCD == "10" || 
        OP1REC.XPPCD == "20") && 
        (OM0IM001.XPPCD == " " || 
        OM0IM001.XPPCD == "30") && 
        OP1REC.OP1EXPDF == "Y" && 
        OM0IM001.OP1EXPDF == "Y")
          OP1REC.XPPCD = OM0IM001.XPPCD;
          OP1REC.OP1EXPDF = "N";
          OM0IM001.OP1EXPDF = "N";
          converseLib.validationFailed(924);
          OM0IW01.OM0IWFL1 = "Y";
          set OM0IM001.OP1EXPDF cursor;
        end
        /* SLarse End*/
      else
        OM0IW01.OM0IWFL1 = "Y";
        set OM0IM001.XPPCD cursor, modified, bold;
        set OM0IM001 alarm;
        converseLib.validationFailed(111);
      end
    else
      OM0IW01.OM0IWFL1 = "Y";
      set OM0IM001.XPPCD cursor, modified, bold;
      set OM0IM001 alarm;
      converseLib.validationFailed(111);
    end
  end


end // end OM0IS40

// edit the co-op percent
Function OM0IS44()

      /* *********************************************************/
      /* * the entered co-op percent must be in the xcptbl table**/
      /* * and the co-op override flag is set to 'y' only when  **/
      /* * the entered co-op percent is different with the old  **/
      /* * percent                                              **/
      /* *********************************************************/


  set OM0IM001.XCPPCT initialAttributes;


  if (OM0IM001.XCPPCT in XCPTBL.XCPPCT
   && XCPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    if (OM0IM001.XCPPCT == OP1REC.XCPPCT)
      OM0IM001.OM0IMCO = " ";
      OM0IW01.OM0IWOR4 = "N";
    else
      OM0IS60(); /* check the authorization*/
      if (OM0IW01.OM0IWFL2 == "Y")
        set OM0IM001.XCPPCT modified, bold;
      else
        OM0IS89(); /* ck yostbl for coop% override auth*/
      end
    end
  else
    set OM0IM001.XCPPCT cursor, modified, bold;
    set OM0IM001 alarm;
    converseLib.validationFailed(092);
    OM0IW01.OM0IWFL1 = "Y";
    OM0IW01.OM0IWTER = "Y";
  end



   /* ***********************************************************/
end // end OM0IS44

// edit the ad allowance perencts
Function OM0IS45()

      /* ********************************************************/
      /* * the entered ad allw percent must be in the          **/
      /* * xaatbl table                                        **/
      /* * and                                                 **/
      /* * face % + bank % must = total ad allowance %         **/
      /* * the ad allowance override flag is set to 'y' only   **/
      /* * when the newly entered % is different with the old %**/
      /* ********************************************************/


  set OM0IM001.XAAPCT initialAttributes;
  set OM0IM001.OP1AAFCP initialAttributes;
  set OM0IM001.OP1AABKP initialAttributes;


  if (OM0IM001.XAAPCT in XAATBL.XAAPCT
   && XAATBL.XXXSTAT[sysVar.arrayIndex] == "A")
    if (OM0IM001.XAAPCT == OP1REC.XAAPCT)
      OM0IM001.OM0IMAD = " ";
      OM0IW01.OM0IWOR3 = "N";
    else
      OM0IS60(); /* check override author*/
      if (OM0IW01.OM0IWFL2 == "Y")
        set OM0IM001.XAAPCT modified, bold;
      else
        OM0IM001.OM0IMAD = "*";
        OM0IW01.OM0IWOR3 = "Y";
      end
    end
  else
    set OM0IM001.XAAPCT cursor, modified, bold;
    set OM0IM001 alarm;
    converseLib.validationFailed(090);
    OM0IW01.OM0IWFL1 = "Y";
    OM0IW01.OM0IWTER = "Y";
    return;
  end




  OM0IW01.OM0IWAAP = OM0IM001.OP1AAFCP + OM0IM001.OP1AABKP;

  if (OM0IM001.XAAPCT == OM0IW01.OM0IWAAP)
     /* next sentence*/
  else
    converseLib.validationFailed(091); /* ad allw f/b % are not correct*/
    set OM0IM001.XAAPCT cursor, modified, bold;
    set OM0IM001.OP1AAFCP modified, bold;
    set OM0IM001.OP1AABKP modified, bold;
    set OM0IM001 alarm;
    OM0IW01.OM0IWFL1 = "Y";
    OM0IW01.OM0IWTER = "Y";
  end



   /* ***********************************************************/
end // end OM0IS45

// edit the trade discounts prcnt
Function OM0IS47()

      /* ********************************************************/
      /* * the entered trand discount percent must be in the   **/
      /* * xtdtbl table                                        **/
      /* * and                                                 **/
      /* * face % + bank % must = total trade disc   %         **/
      /* * the trande disc  override flag is set to 'y' only   **/
      /* * when the newly entered % is different with the old %**/
      /* ********************************************************/


  set OM0IM001.XTDPCT initialAttributes;
  set OM0IM001.OP1TDFCP initialAttributes;
  set OM0IM001.OP1TDBKP initialAttributes;


  if (OM0IM001.XTDPCT in XTDTBL.XTDPCT
   && XTDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    if (OM0IM001.XTDPCT == OP1REC.XTDPCT)
      OM0IM001.OM0IMTD = " ";
      OM0IW01.OM0IWOR1 = "N";
    else
      OM0IS60(); /* check override author*/
      if (OM0IW01.OM0IWFL2 == "Y")
        set OM0IM001.XTDPCT modified, bold;
      else
        OM0IM001.OM0IMTD = "*";
        OM0IW01.OM0IWOR1 = "Y";
      end
    end
  else
    set OM0IM001.XTDPCT cursor, modified, bold;
    set OM0IM001 alarm;
    converseLib.validationFailed(088);
    OM0IW01.OM0IWFL1 = "Y";
    OM0IW01.OM0IWTER = "Y";
    return;
  end




  OM0IW01.OM0IWTDP = OM0IM001.OP1TDFCP + OM0IM001.OP1TDBKP;

  if (OM0IM001.XTDPCT == OM0IW01.OM0IWTDP)
     /* next sentence*/
  else
    converseLib.validationFailed(089);
    set OM0IM001.XTDPCT cursor, modified, bold;
    set OM0IM001.OP1TDFCP modified, bold;
    set OM0IM001.OP1TDBKP modified, bold;
    set OM0IM001 alarm;
    OM0IW01.OM0IWFL1 = "Y";
    OM0IW01.OM0IWTER = "Y";
  end



   /* ***********************************************************/
end // end OM0IS47

// edit the defective allow pct
Function OM0IS48()

      /* ********************************************************/
      /* * the entered deffective % must be in the xdatbl table**/
      /* * the deffective override flag is set to 'y' only     **/
      /* * when the new percent is different with the old %    **/
      /* ********************************************************/


  set OM0IM001.XDAPCT initialAttributes;


  if (OM0IM001.XDAPCT in XDATBL.XDAPCT
   && XDATBL.XXXSTAT[sysVar.arrayIndex] == "A")
    if (OM0IM001.XDAPCT == OP1REC.XDAPCT)
      OM0IM001.OM0IMDF = " ";
      OM0IW01.OM0IWOR6 = "N";
    else
      OM0IS60();
      if (OM0IW01.OM0IWFL2 == "Y")
        set OM0IM001.XDAPCT modified, bold;
      else
        OM0IM001.OM0IMDF = "*";
        OM0IW01.OM0IWOR6 = "Y";
      end
    end
  else
    set OM0IM001.XDAPCT cursor, modified, bold;
    set OM0IM001 alarm;
    converseLib.validationFailed(087); /* deffective % is not setup/authorized*/
    OM0IW01.OM0IWFL1 = "Y";
    OM0IW01.OM0IWTER = "Y";
  end



   /* ***********************************************************/
end // end OM0IS48

// edit the payment terms
Function OM0IS49()

       /* *******************************************************/
       /* * if div = '02', yostbl pymt term ovrrd fl must = 'Y'**/
       /* * to change payment terms.                           **/
       /* * the entered payment terms code must be in the      **/
       /* * xpttbl table                                       **/
       /* * the payment term override flag is set to 'y' only  **/
       /* * when the new payment term code is different with   **/
       /* * the old                                            **/
       /* *******************************************************/


  set OM0IM001.XPTCD initialAttributes;

  if (OP1REC.XDVCD == "02") /* if international order*/
    if (COMMAREA.CAUSERID in YOSTBL.XXXUSRID)
      if (YOSTBL.YOSPTCFL[sysVar.arrayIndex] == "N") /* not authorized to chg pymt terms*/
        OM0IW01.OM0IWFL1 = "Y";
        set OM0IM001.XPTCD cursor, modified, bold;
        converseLib.validationFailed(794); /* sorry, not authorized to change*/
        set OM0IM001 alarm;
        return;
      else
         /* you are authorized to change payment terms*/
         /* next sentence*/
      end
    else
      OM0IW01.OM0IWFL1 = "Y";
      set OM0IM001.XPTCD cursor, modified, bold;
      converseLib.validationFailed(794); /* sorry, not authorized to change*/
      set OM0IM001 alarm;
      return;
    end
  end

  if (OM0IM001.XPTCD in XPTTBL.XPTCD
   && XPTTBL.XXXSTAT[sysVar.arrayIndex] == "A")

    if (OP1REC.XDVCD == "02") /* if international order*/
      if (XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "N" /* nil*/
       || XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "B") /* both domestic & nil*/
         /* next sentence*/
      else
        set OM0IM001.XPTCD cursor, modified, bold;
        set OM0IM001 alarm;
        OM0IW01.OM0IWFL1 = "Y";
        converseLib.validationFailed(086); /* terms code is not valid*/
        return;
      end
    else
      if (XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "I" /* inc*/
       || XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "B") /* both domestic & nil*/
         /* next sentence*/
      else
        set OM0IM001.XPTCD cursor, modified, bold;
        set OM0IM001 alarm;
        OM0IW01.OM0IWFL1 = "Y";
        converseLib.validationFailed(086); /* terms code is not valid*/
        return;
      end
    end

    OM0IM001.XPTDESC = XPTTBL.XPTDESC[sysVar.arrayIndex];
    if (OM0IM001.XPTCD == OP1REC.XPTCD)
      OM0IM001.OM0IMTM = " ";
      OM0IW01.OM0IWOR2 = "N";
    else
      OM0IS60(); /* check override authorization*/
      if (OM0IW01.OM0IWFL2 == "Y")
        set OM0IM001.XPTCD modified, bold;
      else
        OM0IM001.OM0IMTM = "*";
        OM0IW01.OM0IWOR2 = "Y";
      end
    end
  else
    set OM0IM001.XPTCD cursor, modified, bold;
    set OM0IM001 alarm;
    OM0IW01.OM0IWFL1 = "Y";
    converseLib.validationFailed(086); /* terms code is not valid*/
  end



   /* **********************************************************/
end // end OM0IS49

// check total discount percent
Function OM0IS4A()



      /* ********************************************************/
      /* * the total of all discount percents must not greater **/
      /* * than the maximum discount percent in the xodtbl table*/
      /* ********************************************************/


  OM0IW01.OM0IWMDS = 0;

  OM0IW01.OM0IWMDS = OM0IM001.XAAPCT + OM0IM001.XTDPCT;
  OM0IW01.OM0IWMDS = OM0IW01.OM0IWMDS + OM0IM001.XDAPCT + OM0IM001.XCPPCT;

   /* find max percent from xodtbl based on need date*/

  sysVar.arrayIndex = 1;
  OM0IW01.OM0IWFND = "N";
  while (XODTBL.XOTCD[sysVar.arrayIndex] != "99"
   && OM0IW01.OM0IWFND == "N")
    if (OP1REC.XOTCD == XODTBL.XOTCD[sysVar.arrayIndex])
      if (OP1REC.OP1CUNDT >= XODTBL.XODBENDT[sysVar.arrayIndex]
       && OP1REC.OP1CUNDT <= XODTBL.XODEENDT[sysVar.arrayIndex])
        OM0IW01.OM0IWFND = "Y";
        OM0IW01.XODMXDSC = XODTBL.XODMXDSC[sysVar.arrayIndex];
      end
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end



  if (OM0IW01.OM0IWMDS <= OM0IW01.XODMXDSC
   || OM0IW01.OM0IWFND == "N")
     /* next sentence*/
  else
    converseLib.validationFailed(093); /* total disccounts exceed the max allowed*/
    OM0IW01.OM0IWFL1 = "Y";
     /* SET OM0IM001.XCPPCT MODIFIED,BRIGHT;protected 11-14-86*/
    set OM0IM001.OP1AABKP modified, bold;
    set OM0IM001.OP1AAFCP modified, bold;
    set OM0IM001.XAAPCT modified, bold;
    set OM0IM001.XDAPCT modified, bold;
    set OM0IM001.OP1TDBKP modified, bold;
    set OM0IM001.OP1TDFCP modified, bold;
    set OM0IM001.XTDPCT cursor, modified, bold;
  end



   /* ********************************************************/
end // end OM0IS4A

// edit invoice as of date
Function OM0IS4B()


  if (OM0IM001.OM0IMIDT == " ")
    set OM0IM001.OM0IMIDT initialAttributes;
    OP1REC.OP1IVADT = +0;
    return;
  end

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";

  OMAREC.OMASDATE = OM0IM001.OM0IMIDT;
  if (OMAREC.OMAHP1 == "-")
    TA2REC.TA2GRGB = OM0IM001.OM0IMIDT;
    TA2REC.TA2GRTYP = "B";
  else
    OM0IW01.OM0IWWDT = OM0IM001.OM0IMIDT;
    OMAREC.OMAMMDT = OM0IW01.OM0IWMM;
    OMAREC.OMADDDT = OM0IW01.OM0IWDD;
    OMAREC.OMAYYDT = OM0IW01.OM0IWYY;
    TA2REC.TA2GRGA = OMAREC.OMADATE;
    TA2REC.TA2GRTYP = "A";
  end

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == +0)
    OP1REC.OP1IVADT = TA2REC.TA2GRGGN;
    OM0IM001.OM0IMIDT = TA2REC.TA2GRGB;
    set OM0IM001.OM0IMIDT initialAttributes;
    OM0IS60(); /* check override author*/
  else
    set OM0IM001.OM0IMIDT cursor, modified, bold;
    converseLib.validationFailed(117);
  end


end // end OM0IS4B

// get order header to pass
Function OM0IS50()

   /* **********************************************************/
   /* *                                                       **/
   /* *           Get the order header to pass in the         **/
   /* *      commarea                                         **/
   /* *                                                       **/
   /* **********************************************************/


   /* **** get the order header*/

  OM0IS01();


   /* **** move the order header to the commarea*/

  OMWREC.OP1GROUP = OP1REC.OP1GROUP;
  COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
  COMMAREA.CAFROMAP = COMMAREA.CACURRAP;




end // end OM0IS50

// edit the override autho
Function OM0IS60()

   /* ***********************************************************/
   /* *                                                        **/
   /* *       Edit the override authorization field.           **/
   /* *                                                        **/
   /* ***********************************************************/


  OM0IW01.OM0IWFL2 = "N";

  if (OM0IM001.XOACD in XOATBL.XOACD)
    if (OM0IW01.OM0IWDTE > XOATBL.XOAENDDT[sysVar.arrayIndex]
     || OM0IW01.OM0IWDTE < XOATBL.XOABEGDT[sysVar.arrayIndex])
      OM0IW01.OM0IWFL1 = "Y";
      OM0IW01.OM0IWFL2 = "Y";
      set OM0IM001.XOACD cursor, modified, bold;
      converseLib.validationFailed(200);
    else
      OP1REC.OP1OSRID = XOATBL.KUYSVRID[sysVar.arrayIndex];
      OP1REC.OP1ORADT = OM0IW01.OM0IWDTE;
    end
  else
    OM0IW01.OM0IWFL1 = "Y";
    OM0IW01.OM0IWFL2 = "Y";
    set OM0IM001.XOACD cursor, modified, bold;
    converseLib.validationFailed(200);
  end




end // end OM0IS60

// call kucrec
Function OM0IS71()
   /* *************************************************************/
                               /* om0is71*/
     /* get customer information using io mod io0240 select set*/
   /* *************************************************************/


  set KUCREC empty;

      /* get customer company record*/

  KUCREC.KUCCOID = OP1REC.KUCCOID; /* load key - company*/
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
    TA1REC.TA1TBLKE = OM0IW01.OM0IWTK1; /* key value*/
    TA1REC.TA1LOCAT[3] = "OM0IS71 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0240  "; /* i/o mod name*/
    XSOPS02();
  end


      /* if not found, then customer is invalid*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    converseLib.validationFailed(033); /* customer is not valid*/
    OMAREC.OMAERR = "Y"; /* set error flag*/
    OM0IW01.OM0IWFL1 = "Y"; /* set error flag*/
  end

end // end OM0IS71

// ck pick prty vs dont shp b4 dt
Function OM0IS88()


  if (OM0IW01.OM0IW435 == "Y") /* if message flag is on*/
    OM0IW01.OM0IW435 = "N"; /* turn it off--has been displayed*/
  else
    if (OP1REC.OP1DSBDT > 0
     && OM0IM001.XPPCD == "10"
     && OP1REC.OP1DSBDT > OMAREC.OMACDT)
      converseLib.validationFailed(435); /* both rush pick prty & don't ship dt on order*/
      OM0IW435 = "Y";
    else
      if (OP1REC.OP1DSBDT > 0
       && OM0IM001.XPPCD == "20"
       && OP1REC.OP1DSBDT > OMAREC.OMACDT)
        converseLib.validationFailed(435); /* both rush pick prty & don't ship dt on order*/
        OM0IW435 = "Y";
      end
    end
  end
end // end OM0IS88

// ck yostbl for coop% chg auth
Function OM0IS89()



  if (COMMAREA.CAUSERID in YOSTBL.XXXUSRID
   && YOSTBL.XXXSTAT[sysVar.arrayIndex] == "A"
   && YOSTBL.YOSCOOPF[sysVar.arrayIndex] == "Y")
    OM0IM001.OM0IMCO = "*";
    OM0IW01.OM0IWOR4 = "Y";
  else
    set OM0IM001.XCPPCT cursor, modified, bold;
    set OM0IM001 alarm;
    converseLib.validationFailed(441); /* you're not authorized to chg coop%*/
    OM0IW01.OM0IWFL1 = "Y";
    OM0IW01.OM0IWTER = "Y";
  end



   /* ***********************************************************/
end // end OM0IS89

// get spgm header sp1rec
Function OM0ISSC()
  SP1REC.SP1KEY = OP1REC.SP1ID;

  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(503); /* spgm problem--contact spgm administrator*/
      OM0IW01.OM0IWFL1 = "Y"; /* turn on error*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
      TA1REC.TA1TBLVU = "VSPGM001"; /* table view*/
      TA1REC.TA1LOCAT[1] = "S      "; /* statement group*/
      TA1REC.TA1LOCAT[2] = "IO0070 "; /* statement group*/
      TA1REC.TA1LOCAT[3] = "OM0ISSC"; /* statement group*/
      TA1REC.TA1LOCAT[4] = "      ";
      OM0ISZ1(); /* load errdiag key info*/
      TA1REC.TA1TBLKE = OM0IW01.OM0IWTK1;
       /* IF SQLCA.SQLCODE = -911;*/
       /* MOVE 'post' TO TA1REC.TA1FUNC;*/
         /* CALL TA0020 TA1REC,SQLCA (REPLY,NONCSP;*/
         /* MOVE 010 TO OEAREC.OEAMNO   ;  database busy, please try*/
         /* MOVE 'Y' TO OPAREC.OPAERR;*/
       /* ELSE ;*/
      TA1REC.TA1FUNC = "RETN";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      try
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end
      XSPF4();
      exit program;
    end
  end


end // end OM0ISSC

// get sp6rec spgm tier table
Function OM0IST1()

  set SP6REC empty;

  SP6REC.SP1ID = OP1REC.SP1ID;
  if (SP1REC.SP1LIFEF == "Y")
    SP6REC.XOTCD = "**";
  else
    SP6REC.XOTCD = OP1REC.XOTCD;
  end

  call "IO4220" ("S ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(503); /* spgm problem, contact spgm administrator*/
      OM0IW01.OM0IWFL1 = "Y"; /* turn on error*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
      TA1REC.TA1TBLVU = "VTIERS01"; /* table view*/
      OM0ISZ1(); /* load errdiag key info*/
      TA1REC.TA1TBLKE = OM0IW01.OM0IWTK1;
      TA1REC.TA1LOCAT[3] = "OM0IST1"; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO4220";
         /* IF SQLCA.SQLCODE EQ -911;*/
           /* MOVE 'POST' TO TA1REC.TA1func;*/
           /* CALL TA0020 TA1REC,SQLCA (REPLY,NONCSP;*/
           /* MOVE 010 TO EZEMNO        ;  database busy, please try*/
           /* MOVE 'Y' TO OPAREC.OPAERR;*/
         /* ELSE ;                          customer/corporate terms*/
      TA1REC.TA1FUNC = "RETN";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      try
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end
      COMMAREA.CA-USER-WORKAREA-4K = " ";
      XSPF4();
      exit program;
    end
  end

end // end OM0IST1

// edit spgm tier level
Function OM0IST2()
  set OM0IM001.OP1TLVLN initialAttributes;

   /* ************************************************/
   /* if tier level is greater than 20 or 0, kick out with*/
   /* an error; if tier level hasn't changed from*/
   /* what op1rec says, kick out*/
   /* ************************************************/

  if (OM0IM001.OP1TLVLN > 20 /* exceeds subscript bounds, kick out*/
   || OM0IM001.OP1TLVLN == 0) /* must be greater than zero*/
    set OM0IM001.OP1TLVLN cursor, modified, bold;
    converseLib.validationFailed(501); /* tier level is invalid*/
    OM0IW01.OM0IWFL1 = "Y"; /* set error*/
    return;
  else
    if (OM0IM001.OP1TLVLN == OP1REC.OP1TLVLN)
      OM0IM001.OM0IMTO = " ";
      OM0IW01.OM0IWOR8 = "N";
      return;
    end
  end

  OMASUB = OM0IM001.OP1TLVLN; /* move tier level to subscript*/

  if (SP6REC.SP6TIER[OMASUB] == 0 /* if 0 range value*/
   && OMASUB != 1)                /* and not the first level (which is zero value)*/
    set OM0IM001.OP1TLVLN cursor, modified, bold;
    converseLib.validationFailed(501); /* tier level is invalid*/
    OM0IW01.OM0IWFL1 = "Y"; /* set error*/
  else
    if (SP1REC.SP1LIFEF == "Y") /* if a seasonal sales program*/
      OM0IW01.OM0IWOR8 = "A";
      OM0IM001.OM0IMTO = "*";
      OM0IW01.SP6MDISC = SP6REC.SP6MDISC[OMASUB]; /* load new min disc*/
       /* needs to be applied to all other seasonal orders for*/
       /* the customer in the weekend batch processing*/
       /* will be set to 'y' by batch later*/
    else
      OM0IW01.OM0IWOR8 = "Y";
      OM0IM001.OM0IMTO = "*"; /* set to normal 'y' value*/
      OM0IW01.SP6MDISC = SP6REC.SP6MDISC[OMASUB]; /* load new min disc*/
    end
  end


end // end OM0IST2

// load errdiag terms stuff
Function OM0ISZ1()
  OM0IW01.OM0IWTK2 = OP1REC.KUCCOID;
  OM0IW01.OM0IWTK3 = OP1REC.KUMSTRID;
  OM0IW01.OM0IWTK4 = OP1REC.XNXCD;
  OM0IW01.OM0IWTK5 = OP1REC.XGPCD;
  OM0IW01.OM0IWTK6 = OP1REC.XOTCD;
  OM0IW01.OM0IWTK7 = OP1REC.SP1ID;
  OM0IW01.OM0IWTK8 = OP1REC.OP1CUNDT;
end // end OM0ISZ1

//*** RECORD=OM0IW01 ****
// 
// Working storage record for the order maintenance header 2
// application om0i
// 
// 2-23-90   ischmi   removed om0iwtf - tier flag
// ***********************
Record OM0IW01 type basicRecord
  10 OM0IWIDX OM0IWIDX ; 
  10 OM0IWFL1 OM0IWFL1 ; 
  10 OM0IWFL2 OM0IWFL2 ; 
  10 OM0IWFL3 OM0IWFL3 ; 
  10 OM0IWTER OM0IWTER ; 
  10 OM0IWCHG OM0IWCHG ; 
  10 OM0IWWRK OM0IWWRK ; 
  10 OM0IWDTE OM0IWDTE ; 
    20 OM0IWCT OM0IWCT ; 
    20 OM0IWDT OM0IWDT ; 
  10 OM0IWWDT OM0IWWDT ; 
    15 OM0IWMM OM0IWMM ; 
    15 OM0IWDD OM0IWDD ; 
    15 OM0IWYY OM0IWYY ; 
    15 * char(2) ; 
  10 OM0IWORD OM0IWORD ; 
    20 * char(7) ; 
    20 OP1PARTN OP1PARTN ; 
  10 OM0IWOR1 OM0IWOR1 ; 
  10 OM0IWOR2 OM0IWOR2 ; 
  10 OM0IWOR3 OM0IWOR3 ; 
  10 OM0IWOR4 OM0IWOR4 ; 
  10 OM0IWOR5 OM0IWOR5 [5] ; 
  10 OM0IWOR6 OM0IWOR6 ; 
  10 OM0IWOR7 OM0IWOR7 ; 
  10 OM0IWOR8 OM0IWOR8 ; 
  10 SP6MDISC SP6MDISC ; 
  10 OM0IWAAP OM0IWAAP ; 
  10 OM0IWTDP OM0IWTDP ; 
  10 XODMXDSC XODMXDSC ; 
  10 OM0IWMDS OM0IWMDS ; 
  10 OM0IWFND OM0IWFND ; 
  10 OM0IMHTP OM0IMHTP ; 
    15 XHDUCHFL XHDUCHFL ; 
    15 OP2HCHGO OP2HCHGO ; 
  10 OM0IWPCH OM0IWPCH ; 
  10 OM0IW435 OM0IW435 ; 
  10 OM0IWTK1 OM0IWTK1 ; 
  10 OM0IWTK2 OM0IWTK2 ; 
  10 OM0IWTK3 OM0IWTK3 ; 
  10 OM0IWTK4 OM0IWTK4 ; 
  10 OM0IWTK5 OM0IWTK5 ; 
  10 OM0IWTK6 OM0IWTK6 ; 
  10 OM0IWTK7 OM0IWTK7 ; 
  10 OM0IWTK8 OM0IWTK8 ; 
  10 OM0IWTK9 OM0IWTK9 ; 
  10 OM0IW911 OM0IW911 ; 
  10 XHDKEY XHDKEY ; 
    15 XHDCD XHDCD ; 
    15 XGPCD XGPCD ; 
  10 OM0IABD OM0IABD ; 
    15 OM0IORD OM0IORD ; 
    15 OM0IPR1 OM0IPR1 ; 
    15 OM0IORP OM0IORP ; 
    15 OM0ISPM OM0ISPM ; 
    15 OM0ITMP OM0ITMP ; 
    15 OM0IWHS OM0IWHS ; 
    15 OM0IXSO OM0IXSO ; 
    15 OM0IPCD OM0IPCD ; 
    15 OM0IPKC OM0IPKC ; 
  10 OM0IW-APPLY-CHG-FL OM0IW-APPLY-CHG-FL ; 
end // end OM0IW01

//*** RECORD=OM0IW02 ****
// w/s copy of op1rec.  used to edit op1sword
// 
// note, this is an exact copy of op1rec as of march 11, 1992
// (march 92 database changes.)                bbake2
// ***********************
Record OM0IW02 type basicRecord
  5 OP1GROUP OP1GROUP ; 
    10 OP1KEY OP1KEY ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
    10 OB1XREFN OB1XREFN ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 XGPCD XGPCD ; 
    10 OP1CMPNB OP1CMPNB ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1PORMF OP1PORMF ; 
    10 OP1ORDBY OP1ORDBY ; 
    10 OP1TBREP OP1TBREP ; 
    10 XDVCD XDVCD ; 
    10 XBCCD XBCCD ; 
    10 XSOCD XSOCD ; 
    10 XOTCD XOTCD ; 
    10 XOBCD XOBCD ; 
    10 XOCCD XOCCD ; 
    10 SP1ID SP1ID ; 
    10 SP6MDISC SP6MDISC ; 
    10 XWHCD XWHCD ; 
    10 OP1OWHMF OP1OWHMF ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 OP-ORIG-NEED-DT OP-ORIG-NEED-DT ; 
    10 XOSCD XOSCD ; 
    10 OP1OSADT OP1OSADT ; 
    10 OP1TDOF OP1TDOF ; 
    10 XTDPCT XTDPCT ; 
    10 OP1TDFCP OP1TDFCP ; 
    10 OP1TDBKP OP1TDBKP ; 
    10 OP1PTOF OP1PTOF ; 
    10 XPTCD XPTCD ; 
    10 OP1AAOF OP1AAOF ; 
    10 XAAPCT XAAPCT ; 
    10 OP1AAFCP OP1AAFCP ; 
    10 OP1AABKP OP1AABKP ; 
    10 OP1COPOF OP1COPOF ; 
    10 XCPPCT XCPPCT ; 
    10 OP1DFAOF OP1DFAOF ; 
    10 XDAPCT XDAPCT ; 
    10 XDSCD XDSCD ; 
    10 OP-DIRSHP-DSCT-PCT OP-DIRSHP-DSCT-PCT ; 
    10 SM1AGYID SM1AGYID ; 
    10 SM4REPID SM4REPID ; 
    10 OP-SREP-OVRD-FL OP-SREP-OVRD-FL ; 
    10 OP1SWORD OP1SWORD ; 
    10 XBDCD XBDCD ; 
    10 OP1BLKID OP1BLKID ; 
    10 OP1NDRAW OP1NDRAW ; 
    10 OP1COGID OP1COGID ; 
    10 OP1BLAID OP1BLAID ; 
    10 OP1SGPAO OP1SGPAO ; 
    10 OP1SHAID OP1SHAID ; 
    10 OP1ODSKF OP1ODSKF ; 
    10 OP1ENTDT OP1ENTDT ; 
    10 OP1ORCDT OP1ORCDT ; 
    10 OP1ENREP OP1ENREP ; 
    10 OP1CALDT OP1CALDT ; 
    10 OP-SND-CNFM-FL OP-SND-CNFM-FL ; 
    10 OP1DSBDT OP1DSBDT ; 
    10 OP1DSADT OP1DSADT ; 
    10 DN-PROD-INTR-DT DN-PROD-INTR-DT ; 
    10 OP1NTMAL OP1NTMAL ; 
    10 OP1ALSEQ OP1ALSEQ ; 
    10 OP1OALSQ OP1OALSQ ; 
    10 OP1LALDT OP1LALDT ; 
    10 OP1DABDT OP1DABDT ; 
    10 OP1DRBDT OP1DRBDT ; 
    10 XACCD XACCD ; 
    10 OP1ASGCO OP1ASGCO ; 
    10 XAHCD XAHCD ; 
    10 OP1ALHDT OP1ALHDT ; 
    10 OP1PAHCD OP1PAHCD ; 
    10 OP1ALRDT OP1ALRDT ; 
    10 XAFCD XAFCD ; 
    10 OP1ALFDT OP1ALFDT ; 
    10 KUNMAPCT KUNMAPCT ; 
    10 OP1RSVF OP1RSVF ; 
    10 OP1WIPIN OP1WIPIN ; 
    10 OP1EXPDF OP1EXPDF ; 
    10 KUNNOSFL KUNNOSFL ; 
    10 OP1ASHDF OP1ASHDF ; 
    10 OP1ACNLF OP1ACNLF ; 
    10 OP1SMSCF OP1SMSCF ; 
    10 OP1TIERF OP1TIERF ; 
    10 OP1TLVLN OP1TLVLN ; 
    10 OP1CPODT OP1CPODT ; 
    10 OP1BOFL OP1BOFL ; 
    10 XCHCD XCHCD [3] ; 
    10 XCSCD XCSCD ; 
    10 OP1CSADT OP1CSADT ; 
    10 OP1CSATM OP1CSATM ; 
    10 OP1CRLMP OP1CRLMP ; 
    10 OP1CRLMR OP1CRLMR ; 
    10 OP1PCSCD OP1PCSCD ; 
    10 OP1PCSDT OP1PCSDT ; 
    10 OP1PCSTM OP1PCSTM ; 
    10 OP1CCKOQ OP1CCKOQ ; 
    10 OP1CKAMT OP1CKAMT ; 
    10 OP1DCHLD OP1DCHLD ; 
    10 KUCVNDFL KUCVNDFL ; 
    10 OP1VAUDT OP1VAUDT ; 
    10 OP1VAUNB OP1VAUNB ; 
    10 OP-CALL-CR-CK-FL OP-CALL-CR-CK-FL ; 
    10 OP-LST-CR-CK-CO-ID OP-LST-CR-CK-CO-ID ; 
    10 XPACD XPACD ; 
    10 KUFMIXBL KUFMIXBL ; 
    10 KUCUNTCS KUCUNTCS ; 
    10 XPKCD XPKCD ; 
    10 XPPCD XPPCD ; 
    10 TF1CARCD TF1CARCD ; 
    10 OP1SSHPO OP1SSHPO ; 
    10 OP1ECADT OP1ECADT ; 
    10 OP1ECANM OP1ECANM ; 
    10 OP1IVADT OP1IVADT ; 
    10 OP1PCNDT OP1PCNDT ; 
    10 OP1CFMDT OP1CFMDT ; 
    10 OP1IPIND OP1IPIND ; 
    10 OP1FTIND OP1FTIND ; 
    10 OP1SHAMT OP1SHAMT ; 
    10 OP1IFAMT OP1IFAMT ; 
    10 XMDCD XMDCD ; 
    10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
    10 OP1OVALU OP1OVALU ; 
    10 OP1OTUNT OP1OTUNT ; 
    10 OP1ALCQF OP1ALCQF ; 
    10 OP1RSVQF OP1RSVQF ; 
    10 OP1SHPQF OP1SHPQF ; 
    10 OP1OSRID OP1OSRID ; 
    10 OP1ORADT OP1ORADT ; 
    10 XOMCD XOMCD ; 
    10 OP1OMDT OP1OMDT ; 
    10 OP1MTREP OP1MTREP ; 
    10 OP1SPLBF OP1SPLBF ; 
    10 OP1SPINF OP1SPINF ; 
    10 OP1SPHDF OP1SPHDF ; 
    10 OP1OMCMF OP1OMCMF ; 
    10 OP11TMSF OP11TMSF ; 
    10 OP11TMBF OP11TMBF ; 
    10 XID-IVC-DIST-CD XID-IVC-DIST-CD ; 
    10 DN-ORD-DIST-IND DN-ORD-DIST-IND ; 
    10 XDZ-DATA-DIST-CD XDZ-DATA-DIST-CD ; 
    10 ZZ-CS400-CHNG-DT ZZ-CS400-CHNG-DT ; 
    10 ZZ-CS400-CHNG-HHMM ZZ-CS400-CHNG-HHMM ; 
    10 ZZ-DS400-CHNG-DT ZZ-DS400-CHNG-DT ; 
    10 ZZ-DS400-CHNG-HHMM ZZ-DS400-CHNG-HHMM ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end OM0IW02

DataItem OM0IABD char(31)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pack handling type & overide
DataItem OM0IMHTP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0IORD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0IORP num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0IPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0IPKC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0IPR1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0ISPM char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0ITMP num(8,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// apply change to order flag
DataItem OM0IW-APPLY-CHG-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning flag for msg 435
DataItem OM0IW435 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// -911 flag for menu serv
DataItem OM0IW911 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ad allowance work field
DataItem OM0IWAAP decimal(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change mode flag
DataItem OM0IWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem OM0IWCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. work day
DataItem OM0IWDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// yymmdd date
DataItem OM0IWDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yyyymmdd date
DataItem OM0IWDTE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error flag
DataItem OM0IWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// override autho error flag
DataItem OM0IWFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order has prev been changed
DataItem OM0IWFL3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found flag
DataItem OM0IWFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0IWHS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table index
DataItem OM0IWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// added up discount percent
DataItem OM0IWMDS decimal(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. work month
DataItem OM0IWMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// trade disc ovrride fl
DataItem OM0IWOR1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// terms code override fl
DataItem OM0IWOR2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ad allowance override fl
DataItem OM0IWOR3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// coop ovrride fl
DataItem OM0IWOR4 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// handling codes  override fl
DataItem OM0IWOR5 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// defective allow override fl
DataItem OM0IWOR6 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// net bill override flag
DataItem OM0IWOR7 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tier level ovrd flag
DataItem OM0IWOR8 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current order number
DataItem OM0IWORD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pick chg flag
DataItem OM0IWPCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// trade disc work field
DataItem OM0IWTDP decimal(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// terms & disc error flag
DataItem OM0IWTER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group errdiag key info
DataItem OM0IWTK1 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag key info
DataItem OM0IWTK2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// errdiag key info
DataItem OM0IWTK3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// errdiag key info
DataItem OM0IWTK4 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// errdiag key info
DataItem OM0IWTK5 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag key info
DataItem OM0IWTK6 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag key info
DataItem OM0IWTK7 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag key info
DataItem OM0IWTK8 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// errdiag key info
DataItem OM0IWTK9 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. work date
DataItem OM0IWWDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric work field
DataItem OM0IWWRK bin(4,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w.s. work year
DataItem OM0IWYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0IXSO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

