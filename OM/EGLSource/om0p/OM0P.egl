package om0p;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ob.common.*;
import om.common.*;
import op.common.*;
import os.common.*;
import oz.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=OM0P ****
// nike order entry - order number update by product
// 
// overview: this application gives product header
//           information by order number for the
//           nike order entry system.
//           depending upon the order status, and the
//           security level of the person using this
//           application, certain fields can be modified.
//           if an update is not allowed, the fields will
//           remain protected and the user can only view
//           the prodect hearder.
// 
// ************************************************************
// *data base views dorder.vitem001-op2rec- item table
//                  dorder voptag01-op9rec-order tag table
//                  dorder vorhdr01-op1rec-order header table
//                  dorder.vitem002-op6rec-item table
//                  dprod.vcolor02-sycrec
//                  dcust.vsvrep01-kuyrec-sales rep
//                  dorder.vpoopx01-purchase order
//                  dprodc.vpohdr01-purchase order header
// ************************************************************
//       author: robert kennedy -- informatics
// 
// maintenance history:
// 
//     when       who       what
//   --------  ----------  ------------------------------------
//   06/24/86   r kennedy   original creation
//   10/07/86   thuha mai   bulk/draw orders project
//   04/28/87   craine      allow change to back order flag
//   07/20/87   jvande      if spaced xpg, put spaces on data
//                          base instead of zeroes.
//   07/20/87   jvande      would not flow back to om0q correct
//                          when in change mode.
//   08/11/87   tfox        added key to om0ps02 abend logic.
//   09/14/87   jvande      support xsdcd - m001,s12,s15,s20,
//                                          s40.
//   10/19/87   tfox        added code to s31,s32,s33,s38 to
//                          allow entering blanks in handling
//                          and packing codes.
//   11/02/87   tfox        added read op1rec to om0p000. added
//                          new stmt grp s05 to do the read.
//   02/04/88   craine      chg s05 to use xspf4 instead of
//                          xfer.
//   06/17/88   scass       add a key to read xowtbl to get
//                          the correct abrv for xowcd - s12
//   08/22/88   gwells      rebook - when editing the order
//                            maintenance reason code (xomcd),
//                            add edits for the rebook flag,
//                            the cancel flag, the bulk order
//                            code, and validate the agency/
//                            customer number - s44.  added
//                            s46, agency/customer validation
//                            statement group.
//   10/25/88   gwells      rebook - add additional edit: can-
//                            cellation date must be more than
//                            45 days from need date - s44,
//                            000(get current date),.  new sgrp
//                            s45, s47.
//   11/04/88   JWOOD       NONCSP OPT ADDED TO CALLS
//   12/05/88   gwells      add credit hold edit to rebook 45
//                          day cancel window - s47.
//   01/09/89   dwalke     add segmented transaction id to appl
//   01/21/89   JWOOD       NONCSP OPTION ON CALLS FIXED////
//   05/10/89   jbecke      database changes: om0pm001, om0ps12
//   08/14/89   ssteph      added credit life code 30 to
//                          process s47.
//   11/21/89   oricha      #265. allow coordinate groups for
//                          cust bulks & cust draws.  s15.
//   04/04/90   skott       database changes - s15,s45 chg
//                          op1blkcd to xbdcd. s12,s40 replace
//                          xsdtbl lookup for io3340 call.
//   04/18/90   schase      bug #278 - added reenter flag when
//                          cancel an item. s10, s20, s45, map.
//   04/26/90   oricha      factory production order id added
//                          to map. new: oslrec,pc3rec,s07,s48
//                          s49,s50-54,s70,s71.  chg:s11,s15,
//                          s20,w1,010.
//   05/22/90   oricha      010,s07. uncommented factory po
//                          code.
//   09/12/90   oricha      add iseg logic. s14,s60,s61,w2,001,
//                          010.
//   10/04/90   dviert      removed op9rec from record list -
//                          tag logic no longer necessary
//   10/10/90   dviert      removed calls to xsoms02 in omop001
//   10/15/90   schase      change product limit to allow for
//                          200 products on a order - passed
//                          through omwrec. s01.
//   11/09/90   rdavis      data base changes - rename xsdcd
//                          to pc2inseg. s15,s12,s40,s60,s42,
//                          s20,om0pm001.
//   11/14/90   dflesh      new line in om0po10: if select code
//                          = 'v'.
//   01/11/91   mbarna      add code to move default handling
//                          charge. s31, s32, s33. log #443
//   01/11/91   schase      added check for whse '03' and '51'
//                          for formatting '00' for owner group
//                          code on map. s12.
//   02/12/91   tfox        regen for db chgs
//   04/25/91   schen       log #585 - change om0ps45 to turn
//                          off rebooking of apparel if reason
//                          code is 01.
//   04/29/91   tfox        Menu ofServices - added handling
//                          codes 4,5 and label codes 1,2 to
//                          map. Label codes set protect until
//                          io5750 (validate label code) is
//                          installed. m001,s12,s15,s20,s21,
//                          s3a-s3b(new),s42,s60,s61,001
//   05/15/91   gwells      Menu of Services - unprotect label
//                          codes and validate. m001,s12,s15,
//                          s20,s42,s55-s56(new),s61
//   05/29/91   tfox        menu of services s06,s11,s44
//                          check for prepacks
//   06/11/91   scantr      database changes - rename all YLB
//                          prefixed fields to PWRLB
//   06/19/91   dharri      log #619 - allow cust style # to be
//                          added or removed. s15, s20, s37.
//   08/06/91   dharri      log #669 - rebook cancellation 45
//                          day window ck no longer called s45.
//   08/13/91   dharri      log #673 - add new product XREF ind
//                          value of 'R'. s37.
//   10/09/91   craine      db changes - added xgpcd to xhdtbl
//                          for key. s12, s3a, s3b, s31, s32,
//                          s33, w01.
//   12/02/91   jhecke      695 - Prepack of footwear. s06
//   08/31/92   dlegg       #885 - Cust Prod Xref changes. S37.
//   12/15/92   jather      #868 - transmitted airborne order
//                          cannot be updated or cancelled.
//                          s11,s42,s43,001
//   05/01/93   dlegg       #937. NSG changes. Owner group init
//                          for whse 25. s12.
//   06/10/93   dcaust      #964 International Airborne.
//                          disallow pf20 if order class = 'tr'
//                          (transmitted Airborne ord).  allow
//                          pf24 but chg ord cls from 'tr' to
//                          'au' (updated Airborne order).
//                          s43, s11, new: om0ps-updt-ord-hdr.
//   06/15/93   dcaust      #964 International Airborne.
//                          Corrected message for cancellation:
//                          msg 807 should only appear when ord
//                          cls has been updtd to 'AU'.
//                          s11, s44.
//   09/01/93   gcalki      CSP 4.1 changes - om0r no longer
//                          xfers on abends, instead it passes
//                          a return code which is checked.  if
//                          the code is not '00' control
//                          returns to main menu.
//                          omerec, s44.
//   02/28/94   scantr      db changes: length changes in
//                          om0pw2.
//   04/28/94   jather      log 1003. rename causera to
//                          ca-user-workarea-4k to hold opwrec
//                          which has increased to 3072 bytes.
//   06/20/94   gcalki      changed code so program will proper
//                          loop through the product array when
//                          option 5 is being used.  010.
//   04/20/95   craine      change om0ps45 to turn on rebooking
//                          apparel if reason code is 01.
//   07/20/95   mmcgol      Additions for Canadian project-
//                          call to sy2000-om0ps03 & om0ps-sel-
//                          sy2000(new), check of crcy-cd on
//                          whse tbl-om0ps3a, om0ps3b, om0ps31,
//                          om0ps32, om0ps33, and move of crcy
//                          to map-om0ps2a
//   06/15/96   wleong      Added codes to handle caselot edit
//   07/15/96   mvalbu      Changed to use regional data for US
//                          apparel. Changed OM0PS03, and
//                          OM0PS-SEL-SY2000.
//   12/10/96   CBRINE      Change caselot edit to go against
//                          VORXRF01 instead of VORCPX02.
//                          added call to cu1710 to look at new
//                          xref table (vcucpx01) in OM0PS37.
//   08/27/97   jnaemu      added whse 27
//   09/01/97   RFREY       OCD Changes - write ocd change
//                          record (vsohcr01)
//   10/20/97   CBRINE      Do not allow CU-PROD-ID to be chged
//                          for customers who have cust xref at
//                          size level. (OM0PS09 and OM0PS20)
//   11/20/97   VRAMAC      Y2K MODIFICATIONS MADE TO:
//                          OM0PM001 - Change OM0PMPDT to
//                          display 00 for year 2000
//                          OM0P000  OM0PS49  and  OM0PS50 -
//                          Change hard coded 19 to include
//                          20th Century.
//                          OM0PW1 - Subgroup OM0PWPDT to
//                          include OM0PWPYY for windowing
//                          technique to include 20th Century
//   06/03/98   JFLOR1      Bypass SY2000 in OM0PS03 when
//                          division code = '02' or '03'.
//   08/27/98   udafon      #178 Increased size of OMWREC to
//                          3505 bytes. Re-compiled application
//   08/10/98   OVAZQU      for whse 51 add am edit to ensure
//                          that whenever we have a case lot#
//                          on the map, we should also have a
//                          handling code of "CSL", and vice-
//                          versa. Then, whenever a new case
//                          lot# is added xpa-cust-pack-cd
//                          should be changed to "CU", or if a
//                          case lot# is blanked out, a
//                          message to the users saying that
//                          the order remains as a "CU" should
//                          be displayed.
//  10/02/98   svargh      added changes to om0ps21,om0ps-
//                         updte-ord-hdr to update bulk qty
//                         in vbulks02 table when they are
//                         updated in the header table.
// *********************
Program OM0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  KUYREC KUYREC; // record
  OBFREC OBFREC; // record
  OM0PW1 OM0PW1; // record
  OM0PW2 OM0PW2; // record
  OMAREC OMAREC; // record
  OMEREC OMEREC; // record
  OMWREC OMWREC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  OP6REC OP6REC; // record
  OSLREC OSLREC; // record
  OSNREC OSNREC; // record
  PC2REC PC2REC; // record
  PC3REC PC3REC; // record
  PWRREC PWRREC; // record
  SM1REC SM1REC; // record
  SQLCA SQLCA; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  VBULKS02 VBULKS02; // record
  VOPPGM01 VOPPGM01; // record
  VORXRF01 VORXRF01; // record
  WCU1710 WCU1710; // record
  WOZ2090 WOZ2090; // record
  WSY2000 WSY2000; // record
  XP0QW00 XP0QW00; // record
  XS0MW01 XS0MW01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XBDTBL {deleteAfterUse = yes}; // table
  use XBRTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use XOSTBL {deleteAfterUse = yes}; // table
  use XDSTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XPATBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XSATBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use XHDTBL {deleteAfterUse = yes}; // table
  use XOATBL {deleteAfterUse = yes}; // table
  use XOMTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XDNTBL {deleteAfterUse = yes}; // table
  use XRSTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use OM0PM.OM0PM001,  // forms
      OM0PM.XP0QM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OM0P000: OM0P000();



    goto OM0P010; /* to begin building the map*/



    OM0P010: OM0P010();



     /* ** OM0PM001.XQACD CURSOR;           /* cursor position*/
    set OM0PM001.OP-CASE-LOT-NBR cursor; /* cursor position*/

    goto OM0P001; /* to converse the product header change*/



    OM0P001: OM0P001();




    if (OM0PM001.VAGen_EZEMSG == "WARNING -- PRODUCT WAS NOT CANCELLED"
     || OM0PM001.VAGen_EZEMSG == "SELECTED PRODUCT  WAS CANCELLED")
      goto OM0P001;
    end

    if (converseVar.validationMsgNum > 0) /* an error was encountered*/
      goto OM0P001;
    end



    if (converseVar.eventKey is pf9)
      if (OMWREC.OMWSELCD[OMWLNITX] == "S")
        OMWREC.OMWSELCD[OMWLNITX] = "V";
      end
      COMMAREA.CACURRAP = "OM0S";
      COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
      transfer to program "OM0S" passing COMMAREA;
    end



    if (converseVar.eventKey is pf13)
      COMMAREA.CACURRAP = "OM0H";
      COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
      transfer to program "OM0H" passing COMMAREA;
    end



    if (converseVar.eventKey is pf18)
      COMMAREA.CACURRAP = "OM0C";
      COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
      transfer to program "OM0C" passing COMMAREA;
    end



    if (converseVar.eventKey is pf20)
      COMMAREA.CACURRAP = "OM0A";
      COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
      transfer to program "OM0A" passing COMMAREA;
    end



      /* no options were selected and no more records exist*/
      /* force them back to the main menu*/



    if (OM0PW1.OM0PWCNT == 999
     && converseVar.eventKey is enter)
      COMMAREA.CACURRAP = "OM0M";
      COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
      transfer to program "OM0M" passing COMMAREA;
    end



      /* enter was hit and program was entered from om0q -*/
           /* product detail change -- go back to om0q*/



    if (converseVar.eventKey is enter
     && OMWREC.OMWCHGFL == "Y")
      OMWREC.OMWSELCD[OMWLNITX] = "S";
      COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
      transfer to program "OM0Q" passing COMMAREA;
    end



      /* enter was hit and not in change mode*/
           /* branch back to inquiry*/



    if (converseVar.eventKey is enter)
      COMMAREA.CACURRAP = "OM0O";
      COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
      transfer to program "OM0O" passing COMMAREA;
    end



      /* enter was hit and in change mode*/
           /* branch to detail change*/



    if (converseVar.eventKey is enter)
      if (OMWREC.OMWCHGFL == "Y" /* not in change mode*/
       && OMWREC.OMWOPTN == 5)   /* header / detail loop*/
        COMMAREA.CACURRAP = "OM0Q";
        COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
        transfer to program "OM0Q" passing COMMAREA;
      end
    end



           /* somehow it by-passed everything above -*/
             /* branch back to the map again*/



    goto OM0P001;



  end // end main
end // end OM0P

// program init/init defaults
Function OM0P000()


   /* *********************************************************/

    /* this process determines the flow logic by reading the*/
    /* commarea to see how this application was invoked.*/
    /* if the product array was not already built in another*/
    /* application, a select set is done to get all products*/
    /* that exist for the given order number.*/

    /* omwrec.omwlines   holds the number of lines items*/
                      /* for the op1rec order number.*/

    /* omwrec.omwselcd   holds four different values -*/
                      /* 'v' for viewed  --  's'  for selected*/
                      /* 'e' for cancel request or when*/
                          /* returning from om0r failed cancel*/
                      /* 'x' for cancelled ok from omor*/

    /* omwrec.omwlnitx   when returning to omos it holds the*/
                      /* position of the last line item viewed*/

    /* om0sw1.om0swsel   number of line items selected*/

   /* *********************************************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  set OMWREC empty;
  set OM0PW1 empty;
  set OM0PW2 empty;
  set OP1REC empty;



  OMWREC.OMWSGRP = COMMAREA.CA-USER-WORKAREA-4K;
  OP1REC.OP1GROUP = OMWREC.OP1GROUP;

  XSENTRY();

   /* ****************************************************/
   /* *** set segmented trans id                      ****/
   /* ****************************************************/

  COMMAREA.CAEZSAP = sysVar.transactionID;
  COMMAREA.CAEZSG12 = "OM";
  COMMAREA.CAEZSG4 = "P";
  sysVar.transactionID = COMMAREA.CAEZSAP;

   /* *************************************************************/

  XSOMS01(); /* order entry security*/

       /* save the current date*/

  OMAREC.OMACYMD = VGVar.currentShortGregorianDate;
  if (OMAREC.OMACYY > 56) /* set century based on year*/
    OMAREC.OMACCC = 19;
  else
    OMAREC.OMACCC = 20;
  end


  OM0PS05(); /* read fresh header record*/

  OM0PS09(); /* get company record*/

  if (OMWREC.OP2LNINB[1] == 0) /* the table is empty*/
    OM0PS01(); /* build the array*/
  end

  set OM0PM001 initial;

   /* ------------------------------ Y2K OUT BEGIN -------------------*/
   /* MOVE EZEDTE TO OM0PW1.OM0PWDT;*/
   /* MOVE 019 TO OM0PW1.OM0PWD1;*/
   /* ------------------------------ Y2K OUT END ---------------------*/

   /* ------------------------------ Y2K IN  BEGIN -------------------*/
  XX0XS01();
  OM0PW1.OM0PWDT = XX0XW01.XX0XWDAT;
   /* ------------------------------ Y2K IN  END ---------------------*/



  if (OMWREC.OMWPF2CH != "N")
    OMWREC.OMWPF2CH = "N"; /* set temp change flag to 'no';*/
  end

  if (COMMAREA.CAFROMAP == "OM0Q")
    OM0PW1.OM0PWFAP = "Y"; /* used in 001 flow*/
  else
    OM0PW1.OM0PWFAP = "N"; /* used in 001 flow*/
  end

  COMMAREA.CAFROMAP = "OM0P";



end // end OM0P000

// product header change
Function OM0P001()



   /* ********************************************************/

    /* the process will build the header screen, and transfer*/
    /* control or continue to loop through this group as*/
    /* necessary.*/

   /* ********************************************************/


   /* verify the order has not been transmitted to AIRBORNE*/


  XS0MW01.XS0MWDIV = OP1REC.XDVCD;
  XS0MW01.XS0MWORT = OP1REC.XOTCD;
  XS0MW01.XS0MWDIR = OP1REC.XDSCD;
  XS0MW01.XS0MWCUS = OP1REC.KUCCOID;
  XS0MW01.XS0MWGPC = OP1REC.XGPCD;
  XS0MW01.XS0MWNDT = OP1REC.OP1CUNDT;

  VOPPGM01.XXX-PGM-NBR = "OP1920"; /* last time transmitted*/
  call "IO6600" ("S ", SQLCA, VOPPGM01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VOPPGM01";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "OM0P001";
    TA1REC.TA1LOCAT[3] = "IO6600";
    TA1REC.TA1LOCAT[4] = "      ";
    TA1REC.TA1TBLKE = "OP1920";
    XSOPS02();
  end

  XS0MS-CHK-AIRBORNE();

    /* move the pf key options to om0pm001*/
    /* build PF key line #1 (msg1)*/

  OM0PW1.OM0PWMS1 = "3:SKP-UP/NU ORD   9:PRD SUM    13:OHDR1 ";
  OM0PW1.OM0PWMS2 = "   19:SKP/UP             ENTER:CONTINUE";
  OM0PM001.OM0PMSG1 = OM0PW1.OM0PWMSG;

    /* build PF key line #2 (msg2)*/

  OM0PW1.OM0PWMS1 = "4:SKP-UP/MST MN  12:EDIT       18:COMMEN";

  if (XS0MW01.XS0MWABF == "Y") /* transmitted airborne order (no updates)*/
    OM0PW1.OM0PWMS2 = "T                                     ";
    set OM0PM001.OM0PMCUR cursor, protect;
    OM0PS42(); /* protect fields no updates allowed*/
    converseLib.validationFailed(788); /* display error message*/
  else
    OM0PW1.OM0PWMS2 = "T  20:ADD PRD  23:OCD CMT   24:CANCEL ";
  end
  OM0PM001.OM0PMSG2 = OM0PW1.OM0PWMSG;



  converse OM0PM001 ;



  if (OM0PM001.VAGen_EZEMSG == "WARNING -- PRODUCT WAS NOT CANCELLED"
   || OM0PM001.VAGen_EZEMSG == "SELECTED PRODUCT  WAS CANCELLED")
    OM0PM001.VAGen_EZEMSG = " ";
    OM0PS42(); /* resets fields autoskip*/
    exit stack;
  end



  if (converseVar.validationMsgNum > 0 /* an error was encountered*/
   || converseVar.eventKey is pf10)   
    exit stack;
  end



  OM0PS10(); /* main edit group*/

  if (converseVar.validationMsgNum > 0) /* an error was encountered*/
    exit stack;
  end

  if (converseVar.eventKey is pf19) /* skip and get another record*/
    exit stack;
  else
    if (converseVar.eventKey is pf12) /* edits were performed and ok*/
      OM0PS20(); /* validate changes & field modify*/
      OM0PS61(); /* reset mod tags because were lost in edit*/
      exit stack;
    else
      if (converseVar.eventKey is pf23)
        OM0PS-OCD-CMT();
      else
        if (converseVar.eventKey is pf24) /* cancel*/
          exit stack;
        end
      end
    end
  end

  if (OM0PM001 is modified) /* something was changed*/
      /* ok to edit & update*/
    OM0PS43(); /* cancel/update security*/
  else
    exit stack; /* exit to flow*/
  end

  if (converseVar.validationMsgNum > 0) /* an error was encountered*/
    exit stack;
  end



                /* -  perform edits, update if ok, and branch*/
                   /* EDIT THE MODIFIED FIELDS OM0PS20*/
                   /* update the op6rec using  om0ps19*/
                   /* reset fields autoskip    om0ps42*/



  OM0PS20();

  if (converseVar.validationMsgNum > 0) /* an error was encountered*/
    exit stack;
  end

  OM0PS19();
  OM0PS-UDT-PRD-XREF();
  OM0PS42();

  if (converseVar.validationMsgNum > 0) /* an error was encountered*/
    exit stack;
  end



    /* does the op1rec need updating ?*/



  if (OM0PM001.XHDCD[1] is modified
   || OM0PM001.XHDCD[2] is modified
   || OM0PM001.XHDCD[3] is modified
   || OM0PM001.XHDCD[4] is modified
   || OM0PM001.XHDCD[5] is modified)
    if (OP1REC.OP1SPHDF == "Y"
     && OM0PM001.XHDCD[1] == " "
     && OM0PM001.XHDCD[2] == " "
     && OM0PM001.XHDCD[3] == " "
     && OM0PM001.XHDCD[4] == " "
     && OM0PM001.XHDCD[5] == " ")
      OM0PS21(); /* update the op1rec*/
    else
      if (OP1REC.OP1SPHDF != "Y")
        OM0PS21(); /* update the op1rec*/
      end
    end
  end



  if (converseVar.validationMsgNum > 0) /* an error was encountered*/
    exit stack;
  else
    OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* to update the commarea*/
  end



end // end OM0P001

// read op6rec and move to map
Function OM0P010()



   /* ********************************************************/

    /* the process will build the header screen for the*/
    /* product header order number change.*/
    /* the following statement groups are*/
    /* used to build the map:*/

    /* om0ps02  to create the op6rec*/
    /* om0ps2a  to create the op2rec*/
    /* om0ps03  to create the sycrec*/
    /* om0ps07  to create the oslrec*/
    /* om0ps12  to get the table descriptions.*/
    /* om0ps13  to get the kucrec service rep name.*/
    /* om0ps14  to check the line item status & alloc qty*/
    /* om0ps-get-prd-xref -  to get caselot nbr*/
   /* ********************************************************/



  if (OMWREC.OMWLNITX == 0) /* first time to read array*/
    OM0PW1.OM0PWTSZ = 1;
  else
    OM0PW1.OM0PWTSZ = OMWREC.OMWLNITX; /* to set the array position*/
  end

  while (OM0PW1.OM0PWTSZ <= 900
   && converseVar.validationMsgNum == 0)
    OM0PW1.OM0PWCNT = OM0PW1.OM0PWTSZ;
    if (OM0PW1.OM0PWTSZ > OMWREC.OMWLINES) /* eof*/
      OM0PW1.OM0PWTSZ = 999; /* end of file*/
      OM0PW1.OM0PWCNT = 999; /* end of file*/



        /* no options were selected and no more records exist*/
        /* force them back to the main menu*/



      COMMAREA.CACURRAP = "OM0M";
      COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
      transfer to program "OM0M" passing COMMAREA;



    else
      if (OMWREC.OMWSELCD[OM0PWCNT] == "S"
       || OMWREC.OMWSELCD[OM0PWCNT] == "E"
       || OMWREC.OMWSELCD[OM0PWCNT] == "X"
       || (OMWREC.OMWSELCD[OM0PWCNT] == "V"
       && OMWREC.OMWOPTN != 5))
        OMWREC.OMWLNITX = OM0PW1.OM0PWTSZ; /* current array position*/
        OM0PW1.OM0PWTSZ = 999; /* to exit this process*/
        set OM0PM001 initial;
        OM0PM001.OMTITLE = "CHANGE ";
        OM0PM001.KUMSTRNM = OMWREC.KUMSTRNM;
        OM0PM001.OP1CUNDT = OP1REC.OP1CUNDT;
        OM0PM001.OM0PMDTE = VGVar.currentShortGregorianDate;
        OM0PS02();
        OM0PS2A();
        OM0PS03();

        if (OP1REC.XWHCD == " ") /* if direct ship*/
          OM0PS07(); /* ck if factory po info*/
        end

        if (COMMAREA.CACHGFL == "Y")
          OM0PS14();
        else
          converseLib.validationFailed(373);
        end
        OM0PS12();
        OM0PS13();
        OM0PS-GET-PRD-XREF();
        if (OM0PW1.OM0PW-INDXFND == "Y")
          OM0PM001.OP-CASE-LOT-NBR = VORXRF01.OP-CASE-LOT-NBR;
        end
        OM0PS60(); /* snapshot map before we converse it*/
        exit stack;
      else
        OM0PW1.OM0PWTSZ = OM0PWTSZ + 1;
      end
    end
  end



  if (OM0PW1.OM0PWCNT == 900)
    OM0PW1.OM0PWTSZ = 999; /* end of file*/
    OM0PW1.OM0PWCNT = 999; /* end of file*/
      /* no options were selected and no more records exist*/
      /* force them back to the main menu*/
    COMMAREA.CACURRAP = "OM0M";
    COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
    transfer to program "OM0M" passing COMMAREA;
  end


end // end OM0P010

// add companion record
Function OM0PS-ADD-CASE-LOT()

   /* build companion record for add*/


  set VORXRF01 empty;

  VORXRF01.OP1PARTN = OP1REC.OP1PARTN;
  VORXRF01.OP1CUOID = OP1REC.OP1CUOID;
  VORXRF01.OP1NORID = OP1REC.OP1NORID;
  VORXRF01.OP2LNINB = OP2REC.OP2LNINB;
  VORXRF01.OP-CASE-LOT-NBR = OM0PM001.OP-CASE-LOT-NBR;

  OM0PS54(); /* get date and time*/
  VORXRF01.ZZZSDT = TA2REC.TA2GRGGN;
  VORXRF01.ZZZCHGDT = TA2REC.TA2GRGGN;
  VORXRF01.ZZZSTM = TA2REC.TA2TIMHM;
  VORXRF01.ZZZCHGTM = TA2REC.TA2TIMHM;


   /* add companion record*/


  call "VORXRF01" ("A ", SQLCA, VORXRF01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0P    ";
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORXRF01";
    TA1REC.TA1LOCAT[1] = "A       "; /**/
    TA1REC.TA1LOCAT[2] = "OM0PS-AD"; /* statement group*/
    TA1REC.TA1LOCAT[3] = "A-CASE-L"; /* i/o mod name*/
    TA1REC.TA1LOCAT[4] = "OT      "; /* i/o mod name*/
    TA1REC.TA1MAP = "OM0PM001"; /* ;/* map name*/
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end


end // end OM0PS-ADD-CASE-LOT

// update ocd size item
Function OM0PS-CALL-OZ2090()

      /* use OZ2090 to update the VOCSIZ01 record*/
      /* call oz2090 for each line item selected on the screen*/

  set WOZ2090 empty;
  WOZ2090.OZ2090-OP-ORD-PART-CHAR = OP1REC.OP1PARTN;
  WOZ2090.OZ2090-OP-CUST-ORD-ID = OP1REC.OP1CUOID;
  WOZ2090.OZ2090-OP-NIKE-ORD-ID = OP1REC.OP1NORID;
  WOZ2090.OZ2090-OP-LINE-ITEM-NBR = OP2REC.OP2LNINB;
  WOZ2090.OZ2090-XOM-ORD-MNTN-CD = OM0PM001.XOMCD1;
  WOZ2090.OZ2090-SOCD-APPL-SRC-CD = "OP";
  WOZ2090.OZ2090-SOCD-GLBL-MNTN-FL = "N";
  WOZ2090.OZ2090-SOCD-SZ-RSN-TXT = XP0QW00.XP0QW-RSN-TEXT;
  WOZ2090.OZ2090-XXX-USER-ID = COMMAREA.CAUSERID;
  call "OZ2090" (WOZ2090) {isNoRefresh = yes, isExternal = yes};

  if (WOZ2090.OZ2090-RETURN-CD == "00") /* good return*/
        /* ok - next sentence*/
  else
    converseLib.validationFailed(942);
  end

end // end OM0PS-CALL-OZ2090

// CHECK FOR ORDER TO UPDATE BULK
Function OM0PS-CHECK-UPDATE()
   /* tcs include begin*/
  set VBULKS02 empty;
  set SQLCA empty;
  set OBFREC empty;

  VBULKS02.OP1PARTN = OP1REC.OP1PARTN;
  VBULKS02.OP1CUOID = OP1REC.OP1CUOID;
  VBULKS02.OP1NORID = OP1REC.OP1NORID;

  OBFREC.OBFTASK = "S ";
  call "VBULKS02" (OBFREC, SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    OM0PS-UPDTE-VBULK(); /* if there are records update*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)

    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VBULKS02"; /* table view*/
      TA1REC.TA1LOCAT[2] = "OM0PC-U"; /* statement group nam*/
      TA1REC.TA1LOCAT[3] = "VBKS02";
      TA1REC.TA1LOCAT[4] = "U     ";
      move SQLCA to ERRSQLCA withV60Compat;
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
    /* tcs include end*/
  end
end // end OM0PS-CHECK-UPDATE

// delete companion record
Function OM0PS-DEL-CASE-LOT()

   /* delete companion record*/


  call "VORXRF01" ("D ", SQLCA, VORXRF01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)

  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0P    ";
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORXRF01";
    TA1REC.TA1LOCAT[1] = "D       "; /**/
    TA1REC.TA1LOCAT[2] = "OM0PS-DE"; /* statement group*/
    TA1REC.TA1LOCAT[3] = "L-CASE-L"; /* i/o mod name*/
    TA1REC.TA1LOCAT[4] = "OT      "; /* i/o mod name*/
    TA1REC.TA1MAP = "OM0PM001"; /* ;/* map name*/
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end


end // end OM0PS-DEL-CASE-LOT

// get order header
Function OM0PS-GET-ORD-HDR()

   /* ************************************************************/

      /* OM0PS-GET-ORD-HDR*/
      /* this gets the op1rec for the product header om0pm001*/

   /* ************************************************************/



  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good return*/
      /* the record was found*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* check for good return*/
      set OP1REC empty;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0P   ";
      TA1REC.TA1LOCAT[1] = "OM0PS-UP";
      TA1REC.TA1LOCAT[2] = "DT-ORD-H";
      TA1REC.TA1LOCAT[3] = "IO0430  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "OM0PM001";
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VORHDR01";
      TA1TBLKE = OP1REC.OP1KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end


end // end OM0PS-GET-ORD-HDR

// get companion record
Function OM0PS-GET-PRD-XREF()

   /* build record to pass to get caselot info*/


  set VORXRF01 empty;

  OM0PW1.OM0PW-INDXFND = "N";

  VORXRF01.OP1PARTN = OP1REC.OP1PARTN;
  VORXRF01.OP1CUOID = OP1REC.OP1CUOID;
  VORXRF01.OP1NORID = OP1REC.OP1NORID;
  VORXRF01.OP2LNINB = OP2REC.OP2LNINB;


   /* call io mod to retrieve caselot nbr*/


  call "VORXRF01" ("S ", SQLCA, VORXRF01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OM0PW1.OM0PW-INDXFND = "Y"; /* set flag to indicate rec found*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      OM0PW1.OM0PW-INDXFND = "N"; /* set flag to indicate rec not found*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0P    ";
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VORXRF01";
      TA1REC.TA1LOCAT[1] = "S       "; /**/
      TA1REC.TA1LOCAT[2] = "OM0PS-GE"; /* statement group*/
      TA1REC.TA1LOCAT[3] = "VORCPX02"; /* i/o mod name*/
      TA1REC.TA1MAP = "OM0PM001"; /* ;/* map name*/
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end


end // end OM0PS-GET-PRD-XREF

// OCD COMMENT WINDOW
Function OM0PS-OCD-CMT()
   /* THIS STMT GROUP DISPLAYS A POP-UP WINDOW*/
   /* FOR THE USER TO ENTER THE OCD COMMENT*/

  XP0QW00.XP0QW-XOMCD = OM0PM001.XOMCD1;
  XP0Q001(); /* pop-up window initialize*/

  converseLib.clearScreen();
   /* restore the original map*/

  converseLib.validationFailed(400);

  exit stack; /* display map*/


end // end OM0PS-OCD-CMT

// select dprod.vsyreg01
Function OM0PS-SEL-SY2000()

   /* CANADA 06/28/95*/

     /* get the product/region record*/

  set SQLCA empty;
  WSY2000.XGP-GPC-CD = SYCREC.XGPCD;
  WSY2000.SY-STY-NBR = SYCREC.SY1STNBR;
  WSY2000.SY-COLR-CD-ID = SYCREC.SY2CLRID;
  WSY2000.XDM-DIM-CD = SYCREC.XDMCD;
  WSY2000.WSY2000-OPTION-CODE = "S ";
  WSY2000.WSY2000-SUB-OPTION-CODE = "O";

  call "SY2000" (WSY2000) {isNoRefresh = yes, isExternal = yes};

  if (WSY2000.WSY2000-RETURN-CODE == 0)
    OM0PW1.OM0PW-WSY2000-FND-FLAG = "Y";
      /* move from wsy2000 to vcolor02*/

    SYCREC.PG1SC4CD = WSY2000.PG-SCHED-SPCLT-CD;
    SYCREC.PG1FCTCD = WSY2000.PG-FCST-CD;
    SYCREC.XSECD = WSY2000.XSE-SESN-CD;
    SYCREC.XSNYR = WSY2000.XSN-SESN-YR-RNG;

    SYCREC.SY2POFBD = WSY2000.SY-PROP-OFFER-BDT;
    SYCREC.SY2POFXD = WSY2000.SY-PROP-OFFER-XDT;
    SYCREC.SY2FOFBD = WSY2000.SY-FUTR-OFFER-BDT;
    SYCREC.SY2FOFXD = WSY2000.SY-FUTR-OFFER-XDT;

    SYCREC.XLCCD1 = WSY2000.XLC-LIFE-CYC-CD[1];
    SYCREC.XLCCD2 = WSY2000.XLC-LIFE-CYC-CD[2];
    SYCREC.XLCCD3 = WSY2000.XLC-LIFE-CYC-CD[3];
    SYCREC.XLCCD4 = WSY2000.XLC-LIFE-CYC-CD[4];

    SYCREC.SY2CEDT1 = WSY2000.SY-LIFE-CYC-EDT[1];
    SYCREC.SY2CEDT2 = WSY2000.SY-LIFE-CYC-EDT[2];
    SYCREC.SY2CEDT3 = WSY2000.SY-LIFE-CYC-EDT[3];
    SYCREC.SY2CEDT4 = WSY2000.SY-LIFE-CYC-EDT[4];

    SYCREC.XPRCD = WSY2000.XPR-PROD-TYP-CD;
    SYCREC.XPLCD = WSY2000.XPL-PROD-LN-CD;
    SYCREC.XPCCD = WSY2000.XPC-PROD-CAT-CD;

    SYCREC.SY2FDSMO = WSY2000.SY-FRST-DOM-SLS-MO;
    SYCREC.SY2PDCMO = WSY2000.SY-PROJ-DOM-CLS-MO;
    SYCREC.SY2SSCIN = WSY2000.SY-SFTY-STKCLS-IND;

    SYCREC.OPZHMIND = WSY2000.OP-HMDL-HOT-FL;
    SYCREC.SY2ALNOR = WSY2000.SY-ALW-NEW-ORD-FL;

    sysVar.arrayIndex = 1;
    while (sysVar.arrayIndex <= 6)
      SYCREC.XWHCD[sysVar.arrayIndex] = WSY2000.XWH-WHSE-CD[sysVar.arrayIndex];
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    end

    SYCREC.SY2RPRDI = WSY2000.SY-RSTR-XSO-IND;
    SYCREC.SY2BOSWI = WSY2000.SY-BO-SW;
    SYCREC.SY2BOEDT = WSY2000.SY-BO-SW-EDT;

  else
    if (WSY2000.WSY2000-RETURN-CODE == 02)
      OM0PW1.OM0PW-WSY2000-FND-FLAG = "N";
    else
      if (WSY2000.WSY2000-RETURN-CODE == 98) /* data base is busy*/
  /* next sentence*/
      else
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "OM0P";
        TA1REC.TA1LOC = "OMOPS-SEL-SY2000";
        OM0PW1.OM0PW-WSY2000-GPC-CD = SYCREC.XGPCD;
        OM0PW1.OM0PW-WSY2000-STY-NBR = SYCREC.SY1STNBR;
        OM0PW1.OM0PW-WSY2000-COLR-CD = SYCREC.SY2CLRID;
        OM0PW1.OM0PW-WSY2000-DIM-CD = SYCREC.XDMCD;
        OM0PW1.OM0PW-WSY2000-PROD-REG-CD = WSY2000.XDR-PROD-REG-CD;
        OM0PW1.OM0PW-WSY2000-RETURN-CD = WSY2000.WSY2000-RETURN-CODE;
        TAEREC.TAEDESC1 = OM0PW-WSY2000-POST-1;
        TAEREC.TAEDESC2 = "BAD RETURN CODE FROM SY2000";
        TA1REC.TA1DBASE = "DPROD";
        TA1REC.TA1TBLVU = "SYREG02";
        TA1REC.TA1MAP = "OM0PM001";
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        try
          call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
        end
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error - clear ws*/
      end
    end
  end
end // end OM0PS-SEL-SY2000

// update companion record
Function OM0PS-UDT-PRD-XREF()
   /* ****************************************************************/
   /* this stmgrp first retrieves the record, it then updates the*/
   /* caselot nbr. If the sample request id, buy season code and cost*/
   /* code are spaces, and the field has been updated to spaces on the*/
   /* screen, delete the companion record. We don't need it.*/
   /* ****************************************************************/

  OM0PS-GET-PRD-XREF(); /* *//* fetch the original companion rec*/

  if (OM0PW1.OM0PW-INDXFND == "Y") /* original xref info found*/
    if (VORXRF01.OP-SMPL-RQT-ID == " "
     && VORXRF01.CU-BUY-SESN-ID == " "
     && VORXRF01.CU-COST-ID == " "
     && OM0PM001.OP-CASE-LOT-NBR == " ")

      OM0PS-DEL-CASE-LOT();

      if (OP1REC.XWHCD == "51")
        if (OP1REC.XPACD == "CU")
          if (OM0PM001.VAGen_EZEMSG == " ")
            OM0PM001.VAGen_EZEMSG = "CU PACK CODE REMAINS ON ORDER";
          end
        end
      end

    else
      VORXRF01.OP-CASE-LOT-NBR = OM0PM001.OP-CASE-LOT-NBR; /* update case lot number at*/
      VORXRF01.ZZZCHGDT = OM0PW1.OM0PWDT; /* changed date*/
      OM0PW1.OM0PWT1 = VGVar.currentFormattedTime;
      OM0PW1.OM0PWTM2 = OM0PW1.OM0PWTM1;
      VORXRF01.ZZZCHGTM = OM0PW1.OM0PWT2; /* changed time*/

      call "VORXRF01" ("U ", SQLCA, VORXRF01) {isNoRefresh = yes, isExternal = yes}; /* style level*/

      if (SQLCA.VAGen_SQLCODE != 0)
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "OM0P    ";
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VORXRF01";
        TA1REC.TA1LOCAT[1] = "U       ";
        TA1REC.TA1LOCAT[2] = "OM0PS-UD"; /* statement group*/
        TA1REC.TA1LOCAT[3] = "VORXRF01"; /* i/o mod name*/
        TA1REC.TA1MAP = "OM0PM001"; /* ;/* map name*/
        move SQLCA to ERRSQLCA withV60Compat;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA00200" (TA1REC, ERRSQLCA) {isExternal = yes};
        XSPF4();
      end
    end
  else /* original record does not exist*/
    if (OM0PM001.OP-CASE-LOT-NBR > " ")
      OM0PS-ADD-CASE-LOT();

      if (OP1REC.XWHCD == "51")
        if (OP1REC.XPACD != "CU")
          OM0PS-GET-ORD-HDR();
          OP1REC.XPACD = "CU";
          OM0PS-UPDT-ORD-HDR();
        end
      end
    end
  end


end // end OM0PS-UDT-PRD-XREF

// update order header
Function OM0PS-UPDT-ORD-HDR()

   /* ************************************************************/

      /* OM0PS-UPDT-ORD-HDR*/
      /* this updates the op1rec for the product header om0pm001*/

   /* ************************************************************/



  call "IO0430" ("U ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good return*/
     /* Tcs include begin 08/25/98*/
    OM0PS-CHECK-UPDATE(); /* for updating corresp vbulk recs*/
     /* Tcs include end   08/25/98*/

  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0P   ";
    TA1REC.TA1LOCAT[1] = "OM0PS-UP";
    TA1REC.TA1LOCAT[2] = "DT-ORD-H";
    TA1REC.TA1LOCAT[3] = "IO0430  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "OM0PM001";
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1TBLKE = OP1REC.OP1KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end


end // end OM0PS-UPDT-ORD-HDR

// UPDATE VBULKS02
Function OM0PS-UPDTE-VBULK()
   /* tcs include begin*/
   /* to update vbulk*/
  set SQLCA empty;
  set OBFREC empty;

  VBULKS02.KUMSTRID = OP1REC.KUMSTRID;
  VBULKS02.XNXCD = OP1REC.XNXCD;
  VBULKS02.XBDCD = OP1REC.XBDCD;
  VBULKS02.OP1CUPO = OP1REC.OP1CUPO;
  VBULKS02.XDVCD = OP1REC.XDVCD;
  VBULKS02.XSOCD = OP1REC.XSOCD;
  VBULKS02.XWHCD = OP1REC.XWHCD;
  VBULKS02.OP1CUNDT = OP1REC.OP1CUNDT;
  VBULKS02.OP1DSADT = OP1REC.OP1DSADT;
  VBULKS02.SP1ID = OP1REC.SP1ID;
  VBULKS02.SM4REPID = OP1REC.SM4REPID;
  OBFREC.OBFTASK = "U ";
  call "VBULKS02" (OBFREC, SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

  else
    TA1REC.TA1LOCAT[1] = "U ";
    TA1REC.TA1LOCAT[2] = "VBULKS02";
    TA1REC.TA1LOCAT[3] = "OMOH-UP";
    TA1REC.TA1DBASE = "DORDB  "; /* data base name*/
    TA1REC.TA1TBLVU = "VBULKS02"; /* data base view*/
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end
   /* tcs include end*/
end // end OM0PS-UPDTE-VBULK

// o/e system security
Function OM0PS00()



      /* *********************************************************/
      /* * check order entry security                           **/
      /* *********************************************************/



  if (converseVar.eventKey is pf20)
    if (OP1REC.XOSCD in XOSTBL.XOSCD)
      if (XOSTBL.XOSALWCH[sysVar.arrayIndex] != "N")
          /* change ok*/
        return;
      else
        converseLib.validationFailed(368);
        return;
      end
    end
  end



  if (converseVar.eventKey is pf24)
    if (OP6REC.OP2LNIST in XOSTBL.XOSCD)
      if (XOSTBL.XOSALWCH[sysVar.arrayIndex] == "N" /* no change is permitted*/
       || OP2REC.OP2TALCQ > 0)                      /* no change is permitted*/
        converseLib.validationFailed(373);
      end
    end
  end

  if (converseVar.eventKey is pf20)
    if (OP6REC.OP2LNIST in XOSTBL.XOSCD)
      if (XOSTBL.XOSALWCH[sysVar.arrayIndex] == "N" /* no change is permitted*/
       || OP2REC.OP2TALCQ > 0)                      /* no change is permitted*/
        converseLib.validationFailed(375);
      end
    end
  end



end // end OM0PS00

// op2rec key info array processi
Function OM0PS01()



   /* ************************************************************/

      /* the purpose of this process is to set up a working*/
      /* storage array of op2rec selections flags and keys.*/
      /* the array has a limit of 900 associated which should*/
      /* be 25 to 50 times larger than any anticipated size for*/
      /* the table.*/

   /* ************************************************************/



  OP2REC.OP2KEY = OP1REC.OP1KEY;



      /* select the set of line items for the order number*/



  call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};



   /* ************************************************************/

      /* if the return code from the select set was good then*/
      /* go through and move the line items selected*/
      /* to the working storage array.  when no more*/
      /* records are in the set (sqlcode = 100) get out of the*/
      /* while loop.*/

   /* ************************************************************/



  OM0PW1.OM0PWCNT = 0; /* counter for loop*/
  OM0PW1.OM0PWSCT = 0; /* used for % allocated*/
  OM0PW1.OM0PWADD = 0; /* used for % allocated*/
  OMWREC.OMWPCTAL = 0; /* % allocated*/
  OMWREC.OMWLINES = 0; /* number for line items*/

  if (SQLCA.VAGen_SQLCODE == +0)
    while (OM0PW1.OM0PWCNT <= 899)
      call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        OM0PW1.OM0PWCNT = OM0PW1.OM0PWCNT + 1;
        OMWREC.OP2LNINB[OM0PWCNT] = OP2REC.OP2LNINB;
        OMWREC.OMWSELCD[OM0PWCNT] = "S";
        OM0PS04(); /* calc percent allocated*/
      else
        if (SQLCA.VAGen_SQLCODE == 100)

          if (OM0PW1.OM0PWSCT > 0)
            OMWREC.OMWPCTAL = OMWREC.OMWPCTAL / OM0PW1.OM0PWSCT;
          else
            OMWREC.OMWPCTAL = 0;
          end

          OM0PW1.OM0PWCNT = 999;
          call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
        else
          TA1REC.TA1TYPE = "DB2 ";
          TA1REC.TA1FUNC = "RETN";
          TA1REC.TA1PGMNM = "OM0P   ";
          TA1REC.TA1LOCAT[1] = "A       ";
          TA1REC.TA1LOCAT[2] = "OM0PS01 ";
          TA1REC.TA1LOCAT[3] = "IO0440  ";
          TA1REC.TA1LOCAT[4] = " ";
          TA1REC.TA1MAP = "        ";
          TA1REC.TA1DBASE = "DORDER";
          TA1REC.TA1TBLVU = "VITEM001";
          TA1TBLKE = OP2REC.OP2KEY;
          move SQLCA to ERRSQLCA withV60Compat;
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
          call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
          XSPF4();
        end
      end
    end
    OMWREC.OMWLINES = OM0PW1.OM0PWCNT; /* the table size*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0P   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "OM0PS01 ";
    TA1REC.TA1LOCAT[3] = "IO0440  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "        ";
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1TBLKE = OP2REC.OP2KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end


  OM0PW1.OM0PWCNT = 0;
  OM0PW1.OM0PWSCT = 0;
  OM0PW1.OM0PWADD = 0;
  OMWREC.OMWLNITX = 0;



end // end OM0PS01

// this sgrp builds the op6rec
Function OM0PS02()



   /* ************************************************************/

      /* this builds the op6rec for the product header om0pm001*/

   /* ************************************************************/



  set OP6REC empty;

  OP6REC.OP6KEY = OP1REC.OP1KEY;
  OP6REC.OP2LNINB = OMWREC.OP2LNINB[OM0PWCNT];



   /* build key for abend display if needed*/
  OM0PW1.OM0PWDK1 = OP6REC.OP1PARTN;
  OM0PW1.OM0PWDK2 = OP6REC.OP1CUOID;
  OM0PW1.OM0PWDK3 = OP6REC.OP1NORID;
  OM0PW1.OM0PWDK4 = OP6REC.OP2LNINB;

  call "IO0450" ("S ", SQLCA, OP6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good return*/
    move OP6REC to OM0PM001 withV60Compat;

    OMWREC.OMWORDN = OP6REC.OP1CUOID; /* formatted order number*/
    OMWREC.OMWSEP1 = ".";
    OMWREC.OMWSORDN = OP6REC.OP1NORID;
    OM0PM001.OM0PMOID = OMWREC.OMWORD;

    OM0PW1.OM0PWKUC = OP1REC.KUCCOID; /* formatted customer number*/
    OM0PW1.OM0PWF2 = ".";
    OM0PW1.OM0PWKUM = OP1REC.KUMSTRID;
    OM0PW1.OM0PWF3 = ".";
    OM0PW1.OM0PWNX = OP1REC.XNXCD;
    OM0PM001.OM0PMCID = OM0PW1.OM0PWCID;

    OM0PW1.SY1STNBR = OP6REC.SY1STNBR; /* formatted style number*/
    OM0PW1.OM0PWF4 = "-";
    OM0PW1.SY2CLRID = OP6REC.SY2CLRID;
    OM0PW1.OM0PWF5 = "-";
    OM0PW1.XDMCD = OP6REC.XDMCD;
    OM0PM001.OM0PMSID = OM0PW1.OM0PWSID;

    if (OMWREC.OMWSELCD[OMWLNITX] == "E"
     || OMWREC.OMWSELCD[OMWLNITX] == "X") /* coming from cancel*/
        /* leave msg untouched*/
    else
      OM0PM001.VAGen_EZEMSG = " ";
    end
    return;
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0P   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "OM0PS02 ";
    TA1REC.TA1LOCAT[3] = "IO0450  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "OM0PM001";
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VITEM002";
    TA1TBLKE = OM0PW1.OM0PWDKY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end



end // end OM0PS02

// this sgrp gets the sycrec
Function OM0PS03()



   /* ************************************************************/

      /* this builds the sycrec for the product header*/
      /* screen  --  om0pm001*/

   /* ************************************************************/



  set SYCREC empty;

  SYCREC.XGPCD = OP6REC.XGPCD;
  SYCREC.SY1STNBR = OP6REC.SY1STNBR;
  SYCREC.SY2CLRID = OP6REC.SY2CLRID;
  SYCREC.XDMCD = OP6REC.XDMCD;



  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OM0PM001.SY1STYNM = SYCREC.SY1STYNM;
    OM0PM001.SY2CLRDS = SYCREC.SY2CLRDS;
    if (OP1REC.XDZ-DATA-DIST-CD == "CA") /* added for Canada 7/11/95*/
      set WSY2000 empty;
      WSY2000.XDR-PROD-REG-CD = "05";
      OM0PS-SEL-SY2000(); /* cana*/
      if (OM0PW1.OM0PW-WSY2000-FND-FLAG == "Y") /* canada found*/
        /* next sentence*/
      else
        if (WSY2000.WSY2000-RETURN-CODE == 98) /* cana  database busy*/
          OMAREC.OMAERR = "Y"; /* cana*/
          converseLib.validationFailed(010); /* cana*/
          exit stack; /* cana*/
        else
          if (WSY2000.WSY2000-RETURN-CODE == 02) /* item not found on region*/
            OMAREC.OMAERR = "Y"; /* cana*/
            converseLib.validationFailed(911); /* cana*/
            exit stack; /* cana*/
          else
            OMAREC.OMAERR = "Y"; /* cana  fatal error*/
            converseLib.validationFailed(909); /* cana*/
            exit stack; /* cana*/
          end
        end
      end
    else
      if (OP1REC.XGPCD == "03") /* added for US apparel 06/20/96*/
        if (COMMAREA.XDVCD == "02" /* userid assigned to europe*/
         || COMMAREA.XDVCD == "03") /* userid assigned to asia*/
         /* continue processing*/
        else
          set WSY2000 empty;
          WSY2000.XDR-PROD-REG-CD = "01";
          OM0PS-SEL-SY2000();
          if (OM0PW1.OM0PW-WSY2000-FND-FLAG == "Y") /* found*/
           /* next sentence*/
          else
            if (WSY2000.WSY2000-RETURN-CODE == 98) /* database busy*/
              OMAREC.OMAERR = "Y";
              converseLib.validationFailed(010);
              exit stack;
            else
              if (WSY2000.WSY2000-RETURN-CODE == 02) /* item not found on region*/
                OMAREC.OMAERR = "Y";
                converseLib.validationFailed(911);
                exit stack;
              else
                OMAREC.OMAERR = "Y"; /* fatal error*/
                converseLib.validationFailed(909);
                exit stack;
              end
            end
          end
        end
      end
    end
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0P   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "OM0PS03 ";
    TA1REC.TA1LOCAT[3] = "IO0560  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "OM0PM001";
    TA1REC.TA1DBASE = "DPROD ";
    TA1REC.TA1TBLVU = "        ";
    TA1TBLKE = SYCREC.SYCKEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end



end // end OM0PS03

// calc percent allocated
Function OM0PS04()



   /* *************************************************************/

    /* om0ps04*/
    /* this calculates the percent allocated for an order*/

    /* the % alloc = (alloc + shipped) / (orig - cancel + add)*/

    /* the add = tot on order + tot shipped*/
            /* + tot cancelled - tot org ord*/

   /* ************************************************************/



  OM0PW1.OM0PWSCT = 0;
  OM0PW1.OM0PWADD = 0;

  OMWREC.OMWPCTAL = OMWREC.OMWPCTAL + OP2REC.OP2TALCQ + OP2REC.OP2TSHPQ;

  OM0PW1.OM0PWSCT = OM0PW1.OM0PWSCT + OP2REC.OP2TORGQ - OP2REC.OP2TCNLQ;

  OM0PW1.OM0PWADD = OM0PW1.OM0PWADD + OP2REC.OP2TONOQ;
  OM0PW1.OM0PWADD = OM0PW1.OM0PWADD + OP2REC.OP2TSHPQ;
  OM0PW1.OM0PWADD = OM0PW1.OM0PWADD + OP2REC.OP2TCNLQ;
  OM0PW1.OM0PWADD = OM0PW1.OM0PWADD - OP2REC.OP2TORGQ;

  OM0PW1.OM0PWSCT = OM0PW1.OM0PWSCT + OM0PW1.OM0PWADD;



    /* the final percent is calc is om0ps01 when all*/
      /* line items have been read*/



end // end OM0PS04

// read fresh header record
Function OM0PS05()

   /* ************************************************************/
   /* *                                                         **/
   /* *    Get the order header.  The key to the                **/
   /* *    order is passed through the commarea into omwrec     **/
   /* *    and then on to op1rec.                               **/
   /* *                                                         **/
   /* ************************************************************/


  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0P    ";
    TA1REC.TA1MAP = "OM0PM001";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VORHDR01";
    OMWREC.OMWORDN = OP1REC.OP1CUOID;
    OMWREC.OMWSORDN = OP1REC.OP1NORID;
    TA1REC.TA1TBLKE = OMWREC.OMWORD;
    TA1REC.TA1LOCAT[3] = "OM0PS05";
    TA1REC.TA1LOCAT[4] = "IO0430";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
    XSPF4();
  end





end // end OM0PS05

// CHECK FOR PREPACK
Function OM0PS06()

   /* THIS STATEMENT GROUP CHECKS THE PREPACK DATABASE*/
   /* TO SEE IF THE ORDER EXISTS*/

  OMAREC.OMAERR = "N";
  OMWREC.OMWPKCHF = "N"; /* pack change flag*/
  OMWREC.OMWPPEXF = "N"; /* prepack exists flag*/
  sysVar.arrayIndex = 1;

  if (OP1REC.XGPCD == "03" /* APPAREL ORDER*/
   || OP1REC.XGPCD == "02") /* footwear order*/
    if (OP1REC.XPACD in XPATBL.XPACD /* IF VALID PACK CODE*/
     && XPATBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XPATBL.XPASPFFL[sysVar.arrayIndex] == "Y") /* CUST WANTS PREPACK*/
           /* NEXT SENTENCE   SEE IF ORDER IS ON DBASE*/
      else
        return;
      end
    else
      return;
    end
  else
    return;
  end

   /* BUILD THE KEY TO SPECIFIED PREPACK TABLE*/

  set OSNREC empty;
  set SQLCA empty;

  OSNREC.XWHCD = OP1REC.XWHCD; /* WAREHOUSE*/
  OSNREC.OP1PARTN = OP1REC.OP1PARTN; /* PART CHAR*/
  OSNREC.OP1CUOID = OP1REC.OP1CUOID; /* ORDER NUM*/
  OSNREC.OP1NORID = OP1REC.OP1NORID; /* NIKE ORD ID*/

  call "IO5650" ("SE", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == -811) /* multi records found*/
    OMWREC.OMWPPEXF = "Y"; /* prepack exists flag*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OMWREC.OMWPPEXF = "N"; /* prepack exists flag*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        OMWREC.OMWPKCHF = "Y"; /* reseet pack change flag*/
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(672); /* prepack db busy try again*/
        return;
      else
        OMAREC.OMAERR = "Y";
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "OM0P    ";
        TA1REC.TA1LOCAT[1] = "SE      ";
        TA1REC.TA1LOCAT[2] = "OM0PS06 ";
        TA1REC.TA1LOCAT[3] = "IO5650  ";
        TA1REC.TA1DBASE = "DORDER  ";
        TA1REC.TA1TBLVU = "VCSPRP01";
        OM0PW1.OM0PWTK1 = " ";
        OM0PW1.OM0PWTK2 = OP1REC.OP1CUOID;
        OM0PW1.OM0PWTK3 = OP1REC.OP1NORID;
        TA1REC.TA1TBLKE = OM0PW1.OM0PWTK1;
        try
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        end
        COMMAREA.CAMSGA = "PREPACK DB PROBLEMS";
        COMMAREA.CAMSGB = "ORDER MAY HAVE PREPACK CALL USER ANALYST";
        COMMAREA.CACURRAP = "OM0M";
        transfer to program "OM0M" passing COMMAREA;
      end
    end
  end

end // end OM0PS06

// io3260 oslrec select
Function OM0PS07()

   /* *************************************************************/
    /* line item have a factory po tied to it already?*/
   /* *************************************************************/

  set OSLREC empty;


  OSLREC.OP1PARTN = OP1REC.OP1PARTN;
  OSLREC.OP1CUOID = OP1REC.OP1CUOID;
  OSLREC.OP1NORID = OP1REC.OP1NORID;
  OSLREC.OP2LNINB = OP2REC.OP2LNINB;

  call "IO3260" ("S ", SQLCA, OSLREC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0 /* check for good return*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "SEL UNIQ";
    TA1REC.TA1LOCAT[2] = "OM0PS07 ";
    TA1REC.TA1LOCAT[4] = "        ";
    OM0PS71(); /* abend routine for io3260*/
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    if (OP1REC.XGPCD == "02")
      OM0PW1.OM0PWPD1 = OSLREC.PC3POIDT; /* save for edit*/
      OM0PW1.FY1FCTYC = OSLREC.FY1FCTYC; /* save for edit*/
      OM0PM001.OM0PMPDT = OM0PW1.OM0PWPDT;
      OM0PM001.FY1FCTYC = OSLREC.FY1FCTYC;
    else
      OM0PW1.OM0PWPNB = OSLREC.PC3PONBR; /* save for edit*/
      OM0PM001.OM0PMPNB = OSLREC.PC3PONBR;
    end
  end


    /* ONLY FOR DIRECT SHIP ORDERS (NIL AND DOMESTIC):*/
      /* if footwear, show factory po id label and allow entry*/
      /* if apparel, show factory po nbr label and allow entry*/

  if (OP1REC.XGPCD == "02")
    set OM0PM001.OM0PMFID initialAttributes; /* footwear label*/
    if (OP6REC.OP2LNIST == "XL")
      set OM0PM001.OM0PMPDT protect; /* footwear only*/
      set OM0PM001.FY1FCTYC protect; /* footwear only*/
    else
      set OM0PM001.OM0PMPDT initialAttributes; /* footwear only*/
      set OM0PM001.FY1FCTYC initialAttributes; /* footwear only*/
    end
    set OM0PM001.OM0PMFNB skip, invisible; /* apparel only*/
    set OM0PM001.OM0PMPNB skip, invisible; /* apparel only*/
  end



  if (OP1REC.XGPCD != "02")
    set OM0PM001.OM0PMFNB initialAttributes;
    if (OP6REC.OP2LNIST == "XL")
      set OM0PM001.OM0PMPNB protect; /* apparel only*/
    else
      set OM0PM001.OM0PMPNB initialAttributes; /* apparel only*/
    end
    set OM0PM001.OM0PMFID skip, invisible; /* footwear only*/
    set OM0PM001.OM0PMPDT skip, invisible; /* footwear only*/
    set OM0PM001.FY1FCTYC skip, invisible; /* footwear only*/
  end
end // end OM0PS07

// set fields for factory po
Function OM0PS08()

    /* ONLY FOR DIRECT SHIP ORDERS (NIL AND DOMESTIC):*/
      /* if footwear, show factory po id label and allow entry*/
      /* if apparel, show factory po nbr label and allow entry*/

  if (OP1REC.XGPCD == "02")
    set OM0PM001.OM0PMFID initialAttributes; /* footwear label*/
    if (OP6REC.OP2LNIST == "XL")
      set OM0PM001.OM0PMPDT protect; /* footwear only*/
      set OM0PM001.FY1FCTYC protect; /* footwear only*/
    else
      set OM0PM001.OM0PMPDT initialAttributes; /* footwear only*/
      set OM0PM001.FY1FCTYC initialAttributes; /* footwear only*/
    end
    set OM0PM001.OM0PMFNB skip, invisible; /* apparel only*/
    set OM0PM001.OM0PMPNB skip, invisible; /* apparel only*/
  end



  if (OP1REC.XGPCD != "02")
    set OM0PM001.OM0PMFNB initialAttributes;
    if (OP6REC.OP2LNIST == "XL")
      set OM0PM001.OM0PMPNB protect; /* apparel only*/
    else
      set OM0PM001.OM0PMPNB initialAttributes; /* apparel only*/
    end
    set OM0PM001.OM0PMFID skip, invisible; /* footwear only*/
    set OM0PM001.OM0PMPDT skip, invisible; /* footwear only*/
    set OM0PM001.FY1FCTYC skip, invisible; /* footwear only*/
  end
end // end OM0PS08

// READ COMPANY RECORD
Function OM0PS09()
  set SQLCA empty;

  OM0PW1.OM0PW-XREFCUST = "N"; /* init customer xref flag*/
  KUCREC.KUCCOID = OP1REC.KUCCOID;

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    OM0PW1.OM0PW-CUSKU-SZ-FL = KUCREC.CU-CUSKU-SZ-FL; /* save fl value*/
    if (KUCREC.KUCSKIND != " ") /* xref customer*/
      OM0PW1.OM0PW-XREFCUST = "Y"; /* set customer xref flag*/
    end
  else
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCMPNY";
    TA1REC.TA1LOCAT[1] = "S "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO0240"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "OM0PS09"; /* statement group*/
    TA1REC.TA1TBLKE = OM0PW1.OM0PWKUC; /* customer*/
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0P    ";
    TA1REC.TA1MAP = "OM0PM001"; /* ;/* map name*/
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end
end // end OM0PS09

// main edit routine
Function OM0PS10()



   /* *********************************************************/

      /* om0ps10  this statement group is the initial edit*/
      /* process for required data, and pf/enter key selection.*/

   /* *********************************************************/



      /* check for valid attention keys*/



  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf9
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf19
   || converseVar.eventKey is pf20
   || converseVar.eventKey is pf23
   || converseVar.eventKey is pf24)
     /* OR EZEAID IS PF10;  for testing*/
     /* valid key entered*/
  else
    converseLib.validationFailed(8);
    return;
  end

   /* IF EZEAID IS PF10;*/
    /* EZEFLO;*/
   /* END ;*/



      /* om0ps11 check for fast path*/



  OM0PS11();

  if (converseVar.validationMsgNum > 0) /* a fast path error*/
    return;
  end



      /* was pf24 hit to cancel ?????*/



  if (converseVar.eventKey is pf24
   && OM0PM001.XOMCD1 == " ")
    OM0PS43(); /* validate cancellation security*/
    OM0PS00();
  end

  if (converseVar.validationMsgNum != 0) /* failed security check*/
    return;
  else
    if (converseVar.eventKey is pf24
     && OM0PM001.XOMCD1 == " ")
      converseLib.validationFailed(400); /* message to enter xomcd*/
      set OM0PM001.OM0PMXOM normal;
      set OM0PM001.OM0PMXOM skip, bold;
      set OM0PM001.OM0PMREL normal;
      set OM0PM001.OM0PMREL skip, bold;
      set OM0PM001.XOMCD1 cursor, normal;
      set OM0PM001.OM0PMREF normal;
    end
  end



      /* check xomcd and transfer to om0r if ok*/



  if (converseVar.eventKey is pf24
   && OM0PM001.XOMCD1 != " ")
    OM0PS44(); /* edit the cancel reason & go to om0r*/
                                   /* if ok*/
  end



end // end OM0PS10

// edit for fast path & pf path
Function OM0PS11()



   /* *********************************************************/

      /* om0ps11*/
      /* this statement group is to edit for fast path*/

   /* *********************************************************/




      /* pf key transfer*/



  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf9
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf19
   || converseVar.eventKey is pf20)
     /* valid pf for transfer*/
  else
    return;
  end



  if (converseVar.eventKey is pf1)
    COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
    COMMAREA.CACURRAP = "OM0G";
    transfer to program "OM0G" passing COMMAREA;
  end

  if (converseVar.eventKey is pf3)
    COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
    if (OMWREC.OMWPKCHF == "Y") /* pack change flag*/
      OM0PS06(); /* check for prepack*/
      if (OMAREC.OMAERR == "Y")
        return;
      end
      if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
        COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
        COMMAREA.CAMSG = "ORDER MAINTAINED - UPDATE PREPACK";
        COMMAREA.CACURRAP = "OS0G";
        transfer to program "OS0G" passing COMMAREA;
      else
        COMMAREA.CACURRAP = "OM0M";
        transfer to program "OM0M" passing COMMAREA;
      end
    else
      COMMAREA.CACURRAP = "OM0M";
      transfer to program "OM0M" passing COMMAREA;
    end
  end



  if (converseVar.eventKey is pf4) /* check for master menu level*/
    COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
    if (OMWREC.OMWPKCHF == "Y") /* pack change flag*/
      OM0PS06(); /* check for prepack*/
      if (OMAREC.OMAERR == "Y")
        return;
      end
      if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
        COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
        COMMAREA.CAMSG = "ORDER MAINTAINED -  UPDATE PREPACK";
        COMMAREA.CACURRAP = "OS0G";
        transfer to program "OS0G" passing COMMAREA;
      else
        XSPF4(); /* invoke master menu request*/
        OM0PM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
        COMMAREA.CATOAP = " "; /* clear app*/
        exit stack;
      end
    else
      XSPF4(); /* invoke master menu request*/
      OM0PM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
      COMMAREA.CATOAP = " "; /* clear app*/
      exit stack;
    end
  end



  if (converseVar.eventKey is pf9
   && OM0PM001 is modified)
    return;
  else
    if (converseVar.eventKey is pf9)
      if (OMWREC.OMWSELCD[OMWLNITX] == "S")
        OMWREC.OMWSELCD[OMWLNITX] = "V";
      end
      COMMAREA.CACURRAP = "OM0S";
      COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
      transfer to program "OM0S" passing COMMAREA;
    end
  end



  if (converseVar.eventKey is pf13
   && OM0PM001 is modified
   && OMWREC.OMWCHGFL == "Y")
    OM0PS43(); /* check cancel/update security*/
    OM0PS00(); /* check change security*/
    return;
  else
    if (converseVar.eventKey is pf13
     && OMWREC.OMWCHGFL == "Y")
      OM0PS43(); /* check cancel/update security*/
      OM0PS00(); /* check change security*/
      if (converseVar.validationMsgNum > 0)
        return;
      else
        COMMAREA.CACURRAP = "OM0H";
        COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
        transfer to program "OM0H" passing COMMAREA;
      end
    end
  end



  if (converseVar.eventKey is pf18
   && OM0PM001 is modified
   && OMWREC.OMWCHGFL == "Y")
    OM0PS43(); /* check cancel/update security*/
    OM0PS00(); /* check change security*/
    return;
  else
    if (converseVar.eventKey is pf18)
      COMMAREA.CACURRAP = "OM0C";
      COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
      transfer to program "OM0C" passing COMMAREA;
    end
  end



    /* if pf19 is hit rebuild the screen*/



  if (converseVar.eventKey is pf19)

    /* ********************************************************/
      /* the process will build the header screen for the*/
      /* product header order number change.*/
      /* the following statement groups are*/
      /* used to build the map:*/

      /* om0ps02  to create the op6rec*/
      /* om0ps2a  to create the op2rec*/
      /* om0ps03  to create the sycrec*/
      /* om0ps07  to create the oslrec*/
      /* om0ps12  to get the table descriptions.*/
      /* om0ps13  to get the kucrec service rep name.*/
      /* om0ps14  check status and reset to normal.*/
      /* om0ps-get-prd-xref   to get caselot nbr.*/
    /* ********************************************************/



    set OM0PM001 initial;
    OM0PM001.OMTITLE = "CHANGE ";
    OM0PM001.KUMSTRNM = OMWREC.KUMSTRNM;
    OM0PM001.OP1CUNDT = OP1REC.OP1CUNDT;
    OM0PM001.OM0PMDTE = VGVar.currentShortGregorianDate;
    OM0PS02();
    OM0PS2A();
    OM0PS03();
    if (OP1REC.XWHCD == " ")
      OM0PS07();
    end
    OM0PS12();
    OM0PS13();
    OM0PS-GET-PRD-XREF();
    if (OM0PW1.OM0PW-INDXFND == "Y")
      OM0PM001.OP-CASE-LOT-NBR = VORXRF01.OP-CASE-LOT-NBR;
    end
    OM0PS14();


     /* build PF key line #1 (msg1)*/

    OM0PW1.OM0PWMS1 = "3:SKP-UP/NU ORD   9:PRD SUM    13:OHDR1 ";
    OM0PW1.OM0PWMS2 = "   19:SKP-UP             ENTER:CONTINUE";
    OM0PM001.OM0PMSG1 = OM0PW1.OM0PWMSG;

     /* build PF key line #1 (msg1)*/

    OM0PW1.OM0PWMS1 = "4:SKP-UP/MST MN  12:EDIT       18:COMMEN";
    if (XS0MW01.XS0MWABF == "Y") /* transmitted Airborne order*/
      OM0PW1.OM0PWMS2 = "T                                     ";
    else
      OM0PW1.OM0PWMS2 = "T  20:ADD PRD               24:CANCEL ";
    end
    OM0PM001.OM0PMSG2 = OM0PW1.OM0PWMSG;

    /* ** OM0PM001.XQACD CURSOR;*/
    set OM0PM001.OP-CASE-LOT-NBR cursor;



  end


  if (converseVar.eventKey is pf20)
    if (OP1REC.XDVCD == "02" /* international*/
     && OP1REC.XOCCD == "TR") /* transmitted airborne order*/
      converseLib.validationFailed(802); /* ord cls 'tr' prevents add of prod*/
    end
  end


     /* this section of code overlays the ezemno with the message*/
     /* number 368 (order status does not allow changes to the order)*/
     /* according to the user, it needs to remain in place except for*/
     /* airborne orders.  the airborne message will be displayed.*/

  if (converseVar.eventKey is pf20
   && OM0PM001 is modified
   && OMWREC.OMWCHGFL == "Y")
    OM0PS43(); /* check cancel/update security*/
    OM0PS00(); /* check change security*/
    if (converseVar.validationMsgNum > 0)
      if (XS0MW01.XS0MWABF == "N") /* not a transmitted airborne*/
        converseLib.validationFailed(368); /* overlay ezemno with 368*/
        return;
      end
    end
  else
    if (converseVar.eventKey is pf20
     && OMWREC.OMWCHGFL == "Y")
      OM0PS43(); /* check cancel/update security*/
      OM0PS00(); /* check change security*/
      if (converseVar.validationMsgNum > 0)
        if (XS0MW01.XS0MWABF == "N") /* not a transmitted airborne*/
          converseLib.validationFailed(368); /* overlay ezemno with 368*/
          return;
        end
      else
        COMMAREA.CACURRAP = "OM0A";
        COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
        transfer to program "OM0A" passing COMMAREA;
      end
    end
  end



end // end OM0PS11

// get table descriptions
Function OM0PS12()



   /* ************************************************************/

      /* om0ps12  this gets all table entries for 0m0pm001.*/

   /* ************************************************************/



  if (OP6REC.OP2LNIST in XOSTBL.XOSCD)
    OM0PM001.OP2LNIST = XOSTBL.XOSABRV[sysVar.arrayIndex];
  else
    OM0PM001.OP2LNIST = "       ";
  end



  if (OP2REC.OP2PRCVF == "Y")
    OM0PM001.OP2PRCVF = "AVG";
  else
    OM0PM001.OP2PRCVF = "   ";
  end



  if (OP6REC.OP2PRCOF == "Y")
    OM0PM001.OP2PRCOF = "*";
  else
    OM0PM001.OP2PRCOF = " ";
  end



  OM0PM001.XWHCD = OP1REC.XWHCD;

  if (OP1REC.XWHCD == " ")
    OM0PM001.XWHSABRV = "       ";
  else
    if (OP1REC.XWHCD in XWHTBL.XWHCD)
      OM0PM001.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    else
      OM0PM001.XWHSABRV = "       ";
    end
  end



  OM0PM001.XOWCD = OP2REC.XOWCD;
  OM0PW1.XOWCD = OM0PM001.XOWCD;
  OM0PW1.XWHCD = OP1REC.XWHCD;

  if (OP2REC.XOWCD == " "
   || OP2REC.XOWCD == "00")
    if (OP1REC.XWHCD == "03"
     || OP1REC.XWHCD == "51"
     || OP1REC.XWHCD == "25"
     || OP1REC.XWHCD == "27")
      OM0PM001.XOWABRV = "       ";
      OM0PM001.XOWCD = "00";
    else
      OM0PM001.XOWABRV = "       ";
      OM0PM001.XOWCD = " ";
    end
  else
    if (OM0PW1.OM0PWOKY in XOWTBL.XOWKEY)
      OM0PM001.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
    else
      OM0PM001.XOWABRV = "       ";
    end
  end




  if (OP2REC.XRSCD == " ")
    OM0PM001.XRSCD = "  ";
    OM0PM001.XRSABRV = "      ";
  else
    OM0PM001.XRSCD = OP2REC.XRSCD;
    if (OP2REC.XRSCD in XRSTBL.XRSCD)
      OM0PM001.XRSABRV = XRSTBL.XRSABRV[sysVar.arrayIndex];
    else
      OM0PM001.XRSABRV = "      ";
    end
  end



  if (OP2REC.XDNCD == " ")
    OM0PM001.XDNCD = "  ";
    OM0PM001.XDNABRV = "      ";
  else
    OM0PM001.XDNCD = OP2REC.XDNCD;
    if (OP2REC.XDNCD in XDNTBL.XDNCD)
      OM0PM001.XDNABRV = XDNTBL.XDNABRV[sysVar.arrayIndex];
    else
      OM0PM001.XDNABRV = "      ";
    end
  end




  if (OM0PM001.XDSCD == " ")
    OM0PM001.XDSABRV = "       ";
  else
    if (OM0PM001.XDSCD in XDSTBL.XDSCD)
      OM0PM001.XDSABRV = XDSTBL.XDSABRV[sysVar.arrayIndex];
    else
      OM0PM001.XDSABRV = "       ";
    end
  end



  if (OM0PM001.XQACD in XQATBL.XQACD)
    OM0PM001.XQAABRV = XQATBL.XQAABRV[sysVar.arrayIndex];
  else
    OM0PM001.XQAABRV = "       ";
  end




   /* inventory segment code not used as of phase ii*/

  if (OP6REC.PC2INSEG == " ")
    OM0PM001.PC2SEGAB = " ";
  else
    OM0PS40(); /* read pc2rec*/
  end



  if (OP6REC.XPGCD == " ")
    OM0PM001.XPGABRV = "     ";
  else
    if (OM0PM001.XPGCD in XPGTBL.XPGCD)
      OM0PM001.XPGABRV = XPGTBL.XPGABRV[sysVar.arrayIndex];
    else
      OM0PM001.XPGABRV = "       ";
    end
  end



  if (OM0PM001.XUMCD in XUMTBL.XUMCD)
    OM0PM001.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
  else
    OM0PM001.XUMDESC = "       ";
  end



  sysVar.arrayIndex = 0;

  while (sysVar.arrayIndex <= 0)
    if (SYCREC.XLCCD1 != " "
     && SYCREC.SY2CEDT1 <= OM0PW1.OM0PWDT
     && SYCREC.SY2CEDT1 != 0)
      OM0PM001.XLCCD = SYCREC.XLCCD1;
      sysVar.arrayIndex = 99;
    else
      if (SYCREC.XLCCD2 != " "
       && SYCREC.SY2CEDT2 <= OM0PW1.OM0PWDT
       && SYCREC.SY2CEDT2 != 0)
        OM0PM001.XLCCD = SYCREC.XLCCD2;
        sysVar.arrayIndex = 99;
      else
        if (SYCREC.XLCCD3 != " "
         && SYCREC.SY2CEDT3 <= OM0PW1.OM0PWDT
         && SYCREC.SY2CEDT3 != 0)
          OM0PM001.XLCCD = SYCREC.XLCCD3;
          sysVar.arrayIndex = 99;
        else
          if (SYCREC.XLCCD4 != " "
           && SYCREC.SY2CEDT4 <= OM0PW1.OM0PWDT
           && SYCREC.SY2CEDT4 != 0)
            OM0PM001.XLCCD = SYCREC.XLCCD4;
            sysVar.arrayIndex = 99;
          else
            sysVar.arrayIndex = 99;
          end
        end
      end
    end
  end



  if (OM0PM001.XLCCD in XLCTBL.XLCCD)
    OM0PM001.XLCABRV = XLCTBL.XLCABRV[sysVar.arrayIndex];
  else
    OM0PM001.XLCABRV = "       ";
  end


    /* customer label code abbreviations*/

  OM0PM001.PWRLBCD[1] = OP6REC.PWRLBCD[1];
  OM0PS55(); /* get abrv*/
  OM0PM001.PWRLBCD[2] = OP6REC.PWRLBCD[2];
  OM0PS56(); /* get abrv*/


  OM0PW1.OM0PMHTP = " ";

  if (OP6REC.XHDCD[1] == " ")
    OM0PM001.XHDABRV[1] = "     ";
  else
    sysVar.arrayIndex = 1;
    OM0PW1.XHDCD = OM0PM001.XHDCD[1];
    OM0PW1.XGPCD = OP6REC.XGPCD;
    if (OM0PW1.XHDKEY in XHDTBL.XHDKEY)
      OM0PM001.XHDABRV[1] = XHDTBL.XHDABRV[sysVar.arrayIndex];
      OM0PW1.XHDUCHFL = XHDTBL.XHDUCHFL[sysVar.arrayIndex];
    else
      OM0PM001.XHDABRV[1] = "       ";
      OM0PW1.XHDUCHFL = " ";
    end
  end

  if (OP6REC.OP2HCHGO[1] == "Y")
    OM0PW1.OP2HCHGO = "*";
  else
    OM0PW1.OP2HCHGO = " ";
  end

  OM0PM001.OM0PMHTP[1] = OM0PW1.OM0PMHTP;
  OM0PW1.OM0PMHTP = "  ";

  if (OP6REC.XHDCD[2] == " ")
    OM0PM001.XHDABRV[2] = "     ";
  else
    sysVar.arrayIndex = 1;
    OM0PW1.XHDCD = OM0PM001.XHDCD[2];
    OM0PW1.XGPCD = OP6REC.XGPCD;
    if (OM0PW1.XHDKEY in XHDTBL.XHDKEY)
      OM0PM001.XHDABRV[2] = XHDTBL.XHDABRV[sysVar.arrayIndex];
      OM0PW1.XHDUCHFL = XHDTBL.XHDUCHFL[sysVar.arrayIndex];
    else
      OM0PM001.XHDABRV[2] = "       ";
      OM0PW1.XHDUCHFL = " ";
    end
  end

  if (OP6REC.OP2HCHGO[2] == "Y")
    OM0PW1.OP2HCHGO = "*";
  else
    OM0PW1.OP2HCHGO = " ";
  end

  OM0PM001.OM0PMHTP[2] = OM0PW1.OM0PMHTP;
  OM0PW1.OM0PMHTP = "  ";

  if (OP6REC.XHDCD[3] == " ")
    OM0PM001.XHDABRV[3] = "     ";
  else
    sysVar.arrayIndex = 1;
    OM0PW1.XHDCD = OM0PM001.XHDCD[3];
    OM0PW1.XGPCD = OP6REC.XGPCD;
    if (OM0PW1.XHDKEY in XHDTBL.XHDKEY)
      OM0PM001.XHDABRV[3] = XHDTBL.XHDABRV[sysVar.arrayIndex];
      OM0PW1.XHDUCHFL = XHDTBL.XHDUCHFL[sysVar.arrayIndex];
    else
      OM0PM001.XHDABRV[3] = "       ";
      OM0PW1.XHDUCHFL = " ";
    end
  end

  if (OP6REC.OP2HCHGO[3] == "Y")
    OM0PW1.OP2HCHGO = "*";
  else
    OM0PW1.OP2HCHGO = " ";
  end

  OM0PM001.OM0PMHTP[3] = OM0PW1.OM0PMHTP;
  OM0PW1.OM0PMHTP = "  ";

  if (OP6REC.XHDCD[4] == " ")
    OM0PM001.XHDABRV[4] = "     ";
  else
    sysVar.arrayIndex = 1;
    OM0PW1.XHDCD = OM0PM001.XHDCD[4];
    OM0PW1.XGPCD = OP6REC.XGPCD;
    if (OM0PW1.XHDKEY in XHDTBL.XHDKEY)
      OM0PM001.XHDABRV[4] = XHDTBL.XHDABRV[sysVar.arrayIndex];
      OM0PW1.XHDUCHFL = XHDTBL.XHDUCHFL[sysVar.arrayIndex];
    else
      OM0PM001.XHDABRV[4] = "       ";
      OM0PW1.XHDUCHFL = " ";
    end
  end

  if (OP6REC.OP2HCHGO[4] == "Y")
    OM0PW1.OP2HCHGO = "*";
  else
    OM0PW1.OP2HCHGO = " ";
  end

  OM0PM001.OM0PMHTP[4] = OM0PW1.OM0PMHTP;
  OM0PW1.OM0PMHTP = "  ";

  if (OP6REC.XHDCD[5] == " ")
    OM0PM001.XHDABRV[5] = "     ";
  else
    sysVar.arrayIndex = 1;
    OM0PW1.XHDCD = OM0PM001.XHDCD[5];
    OM0PW1.XGPCD = OP6REC.XGPCD;
    if (OM0PW1.XHDKEY in XHDTBL.XHDKEY)
      OM0PM001.XHDABRV[5] = XHDTBL.XHDABRV[sysVar.arrayIndex];
      OM0PW1.XHDUCHFL = XHDTBL.XHDUCHFL[sysVar.arrayIndex];
    else
      OM0PM001.XHDABRV[5] = "       ";
      OM0PW1.XHDUCHFL = " ";
    end
  end

  if (OP6REC.OP2HCHGO[5] == "Y")
    OM0PW1.OP2HCHGO = "*";
  else
    OM0PW1.OP2HCHGO = " ";
  end

  OM0PM001.OM0PMHTP[5] = OM0PW1.OM0PMHTP;
  OM0PW1.OM0PMHTP = "  ";



  if (OP6REC.XOMCD[1] == " ")
    OM0PM001.XOMABRV[1] = "     ";
  else
    if (OP6REC.XOMCD[1] in XOMTBL.XOMCD)
      set OM0PM001.OP2OMDT[1] normal;
      set OM0PM001.OP2OMDT[1] skip;
      OM0PM001.XOMABRV[1] = XOMTBL.XOMABRV[sysVar.arrayIndex];
      OM0PW1.OM0PWMTP = OP2REC.XMTCD[1];
      OM0PW1.OM0PWCHR = OP6REC.XOMCD[1];
      OM0PM001.OM0PMMTC[1] = OM0PW1.OM0PMMTC;
    else
      OM0PM001.XOMABRV[1] = "       ";
    end
  end



  if (OP6REC.XOMCD[2] == " ")
    OM0PM001.XOMABRV[2] = "     ";
  else
    if (OP6REC.XOMCD[2] in XOMTBL.XOMCD)
      set OM0PM001.OP2OMDT[2] normal;
      set OM0PM001.OP2OMDT[2] skip;
      OM0PM001.XOMABRV[2] = XOMTBL.XOMABRV[sysVar.arrayIndex];
      OM0PW1.OM0PWMTP = OP2REC.XMTCD[2];
      OM0PW1.OM0PWCHR = OP6REC.XOMCD[2];
      OM0PM001.OM0PMMTC[2] = OM0PW1.OM0PMMTC;
    else
      OM0PM001.XOMABRV[2] = "       ";
    end
  end



  if (OP6REC.XOMCD[3] == " ")
    OM0PM001.XOMABRV[3] = "     ";
  else
    if (OP6REC.XOMCD[3] in XOMTBL.XOMCD)
      set OM0PM001.OP2OMDT[3] normal;
      set OM0PM001.OP2OMDT[3] skip;
      OM0PM001.XOMABRV[3] = XOMTBL.XOMABRV[sysVar.arrayIndex];
      OM0PW1.OM0PWMTP = OP2REC.XMTCD[3];
      OM0PW1.OM0PWCHR = OP6REC.XOMCD[3];
      OM0PM001.OM0PMMTC[3] = OM0PW1.OM0PMMTC;
    else
      OM0PM001.XOMABRV[3] = "       ";
    end
  end



  if (OP6REC.XOMCD[4] == " ")
    OM0PM001.XOMABRV[4] = "     ";
  else
    if (OP6REC.XOMCD[4] in XOMTBL.XOMCD)
      set OM0PM001.OP2OMDT[4] normal;
      set OM0PM001.OP2OMDT[4] skip;
      OM0PM001.XOMABRV[4] = XOMTBL.XOMABRV[sysVar.arrayIndex];
      OM0PW1.OM0PWMTP = OP2REC.XMTCD[4];
      OM0PW1.OM0PWCHR = OP6REC.XOMCD[4];
      OM0PM001.OM0PMMTC[4] = OM0PW1.OM0PMMTC;
    else
      OM0PM001.XOMABRV[4] = "       ";
    end
  end



end // end OM0PS12

// to get service rep names
Function OM0PS13()



   /* ************************************************************/

      /* the purpose of this process is to get the service*/
      /* rep names from kuyrec for map om0pm001.*/
      /* this will loop four times to get all potential names.*/

   /* ************************************************************/



  set KUYREC empty;

  OM0PW1.OM0PWTSZ = 1;

  while (OM0PW1.OM0PWTSZ < 5)
    KUYREC.KUYSVRID = OP2REC.OP1MTREP[OM0PWTSZ];
    call "IO0550" ("S ", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      OM0PM001.XXXUSRID[OM0PWTSZ] = KUYREC.XXXUSRID;
      OM0PW1.OM0PWTSZ = OM0PW1.OM0PWTSZ + 1;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        OM0PM001.XXXUSRID[OM0PWTSZ] = " ";
        OM0PW1.OM0PWTSZ = OM0PW1.OM0PWTSZ + 1;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "OM0P   ";
        TA1REC.TA1LOCAT[1] = "A       ";
        TA1REC.TA1LOCAT[2] = "OM0PS13 ";
        TA1REC.TA1LOCAT[3] = "IO0550  ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1MAP = "        ";
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VSVREP01";
             /* MOVE OP2REC.OP1MTREP(OM0PWTSZ) TO TA1TBLKE;*/
        move SQLCA to ERRSQLCA withV60Compat;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        XSPF4();
      end
    end
  end



  OM0PW1.OM0PWTSZ = 0;



end // end OM0PS13

// to chk line item stat & all qt
Function OM0PS14()



   /* ************************************************************/

      /* the purpose of this process is to check the op6rec*/
      /* line item status and allocated quantity.*/
      /* if the line item status is 'n', or the allocated*/
      /* quantity is greater than zero, the record cannot*/
      /* changed.  otherwise, unprotect fields for entry.*/

   /* ************************************************************/



  if (OP6REC.OP2LNIST in XOSTBL.XOSCD)
    if (XOSTBL.XOSALWCH[sysVar.arrayIndex] == "N" /* no change is permitted*/
     || OP2REC.OP2TALCQ > 0)                      /* no change is permitted*/
      converseLib.validationFailed(375);
      return;
    end
  end

  OM0PS15(); /* unprotect fields for entry*/



end // end OM0PS14

// set fields normal for entry
Function OM0PS15()



   /* ************************************************************/

      /* om0ps15  this sets fields to normal to allow entry.*/

   /* ************************************************************/



  if (COMMAREA.CACLVL[1] != "Y"
   && COMMAREA.CACHGFL == "Y")
    set OM0PM001.OP2KSTYF normal;
    set OM0PM001.OP2GTSZF normal;
    set OM0PM001.OP2FSTFL normal;
    set OM0PM001.PWRLBCD[1] normal;
    set OM0PM001.PWRLBCD[2] normal;
    set OM0PM001.KUIPRDID normal;
    if (OP1REC.XOSCD == "AL" /* allocated or part allocated*/
     || OP1REC.XOSCD == "PA") /* allocated or part allocated*/
      set OM0PM001.XHDCD[1] protect;
      set OM0PM001.XHDCHG[1] protect;
      set OM0PM001.XHDCD[2] protect;
      set OM0PM001.XHDCHG[2] protect;
      set OM0PM001.XHDCD[3] protect;
      set OM0PM001.XHDCHG[3] protect;
      set OM0PM001.XHDCD[4] protect;
      set OM0PM001.XHDCHG[4] protect;
      set OM0PM001.XHDCD[5] protect;
      set OM0PM001.XHDCHG[5] protect;
    else
      set OM0PM001.XHDCD[1] normal;
      set OM0PM001.XHDCHG[1] normal;
      set OM0PM001.XHDCD[2] normal;
      set OM0PM001.XHDCHG[2] normal;
      set OM0PM001.XHDCD[3] normal;
      set OM0PM001.XHDCHG[3] normal;
      set OM0PM001.XHDCD[4] normal;
      set OM0PM001.XHDCHG[4] normal;
      set OM0PM001.XHDCD[5] normal;
      set OM0PM001.XHDCHG[5] normal;
    end
    set OM0PM001.OM0PMAUT normal;
    set OM0PM001.OM0PMAUT skip;
    set OM0PM001.XRSCD skip;
    set OM0PM001.XOWCD skip;
    set OM0PM001.XDNCD skip;
    set OM0PM001.XOACD normal;

    if (OP6REC.OP2LNIST == "OP" /* open*/
     || OP6REC.OP2LNIST == "PS") /* partially shipped*/
      set OM0PM001.PC2INSEG normal;
      set OM0PM001.XQACD normal;
      set OM0PM001.XPGCD normal;
    else
      set OM0PM001.PC2INSEG protect;
      set OM0PM001.XQACD protect;
      set OM0PM001.XPGCD protect;
    end


    if (OP6REC.OP2LNIST in XOSTBL.XOSCD)
      if (XOSTBL.XOSALWCH[sysVar.arrayIndex] == "Y" /* change is permitted*/
       && OP2REC.OP2TALCQ < OP2REC.OP2TONOQ)        /* not fully allocated*/
        set OM0PM001.OP1BOFL normal;
      else
        set OM0PM001.OP1BOFL skip;
      end
    else
      set OM0PM001.OP1BOFL skip;
    end



       /* if it is a smart/flex bulk order, protect coordinate*/
           /* group field*/

    if (OP1REC.XBDCD in XBDTBL.XBDCD
     && XBDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XBDTBL.XBDBKOFL[sysVar.arrayIndex] == "Y" /* it is bulk order*/
       && OP1REC.XBDCD != "0"                       /* reg order*/
       && OP1REC.XBDCD != "1"                       /* cust bulk*/
       && OP1REC.XBDCD != "5")                      /* cust draw*/
        set OM0PM001.OP2CGPCD skip;
      else
        set OM0PM001.OP2CGPCD normal;
      end
    end

  else

      /* check the security level to see if the*/
            /* max scale down % can be changed.*/



    if (COMMAREA.CACLVL[1] == "Y"
     && COMMAREA.CACHGFL == "Y")
      set OM0PM001.OP2MSCDP normal;
    else
      set OM0PM001.OP2MSCDP skip;
    end
  end




    /* ONLY FOR DIRECT SHIP ORDERS (NIL AND DOMESTIC):*/
      /* if footwear, show factory po id label and allow entry*/
      /* if apparel, show factory po nbr label and allow entry*/

  if (OP1REC.XWHCD == " ")
    OM0PS08(); /* set field attributes*/
  else
    set OM0PM001.OM0PMFID skip, invisible;
    set OM0PM001.OM0PMPDT skip, invisible; /* footwear only*/
    set OM0PM001.FY1FCTYC skip, invisible; /* footwear only*/
    set OM0PM001.OM0PMFNB skip, invisible; /* apparel only*/
    set OM0PM001.OM0PMPNB skip, invisible; /* apparel only*/
  end

  if (OM0PW1.OM0PW-XREFCUST != "Y") /* this is not an xref customer*/
    set OM0PM001.OP-CASE-LOT-NBR skip, invisible;
    set OM0PM001.OM0P-CASE-LOT-LIT skip, invisible;
  else /* this is an xref customer*/
    if (COMMAREA.CACHGFL == "Y") /* update mode*/
      if (OP1REC.XOSCD == "OP" /* order in open status*/
       || OP1REC.XOSCD == "RS" /* or order in reserved status*/
       || OP1REC.XOSCD == "PR") /* or order in partially reserved status*/
        set OM0PM001.OP-CASE-LOT-NBR normal;
        set OM0PM001.OM0P-CASE-LOT-LIT skip, bold;
      else /* all other order status's*/
        set OM0PM001.OP-CASE-LOT-NBR skip;
        set OM0PM001.OM0P-CASE-LOT-LIT skip;
      end
    else /* inquiry mode*/
      set OM0PM001.OP-CASE-LOT-NBR skip;
      set OM0PM001.OM0P-CASE-LOT-LIT skip;
    end
  end

end // end OM0PS15

// this sgrp updates the op6rec
Function OM0PS19()



   /* ************************************************************/

      /* om0ps19*/
      /* this updates the op6rec for the product header om0pm001*/

   /* ************************************************************/



  OP6REC.ZZZCHGDT = OM0PW1.OM0PWDT; /* change date*/
  OM0PW1.OM0PWT1 = VGVar.currentFormattedTime;
  OM0PW1.OM0PWTH2 = OM0PW1.OM0PWTH1;
  OM0PW1.OM0PWTM2 = OM0PW1.OM0PWTM1;
  OP6REC.ZZZCHGTM = OM0PW1.OM0PWT2;

  call "IO0450" ("U ", SQLCA, OP6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good return*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
                                   /* someone else updated it first*/
      converseLib.validationFailed(30);
      OM0PM001.VAGen_EZEMSG = "SOMEONE ELSE UPDATED THIS FIRST --  TRY AGAIN";
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0P   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "OM0PS19 ";
      TA1REC.TA1LOCAT[3] = "IO0450  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "OM0PM001";
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "        ";
      TA1TBLKE = OP6REC.OP6KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end



end // end OM0PS19

// ck modify and validate change
Function OM0PS20()


   /* ************************************************************/

      /* om0ps20  cks for modified fields and validates changes*/

   /* ************************************************************/

  if (OM0PM001.XOACD is modified)
    set OM0PM001.XOACD modified;
    OM0PS30(); /* to validate change*/
  end

  if (OM0PM001.XHDCD[5] is modified)
    set OM0PM001.XHDCD[5] modified;
    OM0PS3B(); /* to validate change*/
  end

  if (OM0PM001.XHDCHG[5] is modified)
    set OM0PM001.XHDCHG[5] modified;
    OM0PS3B(); /* to validate change*/
  end

  if (OM0PM001.XHDCD[4] is modified)
    set OM0PM001.XHDCD[4] modified;
    OM0PS3A(); /* to validate change*/
  end

  if (OM0PM001.XHDCHG[4] is modified)
    set OM0PM001.XHDCHG[4] modified;
    OM0PS3A(); /* to validate change*/
  end

  if (OM0PM001.XHDCD[3] is modified)
    set OM0PM001.XHDCD[3] modified;
    OM0PS31(); /* to validate change*/
  end

  if (OM0PM001.XHDCHG[3] is modified)
    set OM0PM001.XHDCHG[3] modified;
    OM0PS31(); /* to validate change*/
  end

  if (OM0PM001.XHDCD[2] is modified)
    set OM0PM001.XHDCD[2] modified;
    OM0PS32(); /* to validate change*/
  end

  if (OM0PM001.XHDCHG[2] is modified)
    set OM0PM001.XHDCHG[2] modified;
    OM0PS32(); /* to validate change*/
  end

  if (OM0PM001.XHDCD[1] is modified)
    set OM0PM001.XHDCD[1] modified;
    OM0PS33(); /* to validate change*/
  end

  if (OM0PM001.XHDCHG[1] is modified)
    set OM0PM001.XHDCHG[1] modified;
    OM0PS33(); /* to validate change*/
  end

  if (OM0PM001.OM0PMPDT is modified
   || OM0PM001.FY1FCTYC is modified)
    set OM0PM001.OM0PMPDT modified;
    set OM0PM001.FY1FCTYC modified;
    OM0PS48(); /* factory po nbr/footwear*/
  else
    if (OM0PM001.OM0PMPNB is modified)
      set OM0PM001.OM0PMPNB modified;
      OM0PS48(); /* factory po nbr/apparel*/
    end
  end

  if (OM0PM001.OP2FSTFL is modified)
    set OM0PM001.OP2FSTFL modified;
    OM0PS34(); /* to validate change*/
  end

  if (OM0PM001.PWRLBCD[1] is modified)
    set OM0PM001.PWRLBCD[1] modified;
    OM0PS55(); /* to validate change*/
  end

  if (OM0PM001.PWRLBCD[2] is modified)
    set OM0PM001.PWRLBCD[2] modified;
    OM0PS56(); /* to validate change*/
  end

  if (OM0PM001.OP1BOFL is modified)
    set OM0PM001.OP1BOFL modified;
    OM0PS35(); /* to validate change*/
  end

  if (OM0PM001.OP2GTSZF is modified)
    set OM0PM001.OP2GTSZF modified;
    OM0PS36(); /* to validate change*/
  end

  if (OM0PM001.XPGCD is modified)
    set OM0PM001.XPGCD modified;
    OM0PS38(); /* to validate change*/
  end

  if (OM0PM001.OP2KSTYF is modified)
    set OM0PM001.OP2KSTYF modified;
    OM0PS39(); /* to validate change*/
  end

   /* spec code not used as of phase ii*/

  if (OM0PM001.PC2INSEG is modified)
    set OM0PM001.PC2INSEG modified;
    OM0PS40(); /* to validate change*/
  end

  if (OM0PM001.OP2MSCDP is modified)
    set OM0PM001.OP2MSCDP modified;
    OP6REC.OP2MSCDP = OM0PM001.OP2MSCDP;
      /* le 100 % is edited on map defination*/
  end

  if (OM0PM001.OP2CGPCD is modified)
    set OM0PM001.OP2CGPCD modified;
    OP6REC.OP2CGPCD = OM0PM001.OP2CGPCD;
      /* any value is valid*/
  end

  if (OM0PM001.XQACD is modified)
    set OM0PM001.XQACD modified;
    OM0PS41(); /* to validate change*/
  end


  if (OM0PM001.KUIPRDID is modified)
    set OM0PM001.KUIPRDID modified;
    if (OM0PM001.KUIPRDID > " ")
      if (OM0PW1.OM0PW-CUSKU-SZ-FL == "Y") /* do not allow changes to cust*/
        set OM0PM001.KUIPRDID cursor, modified, bold; /* style field if*/
        converseLib.validationFailed(914); /* customer has xref at size level*/
      else
        OM0PS37(); /* to validate change to cust style #*/
      end
    else
      OP6REC.KUIPRDID = OM0PM001.KUIPRDID; /* updte op6rec w/ spaces*/
    end
  end

  if (OM0PM001.XOMCD1 is modified)
    set OM0PM001.XOMCD1 modified;
  end


  if (OM0PM001.OM0PMREF is modified) /* cancel reenter flag*/
    set OM0PM001.OM0PMREF modified;
  end

  if (OM0PM001.OP-CASE-LOT-NBR is modified)
    set OM0PM001.OP-CASE-LOT-NBR modified;
    if (OM0PM001.OP-CASE-LOT-NBR > " "
     && OM0PW1.OM0PW-XREFCUST == "N")
      set OM0PM001.OP-CASE-LOT-NBR cursor, modified, bold;
      converseLib.validationFailed(918); /* no x-ref info to update*/
    end
  end



  if (OP1REC.XWHCD == "51")
    if (OM0PM001.OP-CASE-LOT-NBR > " ") /* case lot# exists*/
      if (OM0PM001.XHDCD[1] == "CSL"
       || OM0PM001.XHDCD[2] == "CSL"
       || OM0PM001.XHDCD[3] == "CSL"
       || OM0PM001.XHDCD[4] == "CSL"
       || OM0PM001.XHDCD[5] == "CSL")
          /* next sentence*/
      else
        if (OM0PM001.OP-CASE-LOT-NBR is modified)
          set OM0PM001.OP-CASE-LOT-NBR modified, bold;
        else
          set OM0PM001.OP-CASE-LOT-NBR bold;
        end
        if (OM0PM001.XHDCD[1] is modified)
          set OM0PM001.XHDCD[1] cursor, modified;
        else
          set OM0PM001.XHDCD[1] cursor;
        end
        converseLib.validationFailed(681); /* add special handling code "CSL"*/
      end
    else /* there is no case lot#*/
      if (OM0PM001.XHDCD[1] == "CSL"
       || OM0PM001.XHDCD[2] == "CSL"
       || OM0PM001.XHDCD[3] == "CSL"
       || OM0PM001.XHDCD[4] == "CSL"
       || OM0PM001.XHDCD[5] == "CSL")
        if (OM0PM001.OP-CASE-LOT-NBR is modified)
          set OM0PM001.OP-CASE-LOT-NBR cursor, modified, bold;
        else
          set OM0PM001.OP-CASE-LOT-NBR cursor, bold;
        end
        converseLib.validationFailed(120); /* handling code is not valid*/
        if (OM0PM001.XHDCD[1] == "CSL")
          if (OM0PM001.XHDCD[1] is modified)
            set OM0PM001.XHDCD[1] modified, bold;
          else
            set OM0PM001.XHDCD[1] bold;
          end
        else
          if (OM0PM001.XHDCD[2] == "CSL")
            if (OM0PM001.XHDCD[2] is modified)
              set OM0PM001.XHDCD[2] modified, bold;
            else
              set OM0PM001.XHDCD[2] bold;
            end
          else
            if (OM0PM001.XHDCD[3] == "CSL")
              if (OM0PM001.XHDCD[3] is modified)
                set OM0PM001.XHDCD[3] modified, bold;
              else
                set OM0PM001.XHDCD[3] bold;
              end
            else
              if (OM0PM001.XHDCD[4] == "CSL")
                if (OM0PM001.XHDCD[4] is modified)
                  set OM0PM001.XHDCD[4] modified, bold;
                else
                  set OM0PM001.XHDCD[4] bold;
                end
              else
                if (OM0PM001.XHDCD[5] is modified)
                  set OM0PM001.XHDCD[5] modified, bold;
                else
                  set OM0PM001.XHDCD[5] bold;
                end
              end
            end
          end
        end
      end
    end
  end


end // end OM0PS20

// this sgrp updates the op1rec
Function OM0PS21()



   /* ************************************************************/

      /* om0ps21*/
      /* this updates the op1rec for the product header om0pm001*/

   /* ************************************************************/



  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (OP1REC.OP1SPHDF == "Y"
   && OM0PM001.XHDCD[1] == " "
   && OM0PM001.XHDCD[2] == " "
   && OM0PM001.XHDCD[3] == " "
   && OM0PM001.XHDCD[4] == " "
   && OM0PM001.XHDCD[5] == " ")
    OP1REC.OP1SPHDF = "N";
  else
    if (OP1REC.OP1SPHDF != "Y"
     && OM0PM001.XHDCD[1] == " "
     && OM0PM001.XHDCD[2] == " "
     && OM0PM001.XHDCD[3] == " "
     && OM0PM001.XHDCD[4] == " "
     && OM0PM001.XHDCD[5] == " ")
      return; /* no need to update*/
    end
  end



  if (OP1REC.OP1SPHDF != "Y")
    if (OM0PM001.XHDCD[1] != " "
     || OM0PM001.XHDCD[2] != " "
     || OM0PM001.XHDCD[3] != " "
     || OM0PM001.XHDCD[4] != " "
     || OM0PM001.XHDCD[5] != " ")
      OP1REC.OP1SPHDF = "Y";
    else
      if (OP1REC.OP1SPHDF == "Y")
        return; /* no need to update*/
      end
    end
  end



  if (SQLCA.VAGen_SQLCODE == 0) /* check for good return*/
    OP1REC.ZZZCHGDT = OM0PW1.OM0PWDT; /* change date*/
    OM0PW1.OM0PWT1 = VGVar.currentFormattedTime;
    OM0PW1.OM0PWTH2 = OM0PW1.OM0PWTH1;
    OM0PW1.OM0PWTM2 = OM0PW1.OM0PWTM1;
    OP1REC.ZZZCHGTM = OM0PW1.OM0PWT2;
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0P   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "OM0PS21 ";
    TA1REC.TA1LOCAT[3] = "IO0430  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "OM0PM001";
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "        ";
    TA1TBLKE = OP1REC.OP1KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end



  call "IO0430" ("U ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good return*/
    /* Tcs include begin 08/25/98*/
    OM0PS-CHECK-UPDATE(); /* for updating corresp vbulk recs*/
   /* Tcs include end   08/25/98*/

  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0P   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "OM0PS21 ";
    TA1REC.TA1LOCAT[3] = "IO0430  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "OM0PM001";
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "        ";
    TA1TBLKE = OP1REC.OP1KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end



end // end OM0PS21

// this reads the op2rec
Function OM0PS2A()



   /* ************************************************************/

      /* this reads the op2rec for the product header om0pm001*/

   /* ************************************************************/



  set OP2REC empty;

  OP2REC.OP2KEY = OP1REC.OP1KEY;
  OP2REC.OP2LNINB = OMWREC.OP2LNINB[OM0PWCNT];



  call "IO0440" ("S ", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good return*/
    OM0PM001.OP2PRCOF = OP2REC.OP2PRCOF;
    OM0PM001.OP2AUPRC = OP2REC.OP2AUPRC;
    if (OP1REC.XDZ-DATA-DIST-CD == "CA") /* added for Canada 7/10/95*/
      OM0PM001.ZFCCD = OP1REC.ZFC-CRCY-CD;
    end
    return;
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0P   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "OM0PS02 ";
    TA1REC.TA1LOCAT[3] = "IO0440  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "OM0PM001";
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1TBLKE = OP2REC.OP2KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end



end // end OM0PS2A

// validates the xoacd
Function OM0PS30()



   /* ************************************************************/

      /* om0os30  this validates the xoacd.*/

   /* ************************************************************/



  set OM0PM001.XOACD normal;
  set OM0PM001.OM0PMAUT normal;

  if (OM0PM001.XOACD in XOATBL.XOACD
   && OM0PW1.OM0PWDT >= XOATBL.XOABEGDT[sysVar.arrayIndex]
   && OM0PW1.OM0PWDT <= XOATBL.XOAENDDT[sysVar.arrayIndex])
    set OM0PM001.XOACD modified;
      /* do nothing*/
  else
    set OM0PM001.XOACD cursor, modified, bold;
    set OM0PM001.OM0PMAUT skip, bold;
    converseLib.validationFailed(200);
  end



end // end OM0PS30

// validates the xhdcd
Function OM0PS31()



   /* ************************************************************/

      /* om0ps31  this validates the xhdcd.*/

   /* ************************************************************/



  set OM0PM001.XHDCD[3] normal;
  OM0PW1.OM0PMHTP = "  ";

   /* check for set to spaces*/

  if (OM0PM001.XHDCD[3] == " ")
    OM0PM001.XHDABRV[3] = "     ";
    OM0PM001.OM0PMHTP[3] = "  ";
    OM0PM001.XHDCHG[3] = 0;
    OP6REC.XHDCD[3] = " ";
    OP6REC.XHDCHG[3] = 0;
    return;
  end



   /* validate the xhdcd*/

  if (OP1REC.ZFC-CRCY-CD == " ") /* Added for Canada 7/95*/
    OP1REC.ZFC-CRCY-CD = "USD"; /* cana*/
  end /* cana*/
  sysVar.arrayIndex = 1;
  OM0PW1.XHDCD = OM0PM001.XHDCD[3];
  OM0PW1.XGPCD = OP6REC.XGPCD;
  if (OM0PW1.XHDKEY in XHDTBL.XHDKEY
   && XHDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    if (OP1REC.ZFC-CRCY-CD != XHDTBL.ZFC-CRCY-CD[sysVar.arrayIndex]) /* cana*/
      set OM0PM001.XHDCD[3] cursor, modified, bold; /* cana*/
      converseLib.validationFailed(901); /* cana*/
      return; /* cana*/
    end /**/
    OM0PM001.XHDABRV[3] = XHDTBL.XHDABRV[sysVar.arrayIndex];
    OM0PW1.XHDUCHFL = XHDTBL.XHDUCHFL[sysVar.arrayIndex]; /* set pack handlg*/
  else
    set OM0PM001.XHDCD[3] cursor, modified, bold;
    converseLib.validationFailed(120);
    return;
  end



    /* if a xhdchg exists and it's ne to the table xhdchg*/
      /* for that code, then the op2hchgo is set to 'y'*/



  if (OM0PM001.XHDCHG[3] is modified)
    if (OM0PM001.XHDCD[3] in XHDTBL.XHDCD)
      if (XHDTBL.XHDCHG[sysVar.arrayIndex] != OM0PM001.XHDCHG[3]) /* override check*/
        if (OM0PM001.XOACD is modified)
          set OM0PM001.XOACD modified;
          OM0PS30(); /* validate the xoacd*/
          if (converseVar.validationMsgNum > 0)
            return;
          else
            OM0PW1.OP2HCHGO = "*"; /* set override flag for map*/
            OP6REC.OP2HCHGO[3] = "Y";
            OP1REC.OP1ORADT = OMAREC.OMACDT;
          end
        else
          set OM0PM001.XOACD cursor, modified, bold;
          set OM0PM001.OM0PMAUT skip, bold;
          converseLib.validationFailed(210);
          return;
        end
      end
    end
  else
    OM0PM001.XHDCHG[3] = XHDTBL.XHDCHG[sysVar.arrayIndex];
  end



  if (OM0PW1.OP2HCHGO == " ") /* if no override*/
    OP6REC.OP2HCHGO[3] = "N";
  end



   /* move pack handle (xhduchfl) & override (op2hchgo) to map*/


  OM0PM001.OM0PMHTP[3] = OM0PW1.OM0PMHTP;

   /* save the good stuff*/

  OP6REC.XHDCD[3] = OM0PM001.XHDCD[3];
  OP6REC.XHDCHG[3] = OM0PM001.XHDCHG[3];

end // end OM0PS31

// validates the xhdcd
Function OM0PS32()



   /* ************************************************************/

      /* om0os32  this validates the xhdcd.*/

   /* ************************************************************/



  set OM0PM001.XHDCD[2] normal;
  OM0PW1.OM0PMHTP = "  ";

  if (OM0PM001.XHDCD[2] == " ")
    OM0PM001.XHDABRV[2] = "     ";
    OM0PM001.OM0PMHTP[2] = " ";
    OM0PM001.XHDCHG[2] = 0;
    OP6REC.XHDCD[2] = " ";
    OP6REC.XHDCHG[2] = 0;
    return;
  end


  if (OP1REC.ZFC-CRCY-CD == " ") /* Added for Canada 7/95*/
    OP1REC.ZFC-CRCY-CD = "USD"; /* cana*/
  end /* cana*/

  sysVar.arrayIndex = 1;
  OM0PW1.XHDCD = OM0PM001.XHDCD[2];
  OM0PW1.XGPCD = OP6REC.XGPCD;
  if (OM0PW1.XHDKEY in XHDTBL.XHDKEY
   && XHDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    if (OP1REC.ZFC-CRCY-CD != XHDTBL.ZFC-CRCY-CD[sysVar.arrayIndex]) /* cana*/
      set OM0PM001.XHDCD[2] cursor, modified, bold; /* CANA*/
      converseLib.validationFailed(901); /* CANA*/
      return; /* CANA*/
    end /* cana*/
    OM0PW1.XHDUCHFL = XHDTBL.XHDUCHFL[sysVar.arrayIndex];
    OM0PM001.XHDABRV[2] = XHDTBL.XHDABRV[sysVar.arrayIndex];
  else
    set OM0PM001.XHDCD[2] cursor, modified, bold;
    converseLib.validationFailed(120);
    return;
  end



    /* if a xhdchg exists and it's ne to the table xhdchg*/
      /* for that code, than the op2hchgo is eq to 'y'*/



  if (OM0PM001.XHDCHG[2] is modified)
    if (OM0PM001.XHDCD[2] in XHDTBL.XHDCD)
      if (XHDTBL.XHDCHG[sysVar.arrayIndex] != OM0PM001.XHDCHG[2])
        if (OM0PM001.XOACD is modified)
          set OM0PM001.XOACD modified;
          OM0PS30(); /* validate the xoacd*/
          if (converseVar.validationMsgNum > 0)
            return;
          else
            OP1REC.OP1ORADT = OMAREC.OMACDT;
            OM0PW1.OP2HCHGO = "*";
            OP6REC.OP2HCHGO[2] = "Y";
          end
        else
          set OM0PM001.XOACD cursor, modified, bold;
          set OM0PM001.OM0PMAUT skip, bold;
          converseLib.validationFailed(210);
          return;
        end
      end
    end
  else
    OM0PM001.XHDCHG[2] = XHDTBL.XHDCHG[sysVar.arrayIndex];
  end



  if (OM0PW1.OP2HCHGO == " ") /* if no override made*/
    OP6REC.OP2HCHGO[2] = "N";
  end



  OM0PM001.OM0PMHTP[2] = OM0PW1.OM0PMHTP;
  OP6REC.XHDCD[2] = OM0PM001.XHDCD[2];
  OP6REC.XHDCHG[2] = OM0PM001.XHDCHG[2];


end // end OM0PS32

// validates the xhdcd
Function OM0PS33()



   /* ************************************************************/

      /* om0os33  this validates the xhdcd.*/

   /* ************************************************************/



  set OM0PM001.XHDCD[1] normal;
  OM0PW1.OM0PMHTP = " ";

  if (OM0PM001.XHDCD[1] == " ")
    OM0PM001.XHDABRV[1] = "     ";
    OM0PM001.OM0PMHTP[1] = "  ";
    OM0PM001.XHDCHG[1] = 0;
    OP6REC.XHDCD[1] = OM0PM001.XHDCD[1];
    OP6REC.XHDCHG[1] = 0;
    return;
  end

  if (OP1REC.ZFC-CRCY-CD == " ") /* added for Canada 7/11/95*/
    OP1REC.ZFC-CRCY-CD = "USD"; /* cana*/
  end /* cana*/

  sysVar.arrayIndex = 1;
  OM0PW1.XHDCD = OM0PM001.XHDCD[1];
  OM0PW1.XGPCD = OP6REC.XGPCD;
  if (OM0PW1.XHDKEY in XHDTBL.XHDKEY
   && XHDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    if (OP1REC.ZFC-CRCY-CD != XHDTBL.ZFC-CRCY-CD[sysVar.arrayIndex]) /* cana*/
      set OM0PM001.XHDCD[1] cursor, modified, bold; /* cana*/
      converseLib.validationFailed(901); /* cana*/
      return; /* cana*/
    end /* cana*/
    OM0PM001.XHDABRV[1] = XHDTBL.XHDABRV[sysVar.arrayIndex];
    OM0PW1.XHDUCHFL = XHDTBL.XHDUCHFL[sysVar.arrayIndex];
  else
    set OM0PM001.XHDCD[1] cursor, modified, bold;
    converseLib.validationFailed(120);
    return;
  end



    /* if a xhdchg exists and it's ne to the table xhdchg*/
      /* for that code, than the op2hchgo is eq to 'y'*/



  if (OM0PM001.XHDCHG[1] is modified)
    if (OM0PM001.XHDCD[1] in XHDTBL.XHDCD)
      if (XHDTBL.XHDCHG[sysVar.arrayIndex] != OM0PM001.XHDCHG[1])
        if (OM0PM001.XOACD is modified)
          set OM0PM001.XOACD modified;
          OM0PS30(); /* validate the xoacd*/
          if (converseVar.validationMsgNum > 0)
            return;
          else
            OP1REC.OP1ORADT = OMAREC.OMACDT;
            OM0PW1.OP2HCHGO = "*";
            OP6REC.OP2HCHGO[1] = "Y";
          end
        else
          set OM0PM001.XOACD cursor, modified, bold;
          set OM0PM001.OM0PMAUT skip, bold;
          converseLib.validationFailed(210);
          return;
        end
      end
    end
  else
    OM0PM001.XHDCHG[1] = XHDTBL.XHDCHG[sysVar.arrayIndex];
  end



  if (OM0PW1.OP2HCHGO == " ") /* no override made*/
    OP6REC.OP2HCHGO[1] = "N";
  end



  OM0PM001.OM0PMHTP[1] = OM0PW1.OM0PMHTP;
  OP6REC.XHDCD[1] = OM0PM001.XHDCD[1];
  OP6REC.XHDCHG[1] = OM0PM001.XHDCHG[1];


end // end OM0PS33

// validate op6rec forecast flg
Function OM0PS34()



   /* ************************************************************/

      /* om0os34  this validates the op2rec forecast flag*/

   /* ************************************************************/



  set OM0PM001.OP2FSTFL normal;

  if (OM0PM001.OP2FSTFL == "Y"
   || OM0PM001.OP2FSTFL == "N")
    OP6REC.OP2FSTFL = OM0PM001.OP2FSTFL;
      /* do nothing - valid entry*/
  else
    converseLib.validationFailed(181);
    set OM0PM001.OP2FSTFL cursor, modified, bold;
  end



end // end OM0PS34

// validate op1rec back order flg
Function OM0PS35()



   /* ************************************************************/

      /* om0os35  this validates the op1rec back order flag*/

   /* ************************************************************/



  set OM0PM001.OP1BOFL normal;

  if (OM0PM001.OP1BOFL == "Y"
   || OM0PM001.OP1BOFL == "N")
      /* do nothing - valid entry*/
  else
    converseLib.validationFailed(77);
    set OM0PM001.OP1BOFL cursor, modified, bold;
    return;
  end

  if (OM0PM001.OP1BOFL == "Y") /* can not change product defined*/
    if (SYCREC.SY2BOSWI == "N" /* as 'no' backorder*/
     && SYCREC.SY2BOEDT <= OM0PW1.OM0PWDT)
      converseLib.validationFailed(179);
      OM0PM001.OP1BOFL = "N";
      set OM0PM001.OP1BOFL cursor, modified, bold;
      return;
    end
  end

  OP6REC.OP1BOFL = OM0PM001.OP1BOFL; /* valid entry*/



end // end OM0PS35

// validate op6rec gut size flag
Function OM0PS36()



   /* ************************************************************/

      /* om0os36  this validates the op6rec gut size flag*/

   /* ************************************************************/



  set OM0PM001.OP2GTSZF normal;

  if (OM0PM001.OP2GTSZF == "Y"
   || OM0PM001.OP2GTSZF == "N")
    OP6REC.OP2GTSZF = OM0PM001.OP2GTSZF;
      /* do nothing - valid entry*/
  else
    converseLib.validationFailed(161);
    set OM0PM001.OP2GTSZF cursor, modified, bold;
  end



end // end OM0PS36

// edit customer style
Function OM0PS37()

           /* edit customer style number*/

  if (KUCREC.KUCSKIND == " " /* if customer indicator is blank*/
   || KUCREC.CU-PRT-XREF-FL != "Y") /* or print xref flag not turned on*/
    converseLib.validationFailed(358); /* cust style id not valid for cust*/
    set OM0PM001.KUIPRDID cursor, modified, bold;
    return;
  end

    /* validate customer style with call to CU1710*/

  set WCU1710 empty;

  WCU1710.WCU1710-INQUIRY-OPTION = 1; /* xref info w/ovrds*/
  WCU1710-IN-CU-CO-ID = OP1REC.KUCCOID;
  WCU1710-XNX-DEPT-ID-XREF = OP1REC.XNXCD;
  WCU1710-CU-PROD-XREF-EDT = OP1REC.OP1CUNDT;
  WCU1710-IN-OP-ORD-PART-CHAR = OP1REC.OP1PARTN;
  WCU1710-IN-OP-CUST-ORD-ID = OP1REC.OP1CUOID;
  WCU1710-IN-OP-NIKE-ORD-ID = OP1REC.OP1NORID;
  WCU1710-IN-OP-LINE-ITEM-NBR = OP2REC.OP2LNINB;

  WCU1710.WCU1710-IN-CU-CUST-PROD-ID = OM0PM001.KUIPRDID;
  WCU1710.WCU1710-IN-CU-PROD-SZ-ID = " ";

  WCU1710-RETURN-CODE = 99;

   /* get all the xref info for the item or size*/


  call "CU1710" (WCU1710) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-select scan*/


   /* check db2 return code*/

  if (WCU1710.WCU1710-RETURN-CODE == 0
   || WCU1710.WCU1710-RETURN-CODE == 10) /* check for good rc*/
                                      /* continue*/
  else
    if (WCU1710.WCU1710-RETURN-CODE == 1) /* check for not found*/
      converseLib.validationFailed(133); /* cust style id not valid*/
      set OM0PM001.KUIPRDID cursor, modified, bold;
      return;
    else
      TA1REC.TA1LOCAT[1] = "CU1710  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[2] = "OM0PS37 "; /* statement group*/
      TAEREC.TAEDESC1 = "BAD RETURN FROM CU1710 - RETURN CODE=";
      TAEREC.TAEDESC2 = WCU1710.WCU1710-RETURN-CODE;
      TA1REC.TA1TYPE = "APPL"; /* abend type*/
      TA1REC.TA1FUNC = "RETN"; /* abend func*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* synpoint rollback*/
      try
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      end /* abend module*/
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
      XSPF4(); /* master menu*/
    end
  end

    /* edit to be sure cust style matches nike style*/
    /* since the customer can have different values for each size, we just*/
    /* make sure that the cust style on the map matches one of them*/

  OM0PW1.OM0PWSUB = 1;
  OM0PW1.OM0PW-CUSTXREF-FOUND-FL = "N";
  while (OM0PW1.OM0PWSUB <= 24)
    if (WCU1710.SY-STY-NBR[OM0PWSUB] > " "
     || WCU1710.SY-SZ-ID[OM0PWSUB] > 0)
      if (WCU1710.SY-STY-NBR[OM0PWSUB] == OP6REC.SY1STNBR
       && WCU1710.SY-COLR-CD-ID[OM0PWSUB] == OP6REC.SY2CLRID
       && WCU1710.XDM-DIM-CD[OM0PWSUB] == OP6REC.XDMCD)
        OP6REC.KUIPRDID = OM0PM001.KUIPRDID; /* update op6rec*/
        OM0PW1.OM0PW-CUSTXREF-FOUND-FL = "Y";
        OM0PWSUB = 25;
      end
    end
    OM0PW1.OM0PWSUB = OM0PW1.OM0PWSUB + 1;
  end

  if (OM0PW1.OM0PW-CUSTXREF-FOUND-FL == "N")
    converseLib.validationFailed(700); /* cust style id not valid w/ nike*/
    set OM0PM001.KUIPRDID cursor, modified, bold;
  end


end // end OM0PS37

// validates the xpgcd
Function OM0PS38()



   /* ************************************************************/

      /* om0ps38  this validates the xpgcd.*/

   /* ************************************************************/



  set OM0PM001.XPGCD normal;

  if (OM0PM001.XPGCD == " ")
    OM0PM001.XPGABRV = "     ";
    OP6REC.XPGCD = "00";
    OMWREC.XPGCD = "00";
    return;
  else
    if (OM0PM001.XPGCD in XPGTBL.XPGCD)
      OM0PM001.XPGABRV = XPGTBL.XPGABRV[sysVar.arrayIndex];
      if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        OP6REC.XPGCD = OM0PM001.XPGCD;
        OMWREC.XPGCD = OM0PM001.XPGCD;
      else
        set OM0PM001.XPGCD cursor, modified, bold;
        converseLib.validationFailed(158);
      end
    else
      set OM0PM001.XPGCD cursor, modified, bold;
      converseLib.validationFailed(158);
    end
  end



end // end OM0PS38

// validate op6rec key style flag
Function OM0PS39()



   /* ************************************************************/

      /* om0ps39  this validates the op6rec key style flag*/

   /* ************************************************************/



  set OM0PM001.OP2KSTYF normal;

  if (OM0PM001.OP2KSTYF == "Y"
   || OM0PM001.OP2KSTYF == "N")
    OP6REC.OP2KSTYF = OM0PM001.OP2KSTYF;
      /* do nothing - valid entry*/
  else
    converseLib.validationFailed(160);
    set OM0PM001.OP2KSTYF cursor, modified, bold;
  end



end // end OM0PS39

// validate the xhdcd
Function OM0PS3A()
   /* ************************************************************/

      /* om0ps3a  this validates the xhdcd.*/

   /* ************************************************************/



  set OM0PM001.XHDCD[4] normal;
  OM0PW1.OM0PMHTP = "  ";

   /* check for set to spaces*/

  if (OM0PM001.XHDCD[4] == " ")
    OM0PM001.XHDABRV[4] = "       ";
    OM0PM001.OM0PMHTP[4] = "  ";
    OM0PM001.XHDCHG[4] = 0;
    OP6REC.XHDCD[4] = " ";
    OP6REC.XHDCHG[4] = 0;
    return;
  end

   /* validate the xhdcd*/

  if (OP1REC.ZFC-CRCY-CD == " ") /* Added for Canada 7/11/95*/
    OP1REC.ZFC-CRCY-CD = "USD"; /* cana*/
  end /* cana*/

  sysVar.arrayIndex = 1;
  OM0PW1.XHDCD = OM0PM001.XHDCD[4];
  OM0PW1.XGPCD = OP6REC.XGPCD;
  if (OM0PW1.XHDKEY in XHDTBL.XHDKEY
   && XHDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    if (OP1REC.ZFC-CRCY-CD != XHDTBL.ZFC-CRCY-CD[sysVar.arrayIndex]) /* cana*/
      set OM0PM001.XHDCD[4] cursor, modified, bold; /* CANA*/
      converseLib.validationFailed(901); /* CANA*/
      return; /* CANA*/
    end /* CANA*/
    OM0PM001.XHDABRV[4] = XHDTBL.XHDABRV[sysVar.arrayIndex];
    OM0PW1.XHDUCHFL = XHDTBL.XHDUCHFL[sysVar.arrayIndex]; /* set pack handlg*/
  else
    set OM0PM001.XHDCD[4] cursor, modified, bold;
    converseLib.validationFailed(120);
    return;
  end



    /* if a xhdchg exists and it's ne to the table xhdchg*/
      /* for that code, then the op2hchgo is set to 'y'*/



  if (OM0PM001.XHDCHG[4] is modified)
    if (OM0PM001.XHDCD[4] in XHDTBL.XHDCD)
      if (XHDTBL.XHDCHG[sysVar.arrayIndex] != OM0PM001.XHDCHG[4]) /* override check*/
        if (OM0PM001.XOACD is modified)
          set OM0PM001.XOACD modified;
          OM0PS30(); /* validate the xoacd*/
          if (converseVar.validationMsgNum > 0)
            return;
          else
            OM0PW1.OP2HCHGO = "*"; /* set override flag for map*/
            OP6REC.OP2HCHGO[4] = "Y";
            OP1REC.OP1ORADT = OMAREC.OMACDT;
          end
        else
          set OM0PM001.XOACD cursor, modified, bold;
          set OM0PM001.OM0PMAUT skip, bold;
          converseLib.validationFailed(210);
          return;
        end
      end
    end
  else
    OM0PM001.XHDCHG[4] = XHDTBL.XHDCHG[sysVar.arrayIndex];
  end



  if (OM0PW1.OP2HCHGO == " ") /* if no override*/
    OP6REC.OP2HCHGO[4] = "N";
  end



   /* move pack handle (xhduchfl) & override (op2hchgo) to map*/


  OM0PM001.OM0PMHTP[4] = OM0PW1.OM0PMHTP;

   /* save the good stuff*/

  OP6REC.XHDCD[4] = OM0PM001.XHDCD[4];
  OP6REC.XHDCHG[4] = OM0PM001.XHDCHG[4];

end // end OM0PS3A

// validates the xhdcd
Function OM0PS3B()
   /* ************************************************************/

      /* om0ps3b  this validates the xhdcd.*/

   /* ************************************************************/



  set OM0PM001.XHDCD[5] normal;
  OM0PW1.OM0PMHTP = "  ";

   /* check for set to spaces*/

  if (OM0PM001.XHDCD[5] == " ")
    OM0PM001.XHDABRV[5] = "       ";
    OM0PM001.OM0PMHTP[5] = "  ";
    OM0PM001.XHDCHG[5] = 0;
    OP6REC.XHDCD[5] = " ";
    OP6REC.XHDCHG[5] = 0;
    return;
  end

   /* validate the xhdcd*/

  if (OP1REC.ZFC-CRCY-CD == " ") /* Added for Canada 7/95*/
    OP1REC.ZFC-CRCY-CD = "USD"; /* cana*/
  end
  sysVar.arrayIndex = 1;
  OM0PW1.XHDCD = OM0PM001.XHDCD[5];
  OM0PW1.XGPCD = OP6REC.XGPCD;
  if (OM0PW1.XHDKEY in XHDTBL.XHDKEY
   && XHDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    if (OP1REC.ZFC-CRCY-CD != XHDTBL.ZFC-CRCY-CD[sysVar.arrayIndex]) /* cana*/
      set OM0PM001.XHDCD[5] cursor, modified, bold; /* cana*/
      converseLib.validationFailed(901); /* cana*/
      return; /* cana*/
    end
    OM0PM001.XHDABRV[5] = XHDTBL.XHDABRV[sysVar.arrayIndex];
    OM0PW1.XHDUCHFL = XHDTBL.XHDUCHFL[sysVar.arrayIndex]; /* set pack handlg*/
  else
    set OM0PM001.XHDCD[5] cursor, modified, bold;
    converseLib.validationFailed(120);
    return;
  end



    /* if a xhdchg exists and it's ne to the table xhdchg*/
      /* for that code, then the op2hchgo is set to 'y'*/



  if (OM0PM001.XHDCHG[5] is modified)
    if (OM0PM001.XHDCD[5] in XHDTBL.XHDCD)
      if (XHDTBL.XHDCHG[sysVar.arrayIndex] != OM0PM001.XHDCHG[5]) /* override check*/
        if (OM0PM001.XOACD is modified)
          set OM0PM001.XOACD modified;
          OM0PS30(); /* validate the xoacd*/
          if (converseVar.validationMsgNum > 0)
            return;
          else
            OM0PW1.OP2HCHGO = "*"; /* set override flag for map*/
            OP6REC.OP2HCHGO[5] = "Y";
            OP1REC.OP1ORADT = OMAREC.OMACDT;
          end
        else
          set OM0PM001.XOACD cursor, modified, bold;
          set OM0PM001.OM0PMAUT skip, bold;
          converseLib.validationFailed(210);
          return;
        end
      end
    end
  else
    OM0PM001.XHDCHG[5] = XHDTBL.XHDCHG[sysVar.arrayIndex];
  end



  if (OM0PW1.OP2HCHGO == " ") /* if no override*/
    OP6REC.OP2HCHGO[5] = "N";
  end



   /* move pack handle (xhduchfl) & override (op2hchgo) to map*/


  OM0PM001.OM0PMHTP[5] = OM0PW1.OM0PMHTP;

   /* save the good stuff*/

  OP6REC.XHDCD[5] = OM0PM001.XHDCD[5];
  OP6REC.XHDCHG[5] = OM0PM001.XHDCHG[5];

end // end OM0PS3B

// validates the xsdcd
Function OM0PS40()



   /* ************************************************************/

      /* om0ps40  this validates the invnetory segment code*/

   /* ************************************************************/


  if (OM0PM001.PC2INSEG == " ")
    OM0PM001.PC2SEGAB = " ";
    OP6REC.PC2INSEG = "000";
    return;
  end


  set PC2REC empty; /* init pc2rec*/

  PC2REC.PC2INSEG = OM0PM001.PC2INSEG;
  PC2REC.XGPCD = OP1REC.XGPCD;

  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes}; /* call spec cd*/

  if (SQLCA.VAGen_SQLCODE == 0)
    OP6REC.PC2INSEG = OM0PM001.PC2INSEG;
    OM0PM001.PC2SEGAB = PC2REC.PC2SEGAB;
    if (OP6REC.OP2LNIST != "OP"
     && OP6REC.OP2LNIST != "PS")
      set OM0PM001.PC2INSEG protect;
    else
      set OM0PM001.PC2INSEG initialAttributes;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set OM0PM001.PC2INSEG cursor, modified, bold;
      converseLib.validationFailed(159); /* inventory segment*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0P    ";
      TA1REC.TA1LOCAT[1] = "SG      ";
      TA1REC.TA1LOCAT[2] = "OM0PS40 ";
      TA1REC.TA1LOCAT[3] = "IO3340  ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "OM0PM001";
      TA1REC.TA1DBASE = "PC2REC  ";
      TA1REC.TA1TBLVU = "VPRDCU01";
      TA1REC.TA1TBLKE = OM0PM001.PC2INSEG;
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear ws on error*/
      XSPF4();
      exit program;
    end
  end





end // end OM0PS40

// validates the xqacd on xottbl
Function OM0PS41()



   /* ************************************************************/

      /* om0ps41  this validates the xqacd on the xottbl*/

   /* ************************************************************/



  set OM0PM001.XQACD normal;

  if (OM0PM001.XQACD in XQATBL.XQACD)
    OM0PM001.XQAABRV = XQATBL.XQAABRV[sysVar.arrayIndex];
  else
    OM0PM001.XQAABRV = " ";
  end



  if (OP1REC.XOTCD in XOTTBL.XOTCD)
    if (OM0PM001.XQACD == XOTTBL.XQACD1[sysVar.arrayIndex]
     || OM0PM001.XQACD == XOTTBL.XQACD2[sysVar.arrayIndex]
     || OM0PM001.XQACD == XOTTBL.XQACD3[sysVar.arrayIndex])
      if (OM0PM001.XQACD in XQATBL.XQACD)
        OM0PM001.XQAABRV = XQATBL.XQAABRV[sysVar.arrayIndex];
        OP6REC.XQACD = OM0PM001.XQACD;
      else
        set OM0PM001.XQACD cursor, modified, bold;
        converseLib.validationFailed(141);
      end
    else
      set OM0PM001.XQACD cursor, modified, bold;
      converseLib.validationFailed(141);
    end
  end



end // end OM0PS41

// reset fields to autoskip
Function OM0PS42()



   /* ************************************************************/

      /* om0ps42  this resets fields to autoskip.*/

   /* ************************************************************/



  set OM0PM001.XQACD skip;
  set OM0PM001.OP2CGPCD skip;
  set OM0PM001.OP2MSCDP skip;
  set OM0PM001.PC2INSEG skip;
  set OM0PM001.OP2KSTYF skip;
  set OM0PM001.XPGCD skip;
  set OM0PM001.OP2GTSZF skip;
  set OM0PM001.OP2FSTFL skip;
  set OM0PM001.PWRLBCD[1] skip;
  set OM0PM001.PWRLBCD[2] skip;
  set OM0PM001.XHDCD[1] skip;
  set OM0PM001.XHDCHG[1] skip;
  set OM0PM001.XHDCD[2] skip;
  set OM0PM001.XHDCHG[2] skip;
  set OM0PM001.XHDCD[3] skip;
  set OM0PM001.XHDCHG[3] skip;
  set OM0PM001.XHDCD[4] skip;
  set OM0PM001.XHDCHG[4] skip;
  set OM0PM001.XHDCD[5] skip;
  set OM0PM001.XHDCHG[5] skip;
  set OM0PM001.XOACD skip;

  set OM0PM001.XOWCD skip;
  set OM0PM001.XDNCD skip;
  set OM0PM001.XRSCD skip;

  if (XS0MW01.XS0MWABF == "Y") /* transmitted Airborne order*/
    set OM0PM001.KUIPRDID skip; /* all map fields must be*/
    set OM0PM001.OP1BOFL skip; /* protected (no updates allowed)*/
    set OM0PM001.OM0PMPDT skip;
    set OM0PM001.FY1FCTYC skip;
    return;
  end

  if (OP6REC.OP2LNIST in XOSTBL.XOSCD)
    if (XOSTBL.XOSALWCH[sysVar.arrayIndex] == "Y" /* change is permitted*/
     && OP2REC.OP2TALCQ < OP2REC.OP2TONOQ)        /* not fully allocated*/
      set OM0PM001.OP1BOFL initialAttributes;
    else
      set OM0PM001.OP1BOFL skip;
    end
  else
    set OM0PM001.OP1BOFL skip;
  end


end // end OM0PS42

// checks cancel/change security
Function OM0PS43()



   /* *************************************************************/

    /* om0ps43*/
    /* checks security for cancellations*/

   /* *************************************************************/



  if (converseVar.eventKey is pf24)
    if (COMMAREA.CACHGFL == "N")
      converseLib.validationFailed(401);
      return;
    else
      if (COMMAREA.CACHGFL == "Y"
       && COMMAREA.CACLVL[1] == "Y") /* nat alloc mgr*/
        converseLib.validationFailed(401);
        return; /* cannot cancel*/
      end
      if (COMMAREA.CACHGFL == "Y"
       && XS0MW01.XS0MWABF == "Y") /* transmitted airborne order?*/
        converseLib.validationFailed(789); /* cancellations not allowed*/
        return;
      end
    end
  end

  if (converseVar.eventKey is pf20)
    if (COMMAREA.CACHGFL == "Y"
     && COMMAREA.CACLVL[1] == "Y") /* nat alloc mgr*/
      converseLib.validationFailed(352);
      return; /* cannot add*/
    end
    if (COMMAREA.CACHGFL == "Y"
     && XS0MW01.XS0MWABF == "Y") /* transmitted airborne order?*/
      converseLib.validationFailed(788); /* updates not allowed*/
      return;
    end
    if (COMMAREA.CACHGFL == "Y")
      if (OP1REC.XDVCD == "02" /* international*/
       && OP1REC.XOCCD == "TR") /* order class = transmitted*/
        converseLib.validationFailed(802); /* airborne order*/
        return; /* order class 'tr' prevents*/
      end /* addition of product*/
    end
  end

  if (converseVar.eventKey is pf20)
    if (COMMAREA.CACHGFL == "N")
      converseLib.validationFailed(352);
      return;
    end
  end



    /* security ok -*/



end // end OM0PS43

// validate xomcd goto om0r if ok
Function OM0PS44()


   /* *************************************************************/

    /* om0ps44*/
    /* validates cancellation reason and passes to om0r if ok*/

   /* *************************************************************/



    /* security ok - validate the xomcd*/


  OM0PS45(); /* validate maintenance reason*/

  if (converseVar.validationMsgNum > 0) /* error found*/
    return;
  end



    /* xomcd ok - does line item status allow cancel ?????*/



  if (OP2REC.OP2LNIST in XOSTBL.XOSCD)
    if (XOSTBL.XOSALWXL[sysVar.arrayIndex] != "N") /* cancel ok*/

    else
      converseLib.validationFailed(373);
      return;
    end
  end


  if (converseVar.eventKey is pf24)
    if (OP1REC.XDVCD == "02" /* INTERNATIONAL ORDER*/
     && OP1REC.XOCCD == "TR") /* ORDER CLASS = TRANSMITTED*/
      OP1REC.XOCCD = "AU"; /* DEFAULT THE ORDER CLASS*/
      OM0PS-UPDT-ORD-HDR(); /* UPDATE HDR WITH DEFAULT ORDER CLASS*/
      converseLib.validationFailed(808); /* order cls chgd to 'au'*/
    end
  end

    /* line item status ok - change 's' to 'e'*/



  OMWREC.OMWPF2CH = "Y";
  OMWREC.OMWSELCD[OMWLNITX] = "E";



    /* transfer to om0r*/



  if (converseVar.eventKey is pf24)
    set OMEREC empty; /* initialize omerec return code*/
    call "OM0R" (OMWREC, OMEREC) {isNoRefresh = yes};
    if (OMEREC.OME-RETURN-CD != "00") /* check om0r return code*/
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
      XSPF4(); /* master menu*/
      exit program; /* master menu failure*/
    else
      OM0PS-CALL-OZ2090(); /* call oz2090 to update vsoscr01*/
    end
  end

  OMWREC.OMWPKCHF = "Y"; /* pack change flag*/

  OP1REC.OP1GROUP = OMWREC.OP1GROUP;

  if (OMWREC.OMWPF2CH != "N")
    OMWREC.OMWPF2CH = "N"; /* set temp change flag to 'no'*/
  end

  COMMAREA.CAFROMAP = "OM0P";

  OM0PW1.OM0PWCNT = OMWREC.OMWLNITX;



   /* ********************************************************/
    /* the process will build the header screen for the*/
    /* product header order number change.*/
    /* the following statement groups are*/
    /* used to build the map:*/

    /* om0ps02  to create the op6rec*/
    /* om0ps2a  to create the op2rec*/
    /* om0ps03  to create the sycrec*/
    /* om0ps12  to get the table descriptions.*/
    /* om0ps13  to get the kucrec service rep name.*/
    /* om0ps-get-prd-xref   to get caselot nbr.*/
   /* ********************************************************/



  set OM0PM001 initial;
  OM0PM001.OMTITLE = "CHANGE ";
  OM0PM001.KUMSTRNM = OMWREC.KUMSTRNM;
  OM0PM001.OP1CUNDT = OP1REC.OP1CUNDT;
  OM0PM001.OM0PMDTE = VGVar.currentShortGregorianDate;
  OM0PS02();
  OM0PS2A();
  OM0PS03();
  OM0PS12();
  OM0PS13();
  OM0PS-GET-PRD-XREF();
  if (OM0PW1.OM0PW-INDXFND == "Y")
    OM0PM001.OP-CASE-LOT-NBR = VORXRF01.OP-CASE-LOT-NBR;
  end

  OM0PW1.OM0PWMS1 = "3:SKP-UP/NU ORD   9:PRD SUM    13:OHDR1 ";
  OM0PW1.OM0PWMS2 = "   19:SKP-UP             ENTER:CONTINUE";
  OM0PM001.OM0PMSG1 = OM0PW1.OM0PWMSG;
  OM0PW1.OM0PWMS1 = "4:SKP-UP/MST MN  12:EDIT       18:COMMEN";
  OM0PW1.OM0PWMS2 = "T  20:ADD PRD   23:OCD CMT  24:CANCEL ";
  OM0PM001.OM0PMSG2 = OM0PW1.OM0PWMSG;



  OM0PS42(); /* resets fields autoskip*/



  if (OMWREC.OMWSELCD[OMWLNITX] == "E")
    OM0PM001.VAGen_EZEMSG = "WARNING -- PRODUCT WAS NOT CANCELLED";
  else
    if (OMWREC.OMWSELCD[OMWLNITX] == "X")
      if (converseVar.validationMsgNum == 808)
        /* next sentence*/
      else
        OM0PM001.VAGen_EZEMSG = "SELECTED PRODUCT  WAS CANCELLED";
      end
    end
  end



end // end OM0PS44

// validate cancel reason
Function OM0PS45()


   /* *************************************************************/


       /* validate cancellation reason and reenter flag*/

   /* *************************************************************/


      /* edit reenter flag for pf24*/

   /* *************************************************************/

  if (OM0PM001.OM0PMREF == "Y"
   || OM0PM001.OM0PMREF == "N")
    OMWREC.OPUCRNTR = OM0PM001.OM0PMREF;
  else
    if (OM0PM001.OM0PMREF == " ")
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(562); /* fld reqd - must be y or n*/
      set OM0PM001.OM0PMREF cursor, bold;
    else
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(563); /* invalid char - must be y or n*/
      set OM0PM001.OM0PMREF cursor, bold;
    end
  end


  if (OM0PM001.XOMCD1 in XOMTBL.XOMCD /* valid maint reason*/
   && XOMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
    if (XOMTBL.XOMCANCF[sysVar.arrayIndex] == "D" /* decrease*/
     || XOMTBL.XOMCANCF[sysVar.arrayIndex] == "B") /* both - incr/decr*/
      if (XOMTBL.XOMRBKFL[sysVar.arrayIndex] == "Y") /* okay to rebook*/
        if (OP1REC.XOTCD in XOTTBL.XOTCD /* valid order type*/
         && XOTTBL.XOTFUTRF[sysVar.arrayIndex] == "Y") /* futures*/
          if (OP1REC.XBDCD == "0" /* reg order*/
           || OP1REC.XBDCD == "1" /* cust bulk*/
           || OP1REC.XBDCD == "5") /* cust draw*/

            OM0PS46(); /* validate agcy/customer*/

            if (converseVar.validationMsgNum > 0) /* error found*/
              return; /* go redisplay map*/
            else /* xomcd okay for rebooking*/
              /* 8/6/91 no longer checking 45 day cancel window for rebook*/
                                  /* leave this code in place until the*/
                                   /* dust settles - when*/
                  /* removing this commented out code also deinstall*/
                  /* om0ps47*/

              /* OM0PS47             ; check rebook 45 day cancel window*/

              /* IF EZEMNO GT 0      ; error found*/
                /* EZERTN            ; go redisplay map*/
              /* ELSE ;*/
              OMWREC.XOMCD = OM0PM001.XOMCD1;
            end
             /* END ;*/
          else
            converseLib.validationFailed(398); /* must be reg or cust bulk/draw*/
            set OM0PM001.XOMCD1 cursor, modified, bold;
            return;
          end
        else
          converseLib.validationFailed(396); /* can not rebook non-futures*/
          set OM0PM001.XOMCD1 cursor, modified, bold;
          return;
        end
      else /* xomcd is valid for cancel*/
        OMWREC.XOMCD = OM0PM001.XOMCD1;
      end
    else
      converseLib.validationFailed(334); /* reason does not allow qty reductions*/
      set OM0PM001.XOMCD1 cursor, modified, bold;
      return;
    end
  else
    converseLib.validationFailed(372); /* invalid cancel reason*/
    set OM0PM001.XOMCD1 cursor, modified, bold;
    return;
  end



end // end OM0PS45

// validate agency/customer
Function OM0PS46()


          /* agency customer edit*/

  set SM1REC empty;
  set TA1REC empty;
  set SQLCA empty;

  SM1REC.SM1AGYID = OP1REC.SM1AGYID; /* setup key*/

  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SM1REC.KUCCOID > 0) /* cust is valid*/
       /* next sentence*/
    else /* cust is not valid*/
      converseLib.validationFailed(391); /* agcy/cust not valid for rebooking*/
      set OM0PM001.XOMCD1 cursor, modified, bold;
      return;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      converseLib.validationFailed(205); /* agency is not valid*/
      set OM0PM001.XOMCD1 cursor, modified, bold;
      return;
    else
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "OM0PS46 ";
      TA1REC.TA1LOCAT[3] = "IO0050  ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "OM0PM001";
      TA1REC.TA1DBASE = "DSLSMN  ";
      TA1REC.TA1TBLVU = "VSAGCY01";
      TA1REC.TA1TBLKE = SM1REC.SM1AGYID;
      XSOPS02(); /* abort*/
    end
  end

end // end OM0PS46

// factory po edit
Function OM0PS48()

  if (OM0PM001.OM0PMPDT == OM0PW1.OM0PWPDT /* if nothing changed*/
   && OM0PM001.FY1FCTYC == OM0PW1.FY1FCTYC 
   && OM0PM001.OM0PMPNB == OM0PW1.OM0PWPNB)
     /* next sentence*/
  else
    if (OM0PM001.OM0PMPDT == 0 /* if all fields empty, it's a delete*/
     && OM0PM001.FY1FCTYC == " "
     && OM0PM001.OM0PMPNB == 0)
      OM0PS50(); /* process delete*/
    else
      OM0PS49(); /* verify that factory po exists first*/

      if (converseVar.validationMsgNum == 0)
        OM0PS50(); /* update the dorder.vpoopx01 database*/
      end
    end
  end
end // end OM0PS48

// fcty po exist?--io3270 pc3rec
Function OM0PS49()

   /* *************************************************************/
    /* verify that factory po exists before associating it with*/
       /* a line item*/
   /* for footwear factory po id: consists of a two-part field,*/
       /* the first being the date and the second being factory*/
       /* code. 'ft' is a hardcoded value used to distinguish*/
       /* one row from another for footwear vs all other gpcs.*/
   /* *************************************************************/

  set PC3REC empty;


  if (OP1REC.XGPCD == "02") /* if footwear*/
    TA1REC.TA1LOCAT[1] = "SEL ALT ";
    PC3REC.XGPCD = OP1REC.XGPCD;

    /* -------------------------- Y2K OUT BEGIN ----------------------*/
    /* MOVE 19 TO OM0PW1.OM0PWPD2;     /* load century*/
    /* -------------------------- Y2K OUT END ------------------------*/

    OM0PW1.OM0PWPDT = OM0PM001.OM0PMPDT; /* load map date*/

    /* -------------------------- Y2K IN  BEGIN ----------------------*/
    if (OM0PW1.OM0PWPYY > 60)
      OM0PW1.OM0PWPD2 = 19; /* load century*/
    else
      OM0PW1.OM0PWPD2 = 20; /* load century*/
    end
    /* -------------------------- Y2K IN  END ------------------------*/

    PC3REC.PC3POIDT = OM0PW1.OM0PWPD1; /* move ccyymmdd group*/
    PC3REC.FY1FCTYC = OM0PM001.FY1FCTYC;
    OM0PW1.FY1FCTYC = OM0PM001.FY1FCTYC; /* save for compare later*/
    PC3REC.PC4ORTYP = "FT";

    call "IO3270" ("SA", SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};

  else /* all others*/
    TA1REC.TA1LOCAT[1] = "SEL UNIQ";
    PC3REC.XGPCD = OP1REC.XGPCD;
    PC3REC.PC3PONBR = OM0PM001.OM0PMPNB;

    call "IO3270" ("S ", SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};

  end

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good return*/
   || SQLCA.VAGen_SQLCODE == 100) /* doesn't exist*/
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0P   ";
    TA1REC.TA1LOCAT[2] = "OM0PS09 ";
    TA1REC.TA1LOCAT[3] = "IO3270  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "OM0PM001";
    TA1REC.TA1DBASE = "DPRODC";
    TA1REC.TA1TBLVU = "VPOHDR01";
    OM0PW1.OM0PWTK1 = " "; /* init*/
    OM0PW1.OM0PWTK2 = OM0PM001.OM0PMPNB;
    OM0PW1.OM0PWTK5 = OM0PW1.OM0PWPD1;
    OM0PW1.OM0PWTK8 = OM0PM001.FY1FCTYC;
    OM0PW1.OM0PWTK7 = PC3REC.PC4ORTYP;
    OM0PW1.OM0PWTK9 = PC3REC.XGPCD;
    TA1TBLKE = OM0PW1.OM0PWTK1;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* doesn't exist*/
    OM0PW1.OM0PWPD1 = OSLREC.PC3POIDT; /* restore original*/
    OM0PW1.FY1FCTYC = OSLREC.FY1FCTYC; /* restore original*/
    OM0PW1.OM0PWPNB = OSLREC.PC3PONBR; /* restore original*/
    converseLib.validationFailed(575); /* factory po does not exist*/
    if (OP1REC.XGPCD == "02")
      set OM0PM001.OM0PMPDT cursor, modified, bold;
      set OM0PM001.FY1FCTYC modified, bold;
    else
      set OM0PM001.OM0PMPNB cursor, modified, bold;
    end
  end

end // end OM0PS49

// prepare oslrec for dbase work
Function OM0PS50()

   /* *************************************************************/
    /* process gpc '02' work*/
   /* *************************************************************/

  if (OP1REC.XGPCD == "02")
    if (OM0PM001.OM0PMPDT == 0
     && OM0PM001.FY1FCTYC == " ")
      OM0PS51(); /* process database delete*/
    else
      if (OSLREC.PC3POIDT > +0) /* already exists, so it's a change*/
        OSLREC.PC3POIDT = OM0PW1.OM0PWPD1;
        OSLREC.FY1FCTYC = OM0PM001.FY1FCTYC;

        OM0PS52(); /* process database update*/
      else

        /* ------------------------ Y2K OUT BEGIN -----------------------*/
        /* MOVE 19 TO OM0PW1.OM0PWPD2;*/
        /* ------------------------ Y2K OUT END -------------------------*/

        OM0PW1.OM0PWPDT = OM0PM001.OM0PMPDT;

        /* ------------------------ Y2K IN  BEGIN -----------------------*/
        if (OM0PW1.OM0PWPYY > 60)
          OM0PW1.OM0PWPD2 = 19;
        else
          OM0PW1.OM0PWPD2 = 20;
        end
        /* ------------------------ Y2K IN  END -------------------------*/

        OSLREC.PC3POIDT = OM0PW1.OM0PWPD1;
        OSLREC.FY1FCTYC = OM0PM001.FY1FCTYC;
        OSLREC.PC4ORTYP = "FT";
        OM0PS53(); /* process database add*/
      end
    end
  end

   /* *************************************************************/
    /* process all other gpcs*/
   /* *************************************************************/

  if (OP1REC.XGPCD != "02")
    if (OM0PM001.OM0PMPNB == 0)
      OM0PS51(); /* process database delete*/
    else
      if (OSLREC.PC3PONBR > +0) /* already exists, so it's a change*/
        OSLREC.PC3PONBR = OM0PM001.OM0PMPNB;
        OM0PS52(); /* process database update*/
      else
        OSLREC.PC3PONBR = OM0PM001.OM0PMPNB;
        OM0PS53(); /* process database add*/
      end
    end
  end


   /* *************************************************************/
   /* if error message, set fields modified*/
   /* *************************************************************/

  if (converseVar.validationMsgNum > 0) /* if error message*/
    if (OP1REC.XGPCD == "02")
      set OM0PM001.OM0PMPDT modified;
      set OM0PM001.FY1FCTYC modified;
    else
      set OM0PM001.OM0PMPNB modified;
    end
  end



end // end OM0PS50

// io3260 delete vpoopx01 rec
Function OM0PS51()

  OSLREC.OP1CUOID = OP1REC.OP1CUOID;
  OSLREC.OP1NORID = OP1REC.OP1NORID;
  OSLREC.OP2LNINB = OP2REC.OP2LNINB;

  call "IO3260" ("D ", SQLCA, OSLREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0
   || SQLCA.VAGen_SQLCODE == +100)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(010);
      TA1REC.TA1LOCAT[1] = "DELETE  ";
      TA1REC.TA1LOCAT[2] = "OM0PS50 ";
      TA1REC.TA1LOCAT[4] = "OM0PS51 ";
      OM0PS70(); /* post routine*/
    else
      TA1REC.TA1LOCAT[1] = "DELETE  ";
      TA1REC.TA1LOCAT[2] = "OM0PS50 ";
      TA1REC.TA1LOCAT[4] = "OM0PS51 ";
      OM0PS71(); /* abend routine for io3260*/
    end
  end
end // end OM0PS51

// update vpoopx01 rec
Function OM0PS52()

  OM0PS54(); /* get date and time*/
  OSLREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  OSLREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  call "IO3260" ("U ", SQLCA, OSLREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == +100
     || SQLCA.VAGen_SQLCODE == -911) /* deadlock or*/
      converseLib.validationFailed(010); /* got beat out on change count*/
      if (SQLCA.VAGen_SQLCODE == -911)
        TA1REC.TA1LOCAT[1] = "UPDATE  ";
        TA1REC.TA1LOCAT[2] = "OM0PS50 ";
        TA1REC.TA1LOCAT[4] = "OM0PS52 ";
        OM0PS70(); /* post*/
      end
    else
      TA1REC.TA1LOCAT[1] = "UPDATE  ";
      TA1REC.TA1LOCAT[2] = "OM0PS50 ";
      TA1REC.TA1LOCAT[4] = "OM0PS52 ";
      OM0PS71(); /* abend routine for io3260*/
    end
  end
end // end OM0PS52

// add record to vpoopx01
Function OM0PS53()

  OSLREC.OP1PARTN = OP1REC.OP1PARTN;
  OSLREC.OP1CUOID = OP1REC.OP1CUOID;
  OSLREC.OP1NORID = OP1REC.OP1NORID;
  OSLREC.OP2LNINB = OP2REC.OP2LNINB;
  OSLREC.XGPCD = OP1REC.XGPCD;
  OM0PS54(); /* get date*/
  OSLREC.ZZZSDT = TA2REC.TA2GRGGN;

  call "IO3260" ("A ", SQLCA, OSLREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(010); /* got beat out on change count*/
      TA1REC.TA1LOCAT[1] = "ADD     ";
      TA1REC.TA1LOCAT[2] = "OM0PS50 ";
      TA1REC.TA1LOCAT[4] = "OM0PS53 ";
      OM0PS70(); /* post*/
    else
      TA1REC.TA1LOCAT[1] = "ADD     ";
      TA1REC.TA1LOCAT[2] = "OM0PS50 ";
      TA1REC.TA1LOCAT[4] = "OM0PS53 ";
      OM0PS71(); /* abend routine for io3260*/
    end
  end


end // end OM0PS53

// get date ta0040
Function OM0PS54()

      /* get current date and time*/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* get current date and time*/

  if (TA2REC.TA2RTNCD != 0) /* if error, then abort*/
    TA1REC.TA1DBASE = " ";
    TA1REC.TA1TBLVU = " ";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOCAT[3] = "XSOMS02";
    TA1REC.TA1LOCAT[4] = "TA0040";
    TA1REC.TA1LOCAT[1] = "GETDATE";
    set SQLCA empty;
    XSOPS02(); /* abort program*/
  end

end // end OM0PS54

// EDIT LABEL CODE 1
Function OM0PS55()



     /* edit customer label code 1*/

  if (OM0PM001.PWRLBCD[1] == " ") /* no label code*/
    OM0PM001.PWRLBABR[1] = " ";
  else
    set PWRREC empty;
    set SQLCA empty;
    PWRREC.PWRLBCD = OM0PM001.PWRLBCD[1];

    call "IO5750" ("S ", SQLCA, PWRREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0 /* label code exist*/
     && PWRREC.XXXSTAT == "A")   /* and active*/
      OM0PM001.PWRLBABR[1] = PWRREC.PWRLBABR;
    else
      OM0PM001.PWRLBABR[1] = "UNKNWN";
      set OM0PM001.PWRLBCD[1] cursor, modified, bold;
      converseLib.validationFailed(671); /* label code invalid*/
      return;
    end
  end

  OP6REC.PWRLBCD[1] = OM0PM001.PWRLBCD[1]; /* update op6rec*/

end // end OM0PS55

// EDIT LABEL CODE 2
Function OM0PS56()



     /* edit customer label code 2*/

  if (OM0PM001.PWRLBCD[2] == " ") /* no label code*/
    OM0PM001.PWRLBABR[2] = " ";
  else
    set PWRREC empty;
    set SQLCA empty;
    PWRREC.PWRLBCD = OM0PM001.PWRLBCD[2];

    call "IO5750" ("S ", SQLCA, PWRREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0 /* label code exist*/
     && PWRREC.XXXSTAT == "A")   /* and active*/
      OM0PM001.PWRLBABR[2] = PWRREC.PWRLBABR;
    else
      OM0PM001.PWRLBABR[2] = "UNKNWN";
      set OM0PM001.PWRLBCD[2] cursor, modified, bold;
      converseLib.validationFailed(671); /* label code invalid*/
      return;
    end
  end

  OP6REC.PWRLBCD[2] = OM0PM001.PWRLBCD[2]; /* update op6rec*/

end // end OM0PS56

// save original map fields
Function OM0PS60()

  OM0PW2.XOACD = OM0PM001.XOACD;
  OM0PW2.XHDCHG[1] = OM0PM001.XHDCHG[1];
  OM0PW2.XHDCHG[2] = OM0PM001.XHDCHG[2];
  OM0PW2.XHDCHG[3] = OM0PM001.XHDCHG[3];
  OM0PW2.XHDCHG[4] = OM0PM001.XHDCHG[4];
  OM0PW2.XHDCHG[5] = OM0PM001.XHDCHG[5];
  OM0PW2.OM0PMPDT = OM0PM001.OM0PMPDT;
  OM0PW2.FY1FCTYC = OM0PM001.FY1FCTYC;
  OM0PW2.OM0PMPNB = OM0PM001.OM0PMPNB;
  OM0PW2.OP2FSTFL = OM0PM001.OP2FSTFL;
  OM0PW2.PWRLBCD[1] = OM0PM001.PWRLBCD[1];
  OM0PW2.PWRLBCD[2] = OM0PM001.PWRLBCD[2];
  OM0PW2.OP1BOFL = OM0PM001.OP1BOFL;
  OM0PW2.OP2GTSZF = OM0PM001.OP2GTSZF;
  OM0PW2.XPGCD = OM0PM001.XPGCD;
  OM0PW2.OP2KSTYF = OM0PM001.OP2KSTYF;
  OM0PW2.PC2INSEG = OM0PM001.PC2INSEG;
  OM0PW2.OP2MSCDP = OM0PM001.OP2MSCDP;
  OM0PW2.OP2CGPCD = OM0PM001.OP2CGPCD;
  OM0PW2.XQACD = OM0PM001.XQACD;
  OM0PW2.XOMCD1 = OM0PM001.XOMCD1;
  OM0PW2.OM0PMREF = OM0PM001.OM0PMREF;
  OM0PW2.OP-CASE-LOT-NBR = OM0PM001.OP-CASE-LOT-NBR;

end // end OM0PS60

// reset mod tags
Function OM0PS61()

  if (OM0PM001.XOACD != OM0PW2.XOACD)
    set OM0PM001.XOACD modified;
  end

  if (OM0PM001.XHDCHG[1] != OM0PW2.XHDCHG[1])
    set OM0PM001.XHDCHG[1] modified;
  end

  if (OM0PM001.XHDCHG[2] != OM0PW2.XHDCHG[2])
    set OM0PM001.XHDCHG[2] modified;
  end

  if (OM0PM001.XHDCHG[3] != OM0PW2.XHDCHG[3])
    set OM0PM001.XHDCHG[3] modified;
  end

  if (OM0PM001.XHDCHG[4] != OM0PW2.XHDCHG[4])
    set OM0PM001.XHDCHG[4] modified;
  end

  if (OM0PM001.XHDCHG[5] != OM0PW2.XHDCHG[5])
    set OM0PM001.XHDCHG[5] modified;
  end

  if (OM0PM001.OM0PMPDT != OM0PW2.OM0PMPDT)
    set OM0PM001.OM0PMPDT modified;
  end

  if (OM0PM001.FY1FCTYC != OM0PW2.FY1FCTYC)
    set OM0PM001.FY1FCTYC modified;
  end

  if (OM0PM001.OM0PMPNB != OM0PW2.OM0PMPNB)
    set OM0PM001.OM0PMPNB modified;
  end

  if (OM0PM001.OP2FSTFL != OM0PW2.OP2FSTFL)
    set OM0PM001.OP2FSTFL modified;
  end

  if (OM0PM001.PWRLBCD[1] != OM0PW2.PWRLBCD[1])
    set OM0PM001.PWRLBCD[1] modified;
  end

  if (OM0PM001.PWRLBCD[2] != OM0PW2.PWRLBCD[2])
    set OM0PM001.PWRLBCD[2] modified;
  end

  if (OM0PM001.OP1BOFL != OM0PW2.OP1BOFL)
    set OM0PM001.OP1BOFL modified;
  end

  if (OM0PM001.OP2GTSZF != OM0PW2.OP2GTSZF)
    set OM0PM001.OP2GTSZF modified;
  end

  if (OM0PM001.XPGCD != OM0PW2.XPGCD)
    set OM0PM001.XPGCD modified;
  end

  if (OM0PM001.OP2KSTYF != OM0PW2.OP2KSTYF)
    set OM0PM001.OP2KSTYF modified;
  end

  if (OM0PM001.PC2INSEG != OM0PW2.PC2INSEG)
    set OM0PM001.PC2INSEG modified;
  end

  if (OM0PM001.OP2MSCDP != OM0PW2.OP2MSCDP)
    set OM0PM001.OP2MSCDP modified;
  end

  if (OM0PM001.OP2CGPCD != OM0PW2.OP2CGPCD)
    set OM0PM001.OP2CGPCD modified;
  end

  if (OM0PM001.XQACD != OM0PW2.XQACD)
    set OM0PM001.XQACD modified;
  end

  if (OM0PM001.XOMCD1 != OM0PW2.XOMCD1)
    set OM0PM001.XOMCD1 modified;
  end

  if (OM0PM001.OM0PMREF != OM0PW2.OM0PMREF)
    set OM0PM001.OM0PMREF modified;
  end

  if (OM0PM001.OP-CASE-LOT-NBR != OM0PW2.OP-CASE-LOT-NBR)
    set OM0PM001.OP-CASE-LOT-NBR modified;
  end
end // end OM0PS61

// post routine io3260
Function OM0PS70()

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1FUNC = "POST";
  TA1REC.TA1PGMNM = "OM0P   ";
  TA1REC.TA1LOCAT[3] = "IO3260  ";
  TA1REC.TA1MAP = "OM0PM001";
  TA1REC.TA1DBASE = "DORDER";
  TA1REC.TA1TBLVU = "VPOOPX01";
  OM0PW1.OM0PWTK1 = " "; /* init*/
  OM0PW1.OM0PWTK2 = OP1REC.OP1CUOID;
  OM0PW1.OM0PWTK3 = OP1REC.OP1NORID;
  OM0PW1.OM0PWTK4 = OP2REC.OP2LNINB;
  OM0PW1.OM0PWTK5 = OM0PW1.OM0PWPD1;
  OM0PW1.OM0PWTK6 = OM0PW1.OM0PWPNB;
  OM0PW1.OM0PWTK8 = OM0PW1.FY1FCTYC;
  OM0PW1.OM0PWTK9 = OSLREC.XGPCD;
  TA1TBLKE = OM0PW1.OM0PWTK1;
  move SQLCA to ERRSQLCA withV60Compat;
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

end // end OM0PS70

// abend routine io3260
Function OM0PS71()

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "OM0P   ";
  TA1REC.TA1LOCAT[3] = "IO3260  ";
  TA1REC.TA1LOCAT[4] = " ";
  TA1REC.TA1MAP = "OM0PM001";
  TA1REC.TA1DBASE = "DORDER";
  TA1REC.TA1TBLVU = "VPOOPX01";
  OM0PW1.OM0PWTK1 = " "; /* init*/
  OM0PW1.OM0PWTK2 = OP1REC.OP1CUOID;
  OM0PW1.OM0PWTK3 = OP1REC.OP1NORID;
  OM0PW1.OM0PWTK4 = OP2REC.OP2LNINB;
  OM0PW1.OM0PWTK5 = OM0PW1.OM0PWPD1;
  OM0PW1.OM0PWTK6 = OM0PW1.OM0PWPNB;
  OM0PW1.OM0PWTK8 = OM0PW1.FY1FCTYC;
  OM0PW1.OM0PWTK9 = OSLREC.XGPCD;
  TA1TBLKE = OM0PW1.OM0PWTK1;
  move SQLCA to ERRSQLCA withV60Compat;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();

end // end OM0PS71

//*** RECORD=OM0PW1 ****
// order entry working storage.
// this area is the working storage unique to
// application 0m0p for product header change
// by order number.
// ************ M A I N T E N A N C E  L O G*******************
// *REF #    DATE     WHO     COMMENT
// *-----  --------  ------  ---------------------------------
// * 619   06/19/91  DHARRI  ADDED CU CO ID DISPLAY FIELD
// *cana   07/20/95  mmcgol  added area for return code and
// *                         display for call to sy2000
// ************************************************************
// **********************
Record OM0PW1 type basicRecord
  5 OM0PWGRP OM0PWGRP ; 
    10 OM0PWFAP OM0PWFAP ; 
    10 OM0PWT1 OM0PWT1 ; 
      15 OM0PWTH1 OM0PWTH1 ; 
      15 OM0PWTC1 OM0PWTC1 ; 
      15 OM0PWTM1 OM0PWTM1 ; 
      15 OM0PWTC2 OM0PWTC2 ; 
      15 OM0PWTS1 OM0PWTS1 ; 
    10 OM0PWT2 OM0PWT2 ; 
      15 OM0PWTH2 OM0PWTH2 ; 
      15 OM0PWTM2 OM0PWTM2 ; 
    10 OM0PWCNT OM0PWCNT ; 
    10 OM0PWSCT OM0PWSCT ; 
    10 OM0PWPOS OM0PWPOS ; 
    10 OM0PWTSZ OM0PWTSZ ; 
    10 OM0PWADD OM0PWADD ; 
    10 OM0PWMSG OM0PWMSG ; 
      15 OM0PWMS1 OM0PWMS1 ; 
      15 OM0PWMS2 OM0PWMS2 ; 
    10 OM0PWDT OM0PWDT ; 
      15 OM0PWD1 OM0PWD1 ; 
      15 OM0PWD2 OM0PWD2 ; 
    10 SY4IDDSC SY4IDDSC [40] ; 
    10 OM0PWCID OM0PWCID ; 
      15 OM0PWKUC OM0PWKUC ; 
      15 OM0PWF2 OM0PWF2 ; 
      15 OM0PWKUM OM0PWKUM ; 
      15 OM0PWF3 OM0PWF3 ; 
      15 OM0PWNX OM0PWNX ; 
    10 OM0PWSID OM0PWSID ; 
      15 SY1STNBR SY1STNBR ; 
      15 OM0PWF4 OM0PWF4 ; 
      15 SY2CLRID SY2CLRID ; 
      15 OM0PWF5 OM0PWF5 ; 
      15 XDMCD XDMCD ; 
    10 OM0PMHTP OM0PMHTP ; 
      15 XHDUCHFL XHDUCHFL ; 
      15 OP2HCHGO OP2HCHGO ; 
    10 OM0PMMTC OM0PMMTC ; 
      15 OM0PWMTP OM0PWMTP ; 
      15 OM0PWCHR OM0PWCHR ; 
    10 OM0PWDKY OM0PWDKY ; 
      15 OM0PWDK1 OM0PWDK1 ; 
      15 OM0PWDK2 OM0PWDK2 ; 
      15 OM0PWDK3 OM0PWDK3 ; 
      15 OM0PWDK4 OM0PWDK4 ; 
      15 OM0PWDK5 OM0PWDK5 ; 
      15 OM0PWDK6 OM0PWDK6 ; 
    10 OM0PWOKY OM0PWOKY ; 
      15 XWHCD XWHCD ; 
      15 XOWCD XOWCD ; 
    10 OM0PWPD1 OM0PWPD1 ; 
      15 OM0PWPD2 OM0PWPD2 ; 
      15 OM0PWPDT OM0PWPDT ; 
        20 OM0PWPYY OM0PWPYY ; 
        20 OM0PWPMM OM0PWPMM ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 OM0PWPNB OM0PWPNB ; 
    10 OM0PWTK1 OM0PWTK1 ; 
      15 OM0PWTK2 OM0PWTK2 ; 
      15 OM0PWTK3 OM0PWTK3 ; 
      15 OM0PWTK4 OM0PWTK4 ; 
      15 OM0PWTK5 OM0PWTK5 ; 
      15 OM0PWTK6 OM0PWTK6 ; 
      15 OM0PWTKA OM0PWTKA ; 
        20 OM0PWTK7 OM0PWTK7 ; 
        20 OM0PWTK8 OM0PWTK8 ; 
        20 OM0PWTK9 OM0PWTK9 ; 
    10 OM0PWRK1 OM0PWRK1 ; 
    10 XHDKEY XHDKEY ; 
      15 XHDCD XHDCD ; 
      15 XGPCD XGPCD ; 
    10 OM0PW-WSY2000-FND-FLAG OM0PW-WSY2000-FND-FLAG ; 
    10 OM0PW-WSY2000-POST-1 OM0PW-WSY2000-POST-1 ; 
      15 OM0PW-WSY2000-GPC-CD OM0PW-WSY2000-GPC-CD ; 
      15 OM0PW-WSY2000-STY-NBR OM0PW-WSY2000-STY-NBR ; 
      15 OM0PW-WSY2000-COLR-CD OM0PW-WSY2000-COLR-CD ; 
      15 OM0PW-WSY2000-DIM-CD OM0PW-WSY2000-DIM-CD ; 
      15 OM0PW-WSY2000-PROD-REG-CD OM0PW-WSY2000-PROD-REG-CD ; 
      15 OM0PW-WSY2000-RETURN-CD OM0PW-WSY2000-RETURN-CD ; 
    10 OM0PW-XREFCUST OM0PW-XREFCUST ; 
    10 OM0PW-CUSKU-SZ-FL OM0PW-CUSKU-SZ-FL ; 
    10 OM0PW-INDXFND OM0PW-INDXFND ; 
    10 OM0PWSUB smallint ; 
    10 OM0PW-CUSTXREF-FOUND-FL char(1) ; 
end // end OM0PW1

//*** RECORD=OM0PW2 ****
// this record is used to snapshot the map before it
// converses the first time.  because pf12 resets the
// modified data tags, we need to compare the before picture
// of the converse to the after picture of the converse
// to determine if we need to reset mdt's after the intial
// pf12 editing finishes.
// *
//   02/28/94  scantr  db changes: resize xhdchg
//   06/15/96  wleong  add op-case-lot-nbr to record
// *
// **********************
Record OM0PW2 type basicRecord
  10 XOACD XOACD ; 
  10 XHDCHG XHDCHG [5] ; 
  10 OM0PMPDT OM0PMPDT ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 OM0PMPNB OM0PMPNB ; 
  10 OP2FSTFL OP2FSTFL ; 
  10 PWRLBCD PWRLBCD [2] ; 
  10 OP1BOFL OP1BOFL ; 
  10 OP2GTSZF OP2GTSZF ; 
  10 XPGCD XPGCD ; 
  10 OP2KSTYF OP2KSTYF ; 
  10 PC2INSEG PC2INSEG ; 
  10 OP2MSCDP OP2MSCDP ; 
  10 OP2CGPCD OP2CGPCD ; 
  10 XQACD XQACD ; 
  10 XOMCD1 XOMCD1 ; 
  10 OM0PMREF OM0PMREF ; 
  10 OP-CASE-LOT-NBR OP-CASE-LOT-NBR ; 
end // end OM0PW2

// op-hndl-chg-ovrd
DataItem OM0PMHTP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order maint code
DataItem OM0PMMTC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_ID_MO_RNG
DataItem OM0PMPDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_NBR
DataItem OM0PMPNB num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0PMREF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0PW-CUSKU-SZ-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0PW-INDXFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0PW-WSY2000-COLR-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0PW-WSY2000-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// call to sy2000 found flag
DataItem OM0PW-WSY2000-FND-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0PW-WSY2000-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// call to sy2000 posting area
DataItem OM0PW-WSY2000-POST-1 char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0PW-WSY2000-PROD-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0PW-WSY2000-RETURN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0PW-WSY2000-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0PW-XREFCUST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// added qty for detail
DataItem OM0PWADD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change reason
DataItem OM0PWCHR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// merged cust/store id
DataItem OM0PWCID char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// counter for array build
DataItem OM0PWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws date century
DataItem OM0PWD1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws date yymmdd
DataItem OM0PWD2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display part char
DataItem OM0PWDK1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display cust/bulk id
DataItem OM0PWDK2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display nike ord id
DataItem OM0PWDK3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display line item num
DataItem OM0PWDK4 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display style
DataItem OM0PWDK5 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display color
DataItem OM0PWDK6 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op6rec display key
DataItem OM0PWDKY char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws date
DataItem OM0PWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// filler is '.'
DataItem OM0PWF2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler is '.'
DataItem OM0PWF3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler is '-'
DataItem OM0PWF4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler is '-'
DataItem OM0PWF5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from application id
DataItem OM0PWFAP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// o/e group ws
DataItem OM0PWGRP char(478)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company id
DataItem OM0PWKUC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// store id
DataItem OM0PWKUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// msg field for om0pm001
DataItem OM0PWMS1 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// msg field for om0pm001
DataItem OM0PWMS2 char(39)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// msg field for om0pm001
DataItem OM0PWMSG char(79)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// maintenance type
DataItem OM0PWMTP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nike dept code
DataItem OM0PWNX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// xowkey
DataItem OM0PWOKY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ccyymmdd format
DataItem OM0PWPD1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cc century
DataItem OM0PWPD2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yymmdd pc3poidt
DataItem OM0PWPDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   mmdd pc3poidt - Y2K
DataItem OM0PWPMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pc3ponbr
DataItem OM0PWPNB num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pointer for array scroll
DataItem OM0PWPOS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy     pc3poidt - Y2K
DataItem OM0PWPYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display cu co id
DataItem OM0PWRK1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// counter for array sizes
DataItem OM0PWSCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// merged style id
DataItem OM0PWSID char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time #1
DataItem OM0PWT1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time #2
DataItem OM0PWT2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time colon 1
DataItem OM0PWTC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time colon 2
DataItem OM0PWTC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time hour #1
DataItem OM0PWTH1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time hour #2
DataItem OM0PWTH2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// errdiag table key info
DataItem OM0PWTK1 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0PWTK2 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0PWTK3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0PWTK4 num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0PWTK5 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0PWTK6 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0PWTK7 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0PWTK8 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0PWTK9 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0PWTKA char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws time minute #1
DataItem OM0PWTM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time minute #2
DataItem OM0PWTM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws time second #1
DataItem OM0PWTS1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// table size for array
DataItem OM0PWTSZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem XOMCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

