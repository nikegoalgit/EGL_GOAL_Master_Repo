package om0q;
import av.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import iv.common.*;
import ko.common.*;
import ku.common.*;
import ni.common.*;
import nl.common.*;
import ob.common.*;
import oi.common.*;
import om.common.*;
import op.common.*;
import os.common.*;
import oz.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=OM0Q ****
// ;
// nike order maintenance - product size detail change.
// 
// this application was first written in 1986 and when
// we could stand it no longer, it was written in 1989
// again
// 
// this is very similar to op0i- order entry product detail
//                     and om0b- order maint. add product
//                               detail.
// 
// overview: user keys in quantity by size for up to 40 sizes
// on the product.  the screen contains only 20 sizes, so
// we may show the screen twice.  then we edit screen 1
// top part only, and edit the entire screen 2.
// 
// the screen data comes from a product already entered -
// maintenance data into working-storage until verified and
// ready to update records.  map built from existing records.
// 
// there is no required data on this screen.
// 
// the statement groups are numbered as follows:
//      s1x - first used in process p100
//            initialization
//      s2x - first used in process p200
//            reads, moves to map, attributes
//      s3x - first used in process p300
//            edits
//      s4x - first used in process p400 -
//            updates all records effected by maintenance
//      s5x - first used in process p500
//            exiting out of application
//      sex - used for edit statement groups
//      smx - used for matching on tables
//      srx - used for reads
//      syx - used to load diags
//      swx - used for writes
// 
//   subscripts initialized with ezetst when entry found in
//   table:
//            om0qwbds - bulk/draw code  (xbdtbl)
//            om0qwots - order type code (xottbl)
//            om0qwxom - order maint reason code (xomtbl)
//            om0qwxos - item status code (xostbl)
// 
//   please do not use the above fields for anything,
//   but their intended use, indexes for the specified
//   tables.
// 
//   omarec.omasub is used throughout om0q for the
//     record subscript, when working with the 40
//     element size array.
// 
//   omarec.omasub1 is used for the map subscript
//     when working with the 20 element map array
// ************************************************************
// 
// sub-programs called;
// 
//    db1000    io0240        mn0s
//    io0040    io1450        om0a
//    io0080    io2560        om0c
//    io0110    io2640        om0g
//    io0360    io4500        om0h
//    io0380                  om0m
//    io0420                  om0n
//    io0430                  om0o
//    io0440                  om0p
//    io0460                  om0r
//    io0470                  om0s
//    io0560   ta0020
//    io0900   ta0040
//    io0900
// ************************************************************
// 
// files updated;
// 
//    op8rec   item table
//    op3rec   sizerun
//    opbrec   formatter size run rtn cd
//    om0qw03  w/s version of op3rec for bulk sizerun
//    om0qw04  w/s version of op1rec, bulk hdr
//    op9rec   order tag table
//    op1rec   order header
//    op4rec   label, special instructions
//    op5rec   address table
//    oibrec   expedite record
//    opfrec   audit report table
//    opurec   lost demand audit table
//    oprrec   rbk audit table
//    opprec   decrement availability
// 
// ************************************************************
// 
// version 1:
//   date created: july 1986
//         author: bcourt
// 
// version 2:
//   date created: july 1989
//         author: skott
// 
// maintenance history:
// 
//    date    by whom rev  overview of changes made
//  --------  ------  --  ------------------------------------
//  08-21-89  skott   04  initial code
//  09-06-89  gwells      display and decrement availability
//                        for futures if the order class code
//                        is 'gf'(golf) - 221. move xoccd to
//                        the opprec - 494.
//  09-07-89  rcoron      allow duplicate products on orders
//                        if the xowcd or xumcd are different
//                        srk
//  09-07-89  skott       keep original first size range for
//                        use in 49g, inactivating sizes.
//                        49g, 230.
//  09-18-89  skott       chg msg numbers in 44a and 44c.
//  09-26-89  rcoron      #244  added the facility to read
//                        all colors from the sales program
//                        product file. (om0qsr6)
//  10-06-89  oricha      #     fixed om0q340 so om0m options
//                        4&5 allowed need dt change on subords
//                        with >1 product.
//  10-12-89  skott       update time and date on item sw4,
//                        sw6, sw8.
//  10-31-89  scantr      added code for nil pricing.
//                        changed sr7,syo,w01,210,250,255,44b,
//                        460,462,49h.  added s58,s59,s60,256,
//                        257,258.
//  11-07-89  oricha      #260. allow apparel futures to push
//                        need dt anywhere within season and
//                        production deadlines. sra,sx4,42g,
//                        42m,42n,srf.
//  11-30-89  rcoron      allowed price by size change to smart
//                        bulk/draw orders as well as nil
//                        orders for in-development products.
//  12-05-89  schase      add comp nbr logic to srh,sr7,s58,s6n
//                        s6o,w01,250,254,257,42g,44b,450,460,
//                        462,49h.
//  12-06-89  cgrice      fix bug in warehouse restriction loop
//                        42i.
//  12-07-89  dwalke      chgd procs 464 462 to stop price chgs
//                        on salesman orders. bug 270
//  12-19-89  cgrice      don't allow prices to be changed to
//                        zero.  se4,42a,42c,422,442,srl,421
//  12-20-89  skott       dont set bulk size active flags off
//                        49f.
//  01-08-90  cgrice      bug #222 - cancelled bulk draws were
//                        adding back to wrong suborder.  src
//  01-10-90  cgrice      bug #281 - replaced hardcoded futures
//                        edit with xottbl access in 42g.  also
//                        repaired sales program delivery date
//                        edit in 42m.  the sales pgm sp2rec
//                        was not being read, so added the read
//                        in new submodule sro, and initialized
//                        it in 210.
//  01-30-90  cgrice      bug #288 - temporarily allow sales
//                        programs fb90 and cp90 to change
//                        prices in 464.
//  01-31-90  cgrice      bug #285 - need date edit was failing
//                        on a draw because the season table
//                        dates hadn't been pickup up yet. 42m
//  03-06-90  schase      bug #303 - deinstalled the allow
//                        sales programs fb90 and cp90 to chg
//                        priced in 464.
//  03-07-90  schase      bug #305 - allow price overrides on
//                        sales programs if division = '02'.
//                        464.
//  04-04-90  cgrice      db changes - renamed op1blkcd to
//                        xbdcd.  220,310,340,44a,464,492,496,
//                        sx2,s32,s51,srk
//  04-11-90  schase      bug #278 - add reenter flag when
//                        cancel.  changed sxc,470,471,map.
//  04-20-90  scantr      bug #330 - temporarily allow price
//                        overrides for sales pgms. 464.
//  05-15-90  mgatre      added logic for order adjustment
//                        validation - e220
//                        new records: pazrec, pagrec
//                        new code:    452
//                        changes:     310, 450
//  05-31-90  BWATSO      Brand code changes.  Changed 494.
//  06-14-90  mgatre      eliminate invoice only orders from
//                        order adjustment requirements - 310
//  07-11-90  mgatre      add order adjustment number override
//                        new record: fb9rec (IO3650)
//                        new code:    453
//                        changes:     310
//  08-07-90  jwood       changed om0q49a to use xcscd as char
//  08-09-90  tfox        changed om0q42g to allow pushed need
//                        date of adv prop gpc 03 within season
//  08-23-90  schase      changed om0q340 to check for a sub-
//                        order limit of 99 rather than 10 to
//                        protect fields that create splits.
//  09-15-90  tfox        removed all code to restrict needdate
//                        warehouse and direct ship code change
//                        on one product orders. added code to
//                        to the selection criterion when look-
//                        ing for a matching suborder when
//                        spliting (needed for airspeed). srj
//                        sr5 340 49i 490  w01
//  09-17-90  oricha      iseg project. remove iseg if direct
//                        ship cd not '3', add iseg to op3rec
//                        if dir ship chgd to '3'. seg,sxa,w01,
//                        423.
// 09-21-90   tfox        added s49, s4k to delete text & addr
//                        when hdr deleted. this is only when a
//                        single product is split to another
//                        suborder.
// 10-30-90   tfox        removed op01 suborder call. replaced
//                        it with ob1210. stmt grps chged are
//                        sez,sga,sgl,s22,s40,s47,s52,s53,s6e,
//                        s6k,s7c,s70,w01,010,050.
// 11-09-90   rdavis      database changes. rename xsdcd to
//                        pc2inseg in op2rec. add op1alfdt and
//                        xafcd to op2rec. 494,sra,sw3,xsa,
//                        seg,sw3,om0qw02,om0qw03.
// 11-13-90   rdavis      if whse changed, only recheck avail-
//                        ability if order checks availability.
//                        fix #408. 44c.
// 11/27/90   craine      chg'd 44a and 44c to check 'c/ov' for
//                        avail condition cd edits
// 11/30/90   craine      added check of om0qwcal= 'y' to see
//                        if availability really was displayed.
//                        om0q490 called om0q494 to decrement
//                        if the obirtncd was 0, this was cause
//                        ing smart bulks to decrement avail,
//                        since obirtncd was always 0 when the
//                        obirec was initialized and ob1210
//                        wasn't even called.
// 12/12/90   craine      reformat of spec code and package cd
//                        for decrementing availability. 494.
//                        log #460.
// 12/29/90   jloyer      modified to process blank bulks...
//                        om0q210, 220, 222, 42g, 430, om0qw01
//                        new: om0qs21; common call to s22, s23
//                             om0qs22; calls io5480 which
//                                     accesses davail.vblnkp01
//                             om0qs23; calls io5470 which
//                                     accesses davail.vblnks01
//                        new rec: avirec; pass keys to io5470
//                                 avgrec; rtn data frm io5470
//                                 avhrec; rtn data frm io5480
// 01/10/91   schase      added check for whse '51' inorder to
//                        format the map with '00'. sm2.
// 01/22/91   mbarna      added 49l to delete expdt records
//                        called in 49i. log #515
// 01/29/91   schase      added check for return code = 1 from
//                        call to ob1210 - availability. 221,
//                        440, 443. LOG #524
// 02/08/91   DFLESH      FIX FOR MISSING SIZES ON ORDERS. ADD
//                        OF SHIPPED QTY AND CANCELLED QTY FOR
//                        DETERMINING WHETHER TO SET SIZE FLAG.
//                        49F.
// 02/11/91   tfox        added quality code move to opurec in
//                        sw2. regen for db changes.
//                        removed xzstbl and xzwtbl.
// 02/26/91   swatso      changed xchcd in 49a from numeric to
//                        alpha.  (ie: from 00 to '00')
// 02/28/91   dmeier      modified for blank/finish draws
//                        om0qsrc, s22, s23, 220, 250, 426
//                        om0qw01
//                        new: om0qs26; common call to s27,
//                                      s28, s29
//                             om0qs27; calls io5480 - accesses
//                                      davail.vblnkp01/finish
//                             om0qs28; calls io5470 - accesses
//                                      davail.vblnks01/finish
//                             om0qs29; calls io5530 - accesses
//                                      dorder.vogcut01/cutoff
//                        new rec: oecrec: rtn data frm io5530
// 03/25/91   dflesh      add logic to reinstate xl'd items.
//                        (new 469). changed map pf24 to read
//                        xl/rein.
// 04/17/91   dmeier      log 604. check draw by date for draws
//                        from blank bulks only (not draws from
//                        finished bulks) - s26. Look for
//                        corresponding blank style for draws
//                        from blank bulks only ( not draws
//                        from finished bulks) - src.
// 04/22/91   schen       log 585. turn off rebooking for
//                        apparel if reason code is 01. made
//                        code changes in om0qs51.
// 05/20/91   dflesh      log #535 expand price for all sizes
//                        field.  change to map, 330, 42e, 460.
// 05/23/91   dflesh      log 645 change msg #547 to #687 - if
//                        pf6 and order is for slsmn, don't
//                        allow price chg.
// 05/24/91   tfox        menu services w01,s02,s03,000,443,471
//                        490,510,410 - check for prepacks
// 06/11/91  bbake2       database changes - kucrec, op1rec,
//                        op2rec, op3rec, sycrec, xbdtbl,
//                        omoqw01, om0qw02, om0qw03, om0qw04,
//                        om0qw01g
// 06/17/91  tfox         Menu of Services - do not allow add
//                        size on an apparel order if the line
//                        item status is 'al' or 'pa' and the
//                        item exist on a prepack - 410,480,
//                        000,s04
// 06/18/91  bbake2       screened products - changed:  w01,
//                        sra, s20, s32, 210, 220, 221, 42g,
//                        443, 494.  added sta, stb, stc, ste,
//                        st3, st7, st8, st9.  removed s21,
//                        s22, s23, s26, s27, s28, s29.
//                        removed avgrec and avhrec from appl
// 06/19/91  craine       side-1, ie, golf products not display
//                        ing avail because brand and order
//                        class were not passed to ob1210 -
//                        changed OM0QSRA.    LOG #653
// 06/26/91  oricha       st9: don't let prop orders w/styles
//                        fitting into xow pgms do 60-day
//                        calc for blank avail.
// 07/17/91  bbake2       screened products: set message 705
//                        in place of 338/389 in 44a and 44c
// 08/06/91  dharri       log #669 - rebook cancellation 45 day
//                        window ck no longer called in s51.
// 10/08/91  dmeier       DB changes. Changed opurec.xxxpgmno
//                        to opurec.xxxpgmnb. Removed reference
//                        to op1owrdt. (om0qsw2, sw3).
// 10/25/91  dmeier       log #695 - don't allow orders for
//                        draws against blank bulks for sizes
//                        that are valid for the bulk but not
//                        for the finished style (240)
// 10/25/91  bbake2       log #686 - opened up need date for
//                        screened products that are not bulks
//                        not draws and not part of a flyer
//                        program, and removed availability
//                        freeze logic for these orders
//                        w01, stc, s20, 220.  removed ste.
// 12/02/91  jhecke       695 - Prepack of footwear. s02,s04,
//                        480.
// 12/09/91  JJOHN2       References to WPDT have been removed
//                        due to a change in availability that
//                        returns available quantities by need
//                        date with regard to the "lead time
//                        to screen".  W01, SRA, 494, STC, ST3,
//                        ST9, S20, 44A, 44C.
// 01/08/92  schase       When a new suborder is created for a
//                        customer bulk order, insert a corres-
//                        ponding dordb.vbbulk01 record. swa,
//                        w01,49i,om0qs-deter-jcps,om0qs-get-
//                        spec-cu,om0qs-insert-bbulk,om0qs-
//                        delete-bbulk.
// 01/09/92  jwils1       added availability control table
//                        processing to get level ind.  Level
//                        ind used to determine blank avail-
//                        ability.
// 01/14/92   gwells      731 - iseg defaults for nil - sxa,
//                              seg (chg comments only).
// 01/27/92   bbake2      725 - allow quantities to be added
//                        to products with a need date in the
//                        past (sra,syw,44a,44c,494)
// 01/28/92   trober      removed order adjustment number from
//                        the map.  instead of displaying the
//                        order adjustment number a warning
//                        message will be displayed.  deleted
//                        i/o mod io5140, pagrec, pazrec, and
//                        om0q452.  changed statement groups
//                        sxc, 310 and 450.
// 02/12/92   schase      credit check the order if the order
//                        becomes a factory direct ship or it
//                        was a factory direct ship and is
//                        changed to something else. 420, 490,
//                        w01.
// 02/14/92   jwils1      added custom logo processing.
//                        custom logo always direct ship, will
//                        use blank availability, and will
//                        always display availability. sra,494,
//                        s20,44a,44c,s20,221,423, and w01.
// 02/24/92   jwils1      remove perform of om0qs-get-sea-bdt &
//                        use 0 in place of xsntbl.xsnbdt to
//                        access av4rec - om0qs-get-lev-ind.
// 03/04/92   jwils1      check for xprcd instead of wpdt for
//                        custom logo processing.  sra.
// 03/11/92   bbake2      database changes:
//                        -om0qw02 for new layout of op1rec
//                        -om0qw03 for new layout of op2rec
//                        -om0qw03 for new layout of op3rec
//                        -om0qw01 for increased size of op1rec
//                        -srl, srp, table and addl recs list
//                         for read to vdstrb01 to obtain acct
//                         reg cd (which was removed from
//                         kucrec)
// 04/08/92   jhecke      correct availability for cond=17
//                        sold out and blank availability
// 06/10/92   bbake2      database changes:
//                        -om0qw03 for new layout of op2rec
//                        -om0qw03 for new layout of op3rec
//                        -42h for name change xdvcd to xdvcd1
// 06/16/92   bbake2     log#813 change timing of capturing
//                       orig quantity from 30 to 60 days for
//                       increases.  w01, s20,srf,492,49d
// 07/01/92   schase     Added code to maintain the DORDB.
//                       VBBULK01 Table for auto assigning
//                       Belk's Bulk Orders to draw orders.
//                       Similar to JC Penneys code. om0qs-
//                       insert-bbulk, om0qs-deter-belks, w01.
// 08/12/92   dlegg      Changes for booking season. w01,310,
//                       42G,490,S66-ADJ-BK-MO. SR #774. On
//                       need date change, booking month is
//                       adjusted on domestic apparel products
//                       with an established bk sesn.
// 08/14/92   DHARRI     LOG#893 - CUSTOM LOGO CHANGE calc need
//                       date from today -45 to today -30.
//                       OM0QS-CALC-NEED-DT, SRA.
// 11/10/92   dcaust     LOG #847. chg for nil b-grade pricing.
//                       sr7, s59, 250, 44b, 49h, 255, 410, 425
//                       ,w01. new stmt grp om0qs-add-1-dollar.
// 11/30/92   tfox       LOG #888/920 new screened product
//                       processing.  s-calc-need-dt, s-chk-
//                       promo, s-flyr-cutoff, sra, s20, w01
//                       210, 220, 221, 430, 443, 494
// 12/10/92   dcaust     LOG #855. if international order and
//                       order class = 'in', protect direct
//                       ship, whse & owner grp codes on map.
//                       410.
// 12/18/92   jather     log #868 - a transmitted airborne
//                       order cannot be updated or cancelled
//                       s34,000,340,400,450,470
// 01/14/93   dlegg      LOG #924. Take out hard-code season
//                       code in sx4. Use XSN season range of
//                       product's assigned booking season.
// 01/26/93   dcaust     LOG #941. (NIL request) add new field
//                       to map - total units. 310.
// 03/03/93   clenni     LOG #842. allocation sales pgm edit
//                       add sg om0qs-spgm-dept-cd, updated 464
//                       w01
// 05/01/93   dlegg      LOG #937. NSG changes. Modify screened
//                       product definition, custom logo edits.
//                       Add whse 25. 220, 221, 494, sra, calc-
//                       need-dt, sm2, sxa, 310.
// 05/14/93   sjob       LOG #937. add xfer to custom logo prod
//                       information:340,400,510,cust-logo-xfr.
// 06/10/93   dcaust     LOG #964 International Airborne.
//                       if ord cls 'tr', 'au', 'as' protect
//                       whse & direct ship. if ord cls 'tr'
//                       disallow pf20, pf21. if ord cls 'tr'
//                       allow pf24 but chg from 'tr' to 'au'.
//                       49a, 410, 400, 499, 471.
// 06/15/93   dcaust     Log #964 International Airborne.
//                       fix pf24 edit.  only update order clas
//                       from 'tr' to 'au' on 2nd hit of pf24.
//                       400, 471.
// 06/28/93   clenni     Log #926 price type '08'.
//                       pricing by need date. changed om0qs61
//                       put om0qw-sub3 into om0qw01.
// 07/14/93   gcalki     Log #848 international divert orders
//                       protect warehouse, dirct ship, need dt
//                       410.
// 09/01/93   gcalki     CSP 4.1 changes: sub om0r & om0n don't
//                       xfer on abends, instead passes code
//                       in omerec.  if code is not '00'
//                       control is passed to to the main menu
//                       omerec, 471, 469, 490, 499.
// 09/23/93   bbake2     CSP4.1 changes, prevent S0C7 when
//                       drawing from depleted sizes on a bulk
//                       srd
// 11/01/93   craine     Remove reference to AV1REC in om0q210
//                       and table list. record hasn't been
//                       used in years.
// 11/23/93   bbake2     no log - created separate routine for
//                       intl apparel booking season/need date
//                       edits.  Allow Intl to push need date
//                       while still in Intl booking season.
//                       42m, s-intl-sesn.
// 0110/94    dmeier     Log #971 - musical size run changes.
//                       OM0Q440, OM0Q444.
// 02/28/94   scantr     dbchgs: rename sy6cstfl, add keys to
//                       sy5 and sy6recs om0qsr7, s59
// 03/24/94   gcalki     #1010 - disable need date calculation
//                       for crested prodsucts. force availabil
//                       for crested golf hats (direct ship
//                       code of '1') 221, sra, 494.
// 04/28/94   jather     log 1003. renamed causera to
//                       ca-user-workarea-4k to hold opwrec
//                       which has increased to 3072 bytes.
// 05/19/94   jather     log 1015. divert orders. compare need
//                       date is less than order set up date
//                       instead of current date.
// 06/21/94   schase     Virtual Airspeed Project/Task #15:
//                       Replaced access to DORDB.VBBULK01 usin
//                       OSMREC with access to DORDB.VBULKS01
//                       using VBULKS01.Changed swa, 49i. Added
//                       om0qs-insert-bulks, om0qs-delete-bulks
// 10/13/94   bbake2     changed one day push need date
// 10/13/94   bbake2     changed one day push need date
//                       restriction to five days to allow for
//                       manipulation of launch products.
//                       no log.  42n.
// 03/30/94   bbake2     removed protect of warehouse for
//                       screened products.  Production changes
//                       warehouse after the order is entered.
//                       no log.  220
// 04/14/95   craine     fix rebook bugs - don't allow changes
//                       to rebook bulks om0q340, allow apparel
//                       orders to be rebooked om0qs51 and
//                       write type 2 rebook audits for rebook
//                       draw qty increases om0q492, 493, sw3.
// 04/22/96   nfield     change to use vbulks02 and load
//                       sm_srep_id
// 07/11/96   mvalbu     Changed to use regional data for US
//                       apparel. Changed OM0QSR3, and OM0QS-
//                       SEL-SY2000.
// 10/18/96   mvalbu     Added logic to update original quanti-
//                       ty when change is a decrease and done
//                       less than 60 days from cutoff date and
//                       maintenance reason code = '40'.
//                       Changed om0q492.
// 11/11/96   wleong     removed musical size run logic
// 07/28/97   jnaemu     display reserved qty for n bulk draw
// 08/27/97   jnaemu     added whse 27
// 09/08/97   wleong     regen for yostbl structure change
// 09/01/97   RFREY      OCD Changes - write ocd change reason
//                       record (vsoscr01)
// 09/04/97   jnaemu     allow direct ship for apparel to
//                       decrement availability.
// 10/28/97   satyam     Added edit in OM0QSWB, before calling
//                       iomod IO0460 to check whether any rows
//                       exist with the same key values. If it
//                       exists then it skips inserting rows in
//                       dorder.voaddr01 table
// 11/24/97   VRAMAC     Y2K MODIFICATIONS MADE TO:
//                       OM0Q424: Added init of ta2rec01
//                       OM0QSRF: Added init of ta2rec &
//                                ta2rec01.
// 03/06/98   KLEE       changed om0asrs to bypass edit for
//                       international users.
// 
// 03/16/98   DSMITO     moved the call to oz2140 to below the
//                       split of the order in OM0Q490
//                       - also changed OM0QS-CALL-OZ2140
//                       moving op1rec.op1norid to the old
//                       oz2140 nike ord id..
// 03/24/98   WLEONG     added changes to recalculate and
//                       validate prepack quantities if on ord
//                       quantities are touched and pack code
//                       is ms or cu.  om0q440. changed prepack
//                       warning message.
// 05/14/98   VSANKA     Added code in OM0QS42 for calculating
//                       the difference in dates correctly.
//                       Look for * TCS INCLUDE.
// 
// 08/27/98   udafon     #178 Increased size of OMWREC to 3505
//                       bytes. Re-compiled application.
// 10/2/98    svargh     added changes in om0qs-check-update
//                       om0qs-updte-vbulk,om0qsw5,om0qsw7
//                       to update the bulk qty in the vbulks02
//                       table when they are updated in the
//                       header table.
// 01/08/99   svargh     added an error message 996.Displays
//                       the error message when no carton large
//                       enough.Allows user to re-enter.
// 
// 05/25/99   rshaik     Commented the stmt group OM0QS-ALT-CTN
//                       TYPE which gets the alternate carton
//                       type from VCMPNY01 and changed it to
//                       display relevant messages.Changes are
//                       in OM0QS-GET-CTN-TYPE.
// 02/02/00   agooll     om0qs20 - Added logic to move prices &
//                       price override flags for shipped &
//                       cancelled quantity to fix missing
//                       prices & override flags. tt# 3317
// 04/03/00   RHARAT     As part of Spain project - Modified
//                       OM0Q400 -Added logic to reinstate only
//                       Spain compliant produts if order is
//                       being shipped to Spain or Canary.
//                       Added - OM0QS-OP6410-PSRTN &
//                               OM0QS-spain-check.
// 10/25/00   Rshaik     The application is modified as part of
// TT#5837               Original quantity calculation. Most of
//                       the order quantity changes happen
//                       during the 30-60 days from the cut off
//                       date. Application modified to update
//                       Original Quantity till 60 days past th
//                       deadline date whether quantity increas
//                       or decreased.
//                       Look for the changes in OM0Q492.
// 07/11/01   kshiva     TT#12895 carton ratio edit for DS
// TT#12895              orders. changes are made to include
//                       Direct ship code to the passing record
//                       used to call the sub program OP3850.
//                       Search for TT#12895 to find changes.
// *********************
Program OM0Q type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AV4REC AV4REC; // record
  AVGREC AVGREC; // record
  AVIREC AVIREC; // record
  AVOREC AVOREC; // record
  CC1REC CC1REC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FB9REC FB9REC; // record
  IVEREC IVEREC; // record
  KUCREC KUCREC; // record
  KUJREC KUJREC; // record
  KUMREC KUMREC; // record
  KUPREC KUPREC; // record
  OBFREC OBFREC; // record
  OBIREC OBIREC; // record
  OECREC OECREC; // record
  OIBREC OIBREC; // record
  OM0QW01 OM0QW01; // record
  OM0QW02 OM0QW02; // record
  OM0QW03 OM0QW03; // record
  OM0QW04 OM0QW04; // record
  OMAREC OMAREC; // record
  OMCREC OMCREC; // record
  OMEREC OMEREC; // record
  OMWREC OMWREC; // record
  OP10REC OP10REC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  OP3REC OP3REC; // record
  OP4REC OP4REC; // record
  OP5REC OP5REC; // record
  OP8REC OP8REC; // record
  OPABREC OPABREC; // record
  OPBREC OPBREC; // record
  OPCREC OPCREC; // record
  OPJREC OPJREC; // record
  OPLREC OPLREC; // record
  OPMZREC OPMZREC; // record
  OPPREC OPPREC; // record
  OPRREC OPRREC; // record
  OPUREC OPUREC; // record
  OSAREC OSAREC; // record
  OSNREC OSNREC; // record
  PC2REC PC2REC; // record
  PWSREC PWSREC; // record
  SM1REC SM1REC; // record
  SP0UW02 SP0UW02; // record
  SP1REC SP1REC; // record
  SP2REC SP2REC; // record
  SP5REC SP5REC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  SY5REC SY5REC; // record
  SY6REC SY6REC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  VBULKS02 VBULKS02; // record
  VDSTRB01 VDSTRB01; // record
  VNLXPY01 VNLXPY01; // record
  VOPPGM01 VOPPGM01; // record
  VSOHCR01 VSOHCR01; // record
  WOZ2090 WOZ2090; // record
  WOZ2140 WOZ2140; // record
  WSY2000 WSY2000; // record
  XOWREC XOWREC; // record
  XP0QW00 XP0QW00; // record
  XS0MW01 XS0MW01; // record
  XX0XW01 XX0XW01; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XAUTBL {deleteAfterUse = yes}; // table
  use XBDTBL {deleteAfterUse = yes}; // table
  use XDSTBL {deleteAfterUse = yes}; // table
  use XOATBL {deleteAfterUse = yes}; // table
  use XOLTBL {deleteAfterUse = yes}; // table
  use XOMTBL {deleteAfterUse = yes}; // table
  use XOSTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPATBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YOSTBL {deleteAfterUse = yes}; // table
  use XSNTBL {deleteAfterUse = yes}; // table
  use XBKTBL {deleteAfterUse = yes}; // table
  use OM0QM.OM0QM001,  // forms
      OM0QM.XP0QM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OM0Q000: OM0Q000();
  end // end main
end // end OM0Q

// xfer to other application
Function OM0Q-CUST-LOGO-XFR()
  set OPABREC empty;
  OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* set up commarea for xfer*/

  OPABREC.OPAB-SYS-GRP = OMWREC.OMWSGRP; /* hold OMWREC*/
  OPABREC.OP-ORD-PART-CHAR = OP1REC.OP1PARTN; /* part char*/
  OPABREC.OP-CUST-ORD-ID = OP1REC.OP1CUOID; /* order*/
  OPABREC.OP-LINE-ITEM-NBR = OP3REC.OP2LNINB; /* line item #*/
  OPABREC.SY-STY-NBR = OP3REC.SY1STNBR; /* style*/
  OPABREC.SY-COLR-CD-ID = OP3REC.SY2CLRID; /* color*/
  OPABREC.XDM-DIM-CD = OP3REC.XDMCD; /* dim*/
  COMMAREA.CAFROMAP = "OM0Q"; /* from om0q*/
  COMMAREA.CACURRAP = "AE09"; /* going to AE09*/
  COMMAREA.CATOAP = "    "; /* blank since xsexit not used*/
  OPABREC.OPAB-TO-APPL = "OM0Q"; /* RETURN BACK TO OM0q*/
   /* move pass record to commarea and do a non-standard transfer.*/
  COMMAREA.CA-USER-WORKAREA-4K = OPABREC.OPAB-COMMON-REC;
  sysVar.transferName = COMMAREA.CACURRAP;
  transfer to transaction sysVar.transferName passing COMMAREA;



end // end OM0Q-CUST-LOGO-XFR

// check security, init.work-stor
Function OM0Q000()


      /* *************************************************/
      /* * first process in application -*/
      /* *                 - security check*/
      /* *                 - initialize working-storage*/
      /* *************************************************/
      /* * check entry security*/
      /* *************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  XSENTRY();

  COMMAREA.CAFROMAP = "OM0Q"; /* init commarea*/
  XSSEGTR(); /* set segmented trans id*/


      /* *******************************/
      /* * retrieve user common area*/
      /* *******************************/

  set OP1REC empty;

  XSOMS01(); /* check order entry security*/
  OP1REC.OP1GROUP = OMWREC.OP1GROUP; /* hold order header data*/

       /* ********************************************************/
       /* * is this an Airborne order?  yes - set flag          **/
       /* ********************************************************/

  XS0MW01.XS0MWDIV = OP1REC.XDVCD; /* build pass record*/
  XS0MW01.XS0MWORT = OP1REC.XOTCD;
  XS0MW01.XS0MWDIR = OP1REC.XDSCD;
  XS0MW01.XS0MWCUS = OP1REC.KUCCOID;
  XS0MW01.XS0MWGPC = OP1REC.XGPCD;
  XS0MW01.XS0MWNDT = OP1REC.OP1CUNDT;

  VOPPGM01.XXX-PGM-NBR = "OP1920"; /* date airborne orders*/
  call "IO6600" ("S ", SQLCA, VOPPGM01) {isNoRefresh = yes, isExternal = yes}; /* last transmitted*/

  if (SQLCA.VAGen_SQLCODE == 0)
   /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VOPPGM01";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "OM0Q000";
    TA1REC.TA1LOCAT[3] = "IO6600";
    TA1REC.TA1TBLKE = "OP1920";
    XSOPS02();
  end

  XS0MS-CHK-AIRBORNE();

      /* **********************************************/
      /* * init appl working storage, constants, flags*/
      /* **********************************************/

  OM0QS01();

  if (OMWREC.OMWLINES == 0) /* no lines selected*/
    OM0QSR1(); /* fill selection array*/
  else
    OMASUB = 1;
    while (OMASUB <= OMWREC.OMWLINES
     && OMWREC.OMWSELCD[OMASUB] != "S") /* find first selected*/
      OMASUB = OMASUB + 1;
    end
    OMWREC.OMWLNITX = OMASUB; /* save index*/
  end


       /* ********************************************************/
       /* * perform product loop until no more selected products**/
       /* ********************************************************/

  while (OMWREC.OMWLNITX > 0 /* product index > 0*/
   && OMWREC.OMWLNITX <= OMWLINES) /* product index not past last prod*/
    if (OMWREC.OMWSELCD[OMWLNITX] == "S") /* if product selected*/
      OM0Q100(); /* product loop*/
      OM0Q500();
    end
    OMWREC.OMWLNITX = OMWREC.OMWLNITX + 1; /* increment prod index*/
    converseLib.validationFailed(378); /* signifies next product in loop*/
  end

   /* ************************************************************/
   /* *     now transfer to next application                    **/
   /* * **********************************************************/

  if (OMWREC.OMWPKCHF == "Y") /* pack change flag*/
    OM0QS02(); /* check for prepack*/
    if (OMAREC.OMAERR == "Y") /* -911 from prepack*/
      OM0Q410(); /* converse*/
      OM0QS02(); /* re-check prepack*/
      if (OMAREC.OMAERR == "Y") /* second -911 from prepack*/
        OM0QS03(); /* return to om0m*/
      end
    end
    if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
      OMWREC.XOMCD = "  "; /* clear change reason*/
      COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
      COMMAREA.CACURRAP = "OS0G";
      COMMAREA.CAMSG = "ORDER MAINTAINED - VERIFY PREPACKS";
      transfer to program "OS0G" passing COMMAREA;
    else
      COMMAREA.CAMSG = " ";
      COMMAREA.CACURRAP = "OM0M";
      transfer to program "OM0M" passing COMMAREA; /* go to sub-order select menu*/
    end
  else
    COMMAREA.CAMSG = " ";
    COMMAREA.CACURRAP = "OM0M";
    transfer to program "OM0M" passing COMMAREA; /* go to sub-order select menu*/
  end


     /* last line of om0q000; end of application*/
end // end OM0Q000

// drive product loop
Function OM0Q100()


   /* ****************************************************/
   /* **   drives product loop for selected items       **/
   /* ****************************************************/

  OM0Q200(); /* product initialize, read prod data*/

  OM0Q300(); /* move data to map, set attributes*/

  OM0QW01.OM0QWCON = "Y"; /* init converse flag for display*/
  while (OMAERR == "Y"
   || OM0QW01.OM0QWCON == "Y")
    OM0Q400(); /* converse/evaluate/edit loop*/
  end

end // end OM0Q100

// init prod w-s, read data
Function OM0Q200()


      /* ********************************************************/
      /* * init product working storage                        **/
      /* * read product records                                **/
      /* * init min/max size ranges                            **/
      /* * read/establish prices if called for                 **/
      /* ********************************************************/


  OM0Q210(); /* init working storage, flags*/


  OM0Q220(); /* read in data for next prod*/

   /* next process sets the full size range up in w-s*/
     /* for map line 5; from - to range*/
     /* if pf21 was requested, the w-s range*/
     /* becomes the active range*/
  OM0Q240(); /* establish full size range for map*/

  if (OMWREC.OMWPF21 == "Y" /* came in on full size range*/
   || OM0QW01.OM0QWP21 == "Y") /* or requested full size range*/
    OM0QS25(); /* activate w-s full size range*/

    if (OP3REC.OP2PRCOF == "Y" /* prices have been changed previously*/
     || OP3REC.OP2PRCVF == "Y" /* prices vary*/
     || OM0QW01.OM0QWPF6 == "Y") /* prices requested*/
      OM0Q250(); /* establish prices*/
    end
  else /* set min/max of ordered sizes*/

    OM0QW01.OM0QWSZF = 0; /* init first size*/
    OMASUB = 1;
    while (OMASUB < 41)
                                   /* will not be more than 40 active sizes*/
      OM0Q231(); /* sets min/max size range*/
      OMASUB = OMASUB + 1;
    end
  end

      /* ********************************************************/
end // end OM0Q200

// init prod w-s
Function OM0Q210()


      /* *********************************************************/
      /* * re-set records to empty to start clean*/
      /* *********************************************************/

  set IVEREC empty;
  set KUCREC empty;
  set KUMREC empty;
  set OBIREC empty;
  set OIBREC empty;
  set OM0QW01 empty;
  set OM0QW02 empty;
  set OM0QW03 empty;
  set OM0QW04 empty;
  set OP2REC empty;
  set OP3REC empty;
  set OP4REC empty;
  set OP5REC empty;
  set OP8REC empty;
  set OPBREC empty;
  set OPJREC empty;
  set OPLREC empty;
  set OPPREC empty;
  set OPRREC empty;
  set OPUREC empty;
  set SYCREC empty;
  set SY4REC empty;
  set SY5REC empty;
  set SP2REC empty;
  set SP5REC empty;
  set CC1REC empty;


  if (OMAREC.OMAERR == "Y") /* here because of errors*/
     /* next sentence*/
  else
    set OM0QM001 initial; /* clear for next product*/
    set OM0QM001.XOMCD cursor;
  end
end // end OM0Q210

// read in product data
Function OM0Q220()

  TA1REC.TA1LOCAT[2] = "OM0Q220"; /* error diag - process name*/


      /* *********************************************************/
      /* * read in product records from database*/
      /* *********************************************************/

  OM0QSRM(); /* find max number of order numbers*/

  OM0QSR2(); /* read op3rec*/

  OM0QS20(); /* move data from op3rec to om0qw01 to*/
                                   /* init*/


  OM0QSR3(); /* read sycrec*/

  OM0QSR4(); /* read sy4rec*/

    /* set up current date for use in screend prod logic*/

  OMAREC.OMACDT = VGVar.currentShortGregorianDate; /* set curr date*/
  if (OMAREC.OMACYY > 56) /* set century based on year*/
    OMAREC.OMACCC = 19;
  else
    OMAREC.OMACCC = 20;
  end

   /* set up for screened products*/

    /* Need date is protected for blank*/
    /* bulk/draws, and flyer programs (identified by presence of*/
    /* owner group)*/


  OM0QW01.OM0QW-PROMO-XOWCD-FL = "N";
  if (OP1REC.XGPCD == "03") /* only apparel are screened*/
    if (OM0QW01.OM0QWHS == "51"
     || OM0QW01.OM0QWHS == "25"
     || OM0QW01.OM0QWHS == "27")
      if (OP1REC.XBDCD == "B") /* blank bulk*/
        set OM0QM001.XOWCD protect;
       /* SET OM0QM001.XWHCD PROTECT;*/
        set OM0QM001.OM0QMNDT protect;
      else
        OM0QW01.OM0QWMDT = OP1REC.OP1CUNDT;
        if (OP1REC.XBDCD == "8" /* blank bulk draw*/
         || OP1REC.XBDCD == "F") /* blank bulk draw*/
          set OM0QM001.XOWCD protect;
         /* SET OM0QM001.XWHCD PROTECT;*/
          set OM0QM001.OM0QMNDT protect;
          OM0QST8();
        else
          OM0QSRB(); /* calc life cycle*/
          if (SYCREC.SY1BSTNB > " " /* associated with blank style*/
           && SYCREC.XPRCD != "22"  /* and not custom logo*/
           && OP3REC.XQACD == "01"  /* first quality*/
           && OBIREC.XLCCD < "11")  /* active life cycle*/
            set OM0QM001.XOWCD protect;
           /* SET OM0QM001.XWHCD PROTECT;*/
            if (OP3REC.XOWCD != " ")
              OM0QS-CHK-PROMO(); /* CHECK FOR PROMO OWNER GROUP*/
              if (OM0QW01.OM0QW-PROMO-XOWCD-FL == "Y")
                   /* NEXT SENTENCE*/
              else
                if (OP1REC.XBDCD == "0"
                 || OP1REC.XBDCD == "1")
                  set OM0QM001.OM0QMNDT protect;
                  OM0QS-FLYR-CUTOFF();
                end
              end
            end
          end
        end
      end
    end
  end


  if (OP1REC.XBDCD == "0") /* indicates regular order*/
    OM0Q221(); /* read availability*/
  else
    OM0Q222(); /* read bulk/draw information*/
  end

  if (XOTTBL.XOTFUTRF[OM0QWOTS] == "Y") /* order is a futures*/
    OM0QSRF(); /* read production deadline information*/
  end

      /* ********************************************************/
end // end OM0Q220

// read availability data
Function OM0Q221()


      /* *********************************************************/
        /* see if direct ship displays availability*/
        /* see if order type says display availability*/
        /* see if order class is golf.*/
      /* *********************************************************/

  OM0QW01.OM0QWCAL = "N"; /* init call flag*/

  if (XOTTBL.XOTDSAVL[OM0QWOTS] == "Y" /* display availability*/
   && OP1REC.XGPCD == "03"             /* apparel*/
   && (OM0QM001.XDSCD == "1"           /* if direct ship*/
   || OP1REC.XDSCD == "1"))            /* if direct ship*/
      /* next sentence*/
  else
    if (OM0QM001.XDSCD == "1" /* if direct ship no disp avail*/
     || OM0QM001.XDSCD == "2") /* if indirect ship no disp avail*/
      if (SYCREC.XPRCD != "22") /* show avail for crested direct ships*/
        return; /**/
      end
    end
  end

  if (XOTTBL.XOTDSAVL[OM0QWOTS] == "Y" /* display availability*/
   && OP1REC.XGPCD == "03"             /* apparel*/
   && (OM0QM001.XDSCD == "1"           /* if direct ship*/
   || OP1REC.XDSCD == "1"))            /* if direct ship*/
      /* next sentence*/
  else
    if (OP1REC.XDSCD == "1" /* if direct ship no disp avail*/
     || OP1REC.XDSCD == "2") /* if indirect ship no disp avail*/
      if (OM0QM001.XDSCD == " " /* if erased or not moved yet*/
       && OM0QM001.XWHCD == " ") /* whse not moved to map yet*/
        if (SYCREC.XPRCD != "22") /* show avail for crested direct ships*/
          return; /**/
        end
      end
    end
  end

  if (XOTTBL.XOTDSAVL[OM0QWOTS] == "Y" /* display availability*/
   || XOTTBL.XOTDSAVL[OM0QWOTS] == "A" /* golf product*/
   || OP1REC.XOCCD == "GF")            /* golf product*/
    OM0QSRA(); /* read availability*/

      /* ob1210 was called to access availability,*/
      /* the appropriate codes, dates and qtys*/
      /* were loaded in the obirec whether or not*/
      /* availability was found for the product.*/
      /* set om0qwcal to 'y' to show that the call was made*/

    OM0QW01.OM0QWCAL = "Y";

    if (OBIREC.OBIRTNCD == 0 /* good avail accessed*/
     || OBIREC.OBIRTNCD == 1) /* good avail but just not displayed*/
      /* next sentence*/
    else
      converseLib.validationFailed(442); /* no availability for this prod*/
      OMAREC.OMAERR = "Y";
    end
  end

      /* ********************************************************/
end // end OM0Q221

// read bulk/draw data
Function OM0Q222()


      /* *********************************************************/
      /* * read in bulk/draw information*/
      /* *********************************************************/


  if (XBDTBL.XBDRWOFL[OM0QWBDS] == "Y") /* draw*/
    OM0QSRC(); /* read bulk item*/
    if (OM0QW01.OM0QWFBK == "Y") /* found bulk for draw*/
      OM0QSRD(); /* read bulk sizerun*/
      OM0QSRE(); /* read bulk hdr*/
    end
  else
    if (XBDTBL.XBDBKOFL[OM0QWBDS] == "Y") /* bulk*/
      if (XBDTBL.XBDSETFL[OM0QWBDS] == "Y" /* set aside bulk*/
       || OP1REC.XBDCD == "B")             /* blank bulk order*/
        /* next sentence*/
      else /* customer bulk*/
        OM0Q221(); /* read availability data*/
      end
    end
  end

      /* ********************************************************/
end // end OM0Q222

// set min/max for sizes
Function OM0Q230()

      /* *********************************************************/
      /* * set min/max size range*/
      /* * for full  size range and ordered*/
      /* *********************************************************/


  if (OM0QW01.OP3SZAFL[OMASUB] == "Y") /* if size is active*/
    if (OM0QW01.OM0QWSMF == 0) /* nothing in field yet*/
      OM0QW01.OM0QWSMF = OMASUB; /* first active size*/
    end
    OM0QW01.OM0QWSML = OMASUB; /* last active size will overlay*/

    if (OP3REC.OP3SZAFL[OMASUB] == "Y") /* qty ordered*/
      if (OM0QW01.OM0QWOSF == 0) /* nothing in field yet*/
        OM0QW01.OM0QWOSF = OMASUB; /* first active size*/
      end
      OM0QW01.OM0QWOSL = OMASUB;
                                   /* last ordered size will overlay*/
    end
  end

      /* ********************************************************/
end // end OM0Q230

// set min/max for sizes
Function OM0Q231()

      /* *********************************************************/
      /* * set min/max size range*/
      /* *********************************************************/

  if (OP3REC.OP3SZAFL[OMASUB] == "Y") /* if size is active*/
    if (OM0QW01.OM0QWSZF == 0) /* nothing in field yet*/
      OM0QW01.OM0QWSZF = OMASUB; /* first active size*/
    end
    OM0QW01.OM0QWSZL = OMASUB; /* last active size will overlay*/
  end

      /* ********************************************************/
end // end OM0Q231

// set full size range min/max
Function OM0Q240()


      /* *********************************************************/
      /* * set full valid size range for pf21 indicated*/
      /* *********************************************************/


  OM0QW01.OM0QWSMF = 0; /* will be new first active size*/
  OM0QW01.OM0QWOSF = 0; /* will be orig active size*/
  OMASUB = 1;

  while (OMASUB < 41) /* wont be more than 40 sizes*/
      /* from draw orders check validity against bulk order.*/
    if (OP3REC.OP3SZAFL[OMASUB] == "Y") /* already active*/
      OM0QW01.OP3SZAFL[OMASUB] = "Y";
    else
      if (OM0QW01.OM0QWFBK == "Y")
        if (OM0QW03.OP3SZAFL[OMASUB] == "Y")
          if (OP1REC.XBDCD == "8" /* draw from a blank bulk*/
           || OP1REC.XBDCD == "F") /* bulk from a blank bulk*/
            OM0Q241();
          else
            OM0QW01.OP3SZAFL[OMASUB] = "Y";
          end
        end

      else
        /* REGULAR ORDER OR BULK NOT FOUND, CALCULATE IF ACTIVE*/
        OM0Q241();
      end
    end
    OM0Q230(); /* sets min/max size ranges*/
    OMASUB = OMASUB + 1;
  end



      /* ********************************************************/
end // end OM0Q240

// set valid size range
Function OM0Q241()



   /* ----------------------------------------------------*/
   /* if flag = a (allowed) and the product division equals one*/
   /* of the order type's allowable divisions, it's ok*/
   /* else it's an error*/
   /* ----------------------------------------------------*/

       /* ----------------------------------------------------*/
       /* if flag = d (disallowed) this order type restricts*/
       /* the divisions listed from the product.  if no match,*/
       /* it's good; if there is a match, it's an error*/
       /* ----------------------------------------------------*/

  if (SYCREC.XDVCD[OMASUB] != " ")
    if (XOTTBL.XOTALWDV[OM0QWOTS] == "A")
      if (SYCREC.XDVCD[OMASUB] == XOTTBL.XDVCD1[OM0QWOTS]
       || SYCREC.XDVCD[OMASUB] == XOTTBL.XDVCD2[OM0QWOTS]
       || SYCREC.XDVCD[OMASUB] == XOTTBL.XDVCD3[OM0QWOTS]
       || SYCREC.XDVCD[OMASUB] == XOTTBL.XDVCD4[OM0QWOTS]
       || SYCREC.XDVCD[OMASUB] == XOTTBL.XDVCD5[OM0QWOTS])
        OM0QS24(); /* good division, check fringe/gut*/
      end
    else
      if (XOTTBL.XOTALWDV[OM0QWOTS] == "D")
        if (SYCREC.XDVCD[OMASUB] == XOTTBL.XDVCD1[OM0QWOTS]
         || SYCREC.XDVCD[OMASUB] == XOTTBL.XDVCD2[OM0QWOTS]
         || SYCREC.XDVCD[OMASUB] == XOTTBL.XDVCD3[OM0QWOTS]
         || SYCREC.XDVCD[OMASUB] == XOTTBL.XDVCD4[OM0QWOTS]
         || SYCREC.XDVCD[OMASUB] == XOTTBL.XDVCD5[OM0QWOTS])
          /* next sentence          ; div not allowed*/
        else /* good division*/
          OM0QS24(); /* check fringe/gut*/
        end
      end
    end
  end


      /* ********************************************************/
end // end OM0Q241

// read, establish prices
Function OM0Q250()


  TA1REC.TA1LOCAT[2] = "OM0Q250"; /* diag location 2*/


   /* *********************************************************/
   /* *  this process takes several steps in calculating prices*/
   /* *    it may seem redundant throughout OM0Q, but will*/
   /* *    more than likely only be done once.  Either in setting*/
   /* *    up the screen for full size range, defaulting price*/
   /* *    or getting prices for op3rec when additional sizes*/
   /* *    were ordered.*/
   /* *********************************************************/

    /* first set up unit of measure conver factor for the order.*/
      /* note - this is new u.o.m., which may eq old u.o.m.*/

  OM0Q251(); /* u.o.m. check*/

  OM0QW01.OM0QWPRC = 0; /* 0 w-s price for vary check*/

  OM0QWZPR = "N"; /* flag to force zero price*/


  if (KUCREC.KUCCOID == 0) /* if co rec not read yet*/
    KUCREC.KUCCOID = OP1REC.KUCCOID; /* frmt co nbr*/
    OM0QSRH(); /* read it for account code*/
  end

   /* if this in an international account*/
     /* if the account class is 33*/
       /* get the price type code from nimrec*/
     /* else if the account class is 31 or 32 or any 06 acct type*/
       /* get the price type from the invoice speciality table.*/

  if (OP1REC.XDVCD == "02") /* if an int'l order*/
    if (KUCREC.XAUCD == "33")
                                   /* if the customer is a ind distributr*/
      OM0Q256(); /* get price type code from nimrec*/
    else /* otherwise*/
      OM0Q257(); /* get it from iverec.*/
    end
  end


  if (OP1REC.XDVCD == "02") /* if an int'l order*/
     /* NEXT SENTENCE               ;     redo price even if a draw*/
  else /* otherwise*/
    if (OM0QW01.OM0QWFBK == "Y" /* if order is a draw, found bulk*/
     && XBDTBL.XBDSETFL[OM0QWBDS] == "N") /* customer or rbk draw*/
      if (OP1REC.XBDCD != "8" /* not a draw from a blank bulk*/
       && OP1REC.XBDCD != "F") /* not a bulk from a blank bulk*/
        OM0Q252(); /* use bulk prices for draw prices*/
        return;
      end
    end
  end


  if (OP1REC.SP1ID != " ") /* order is on sales program*/
    OM0QSR6(); /* get sales pgm prices*/
  end

  if (OP1REC.XDVCD == "02") /* if an int'l order*/
    if (IVEREC.IVEPCIND == "C") /* if price comes from cost tbl*/
      OM0Q258(); /* get price from cost table*/
    else /* else*/
      OM0Q254(); /* get it from the price table*/
    end
    if (OM0QW01.OM0QWCLP > 0) /* adjust price by color*/
      if (KUCREC.XAUCD == "33")
        OM0QW01.OM0QWIPC = mathLib.round(OM0QW01.OM0QWCLP *            VNLXPY01.NL-PRC-COST-PCT / 100, -mathLib.decimals(OM0QW01.OM0QWIPC));
        OM0QW01.OM0QWCLP = OM0QW01.OM0QWCLP + OM0QW01.OM0QWIPC;
      else
        OM0QW01.OM0QWIPC = mathLib.round(OM0QW01.OM0QWCLP * IVEREC.IVEPCPCT / 100, -mathLib.decimals(OM0QW01.OM0QWIPC));
        OM0QW01.OM0QWCLP = OM0QW01.OM0QWCLP + OM0QW01.OM0QWIPC;
      end
    else /* otherwise adjust price by style*/
      if (KUCREC.XAUCD == "33")
        OM0QW01.OM0QWIPC = mathLib.round(OM0QW01.OM0QWSTP *            VNLXPY01.NL-PRC-COST-PCT / 100, -mathLib.decimals(OM0QW01.OM0QWIPC));
        OM0QW01.OM0QWSTP = OM0QW01.OM0QWSTP + OM0QW01.OM0QWIPC;
      else
        OM0QW01.OM0QWIPC = mathLib.round(OM0QW01.OM0QWSTP * IVEREC.IVEPCPCT / 100, -mathLib.decimals(OM0QW01.OM0QWIPC));
        OM0QW01.OM0QWSTP = OM0QW01.OM0QWSTP + OM0QW01.OM0QWIPC;
      end
    end
  else /* otherwise get product price for all*/
                                   /* other divisions*/
    OM0Q254(); /* get style or color prices*/
  end

  OMASUB = OM0QW01.OM0QWSZF; /* FIRST ACTIVE SIZE*/


  while (OMAREC.OMASUB <= OM0QWSZL /* last active size*/
   && OMAREC.OMASUB < 41) /* last size possible, just in case*/
    if (OP3REC.OP3SZAFL[OMASUB] == "Y") /* size is active*/
      if (OP3REC.OP3ONOQT[OMASUB] == 0) /* size was added*/
        OM0Q255(); /* move price to om0qw01*/

        if (OM0QW01.OM0QWUMF == "N") /* prices not stored standard*/
          OM0QS64(); /* convert to non-std uom*/
        end

        if (OP3REC.OP2PRCVF == "N") /* price variance not set yet*/
          OM0QS65(); /* check if prices vary*/
        end
      end
    end

    OMAREC.OMASUB = OMAREC.OMASUB + 1;
  end


end // end OM0Q250

// check std u.o.m
Function OM0Q251()



  TA1REC.TA1LOCAT[2] = "OM0Q251"; /* diag level 2, stmt grp*/


      /* compare product std uom & order uom*/
      /* if not equal, then hold std and non-std*/
      /* conversion factors for converting std.*/
      /* price to non-std price*/


  OM0QW01.OM0QWUMS = 1; /* force conv.factors = 1*/
  OM0QW01.OM0QWUMN = 1;

  if (SYCREC.XUMCD == OP3REC.XUMCD) /* uom is std*/
    OM0QW01.OM0QWUMF = "Y"; /* uom is std*/
  else
    OM0QW01.OM0QWUMF = "N"; /* uom is non-std*/
    if (SYCREC.XUMCD in XUMTBL.XUMCD
     && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      OM0QW01.OM0QWUMS = XUMTBL.XUMCONVF[sysVar.arrayIndex];
      if (OP3REC.XUMCD in XUMTBL.XUMCD
       && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        OM0QW01.OM0QWUMN = XUMTBL.XUMCONVF[sysVar.arrayIndex];
      else
        OM0QW01.OM0QWUMF = "Y"; /* can't be coonverted*/
        converseLib.validationFailed(156); /* invalid unit of measure*/
      end
    else
      OM0QW01.OM0QWUMF = "Y"; /* can't be coonverted*/
      converseLib.validationFailed(156); /* invalid unit of measure*/
    end
  end





end // end OM0Q251

// get prices from bulk
Function OM0Q252()


  OMAREC.OMASUB = OM0QW01.OM0QWSZF; /* first active size*/
  while (OMAREC.OMASUB <= OM0QWSZL /* last active size*/
   && OMAREC.OMASUB < 41) /* last possible size, just in case*/
    if (OP3REC.OP3SZAFL[OMASUB] == "Y") /* size is active*/
      if (OP3REC.OP3ONOQT[OMASUB] == 0) /* size was added*/
        OM0QW01.SY5PRCUN[OMASUB] = OM0QW03.SY5PRCUN[OMASUB];
      end
    end
    OMAREC.OMASUB = OMAREC.OMASUB + 1;
  end



end // end OM0Q252

// get prices from bulk
Function OM0Q253()


  OMAREC.OMASUB = OM0QW01.OM0QWSZF; /* first active size*/
  while (OMAREC.OMASUB <= OM0QWSZL /* last active size*/
   && OMAREC.OMASUB < 41) /* last possible size, just in case*/
    if (OP3REC.OP3SZAFL[OMASUB] == "Y") /* size is active*/
      if (OP3REC.OP3ONOQT[OMASUB] == 0 /* size was added*/
       && OM0QW01.OM0QWCQT[OMASUB] > 0) /* qty ordered*/
        OM0QW01.SY5PRCUN[OMASUB] = OM0QW03.SY5PRCUN[OMASUB];
      end
    end
    OMAREC.OMASUB = OMAREC.OMASUB + 1;
  end



end // end OM0Q253

// read style/color prices
Function OM0Q254()



  TA1REC.TA1LOCAT[2] = "OM0Q254"; /* error diag group name*/


  OM0QW01.OM0QWSTP = 0; /* zero price defaults*/
  OM0QW01.OM0QWCLP = 0;
  OM0QW01.OM0QWSZP = 0;


      /* *******************************************************/
      /* * if it's an int'l apparel or footwear futures order*/
      /* * whose product is in development, the price will be 0.*/
      /* * if zero price (from this or from finding no int'l*/
      /* * price type code), won't need to get the product price*/
      /* *******************************************************/

  OM0QSRB(); /* get the product's life cycle*/
  if (OP1REC.XDVCD == "02") /* if division is int'l*/
    if (OBIREC.XLCCD == "05") /* and prod has life cycle of 05*/
      if (OP1REC.XOTCD == "31" /* and a footwear*/
       || OP1REC.XOTCD == "36") /* or apparel futures*/
        OM0QW01.OM0QWZPR = "Y"; /* set 0 prc flag*/
      end
    end
  end

  if (OM0QW01.OM0QWZPR == "Y") /* if zero price*/
    return; /* already know price so return*/
  end


      /* *******************************************************/
      /* * read db2 price by style or style & color for defaults*/
      /* **/
      /* * first - if price-size code = s or c or z (any):*/
      /* * _ read price default for style (all colors,dims,sizes)*/
      /* * - hold price in op0iwstp (style price)*/
      /* **/
      /* * second - if price-size code = c or z:*/
      /* *  - read price deflt for style & color & dim(all sizes)*/
      /* *  - hold price in op0iwclp (color price)*/
      /* *******************************************************/


      /* *****************************/
      /* * get style price record*/
      /* *****************************/

  SY5REC.SY2CLRID = "***"; /* default color code*/
  SY5REC.XDMCD = "**"; /* default dimension*/
  SY5REC.SY5SZID = 0; /* default size id*/

  OM0QSR7(); /* db2 read price by style*/

  if (SQLCA.VAGen_SQLCODE == 100) /* if price record not found,*/
    OM0QW01.OM0QWSTP = 0; /* force zero prices*/
  else
    OM0QS61(); /* pick out price effec today (from 6 possible)*/
    if (OMASUB2 != 0)
      OM0QW01.OM0QWSTP = SY5REC.SY5PRCUN[OMASUB2];
                                   /* hold style price*/
    end
  end

      /* ******************************/
      /* * check if need second read*/
      /* ******************************/

  if (SYCREC.SY1PRCZS == "C" /* if have price by color or size*/
   || SYCREC.SY1PRCZS == "Z") /* get second default*/
    /* next sentence*/
  else /* else use only style default*/
    return;
  end


      /* *******************************************/
      /* * get style/color/dimension price record*/
      /* *******************************************/

  SY5REC.SY2CLRID = OP3REC.SY2CLRID; /* color*/
  SY5REC.XDMCD = OP3REC.XDMCD; /* dimension*/
  SY5REC.SY5SZID = 0; /* default size id*/

  OM0QSR7(); /* db2 read price*/

  if (SQLCA.VAGen_SQLCODE == 100) /* price not found*/
    OM0QW01.OM0QWCLP = 0; /* forces price = 0*/
  else
    OM0QS61(); /* pick out price effec today (from 6 possible)*/
    if (OMASUB2 != 0)
      OM0QW01.OM0QWCLP = SY5REC.SY5PRCUN[OMASUB2];
                                   /* hold color price*/
    end
  end



end // end OM0Q254

// move size prices
Function OM0Q255()

  TA1REC.TA1LOCAT[2] = "OM0Q255"; /* err diags location 2*/

      /* *******************************************************/
      /* * if sales pgm has product pricing (om0qwspp = y and*/
      /* *                                    sp5prcof = s)*/
      /* *   then use it*/
      /* * else*/
      /* * if zero price (om0qwzpr = y)*/
      /* *   use it*/
      /* * else*/
      /* *   read db2 price by size*/
      /* **/
      /* *    if price-size code = z:*/
      /* *      read price by size*/
      /* *    if a size price use it*/
      /* *    else if a color price use it*/
      /* *    else if a style price use it*/
      /* **/
      /* *    if sp5prcof = l*/
      /* *       take lower of two prices from product or spgm*/
      /* **/
      /* *******************************************************/

  OM0QW-PRICING-FACTOR = 0; /* initialize*/

  if (OP1REC.XDVCD == "02" /* nil*/
   && OP3REC.XQACD == "02" /* b-grade product*/
   && OP1REC.XWHCD == "15") /* consol delivery*/
    OM0QW-PRICING-FACTOR = 1; /* for 1$ add to price*/
  end

  if (OM0QW01.OM0QWSPP == "Y" /* may use sales pgm prices*/
   && SP5REC.SP5PRCOF[OMASUB] == "S")
     /* next sentence ; will load prices later*/
  else
    if (OM0QW01.OM0QWZPR == "Y") /* if zero price forced*/
      /* next sentence*/
    else
      if (SYCREC.SY1PRCZS == "Z" /* else if might have size price*/
       && IVEREC.IVEPCIND != "C")
                                   /* and price does not come from cost tbl*/
        SY5REC.SY2CLRID = OP3REC.SY2CLRID; /* set up db key color*/
        SY5REC.XDMCD = OP3REC.XDMCD; /* & dimension*/
        SY5REC.SY5SZID = OMAREC.OMASUB; /* & size*/
        OM0QSR7(); /* find size price, if any*/
        if (SQLCA.VAGen_SQLCODE == 0) /* pick out price effec.today*/
          OM0QS61(); /* from 6 possible prices*/
          if (OMASUB2 != 0)
            if (KUCREC.XAUCD == "33") /* nil independent distributor*/
              OM0QW01.OM0QWIPC = mathLib.round(SY5REC.SY5PRCUN[OMASUB2] *                                        VNLXPY01.NL-PRC-COST-PCT / 100, -mathLib.decimals(OM0QW01.OM0QWIPC));
              OM0QW01.OM0QWSZP = SY5REC.SY5PRCUN[OMASUB2] + OM0QW01.OM0QWIPC;
            else
              OM0QW01.OM0QWIPC = mathLib.round(SY5REC.SY5PRCUN[OMASUB2] * IVEREC.IVEPCPCT / 100, -mathLib.decimals(OM0QW01.OM0QWIPC));
              OM0QW01.OM0QWSZP = SY5REC.SY5PRCUN[OMASUB2] + OM0QW01.OM0QWIPC;
            end
          end
        end
      end
    end
  end


  if (OM0QW01.OM0QWSPP == "Y" /* if use sales pgm prices*/
   && SP5REC.SP5PRCOF[OMASUB] == "S")
    OM0QW01.SY5PRCUN[OMASUB] = SP5REC.SP5SZPR[OMASUB];
  else
    if (OM0QW01.OM0QWZPR == "Y") /* if force zero price, put in 0*/
      OM0QW01.SY5PRCUN[OMASUB] = 0;
    else
      if (OM0QW01.OM0QWSZP != 0) /* else if have a size price, use it*/
        OM0QW01.SY5PRCUN[OMASUB] = OM0QW01.OM0QWSZP;
      else
        if (OM0QW01.OM0QWCLP != 0) /* else if have a color price, use it*/
          OM0QW01.SY5PRCUN[OMASUB] = OM0QW01.OM0QWCLP;
        else /* else use the style price, even if 0*/
          OM0QW01.SY5PRCUN[OMASUB] = OM0QW01.OM0QWSTP;
        end
      end
    end
  end


    /* the next step takes lower of two prices,*/
    /* sls prgm or the product price derived above*/
    /* if the sales program asks for it*/

  if (OM0QW01.OM0QWSPP == "Y"
   && SP5REC.SP5PRCOF[OMASUB] == "L")
    if (SP5REC.SP5SZPR[OMASUB] < OM0QW01.SY5PRCUN[OMASUB])
      OM0QW01.SY5PRCUN[OMASUB] = SP5REC.SP5SZPR[OMASUB];
    end
  end

  OM0QS-ADD-1-DOLLAR(); /* add 1 dollar to price per unit*/
                        /* on om0qw01.sy5prcun*/

  if (OP1REC.XDVCD == "02" /* international*/
   && OP3REC.XQACD == "02") /* b-grade product*/
    OM0QS-ROUND-BG-PRC(); /* round b-grade price up to the nickel*/
  end

end // end OM0Q255

// get nil price type code
Function OM0Q256()


      /* ***************************************************/
      /* * get the price code for an international order*/
      /* ***************************************************/


  set YSMREC empty;
  set VNLXPY01 empty;


  OM0QSRI(); /* get the summary base order type*/

  if (OM0QW01.OM0QWZPR == "Y") /* if zero price flag set*/
     /* next sentence*/
  else /* otherwise get nimrec*/

    OM0QSRL(); /* get nimrec with nil's price*/
  end


end // end OM0Q256

// get inv spec tbl
Function OM0Q257()




   /* *  for nike international orders, price type code can*/
   /* *  come from several sources:*/
   /* *  - if the customer is a nil distributor*/
   /* *        the price type code comes from nimrec*/
   /* *  - if the customer is nike owned or exports*/
   /* *    and the order type is sample*/
   /* *    and it is a direct ship or from the nil warehse*/
   /* *        the price type code comes from the invoicing*/
   /* *        specialty table using the account class of the*/
   /* *        company as part of the key*/
   /* *  - if the customer is nike owned or exports*/
   /* *    and the order type is sample*/
   /* *    and the item comes from a regular warehouse (not 12)*/
   /* *        the price type code comes from the invoicing*/
   /* *        specialty table using the account class of the*/
   /* *        comp number as part of the key*/
   /* *  - if the customer is nike owned or exports*/
   /* *    and the order type is not a sample*/
   /* *    and the comp number is entered*/
   /* *        the price type code comes from the invoicing*/
   /* *        specialty table using the account class of the*/
   /* *        comp number as part of the key*/
   /* *  - if the customer is nike owned or exports*/
   /* *    and the order type is not sample*/
   /* *    and the comp number is not entered*/
   /* *        the price type code comes from the invoicing*/
   /* *        specialty table using the account class of the*/
   /* *        company as part of the key*/


  if (KUCREC.XAUCD == "31"
   || KUCREC.XAUCD == "32")
    if (OP1REC.XOBCD == "S1")
      if (OM0QM001.XWHCD == " " /* warehouse exists*/
       || OM0QM001.XWHCD == "12")
        OM0QS6O(); /* use cust acct class in key*/
      else
        OM0QS6N(); /* use comp acct class in key*/
      end
    else
      if (OP1REC.OP1CMPNB == 0) /* if comp nbr not entered*/
        OM0QS6O(); /* use cust acct class in key*/
      else
        OM0QS6N(); /* use comp acct class in key*/
      end
    end
  else /* else*/
    OM0QW01.OM0QWZPR = "Y"; /* force zero pricing*/
  end




end // end OM0Q257

// read style/color cost
Function OM0Q258()

      /* *******************************************************/
      /* * read db2 cost by style, color and dimension*/
      /* **/
      /* *******************************************************/

  TA1REC.TA1LOCAT[2] = "OM0Q258"; /* error diag group name*/

  OM0QW01.OM0QWCLP = 0; /* init color price to zero*/
  OM0QW01.OM0QWSTP = 0; /* init style price to zero*/
  OM0QW01.OM0QWSZP = 0; /* init size  price to zero*/

      /* *****************************/
      /* * get cost record*/
      /* *****************************/


  OM0QS59(); /* db2 read cost*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if cost record found,*/
    OM0QS60(); /* pick out cost effec today (from 6 possible)*/
    if (sysVar.arrayIndex != 0)
      OM0QW01.OM0QWCLP = SY6REC.SY6CSTUN[OMASUB2]; /* hold color cost*/
    end
  end




end // end OM0Q258

// move data to map, attributes
Function OM0Q300()


      /* ******************************************/
      /* * move data to all hdr fields on map,*/
      /* * set map attributes*/
      /* ******************************************/

  OM0Q310(); /* move header data*/

  OM0Q320(); /* move size descrip, qtys*/

  OM0Q340(); /* set attributes*/

end // end OM0Q300

// move hdr data to screen
Function OM0Q310()



      /* ******************************************/
      /* * move data to all hdr fields on map,*/
      /* * use data from op3rec, op1rec,*/
      /* * previously entered data.*/
      /* ******************************************/


      /* ***************************************/
      /* * MAp line 1 - process name & date*/
      /* ***************************************/

      /* application id for map*/

  OM0QM001.OMMPRC = "OM0Q300";
  OM0QM001.OMMMAP = "OM0QM001";
  OM0QM001.OMMRVN = 04;


      /* today's date*/

  OM0QM001.OMMDT = VGVar.currentShortGregorianDate;


      /* ***************************************/
      /* * map line 2 - order number & customer*/
      /* ***************************************/

  OM0QM001.OMWORD = OMWREC.OMWORD;


      /* format customer number for display*/

  OMAREC.OMACUCO = OP1REC.KUCCOID;
  OMAREC.OMACUSR = OP1REC.KUMSTRID;
  OMAREC.OMACUDP = OP1REC.XNXCD;

  OM0QM001.OMACUNO = OMAREC.OMACUNO; /* full cust number*/

  OM0QM001.KUMSTRNM = OMWREC.KUMSTRNM; /* store name*/


      /* ****************************************************/
      /* * MAp line 3 - change reason code and order adj nbr*/
      /* ****************************************************/

  if (OM0QW01.OM0QWXOM > 0) /* maint code entered*/
    OM0QM001.XOMCD = OMWREC.XOMCD; /* put code on map*/
    OM0QM001.XOMABRV = XOMTBL.XOMABRV[OM0QWXOM];
  else
    OM0QM001.XOMCD = " "; /* put code on map*/
    OM0QM001.XOMABRV = " ";
  end


  OM0QW01.OM0QWOAF = "N";

  if (OP1REC.XOCCD == "IN") /* invoice only order ?*/
     /* next sentence*/
  else
    if (OP1REC.XDVCD == "02" /* if nil*/
     && OP1REC.XGPCD == "02" /* and footwear*/
     && OM0QW01.OM0QWP20 == "Y") /* and 20 days past cutoff date*/
      OM0Q453(); /* ord adj validation override test*/
      if (OM0QW01.OM0QWOAO == "N") /* if override not taken*/
        if (converseVar.validationMsgNum == 0)
          converseLib.validationFailed(614); /* order adjustment required*/
          OM0QW01.OM0QWOAF = "Y"; /* order adjustment required*/
        end
      end
    end
  end


      /* ***********************************************/
      /* * MAp line 4 - nike product style and status*/
      /* ***********************************************/

  OM0QW01.SY1STNBR = OP3REC.SY1STNBR; /* format nike product*/
  OM0QW01.SY2CLRID = OP3REC.SY2CLRID;
  OM0QW01.XDMCD = OP3REC.XDMCD;
  OM0QM001.OM0QWPRD = OM0QW01.OM0QWPRD; /* nike prod code*/


  OM0QM001.SY1SSTNM = SYCREC.SY1SSTNM; /* product style name*/
  OM0QM001.SY2CLRAB = SYCREC.SY2CLRAB; /* and color name*/

  OM0QM001.OP2LNIST = OP3REC.OP2LNIST; /* product status*/

  OM0QM001.XOSABRV = XOSTBL.XOSABRV[OM0QWXOS];

      /* ******************************************************/
      /* * MAp line 5 - cust product style & full size range*/
      /* ******************************************************/

  OM0QM001.KUIPRDID = OP3REC.KUIPRDID; /* cust prod #*/

      /* use w-s first/last sizes as index to product size scale*/
      /* record for size description*/

  OM0QM001.OM0QMSZF = SY4REC.SY4IDDSC[OM0QWSMF];
                                   /* first & last sizes*/
  OM0QM001.OM0QMSZL = SY4REC.SY4IDDSC[OM0QWSML]; /* for prod full range*/


      /* **************************************/
      /* * map lines 6 - 16  all 20 sizes*/
      /* **************************************/

  if (OM0QW01.OM0QWFBK == "Y")
    OM0QM001.OM0QMLAV[1] = "BLK AVL:";
    OM0QM001.OM0QMLAV[2] = "BLK AVL:";
  else
    OM0QM001.OM0QMLAV[1] = "  AVAIL:";
    OM0QM001.OM0QMLAV[2] = "  AVAIL:";
  end


    /* next see if order type says display availability.*/

  if (XOTTBL.XOTDSAVL[OM0QWOTS] == "Y" /* order type displays avail*/
   || XOTTBL.XOTDSAVL[OM0QWOTS] == "A")
    OM0QM001.OM0QMLPO[1] = "COND CD:"; /* set up map line label*/
    OM0QM001.OM0QMLPO[2] = "COND CD:";
  else
    OM0QM001.OM0QMLPO[1] = "PRC OVRD"; /* set up map line label*/
    OM0QM001.OM0QMLPO[2] = "PRC OVRD";
  end

  if (XOTTBL.XOTDSAVL[OM0QWOTS] == "Y" /* order type displays avail*/
   && OP1REC.XDSCD == "1"              /* direct ship*/
   && OP1REC.XGPCD == "03")            /* apparel*/
    /* next sentence*/
  else
    if (OP1REC.XDSCD == "1" /* if direct ship no disp avail*/
     || OP1REC.XDSCD == "2") /* if indirect ship no disp avail*/
      OM0QM001.OM0QMLPO[1] = "PRC OVRD"; /* set up map line label*/
      OM0QM001.OM0QMLPO[2] = "PRC OVRD";
    else
      if (OP1REC.XBDCD != "0") /* if smart or flex bulk, no avail*/
        if (XBDTBL.XBDBKOFL[OM0QWBDS] == "Y"
         && XBDTBL.XBDSETFL[OM0QWBDS] == "Y")
          OM0QM001.OM0QMLPO[1] = "PRC OVRD"; /* set up map line label*/
          OM0QM001.OM0QMLPO[2] = "PRC OVRD";
        end
      end
    end
  end


      /* ****************************************/
      /* * map line 18 - bk sesn, more sizes*/
      /* ****************************************/

      /* TOTAL ON ORDER UNITS*/
  OM0QM-OP-TOT-ON-ORD-QTY = OP3REC.OP2TONOQ;


      /* Booking Season*/
  if (OP3REC.XBK-BK-SESN-CD != " ")
    OM0QM001.XBK-BK-SESN-CD = OP3REC.XBK-BK-SESN-CD;
    OM0QW01.OM0QW-OP-BK-CCCYY = OP3REC.OP-BK-YR;
    OM0QM001.OM0QM-OP-BK-YY = OM0QW01.OM0QW-OP-BK-YY;
  else
    OM0QM001.XBK-BK-SESN-CD = " ";
    OM0QM001.OM0QM-OP-BK-YY = " ";
  end

  OM0QW01.OP-BK-MO = OP3REC.OP-BK-MO; /* Save to see if changed*/
  if (OP3REC.OP-BK-MO != 0)
    OM0QW01.OM0QW-OP-BK-MM = OP3REC.OP-BK-MO;
    OM0QM001.OM0QM-OP-BK-MM = OM0QW01.OM0QW-OP-BK-MM;
  else
    OM0QM001.OM0QM-OP-BK-MM = " ";
  end

      /* More Sizes*/
      /* set up 'more sizes' flag*/
      /* see om0q320*/

      /* *********************************************************/
      /* * map line 19 - warehouse, needdate, direct ship, owner*/
      /* ********************************************************/

      /* move warehouse & needdate from sub-order*/

  OM0QSM1(); /* move xwhcd and abbrv*/

  OM0QSM2(); /* move xowcd and abbrv*/

   /* reformat need date from 19yymmdd to mm-dd-yy for map*/

  OSAREC.OSANU8 = OP1REC.OP1CUNDT; /* need date*/
  XPOP200(); /* order processing date formatter*/

  OM0QM001.OM0QMNDT = OSAREC.OSACH8; /* display date*/

  OM0QSM4(); /* move xdscd and abbrv*/


      /* *************************/
      /* * map line 20 - pricing*/
      /* *************************/

      /* move price for all sizes, if appropriate*/

  if (OP3REC.OP2PRCVF == "N") /* price same for all sizes*/
    OM0QM001.OM0QMPAL = OP3REC.OP2AUPRC; /* move to map*/
    OM0QW01.OM0QWPAZ = OP3REC.OP2AUPRC; /* init w-s*/
  end

   /* Added for Canada 7/17/95*/

  if (OP1REC.XDZ-DATA-DIST-CD == "CA")
    OM0QM001.OM0QM-CRCY-CD-LIT = "CURRENCY CODE>"; /* currency literal*/
    OM0QM001.ZFCCD = "CAD"; /* move currency code for Canadians*/
  else
    OM0QM001.OM0QM-CRCY-CD-LIT = " "; /* currency literal*/
  end

end // end OM0Q310

// move size data to map
Function OM0Q320()


  OMAREC.OMASUB1 = 1; /* map index = 1 to start*/

      /* note - om0qwszf/l were set before got here*/
             /* could be ordered range or actual range*/

  if (OM0QW01.OM0QWSCR == 1) /* if on screen 1*/
    OMASUB = OM0QW01.OM0QWSZF; /* find first size to move*/
  else
    OMASUB = OM0QW01.OM0QWSB2; /* screen 2 starting place*/
  end


      /* move size,qty,alloc (and price, flag) to map*/

  if (OP3REC.OP2PRCOF == "Y" /* prices overridden*/
   || OP3REC.OP2PRCVF == "Y" /* prices vary*/
   || OM0QW01.OM0QWPF6 == "Y") /* prices shown*/
    while (OMASUB1 < 21 /* for up to 20 sizes*/
     && OMASUB < 41  /* make sure record sub not > 40*/
     && OMASUB <= OM0QW01.OM0QWSZL) /* until end of chosen range*/
      if (OP3REC.OP3SZAFL[OMASUB] == "Y") /* active size -*/
        if (OP3REC.OP3ONOQT[OMASUB] > 0 /* qtys were ordered*/
         || OM0QW01.OM0QWP21 == "Y")    /* or full size range requested*/
          OM0Q321(); /* moves size descrip, qtys*/
          OM0Q330(); /* move size price and * flag to map*/
          OMASUB1 = OMASUB1 + 1; /* next map column*/
        end
      end
      OMASUB = OMASUB + 1; /* try next size in record*/
    end
  else /* prices not shown*/
    while (OMASUB1 < 21 /* if no multiple prices in the product*/
     && OMASUB < 41  /* move size,qty,alloc to map*/
     && OMASUB <= OM0QW01.OM0QWSZL) /* until end of chosen range*/
      if (OP3REC.OP3SZAFL[OMASUB] == "Y") /* for up to 20 sizes*/
        if (OP3REC.OP3ONOQT[OMASUB] > 0 /* qtys were ordered*/
         || OM0QW01.OM0QWP21 == "Y")    /* or full size range requested*/
          OM0Q321(); /* move size descrip, qtys*/
          OMASUB1 = OMASUB1 + 1; /* next map column*/
        end
      end
      OMASUB = OMASUB + 1; /* try next size in record*/
    end
  end

  OM0Q322(); /* set up more flag and screen*/
                                   /* boundaries*/

  while (OMASUB1 < 21)
    OM0Q323();
                                   /* clear fields not included in size run*/
    OMASUB1 = OMASUB1 + 1;
  end


end // end OM0Q320

// move qtys and availability
Function OM0Q321()


      /* ***************************************************/
      /* * move data to qtys and availability and size descs*/
      /* * use data from om0qw01, obirec,*/
      /* * previously entered data.*/
      /* **/
      /* ****************************************************/

      /* *************************************/
      /* * map lines 7 - 16  all 20 sizes*/
      /* *************************************/

      /* *****************************************************/
      /* *               - screen 1 has record sizes  1 to 20*/
      /* *                 screen 2 has record sizes 21 to 40*/
      /* *   excess sizes will be cleared in the next section.*/
      /* *****************************************************/


      /* get size description and move to map*/
      /* size scale record with 40 descrip was read prev.*/


  OM0QM001.SY4IDDSC[OMASUB1] = SY4REC.SY4IDDSC[OMASUB];
  set OM0QM001.SY4IDDSC[OMASUB1] initialAttributes;

      /* move qty to map*/

  if (OM0QW01.OM0QWCQT[OMASUB] == 0) /* 1st time in or qty not chgd*/
    OM0QM001.OP3ONOQT[OMASUB1] = OP3REC.OP3ONOQT[OMASUB];
  else /* qty was changed*/
    OM0QM001.OP3ONOQT[OMASUB1] = OP3REC.OP3ONOQT[OMASUB] + OM0QWCQT[OMASUB];
  end
  set OM0QM001.OP3ONOQT[OMASUB1] initialAttributes;

      /* move availability to map*/
  OM0QS32();

end // end OM0Q321

// set up screen boundaries
Function OM0Q322()



  if (OM0QW01.OM0QWSCR == 1) /* if screen # 1*/
    OM0QW01.OM0QWSB2 = OMASUB; /* hold scrn 2 starting point*/
  end


      /* ********************************************************/
      /* * check where valid sizes stopped -*/
      /* *   if have more than 20, set more flag = y*/
      /* ********************************************************/

  OM0QW01.OM0QWMOR = "N"; /* init more sizes = n*/

  if (OM0QW01.OM0QWSCR == 1 /* if screen # 1 and*/
   && OM0QW01.OM0QWSZL >= OMASUB) /* chosen last size > or =*/
    OM0QW01.OM0QWMOR = "Y"; /* last size shown + 1*/
    OM0QM001.OM0QWMOR = "Y";
    set OM0QM001.OM0QMWDM initialAttributes; /* show more flag on map*/
    set OM0QM001.OM0QWMOR initialAttributes;
  else /* then have more sizes for map*/
    set OM0QM001.OM0QMWDM protect, invisible; /* else darken this area*/
    set OM0QM001.OM0QWMOR protect, invisible; /* of the screen*/
  end

end // end OM0Q322

// clear unused map fields
Function OM0Q323()


      /* *********************************************/
      /* * in size columns not used on the map*/
      /* * darken unused fields - size descrip*/
      /* *                      - ordered quantity*/
      /* *                      - available quantity*/
      /* *                      - price per size*/
      /* *                      - price override flag*/
      /* *********************************************/

  set OM0QM001.SY4IDDSC[OMASUB1] skip, invisible;
  set OM0QM001.OP3ONOQT[OMASUB1] protect, invisible;
  set OM0QM001.OM0QMAVL[OMASUB1] protect, invisible;
  set OM0QM001.SY5PRCUN[OMASUB1] protect, invisible;
  set OM0QM001.OP3PRCOF[OMASUB1] protect, invisible;
  set OM0QM001.OM0QMPOF[OMASUB1] protect, invisible;




end // end OM0Q323

// move prices per size
Function OM0Q330()


      /* ***************************************************/
      /* * move w-s prices to map for each size*/
      /* * use data from om0qw01 accessed previously or*/
      /* *  initialized from op3rec or the verified price*/
      /* * changes.*/
      /* ****************************************************/

      /* move price to map*/


  OM0QM001.SY5PRCUN[OMASUB1] = OM0QW01.SY5PRCUN[OMASUB];

      /* move price override flag to map*/

  if (OM0QW01.OP3PRCOF[OMASUB] == "Y")
    OM0QM001.OP3PRCOF[OMASUB1] = "*";
  else
    OM0QM001.OP3PRCOF[OMASUB1] = " ";
  end


  if (OM0QW01.OM0QWPF6 == "Y") /* user asked to see and chg prices*/
    set OM0QM001.SY5PRCUN[OMASUB1] normal; /* unprotect*/
    set OM0QM001.OP3PRCOF[OMASUB1] normal; /* unprotect*/
  else
    set OM0QM001.SY5PRCUN[OMASUB1] protect; /* protect*/
    set OM0QM001.OP3PRCOF[OMASUB1] protect; /* protect*/
  end


   /* log 535 dflesh- if price per unit is gt $999.99,*/
   /* map field would show a truncated value (set dark).*/

  if (OM0QW01.SY5PRCUN[OMASUB] > 999.99) /* price per unit gt $999.99*/
    set OM0QM001.SY5PRCUN[OMASUB1] skip, invisible;
  end
end // end OM0Q330

// set attributes
Function OM0Q340()

  TA1REC.TA1LOCAT[2] = "OM0Q340 "; /* process name for diags*/


   /* ************************************************/
   /* protect certain fields based on order type,*/
    /* bulk/draw indicator, status, etc*/

   /* note - only 'op' item status allows*/
      /* xwhcd, xdscd, need date, and owner group*/
      /* changes.*/

          /* ONLY 'PR' AND 'RS' allow only need date*/
      /* changes.*/

   /* ************************************************/

    /* protect fields based on product status-*/
    /* once reserved or allocated, don't allow*/
      /* change to inventory key fields.*/


    /* protect fields if the order is transmitted Airborne*/

  if (XS0MW01.XS0MWABF == "Y") /* transmitted airborne order?*/
    set OM0QM001.OM0QPF20 skip, invisible; /* darken update pfkeys*/
    set OM0QM001.OM0QPF21 skip, invisible;
    set OM0QM001.OM0QPF24 skip, invisible;
    set OM0QM001.OM0QMCUR cursor, protect;
    OM0QS34();
    converseLib.validationFailed(788); /* updates not allowed*/
  else
    if (XOSTBL.XOSALWCH[OM0QWXOS] == "N" /* only qty changes allowed*/
     || OP1REC.XBDCD == "R")             /* or rebook bulk order*/
      OM0QS34(); /* protects entire map*/
    else /* check other conditions for attributes*/

      if (OP3REC.OP2LNIST == "OP")
         /* next sentence*/
      else
        set OM0QM001.XWHCD protect; /* whse*/
        set OM0QM001.XOWCD protect; /* owner group*/
        set OM0QM001.XDSCD protect; /* direct ship*/
        if (OP3REC.OP2LNIST == "RS"
         || OP3REC.OP2LNIST == "PR")
           /* next sentence*/
        else
          set OM0QM001.OM0QMNDT protect; /* need date*/
        end
      end
    end
  end


      /* protect fields when draw order and bulk order not found*/

  if (OP1REC.XBDCD != "0") /* bulk or draw*/
    set OM0QM001.XWHCD protect; /* protect whse*/
    if (OM0QW01.OM0QWFBK == "N") /* bulk not found for draw*/
      if (XBDTBL.XBDRWOFL[OM0QWBDS] == "Y") /* draw*/
        set OM0QM001.OM0QMNDT protect; /* need date*/
        set OM0QM001.XOWCD protect; /* owner group*/
      end
    end
    if (OM0QW01.XDSWHSEF == "N") /* whse not allowed*/
      set OM0QM001.XDSCD protect; /* protect direct ship*/
    end
    if (OP1REC.OP1NDRAW > 0) /* number of draws > 0*/
      if (XBDTBL.XBDBKOFL[OM0QWBDS] == "Y" /* bulk order*/
       && XBDTBL.XBDSETFL[OM0QWBDS] == "N") /* customer (not setaside)*/
        /* next sentence*/
      else
        set OM0QM001.OM0QMNDT protect; /* protect need date*/
      end
    end
  end

  if (OM0QW01.OM0QWPAO == "Y") /* past production deadline*/
    if (COMMAREA.CAUSERID in YOSTBL.XXXUSRID /* valid userid*/
     && YOSTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
      if (YOSTBL.YOSWHSFL[sysVar.arrayIndex] == "N") /* no whse changes allowed*/
        set OM0QM001.XWHCD protect; /* protect whse*/
      end

      if (YOSTBL.YOSNDTFL[sysVar.arrayIndex] == "N") /* no nddt changes allowed*/
        set OM0QM001.OM0QMNDT protect; /* protect need date*/
      end
    end
  end

  OM0QW01.OM0QW1PO = "N"; /* init found flag*/
  OM0QSR5(); /* read first 2 items on order*/

  if (OMCREC.OMCMAX > 98) /* no more suborders possible*/
    set OM0QM001.OM0QMNDT protect; /* protect need date*/
    set OM0QM001.XWHCD protect; /* protect whse*/
    set OM0QM001.XDSCD protect; /* protect direct ship*/
  end

  if (SYCREC.XPRCD == "22" /* custom logo*/
   && XBDTBL.XBDBKOFL[OM0QWBDS] == "N") /* not a bulk order*/
    OM0QM001.OM0QPF22 = "22:CUST LOGO";
  else
    OM0QM001.OM0QPF22 = "ENTR:CONTIN";
  end

  if (OP3REC.OP2LNIST == "XL")
    OMAREC.OMASUB1 = 1; /* map index = 1 to start*/

    while (OMASUB1 < 21)
      OM0Q323();
                                   /* clear fields not included in size run*/
      OMASUB1 = OMASUB1 + 1;
    end
  end

end // end OM0Q340

// pf key evaluation loop
Function OM0Q400()


      /* ******************************************/
      /* * converse, evaluate pf keys, edit, until*/
      /* * no more errors, then update*/
      /* ******************************************/


      /* ***********************************************/
      /* * check & process valid pf aid key request*/
      /* ***********************************************/

      /* enter - continue*/
       /* pf 1 - help - change reason codes*/
       /* pf 3 - o/m menu, skip updates*/
       /* pf 4 - master menu, skip updates*/
       /* pf 5 - product header*/
       /* pf 6 - change size price(s)*/
       /* pf 9 - product summary*/
      /* pf 12 - edit only*/
      /* pf 13 - exit product loop*/
      /* pf 18 - order comments*/
      /* pf 19 - skip updates*/
      /* pf 20 - add products*/
      /* pf 21 - add sizes*/
      /* pf 22 - CUSTOM LOGO INSTRUCTIONS*/
      /* pf 23 - ocd comment pop-up window*/
      /* pf 24 - reject/reinstate product*/


  OM0Q410(); /* converse map, init processing flags*/

  if (converseVar.eventKey is pf20
   || converseVar.eventKey is pf21)
    if (XS0MW01.XS0MWABF == "Y") /* transmitted airborne order?*/
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(788); /* updates not allowed*/
    end
  end


  if (OP1REC.XDVCD == "02" /* international*/
   && OP1REC.XOCCD == "TR") /* transmitted airborne order?*/
    if (converseVar.eventKey is pf20)
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(802); /* order class 'tr' prevents addition*/
    else /* of product*/
      if (converseVar.eventKey is pf21)
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(805); /* order class 'tr' prevents changes*/
                                  /* to product*/
      end
    end
  end


  if (converseVar.eventKey is pf22)
    if (SYCREC.XPRCD == "22"
     && XBDTBL.XBDBKOFL[OM0QWBDS] == "N") /* not a bulk*/
                                  /* this is a custom logo order*/
    else
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(008); /* invalid key*/
    end
  end


   /* SPAIN TRADEMARK CHANGES   04/02/2000*/
   /* the following code is modified to validate re-instated products*/
   /* for Spain Compliance. New statement group is*/
   /* introduced to check non-compliance product for all ship*/
   /* to country  code equal to 'Spain'/CNRY.*/

  if (converseVar.eventKey is enter /* valid pf keys in seq usually used*/
   || converseVar.eventKey is pf5   
   || converseVar.eventKey is pf9   
   || converseVar.eventKey is pf12  
   || converseVar.eventKey is pf13  
   || converseVar.eventKey is pf18  
   || converseVar.eventKey is pf20  
   || converseVar.eventKey is pf21  
   || converseVar.eventKey is pf22  
   || converseVar.eventKey is pf23)
    if (OMAERR == "N") /* no errs on bottom*/
      OM0Q420(); /* edit bottom of screen*/
      if (OMAERR == "N") /* no errs on bottom*/
        OM0Q430(); /* combo edits for bottom of screen*/
      end
      if (OMAERR == "N") /* no errs on bottom*/
        OM0Q440(); /* edit top of screen*/
      end
      if (OMAERR == "N") /* no errs on top*/
        OM0Q450(); /* combination edits of top and bottom*/
      end
    end

  else
    if (converseVar.eventKey is pf1
     || converseVar.eventKey is pf3
     || converseVar.eventKey is pf4)
      OM0Q510(); /* common flow exit*/
    else
      if (converseVar.eventKey is pf6)
        if (XOSTBL.XOSALWCH[OM0QWXOS] == "Y") /* order stat allows chgs*/
          OM0QW01.OM0QWPF6 = "Y";
          if (OM0QW01.OM0QWP21 == "Y") /* full size range*/
            OM0Q250(); /* establish prices*/
          end
          OM0Q460(); /* establish prices*/
          OM0Q464(); /* restrictions*/
          OM0QW01.OM0QWCON = "Y"; /* force converse*/
        end
      else
        if (converseVar.eventKey is pf24) /* reject/reinstate product*/
          if (OP3REC.OP2LNIST == "XL") /* line item status is cxld*/
            OM0QS-EDT-REIN-RSN(); /* validate reinstate chg rsn*/
            /* Spain project * changes * begin * 04/03/2000 *******/
            OM0QS-SPAIN-CHECK(); /* chk if shiped to spain or cnry*/
            /* Spain project * changes * begin * 04/03/2000 ******/
            if (OMAREC.OMAERR != "Y") /* no errors found*/
              OM0Q469(); /* reinstate line item to open*/
              OM0QS-CALL-OZ2090(); /* call oz2090 to update vs0scr01*/
              OM0QSX3(); /* reset line itm subscrpt for new itm*/
                                   /* status*/
              OM0QSR2(); /* reread op3rec - sizerun record*/
            end
          else
            OM0Q470(); /* choose action on 1st or 2nd pf 24*/
          end
        else
          if (converseVar.eventKey is pf19) /* refresh screen*/
            OM0QSZ6(); /* refresh screen with original data*/
            OM0QW01.OM0QWCON = "Y"; /* force converse*/
          else
            converseLib.validationFailed(008); /* invalid key pressed*/
            OMAREC.OMAERR = "Y"; /* re-show screen*/
          end
        end
      end
    end
  end

      /* ***************************************************/
      /* * check pf keys for further action on this screen*/
      /* ***************************************************/

      /* note - pf 5,9,13,18,19,20,22,24 checked above,*/
             /* the processing is the same*/
             /* as 'enter', but the flow is different*/

  if (OM0QW01.OM0QWCON == "N")
    if (OMAERR == "N")
      OMWREC.OMWSELCD[OMWLNITX] = "V"; /* mark item viewed*/
      OM0Q480(); /* further pfkey action*/
    end
  end

  if (OM0QW01.OM0QWCON == "N") /* dont converse*/
    if (OMAREC.OMAERR == "N") /* no errs left*/
      if (OP3REC.OP2LNIST != "XL" /* prod was cancelled*/
       && OP3REC.OP2LNIST != "SH") /* prod was shipped*/
        if (OM0QW01.OM0QWCHG == "Y") /* changes were made*/
          OM0Q490(); /* update database*/
        else
          OMWREC.OMWSELCD[OMWLNITX] = "V"; /* mark item viewed*/
        end
      end
    end
  end
   /* ***********************************************************/
end // end OM0Q400

// converse the map, reset flags
Function OM0Q410()


   /* *****************************************************/
   /* protect warehouse field for all International Orders*/
   /* for warehouse '15'.*/
   /* *****************************************************/

  if (OP1REC.XDVCD == "02" /* International Order*/
   && OP1REC.XWHCD == "15") /* and consol delivery warehouse*/
    set OM0QM001.XWHCD protect; /* protect the warehouse field*/
  end


   /* ***********************************************************/
   /* protect warehouse, direct ship, and owner group fields for*/
   /* international orders using order class 'international',*/
   /* 'transmitted airborne order', 'airborne sample order',*/
   /* 'updated airborne order, ready for re-transmission'.*/
   /* ***********************************************************/

  if (OP1REC.XDVCD == "02") /* International Order*/
    if (OP1REC.XOCCD == "IN" /* order class 'international'*/
     || OP1REC.XOCCD == "TR" /* transmitted airborne order*/
     || OP1REC.XOCCD == "AS" /* ready to be transmitted airb. ord*/
     || OP1REC.XOCCD == "AU") /* updtd airborne order, ready to transmt*/
      set OM0QM001.XWHCD protect; /* protect the warehouse field*/
      set OM0QM001.XDSCD protect; /* protect the direct ship field*/
      set OM0QM001.XOWCD protect; /* protect the owner group field*/
    end
  end

  if (OP1REC.XDVCD == "02" /* International Order*/
   && OP1REC.XOCCD == "TR") /* transmitted airborne order*/
    set OM0QM001.OM0QMNDT protect; /* protect the need date field*/
    OMASUB1 = 1; /* init map sub*/
    while (OMASUB1 < 21) /* while on sub*/
      if (OM0QM001.OP3ONOQT[OMASUB1] == 0)
        set OM0QM001.OP3ONOQT[OMASUB1] protect, invisible;
      else
        set OM0QM001.OP3ONOQT[OMASUB1] protect;
      end
      OMASUB1 = OMASUB1 + 1; /* INCREMENT SUB*/
    end
  end


   /* *****************************************************************/
   /* divert order processing*/
   /* protect warehouse, direct ship, and need date fields if the*/
   /* order is a divert.*/
   /* *****************************************************************/

  if (OP1REC.XDVCD == "02" /* International Order*/
   && OP1REC.XOBCD == "F1" /* futures order*/
   && OP1REC.XDSCD == "1"  /* direct ship*/
   && OP1REC.OP1CUNDT < OP1REC.ZZZSDT) /* order dt less than need dt*/
    set OM0QM001.XWHCD protect; /* protect the warehouse*/
    set OM0QM001.XDSCD protect; /* protect the direct ship*/
    set OM0QM001.OM0QMNDT protect; /* protect the need date*/
  end

   /* ***************** end divert order processing *******************/

  converseVar.segmentedMode = 1;


  converse OM0QM001 ;

      /* add second message for forcibly rejected prod*/
      /* reason for rej appears in ezemsg*/

  if (OM0QW01.OM0QWREJ == "Y")
    if (OMWREC.OMWPKCHF == "Y") /* pack change flag*/
      OM0QS02(); /* check for prepacks*/
      if (OMAREC.OMAERR == "Y") /* database busy*/
        return;
      end
      if (OMWREC.OMWPPEXF == "Y") /* prepack exist*/
        OMWREC.XOMCD = "  "; /* clear change reason*/
        COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
        COMMAREA.CAMSG = "ORDER MAINTAINED - VERIFY PREPACKS";
        COMMAREA.CACURRAP = "OS0G";
        transfer to program "OS0G" passing COMMAREA; /* go to prepacks*/
      else
        COMMAREA.CACURRAP = "OM0M";
        transfer to program "OM0M" passing COMMAREA; /* go to sub-order select menu*/
      end
    else
      COMMAREA.CACURRAP = "OM0M";
      transfer to program "OM0M" passing COMMAREA; /* go to sub-order select menu*/
    end
  end

      /* **********************************/
      /* * re-set messages and flags*/
      /* **********************************/

  OM0QM001.VAGen_EZEMSG = " "; /* clear error message*/
  OMAREC.OMAERR = "N"; /* no error flag*/
  OM0QW01.OM0QWCON = "N"; /* turn off converse flag*/

  if (OM0QW01.OM0QWSCR == 1) /* on first screen*/
    OM0QW01.OM0QWCQP = "N"; /* re-evaluate map qty*/
    OM0QW01.OM0QWQIC = "N"; /* re-evaluate qty increase*/
    OM0QW01.OM0QWQDN = "N"; /* re-evaluate qty decrease*/
    OM0QW01.OM0QWCWH = "N"; /* re-evaluate whse change*/
  end


   /* ***********************************************************/
end // end OM0Q410

// edit bottom of screen
Function OM0Q420()


      /* *********************************************************/
      /* * control all editing for bottom half fields on the map*/
      /* * the fields are edited in reverse order so that the*/
      /* * cursor and error message will appear for the first*/
      /* * field in error on the map.*/
      /* * all fields in error will be highlighted.*/
      /* *********************************************************/

      /* *******************************************/
      /* * edit prices*/
      /* *******************************************/

  if (OM0QW01.OM0QWPF6 == "Y") /* prices allowed to change*/
    if (OM0QM001.OM0QMPAD != 0) /* price adjust made*/
      if (OM0QM001.OM0QMPAL != OM0QW01.OM0QWPAZ) /* price for all sizes*/
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(185); /* cant have new price and adjust.*/
        set OM0QM001.OM0QMPAD bold;
        set OM0QM001.OM0QMPAL cursor, bold;
      else /* only price adjustment changed*/
        OM0Q421(); /* edit price adjustment*/
      end
    else /* price adjustment not changed*/
      if (OM0QM001.OM0QMPAL != OM0QW01.OM0QWPAZ) /* price for all sizes chged*/
        OM0Q422(); /* edit price for all sizes*/
      end
    end
  end

      /* *******************************************/
      /* * edit direct ship*/
      /* *******************************************/

  OM0QW01.OM0QW-CRED-CHK-DIR-SHP = "N"; /* set flag on*/

  if (OM0QM001.XDSCD != OP1REC.XDSCD) /* direct ship changed*/
    OM0Q423(); /* edit direct ship*/
    OM0QW01.OM0QW-CRED-CHK-DIR-SHP = "Y"; /* set flag on*/
    if (OP1REC.XDSCD == "1") /* was a factory direct ship*/
      OM0QW01.OM0QW-CRED-REASON-CD = 7;
    else
      if (OM0QM001.XDSCD == "1") /* now a factory direct ship*/
        OM0QW01.OM0QW-CRED-REASON-CD = 8;
      end
    end
  end

      /* *******************************************/
      /* * edit need date*/
      /* *******************************************/

  OSAREC.OSADATE = OM0QM001.OM0QMNDT;
                                   /* move date from map to convert*/
  XPOP100(); /* convert date*/

  if (OSAREC.OSANUMFL == "Y") /* numeric date*/
    if (OM0QW01.OP1CUNDT != OSAREC.OSANU8) /* date was changed*/
      OM0Q424(); /* edit need date*/
    end
  else
    OMAREC.OMAERR = "Y"; /* set error on*/
    converseLib.validationFailed(013); /* invalid date*/
    set OM0QM001.OM0QMNDT cursor, bold;
  end


      /* *******************************************/
      /* * edit whse*/
      /* *******************************************/
  if (OM0QM001.XWHCD != OP1REC.XWHCD) /* warehouse changed*/
    OM0Q425(); /* edit whse*/
  end

      /* *******************************************/
      /* * edit owner group*/
      /* *******************************************/
  if (OM0QM001.XOWCD == " ") /* map owner space*/
    OM0QW01.XOWCD = "00";
  else
    OM0QW01.XOWCD = OM0QM001.XOWCD; /* show on w-s*/
  end

  if (OM0QW01.XOWCD != OP3REC.XOWCD /* owner group changed*/
   || OM0QW01.OM0QWCWH == "Y")      /* whse changed*/
    if (OM0QM001.XWHCD == " ") /* whse changed to blank*/
      OM0QW01.XOWCD = "00"; /* whse needs no owner*/
      OM0QM001.XOWCD = " ";
      OM0QM001.XOWABRV = " ";
    else
      OM0Q426(); /* edit owner group*/
    end
  end

      /* *******************************************/
      /* * edit 'more sizes' flag*/
      /* *******************************************/

  if (OM0QM001.OM0QWMOR != " ") /* more flag is displayed*/
    if (OM0QM001.OM0QWMOR != OM0QW01.OM0QWMOR) /* if 'more sizes' changed*/
      OM0Q427(); /* edit om0qwmor flag*/
    end
  end


end // end OM0Q420

// edit price adjustment
Function OM0Q421()


      /* *********************************************************/
      /* * edit price adjustment*/
      /* * may be positive or negative and if passes edits,*/
      /* * it will be applied to each size price*/
      /* *********************************************************/


  OM0QW01.OM0QWPRN = OM0QW01.OP2AUPRC + OM0QM001.OM0QMPAD; /* adjust*/

  if (OM0QW01.OM0QWPRN > 999.99) /* check limit for price adj.*/
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(428); /* warning - price outside range*/
    set OM0QM001.OM0QMPAD cursor, bold;
  else
    OM0QW01.OM0QWFLG = "N"; /* init found flag*/
    OM0Q42A(); /* check price boundaries*/
    if (OM0QW01.OM0QWFLG == "N")
      OM0Q42C(); /* check sizes for negative adjustment*/
    end
  end

  if (OMAREC.OMAERR == "N") /* can check this flag because first*/
                                   /* edit*/
    OM0Q42D(); /* apply adjustments to sizes*/
  end


end // end OM0Q421

// edit price for all sizes
Function OM0Q422()


  OM0QW01.OM0QWPRO = OM0QW01.OP2AUPRC; /* original priceall sizes*/
  OM0QW01.OM0QWPRN = OM0QM001.OM0QMPAL; /* new price*/

  if (OM0QW01.OM0QWPRN <= 0) /* new price le 0 invalid*/
    if (OM0QW01.OM0QWPRN == 0 /* if new price is zero*/
     && SYCREC.SY1FNSHG == "2") /* and prod is raw materials*/
      if (KUCREC.XAUCD == "64" /* class is salesman samples*/
       || KUCREC.XAUCD == "82") /* or rep samples*/
          /* next sentence - price = 0 ok*/
      else
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(189); /* price can not be < or = zero*/
        set OM0QM001.OM0QMPAL cursor, bold;
        return;
      end
    else
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(189); /* price can not be < or = zero*/
      set OM0QM001.OM0QMPAL cursor, bold;
      return;
    end
  end

  OM0QW01.OM0QWFLG = "N"; /* no error*/

      /* note - om0qwpas = n, never checked*/
             /* om0qwpas = y, warning given once, dont repeat,*/
                           /* apply any change*/
  if (OM0QW01.OM0QWPAS == "N") /* edit only once*/
    OM0QSE4(); /* edit price variance*/
  end

  if (OM0QW01.OM0QWFLG == "Y") /* edit once err found*/
    OM0QW01.OM0QWPAS = "Y"; /* give warning*/
    converseLib.validationFailed(169); /* warning - price outside range*/
    set OM0QM001.OM0QMPAL cursor, bold;
  else
    OM0Q42E(); /* apply price to all sizes*/
  end

end // end OM0Q422

// edit direct ship
Function OM0Q423()



   /* edit direct ship*/

  if (XOTTBL.XOTADIRS[OM0QWOTS] == "N")
    if (OM0QM001.XDSCD == "1"
     || OM0QM001.XDSCD == "3")
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(075); /* d/s not valid for order type*/
      set OM0QM001.XDSCD cursor, bold;
      return;
    end
  end

  OM0QSXA(); /* check for valid direct ship*/


end // end OM0Q423

// edit need date
Function OM0Q424()


      /* *******************************************/
      /* * edit need date*/
      /* *******************************************/


   /* ---------------------------------------------------*/
   /* *  Validate date using ta0040.                    **/
   /* ---------------------------------------------------*/

  set TA2REC empty;
  TA2REC.TA2GRGB = OSAREC.OSACH8;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "B";

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0) /* valid date*/
    OM0Q42G(); /* edit need date further*/
  else
    OMAREC.OMAERR = "Y"; /* set error on*/
    converseLib.validationFailed(013); /* invalid date*/
    set OM0QM001.OM0QMNDT cursor, bold;
  end


end // end OM0Q424

// edit warehouse
Function OM0Q425()


      /* *******************************************/
      /* * edit warehouse*/
      /* *******************************************/

      /* ******************************************/
      /* * allow blank whse for special direct ship*/
      /* ******************************************/

  if (OM0QM001.XWHCD == " ") /* if whse is blank*/
    OM0QM001.XWHSABRV = " "; /* no whse name*/
    OM0QW01.OM0QWCHG = "Y"; /* flag prod as changed*/
    OM0QW01.OM0QWCWH = "Y"; /* flag whse as changed*/
    OM0QW01.OM0QWHS = OM0QM001.XWHCD; /* hold chg for avail chk*/
    set OM0QM001.XWHCD initialAttributes;
    set OM0QM001.XWHSABRV initialAttributes;
  else
    OM0Q42H(); /* validate xwhcd from table, with gpc*/
    if (OM0QW01.OM0QWFLG == "N") /* no match found*/
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(78); /* whse is not valid*/
      set OM0QM001.XWHCD cursor, bold;
    else

     /* make sure that a international order cannot be changed*/
     /* to use warehouse code = '15'.*/

      if (OP1REC.XDVCD == "02") /* International Order*/
        if (OP1REC.XWHCD != "15" /* orig. order not for whse 15*/
         && OM0QM001.XWHCD == "15") /* but changed to use whse 15*/
          OMAREC.OMAERR = "Y";
          converseLib.validationFailed(783); /* can't change whse code to*/
                                  /* 15 for this order*/
          set OM0QM001.XWHCD cursor, modified, bold;
          return;
        end
      end

      if (OM0QW01.XDVCD == "03") /* for promo div,skip 1 model test*/
        /* next sentence*/
      else
        OM0Q42I(); /* check 1 whs model*/
        if (OM0QW01.OM0QWFLG == "Y") /* must match map whs else error*/
          OMAREC.OMAERR = "Y";
          converseLib.validationFailed(163); /* whs not allowed for style*/
          set OM0QM001.XWHCD cursor, bold;
          return;
        end
      end
          /* * got here, so warehouse o.k.*/
      OM0QW01.OM0QWCHG = "Y"; /* flag prod as changed*/
      OM0QW01.OM0QWCWH = "Y"; /* flag whse as changed*/
      OM0QW01.OM0QWHS = OM0QM001.XWHCD; /* hold chg for avail chk*/
      set OM0QM001.XWHCD initialAttributes;
      set OM0QM001.XWHSABRV initialAttributes;
    end
  end


end // end OM0Q425

// edit owner group xowcd
Function OM0Q426()


      /* *******************************************/
      /* * edit owner group (xowcd)*/
      /* *******************************************/


      /* edit owner group code, with warehouse*/
      /* and with service rep id*/


      /* * if warehouse requires owner group code*/

  if (OM0QM001.XWHCD in XWHTBL.XWHCD) /* find whse*/
    if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y") /* if whse needs owner*/
      if (OM0QM001.XOWCD == " ")
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(103); /* owner group required*/
        set OM0QM001.XOWCD cursor, modified, bold;
      else
        OM0Q42K(); /* xowcd lookup, xoltbl combo*/
      end
    else
      OM0QW01.XOWCD = "00"; /* whse needs no owner*/
      OM0QM001.XOWCD = " ";
      OM0QM001.XOWABRV = " ";
    end
  else
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(78); /* invalid whse*/
    set OM0QM001.XWHCD cursor, bold;
  end


end // end OM0Q426

// edit 'more sizes'
Function OM0Q427()


         /* ***********************************/
         /* *   edit more sizes*/
         /* ***********************************/

  if (OM0QM001.OM0QWMOR == "N") /* only 'n' is valid*/
    OM0QW01.OM0QWMOR = OM0QM001.OM0QWMOR;
  else
    if (OM0QM001.OM0QWMOR == "Y" /* y is valid on screen 1*/
     && OM0QW01.OM0QWSCR == 1)  
      OM0QW01.OM0QWMOR = OM0QM001.OM0QWMOR;
    else
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(165); /* else message-correct response*/
      set OM0QM001.OM0QWMOR cursor, bold;
    end
  end



end // end OM0Q427

// check price boundaries
Function OM0Q42A()


      /* *********************************************************/
     /* * check price boundaries based on om0qwpct figured before*/
      /* *********************************************************/

  OM0QW01.OM0QWPRO = OM0QW01.OP2AUPRC; /* original price*/

  if (OM0QW01.OM0QWPRN <= 0) /* new price le 0 invalid*/
    if (OM0QW01.OM0QWPRN == 0 /* if new price is zero*/
     && SYCREC.SY1FNSHG == "2") /* and prod is raw materials*/
      if (KUCREC.XAUCD == "64" /* class is salesman samples*/
       || KUCREC.XAUCD == "82") /* or rep samples*/
          /* next sentence - price = 0 ok*/
      else
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(189); /* price can not be < or = zero*/
        set OM0QM001.OM0QMPAD cursor, bold;
        return;
      end
    else
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(189); /* price can not be < or = zero*/
      set OM0QM001.OM0QMPAD cursor, bold;
      return;
    end
  end

      /* note - om0qwpaj = n, never changed*/
             /* om0qwpaj = y, warning given once, don't repeat,*/
                           /* apply change*/

      /* note - use average unit price*/
  if (OM0QW01.OM0QWPAJ == "N") /* do once flag*/
    OM0QSE4(); /* edit price variance*/
  end

  if (OM0QW01.OM0QWFLG == "Y") /* edit once err found*/
    OM0QW01.OM0QWPAJ = "Y"; /* give warning*/
    converseLib.validationFailed(169); /* warning - price outside range*/
    set OM0QM001.OM0QMPAD cursor, bold;
  end


end // end OM0Q42A

// check price negative
Function OM0Q42C()


      /* *********************************************************/
      /* * check all sizes to see if any become negative*/
      /* *********************************************************/


      /* be sure price adjustment does not make price < 0*/

  if (OM0QM001.OM0QMPAD < 0) /* if adjust negative*/
    OM0QW01.OM0QWPRN = OM0QM001.OM0QMPAD; /* make adjust positive*/
    OM0QW01.OM0QWPRN = OM0QW01.OM0QWPRN * -1;
    OMASUB = OM0QW01.OM0QWSZF;
    while (OMASUB < 41                /* if positive adjust gt price*/
     && OMASUB <= OM0QW01.OM0QWSZL /* last active size*/
     && OMAREC.OMAERR == "N") /* stop on first negative found*/
      if (OP3REC.OP3SZAFL[OMASUB] == "Y")
        if (OP3REC.OP3ONOQT[OMASUB] > 0 /* ordered qty*/
         || OM0QW01.OM0QWP21 == "Y")    /* full range requested*/
          if (OM0QW01.OM0QWPRN >= OM0QW01.SY5PRCUN[OMASUB])
            if (OM0QW01.OM0QWPRN == OM0QW01.SY5PRCUN[OMASUB] /* price = 0*/
             && SYCREC.SY1FNSHG == "2")                      /* prod is raw materials*/
              if (KUCREC.XAUCD == "64" /* class is salesman samples*/
               || KUCREC.XAUCD == "82") /* or rep samples*/
                  /* next sentence - price = 0 ok*/
              else
                OMAREC.OMAERR = "Y";
                converseLib.validationFailed(189); /* adjust makes price <= 0*/
                set OM0QM001.OM0QMPAD cursor, bold;
              end
            else
              OMAREC.OMAERR = "Y";
              converseLib.validationFailed(189); /* adjust makes price <= 0*/
              set OM0QM001.OM0QMPAD cursor, bold;
            end
          end
        end
      end
      OMASUB = OMASUB + 1;
    end
  end


end // end OM0Q42C

// apply price adjustments
Function OM0Q42D()


      /* *********************************************************/
      /* * no errors, price adjustment*/
      /* * will be applied to each size price*/
      /* * then display new price on map*/
      /* *********************************************************/

       /* add price adjustment to each size price*/

  OMAREC.OMASUB1 = 1; /* map sub*/

  OMASUB = OM0QW01.OM0QWSZF; /* from first possible size*/

  while (OMASUB < 41 /* add price adjust to all sizes*/
   && OMASUB <= OM0QWSZL) /* that are in product*/
    if (OP3REC.OP3SZAFL[OMASUB] == "Y") /* and are active*/
      if (OP3REC.OP3ONOQT[OMASUB] > 0 /* ordered size*/
       || OM0QW01.OM0QWP21 == "Y")    /* full range requested*/
        OM0QW01.SY5PRCUN[OMASUB] = OM0QW01.SY5PRCUN[OMASUB] + OM0QM001.OM0QMPAD;
        OM0QW01.OP3PRCOF[OMASUB] = "Y";
        if (OMAREC.OMASUB1 < 21 /* map only 20 buckets*/
         && OMAREC.OMASUB1 <= OM0QWSZL)
          OM0QM001.SY5PRCUN[OMASUB1] = OM0QW01.SY5PRCUN[OMASUB];
          OMASUB1 = OMASUB1 + 1;
        end
      end
    end
    OMASUB = OMASUB + 1;
  end


       /* add adjustment to price for all sizes*/

  if (OM0QM001.OM0QMPAL != 0)
    OM0QM001.OM0QMPAL = OM0QM001.OM0QMPAL + OM0QM001.OM0QMPAD;
  end


       /* add adjustment to average price*/

  OM0QW01.OP2AUPRC = OM0QW01.OP2AUPRC + OM0QM001.OM0QMPAD;

         /* initialize flags*/

  OM0QW01.OM0QWCHG = "Y"; /* flag as changed*/
  OM0QW01.OM0QWAUT = "Y"; /* require authorization*/
  OM0QW01.OP2PRCOF = "Y"; /* prod override flag*/
  OM0QW01.OP2GBLOF = "N"; /* global maint flag*/
  OM0QM001.OM0QMPAD = 0; /* clear field*/
  set OM0QM001.OM0QMPAD normal;


end // end OM0Q42D

// apply price for all szs
Function OM0Q42E()

      /* good price for all sizes*/
      /* move new prices to map*/

  OMAREC.OMASUB1 = 1; /* map sub*/

  OMASUB = OM0QW01.OM0QWSZF; /* from first possible size*/

  while (OMASUB < 41 /* move price to all sizes*/
   && OMASUB <= OM0QWSZL) /* until end of product sizes*/
    if (OP3REC.OP3SZAFL[OMASUB] == "Y") /* for all active sizes*/
      if (OP3REC.OP3ONOQT[OMASUB] > 0 /* ordered size*/
       || OM0QW01.OM0QWP21 == "Y")    /* full range requested*/
        OM0QW01.SY5PRCUN[OMASUB] = OM0QM001.OM0QMPAL;
        OM0QW01.OP3PRCOF[OMASUB] = "Y";
        if (OMASUB1 < 21 /* only 20 sizes per screen*/
         && OMASUB1 <= OM0QWSZL) /* last size*/
          OM0QM001.SY5PRCUN[OMASUB1] = OM0QW01.SY5PRCUN[OMASUB];

                 /* log 535 dflesh if price is > 999.99, price per unit*/
                 /* field would show truncated value if not set dark.*/

          if (OM0QW01.SY5PRCUN[OMASUB] > 999.99)
            set OM0QM001.SY5PRCUN[OMASUB1] protect, invisible;
          end
          OMASUB1 = OMASUB1 + 1;
        end
      end
    end
    OMASUB = OMASUB + 1;
  end

  OM0QW01.OP2AUPRC = OM0QM001.OM0QMPAL; /* hold new ave price*/


  OM0QW01.OM0QWCHG = "Y"; /* flag as changed*/
  OM0QW01.OM0QWAUT = "Y"; /* require authorization*/
  OM0QW01.OP2PRCOF = "Y"; /* prod override flag*/
  OM0QW01.OP2GBLOF = "N"; /* global maint flag*/
  set OM0QM001.OM0QMPAL normal;


end // end OM0Q42E

// edit need date
Function OM0Q42G()


      /* *******************************************/
      /* * edit need date*/
      /* *******************************************/

  if (OSAREC.OSANU8 < OP1REC.OP1CUNDT) /* new date < original*/
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(204); /* need date cannot be moved closer*/
    set OM0QM001.OM0QMNDT cursor, bold;
    return; /* dont edit further*/
  end


    /* if apparel, check if need date is within season date*/
    /* boundaries.*/
    /* else checks if need date was changed more than*/
    /* one day.  This algorithm also finds if an attempt*/
    /* was made to push the need date past the end of the*/
    /* month.*/

  if (OP1REC.XGPCD == "03") /* if apparel*/
    if (XOTTBL.XOTFUTRF[OM0QWOTS] == "Y" /* if a future*/
     || XOTTBL.XOTPROPF[OM0QWOTS] == "Y") /* if a future*/
      OM0Q42M(); /* edit pushed need dt within season*/
    else
      OM0QS42(); /* edit pushed need dt by 1 day*/
    end
  else
    OM0QS42(); /* edit pushed need dt by 1 day*/
  end

  if (OMAREC.OMAERR == "Y")
    return; /* don't go any further*/
  end

  if (OP1REC.OP1DSADT > 0 /* dont ship after date was entered*/
   && OSAREC.OSANU8 > OP1REC.OP1DSADT) /* need date > dont ship after*/
    converseLib.validationFailed(293); /* need date must be between bulk*/
    OMAREC.OMAERR = "Y"; /* need date and dont ship after date*/
    set OM0QM001.OM0QMNDT cursor, bold;
  else


    if (XOTTBL.XOTFUTRF[OM0QWOTS] == "Y")
      OM0QW01.OP1CUNDT = OSAREC.OSANU8; /* format for srf*/
      OM0QSRF(); /* read prod deadline for new date*/
    end

    if (OMAREC.OMAERR == "Y")
      OM0QW01.OP1CUNDT = OP1REC.OP1CUNDT; /* restore original*/
      set OM0QM001.OM0QMNDT cursor, bold;
    else
       /* all edits done, nothing wrong*/
      OM0QW01.OP1CUNDT = OSAREC.OSANU8; /* hold cymd format*/
      OM0QW01.OM0QWHDT = OSAREC.OSANU8; /* hold chg for avail chk*/
      OM0QW01.OM0QWMDT = OSAREC.OSANU8; /* hold chg for scrnd prods*/
      OM0QW01.OM0QWCHG = "Y"; /* change successful*/
      OM0QW01.OM0QWCND = "Y"; /* change successful*/
      OM0QW01.OM0QWLDF = "N"; /* reset late draw flag*/
      set OM0QM001.OM0QMNDT initialAttributes;
      OM0QS66-ADJ-BK-MO(); /* Adjust the booking month for the new need dt*/
    end
  end


end // end OM0Q42G

// validate whse with gpc
Function OM0Q42H()


      /* ***************************************************/
      /* * validate warehouse code, and any prod restrictions*/
      /* **/
      /* *    logic - find first whse that matches using*/
      /* *      'IN' on the table.*/
      /* *           then check gpc for match.*/
      /* *       if a match is not found, walk through the*/
      /* *         next table entries by hand (adding 1 to*/
      /* *         ezetst when no match).*/
      /* **/
      /* *       this type of search routine is used when*/
      /* *       several table entries match the initial key*/
      /* *       (whse in this case)*/
      /* **/
      /* ***************************************************/

  OM0QW01.OM0QWFLG = "N"; /* init found flag*/
  sysVar.arrayIndex = 1; /* init ezetst for search*/
  OM0QW01.XDVCD = " "; /* init division to ' '*/

  if (OP1REC.ZFC-CRCY-CD == " ") /* added-canada 7/95*/
    OP1REC.ZFC-CRCY-CD = "USD"; /* set currency code*/
  end

  while (XWHTBL.XWHCD[sysVar.arrayIndex] != "99" /* end of table = 99*/
   && OM0QW01.OM0QWFLG == "N")
    if (OM0QM001.XWHCD in XWHTBL.XWHCD from sysVar.arrayIndex)
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* validate whs*/
        if (XWHTBL.ZFC-CRCY-CD[sysVar.arrayIndex] == 
        OP1REC.ZFC-CRCY-CD) /* canada 7/95*/
          OM0Q42J(); /* validate general prod class*/
          if (OM0QW01.OM0QWFLG == "Y")
            OM0QM001.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
                                   /* descr to map*/
            OM0QW01.XDVCD = XWHTBL.XDVCD1[sysVar.arrayIndex]; /* division*/
          end
        end
      end
    else
      return; /* end loop, no whse match was good*/
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

end // end OM0Q42H

// check whse restriction
Function OM0Q42I()


      /* ***************************************************/
      /* * if the whse on the map matches whse on table*/
      /* *  that whse is retricted*/
      /* ***************************************************/


  OMASUB = 1; /* check 1 or 2 whs model*/
  OM0QW01.OM0QWFLG = "N"; /* init not found*/

  while (OMASUB < 7) /* check 6 whs on product*/
    if (SYCREC.XWHCD[OMASUB] != " ")
      if (OM0QM001.XWHCD == SYCREC.XWHCD[OMASUB]) /* restricted whse matches*/
        OM0QW01.OM0QWFLG = "N"; /* no restriction*/
        OMASUB = OMASUB + 6; /* force out of loop*/
      else
        OM0QW01.OM0QWFLG = "Y"; /* found restriction*/
      end
    end
    OMASUB = OMASUB + 1;
  end


end // end OM0Q42I

// validate  gpc
Function OM0Q42J()


      /* ***************************************************/
      /* * validate general product class*/
      /* ***************************************************/


      /* customer/order gpc must match 1 gpc on warehouse table*/


  if (OP1REC.XGPCD == XWHTBL.XGPCD1[sysVar.arrayIndex]) /* match gpc*/
    OM0QW01.OM0QWFLG = "Y";
  else

    if (OP1REC.XGPCD == XWHTBL.XGPCD2[sysVar.arrayIndex]) /* match gpc*/
      OM0QW01.OM0QWFLG = "Y";
    else

      if (OP1REC.XGPCD == XWHTBL.XGPCD3[sysVar.arrayIndex]) /* match gpc*/
        OM0QW01.OM0QWFLG = "Y";
      else

        if (OP1REC.XGPCD == XWHTBL.XGPCD4[sysVar.arrayIndex]) /* match gpc*/
          OM0QW01.OM0QWFLG = "Y";
        else

          if (OP1REC.XGPCD == XWHTBL.XGPCD5[sysVar.arrayIndex]) /* match gpc*/
            OM0QW01.OM0QWFLG = "Y";
          else

            if (OP1REC.XGPCD == XWHTBL.XGPCD6[sysVar.arrayIndex]) /* match gpc*/
              OM0QW01.OM0QWFLG = "Y";
            else

              if (OP1REC.XGPCD == XWHTBL.XGPCD7[sysVar.arrayIndex]) /* match gpc*/
                OM0QW01.OM0QWFLG = "Y";
              end
            end
          end
        end
      end
    end
  end




end // end OM0Q42J

// xowcd lookup, match xoltbl
Function OM0Q42K()


      /* *******************************************/
      /* *  owner group lookup, match xoltbl*/
      /* *******************************************/

    /* look owner code up in xowtbl.*/

  XOWREC.XWHCD = OM0QM001.XWHCD;
  XOWREC.XOWCD = OM0QM001.XOWCD;

  if (XOWREC.XOWKEY in XOWTBL.XOWKEY /* if in table*/
   && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    OM0QM001.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];

         /* check for the universal owner group code --*/
         /* any service rep is accepted if this owner group*/
         /* code was entered*/

    if (XOWTBL.XOWALUSR[sysVar.arrayIndex] == "Y") /* this is it*/
      OM0QW01.OM0QWCHG = "Y"; /* chg on prod successful*/
      OM0QW01.XOWCD = OM0QM001.XOWCD; /* move to hold*/
      set OM0QM001.XOWCD initialAttributes;
    else
      OM0Q42L(); /* match whse, xowcd in xoltbl*/
    end

  else
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(101); /* owner group code not found on table*/
    set OM0QM001.XOWCD cursor, bold;
  end


end // end OM0Q42K

// match whse,xowcd on xoltbl
Function OM0Q42L()


      /* *******************************************/
      /* *  match whse and xowcd on xoltbl*/
      /* *******************************************/


    /* if promo warehouse and team sales owner code,*/
    /* allow anyone to order, no svc.rep restriction*/

  if (OM0QM001.XWHCD == "09")
    if (OM0QM001.XOWCD == "45"
     || OM0QM001.XOWCD == "55"
     || OM0QM001.XOWCD == "65"
     || OM0QM001.XOWCD == "75")
      OM0QW01.OM0QWCHG = "Y";
      set OM0QM001.XOWCD initialAttributes;
      OM0QW01.XOWCD = OM0QM001.XOWCD; /* move to hold*/
      return;
    end
  end


    /* match owner code to userid and warehouse*/

  OM0QSX9(); /* lookup whse, xsvcd in xoltbl*/

  if (OM0QW01.OM0QWFLG == "N")
    converseLib.validationFailed(102);
                                   /* owner code no match to whs and userid*/
    OMAREC.OMAERR = "Y";
    set OM0QM001.XOWCD cursor, bold;
  else
    OM0QSM3(); /* try to match xowcd with xoltbl xowcd*/
    if (OM0QW01.OM0QWFLG == "N")
      converseLib.validationFailed(102); /* owner group not allowable*/
      OMAREC.OMAERR = "Y";
      set OM0QM001.XOWCD cursor, bold;
    else
      OM0QW01.OM0QWCHG = "Y"; /* change on prod successful*/
      set OM0QM001.XOWCD initialAttributes;
      OM0QW01.XOWCD = OM0QM001.XOWCD; /* move to hold*/
    end
  end


end // end OM0Q42L

// pushed ndt w/in sesn for aprl?
Function OM0Q42M()
      /* *********************************************************/
      /* * edit need date against season date range             **/
      /* *********************************************************/

  if (OM0QW01.OPNSBD == 0 /* if xsntbl dates have not been read*/
   && OM0QW01.OPNSED == 0)
    OM0QW01.OM0QWNDT = OSAREC.OSANU8; /* save new need date*/
    OSAREC.OSANU8 = OP1REC.OP1CUNDT; /* use old need date to*/
    if (OP1REC.XDVCD == "02")
      OM0QS-INTL-SESN(); /* get int'l booking season dates*/
    else
      OM0QSX4(); /* get domestic booking season dates*/
    end
    OSAREC.OSANU8 = OM0QW01.OM0QWNDT; /* restore new need date*/
  end

  if (OSAREC.OSANU8 >= OM0QW01.OPNSBD /* new need dt >= sesn beg dt*/
   && OSAREC.OSANU8 <= OM0QW01.OPNSED) /* new need dt <= sesn end dt*/
     /* next sentence*/
  else
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(520); /* pushed ndt must stay w/in season boundaries*/
    set OM0QM001.OM0QMNDT cursor, bold;
    return;
  end


      /* *********************************************************/
      /* * edit need date against the sales program delivery date*/
      /* *********************************************************/

  if (OP1REC.SP1ID > " ")
    OM0QSRO(); /* read sales pgm order type rec*/
    if (OSAREC.OSANU8 < SP2REC.SP2DLBDT
     || OSAREC.OSANU8 > SP2REC.SP2DLXDT)
      converseLib.validationFailed(027); /* need date not valid del date for sls pgm*/
      OMAREC.OMAERR = "Y"; /* set error flag*/
      set OM0QM001.OM0QMNDT cursor, bold;
    end
  end


end // end OM0Q42M

// combo bottom, check avail?
Function OM0Q430()


      /* ******************************************/
      /* * edit whse required flag*/
      /* ******************************************/

  if (OM0QW01.XDSWHSEF == "Y")
    if (OM0QM001.XWHCD == " ") /* whse is blank*/
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(098); /* msg-whs is required*/
      set OM0QM001.XWHCD cursor, bold;
    end
  else /* whse is not required for direct ship*/
    if (OM0QM001.XWHCD != " ") /* whse is not blank*/
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(336);
                                   /* move ' ' to whse for this direct ship*/
      set OM0QM001.XWHCD cursor, bold;
    end
  end

          /* if whse, dir ship or owner grp were changed*/
        /* then changed back to original, get abbreviations*/

  if (OP1REC.XWHCD == OM0QM001.XWHCD
   && OM0QW01.OM0QWHS != OM0QM001.XWHCD) /* map changed back to orig*/
    OM0QSM1(); /* get abbrv from op1rec*/
  end

  if (OP1REC.XDSCD == OM0QM001.XDSCD)
    OM0QSM4(); /* get abbrv from op1rec*/
  end

  if (OP3REC.XOWCD == OM0QW01.XOWCD)
    OM0QSM2(); /* get abbrv from op3rec*/
  end

         /* now check if availability must be checked again*/
         /* in the event of a whse, or need date change*/

         /* use om0qwhdt as a holding area in case the nd dt*/
         /* was changed once then changed back to original*/

         /* use om0qwhs as a holding area in case the whse*/
         /* was changed once then changed back to original*/

  if (OM0QW01.OM0QWHDT != OP1REC.OP1CUNDT /* need date changed*/
   || OM0QW01.OM0QWCWH == "Y"             /* whse changed*/
   || OM0QW01.OM0QWHS != OM0QM001.XWHCD)  /* whse changed back to orig*/
    OM0QW01.OM0QWHDT = OP1REC.OP1CUNDT; /* hold current dt*/
    OM0QW01.OM0QWHS = OM0QM001.XWHCD; /* hold current whs*/
    if (XBDTBL.XBDSETFL[OM0QWBDS] == "N") /* no setasides*/
      if (XBDTBL.XBDRWOFL[OM0QWBDS] == "N") /* draws dont have availability*/
        if (OP1REC.XBDCD != "B") /* don't display avail for blank bulks*/
          OM0Q221(); /* get availability*/
          if (OM0QW01.OM0QWCAL == "Y") /* availability call was made*/
            OM0QS31(); /* move availability*/
          end
        end
      end
    end
  end


end // end OM0Q430

// edit top of screen
Function OM0Q440()


      /* *********************************************************/
      /* * control all editing for top half fields on the map*/
      /* *********************************************************/

  OM0QW-QTY-CHGD-FL = "N"; /* init qty chnaged flag*/

  OMAREC.OMASUB1 = 1; /* start at map column 1*/

  if (OM0QW01.OM0QWSCR == 1) /* start at record*/
    OMASUB = OM0QW01.OM0QWSZF; /* first chosen size*/
  else
    OMASUB = OM0QW01.OM0QWSB2; /* or screen 2, starting point*/
  end


      /* ****************************************************/
      /* * edit size price & quantity, move to om0qw01 if ok*/
      /* ****************************************************/

  while (OMASUB1 < 21 /* for each map size*/
   && OMASUB < 41  /* that is in size range*/
   && OMASUB <= OM0QW01.OM0QWSZL)
    if (OP3REC.OP3SZAFL[OMASUB] == "Y") /* with active flag*/
      if (OP3REC.OP3ONOQT[OMASUB] > 0 /* ordered qty*/
       || OM0QW01.OM0QWP21 == "Y")    /* full range requested*/
        if (OM0QW01.OM0QWPF6 == "Y") /* prices requested*/
          if (OM0QM001.OP3PRCOF[OMASUB1] != " ") /* field not = blank*/
            OM0Q441(); /* edit price revert*/
          end
          if (OM0QM001.SY5PRCUN[OMASUB1] != OM0QW01.SY5PRCUN[OMASUB])
            OM0Q442(); /* edit price change per size*/
          end
        end

        if (OM0QM001.OP3ONOQT[OMASUB1] == OP3REC.OP3ONOQT[OMASUB])
          OM0QW01.OM0QWCQT[OMASUB] = 0; /* zeroes previous chgs*/
        else
          OM0QW-QTY-CHGD-FL = "Y"; /* qty has been changed*/
          OM0Q443(); /* quantity edit*/
        end

        if (OM0QW01.OM0QWCWH == "Y" /* good whse chg*/
         && OBIREC.OBIRTNCD != 1)   /* and display avail.*/
          OM0Q44C(); /* enough available to order?*/
        end

        OMASUB1 = OMASUB1 + 1; /* map subscript*/
      end
    end
    OMASUB = OMASUB + 1; /* record subscript*/
  end

   /* since the on order qtys have been touched and we can't trust the*/
   /* users to always adjust the prepacks, we need to delete the*/
   /* prepack record and recreate them according to the new on ord qtys*/
   /* but first we need to make sure that the new on order qtys entered*/
   /* obey the msr rules*/
   /* do msr checking only if qty has been changed*/
  if (OM0QW-QTY-CHGD-FL == "Y")
    if (OP1REC.XPACD == "MS" || 
    OP1REC.XPACD == "CU")
      if (OP1REC.XGPCD == "02") /* for footwear*/
        OM0QS-EDIT-PREPKS(); /* edit prepacks calculated*/
        if (OMAREC.OMAERR == "N") /* no error from prepack edit*/
          OM0QS-CHK-PREPKS(); /* delete prepacks*/
          OM0QS-VAL-PREPKS(); /* create prepacks*/
        end
      end
    end
  end


end // end OM0Q440

// edit price revert
Function OM0Q441()


      /* *********************************************************/
      /* * edit price revert to default price*/
      /* *********************************************************/


  if (OM0QM001.OP3PRCOF[OMASUB1] == "/")

    OM0Q44B(); /* move default price by size (prod or sales pgm)*/

    OM0QM001.SY5PRCUN[OMASUB1] = OM0QW01.SY5PRCUN[OMASUB];
    OM0QW01.OM0QWCHG = "Y"; /* flag prod as changed*/
    OM0QW01.OM0QWAUT = "Y"; /* require authorization*/
    OM0QW01.OP3PRCOF[OMASUB] = "N"; /* turn off override flag*/
    OM0QW01.OP2GBLOF = "N"; /* global override flag*/
    set OM0QM001.OP3PRCOF[OMASUB1] normal;
  else
    if (OM0QM001.OP3PRCOF[OMASUB1] == "*") /* price overridden before*/
      /* next sentence*/
    else /* must be * or / to be valid*/
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(379); /* price revert code is '/'*/
      set OM0QM001.OP3PRCOF[OMASUB1] cursor, bold;
    end
  end



end // end OM0Q441

// edit price override by size
Function OM0Q442()


      /* *****************************************/
      /* *  edit price per size*/
      /* *****************************************/

  OM0QW01.OM0QWPRO = OP3REC.SY5PRCUN[OMASUB]; /* original price*/
  OM0QW01.OM0QWPRN = OM0QM001.SY5PRCUN[OMASUB1]; /* new price*/

  if (OM0QW01.OM0QWPRN <= 0) /* new price le 0 invalid*/
    if (OM0QW01.OM0QWPRN == 0 /* if new price is zero*/
     && SYCREC.SY1FNSHG == "2") /* and prod is raw materials*/
      if (KUCREC.XAUCD == "64" /* class is salesman samples*/
       || KUCREC.XAUCD == "82") /* or rep samples*/
          /* next sentence - price = 0 ok*/
      else
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(189); /* price can not be < or = zero*/
        set OM0QM001.SY5PRCUN[OMASUB1] cursor, bold;
        return;
      end
    else
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(189); /* price can not be < or = zero*/
      set OM0QM001.SY5PRCUN[OMASUB1] cursor, bold;
      return;
    end
  end

  OM0QW01.OM0QWFLG = "N"; /* no error*/

      /* note - om0qwpsz = n, never changed*/
             /* om0qwpsz = y, warning given once, don't repeat,*/
                           /* apply any change*/
  if (OM0QW01.OM0QWPSZ == "N") /* edit only once*/
    OM0QSE4(); /* edit price variance*/
  end

  if (OM0QW01.OM0QWFLG == "Y") /* edit once err found*/
    OM0QW01.OM0QWPSZ = "Y";
    converseLib.validationFailed(169); /* warning - outside price range*/
    set OM0QM001.SY5PRCUN[OMASUB1] cursor, bold;
  else

        /* good price change for this size*/

    OM0QW01.SY5PRCUN[OMASUB] = OM0QM001.SY5PRCUN[OMASUB1];
    OM0QW01.OM0QWCHG = "Y"; /* flag prod as changed*/
    OM0QW01.OP3PRCOF[OMASUB] = "Y"; /* price override flag*/
    OM0QW01.OP2PRCOF = "Y"; /* product price override*/
    OM0QW01.OM0QWAUT = "Y"; /* authorization reqd*/
    OM0QW01.OP2GBLOF = "N"; /* global maint*/
    set OM0QM001.SY5PRCUN[OMASUB1] normal; /* unprotected*/
  end



end // end OM0Q442

// edit quantity changes
Function OM0Q443()

      /* *****************************************/
      /* *  edit qty per size*/
      /* *****************************************/

    /* first calculate in-process qty for the size.*/
    /* on-order qty must be > input in-process amt, for each size*/
      /* (in-process = allocated + reserve, both on-hand & wip)*/

  if (OP3REC.OP3ONOQT[OMASUB] == 0) /* added size, no om0qwinp*/
    /* next sentence*/
  else /* one of the orginal, ordered sizes*/
    OM0QWINP[OMASUB] = OP3REC.OP3OHRQT[OMASUB]; /* init w-s*/
    OM0QWINP[OMASUB] = OM0QWINP[OMASUB] + OP3REC.OP3WPRQT[OMASUB];
    OM0QWINP[OMASUB] = OM0QWINP[OMASUB] + OP3REC.OP3ALQT[OMASUB];

    if (OM0QM001.OP3ONOQT[OMASUB1] < OM0QW01.OM0QWINP[OMASUB])
      OMAREC.OMAERR = "Y";
      OM0QS43(); /* make msg=on-order amt too small*/
      set OM0QM001.OP3ONOQT[OMASUB1] cursor, bold;
      return;
    end

  end


   /* ******************************************************/
   /* if today is 30 days past production deadline (based*/
   /* on need date) only certain userid's can increase qtys*/

    /* also, for screened products, availability may*/
    /* be frozen, and cannot be increased, only decreased*/
   /* *****************************************************/


  if (OM0QM001.OP3ONOQT[OMASUB1] > OP3REC.OP3ONOQT[OMASUB]) /* increase*/
    OM0QW01.OM0QWQIC = "Y"; /* qty was increased future reference*/
    if (OM0QW01.OM0QWFRF == "Y")
      converseLib.validationFailed(697); /* cutoff date passed, cannot add qty*/
      OM0QM001.OP3ONOQT[OMASUB1] = OP3REC.OP3ONOQT[OMASUB];
      OMAREC.OMAERR = "Y";
      set OM0QM001.OP3ONOQT[OMASUB1] cursor, bold;
      return;
    else
      if (OM0QW01.OM0QWP30 == "Y") /* 30 days past prod deadline*/
        if (COMMAREA.CAUSERID in YOSTBL.XXXUSRID /* valid userid*/
         && YOSTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
          if (YOSTBL.YOSQTYFL[sysVar.arrayIndex] == "Y")
             /* next sentence*/
          else
            OM0QM001.OP3ONOQT[OMASUB1] = OP3REC.OP3ONOQT[OMASUB];
            converseLib.validationFailed(207); /* past 30 day deadline no increase*/
            OMAREC.OMAERR = "Y";
            return;
          end
        else
          OM0QM001.OP3ONOQT[OMASUB1] = OP3REC.OP3ONOQT[OMASUB];
          converseLib.validationFailed(207); /* past 30 day deadline no increase*/
          OMAREC.OMAERR = "Y";
          return;
        end
      end
    end
  else
    if (OM0QM001.OP3ONOQT[OMASUB1] < OP3REC.OP3ONOQT[OMASUB]) /* decrease*/
      OM0QW01.OM0QWQDN = "Y"; /* qty was decreased*/
    end
  end

   /* compute net change for edits and updates*/
  OM0QWCQT[OMASUB] = OM0QM001.OP3ONOQT[OMASUB1] - OP3REC.OP3ONOQT[OMASUB];

  if (OM0QW01.OM0QWCQT[OMASUB] > 0 /* increase qty*/
   && OBIREC.OBIRTNCD != 1)        /* and display avail.*/
    OM0Q44A(); /* enough available to order?*/
  end

  if (OMAREC.OMAERR == "N")
    OM0QW01.OM0QWCQP = "Y"; /* changed qty on product*/
    OMWREC.OMWPKCHF = "Y"; /* pack change flag*/
    OM0QW01.OM0QWCHG = "Y"; /* maintenanced order*/
    set OM0QM001.OP3ONOQT[OMASUB1] initialAttributes;
  else
    OM0QW01.OM0QWCQT[OMASUB] = 0; /* erase change*/
  end


end // end OM0Q443

// qty > availability?
Function OM0Q44A()


   /* check if qty ord > avail*/

  if (OM0QWCQT[OMASUB] > OM0QM001.OM0QMAVL[OMASUB1])
    if (OP1REC.XBDCD != "0" /* bulk or draw*/
     && XBDTBL.XBDRWOFL[OM0QWBDS] == "Y") /* order is draw*/
      converseLib.validationFailed(288); /* not enough available on bulk*/
      OMAREC.OMAERR = "Y";
      set OM0QM001.OP3ONOQT[OMASUB1] cursor, bold;
      return; /* no need to process further*/
    else
      if (OM0QW01.OM0QWCAL == "Y") /* called availability*/
        converseLib.validationFailed(385); /* not enough available*/
        OMAREC.OMAERR = "Y";
        set OM0QM001.OP3ONOQT[OMASUB1] cursor, bold;
        return; /* no need to process further*/
      end
    end
  end

   /* next check if size availability date is passed need date*/
   /* if the condition code is in character format (o/b u/a s/o)*/
   /* or blank move zeros to the numeric date field used when*/
   /* comparing condition code date to need date. if the*/
   /* condition code is a/o move current date to the numeric*/
   /* date field.*/
   /* if the condition code is a date move the condition code to*/
   /* working storage so you can strip off the /. then if the*/
   /* condition code month is less than the current month add 1*/
   /* to the year otherwise if the current month is greater*/
   /* or equal to the condition month you are still*/
   /* in the same year so move current year*/

  OMAREC.OMACYMD = VGVar.currentShortGregorianDate;
  if (OBIREC.OBICOND[OMASUB] == "A/O") /* AT ONCE*/
    OM0QW01.OM0QWNCD = OMAREC.OMACDT;
  else
    if (OBIREC.OBICOND[OMASUB] == "S/O" 
     || OBIREC.OBICOND[OMASUB] == "U/A" 
     || OBIREC.OBICOND[OMASUB] == "O/B" 
     || OBIREC.OBICOND[OMASUB] == "C/OV"
     || OBIREC.OBICOND[OMASUB] == "B/A" /* blank availability*/
     || OBIREC.OBICOND[OMASUB] == "   ")
      OM0QW01.OM0QWNCD = 0;
    else
      OM0QW01.OM0QWCDC = OBIREC.OBICOND[OMASUB];
      OM0QW01.OM0QWHYY = OMAREC.OMACYY;
      OM0QW01.OM0QWNMO = OM0QW01.OM0QWCOM; /* MOVE MONTH*/
      OM0QW01.OM0QWNDA = OM0QW01.OM0QWCOD; /* MOVE DAY*/
      if (OM0QW01.OM0QWNMO < OMAREC.OMACMM)
        OM0QW01.OM0QWHYY = OM0QW01.OM0QWHYY + 1;
        OM0QWNYR = OM0QW01.OM0QWHYY;
      else
        if (OM0QW01.OM0QWNMO >= OMAREC.OMACMM)
          OM0QW01.OM0QWNYR = OMAREC.OMACYY;
        end
      end
      if (OM0QW01.OM0QWNYR > 56)
        OM0QW01.OM0QWNCC = 19;
      else
        OM0QW01.OM0QWNCC = 20;
      end
    end
  end

  /* test to see if sizes are available on or before need date*/
  /* (note that if sizes are available today, then we don't bother*/
  /* with this error.  This is to allow user to add quantities*/
  /* to orders with need dates in the past.  In production,*/
  /* there are no products with available dates less than today.*/
  /* This is not true for test, and i applolgise if you are trying*/
  /* to get past this error).           bbake2  jan 92*/
  /*  */
  if (OBIREC.OBIRTNCD == 0) /* got availability*/
    OM0QW01.OM0QWBCD = OM0QW01.OM0QWNCD; /* MOVE TO BINARY FIELD*/
    if (OM0QW01.OM0QWBCD > OM0QW01.OP1CUNDT /* size not avail on need date*/
     && OM0QW01.OM0QWBCD > OMAREC.OMACDT)   /* size not avail today*/
      set OM0QM001.OP3ONOQT[OMASUB1] cursor, bold;
      OMAREC.OMAERR = "Y";
      if (OP3REC.OP2LNIST == "OP"
       || OP3REC.OP2LNIST == "PR"
       || OP3REC.OP2LNIST == "RS")
        converseLib.validationFailed(389); /* cant chg need date > 1 day*/
      else
        converseLib.validationFailed(338); /* qtys allocated, cant add*/
      end
    end
  end

    /* repeat edit for screened products using adjusted need date*/

  /*  */
  /* References to WPDT have been removed due to a change in availability*/
  /* that returns available quantities by need date with regard to the*/
  /* "lead time to screen".  12/91/ JJOHN2*/
  /*  */
   /* IF OM0QW01.OM0QWPDT NE 0;*/
    /* AND OBIREC.OBIRTNCD EQ 0;       /* got availability*/
    /* MOVE OM0QW01.OM0QWNCD TO OM0QW01.OM0QWBCD;/* MOVE TO BINARY FIELD*/
    /* IF OM0QW01.OM0QWBCD GT OM0QW01.OM0QWPDT; /* size not avail yet*/
      /* SET OM0QM001.OP3ONOQT(OMASUB1) CURSOR,BRIGHT;*/
      /* MOVE 'Y' TO OMAREC.OMAERR;*/
                                  /* MOVE 705 TO EZEMNO; /* cannot order*/
                                   /* if avail dt <= 60 days from ndt*/
    /* END;*/
   /* END;*/



end // end OM0Q44A

// establish default price
Function OM0Q44B()


  TA1REC.TA1LOCAT[2] = "OM0Q44B"; /* diag location 2*/


   /* *********************************************************/
   /* *  this process takes several steps in calculating prices*/
   /* *    it may seem redundant throughout OM0Q, but will*/
   /* *    more than likely only be done once.  Either in setting*/
   /* *    up the screen for full size range, defaulting price*/
   /* *    or getting prices for op3rec when additional sizes*/
   /* *    were ordered.*/
   /* **/
   /* *  this partiticular routine checks flags prior to*/
   /* *    performing the process because several prices*/
   /* *    may be defaulting.*/
   /* *********************************************************/

    /* first set up unit of measure conver factor for the order.*/
      /* note - this is new u.o.m., which may eq old u.o.m.*/

  if (OM0QW01.OM0QWUMF == " ") /* u.o.m. not decifered yet*/
    OM0Q251(); /* u.o.m. check*/
  end


  OM0QWZPR = "N"; /* init flag to force 0 price*/

  if (KUCREC.KUCCOID == 0) /* if co rec not read yet*/
    KUCREC.KUCCOID = OP1REC.KUCCOID; /* frmt co nbr*/
    OM0QSRH(); /* read it for account code*/
  end

   /* if this in an international account*/
     /* and the account class is 33 get the price type*/
     /* code from the nim rec.*/
   /* if the account class is 31 or 32 or any 06 acct type*/
   /* get the price type from the invoice speciality table.*/


  if (OP1REC.XDVCD == "02") /* if an int'l order*/
    if (KUCREC.XAUCD == "33") /* with a nil distributr as cust*/
      OM0Q256(); /* get price type codefrom nimrec*/
    else
      OM0Q257(); /* get it from iverec.*/
    end
  end


  if (OP1REC.XDVCD == "02") /* if an int'l order*/
       /* next sentence               ;   always redo price*/
  else /* otherwise*/
    if (OM0QW01.OM0QWFBK == "Y") /* if order is a draw, found bulk*/
      if (XBDTBL.XBDSETFL[OM0QWBDS] == "N") /* customer draw*/
        OM0QW01.SY5PRCUN[OMASUB] = OM0QW03.SY5PRCUN[OMASUB];
        return;
      end
    end
  end


  if (OP1REC.SP1ID != " ") /* order is on sales program*/
    if (OM0QW01.OM0QWSPP == " ") /* sales prgm not read yet*/
      OM0QSR6(); /* use sales pgm prices*/
    end
  end

  if (OM0QW01.OM0QWSTP == 0) /* style price still 0*/
    if (OP1REC.XDVCD == "02") /* if an int'l order*/
      if (IVEREC.IVEPCIND == "C")
        OM0Q258(); /* get price from cost table*/
      else
        OM0Q254(); /* get style or color prices*/
      end
      if (OM0QW01.OM0QWCLP > 0) /* adjust price by color*/
        if (KUCREC.XAUCD == "33")
          OM0QW01.OM0QWIPC = mathLib.round(OM0QW01.OM0QWCLP *                                       VNLXPY01.NL-PRC-COST-PCT / 100, -mathLib.decimals(OM0QW01.OM0QWIPC));
          OM0QW01.OM0QWCLP = OM0QW01.OM0QWCLP + OM0QW01.OM0QWIPC;
        else
          OM0QW01.OM0QWIPC = mathLib.round(OM0QW01.OM0QWCLP * IVEREC.IVEPCPCT / 100, -mathLib.decimals(OM0QW01.OM0QWIPC));
          OM0QW01.OM0QWCLP = OM0QW01.OM0QWCLP + OM0QW01.OM0QWIPC;
        end
      else /* otherwise adjust price by style*/
        if (KUCREC.XAUCD == "33")
          OM0QW01.OM0QWIPC = mathLib.round(OM0QW01.OM0QWSTP *                                       VNLXPY01.NL-PRC-COST-PCT / 100, -mathLib.decimals(OM0QW01.OM0QWIPC));
          OM0QW01.OM0QWSTP = OM0QW01.OM0QWSTP + OM0QW01.OM0QWIPC;
        else
          OM0QW01.OM0QWIPC = mathLib.round(OM0QW01.OM0QWSTP * IVEREC.IVEPCPCT / 100, -mathLib.decimals(OM0QW01.OM0QWIPC));
          OM0QW01.OM0QWSTP = OM0QW01.OM0QWSTP + OM0QW01.OM0QWIPC;
        end
      end
    else /* otherwise get product price for all other divisions*/
      OM0Q254(); /* get style or color prices*/
    end
  end

  OM0Q255(); /* move price to om0qw01*/


  if (OM0QW01.OM0QWUMF == "N") /* prices not stored standard*/
    OM0QS64(); /* convert to non-std uom*/
  end



end // end OM0Q44B

// new avail/check with qty
Function OM0Q44C()


   /* check if qty ord > avail*/

  if (OM0QM001.OP3ONOQT[OMASUB1] > OM0QM001.OM0QMAVL[OMASUB1])
    if (OM0QW01.OM0QWFBK == "Y") /* found bulk for draw*/
      converseLib.validationFailed(288); /* not enough available on bulk*/
      OMAREC.OMAERR = "Y";
      set OM0QM001.OP3ONOQT[OMASUB1] cursor, bold;
      return; /* no need to process further*/
    else
      if (OM0QW01.OM0QWCAL == "Y") /* availability checked*/
        converseLib.validationFailed(385); /* not enough available*/
        OMAREC.OMAERR = "Y";
        set OM0QM001.OP3ONOQT[OMASUB1] cursor, bold;
        return; /* no need to process further*/
      end
    end
  end

   /* next check if size availability date is passed need date*/


   /* check if qty ord > avail*/

   /* next check if size availability date is passed need date*/
   /* if the condition code is in character format (o/b u/a s/o)*/
   /* or blank move zeros to the numeric date field used when*/
   /* comparing condition code date to need date. if the*/
   /* condition code is a/o move current date to the numeric*/
   /* date field.*/
   /* if the condition code is a date move the condition code to*/
   /* working storage so you can strip off the /. then if the*/
   /* condition code month is less than the current month add 1*/
   /* to the year otherwise if the current month is greater*/
   /* or equal to the condition month you are still*/
   /* in the same year so move current year*/

  OMAREC.OMACYMD = VGVar.currentShortGregorianDate;
  if (OBIREC.OBICOND[OMASUB] == "A/O") /* AT ONCE*/
    OM0QW01.OM0QWNCD = OMAREC.OMACDT;
  else
    if (OBIREC.OBICOND[OMASUB] == "S/O" 
     || OBIREC.OBICOND[OMASUB] == "U/A" 
     || OBIREC.OBICOND[OMASUB] == "O/B" 
     || OBIREC.OBICOND[OMASUB] == "C/OV"
     || OBIREC.OBICOND[OMASUB] == "B/A" /* blank availability*/
     || OBIREC.OBICOND[OMASUB] == "   ")
      OM0QW01.OM0QWNCD = 0;
    else
      OM0QW01.OM0QWCDC = OBIREC.OBICOND[OMASUB];
      OM0QW01.OM0QWHYY = OMAREC.OMACYY;
      OM0QW01.OM0QWNMO = OM0QW01.OM0QWCOM; /* MOVE MONTH*/
      OM0QW01.OM0QWNDA = OM0QW01.OM0QWCOD; /* MOVE DAY*/
      if (OM0QW01.OM0QWNMO < OMAREC.OMACMM)
        OM0QW01.OM0QWHYY = OM0QW01.OM0QWHYY + 1;
        OM0QWNYR = OM0QW01.OM0QWHYY;
      else
        if (OM0QW01.OM0QWNMO >= OMAREC.OMACMM)
          OM0QW01.OM0QWNYR = OMAREC.OMACYY;
        end
      end
      if (OM0QW01.OM0QWNYR > 56)
        OM0QW01.OM0QWNCC = 19;
      else
        OM0QW01.OM0QWNCC = 20;
      end
    end
  end

  /* test to see if sizes are available on or before need date*/
  /* (see note in om0q44a about orders with need date in the past)*/
  /*  */
  if (OBIREC.OBIRTNCD == 0) /* got availability*/
    if (OM0QW01.OM0QWNCD > OM0QW01.OP1CUNDT /* size not avail yet*/
     && OM0QW01.OM0QWNCD > OMAREC.OMACDT)   /* size not avail today*/
      set OM0QM001.OP3ONOQT[OMASUB1] cursor, bold;
      OMAREC.OMAERR = "Y";
      if (OP3REC.OP2LNIST == "OP"
       || OP3REC.OP2LNIST == "PR"
       || OP3REC.OP2LNIST == "RS")
        converseLib.validationFailed(389); /* cant chg need date > 1 day*/
      else
        converseLib.validationFailed(338); /* qtys allocated, cant add*/
      end
    end
  end

    /* repeat edit for screened products using adjust need date*/

  /*  */
  /* Reference to WPDT has been removed due to a change in availability*/
  /* that returns available quantities by need date with regard to the*/
  /* "lead time to screen".  12/91 JJOHN2*/
  /*  */
   /* IF OM0QW01.OM0QWPDT NE 0;*/
    /* AND OBIREC.OBIRTNCD EQ 0;       /* got availability*/
    /* IF OM0QW01.OM0QWNCD GT OM0QW01.OM0QWPDT; /* size not avail yet*/
      /* SET OM0QM001.OP3ONOQT(OMASUB1) CURSOR,BRIGHT;*/
      /* MOVE 'Y' TO OMAREC.OMAERR;*/
                                  /* MOVE 705 TO EZEMNO; /* cannot order*/
                                   /* if avail dt > = 60 days from ndt*/
    /* END;*/
   /* END;*/



end // end OM0Q44C

// combo edits for top and bottom
Function OM0Q450()


      /* ****************************************/
      /* * if changes make the order qualify*/
      /* * for Airborne, display error message*/
      /* ****************************************/

  if (OM0QW01.OM0QW-CRED-CHK-DIR-SHP == "Y" /* dir ship changed?*/
   || OM0QW01.OM0QWCND == "Y")              /* need date changed?*/
    XS0MW01.XS0MWDIV = OP1REC.XDVCD; /* build a pass record*/
    XS0MW01.XS0MWORT = OP1REC.XOTCD;
    XS0MW01.XS0MWDIR = OM0QM001.XDSCD;
    XS0MW01.XS0MWCUS = OP1REC.KUCCOID;
    XS0MW01.XS0MWGPC = OP1REC.XGPCD;
    XS0MW01.XS0MWNDT = OM0QW01.OP1CUNDT;


    XS0MS-CHK-AIRBORNE();

    if (XS0MW01.XS0MWABF == "Y") /* changes make a transmitted*/
      OMAREC.OMAERR = "Y"; /* airborne order*/
      XS0MW01.XS0MWABF = "N";
      converseLib.validationFailed(790); /* updates not allowed*/
      if (OM0QW01.OM0QW-CRED-CHK-DIR-SHP == "Y") /* dir ship change?*/
        OM0QM001.XDSABRV = " ";
        OM0QM001.XDSCD = OP1REC.XDSCD; /* move original whse*/
        set OM0QM001.XDSCD cursor, bold;
        OM0QSM1(); /* get whse abreviation*/
      else
        OM0QW01.OP1CUNDT = OP1REC.OP1CUNDT; /* move original*/
        set OM0QM001.OM0QMNDT cursor, bold; /* need date to map*/
      end
    end
  end


      /* *****************************************************/
      /* * if qty, price or need dt changed, need reason code*/
      /* *****************************************************/

  if (OM0QM001.XOMCD == " ") /* requires reason code*/
    if (OM0QW01.OM0QWCQP == "Y" /* quantity change*/
     || OM0QW01.OM0QWAUT == "Y" /* price change*/
     || OM0QW01.OM0QWCND == "Y") /* tracked ocd field changed*/
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(399); /* change reason reqd*/
      set OM0QM001.XOMCD cursor, bold;
    else
      OM0QM001.XOMABRV = " ";
      set OM0QM001.XOMCD initialAttributes;
      OMWREC.XOMCD = OM0QM001.XOMCD; /* hold in work-storage*/
      OM0QW01.OM0QWXOM = 0; /* no reason code*/
    end
  else
    if (OM0QM001.XOMCD in XOMTBL.XOMCD /* valid maint reason*/
     && XOMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
      OM0QM001.XOMABRV = XOMTBL.XOMABRV[sysVar.arrayIndex];
      OM0Q451(); /* edit reason code for rebooking*/
    else
      converseLib.validationFailed(395); /* invalid reason code*/
      OMAREC.OMAERR = "Y";
      set OM0QM001.XOMCD cursor, bold;
    end
  end

  if (OMAREC.OMAERR == "N") /* no errs found*/
    OM0QW01.OM0QWXOM = sysVar.arrayIndex; /* save maint reason*/
    set OM0QM001.XOMCD initialAttributes;
  end


      /* *********************************************************/
      /* * override authorization reqd only if price changes*/
      /* *********************************************************/

      /* check the users entered authorization*/
      /* code for validity. first it must exist on the table.*/
      /* second it must be active as far as the dates associated*/
      /* with this code.*/

  if (OM0QM001.XOACD == " ") /* blank authorization code*/
    if (OM0QW01.OM0QWAUT == "Y") /* price chgs require authorization*/
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(210);
      set OM0QM001.XOACD cursor, bold;
    end
  else
    OM0QSXF(); /* xoacd lookup*/
  end


  if (OMAREC.OMAERR == "N") /* no  other errs*/
    if (OM0QW01.OM0QWTPC == "N") /* have sent msg yet*/
      if (OM0QW01.OM0QWCQP == "Y") /* did change qtys*/
        if (OM0QW01.OM0QWPAO == "Y") /* current > deadline*/
          OMAREC.OMAERR = "Y";
          converseLib.validationFailed(365); /* tell produc about qty change*/
          OM0QW01.OM0QWTPC = "Y"; /* do msg 1 time only for product*/
        end
      end
    end
  end

     /* if there is a change in warehouse or need date,*/
     /* and a nil order with a sample order type, the*/
     /* customer is nike owned, then reprice the item.*/

  if (OM0QW01.OM0QWCWH == "Y") /* change in warehouse*/
    if (OP1REC.XDVCD == "02" /* international order*/
     && OP1REC.XOBCD == "S1") /* and a sample order type*/
      KUCREC.KUCCOID = OP1REC.KUCCOID; /* frmt co nbr*/
      OM0QSRH(); /* read company record (kucrec)*/
      if (KUCREC.XAUCD == "31" /* cust acct cls is nike owned*/
       || KUCREC.XAUCD == "32")
        OM0Q250(); /* reprice item*/
      end
    end
  end


  if (OM0QW01.OM0QWCND == "Y") /* change in need date*/
    if (XS0MW01.XS0MWABF == "Y") /* transmitted airborne order*/
         /* next sentence          /* need date cannot be changed*/
    else
      OM0Q250(); /* reprice item*/
    end
  end


end // end OM0Q450

// validate reason code
Function OM0Q451()


     /* ******************************************************/
     /* * if quantity increased or*/
     /* * decreased, edit reason code*/
     /* **/
     /* * first check if qty was decreased and increased*/
     /* *   if good reason code, check if user wants to rebook*/
     /* * then check for valid reason code for increase only*/
     /* * then check for valid reason code on decrease only*/
     /* *   if good for decrease, check for rebooking*/
     /* ****************************************************/

  if (OM0QW01.OM0QWQIC == "Y") /* qty increased*/
    if (OM0QW01.OM0QWQDN == "Y") /* qty decreased*/
      if (XOMTBL.XOMCANCF[sysVar.arrayIndex] == "B") /* both*/
           /* good reason code, try to rebook*/
        if (XOMTBL.XOMRBKFL[sysVar.arrayIndex] == "Y") /* rebook*/
          OM0QS51(); /* edit reason code for rebook*/
        end
      else
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(426); /* can't incr/decr with this code*/
        set OM0QM001.XOMCD cursor, bold;
      end
    else
      if (XOMTBL.XOMCANCF[sysVar.arrayIndex] == "A" /* both*/
       || XOMTBL.XOMCANCF[sysVar.arrayIndex] == "B") /* both*/
         /* next sentence - okay to incr with this code*/
      else
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(390); /* can't incr qty with this code*/
        set OM0QM001.XOMCD cursor, bold;
      end
    end
  else
    if (OM0QW01.OM0QWQDN == "Y") /* qty decreased only*/
      if (XOMTBL.XOMCANCF[sysVar.arrayIndex] == "D" /* both*/
       || XOMTBL.XOMCANCF[sysVar.arrayIndex] == "B") /* both*/
           /* good reason code, try to rebook*/
        if (XOMTBL.XOMRBKFL[sysVar.arrayIndex] == "Y") /* rebook*/
          OM0QS51(); /* edit code for rebook*/
        end
      else
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(334); /* can't decr qty with this code*/
        set OM0QM001.XOMCD cursor, bold;
      end
    end
  end

  if (OM0QW01.OM0QWCND == "Y"
   || OM0QW01.OM0QWAUT == "Y")
    if (XOMTBL.XOMCANCF[sysVar.arrayIndex] == "D")
      converseLib.validationFailed(395); /* invalid reason code*/
      OMAREC.OMAERR = "Y";
      set OM0QM001.XOMCD cursor, bold;
    end
  end
end // end OM0Q451

// ord adj validation override
Function OM0Q453()

   /* *************************************************************/
   /* Clear the row storage area*/
   /* Select row - Factory Control Table*/
   /* *************************************************************/

   /* *************************************************************/
  set FB9REC empty; /* initialize record*/
  OM0QW01.OM0QWOAO = "N"; /* and ord adj override flag*/

   /* *************************************************************/
   /* select requested row from table*/
   /* *************************************************************/

  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* *************************************************************/
   /* If successful or not found, determine effect on order*/
    /* adjustment validation process*/
   /* *************************************************************/

  if (SQLCA.VAGen_SQLCODE != 0) /* post and exit if bad return*/
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "OM0Q";
    TA1REC.TA1LOCAT[1] = "S ";
    TA1REC.TA1LOCAT[2] = "OM0Q453";
    TA1REC.TA1LOCAT[3] = "IO3650 ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1DBASE = "DFBUY.";
    TA1REC.TA1TBLVU = "VFMCTL01";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    return;
  end

    /* set up need date and buy date for compare*/

  OM0QW01.OM0QWOND = OP1REC.OP1CUNDT;

  OM0QW01.OM0QWOBD = FB9REC.FB8BUYDT;

  if (OM0QW01.OM0QWNYM > OM0QW01.OM0QWBYM) /* if need date lt buy date*/
    OM0QW01.OM0QWOAO = "Y"; /* turn on override flag*/
    return; /* and exit*/
  else
    if (OM0QW01.OM0QWNYM < OM0QW01.OM0QWBYM) /* if need date gt buy date*/
      return; /* exit (o/a required)*/
    end
  end

    /* need date and buy date are equal -*/
     /* must now compare current date*/
      /* and time to cutoff date and time*/
       /* in same manner.*/



    /* set up current date and time for compares*/

  OM0QW01.OM0QWTM1 = VGVar.currentFormattedTime; /* change hh:mm:ss to hhmm*/
  OM0QW01.OM0QWTHL = OM0QW01.OM0QWTHF;
  OM0QW01.OM0QWTML = OM0QW01.OM0QWTMF;
  OM0QW01.OM0QWTSL = OM0QW01.OM0QWTSF;

  OMAREC.OMACDT = VGVar.currentShortGregorianDate; /* set curr date*/
  if (OMAREC.OMACYY > 56) /* set century based on year*/
    OMAREC.OMACCC = 19;
  else
    OMAREC.OMACCC = 20;
  end

  if (OMAREC.OMACDT < FB9REC.FB9COFDT)
                                   /* if current date lt cutoff date*/
    OM0QW01.OM0QWOAO = "Y"; /* turn on override flag*/
    return; /* and exit*/
  else
    if (OMAREC.OMACDT > FB9REC.FB9COFDT)
                                   /* if current date gt cutoff date*/
      return; /* exit (o/a required)*/
    end
  end

     /* still equal - try time compare*/

  if (OM0QW01.OM0QWTM3 < FB9REC.FB9COFTM)
                                   /* if current date lt cutoff date*/
    OM0QW01.OM0QWOAO = "Y"; /* turn on override flag*/
  end
   /* *************************************************************/
end // end OM0Q453

// show and unprotect prices
Function OM0Q460()


      /* ********************************************************/
      /* * loop 20 sizes, move price to map*/
      /* **/
      /* * note - om0qwszf/l were set before got here*/
      /* *        could be reqstd range, full rnge or actual rnge*/
      /* **/
      /* * the price related fields are moved to the map and*/
      /* *   set normal (unprotected) for user input, then if*/
      /* *   certain conditions are met, set back to protected*/
      /* ********************************************************/


  if (OM0QW01.OM0QWSCR == 1) /* if on screen 1*/
    OMASUB = OM0QW01.OM0QWSZF; /* find first size to move*/
  else
    OMASUB = OM0QW01.OM0QWSB2; /* screen 2 starting size*/
  end


  OMAREC.OMASUB1 = 1; /* map index = 1 to start*/

  while (OMAREC.OMASUB1 < 21 /* for up to 20 sizes*/
   && OMAREC.OMASUB < 41  
   && OMAREC.OMASUB <= OM0QW01.OM0QWSZL) /* until end of chosen range*/
    if (OP3REC.OP3SZAFL[OMASUB] == "Y")
      if (OP3REC.OP3ONOQT[OMASUB] > 0 /* ordered qty on sz*/
       || OM0QW01.OM0QWP21 == "Y")    /* full range requested*/
        OM0Q330(); /* move size price, price override*/
        OMASUB1 = OMASUB1 + 1; /* next map column*/
      end
    end
    OMASUB = OMASUB + 1; /* try next size in record*/
  end

  if (OM0QW01.OM0QWPF6 == "Y") /* prices requested*/
    if (OM0QM001.OM0QMPAL > 999.99) /* log 535 5/20/91 dflesh*/
      set OM0QM001.OM0QMPAL cursor, normal; /* price for all sizes*/
    else
      set OM0QM001.SY5PRCUN[1] cursor;
    end
    set OM0QM001.OM0QMPAL normal; /* allow input*/
    set OM0QM001.OM0QMPAD normal; /* allow input*/
  else
    set OM0QM001.OM0QMPAL protect;
    set OM0QM001.OM0QMPAD protect;
  end



  if (OP1REC.XDVCD == "02") /* if an int'l order*/
    if (OP1REC.XOTCD == "31" /* and footwear or*/
     || OP1REC.XOTCD == "36") /* apparel futures*/
      OM0QSRB(); /* get product's life cycle*/
      if (OBIREC.XLCCD == "05") /* if product is in development*/
        OMAREC.OMAERR = "Y"; /* error - msg: cannot change*/
        converseLib.validationFailed(500); /* price for in dev. product*/
        OM0Q461(); /* set price fields protected*/
      end
    end
  end


end // end OM0Q460

// protect price related fields
Function OM0Q461()


      /* ********************************************************/
      /* * loop 20 sizes, protect prices*/
      /* *protect price for all sizes, price adjustment*/
      /* ********************************************************/


  if (OM0QW01.OM0QWSCR == 1) /* if on screen 1*/
    OMASUB = OM0QW01.OM0QWSZF; /* find first size to move*/
  else
    OMASUB = OM0QW01.OM0QWSB2; /* screen 2 starting size*/
  end


  OMAREC.OMASUB1 = 1; /* map index = 1 to start*/

  while (OMAREC.OMASUB1 < 21 /* for up to 20 sizes*/
   && OMAREC.OMASUB < 41  
   && OMAREC.OMASUB <= OM0QW01.OM0QWSZL) /* until end of chosen range*/
    if (OP3REC.OP3SZAFL[OMASUB] == "Y")
      if (OP3REC.OP3ONOQT[OMASUB] > 0 /* qty ordered*/
       || OM0QW01.OM0QWP21 == "Y")    /* full range requested*/
        set OM0QM001.SY5PRCUN[OMASUB1] protect; /* protect size price*/
        set OM0QM001.OP3PRCOF[OMASUB1] protect; /* protect price override*/
        OMASUB1 = OMASUB1 + 1; /* next map column*/
      end
    end
    OMASUB = OMASUB + 1; /* try next size in record*/
  end

  set OM0QM001.SY5PRCUN[1] cursor;

  set OM0QM001.OM0QMPAL protect; /* protect price for all sizes*/
  set OM0QM001.OM0QMPAD protect; /* protect price adjustment*/


end // end OM0Q461

// check sales prm for price chge
Function OM0Q462()


      /* pf 6 not valid if order is on sales program*/
         /* unless it's a sales tool like a component ring*/
         /* where the price needs to be changed to zero*/

  if (SYCREC.SY1FNSHG == "2") /* and the product is raw materials*/
    if (KUCREC.XAUCD == "64" /* if cmpy acct class is rep samples*/
     || KUCREC.XAUCD == "82") /* or salesmen samples*/
      /* next sentence            ;      ok to override price*/
    else /* otherwise*/
      OMAREC.OMAERR = "Y"; /* error*/
      converseLib.validationFailed(168); /* msg: sales pgm cant chng prices*/
      OM0Q461(); /* set prc related fields protect*/
    end
  else
                                   /* else (sales pgm & not raw materials)*/
     /* commented out code below to turn off allow price changes*/
     /* for products on the specified sales programs.*/
     /* note: this code may be used again - so, the code was left*/
           /* in place. commented out on 11/30/90.*/
      /* IF OP1REC.SP1ID = 'OS1' ;  temp fix for this sales program*/
        /* OR OP1REC.SP1ID = 'OS1A';*/
        /* IF OP3REC.SY1STNBR = '8179';and product - to be removed*/
          /* AND OP3REC.XGPCD = '02'   ;    11/21/90.*/
          /* ;next sentence            ;    "                "*/
        /* ELSE                        ;    "                "*/
          /* MOVE 'Y' TO OMAREC.OMAERR ;    error*/
          /* MOVE 168 TO EZEMNO;msg: sales pgm cant change prices*/
          /* PERFORM OM0Q461   ; set prc related fields protect*/
        /* END ;*/
      /* ELSE                          ;    "                "*/
    OMAREC.OMAERR = "Y"; /* error*/
    converseLib.validationFailed(168); /* msg: sales pgm cant change prices*/
    OM0Q461(); /* set prc related fields protect*/
      /* END ;*/
  end


end // end OM0Q462

// check bulk/draw for price chge
Function OM0Q463()


     /* *************************************************/
     /* *  if order is flex or                         **/
     /* *     is draw and bulk not found, prices       **/
     /* *     can't be changed                         **/
     /* *************************************************/

  if (XBDTBL.XBDBKOFL[OM0QWBDS] == "Y") /* bulk*/
    if (XBDTBL.XBDSETFL[OM0QWBDS] == "Y" /* setaside*/
     && XBDTBL.XBDRVRFL[OM0QWBDS] != "Y") /* not reserved inventory*/
      OMAREC.OMAERR = "Y"; /* error*/
      converseLib.validationFailed(294);
                                   /* set aside bulk orders can't chg price*/
      OM0Q461(); /* set prc related fields protect*/
    end
  else

    if (XBDTBL.XBDRWOFL[OM0QWBDS] == "Y") /* draw*/
      if (OM0QW01.OM0QWFBK == "N") /* bulk not found*/
        OMAREC.OMAERR = "Y"; /* error - msg: bulk order missing*/
        converseLib.validationFailed(128); /* or purged - cannot change prices*/
        OM0Q461(); /* set prc related fields protect*/
      end
    end
  end



end // end OM0Q463

// show and unprotect prices
Function OM0Q464()


    /* **********************************************/
    /* * now set fields protected if conditions dont*/
    /* * allow prc changes*/
    /* **********************************************/

   /* added to stop discounts on salesman orders - bug 270*/
   /* (kucrec)  dwalke 11-28-89*/

  if (KUCREC.KUCCOID == 0) /* if co. rec hasn't been read yet*/
    KUCREC.KUCCOID = OP1REC.KUCCOID; /* frmt co nbr*/
    OM0QSRH(); /* read it to get account class*/
  end

  if (KUCREC.XAUCD == "26" /* if the order is a rep promo*/
   || KUCREC.XAUCD == "27") /* or an agency/rep personal order*/
    OM0Q461(); /* set prc related fields protect*/
    set OM0QM001.OP3ONOQT[1] cursor; /* place cursor on first qty*/
    converseLib.validationFailed(687); /* cannot override prices on salesman orders*/
  else
    if (KUCREC.XAUCD == "64" /* if the order is a salesman sample*/
     && SYCREC.SY1FNSHG != "2") /* and not a raw material*/
      OM0Q461(); /* set prc related fields protect*/
      set OM0QM001.OP3ONOQT[1] cursor; /* place cursor on first qty*/
      converseLib.validationFailed(687); /* cannot override prices on salesman orders*/
    end
  end

  if (XOSTBL.XOSALWCH[OM0QWXOS] == "N") /* changes to price not allowed*/
    OM0Q461(); /* set prc related fields protect*/
  end

  if (OP1REC.SP1ID != "    ") /* if there is a sales pgm then get the nike*/
    OM0QS-SPGM-DEPT-CD(); /* department code that is associated with it*/
  else
    SP1REC.XNDCD = "    "; /* if no sales pgm then no nike dept code*/
  end

  if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
  else
    return;
  end

  if (OP1REC.SP1ID == " "  /* order is not on sales pgm*/
   || OP1REC.XDVCD == "02" /* or international division*/
   || SP1REC.XNDCD == "ALLM") /* allocation sales program*/
     /* next sentence                   price ovrd ok*/
  else
    OM0Q462(); /* check sales prgm price chgs*/
  end

  if (OP1REC.XBDCD != "0") /* bulk or draw*/
    OM0Q463(); /* check draw/bulk price changes*/
  end


end // end OM0Q464

// reinstate cxld line item to op
Function OM0Q469()
   /* ********************************************/
   /* reinstate cancelled line item*/
   /* ********************************************/

  set OP8REC empty;
  set OPBREC empty;
  set SQLCA empty;


  OP3REC.OP2LNIST = "OP";
  OP3REC.OP2LNSDT = XX0XW01.XX0XWDAT;

  OP8REC.OP8TASK = "U ";
  OP8REC.OP8LOC = "PROG OM0Q SGRP OM0Q469";
  OP8REC.OP8LOCAT[1] = "DB1000";
  OP8REC.OP8LOCAT[2] = " ";
  OP8REC.OP8LOCAT[3] = " ";
  OP8REC.OP8LOCAT[4] = " ";
  OP8REC.OP8MAP = "NONE";


  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};

  if (OPBREC.OPBSZRC == 0) /* check for good return*/
    OM0QM001.XOSABRV = "OPEN";
    OM0QM001.OP2LNIST = "OP";
    converseLib.validationFailed(627); /* item has been reinstated. reenter sizes*/
    OM0QW01.OM0QWCHG = "Y"; /* set change flag on*/
    OM0QW01.OM0QWCON = "Y"; /* to reconverse map*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1LOCAT[1] = "U"; /* calling option*/
    TA1REC.TA1LOCAT[2] = "DB1000"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "OM0O469"; /* statement group*/
    TA1REC.TA1LOCAT[4] = " "; /* order key*/
    TA1REC.TA1TBLKE = " "; /* clear table key*/
    /* MOVE OP3REC.OP1CUOID TO OM0OW01.OM0OWT2; frmt dsply cust ord*/
    /* MOVE OP3REC.OP1NORID TO OM0OW01.OM0OWT3; frmt dsply nike ord*/
    /* MOVE OP3REC.OP2LNINB TO OM0OW01.OM0OWT4; frmt dsply line itm*/
    TA1REC.TA1TBLKE = OM0QW03.OP2KEY; /* order key*/
    XSOPS02(); /* general abend*/
  end


  set OMEREC empty; /* initialize omerec return code*/
  OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* new order to omwrec*/

  call "OM0N" (OMWREC, OMEREC) {isNoRefresh = yes}; /* redo order status*/

  if (OMEREC.OME-RETURN-CD != "00") /* check om0n return code*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSPF4(); /* master menu*/
    exit program; /* master menu failure*/
  end

  OP1REC.OP1GROUP = OMWREC.OP1GROUP;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
end // end OM0Q469

// choose action on pf24
Function OM0Q470()


      /* ********************************************************/
      /* * test pf 24 for first or second usage, take action*/
      /* ********************************************************/


  if (OP1REC.XSOCD != COMMAREA.XSOCD)
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(355); /* 1 sales office cant cancel another's*/
  else

    if (XOSTBL.XOSALWXL[OM0QWXOS] == "N")
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(373); /* prod status not allow cancel*/
    else

      if (COMMAREA.CACLVL[1] == "Y") /* and national alloc mgr*/
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(401); /* id not ok to cancel products*/
      else
        if (XS0MW01.XS0MWABF == "Y") /* transmitted Airborne*/
          OMAREC.OMAERR = "Y";
          converseLib.validationFailed(789); /* updates not allowed*/
        else

          if (OMWREC.OMWCHGFL == "N") /* not in change mode*/
            if (COMMAREA.CACHGFL == "Y") /* yet ok to change*/
              OMWREC.OMWPF2CH = "Y"; /* ok to cancel*/
            end
          end
            /* **    if first time through and xomcd is blank, issue*/
                 /* confirm  will be done automatically.*/
                  /* if second time through and xomcd is blank, it*/
            /* **   needs to be flagged as an err.*/
          set OM0QM001.OM0QMREL normal; /* cancel reenter flag literal*/
          set OM0QM001.OM0QMREL skip; /* cancel reenter flag literal*/
          set OM0QM001.OM0QMREF normal; /* cancel reenter flag*/
          if (OM0QM001.XOMCD == " ") /* need cancel reason code*/
            if (OM0QW01.OM0QWP24 == "Y") /* confirmed xl*/
              OMAREC.OMAERR = "Y"; /* need reason*/
              converseLib.validationFailed(400); /* enter reason code, confirm xl*/
            end
          else
            OM0QSXC(); /* validate reason code& reenter flag*/
          end
        end
      end
    end
  end


  if (OMAREC.OMAERR == "Y") /* error was found*/
     /* next sentence*/
  else
    if (OM0QW01.OM0QWP24 == "N" /* if first pf 24, ask for confirm*/
     && OM0QM001.XOMCD == " ") 
      OM0QW01.OM0QWP24 = "Y";
      OM0QW01.OM0QWCON = "Y"; /* force converse*/
      converseLib.validationFailed(400); /* confirm cancel with pf 24*/
    else
      OM0Q471(); /* call cancel appl, process return*/
    end
  end


end // end OM0Q470

// call cancel appl for pf24
Function OM0Q471()


      /* ******************************************/
      /* * control processes to delete 1 product*/
      /* ******************************************/

      /* mark product as being cancelled*/

  OMWREC.OMWSELCD[OMWLNITX] = "E";

  OMWREC.XOMCD = OM0QM001.XOMCD; /* hold reason code*/
  OMWREC.OPUCRNTR = OM0QM001.OM0QMREF; /* cancel reenter flag*/
  OMWREC.OP1SUBXL[1] = 0; /* mark as product delete, not order*/

      /* if this is an International Airborne order that has already*/
      /* been transmitted ('TR'), update the order class to 'AU'*/
      /* to ensure the order is re-transmitted to Airborne with the*/
      /* updated information.*/

  if (OP1REC.XDVCD == "02"
   && OP1REC.XOCCD == "TR")
    OP1REC.XOCCD = "AU";
    OM0QSW7(); /* update order header*/
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(808); /* order class changed to 'au'*/
  end

      /* call routine to cancel product*/

  set OMEREC empty; /* initialize omerec return code*/

  call "OM0R" (OMWREC, OMEREC) {isNoRefresh = yes}; /* cancel product, re-do qtys*/

  if (OMEREC.OME-RETURN-CD != "00") /* check om0r return code*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSPF4(); /* master menu*/
    exit program; /* master menu failure*/
  else
    OM0QS-CALL-OZ2090();
  end

  if (OMWREC.OMWSELCD[OMWLNITX] == "E")
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(402); /* prod not cancelled*/
  else
    OM0QW01.OM0QWP24 = "N"; /* successful cancel*/
    OMWREC.OMWPKCHF = "Y"; /* pack change flag*/
    set OM0QM001.OM0QMREL skip, invisible; /* set reenter literal dark*/
    set OM0QM001.OM0QMREF skip, invisible; /* set reenter flag dark*/
  end


end // end OM0Q471

// secondary pfkey evaluation
Function OM0Q480()


      /* ***************************************************/
      /* * check pf keys for further action on this screen*/
      /* ***************************************************/


   /* IF OM0QW01.OM0QWP24 EQ 'Y';*/
   /* MOVE 332 TO EZEMNO;             /* cancel not confirmed*/
   /* MOVE 'N' TO OM0QW01.OM0QWP24;   /* reset flag*/
   /* END;                          /* not necessary to converse*/

  if (converseVar.eventKey is pf12) /* pf 12 edit only*/
    converseLib.validationFailed(009); /* press enter message*/
    OM0QW01.OM0QWCON = "Y"; /* force converse*/
    set OM0QM001.OP3ONOQT[1] cursor; /* put cursor on 1st qty*/
  end

  if (converseVar.eventKey is pf21) /* pf 21 add sizes*/
    if (OP1REC.XGPCD == "03"
     || OP1REC.XGPCD == "02")
      if (OP3REC.OP2LNIST == "AL"
       || OP3REC.OP2LNIST == "PA")
        OM0QS04(); /* check for a prepack*/
        if (OMAREC.OMAERR == "Y") /* database busy*/
          return;
        end
        if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
          OMAREC.OMAERR = "Y";
          converseLib.validationFailed(698);
          return;
        end
      end
    end
  end

  if (converseVar.eventKey is pf21) /* pf 21 add sizes*/
    OM0QW01.OM0QWP21 = "Y";
    OM0QW01.OM0QWSCR = 1; /* back to screen 1*/
    OM0QS25(); /* activate full size range*/
    if (OP3REC.OP2PRCOF == "Y" /* prices have been changed previously*/
     || OP3REC.OP2PRCVF == "Y" /* prices vary*/
     || OM0QW01.OM0QWPF6 == "Y") /* prices shown and open for change*/
      OM0Q250(); /* establish prices*/
    end
    OM0Q320(); /* move sizes, qtys, availability*/
    if (OM0QW01.OM0QWPF6 == "Y") /* prices shown and open for change*/
      OM0Q464();
    end
    OM0Q340(); /* set attributes*/
    OM0QW01.OM0QWCON = "Y"; /* force converse*/
    set OM0QM001.OP3ONOQT[1] cursor; /* put cursor on 1st qty*/
  end

  if (converseVar.eventKey is pf23) /* ocd comment pop-up*/
    if (OM0QM001.XOMCD == " ")
      converseLib.validationFailed(941);
      OMAREC.OMAERR = "Y";
    else
      OM0QS-OCD-CMT();
    end
  end


  if (converseVar.eventKey is enter /* valid pf keys in seq usually used*/
   || converseVar.eventKey is pf5   
   || converseVar.eventKey is pf9   
   || converseVar.eventKey is pf13  
   || converseVar.eventKey is pf18  
   || converseVar.eventKey is pf20)
    if (OM0QM001.OM0QWMOR == "Y") /* more to come*/
      OM0QW01.OM0QWSCR = 2; /* second screen*/
      OM0Q320(); /* move sizes, qtys, availability*/
      OM0QW01.OM0QWMOR = "N"; /* no more than two scrns*/
      OM0QM001.OM0QWMOR = "N"; /* no more than two scrns*/
      OM0QW01.OM0QWCON = "Y"; /* force converse*/
    end
  end

  OM0Q510(); /* transfers to pfkey chosen*/

   /* ***********************************************************/
end // end OM0Q480

// update changes to database
Function OM0Q490()

  TA1REC.TA1LOCAT[2] = "OM0Q490"; /* error diag - process name*/


      /* ********************************************************/
      /* first re-establish current date and time for accuracy*/
      /* on updates.*/
      /* ********************************************************/

  XX0XS01(); /* get system date and time*/

  if (OM0QW01.OM0QWCND == "Y" /* need date changed*/
   || OM0QW01.OM0QWCWH == "Y") /* warehouse changed*/
    OM0QS02(); /* check for prepack*/
    if (OMAREC.OMAERR == "Y")
      return;
    end
    if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
      OMAREC.OMAERR = "Y";
      if (OM0QW01.OM0QWCND == "Y") /* needdate changed*/
        converseLib.validationFailed(668); /* cant chg ndt order has prepack*/
        OSAREC.OSANU8 = OP1REC.OP1CUNDT;
        XPOP200();
        OM0QM001.OM0QMNDT = OSAREC.OSACH8;
        set OM0QM001.OM0QMNDT cursor, bold;
        return;
      else
        converseLib.validationFailed(667); /* cant chg wh order as prepack*/
        OM0QM001.XWHCD = OP1REC.XWHCD;
        set OM0QM001.XWHCD cursor, bold;
        return;
      end
    end
  end

      /* ********************************************************/
      /* * update order hdr for original hdr, add new hdr if*/
      /* * suborder split, update original sizerun record,*/
      /* * or delete old and create new sizerun.*/
      /* * write audit and tag records, call credit for changes*/
      /* * in value, and re-evaluate item and order status*/
      /* ********************************************************/

      /* ***********************************************/
      /* * warehouse or needdate or direct ship change*/
      /* * forces look at nike sub-order array*/
      /* ***********************************************/

  OMWREC.XOMCD = OM0QM001.XOMCD; /* pass reason code*/

  OP3REC.XOWCD = OM0QW01.XOWCD; /* for use in sub-o select*/

  if (OM0QW01.OP1CUNDT != OP1REC.OP1CUNDT /* if need date change*/
   || OM0QM001.XWHCD != OP1REC.XWHCD      /* or warehouse change*/
   || OM0QM001.XDSCD != OP1REC.XDSCD)     /* or direct ship*/
    OM0QW01.OM0QWSPL = "Y"; /* sub order split*/
    OM0Q491(); /* match/put in sub-ord array*/
  /* OM0QS-CALL-OZ2140;              /* slarse - change originals keys*/
  else
     /* subtract orig tot qty and valu of item to start order clean*/
          /* and add new totals later*/
    OP1REC.OP1OTUNT = OP1REC.OP1OTUNT - OP3REC.OP2TONOQ; /* tot qty*/
    OP1REC.OP1OVALU = OP1REC.OP1OVALU - OP3REC.OP2LNIVL; /* tot item valu*/
  end

          /* if the bulk order was found for the draw*/
          /* subtract off the item totals and add new*/
          /* totals later*/

  if (OM0QW01.OM0QWFBK == "Y") /* bulk found for draw*/
    if (OM0QW01.OM0QWQIC == "Y") /* qty was increased*/
      OM0QW04.OP1OTUNT = OM0QW04.OP1OTUNT - OM0QW03.OP2TONOQ;
      OM0QW04.OP1OVALU = OM0QW04.OP1OVALU - OM0QW03.OP2LNIVL;
    end
  end

  if (OMAREC.OMAERR == "N") /* no errs from prior process*/
    OM0Q497(); /* applies prices to op3rec*/
    if (OM0QW01.OM0QWCQP == "Y") /* qty changes*/
      OM0Q492(); /* update qtys on op3rec*/
      OM0Q495(); /* update item status*/
      OM0Q496(); /* qty change audit record*/
    end
    if (OM0QW01.OM0QW-CRED-CHK-DIR-SHP == "Y") /* credit check for dir shp*/
      OM0QS-CRED-CHK-DS();
    end
    if (OM0QW01.OM0QWQIC == "Y") /* some qty was increased*/
      if (OM0QW01.OM0QWFBK == "Y") /* bulk was found for draw*/
        OM0Q493(); /* decrement bulk*/
          /* reserved qtys may have been added from decrementing bulk*/
                  /* check item status again*/
        OM0Q495(); /* update item status*/
      end
    end
    if (OBIREC.OBIRTNCD == 0 /* availability called and displayed*/
     && OM0QW01.OM0QWCAL == "Y") /* prevents smart bulks from*/
                                   /* decrementing*/
      if (OM0QW01.OM0QWQIC == "Y" /* some qty was increased*/
       || OM0QW01.OM0QWOWH != OP1REC.XWHCD) /* whse chg*/
        OM0Q494(); /* decrement availability*/
      end
    end

  else /* -911 or chg cnt occured*/
    OP1REC.OP1GROUP = OMWREC.OP1GROUP; /* get original data*/
    OM0QSZ6(); /* refreshes records, availability*/
    return;
                                   /* return to loop to continue processing*/
  end

      /* Booking Month*/
  if (OP3REC.OP-BK-MO != OM0QW01.OP-BK-MO)
    OP3REC.OP-BK-MO = OM0QW01.OP-BK-MO;
  end


      /* *********************************************/
      /* * separate writes, for key change/not change*/
      /* *********************************************/

  if (OMAREC.OMAERR == "N") /* no errs from prior process*/
    if (OMWREC.OMWSORDN == OP1REC.OP1NORID)
      OM0Q498(); /* key not chgd, update*/
    else
      OM0Q499(); /* suborder split, upd, create records*/
    end
    OM0QM001.XOMCD = " ";
    OM0QM001.XOMABRV = " ";

  else /* -911 or chg cnt occured*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    OP1REC.OP1GROUP = OMWREC.OP1GROUP; /* get original data*/
    OM0QSZ6(); /* refreshes records, availability*/
    return;
                                   /* return to loop to continue processing*/
  end

      /* *********************************************/
      /* * if an existing*/
      /* * order was found, the status was updated*/
      /* * in OM0Q499.  if a suborder was created,*/
      /* * it took the item status (also in om0q499).*/
      /* **/
      /* * for the original suborder or the order that*/
      /* * was not split, the status must be checked*/
      /* * and possibly updated.  Then call to credit*/
      /* *********************************************/

  if (OMAREC.OMAERR == "N") /* no errs from prior process*/
    if (OM0QW01.OM0QW1PO == "N")
      OM0QSW7(); /* update hdr original (split or not)*/

      set OMEREC empty; /* initialize omerec return cd*/
      OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* move current op1rec to pass*/
      call "OM0N" (OMWREC, OMEREC) {isNoRefresh = yes}; /* update order status*/
      if (OMEREC.OME-RETURN-CD != "00") /* check om0n return code*/
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
        XSPF4(); /* master menu*/
        exit program; /* master menu failure*/
      end

      OP1REC.OP1GROUP = OMWREC.OP1GROUP;
                                   /* restore orig w/ new status*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* lock all updates to this point*/
      if (OMWREC.OMWSORDN == OP1REC.OP1NORID) /* no split*/
        OM0QSC2(); /* calcs credit changes for no split*/
                                   /* situation*/
        OM0QSC3(); /* calls cc1070*/
      else /* order split to sub-order*/
        OM0QSC4(); /* calcs credit changes and calls cc1070*/
                                   /* for original*/
      end
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
    end
  else /* -911 or chg cnt occured*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* get original data*/
    OM0QSZ6(); /* refreshes records, availability*/
    return;
                                   /* return to loop to continue processing*/
  end

   /* delete the original order header if there are no items left*/
  if (OM0QW01.OM0QW1PO == "Y") /* one product order*/
    OM0Q49I(); /* delete header*/
    if (OM0QW01.OM0QWSPL == "Y") /* sub order split*/
      OM0QS-CALL-OZ2140(); /* slarse - change originals keys*/
    end
    OP1REC.OP1NORID = OMWREC.OMWSORDN; /* new op1norid for passing*/
    OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* new ord is now current ord*/
  else
    if (OM0QW01.OM0QWSPL == "Y") /* sub order split*/
      OM0QS-CALL-OZ2140(); /* slarse - change originals keys*/
    end
    OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* current op1rec for passing*/
    OMWREC.OMWSORDN = OP1REC.OP1NORID;
                                   /* current op1norid for passing*/
  end


  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
   /* ***************************************************/
end // end OM0Q490

// find/create split suborder
Function OM0Q491()

  TA1REC.TA1LOCAT[2] = "OM0Q491"; /* error diag - process name*/


      /* ********************************************************/
      /* * first search for existing suborder that matches*/
      /* * item criteria, if found, make sure product does not*/
      /* * currently exist on order.  if no suborders match,*/
      /* * create a new one from the current order.  if whse*/
      /* * chg created suborder, write befor and after audit recs*/
      /* ********************************************************/


  call "IO0430" ("SS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* get all curr sub-orders*/

  if (SQLCA.VAGen_SQLCODE == 0)
    OM0QSRJ(); /* read in hdrs until match or last hdr*/
  else
    TA1REC.TA1LOCAT[1] = "SS";
    OM0QSYE(); /* load tairec with op1rec data*/
    OM0QSZ2(); /* common abort for reads*/
  end

  if (OM0QW01.OM0QWFLG == "Y") /* existing order was found for item*/
     /* next sentence*/
  else
    OM0Q49A(); /* create new sub-order*/
  end

     /* now write before and after audit (opurec) records*/
        /* for a change in whse*/

  if (OM0QW01.OM0QWOWH != OP1REC.XWHCD) /* original whse ne hdr whse*/
    OM0Q49B(); /* write 'before' version of opurec*/
    OM0Q49C(); /* write 'after' version*/
  end


end // end OM0Q491

// apply item changes
Function OM0Q492()


      /* *******************************************/
      /* * apply all qty  changes to various recs*/
      /* *******************************************/

  /* this loop will determine whether this change is*/
  /* a net decrease or a net increase.  for decreases, maintenance*/
  /* is recorded as an adjustment to original quantity only if the*/
  /* chnage is done less than 30 days from the cutoff date.*/
  /* For increases, the original quantity is adjusted up to 60*/
  /* days following the cutoff date.*/
  /*  */
  /* TT#5837 Original quantity calculation*/
  /* Total original quantity will gets changed till 60 days from*/
  /* system order cutoff-date whether quantity increased or*/
  /* decreased*/
  /*  */
  OM0QW01.OM0QW-UPDATE-ORIG-QTYS-FL = "N";
  OMAREC.OMASUB = 1;
  OM0QW01.OM0QWQHS = 0;
  while (OMAREC.OMASUB < 41)
    OM0QW01.OM0QWQHS = OM0QW01.OM0QWQHS + OM0QW01.OM0QWCQT[OMASUB];
    OMAREC.OMASUB = OMAREC.OMASUB + 1;
  end
  /*  */
  /* TT# 5837 changes begin*/
  /* IF OM0QW01.OM0QWQHS GE 0*/
  /* AND OM0QW01.OM0QW-DAYS-PAST-CUTOFF LT 60;*/
  /* MOVE 'Y' TO OM0QW01.OM0QW-UPDATE-ORIG-QTYS-FL;*/
  /* END;*/
  /*  */
  /* IF OM0QW01.OM0QWQHS LT 0*/
  /* AND OM0QW01.OM0QW-DAYS-PAST-CUTOFF LT 30;*/
  /* MOVE 'Y' TO OM0QW01.OM0QW-UPDATE-ORIG-QTYS-FL;*/
  /* END;*/
  /*  */
  /* IF OM0QW01.OM0QWQHS LT 0*/
  /* AND OM0QM001.XOMCD = '40'*/
  /* AND OM0QW01.OM0QW-DAYS-PAST-CUTOFF LT 60;*/
  /* MOVE 'Y' TO OM0QW01.OM0QW-UPDATE-ORIG-QTYS-FL;*/
  /* END;*/
  if (OM0QW01.OM0QW-DAYS-PAST-CUTOFF < 60)
    OM0QW01.OM0QW-UPDATE-ORIG-QTYS-FL = "Y";
  end
  /* TT# 5837 changes end*/

      /* *******************************************/
      /* * when updating fields dependent on deadline,*/
      /* * treat setasides as if not past deadline*/
      /* * (as they are not real orders)  and treat*/
      /* * prop as always past the deadline.*/
      /* *******************************************/

  if (OP1REC.XBDCD != "0"              /* bulk or draw*/
   && XBDTBL.XBDBKOFL[OM0QWBDS] == "Y" /* bulk*/
   && XBDTBL.XBDSETFL[OM0QWBDS] == "Y") /* flex or smart*/
    OM0QW01.OM0QWPAO = "N";
    OM0QW01.OM0QW-DAYS-PAST-CUTOFF = 0;
    OM0QW01.OM0QW-UPDATE-ORIG-QTYS-FL = "Y";
  else
    if (XOTTBL.XOTPROPF[OM0QWOTS] == "Y") /* prop order*/
      OM0QW01.OM0QWPAO = "Y";
      OM0QW01.OM0QW-DAYS-PAST-CUTOFF = 60;
      OM0QW01.OM0QW-UPDATE-ORIG-QTYS-FL = "N";
    end
  end

  /* reinitialize ws and do the quantity updates*/
  /*  */
  set OPRREC empty;
  OM0QW01.OM0QWQHS = 0; /* init qty history amount*/
  OMASUB = OM0QW01.OM0QWSZF; /* first chosen size*/

  while (OMASUB < 41 /* that is in size range*/
   && OMASUB <= OM0QW01.OM0QWSZL)
    if (OM0QW01.OM0QWCQT[OMASUB] != 0) /* qty changed*/
      OM0Q49D(); /* applies qty changes*/
    end
    OMASUB = OMASUB + 1; /* record subscript*/
  end

      /* for any quantity change, force sales pgm re-edit*/

  OMWREC.OMWSPCHK = "Y"; /* check sales program qualifications*/

  if (OM0QW01.OM0QW-DAYS-PAST-CUTOFF >= 30)
    OM0Q49E(); /* update maintenance history*/
  end


end // end OM0Q492

// decrement bulk qtys
Function OM0Q493()

  TA1REC.TA1LOCAT[2] = "OM0Q493 "; /* process name for diags*/


      /* om0qw03 = bulk sizerun*/
      /* om0qw04 = bulk hdr*/
      /* om0qw02 = bulk item*/

    /* this routine updates the bulk order just drawn from.*/

      /* take as much original qty (op3orgqt) as possible*/
      /* from the bulk, but don't make negative.*/
     /* if the bulk has reserved qtys, take as much reserved*/
     /* qty as possible, but, if dont allow negative nbrs in*/
     /* op3ohrqt.*/
  set OPRREC empty;

  OMAREC.OMASUB = OM0QW01.OM0QWSZF;

  while (OMAREC.OMASUB < 41
   && OMAREC.OMASUB <= OM0QW01.OM0QWSZL) /* last active size*/
    if (OM0QW01.OM0QWCQT[OMASUB] > 0) /* and positive change*/
       /* orig qty*/
      if (OM0QW01.OM0QWCQT[OMASUB] > OM0QW03.OP3ORGQT[OMASUB])
        OM0QW03.OP3ORGQT[OMASUB] = 0;
      else
        OM0QW03.OP3ORGQT[OMASUB] = OM0QW03.OP3ORGQT[OMASUB]         - OM0QWCQT[OMASUB];
      end
       /* on ord qty*/
      OM0QW03.OP3ONOQT[OMASUB] = OM0QW03.OP3ONOQT[OMASUB] -       OM0QWCQT[OMASUB];
      if (OM0QW03.OP3OHRQT[OMASUB] > 0)
        if (OM0QW01.OM0QWCQT[OMASUB] > OM0QW03.OP3OHRQT[OMASUB])
             /* ****  must move qty to holding because of CSP line length*/
          OM0QW01.OM0QWQTY = OM0QW03.OP3OHRQT[OMASUB];
          OP3REC.OP3OHRQT[OMASUB] = OP3REC.OP3OHRQT[OMASUB] + OM0QWQTY;
          OP3REC.OP2TOHRQ = OP3REC.OP2TOHRQ + OM0QW03.OP3OHRQT[OMASUB];
          OM0QW03.OP3OHRQT[OMASUB] = 0;
        else
          OP3REC.OP2TOHRQ = OP3REC.OP2TOHRQ + OM0QW01.OM0QWCQT[OMASUB];
          OP3REC.OP3OHRQT[OMASUB] = OP3REC.OP3OHRQT[OMASUB] +           OM0QWCQT[OMASUB];
          OM0QW03.OP3OHRQT[OMASUB] = OM0QW03.OP3OHRQT[OMASUB] -           OM0QWCQT[OMASUB];
        end
      end
      OM0QW01.OM0QWTOT = OM0QW01.OM0QWTOT + OM0QW01.OM0QWCQT[OMASUB];

      /* create rebook audit if rebook draw (only positive qtys)*/
      if (OP1REC.XBDCD == "4") /* rebook draw*/
        OPRREC.OPRTRBKQ = OPRREC.OPRTRBKQ + OM0QW01.OM0QWCQT[OMASUB];
        OPRREC.OP2NSIZE = OPRREC.OP2NSIZE + 1;
        OPRREC.OP3SZAFL[OMASUB] = "Y";
        OPRREC.OPRRBKQT[OMASUB] = OM0QW01.OM0QWCQT[OMASUB];
      end

    end
    OMAREC.OMASUB = OMAREC.OMASUB + 1;
  end


          /* now update bulk sizerun*/

  OM0QSW4(); /* update bulk using om0qw03*/

          /* now update bulk hdr with new totals*/

  OM0QW04.OP1OTUNT = OM0QW04.OP1OTUNT + OM0QW03.OP2TONOQ;
  OM0QW04.OP1OVALU = OM0QW04.OP1OVALU + OM0QW03.OP2LNIVL;

  OM0QSW5(); /* update bulk using om0qw04*/

         /* write rebook audit if needed ;*/

  if (OPRREC.OPRTRBKQ > 0)
    OM0QSW3();
  end

end // end OM0Q493

// decrement availability
Function OM0Q494()

  TA1REC.TA1LOCAT[2] = "OM0Q494"; /* error diag process name*/


      /* ********************************************************/
      /* * load opprec with required data and call op1610*/
      /* * to decrement availability*/
      /* ********************************************************/


     /* call op1610 to decrement all orders that*/
     /* display availability.*/

  OPPREC.OPPDECAV = "Y";

  /* if need date is in the past, we want to decrement availability*/
  /* as of today.*/

  if (OM0QW01.OP1CUNDT < OMAREC.OMACDT)
    OPPREC.OP1CUNDT = OMAREC.OMACDT; /* use today's date*/
  else
    OPPREC.OP1CUNDT = OM0QW01.OP1CUNDT; /* use real need date*/
  end

  OPPREC.XDSCD = OP1REC.XDSCD;
  OPPREC.XWHCD = OM0QM001.XWHCD;

  if (SYCREC.XPRCD == "22") /* if a crested product*/
    OPPREC.SY1STNBR = SYCREC.SY1BSTNB; /* use the blank style*/
    OPPREC.SY2CLRID = SYCREC.SY2BCLCD; /* and the blank color*/
    if (OP1REC.XDSCD == "1") /* if a crested direct ship*/
      OPPREC.XWHCD = "51"; /* default warehouse to '51'*/
      OPPREC.XDSCD = " "; /* default direct ship to ' '*/
    end
  else
    OPPREC.SY1STNBR = OP3REC.SY1STNBR; /* use the finished style*/
    OPPREC.SY2CLRID = OP3REC.SY2CLRID; /* and the finished color*/
  end

    /* apparel direct ship use warehouse 51*/

  if (XOTTBL.XOTDSAVL[OM0QWOTS] == "Y" /* display available flag*/
   && OP3REC.XGPCD == "03"             /* apparel*/
   && OP1REC.XDSCD == "1")             /* direct ship*/
    OPPREC.XWHCD = "51"; /* default warehouse to '51'*/
    OPPREC.XDSCD = " "; /* default direct ship to ' '*/
  end

  OPPREC.XDMCD = OP3REC.XDMCD;
  OPPREC.XOTCD = OP1REC.XOTCD;
  OPPREC.XOCCD = OP1REC.XOCCD;
  OPPREC.XBCCD = OP1REC.XBCCD;
  OPPREC.XGPCD = OP3REC.XGPCD;
  OPPREC.XQACD = OP3REC.XQACD;
  OPPREC.XOWCD = OP3REC.XOWCD;
  OPPREC.XSDCD = OP3REC.PC2INSEG;

   /* MOVE OP3REC.XEGCD TO OPPREC.XSACD; avail still using*/
  OPPREC.XSACD = "000"; /* '000' as of 12/90*/

  OPPREC.XPGCD = OP3REC.XPGCD;
  OPPREC.XUMCD = OP3REC.XUMCD;
  OPPREC.XLCCD = OBIREC.XLCCD;


  if (OM0QW01.OM0QWOWH != OP1REC.XWHCD) /* wharehouse change*/
    OMAREC.OMASUB = 1;
    while (OMASUB < 41)
      if (OP3REC.OP3SZAFL[OMASUB] == "Y")
        OPPREC.OP3SZAFL[OMASUB] = OP3REC.OP3SZAFL[OMASUB];
        OPPREC.OPPQTY[OMASUB] = OP3REC.OP3ONOQT[OMASUB];
      end
      OMASUB = OMASUB + 1;
    end
  end

  call "OP1610" (OPPREC, SQLCA) {isNoRefresh = yes, isExternal = yes};

  if (OPPREC.OPPRTNCD == 0) /* good return*/
    /* next sentence*/
  else
    OM0QSYW(); /* load ta1rec with opprec*/
    OM0QSZ5(); /* evaluate return code*/
  end

end // end OM0Q494

// update item status
Function OM0Q495()


      /* on-order qty can be 0, or > 0*/
      /* allocatd qty can be 0, or = on-order, or < on-order*/
      /* reserve = on-hand reserve + work-in-process reserve*/
                   /* can be 0, or = on-order, or < on-order*/
      /* shipped  qty can be 0, or > 0.*/

   /* save orig stat*/

  OM0QW01.OP2LNIST = OP3REC.OP2LNIST;

  if (OP3REC.OP2TONOQ > 0)
    if (OP3REC.OP2TALCQ == OP3REC.OP2TONOQ)
      OP3REC.OP2LNIST = "AL"; /* allocated*/
    else
      if (OP3REC.OP2TALCQ > 0)
        OP3REC.OP2LNIST = "PA"; /* partially allocated*/
      else /* alloc eq 0*/
        if (OP3REC.OP2TOHRQ == OP3REC.OP2TONOQ)
          OP3REC.OP2LNIST = "RS"; /* reserved*/
        else
          if (OP3REC.OP2TOHRQ > 0)
            OP3REC.OP2LNIST = "PR"; /* partially reserved*/
          else /* reserve eq 0*/
            if (OP3REC.OP2TSHPQ > 0)
              OP3REC.OP2LNIST = "PS"; /* partially shipped*/
            else
              OP3REC.OP2LNIST = "OP"; /* open*/
            end
          end
        end
      end
    end
  else /* on-order eq 0;*/
    if (OP3REC.OP2TSHPQ > 0)
      OP3REC.OP2LNIST = "SH"; /* shipped*/
    else /* shipped eq 0*/
      OP3REC.OP2LNIST = "XL"; /* cancelled*/
    end
  end

      /* retrieve descrip for map if we chgd status*/
      /* and hold index in case we re-converse and need to use*/
      /* it again*/

  if (OM0QW01.OP2LNIST != OP3REC.OP2LNIST)
    if (OP3REC.OP2LNIST in XOSTBL.XOSCD)
      OM0QM001.XOSABRV = XOSTBL.XOSABRV[sysVar.arrayIndex];
    end

    OM0QW01.OM0QWXOS = sysVar.arrayIndex; /* hold index to use later*/

     /* if status changed - date stamp stat change*/

    OP3REC.OP2LNSDT = XX0XW01.XX0XWDAT;
  end




end // end OM0Q495

// write audit/rbk recs
Function OM0Q496()

        /* ********************************************/
        /* *  write rebook recs if user is rebooking*/
        /* *  write audit recs for everything except:*/
        /* *  1) gpc = 02, not past deadline*/
        /* *  2) bulk setasides*/
        /* *  3) rebook bulks and draws*/
        /* ********************************************/

  if (XOMTBL.XOMRBKFL[OM0QWXOM] == "Y") /* rebook maint reason*/
    if (OM0QW01.OM0QWQDN == "Y") /* qty decreased*/
      OM0QSW3(); /* write rebook audit*/
    end
  else
    if (OP1REC.XBDCD != "0"              /* if bulk or draw*/
     && XBDTBL.XBDBKOFL[OM0QWBDS] == "Y" /* if bulk order*/
     && XBDTBL.XBDSETFL[OM0QWBDS] == "Y") /* if setaside*/
      /* next sentence*/
    else
      if (OP3REC.XGPCD == "02"
       && XOTTBL.XOTFUTRF[OM0QWOTS] == "Y"
       && OM0QW01.OM0QWPAO == "N")
         /* next sentence*/
      else
        OPUREC.OPUAUDTP = "QC"; /* build qty chg report*/
        OM0QSW2(); /* write opurec*/
      end
    end
  end



   /* ****************************************************/
end // end OM0Q496

// prices to item/set sz active
Function OM0Q497()

      /* *******************************************/
      /* * apply all price changes to sizerun rec*/
      /* * if no additional sizes were requested, and no changes*/
      /* *  were made to current prices, dont move prices.*/
      /* *******************************************/


         /* if full size range was requested and there were no*/
        /* reasons to establish prices, do so now*/

  if (OM0QW01.OM0QWP21 == "Y" /* full size range requested*/
   || OMWREC.OMWPF21 == "Y")  /* came in of full size range*/
    if (OM0QW01.OM0QWCQP == "Y") /* maybe additional sizes ordered*/
      if (OM0QW01.OM0QWPF6 == "N" /* prices not requested*/
       && OP3REC.OP2PRCOF == "N"  /* no previous overrides*/
       && OP3REC.OP2PRCVF == "N") /* prices didnt vary*/
        OM0Q49H(); /* establish prices*/
      end
    end
  end


  OM0Q49F(); /* moves price related fields to op3rec*/
   /* also inactivates sizes*/


end // end OM0Q497

// update original order
Function OM0Q498()

  TA1REC.TA1LOCAT[2] = "OM0Q498"; /* error diag group name*/


      /* *********************************************/
      /* * write for key not changed, order not split*/
      /* *********************************************/

  OM0QSW6(); /* key not chgd, update op3rec*/
  OM0QS-CALL-OZ2090(); /* call oz2090 to update vsoscr01*/

  OMWREC.OMWSELCD[OMWLNITX] = "V"; /* mark as viewed*/

        /* now update the op1rec with new totals*/

  OP1REC.OP1OTUNT = OP1REC.OP1OTUNT + OP3REC.OP2TONOQ; /* add tot qty*/
  OP1REC.OP1OVALU = OP1REC.OP1OVALU + OP3REC.OP2LNIVL; /* add tot valu*/

   /* since the key has not changed the order has not split*/
   /* so we don't care that it's a 1 product order. therefore*/
   /* init the 1 product order flag to no to bypass the header*/
   /* delete logic that occurs later on.*/

  OM0QW01.OM0QW1PO = "N";

end // end OM0Q498

// update suborders for split
Function OM0Q499()


          /* ***********************************************/
          /* *  this process drives the next level, which*/
          /* *  updates the appropriate hdrs if there is*/
          /* *  a split suborder situation*/
          /* *    plus it adds the new item and*/
          /* *    deletes the old item*/
          /* **/
          /* *    this actually shifts the product from*/
          /* *    the original order to the new*/
          /* ***********************************************/


       /* Default the Order Class on the Order Header to*/
       /* 'AU' for International Order with current 'TR'*/
       /* Order Class.*/

  if (OP1REC.XDVCD == "02")
    if (OP1REC.XOCCD == "TR")
      OP1REC.XOCCD = "AU";
    end
  end

         /* we still are holding the op1rec that was found*/
         /* or created to accomodate the item changes*/

  OP3REC.OP1NORID = OP1REC.OP1NORID;
  OM0QSW8(); /* add new key for op3rec*/
  OM0QS-CALL-OZ2090();
  OP3REC.OP1NORID = OMWREC.OMWSORDN; /* original key*/
  OM0QSW9(); /* delete old op3rec*/


      /* **********************************************/
      /* * now see if need to add header or update the header*/
      /* **********************************************/

  if (OP1REC.OP1NORID > OMCREC.OMCMAX) /* created a new sub-order*/
    OP1REC.XOSCD = OP3REC.OP2LNIST; /* line item status to order*/
    OP1REC.OP1OTUNT = OP3REC.OP2TONOQ; /* item qty to hdr*/
    OP1REC.OP1OVALU = OP3REC.OP2LNIVL; /* item value to hdr*/
    OM0QSWB(); /* write op4rec*/
    OM0QSWC(); /* write op5rec*/
    if (OP1REC.OP1EXPDF == "Y") /* expedite flag on*/
      OM0QSWD(); /* write oibrec*/
    end
    OM0QSWA(); /* write op1rec*/
    OMWREC.OMWMULSO = "Y"; /* mult sub-o flag*/
      /* removed a call to om0qs49  10/10/90*/
      /* om0qs49 wrote tags for split suborders*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* keep changes thus far*/
    CC1REC.CC1CLRSN = 2; /* new order created*/
    OM0QSC1(); /* gathers credit checking data*/
    OM0QSC3(); /* calls cc1070*/

      /* write a vsohcr01 for the created suborder*/
    OM0QS-ADD-VSOHCR01();

      /* at this point the new suborder (created) is in op1rec.*/
      /* the original suborder is in omwrec.op1group.*/
      /* this is neccessary to call om0n and credit in the*/
      /* specified order with the correct records*/

    OMWREC.OMWSORDN = OP1REC.OP1NORID; /* make nike_ord_id unequal*/
     /* to show that sub-o was created, found*/
    OP1REC.OP1GROUP = OMWREC.OP1GROUP; /* make original hdr current*/
  else /* if found sub-order for item*/

    OP1REC.OP1OTUNT = OP1REC.OP1OTUNT + OP3REC.OP2TONOQ; /* add tot qty*/
    OP1REC.OP1OVALU = OP1REC.OP1OVALU + OP3REC.OP2LNIVL; /* add tot valu*/
    OM0QSW7(); /* item added to existing sub-0*/
    set OMEREC empty; /* initial omerec return cd*/
    OM0QW01.OP1GROUP = OMWREC.OP1GROUP; /* oringinal to holding*/
    OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* new order to omwrec*/
    call "OM0N" (OMWREC, OMEREC) {isNoRefresh = yes}; /* redo order status*/
    if (OMEREC.OME-RETURN-CD != "00") /* check om0n return code*/
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
      XSPF4(); /* master menu*/
      exit program; /* master menu failure*/
    end
    OP1REC.OP1GROUP = OMWREC.OP1GROUP; /* updated with status*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* keep changes thus far*/
    OM0QSC5(); /* gathers credit checking data*/

      /* write a vsohcr01 for the found suborder*/
    OM0QS-ADD-VSOHCR01();

      /* at this point the found suborder is in op1rec.*/
      /* the original suborder is in om0qw01.op1group.*/
      /* need three hdr areas in this case to call om0n*/
      /* with omwrec.op1group, cc1070 with op1rec after that*/
      /* and return to the original to stay in product loop*/

    OMWREC.OMWSORDN = OP1REC.OP1NORID; /* make nike_ord_id unequal*/
     /* to show that sub-o was created, found*/
    OP1REC.OP1GROUP = OM0QW01.OP1GROUP; /* make original hdr current*/
  end

  OMWREC.OMWSELCD[OMWLNITX] = "N"; /* mark for removal*/

end // end OM0Q499

// create new suborder
Function OM0Q49A()


      /* ********************************************************/
      /* * first move the current hdr record to the new record,*/
      /* * add 1 to the highest value of op1norid, then init*/
      /* * applicable fields and values.*/
      /* **/
      /* * NOTE:  if any new fields are added to the hdr, and*/
      /* * should be initialized when creating a new op1rec,*/
      /* * be sure they are added to this process.*/
      /* ********************************************************/


  OP1REC.OP1GROUP = OMWREC.OP1GROUP;

  OP1REC.OP1NORID = OMCREC.OMCMAX + 1; /* highest op1norid +1*/

  OP1REC.XWHCD = OM0QM001.XWHCD; /* load new warehouse*/
  OP1REC.OP1CUNDT = OM0QW01.OP1CUNDT; /* load new nd*/
  OP1REC.XDSCD = OM0QM001.XDSCD; /* load new ds code*/


  if (OP1REC.XDVCD == "02") /* international*/
    if (OP1REC.XOCCD == "AS" /* airborne order*/
     || OP1REC.XOCCD == "AU") /* updated airborne order*/
      OP1REC.XOCCD = "  "; /* init order class to blank*/
    end /* for new sub order*/
  end


   /* init certain op1rec fields for a new sub-order*/

  OP1REC.OP1NTMAL = 0; /* nbr times allocated*/
  OP1REC.OP1LALDT = 0; /* last aloc date*/
  OP1REC.OP1OSRID = 0; /* service rep id*/
  OP1REC.OP1SPHDF = "N"; /* special handling flag*/
  OP1REC.OP1OMCMF = "N"; /* order maint comments flag*/

  OP1REC.OP1OVALU = 0; /* order value*/
  OP1REC.OP1OTUNT = 0; /* order units*/
  OP1REC.OP1ALCQF = "N"; /* allocated quantities flag*/
  OP1REC.OP1RSVQF = "N"; /* reserved quantities flag*/
  OP1REC.OP1SHPQF = "N"; /* shipped quantities flag*/

  if (OP1REC.XCSCD == "00")
    OP1REC.XCHCD[1] = "00"; /* refer to credit reason*/
    OP1REC.XCHCD[2] = "00"; /* "*/
    OP1REC.XCHCD[3] = "00"; /* "*/
    OP1REC.OP1CSADT = 0; /* credit status add date*/
    OP1REC.OP1CSATM = 0; /* credit status add time*/
    OP1REC.OP1DCHLD = 0; /* days credit hold*/
    OP1REC.OP1CKAMT = 0;
    OP1REC.OP1CCKOQ = 0;
    OP1REC.OP1PCSCD = "00";
  end



end // end OM0Q49A

// write 'before' audit record
Function OM0Q49B()


      /* ******************************************/
      /* * write production report recs if:*/
      /* *   warehouse has changed*/
      /* ******************************************/

  OPUREC.OPUAUDTP = "WH";

   /* do report recs for old whse*/

  OPUREC.OP1NORID = OMWREC.OMWSORDN; /* old sub-ord*/
  OPUREC.XWHCD = OM0QW01.OM0QWOWH; /* orig whse*/
  OM0QS8C(); /* negate qtys by size*/
  OM0QSW2(); /* write opurec*/

   /* ****************************************************/
end // end OM0Q49B

// write 'after' audit record
Function OM0Q49C()


      /* ******************************************/
      /* * write production report recs if:*/
      /* *   warehouse has changed*/
      /* ******************************************/


  OPUREC.OPUAUDTP = "WH";

   /* do report recs for new whse*/

  OPUREC.OP1NORID = OP1REC.OP1NORID; /* new sub-ord*/
  OPUREC.XWHCD = OP1REC.XWHCD; /* new whse*/
  OM0QS8D(); /* load qtys by size*/
  OM0QSW2(); /* write opurec*/

   /* ****************************************************/
end // end OM0Q49C

// apply qty changes
Function OM0Q49D()


      /* *******************************************/
      /* * apply all qty changes to various records*/
      /* *******************************************/


      /* apply changes to op3rec qtys*/

  OP3REC.OP3ONOQT[OMASUB] = OP3REC.OP3ONOQT[OMASUB] + OM0QWCQT[OMASUB];
  OP3REC.OP2TONOQ = OP3REC.OP2TONOQ + OM0QWCQT[OMASUB];

      /* save net changes for maintenence history*/

  OM0QW01.OM0QWQHS = OM0QW01.OM0QWQHS + OM0QWCQT[OMASUB];

       /* add chg qty to original qty or cancel qty*/

  if (OM0QW01.OM0QW-UPDATE-ORIG-QTYS-FL == "Y")
                                   /* counts as part of orig order*/
    OP3REC.OP3ORGQT[OMASUB] = OP3REC.OP3ORGQT[OMASUB] + OM0QWCQT[OMASUB];
  else
    OP3REC.OP3CNLQT[OMASUB] = OP3REC.OP3CNLQT[OMASUB] - OM0QWCQT[OMASUB];
    if (OP3REC.OP3CNLQT[OMASUB] < 0) /* cancel qty negative*/
      OP3REC.OP3CNLQT[OMASUB] = 0; /* cant be negative*/
    end
  end

      /* qty decrease below input on-order qty*/

  if (OM0QW01.OM0QWCQT[OMASUB] < 0) /* qty was decreased*/
    if (XOMTBL.XOMRBKFL[OM0QWXOM] == "Y") /* user wants qty rebooked*/
      /* keep separate for update of cancel qty when write*/
      /* keep as positive amount*/

      OM0QWQDC[OMASUB] = OM0QWCQT[OMASUB] * -1; /* make chge positive;*/

              /* finish building rebook audit record*/

              /* accumulate rebook total qty*/
      OPRREC.OPRTRBKQ = OPRREC.OPRTRBKQ + OM0QW01.OM0QWQDC[OMASUB];
              /* accumulate number of sizes active for rebook record*/
      OPRREC.OP2NSIZE = OPRREC.OP2NSIZE + 1;
              /* move size active flag and decreased quantity*/
      OPRREC.OP3SZAFL[OMASUB] = OP3REC.OP3SZAFL[OMASUB];
      OPRREC.OPRRBKQT[OMASUB] = OM0QW01.OM0QWQDC[OMASUB];
    end
  else

            /* qty increased and availability was displayed*/
             /* so load opprec for decrementing avail*/
    if (OBIREC.OBIRTNCD == 0)
      OPPREC.OP3SZAFL[OMASUB] = "Y";
      OPPREC.OPPQTY[OMASUB] = OM0QW01.OM0QWCQT[OMASUB];
    end
  end

          /* move qty change to audit record qty*/
  OPUREC.OPUAUDQT[OMASUB] = OM0QW01.OM0QWCQT[OMASUB];

end // end OM0Q49D

// update maint fields
Function OM0Q49E()


      /* *******************************************/
      /* * update maintenance qtys if past deadline*/
      /* *******************************************/


  OMASUB2 = 4; /* loop 4 histories*/

  while (OMASUB2 > 1) /* shift hist stack down one*/
    OMASUB = OMASUB2 - 1; /* leaving hist(1) open*/
    OP3REC.XOMCD[OMASUB2] = OP3REC.XOMCD[OMASUB];
    OP3REC.XMTCD[OMASUB2] = OP3REC.XMTCD[OMASUB];
    OP3REC.OP2OMQTY[OMASUB2] = OP3REC.OP2OMQTY[OMASUB];
    OP3REC.OP2OMDT[OMASUB2] = OP3REC.OP2OMDT[OMASUB];
    OP3REC.OP1MTREP[OMASUB2] = OP3REC.OP1MTREP[OMASUB];
    OMASUB2 = OMASUB2 - 1;
  end


  OP3REC.XOMCD[1] = OM0QM001.XOMCD; /* reason code*/

  OP3REC.XMTCD[1] = " "; /* ; maint.type code*/

  OP3REC.OP2OMQTY[1] = OM0QW01.OM0QWQHS; /* qty change amt*/

  OP3REC.OP2OMDT[1] = XX0XW01.XX0XWDAT; /* change date*/

  OP3REC.OP1MTREP[1] = OMWREC.OP1MTREP; /* service rep id*/





end // end OM0Q49E

// moves prices to op3rec
Function OM0Q49F()

      /* *******************************************/
      /* * move price related fields from om0qw01 to op3rec*/
      /* *******************************************/

  OM0QW01.OM0QWPRC = 0; /* init price compare*/

  OMASUB = OM0QW01.OM0QWSZF; /* first chosen size*/

  while (OMASUB < 41 /* that is in size range*/
   && OMASUB <= OM0QW01.OM0QWSZL)
    if (OP3REC.OP3SZAFL[OMASUB] == "Y") /* active size*/
      if (OP3REC.OP3ONOQT[OMASUB] > 0 /* ordered qty*/
       || OP3REC.OP3SHPQT[OMASUB] > 0 /* SHIPPED QTY*/
       || OP3REC.OP3CNLQT[OMASUB] > 0 /* CANCELLED QTY*/
       || OM0QW01.OM0QWCQT[OMASUB] != 0) /* changed qty*/
        OP3REC.SY5PRCUN[OMASUB] = OM0QW01.SY5PRCUN[OMASUB];
        OP3REC.OP3PRCOF[OMASUB] = OM0QW01.OP3PRCOF[OMASUB];
        OM0QS65(); /* check price vary flag*/
      else
        OP3REC.OP3SZAFL[OMASUB] = "N"; /* inactivate size*/
      end
    end
    OMASUB = OMASUB + 1; /* record subscript*/
  end

  OP3REC.OP2PRCOF = OM0QW01.OP2PRCOF; /* item price override*/
  OP3REC.OP2PRCVF = OM0QW01.OP2PRCVF; /* price vary flag*/
  OP3REC.OP2GBLOF = OM0QW01.OP2GBLOF; /* global override flag*/

     /* now set at least one size active flag 'on' so that db1000*/
       /* does not delete the size record.*/

  OMASUB = OM0QW01.OM0QWSZF; /* first chosen size*/
  OM0QW01.OM0QWACT = "N"; /* init sizes active flag*/

  while (OM0QW01.OM0QWACT == "N" /* no sizes are active*/
   && OMASUB <= OM0QW01.OM0QWSZL) /* sub is within active sz range*/
    if (OP3REC.OP3SZAFL[OMASUB] == "Y") /* active size*/
      OM0QW01.OM0QWACT = "Y"; /* set flag to get out of loop*/
    else
      if (OMASUB == OM0QW01.OM0QWSZL) /* sub at last size, still none active*/
        OP3REC.OP3SZAFL[OMASUB] = "Y"; /* set one active*/
        OM0QW01.OM0QWACT = "Y"; /* set flag to get out of loop*/
      end
    end
    OMASUB = OMASUB + 1;
  end

end // end OM0Q49F

// establish prices in upd
Function OM0Q49H()


  TA1REC.TA1LOCAT[2] = "OM0Q49H"; /* diag location 2*/


   /* *********************************************************/
   /* *  this routine takes several steps in calculating prices*/
   /* *    it may seem redundant throughout OM0Q, but will*/
   /* *    more than likely only be done once.  Either in setting*/
   /* *    up the screen for full size range, defaulting price*/
   /* *    or getting prices for op3rec when additional sizes*/
   /* *    were ordered.*/
   /* **/
   /* *  this particular process is for accessing only those*/
   /* *    prices for additionally ordered sizes in the update*/
   /* *    routine.  The additional ordered sizes are*/
   /* *    characterized by 0 in op3onoqt and a + amount in*/
   /* *    om0qwcqt for that size.*/
   /* *********************************************************/

    /* first set up unit of measure conver factor for the order.*/
      /* note - this is new u.o.m., which may eq old u.o.m.*/

  OM0Q251(); /* u.o.m. check*/

  OM0QW01.OM0QWPRC = 0; /* 0 w-s price for vary check*/

  OM0QWZPR = "N"; /* init flag to force zero price*/

  if (KUCREC.KUCCOID == 0) /* if co rec not read yet*/
    KUCREC.KUCCOID = OP1REC.KUCCOID; /* frmt co nbr*/
    OM0QSRH(); /* read it for account code*/
  end

   /* if this in an international account*/
     /* and the account class is 33 get the price type*/
     /* code from the nim rec.*/
   /* if the account class is 31 or 32 or any 06 acct type*/
   /* get the price type from the invoice speciality table.*/


  if (OP1REC.XDVCD == "02") /* if an int'l order*/
    if (KUCREC.XAUCD == "33") /* if customer is an ind distributr*/
      OM0Q256(); /* get price type code from nimrec*/
    else /* else*/
      OM0Q257(); /* get it from iverec*/
    end
  end


  if (OP1REC.XDVCD == "02") /* if an int'l order*/
    /* next sentence                ;   redo price even if a draw*/
  else /* otherwise*/
    if (OM0QW01.OM0QWFBK == "Y" /* order is a draw, found bulk*/
     && XBDTBL.XBDSETFL[OM0QWBDS] == "N") /* customer draw*/
      OM0Q253(); /* bulk prices to draw prices*/
      return;
    end
  end


  if (OP1REC.SP1ID != " ") /* order is on sales program*/
    OM0QSR6(); /* use sales pgm prices*/
  end

  if (OP1REC.XDVCD == "02") /* if an int'l order*/
    if (IVEREC.IVEPCIND == "C")
      OM0Q258(); /* get price from cost table*/
    else
      OM0Q254(); /* get style or color prices*/
    end
    if (OM0QW01.OM0QWCLP > 0) /* adjust price by color*/
      if (KUCREC.XAUCD == "33")
        OM0QW01.OM0QWIPC = mathLib.round(OM0QW01.OM0QWCLP *                                     VNLXPY01.NL-PRC-COST-PCT / 100, -mathLib.decimals(OM0QW01.OM0QWIPC));
        OM0QW01.OM0QWCLP = OM0QW01.OM0QWCLP + OM0QW01.OM0QWIPC;
      else
        OM0QW01.OM0QWIPC = mathLib.round(OM0QW01.OM0QWCLP * IVEREC.IVEPCPCT / 100, -mathLib.decimals(OM0QW01.OM0QWIPC));
        OM0QW01.OM0QWCLP = OM0QW01.OM0QWCLP + OM0QW01.OM0QWIPC;
      end
    else /* otherwise adjust price by style*/
      if (KUCREC.XAUCD == "33")
        OM0QW01.OM0QWIPC = mathLib.round(OM0QW01.OM0QWSTP *                                     VNLXPY01.NL-PRC-COST-PCT / 100, -mathLib.decimals(OM0QW01.OM0QWIPC));
        OM0QW01.OM0QWSTP = OM0QW01.OM0QWSTP + OM0QW01.OM0QWIPC;
      else
        OM0QW01.OM0QWIPC = mathLib.round(OM0QW01.OM0QWSTP * IVEREC.IVEPCPCT / 100, -mathLib.decimals(OM0QW01.OM0QWIPC));
        OM0QW01.OM0QWSTP = OM0QW01.OM0QWSTP + OM0QW01.OM0QWIPC;
      end
    end
  else /* otherwise get product price for all other divisions*/
    OM0Q254(); /* get style or color prices*/
  end

  OMASUB = OM0QW01.OM0QWSZF; /* FIRST ACTIVE SIZE*/

  while (OMAREC.OMASUB <= OM0QWSZL /* last active size*/
   && OMAREC.OMASUB <= 40) /* last size possible, just in case*/
    if (OP3REC.OP3SZAFL[OMASUB] == "Y") /* size is active*/
      if (OP3REC.OP3ONOQT[OMASUB] == 0 /* size was added*/
       && OM0QW01.OM0QWCQT[OMASUB] > 0) /* qty ordered*/
        OM0Q255(); /* move price to om0qw01*/

        if (OM0QW01.OM0QWUMF == "N") /* prices not stored standard*/
          OM0QS64(); /* convert to non-std uom*/
        end

      end
    end

    OMAREC.OMASUB = OMAREC.OMASUB + 1;
  end



end // end OM0Q49H

// delete order header
Function OM0Q49I()




   /* this statement group is called to determine if there*/
   /* are any items left on the original order header after*/
   /* the product has been moved to an existing or newly*/
   /* created suborder. if there are no items left we want*/
   /* to delete the original order header. 9/15/90 t.fox*/

  set SQLCA empty;

  OP2REC.OP1PARTN = OP1REC.OP1PARTN;
  OP2REC.OP1CUOID = OP1REC.OP1CUOID;
  OP2REC.OP1NORID = OP1REC.OP1NORID;
  OP2REC.OP2LNINB = 0;

  call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* get all prds on sb-ordr*/

  if (SQLCA.VAGen_SQLCODE == 0)
    call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0) /* found items on this order*/
      /* next sentence        ; do not delete the header ;*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* no items found on this order*/
        call "IO0430" ("D ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* delete hdr*/
        if (SQLCA.VAGen_SQLCODE == 0
         || SQLCA.VAGen_SQLCODE == 100)
          OMWREC.OMWSELCD[OMWLNITX] = "V";
          OM0Q49J(); /* delete labels and inst op4rec*/
          OM0Q49K(); /* delete addresses op5rec*/
          if (OP1REC.OP1EXPDF == "Y") /* expedite flag on*/
            OM0Q49L(); /* delete expedite record*/
          end
          if (OP1REC.XBDCD == "1") /* CUSTOMER BULK ORDER*/
            OM0QS-DELETE-BULKS(); /* DELETE VBULKS01 RECORD*/
          end
        else
          TA1REC.TA1LOCAT[1] = "D ";
          OM0QSYE();
          OM0QSZ4();
        end
      else
        TA1REC.TA1LOCAT[1] = "SS";
        OM0QSY1(); /* item abend diag info*/
        OM0QSZ2(); /* common return to mast menu*/
      end
    end
  end

  call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

end // end OM0Q49I

// delete instr and labels
Function OM0Q49J()

   /* this routine is called when a one product order has been*/
   /* split and the old header deleted. if any special labels*/
   /* or instructions exist for the old header this stmt grp*/
   /* will delete them.*/


  OP4REC.OP1PARTN = OP1REC.OP1PARTN;
  OP4REC.OP1CUOID = OP1REC.OP1CUOID;
  OP4REC.OP1NORID = OP1REC.OP1NORID;
  OP4REC.OP4TRTYP = " ";
  call "IO0470" ("SS", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    while (SQLCA.VAGen_SQLCODE != 100) /* while not end of records*/
      call "IO0470" ("SN", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        call "IO0470" ("D ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
        if (SQLCA.VAGen_SQLCODE == 0)
          /* next sentence*/
        else
          TA1REC.TA1LOCAT[1] = "D";
          OM0QSYU(); /* load diags with op4rec data*/
          OM0QSZ4(); /* common abend*/
        end
      else
        if (SQLCA.VAGen_SQLCODE == 100)
           /* next sentence*/
        else
          TA1REC.TA1LOCAT[1] = "SN";
          OM0QSYU(); /* load diags with op4rec data*/
          OM0QSZ4(); /* common abend*/
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      TA1REC.TA1LOCAT[1] = "SS";
      OM0QSYU();
      OM0QSZ4();
    end
  end
  call "IO0470" ("CS", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/


end // end OM0Q49J

// delete addresses
Function OM0Q49K()

   /* this routine is called when a one product order has been*/
   /* split and the old header deleted. if any address records*/
   /* exist for the old header this stmt grp will delete then*/


  OP5REC.OP1PARTN = OP1REC.OP1PARTN;
  OP5REC.OP1CUOID = OP1REC.OP1CUOID;
  OP5REC.OP1NORID = OP1REC.OP1NORID;
  OP5REC.OP5BILIN = "N";
  OP5REC.OP5SHPIN = "Y";
  call "IO0460" ("S ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    call "IO0460" ("D ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      TA1REC.TA1LOCAT[1] = "D";
      OM0QSYS(); /* load diags with op5rec data*/
      OM0QSZ4(); /* common abend*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1LOCAT[1] = "S";
      OM0QSYS(); /* load diags with op5rec data*/
      OM0QSZ4(); /* common abend*/
    end
  end


   /* next do the alt bill address record if needed.*/

  OP5REC.OP1PARTN = OP1REC.OP1PARTN;
  OP5REC.OP1CUOID = OP1REC.OP1CUOID;
  OP5REC.OP1NORID = OP1REC.OP1NORID;
  OP5REC.OP5BILIN = "Y";
  OP5REC.OP5SHPIN = "N";
  call "IO0460" ("S ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    call "IO0460" ("D ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      TA1REC.TA1LOCAT[1] = "D";
      OM0QSYS(); /* load diags with op5rec data*/
      OM0QSZ4(); /* common abend*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
    else
      TA1REC.TA1LOCAT[1] = "S";
      OM0QSYS(); /* load diags with op5rec data*/
      OM0QSZ4(); /* common abend*/
    end
  end


end // end OM0Q49K

// delete old expdt records
Function OM0Q49L()


   /* this stmt grp deletes an expedite record from*/
   /* old sub-orders when old sub-orders are split*/

  OIBREC.OP1PARTN = OP1REC.OP1PARTN;
  OIBREC.OP1CUOID = OP1REC.OP1CUOID;
  OIBREC.OP1NORID = OP1REC.OP1NORID;


   /* -- delete expedite record*/

  call "IO1880" ("D  ", SQLCA, OIBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "D "; /* func diags*/
    OM0QSYI(); /* load ta1rec from oibrec*/
    OM0QSZ4(); /* common abend for deletes*/
    TA1REC.TA1LOCAT[4] = "OM0Q49L"; /* func diags*/
  end

end // end OM0Q49L

// all products selected, xfer
Function OM0Q500()


      /* *************************************************/
      /* * common routine to exit om0q application*/
      /* * after all products selected have been reviewed*/
      /* * or on a transfer out via pf keys*/
      /* *************************************************/


  OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* set up commarea for xfer*/
  OMWREC.XOMCD = "  "; /* clear change reason*/
  COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
  COMMAREA.CAFROMAP = COMMAREA.CACURRAP;


  if (OM0QW01.OM0QWSPL == "Y") /* if split to sub-order*/
    OM0Q502(); /* compress array*/
  end

  if (OMWREC.OMWCHGFL == "N") /* not in change mode(1-time chg)*/
    COMMAREA.CACURRAP = "OM0O";
    transfer to program "OM0O" passing COMMAREA; /* go to prod hdr or dtl inquiry*/
  else
    if (OMWREC.OMWOPTN == 5) /* if menu option 5-hdr & dtl loop*/
      COMMAREA.CACURRAP = "OM0P";
      transfer to program "OM0P" passing COMMAREA; /* go to prod hdr for next product*/
    end
  end


end // end OM0Q500

// compress if suborder created
Function OM0Q502()


      /* *************************************************/
      /* * compress items and renumber because sub order*/
      /* * was created*/
      /* *************************************************/

      /* compress 200 array*/
      /* drop select code = 'n' for new sub-order*/
      /* omarec.omasub1 is index to 'new' array*/
      /* omasub is index to 'original' array*/
      /* omarec.omasub1 can shrink as we find 'n' codes*/

      /* omwselcd = n (suborder split off)*/
      /* omwselcd = v (product was viewed)*/
      /* omwselcd = s (have not selected product yet)*/

  OMAREC.OMASUB1 = 1;
  OMAREC.OMASUB = 1;
  OM0QW01.OM0QWFLG = "N";

  while (OMAREC.OMASUB <= OMWREC.OMWLINES) /* for actual length of ary used*/
    while (OMWREC.OMWSELCD[OMASUB] == "N")
      OM0QW01.OM0QWFLG = "Y";
      OMAREC.OMASUB = OMAREC.OMASUB + 1;
    end
    if (OM0QW01.OM0QWFLG == "Y")
      OMWREC.OMWSELCD[OMASUB1] = OMWREC.OMWSELCD[OMASUB];
      OMWREC.OP2LNINB[OMASUB1] = OMWREC.OP2LNINB[OMASUB];
    end
    OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
    OMAREC.OMASUB = OMAREC.OMASUB + 1;
  end

  OMWREC.OMWLNITX = OMWREC.OMWLNITX - 1; /* line item index*/
  OMAREC.OMASUB2 = OMAREC.OMASUB1 - 1; /* new max line count*/

      /* clear rest of original array, down to new max lines*/

  while (OMAREC.OMASUB1 <= OMWREC.OMWLINES)
    OMWREC.OMWSELCD[OMASUB1] = " ";
    OMWREC.OP2LNINB[OMASUB1] = 0;
    OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
  end



      /* hold new max line count*/

  OMWREC.OMWLINES = OMAREC.OMASUB2;

  COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;

end // end OM0Q502

// tranfer to next appl
Function OM0Q510()


      /* *************************************************/
      /* * common routine to exit om0q application*/
      /* * flow to prod hdr or summary or ord.hdr or comment*/
      /* * or add product or help or ...*/
      /* *************************************************/


  OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* set up commarea for xfer*/
  OMWREC.XOMCD = "  "; /* clear change reason*/
  COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
  COMMAREA.CAFROMAP = COMMAREA.CACURRAP;


  if (OM0QW01.OM0QWSPL == "Y") /* if split to sub-order*/
    OM0Q502(); /* compress aray*/
  end


  if (converseVar.eventKey is pf22)
    OM0Q-CUST-LOGO-XFR(); /* go to cust logo instruct. AE09*/
  end

  if (converseVar.eventKey is pf1)
    COMMAREA.CACURRAP = "OM0G";
    transfer to program "OM0G" passing COMMAREA; /* go to reason code help screen*/
  else
    if (converseVar.eventKey is pf3)
      if (OMWREC.OMWPKCHF == "Y") /* pack change flag*/
        OM0QS02(); /* check for prepack*/
        if (OMAREC.OMAERR == "Y") /* -911 from prepack read*/
          return;
        end
        if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
          COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
          COMMAREA.CAMSG = "ORDER MAINTAINED - VERIFY PREPACKS";
          COMMAREA.CACURRAP = "OS0G";
          transfer to program "OS0G" passing COMMAREA;
        else
          COMMAREA.CAMSG = " ";
          COMMAREA.CACURRAP = "OM0M";
          transfer to program "OM0M" passing COMMAREA; /* go to sub-order select menu*/
        end
      else
        COMMAREA.CAMSG = " ";
        COMMAREA.CACURRAP = "OM0M";
        transfer to program "OM0M" passing COMMAREA; /* go to sub-order select menu*/
      end
    else
      if (converseVar.eventKey is pf4)
        if (OMWREC.OMWPKCHF == "Y") /* pack change flag*/
          OM0QS02();
          if (OMAREC.OMAERR == "Y") /* -911 from prepack read*/
            return;
          end
          if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
            COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
            COMMAREA.CAMSG = "ORDER MAINTAINED - UPDATE PREPACK";
            COMMAREA.CACURRAP = "OS0G";
            transfer to program "OS0G" passing COMMAREA;
          else
            XSPF4(); /* go to master menu*/
            OM0QM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* master menu failure*/
            OM0QSZ1(); /* converse and reject*/
          end
        else
          XSPF4(); /* go to master menu*/
          OM0QM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* master menu failure*/
          OM0QSZ1(); /* converse and reject*/
        end
      else
        if (converseVar.eventKey is pf5)
          OMWREC.OMWSELCD[OMWLNITX] = "S"; /* flag prod for use*/
          COMMAREA.CACURRAP = "OM0P";
          transfer to program "OM0P" passing COMMAREA; /* product header*/
        else
          if (converseVar.eventKey is pf9)
            COMMAREA.CACURRAP = "OM0S";
            transfer to program "OM0S" passing COMMAREA; /* product summary*/
          else
            if (converseVar.eventKey is pf13)
              COMMAREA.CACURRAP = "OM0H";
              transfer to program "OM0H" passing COMMAREA; /* order header 1*/
            else
              if (converseVar.eventKey is pf18)
                COMMAREA.CACURRAP = "OM0C";
                transfer to program "OM0C" passing COMMAREA; /* order comments*/
              else
                if (converseVar.eventKey is pf20)
                  COMMAREA.CACURRAP = "OM0A";
                  transfer to program "OM0A" passing COMMAREA; /* add product(s)*/
                end
              end
            end
          end
        end
      end
    end
  end



end // end OM0Q510

// add 1 dollar to price per unit
Function OM0QS-ADD-1-DOLLAR()

  if (OM0QW01.SY5PRCUN[OMASUB] != 0) /* price per unit not 0*/
    OM0QW01.SY5PRCUN[OMASUB] = OM0QW01.SY5PRCUN[OMASUB] +                              OM0QW-PRICING-FACTOR; /* 1 or 0*/
  end

end // end OM0QS-ADD-1-DOLLAR

// DELETE/INSERT OB1REC
Function OM0QS-ADD-VSOHCR01()

   /* BUILD OCD ORDER CHANGE REASON FROM DORDER ORDER HEADER*/

  OM0QS-MAX-VSOHCR01();

  set VSOHCR01 empty;

  VSOHCR01.OP1PARTN = OP1REC.OP1PARTN;
  VSOHCR01.OP1CUOID = OP1REC.OP1CUOID;
  VSOHCR01.OP1NORID = OP1REC.OP1NORID;
  VSOHCR01.XOMCD = OM0QM001.XOMCD;
  VSOHCR01.SOCD-HDR-RSN-SEQ = OM0QW01.OM0QW-MAX-SEQ;
  VSOHCR01.SOCD-APPL-SRC-CD = "OP";
  VSOHCR01.SOCD-GLBL-MNTN-FL = "N";
  VSOHCR01.SOCD-HDR-RSN-TXT = XP0QW00.XP0QW-RSN-TEXT;
  if (OM0QW01.OM0QWCND == "Y")
    VSOHCR01.OP1CUNDT = OP1REC.OP1CUNDT;
  end
  VSOHCR01.XXX-USER-ID = COMMAREA.CAUSERID;
  VSOHCR01.ZZZSDT = XX0XW01.XX0XWDAT;
  VSOHCR01.ZZZSTM = XX0XW01.XX0XWTIM;
  VSOHCR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VSOHCR01.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* ADD RECORD TO VSOHCR01*/

  call "VSOHCR01" ("A ", SQLCA, VSOHCR01) {isNoRefresh = yes, isExternal = yes};

  OM0QM001.XOMCD = " "; /* clear change rsn*/
  OMWREC.XOMCD = " "; /* and abbreviation*/
  OM0QM001.XOMABRV = " ";
end // end OM0QS-ADD-VSOHCR01

// update ocd size item
Function OM0QS-CALL-OZ2090()

      /* use OZ2090 to update the VOCSIZ01 record*/
  set WOZ2090 empty;
  WOZ2090.OZ2090-OP-ORD-PART-CHAR = OP3REC.OP1PARTN;
  WOZ2090.OZ2090-OP-CUST-ORD-ID = OP3REC.OP1CUOID;
  WOZ2090.OZ2090-OP-NIKE-ORD-ID = OP3REC.OP1NORID;
  WOZ2090.OZ2090-OP-LINE-ITEM-NBR = OP3REC.OP2LNINB;
  WOZ2090.OZ2090-XOM-ORD-MNTN-CD = OM0QM001.XOMCD;
  WOZ2090.OZ2090-SOCD-APPL-SRC-CD = "OP";
  WOZ2090.OZ2090-SOCD-GLBL-MNTN-FL = "N";
  WOZ2090.OZ2090-SOCD-SZ-RSN-TXT = XP0QW00.XP0QW-RSN-TEXT;
  WOZ2090.OZ2090-XXX-USER-ID = COMMAREA.CAUSERID;
  call "OZ2090" (WOZ2090) {isNoRefresh = yes, isExternal = yes};

  if (WOZ2090.OZ2090-RETURN-CD == "00") /* good return*/
   /* ok - next sentence*/
  else
    converseLib.validationFailed(942);
  end

end // end OM0QS-CALL-OZ2090

// update ocd size item
Function OM0QS-CALL-OZ2140()

      /* use OZ2140 to migrate the keys when sub-order split occurs*/

  set WOZ2140 empty;

  WOZ2140.OZ2140-OP-ORD-PART-CHAR = OP1REC.OP1PARTN;
  WOZ2140.OZ2140-OP-CUST-ORD-ID = OP1REC.OP1CUOID;
  WOZ2140.OZ2140-OP-NIKE-ORD-ID-NEW = OMWREC.OMWSORDN;
  WOZ2140.OZ2140-OP-LINE-ITEM-NBR = OP3REC.OP2LNINB;
  WOZ2140.OZ2140-OP-NIKE-ORD-ID-OLD = OP1REC.OP1NORID;
  WOZ2140.OZ2140-CU-CO-ID = OP1REC.KUCCOID;
  WOZ2140.OZ2140-CU-STOR-ID = OP1REC.KUMSTRID;
  WOZ2140.OZ2140-XNX-DEPT-ID-XREF = OP1REC.XNXCD;
  OZ2140-XGP-GPC-CD = OP3REC.XGPCD;
  OZ2140-SP-SPGM-ID = OP1REC.SP1ID;
  WOZ2140.OZ2140-OP-CUST-NEED-DT = OM0QW01.OP1CUNDT;
  OZ2140-XOT-ORD-TYP-CD = OP1REC.XOTCD;
  OZ2140-OP-CUST-PO = OP1REC.OP1CUPO;
  /* MOVE COMMAREA.CAUSERID TO WOZ2140.OZ2140-XXX-USER-ID;*/


  call "OZ2140" (WOZ2140) {isNoRefresh = yes, isExternal = yes};


  if (WOZ2140.OZ2140-RETURN-CD == "00") /* good return*/
     /* ok - next sentence*/
  else
    converseLib.validationFailed(000);
    OMAREC.OMAERR = "Y";
  end

end // end OM0QS-CALL-OZ2140

// CHECK FOR ORDER TO UPDATE BULK
Function OM0QS-CHECK-UPDATE()
   /* tcs include begin*/
  set VBULKS02 empty;
  set OBFREC empty;
  set SQLCA empty;
  VBULKS02.OP1PARTN = OP1REC.OP1PARTN;
  VBULKS02.OP1CUOID = OP1REC.OP1CUOID;
  VBULKS02.OP1NORID = OP1REC.OP1NORID;

  OBFREC.OBFTASK = "S ";
  call "VBULKS02" (OBFREC, SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    OM0QS-UPDTE-VBULK(); /* if there are records update*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)

    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VBULKS02"; /* table view*/
      TA1REC.TA1LOCAT[2] = "OM0QS-CHECK-UPDATE"; /* stmt group*/
      TA1REC.TA1LOCAT[3] = "VBULKS02";
      TA1REC.TA1LOCAT[4] = "U     ";
      OM0QSYE(); /* load TA1REC with op1rec data*/
      OM0QSZ4(); /* abend for writes*/
    end
    /* tcs include end*/
  end
end // end OM0QS-CHECK-UPDATE

// CHECK FOR PREPACK
Function OM0QS-CHK-PREPKS()

   /* THIS STATEMENT GROUP CHECKS THE PREPACK DATABASE*/
   /* TO SEE IF THE ORDER EXISTS*/

   /* BUILD THE KEY TO SPECIFIED PREPACK TABLE*/

  set OSNREC empty;
  set SQLCA empty;

  OSNREC.XWHCD = OP1REC.XWHCD; /* WAREHOUSE*/
  OSNREC.OP1PARTN = OP1REC.OP1PARTN; /* PART CHAR*/
  OSNREC.OP1CUOID = OP1REC.OP1CUOID; /* ORDER NUM*/
  OSNREC.OP1NORID = OP1REC.OP1NORID; /* NIKE ORD ID*/
  OSNREC.OP2LNINB = OP3REC.OP2LNINB; /* LINE ITEM NBR*/

  call "IO5650" ("S ", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* found prepack record*/
    OM0QS-DEL-PREPKS(); /* delete prepack*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* prepack not found - for reinstated item*/
     /* next sentence*/
    else
      TA1REC.TA1DBASE = "DORDB   ";
      TA1REC.TA1TBLVU = "OSNREC";
      TA1REC.TA1LOCAT[1] = "SELECT  ";
      TA1REC.TA1LOCAT[2] = "OSNREC";
      TA1REC.TA1LOCAT[3] = "OM0QS-CHK-PREPKS";
      TA1REC.TA1LOCAT[4] = OSNREC.OSNKEY;
      XSOPS02();
    end
  end

   /* WHILE SQLCA.SQLCODE EQ 0;*/
   /* CALL IO5650 'N1',SQLCA,OSNREC (NOMAPS,NONCSP;*/
   /* IF SQLCA.SQLCODE EQ 0;*/
   /* OM0QS-DEL-PREPKS;      /*  delete prepack*/
   /* ELSE;*/
   /* IF SQLCA.SQLCODE EQ +100;*/
   /* /* next sentence*/
   /* ELSE;*/
   /* SET SQLCA EMPTY;*/
   /* MOVE 'DORDB   ' TO TA1REC.TA1DBASE;*/
   /* MOVE 'OSNREC' TO TA1REC.TA1TBLVU;*/
   /* MOVE 'N1      ' TO TA1REC.TA1LOCAT(1);*/
   /* MOVE 'OSNREC' TO TA1REC.TA1LOCAT(2);*/
   /* MOVE 'OM0QS-CHK-PREPKS' TO TA1REC.TA1LOCAT(3);*/
   /* MOVE OSNREC.OSNKEY TO TA1REC.TA1LOCAT(4);*/
   /* XSOPS02;*/
   /* END;*/
   /* END;*/
   /* END;*/

   /* CALL IO5650 'C1',SQLCA,OSNREC (NOMAPS,NONCSP;*/

   /* IF SQLCA.SQLCODE EQ 0;     /* open cursor successful*/
    /* next sentence*/
   /* ELSE;*/
   /* MOVE 'DORDB   ' TO TA1REC.TA1DBASE;*/
   /* MOVE 'OSNREC' TO TA1REC.TA1TBLVU;*/
   /* MOVE 'C1      ' TO TA1REC.TA1LOCAT(1);*/
   /* MOVE 'OSNREC' TO TA1REC.TA1LOCAT(2);*/
   /* MOVE 'OM0QS-CHK-PREPKS' TO TA1REC.TA1LOCAT(3);*/
   /* MOVE OSNREC.OSNKEY TO TA1REC.TA1LOCAT(4);*/
   /* XSOPS02;*/
   /* END;*/
end // end OM0QS-CHK-PREPKS

// CHECK FOR PROMO OWNER GRP
Function OM0QS-CHK-PROMO()
   /* THIS STMT GROUP DETERMINES IF THE OWNER GROUP ENTERED IS A NON-FLYER*/
   /* (PROMO) OWNER GROUP.*/
                                  /* THIS IS A NON-FLYER OWNER GROUP IF NO*/
                                   /* ROW IS FOUND ON DAVAIL.VBLAKP01*/

  AVGREC.XOWCD = OP3REC.XOWCD; /* LOAD THE KEY*/

  call "IO5480" ("S ", SQLCA, AVGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      OM0QW01.OM0QW-PROMO-XOWCD-FL = "Y";
    else
      TA1REC.TA1PGMNM = "OM0Q ";
      TA1REC.TA1LOC = "OM0QS-CHK-PROMO";
      TA1REC.TA1LOCAT[4] = "IO5480";
      TA1REC.TA1MAP = "OM0QM001";
      TA1REC.TA1DBASE = "DAVAIL";
      TA1REC.TA1TBLVU = "VBLNKP01";
      TA1REC.TA1TBLKE = AVGREC.AVGKEY;
      XSOPS02();
    end
  end

   /* ************************************************************/
end // end OM0QS-CHK-PROMO

// insert msr prepack record
Function OM0QS-CRE-PREPKS()

   /* insert the prepack quantities for each line item if msr edit is ok*/

   /* format prepack record*/

  set OSNREC empty;

  OSNREC.XWHCD = OP1REC.XWHCD;
  OSNREC.OP1PARTN = OP1REC.OP1PARTN;
  OSNREC.OP1CUOID = OP1REC.OP1CUOID;
  OSNREC.OP1NORID = OP3REC.OP1NORID;
  OSNREC.OP2LNINB = OP3REC.OP2LNINB;
  OSNREC.XGPCD = OP3REC.XGPCD;
  OSNREC.OSNPKGNB = OP3REC.OP2LNINB;
  OSNREC.SY1STNBR = OP3REC.SY1STNBR;
  OSNREC.SY2CLRID = OP3REC.SY2CLRID;
  OSNREC.XDMCD = OP3REC.XDMCD;
  OSNREC.XPACD = OP1REC.XPACD;
  OSNREC.KUFMIXBL = "N";

   /* calculate total item qty and total carton ratio*/

  OMAREC.OMASUB1 = 1; /* map size sub*/

  if (OM0QW01.OM0QWSCR == 1)
    OMAREC.OMASUB = OM0QW01.OM0QWSZF;
  else
    OMAREC.OMASUB = OM0QW01.OM0QWSB2;
  end

  while (OMAREC.OMASUB1 <= 20
   && OMAREC.OMASUB <= 40
   && OMAREC.OMASUB <= OM0QW01.OM0QWSZL)
    if (OP3REC.OP3SZAFL[OMASUB] == "Y")
      if (OP3REC.OP3ONOQT[OMASUB] > 0 || 
      OM0QW01.OM0QWP21 == "Y") /* full range of sizes requested*/
        OSNREC.PKTPPQTY[OMASUB] = OPMZREC.OP-MSZ-SZ-RATIO[OMASUB];
        OSNREC.KUCUNTCS = OSNREC.KUCUNTCS +                 OPMZREC.OP-MSZ-SZ-RATIO[OMASUB];
        OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
      end
    end
    OMAREC.OMASUB = OMAREC.OMASUB + 1;
  end

  OSNREC.OSNTIQTY = OPMZREC.OP2TONOQ;

   /* find beginning active size*/
  sysVar.arrayIndex = 40;
  while (sysVar.arrayIndex >= 1)
    if (OPMZREC.OP-MSZ-SZ-RATIO[sysVar.arrayIndex] > 0)
      OSNREC.PKTBACTI = sysVar.arrayIndex;
    end
    sysVar.arrayIndex = sysVar.arrayIndex - 1;
  end

   /* get carton type code if pack code is 'cu'*/
  if (OP1REC.XPACD == "CU")
    OM0QS-GET-CTN-TYPE();
  end

  OSNREC.ZZZSDT = XX0XW01.XX0XWDAT;
  OSNREC.ZZZSTM = XX0XW01.XX0XWTIM;

  try
    call "IO5650" ("A ", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    /* /next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1LOCAT[1] = "OM0QS-CRE-PREPKS";
    TA1REC.TA1TBLVU = "VCSPRP01";
    TA1REC.TA1TBLKE = OSNREC.OSNKEY;
    TA1REC.TA1LOCAT[3] = "IO5650";
    TA1REC.TA1FUNC = "RETN";
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat; /* save the original sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes}; /* abend module*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user area*/
    COMMAREA.CATOAP = "MN0M"; /* go back to the o/m*/
    sysVar.transferName = "MN0M";
    transfer to transaction sysVar.transferName passing COMMAREA;
  end

end // end OM0QS-CRE-PREPKS

// credit check for direct ship
Function OM0QS-CRED-CHK-DS()

      /* ***********************************************/
      /* * call cc1070 for factory direct ship change*/
      /* ***********************************************/

  set CC1REC empty;

  CC1REC.CC1PVALU = OP1REC.OP1OVALU; /* on-order value*/
  CC1REC.CC1PUNTS = OP1REC.OP1OTUNT; /* on-order units*/
  CC1REC.CC1CLRSN = OM0QW01.OM0QW-CRED-REASON-CD; /* reason code*/
  CC1REC.CC1PGMNM = "OM0Q"; /* program name*/

  call "CC1070" (SQLCA, OP1REC, CC1REC) {isNoRefresh = yes, isExternal = yes};

  set CC1REC empty; /* clear cc1rec fields*/

end // end OM0QS-CRED-CHK-DS

// CHECK FOR PREPACK
Function OM0QS-DEL-PREPKS()

  call "IO5650" ("D ", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* close cursor successful*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB   ";
    TA1REC.TA1TBLVU = "OSNREC";
    TA1REC.TA1LOCAT[1] = "DELETE  ";
    TA1REC.TA1LOCAT[2] = "OSNREC";
    TA1REC.TA1LOCAT[3] = "OM0QS-DEL-PREPKS";
    TA1REC.TA1LOCAT[4] = OSNREC.OSNKEY;
    XSOPS02();
  end

end // end OM0QS-DEL-PREPKS

// DELETE BULK REC FROM VBULKS01
Function OM0QS-DELETE-BULKS()

     /* build batch bulk record*/

  set VBULKS02 empty;
  VBULKS02.OP1PARTN = OP1REC.OP1PARTN; /* move part char*/
  VBULKS02.OP1CUOID = OP1REC.OP1CUOID; /* move order number*/
  VBULKS02.OP1NORID = OP1REC.OP1NORID; /* move nike order id*/

  call "VBULKS02" ("D ", SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* NEXT SENTENCE*/
  else
    set TA1REC empty;
    set ERRSQLCA empty;
    TA1REC.TA1DBASE = "DORDB ";
    TA1REC.TA1TBLVU = "VBULKS02";
    OM0QW01.OM0QWEK1 = OP1REC.OP1PARTN;
    OM0QW01.OM0QWEK2 = OP1REC.OP1CUOID;
    OM0QW01.OM0QWEK3 = OP1REC.OP1NORID;
    OM0QW01.OM0QWEK4 = 0;
    OM0QW01.OM0QWEK5 = 0;
    OM0QW01.OM0QWEK6 = 0;
    OM0QW01.OM0QWEK7 = " ";
    TA1REC.TA1TBLKE = OM0QW01.OM0QWEKY;
    TA1REC.TA1LOCAT[1] = "D/IO7250";
    TA1REC.TA1LOCAT[2] = "OM0QS-DELETE-BULKS";
    XSOPS02();
  end

end // end OM0QS-DELETE-BULKS

// CHECK FOR PREPACK
Function OM0QS-EDIT-PREPKS()

   /* Call subprogram to validate the quantities*/

  set OPMZREC empty;

  OPMZREC.XGPCD = OP1REC.XGPCD;
  /* TT#12895-Changes begin - 07/11/2001 kshiva*/
  OPMZREC.XDSCD = OP1REC.XDSCD;
  /* TT#12895-Changes end - 07/11/2001 kshiva*/
  OPMZREC.SY1STNBR = OP3REC.SY1STNBR;
  OPMZREC.SY2CLRID = OP3REC.SY2CLRID;
  OPMZREC.XDMCD = OP3REC.XDMCD;
  OPMZREC.OP2TONOQ = 0;

   /* Move qtys to pass record*/

  OMAREC.OMASUB1 = 1; /* map size subscript*/

  if (OM0QW01.OM0QWSCR == 1)
    OMAREC.OMASUB = OM0QW01.OM0QWSZF;
  else
    OMAREC.OMASUB = OM0QW01.OM0QWSB2;
  end

  while (OMAREC.OMASUB1 <= 20 /* map size*/
   && OMAREC.OMASUB <= 40  /* record size*/
   && OMAREC.OMASUB <= OM0QW01.OM0QWSZL)
    if (OP3REC.OP3SZAFL[OMASUB] == "Y") /* size active flag*/
      if (OP3REC.OP3ONOQT[OMASUB] > 0 ||  /* ordered qty*/
      OM0QW01.OM0QWP21 == "Y")            /* full range of sizes requested*/
        OPMZREC.OP3ONOQT[OMASUB] = OM0QM001.OP3ONOQT[OMASUB1];
        OPMZREC.OP2TONOQ = OPMZREC.OP2TONOQ + OM0QM001.OP3ONOQT[OMASUB1];
        OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1; /* increment map size sub*/
      end
    end
    OMAREC.OMASUB = OMAREC.OMASUB + 1; /* increment record size sub*/
  end

  call "OP3850" (OPMZREC) {isNoRefresh = yes, isExternal = yes};

  if (OPMZREC.OPMZ-RETURN-CD == 0)
     /* next sentence;*/
  else
    if (OPMZREC.OPMZ-RETURN-CD == 1
     || OPMZREC.OPMZ-RETURN-CD == 2
     || OPMZREC.OPMZ-RETURN-CD == 3
     || OPMZREC.OPMZ-RETURN-CD == 4)
      OMAREC.OMAERR = "Y";
      OM0QM001.VAGen_EZEMSG = OPMZREC.OPMZ-RETURN-MSG;
    else
      if (OPMZREC.OPMZ-RETURN-CD == 8)
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(10);
      else
        if (OPMZREC.OPMZ-RETURN-CD == 7
         || OPMZREC.OPMZ-RETURN-CD == 9)
          OMAREC.OMAERR = "Y";
          TA1REC.TA1TYPE = "APPL";
          TA1REC.TA1FUNC = "RETN";
          TA1REC.TA1PGMNM = "OM0Q    ";
          TA1REC.TA1LOCAT[1] = "OM0Q444 ";
          TA1REC.TA1LOCAT[2] = "OP3850  ";
          TA1REC.TA1LOCAT[3] = OPMZREC.OPMZ-RETURN-CD;
          TA1REC.TA1LOCAT[4] = "        ";
          set TAEREC empty;
          OPMZREC.OPMZ-DIAG-KEY = " ";
          OPMZREC.OPMZ-DIAG-CUST-ORD-ID = OP1REC.OP1CUOID;
          OPMZREC.OPMZ-DIAG-NIKE-ORD-ID = OP1REC.OP1NORID;
          OPMZREC.OPMZ-DIAG-GPC-CD = OPMZREC.XGPCD;
          OPMZREC.OPMZ-DIAG-STY-NBR = OPMZREC.SY1STNBR;
          OPMZREC.OPMZ-DIAG-COLR-CD-ID = OPMZREC.SY2CLRID;
          OPMZREC.OPMZ-DIAG-DIM-CD = OPMZREC.XDMCD;
          OPMZREC.OPMZ-DIAG-RETURN-CD = OPMZREC.OPMZ-RETURN-CD;
          TAEREC.TAEDESC1 = OPMZREC.OPMZ-DIAG-KEY;
          TAEREC.TAEDESC2 = OPMZREC.OPMZ-RETURN-MSG;
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
          call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
          XSPF4();
          exit program;
        end
      end
    end
  end
end // end OM0QS-EDIT-PREPKS

// EDIT CHANGE RSN CODE
Function OM0QS-EDT-REIN-RSN()

   /* check for a valid change reason code*/

  if (OM0QM001.XOMCD != "  ")
      /* test for a valid change code*/
    if (OM0QM001.XOMCD in XOMTBL.XOMCD /* valid maint reason*/
     && XOMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active maint reason*/
      if (XOMTBL.XOMCANCF[sysVar.arrayIndex] == "B" /* both add/decrease*/
       || XOMTBL.XOMCANCF[sysVar.arrayIndex] == "A") /* add product reason*/
         /* next sentence*/
      else
        OMAREC.OMAERR = "Y"; /* set error flg*/
        converseLib.validationFailed(943); /* rsn not valid for reinstat*/
        set OM0QM001.XOMCD cursor, bold;
      end
    else
      OMAREC.OMAERR = "Y"; /* set error flg*/
      converseLib.validationFailed(395); /* rsn not valid*/
      set OM0QM001.XOMCD cursor, bold;
    end
  else
    OMAREC.OMAERR = "Y"; /* set error flg*/
    converseLib.validationFailed(944); /* enter chg rsn and PF24*/
    set OM0QM001.XOMCD cursor, bold;
  end



end // end OM0QS-EDT-REIN-RSN

// CALCULATE THE OWNER GROUP
Function OM0QS-FLYR-CUTOFF()
   /* THE IDEA HERE IS TO CHECK THE CUT-OFF DATE FOR THE FLYER PROGRAM*/
   /* AGAINST THE NEED DATE OF THE ORDER.*/
   /* THE 'NOT FOUND' CONDITION ON THE CUT-OFF TABLE MEANS THE*/
   /* BEGIN/END DATE OF THE FLYER HAS BEEN CHANGED ON THE CUT-OFF*/
   /* SINCE THIS ORDER WAS ENTERED.*/
   /* THE AUTHORIZATION TEST IS THE SAME AS FOR THE REGULAR CUT-OFF*/
   /* TABLE.*/

  OM0QW01.OM0QWFRF = "N"; /* set up to allow quantity increase*/

  OM0QST7(); /* read cutoff record*/

  if (SQLCA.VAGen_SQLCODE == +100) /* there was no program cut off record*/
    converseLib.validationFailed(785);
    OM0QW01.OM0QWFRF = "Y";
  else
    if (OECREC.OPJCUTDT < OMAREC.OMACDT) /* cut off date has passed*/
      if (COMMAREA.CAUSERID in YOSTBL.XXXUSRID
       && YOSTBL.XXXSTAT[sysVar.arrayIndex] == "A"
       && YOSTBL.YOSNDTFL[sysVar.arrayIndex] == "Y") /* authorized for lateness*/
        converseLib.validationFailed(638); /* past cut-off date warning msg*/
      else
        converseLib.validationFailed(697); /* no changes allowed after cutoff date*/
        OM0QW01.OM0QWFRF = "Y"; /* set up to prevent quantity inc*/
      end
    end
  end

end // end OM0QS-FLYR-CUTOFF

// GET CARTON TYPE
Function OM0QS-GET-CTN-TYPE()
   /* since a 'cu' order must have a carton type code, we call pk4420*/
   /* to calculate the carton type code.  if pk4420 does not return a*/
   /* good value, get it from dcust.vcmpny01*/

  set PWSREC empty;
  PWSREC.KUCCOID = OP1REC.KUCCOID;
  PWSREC.OP1PARTN = OSNREC.OP1PARTN;
  PWSREC.OP1CUOID = OSNREC.OP1CUOID;
  PWSREC.OP1NORID = OSNREC.OP1NORID;
  PWSREC.XWHCD = OSNREC.XWHCD;
  PWSREC.XGPCD = OSNREC.XGPCD;
  PWSREC.XBCCD = OP1REC.XBCCD;
  PWSREC.OP2LNINB[1] = OSNREC.OP2LNINB;
  PWSREC.SY1STNBR[1] = OSNREC.SY1STNBR;
  PWSREC.SY2CLRID[1] = OSNREC.SY2CLRID;
  PWSREC.XDMCD[1] = OSNREC.XDMCD;
  PWSREC.PWSPPQ01[1] = OSNREC.PKTPPQTY[01];
  PWSREC.PWSPPQ02[1] = OSNREC.PKTPPQTY[02];
  PWSREC.PWSPPQ03[1] = OSNREC.PKTPPQTY[03];
  PWSREC.PWSPPQ04[1] = OSNREC.PKTPPQTY[04];
  PWSREC.PWSPPQ05[1] = OSNREC.PKTPPQTY[05];
  PWSREC.PWSPPQ06[1] = OSNREC.PKTPPQTY[06];
  PWSREC.PWSPPQ07[1] = OSNREC.PKTPPQTY[07];
  PWSREC.PWSPPQ08[1] = OSNREC.PKTPPQTY[08];
  PWSREC.PWSPPQ09[1] = OSNREC.PKTPPQTY[09];
  PWSREC.PWSPPQ10[1] = OSNREC.PKTPPQTY[10];
  PWSREC.PWSPPQ11[1] = OSNREC.PKTPPQTY[11];
  PWSREC.PWSPPQ12[1] = OSNREC.PKTPPQTY[12];
  PWSREC.PWSPPQ13[1] = OSNREC.PKTPPQTY[13];
  PWSREC.PWSPPQ14[1] = OSNREC.PKTPPQTY[14];
  PWSREC.PWSPPQ15[1] = OSNREC.PKTPPQTY[15];
  PWSREC.PWSPPQ16[1] = OSNREC.PKTPPQTY[16];
  PWSREC.PWSPPQ17[1] = OSNREC.PKTPPQTY[17];
  PWSREC.PWSPPQ18[1] = OSNREC.PKTPPQTY[18];
  PWSREC.PWSPPQ19[1] = OSNREC.PKTPPQTY[19];
  PWSREC.PWSPPQ20[1] = OSNREC.PKTPPQTY[20];
  PWSREC.PWSPPQ21[1] = OSNREC.PKTPPQTY[21];
  PWSREC.PWSPPQ22[1] = OSNREC.PKTPPQTY[22];
  PWSREC.PWSPPQ23[1] = OSNREC.PKTPPQTY[23];
  PWSREC.PWSPPQ24[1] = OSNREC.PKTPPQTY[24];
  PWSREC.PWSPPQ25[1] = OSNREC.PKTPPQTY[25];
  PWSREC.PWSPPQ26[1] = OSNREC.PKTPPQTY[26];
  PWSREC.PWSPPQ27[1] = OSNREC.PKTPPQTY[27];
  PWSREC.PWSPPQ28[1] = OSNREC.PKTPPQTY[28];
  PWSREC.PWSPPQ29[1] = OSNREC.PKTPPQTY[29];
  PWSREC.PWSPPQ30[1] = OSNREC.PKTPPQTY[30];
  PWSREC.PWSPPQ31[1] = OSNREC.PKTPPQTY[31];
  PWSREC.PWSPPQ32[1] = OSNREC.PKTPPQTY[32];
  PWSREC.PWSPPQ33[1] = OSNREC.PKTPPQTY[33];
  PWSREC.PWSPPQ34[1] = OSNREC.PKTPPQTY[34];
  PWSREC.PWSPPQ35[1] = OSNREC.PKTPPQTY[35];
  PWSREC.PWSPPQ36[1] = OSNREC.PKTPPQTY[36];
  PWSREC.PWSPPQ37[1] = OSNREC.PKTPPQTY[37];
  PWSREC.PWSPPQ38[1] = OSNREC.PKTPPQTY[38];
  PWSREC.PWSPPQ39[1] = OSNREC.PKTPPQTY[39];
  PWSREC.PWSPPQ40[1] = OSNREC.PKTPPQTY[40];

  try
    call "PK4420" (SQLCA, PWSREC) {isNoRefresh = yes, isExternal = yes};
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* db busy*/
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(010); /* database busy try again*/
    return;
  end
  if (PWSREC.PWSRTNCD == 0)
    OSNREC.YNTCD = PWSREC.YNTCD;
  else
    if (PWSREC.PWSRTNCD == 3)
      /* begin tcs*/
      OM0QM001.VAGen_EZEMSG = " NO CARTONS LARGE ENOUGH - RETRY";
      OMAREC.OMAERR = "Y"; /* error exist*/
      converseLib.validationFailed(996);
      /* EZEFLO;*/
      /* EZERTN;*/
      /* OM0QS-ALT-CTN-TYPE;*/
      /* end tcs*/
    else
      if (PWSREC.PWSRTNCD == 4)
        /* wipro change begin  #05/25/99#*/
        OM0QM001.VAGen_EZEMSG = " PACKAGE REQUIRES MATCHING CARTON TYPES";
        OMAREC.OMAERR = "Y"; /* error exist*/
        /* EZEFLO;*/
        /* EZERTN;*/
        /* OM0QS-ALT-CTN-TYPE;*/
        /* wipro change end*/
      else
        if (PWSREC.PWSRTNCD == 5)
          /* wipro change begin   #05/25/99#*/
          OM0QM001.VAGen_EZEMSG = " NOT SET UP WITH CARTON CLASS";
          OMAREC.OMAERR = "Y"; /* error exist*/
          /* EZEFLO;*/
          /* EZERTN;*/
          /* OM0QS-ALT-CTN-TYPE;*/
          /* wipro change end*/
        else
          if (PWSREC.PWSRTNCD == 6)
            /* wipro change begin #05/25/99#*/
            OM0QM001.VAGen_EZEMSG = " NOT SET UP WITH CARTON CLASS RECORD";
            OMAREC.OMAERR = "Y"; /* error exist*/
            /* EZEFLO;*/
            /* EZERTN;*/
            /* OM0QS-ALT-CTN-TYPE;*/
            /* wipro change end*/
          else
            if (PWSREC.PWSRTNCD == 7)
              /* wipro change begin #05/25/99#*/
              OM0QM001.VAGen_EZEMSG = " NEEDS HANGING CARTON CLASS";
              OMAREC.OMAERR = "Y"; /* error exist*/
              /* EZEFLO;*/
              /* EZERTN;*/
              /* OM0QS-ALT-CTN-TYPE;*/
              /* wipro change end*/
            else
              if (PWSREC.PWSRTNCD == 8)
                /* wipro change begin #05/25/99#*/
                OM0QM001.VAGen_EZEMSG = " NO ITEM PASSED";
                OMAREC.OMAERR = "Y"; /* error exist*/
                /* EZEFLO;*/
                /* EZERTN;*/
                /* OM0QS-ALT-CTN-TYPE;*/
                /* wipro change end*/
              else
                if (PWSREC.PWSRTNCD == 9)
                  /* wipro change begin #05/25/99#*/
                  OM0QM001.VAGen_EZEMSG = " NO PREPACK QUANTITIES";
                  OMAREC.OMAERR = "Y"; /* error exist*/
                  /* EZEFLO;*/
                  /* EZERTN;*/
                  /* OM0QS-ALT-CTN-TYPE;*/
                  /* wipro change end*/
                else
                  TA1REC.TA1DBASE = "DORDER  ";
                  TA1REC.TA1TBLVU = "VCSPRP01";
                  TA1REC.TA1TBLKE = "PK4420";
                  TA1REC.TA1LOCAT[2] = "OM0QS-GET-CTN-TYPE";
                  XSOPS02();
                end
              end
            end
          end
        end
      end
    end
  end

end // end OM0QS-GET-CTN-TYPE

// GET DEPT FOR DEPT SELF ID
Function OM0QS-GET-VDEPT001()


      /* This routine reads the department record to obtain the*/
      /* department self id (kujslfid).*/


  call "IO0290" ("S ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[3] = "IO0290  ";
    TA1REC.TA1DBASE = "KUJREC  ";
    TA1REC.TA1TBLVU = "VDEPT001";
    OM0QW01.OM0QWEKY = " ";
    OM0QW01.OM0QWEK4 = OP1REC.KUCCOID;
    OM0QW01.OM0QWEK6 = OP1REC.XNXCD;
    TA1REC.TA1TBLKE = OM0QW01.OM0QWEKY;
    XSOPS02(); /* abend*/
  end





end // end OM0QS-GET-VDEPT001

// INSERT BULK REC INTO VBULKS01
Function OM0QS-INSERT-BULKS()

     /* build customer bulk record*/

  VBULKS02.OP1PARTN = OP1REC.OP1PARTN; /* move part char*/
  VBULKS02.OP1CUOID = OP1REC.OP1CUOID; /* move order number*/
  VBULKS02.OP1NORID = OP1REC.OP1NORID; /* move nike order id*/

  KUCREC.KUCCOID = OP1REC.KUCCOID; /* move customer id key*/
  OM0QSRH(); /* get comp rec for group/parent*/
  VBULKS02.KUCGRPID = KUCREC.KUCGRPID; /* move company group id*/
  VBULKS02.KUKPCOID = KUCREC.KUKPCOID; /* move parent company id*/
  VBULKS02.KUCCOID = OP1REC.KUCCOID; /* move customer id*/
  VBULKS02.KUMSTRID = OP1REC.KUMSTRID; /* move store id*/
  VBULKS02.XNXCD = OP1REC.XNXCD; /* move department id*/

  KUJREC.KUCCOID = OP1REC.KUCCOID; /* move customer id key*/
  KUJREC.XNXCD = OP1REC.XNXCD; /* move department id key*/
  OM0QS-GET-VDEPT001(); /* get dept for dept self id*/
  VBULKS02.KUJSLFID = KUJREC.KUJSLFID; /* move dept self id*/

  VBULKS02.XBDCD = OP1REC.XBDCD; /* move bulk code*/
  VBULKS02.XGPCD = OP1REC.XGPCD; /* move gpc*/
  VBULKS02.OP1CUPO = OP1REC.OP1CUPO; /* move customer po*/
  VBULKS02.XDVCD = OP1REC.XDVCD; /* move division code*/
  VBULKS02.XSOCD = OP1REC.XSOCD; /* move sales office*/
  VBULKS02.XWHCD = OP1REC.XWHCD; /* move warehouse code*/
  VBULKS02.OP1CUNDT = OP1REC.OP1CUNDT; /* move need date*/
  VBULKS02.OP1DSADT = OP1REC.OP1DSADT; /* move don't ship after date*/
  VBULKS02.SP1ID = OP1REC.SP1ID; /* move sales program id*/
  VBULKS02.ZZZSDT = XX0XW01.XX0XWDAT; /* move setup date*/
  VBULKS02.ZZZSTM = XX0XW01.XX0XWTIM; /* move setup time*/
  VBULKS02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move change date*/
  VBULKS02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move change time*/
  VBULKS02.ZZZCHGCT = 0; /* init change count*/
   /* move sales rep id*/
  VBULKS02.SM4REPID = OP1REC.SM4REPID;
  call "VBULKS02" ("A ", SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* NEXT SENTENCE*/
  else
    set TA1REC empty;
    set ERRSQLCA empty;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1DBASE = "DORDB ";
    TA1REC.TA1TBLVU = "VBULKS02";
    OM0QW01.OM0QWEK1 = OP1REC.OP1PARTN;
    OM0QW01.OM0QWEK2 = OP1REC.OP1CUOID;
    OM0QW01.OM0QWEK3 = OP1REC.OP1NORID;
    OM0QW01.OM0QWEK4 = 0;
    OM0QW01.OM0QWEK5 = 0;
    OM0QW01.OM0QWEK6 = 0;
    OM0QW01.OM0QWEK7 = " ";
    TA1REC.TA1TBLKE = OM0QW01.OM0QWEKY;
    TA1REC.TA1LOCAT[1] = "A/IO7250";
    TA1REC.TA1LOCAT[2] = "OM0QS-INSERT-BULKS";
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  end

end // end OM0QS-INSERT-BULKS

// get intl booking season
Function OM0QS-INTL-SESN()
  OM0QW01.OPNSBD = 0; /* init, hold season begin date in ws*/
                                   /* for now*/
  OM0QW01.OPNSED = 0; /* init, hold season end date in ws for*/
                                   /* now*/

  OMAREC.OMASUB = 1;
  while (XSNTBL.XSECD[OMASUB] != "99" /* while not end of table*/
   && XSNTBL.XSNYR[OMASUB] != 9999 
   && OM0QW01.OPNSBD == 0) /* and begin date still blank*/
    /* check new need date within intl season boundaries*/
    if (OSAREC.OSANU8 >= XSNTBL.XSN-NIL-APRL-BDT[OMASUB]
     && OSAREC.OSANU8 <= XSNTBL.XSN-NIL-APRL-XDT[OMASUB]
     && XSNTBL.XXXSTAT[OMASUB] == "A")
      if (OP3REC.XBK-BK-SESN-CD != "  ") /* if bk sesn not blank and*/
        if (XSNTBL.XSECD[OMASUB] == OP3REC.XBK-BK-SESN-CD) /* matches xsn*/
          OM0QW01.OPNSBD = XSNTBL.XSN-NIL-APRL-BDT[OMASUB];
          OM0QW01.OPNSED = XSNTBL.XSN-NIL-APRL-XDT[OMASUB];
        else
          OMAREC.OMASUB = OMAREC.OMASUB + 1; /* keep looking*/
        end
      else /* no booking season on product*/
        if (XSNTBL.XSECD[OMASUB] in XBKTBL.XBK-BK-SESN-CD /* xsn sesn is*/
         && XBKTBL.XXXSTAT[sysVar.arrayIndex] == "A")     /* valid, active bk sesn*/
          OM0QW01.OPNSBD = XSNTBL.XSN-NIL-APRL-BDT[OMASUB];
          OM0QW01.OPNSED = XSNTBL.XSN-NIL-APRL-XDT[OMASUB];
        else
          OMAREC.OMASUB = OMAREC.OMASUB + 1; /* keep looking*/
        end
      end
    else
      OMAREC.OMASUB = OMAREC.OMASUB + 1; /* keep looking*/
    end
  end


end // end OM0QS-INTL-SESN

// GET MAX SOCD-HRR-RSN-SEQ
Function OM0QS-MAX-VSOHCR01()

   /* BUILD KEY TO READ VSOHCR01*/

  set VSOHCR01 empty;

  VSOHCR01.OP1PARTN = OP1REC.OP1PARTN;
  VSOHCR01.OP1CUOID = OP1REC.OP1CUOID;
  VSOHCR01.OP1NORID = OP1REC.OP1NORID;
  VSOHCR01.SOCD-APPL-SRC-CD = "OP";
  VSOHCR01.XOMCD = OM0QM001.XOMCD;
  VSOHCR01.SOCD-HDR-RSN-SEQ = 1;

   /* / DO A SEQLECT UNIQUE TO SEE IF THE ROW EXISTS*/

  call "VSOHCR01" ("S ", SQLCA, VSOHCR01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 100)
    OM0QW01.OM0QW-MAX-SEQ = 1;
  else
    if (SQLCA.VAGen_SQLCODE == 0)
      call "VSOHCR01" ("SM", SQLCA, VSOHCR01) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0
       || SQLCA.VAGen_SQLCODE == 100)
        OM0QW01.OM0QW-MAX-SEQ = VSOHCR01.SOCD-HDR-RSN-SEQ + 1;
      end
    end
  end

end // end OM0QS-MAX-VSOHCR01

// OCD COMMENT WINDOW
Function OM0QS-OCD-CMT()
   /* THIS STMT GROUP DISPLAYS A POP-UP WINDOW*/
   /* FOR THE USER TO ENTER THE OCD COMMENT*/

  XP0QW00.XP0QW-XOMCD = OM0QM001.XOMCD;

  XP0Q001(); /* pop-up window initialize*/

  converseLib.clearScreen();
   /* restore the original map*/

  if (OM0QW01.OM0QWP24 == "Y")
    if (OP3REC.OP2LNIST == "XL")
      converseLib.validationFailed(900);
    else
      converseLib.validationFailed(400);
    end
  end
  OMAREC.OMAERR = "Y";

  return;


end // end OM0QS-OCD-CMT

// round b-grade price to nickel
Function OM0QS-ROUND-BG-PRC()

       /* you are here if the order is international and*/
       /* a b-grade product.  round the product price up*/
       /* to the nickel*/


  OM0QW-SAVE-PRICE-1 = 0;
  OM0QW-SAVE-PRICE-2 = 0;

  OM0QW-SAVE-PRICE-1 = OM0QW01.SY5PRCUN[OMASUB] / 5;

  OM0QW-SAVE-PRICE-2 = OM0QW-SAVE-PRICE-1 * 5;

  if (OM0QW01.SY5PRCUN[OMASUB] != OM0QW-SAVE-PRICE-2)
    OM0QW-SAVE-PRICE-2 = OM0QW-SAVE-PRICE-2 + .05;
    OM0QW01.SY5PRCUN[OMASUB] = OM0QW-SAVE-PRICE-2;
  end


end // end OM0QS-ROUND-BG-PRC

// select dprod.vsyreg01
Function OM0QS-SEL-SY2000()

   /* CANADA 06/28/95*/

     /* get the product/region record*/

  set SQLCA empty;
  WSY2000.XGP-GPC-CD = SYCREC.XGPCD;
  WSY2000.SY-STY-NBR = SYCREC.SY1STNBR;
  WSY2000.SY-COLR-CD-ID = SYCREC.SY2CLRID;
  WSY2000.XDM-DIM-CD = SYCREC.XDMCD;
  WSY2000.WSY2000-OPTION-CODE = "S ";
  WSY2000.WSY2000-SUB-OPTION-CODE = "O";

  call "SY2000" (WSY2000) {isNoRefresh = yes, isExternal = yes};

  if (WSY2000.WSY2000-RETURN-CODE == 0)
    OM0QW01.OM0QW-WSY2000-FND-FLAG = "Y";

      /* move from wsy2000 to vcolor02*/

    SYCREC.PG1SC4CD = WSY2000.PG-SCHED-SPCLT-CD;
    SYCREC.PG1FCTCD = WSY2000.PG-FCST-CD;
    SYCREC.XSECD = WSY2000.XSE-SESN-CD;
    SYCREC.XSNYR = WSY2000.XSN-SESN-YR-RNG;

    SYCREC.SY2POFBD = WSY2000.SY-PROP-OFFER-BDT;
    SYCREC.SY2POFXD = WSY2000.SY-PROP-OFFER-XDT;
    SYCREC.SY2FOFBD = WSY2000.SY-FUTR-OFFER-BDT;
    SYCREC.SY2FOFXD = WSY2000.SY-FUTR-OFFER-XDT;

    SYCREC.XLCCD1 = WSY2000.XLC-LIFE-CYC-CD[1];
    SYCREC.XLCCD2 = WSY2000.XLC-LIFE-CYC-CD[2];
    SYCREC.XLCCD3 = WSY2000.XLC-LIFE-CYC-CD[3];
    SYCREC.XLCCD4 = WSY2000.XLC-LIFE-CYC-CD[4];

    SYCREC.SY2CEDT1 = WSY2000.SY-LIFE-CYC-EDT[1];
    SYCREC.SY2CEDT2 = WSY2000.SY-LIFE-CYC-EDT[2];
    SYCREC.SY2CEDT3 = WSY2000.SY-LIFE-CYC-EDT[3];
    SYCREC.SY2CEDT4 = WSY2000.SY-LIFE-CYC-EDT[4];

    SYCREC.XPRCD = WSY2000.XPR-PROD-TYP-CD;
    SYCREC.XPLCD = WSY2000.XPL-PROD-LN-CD;
    SYCREC.XPCCD = WSY2000.XPC-PROD-CAT-CD;

    SYCREC.SY2FDSMO = WSY2000.SY-FRST-DOM-SLS-MO;
    SYCREC.SY2PDCMO = WSY2000.SY-PROJ-DOM-CLS-MO;
    SYCREC.SY2SSCIN = WSY2000.SY-SFTY-STKCLS-IND;

    SYCREC.OPZHMIND = WSY2000.OP-HMDL-HOT-FL;
    SYCREC.SY2ALNOR = WSY2000.SY-ALW-NEW-ORD-FL;

    sysVar.arrayIndex = 1;
    while (sysVar.arrayIndex <= 6)
      SYCREC.XWHCD[sysVar.arrayIndex] = WSY2000.XWH-WHSE-CD[sysVar.arrayIndex];
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    end

    SYCREC.SY2RPRDI = WSY2000.SY-RSTR-XSO-IND;
    SYCREC.SY2BOSWI = WSY2000.SY-BO-SW;
    SYCREC.SY2BOEDT = WSY2000.SY-BO-SW-EDT;

  else
    if (WSY2000.WSY2000-RETURN-CODE == 02)
      OM0QW01.OM0QW-WSY2000-FND-FLAG = "N";
    else
      if (WSY2000.WSY2000-RETURN-CODE == 98) /* data base is busy*/
  /* next sentence*/
      else
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "OM0Q";
        TA1REC.TA1LOC = "OMOPS-SEL-SY2000";
        OM0QW01.OM0QW-WSY2000-GPC-CD = SYCREC.XGPCD;
        OM0QW01.OM0QW-WSY2000-STY-NBR = SYCREC.SY1STNBR;
        OM0QW01.OM0QW-WSY2000-COLR-CD = SYCREC.SY2CLRID;
        OM0QW01.OM0QW-WSY2000-DIM-CD = SYCREC.XDMCD;
        OM0QW01.OM0QW-WSY2000-PROD-REG-CD = WSY2000.XDR-PROD-REG-CD;
        OM0QW01.OM0QW-WSY2000-RETURN-CD = WSY2000.WSY2000-RETURN-CODE;
        TAEREC.TAEDESC1 = OM0QW-WSY2000-POST-1;
        TAEREC.TAEDESC2 = "BAD RETURN CODE FROM SY2000";
        TA1REC.TA1DBASE = "DPROD";
        TA1REC.TA1TBLVU = "SYREG02";
        TA1REC.TA1MAP = "OM0QM001";
        try
          call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
        end
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error - clear ws*/
      end
    end
  end
end // end OM0QS-SEL-SY2000

// Spain trade mark check
Function OM0QS-SPAIN-CHECK()

   /* ***************************************************************/
   /* check if order is being shipped to Spain or Canary Islands   */
   /* and the user is tring to reinstate a Spain non-complaint item*/
   /* ***************************************************************/
   /* If the Return-code is 02 then the product can't be reinstated*/
   /* the error message 1006 should be displayed.                  */
   /* ***************************************************************/

  OP10REC.OP10-PASSING-APPL = "OM0Q"; /* Calling application*/
  OP10REC.OP1CUOID = OP1REC.OP1CUOID; /* Customer ord-id*/
  OP10REC.OP1NORID = OP1REC.OP1NORID; /* nike-ord-id*/
  OP10REC.KUCCOID = OP1REC.KUCCOID; /* customer*/
  OP10REC.KUMSTRID = OP1REC.KUMSTRID; /* store*/
  OP10REC.OP11TMSF = OP1REC.OP11TMSF; /* onetime ship flg*/
  OP10REC.OP1SGPAO = OP1REC.OP1SGPAO; /* shipgrp ovrd ind*/
  OP10REC.OP1SHAID = OP1REC.OP1SHAID; /* shipgrp addr id*/
  OP10REC.SY1STNBR = OP3REC.SY1STNBR; /* style*/
  OP10REC.XGPCD = OP1REC.XGPCD; /* gpc*/
  OP10REC.OP10-RETURN-CODE = "99"; /* intialise the return-code*/
  call "OP6410" (OP10REC) {isNoRefresh = yes, isExternal = yes}; /* call Spain compliance routine*/

  /* check for return code from Nike both */
  if (OP10REC.OP10-RETURN-CODE == "00" /* product is Spain/Cnry compliant*/
   || OP10REC.OP10-RETURN-CODE == "01") /* Countr-code is not SPAI/CNRY*/
    /* next sentence*/
  else
    if (OP10REC.OP10-RETURN-CODE == "02")
                                  /* order has  Spain/Cnry non-compliant*/
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(1006);
      return;
    else
      if (OP10REC.OP10-RETURN-CODE == "03") /* database busy */
        OMAREC.OMAERR = "Y";
        set TA1REC empty;
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
        TA1REC.TA1MAP = "OM0QM005"; /* map*/
        TA1REC.TA1LOC = "OM0QS-SPAIN-CHECK "; /* location*/
        converseLib.validationFailed(010);
        XSOMS-OP6410-PSRTN(); /* Error post routine*/
        return;
      else
        OMAREC.OMAERR = "Y";
        set TA1REC empty;
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
        TA1REC.TA1LOC = "OM0QS-SPAIN-CHECK";
        TA1REC.TA1MAP = "OM0QM005";
        XSOMS-OP6410-ERRTN(); /* return to OM0M app*/
      end
    end
  end
end // end OM0QS-SPAIN-CHECK

// get the sales pgm record
Function OM0QS-SPGM-DEPT-CD()


      /* *************************************************/
      /* this statement group does a call to IO0070 to*/
      /* get the nike department code*/
      /* *************************************************/

  set SQLCA empty; /* input to IO0070 iomod*/
  set SP1REC empty; /* need the department code*/

  SP1REC.SP1ID = OP1REC.SP1ID; /* key for sp1rec in io0070 call*/
  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes}; /* obtain dept code*/
  if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(6); /* change not made (data base not*/
                                   /* available)*/
    else
      if (SQLCA.VAGen_SQLCODE == -904
       || SQLCA.VAGen_SQLCODE == 100)
        TA1REC.TA1PGMNM = "OM0Q464";
        TA1REC.TA1DBASE = "DSPGM";
        TA1REC.TA1TBLVU = "VSPGM001";
        OM0QW01.OM0QW-SAY-ORDER = "ORDER # ";
        OM0QW01.OM0QW-ORDER-NUM = OP1REC.OP1CUOID;
        OM0QW01.OM0QW-SAY-PERIOD = ".";
        OM0QW01.OM0QW-SUB-ORDER = OP1REC.OP1NORID;
        OM0QW01.OM0QW-SAY-SPGM = "  SPGM ";
        OM0QW01.OM0QW-SPGM = OP1REC.SP1ID;
        TA1REC.TA1TBLKE = OM0QW-TABLE-KEY;
        TA1REC.TA1LOC = "OM0QS-SPGM-DEPT-CD";
        TA1REC.TA1LOCAT[4] = "IO0070";
        TA1REC.TA1MAPAP = "OM0Q";
        TA1REC.TA1TYPE = "DB2"; /* abend type*/
        TA1REC.TA1FUNC = "RETN"; /* abend func*/
        set ERRSQLCA empty; /* clear area*/
        move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* synpoint rollback*/
        try
          call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        end /* abend module*/
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
        XSPF4(); /* master menu*/
        exit program; /* master menu failure*/
      else
       /* next sentence*/
      end
    end
  end


end // end OM0QS-SPGM-DEPT-CD

// UPDATE VBULKS02
Function OM0QS-UPDTE-VBULK()
   /* tcs include begin*/
   /* to update vbulk*/
  set OBFREC empty;
  set SQLCA empty;
  VBULKS02.KUMSTRID = OP1REC.KUMSTRID;
  VBULKS02.XNXCD = OP1REC.XNXCD;
  VBULKS02.XBDCD = OP1REC.XBDCD;
  VBULKS02.OP1CUPO = OP1REC.OP1CUPO;
  VBULKS02.XDVCD = OP1REC.XDVCD;
  VBULKS02.XSOCD = OP1REC.XSOCD;
  VBULKS02.XWHCD = OP1REC.XWHCD;
  VBULKS02.OP1CUNDT = OP1REC.OP1CUNDT;
  VBULKS02.OP1DSADT = OP1REC.OP1DSADT;
  VBULKS02.SP1ID = OP1REC.SP1ID;
  VBULKS02.SM4REPID = OP1REC.SM4REPID;
  OBFREC.OBFTASK = "U ";
  call "VBULKS02" (OBFREC, SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

  else
    TA1REC.TA1LOCAT[1] = "U ";
    TA1REC.TA1LOCAT[2] = "VBULKS02";
    TA1REC.TA1LOCAT[3] = "OMOQS-UPDTE-VBULK";
    TA1REC.TA1DBASE = "DORDB  "; /* data base name*/
    TA1REC.TA1TBLVU = "VBULKS02"; /* data base view*/
    TA1REC.TA1LOCAT[1] = "U ";
    OM0QSYE(); /* load TA1REC with op1rec data*/
    OM0QSZ4(); /* abend for writes*/
  end
   /* tcs include end*/
end // end OM0QS-UPDTE-VBULK

// CHECK FOR PREPACK
Function OM0QS-VAL-PREPKS()

   /* call OP3850 again to calculate prepack quantities*/

  set OPMZREC empty;

  OPMZREC.XGPCD = OP1REC.XGPCD;
  /* TT#12895-Changes begin - 07/11/2001 kshiva*/
  OPMZREC.XDSCD = OP1REC.XDSCD;
  /* TT#12895-Changes end - 07/11/2001 kshiva*/
  OPMZREC.SY1STNBR = OP3REC.SY1STNBR;
  OPMZREC.SY2CLRID = OP3REC.SY2CLRID;
  OPMZREC.XDMCD = OP3REC.XDMCD;
  OPMZREC.OP2TONOQ = 0;

   /* Move qtys to pass record*/

  OMAREC.OMASUB1 = 1; /* map size subscript*/

  if (OM0QW01.OM0QWSCR == 1)
    OMAREC.OMASUB = OM0QW01.OM0QWSZF;
  else
    OMAREC.OMASUB = OM0QW01.OM0QWSB2;
  end

  while (OMAREC.OMASUB1 <= 20 /* map size*/
   && OMAREC.OMASUB <= 40  /* record size*/
   && OMAREC.OMASUB <= OM0QW01.OM0QWSZL)
    if (OP3REC.OP3SZAFL[OMASUB] == "Y") /* size active flag*/
      if (OP3REC.OP3ONOQT[OMASUB] > 0 ||  /* ordered qty*/
      OM0QW01.OM0QWP21 == "Y")            /* full range of sizes requested*/
        OPMZREC.OP3ONOQT[OMASUB] = OM0QM001.OP3ONOQT[OMASUB1];
        OPMZREC.OP2TONOQ = OPMZREC.OP2TONOQ + OM0QM001.OP3ONOQT[OMASUB1];
        OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1; /* increment map size sub*/
      end
    end
    OMAREC.OMASUB = OMAREC.OMASUB + 1; /* increment record size sub*/
  end

  call "OP3850" (OPMZREC) {isNoRefresh = yes, isExternal = yes};

  if (OPMZREC.OPMZ-RETURN-CD == 0)
    OM0QS-CRE-PREPKS();
  else
    if (OPMZREC.OPMZ-RETURN-CD == 1
     || OPMZREC.OPMZ-RETURN-CD == 2
     || OPMZREC.OPMZ-RETURN-CD == 3
     || OPMZREC.OPMZ-RETURN-CD == 4)
      OMAREC.OMAERR = "Y";
      OM0QM001.VAGen_EZEMSG = OPMZREC.OPMZ-RETURN-MSG;
    else
      if (OPMZREC.OPMZ-RETURN-CD == 8)
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(10);
      else
        if (OPMZREC.OPMZ-RETURN-CD == 7
         || OPMZREC.OPMZ-RETURN-CD == 9)
          OMAREC.OMAERR = "Y";
          TA1REC.TA1TYPE = "APPL";
          TA1REC.TA1FUNC = "RETN";
          TA1REC.TA1PGMNM = "OM0Q    ";
          TA1REC.TA1LOCAT[1] = "OM0Q444 ";
          TA1REC.TA1LOCAT[2] = "OP3850  ";
          TA1REC.TA1LOCAT[3] = OPMZREC.OPMZ-RETURN-CD;
          TA1REC.TA1LOCAT[4] = "        ";
          set TAEREC empty;
          OPMZREC.OPMZ-DIAG-KEY = " ";
          OPMZREC.OPMZ-DIAG-CUST-ORD-ID = OP1REC.OP1CUOID;
          OPMZREC.OPMZ-DIAG-NIKE-ORD-ID = OP1REC.OP1NORID;
          OPMZREC.OPMZ-DIAG-GPC-CD = OPMZREC.XGPCD;
          OPMZREC.OPMZ-DIAG-STY-NBR = OPMZREC.SY1STNBR;
          OPMZREC.OPMZ-DIAG-COLR-CD-ID = OPMZREC.SY2CLRID;
          OPMZREC.OPMZ-DIAG-DIM-CD = OPMZREC.XDMCD;
          OPMZREC.OPMZ-DIAG-RETURN-CD = OPMZREC.OPMZ-RETURN-CD;
          TAEREC.TAEDESC1 = OPMZREC.OPMZ-DIAG-KEY;
          TAEREC.TAEDESC2 = OPMZREC.OPMZ-RETURN-MSG;
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
          call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
          XSPF4();
          exit program;
        end
      end
    end
  end
end // end OM0QS-VAL-PREPKS

// init tairec, diagnostics
Function OM0QS01()


      /* *************************************/
      /* * initialize all working-storages*/
      /* *************************************/


   /* ************************************************************/
   /* *  set application level recs empty where possible        **/
   /* ************************************************************/

  set KUMREC empty;
  set OMAREC empty;
  set OMCREC empty;
  set OP2REC empty;
   /* SPAIN TRADEMARK CHANGES   03/17/2000*/
   /* The following statement is added to initialise Spain project*/
   /* validating record*/
   /* Spain project * changes * begin * 04/03/2000 *******/
  set OP10REC empty;
   /* Spain project * changes * begin * 04/03/2000 *******/
  set TA1REC empty;
  set TA2REC empty;


      /* *****************************/
      /* * init error diag areas*/
      /* *****************************/

  TA1REC.TA1TYPE = "DB2 "; /* errdiag type*/
  TA1REC.TA1PGMNM = "OM0Q"; /* program name*/
  TA1REC.TA1MAP = "OM0QM001"; /* current map name*/

      /* **************************/
      /* init omwrec, global w-s*/
      /* **************************/

  if (OMWREC.OMWOPTN == 2 /* reached end of menu selected*/
   || OMWREC.OMWOPTN == 4 /* flow*/
   || OMWREC.OMWOPTN == 5)
    OMWREC.OMWEOF = "Y";
  end

  OMWREC.OMWPF2CH = "N"; /* re-set one-time change flag*/


      /* *********************************/
      /* init omarec, temporary w-s*/
      /* *********************************/

  OMAREC.OMASEP1 = "."; /* set customer number separators*/
  OMAREC.OMASEP2 = ".";

  OMAREC.OMAHP1 = "-"; /* set date separators*/
  OMAREC.OMAHP2 = "-";

  XX0XS01(); /* get system date and time*/


end // end OM0QS01

// CHECK FOR PREPACK
Function OM0QS02()

   /* THIS STATEMENT GROUP CHECKS THE PREPACK DATABASE*/
   /* TO SEE IF THE ORDER EXISTS*/

  OMWREC.OMWPKCHF = "N"; /* pack change flag*/
  OMWREC.OMWPPEXF = "N"; /* prepack exists flag*/
  sysVar.arrayIndex = 1;

  if (OP1REC.XGPCD == "03" /* APPAREL ORDER*/
   || OP1REC.XGPCD == "02") /* footwear order*/
    if (OP1REC.XPACD in XPATBL.XPACD /* IF VALID PACK CODE*/
     && XPATBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XPATBL.XPASPFFL[sysVar.arrayIndex] == "Y") /* CUST WANTS PREPACK*/
           /* NEXT SENTENCE   SEE IF ORDER IS ON DBASE*/
      else
        return;
      end
    else
      return;
    end
  else
    return;
  end

   /* BUILD THE KEY TO SPECIFIED PREPACK TABLE*/

  set OSNREC empty;

  OSNREC.XWHCD = OP1REC.XWHCD; /* WAREHOUSE*/
  OSNREC.OP1PARTN = OP1REC.OP1PARTN; /* PART CHAR*/
  OSNREC.OP1CUOID = OP1REC.OP1CUOID; /* ORDER NUM*/
  OSNREC.OP1NORID = OP1REC.OP1NORID; /* NIKE ORD ID*/

  call "IO5650" ("SE", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == -811) /* multi records found*/
    OMWREC.OMWPPEXF = "Y"; /* prepack exists flag*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OMWREC.OMWPPEXF = "N"; /* prepack exists flag*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        OMWREC.OMWPKCHF = "Y"; /* reseet pack change flag*/
        OMAREC.OMAERR = "Y";
        OM0QW01.OM0QW911 = "Y"; /* -911 on prepack*/
        converseLib.validationFailed(672); /* prepack db busy try again*/
        return;
      else
        OMAREC.OMAERR = "Y";
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "OM0Q    ";
        TA1REC.TA1LOCAT[1] = "SE      ";
        TA1REC.TA1LOCAT[2] = "OM0QS02 ";
        TA1REC.TA1LOCAT[3] = "IO5650  ";
        TA1REC.TA1DBASE = "DORDER  ";
        TA1REC.TA1TBLVU = "VCSPRP01";
        OM0QW01.OM0QWT1 = " ";
        OM0QW01.OM0QWTK2 = OP1REC.OP1PARTN;
        OM0QW01.OM0QWTK1 = OP1REC.OP1CUOID;
        OM0QW01.OM0QWTK3 = OP1REC.OP1NORID;
        TA1REC.TA1TBLKE = OM0QW01.OM0QWT1;
        try
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        end
        COMMAREA.CAMSGA = "PREPACK DB PROBLEMS";
        COMMAREA.CAMSGB = "ORDER MAY HAVE PREPACK CALL USER ANALYST";
        COMMAREA.CACURRAP = "OM0M";
        transfer to program "OM0M" passing COMMAREA;
      end
    end
  end

end // end OM0QS02

// second -911 abend
Function OM0QS03()
  OMAREC.OMAERR = "Y";
  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "OM0Q    ";
  TA1REC.TA1LOCAT[1] = "SE -911 ";
  TA1REC.TA1LOCAT[2] = "OM0QS03 ";
  TA1REC.TA1LOCAT[3] = "IO5650  ";
  TA1REC.TA1DBASE = "DORDER  ";
  TA1REC.TA1TBLVU = "VCSPRP01";
  OM0QW01.OM0QWT1 = " ";
  OM0QW01.OM0QWTK2 = OP1REC.OP1PARTN;
  OM0QW01.OM0QWTK1 = OP1REC.OP1CUOID;
  OM0QW01.OM0QWTK3 = OP1REC.OP1NORID;
  TA1REC.TA1TBLKE = OM0QW01.OM0QWT1;
  try
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  COMMAREA.CAMSGA = "PREPACK DB BUSY";
  COMMAREA.CAMSGB = "ORDER MAY HAVE PREPACK ";
  COMMAREA.CACURRAP = "OM0M";
  transfer to program "OM0M" passing COMMAREA;

end // end OM0QS03

// CHECK FOR PREPACK PF21
Function OM0QS04()

   /* THIS STATEMENT GROUP CHECKS THE PREPACK DATABASE*/
   /* TO SEE IF THE ORDER EXISTS*/

  OMWREC.OMWPPEXF = "N"; /* prepack exists flag*/
  sysVar.arrayIndex = 1;

  if (OP1REC.XGPCD == "03" /* APPAREL ORDER*/
   || OP1REC.XGPCD == "02") /* footwear order*/
    if (OP1REC.XPACD in XPATBL.XPACD /* IF VALID PACK CODE*/
     && XPATBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XPATBL.XPASPFFL[sysVar.arrayIndex] == "Y") /* CUST WANTS PREPACK*/
           /* NEXT SENTENCE   SEE IF ORDER IS ON DBASE*/
      else
        return;
      end
    else
      return;
    end
  else
    return;
  end

   /* BUILD THE KEY TO SPECIFIED PREPACK TABLE*/

  set OSNREC empty;

  OSNREC.XWHCD = OP1REC.XWHCD; /* WAREHOUSE*/
  OSNREC.OP1PARTN = OP1REC.OP1PARTN; /* PART CHAR*/
  OSNREC.OP1CUOID = OP1REC.OP1CUOID; /* ORDER NUM*/
  OSNREC.OP1NORID = OP1REC.OP1NORID; /* NIKE ORD ID*/
  OSNREC.OP2LNINB = OP3REC.OP2LNINB; /* LINE ITEM*/

  call "IO5650" ("S ", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OMWREC.OMWPPEXF = "Y"; /* prepack exists flag*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OMWREC.OMWPPEXF = "N"; /* prepack exists flag*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        OMAREC.OMAERR = "Y";
        OM0QW01.OM0QW911 = "Y"; /* -911 on prepack*/
        converseLib.validationFailed(672); /* prepack db busy try again*/
        return;
      else
        OMAREC.OMAERR = "Y";
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "OM0Q    ";
        TA1REC.TA1LOCAT[1] = "SE      ";
        TA1REC.TA1LOCAT[2] = "OM0QS04 ";
        TA1REC.TA1LOCAT[3] = "IO5650  ";
        TA1REC.TA1DBASE = "DORDER  ";
        TA1REC.TA1TBLVU = "VCSPRP01";
        OM0QW01.OM0QWT1 = " ";
        OM0QW01.OM0QWTK2 = OP1REC.OP1PARTN;
        OM0QW01.OM0QWTK1 = OP1REC.OP1CUOID;
        OM0QW01.OM0QWTK3 = OP1REC.OP1NORID;
        TA1REC.TA1TBLKE = OM0QW01.OM0QWT1;
        try
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        end
        COMMAREA.CAMSGA = "PREPACK DB PROBLEMS";
        COMMAREA.CAMSGB = "ORDER MAY HAVE PREPACK CALL USER ANALYST";
        COMMAREA.CACURRAP = "OM0M";
        transfer to program "OM0M" passing COMMAREA;
      end
    end
  end

end // end OM0QS04

// init om0qw01 with op3rec
Function OM0QS20()


      /* *****************************/
      /* * init om0qw01 with op3rec*/
      /* *****************************/


      /* *********************************************************/
      /* * initialize flags for next product*/
      /* *********************************************************/


  OM0QSX1(); /* order type lookup*/

  OM0QSX2(); /* bulk draw table lookup, also for*/
                                   /* regular orders*/

  OM0QSX3(); /* order stat lookup*/

  sysVar.arrayIndex = 0; /* ordER MAINT CODE LOOKUP*/
  if (OMWREC.XOMCD in XOMTBL.XOMCD)
    OM0QM001.XOMABRV = XOMTBL.XOMABRV[sysVar.arrayIndex];
  end
  OM0QW01.OM0QWXOM = sysVar.arrayIndex; /* no maint code*/

  if (OP1REC.XDSCD in XDSTBL.XDSCD /* direct ship lookup*/
   && XDSTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active xdscd*/
    OM0QW01.XDSWHSEF = XDSTBL.XDSWHSEF[sysVar.arrayIndex]; /* whse req'd flag*/
  else
    OM0QW01.XDSWHSEF = "Y"; /* whse req'd, show err later*/
  end

  OM0QW01.OM0QWMSA = "QUANTITY MUST BE GREATER THAN "; /* err literal*/
  OM0QW01.OM0QWMSD = " IN-PROCESS QUANTITY";

  OM0QW01.OM0QWPF6 = "N"; /* pf 6 change size price*/
  OM0QW01.OM0QWP21 = OMWREC.OMWPF21; /* pf 21 in prev. applicatn*/

  OMWREC.OMWPF21 = "N"; /* good only on first product*/

  OM0QW01.OM0QWP24 = "N"; /* pf 24 reject product*/

  OM0QW01.OM0QWREJ = "N"; /* rejected product*/

  OM0QW01.OM0QWSPP = " "; /* sales pgm prod prices*/

  OM0QW01.OM0QWPAO = "N"; /* qty adds-on to order*/
  OM0QW01.OM0QWP30 = "N"; /* not > 30 days after deadline*/
  OM0QW01.OM0QW-UPDATE-ORIG-QTYS-FL = "N"; /* not updating orig qtys*/
  OM0QW01.OM0QW-DAYS-PAST-CUTOFF = 0; /* not past cutoff date*/

  OM0QW01.OM0QWSCR = 1; /* start with screen #1*/
  OM0QW01.OM0QWMOR = "N"; /* no second screen data*/

  OM0QW01.OM0QWAUT = "N"; /* no price override authorization*/
  OM0QW01.OM0QWPAJ = "N"; /* no edit done, price adjust variance*/
  OM0QW01.OM0QWPAS = "N"; /* no edit done, price 4 all, variance*/
  OM0QW01.OM0QWPSZ = "N"; /* no edit done, size price variance*/

  OM0QW01.OM0QWCLP = 0; /* 0 to color prc*/
  OM0QW01.OM0QWSTP = 0; /* 0 to style prc*/

  OM0QW01.OM0QWCWH = "N"; /* no change in whse*/
  OM0QW01.OM0QWSPL = "N"; /* no order split*/
  OM0QW01.OM0QWTPC = "N"; /* no edit on production deadline*/
  OM0QW01.OM0QWCHG = "N"; /* no change made yet*/

  OM0QW01.OM0QWS01 = "-"; /* separator*/
  OM0QW01.OM0QWS02 = "-"; /* separator*/

  OM0QW01.OP1CUNDT = OP1REC.OP1CUNDT; /* original need date*/
  OM0QW01.OM0QWHDT = OP1REC.OP1CUNDT; /* hold need date for avail*/
  OM0QW01.OM0QWHDT = OP1REC.OP1CUNDT; /* hold need date for avail*/

  OM0QW01.OM0QWOWH = OP1REC.XWHCD; /* original whse for tags*/
  OM0QW01.OM0QWHS = OP1REC.XWHCD; /* hold whse for avail*/

  OM0QW01.OM0QWFBK = "N"; /* bulk not foun or regular order*/
  OM0QW01.OM0QWFLG = "N"; /* general use flag*/
  OM0QW01.OM0QWCAL = "N"; /* call to availability flag*/

  OM0QW01.OM0QWUMF = " "; /* unit of measure standard*/

    /* screened products initialization*/

  /*  */
  OM0QW01.OM0QWPDT = 0; /* adj need date for custom logo*/
  OM0QW01.OM0QWFRF = "N"; /* availability freeze flag*/

      /* ********************************************************/

  OM0QW01.OM0QWPCT = XOTTBL.XOTPRCVP[OM0QWOTS] / 100; /* prc vary pct*/

  if (XOTTBL.XOTPRCDT[OM0QWOTS] == "B")
    OM0QW01.OM0QWPED = XX0XW01.XX0XWDAT; /* booking is today*/
  else
    OM0QW01.OM0QWPED = OP1REC.OP1CUNDT; /* booking is nd dt*/
  end

  OM0QW01.OM0QWOQ1 = OP3REC.OP2TONOQ; /* orig tot qty for credit*/
  OM0QW01.OM0QWOV1 = OP3REC.OP2TONOQ * OP3REC.OP2AUPRC; /* save prod value*/
  if (OP3REC.OP2TALCQ > 0) /* allocated units exist*/
    if (OP3REC.OP2LNIST == "AL"
     || OP3REC.OP2LNIST == "PA")
      OM0QW01.OM0QWAV1 = OP3REC.OP2TALCQ * OP3REC.OP2AUPRC;
    end
  end

  OM0QW01.XOWCD = OP3REC.XOWCD; /* owner group*/
  OM0QW01.OP2PRCVF = OP3REC.OP2PRCVF; /* price vary flag*/
  OM0QW01.OP2PRCOF = OP3REC.OP2PRCOF; /* price override flag*/
  OM0QW01.OP2GBLOF = OP3REC.OP2GBLOF; /* global override flag*/
  OM0QW01.OP2AUPRC = OP3REC.OP2AUPRC; /* average unit price*/

  OMASUB = 1; /* record sub*/
  while (OMASUB < 41)
    if (OP3REC.OP3SZAFL[OMASUB] == "Y") /* active size*/
      if (OP3REC.OP3ONOQT[OMASUB] > 0 /* ordered qty*/
       || OP3REC.OP3SHPQT[OMASUB] > 0 /* shipped qty-agooll changes*/
       || OP3REC.OP3CNLQT[OMASUB] > 0) /* cancelled qty-agooll chg*/
        OM0QW01.SY5PRCUN[OMASUB] = OP3REC.SY5PRCUN[OMASUB]; /* price*/
        OM0QW01.OP3PRCOF[OMASUB] = OP3REC.OP3PRCOF[OMASUB];
                                   /* price overide*/
      end
    end
    OMASUB = OMASUB + 1;
  end

      /* ********************************************************/
end // end OM0QS20

// check fringe/ gut for sizes
Function OM0QS24()


      /* *********************************************************/
      /* * check fringe/gut*/
      /* *********************************************************/

  if (SYCREC.SY3FRGUT[OMASUB] == "F"
   || SYCREC.SY3FRGUT[OMASUB] == "G")
    OM0QW01.OP3SZAFL[OMASUB] = "Y"; /* active size*/
  else
    if (SYCREC.SY3FRGUT[OMASUB] == "X")
      if (XOTTBL.XOTXTRAS[OM0QWOTS] == "Y")
        OM0QW01.OP3SZAFL[OMASUB] = "Y"; /* active size*/
      end
    end
  end

      /* ********************************************************/
end // end OM0QS24

// check fringe/ gut for sizes
Function OM0QS25()


      /* *********************************************************/
      /* * set full valid size range for pf21 indicated*/
      /* *********************************************************/


  OMASUB = 1;

  while (OMASUB < 41) /* wont be more than 40 sizes*/
    if (OM0QW01.OP3SZAFL[OMASUB] == "Y") /* active*/
      if (OP3REC.OP3SZAFL[OMASUB] == "Y") /* size already active, skip*/
        /* next sentence*/
      else
        OP3REC.OP3SZAFL[OMASUB] = "Y"; /* set active*/
        OP3REC.OP3PRCOF[OMASUB] = " "; /* no price overrides*/
        OP3REC.OP3ONOQT[OMASUB] = 0; /* zero on -ord qty*/
        OP3REC.SY5PRCUN[OMASUB] = 0; /* zero price*/
        OP3REC.OP3ORGQT[OMASUB] = 0; /* zero original qty*/
        OP3REC.OP3ALQT[OMASUB] = 0; /* zero allocated qty*/
        OP3REC.OP3OHRQT[OMASUB] = 0; /* zero on hand reserved*/
        OP3REC.OP3WPRQT[OMASUB] = 0; /* zero work in process*/
        OP3REC.OP3SHPQT[OMASUB] = 0; /* zero shipped qty*/
        OP3REC.OP3CNLQT[OMASUB] = 0; /* zero cancel qtys*/
      end
    end
    OMASUB = OMASUB + 1;
  end

  OM0QW01.OM0QWSZF = OM0QW01.OM0QWSMF; /* set record range*/
  OM0QW01.OM0QWSZL = OM0QW01.OM0QWSML;

      /* ********************************************************/
end // end OM0QS25

// move availability to map
Function OM0QS31()


      /* *********************************************************/
      /* * move availability to map after accessing avail*/
      /* *  system due to whse chg or nd date chg*/
      /* *  or a refresh due to unsuccessful update*/
      /* *********************************************************/

      /* *************************************/
      /* * map lines 7 - 16  all 20 sizes*/
      /* *************************************/


  OMAREC.OMASUB1 = 1; /* map index = 1 to start*/

  if (OM0QW01.OM0QWSCR == 1) /* if on screen 1*/
    OMASUB = OM0QW01.OM0QWSZF; /* find first size to move*/
  else
    OMASUB = OM0QW01.OM0QWSB2; /* screen 2 starting place*/
  end


  while (OMASUB <= OM0QW01.OM0QWSZL /* last size in range*/
   && OMASUB < 41                /* last possible size(just in case)*/
   && OMASUB1 < 21) /* last size on map*/
    if (OP3REC.OP3SZAFL[OMASUB] == "Y") /* size is active*/
      if (OP3REC.OP3ONOQT[OMASUB] > 0 /* ordered qty*/
       || OM0QW01.OM0QWP21 == "Y")    /* full range requested*/
        OM0QS32(); /* moves availability*/
        OMASUB1 = OMASUB1 + 1;
      end
    end
    OMASUB = OMASUB + 1;
  end

      /* ********************************************************/
end // end OM0QS31

// move availability to map
Function OM0QS32()


      /* *********************************************************/
      /* * move availability to map after accessing avail*/
      /* *  system*/
      /* *********************************************************/


      /* move availability to map for bulk/draw*/

  if (OP1REC.XBDCD != "0") /* bulk or draw*/
    if (XBDTBL.XBDRWOFL[OM0QWBDS] == "Y") /* draw*/
      if (OM0QW01.OM0QWFBK == "Y" /* draw with existing bulk*/
       && OM0QW01.OM0QWFRF == "N") /* increases to quantities allowed*/
        if ((XBDTBL.XBDSETFL[OM0QWBDS] == "Y" /* flex or smart draw*/
         && XBDTBL.XBDRVRFL[OM0QWBDS] == "Y") /* smart draw*/
         || (XBDTBL.XBDCD[OM0QWBDS] == "K"    /* nike draw*/
         && XOTTBL.XOTATONF[OM0QWOTS] == "Y")) /* at once*/
          OM0QM001.OM0QMAVL[OMASUB1] = OM0QW03.OP3OHRQT[OMASUB];
        else
          OM0QM001.OM0QMAVL[OMASUB1] = OM0QW03.OP3ONOQT[OMASUB];
        end
      else
        OM0QM001.OM0QMAVL[OMASUB1] = 0;
      end
    end
  end

     /* move availability to map*/

  if (OM0QW01.OM0QWCAL == "Y") /* made call to availability*/
    OM0QM001.OM0QMPOF[OMASUB1] = OBIREC.OBICOND[OMASUB];
    OM0QM001.OM0QMAVL[OMASUB1] = OBIREC.OBISZQTY[OMASUB];
    set OM0QM001.OM0QMPOF[OMASUB1] initialAttributes;
  end

  set OM0QM001.OM0QMAVL[OMASUB1] initialAttributes;
      /* ********************************************************/
end // end OM0QS32

// protect entire map
Function OM0QS34()

   /* ************************************************/
   /* protect all fields on map due to order type*/
   /* or security. this allows viewing a product om0q style*/
   /* ************************************************/

  set OM0QM001.XOMCD protect; /* change reason*/
  set OM0QM001.OM0QWMOR protect; /* more flag*/
  set OM0QM001.XOWCD protect; /* owner group*/
  set OM0QM001.OM0QMNDT protect; /* protect need date*/
  set OM0QM001.XWHCD protect; /* protect whse*/
  set OM0QM001.XDSCD protect; /* protect direct ship*/
  set OM0QM001.XOACD protect; /* override authorization*/

   /* ***********************************************/
   /* if a transmitted airborne order - protect  **/
   /* all fields.  if the field does not have  **/
   /* a value darken the underscores           **/
   /* ***********************************************/
  OMASUB1 = 1; /* map sub*/
  while (OMASUB1 < 21) /* while on map*/
    if (XS0MW01.XS0MWABF == "Y") /* transmitted airborne order?*/
      if (OM0QM001.OP3ONOQT[OMASUB1] == 0)
        set OM0QM001.OP3ONOQT[OMASUB1] protect, invisible;
      else
        set OM0QM001.OP3ONOQT[OMASUB1] protect;
      end
      if (OM0QM001.SY5PRCUN[OMASUB1] == 0)
        set OM0QM001.SY5PRCUN[OMASUB1] protect, invisible;
      else
        set OM0QM001.SY5PRCUN[OMASUB1] protect;
      end
      if (OM0QM001.OP3PRCOF[OMASUB1] == 0)
        set OM0QM001.OP3PRCOF[OMASUB1] protect, invisible;
      else
        set OM0QM001.OP3PRCOF[OMASUB1] protect;
      end
    else
      set OM0QM001.OP3ONOQT[OMASUB1] protect; /* protect qtys*/
      set OM0QM001.SY5PRCUN[OMASUB1] protect; /* protect prices*/
      set OM0QM001.OP3PRCOF[OMASUB1] protect; /* protect price override*/
    end
    OMASUB1 = OMASUB1 + 1;
  end
end // end OM0QS34

// edit need dt for 1 day push
Function OM0QS42()
   /* TCS DELETE  BEGIN    (04/28/98)*/
   /* IF OP1REC.OP1CUNDT GT XX0XW01.XX0XWDAT;/* orig need date > today*/
    /* OM0QW01.OM0QWDIF = OSAREC.OSANU8 - OP1REC.OP1CUNDT;*/
   /* ELSE;                            /* need date prior to today*/
    /* OM0QW01.OM0QWDIF = OSAREC.OSANU8 - XX0XW01.XX0XWDAT;*/
   /* END;*/

   /* TCS DELETE  END      (04/28/98)*/

   /* ********* TCS INCLUDE BEGIN*************/

  set TA2REC empty; /* CLEAR TA2REC*/
  if (OP1REC.OP1CUNDT > XX0XW01.XX0XWDAT)
    TA2REC.TA2DBDFN = OP1REC.OP1CUNDT;
    TA2REC.TA2DBDTN = OSAREC.OSANU8;
    TA2REC.TA2DTOPT = "DAYSDIFF"; /* OPTION*/
    try
      call "TA0040" (TA2REC) {isExternal = yes};
    end /* DATE DIFFERENCE*/
    if (TA2REC.TA2RTNCD == 0)
      OM0QW01.OM0QWDIF = TA2REC.TA2DBDDN;
    else
      OM0QW01.OM0QWDIF = OSAREC.OSANU8 - OP1REC.OP1CUNDT;
    end
  else
    TA2REC.TA2DBDFN = XX0XW01.XX0XWDAT;
    TA2REC.TA2DBDTN = OSAREC.OSANU8;
    TA2REC.TA2DTOPT = "DAYSDIFF"; /* OPITON*/
    try
      call "TA0040" (TA2REC) {isExternal = yes};
    end /* COMMON DATE CHECKING*/
    if (TA2REC.TA2RTNCD == 0)
      OM0QW01.OM0QWDIF = TA2REC.TA2DBDDN;
    else
      OM0QW01.OM0QWDIF = OSAREC.OSANU8 - XX0XW01.XX0XWDAT;
    end
  end
   /* *********** TCS INCLUDE END***************/

  if (OM0QW01.OM0QWDIF > 5) /* more that 1 day span*/
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(389); /* must xl then add prod for > 1 day chg*/
    set OM0QM001.OM0QMNDT cursor, bold;
  end

end // end OM0QS42

// move msg about in process qty
Function OM0QS43()


      /* create error message for qty lt in-process qty*/


  OM0QW01.OM0QWMSB = OM0QW01.OM0QWINP[OMASUB]; /* put in-prc qty in msg*/

  OMASUB2 = 1; /* zero suppress quantity*/
  while (OMASUB2 < 10) /* qty is 9 digits*/
    if (OM0QW01.OM0QWMSC[OMASUB2] == "0")
      OM0QW01.OM0QWMSC[OMASUB2] = " ";
      OMASUB2 = OMASUB2 + 1;
    else
      OMASUB2 = 99; /* if not zero then get out*/
    end
  end

  OM0QM001.VAGen_EZEMSG = OM0QW01.OM0QWMSG; /* put msg on map*/


end // end OM0QS43

// edit reason code for rebook
Function OM0QS51()


      /* *****************************************************/
      /* * if quantity is decreased, is it okay to rebook?*/
      /* *****************************************************/

      /* don't allow rebook of apparel*/
      /* send err msg if gpc is 03 and reason code is 01*/
      /* REINSTATE APPAREL FOR REBOOKS 4/95*/


   /* IF OM0QM001.XOMCD EQ '01'         /* reason code is 01*/
    /* AND OP3REC.XGPCD EQ '03';       /* is apparel*/
    /* MOVE 657 TO EZEMNO;             /**/
                                  /* invalid reason code - cant rebook*/
    /* MOVE 'Y' TO OMAREC.OMAERR;*/
    /* SET OM0QM001.XOMCD CURSOR,BRIGHT;*/
    /* EZERTN;                         /* go redisplay map*/
   /* END;*/

  if (XOTTBL.XOTFUTRF[OM0QWOTS] == "Y") /* futures*/
    if (OP1REC.XBDCD == "0") /* reg order*/
      /* next sentence, ok to rebook*/
    else
      if (XBDTBL.XBDSETFL[OM0QWBDS] == "Y")
        converseLib.validationFailed(398); /* must be reg or cust bulk/draw*/
        OMAREC.OMAERR = "Y";
        set OM0QM001.XOMCD cursor, bold;
        return; /* go redisplay map*/
      end
    end

    OM0QW01.OM0QWFLG = "N"; /* init found flag*/
    OM0QSR8(); /* validate agcy/customer*/
    if (OM0QW01.OM0QWFLG == "N") /* no errs yet*/
        /* 8/6/91 do nothing - no longer doing check 45 day window*/
    else
      OMAREC.OMAERR = "Y"; /* to converse err*/
    end
  else
    converseLib.validationFailed(396); /* can not rebook non-futures*/
    OMAREC.OMAERR = "Y";
    set OM0QM001.XOMCD cursor, bold;
  end


end // end OM0QS51

// read invoice spec table
Function OM0QS58()



      /* *************************************************/
      /* * get the price or cost type code from invoicing*/
      /* *    special table*/
      /* *************************************************/


  IVEREC.XOTCD = OP1REC.XOTCD;

  call "IO1450" ("SF", SQLCA, IVEREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OM0QW01.OM0QWZPR = "Y"; /* force zero prices*/
    else
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "OM0QS58 ";
      TA1REC.TA1LOCAT[3] = "IO1450  ";
      TA1REC.TA1DBASE = "DINVC   ";
      TA1REC.TA1TBLVU = "VSPECL01";
      OM0QW01.OM0QWT1 = " ";
      OM0QW01.OM0QWTK3 = IVEREC.XATCD;
      OM0QW01.OM0QWTK4 = IVEREC.XAUCD;
      OM0QW01.OM0QWTK5 = IVEREC.XOTCD;
      TA1REC.TA1TBLKE = OM0QW01.OM0QWT1;
      XSOPS02();
    end
  end



end // end OM0QS58

// db2 - read product cost
Function OM0QS59()




  TA1REC.TA1LOCAT[2] = "OM0QS59"; /* error diag group name*/

      /* *********************************************************/
      /* * set up data base key, color & dim from calling place*/
      /* *********************************************************/

  SY6REC.XGPCD = OP3REC.XGPCD; /* general prod.class*/
  SY6REC.SY1STNBR = OP3REC.SY1STNBR; /* style*/
  SY6REC.SY2CLRID = OP3REC.SY2CLRID; /* color*/
  SY6REC.XDMCD = OP3REC.XDMCD; /* dimension*/
  SY6REC.XCOCD = IVEREC.IVEPCTYP; /* price type code*/
                                  /* Added for Canada 7/14/95*/
  if (OP1REC.XDZ-DATA-DIST-CD == "CA")
    SY6REC.XCT-CTRY-CD = "CANA";
    SY6REC.ZFC-CRCY-CD = "CAD";
  else
    SY6REC.XCT-CTRY-CD = "USA";
    SY6REC.ZFC-CRCY-CD = "USD";
  end

  if (OP1REC.XDVCD == "02" /* if nil*/
   && OP3REC.XQACD == "02") /* if b-grade product*/
    SY6REC.XQACD = "01"; /* quality code*/
  else
    SY6REC.XQACD = OP3REC.XQACD; /* quality code*/
  end

      /* db2 read*/

  call "IO0360" ("S ", SQLCA, SY6REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for single select*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good return*/
   || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DPROD"; /* data base name*/
    TA1REC.TA1TBLVU = "VDCOST01"; /* table view*/
    TA1REC.TA1TBLKE = SY6REC.SY6KEY; /* key value*/
    TA1REC.TA1LOCAT[4] = "IO0360"; /* i/o mod*/
    XSOPS02(); /* common abend routine*/
  end



end // end OM0QS59

// check cost effective dte
Function OM0QS60()



      /* find current cost among 6 possible costs*/
      /* new/future date is first, oldest date is last*/
      /* price effective date is booking or ship date,*/
      /* set by order type table in initial w-s.*/

  TA1REC.TA1LOCAT[2] = "OM0QS60"; /* error diag group name*/


  OMASUB2 = 1; /* check dates ascending seq*/

  while (OMASUB2 < 7)
    if (SY6REC.SY6CSEDT[OMASUB2] <= OM0QW01.OM0QWPED) /* cost effective date*/
      return; /* then use omasub2 for cost*/
    end
    OMASUB2 = OMASUB2 + 1;
  end



  OMAREC.OMASUB2 = 0;
                                   /* if made it here, none of the cost*/
                                /* effective dates are valid*/
end // end OM0QS60

// check prod price effective dte
Function OM0QS61()


      /* find current price among 6 possible prices*/
      /* new/future date is first, oldest date is last*/
      /* price effective date is booking or ship date,*/
      /* set by order type table in initial w-s.*/
   /* domestic: if no price found for an effect.date, a newer, valid price*/
   /* is used -- covers early shipments/*/

  OMAREC.OMASUB2 = 1; /* check dates ascending seq*/
  OM0QW01.OM0QW-SUB3 = 0; /* init subscript hold*/

  while (OMASUB2 < 7)
   /* use sub. if no valid effect.date found for domestic.product*/
    if (SY5REC.SY5PCEDT[OMASUB2] > 0) /* hold subscript of oldest price*/
      OM0QW01.OM0QW-SUB3 = OMASUB2;
    end

    if (SY5REC.SY5PCEDT[OMASUB2] <= OM0QW01.OM0QWPED /* price effective date*/
     && SY5REC.SY5PCEDT[OMASUB2] != 0)              
      return; /* then use omasub2 for price*/
    end
    OMASUB2 = OMASUB2 + 1;
  end

  if (OP1REC.XDVCD == "02") /* international - do not substitute*/
    OMAREC.OMASUB2 = 0; /* if made it here, none of the price*/
  else
    if (OM0QW01.OM0QW-SUB3 > 0)
      OMAREC.OMASUB2 = OM0QW01.OM0QW-SUB3; /* use olest $*/
    else
      OMAREC.OMASUB2 = 0;
    end
  end
                                   /* effective dates were valid*/

end // end OM0QS61

// convert price to non-std u.o.m
Function OM0QS64()


      /* convert std price to 'each' using std conv.factor*/
      /* then convert 'each' to non-std price*/
        /* using non-std conv.factor*/

      /* prepack of 6 pairs of socks has conv.factor = 6*/
      /* 1 single sock has conv.factor = .5*/
      /* thus -*/
        /* std.price of $12.00 / 6 = $2. for 'each' pr of socks,*/
        /* non-std price = $2.00 * .5 = $1.00 for 1 single sock*/


      /* std conv.factor*/

  OM0QW01.SY5PRCUN[OMASUB] = OM0QW01.SY5PRCUN[OMASUB] / OM0QWUMS;


      /* non-std conv.factor*/

  OM0QW01.SY5PRCUN[OMASUB] = OM0QW01.SY5PRCUN[OMASUB] * OM0QWUMN;



end // end OM0QS64

// check to set price vary flag
Function OM0QS65()


      /* compare each price against first price,*/
      /* if different, set on price vary flag*/


  if (OM0QW01.OM0QWPRC == 0) /* hold first price in record*/
    OM0QW01.OM0QWPRC = OM0QW01.SY5PRCUN[OMASUB];
  else
    if (OM0QW01.SY5PRCUN[OMASUB] != OM0QW01.OM0QWPRC)
      OM0QW01.OP2PRCVF = "Y";
    end
  end


end // end OM0QS65

// Adjust Booking Month
Function OM0QS66-ADJ-BK-MO()
   /* The need date has changed. For domestic apparel products, booking*/
   /* month is set to the new need date month if the apparel season*/
   /* begin date of the booking season on the product is less than or*/
   /* equal to the old need date.*/


  if (OP1REC.XDVCD == "01" /* Domestic order*/
   && OP1REC.XGPCD == "03" /* Apparel*/
   && OP3REC.XBK-BK-SESN-CD != " ") /* Bk sesn established on item*/
    OM0QW01.OM0QW-SESN-FND-FL = "N";
    OM0QW01.OM0QW-SESN-SUB = 1;
    while (XSNTBL.XSECD[OM0QW-SESN-SUB] != "99" /* End of table*/
     && OM0QW01.OM0QW-SESN-FND-FL == "N")
      if (XSNTBL.XSECD[OM0QW-SESN-SUB] == OP3REC.XBK-BK-SESN-CD
       && XSNTBL.XSNYR[OM0QW-SESN-SUB] == OP3REC.OP-BK-YR)
        OM0QW01.OM0QW-SESN-FND-FL = "Y";
        if (XSNTBL.XSNBDT[OM0QW-SESN-SUB] <= OP1REC.OP1CUNDT)
          OM0QW01.OM0QW-OP1CUNDT-CCCYYMMDD = OM0QW01.OP1CUNDT;
          OM0QW01.OP-BK-MO = OM0QW01.OM0QW-OP1CUNDT-MM; /* Save*/
          OM0QM001.OM0QM-OP-BK-MM = OM0QW01.OM0QW-OP1CUNDT-MM;
        end
      else
        OM0QW01.OM0QW-SESN-SUB = OM0QW01.OM0QW-SESN-SUB + 1;
      end
    end
  end
end // end OM0QS66-ADJ-BK-MO

// nil prc typ cd based on comp
Function OM0QS6N()


    /* **  get the price type code from the invoicing specialty*/
    /* **  table based on the comp number*/


   /* read the company record of the comp nbr to get its acct cls*/

  KUCREC.KUCCOID = OP1REC.OP1CMPNB; /* get kucrec using comp nbr*/
  OM0QSRH(); /* read company rec (kucrec)*/
  IVEREC.XAUCD = KUCREC.XAUCD; /* put acct class in key*/

    /* get the account type of the comp nbr & using it and the*/
    /* acct class as part of the key, get the price type from the*/
    /* invoicing specialty table*/


  sysVar.arrayIndex = 1;
  if (KUCREC.XAUCD in XAUTBL.XAUCD from sysVar.arrayIndex)
    IVEREC.XATCD = XAUTBL.XATCD[sysVar.arrayIndex]; /* put acct type in key*/
    OM0QS58(); /* read inv specl tbl*/
  else /* if no account type*/
    OM0QW01.OM0QWZPR = "Y"; /* give the item a zero price*/
  end


    /* reestablish position on original company record (kucrec)*/
    /* rather than on company for comp nbr.*/

  KUCREC.KUCCOID = OP1REC.KUCCOID; /* format orig. company*/
  OM0QSRH(); /* get company record*/


end // end OM0QS6N

// nil price typ cd based on co.
Function OM0QS6O()


    /* **  get the price type code from the invoicing specialty*/
    /* **  table based on the company number*/


    /* put the account class of the company in the key*/

  IVEREC.XAUCD = KUCREC.XAUCD;


    /* get the account type of the company & using it and the*/
    /* acct class as part of the key, get the price type from the*/
    /* invoicing specialty table*/


  sysVar.arrayIndex = 1;
  if (KUCREC.XAUCD in XAUTBL.XAUCD from sysVar.arrayIndex)
    IVEREC.XATCD = XAUTBL.XATCD[sysVar.arrayIndex]; /* put acct type in key*/
    OM0QS58(); /* read inv specl tbl*/
  else /* if no account type*/
    OM0QW01.OM0QWZPR = "Y"; /* give the item a zero price*/
  end



end // end OM0QS6O

// negate qty fields for audits
Function OM0QS8C()


      /* ********************************************************/
      /* * negate op3rec qtys for audit reporting*/
      /* ********************************************************/

  OMAREC.OMASUB = 1; /* first active size*/
  while (OMAREC.OMASUB < 41) /* record le last active size*/
    if (OP3REC.OP3SZAFL[OMASUB] == "Y") /* size active*/
      OPUREC.OPUAUDQT[OMASUB] = OP3REC.OP3ONOQT[OMASUB] * -1;
    else
      OPUREC.OPUAUDQT[OMASUB] = 0;
    end
    OMAREC.OMASUB = OMAREC.OMASUB + 1;
  end


   /* *******************************************************/
end // end OM0QS8C

// load demand qtys from op3rec
Function OM0QS8D()


      /* ********************************************************/
      /* * load opurec qtys from op3rec for audit reporting*/
      /* ********************************************************/


               /* load demand qtys from op3rec*/
  OMAREC.OMASUB = 1; /* first active size*/
  while (OMAREC.OMASUB < 41) /* record le last active size*/
    if (OP3REC.OP3SZAFL[OMASUB] == "Y") /* size active*/
      OPUREC.OPUAUDQT[OMASUB] = OP3REC.OP3ONOQT[OMASUB];
    else
      OPUREC.OPUAUDQT[OMASUB] = 0;
    end
    OMAREC.OMASUB = OMAREC.OMASUB + 1;
  end




end // end OM0QS8D

// calc credit  field for new sub
Function OM0QSC1()

      /* ***********************************************/
      /* * set up credit check fields*/
      /* ***********************************************/


    /* 6/15/89 For new suborder:*/
            /* - If new suborder exists(split), format credit*/
              /* reason code for new suborder, determine new*/
              /* units and value variances for credit checking*/
              /* on new suborder.*/

      /* om0qwov1 initialized with original op2lnivl*/
      /* om0qwoq1 initialized with original op2tonoq*/
          /* --- both were initialized in product init routine*/


  CC1REC.CC1AUNTS = 0; /* zero out allocated units*/
  CC1REC.CC1AVALU = 0; /* zero out allocated value*/
  if (OM0QW01.OM0QWCQP == "Y" /* qty change has been made*/
   || OM0QW01.OM0QWAUT == "Y") /* price has been changed*/
    OM0QW01.OM0QWOVV = OP3REC.OP2LNIVL - OM0QW01.OM0QWOV1; /* val chg*/
    OM0QW01.OM0QWOQV = OP3REC.OP2TONOQ - OM0QW01.OM0QWOQ1; /* qty chg*/
  else
    OM0QW01.OM0QWOVV = 0; /* zero out value variance*/
    OM0QW01.OM0QWOQV = 0; /* zero out units variance*/
  end


end // end OM0QSC1

// calc credit for changed order
Function OM0QSC2()

      /* ***********************************************/
      /* * set up credit check fields for non-split order*/
      /* ***********************************************/

            /* For no new suborder:*/
            /* - Compute the units and value variances for*/
              /* the product which will be passed to credit*/
              /* credit with cc1rec.*/

      /* om0qwov1 initialized with original op2lnivl*/
      /* om0qwoq1 initialized with original op2tonoq*/
      /* om0qwav1 initialized to 0, allocated value*/
      /* om0qwav2 initialized to 0, holding calc field*/
      /* om0qwavv initialized to 0, allocated varianc*/
      /* om0qwov2 holding calc field, inited to 0*/
      /* om0qwoqv qty variance, inited to 0*/
          /* --- all were initialized in product init routine*/

  OM0QW01.OM0QWOQV = OP3REC.OP2TONOQ - OM0QW01.OM0QWOQ1; /* units variance*/
  OM0QW01.OM0QWOV2 = OP3REC.OP2TONOQ * OP3REC.OP2AUPRC;
  OM0QW01.OM0QWOVV = OM0QW01.OM0QWOV2 - OM0QW01.OM0QWOV1;
  if (OP3REC.OP2TALCQ > 0)
    if (OP3REC.OP2LNIST == "AL"
     || OP3REC.OP2LNIST == "PA")
      OM0QW01.OM0QWAV2 = OP3REC.OP2TALCQ * OP3REC.OP2AUPRC;
      OM0QW01.OM0QWAVV = OM0QW01.OM0QWAV2 - OM0QW01.OM0QWAV1; /* alloc variance*/
    end
  end

end // end OM0QSC2

// call cc1070
Function OM0QSC3()

      /* ***********************************************/
      /* * call cc1070 for non-split and new suborders*/
      /* ***********************************************/

            /* - format cc1rec and call credit - cc1070.*/

  if (OM0QW01.OM0QWOQV != 0 /* if units changed*/
   || OM0QW01.OM0QWOVV != 0 /* or value changed*/
   || OM0QW01.OM0QWAVV != 0 /* or alloc value changed*/
   || OMWREC.OMWSORDN != OP1REC.OP1NORID) /* sub order split*/
    CC1REC.CC1PVALU = OM0QW01.OM0QWOVV; /* on-order value var*/
    CC1REC.CC1PUNTS = OM0QW01.OM0QWOQV; /* on-order units var*/
    CC1REC.CC1AVALU = OM0QW01.OM0QWAVV; /* alloc value var*/
    CC1REC.CC1AUNTS = 0; /* alloc units var*/
    CC1REC.CC1PGMNM = "OM0Q";
    CC1REC.CC1RTNCD = 0; /* zero out retrun code*/
    CC1REC.CC1RTNMA = " "; /* clear return error message*/

    call "CC1070" (SQLCA, OP1REC, CC1REC) {isNoRefresh = yes, isExternal = yes};

    OM0QSYV(); /* clear cc1rec fields*/
  end

  if (CC1REC.CC1RTNCD == 0)
    OM0QSW7(); /* go update credit fields on hdr*/
  end

end // end OM0QSC3

// calc credit and call cc1070
Function OM0QSC4()

      /* ***********************************************/
      /* * set up credit check fields and call cc1070*/
      /* *    for original order on split*/
      /* ***********************************************/

            /* - if a split order situation occurs, format*/
              /* cc1rec for calling credit for the original*/
              /* order header. call credit with proper values*/
              /* and based on credit return code, update the*/
              /* original order header*/

         /* by multiplying the original qty (om0qwoq1)*/
      /* and the original value (om0qwov1) by -1, we show*/
      /* the amounts taken off the original order for credit.*/
      /* credit is only interested in the item's variance.*/

  CC1REC.CC1CLRSN = 1; /* credit check for orig o.h.*/
  CC1REC.CC1PVALU = OM0QW01.OM0QWOV1 * -1; /* negate split item value*/
  CC1REC.CC1PUNTS = OM0QW01.OM0QWOQ1 * -1; /* negate split item units*/
  CC1REC.CC1AVALU = 0; /* zero out allocated value*/
  CC1REC.CC1AUNTS = 0; /* zero out allocated units*/
  CC1REC.CC1PGMNM = "OM0Q"; /* format program name*/
  CC1REC.CC1RTNCD = 0; /* clear return code*/
  CC1REC.CC1RTNMA = " "; /* clear return message*/

  call "CC1070" (SQLCA, OP1REC, CC1REC) {isNoRefresh = yes, isExternal = yes};

  OM0QSYV(); /* clear cc1rec fields*/

  if (CC1REC.CC1RTNCD == 0)
    OM0QSW7(); /* go update credit fields on hdr*/
  end


end // end OM0QSC4

// calc credit and call cc1070
Function OM0QSC5()

      /* ***********************************************/
      /* * set up credit check fields and call cc1070*/
      /* *    for existing order on split*/
      /* ***********************************************/

            /* - if a split order situation occurs, format*/
              /* cc1rec for calling credit for an existing*/
              /* order header that was found to accomodate the*/
              /* item split off.  call credit with proper values*/
              /* and based on credit return code, update the*/
              /* original order header*/

         /* credit wants the entire updated qty and value of*/
      /* the item split off when attatched to an existing order*/

  CC1REC.CC1CLRSN = 0; /* credit check for orig o.h.*/
  CC1REC.CC1PVALU = OP3REC.OP2LNIVL; /* tot value*/
  CC1REC.CC1PUNTS = OP3REC.OP2TONOQ; /* tot units*/
  CC1REC.CC1AVALU = 0; /* zero out allocated value*/
  CC1REC.CC1AUNTS = 0; /* zero out allocated units*/
  CC1REC.CC1PGMNM = "OM0Q"; /* format program name*/
  CC1REC.CC1RTNCD = 0; /* clear return code*/
  CC1REC.CC1RTNMA = " "; /* clear return message*/

  call "CC1070" (SQLCA, OP1REC, CC1REC) {isNoRefresh = yes, isExternal = yes};

  OM0QSYV(); /* clear cc1rec fields*/

  if (CC1REC.CC1RTNCD == 0)
    OM0QSW7(); /* go update credit fields on hdr*/
  end


end // end OM0QSC5

// edit price ranges
Function OM0QSE4()


  OM0QW01.OM0QWPCT = XOTTBL.XOTPRCVP[OM0QWOTS] / 100; /* prc vary pct*/


      /* note - op0iwpct is order type percent variance allowed*/

  if (OM0QW01.OM0QWPRO <= OM0QW01.OM0QWPRN) /* compare old to new*/
    OM0QW01.OM0QWPRO = OM0QW01.OM0QWPRO + OM0QW01.OM0QWPCT * OM0QW01.OM0QWPRO;
    if (OM0QW01.OM0QWPRO < OM0QW01.OM0QWPRN) /* if old + % < new*/
      OM0QW01.OM0QWFLG = "Y";
      OMAREC.OMAERR = "Y";
    end
  else
    OM0QW01.OM0QWPRO = OM0QW01.OM0QWPRO - OM0QW01.OM0QWPCT * OM0QW01.OM0QWPRO;
    if (OM0QW01.OM0QWPRO > OM0QW01.OM0QWPRN) /* if old - % > new*/
      OM0QW01.OM0QWFLG = "Y";
      OMAREC.OMAERR = "Y";
    end
  end


end // end OM0QSE4

// iseg default
Function OM0QSEG()



       /* get iseg defaults*/


  set PC2REC empty; /* initialize pc2rec*/

  PC2REC.KUCCOID = OP1REC.KUCCOID;
  PC2REC.KUMSTRID = OP1REC.KUMSTRID;
  PC2REC.XGPCD = OP1REC.XGPCD;
  PC2REC.XNXCD = OP1REC.XNXCD;

  call "IO3340" ("SA", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes}; /* call spec cd*/

  if (SQLCA.VAGen_SQLCODE == 0)
    OP3REC.PC2INSEG = PC2REC.PC2INSEG;
    OM0QW01.OM0QWCHG = "Y";
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMNM = "OM0Q    ";
      TA1REC.TA1LOCAT[1] = "SA      ";
      TA1REC.TA1LOCAT[2] = "OM0QSEG ";
      TA1REC.TA1LOCAT[3] = "IO3340  ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "OM0QM001";
      TA1REC.TA1DBASE = "PC2REC  ";
      TA1REC.TA1TBLVU = "VPRDCU01";
      OM0QW01.OM0QWEK1 = OP1REC.OP1PARTN; /* part-char*/
      OM0QW01.OM0QWEK2 = OP1REC.OP1CUOID; /* cust-ord-id*/
      OM0QW01.OM0QWEK3 = OP1REC.OP1NORID; /* nike id*/
      OM0QW01.OM0QWEK4 = OP1REC.KUCCOID; /* company id*/
      OM0QW01.OM0QWEK5 = OP1REC.KUMSTRID; /* store id*/
      OM0QW01.OM0QWEK6 = OP1REC.XNXCD; /* dept code*/
      OM0QW01.OM0QWEK7 = OP1REC.XGPCD; /* gpc*/
      TA1REC.TA1TBLKE = OM0QW01.OM0QWEKY;
      try
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end /* abend routine*/
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear ws on error*/
    end
  end

end // end OM0QSEG

// move xwhcd abrv to map
Function OM0QSM1()


      /* *********************************************************/
      /* * map line 19 - warehouse*/
      /* ********************************************************/

  OM0QM001.XWHCD = OP1REC.XWHCD;

  if (OM0QM001.XWHCD == " ")
    OM0QM001.XWHSABRV = " ";
  else
    /* get warehouse short abbreviation from csp table*/
    OM0QM001.XWHSABRV = "UNKNWN"; /* init abbrev*/
    sysVar.arrayIndex = 0;
    if (OP1REC.XWHCD in XWHTBL.XWHCD)
      OM0QM001.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    end
  end


end // end OM0QSM1

// move xwhcd abrv to map
Function OM0QSM2()


      /* *********************************************************/
      /* * map line 19 - owner group*/
      /* ********************************************************/


  if (OP3REC.XOWCD == "00") /* evaluate owner group code*/
    if (OM0QM001.XWHCD == "03"
     || OM0QM001.XWHCD == "51"
     || OM0QM001.XWHCD == "25"
     || OM0QM001.XWHCD == "27")
      OM0QM001.XOWCD = "00";
      OM0QM001.XOWABRV = " ";
    else
      OM0QM001.XOWCD = " ";
      OM0QM001.XOWABRV = " ";
    end
  else
    OM0QM001.XOWCD = OP3REC.XOWCD; /* always show code*/
    XOWREC.XWHCD = OM0QM001.XWHCD;
    XOWREC.XOWCD = OM0QM001.XOWCD;
    OM0QSX7(); /* uses whse and owner group for xowtbl lookup*/
    if (OMAREC.OMAERR == "Y")
      OM0QM001.XOWABRV = "UNKNOW";
      OMAREC.OMAERR = "N"; /* reset err flag*/
    else
      OM0QM001.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
    end
  end


end // end OM0QSM2

// match xoltbl.xowcd with xowcd
Function OM0QSM3()


      /* *******************************************/
      /* * match xowcd with xoltbl.xowcd*/
      /* *******************************************/

  OM0QW01.OM0QWFLG = "N"; /* init found flag*/

   /* now see that the xowcd is on the xoltbl record.*/
   /* first check the all owners flag.*/

  if (XOLTBL.XOLALLOF[sysVar.arrayIndex] == "Y")
    OM0QW01.OM0QWFLG = "Y";
    return;
  end


  if (XOLTBL.XOWCD1[sysVar.arrayIndex] == OM0QM001.XOWCD)
    OM0QW01.OM0QWFLG = "Y";
    return;
  end

  if (XOLTBL.XOWCD2[sysVar.arrayIndex] == OM0QM001.XOWCD)
    OM0QW01.OM0QWFLG = "Y";
    return;
  end

  if (XOLTBL.XOWCD3[sysVar.arrayIndex] == OM0QM001.XOWCD)
    OM0QW01.OM0QWFLG = "Y";
    return;
  end

  if (XOLTBL.XOWCD4[sysVar.arrayIndex] == OM0QM001.XOWCD)
    OM0QW01.OM0QWFLG = "Y";
    return;
  end

  if (XOLTBL.XOWCD5[sysVar.arrayIndex] == OM0QM001.XOWCD)
    OM0QW01.OM0QWFLG = "Y";
    return;
  end

  if (XOLTBL.XOWCD6[sysVar.arrayIndex] == OM0QM001.XOWCD)
    OM0QW01.OM0QWFLG = "Y";
    return;
  end

  if (XOLTBL.XOWCD7[sysVar.arrayIndex] == OM0QM001.XOWCD)
    OM0QW01.OM0QWFLG = "Y";
    return;
  end

  if (XOLTBL.XOWCD8[sysVar.arrayIndex] == OM0QM001.XOWCD)
    OM0QW01.OM0QWFLG = "Y";
    return;
  end

  if (XOLTBL.XOWCD9[sysVar.arrayIndex] == OM0QM001.XOWCD)
    OM0QW01.OM0QWFLG = "Y";
    return;
  end

  if (XOLTBL.XOWCD10[sysVar.arrayIndex] == OM0QM001.XOWCD)
    OM0QW01.OM0QWFLG = "Y";
    return;
  end

  if (XOLTBL.XOWCD11[sysVar.arrayIndex] == OM0QM001.XOWCD)
    OM0QW01.OM0QWFLG = "Y";
    return;
  end

  if (XOLTBL.XOWCD12[sysVar.arrayIndex] == OM0QM001.XOWCD)
    OM0QW01.OM0QWFLG = "Y";
    return;
  end

  if (XOLTBL.XOWCD13[sysVar.arrayIndex] == OM0QM001.XOWCD)
    OM0QW01.OM0QWFLG = "Y";
    return;
  end

  if (XOLTBL.XOWCD14[sysVar.arrayIndex] == OM0QM001.XOWCD)
    OM0QW01.OM0QWFLG = "Y";
    return;
  end

  if (XOLTBL.XOWCD15[sysVar.arrayIndex] == OM0QM001.XOWCD)
    OM0QW01.OM0QWFLG = "Y";
    return;
  end

  if (XOLTBL.XOWCD16[sysVar.arrayIndex] == OM0QM001.XOWCD)
    OM0QW01.OM0QWFLG = "Y";
    return;
  end

  if (XOLTBL.XOWCD17[sysVar.arrayIndex] == OM0QM001.XOWCD)
    OM0QW01.OM0QWFLG = "Y";
    return;
  end

  if (XOLTBL.XOWCD18[sysVar.arrayIndex] == OM0QM001.XOWCD)
    OM0QW01.OM0QWFLG = "Y";
    return;
  end

  if (XOLTBL.XOWCD19[sysVar.arrayIndex] == OM0QM001.XOWCD)
    OM0QW01.OM0QWFLG = "Y";
    return;
  end

  if (XOLTBL.XOWCD20[sysVar.arrayIndex] == OM0QM001.XOWCD)
    OM0QW01.OM0QWFLG = "Y";
    return;
  end


end // end OM0QSM3

// move xdscd abrv to map
Function OM0QSM4()


      /* *********************************************************/
      /* * map line 19 -  direct ship*/
      /* ********************************************************/

  OM0QM001.XDSCD = OP1REC.XDSCD;

  if (OP1REC.XDSCD == " ") /* direct ship*/
    OM0QM001.XDSABRV = " ";
    OM0QW01.XDSWHSEF = "Y";
  else
    OM0QSXA(); /* direct ship table lookup*/
  end


end // end OM0QSM4

// db2-init 200 product array
Function OM0QSR1()


      /* *********************************************************/
      /* * om0q is the first application to need to use the*/
      /* * 900 product array.  if only one product was selected*/
      /* * on the menu or the product summary screen, then*/
      /* * the array would contain that line item number.*/
      /* * since the array is empty, fill it with all the*/
      /* * products on the sub-order; with select code = s.*/
      /* * we assume the user wants to look at all the products.*/
      /* *********************************************************/


  set SQLCA empty;

      /* select the set of line items for the order number*/

  OP2REC.OP2KEY = OP1REC.OP1KEY;

  call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};


      /* *********************************************************/
      /* * if the return code from the select set was good then*/
      /* * go through and move the line items selected*/
      /* * to the working storage array.  when no more*/
      /* * records are in the set (sqlcode = 100) get out of the*/
      /* * while loop.*/
      /* ********************************************************/

  OMASUB = 1;
  OMWREC.OMWLINES = 0; /* table size*/

  if (SQLCA.VAGen_SQLCODE == +0)
    while (OMASUB < 900) /* leave # 900 = 0 for end table*/
      call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        OMWREC.OP2LNINB[OMASUB] = OP2REC.OP2LNINB;
        OMWREC.OMWSELCD[OMASUB] = "S";
        OMASUB = OMASUB + 1;
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* end of records*/
          OMWREC.OMWLINES = OMASUB - 1; /* hold table size*/
          OMASUB = 999;
          call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* close db2*/
        else
          TA1REC.TA1LOCAT[1] = "SN";
          OM0QSY1(); /* item abend diag info*/
          OM0QSZ2(); /* common return to mast menu*/
        end
      end
    end
  else
    TA1REC.TA1LOCAT[1] = "SS";
    OM0QSY1(); /* item abend diag info*/
    OM0QSZ2(); /* common return to mast menu*/
  end


  OMWREC.OMWLNITX = 1; /* init array pointer*/



end // end OM0QSR1

// read op3rec
Function OM0QSR2()


      /* ********************************************************/
      /* * set up key to read data base*/
      /* ********************************************************/


  OP3REC.OP1PARTN = OP1REC.OP1PARTN; /* partition*/
  OP3REC.OP1CUOID = OP1REC.OP1CUOID; /* customer order*/
  OP3REC.OP1NORID = OP1REC.OP1NORID; /* nike ord id*/
  OP3REC.OP2LNINB = OMWREC.OP2LNINB[OMWLNITX]; /* line item number*/


      /* **************************************/
      /* * set up parm record for formatter*/
      /* **************************************/

  set OP8REC empty;

  OP8REC.OP8TASK = "S "; /* single select*/

  OP8REC.OP8LOCAT[1] = "OMOQ220"; /* process name*/
  OP8REC.OP8LOCAT[2] = "OM0QSR2"; /* group name*/
  OP8REC.OP8LOCAT[3] = " "; /* filler*/
  OP8REC.OP8MAP = "OMOQM001"; /* map name*/


      /* ***************/
      /* * read db2*/
      /* ***************/

  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod - single selct*/


      /* check db2 return code*/

  if (OPBREC.OPBSZRC == 0) /* check for good return*/
    /* next sentence*/
  else
    if (OPBREC.OPBSZRC == 1) /* item not found*/
      converseLib.validationFailed(173); /* prod not on data base, hit enter*/
      OM0QSZ1(); /* reject chgs, protect map*/
    else
      OM0QSZ3(); /* common abend for op3rec*/
    end
  end


end // end OM0QSR2

// read sycrec
Function OM0QSR3()


      /* ********************************************************/
      /* * read db2 for the product's style,color & size recs  **/
      /* * this is a combined view of 3 records.               **/
      /* ********************************************************/

  set SQLCA empty;

      /* set up read key*/

  SYCREC.XGPCD = OP3REC.XGPCD; /* general product class*/
  SYCREC.SY1STNBR = OP3REC.SY1STNBR; /* style*/
  SYCREC.SY2CLRID = OP3REC.SY2CLRID; /* color*/
  SYCREC.XDMCD = OP3REC.XDMCD; /* dimension*/


      /* read db2*/

  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for single select*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good return*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* reject product*/
      set SYCREC empty;
      converseLib.validationFailed(131); /* not valid style, color*/
      OM0QSZ1(); /* cant work on item, get out*/
    else
      TA1REC.TA1LOCAT[1] = "S "; /* access type*/
      OM0QSY3(); /* load ta1rec for diags*/
      OM0QSZ2(); /* common abend routine*/
    end
  end

   /* Added for Canada 7/17/95*/

  if (OP1REC.XDZ-DATA-DIST-CD == "CA")
    set WSY2000 empty;
    WSY2000.XDR-PROD-REG-CD = "05";
    OM0QS-SEL-SY2000();
    if (OM0QW01.OM0QW-WSY2000-FND-FLAG == "Y") /* Canadian product found*/
      /* next sentence*/
    else
      if (WSY2000.WSY2000-RETURN-CODE == "98") /* Data base busy*/
        converseLib.validationFailed(010);
        return;
      else
        if (WSY2000.WSY2000-RETURN-CODE == "02") /* product not found*/
          set SYCREC empty; /* reject product*/
          converseLib.validationFailed(911); /* not valid style, color*/
          OM0QSZ1(); /* cant work on item, get out*/
        else
          set SYCREC empty; /**/
          converseLib.validationFailed(909); /* bad data base return code*/
          OM0QSZ1(); /**/
        end
      end
    end

    /* Added for US apparel 06/20/96*/

  else

    if (OP1REC.XGPCD == "03")
      if (COMMAREA.XDVCD == "02" /* userid assigned to europe*/
       || COMMAREA.XDVCD == "03") /* userid assigned to asia*/
        /* continue processing*/
      else
        set WSY2000 empty;
        WSY2000.XDR-PROD-REG-CD = "01";
        OM0QS-SEL-SY2000();
        if (OM0QW01.OM0QW-WSY2000-FND-FLAG == "Y") /* product found*/
          /* next sentence*/
        else
          if (WSY2000.WSY2000-RETURN-CODE == "98") /* Data base busy*/
            converseLib.validationFailed(010);
            return;
          else
            if (WSY2000.WSY2000-RETURN-CODE == "02") /* product not found*/
              set SYCREC empty; /* reject product*/
              converseLib.validationFailed(911); /* not valid style, color*/
              OM0QSZ1(); /* cant work on item, get out*/
            else
              set SYCREC empty; /**/
              converseLib.validationFailed(909); /* bad data base return code*/
              OM0QSZ1(); /**/
            end
          end
        end
      end
    end
  end

end // end OM0QSR3

// read sy4rec
Function OM0QSR4()


      /* ********************************************************/
      /* * read db2 for the product's size scale code          **/
      /* * this give us a record with 40 size descriptions     **/
      /* ********************************************************/

  set SQLCA empty;

      /* set up read key*/

  SY4REC.SY4SZSCL = SYCREC.SY4SZSCL; /* scale code*/

      /* read db2*/

  call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for single select*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good return*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* or not found*/
      OMASUB = 1;
      while (OMASUB < 41) /* move constant to all size descrips*/
        SY4REC.SY4IDDSC[OMASUB] = "UNKWN";
        OMASUB = OMASUB + 1;
      end
    else
      TA1REC.TA1LOCAT[1] = "S "; /* type of access*/
      OM0QSY4(); /* load sy4rec info for diags*/
      OM0QSZ2(); /* common abend for reads*/
    end
  end



end // end OM0QSR4

// read in items to prevent split
Function OM0QSR5()


      /* *********************************************************/
      /* * if om0q was entered from options 3, 4, or 5 with*/
      /* * change flag = 'n', omwlines cannot be used to tell*/
      /* * if there are more than one product on the order.*/
      /* * Therefore, the items need to be read in and at*/
      /* * least 2 must be on the order to allow changes to*/
      /* * whse, need date, or direct ship (these fields cause*/
      /* * split sub-order) else protect the fields.*/
      /* *********************************************************/


  set SQLCA empty;

      /* select the set of line items for the order number*/

  OP2REC.OP2KEY = OP3REC.OP2KEY;
  OP2REC.OP2LNINB = 0;

  call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* get all prds on sb-ordr*/

  if (SQLCA.VAGen_SQLCODE == 0) /* no products on sub-order error*/
    OMASUB2 = 1;
    while (OMASUB2 < 3 /* browse first 2 products*/
     && SQLCA.VAGen_SQLCODE == 0)
      call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
      OMASUB2 = OMASUB2 + 1;
    end

    if (SQLCA.VAGen_SQLCODE == 0) /* if found 2 records,*/
      /* next sentence        ; multi products on sub-order ;*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* ran out of items*/
        OM0QW1PO = "Y"; /* have just 1 product*/
      else
        TA1REC.TA1LOCAT[1] = "SN";
        OM0QSY1(); /* item abend diag info*/
        OM0QSZ2(); /* common return to mast menu*/
      end
    end
  else
    TA1REC.TA1LOCAT[1] = "SS";
    OM0QSY1(); /* item abend diag info*/
    OM0QSZ2(); /* common return to mast menu*/
  end

  call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* close set*/

end // end OM0QSR5

// read sales pgm prices
Function OM0QSR6()


      /* ************************************************/
      /* * get sales program product pricing record*/
      /* ************************************************/


  set SQLCA empty; /* init return code record*/

  SP5REC.SP1ID = OP1REC.SP1ID; /* set-up key for prod price*/
  SP5REC.XGPCD = OP1REC.XGPCD;
  SP5REC.SY1STNBR = OP3REC.SY1STNBR;
  SP5REC.SY2CLRID = OP3REC.SY2CLRID;
  SP5REC.XDMCD = OP3REC.XDMCD;


  call "IO0110" ("S ", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* found prod prices*/
    OM0QW01.OM0QWSPP = "Y";
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
                                     /* do a generic color search*/
      SP5REC.SY2CLRID = "***";
      SP5REC.XDMCD = "**";
      call "IO0110" ("S ", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for inquiry*/
      if (SQLCA.VAGen_SQLCODE == 0) /* found prod prices*/
        SP5REC.SY2CLRID = OP3REC.SY2CLRID;
        SP5REC.XDMCD = OP3REC.XDMCD;
        OM0QW01.OM0QWSPP = "Y";
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
          SP5REC.SY2CLRID = OP3REC.SY2CLRID;
          SP5REC.XDMCD = OP3REC.XDMCD;
          OM0QW01.OM0QWSPP = "N"; /* didn't find*/
        else
          TA1REC.TA1LOCAT[1] = "S "; /* database access*/
          OM0QSY6(); /* sp5rec abend data*/
          OM0QSZ2(); /* common abend*/
        end
      end
    else
      TA1REC.TA1LOCAT[1] = "S "; /* database access*/
      OM0QSY6(); /* sp5rec abend data*/
      OM0QSZ2(); /* common abend*/
    end
  end


end // end OM0QSR6

// db2-product prices
Function OM0QSR7()

      /* common read of product price data base*/


  set SQLCA empty; /* init return record*/

  SY5REC.XGPCD = OP3REC.XGPCD; /* general product class*/
  SY5REC.SY1STNBR = OP3REC.SY1STNBR; /* style*/

  if (OP1REC.XDVCD == "02") /* if an int'l order*/
    if (KUCREC.XAUCD == "33") /* and cust is nil distributor*/
      SY5REC.XPYCD = VNLXPY01.XPYCD; /* use prc typ cd from nimrec*/
    else /* otherwise accnt class 31, 32 or accnt*/
                                   /* type 06*/
      SY5REC.XPYCD = IVEREC.IVEPCTYP; /* use prc typ cd from iverec*/
    end
  else /* else for domestics orders, use price*/
                                   /* type cd*/
    SY5REC.XPYCD = XOTTBL.XPYCD[OM0QWOTS]; /* from order type table*/
  end

  if (OP1REC.XDVCD == "02" /* if nil*/
   && OP3REC.XQACD == "02") /* if b-grade product*/
    SY5REC.XQACD = "01"; /* quality code*/
  else
    SY5REC.XQACD = OP3REC.XQACD; /* quality code*/
  end

  if (OP1REC.XDZ-DATA-DIST-CD == "CA") /* added for Canada 7/14/95*/
    SY5REC.XCT-CTRY-CD = "CANA";
    SY5REC.ZFC-CRCY-CD = "CAD";
  else
    SY5REC.XCT-CTRY-CD = "USA";
    SY5REC.ZFC-CRCY-CD = "USD";
  end

  call "IO0380" ("S ", SQLCA, SY5REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for single select*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good return*/
   || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
    /* next sentence ; good read or not found ok*/
  else
    TA1REC.TA1LOCAT[1] = "S "; /* i/o mod*/
    OM0QSY7(); /* common abend for sy5rec*/
    OM0QSZ2(); /* common abend*/
  end


end // end OM0QSR7

// validate agncy/cust for rbk
Function OM0QSR8()


          /* agency customer edit*/


  set SM1REC empty;
  set SQLCA empty;

  SM1REC.SM1AGYID = OP1REC.SM1AGYID; /* setup key*/

  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SM1REC.KUCCOID > 0) /* cust is valid*/
       /* next sentence*/
    else /* cust is not valid*/
      converseLib.validationFailed(391); /* agcy/cust not valid for rebooking*/
      OM0QW01.OM0QWFLG = "Y";
      set OM0QM001.XOMCD cursor, bold;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      converseLib.validationFailed(205); /* agency is not valid*/
      OM0QW01.OM0QWFLG = "Y";
      set OM0QM001.XOMCD cursor, bold;
    else
      TA1REC.TA1LOCAT[1] = "S       ";
      OM0QSY8(); /* sm1rec diags for tairec*/
      OM0QSZ2(); /* abort*/
    end
  end

end // end OM0QSR8

// get availability for style
Function OM0QSRA()


    /* ******************************************************/
    /* *  set up the availability key, call op01*/
    /* ******************************************************/

  set OBIREC empty;
  set SQLCA empty;

    /* next get current life cycle for the product.*/

  OM0QSRB(); /* get life cycle*/

   /* build key to pass to ob1210 subprogram*/

  /*  */
  /* if need date is in the past we want to show availability as of today*/
  /*  */
  if (OM0QW01.OP1CUNDT < OMAREC.OMACDT)
    OBIREC.OP1CUNDT = OMAREC.OMACDT; /* use today's date*/
  else
    OBIREC.OP1CUNDT = OM0QW01.OP1CUNDT; /* use real need date*/
  end

  /* disable crested prod need date calc as per Linda R. March '94*/

  /* IF SYCREC.XPRCD EQ '22';         /* if custom logo product*/
  /* OM0QS-CALC-NEED-DT;            /* calc need date (-30 days)*/
  /* END;*/

  if (OM0QW01.OM0QWCWH == "Y") /* whse changed*/
    OBIREC.XWHCD = OM0QM001.XWHCD;
  else
    OBIREC.XWHCD = OP1REC.XWHCD;
  end

  OBIREC.XDSCD = OP1REC.XDSCD; /**/

  if (SYCREC.XPRCD == "22") /* if a crested product*/
    OBIREC.SY1STNBR = SYCREC.SY1BSTNB; /* use the blank style*/
    OBIREC.SY2CLRID = SYCREC.SY2BCLCD; /* and the blank color*/
    if (OP1REC.XDSCD == "1" /* if product is a direct ship*/
     || OM0QM001.XDSCD == "1") /* or changed to direct ship*/
      OBIREC.XWHCD = "51"; /* default warehouse to '51'*/
      OBIREC.XDSCD = " "; /* default direct ship to ' '*/
    end
  else
    OBIREC.SY1STNBR = OP3REC.SY1STNBR; /* use the finished style*/
    OBIREC.SY2CLRID = OP3REC.SY2CLRID; /* and the finished color*/
  end

    /* apparel direct ship use warehouse 51*/

  if (XOTTBL.XOTDSAVL[OM0QWOTS] == "Y" /* display available flag*/
   && OP1REC.XDSCD == "1"              /* direct ship flag*/
   && OP1REC.XGPCD == "03")            /* apparel*/
    OBIREC.XWHCD = "51"; /* default warehouse to '51'*/
    OBIREC.XDSCD = " "; /* default direct ship to ' '*/
  end

  OBIREC.XOTCD = OP1REC.XOTCD;
  OBIREC.XBCCD = OP1REC.XBCCD;
  OBIREC.XOCCD = OP1REC.XOCCD;
  OBIREC.XDMCD = OP3REC.XDMCD;
  OBIREC.XUMCD = OP3REC.XUMCD;
  OBIREC.XGPCD = OP3REC.XGPCD;
  OBIREC.XPGCD = OP3REC.XPGCD;
  OBIREC.XQACD = OP3REC.XQACD;
  OBIREC.XOWCD = OM0QW01.XOWCD;
  OBIREC.PC2INSEG = OP3REC.PC2INSEG;
  OBIREC.XEGCD = OP3REC.XEGCD;

   /* call subprogram to get availability for all*/
   /* sizes.*/

  call "OB1210" (OBIREC, SQLCA) {isNoRefresh = yes, isExternal = yes};

end // end OM0QSRA

// get current style life cycle
Function OM0QSRB()

    /* this routine gets the most current life cycle for*/
    /* the style being entered.*/


  if (XX0XW01.XX0XWDAT >= SYCREC.SY2CEDT1)
    OBIREC.XLCCD = SYCREC.XLCCD1;
  else
    if (XX0XW01.XX0XWDAT >= SYCREC.SY2CEDT2)
      OBIREC.XLCCD = SYCREC.XLCCD2;
    else
      if (XX0XW01.XX0XWDAT >= SYCREC.SY2CEDT3)
        OBIREC.XLCCD = SYCREC.XLCCD3;
      else
        if (XX0XW01.XX0XWDAT >= SYCREC.SY2CEDT4)
          OBIREC.XLCCD = SYCREC.XLCCD4;
        else
          OBIREC.XLCCD = " ";
        end
      end
    end
  end




end // end OM0QSRB

// read bulk item
Function OM0QSRC()


    /* this routine reads the bulk order item record*/
    /* being drawn from.*/

  set SQLCA empty;

  OM0QW01.OM0QWFBK = "N"; /* bulk order found flag = 'n'*/

  OMAREC.OMAORDN = OP1REC.OP1BLKID;
  OM0QW02.OP1PARTN = OMAREC.OP1PARTN;
  OM0QW02.OP1CUOID = OP1REC.OP1BLKID;
  OM0QW02.OP1NORID = OP3REC.OPRBNOID;

  call "IO0440" ("SS", SQLCA, OM0QW02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    while (SQLCA.VAGen_SQLCODE != 100 /* while not end of set*/
     && OM0QW01.OM0QWFBK == "N") /* and while style not found*/
      call "IO0440" ("SN", SQLCA, OM0QW02) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        if (OP1REC.XBDCD == "8" /* draw from blank bulk*/
         || OP1REC.XBDCD == "F") /* bulk from blank bulk*/
          if (OM0QW02.SY1STNBR == SYCREC.SY1BSTNB
           && OM0QW02.SY2CLRID == SYCREC.SY2BCLCD
           && OM0QW02.XDMCD == OP3REC.XDMCD /* dimension*/
           && OM0QW02.XQACD == OP3REC.XQACD) /* quality*/
            OM0QW01.OM0QWFBK = "Y";
          end
        else
          if (OM0QW02.SY1STNBR == OP3REC.SY1STNBR
           && OM0QW02.SY2CLRID == OP3REC.SY2CLRID
           && OM0QW02.XDMCD == OP3REC.XDMCD /* dimension*/
           && OM0QW02.XQACD == OP3REC.XQACD) /* quality*/
            OM0QW01.OM0QWFBK = "Y";
          end
        end
      else
        if (SQLCA.VAGen_SQLCODE != 100)
          TA1REC.TA1LOCAT[1] = "SN      ";
          OM0QSYD(); /* item diag data*/
          OM0QSZ2(); /* abort*/
        end
      end
    end
  else /* no style records for the bulk order*/
    TA1REC.TA1LOCAT[1] = "SS      ";
    OM0QSYD(); /* item diag data*/
    OM0QSZ2(); /* abort*/
  end


  call "IO0440" ("CS", SQLCA, OM0QW02) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/

end // end OM0QSRC

// read bulk sizerun
Function OM0QSRD()


   /* now get the size record for the bulk*/

  set OP8REC empty;

  OM0QW03.OP2KEY = OM0QW02.OP2KEY;
  OP8REC.OP8TASK = "S ";

  call "DB1000" (OP8REC, OM0QW03, OPBREC) {isNoRefresh = yes, isExternal = yes};

  if (OPBREC.OPBSZRC == 0)
    /* next sentence*/
  else
    OM0QSZ3(); /* common abend for reads*/
  end

    /* initialize non-existant sizes on the bulk to prevent S0C7's*/
  OMAREC.OMASUB = 1;
  while (OMAREC.OMASUB <= 40)
    if (OM0QW03.OP3SZAFL[OMASUB] != "Y")
      OM0QW03.SY5PRCUN[OMASUB] = 0;
      OM0QW03.OP3ORGQT[OMASUB] = 0;
      OM0QW03.OP3ONOQT[OMASUB] = 0;
      OM0QW03.OP3ALQT[OMASUB] = 0;
      OM0QW03.OP3OHRQT[OMASUB] = 0;
      OM0QW03.OP3WPRQT[OMASUB] = 0;
      OM0QW03.OP3SHPQT[OMASUB] = 0;
      OM0QW03.OP3CNLQT[OMASUB] = 0;
    end
    OMAREC.OMASUB = OMAREC.OMASUB + 1;
  end
end // end OM0QSRD

// read bulk hdr
Function OM0QSRE()


    /* now read the bulk order header record.*/

  OM0QW04.OP1KEY = OM0QW02.OP2KEY;

  call "IO0430" ("S ", SQLCA, OM0QW04) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence  ; bulk order found*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OM0QW01.OM0QWFBK = "N"; /* bulk order not found*/
      converseLib.validationFailed(276); /* no qtys available on bulk*/
    else
      TA1REC.TA1LOCAT[1] = "S ";
      OM0QSYQ(); /* hdr abend info*/
      OM0QSZ2(); /* common abend for reads*/
    end
  end




end // end OM0QSRE

// read production deadline
Function OM0QSRF()


      /* add-on = yes means treat qty chnge as maintenance*/
      /* add-on = no  means treat qty chnge as original order*/


  set OPJREC empty;
  set OPLREC empty;
  set SQLCA empty;

  OM0QW01.OM0QWPAO = "Y"; /* pre-set deadline flag*/
  OM0QW01.OM0QWP20 = "Y"; /* pre-set 20 days past deadline flag*/
  OM0QW01.OM0QWP30 = "Y"; /* pre-set 30 days past deadline flag*/
  OM0QW01.OM0QW-DAYS-PAST-CUTOFF = 0; /* init # of days*/

  OPJREC.XOTCD = OP1REC.XOTCD; /* order type code*/
  OPJREC.XPCCD = SYCREC.XPCCD; /* product cat code*/
  OPJREC.XGACD = SYCREC.XGACD; /* gender age code*/
  OPJREC.SY1STNBR = SYCREC.SY1STNBR; /* product style*/
  OPJREC.SY2CLRID = SYCREC.SY2CLRID; /* product color*/
  OPLREC.OPLSOP = "SF"; /* selection option*/
  OPLREC.OPJCNDTB = OM0QW01.OP1CUNDT; /* need date*/

  call "IO2560" (OPLREC, SQLCA, OPJREC) {isNoRefresh = yes, isExternal = yes};

   /* ----------------------- Y2K IN BEGIN ----------------------------*/
  set TA2REC empty;
   /* ----------------------- Y2K IN END ------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* record found*/
    if (XX0XW01.XX0XWDAT <= OPJREC.OPJCUTDT) /* current date < prod d/l*/
      OM0QW01.OM0QWPAO = "N"; /* not past deadline*/
      OM0QW01.OM0QWP20 = "N"; /* not past deadline*/
      OM0QW01.OM0QWP30 = "N"; /* not past deadline*/
    else
      TA2REC.TA2DBDFN = OPJREC.OPJCUTDT; /* move d/l date*/
      TA2REC.TA2DBDTN = XX0XW01.XX0XWDAT; /* today's date*/
      TA2REC.TA2DTOPT = "DAYSDIFF";
      TA2REC.TA2GRTYP = "G";

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

      if (TA2REC.TA2RTNCD == 0)
        OM0QW01.OM0QW-DAYS-PAST-CUTOFF = TA2REC.TA2DBDDN;
        if (TA2REC.TA2DBDDN < 30)
          OM0QW01.OM0QWP30 = "N"; /* not 30 days past dedline*/
          if (TA2REC.TA2DBDDN < 20)
            OM0QW01.OM0QWP20 = "N"; /* not 20 days past dedline*/
          end
        end
      else
        OM0QSYT(); /* LOAD TA1REC from ta2rec*/
        converseLib.validationFailed(404); /* record not found-can't add*/
        OM0QW01.OM0QWPAO = "N"; /* turn off flags*/
        OM0QW01.OM0QWP20 = "N";
        OM0QW01.OM0QWP30 = "N";
        OM0QSZ1(); /* rejects changes*/
      end
    end
  else
    TA1REC.TA1LOCAT[1] = "SF";
    OM0QSYF(); /* LOAD TA1REC, post err*/
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      OMAREC.OMAERR = "Y"; /* flag as err*/
      set ERRSQLCA empty; /* clear area*/
      move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
      TA1REC.TA1FUNC = "POST"; /* post err*/
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes}; /* abend module*/
      converseLib.validationFailed(404); /* record not found-can't add*/
    else
      OM0QSZ2(); /* common abend*/
    end
  end



end // end OM0QSRF

// read customer record
Function OM0QSRH()


      /* this routine reads the company record to obtain the*/
      /* account class (xaucd).  account class is used to*/
      /* to determine whether a price override is valid*/

  set SQLCA empty;

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "S       ";
    OM0QSYH(); /* move kucrec data to diags*/
    OM0QSZ2(); /* common abort*/
  end


end // end OM0QSRH

// read summary base order type
Function OM0QSRI()


      /* this routine reads the summary base order type table*/
      /* to convert the base order type to summary base order*/
      /* type.  this is part of the key to the international*/
      /* price type code table (nimrec).*/


  YSMREC.YSMTBLPF = "XOB"; /* table name of xob*/
  YSMREC.YSMSYSPF = "NL"; /* international system*/
  YSMREC.YSMSUMID = 2;
  YSMREC.YSMSUMCD = "**"; /* wild card for sum xob*/
  YSMREC.YSMSRCVL = OP1REC.XOBCD; /* order's base order type*/

  call "IO2640" ("S1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* declare & open cursor*/

  if (SQLCA.VAGen_SQLCODE == 0) /* all ok*/
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "S1      ";
    TA1REC.TA1LOCAT[2] = "OM0QSRI ";
    TA1REC.TA1LOCAT[3] = "IO2640  ";
    TA1REC.TA1DBASE = "DCORP   ";
    TA1REC.TA1TBLVU = "VSUMCD01";
    TA1REC.TA1TBLKE = YSMREC.YSMGRP;
    XSOPS02(); /* abend*/
  end


  call "IO2640" ("N1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* fetch record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if found, ok*/
     /* next sentence*/
  else /* else*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if none found*/
      OM0QW01.OM0QWZPR = "Y"; /* force zero price*/
    else /* else*/
      TA1REC.TA1LOCAT[1] = "N1      "; /* if other problems*/
      TA1REC.TA1LOCAT[2] = "OM0QSRI "; /* abend*/
      TA1REC.TA1LOCAT[3] = "IO2640  ";
      TA1REC.TA1DBASE = "DCORP   ";
      TA1REC.TA1TBLVU = "VSUMCD01";
      TA1REC.TA1TBLKE = YSMREC.YSMGRP;
      XSOPS02();
    end
  end


  while (SQLCA.VAGen_SQLCODE == 0 /* while record found*/
   && YSMREC.XXXSTAT != "A") /* but status not active*/
    call "IO2640" ("N1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* fetch next record*/

    if (SQLCA.VAGen_SQLCODE == 0 /* all ok*/
     || SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1LOCAT[1] = "N1      "; /* if other problems*/
      TA1REC.TA1LOCAT[2] = "OM0QSRI "; /* abend*/
      TA1REC.TA1LOCAT[3] = "IO2640  ";
      TA1REC.TA1DBASE = "DCORP   ";
      TA1REC.TA1TBLVU = "VSUMCD01";
      TA1REC.TA1TBLKE = YSMREC.YSMGRP;
      XSOPS02();
    end
  end


  if (YSMREC.XXXSTAT == "A") /* if active sum base ot found*/
      /* next sentence                ;    all ok*/
  else /* otherwise*/
    OM0QW01.OM0QWZPR = "Y"; /* force zero price*/
  end


  call "IO2640" ("C1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "C1      "; /* if problems*/
    TA1REC.TA1LOCAT[2] = "OM0QSRI "; /* abend*/
    TA1REC.TA1LOCAT[3] = "IO2640  ";
    TA1REC.TA1DBASE = "DCORP   ";
    TA1REC.TA1TBLVU = "VSUMCD01";
    TA1REC.TA1TBLKE = YSMREC.YSMGRP;
    XSOPS02();
  end
end // end OM0QSRI

// read in hdrs until match
Function OM0QSRJ()


      /* ******************************************************/
      /* * as go through the sub-orders get the most current*/
      /* * version of the original sub-order so when we copy*/
      /* * it to the new sub-order we have the newest*/
      /* * version of the record.*/
      /* ******************************************************/

  OM0QW01.OM0QWFLG = "N"; /* init found flag*/

      /* find match to existing sub-ord nbr*/

   /* save the original suborder data that is not*/
   /* on the map in ws for the compare*/
  OM0QW01.OP1BLKID = OP1REC.OP1BLKID;
  OM0QW01.SP1ID = OP1REC.SP1ID;
  OM0QW01.OM0QWOTC = OP1REC.XOTCD;
  OM0QW01.XSOCD = OP1REC.XSOCD;
  while (SQLCA.VAGen_SQLCODE != 100
   && OM0QW01.OM0QWFLG == "N")
    call "IO0430" ("SN", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* next sub-order*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (OP1REC.XWHCD == OM0QM001.XWHCD      /* whse matches*/
       && OP1REC.OP1CUNDT == OM0QW01.OP1CUNDT /* nd dt matches*/
       && OP1REC.XDSCD == OM0QM001.XDSCD      /* direct ship matches*/
       && OP1REC.OP1BLKID == OM0QW01.OP1BLKID /* bulk id*/
       && OP1REC.SP1ID == OM0QW01.SP1ID       /* sales program*/
       && OP1REC.XOTCD == OM0QW01.OM0QWOTC    /* order type*/
       && OP1REC.XSOCD == OM0QW01.XSOCD)      /* sales office*/
        OM0QSRK(); /* check if prod already on suborder*/
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* record not found, end of search*/
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[1] = "SN";
        OM0QSYE(); /* load tairec with op1rec data*/
        OM0QSZ2(); /* common abort for reads*/
      end
    end
  end


  call "IO0430" ("CS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* close set*/



end // end OM0QSRJ

// read if prod on order
Function OM0QSRK()


      /* **********************************************/
      /* * check if duplicate record already on db2*/
      /* **********************************************/


      /* ****************************************************/
      /* * move data to opckey to read item view vitem003.*/
      /* * this view contains only op-ord-part-char,*/
      /* * op-cust-ord-id, op-nike-ord-id, xgp-gpc-cd,*/
      /* * sy-sty-nbr, sy-colr-cd-id, xdm-dim-cd,*/
      /* * op-coor-grp-cd, xum code and xow code.*/
      /* ****************************************************/

  OPCREC.OP1PARTN = OP1REC.OP1PARTN;
  OPCREC.OP1CUOID = OP1REC.OP1CUOID;
  OPCREC.OP1NORID = OP1REC.OP1NORID;
  OPCREC.XGPCD = OP3REC.XGPCD;
  OPCREC.SY1STNBR = OP3REC.SY1STNBR;
  OPCREC.SY2CLRID = OP3REC.SY2CLRID;
  OPCREC.XDMCD = OP3REC.XDMCD;
  if (OP1REC.XDVCD == "03" /* duplicate products allowed for*/
   && OP1REC.XBDCD == "0") /* division 03 regular orders only*/
    OPCREC.XUMCD = OP3REC.XUMCD;
    OPCREC.XOWCD = OP3REC.XOWCD;
  else
    OPCREC.XUMCD = "**";
    OPCREC.XOWCD = "**";
  end
  OPCREC.OP2CGPCD = OP3REC.OP2CGPCD;


      /* ***************/
      /* * read db2*/
      /* ***************/

  call "IO0570" ("S ", SQLCA, OPCREC) {isNoRefresh = yes, isExternal = yes};


      /* **************************/
      /* * check db2 return code*/
      /* **************************/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good return=duplicate*/
    OM0QW01.OM0QWFLG = "N"; /* this order wont work*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* product not found*/
      OM0QW01.OM0QWFLG = "Y"; /* this order will work*/
    else
      TA1REC.TA1LOCAT[1] = "S "; /* data base access*/
      OM0QSY2(); /* load diags from op3rec*/
      OM0QSZ2(); /* common abend routine*/
    end
  end



end // end OM0QSRK

// read nimrec, nil's prc type cd
Function OM0QSRL()


      /* ***************************************************/
      /* * read nimrec to get the nil's price type code*/
      /* ***************************************************/

  OM0QSRP(); /* /; get acct reg cd from vdstrb01*/

         /* load the key*/

  VNLXPY01.ZARCD = VDSTRB01.ZARCD; /* acct reg. code*/
  VNLXPY01.KUCCOID = OP1REC.KUCCOID; /* customer*/
  VNLXPY01.ZFCCD = " "; /* currancy code*/
  VNLXPY01.YSMXOB = YSMREC.YSMSUMCD; /* sum base order type code*/
  VNLXPY01.XGPCD = OP1REC.XGPCD; /* gen prod class code*/


  call "IO4500" ("SF", SQLCA, VNLXPY01) {isNoRefresh = yes, isExternal = yes};


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* all ok if found*/
    /* next sentence*/
  else /* else*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if price type code not found*/
      OM0QW01.OM0QWZPR = "Y"; /* force zero prices*/
    else /* else abend*/
      TA1REC.TA1DBASE = "DNILO   "; /* data base name*/
      TA1REC.TA1TBLVU = "VNLXPY01"; /* table view*/
      OM0QW01.OM0QWNI1 = VNLXPY01.XGPCD; /* format key cuz*/
      OM0QW01.OM0QWNI2 = VNLXPY01.YSMXOB; /* kuccoid*/
      OM0QW01.OM0QWNI3 = VNLXPY01.ZARCD; /* is binary*/
      OM0QW01.OM0QWNI4 = VNLXPY01.KUCCOID;
      OM0QW01.OM0QWNI5 = VNLXPY01.ZFCCD;
      TA1REC.TA1TBLKE = OM0QW01.OM0QWNIM; /* move key to ta1rec*/
      TA1REC.TA1LOCAT[3] = "IO4500  "; /* i/o mod name*/
      XSOPS02(); /* common db abend*/
    end
  end




end // end OM0QSRL

// read max value of op1norid
Function OM0QSRM()


      /* *********************************************************/
      /* * read highest value of op1norid using 'mc' selection.*/
      /* * only ninty-nine suborders allowed, so if highest*/
      /* * op1norid greater than ninty-eight - no more suborder*/
      /* * splits.*/
      /* *********************************************************/


  set SQLCA empty;

  OMCREC.OMCFUNCT = "MC"; /* max/count function*/

  call "IO0430" (OMCREC, SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "MC";
    OM0QSYE(); /* load tairec with op1rec data*/
    OM0QSZ2(); /* common abort for reads*/
  end



end // end OM0QSRM

// read in hdrs because of chg ct
Function OM0QSRN()


      /* ******************************************************/
      /* * received change count err upon update hdr, need*/
      /* * to read in original hdr and start process over*/
      /* ******************************************************/


  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* sub-order*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "SN";
    OM0QSYE(); /* load tairec with op1rec data*/
    OM0QSZ2(); /* common abort for reads*/
  end



end // end OM0QSRN

// db2-sales pgm order type read
Function OM0QSRO()



      /* *******************************************/
      /* * read the sales program order type record*/
      /* *******************************************/


  SP2REC.SP1ID = OP1REC.SP1ID; /* move sales program to key*/
  SP2REC.XOTCD = OP1REC.XOTCD; /* move order type to key*/

  call "IO0080" ("S ", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "S "; /* type of access*/
    TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VORTYP01"; /* table view*/
    TA1REC.TA1TBLKE = SP2REC.SP2KEY; /* key value*/
    TA1REC.TA1LOCAT[2] = "OM0QSRO "; /* sub module name*/
    TA1REC.TA1LOCAT[3] = "IO0080  "; /* i/o mod name*/
    OM0QSZ2(); /* common abend for reads*/
  end



end // end OM0QSRO

// read acct reg cd dnilo.vdstrb
Function OM0QSRP()


      /* this routine reads the dnilo.vdstrb01 to obtain the*/
      /* acct reg code to be used as part of the key for reading*/
      /* some other record i haven't got the time to find out about*/
      /* right now.  database changes suck.  bbake2 3/92*/

  set SQLCA empty;
  set VDSTRB01 empty;
  VDSTRB01.KUCCOID = KUCREC.KUCCOID;

  call "IO4600" ("S ", SQLCA, VDSTRB01) {isNoRefresh = yes, isExternal = yes}; /* declare & open cursor*/

  if (SQLCA.VAGen_SQLCODE == 0) /* all ok*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      set VDSTRB01 empty; /* we'll use blanks for acct reg cd*/
    else
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "OM0QSRP ";
      TA1REC.TA1LOCAT[3] = "IO4600  ";
      TA1REC.TA1DBASE = "DNILO   ";
      TA1REC.TA1TBLVU = "VDSTRB01";
      OM0QW01.OM0QWEK2 = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = OM0QW01.OM0QWEK2;
      XSOPS02(); /* abend*/
    end
  end
end // end OM0QSRP

// validate cutoff (vogcut01)
Function OM0QST7()

   /* IO5530 calls dorder.vogcut01 to verify that a finished*/
   /* style is valid for specific xowcd and provide us with*/
   /* the cut-off date*/
    /* the cutoff record we want to use varies,*/
    /* depending on the type of order.*/
    /* - draws from blank bulks must be validated against*/
        /* the owner group of the original blank bulk*/

  set SQLCA empty;
  set OPLREC empty;
  set OECREC empty;

  OPLREC.OPLSOP = "SF";
  OPLREC.OPJCNDTB = OM0QW01.OM0QWMDT;
  OECREC.XOWCD = OP3REC.XOWCD;

  call "IO5530" (OPLREC, SQLCA, OECREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0 /* handling of cutoff depends*/
   || SQLCA.VAGen_SQLCODE == +100) /* on type of order and where*/
     /* next sentence                    this logic was called from*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "OM0Q   "; /* application*/
    TA1REC.TA1LOCAT[1] = "OM0QST7 "; /* statement group*/
    TA1REC.TA1LOCAT[2] = "IO5530  "; /* io mod called*/
    TA1REC.TA1LOCAT[3] = "SF"; /* function code used*/
    TA1REC.TA1LOCAT[4] = OPLREC.OPLGRPL; /* avhrec key*/
    TA1REC.TA1MAP = "OM0QM001"; /* map*/
    TA1REC.TA1DBASE = "DORDER"; /* database name*/
    TA1REC.TA1TBLVU = "VOGCUT01"; /* table view*/
    TA1REC.TA1TBLKE = OPLREC.OPLGRPL; /* key*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
end // end OM0QST7

// edit blank bulk draws
Function OM0QST8()
    /* for draws from blank bulks, we have to check the cutoff*/

  OM0QST7(); /* get cutoff row*/
  if (SQLCA.VAGen_SQLCODE == +100)
    converseLib.validationFailed(632); /* no finished program cut-off date setup yet*/
    OM0QW01.OM0QWFRF = "Y";
    return;
  end

  if (OECREC.OPJCUTDT < OMAREC.OMACDT) /* if cut-off-date < curr-date*/
    if (COMMAREA.CAUSERID in YOSTBL.XXXUSRID
     && YOSTBL.XXXSTAT[sysVar.arrayIndex] == "A"
     && YOSTBL.YOSNDTFL[sysVar.arrayIndex] == "Y") /* authorized for lateness*/
      converseLib.validationFailed(638); /* past cut-off date warning msg*/
    else
      OM0QW01.OM0QWFRF = "Y";
      converseLib.validationFailed(697); /* cutoff date passed, cannot add qty*/
    end
  end
end // end OM0QST8

// write opurec record
Function OM0QSW2()


       /* load data into the opurec audit record*/

  set SQLCA empty;

  OPUREC.XXXPGMNB = "OM0Q"; /* program name*/
  OPUREC.OP1PARTN = OP3REC.OP1PARTN;
  OPUREC.OP1CUOID = OP3REC.OP1CUOID; /* cust ord id*/
  OPUREC.OP2LNINB = OP3REC.OP2LNINB; /* line item nbr*/
  OPUREC.XGPCD = OP3REC.XGPCD; /* gpc code*/
  OPUREC.SY1STNBR = OP3REC.SY1STNBR; /* style number*/
  OPUREC.SY2CLRID = OP3REC.SY2CLRID; /* color*/
  OPUREC.XDMCD = OP3REC.XDMCD; /* dimension*/
  OPUREC.XQACD = OP3REC.XQACD; /* quality code*/
  OPUREC.XOWCD = OP3REC.XOWCD; /* owner group*/
  OPUREC.XOMCD = OM0QM001.XOMCD; /* mntn reason code*/
  OPUREC.XOTCD = OP1REC.XOTCD; /* order type*/
  OPUREC.OP1CUNDT = OP1REC.OP1CUNDT; /* need date*/
  OPUREC.XDVCD = OP1REC.XDVCD; /* division code*/

  OPUREC.ZZZSDT = XX0XW01.XX0XWDAT; /* set up date*/
  OPUREC.ZZZSTM = XX0XW01.XX0XWTIM; /* set up time*/


  if (OPUREC.OPUAUDTP == "QC")
    OPUREC.OP1NORID = OP3REC.OP1NORID; /* nike ord id*/
    OPUREC.XWHCD = OP1REC.XWHCD; /* whse*/
  end

   /* *******************************************************/
    /* this routine writes vorder.voraud01 records.*/


  call "IO3210" ("A ", SQLCA, OPUREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "A ";
    OM0QSYO(); /* load ta1rec with opurec data*/
    OM0QSZ4(); /* common abend for writes*/
  end



end // end OM0QSW2

// write rebook audit record
Function OM0QSW3()


       /* ************************************************/
       /* * this statement group writes the rebook audit **/
       /* * records for the cancelled line items         **/
       /* *************************************************/


  set SQLCA empty;


  OPRREC.OP1PARTN = OP1REC.OP1PARTN;
  OPRREC.OP1CUOID = OP1REC.OP1CUOID;
  OPRREC.OP1NORID = OP1REC.OP1NORID;
  OPRREC.KUCCOID = OP1REC.KUCCOID;
  OPRREC.KUMSTRID = OP1REC.KUMSTRID;
  OPRREC.XNXCD = OP1REC.XNXCD;
  OPRREC.XGPCD = OP1REC.XGPCD;
  OPRREC.XDVCD = OP1REC.XDVCD;
  OPRREC.XSOCD = OP1REC.XSOCD;
  OPRREC.XOTCD = OP1REC.XOTCD;
  OPRREC.XWHCD = OP1REC.XWHCD;
  OPRREC.OP1CUNDT = OP1REC.OP1CUNDT;
  OPRREC.SM1AGYID = OP1REC.SM1AGYID;
  OPRREC.SM4REPID = OP1REC.SM4REPID;

  if (OP1REC.XBDCD == "4") /* rebook draw*/
    OPRREC.OPRAUDTP = "2";
    OPRREC.OP1BLKID = OM0QW04.OP1CUOID;
    OPRREC.OPRBNOID = OM0QW04.OP1NORID;
  else
    if (OP1REC.XCSCD == "20" /* credit hold*/
     || OP1REC.XCSCD == "30" /* recheck fail*/
     || OP1REC.XCSCD == "80") /* resell*/
      OPRREC.OPRAUDTP = "3";
      OPRREC.OP1BLKID = 0;
      OPRREC.OPRBNOID = 0;
    else
      OPRREC.OPRAUDTP = "1";
      OPRREC.OP1BLKID = 0;
      OPRREC.OPRBNOID = 0;
    end
  end
  OPRREC.OP1RSVQF = "N";
  OPRREC.OP2LNINB = OP3REC.OP2LNINB;
  OPRREC.SY1STNBR = OP3REC.SY1STNBR;
  OPRREC.SY2CLRID = OP3REC.SY2CLRID;
  OPRREC.XDMCD = OP3REC.XDMCD;
  OPRREC.XUMCD = OP3REC.XUMCD;
  OPRREC.XOWCD = OP3REC.XOWCD;
  OPRREC.XSACD = OP3REC.XEGCD;
  OPRREC.XSDCD = OP3REC.PC2INSEG;
  OPRREC.XPGCD = OP3REC.XPGCD;
  OPRREC.XQACD = OP3REC.XQACD;
  OPRREC.OPRQTYTP = "1";


  OPRREC.ZZZSDT = XX0XW01.XX0XWDAT;
  OPRREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  OPRREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  OPRREC.ZZZCHGCT = 0;


  call "IO2720" ("A ", SQLCA, OPRREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "A ";
    OM0QSYR(); /* load ta1rec with oprrec data*/
    OM0QSZ4(); /* common abend for writes*/
  end



   /* *******************************************************/
end // end OM0QSW3

// update bulk sizerun
Function OM0QSW4()


  OM0QW03.OP2TDRWQ = OM0QW03.OP2TDRWQ + OM0QW01.OM0QWTOT;

  OM0QW03.ZZZCHGDT = XX0XW01.XX0XWDAT; /* date chg*/
  OM0QW03.ZZZCHGTM = XX0XW01.XX0XWTIM; /* time chg*/

  set OP8REC empty;

  OP8REC.OP8TASK = "U ";
  OP8REC.OP8LOCAT[1] = "OM0QSW4";
  OP8REC.OP8LOCAT[2] = "OM0Q493";

  call "DB1000" (OP8REC, OM0QW03, OPBREC) {isNoRefresh = yes, isExternal = yes};

  if (OPBREC.OPBSZRC == 0) /* good return*/
    /* next sentence ;*/
  else
    if (OPBREC.OPBSZRC == 2 /* change count error codes*/
     || OPBREC.OPBSZRC == 3) /* re check availability*/
      converseLib.validationFailed(330); /* change cnt errs, try again*/
      OMAREC.OMAERR = "Y"; /* flag as err*/
    else
      OM0QSZ3(); /* abend for op3rec*/
    end
  end


   /* *******************************************************/
end // end OM0QSW4

// update bulk hdr
Function OM0QSW5()


   /* everything is ok so far so update the bulk order header.*/

  set SQLCA empty;


  OM0QW04.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  OM0QW04.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/


  call "IO0430" ("U ", SQLCA, OM0QW04) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sent*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found or chg cnt errs*/
      converseLib.validationFailed(330); /* change cnt errs, try again*/
      OMAREC.OMAERR = "Y"; /* flag as err*/
    else
      TA1REC.TA1LOCAT[1] = "U ";
      OM0QSYQ(); /* load diags with om0qw04 data*/
      OM0QSZ4(); /* abend for writes*/
    end
  end



end // end OM0QSW5

// update op3rec
Function OM0QSW6()

  OP3REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* chg dt*/
  OP3REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* chg tm*/


  set OP8REC empty;

      /* ****************************/
      /* * move data to pass record*/
      /* ****************************/

  OP8REC.OP8TASK = "U ";
  OP8REC.OP8LOCAT[1] = "OM0Q498";
  OP8REC.OP8LOCAT[2] = "OM0QSW6";
  OP8REC.OP8LOCAT[3] = " ";
  OP8REC.OP8LOCAT[4] = " ";
  OP8REC.OP8MAP = "OM0QM001";


      /* ***********************/
      /* db2 write update*/
      /* ***********************/

  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod - update*/


      /* ***********************/
      /* check db2 return code*/
      /* ***********************/

  if (OPBREC.OPBSZRC == 0) /* check for good return*/
    /* next sentence*/
  else
    if (OPBREC.OPBSZRC == 2
     || OPBREC.OPBSZRC == 3)
      converseLib.validationFailed(330); /* change cnt error, try again*/
      OMAREC.OMAERR = "Y"; /* flag as err*/
    else
      OM0QSZ3(); /* abend for op3rec*/
    end
  end




end // end OM0QSW6

// update op1rec, original hdr
Function OM0QSW7()


      /* *******************************/
      /* * update order header record*/
      /* *******************************/

  set SQLCA empty;


  OP1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  OP1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/


  call "IO0430" ("U ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* update order header*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* Tcs include begin 08/25/98*/
    OM0QS-CHECK-UPDATE(); /* for updating corresp vbulk recs*/
     /* Tcs include end   08/25/98*/

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* change count error*/
      converseLib.validationFailed(330);
                                   /* chgs not made, chg cnt errs, re-enter*/
      OM0QSRN(); /* read in op1rec*/
      OMAREC.OMAERR = "Y"; /* flag as err*/
    else
      TA1REC.TA1LOCAT[1] = "U ";
      OM0QSYE(); /* load TA1REC with op1rec data*/
      OM0QSZ4(); /* abend for writes*/
    end
  end



end // end OM0QSW7

// add new op3rec
Function OM0QSW8()

  OP3REC.ZZZSDT = XX0XW01.XX0XWDAT; /* set up date*/
  OP3REC.ZZZSTM = XX0XW01.XX0XWTIM; /* set up time*/
  OP3REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  OP3REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/


      /* *******************************/
      /* * add new op3rec for split sub-o*/
      /* *******************************/

      /* * move data to pass record*/

  OP8REC.OP8TASK = "A ";
  OP8REC.OP8LOCAT[1] = "OM0QSW8";
  OP8REC.OP8LOCAT[2] = "OM0Q499";
  OP8REC.OP8LOCAT[3] = " ";
  OP8REC.OP8LOCAT[4] = " ";
  OP8REC.OP8MAP = "OM0QM001";


      /* ***********************/
      /* * db2 write addition*/
      /* ***********************/

  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod - add*/


      /* ***********************/
      /* * check db2 return code*/
      /* ***********************/

  if (OPBREC.OPBSZRC == 0) /* check for good return*/
    /* next sentence*/
  else
    OM0QSZ3(); /* common abend form op3rec*/
  end


end // end OM0QSW8

// delete op3rec
Function OM0QSW9()


      /* *****************************************/
      /* * move data to pass record for formatter*/
      /* *****************************************/


  OP8REC.OP8TASK = "D "; /* delete record*/
  OP8REC.OP8LOCAT[1] = "OM0QSW9";
  OP8REC.OP8LOCAT[2] = "OM0Q499";
  OP8REC.OP8LOCAT[3] = " ";
  OP8REC.OP8LOCAT[4] = " ";
  OP8REC.OP8MAP = "OM0QM001";

      /* ***************/
      /* db2 delete*/
      /* ***************/

  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes}; /* delete record*/


      /* ***********************/
      /* check db2 return code*/
      /* ***********************/

  if (OPBREC.OPBSZRC == 0 /* check for good return*/
   || OPBREC.OPBSZRC == 1) /* or not-found error*/
    /* next sentence*/
  else
    OM0QSZ3(); /* common abend routine for op3rec*/
  end


end // end OM0QSW9

// add op1rec for new order
Function OM0QSWA()


   /* this routine is called when a new sub-order is created.*/
   /* it creates a new hdr for the new suborder*/

  OP1REC.ZZZSDT = XX0XW01.XX0XWDAT;
  OP1REC.ZZZSTM = XX0XW01.XX0XWTIM;
  OP1REC.ZZZCHGCT = 0;

  call "IO0430" ("A ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (OP1REC.XBDCD == "1") /* customer bulk order*/
      OM0QS-INSERT-BULKS(); /* insert corresponding vbulks01 rec*/
    end
  else
    TA1REC.TA1LOCAT[1] = "A ";
    OM0QSYE(); /* load diags with op1rec data*/
    OM0QSZ4(); /* common abend*/
  end



end // end OM0QSWA

// add op5rec for new order
Function OM0QSWB()

   /* this routine is called when a new sub-order is created.*/
   /* it creates op5rec records to associate with*/
   /* the newly created sub-order. this is done by reading*/
   /* the old sub-orders records in and writing them back out*/
   /* with the new sub-orders number on them.*/

    /* note: omwrec.omwsordn  contains the original sub-order*/
          /* number that we entered the application with.*/

   /* first do the alt ship address record if needed.*/


  if (OP1REC.OP11TMSF == "Y") /* if one time drop ship*/
    OP5REC.OP1PARTN = OP1REC.OP1PARTN;
    OP5REC.OP1CUOID = OP1REC.OP1CUOID;
    OP5REC.OP1NORID = OMWREC.OMWSORDN;
    OP5REC.OP5BILIN = "N";
    OP5REC.OP5SHPIN = "Y";
    call "IO0460" ("S ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      OP5REC.OP1NORID = OP1REC.OP1NORID;
      OP5REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
      OP5REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
      OP5REC.ZZZCHGCT = 0;
  /*  */
  /* Befor inserting the row it is being checked whether any row*/
  /* exists with the same key values in dorder.voaddr01.*/
  /*  */
      call "IO0460" ("SA", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
  /*  */
  /* If no row exists then only the row is added to dorder.voaddr01*/
  /* table, else it skips inserting the row.*/
  /*  */
      if (SQLCA.VAGen_SQLCODE == 100)
        call "IO0460" ("A ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
      else
        if (SQLCA.VAGen_SQLCODE == 0)
          call "IO0460" ("U ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
        else
          TA1REC.TA1LOCAT[1] = "S";
          OM0QSYS(); /* load diags with op5rec data*/
          OM0QSZ4(); /* common abend*/
        end
      end
      if (SQLCA.VAGen_SQLCODE == 0)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[1] = "A";
        OM0QSYS(); /* load diags with op5rec data*/
        OM0QSZ4(); /* common abend*/
      end
    else
      TA1REC.TA1LOCAT[1] = "S";
      OM0QSYS(); /* load diags with op5rec data*/
      OM0QSZ4(); /* common abend*/
    end
  end


   /* next do the alt bill address record if needed.*/

  if (OP1REC.OP11TMBF == "Y") /* if one time drop ship*/
    OP5REC.OP1PARTN = OP1REC.OP1PARTN;
    OP5REC.OP1CUOID = OP1REC.OP1CUOID;
    OP5REC.OP1NORID = OMWREC.OMWSORDN;
    OP5REC.OP5BILIN = "Y";
    OP5REC.OP5SHPIN = "N";
    call "IO0460" ("S ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      OP5REC.OP1NORID = OP1REC.OP1NORID;
      OP5REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
      OP5REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
      OP5REC.ZZZCHGCT = 0;
  /*  */
  /* Befor inserting the row it is being checked whether any row*/
  /* exists with the same key values in dorder.voaddr01.*/
  /*  */
      call "IO0460" ("SA", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
  /*  */
  /* If no row exists then only the row is added to dorder.voaddr01*/
  /* table, else it skips inserting the row.*/
  /*  */
      if (SQLCA.VAGen_SQLCODE == 100)
        call "IO0460" ("A ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
      else
        if (SQLCA.VAGen_SQLCODE == 0)
          call "IO0460" ("U ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
        else
          TA1REC.TA1LOCAT[1] = "S";
          OM0QSYS(); /* load diags with op5rec data*/
          OM0QSZ4(); /* common abend*/
        end
      end
      if (SQLCA.VAGen_SQLCODE == 0)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[1] = "A";
        OM0QSYS(); /* load diags with op5rec data*/
        OM0QSZ4(); /* common abend*/
      end
    else
      TA1REC.TA1LOCAT[1] = "S";
      OM0QSYS(); /* load diags with op5rec data*/
      OM0QSZ4(); /* common abend*/
    end
  end


end // end OM0QSWB

// add op4rec for new order
Function OM0QSWC()



   /* this routine is called when a new sub-order is created.*/
   /* it creates  op4rec records to associate with*/
   /* the newly created sub-order. this is done by reading*/
   /* the old sub-orders records in and writing them back out*/
   /* with the new sub-orders number on them.*/

    /* note: omwrec.omwsordn  contains the original sub-order*/
          /* number that we entered the application with.*/


   /* now handle the labels and special instructions records*/

  if (OP1REC.OP1SPLBF == "Y" /* if order has special labels*/
   || OP1REC.OP1SPINF == "Y") /* or has special instructions*/
    OP4REC.OP1PARTN = OP1REC.OP1PARTN;
    OP4REC.OP1CUOID = OP1REC.OP1CUOID;
    OP4REC.OP1NORID = OMWREC.OMWSORDN;
    OP4REC.OP4TRTYP = " ";
    call "IO0470" ("SS", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      while (SQLCA.VAGen_SQLCODE != 100) /* while not end of records*/
        call "IO0470" ("SN", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
        if (SQLCA.VAGen_SQLCODE == 0)
          if (OP4REC.OP4TRTYP == "I" /* if instr record*/
           || OP4REC.OP4TRTYP == "L") /* or label record*/
            OP4REC.OP1NORID = OP1REC.OP1NORID;
            OP4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
            OP4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
            OP4REC.ZZZCHGCT = 0;
            call "IO0470" ("A ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
            if (SQLCA.VAGen_SQLCODE == 0)
              OP4REC.OP1NORID = OMWREC.OMWSORDN; /* reset old key*/
            else
              TA1REC.TA1LOCAT[1] = "A";
              OM0QSYU(); /* load diags with op4rec data*/
              OM0QSZ4(); /* common abend*/
            end
          end
        else
          if (SQLCA.VAGen_SQLCODE == 100)
             /* next sentence*/
          else
            TA1REC.TA1LOCAT[1] = "SN";
            OM0QSYU(); /* load diags with op4rec data*/
            OM0QSZ4(); /* common abend*/
          end
        end
      end
    else /* order says it's there, error*/
      TA1REC.TA1LOCAT[1] = "SN";
      OM0QSYU(); /* load diags with op4rec data*/
      OM0QSZ4(); /* common abend*/
    end
    call "IO0470" ("CS", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
  end


end // end OM0QSWC

// add oibrec for new order
Function OM0QSWD()


   /* this stmt grp creates an expedite record for*/
   /* newly created sub-orders when it is split*/
   /* from an existing sub-order.*/

  OIBREC.OP1PARTN = OP1REC.OP1PARTN;
  OIBREC.OP1CUOID = OP1REC.OP1CUOID;
  OIBREC.OP1NORID = OP1REC.OP1NORID;
  OIBREC.KUCCOID = OP1REC.KUCCOID;
  OIBREC.KUMSTRID = OP1REC.KUMSTRID;
  OIBREC.XNXCD = OP1REC.XNXCD;
  OIBREC.XOTCD = OP1REC.XOTCD;
  OIBREC.XSOCD = OP1REC.XSOCD;
  OIBREC.OP1CUNDT = OP1REC.OP1CUNDT;
  OIBREC.XOSCD = OP1REC.XOSCD;
  OIBREC.XWHCD = OP1REC.XWHCD;
  OIBREC.OP1NTMAL = OP1REC.OP1NTMAL;
  OIBREC.OIARECST = "A";
  OIBREC.OIBPGM = "OM0Q";
  OIBREC.ZZZCHGDT = OP1REC.ZZZCHGDT;
  OIBREC.ZZZCHGTM = OP1REC.ZZZCHGTM;
  OIBREC.ZZZCHGCT = 0;
  KUMREC.KUCCOID = OP1REC.KUCCOID;
  KUMREC.KUMSTRID = OP1REC.KUMSTRID;

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OIBREC.KUMSTSNM = KUMREC.KUMSTSNM;
  else
    TA1REC.TA1LOCAT[1] = "S ";
    OM0QSYK(); /* load ta1rec from kumrec*/
    OM0QSZ4(); /* common abend for writes*/
  end


   /* -- add expedite record*/

  call "IO1880" ("A  ", SQLCA, OIBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "A "; /* func diags*/
    OM0QSYI(); /* load ta1rec from oibrec*/
    OM0QSZ4(); /* common abend for writes*/
  end

end // end OM0QSWD

// xottbl lookup
Function OM0QSX1()

      /* *******************************************/
      /* * xottbl lookup, store index for use later*/
      /* *******************************************/


  if (OP1REC.XOTCD in XOTTBL.XOTCD /* find order type code in table*/
   && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* order type active*/
    OM0QW01.OM0QWOTS = sysVar.arrayIndex; /* hold index*/
  else /* else reject product*/
    converseLib.validationFailed(17); /* msg-order type not valid*/
    OM0QSZ1(); /* reject changes, protect map*/
  end


end // end OM0QSX1

// bulk/draw table lookup
Function OM0QSX2()


      /* *************************************/
      /* * lookup bulk/draw code from xbdtbl*/
      /* *************************************/

  if (OP1REC.XBDCD in XBDTBL.XBDCD
   && XBDTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if active*/
    OM0QW01.OM0QWBDS = sysVar.arrayIndex;
  else
    converseLib.validationFailed(295); /* bulk/draw not valid*/
    OM0QSZ1(); /* reject changes and protect map*/
  end

end // end OM0QSX2

// xostbl lookup
Function OM0QSX3()

         /* lookup line item status from op3rec*/

  if (OP3REC.OP2LNIST in XOSTBL.XOSCD /* if direct ship cd is valid*/
   && XOSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    OM0QW01.OM0QWXOS = sysVar.arrayIndex;
                                   /* hold index for later reference*/
  else
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(100); /* order status not valid*/
    OM0QM001.XOSABRV = " "; /* init status abreviation*/
    set OM0QM001.OP2LNIST cursor, bold;
  end


end // end OM0QSX3

// xsntbl find season
Function OM0QSX4()
  OM0QW01.OPNSBD = 0; /* init, hold season begin date in ws for now*/
  OM0QW01.OPNSED = 0; /* init, hold season end date in ws for now*/

  OMAREC.OMASUB = 1;
  while (XSNTBL.XSECD[OMASUB] != "99" /* while not end of table*/
   && XSNTBL.XSNYR[OMASUB] != 9999 
   && OM0QW01.OPNSBD == 0) /* and begin date still blank*/
    if (OSAREC.OSANU8 >= XSNTBL.XSNBDT[OMASUB] /* new need dt w/in season?*/
     && OSAREC.OSANU8 <= XSNTBL.XSNXDT[OMASUB] 
     && XSNTBL.XXXSTAT[OMASUB] == "A")        
      if (OP3REC.XBK-BK-SESN-CD != "  ") /* if bk sesn not blank and*/
        if (XSNTBL.XSECD[OMASUB] == OP3REC.XBK-BK-SESN-CD) /* matches xsn*/
          OM0QW01.OPNSBD = XSNTBL.XSNBDT[OMASUB]; /* use this xsn*/
          OM0QW01.OPNSED = XSNTBL.XSNXDT[OMASUB]; /* sesn's dts*/
        else
          OMAREC.OMASUB = OMAREC.OMASUB + 1; /* keep looking*/
        end
      else /* no booking season on product*/
        if (XSNTBL.XSECD[OMASUB] in XBKTBL.XBK-BK-SESN-CD /* xsn sesn is*/
         && XBKTBL.XXXSTAT[sysVar.arrayIndex] == "A")     /* valid, active bk sesn*/
          OM0QW01.OPNSBD = XSNTBL.XSNBDT[OMASUB];
          OM0QW01.OPNSED = XSNTBL.XSNXDT[OMASUB];
        else
          OMAREC.OMASUB = OMAREC.OMASUB + 1; /* keep looking*/
        end
      end
    else
      OMAREC.OMASUB = OMAREC.OMASUB + 1; /* keep looking*/
    end
  end


end // end OM0QSX4

// xowtbl combo lookup
Function OM0QSX7()

    /* look owner code up in xowtbl.*/


  if (XOWREC.XOWKEY in XOWTBL.XOWKEY /* if in table*/
   && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    OM0QM001.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
  else
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(101); /* owner group code not found on table*/
    set OM0QM001.XOWCD cursor, bold;
  end

end // end OM0QSX7

// xoltbl combo lookup
Function OM0QSX9()


      /* *******************************************/
      /* *  xoltbl lookup for xsvcd, xwhcd combo*/
      /* *******************************************/

  OM0QW01.OM0QWFLG = "N"; /* init found flag*/
  sysVar.arrayIndex = 1;

  while (XOLTBL.XSVCD[sysVar.arrayIndex] != 9999 /* while not end of table*/
   && XOLTBL.XWHCD[sysVar.arrayIndex] != "99" 
   && OM0QW01.OM0QWFLG == "N")
    if (OM0QM001.XWHCD in XOLTBL.XWHCD from sysVar.arrayIndex)
      if (XOLTBL.XSVCD[sysVar.arrayIndex] == OMWREC.OP1MTREP
       && XOLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        OM0QW01.OM0QWFLG = "Y"; /* found entry*/
      else
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      end
    else
      return; /* exit from loop, no entries match*/
    end
  end

end // end OM0QSX9

// xdscd lookup from op1rec
Function OM0QSXA()



         /* lookup direct ship code from om0qm001*/

  if (OM0QM001.XDSCD in XDSTBL.XDSCD /* if direct ship cd is valid*/
   && XDSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    OM0QM001.XDSABRV = XDSTBL.XDSABRV[sysVar.arrayIndex]; /* dir ship abrv*/
    OM0QW01.XDSWHSEF = XDSTBL.XDSWHSEF[sysVar.arrayIndex]; /* whse req'd flag*/
    OM0QW01.OM0QWCHG = "Y"; /* for edit on changed xdscd*/
    set OM0QM001.XDSCD initialAttributes;

  else
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(074); /* direct shp code not valid*/
    OM0QM001.XDSABRV = " ";
    OM0QW01.XDSWHSEF = "Y"; /* require whse*/
    set OM0QM001.XDSCD cursor, bold;
    return;
  end

   /* edit direct ship -- if nil, if base order type if 'f1'*/
      /* and gpc = '03', and warehouse = '51', and*/
      /* direct ship code = ' ' now and it was not before,*/
   /* get iseg number from dprodc.vprdcu01 table*/

  if (OP1REC.XDVCD == "02" /* nil order*/
   && OP1REC.XOBCD == "F1" /* futures*/
   && OP1REC.XGPCD == "03" /* apparel*/
   && OM0QM001.XDSCD == " "
   && OP1REC.XDSCD != " ")
    if (OP1REC.XWHCD == "51" /* Memphis aprl whse*/
     || OP1REC.XWHCD == "25" /* NSG aprl whse*/
     || OP1REC.XWHCD == "27") /* NSG aprl whse*/
      OM0QSEG(); /* default to iseg number*/
    end
  end


  if (OP1REC.XDSCD == " " /* was ship from whse*/
   && OM0QM001.XDSCD != " ") /* but now another direct ship code*/
    OP3REC.PC2INSEG = "000"; /* move spaces to defaulted iseg number*/
  end



end // end OM0QSXA

// validate cancel reason code
Function OM0QSXC()


      /* ***********************************************/
      /* * edit reason code and reenter flag for cancel*/
      /* ***********************************************/

      /* edit cancel reenter flag*/

  if (OM0QM001.OM0QMREF == "Y"
   || OM0QM001.OM0QMREF == "N")
       /* next sentence*/
  else
    set OM0QM001.OM0QMREF cursor, bold;
    OMAREC.OMAERR = "Y";
    if (OM0QM001.OM0QMREF == " ")
      converseLib.validationFailed(562); /* reqrd fld - must enter y or n*/
    else
      converseLib.validationFailed(563); /* invld char - must be y or n*/
    end
  end



  if (OM0QM001.XOMCD in XOMTBL.XOMCD           /* valid maint reason*/
   && XOMTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* active*/
   && XOMTBL.XOMCANCF[sysVar.arrayIndex] == "D") /* cancel*/
    OM0QM001.XOMABRV = XOMTBL.XOMABRV[sysVar.arrayIndex];
    OM0QW01.OM0QWXOM = sysVar.arrayIndex; /* save reason code subscript*/
    if (XOMTBL.XOMRBKFL[OM0QWXOM] == "Y") /* user wants rbk*/
      OM0QS51(); /* edit reason code for rebooking*/
    end
  else
    converseLib.validationFailed(372); /* invalid cancel reason*/
    OMAREC.OMAERR = "Y";
    set OM0QM001.XOMCD cursor, bold;
  end

  if (OMAREC.OMAERR == "N"
   && OM0QW01.OM0QWOAF == "Y")
    if (converseVar.validationMsgNum == 0)
      converseLib.validationFailed(614); /* order adjustment required*/
    end
  end

end // end OM0QSXC

// xoacd lookup
Function OM0QSXF()


      /* *********************************************************/
      /* * override authorization reqd only if price changes*/
      /* *********************************************************/


      /* check the users entered authorization*/
      /* code for validity. first it must exist on the table.*/
      /* second it must be active as far as the dates associated*/
      /* with this code.*/

  if (OM0QM001.XOACD in XOATBL.XOACD                         /* if match*/
   && XX0XW01.XX0XWDAT >= XOATBL.XOABEGDT[sysVar.arrayIndex] /* today in range*/
   && XX0XW01.XX0XWDAT <= XOATBL.XOAENDDT[sysVar.arrayIndex])
    OP1REC.OP1OSRID = XOATBL.KUYSVRID[sysVar.arrayIndex]; /* save service rep*/
    OP1REC.OP1ORADT = XX0XW01.XX0XWDAT; /* changed today*/
    set OM0QM001.XOACD initialAttributes; /* set back to normal*/
  else
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(200); /* code not valid*/
    set OM0QM001.XOACD cursor, bold;
  end



end // end OM0QSXF

// load ta1rec diags from op2rec
Function OM0QSY1()


      /* ******************************/
      /* load ta1rec diags from op2rec*/
      /* ******************************/

  TA1REC.TA1DBASE = "DORDER"; /* data base name*/
  TA1REC.TA1TBLVU = "VITEM001"; /* table view*/
  OM0QW01.OM0QWTK1 = OP2REC.OP1CUOID;
  OM0QW01.OM0QWTK2 = OP2REC.OP1NORID;
  OM0QW01.OM0QWTK3 = OP2REC.OP2LNINB;
  OM0QW01.OM0QWTK4 = " ";
  OM0QW01.OM0QWTK5 = " ";
  OM0QW01.OM0QWTK6 = " ";
  TA1REC.TA1TBLKE = OM0QW01.OM0QWT1; /* key value*/
  TA1REC.TA1LOCAT[3] = "IO0440"; /* i/o mod*/



end // end OM0QSY1

// load ta1rec diags from op2rec
Function OM0QSY2()


      /* ******************************/
      /* load ta1rec diags from op2rec*/
      /* ******************************/

  TA1REC.TA1DBASE = "DORDER"; /* data base name*/
  TA1REC.TA1TBLVU = "VOSIZE01"; /* table view*/
  OM0QW01.OM0QWTK1 = OP3REC.OP1CUOID;
  OM0QW01.OM0QWTK2 = OP3REC.OP1NORID;
  OM0QW01.OM0QWTK3 = OP3REC.OP2LNINB;
  OM0QW01.OM0QWTK4 = " ";
  OM0QW01.OM0QWTK5 = " ";
  OM0QW01.OM0QWTK6 = " ";
  TA1REC.TA1TBLKE = OM0QW01.OM0QWT1; /* key value*/
  TA1REC.TA1LOCAT[3] = "IO0570"; /* i/o mod*/



end // end OM0QSY2

// load ta1rec diags from sycrec
Function OM0QSY3()

  TA1REC.TA1LOCAT[2] = "OM0QSY3 "; /* group name for diags*/


      /* ******************************/
      /* load ta1rec diags from sycrec*/
      /* ******************************/


  TA1REC.TA1DBASE = "DPROD"; /* data base name*/
  TA1REC.TA1TBLVU = "VCOLOR02"; /* table view*/
  TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* key value*/
  TA1REC.TA1LOCAT[3] = "IO0560"; /* i/o mod*/

end // end OM0QSY3

// load ta1rec diags from sy4rec
Function OM0QSY4()


      /* ******************************/
      /* load ta1rec diags from sy4rec*/
      /* ******************************/

  TA1REC.TA1DBASE = "DPROD"; /* data base name*/
  TA1REC.TA1TBLVU = "VSCALE01"; /* table view*/
  TA1REC.TA1TBLKE = SY4REC.SY4SZSCL; /* key value*/
  TA1REC.TA1LOCAT[3] = "IO0040"; /* i/o mod*/


end // end OM0QSY4

// sp5rec abend data
Function OM0QSY6()

      /* ************************************************/
      /* * set up err diags from sp5rec*/
      /* ************************************************/


  TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
  TA1REC.TA1TBLVU = "VPROD001"; /* table view*/
  TA1REC.TA1TBLKE = SP5REC.SP5KEY; /* key value*/
  TA1REC.TA1LOCAT[3] = "IO0110  "; /* i/o mod name*/


end // end OM0QSY6

// load ta1rec from sy5rec
Function OM0QSY7()


      /* common abend info for sy5rec*/


  TA1REC.TA1DBASE = "DPROD"; /* data base name*/
  TA1REC.TA1TBLVU = "VPRICE01"; /* table view*/
  TA1REC.TA1TBLKE = SY5REC.SY5KEY; /* key value*/
  TA1REC.TA1LOCAT[4] = "IO0380"; /* i/o mod*/



end // end OM0QSY7

// load ta1rec with sm1rec
Function OM0QSY8()


          /* load ta1rec with sm1rec key*/


  TA1REC.TA1LOCAT[3] = "IO0050  ";
  TA1REC.TA1LOCAT[4] = "        ";
  TA1REC.TA1DBASE = "DSLSMN  ";
  TA1REC.TA1TBLVU = "VSAGCY01";
  TA1REC.TA1TBLKE = SM1REC.SM1AGYID;

end // end OM0QSY8

// load ta1rec diags from op2rec
Function OM0QSYD()


      /* ******************************/
      /* load ta1rec diags from op2rec*/
      /* ******************************/

  TA1REC.TA1DBASE = "DORDER"; /* data base name*/
  TA1REC.TA1TBLVU = "VITEM001"; /* table view*/
  OM0QW01.OM0QWTK1 = OM0QW02.OP1CUOID; /* make key readable*/
  OM0QW01.OM0QWTK2 = OM0QW02.OP1NORID; /* make key readable*/
  OM0QW01.OM0QWTK3 = " ";
  OM0QW01.OM0QWTK4 = OM0QW02.SY1STNBR; /* style*/
  OM0QW01.OM0QWTK5 = " "; /* quality*/
  OM0QW01.OM0QWTK6 = " ";
  TA1REC.TA1TBLKE = OM0QW01.OM0QWT1; /* key value*/
  TA1REC.TA1LOCAT[3] = "IO0440"; /* i/o mod*/



end // end OM0QSYD

// load ta1rec from op1rec
Function OM0QSYE()


      /* ******************************/
      /* load ta1rec diags from op1rec*/
      /* ******************************/

  TA1REC.TA1DBASE = "DORDER"; /* data base name*/
  TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
  OM0QW01.OM0QWTK1 = OP1REC.OP1CUOID;
  OM0QW01.OM0QWTK2 = OP1REC.OP1NORID;
  OM0QW01.OM0QWTK3 = " ";
  OM0QW01.OM0QWTK4 = OP1REC.OP1PARTN;
  OM0QW01.OM0QWTK5 = " ";
  OM0QW01.OM0QWTK6 = " ";
  TA1REC.TA1TBLKE = OM0QW01.OM0QWT1; /* key value*/
  TA1REC.TA1LOCAT[3] = "IO0430"; /* i/o mod*/



end // end OM0QSYE

// xoacd table lookup
Function OM0QSYF()

     /* ****************************************/
     /* * loads ta1rec for opjrec, oplrec lookups*/
     /* ****************************************/


  OM0QW01.OM0QWTK1 = OPLREC.OPJCNDTB;
  OM0QW01.OM0QWTK2 = OPLREC.OPJCNDTX;
  OM0QW01.OM0QWTK3 = 0;
  OM0QW01.OM0QWTK4 = OPJREC.XOTCD;
  OM0QW01.OM0QWTK5 = OPJREC.SY1STNBR;
  OM0QW01.OM0QWTK6 = OPJREC.SY2CLRID;
  TA1REC.TA1TBLKE = OM0QW01.OM0QWT1; /* key value*/
  TA1REC.TA1LOCAT[3] = "IO2560 ";
  TA1REC.TA1LOCAT[4] = " ";
  TA1REC.TA1DBASE = "DORDER.";
  TA1REC.TA1TBLVU = "VCUTOF01";


end // end OM0QSYF

// data from kucrec for diags
Function OM0QSYH()


      /* common abend info for kucrec*/

  TA1REC.TA1LOCAT[3] = "IO0240  ";
  TA1REC.TA1LOCAT[4] = "        ";
  TA1REC.TA1DBASE = "KUCREC  ";
  TA1REC.TA1TBLVU = "VCMPNY01";
  OM0QW01.OM0QWTK1 = KUCREC.KUCCOID;
  TA1REC.TA1TBLKE = OM0QW01.OM0QWTK1;


end // end OM0QSYH

// data from oibrec for diags
Function OM0QSYI()


      /* common abend info for oibrec*/

  OM0QW01.OM0QWTK1 = OIBREC.OP1CUOID;
  OM0QW01.OM0QWTK2 = OIBREC.OP1NORID;
  OM0QW01.OM0QWTK3 = " ";
  OM0QW01.OM0QWTK4 = OIBREC.OP1PARTN;
  OM0QW01.OM0QWTK5 = " ";
  OM0QW01.OM0QWTK6 = " ";
  TA1REC.TA1TBLKE = OM0QW01.OM0QWT1;
  TA1REC.TA1DBASE = "DORDER  ";
  TA1REC.TA1TBLVU = "VXPDIT01";
  TA1REC.TA1LOCAT[3] = "IO1880";
  TA1REC.TA1LOCAT[4] = " ";

end // end OM0QSYI

// data from kumrec for diags
Function OM0QSYK()


      /* common abend info for oibrec*/

  TA1REC.TA1DBASE = "DCUST   ";
  TA1REC.TA1TBLVU = "VSTORE01";
  TA1REC.TA1LOCAT[3] = "IO0340";
  TA1REC.TA1LOCAT[4] = "       ";
  OM0QW01.OM0QWTK1 = KUMREC.KUCCOID;
  OM0QW01.OM0QWTK2 = KUMREC.KUMSTRID;
  OM0QW01.OM0QWTK3 = " ";
  OM0QW01.OM0QWTK4 = " ";
  OM0QW01.OM0QWTK5 = " ";
  OM0QW01.OM0QWTK6 = " ";
  TA1REC.TA1TBLKE = OM0QW01.OM0QWT1;

end // end OM0QSYK

// load opurec for audit records
Function OM0QSYO()


       /* load data into the tairec from opurec for diags*/

  TA1REC.TA1DBASE = "DORDER";
  TA1REC.TA1TBLVU = "VORAUD01";
  OM0QW01.OM0QWTK1 = OPUREC.OP1CUOID; /* diagnostics*/
  OM0QW01.OM0QWTK2 = OPUREC.OP1NORID; /* diagnostics*/
  OM0QW01.OM0QWTK6 = OPUREC.OPUAUDTP; /* diagnostics*/
  OM0QW01.OM0QWTK4 = OPUREC.SY1STNBR; /* diagnostics*/
  OM0QW01.OM0QWTK5 = OPUREC.SY2CLRID; /* diagnostics*/
  TA1REC.TA1TBLKE = OM0QW01.OM0QWT1; /* diagnostics*/
  TA1REC.TA1LOCAT[3] = "IO3210";





   /* *******************************************************/
end // end OM0QSYO

// load ta1rec with om0qw04
Function OM0QSYQ()


      /* ******************************/
      /* load ta1rec diags from om0qw04*/
      /* ******************************/

  TA1REC.TA1DBASE = "DORDER"; /* data base name*/
  TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
  OM0QW01.OM0QWTK1 = OM0QW04.OP1CUOID;
  OM0QW01.OM0QWTK2 = OM0QW04.OP1NORID;
  OM0QW01.OM0QWTK3 = " ";
  OM0QW01.OM0QWTK4 = OM0QW04.OP1PARTN;
  OM0QW01.OM0QWTK5 = " ";
  OM0QW01.OM0QWTK6 = " ";
  TA1REC.TA1TBLKE = OM0QW01.OM0QWT1; /* key value*/
  TA1REC.TA1LOCAT[3] = "IO0430"; /* i/o mod*/



end // end OM0QSYQ

// load ta1rec with oprrec
Function OM0QSYR()


       /* ************************************************/
       /* * this statement group loads the oprrec data   **/
       /* * to the ta1rec                                **/
       /* *************************************************/

  TA1REC.TA1DBASE = "DORDER";
  TA1REC.TA1TBLVU = "VRBAUD01";
  TA1REC.TA1LOCAT[3] = "IO2720";
  OM0QW01.OM0QWTK1 = OPRREC.OP1CUOID;
  OM0QW01.OM0QWTK2 = OPRREC.OP1NORID;
  OM0QW01.OM0QWTK3 = OPRREC.KUCCOID;
  OM0QW01.OM0QWTK4 = OPRREC.OP1PARTN;
  OM0QW01.OM0QWTK5 = " ";
  OM0QW01.OM0QWTK6 = " ";
  TA1REC.TA1TBLKE = OM0QW01.OM0QWT1; /* key value*/
  TA1REC.TA1LOCAT[4] = " ";


   /* *******************************************************/
end // end OM0QSYR

// load ta1rec with op5rec
Function OM0QSYS()

       /* load ta1rec with op5rec data*/

  TA1REC.TA1DBASE = "DORDER";
  TA1REC.TA1TBLVU = "VOADDR01";
  OM0QW01.OM0QWTK1 = OP5REC.OP1CUOID;
  OM0QW01.OM0QWTK2 = OP5REC.OP1NORID;
  OM0QW01.OM0QWTK3 = " ";
  OM0QW01.OM0QWTK4 = OP5REC.OP1PARTN;
  OM0QW01.OM0QWTK5 = " ";
  OM0QW01.OM0QWTK6 = " ";
  TA1REC.TA1TBLKE = OM0QW01.OM0QWT1; /* key value*/
  TA1REC.TA1LOCAT[3] = "IO0430"; /* i/o mod*/
  TA1REC.TA1LOCAT[3] = "IO0460";


end // end OM0QSYS

// load ta1rec with ta2rec
Function OM0QSYT()

     /* ****************************************/
     /* *   loads ta1rec for post ta0040 abends*/
     /* ****************************************/

  TA1REC.TA1FUNC = "POST";
  TA1REC.TA1LOCAT[3] = "TA0040 ";
  TA1REC.TA1LOCAT[4] = " ";
  OM0QW01.OM0QWTK1 = OPJREC.XOTCD;
  OM0QW01.OM0QWTK2 = " ";
  OM0QW01.OM0QWTK3 = OPLREC.OPJCNDTB;
  OM0QW01.OM0QWTK4 = OP3REC.SY1STNBR;
  OM0QW01.OM0QWTK5 = OP3REC.SY2CLRID;
  OM0QW01.OM0QWTK6 = " ";
  TA1REC.TA1TBLKE = OM0QW01.OM0QWT1; /* key value*/
  call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes};


end // end OM0QSYT

// load ta1rec with op4rec
Function OM0QSYU()


       /* load ta1rec with op4rec data*/

  TA1REC.TA1DBASE = "DORDER";
  TA1REC.TA1TBLVU = "VTEXT001";
  OM0QW01.OM0QWTK1 = OP4REC.OP1CUOID;
  OM0QW01.OM0QWTK2 = OP4REC.OP1NORID;
  OM0QW01.OM0QWTK3 = OP4REC.OP4TRSEQ;
  OM0QW01.OM0QWTK4 = OP4REC.OP1PARTN;
  OM0QW01.OM0QWTK5 = OP4REC.OP4TRTYP;
  OM0QW01.OM0QWTK6 = " ";
  TA1REC.TA1LOCAT[3] = "IO0470";
end // end OM0QSYU

// clear cc1rec fields
Function OM0QSYV()


  OMWREC.OMWCRCKF = "N"; /* turn credit check flag off for om0m*/
  CC1REC.CC1CLRSN = 0; /* clear cc1rec fields*/
  CC1REC.CC1PUNTS = 0; /* ''*/
  CC1REC.CC1PVALU = 0; /* ''*/
  CC1REC.CC1AUNTS = 0; /* ''*/
  CC1REC.CC1AVALU = 0; /* ''*/

end // end OM0QSYV

// load ta1rec translated key
Function OM0QSYW()


  TA1REC.TA1LOCAT[1] = OPPREC.OPPLOC1;
  TA1REC.TA1LOCAT[3] = "OP1610";
  TA1REC.TA1LOCAT[4] = "OM0QSYW ";
  OM0QW01.OM0QWTK1 = OP1REC.OP1CUOID;
  OM0QW01.OM0QWTK2 = OP1REC.OP1NORID;
  /*  */
  /* because we are reporting an error in decrementing availability,*/
  /* we want to show the same date the decrementing*/
  /* routine was called with.*/
  /*  */
  if (OM0QW01.OP1CUNDT < OMAREC.OMACDT)
    OM0QW01.OM0QWTK3 = OMAREC.OMACDT;
  else
    OM0QW01.OM0QWTK3 = OM0QW01.OP1CUNDT;
  end
  /*  */
  OM0QW01.OM0QWTK4 = OPPREC.SY1STNBR;
  OM0QW01.OM0QWTK5 = OPPREC.SY2CLRID;
  OM0QW01.OM0QWTK6 = OPPREC.OPPRTNCD;
  TAEREC.TAEDESC1 = OM0QW01.OM0QWT1;
  TAEREC.TAEDESC2 = sysVar.errorCode;


end // end OM0QSYW

// reject prod chgs, protect
Function OM0QSZ1()


      /* ********************************************************/
      /* * set up reject/lock out for errs on reads*/
      /* ********************************************************/

  OMAREC.OMAERR = "Y"; /* reject product*/
  OM0QW01.OM0QWREJ = "Y";
  OMWREC.OMWORDN = OP3REC.OP1CUOID;
  OMWREC.OMWSORDN = OP3REC.OP1NORID;
  OM0QM001.OMWORD = OMWREC.OMWORD; /* order number*/
  OM0QW01.SY1STNBR = OP3REC.SY1STNBR; /* style*/
  OM0QW01.SY2CLRID = OP3REC.SY2CLRID; /* color*/
  OM0QW01.XDMCD = OP3REC.XDMCD; /* dimension*/
  OM0QM001.OM0QWPRD = OM0QW01.OM0QWPRD;
  OM0QM001.SY1SSTNM = "CHGS REJECTED";
  OM0QM001.SY2CLRAB = "-- HIT ENTER";
  set OM0QM001.SY1SSTNM cursor, bold;
  set OM0QM001.SY2CLRAB bold;
  OM0QS34(); /* PROTECT entire map*/
  OM0Q410(); /* converse map*/


end // end OM0QSZ1

// abort routine
Function OM0QSZ2()


      /* *********************************************************/
      /* * online abort routine for op system for reads         **/
      /* *********************************************************/

  OMAREC.OMAERR = "Y"; /* flag as err*/
  set ERRSQLCA empty; /* clear area*/
  move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/


  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock/timeout*/
    TA1REC.TA1FUNC = "POST"; /* post err*/
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes}; /* abend module*/
    converseLib.validationFailed(010); /* data base busy try again*/
    OM0QSZ1(); /* rejects changes*/
  else
    TA1REC.TA1FUNC = "RETN"; /* abend func*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* synpoint rollback*/
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes}; /* abend module*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSPF4(); /* master menu*/
    exit program; /* master menu failure*/
  end


   /* *************************************************************/
end // end OM0QSZ2

// abend for op3rec
Function OM0QSZ3()


      /* *********************************************************/
      /* * online abort routine for op3rec*/
      /* *********************************************************/

  OMAREC.OMAERR = "Y"; /* flag as err*/

  if (OPBREC.OPBSZRC == -911) /* deadlock/timeout*/
    converseLib.validationFailed(010); /* database busy, please try again*/
    OM0QSZ1(); /* reject product*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* synpoint rollback*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSPF4(); /* master menu*/
    exit program; /* master menu failure*/
  end


   /* *************************************************************/
end // end OM0QSZ3

// abend or try again for writes
Function OM0QSZ4()


      /* *********************************************************/
      /* * online abort routine for op system for reads         **/
      /* *********************************************************/

  OMAREC.OMAERR = "Y"; /* flag as err*/
  set ERRSQLCA empty; /* clear area*/
  move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock/timeout*/
    TA1REC.TA1FUNC = "POST"; /* post err*/
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes}; /* abend module*/
    converseLib.validationFailed(006); /* changes not made, enter or pfkey out*/
  else
    TA1REC.TA1FUNC = "RETN"; /* abend func*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* synpoint rollback*/
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes}; /* abend module*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSPF4(); /* master menu*/
    exit program; /* master menu failure*/
  end


   /* *************************************************************/
end // end OM0QSZ4

// abend or try again for op1610
Function OM0QSZ5()


      /* *********************************************************/
      /* * online abort routine for op system for reads         **/
      /* *********************************************************/

  OMAREC.OMAERR = "Y"; /* flag as err*/
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* undo chgs thus far;*/
  TA1REC.TA1FUNC = "POST"; /* post err*/

  if (OPPREC.OPPRTNCD == 01) /* not enough available*/
    converseLib.validationFailed(166); /* not enough avail*/
  else
    if (OPPREC.OPPRTNCD == 02) /* deadlock/timeout*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* abend module*/
      converseLib.validationFailed(006); /* changes not made, enter or pfkey out*/
    else
      if (OPPREC.OPPRTNCD == 03) /* couldnt find avail recs*/
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* abend module*/
        converseLib.validationFailed(442); /* no avail recs for product*/
      else
        if (OPPREC.OPPRTNCD == 05) /* chg count errs*/
          call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* abend module*/
          converseLib.validationFailed(330); /* changes count errs, re-enter changes*/
        else
          TA1REC.TA1FUNC = "RETN"; /* abend*/
          call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* abend module*/
          COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
          XSPF4(); /* master menu*/
          exit program; /* master menu failure*/
        end
      end
    end
  end


   /* *************************************************************/
end // end OM0QSZ5

// refreshes records, avail
Function OM0QSZ6()


      /* *********************************************************/
      /* * this statement group refreshes the screen with       **/
      /* * original data for either pf19, -911, or chg count    **/
      /* *********************************************************/

  OM0QM001.XWHCD = OP1REC.XWHCD; /* orig whse*/
  OM0QM001.XDSCD = OP1REC.XDSCD; /* orig dir ship*/
  OM0Q200(); /* reads in records to start fresh*/
  OM0Q300(); /* refreshes screen*/
  set OM0QM001.OP3ONOQT[1] cursor;

   /* *************************************************************/
end // end OM0QSZ6

//*** RECORD=OM0QW01 ****
// om0qw01 is the working-storage used only by application om0q
// ;
// it contains fields to
//     format product number for display
//     subscripts for various arrays
//     first & last sizes (both actual and full range for prod)
// 
// maintenance history:
// 11-09-86  ehc  added om0qwopp orig needdte past prod deadlin
//                      om0qwumf uom standard?
//                      om0qwums uom std conv factor
//                      om0qwumn uom non-std conv factor
// 02-23-87  lcr  added om0qwfbk - found orig bulk order flag
//                                 (y/n)
// 03-06-89  lcr  increased size of op1group from 434 to 436
// 04-04-90  cdg  db changes -      op1group from 436 to 438
// 09-15-90  tjf  added om0qw1po to show 1 product order
// 06-07-91  cdg  db changes -      op1group from 455 to 426
//                                  om0qw01g from 1664 to 1644
// 10-08-91  dsm  db changes -      op1group from 426 to 427
//                                  om0qw01g from 1645 to 1645
// 03-13-92  scantr db changes -    op1group from 427 to 421
//                                  om01w01g from 1624 to 1618
// 08-12-92  dlegg  SR #774    -    added booking season work
//                                  fields.
// 10-23-92  dcaust #847       -    added pricing factor
// 12-15-92  dcaust #931       -    added save price 1 & 2
//                                  for round b-grade price up
//                                  to the nickel.
// 3-25-92   clenni #842       -    added data for the post of
//                                  db2 error problem in
//                                  reading sales pgm table
// 7-1-92    clenni #926       -    added om0qw-sub3 to om0qw01
// 2-28-94   scantr db changes -    resized price and value
//                                  fields
// 7-17-95   mmcgol Canada proj-    ws fields added for call to
//                                  sy2000
// 7-18-97   joldin ocd proj   -    added flag for tracked ocd
//                                  fields
// 04/14/98  wleong msr proj   -    added om0qw-qty-chgd-fl to
//                                  track changed qtys
// ***********************
Record OM0QW01 type basicRecord
  5 OM0QW01G OM0QW01G ; 
    10 OPNSED OPNSED ; 
    10 OPNSBD OPNSBD ; 
    10 OP2LNIST OP2LNIST ; 
    10 OM0QWMOR OM0QWMOR ; 
    10 OM0QWSCR OM0QWSCR ; 
    10 OM0QWFLG OM0QWFLG ; 
    10 OM0QWCAL OM0QWCAL ; 
    10 OM0QWCON OM0QWCON ; 
    10 OM0QWCHG OM0QWCHG ; 
    10 OM0QWCWH OM0QWCWH ; 
    10 OM0QWSPL OM0QWSPL ; 
    10 OM0QWTPC OM0QWTPC ; 
    10 OM0QWPF6 OM0QWPF6 ; 
    10 OM0QWP21 OM0QWP21 ; 
    10 OM0QWP24 OM0QWP24 ; 
    10 OM0QWREJ OM0QWREJ ; 
    10 OM0QWOAF OM0QWOAF ; 
    10 OM0QWOAO OM0QWOAO ; 
    10 OM0QWPRD OM0QWPRD ; 
      15 SY1STNBR SY1STNBR ; 
      15 OM0QWS01 OM0QWS01 ; 
      15 SY2CLRID SY2CLRID ; 
      15 OM0QWS02 OM0QWS02 ; 
      15 XDMCD XDMCD ; 
    10 XDVCD XDVCD ; 
    10 XOWCD XOWCD ; 
    10 OP-BK-MO OP-BK-MO ; 
    10 OM0QWFBK OM0QWFBK ; 
    10 OM0QWBDS OM0QWBDS ; 
    10 OM0QWOTS OM0QWOTS ; 
    10 OM0QWXOS OM0QWXOS ; 
    10 OM0QWXOM OM0QWXOM ; 
    10 OP1NORID OP1NORID ; 
    10 OP2TONOQ OP2TONOQ ; 
    10 OP2LNIVL OP2LNIVL ; 
    10 OM0QWINP OM0QWINP [40] ; 
    10 OM0QWMSG OM0QWMSG ; 
      15 OM0QWMSA OM0QWMSA ; 
      15 OM0QWMSB OM0QWMSB ; 
        20 OM0QWMSC OM0QWMSC [9] ; 
      15 OM0QWMSD OM0QWMSD ; 
    10 OM0QWLDF OM0QWLDF ; 
    10 OM0QWPAO OM0QWPAO ; 
    10 OM0QWP20 OM0QWP20 ; 
    10 OM0QWP30 OM0QWP30 ; 
    10 OM0QW-DAYS-PAST-CUTOFF OM0QW-DAYS-PAST-CUTOFF ; 
    10 OM0QW-UPDATE-ORIG-QTYS-FL OM0QW-UPDATE-ORIG-QTYS-FL ; 
    10 OM0QWSZF OM0QWSZF ; 
    10 OM0QWSZL OM0QWSZL ; 
    10 OM0QWSMF OM0QWSMF ; 
    10 OM0QWSML OM0QWSML ; 
    10 OM0QWOSF OM0QWOSF ; 
    10 OM0QWOSL OM0QWOSL ; 
    10 OM0QWSB2 OM0QWSB2 ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 OM0QWHDT OM0QWHDT ; 
    10 OM0QWPED OM0QWPED ; 
    10 OM0QWOND OM0QWOND ; 
      15 OM0QWNYM OM0QWNYM ; 
      15 * num(2) ; 
    10 OM0QWOBD OM0QWOBD ; 
      15 OM0QWBYM OM0QWBYM ; 
      15 * num(2) ; 
    10 OM0QWTM1 OM0QWTM1 ; 
      15 OM0QWTHF OM0QWTHF ; 
      15 * char(1) ; 
      15 OM0QWTMF OM0QWTMF ; 
      15 * char(1) ; 
      15 OM0QWTSF OM0QWTSF ; 
    10 OM0QWTM2 OM0QWTM2 ; 
      15 OM0QWTM3 OM0QWTM3 ; 
        20 OM0QWTHL OM0QWTHL ; 
        20 OM0QWTML OM0QWTML ; 
      15 OM0QWTSL OM0QWTSL ; 
    10 OM0QWNDT OM0QWNDT ; 
      15 OM0QWNYY OM0QWNYY ; 
      15 OM0QWNMM OM0QWNMM ; 
      15 OM0QWNDD OM0QWNDD ; 
    10 OM0QWFDA OM0QWFDA ; 
      15 XOTCD XOTCD ; 
      15 OM0QWCMM OM0QWCMM ; 
      15 OM0QWCDD OM0QWCDD ; 
      15 OM0QWHS OM0QWHS ; 
    10 OM0QWOWH OM0QWOWH ; 
    10 OM0QWCQP OM0QWCQP ; 
    10 OM0QWQDN OM0QWQDN ; 
    10 OM0QWQIC OM0QWQIC ; 
    10 OM0QWQHS OM0QWQHS ; 
    10 OM0QWTOT OM0QWTOT ; 
    10 OM0QWQTY OM0QWQTY ; 
    10 XDSWHSEF XDSWHSEF ; 
    10 OM0QWAUT OM0QWAUT ; 
    10 OM0QWSPP OM0QWSPP ; 
    10 OM0QWSTP OM0QWSTP ; 
    10 OM0QWCLP OM0QWCLP ; 
    10 OM0QWPRC OM0QWPRC ; 
    10 OM0QWPCT OM0QWPCT ; 
    10 OM0QWPRO OM0QWPRO ; 
    10 OM0QWPRN OM0QWPRN ; 
    10 OM0QWPAS OM0QWPAS ; 
    10 OM0QWPAJ OM0QWPAJ ; 
    10 OP2AUPRC OP2AUPRC ; 
    10 OM0QWPAZ OM0QWPAZ ; 
    10 OM0QWPAU OM0QWPAU ; 
    10 OM0QWPSZ OM0QWPSZ ; 
    10 OM0QWDIF OM0QWDIF ; 
    10 OP2PRCOF OP2PRCOF ; 
    10 OP2PRCVF OP2PRCVF ; 
    10 OP2GBLOF OP2GBLOF ; 
    10 OM0QWARY OM0QWARY [40] ; 
      15 OP3SZAFL OP3SZAFL ; 
      15 OP3PRCOF OP3PRCOF ; 
      15 SY5PRCUN SY5PRCUN ; 
      15 OM0QWCQT OM0QWCQT ; 
      15 OM0QWQDC OM0QWQDC ; 
    10 OM0QWUMF OM0QWUMF ; 
    10 OM0QWUMS OM0QWUMS ; 
    10 OM0QWUMN OM0QWUMN ; 
    10 XUMCONVF XUMCONVF ; 
    10 OP1GROUP OP1GROUP ; 
    10 OM0QWOQ1 OM0QWOQ1 ; 
    10 OM0QWOV1 OM0QWOV1 ; 
    10 OM0QWOV2 OM0QWOV2 ; 
    10 OM0QWAV1 OM0QWAV1 ; 
    10 OM0QWAV2 OM0QWAV2 ; 
    10 OM0QWAVV OM0QWAVV ; 
    10 OM0QWOQV OM0QWOQV ; 
    10 OM0QWOVV OM0QWOVV ; 
    10 OM0QWT1 OM0QWT1 ; 
      15 OM0QWTK1 OM0QWTK1 ; 
      15 OM0QWTK2 OM0QWTK2 ; 
      15 OM0QWTK3 OM0QWTK3 ; 
      15 OM0QWTK4 OM0QWTK4 ; 
      15 OM0QWTK5 OM0QWTK5 ; 
      15 OM0QWTK6 OM0QWTK6 ; 
    10 OM0QWNIM OM0QWNIM ; 
      15 OM0QWNI1 OM0QWNI1 ; 
      15 OM0QWNI2 OM0QWNI2 ; 
      15 OM0QWNI3 OM0QWNI3 ; 
      15 OM0QWNI4 OM0QWNI4 ; 
      15 OM0QWNI5 OM0QWNI5 ; 
    10 OM0QWZPR OM0QWZPR ; 
    10 OM0QWIPC OM0QWIPC ; 
    10 OM0QWSZP OM0QWSZP ; 
    10 OM0QWCND OM0QWCND ; 
    10 OM0QWACT OM0QWACT ; 
    10 OM0QW1PO OM0QW1PO ; 
    10 OP1BLKID OP1BLKID ; 
    10 OM0QWOTC OM0QWOTC ; 
    10 XSOCD XSOCD ; 
    10 SP1ID SP1ID ; 
    10 OM0QWEKY OM0QWEKY ; 
      15 OM0QWEK1 OM0QWEK1 ; 
      15 OM0QWEK2 OM0QWEK2 ; 
      15 OM0QWEK3 OM0QWEK3 ; 
      15 OM0QWEK4 OM0QWEK4 ; 
      15 OM0QWEK5 OM0QWEK5 ; 
      15 OM0QWEK6 OM0QWEK6 ; 
      15 OM0QWEK7 OM0QWEK7 ; 
    10 OM0QWCDC OM0QWCDC ; 
      15 OM0QWCOM OM0QWCOM ; 
      15 OM0QWFIL OM0QWFIL ; 
      15 OM0QWCOD OM0QWCOD ; 
    10 OM0QWNCD OM0QWNCD ; 
      15 OM0QWNCC OM0QWNCC ; 
      15 OM0QWNYR OM0QWNYR ; 
      15 OM0QWNMO OM0QWNMO ; 
      15 OM0QWNDA OM0QWNDA ; 
    10 OM0QWHYY OM0QWHYY ; 
    10 OM0QWBCD OM0QWBCD ; 
    10 OM0QWMDT OM0QWMDT ; 
    10 OM0QW911 OM0QW911 ; 
    10 OM0QWFRF OM0QWFRF ; 
    10 OM0QWP01 OM0QWP01 ; 
    10 OM0QW-SUB1 OM0QW-SUB1 ; 
    10 OM0QWSU1 OM0QWSU1 ; 
    10 OM0QW-CRED-CHK-DIR-SHP OM0QW-CRED-CHK-DIR-SHP ; 
    10 OM0QW-CRED-REASON-CD OM0QW-CRED-REASON-CD ; 
    10 OM0QWPDT OM0QWPDT ; 
    10 OM0QW-JC-PENNEYS-FL OM0QW-JC-PENNEYS-FL ; 
    10 OM0QW-BELKS-FL OM0QW-BELKS-FL ; 
    10 * char(3) ; 
    10 OM0QW-OP-BK-CCCYY OM0QW-OP-BK-CCCYY ; 
      15 OM0QW-OP-BK-CCC OM0QW-OP-BK-CCC ; 
      15 OM0QW-OP-BK-YY OM0QW-OP-BK-YY ; 
    10 OM0QW-OP-BK-MM OM0QW-OP-BK-MM ; 
    10 * char(1) ; 
    10 OM0QW-OP1CUNDT-CCCYYMMDD OM0QW-OP1CUNDT-CCCYYMMDD ; 
      15 OM0QW-OP1CUNDT-CCCYY OM0QW-OP1CUNDT-CCCYY ; 
      15 OM0QW-OP1CUNDT-MM OM0QW-OP1CUNDT-MM ; 
      15 OM0QW-OP1CUNDT-DD OM0QW-OP1CUNDT-DD ; 
    10 * char(3) ; 
    10 OM0QW-SESN-FND-FL OM0QW-SESN-FND-FL ; 
    10 OM0QW-SESN-SUB OM0QW-SESN-SUB ; 
    10 OM0QW-PRICING-FACTOR OM0QW-PRICING-FACTOR ; 
    10 * char(3) ; 
    10 OM0QW-PROMO-XOWCD-FL OM0QW-PROMO-XOWCD-FL ; 
    10 OM0QW-SAVE-PRICE-1 OM0QW-SAVE-PRICE-1 ; 
    10 OM0QW-SAVE-PRICE-2 OM0QW-SAVE-PRICE-2 ; 
    10 OM0QW-TABLE-KEY OM0QW-TABLE-KEY ; 
      15 OM0QW-SAY-ORDER OM0QW-SAY-ORDER ; 
      15 OM0QW-ORDER-NUM OM0QW-ORDER-NUM ; 
      15 OM0QW-SAY-PERIOD OM0QW-SAY-PERIOD ; 
      15 OM0QW-SUB-ORDER OM0QW-SUB-ORDER ; 
      15 OM0QW-SAY-SPGM OM0QW-SAY-SPGM ; 
      15 OM0QW-SPGM OM0QW-SPGM ; 
    10 OM0QW-SUB3 OM0QW-SUB3 ; 
    10 OM0QW-WSY2000-FND-FLAG OM0QW-WSY2000-FND-FLAG ; 
    10 OM0QW-WSY2000-POST-1 OM0QW-WSY2000-POST-1 ; 
      15 OM0QW-WSY2000-GPC-CD OM0QW-WSY2000-GPC-CD ; 
      15 OM0QW-WSY2000-STY-NBR OM0QW-WSY2000-STY-NBR ; 
      15 OM0QW-WSY2000-COLR-CD OM0QW-WSY2000-COLR-CD ; 
      15 OM0QW-WSY2000-DIM-CD OM0QW-WSY2000-DIM-CD ; 
      15 OM0QW-WSY2000-PROD-REG-CD OM0QW-WSY2000-PROD-REG-CD ; 
      15 OM0QW-WSY2000-RETURN-CD OM0QW-WSY2000-RETURN-CD ; 
    10 OM0QW-MAX-SEQ OM0QW-MAX-SEQ ; 
    10 OM0QW-QTY-CHGD-FL OM0QW-QTY-CHGD-FL ; 
end // end OM0QW01

//*** RECORD=OM0QW02 ****
// ***********************  ITEM TABLE  ***********************
// ;
// ;  ws version of op2rec
// ;
// ***********************
Record OM0QW02 type basicRecord
  5 OP2GROUP OP2GROUP ; 
    10 OP2KEY OP2KEY ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
      15 OP2LNINB OP2LNINB ; 
    10 OP2CPLNB OP2CPLNB ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 KUIPRDID KUIPRDID ; 
    10 XUMCD XUMCD ; 
    10 XOWCD XOWCD ; 
    10 OP2PRDSF OP2PRDSF ; 
    10 OP2SSTYN OP2SSTYN ; 
    10 OP2SCLCD OP2SCLCD ; 
    10 OP2SDMCD OP2SDMCD ; 
    10 OP2SUBQT OP2SUBQT ; 
    10 OPRBNOID OPRBNOID ; 
    10 OP2TDRWQ OP2TDRWQ ; 
    10 OP2CGPCD OP2CGPCD ; 
    10 OP2KSTYF OP2KSTYF ; 
    10 OP2GTSZF OP2GTSZF ; 
    10 XEGCD XEGCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XBK-BK-SESN-CD XBK-BK-SESN-CD ; 
    10 OP-BK-YR OP-BK-YR ; 
    10 OP-BK-MO OP-BK-MO ; 
    10 OP2MSCDP OP2MSCDP ; 
    10 OP2PGRPF OP2PGRPF ; 
    10 OP2FSTFL OP2FSTFL ; 
    10 XQACD XQACD ; 
    10 OP2LNIST OP2LNIST ; 
    10 OP2LNSDT OP2LNSDT ; 
    10 XBRCD XBRCD ; 
    10 XDNCD XDNCD ; 
    10 XRSCD XRSCD ; 
    10 XAFCD XAFCD ; 
    10 OP1ALFDT OP1ALFDT ; 
    10 OP1BOFL OP1BOFL ; 
    10 XHDCD XHDCD [5] ; 
    10 XHDCHG XHDCHG [5] ; 
    10 OP2HCHGO OP2HCHGO [5] ; 
    10 PWRLBCD PWRLBCD [2] ; 
    10 OP-CUST-LABL-PRTFL OP-CUST-LABL-PRTFL ; 
    10 XOMCD XOMCD [4] ; 
    10 XMTCD XMTCD [4] ; 
    10 OP2OMQTY OP2OMQTY [4] ; 
    10 OP2OMDT OP2OMDT [4] ; 
    10 OP1MTREP OP1MTREP [4] ; 
    10 OP2GBLOF OP2GBLOF ; 
    10 OP2PRCOF OP2PRCOF ; 
    10 OP2PRCVF OP2PRCVF ; 
    10 OP2TOBKQ OP2TOBKQ ; 
    10 OP2TORGQ OP2TORGQ ; 
    10 OP2TONOQ OP2TONOQ ; 
    10 OP2TALCQ OP2TALCQ ; 
    10 OP2TOHRQ OP2TOHRQ ; 
    10 OP2TWIPQ OP2TWIPQ ; 
    10 OP2TSHPQ OP2TSHPQ ; 
    10 OP2TCNLQ OP2TCNLQ ; 
    10 OP2AUPRC OP2AUPRC ; 
    10 OP2LNIVL OP2LNIVL ; 
    10 OP2NSIZE OP2NSIZE ; 
    10 XDZ-DATA-DIST-CD XDZ-DATA-DIST-CD ; 
    10 ZZ-CS400-CHNG-DT ZZ-CS400-CHNG-DT ; 
    10 ZZ-CS400-CHNG-HHMM ZZ-CS400-CHNG-HHMM ; 
    10 ZZ-DS400-CHNG-DT ZZ-DS400-CHNG-DT ; 
    10 ZZ-DS400-CHNG-HHMM ZZ-DS400-CHNG-HHMM ; 
    10 ZZZSZCHG ZZZSZCHG ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end OM0QW02

//*** RECORD=OM0QW03 ****
// ***********************  ITEM TABLE  ***********************
// ;
// ;  ws version of op3rec
// ;
// ***********************
Record OM0QW03 type basicRecord
  5 OP3GROUP OP3GROUP ; 
    10 OP2KEY OP2KEY ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
      15 OP2LNINB OP2LNINB ; 
    10 OP2CPLNB OP2CPLNB ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 KUIPRDID KUIPRDID ; 
    10 XUMCD XUMCD ; 
    10 XOWCD XOWCD ; 
    10 OP2PRDSF OP2PRDSF ; 
    10 OP2SSTYN OP2SSTYN ; 
    10 OP2SCLCD OP2SCLCD ; 
    10 OP2SDMCD OP2SDMCD ; 
    10 OP2SUBQT OP2SUBQT ; 
    10 OPRBNOID OPRBNOID ; 
    10 OP2TDRWQ OP2TDRWQ ; 
    10 OP2CGPCD OP2CGPCD ; 
    10 OP2KSTYF OP2KSTYF ; 
    10 OP2GTSZF OP2GTSZF ; 
    10 XEGCD XEGCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XBK-BK-SESN-CD XBK-BK-SESN-CD ; 
    10 OP-BK-YR OP-BK-YR ; 
    10 OP-BK-MO OP-BK-MO ; 
    10 OP2MSCDP OP2MSCDP ; 
    10 OP2PGRPF OP2PGRPF ; 
    10 OP2FSTFL OP2FSTFL ; 
    10 XQACD XQACD ; 
    10 OP2LNIST OP2LNIST ; 
    10 OP2LNSDT OP2LNSDT ; 
    10 XBRCD XBRCD ; 
    10 XDNCD XDNCD ; 
    10 XRSCD XRSCD ; 
    10 XAFCD XAFCD ; 
    10 OP1ALFDT OP1ALFDT ; 
    10 OP1BOFL OP1BOFL ; 
    10 XHDCD XHDCD [5] ; 
    10 XHDCHG XHDCHG [5] ; 
    10 OP2HCHGO OP2HCHGO [5] ; 
    10 PWRLBCD PWRLBCD [2] ; 
    10 OP-CUST-LABL-PRTFL OP-CUST-LABL-PRTFL ; 
    10 XOMCD XOMCD [4] ; 
    10 XMTCD XMTCD [4] ; 
    10 OP2OMQTY OP2OMQTY [4] ; 
    10 OP2OMDT OP2OMDT [4] ; 
    10 OP1MTREP OP1MTREP [4] ; 
    10 OP2GBLOF OP2GBLOF ; 
    10 OP2PRCOF OP2PRCOF ; 
    10 OP2PRCVF OP2PRCVF ; 
    10 OP2TOBKQ OP2TOBKQ ; 
    10 OP2TORGQ OP2TORGQ ; 
    10 OP2TONOQ OP2TONOQ ; 
    10 OP2TALCQ OP2TALCQ ; 
    10 OP2TOHRQ OP2TOHRQ ; 
    10 OP2TWIPQ OP2TWIPQ ; 
    10 OP2TSHPQ OP2TSHPQ ; 
    10 OP2TCNLQ OP2TCNLQ ; 
    10 OP2AUPRC OP2AUPRC ; 
    10 OP2LNIVL OP2LNIVL ; 
    10 OP2NSIZE OP2NSIZE ; 
    10 ZZZSZCHG ZZZSZCHG ; 
    10 XDZ-DATA-DIST-CD XDZ-DATA-DIST-CD ; 
    10 ZZ-CS400-CHNG-DT ZZ-CS400-CHNG-DT ; 
    10 ZZ-CS400-CHNG-HHMM ZZ-CS400-CHNG-HHMM ; 
    10 ZZ-DS400-CHNG-DT ZZ-DS400-CHNG-DT ; 
    10 ZZ-DS400-CHNG-HHMM ZZ-DS400-CHNG-HHMM ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
    10 OP3SZARY OP3SZARY [40] ; 
      15 OP3SZAFL OP3SZAFL ; 
      15 OP3PRCOF OP3PRCOF ; 
      15 SY5PRCUN SY5PRCUN ; 
      15 OP3ORGQT OP3ORGQT ; 
      15 OP3ONOQT OP3ONOQT ; 
      15 OP3ALQT OP3ALQT ; 
      15 OP3OHRQT OP3OHRQT ; 
      15 OP3WPRQT OP3WPRQT ; 
      15 OP3SHPQT OP3SHPQT ; 
      15 OP3CNLQT OP3CNLQT ; 
end // end OM0QW03

//*** RECORD=OM0QW04 ****
// *******************  ORDER HEADER TABLE  *******************
// 
// ;  ws version of op1rec
// ;
// ;  04-04-90  cgrice  dbchanges - renamed op1blkcd to xbccd,
// ;                    sp3dpct to sp6mdisc, and added xbccd
// ;  06-07-91  craine  dbchanges - see op1 rec prologue for
// ;                    details. op1group chg from 455 to 425.
// ;  10-08-91  dmeier  dbchanges - see op1 rec prologue for
// ;                    details. op1group chg from 426 to 427.
// ;  03-13-91  scantr  dbchanges - see op1rec prologue for
// ;                    details.  op1group chg from 427 to 421.
// ;  02-28-94  scantr  dbchanges
// ;
// ***********************
Record OM0QW04 type basicRecord
  5 OP1GROUP OP1GROUP ; 
    10 OP1KEY OP1KEY ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
    10 OB1XREFN OB1XREFN ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 XGPCD XGPCD ; 
    10 OP1CMPNB OP1CMPNB ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1PORMF OP1PORMF ; 
    10 OP1ORDBY OP1ORDBY ; 
    10 OP1TBREP OP1TBREP ; 
    10 XDVCD XDVCD ; 
    10 XBCCD XBCCD ; 
    10 XSOCD XSOCD ; 
    10 XOTCD XOTCD ; 
    10 XOBCD XOBCD ; 
    10 XOCCD XOCCD ; 
    10 SP1ID SP1ID ; 
    10 SP6MDISC SP6MDISC ; 
    10 XWHCD XWHCD ; 
    10 OP1OWHMF OP1OWHMF ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 OP-ORIG-NEED-DT OP-ORIG-NEED-DT ; 
    10 XOSCD XOSCD ; 
    10 OP1OSADT OP1OSADT ; 
    10 OP1TDOF OP1TDOF ; 
    10 XTDPCT XTDPCT ; 
    10 OP1TDFCP OP1TDFCP ; 
    10 OP1TDBKP OP1TDBKP ; 
    10 OP1PTOF OP1PTOF ; 
    10 XPTCD XPTCD ; 
    10 OP1AAOF OP1AAOF ; 
    10 XAAPCT XAAPCT ; 
    10 OP1AAFCP OP1AAFCP ; 
    10 OP1AABKP OP1AABKP ; 
    10 OP1COPOF OP1COPOF ; 
    10 XCPPCT XCPPCT ; 
    10 OP1DFAOF OP1DFAOF ; 
    10 XDAPCT XDAPCT ; 
    10 XDSCD XDSCD ; 
    10 OP-DIRSHP-DSCT-PCT OP-DIRSHP-DSCT-PCT ; 
    10 SM1AGYID SM1AGYID ; 
    10 SM4REPID SM4REPID ; 
    10 OP-SREP-OVRD-FL OP-SREP-OVRD-FL ; 
    10 OP1SWORD OP1SWORD ; 
    10 XBDCD XBDCD ; 
    10 OP1BLKID OP1BLKID ; 
    10 OP1NDRAW OP1NDRAW ; 
    10 OP1COGID OP1COGID ; 
    10 OP1BLAID OP1BLAID ; 
    10 OP1SGPAO OP1SGPAO ; 
    10 OP1SHAID OP1SHAID ; 
    10 OP1ODSKF OP1ODSKF ; 
    10 OP1ENTDT OP1ENTDT ; 
    10 OP1ORCDT OP1ORCDT ; 
    10 OP1ENREP OP1ENREP ; 
    10 OP1CALDT OP1CALDT ; 
    10 OP-SND-CNFM-FL OP-SND-CNFM-FL ; 
    10 OP1DSBDT OP1DSBDT ; 
    10 OP1DSADT OP1DSADT ; 
    10 DN-PROD-INTR-DT DN-PROD-INTR-DT ; 
    10 OP1NTMAL OP1NTMAL ; 
    10 OP1ALSEQ OP1ALSEQ ; 
    10 OP1OALSQ OP1OALSQ ; 
    10 OP1LALDT OP1LALDT ; 
    10 OP1DABDT OP1DABDT ; 
    10 OP1DRBDT OP1DRBDT ; 
    10 XACCD XACCD ; 
    10 OP1ASGCO OP1ASGCO ; 
    10 XAHCD XAHCD ; 
    10 OP1ALHDT OP1ALHDT ; 
    10 OP1PAHCD OP1PAHCD ; 
    10 OP1ALRDT OP1ALRDT ; 
    10 XAFCD XAFCD ; 
    10 OP1ALFDT OP1ALFDT ; 
    10 KUNMAPCT KUNMAPCT ; 
    10 OP1RSVF OP1RSVF ; 
    10 OP1WIPIN OP1WIPIN ; 
    10 OP1EXPDF OP1EXPDF ; 
    10 KUNNOSFL KUNNOSFL ; 
    10 OP1ASHDF OP1ASHDF ; 
    10 OP1ACNLF OP1ACNLF ; 
    10 OP1SMSCF OP1SMSCF ; 
    10 OP1TIERF OP1TIERF ; 
    10 OP1TLVLN OP1TLVLN ; 
    10 OP1CPODT OP1CPODT ; 
    10 OP1BOFL OP1BOFL ; 
    10 XCHCD XCHCD [3] ; 
    10 XCSCD XCSCD ; 
    10 OP1CSADT OP1CSADT ; 
    10 OP1CSATM OP1CSATM ; 
    10 OP1CRLMP OP1CRLMP ; 
    10 OP1CRLMR OP1CRLMR ; 
    10 OP1PCSCD OP1PCSCD ; 
    10 OP1PCSDT OP1PCSDT ; 
    10 OP1PCSTM OP1PCSTM ; 
    10 OP1CCKOQ OP1CCKOQ ; 
    10 OP1CKAMT OP1CKAMT ; 
    10 OP1DCHLD OP1DCHLD ; 
    10 KUCVNDFL KUCVNDFL ; 
    10 OP1VAUDT OP1VAUDT ; 
    10 OP1VAUNB OP1VAUNB ; 
    10 OP-CALL-CR-CK-FL OP-CALL-CR-CK-FL ; 
    10 OP-LST-CR-CK-CO-ID OP-LST-CR-CK-CO-ID ; 
    10 XPACD XPACD ; 
    10 KUFMIXBL KUFMIXBL ; 
    10 KUCUNTCS KUCUNTCS ; 
    10 XPKCD XPKCD ; 
    10 XPPCD XPPCD ; 
    10 TF1CARCD TF1CARCD ; 
    10 OP1SSHPO OP1SSHPO ; 
    10 OP1ECADT OP1ECADT ; 
    10 OP1ECANM OP1ECANM ; 
    10 OP1IVADT OP1IVADT ; 
    10 OP1PCNDT OP1PCNDT ; 
    10 OP1CFMDT OP1CFMDT ; 
    10 OP1IPIND OP1IPIND ; 
    10 OP1FTIND OP1FTIND ; 
    10 OP1SHAMT OP1SHAMT ; 
    10 OP1IFAMT OP1IFAMT ; 
    10 XMDCD XMDCD ; 
    10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
    10 OP1OVALU OP1OVALU ; 
    10 OP1OTUNT OP1OTUNT ; 
    10 OP1ALCQF OP1ALCQF ; 
    10 OP1RSVQF OP1RSVQF ; 
    10 OP1SHPQF OP1SHPQF ; 
    10 OP1OSRID OP1OSRID ; 
    10 OP1ORADT OP1ORADT ; 
    10 XOMCD XOMCD ; 
    10 OP1OMDT OP1OMDT ; 
    10 OP1MTREP OP1MTREP ; 
    10 OP1SPLBF OP1SPLBF ; 
    10 OP1SPINF OP1SPINF ; 
    10 OP1SPHDF OP1SPHDF ; 
    10 OP1OMCMF OP1OMCMF ; 
    10 OP11TMSF OP11TMSF ; 
    10 OP11TMBF OP11TMBF ; 
    10 XID-IVC-DIST-CD XID-IVC-DIST-CD ; 
    10 DN-ORD-DIST-IND DN-ORD-DIST-IND ; 
    10 XDZ-DATA-DIST-CD XDZ-DATA-DIST-CD ; 
    10 ZZ-CS400-CHNG-DT ZZ-CS400-CHNG-DT ; 
    10 ZZ-CS400-CHNG-HHMM ZZ-CS400-CHNG-HHMM ; 
    10 ZZ-DS400-CHNG-DT ZZ-DS400-CHNG-DT ; 
    10 ZZ-DS400-CHNG-HHMM ZZ-DS400-CHNG-HHMM ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end OM0QW04

// Belk's Customer Flag
DataItem OM0QW-BELKS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// credit check dir ship ord flag
DataItem OM0QW-CRED-CHK-DIR-SHP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pass to credit reason code
DataItem OM0QW-CRED-REASON-CD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of days past cutoff dt
DataItem OM0QW-DAYS-PAST-CUTOFF decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// JC PENNEYS CUSTOMER FLAG
DataItem OM0QW-JC-PENNEYS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0QW-MAX-SEQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Booking Year CCC
DataItem OM0QW-OP-BK-CCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Booking Year CCCYY - Reformat
DataItem OM0QW-OP-BK-CCCYY num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Booking Month (2 digit)
DataItem OM0QW-OP-BK-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Booking Year YY
DataItem OM0QW-OP-BK-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0QW-OP1CUNDT-CCCYY num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OP Cust Need Dt CCCYYMMDD
DataItem OM0QW-OP1CUNDT-CCCYYMMDD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OP Cust Need Dt DD
DataItem OM0QW-OP1CUNDT-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0QW-OP1CUNDT-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// has order number for post
DataItem OM0QW-ORDER-NUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// add 1 dollar to price per unit
DataItem OM0QW-PRICING-FACTOR num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PROMO OWNER GROUP FLAG
DataItem OM0QW-PROMO-XOWCD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// qty chaged flag
DataItem OM0QW-QTY-CHGD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// for round b-grade price
DataItem OM0QW-SAVE-PRICE-1 decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// for round b-grade price
DataItem OM0QW-SAVE-PRICE-2 decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// literal
DataItem OM0QW-SAY-ORDER char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal
DataItem OM0QW-SAY-PERIOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal
DataItem OM0QW-SAY-SPGM char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0QW-SESN-FND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0QW-SESN-SUB num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// the sales pgm for the post
DataItem OM0QW-SPGM char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sub order number
DataItem OM0QW-SUB-ORDER num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSGCD SUBSCRIPT
DataItem OM0QW-SUB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subscript bucket
DataItem OM0QW-SUB3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error key for the post
DataItem OM0QW-TABLE-KEY char(33)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update original quantities
DataItem OM0QW-UPDATE-ORIG-QTYS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0QW-WSY2000-COLR-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0QW-WSY2000-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// call to sy2000 found flag
DataItem OM0QW-WSY2000-FND-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0QW-WSY2000-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// call to sy2000 display area
DataItem OM0QW-WSY2000-POST-1 char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0QW-WSY2000-PROD-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0QW-WSY2000-RETURN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0QW-WSY2000-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// omoq w/s
DataItem OM0QW01G char(1877)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// one product order (y/n)
DataItem OM0QW1PO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// -911 from prepack flag
DataItem OM0QW911 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minimum one active size y/n
DataItem OM0QWACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size array occurs***********
DataItem OM0QWARY char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// need price ovrd authzatn (Y/n
DataItem OM0QWAUT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// credit save alloc temp
DataItem OM0QWAV1 decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// credit save alloc value
DataItem OM0QWAV2 decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// credit alloc value variance
DataItem OM0QWAVV decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// binary hold year
DataItem OM0QWBCD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subscript for bulk/draw(1-x)
DataItem OM0QWBDS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yyyymm
DataItem OM0QWBYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// called availability
DataItem OM0QWCAL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// COND CODE WORK AREA
DataItem OM0QWCDC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dd
DataItem OM0QWCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// changed data on review (y/n)
DataItem OM0QWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// default price by style,color
DataItem OM0QWCLP decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mm
DataItem OM0QWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// chg need date flag y/n
DataItem OM0QWCND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// COND CODE DAY
DataItem OM0QWCOD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// COND CODE MONTH
DataItem OM0QWCOM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// converse the screen
DataItem OM0QWCON char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// changed qty on prodt(y/n)
DataItem OM0QWCQP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// net  quantity change
DataItem OM0QWCQT decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// changed warehouse   (y/n)
DataItem OM0QWCWH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// difference
DataItem OM0QWDIF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error diag part char
DataItem OM0QWEK1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error diag cust ord id
DataItem OM0QWEK2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error diag nike ord id
DataItem OM0QWEK3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error diag company id
DataItem OM0QWEK4 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error diag store id
DataItem OM0QWEK5 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error diag dept id
DataItem OM0QWEK6 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error diag gpc
DataItem OM0QWEK7 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error diag key
DataItem OM0QWEKY char(28)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found orig bulk order (y/n)
DataItem OM0QWFBK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// opfrec data
DataItem OM0QWFDA char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//  COND CODE DELIMITER
DataItem OM0QWFIL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found error or entry
DataItem OM0QWFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// freeze availability flag
DataItem OM0QWFRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold area for need date
DataItem OM0QWHDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// warehouse
DataItem OM0QWHS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HOLD YEAR
DataItem OM0QWHYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// qty in-process=alloc+reserved
DataItem OM0QWINP decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product value * iverec percent
DataItem OM0QWIPC decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// late draw flag (y/n)
DataItem OM0QWLDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust-need-dt for blank bulks
DataItem OM0QWMDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// more sizes? (y/n)
DataItem OM0QWMOR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//        -start of message
DataItem OM0QWMSA char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//        variable field
DataItem OM0QWMSB num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//    (each digit-zero suppress)
DataItem OM0QWMSC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//        -end of message
DataItem OM0QWMSD char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message with constants
DataItem OM0QWMSG char(59)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NUMERIC COND CODE CENTURY
DataItem OM0QWNCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REFORMAT COND CODE
DataItem OM0QWNCD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NUMERIC COND CODE DAY
DataItem OM0QWNDA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date for opfrec dd
DataItem OM0QWNDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date for opfrec
DataItem OM0QWNDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xgpcd
DataItem OM0QWNI1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum xob
DataItem OM0QWNI2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zarcd
DataItem OM0QWNI3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// kuccoid
DataItem OM0QWNI4 num(12)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// zfccd
DataItem OM0QWNI5 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nimrec error diag key
DataItem OM0QWNIM char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date for opfrec mm
DataItem OM0QWNMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NUMERIC COND CODE MONTH
DataItem OM0QWNMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yyyymm
DataItem OM0QWNYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NUMERIC COND CODE YEAR
DataItem OM0QWNYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date for opfrec yyyy
DataItem OM0QWNYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ord adj nbr req'd (y/n)
DataItem OM0QWOAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ord adj nbr ovride fl (y/n)
DataItem OM0QWOAO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ord adj buy date
DataItem OM0QWOBD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ord adj need date
DataItem OM0QWOND num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// credit save on-ord units
DataItem OM0QWOQ1 decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// credit on-order qty variance
DataItem OM0QWOQV decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first size ordered
DataItem OM0QWOSF smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last  size ordered
DataItem OM0QWOSL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save order type code
DataItem OM0QWOTC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// subscript for order type1-x)
DataItem OM0QWOTS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// credit save on-ord value
DataItem OM0QWOV1 decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// credit on-ord value temp
DataItem OM0QWOV2 decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// credit on-order value variance
DataItem OM0QWOVV decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xwhcd
DataItem OM0QWOWH char(2)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// key to davail.vblnkp01
DataItem OM0QWP01 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 20days past prod deadline flg
DataItem OM0QWP20 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pf21 full size range (y/n)
DataItem OM0QWP21 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pf24 reject prodct   (y/n)
DataItem OM0QWP24 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 30days past prod deadline flg
DataItem OM0QWP30 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// edt prc adj>ord/tp vary%(y/n)
DataItem OM0QWPAJ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// produc.deadline add-on (y/n)
DataItem OM0QWPAO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// edt prc4all>ord/tp vary%(y/n)
DataItem OM0QWPAS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// price adjustment
DataItem OM0QWPAU decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// price for all sizes
DataItem OM0QWPAZ decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// price variance percent
DataItem OM0QWPCT decimal(5,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need date + 60 days
DataItem OM0QWPDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prod price effective date
DataItem OM0QWPED int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pf6 chg size price   (y/n)
DataItem OM0QWPF6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold 1st prd pric,chk vary fl
DataItem OM0QWPRC decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product number display area**
DataItem OM0QWPRD char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new price to chk prc variance
DataItem OM0QWPRN decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// old price to chk prc variance
DataItem OM0QWPRO decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// edt siz prc>ord/tp vary%(y/n)
DataItem OM0QWPSZ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// qty decrease on prod, by size
DataItem OM0QWQDC decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// qty reduced (y/n)
DataItem OM0QWQDN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// quantity history chg on prodt
DataItem OM0QWQHS decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// qty increased (y/n)
DataItem OM0QWQIC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp quantity
DataItem OM0QWQTY decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// db2 bad-reject product (y/n)
DataItem OM0QWREJ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// separator 01
DataItem OM0QWS01 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// separator 02
DataItem OM0QWS02 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   screen 2 start record(1-40)
DataItem OM0QWSB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// on screen 1 or 2 (1/2)
DataItem OM0QWSCR num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first size for map display
DataItem OM0QWSMF smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last  size for map display
DataItem OM0QWSML smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// suborder split (y/n)
DataItem OM0QWSPL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// have sales pgm pricing (y/n)
DataItem OM0QWSPP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// default price by style
DataItem OM0QWSTP decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// key to davail.vblnkp01
DataItem OM0QWSU1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product first size
DataItem OM0QWSZF smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product last size
DataItem OM0QWSZL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// default price by size
DataItem OM0QWSZP decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group item diagnostics
DataItem OM0QWT1 char(36)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hh
DataItem OM0QWTHF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hh
DataItem OM0QWTHL num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// diag field 1
DataItem OM0QWTK1 num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// diag field 2
DataItem OM0QWTK2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// diag field 3
DataItem OM0QWTK3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// diag field 4
DataItem OM0QWTK4 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag field 5
DataItem OM0QWTK5 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag field 6
DataItem OM0QWTK6 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hh:mm:ss
DataItem OM0QWTM1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hhmmss
DataItem OM0QWTM2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hhmm
DataItem OM0QWTM3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mm
DataItem OM0QWTMF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// mm
DataItem OM0QWTML num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total inc on prodt
DataItem OM0QWTOT decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tell production cntrl (y/n)
DataItem OM0QWTPC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ss
DataItem OM0QWTSF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ss
DataItem OM0QWTSL num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// unit of measure is standard?
DataItem OM0QWUMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// uom non-std conversion factor
DataItem OM0QWUMN decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// uom std conversion factor
DataItem OM0QWUMS decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subscript for maint code
DataItem OM0QWXOM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subscript for line item stat
DataItem OM0QWXOS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// force zero price flag
DataItem OM0QWZPR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

