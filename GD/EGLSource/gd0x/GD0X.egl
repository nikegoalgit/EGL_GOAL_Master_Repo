package gd0x;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import da.common.*;
import gd.common.*;
import ta.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=GD0X ****
// NIKE TABLE HANDLER - TABLE MAINTENANCE - BASE ORDER TYPE
//                                          TRANSLATION
// OVERVIEW: This application is used to maintain the XVOTBL
//           table
// 
// DB2 TABLE: DCORP.VXVO0001
// CSP TABLE: XVOTBL
// 
// DATE CREATED: 04/01/98
//       AUTHOR: Leslie Rainey
// 
// MAINTENANCE HISTORY:
// 
//     date     by whom     overview of changes made
//   --------  ----------  -----------------------------------
//   04-01-97   LRAINE     NEW APPLICATION
//   07-18-97   sjohn6     blank out abrv fields upon entry
//   02-18-98   Echan      Highlight all key fields in
//                         GD0XP69-EDIT-KEY
//   04-01-98   JBUCH1     Modified to DB2 only application.
//   08-30-2000 vcowan     chg: add xgp & xso field to the
//                              selections screen option ...
//                         ref: gd0x-open-xvo, gd0x-fetch-xvo,
//                              gd0x-close-xvo
//                         da1150 modified for same reasons
// *********************
Program GD0X type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "DA00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  DAWREC DAWREC; // record
  ERRSQLCA ERRSQLCA; // record
  GD0XW01 GD0XW01; // record
  GD0XW02 GD0XW02; // record
  GD3REC GD3REC; // record
  GDWREC GDWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VDATRN01 VDATRN01; // record
  VXVO0001 VXVO0001; // record
  WDA1140 WDA1140; // record
  XSDAW01 XSDAW01; // record
  XSDAW02 XSDAW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XGLTBL {deleteAfterUse = yes}; // table
  use XSOTBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XBCTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use GD0XM.GD0XM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    GD0XP00-DRIVER: GD0XP00-DRIVER();
    exit program;
  end // end main
end // end GD0X

// Close cursor based on search
Function GD0X-CLOSE-XVO()
  /* **************************************************************/
  /* Determine and close the correct XVO cursor*/
  /* **************************************************************/
  /* Use the C3 cursor if no   search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("C3", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the C4 cursor if XBC  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("C4", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the C5 cursor if  XDV   search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("C5", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the C6 cursor if  XDV and XBC  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("C6", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the C7 cursor if XOB  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("C7", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the C8 cursor if XOB and XBC   search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("C8", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the C9 cursor if XOB and XDV  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("C9", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the CA cursor if XOB, XDV and XBC  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("CA", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the CB cursor if XOB, XDV, XBC, XPG, and XS0  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("CB", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the CC cursor if XOB, XDV, XBC and XS0  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("CC", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the CD cursor if XOB, XDV, XBC and XPG  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("CD", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the CE cursor if XOB, XDV, XPG, and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("CE", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the CF cursor if XOB, XDV and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("CF", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the CG cursor if XOB, XDV and XPG  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("CG", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the CH cursor if XOB, XBC, XPG, and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("CH", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the CI cursor if XOB, XBC and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("CI", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the CJ cursor if XOB, XBC and XPG  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("CJ", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the CK cursor if XOB, XPG and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("CK", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the CL cursor if XOB and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("CL", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the CM cursor if XOB and XPG   search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("CM", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the CN cursor if XDV, XBC, XPG, and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("CN", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the CO cursor if XDV, XBC and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("CO", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the CP cursor if XDV, XBC and XPG  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("CP", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the CQ cursor if XDV, XPG, and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("CQ", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the CR cursor if XDV and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("CR", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the CS cursor if XDV and XPG  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("CS", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the CT cursor if XBC, XPG, and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("CT", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the CU cursor if XBC and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("CU", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the CV cursor if XBC and XPG  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("CV", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the CW cursor if XPG, and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("CW", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the CX cursor if XSO  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("CX", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the CY cursor if XPG  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("CY", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    DAWREC.DAW-EDIT-ERROR-FL = "Y";
    TA1REC.TA1DBASE = "DMIROR  "; /* data base name*/
    TA1REC.TA1TBLVU = "VXVO0001"; /* table view*/
    TA1REC.TA1LOCAT[1] = "CLOSE XVO";
    TA1REC.TA1LOCAT[2] = "VXVO0001";
    XSDAS-DB2-ABEND-RB();
  end


end // end GD0X-CLOSE-XVO

// Fetch cursor based on search
Function GD0X-FETCH-XVO()
  /* **************************************************************/
  /* Determine and FETCH the correct XVO cursor*/
  /* **************************************************************/
  /* Use the N3 cursor if no   search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("N3", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the N4 cursor if XBC  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("N4", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the N5 cursor if  XDV   search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("N5", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the N6 cursor if  XDV and XBC  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("N6", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the N7 cursor if XOB  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("N7", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the N8 cursor if XOB and XBC   search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("N8", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the N9 cursor if XOB and XDV  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("N9", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the NA cursor if XOB, XDV and XBC  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("NA", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the NB cursor if XOB, XDV, XBC, XPG, and XS0  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("NB", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the NC cursor if XOB, XDV, XBC and XS0  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("NC", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the ND cursor if XOB, XDV, XBC and XPG  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("ND", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the NE cursor if XOB, XDV, XPG, and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("NE", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the NF cursor if XOB, XDV and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("NF", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the NG cursor if XOB, XDV and XPG  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("NG", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the NH cursor if XOB, XBC, XPG, and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("NH", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the NI cursor if XOB, XBC and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("NI", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the NJ cursor if XOB, XBC and XPG  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("NJ", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the NK cursor if XOB, XPG and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("NK", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the NL cursor if XOB and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("NL", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the NM cursor if XOB and XPG   search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("NM", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the NN cursor if XDV, XBC, XPG, and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("NN", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the NO cursor if XDV, XBC and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("NO", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the NP cursor if XDV, XBC and XPG  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("NP", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the NQ cursor if XDV, XPG, and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("NQ", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the NR cursor if XDV and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("NR", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the NS cursor if XDV and XPG  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("NS", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the NT cursor if XBC, XPG, and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("NT", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the NU cursor if XBC and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("NU", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the NV cursor if XBC and XPG  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("NV", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the NW cursor if XPG, and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("NW", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the NX cursor if XSO  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("NX", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the NY cursor if XPG  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("NY", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/

    GD0XW02.DAW-RECORD-TYPE[DAW-ROW-NBR] = "TBL ";
    GD0XW02.XOBCD[DAW-ROW-NBR] = VXVO0001.XOBCD;
    GD0XW02.XDVCD[DAW-ROW-NBR] = VXVO0001.XDVCD;
    GD0XW02.XBCCD[DAW-ROW-NBR] = VXVO0001.XBCCD;
    GD0XW02.XGPCD[DAW-ROW-NBR] = VXVO0001.XGPCD;
    GD0XW02.XSOCD[DAW-ROW-NBR] = VXVO0001.XSOCD;
    GD0XW02.XXXSTAT[DAW-ROW-NBR] = VXVO0001.XXXSTAT;
    GD0XW02.ZZZCHGDT[DAW-ROW-NBR] = VXVO0001.ZZZCHGDT;
    GD0XW02.XPC-PROD-CAT-CD[DAW-ROW-NBR] = VXVO0001.XPC-PROD-CAT-CD;
    GD0XW02.XOTCD[DAW-ROW-NBR] = VXVO0001.XOTCD;

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* or not found*/
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* database busy*/
        DAWREC.DAW-EDIT-ERROR-FL = "Y";
        DAWREC.DAW-INFO-MESSAGE = "DATABASE BUSY - PLEASE TRY AGAIN ";
      else
        DAWREC.DAW-EDIT-ERROR-FL = "Y";

        TA1REC.TA1DBASE = "DMIROR  "; /* data base name*/
        TA1REC.TA1TBLVU = "VXVO0001"; /* table view*/
        TA1REC.TA1LOCAT[1] = "FETCH   ";
        XSDAS-DB2-ABEND-RB();
      end
    end
  end

end // end GD0X-FETCH-XVO

// Open cursor based on search
Function GD0X-OPEN-XVO()
  /* **************************************************************/
  /* Determine and open the correct XVO cursor*/
  /* **************************************************************/
  set SQLCA empty;
  set VXVO0001 empty;
  VXVO0001.XOBCD = GD0XM001.XOB-SRCH;
  VXVO0001.XDVCD = GD0XM001.XDV-SRCH;
  VXVO0001.XBCCD = GD0XM001.XBC-SRCH;
  VXVO0001.XGPCD = GD0XM001.XGP-SRCH;
  VXVO0001.XSOCD = GD0XM001.XSO-SRCH;


  /* Use the S3 cursor if no   search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("S3", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the S4 cursor if XBC  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("S4", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the S5 cursor if  XDV   search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("S5", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the S6 cursor if  XDV and XBC  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("S6", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the S7 cursor if XOB  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("S7", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the S8 cursor if XOB and XBC   search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("S8", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the S9 cursor if XOB and XDV  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("S9", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the SA cursor if XOB, XDV and XBC  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("SA", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the SB cursor if XOB, XDV, XBC, XPG, and XS0  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("SB", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the SC cursor if XOB, XDV, XBC and XS0  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("SC", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the SD cursor if XOB, XDV, XBC and XPG  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("SD", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the SE cursor if XOB, XDV, XPG, and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("SE", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the SF cursor if XOB, XDV and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("SF", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the SG cursor if XOB, XDV and XPG  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("SG", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the SH cursor if XOB, XBC, XPG, and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("SH", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the SI cursor if XOB, XBC and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("SI", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the SJ cursor if XOB, XBC and XPG  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("SJ", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the SK cursor if XOB, XPG and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("SK", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the SL cursor if XOB and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("SL", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the SM cursor if XOB and XPG   search criteria*/
  if (GD0XM001.XOB-SRCH > " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("SM", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the SN cursor if XDV, XBC, XPG, and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("SN", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the SO cursor if XDV, XBC and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("SO", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the SP cursor if XDV, XBC and XPG  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("SP", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the SQ cursor if XDV, XPG, and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("SQ", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the SR cursor if XDV and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("SR", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the SS cursor if XDV and XPG  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH > " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("SS", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the ST cursor if XBC, XPG, and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("ST", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the SU cursor if XBC and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("SU", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the SV cursor if XBC and XPG  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH > " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("SV", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the SW cursor if XPG, and XSO  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("SW", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the SX cursor if XSO  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH == " "
   && GD0XM001.XSO-SRCH > " ")
    call "DA1150" ("SX", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  /* Use the SY cursor if XPG  search criteria*/
  if (GD0XM001.XOB-SRCH == " " && GD0XM001.XDV-SRCH == " "
   && GD0XM001.XBC-SRCH == " " && GD0XM001.XGP-SRCH > " "
   && GD0XM001.XSO-SRCH == " ")
    call "DA1150" ("SY", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  end

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* database busy*/
      DAWREC.DAW-EDIT-ERROR-FL = "Y";
      DAWREC.DAW-INFO-MESSAGE = "DATABASE BUSY - PLEASE TRY AGAIN ";
    else
      DAWREC.DAW-EDIT-ERROR-FL = "Y";

      TA1REC.TA1DBASE = "DMIROR  "; /* data base name*/
      TA1REC.TA1TBLVU = "VXVO0001"; /* table view*/
      TA1REC.TA1LOCAT[1] = "OPEN XVO";
      TA1REC.TA1LOCAT[2] = "VXVO0001";
      XSDAS-DB2-ABEND-RB();
    end
  end
end // end GD0X-OPEN-XVO

// DRIVER FOR APPLICATION
Function GD0XP00-DRIVER()
  /* **************************************************************/
  /* DRIVER FOR APPLICATION*/
  /* **************************************************************/

  /* WJBTEST;                         /* test statement group*/
  GD0XP10-INITIALIZE(); /* Initialize application*/

  GD0XW01.XOB-SRCH = "ZZ";
  GD0XW01.XDV-SRCH = "ZZ";
  GD0XW01.XBC-SRCH = "ZZ";
  GD0XW01.XGP-SRCH = "ZZ";
  GD0XW01.XSO-SRCH = "ZZ";

  while (DAWREC.DAW-TERM-APPL-FL == "N")
    GD0XP30-MAIN-MAP-1(); /* Process map until ready to exit*/
  end

  GD0XP99-TERMINATE(); /* Terminate the application*/

  /* **************/
  /* ****************** END GD0XP00 *******************************/
  /* **************/
end // end GD0XP00-DRIVER

// INITIALIZE THE APPLICATION
Function GD0XP10-INITIALIZE()
  /* **********************************************************/
  /* This process initializes the program work area and map.*/
  /* **********************************************************/

  XSENTRY(); /* Check entry security*/

  XSSEGTR(); /* Set segmented transaction id*/

  /* Initialize records*/

  COMMAREA.CAITEM = " ";
  DAWREC.DAWGROUP = COMMAREA.CAUSERA; /* restore system record*/
  set GD0XW01 empty; /* Working storage record*/
  set GD0XW02 empty; /* Temp storage record*/
  DAWREC.DAW-CURR-PAGE = 0;

  DAWREC.DAW-TERM-APPL-FL = "N";
  DAWREC.DAW-EDIT-ERROR-FL = "N";

  /* Initialize and move standard information to the map*/

  set GD0XM001 initial;

  GD0XM001.DAW-MAP-TIME = VGVar.currentFormattedTime;
  GD0XM001.DAW-MAP-DATE = VGVar.currentShortGregorianDate;

  if (COMMAREA.CAMSG != " "
   && COMMAREA.CAFRMSYS == "DA")
    GD0XM001.DAW-INFO-MESSAGE = COMMAREA.CAMSG; /* commarea message*/
  end

  /* **************/
  /* ****************** END GD0XP10 ******************************/
  /* **************/
end // end GD0XP10-INITIALIZE

// BUILD MAP 2 - LIST TABLE ROWS
Function GD0XP20-BUILD-MAP1()
  /* ****************************************************************/
  /* Build temp storage and move first page to MAP 001*/
  /* ****************************************************************/

  GD0XP22-BUILD-TSQ(); /* build temp storage file*/

  if (DAWREC.DAW-CURR-PAGE != GD0XM001.DAW-CURR-PAGE
   || GD0XM001.DAW-CURR-PAGE == 1)
    GD0XS-TS-READ-PAGE(); /* read temp storage page*/
    GD0XP71-TSQ-TO-MAP(); /* move page to the map*/
  end

  GD0XP25-SET-ATTR-1(); /* Set field attributes*/

  /* **************/
  /* ***************** END GD0XP20 **********************************/
  /* **************/
end // end GD0XP20-BUILD-MAP1

// BUILD TEMP STORAGE FILE
Function GD0XP22-BUILD-TSQ()
  /* ****************************************************************/
  /* Build temp storage from menu table to allow scrolling*/
  /* ****************************************************************/

  set GD0XW02 empty; /* temp storage record*/
  DAWREC.DAW-ROW-NBR = 0; /* temp storage row subscript*/
  DAWREC.DAW-CURR-PAGE = 0; /* temp storage page(record) number*/
  DAWREC.DAW-MAX-PAGE = 0; /* temp storage max page number*/

  /* Move the selected XVO rows to temp storage*/
  GD0X-OPEN-XVO();
  while (SQLCA.VAGen_SQLCODE == 0) /* until last row*/
    DAWREC.DAW-ROW-NBR = DAWREC.DAW-ROW-NBR + 1;
    GD0X-FETCH-XVO();
    if (DAWREC.DAW-ROW-NBR == 14) /* maximum tsq rows per map*/
      GD0XS-TS-ADD-PAGE(); /* write temp storage record when full*/
    end
  end

  GD0X-CLOSE-XVO();

  if (DAWREC.DAW-ROW-NBR > 0 /* rows were moved*/
   || DAWREC.DAW-MAX-PAGE > 0) /* or tsq pages were written*/

    if (DAWREC.DAW-ROW-NBR < 14 /* last page not full*/
     && DAWREC.DAW-ROW-NBR != 0) /* rows exist*/
      GD0XS-TS-ADD-PAGE();
    end

    GD0XM001.DAW-CURR-PAGE = 1; /* page number to read*/
    DAWREC.DAW-CURR-PAGE = 1; /* last page read*/
  /* MOVE 0 TO DAWREC.DAW-CURR-PAGE;/* last page read*/
    GD0XM001.DAW-LAST-PAGE = DAWREC.DAW-MAX-PAGE;

  end
end // end GD0XP22-BUILD-TSQ

// SET MAP 1 FIELD ATTRIBUTES
Function GD0XP25-SET-ATTR-1()
  /* *********************************************************/
  /* Set MAP 001 field attributes - only show page numbers when*/
  /* there is more than 1 page. Autoskip,dark any rows with*/
  /* an '*' in the select. They can look at the data (for the*/
  /* status) but they can't select it.*/
  /* *********************************************************/

  if (DAW-LAST-PAGE > 1)
    GD0XM001.DAW-PAGE-LIT = "PAGE";
    set GD0XM001.DAW-CURR-PAGE initialAttributes;
    GD0XM001.DAW-OF-LIT = "OF";
    set GD0XM001.DAW-LAST-PAGE initialAttributes;
    GD0XM001.DAW-PF7-LIT = "PF7 = SCROLL BACK";
    GD0XM001.DAW-PF8-LIT = "PF8 = SCROLL FRWD";
  else
    GD0XM001.DAW-PAGE-LIT = " ";
    set GD0XM001.DAW-CURR-PAGE skip, invisible;
    GD0XM001.DAW-OF-LIT = " ";
    set GD0XM001.DAW-LAST-PAGE skip, invisible;
    GD0XM001.DAW-PF7-LIT = " ";
    GD0XM001.DAW-PF8-LIT = " ";
  end

  /* **************/
  /* ****************** END gd0xP25 **************************/
  /* **************/
end // end GD0XP25-SET-ATTR-1

// MAIN PROCESS LOOP FOR MAP 1
Function GD0XP30-MAIN-MAP-1()
  /* **********************************************************/
  /* MAIN PROCESS - Program loops through this process until*/
  /* the user exits with a PF key or transfers to another*/
  /* application. Exit occurs when DA-TERM-APPL = 'Y'*/
  /* **********************************************************/

  GD0XP40-CONVERSE-1(); /* Display the map*/

  converseLib.validationFailed(0);
  GD0XM001.VAGen_EZEMSG = " ";
  GD0XM001.DAW-INFO-MESSAGE = " ";
  DAWREC.DAW-EDIT-ERROR-FL = "N";

  GD0XP25-SET-ATTR-1(); /* Reset field attributes to defined*/

  GD0XP50-PF-KEYS-1(); /* Edit pf keys*/

  if (DAWREC.DAW-EDIT-ERROR-FL == "N"
   && DAWREC.DAW-TERM-APPL-FL == "N") /* No errors and not ready to exit*/

    GD0XP60-EDIT-MAP-1(); /* Do all edits for map 1*/

    if (DAWREC.DAW-EDIT-ERROR-FL == "N")
      GD0XP70-PROC-MAP-1(); /* Do any processing needed for map 1*/
    end

  end


  /* **************/
  /* ****************** END GD0XP30 *****************************/
  /* **************/
end // end GD0XP30-MAIN-MAP-1

// CONVERSE MAP 001
Function GD0XP40-CONVERSE-1()
  /* **********************************************************/
  /* CONVERSE MAP 001 - LIST TABLE*/
  /* **********************************************************/
  converse GD0XM001 ;
   /* ************************************************************/



  if (converseVar.eventKey is enter)
    GDWREC.GDWAIDS = "0"; /* set key flag for flow stage.*/

    if (GD0XM001.XMGDM2AP is modified
     && GD0XM001.XMGDM2AP != GD3REC.GD304B) /* and not spaces*/

      COMMAREA.CAITEM = GD0XM001.XMGDMITM;
      COMMAREA.CATOAP = GD0XM001.XMGDM2AP;

      XSEXIT(); /* link to specified application.*/

      XSGD040(); /* If the link fails, A message is*/
                                   /* formatted,*/
      GD0XM001.VAGen_EZEMSG = GD3REC.GD3PEND;
      GD3REC.GD3PEND = " ";

      return;

    end /* fast path field not modified.*/

    if (GD0XM001.XMGDMITM is modified /* item entered*/
     && GD0XM001.XMGDMITM != GD3REC.GD320B) /* and not spaces*/

      COMMAREA.CAITEM = GD0XM001.XMGDMITM;

      XSGDG90(); /* determine desired application, and*/
                                   /* link.*/
      GD0XM001.VAGen_EZEMSG = GD3REC.GD3PEND;
      GD3REC.GD3PEND = " ";

      return;
    end /* item field not modified.*/

  end /* not ENTER*/

   /* ************************************************************/
  /* **************/
  /* ****************** END GD0XP40 *****************************/
  /* **************/
end // end GD0XP40-CONVERSE-1

// EDIT PF KEYS FOR MAP 1
Function GD0XP50-PF-KEYS-1()
  /* **************************************************************/
  /* Edit the PF keys for MAP 001*/
  /* **************************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf9
   || converseVar.eventKey is pf10
   || converseVar.eventKey is pf11)
    /* valid pf keys for this application*/
  else
    converseLib.validationFailed(001); /* Invalid PF Key*/
    DAWREC.DAW-EDIT-ERROR-FL = "Y";
  end

  if (converseVar.eventKey is pf7)
    if (GD0XM001.DAW-CURR-PAGE != DAWREC.DAW-CURR-PAGE)
      converseLib.validationFailed(002); /* Can't change page number and use*/
      DAWREC.DAW-EDIT-ERROR-FL = "Y"; /* PF7 at the same time*/
    end
    if (GD0XM001.DAW-LAST-PAGE <= 1)
      converseLib.validationFailed(001); /* Invalid PF Key*/
      DAWREC.DAW-EDIT-ERROR-FL = "Y";
    end
    if (GD0XM001.DAW-CURR-PAGE <= 1)
      converseLib.validationFailed(003); /* Can't use PF7 - already at the*/
      DAWREC.DAW-EDIT-ERROR-FL = "Y"; /* first page*/
    end
  end

  if (converseVar.eventKey is pf8)
    if (GD0XM001.DAW-CURR-PAGE != DAWREC.DAW-CURR-PAGE)
      converseLib.validationFailed(004); /* Can't change page number and use*/
      DAWREC.DAW-EDIT-ERROR-FL = "Y"; /* PF8 at the same time*/
    end
    if (GD0XM001.DAW-LAST-PAGE <= 1)
      converseLib.validationFailed(001); /* Invalid PF Key*/
      DAWREC.DAW-EDIT-ERROR-FL = "Y";
    end
    if (GD0XM001.DAW-CURR-PAGE >= DAWREC.DAW-MAX-PAGE)
      converseLib.validationFailed(005); /* Can't use PF8 - already at the*/
      DAWREC.DAW-EDIT-ERROR-FL = "Y"; /* last page*/
    end
  end

  if (DAWREC.DAW-EDIT-ERROR-FL == "N")
    GD0XP55-HNDL-PFK-1();
  end

  /* **************/
  /* ****************** END GD0XP50 *******************************/
  /* **************/
end // end GD0XP50-PF-KEYS-1

// HANDLE MAP 1 PF KEYS
Function GD0XP55-HNDL-PFK-1()
  /* ************************************************************/
  /* MAP 001 Process PF Keys - do whatever is needed to handle the*/
  /* pf key and set the exit flag to 'y' when the pfkey does not*/
  /* require any furthur edits. If the pf key does require editting*/
  /* of anything entered on the map (like fastpath option) the exit*/
  /* flag will be set to 'Y' in the map edit process when there are*/
  /* no errors and there is something in the DA-EXIT-OPTION*/
  /* ************************************************************/

  if (converseVar.eventKey is pf3)
    DAWREC.DAW-EXIT-OPTION = "RETN";
    DAWREC.DAW-TERM-APPL-FL = "Y";
  end

  if (converseVar.eventKey is pf4)
    DAWREC.DAW-EXIT-OPTION = "MENU";
    DAWREC.DAW-TERM-APPL-FL = "Y";
  end

  if (converseVar.eventKey is pf7) /* subtract 1 from the map page number*/
    GD0XM001.DAW-CURR-PAGE = GD0XM001.DAW-CURR-PAGE - 1;
  end

  if (converseVar.eventKey is pf8) /* add 1 to the map page number*/
    GD0XM001.DAW-CURR-PAGE = GD0XM001.DAW-CURR-PAGE + 1;
  end

  if (converseVar.eventKey is pf9) /* print the tables*/
    set XSDAW01 empty;
    XSDAW01.XXX-TBL-PFX = DAWREC.XXX-TBL-PFX;
    XSDAS-PRINT-TABLE();
    GD0XM001.DAW-INFO-MESSAGE = DAWREC.DAW-INFO-MESSAGE;
  end

  if (converseVar.eventKey is pf10) /* set in process status to pending*/
    DAWREC.DAW-SET-PENDING-ALL-FL = "Y";
  else
    DAWREC.DAW-SET-PENDING-ALL-FL = "N";
  end

  if (converseVar.eventKey is pf11) /* add a new code*/
    DAWREC.DAW-ADD-ROW-FL = "Y";
  else
    DAWREC.DAW-ADD-ROW-FL = "N";
  end

  /* **************/
  /* ****************** END GD0XP55 *****************************/
  /* **************/
end // end GD0XP55-HNDL-PFK-1

// EDIT ALL MAP FIELDS ON MAP 1
Function GD0XP60-EDIT-MAP-1()
  /* ***********************************************************/
  /* Edit MAP 001 fields in reverse order*/
  /* ***********************************************************/

  DAWREC.DAW-SELECT-ROW-FL = "N";
  DAWREC.DAW-DELETE-ROW-FL = "N";
  DAWREC.DAW-COPY-ROW-FL = "N";

  GD0XP62-EDIT-PAGE(); /* edit current page number*/

  if (DAWREC.DAW-EDIT-ERROR-FL == "Y" /* any errors*/
   && DAWREC.DAW-EXIT-OPTION != " ")  /* don't allow exit from appl*/
    DAWREC.DAW-TERM-APPL-FL = "N";
    DAWREC.DAW-EXIT-OPTION = " ";
  end

  /* **************/
  /* ****************** END GD0XP60 ****************************/
  /* **************/
end // end GD0XP60-EDIT-MAP-1

// EDIT MAP PAGE NUMBER
Function GD0XP62-EDIT-PAGE()
  /* ***********************************************************/
  /* Edit map current page number*/
  /* ***********************************************************/

  if (GD0XM001.DAW-CURR-PAGE == DAWREC.DAW-CURR-PAGE)
    return;
  end

  /* if select codes entered and page number changed*/
  /* then reset page number*/

  if (DAWREC.DAW-ADD-ROW-FL == "Y"
   || DAWREC.DAW-DELETE-ROW-FL == "Y"
   || DAWREC.DAW-SELECT-ROW-FL == "Y"
   || DAWREC.DAW-COPY-ROW-FL == "Y")
    set GD0XM001.DAW-CURR-PAGE bold;
    GD0XM001.VAGen_EZEMSG = "CANNOT MAINTAIN OR ADD A ROW AND CHANGE PAGE AT THE SAME TIME";
    GD0XM001.DAW-CURR-PAGE = DAWREC.DAW-CURR-PAGE;
    GD0XM001.DAW-INFO-MESSAGE = "PAGE NUMBER HAS BEEN RESET - HIT ENTER OR PF11 TO CONTINUE";
    DAWREC.DAW-EDIT-ERROR-FL = "Y";
  end

  if (GD0XM001.DAW-CURR-PAGE > 1)
    if (GD0XM001.DAW-CURR-PAGE > GD0XM001.DAW-LAST-PAGE)
      set GD0XM001.DAW-CURR-PAGE cursor, bold;
      converseLib.validationFailed(006); /* page number entered is greater than*/
      DAWREC.DAW-EDIT-ERROR-FL = "Y"; /* last page available*/
    end
  end

  if (GD0XM001.DAW-CURR-PAGE == 0)
    set GD0XM001.DAW-CURR-PAGE cursor, bold;
    converseLib.validationFailed(007); /* page number entered is zero - page*/
    DAWREC.DAW-EDIT-ERROR-FL = "Y"; /* does not exist*/
  end

  /* **************/
  /* ****************** END GD0XP62 ****************************/
  /* **************/
end // end GD0XP62-EDIT-PAGE

// DO PROCESSING FOR THE MAP 1
Function GD0XP70-PROC-MAP-1()
  /* ****************************************************************/
  /* Do any processing for MAP 001*/
  /* ****************************************************************/

  /* *****************************************************************/
  /* Display new page*/
  /* *****************************************************************/

  if (DAWREC.DAW-CURR-PAGE != GD0XM001.DAW-CURR-PAGE)
    GD0XS-TS-READ-PAGE();
    GD0XP71-TSQ-TO-MAP();
    GD0XP25-SET-ATTR-1();
  end

  /* *****************************************************************/
  /* Any maintenance selections are now completed so rebuild*/
  /* temp storage*/
  /* *****************************************************************/

  if (DAWREC.DAW-TERM-APPL-FL == "N") /* not ready to exit this application*/
    if ((GD0XM001.XOB-SRCH != GD0XW01.XOB-SRCH
     || GD0XM001.XDV-SRCH != GD0XW01.XDV-SRCH
     || GD0XM001.XBC-SRCH != GD0XW01.XBC-SRCH
     || GD0XM001.XGP-SRCH != GD0XW01.XGP-SRCH
     || GD0XM001.XSO-SRCH != GD0XW01.XSO-SRCH))
      GD0XW01.XOB-SRCH = GD0XM001.XOB-SRCH;
      GD0XW01.XDV-SRCH = GD0XM001.XDV-SRCH;
      GD0XW01.XBC-SRCH = GD0XM001.XBC-SRCH;
      GD0XW01.XGP-SRCH = GD0XM001.XGP-SRCH;
      GD0XW01.XSO-SRCH = GD0XM001.XSO-SRCH;
      GD0XM001.DAW-CURR-PAGE = 1;
      GD0XS-TS-PURGE-FIL(); /* purge temp storage*/
      GD0XP20-BUILD-MAP1(); /* and then rebuilt it*/
    end
  end

  /* **************/
  /* ***************** END GD0XP70 **********************************/
  /* **************/
end // end GD0XP70-PROC-MAP-1

// MOVE TEMP STORAGE PAGE TO MAP
Function GD0XP71-TSQ-TO-MAP()
  /* ************************************************************/
  /* Move temp storage page to map*/
  /* ************************************************************/

  sysVar.arrayIndex = 1;

  while (sysVar.arrayIndex <= 14)
    GD0XM001.XOBCD[sysVar.arrayIndex] = GD0XW02.XOBCD[sysVar.arrayIndex];
    GD0XM001.XDVCD[sysVar.arrayIndex] = GD0XW02.XDVCD[sysVar.arrayIndex];
    GD0XM001.XBCCD[sysVar.arrayIndex] = GD0XW02.XBCCD[sysVar.arrayIndex];
    GD0XM001.XGPCD[sysVar.arrayIndex] = GD0XW02.XGPCD[sysVar.arrayIndex];
    GD0XM001.XSOCD[sysVar.arrayIndex] = GD0XW02.XSOCD[sysVar.arrayIndex];
    GD0XM001.ZZZCHGDT[sysVar.arrayIndex] = GD0XW02.ZZZCHGDT[sysVar.arrayIndex];
    GD0XM001.XXXSTAT[sysVar.arrayIndex] = GD0XW02.XXXSTAT[sysVar.arrayIndex];
    GD0XM001.XPC-PROD-CAT-CD[sysVar.arrayIndex] = GD0XW02.XPC-PROD-CAT-CD[sysVar.arrayIndex];
    GD0XM001.XOTCD[sysVar.arrayIndex] = GD0XW02.XOTCD[sysVar.arrayIndex];
    GD0XM001.XXXSTAT[sysVar.arrayIndex] = GD0XW02.XXXSTAT[sysVar.arrayIndex];
    GD0XM001.ZZZCHGDT[sysVar.arrayIndex] = GD0XW02.ZZZCHGDT[sysVar.arrayIndex];
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  /* **************/
  /* ****************** END GD0XP71 *****************************/
  /* **************/
end // end GD0XP71-TSQ-TO-MAP

// EXIT FROM THE APPLICATION
Function GD0XP99-TERMINATE()
  /* ************************************************************/
  /* Transfer out of the application*/
  /* ************************************************************/

  COMMAREA.CAUSERA = DAWREC.DAWGROUP;

  GD0XS-TS-PURGE-FIL(); /* purge temp storage*/

  if (DAWREC.DAW-RETURN-TO-DA01-FL == "Y") /* return to DA01 application*/
    COMMAREA.CATOAP = "DA01";
    XSEXIT();
  end

  if (DAW-EXIT-OPTION == "RETN") /* return to prior application*/
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    XSEXIT();
  end

  if (DAW-EXIT-OPTION == "MENU") /* return to main menu*/
    XSPF4();
  end

  if (DAW-EXIT-OPTION == "HELP") /* check for system help*/
    XSPF1(); /* help facility*/
  end

  /* Still here - then XSEXIT didn't allow the transfer so restart*/
  /* the current application and display the error message*/

  if (COMMAREA.CASECRC != 0) /* no message from xsexit*/
    XSDAS-XSEXIT-CAMSG();
  end

  COMMAREA.CAFROMAP = "GD0X";
  sysVar.transferName = "GD0X";
  transfer to program sysVar.transferName passing COMMAREA;

  /* **************/
  /* ****************** END GD0XP99 *****************************/
  /* **************/
end // end GD0XP99-TERMINATE

// ADD TEMP STORAGE PAGE(RECORD)
Function GD0XS-TS-ADD-PAGE()
  /* ************************************************************/
  /* Write temporary storage*/
  /* ************************************************************/

  TA5REC.TA5APPID = "GD0X"; /* appl identification*/
  TA5REC.TA5FNCCD = "A"; /* function code*/
  GD0XW02.DAW-TEMP-STORAGE-LENGTH = 1021;

  call "TA0050" (GD0XW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    DAWREC.DAW-MAX-PAGE = TA5REC.TA5TSQIX;
    set GD0XW02 empty; /* Reset for next write*/
    DAWREC.DAW-ROW-NBR = 0;
  else
    TA1REC.TA1LOCAT[1] = "ADD TSQ";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = DAWREC.XXX-TBL-PFX; /* first row*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end
    GD0XM001.DAW-INFO-MESSAGE = "TEMPORARY STORAGE FAILURE - CONTACT HELP DESK";
  end

  /* *************************/
  /* ****************** END GD0XS-ADD-TSQ-PAGE ******************/
  /* *************************/
end // end GD0XS-TS-ADD-PAGE

// PURGE TEMP STORAGE FILE
Function GD0XS-TS-PURGE-FIL()
  /* ************************************************************/
  /* Purge temporary storage*/
  /* ************************************************************/

  TA5REC.TA5APPID = "GD0X"; /* appl identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/

  call "TA0050" (GD0XW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  /* **********************/
  /* ****************** END GD0XS-PURGE-TSQ *********************/
  /* **********************/
end // end GD0XS-TS-PURGE-FIL

// READ TEMP STORAGE PAGE
Function GD0XS-TS-READ-PAGE()
  /* ************************************************************/
  /* Read temporary storage*/
  /* ************************************************************/

  DAWREC.DAW-CURR-PAGE = GD0XM001.DAW-CURR-PAGE;

  set GD0XW02 empty;

  TA5REC.TA5APPID = "GD0X"; /* appl identification*/
  TA5REC.TA5FNCCD = "R"; /* function code*/
  TA5REC.TA5TSQIX = DAWREC.DAW-CURR-PAGE; /* current page*/
  GD0XW02.DAW-TEMP-STORAGE-LENGTH = 1021;

  call "TA0050" (GD0XW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
     /* NEXT SENTENCE*/
  else
    TA1REC.TA1LOCAT[1] = "READ TSQ";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = DAWREC.XXX-TBL-PFX; /* first row*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end
    GD0XM001.DAW-INFO-MESSAGE = "TEMPORARY STORAGE FAILURE - CONTACT HELP DESK";
  end

  /* *************************/
  /* ****************** END GD0XS-READ-TSQ-PAGE ******************/
  /* *************************/
end // end GD0XS-TS-READ-PAGE

//*** RECORD=GD0XW01 ****
// /*********************************************************
// /*  working storage record used to hold the concatinated
// /*  table key and the table record.
// /*********************************************************
// /* DATE      USERID     DESC. OF CHANGE
// /* --------  ------     ----------------------------------
// /* 05/15/96  LRAINE     CREATED RECORD
// /*
// /*********************************************************
// ***********************
Record GD0XW01 type basicRecord
  10 XVOGROUP XVOGROUP ; 
    15 XOBCD XOBCD ; 
    15 XDVCD XDVCD ; 
    15 XBCCD XBCCD ; 
    15 XGPCD XGPCD ; 
    15 XSOCD XSOCD ; 
    15 XPC-PROD-CAT-CD XPC-PROD-CAT-CD ; 
    15 XOTCD XOTCD ; 
    15 XXXSTAT XXXSTAT ; 
    15 ZZZSDT ZZZSDT ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 ZZZCHGCT ZZZCHGCT ; 
  10 DA-CCAT-KEY-TXT DA-CCAT-KEY-TXT ; 
    15 GD0XW-KEY-XOBCD GD0XW-KEY-XOBCD ; 
    15 GD0XW-KEY-XDVCD GD0XW-KEY-XDVCD ; 
    15 GD0XW-KEY-XBCCD GD0XW-KEY-XBCCD ; 
    15 GD0XW-KEY-XGPCD GD0XW-KEY-XGPCD ; 
    15 GD0XW-KEY-XSOCD GD0XW-KEY-XSOCD ; 
    15 GD0XW-KEY-XPCCD GD0XW-KEY-XPCCD ; 
    15 GD0XW-KEY-XOTCD GD0XW-KEY-XOTCD ; 
    15 GD0XW-FILLER char(6) ; // AND REDUCE SIZE OF FILLER
  10 DA-PLOG-TXT1 DA-PLOG-TXT1 ; 
  10 DA-PLOG-TXT2 DA-PLOG-TXT2 ; 
  10 GD0XW-FND-FL GD0XW-FND-FL ; 
  10 XOB-SRCH char(2) ; 
  10 XDV-SRCH char(2) ; 
  10 XBC-SRCH char(2) ; 
  10 XGP-SRCH char(2) ; 
  10 XSO-SRCH char(2) ; 
end // end GD0XW01

//*** RECORD=GD0XW02 ****
// /*********************************************************
// /* Temp storage record for the application
// /*********************************************************
// /*
// /* DATE      USERID     DESC. OF CHANGE
// /* --------  ------     ----------------------------------
// /* 05/15/96  LRAINE     CREATED RECORD
// /*
// /*********************************************************
// ***********************
Record GD0XW02 type basicRecord
  5 DA00W-TEMP-STORAGE-RECORD char(704) ; // TEMP STORAGE RECORD FOR DA0A
    10 DAW-TEMP-STORAGE-LENGTH DAW-TEMP-STORAGE-LENGTH ; 
    10 DA00W-TEMP-STORAGE-ROW char(50) [14] ; // DA0A TSQ ROW
      15 DAW-RECORD-TYPE DAW-RECORD-TYPE ; 
      15 GD0XW-KEY GD0XW-KEY ; 
        20 XOBCD XOBCD ; 
        20 XDVCD XDVCD ; 
        20 XBCCD XBCCD ; 
        20 XGPCD XGPCD ; 
        20 XSOCD XSOCD ; 
        20 XPC-PROD-CAT-CD XPC-PROD-CAT-CD ; 
        20 XOTCD XOTCD ; 
      15 XXXSTAT XXXSTAT ; 
      15 ZZZCHGDT ZZZCHGDT ; 
      15 DAW-VDATRN01-KEY DAW-VDATRN01-KEY ; 
        20 XXX-TBL-PFX XXX-TBL-PFX ; 
        20 DA-CCAT-KEY-TXT DA-CCAT-KEY-TXT ; 
        20 ZZ-CHNG-DT ZZ-CHNG-DT ; 
end // end GD0XW02

DataItem GD0XW-FND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem GD0XW-KEY char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem GD0XW-KEY-XBCCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem GD0XW-KEY-XDVCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem GD0XW-KEY-XGPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem GD0XW-KEY-XOBCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TABLE KEY - ADD MORE IF NEEDED
DataItem GD0XW-KEY-XOTCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TABLE KEY - ADD MORE IF NEEDED
DataItem GD0XW-KEY-XPCCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TABLE KEY - ADD MORE IF NEEDED
DataItem GD0XW-KEY-XSOCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

