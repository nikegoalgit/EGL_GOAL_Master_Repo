package gd0r;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.XMGDM;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import gd.common.*;
import in1.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=GD0R ****
// Nike On-line CSP Table Display Application
// 
//                        CSP TABLES
// 
// OVERVIEW:
// 
//     The purpose of the GD0R CSP table  display application
// is to allow users of CSP tables access to these TABLES in
// a fast and efficient manner.
// 
//     This application is driven by the GD0G table display
// application which displays all the valid CSP tables which
// this system is to access. The user then makes a selection
// of which table is to be displayed by entering the code
// (ie. "XCT", {country table}) in the option field. The table
// GD0GWT1 is searched and if the code entered is a valid table
// control is then pass to the application responsible for
// displaying that CSP table. This application displays all the
// allocation CSP tables.
// 
// 
// DATE CREATED:  5/21/87
//       AUTHOR: John Wood (CSP VERSION 3 STRUCTURE PGM)
// 
// 
// MAINTENANCE HISTORY:
// 
//    DATE      BY WHOM          OVERVIEW OF CHANGES MADE
//  -------   ----------     ---------------------------------
//  11-11-88  John Wood      gd0r300 - invalid key hit logic
//  11-11-88  John Wood      added xssegtr logic
//  09-19-89  John Wood      changes to xpt display pg #2
//  02-21-91  vern cowan     add XSNTBL display logic
//  09-30-91  vern cowan     add YNTTBL display logic
//  05-20-93  JCAMPB         ADD XROTBL DISPLAY LOGIC
//  03-24-94  vcowan         add YSNTBL display logic
//  03-31-94  vcowan         correct YSNTBL display logic
//  02-01-95  vcowan         chg YNT display per chyde
//  02-01-95  vcowan         add XHD display, was in GD0J
//  02-13-95  vcowan         add XWH display, was in GD0J
// *********************
Program GD0R type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  GD0RW-XHD-PAGE1 GD0RW-XHD-PAGE1; // record
  GD0RW-XHD-PAGE2 GD0RW-XHD-PAGE2; // record
  GD0RW-XRO-PAGE1 GD0RW-XRO-PAGE1; // record
  GD0RW-XRO-PAGE2 GD0RW-XRO-PAGE2; // record
  GD0RW-YNT-PAGE1 GD0RW-YNT-PAGE1; // record
  GD0RW-YNT-PAGE2 GD0RW-YNT-PAGE2; // record
  GD0RW-ZIT-PAGE1 GD0RW-ZIT-PAGE1; // record
  GD0RW-ZIT-PAGE2 GD0RW-ZIT-PAGE2; // record
  GD0RW01 GD0RW01; // record
  GD0RWPT1 GD0RWPT1; // record
  GD0RWPT2 GD0RWPT2; // record
  GD0RWQT1 GD0RWQT1; // record
  GD0RWQT2 GD0RWQT2; // record
  GD0RWSN GD0RWSN; // record
  GD0RWXWH1 GD0RWXWH1; // record
  GD0RWXWH2 GD0RWXWH2; // record
  GD0RWYSN GD0RWYSN; // record
  GD3REC GD3REC; // record
  GDWREC GDWREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGLTBL {deleteAfterUse = yes}; // table
  use XHDTBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use XROTBL {deleteAfterUse = yes}; // table
  use XSNTBL {deleteAfterUse = yes}; // table
  use XQTTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YNTTBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use ZITTBL {deleteAfterUse = yes}; // table
  use XMGDM.XMGDM002 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    GD0R000: GD0R000();

  end // end main
end // end GD0R

// MAINLINE LOGIC
Function GD0R000()
   /* *************************************************************/
   /* CHECK SECURITY*/
   /* *************************************************************/
  XSENTRY();

   /* *************************************************************/
   /* set segmented transaction id to name of application*/
   /* *************************************************************/
  XSSEGTR();
   /* *************************************************************/
   /* INITIALIZE GDWREC & GD3REC*/
   /* *************************************************************/

  GD0R051();

   /* *************************************************************/
   /* FIND COMMAREA.CAFROMAP ON TABLE...IF NOT THERE, SAVE THE*/
       /* ORIGINAL APPLICATION NAME IN WORKING STORAGE.....*/
   /* *************************************************************/

  GD0R100();

   /* *************************************************************/
   /* PERFORM THE MAP DISPLAYS BASED UPON THE TABLE CHOSEN*/

   /* DEFAULT TO THE FIRST MAP DISPLAY*/
   /* *************************************************************/

  GD0R110();
end // end GD0R000

// INITIALIZE GDWREC,GD3REC
Function GD0R051()
  set GDWREC empty;
  set GD3REC empty;
  GD0RW01.GD0RWPFL = "PF11 = SCREEN 2";

  GD3REC.GD349B = " "; /* INIT WORKING STORAGE*/
  GDWREC.GDWFLAGS = " "; /* INIT APPLICATION FLAGS*/
end // end GD0R051

// CHECK OPTION & ITEM FIELDS
Function GD0R100()
     /* ********************************************************/
     /* * THIS PROCESS       edits the option and item field. **/
     /* *              Flow depending on table                **/
     /* ********************************************************/

     /* Find commarea.cafromap on table, if not there, save*/
     /* original application name in working storage.*/

  GDWREC.GDWTID = COMMAREA.CAFROMAP;
  if (GDWREC.GDWTID in XGLTBL.XGLTAPP)
    XSGDG12();
  else
    XSGDG14();
  end

  if (GDWREC.GDWEDIT == "F")

       /* not found on table, means it must be users application.*/
       /* save users application for PF2 direct return.*/

    GDWREC.GDWFMAPP = COMMAREA.CAFROMAP;
  end

  if (COMMAREA.CAITEM != GD3REC.GD320B) /* does item field have data.*/

            /* The first three bytes of the item field are the csp*/
       /* option. ,*/

    GDWREC.GDWITEM = COMMAREA.CAITEM; /* take it apart,*/

       /* Retreive the first column of the csp table based on the*/
       /* item option.  If the specified item is not a csp table*/
       /* then it must be an error. In this case display the csp*/
       /* tables as we normally would but with an error message*/
       /* for a invalid csp table option.*/

    /* ---------------------------------------------------------*/
              /* SEARCH FOR SPECIFIED OPTION ON CSP TABLE.*/

    XSGDG10(); /* search for specified option on csp.*/

    if (GDWREC.GDWEDIT == "P") /* tran code found on csp*/

      if (XGLTBL.XGLTAPP[sysVar.arrayIndex] != "GD0R")

        COMMAREA.CATOAP = "GD0G"; /* invalid*/
        COMMAREA.CAITEM = GDWREC.GDWITEM; /* transfer*/
                                                  /* to gd0g display*/
        XSEXIT();

      else

        /* NEXT SENTENCE            ;was ezeflo*/

      end

    else /* not on table, must be outside CSP table appl.*/

      COMMAREA.CATOAP = "GD0G"; /* invalid CSP table*/
      COMMAREA.CAITEM = GDWREC.GDWITEM; /* transfer to GD0G table*/
                                                /* display*/
      XSEXIT();

    end /* if found on CSP table.*/

  end /* item field blank.  default to main menu.*/

   /* NEXT SENTENCE                  ;was ezeflo*/




   /* *************************************************************/
end // end GD0R100

// PROCESS THE TABLE  DISPLAYS
Function GD0R110()

  if (GDWICSP == "XPT")
    GD0R200(); /* MOVE IN HEADING LINES*/
    if (GD0RW01.GD0RWPTF != "2")
      GD0R201(); /* MOVE IN LEFT PAGE DATA*/
    else
      GD0R202(); /* MOVE IN RIGHT PAGE DATA*/
    end
    GD0R300(); /* CONVERSE SCREEN*/
    GD0R310(); /* POST CONVERSE LOGIC*/
  end


  if (GDWICSP == "XQT")
    GD0R205(); /* MOVE IN HEADING LINES*/
    if (GD0RW01.GD0RWPTF != "2")
      GD0R206(); /* MOVE IN LEFT PAGE DATA*/
    else
      GD0R207(); /* MOVE IN RIGHT PAGE DATA*/
    end
    GD0R300(); /* CONVERSE SCREEN*/
    GD0R310(); /* POST CONVERSE LOGIC*/
  end


  if (GDWICSP == "XSN") /* season year range table*/
    GD0R210(); /* MOVE IN HEADING LINES*/
    if (GD0RW01.GD0RWPTF != "2")
      GD0R211(); /* MOVE IN LEFT PAGE DATA*/
    else
      GD0R212(); /* MOVE IN RIGHT PAGE DATA*/
    end
    GD0R300(); /* CONVERSE SCREEN*/
    GD0R310(); /* POST CONVERSE LOGIC*/
  end


  if (GDWICSP == "YNT") /* picking carton type table*/
    GD0R215(); /* MOVE IN HEADING LINES*/
    if (GD0RW01.GD0RWPTF != "2")
      GD0R216(); /* MOVE IN LEFT PAGE DATA*/
    else
      GD0R217(); /* MOVE IN RIGHT PAGE DATA*/
    end
    GD0R300(); /* CONVERSE SCREEN*/
    GD0R310(); /* POST CONVERSE LOGIC*/
  end

  if (GDWICSP == "XRO") /* picking carton type table*/
    GD0R220(); /* MOVE IN HEADING LINES*/
    if (GD0RW01.GD0RWPTF != "2")
      GD0R221(); /* MOVE IN LEFT PAGE DATA*/
    else
      GD0R222(); /* MOVE IN RIGHT PAGE DATA*/
    end
    GD0R300(); /* CONVERSE SCREEN*/
    GD0R310(); /* POST CONVERSE LOGIC*/
  end

  if (GDWICSP == "ZIT") /* picking carton type table*/
    GD0R225(); /* MOVE IN HEADING LINES*/
    if (GD0RW01.GD0RWPTF != "2")
      GD0R226(); /* MOVE IN LEFT PAGE DATA*/
    else
      GD0R227(); /* MOVE IN RIGHT PAGE DATA*/
    end
    GD0R300(); /* CONVERSE SCREEN*/
    GD0R310(); /* POST CONVERSE LOGIC*/
  end

  if (GDWICSP == "YSN") /* picking carton type table*/
    GD0R230(); /* MOVE IN HEADING LINES*/
    if (GD0RW01.GD0RWPTF != "2")
      GD0R231(); /* MOVE IN LEFT PAGE DATA*/
    else
      GD0R232(); /* MOVE IN RIGHT PAGE DATA*/
    end
    GD0R300(); /* CONVERSE SCREEN*/
    GD0R310(); /* POST CONVERSE LOGIC*/
  end

  if (GDWICSP == "XHD") /* pack & handling code table*/
    GD0R235(); /* MOVE IN HEADING LINES*/
    if (GD0RW01.GD0RWPTF != "2")
      GD0R236(); /* MOVE IN LEFT PAGE DATA*/
    else
      GD0R237(); /* MOVE IN RIGHT PAGE DATA*/
    end
    GD0R300(); /* CONVERSE SCREEN*/
    GD0R310(); /* POST CONVERSE LOGIC*/
  end


  if (GDWICSP == "XWH") /* warehouse table*/
    GD0R241(); /* MOVE IN HEADING LINES*/
    if (GD0RW01.GD0RWPTF != "2")
      GD0R242(); /* MOVE IN LEFT PAGE DATA*/
    else
      GD0R243(); /* MOVE IN RIGHT PAGE DATA*/
    end
    GD0R300(); /* CONVERSE SCREEN*/
    GD0R310(); /* POST CONVERSE LOGIC*/
  end

   /* *************************************************************/
   /* FAIL-SAFE CATCH  - DEFAULT TO DISPLAY FIRST TABLE*/

   /* *************************************************************/

  GD0R200(); /* MOVE IN HEADING LINES*/
  if (GD0RW01.GD0RWPTF != "2")
    GD0R201(); /* MOVE IN LEFT PAGE DATA*/
  else
    GD0R202(); /* MOVE IN RIGHT PAGE DATA*/
  end
  GD0R300(); /* CONVERSE SCREEN*/
end // end GD0R110

// SET UP XPT HEADINGS
Function GD0R200()
  set XMGDM002 initial; /* RESET ALL FIELD ATTRIBUTES*/

  XMGDM002.XMGDMDT = VGVar.currentShortGregorianDate;
  XMGDM002.XMGDMMAP = "XMGDM002";
  XMGDM002.XMGDMPRO = "GD0R200";

  XSGDG22();

  if (GD0RW01.GD0RWPTF == "2")
    XMGDM002.XMGDMHED = "  XPT PAYMENT TERMS TABLE #2";

    GD3REC.GD3PEND1 = " P/T  P/T    EOM  C-OF  PY";
    GD3REC.GD3PEND2 = "MT ADD NIL S-DT  LOCR  P/T";
    GD3REC.GD3PEND3 = "        P/T               ";
    XMGDM002.XMGDMTL1 = GD3REC.GD3PEND;

    GD3REC.GD3PEND1 = "CODE ABBREV   FL  DAY   DA";
    GD3REC.GD3PEND2 = "Y  MO  INC IND   FLG   DSC";
    GD3REC.GD3PEND3 = "T DT    DEFRD DT   STATUS ";
    XMGDM002.XMGDMTL2 = GD3REC.GD3PEND;
  else
    XMGDM002.XMGDMHED = "  XPT PAYMENT TERMS TABLE #1";

    GD3REC.GD3PEND1 = " P/T         PAY/TERMS    ";
    GD3REC.GD3PEND2 = "            PAY/TERMS     ";
    GD3REC.GD3PEND3 = "DIS.    DAYS    DAYS      ";
    XMGDM002.XMGDMTL1 = GD3REC.GD3PEND;

    GD3REC.GD3PEND1 = "CODE        DESCRIPTION   ";
    GD3REC.GD3PEND2 = "              ABRV        ";
    GD3REC.GD3PEND3 = "PCT    DISCT. DEFERED STAT";
    XMGDM002.XMGDMTL2 = GD3REC.GD3PEND;
  end

  GD3REC.GD3PEND = " ";
end // end GD0R200

// SET UP XPT #1 FIELDS
Function GD0R201()
  set GD0RWPT1 empty;

  GDWREC.GDWINDX1 = 1;

  if (GDWREC.GDWAIDS != "7")
    if (GDWREC.GDWAIDS != "8")
      if (GDWREC.GDWAIDS != "L")
        GDWREC.GDWINDX2 = 1;
      end
    end
  end

  while (GDWREC.GDWINDX1 <= 14
   && XPTTBL.XPTCD[GDWINDX2] != "99")

    GD0RWPT1.XPTCD = XPTTBL.XPTCD[GDWINDX2];
    GD0RWPT1.XPTDESC = XPTTBL.XPTDESC[GDWINDX2];
    GD0RWPT1.XPTABRV = XPTTBL.XPTABRV[GDWINDX2];
    GD0RWPT1.XPTPCT = XPTTBL.XPTPCT[GDWINDX2];
    GD0RWPT1.XPTDAYS = XPTTBL.XPTDAYS[GDWINDX2];
    GD0RWPT1.XPTDFRD = XPTTBL.XPTDFRD[GDWINDX2];
    GD0RWPT1.XXXSTAT = XPTTBL.XXXSTAT[GDWINDX2];

    XMGDM002.XMGDMLIN[GDWINDX1] = GD0RWPT1.GD0RWPTR;

    set GD0RWPT1 empty;

    GDWREC.GDWINDX1 = GDWREC.GDWINDX1 + 1;
    GDWREC.GDWINDX2 = GDWREC.GDWINDX2 + 1;

  end

  if (XPTTBL.XPTCD[GDWINDX2] == "99")
    GDWREC.GDWEOC = "Y";
    GD3REC.GD3PEND1 = "END OF CSP TABLE DISPLAY R";
    GD3REC.GD3PEND2 = "EACHED.                   ";
    XSGDG22();

  end

  GDWREC.GDWINDX1 = GDWREC.GDWINDX1 - 1;

  GDWREC.GDWINDX3 = 1;

  while (GDWREC.GDWINDX3 <= 14)
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    GDWREC.GDWINDX3 = GDWREC.GDWINDX3 + 1;
  end

  if (GDWREC.GDWAIDS != "7")
    GDWREC.GDWSCAN = GDWREC.GDWINDX2;
  end

end // end GD0R201

// SET UP XPT #2 FIELDS
Function GD0R202()
  set GD0RWPT2 empty;

  GDWREC.GDWINDX1 = 1;

  if (GDWREC.GDWAIDS != "7")
    if (GDWREC.GDWAIDS != "8")
      if (GDWREC.GDWAIDS != "R")
        GDWREC.GDWINDX2 = 1;
      end
    end
  end

  while (GDWREC.GDWINDX1 <= 14
   && XPTTBL.XPTCD[GDWINDX2] != "99")

    GD0RWPT2.XPTCD = XPTTBL.XPTCD[GDWINDX2];
    GD0RWPT2.XPTABRV = XPTTBL.XPTABRV[GDWINDX2];
    GD0RWPT2.XPTEOMFL = XPTTBL.XPTEOMFL[GDWINDX2];
    GD0RWPT2.XPTEOMDY = XPTTBL.XPTEOMDY[GDWINDX2];
    GD0RWPT2.XPTEOMPY = XPTTBL.XPTEOMPY[GDWINDX2];
    GD0RWPT2.XPTEOMMO = XPTTBL.XPTEOMMO[GDWINDX2];
    GD0RWPT2.XPTCTRLI = XPTTBL.XPTCTRLI[GDWINDX2];
    GD0RWPT2.XPTSHDTI = XPTTBL.XPTSHDTI[GDWINDX2];
    GD0RWPT2.XPTLCFL = XPTTBL.XPTLCFL[GDWINDX2];
    GD0RWPT2.GD0RWDDT = XPTTBL.XPTDISDT[GDWINDX2];
    GD0RWPT2.GD0RWFRD = XPTTBL.XPTDFRDT[GDWINDX2];
    GD0RWPT2.XXXSTAT = XPTTBL.XXXSTAT[GDWINDX2];

    XMGDM002.XMGDMLIN[GDWINDX1] = GD0RWPT2.GD0RWPTG;

    set GD0RWPT2 empty;

    GDWREC.GDWINDX1 = GDWREC.GDWINDX1 + 1;
    GDWREC.GDWINDX2 = GDWREC.GDWINDX2 + 1;

  end

  if (XPTTBL.XPTCD[GDWINDX2] == "99")
    GDWREC.GDWEOC = "Y";
    GD3REC.GD3PEND1 = "END OF CSP TABLE DISPLAY R";
    GD3REC.GD3PEND2 = "EACHED.                   ";
    XSGDG22();

  end

  GDWREC.GDWINDX1 = GDWREC.GDWINDX1 - 1;

  GDWREC.GDWINDX3 = 1;

  while (GDWREC.GDWINDX3 <= 14)
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    GDWREC.GDWINDX3 = GDWREC.GDWINDX3 + 1;
  end

  if (GDWREC.GDWAIDS != "7")
    GDWREC.GDWSCAN = GDWREC.GDWINDX2;
  end

end // end GD0R202

// SET UP XQT HEADINGS
Function GD0R205()
  set XMGDM002 initial; /* RESET ALL FIELD ATTRIBUTES*/

  XMGDM002.XMGDMDT = VGVar.currentShortGregorianDate;
  XMGDM002.XMGDMMAP = "XMGDM002";
  XMGDM002.XMGDMPRO = "GD0R205";

  XSGDG22();

  if (GD0RW01.GD0RWPTF == "2")
    XMGDM002.XMGDMHED = " XQT QUOTA CATEGORY TABLE #2";

    GD3REC.GD3PEND1 = "CODE DESCRIPTION #2       ";
    GD3REC.GD3PEND2 = "               DESCRITPTIO";
    GD3REC.GD3PEND3 = "N #3                     S";
    XMGDM002.XMGDMTL1 = GD3REC.GD3PEND;

    GD3REC.GD3PEND1 = "==== =====================";
    GD3REC.GD3PEND2 = "============== ===========";
    GD3REC.GD3PEND3 = "======================== =";
    XMGDM002.XMGDMTL2 = GD3REC.GD3PEND;
  else
    XMGDM002.XMGDMHED = " XQT QUOTA CATEGORY TABLE #1";

    GD3REC.GD3PEND1 = "CODE   GPC   DESCRIPTION #";
    GD3REC.GD3PEND2 = "1                        S";
    GD3REC.GD3PEND3 = "TATUS                     ";
    XMGDM002.XMGDMTL1 = GD3REC.GD3PEND;

    GD3REC.GD3PEND1 = "====   ===   =============";
    GD3REC.GD3PEND2 = "======================   =";
    GD3REC.GD3PEND3 = "=====                     ";
    XMGDM002.XMGDMTL2 = GD3REC.GD3PEND;
  end

  GD3REC.GD3PEND = " ";
end // end GD0R205

// SET UP XQT #1 FIELDS
Function GD0R206()
  set GD0RWQT1 empty;

  GDWREC.GDWINDX1 = 1;

  if (GDWREC.GDWAIDS != "7")
    if (GDWREC.GDWAIDS != "8")
      if (GDWREC.GDWAIDS != "L")
        GDWREC.GDWINDX2 = 1;
      end
    end
  end

  while (GDWREC.GDWINDX1 <= 14
   && XQTTBL.XQTCD[GDWINDX2] != "999")

    GD0RWQT1.XQTCD = XQTTBL.XQTCD[GDWINDX2];
    GD0RWQT1.XGPCD = XQTTBL.XGPCD[GDWINDX2];
    GD0RWQT1.XQTDESC1 = XQTTBL.XQTDESC1[GDWINDX2];
    GD0RWQT1.XXXSTAT = XQTTBL.XXXSTAT[GDWINDX2];

    XMGDM002.XMGDMLIN[GDWINDX1] = GD0RWQT1.GD0RWQTR;

    set GD0RWQT1 empty;

    GDWREC.GDWINDX1 = GDWREC.GDWINDX1 + 1;
    GDWREC.GDWINDX2 = GDWREC.GDWINDX2 + 1;

  end

  if (XQTTBL.XQTCD[GDWINDX2] == "999")
    GDWREC.GDWEOC = "Y";
    GD3REC.GD3PEND1 = "END OF CSP TABLE DISPLAY R";
    GD3REC.GD3PEND2 = "EACHED.                   ";
    XSGDG22();

  end

  GDWREC.GDWINDX1 = GDWREC.GDWINDX1 - 1;

  GDWREC.GDWINDX3 = 1;

  while (GDWREC.GDWINDX3 <= 14)
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    GDWREC.GDWINDX3 = GDWREC.GDWINDX3 + 1;
  end

  if (GDWREC.GDWAIDS != "7")
    GDWREC.GDWSCAN = GDWREC.GDWINDX2;
  end

end // end GD0R206

// SET UP XQT #2 FIELDS
Function GD0R207()
  set GD0RWQT2 empty;

  GDWREC.GDWINDX1 = 1;

  if (GDWREC.GDWAIDS != "7")
    if (GDWREC.GDWAIDS != "8")
      if (GDWREC.GDWAIDS != "R")
        GDWREC.GDWINDX2 = 1;
      end
    end
  end

  while (GDWREC.GDWINDX1 <= 14
   && XQTTBL.XQTCD[GDWINDX2] != "999")

    GD0RWQT2.XQTCD = XQTTBL.XQTCD[GDWINDX2];
    GD0RWQT2.XQTDESC2 = XQTTBL.XQTDESC2[GDWINDX2];
    GD0RWQT2.XQTDESC3 = XQTTBL.XQTDESC3[GDWINDX2];
    GD0RWQT2.XXXSTAT = XQTTBL.XXXSTAT[GDWINDX2];

    XMGDM002.XMGDMLIN[GDWINDX1] = GD0RWQT2.GD0RWQTG;

    set GD0RWQT2 empty;

    GDWREC.GDWINDX1 = GDWREC.GDWINDX1 + 1;
    GDWREC.GDWINDX2 = GDWREC.GDWINDX2 + 1;

  end

  if (XQTTBL.XQTCD[GDWINDX2] == "999")
    GDWREC.GDWEOC = "Y";
    GD3REC.GD3PEND1 = "END OF CSP TABLE DISPLAY R";
    GD3REC.GD3PEND2 = "EACHED.                   ";
    XSGDG22();

  end

  GDWREC.GDWINDX1 = GDWREC.GDWINDX1 - 1;

  GDWREC.GDWINDX3 = 1;

  while (GDWREC.GDWINDX3 <= 14)
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    GDWREC.GDWINDX3 = GDWREC.GDWINDX3 + 1;
  end

  if (GDWREC.GDWAIDS != "7")
    GDWREC.GDWSCAN = GDWREC.GDWINDX2;
  end

end // end GD0R207

// SET UP XSN HEADINGS
Function GD0R210()
  set XMGDM002 initial; /* RESET ALL FIELD ATTRIBUTES*/

  XMGDM002.XMGDMDT = VGVar.currentShortGregorianDate;
  XMGDM002.XMGDMMAP = "XMGDM002";
  XMGDM002.XMGDMPRO = "GD0R210";

  XSGDG22();

  if (GD0RW01.GD0RWPTF == "2")
    XMGDM002.XMGDMHED = " XSN - SEASON RANGE TABLE #2";

    GD3REC.GD3PEND1 = "OFFER DATE   CODE  RANGE  ";
    GD3REC.GD3PEND2 = " DESCRIPTION        ======";
    GD3REC.GD3PEND3 = "FOOTWEAR ======     STATUS";
    XMGDM002.XMGDMTL1 = GD3REC.GD3PEND;

    GD3REC.GD3PEND1 = "==========   ====  =====  ";
    GD3REC.GD3PEND2 = " ================   BEGIN ";
    GD3REC.GD3PEND3 = "DATE   END DATE     ======";
    XMGDM002.XMGDMTL2 = GD3REC.GD3PEND;
  else
    XMGDM002.XMGDMHED = " XSN - SEASON RANGE TABLE #1";

    GD3REC.GD3PEND1 = "OFFER DATE   CODE  RANGE  ";
    GD3REC.GD3PEND2 = " DESCRIPTION        ======";
    GD3REC.GD3PEND3 = "APPAREL =======     STATUS";
    XMGDM002.XMGDMTL1 = GD3REC.GD3PEND;

    GD3REC.GD3PEND1 = "==========   ====  =====  ";
    GD3REC.GD3PEND2 = " ================   BEGIN ";
    GD3REC.GD3PEND3 = "DATE   END DATE     ======";
    XMGDM002.XMGDMTL2 = GD3REC.GD3PEND;
  end

  GD3REC.GD3PEND = " ";
end // end GD0R210

// SET UP XSN #1 FIELDS
Function GD0R211()
     /* xsntbl -- footwear screen display (left side)*/


  set GD0RWSN empty;

  GDWREC.GDWINDX1 = 1;

  if (GDWREC.GDWAIDS != "7")
    if (GDWREC.GDWAIDS != "8")
      if (GDWREC.GDWAIDS != "L")
        GDWREC.GDWINDX2 = 1;
      end
    end
  end

  while (GDWREC.GDWINDX1 <= 14
   && XSNTBL.XSECD[GDWINDX2] != "99")

    GD0RWSN.XSECD = XSNTBL.XSECD[GDWINDX2];
    GD0RWSN.GD0RWSYR = XSNTBL.XSNYR[GDWINDX2];
    GD0RWSN.GD0RWODT = XSNTBL.XSNOFRDT[GDWINDX2];
    GD0RWSN.GD0RWSBD = XSNTBL.XSNBDT[GDWINDX2];
    GD0RWSN.GD0RWSED = XSNTBL.XSNXDT[GDWINDX2];
    GD0RWSN.XSNDESC = XSNTBL.XSNDESC[GDWINDX2];
    GD0RWSN.XXXSTAT = XSNTBL.XXXSTAT[GDWINDX2];


    XMGDM002.XMGDMLIN[GDWINDX1] = GD0RWSN.GD0RWSNR;

    set GD0RWSN empty;

    GDWREC.GDWINDX1 = GDWREC.GDWINDX1 + 1;
    GDWREC.GDWINDX2 = GDWREC.GDWINDX2 + 1;

  end

  if (XSNTBL.XSECD[GDWINDX2] == "99")
    GDWREC.GDWEOC = "Y";
    GD3REC.GD3PEND1 = "END OF CSP TABLE DISPLAY R";
    GD3REC.GD3PEND2 = "EACHED.                   ";
    XSGDG22();

  end

  GDWREC.GDWINDX1 = GDWREC.GDWINDX1 - 1;

  GDWREC.GDWINDX3 = 1;

  while (GDWREC.GDWINDX3 <= 14)
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    GDWREC.GDWINDX3 = GDWREC.GDWINDX3 + 1;
  end

  if (GDWREC.GDWAIDS != "7")
    GDWREC.GDWSCAN = GDWREC.GDWINDX2;
  end

end // end GD0R211

// SET UP XPT #2 FIELDS
Function GD0R212()
     /* xsntbl -- footwear screen display (left side)*/

  set GD0RWSN empty;

  GDWREC.GDWINDX1 = 1;

  if (GDWREC.GDWAIDS != "7")
    if (GDWREC.GDWAIDS != "8")
      if (GDWREC.GDWAIDS != "R")
        GDWREC.GDWINDX2 = 1;
      end
    end
  end

  while (GDWREC.GDWINDX1 <= 14
   && XSNTBL.XSECD[GDWINDX2] != "99")

    GD0RWSN.XSECD = XSNTBL.XSECD[GDWINDX2];
    GD0RWSN.GD0RWSYR = XSNTBL.XSNYR[GDWINDX2];
    GD0RWSN.GD0RWODT = XSNTBL.XSNOFRDT[GDWINDX2];
    GD0RWSN.GD0RWSBD = XSNTBL.XSNFSBDT[GDWINDX2];
    GD0RWSN.GD0RWSED = XSNTBL.XSNFSXDT[GDWINDX2];
    GD0RWSN.XSNDESC = XSNTBL.XSNDESC[GDWINDX2];
    GD0RWSN.XXXSTAT = XSNTBL.XXXSTAT[GDWINDX2];


    XMGDM002.XMGDMLIN[GDWINDX1] = GD0RWSN.GD0RWSNR;

    set GD0RWSN empty;

    GDWREC.GDWINDX1 = GDWREC.GDWINDX1 + 1;
    GDWREC.GDWINDX2 = GDWREC.GDWINDX2 + 1;

  end

  if (XSNTBL.XSECD[GDWINDX2] == "99")
    GDWREC.GDWEOC = "Y";
    GD3REC.GD3PEND1 = "END OF CSP TABLE DISPLAY R";
    GD3REC.GD3PEND2 = "EACHED.                   ";
    XSGDG22();

  end

  GDWREC.GDWINDX1 = GDWREC.GDWINDX1 - 1;

  GDWREC.GDWINDX3 = 1;

  while (GDWREC.GDWINDX3 <= 14)
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    GDWREC.GDWINDX3 = GDWREC.GDWINDX3 + 1;
  end

  if (GDWREC.GDWAIDS != "7")
    GDWREC.GDWSCAN = GDWREC.GDWINDX2;
  end


end // end GD0R212

// SET UP XPT HEADINGS
Function GD0R215()
  set XMGDM002 initial; /* RESET ALL FIELD ATTRIBUTES*/

  XMGDM002.XMGDMDT = VGVar.currentShortGregorianDate;
  XMGDM002.XMGDMMAP = "XMGDM002";
  XMGDM002.XMGDMPRO = "GD0R215";

  XSGDG22();

  if (GD0RW01.GD0RWPTF == "2")
    XMGDM002.XMGDMHED = "YNT - PICKING CARTON TYPE - TBL2";

    GD3REC.GD3PEND1 = "CAR|CARTON|CARTON|CARTON| ";
    GD3REC.GD3PEND2 = "   |OVRSZ|GPC |STYLE |    ";
    GD3REC.GD3PEND3 = " |      |                 ";
    XMGDM002.XMGDMTL1 = GD3REC.GD3PEND;

    GD3REC.GD3PEND1 = "TYP|ABBREV|CU FT |WEIGHT|H";
    GD3REC.GD3PEND2 = "NGR|FLAG |CODE|NUMBER|BRAN";
    GD3REC.GD3PEND3 = "D|STATUS|                 ";
    XMGDM002.XMGDMTL2 = GD3REC.GD3PEND;
  else
    XMGDM002.XMGDMHED = "YNT - PICKING CARTON TYPE - TBL1";

    GD3REC.GD3PEND1 = "CAR|CARTON              |C";
    GD3REC.GD3PEND2 = "ARTON|PCK|LOC|FUL|UPS |UNT";
    GD3REC.GD3PEND3 = "S/|CARTON|CARTON|CARTON|  ";
    XMGDM002.XMGDMTL1 = GD3REC.GD3PEND;

    GD3REC.GD3PEND1 = "TYP|DESCRIPTION         |A";
    GD3REC.GD3PEND2 = "BBREV|PRC|PRC|CSE|OVSZ|CAS";
    GD3REC.GD3PEND3 = "E |LENGTH|HEIGHT|WIDTH |  ";
    XMGDM002.XMGDMTL2 = GD3REC.GD3PEND;
  end

  GD3REC.GD3PEND = " ";
end // end GD0R215

// SET UP YNT #1 FIELDS
Function GD0R216()
  set GD0RW-YNT-PAGE1 empty;

  GDWREC.GDWINDX1 = 1;

  if (GDWREC.GDWAIDS != "7")
    if (GDWREC.GDWAIDS != "8")
      if (GDWREC.GDWAIDS != "L")
        GDWREC.GDWINDX2 = 1;
      end
    end
  end

  while (GDWREC.GDWINDX1 <= 14
   && YNTTBL.YNTCD[GDWINDX2] != "99")

    GD0RW-YNT-PAGE1.YNTCD = YNTTBL.YNTCD[GDWINDX2];
    GD0RW-YNT-PAGE1.YNTDESC = YNTTBL.YNTDESC[GDWINDX2];
    GD0RW-YNT-PAGE1.YNTABRV = YNTTBL.YNTABRV[GDWINDX2];
    GD0RW-YNT-PAGE1.YNTPCKFL = YNTTBL.YNTPCKFL[GDWINDX2];
    GD0RW-YNT-PAGE1.YNTLOCFL = YNTTBL.YNTLOCFL[GDWINDX2];
    GD0RW-YNT-PAGE1.YNTFCSFL = YNTTBL.YNTFCSFL[GDWINDX2];
    GD0RW-YNT-PAGE1.YNTUOSFL = YNTTBL.YNTUOSFL[GDWINDX2];
    GD0RW-YNT-PAGE1.GD0RWUPC = YNTTBL.SY1UNPCS[GDWINDX2];
    GD0RW01.GD0RW-EDIT-NUM5DEC2 = YNTTBL.YNTCLSLN[GDWINDX2];
    GD0RW-YNT-PAGE1.GD0RW-CLN1-3 = GD0RW01.GD0RW-EDIT-NUM3;
    GD0RW-YNT-PAGE1.GD0RW-CLN-DESC = ".";
    GD0RW-YNT-PAGE1.GD0RW-CLN4-5 = GD0RW01.GD0RW-EDIT-NUM2;
    GD0RW01.GD0RW-EDIT-NUM5DEC2 = YNTTBL.YNTCLSHG[GDWINDX2];
    GD0RW-YNT-PAGE1.GD0RW-CHG1-3 = GD0RW01.GD0RW-EDIT-NUM3;
    GD0RW-YNT-PAGE1.GD0RW-CHG-DESC = ".";
    GD0RW-YNT-PAGE1.GD0RW-CHG4-5 = GD0RW01.GD0RW-EDIT-NUM2;
    GD0RW01.GD0RW-EDIT-NUM5DEC2 = YNTTBL.YNTCLSWD[GDWINDX2];
    GD0RW-YNT-PAGE1.GD0RW-CWD1-3 = GD0RW01.GD0RW-EDIT-NUM3;
    GD0RW-YNT-PAGE1.GD0RW-CWD-DECM = ".";
    GD0RW-YNT-PAGE1.GD0RW-CWD4-5 = GD0RW01.GD0RW-EDIT-NUM2;

    XMGDM002.XMGDMLIN[GDWINDX1] = GD0RW-YNT-PAGE1.GD0RW-YNT-PGLN1;

    set GD0RW-YNT-PAGE1 empty;

    GDWREC.GDWINDX1 = GDWREC.GDWINDX1 + 1;
    GDWREC.GDWINDX2 = GDWREC.GDWINDX2 + 1;

  end

  if (YNTTBL.YNTCD[GDWINDX2] == "99")
    GDWREC.GDWEOC = "Y";
    GD3REC.GD3PEND1 = "END OF CSP TABLE DISPLAY R";
    GD3REC.GD3PEND2 = "EACHED.                   ";
    XSGDG22();

  end

  GDWREC.GDWINDX1 = GDWREC.GDWINDX1 - 1;

  GDWREC.GDWINDX3 = 1;

  while (GDWREC.GDWINDX3 <= 14)
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    GDWREC.GDWINDX3 = GDWREC.GDWINDX3 + 1;
  end

  if (GDWREC.GDWAIDS != "7")
    GDWREC.GDWSCAN = GDWREC.GDWINDX2;
  end

end // end GD0R216

// SET UP YNT #2 FIELDS
Function GD0R217()
  set GD0RW-YNT-PAGE2 empty;

  GDWREC.GDWINDX1 = 1;

  if (GDWREC.GDWAIDS != "7")
    if (GDWREC.GDWAIDS != "8")
      if (GDWREC.GDWAIDS != "R")
        GDWREC.GDWINDX2 = 1;
      end
    end
  end

  while (GDWREC.GDWINDX1 <= 14
   && YNTTBL.YNTCD[GDWINDX2] != "99")

    GD0RW-YNT-PAGE2.YNTCD = YNTTBL.YNTCD[GDWINDX2];
    GD0RW-YNT-PAGE2.YNTABRV = YNTTBL.YNTABRV[GDWINDX2];
    GD0RW01.GD0RW-EDIT-NUM5DEC2 = YNTTBL.YNTCRFT3[GDWINDX2];
    GD0RW-YNT-PAGE2.GD0RW-CFT1-3 = GD0RW01.GD0RW-EDIT-NUM3;
    GD0RW-YNT-PAGE2.GD0RW-CFT-DECM = ".";
    GD0RW-YNT-PAGE2.GD0RW-CFT3-4 = GD0RW01.GD0RW-EDIT-NUM2;
    GD0RW01.GD0RW-EDIT-NUM5DEC2 = YNTTBL.YNTCRWT[GDWINDX2];
    GD0RW-YNT-PAGE2.GD0RW-CWT1-3 = GD0RW01.GD0RW-EDIT-NUM3;
    GD0RW-YNT-PAGE2.GD0RW-CWT-DECM = ".";
    GD0RW-YNT-PAGE2.GD0RW-CWT4-5 = GD0RW01.GD0RW-EDIT-NUM2;
    GD0RW-YNT-PAGE2.YNTHNGFL = YNTTBL.YNTHNGFL[GDWINDX2];
    GD0RW-YNT-PAGE2.YNT-CRTN-OVSZ-FL = YNTTBL.YNT-CRTN-OVSZ-FL[GDWINDX2];
    GD0RW-YNT-PAGE2.XGPCD = YNTTBL.XGPCD[GDWINDX2];
    GD0RW-YNT-PAGE2.SY1STNBR = YNTTBL.SY1STNBR[GDWINDX2];
    GD0RW-YNT-PAGE2.XBCCD = YNTTBL.XBCCD[GDWINDX2];
    GD0RW-YNT-PAGE2.XXXSTAT = YNTTBL.XXXSTAT[GDWINDX2];

    XMGDM002.XMGDMLIN[GDWINDX1] = GD0RW-YNT-PAGE2.GD0RW-YNT-PGLN2;

    set GD0RW-YNT-PAGE2 empty;

    GDWREC.GDWINDX1 = GDWREC.GDWINDX1 + 1;
    GDWREC.GDWINDX2 = GDWREC.GDWINDX2 + 1;

  end

  if (YNTTBL.YNTCD[GDWINDX2] == "99")
    GDWREC.GDWEOC = "Y";
    GD3REC.GD3PEND1 = "END OF CSP TABLE DISPLAY R";
    GD3REC.GD3PEND2 = "EACHED.                   ";
    XSGDG22();

  end

  GDWREC.GDWINDX1 = GDWREC.GDWINDX1 - 1;

  GDWREC.GDWINDX3 = 1;

  while (GDWREC.GDWINDX3 <= 14)
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    GDWREC.GDWINDX3 = GDWREC.GDWINDX3 + 1;
  end

  if (GDWREC.GDWAIDS != "7")
    GDWREC.GDWSCAN = GDWREC.GDWINDX2;
  end

end // end GD0R217

// SET UP XRO HEADINGS
Function GD0R220()
  set XMGDM002 initial; /* RESET ALL FIELD ATTRIBUTES*/

  XMGDM002.XMGDMDT = VGVar.currentShortGregorianDate;
  XMGDM002.XMGDMMAP = "XMGDM002";
  XMGDM002.XMGDMPRO = "GD0R215";

  XSGDG22();

  if (GD0RW01.GD0RWPTF == "2")
    XMGDM002.XMGDMHED = "XRO REMOTE PRINTER TABLE - PAGE 2";

    GD3REC.GD3PEND1 = " RMT|  PRTR  | PRTR |PK|SL";
    GD3REC.GD3PEND2 = "|SR| DEF | DEF |SM|WHS|WHS";
    GD3REC.GD3PEND3 = "|WHS|                     ";
    XMGDM002.XMGDMTL1 = GD3REC.GD3PEND;

    GD3REC.GD3PEND1 = "CODE|  DEST  | ABRV |FL|FL";
    GD3REC.GD3PEND2 = "|FL|PK FL|SL FL|FL|CD1|CD2";
    GD3REC.GD3PEND3 = "|CD3|STATUS               ";
    XMGDM002.XMGDMTL2 = GD3REC.GD3PEND;
  else
    XMGDM002.XMGDMHED = "XRO REMOTE PRINTER TABLE - PAGE 1";

    GD3REC.GD3PEND1 = " RMT|  PRTR  | PRTR |     ";
    GD3REC.GD3PEND2 = "               |HS|CLM|SO|";
    GD3REC.GD3PEND3 = "WHS|CR|OP|IS|ACTG|PRD|PF  ";
    XMGDM002.XMGDMTL1 = GD3REC.GD3PEND;

    GD3REC.GD3PEND1 = "CODE|  DEST  | ABRV |DESCR";
    GD3REC.GD3PEND2 = "IPTION         |FL|FL |FL|";
    GD3REC.GD3PEND3 = "FL |FL|FL|FL| FL |FL |FL  ";
    XMGDM002.XMGDMTL2 = GD3REC.GD3PEND;
  end

  GD3REC.GD3PEND = " ";
end // end GD0R220

// SET UP XRO #1 FIELDS
Function GD0R221()
  set GD0RW-XRO-PAGE1 empty;

  GDWREC.GDWINDX1 = 1;

  if (GDWREC.GDWAIDS != "7")
    if (GDWREC.GDWAIDS != "8")
      if (GDWREC.GDWAIDS != "L")
        GDWREC.GDWINDX2 = 1;
      end
    end
  end

  while (GDWREC.GDWINDX1 <= 14
   && XROTBL.XROCD[GDWINDX2] != "9999"
  )
    GD0RW-XRO-PAGE1.XROCD = XROTBL.XROCD[GDWINDX2];
    GD0RW-XRO-PAGE1.XROPDEST = XROTBL.XROPDEST[GDWINDX2];
    GD0RW-XRO-PAGE1.XRODESC = XROTBL.XRODESC[GDWINDX2];
    GD0RW-XRO-PAGE1.XROABRV = XROTBL.XROABRV[GDWINDX2];
    GD0RW-XRO-PAGE1.XROHSFL = XROTBL.XROHSFL[GDWINDX2];
    GD0RW-XRO-PAGE1.XROCPFL = XROTBL.XROCPFL[GDWINDX2];
    GD0RW-XRO-PAGE1.XROSOFL = XROTBL.XROSOFL[GDWINDX2];
    GD0RW-XRO-PAGE1.XROWHFL = XROTBL.XROWHFL[GDWINDX2];
    GD0RW-XRO-PAGE1.XROCRFL = XROTBL.XROCRFL[GDWINDX2];
    GD0RW-XRO-PAGE1.XROOPFL = XROTBL.XROOPFL[GDWINDX2];
    GD0RW-XRO-PAGE1.XROISFL = XROTBL.XROISFL[GDWINDX2];
    GD0RW-XRO-PAGE1.XROACFL = XROTBL.XROACFL[GDWINDX2];
    GD0RW-XRO-PAGE1.XROPRFL = XROTBL.XROPRFL[GDWINDX2];
    GD0RW-XRO-PAGE1.XROPFFL = XROTBL.XROPFFL[GDWINDX2];

    XMGDM002.XMGDMLIN[GDWINDX1] = GD0RW-XRO-PAGE1.GD0RW-XRO-PGLN1;

    set GD0RW-XRO-PAGE1 empty;

    GDWREC.GDWINDX1 = GDWREC.GDWINDX1 + 1;
    GDWREC.GDWINDX2 = GDWREC.GDWINDX2 + 1;

  end

  if (XROTBL.XROCD[GDWINDX2] == "9999")
    GDWREC.GDWEOC = "Y";
    GD3REC.GD3PEND1 = "END OF CSP TABLE DISPLAY R";
    GD3REC.GD3PEND2 = "EACHED.                   ";
    XSGDG22();

  end

  GDWREC.GDWINDX1 = GDWREC.GDWINDX1 - 1;

  GDWREC.GDWINDX3 = 1;

  while (GDWREC.GDWINDX3 <= 14)
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    GDWREC.GDWINDX3 = GDWREC.GDWINDX3 + 1;
  end

  if (GDWREC.GDWAIDS != "7")
    GDWREC.GDWSCAN = GDWREC.GDWINDX2;
  end

end // end GD0R221

// SET UP XRO #2 FIELDS
Function GD0R222()
  set GD0RW-XRO-PAGE2 empty;

  GDWREC.GDWINDX1 = 1;

  if (GDWREC.GDWAIDS != "7")
    if (GDWREC.GDWAIDS != "8")
      if (GDWREC.GDWAIDS != "R")
        GDWREC.GDWINDX2 = 1;
      end
    end
  end

  while (GDWREC.GDWINDX1 <= 14
   && XROTBL.XROCD[GDWINDX2] != "9999")

    GD0RW-XRO-PAGE2.XROCD = XROTBL.XROCD[GDWINDX2];
    GD0RW-XRO-PAGE2.XROPDEST = XROTBL.XROPDEST[GDWINDX2];
    GD0RW-XRO-PAGE2.XROABRV = XROTBL.XROABRV[GDWINDX2];
    GD0RW-XRO-PAGE2.XROPKFL = XROTBL.XROPKFL[GDWINDX2];
    GD0RW-XRO-PAGE2.XROSLFL = XROTBL.XROSLFL[GDWINDX2];
    GD0RW-XRO-PAGE2.XROSRFL = XROTBL.XROSRFL[GDWINDX2];
    GD0RW-XRO-PAGE2.XRODPKFL = XROTBL.XRODPKFL[GDWINDX2];
    GD0RW-XRO-PAGE2.XRODSLFL = XROTBL.XRODSLFL[GDWINDX2];
    GD0RW-XRO-PAGE2.XROSMFL = XROTBL.XROSMFL[GDWINDX2];
    GD0RW-XRO-PAGE2.XWHCD1 = XROTBL.XWHCD1[GDWINDX2];
    GD0RW-XRO-PAGE2.XWHCD2 = XROTBL.XWHCD2[GDWINDX2];
    GD0RW-XRO-PAGE2.XWHCD3 = XROTBL.XWHCD3[GDWINDX2];
    GD0RW-XRO-PAGE2.XXXSTAT = XROTBL.XXXSTAT[GDWINDX2];

    XMGDM002.XMGDMLIN[GDWINDX1] = GD0RW-XRO-PAGE2.GD0RW-XRO-PGLN2;

    set GD0RW-XRO-PAGE2 empty;

    GDWREC.GDWINDX1 = GDWREC.GDWINDX1 + 1;
    GDWREC.GDWINDX2 = GDWREC.GDWINDX2 + 1;

  end

  if (XROTBL.XROCD[GDWINDX2] == "9999")
    GDWREC.GDWEOC = "Y";
    GD3REC.GD3PEND1 = "END OF CSP TABLE DISPLAY R";
    GD3REC.GD3PEND2 = "EACHED.                   ";
    XSGDG22();

  end

  GDWREC.GDWINDX1 = GDWREC.GDWINDX1 - 1;

  GDWREC.GDWINDX3 = 1;

  while (GDWREC.GDWINDX3 <= 14)
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    GDWREC.GDWINDX3 = GDWREC.GDWINDX3 + 1;
  end

  if (GDWREC.GDWAIDS != "7")
    GDWREC.GDWSCAN = GDWREC.GDWINDX2;
  end

end // end GD0R222

// SET UP ZIT HEADINGS
Function GD0R225()
  set XMGDM002 initial; /* RESET ALL FIELD ATTRIBUTES*/

  XMGDM002.XMGDMDT = VGVar.currentShortGregorianDate;
  XMGDM002.XMGDMMAP = "XMGDM002";
  XMGDM002.XMGDMPRO = "GD0R225";

  XSGDG22();
  if (GD0RW01.GD0RWPTF == "2")
    XMGDM002.XMGDMHED = "ZIT - INTERNATIONAL INCOTERM TABLE - PAGE 2";
    GD3REC.GD3PEND1 = "CODE| ABRV |POL FL|POD FL|";
    GD3REC.GD3PEND2 = "WHS FL|CON FL|FCTY FL|STAT";
    GD3REC.GD3PEND3 = "US                        ";
    XMGDM002.XMGDMTL1 = GD3REC.GD3PEND;

    GD3REC.GD3PEND1 = "====|======|======|======|";
    GD3REC.GD3PEND2 = "======|======|=======|====";
    GD3REC.GD3PEND3 = "==                        ";
    XMGDM002.XMGDMTL2 = GD3REC.GD3PEND;
  else
    XMGDM002.XMGDMHED = "ZIT - INTERNATIONAL INCOTERM TABLE - PAGE 1";
    GD3REC.GD3PEND1 = "CODE| ABRV |ENGLISH DESCRI";
    GD3REC.GD3PEND2 = "PTION |SPANISH DESCRIPTION";
    GD3REC.GD3PEND3 = " |FRENCH DESCRIPTION      ";
    XMGDM002.XMGDMTL1 = GD3REC.GD3PEND;

    GD3REC.GD3PEND1 = "====|======|==============";
    GD3REC.GD3PEND2 = "===== |===================";
    GD3REC.GD3PEND3 = " |====================    ";
    XMGDM002.XMGDMTL2 = GD3REC.GD3PEND;
  end

  GD3REC.GD3PEND = " ";
end // end GD0R225

// SET UP ZIT #1 FIELDS
Function GD0R226()
  set GD0RW-ZIT-PAGE1 empty;

  GDWREC.GDWINDX1 = 1;

  if (GDWREC.GDWAIDS != "7")
    if (GDWREC.GDWAIDS != "8")
      if (GDWREC.GDWAIDS != "L")
        GDWREC.GDWINDX2 = 1;
      end
    end
  end

  while (GDWREC.GDWINDX1 <= 14
   && ZITTBL.ZITCD[GDWINDX2] != "99"
  )
    GD0RW-ZIT-PAGE1.ZITCD = ZITTBL.ZITCD[GDWINDX2];
    GD0RW-ZIT-PAGE1.ZITABRV = ZITTBL.ZITABRV[GDWINDX2];
    GD0RW-ZIT-PAGE1.ZITDESC = ZITTBL.ZITDESC[GDWINDX2];
    GD0RW-ZIT-PAGE1.ZITSDESC = ZITTBL.ZITSDESC[GDWINDX2];
    GD0RW-ZIT-PAGE1.ZITFDESC = ZITTBL.ZITFDESC[GDWINDX2];

    XMGDM002.XMGDMLIN[GDWINDX1] = GD0RW-ZIT-PAGE1.GD0RW-ZIT-PGLN1;

    set GD0RW-ZIT-PAGE1 empty;

    GDWREC.GDWINDX1 = GDWREC.GDWINDX1 + 1;
    GDWREC.GDWINDX2 = GDWREC.GDWINDX2 + 1;

  end

  if (ZITTBL.ZITCD[GDWINDX2] == "99")
    GDWREC.GDWEOC = "Y";
    GD3REC.GD3PEND1 = "END OF CSP TABLE DISPLAY R";
    GD3REC.GD3PEND2 = "EACHED.                   ";
    XSGDG22();

  end

  GDWREC.GDWINDX1 = GDWREC.GDWINDX1 - 1;

  GDWREC.GDWINDX3 = 1;

  while (GDWREC.GDWINDX3 <= 14)
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    GDWREC.GDWINDX3 = GDWREC.GDWINDX3 + 1;
  end

  if (GDWREC.GDWAIDS != "7")
    GDWREC.GDWSCAN = GDWREC.GDWINDX2;
  end

end // end GD0R226

// SET UP ZIT #2 FIELDS
Function GD0R227()
  set GD0RW-ZIT-PAGE2 empty;

  GDWREC.GDWINDX1 = 1;

  if (GDWREC.GDWAIDS != "7")
    if (GDWREC.GDWAIDS != "8")
      if (GDWREC.GDWAIDS != "R")
        GDWREC.GDWINDX2 = 1;
      end
    end
  end

  while (GDWREC.GDWINDX1 <= 14
   && ZITTBL.ZITCD[GDWINDX2] != "99")

    GD0RW-ZIT-PAGE2.ZITCD = ZITTBL.ZITCD[GDWINDX2];
    GD0RW-ZIT-PAGE2.ZITABRV = ZITTBL.ZITABRV[GDWINDX2];
    GD0RW-ZIT-PAGE2.ZITPOLFL = ZITTBL.ZITPOLFL[GDWINDX2];
    GD0RW-ZIT-PAGE2.ZITPODFL = ZITTBL.ZITPODFL[GDWINDX2];
    GD0RW-ZIT-PAGE2.ZITWHSFL = ZITTBL.ZITWHSFL[GDWINDX2];
    GD0RW-ZIT-PAGE2.ZITCONFL = ZITTBL.ZITCONFL[GDWINDX2];
    GD0RW-ZIT-PAGE2.ZITFACFL = ZITTBL.ZITFACFL[GDWINDX2];
    GD0RW-ZIT-PAGE2.XXXSTAT = ZITTBL.XXXSTAT[GDWINDX2];

    XMGDM002.XMGDMLIN[GDWINDX1] = GD0RW-ZIT-PAGE2.GD0RW-ZIT-PGLN2;

    set GD0RW-ZIT-PAGE2 empty;

    GDWREC.GDWINDX1 = GDWREC.GDWINDX1 + 1;
    GDWREC.GDWINDX2 = GDWREC.GDWINDX2 + 1;

  end

  if (ZITTBL.ZITCD[GDWINDX2] == "99")
    GDWREC.GDWEOC = "Y";
    GD3REC.GD3PEND1 = "END OF CSP TABLE DISPLAY R";
    GD3REC.GD3PEND2 = "EACHED.                   ";
    XSGDG22();

  end

  GDWREC.GDWINDX1 = GDWREC.GDWINDX1 - 1;

  GDWREC.GDWINDX3 = 1;

  while (GDWREC.GDWINDX3 <= 14)
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    GDWREC.GDWINDX3 = GDWREC.GDWINDX3 + 1;
  end

  if (GDWREC.GDWAIDS != "7")
    GDWREC.GDWSCAN = GDWREC.GDWINDX2;
  end

end // end GD0R227

// SET UP YSN HEADINGS
Function GD0R230()
  set XMGDM002 initial; /* RESET ALL FIELD ATTRIBUTES*/

  XMGDM002.XMGDMDT = VGVar.currentShortGregorianDate;
  XMGDM002.XMGDMMAP = "XMGDM002";
  XMGDM002.XMGDMPRO = "GD0R230";

  XSGDG22();

  if (GD0RW01.GD0RWPTF == "2")
    XMGDM002.XMGDMHED = "YSN - SEASON TABLE BY MARKETING REGION  T-2";

    GD3REC.GD3PEND1 = "GPC PROD ==========SEASON=";
    GD3REC.GD3PEND2 = "===========             ==";
    GD3REC.GD3PEND3 = "=FACTORY ORDER====  STATUS";
    XMGDM002.XMGDMTL1 = GD3REC.GD3PEND;

    GD3REC.GD3PEND1 = "CD  REG  CD YEAR DESCRIPTI";
    GD3REC.GD3PEND2 = "ON     ABRV             BE";
    GD3REC.GD3PEND3 = "GIN DT   END DT     ======";
    XMGDM002.XMGDMTL2 = GD3REC.GD3PEND;
  else
    XMGDM002.XMGDMHED = "YSN - SEASON TABLE BY MARKETING REGION  T-1";

    GD3REC.GD3PEND1 = "GPC PROD ==========SEASON=";
    GD3REC.GD3PEND2 = "===========  OFFER      ==";
    GD3REC.GD3PEND3 = "=====SEASON=======  STATUS";
    XMGDM002.XMGDMTL1 = GD3REC.GD3PEND;

    GD3REC.GD3PEND1 = "CD  REG  CD YEAR DESCRIPTI";
    GD3REC.GD3PEND2 = "ON     ABRV  DATE       BE";
    GD3REC.GD3PEND3 = "GIN DT   END DT     ======";
    XMGDM002.XMGDMTL2 = GD3REC.GD3PEND;
  end

  GD3REC.GD3PEND = " ";
end // end GD0R230

// SET UP YSN #1 FIELDS
Function GD0R231()
     /* ysntbl -- footwear screen display (left side)*/

  set GD0RWYSN empty;

  GDWREC.GDWINDX1 = 1;

  if (GDWREC.GDWAIDS != "7")
    if (GDWREC.GDWAIDS != "8")
      if (GDWREC.GDWAIDS != "L")
        GDWREC.GDWINDX2 = 1;
      end
    end
  end

  while (GDWREC.GDWINDX1 <= 14
   && YSNTBL.XGPCD[GDWINDX2] != "99")

    GD0RWYSN.XGPCD = YSNTBL.XGPCD[GDWINDX2];
    GD0RWYSN.XDR-PROD-REG-CD = YSNTBL.XDR-PROD-REG-CD[GDWINDX2];
    GD0RWYSN.XSECD = YSNTBL.XSECD[GDWINDX2];
    GD0RWYSN.GD0RWSYR = YSNTBL.XSNYR[GDWINDX2];
    GD0RWYSN.XSNDESC = YSNTBL.XSNDESC[GDWINDX2];
    GD0RWYSN.XSNABRV = YSNTBL.XSNABRV[GDWINDX2];
    GD0RWYSN.GD0RWODT = YSNTBL.XSNOFRDT[GDWINDX2];
    GD0RWYSN.GD0RWSBD = YSNTBL.XSN-SESN-BDT[GDWINDX2];
    GD0RWYSN.GD0RWSED = YSNTBL.XSN-SESN-XDT[GDWINDX2];
    GD0RWYSN.XXXSTAT = YSNTBL.XXXSTAT[GDWINDX2];


    XMGDM002.XMGDMLIN[GDWINDX1] = GD0RWYSN.GD0RWSNR;

    set GD0RWYSN empty;

    GDWREC.GDWINDX1 = GDWREC.GDWINDX1 + 1;
    GDWREC.GDWINDX2 = GDWREC.GDWINDX2 + 1;

  end

  if (YSNTBL.XGPCD[GDWINDX2] == "99")
    GDWREC.GDWEOC = "Y";
    GD3REC.GD3PEND1 = "END OF CSP TABLE DISPLAY R";
    GD3REC.GD3PEND2 = "EACHED.                   ";
    XSGDG22();

  end

  GDWREC.GDWINDX1 = GDWREC.GDWINDX1 - 1;

  GDWREC.GDWINDX3 = 1;

  while (GDWREC.GDWINDX3 <= 14)
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    GDWREC.GDWINDX3 = GDWREC.GDWINDX3 + 1;
  end

  if (GDWREC.GDWAIDS != "7")
    GDWREC.GDWSCAN = GDWREC.GDWINDX2;
  end


end // end GD0R231

// SET UP YSN #2 FIELDS
Function GD0R232()
     /* ysntbl -- APPAREL  screen display (left side)*/


  set GD0RWYSN empty;

  GDWREC.GDWINDX1 = 1;

  if (GDWREC.GDWAIDS != "7")
    if (GDWREC.GDWAIDS != "8")
      if (GDWREC.GDWAIDS != "R")
        GDWREC.GDWINDX2 = 1;
      end
    end
  end

  while (GDWREC.GDWINDX1 <= 14
   && YSNTBL.XGPCD[GDWINDX2] != "99")

    GD0RWYSN.XGPCD = YSNTBL.XGPCD[GDWINDX2];
    GD0RWYSN.XDR-PROD-REG-CD = YSNTBL.XDR-PROD-REG-CD[GDWINDX2];
    GD0RWYSN.XSECD = YSNTBL.XSECD[GDWINDX2];
    GD0RWYSN.GD0RWSYR = YSNTBL.XSNYR[GDWINDX2];
    GD0RWYSN.XSNDESC = YSNTBL.XSNDESC[GDWINDX2];
    GD0RWYSN.XSNABRV = YSNTBL.XSNABRV[GDWINDX2];
    GD0RWYSN.GD0RWODT-CHAR = " "; /* SPACE FILL*/
    GD0RWYSN.GD0RWSBD = YSNTBL.XSNFOBDT[GDWINDX2];
    GD0RWYSN.GD0RWSED = YSNTBL.XSNFOXDT[GDWINDX2];
    GD0RWYSN.XXXSTAT = YSNTBL.XXXSTAT[GDWINDX2];


    XMGDM002.XMGDMLIN[GDWINDX1] = GD0RWYSN.GD0RWSNR;

    set GD0RWYSN empty;

    GDWREC.GDWINDX1 = GDWREC.GDWINDX1 + 1;
    GDWREC.GDWINDX2 = GDWREC.GDWINDX2 + 1;

  end

  if (YSNTBL.XGPCD[GDWINDX2] == "99")
    GDWREC.GDWEOC = "Y";
    GD3REC.GD3PEND1 = "END OF CSP TABLE DISPLAY R";
    GD3REC.GD3PEND2 = "EACHED.                   ";
    XSGDG22();

  end

  GDWREC.GDWINDX1 = GDWREC.GDWINDX1 - 1;

  GDWREC.GDWINDX3 = 1;

  while (GDWREC.GDWINDX3 <= 14)
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    GDWREC.GDWINDX3 = GDWREC.GDWINDX3 + 1;
  end

  if (GDWREC.GDWAIDS != "7")
    GDWREC.GDWSCAN = GDWREC.GDWINDX2;
  end

end // end GD0R232

// SET UP XSN HEADINGS
Function GD0R235()
  set XMGDM002 initial; /* RESET ALL FIELD ATTRIBUTES*/

  XMGDM002.XMGDMDT = VGVar.currentShortGregorianDate;
  XMGDM002.XMGDMMAP = "XMGDM002";
  XMGDM002.XMGDMPRO = "GD0R235";

  XSGDG22();

  if (GD0RW01.GD0RWPTF == "2")
    XMGDM002.XMGDMHED = "XHD - PACK AND HANDLING CODE TABLE T-2";

    GD3REC.GD3PEND1 = " KEY   ABBREV  PRI FL  HAN";
    GD3REC.GD3PEND2 = "DLE COST  STATUS          ";
    GD3REC.GD3PEND3 = "                          ";
    XMGDM002.XMGDMTL1 = GD3REC.GD3PEND;

    GD3REC.GD3PEND1 = "=====  ======  ======  ===";
    GD3REC.GD3PEND2 = "========  ======          ";
    GD3REC.GD3PEND3 = "                          ";
    XMGDM002.XMGDMTL2 = GD3REC.GD3PEND;

  else
    XMGDM002.XMGDMHED = "XHD - PACK AND HANDLING CODE TABLE T-2";

    GD3REC.GD3PEND1 = " KEY  DESCRIPTION         ";
    GD3REC.GD3PEND2 = "           ABBREV UNIT    ";
    GD3REC.GD3PEND3 = " UNIT   GL MINUTES CRCY S ";
    XMGDM002.XMGDMTL1 = GD3REC.GD3PEND;

    GD3REC.GD3PEND1 = "===== ====================";
    GD3REC.GD3PEND2 = "========== ======  FL     ";
    GD3REC.GD3PEND3 = "CHARGE  CD ======= ==== T ";
    XMGDM002.XMGDMTL2 = GD3REC.GD3PEND;

  end

  GD3REC.GD3PEND = " ";


end // end GD0R235

// SET UP XHD #1 FIELDS
Function GD0R236()
     /* xhdtbl -- pack and handling code table (left side)*/

  set GD0RW-XHD-PAGE1 empty;

  GDWREC.GDWINDX1 = 1;

  if (GDWREC.GDWAIDS != "7")
    if (GDWREC.GDWAIDS != "8")
      if (GDWREC.GDWAIDS != "L")
        GDWREC.GDWINDX2 = 1;
      end
    end
  end

  while (GDWREC.GDWINDX1 <= 14
   && XHDTBL.XHDKEY[GDWINDX2] != "99999")

    GD0RW-XHD-PAGE1.XHDKEY = XHDTBL.XHDKEY[GDWINDX2];
    GD0RW-XHD-PAGE1.XHDABRV = XHDTBL.XHDABRV[GDWINDX2];
    GD0RW-XHD-PAGE1.XHDDESC = XHDTBL.XHDDESC[GDWINDX2];
    GD0RW-XHD-PAGE1.XHDUCHFL = XHDTBL.XHDUCHFL[GDWINDX2];
    GD0RW01.GD0RW-XHD-CHG = XHDTBL.XHDCHG[GDWINDX2];
    GD0RW-XHD-PAGE1.GD0RW-XHD-CHG-POSN1-6 = GD0RW01.GD0RW-XHD-CHG-POSN1-6;
    GD0RW-XHD-PAGE1.GD0RW-XHD-CHG-DECIMAL = ".";
    GD0RW-XHD-PAGE1.GD0RW-XHD-CHG-POSN7-9 = GD0RW01.GD0RW-XHD-CHG-POSN7-9;
    GD0RW-XHD-PAGE1.GLCD = XHDTBL.GLCD[GDWINDX2];
    GD0RW01.GD0RW-XHDSHMM = XHDTBL.XHDSHMM[GDWINDX2];
    GD0RW-XHD-PAGE1.GD0RW-XHDSHMM-POSN1-2 = GD0RW01.GD0RW-XHDSHMM-POSN1-2;
    GD0RW-XHD-PAGE1.GD0RW-XHDSHMM-DECIMAL = ".";
    GD0RW-XHD-PAGE1.GD0RW-XHDSHMM-POSN3-5 = GD0RW01.GD0RW-XHDSHMM-POSN3-5;
    GD0RW-XHD-PAGE1.ZFC-CRCY-CD = XHDTBL.ZFC-CRCY-CD[GDWINDX2];
    GD0RW-XHD-PAGE1.XXXSTAT = XHDTBL.XXXSTAT[GDWINDX2];

    XMGDM002.XMGDMLIN[GDWINDX1] = GD0RW-XHD-PAGE1.GD0RW-XHD-PGLN1;

    set GD0RW-XHD-PAGE1 empty;


    GDWREC.GDWINDX1 = GDWREC.GDWINDX1 + 1;
    GDWREC.GDWINDX2 = GDWREC.GDWINDX2 + 1;

  end

  if (XHDTBL.XHDKEY[GDWINDX2] == "99999")
    GDWREC.GDWEOC = "Y";
    GD3REC.GD3PEND1 = "END OF CSP TABLE DISPLAY R";
    GD3REC.GD3PEND2 = "EACHED.                   ";
    XSGDG22();

  end

  GDWREC.GDWINDX1 = GDWREC.GDWINDX1 - 1;

  GDWREC.GDWINDX3 = 1;

  while (GDWREC.GDWINDX3 <= 14)
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    GDWREC.GDWINDX3 = GDWREC.GDWINDX3 + 1;
  end

  if (GDWREC.GDWAIDS != "7")
    GDWREC.GDWSCAN = GDWREC.GDWINDX2;
  end


end // end GD0R236

// SET UP XHD #2 FIELDS
Function GD0R237()
     /* xhdtbl -- pack & handling code table (right side)*/


  set GD0RW-XHD-PAGE2 empty;

  GDWREC.GDWINDX1 = 1;

  if (GDWREC.GDWAIDS != "7")
    if (GDWREC.GDWAIDS != "8")
      if (GDWREC.GDWAIDS != "R")
        GDWREC.GDWINDX2 = 1;
      end
    end
  end

  while (GDWREC.GDWINDX1 <= 14
   && XHDTBL.XHDKEY[GDWINDX2] != "99999")

    GD0RW-XHD-PAGE2.XHDKEY = XHDTBL.XHDKEY[GDWINDX2];
    GD0RW-XHD-PAGE2.XHDABRV = XHDTBL.XHDABRV[GDWINDX2];
    GD0RW-XHD-PAGE2.XHDLPIND = XHDTBL.XHDLPIND[GDWINDX2];

    GD0RW01.GD0RW-XHD-HNDL-CST = XHDTBL.XHD-HNDL-CST[GDWINDX2];
    GD0RW-XHD-PAGE2.GD0RW-XHD-HNDL-CST-POSN1-6 = GD0RW01.GD0RW-XHD-HNDL-CST-POSN1-6;
    GD0RW-XHD-PAGE2.GD0RW-XHD-HNDL-CST-DECIMAL = ".";
    GD0RW-XHD-PAGE2.GD0RW-XHD-HNDL-CST-POSN7-9 = GD0RW01.GD0RW-XHD-HNDL-CST-POSN7-9;
    GD0RW-XHD-PAGE2.XXXSTAT = XHDTBL.XXXSTAT[GDWINDX2];


    XMGDM002.XMGDMLIN[GDWINDX1] = GD0RW-XHD-PAGE2.GD0RW-XHD-PGLN2;

    set GD0RW-XHD-PAGE2 empty;

    GDWREC.GDWINDX1 = GDWREC.GDWINDX1 + 1;
    GDWREC.GDWINDX2 = GDWREC.GDWINDX2 + 1;

  end

  if (XHDTBL.XHDKEY[GDWINDX2] == "99999")
    GDWREC.GDWEOC = "Y";
    GD3REC.GD3PEND1 = "END OF CSP TABLE DISPLAY R";
    GD3REC.GD3PEND2 = "EACHED.                   ";
    XSGDG22();

  end

  GDWREC.GDWINDX1 = GDWREC.GDWINDX1 - 1;

  GDWREC.GDWINDX3 = 1;

  while (GDWREC.GDWINDX3 <= 14)
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    GDWREC.GDWINDX3 = GDWREC.GDWINDX3 + 1;
  end

  if (GDWREC.GDWAIDS != "7")
    GDWREC.GDWSCAN = GDWREC.GDWINDX2;
  end


end // end GD0R237

// SET UP XWH HEADINGS
Function GD0R241()
  set XMGDM002 initial; /* RESET ALL FIELD ATTRIBUTES*/

  XMGDM002.XMGDMDT = VGVar.currentShortGregorianDate;
  XMGDM002.XMGDMMAP = "XMGDM002";
  XMGDM002.XMGDMPRO = "GD0R241";

  XSGDG22();

  if (GD0RW01.GD0RWPTF == "2")
    XMGDM002.XMGDMHED = "XWH - WAREHOUSE CODE TABLE - T2";

    GD3REC.GD3PEND1 = "WH   WH    DIVISION   ====";
    GD3REC.GD3PEND2 = "====== GPC CODES =========";
    GD3REC.GD3PEND3 = "  OG SL EDI SAS CH AD LOC ";
    XMGDM002.XMGDMTL1 = GD3REC.GD3PEND;

    GD3REC.GD3PEND1 = "CD  ABRV  01  02  03  01  ";
    GD3REC.GD3PEND2 = "02  03  04  05  06  07  08";
    GD3REC.GD3PEND3 = "  FL FL FL  ID  WH DA CD  ";
    XMGDM002.XMGDMTL2 = GD3REC.GD3PEND;

  else
    XMGDM002.XMGDMHED = "XWH - WAREHOUSE CODE TABLE - T1";

    GD3REC.GD3PEND1 = "WH WAREHOUSE NAME         ";
    GD3REC.GD3PEND2 = "          WH   DA  OR  TP ";
    GD3REC.GD3PEND3 = "CITY                CRCY S";
    XMGDM002.XMGDMTL1 = GD3REC.GD3PEND;

    GD3REC.GD3PEND1 = "CD =======================";
    GD3REC.GD3PEND2 = "=======  ABRV  CD  CD  CD ";
    GD3REC.GD3PEND3 = "=================== ==== T";
    XMGDM002.XMGDMTL2 = GD3REC.GD3PEND;

  end

  GD3REC.GD3PEND = " ";


end // end GD0R241

// SET UP XWH #1 FIELDS
Function GD0R242()
     /* xwhtbl -- warehouse code table (left side)*/

  set GD0RWXWH1 empty;

  GDWREC.GDWINDX1 = 1;

  if (GDWREC.GDWAIDS != "7")
    if (GDWREC.GDWAIDS != "8")
      if (GDWREC.GDWAIDS != "L")
        GDWREC.GDWINDX2 = 1;
      end
    end
  end

  while (GDWREC.GDWINDX1 <= 14
   && XWHTBL.XWHCD[GDWINDX2] != "99")

    GD0RWXWH1.XWHCD = XWHTBL.XWHCD[GDWINDX2];
    GD0RWXWH1.XWHNM = XWHTBL.XWHNM[GDWINDX2];
    GD0RWXWH1.XWHSABRV = XWHTBL.XWHSABRV[GDWINDX2];
    GD0RWXWH1.XDACD = XWHTBL.XDICD[GDWINDX2];
    GD0RWXWH1.XWOCD = XWHTBL.XWOCD[GDWINDX2];
    GD0RWXWH1.XWTCD = XWHTBL.XWTCD[GDWINDX2];
    GD0RWXWH1.GD0RW-XXXCITY = XWHTBL.XXXCITY[GDWINDX2];
    GD0RWXWH1.ZFC-CRCY-CD = XWHTBL.ZFC-CRCY-CD[GDWINDX2];
    GD0RWXWH1.XXXSTAT = XWHTBL.XXXSTAT[GDWINDX2];


    XMGDM002.XMGDMLIN[GDWINDX1] = GD0RWXWH1.GD0RW-XWH-PGLN1;

    GDWREC.GDWINDX1 = GDWREC.GDWINDX1 + 1;

    GD0RWXWH1.XXX-ADDR1 = XWHTBL.XXX-ADDR1[GDWINDX2];
    GD0RWXWH1.XXX-ADDR2 = XWHTBL.XXX-ADDR2[GDWINDX2];


    XMGDM002.XMGDMLIN[GDWINDX1] = GD0RWXWH1.GD0RW-XWH-PGLN1A;

    set GD0RWXWH1 empty;


    GDWREC.GDWINDX1 = GDWREC.GDWINDX1 + 1;
    GDWREC.GDWINDX2 = GDWREC.GDWINDX2 + 1;

  end

  if (XWHTBL.XWHCD[GDWINDX2] == "99")
    GDWREC.GDWEOC = "Y";
    GD3REC.GD3PEND1 = "END OF CSP TABLE DISPLAY R";
    GD3REC.GD3PEND2 = "EACHED.                   ";
    XSGDG22();

  end

  GDWREC.GDWINDX1 = GDWREC.GDWINDX1 - 1;

  GDWREC.GDWINDX3 = 1;

  while (GDWREC.GDWINDX3 <= 14)
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    GDWREC.GDWINDX3 = GDWREC.GDWINDX3 + 1;
  end

  if (GDWREC.GDWAIDS != "7")
    GDWREC.GDWSCAN = GDWREC.GDWINDX2;
  end


end // end GD0R242

// SET UP XWH #1 FIELDS
Function GD0R243()
     /* xwhtbl -- warehouse code table (right side)*/

  set GD0RWXWH2 empty;

  GDWREC.GDWINDX1 = 1;

  if (GDWREC.GDWAIDS != "7")
    if (GDWREC.GDWAIDS != "8")
      if (GDWREC.GDWAIDS != "R")
        GDWREC.GDWINDX2 = 1;
      end
    end
  end

  while (GDWREC.GDWINDX1 <= 14
   && XWHTBL.XWHCD[GDWINDX2] != "99")

    GD0RWXWH2.XWHCD = XWHTBL.XWHCD[GDWINDX2];
    GD0RWXWH2.XWHSABRV = XWHTBL.XWHSABRV[GDWINDX2];
    GD0RWXWH2.XDVCD1 = XWHTBL.XDVCD1[GDWINDX2];
    GD0RWXWH2.XDVCD2 = XWHTBL.XDVCD2[GDWINDX2];
    GD0RWXWH2.XDVCD3 = XWHTBL.XDVCD3[GDWINDX2];
    GD0RWXWH2.XGPCD1 = XWHTBL.XGPCD1[GDWINDX2];
    GD0RWXWH2.XGPCD2 = XWHTBL.XGPCD2[GDWINDX2];
    GD0RWXWH2.XGPCD3 = XWHTBL.XGPCD3[GDWINDX2];
    GD0RWXWH2.XGPCD4 = XWHTBL.XGPCD4[GDWINDX2];
    GD0RWXWH2.XGPCD5 = XWHTBL.XGPCD5[GDWINDX2];
    GD0RWXWH2.XGPCD6 = XWHTBL.XGPCD6[GDWINDX2];
    GD0RWXWH2.XGPCD7 = XWHTBL.XGPCD7[GDWINDX2];
    GD0RWXWH2.XGPCD8 = XWHTBL.XGPCD8[GDWINDX2];
    GD0RWXWH2.XWHOWNGF = XWHTBL.XWHOWNGF[GDWINDX2];
    GD0RWXWH2.XWHSTKLF = XWHTBL.XWHSTKLF[GDWINDX2];
    GD0RWXWH2.XWH-EDI-NOTC-FL = XWHTBL.XWH-EDI-NOTC-FL[GDWINDX2];
    GD0RWXWH2.GD0RW-INASAID = XWHTBL.INASAID[GDWINDX2];
    GD0RWXWH2.XWHCSEFL = XWHTBL.XWHCSEFL[GDWINDX2];
    GD0RWXWH2.GD0RW-XWHPAD = XWHTBL.XWHPAD[GDWINDX2];
    GD0RWXWH2.TSCLOCCD = XWHTBL.TSCLOCCD[GDWINDX2];


    XMGDM002.XMGDMLIN[GDWINDX1] = GD0RWXWH2.GD0RW-XWH-PGLN2;

    GDWREC.GDWINDX1 = GDWREC.GDWINDX1 + 1;

    GD0RWXWH2.XSTCD = XWHTBL.XSTCD[GDWINDX2];
    GD0RWXWH2.XCTCD = XWHTBL.XCTCD[GDWINDX2];
    GD0RWXWH2.XXXZIP = XWHTBL.XXXZIP[GDWINDX2];


    XMGDM002.XMGDMLIN[GDWINDX1] = GD0RWXWH2.GD0RW-XWH-PGLN2A;

    set GD0RWXWH2 empty;


    GDWREC.GDWINDX1 = GDWREC.GDWINDX1 + 1;
    GDWREC.GDWINDX2 = GDWREC.GDWINDX2 + 1;

  end

  if (XWHTBL.XWHCD[GDWINDX2] == "99")
    GDWREC.GDWEOC = "Y";
    GD3REC.GD3PEND1 = "END OF CSP TABLE DISPLAY R";
    GD3REC.GD3PEND2 = "EACHED.                   ";
    XSGDG22();

  end

  GDWREC.GDWINDX1 = GDWREC.GDWINDX1 - 1;

  GDWREC.GDWINDX3 = 1;

  while (GDWREC.GDWINDX3 <= 14)
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    set XMGDM002.XMGDMLIN[GDWINDX3] skip;
    GDWREC.GDWINDX3 = GDWREC.GDWINDX3 + 1;
  end

  if (GDWREC.GDWAIDS != "7")
    GDWREC.GDWSCAN = GDWREC.GDWINDX2;
  end


end // end GD0R243

// CONVERSE MAP
Function GD0R300()
   /* *************************************************************/
   /* PRE-CONVERSELOGIC*/
   /* *************************************************************/

  GDWREC.GDWAIDS = " "; /* RESET PF KEY FLAG VALUE*/
  GDWREC.GDWRECON = " "; /* RESET RECONVERSE FLAG*/
  GDWREC.GDWACCES = " "; /* RESET ACCESS VALUE*/

  converseLib.clearScreen();

  set XMGDM002.XMGDMITM cursor;

  set XMGDM002.XMGDMPFL normal;

  XMGDM002.XMGDMPFL = GD0RW01.GD0RWPFL;

  converse XMGDM002 ;
   /* *************************************************************/
   /* AFTER-CONVERSE LOGIC*/
   /* *************************************************************/

  if (converseVar.eventKey is enter)

    if (XMGDM002.XMGDM2AP is modified
     && XMGDM002.XMGDM2AP != GD3REC.GD304B)

      COMMAREA.CAITEM = XMGDM002.XMGDMITM;
      COMMAREA.CATOAP = XMGDM002.XMGDM2AP;

      XSEXIT();

      XSGD040();
      XSGDG22();

      GDWREC.GDWAIDS = "0";
      GDWREC.GDWRECON = "Y";
      GD0R300();
    end

    if (XMGDM002.XMGDMITM is modified
     && XMGDM002.XMGDMITM != GD3REC.GD320B
     && XMGDM002.XMGDM2AP == GD3REC.GD304B)

      COMMAREA.CAITEM = XMGDM002.XMGDMITM;

      XSGDG90();
      XSGDG22();

      GDWREC.GDWRECON = "Y";
      GD0R300();

    end
  end

  if (converseVar.eventKey is pf7)
    GDWREC.GDWAIDS = "7";
    GD0R310();
  end

  if (converseVar.eventKey is pf8)
    GDWREC.GDWAIDS = "8";
    if (GDWREC.GDWEOC == "Y")
      GD3REC.GD3PEND1 = "END OF CSP TABLE DISPLAY R";
      GD3REC.GD3PEND2 = "EACHED.                   ";
      XSGDG22();
      GD0R300();
    else
      GD0R110();
    end

  end

  if (converseVar.eventKey is pf10)
    GDWREC.GDWAIDS = "L";
    GD0RW01.GD0RWPTF = "1";
    GD0RW01.GD0RWPFL = "PF11 = SCREEN 2";
    GD0R310();
  end

  if (converseVar.eventKey is pf11)
    GDWREC.GDWAIDS = "R";
    GD0RW01.GD0RWPTF = "2";
    GD0RW01.GD0RWPFL = "PF10 = SCREEN 1";
    GD0R310();
  end

  if (converseVar.eventKey is pf4)
    COMMAREA.CAITEM = " ";
    XSPF4();

    XMGDM002.VAGen_EZEMSG = COMMAREA.CAMSG;
    GDWREC.GDWRECON = "Y";
    GDWREC.GDWAIDS = "0";
    GD0R300();
  end

  if (converseVar.eventKey is pf3)
    GDWREC.GDWAIDS = "3";
    COMMAREA.CAITEM = XMGDM002.XMGDMITM;
    COMMAREA.CATOAP = "GD0G";

    XSEXIT();
    XSGDG22();

    GDWREC.GDWRECON = "Y";
    GD0R300();
  end

  if (converseVar.eventKey is pa2)
    GDWREC.GDWAIDS = "Z";
    GD3REC.GD3PEND = " ";
    GD0R110();
  end

  if (GDWREC.GDWAIDS == " ")
    GD3REC.GD3PEND1 = "AN UNSUPPORTED PF KEY WAS ";
    GD3REC.GD3PEND2 = "PRESSED - RETRY....       ";
    GDWREC.GDWRECON = "Y";
    XSGDG22();
    GD0R300();
  end
end // end GD0R300

// POST-CONVERSE LOGIC
Function GD0R310()
  if (GDWREC.GDWAIDS == "7")
    if (GDWICSP == "XWH") /* xwhtbl - warehouse code table*/
      if (GDWREC.GDWINDX2 <= 7
       || GDWREC.GDWSCAN <= 7)

        GDWREC.GDWINDX2 = 1;
      else
        GDWREC.GDWINDX2 = GDWREC.GDWINDX2 - (GDWREC.GDWINDX1 / 2);
        GDWREC.GDWINDX2 = GDWREC.GDWINDX2 - 7;
        GDWREC.GDWSCAN = GDWREC.GDWINDX2;
      end
    else
      if (GDWREC.GDWINDX2 <= 14
       || GDWREC.GDWSCAN <= 14)

        GDWREC.GDWINDX2 = 1;
      else
        GDWREC.GDWINDX2 = GDWREC.GDWINDX2 - GDWREC.GDWINDX1;
        GDWREC.GDWINDX2 = GDWREC.GDWINDX2 - 14;
        GDWREC.GDWSCAN = GDWREC.GDWINDX2;
      end
    end
    if (GDWREC.GDWINDX2 < 1
     || GDWREC.GDWSCAN < 1)
      GDWREC.GDWINDX2 = 1;
    end
    GDWREC.GDWEOC = "N";
    GD0R110();
  else
    if (GDWREC.GDWAIDS == "R"
     || GDWREC.GDWAIDS == "L")
      if (GDWICSP == "XWH") /* xwhtbl - warehouse code table*/
        if (GDWREC.GDWINDX2 <= 7
         || GDWREC.GDWSCAN <= 7)

          GDWREC.GDWINDX2 = 1;
        else
          GDWREC.GDWINDX2 = GDWREC.GDWINDX2 - (GDWREC.GDWINDX1 / 2);
          GDWREC.GDWSCAN = GDWREC.GDWINDX2;
        end
      else
        if (GDWREC.GDWINDX2 <= 14
         || GDWREC.GDWSCAN <= 14)

          GDWREC.GDWINDX2 = 1;
        else
          GDWREC.GDWINDX2 = GDWREC.GDWINDX2 - GDWREC.GDWINDX1;
          GDWREC.GDWSCAN = GDWREC.GDWINDX2;
        end
      end
      if (GDWREC.GDWINDX2 < 1
       || GDWREC.GDWSCAN < 1)
        GDWREC.GDWINDX2 = 1;
      end
      GDWREC.GDWEOC = "N";
      GD0R110();

    end
  end
end // end GD0R310

//*** RECORD=GD0RW-XHD-PAGE1 ****
// display line for xhdtbl
// *******************************
Record GD0RW-XHD-PAGE1 type basicRecord
  10 GD0RW-XHD-PGLN1 GD0RW-XHD-PGLN1 ; 
    20 XHDKEY XHDKEY ; 
    20 * char(1) ; 
    20 XHDDESC XHDDESC ; 
    20 * char(1) ; 
    20 XHDABRV XHDABRV ; 
    20 * char(3) ; 
    20 XHDUCHFL XHDUCHFL ; 
    20 * char(1) ; 
    20 GD0RW-XHD-CHG-POSN1-6 GD0RW-XHD-CHG-POSN1-6 ; 
    20 GD0RW-XHD-CHG-DECIMAL GD0RW-XHD-CHG-DECIMAL ; 
    20 GD0RW-XHD-CHG-POSN7-9 GD0RW-XHD-CHG-POSN7-9 ; 
    20 * char(1) ; 
    20 GLCD GLCD ; 
    20 * char(2) ; 
    20 GD0RW-XHDSHMM-POSN1-2 GD0RW-XHDSHMM-POSN1-2 ; 
    20 GD0RW-XHDSHMM-DECIMAL GD0RW-XHDSHMM-DECIMAL ; 
    20 GD0RW-XHDSHMM-POSN3-5 GD0RW-XHDSHMM-POSN3-5 ; 
    20 * char(2) ; 
    20 ZFC-CRCY-CD ZFC-CRCY-CD ; 
    20 * char(1) ; 
    20 XXXSTAT XXXSTAT ; 
    20 * char(1) ; 
end // end GD0RW-XHD-PAGE1

//*** RECORD=GD0RW-XHD-PAGE2 ****
// display line for xhdtbl
// *******************************
Record GD0RW-XHD-PAGE2 type basicRecord
  10 GD0RW-XHD-PGLN2 GD0RW-XHD-PGLN2 ; 
    20 XHDKEY XHDKEY ; 
    20 * char(2) ; 
    20 XHDABRV XHDABRV ; 
    20 * char(4) ; 
    20 XHDLPIND XHDLPIND ; 
    20 * char(6) ; 
    20 GD0RW-XHD-HNDL-CST-POSN1-6 GD0RW-XHD-HNDL-CST-POSN1-6 ; 
    20 GD0RW-XHD-HNDL-CST-DECIMAL GD0RW-XHD-HNDL-CST-DECIMAL ; 
    20 GD0RW-XHD-HNDL-CST-POSN7-9 GD0RW-XHD-HNDL-CST-POSN7-9 ; 
    20 * char(4) ; 
    20 XXXSTAT XXXSTAT ; 
    20 * char(39) ; 
end // end GD0RW-XHD-PAGE2

Record GD0RW-XRO-PAGE1 type basicRecord
  5 GD0RW-XRO-PGLN1 GD0RW-XRO-PGLN1 ; 
    10 XROCD XROCD ; 
    10 * char(1) ; 
    10 XROPDEST XROPDEST ; 
    10 * char(1) ; 
    10 XROABRV XROABRV ; 
    10 * char(1) ; 
    10 XRODESC XRODESC ; 
    10 * char(2) ; 
    10 XROHSFL XROHSFL ; 
    10 * char(2) ; 
    10 XROCPFL XROCPFL ; 
    10 * char(3) ; 
    10 XROSOFL XROSOFL ; 
    10 * char(2) ; 
    10 XROWHFL XROWHFL ; 
    10 * char(3) ; 
    10 XROCRFL XROCRFL ; 
    10 * char(2) ; 
    10 XROOPFL XROOPFL ; 
    10 * char(2) ; 
    10 XROISFL XROISFL ; 
    10 * char(2) ; 
    10 XROACFL XROACFL ; 
    10 * char(4) ; 
    10 XROPRFL XROPRFL ; 
    10 * char(3) ; 
    10 XROPFFL XROPFFL ; 
end // end GD0RW-XRO-PAGE1

Record GD0RW-XRO-PAGE2 type basicRecord
  5 GD0RW-XRO-PGLN2 GD0RW-XRO-PGLN2 ; 
    10 XROCD XROCD ; 
    10 * char(1) ; 
    10 XROPDEST XROPDEST ; 
    10 * char(1) ; 
    10 XROABRV XROABRV ; 
    10 * char(2) ; 
    10 XROPKFL XROPKFL ; 
    10 * char(2) ; 
    10 XROSLFL XROSLFL ; 
    10 * char(2) ; 
    10 XROSRFL XROSRFL ; 
    10 * char(3) ; 
    10 XRODPKFL XRODPKFL ; 
    10 * char(5) ; 
    10 XRODSLFL XRODSLFL ; 
    10 * char(4) ; 
    10 XROSMFL XROSMFL ; 
    10 * char(2) ; 
    10 XWHCD1 XWHCD1 ; 
    10 * char(2) ; 
    10 XWHCD2 XWHCD2 ; 
    10 * char(2) ; 
    10 XWHCD3 XWHCD3 ; 
    10 * char(4) ; 
    10 XXXSTAT XXXSTAT ; 
end // end GD0RW-XRO-PAGE2

//*** RECORD=GD0RW-YNT-PAGE1 ****
// YNTTBL RECORD DEFINITION
// *******************************
Record GD0RW-YNT-PAGE1 type basicRecord
  10 GD0RW-YNT-PGLN1 GD0RW-YNT-PGLN1 ; 
    20 YNTCD YNTCD ; 
    20 * char(2) ; 
    20 YNTDESC YNTDESC ; 
    20 * char(1) ; 
    20 YNTABRV YNTABRV ; 
    20 * char(2) ; 
    20 YNTPCKFL YNTPCKFL ; 
    20 * char(3) ; 
    20 YNTLOCFL YNTLOCFL ; 
    20 * char(3) ; 
    20 YNTFCSFL YNTFCSFL ; 
    20 * char(3) ; 
    20 YNTUOSFL YNTUOSFL ; 
    20 * char(3) ; 
    20 GD0RWUPC GD0RWUPC ; 
    20 * char(2) ; 
    20 GD0RW-CLN1-3 GD0RW-CLN1-3 ; 
    20 GD0RW-CLN-DESC GD0RW-CLN-DESC ; 
    20 GD0RW-CLN4-5 GD0RW-CLN4-5 ; 
    20 * char(1) ; 
    20 GD0RW-CHG1-3 GD0RW-CHG1-3 ; 
    20 GD0RW-CHG-DESC GD0RW-CHG-DESC ; 
    20 GD0RW-CHG4-5 GD0RW-CHG4-5 ; 
    20 * char(1) ; 
    20 GD0RW-CWD1-3 GD0RW-CWD1-3 ; 
    20 GD0RW-CWD-DECM GD0RW-CWD-DECM ; 
    20 GD0RW-CWD4-5 GD0RW-CWD4-5 ; 
    20 * char(3) ; 
end // end GD0RW-YNT-PAGE1

//*** RECORD=GD0RW-YNT-PAGE2 ****
// YNTTBL RECORD DEFINITION
// *******************************
Record GD0RW-YNT-PAGE2 type basicRecord
  10 GD0RW-YNT-PGLN2 GD0RW-YNT-PGLN2 ; 
    20 YNTCD YNTCD ; 
    20 * char(2) ; 
    20 YNTABRV YNTABRV ; 
    20 * char(1) ; 
    20 GD0RW-CFT1-3 GD0RW-CFT1-3 ; 
    20 GD0RW-CFT-DECM GD0RW-CFT-DECM ; 
    20 GD0RW-CFT3-4 GD0RW-CFT3-4 ; 
    20 * char(1) ; 
    20 GD0RW-CWT1-3 GD0RW-CWT1-3 ; 
    20 GD0RW-CWT-DECM GD0RW-CWT-DECM ; 
    20 GD0RW-CWT4-5 GD0RW-CWT4-5 ; 
    20 * char(2) ; 
    20 YNTHNGFL YNTHNGFL ; 
    20 * char(4) ; 
    20 YNT-CRTN-OVSZ-FL YNT-CRTN-OVSZ-FL ; 
    20 * char(4) ; 
    20 XGPCD XGPCD ; 
    20 * char(3) ; 
    20 SY1STNBR SY1STNBR ; 
    20 * char(2) ; 
    20 XBCCD XBCCD ; 
    20 * char(5) ; 
    20 XXXSTAT XXXSTAT ; 
    20 * char(21) ; 
end // end GD0RW-YNT-PAGE2

Record GD0RW-ZIT-PAGE1 type basicRecord
  5 GD0RW-ZIT-PGLN1 GD0RW-ZIT-PGLN1 ; 
    10 * char(1) ; 
    10 ZITCD ZITCD ; 
    10 * char(2) ; 
    10 ZITABRV ZITABRV ; 
    10 * char(1) ; 
    10 ZITDESC ZITDESC ; 
    10 * char(1) ; 
    10 ZITSDESC ZITSDESC ; 
    10 * char(1) ; 
    10 ZITFDESC ZITFDESC ; 
    10 * char(4) ; 
end // end GD0RW-ZIT-PAGE1

Record GD0RW-ZIT-PAGE2 type basicRecord
  5 GD0RW-ZIT-PGLN2 GD0RW-ZIT-PGLN2 ; 
    10 * char(1) ; 
    10 ZITCD ZITCD ; 
    10 * char(2) ; 
    10 ZITABRV ZITABRV ; 
    10 * char(4) ; 
    10 ZITPOLFL ZITPOLFL ; 
    10 * char(5) ; 
    10 ZITPODFL ZITPODFL ; 
    10 * char(7) ; 
    10 ZITWHSFL ZITWHSFL ; 
    10 * char(6) ; 
    10 ZITCONFL ZITCONFL ; 
    10 * char(6) ; 
    10 ZITFACFL ZITFACFL ; 
    10 * char(6) ; 
    10 XXXSTAT XXXSTAT ; 
    10 * char(27) ; 
end // end GD0RW-ZIT-PAGE2

//*** RECORD=GD0RW01 ****
// WORKING-STORAGE AREA FOR GD0R
// ***********************
Record GD0RW01 type basicRecord
  5 GD0RWPTF GD0RWPTF ; 
  5 GD0RWPFL GD0RWPFL ; 
  5 GD0RW-EDIT-NUM5DEC2 GD0RW-EDIT-NUM5DEC2 ; 
    10 GD0RW-EDIT-NUM3 GD0RW-EDIT-NUM3 ; 
    10 GD0RW-EDIT-NUM2 GD0RW-EDIT-NUM2 ; 
  5 GD0RW-XHD-HNDL-CST GD0RW-XHD-HNDL-CST ; 
    10 GD0RW-XHD-HNDL-CST-POSN1-6 GD0RW-XHD-HNDL-CST-POSN1-6 ; 
    10 GD0RW-XHD-HNDL-CST-POSN7-9 GD0RW-XHD-HNDL-CST-POSN7-9 ; 
  5 GD0RW-XHD-CHG GD0RW-XHD-CHG ; 
    10 GD0RW-XHD-CHG-POSN1-6 GD0RW-XHD-CHG-POSN1-6 ; 
    10 GD0RW-XHD-CHG-POSN7-9 GD0RW-XHD-CHG-POSN7-9 ; 
  5 GD0RW-XHDSHMM GD0RW-XHDSHMM ; 
    10 GD0RW-XHDSHMM-POSN1-2 GD0RW-XHDSHMM-POSN1-2 ; 
    10 GD0RW-XHDSHMM-POSN3-5 GD0RW-XHDSHMM-POSN3-5 ; 
end // end GD0RW01

//*** RECORD=GD0RWPT1 ****
// XPTTBL DISPLAY RECORD   - LEFT HALF DISPLAY (#1)
// ************************
Record GD0RWPT1 type basicRecord
  10 GD0RWPTR GD0RWPTR ; 
    15 * char(1) ; 
    15 XPTCD XPTCD ; 
    15 * char(4) ; 
    15 XPTDESC XPTDESC ; 
    15 * char(3) ; 
    15 XPTABRV XPTABRV ; 
    15 * char(5) ; 
    15 XPTPCT XPTPCT ; 
    15 * char(5) ; 
    15 XPTDAYS XPTDAYS ; 
    15 * char(4) ; 
    15 XPTDFRD XPTDFRD ; 
    15 * char(4) ; 
    15 XXXSTAT XXXSTAT ; 
    15 * char(2) ; 
end // end GD0RWPT1

//*** RECORD=GD0RWPT2 ****
// XPTTBL DISPLAY RECORD   - RIGHT HALF DISPLAY (#2)
// ************************
Record GD0RWPT2 type basicRecord
  10 GD0RWPTG GD0RWPTG ; 
    15 * char(1) ; 
    15 XPTCD XPTCD ; 
    15 * char(2) ; 
    15 XPTABRV XPTABRV ; 
    15 * char(3) ; 
    15 XPTEOMFL XPTEOMFL ; 
    15 * char(3) ; 
    15 XPTEOMDY XPTEOMDY ; 
    15 * char(4) ; 
    15 XPTEOMPY XPTEOMPY ; 
    15 * char(3) ; 
    15 XPTEOMMO XPTEOMMO ; 
    15 * char(3) ; 
    15 XPTCTRLI XPTCTRLI ; 
    15 * char(3) ; 
    15 XPTSHDTI XPTSHDTI ; 
    15 * char(5) ; 
    15 XPTLCFL XPTLCFL ; 
    15 * char(4) ; 
    15 GD0RWDDT GD0RWDDT ; 
    15 * char(3) ; 
    15 GD0RWFRD GD0RWFRD ; 
    15 * char(5) ; 
    15 XXXSTAT XXXSTAT ; 
    15 * char(4) ; 
end // end GD0RWPT2

//*** RECORD=GD0RWQT1 ****
// XPTTBL DISPLAY RECORD   - LEFT HALF DISPLAY (#1)
// ************************
Record GD0RWQT1 type basicRecord
  10 GD0RWQTR GD0RWQTR ; 
    15 XQTCD XQTCD ; 
    15 * char(4) ; 
    15 XGPCD XGPCD ; 
    15 * char(4) ; 
    15 XQTDESC1 XQTDESC1 ; 
    15 * char(5) ; 
    15 XXXSTAT XXXSTAT ; 
    15 * char(24) ; 
end // end GD0RWQT1

//*** RECORD=GD0RWQT2 ****
// XPTTBL DISPLAY RECORD   - RIGHT HALF DISPLAY (#2)
// ************************
Record GD0RWQT2 type basicRecord
  10 GD0RWQTG GD0RWQTG ; 
    15 XQTCD XQTCD ; 
    15 * char(2) ; 
    15 XQTDESC2 XQTDESC2 ; 
    15 * char(1) ; 
    15 XQTDESC3 XQTDESC3 ; 
    15 * char(1) ; 
    15 XXXSTAT XXXSTAT ; 
end // end GD0RWQT2

//*** RECORD=GD0RWSN ****
// **** used by gd0r to dump XSNtbl
// ***********************
Record GD0RWSN type basicRecord
  10 GD0RWSNR GD0RWSNR ; 
    20 GD0RWODT GD0RWODT ; 
    20 * char(4) ; 
    20 XSECD XSECD ; 
    20 * char(4) ; 
    20 GD0RWSYR GD0RWSYR ; 
    20 * char(4) ; 
    20 XSNDESC XSNDESC ; 
    20 * char(4) ; 
    20 GD0RWSBD GD0RWSBD ; 
    20 * char(4) ; 
    20 GD0RWSED GD0RWSED ; 
    20 * char(6) ; 
    20 XXXSTAT XXXSTAT ; 
    20 * char(3) ; 
end // end GD0RWSN

Record GD0RWXWH1 type basicRecord
  10 GD0RW-XWH-PGLN1 GD0RW-XWH-PGLN1 ; 
    20 XWHCD XWHCD ; 
    20 * char(1) ; 
    20 XWHNM XWHNM ; 
    20 * char(1) ; 
    20 XWHSABRV XWHSABRV ; 
    20 * char(1) ; 
    20 XDACD XDACD ; 
    20 * char(2) ; 
    20 XWOCD XWOCD ; 
    20 * char(2) ; 
    20 XWTCD XWTCD ; 
    20 * char(1) ; 
    20 GD0RW-XXXCITY GD0RW-XXXCITY ; 
    20 * char(1) ; 
    20 ZFC-CRCY-CD ZFC-CRCY-CD ; 
    20 * char(2) ; 
    20 XXXSTAT XXXSTAT ; 
  10 GD0RW-XWH-PGLN1A GD0RW-XWH-PGLN1A ; 
    20 * char(3) ; // XWH_WHSE_CD
    20 XXX-ADDR1 XXX-ADDR1 ; 
    20 XXX-ADDR2 XXX-ADDR2 ; 
end // end GD0RWXWH1

Record GD0RWXWH2 type basicRecord
  10 GD0RW-XWH-PGLN2 GD0RW-XWH-PGLN2 ; 
    20 XWHCD XWHCD ; 
    20 * char(1) ; 
    20 XWHSABRV XWHSABRV ; 
    20 * char(1) ; 
    20 XDVCD1 XDVCD1 ; 
    20 * char(2) ; 
    20 XDVCD2 XDVCD2 ; 
    20 * char(2) ; 
    20 XDVCD3 XDVCD3 ; 
    20 * char(2) ; 
    20 XGPCD1 XGPCD1 ; 
    20 * char(2) ; 
    20 XGPCD2 XGPCD2 ; 
    20 * char(2) ; 
    20 XGPCD3 XGPCD3 ; 
    20 * char(2) ; 
    20 XGPCD4 XGPCD4 ; 
    20 * char(2) ; 
    20 XGPCD5 XGPCD5 ; 
    20 * char(2) ; 
    20 XGPCD6 XGPCD6 ; 
    20 * char(2) ; 
    20 XGPCD7 XGPCD7 ; 
    20 * char(2) ; 
    20 XGPCD8 XGPCD8 ; 
    20 * char(2) ; 
    20 XWHOWNGF XWHOWNGF ; 
    20 * char(2) ; 
    20 XWHSTKLF XWHSTKLF ; 
    20 * char(2) ; 
    20 XWH-EDI-NOTC-FL XWH-EDI-NOTC-FL ; 
    20 * char(3) ; 
    20 GD0RW-INASAID GD0RW-INASAID ; 
    20 * char(1) ; 
    20 XWHCSEFL XWHCSEFL ; 
    20 * char(2) ; 
    20 GD0RW-XWHPAD GD0RW-XWHPAD ; 
    20 * char(1) ; 
    20 TSCLOCCD TSCLOCCD ; 
  10 GD0RW-XWH-PGLN2A GD0RW-XWH-PGLN2A ; 
    20 * char(3) ; 
    20 XSTCD XSTCD ; 
    20 * char(2) ; 
    20 XCTCD XCTCD ; 
    20 * char(2) ; 
    20 XXXZIP XXXZIP ; 
    20 * char(55) ; 
end // end GD0RWXWH2

//*** RECORD=GD0RWYSN ****
// **** used by gd0r to dump XSNtbl
// ************************
Record GD0RWYSN type basicRecord
  10 GD0RWSNR GD0RWSNR ; 
    20 XGPCD XGPCD ; 
    20 * char(2) ; 
    20 XDR-PROD-REG-CD XDR-PROD-REG-CD ; 
    20 * char(3) ; 
    20 XSECD XSECD ; 
    20 * char(1) ; 
    20 GD0RWSYR GD0RWSYR ; 
    20 * char(1) ; 
    20 XSNDESC XSNDESC ; 
    20 * char(1) ; 
    20 XSNABRV XSNABRV ; 
    20 * char(2) ; 
    20 GD0RWODT-CHAR char(9) ; // offer date
      25 GD0RWODT GD0RWODT ; 
    20 * char(2) ; 
    20 GD0RWSBD GD0RWSBD ; 
    20 * char(2) ; 
    20 GD0RWSED GD0RWSED ; 
    20 * char(4) ; 
    20 XXXSTAT XXXSTAT ; 
    20 * char(3) ; 
end // end GD0RWYSN

// DECIMAL POSITION
DataItem GD0RW-CFT-DECM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CARTON CLASS LENGTH
DataItem GD0RW-CFT1-3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CARTON CLASS LENGTH
DataItem GD0RW-CFT3-4 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DECIMAL POSITION
DataItem GD0RW-CHG-DESC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CARTON CLASS LENGTH
DataItem GD0RW-CHG1-3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CARTON CLASS LENGTH
DataItem GD0RW-CHG4-5 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem GD0RW-CLN-DESC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem GD0RW-CLN1-3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem GD0RW-CLN4-5 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DECIMAL POSITION
DataItem GD0RW-CWD-DECM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CARTON CLASS LENGTH
DataItem GD0RW-CWD1-3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CARTON CLASS LENGTH
DataItem GD0RW-CWD4-5 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DECIMAL POSITION
DataItem GD0RW-CWT-DECM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CARTON CLASS LENGTH
DataItem GD0RW-CWT1-3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CARTON CLASS LENGTH
DataItem GD0RW-CWT4-5 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem GD0RW-EDIT-NUM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem GD0RW-EDIT-NUM3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem GD0RW-EDIT-NUM5DEC2 num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// IN_SAS_ID
DataItem GD0RW-INASAID num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// numeric display xhd-chg
DataItem GD0RW-XHD-CHG num(9,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// handling charge -- decimal
DataItem GD0RW-XHD-CHG-DECIMAL char(1)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// xhd-chg posn 1-6
DataItem GD0RW-XHD-CHG-POSN1-6 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xhd-chg posn 7-9
DataItem GD0RW-XHD-CHG-POSN7-9 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric display xhd-hndl-cst
DataItem GD0RW-XHD-HNDL-CST num(9,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// handling charge -- decimal
DataItem GD0RW-XHD-HNDL-CST-DECIMAL char(1)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

DataItem GD0RW-XHD-HNDL-CST-POSN1-6 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xhd-hndl-cst posn 7-9
DataItem GD0RW-XHD-HNDL-CST-POSN7-9 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem GD0RW-XHD-PGLN1 char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem GD0RW-XHD-PGLN2 char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric display xhdshmm
DataItem GD0RW-XHDSHMM num(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// handling minimum-- decimal
DataItem GD0RW-XHDSHMM-DECIMAL char(1)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// xhdxhmm posn 1-2
DataItem GD0RW-XHDSHMM-POSN1-2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xhdxhmm posn 3-5
DataItem GD0RW-XHDSHMM-POSN3-5 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem GD0RW-XRO-PGLN1 char(76)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem GD0RW-XRO-PGLN2 char(61)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem GD0RW-XWH-PGLN1 char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem GD0RW-XWH-PGLN1A char(79)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem GD0RW-XWH-PGLN2 char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem GD0RW-XWH-PGLN2A char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// IN_SAS_ID
DataItem GD0RW-XWHPAD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// city
DataItem GD0RW-XXXCITY char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem GD0RW-YNT-PGLN1 char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem GD0RW-YNT-PGLN2 char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem GD0RW-ZIT-PGLN1 char(78)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem GD0RW-ZIT-PGLN2 char(78)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// xpt-pterm-dsct-dt
DataItem GD0RWDDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xpt-defrd-dt
DataItem GD0RWFRD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// offer date
DataItem GD0RWODT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PF LITERAL HOLD AREA FOR MAP
DataItem GD0RWPFL char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1=LEFT 2=RIGHT (SCROLL FLAG)
DataItem GD0RWPTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem GD0RWPTG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem GD0RWPTR char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem GD0RWQTG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem GD0RWQTR char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// beginning date
DataItem GD0RWSBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ending date
DataItem GD0RWSED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem GD0RWSNR char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season year range
DataItem GD0RWSYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// UNITS PER CASE
DataItem GD0RWUPC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

