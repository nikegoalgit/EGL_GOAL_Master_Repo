package gd0g;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.XMGDM;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import gd.common.*;
import ta.common.*;
//*** PROGRAM=GD0G ****
//  Nike on-line CSP table display menu.
//  Nike on-line CSP table display menu.
// 
//  Overview:
// 
//     The purpose of the GD0G table display application is to
//  allow the users of a CSP table access to these tables in a
//  fast and efficient manner, both for the first time user who
//  is unfamiliar with the system and the CSP tables, and also
//  the experianced user who needs quick access to a specific
//  table.
// 
//    For the user who knows which table they require
//  information from, A fast path method is provided in which
//  the user may enter the code for the required table in the
//  item field of the calling application, and be passed thru
//  the table display application, to the specific CSP table
//  field display application which will then display the
//  values in that table.
// 
//    For the casual and first time user, a screen of all the
//  valid CSP tables is required along with description of
//  each. These tables are to be displayed in alphabetic order
//  on the screen in a manner, in which the user may make a
//  entry that will take them to the application which displays
//  that specific CSP table, the fields of that table and the
//  contents of those fields.
// 
// 
//  DATE CREATED: 05/19/86
//        AUTHOR: RICK CONNOLY
// 
//  MAINTENANCE HISTORY:
// 
//     DATE      BY WHOM           OVERVIEW OF CHANGES MADE
//   --------  -----------     --------------------------------
//   10-12-88  JWOOD           CHECKED FOR NONCSP CALLS
//   11-11-88  JWOOD           added xssegtr logic
//   09-17-94  vcowan          re-gen'd for xmgdm changes
// *********************
Program GD0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  GD3REC GD3REC; // record
  GDWREC GDWREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGLTBL {deleteAfterUse = yes}; // table
  use XMGDM.XMGDM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    GD0G100: GD0G100();
    goto GD0G200;
     /* *******************************************************/



    GD0G200: GD0G200();
    goto GD0G300;
     /* ************************************************************/



    GD0G300: GD0G300();

     /* ************************************************************/

     /* ************************************************************/
     /* * The flags GDWRECON, GDWAIDS, and GDWACCES are set       **/
     /* * independently of each other.  each flag is reset in the **/
     /* * before stage of GD0G300.                                **/
     /* ************************************************************/


    if (GDWREC.GDWRECON == "Y") /* reconverse map*/

      goto GD0G300;

    end


    if (GDWREC.GDWAIDS == "7") /* scroll table up.*/

      if (GDWREC.GDWINDX2 <= 28
       || GDWREC.GDWSCAN <= 28)

        GDWREC.GDWINDX2 = 1;

      else

        GDWREC.GDWINDX2 = GDWREC.GDWINDX2 - GDWREC.GDWINDX1;
        GDWREC.GDWINDX2 = GDWREC.GDWINDX2 - 28;
        GDWREC.GDWSCAN = GDWREC.GDWINDX2;

      end

      if (GDWREC.GDWINDX2 < 1
       || GDWREC.GDWSCAN < 1)

        GDWREC.GDWINDX2 = 1;

      end

      GDWREC.GDWEOC = "N";

      goto GD0G200; /* recoverse map*/

    end /* not PF7.*/


    if (GDWREC.GDWAIDS == "8") /* scroll table down.*/

      goto GD0G200; /* recoverse map*/

    end /* not PF8.*/


    if (GDWREC.GDWAIDS == "Z") /* cancel and converse blank map*/

      GD3REC.GD3PEND = " ";
      goto GD0G200; /* sets map clear, reloads date, and pending messages.*/

    else /* unsupported key.*/

      goto GD0G300;

    end



  end // end main
end // end GD0G

// Check fast path and initialize
Function GD0G100()


     /* ********************************************************/
     /* * This process intializes program work areas, checks  **/
     /* * user security, and edits the option and item field. **/
     /* *              Flow to GD0G250                        **/
     /* ********************************************************/

     /* check security.*/

   /* ************************************************************/
  XSENTRY(); /* removed for testing*/
   /* ************************************************************/

   /* ************************************************************/
  XSSEGTR(); /* 11/88 jw - set segmented trans id*/
   /* ************************************************************/

   /* MOVE 'CSP' TO COMMAREA.CASYSINT ; by security for testing*/
   /* MOVE 'RCONNO' TO COMMAREA.CAUSERID; by security for testing*/

  set GD3REC empty;
  set GDWREC empty;
  GD3REC.GD349B = " "; /* initialize working storage.*/
  GDWREC.GDWFLAGS = " "; /* initialize application flags.*/

     /* Find commarea.cafromap on table, if not there, save*/
     /* original application name in working storage.*/

  GDWREC.GDWTID = COMMAREA.CAFROMAP;
  if (GDWREC.GDWTID in XGLTBL.XGLTAPP)
    XSGDG12();
  else
    XSGDG14();
  end

  if (GDWREC.GDWEDIT == "F")

       /* not found on table, means it must be users application.*/
       /* save users application for PF2 direct return.*/

    GDWREC.GDWFMAPP = COMMAREA.CAFROMAP;
  end

  if (COMMAREA.CAITEM != GD3REC.GD320B) /* does item field have data.*/

            /* The first three bytes of the item field are the csp*/
       /* option. ,*/

    GDWREC.GDWITEM = COMMAREA.CAITEM; /* take it apart,*/

       /* Retreive the first column of the csp table based on the*/
       /* item option.  If the specified item is not a csp table*/
       /* then it must be an error. In this case display the csp*/
       /* tables as we normally would but with an error message*/
       /* for a invalid csp table option.*/

              /* SEARCH FOR SPECIFIED OPTION ON CSP TABLE.*/

    XSGDG10(); /* search for specified option on csp.*/

    if (GDWREC.GDWEDIT == "P") /* tran code found on csp*/

      COMMAREA.CATOAP = XGLTBL.XGLTAPP[sysVar.arrayIndex];
      COMMAREA.CAITEM = GDWREC.GDWITEM;

      if (COMMAREA.CATOAP == "KM0Q")
        COMMAREA.CAITEM = 2;
      end

      XSEXIT(); /* link to display transaction.*/

      XSGD040(); /* transfer failed, format message,*/
      GD0GS20(); /* and move to GD0GM001.EZEMSG*/


    else /* not on table, must be outside CSP table appl.*/

      GD3REC.GD3PEND1 = "INVALID HELP OPTION.  VERI";
      GD3REC.GD3PEND2 = "FY THAT NAME IS CORRECT AN";
      GD3REC.GD3PEND3 = "D TRY AGAIN.     (GD0G100)";

        /* message pending, moved into ezemsg during map setup.*/

    end /* if found on CSP table.*/

  end /* item field blank.  default to main menu.*/

  exit stack;




   /* *************************************************************/
end // end GD0G100

// clear screen, format display
Function GD0G200()


     /* *********************************************************/
     /* *          This process does the following:            **/
     /* *    Set all heading values needed for a new screen    **/
     /* *    format the new screen with the required table     **/
     /* *    values the protects those fields from the user.   **/
     /* *    DISPLAY ANY PENDING MESSAGE.                      **/
     /* *             Flow to GD0G200 or GD0G300               **/
     /* *********************************************************/


  set XMGDM001 initial; /* resets all field attributes.*/

  XMGDM001.XMGDMDT = VGVar.currentShortGregorianDate;
  XMGDM001.XMGDMMAP = "XMGDM001";
  XMGDM001.XMGDMPRO = "GD0G200";

  GD0GS20();

  XSGD015(); /* format screen and fields to askip attribute.*/

  set XMGDM001.XMGDMITM cursor; /* put cursor on Tran ID field.*/



   /* ************************************************************/
end // end GD0G200

// display csp tables on screen
Function GD0G300()



     /* *********************************************************/
     /* *           This process does the following:           **/
     /* *********************************************************/


  GDWREC.GDWAIDS = " "; /* reset pf key flag.*/
  GDWREC.GDWRECON = " "; /* reset reconverse flag.*/
  GDWREC.GDWACCES = " "; /* reset access flag.*/

  set XMGDM001.XMGDMITM cursor;

  converseLib.clearScreen();

   /* ************************************************************/
  converse XMGDM001 ;
   /* ************************************************************/



  if (converseVar.eventKey is enter)
    GDWREC.GDWAIDS = "0"; /* set key flag for flow stage.*/

    if (XMGDM001.XMGDM2AP is modified
     && XMGDM001.XMGDM2AP != GD3REC.GD304B) /* and not spaces*/

      COMMAREA.CAITEM = XMGDM001.XMGDMITM;
      COMMAREA.CATOAP = XMGDM001.XMGDM2AP;

      XSEXIT(); /* link to specified application.*/

      XSGD040(); /* If the link fails, A message is*/
                                   /* formatted,*/
      GD0GS20();
                                   /* and moved into GD0g.EZEMSG.*/

      GDWREC.GDWRECON = "Y"; /* reconverse, message*/
      exit stack;

    end /* fast path field not modified.*/

    if (XMGDM001.XMGDMITM is modified /* item entered*/
     && XMGDM001.XMGDMITM != GD3REC.GD320B) /* and not spaces*/

      COMMAREA.CAITEM = XMGDM001.XMGDMITM;

      XSGDG90(); /* determine desired application, and link.*/
      GD0GS20(); /* if link fails, a message is formated and*/
                          /* moved into GD0Z.EZEMSG.*/

      GDWREC.GDWRECON = "Y"; /* reconverse, message*/
      exit stack;

    end /* item field not modified.*/

  end /* not ENTER*/


  if (converseVar.eventKey is pf7) /* scroll up csp display table.*/
    GDWREC.GDWAIDS = "7";
    exit stack;

  end


  if (converseVar.eventKey is pf8) /* scroll down csp display table.*/
    GDWREC.GDWAIDS = "8";
    if (GDWREC.GDWEOC == "Y")
      GD3REC.GD3PEND1 = "END OF CSP TABLE DISPLAY R";
      GD3REC.GD3PEND2 = "EACHED.                   ";
      GDWREC.GDWRECON = "Y"; /* set reconverse flag.*/
      GD0GS20();
    end

    exit stack;

  end

  if (converseVar.eventKey is pf4)
    COMMAREA.CAITEM = " ";
    XSPF4(); /* return to main goal menu.*/

    XMGDM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    GDWREC.GDWRECON = "Y"; /* set reconverse flag.*/
    GDWREC.GDWAIDS = "0";
    exit stack;

  end

  if (converseVar.eventKey is pf3) /* return to goal text display menu.*/

    COMMAREA.CATOAP = "GD00";
    COMMAREA.CAITEM = "    ";

    XSEXIT();

    XMGDM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    GDWREC.GDWRECON = "Y"; /* set reconverse flag.*/
    GDWREC.GDWAIDS = "0";
    exit stack;

  end

  if (converseVar.eventKey is pa2) /* converse map from gd0g200 execute.*/
    GDWREC.GDWAIDS = "Z";
    exit stack;

  else /* Invalid pf key was pressed, send nastygram to user.*/

    GD3REC.GD3PEND1 = "AN UNSUPPORTED PF KEY WAS ";
    GD3REC.GD3PEND2 = "PRESSED - RETRY.          ";
    GDWREC.GDWRECON = "Y"; /* set reconverse flag.*/
    GD0GS20();

    exit stack;

  end



   /* ************************************************************/
end // end GD0G300

// Move message field to map
Function GD0GS20()

     /* *********************************************************/
     /* *       This statement group does the following:       **/
     /* * Move and clear pending message field, set ring bell. **/
     /* *********************************************************/

  XMGDM001.VAGen_EZEMSG = GD3REC.GD3PEND;
  GD3REC.GD3PEND = " ";

   /* SET XMGDM001 ALARM;*/
  return;



end // end GD0GS20

// Formats screen,items autoskip
Function XSGD015()

     /* *******************************************************/
     /* *      This statment group does the following:       **/
     /* *   Loads the csp display table menu from the GD0GT, **/
     /* *   Set map items other than tran id to askip        **/
     /* *   attribute.  This prevents the user from          **/
     /* *   entering data on the screen before the tran id   **/
     /* *   is validated.                                    **/
     /* *******************************************************/


  GDWREC.GDWINDX1 = 1;


  if (GDWREC.GDWAIDS != "7")

    if (GDWREC.GDWAIDS != "8")

      GDWREC.GDWINDX2 = 1;

    end

  end


  while (GDWREC.GDWINDX1 <= 28
   && XGLTBL.XGLTCOD[GDWINDX2] != "999")

    XMGDM001.XMGDMCOD[GDWINDX1] = XGLTBL.XGLTCOD[GDWINDX2];
    XMGDM001.XMGDMDES[GDWINDX1] = XGLTBL.XGLTDSP[GDWINDX2];

    GDWREC.GDWINDX1 = GDWREC.GDWINDX1 + 1;
    GDWREC.GDWINDX2 = GDWREC.GDWINDX2 + 1;

  end


  if (XGLTBL.XGLTCOD[GDWINDX2] == "999")

    GDWREC.GDWEOC = "Y";

  end


  GDWREC.GDWINDX1 = GDWREC.GDWINDX1 - 1;


  GDWREC.GDWINDX3 = 1;

  while (GDWREC.GDWINDX3 <= 28)

    set XMGDM001.XMGDMCOD[GDWINDX3] skip;
    set XMGDM001.XMGDMDES[GDWINDX3] skip;
    GDWREC.GDWINDX3 = GDWREC.GDWINDX3 + 1;

  end


  if (GDWREC.GDWAIDS != "7")
    GDWREC.GDWSCAN = GDWREC.GDWINDX2;
  end


  return;



end // end XSGD015

