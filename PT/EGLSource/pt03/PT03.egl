package pt03;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import da.common.*;
import ff.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import pc.common.*;
import pg.common.*;
import pt.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PT03 ****
// This application displays the Submit Job Request Menu screen
// and subordinate job submission screens.
// 
// The menu is displayed for the user to select the jobs to be
// submitted.  Another available selection allows the user to
// view the available printers and change the printed output
// destination.
// 
// Job Control Language statements are formatted and submitted
// through the Internal Reader Transient Data Queue (INTR).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TARTYPE).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed.
// 
// The data in working storage is substituted and the statement
// is written to the internal reader.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the menu, only.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          03/21/90  rgilli  New application.
// ptf224   04/01/93  SMARIE  Changed error msg number for sesn
// ptf224   06/18/93  MHUYNH  Changed expedite report
//          09/29/93  MHUYNH  Changed fcty performance defaults
//          10/02/93  MHUYNH  Allowed updating all parms
// PT318    03/14/96  MHUYNH  Added Summer to DA report
// 00000    04/22/96  MHUYNH  FTP conversion
// PT325    05/24/96  MCHOW   Added Summer to Expedite Report
//                            (PT03M006, PT03065, PT03067 and
//                             PT03068).
// 
// PT1199   06/18/97  SATINA  Disable the option to print the
//                            Ship to Date Report.
// y2kproj  12-09-97  oricha  y2k modifications:  zero fill map
//                            dates on m002, m006 and m009;
//                            added century windowing in
//                            pt03088,pt03087,pt03s26,pt03s96;
//                            changed season/year logic in
//                            pt03088, pt03087.
// PT78     03/07/98  SRANGA  Modify code for XSE-SESN-CD for
//                            USA Apparel Delivery Analysis.
// PT1258C  04/02/98  SATINA  Conversion of TA0131 to SYNCGENR
//                            to use BUNDLE to split the report
// PT78A    04/29/98  GKAMAL  Modify code for XSE-SESN-CD for
//                            USA Apparel Delivery Analysis.
// PT014    07/17/98  SRANGA  Make PT03 Y2K compliant.
// PT203    04/21/99  SKATHI  Modified PT03045 for a programmer
//                            typo error - GPC code change from
//                            02 to 03 in scheduler code validn
//          04/23/99  SMURTH  Modified PT03037 TO CORRECT WRONG
//                            DATA ITEM MOVE
// PT307    12/28/00  SBUNGO  MODIFY TO USE WHSE CD, XREF,
//                            LIAISON OFFICE FIELDS AND SELECT
//                            /PRINT APPAREL EXPEDITE REPORT
//                            BASED ON THESE FIELDS
// *********************
Program PT03 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PT00", inputRecord = COMMAREA, segmented = no
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FFZREC FFZREC; // record
  FY1REC FY1REC; // record
  PC4REC PC4REC; // record
  PCFREC PCFREC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  PT03W00 PT03W00; // record
  PT03W01 PT03W01; // record
  PT03W02 PT03W02; // record
  PT03W03 PT03W03; // record
  PT03W04 PT03W04; // record
  PT03W05 PT03W05; // record
  PT03W06 PT03W06; // record
  PT03W07 PT03W07; // record
  PT03W08 PT03W08; // record
  PT03W2A PT03W2A; // record
  PTWREC PTWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VDLVAN02 VDLVAN02; // record
  VFDOFC02 VFDOFC02; // record
  VPRDCU03 VPRDCU03; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  XZZREC XZZREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PT03T02; // table
  use PT03T12; // table
  use PT03T03; // table
  use PT03T13; // table
  use PT03T04; // table
  use PT03T14; // table
  use PT03T05; // table
  use PT03T15; // table
  use PT03T06; // table
  use PT03T16; // table
  use PT03T07; // table
  use PT03T17; // table
  use PT03T08; // table
  use PT03T18; // table
  use PT03T09 {deleteAfterUse = yes}; // table
  use PT03T19 {deleteAfterUse = yes}; // table
  use PT03T21 {deleteAfterUse = yes}; // table
  use PT03T22 {deleteAfterUse = yes}; // table
  use PT03T31 {deleteAfterUse = yes}; // table
  use PT03T32 {deleteAfterUse = yes}; // table
  use PT03T2A; // table
  use PT03T2B; // table
  use PT03T2C {deleteAfterUse = yes}; // table
  use PT03T2D {deleteAfterUse = yes}; // table
  use PT03T2E {deleteAfterUse = yes}; // table
  use PT03T2M; // table
  use PT03T2N; // table
  use PT03T2O {deleteAfterUse = yes}; // table
  use PT03T2P {deleteAfterUse = yes}; // table
  use PT03T2Q {deleteAfterUse = yes}; // table
  use PT03T3A {deleteAfterUse = yes}; // table
  use PT03T3B {deleteAfterUse = yes}; // table
  use PT03T3C {deleteAfterUse = yes}; // table
  use PT03T3D {deleteAfterUse = yes}; // table
  use PT03T3E {deleteAfterUse = yes}; // table
  use PT03T3M {deleteAfterUse = yes}; // table
  use PT03T3N {deleteAfterUse = yes}; // table
  use PT03T3O {deleteAfterUse = yes}; // table
  use PT03T3P {deleteAfterUse = yes}; // table
  use PT03T3Q {deleteAfterUse = yes}; // table
  use PT03T4A {deleteAfterUse = yes}; // table
  use PT03T4B {deleteAfterUse = yes}; // table
  use PT03T4E {deleteAfterUse = yes}; // table
  use PT03T4M {deleteAfterUse = yes}; // table
  use PT03T4N {deleteAfterUse = yes}; // table
  use PT03T4Q {deleteAfterUse = yes}; // table
  use PT03T9A {deleteAfterUse = yes}; // table
  use PT03T9B {deleteAfterUse = yes}; // table
  use PT03T9E {deleteAfterUse = yes}; // table
  use PT03T9M {deleteAfterUse = yes}; // table
  use PT03T9N {deleteAfterUse = yes}; // table
  use PT03T9Q {deleteAfterUse = yes}; // table
  use XCTTBL; // table
  use XOTTBL; // table
  use XGATBL; // table
  use XPCTBL; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use PT03M.PT03M002,  // forms
      PT03M.PT03M003, 
      PT03M.PT03M004, 
      PT03M.PT03M005, 
      PT03M.PT03M006, 
      PT03M.PT03M007, 
      PT03M.PT03M008, 
      PT03M.PT03M009, 
      PT03M.PT03M099, 
      PT03M.TA0PM001, 
      PT03M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPT001: XPPT001();
     /* ------------------------------------------------------------*/
     /* Initialize the working storage areas and variables.*/
     /* ------------------------------------------------------------*/

    set TA0PM001 initial; /* M001 input/output*/
    set PT03M002 initial; /* M002 input/output*/
    set PT03M002 initial; /* M003 input/output*/
    set PT03M004 initial; /* M004 input/output*/
    set PT03M005 initial; /* M005 input/output*/
    set PT03M006 initial; /* M006 input/output*/
    set PT03M007 initial; /* M006 input/output*/
    set PT03M008 initial; /* M006 input/output*/
    set PT03M099 initial; /* M099 input/output*/
    set PT03W00 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA6REC empty; /* Background job subroutine parameters*/

     /* ------------------------------------------------------------*/
     /* Indicate that the output destination must be obtained.*/
     /* ------------------------------------------------------------*/

    TA6REC.TA6SUBSW = "I"; /* Indicate obtain information*/

     /* ------------------------------------------------------------*/
     /* Indicate the number of selection lines on the menu.*/
     /* ------------------------------------------------------------*/

    PT03W00.PT03WIXL = 9; /* Number of selection lines*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PT03001; /* Converse the main process*/


    PT03001: PT03001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PT03001; /* Converse the main process*/


  end // end main
end // end PT03

// Process valid production jcl
Function PT03-0261()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT03T21.TARTYPE[PT03WIXT] == "W")
      if (PT03M002.XURDEST == "LOCAL") /* destination lazer*/
        PT03W02.PT03WOT1 = "/*OUTPUT  PT01 FORMS=PT01,COPIES=";
        PT03W02.XURCOPY = TA6REC.XURCOPY;
        PT03W02.PT03WOT2 = ",DEST=RMT00";
        TA6REC.TARJCL[TA6INDEX] = PT03W02.PT03WOUT;

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        PT03W02.PT03WOT1 = "/*OUTPUT  PT02 FORMS=PT02,COPIES=";
        TA6REC.TARJCL[TA6INDEX] = PT03W02.PT03WOUT;

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        PT03W02.PT03WOT1 = "/*OUTPUT  PT03 FORMS=PT03,COPIES=";
        TA6REC.TARJCL[TA6INDEX] = PT03W02.PT03WOUT;

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        PT03W02.PT03WOT1 = "/*OUTPUT  PT04 FORMS=PT04,COPIES=";
        TA6REC.TARJCL[TA6INDEX] = PT03W02.PT03WOUT;

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT01 FORMS=PT01,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT02 FORMS=PT02,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT03 FORMS=PT03,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT04 FORMS=PT04,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

      end
    else

      if (PT03T21.TARJCL[PT03WIXT] == "//*** PRINT STEPS GO HERE ***")
        if (PT03W02.PT03MIND == "*" /* (1)*/
         && PT03W02.PT03MVER == "*")
          PT03-02611(); /* add regular color report*/
          PT03-02612(); /* add regular style report*/
          PT03-02613(); /* add scheduler color report*/
          PT03-02614(); /* add scheduler style report*/
        else
          if (PT03W02.PT03MIND == "*" /* (2)*/
           && PT03W02.PT03MVER == "R")
            PT03-02611(); /* add regular color report*/
            PT03-02612(); /* add regular style report*/
          else
            if (PT03W02.PT03MIND == "*" /* (3)*/
             && PT03W02.PT03MVER == "S")
              PT03-02613(); /* add scheduler color report*/
              PT03-02614(); /* add scheduler style report*/
            else
              if (PT03W02.PT03MIND == "C" /* (4)*/
               && PT03W02.PT03MVER == "*")
                PT03-02611(); /* add regular color report*/
                PT03-02613(); /* add scheduler color report*/
              else
                if (PT03W02.PT03MIND == "S" /* (5)*/
                 && PT03W02.PT03MVER == "*")
                  PT03-02612(); /* add regular style report*/
                  PT03-02614(); /* add scheduler style report*/
                else
                  if (PT03W02.PT03MIND == "C" /* (6)*/
                   && PT03W02.PT03MVER == "R")
                    PT03-02611(); /* add regular color report*/
                  else
                    if (PT03W02.PT03MIND == "S" /* (7)*/
                     && PT03W02.PT03MVER == "R")
                      PT03-02612(); /* add regular style report*/
                    else
                      if (PT03W02.PT03MIND == "C" /* (8)*/
                       && PT03W02.PT03MVER == "S")
                        PT03-02613(); /* add scheduler color report*/
                      else
                        if (PT03W02.PT03MIND == "S" /* (9)*/
                         && PT03W02.PT03MVER == "S")
                          PT03-02614(); /* add scheduler style report*/
                        end /* (9)*/
                      end /* (8)*/
                    end /* (7)*/
                  end /* (6)*/
                end /* (5)*/
              end /* (4)*/
            end /* (3)*/
          end /* (2)*/
        end /* (1)*/

      else

        if (PT03T21.TARJCL[PT03WIXT] == "===HYPERCHANNEL STEP===")
          if (PT03M002.PT03MHYP == "Y") /* (1)*/
            PT03-02615(); /* run hyperchannel job*/
          end

        else
          if (PT03T21.TARTYPE[PT03WIXT] == "P") /* Parameters statement*/


            /* ------------------------------------------------------------*/
            /* Format the variable parameters entered by the user.*/

            /* ------------------------------------------------------------*/

            set PT03W02 empty; /* Parameters work area*/

            PT03W02.PT03MPRM = "R";
            PT03W00.PT03WDAT = PT03M002.PT03MPD2;
            PT03W02.PT03WYY = PT03W00.PT03WYY;
            PT03W02.PT03WMM = PT03W00.PT03WMM;
            PT03W02.PT03WDD = PT03W00.PT03WDD;
            PT03W02.PT03MDDT = PT03M002.PT03MDD2;
            PT03W02.PT03MSCD = PT03M002.PT03MSC2;
            PT03W02.PT03MSYR = PT03M002.PT03MSY2;
            PT03W02.PT03MIND = PT03M002.PT03MIN2;
            PT03W02.PT03MVER = PT03M002.PT03MVE2;
            PT03W02.PT03MGEN = PT03M002.PT03MGE2;
            PT03W02.PT03MCAT = PT03M002.PT03MCA2;

            TA6REC.TARJCL[TA6INDEX] = PT03W02.TARJCL; /* Parameters*/

            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          else

            TA6REC.TARJCL[TA6INDEX] = PT03T21.TARJCL[PT03WIXT]; /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = PT03T21.TARTYPE[PT03WIXT];
                                   /* Type*/

            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          end
        end
      end
    end


      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

    if (PT03T21.TARJCL[PT03WIXT] == "/*EOF") /* End of table*/
      TA6REC.TARJCL[TA6INDEX] = "//*    "; /* JCL*/
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT03W00.PT03WIXT = PT03W00.PT03WIXT + 1; /* Input table index*/

    end

  end

end // end PT03-0261

// Reglr CLR Rpt to print (PROD)
Function PT03-02611()
   /* ----------------------------------------------------------------*/
   /* Regular color report print (prod)*/
   /* ----------------------------------------------------------------*/
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T3A.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T3A.TARTYPE[PT03WIDX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T3A.TARJCL[PT03WIDX] == "//*")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-02611

// Reglr STY Rpt to print (PROD)
Function PT03-02612()
   /* ---------------------------------------------------------------*/
   /* Regular style report print (prod)*/
   /* ---------------------------------------------------------------*/
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T3B.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T3B.TARTYPE[PT03WIDX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T3B.TARJCL[PT03WIDX] == "//*")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-02612

// Schlr CLR Rpt to print (PROD)
Function PT03-02613()
   /* -------------------------------------------------------------------*/
   /* Scheduler color report print  (prod)*/
   /* -------------------------------------------------------------------*/
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T3C.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T3C.TARTYPE[PT03WIDX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T3C.TARJCL[PT03WIDX] == "//*")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-02613

// Schlr STY Rpt to print (PROD)
Function PT03-02614()
   /* -------------------------------------------------------------*/
   /* Scheduler style report print (prod)*/
   /* -------------------------------------------------------------*/
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T3D.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T3D.TARTYPE[PT03WIDX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T3D.TARJCL[PT03WIDX] == "//*")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-02614

// Process valid prod  request
Function PT03-02615()
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T3E.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T3E.TARTYPE[PT03WIDX]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T3E.TARJCL[PT03WIDX] == "/*EOF")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-02615

// Process valid test jcl
Function PT03-0262()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT03T31.TARJCL[PT03WIXT] == "===NOTIFY===")
      PT03W2A.PT03WPR9 = "//             NOTIFY=";
      PT03W2A.PT03WUID = TA6REC.XURUSRID;
      PT03W2A.PT03WFL9 = " ";
      TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC9;

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      if (PT03T31.TARJCL[PT03WIXT] == "===OUTPUT1===")
        if (PT03M002.XURDEST == "LOCAL") /* destination lazer*/
          PT03W02.PT03WOT1 = "/*OUTPUT  PT01 FORMS=PT01,COPIES=";
          PT03W02.XURCOPY = TA6REC.XURCOPY;
          PT03W02.PT03WOT2 = ",DEST=RMT00";
          TA6REC.TARJCL[TA6INDEX] = PT03W02.PT03WOUT;
          TA6REC.TARTYPE[TA6INDEX] = " ";

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        else
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT01 FORMS=PT01,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        end
      else

        if (PT03T31.TARJCL[PT03WIXT] == "===OUTPUT2===")
          if (PT03M002.XURDEST == "LOCAL") /* destination lazer*/
            PT03W02.PT03WOT1 = "/*OUTPUT  PT02 FORMS=PT02,COPIES=";
            PT03W02.XURCOPY = TA6REC.XURCOPY;
            PT03W02.PT03WOT2 = ",DEST=RMT00";
            TA6REC.TARJCL[TA6INDEX] = PT03W02.PT03WOUT;
            TA6REC.TARTYPE[TA6INDEX] = " ";

            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          else
            TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT02 FORMS=PT02,COPIES=_,DEST=_____";
            TA6REC.TARTYPE[TA6INDEX] = "O";

            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          end
        else

          if (PT03T31.TARJCL[PT03WIXT] == "===OUTPUT3===")
            if (PT03M002.XURDEST == "LOCAL") /* destination lazer*/
              PT03W02.PT03WOT1 = "/*OUTPUT  PT03 FORMS=PT03,COPIES=";
              PT03W02.XURCOPY = TA6REC.XURCOPY;
              PT03W02.PT03WOT2 = ",DEST=RMT00";
              TA6REC.TARJCL[TA6INDEX] = PT03W02.PT03WOUT;
              TA6REC.TARTYPE[TA6INDEX] = " ";

              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

            else
              TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT03 FORMS=PT03,COPIES=_,DEST=_____";
              TA6REC.TARTYPE[TA6INDEX] = "O";

              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

            end
          else

            if (PT03T31.TARJCL[PT03WIXT] == "===OUTPUT4===")
              if (PT03M002.XURDEST == "LOCAL") /* destination lazer*/
                PT03W02.PT03WOT1 = "/*OUTPUT  PT04 FORMS=PT04,COPIES=";
                PT03W02.XURCOPY = TA6REC.XURCOPY;
                PT03W02.PT03WOT2 = ",DEST=RMT00";
                TA6REC.TARJCL[TA6INDEX] = PT03W02.PT03WOUT;
                TA6REC.TARTYPE[TA6INDEX] = " ";

                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

              else
                TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT04 FORMS=PT04,COPIES=_,DEST=_____";
                TA6REC.TARTYPE[TA6INDEX] = "O";

                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

              end
            else

              if (PT03T31.TARJCL[PT03WIXT] == 
              "//*** PRINT STEPS GO HERE ***")
                if (PT03W02.PT03MIND == "*" /* (1)*/
                 && PT03W02.PT03MVER == "*")
                  PT03-02621(); /* add regular color report*/
                  PT03-02622(); /* add regular style report*/
                  PT03-02623(); /* add scheduler color report*/
                  PT03-02624(); /* add scheduler style report*/
                end
                if (PT03W02.PT03MIND == "*" /* (2)*/
                 && PT03W02.PT03MVER == "R")
                  PT03-02621(); /* add regular color report*/
                  PT03-02622(); /* add regular style report*/
                end
                if (PT03W02.PT03MIND == "*" /* (3)*/
                 && PT03W02.PT03MVER == "S")
                  PT03-02623(); /* add scheduler color report*/
                  PT03-02624(); /* add scheduler style report*/
                end
                if (PT03W02.PT03MIND == "C" /* (4)*/
                 && PT03W02.PT03MVER == "*")
                  PT03-02621(); /* add regular color report*/
                  PT03-02623(); /* add scheduler color report*/
                end
                if (PT03W02.PT03MIND == "S" /* (5)*/
                 && PT03W02.PT03MVER == "*")
                  PT03-02622(); /* add regular style report*/
                  PT03-02624(); /* add scheduler style report*/
                end
                if (PT03W02.PT03MIND == "C" /* (6)*/
                 && PT03W02.PT03MVER == "R")
                  PT03-02621(); /* add regular color report*/
                end
                if (PT03W02.PT03MIND == "S" /* (7)*/
                 && PT03W02.PT03MVER == "R")
                  PT03-02622(); /* add regular style report*/
                end
                if (PT03W02.PT03MIND == "C" /* (8)*/
                 && PT03W02.PT03MVER == "S")
                  PT03-02623(); /* add scheduler color report*/
                end
                if (PT03W02.PT03MIND == "S" /* (9)*/
                 && PT03W02.PT03MVER == "S")
                  PT03-02624(); /* add scheduler style report*/
                end /* (9)*/

              else
                if (PT03T31.TARJCL[PT03WIXT] == "===HYPERCHANNEL STEP===")
                  if (PT03M002.PT03MHYP == "Y") /* run hyperchannel job*/
                    PT03-02625();
                  end
                else

                  if (PT03T31.TARTYPE[PT03WIXT] == "P")
                                   /* Parameters statement*/


            /* ------------------------------------------------------------*/
                    /* Format the variable parameters entered by the user.*/

            /* ------------------------------------------------------------*/

                    set PT03W02 empty; /* Parameters work area*/

                    PT03W02.PT03MPRM = "R";
                    PT03W00.PT03WDAT = PT03M002.PT03MPD2;
                    PT03W02.PT03WYY = PT03W00.PT03WYY;
                    PT03W02.PT03WMM = PT03W00.PT03WMM;
                    PT03W02.PT03WDD = PT03W00.PT03WDD;
                    PT03W02.PT03MDDT = PT03M002.PT03MDD2;
                    PT03W02.PT03MSCD = PT03M002.PT03MSC2;
                    PT03W02.PT03MSYR = PT03M002.PT03MSY2;
                    PT03W02.PT03MIND = PT03M002.PT03MIN2;
                    PT03W02.PT03MVER = PT03M002.PT03MVE2;
                    PT03W02.PT03MGEN = PT03M002.PT03MGE2;
                    PT03W02.PT03MCAT = PT03M002.PT03MCA2;

                    TA6REC.TARJCL[TA6INDEX] = PT03W02.TARJCL;
                                   /* Parameters*/

                    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/

                  else

                    TA6REC.TARJCL[TA6INDEX] = PT03T31.TARJCL[PT03WIXT]; /* JCL*/
                    TA6REC.TARTYPE[TA6INDEX] = PT03T31.TARTYPE[PT03WIXT]; /* Type*/

                    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;

                                   /* Output array index*/

                  end
                end
              end
            end
          end
        end
      end
    end


      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

    if (PT03T31.TARJCL[PT03WIXT] == "/*EOF") /* End of table*/
      TA6REC.TARJCL[TA6INDEX] = "//*    "; /* JCL*/
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT03W00.PT03WIXT = PT03W00.PT03WIXT + 1; /* Input table index*/

    end

  end

end // end PT03-0262

// Reglr CLR Rpt to print (TEST)
Function PT03-02621()
   /* --------------------------------------------------------------------*/
   /* Regular color report print (test)*/
   /* --------------------------------------------------------------------*/
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T3M.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T3M.TARTYPE[PT03WIDX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T3M.TARJCL[PT03WIDX] == "//*")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-02621

// Reglr STY Rpt to print (TEST)
Function PT03-02622()
   /* --------------------------------------------------------------------*/
   /* Regular style report print (test)*/
   /* --------------------------------------------------------------------*/
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T3N.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T3N.TARTYPE[PT03WIDX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T3N.TARJCL[PT03WIDX] == "//*")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-02622

// Schlr CLR Rpt to print (TEST)
Function PT03-02623()
   /* -------------------------------------------------------------------*/
   /* Sheduler color report print (test)*/
   /* -------------------------------------------------------------------*/
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T3O.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T3O.TARTYPE[PT03WIDX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T3O.TARJCL[PT03WIDX] == "//*")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-02623

// Schlr STY Rpt to print (TEST)
Function PT03-02624()
   /* -------------------------------------------------------------------*/
   /* Sheduler style report print (test)*/
   /* -------------------------------------------------------------------*/
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T3P.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T3P.TARTYPE[PT03WIDX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T3P.TARJCL[PT03WIDX] == "//*")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-02624

// Process valid test  request
Function PT03-02625()
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T3Q.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T3Q.TARTYPE[PT03WIDX]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T3Q.TARJCL[PT03WIDX] == "/*EOF")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-02625

// Reglr CLR Rpt to print (PROD)
Function PT03-0271()
   /* ----------------------------------------------------------------*/
   /* Regular color report print (prod)*/
   /* ----------------------------------------------------------------*/
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T2A.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T2A.TARTYPE[PT03WIDX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T2A.TARJCL[PT03WIDX] == "//*")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-0271

// Reglr STY Rpt to print (PROD)
Function PT03-0272()
   /* ---------------------------------------------------------------*/
   /* Regular style report print (prod)*/
   /* ---------------------------------------------------------------*/
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T2B.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T2B.TARTYPE[PT03WIDX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T2B.TARJCL[PT03WIDX] == "//*")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-0272

// Schlr CLR Rpt to print (PROD)
Function PT03-0273()
   /* -------------------------------------------------------------------*/
   /* Scheduler color report print  (prod)*/
   /* -------------------------------------------------------------------*/
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T2C.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T2C.TARTYPE[PT03WIDX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T2C.TARJCL[PT03WIDX] == "//*")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-0273

// Schlr STY Rpt to print (PROD)
Function PT03-0274()
   /* -------------------------------------------------------------*/
   /* Scheduler style report print (prod)*/
   /* -------------------------------------------------------------*/
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T2D.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T2D.TARTYPE[PT03WIDX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T2D.TARJCL[PT03WIDX] == "//*")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-0274

// Reglr CLR Rpt to print (TEST)
Function PT03-0281()
   /* --------------------------------------------------------------------*/
   /* Regular color report print (test)*/
   /* --------------------------------------------------------------------*/
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T2M.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T2M.TARTYPE[PT03WIDX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T2M.TARJCL[PT03WIDX] == "//*")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-0281

// Reglr STY Rpt to print (TEST)
Function PT03-0282()
   /* --------------------------------------------------------------------*/
   /* Regular style report print (test)*/
   /* --------------------------------------------------------------------*/
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T2N.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T2N.TARTYPE[PT03WIDX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T2N.TARJCL[PT03WIDX] == "//*")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-0282

// Schlr CLR Rpt to print (TEST)
Function PT03-0283()
   /* -------------------------------------------------------------------*/
   /* Sheduler color report print (test)*/
   /* -------------------------------------------------------------------*/
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T2O.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T2O.TARTYPE[PT03WIDX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T2O.TARJCL[PT03WIDX] == "//*")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-0283

// Schlr STY Rpt to print (TEST)
Function PT03-0284()
   /* -------------------------------------------------------------------*/
   /* Sheduler style report print (test)*/
   /* -------------------------------------------------------------------*/
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T2P.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T2P.TARTYPE[PT03WIDX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T2P.TARJCL[PT03WIDX] == "//*")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-0284

// Process valid production jcl
Function PT03-0961()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT03T22.TARJCL[PT03WIXT] == "===OUTPUT===")
      if (PT03M009.XURDEST == "LOCAL") /* destination lazer*/
        PT03W02.PT03WOT1 = "/*OUTPUT  PT01 FORMS=PT01,COPIES=";
        PT03W02.XURCOPY = TA6REC.XURCOPY;
        PT03W02.PT03WOT2 = ",DEST=RMT00";
        TA6REC.TARJCL[TA6INDEX] = PT03W02.PT03WOUT;
        TA6REC.TARTYPE[TA6INDEX] = " ";

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        PT03W02.PT03WOT1 = "/*OUTPUT  PT02 FORMS=PT02,COPIES=";
        TA6REC.TARJCL[TA6INDEX] = PT03W02.PT03WOUT;

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT01 FORMS=PT01,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT02 FORMS=PT02,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

      end
    else

      if (PT03T22.TARJCL[PT03WIXT] == "//*** PRINT STEPS GO HERE ***")
        if (PT03W02.PT03MIND == "C"
         || PT03W02.PT03MIND == "*")
          PT03-09611(); /* add color report print step to jcl*/
        end
        if (PT03W02.PT03MIND == "S"
         || PT03W02.PT03MIND == "*")
          PT03-09612(); /* add color report print step to jcl*/
        end

      else

        if (PT03T22.TARJCL[PT03WIXT] == "//*** HYPERCHANNEL ***")
          if (PT03M009.PT03MHYP == "Y")
            PT03-09613(); /* run hyperchannel job*/
          end

        else
          if (PT03T22.TARTYPE[PT03WIXT] == "P") /* Parameters statement*/


            /* ------------------------------------------------------------*/
            /* Format the variable parameters entered by the user.*/

            /* ------------------------------------------------------------*/

            set PT03W02 empty; /* Parameters work area*/

            PT03W02.PT03MPRM = "R";
            PT03W00.PT03WDAT = PT03M009.PT03MPD2;
            PT03W02.PT03WYY = PT03W00.PT03WYY;
            PT03W02.PT03WMM = PT03W00.PT03WMM;
            PT03W02.PT03WDD = PT03W00.PT03WDD;
            PT03W02.PT03MDDT = PT03M009.PT03MDD2;
            PT03W02.PT03MSCD = PT03M009.PT03MSC2;
            PT03W02.PT03MSYR = PT03M009.PT03MSY2;
            PT03W02.PT03MIND = PT03M009.PT03MIN2;
            PT03W02.PT03MGEN = PT03M009.PT03MGE2;
            PT03W02.PT03MCAT = PT03M009.PT03MCA2;

            TA6REC.TARJCL[TA6INDEX] = PT03W02.TARJCL; /* Parameters*/

            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          else

            TA6REC.TARJCL[TA6INDEX] = PT03T22.TARJCL[PT03WIXT]; /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = PT03T22.TARTYPE[PT03WIXT];
                                   /* Type*/

            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          end
        end
      end
    end


      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

    if (PT03T22.TARJCL[PT03WIXT] == "/*EOF") /* End of table*/
      TA6REC.TARJCL[TA6INDEX] = "//*    "; /* JCL*/
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT03W00.PT03WIXT = PT03W00.PT03WIXT + 1; /* Input table index*/

    end

  end

end // end PT03-0961

// CLR detail Rpt to print (PROD)
Function PT03-09611()
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T4A.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T4A.TARTYPE[PT03WIDX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T4A.TARJCL[PT03WIDX] == "//*")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-09611

// STY detail Rpt to print (PROD)
Function PT03-09612()
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T4B.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T4B.TARTYPE[PT03WIDX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T4B.TARJCL[PT03WIDX] == "//*")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-09612

// Process valid prod  request
Function PT03-09613()
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T4E.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T4E.TARTYPE[PT03WIDX]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T4E.TARJCL[PT03WIDX] == "/*EOF")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-09613

// Process valid test jcl
Function PT03-0962()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT03T32.TARJCL[PT03WIXT] == "===NOTIFY===")
      PT03W2A.PT03WPR9 = "//             NOTIFY=";
      PT03W2A.PT03WUID = TA6REC.XURUSRID;
      PT03W2A.PT03WFL9 = " ";
      TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC9;
      TA6REC.TARTYPE[TA6INDEX] = " ";

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      if (PT03T32.TARJCL[PT03WIXT] == "===OUTPUT===")
        if (PT03M009.XURDEST == "LOCAL") /* destination lazer*/
          PT03W02.PT03WOT1 = "/*OUTPUT  PT01 FORMS=PT01,COPIES=";
          PT03W02.XURCOPY = TA6REC.XURCOPY;
          PT03W02.PT03WOT2 = ",DEST=RMT00";
          TA6REC.TARJCL[TA6INDEX] = PT03W02.PT03WOUT;
          TA6REC.TARTYPE[TA6INDEX] = " ";

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          PT03W02.PT03WOT1 = "/*OUTPUT  PT02 FORMS=PT02,COPIES=";
          TA6REC.TARJCL[TA6INDEX] = PT03W02.PT03WOUT;
          TA6REC.TARTYPE[TA6INDEX] = " ";

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        else
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT01 FORMS=PT01,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT02 FORMS=PT02,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        end
      else

        if (PT03T32.TARJCL[PT03WIXT] == "//*** PRINT STEPS GO HERE ***")
          if (PT03W02.PT03MIND == "C"
           || PT03W02.PT03MIND == "*")
            PT03-09621(); /* add color report print step to jcl*/
          end
          if (PT03W02.PT03MIND == "S"
           || PT03W02.PT03MIND == "*")
            PT03-09622(); /* add color report print step to jcl*/
          end

        else

          if (PT03T32.TARJCL[PT03WIXT] == "//*** HYPERCHANNEL ***")
            if (PT03M009.PT03MHYP == "Y")
              PT03-09623(); /* run hyperchannel job*/
            end

          else
            if (PT03T32.TARTYPE[PT03WIXT] == "P") /* Parameters statement*/


            /* ------------------------------------------------------------*/
              /* Format the variable parameters entered by the user.*/

            /* ------------------------------------------------------------*/

              set PT03W02 empty; /* Parameters work area*/

              PT03W02.PT03MPRM = "R";
              PT03W00.PT03WDAT = PT03M009.PT03MPD2;
              PT03W02.PT03WYY = PT03W00.PT03WYY;
              PT03W02.PT03WMM = PT03W00.PT03WMM;
              PT03W02.PT03WDD = PT03W00.PT03WDD;
              PT03W02.PT03MDDT = PT03M009.PT03MDD2;
              PT03W02.PT03MSCD = PT03M009.PT03MSC2;
              PT03W02.PT03MSYR = PT03M009.PT03MSY2;
              PT03W02.PT03MIND = PT03M009.PT03MIN2;
              PT03W02.PT03MGEN = PT03M009.PT03MGE2;
              PT03W02.PT03MCAT = PT03M009.PT03MCA2;

              TA6REC.TARJCL[TA6INDEX] = PT03W02.TARJCL; /* Parameters*/
              TA6REC.TARTYPE[TA6INDEX] = " ";

              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

            else

              TA6REC.TARJCL[TA6INDEX] = PT03T32.TARJCL[PT03WIXT];
                                   /* JCL*/
              TA6REC.TARTYPE[TA6INDEX] = PT03T32.TARTYPE[PT03WIXT];
                                   /* Type*/

              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

            end
          end
        end
      end
    end


      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

    if (PT03T32.TARJCL[PT03WIXT] == "/*EOF") /* End of table*/
      TA6REC.TARJCL[TA6INDEX] = "//*    ";
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT03W00.PT03WIXT = PT03W00.PT03WIXT + 1; /* Input table index*/

    end

  end

end // end PT03-0962

// CLR detail Rpt to print (TEST)
Function PT03-09621()
   /* ------------------------------------------------------------------*/
   /* Color detail report print (test)*/
   /* ------------------------------------------------------------------*/
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T4M.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T4M.TARTYPE[PT03WIDX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T4M.TARJCL[PT03WIDX] == "//*")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-09621

// STY detail Rpt to print (PROD)
Function PT03-09622()
   /* ------------------------------------------------------------------*/
   /* Style report report print (test)*/
   /* ------------------------------------------------------------------*/
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T4N.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T4N.TARTYPE[PT03WIDX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T4N.TARJCL[PT03WIDX] == "//*")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-09622

// Process valid test  request
Function PT03-09623()
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T4Q.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T4Q.TARTYPE[PT03WIDX]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T4Q.TARJCL[PT03WIDX] == "/*EOF")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-09623

// CLR detail Rpt to print (PROD)
Function PT03-0971()
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T9A.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T9A.TARTYPE[PT03WIDX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T9A.TARJCL[PT03WIDX] == "//*")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-0971

// STY detail Rpt to print (PROD)
Function PT03-0972()
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T9B.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T9B.TARTYPE[PT03WIDX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T9B.TARJCL[PT03WIDX] == "//*")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-0972

// CLR detail Rpt to print (TEST)
Function PT03-0981()
   /* ------------------------------------------------------------------*/
   /* Color detail report print (test)*/
   /* ------------------------------------------------------------------*/
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T9M.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T9M.TARTYPE[PT03WIDX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T9M.TARJCL[PT03WIDX] == "//*")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-0981

// STY detail Rpt to print (PROD)
Function PT03-0982()
   /* ------------------------------------------------------------------*/
   /* Style report report print (test)*/
   /* ------------------------------------------------------------------*/
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T9N.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T9N.TARTYPE[PT03WIDX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T9N.TARJCL[PT03WIDX] == "//*")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT03-0982

// Main process to display a map
Function PT03001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Invoke the process for each selection entered on menu.*/
   /* 2) After all selections are processed, display the menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PT03W00.PT03WSWX != "Y") /* EXIT not requested*/

    if (PT03W00.PT03MSEL[1] == "S" /* Line 1 was selected*/
     || TA6REC.TA6SUBSW == "I")    /* or information requested*/

      PT03010(); /* Specify output destination*/

    end

    if (PT03W00.PT03MSEL[2] == "S") /* Line 2 was selected*/
      PT03W00.PT03WRD2 = "Y"; /* set request defaults switch 'on'*/
      PT03W02.PT03WPGM = "PT4600";
      if (CACHGFL == "Y")
        set PT03M002.PT03MPRM cursor;
      else
        set PT03M002.PT03MPRM skip;
        set PT03M002.PT03MPDT cursor;
      end
      PT03W00.PT03WERF = "Y"; /* set error flag 'on'*/
      while (PT03W00.PT03WERF != "N")
        PT03020(); /* delivery analysis report*/
      end
    end

    if (PT03W00.PT03MSEL[3] == "S") /* Line 3 was selected*/
      PT03W00.PT03WRD3 = "Y"; /* set request defaults switch 'on'*/
      if (CACHGFL == "Y")
        set PT03M003.PT03MPRM cursor;
      else
        set PT03M003.PT03MPRM skip;
        set PT03M003.PT03MSY1 cursor;
      end
      PT03W00.PT03WERF = "Y"; /* set error flag 'on'*/
      while (PT03W00.PT03WERF != "N")
        PT03030(); /* factory performance report*/
      end
    end

    if (PT03W00.PT03MSEL[4] == "S") /* Line 4 was selected*/
      PT03W00.PT03WRD4 = "Y"; /* set request defaults switch 'on'*/
      if (CACHGFL == "Y")
        set PT03M004.PT03MPRM cursor;
      else
        set PT03M004.PT03MPRM skip;
        set PT03M004.PT03MDOF cursor;
      end
      PT03W00.PT03WERF = "Y"; /* set error flag 'on'*/
      while (PT03W00.PT03WERF != "N")
        PT03040(); /* irregular/overrun report*/
      end
    end

    if (PT03W00.PT03MSEL[5] == "S") /* Line 5 was selected*/
      PT03W00.PT03WRD5 = "Y"; /* set request defaults switch 'on'*/
      if (CACHGFL == "Y")
        set PT03M005.PT03MPRM cursor;
      else
        set PT03M005.PT03MPRM skip;
        set PT03M005.PT03MLPD cursor;
      end
      PT03W00.PT03WERF = "Y"; /* set error flag 'on'*/
      while (PT03W00.PT03WERF != "N")
        PT03050(); /* late production summary report*/
      end
    end

    if (PT03W00.PT03MSEL[6] == "S") /* Line 6 was selected*/
      PT03W00.PT03WRD6 = "Y"; /* set request defaults switch 'on'*/
      if (CACHGFL == "Y")
        set PT03M006.PT03MPRM cursor;
      else
        set PT03M006.PT03MPRM skip;
        set PT03M006.PT03MPDT cursor;
      end
      PT03W00.PT03WERF = "Y"; /* set error flag 'on'*/
      while (PT03W00.PT03WERF != "N")
        PT03060(); /* production expedite report*/
      end
    end

    if (PT03W00.PT03MSEL[7] == "S") /* Line 7 was selected*/
      PT03W00.PT03WRD7 = "Y"; /* set request defaults switch 'on'*/
      set PT03M007.PT03MSCH cursor;
      PT03W00.PT03WERF = "Y"; /* set error flag 'on'*/
      while (PT03W00.PT03WERF != "N")
        PT03070(); /* charlotte (cpos) report*/
      end
    end

    if (PT03W00.PT03MSEL[8] == "S") /* Line 8 was selected*/
      PT03W00.PT03WRD8 = "Y"; /* set request defaults switch 'on'*/
      set PT03M008.PT03MSC1 cursor;
      PT03W00.PT03WERF = "Y"; /* set error flag 'on'*/
      while (PT03W00.PT03WERF != "N")
        PT03080(); /* charlotte (ship) report*/
      end
    end

    if (PT03W00.PT03MSEL[9] == "S") /* Line 2 was selected*/
      PT03W00.PT03WRD2 = "Y"; /* set request defaults switch 'on'*/
      PT03W02.PT03WPGM = "PT4600M";
      if (CACHGFL == "Y")
        set PT03M002.PT03MPRM cursor;
      else
        set PT03M002.PT03MPRM skip;
        set PT03M002.PT03MPDT cursor;
      end
      PT03W00.PT03WERF = "Y"; /* set error flag 'on'*/
      while (PT03W00.PT03WERF != "N")
        PT03090(); /* delivery analysis report*/
      end
    end

  end

  PT03W00.PT03WSWX = "N"; /* Reset exit requested switch*/

  PT03990(); /* Report Request Menu*/


end // end PT03001

// Specify output destination
Function PT03010()
   /* ------------------------------------------------------------*/
   /* Obtain and/or display the output destination for the user.*/
   /* ------------------------------------------------------------*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If successful, indicate the selected function is completed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (TA6REC.TA6RTNCD == "0") /* Normal return*/

      if (TA6REC.TA6SUBSW == "I") /* Obtain information only*/

        TA6REC.TA6SUBSW = "N"; /* Indicate information obtained*/
      else
        PT03W00.PT03MSEL[1] = "*"; /* Indicate function completed*/

      end

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If user cancelled request, indicate function cancelled.*/
    /* ------------------------------------------------------------*/

    if (TA6REC.TA6RTNCD == "1") /* User cancelled request*/

      PT03W00.PT03MSEL[1] = "C"; /* Indicate function cancelled*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "010"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  exit stack; /* Exit to display map*/


end // end PT03010

// delivery analysis report
Function PT03020()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If first time thru, Obtain default data.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PT03W00.PT03WRD2 == "Y" /* if switch is on*/
   && converseVar.validationMsgNum == 0) /* and no previous errors*/
    set XZZREC empty;
    PT03M002.PT03MLOC = "FOR BEAVERTON";
    PT03S21(); /* Obtain default data*/
    PT03W00.PT03WRD2 = "N"; /* set switch off*/
  end

  PT03022(); /* Format and display the map*/

  PT03023(); /* Check attention identifier*/

  PT03024(); /* Reset fields to normal intensity*/

  PT03025(); /* Verify the data that was entered*/

  PT03026(); /* Process valid input request*/


end // end PT03020

// Format and display the map
Function PT03022()
   /* ------------------------------------------------------------*/
   /* If user is authorized, allow acess to parm update field*/
   /* ------------------------------------------------------------*/

  if (PT03W00.PT03WERF == "N") /* No edir errors*/
    if (CACHGFL == "Y") /* Updates allowed by this user*/
      set PT03M002.PT03MPRM cursor; /* Have cursor appear here first*/
    else
      set PT03M002.PT03MPDT cursor; /* Have cursor appear here first*/
      set PT03M002.PT03MPRM skip; /* No access to this field*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  PT03M002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT03M002.XURDEST = TA6REC.XURDEST; /* Print destination*/
  PT03M002.XRODESC = TA6REC.XRODESC; /* Printer description*/
  PT03M002.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  PT03M002.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  PT03M002.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT03M002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT03M002.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT03M002 alarm; /* Indicate sound alarm*/

  end

  converse PT03M002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PT03022

// Check attention identifier
Function PT03023()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PT03W00.PT03MSEL[2] = "C"; /* Indicate selection cancelled*/

    set PT03M002 initial; /* m002 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PT03W00.PT03MSEL[2] = " "; /* Indicate nothing done*/
    COMMAREA.CAMSG = "NO ACTION TAKEN ON PREVIOUS SCREEN";

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "023"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PT03023

// Reset highlighted fields
Function PT03024()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (CACHGFL == "Y")
    set PT03M002.PT03MPRM initialAttributes;
    set PT03M002.PT03MHYP initialAttributes;
  else
    set PT03M002.PT03MPRM skip;
    set PT03M002.PT03MHYP skip;
  end
  set PT03M002.PT03MPDT initialAttributes;
  set PT03M002.PT03MDDT initialAttributes;
  set PT03M002.PT03MSCD initialAttributes;
  set PT03M002.PT03MSYR initialAttributes;
  set PT03M002.PT03MIND initialAttributes;
  set PT03M002.PT03MVER initialAttributes;
  set PT03M002.PT03MGEN initialAttributes;
  set PT03M002.PT03MCAT initialAttributes;


   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PT03M002.PT03MGEN == "?" /* gendar age code*/
   || PT03M002.PT03MCAT == "?") /* product category code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      PTWREC.XXXMODID = "024"; /* Module identification*/
      converseLib.validationFailed(4); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

  /* EZERTN;                        /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of gender age codes*/
   /* ------------------------------------------------------------*/

  if (PT03M002.PT03MGEN == "?") /* gender age code*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "GENDER AGE CODE "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXGA01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      PT03M002.PT03MGEN = XGATBL.XGACD[XX0XWPIX]; /* Selected code*/

    end

    set PT03M002.PT03MGEN cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product categories*/
   /* ------------------------------------------------------------*/

  if (PT03M002.PT03MCAT == "?") /* product category*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT CATEGORY CODE "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      PT03M002.PT03MCAT = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/

    end

    set PT03M002.PT03MCAT cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  set PT03M002.PT03MPD2 initialAttributes;
  set PT03M002.PT03MDD2 initialAttributes;
  set PT03M002.PT03MSC2 initialAttributes;
  set PT03M002.PT03MSY2 initialAttributes;
  set PT03M002.PT03MIN2 initialAttributes;
  set PT03M002.PT03MVE2 initialAttributes;
  set PT03M002.PT03MGE2 initialAttributes;
  set PT03M002.PT03MCA2 initialAttributes;

  if ((PT03M002.PT03MPD2 == 0 || 
  PT03M002.PT03MPD2 == " ") && 
  (PT03M002.PT03MDD2 == 0 || 
  PT03M002.PT03MDD2 == " ") && 
  PT03M002.PT03MSC2 == " " && 
  PT03M002.PT03MSY2 == " " && 
  PT03M002.PT03MIN2 == " " && 
  PT03M002.PT03MGE2 == " " && 
  PT03M002.PT03MCA2 == " " && 
  PT03M002.PT03MVE2 == " ")
    PT03W00.PT03WCOL = "N";
  else
    PT03W00.PT03WCOL = "Y";
  end

  if (PT03M002.PT03MGE2 == "?" /* gendar age code*/
   || PT03M002.PT03MCA2 == "?") /* product category code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      PTWREC.XXXMODID = "024"; /* Module identification*/
      converseLib.validationFailed(4); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

    /* ------------------------------------------------------------*/
    /* If requested, display the list of gender age codes*/
    /* ------------------------------------------------------------*/

  if (PT03W00.PT03WCOL == "Y")
    if (PT03M002.PT03MGE2 == "?") /* gender age code*/

      XPXX001(); /* window initialization*/
      XX0XW02.XX0XWHDR = "GENDER AGE CODE "; /* Heading*/

      XX0XW02.XGPCD = COMMAREA.XGPCD;
      while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
        XPXGA01(); /* Display the list*/
      end

      if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

        PT03M002.PT03MGE2 = XGATBL.XGACD[XX0XWPIX]; /* Selected code*/

      end

      set PT03M002.PT03MGE2 cursor; /* Establish cursor position*/

    end

    /* ------------------------------------------------------------*/
    /* If requested, display the list of product categories*/
    /* ------------------------------------------------------------*/

    if (PT03M002.PT03MCA2 == "?") /* product category*/

      XPXX001(); /* window initialization*/
      XX0XW02.XX0XWHDR = "PRODUCT CATEGORY CODE "; /* Heading*/

      XX0XW02.XGPCD = COMMAREA.XGPCD;
      while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
        XPXPC01(); /* Display the list*/
      end

      if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

        PT03M002.PT03MCA2 = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/

      end

      set PT03M002.PT03MCA2 cursor; /* Establish cursor position*/

    end

    /* ------------------------------------------------------------*/
    /* Indicate that the requested lists have been displayed and*/
    /* that ENTER must be pressed to process any changes.*/
    /* ------------------------------------------------------------*/

  end
  converseLib.clearScreen();
   /* Clear screen before display*/

  PTWREC.XXXMODID = "024"; /* Module identification*/
  converseLib.validationFailed(42); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/



end // end PT03024

// Verify the entered data
Function PT03025()
   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

  PT03W00.PT03WERF = "N";

   /* ------------------------------------------------------------*/
   /* validate parm update field*/
   /* ------------------------------------------------------------*/

  if (PT03M002.PT03MPRM != "P"
   && PT03M002.PT03MPRM != "R")
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(80);
    PTWREC.XXXMODID = "025";
    set PT03M002.PT03MPRM cursor, bold;
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate hyperchannel job run option*/
   /* ------------------------------------------------------------*/

  if (PT03M002.PT03MHYP != "Y"
   && PT03M002.PT03MHYP != "N")
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(124);
    PTWREC.XXXMODID = "025";
    set PT03M002.PT03MHYP cursor, bold;
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate production due date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGE = PT03M002.PT03MPDT;
  PT03S02(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set PT03M002.PT03MPDT cursor, bold; /* Highlight*/
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(81); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "025";
    return;
  else
    set PT03M002.PT03MPDT initialAttributes;
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate demand as of date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGDD = "01";
  TA2REC.TA2GRGE = PT03M002.PT03MDDT;
  PT03S02(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set PT03M002.PT03MDDT cursor, bold; /* Highlight*/
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(81); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "025";
    return;
  else
    set PT03M002.PT03MDDT initialAttributes;
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate season code*/
   /* ------------------------------------------------------------*/

  if (PT03M002.PT03MSCD != "FA"
   && PT03M002.PT03MSCD != "SU"
   && PT03M002.PT03MSCD != "SP"
   && PT03M002.PT03MSCD != "HO"
   && PT03M002.PT03MSCD != "**")
    set PT03M002.PT03MSCD cursor, bold; /* Highlight*/
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(111); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "025";
    return;
  else
    set PT03M002.PT03MSCD initialAttributes;
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate season year*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;
  TA2REC.TA2GRTYP = "G";
  PT03W00.PT03WDT3 = "    0101";
  PT03W00.PT03WDCY = PT03M002.PT03MSYR;
  TA2REC.TA2GRGG = PT03W00.PT03WDT3;
  PT03S02(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set PT03M002.PT03MSYR cursor, bold; /* Highlight*/
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(81); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "025";
    return;
  else
    set PT03M002.PT03MSYR initialAttributes;
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate gender age*/
   /* ------------------------------------------------------------*/

  if (PT03M002.PT03MGEN != "* "
   && PT03M002.PT03MGEN != "**")
    if (PT03M002.PT03MGEN in XGATBL.XGACD)
      set PT03M002.PT03MGEN initialAttributes;
    else
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(109);
      PTWREC.XXXMODID = "025";
      set PT03M002.PT03MGEN cursor, bold;
    end
  else
    set PT03M002.PT03MGEN initialAttributes;
    PT03M002.PT03MGEN = "**";

  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate category*/
   /* ------------------------------------------------------------*/

  if (PT03M002.PT03MCAT != "* "
   && PT03M002.PT03MCAT != "**")
    if (PT03M002.PT03MCAT in XPCTBL.XPCCD)
      set PT03M002.PT03MCAT initialAttributes;
    else
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(110);
      PTWREC.XXXMODID = "025";
      set PT03M002.PT03MCAT cursor, bold;
    end
  else
    set PT03M002.PT03MCAT initialAttributes;
    PT03M002.PT03MCAT = "**";

  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate report selection indicator*/
   /* ------------------------------------------------------------*/

  if (PT03M002.PT03MIND != "*"
   && PT03M002.PT03MIND != "S"
   && PT03M002.PT03MIND != "C")
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(108);
    PTWREC.XXXMODID = "025";
    set PT03M002.PT03MIND cursor, bold;
  else
    set PT03M002.PT03MIND initialAttributes;
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate report version indicator*/
   /* ------------------------------------------------------------*/

  if (PT03M002.PT03MVER != "*"
   && PT03M002.PT03MVER != "R"
   && PT03M002.PT03MVER != "S")
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(108);
    PTWREC.XXXMODID = "025";
    set PT03M002.PT03MVER cursor, bold;
  else
    set PT03M002.PT03MVER initialAttributes;
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


  if (PT03W00.PT03WCOL == "Y")
    /* ------------------------------------------------------------*/
    /* validate production due date*/
    /* ------------------------------------------------------------*/

    set TA2REC empty;
    TA2REC.TA2GRTYP = "E";
    TA2REC.TA2GRGE = PT03M002.PT03MPD2;
    PT03S02(); /* edit date range*/

    if (TA2REC.TA2RTNCD != 0)
      set PT03M002.PT03MPD2 cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(81); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "025";
      return;
    else
      set PT03M002.PT03MPD2 initialAttributes;
    end

    if (PT03W00.PT03WERF == "Y")
      return;
    end


    /* ------------------------------------------------------------*/
    /* validate demand as of date*/
    /* ------------------------------------------------------------*/

    set TA2REC empty;
    TA2REC.TA2GRTYP = "E";
    TA2REC.TA2GRGDD = "01";
    TA2REC.TA2GRGE = PT03M002.PT03MDD2;
    PT03S02(); /* edit date range*/

    if (TA2REC.TA2RTNCD != 0)
      set PT03M002.PT03MDD2 cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(81); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "025";
      return;
    else
      set PT03M002.PT03MDD2 initialAttributes;
    end

    if (PT03W00.PT03WERF == "Y")
      return;
    end


    /* ------------------------------------------------------------*/
    /* validate season code*/
    /* ------------------------------------------------------------*/

    if (PT03M002.PT03MSC2 == "**")
      set PT03M002.PT03MSC2 cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(172); /* '**' is allowed only for first set*/
      PTWREC.XXXMODID = "025";
      return;
    end

    if (PT03M002.PT03MSC2 != "FA"
     && PT03M002.PT03MSC2 != "SU"
     && PT03M002.PT03MSC2 != "SP"
     && PT03M002.PT03MSC2 != "HO"
     && PT03M002.PT03MSC2 != "**")
      set PT03M002.PT03MSC2 cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(111); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "025";
      return;
    else
      set PT03M002.PT03MSC2 initialAttributes;
    end

    if (PT03W00.PT03WERF == "Y")
      return;
    end


    /* ------------------------------------------------------------*/
    /* validate season year*/
    /* ------------------------------------------------------------*/

    set TA2REC empty;
    TA2REC.TA2GRTYP = "G";
    PT03W00.PT03WDT3 = "    0101";
    PT03W00.PT03WDCY = PT03M002.PT03MSY2;
    TA2REC.TA2GRGG = PT03W00.PT03WDT3;
    PT03S02(); /* edit date range*/

    if (TA2REC.TA2RTNCD != 0)
      set PT03M002.PT03MSY2 cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(81); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "025";
      return;
    else
      set PT03M002.PT03MSY2 initialAttributes;
    end

    if (PT03W00.PT03WERF == "Y")
      return;
    end

    /* ------------------------------------------------------------*/
    /* validate gender age*/
    /* ------------------------------------------------------------*/

    if (PT03M002.PT03MGE2 != "* "
     && PT03M002.PT03MGE2 != "**")
      if (PT03M002.PT03MGE2 in XGATBL.XGACD)
        set PT03M002.PT03MGE2 initialAttributes;
      else
        PT03W00.PT03WERF = "Y";
        converseLib.validationFailed(109);
        PTWREC.XXXMODID = "025";
        set PT03M002.PT03MGE2 cursor, bold;
      end
    else
      set PT03M002.PT03MGE2 initialAttributes;
      PT03M002.PT03MGE2 = "**";

    end

    if (PT03W00.PT03WERF == "Y")
      return;
    end


    /* ------------------------------------------------------------*/
    /* validate category*/
    /* ------------------------------------------------------------*/

    if (PT03M002.PT03MCA2 != "* "
     && PT03M002.PT03MCA2 != "**")
      if (PT03M002.PT03MCA2 in XPCTBL.XPCCD)
        set PT03M002.PT03MCA2 initialAttributes;
      else
        PT03W00.PT03WERF = "Y";
        converseLib.validationFailed(110);
        PTWREC.XXXMODID = "025";
        set PT03M002.PT03MCA2 cursor, bold;
      end
    else
      set PT03M002.PT03MCA2 initialAttributes;
      PT03M002.PT03MCA2 = "**";

    end

    if (PT03W00.PT03WERF == "Y")
      return;
    end

    /* ------------------------------------------------------------*/
    /* validate report selection indicator*/
    /* ------------------------------------------------------------*/

    if (PT03M002.PT03MIN2 != "*"
     && PT03M002.PT03MIN2 != "S"
     && PT03M002.PT03MIN2 != "C")
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(108);
      PTWREC.XXXMODID = "025";
      set PT03M002.PT03MIN2 cursor, bold;
    else
      set PT03M002.PT03MIN2 initialAttributes;
    end

    if (PT03W00.PT03WERF == "Y")
      return;
    end

    /* ------------------------------------------------------------*/
    /* validate report version indicator*/
    /* ------------------------------------------------------------*/

    if (PT03M002.PT03MVE2 != "*"
     && PT03M002.PT03MVE2 != "R"
     && PT03M002.PT03MVE2 != "S")
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(108);
      PTWREC.XXXMODID = "025";
      set PT03M002.PT03MVE2 cursor, bold;
    else
      set PT03M002.PT03MVE2 initialAttributes;
    end

    if (PT03W00.PT03WERF == "Y")
      return;
    end
  end
end // end PT03025

// Process valid input request
Function PT03026()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* if parm update was requested then UPDATE PARMS!! NOOOW!!!!!!*/
   /* ------------------------------------------------------------*/

  if (PT03M002.PT03MPRM == "P")

    PT03S26();
    PT03W00.PT03MSEL[2] = "*";
    COMMAREA.CAMSG = "DELIVERY ANALYSIS PARMS(BEAVERTON) - UPDATED";
    return;

  end

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/
  PT03W00.PT03WIXT = 1;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into subroutine work area.*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03") /* if production JCL*/
    PT03027(); /* format production jcl*/
  else
    PT03028(); /* format test jcl*/
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "026"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PT03W00.PT03MSEL[2] = "*";
    COMMAREA.CAMSG = "DELIVERY ANALYSIS RPT(BEAVERTON) - SUBMITTED ";

  /* SET PT03M002 CLEAR;            /* Clear map output area*/

  /* EZERTN;                        /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  if (PT03W00.PT03WCOL == "Y"
  ) /* ------------------------------------------------------------*/
    /* Initialise the work area and indexes to be used.*/
    /* ------------------------------------------------------------*/

    move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

    TA6REC.TA6INDEX = 1; /* Output array index*/
    PT03W00.PT03WIXT = 1;

    /* ------------------------------------------------------------*/
    /* Format JCL and parameters into subroutine work area.*/
    /* ------------------------------------------------------------*/

    if (TA3REC.TA3RGNID == "03") /* if production JCL*/
      PT03-0261(); /* format production JCL*/
    else
      PT03-0262(); /* format test JCL*/
    end

    /* ------------------------------------------------------------*/
    /* Submit the JCL and parameters for batch execution.*/
    /* ------------------------------------------------------------*/

    TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
    TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

    XPTA0P(); /* Submit JCL for background job*/

    /* ------------------------------------------------------------*/
    /* If Submit was successful , return to the previous process.*/
    /* ------------------------------------------------------------*/

    PTWREC.XXXMODID = "026"; /* Module Identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && TA6REC.TA6RTNCD == "0")        /* and normal return*/

      PT03W00.PT03MSEL[2] = "*";
      COMMAREA.CAMSG = "DELIVERY ANALYSIS RPT & RPT-II(BEAVERTON)-SUBMITTED ";

      set PT03M002 initial; /* Clear map output area*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
    /* Otherwise, indicate that an unexpected error has occurred.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode != "00000000" /* Call not successful*/
     || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

      converseLib.validationFailed(1); /* Unexpected error occurred*/

    end
  else
    set PT03M002 initial; /* Clear map output area*/

    return; /* Return to previous process*/
  end

  exit stack; /* Exit to display map*/


end // end PT03026

// Process valid production jcl
Function PT03027()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT03T02.TARTYPE[PT03WIXT] == "W")
      if (PT03M002.XURDEST == "LOCAL") /* destination lazer*/
        PT03W02.PT03WOT1 = "/*OUTPUT  PT01 FORMS=PT01,COPIES=";
        PT03W02.XURCOPY = TA6REC.XURCOPY;
        PT03W02.PT03WOT2 = ",DEST=RMT00";
        TA6REC.TARJCL[TA6INDEX] = PT03W02.PT03WOUT;

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        PT03W02.PT03WOT1 = "/*OUTPUT  PT02 FORMS=PT02,COPIES=";
        TA6REC.TARJCL[TA6INDEX] = PT03W02.PT03WOUT;

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        PT03W02.PT03WOT1 = "/*OUTPUT  PT03 FORMS=PT03,COPIES=";
        TA6REC.TARJCL[TA6INDEX] = PT03W02.PT03WOUT;

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        PT03W02.PT03WOT1 = "/*OUTPUT  PT04 FORMS=PT04,COPIES=";
        TA6REC.TARJCL[TA6INDEX] = PT03W02.PT03WOUT;

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT01 FORMS=PT01,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT02 FORMS=PT02,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT03 FORMS=PT03,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT04 FORMS=PT04,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

      end
    else

      if (PT03T02.TARJCL[PT03WIXT] == "//*** PRINT STEPS GO HERE ***")
        if (PT03W02.PT03MIND == "*" /* (1)*/
         && PT03W02.PT03MVER == "*")
          PT03-0271(); /* add regular color report*/
          PT03-0272(); /* add regular style report*/
          PT03-0273(); /* add scheduler color report*/
          PT03-0274(); /* add scheduler style report*/
        else
          if (PT03W02.PT03MIND == "*" /* (2)*/
           && PT03W02.PT03MVER == "R")
            PT03-0271(); /* add regular color report*/
            PT03-0272(); /* add regular style report*/
          else
            if (PT03W02.PT03MIND == "*" /* (3)*/
             && PT03W02.PT03MVER == "S")
              PT03-0273(); /* add scheduler color report*/
              PT03-0274(); /* add scheduler style report*/
            else
              if (PT03W02.PT03MIND == "C" /* (4)*/
               && PT03W02.PT03MVER == "*")
                PT03-0271(); /* add regular color report*/
                PT03-0273(); /* add scheduler color report*/
              else
                if (PT03W02.PT03MIND == "S" /* (5)*/
                 && PT03W02.PT03MVER == "*")
                  PT03-0272(); /* add regular style report*/
                  PT03-0274(); /* add scheduler style report*/
                else
                  if (PT03W02.PT03MIND == "C" /* (6)*/
                   && PT03W02.PT03MVER == "R")
                    PT03-0271(); /* add regular color report*/
                  else
                    if (PT03W02.PT03MIND == "S" /* (7)*/
                     && PT03W02.PT03MVER == "R")
                      PT03-0272(); /* add regular style report*/
                    else
                      if (PT03W02.PT03MIND == "C" /* (8)*/
                       && PT03W02.PT03MVER == "S")
                        PT03-0273(); /* add scheduler color report*/
                      else
                        if (PT03W02.PT03MIND == "S" /* (9)*/
                         && PT03W02.PT03MVER == "S")
                          PT03-0274(); /* add scheduler style report*/
                        end /* (9)*/
                      end /* (8)*/
                    end /* (7)*/
                  end /* (6)*/
                end /* (5)*/
              end /* (4)*/
            end /* (3)*/
          end /* (2)*/
        end /* (1)*/

      else

        if (PT03T02.TARJCL[PT03WIXT] == "===HYPERCHANNEL STEP===")
          if (PT03M002.PT03MHYP == "Y") /* (1)*/
            PT0302E(); /* run hyperchannel job*/
          end

        else
          if (PT03T02.TARTYPE[PT03WIXT] == "P") /* Parameters statement*/


            /* ------------------------------------------------------------*/
            /* Format the variable parameters entered by the user.*/

            /* ------------------------------------------------------------*/

            set PT03W02 empty; /* Parameters work area*/

            PT03W02.PT03MPRM = "R";
            PT03W00.PT03WDAT = PT03M002.PT03MPDT;
            PT03W02.PT03WYY = PT03W00.PT03WYY;
            PT03W02.PT03WMM = PT03W00.PT03WMM;
            PT03W02.PT03WDD = PT03W00.PT03WDD;
            PT03W02.PT03MDDT = PT03M002.PT03MDDT;
            PT03W02.PT03MSCD = PT03M002.PT03MSCD;
            PT03W02.PT03MSYR = PT03M002.PT03MSYR;
            PT03W02.PT03MIND = PT03M002.PT03MIND;
            PT03W02.PT03MVER = PT03M002.PT03MVER;
            PT03W02.PT03MGEN = PT03M002.PT03MGEN;
            PT03W02.PT03MCAT = PT03M002.PT03MCAT;

            TA6REC.TARJCL[TA6INDEX] = PT03W02.TARJCL; /* Parameters*/

            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          else

            TA6REC.TARJCL[TA6INDEX] = PT03T02.TARJCL[PT03WIXT]; /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = PT03T02.TARTYPE[PT03WIXT];
                                   /* Type*/

            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          end
        end
      end
    end


      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

    if (PT03T02.TARJCL[PT03WIXT] == "/*EOF") /* End of table*/
      TA6REC.TARJCL[TA6INDEX] = "//*    "; /* JCL*/
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT03W00.PT03WIXT = PT03W00.PT03WIXT + 1; /* Input table index*/

    end

  end

end // end PT03027

// Process valid test jcl
Function PT03028()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT03T12.TARJCL[PT03WIXT] == "===NOTIFY===")
      PT03W2A.PT03WPR9 = "//             NOTIFY=";
      PT03W2A.PT03WUID = TA6REC.XURUSRID;
      PT03W2A.PT03WFL9 = " ";
      TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC9;

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      if (PT03T12.TARJCL[PT03WIXT] == "===OUTPUT1===")
        if (PT03M002.XURDEST == "LOCAL") /* destination lazer*/
          PT03W02.PT03WOT1 = "/*OUTPUT  PT01 FORMS=PT01,COPIES=";
          PT03W02.XURCOPY = TA6REC.XURCOPY;
          PT03W02.PT03WOT2 = ",DEST=RMT00";
          TA6REC.TARJCL[TA6INDEX] = PT03W02.PT03WOUT;
          TA6REC.TARTYPE[TA6INDEX] = " ";

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        else
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT01 FORMS=PT01,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        end
      else

        if (PT03T12.TARJCL[PT03WIXT] == "===OUTPUT2===")
          if (PT03M002.XURDEST == "LOCAL") /* destination lazer*/
            PT03W02.PT03WOT1 = "/*OUTPUT  PT02 FORMS=PT02,COPIES=";
            PT03W02.XURCOPY = TA6REC.XURCOPY;
            PT03W02.PT03WOT2 = ",DEST=RMT00";
            TA6REC.TARJCL[TA6INDEX] = PT03W02.PT03WOUT;
            TA6REC.TARTYPE[TA6INDEX] = " ";

            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          else
            TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT02 FORMS=PT02,COPIES=_,DEST=_____";
            TA6REC.TARTYPE[TA6INDEX] = "O";

            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          end
        else

          if (PT03T12.TARJCL[PT03WIXT] == "===OUTPUT3===")
            if (PT03M002.XURDEST == "LOCAL") /* destination lazer*/
              PT03W02.PT03WOT1 = "/*OUTPUT  PT03 FORMS=PT03,COPIES=";
              PT03W02.XURCOPY = TA6REC.XURCOPY;
              PT03W02.PT03WOT2 = ",DEST=RMT00";
              TA6REC.TARJCL[TA6INDEX] = PT03W02.PT03WOUT;
              TA6REC.TARTYPE[TA6INDEX] = " ";

              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

            else
              TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT03 FORMS=PT03,COPIES=_,DEST=_____";
              TA6REC.TARTYPE[TA6INDEX] = "O";

              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

            end
          else

            if (PT03T12.TARJCL[PT03WIXT] == "===OUTPUT4===")
              if (PT03M002.XURDEST == "LOCAL") /* destination lazer*/
                PT03W02.PT03WOT1 = "/*OUTPUT  PT04 FORMS=PT04,COPIES=";
                PT03W02.XURCOPY = TA6REC.XURCOPY;
                PT03W02.PT03WOT2 = ",DEST=RMT00";
                TA6REC.TARJCL[TA6INDEX] = PT03W02.PT03WOUT;
                TA6REC.TARTYPE[TA6INDEX] = " ";

                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

              else
                TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT04 FORMS=PT04,COPIES=_,DEST=_____";
                TA6REC.TARTYPE[TA6INDEX] = "O";

                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

              end
            else

              if (PT03T12.TARJCL[PT03WIXT] == 
              "//*** PRINT STEPS GO HERE ***")
                if (PT03W02.PT03MIND == "*" /* (1)*/
                 && PT03W02.PT03MVER == "*")
                  PT03-0281(); /* add regular color report*/
                  PT03-0282(); /* add regular style report*/
                  PT03-0283(); /* add scheduler color report*/
                  PT03-0284(); /* add scheduler style report*/
                end
                if (PT03W02.PT03MIND == "*" /* (2)*/
                 && PT03W02.PT03MVER == "R")
                  PT03-0281(); /* add regular color report*/
                  PT03-0282(); /* add regular style report*/
                end
                if (PT03W02.PT03MIND == "*" /* (3)*/
                 && PT03W02.PT03MVER == "S")
                  PT03-0283(); /* add scheduler color report*/
                  PT03-0284(); /* add scheduler style report*/
                end
                if (PT03W02.PT03MIND == "C" /* (4)*/
                 && PT03W02.PT03MVER == "*")
                  PT03-0281(); /* add regular color report*/
                  PT03-0283(); /* add scheduler color report*/
                end
                if (PT03W02.PT03MIND == "S" /* (5)*/
                 && PT03W02.PT03MVER == "*")
                  PT03-0282(); /* add regular style report*/
                  PT03-0284(); /* add scheduler style report*/
                end
                if (PT03W02.PT03MIND == "C" /* (6)*/
                 && PT03W02.PT03MVER == "R")
                  PT03-0281(); /* add regular color report*/
                end
                if (PT03W02.PT03MIND == "S" /* (7)*/
                 && PT03W02.PT03MVER == "R")
                  PT03-0282(); /* add regular style report*/
                end
                if (PT03W02.PT03MIND == "C" /* (8)*/
                 && PT03W02.PT03MVER == "S")
                  PT03-0283(); /* add scheduler color report*/
                end
                if (PT03W02.PT03MIND == "S" /* (9)*/
                 && PT03W02.PT03MVER == "S")
                  PT03-0284(); /* add scheduler style report*/
                end /* (9)*/

              else
                if (PT03T12.TARJCL[PT03WIXT] == "===HYPERCHANNEL STEP===")
                  if (PT03M002.PT03MHYP == "Y") /* run hyperchannel job*/
                    PT0302Q();
                  end
                else

                  if (PT03T12.TARTYPE[PT03WIXT] == "P")
                                   /* Parameters statement*/


            /* ------------------------------------------------------------*/
                    /* Format the variable parameters entered by the user.*/

            /* ------------------------------------------------------------*/

                    set PT03W02 empty; /* Parameters work area*/

                    PT03W02.PT03MPRM = "R";
                    PT03W00.PT03WDAT = PT03M002.PT03MPDT;
                    PT03W02.PT03WYY = PT03W00.PT03WYY;
                    PT03W02.PT03WMM = PT03W00.PT03WMM;
                    PT03W02.PT03WDD = PT03W00.PT03WDD;
                    PT03W02.PT03MDDT = PT03M002.PT03MDDT;
                    PT03W02.PT03MSCD = PT03M002.PT03MSCD;
                    PT03W02.PT03MSYR = PT03M002.PT03MSYR;
                    PT03W02.PT03MIND = PT03M002.PT03MIND;
                    PT03W02.PT03MVER = PT03M002.PT03MVER;
                    PT03W02.PT03MGEN = PT03M002.PT03MGEN;
                    PT03W02.PT03MCAT = PT03M002.PT03MCAT;

                    TA6REC.TARJCL[TA6INDEX] = PT03W02.TARJCL;
                                   /* Parameters*/

                    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/

                  else

                    TA6REC.TARJCL[TA6INDEX] = PT03T12.TARJCL[PT03WIXT]; /* JCL*/
                    TA6REC.TARTYPE[TA6INDEX] = PT03T12.TARTYPE[PT03WIXT]; /* Type*/

                    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;

                                   /* Output array index*/

                  end
                end
              end
            end
          end
        end
      end
    end


      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

    if (PT03T12.TARJCL[PT03WIXT] == "/*EOF") /* End of table*/
      TA6REC.TARJCL[TA6INDEX] = "//*    "; /* JCL*/
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT03W00.PT03WIXT = PT03W00.PT03WIXT + 1; /* Input table index*/

    end

  end

end // end PT03028

// Process valid prod  request
Function PT0302E()
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T2E.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T2E.TARTYPE[PT03WIDX]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T2E.TARJCL[PT03WIDX] == "/*EOF")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT0302E

// Process valid test  request
Function PT0302Q()
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T2Q.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T2Q.TARTYPE[PT03WIDX]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T2Q.TARJCL[PT03WIDX] == "/*EOF")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT0302Q

// factory performance report
Function PT03030()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If first time thru, Obtain default data.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PT03W00.PT03WRD3 == "Y" /* Request for data switch 'on'*/
   && converseVar.validationMsgNum == 0) /* and no previous errors*/
    PT03S31(); /* Select default data*/
    PT03W00.PT03WRD3 = "N"; /* Set switch 'off'*/
  end

  PT03032(); /* Format and display the map*/

  PT03033(); /* Check attention identifier*/

  PT03034(); /* Reset fields to normal intensity*/

  PT03035(); /* Verify the data that was entered*/

  PT03036(); /* Process valid input request*/


end // end PT03030

// Format and display the map
Function PT03032()
   /* ------------------------------------------------------------*/
   /* If user is authorized, allow acess to parm update field*/
   /* ------------------------------------------------------------*/

  if (PT03W00.PT03WERF == "N") /* No edir errors*/
    if (CACHGFL == "Y") /* Updates allowed by this user*/
      set PT03M003.PT03MPRM cursor; /* Have cursor appear here first*/
    else
      set PT03M003.PT03MSC1 cursor; /* Have cursor appear here first*/
      set PT03M003.PT03MPRM skip; /* No access to this field*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  PT03M003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT03M003.XURDEST = TA6REC.XURDEST; /* Print destination*/
  PT03M003.XRODESC = TA6REC.XRODESC; /* Printer description*/
  PT03M003.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  PT03M003.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  PT03M003.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT03M003.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT03M003.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT03M003 alarm; /* Indicate sound alarm*/

  end

  converse PT03M003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PT03032

// Check attention identifier
Function PT03033()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PT03W00.PT03MSEL[3] = "C"; /* Indicate selection cancelled*/

    set PT03M003 initial; /* m003 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PT03W00.PT03MSEL[3] = " "; /* Indicate selection cancelled*/
    COMMAREA.CAMSG = "NO ACTION TAKEN ON PREVIOUS SCREEM";

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "033"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PT03033

// Reset highlighted fields
Function PT03034()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (CACHGFL == "Y")
    set PT03M003.PT03MPRM initialAttributes;
  else
    set PT03M003.PT03MPRM skip;
  end
  set PT03M003.PT03MSC1 initialAttributes;
  set PT03M003.PT03MSC2 initialAttributes;
  set PT03M003.PT03MSC3 initialAttributes;
  set PT03M003.PT03MSC4 initialAttributes;
  set PT03M003.PT03MSY1 initialAttributes;
  set PT03M003.PT03MSY2 initialAttributes;
  set PT03M003.PT03MSY3 initialAttributes;
  set PT03M003.PT03MSY4 initialAttributes;
  set PT03M003.PT03MDOF initialAttributes;
  set PT03M003.PT03MCTY initialAttributes;
  set PT03M003.PT03MFAC initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PT03M003.PT03MCTY == "?") /* country code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      PTWREC.XXXMODID = "034"; /* Module identification*/
      converseLib.validationFailed(4); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of country codes*/
   /* ------------------------------------------------------------*/

  if (PT03M003.PT03MCTY == "?") /* country code*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "COUNTRY CODE "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      PT03M003.PT03MCTY = XCTTBL.XCTCD[XX0XWPIX]; /* Selected code*/

    end

    set PT03M003.PT03MCTY cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  PTWREC.XXXMODID = "034"; /* Module identification*/
  converseLib.validationFailed(42); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end PT03034

// Verify the entered data
Function PT03035()

   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

  PT03W00.PT03WERF = "N";

   /* ------------------------------------------------------------*/
   /* validate parm update field*/
   /* ------------------------------------------------------------*/

  if (PT03M003.PT03MPRM != "P"
   && PT03M003.PT03MPRM != "R")
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(80);
    PTWREC.XXXMODID = "035";
    set PT03M003.PT03MPRM cursor, bold;
    return;
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate 'short' season/year code( first )*/
   /* ------------------------------------------------------------*/

  PT03W00.PT03WSESN1 = " ";
  PT03W00.PT03WSEASON = "    ";
  if (PT03M003.PT03MSC1 != "  ")
    if (PT03M003.PT03MSC1 == "SU")
      PT03W00.PT03WSESNCD1 = "U";
      PT03W00.PT03WSCODE1 = PT03M003.PT03MSC1;
    else
      if (PT03M003.PT03MSC1 == "FA")
        PT03W00.PT03WSESNCD1 = "F";
        PT03W00.PT03WSCODE1 = PT03M003.PT03MSC1;
      else
        if (PT03M003.PT03MSC1 == "HO")
          PT03W00.PT03WSESNCD1 = "H";
          PT03W00.PT03WSCODE1 = PT03M003.PT03MSC1;
        else
          if (PT03M003.PT03MSC1 == "SP")
            PT03W00.PT03WSESNCD1 = "S";
            PT03W00.PT03WSCODE1 = PT03M003.PT03MSC1;
          else
            PT03W00.PT03WERF = "Y";
            converseLib.validationFailed(82);
            PTWREC.XXXMODID = "035";
            set PT03M003.PT03MSC1 cursor, bold;
          end
        end
      end
    end
  else
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(82);
    PTWREC.XXXMODID = "035";
    set PT03M003.PT03MSC1 cursor, bold;
  end
  if (PT03W00.PT03WERF == "Y")
    return;
  end

  if (PT03M003.PT03MSY1 != 0)
    set TA2REC empty;
    TA2REC.TA2GRTYP = "G";
    PT03W00.PT03WDT3 = "    0101";
    PT03W00.PT03WDCY = PT03M003.PT03MSY1;
    TA2REC.TA2GRGG = PT03W00.PT03WDT3;
    PT03S02(); /* Edit date range*/

    if (TA2REC.TA2RTNCD != 0)
      set PT03M003.PT03MSY1 cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(81); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "035";
      return;
    else
      PT03W00.PT03WSESNYR1 = PT03M003.PT03MSY1;
      set PT03M003.PT03MSY1 initialAttributes;
    end
  else
    set PT03M003.PT03MSY1 cursor, bold; /* Highlight*/
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(81); /* Indicate date missing or invalid*/
    PTWREC.XXXMODID = "035";
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


  if (PT03W00.PT03WSESN1 != "  ")
    set PCFREC empty;
    PCFREC.PCFSECD = PT03W00.PT03WSESN1;
    PCFREC.XXXSTAT = "*";
    PCFREC.PCFBUYMO = -1;

    try
      call "IO4090" ("S1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      try
        call "IO4090" ("N1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
      end
      if (SQLCA.VAGen_SQLCODE != 0)
        set PT03M003.PT03MSC1 cursor, bold; /* Highlight*/
        set PT03M003.PT03MSY1 cursor, bold; /* Highlight*/
        PT03W00.PT03WERF = "Y";
        converseLib.validationFailed(82); /* missing or invalidseason code*/
        PTWREC.XXXMODID = "035";
      end
    else
      set PT03M003.PT03MSC1 cursor, bold; /* Highlight*/
      set PT03M003.PT03MSY1 cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(82); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "035";
    end
    try
      call "IO4090" ("C1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
    end
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate 'short' season/year code  ( second )*/
   /* ------------------------------------------------------------*/

  PT03W00.PT03WSESN2 = "  ";
  /* MOVE '        ' TO PT03W00.PT03WSEASON;*/
  if (PT03M003.PT03MSC2 != "  ")
    if (PT03M003.PT03MSC2 == "SU")
      PT03W00.PT03WSESNCD2 = "U";
      PT03W00.PT03WSCODE2 = PT03M003.PT03MSC2;
    else
      if (PT03M003.PT03MSC2 == "FA")
        PT03W00.PT03WSESNCD2 = "F";
        PT03W00.PT03WSCODE2 = PT03M003.PT03MSC2;
      else
        if (PT03M003.PT03MSC2 == "HO")
          PT03W00.PT03WSESNCD2 = "H";
          PT03W00.PT03WSCODE2 = PT03M003.PT03MSC2;
        else
          if (PT03M003.PT03MSC2 == "SP")
            PT03W00.PT03WSESNCD2 = "S";
            PT03W00.PT03WSCODE2 = PT03M003.PT03MSC2;
          else
            PT03W00.PT03WERF = "Y";
            converseLib.validationFailed(82); /* Invalid season code*/
            PTWREC.XXXMODID = "035";
            set PT03M003.PT03MSC2 cursor, bold;
          end
        end
      end
    end
  end
  if (PT03W00.PT03WERF == "Y")
    return;
  end

  if (PT03M003.PT03MSY2 != 0)
    set TA2REC empty;
    TA2REC.TA2GRTYP = "G";
    PT03W00.PT03WDT3 = "    0101";
    PT03W00.PT03WDCY = PT03M003.PT03MSY2;
    TA2REC.TA2GRGG = PT03W00.PT03WDT3;
    PT03S02(); /* edit date range*/

    if (TA2REC.TA2RTNCD != 0)
      set PT03M003.PT03MSY2 cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(81); /* Indicate missing or invalid date*/
      PTWREC.XXXMODID = "035";
      return;
    else
      PT03W00.PT03WSESNYR2 = PT03M003.PT03MSY2;
      set PT03M003.PT03MSY2 initialAttributes;
    end
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


  if (PT03W00.PT03WSESN2 != "  ")
    set PCFREC empty;
    PCFREC.PCFSECD = PT03W00.PT03WSESN2;
    PCFREC.XXXSTAT = "*";
    PCFREC.PCFBUYMO = -1;

    try
      call "IO4090" ("S1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      try
        call "IO4090" ("N1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
      end
      if (SQLCA.VAGen_SQLCODE != 0)
        set PT03M003.PT03MSC2 cursor, bold; /* Highlight*/
        set PT03M003.PT03MSY2 cursor, bold; /* Highlight*/
        PT03W00.PT03WERF = "Y";
        converseLib.validationFailed(82); /* Indicate missing or invalid season*/
        PTWREC.XXXMODID = "035";
      end
    else
      set PT03M003.PT03MSC2 cursor, bold; /* Highlight*/
      set PT03M003.PT03MSY2 cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(82); /* Indicate missing or invalid season*/
      PTWREC.XXXMODID = "035";
    end
    try
      call "IO4090" ("C1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
    end
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate 'short' season/year code  ( third  )*/
   /* ------------------------------------------------------------*/

  PT03W00.PT03WSESN3 = "  ";
  /* MOVE '        ' TO PT03W00.PT03WSEASON;*/
  if (PT03M003.PT03MSC3 != "  ")
    if (PT03M003.PT03MSC3 == "SU")
      PT03W00.PT03WSESNCD3 = "U";
      PT03W00.PT03WSCODE3 = PT03M003.PT03MSC3;
    else
      if (PT03M003.PT03MSC3 == "FA")
        PT03W00.PT03WSESNCD3 = "F";
        PT03W00.PT03WSCODE3 = PT03M003.PT03MSC3;
      else
        if (PT03M003.PT03MSC3 == "HO")
          PT03W00.PT03WSESNCD3 = "H";
          PT03W00.PT03WSCODE3 = PT03M003.PT03MSC3;
        else
          if (PT03M003.PT03MSC3 == "SP")
            PT03W00.PT03WSESNCD3 = "S";
            PT03W00.PT03WSCODE3 = PT03M003.PT03MSC3;
          else
            PT03W00.PT03WERF = "Y";
            converseLib.validationFailed(82);
            PTWREC.XXXMODID = "035";
            set PT03M003.PT03MSC3 cursor, bold;
          end
        end
      end
    end
  end
  if (PT03W00.PT03WERF == "Y")
    return;
  end

  if (PT03M003.PT03MSY3 != 0)
    set TA2REC empty;
    TA2REC.TA2GRTYP = "G";
    PT03W00.PT03WDT3 = "    0101";
    PT03W00.PT03WDCY = PT03M003.PT03MSY3;
    TA2REC.TA2GRGG = PT03W00.PT03WDT3;
    PT03S02(); /* edit date range*/

    if (TA2REC.TA2RTNCD != 0)
      set PT03M003.PT03MSY3 cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(81); /* Indicate missing or invalid date*/
      PTWREC.XXXMODID = "035";
      return;
    else
      PT03W00.PT03WSESNYR3 = PT03M003.PT03MSY3;
      set PT03M003.PT03MSY3 initialAttributes;
    end
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


  if (PT03W00.PT03WSESN3 != "  ")
    set PCFREC empty;
    PCFREC.PCFSECD = PT03W00.PT03WSESN3;
    PCFREC.XXXSTAT = "*";
    PCFREC.PCFBUYMO = -1;

    try
      call "IO4090" ("S1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      try
        call "IO4090" ("N1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
      end
      if (SQLCA.VAGen_SQLCODE != 0)
        set PT03M003.PT03MSC3 cursor, bold; /* Highlight*/
        set PT03M003.PT03MSY3 cursor, bold; /* Highlight*/
        PT03W00.PT03WERF = "Y";
        converseLib.validationFailed(82); /* Indicate missing or invalid*/
        PTWREC.XXXMODID = "035";
      end
    else
      set PT03M003.PT03MSC3 cursor, bold; /* Highlight*/
      set PT03M003.PT03MSY3 cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(82); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "035";
    end
    try
      call "IO4090" ("C1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
    end
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate 'short' season/year code  ( fourth )*/
   /* ------------------------------------------------------------*/

  PT03W00.PT03WSESN4 = "  ";
  /* MOVE '        ' TO PT03W00.PT03WSEASON;*/
  if (PT03M003.PT03MSC4 != "  ")
    if (PT03M003.PT03MSC4 == "SU")
      PT03W00.PT03WSESNCD4 = "U";
      PT03W00.PT03WSCODE4 = PT03M003.PT03MSC4;
    else
      if (PT03M003.PT03MSC4 == "FA")
        PT03W00.PT03WSESNCD4 = "F";
        PT03W00.PT03WSCODE4 = PT03M003.PT03MSC4;
      else
        if (PT03M003.PT03MSC4 == "HO")
          PT03W00.PT03WSESNCD4 = "H";
          PT03W00.PT03WSCODE4 = PT03M003.PT03MSC4;
        else
          if (PT03M003.PT03MSC4 == "SP")
            PT03W00.PT03WSESNCD4 = "S";
            PT03W00.PT03WSCODE4 = PT03M003.PT03MSC4;
          else
            PT03W00.PT03WERF = "Y";
            converseLib.validationFailed(82); /* Invalid season*/
            PTWREC.XXXMODID = "035";
            set PT03M003.PT03MSC4 cursor, bold;
          end
        end
      end
    end
  end
  if (PT03W00.PT03WERF == "Y")
    return;
  end

  if (PT03M003.PT03MSY4 != 0)
    set TA2REC empty;
    TA2REC.TA2GRTYP = "G";
    PT03W00.PT03WDT3 = "    0101";
    PT03W00.PT03WDCY = PT03M003.PT03MSY4;
    TA2REC.TA2GRGG = PT03W00.PT03WDT3;
    PT03S02(); /* edit date range*/

    if (TA2REC.TA2RTNCD != 0)
      set PT03M003.PT03MSY4 cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(81); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "035";
      return;
    else
      PT03W00.PT03WSESNYR4 = PT03M003.PT03MSY4;
      set PT03M003.PT03MSY4 initialAttributes;
    end
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


  if (PT03W00.PT03WSESN4 != "  ")
    set PCFREC empty;
    PCFREC.PCFSECD = PT03W00.PT03WSESN4;
    PCFREC.XXXSTAT = "*";
    PCFREC.PCFBUYMO = -1;

    try
      call "IO4090" ("S1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      try
        call "IO4090" ("N1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
      end
      if (SQLCA.VAGen_SQLCODE != 0)
        set PT03M003.PT03MSC4 cursor, bold; /* Highlight*/
        set PT03M003.PT03MSY4 cursor, bold; /* Highlight*/
        PT03W00.PT03WERF = "Y";
        converseLib.validationFailed(82); /* Indicate missing or invalid*/
        PTWREC.XXXMODID = "035";
      end
    else
      set PT03M003.PT03MSC4 cursor, bold; /* Highlight*/
      set PT03M003.PT03MSY4 cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(82); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "035";
    end
    try
      call "IO4090" ("C1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
    end
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate domestic/offshore*/
   /* ------------------------------------------------------------*/

  if (PT03M003.PT03MDOF != "*  "
   && PT03M003.PT03MDOF != " * "
   && PT03M003.PT03MDOF != "  *"
   && PT03M003.PT03MDOF != "** "
   && PT03M003.PT03MDOF != " **"
   && PT03M003.PT03MDOF != "* *"
   && PT03M003.PT03MDOF != "***"
   && PT03M003.PT03MDOF != "DOM"
   && PT03M003.PT03MDOF != "OFF")
    set PT03M003.PT03MDOF cursor, bold; /* Highlight*/
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(113); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "035";
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  else
    if (PT03M003.PT03MDOF != "DOM"
     && PT03M003.PT03MDOF != "OFF")
      PT03M003.PT03MDOF = "***";
    end
  end

   /* ------------------------------------------------------------*/
   /* validate country code*/
   /* ------------------------------------------------------------*/

  if (PT03M003.PT03MCTY != "*   "
   && PT03M003.PT03MCTY != "**  "
   && PT03M003.PT03MCTY != "*** "
   && PT03M003.PT03MCTY != "****")
    if (PT03M003.PT03MCTY in XCTTBL.XCTCD)
      set PT03M003.PT03MCTY initialAttributes;
    else
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(96);
      PTWREC.XXXMODID = "035";
      set PT03M003.PT03MCTY cursor, bold;
    end
  else
    set PT03M003.PT03MCTY initialAttributes;
    PT03M003.PT03MCTY = "****";

  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate country code/ domesctic/offshore*/
   /* ------------------------------------------------------------*/

  if (PT03M003.PT03MCTY != "****"
   && PT03M003.PT03MDOF != "***")
    set PT03M003.PT03MDOF cursor, bold;
    set PT03M003.PT03MCTY cursor, bold;
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(114);
    PTWREC.XXXMODID = "035";
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate factory code*/
   /* ------------------------------------------------------------*/

  if (PT03M003.PT03MFAC != "*   "
   && PT03M003.PT03MFAC != " *  "
   && PT03M003.PT03MFAC != "  * "
   && PT03M003.PT03MFAC != "**  "
   && PT03M003.PT03MFAC != " ** "
   && PT03M003.PT03MFAC != "* * "
   && PT03M003.PT03MFAC != "*** "
   && PT03M003.PT03MFAC != "****")
    set FY1REC empty;
    FY1REC.FY1FCTYC = PT03M003.PT03MFAC;
    FY1REC.XGPCD = "03";

    try
      call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
    end
    if (SQLCA.VAGen_SQLCODE != 0)
      set PT03M003.PT03MFAC cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(84); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "035";
    else
      set PT03M003.PT03MFAC initialAttributes;
    end
  else
    set PT03M003.PT03MFAC initialAttributes;
    PT03M003.PT03MFAC = "****";
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end
end // end PT03035

// Process valid input request
Function PT03036()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* if parm update was requested then UPDATE PARMS!! NOOOW!!!!!!*/
   /* ------------------------------------------------------------*/

  if (PT03M003.PT03MPRM == "P")

    PT03S36();
    PT03W00.PT03MSEL[3] = "*";
    COMMAREA.CAMSG = "APRL FACTORY PERFORMANCE PARMS - UPDATED";
    return;

  end
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/
  PT03W00.PT03WIXT = 1;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03") /* if on production system*/
    PT03037(); /* format production jcl*/
  else
    PT03038(); /* format test jcl*/
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "036"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PT03W00.PT03MSEL[3] = "*"; /* Indicate function completed*/
    COMMAREA.CAMSG = "APRL FAC PERFORM RPT - SUBMITTED";

    set PT03M003 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end PT03036

// Process valid production jcl
Function PT03037()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT03T03.TARTYPE[PT03WIXT] == "W")
      if (PT03M003.XURDEST == "LOCAL") /* destination lazer*/
        PT03W03.PT03WOT1 = "/*OUTPUT  PT01 FORMS=PT01,COPIES=";
        PT03W03.XURCOPY = TA6REC.XURCOPY;
        PT03W03.PT03WOT2 = ",DEST=RMT00";
        TA6REC.TARJCL[TA6INDEX] = PT03W03.PT03WOUT;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        PT03W03.PT03WOT1 = "/*OUTPUT  PT02 FORMS=PT02,COPIES=";
        TA6REC.TARJCL[TA6INDEX] = PT03W03.PT03WOUT;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        PT03W03.PT03WOT1 = "/*OUTPUT  PT03 FORMS=PT03,COPIES=";
        TA6REC.TARJCL[TA6INDEX] = PT03W03.PT03WOUT;
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT01 FORMS=PT01,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT02 FORMS=PT02,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT03 FORMS=PT03,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
    else

      if (PT03T03.TARJCL[PT03WIXT] == "===FILE01===")
        if (PT03M003.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT01)'";
        else
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT01)'";
        end
      else

        if (PT03T03.TARJCL[PT03WIXT] == "===FILE02===")
          if (PT03M003.XURDEST == "LOCAL") /* destination lazer*/
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT02)'";
          else
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT02)'";
          end
        else

          if (PT03T03.TARJCL[PT03WIXT] == "===FILE03===")
            if (PT03M003.XURDEST == "LOCAL") /* destination lazer*/
              TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT03)'";
            else
              TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT03)'";
            end
          else

            if (PT03T03.TARTYPE[PT03WIXT] == "P") /* Parameters statement*/


            /* ------------------------------------------------------------*/
              /* Format the variable parameters entered by the user.*/

            /* ------------------------------------------------------------*/

              set PT03W03 empty; /* Parameters work area*/

              PT03W03.PT03MPRM = "A";
              if (PT03M003.PT03MSC1 == "SU")
                PT03W00.PT03WSESNCD1 = "U";
              end
              if (PT03M003.PT03MSC1 == "FA")
                PT03W00.PT03WSESNCD1 = "F";
              end
              if (PT03M003.PT03MSC1 == "HO")
                PT03W00.PT03WSESNCD1 = "H";
              end
              if (PT03M003.PT03MSC1 == "SP")
                PT03W00.PT03WSESNCD1 = "S";
              end
              PT03W00.PT03WSESNYR1 = PT03M003.PT03MSY1;
              PT03W03.PT03MSY1 = PT03W00.PT03WSESN1;
              PT03W00.PT03WSCODE1 = PT03M003.PT03MSC1;

              if (PT03M003.PT03MSC2 == "SU")
                PT03W00.PT03WSESNCD2 = "U";
              end
              if (PT03M003.PT03MSC2 == "FA")
                PT03W00.PT03WSESNCD2 = "F";
              end
              if (PT03M003.PT03MSC2 == "HO")
                PT03W00.PT03WSESNCD2 = "H";
              end
              if (PT03M003.PT03MSC2 == "SP")
                PT03W00.PT03WSESNCD2 = "S";
              end
              if (PT03M003.PT03MSC2 == " "
               && PT03M003.PT03MSY2 == 0)
                PT03W03.PT03MSY2 = " ";
              else
                PT03W00.PT03WSESNYR2 = PT03M003.PT03MSY2;
                PT03W03.PT03MSY2 = PT03W00.PT03WSESN2;
              end
              PT03W00.PT03WSCODE2 = PT03M003.PT03MSC2;

              if (PT03M003.PT03MSC3 == "SU")
                PT03W00.PT03WSESNCD3 = "U";
              end
              if (PT03M003.PT03MSC3 == "FA")
                PT03W00.PT03WSESNCD3 = "F";
              end
              if (PT03M003.PT03MSC3 == "HO")
                PT03W00.PT03WSESNCD3 = "H";
              end
              if (PT03M003.PT03MSC3 == "SP")
                PT03W00.PT03WSESNCD3 = "S";
              end
              if (PT03M003.PT03MSC3 == "  "
               && PT03M003.PT03MSY3 == 0)
                PT03W03.PT03MSY3 = " ";
              else
                PT03W00.PT03WSESNYR3 = PT03M003.PT03MSY3;
                PT03W03.PT03MSY3 = PT03W00.PT03WSESN3;
              end
              PT03W00.PT03WSCODE3 = PT03M003.PT03MSC3;

              if (PT03M003.PT03MSC4 == "SU")
                PT03W00.PT03WSESNCD4 = "U";
              end
              if (PT03M003.PT03MSC4 == "FA")
                PT03W00.PT03WSESNCD4 = "F";
              end
              if (PT03M003.PT03MSC4 == "HO")
                PT03W00.PT03WSESNCD4 = "H";
              end
              if (PT03M003.PT03MSC4 == "SP")
                PT03W00.PT03WSESNCD4 = "S";
              end
              if (PT03M003.PT03MSC4 == "  "
               && PT03M003.PT03MSY4 == 0)
                PT03W03.PT03MSY4 = " ";
              else
                PT03W00.PT03WSESNYR4 = PT03M003.PT03MSY4;
                PT03W03.PT03MSY4 = PT03W00.PT03WSESN4;
              end
              PT03W00.PT03WSCODE4 = PT03M003.PT03MSC4;

              PT03W03.PT03MDOF = PT03M003.PT03MDOF;
              PT03W03.PT03MCTY = PT03M003.PT03MCTY;
              PT03W03.PT03MFAC = PT03M003.PT03MFAC;

              TA6REC.TARJCL[TA6INDEX] = PT03W03.TARJCL; /* Parameters*/

            else


            /* ------------------------------------------------------------*/
              /* Format the Job Control Language statement from the table.*/

            /* ------------------------------------------------------------*/

              TA6REC.TARJCL[TA6INDEX] = PT03T03.TARJCL[PT03WIXT];
                                   /* JCL*/
              TA6REC.TARTYPE[TA6INDEX] = PT03T03.TARTYPE[PT03WIXT];
                                   /* Type*/

            end
          end
        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT03T03.TARJCL[PT03WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT03W00.PT03WIXT = PT03W00.PT03WIXT + 1; /* Input table index*/

    end

  end

end // end PT03037

// Process valid test jcl
Function PT03038()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT03T13.TARJCL[PT03WIXT] == "===NOTIFY===")
      PT03W2A.PT03WPR9 = "//             NOTIFY=";
      PT03W2A.PT03WUID = TA6REC.XURUSRID;
      PT03W2A.PT03WFL9 = " ";
      TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC9;
    else

      if (PT03T13.TARJCL[PT03WIXT] == "===OUTPUT1===")
        if (PT03M003.XURDEST == "LOCAL") /* destination lazer*/
          PT03W03.PT03WOT1 = "/*OUTPUT  PT01 FORMS=PT01,COPIES=";
          PT03W03.XURCOPY = TA6REC.XURCOPY;
          PT03W03.PT03WOT2 = ",DEST=RMT00";
          TA6REC.TARJCL[TA6INDEX] = PT03W03.PT03WOUT;
          TA6REC.TARTYPE[TA6INDEX] = " ";
        else
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT01 FORMS=PT01,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
        end
      else

        if (PT03T13.TARJCL[PT03WIXT] == "===OUTPUT2===")
          if (PT03M003.XURDEST == "LOCAL") /* destination lazer*/
            PT03W03.PT03WOT1 = "/*OUTPUT  PT02 FORMS=PT02,COPIES=";
            PT03W03.XURCOPY = TA6REC.XURCOPY;
            PT03W03.PT03WOT2 = ",DEST=RMT00";
            TA6REC.TARJCL[TA6INDEX] = PT03W03.PT03WOUT;
            TA6REC.TARTYPE[TA6INDEX] = " ";
          else
            TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT02 FORMS=PT02,COPIES=_,DEST=_____";
            TA6REC.TARTYPE[TA6INDEX] = "O";
          end
        else

          if (PT03T13.TARJCL[PT03WIXT] == "===OUTPUT3===")
            if (PT03M003.XURDEST == "LOCAL") /* destination lazer*/
              PT03W03.PT03WOT1 = "/*OUTPUT  PT03 FORMS=PT03,COPIES=";
              PT03W03.XURCOPY = TA6REC.XURCOPY;
              PT03W03.PT03WOT2 = ",DEST=RMT00";
              TA6REC.TARJCL[TA6INDEX] = PT03W03.PT03WOUT;
              TA6REC.TARTYPE[TA6INDEX] = " ";
            else
              TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT03 FORMS=PT03,COPIES=_,DEST=_____";
              TA6REC.TARTYPE[TA6INDEX] = "O";
            end
          else

            if (PT03T13.TARJCL[PT03WIXT] == "===FILE01===")
              if (PT03M003.XURDEST == "LOCAL") /* destination lazer*/
                TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(2,,PT01)'";
              else
                TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(T,,PT01)'";
              end
            else

              if (PT03T13.TARJCL[PT03WIXT] == "===FILE02===")
                if (PT03M003.XURDEST == "LOCAL") /* destination lazer*/
                  TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(2,,PT02)'";
                else
                  TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(T,,PT02)'";
                end
              else

                if (PT03T13.TARJCL[PT03WIXT] == "===FILE03===")
                  if (PT03M003.XURDEST == "LOCAL") /* destination lazer*/
                    TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(2,,PT03)'";
                  else
                    TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(T,,PT03)'";
                  end
                else

                  if (PT03T13.TARTYPE[PT03WIXT] == "P")
                                   /* Parameters statement*/


            /* ------------------------------------------------------------*/
                    /* Format the variable parameters entered by the user.*/

            /* ------------------------------------------------------------*/

                    set PT03W03 empty; /* Parameters work area*/

                    PT03W03.PT03MPRM = "A";
                    if (PT03M003.PT03MSC1 == "SU")
                      PT03W00.PT03WSESNCD1 = "U";
                    end
                    if (PT03M003.PT03MSC1 == "FA")
                      PT03W00.PT03WSESNCD1 = "F";
                    end
                    if (PT03M003.PT03MSC1 == "HO")
                      PT03W00.PT03WSESNCD1 = "H";
                    end
                    if (PT03M003.PT03MSC1 == "SP")
                      PT03W00.PT03WSESNCD1 = "S";
                    end
                    PT03W00.PT03WSESNYR1 = PT03M003.PT03MSY1;
                    PT03W03.PT03MSY1 = PT03W00.PT03WSESN1;
                    PT03W00.PT03WSCODE1 = PT03M003.PT03MSC1;

                    if (PT03M003.PT03MSC2 == "SU")
                      PT03W00.PT03WSESNCD2 = "U";
                    end
                    if (PT03M003.PT03MSC2 == "FA")
                      PT03W00.PT03WSESNCD2 = "F";
                    end
                    if (PT03M003.PT03MSC2 == "HO")
                      PT03W00.PT03WSESNCD2 = "H";
                    end
                    if (PT03M003.PT03MSC2 == "SP")
                      PT03W00.PT03WSESNCD2 = "S";
                    end
                    if (PT03M003.PT03MSC2 == " "
                     && PT03M003.PT03MSY2 == 0)
                      PT03W03.PT03MSY2 = "  ";
                    else
                      PT03W00.PT03WSESNYR2 = PT03M003.PT03MSY2;
                      PT03W03.PT03MSY2 = PT03W00.PT03WSESN2;
                    end
                    PT03W00.PT03WSCODE2 = PT03M003.PT03MSC2;

                    if (PT03M003.PT03MSC3 == "SU")
                      PT03W00.PT03WSESNCD3 = "U";
                    end
                    if (PT03M003.PT03MSC3 == "FA")
                      PT03W00.PT03WSESNCD3 = "F";
                    end
                    if (PT03M003.PT03MSC3 == "HO")
                      PT03W00.PT03WSESNCD3 = "H";
                    end
                    if (PT03M003.PT03MSC3 == "SP")
                      PT03W00.PT03WSESNCD3 = "S";
                    end
                    if (PT03M003.PT03MSC3 == " "
                     && PT03M003.PT03MSY3 == 0)
                      PT03W03.PT03MSY3 = "  ";
                    else
                      PT03W00.PT03WSESNYR3 = PT03M003.PT03MSY3;
                      PT03W03.PT03MSY3 = PT03W00.PT03WSESN3;
                    end
                    PT03W00.PT03WSCODE3 = PT03M003.PT03MSC3;

                    if (PT03M003.PT03MSC4 == "SU")
                      PT03W00.PT03WSESNCD4 = "U";
                    end
                    if (PT03M003.PT03MSC4 == "FA")
                      PT03W00.PT03WSESNCD4 = "F";
                    end
                    if (PT03M003.PT03MSC4 == "HO")
                      PT03W00.PT03WSESNCD4 = "H";
                    end
                    if (PT03M003.PT03MSC4 == "SP")
                      PT03W00.PT03WSESNCD4 = "S";
                    end
                    if (PT03M003.PT03MSC4 == " "
                     && PT03M003.PT03MSY4 == 0)
                      PT03W03.PT03MSY4 = "  ";
                    else
                      PT03W00.PT03WSESNYR4 = PT03M003.PT03MSY4;
                      PT03W03.PT03MSY4 = PT03W00.PT03WSESN4;
                    end
                    PT03W00.PT03WSCODE4 = PT03M003.PT03MSC4;

                    PT03W03.PT03MDOF = PT03M003.PT03MDOF;
                    PT03W03.PT03MCTY = PT03M003.PT03MCTY;
                    PT03W03.PT03MFAC = PT03M003.PT03MFAC;

                    TA6REC.TARJCL[TA6INDEX] = PT03W03.TARJCL;
                                   /* Parameters*/

                  else


            /* ------------------------------------------------------------*/
                                  /* Format the Job Control Language*/
                                   /* statement from the table.*/

            /* ------------------------------------------------------------*/

                    TA6REC.TARJCL[TA6INDEX] = PT03T13.TARJCL[PT03WIXT]; /* JCL*/
                    TA6REC.TARTYPE[TA6INDEX] = PT03T13.TARTYPE[PT03WIXT]; /* Type*/

                  end
                end
              end
            end
          end
        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT03T13.TARJCL[PT03WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT03W00.PT03WIXT = PT03W00.PT03WIXT + 1; /* Input table index*/

    end

  end

end // end PT03038

// irregular/overrun report
Function PT03040()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If first time thru, Obtain default data.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PT03W00.PT03WRD4 == "Y" /* if switch is on*/
   && converseVar.validationMsgNum == 0) /* and no previous errors*/
    PT03S41(); /* Obtain default data*/
    PT03W00.PT03WRD4 = "N"; /* set switch off*/
  end

  PT03042(); /* Format and display the map*/

  PT03043(); /* Check attention identifier*/

  PT03044(); /* Reset fields to normal intensity*/

  PT03045(); /* Verify the data that was entered*/

  PT03046(); /* Process valid input request*/


end // end PT03040

// Format and display the map
Function PT03042()
   /* ------------------------------------------------------------*/
   /* If user is authorized, allow access to parm update field.*/
   /* ------------------------------------------------------------*/

  if (PT03W00.PT03WERF == "N") /* No edir errors*/
    if (CACHGFL == "Y") /* Updates allowed by this user*/
      set PT03M004.PT03MPRM cursor; /* Have cursor appear here first*/
    else
      set PT03M004.PT03MFAC cursor; /* Have cursor appear here first*/
      set PT03M004.PT03MPRM skip; /* No access to this field*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  PT03M004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT03M004.XURDEST = TA6REC.XURDEST; /* Print destination*/
  PT03M004.XRODESC = TA6REC.XRODESC; /* Printer description*/
  PT03M004.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  PT03M004.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  PT03M004.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT03M004.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT03M004.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT03M004 alarm; /* Indicate sound alarm*/

  end

  converse PT03M004 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PT03042

// Check attention identifier
Function PT03043()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PT03W00.PT03MSEL[4] = "C"; /* Indicate selection cancelled*/

    set PT03M004 initial; /* m004 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PT03W00.PT03MSEL[4] = " "; /* Indicate selection cancelled*/
    COMMAREA.CAMSG = "NO ACTION TAKEN ON PREVIOUS SCREEN";

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "043"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PT03043

// Reset highlighted fields
Function PT03044()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (CACHGFL == "Y")
    set PT03M004.PT03MPRM initialAttributes;
  else
    set PT03M004.PT03MPRM skip;
  end
  set PT03M004.PT03MDOF initialAttributes;
  set PT03M004.PT03MCTY initialAttributes;
  set PT03M004.PT03MFAC initialAttributes;
  set PT03M004.PT03MSY1 initialAttributes;
  set PT03M004.PT03MSC1 initialAttributes;
  set PT03M004.PT03MPOS initialAttributes;
  set PT03M004.PT03MSCH initialAttributes;
  set PT03M004.PT03MIND initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PT03M004.PT03MCTY == "?") /* country code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      PTWREC.XXXMODID = "044"; /* Module identification*/
      converseLib.validationFailed(4); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of country codes*/
   /* ------------------------------------------------------------*/

  if (PT03M004.PT03MCTY == "?") /* country code*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "COUNTRY CODE "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      PT03M004.PT03MCTY = XCTTBL.XCTCD[XX0XWPIX]; /* Selected code*/

    end

    set PT03M004.PT03MCTY cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  PTWREC.XXXMODID = "044"; /* Module identification*/
  converseLib.validationFailed(42); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end PT03044

// Verify the entered data
Function PT03045()

   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

  PT03W00.PT03WERF = "N";

   /* ------------------------------------------------------------*/
   /* validate parm update field*/
   /* ------------------------------------------------------------*/

  if (PT03M004.PT03MPRM != "P"
   && PT03M004.PT03MPRM != "R")
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(80);
    PTWREC.XXXMODID = "045";
    set PT03M004.PT03MPRM cursor, bold;
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate domestic/offshore*/
   /* ------------------------------------------------------------*/

  if (PT03M004.PT03MDOF != "*  "
   && PT03M004.PT03MDOF != " * "
   && PT03M004.PT03MDOF != "  *"
   && PT03M004.PT03MDOF != "** "
   && PT03M004.PT03MDOF != " **"
   && PT03M004.PT03MDOF != "* *"
   && PT03M004.PT03MDOF != "***"
   && PT03M004.PT03MDOF != "DOM"
   && PT03M004.PT03MDOF != "OFF")
    set PT03M004.PT03MDOF cursor, bold; /* Highlight*/
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(113); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "045";
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  else
    if (PT03M004.PT03MDOF != "DOM"
     && PT03M004.PT03MDOF != "OFF")
      PT03M004.PT03MDOF = "***";
    end
  end

   /* ------------------------------------------------------------*/
   /* validate country code*/
   /* ------------------------------------------------------------*/

  if (PT03M004.PT03MCTY != "*   "
   && PT03M004.PT03MCTY != "**  "
   && PT03M004.PT03MCTY != "*** "
   && PT03M004.PT03MCTY != "****")
    if (PT03M004.PT03MCTY in XCTTBL.XCTCD)
      set PT03M004.PT03MCTY initialAttributes;
    else
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(96);
      PTWREC.XXXMODID = "045";
      set PT03M004.PT03MCTY cursor, bold;
    end
  else
    set PT03M004.PT03MCTY initialAttributes;
    PT03M004.PT03MCTY = "****";

  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate country code/ domesctic/offshore*/
   /* ------------------------------------------------------------*/

  if (PT03M004.PT03MCTY != "****"
   && PT03M004.PT03MDOF != "***")
    set PT03M004.PT03MDOF cursor, bold;
    set PT03M004.PT03MCTY cursor, bold;
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(114);
    PTWREC.XXXMODID = "045";
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate factory code*/
   /* ------------------------------------------------------------*/

  if (PT03M004.PT03MFAC != "*   "
   && PT03M004.PT03MFAC != " *  "
   && PT03M004.PT03MFAC != "  * "
   && PT03M004.PT03MFAC != "**  "
   && PT03M004.PT03MFAC != " ** "
   && PT03M004.PT03MFAC != "* * "
   && PT03M004.PT03MFAC != "*** "
   && PT03M004.PT03MFAC != "****")
    set FY1REC empty;
    FY1REC.FY1FCTYC = PT03M004.PT03MFAC;
    FY1REC.XGPCD = "03";

    try
      call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
    end
    if (SQLCA.VAGen_SQLCODE != 0)
      set PT03M004.PT03MFAC cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(84); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "045";
    else
      set PT03M004.PT03MFAC initialAttributes;
    end
  else
    set PT03M004.PT03MFAC initialAttributes;
    PT03M004.PT03MFAC = "****";
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate 'short' season/year code*/
   /* ------------------------------------------------------------*/

  PT03W00.PT03WSESN1 = "  ";
  if (PT03M004.PT03MSC1 != "  ")
    if (PT03M004.PT03MSC1 == "SU")
      PT03W00.PT03WSESNCD1 = "U";
      PT03W00.PT03WSCODE1 = PT03M004.PT03MSC1;
    else
      if (PT03M004.PT03MSC1 == "FA")
        PT03W00.PT03WSESNCD1 = "F";
        PT03W00.PT03WSCODE1 = PT03M004.PT03MSC1;
      else
        if (PT03M004.PT03MSC1 == "HO")
          PT03W00.PT03WSESNCD1 = "H";
          PT03W00.PT03WSCODE1 = PT03M004.PT03MSC1;
        else
          if (PT03M004.PT03MSC1 == "SP")
            PT03W00.PT03WSESNCD1 = "S";
            PT03W00.PT03WSCODE1 = PT03M004.PT03MSC1;
          else
            PT03W00.PT03WERF = "Y";
            converseLib.validationFailed(111);
            PTWREC.XXXMODID = "045";
            set PT03M004.PT03MSC1 cursor, bold;
          end
        end
      end
    end
  else
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(111);
    PTWREC.XXXMODID = "045";
    set PT03M004.PT03MSC1 cursor, bold; /* Highlight*/
  end
  if (PT03W00.PT03WERF == "Y")
    return;
  end

  if (PT03M004.PT03MSY1 != "  ")
    set TA2REC empty;
    TA2REC.TA2GRTYP = "G";
    PT03W00.PT03WDT3 = "    0101";
    PT03W00.PT03WDCY = PT03M004.PT03MSY1;
    TA2REC.TA2GRGG = PT03W00.PT03WDT3;
    PT03S02(); /* edit date range*/

    if (TA2REC.TA2RTNCD != 0)
      set PT03M004.PT03MSY1 cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(81); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "045";
      return;
    else
      PT03W00.PT03WSESNYR1 = PT03M004.PT03MSY1;
      set PT03M004.PT03MSY1 initialAttributes;
    end
  else
    set PT03M004.PT03MSY1 cursor, bold; /* Highlight*/
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(81); /* indicate missing or invalid*/
    PTWREC.XXXMODID = "045";
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

  if (PT03W00.PT03WSESN1 != "  ")
    set PCFREC empty;
    PCFREC.PCFSECD = PT03W00.PT03WSESN1;
    PCFREC.XXXSTAT = "*";
    PCFREC.PCFBUYMO = -1;

    try
      call "IO4090" ("S1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      try
        call "IO4090" ("N1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
      end
      if (SQLCA.VAGen_SQLCODE != 0)
        set PT03M004.PT03MSC1 cursor, bold; /* Highlight*/
        set PT03M004.PT03MSY1 cursor, bold; /* Highlight*/
        PT03W00.PT03WERF = "Y";
        converseLib.validationFailed(82); /* Indicate missing or invalid*/
        PTWREC.XXXMODID = "045";
      end
    else
      set PT03M004.PT03MSC1 cursor, bold; /* Highlight*/
      set PT03M004.PT03MSY1 cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(82); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "045";
    end
    try
      call "IO4090" ("C1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
    end
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate po status*/
   /* ------------------------------------------------------------*/

  if (PT03M004.PT03MPOS != "O"
   && PT03M004.PT03MPOS != "C"
   && PT03M004.PT03MPOS != "*")
    set PT03M004.PT03MPOS cursor, bold; /* Highlight*/
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(85); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "045";
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate scheduler code*/
   /* ------------------------------------------------------------*/

  if (PT03M004.PT03MSCH != "* "
   && PT03M004.PT03MSCH != "**"
   && PT03M004.PT03MSCH != " *")
    set PG1REC empty;
    PG1REC.PG1SC4CD = PT03M004.PT03MSCH;
    PG1REC.PG1FCTCD = "  ";
   /* GPC Code changed for Apparel. SKathi. 04/21/99*/
   /* MOVE '02' TO PG1REC.XGPCD;*/
    PG1REC.XGPCD = "03";
   /* Change ends. SKathi. 04/21/99*/

    try
      call "IO1200" ("S ", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
    end
    if (SQLCA.VAGen_SQLCODE != 0)
      set PT03M004.PT03MSCH cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(86); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "045";
    else
      set PT03M004.PT03MSCH initialAttributes;
    end
  else
    set PT03M004.PT03MSCH initialAttributes;
    PT03M004.PT03MSCH = "**";
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate print request*/
   /* ------------------------------------------------------------*/

  if (PT03M004.PT03MIND != "*"
   && PT03M004.PT03MIND != "1"
   && PT03M004.PT03MIND != "2")
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(115);
    PTWREC.XXXMODID = "045";
    set PT03M004.PT03MIND cursor, bold;
  else
    set PT03M004.PT03MIND initialAttributes;
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

end // end PT03045

// Process valid input request
Function PT03046()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* if parm update was requested then UPDATE PARMS!! NOOOW!!!!!!*/
   /* ------------------------------------------------------------*/

  if (PT03M004.PT03MPRM == "P")

    PT03S46();
    PT03W00.PT03MSEL[4] = "*";
    COMMAREA.CAMSG = "APRL IRREGULAR/OVERRUN PARMS - UPDATED ";
    return;

  end

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/
  PT03W00.PT03WIXT = 1;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03") /* if production system*/
    PT03047(); /* format production jcl*/
  else
    PT03048(); /* format test jcl*/
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "045"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PT03W00.PT03MSEL[4] = "*"; /* Indicate function completed*/
    COMMAREA.CAMSG = "APRL IRREGULAR/OVERRUN REPORT - SUBMITTED ";

    set PT03M004 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end PT03046

// Process valid production jcl
Function PT03047()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT03T04.TARTYPE[PT03WIXT] == "W")
      if (PT03M004.XURDEST == "LOCAL") /* destination lazer*/
        PT03W04.PT03WOT1 = "/*OUTPUT  PT61 FORMS=PT61,COPIES=";
        PT03W04.XURCOPY = TA6REC.XURCOPY;
        PT03W04.PT03WOT2 = ",DEST=RMT00";
        TA6REC.TARJCL[TA6INDEX] = PT03W04.PT03WOUT;
        TA6REC.TARTYPE[TA6INDEX] = " ";
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT61 FORMS=PT61,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
    else

      if (PT03T04.TARTYPE[PT03WIXT] == "F")
        if (PT03M004.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT61)'";
        else
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT61)'";
        end
      else

        if (PT03T04.TARTYPE[PT03WIXT] == "P") /* Parameters statement*/

          /* ------------------------------------------------------------*/
          /* Format the variable parameters entered by the user.*/
          /* ------------------------------------------------------------*/

          set PT03W04 empty; /* Parameters work area*/
          PT03W04.PT03MDOF = PT03M004.PT03MDOF;
          PT03W04.PT03MCTY = PT03M004.PT03MCTY;
          PT03W04.PT03MFAC = PT03M004.PT03MFAC;
          PT03W04.PT03MPOS = PT03M004.PT03MPOS;
          PT03W04.PT03MSCH = PT03M004.PT03MSCH;
          PT03W04.PT03MIND = PT03M004.PT03MIND;
          if (PT03M004.PT03MSC1 == "SU")
            PT03W00.PT03WSESNCD1 = "U";
          end
          if (PT03M004.PT03MSC1 == "FA")
            PT03W00.PT03WSESNCD1 = "F";
          end
          if (PT03M004.PT03MSC1 == "HO")
            PT03W00.PT03WSESNCD1 = "H";
          end
          if (PT03M004.PT03MSC1 == "SP")
            PT03W00.PT03WSESNCD1 = "S";
          end
          PT03W00.PT03WSESNYR1 = PT03M004.PT03MSY1;
          PT03W04.PT03WSYR = PT03M004.PT03MSY1;
          PT03W04.PT03MSY1 = PT03W00.PT03WSESN1;
          PT03W00.PT03WSCODE1 = PT03M004.PT03MSC1;


          TA6REC.TARJCL[TA6INDEX] = PT03W04.TARJCL; /* Parameters*/

        else

          /* ------------------------------------------------------------*/
          /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = PT03T04.TARJCL[PT03WIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = PT03T04.TARTYPE[PT03WIXT];
                                   /* Type*/

        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT03T04.TARJCL[PT03WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT03W00.PT03WIXT = PT03W00.PT03WIXT + 1; /* Input table index*/

    end

  end

end // end PT03047

// Process valid test jcl
Function PT03048()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT03T14.TARJCL[PT03WIXT] == "===NOTIFY===")
      PT03W2A.PT03WPR9 = "//             NOTIFY=";
      PT03W2A.PT03WUID = TA6REC.XURUSRID;
      PT03W2A.PT03WFL9 = " ";
      TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC9;
    else

      if (PT03T14.TARJCL[PT03WIXT] == "===OUTPUT===")
        if (PT03M004.XURDEST == "LOCAL") /* destination lazer*/
          PT03W04.PT03WOT1 = "/*OUTPUT  PT61 FORMS=PT61,COPIES=";
          PT03W04.XURCOPY = TA6REC.XURCOPY;
          PT03W04.PT03WOT2 = ",DEST=RMT00";
          TA6REC.TARJCL[TA6INDEX] = PT03W04.PT03WOUT;
          TA6REC.TARTYPE[TA6INDEX] = " ";
        else
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT61 FORMS=PT61,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
        end
      else

        if (PT03T14.TARJCL[PT03WIXT] == "===FILE01===")
          if (PT03M004.XURDEST == "LOCAL") /* destination lazer*/
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(2,,PT61)'";
          else
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(T,,PT61)'";
          end
        else

          if (PT03T14.TARTYPE[PT03WIXT] == "P") /* Parameters statement*/


            /* ------------------------------------------------------------*/
            /* Format the variable parameters entered by the user.*/

            /* ------------------------------------------------------------*/

            set PT03W04 empty; /* Parameters work area*/

            PT03W04.PT03MDOF = PT03M004.PT03MDOF;
            PT03W04.PT03MCTY = PT03M004.PT03MCTY;
            PT03W04.PT03MFAC = PT03M004.PT03MFAC;
            PT03W04.PT03MSCH = PT03M004.PT03MSCH;
            PT03W04.PT03MPOS = PT03M004.PT03MPOS;
            PT03W04.PT03MIND = PT03M004.PT03MIND;

            if (PT03M004.PT03MSC1 == "SU")
              PT03W00.PT03WSESNCD1 = "U";
            end
            if (PT03M004.PT03MSC1 == "FA")
              PT03W00.PT03WSESNCD1 = "F";
            end
            if (PT03M004.PT03MSC1 == "HO")
              PT03W00.PT03WSESNCD1 = "H";
            end
            if (PT03M004.PT03MSC1 == "SP")
              PT03W00.PT03WSESNCD1 = "S";
            end
            PT03W00.PT03WSESNYR1 = PT03M004.PT03MSY1;
            PT03W04.PT03WSYR = PT03M004.PT03MSY1;
            PT03W04.PT03MSY1 = PT03W00.PT03WSESN1;
            PT03W00.PT03WSCODE1 = PT03M004.PT03MSC1;

            TA6REC.TARJCL[TA6INDEX] = PT03W04.TARJCL; /* Parameters*/

          else


            /* ------------------------------------------------------------*/
            /* Format the Job Control Language statement from the table.*/

            /* ------------------------------------------------------------*/

            TA6REC.TARJCL[TA6INDEX] = PT03T14.TARJCL[PT03WIXT]; /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = PT03T14.TARTYPE[PT03WIXT];
                                   /* Type*/

          end
        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT03T14.TARJCL[PT03WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT03W00.PT03WIXT = PT03W00.PT03WIXT + 1; /* Input table index*/

    end

  end

end // end PT03048

// late production sum rpt
Function PT03050()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If first time thru, Obtain default data.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PT03W00.PT03WRD5 == "Y" /* if switch is on*/
   && converseVar.validationMsgNum == 0) /* and no previous errors*/
    PT03S51(); /* Obtain default data*/
    PT03W00.PT03WRD5 = "N"; /* set switch off*/
  end

  PT03052(); /* Format and display the map*/

  PT03053(); /* Check attention identifier*/

  PT03054(); /* Reset fields to normal intensity*/

  PT03055(); /* Verify the data that was entered*/

  PT03056(); /* Process valid input request*/


end // end PT03050

// Format and display the map
Function PT03052()
   /* ------------------------------------------------------------*/
   /* If user is authorized, allow access to parm update field.*/
   /* ------------------------------------------------------------*/

  if (PT03W00.PT03WERF == "N") /* No edir errors*/
    if (CACHGFL == "Y") /* Updates allowed by this user*/
      set PT03M005.PT03MPRM cursor; /* Have cursor appear here first*/
    else
      set PT03M005.PT03MLPD cursor; /* Have cursor appear here first*/
      set PT03M005.PT03MPRM skip; /* No access to this field*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  PT03M005.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT03M005.XURDEST = TA6REC.XURDEST; /* Print destination*/
  PT03M005.XRODESC = TA6REC.XRODESC; /* Printer description*/
  PT03M005.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  PT03M005.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  PT03M005.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT03M005.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT03M005.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT03M005 alarm; /* Indicate sound alarm*/

  end

  converse PT03M005 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PT03052

// Check attention identifier
Function PT03053()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PT03W00.PT03MSEL[5] = "C"; /* Indicate selection cancelled*/

    set PT03M005 initial; /* m005 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PT03W00.PT03MSEL[5] = " "; /* Indicate selection cancelled*/
    COMMAREA.CAMSG = "NO ACTION TAKEN ON PREVIOUS SCREEN";

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "053"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PT03053

// Reset highlighted fields
Function PT03054()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (CACHGFL == "Y")
    set PT03M005.PT03MPRM initialAttributes;
  else
    set PT03M005.PT03MPRM skip;
  end
  set PT03M005.PT03MLPD initialAttributes;
  set PT03M005.PT03MSCH initialAttributes;
  set PT03M005.PT03MDOF initialAttributes;
  set PT03M005.PT03MCTY initialAttributes;
  set PT03M005.PT03MFAC initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PT03M005.PT03MCTY == "?") /* country code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      PTWREC.XXXMODID = "054"; /* Module identification*/
      converseLib.validationFailed(4); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of country codes*/
   /* ------------------------------------------------------------*/

  if (PT03M005.PT03MCTY == "?") /* country code*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "COUNTRY CODE "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      PT03M005.PT03MCTY = XCTTBL.XCTCD[XX0XWPIX]; /* Selected code*/

    end

    set PT03M005.PT03MCTY cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  PTWREC.XXXMODID = "054"; /* Module identification*/
  converseLib.validationFailed(42); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end PT03054

// Verify the entered data
Function PT03055()

   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

  PT03W00.PT03WERF = "N";

   /* ------------------------------------------------------------*/
   /* validate parm update field*/
   /* ------------------------------------------------------------*/

  if (PT03M005.PT03MPRM != "P"
   && PT03M005.PT03MPRM != "R")
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(80);
    PTWREC.XXXMODID = "055";
    set PT03M005.PT03MPRM cursor, bold;
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate late production due date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGG = PT03M005.PT03MLPD;
  PT03S02(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set PT03M005.PT03MLPD cursor, bold; /* Highlight*/
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(81); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "055";
  else
    set PT03M005.PT03MLPD initialAttributes;
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate scheduler code*/
   /* ------------------------------------------------------------*/

  if (PT03M005.PT03MSCH != "* "
   && PT03M005.PT03MSCH != " *"
   && PT03M005.PT03MSCH != "**")
    set PG1REC empty;
    PG1REC.PG1SC4CD = PT03M005.PT03MSCH;
    PG1REC.PG1FCTCD = "  ";
    PG1REC.XGPCD = "03";

    try
      call "IO1200" ("S ", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
    end
    if (SQLCA.VAGen_SQLCODE != 0)
      set PT03M005.PT03MSCH cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(86); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "055";
    else
      set PT03M005.PT03MSCH initialAttributes;
    end
  else
    set PT03M005.PT03MSCH initialAttributes;
    PT03M005.PT03MSCH = "**";
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate domestic/offshore*/
   /* ------------------------------------------------------------*/

  if (PT03M005.PT03MDOF != "*  "
   && PT03M005.PT03MDOF != " * "
   && PT03M005.PT03MDOF != "  *"
   && PT03M005.PT03MDOF != "** "
   && PT03M005.PT03MDOF != " **"
   && PT03M005.PT03MDOF != "* *"
   && PT03M005.PT03MDOF != "***"
   && PT03M005.PT03MDOF != "DOM"
   && PT03M005.PT03MDOF != "OFF")
    set PT03M005.PT03MDOF cursor, bold; /* Highlight*/
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(113); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "055";
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  else
    if (PT03M005.PT03MDOF != "DOM"
     && PT03M005.PT03MDOF != "OFF")
      PT03M005.PT03MDOF = "***";
    end
  end

   /* ------------------------------------------------------------*/
   /* validate country code*/
   /* ------------------------------------------------------------*/

  if (PT03M005.PT03MCTY != "*   "
   && PT03M005.PT03MCTY != "**  "
   && PT03M005.PT03MCTY != "*** "
   && PT03M005.PT03MCTY != "****")
    if (PT03M005.PT03MCTY in XCTTBL.XCTCD)
      set PT03M005.PT03MCTY initialAttributes;
    else
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(96);
      PTWREC.XXXMODID = "055";
      set PT03M005.PT03MCTY cursor, bold;
    end
  else
    set PT03M005.PT03MCTY initialAttributes;
    PT03M005.PT03MCTY = "****";

  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate country code/ domesctic/offshore*/
   /* ------------------------------------------------------------*/

  if (PT03M005.PT03MCTY != "****"
   && PT03M005.PT03MDOF != "***")
    set PT03M005.PT03MDOF cursor, bold;
    set PT03M005.PT03MCTY cursor, bold;
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(114);
    PTWREC.XXXMODID = "055";
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate factory code*/
   /* ------------------------------------------------------------*/

  if (PT03M005.PT03MFAC != "*   "
   && PT03M005.PT03MFAC != " *  "
   && PT03M005.PT03MFAC != "  * "
   && PT03M005.PT03MFAC != "**  "
   && PT03M005.PT03MFAC != " ** "
   && PT03M005.PT03MFAC != "* * "
   && PT03M005.PT03MFAC != "*** "
   && PT03M005.PT03MFAC != "****")
    set FY1REC empty;
    FY1REC.FY1FCTYC = PT03M005.PT03MFAC;
    FY1REC.XGPCD = "03";

    try
      call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
    end
    if (SQLCA.VAGen_SQLCODE != 0)
      set PT03M005.PT03MFAC cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(84); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "055";
    else
      set PT03M005.PT03MFAC initialAttributes;
    end
  else
    set PT03M005.PT03MFAC initialAttributes;
    PT03M005.PT03MFAC = "****";
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end
end // end PT03055

// Process valid input request
Function PT03056()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* if parm update was requested then UPDATE PARMS!! NOOOW!!!!!!*/
   /* ------------------------------------------------------------*/

  if (PT03M005.PT03MPRM == "P")

    PT03S56();
    PT03W00.PT03MSEL[5] = "*";
    COMMAREA.CAMSG = "APPAREL LATE PROD SUMMARY PARMS - UPDATED";
    return;

  end


   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/
  PT03W00.PT03WIXT = 1;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03") /* if production system*/
    PT03057(); /* format production jcl*/
  else
    PT03058(); /* format test jcl*/
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "056"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PT03W00.PT03MSEL[5] = "*"; /* Indicate function completed*/
    COMMAREA.CAMSG = "APRL LATE PROD SUM REPORT - SUBMITTED";

    set PT03M005 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end PT03056

// Process valid production jcl
Function PT03057()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT03T05.TARTYPE[PT03WIXT] == "W")
      if (PT03M005.XURDEST == "LOCAL") /* destination lazer*/
        PT03W05.PT03WOT1 = "/*OUTPUT  PT11 FORMS=PT11,COPIES=";
        PT03W05.XURCOPY = TA6REC.XURCOPY;
        PT03W05.PT03WOT2 = ",DEST=RMT00";
        TA6REC.TARJCL[TA6INDEX] = PT03W05.PT03WOUT;
        TA6REC.TARTYPE[TA6INDEX] = " ";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        PT03W05.PT03WOT1 = "/*OUTPUT  PT12 FORMS=PT12,COPIES=";
        TA6REC.TARJCL[TA6INDEX] = PT03W05.PT03WOUT;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        PT03W05.PT03WOT1 = "/*OUTPUT  PT13 FORMS=PT13,COPIES=";
        TA6REC.TARJCL[TA6INDEX] = PT03W05.PT03WOUT;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        PT03W05.PT03WOT1 = "/*OUTPUT  PT14 FORMS=PT14,COPIES=";
        TA6REC.TARJCL[TA6INDEX] = PT03W05.PT03WOUT;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        PT03W05.PT03WOT1 = "/*OUTPUT  PT15 FORMS=PT15,COPIES=";
        TA6REC.TARJCL[TA6INDEX] = PT03W05.PT03WOUT;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        PT03W05.PT03WOT1 = "/*OUTPUT  PT16 FORMS=PT16,COPIES=";
        TA6REC.TARJCL[TA6INDEX] = PT03W05.PT03WOUT;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        PT03W05.PT03WOT1 = "/*OUTPUT  PT17 FORMS=PT17,COPIES=";
        TA6REC.TARJCL[TA6INDEX] = PT03W05.PT03WOUT;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        PT03W05.PT03WOT1 = "/*OUTPUT  PT18 FORMS=PT18,COPIES=";
        TA6REC.TARJCL[TA6INDEX] = PT03W05.PT03WOUT;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        PT03W05.PT03WOT1 = "/*OUTPUT  PT19 FORMS=PT19,COPIES=";
        TA6REC.TARJCL[TA6INDEX] = PT03W05.PT03WOUT;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        PT03W05.PT03WOT1 = "/*OUTPUT  PT20 FORMS=PT20,COPIES=";
        TA6REC.TARJCL[TA6INDEX] = PT03W05.PT03WOUT;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        PT03W05.PT03WOT1 = "/*OUTPUT  PT21 FORMS=PT21,COPIES=";
        TA6REC.TARJCL[TA6INDEX] = PT03W05.PT03WOUT;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT11 FORMS=PT11,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT12 FORMS=PT12,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT13 FORMS=PT13,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT14 FORMS=PT14,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT15 FORMS=PT15,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT16 FORMS=PT16,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT17 FORMS=PT17,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT18 FORMS=PT18,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT19 FORMS=PT19,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT1A FORMS=PT1A,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT21 FORMS=PT21,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      end
    else

      if (PT03T05.TARJCL[PT03WIXT] == "===FILE01===")
        if (PT03M005.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT11)',";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE02='(N,,PT12)',";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE03='(N,,PT13)',";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE04='(N,,PT14)',";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE05='(N,,PT15)',";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE06='(N,,PT16)',";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE07='(N,,PT17)',";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE08='(N,,PT18)',";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE09='(N,,PT19)',";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE10='(N,,PT1A)'";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        else
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT11)',";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE02='(P,,PT12)',";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE03='(P,,PT13)',";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE04='(P,,PT14)',";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE05='(P,,PT15)',";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE06='(P,,PT16)',";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE07='(P,,PT17)',";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE08='(P,,PT18)',";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE09='(P,,PT19)',";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE10='(P,,PT1A)'";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        end
      else

        if (PT03T05.TARJCL[PT03WIXT] == "===FILE02===")
          if (PT03M005.XURDEST == "LOCAL") /* destination lazer*/
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT21)'";
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          else
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT21)'";
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          end
        else

          if (PT03T05.TARTYPE[PT03WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

            set PT03W05 empty; /* Parameters work area*/

            PT03W05.PT03MPRM = "A";
            PT03W05.PT03MLPD = PT03M005.PT03MLPD;
            PT03W05.PT03MSCH = PT03M005.PT03MSCH;
            PT03W05.PT03MFAC = PT03M005.PT03MFAC;
            PT03W05.PT03MCTY = PT03M005.PT03MCTY;
            PT03W05.PT03MDOF = PT03M005.PT03MDOF;

            TA6REC.TARJCL[TA6INDEX] = PT03W05.TARJCL; /* Parameters*/
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          else
            if (PT03T05.TARJCL[PT03WIXT] == "===INSERT INCLUDES FROM SCREEN===")

              if (PT03M005.PT03MSCH != "**")
                PT03W2A.PT03WPR1 = "                 51,2,CH,EQ,C'";
                PT03W2A.PT03WSCH = PT03M005.PT03MSCH;
                PT03W2A.PT03WSF1 = "',AND,";
                PT03W2A.PT03WFL1 = " ";
                TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC1; /* Parameters*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              end
              if (PT03M005.PT03MFAC != "****")
                PT03W2A.PT03WPR2 = "                 57,4,CH,EQ,C'";
                PT03W2A.PT03MFAC = PT03M005.PT03MFAC;
                PT03W2A.PT03WSF2 = "',AND,";
                PT03W2A.PT03WFL2 = " ";
                TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC2; /* Parameters*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              end
              if (PT03M005.PT03MCTY != "****")
                PT03W2A.PT03WPR7 = "                 53,4,CH,EQ,C'";
                PT03W2A.PT03MCTY = PT03M005.PT03MCTY;
                PT03W2A.PT03WSF7 = "',AND,";
                PT03W2A.PT03WFL7 = " ";
                TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC7; /* Parameters*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              end
              if (PT03M005.PT03MDOF != "***")
                if (PT03M005.PT03MDOF == "DOM")
                  PT03W2A.PT03WPR7 = "                (53,4,CH,EQ,C'";
                  PT03W2A.PT03MCTY = "USA ";
                  PT03W2A.PT03WSF7 = "',OR,";
                  PT03W2A.PT03WFL7 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC7; /* Parameters*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                  PT03W2A.PT03WPR3 = "                 22,6,CH,EQ,C'";
                  PT03W2A.PT03MSTY = "350018";
                  PT03W2A.PT03WSF3 = "',OR,";
                  PT03W2A.PT03WFL3 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3; /* Parameters*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                  PT03W2A.PT03WPR3 = "                 22,6,CH,EQ,C'";
                  PT03W2A.PT03MSTY = "350019";
                  PT03W2A.PT03WSF3 = "',OR,";
                  PT03W2A.PT03WFL3 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3; /* Parameters*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                  PT03W2A.PT03WPR3 = "                 22,6,CH,EQ,C'";
                  PT03W2A.PT03MSTY = "350020";
                  PT03W2A.PT03WSF3 = "',OR,";
                  PT03W2A.PT03WFL3 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3; /* Parameters*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                  PT03W2A.PT03WPR2 = "                 57,4,CH,EQ,C'";
                  PT03W2A.PT03MFAC = "GLL ";
                  PT03W2A.PT03WSF2 = "',OR,";
                  PT03W2A.PT03WFL2 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC2; /* Parameters*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                  PT03W2A.PT03WPR2 = "                 57,4,CH,EQ,C'";
                  PT03W2A.PT03MFAC = "SPT ";
                  PT03W2A.PT03WSF2 = "'),AND,";
                  PT03W2A.PT03WFL2 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC2; /* Parameters*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                else
                  PT03W2A.PT03WPR7 = "                (53,4,CH,NE,C'";
                  PT03W2A.PT03MCTY = "USA ";
                  PT03W2A.PT03WSF7 = "',AND,";
                  PT03W2A.PT03WFL7 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC7; /* Parameters*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                  PT03W2A.PT03WPR3 = "                (22,6,CH,NE,C'";
                  PT03W2A.PT03MSTY = "350018";
                  PT03W2A.PT03WSF3 = "',AND,";
                  PT03W2A.PT03WFL3 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3; /* Parameters*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                  PT03W2A.PT03WPR3 = "                 22,6,CH,NE,C'";
                  PT03W2A.PT03MSTY = "350019";
                  PT03W2A.PT03WSF3 = "',AND,";
                  PT03W2A.PT03WFL3 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3; /* Parameters*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                  PT03W2A.PT03WPR3 = "                 22,6,CH,NE,C'";
                  PT03W2A.PT03MSTY = "350020";
                  PT03W2A.PT03WSF3 = "'),AND,";
                  PT03W2A.PT03WFL3 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3; /* Parameters*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                  PT03W2A.PT03WPR2 = "                (57,4,CH,NE,C'";
                  PT03W2A.PT03MFAC = "GLL ";
                  PT03W2A.PT03WSF2 = "',AND,";
                  PT03W2A.PT03WFL2 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC2; /* Parameters*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                  PT03W2A.PT03WPR2 = "                 57,4,CH,NE,C'";
                  PT03W2A.PT03MFAC = "SPT ";
                  PT03W2A.PT03WSF2 = "')),AND,";
                  PT03W2A.PT03WFL2 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC2; /* Parameters*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                end

              end

            else
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

              TA6REC.TARJCL[TA6INDEX] = PT03T05.TARJCL[PT03WIXT]; /* JCL*/
              TA6REC.TARTYPE[TA6INDEX] = PT03T05.TARTYPE[PT03WIXT]; /* Type*/
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

            end

          end
        end
      end
    end


    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT03T05.TARJCL[PT03WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT03W00.PT03WIXT = PT03W00.PT03WIXT + 1; /* Input table index*/

    end

  end

end // end PT03057

// Process valid test jcl
Function PT03058()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT03T15.TARJCL[PT03WIXT] == "===NOTIFY===")
      PT03W2A.PT03WPR9 = "//             NOTIFY=";
      PT03W2A.PT03WUID = TA6REC.XURUSRID;
      PT03W2A.PT03WFL9 = " ";
      TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC9;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    else

      if (PT03T15.TARJCL[PT03WIXT] == "===OUTPUT1===")
        if (PT03M005.XURDEST == "LOCAL") /* destination lazer*/
          PT03W05.PT03WOT1 = "/*OUTPUT  PT11 FORMS=PT11,COPIES=";
          PT03W05.XURCOPY = TA6REC.XURCOPY;
          PT03W05.PT03WOT2 = ",DEST=RMT00";
          TA6REC.TARJCL[TA6INDEX] = PT03W05.PT03WOUT;
          TA6REC.TARTYPE[TA6INDEX] = " ";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          PT03W05.PT03WOT1 = "/*OUTPUT  PT12 FORMS=PT12,COPIES=";
          TA6REC.TARJCL[TA6INDEX] = PT03W05.PT03WOUT;
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          PT03W05.PT03WOT1 = "/*OUTPUT  PT13 FORMS=PT13,COPIES=";
          TA6REC.TARJCL[TA6INDEX] = PT03W05.PT03WOUT;
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          PT03W05.PT03WOT1 = "/*OUTPUT  PT14 FORMS=PT14,COPIES=";
          TA6REC.TARJCL[TA6INDEX] = PT03W05.PT03WOUT;
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          PT03W05.PT03WOT1 = "/*OUTPUT  PT15 FORMS=PT15,COPIES=";
          TA6REC.TARJCL[TA6INDEX] = PT03W05.PT03WOUT;
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          PT03W05.PT03WOT1 = "/*OUTPUT  PT16 FORMS=PT16,COPIES=";
          TA6REC.TARJCL[TA6INDEX] = PT03W05.PT03WOUT;
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          PT03W05.PT03WOT1 = "/*OUTPUT  PT17 FORMS=PT17,COPIES=";
          TA6REC.TARJCL[TA6INDEX] = PT03W05.PT03WOUT;
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          PT03W05.PT03WOT1 = "/*OUTPUT  PT18 FORMS=PT18,COPIES=";
          TA6REC.TARJCL[TA6INDEX] = PT03W05.PT03WOUT;
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          PT03W05.PT03WOT1 = "/*OUTPUT  PT19 FORMS=PT19,COPIES=";
          TA6REC.TARJCL[TA6INDEX] = PT03W05.PT03WOUT;
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          PT03W05.PT03WOT1 = "/*OUTPUT  PT1A FORMS=PT1A,COPIES=";
          TA6REC.TARJCL[TA6INDEX] = PT03W05.PT03WOUT;
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        else
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT11 FORMS=PT11,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT12 FORMS=PT12,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT13 FORMS=PT13,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT14 FORMS=PT14,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT15 FORMS=PT15,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT16 FORMS=PT16,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT17 FORMS=PT17,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT18 FORMS=PT18,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT19 FORMS=PT19,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT1A FORMS=PT1A,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        end
      else

        if (PT03T15.TARJCL[PT03WIXT] == "===OUTPUT2===")
          if (PT03M005.XURDEST == "LOCAL") /* destination lazer*/
            PT03W05.PT03WOT1 = "/*OUTPUT  PT21 FORMS=PT21,COPIES=";
            PT03W05.XURCOPY = TA6REC.XURCOPY;
            PT03W05.PT03WOT2 = ",DEST=RMT00";
            TA6REC.TARJCL[TA6INDEX] = PT03W05.PT03WOUT;
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          else
            TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT21 FORMS=PT21,COPIES=_,DEST=_____";
            TA6REC.TARTYPE[TA6INDEX] = "O";
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          end
        else

          if (PT03T15.TARJCL[PT03WIXT] == "===FILE01===")
            if (PT03M005.XURDEST == "LOCAL") /* destination lazer*/
              TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(2,,PT11)',";
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              TA6REC.TARJCL[TA6INDEX] = "//        FILE02='(2,,PT12)',";
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              TA6REC.TARJCL[TA6INDEX] = "//        FILE03='(2,,PT13)',";
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              TA6REC.TARJCL[TA6INDEX] = "//        FILE04='(2,,PT14)',";
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              TA6REC.TARJCL[TA6INDEX] = "//        FILE05='(2,,PT15)',";
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              TA6REC.TARJCL[TA6INDEX] = "//        FILE06='(2,,PT16)',";
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              TA6REC.TARJCL[TA6INDEX] = "//        FILE07='(2,,PT17)',";
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              TA6REC.TARJCL[TA6INDEX] = "//        FILE08='(2,,PT18)',";
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              TA6REC.TARJCL[TA6INDEX] = "//        FILE09='(2,,PT19)',";
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              TA6REC.TARJCL[TA6INDEX] = "//        FILE10='(2,,PT1A)'";
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
            else
              TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(T,,PT11)',";
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              TA6REC.TARJCL[TA6INDEX] = "//        FILE02='(T,,PT12)',";
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              TA6REC.TARJCL[TA6INDEX] = "//        FILE03='(T,,PT13)',";
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              TA6REC.TARJCL[TA6INDEX] = "//        FILE04='(T,,PT14)',";
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              TA6REC.TARJCL[TA6INDEX] = "//        FILE05='(T,,PT15)',";
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              TA6REC.TARJCL[TA6INDEX] = "//        FILE06='(T,,PT16)',";
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              TA6REC.TARJCL[TA6INDEX] = "//        FILE07='(T,,PT17)',";
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              TA6REC.TARJCL[TA6INDEX] = "//        FILE08='(T,,PT18)',";
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              TA6REC.TARJCL[TA6INDEX] = "//        FILE09='(T,,PT19)',";
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              TA6REC.TARJCL[TA6INDEX] = "//        FILE10='(T,,PT1A)'";
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
            end
          else

            if (PT03T15.TARJCL[PT03WIXT] == "===FILE02===")
              if (PT03M005.XURDEST == "LOCAL") /* destination lazer*/
                TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(2,,PT21)'";
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              else
                TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(T,,PT21)'";
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              end
            else

              if (PT03T15.TARTYPE[PT03WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

                set PT03W05 empty; /* Parameters work area*/

                PT03W05.PT03MPRM = "A";
                PT03W05.PT03MLPD = PT03M005.PT03MLPD;
                PT03W05.PT03MSCH = PT03M005.PT03MSCH;
                PT03W05.PT03MFAC = PT03M005.PT03MFAC;
                PT03W05.PT03MCTY = PT03M005.PT03MCTY;
                PT03W05.PT03MDOF = PT03M005.PT03MDOF;

                TA6REC.TARJCL[TA6INDEX] = PT03W05.TARJCL; /* Parameters*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

              else
                if (PT03T15.TARJCL[PT03WIXT] == "===INSERT INCLUDES FROM SCREEN===")

                  if (PT03M005.PT03MSCH != "**")
                    PT03W2A.PT03WPR1 = "               51,2,CH,EQ,C'";
                    PT03W2A.PT03WSCH = PT03M005.PT03MSCH;
                    PT03W2A.PT03WSF1 = "',AND,";
                    PT03W2A.PT03WFL1 = " ";
                    TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC1; /* Parameters*/
                    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                  end
                  if (PT03M005.PT03MFAC != "****")
                    PT03W2A.PT03WPR2 = "               57,4,CH,EQ,C'";
                    PT03W2A.PT03MFAC = PT03M005.PT03MFAC;
                    PT03W2A.PT03WSF2 = "',AND,";
                    PT03W2A.PT03WFL2 = " ";
                    TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC2; /* Parameters*/
                    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                  end
                  if (PT03M005.PT03MCTY != "****")
                    PT03W2A.PT03WPR7 = "               53,4,CH,EQ,C'";
                    PT03W2A.PT03MCTY = PT03M005.PT03MCTY;
                    PT03W2A.PT03WSF7 = "',AND,";
                    PT03W2A.PT03WFL7 = " ";
                    TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC7; /* Parameters*/
                    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                  end
                  if (PT03M005.PT03MDOF != "***")
                    if (PT03M005.PT03MDOF == "DOM")
                      PT03W2A.PT03WPR7 = "                (53,4,CH,EQ,C'";
                      PT03W2A.PT03MCTY = "USA ";
                      PT03W2A.PT03WSF7 = "',OR,";
                      PT03W2A.PT03WFL7 = " ";
                      TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC7; /* Parameters*/
                      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                      PT03W2A.PT03WPR3 = "                 22,6,CH,EQ,C'";
                      PT03W2A.PT03MSTY = "350018";
                      PT03W2A.PT03WSF3 = "',OR,";
                      PT03W2A.PT03WFL3 = " ";
                      TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3; /* Parameters*/
                      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                      PT03W2A.PT03WPR3 = "                 22,6,CH,EQ,C'";
                      PT03W2A.PT03MSTY = "350019";
                      PT03W2A.PT03WSF3 = "',OR,";
                      PT03W2A.PT03WFL3 = " ";
                      TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3; /* Parameters*/
                      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                      PT03W2A.PT03WPR3 = "                 22,6,CH,EQ,C'";
                      PT03W2A.PT03MSTY = "350020";
                      PT03W2A.PT03WSF3 = "',OR,";
                      PT03W2A.PT03WFL3 = " ";
                      TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3; /* Parameters*/
                      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                      PT03W2A.PT03WPR2 = "                 57,4,CH,EQ,C'";
                      PT03W2A.PT03MFAC = "GLL ";
                      PT03W2A.PT03WSF2 = "',OR,";
                      PT03W2A.PT03WFL2 = " ";
                      TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC2; /* Parameters*/
                      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                      PT03W2A.PT03WPR2 = "                 57,4,CH,EQ,C'";
                      PT03W2A.PT03MFAC = "SPT ";
                      PT03W2A.PT03WSF2 = "'),AND,";
                      PT03W2A.PT03WFL2 = " ";
                      TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC2; /* Parameters*/
                      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                    else
                      PT03W2A.PT03WPR7 = "                (53,4,CH,NE,C'";
                      PT03W2A.PT03MCTY = "USA ";
                      PT03W2A.PT03WSF7 = "',AND,";
                      PT03W2A.PT03WFL7 = " ";
                      TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC7; /* Parameters*/
                      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                      PT03W2A.PT03WPR3 = "                (22,6,CH,NE,C'";
                      PT03W2A.PT03MSTY = "350018";
                      PT03W2A.PT03WSF3 = "',AND,";
                      PT03W2A.PT03WFL3 = " ";
                      TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3; /* Parameters*/
                      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                      PT03W2A.PT03WPR3 = "                 22,6,CH,NE,C'";
                      PT03W2A.PT03MSTY = "350019";
                      PT03W2A.PT03WSF3 = "',AND,";
                      PT03W2A.PT03WFL3 = " ";
                      TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3; /* Parameters*/
                      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                      PT03W2A.PT03WPR3 = "                 22,6,CH,NE,C'";
                      PT03W2A.PT03MSTY = "350020";
                      PT03W2A.PT03WSF3 = "'),AND,";
                      PT03W2A.PT03WFL3 = " ";
                      TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3; /* Parameters*/
                      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                      PT03W2A.PT03WPR2 = "                (57,4,CH,NE,C'";
                      PT03W2A.PT03MFAC = "GLL ";
                      PT03W2A.PT03WSF2 = "',AND,";
                      PT03W2A.PT03WFL2 = " ";
                      TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC2; /* Parameters*/
                      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                      PT03W2A.PT03WPR2 = "                 57,4,CH,NE,C'";
                      PT03W2A.PT03MFAC = "SPT ";
                      PT03W2A.PT03WSF2 = "')),AND,";
                      PT03W2A.PT03WFL2 = " ";
                      TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC2; /* Parameters*/
                      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                    end

                  end

                else

        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

                  TA6REC.TARJCL[TA6INDEX] = PT03T15.TARJCL[PT03WIXT]; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = PT03T15.TARTYPE[PT03WIXT]; /* Type*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

                end

              end
            end
          end
        end
      end
    end


    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT03T15.TARJCL[PT03WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT03W00.PT03WIXT = PT03W00.PT03WIXT + 1; /* Input table index*/

    end

  end

end // end PT03058

// production expedite rpt
Function PT03060()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If first time thru, Obtain default data.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PT03W00.PT03WRD6 == "Y" /* if switch is on*/
   && converseVar.validationMsgNum == 0) /* and no previous errors*/
    PT03S61(); /* Obtain default data*/
    PT03W00.PT03WRD6 = "N"; /* set switch off*/
  end

  PT03062(); /* Format and display the map*/

  PT03063(); /* Check attention identifier*/

  PT03064(); /* Reset fields to normal intensity*/

  PT03065(); /* Verify the data that was entered*/

  PT03066(); /* Process valid input request*/


end // end PT03060

// Format and display the map
Function PT03062()
   /* ------------------------------------------------------------*/
   /* If user is authorized, allow access to parm update field.*/
   /* ------------------------------------------------------------*/

  if (PT03W00.PT03WERF == "N") /* No edir errors*/
    if (CACHGFL == "Y") /* Updates allowed by this user*/
      set PT03M006.PT03MPRM cursor; /* Have cursor appear here first*/
    else
      set PT03M006.PT03MPDT cursor; /* Have cursor appear here first*/
      set PT03M006.PT03MPRM skip; /* No access to this field*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  PT03M006.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT03M006.XURDEST = TA6REC.XURDEST; /* Print destination*/
  PT03M006.XRODESC = TA6REC.XRODESC; /* Printer description*/
  PT03M006.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  PT03M006.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  PT03M006.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT03M006.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT03M006.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT03M006 alarm; /* Indicate sound alarm*/

  end

  converse PT03M006 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PT03062

// Check attention identifier
Function PT03063()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PT03W00.PT03MSEL[6] = "C"; /* Indicate selection cancelled*/

    set PT03M006 initial; /* m006 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PT03W00.PT03MSEL[6] = " "; /* Indicate selection cancelled*/
    COMMAREA.CAMSG = "NO ACTION TAKEN ON PREVIOUS SCREEN";

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "063"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PT03063

// Reset highlighted fields
Function PT03064()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (CACHGFL == "Y")
    set PT03M006.PT03MPRM initialAttributes;
  else
    set PT03M006.PT03MPRM skip;
  end
  set PT03M006.PT03MPDT initialAttributes;
  set PT03M006.PT03MDDT initialAttributes;
  set PT03M006.PT03MDPC initialAttributes;
  set PT03M006.PT03MSCD initialAttributes;
  set PT03M006.PT03MSYR initialAttributes;
  set PT03M006.PT03MSCH initialAttributes;
  set PT03M006.PT03MDOF initialAttributes;
  set PT03M006.PT03MCTY initialAttributes;
  set PT03M006.PT03MFAC initialAttributes;
  set PT03M006.PT03MXWH initialAttributes;
  set PT03M006.PT03MXREF initialAttributes;
  set PT03M006.PT03MOFC initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PT03M006.PT03MCTY == "?") /* country code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      PTWREC.XXXMODID = "064"; /* Module identification*/
      converseLib.validationFailed(4); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of country codes*/
   /* ------------------------------------------------------------*/

  if (PT03M006.PT03MCTY == "?") /* country code*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "COUNTRY CODE "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      PT03M006.PT03MCTY = XCTTBL.XCTCD[XX0XWPIX]; /* Selected code*/

    end

    set PT03M006.PT03MCTY cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  PTWREC.XXXMODID = "064"; /* Module identification*/
  converseLib.validationFailed(42); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end PT03064

// Verify the entered data
Function PT03065()

   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

  PT03W00.PT03WERF = "N";

   /* ------------------------------------------------------------*/
   /* validate parm update field*/
   /* ------------------------------------------------------------*/

  if (PT03M006.PT03MPRM != "P"
   && PT03M006.PT03MPRM != "R")
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(80);
    PTWREC.XXXMODID = "065";
    set PT03M006.PT03MPRM cursor, bold;
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate production due date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGE = PT03M006.PT03MPDT;
  PT03S02(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set PT03M006.PT03MPDT cursor, bold; /* Highlight*/
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(81); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "065";
  else
    set PT03M006.PT03MPDT initialAttributes;
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate demand as of date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGDD = "01";
  TA2REC.TA2GRGE = PT03M006.PT03MDDT;
  PT03S02(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set PT03M006.PT03MDDT cursor, bold; /* Highlight*/
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(81); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "065";
  else
    set PT03M006.PT03MDDT initialAttributes;
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate additional demand percent*/
   /* ------------------------------------------------------------*/

  if (PT03M006.PT03MDPC < 0)
    set PT03M006.PT03MDPC cursor, bold; /* Highlight*/
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(93); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "065";
  else
    set PT03M006.PT03MDPC initialAttributes;
  end


  if (PT03W00.PT03WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate season code*/
   /* ------------------------------------------------------------*/

  if (PT03M006.PT03MSCD != "FA"
   && PT03M006.PT03MSCD != "SP"
   && PT03M006.PT03MSCD != "SU"
   && PT03M006.PT03MSCD != "HO")
    set PT03M006.PT03MSCD cursor, bold; /* Highlight*/
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(86); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "065";
  else
    set PT03M006.PT03MSCD initialAttributes;
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate season year*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;
  TA2REC.TA2GRTYP = "G";
  PT03W00.PT03WDT3 = "    0101";
  PT03W00.PT03WDCY = PT03M006.PT03MSYR;
  TA2REC.TA2GRGG = PT03W00.PT03WDT3;
  PT03S02(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set PT03M006.PT03MSYR cursor, bold; /* Highlight*/
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(81); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "065";
  else
    set PT03M006.PT03MSYR initialAttributes;
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


  if (PT03M006.PT03MXWH == " "
   && PT03M006.PT03MXREF == " ")
    PT03W00.PT03WERF = "Y";
    set PT03M006.PT03MXWH cursor, bold;
    converseLib.validationFailed(156);
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate warehouse code*/
   /* ------------------------------------------------------------*/

  if (PT03M006.PT03MXWH != "**")
    if (PT03M006.PT03MXWH == " ")
      set PT03M006.PT03MXWH initialAttributes;
    else
      if (PT03M006.PT03MXWH in XWHTBL.XWHCD
       && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        set PT03M006.PT03MXWH initialAttributes;
      else
        converseLib.validationFailed(036); /* Indicate missing or invalid*/
        PTWREC.XXXMODID = "065";
        PT03W00.PT03WERF = "Y";
        set PT03M006.PT03MXWH cursor, bold;
      end
    end
  else
    set PT03M006.PT03MXWH initialAttributes;
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate customer xref*/
   /* ------------------------------------------------------------*/

  if (PT03M006.PT03MXREF != " ")
    set VPRDCU03 empty;
    VPRDCU03.XGPCD = "03";
    VPRDCU03.PC2CUXID = PT03M006.PT03MXREF;
    PT03065H();

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      if (VPRDCU03.XXXSTAT != "A")
        PTWREC.XXXMODID = "065";
        set PT03M006.PT03MXREF cursor, bold;
        PT03W00.PT03WERF = "Y";
        converseLib.validationFailed(118);
        return;
      else
        set PT03M006.PT03MXREF initialAttributes;
      end
    else
      PTWREC.XXXMODID = "065";
      set PT03M006.PT03MXREF cursor, bold;
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(118);
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate scheduler code / delivery analyst code*/
   /* ------------------------------------------------------------*/

  if (PT03M006.PT03MSCH != "* "
   && PT03M006.PT03MSCH != " *"
   && PT03M006.PT03MSCH != "**")
    set PG1REC empty;
    PG1REC.PG1SC4CD = PT03M006.PT03MSCH;
    PG1REC.PG1FCTCD = "  ";
    PG1REC.XGPCD = "03";

    try
      call "IO1200" ("S ", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
    end
    if (SQLCA.VAGen_SQLCODE != 0)
      set PT03M006.PT03MSCH cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(230); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "065";
    else
      if (PT03M006.PT03MSCH == "A1"
       || PT03M006.PT03MSCH == "A2"
       || PT03M006.PT03MSCH == "A3"
       || PT03M006.PT03MSCH == "A4"
       || PT03M006.PT03MSCH == "A5"
       || PT03M006.PT03MSCH == "A6"
       || PT03M006.PT03MSCH == "A7"
       || PT03M006.PT03MSCH == "A8"
       || PT03M006.PT03MSCH == "A9"
       || PT03M006.PT03MSCH == "B1"
       || PT03M006.PT03MSCH == "B2"
       || PT03M006.PT03MSCH == "B3"
       || PT03M006.PT03MSCH == "B4"
       || PT03M006.PT03MSCH == "B5"
       || PT03M006.PT03MSCH == "B6"
       || PT03M006.PT03MSCH == "B7"
       || PT03M006.PT03MSCH == "B8"
       || PT03M006.PT03MSCH == "B9") /* if aprl delivery analyst*/


        PT03065A(); /* then, open VDLVAN02 cursor and*/
        PT03065B(); /* fetch a row from it*/

        if (SQLCA.VAGen_SQLCODE == 0) /* if a row exists,*/
          PT03065C(); /* close VDLVAN02 cursor*/
          set PT03M006.PT03MSCH initialAttributes; /* and define the code as valid*/

        else /* dlvr analyst code NOT EXISTS in VDLVAN02*/
          PT03065C(); /* close VDLVAN02 cursor*/
          set PT03M006.PT03MSCH cursor, bold; /* Highlight*/
          PT03W00.PT03WERF = "Y"; /* set the error flag*/
          converseLib.validationFailed(227); /* analyst code invalid*/
          PTWREC.XXXMODID = "065";
        end
      else
        set PT03M006.PT03MSCH initialAttributes; /* aprl scheduler code*/
      end
    end
  else
    if (PT03M006.PT03MSCH == "**")
      set PT03M006.PT03MSCH initialAttributes;
      PG1REC.XXXLSTNM = "ALL SCHEDULERS";
    else
      set PT03M006.PT03MSCH cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y"; /* set the error flag*/
      converseLib.validationFailed(230); /* invalid analyst code*/
      PTWREC.XXXMODID = "065";
    end
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate liaison office code*/
   /* ------------------------------------------------------------*/

  if (PT03M006.PT03MOFC == "**")
    set PT03M006.PT03MOFC initialAttributes;
  else
    if (PT03M006.PT03MOFC == "  ")
      set PT03M006.PT03MOFC cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y"; /* set the error flag*/
      converseLib.validationFailed(231); /* liaison office code invalid*/
      PTWREC.XXXMODID = "065";
    else
   /* ********************************************************************/
   /* Query against DFCTY.VFDOFC02 (use the IOMOD IO2790) with GPC '03'**/
   /* & liaison office code entered in PT03M006. If a record is     **/
   /* NOT FOUND, then log error (error msg no 231).                 **/
   /* ********************************************************************/
      set VFDOFC02 empty;
      VFDOFC02.XGPCD = "03";
      VFDOFC02.FY6FOCD = PT03M006.PT03MOFC;
      PT03065G(); /* select unique from field office table*/
      if (SQLCA.VAGen_SQLCODE == 0)
        if (VFDOFC02.XXXSTAT == "A")
          set PT03M006.PT03MOFC initialAttributes;
        else
          set PT03M006.PT03MOFC cursor, bold; /* Highlight*/
          PT03W00.PT03WERF = "Y"; /* set the error flag*/
          converseLib.validationFailed(233); /* liaison office code inactiv*/
          PTWREC.XXXMODID = "065";
        end
      else
        set PT03M006.PT03MOFC cursor, bold; /* Highlight*/
        PT03W00.PT03WERF = "Y"; /* set the error flag*/
        converseLib.validationFailed(231); /* liaison office code invalid*/
        PTWREC.XXXMODID = "065";
      end
    end
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate liaison office code & scheduler code*/
   /* ------------------------------------------------------------*/

  if (PT03M006.PT03MSCH == "A1"
   || PT03M006.PT03MSCH == "A2"
   || PT03M006.PT03MSCH == "A3"
   || PT03M006.PT03MSCH == "A4"
   || PT03M006.PT03MSCH == "A5"
   || PT03M006.PT03MSCH == "A6"
   || PT03M006.PT03MSCH == "A7"
   || PT03M006.PT03MSCH == "A8"
   || PT03M006.PT03MSCH == "A9"
   || PT03M006.PT03MSCH == "B1"
   || PT03M006.PT03MSCH == "B2"
   || PT03M006.PT03MSCH == "B3"
   || PT03M006.PT03MSCH == "B4"
   || PT03M006.PT03MSCH == "B5"
   || PT03M006.PT03MSCH == "B6"
   || PT03M006.PT03MSCH == "B7"
   || PT03M006.PT03MSCH == "B8"
   || PT03M006.PT03MSCH == "B9") /* if apparel dlvry analyst*/
    set PT03M006.PT03MSCH initialAttributes;
    set PT03M006.PT03MOFC initialAttributes;
  else
    if (PT03M006.PT03MSCH == "**") /* or both analyst & scheduler codes*/
      set PT03M006.PT03MSCH initialAttributes; /* define scheduler code and*/
      set PT03M006.PT03MOFC initialAttributes; /* field office code field*/
    else /* if scheduler code*/
      if (PT03M006.PT03MOFC != "**") /* and liaison office field not = ***/
        set PT03M006.PT03MOFC cursor, bold; /* Highlight*/
        PT03W00.PT03WERF = "Y"; /* set the error flag*/
        converseLib.validationFailed(232); /* ** not allowed for schedulers*/
        PTWREC.XXXMODID = "065";
      end
    end
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate domestic/offshore*/
   /* ------------------------------------------------------------*/

  if (PT03M006.PT03MDOF != "*  "
   && PT03M006.PT03MDOF != " * "
   && PT03M006.PT03MDOF != "  *"
   && PT03M006.PT03MDOF != "** "
   && PT03M006.PT03MDOF != " **"
   && PT03M006.PT03MDOF != "* *"
   && PT03M006.PT03MDOF != "***"
   && PT03M006.PT03MDOF != "DOM"
   && PT03M006.PT03MDOF != "OFF")
    set PT03M006.PT03MDOF cursor, bold; /* Highlight*/
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(113); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "065";
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  else
    if (PT03M006.PT03MDOF != "DOM"
     && PT03M006.PT03MDOF != "OFF")
      PT03M006.PT03MDOF = "***";
    end
  end

   /* ------------------------------------------------------------*/
   /* validate country code*/
   /* ------------------------------------------------------------*/

  if (PT03M006.PT03MCTY != "*   "
   && PT03M006.PT03MCTY != "**  "
   && PT03M006.PT03MCTY != "*** "
   && PT03M006.PT03MCTY != "****")
    if (PT03M006.PT03MCTY in XCTTBL.XCTCD)
      set PT03M006.PT03MCTY initialAttributes;
    else
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(96);
      PTWREC.XXXMODID = "065";
      set PT03M006.PT03MCTY cursor, bold;
    end
  else
    set PT03M006.PT03MCTY initialAttributes;
    PT03M006.PT03MCTY = "****";

  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate country code/ domesctic/offshore*/
   /* ------------------------------------------------------------*/

  if (PT03M006.PT03MCTY != "****"
   && PT03M006.PT03MDOF != "***")
    set PT03M006.PT03MDOF cursor, bold;
    set PT03M006.PT03MCTY cursor, bold;
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(114);
    PTWREC.XXXMODID = "065";
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate factory code*/
   /* ------------------------------------------------------------*/

  if (PT03M006.PT03MFAC != "*   "
   && PT03M006.PT03MFAC != " *  "
   && PT03M006.PT03MFAC != "  * "
   && PT03M006.PT03MFAC != "**  "
   && PT03M006.PT03MFAC != " ** "
   && PT03M006.PT03MFAC != "* * "
   && PT03M006.PT03MFAC != "*** "
   && PT03M006.PT03MFAC != "****")
    set FY1REC empty;
    FY1REC.FY1FCTYC = PT03M006.PT03MFAC;
    FY1REC.XGPCD = "03";

    try
      call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
    end
    if (SQLCA.VAGen_SQLCODE != 0)
      set PT03M006.PT03MFAC cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(84); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "065";
    else
      set PT03M006.PT03MFAC initialAttributes;
    end
  else
    set PT03M006.PT03MFAC initialAttributes;
    PT03M006.PT03MFAC = "****";
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end
end // end PT03065

// OPEN VDLVAN02 CURSOR
Function PT03065A()
   /* ------------------------------------------------------------*/
   /* Open VDLVAN02 cursor.*/
   /* If failed, indicate system error.*/
   /* ------------------------------------------------------------*/

  set VDLVAN02 empty; /* initialize*/

  VDLVAN02.PC_DLVR_ANALYST_CD = PT03M006.PT03MSCH;

  try
    call "VDLVAN02" ("S2", SQLCA, VDLVAN02) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

  if (sysVar.errorCode == "00000000") /* If call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and open cursor successful*/
      return; /* return to the previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  PTWREC.XXXMODID = "65A"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PTWREC.XXXMODID = "065A"; /* module identification*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDLVAN02"; /* Table view name*/
  TA1REC.TA1TBLKE = VDLVAN02.PT8KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* start over*/

end // end PT03065A

// FETCH NEXT ROW AND FORMAT
Function PT03065B()
   /* ------------------------------------------------------------*/
   /* Fetch the first row from the selected set of rows in VDLVAN02*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VDLVAN02" ("N2", SQLCA, VDLVAN02) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == 0 || 
    SQLCA.VAGen_SQLCODE == 100)
      return; /* return to the previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  PTWREC.XXXMODID = "65B"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PTWREC.XXXMODID = "065B"; /* module identification*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDLVAN02"; /* Table view name*/

  try
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
  end /* Error diagnosis*/

  exit stack; /* start over*/

end // end PT03065B

// CLOSE SELECTED SET CURSOR
Function PT03065C()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VDLVAN02" ("C2", SQLCA, VDLVAN02) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* If call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and close cursor successful*/
      return; /* return to the previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  PTWREC.XXXMODID = "065C"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PTWREC.XXXMODID = "065C"; /* module identification*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Error location*/
  TA1REC.TA1LOC = "CLOSE CURSOR ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDLVAN02"; /* Table view name*/
  TA1REC.TA1TBLKE = VDLVAN02.PT8KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* start over*/

end // end PT03065C

// Select Unique from VFDOFC01
Function PT03065G()
   /* ------------------------------------------------------------*/
   /* Select unique from DFCTY.VFDOFC02 table*/
   /* If any other SQLCODE other than 0 & 100, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2790" ("S ", SQLCA, VFDOFC02) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

  if (sysVar.errorCode == "00000000") /* If call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 || 
    SQLCA.VAGen_SQLCODE == 100) /* and sqlcode is zero or 100*/
      return; /* return to the previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  PTWREC.XXXMODID = "065G"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PTWREC.XXXMODID = "065G"; /* Process number*/
  TA1REC.TA1PGMNM = PTWREC.XXXMODID; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFDOFC02"; /* Table view name*/
  TA1REC.TA1TBLKE = VFDOFC02.VFDOFC02-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* start over*/

end // end PT03065G

// SELECT CUSTOMER XREF
Function PT03065H()
   /* ------------------------------------------------------------*/
   /* Select unique from DPRODC.VPRDCU03 table*/
   /* If any other SQLCODE other than 0 & 100, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VPRDCU03" ("S ", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* If call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 || 
    SQLCA.VAGen_SQLCODE == 100) /* and sqlcode is zero or 100*/
      return; /* return to the previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  PTWREC.XXXMODID = "065H"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PTWREC.XXXMODID = "065H"; /* Process number*/
  TA1REC.TA1PGMNM = PTWREC.XXXMODID; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPRDCU03.VPRDCU03-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* start over*/

end // end PT03065H

// Process valid input request
Function PT03066()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* if parm update was requested then UPDATE PARMS!! NOOOW!!!!!!*/
   /* ------------------------------------------------------------*/

  if (PT03M006.PT03MPRM == "P")

    PT03S66();
    PT03W00.PT03MSEL[6] = "*";
    COMMAREA.CAMSG = "APRL PROD EXPIDITE PARMS - UPDATED ";
    return;

  end


   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/
  PT03W00.PT03WIXT = 1;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03") /* if production system*/
    PT03067(); /* format production jcl*/
  else
    PT03068(); /* format test jcl*/
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "066"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PT03W00.PT03MSEL[6] = "*"; /* Indicate function completed*/
    COMMAREA.CAMSG = "APRL PROD EXPIDITE REPORT - SUBMITTED ";

    set PT03M006 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end PT03066

// Process valid production jcl
Function PT03067()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT03T06.TARTYPE[PT03WIXT] == "W")
      if (PT03M006.XURDEST == "LOCAL") /* destination lazer*/
        PT03W06.PT03WOT1 = "/*OUTPUT  PT21 FORMS=PT21,COPIES=";
        PT03W06.XURCOPY = TA6REC.XURCOPY;
        PT03W06.PT03WOT2 = ",DEST=RMT00";
        TA6REC.TARJCL[TA6INDEX] = PT03W06.PT03WOUT;
        TA6REC.TARTYPE[TA6INDEX] = " ";
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT21 FORMS=PT21,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
    else

      if (PT03T06.TARTYPE[PT03WIXT] == "F")
        if (PT03M006.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT21)'";
        else
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT21)'";
        end
      else

        if (PT03T06.TARTYPE[PT03WIXT] == "P") /* Parameters statement*/

          /* ------------------------------------------------------------*/
          /* Format the variable parameters entered by the user.*/
          /* ------------------------------------------------------------*/

          set PT03W06 empty; /* Parameters work area*/

          PT03W06.PT03MPDT = PT03M006.PT03MPDT;
          PT03W06.PT03MDDT = PT03M006.PT03MDDT;
          PT03W06.PT03MSCD = PT03M006.PT03MSCD;
          PT03W06.PT03MSYR = PT03M006.PT03MSYR;
          if (PT03M006.PT03MSCD == "SP")
            PT03W06.PT03MSNM = "SPRING";
          else
            if (PT03M006.PT03MSCD == "SU")
              PT03W06.PT03MSNM = "SUMMER";
            else
              if (PT03M006.PT03MSCD == "FA")
                PT03W06.PT03MSNM = "FALL";
              else
                if (PT03M006.PT03MSCD == "HO")
                  PT03W06.PT03MSNM = "HOLIDAY";
                end
              end
            end
          end
          PT03W06.PT03MDPC = PT03M006.PT03MDPC;
          PT03W06.PT03MSCH = PT03M006.PT03MSCH;
          PT03W06.PT03MXLN = PG1REC.XXXLSTNM;
          PT03W06.PT03MFAC = PT03M006.PT03MFAC;
          PT03W06.PT03MCTY = PT03M006.PT03MCTY;
          PT03W06.PT03MDOF = PT03M006.PT03MDOF;
          PT03W06.PT03MXWH = PT03M006.PT03MXWH;
          PT03W06.PT03MXREF = PT03M006.PT03MXREF;
          PT03W06.PT03MOFC = PT03M006.PT03MOFC;

          TA6REC.TARJCL[TA6INDEX] = PT03W06.TARJCL; /* Parameters*/

        else

          /* ------------------------------------------------------------*/
          /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = PT03T06.TARJCL[PT03WIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = PT03T06.TARTYPE[PT03WIXT];
                                   /* Type*/

        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT03T06.TARJCL[PT03WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT03W00.PT03WIXT = PT03W00.PT03WIXT + 1; /* Input table index*/

    end

  end

end // end PT03067

// Process valid test jcl
Function PT03068()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT03T16.TARJCL[PT03WIXT] == "===NOTIFY===")
      PT03W2A.PT03WPR9 = "//             NOTIFY=";
      PT03W2A.PT03WUID = TA6REC.XURUSRID;
      PT03W2A.PT03WFL9 = " ";
      TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC9;
    else

      if (PT03T16.TARJCL[PT03WIXT] == "===OUTPUT===")
        if (PT03M006.XURDEST == "LOCAL") /* destination lazer*/
          PT03W06.PT03WOT1 = "/*OUTPUT  PT21 FORMS=PT21,COPIES=";
          PT03W06.XURCOPY = TA6REC.XURCOPY;
          PT03W06.PT03WOT2 = ",DEST=RMT00";
          TA6REC.TARJCL[TA6INDEX] = PT03W06.PT03WOUT;
          TA6REC.TARTYPE[TA6INDEX] = " ";
        else
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT21 FORMS=PT21,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
        end
      else

        if (PT03T16.TARJCL[PT03WIXT] == "===FILE01===")
          if (PT03M006.XURDEST == "LOCAL") /* destination lazer*/
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(2,,PT21)'";
          else
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(T,,PT21)'";
          end
        else

          if (PT03T16.TARTYPE[PT03WIXT] == "P") /* Parameters statement*/


            /* ------------------------------------------------------------*/
            /* Format the variable parameters entered by the user.*/

            /* ------------------------------------------------------------*/

            set PT03W06 empty; /* Parameters work area*/

            PT03W06.PT03MPDT = PT03M006.PT03MPDT;
            PT03W06.PT03MDDT = PT03M006.PT03MDDT;
            PT03W06.PT03MSCD = PT03M006.PT03MSCD;
            PT03W06.PT03MSYR = PT03M006.PT03MSYR;
            if (PT03M006.PT03MSCD == "SP")
              PT03W06.PT03MSNM = "SPRING";
            else
              if (PT03M006.PT03MSCD == "SU")
                PT03W06.PT03MSNM = "SUMMER";
              else
                if (PT03M006.PT03MSCD == "FA")
                  PT03W06.PT03MSNM = "FALL";
                else
                  if (PT03M006.PT03MSCD == "HO")
                    PT03W06.PT03MSNM = "HOLIDAY";
                  end
                end
              end
            end
            PT03W06.PT03MDPC = PT03M006.PT03MDPC;
            PT03W06.PT03MSCH = PT03M006.PT03MSCH;
            PT03W06.PT03MXLN = PG1REC.XXXLSTNM;
            PT03W06.PT03MFAC = PT03M006.PT03MFAC;
            PT03W06.PT03MCTY = PT03M006.PT03MCTY;
            PT03W06.PT03MDOF = PT03M006.PT03MDOF;
            PT03W06.PT03MXWH = PT03M006.PT03MXWH;
            PT03W06.PT03MXREF = PT03M006.PT03MXREF;
            PT03W06.PT03MOFC = PT03M006.PT03MOFC;

            TA6REC.TARJCL[TA6INDEX] = PT03W06.TARJCL; /* Parameters*/

          else


            /* ------------------------------------------------------------*/
            /* Format the Job Control Language statement from the table.*/

            /* ------------------------------------------------------------*/

            TA6REC.TARJCL[TA6INDEX] = PT03T16.TARJCL[PT03WIXT]; /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = PT03T16.TARTYPE[PT03WIXT];
                                   /* Type*/

          end
        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT03T16.TARJCL[PT03WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT03W00.PT03WIXT = PT03W00.PT03WIXT + 1; /* Input table index*/

    end

  end

end // end PT03068

// production expedite rpt
Function PT03070()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If first time thru, Obtain default data.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PT03W00.PT03WRD7 == "Y" /* if switch is on*/
   && converseVar.validationMsgNum == 0) /* and no previous errors*/
    PT03S71(); /* Obtain default data*/
    PT03W00.PT03WRD7 = "N"; /* set switch off*/
  end

  PT03072(); /* Format and display the map*/

  PT03073(); /* Check attention identifier*/

  PT03074(); /* Reset fields to normal intensity*/

  PT03075(); /* Verify the data that was entered*/

  PT03076(); /* Process valid input request*/


end // end PT03070

// Format and display the map
Function PT03072()
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  PT03M007.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT03M007.XURDEST = TA6REC.XURDEST; /* Print destination*/
  PT03M007.XRODESC = TA6REC.XRODESC; /* Printer description*/
  PT03M007.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  PT03M007.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  PT03M007.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT03M007.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT03M007.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT03M007 alarm; /* Indicate sound alarm*/

  end

  converse PT03M007 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PT03072

// Check attention identifier
Function PT03073()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PT03M007 initial; /* m005 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PT03W00.PT03MSEL[7] = " "; /* Indicate nothing happened*/
    COMMAREA.CAMSG = "NO ACTION TAKEN ON PREVIOUS SCREEN";

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "073"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PT03073

// Reset highlighted fields
Function PT03074()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PT03M007.PT03MSCH initialAttributes;
  set PT03M007.PT03MFAC initialAttributes;
  set PT03M007.PT03MSTY initialAttributes;
  set PT03M007.PT03MCLR initialAttributes;
  set PT03M007.PT03MORD initialAttributes;
  set PT03M007.PT03MSEN initialAttributes;
  set PT03M007.PT03MYER initialAttributes;

end // end PT03074

// Verify the entered data
Function PT03075()

   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

  PT03W00.PT03WERF = "N";

   /* ------------------------------------------------------------*/
   /* validate scheduler code*/
   /* ------------------------------------------------------------*/

  if (PT03M007.PT03MSCH != "* "
   && PT03M007.PT03MSCH != "**"
   && PT03M007.PT03MSCH != " *")
    set PG1REC empty;
    PG1REC.PG1SC4CD = PT03M007.PT03MSCH;
    PG1REC.PG1FCTCD = "  ";
    PG1REC.XGPCD = "03";

    try
      call "IO1200" ("S ", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
    end
    if (SQLCA.VAGen_SQLCODE != 0)
      set PT03M007.PT03MSCH cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(86); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "075";
      return;
    end
  else
    PT03M007.PT03MSCH = "**";
  end

   /* ------------------------------------------------------------*/
   /* validate factory code*/
   /* ------------------------------------------------------------*/

  if (PT03M007.PT03MFAC != "*  "
   && PT03M007.PT03MFAC != " * "
   && PT03M007.PT03MFAC != "  *"
   && PT03M007.PT03MFAC != "** "
   && PT03M007.PT03MFAC != " **"
   && PT03M007.PT03MFAC != "* *"
   && PT03M007.PT03MFAC != "***"
   && PT03M007.PT03MFAC != "****")
    set FY1REC empty;
    FY1REC.FY1FCTYC = PT03M007.PT03MFAC;
    FY1REC.XGPCD = "03";

    try
      call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
    end
    if (SQLCA.VAGen_SQLCODE != 0)
      set PT03M007.PT03MFAC cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(84); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "075";
      return;
    end
  else
    PT03M007.PT03MFAC = "****";
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate style number*/
   /* ------------------------------------------------------------*/
  if (PT03M007.PT03MSTY != " "
   && PT03M007.PT03MSTY != "*     "
   && PT03M007.PT03MSTY != "**    "
   && PT03M007.PT03MSTY != "***   "
   && PT03M007.PT03MSTY != "****  "
   && PT03M007.PT03MSTY != "***** "
   && PT03M007.PT03MSTY != "******")

    set PG2REC empty;

    PG2REC.XDMCD = "00";
    PG2REC.SY1STNBR = PT03M007.PT03MSTY;
    PG2REC.SYBSTGNB = PT03M007.PT03MSTY;
    if (PT03M007.PT03MCLR != "*  "
     && PT03M007.PT03MCLR != "** "
     && PT03M007.PT03MCLR != "***")
      PG2REC.SY2CLRID = PT03M007.PT03MCLR;
      PT03S72(); /* validate style / color*/
    else
      PT03M007.PT03MCLR = "***";
      PT03S73(); /* validate style existance*/
    end

    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(107);
      PT03W00.PT03WERF = "Y";
      set PT03M007.PT03MSTY cursor, bold;
      set PT03M007.PT03MCLR bold;
    else
      set PT03M007.PT03MSTY initialAttributes;
      set PT03M007.PT03MCLR initialAttributes;
    end

  else
    set PT03M007.PT03MSTY initialAttributes;
    set PT03M007.PT03MCLR initialAttributes;
    PT03M007.PT03MSTY = "******";
    PT03M007.PT03MCLR = "***";

  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate order-type code*/
   /* ------------------------------------------------------------*/

  if (PT03M007.PT03MORD != "* "
   && PT03M007.PT03MORD != "**")
    set PC4REC empty;
    PC4REC.PC4ORTYP = PT03M007.PT03MORD;
    PC4REC.XGPCD = "03";

    try
      call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
    end
    if (SQLCA.VAGen_SQLCODE != 0)
      set PT03M007.PT03MORD cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(94); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "075";
      return;
    end
  else
    PT03M007.PT03MORD = "**";
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate season code*/
   /* ------------------------------------------------------------*/

  if (PT03M007.PT03MSEN != "** ")
    if (PT03M007.PT03MSEN == "SP"
     || PT03M007.PT03MSEN == "SU"
     || PT03M007.PT03MSEN == "FA"
     || PT03M007.PT03MSEN == "HO")
      PT03W00.PT03WSEN = PT03M007.PT03MSEN;
      if (PT03W00.PT03WSEN == "SU")
        PT03W00.PT03WSE1 = "U";
      end
      set PT03M007.PT03MSEN initialAttributes;
    else
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(111);
      PTWREC.XXXMODID = "075";
      set PT03M007.PT03MSEN cursor, bold;
    end
  else
    set PT03M007.PT03MSEN initialAttributes;
    PT03M007.PT03MSEN = "**";
    PT03W00.PT03WSEN = PT03M007.PT03MSEN;
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate season year*/
   /* ------------------------------------------------------------*/

  if (PT03M007.PT03MYER != "**** ")
    set TA2REC empty;
    TA2REC.TA2GRTYP = "G";
    PT03W00.PT03WDT3 = "    0101";
    PT03W00.PT03WDCY = PT03M007.PT03MYER;
    TA2REC.TA2GRGG = PT03W00.PT03WDT3;
    PT03S02(); /* edit date range*/

    if (TA2REC.TA2RTNCD != 0)
      set PT03M007.PT03MYER cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(81);
      PTWREC.XXXMODID = "075";
      return;
    else
      PT03W00.PT03WTEMP = PT03M007.PT03MYER;
      PT03W00.PT03WSE2 = PT03W00.PT03WTEMP;
      set PT03M007.PT03MYER initialAttributes;
    end
  else
    PT03M007.PT03MYER = "****";
    PT03W00.PT03WSE2 = PT03M007.PT03MYER;
    set PT03M007.PT03MYER initialAttributes;
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end
  if (PT03W00.PT03WSEN != "**")
    set PCFREC empty;
    PCFREC.PCFSECD = PT03W00.PT03WSEN;
    PCFREC.XXXSTAT = "*";
    PCFREC.PCFBUYMO = -1;

    try
      call "IO4090" ("S1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      try
        call "IO4090" ("N1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
      end
      if (SQLCA.VAGen_SQLCODE != 0)
        set PT03M007.PT03MSEN cursor, bold; /* Highlight*/
        set PT03M007.PT03MYER cursor, bold; /* Highlight*/
        PT03W00.PT03WERF = "Y";
        converseLib.validationFailed(111); /* Indicate missing or invalid*/
        PTWREC.XXXMODID = "075";
      end
    else
      set PT03M007.PT03MSEN cursor, bold; /* Highlight*/
      set PT03M007.PT03MYER cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(111); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "075";
    end
    try
      call "IO4090" ("C1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
    end
  else
    PT03W00.PT03WSEN = "**";
    set PT03M007.PT03MSEN initialAttributes;
    set PT03M007.PT03MYER initialAttributes;
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

end // end PT03075

// Process valid input request
Function PT03076()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* Initialize the work area AND indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/
  PT03W00.PT03WIXT = 1;

   /* ------------------------------------------------------------*/
   /* Format JCL AND parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03") /* if on production system*/
    PT03077(); /* format production jcl*/
  else
    PT03078(); /* format test jcl*/
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL AND parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor AND submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "076"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* AND normal return*/

    PT03W00.PT03MSEL[7] = "*";
    COMMAREA.CAMSG = "CPOS (FOR CHARLOTTE N.C.) - SUBMITTED";
    return;

    set PT03M007 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end PT03076

// Process valid production jcl
Function PT03077()
   /* ------------------------------------------------------------*/
   /* Format JCL AND parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT03T07.TARTYPE[PT03WIXT] == "W")
      if (PT03M007.XURDEST == "LOCAL") /* destination lazer*/
        PT03W07.PT03WOT1 = "/*OUTPUT  PT21 FORMS=PT21,COPIES=";
        PT03W07.XURCOPY = TA6REC.XURCOPY;
        PT03W07.PT03WOT2 = ",DEST=RMT00";
        TA6REC.TARJCL[TA6INDEX] = PT03W07.PT03WOUT;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        PT03W07.PT03WOT1 = "/*OUTPUT  PT23 FORMS=PT23,COPIES=";
        TA6REC.TARJCL[TA6INDEX] = PT03W07.PT03WOUT;
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT21 FORMS=PT21,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT23 FORMS=PT23,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    else

      if (PT03T07.TARJCL[PT03WIXT] == "===FILE01===")
        if (PT03M007.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT21)'";
        else
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT21)'";
        end
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      else

        if (PT03T07.TARJCL[PT03WIXT] == "===FILE02===")
          if (PT03M007.XURDEST == "LOCAL") /* destination lazer*/
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT23)'";
          else
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT23)'";
          end
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        else

          if (PT03T07.TARJCL[PT03WIXT] == "===INSERT INCLUDES FROM SCREEN===")

            if (PT03M007.PT03MSCH != "**")
              PT03W2A.PT03WPR1 = "                 51,2,CH,EQ,C'";
              PT03W2A.PT03WSCH = PT03M007.PT03MSCH;
              PT03W2A.PT03WSF1 = "',AND,";
              PT03W2A.PT03WFL1 = " ";
              TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC1; /* Parameters*/
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
            end
            if (PT03M007.PT03MFAC != "****")
              PT03W2A.PT03WPR2 = "                 57,4,CH,EQ,C'";
              PT03W2A.PT03MFAC = PT03M007.PT03MFAC;
              PT03W2A.PT03WSF2 = "',AND,";
              PT03W2A.PT03WFL2 = " ";
              TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC2; /* Parameters*/
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
            end
            if (PT03M007.PT03MSTY != "******")
              PT03W2A.PT03WPR3 = "                 22,6,CH,EQ,C'";
              PT03W2A.PT03MSTY = PT03M007.PT03MSTY;
              PT03W2A.PT03WSF3 = "',AND,";
              PT03W2A.PT03WFL3 = " ";
              TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3; /* Parameters*/
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
            end
            if (PT03M007.PT03MCLR != "***")
              PT03W2A.PT03WPR4 = "                 34,3,CH,EQ,C'";
              PT03W2A.PT03MCLR = PT03M007.PT03MCLR;
              PT03W2A.PT03WSF4 = "',AND,";
              PT03W2A.PT03WFL4 = " ";
              TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC4; /* Parameters*/
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
            end
            if (PT03M007.PT03MORD != "**")
              PT03W2A.PT03WPR5 = "                 20,2,CH,EQ,C'";
              PT03W2A.PT03MORD = PT03M007.PT03MORD;
              PT03W2A.PT03WSF5 = "',AND,";
              PT03W2A.PT03WFL5 = " ";
              TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC5; /* Parameters*/
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
            end
            if (PT03W00.PT03WSEN != "**")
              PT03W2A.PT03WPR6 = "                 88,2,CH,EQ,C'";
              PT03W2A.PT03MSEN = PT03W00.PT03WSEN;
              PT03W2A.PT03WSF6 = "',AND,";
              PT03W2A.PT03WFL6 = " ";
              TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC6; /* Parameters*/
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
            end

          else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

            TA6REC.TARJCL[TA6INDEX] = PT03T07.TARJCL[PT03WIXT]; /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = PT03T07.TARTYPE[PT03WIXT]; /* Type*/
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          end
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT03T07.TARJCL[PT03WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT03W00.PT03WIXT = PT03W00.PT03WIXT + 1; /* Input table index*/

    end

  end

end // end PT03077

// Process valid test jcl
Function PT03078()
   /* ------------------------------------------------------------*/
   /* Format JCL AND parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT03T17.TARJCL[PT03WIXT] == "===NOTIFY===")
      PT03W2A.PT03WPR9 = "//             NOTIFY=";
      PT03W2A.PT03WUID = TA6REC.XURUSRID;
      PT03W2A.PT03WFL9 = " ";
      TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC9;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    else

      if (PT03T17.TARJCL[PT03WIXT] == "===OUTPUT1===")
        if (PT03M007.XURDEST == "LOCAL") /* destination lazer*/
          PT03W07.PT03WOT1 = "/*OUTPUT  PT21 FORMS=PT21,COPIES=";
          PT03W07.XURCOPY = TA6REC.XURCOPY;
          PT03W07.PT03WOT2 = ",DEST=RMT00";
          TA6REC.TARJCL[TA6INDEX] = PT03W07.PT03WOUT;
          TA6REC.TARTYPE[TA6INDEX] = " ";
        else
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT21 FORMS=PT21,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
        end
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      else

        if (PT03T17.TARJCL[PT03WIXT] == "===OUTPUT2===")
          if (PT03M007.XURDEST == "LOCAL") /* destination lazer*/
            PT03W07.PT03WOT1 = "/*OUTPUT  PT23 FORMS=PT23,COPIES=";
            PT03W07.XURCOPY = TA6REC.XURCOPY;
            PT03W07.PT03WOT2 = ",DEST=RMT00";
            TA6REC.TARJCL[TA6INDEX] = PT03W07.PT03WOUT;
            TA6REC.TARTYPE[TA6INDEX] = " ";
          else
            TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT23 FORMS=PT23,COPIES=_,DEST=_____";
            TA6REC.TARTYPE[TA6INDEX] = "O";
          end
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        else

          if (PT03T17.TARJCL[PT03WIXT] == "===FILE01===")
            if (PT03M007.XURDEST == "LOCAL") /* destination lazer*/
              TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(2,,PT21)'";
            else
              TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(T,,PT21)'";
            end
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          else

            if (PT03T17.TARJCL[PT03WIXT] == "===FILE02===")
              if (PT03M007.XURDEST == "LOCAL") /* destination lazer*/
                TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(2,,PT23)'";
              else
                TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(T,,PT23)'";
              end
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
            else

              if (PT03T17.TARJCL[PT03WIXT] == "===INSERT INCLUDES FROM SCREEN===")

                if (PT03M007.PT03MSCH != "**")
                  PT03W2A.PT03WPR1 = "                 51,2,CH,EQ,C'";
                  PT03W2A.PT03WSCH = PT03M007.PT03MSCH;
                  PT03W2A.PT03WSF1 = "',AND,";
                  PT03W2A.PT03WFL1 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC1; /* Parameters*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                end
                if (PT03M007.PT03MFAC != "****")
                  PT03W2A.PT03WPR2 = "                 57,4,CH,EQ,C'";
                  PT03W2A.PT03MFAC = PT03M007.PT03MFAC;
                  PT03W2A.PT03WSF2 = "',AND,";
                  PT03W2A.PT03WFL2 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC2; /* Parameters*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                end
                if (PT03M007.PT03MSTY != "******")
                  PT03W2A.PT03WPR3 = "                 22,6,CH,EQ,C'";
                  PT03W2A.PT03MSTY = PT03M007.PT03MSTY;
                  PT03W2A.PT03WSF3 = "',AND,";
                  PT03W2A.PT03WFL3 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3; /* Parameters*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                end
                if (PT03M007.PT03MCLR != "***")
                  PT03W2A.PT03WPR4 = "                 34,3,CH,EQ,C'";
                  PT03W2A.PT03MCLR = PT03M007.PT03MCLR;
                  PT03W2A.PT03WSF4 = "',AND,";
                  PT03W2A.PT03WFL4 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC4; /* Parameters*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                end
                if (PT03M007.PT03MORD != "**")
                  PT03W2A.PT03WPR5 = "                 20,2,CH,EQ,C'";
                  PT03W2A.PT03MORD = PT03M007.PT03MORD;
                  PT03W2A.PT03WSF5 = "',AND,";
                  PT03W2A.PT03WFL5 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC5; /* Parameters*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                end
                if (PT03W00.PT03WSEN != "**")
                  PT03W2A.PT03WPR6 = "                 88,2,CH,EQ,C'";
                  PT03W2A.PT03MSEN = PT03W00.PT03WSEN;
                  PT03W2A.PT03WSF6 = "',AND,";
                  PT03W2A.PT03WFL6 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC6; /* Parameters*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                end

              else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

                TA6REC.TARJCL[TA6INDEX] = PT03T17.TARJCL[PT03WIXT]; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = PT03T17.TARTYPE[PT03WIXT]; /* Type*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

              end
            end
          end
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT03T17.TARJCL[PT03WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT03W00.PT03WIXT = PT03W00.PT03WIXT + 1; /* Input table index*/

    end

  end

end // end PT03078

// shimpents to date report
Function PT03080()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If first time thru, Obtain default data.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PT03W00.PT03WRD8 == "Y" /* if switch is on*/
   && converseVar.validationMsgNum == 0) /* and no previous errors*/
    PT03S81(); /* Obtain default data*/
    PT03W00.PT03WRD8 = "N"; /* set switch off*/
  end

  PT03082(); /* Format and display the map*/

  PT03083(); /* Check attention identifier*/

  PT03084(); /* Reset fields to normal intensity*/

  PT03085(); /* Verify the data that was entered*/

  PT03086(); /* Process valid input request*/


end // end PT03080

// Format and display the map
Function PT03082()
   /* ------------------------------------------------------------*/
   /* If user is authorized, allow access to parm update field.*/
   /* ------------------------------------------------------------*/


  if (PT03W00.PT03WERF == "N") /* No edit errors*/
    set PT03M008.PT03MSC1 cursor; /* Have cursor appear here first*/
  end

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  PT03M008.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT03M008.XURDEST = TA6REC.XURDEST; /* Print destination*/
  PT03M008.XRODESC = TA6REC.XRODESC; /* Printer description*/
  PT03M008.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  PT03M008.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  PT03M008.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT03M008.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT03M008.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT03M008 alarm; /* Indicate sound alarm*/

  end

  converse PT03M008 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PT03082

// Check attention identifier
Function PT03083()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PT03W00.PT03MSEL[8] = "C"; /* Indicate selection cancelled*/

    set PT03M008 initial; /* M008 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PT03W00.PT03MSEL[8] = " "; /* Indicate selection cancelled*/
    COMMAREA.CAMSG = "NO ACTION TAKEN ON PREVIOUS SCREEN";

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "083"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PT03083

// Reset highlighted fields
Function PT03084()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PT03M008.PT03MSC1 initialAttributes;
  set PT03M008.PT03MSY1 initialAttributes;
  set PT03M008.PT03MDOF initialAttributes;
  set PT03M008.PT03MCTY initialAttributes;
  set PT03M008.PT03MFAC initialAttributes;
  set PT03M008.PT03MSTY initialAttributes;
  set PT03M008.PT03MCLR initialAttributes;
  set PT03M008.PT03MDIM initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PT03M008.PT03MCTY == "?") /* country code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      PTWREC.XXXMODID = "084"; /* Module identification*/
      converseLib.validationFailed(4); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of country codes*/
   /* ------------------------------------------------------------*/

  if (PT03M008.PT03MCTY == "?") /* country code*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "COUNTRY CODE "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      PT03M008.PT03MCTY = XCTTBL.XCTCD[XX0XWPIX]; /* Selected code*/

    end

    set PT03M008.PT03MCTY cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  PTWREC.XXXMODID = "084"; /* Module identification*/
  converseLib.validationFailed(42); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end PT03084

// Verify the entered data
Function PT03085()

   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

  PT03W00.PT03WERF = "N";

   /* ------------------------------------------------------------*/
   /* validate 'short' season/year code*/
   /* ------------------------------------------------------------*/

  if (PT03M008.PT03MSC1 != "**")
    if (PT03M008.PT03MSC1 == "SU")
      PT03W00.PT03WSESNCD1 = "U";
      PT03W00.PT03WSCODE1 = PT03M008.PT03MSC1;
    else
      if (PT03M008.PT03MSC1 == "FA")
        PT03W00.PT03WSESNCD1 = "F";
        PT03W00.PT03WSCODE1 = PT03M008.PT03MSC1;
      else
        if (PT03M008.PT03MSC1 == "HO")
          PT03W00.PT03WSESNCD1 = "H";
          PT03W00.PT03WSCODE1 = PT03M008.PT03MSC1;
        else
          if (PT03M008.PT03MSC1 == "SP")
            PT03W00.PT03WSESNCD1 = "S";
            PT03W00.PT03WSCODE1 = PT03M008.PT03MSC1;
          else
            PT03W00.PT03WERF = "Y";
            converseLib.validationFailed(111);
            PTWREC.XXXMODID = "075";
            set PT03M008.PT03MSC1 cursor, bold;
          end
        end
      end
    end
    PT03W00.PT03WSE1 = PT03W00.PT03WSESNCD1;
  else
    PT03W00.PT03WSCODE1 = PT03M008.PT03MSC1;
    PT03W00.PT03WSESNCD1 = PT03M008.PT03MSC1;
    PT03W00.PT03WSE1 = PT03W00.PT03WSESNCD1;
  end
  if (PT03W00.PT03WERF == "Y")
    return;
  end

  if (PT03M008.PT03MSY1 != "****")
    set TA2REC empty;
    TA2REC.TA2GRTYP = "G";
    PT03W00.PT03WDT3 = "    0101";
    PT03W00.PT03WDCY = PT03M008.PT03MSY1;
    TA2REC.TA2GRGG = PT03W00.PT03WDT3;
    PT03S02(); /* edit date range*/

    if (TA2REC.TA2RTNCD != 0)
      set PT03M008.PT03MSY1 cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(81); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "085";
      return;
    else
      PT03W00.PT03WSESNYR1 = PT03M008.PT03MSY1;
      PT03W00.PT03WSE2 = PT03W00.PT03WSESNYR1;
      set PT03M008.PT03MSY1 initialAttributes;
    end
  else
    PT03W00.PT03WSE2 = PT03M008.PT03MSY1;
  end
  if (PT03W00.PT03WERF == "Y")
    return;
  end

  if (PT03W00.PT03WSEN != "* "
   && PT03W00.PT03WSEN != " *"
   && PT03W00.PT03WSEN != "**")
    set PCFREC empty;
    PCFREC.PCFSECD = PT03W00.PT03WSEN;
    PCFREC.XXXSTAT = "*";
    PCFREC.PCFBUYMO = -1;

    try
      call "IO4090" ("S1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      try
        call "IO4090" ("N1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
      end
      if (SQLCA.VAGen_SQLCODE != 0)
        set PT03M008.PT03MSY1 cursor, bold; /* Highlight*/
        PT03W00.PT03WERF = "Y";
        converseLib.validationFailed(82); /* Indicate missing or invalid*/
        PTWREC.XXXMODID = "085";
      end
    else
      set PT03M008.PT03MSC1 cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(82); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "085";
    end
    try
      call "IO4090" ("C1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
    end
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate domestic/offshore*/
   /* ------------------------------------------------------------*/

  if (PT03M008.PT03MDOF != "*  "
   && PT03M008.PT03MDOF != " * "
   && PT03M008.PT03MDOF != "  *"
   && PT03M008.PT03MDOF != "** "
   && PT03M008.PT03MDOF != " **"
   && PT03M008.PT03MDOF != "* *"
   && PT03M008.PT03MDOF != "***"
   && PT03M008.PT03MDOF != "DOM"
   && PT03M008.PT03MDOF != "OFF")
    set PT03M008.PT03MDOF cursor, bold; /* Highlight*/
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(113); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "085";
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  else
    if (PT03M008.PT03MDOF != "DOM"
     && PT03M008.PT03MDOF != "OFF")
      PT03M008.PT03MDOF = "***";
    end
  end

   /* ------------------------------------------------------------*/
   /* validate country code*/
   /* ------------------------------------------------------------*/

  if (PT03M008.PT03MCTY != "*   "
   && PT03M008.PT03MCTY != "**  "
   && PT03M008.PT03MCTY != "*** "
   && PT03M008.PT03MCTY != "****")
    if (PT03M008.PT03MCTY in XCTTBL.XCTCD)
      set PT03M008.PT03MCTY initialAttributes;
    else
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(96);
      PTWREC.XXXMODID = "085";
      set PT03M008.PT03MCTY cursor, bold;
    end
  else
    set PT03M008.PT03MCTY initialAttributes;
    PT03M008.PT03MCTY = "****";

  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate country code/ domesctic/offshore*/
   /* ------------------------------------------------------------*/

  if (PT03M008.PT03MCTY != "****"
   && PT03M008.PT03MDOF != "***")
    set PT03M008.PT03MDOF cursor, bold;
    set PT03M008.PT03MCTY cursor, bold;
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(114);
    PTWREC.XXXMODID = "085";
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate factory code*/
   /* ------------------------------------------------------------*/

  if (PT03M008.PT03MFAC != "*   "
   && PT03M008.PT03MFAC != " *  "
   && PT03M008.PT03MFAC != "  * "
   && PT03M008.PT03MFAC != "**  "
   && PT03M008.PT03MFAC != " ** "
   && PT03M008.PT03MFAC != "* * "
   && PT03M008.PT03MFAC != "*** "
   && PT03M008.PT03MFAC != "****")
    set FY1REC empty;
    FY1REC.FY1FCTYC = PT03M008.PT03MFAC;
    FY1REC.XGPCD = "03";

    try
      call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
    end
    if (SQLCA.VAGen_SQLCODE != 0)
      set PT03M008.PT03MFAC cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(84); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "085";
    else
      set PT03M008.PT03MFAC initialAttributes;
    end
  else
    set PT03M008.PT03MFAC initialAttributes;
    PT03M008.PT03MFAC = "****";
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate style number*/
   /* ------------------------------------------------------------*/
  if (PT03M008.PT03MSTY != " "
   && PT03M008.PT03MSTY != "*     "
   && PT03M008.PT03MSTY != "**    "
   && PT03M008.PT03MSTY != "***   "
   && PT03M008.PT03MSTY != "****  "
   && PT03M008.PT03MSTY != "***** "
   && PT03M008.PT03MSTY != "******")

    set PG2REC empty;

    PG2REC.XDMCD = "00";
    PG2REC.XGPCD = "03";
    PG2REC.SY1STNBR = PT03M008.PT03MSTY;
    PG2REC.SYBSTGNB = PT03M008.PT03MSTY;
    if (PT03M008.PT03MCLR != "*  "
     && PT03M008.PT03MCLR != "** "
     && PT03M008.PT03MCLR != "***")
      PG2REC.SY2CLRID = PT03M008.PT03MCLR;
      PT03S82(); /* validate style / color*/
    else
      PT03M008.PT03MCLR = "***";
      PT03S83(); /* validate style existance*/
    end

    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(107);
      PT03W00.PT03WERF = "Y";
      PTWREC.XXXMODID = "085";
      set PT03M008.PT03MSTY cursor, bold;
      set PT03M008.PT03MCLR bold;
    else
      set PT03M008.PT03MSTY initialAttributes;
      set PT03M008.PT03MCLR initialAttributes;
    end

  else
    set PT03M008.PT03MSTY initialAttributes;
    set PT03M008.PT03MCLR initialAttributes;
    PT03M008.PT03MSTY = "******";
    PT03M008.PT03MCLR = "***";

  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

  if (PT03M008.PT03MCLR != "*  "
   && PT03M008.PT03MCLR != "** "
   && PT03M008.PT03MCLR != "***")
    set PT03M008.PT03MCLR initialAttributes;
  else
    set PT03M008.PT03MCLR initialAttributes;
    PT03M008.PT03MCLR = "***";

  end

  if (PT03M008.PT03MDIM != "* "
   && PT03M008.PT03MDIM != " *"
   && PT03M008.PT03MDIM != "**")
    set PT03M008.PT03MDIM initialAttributes;
  else
    PT03M008.PT03MDIM = "**";
    set PT03M008.PT03MDIM initialAttributes;
  end


end // end PT03085

// Process valid input request
Function PT03086()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/


  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/
  PT03W00.PT03WIXT = 1;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03") /* if production system*/
    PT03087(); /* format production jcl*/
  else
    PT03088(); /* format test jcl*/
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "086"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PT03W00.PT03MSEL[8] = "*"; /* Indicate function completed*/
    COMMAREA.CAMSG = "APRL SHIPMENTS TO DATE REPORT - SUBMITTED ";

    set PT03M008 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end PT03086

// Process valid production jcl
Function PT03087()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  set PT03W08 empty; /* Parameters work area*/

  PT03W08.PT03MSY1 = PT03W00.PT03WSESN1;
  PT03W08.PT03MDOF = PT03M008.PT03MDOF;
  PT03W08.PT03MCTY = PT03M008.PT03MCTY;
  PT03W08.PT03MFAC = PT03M008.PT03MFAC;
  PT03W08.PT03MSTY = PT03M008.PT03MSTY;
  PT03W08.PT03MCLR = PT03M008.PT03MCLR;
  PT03W08.PT03MDIM = PT03M008.PT03MDIM;
  PT03W08.PT03WSCC = PT03M008.PT03MSY1;
  PT03W08.PT03WSYR = PT03M008.PT03MSY1;
  PT03W08.PT03WFLG = "N";

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT03T08.TARTYPE[PT03WIXT] == "W")
      if (PT03M008.XURDEST == "LOCAL") /* destination lazer*/
        PT03W08.PT03WOT1 = "/*OUTPUT  PT21 FORMS=PT21,COPIES=";
        PT03W08.XURCOPY = TA6REC.XURCOPY;
        PT03W08.PT03WOT2 = ",DEST=RMT00";
        TA6REC.TARJCL[TA6INDEX] = PT03W08.PT03WOUT;
        TA6REC.TARTYPE[TA6INDEX] = " ";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        PT03W08.PT03WOT1 = "/*OUTPUT  PT22 FORMS=PT22,COPIES=";
        TA6REC.TARJCL[TA6INDEX] = PT03W08.PT03WOUT;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        PT03W08.PT03WOT1 = "/*OUTPUT  PT22 FORMS=PT22,COPIES=";
        TA6REC.TARJCL[TA6INDEX] = PT03W08.PT03WOUT;
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT21 FORMS=PT21,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT22 FORMS=PT22,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT23 FORMS=PT23,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    else

      if (PT03T08.TARJCL[PT03WIXT] == "===FILE01===")
        if (PT03M008.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT21)'";
        else
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT21)'";
        end
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      else

        if (PT03T08.TARJCL[PT03WIXT] == "===FILE02===")
          if (PT03M008.XURDEST == "LOCAL") /* destination lazer*/
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT22)'";
          else
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT22)'";
          end
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        else

          if (PT03T08.TARJCL[PT03WIXT] == "===FILE03===")
            if (PT03M008.XURDEST == "LOCAL") /* destination lazer*/
              TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT23)'";
            else
              TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT23)'";
            end
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          else

            if (PT03T08.TARJCL[PT03WIXT] == "===INSERT PARM===")

              TA6REC.TARJCL[TA6INDEX] = PT03W08.TARJCL; /* Parameters*/
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
            else

              if (PT03T08.TARJCL[PT03WIXT] == "===INSERT FROM SCREEN===")
                if (PT03M008.PT03MFAC != "****")
                  PT03W2A.PT03WPR2 = "  INCLUDE COND=(13,04,CH,EQ,C'";
                  PT03W08.PT03WFLG = "Y";
                  PT03W2A.PT03MFAC = PT03M008.PT03MFAC;
                  if (PT03M008.PT03MSTY != "******"
                   || PT03M008.PT03MCLR != "***"
                   || PT03M008.PT03MDIM != "**"
                   || PT03M008.PT03MCTY != "****"
                   || PT03M008.PT03MDOF != "***"
                   || PT03W00.PT03WSESN1 != "**")
                    PT03W2A.PT03WSF2 = "',AND,";
                  else
                    PT03W2A.PT03WSF2 = "')";
                  end
                  PT03W2A.PT03WFL2 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC2;
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                end
                if (PT03M008.PT03MSTY != "******")
                  if (PT03W08.PT03WFLG == "N")
                    PT03W2A.PT03WPR3 = "  INCLUDE COND=(17,06,CH,EQ,C'";
                    PT03W08.PT03WFLG = "Y";
                  else
                    PT03W2A.PT03WPR3 = "                17,06,CH,EQ,C'";
                  end
                  PT03W2A.PT03MSTY = PT03M008.PT03MSTY;
                  if (PT03M008.PT03MCLR != "***"
                   || PT03M008.PT03MDIM != "**"
                   || PT03M008.PT03MCTY != "****"
                   || PT03M008.PT03MDOF != "***"
                   || PT03W00.PT03WSESN1 != "**")
                    PT03W2A.PT03WSF3 = "',AND,";
                  else
                    PT03W2A.PT03WSF3 = "')";
                  end
                  PT03W2A.PT03WFL3 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3;
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                end
                if (PT03M008.PT03MCLR != "***")
                  if (PT03W08.PT03WFLG == "N")
                    PT03W2A.PT03WPR4 = "  INCLUDE COND=(29,03,CH,EQ,C'";
                    PT03W08.PT03WFLG = "Y";
                  else
                    PT03W2A.PT03WPR4 = "                29,03,CH,EQ,C'";
                  end
                  PT03W2A.PT03MCLR = PT03M008.PT03MCLR;
                  if (PT03M008.PT03MDIM != "**"
                   || PT03M008.PT03MCTY != "****"
                   || PT03M008.PT03MDOF != "***"
                   || PT03W00.PT03WSESN1 != "**")
                    PT03W2A.PT03WSF4 = "',AND,";
                  else
                    PT03W2A.PT03WSF4 = "')";
                  end
                  PT03W2A.PT03WFL4 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC4;
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                end
                if (PT03M008.PT03MDIM != "**")
                  if (PT03W08.PT03WFLG == "N")
                    PT03W2A.PT03WPR8 = "  INCLUDE COND=(32,02,CH,EQ,C'";
                    PT03W08.PT03WFLG = "Y";
                  else
                    PT03W2A.PT03WPR8 = "                32,02,CH,EQ,C'";
                  end
                  PT03W2A.PT03MDIM = PT03M008.PT03MDIM;
                  if (PT03M008.PT03MCTY != "****"
                   || PT03M008.PT03MDOF != "***"
                   || PT03W00.PT03WSESN1 != "**")
                    PT03W2A.PT03WSF8 = "',AND,";
                  else
                    PT03W2A.PT03WSF8 = "')";
                  end
                  PT03W2A.PT03WFL8 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC8;
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                end
                if (PT03M008.PT03MCTY != "****")
                  if (PT03W08.PT03WFLG == "N")
                    PT03W2A.PT03WPR7 = "   INCLUDE COND=(9,04,CH,EQ,C'";
                    PT03W08.PT03WFLG = "Y";
                  else
                    PT03W2A.PT03WPR7 = "                 9,04,CH,EQ,C'";
                  end
                  PT03W2A.PT03MCTY = PT03M008.PT03MCTY;
                  if (PT03M008.PT03MDOF != "***"
                   || PT03W00.PT03WSESN1 != "**")
                    PT03W2A.PT03WSF7 = "',AND,";
                  else
                    PT03W2A.PT03WSF7 = "')";
                  end
                  PT03W2A.PT03WFL7 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC7;
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                end
                if (PT03M008.PT03MSY1 != "**")
                  if (PT03W08.PT03WFLG == "N")
                    PT03W2A.PT03WPR6 = "    INCLUDE COND=(5,2,CH,EQ,C'";
                    PT03W08.PT03WFLG = "Y";
                  else
                    PT03W2A.PT03WPR6 = "                  5,2,CH,EQ,C'";
                  end
                  PT03W2A.PT03MSEN = PT03W00.PT03WSESN1;
                  if (PT03M008.PT03MDOF != "***")
                    PT03W2A.PT03WSF6 = "',AND,";
                  else
                    PT03W2A.PT03WSF6 = "')";
                  end
                  PT03W2A.PT03WFL6 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC6;
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                end
                if (PT03M008.PT03MDOF != "***")
                  if (PT03M008.PT03MDOF == "DOM")
                    if (PT03W08.PT03WFLG == "N")
                      PT03W2A.PT03WPR7 = "    INCLUDE COND=(9,4,CH,EQ,C'";
                    else
                      PT03W2A.PT03WPR7 = "                 (9,4,CH,EQ,C'";
                    end
                    PT03W2A.PT03MCTY = "USA ";
                    PT03W2A.PT03WSF7 = "',OR,";
                    PT03W2A.PT03WFL7 = " ";
                    TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC7;
                                   /* Parameters*/
                    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                    PT03W2A.PT03WPR3 = "                 17,6,CH,EQ,C'";
                    PT03W2A.PT03MSTY = "350018";
                    PT03W2A.PT03WSF3 = "',OR,";
                    PT03W2A.PT03WFL3 = " ";
                    TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3;
                                   /* Parameters*/
                    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                    PT03W2A.PT03WPR3 = "                 17,6,CH,EQ,C'";
                    PT03W2A.PT03MSTY = "350019";
                    PT03W2A.PT03WSF3 = "',OR,";
                    PT03W2A.PT03WFL3 = " ";
                    TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3;
                                   /* Parameters*/
                    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                    PT03W2A.PT03WPR3 = "                 17,6,CH,EQ,C'";
                    PT03W2A.PT03MSTY = "350020";
                    PT03W2A.PT03WSF3 = "',OR,";
                    PT03W2A.PT03WFL3 = " ";
                    TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3;
                                   /* Parameters*/
                    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                    PT03W2A.PT03WPR2 = "                 13,4,CH,EQ,C'";
                    PT03W2A.PT03MFAC = "GLL ";
                    PT03W2A.PT03WSF2 = "',OR,";
                    PT03W2A.PT03WFL2 = " ";
                    TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC2;
                                   /* Parameters*/
                    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                    PT03W2A.PT03WPR2 = "                 13,4,CH,EQ,C'";
                    PT03W2A.PT03MFAC = "SPT ";
                    if (PT03W08.PT03WFLG == "N")
                      PT03W2A.PT03WSF2 = "')";
                    else
                      PT03W2A.PT03WSF2 = "'))";
                    end
                    TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC2;
                                   /* Parameters*/
                    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                  else
                    if (PT03W08.PT03WFLG == "N")
                      PT03W2A.PT03WPR7 = "    INCLUDE COND=(9,4,CH,NE,C'";
                    else
                      PT03W2A.PT03WPR7 = "                 (9,4,CH,NE,C'";
                    end
                    PT03W2A.PT03MCTY = "USA ";
                    PT03W2A.PT03WSF7 = "',AND,";
                    PT03W2A.PT03WFL7 = " ";
                    TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC7;
                                   /* Parameters*/
                    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                    PT03W2A.PT03WPR3 = "                (17,6,CH,NE,C'";
                    PT03W2A.PT03MSTY = "350018";
                    PT03W2A.PT03WSF3 = "',AND,";
                    PT03W2A.PT03WFL3 = " ";
                    TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3;
                                   /* Parameters*/
                    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                    PT03W2A.PT03WPR3 = "                 17,6,CH,NE,C'";
                    PT03W2A.PT03MSTY = "350019";
                    PT03W2A.PT03WSF3 = "',AND,";
                    PT03W2A.PT03WFL3 = " ";
                    TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3;
                                   /* Parameters*/
                    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                    PT03W2A.PT03WPR3 = "                 17,6,CH,NE,C'";
                    PT03W2A.PT03MSTY = "350020";
                    PT03W2A.PT03WSF3 = "'),AND,";
                    PT03W2A.PT03WFL3 = " ";
                    TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3;
                                   /* Parameters*/
                    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                    PT03W2A.PT03WPR2 = "                (13,4,CH,NE,C'";
                    PT03W2A.PT03MFAC = "GLL ";
                    PT03W2A.PT03WSF2 = "',AND,";
                    PT03W2A.PT03WFL2 = " ";
                    TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC2;
                                   /* Parameters*/
                    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                    PT03W2A.PT03WPR2 = "                 13,4,CH,NE,C'";
                    PT03W2A.PT03MFAC = "SPT ";
                    if (PT03W08.PT03WFLG == "N")
                      PT03W2A.PT03WSF2 = "'))";
                    else
                      PT03W2A.PT03WSF2 = "')))";
                    end
                    PT03W2A.PT03WFL2 = " ";
                    TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC2;
                                   /* Parameters*/
                    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                  end

                end
              else


            /* ------------------------------------------------------------*/
                                  /* Format the Job Control Language*/
                                   /* statement from the table.*/

            /* ------------------------------------------------------------*/

                TA6REC.TARJCL[TA6INDEX] = PT03T08.TARJCL[PT03WIXT];
                                   /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = PT03T08.TARTYPE[PT03WIXT];
                                   /* Type*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

              end
            end
          end
        end
      end
    end


    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT03T08.TARJCL[PT03WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT03W00.PT03WIXT = PT03W00.PT03WIXT + 1; /* Input table index*/

    end

  end
end // end PT03087

// Process valid test jcl
Function PT03088()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  set PT03W08 empty; /* Parameters work area*/

  PT03W08.PT03MSY1 = PT03W00.PT03WSESN1;
  PT03W08.PT03MDOF = PT03M008.PT03MDOF;
  PT03W08.PT03MCTY = PT03M008.PT03MCTY;
  PT03W08.PT03MFAC = PT03M008.PT03MFAC;
  PT03W08.PT03MSTY = PT03M008.PT03MSTY;
  PT03W08.PT03MCLR = PT03M008.PT03MCLR;
  PT03W08.PT03MDIM = PT03M008.PT03MDIM;
  PT03W08.PT03WSCC = PT03M008.PT03MSY1;
  PT03W08.PT03WSYR = PT03M008.PT03MSY1;
  PT03W08.PT03WFLG = "N";

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT03T18.TARJCL[PT03WIXT] == "===NOTIFY===")
      PT03W2A.PT03WPR9 = "//             NOTIFY=";
      PT03W2A.PT03WUID = TA6REC.XURUSRID;
      PT03W2A.PT03WFL9 = " ";
      TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC9;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    else

      if (PT03T18.TARJCL[PT03WIXT] == "===OUTPUT1===")
        if (PT03M008.XURDEST == "LOCAL") /* destination lazer*/
          PT03W08.PT03WOT1 = "/*OUTPUT  PT21 FORMS=PT21,COPIES=";
          PT03W08.XURCOPY = TA6REC.XURCOPY;
          PT03W08.PT03WOT2 = ",DEST=RMT00";
          TA6REC.TARJCL[TA6INDEX] = PT03W08.PT03WOUT;
          TA6REC.TARTYPE[TA6INDEX] = " ";
        else
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT21 FORMS=PT21,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
        end
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      else

        if (PT03T18.TARJCL[PT03WIXT] == "===OUTPUT2===")
          if (PT03M008.XURDEST == "LOCAL") /* destination lazer*/
            PT03W08.PT03WOT1 = "/*OUTPUT  PT22 FORMS=PT22,COPIES=";
            PT03W08.XURCOPY = TA6REC.XURCOPY;
            PT03W08.PT03WOT2 = ",DEST=RMT00";
            TA6REC.TARJCL[TA6INDEX] = PT03W08.PT03WOUT;
            TA6REC.TARTYPE[TA6INDEX] = " ";
          else
            TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT22 FORMS=PT22,COPIES=_,DEST=_____";
            TA6REC.TARTYPE[TA6INDEX] = "O";
          end
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        else

          if (PT03T18.TARJCL[PT03WIXT] == "===OUTPUT3===")
            if (PT03M008.XURDEST == "LOCAL") /* destination lazer*/
              PT03W08.PT03WOT1 = "/*OUTPUT  PT23 FORMS=PT23,COPIES=";
              PT03W08.XURCOPY = TA6REC.XURCOPY;
              PT03W08.PT03WOT2 = ",DEST=RMT00";
              TA6REC.TARJCL[TA6INDEX] = PT03W08.PT03WOUT;
              TA6REC.TARTYPE[TA6INDEX] = " ";
            else
              TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT23 FORMS=PT23,COPIES=_,DEST=_____";
              TA6REC.TARTYPE[TA6INDEX] = "O";
            end
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          else

            if (PT03T18.TARJCL[PT03WIXT] == "===FILE01===")
              if (PT03M008.XURDEST == "LOCAL") /* destination lazer*/
                TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(2,,PT21)'";
              else
                TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(T,,PT21)'";
              end
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
            else

              if (PT03T18.TARJCL[PT03WIXT] == "===FILE02===")
                if (PT03M008.XURDEST == "LOCAL") /* destination lazer*/
                  TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(2,,PT22)'";
                else
                  TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(T,,PT22)'";
                end
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              else

                if (PT03T18.TARJCL[PT03WIXT] == "===FILE03===")
                  if (PT03M008.XURDEST == "LOCAL") /* destination lazer*/
                    TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(2,,PT23)'";
                  else
                    TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(T,,PT23)'";
                  end
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                else

                  if (PT03T18.TARJCL[PT03WIXT] == "===INSERT PARM===")

                    TA6REC.TARJCL[TA6INDEX] = PT03W08.TARJCL;
                                   /* Parameters*/
                    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                  else

                    if (PT03T18.TARJCL[PT03WIXT] == 
                    "===INSERT FROM SCREEN===")
                      if (PT03M008.PT03MFAC != "****")
                        PT03W2A.PT03WPR2 = "  INCLUDE COND=(13,04,CH,EQ,C'";
                        PT03W08.PT03WFLG = "Y";
                        PT03W2A.PT03MFAC = PT03M008.PT03MFAC;
                        if (PT03M008.PT03MSTY != "******"
                         || PT03M008.PT03MCLR != "***"
                         || PT03M008.PT03MDIM != "**"
                         || PT03M008.PT03MCTY != "****"
                         || PT03M008.PT03MDOF != "***"
                         || PT03W00.PT03WSESN1 != "**")
                          PT03W2A.PT03WSF2 = "',AND,";
                        else
                          PT03W2A.PT03WSF2 = "')";
                        end
                        PT03W2A.PT03WFL2 = " ";
                        TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC2;
                        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                      end
                      if (PT03M008.PT03MSTY != "******")
                        if (PT03W08.PT03WFLG == "N")
                          PT03W2A.PT03WPR3 = "  INCLUDE COND=(17,06,CH,EQ,C'";
                          PT03W08.PT03WFLG = "Y";
                        else
                          PT03W2A.PT03WPR3 = "                17,06,CH,EQ,C'";
                        end
                        PT03W2A.PT03MSTY = PT03M008.PT03MSTY;
                        if (PT03M008.PT03MCLR != "***"
                         || PT03M008.PT03MDIM != "**"
                         || PT03M008.PT03MCTY != "****"
                         || PT03M008.PT03MDOF != "***"
                         || PT03W00.PT03WSESN1 != "**")
                          PT03W2A.PT03WSF3 = "',AND,";
                        else
                          PT03W2A.PT03WSF3 = "')";
                        end
                        PT03W2A.PT03WFL3 = " ";
                        TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3;
                        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                      end
                      if (PT03M008.PT03MCLR != "***")
                        if (PT03W08.PT03WFLG == "N")
                          PT03W2A.PT03WPR4 = "  INCLUDE COND=(29,03,CH,EQ,C'";
                          PT03W08.PT03WFLG = "Y";
                        else
                          PT03W2A.PT03WPR4 = "                29,03,CH,EQ,C'";
                        end
                        PT03W2A.PT03MCLR = PT03M008.PT03MCLR;
                        if (PT03M008.PT03MDIM != "**"
                         || PT03M008.PT03MCTY != "****"
                         || PT03M008.PT03MDOF != "***"
                         || PT03W00.PT03WSESN1 != "**")
                          PT03W2A.PT03WSF4 = "',AND,";
                        else
                          PT03W2A.PT03WSF4 = "')";
                        end
                        PT03W2A.PT03WFL4 = " ";
                        TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC4;
                        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                      end
                      if (PT03M008.PT03MDIM != "**")
                        if (PT03W08.PT03WFLG == "N")
                          PT03W2A.PT03WPR8 = "  INCLUDE COND=(32,02,CH,EQ,C'";
                          PT03W08.PT03WFLG = "Y";
                        else
                          PT03W2A.PT03WPR8 = "                32,02,CH,EQ,C'";
                        end
                        PT03W2A.PT03MDIM = PT03M008.PT03MDIM;
                        if (PT03M008.PT03MCTY != "****"
                         || PT03M008.PT03MDOF != "***"
                         || PT03W00.PT03WSESN1 != "**")
                          PT03W2A.PT03WSF8 = "',AND,";
                        else
                          PT03W2A.PT03WSF8 = "')";
                        end
                        PT03W2A.PT03WFL8 = " ";
                        TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC8;
                        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                      end
                      if (PT03M008.PT03MCTY != "****")
                        if (PT03W08.PT03WFLG == "N")
                          PT03W2A.PT03WPR7 = "   INCLUDE COND=(9,04,CH,EQ,C'";
                          PT03W08.PT03WFLG = "Y";
                        else
                          PT03W2A.PT03WPR7 = "                 9,04,CH,EQ,C'";
                        end
                        PT03W2A.PT03MCTY = PT03M008.PT03MCTY;
                        if (PT03M008.PT03MDOF != "***"
                         || PT03W00.PT03WSESN1 != "**")
                          PT03W2A.PT03WSF7 = "',AND,";
                        else
                          PT03W2A.PT03WSF7 = "')";
                        end
                        PT03W2A.PT03WFL7 = " ";
                        TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC7;
                        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                      end
                      if (PT03W00.PT03WSESN1 != "**")
                        if (PT03W08.PT03WFLG == "N")
                          PT03W2A.PT03WPR6 = "    INCLUDE COND=(5,2,CH,EQ,C'";
                          PT03W08.PT03WFLG = "Y";
                        else
                          PT03W2A.PT03WPR6 = "                  5,2,CH,EQ,C'";
                        end
                        PT03W2A.PT03MSEN = PT03M008.PT03MSY1;
                        if (PT03M008.PT03MDOF != "***")
                          PT03W2A.PT03WSF6 = "',AND,";
                        else
                          PT03W2A.PT03WSF6 = "')";
                        end
                        PT03W2A.PT03WFL6 = " ";
                        TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC6;
                        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                      end
                      if (PT03M008.PT03MDOF != "***")
                        if (PT03M008.PT03MDOF == "DOM")
                          if (PT03W08.PT03WFLG == "N")
                            PT03W2A.PT03WPR7 = "    INCLUDE COND=(9,4,CH,EQ,C'";
                          else
                            PT03W2A.PT03WPR7 = "                 (9,4,CH,EQ,C'";
                          end
                          PT03W2A.PT03MCTY = "USA ";
                          PT03W2A.PT03WSF7 = "',OR,";
                          PT03W2A.PT03WFL7 = " ";
                          TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC7;
                                   /* Parameters*/
                          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                          PT03W2A.PT03WPR3 = "                 17,6,CH,EQ,C'";
                          PT03W2A.PT03MSTY = "350018";
                          PT03W2A.PT03WSF3 = "',OR,";
                          PT03W2A.PT03WFL3 = " ";
                          TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3;
                                   /* Parameters*/
                          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                          PT03W2A.PT03WPR3 = "                 17,6,CH,EQ,C'";
                          PT03W2A.PT03MSTY = "350019";
                          PT03W2A.PT03WSF3 = "',OR,";
                          PT03W2A.PT03WFL3 = " ";
                          TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3;
                                   /* Parameters*/
                          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                          PT03W2A.PT03WPR3 = "                 17,6,CH,EQ,C'";
                          PT03W2A.PT03MSTY = "350020";
                          PT03W2A.PT03WSF3 = "',OR,";
                          PT03W2A.PT03WFL3 = " ";
                          TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3;
                                   /* Parameters*/
                          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                          PT03W2A.PT03WPR2 = "                 13,4,CH,EQ,C'";
                          PT03W2A.PT03MFAC = "GLL ";
                          PT03W2A.PT03WSF2 = "',OR,";
                          PT03W2A.PT03WFL2 = " ";
                          TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC2;
                                   /* Parameters*/
                          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                          PT03W2A.PT03WPR2 = "                 13,4,CH,EQ,C'";
                          PT03W2A.PT03MFAC = "SPT ";
                          if (PT03W08.PT03WFLG == "N")
                            PT03W2A.PT03WSF2 = "')";
                          else
                            PT03W2A.PT03WSF2 = "'))";
                          end
                          TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC2;
                                   /* Parameters*/
                          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                        else
                          if (PT03W08.PT03WFLG == "N")
                            PT03W2A.PT03WPR7 = "    INCLUDE COND=(9,4,CH,NE,C'";
                          else
                            PT03W2A.PT03WPR7 = "                 (9,4,CH,NE,C'";
                          end
                          PT03W2A.PT03MCTY = "USA ";
                          PT03W2A.PT03WSF7 = "',AND,";
                          PT03W2A.PT03WFL7 = " ";
                          TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC7;
                                   /* Parameters*/
                          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                          PT03W2A.PT03WPR3 = "                (17,6,CH,NE,C'";
                          PT03W2A.PT03MSTY = "350018";
                          PT03W2A.PT03WSF3 = "',AND,";
                          PT03W2A.PT03WFL3 = " ";
                          TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3;
                                   /* Parameters*/
                          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                          PT03W2A.PT03WPR3 = "                 17,6,CH,NE,C'";
                          PT03W2A.PT03MSTY = "350019";
                          PT03W2A.PT03WSF3 = "',AND,";
                          PT03W2A.PT03WFL3 = " ";
                          TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3;
                                   /* Parameters*/
                          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                          PT03W2A.PT03WPR3 = "                 17,6,CH,NE,C'";
                          PT03W2A.PT03MSTY = "350020";
                          PT03W2A.PT03WSF3 = "'),AND,";
                          PT03W2A.PT03WFL3 = " ";
                          TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC3;
                                   /* Parameters*/
                          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                          PT03W2A.PT03WPR2 = "                (13,4,CH,NE,C'";
                          PT03W2A.PT03MFAC = "GLL ";
                          PT03W2A.PT03WSF2 = "',AND,";
                          PT03W2A.PT03WFL2 = " ";
                          TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC2;
                                   /* Parameters*/
                          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                          PT03W2A.PT03WPR2 = "                 13,4,CH,NE,C'";
                          PT03W2A.PT03MFAC = "SPT ";
                          if (PT03W08.PT03WFLG == "N")
                            PT03W2A.PT03WSF2 = "'))";
                          else
                            PT03W2A.PT03WSF2 = "')))";
                          end
                          PT03W2A.PT03WFL2 = " ";
                          TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC2;
                                   /* Parameters*/
                          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/
                        end

                      end
                    else


            /* ------------------------------------------------------------*/
                                  /* Format the Job Control Language*/
                                   /* statement from the table.*/

            /* ------------------------------------------------------------*/

                      TA6REC.TARJCL[TA6INDEX] = PT03T18.TARJCL[PT03WIXT]; /* JCL*/
                      TA6REC.TARTYPE[TA6INDEX] = PT03T18.TARTYPE[PT03WIXT]; /* Type*/
                      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Output array index*/

                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT03T18.TARJCL[PT03WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT03W00.PT03WIXT = PT03W00.PT03WIXT + 1; /* Input table index*/

    end

  end
end // end PT03088

// delivery analysis report
Function PT03090()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If first time thru, Obtain default data.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PT03W00.PT03WRD2 == "Y" /* if switch is on*/
   && converseVar.validationMsgNum == 0) /* and no previous errors*/
    set XZZREC empty;
    PT03M009.PT03MLOC = "FOR MEMPHIS";
    PT03S91(); /* Obtain default data*/
    PT03W00.PT03WRD2 = "N"; /* set switch off*/
  end

  PT03092(); /* Format and display the map*/

  PT03093(); /* Check attention identifier*/

  PT03094(); /* Reset fields to normal intensity*/

  PT03095(); /* Verify the data that was entered*/

  PT03096(); /* Process valid input request*/


end // end PT03090

// Format and display the map
Function PT03092()
   /* ------------------------------------------------------------*/
   /* If user is authorized, allow acess to parm update field*/
   /* ------------------------------------------------------------*/

  if (PT03W00.PT03WERF == "N") /* No edir errors*/
    if (CACHGFL == "Y") /* Updates allowed by this user*/
      set PT03M009.PT03MPRM cursor; /* Have cursor appear here first*/
    else
      set PT03M009.PT03MPDT cursor; /* Have cursor appear here first*/
      set PT03M009.PT03MPRM skip; /* No access to this field*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  PT03M009.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT03M009.XURDEST = TA6REC.XURDEST; /* Print destination*/
  PT03M009.XRODESC = TA6REC.XRODESC; /* Printer description*/
  PT03M009.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  PT03M009.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  PT03M009.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT03M009.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT03M009.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT03M009 alarm; /* Indicate sound alarm*/

  end

  converse PT03M009 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PT03092

// Check attention identifier
Function PT03093()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PT03W00.PT03MSEL[9] = "C"; /* Indicate selection cancelled*/

    set PT03M009 initial; /* m002 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PT03W00.PT03MSEL[9] = " "; /* Indicate nothing done*/
    COMMAREA.CAMSG = "NO ACTION TAKEN ON PREVIOUS SCREEN";

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "023"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PT03093

// Reset highlighted fields
Function PT03094()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (CACHGFL == "Y")
    set PT03M009.PT03MPRM initialAttributes;
    set PT03M009.PT03MHYP initialAttributes;
  else
    set PT03M009.PT03MPRM skip;
    set PT03M009.PT03MHYP skip;
  end
  set PT03M009.PT03MPDT initialAttributes;
  set PT03M009.PT03MDDT initialAttributes;
  set PT03M009.PT03MSCD initialAttributes;
  set PT03M009.PT03MSYR initialAttributes;
  set PT03M009.PT03MIND initialAttributes;
  set PT03M009.PT03MGEN initialAttributes;
  set PT03M009.PT03MCAT initialAttributes;


   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PT03M009.PT03MGEN == "?" /* gendar age code*/
   || PT03M009.PT03MCAT == "?") /* product category code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      PTWREC.XXXMODID = "024"; /* Module identification*/
      converseLib.validationFailed(4); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

  /* EZERTN;                        /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of gender age codes*/
   /* ------------------------------------------------------------*/

  if (PT03M009.PT03MGEN == "?") /* gender age code*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "GENDER AGE CODE "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXGA01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      PT03M009.PT03MGEN = XGATBL.XGACD[XX0XWPIX]; /* Selected code*/

    end

    set PT03M009.PT03MGEN cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product categories*/
   /* ------------------------------------------------------------*/

  if (PT03M009.PT03MCAT == "?") /* product category*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT CATEGORY CODE "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      PT03M009.PT03MCAT = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/

    end

    set PT03M009.PT03MCAT cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/



  set PT03M009.PT03MPD2 initialAttributes;
  set PT03M009.PT03MDD2 initialAttributes;
  set PT03M009.PT03MSC2 initialAttributes;
  set PT03M009.PT03MSY2 initialAttributes;
  set PT03M009.PT03MIN2 initialAttributes;
  set PT03M009.PT03MGE2 initialAttributes;
  set PT03M009.PT03MCA2 initialAttributes;


  if ((PT03M009.PT03MPD2 == 0 || 
  PT03M009.PT03MPD2 == " ") && 
  (PT03M009.PT03MDD2 == 0 || 
  PT03M009.PT03MDD2 == " ") && 
  PT03M009.PT03MSC2 == " " && 
  PT03M009.PT03MSY2 == " " && 
  PT03M009.PT03MIN2 == " " && 
  PT03M009.PT03MGE2 == " " && 
  PT03M009.PT03MCA2 == " ")
    PT03W00.PT03WCOL = "N";
  else
    PT03W00.PT03WCOL = "Y";
  end
           /* ------------------------------------------------------------*/
    /* If no lists were requested, return to the previous process.*/
    /* ------------------------------------------------------------*/

  if (PT03M009.PT03MGE2 == "?" /* gendar age code*/
   || PT03M009.PT03MCA2 == "?") /* product category code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      PTWREC.XXXMODID = "024"; /* Module identification*/
      converseLib.validationFailed(4); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

    /* ------------------------------------------------------------*/
    /* If requested, display the list of gender age codes*/
    /* ------------------------------------------------------------*/

  if (PT03W00.PT03WCOL == "Y")
    if (PT03M009.PT03MGE2 == "?") /* gender age code*/

      XPXX001(); /* window initialization*/
      XX0XW02.XX0XWHDR = "GENDER AGE CODE "; /* Heading*/

      XX0XW02.XGPCD = COMMAREA.XGPCD;
      while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
        XPXGA01(); /* Display the list*/
      end

      if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

        PT03M009.PT03MGE2 = XGATBL.XGACD[XX0XWPIX]; /* Selected code*/

      end

      set PT03M009.PT03MGE2 cursor; /* Establish cursor position*/

    end

    /* ------------------------------------------------------------*/
    /* If requested, display the list of product categories*/
    /* ------------------------------------------------------------*/

    if (PT03M009.PT03MCA2 == "?") /* product category*/

      XPXX001(); /* window initialization*/
      XX0XW02.XX0XWHDR = "PRODUCT CATEGORY CODE "; /* Heading*/

      XX0XW02.XGPCD = COMMAREA.XGPCD;
      while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
        XPXPC01(); /* Display the list*/
      end

      if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

        PT03M009.PT03MCA2 = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/

      end

      set PT03M009.PT03MCA2 cursor; /* Establish cursor position*/

    end

    /* ------------------------------------------------------------*/
    /* Indicate that the requested lists have been displayed and*/
    /* that ENTER must be pressed to process any changes.*/
    /* ------------------------------------------------------------*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    PTWREC.XXXMODID = "024"; /* Module identification*/
    converseLib.validationFailed(42); /* Indicate press ENTER*/

    exit stack; /* Exit to display map*/

  end

end // end PT03094

// Verify the entered data
Function PT03095()
   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

  PT03W00.PT03WERF = "N";

   /* ------------------------------------------------------------*/
   /* validate parm update field*/
   /* ------------------------------------------------------------*/

  if (PT03M009.PT03MPRM != "P"
   && PT03M009.PT03MPRM != "R")
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(80);
    PTWREC.XXXMODID = "025";
    set PT03M009.PT03MPRM cursor, bold;
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate hyperchannel job run option*/
   /* ------------------------------------------------------------*/

  if (PT03M009.PT03MHYP != "Y"
   && PT03M009.PT03MHYP != "N")
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(124);
    PTWREC.XXXMODID = "095";
    set PT03M009.PT03MHYP cursor, bold;
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate production due date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGE = PT03M009.PT03MPDT;
  PT03S02(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set PT03M009.PT03MPDT cursor, bold; /* Highlight*/
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(81); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "025";
    return;
  else
    set PT03M009.PT03MPDT initialAttributes;
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate demand as of date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGDD = "01";
  TA2REC.TA2GRGE = PT03M009.PT03MDDT;
  PT03S02(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set PT03M009.PT03MDDT cursor, bold; /* Highlight*/
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(81); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "025";
    return;
  else
    set PT03M009.PT03MDDT initialAttributes;
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate season code*/
   /* ------------------------------------------------------------*/

  if (PT03M009.PT03MSCD != "FA"
   && PT03M009.PT03MSCD != "SU"
   && PT03M009.PT03MSCD != "SP"
   && PT03M009.PT03MSCD != "HO"
   && PT03M009.PT03MSCD != "**")
    set PT03M009.PT03MSCD cursor, bold; /* Highlight*/
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(86); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "025";
    return;
  else
    set PT03M009.PT03MSCD initialAttributes;
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate season year*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;
  TA2REC.TA2GRTYP = "G";
  PT03W00.PT03WDT3 = "    0101";
  PT03W00.PT03WDCY = PT03M009.PT03MSYR;
  TA2REC.TA2GRGG = PT03W00.PT03WDT3;
  PT03S02(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set PT03M009.PT03MSYR cursor, bold; /* Highlight*/
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(81); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "025";
    return;
  else
    set PT03M009.PT03MSYR initialAttributes;
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate gender age*/
   /* ------------------------------------------------------------*/

  if (PT03M009.PT03MGEN != "* "
   && PT03M009.PT03MGEN != "**")
    if (PT03M009.PT03MGEN in XGATBL.XGACD)
      set PT03M009.PT03MGEN initialAttributes;
    else
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(109);
      PTWREC.XXXMODID = "025";
      set PT03M009.PT03MGEN cursor, bold;
    end
  else
    set PT03M009.PT03MGEN initialAttributes;
    PT03M009.PT03MGEN = "**";

  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate category*/
   /* ------------------------------------------------------------*/

  if (PT03M009.PT03MCAT != "* "
   && PT03M009.PT03MCAT != "**")
    if (PT03M009.PT03MCAT in XPCTBL.XPCCD)
      set PT03M009.PT03MCAT initialAttributes;
    else
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(110);
      PTWREC.XXXMODID = "025";
      set PT03M009.PT03MCAT cursor, bold;
    end
  else
    set PT03M009.PT03MCAT initialAttributes;
    PT03M009.PT03MCAT = "**";

  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate report selection indicator*/
   /* ------------------------------------------------------------*/

  if (PT03M009.PT03MIND != "*"
   && PT03M009.PT03MIND != "S"
   && PT03M009.PT03MIND != "C")
    PT03W00.PT03WERF = "Y";
    converseLib.validationFailed(108);
    PTWREC.XXXMODID = "025";
    set PT03M009.PT03MIND cursor, bold;
  else
    set PT03M009.PT03MIND initialAttributes;
  end

  if (PT03W00.PT03WERF == "Y")
    return;
  end


  if (PT03W00.PT03WCOL == "Y")
    set TA2REC empty;
    TA2REC.TA2GRTYP = "E";
    TA2REC.TA2GRGE = PT03M009.PT03MPD2;
    PT03S02(); /* edit date range*/

    if (TA2REC.TA2RTNCD != 0)
      set PT03M009.PT03MPD2 cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(81); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "025";
      return;
    else
      set PT03M009.PT03MPD2 initialAttributes;
    end

    if (PT03W00.PT03WERF == "Y")
      return;
    end


    /* ------------------------------------------------------------*/
    /* validate demand as of date*/
    /* ------------------------------------------------------------*/

    set TA2REC empty;
    TA2REC.TA2GRTYP = "E";
    TA2REC.TA2GRGDD = "01";
    TA2REC.TA2GRGE = PT03M009.PT03MDD2;
    PT03S02(); /* edit date range*/

    if (TA2REC.TA2RTNCD != 0)
      set PT03M009.PT03MDD2 cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(81); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "025";
      return;
    else
      set PT03M009.PT03MDD2 initialAttributes;
    end

    if (PT03W00.PT03WERF == "Y")
      return;
    end


    /* ------------------------------------------------------------*/
    /* validate season code*/
    /* ------------------------------------------------------------*/

    if (PT03M009.PT03MSC2 != "FA"
     && PT03M009.PT03MSC2 != "SU"
     && PT03M009.PT03MSC2 != "SP"
     && PT03M009.PT03MSC2 != "HO"
     && PT03M009.PT03MSC2 != "**")
      set PT03M009.PT03MSC2 cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(86); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "025";
      return;
    else
      set PT03M009.PT03MSC2 initialAttributes;
    end

    if (PT03W00.PT03WERF == "Y")
      return;
    end


    /* ------------------------------------------------------------*/
    /* validate season year*/
    /* ------------------------------------------------------------*/

    set TA2REC empty;
    TA2REC.TA2GRTYP = "G";
    PT03W00.PT03WDT3 = "    0101";
    PT03W00.PT03WDCY = PT03M009.PT03MSY2;
    TA2REC.TA2GRGG = PT03W00.PT03WDT3;
    PT03S02(); /* edit date range*/

    if (TA2REC.TA2RTNCD != 0)
      set PT03M009.PT03MSY2 cursor, bold; /* Highlight*/
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(81); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "025";
      return;
    else
      set PT03M009.PT03MSY2 initialAttributes;
    end

    if (PT03W00.PT03WERF == "Y")
      return;
    end

    /* ------------------------------------------------------------*/
    /* validate gender age*/
    /* ------------------------------------------------------------*/

    if (PT03M009.PT03MGE2 != "* "
     && PT03M009.PT03MGE2 != "**")
      if (PT03M009.PT03MGE2 in XGATBL.XGACD)
        set PT03M009.PT03MGE2 initialAttributes;
      else
        PT03W00.PT03WERF = "Y";
        converseLib.validationFailed(109);
        PTWREC.XXXMODID = "025";
        set PT03M009.PT03MGE2 cursor, bold;
      end
    else
      set PT03M009.PT03MGE2 initialAttributes;
      PT03M009.PT03MGE2 = "**";

    end

    if (PT03W00.PT03WERF == "Y")
      return;
    end


    /* ------------------------------------------------------------*/
    /* validate category*/
    /* ------------------------------------------------------------*/

    if (PT03M009.PT03MCA2 != "* "
     && PT03M009.PT03MCA2 != "**")
      if (PT03M009.PT03MCA2 in XPCTBL.XPCCD)
        set PT03M009.PT03MCA2 initialAttributes;
      else
        PT03W00.PT03WERF = "Y";
        converseLib.validationFailed(110);
        PTWREC.XXXMODID = "025";
        set PT03M009.PT03MCA2 cursor, bold;
      end
    else
      set PT03M009.PT03MCA2 initialAttributes;
      PT03M009.PT03MCA2 = "**";

    end

    if (PT03W00.PT03WERF == "Y")
      return;
    end

    /* ------------------------------------------------------------*/
    /* validate report selection indicator*/
    /* ------------------------------------------------------------*/

    if (PT03M009.PT03MIN2 != "*"
     && PT03M009.PT03MIN2 != "S"
     && PT03M009.PT03MIN2 != "C")
      PT03W00.PT03WERF = "Y";
      converseLib.validationFailed(108);
      PTWREC.XXXMODID = "025";
      set PT03M009.PT03MIN2 cursor, bold;
    else
      set PT03M009.PT03MIN2 initialAttributes;
    end

    if (PT03W00.PT03WERF == "Y")
      return;
    end
  end

end // end PT03095

// Process valid input request
Function PT03096()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

  if (PT03W00.PT03WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* if parm update was requested then UPDATE PARMS!! NOOOW!!!!!!*/
   /* ------------------------------------------------------------*/

  if (PT03M009.PT03MPRM == "P")

    PT03S96();
    PT03W00.PT03MSEL[9] = "*";
    COMMAREA.CAMSG = "DELIVERY ANALYSIS PARMS(MEMPHIS) - UPDATED";
    return;

  end

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/
  PT03W00.PT03WIXT = 1;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into subroutine work area.*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03") /* if production JCL*/
    PT03097(); /* format production jcl*/
  else
    PT03098(); /* format test jcl*/
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "026"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PT03W00.PT03MSEL[9] = "*";
    COMMAREA.CAMSG = "DELIVERY ANALYSIS RPT(MEMPHIS)-SUBMITTED ";

  /* SET PT03M009 CLEAR;            /* Clear map output area*/

  /* EZERTN;                        /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  if (PT03W00.PT03WCOL == "Y"
  ) /* ------------------------------------------------------------*/
    /* Initialize the work area and indexes to be used.*/
    /* ------------------------------------------------------------*/

    move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

    TA6REC.TA6INDEX = 1; /* Output array index*/
    PT03W00.PT03WIXT = 1;

    /* ------------------------------------------------------------*/
    /* Format JCL and parameters into subroutine work area.*/
    /* ------------------------------------------------------------*/

    if (TA3REC.TA3RGNID == "03") /* if production JCL*/
      PT03-0961(); /* format production jcl*/
    else
      PT03-0962(); /* format test jcl*/
    end

    /* ------------------------------------------------------------*/
    /* Submit the JCL and parameters for batch execution.*/
    /* ------------------------------------------------------------*/

    TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
    TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

    XPTA0P(); /* Submit JCL for background job*/

    /* ------------------------------------------------------------*/
    /* If submit was successful, return to the previous process.*/
    /* ------------------------------------------------------------*/

    PTWREC.XXXMODID = "026"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && TA6REC.TA6RTNCD == "0")        /* and normal return*/

      PT03W00.PT03MSEL[9] = "*";
      COMMAREA.CAMSG = "DELIVERY ANALYSIS RPT & RPT-II(MEMPHIS) - SUBMITTED ";

      set PT03M009 initial; /* Clear map output area*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
    /* Otherwise, indicate that an unexpected error has occurred.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode != "00000000" /* Call not successful*/
     || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

      converseLib.validationFailed(1); /* Unexpected error occurred*/

    end
  else
    set PT03M009 initial; /* Clear map output area*/

    return; /* Return to previous process*/
  end


  exit stack; /* Exit to display map*/


end // end PT03096

// Process valid production jcl
Function PT03097()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT03T09.TARJCL[PT03WIXT] == "===OUTPUT===")
      if (PT03M009.XURDEST == "LOCAL") /* destination lazer*/
        PT03W02.PT03WOT1 = "/*OUTPUT  PT01 FORMS=PT01,COPIES=";
        PT03W02.XURCOPY = TA6REC.XURCOPY;
        PT03W02.PT03WOT2 = ",DEST=RMT00";
        TA6REC.TARJCL[TA6INDEX] = PT03W02.PT03WOUT;
        TA6REC.TARTYPE[TA6INDEX] = " ";

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        PT03W02.PT03WOT1 = "/*OUTPUT  PT02 FORMS=PT02,COPIES=";
        TA6REC.TARJCL[TA6INDEX] = PT03W02.PT03WOUT;

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT01 FORMS=PT01,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT02 FORMS=PT02,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

      end
    else

      if (PT03T09.TARJCL[PT03WIXT] == "//*** PRINT STEPS GO HERE ***")
        if (PT03W02.PT03MIND == "C"
         || PT03W02.PT03MIND == "*")
          PT03-0971(); /* add color report print step to jcl*/
        end
        if (PT03W02.PT03MIND == "S"
         || PT03W02.PT03MIND == "*")
          PT03-0972(); /* add color report print step to jcl*/
        end

      else

        if (PT03T09.TARJCL[PT03WIXT] == "//*** HYPERCHANNEL ***")
          if (PT03M009.PT03MHYP == "Y")
            PT0309E(); /* run hyperchannel job*/
          end

        else
          if (PT03T09.TARTYPE[PT03WIXT] == "P") /* Parameters statement*/


            /* ------------------------------------------------------------*/
            /* Format the variable parameters entered by the user.*/

            /* ------------------------------------------------------------*/

            set PT03W02 empty; /* Parameters work area*/

            PT03W02.PT03MPRM = "R";
            PT03W00.PT03WDAT = PT03M009.PT03MPDT;
            PT03W02.PT03WYY = PT03W00.PT03WYY;
            PT03W02.PT03WMM = PT03W00.PT03WMM;
            PT03W02.PT03WDD = PT03W00.PT03WDD;
            PT03W02.PT03MDDT = PT03M009.PT03MDDT;
            PT03W02.PT03MSCD = PT03M009.PT03MSCD;
            PT03W02.PT03MSYR = PT03M009.PT03MSYR;
            PT03W02.PT03MIND = PT03M009.PT03MIND;
            PT03W02.PT03MGEN = PT03M009.PT03MGEN;
            PT03W02.PT03MCAT = PT03M009.PT03MCAT;

            TA6REC.TARJCL[TA6INDEX] = PT03W02.TARJCL; /* Parameters*/

            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          else

            TA6REC.TARJCL[TA6INDEX] = PT03T09.TARJCL[PT03WIXT]; /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = PT03T09.TARTYPE[PT03WIXT];
                                   /* Type*/

            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          end
        end
      end
    end


      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

    if (PT03T09.TARJCL[PT03WIXT] == "/*EOF") /* End of table*/
      TA6REC.TARJCL[TA6INDEX] = "//*    "; /* JCL*/
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT03W00.PT03WIXT = PT03W00.PT03WIXT + 1; /* Input table index*/

    end

  end

end // end PT03097

// Process valid test jcl
Function PT03098()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT03T19.TARJCL[PT03WIXT] == "===NOTIFY===")
      PT03W2A.PT03WPR9 = "//             NOTIFY=";
      PT03W2A.PT03WUID = TA6REC.XURUSRID;
      PT03W2A.PT03WFL9 = " ";
      TA6REC.TARJCL[TA6INDEX] = PT03W2A.PT03WJC9;
      TA6REC.TARTYPE[TA6INDEX] = " ";

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      if (PT03T19.TARJCL[PT03WIXT] == "===OUTPUT===")
        if (PT03M009.XURDEST == "LOCAL") /* destination lazer*/
          PT03W02.PT03WOT1 = "/*OUTPUT  PT01 FORMS=PT01,COPIES=";
          PT03W02.XURCOPY = TA6REC.XURCOPY;
          PT03W02.PT03WOT2 = ",DEST=RMT00";
          TA6REC.TARJCL[TA6INDEX] = PT03W02.PT03WOUT;
          TA6REC.TARTYPE[TA6INDEX] = " ";

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          PT03W02.PT03WOT1 = "/*OUTPUT  PT02 FORMS=PT02,COPIES=";
          TA6REC.TARJCL[TA6INDEX] = PT03W02.PT03WOUT;
          TA6REC.TARTYPE[TA6INDEX] = " ";

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        else
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT01 FORMS=PT01,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT02 FORMS=PT02,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        end
      else

        if (PT03T19.TARJCL[PT03WIXT] == "//*** PRINT STEPS GO HERE ***")
          if (PT03W02.PT03MIND == "C"
           || PT03W02.PT03MIND == "*")
            PT03-0981(); /* add color report print step to jcl*/
          end
          if (PT03W02.PT03MIND == "S"
           || PT03W02.PT03MIND == "*")
            PT03-0982(); /* add color report print step to jcl*/
          end

        else

          if (PT03T19.TARJCL[PT03WIXT] == "//*** HYPERCHANNEL ***")
            if (PT03M009.PT03MHYP == "Y")
              PT0309Q(); /* run hyperchannel job*/
            end

          else
            if (PT03T19.TARTYPE[PT03WIXT] == "P") /* Parameters statement*/


            /* ------------------------------------------------------------*/
              /* Format the variable parameters entered by the user.*/

            /* ------------------------------------------------------------*/

              set PT03W02 empty; /* Parameters work area*/

              PT03W02.PT03MPRM = "R";
              PT03W00.PT03WDAT = PT03M009.PT03MPDT;
              PT03W02.PT03WYY = PT03W00.PT03WYY;
              PT03W02.PT03WMM = PT03W00.PT03WMM;
              PT03W02.PT03WDD = PT03W00.PT03WDD;
              PT03W02.PT03MDDT = PT03M009.PT03MDDT;
              PT03W02.PT03MSCD = PT03M009.PT03MSCD;
              PT03W02.PT03MSYR = PT03M009.PT03MSYR;
              PT03W02.PT03MIND = PT03M009.PT03MIND;
              PT03W02.PT03MGEN = PT03M009.PT03MGEN;
              PT03W02.PT03MCAT = PT03M009.PT03MCAT;

              TA6REC.TARJCL[TA6INDEX] = PT03W02.TARJCL; /* Parameters*/
              TA6REC.TARTYPE[TA6INDEX] = " ";

              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

            else

              TA6REC.TARJCL[TA6INDEX] = PT03T19.TARJCL[PT03WIXT];
                                   /* JCL*/
              TA6REC.TARTYPE[TA6INDEX] = PT03T19.TARTYPE[PT03WIXT];
                                   /* Type*/

              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

            end
          end
        end
      end
    end


      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

    if (PT03T19.TARJCL[PT03WIXT] == "/*EOF") /* End of table*/
      TA6REC.TARJCL[TA6INDEX] = "//*    ";
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT03W00.PT03WIXT = PT03W00.PT03WIXT + 1; /* Input table index*/

    end

  end

end // end PT03098

// Process valid prod  request
Function PT0309E()
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T9E.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T9E.TARTYPE[PT03WIDX]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T9E.TARJCL[PT03WIDX] == "/*EOF")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT0309E

// Process valid test  request
Function PT0309Q()
  PT03W00.PT03WIDX = 1;

  while (PT03W00.PT03WIDX > 0) /* ; Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PT03T9Q.TARJCL[PT03WIDX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT03T9Q.TARTYPE[PT03WIDX]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT03W00.PT03WIDX = PT03W00.PT03WIDX + 1; /* Input table index*/
    if (PT03T9Q.TARJCL[PT03WIDX] == "/*EOF")
      PT03W00.PT03WIDX = 0; /* force end of file*/
    end
  end

end // end PT0309Q

// Report Request Menu
Function PT03990()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT03991(); /* Format and display the map*/

  PT03992(); /* Check attention identifier*/

  PT03993(); /* Reset fields to normal intensity*/

  PT03994(); /* Verify the data that was entered*/

  PT03995(); /* Process valid input request*/


end // end PT03990

// Format and display the map
Function PT03991()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment the program is*/
   /* executing in, development or production*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)         
  else
    converseLib.validationFailed(112); /* Error encountered with call*/
  end

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, format the map output area.*/
    /* ------------------------------------------------------------*/

    set PT03M099 initial; /* M099 input/output*/

    PT03W00.PT03WIXM = 1; /* Initialize map index*/

    while (PT03W00.PT03WIXM <= PT03W00.PT03WIXL) /* Until end of array*/

      PT03M099.PT03MSEL[PT03WIXM] = PT03W00.PT03MSEL[PT03WIXM];

      PT03W00.PT03WIXM = PT03W00.PT03WIXM + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PT03M099.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT03M099.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PT03M099.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT03M099.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT03M099.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT03M099 alarm; /* Indicate sound alarm*/

  end

  set PT03M099.PT03MSEL[8] protect; /* Disable the option of Ship to Date*/

  converse PT03M099 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PT03M099.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PT03M099.CAITEM; /* Application data*/


end // end PT03991

// Check attention identifier
Function PT03992()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PT03M099 initial; /* M099 input/output*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    PT03S99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSPT001(); /* Exit to another application*/

      set PT03M099.CATOAP cursor, bold; /* Highlight*/

    else

      PTWREC.XXXMODID = "992"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    PT03S99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to Production*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PTSC    "; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PT0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* TO application*/
    end

    XSPT001(); /* Exit to another application*/

    COMMAREA.CATOAP = " "; /* Clear TO application*/

    PT03S99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "992"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    PT03S99(); /* Exit to display map*/

  end


end // end PT03992

// Reset highlighted fields
Function PT03993()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  PT03W00.PT03WIXM = 1; /* Initialize index*/

  while (PT03W00.PT03WIXM <= PT03W00.PT03WIXL) /* Until all lines are reset*/

    set PT03M099.PT03MSEL[PT03WIXM] initialAttributes; /* Reset select field*/

    PT03W00.PT03WIXM = PT03W00.PT03WIXM + 1; /* Increment line index*/

  end

  set PT03M099.CATOAP initialAttributes; /* TO application*/
  set PT03M099.CAITEM initialAttributes; /* Application data*/


end // end PT03993

// Verify the entered data
Function PT03994()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PTWREC.XXXMODID = "994"; /* Module identification*/
    set PT03M099.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Check for proper select tag.*/
   /* ------------------------------------------------------------*/

  PT03W00.PT03WIXM = PT03W00.PT03WIXL; /* Initialize line index*/

  while (PT03W00.PT03WIXM > 0) /* Until all lines are verified*/

    /* ------------------------------------------------------------*/
     /* Indicate an error if the line was not selected properly.*/
    /* ------------------------------------------------------------*/

    if (PT03M099.PT03MSEL[PT03WIXM] != PT03W00.PT03MSEL[PT03WIXM]
     && PT03M099.PT03MSEL[PT03WIXM] != " " /* Line was selected*/
     && PT03M099.PT03MSEL[PT03WIXM] != "S") /* and not with an "S"*/

      PTWREC.XXXMODID = "994"; /* Module identification*/
      set PT03M099.PT03MSEL[PT03WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(41); /* Only "S" is valid*/

    end

    PT03W00.PT03WIXM = PT03W00.PT03WIXM - 1; /* Decrement line number*/

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PT03S99(); /* Exit to display map*/
  end


end // end PT03994

// Process valid input request
Function PT03995()
   /* ------------------------------------------------------------*/
   /* Save the selections in the working storage array.*/
   /* ------------------------------------------------------------*/

  move PT03M099.PT03MSEL to PT03W00.PT03MSEL[1] for all; /* Menu selections*/

   /* ------------------------------------------------------------*/
   /* If specify destination selected, indicate to subroutine to*/
   /* display output destination, but, do not submit any JCL.*/
   /* ------------------------------------------------------------*/

  if (PT03W00.PT03MSEL[1] == "S") /* Specify destination selected*/
    TA6REC.TA6SUBSW = "N"; /* Indicate do not submit JCL*/
  end


end // end PT03995

// date validation yymm
Function PT03S02()

   /* ------------------------------------------------------------*/
   /* validate/format from YYMM to CCYYMM.*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* option*/

  TA2REC.TA2GRGDD = 01; /* dd to be validated*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call successful*/
   || TA2REC.TA2RTNCD >= 888)        /* and subroutine completed*/

    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "PT03S02 DATE EDIT YYMM";

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    PTWREC.XXXMODID = "S02"; /* Module identification*/
    converseLib.validationFailed(10); /* System error occurred*/

    exit stack; /* exit to display map*/

  end


end // end PT03S02

// select 's' dcorp.vparm101
Function PT03S21()
   /* ------------------------------------------------------------*/
   /* obtain default date from dcorp.vparm101*/
   /* ------------------------------------------------------------*/

  XZZREC.XZZQRYID = PT03W02.PT03WPGM; /* program name id*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/
  try
    call "IO1000" ("S ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PT03M002.PT03MPRM = XZZREC.XZZ1CHR1;
      PT03M002.PT03MPDT = XZZREC.XZZINT1;
      PT03M002.PT03MDDT = XZZREC.XZZSINT1;
      PT03M002.PT03MSCD = XZZREC.XZZ2CHR1;
      PT03M002.PT03MSYR = XZZREC.XZZ4CHR2;
      PT03M002.PT03MIND = XZZREC.XZZ1CHR2;
      PT03M002.PT03MVER = XZZREC.XZZ2CHR2;
      PT03W00.PT03WGAC = XZZREC.XZZ4CHR1;
      PT03M002.PT03MGEN = PT03W00.PT03MGEN;
      PT03M002.PT03MCAT = PT03W00.PT03MCAT;
      PT03M002.PT03MHYP = "N";
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "021"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
   /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT03S21

// maint. dcorp.vparm101 'pt4600'
Function PT03S26()

   /* -----------------------------------------------------------;*/
    /* first delete the old row*/
   /* -----------------------------------------------------------;*/
  XZZREC.XZZQRYID = PT03W02.PT03WPGM; /* load program id*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/

  try
    call "IO1000" ("D ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* -----------------------------------------------------------;*/
    /* if delete didnt work bomb on out with ezeflo*/
   /* -----------------------------------------------------------;*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    PTWREC.XXXMODID = "S26"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


   /* -----------------------------------------------------------;*/
    /* then add the new row*/
   /* -----------------------------------------------------------;*/

  set XZZREC empty;

  XZZREC.XZZ1CHR1 = "R";
  PT03W00.PT03WDAT = PT03M002.PT03MPDT;
   /* ------------- y2k out begin ----------*/
   /* MOVE 019 TO PT03W00.PT03WCCC;*/
   /* ------------- y2k out end ------------*/
   /* ------------- y2k in  begin ----------*/
  if (PT03W00.PT03WYY > 60)
    PT03W00.PT03WCCC = 019;
  else
    PT03W00.PT03WCCC = 020;
  end
   /* ------------- y2k in end -------------*/
  XZZREC.XZZINT1 = PT03W00.PT03WDAT;
  XZZREC.XZZSINT1 = PT03M002.PT03MDDT;
  XZZREC.XZZ2CHR1 = PT03M002.PT03MSCD;
  XZZREC.XZZ4CHR2 = PT03M002.PT03MSYR;
  XZZREC.XZZ1CHR2 = PT03M002.PT03MIND;
  XZZREC.XZZ2CHR2 = PT03M002.PT03MVER;
  PT03W00.PT03MGEN = PT03M002.PT03MGEN;
  PT03W00.PT03MCAT = PT03M002.PT03MCAT;
  XZZREC.XZZ4CHR1 = PT03W00.PT03WGAC;

  XZZREC.XZZQRYID = PT03W02.PT03WPGM; /* load program id*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/

  try
    call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* -----------------------------------------------------------;*/
    /* if add didnt work bomb on out with ezeflo*/
   /* -----------------------------------------------------------;*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    PTWREC.XXXMODID = "S26"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
    /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


end // end PT03S26

// select 's' dcorp.vparm101
Function PT03S31()
   /* ------------------------------------------------------------*/
   /* obtain default date from dcorp.vparm101*/
   /* ------------------------------------------------------------*/

  set XZZREC empty;
  XZZREC.XZZQRYID = "PT4230"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/
  try
    call "IO1000" ("S ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PT03M003.PT03MPRM = XZZREC.XZZ1CHR1;

      PT03W00.PT03WSESN1 = XZZREC.XZZ2CHR1;
      PT03W00.PT03WSESN2 = XZZREC.XZZ2CHR2;
      PT03W00.PT03WSESN3 = XZZREC.XZZ3CHR1;
      PT03W00.PT03WSESN4 = XZZREC.XZZ3CHR2;
      PT03W00.PT03WSEASON = XZZREC.XZZ8CHR;
      PT03M003.PT03MSY1 = XZZREC.XZZINT1;
      PT03M003.PT03MSY2 = XZZREC.XZZINT2;
      PT03M003.PT03MSY3 = XZZREC.XZZINT3;
      PT03M003.PT03MSY4 = XZZREC.XZZINT4;
      PT03M003.PT03MFAC = XZZREC.XZZ4CHR1;
      PT03M003.PT03MCTY = XZZREC.XZZ4CHR2;
      PT03M003.PT03MDOF = XZZREC.XZZ6CHR;
      PT03M003.PT03MSC1 = PT03W00.PT03WSCODE1;
      PT03M003.PT03MSC2 = PT03W00.PT03WSCODE2;
      PT03M003.PT03MSC3 = PT03W00.PT03WSCODE3;
      PT03M003.PT03MSC4 = PT03W00.PT03WSCODE4;
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "021"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
   /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT03S31

// maint. dcorp.vparm101 'pt4230'
Function PT03S36()

   /* -----------------------------------------------------------;*/
    /* first delete the old row*/
   /* -----------------------------------------------------------;*/
  XZZREC.XZZQRYID = "PT4230"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/

  try
    call "IO1000" ("D ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* -----------------------------------------------------------;*/
    /* if delete didnt work bomb on out with ezeflo*/
   /* -----------------------------------------------------------;*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    PTWREC.XXXMODID = "S36"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


   /* -----------------------------------------------------------;*/
    /* then add the new row*/
   /* -----------------------------------------------------------;*/

  set XZZREC empty;

  XZZREC.XZZ1CHR1 = "R";
  XZZREC.XZZ2CHR1 = PT03W00.PT03WSESN1;
  XZZREC.XZZ2CHR2 = PT03W00.PT03WSESN2;
  XZZREC.XZZ3CHR1 = PT03W00.PT03WSESN3;
  XZZREC.XZZ3CHR2 = PT03W00.PT03WSESN4;
  XZZREC.XZZ8CHR = PT03W00.PT03WSEASON;
  XZZREC.XZZINT1 = PT03M003.PT03MSY1;
  XZZREC.XZZINT2 = PT03M003.PT03MSY2;
  XZZREC.XZZINT3 = PT03M003.PT03MSY3;
  XZZREC.XZZINT4 = PT03M003.PT03MSY4;
  XZZREC.XZZ4CHR1 = PT03M003.PT03MFAC;
  XZZREC.XZZ4CHR2 = PT03M003.PT03MCTY;
  XZZREC.XZZ6CHR = PT03M003.PT03MDOF;

  XZZREC.XZZQRYID = "PT4230"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/

  try
    call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* -----------------------------------------------------------;*/
    /* if add didnt work bomb on out with ezeflo*/
   /* -----------------------------------------------------------;*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    PTWREC.XXXMODID = "S36"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
    /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


end // end PT03S36

// select 's' dprodg.vsygrp01
Function PT03S41()
   /* ------------------------------------------------------------*/
   /* obtain default date from dcorp.vparm101*/
   /* ------------------------------------------------------------*/

  set XZZREC empty;
  XZZREC.XZZQRYID = "PT4430"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/
  try
    call "IO1000" ("S ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PT03M004.PT03MPRM = XZZREC.XZZ1CHR1;
      PT03M004.PT03MDOF = XZZREC.XZZ3CHR2;
      PT03M004.PT03MCTY = XZZREC.XZZ4CHR1;
      PT03M004.PT03MFAC = XZZREC.XZZ4CHR2;
      PT03M004.PT03MSC1 = XZZREC.XZZ2CHR1;
      PT03M004.PT03MSY1 = XZZREC.XZZINT1;
      PT03M004.PT03MPOS = XZZREC.XZZ1CHR2;
      PT03M004.PT03MSCH = XZZREC.XZZ2CHR2;
      PT03M004.PT03MIND = "*";
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        PT03M004.PT03MSC1 = PT03W00.PT03WSCODE1;
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "041"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
   /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT03S41

// maint.dcorp.vparm101 'pt4430'
Function PT03S46()

   /* -----------------------------------------------------------;*/
    /* first delete the old row*/
   /* -----------------------------------------------------------;*/
  XZZREC.XZZQRYID = "PT4430"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/

  try
    call "IO1000" ("D ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* -----------------------------------------------------------;*/
    /* if delete didnt work bomb on out with ezeflo*/
   /* -----------------------------------------------------------;*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    PTWREC.XXXMODID = "S46"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


   /* -----------------------------------------------------------;*/
    /* then add the new row*/
   /* -----------------------------------------------------------;*/

  set XZZREC empty;

  XZZREC.XZZ1CHR1 = "R";
  XZZREC.XZZ3CHR2 = PT03M004.PT03MDOF;
  XZZREC.XZZ4CHR1 = PT03M004.PT03MCTY;
  XZZREC.XZZ4CHR2 = PT03M004.PT03MFAC;
  XZZREC.XZZ2CHR1 = PT03M004.PT03MSC1;
  XZZREC.XZZINT1 = PT03M004.PT03MSY1;
  XZZREC.XZZ1CHR2 = PT03M004.PT03MPOS;
  XZZREC.XZZ2CHR2 = PT03M004.PT03MSCH;

  XZZREC.XZZQRYID = "PT4430"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/

  try
    call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* -----------------------------------------------------------;*/
    /* if add didnt work bomb on out with ezeflo*/
   /* -----------------------------------------------------------;*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    PTWREC.XXXMODID = "S46"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
    /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


end // end PT03S46

// select 's' dprodg.vsygrp01
Function PT03S51()
   /* ------------------------------------------------------------*/
   /* obtain default date from dcorp.vparm101*/
   /* ------------------------------------------------------------*/

  set XZZREC empty;
  XZZREC.XZZQRYID = "PT4300"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/
  try
    call "IO1000" ("S ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PT03M005.PT03MPRM = XZZREC.XZZ1CHR1;
      PT03M005.PT03MLPD = XZZREC.XZZINT1;
      PT03M005.PT03MSCH = XZZREC.XZZ2CHR1;
      PT03M005.PT03MDOF = XZZREC.XZZ3CHR1;
      PT03M005.PT03MCTY = XZZREC.XZZ4CHR1;
      PT03M005.PT03MFAC = XZZREC.XZZ4CHR2;
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "051"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
   /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT03S51

// maint. dcorp.vparm101 'pt4300'
Function PT03S56()

   /* -----------------------------------------------------------;*/
    /* first delete the old row*/
   /* -----------------------------------------------------------;*/
  XZZREC.XZZQRYID = "PT4300"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/

  try
    call "IO1000" ("D ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* -----------------------------------------------------------;*/
    /* if delete didnt work bomb on out with ezeflo*/
   /* -----------------------------------------------------------;*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    PTWREC.XXXMODID = "S56"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


   /* -----------------------------------------------------------;*/
    /* then add the new row*/
   /* -----------------------------------------------------------;*/

  set XZZREC empty;

  XZZREC.XZZ1CHR1 = "R";
  XZZREC.XZZINT1 = PT03M005.PT03MLPD;
  XZZREC.XZZ2CHR1 = PT03M005.PT03MSCH;
  XZZREC.XZZ3CHR1 = PT03M005.PT03MDOF;
  XZZREC.XZZ4CHR1 = PT03M005.PT03MCTY;
  XZZREC.XZZ4CHR2 = PT03M005.PT03MFAC;

  XZZREC.XZZQRYID = "PT4300"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/

  try
    call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* -----------------------------------------------------------;*/
    /* if add didnt work bomb on out with ezeflo*/
   /* -----------------------------------------------------------;*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    PTWREC.XXXMODID = "S56"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
    /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


end // end PT03S56

// select 's' dprodg.vsygrp01
Function PT03S61()
   /* ------------------------------------------------------------*/
   /* obtain default date from dcorp.vparm101*/
   /* ------------------------------------------------------------*/

  set XZZREC empty;
  XZZREC.XZZQRYID = "PT4410"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/
  try
    call "IO1000" ("S ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PT03M006.PT03MPRM = XZZREC.XZZ1CHR1;
      PT03M006.PT03MPDT = XZZREC.XZZINT1;
      PT03M006.PT03MDDT = XZZREC.XZZINT2;
      PT03M006.PT03MDPC = XZZREC.XZZSINT2;
      PT03M006.PT03MSCD = XZZREC.XZZ2CHR1;
      PT03M006.PT03MSYR = XZZREC.XZZSINT1;
      PT03M006.PT03MSCH = XZZREC.XZZ2CHR2;
      PT03M006.PT03MDOF = XZZREC.XZZ3CHR1;
      PT03M006.PT03MCTY = XZZREC.XZZ4CHR1;
      PT03M006.PT03MFAC = XZZREC.XZZ4CHR2;
      PT03M006.PT03MXWH = "**";
      PT03M006.PT03MXREF = "  ";
      PT03M006.PT03MOFC = "**";
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "061"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
   /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT03S61

// maint. dcorp.vparm101 'pt4410'
Function PT03S66()

   /* -----------------------------------------------------------;*/
    /* first delete the old row*/
   /* -----------------------------------------------------------;*/
  XZZREC.XZZQRYID = "PT4410"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/

  try
    call "IO1000" ("D ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* -----------------------------------------------------------;*/
    /* if delete didnt work bomb on out with ezeflo*/
   /* -----------------------------------------------------------;*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    PTWREC.XXXMODID = "S66"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


   /* -----------------------------------------------------------;*/
    /* then add the new row*/
   /* -----------------------------------------------------------;*/

  set XZZREC empty;

  XZZREC.XZZ1CHR1 = "R";
  XZZREC.XZZINT1 = PT03M006.PT03MPDT;
  XZZREC.XZZINT2 = PT03M006.PT03MDDT;
  XZZREC.XZZSINT2 = PT03M006.PT03MDPC;
  XZZREC.XZZ2CHR1 = PT03M006.PT03MSCD;
  XZZREC.XZZSINT1 = PT03M006.PT03MSYR;
  XZZREC.XZZ2CHR2 = PT03M006.PT03MSCH;
  XZZREC.XZZ3CHR1 = PT03M006.PT03MDOF;
  XZZREC.XZZ4CHR1 = PT03M006.PT03MCTY;
  XZZREC.XZZ4CHR2 = PT03M006.PT03MFAC;

  XZZREC.XZZQRYID = "PT4410"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/

  try
    call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* -----------------------------------------------------------;*/
    /* if add didnt work bomb on out with ezeflo*/
   /* -----------------------------------------------------------;*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    PTWREC.XXXMODID = "S66"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
    /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


end // end PT03S66

// select 's' dprodg.vsygrp01
Function PT03S71()
   /* ------------------------------------------------------------*/
   /* we will always move ***** to the fields on this report*/
   /* ------------------------------------------------------------*/


  PT03M007.PT03MSCH = "**";
  PT03M007.PT03MFAC = "****";
  PT03M007.PT03MSTY = "******";
  PT03M007.PT03MCLR = "***";
  PT03M007.PT03MORD = "**";
  PT03M007.PT03MSEN = "**";
  PT03M007.PT03MYER = "****";
end // end PT03S71

// select 's' dprodg.vsyclr01
Function PT03S72()
   /* ------------------------------------------------------------*/
   /* obtain style number dprodg.vsyclr01*/
   /* ------------------------------------------------------------*/


  PG2REC.XGPCD = "03";

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "S72"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(41); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DPRODG.VSYCLR01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT03S72

// select 's' dprodg.vsyclr01
Function PT03S73()
   /* ------------------------------------------------------------*/
   /* obtain style number dprodg.vsyclr01*/
   /* ------------------------------------------------------------*/


  PG2REC.XGPCD = "03";

  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      XZZREC.XZZINT2 = SQLCA.VAGen_SQLCODE;

      try
        call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
      end /* Select set*/

      SQLCA.VAGen_SQLCODE = XZZREC.XZZINT2;

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "S73"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(41); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DPRODG.VSYCLR01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT03S73

// build inital screen
Function PT03S81()
   /* ------------------------------------------------------------*/
   /* Load inital screen*/
   /* ------------------------------------------------------------*/

  PT03M008.PT03MSC1 = "**";
  PT03M008.PT03MSY1 = "****";
  PT03M008.PT03MDOF = "***";
  PT03M008.PT03MCTY = "****";
  PT03M008.PT03MFAC = "****";
  PT03M008.PT03MSTY = "******";
  PT03M008.PT03MCLR = "***";
  PT03M008.PT03MDIM = "**";
  return;

end // end PT03S81

// select 's' dprodg.vsyclr01
Function PT03S82()
   /* ------------------------------------------------------------*/
   /* obtain style number dprodg.vsyclr01*/
   /* ------------------------------------------------------------*/


   /* MOVE COMMAREA.XGPCD TO PG2REC.XGPCD;*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "S82"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(41); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DPRODG.VSYCLR01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT03S82

// select 's' dprodg.vsyclr01
Function PT03S83()
   /* ------------------------------------------------------------*/
   /* obtain style number dprodg.vsyclr01*/
   /* ------------------------------------------------------------*/


   /* MOVE COMMAREA.XGPCD TO PG2REC.XGPCD;*/

  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select next*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      XZZREC.XZZINT2 = SQLCA.VAGen_SQLCODE;

      try
        call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
      end /* Close set*/

      SQLCA.VAGen_SQLCODE = XZZREC.XZZINT2;

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "S83"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(41); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DPRODG.VSYCLR01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT03S83

// select 's' dcorp.vparm101
Function PT03S91()
   /* ------------------------------------------------------------*/
   /* obtain default date from dcorp.vparm101*/
   /* ------------------------------------------------------------*/

  XZZREC.XZZQRYID = PT03W02.PT03WPGM; /* program name id*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/
  try
    call "IO1000" ("S ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PT03M009.PT03MPRM = XZZREC.XZZ1CHR1;
      PT03M009.PT03MPDT = XZZREC.XZZINT1;
      PT03M009.PT03MDDT = XZZREC.XZZSINT1;
      PT03M009.PT03MSCD = XZZREC.XZZ2CHR1;
      PT03M009.PT03MSYR = XZZREC.XZZ4CHR2;
      PT03M009.PT03MIND = XZZREC.XZZ1CHR2;
      PT03W00.PT03WGAC = XZZREC.XZZ4CHR1;
      PT03M009.PT03MGEN = PT03W00.PT03MGEN;
      PT03M009.PT03MCAT = PT03W00.PT03MCAT;
      PT03M009.PT03MHYP = "N";
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "021"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
   /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT03S91

// maint. dcorp.vparm101 'pt4600'
Function PT03S96()

   /* -----------------------------------------------------------;*/
    /* first delete the old row*/
   /* -----------------------------------------------------------;*/
  XZZREC.XZZQRYID = PT03W02.PT03WPGM; /* load program id*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/

  try
    call "IO1000" ("D ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* -----------------------------------------------------------;*/
    /* if delete didnt work bomb on out with ezeflo*/
   /* -----------------------------------------------------------;*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    PTWREC.XXXMODID = "S96"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


   /* -----------------------------------------------------------;*/
    /* then add the new row*/
   /* -----------------------------------------------------------;*/

  set XZZREC empty;

  XZZREC.XZZ1CHR1 = "R";
  PT03W00.PT03WDAT = PT03M009.PT03MPDT;

   /* ------------- y2k out begin --------------*/
   /* MOVE 019 TO PT03W00.PT03WCCC;*/
   /* ------------- y2k out end ----------------*/

   /* ------------- y2k in  begin --------------*/
  if (PT03W00.PT03WYY > 60)
    PT03W00.PT03WCCC = 019;
  else
    PT03W00.PT03WCCC = 020;
  end

   /* ------------- y2k in end------------------*/
  XZZREC.XZZINT1 = PT03W00.PT03WDAT;
  XZZREC.XZZSINT1 = PT03M009.PT03MDDT;
  XZZREC.XZZ2CHR1 = PT03M009.PT03MSCD;
  XZZREC.XZZ4CHR2 = PT03M009.PT03MSYR;
  XZZREC.XZZ1CHR2 = PT03M009.PT03MIND;
  PT03W00.PT03MGEN = PT03M009.PT03MGEN;
  PT03W00.PT03MCAT = PT03M009.PT03MCAT;
  XZZREC.XZZ4CHR1 = PT03W00.PT03WGAC;

  XZZREC.XZZQRYID = PT03W02.PT03WPGM; /* load program id*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/

  try
    call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* -----------------------------------------------------------;*/
    /* if add didnt work bomb on out with ezeflo*/
   /* -----------------------------------------------------------;*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    PTWREC.XXXMODID = "S96"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
    /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


end // end PT03S96

// Clear selections and exit
Function PT03S99()
   /* ------------------------------------------------------------*/
   /* Reset any pending selections in working storage.*/
   /* ------------------------------------------------------------*/

  PT03W00.PT03WIXM = 1; /* Initialize map index*/

  while (PT03W00.PT03WIXM <= PT03W00.PT03WIXL) /* Until end of array*/

    if (PT03W00.PT03MSEL[PT03WIXM] == "S") /* Entry is selected*/
      PT03W00.PT03MSEL[PT03WIXM] = " "; /* Reset entry*/
    end

    PT03W00.PT03WIXM = PT03W00.PT03WIXM + 1; /* Increment index*/

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the selection menu map.*/
   /* ------------------------------------------------------------*/

  exit stack; /* Exit to display map*/


end // end PT03S99

//*** RECORD=PT03W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PT03W00 type basicRecord
  10 PT03WERF PT03WERF ; 
  10 PT03WFOR PT03WFOR ; 
  10 PT03WJOB PT03WJOB ; 
  10 PT03MSEL PT03MSEL [9] ; 
  10 PT03WDT3 PT03WDT3 ; 
    15 PT03WDT1 PT03WDT1 ; 
      20 PT03WDCY PT03WDCY ; 
        25 PT03WCC PT03WCC ; 
        25 PT03WYR PT03WYR ; 
      20 PT03WDMM PT03WDMM ; 
    15 PT03WDT2 PT03WDT2 ; 
  10 PT03WRD2 PT03WRD2 ; 
  10 PT03WRD3 PT03WRD3 ; 
  10 PT03WRD4 PT03WRD4 ; 
  10 PT03WRD5 PT03WRD5 ; 
  10 PT03WRD6 PT03WRD6 ; 
  10 PT03WRD7 PT03WRD7 ; 
  10 PT03WRD8 PT03WRD8 ; 
  10 PT03WIXL PT03WIXL ; 
  10 PT03WIXM PT03WIXM ; 
  10 PT03WIDX PT03WIDX ; 
  10 PT03WIX2 PT03WIX2 ; 
  10 PT03WIXT PT03WIXT ; 
  10 PT03WSWX PT03WSWX ; 
  10 PT03WGAC PT03WGAC ; 
    15 PT03MGEN PT03MGEN ; 
    15 PT03MCAT PT03MCAT ; 
  10 PT03WDAT PT03WDAT ; 
    15 PT03WCCC PT03WCCC ; 
    15 PT03WYY PT03WYY ; 
    15 PT03WMM PT03WMM ; 
    15 PT03WDD PT03WDD ; 
  10 PT03WSEN PT03WSEN ; 
    15 PT03WSE1 PT03WSE1 ; 
    15 PT03WSE2 PT03WSE2 ; 
  10 PT03WTEMP PT03WTEMP ; 
  10 PT03WTEMP1 PT03WTEMP1 ; 
  10 PT03WSEASON PT03WSEASON ; 
    15 PT03WSCODE1 PT03WSCODE1 ; 
    15 PT03WSCODE2 PT03WSCODE2 ; 
    15 PT03WSCODE3 PT03WSCODE3 ; 
    15 PT03WSCODE4 PT03WSCODE4 ; 
  10 PT03WSESN1 PT03WSESN1 ; 
    15 PT03WSESNCD1 PT03WSESNCD1 ; 
    15 PT03WSESNYR1 PT03WSESNYR1 ; 
  10 PT03WSESN2 PT03WSESN2 ; 
    15 PT03WSESNCD2 PT03WSESNCD2 ; 
    15 PT03WSESNYR2 PT03WSESNYR2 ; 
  10 PT03WSESN3 PT03WSESN3 ; 
    15 PT03WSESNCD3 PT03WSESNCD3 ; 
    15 PT03WSESNYR3 PT03WSESNYR3 ; 
  10 PT03WSESN4 PT03WSESN4 ; 
    15 PT03WSESNCD4 PT03WSESNCD4 ; 
    15 PT03WSESNYR4 PT03WSESNYR4 ; 
  10 PT03WCOL PT03WCOL ; 
end // end PT03W00

//*** RECORD=PT03W01 ****
// ------------------------------------------------------------
// Job and form identification variables in the JCL statements.
// ------------------------------------------------------------
// ***********************
Record PT03W01 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(4) ; 
    10 PT03W1JO PT03W1JO ; 
      15 PT03WRFO PT03WRFO ; 
    10 * char(3) ; 
    10 PT03WRFR PT03WRFR ; 
    10 * char(3) ; 
    10 PT03W3PR PT03W3PR ; 
    10 * char(1) ; 
    10 PT03W2PR PT03W2PR ; 
    10 * char(9) ; 
    10 PT03W4FI PT03W4FI ; 
    10 * char(50) ; 
  5 TARTYPE TARTYPE ; 
end // end PT03W01

//*** RECORD=PT03W02 ****
// ------------------------------------------------------------
// Parameters for pt???? - delivery analysis report
// ------------------------------------------------------------
// ***********************
Record PT03W02 type basicRecord
  5 TARJCL TARJCL ; 
    10 PT03MPRM PT03MPRM ; 
    10 PT03MPDT PT03MPDT ; 
      15 PT03WMM PT03WMM ; 
      15 PT03WDD PT03WDD ; 
      15 PT03WYY PT03WYY ; 
    10 PT03MDDT PT03MDDT ; 
    10 PT03MSCD PT03MSCD ; 
    10 PT03MSYR PT03MSYR ; 
    10 PT03MIND PT03MIND ; 
    10 PT03MGEN PT03MGEN ; 
    10 PT03MCAT PT03MCAT ; 
    10 PT03MVER PT03MVER ; 
    10 PT03WPGM PT03WPGM ; 
    10 PT03MPD2 PT03MPD2 ; 
      15 PT03WMM2 PT03WMM2 ; 
      15 PT03WDD2 PT03WDD2 ; 
      15 PT03WYY2 PT03WYY2 ; 
    10 PT03MDD2 PT03MDD2 ; 
    10 PT03MSC2 PT03MSC2 ; 
    10 PT03MSY2 PT03MSY2 ; 
    10 PT03MIN2 PT03MIN2 ; 
    10 PT03MGE2 PT03MGE2 ; 
    10 PT03MCA2 PT03MCA2 ; 
    10 PT03MVE2 PT03MVE2 ; 
    10 * char(29) ; 
  5 PT03WOUT PT03WOUT ; 
    10 PT03WOT1 PT03WOT1 ; 
    10 XURCOPY XURCOPY ; 
    10 PT03WOT2 PT03WOT2 ; 
    10 * char(35) ; 
end // end PT03W02

//*** RECORD=PT03W03 ****
// ------------------------------------------------------------
// Parameters for pt4231 - factory performance report
// ------------------------------------------------------------
// ***********************
Record PT03W03 type basicRecord
  5 TARJCL TARJCL ; 
    10 PT03MPRM PT03MPRM ; 
    10 PT03MSY1 PT03MSY1 ; 
    10 PT03MSY2 PT03MSY2 ; 
    10 PT03MSY3 PT03MSY3 ; 
    10 PT03MSY4 PT03MSY4 ; 
    10 PT03MDOF PT03MDOF ; 
    10 PT03MCTY PT03MCTY ; 
    10 PT03MFAC PT03MFAC ; 
    10 * char(60) ; 
  5 PT03WOUT PT03WOUT ; 
    10 PT03WOT1 PT03WOT1 ; 
    10 XURCOPY XURCOPY ; 
    10 PT03WOT2 PT03WOT2 ; 
    10 * char(35) ; 
end // end PT03W03

//*** RECORD=PT03W04 ****
// ------------------------------------------------------------
// Parameters for pt4431 - irregular/overrun report
// ------------------------------------------------------------
// ***********************
Record PT03W04 type basicRecord
  5 TARJCL TARJCL ; 
    10 PT03MFAC PT03MFAC ; 
    10 PT03MSY1 PT03MSY1 ; 
      15 PT03WSN1 PT03WSN1 ; 
      15 PT03WSN2 PT03WSN2 ; 
    10 PT03WSYR PT03WSYR ; 
    10 PT03MSCH PT03MSCH ; 
    10 PT03MPOS PT03MPOS ; 
    10 PT03MDOF PT03MDOF ; 
    10 PT03MCTY PT03MCTY ; 
    10 PT03MIND PT03MIND ; 
    10 PT03MPRM PT03MPRM ; 
    10 * char(60) ; 
  5 PT03WOUT PT03WOUT ; 
    10 PT03WOT1 PT03WOT1 ; 
    10 XURCOPY XURCOPY ; 
    10 PT03WOT2 PT03WOT2 ; 
    10 * char(35) ; 
end // end PT03W04

//*** RECORD=PT03W05 ****
// ------------------------------------------------------------
// Parameters for pt4301 - late production summary report
// ------------------------------------------------------------
// ***********************
Record PT03W05 type basicRecord
  5 TARJCL TARJCL ; 
    10 PT03MPRM PT03MPRM ; 
    10 PT03MLPD PT03MLPD ; 
    10 PT03MSCH PT03MSCH ; 
    10 PT03MFAC PT03MFAC ; 
    10 PT03MCTY PT03MCTY ; 
    10 PT03MDOF PT03MDOF ; 
    10 * char(58) ; 
  5 PT03WOUT PT03WOUT ; 
    10 PT03WOT1 PT03WOT1 ; 
    10 XURCOPY XURCOPY ; 
    10 PT03WOT2 PT03WOT2 ; 
    10 * char(35) ; 
end // end PT03W05

//*** RECORD=PT03W06 ****
// ------------------------------------------------------------
// Parameters for pt4411 - production expedite extract  pt441d
// Parameters for pt4421 - production expedite report   pt442d
// ------------------------------------------------------------
// ***********************
Record PT03W06 type basicRecord
  5 TARJCL TARJCL ; 
    10 PT03MPRM PT03MPRM ; 
    10 PT03MPDT PT03MPDT ; 
    10 PT03MDDT PT03MDDT ; 
    10 PT03MSCD PT03MSCD ; 
    10 PT03MSYR PT03MSYR ; 
    10 PT03MSNM PT03MSNM ; 
    10 PT03MDPC PT03MDPC ; 
    10 PT03MSCH PT03MSCH ; 
    10 PT03MXLN PT03MXLN ; 
    10 PT03MFAC PT03MFAC ; 
    10 PT03MCTY PT03MCTY ; 
    10 PT03MDOF PT03MDOF ; 
    10 PT03MXWH PT03MXWH ; 
    10 PT03MXREF PT03MXREF ; 
    10 PT03MOFC PT03MOFC ; 
    10 * char(14) ; 
  5 PT03WOUT PT03WOUT ; 
    10 PT03WOT1 PT03WOT1 ; 
    10 XURCOPY XURCOPY ; 
    10 PT03WOT2 PT03WOT2 ; 
    10 * char(35) ; 
end // end PT03W06

//*** RECORD=PT03W07 ****
// ------------------------------------------------------------
// Parameters for pt4301 - late production summary report
// ------------------------------------------------------------
// ***********************
Record PT03W07 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(80) ; 
  5 PT03WOUT PT03WOUT ; 
    10 PT03WOT1 PT03WOT1 ; 
    10 XURCOPY XURCOPY ; 
    10 PT03WOT2 PT03WOT2 ; 
    10 * char(35) ; 
end // end PT03W07

//*** RECORD=PT03W08 ****
// ------------------------------------------------------------
// Parameters for pt4721 - apparel shipments to date report
// ------------------------------------------------------------
// ***********************
Record PT03W08 type basicRecord
  5 TARJCL TARJCL ; 
    10 PT03MSY1 PT03MSY1 ; 
      15 PT03WSN1 PT03WSN1 ; 
      15 PT03WSN2 PT03WSN2 ; 
    10 PT03WSCC PT03WSCC ; 
    10 PT03WSYR PT03WSYR ; 
    10 PT03MFAC PT03MFAC ; 
    10 PT03MCTY PT03MCTY ; 
    10 PT03MDOF PT03MDOF ; 
    10 PT03MSTY PT03MSTY ; 
    10 PT03MCLR PT03MCLR ; 
    10 PT03MDIM PT03MDIM ; 
    10 * char(50) ; 
    10 PT03WFLG PT03WFLG ; 
  5 PT03WOUT PT03WOUT ; 
    10 PT03WOT1 PT03WOT1 ; 
    10 XURCOPY XURCOPY ; 
    10 PT03WOT2 PT03WOT2 ; 
    10 * char(35) ; 
end // end PT03W08

//*** RECORD=PT03W2A ****
// ------------------------------------------------------------
// Parameters for pt4721 - aprl shipments to date report
// ------------------------------------------------------------
// ***********************
Record PT03W2A type basicRecord
  5 PT03WJC1 PT03WJC1 ; 
    10 PT03WPR1 PT03WPR1 ; 
    10 PT03WSCH PT03WSCH ; 
    10 PT03WSF1 PT03WSF1 ; 
    10 PT03WFL1 PT03WFL1 ; 
  5 PT03WJC2 PT03WJC2 ; 
    10 PT03WPR2 PT03WPR2 ; 
    10 PT03MFAC PT03MFAC ; 
    10 PT03WSF2 PT03WSF2 ; 
    10 PT03WFL2 PT03WFL2 ; 
  5 PT03WJC3 PT03WJC3 ; 
    10 PT03WPR3 PT03WPR3 ; 
    10 PT03MSTY PT03MSTY ; 
    10 PT03WSF3 PT03WSF3 ; 
    10 PT03WFL3 PT03WFL3 ; 
  5 PT03WJC4 PT03WJC4 ; 
    10 PT03WPR4 PT03WPR4 ; 
    10 PT03MCLR PT03MCLR ; 
    10 PT03WSF4 PT03WSF4 ; 
    10 PT03WFL4 PT03WFL4 ; 
  5 PT03WJC5 PT03WJC5 ; 
    10 PT03WPR5 PT03WPR5 ; 
    10 PT03MORD PT03MORD ; 
    10 PT03WSF5 PT03WSF5 ; 
    10 PT03WFL5 PT03WFL5 ; 
  5 PT03WJC6 PT03WJC6 ; 
    10 PT03WPR6 PT03WPR6 ; 
    10 PT03MSEN PT03MSEN ; 
    10 PT03WSF6 PT03WSF6 ; 
    10 PT03WFL6 PT03WFL6 ; 
  5 PT03WJC7 PT03WJC7 ; 
    10 PT03WPR7 PT03WPR7 ; 
    10 PT03MCTY PT03MCTY ; 
    10 PT03WSF7 PT03WSF7 ; 
    10 PT03WFL7 PT03WFL7 ; 
  5 PT03WJC8 PT03WJC8 ; 
    10 PT03WPR8 PT03WPR8 ; 
    10 PT03MDIM PT03MDIM ; 
    10 PT03WSF8 PT03WSF8 ; 
    10 PT03WFL8 PT03WFL8 ; 
  5 PT03WJC9 PT03WJC9 ; 
    10 PT03WPR9 PT03WPR9 ; 
    10 PT03WUID PT03WUID ; 
    10 PT03WFL9 PT03WFL9 ; 
end // end PT03W2A

// season/year field
DataItem PT03MCA2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03MCAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color
DataItem PT03MCLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// country code
DataItem PT03MCTY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03MDD2 char(4)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// demand date
DataItem PT03MDDT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dimension
DataItem PT03MDIM char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// domestic/offshore
DataItem PT03MDOF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// additional demand percent
DataItem PT03MDPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory code
DataItem PT03MFAC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season/year field
DataItem PT03MGE2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03MGEN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season/year field
DataItem PT03MIN2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// print indicator
DataItem PT03MIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last as of date
DataItem PT03MLPD char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03MOFC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order type
DataItem PT03MORD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03MPD2 char(6)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// production date
DataItem PT03MPDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po-status
DataItem PT03MPOS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update parms flag
DataItem PT03MPRM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03MSC2 char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// season code
DataItem PT03MSCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// scheduler code
DataItem PT03MSCH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Menu selection code
DataItem PT03MSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// seson code
DataItem PT03MSEN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season name
DataItem PT03MSNM char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style
DataItem PT03MSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season/year code
DataItem PT03MSY1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season/year field
DataItem PT03MSY2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season/year field
DataItem PT03MSY3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season/year field
DataItem PT03MSY4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season year
DataItem PT03MSYR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season/year field
DataItem PT03MVE2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// print indicator
DataItem PT03MVER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// scheduler last name
DataItem PT03MXLN char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory code
DataItem PT03MXREF char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03MXWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JOB job identification
DataItem PT03W1JO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// EXEC procedure identification
DataItem PT03W2PR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RUN program identification
DataItem PT03W3PR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PRINTDS file identification
DataItem PT03W4FI char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cc part of date
DataItem PT03WCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WCCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WCOL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WDAT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ccyy part of date
DataItem PT03WDCY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WDD2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// mm part of date
DataItem PT03WDMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ccyymm part of above date
DataItem PT03WDT1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dd     part of above date
DataItem PT03WDT2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ccyymmdd date format
DataItem PT03WDT3 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem PT03WERF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WFL1 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WFL2 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WFL3 char(36)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WFL4 char(39)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WFL5 char(41)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WFL6 char(41)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WFL7 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WFL8 char(39)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WFL9 char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forms code
DataItem PT03WFOR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gender age / category combo
DataItem PT03WGAC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PT03WIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Secondary index for map fields
DataItem PT03WIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Limit for map fields index
DataItem PT03WIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PT03WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for table fields
DataItem PT03WIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WJC1 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WJC2 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WJC3 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WJC4 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WJC5 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WJC6 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WJC7 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WJC8 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WJC9 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job identification
DataItem PT03WJOB char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month work area
DataItem PT03WMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT03WMM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WOT1 char(33)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WOT2 char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WOUT char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WPGM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl prefix 1
DataItem PT03WPR1 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl prefix 2
DataItem PT03WPR2 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl prefix 3
DataItem PT03WPR3 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl prefix 4
DataItem PT03WPR4 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl prefix 5
DataItem PT03WPR5 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl prefix 6
DataItem PT03WPR6 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl prefix 7
DataItem PT03WPR7 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl prefix 4
DataItem PT03WPR8 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl prefix 4
DataItem PT03WPR9 char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request data switch for map 2
DataItem PT03WRD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request data switch for map 3
DataItem PT03WRD3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request data switch for map 4
DataItem PT03WRD4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request data switch for map 5
DataItem PT03WRD5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request data switch for map 6
DataItem PT03WRD6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request data switch for map 7
DataItem PT03WRD7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request data switch for map 8
DataItem PT03WRD8 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report distribution form
DataItem PT03WRFO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report distribution program
DataItem PT03WRFR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season century
DataItem PT03WSCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// scheduler code
DataItem PT03WSCH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WSCODE1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WSCODE2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WSCODE3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WSCODE4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WSE1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WSE2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WSEASON char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO season code
DataItem PT03WSEN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WSESN1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WSESN2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WSESN3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WSESN4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WSESNCD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WSESNCD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WSESNCD3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WSESNCD4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WSESNYR1 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT03WSESNYR2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT03WSESNYR3 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT03WSESNYR4 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// jcl suffix 1
DataItem PT03WSF1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl suffix 2
DataItem PT03WSF2 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl suffix 3
DataItem PT03WSF3 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl suffix 4
DataItem PT03WSF4 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl suffix 5
DataItem PT03WSF5 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl suffix 6
DataItem PT03WSF6 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl suffix 7
DataItem PT03WSF7 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl suffix 4
DataItem PT03WSF8 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WSN1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT03WSN2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Exit requested switch
DataItem PT03WSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season year
DataItem PT03WSYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT03WTEMP num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT03WTEMP1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dimension
DataItem PT03WUID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// yy part of date
DataItem PT03WYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Year work area
DataItem PT03WYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT03WYY2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

