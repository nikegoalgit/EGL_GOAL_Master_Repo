package pt08;
import ab.common.*;
import af.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import da.common.*;
import fy.common.*;
import ku.common.*;
import pc.common.*;
import pg.common.*;
import pt.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PT08 ****
// This application is the add/delete/maintain application for
// delivery analysts in the production tracking system.
// 
// Upon initial entry, the table is read and columns from the
// selected rows are formatted and saved in temporary storage,
// one display page per queue record.
// 
// The records are retrieved from temporary storage one at a
// time, for display to the user.  The user may page forward
// and backward, to view the rows that were selected.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE     NAME       DESCRIPTION OF CHANGE
// --------   ---------  -------------------------------------
// 05/27/97   IDICKI     New application.
// CONTROL   DATE    NAME  DESCRIPTION OF CHANGE
// ------- -------- ------ ------------------------------------
// Y2KFIX  01/12/98 WSQUIR MODIFICATION MADE TO: XP1REC
// PT010   03/23/98 gkamal Make Analyst code enterable.
//         12/09/98 RRENUK Deleting the old entry and adding
//                         the new entry in case of duplicates.
//         07/29/99 GKAMAL CHANGED PT08160 TO AVOID MULTIPLE
//                         ATTEMPTS TO DELETE.
// PT307A  12/21/00 VANNAM SETTING UP APPAREL INVENTORY ANALYST
//                         ROLE IN USA & ALLOW THEM TO TRACK
//                         APPAREL PRODUCTS
// *********************
Program PT08 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PT00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY6REC FY6REC; // record
  PT08W02 PT08W02; // record
  PT08W03 PT08W03; // record
  PTWREC PTWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VDLVAN02 VDLVAN02; // record
  VPRDCU02 VPRDCU02; // record
  VSUSER02 VSUSER02; // record
  VWHTYP01 VWHTYP01; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL {deleteAfterUse = yes}; // table
  use PT08M.PT08M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPT001: XPPT001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Apparel Buy Prototype process.*/
     /* ------------------------------------------------------------*/

    set ERRSQLCA empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA5REC empty; /* Initialize working storage*/
    set PT08W02 empty; /* Initialize working storage*/
    set VDLVAN02 empty; /* Initialize working storage*/
    set PT08W03 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/

    move "L" to PT08W02.XXXSTAT[1] for all; /* Initialize status codes to LAST*/

    set PT08M001 initial; /* Initialize map output area*/

    PT08W03.PTWAPPL = "PT08"; /* Initialize appl ID for this appl*/
    PT08W03.PTWPRCSN = " "; /* Initialize process number to blank*/


    PT08W03.PTWMAP = "1"; /* Indicate map to be displayed*/
    PT08W03.PTWSWR = "Y"; /* Indicate request for data*/
    PT08W03.PTWADDFL = "N"; /* Indicate not an ADD function*/
    PT08W03.PT08W2PS = "N"; /* init sw for pf9 confirm*/

     /* *************************************************************/
     /* ***** this will assign PT08W03.PTWmpmax the value of the *****/
     /* ***** maximum number of rows on the screen.             *****/
     /* *************************************************************/
    move " " to PT08M001.XXXSTAT[1] for all; /* move blanks to array on map*/
    PT08W03.PTWMPMAX = sysVar.arrayIndex; /* EZETST has value of last occurs nbr*/


     /* *************************************************************/
     /* ***** this will assign PT08W03.PTWtsqsz the value of the *****/
     /* ***** length of the TSQ record to be writen. This value *****/
     /* ***** is calculated based on the physical size of each  *****/
     /* ***** row on the page times the number of rows on the   *****/
     /* ***** screen, as calculated above Plus 4(size of size   *****/
     /* ***** field).                                           *****/
     /* *************************************************************/
     /* temp storage length*/
    PT08W03.PTWTSQSZ = 0407;
    PT08W03.PTWSVDAN = PT08M001.PT08DAHD; /* save delivery analyst*/

    goto PT08001; /* Converse delivery analyst maint.*/

    PT08001: PT08001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Delivery Analyst maintenance process.*/
     /* ------------------------------------------------------------*/

    goto PT08001; /* loop thru processes until xsexit*/


  end // end main
end // end PT08

// Choose which map to display
Function PT08001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* GET SYSTEM DATE AND TIME*/

  if (PT08W03.PTWMAP == "1") /* Map 1 was requested*/

    PT08W03.PTWPRCSN = "M001"; /* Indicate map # 1*/
    PT08W03.XXXMAPNM = PT08W03.PTWERLOC; /* Move map name to PT08W03*/
    PT08W03.PTWPRCSN = " "; /* Re-Initialize process name*/

    PT08100(); /* Display map 1*/

  else

    if (PT08W03.PTWMAP == "2") /* Map 2 was requested*/

      PT08W03.PTWPRCSN = "M001"; /* Indicate map # 2*/
      PT08W03.XXXMAPNM = PT08W03.PTWERLOC; /* Move map name to W03*/
      PT08W03.PTWPRCSN = " "; /* Re-Initialize process name*/

      PT08200(); /* Display map 2*/

    else

      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      PT08W03.PTWPRCSN = "001 "; /* Process number*/
      TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
      TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
      TA1REC.TA1MAP = PT08W03.PTWMAP; /* Map name*/
      SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end
                                   /* Error diagnosis routine*/

      XSPF4(); /* Exit to Master Menu*/

    end

  end


end // end PT08001

// Driver process for 100 map
Function PT08100()
   /* *-----------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT08110(); /* Obtain the data to display*/

  PT08120(); /* Format and display the map*/

  PT08130(); /* Check attention identifier*/

  PT08140(); /* Reset fields to normal intensity*/

  PT08150(); /* Verify the entered data*/

  PT08160(); /* Process valid input request*/


end // end PT08100

// Obtain the data to display
Function PT08110()
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* Purge any existing queue in temporary storage.*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 01) /* Update successful*/
    PT08W03.PTWNMO = converseVar.validationMsgNum; /* Information message number*/
    converseLib.validationFailed(0);
  end

  if (PT08W03.PTWSWR != "Y") /* Data was not requested*/
    return; /* Return to previous process*/
  end

  PT08M001.PT08LITL = "DELIVERY ANALYST:";

  PT08111(); /* Purge any temporary storage*/

  PT08112(); /* Select set and open the cursor*/

  if (converseVar.validationMsgNum == 0 /* No errors were found*/
   || converseVar.validationMsgNum == 21)

    PT08W03.PTWSWC = "N"; /* Initialize end of file switch*/
    PT08W03.PTWIXM = 1; /* Initialize display line number*/

    while (PT08W03.PTWSWC == "N") /* Until cursor end of file*/

      PT08113(); /* Obtain data and format page*/

      if (PT08W03.PTWIXM > PT08W03.PTWMPMAX) /* Page is full*/
        PT08114(); /* Add page to temporary storage*/
      end

      if (converseVar.validationMsgNum != 0 /* Errors were found*/
       && converseVar.validationMsgNum != 21)
        PT08W03.PTWSWC = "Y"; /* Force end of file*/
      end

    end

  end

  if (((converseVar.validationMsgNum == 0 /* No errors were found*/
   || converseVar.validationMsgNum == 21) 
   && PT08W03.PTWIXM > 1))                /* and page was formatted*/
    if (PT08W03.PTWIXM <= PT08W03.PTWMPMAX) /* and page was formatted*/
      set VDLVAN02 empty; /* initialize VDLVAN01*/
      VDLVAN02.XXXSTAT = "L"; /* indicate end of data*/
      while (PT08W03.PTWIXM <= PT08W03.PTWMPMAX) /* empty rows with 'L'*/
        PT08W02.PT8GROUP[PTWIXM] = VDLVAN02.DANGROUP;
        PT08W03.PTWIXM = PT08W03.PTWIXM + 1;
      end /* end of "WHILE" loop*/
    end /* end of "IF" statement*/
    PT08114(); /* Add page to temporary storage*/
  end

  if (converseVar.validationMsgNum == 0 /* No errors were found*/
   || converseVar.validationMsgNum == 21)
    PT08115(); /* Close the selected set cursor*/
  end

  if (converseVar.validationMsgNum == 0 /* No errors were found*/
   || converseVar.validationMsgNum == 21)

    PT08W03.PTWTSP = 1; /* Initialize page number*/
    PT08W03.PTWSWR = "N"; /* Request for data completed*/

  end


end // end PT08110

// Purge any temporary storage
Function PT08111()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = PT08W03.PTWAPPL; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PT08W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* temporaryary storage*/
                                  /* ; subroutine*/

  if (sysVar.errorCode != "00000000" /* Error was found*/
   || TA5REC.TA5RTNCD != 0)         

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PT08W03.PTWPRCSN = "111 "; /* Process number*/
    TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Error diagnosis routine*/

  end

  PT08W03.PTWTSP = 0; /* Reset current page number*/
  PT08W03.TA5TSQIX = 0; /* Reset highest page number*/
  TA5REC.TA5TSQIX = 0; /* Reset highest page number*/

  set PT08W02 empty; /* Initialize TSQ record*/
  move "L" to PT08W02.XXXSTAT[1] for all;
                                   /* Initialize Status to Last-Line*/

end // end PT08111

// Select set and open cursor
Function PT08112()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set VDLVAN02 empty; /* initialize*/

  VDLVAN02.PC_DLVR_ANALYST_CD = PT08W03.PTWSVDAN; /* indicate DA*/

  if (PT08W03.PTWSVDAN == "  ")
    try
      call "VDLVAN02" ("S1", SQLCA, VDLVAN02) {isNoRefresh = yes, isExternal = yes};
    end /* Select table*/
  else
    try
      call "VDLVAN02" ("S2", SQLCA, VDLVAN02) {isNoRefresh = yes, isExternal = yes};
    end /* Select table*/
  end

  if (sysVar.errorCode == "00000000") /* If call successful*/
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/

      else

        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/

        converseLib.clearScreen();
         /* Clear screen before redisplay*/

      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      PT08W03.PTWPRCSN = "112 "; /* Process number*/
      TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
      TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
      TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VDLVAN02"; /* Table view name*/
      TA1REC.TA1TBLKE = VDLVAN02.PT8KEY; /* Table key*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

      return; /* Return to previous process*/

    end
  else /* call to VDLVAN02 unsuccessfull*/
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      PT08W03.PTWPRCSN = "112 "; /* Process number*/
      TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
      TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
      TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VDLVAN02"; /* Table view name*/
      TA1REC.TA1TBLKE = VDLVAN02.PT8KEY; /* Table key*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    end
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PT08W03.PTWPRCSN = "112 "; /* Process number*/
    TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "S1 CALL TO VDLVAN02";
    TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Error diagnosis routine*/

    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    return; /* Return to previous process*/
  end


end // end PT08112

// Fetch next row and format
Function PT08113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  if (PT08W03.PTWSVDAN == "  ")
    try
      call "VDLVAN02" ("N1", SQLCA, VDLVAN02) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Fetch next row*/
  else
    try
      call "VDLVAN02" ("N2", SQLCA, VDLVAN02) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Fetch next row*/
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

    PT08W03.PTWSWC = "Y"; /* Indicate end of file*/

    return; /* Return to previous process*/

  end

  if (sysVar.errorCode == "00000000") /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/

      else

        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/

        converseLib.clearScreen();
         /* Clear screen before redisplay*/

      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      PT08W03.PTWPRCSN = "113 "; /* Process number*/
      TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VDLVAN02"; /* Table view name*/

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end /* Error diagnosis*/

      PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

      return; /* Return to previous process*/

    end

  else /* call to VDLVAN02 no-good*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PT08W03.PTWPRCSN = "113 "; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* return function*/
    TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "N1 CALL TO VDLVAN02";
    TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* start over*/

  end

  if (PT08W03.PTWIXM == 1) /* IF this is 1st entry*/
    set PT08W02 empty; /* INITIALIZE TSQ record first*/
    move "L" to PT08W02.XXXSTAT[1] for all; /* Initialize status to 'last-line'*/
  end /* END of "IF" statement*/
  PT08W02.PT8GROUP[PTWIXM] = VDLVAN02.DANGROUP;
  PT08W03.PTWIXM = PT08W03.PTWIXM + 1; /* Increment line index*/


end // end PT08113

// Add page to temporary storage
Function PT08114()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PT08W02.PT08LEN = PT08W03.PTWTSQSZ; /* Temporary storage length*/
  TA5REC.TA5APPID = PT08W03.PTWAPPL; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PT08W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                  /* ;subroutine*/

  if (sysVar.errorCode != "00000000"
   || TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PT08W03.PTWPRCSN = "114 "; /* Process number*/
    TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end

  PT08W03.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

  PT08W03.PTWIXM = 1; /* Reset display line number*/


end // end PT08114

// Close selected set cursor
Function PT08115()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  if (PT08W03.PTWSVDAN == "  ")
    try
      call "VDLVAN02" ("C1", SQLCA, VDLVAN02) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Close table set*/
  else
    try
      call "VDLVAN02" ("C2", SQLCA, VDLVAN02) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Close table set*/
  end

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   || sysVar.errorCode != "00000000")

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PT08W03.PTWPRCSN = "115 "; /* Process number*/
    TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VDLVAN02"; /* Table view name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Error diagnosis routine*/

    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end


end // end PT08115

// Format and display the map
Function PT08120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0 /* Error message to display*/
   || PT08W03.PTWNMO == 01)             /* OR table update successful*/
    set PT08M001 alarm; /* Indicate sound alarm*/
  end

  if (converseVar.validationMsgNum == 0 /* No error message to display*/
   || PT08W03.PTWFIRST == " ")          /* or first time through*/
    if (PT08W03.PTWFIRST == " ") /* First time through*/

      if (COMMAREA.CAITEM > " ") /* Application data exists*/

        PT08M001.CAITEM = COMMAREA.CAITEM; /* Application data*/
        set PT08M001.CAITEM modified; /* Set MDT on*/
        COMMAREA.CAITEM = " "; /* Clear application data*/

      end

    else

      set PT08M001 initial; /* Clear map output area*/
      PT08M001.PT08LITL = "DELIVERY ANALYST:";

    end

    PT08W03.PTWFIRST = "N"; /* turn 'first time through' OFF*/

    PT08M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      PT08121(); /* Format the data on the page*/
    end

    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (PT08W03.PTWNMO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PT08W03.PTWNMO);
      end /* Information message number*/
    end

  end


  PT08W03.PTWNMO = 0; /* Reset information message number*/

  PT08M001.PT08MPFC = "13:ADD";
                                   /* set pfkey literal field to add*/
  PT08M001.PT08MPF5 = "5:PT09"; /* set pfkey literal field PF5*/
  PT08M001.PT08MPF7 = "7:FRWD"; /* set pfkey literal field PF7*/
  PT08M001.PT08MPF8 = "8:BACK"; /* set pfkey literal field PF8*/
  PT08M001.XXXMAPNM = PT08W03.XXXMAPNM; /* Move map name to Map*/
  PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Move Process name to map*/
  if (converseVar.validationMsgNum == 0 || converseVar.validationMsgNum == 21)
    set PT08M001.PT08DAHD cursor;
  end

  converse PT08M001 ;

  PT08W03.PTWPRCSN = " "; /* Clear out Error Process nbr*/

end // end PT08120

// Format the selected data
Function PT08121()
   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the plan sequence data in the map.*/
   /* ------------------------------------------------------------*/

  if (PT08W03.TA5TSQIX == 0) /* No data to display*/

    PT08W03.PTWPRCSN = "121 "; /* Process number*/
    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/
    converseLib.validationFailed(148); /* Indicate no data to display*/

    PT08W03.PTWIXM = 1; /* Initialize Index*/
    while (PT08W03.PTWIXM <= PT08W03.PTWMPMAX)
      set PT08M001.XXXSTAT[PTWIXM] skip, invisible; /* protect unused fields*/
      set PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] skip, invisible;
      set PT08M001.XXXUSER[PTWIXM] skip, invisible;
      set PT08M001.XPRCD[PTWIXM] skip, invisible;
      set PT08M001.XPCCD[PTWIXM] skip, invisible;
      set PT08M001.XPCSDESC[PTWIXM] skip, invisible;
      set PT08M001.PC_WHSE_TYP_CD[PTWIXM] skip, invisible;
      set PT08M001.PC_WHSE_TYP_DESC[PTWIXM] skip, invisible;
      set PT08M001.PC2CUXID[PTWIXM] skip, invisible;
      set PT08M001.PC2SEGAB[PTWIXM] skip, invisible;
      set PT08M001.FY-FLD-OFC-CD[PTWIXM] skip, invisible;
      PT08W03.PTWIXM = PT08W03.PTWIXM + 1;
    end

   /* OVE PT08W03.PTWSVDAN TO PT08M001.PC_DLVR_ANALYST_CD;/**/
    PT08M001.PT08DAHD = PT08W03.PTWSVDAN;
    PT08W03.PTWSVDAN = " ";

    PT08M001.PT08MPGN = 1; /* Current page number*/
    PT08M001.PT08MOFP = 1; /* Highest page nbr*/

    return; /* Return to previous process*/

  end

  if (PT08W03.PTWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/

    if (PT08W03.PTWTSP == 1
     && PT08W03.PT08W-SAVE-PTWTSP > 1
     && PT08W03.PTWNMO == 01)
                                        /* is done on page > 1*/
      PT08W03.PTWTSP = PT08W03.PT08W-SAVE-PTWTSP;
    end

    PT08122(); /* Obtain temporary storage page*/

    PT08W03.PT08W-SAVE-PTWTSP = PT08W03.PTWTSP;

  end

  PT08M001.PT08MPGN = PT08W03.PTWTSP; /* Current page number*/
  PT08M001.PT08MOFP = PT08W03.TA5TSQIX; /* Highest page nbr*/

  PT08M001.PC_DLVR_ANALYST_CD = PT08W03.PTWSVDAN; /* and region to*/

  PT08W03.PTWIXM = 1; /* Initialize line index*/

  while (PT08W03.PTWIXM <= PT08W03.PTWMPMAX) /* Until end of lines*/
    VDLVAN02.DANGROUP = PT08W02.PT8GROUP[PTWIXM];
    if (VDLVAN02.XXXSTAT != "L") /* end of data marker*/
      PT08123(); /* get data from tables*/
      PT08M001.PT08DAHD = PT08W03.PTWSVDAN; /**/
      PT08M001.XXXSTAT[PTWIXM] = VDLVAN02.XXXSTAT; /* move status*/
      PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] = VDLVAN02.PC_DLVR_ANALYST_CD; /**/
  /* SET PT08M001.PC_DLVR_ANALYST_CD(PTWIXM) ;/**/
      PT08M001.XPRCD[PTWIXM] = VDLVAN02.XPRCD; /**/
      PT08M001.XPCCD[PTWIXM] = VDLVAN02.XPCCD; /**/
      PT08M001.PC_WHSE_TYP_CD[PTWIXM] = VDLVAN02.PC_WHSE_TYP_CD; /**/
      PT08M001.PC2CUXID[PTWIXM] = VDLVAN02.PC2CUXID; /**/
      PT08M001.FY-FLD-OFC-CD[PTWIXM] = VDLVAN02.FY-FLD-OFC-CD; /**/
    else
      set PT08M001.XXXSTAT[PTWIXM] skip, invisible; /* protect unused fields*/
      set PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] skip, invisible;
      set PT08M001.XXXUSER[PTWIXM] skip, invisible;
      set PT08M001.XPRCD[PTWIXM] skip, invisible;
      set PT08M001.XPCCD[PTWIXM] skip, invisible;
      set PT08M001.XPCSDESC[PTWIXM] skip, invisible;
      set PT08M001.PC_WHSE_TYP_CD[PTWIXM] skip, invisible;
      set PT08M001.PC_WHSE_TYP_DESC[PTWIXM] skip, invisible;
      set PT08M001.PC2CUXID[PTWIXM] skip, invisible;
      set PT08M001.PC2SEGAB[PTWIXM] skip, invisible;
      set PT08M001.FY-FLD-OFC-CD[PTWIXM] skip, invisible;
    end
    PT08W03.PTWIXM = PT08W03.PTWIXM + 1; /* incriment line number*/
  end


end // end PT08121

// Read temporary storage page
Function PT08122()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PT08W02.PT08LEN = PT08W03.PTWTSQSZ; /* Temporary storage length*/
  TA5REC.TA5APPID = PT08W03.PTWAPPL; /* Application identification*/
  TA5REC.TA5TSQIX = PT08W03.PTWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PT08W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                  /* ;subroutine*/

  if (sysVar.errorCode != "00000000" /* call not-Okay*/
   || TA5REC.TA5RTNCD != 0)          /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PT08W03.PTWPRCSN = "122 "; /* Process number*/
    TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Error diagnosis routine*/

    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PT08122

// Check for existing entries
Function PT08123()
   /* ------------------------------------------------------------*/
   /* This paragraph will get the userid from the vsuser02 table,*/
   /* the category description from the XPCTBL, the warehouse*/
   /* description from the vwhtyp01 table, and the customer cross*/
   /* reference abbreviation from the VPRDCU01 table*/
   /* ------------------------------------------------------------*/

  PT08124(); /* get vsuser desc*/

  PT08125(); /* get category desc from XPCTBL*/

  if (VDLVAN02.PC_WHSE_TYP_CD != "     ")
    if (VDLVAN02.PC_DLVR_ANALYST_CD >= "A1" && 
    VDLVAN02.PC_DLVR_ANALYST_CD <= "A9") /* direct ship analysts*/
      set PT08M001.PC_WHSE_TYP_CD[PTWIXM] cursor, bold; /* \**/
      converseLib.validationFailed(224); /* whse is not valid*/
      return; /* return to previous process*/
    end

    PT08126A(); /* open cursor VWHTYP01*/

    PT08126B(); /* fetch warehouse description*/

    PT08126C(); /* close cursor VWHTYP01*/
  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

  if (VDLVAN02.PC2CUXID != "      ")
    if (VDLVAN02.PC_DLVR_ANALYST_CD >= "B1"
     && VDLVAN02.PC_DLVR_ANALYST_CD <= "B9") /* whse analysts*/
      set PT08M001.PC2CUXID[PTWIXM] cursor, bold; /* \**/
      converseLib.validationFailed(223); /* no drs for apparel analyst*/
      return; /* return to previous process*/
    end /**/
    PT08127A(); /* open cursor VPRDCU02*/
    PT08127B(); /* fetch xref abbreviation from VPRDCU*/

    PT08127C(); /* close cursor VPRDCU02*/
  end /**/

  if (converseVar.validationMsgNum != 0)
    return;
  end

  if (VDLVAN02.FY-FLD-OFC-CD == " ")
    set PT08M001.FY-FLD-OFC-CD cursor, bold;
    converseLib.validationFailed(231);
    return;
  else
    if (((VDLVAN02.PC_DLVR_ANALYST_CD >= "A1" && 
    VDLVAN02.PC_DLVR_ANALYST_CD <= "A9") || 
    (VDLVAN02.PC_DLVR_ANALYST_CD >= "B1" && 
    VDLVAN02.PC_DLVR_ANALYST_CD <= "B9")))
      if (VDLVAN02.FY-FLD-OFC-CD != "**")

      else
        set PT08M001.FY-FLD-OFC-CD cursor, bold;
        converseLib.validationFailed(231);
        return;
      end
    else
      if (VDLVAN02.FY-FLD-OFC-CD == "**")

      else
        set PT08M001.FY-FLD-OFC-CD cursor, bold;
        converseLib.validationFailed(231);
        return;
      end
    end
  end

  if (VDLVAN02.FY-FLD-OFC-CD != " ")
    if (((VDLVAN02.PC_DLVR_ANALYST_CD >= "A1" && 
    VDLVAN02.PC_DLVR_ANALYST_CD <= "A9") || 
    (VDLVAN02.PC_DLVR_ANALYST_CD >= "B1" && 
    VDLVAN02.PC_DLVR_ANALYST_CD <= "B9")))
      if (VDLVAN02.FY-FLD-OFC-CD != "**")
        /* check if liaison office code is in DFCTY.VFDOFC01*/
        set FY6REC empty;
        FY6REC.XGPCD = "03";
        FY6REC.FY6FOCD = VDLVAN02.FY-FLD-OFC-CD;
        PT08128(); /* select unique row from field office*/
                                   /* table*/

        if (SQLCA.VAGen_SQLCODE == 0)
          if (FY6REC.XXXSTAT == "A")
            set PT08M001.FY-FLD-OFC-CD initialAttributes;
          else
            set PT08M001.FY-FLD-OFC-CD cursor, bold;
            converseLib.validationFailed(233); /* inactive lias ofc cd*/
            return;
          end
        else
          set PT08M001.FY-FLD-OFC-CD cursor, bold;
          converseLib.validationFailed(231);
          return;
        end

      end /* end of '**' in field office*/
    end /* end of analyst cd*/
  end /* end of ' ' in field office code*/

end // end PT08123

// Get vsuser description
Function PT08124()
   /* ------------------------------------------------------------*/
   /* 1. get userid from vsuser02 table*/
   /* Select a single row based on keyed data, if return code not*/
   /* okay, this does not exist and is an error.*/
   /* ------------------------------------------------------------*/

  set VSUSER02 empty; /* Initialize record*/

  if (((VDLVAN02.PC_DLVR_ANALYST_CD >= "A1" && 
  VDLVAN02.PC_DLVR_ANALYST_CD <= "A9") || 
  (VDLVAN02.PC_DLVR_ANALYST_CD >= "B1" && 
  VDLVAN02.PC_DLVR_ANALYST_CD <= "B9")))
    VSUSER02.XGPCD = "03"; /* MOVe GPC to VSUSER02*/
  else
    VSUSER02.XGPCD = "02"; /* MOVe GPC to VSUSER02*/
  end

  VSUSER02.PG1SC4CD = VDLVAN02.PC_DLVR_ANALYST_CD; /* analyst code*/
  VSUSER02.PG1FCTCD = "  ";

  try
    call "VSUSER02" ("S ", SQLCA, VSUSER02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  if (sysVar.errorCode == "00000000") /* If call OKAY*/
    if (SQLCA.VAGen_SQLCODE == 000) /* If found*/
      PT08M001.XXXUSER[PTWIXM] = VSUSER02.XXXUSER;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
        set PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] cursor, bold; /* \**/
        converseLib.validationFailed(150); /* userid not found*/
        exit stack; /* return to previous process*/
      end
    end
  end

  if (sysVar.errorCode == "00000000") /* If call OKAY*/
    if (SQLCA.VAGen_SQLCODE != 000) /* If error*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      PT08W03.PTWPRCSN = "124 "; /* Process number*/
      TA1REC.TA1FUNC = "RETN"; /* Return function*/
      TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
      TA1REC.TA1LOC = "LOCATE A SELECTED TABLE ROW";
      TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSUSER02"; /* Table view name*/

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end /* Error*/

      converseLib.validationFailed(10); /* Indicate error occured*/
      PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

      exit stack; /* start over*/
    end
  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PT08W03.PTWPRCSN = "124 "; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* Return function*/
    TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "LOCATE A SELECTED TABLE ROW";
    TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diagnosis*/

    converseLib.validationFailed(10); /* Indicate error occured*/
    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

    exit stack; /* start over*/

  end

end // end PT08124

// Get category desc from XPCTBL
Function PT08125()
   /* ------------------------------------------------------------*/
   /* get category description from xpctbl.*/
   /* If categories = '**', this means all, so move 'ALL' to*/
   /* description. Else, search xpctbl.*/
   /* ------------------------------------------------------------*/

  if (VDLVAN02.XPCCD == "**") /* If all categories*/
    PT08M001.XPCSDESC[PTWIXM] = "ALL         ";
  else
    if (((VDLVAN02.PC_DLVR_ANALYST_CD >= "A1" && 
    VDLVAN02.PC_DLVR_ANALYST_CD <= "A9") || 
    (VDLVAN02.PC_DLVR_ANALYST_CD >= "B1" && 
    VDLVAN02.PC_DLVR_ANALYST_CD <= "B9")))
      set PT08M001.XPCCD[PTWIXM] cursor, bold; /* \**/
      converseLib.validationFailed(225); /* cat cd not found*/
      return; /* return to previous process*/
    else
      if (VDLVAN02.XPCCD in XPCTBL.XPCCD)
        PT08M001.XPCSDESC[PTWIXM] = XPCTBL.XPCSDESC[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0)
        set PT08M001.XPCCD[PTWIXM] cursor, bold; /* \**/
        converseLib.validationFailed(151); /* cat cd not found*/
        return; /* return to previous process*/
      end
    end
  end

end // end PT08125

// Open cursor for VWHTYP01
Function PT08126A()
   /* ------------------------------------------------------------*/
   /* get warehouse type description.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* declare cursor.*/
   /* ------------------------------------------------------------*/
  set VWHTYP01 empty; /* Initialize record*/

  VWHTYP01.PC_WHSE_TYP_CD = VDLVAN02.PC_WHSE_TYP_CD; /* whse ty code*/

  try
    call "VWHTYP01" ("S2", SQLCA, VWHTYP01) {isNoRefresh = yes, isExternal = yes};
  end /* declare curs*/

  if (sysVar.errorCode == "00000000") /* If call OKAY*/
    if (SQLCA.VAGen_SQLCODE != 000) /* If cursor not ok*/
      if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
        converseLib.validationFailed(11);
        TA1REC.TA1FUNC = "POST"; /* terminate function*/
      else /* ELSE(other DB2 error)*/
        converseLib.validationFailed(10);
        TA1REC.TA1FUNC = "RETN"; /* terminate function*/
        converseLib.clearScreen();
         /* clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      PT08W03.PTWPRCSN = "126A"; /* Process number*/
      TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
      TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS   ";
      TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VWHTYP01"; /* Table view name*/

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end /* Error*/

      PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

      exit stack; /* start over*/

    end
  else
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PT08W03.PTWPRCSN = "126A"; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* Return function*/
    TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "S1 CALL TO VWHTYP01        ";
    TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diagnosis*/

    converseLib.validationFailed(10); /* Indicate error occured*/
    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

    exit stack; /* start over*/

  end

end // end PT08126A

// Fetch whse desc from VWHTYP01
Function PT08126B()
   /* ------------------------------------------------------------*/
   /* fetch first row for display*/
   /* ------------------------------------------------------------*/

  try
    call "VWHTYP01" ("N2", SQLCA, VWHTYP01) {isNoRefresh = yes, isExternal = yes};
  end /**/

  if (sysVar.errorCode == "00000000") /* If call OKAY*/
    if (SQLCA.VAGen_SQLCODE == 000) /* If fetch ok*/
      if (VDLVAN02.PC_DLVR_ANALYST_CD >= "B1"
       && VDLVAN02.PC_DLVR_ANALYST_CD <= "B9")
        if ((VWHTYP01.XWHCD == "09" || 
        VWHTYP01.XWHCD == "18" || 
        VWHTYP01.XWHCD == "51"))
          PT08M001.PC_WHSE_TYP_DESC[PTWIXM] = VWHTYP01.PC_WHSE_TYP_DESC;
          return;
        else
          set PT08M001.PC_WHSE_TYP_CD[PTWIXM] cursor, bold; /* \**/
          converseLib.validationFailed(224); /* whse is not valid*/
          return; /* return to previous process*/
        end
      else
        if ((VWHTYP01.XWHCD == "09" || 
        VWHTYP01.XWHCD == "18" || 
        VWHTYP01.XWHCD == "51"))
          set PT08M001.PC_WHSE_TYP_CD[PTWIXM] cursor, bold; /* \**/
          converseLib.validationFailed(224); /* whse is not valid*/
          return; /* return to previous process*/
        else
          PT08M001.PC_WHSE_TYP_DESC[PTWIXM] = VWHTYP01.PC_WHSE_TYP_DESC;
          return;
        end
      end
    end
  end

  if (sysVar.errorCode == "00000000") /* If call OKAY*/
    if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
      set PT08M001.PC_WHSE_TYP_CD[PTWIXM] cursor, bold; /* \**/
      converseLib.validationFailed(36); /* whse is not valid*/
      return; /* return to previous process*/
    end
  end

  if (sysVar.errorCode == "00000000") /* If call OKAY*/
    if (SQLCA.VAGen_SQLCODE != 000) /* If cursor not ok*/
      if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
        converseLib.validationFailed(11);
        TA1REC.TA1FUNC = "POST"; /* terminate function*/
      else /* ELSE(other DB2 error)*/
        converseLib.validationFailed(10);
        TA1REC.TA1FUNC = "RETN"; /* terminate function*/
        converseLib.clearScreen();
         /* clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      PT08W03.PTWPRCSN = "126B"; /* Process number*/
      TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
      TA1REC.TA1LOC = "FETCH FIRST ROW            ";
      TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VWHTYP01"; /* Table view name*/

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end /* Error*/

      PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

      exit stack; /* start over*/

    end
  else
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PT08W03.PTWPRCSN = "126B"; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* Return function*/
    TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "N1 CALL TO VWHTYP01      M ";
    TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
    converseLib.validationFailed(10); /* Indicate error occured*/

    converseLib.clearScreen();

    exit stack; /* start over*/

  end

end // end PT08126B

// Close cursor VWHTYP01
Function PT08126C()
   /* ------------------------------------------------------------*/
   /* close cursor.*/
   /* ------------------------------------------------------------*/

  try
    call "VWHTYP01" ("C2", SQLCA, VWHTYP01) {isNoRefresh = yes, isExternal = yes};
  end /**/

  if (sysVar.errorCode == "00000000" /* If call OKAY*/
   && SQLCA.VAGen_SQLCODE == 000)    /* If cursor close OK*/
    /* next sentence*/
  else
    TA1REC.TA1MAP = sysVar.errorCode;
    TAEREC.SQLCAREC = SQLCA.SQLCAREC;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Return function*/
    TA1REC.TA1PGMNM = "PT08126C"; /* Error location*/
    TA1REC.TA1LOC = "C1 CLOSE VWHTYP01          ";
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VWHTYP01"; /* Table view name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error*/
    converseLib.validationFailed(20);

    exit stack; /* start over*/

  end

end // end PT08126C

// Open cursor for VPRDCU02
Function PT08127A()
   /* ------------------------------------------------------------*/
   /* get customer cross reference abbreviation from VPRDCU02*/
   /* Declare cursor based upon partial cust cross reference, then*/
   /* fetch the first one.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* declare cursor.*/
   /* ------------------------------------------------------------*/

  set VPRDCU02 empty; /* Initialize record*/

  if (VDLVAN02.PC_DLVR_ANALYST_CD >= "A1" && 
  VDLVAN02.PC_DLVR_ANALYST_CD <= "A9")
    VPRDCU02.XGPCD = "03"; /* MOVe GPC to VPRDCU02*/
  else
    VPRDCU02.XGPCD = "02"; /* MOVe GPC to VPRDCU02*/
  end

  VPRDCU02.PC2CUXID = VDLVAN02.PC2CUXID; /* analyst code*/

  try
    call "VPRDCU02" ("S1", SQLCA, VPRDCU02) {isNoRefresh = yes, isExternal = yes};
  end /* declare curs*/

  if (sysVar.errorCode == "00000000") /* If call OKAY*/
    if (SQLCA.VAGen_SQLCODE != 000) /* If cursor not ok*/
      if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
        converseLib.validationFailed(11);
        TA1REC.TA1FUNC = "POST"; /* terminate function*/
      else /* ELSE(other DB2 error)*/
        converseLib.validationFailed(10);
        TA1REC.TA1FUNC = "RETN"; /* terminate function*/
        converseLib.clearScreen();
         /* clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      PT08W03.PTWPRCSN = "127A"; /* Process number*/
      TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
      TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS   ";
      TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPRDCU02"; /* Table view name*/

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end /* Error*/

      PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

      exit stack; /* start over*/

    end
  else
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PT08W03.PTWPRCSN = "127A"; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* Return function*/
    TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "S1 CALL TO VPRDCU02        ";
    TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diagnosis*/

    converseLib.validationFailed(10); /* Indicate error occured*/
    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

    exit stack; /* start over*/

  end

end // end PT08127A

// Fetch cust xref abbrev
Function PT08127B()

   /* ------------------------------------------------------------*/
   /* fetch first row for display*/
   /* ------------------------------------------------------------*/

  while (VPRDCU02.YSMXDV != "10") /* USA processing*/
    try
      call "VPRDCU02" ("N1", SQLCA, VPRDCU02) {isNoRefresh = yes, isExternal = yes};
    end
                                 /* declare curs*/

    if (sysVar.errorCode == "00000000") /* If call OKAY*/
      if (SQLCA.VAGen_SQLCODE == 000) /* If cursor not ok*/
        PT08M001.PC2SEGAB[PTWIXM] = VPRDCU02.PC2SEGAB;
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* If no data found*/
          set PT08M001.PC2CUXID[PTWIXM] cursor, bold; /* \**/
          converseLib.validationFailed(118); /* xref is not found*/
          return; /* return to previous process*/
        else
          if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
            converseLib.validationFailed(11);
            TA1REC.TA1FUNC = "POST"; /* terminate function*/
          else /* ELSE(other DB2 error)*/
            converseLib.validationFailed(10);
            TA1REC.TA1FUNC = "RETN"; /* terminate function*/
            converseLib.clearScreen();
             /* clear screen before redisplay*/
          end

          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          PT08W03.PTWPRCSN = "127B"; /* Process number*/
          TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
          TA1REC.TA1LOC = "FETCH FIRST ROW            ";
          TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
          TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
          TA1REC.TA1TBLVU = "VPRDCU02"; /* Table view name*/

          try
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
          end /* Error*/

          PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

          exit stack; /* start over*/

        end

      end
    else
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      PT08W03.PTWPRCSN = "127B"; /* Process number*/
      TA1REC.TA1FUNC = "RETN"; /* Return function*/
      TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
      TA1REC.TA1LOC = "N1 CALL TO VPRDCU02        ";
      TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
      converseLib.validationFailed(10); /* Indicate error occured*/

      converseLib.clearScreen();

      exit stack; /* start over*/

    end
  end

end // end PT08127B

// Close cursor VPRDCU02
Function PT08127C()

   /* ------------------------------------------------------------*/
   /* close cursor.*/
   /* ------------------------------------------------------------*/

  try
    call "VPRDCU02" ("C1", SQLCA, VPRDCU02) {isNoRefresh = yes, isExternal = yes};
  end /**/

  if (sysVar.errorCode == "00000000" /* If call OKAY*/
   && SQLCA.VAGen_SQLCODE == 000)    /* If cursor close OK*/
    /* next sentence*/
  else
    TA1REC.TA1MAP = sysVar.errorCode;
    TAEREC.SQLCAREC = SQLCA.SQLCAREC;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Return function*/
    TA1REC.TA1PGMNM = "PT08127C"; /* Error location*/
    TA1REC.TA1LOC = "C1 CLOSE VPRDCU02          ";
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPRDCU02"; /* Table view name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error*/
    converseLib.validationFailed(20);

    exit stack; /* start over*/

  end

end // end PT08127C

// Select from DFCTY.VFDOFC01
Function PT08128()
  call "IO2790" ("S ", SQLCA, FY6REC) {isNoRefresh = yes, isExternal = yes}; /* select table row*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == 0 || 
    SQLCA.VAGen_SQLCODE == 100)
      return;
    end
  end

  if (sysVar.errorCode == "00000000") /* If call OKAY*/
    if (SQLCA.VAGen_SQLCODE != 000) /* If select not ok*/
      if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
        converseLib.validationFailed(11);
        TA1REC.TA1FUNC = "POST"; /* terminate function*/
      else /* ELSE(other DB2 error)*/
        converseLib.validationFailed(10);
        TA1REC.TA1FUNC = "RETN"; /* terminate function*/
        converseLib.clearScreen();
         /* clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      PT08W03.PTWPRCSN = "128"; /* Process number*/
      TA1REC.TA1FUNC = "RETN"; /* Return function*/
      TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
      TA1REC.TA1LOC = "SELECT UNIQUE FROM FLD OFC ";
      TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFDOFC01"; /* Table view name*/

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end /* Error*/

      converseLib.validationFailed(10); /* Indicate error occured*/
      PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

      exit stack; /* start over*/

    end
  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PT08W03.PTWPRCSN = "128"; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* Return function*/
    TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "S  CALL TO VFDOFC01        ";
    TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diagnosis*/

    converseLib.validationFailed(10); /* Indicate error occured*/
    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

    converseLib.clearScreen();

    exit stack; /* start over*/

  end

end // end PT08128

// Check attention identifier
Function PT08130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PT08M001 initial; /* Clear the map fields*/
    PT08M001.PT08LITL = "DELIVERY ANALYST:";

    exit stack; /* Exit to redisplay map*/

  end

  if (PT08M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PT08111(); /* Purge any temporary storage*/

      COMMAREA.CATOAP = PT08M001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PT08M001.CAITEM; /* Application data*/

      XSPT001(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    /* SET PT08M001.CATOAP CURSOR,MODIFIED,BRIGHT;/* Highlight*/
    set PT08M001.PT08DAHD cursor, modified, bold; /* Highlight*/

    PT08W03.PTWPRCSN = "130 "; /* Process number*/
    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    PT08111(); /* Purge any temporary storage*/

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "PT09"; /* indicate warehouse type maint*/
    end
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PT0M"; /* indicate main menu*/
    end
    XSPT001(); /* Exit to another application*/

    PT08W03.PTWPRCSN = "130 "; /* Process number*/
    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf13) /* If 'ADD' mode requested*/
    PT08W03.PTWMAP = "2"; /* Indicate switch to 'ADD' mode*/
    set PT08M001 initial; /* clear screen*/
    PT08W03.PTWSVDAN = " "; /* clear*/
    PT08M001.PT08LITL = "DELIVERY ANALYST:";
    exit stack; /* GOTO flow section*/
  end /* END of "IF" statement*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf9   /* and PF9 was not pressed*/
   && converseVar.eventKey not pf13) /* and PF13 was not pressed*/

    PT08W03.PTWPRCSN = "130 "; /* Process number*/
    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa2 /* or PA2 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end PT08130

// Reset highlighted fields
Function PT08140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to defined intensity.*/
   /* ------------------------------------------------------------*/

  PT08W03.PTWIXM = 1; /* Initialize line index*/

  while (PT08W03.PTWIXM <= PT08W03.PTWMPMAX) /* Until end of lines*/

    if (PT08W02.XXXSTAT[PTWIXM] != "L") /* if line has data*/
      set PT08M001.XXXSTAT[PTWIXM] initialAttributes; /* Reset field*/
      set PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] initialAttributes; /* Reset field*/
      set PT08M001.XXXUSER[PTWIXM] initialAttributes; /* Reset field*/
      set PT08M001.XPRCD[PTWIXM] initialAttributes; /* Reset field*/
      set PT08M001.XPCCD[PTWIXM] initialAttributes; /* Reset field*/
      set PT08M001.XPCSDESC[PTWIXM] initialAttributes; /* Reset field*/
      set PT08M001.PC_WHSE_TYP_CD[PTWIXM] initialAttributes; /* Reset field*/
      set PT08M001.PC_WHSE_TYP_DESC[PTWIXM] initialAttributes; /* Reset field*/
      set PT08M001.PC2CUXID[PTWIXM] initialAttributes; /* Reset field*/
      set PT08M001.PC2SEGAB[PTWIXM] initialAttributes; /* Reset field*/
      set PT08M001.FY-FLD-OFC-CD[PTWIXM] initialAttributes; /* Reset field*/
    else
      set PT08M001.XXXSTAT[PTWIXM] skip, invisible;
      set PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] skip, invisible;
      set PT08M001.XXXUSER[PTWIXM] skip, invisible;
      set PT08M001.XPRCD[PTWIXM] skip, invisible;
      set PT08M001.XPCCD[PTWIXM] skip, invisible;
      set PT08M001.XPCSDESC[PTWIXM] skip, invisible;
      set PT08M001.PC_WHSE_TYP_CD[PTWIXM] skip, invisible;
      set PT08M001.PC_WHSE_TYP_DESC[PTWIXM] skip, invisible;
      set PT08M001.PC2CUXID[PTWIXM] skip, invisible;
      set PT08M001.PC2SEGAB[PTWIXM] skip, invisible;
      set PT08M001.FY-FLD-OFC-CD[PTWIXM] skip, invisible;
    end

    PT08W03.PTWIXM = PT08W03.PTWIXM + 1; /* Increment line index*/

  end
   /* *************************************************************/
   /* SET AB0DM001.SY1SSTNM DEFINED;*/
   /* *************************************************************/

  set PT08M001.CATOAP initialAttributes; /* Commarea TO application*/
  set PT08M001.CAITEM initialAttributes; /* Commarea application data*/


end // end PT08140

// Verify the entered data
Function PT08150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (PT08M001.CAITEM > " ") /* Application data was entered*/

    set PT08M001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PT08W03.PTWPRCSN = "150 "; /* Process number*/
    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

  end

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    PT08151(); /* Verify scroll request*/
  else
    PT08152(); /* Verify selection criteria*/
    if (PT08W03.PTWSWR == "Y") /* If new selection criteria entered*/
      exit stack; /* Go back to start of appl*/
    else /* Else(selection criteria not changed)*/
      PT08W03.PTWIXM = PT08W03.PTWMPMAX; /* Initialize line index*/
      while ((PT08W03.PTWIXM > 0 /* Until end of lines*/
       && converseVar.validationMsgNum == 0))
        if (PT08W02.XXXSTAT[PTWIXM] != "L")
          PT08153(); /* Verify any changed data*/
        end
        PT08W03.PTWIXM = PT08W03.PTWIXM - 1; /* Decrement line number*/
      end
    end
  end

  if (converseVar.validationMsgNum == 0)
    if (converseVar.eventKey is enter)
      PT08W03.PTWIXM = 1; /* Initialize index to 1*/
      while (PT08W03.PTWIXM <= PT08W03.PTWMPMAX)
        if (PT08W02.XXXSTAT[PTWIXM] != "L")
          if (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] != 
          PT08W02.PC_DLVR_ANALYST_CD[PTWIXM]
           || PT08M001.XPRCD[PTWIXM] != PT08W02.XPRCD[PTWIXM]
           || PT08M001.XPCCD[PTWIXM] != PT08W02.XPCCD[PTWIXM]
           || PT08M001.PC_WHSE_TYP_CD[PTWIXM] != 
          PT08W02.PC_WHSE_TYP_CD[PTWIXM]
           || PT08M001.PC2CUXID[PTWIXM] != PT08W02.PC2CUXID[PTWIXM]
           || PT08M001.XXXSTAT[PTWIXM] != PT08W02.XXXSTAT[PTWIXM]
           || PT08M001.FY-FLD-OFC-CD[PTWIXM] != 
          PT08W02.FY-FLD-OFC-CD[PTWIXM])
            PT08W03.PTWIXM = 50;
          end
        else
          if (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] != 
          PT08W02.PC_DLVR_ANALYST_CD[PTWIXM]
           || PT08M001.XPRCD[PTWIXM] != PT08W02.XPRCD[PTWIXM]
           || PT08M001.XPCCD[PTWIXM] != PT08W02.XPCCD[PTWIXM]
           || PT08M001.PC_WHSE_TYP_CD[PTWIXM] != 
          PT08W02.PC_WHSE_TYP_CD[PTWIXM]
           || PT08M001.PC2CUXID[PTWIXM] != PT08W02.PC2CUXID[PTWIXM]
           || PT08M001.FY-FLD-OFC-CD[PTWIXM] != 
          PT08W02.FY-FLD-OFC-CD[PTWIXM])
            PT08W03.PTWIXM = 50;
          end
        end
        PT08W03.PTWIXM = PT08W03.PTWIXM + 1; /* Incriment index up by 1*/
      end
      if (PT08W03.PTWIXM < 50) /* if data not modified and*/
        if (PT08W03.PT08W2PS == "N") /* not waiting for PF9*/
          exit stack; /* then, do nothing*/
        end
      end
    end
  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    PT08W03.PT08W2PS = "N"; /* reset confirm sw*/
    exit stack; /* Exit to redisplay map*/
  end

  if (PT08W03.PT08W2PS == "N")
    if (converseVar.eventKey is pf9)
      exit stack;
    end
  end

end // end PT08150

// Verify scroll request
Function PT08151()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PT08W03.PTWTSP < 2)         /* and no previous pages*/

    PT08W03.PTWPRCSN = "151 "; /* Process number*/
    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PT08W03.PTWTSP >= PT08W03.TA5TSQIX) /* and no more pages*/

    PT08W03.PTWPRCSN = "151 "; /* Process number*/
    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end



end // end PT08151

// Edit selection criteria
Function PT08152()
   /* ============================================================*/
   /* ===== E D I T    S E L E C T I O N    C R I T E R I A  =====*/
   /* =====                                                  =====*/
   /* ===== Compare selection criteria on screen to data on  =====*/
   /* ===== working storatge record, if any has changed,     =====*/
   /* ===== validate all selection criteria fields and turn  =====*/
   /* ===== on switch which allows later processing to purge =====*/
   /* ===== temporary storage and re-load it with newly      =====*/
   /* ===== selected data.                                   =====*/
   /* ============================================================*/

  PT08W03.PTWSWR = "N"; /* initialize switch to 'OFF'*/
  XP1REC.XP1MNO = 0;

  if (PT08M001.PT08DAHD is modified)
    PT08W03.PTWSWR = "Y"; /* Turn 'ON' switch to re-select*/
    PT08W03.PTWSVDAN = PT08M001.PT08DAHD;
  else
    if (PT08M001.PT08DAHD != PT08W03.PTWSVDAN)
      PT08W03.PTWSVDAN = PT08M001.PT08DAHD;
      PT08W03.PTWSWR = "Y"; /* Turn 'ON' switch to re-select*/
      if (XP1REC.XXXSTAT == "I")
        PT08W03.PTWSVDAN = " ";
        set PT08M001.PT08DAHD cursor, bold;
        XP1REC.XP1MNO = 8;
      else
        PT08M001.PT08DAHD = PT08W03.PTWSVDAN;
      end
    end
  end

  converseLib.clearScreen();



   /* ====================== END OF PROCESS ======================*/



end // end PT08152

// Verify any changed data
Function PT08153()
   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/

   /* *************************************************************/
   /* *****              edit delivery code here            ******/
   /* *************************************************************/

  if (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] == " " /**/
   && PT08M001.XXXSTAT[PTWIXM] != "D")           /* delete row*/
    set PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] cursor, bold;
    converseLib.validationFailed(116); /* required field*/
    return;
  else
  end

  if (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "B1" && 
  PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "B9")
    if (PT08M001.PC2CUXID[PTWIXM] != " ")
      set PT08M001.PC2CUXID[PTWIXM] cursor, bold;
      converseLib.validationFailed(223); /* no direct shipment allowed*/
      return;
    end
  end

  if (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "A1" && 
  PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "A9")
    if (PT08M001.PC_WHSE_TYP_CD[PTWIXM] != " ")
      set PT08M001.PC_WHSE_TYP_CD[PTWIXM] cursor, bold;
      converseLib.validationFailed(236); /* no whse shipment allowed*/
      return;
    end
  end

   /* *************************************************************/
   /* *****       edit product group here                   ******/
   /* ***** *NOTE* even though we use the XPRCD (product    ******/
   /* ***** type code), this is actually the product type   ******/
   /* ***** group code. That's why we can only have 01 or 02******/
   /* ***** (Please see JAD for this program).              ******/
   /* *************************************************************/

  if (PT08M001.XPRCD[PTWIXM] == " ") /**/
    set PT08M001.XPRCD[PTWIXM] cursor, bold;
    converseLib.validationFailed(116); /* required field*/
    return;
  else
    if (((PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "A1" && 
    PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "A9") || 
    (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "B1" && 
    PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "B9")))
      if (PT08M001.XPRCD[PTWIXM] != "03")
        set PT08M001.XPRCD[PTWIXM] cursor, bold;
        converseLib.validationFailed(222); /* required field*/
        return;
      end
    else
      if (PT08M001.XPRCD[PTWIXM] != "01" && 
      PT08M001.XPRCD[PTWIXM] != "02")
        set PT08M001.XPRCD[PTWIXM] cursor, bold;
        converseLib.validationFailed(152); /* required field*/
        return;
      end
    end
  end


  if (PT08M001.XPCCD[PTWIXM] == " ") /**/
    set PT08M001.XPCCD[PTWIXM] cursor, bold;
    converseLib.validationFailed(116); /* required field*/
    return;
  else
    if (((PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "A1" && 
    PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "A9") || 
    (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "B1" && 
    PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "B9")))
      if (PT08M001.XPCCD[PTWIXM] != "**")
        set PT08M001.XPCCD[PTWIXM] cursor, bold;
        converseLib.validationFailed(225); /* required field*/
        return;
      end
    end
  end

  if (PT08M001.XXXSTAT[PTWIXM] == "C"
   || PT08M001.XXXSTAT[PTWIXM] == "D"
   || PT08M001.XXXSTAT[PTWIXM] == "A")
    /* next sentence*/
  else
    converseLib.validationFailed(149);
    set PT08M001.XXXSTAT[PTWIXM] cursor, bold;
    return;
  end

   /* ********************************************************/
   /* validate liaison field office code*/
   /* ********************************************************/

  if (PT08M001.FY-FLD-OFC-CD[PTWIXM] == " ")
    converseLib.validationFailed(231);
    set PT08M001.FY-FLD-OFC-CD[PTWIXM] cursor, bold;
    return;
  end

  if (((PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "A1" && 
  PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "A9") || 
  (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "B1" && 
  PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "B9")))
    if (PT08M001.FY-FLD-OFC-CD[PTWIXM] == "**")
      converseLib.validationFailed(231); /* missing or invalid*/
      set PT08M001.FY-FLD-OFC-CD[PTWIXM] cursor, bold;
      return;
    end
  else
    if (PT08M001.FY-FLD-OFC-CD[PTWIXM] != "**")
      converseLib.validationFailed(231); /* missing or invalid*/
      set PT08M001.FY-FLD-OFC-CD[PTWIXM] cursor, bold;
      return;
    end
  end

end // end PT08153

// Process valid input request
Function PT08160()
   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    PT08W03.PTWTSP = PT08W03.PTWTSP - 1; /* Decrement page number*/

    PT08W03.PT08W-SAVE-PTWTSP = PT08W03.PTWTSP; /* Save page number*/

    return; /* Return to previous process*/
  end

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    PT08W03.PTWTSP = PT08W03.PTWTSP + 1; /* Increment page number*/

    PT08W03.PT08W-SAVE-PTWTSP = PT08W03.PTWTSP; /* Save page number*/

    return; /* Return to previous process*/
  end

  if (converseVar.validationMsgNum == 0) /* IF no ERRORS found*/
                                 /* ;*/
    PT08W03.PTWIXM = 1; /* Initialize index to 1*/
    PT08W03.PTWUFL = "N"; /* Initialize Update Flag to "NO"*/

    while (PT08W03.PTWIXM <= PT08W03.PTWMPMAX)
            /* LOOP thru entire screen*/
          /* ***** if any fields were changed *************************/
      if (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] != 
      PT08W02.PC_DLVR_ANALYST_CD[PTWIXM]
       || PT08M001.XPRCD[PTWIXM] != PT08W02.XPRCD[PTWIXM]
       || PT08M001.XPCCD[PTWIXM] != PT08W02.XPCCD[PTWIXM]
       || PT08M001.PC_WHSE_TYP_CD[PTWIXM] != 
      PT08W02.PC_WHSE_TYP_CD[PTWIXM]
       || PT08M001.PC2CUXID[PTWIXM] != PT08W02.PC2CUXID[PTWIXM]
       || PT08M001.FY-FLD-OFC-CD[PTWIXM] != 
      PT08W02.FY-FLD-OFC-CD[PTWIXM]
       || (PT08W02.XXXSTAT[PTWIXM] != "L" && 
      (PT08M001.XXXSTAT[PTWIXM] != PT08W02.XXXSTAT[PTWIXM])))
        if (COMMAREA.CACHGFL == "Y")
          PT08165(); /* verify changed fields first*/

          PT08W03.PTWUFL = "Y"; /* Indicate TSQ update needed*/
        else
          converseLib.validationFailed(102); /* not authorized to change*/
          exit stack;
        end /* End of "IF" statement*/
      end /* End of "IF" statement*/

      PT08W03.PTWIXM = PT08W03.PTWIXM + 1; /* Incriment index up by 1*/

    end /* End of "WHILE" loop*/
    PT08W03.PTWIXM = 1; /* Initialize index to 1*/
    if (PT08W03.PT08W2PS == "N"
     || converseVar.eventKey is enter)
      PT08W03.PT08W2PS = "Y";
      converseLib.validationFailed(021); /* Press PF9 to accept*/
      exit stack;
    else
      PT08W03.PT08W2PS = "N";
      while (PT08W03.PTWIXM <= PT08W03.PTWMPMAX)

                                  /* note following change - originally*/
                                   /* would just attempt to update*/
                                  /* row. However, key to table changed to*/
                                   /* be almost the entire row,so*/
                /* any change requires a delete and add, not update.*/
                /* PERFORM PT08161;       /* update DB2 table*/
        /* ***** IF delete asked for ******/
        if (PT08M001.XXXSTAT[PTWIXM] == "D") /* If DELETE asked for*/
          if (COMMAREA.CADELFL != "Y") /* if not authorized to delete*/
            converseLib.validationFailed(102);
            exit stack;
          else
            PT08163(); /* delete row*/
          end
        else /* If any change in the fields of the row*/
          if (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] != 
          PT08W02.PC_DLVR_ANALYST_CD[PTWIXM]
           || PT08M001.XPRCD[PTWIXM] != PT08W02.XPRCD[PTWIXM]
           || PT08M001.XPCCD[PTWIXM] != PT08W02.XPCCD[PTWIXM]
           || PT08M001.PC_WHSE_TYP_CD[PTWIXM] != 
          PT08W02.PC_WHSE_TYP_CD[PTWIXM]
           || PT08M001.PC2CUXID[PTWIXM] != PT08W02.PC2CUXID[PTWIXM]
           || PT08M001.FY-FLD-OFC-CD[PTWIXM] != 
          PT08W02.FY-FLD-OFC-CD[PTWIXM]
           || (PT08W02.XXXSTAT[PTWIXM] != "L" && 
          (PT08M001.XXXSTAT[PTWIXM] != PT08W02.XXXSTAT[PTWIXM])))
            PT08164(); /* look for duplicates*/
            if (converseVar.validationMsgNum == 147)
              converseLib.validationFailed(0); /* reset the flag*/
              PT08166(); /* delete the duplicate entry*/
            end
            PT08163(); /* Delete row*/
            PT08261(); /* Add new row*/
          end
        end

        PT08W02.PT8GROUP[PTWIXM] = VDLVAN02.DANGROUP;
                                  /* ;        Move data to temp storage*/
                                  /* ;        page*/

        PT08W03.PTWIXM = PT08W03.PTWIXM + 1; /* Incriment index up by 1*/
      end
    end /* End of "WHILE" loop*/

    if (PT08W03.PTWUFL != "N") /* if TSQ page needs updating*/
      PT08162(); /* update TSQ page*/
    end /* End of "IF" statement*/

    converseLib.validationFailed(01); /* Table updated successfully*/

  end /* End of "IF" statement*/

end // end PT08160

// Get vsuser desc
Function PT08161()
   /* ------------------------------------------------------------*/
   /* get userid from vsuser02 table*/
   /* Select a single row based on keyed data, if return code not*/
   /* okay, this does not exist and is an error.*/
   /* ------------------------------------------------------------*/

  set VSUSER02 empty; /* Initialize record*/

  if (((PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "A1" && 
  PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "A9") || 
  (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "B1" && 
  PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "B9")))
    VSUSER02.XGPCD = "03"; /* MOVe GPC to VSUSER02*/
  else
    VSUSER02.XGPCD = "02"; /* MOVe GPC to VSUSER02*/
  end

  VSUSER02.PG1SC4CD = PT08M001.PC_DLVR_ANALYST_CD[PTWIXM]; /**/
  VSUSER02.PG1FCTCD = "  ";

  try
    call "VSUSER02" ("S ", SQLCA, VSUSER02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  if (sysVar.errorCode == "00000000") /* If call OKAY*/
    if (SQLCA.VAGen_SQLCODE == 000) /* If found*/
      PT08M001.XXXUSER[PTWIXM] = VSUSER02.XXXUSER;
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
        set PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] cursor, bold; /* \**/
        PT08M001.XXXUSER[PTWIXM] = " ";
        converseLib.validationFailed(150); /* userid not found*/
        exit stack; /* redisplay*/
      else /* ELSE(other DB2 error)*/

        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        PT08W03.PTWPRCSN = "161 "; /* Process number*/
        TA1REC.TA1FUNC = "RETN"; /* Return function*/
        TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
        TA1REC.TA1LOC = "LOCATE A SELECTED TABLE ROW";
        TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
        TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VSUSER02"; /* Table view name*/

        try
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        end /* Error*/

        converseLib.validationFailed(10); /* Indicate error occured*/
        PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

        exit stack; /* start over*/

      end
    end
  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PT08W03.PTWPRCSN = "165 "; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* Return function*/
    TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "LOCATE A SELECTED TABLE ROW";
    TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diagnosis*/

    converseLib.validationFailed(10); /* Indicate error occured*/
    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

    exit stack; /* start over*/

  end

end // end PT08161

// Update TSQ page in place
Function PT08162()
   /* ------------------------------------------------------------*/
   /* replace the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  PT08W02.PT08LEN = PT08W03.PTWTSQSZ; /* Temporary storage length*/
  TA5REC.TA5APPID = PT08W03.PTWAPPL; /* Application identification*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  TA5REC.TA5TSQIX = PT08W03.PTWTSP; /* TSQ page number to replace*/

  try
    call "TA0050" (PT08W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                  /* ;            subroutine*/

  if (sysVar.errorCode != "00000000"
   || TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PT08W03.PTWPRCSN = "162 "; /* Process number*/
    TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "REPLACE PAGE TO TEMP STORAGE";
    TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Error diagnosis routine*/

    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end



end // end PT08162

// DELETE a row from VDLVAN02
Function PT08163()
   /* ------------------------------------------------------------*/
   /* DELETE a single row in DB2*/
   /* ------------------------------------------------------------*/

  set VDLVAN02 empty; /* Initialize record*/
  set SQLCA empty; /* Initialize record*/

  VDLVAN02.PC_DLVR_ANALYST_CD = PT08W02.PC_DLVR_ANALYST_CD[PTWIXM];
  VDLVAN02.PC_WHSE_TYP_CD = PT08W02.PC_WHSE_TYP_CD[PTWIXM];
  VDLVAN02.XPRCD = PT08W02.XPRCD[PTWIXM];
  VDLVAN02.XPCCD = PT08W02.XPCCD[PTWIXM];
  VDLVAN02.PC_WHSE_TYP_CD = PT08W02.PC_WHSE_TYP_CD[PTWIXM];
  VDLVAN02.PC2CUXID = PT08W02.PC2CUXID[PTWIXM];
  VDLVAN02.FY-FLD-OFC-CD = PT08W02.FY-FLD-OFC-CD[PTWIXM];

  if (VDLVAN02.XPRCD != " ")

    try
      call "VDLVAN02" ("D ", SQLCA, VDLVAN02) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Delete the row*/
  end

  if (sysVar.errorCode == "00000000") /* If call to VDLVAN02 okay*/
    if (SQLCA.VAGen_SQLCODE == 0 || 
    SQLCA.VAGen_SQLCODE == 100)
      PT08W03.PTWSWR = "Y"; /* RE-SELECT rows on DB*/

    else
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      PT08W03.PTWPRCSN = "163 "; /* Process number*/
      TA1REC.TA1FUNC = "RETN"; /* set function to 'RETURN'*/
      TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
      TA1REC.TA1LOC = "DELETE A SELECTED TABLE ROW";
      TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VDLVAN02"; /* Table view name*/
      TA1REC.TA1TBLKE = VDLVAN02.PT8KEY; /* move tbl key to errdiag*/

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end /* Error diagnosis*/

      converseLib.validationFailed(10); /* Indicate error occured*/
      PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

      exit stack; /* start over*/
    end
  else /* Return code OKAY, Row deleted*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PT08W03.PTWPRCSN = "163 "; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* set function to 'RETURN'*/
    TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "UPDATE CALL TO VDLVAN02";
    TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diagnosis*/

    converseLib.validationFailed(10); /* Indicate error occured*/
    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

    exit stack; /* Return to previous process*/
  end
end // end PT08163

// Check for duplicate entry
Function PT08164()
   /* ------------------------------------------------------------*/
   /* Select a single row based on keyed data, if return code*/
   /* okay, this is a duplicate entry....that is not OKAY !*/
   /* ------------------------------------------------------------*/

  set VDLVAN02 empty; /* Initialize record*/

   /* ***** move data from map ******/
  VDLVAN02.PC_DLVR_ANALYST_CD = PT08M001.PC_DLVR_ANALYST_CD[PTWIXM];
  VDLVAN02.XPRCD = PT08M001.XPRCD[PTWIXM];
  VDLVAN02.XPCCD = PT08M001.XPCCD[PTWIXM];
  VDLVAN02.PC_WHSE_TYP_CD = PT08M001.PC_WHSE_TYP_CD[PTWIXM];
  PT08FILL = PT08M001.PC2CUXID[PTWIXM];
  PT08W03.PT08CX02 = "%%";
  VDLVAN02.PC2CUXID = PT08W03.PT08FILL;
  VDLVAN02.FY-FLD-OFC-CD = PT08M001.FY-FLD-OFC-CD[PTWIXM];

  try
    call "VDLVAN02" ("SU", SQLCA, VDLVAN02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  if (sysVar.errorCode == "00000000") /* If call OKAY*/
    if (SQLCA.VAGen_SQLCODE == 100) /* If not found, OKAY not a duplicate*/

      /* ***** now make sure no duplicates on add screen ******/
      PT08W03.PTWIDX2 = PT08W03.PTWIXM - 1;
      /* WHILE PT08W03.PTWIDX2 GE PT08W03.PTWIDX5;*/
      while (PT08W03.PTWIDX2 >= PT08W03.PTWMPMAX)
        if (PT08M001.XPRCD[PTWIXM] == PT08M001.XPRCD[PTWIDX2] && 
        ((PT08M001.XPCCD[PTWIXM] == PT08M001.XPCCD[PTWIDX2]) || 
        (PT08M001.XPCCD[PTWIXM] == "**" || 
        PT08M001.XPCCD[PTWIDX2] == "**")) && 
        PT08M001.PC_WHSE_TYP_CD[PTWIXM] == 
        PT08M001.PC_WHSE_TYP_CD[PTWIDX2] && 
        PT08M001.PC2CUXID[PTWIXM] == PT08M001.PC2CUXID[PTWIDX2] && 
        PT08M001.FY-FLD-OFC-CD[PTWIXM] == 
        PT08M001.FY-FLD-OFC-CD[PTWIDX2])
          set PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] cursor, bold;
          converseLib.validationFailed(153); /* Duplicates not allowed*/
          exit stack; /* redisplay*/
        end
        PT08W03.PTWIDX2 = PT08W03.PTWIDX2 - 1;
      end

    else
      if (SQLCA.VAGen_SQLCODE == 0) /* if found on DB*/
       /* MOVE VDLVAN02.DANGROUP TO PT08W02.PT8GROUP(PTWIXM);*/
        set PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] cursor, bold;
        converseLib.validationFailed(147); /* Duplicates not allowed*/
      else /* ELSE(other DB2 error)*/

        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        PT08W03.PTWPRCSN = "155 "; /* Process number*/
        TA1REC.TA1FUNC = "RETN"; /* Return function*/
        TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
        TA1REC.TA1LOC = "UPDATE A SELECTED TABLE ROW";
        TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
        TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VDLVAN02"; /* Table view name*/

        try
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        end /* Error*/

        converseLib.validationFailed(10); /* Indicate error occured*/
        PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

        return; /* Return to previous process*/

      end
    end
  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PT08W03.PTWPRCSN = "155 "; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* Return function*/
    TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "UPDATE A SELECTED TABLE ROW";
    TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diagnosis*/

    converseLib.validationFailed(10); /* Indicate error occured*/
    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

    return; /* Return to previous process*/

  end



end // end PT08164

// Check for existing entries
Function PT08165()
   /* ------------------------------------------------------------*/
   /* This paragraph will get the userid from the vsuser02 table,*/
   /* the category description from the XPCTBL, the warehouse*/
   /* description from the vwhtyp01 table, and the customer cross*/
   /* reference abbreviation from the VPRDCU01 table*/
   /* ------------------------------------------------------------*/

  PT08161(); /* get vsuser desc*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

  PT08167(); /* get category desc from XPCTBL*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

   /* *************************************************************/
   /* ***** can not enter a warehouse AND a customer xref    ******/
   /* ***** on the same record                               ******/
   /* *************************************************************/
  if (PT08M001.PC_WHSE_TYP_CD[PTWIXM] != "  " && 
  PT08M001.PC2CUXID[PTWIXM] != "  ")
    set PT08M001.PC_WHSE_TYP_CD[PTWIXM] cursor, bold;
    converseLib.validationFailed(155); /* required field*/
    exit stack;
  end

   /* *************************************************************/
   /* ***** but, must have 1 or the other !                  ******/
   /* *************************************************************/
  if (PT08M001.PC_WHSE_TYP_CD[PTWIXM] == "  " && 
  PT08M001.PC2CUXID[PTWIXM] == "  ")
    set PT08M001.PC_WHSE_TYP_CD[PTWIXM] cursor, bold;
    converseLib.validationFailed(156); /* required field*/
    exit stack;
  end

  if (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "B1"
   && PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "B9")
    if (PT08M001.PC2CUXID[PTWIXM] != " ")
      set PT08M001.PC2CUXID[PTWIXM] cursor, bold;
      converseLib.validationFailed(223); /* no DRS*/
      exit stack;
    end
  else
    if (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "40" && 
    PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "49")
      if (PT08M001.PC2CUXID[PTWIXM] != " ")
        set PT08M001.PC2CUXID[PTWIXM] cursor, bold;
        converseLib.validationFailed(157); /* required field*/
        exit stack;
      end
    end

    if (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "30" && 
    PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "39")
      if (PT08M001.PC_WHSE_TYP_CD[PTWIXM] != "     ")
        set PT08M001.PC_WHSE_TYP_CD[PTWIXM] cursor, bold;
        converseLib.validationFailed(157); /* required field*/
        exit stack;
      end
    end

    if (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "A1"
     && PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "A9")
      if (PT08M001.PC_WHSE_TYP_CD[PTWIXM] != " ")
        set PT08M001.PC_WHSE_TYP_CD[PTWIXM] cursor, bold;
        converseLib.validationFailed(223); /* no DRS*/
        exit stack;
      end
    end
  end

  if (PT08M001.PC_WHSE_TYP_CD[PTWIXM] != "  ")

    PT08168A(); /* open cursor VPRDCU02*/

    PT08168B(); /* fetch warehouse description from*/
                                  /* VWHTYP01*/
    PT08168C(); /* close cursor VWHTYP01*/
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

  if (PT08M001.PC2CUXID[PTWIXM] != "     ")
    if (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "B1"
     && PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "B9")
      set PT08M001.PC2CUXID[PTWIXM] cursor, bold; /**/
      converseLib.validationFailed(223); /* no drs for apparel analyst*/
      exit stack; /* start over*/
    else
      PT08169A(); /* open cursor VPRDCU02*/

      PT08169B(); /* fetch xref abbreviation from VPRDCU02*/

      PT08169C(); /* close cursor VPRDCU02*/
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

   /* ****************************************************************/
   /* *** validate the relationship between schd cd & liaison office**/
   /* ****************************************************************/

  if (((PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "A1" && 
  PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "A9") || 
  (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "B1" && 
  PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "B9")))
    if (PT08M001.FY-FLD-OFC-CD[PTWIXM] == " ") /* space as field offic*/

      set PT08M001.FY-FLD-OFC-CD[PTWIXM] cursor, bold; /* set error*/
      converseLib.validationFailed(231); /* field office code - missing or invalid*/
    else
      if (PT08M001.FY-FLD-OFC-CD[PTWIXM] == "**"
       || PT08M001.FY-FLD-OFC-CD[PTWIXM] == "* "
       || PT08M001.FY-FLD-OFC-CD[PTWIXM] == " *")
        set PT08M001.FY-FLD-OFC-CD[PTWIXM] cursor, bold;
        converseLib.validationFailed(231);
      else
        set PT08M001.FY-FLD-OFC-CD[PTWIXM] initialAttributes;
      end
    end
  else
    if (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] != "  ")
      if (PT08M001.FY-FLD-OFC-CD[PTWIXM] == " ") /* field office spac*/

        set PT08M001.FY-FLD-OFC-CD[PTWIXM] cursor, bold; /* error*/
        converseLib.validationFailed(231); /* liaison office code - missing*/
      else
        if (PT08M001.FY-FLD-OFC-CD[PTWIXM] == "**")
          set PT08M001.FY-FLD-OFC-CD[PTWIXM] initialAttributes;
        else
          set PT08M001.FY-FLD-OFC-CD[PTWIXM] cursor, bold;
          converseLib.validationFailed(231);
        end
      end
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

   /* *********************************************/
   /* ******** validate field office code *********/
   /* *********************************************/

  if (PT08M001.FY-FLD-OFC-CD[PTWIXM] != " " && 
  PT08M001.FY-FLD-OFC-CD[PTWIXM] != "**") /* if a valid lias ofc entere*/
    if (((PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "A1" && 
    PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "A9") || 
    (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "B1" && 
    PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "B9")))
        /* check if liaison office code is in DFCTY.VFDOFC01*/
      set FY6REC empty;
      FY6REC.XGPCD = "03";
      FY6REC.FY6FOCD = PT08M001.FY-FLD-OFC-CD[PTWIXM];
      PT08128(); /* select unique row from field office*/

      if (SQLCA.VAGen_SQLCODE == 0)

        if (FY6REC.XXXSTAT == "A")
          set PT08M001.FY-FLD-OFC-CD[PTWIXM] initialAttributes;
        else
          set PT08M001.FY-FLD-OFC-CD[PTWIXM] cursor, bold;
          converseLib.validationFailed(233); /* inactive lias ofc cd*/
        end
      else
        set PT08M001.FY-FLD-OFC-CD[PTWIXM] cursor, bold;
        converseLib.validationFailed(231);
      end /* end of call to io2790*/

    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

end // end PT08165

// DELETE a row from VDLVAN01
Function PT08166()
   /* ------------------------------------------------------------*/
   /* DELETE a single row in DB2 in case of duplicates*/
   /* ------------------------------------------------------------*/

  set SQLCA empty; /* Initialize record*/

  if (VDLVAN02.XPRCD != " ")

    try
      call "VDLVAN02" ("D ", SQLCA, VDLVAN02) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Delete the row*/
  end

  if (sysVar.errorCode == "00000000") /* If call to VDLVAN02 okay*/
    if (SQLCA.VAGen_SQLCODE != 0) /* DB2 error ( any error )*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      PT08W03.PTWPRCSN = "163 "; /* Process number*/
      TA1REC.TA1FUNC = "RETN"; /* set function to 'RETURN'*/
      TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
      TA1REC.TA1LOC = "DELETE A SELECTED TABLE ROW";
      TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VDLVAN02"; /* Table view name*/
      TA1REC.TA1TBLKE = VDLVAN02.PT8KEY; /* move tbl key to errdiag*/

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end /* Error diagnosis*/

      converseLib.validationFailed(10); /* Indicate error occured*/
      PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

      return; /* Return to previous process*/

    else /* Return code OKAY, Row deleted*/
      PT08W03.PTWSWR = "Y"; /* RE-SELECT rows on DB*/
    end
  else
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PT08W03.PTWPRCSN = "163 "; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* set function to 'RETURN'*/
    TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "UPDATE CALL TO VDLVAN02";
    TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diagnosis*/

    converseLib.validationFailed(10); /* Indicate error occured*/
    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

    return; /* Return to previous process*/
  end



end // end PT08166

// Get category desc from XPCTBL
Function PT08167()
   /* ------------------------------------------------------------*/
   /* get category description from xpctbl.*/
   /* If categories = '**', this means all, so move 'ALL' to*/
   /* description. Else, search xpctbl.*/
   /* ------------------------------------------------------------*/

  if (PT08M001.XPCCD[PTWIXM] == "**") /* If all categories*/
    PT08M001.XPCSDESC[PTWIXM] = "ALL         ";
  else
    if (((PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "A1" && 
    PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "A9") || 
    (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "B1" && 
    PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "B9")))
      set PT08M001.XPCCD[PTWIXM] cursor, bold; /* set cursor*/
      PT08M001.XPCSDESC[PTWIXM] = " ";
      converseLib.validationFailed(225); /* cat cd not found*/
      exit stack; /* return to previous process*/
    else
      if (PT08M001.XPCCD[PTWIXM] in XPCTBL.XPCCD)
        PT08M001.XPCSDESC[PTWIXM] = XPCTBL.XPCSDESC[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0)
        set PT08M001.XPCCD[PTWIXM] cursor, bold; /* \**/
        PT08M001.XPCSDESC[PTWIXM] = " ";
        converseLib.validationFailed(151); /* cat cd not found*/
        exit stack; /* return to previous process*/
      else
        if (XPCTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* category not active*/
          set PT08M001.XPCCD[PTWIXM] cursor, bold; /* \**/
          PT08M001.XPCSDESC[PTWIXM] = " ";
          converseLib.validationFailed(154); /* cat cd not active*/
          exit stack; /* exit to redisplay map*/
        end
      end
    end
  end

end // end PT08167

// Open cursor VWHTYP01
Function PT08168A()
   /* ------------------------------------------------------------*/
   /* get warehouse type description.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* declare cursor.*/
   /* ------------------------------------------------------------*/

  set VWHTYP01 empty; /* Initialize record*/

  VWHTYP01.PC_WHSE_TYP_CD = PT08M001.PC_WHSE_TYP_CD[PTWIXM]; /**/

  try
    call "VWHTYP01" ("S2", SQLCA, VWHTYP01) {isNoRefresh = yes, isExternal = yes};
  end /* declare curs*/

  if (sysVar.errorCode == "00000000") /* If call OKAY*/
    if (SQLCA.VAGen_SQLCODE != 000) /* If cursor not ok*/
      if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
        converseLib.validationFailed(11);
        TA1REC.TA1FUNC = "POST"; /* terminate function*/
      else /* ELSE(other DB2 error)*/
        converseLib.validationFailed(10);
        TA1REC.TA1FUNC = "RETN"; /* terminate function*/
        converseLib.clearScreen();
         /* clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      PT08W03.PTWPRCSN = "168A"; /* Process number*/
      TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
      TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS   ";
      TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VWHTYP01"; /* Table view name*/

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end /* Error*/

      PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

      exit stack; /* start over*/

    end
  else
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PT08W03.PTWPRCSN = "128A"; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* Return function*/
    TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "S1 CALL TO VWHTYP01        ";
    TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diagnosis*/

    converseLib.validationFailed(10); /* Indicate error occured*/
    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

    exit stack; /* start over*/

  end

end // end PT08168A

// Fetch whse desc from VWHTYP01
Function PT08168B()
   /* ------------------------------------------------------------*/
   /* fetch first row for display*/
   /* ------------------------------------------------------------*/

  try
    call "VWHTYP01" ("N2", SQLCA, VWHTYP01) {isNoRefresh = yes, isExternal = yes};
  end /**/

  if (sysVar.errorCode == "00000000") /* If call OKAY*/
    if (SQLCA.VAGen_SQLCODE == 000) /* If cursor is ok*/
      if (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "B1"
       && PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "B9")

        if (VWHTYP01.XWHCD == "09" || 
        VWHTYP01.XWHCD == "18" || 
        VWHTYP01.XWHCD == "51")
          PT08M001.PC_WHSE_TYP_DESC[PTWIXM] = VWHTYP01.PC_WHSE_TYP_DESC;
          return;
        else
          set PT08M001.PC_WHSE_TYP_CD[PTWIXM] cursor, bold; /**/
          PT08M001.PC_WHSE_TYP_DESC[PTWIXM] = " ";
          converseLib.validationFailed(224); /* whse is not valid*/
          exit stack; /* return to previous process*/
        end
      else
        if (VWHTYP01.XWHCD == "09" || 
        VWHTYP01.XWHCD == "18" || 
        VWHTYP01.XWHCD == "51")
          set PT08M001.PC_WHSE_TYP_CD[PTWIXM] cursor, bold; /**/
          PT08M001.PC_WHSE_TYP_DESC[PTWIXM] = " ";
          converseLib.validationFailed(224); /* whse is not valid*/
          exit stack; /* return to previous process*/
        else
          PT08M001.PC_WHSE_TYP_DESC[PTWIXM] = VWHTYP01.PC_WHSE_TYP_DESC;
          return;
        end
      end
    end
  end

  if (sysVar.errorCode == "00000000") /* If call OKAY*/
    if (SQLCA.VAGen_SQLCODE == 100) /* If cursor not ok*/
      set PT08M001.PC_WHSE_TYP_CD[PTWIXM] cursor, bold; /* \**/
      PT08M001.PC_WHSE_TYP_DESC[PTWIXM] = " ";
      converseLib.validationFailed(36); /* whse is not valid*/
      exit stack; /* return to previous process*/
    end
  end

  if (sysVar.errorCode == "00000000") /* If call OKAY*/
    if (SQLCA.VAGen_SQLCODE != 000) /* If cursor not ok*/
      if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
        converseLib.validationFailed(11);
        TA1REC.TA1FUNC = "POST"; /* terminate function*/
      else /* ELSE(other DB2 error)*/
        converseLib.validationFailed(10);
        TA1REC.TA1FUNC = "RETN"; /* terminate function*/
        converseLib.clearScreen();
         /* clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      PT08W03.PTWPRCSN = "168B"; /* Process number*/
      TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
      TA1REC.TA1LOC = "FETCH FIRST ROW            ";
      TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VWHTYP01"; /* Table view name*/

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end /* Error*/

      PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

      exit stack; /* start over*/

    end
  else
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PT08W03.PTWPRCSN = "168B"; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* Return function*/
    TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "N1 CALL TO VWHTYP01      M ";
    TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
    converseLib.validationFailed(10); /* Indicate error occured*/

    converseLib.clearScreen();

    exit stack; /* start over*/

  end

end // end PT08168B

// Close cursor VWHTYP01
Function PT08168C()
   /* ------------------------------------------------------------*/
   /* close cursor.*/
   /* ------------------------------------------------------------*/

  try
    call "VWHTYP01" ("C2", SQLCA, VWHTYP01) {isNoRefresh = yes, isExternal = yes};
  end /**/

  if (sysVar.errorCode == "00000000" /* If call OKAY*/
   && SQLCA.VAGen_SQLCODE == 000)    /* If cursor close OK*/
    /* next sentence*/
  else
    TA1REC.TA1MAP = sysVar.errorCode;
    TAEREC.SQLCAREC = SQLCA.SQLCAREC;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Return function*/
    TA1REC.TA1PGMNM = "PT08168C"; /* Error location*/
    TA1REC.TA1LOC = "C1 CLOSE VWHTYP01          ";
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VWHTYP01"; /* Table view name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error*/
    converseLib.validationFailed(20);

    exit stack; /* start over*/

  end

end // end PT08168C

// Open cursor VPRDCU02
Function PT08169A()
   /* ------------------------------------------------------------*/
   /* get customer cross reference abbreviation from VPRDCU02*/
   /* Declare cursor based upon partial cust cross reference, then*/
   /* fetch the first one.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* declare cursor.*/
   /* ------------------------------------------------------------*/

  set VPRDCU02 empty; /* Initialize record*/

  if (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "A1"
   && PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "A9")
    VPRDCU02.XGPCD = "03"; /* MOVe GPC to VPRDCU02*/
  else
    VPRDCU02.XGPCD = "02"; /* MOVe GPC to VPRDCU02*/
  end

  VPRDCU02.PC2CUXID = PT08M001.PC2CUXID[PTWIXM]; /* analyst code*/

  try
    call "VPRDCU02" ("S1", SQLCA, VPRDCU02) {isNoRefresh = yes, isExternal = yes};
  end /* declare curs*/

  if (sysVar.errorCode == "00000000") /* If call OKAY*/
    if (SQLCA.VAGen_SQLCODE != 000) /* If cursor not ok*/
      if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
        converseLib.validationFailed(11);
        TA1REC.TA1FUNC = "POST"; /* terminate function*/
      else /* ELSE(other DB2 error)*/
        converseLib.validationFailed(10);
        TA1REC.TA1FUNC = "RETN"; /* terminate function*/
        converseLib.clearScreen();
         /* clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      PT08W03.PTWPRCSN = "169A"; /* Process number*/
      TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
      TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS   ";
      TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPRDCU02"; /* Table view name*/

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end /* Error*/

      PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

      exit stack; /* start over*/

    end
  else
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PT08W03.PTWPRCSN = "129A"; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* Return function*/
    TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "S1 CALL TO VPRDCU02        ";
    TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diagnosis*/

    converseLib.validationFailed(10); /* Indicate error occured*/
    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

    exit stack; /* start over*/

  end

end // end PT08169A

// Fetch xref abbrv from VPRDCU
Function PT08169B()
   /* ------------------------------------------------------------*/
   /* fetch first row for display*/
   /* ------------------------------------------------------------*/

  while (VPRDCU02.YSMXDV != "10")
    try
      call "VPRDCU02" ("N1", SQLCA, VPRDCU02) {isNoRefresh = yes, isExternal = yes};
    end /**/

    if (sysVar.errorCode == "00000000") /* If call OKAY*/
      if (SQLCA.VAGen_SQLCODE == 000) /* If cursor  ok*/
        PT08M001.PC2SEGAB[PTWIXM] = VPRDCU02.PC2SEGAB;
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* If no data found*/
          set PT08M001.PC2CUXID[PTWIXM] cursor, bold; /* \**/
          PT08M001.PC2SEGAB[PTWIXM] = " ";
          converseLib.validationFailed(118); /* xref is not found*/
          exit stack; /* return to previous process*/
        end
      end
    end

    if (sysVar.errorCode == "00000000") /* If call OKAY*/
      if (SQLCA.VAGen_SQLCODE != 000) /* If cursor not ok*/
        if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
          converseLib.validationFailed(11);
          TA1REC.TA1FUNC = "POST"; /* terminate function*/
        else /* ELSE(other DB2 error)*/
          converseLib.validationFailed(10);
          TA1REC.TA1FUNC = "RETN"; /* terminate function*/
          converseLib.clearScreen();
           /* clear screen before redisplay*/
        end

        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        PT08W03.PTWPRCSN = "169B"; /* Process number*/
        TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
        TA1REC.TA1LOC = "FETCH FIRST ROW            ";
        TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
        TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VPRDCU02"; /* Table view name*/

        try
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        end /* Error*/

        PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

        exit stack; /* Return to previous process*/

      end
    else
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      PT08W03.PTWPRCSN = "169B"; /* Process number*/
      TA1REC.TA1FUNC = "RETN"; /* Return function*/
      TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
      TA1REC.TA1LOC = "N1 CALL TO VPRDCU02        ";
      TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
      converseLib.validationFailed(10); /* Indicate error occured*/

      converseLib.clearScreen();

      exit stack; /* start over*/

    end
  end

end // end PT08169B

// Close cursor VPRDCU02
Function PT08169C()
    /* ------------------------------------------------------------*/
    /* close cursor.*/
    /* ------------------------------------------------------------*/

  try
    call "VPRDCU02" ("C1", SQLCA, VPRDCU02) {isNoRefresh = yes, isExternal = yes};
  end /**/

  if (sysVar.errorCode == "00000000" /* If call OKAY*/
   && SQLCA.VAGen_SQLCODE == 000)    /* If cursor close OK*/
      /* next sentence*/
  else
    TA1REC.TA1MAP = sysVar.errorCode;
    TAEREC.SQLCAREC = SQLCA.SQLCAREC;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Return function*/
    TA1REC.TA1PGMNM = "PT08169C"; /* Error location*/
    TA1REC.TA1LOC = "C1 CLOSE VPRDCU02          ";
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPRDCU02"; /* Table view name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error*/
    converseLib.validationFailed(20);

    exit stack; /* start over*/

  end
end // end PT08169C

// Add Entries Function
Function PT08200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT08220(); /* Format and display the map*/

  PT08230(); /* Check attention identifier*/

  PT08240(); /* Reset fields to normal intensity*/

  PT08250(); /* Verify the entered data*/

  PT08260(); /* Process valid input request*/


end // end PT08200

// Format and display the map
Function PT08220()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 01) /* Update successful*/
    PT08W03.PTWNMO = converseVar.validationMsgNum; /* Information message number*/
    converseLib.validationFailed(0);
  end

  PT08W03.PT08W-SAVE-PTWTSP = 1; /* Set save page = 1*/

  if (converseVar.validationMsgNum != 0 /* Error message to display*/
   || PT08W03.PTWNMO == 01)             /* OR table update successful*/
    set PT08M001 alarm; /* Indicate sound alarm*/
  end

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    PT08M001.PT08DAHD = "  "; /* move selection criteria*/

    PT08M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (PT08W03.PTWNMO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PT08W03.PTWNMO);
      end /* Information message number*/
    end

    PT08W03.PTWIXM = 1; /* Initialize index to 1*/
    PT08W03.PTWIDX5 = 0; /* Initialize index to 0*/

    while (PT08W03.PTWIXM <= PT08W03.PTWMPMAX) /* LOOP thru entire map*/

      if (PT08M001.XXXSTAT[PTWIXM] != " ") /* Is status not blank line used*/
        set PT08M001.XXXSTAT[PTWIXM] skip; /* protect field*/
        set PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] skip; /* protect field*/
        set PT08M001.XXXUSER[PTWIXM] skip; /* protect field*/
        set PT08M001.XPRCD[PTWIXM] skip; /* protect field*/
        set PT08M001.XPRCD[PTWIXM] skip; /* protect field*/
        set PT08M001.XPCSDESC[PTWIXM] skip; /* protect field*/
        set PT08M001.PC_WHSE_TYP_CD[PTWIXM] skip; /* protect field*/
        set PT08M001.PC_WHSE_TYP_DESC[PTWIXM] skip; /* protect field*/
        set PT08M001.PC2CUXID[PTWIXM] skip; /* protect field*/
        set PT08M001.PC2SEGAB[PTWIXM] skip; /* protect field*/
        set PT08M001.FY-FLD-OFC-CD[PTWIXM] skip; /* protect field*/

        PT08W03.PTWIDX5 = PT08W03.PTWIXM; /* Set last line used*/

      end

      PT08W03.PTWIXM = PT08W03.PTWIXM + 1; /* Incriment index*/

    end

    PT08W03.PTWIDX5 = PT08W03.PTWIDX5 + 1;

    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (PT08W03.PTWNMO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PT08W03.PTWNMO);
      end /* Information message number*/
    end

  end

  PT08W03.PTWNMO = 0; /* Reset information message number*/

  set PT08M001.PT08LITL skip, invisible;
  set PT08M001.PT08DAHD skip, invisible; /* ,*/
  PT08M001.PT08MPFC = "14:MAINTAIN";
                                   /* set pfkey literal field to add*/
  PT08M001.PT08MPF5 = " "; /* No go to PT09 on add screen*/
  PT08M001.PT08MPF7 = " "; /* No scrolling on add screen*/
  PT08M001.PT08MPF8 = " "; /* No Scrolling on Add Screen*/

  if (converseVar.validationMsgNum == 0) /* IF no ERRORS*/
    set PT08M001.XXXSTAT[PTWIDX5] cursor;
                                   /* put cursor in correct place*/
  end /* END of "IF" statement*/

  PT08M001.XXXMAPNM = PT08W03.XXXMAPNM; /* Move map name to Map*/
  PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Move Process name to map*/
  converse PT08M001 ;

  PT08W03.PTWPRCSN = " "; /* Clear out Error Process nbr*/

end // end PT08220

// Check attention identifier
Function PT08230()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PT08M001 initial; /* Clear the map fields*/

    exit stack; /* Exit to redisplay map*/

  end

  if (PT08M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PT08111(); /* Purge any temporary storage*/

      COMMAREA.CATOAP = PT08M001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PT08M001.CAITEM; /* Application data*/

      XSPT001(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    set PT08M001.CATOAP cursor, modified, bold; /* Highlight*/

    PT08W03.PTWPRCSN = "230 "; /* Process number*/
    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    PT08111(); /* Purge any temporary storage*/

    if (converseVar.eventKey is pf3) /* PF3 pressed*/
      COMMAREA.CATOAP = "PT0M"; /* transfer to main menu*/
    end
    if (converseVar.eventKey is pf5) /* PF5 pressed*/
      COMMAREA.CATOAP = "PT09"; /* transfer to warehouse type*/
    end /* maint.*/
    XSPT001(); /* Exit to another application*/

    PT08W03.PTWPRCSN = "230 "; /* Process number*/
    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf14) /* If 'maintain' mode requested*/
    PT08W03.PTWMAP = "1"; /* Indicate switch to 'maintain' mode*/
    PT08W03.PTWSWR = "Y"; /* Turn on re-select switch*/
    set PT08M001 initial; /* CLEAR Map*/
    exit stack; /* GOTO flow section*/
  end /* END of "IF" statement*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf9   /* and PF9 was not pressed*/
   && converseVar.eventKey not pf14) /* and PF13 was not pressed*/

    PT08W03.PTWPRCSN = "230 "; /* Process number*/
    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa2 /* or PA2 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end PT08230

// Reset highlighted fields
Function PT08240()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to defined intensity.*/
   /* ------------------------------------------------------------*/

  PT08W03.PTWIXM = PT08W03.PTWIDX5; /* Initialize line index*/

  while (PT08W03.PTWIXM <= PT08W03.PTWMPMAX) /* Until end of lines*/

    set PT08M001.XXXSTAT[PTWIXM] initialAttributes; /* Reset field*/
    set PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] initialAttributes; /* reset field*/
    set PT08M001.XXXUSER[PTWIXM] initialAttributes; /* Reset field*/
    set PT08M001.XPRCD[PTWIXM] initialAttributes; /* Reset field*/
    set PT08M001.XPCCD[PTWIXM] initialAttributes; /* Reset field*/
    set PT08M001.XPCSDESC[PTWIXM] initialAttributes; /* Reset field*/
    set PT08M001.PC_WHSE_TYP_CD[PTWIXM] initialAttributes; /* Reset field*/
    set PT08M001.PC_WHSE_TYP_DESC[PTWIXM] initialAttributes; /* Reset field*/
    set PT08M001.PC2CUXID[PTWIXM] initialAttributes; /* Reset field*/
    set PT08M001.PC2SEGAB[PTWIXM] initialAttributes; /* Reset field*/
    set PT08M001.FY-FLD-OFC-CD[PTWIXM] initialAttributes; /* Reset field*/

    PT08W03.PTWIXM = PT08W03.PTWIXM + 1; /* Increment line index*/

  end
   /* *************************************************************/
   /* SET AB0DM001.SY1SSTNM DEFINED;*/
   /* *************************************************************/

  set PT08M001.CATOAP initialAttributes; /* Commarea TO application*/
  set PT08M001.CAITEM initialAttributes; /* Commarea application data*/


end // end PT08240

// Verify the entered data
Function PT08250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (PT08M001.CAITEM > " ") /* Application data was entered*/

    set PT08M001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PT08W03.PTWPRCSN = "250 "; /* Process number*/
    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

  end

  PT08251(); /* remove any blank lines*/

  PT08252(); /* Verify selection criteria*/

  PT08W03.PTWIXM = PT08W03.PTWMPMAX; /* Initialize line index*/
  while (PT08W03.PTWIXM >= PT08W03.PTWIDX5) /* Until end of lines*/
    PT08253(); /* Verify any changed data*/
    PT08W03.PTWIXM = PT08W03.PTWIXM - 1; /* Decrement line number*/
  end /* END of "WHILE" statement*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    PT08W03.PT08W2PS = "N"; /* reset confirm sw*/
    exit stack; /* Exit to redisplay map*/
  end

  if (PT08W03.PT08W2PS == "N")
    if (converseVar.eventKey is pf9)
      exit stack;
    end
  end

  PT08W03.PTWIXM = 1; /* Initialize line index*/
  PT08W03.DATA-IN-SW = "N";
  while (PT08W03.PTWIXM <= 13)
    if (PT08M001.XXXSTAT[PTWIXM] != " "
     || PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] != " "
     || PT08M001.XPRCD[PTWIXM] != " "
     || PT08M001.XPCCD[PTWIXM] != " "
     || PT08M001.PC_WHSE_TYP_CD[PTWIXM] != " "
     || PT08M001.PC2CUXID[PTWIXM] != " "
     || PT08M001.FY-FLD-OFC-CD[PTWIXM] != " ")
      PT08W03.DATA-IN-SW = "Y";
    end
    PT08W03.PTWIXM = PT08W03.PTWIXM + 1; /* Decrement line number*/
  end /* END of "WHILE" statement*/

  if (PT08W03.DATA-IN-SW == "N")
    if (converseVar.eventKey is enter || 
    converseVar.eventKey is pf9)
      PT08W03.PT08W2PS = "N"; /* reset confirm sw*/
      exit stack;
    end
  end

end // end PT08250

// Remove any Blank Lines From Mp
Function PT08251()
   /* *************************************************************/
   /* ***** R E M O V E    A N Y    B L A N K    L I N E S   ******/
   /* *****                 F R O M    M A P                 ******/
   /* *****                                                  ******/
   /* ***** This process will work its way thru the map and  ******/
   /* ***** Remove any embedded blank input lines.           ******/
   /* *************************************************************/

  PT08W03.PTWIDX2 = PT08W03.PTWMPMAX; /* Set First blank line*/
                                 /* ;        Pointer to max value*/
                                 /* ;*/
  PT08W03.PTWIDX3 = PT08W03.PTWIDX5; /* Set Current line pointer*/
                                 /* ;        to first line*/
                                 /* ;*/
  while (PT08W03.PTWIDX3 < PT08W03.PTWMPMAX) /* Loop Thru Entire Map*/
                                 /* ;*/
    if (PT08M001.XXXSTAT[PTWIDX3] == " "            /* IF Current Line Blank*/
     && PT08M001.PC_DLVR_ANALYST_CD[PTWIDX3] == " " /* |*/
     && PT08M001.XPRCD[PTWIDX3] == " "              /* |*/
     && PT08M001.XPCCD[PTWIDX3] == " "              /* |*/
     && PT08M001.PC2CUXID[PTWIDX3] == " "           /* |*/
     && PT08M001.PC_WHSE_TYP_CD[PTWIDX3] == " "     
     && PT08M001.FY-FLD-OFC-CD[PTWIDX3] == " ")     /* |*/
                                 /* ;*/
      PT08W03.PTWIDX2 = PT08W03.PTWIDX3 + 1; /* Start looking For Non-Blanks*/
                                 /* ;            After blank line.*/
      while (PT08W03.PTWIDX2 <= PTWMPMAX) /* Loop Thru Rest Of MAP*/
                                 /* ;*/
        if (PT08M001.XXXSTAT[PTWIDX2] != " "            /* IF New Line Not Blank*/
         || PT08M001.PC_DLVR_ANALYST_CD[PTWIDX2] != " " /* |*/
         || PT08M001.XPRCD[PTWIDX2] != " "              /* |*/
         || PT08M001.XPCCD[PTWIDX2] != " "              /* |*/
         || PT08M001.PC2CUXID[PTWIDX2] != " "           /* |*/
         || PT08M001.PC_WHSE_TYP_CD[PTWIDX2] != " "     /* |*/
         || PT08M001.FY-FLD-OFC-CD[PTWIDX2] != " "      /* |*/
        )                                               /* ;*/
          /* ***** move values from New Line to Current Line ******/
          PT08M001.XXXSTAT[PTWIDX3] = PT08M001.XXXSTAT[PTWIDX2];
          PT08M001.PC_DLVR_ANALYST_CD[PTWIDX3] = PT08M001.PC_DLVR_ANALYST_CD[PTWIDX2];
          PT08M001.XXXUSER[PTWIDX3] = PT08M001.XXXUSER[PTWIDX2];
          PT08M001.XPRCD[PTWIDX3] = PT08M001.XPRCD[PTWIDX2];
          PT08M001.XPCCD[PTWIDX3] = PT08M001.XPCCD[PTWIDX2];
          PT08M001.XPCSDESC[PTWIDX3] = PT08M001.XPCSDESC[PTWIDX2];
          PT08M001.PC_WHSE_TYP_CD[PTWIDX3] = PT08M001.PC_WHSE_TYP_CD[PTWIDX2];
          PT08M001.PC_WHSE_TYP_DESC[PTWIDX3] = PT08M001.PC_WHSE_TYP_DESC[PTWIDX2];
          PT08M001.PC2CUXID[PTWIDX3] = PT08M001.PC2CUXID[PTWIDX2];
          PT08M001.PC2SEGAB[PTWIDX3] = PT08M001.PC2SEGAB[PTWIDX2];
          PT08M001.FY-FLD-OFC-CD[PTWIDX3] = PT08M001.FY-FLD-OFC-CD[PTWIDX2];
          /* ***** Now Move Spaces To New Line Fields ******/
          PT08M001.XXXSTAT[PTWIDX2] = " ";
          PT08M001.PC_DLVR_ANALYST_CD[PTWIDX2] = " ";
          PT08M001.XXXUSER[PTWIDX2] = " ";
          PT08M001.XPRCD[PTWIDX2] = " ";
          PT08M001.XPCCD[PTWIDX2] = " ";
          PT08M001.XPCSDESC[PTWIDX2] = " ";
          PT08M001.PC_WHSE_TYP_CD[PTWIDX2] = " ";
          PT08M001.PC_WHSE_TYP_DESC[PTWIDX2] = " ";
          PT08M001.PC2CUXID[PTWIDX2] = " ";
          PT08M001.PC2SEGAB[PTWIDX2] = " ";
          PT08M001.FY-FLD-OFC-CD[PTWIDX2] = " ";
                                 /* ;*/
          PT08W03.PTWIDX2 = 99; /* Force End To Loop*/
                                 /* ;*/
        else /* Else (Line Is Not Blank)*/
                                 /* ;*/
          PT08W03.PTWIDX2 = PT08W03.PTWIDX2 + 1; /* Incriment Line Index*/
                                 /* ;*/
          if (PT08W03.PTWIDX2 > PT08W03.PTWMPMAX) /* IF NO DATA LINE FOUN*/
            return; /* Force END to LOOP*/
          end /* END Of "IF" Statement*/
                                 /* ;*/
        end /* END of "IF" Statement*/
                                 /* ;*/
      end /* END of "WHILE" Loop*/
                                 /* ;*/
    end /* END of "IF" Statement*/
                                 /* ;*/
    PT08W03.PTWIDX3 = PT08W03.PTWIDX3 + 1; /* Incriment Index By 1*/
                                 /* ;*/
  end /* END of "WHILE" Loop*/
end // end PT08251

// Edit selection criteria
Function PT08252()
   /* ============================================================*/
   /* ===== E D I T    S E L E C T I O N    C R I T E R I A  =====*/
   /* =====                                                  =====*/
   /* ===== Compare selection criteria on screen to data on  =====*/
   /* ===== working storatge record, if any has changed,     =====*/
   /* ===== validate all selection criteria fields and turn  =====*/
   /* ===== on switch which allows later processing to purge =====*/
   /* ===== temporary storage and re-load it with newly      =====*/
   /* ===== selected data.                                   =====*/
   /* ============================================================*/

  PT08W03.PTWSWR = "N"; /* initialize switch to 'OFF'*/
  XP1REC.XP1MNO = 0;

  if (PT08M001.PT08DAHD is modified)
    PT08W03.PTWSWR = "Y"; /* Turn 'ON' switch to re-select*/
    PT08W03.PTWSVDAN = PT08M001.PT08DAHD;
    PT08W03.PTWMAP = "1";
  else
    if (PT08M001.PT08DAHD != PT08W03.PTWSVDAN)
      PT08W03.PTWMAP = "1";
      PT08W03.PTWSVDAN = PT08M001.PT08DAHD;
      if (XP1REC.XXXSTAT == "I")
        PT08W03.PTWSVDAN = " ";
        set PT08M001.PT08DAHD cursor, bold;
        XP1REC.XP1MNO = 8;
      else
        PT08M001.PT08DAHD = PT08W03.PTWSVDAN;
      end
    end
  end
    /* END;*/
  converseLib.clearScreen();


   /* ====================== END OF PROCESS ======================*/



end // end PT08252

// Verify All Entered Data
Function PT08253()
   /* ------------------------------------------------------------*/
   /* Edit the entry if any of the fields on a line has data in*/
   /* it.*/
   /* ------------------------------------------------------------*/

  if (PT08M001.XXXSTAT[PTWIXM] != " "
   || PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] != " "
   || PT08M001.XPRCD[PTWIXM] != " "
   || PT08M001.XPCCD[PTWIXM] != " "
   || PT08M001.PC_WHSE_TYP_CD[PTWIXM] != " "
   || PT08M001.PC2CUXID[PTWIXM] != " "
   || PT08M001.FY-FLD-OFC-CD[PTWIXM] != " "
  )
    /* *************************************************************/
    /* *****              edit delivery  code here            ******/
    /* *************************************************************/

    if (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] == "  ") /* if DA spaces*/
      set PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] cursor, bold;
      converseLib.validationFailed(116); /* required field*/
    end

    if (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] == "**") /* if DA spaces*/
      set PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] cursor, bold;
      converseLib.validationFailed(87); /* invalid scheduler code*/
    end

    if (((PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "A1" && 
    PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "A9") || 
    (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "B1" && 
    PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "B9")))
      if (((PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "A1" && 
      PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "A9") && 
      (PT08M001.PC2CUXID[PTWIXM] == "     ")))
        set PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] cursor, bold;
        converseLib.validationFailed(238); /* required field*/
      else
        if (((PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "B1" && 
        PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "B9") && 
        (PT08M001.PC_WHSE_TYP_CD[PTWIXM] == "     ")))
          set PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] cursor, bold;
          converseLib.validationFailed(237); /* required field*/
        end
      end
    else
      if (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] < "30" || 
      PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] > "49")
        set PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] cursor, bold;
        converseLib.validationFailed(157); /* required field*/
      end
      if (((PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] > "29" && 
      PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] < "40") && 
      (PT08M001.PC2CUXID[PTWIXM] == "     ")))
        set PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] cursor, bold;
        converseLib.validationFailed(157); /* required field*/
      end
      if (((PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] > "39" && 
      PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] < "50") && 
      (PT08M001.PC_WHSE_TYP_CD[PTWIXM] == "     ")))
        set PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] cursor, bold;
        converseLib.validationFailed(157); /* required field*/
      end
    end

    /* *************************************************************/
    /* ***** edit status field, only an 'A' is valid for 'add ******/
    /* *************************************************************/

    if (PT08M001.XXXSTAT[PTWIXM] != "A") /* active*/
      set PT08M001.XXXSTAT[PTWIXM] cursor, bold; /* --error--*/
      converseLib.validationFailed(149); /* invalid status*/
    end
    /* *************************************************************/
    /* ***** edit group code                                  ******/
    /* ***** NOTE * even though we use the XPRCD (product     ******/
    /* ***** type code), this is actually the product type    ******/
    /* ***** group code. That's why we can only have 01 or 02 ******/
    /* ***** (Please see JAD for this program).               ******/
    /* *************************************************************/
    if (PT08M001.XPRCD[PTWIXM] == "  ") /**/
      set PT08M001.XPRCD[PTWIXM] cursor, bold;
      converseLib.validationFailed(116); /* required field*/
    else
      if (((PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "A1" && 
      PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "A9") || 
      (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "B1" && 
      PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "B9")))
        if (PT08M001.XPRCD[PTWIXM] != "03") /**/
          set PT08M001.XPRCD[PTWIXM] cursor, bold;
          converseLib.validationFailed(222); /* required field*/
        end
      else
        if (PT08M001.XPRCD[PTWIXM] != "01" && 
        PT08M001.XPRCD[PTWIXM] != "02")
          set PT08M001.XPRCD[PTWIXM] cursor, bold;
          converseLib.validationFailed(152); /* required field*/
        end
      end
    end

    /* *************************************************************/
    /* ***** edit category                                    ******/
    /* *************************************************************/
    if (PT08M001.XPCCD[PTWIXM] == "  ") /**/
      set PT08M001.XPCCD[PTWIXM] cursor, bold;
      converseLib.validationFailed(116); /* required field*/
    else
      if (((PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "A1" && 
      PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "A9") || 
      (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "B1" && 
      PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "B9")))
        if (PT08M001.XPCCD[PTWIXM] != "**")
          set PT08M001.XPCCD[PTWIXM] cursor, bold;
          converseLib.validationFailed(225); /* required field*/
        end
      end
    end
    /* *************************************************************/
    /* ***** can not enter a warehouse AND a customer xref    ******/
    /* ***** on the same record                               ******/
    /* *************************************************************/
    if (PT08M001.PC_WHSE_TYP_CD[PTWIXM] != "  " && 
    PT08M001.PC2CUXID[PTWIXM] != "  ")
      set PT08M001.PC_WHSE_TYP_CD[PTWIXM] cursor, bold;
      converseLib.validationFailed(155); /* required field*/
    end
    /* *************************************************************/
    /* ***** but, must have 1 or the other !                  ******/
    /* *************************************************************/
    if (PT08M001.PC_WHSE_TYP_CD[PTWIXM] == "  " && 
    PT08M001.PC2CUXID[PTWIXM] == "  ")
      set PT08M001.PC_WHSE_TYP_CD[PTWIXM] cursor, bold;
      converseLib.validationFailed(156); /* required field*/
    end
    /* *************************************************************/
    /* *APPAREL DRS ANALYSTS SHOULD HAVE WHSE AS SPACES         ****/
    /* *************************************************************/
    if (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "A1" && 
    PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "A9")
      if (PT08M001.PC_WHSE_TYP_CD[PTWIXM] != "  ")
        set PT08M001.PC_WHSE_TYP_CD[PTWIXM] cursor, bold;
        converseLib.validationFailed(236); /* required field*/
      end
    end
    /* *************************************************************/
    /* *APPAREL whse analysts should have xref as spaces        ****/
    /* *************************************************************/
    if (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "B1" && 
    PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "B9")
      if (PT08M001.PC2CUXID[PTWIXM] != "     ")
        set PT08M001.PC2CUXID[PTWIXM] cursor, bold;
        converseLib.validationFailed(235); /* required field*/
      end
    end

    /* ********************************************************/
    /* validate liaison field office code*/
    /* ********************************************************/

    if (PT08M001.FY-FLD-OFC-CD[PTWIXM] == " ")
      converseLib.validationFailed(231);
      set PT08M001.FY-FLD-OFC-CD[PTWIXM] cursor, bold;
    end

    if (((PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "A1" && 
    PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "A9") || 
    (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] >= "B1" && 
    PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] <= "B9")))
      if (PT08M001.FY-FLD-OFC-CD[PTWIXM] == "**")
        converseLib.validationFailed(231); /* required field*/
        set PT08M001.FY-FLD-OFC-CD[PTWIXM] cursor, bold;
      end
    end
  end

end // end PT08253

// Process valid input request
Function PT08260()
  if (converseVar.validationMsgNum == 0) /* IF no ERRORS found*/
                                 /* ;*/
    PT08W03.PTWIXM = PT08W03.PTWIDX5; /* Initialize index to start*/
    PT08W03.PTWUFL = "N"; /* Initialize Update Flag to "NO"*/

    while (PT08W03.PTWIXM <= PT08W03.PTWMPMAX)
            /* LOOP thru entire screen*/
      /* ***** if any fields were added ***************************/
      if (PT08M001.XXXSTAT[PTWIXM] != " "
       || PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] != " "
       || PT08M001.XPRCD[PTWIXM] != " "
       || PT08M001.XPCCD[PTWIXM] != " "
       || PT08M001.PC_WHSE_TYP_CD[PTWIXM] != " "
       || PT08M001.PC2CUXID[PTWIXM] != " "
       || PT08M001.FY-FLD-OFC-CD[PTWIXM] != " "
      )
        if (COMMAREA.CAADDFL == "Y") /* if have authority*/
          PT08165(); /* verify fields first*/
        else
          converseLib.validationFailed(102); /* not authorized to add*/
          exit stack;
        end
      end /* End of "IF" statement*/

      PT08W03.PTWIXM = PT08W03.PTWIXM + 1; /* Incriment index up by 1*/
    end /* End of "WHILE" statement*/
                                  /* End of "WHILE" statement*/
    if (PT08W03.PT08W2PS == "N"
     || converseVar.eventKey is enter)
      PT08W03.PTWIXM = PT08W03.PTWIDX5; /* Initialize index to start*/

      while ((PT08W03.PTWIXM <= PT08W03.PTWMPMAX)
       && (converseVar.validationMsgNum == 0))
        if (PT08M001.XXXSTAT[PTWIXM] != " "
         || PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] != " "
         || PT08M001.XPRCD[PTWIXM] != " "
         || PT08M001.XPCCD[PTWIXM] != " "
         || PT08M001.PC_WHSE_TYP_CD[PTWIXM] != " "
         || PT08M001.PC2CUXID[PTWIXM] != " "
         || PT08M001.FY-FLD-OFC-CD[PTWIXM] != " "
        )
          PT08264(); /* check for duplicate*/
        end
        PT08W03.PTWIXM = PT08W03.PTWIXM + 1; /* Incriment index up by 1*/
      end

      if (converseVar.validationMsgNum == 0)
        PT08W03.PT08W2PS = "Y";
        converseLib.validationFailed(021);
      /* duplicate overwriting logic*/
      else
        if (converseVar.validationMsgNum == 229) /* overwrite the record*/
          PT08W03.PT08W2PS = "Y";
        end
      /* duplicate overwriting logic*/
      end
      exit stack;
    else
      PT08W03.PT08W2PS = "N";
      PT08W03.PTWIXM = PT08W03.PTWIDX5; /* Initialize index to start*/
      while (PT08W03.PTWIXM <= PT08W03.PTWMPMAX)
        if (PT08M001.XXXSTAT[PTWIXM] != " "
         || PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] != " "
         || PT08M001.XPRCD[PTWIXM] != " "
         || PT08M001.XPCCD[PTWIXM] != " "
         || PT08M001.PC_WHSE_TYP_CD[PTWIXM] != " "
         || PT08M001.PC2CUXID[PTWIXM] != " "
         || PT08M001.FY-FLD-OFC-CD[PTWIXM] != " "
        )
          PT08264();

   /* IF EZEMNO NE 0;          /*Check for duplicates*/
   /* EZEFLO;*/
   /* END;*/
   /* duplicate overwriting logic*/
          if (converseVar.validationMsgNum == 229) /* Check for duplicates*/
            converseLib.validationFailed(0);
            PT08163(); /* Delete the older row*/
          end
   /* duplicate overwriting logic*/

          PT08261(); /* Insert the new row*/
        end
        PT08W03.PTWIXM = PT08W03.PTWIXM + 1; /* Incriment index up by 1*/

      end /* End of "IF" statement*/

    end /* End of "IF" statement*/

    converseLib.validationFailed(01); /* Table updated successfully*/

  end /* End of "IF" statement*/

end // end PT08260

// Insert Into DPRODC.VDLVAN01
Function PT08261()
   /* ------------------------------------------------------------*/
   /* Insert a single row in DB2*/
   /* ------------------------------------------------------------*/

  set VDLVAN02 empty; /* Initialize record*/

   /* ***** move data from map ***********8*****/
   /* ***** don't add a blank record ! ***8*****/
  if (PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] != "  ")
    VDLVAN02.PC_DLVR_ANALYST_CD = PT08M001.PC_DLVR_ANALYST_CD[PTWIXM];
    VDLVAN02.XPRCD = PT08M001.XPRCD[PTWIXM];
    VDLVAN02.XPCCD = PT08M001.XPCCD[PTWIXM];
    VDLVAN02.PC_WHSE_TYP_CD = PT08M001.PC_WHSE_TYP_CD[PTWIXM];
    VDLVAN02.PC2CUXID = PT08M001.PC2CUXID[PTWIXM];
    VDLVAN02.XXXSTAT = PT08M001.XXXSTAT[PTWIXM];
    VDLVAN02.FY-FLD-OFC-CD = PT08M001.FY-FLD-OFC-CD[PTWIXM];
    VDLVAN02.ZZZCHGCT = 0;

    /* ***** get system date & time for insert ******/
    XX0XS01();
    VDLVAN02.ZZZSDT = XX0XW01.XX0XWDAT; /* set up date*/
    VDLVAN02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Move time*/

    try
      call "VDLVAN02" ("A ", SQLCA, VDLVAN02) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Fetch next row*/

    if (sysVar.errorCode == "00000000")
      if (SQLCA.VAGen_SQLCODE == -803) /* duplicate*/
        converseLib.validationFailed(147); /* duplicates not allowed*/
      else
        if (SQLCA.VAGen_SQLCODE != 0) /* DB2 error ( any error )*/

          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          PT08W03.PTWPRCSN = "261 "; /* Process number*/
          TA1REC.TA1FUNC = "RETN"; /* return function*/
          TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
          TA1REC.TA1LOC = "UPDATE A SELECTED TABLE ROW";
          TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
          TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
          TA1REC.TA1TBLVU = "VDLVAN02"; /* Table view name*/
          TA1REC.TA1TBLKE = VDLVAN02.PT8KEY;
                                   /* move tbl key to errdiag*/

          try
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
          end /* Error diagnosis*/

          converseLib.validationFailed(10); /* Indicate error occured*/
          PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

          return; /* Return to previous process*/

        end
      end
    else
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      PT08W03.PTWPRCSN = "261 "; /* Process number*/
      TA1REC.TA1FUNC = "RETN"; /* return function*/
      TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
      TA1REC.TA1LOC = "UPDATE A SELECTED TABLE ROW";
      TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end /* Error diagnosis*/

      converseLib.validationFailed(10); /* Indicate error occured*/
      PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

      return; /* Return to previous process*/
    end
  end
end // end PT08261

// Check for duplicate entry
Function PT08264()
   /* ------------------------------------------------------------*/
   /* Select a single row based on keyed data, if return code*/
   /* okay, this is a duplicate entry....that is not OKAY !*/
   /* ------------------------------------------------------------*/

  set VDLVAN02 empty; /* Initialize record*/

   /* ***** move data from map ******/
  VDLVAN02.PC_DLVR_ANALYST_CD = PT08M001.PC_DLVR_ANALYST_CD[PTWIXM];
  VDLVAN02.XPRCD = PT08M001.XPRCD[PTWIXM];
  VDLVAN02.XPCCD = PT08M001.XPCCD[PTWIXM];
  VDLVAN02.PC_WHSE_TYP_CD = PT08M001.PC_WHSE_TYP_CD[PTWIXM];
  PT08W03.PT08FILL = PT08M001.PC2CUXID[PTWIXM];
  PT08W03.PT08CX02 = "%%";
  VDLVAN02.PC2CUXID = PT08W03.PT08FILL;
  VDLVAN02.FY-FLD-OFC-CD = PT08M001.FY-FLD-OFC-CD[PTWIXM];

  try
    call "VDLVAN02" ("SU", SQLCA, VDLVAN02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  if (sysVar.errorCode == "00000000") /* If call OKAY*/
    if (SQLCA.VAGen_SQLCODE == 100) /* If not found, OKAY not a duplicate*/

      /* ***** now make sure no duplicates on add screen ******/
      PT08W03.PTWIDX2 = PT08W03.PTWIXM - 1;
      PT08W03.PT08SVC1 = PT08M001.PC2CUXID[PTWIXM];
      /* WHILE PT08W03.PTWIDX2 GE PT08W03.PTWMPMAX;*/
      while (PT08W03.PTWIDX2 != 0)
        PT08W03.PT08SVC2 = PT08M001.PC2CUXID[PTWIDX2];
        if (PT08M001.XPRCD[PTWIXM] == PT08M001.XPRCD[PTWIDX2] && 
        ((PT08M001.XPCCD[PTWIXM] == PT08M001.XPCCD[PTWIDX2]) || 
        (PT08M001.XPCCD[PTWIXM] == "**" || 
        PT08M001.XPCCD[PTWIDX2] == "**")) && 
        PT08M001.PC_WHSE_TYP_CD[PTWIXM] == 
        PT08M001.PC_WHSE_TYP_CD[PTWIDX2] && 
        PT08M001.FY-FLD-OFC-CD[PTWIXM] == 
        PT08M001.FY-FLD-OFC-CD[PTWIDX2] && 
        PT08W03.PT08SVC1 == PT08W03.PT08SVC2)
          set PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] cursor, bold;
          converseLib.validationFailed(153); /* Duplicates not allowed*/
          exit stack; /* redisplay*/
        end
        PT08W03.PTWIDX2 = PT08W03.PTWIDX2 - 1;
      end

    else
      if (SQLCA.VAGen_SQLCODE == 0 ||  /* if found on DB*/
      SQLCA.VAGen_SQLCODE == -811)     /* more than 1 row on DB*/
        PT08W02.PT8GROUP[PTWIXM] = VDLVAN02.DANGROUP;
        PT08W03.PT08FILL = PT08M001.PC2CUXID[PTWIXM];
        if (PT08W03.PT08CX02 != "  ")
          if (PT08M001.PC2CUXID[PTWIXM] == VDLVAN02.PC2CUXID)
            set PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] cursor, bold;
            converseLib.validationFailed(229); /* Duplicates not allowed*/
   /* MOVE 147 TO EZEMNO;    /* Duplicates not allowed*/
            return;
          else
            return; /* ok*/
          end
        else
          set PT08M001.PC_DLVR_ANALYST_CD[PTWIXM] cursor, bold;
          converseLib.validationFailed(229); /* Duplicates not allowed*/
   /* MOVE 147 TO EZEMNO;      /* Duplicates not allowed*/
          return;
        end
      else /* ELSE(other DB2 error)*/

        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        PT08W03.PTWPRCSN = "264 "; /* Process number*/
        TA1REC.TA1FUNC = "RETN"; /* Return function*/
        TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
        TA1REC.TA1LOC = "UPDATE A SELECTED TABLE ROW";
        TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/
        TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VDLVAN02"; /* Table view name*/

        try
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        end /* Error*/

        converseLib.validationFailed(10); /* Indicate error occured*/
        PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

        exit stack; /* start over*/

      end
    end
  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PT08W03.PTWPRCSN = "264 "; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* Return function*/
    TA1REC.TA1PGMNM = PT08W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "UPDATE A SELECTED TABLE ROW";
    TA1REC.TA1MAP = PT08W03.XXXMAPNM; /* Map name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diagnosis*/

    converseLib.validationFailed(10); /* Indicate error occured*/
    PT08M001.XXXPRCNM = PT08W03.PTWERLOC; /* Process name*/

    exit stack; /* start over*/

  end



end // end PT08264

//*** RECORD=PT08W02 ****
// Temporary storage record for PT08 - delivery analyst maint.
// ************************************************************
// ***                                                      ***
// *** Maintenance Log :                                    ***
// ***                                                      ***
// ***   DATE    NAME      COMMENT                          ***
// *** --------  --------  -------------------------------- ***
// *** 05/27/97  IDICKI    created                          ***
// *** 12/21/00  VANNAM    Introduced field office code     ***
// ***                                                      ***
// ***                                                      ***
// ************************************************************
// ***********************
Record PT08W02 type basicRecord
  5 PT08LEN PT08LEN ; 
  5 PT8GROUP PT8GROUP [13] ; 
    10 PT8KEY PT8KEY ; 
      15 PC_DLVR_ANALYST_CD PC_DLVR_ANALYST_CD ; 
    10 XPRCD XPRCD ; 
    10 XPCCD XPCCD ; 
    10 PC_WHSE_TYP_CD PC_WHSE_TYP_CD ; 
    10 XXXSTAT XXXSTAT ; 
    10 PC2CUXID PC2CUXID ; 
    10 FY-FLD-OFC-CD FY-FLD-OFC-CD ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PT08W02

//*** RECORD=PT08W03 ****
// Working storage for PT08 delivery analyst
// ***********************
Record PT08W03 type basicRecord
  5 PTWGRP08 PTWGRP08 ; 
    10 * char(34) ; 
      15 PTWNMO PTWNMO ; 
      15 PTWIXM PTWIXM ; 
      15 PTWIX2 PTWIX2 ; 
      15 PTWIDX1 PTWIDX1 ; 
      15 PTWIDX2 PTWIDX2 ; 
      15 PTWIDX3 PTWIDX3 ; 
      15 PTWIDX4 PTWIDX4 ; 
      15 PTWIDX5 PTWIDX5 ; 
      15 PTWSWC PTWSWC ; 
      15 PTWSWR PTWSWR ; 
      15 PTWTSP PTWTSP ; 
      15 PT08W-SAVE-PTWTSP PT08W-SAVE-PTWTSP ; 
      15 PTWFIRST PTWFIRST ; 
      15 TA5TSQIX TA5TSQIX ; 
      15 PTWMAP PTWMAP ; 
    10 PTWERLOC PTWERLOC ; 
      15 PTWAPPL PTWAPPL ; 
      15 PTWPRCSN PTWPRCSN ; 
    10 XXXMAPNM XXXMAPNM ; 
    10 PTWMPMAX PTWMPMAX ; 
    10 PTWUFL PTWUFL ; 
    10 PTWADDFL PTWADDFL ; 
    10 PTWTSQSZ PTWTSQSZ ; 
    10 PTWUSERA PTWUSERA ; 
    10 PTWSVGPC PTWSVGPC ; 
    10 PTWSVTYP PTWSVTYP ; 
    10 PTWSVDAN PTWSVDAN ; 
    10 PT08SVC1 PT08SVC1 ; 
    10 PT08SVC2 PT08SVC2 ; 
    10 PT08FILL PT08FILL ; 
      15 PT08CX03 PT08CX03 ; 
      15 PT08CX02 PT08CX02 ; 
    10 PT08W2PS PT08W2PS ; 
    10 DATA-IN-SW DATA-IN-SW ; 
end // end PT08W03

DataItem DATA-IN-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// User area
DataItem PT08CX02 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// User area
DataItem PT08CX03 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// User area
DataItem PT08FILL char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT08LEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// User area
DataItem PT08SVC1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// User area
DataItem PT08SVC2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved page number
DataItem PT08W-SAVE-PTWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// User area
DataItem PT08W2PS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem PT8GROUP char(31)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PTWGRP08 char(674)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// User area
DataItem PTWSVDAN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// User area
DataItem PTWSVTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

