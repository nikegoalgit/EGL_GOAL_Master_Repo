package pt0e;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import ob.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pt.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PT0E ****
// This application allows a user to inquire against the
// DMODEL.VFTCOV01 database.  This database contains the
// results of the Footwear Futures Delivery Percent calculation
// performed by PT1250.
// 
// The first screen displayed to the user allows specification
// of either a product code, or sales order number.  When a
// single style number is entered with a need date, the info
// from the database for that style/need date will be displayed
// at the bottom of the screen.
// 
// When an order number is entered, another set of screens are
// generated containing a list of all styles for that order.
// A product, or multiple products may be selected from this
// screen for display on the detail screen.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// PT-40    06/18/92  MADAMS  CREATED.
// PT-40    06/23/92  MADAMS  MOVED THINGS AROUND ON SCREEN.
// PT-43    09/02/92  DFRANC  SWITCH WHSE 7 & 2 DETAILS ON SCRN
// PT-45    09/03/93  dbruih  change to display by etal/etalo
//                            dates.
// PT9999   11/09/93  MSMIT2  ABEND when transferring from PT0A
//                            to PT0E.
// PR-605   03/12/97  SVERMA  Make the Screen table driven for
//                            Warehouses as they tend to change
// Y2KFIX   01/13/98  WSQUIR  MODIFICATIONS MADE TO: PT0EW00 &
//                            PT0E-160.
// Y2KFIX   02/10/98  RBANKS  IO6330 IS REPLACED WITH VFTCOV02.
// *********************
Program PT0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PT00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  PC2REC PC2REC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  PT0EW00 PT0EW00; // record
  PT0EW01 PT0EW01; // record
  PT0EW02 PT0EW02; // record
  PT0EW03 PT0EW03; // record
  PT0EW04 PT0EW04; // record
  PT0EW05 PT0EW05; // record
  PTWREC PTWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VFTCOV01 VFTCOV01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL {deleteAfterUse = yes}; // table
  use PT0EM.PT0EM010,  // forms
      PT0EM.PT0EM020
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPT001: XPPT001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set PT0EM010 initial; /* M010 input/output*/
    set PT0EM020 initial; /* M020 input/output*/
    set PT0EW00 empty; /* Working storage*/
    set PT0EW01 empty; /* M010 display storage*/
    set PT0EW02 empty; /* M020 display storage*/
    set PG2REC empty; /* pg syclr01 record*/
    set OP1REC empty; /* order header record*/
    set OP2REC empty; /* order item record*/
    set VFTCOV01 empty; /* PT VFTCOV01 record*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    set PTWREC empty; /* Initialize commarea work rec*/

    PT0EW00.PT0EW-SWD = "1"; /* Map to be displayed switch*/
    PT0EW00.PT0EW-SWF = "Y"; /* Format the map switch*/
    PT0EW00.PT0EW-SWR = "N"; /* Request for data switch*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PT0E-001; /* Converse the main process*/


    PT0E-001: PT0E-001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PT0E-001; /* Converse the main process*/


  end // end main
end // end PT0E

// Main process to display a map
Function PT0E-001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PT0EW00.PT0EW-SWD == "1") /* Map 1 was requested*/

    PT0E-100(); /* Display map 1*/

  else

    if (PT0EW00.PT0EW-SWD == "2") /* Map 2 was requested*/

      PT0E-200(); /* Display map 2*/

    else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/

      PTWREC.XXXMODID = "001"; /* Module identification*/
      PTWREC.XXXMSGNO = 10; /* Unexpected error occurred*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = PT0EW00.PT0EW-SWD; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "PT0M"; /* TO application*/

      XSPT001(); /* Exit to another application*/

      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

      TA1REC.TA1FUNC = "ABND"; /* Termination function*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

  end


end // end PT0E-001

// List the rows in the table
Function PT0E-100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT0E-110(); /* Obtain the data to display*/

  PT0E-120(); /* Format and display the map*/

  PT0E-130(); /* Check attention identifier*/

  PT0E-140(); /* Reset fields to normal intensity*/

  PT0E-150(); /* Verify the entered data*/

  PT0E-160(); /* Process valid input request*/


end // end PT0E-100

// Obtain the data to display
Function PT0E-110()
   /* ------------------------------------------------------------*/
   /* Obtain current date and time.*/
   /* ------------------------------------------------------------*/
  XX0XS01(); /* Obtain date and time*/
  PT0ES-EDIT-DT(); /* get compare date to edit need-date*/

   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  if (PT0EW00.PT0EW-SWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* reset map storage*/
   /* ------------------------------------------------------------*/
  set PT0EW01 empty; /* reset map*/
  set PT0EW03 empty; /* reset map*/
  set PT0EW04 empty; /* reset map*/
  set PT0EW05 empty; /* reset map*/

   /* ------------------------------------------------------------*/
   /* build a screen for the current style in the table*/
   /* ------------------------------------------------------------*/
  if (PT0EW00.PT0EW-IXT <= PT0EW00.PT0EW-IXTHIGH /* styles there*/
   && PT0EW00.PT0EW-IXT >= 0)                    /* styles there*/
   /* ------------------------------------------------------------*/
   /* first get the style and color descriptions.*/
   /* ------------------------------------------------------------*/
    set PG2REC empty; /* Clear row storage area*/
    PG2REC.XGPCD = "02"; /* GPC code*/
    PG2REC.SY1STNBR = PT0EW00.SY1STNBR[PT0EW-IXT]; /* Style number*/
    PG2REC.SY2CLRID = PT0EW00.SY2CLRID[PT0EW-IXT]; /* color*/
    PG2REC.XDMCD = PT0EW00.XDMCD[PT0EW-IXT]; /* dim*/

    PT0ES-S07();
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      PT0EW01.SY1SSTNM = "NOT FOUND"; /* move style desc*/
      PT0EW01.SY2CLRAB = "NOT FOUND"; /* move color desc*/
    else
      PT0EW01.SY1SSTNM = PG2REC.SY1SSTNM; /* move style desc*/
      PT0EW01.SY2CLRAB = PG2REC.SY2CLRAB; /* move color desc*/
    end
   /* ------------------------------------------------------------*/
   /* move header stuff*/
   /* ------------------------------------------------------------*/
    if (PT0EW00.PT0EW-STYORLISTSW == "L") /* If from order list*/
      PT0EW01.PT0EM-NEEDDT = PT0EW00.PT0EW-ORDNEEDDT; /* ord need dt*/
    else
      PT0EW01.PT0EM-NEEDDT = PT0EW00.PT0EM-NEEDDT; /* Screen need dt*/
    end
    PT0EW01.OP1CUOID = PT0EW00.OP1CUOID; /* Order number*/
    PT0EW01.OP1NORID = PT0EW00.OP1NORID; /* Sub order nbr*/
    PT0EW01.PC2CUXID = PT0EW00.PC2CUXID; /* Cust xref*/
    PT0EW01.SY1STNBR = PT0EW00.SY1STNBR[PT0EW-IXT]; /* Style number*/
    PT0EW01.SY2CLRID = PT0EW00.SY2CLRID[PT0EW-IXT]; /* color*/
    PT0EW01.XDMCD = PT0EW00.XDMCD[PT0EW-IXT]; /* dim*/
    if (PT0EW00.PT0EW-STYORLISTSW == "L") /* if from list*/
      PT0EW01.XWHCD = PT0EW00.XWHCD; /* warehouse*/
      PT0EW01.PC2INSEG = PT0EW00.PC2INSEG[PT0EW-IXT]; /* iseg*/
    else
      PT0EW01.XWHCD = " "; /* blank out warehouse*/
      PT0EW01.PC2INSEG = " "; /* blank out iseg*/
    end
    PT0E-116(); /* Declare/Open cursor*/
    PT0EW00.PT0EW-WHSE-IX1 = 1;
    PT0EW00.PT0EW-SWC = "N"; /* End of cursor switch*/
    while (PT0EW00.PT0EW-WHSE-IX1 < 5
     && PT0EW00.PT0EW-SWC == "N")
      PT0E-117(); /* fetch warehouses one at a time*/
    end
    PT0E-118(); /* close cursor*/
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the style to be formatted.*/
   /* ------------------------------------------------------------*/
    PT0E-113(); /* Select set and open cursor*/
   /* ------------------------------------------------------------*/
   /* Fetch and format the data into w/s until end of cursor.*/
   /* ------------------------------------------------------------*/
    PT0EW00.PT0EW-SWC = "N"; /* End of cursor switch*/
    PT0E-114(); /* Fetch first row in the cursor*/
   /* ------------------------------------------------------------*/
   /* If end of cursor, move no data to display message,*/
   /* else, save data in display storage.*/
   /* ------------------------------------------------------------*/

    if (PT0EW00.PT0EW-SWC != "N") /* end of cursor*/
      PTWREC.XXXMODID = "110"; /* Module identification*/
      PTWREC.XXXMSGNO = 18; /* No data was found to display*/
    else
      PT0EW00.PT0EW-IX3 = 1; /* Display line index*/
      PT0EW00.PT0EW-IX4 = 1; /* Display line index*/
      PT0EW00.PT0EW-IX5 = 1; /* Display line index*/
      while (PT0EW00.PT0EW-SWC == "N") /* Until end of cursor*/
        PT0EW00.PT0EW-CCYYMMDD = VFTCOV01.PT-ETAL-ETALO-DT;
        PT0EW00.PT0EW-FORMATDATEMM = PT0EW00.PT0EW-MM;
        PT0EW00.PT0EW-FORMATDATEDD = PT0EW00.PT0EW-DD;
        PT0EW00.PT0EW-FORMATDATESL = "/";
        if (VFTCOV01.XWHCD == PT0EW00.PT0EW-VAL-WHSE[3])
          PT0EW03.PT0EM-COVDT2[PT0EW-IX3] = PT0EW00.PT0EW-FORMATDATE;
          PT0EW03.PT0EM-COVPCT2[PT0EW-IX3] = VFTCOV01.PT-FUTR-COV-PCT;
          PT0EW03.PT0EM-COVQTY2[PT0EW-IX3] = VFTCOV01.PT-FUTR-COV-QTY;
          PT0EW00.PT0EW-IX3 = PT0EW00.PT0EW-IX3 + 1; /* increment index*/
        end
        if (VFTCOV01.XWHCD == PT0EW00.PT0EW-VAL-WHSE[2])
          PT0EW04.PT0EM-COVDT4[PT0EW-IX4] = PT0EW00.PT0EW-FORMATDATE;
          PT0EW04.PT0EM-COVPCT4[PT0EW-IX4] = VFTCOV01.PT-FUTR-COV-PCT;
          PT0EW04.PT0EM-COVQTY4[PT0EW-IX4] = VFTCOV01.PT-FUTR-COV-QTY;
          PT0EW00.PT0EW-IX4 = PT0EW00.PT0EW-IX4 + 1; /* increment index*/
        end
        if (VFTCOV01.XWHCD == PT0EW00.PT0EW-VAL-WHSE[1])
          PT0EW05.PT0EM-COVDT7[PT0EW-IX5] = PT0EW00.PT0EW-FORMATDATE;
          PT0EW05.PT0EM-COVPCT7[PT0EW-IX5] = VFTCOV01.PT-FUTR-COV-PCT;
          PT0EW05.PT0EM-COVQTY7[PT0EW-IX5] = VFTCOV01.PT-FUTR-COV-QTY;
          PT0EW00.PT0EW-IX5 = PT0EW00.PT0EW-IX5 + 1; /* increment index*/
        end
        PT0E-114(); /* Fetch next row in the cursor*/
      end
      PT0EW00.PT0EW-IXWHIGH = PT0EW00.PT0EW-IX3;
      if (PT0EW00.PT0EW-IX4 > PT0EW00.PT0EW-IXWHIGH)
        PT0EW00.PT0EW-IXWHIGH = PT0EW00.PT0EW-IX4;
      end
      if (PT0EW00.PT0EW-IX5 > PT0EW00.PT0EW-IXWHIGH)
        PT0EW00.PT0EW-IXWHIGH = PT0EW00.PT0EW-IX5;
      end
      PT0EW00.PT0EW-IXWHIGH = PT0EW00.PT0EW-IXWHIGH - 1;
      PT0EW00.PT0EW-IXW = 1;
    end
   /* ------------------------------------------------------------*/
    /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

    PT0E-115(); /* Close the selected set cursor*/
  else
    PTWREC.XXXMODID = "110"; /* Module identification*/
    PTWREC.XXXMSGNO = 42; /* No data was found to display*/
  end
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PT0EW00.PT0EW-SWR = "N"; /* Request for data switch*/

end // end PT0E-110

// Open DMODEL.VFTCOV01
Function PT0E-113()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set VFTCOV01 empty; /* Clear row storage area*/

   /* ------------------------------------------------------------*/
   /* set up key*/
   /* ------------------------------------------------------------*/
  VFTCOV01.SY1STNBR = PT0EW00.SY1STNBR[PT0EW-IXT]; /* style*/
  VFTCOV01.SY2CLRID = PT0EW00.SY2CLRID[PT0EW-IXT]; /* color*/
  VFTCOV01.PC2INSEG = PT0EW00.PC2INSEG[PT0EW-IXT]; /* iseg*/
  VFTCOV01.PT3YYMM = PT0EW00.PT3YYMM; /* period mo*/
   /* ------------------------------------------------------------*/
   /* If dim is missing, default it to 00.*/
   /* ------------------------------------------------------------*/
  if (PT0EW00.XDMCD == " ") /* If not there*/
    VFTCOV01.XDMCD = "00"; /* default to 00*/
  else
    VFTCOV01.XDMCD = PT0EW00.XDMCD[PT0EW-IXT]; /* dimension*/
  end

   /* ------------------------------------------------------------*/
   /* Open dmodel.vftcov01*/
   /* ------------------------------------------------------------*/
  try
    call "VFTCOV02" ("S2", SQLCA, VFTCOV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select tble row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "113"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFTCOV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFTCOV01.VFTCOV01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0E-113

// Fetch VFTCOV01
Function PT0E-114()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VFTCOV02" ("N2", SQLCA, VFTCOV01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch nxt row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      PT0EW00.PT0EW-SWC = "Y"; /* Indicate end of cursor*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  PTWREC.XXXMODID = "114"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFTCOV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFTCOV01.VFTCOV01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0E-114

// Close VFTCOV01
Function PT0E-115()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "VFTCOV02" ("C2", SQLCA, VFTCOV01) {isNoRefresh = yes, isExternal = yes};
  end /* Close tbl set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "115"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFTCOV01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0E-115

// Declare Open Cursor for WHouse
Function PT0E-116()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  PT0EW00.PT0EW-VAL-WHSE[1] = " ";
  PT0EW00.PT0EW-VAL-WHSE[2] = " ";
  PT0EW00.PT0EW-VAL-WHSE[3] = " ";
  set VFTCOV01 empty; /* Clear row storage area*/

   /* ------------------------------------------------------------*/
   /* set up key*/
   /* ------------------------------------------------------------*/
  VFTCOV01.SY1STNBR = PT0EW00.SY1STNBR[PT0EW-IXT]; /* style*/
  VFTCOV01.SY2CLRID = PT0EW00.SY2CLRID[PT0EW-IXT]; /* color*/
   /* ------------------------------------------------------------*/
   /* If dim is missing, default it to 00.*/
   /* ------------------------------------------------------------*/
  if (PT0EW00.XDMCD == " ") /* If not there*/
    VFTCOV01.XDMCD = "00"; /* default to 00*/
  else
    VFTCOV01.XDMCD = PT0EW00.XDMCD[PT0EW-IXT]; /* dimension*/
  end

   /* ------------------------------------------------------------*/
   /* Open dmodel.vftcov01*/
   /* ------------------------------------------------------------*/
  try
    call "VFTCOV02" ("S3", SQLCA, VFTCOV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select tbl row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "116"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFTCOV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFTCOV01.VFTCOV01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0E-116

// Fetch the Cursor for Whouse
Function PT0E-117()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VFTCOV02" ("N3", SQLCA, VFTCOV01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (PT0EW00.PT0EW-WHSE-IX1 < 4)
        PT0EW00.PT0EW-VAL-WHSE[PT0EW-WHSE-IX1] = VFTCOV01.XWHCD;
        PT0EW00.PT0EW-WHSE-IX1 = PT0EW00.PT0EW-WHSE-IX1 + 1;
        return; /* Return to previous process*/
      else
        converseLib.validationFailed(146);
        PT0EW00.PT0EW-WHSE-IX1 = 99;
        return; /* Return to previous process*/
      end
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      PT0EW00.PT0EW-SWC = "Y"; /* Indicate end of cursor*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  PTWREC.XXXMODID = "117"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFTCOV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFTCOV01.VFTCOV01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0E-117

// Close the Cursor for Whouse
Function PT0E-118()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "VFTCOV02" ("C3", SQLCA, VFTCOV01) {isNoRefresh = yes, isExternal = yes};
  end /* Close tbl set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "118"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFTCOV01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0E-118

// Format and converse the map
Function PT0E-120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PT0EW00.PT0EW-SWR == "Y"          /* Obtain data failed*/
   || converseVar.validationMsgNum == 0 /* or no error found*/
   || converseVar.validationMsgNum == 146) /* or more than three warehouses*/

    if (PT0EW00.PT0EW-SWF == "Y") /* Map must be formatted*/
      PT0E-121(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PT0EM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT0EM010.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PT0EM010.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    if (PTWREC.XXXMSGNO != 0) /* Message to display*/
      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT0EM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
    end
    PT0EM010.XXXMODID = PTWREC.XXXMODID; /* Module identification*/
    set PT0EM010 alarm; /* Indicate sound alarm*/
  end

  if (PT0EW00.PT0EW-STYORLISTSW == "L") /* from selection screen*/
    set PT0EM010.PT0EM-NEEDDT skip; /* Need date*/
    set PT0EM010.OP1CUOID skip; /* Order number*/
    set PT0EM010.OP1NORID skip; /* Sub order nbr*/
    set PT0EM010.SY1STNBR skip; /* Style number*/
    set PT0EM010.SY2CLRID skip; /* Color*/
    set PT0EM010.XDMCD skip; /* dim*/
    set PT0EM010.PC2CUXID skip; /* cust xref*/
    set PT0EM010.PT0EM-PF12 initialAttributes; /* PF7 option on scrn*/
    set PT0EM010.PT0EM-PF24 initialAttributes; /* PF8 option on scrn*/
    set PT0EM010.CATOAP cursor; /* set cursor*/
  else
    set PT0EM010.PT0EM-PF12 invisible, skip; /* PF7 option on scrn*/
    set PT0EM010.PT0EM-PF24 invisible, skip; /* PF8 option on scrn*/
  end

  converse PT0EM010 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = " "; /* Module identification*/
  PTWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PT0EM010.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PT0EM010.CAITEM; /* Application data*/


end // end PT0E-120

// Format the display data
Function PT0E-121()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PT0EM010 initial; /* m010 input/output area*/

  PT0EW00.PT0EW-SWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PT0EM010.SY1SSTNM = PT0EW01.SY1SSTNM; /* move style desc*/
  PT0EM010.SY2CLRAB = PT0EW01.SY2CLRAB; /* move color desc*/
  PT0EM010.PT0EM-NEEDDT = PT0EW01.PT0EM-NEEDDT; /* Need date*/
  PT0EM010.OP1CUOID = PT0EW01.OP1CUOID; /* Order number*/
  PT0EM010.OP1NORID = PT0EW01.OP1NORID; /* Sub order nbr*/
  PT0EM010.SY1STNBR = PT0EW01.SY1STNBR; /* Style number*/
  PT0EM010.SY2CLRID = PT0EW01.SY2CLRID; /* Color*/
  PT0EM010.XDMCD = PT0EW01.XDMCD; /* dim*/
  PT0EM010.PC2CUXID = PT0EW01.PC2CUXID; /* cust xref*/
  PT0EM010.XWHCD = PT0EW01.XWHCD; /* warehouse*/
  PT0EM010.PC2INSEG = PT0EW01.PC2INSEG; /* iseg*/
  if (PT0EW00.PT0EW-VAL-WHSE[1] > " ")
    PT0EM010.VAL-WHSE[1] = PT0EW00.PT0EW-VAL-WHSE[1];
    PT0EM010.LINE12-LIT[1] = "PERCENT  QUANTITY";
    PT0EM010.LINE13-LIT1[1] = "DATE";
    PT0EM010.LINE13-LIT2[1] = "COVERED";
    PT0EM010.LINE13-LIT3[1] = "COVERED";
    if (PT0EW00.PT0EW-VAL-WHSE[2] > " ")
      PT0EM010.VAL-WHSE[2] = PT0EW00.PT0EW-VAL-WHSE[2];
      PT0EM010.LINE12-LIT[2] = "PERCENT  QUANTITY";
      PT0EM010.LINE13-LIT1[2] = "DATE";
      PT0EM010.LINE13-LIT2[2] = "COVERED";
      PT0EM010.LINE13-LIT3[2] = "COVERED";
      if (PT0EW00.PT0EW-VAL-WHSE[3] > " ")
        PT0EM010.VAL-WHSE[3] = PT0EW00.PT0EW-VAL-WHSE[3];
        PT0EM010.LINE12-LIT[3] = "PERCENT  QUANTITY";
        PT0EM010.LINE13-LIT1[3] = "DATE";
        PT0EM010.LINE13-LIT2[3] = "COVERED";
        PT0EM010.LINE13-LIT3[3] = "COVERED";
      else
        set PT0EM010.VAL-WHSE[3] invisible, skip;
        set PT0EM010.LINE12-LIT[3] invisible, skip;
        set PT0EM010.LINE13-LIT1[3] invisible, skip;
        set PT0EM010.LINE13-LIT2[3] invisible, skip;
        set PT0EM010.LINE13-LIT3[3] invisible, skip;
      end
    else
      set PT0EM010.VAL-WHSE[2] invisible, skip;
      set PT0EM010.LINE12-LIT[2] invisible, skip;
      set PT0EM010.LINE13-LIT1[2] invisible, skip;
      set PT0EM010.LINE13-LIT2[2] invisible, skip;
      set PT0EM010.LINE13-LIT3[2] invisible, skip;
      set PT0EM010.VAL-WHSE[3] invisible, skip;
      set PT0EM010.LINE12-LIT[3] invisible, skip;
      set PT0EM010.LINE13-LIT1[3] invisible, skip;
      set PT0EM010.LINE13-LIT2[3] invisible, skip;
      set PT0EM010.LINE13-LIT3[3] invisible, skip;
    end
  else
    set PT0EM010.VAL-WHSE[1] invisible, skip;
    set PT0EM010.LINE12-LIT[1] invisible, skip;
    set PT0EM010.LINE13-LIT1[1] invisible, skip;
    set PT0EM010.LINE13-LIT2[1] invisible, skip;
    set PT0EM010.LINE13-LIT3[1] invisible, skip;
    set PT0EM010.LINE13-LIT1[1] invisible, skip;
    set PT0EM010.LINE13-LIT2[1] invisible, skip;
    set PT0EM010.LINE13-LIT3[1] invisible, skip;
    set PT0EM010.VAL-WHSE[2] invisible, skip;
    set PT0EM010.LINE12-LIT[2] invisible, skip;
    set PT0EM010.LINE13-LIT1[2] invisible, skip;
    set PT0EM010.LINE13-LIT2[2] invisible, skip;
    set PT0EM010.LINE13-LIT3[2] invisible, skip;
    set PT0EM010.VAL-WHSE[3] invisible, skip;
    set PT0EM010.LINE12-LIT[3] invisible, skip;
    set PT0EM010.LINE13-LIT1[3] invisible, skip;
    set PT0EM010.LINE13-LIT2[3] invisible, skip;
    set PT0EM010.LINE13-LIT3[3] invisible, skip;
  end


  PT0EW00.PT0EW-IXM = 1; /* map line index*/

   /* set working storage index for first time thru:*/
  if (PT0EW00.PT0EW-IXW == 0)
    PT0EW00.PT0EW-IXW = 1;
    PT0EW00.PT0EW-IXWSAV = 1;
    PT0EW00.PT0EW-IXWHIGH = 1;
  else
    PT0EW00.PT0EW-IXWSAV = PT0EW00.PT0EW-IXW;
  end

  while (PT0EW00.PT0EW-IXM <= 6 /* Until end of map*/
   && PT0EW00.PT0EW-IXW <= PT0EW00.PT0EW-IXWHIGH)
    if (PT0EW03.PT0EM-COVDT2[PT0EW-IXW] > " ") /* something there*/
      PT0EM010.PT0EM-COVDT2[PT0EW-IXM] = PT0EW03.PT0EM-COVDT2[PT0EW-IXW];
      PT0EM010.PT0EM-COVPCT2[PT0EW-IXM] = PT0EW03.PT0EM-COVPCT2[PT0EW-IXW];
      PT0EM010.PT0EM-COVQTY2[PT0EW-IXM] = PT0EW03.PT0EM-COVQTY2[PT0EW-IXW];
    else
      set PT0EM010.PT0EM-COVDT2[PT0EW-IXM] invisible, skip;
      set PT0EM010.PT0EM-COVPCT2[PT0EW-IXM] invisible, skip;
      set PT0EM010.PT0EM-COVQTY2[PT0EW-IXM] invisible, skip;
    end
    if (PT0EW04.PT0EM-COVDT4[PT0EW-IXW] > " ") /* something there*/
      PT0EM010.PT0EM-COVDT4[PT0EW-IXM] = PT0EW04.PT0EM-COVDT4[PT0EW-IXW];
      PT0EM010.PT0EM-COVPCT4[PT0EW-IXM] = PT0EW04.PT0EM-COVPCT4[PT0EW-IXW];
      PT0EM010.PT0EM-COVQTY4[PT0EW-IXM] = PT0EW04.PT0EM-COVQTY4[PT0EW-IXW];
    else
      set PT0EM010.PT0EM-COVDT4[PT0EW-IXM] invisible, skip;
      set PT0EM010.PT0EM-COVPCT4[PT0EW-IXM] invisible, skip;
      set PT0EM010.PT0EM-COVQTY4[PT0EW-IXM] invisible, skip;
    end
    if (PT0EW05.PT0EM-COVDT7[PT0EW-IXW] > " ") /* something there*/
      PT0EM010.PT0EM-COVDT7[PT0EW-IXM] = PT0EW05.PT0EM-COVDT7[PT0EW-IXW];
      PT0EM010.PT0EM-COVPCT7[PT0EW-IXM] = PT0EW05.PT0EM-COVPCT7[PT0EW-IXW];
      PT0EM010.PT0EM-COVQTY7[PT0EW-IXM] = PT0EW05.PT0EM-COVQTY7[PT0EW-IXW];
    else
      set PT0EM010.PT0EM-COVDT7[PT0EW-IXM] invisible, skip;
      set PT0EM010.PT0EM-COVPCT7[PT0EW-IXM] invisible, skip;
      set PT0EM010.PT0EM-COVQTY7[PT0EW-IXM] invisible, skip;
    end
    PT0EW00.PT0EW-IXM = PT0EW00.PT0EW-IXM + 1; /* increment map index*/
    PT0EW00.PT0EW-IXW = PT0EW00.PT0EW-IXW + 1; /* increment ws index*/
  end
  PT0EW00.PT0EW-IXW = PT0EW00.PT0EW-IXWSAV; /* reset index*/

end // end PT0E-121

// Check attention identifier
Function PT0E-130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    if (PT0EW00.PT0EW-SWR == "Y") /* Request for data*/
      set PT0EW01 empty; /* m010 display storage*/
    end

    PT0EW00.PT0EW-SWF = "Y"; /* Format the map switch*/
    PT0EW00.PT0EW-SWR = "N"; /* Request for data switch*/
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PT0EM010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      PT0E-211(); /* Purge temporary storage*/
      XSPT001(); /* Exit to another application*/
      set PT0EM010.CATOAP cursor, bold; /* Highlight*/
      PT0EW00.PT0EW-SWR = "Y"; /* Request for data switch*/
    else
      PTWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
    end
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Cannot page when not from list of styles*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf12 /* if pf12 was pressed*/
   || converseVar.eventKey is pf24) /* or PF24 was pressed*/
    if (PT0EW00.PT0EW-STYORLISTSW != "L") /* not from list*/
      PTWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
      if (converseVar.eventKey is pakey) /* PA key was pressed*/
        converseLib.clearScreen();
         /* Clear screen before display*/
      end
      exit stack; /* Exit to display map*/
    end
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PT0EM010"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      if (PT0EW00.PT0EW-STYORLISTSW == "L") /* back to list*/
        PT0EW00.PT0EW-SWD = "2"; /* Map to be displayed switch*/
        PT0EW00.PT0EW-SWF = "Y"; /* Format the map switch*/
        exit stack; /* Return to previous process*/
      else
        COMMAREA.CATOAP = "PT0M"; /* TO application*/
      end
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "PT0E"; /* TO application*/
    end
    PT0E-211(); /* Purge temporary storage*/
    XSPT001(); /* Exit to another application*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf12  /* and PF8 was not pressed*/
   && converseVar.eventKey not pf24) /* and PF8 was not pressed*/
    PTWREC.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Exit to display map*/
  end
end // end PT0E-130

// Reset highlighted fields
Function PT0E-140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PT0EM010.PT0EM-NEEDDT initialAttributes; /* Need date*/
  set PT0EM010.OP1CUOID initialAttributes; /* Customer order ID*/
  set PT0EM010.OP1NORID initialAttributes; /* Nike order ID*/
  set PT0EM010.SY1STNBR initialAttributes; /* Style*/
  set PT0EM010.SY2CLRID initialAttributes; /* Color*/
  set PT0EM010.XDMCD initialAttributes; /* Dimension*/
  set PT0EM010.PC2CUXID initialAttributes; /* Customer XREF*/

  set PT0EM010.CATOAP initialAttributes; /* TO application*/
  set PT0EM010.CAITEM initialAttributes; /* Application data*/


end // end PT0E-140

// Verify data that was entered
Function PT0E-150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PT0EM010.CAITEM > " ") /* Application data was entered*/
    PTWREC.XXXMODID = "150"; /* Module identification*/
    set PT0EM010.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7  /* Scroll back request*/
   || converseVar.eventKey is pf8  /* or scroll forward request*/
   || converseVar.eventKey is pf12 /* or previous product from list*/
   || converseVar.eventKey is pf24) /* or next product from list*/
    PT0E-151(); /* Verify scroll request*/
  else
    PT0E-152(); /* Edit screen key fields*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end PT0E-150

// Verify scroll request
Function PT0E-151()
   /* ------------------------------------------------------------*/
   /* If scroll back from pt0em010 rows, ensure that ws row exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back request*/
    if (PT0EW00.PT0EW-IXWSAV <= 1) /* No previous page*/
      PTWREC.XXXMODID = "151"; /* Module identification*/
      converseLib.validationFailed(45); /* No previous periods to display*/
      PT0EW00.PT0EW-IXWSAV = 1; /* reset index to top*/
    else
      if (PT0EW00.PT0EW-IXWSAV < 6) /* no previous page*/
        PT0EW00.PT0EW-IXWSAV = 1; /* reset index to top*/
      else
        PT0EW00.PT0EW-IXWSAV = PT0EW00.PT0EW-IXWSAV - 6; /* calc prev*/
      end
    end
    PT0EW00.PT0EW-IXW = PT0EW00.PT0EW-IXWSAV; /* set ws index*/
  end

   /* ------------------------------------------------------------*/
   /* If scroll forward from pt0em010, ensure that ws rows exist.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* * Scroll forward request*/
    PT0EW00.PT0EW-IXWSAV = PT0EW00.PT0EW-IXWSAV + 6; /* calc next*/
    if (PT0EW00.PT0EW-IXWSAV > PT0EW00.PT0EW-IXWHIGH)
      PTWREC.XXXMODID = "151"; /* Module identification*/
      converseLib.validationFailed(46); /* No more pages to display*/
      PT0EW00.PT0EW-IXWSAV = PT0EW00.PT0EW-IXW; /* reset sav*/
    else
      PT0EW00.PT0EW-IXW = PT0EW00.PT0EW-IXWSAV; /* set ws idx*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf12 /* Scroll back request*/
   && PT0EW00.PT0EW-IXT < 2)       /* and no previous pages*/
    PTWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(126); /* No previous products display*/
  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf24 /* Scroll forward request*/
   && PT0EW00.PT0EW-IXT >= PT0EW00.PT0EW-IXTHIGH) /* and no more pages*/
    PTWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(127); /* No more products to display*/
  end

end // end PT0E-151

// Verify data that was entered
Function PT0E-152()
  /* ------------------------------------------------------------*/
  /* If from list only edit scroll.*/
  /* ------------------------------------------------------------*/
  if (PT0EW00.PT0EW-STYORLISTSW == "L") /* from list*/
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

    if (converseVar.eventKey is enter    /* Scroll forward request*/
     && PT0EW00.PT0EW-STYORLISTSW == "L" /* from list of styles*/
     && PT0EM010.PT0EM-NEEDDT == PT0EW01.PT0EM-NEEDDT
     /* need dt cannot chg*/
     && PT0EW00.PT0EW-IXT >= PT0EW00.PT0EW-IXTHIGH)
                                   /* and no more pages*/

      PTWREC.XXXMODID = "151"; /* Module identification*/
      converseLib.validationFailed(3); /* No more pages to display*/

    end
  else
   /* ------------------------------------------------------------*/
   /* Check for key changes*/
   /* ------------------------------------------------------------*/
    if (PT0EM010.OP1CUOID != PT0EW01.OP1CUOID /* if order changed*/
     || PT0EM010.OP1NORID != PT0EW01.OP1NORID /* or sub order changed*/
     || PT0EM010.SY1STNBR != PT0EW01.SY1STNBR /* or style changed*/
     || PT0EM010.SY2CLRID != PT0EW01.SY2CLRID /* or color changed*/
     || PT0EM010.XDMCD != PT0EW01.XDMCD       /* or dimension chg*/
     || PT0EM010.PC2CUXID != PT0EW01.PC2CUXID /* or cust xref chg*/
     || PT0EM010.PT0EM-NEEDDT != PT0EW01.PT0EM-NEEDDT) /* if need dt chg*/
   /* ------------------------------------------------------------*/
   /* Style and Order cannot both be blank*/
   /* ------------------------------------------------------------*/
      if (PT0EM010.SY1STNBR == "      " /* style blank*/
       && PT0EM010.OP1CUOID == 0)       /* and order blank*/
        PTWREC.XXXMODID = "152"; /* Module identification*/
        set PT0EM010.SY1STNBR cursor, bold; /* Highlight*/
        set PT0EM010.OP1CUOID bold; /* Highlight*/
        converseLib.validationFailed(116); /* missing or invalid*/
        return;
      end
   /* ------------------------------------------------------------*/
   /* Style and Order cannot both contain something*/
   /* ------------------------------------------------------------*/
      if (PT0EM010.SY1STNBR > " " /* style not blank*/
       && PT0EM010.OP1CUOID > 0)  /* and order not blank*/
        PTWREC.XXXMODID = "152"; /* Module identification*/
        set PT0EM010.SY1STNBR cursor, bold; /* Highlight*/
        set PT0EM010.OP1CUOID bold; /* Highlight*/
        converseLib.validationFailed(121); /* cannot both be entered*/
        return;
      end
   /* ------------------------------------------------------------*/
   /* Need date may not be blank if style has something in it*/
   /* ------------------------------------------------------------*/
      if (PT0EM010.PT0EM-NEEDDT == 0 /* need date blank*/
       && PT0EM010.SY1STNBR > " ")   /* style not blank*/
        PTWREC.XXXMODID = "152"; /* Module identification*/
        set PT0EM010.PT0EM-NEEDDT cursor, bold; /* Highlight*/
        converseLib.validationFailed(116); /* missing or invalid*/
        return;
      end
   /* ------------------------------------------------------------*/
   /* Need date may not be entered if order number has*/
   /* ------------------------------------------------------------*/
      if (PT0EM010.PT0EM-NEEDDT > 0 /* need date blank*/
       && PT0EM010.OP1CUOID > 0)    /* and order not blank*/
        PTWREC.XXXMODID = "152"; /* Module identification*/
        set PT0EM010.PT0EM-NEEDDT cursor, bold; /* Highlight*/
        converseLib.validationFailed(123); /* missing or invalid*/
        return;
      end
    /* ------------------------------------------------------------*/
    /* Edit need date.*/
    /* ------------------------------------------------------------*/
      if (PT0EM010.PT0EM-NEEDDT != PT0EW01.PT0EM-NEEDDT) /* if need dt chg*/
        if (PT0EM010.PT0EM-NEEDDT > 0) /* if need date entered*/
          PT0EW00.PT0EW-NMMDDYY = PT0EM010.PT0EM-NEEDDT;
                                   /* move to work*/
          if (PT0EW00.PT0EW-NMM > 12
           || PT0EW00.PT0EW-NMM < 1)
            PTWREC.XXXMODID = "152"; /* Module identification*/
            set PT0EM010.PT0EM-NEEDDT cursor, bold; /* Highlight*/
            converseLib.validationFailed(81); /* date invalid*/
            return;
          end
          if (PT0EW00.PT0EW-NDD > 31
           || PT0EW00.PT0EW-NDD < 1)
            PTWREC.XXXMODID = "152"; /* Module identification*/
            set PT0EM010.PT0EM-NEEDDT cursor, bold; /* Highlight*/
            converseLib.validationFailed(81); /* date invalid*/
            return;
          end
          PT0EW00.PT0EW-YY = PT0EW00.PT0EW-NYY; /* reformat year*/
          PT0EW00.PT0EW-MM = PT0EW00.PT0EW-NMM; /* reformat month*/
          PT0EW00.PT0EW-DD = PT0EW00.PT0EW-NDD; /* reformat day*/
          if (PT0EW00.PT0EW-YY > 90) /* reformat year*/
            PT0EW00.PT0EW-CC = 19; /* load century*/
          else
            PT0EW00.PT0EW-CC = 20; /* load century*/
          end
        end
      end

   /* ------------------------------------------------------------*/
   /* edit need date*/
   /* ------------------------------------------------------------*/

      if (PT0EW00.PT0EW-CCYYMMDD > PT0EW00.PT0EW-EDIT-CCYYMMDD)
        converseLib.validationFailed(125); /* need date may not be greater than*/
                                   /* current + nbr of months passed*/
                                   /* in dummy rec in ftcov database.*/
        set PT0EM010.PT0EM-NEEDDT cursor, bold;
      end

   /* ------------------------------------------------------------*/
   /* Verify the Dimension code.*/
   /* ------------------------------------------------------------*/
      if (PT0EM010.XDMCD > "  ") /* dimension entered*/
        if (PT0EM010.XDMCD in XDMTBL.XDMCD) /* Code in table*/
          if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
            /* NEXT SENTENCE*/
          else
         /* ------------------------------------------------------------*/
         /* If inactive*/
         /* ------------------------------------------------------------*/
            PTWREC.XXXMODID = "152"; /* Module identification*/
            set PT0EM010.XDMCD cursor, bold; /* Highlight*/
            converseLib.validationFailed(30); /* dimension missing/invalid*/
            return;
          end
        else
       /* ------------------------------------------------------------*/
       /* If not found*/
       /* ------------------------------------------------------------*/
          PTWREC.XXXMODID = "152"; /* Module identification*/
          set PT0EM010.XDMCD cursor, bold; /* Highlight*/
          converseLib.validationFailed(30); /* dimension missing/invalid*/
          return;
        end
      else
        PT0EM010.XDMCD = "00"; /* default to zero*/
      end

   /* ------------------------------------------------------------*/
   /* If Style, Color, and Dim entered, validate product*/
   /* ------------------------------------------------------------*/
      if (PT0EM010.SY1STNBR != PT0EW01.SY1STNBR /* style changed*/
       || PT0EM010.SY2CLRID != PT0EW01.SY2CLRID) /* style changed*/
        PT0EM010.SY1SSTNM = " "; /* init style name*/
        PT0EM010.SY2CLRAB = " "; /* init color abrv*/

        if (PT0EM010.SY1STNBR > "      " /* style entered*/
         && PT0EM010.SY2CLRID > "   ")   /* color entered*/

          set PG2REC empty; /* Clear row storage area*/

          PG2REC.XGPCD = "02"; /* GPC code*/
          PG2REC.SY1STNBR = PT0EM010.SY1STNBR; /* Style number*/
          PG2REC.SY2CLRID = PT0EM010.SY2CLRID; /* color*/
          PG2REC.XDMCD = PT0EM010.XDMCD; /* dim*/

          PT0ES-S07();
          if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
            PTWREC.XXXMODID = "152"; /* Module identification*/
            set PT0EM010.SY1STNBR cursor, bold; /* Highlight*/
            set PT0EM010.SY2CLRID bold; /* Highlight*/
            set PT0EM010.XDMCD bold; /* Highlight*/
            converseLib.validationFailed(66); /* style does not exist*/
            return;
          else
            PT0EM010.SY1SSTNM = PG2REC.SY1SSTNM; /* move style desc*/
            PT0EM010.SY2CLRAB = PG2REC.SY2CLRAB; /* move color desc*/
          end
        else
       /* ------------------------------------------------------------*/
       /* If Style entered, color must be entered*/
       /* ------------------------------------------------------------*/
          if (PT0EM010.SY1STNBR > "      " /* style entered*/
           && PT0EM010.SY2CLRID == "   ")  /* color entered*/
            PTWREC.XXXMODID = "152"; /* Module identification*/
            set PT0EM010.SY2CLRID cursor, bold; /* Highlight*/
            converseLib.validationFailed(29); /* style does not exist*/
            return;
          end
        end
      end
   /* ------------------------------------------------------------*/
   /* edit order nbr.*/
   /* ------------------------------------------------------------*/
      if (PT0EM010.OP1CUOID != PT0EW01.OP1CUOID /* if order nbr changed*/
       || PT0EM010.OP1NORID != PT0EW01.OP1NORID) /* or sub order changed*/
        if (PT0EM010.OP1CUOID > 0) /* if order nbr present*/
          set OP2REC empty; /* clear record*/
          PT0EW00.PT0EW-ORDNBR = PT0EM010.OP1CUOID; /* move to work*/
          OP2REC.OP1PARTN = PT0EW00.PT0EW-ORDNBR9; /* move partition*/
          OP2REC.OP1CUOID = PT0EM010.OP1CUOID; /* move order #*/
          if (PT0EM010.OP1NORID == 0) /* if sub order nbr not present*/
            OP2REC.OP1NORID = 1; /* default to 01*/
            PT0EM010.OP1NORID = 1; /* default to 01*/
          else
            OP2REC.OP1NORID = PT0EM010.OP1NORID; /* move sub order*/
          end
          OP2REC.XGPCD = "02"; /* move gpc*/

          PT0EW00.PT0EW-SWC = "N"; /* init end of cursor switch*/
          PT0ES-S09();
          PT0ES-S10();
          PT0ES-S11();
          if (PT0EW00.PT0EW-SWC == "Y") /* not found*/
            PTWREC.XXXMODID = "152"; /* Module identification*/
            set PT0EM010.OP1CUOID cursor, bold; /* Highlight*/
            set PT0EM010.OP1NORID bold; /* Highlight*/
            converseLib.validationFailed(119); /* order does not exist*/
            return;
          end
        end
      end
   /* ------------------------------------------------------------*/
   /* edit customer cross ref.*/
   /* ------------------------------------------------------------*/
      if (PT0EM010.PC2CUXID != PT0EW01.PC2CUXID) /* if cust xref changed*/
        PC2REC.PC2CUXID = PT0EM010.PC2CUXID; /* move to io record*/
        PC2REC.XGPCD = "02"; /* move gpc also*/

        PT0ES-S08();
        if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
          PTWREC.XXXMODID = "152"; /* Module identification*/
          set PT0EM010.PC2CUXID cursor, bold; /* Highlight*/
          converseLib.validationFailed(118); /* cust xref invalid*/
          return;
        end
      end
    else
   /* ------------------------------------------------------------*/
    /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
      if (PT0EW00.PT0EW-STYORLISTSW == "L"
       && converseVar.eventKey is enter /* Scroll forward request*/
       && PT0EW00.PT0EW-IXT >= PT0EW00.PT0EW-IXTHIGH) /* and no more pages*/
        PTWREC.XXXMODID = "151"; /* Module identification*/
        converseLib.validationFailed(3); /* No more pages to display*/
      end
    end
  end

end // end PT0E-152

// Process valid input request
Function PT0E-160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  PT0EW00.PT0EW-SWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If date given is farther than 4 months in the past, then*/
   /* overlay with date of the first of the month 4 months ago.*/
   /* ------------------------------------------------------------*/
  if (PT0EM010.PT0EM-NEEDDT != PT0EW01.PT0EM-NEEDDT /* if need dt chg*/
   && PT0EM010.PT0EM-NEEDDT > 0)                    /* if need date entered*/
    PT0EW00.PT0EW-NMMDDYY = PT0EM010.PT0EM-NEEDDT;
                                   /* move to work*/
    PT0EW00.PT0EW-YY = PT0EW00.PT0EW-NYY; /* reformat year*/
    PT0EW00.PT0EW-MM = PT0EW00.PT0EW-NMM; /* reformat month*/
    PT0EW00.PT0EW-DD = PT0EW00.PT0EW-NDD; /* reformat day*/
    if (PT0EW00.PT0EW-YY > 90) /* reformat year*/
      PT0EW00.PT0EW-CC = 19; /* load century*/
    else
      PT0EW00.PT0EW-CC = 20; /* load century*/
    end
    /* compute 4 months ago*/
    PT0EW-WORK-CCYYMMDD = XX0XW01.XX0XWDAT; /* move to work*/
    PT0EW-WORK-DD = 01; /* set day to first of month*/
    if (PT0EW-WORK-MM > 4)
      PT0EW-WORK-MM = PT0EW-WORK-MM - 4;
    else
      PT0EW-WORK-MM = PT0EW-WORK-MM + 8;
      PT0EW-WORK-CCYYMMDD = PT0EW-WORK-CCYYMMDD - 10000;
    end
    if (PT0EW00.PT0EW-CCYYMMDD < PT0EW-WORK-CCYYMMDD) /* less then -4*/
      PT0EW00.PT0EW-NYY = PT0EW-WORK-YY; /* reformat year*/
      PT0EW00.PT0EW-NMM = PT0EW-WORK-MM; /* reformat month*/
      PT0EW00.PT0EW-NDD = PT0EW-WORK-DD; /* reformat day*/
      PT0EM010.PT0EM-NEEDDT = PT0EW00.PT0EW-NMMDDYY;
    end
  end

   /* ------------------------------------------------------------*/
   /* Check for key changes*/
   /* ------------------------------------------------------------*/
  if (PT0EM010.OP1CUOID != PT0EW01.OP1CUOID /* if order changed*/
   || PT0EM010.OP1NORID != PT0EW01.OP1NORID /* or sub order changed*/
   || PT0EM010.SY1STNBR != PT0EW01.SY1STNBR /* or style changed*/
   || PT0EM010.SY2CLRID != PT0EW01.SY2CLRID /* or color changed*/
   || PT0EM010.XDMCD != PT0EW01.XDMCD       /* or dimension chg*/
   || PT0EM010.PC2CUXID != PT0EW01.PC2CUXID /* or cust xref chg*/
   || PT0EM010.PT0EM-NEEDDT != PT0EW01.PT0EM-NEEDDT) /* need date chg*/

   /* ------------------------------------------------------------*/
   /* Get order if order nbr present*/
   /* ------------------------------------------------------------*/
    if (PT0EM010.OP1CUOID > 0) /* if order nbr present*/
      if (PT0EM010.OP1NORID == 0) /* if sub order nbr not present*/
        PT0EM010.OP1NORID = 1; /* default to 01*/
      end
      PT0EW00.PT0EW-ORDNBR = PT0EM010.OP1CUOID; /* move to work*/
      OP1REC.OP1PARTN = PT0EW00.PT0EW-ORDNBR9; /* move partition*/
      OP1REC.OP1CUOID = PT0EM010.OP1CUOID; /* move order #*/
      OP1REC.OP1NORID = PT0EM010.OP1NORID; /* move order #*/
      PT0ES-S12();
      PT0EW00.XWHCD = OP1REC.XWHCD; /* get warehouse*/
   /* ------------------------------------------------------------*/
   /* Get cust xref from order*/
   /* ------------------------------------------------------------*/
      PC2REC.XGPCD = "02"; /* move key data to io record*/
      PC2REC.KUCCOID = OP1REC.KUCCOID; /**/
      PC2REC.KUMSTRID = OP1REC.KUMSTRID; /**/
      PC2REC.XNXCD = OP1REC.XNXCD; /**/

      PT0ES-S13();
      if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
        PT0EW00.PC2CUXID = " "; /* get cust xref*/
      else
        PT0EW00.PC2CUXID = PC2REC.PC2CUXID; /* get cust xref*/
      end
    else
      PT0EM010.OP1NORID = 0; /* reset to null*/
    end

   /* ------------------------------------------------------------*/
   /* Save need date from screen (if present)*/
   /* else get need date from order.*/
   /* ------------------------------------------------------------*/
    if (PT0EM010.PT0EM-NEEDDT > 0) /* if need date entered*/
      PT0EW00.PT0EM-NEEDDT = PT0EM010.PT0EM-NEEDDT;
      PT0EW00.PT0EW-NMMDDYY = PT0EM010.PT0EM-NEEDDT;
                                   /* move to work*/
      PT0EW00.PT0EW-YY = PT0EW00.PT0EW-NYY; /* reformat year*/
      PT0EW00.PT0EW-MM = PT0EW00.PT0EW-NMM; /* reformat month*/
      PT0EW00.PT0EW-DD = PT0EW00.PT0EW-NDD; /* reformat day*/
      if (PT0EW00.PT0EW-YY > 90) /* reformat year*/
        PT0EW00.PT0EW-CC = 19; /* load century*/
      else
        PT0EW00.PT0EW-CC = 20; /* load century*/
      end
  /*  */
  /* *************************** Y2K OUT BEGIN ******************************/
  /*  */
  /* MOVE PT0EW00.PT0EW-YYMM TO PT0EW00.PT3YYMM;/* need date*/
  /*  */
  /* *************************** Y2K OUT END ********************************/
  /*  */
  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
      PT0EW00.PT3YYMM = PT0EW00.PT0EW-CCYYMM;
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
    else
      if (PT0EM010.OP1CUOID > 0) /* if order nbr present*/
        PT0EW00.PT0EW-CCYYMMDD = OP1REC.OP1CUNDT; /* get from order*/
        PT0EW00.PT0EW-NMM = PT0EW00.PT0EW-MM;
        PT0EW00.PT0EW-NDD = PT0EW00.PT0EW-DD;
        PT0EW00.PT0EW-NYY = PT0EW00.PT0EW-YY;
        PT0EW00.PT0EW-ORDNEEDDT = PT0EW00.PT0EW-NMMDDYY;
        PT0EW00.PT0EM-NEEDDT = PT0EW00.PT0EW-NMMDDYY;
        if (PT0EW00.PT0EW-CCYYMMDD < XX0XW01.XX0XWDAT) /* less then curr*/
          PT0EW-CCYYMMDD = XX0XW01.XX0XWDAT; /* move to work*/
          PT0EW00.PT0EW-NYY = PT0EW00.PT0EW-YY; /* reformat year*/
          PT0EW00.PT0EW-NMM = PT0EW00.PT0EW-MM; /* reformat month*/
          PT0EW00.PT0EW-NDD = PT0EW00.PT0EW-DD; /* reformat day*/
          PT0EW00.PT0EM-NEEDDT = PT0EW00.PT0EW-NMMDDYY;
        end
  /*  */
  /* *************************** Y2K OUT BEGIN ******************************/
  /*  */
  /* MOVE PT0EW00.PT0EW-YYMM TO PT0EW00.PT3YYMM;/* need date*/
  /*  */
  /* *************************** Y2K OUT END ********************************/
  /*  */
  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
        PT0EW00.PT3YYMM = PT0EW00.PT0EW-CCYYMM;
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
      end
    end

   /* ------------------------------------------------------------*/
   /* Indicate whether the process is driven by the list of styles*/
   /* for an order, or a single style.*/
   /* ------------------------------------------------------------*/
    if (PT0EM010.OP1CUOID > 0) /* order contains something*/
      PT0EW00.PT0EW-STYORLISTSW = "L"; /* set switch to list*/
      PT0EW00.PT0EW-SWD = "2"; /* Map to be displayed switch*/
      PT0EW00.PT0EW-SWR2 = "Y"; /* Request for data switch*/
    else
      PT0EW00.PT0EW-STYORLISTSW = "S"; /* set switch to style*/
      PT0EW00.PT0EW-SWD = "1"; /* Map to be displayed switch*/
      PT0EW00.PT0EW-SWR = "Y"; /* Request for data switch*/
    end
    if (PT0EW00.PT0EW-STYORLISTSW == "L") /* will process from list*/
      PT0EW00.OP1CUOID = PT0EM010.OP1CUOID;
      PT0EW00.OP1NORID = PT0EM010.OP1NORID;
      PT0EM010.PC2CUXID = " "; /* zap cust xref*/
      if (PT0EM010.SY1STNBR == " ") /* style blank*/
        PT0EM010.SY1SSTNM = " "; /* zap style name*/
        PT0EM010.SY2CLRID = " "; /* zap color*/
        PT0EM010.SY2CLRAB = " "; /* zap color abbr*/
        PT0EM010.XDMCD = " "; /* zap dimension*/
      end
    else
      PT0EW00.PT0EW-IXTHIGH = 1; /* set table entry count to 1*/
      PT0EW00.PT0EW-IXT = 1; /* set table entry to 1*/
      PT0EW00.OP1CUOID = PT0EM010.OP1CUOID;
      PT0EW00.OP1NORID = PT0EM010.OP1NORID;
      PT0EW00.SY1STNBR[1] = PT0EM010.SY1STNBR; /* style*/
      PT0EW00.SY2CLRID[1] = PT0EM010.SY2CLRID; /* color*/
      PT0EW00.XDMCD[1] = PT0EM010.XDMCD; /* dimension*/
      PT0EW00.PC2CUXID = PT0EM010.PC2CUXID; /* or cust xref chg*/
   /* ------------------------------------------------------------*/
   /* Save ISEG*/
   /* ------------------------------------------------------------*/
      if (PT0EM010.PC2CUXID != PT0EW01.PC2CUXID) /* if cust xref changed*/
        if (PT0EM010.PC2CUXID > " ") /* if cust xref contains something*/
          PT0EW00.PC2INSEG[1] = PC2REC.PC2INSEG; /* save iseg*/
        else
          PT0EW00.PC2INSEG[1] = "000"; /* default iseg*/
        end
      else
        if (PT0EM010.PC2CUXID == " ") /* if cust xref empty*/
          PT0EW00.PC2INSEG[1] = "000"; /* default iseg*/
        end
      end
    end
    PT0EW00.PT0EW-SWR = "Y"; /* Request for data switch*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll back products was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf12) /* Scroll back products requested*/
    PT0EW00.PT0EW-SWR = "Y"; /* Request for data switch*/
    PT0EW00.PT0EW-IXT = PT0EW00.PT0EW-IXT - 1;
                                   /* Decrement page number*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward products was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf24) /* Scroll forward requested*/
    PT0EW00.PT0EW-SWR = "Y"; /* Request for data switch*/
    PT0EW00.PT0EW-IXT = PT0EW00.PT0EW-IXT + 1;
                                   /* Increment page number*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward products was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter /* Scroll forward requested*/
   && PT0EW00.PT0EW-STYORLISTSW == "L") /* and from list*/
    PT0EW00.PT0EW-SWR = "Y"; /* Request for data switch*/
    PT0EW00.PT0EW-IXT = PT0EW00.PT0EW-IXT + 1;
                                   /* Increment page number*/
    return; /* Return to previous process*/
  end

end // end PT0E-160

// MAP 2 DISPLAY
Function PT0E-200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT0E-210(); /* Obtain the data to display*/

  PT0E-220(); /* Format and display the map*/

  PT0E-230(); /* Check attention identifier*/

  PT0E-240(); /* Reset fields to normal intensity*/

  PT0E-250(); /* Verify the entered data*/

  PT0E-260(); /* Process valid input request*/


end // end PT0E-200

// Obtain the data to display
Function PT0E-210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  if (PT0EW00.PT0EW-SWR2 != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/
   /* Temporary storage page length*/
  PT0EW00.XXXTSLEN = 833;
   /* ------------------------------------------------------------*/
   /* Set the page to get*/
   /* ------------------------------------------------------------*/
  if (PTWREC.XXXMSGNO == 0) /* no message to display*/
    PT0EW00.XXXTSPAG = 1; /* set to 1*/
  end

   /* ------------------------------------------------------------*/
   /* Purge temporary storage.*/
   /* ------------------------------------------------------------*/
  PT0E-211(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Obtain current date and time.*/
   /* ------------------------------------------------------------*/
  XX0XS01(); /* Obtain date and time*/


   /* ------------------------------------------------------------*/
   /* Get order and build detail area of screen*/
   /* ------------------------------------------------------------*/
  set OP2REC empty; /* clear record*/
  PT0EW00.PT0EW-ORDNBR = PT0EM010.OP1CUOID; /* move to work*/
  OP2REC.OP1PARTN = PT0EW00.PT0EW-ORDNBR9; /* move partition*/
  OP2REC.OP1CUOID = PT0EM010.OP1CUOID; /* move order #*/
  if (PT0EM010.OP1NORID == 0) /* if sub order nbr not present*/
    OP2REC.OP1NORID = 1; /* default to 01*/
  else
    OP2REC.OP1NORID = PT0EM010.OP1NORID; /* move nike sub order*/
  end
  OP2REC.XGPCD = "02"; /* move gpc*/

  PT0EW00.PT0EW-SWC = "N"; /* init end of cursor switch*/
  PT0ES-S09(); /* select set dreado.voritm01*/
  PT0ES-S10(); /* fetch next dreado.voritm01*/

   /* ------------------------------------------------------------*/
   /* Loop through the order item cursor and build temp storage*/
   /* screens.*/
   /* ------------------------------------------------------------*/
  PT0EW00.PT0EW-HOLDHIGHDTORD = 0; /* init high date hold area*/
  PT0EW00.PT0EW-IXM = 1;
  while (PT0EW00.PT0EW-SWC == "N") /* not end of cursor*/
   /* ------------------------------------------------------------*/
   /* Move header info*/
   /* ------------------------------------------------------------*/
    PT0EW02.OP1CUOID = PT0EW00.OP1CUOID; /* order nbr*/
    PT0EW02.OP1NORID = PT0EW00.OP1NORID; /* sub order nbr*/
    PT0EW02.XWHCD = PT0EW00.XWHCD; /* warehouse*/
    PT0EW02.PT0EM-NEEDDT = PT0EW00.PT0EW-ORDNEEDDT; /* need date*/
    PT0EW02.PC2CUXID = PT0EW00.PC2CUXID; /* cust xref*/

   /* ------------------------------------------------------------*/
   /* Move detail info*/
   /* ------------------------------------------------------------*/
    PT0EW02.SY1STNBR[PT0EW-IXM] = OP2REC.SY1STNBR; /* Style*/
    PT0EW02.SY2CLRID[PT0EW-IXM] = OP2REC.SY2CLRID; /* Color*/
    PT0EW02.XDMCD[PT0EW-IXM] = OP2REC.XDMCD; /* Dim*/
    PT0EW02.PC2INSEG[PT0EW-IXM] = OP2REC.PC2INSEG; /* Iseg*/

   /* ------------------------------------------------------------*/
   /* get the style and color descriptions.*/
   /* ------------------------------------------------------------*/
    set PG2REC empty; /* Clear row storage area*/
    PG2REC.XGPCD = "02"; /* GPC code*/
    PG2REC.SY1STNBR = OP2REC.SY1STNBR; /* Style number*/
    PG2REC.SY2CLRID = OP2REC.SY2CLRID; /* color*/
    PG2REC.XDMCD = OP2REC.XDMCD; /* dim*/

    PT0ES-S07(); /* select unique from dprodg.vsyclr01*/
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      PT0EW02.SY1SSTNM[PT0EW-IXM] = "NOT FOUND"; /* style desc*/
      PT0EW02.SY2CLRAB[PT0EW-IXM] = "NOT FOUND"; /* color desc*/
    else
      PT0EW02.SY1SSTNM[PT0EW-IXM] = PG2REC.SY1SSTNM; /* style desc*/
      PT0EW02.SY2CLRAB[PT0EW-IXM] = PG2REC.SY2CLRAB; /* color desc*/
    end

   /* ------------------------------------------------------------*/
   /* get the high pct and qty from dmodel.vftcov01*/
   /* ------------------------------------------------------------*/
    PT0EW00.PT0EW-HOLDHIGHPCT = 0; /* init high qty hold area*/
    PT0EW00.PT0EW-HOLDHIGHQTY = 0; /* init high qty hold area*/
    PT0EW00.PT0EW-HOLDHIGHDT = 0; /* init high qty hold area*/

    PT0E-217(); /* select set from demodel.vftcov01*/
    PT0E-218(); /* select next row dmodel.vftcov01*/
    if (SQLCA.VAGen_SQLCODE == 0)
      PT0EW00.PT0EW-SWC2 = "N";
      while (PT0EW00.PT0EW-SWC2 == "N")
        PT0E-213(); /* determine high percent/qty*/
        PT0E-218(); /* select next row dmodel.vftcov01*/
      end
      PT0E-219(); /* close cursor dmodel.vftcov01*/
    else
      PT0E-219(); /* close cursor dmodel.vftcov01*/
    end

    PT0EW00.PT0EW-CCYYMMDD = PT0EW00.PT0EW-HOLDHIGHDT;
                                   /* move to work*/
    PT0EW00.PT0EW-FORMATDATEMM = PT0EW00.PT0EW-MM; /* reformat*/
    PT0EW00.PT0EW-FORMATDATEDD = PT0EW00.PT0EW-DD; /* the date*/
    PT0EW00.PT0EW-FORMATDATESL = "/";
    PT0EW02.PT0EM-COVDT[PT0EW-IXM] = PT0EW00.PT0EW-FORMATDATE;
    PT0EW02.PT0EM-COVPCT[PT0EW-IXM] = PT0EW00.PT0EW-HOLDHIGHPCT;
    PT0EW02.PT0EM-COVQTY[PT0EW-IXM] = PT0EW00.PT0EW-HOLDHIGHQTY;

   /* set order high date*/
    if (PT0EW00.PT0EW-HOLDHIGHDT > PT0EW00.PT0EW-HOLDHIGHDTORD)
      PT0EW00.PT0EW-HOLDHIGHDTORD = PT0EW00.PT0EW-HOLDHIGHDT;
    end

    PT0EW00.PT0EW-IXM = PT0EW00.PT0EW-IXM + 1; /* increment index*/

    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    if (PT0EW00.PT0EW-IXM > 15) /* Page is full*/
      PT0E-216(); /* Add page to temporary storage*/
      PT0EW00.PT0EW-IXM = 1; /* Map index*/
    end

    PT0ES-S10(); /* select next dreado.voritm01*/
  end
  PT0ES-S11(); /* close cursor dreado.voritm01*/

    /* ------------------------------------------------------------*/
    /* Add any partially formated pages to the storage queue.*/
    /* ------------------------------------------------------------*/

  if (PT0EW00.PT0EW-IXM > 1) /* Partial page*/
    PT0E-216(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  if (PT0EW00.TA5TSQIX == 0) /* No pages formatted*/
    PTWREC.XXXMODID = "210"; /* Module identification*/
    PTWREC.XXXMSGNO = 18; /* No data was found to display*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  PT0EW00.PT0EW-SWR2 = "N"; /* Request for data switch*/

end // end PT0E-210

// Purge any temporary storage
Function PT0E-211()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PT0EW02 empty; /* m010 display storage*/

  PT0EW00.PT0EW-SWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PT0EW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PT0EW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PTWREC.XXXMODID = "211"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M020"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0E-211

// load temp storage rec
Function PT0E-213()
   /* --------------------------------------------------------------------*/
   /* find highest quantity and percent in vftcov01 records*/
   /* --------------------------------------------------------------------*/

  if (VFTCOV01.XWHCD == PT0EW00.XWHCD) /* if same as orders whse*/
    PT0EW00.PT0EW-HOLDHIGHDT = VFTCOV01.PT-ETAL-ETALO-DT; /* move to high*/
    if (VFTCOV01.PT-FUTR-COV-QTY
     > PT0EW00.PT0EW-HOLDHIGHQTY) /* if higher than high*/
      PT0EW00.PT0EW-HOLDHIGHPCT = VFTCOV01.PT-FUTR-COV-PCT; /* move to high*/
      PT0EW00.PT0EW-HOLDHIGHQTY = VFTCOV01.PT-FUTR-COV-QTY; /* move to high*/
      PT0EW00.PT0EW-HOLDHIGHDT = VFTCOV01.PT-ETAL-ETALO-DT; /* move to high*/
    end
  end

end // end PT0E-213

// Add page to temporary storage
Function PT0E-216()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PT0EW02.XXXTSLEN = PT0EW00.XXXTSLEN; /* Temp storage length*/

  TA5REC.TA5APPID = "PT0E"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PT0EW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PT0EW02 empty; /* m020 display storage*/

    PT0EW00.TA5TSQIX = TA5REC.TA5TSQIX;
                                                     /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PTWREC.XXXMODID = "216"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M020"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0E-216

// Select set DMODEL.VFTCOV01
Function PT0E-217()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set VFTCOV01 empty; /* Clear row storage area*/

   /* ------------------------------------------------------------*/
   /* set up key*/
   /* ------------------------------------------------------------*/
  VFTCOV01.XWHCD = PT0EW00.XWHCD; /* warehouse*/
  VFTCOV01.SY1STNBR = OP2REC.SY1STNBR; /* style*/
  VFTCOV01.SY2CLRID = OP2REC.SY2CLRID; /* color*/
  VFTCOV01.PC2INSEG = OP2REC.PC2INSEG; /* iseg*/
  VFTCOV01.XDMCD = OP2REC.XDMCD; /* dimension*/
  VFTCOV01.PT3YYMM = PT0EW00.PT3YYMM; /* period year/month*/

   /* ------------------------------------------------------------*/
   /* Select set from dmodel.vftcov01*/
   /* ------------------------------------------------------------*/
  try
    call "VFTCOV02" ("S2", SQLCA, VFTCOV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select tbl row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  PTWREC.XXXMODID = "212"; /* Module identification*/

  converseLib.validationFailed(10); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFTCOV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFTCOV01.VFTCOV01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0E-217

// Fetch VFTCOV01
Function PT0E-218()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from dmodel.vftcov01*/
   /* ------------------------------------------------------------*/

  try
    call "VFTCOV02" ("N2", SQLCA, VFTCOV01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch nxt row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      PT0EW00.PT0EW-SWC2 = "Y"; /* Indicate end of cursor*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  PTWREC.XXXMODID = "218"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFTCOV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFTCOV01.VFTCOV01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT0E-218

// Close VFTCOV01
Function PT0E-219()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "VFTCOV02" ("C2", SQLCA, VFTCOV01) {isNoRefresh = yes, isExternal = yes};
  end /* Close tbl set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "219"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFTCOV01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT0E-219

// Format and converse the map
Function PT0E-220()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PT0EW00.PT0EW-SWR2 == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PT0EW00.PT0EW-SWF == "Y") /* Map must be formatted*/
      PT0E-221(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PT0EM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT0EM020.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PT0EM020.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Protect all select fields that do not have data on them.*/
   /* ------------------------------------------------------------*/

  PT0EW00.PT0EW-IXM = 1; /* Initialize line index*/

  while (PT0EW00.PT0EW-IXM <= 15) /* Until screen is full*/

    if (PT0EW02.SY1STNBR[PT0EW-IXM] == " ") /* if nothing to display*/
      set PT0EM020.PT0EM-SEL[PT0EW-IXM] invisible, skip; /* protect*/
    end

    PT0EW00.PT0EW-IXM = PT0EW00.PT0EW-IXM + 1; /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT0EM020.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT0EM020.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT0EM020 alarm; /* Indicate sound alarm*/

  end

  converse PT0EM020 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = " "; /* Module identification*/
  PTWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PT0EM020.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PT0EM020.CAITEM; /* Application data*/

end // end PT0E-220

// Format the display data
Function PT0E-221()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PT0EM020 initial; /* m020 input/output area*/

  PT0EW00.PT0EW-SWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PT0EW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PT0EW00.XXXTSPAG != TA5REC.TA5TSQIX)
                                   /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PT0EW00.PT0EW-SWU == "Y") /* Current page was changed*/

        PT0ES-S01(); /* Update temporary storage page*/

        PT0EW00.PT0EW-SWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PT0EW00.XXXTSPAG > PT0EW00.TA5TSQIX)
                                   /* Desired greater highest*/
        PT0EW00.XXXTSPAG = PT0EW00.TA5TSQIX;
                                   /* Default to highest*/
      end

      PT0ES-S02(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    PT0EM020.XXXTSPAG = PT0EW00.XXXTSPAG; /* Current page*/
    PT0EM020.TA5TSQIX = PT0EW00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PT0EM020.OP1CUOID = PT0EW02.OP1CUOID; /* order nbr*/
  PT0EM020.OP1NORID = PT0EW02.OP1NORID; /* sub order*/
  PT0EM020.XWHCD = PT0EW02.XWHCD; /* warehouse*/
  PT0EM020.PT0EM-NEEDDT = PT0EW02.PT0EM-NEEDDT; /* need date*/
  PT0EM020.PC2CUXID = PT0EW02.PC2CUXID; /* cust xref*/
  PT0EW00.PT0EW-CCYYMMDD = PT0EW00.PT0EW-HOLDHIGHDTORD;
                                   /* move to work*/
  PT0EW00.PT0EW-FORMATDATEMM = PT0EW00.PT0EW-MM; /* reformat*/
  PT0EW00.PT0EW-FORMATDATEDD = PT0EW00.PT0EW-DD; /* the date*/
  PT0EW00.PT0EW-FORMATDATESL = "/";
  PT0EM020.PT0EM-FILLEDDT = PT0EW00.PT0EW-FORMATDATE;

  PT0EW00.PT0EW-IXM = 1; /* Initialize line index*/

  while (PT0EW00.PT0EW-IXM <= 15) /* Until screen is full*/
    PT0EM020.PT0EM-SEL[PT0EW-IXM] = PT0EW02.PT0EM-SEL[PT0EW-IXM];
    PT0EM020.SY1STNBR[PT0EW-IXM] = PT0EW02.SY1STNBR[PT0EW-IXM];
    PT0EM020.SY2CLRID[PT0EW-IXM] = PT0EW02.SY2CLRID[PT0EW-IXM];
    PT0EM020.XDMCD[PT0EW-IXM] = PT0EW02.XDMCD[PT0EW-IXM];
    PT0EM020.PC2INSEG[PT0EW-IXM] = PT0EW02.PC2INSEG[PT0EW-IXM];
    PT0EM020.SY1SSTNM[PT0EW-IXM] = PT0EW02.SY1SSTNM[PT0EW-IXM];
    PT0EM020.SY2CLRAB[PT0EW-IXM] = PT0EW02.SY2CLRAB[PT0EW-IXM];
    if (PT0EW02.PT0EM-COVPCT[PT0EW-IXM] > 0) /* something there*/
      PT0EM020.PT0EM-COVDT[PT0EW-IXM] = PT0EW02.PT0EM-COVDT[PT0EW-IXM];
      PT0EM020.PT0EM-COVPCT[PT0EW-IXM] = PT0EW02.PT0EM-COVPCT[PT0EW-IXM];
      PT0EM020.PT0EM-COVQTY[PT0EW-IXM] = PT0EW02.PT0EM-COVQTY[PT0EW-IXM];
    else
      set PT0EM020.PT0EM-COVDT[PT0EW-IXM] invisible, skip;
      set PT0EM020.PT0EM-COVPCT[PT0EW-IXM] invisible, skip;
      set PT0EM020.PT0EM-COVQTY[PT0EW-IXM] invisible, skip;
    end

    PT0EW00.PT0EW-IXM = PT0EW00.PT0EW-IXM + 1; /* Increment line index*/

  end

end // end PT0E-221

// Check attention identifier
Function PT0E-230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PT0EW00.PT0EW-SWR == "Y") /* Request for data*/
      set PT0EW01 empty; /* m010 display storage*/
    end

    PT0EW00.PT0EW-SWF = "Y"; /* Format the map switch*/
    PT0EW00.PT0EW-SWR = "N"; /* Request for data switch*/
    PT0EW00.PT0EW-SWD = "1"; /* Request for data switch*/
    PT0E-211(); /* Purge temporary storage*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PT0EM020.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PT0E-211(); /* Purge temporary storage*/

      XSPT001(); /* Exit to another application*/

      set PT0EM020.CATOAP cursor, bold; /* Highlight*/

    else

      PTWREC.XXXMODID = "230"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PT0EM020"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      set PT0EW01 empty; /* Reset map 010 storage*/
      PT0EW00.PT0EW-IXT = 1; /* Init table index*/
      PT0EW00.PT0EW-IXTHIGH = 0; /* Init table*/
      PT0EW00.PT0EW-SWD = "1"; /* Map to be displayed switch*/
      PT0EW00.PT0EW-SWF = "Y"; /* Format the map switch*/
      PT0EW00.PT0EW-SWR = "N"; /* Request for data switch*/
      PT0EW00.PT0EW-STYORLISTSW = "S"; /* Style or list switch*/
      PT0E-211(); /* Purge temporary storage*/
      exit stack; /* Return to previous process*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end

    PT0E-211(); /* Purge temporary storage*/

    XSPT001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    PTWREC.XXXMODID = "230"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end
end // end PT0E-230

// Reset highlighted fields
Function PT0E-240()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  PT0EW00.PT0EW-IXM = 1; /* init map index*/

  while (PT0EW00.PT0EW-IXM <= 15) /* loop through map*/
    set PT0EM020.PT0EM-SEL[PT0EW-IXM] initialAttributes; /* reset attribute*/
    PT0EW00.PT0EW-IXM = PT0EW00.PT0EW-IXM + 1; /* increment index*/
  end

  set PT0EM020.CATOAP initialAttributes; /* TO application*/
  set PT0EM020.CAITEM initialAttributes; /* Application data*/


end // end PT0E-240

// Verify data that was entered
Function PT0E-250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PT0EM020.CAITEM > " ") /* Application data was entered*/

    PTWREC.XXXMODID = "250"; /* Module identification*/
    set PT0EM020.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PT0E-251(); /* Verify scroll request*/

  else
    /* ------------------------------------------------------------*/
    /* Do not allow selection of a product for detail viewing if*/
    /* this is a direct ship order.*/
    /* ------------------------------------------------------------*/

    PT0EW00.PT0EW-IXM = 15; /* Initialize line index*/

    while (PT0EW00.PT0EW-IXM >= 1) /**/

      if (PT0EM020.PT0EM-SEL[PT0EW-IXM] == "S") /* if selected*/
        if (PT0EM020.XWHCD == "  ") /* if direct ship*/
          set PT0EM020.PT0EM-SEL[PT0EW-IXM] cursor, bold; /* highlight*/
          PTWREC.XXXMODID = "250"; /* Module identification*/
          converseLib.validationFailed(122); /* may not view detail for dir shp*/
        end
      end

      PT0EW00.PT0EW-IXM = PT0EW00.PT0EW-IXM - 1; /* Increment line index*/

    end
    /* ------------------------------------------------------------*/
    /* Allow only 'S' or 'V' in select*/
    /* field.*/
    /* ------------------------------------------------------------*/

    PT0EW00.PT0EW-IXM = 15; /* Initialize line index*/

    while (PT0EW00.PT0EW-IXM >= 1) /**/

      if (PT0EM020.PT0EM-SEL[PT0EW-IXM] != " " /* if not blank*/
       && PT0EM020.PT0EM-SEL[PT0EW-IXM] != "S" /* if not 's'*/
       && PT0EM020.PT0EM-SEL[PT0EW-IXM] != "V") /* if not 'V'*/
        set PT0EM020.PT0EM-SEL[PT0EW-IXM] cursor, bold; /* highlight*/
        PTWREC.XXXMODID = "250"; /* Module identification*/
        converseLib.validationFailed(13); /* Only 'S' to select*/
      end

      PT0EW00.PT0EW-IXM = PT0EW00.PT0EW-IXM - 1; /* Increment line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
end // end PT0E-250

// Verify scroll request
Function PT0E-251()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PT0EW00.XXXTSPAG < 2)       /* and no previous pages*/
    PTWREC.XXXMODID = "251"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous pages to display*/
  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PT0EW00.XXXTSPAG >= PT0EW00.TA5TSQIX) /* and no more pages*/
    PTWREC.XXXMODID = "251"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end

   /* ------------------------------------------------------------*/
   /* if item selected, do not allow scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   || converseVar.eventKey is pf7) /* Scroll backward request*/
    PT0EW00.PT0EW-IXM = 15; /* init map index*/
    while (PT0EW00.PT0EW-IXM >= 1) /* loop through map*/
      if (PT0EM020.PT0EM-SEL[PT0EW-IXM] == "S") /* if selected*/
        set PT0EM020.PT0EM-SEL[PT0EW-IXM] bold, cursor; /* highlight*/
        PTWREC.XXXMODID = "251"; /* Module identification*/
        converseLib.validationFailed(120); /* No more pages to display*/
      end
      PT0EW00.PT0EW-IXM = PT0EW00.PT0EW-IXM - 1; /* decrement index*/
    end
  end

  set PT0EM020.CATOAP initialAttributes; /* TO application*/
  set PT0EM020.CAITEM initialAttributes; /* Application data*/


end // end PT0E-251

// Process valid input request
Function PT0E-260()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  PT0EW00.PT0EW-SWF = "Y"; /* Format the map switch*/

  PT0EW00.PT0EW-IXM = 1; /* init map index*/
  PT0EW00.PT0EW-IXT = 1; /* init tbl index*/
  PT0EW00.PT0EW-IXTHIGH = 0; /* init tbl index high*/

  while (PT0EW00.PT0EW-IXM <= 15) /* loop through map*/
    if (PT0EM020.PT0EM-SEL[PT0EW-IXM] == "S") /* if selected*/
      PT0EW00.PT0EW-SWU = "Y"; /* Update storage switch*/
      PT0EW02.PT0EM-SEL[PT0EW-IXM] = "V"; /* indicate viewed*/
      PT0EW00.SY1STNBR[PT0EW-IXT] = PT0EM020.SY1STNBR[PT0EW-IXM]; /* style*/
      PT0EW00.SY2CLRID[PT0EW-IXT] = PT0EM020.SY2CLRID[PT0EW-IXM]; /* color*/
      PT0EW00.XDMCD[PT0EW-IXT] = PT0EM020.XDMCD[PT0EW-IXM]; /* dimension*/
      PT0EW00.PC2INSEG[PT0EW-IXT] = PT0EM020.PC2INSEG[PT0EW-IXM]; /* iseg*/
      PT0EW00.PT0EW-IXTHIGH = PT0EW00.PT0EW-IXTHIGH + 1; /* incr high*/
      PT0EW00.PT0EW-IXT = PT0EW00.PT0EW-IXT + 1; /* increment index*/
    end
    PT0EW00.PT0EW-IXM = PT0EW00.PT0EW-IXM + 1; /* increment index*/
  end

  if (PT0EW00.PT0EW-IXT > 1) /* if something selected*/
    PT0EW00.PT0EW-IXT = 1; /* reset table index*/
    PT0EW00.PT0EW-SWD = "1"; /* display screen 010*/
    PT0EW00.PT0EW-SWR = "Y"; /* Request for data switch*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PT0EW00.XXXTSPAG = PT0EW00.XXXTSPAG - 1;
                                   /* Decrement page number*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PT0EW00.XXXTSPAG = PT0EW00.XXXTSPAG + 1;
                                   /* Increment page number*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* They just pressed enter - do nothing*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter) /* Scroll forward requested*/
    PT0EW00.PT0EW-SWR2 = "N"; /* Request for data switch*/
    return; /* Return to previous process*/
  end /**/

end // end PT0E-260

// get need date edit date
Function PT0ES-EDIT-DT()
   /* First get the number of months into the future that*/
   /* may be requested, from the first record in the database.*/
   /* Then add it to the current date to obtain the date.*/
   /* User entered need date may not be greater than*/
   /* current month plus the above nbr of months.*/

   /* Build key*/
  VFTCOV01.SY1STNBR = "PERIOD"; /* style*/
  VFTCOV01.SY2CLRID = "NBR"; /* color*/
  VFTCOV01.XDMCD = "IN"; /* dim*/
  VFTCOV01.PC2INSEG = "FUT"; /* iseg*/
  VFTCOV01.XWHCD = "XX"; /* whse*/
  VFTCOV01.PT3YYMM = 0; /* period*/

  PT0ES-FTCOV-SU(); /* get number of months*/
  if (SQLCA.VAGen_SQLCODE == 100) /* if dummy record is not found*/
    VFTCOV01.PT-FUTR-COV-QTY = 4; /* default to 4*/
  end

   /* move curr date to edit date:*/
  PT0EW00.PT0EW-EDIT-CCYYMMDD = XX0XWDAT;
   /* determine century:*/
  if (PT0EW00.PT0EW-EDIT-YY > 90)
    PT0EW00.PT0EW-EDIT-CC = 19;
  else
    PT0EW00.PT0EW-EDIT-CC = 20;
  end

  PT0EW00.PT0EW-EDIT-MM = PT0EW-EDIT-MM + VFTCOV01.PT-FUTR-COV-QTY;

   /* adjust for next year's date:*/
  if (PT0EW00.PT0EW-EDIT-MM > 12)
    PT0EW00.PT0EW-EDIT-MM = PT0EW00.PT0EW-EDIT-MM - 12;
    PT0EW00.PT0EW-EDIT-CCYYMMDD = PT0EW00.PT0EW-EDIT-CCYYMMDD + 10000;
  end

   /* default day to 99 so all days pass edit;*/
  PT0EW00.PT0EW-EDIT-DD = 99;

end // end PT0ES-EDIT-DT

// Select unique on VFTCOV02
Function PT0ES-FTCOV-SU()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VFTCOV02" ("S ", SQLCA, VFTCOV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select tble row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE                ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFTCOV01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFTCOV01.VFTCOV01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0ES-FTCOV-SU

// Update temporary storage page
Function PT0ES-S01()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PT0EW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PTWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M020"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0ES-S01

// Read temporary storage page
Function PT0ES-S02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PT0EW02.XXXTSLEN = PT0EW00.XXXTSLEN; /* Temp storage length*/

  TA5REC.TA5APPID = "PT0E"; /* Application identification*/
  TA5REC.TA5TSQIX = PT0EW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PT0EW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PTWREC.XXXMODID = "S02"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M020"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0ES-S02

// Select unique on SYCLR
Function PT0ES-S07()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "S07"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "VERIFY STYLE                 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0ES-S07

// Select unique dprodc.vprdcu01
Function PT0ES-S08()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "S08"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "VERIFY STYLE                 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0ES-S08

// Open DREADO.VITEM0R1
Function PT0ES-S09()
   /* ------------------------------------------------------------*/
   /* Open the dreado.vitem0r1 cursor.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4150" ("S2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "S09"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DREADO. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VITEM0R1"; /* Table view name*/
  TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0ES-S09

// Fetch DREADO.VITEM0R1
Function PT0ES-S10()
   /* ------------------------------------------------------------*/
   /* Fetch a record from the DREADO.VITEM0R1 cursor.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4150" ("N2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
        PT0EW00.PT0EW-SWC = "Y"; /* end of cursor switch*/
        return; /* Return to previous process*/
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "VALIDATE ORDER NUMBER        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VITEM0R1"; /* Table view name*/
  TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0ES-S10

// Close DREADO.VITEM0R1
Function PT0ES-S11()
   /* ------------------------------------------------------------*/
   /* Close the DREADO.VITEM0R1 cursor.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4150" ("C2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    PT0EW00.PT0EW-SWD = 1; /* Display map 010*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VITEM0R1"; /* Table view name*/
  TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0ES-S11

// Open DREADO.VORHDRR1
Function PT0ES-S12()
   /* ------------------------------------------------------------*/
   /* SELECT UNIQUE FROM DREADO.VORHDRR1*/
   /* ------------------------------------------------------------*/

  try
    call "IO4140" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    PT0EW00.PT0EW-SWD = 1; /* Display map 010*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DREADO. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDRR1"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0ES-S12

// Select unique dprodc.vprdcu01
Function PT0ES-S13()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("SA", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "S13"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "VERIFY STYLE                 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0ES-S13

//*** RECORD=PT0EW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PT0EW00 type basicRecord
  10 PT0EW-IXM PT0EW-IXM ; 
  10 PT0EW-IXT PT0EW-IXT ; 
  10 PT0EW-IXTHIGH PT0EW-IXTHIGH ; 
  10 PT0EW-IXW PT0EW-IXW ; 
  10 PT0EW-IXWHIGH PT0EW-IXWHIGH ; 
  10 PT0EW-IXWSAV PT0EW-IXWSAV ; 
  10 PT0EW-IXP PT0EW-IXP ; 
  10 PT0EW-IX3 PT0EW-IX3 ; 
  10 PT0EW-IX4 PT0EW-IX4 ; 
  10 PT0EW-IX5 PT0EW-IX5 ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 PT0EW-SWC PT0EW-SWC ; 
  10 PT0EW-SWC2 PT0EW-SWC2 ; 
  10 PT0EW-SWD PT0EW-SWD ; 
  10 PT0EW-SWF PT0EW-SWF ; 
  10 PT0EW-SWR PT0EW-SWR ; 
  10 PT0EW-SWR2 PT0EW-SWR2 ; 
  10 PT0EW-SWU PT0EW-SWU ; 
  10 PT0EW-STYORLISTSW PT0EW-STYORLISTSW ; 
  10 PT0EM-NEEDDT PT0EM-NEEDDT ; 
  10 PT0EW-ORDNEEDDT PT0EW-ORDNEEDDT ; 
  10 OP1CUOID OP1CUOID ; 
  10 OP1NORID OP1NORID ; 
  10 SY1STNBR SY1STNBR [15] ; 
  10 SY2CLRID SY2CLRID [15] ; 
  10 XDMCD XDMCD [15] ; 
  10 PC2INSEG PC2INSEG [15] ; 
  10 XWHCD XWHCD ; 
  10 PC2CUXID PC2CUXID ; 
  10 PT3YYMM PT3YYMM ; 
  10 PT0EW-ORDNBR PT0EW-ORDNBR ; 
    15 PT0EW-FILLER8 PT0EW-FILLER8 ; 
    15 PT0EW-ORDNBR9 PT0EW-ORDNBR9 ; 
  10 PT0EW-CCYYMMDD PT0EW-CCYYMMDD ; 
    15 PT0EW-CCYYMM PT0EW-CCYYMM ; 
      20 PT0EW-CC PT0EW-CC ; 
      20 PT0EW-YY PT0EW-YY ; 
      20 PT0EW-MM PT0EW-MM ; 
    15 PT0EW-DD PT0EW-DD ; 
  10 PT0EW-NMMDDYY PT0EW-NMMDDYY ; 
    15 PT0EW-NMM PT0EW-NMM ; 
    15 PT0EW-NDD PT0EW-NDD ; 
    15 PT0EW-NYY PT0EW-NYY ; 
  10 PT0EW-EDIT-CCYYMMDD PT0EW-EDIT-CCYYMMDD ; 
    15 PT0EW-EDIT-CC PT0EW-EDIT-CC ; 
    15 PT0EW-EDIT-YY PT0EW-EDIT-YY ; 
    15 PT0EW-EDIT-MM PT0EW-EDIT-MM ; 
    15 PT0EW-EDIT-DD PT0EW-EDIT-DD ; 
  10 PT0EW-WORK-CCYYMMDD PT0EW-WORK-CCYYMMDD ; 
    15 PT0EW-WORK-CC PT0EW-WORK-CC ; 
    15 PT0EW-WORK-YY PT0EW-WORK-YY ; 
    15 PT0EW-WORK-MM PT0EW-WORK-MM ; 
    15 PT0EW-WORK-DD PT0EW-WORK-DD ; 
  10 PT0EW-FORMATDATE PT0EW-FORMATDATE ; 
    15 PT0EW-FORMATDATEMM PT0EW-FORMATDATEMM ; 
    15 PT0EW-FORMATDATESL PT0EW-FORMATDATESL ; 
    15 PT0EW-FORMATDATEDD PT0EW-FORMATDATEDD ; 
  10 PT0EW-HOLDHIGHDT PT0EW-HOLDHIGHDT ; 
  10 PT0EW-HOLDHIGHDTORD PT0EW-HOLDHIGHDTORD ; 
  10 PT0EW-HOLDHIGHQTY PT0EW-HOLDHIGHQTY ; 
  10 PT0EW-HOLDHIGHPCT PT0EW-HOLDHIGHPCT ; 
  10 PT0EW-WHSE-IX1 PT0EW-WHSE-IX1 ; 
  10 PT0EW-VAL-WHSE PT0EW-VAL-WHSE [3] ; 
end // end PT0EW00

//*** RECORD=PT0EW01 ****
// ------------------------
// Map 010 display storage.
// ------------------------
// ***********************
Record PT0EW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(58) ; 
    10 PT0EM-NEEDDT PT0EM-NEEDDT ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 SY2CLRID SY2CLRID ; 
    10 SY2CLRAB SY2CLRAB ; 
    10 XDMCD XDMCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 XWHCD XWHCD ; 
    10 PC2INSEG PC2INSEG ; 
end // end PT0EW01

//*** RECORD=PT0EW02 ****
// ------------------------
// Map 020 display storage.
// ------------------------
// ***********************
Record PT0EW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(833) ; 
    10 XXXTSPAG XXXTSPAG ; 
    10 PT0EM-NEEDDT PT0EM-NEEDDT ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 PT0EM-SEL PT0EM-SEL [15] ; 
    10 SY1STNBR SY1STNBR [15] ; 
    10 SY1SSTNM SY1SSTNM [15] ; 
    10 SY2CLRID SY2CLRID [15] ; 
    10 SY2CLRAB SY2CLRAB [15] ; 
    10 XDMCD XDMCD [15] ; 
    10 PC2INSEG PC2INSEG [15] ; 
    10 PT0EM-COVDT PT0EM-COVDT [15] ; 
    10 PT0EM-COVPCT PT0EM-COVPCT [15] ; 
    10 PT0EM-COVQTY PT0EM-COVQTY [15] ; 
end // end PT0EW02

//*** RECORD=PT0EW03 ****
// ------------------------
// Map 010 display storage.
// ------------------------
// ***********************
Record PT0EW03 type basicRecord
  10 PT0EM-COVDT2 PT0EM-COVDT2 [18] ; 
  10 PT0EM-COVPCT2 PT0EM-COVPCT2 [18] ; 
  10 PT0EM-COVQTY2 PT0EM-COVQTY2 [18] ; 
end // end PT0EW03

//*** RECORD=PT0EW04 ****
// ------------------------
// Map 010 display storage.
// ------------------------
// ***********************
Record PT0EW04 type basicRecord
  10 PT0EM-COVDT4 PT0EM-COVDT4 [18] ; 
  10 PT0EM-COVPCT4 PT0EM-COVPCT4 [18] ; 
  10 PT0EM-COVQTY4 PT0EM-COVQTY4 [18] ; 
end // end PT0EW04

//*** RECORD=PT0EW05 ****
// ------------------------
// Map 010 display storage.
// ------------------------
// ***********************
Record PT0EW05 type basicRecord
  10 PT0EM-COVDT7 PT0EM-COVDT7 [18] ; 
  10 PT0EM-COVPCT7 PT0EM-COVPCT7 [18] ; 
  10 PT0EM-COVQTY7 PT0EM-COVQTY7 [18] ; 
end // end PT0EW05

//*** RECORD=VFTCOV01 ****
// ***** FOOTWEAR FUTURES DELIVERY PERCENT COVERAGE TABLE *****
// 
// DB2 TABLE VIEW:      DMODEL.VFTCOV01
// 
// DCLGEN MEMBER:       DCL01042
// 
// I/O MODULE:          IO6330
// 
// KEY TO TABLE:        SY1STNBR
//                      SY2CLRID
//                      XDMCD
//                      PC2INSEG
//                      XWHCD
//                      PT3YYMM
// 
// MAINTENANCE HISTORY:
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          05/06/92  MADAMS  New record.
//          09/17/93  dbruih  changed record format to use
//                            etal/etalo date w 1 occurrance
// Y2KFIX 12/16/1997  TTHAN1  CHANGE SIZE OF PT3YYMM FROM 4 TO
//                            9.
// ************************
Record VFTCOV01 type basicRecord
  5 VFTCOV01-GROUP VFTCOV01-GROUP ; 
    10 VFTCOV01-KEY VFTCOV01-KEY ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XWHCD XWHCD ; 
      15 PT3YYMM PT3YYMM ; 
    10 PT-ETAL-ETALO-DT PT-ETAL-ETALO-DT ; 
    10 PT-FUTR-COV-PCT PT-FUTR-COV-PCT ; 
    10 PT-FUTR-COV-QTY PT-FUTR-COV-QTY ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
end // end VFTCOV01

// op-cust-need-dt
DataItem PT-ETAL-ETALO-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PT_FUTR_COV_PCT
DataItem PT-FUTR-COV-PCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PT_FUTR_COV_QTY
DataItem PT-FUTR-COV-QTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT0EM-COVDT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT0EM-COVDT2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT0EM-COVDT4 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT0EM-COVDT7 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT0EM-COVPCT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT0EM-COVPCT2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT0EM-COVPCT4 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT0EM-COVPCT7 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT0EM-COVQTY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT0EM-COVQTY2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT0EM-COVQTY4 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT0EM-COVQTY7 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// futures need date
DataItem PT0EM-NEEDDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT0EM-SEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date work century
DataItem PT0EW-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date work century
DataItem PT0EW-CCYYMM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date work area
DataItem PT0EW-CCYYMMDD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date work day
DataItem PT0EW-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT0EW-EDIT-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need date work year,mon,day
DataItem PT0EW-EDIT-CCYYMMDD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need date work day
DataItem PT0EW-EDIT-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need date work month
DataItem PT0EW-EDIT-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need date work year
DataItem PT0EW-EDIT-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 8 digits of filler
DataItem PT0EW-FILLER8 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mm and dd formated with a /
DataItem PT0EW-FORMATDATE char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted dd
DataItem PT0EW-FORMATDATEDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted mm
DataItem PT0EW-FORMATDATEMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted /
DataItem PT0EW-FORMATDATESL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// high date hold area
DataItem PT0EW-HOLDHIGHDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// high date hold area for order
DataItem PT0EW-HOLDHIGHDTORD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// percent hold area
DataItem PT0EW-HOLDHIGHPCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity hold area
DataItem PT0EW-HOLDHIGHQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for periods within ftcov
DataItem PT0EW-IX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for periods within ftcov
DataItem PT0EW-IX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for periods within ftcov
DataItem PT0EW-IX5 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem PT0EW-IXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for periods within ftcov
DataItem PT0EW-IXP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for w/s style table
DataItem PT0EW-IXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// high index for w/s style table
DataItem PT0EW-IXTHIGH smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// high index for w/s style table
DataItem PT0EW-IXW smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// high index for w/s style table
DataItem PT0EW-IXWHIGH smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// high index for w/s style table
DataItem PT0EW-IXWSAV smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date work month
DataItem PT0EW-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need date work day
DataItem PT0EW-NDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need date work month
DataItem PT0EW-NMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need date work year,mon,day
DataItem PT0EW-NMMDDYY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need date work year
DataItem PT0EW-NYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work area for order nbr
DataItem PT0EW-ORDNBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last digit of order nbr
DataItem PT0EW-ORDNBR9 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order need date
DataItem PT0EW-ORDNEEDDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Process single style or a list
DataItem PT0EW-STYORLISTSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem PT0EW-SWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem PT0EW-SWC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem PT0EW-SWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem PT0EW-SWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch map1
DataItem PT0EW-SWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch map2
DataItem PT0EW-SWR2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem PT0EW-SWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT0EW-VAL-WHSE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted dd
DataItem PT0EW-WHSE-IX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date century
DataItem PT0EW-WORK-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date year,mon,day
DataItem PT0EW-WORK-CCYYMMDD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date day
DataItem PT0EW-WORK-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date month
DataItem PT0EW-WORK-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date year
DataItem PT0EW-WORK-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date work year
DataItem PT0EW-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Record group level
DataItem VFTCOV01-GROUP char(36)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem VFTCOV01-KEY char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

