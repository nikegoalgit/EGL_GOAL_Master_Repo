package pt0d;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import pc.common.*;
import pg.common.*;
import pt.common.*;
import pw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PT0D ****
// This application allows a user to inquire on the production
// availability of up to ten style/color combinations.
// 
// There are four different screens that may be displayed.
// 
// The first screen displayed to the user indicates the
// selection criteria for the inquiry.  The Warehouse is
// specified, along with a list of Style/Color combinations
// that the user is requesting to view.  The monthly period
// detail is displayed for the user to page through, beginning
// with the first period, by pressing the ENTER key.  The user
// may request, instead, that a batch job be submitted to print
// the information selected from the list or that the period
// detail be bypassed and only the "bottom line" availability
// for each period be shown, by pressing the appropriate PF key
// from this screen.
// 
// The second screen is displayed when a valid list is ENTERed
// on the first screen or when the user scrolls back from the
// third screen to view the first period information.  It is
// the base detail and the detail for the first period.  The
// user may scroll left and right to view the sizes or forward
// to view subsequent periods for a selected style/color.  The
// user may, also, scroll forward and backward to view the next
// and previous, respectively, color selected from the list or
// style specified in the list.  The user may request, instead,
// that a batch job be submitted to print the information for
// the displayed style/color or that the period detail be
// bypassed and only the "bottom line" availability for each
// period be shown, by pressing the appropriate PF key from
// this screen.
// 
// The third screen is displayed when the user scrolls down on
// the second screen to view subsequent periods.  It is the
// detail for subsequent periods, two periods at a time.  The
// user may scroll left and right to view the sizes or forward
// to view subsequent periods for a selected style/color.  The
// user may, also, scroll forward and backward to view the next
// and previous, respectively, color selected from the list or
// style specified in the list.  The user may request, instead,
// that a batch job be submitted to print the information for
// the displayed style/color or that the period detail be
// bypassed and only the "bottom line" availability for each
// period be shown, by pressing the appropriate PF key from
// this screen.
// 
// The fourth screen displays the "bottom line" availability
// for each period in response to the user's PF key request on
// any of the other screens.  The user may scroll left and
// right to view the sizes for a selected style/color.  The
// user may, also, scroll forward and backward to view the next
// and previous, respectively, color selected from the list or
// style specified in the list.  The user may request, instead,
// that a batch job be submitted to print the information for
// the displayed style/color, by pressing the appropriate PF
// key from this screen.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          01/24/89  SPOPA   New application.
// E#00000  02/23/89  SPOPA   Enhanced scrolling capabilities.
// FIX      02/24/89  SPOPA   Use XTVCD to access DCORP tables.
// FIX      02/27/89  SPOPA   Handle no selection entered.
// E#00000  03/02/89  SPOPA   Remove PF7/PF8 keys from BL AVAL.
//                            ENTER pages to next warehouse.
//                            Clear M001 on EXIT from others.
//                            When PF14 between PERIODS and
//                            BL AVAL, start display at same
//                            style, color and warehouse.
//                            Correct PF8 on M002 if there are
//                            less than 3 periods for product.
// E#00000  03/07/89  SPOPA   Change BL variance calculation.
// E#00000  04/05/89  SPOPA   Change XTVCD processing to XGPCD.
// E#00001  04/24/89  SCOCHR  ALLOW 1ST PERIOD ON SCREEN 3
// E#00002  07/19/91  bantho  put * or : behind 'fc bk' lbl on
//                            screens #2 & 3 depending upon the
//                            fcst-book-ind field.
// pt-34    10/03/91  madams  change to display quality 02
//                            data.
// PT-41    03/30/93  MSMIT2  SHOW AVAIL AMOUNTS WITH +/-.
// PT9999   11/09/93  MSMIT2  SET PTWREC EMPTY.
// PTP072   12/19/94  MHUYNH  Bring in OAs to adjust supply.
// PT306    12/13/95  MHUYNH  Break smart reservations into
//                            periods.
// FF       06/03/96  LDAVI4  Changed legend SM RSV (smart
//                            reservation) to RSV in (reserved
//                            inventory) on screen 2 and 3.
//          08/15/96  MHUYNH  Changed legend RSV IN to BULKS.
// Y2KFIX   01/13/98  WSQUIR  MODIFICATIONS MADE TO: PT0DW00 &
//                            PT0DW03.
// Y2KFIX   02/06/98  rgilli  MODIFICATIONS MADE TO:
//                            PT0D210: Change t/s length from
//                                     1749 to 1751.
//                            PT0D212: Change to us iomod
//                                     vfbasm04 vs vfbasm03.
//                            PT0D213: Change to us iomod
//                                     vfbasm04 vs vfbasm03.
//                            PT0D216: Change to us iomod
//                                     vfbasm04 vs vfbasm03.
// PT4416   02/22/00  RSELVA  FIX FOR SCROLL SIZE ERR - PT0D001
// 
// *********************
Program PT0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PT00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  PT0DW00 PT0DW00; // record
  PT0DW01 PT0DW01; // record
  PT0DW02 PT0DW02; // record
  PT0DW03 PT0DW03; // record
  PT0DW04 PT0DW04; // record
  PT0DW05 PT0DW05; // record
  PTWREC PTWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VFBASE02 VFBASE02; // record
  VFBASM02 VFBASM02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PT0DT01 {deleteAfterUse = yes}; // table
  use PT0DT02 {deleteAfterUse = yes}; // table
  use PT0DT03 {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use PT0DM.PT0DM001,  // forms
      PT0DM.PT0DM002, 
      PT0DM.PT0DM003, 
      PT0DM.PT0DM004, 
      PT0DM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPT001: XPPT001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set PT0DM001 initial; /* M001 input/output*/
    set PT0DM002 initial; /* M002 input/output*/
    set PT0DM003 initial; /* M003 input/output*/
    set PT0DM004 initial; /* M004 input/output*/
    set PT0DW00 empty; /* Working storage*/
    set PT0DW01 empty; /* M001 display storage*/
    set PT0DW01 empty; /* M002 display storage*/
    set PT0DW03 empty; /* M003 display storage*/
    set PT0DW04 empty; /* M004 display storage*/
    set PT0DW05 empty; /* I/O module parameters*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/

    set PTWREC empty; /* INITIALIZE COMMAREA WORK REC*/

    PT0DW00.PT0DWSWM = "1"; /* Map to be displayed switch*/
    PT0DW00.PT0DWSWR = "Y"; /* Request for data switch*/

    PT0DW00.XGPCD = "02"; /* General product class*/
    PT0DW00.XWHCD = "XX"; /* Default warehouse code*/
    PT0DW00.XQACD = "01"; /* Default quality code*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PT0D001; /* Converse the main process*/


    PT0D001: PT0D001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PT0D001; /* Converse the main process*/


  end // end main
end // end PT0D

// Main process to display a map
Function PT0D001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, if specified, display the third map.*/
   /* 4) Otherwise, if specified, display the fourth map.*/
   /* 5) Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT0DM002.PT0DMSSA = 08;
  PT0DM003.PT0DMSSA = 08;
  PT0DM004.PT0DMSSA = 08;
  PT0DM002.PT0DMPSA = 00;
  PT0DM003.PT0DMPSA = 02;

  if (PT0DW00.PT0DWSWM == "1") /* Map 1 was requested*/

    PT0D100(); /* Display map 1*/

  else

    if (PT0DW00.PT0DWSWM == "2") /* Map 2 was requested*/

      PT0D200(); /* Display map 2*/

    else

      if (PT0DW00.PT0DWSWM == "3") /* Map 3 was requested*/

        PT0D300(); /* Display map 3*/

      else

        if (PT0DW00.PT0DWSWM == "4") /* Map 4 was requested*/

          PT0D400(); /* Display map 4*/

        else

          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "APPL"; /* Type of error*/
          TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
          TA1REC.TA1MAPNO = PT0DW00.PT0DWSWM; /* Map number*/
          TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
          TA1REC.TA1PGMNO = "001"; /* Program number*/

          call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

          COMMAREA.CATOAP = "PT0M"; /* TO application*/

          XSPT001(); /* Exit to another application*/

          exit program; /* Severe error exit to CICS*/

        end

      end

    end

  end


end // end PT0D001

// Display the selected table row
Function PT0D100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT0D110(); /* Obtain the data to display*/

  PT0D120(); /* Format and display the map*/

  PT0D130(); /* Check attention identifier*/

  PT0D140(); /* Reset fields to normal intensity*/

  PT0D150(); /* Verify the entered data*/

  PT0D160(); /* Process valid input request*/


end // end PT0D100

// Obtain the data to display
Function PT0D110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.PT0DWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Obtain the description for the warehouse code.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.XWHCD == "XX") /* All warehouses*/

    PT0DW00.XWHABRV = "ALL WHSES"; /* Description*/

  else

    if (PT0DW00.XWHCD == "**") /* Corporate warehouse*/

      PT0DW00.XWHABRV = "CORP WHSE"; /* Description*/

    else

      if (PT0DW00.XWHCD in XWHTBL.XWHCD /* Code in table*/
       && XWHTBL.XWHCD[sysVar.arrayIndex] != "99") /* and not end of table*/

        PT0DW00.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* Description*/

      else

        PT0DW00.XWHABRV = " "; /* Description*/

        PT0DM001.XXXMODID = "110"; /* Module identification*/
        PTWREC.XXXMSGNO = 36; /* Warehouse missing or invalid*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Obtain the description for the quality code.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.XQACD in XQATBL.XQACD /* Code in table*/
   && XQATBL.XQACD[sysVar.arrayIndex] != "99") /* and not end of table*/

    PT0DW00.XQADESC = XQATBL.XQADESC[sysVar.arrayIndex]; /* Description*/

  else

    PT0DW00.XQADESC = " "; /* Description*/

    PT0DM001.XXXMODID = "110"; /* Module identification*/
    PTWREC.XXXMSGNO = 117; /* Quality missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* If no error was found, indicate request for data complete.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/
    PT0DW00.PT0DWSWR = "N"; /* Request for data switch*/
  end


end // end PT0D110

// Format and converse the map
Function PT0D120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    PTWREC.XXXMODID = PT0DM001.XXXMODID; /* Module identification*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If map is not formatted, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (PT0DM001.XXXCURDT == 0) /* Map is not formatted*/
    PT0D121(); /* Format the data on the map*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PT0DM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PT0DM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PT0DM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0) /* Message to display*/

    PT0DM001.XXXMODID = PTWREC.XXXMODID; /* Module identification*/
    if (PTWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PTWREC.XXXMSGNO);
    end /* Message number*/
    set PT0DM001 alarm; /* Indicate sound alarm*/

  end

  converse PT0DM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PT0DM001.XXXMODID = " "; /* Module identification*/
  COMMAREA.CATOAP = PT0DM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PT0DM001.CAITEM; /* Application data*/


end // end PT0D120

// Format the display data
Function PT0D121()
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PT0DM001.XWHCD = PT0DW00.XWHCD; /* Warehouse code*/
  PT0DM001.XWHABRV = PT0DW00.XWHABRV; /* Description*/
  PT0DM001.XQACD = PT0DW00.XQACD; /* Quality code*/
  PT0DM001.XQADESC = PT0DW00.XQADESC; /* Description*/


end // end PT0D121

// Check attention identifier
Function PT0D130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PT0DM001 initial; /* M001 input/output*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PT0D131(); /* Purge any temporary storage*/

      XSPT001(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    PT0DM001.XXXMODID = "130"; /* Module identification*/
    set PT0DM001.CATOAP cursor, bold; /* Highlight*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PT0DM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PT0M"; /* TO application*/
    end

    PT0D131(); /* Purge any temporary storage*/

    XSPT001(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    PT0DM001.XXXMODID = "130"; /* Module identification*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf12  /* and PF12 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14) /* and PF14 was not pressed*/

    PT0DM001.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end


end // end PT0D130

// Purge any temporary storage
Function PT0D131()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PT0DW03 empty; /* Base display storage*/
  set PT0DW04 empty; /* Bottom line display storage*/

  PT0DW00.TA5TSQIX = 0; /* Highest page number*/
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PT0DW00.PT0DWIXL = 1; /* Display line number*/

   /* ------------------------------------------------------------*/
   /* Purge any base display storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PT0DW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PT0DM001.XXXMODID = "131"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PT0DM001.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PT0DW00.PT0DWSWM = "1"; /* Map to be displayed switch*/

  exit stack; /* Exit to display map*/


end // end PT0D131

// Reset highlighted fields
Function PT0D140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PT0DM001.XWHCD initialAttributes; /* Warehouse code*/

  set PT0DM001.XQACD initialAttributes; /* Quality code*/

  PT0DW00.PT0DWIXL = 1; /* Initialize line index*/

  while (PT0DW00.PT0DWIXL <= 10) /* Until end of lines*/

    set PT0DM001.SY1STNBR[PT0DWIXL] initialAttributes; /* Style number*/
    set PT0DM001.SY2CLRID[PT0DWIXL] initialAttributes; /* Color identification*/
    set PT0DM001.XDMCD[PT0DWIXL] initialAttributes; /* Dimension code*/
    set PT0DM001.XUMCD[PT0DWIXL] initialAttributes; /* Unit of measure code*/
    set PT0DM001.XSDCD[PT0DWIXL] initialAttributes; /* Specification difference*/
    set PT0DM001.XPGCD[PT0DWIXL] initialAttributes; /* Packaging type code*/

    PT0DW00.PT0DWIXL = PT0DW00.PT0DWIXL + 1; /* Increment line index*/

  end

  set PT0DM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PT0DM001.CAITEM initialAttributes; /* Commarea application data*/


end // end PT0D140

// Verify the entered data
Function PT0D150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PT0DM001.XXXMODID = "150"; /* Module identification*/
    set PT0DM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the protected code fields in the selection lines.*/
   /* ------------------------------------------------------------*/

  PT0DW00.PT0DWIXL = 1; /* Initialize line index*/

  while (PT0DW00.PT0DWIXL <= 10) /* Until end of lines*/

    PT0DM001.SY1SSTNM[PT0DWIXL] = " "; /* Style name*/
    PT0DM001.SY2CLRAB[PT0DWIXL] = " "; /* Color abbreviation*/
    PT0DM001.XDMABRV[PT0DWIXL] = " "; /* Dimension abbreviation*/
    PT0DM001.XUMCD[PT0DWIXL] = " "; /* Unit of measure*/
    PT0DM001.XUMDESC[PT0DWIXL] = " "; /* Unit of measure abbreviation*/
    PT0DM001.XSDCD[PT0DWIXL] = " "; /* Specification difference*/
    PT0DM001.XPGCD[PT0DWIXL] = " "; /* Packaging type*/

    PT0DW00.PT0DWIXL = PT0DW00.PT0DWIXL + 1; /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any modifiable fields were changed.*/
   /* ------------------------------------------------------------*/

  PT0D151(); /* Check for any entered fields*/

   /* ------------------------------------------------------------*/
   /* If warehouse was changed, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (PT0DM001.XWHCD != PT0DW00.XWHCD) /* Warehouse changed*/
    PT0D152(); /* Verify warehouse code*/
  end

   /* ------------------------------------------------------------*/
   /* If quality was changed, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (PT0DM001.XQACD != PT0DW00.XQACD) /* Quality changed*/
    PT0D154(); /* Verify Quality code*/
  end

   /* ------------------------------------------------------------*/
   /* If any selection line was entered, verify the selection.*/
   /* ------------------------------------------------------------*/

  PT0DW00.PT0DWIXL = 10; /* Initialize line index*/

  while (PT0DW00.PT0DWIXL > 0) /* Until end of lines*/

    /* ------------------------------------------------------------*/
     /* If any fields were entered, verify the selection line.*/
    /* ------------------------------------------------------------*/

    if (PT0DM001.SY1STNBR[PT0DWIXL] > " " /* Style entered*/
     || PT0DM001.SY2CLRID[PT0DWIXL] > " " /* or color*/
     || PT0DM001.XDMCD[PT0DWIXL] > " "    /* or dimension*/
     || PT0DM001.XUMCD[PT0DWIXL] > " "    /* or unit of measure*/
     || PT0DM001.XSDCD[PT0DWIXL] > " "    /* or specification difference*/
     || PT0DM001.XPGCD[PT0DWIXL] > " ")   /* or packaging type*/

      PT0DW00.PT0DWSWE = "N"; /* Initialize error switch*/

      PT0D153(); /* Verify selection line*/

    end

    PT0DW00.PT0DWIXL = PT0DW00.PT0DWIXL - 1; /* Decrement line index*/

  end

   /* ------------------------------------------------------------*/
   /* If no valid warehouse entered, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (PT0DM001.XWHABRV <= " ") /* Valid warehouse not entered*/

    PT0DM001.XXXMODID = "150"; /* Module identification*/
    set PT0DM001.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(36); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* If no valid quality entered, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (PT0DM001.XQADESC <= " ") /* Valid quality not entered*/

    PT0DM001.XXXMODID = "150"; /* Module identification*/
    set PT0DM001.XQACD cursor, bold; /* Highlight*/
    converseLib.validationFailed(117); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If PF12 was pressed, indicate press enter to update and*/
   /* exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf12) /* PF12 was pressed*/

    PT0DM001.XXXMODID = "150"; /* Module identification*/
    converseLib.validationFailed(17); /* Indicate press enter to update*/

    exit stack; /* Exit to display map*/

  end


end // end PT0D150

// Check for any entered fields
Function PT0D151()
   /* ------------------------------------------------------------*/
   /* Determine whether any selections were entered.*/
   /* ------------------------------------------------------------*/

  PT0DW00.PT0DWIXL = 1; /* Initialize line index*/

  while (PT0DW00.PT0DWIXL <= 10) /* Until end of lines*/

    /* ------------------------------------------------------------*/
     /* If any selections were entered, return to verify the data.*/
    /* ------------------------------------------------------------*/

    if (PT0DM001.SY1STNBR[PT0DWIXL] > " " /* Style entered*/
     || PT0DM001.SY2CLRID[PT0DWIXL] > " " /* or color*/
     || PT0DM001.XDMCD[PT0DWIXL] > " "    /* or dimension*/
     || PT0DM001.XUMCD[PT0DWIXL] > " "    /* or unit of measure*/
     || PT0DM001.XSDCD[PT0DWIXL] > " "    /* or specification difference*/
     || PT0DM001.XPGCD[PT0DWIXL] > " ")   /* or packaging type*/

      return; /* Return to previous process*/

    end

    PT0DW00.PT0DWIXL = PT0DW00.PT0DWIXL + 1; /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* If warehouse code was changed, return to verify the data.*/
   /* ------------------------------------------------------------*/

  if (PT0DM001.XWHCD != PT0DW00.XWHCD) /* Warehouse code changed*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If quality code was changed, return to verify the data.*/
   /* ------------------------------------------------------------*/

  if (PT0DM001.XQACD != PT0DW00.XQACD) /* Quality code changed*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If no selections were entered, exit to display the map.*/
   /* ------------------------------------------------------------*/

  set PT0DM001 initial; /* M001 input/output area*/

  exit stack; /* Exit to display map*/


end // end PT0D151

// Verify the warehouse code
Function PT0D152()
   /* ------------------------------------------------------------*/
   /* Determine if the code is one of the allowable overrides.*/
   /* ------------------------------------------------------------*/

  if (PT0DM001.XWHCD == "XX") /* All warehouses*/

    PT0DM001.XWHABRV = "ALL WHSES"; /* Description*/

  else

    if (PT0DM001.XWHCD == "**") /* Corporate warehouse*/

      PT0DM001.XWHABRV = "CORP WHSE"; /* Description*/

    else

      /* ------------------------------------------------------------*/
       /* Determine if the code is in the table.*/
      /* ------------------------------------------------------------*/

      if (PT0DM001.XWHCD in XWHTBL.XWHCD /* Code in table*/
       && XWHTBL.XWHCD[sysVar.arrayIndex] != "99") /* and not end of table*/

        PT0DM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
                                   /* Save description*/

      else

        /* ------------------------------------------------------------*/
         /* Otherwise, indicate that a valid warehouse was not entered.*/
        /* ------------------------------------------------------------*/

        PT0DM001.XWHABRV = " "; /* Clear description*/

      end

    end

  end


end // end PT0D152

// Verify the selection line
Function PT0D153()
   /* ------------------------------------------------------------*/
   /* Set default values for the fields in the selection line.*/
   /* ------------------------------------------------------------*/

  if (PT0DM001.SY2CLRID[PT0DWIXL] <= " ") /* Color not entered*/
    PT0DM001.SY2CLRID[PT0DWIXL] = "***"; /* Default color*/
  end

  if (PT0DM001.XDMCD[PT0DWIXL] <= " ") /* Dimension not entered*/
    PT0DM001.XDMCD[PT0DWIXL] = "00"; /* Default dimension*/
  end

  PT0DM001.XSDCD[PT0DWIXL] = "000"; /* Specification difference*/
  PT0DM001.XPGCD[PT0DWIXL] = "00"; /* Packaging type*/

   /* ------------------------------------------------------------*/
   /* Verify the dimension code.*/
   /* ------------------------------------------------------------*/

  if (PT0DM001.XDMCD[PT0DWIXL] in XDMTBL.XDMCD /* Code in table*/
   && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PT0DM001.XDMABRV[PT0DWIXL] = XDMTBL.XDMABRV[sysVar.arrayIndex];

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PT0DW00.PT0DWSWE = "Y"; /* Indicate error found*/

    PT0DM001.XXXMODID = "153"; /* Module identification*/
    set PT0DM001.XDMCD[PT0DWIXL] cursor, bold; /* Highlight*/
    converseLib.validationFailed(30); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* If color was not entered, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (PT0DM001.SY2CLRID[PT0DWIXL] <= " ") /* Color was not entered*/

    PT0DW00.PT0DWSWE = "Y"; /* Indicate error found*/

    PT0DM001.XXXMODID = "153"; /* Module identification*/
    set PT0DM001.SY2CLRID[PT0DWIXL] cursor, bold; /* Highlight*/
    converseLib.validationFailed(29); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* If style was not entered, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (PT0DM001.SY1STNBR[PT0DWIXL] <= " ") /* Style was not entered*/

    PT0DW00.PT0DWSWE = "Y"; /* Indicate error found*/

    PT0DM001.XXXMODID = "153"; /* Module identification*/
    set PT0DM001.SY1STNBR[PT0DWIXL] cursor, bold; /* Highlight*/
    converseLib.validationFailed(28); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* If no edit error was found, determine if the product number*/
   /* is in the Production Style/Color Table.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.PT0DWSWE == "N") /* No edit error was found*/

    set PG2REC empty; /* Clear row storage area*/

    PG2REC.XGPCD = PT0DW00.XGPCD; /* GPC code*/
    PG2REC.SY1STNBR = PT0DM001.SY1STNBR[PT0DWIXL]; /* Style code*/
    PG2REC.SY2CLRID = PT0DM001.SY2CLRID[PT0DWIXL]; /* Color code*/
    PG2REC.XDMCD = PT0DM001.XDMCD[PT0DWIXL]; /* Dimension code*/

    if (PT0DM001.SY2CLRID[PT0DWIXL] == "***") /* All colors selected*/

      PT0DS01(); /* Select first style row*/
    else
      PT0DS02(); /* Select style/color row*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If no edit error was found and valid warehouse was entered,*/
   /* determine if the selection is in the Modeling Base Table.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.PT0DWSWE == "N" /* No edit error was found*/
   && PT0DM001.XWHABRV > " ") /* and valid warehouse was entered*/

    set VFBASE02 empty; /* Clear row storage area*/

    VFBASE02.XGPCD = PT0DW00.XGPCD; /* GPC code*/
    VFBASE02.SY1STNBR = PT0DM001.SY1STNBR[PT0DWIXL]; /* Style code*/
    VFBASE02.SY2CLRID = PT0DM001.SY2CLRID[PT0DWIXL]; /* Color code*/
    VFBASE02.XDMCD = PT0DM001.XDMCD[PT0DWIXL]; /* Dimension code*/
    VFBASE02.XSDCD = PT0DM001.XSDCD[PT0DWIXL]; /* Spec diff code*/
    VFBASE02.XPGCD = PT0DM001.XPGCD[PT0DWIXL]; /* Pkg type code*/
    VFBASE02.XUMCD = PT0DM001.XUMCD[PT0DWIXL]; /* Unit of measure*/
    VFBASE02.XQACD = PT0DM001.XQACD; /* Quality code*/

    if (PT0DM001.XWHCD == "XX") /* All warehouses requested*/

      VFBASE02.XWHCD = "* "; /* Indicate all warehouses*/
    else
      VFBASE02.XWHCD = PT0DM001.XWHCD; /* Warehouse code*/

    end

    PT0DS03(); /* Select base table set*/

    PT0DS04(); /* Fetch base table row*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Table row not found*/

      PT0DM001.XXXMODID = "153"; /* Module identification*/
      set PT0DM001.SY1STNBR[PT0DWIXL] cursor, bold; /* Highlight*/
      set PT0DM001.SY2CLRID[PT0DWIXL] bold; /* Highlight*/
      set PT0DM001.XDMCD[PT0DWIXL] bold; /* Highlight*/
      set PT0DM001.XUMCD[PT0DWIXL] bold; /* Highlight*/
      set PT0DM001.XSDCD[PT0DWIXL] bold; /* Highlight*/
      set PT0DM001.XPGCD[PT0DWIXL] bold; /* Highlight*/
      converseLib.validationFailed(38); /* Indicate no base information*/

    end

    PT0DS05(); /* Close base table set*/

  end


end // end PT0D153

// Verify the quality code
Function PT0D154()
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table.*/
   /* ------------------------------------------------------------*/

  if (PT0DM001.XQACD in XQATBL.XQACD /* Code in table*/
   && XQATBL.XQACD[sysVar.arrayIndex] != "99") /* and not end of table*/

    PT0DM001.XQADESC = XQATBL.XQADESC[sysVar.arrayIndex];
    PT0DW00.XQADESC = XQATBL.XQADESC[sysVar.arrayIndex];
                               /* Save description*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, indicate that a valid quality was not entered.*/
    /* ------------------------------------------------------------*/

    PT0DM001.XQADESC = " "; /* Clear description*/

  end


end // end PT0D154

// Process valid input request
Function PT0D160()
   /* ------------------------------------------------------------*/
   /* Purge any existing temporary storage queues.*/
   /* ------------------------------------------------------------*/

  PT0D131(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Save the key map data.*/
   /* ------------------------------------------------------------*/

  PT0DW00.XWHCD = PT0DM001.XWHCD; /* Warehouse code*/
  PT0DW00.XWHABRV = PT0DM001.XWHABRV; /* Abbreviation*/
  PT0DW00.XQACD = PT0DM001.XQACD; /* Quality code*/
  PT0DW00.XQADESC = PT0DM001.XQADESC; /* Abbreviation*/

   /* ------------------------------------------------------------*/
   /* Commit all changes to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 1;
  sysLib.commit(); /* Commit all changes*/

   /* ------------------------------------------------------------*/
   /* Establish the selection index on first selection entered.*/
   /* ------------------------------------------------------------*/

  PT0DW00.PT0DWIXS = 1; /* Initialize selection index*/

  while (PT0DW00.PT0DWIXS <= 10 /* Until end of lines*/
   && PT0DM001.SY1STNBR[PT0DWIXS] <= " ") /* or selection found*/

    PT0DW00.PT0DWIXS = PT0DW00.PT0DWIXS + 1; /* Increment index*/

  end

   /* ------------------------------------------------------------*/
   /* If no selection was entered, return to display MAP 001.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.PT0DWIXS > 10) /* No selection entered*/

    set PT0DM001 initial; /* M001 input/output*/

    PT0DW00.PT0DWSWM = "1"; /* Map to be displayed switch*/
    PT0DW00.PT0DWSWR = "N"; /* Request for data switch*/

    return; /* Return to previous process*/

  else

    set PT0DM001.SY1STNBR[PT0DWIXS] cursor; /* Position cursor*/

  end

   /* ------------------------------------------------------------*/
   /* If PRINT was requested, format and submit the request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Print was requested*/

    if (PT0DM001.XQACD == "01") /* First quality*/

      PT0D161(); /* Format/submit print request*/

    else

      PT0D162(); /* Format/submit print request*/

    end

    set PT0DM001 initial; /* M001 input/output*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear map input/output area and request data to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* Bottom line was requested*/

    set PT0DM004 initial; /* M004 input/output*/

    PT0DW00.PT0DWSWM = "4"; /* Map to be displayed switch*/
    PT0DW00.PT0DWSWR = "Y"; /* Request for data switch*/

  end

  if (converseVar.eventKey is enter) /* Period data was requested*/

    set PT0DM002 initial; /* M002 input/output*/

    PT0DW00.PT0DWSWM = "2"; /* Map to be displayed switch*/
    PT0DW00.PT0DWSWR = "Y"; /* Request for data switch*/

  end

   /* ------------------------------------------------------------*/
   /* Initialize the working storage areas to be used.*/
   /* ------------------------------------------------------------*/

  set PG1REC empty; /* Production Special Users row*/
  set PG2REC empty; /* Production Style/Color row*/
  set PG3REC empty; /* Product Size Translation parameters*/


end // end PT0D160

// Format/submit print request
Function PT0D161()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PT0DW00.PT0DWIXT = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PT0DW00.PT0DWIXT > 0) /* Until end of table*/

    if (PT0DT01.TARTYPE[PT0DWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters for each line specified by the user.*/
      /* ------------------------------------------------------------*/

      PT0DW00.PT0DWIXL = 1; /* Initialize map index*/

      while (PT0DW00.PT0DWIXL <= 10) /* Until end of lines*/

        if (PT0DM001.SY1STNBR[PT0DWIXL] > " ") /* Selection entered*/

          PT0DW01.XWHCD = PT0DW00.XWHCD; /* Warehouse*/
          PT0DW01.SY1STNBR = PT0DM001.SY1STNBR[PT0DWIXL]; /* Style*/
          PT0DW01.SY2CLRID = PT0DM001.SY2CLRID[PT0DWIXL]; /* Color*/
          PT0DW01.XDMCD = PT0DM001.XDMCD[PT0DWIXL]; /* Dimension*/

          PT0DS06(); /* Format selection parameters*/

        end

        PT0DW00.PT0DWIXL = PT0DW00.PT0DWIXL + 1; /* Increment line index*/

      end

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PT0DT01.TARJCL[PT0DWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT0DT01.TARTYPE[PT0DWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT0DT01.TARJCL[PT0DWIXT] == "/*EOF") /* End of table*/

      PT0DW00.PT0DWIXT = 0; /* Indicate end of table*/
    else
      PT0DW00.PT0DWIXT = PT0DW00.PT0DWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PT0DM001.XXXMODID = "161"; /* Module identification*/

  PT0DS07(); /* Submit the JCL*/


end // end PT0D161

// Format/submit print request
Function PT0D162()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PT0DW00.PT0DWIXT = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PT0DW00.PT0DWIXT > 0) /* Until end of table*/
    if (PT0DT03.TARTYPE[PT0DWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters for each line specified by the user.*/
      /* ------------------------------------------------------------*/

      PT0DW00.PT0DWIXL = 1; /* Initialize map index*/

      while (PT0DW00.PT0DWIXL <= 10) /* Until end of lines*/

        if (PT0DM001.SY1STNBR[PT0DWIXL] > " ") /* Selection entered*/

          PT0DW01.XWHCD = PT0DW00.XWHCD; /* Warehouse*/
          PT0DW01.SY1STNBR = PT0DM001.SY1STNBR[PT0DWIXL]; /* Style*/
          PT0DW01.SY2CLRID = PT0DM001.SY2CLRID[PT0DWIXL]; /* Color*/
          PT0DW01.XDMCD = PT0DM001.XDMCD[PT0DWIXL]; /* Dimension*/

          PT0DS06(); /* Format selection parameters*/

        end

        PT0DW00.PT0DWIXL = PT0DW00.PT0DWIXL + 1; /* Increment line index*/

      end

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PT0DT03.TARJCL[PT0DWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT0DT03.TARTYPE[PT0DWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT0DT03.TARJCL[PT0DWIXT] == "/*EOF") /* End of table*/

      PT0DW00.PT0DWIXT = 0; /* Indicate end of table*/
    else
      PT0DW00.PT0DWIXT = PT0DW00.PT0DWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PT0DM001.XXXMODID = "162"; /* Module identification*/

  PT0DS07(); /* Submit the JCL*/


end // end PT0D162

// List the rows in the table
Function PT0D200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT0D210(); /* Obtain the data to display*/

  PT0D220(); /* Format and display the map*/

  PT0D230(); /* Check attention identifier*/

  PT0D240(); /* Reset fields to normal intensity*/

  PT0D250(); /* Verify the entered data*/

  PT0D260(); /* Process valid input request*/


end // end PT0D200

// Obtain the data to display
Function PT0D210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.PT0DWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Purge any existing queue in temporary storage.*/
   /* ------------------------------------------------------------*/

  PT0D131(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

   /* --------------------------- y2k out begin ---------------------*/
   /* MOVE 1749 TO PT0DW00.PT0DWTSL;   /* Temporary storage page length*/
   /* --------------------------- y2k out end   ---------------------*/

   /* --------------------------- y2k in begin  ---------------------*/
  PT0DW00.PT0DWTSL = 1751; /* Temporary storage page length*/
   /* --------------------------- y2k in end    ---------------------*/

  PT0DW00.PT0DWIXD = 1; /* init color index*/
  PT0DW00.PT0DW-COLOR-TABLE = " "; /* init color table*/
   /* ------------------------------------------------------------*/
   /* Either load color driver table with single color or if color*/
   /* is wildcarded get all of the colors for the current style*/
   /* and load the table.*/
   /* ------------------------------------------------------------*/
  if (PT0DM001.SY2CLRID[PT0DWIXS] == "***") /* color is wildcarded*/
    PT0DW00.PT0DW-COLOR[PT0DWIXD] = PT0DM001.SY2CLRID[PT0DWIXS];
    PT0DW05.XWHCD[1] = "  "; /* From warehouse*/
    PT0DW05.XWHCD[2] = "99"; /* To warehouse*/
    /* ------------------------------------------------------------*/
    /* Open cursor*/
    /* ------------------------------------------------------------*/
    PT0D212(); /* Select FBASM and open cursor*/
    /* ------------------------------------------------------------*/
    /* Fetch and load color table with all colors of current style*/
    /* ------------------------------------------------------------*/
    PT0D213(); /* Fetch selected FBASM rows*/
    while (PT0DW00.PT0DWSWC != "Y") /* Until end of cursor*/
      if (PT0DW00.PT0DWIXD > 1) /* If there is a prior entry*/
        sysVar.arrayIndex = PT0DW00.PT0DWIXD - 1;
        if (VFBASM02.SY2CLRID != PT0DW00.PT0DW-COLOR[sysVar.arrayIndex])
          PT0DW00.PT0DW-COLOR[PT0DWIXD] = VFBASM02.SY2CLRID;
          PT0DW00.PT0DWIXD = PT0DW00.PT0DWIXD + 1; /* increment index*/
        end
      else
        PT0DW00.PT0DW-COLOR[PT0DWIXD] = VFBASM02.SY2CLRID;
        PT0DW00.PT0DWIXD = PT0DW00.PT0DWIXD + 1; /* increment index*/
      end
      PT0D213(); /* Fetch selected FBASM rows*/
    end
    /* ------------------------------------------------------------*/
    /* Close cursor*/
    /* ------------------------------------------------------------*/
    PT0D216(); /* Close the FBASM cursor*/
    PT0DW00.PT0DWIXD = 1; /* reset color index*/
  else
    /* ------------------------------------------------------------*/
    /* Load color table with color from map.*/
    /* ------------------------------------------------------------*/
    PT0DW00.PT0DW-COLOR[PT0DWIXD] = PT0DM001.SY2CLRID[PT0DWIXS];
  end
  while (PT0DW00.PT0DW-COLOR[PT0DWIXD] != " ") /* colors to process*/
    if (PT0DM001.XWHCD == "XX") /* All warehouses requested*/
      PT0DW05.XWHCD[1] = "00"; /* From warehouse*/
      PT0DW05.XWHCD[2] = "99"; /* To warehouse*/
      /* ------------------------------------------------------------*/
      /* Select and open the cursor for the set to be formatted.*/
      /* ------------------------------------------------------------*/
      PT0D212(); /* Select FBASM and open cursor*/
      /* ------------------------------------------------------------*/
      /* Fetch and format the data into pages until end of cursor.*/
      /* ------------------------------------------------------------*/
      while (PT0DW00.PT0DWSWC != "Y") /* Until end of cursor*/
        PT0D213(); /* Fetch selected FBASM rows*/
        if (PT0DW00.PT0DWSWC == "N") /* Not end of cursor*/
          /* ------------------------------------------------------------*/
          /* If key fields changed, add the page to the storage queue.*/
          /* ------------------------------------------------------------*/
          if (PT0DW03.VFBASM02-KEY == " ") /* First time through*/
            PT0DW03.PT0DWSWP = "Y"; /* First period switch*/
          else
            if (PT0DW03.VFBASM02-KEY != VFBASM02.VFBASM02-KEY /* Key changed*/
             || PT0DW03.PT3YYMM != VFBASM02.PT3YYMM)          /* or period changed*/

              if (PT0DW03.VFBASM02-KEY == VFBASM02.VFBASM02-KEY) /* Same key*/
                PT0DW00.PT0DWSWP = "N"; /* Not first period*/
              else
                PT0DW00.PT0DWSWP = "Y"; /* First period*/
              end
              PT0D214(); /* Add page to temporary storage*/
              PT0DW03.PT0DWSWP = PT0DW00.PT0DWSWP; /* Period switch*/
            end
          end
          /* ------------------------------------------------------------*/
          /* Format the data into the map display storage area.*/
          /* ------------------------------------------------------------*/
          PT0D215(); /* Format the display storage*/
        end
      end
      /* ------------------------------------------------------------*/
      /* Add any partially formatted last page to the queue.*/
      /* ------------------------------------------------------------*/
      if (PT0DW03.VFBASM02-KEY > " ") /* Page was formatted*/
        PT0D214(); /* Add page to temporary storage*/
      end
      /* ------------------------------------------------------------*/
      /* Close the cursor for the selected set.*/
      /* ------------------------------------------------------------*/
      PT0D216(); /* Close the selected FBASM cursor*/
      /* ------------------------------------------------------------*/
      /* Set range to obtain direct ship and corporate warehouses.*/
      /* ------------------------------------------------------------*/
      PT0DW05.XWHCD[1] = "  "; /* From warehouse*/
      PT0DW05.XWHCD[2] = "ZZ"; /* To warehouse*/
    else
      /* ------------------------------------------------------------*/
      /* Otherwise, set range to obtain a single warehouse.*/
      /* ------------------------------------------------------------*/
      PT0DW05.XWHCD[1] = PT0DM001.XWHCD; /* From warehouse*/
      PT0DW05.XWHCD[2] = PT0DM001.XWHCD; /* To warehouse*/
    end
    /* ------------------------------------------------------------*/
    /* Select and open the cursor for the set to be formatted.*/
    /* ------------------------------------------------------------*/
    PT0D212(); /* Select FBASM and open cursor*/
    /* ------------------------------------------------------------*/
    /* Fetch and format the data into pages until end of cursor.*/
    /* ------------------------------------------------------------*/
    while (PT0DW00.PT0DWSWC != "Y") /* Until end of cursor*/
      PT0D213(); /* Fetch selected FBASM rows*/
      if (PT0DW00.PT0DWSWC == "N") /* Not end of cursor*/
        /* ------------------------------------------------------------*/
        /* If key fields changed, add the page to the storage queue.*/
        /* ------------------------------------------------------------*/
        if (PT0DW03.VFBASM02-KEY == " ") /* First time through*/
          PT0DW03.PT0DWSWP = "Y"; /* First period switch*/
        else
          if (PT0DW03.VFBASM02-KEY != VFBASM02.VFBASM02-KEY /* Key changed*/
           || PT0DW03.PT3YYMM != VFBASM02.PT3YYMM)          /* or period changed*/

            if (PT0DW03.VFBASM02-KEY == VFBASM02.VFBASM02-KEY) /* Same key*/
              PT0DW00.PT0DWSWP = "N"; /* First period switch*/
            else
              PT0DW00.PT0DWSWP = "Y"; /* First period switch*/
            end

            PT0D214(); /* Add page to temporary storage*/

            PT0DW03.PT0DWSWP = PT0DW00.PT0DWSWP;
                                   /* First period switch*/
          end
        end
        /* ------------------------------------------------------------*/
        /* Format the data into the map display storage area.*/
        /* ------------------------------------------------------------*/
        PT0D215(); /* Format the display storage*/
      end
    end

    /* ------------------------------------------------------------*/
    /* Add any partially formatted last page to the queue.*/
    /* ------------------------------------------------------------*/
    if (PT0DW03.VFBASM02-KEY > " ") /* Page was formatted*/
      PT0D214(); /* Add page to temporary storage*/
    end

    /* ------------------------------------------------------------*/
    /* Close the cursor for the selected set.*/
    /* ------------------------------------------------------------*/

    PT0D216(); /* Close the selected FBASM cursor*/

    PT0DW00.PT0DWIXD = PT0DW00.PT0DWIXD + 1; /* increment index*/
  end
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PT0DW00.PT0DWSWR = "N"; /* Request for data switch*/
  PT0DW00.PT0DWTSP = 1; /* Page number*/
  PT0DW00.PT0DMPSA = 2; /* Period scroll amount*/
  PT0DW00.PT0DMSSA = 8; /* Size scroll amount*/

   /* ------------------------------------------------------------*/
   /* If from the BL AVAL display, find the page to be displayed.*/
   /* ------------------------------------------------------------*/

  if (PT0DM002.SY1STNBR > " ")
    PT0D217(); /* Find the page to be displayed*/
  end


end // end PT0D210

// Select FBASM and open cursor
Function PT0D212()
   /* ------------------------------------------------------------*/
   /* Initialize the end of cursor switch.*/
   /* ------------------------------------------------------------*/

  PT0DW00.PT0DWSWC = "N"; /* End of cursor switch*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  set VFBASM02 empty; /* Clear row storage area*/

  VFBASM02.XGPCD = PT0DW00.XGPCD; /* GPC code*/
  VFBASM02.SY1STNBR = PT0DM001.SY1STNBR[PT0DWIXS]; /* Style code*/
  VFBASM02.SY2CLRID = PT0DW00.PT0DW-COLOR[PT0DWIXD]; /* Color code*/
  VFBASM02.XDMCD = PT0DM001.XDMCD[PT0DWIXS]; /* Dimension code*/
  VFBASM02.PC2INSEG = PT0DM001.XSDCD[PT0DWIXS]; /* Spec diff code*/
  VFBASM02.XPGCD = PT0DM001.XPGCD[PT0DWIXS]; /* Packaging type code*/
  VFBASM02.XUMCD = PT0DM001.XUMCD[PT0DWIXS]; /* Unit of measure code*/
  VFBASM02.PT3YYMM = -1; /* WILDCARD DATE*/
  VFBASM02.XQACD = PT0DM001.XQACD; /* Quality code*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  PT0DW05.PT0DWFUN = "S1"; /* I/O module function*/

   /* --------------------------- y2k out begin -----------------------*/
                                  /* CALL VFBASM03 PT0DW05,SQLCA,VFBASM02*/
                                   /* (NOMAPS,NONCSP,REPLY; /* Select set*/
   /* --------------------------- y2k out end   -----------------------*/

   /* --------------------------- y2k in begin  -----------------------*/
  try
    call "VFBASM04" (PT0DW05, SQLCA, VFBASM02) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
   /* --------------------------- y2k in end    -----------------------*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PT0DM001.XXXMODID = "212"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PT0DM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBASM04"; /* Table view name*/
  TA1REC.TA1TBLKE = VFBASM02.VFBASM02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PT0DW00.PT0DWSWM = "1"; /* Map to be displayed switch*/

  exit stack; /* Exit to display map*/


end // end PT0D212

// Fetch the next FBASM row
Function PT0D213()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  PT0DW05.PT0DWFUN = "N1"; /* I/O module function*/

   /* --------------------------- y2k out begin ------------------*/
                                  /* CALL VFBASM03 PT0DW05,SQLCA,VFBASM02*/
                                   /* (NOMAPS,NONCSP,REPLY; /* Fetch next*/
   /* --------------------------- y2k out begin ------------------*/

   /* --------------------------- y2k in begin ------------------*/
  try
    call "VFBASM04" (PT0DW05, SQLCA, VFBASM02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/
   /* --------------------------- y2k in begin ------------------*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PT0DW00.PT0DWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PT0DM001.XXXMODID = "213"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PT0DM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBASM04"; /* Table view name*/
  TA1REC.TA1TBLKE = VFBASM02.VFBASM02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PT0DW00.PT0DWSWM = "1"; /* Map to be displayed switch*/

  exit stack; /* Exit to display map*/


end // end PT0D213

// Add page to temporary storage
Function PT0D214()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PT0DW03.PT0DWTSL = PT0DW00.PT0DWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PT0DW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PT0DW03 empty; /* M001 display storage*/

    PT0DW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    PT0DW00.PT0DWIXL = 1; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PT0DM001.XXXMODID = "214"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PT0DM001.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M003"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PT0DW00.PT0DWSWM = "1"; /* Map to be displayed switch*/

  exit stack; /* Exit to display map*/


end // end PT0D214

// Format the display storage
Function PT0D215()
   /* ------------------------------------------------------------*/
   /* If this is a new page, format the heading information.*/
   /* ------------------------------------------------------------*/

  if (PT0DW03.VFBASM02-KEY <= " ") /* First time through*/

    PT0DW03.VFBASM02-KEY = VFBASM02.VFBASM02-KEY; /* Save product key*/

    /* ------------------------------------------------------------*/
     /* Obtain the product style/color table row.*/
    /* ------------------------------------------------------------*/

    if (PT0DW03.PG2KEY != PG2REC.PG2KEY) /* Not same style/color*/

      set PG2REC empty; /* Clear row storage area*/
      PG2REC.PG2KEY = PT0DW03.PG2KEY; /* Style/color key*/
      TA1REC.TA1PGMNM = "PT0D215"; /* Process name*/

      XSPG202(); /* Select style/color row*/

      if (sysVar.errorCode != "00000000" /* Call not successful*/
       || SQLCA.VAGen_SQLCODE != 0)      /* or not normal return*/

        if (sysVar.errorCode == "00000000" /* Call successful*/
         && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

          converseLib.validationFailed(11); /* Indicate data in use*/
        else
          converseLib.validationFailed(10); /* Indicate system error*/

        end

        PT0DW00.PT0DWSWM = "1"; /* Map to be displayed switch*/
        PT0DM001.XXXMODID = "215"; /* Module identification*/

        exit stack; /* Exit to display map*/

      end

    end

    PT0DW03.SY1SSTNM = PG2REC.SY1SSTNM; /* Style name*/
    PT0DW03.SY2CLRAB = PG2REC.SY2CLRAB; /* Color abbreviation*/
    PT0DW03.PG1SC4CD = PG2REC.PG1SC4CD; /* Scheduler code*/
    move PG2REC.SY3FRGUT to PT0DW03.SY3FRGUT[1] for all; /* Fringe/gut indicator*/
    PT0DW00.XGACD = PG2REC.XGACD; /* Gender age code*/
    if (PT0DW00.XGACD in XGATBL.XGACD)
      PT0DW03.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex];
    end
    PT0DW00.XSUCD = PG2REC.XSUCD; /* Silhouette code*/
    if (PT0DW00.XSUCD in XSUTBL.XSUCD)
      PT0DW03.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex];
    end

    /* ------------------------------------------------------------*/
     /* Obtain the product size descriptions.*/
    /* ------------------------------------------------------------*/

    if (PT0DW03.XGPCD != PG3REC.XGPCD       /* Not same GPC*/
     || PT0DW03.SY1STNBR != PG3REC.SY1STNBR /* or not same style*/
     || PT0DW03.SY2CLRID != PG3REC.SY2CLRID /* or not same color*/
     || PT0DW03.XDMCD != PG3REC.XDMCD       /* or not same dimension*/
     || PT0DW03.XQACD != PG3REC.XQACD)      /* or not same quality*/

      set PG3REC empty; /* Clear row storage area*/
      PG3REC.PG3FUNCD = "PC"; /* Function*/
      PG3REC.PG3DATFM = "C"; /* Data format*/
      PG3REC.PG3XDVCD = PG2REC.XDVCD1; /* Highest division*/
      PG3REC.PG3KEY = PT0DW03.PG2KEY; /* Style/color key*/
      PG3REC.XQACD = PT0DW03.XQACD; /* Quality code*/
      TA1REC.TA1PGMNM = "PT0D215"; /* Process name*/

      XSPG301(); /* Size description translation*/

      if (sysVar.errorCode != "00000000" /* Call not successful*/
       || PG3REC.PG3RETCD != "00")       /* or not normal return*/

        if (sysVar.errorCode == "00000000" /* Call successful*/
         && PG3REC.PG3RETCD == "09")       /* and resource not available*/

          converseLib.validationFailed(11); /* Indicate data in use*/
        else
          converseLib.validationFailed(10); /* Indicate system error*/

        end

        PT0DW00.PT0DWSWM = "1"; /* Map to be displayed switch*/
        PT0DM001.XXXMODID = "215"; /* Module identification*/

        exit stack; /* Exit to display map*/

      end

    end

    PT0DW00.PT0DWIXC = 1; /* Initialize column index*/

    while (PT0DW00.PT0DWIXC <= 40) /* Until end of sizes*/

      PT0DW03.SY5SZID[PT0DWIXC] = PG3REC.SY5SZID[PT0DWIXC];
      PT0DW03.SY4IDDSC[PT0DWIXC] = PG3REC.SY4IDDSC[PT0DWIXC];

      PT0DW00.PT0DWIXC = PT0DW00.PT0DWIXC + 1; /* Increment index*/

    end

    /* ------------------------------------------------------------*/
     /* Obtain the scheduler last name.*/
    /* ------------------------------------------------------------*/

    if (PT0DW03.XGPCD != PG1REC.XGPCD /* Not same GPC*/
     || PT0DW03.PG1SC4CD != PG1REC.PG1SC4CD) /* or not same scheduler*/

      set PG1REC empty; /* Clear row storage area*/
      PG1REC.XGPCD = PT0DW03.XGPCD; /* GPC code*/
      PG1REC.PG1SC4CD = PT0DW03.PG1SC4CD; /* Scheduler code*/

      PT0DS08(); /* Obtain scheduler last name*/

    end

    PT0DW03.XXXLSTNM = PG1REC.XXXLSTNM; /* Scheduler last name*/

    /* ------------------------------------------------------------*/
     /* Format warehouse abbreviation.*/
    /* ------------------------------------------------------------*/

    if (PT0DW03.XWHCD == "**") /* Corporate warehouse*/

      PT0DW03.XWHABRV = "CORP WHSE"; /* Abbreviation*/
    else
      if (PT0DW03.XWHCD in XWHTBL.XWHCD)
        PT0DW03.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      end

    end

    /* ------------------------------------------------------------*/
     /* Clear the array work areas and initialize the indexes.*/
    /* ------------------------------------------------------------*/

    PT0DW00.PT0DWIXC = 1; /* Initialize column index*/

  end

   /* ------------------------------------------------------------*/
   /* Save the data in display storage.*/
   /* ------------------------------------------------------------*/

  PT0DW03.PT3YYMM = VFBASM02.PT3YYMM; /* Base period*/
  PT0DW00.PT0DWPER = VFBASM02.PT3YYMM; /* Base period*/

  if (PT0DW00.PT0DTPRM in PT0DT02.PT0DTPRM)
    if (sysVar.arrayIndex != 0)
      PT0DW03.PT0DTPMO = PT0DT02.PT0DTPMO[sysVar.arrayIndex]; /* month*/
      PT0DW03.PT0DTPOM = PT0DT02.PT0DTPOM[sysVar.arrayIndex]; /* Order month*/
    end
  end
  PT0DW03.PT0DTPRM = PT0DW00.PT0DTPRM; /* Receipt month*/

  PT0DW00.PT0DWIXR = 1; /* Initialize record index*/

  while (PT0DW00.PT0DWIXR <= 10 /* Until end of array*/
   && VFBASM02.SY5SZID[PT0DWIXR] != 0) /* or end of sizes*/

    PT0DW03.PT3FUBK[PT0DWIXC] = VFBASM02.PT3FUBK[PT0DWIXR];
    PT0DW03.PT3PRBK[PT0DWIXC] = VFBASM02.PT3PRBK[PT0DWIXR];
   /* MOVE VFBASM02.PT3PDTN(PT0DWIXR) TO PT0DW03.PT3PDTN(PT0DWIXC);*/
    PT0DW03.PT3PDTN[PT0DWIXC] = VFBASM02.PT-ADJ-PRDCTN-SZ[PT0DWIXR];
   /* MOVE VFBASM02.PT3AVQT(PT0DWIXR) TO PT0DW03.PT3AVQT(PT0DWIXC);*/
    PT0DW03.PT3AVQT[PT0DWIXC] = VFBASM02.PT-ADJ-AVAL-SZ[PT0DWIXR];
    PT0DW03.PT5INVC[PT0DWIXC] = VFBASM02.PT5INVC[PT0DWIXR];
    PT0DW03.PT-SMART-RSRV-SZ[PT0DWIXC] = VFBASM02.PT-SMART-RSRV-SZ[PT0DWIXR];
    PT0DW03.PT5FCBK[PT0DWIXC] = VFBASM02.PT5FCBK[PT0DWIXR];
   /* MOVE VFBASM02.PT5FCAV(PT0DWIXR) TO PT0DW03.PT5FCAV(PT0DWIXC);*/
    PT0DW03.PT5FCAV[PT0DWIXC] = VFBASM02.PT-ADJ-FCSTAV-SZ[PT0DWIXR];

    PT0DW00.PT0DWEND = PT0DW00.PT0DWIXC - 8; /* Ending column*/

    if (PT0DW00.PT0DWEND > PT0DW03.PT0DWMAX) /* Greater than maximum*/
      PT0DW03.PT0DWMAX = PT0DW00.PT0DWEND; /* Maximum column*/
    end

    PT0DW00.PT0DWIXR = PT0DW00.PT0DWIXR + 1; /* Record index*/
    PT0DW00.PT0DWIXC = PT0DW00.PT0DWIXC + 1; /* Column index*/

  end

  PT0DW03.PT3FUTOT = VFBASM02.PT3FUTOT;
  PT0DW03.PT3PRTOT = VFBASM02.PT3PRTOT;
   /* OVE VFBASM02.PT3POTOT TO PT0DW03.PT3POTOT;*/
  PT0DW03.PT3POTOT = VFBASM02.PT-ADJ-PRDCTN-TQTY;
   /* OVE VFBASM02.PT3AVTOT TO PT0DW03.PT3AVTOT;*/
  PT0DW03.PT3AVTOT = VFBASM02.PT-ADJ-AVAL-TQTY;
  PT0DW03.PT5IVTOT = VFBASM02.PT5IVTOT;
  PT0DW03.PT-SMART-RSRV-TOT = VFBASM02.PT-SMART-RSRV-TOT;
  PT0DW03.PT5FCTOT = VFBASM02.PT5FCTOT;
   /* OVE VFBASM02.PT5FATOT TO PT0DW03.PT5FATOT;*/
  PT0DW03.PT5FATOT = VFBASM02.PT-ADJ-FCSTAV-TQTY;

  PT0DW03.PT5FCBKI = VFBASM02.PT5FCBKI;

end // end PT0D215

// Close selected FBASM cursor
Function PT0D216()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  PT0DW05.PT0DWFUN = "C1"; /* I/O module function*/

   /* ---------------------------- y2k out begin ---------------------*/
                                  /* CALL VFBASM03 PT0DW05,SQLCA,VFBASM02*/
                                   /* (NOMAPS,NONCSP,REPLY; /* Close set*/
   /* ---------------------------- y2k out end   ---------------------*/

   /* ---------------------------- y2k in begin  ---------------------*/
  try
    call "VFBASM04" (PT0DW05, SQLCA, VFBASM02) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
   /* ---------------------------- y2k in end    ---------------------*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PT0DM001.XXXMODID = "216"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PT0DM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBASM04"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PT0DW00.PT0DWSWM = "1"; /* Map to be displayed switch*/

  exit stack; /* Exit to display map*/


end // end PT0D216

// Find the page to be displayed
Function PT0D217()
   /* ------------------------------------------------------------*/
   /* Search the pages for a match on warehouse, style and color.*/
   /* ------------------------------------------------------------*/

  PT0DW03.PT0DWSWP = "N"; /* First period switch*/

  while (PT0DM002.XWHCD != PT0DW03.XWHCD       /* Until same warehouse*/
   || PT0DM002.SY1STNBR != PT0DW03.SY1STNBR /* and same style*/
   || PT0DM002.SY2CLRID != PT0DW03.SY2CLRID /* and same color*/
   || PT0DW03.PT0DWSWP != "Y") /* and first period of product*/

    TA5REC.TA5TSQIX = PT0DW00.PT0DWTSP; /* Page number*/

    PT0DS09(); /* Obtain temporary storage page*/

    if (PT0DM002.XWHCD != PT0DW03.XWHCD       /* Warehouse not same*/
     || PT0DM002.SY1STNBR != PT0DW03.SY1STNBR /* or style not same*/
     || PT0DM002.SY2CLRID != PT0DW03.SY2CLRID /* or color not same*/
     || PT0DW03.PT0DWSWP != "Y")              /* or not first period*/

      PT0DW00.PT0DWTSP = PT0DW00.PT0DWTSP + 1; /* Increment page*/

    end

  end


end // end PT0D217

// Format and converse the map
Function PT0D220()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    PTWREC.XXXMODID = PT0DM002.XXXMODID; /* Module identification*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If map is not formatted, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (PT0DM002.XXXCURDT == 0) /* Map is not formatted*/

    PT0D221(); /* Obtain the page to display*/

    PT0D222(); /* Select FBASE and open cursor*/

    while (PT0DW00.PT0DWSWC != "Y") /* Until end of cursor*/
      PT0D223(); /* Fetch selected FBASE rows*/
    end

    PT0D224(); /* Close the selected FBASE cursor*/

    PT0D225(); /* Format the data on the map*/

  end

   /* ------------------------------------------------------------*/
   /* If not all warehouses specified, protect warehouse code.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.XWHCD != "XX") /* Not all warehouses*/
    set PT0DM002.XWHCD skip; /* Protect warehouse code*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PT0DM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PT0DM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PT0DM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0) /* Message to display*/

    PT0DM002.XXXMODID = PTWREC.XXXMODID; /* Module identification*/
    if (PTWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PTWREC.XXXMSGNO);
    end /* Message number*/
    set PT0DM002 alarm; /* Indicate sound alarm*/

  end

  converse PT0DM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PT0DM002.XXXMODID = " "; /* Module identification*/
  COMMAREA.CATOAP = PT0DM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PT0DM002.CAITEM; /* Application data*/


end // end PT0D220

// Obtain the page to display
Function PT0D221()
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.PT0DWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/

    TA5REC.TA5TSQIX = PT0DW00.PT0DWTSP; /* Page number*/

    PT0DS09(); /* Obtain temporary storage page*/

    PT0DW00.PT0DWBEG = 0; /* Beginning column*/

  end


end // end PT0D221

// Select FBASE and open cursor
Function PT0D222()
   /* ------------------------------------------------------------*/
   /* Initialize the end of cursor switch.*/
   /* ------------------------------------------------------------*/

  PT0DW00.PT0DWSWC = "N"; /* End of cursor switch*/

  set PT0DW02 empty; /* M002 input/output*/

  PT0DW02.VFBASE02-KEY = PT0DW03.VFBASM02-KEY; /* Product key*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  set VFBASE02 empty; /* Clear row storage area*/

  VFBASE02.VFBASE02-KEY = PT0DW02.VFBASE02-KEY; /* Product key*/

  try
    call "VFBASE02" ("S1", SQLCA, VFBASE02) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PT0DM001.XXXMODID = "222"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PT0DM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBASE02"; /* Table view name*/
  TA1REC.TA1TBLKE = VFBASE02.VFBASE02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PT0DW00.PT0DWSWM = "1"; /* Map to be displayed switch*/

  exit stack; /* Exit to display map*/


end // end PT0D222

// Fetch the next FBASE row
Function PT0D223()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VFBASE02" ("N1", SQLCA, VFBASE02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     && VFBASE02.VFBASE02-KEY == PT0DW03.VFBASM02-KEY) /* and same key*/

      PT0DS10(); /* Format the display storage*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100 /* End of selected set*/
     || VFBASE02.VFBASE02-KEY != PT0DW03.VFBASM02-KEY) /* or not same key*/

      PT0DW00.PT0DWSWC = "Y"; /* Indicate end of cursor*/

      if (PT0DW02.PT0DMPCT < 0) /* Standard percent total*/
        PT0DW02.PT0DMPCT = -100; /* Force to -100%*/
      end

      if (PT0DW02.PT0DMPCT > 0) /* Standard percent total*/
        PT0DW02.PT0DMPCT = 100; /* Force to 100%*/
      end

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PT0DM001.XXXMODID = "223"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PT0DM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBASE02"; /* Table view name*/
  TA1REC.TA1TBLKE = VFBASE02.VFBASE02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PT0DW00.PT0DWSWM = "1"; /* Map to be displayed switch*/

  exit stack; /* Exit to display map*/


end // end PT0D223

// Close selected FBASE cursor
Function PT0D224()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "VFBASE02" ("C1", SQLCA, VFBASE02) {isNoRefresh = yes, isExternal = yes};
  end /* Close table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PT0DM001.XXXMODID = "224"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PT0DM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBASE02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PT0DW00.PT0DWSWM = "1"; /* Map to be displayed switch*/

  exit stack; /* Exit to display map*/


end // end PT0D224

// Format the display data
Function PT0D225()
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PT0DM002.SY1STNBR = PT0DW03.SY1STNBR; /* Style number*/
  PT0DM002.SY2CLRID = PT0DW03.SY2CLRID; /* Color identification*/
  PT0DM002.XDMCD = PT0DW03.XDMCD; /* Dimension code*/
  PT0DM002.SY1SSTNM = PT0DW03.SY1SSTNM; /* Style short name*/
  PT0DM002.SY2CLRAB = PT0DW03.SY2CLRAB; /* Color abbreviation*/
  PT0DM002.XGAABRV = PT0DW03.XGAABRV; /* Gender age abbreviation*/
  PT0DM002.XSUABRV = PT0DW03.XSUABRV; /* Silhouette abbreviation*/
  PT0DM002.PG1SC4CD = PT0DW03.PG1SC4CD; /* Scheduler code*/
  PT0DM002.XXXLSTNM = PT0DW03.XXXLSTNM; /* Last name*/
  PT0DM002.XQACD = PT0DW03.XQACD; /* Quality*/
  PT0DM002.XUMCD = PT0DW03.XUMCD; /* Unit of measure*/
  PT0DM002.XSDCD = PT0DW03.XSDCD; /* Specification difference*/
  PT0DM002.XPGCD = PT0DW03.XPGCD; /* Packaging type*/
  PT0DM002.XWHCD = PT0DW03.XWHCD; /* Warehouse code*/
  PT0DM002.XWHABRV = PT0DW03.XWHABRV; /* Abbreviation*/
  if (PT0DM001.XQACD == "02"
   && PT0DW03.PT0DTPMO == "FUT") /* Future period*/
    PT0DM002.PT0DTPMO = PT0DW03.PT0DTPMO; /* Period month*/
  else
    PT0DM002.PT0DTPMO = PT0DW03.PT0DTPMO; /* Period month*/
    PT0DM002.PT0DTPOM = PT0DW03.PT0DTPOM; /* Order month*/
    PT0DM002.PT0DTPRM = PT0DW03.PT0DTPRM; /* Receipt month*/
  end

  PT0DM002.PT2QTOT1[1] = PT0DW02.PT2QTOT1[1];
  PT0DM002.PT2QTOT2 = PT0DW02.PT2QTOT2;
  PT0DM002.PT3FUTOT = PT0DW03.PT3FUTOT;
  PT0DM002.PT3PRTOT = PT0DW03.PT3PRTOT;
  PT0DM002.PT2QTOT3 = PT0DW02.PT2QTOT3;
  PT0DM002.PT3POTOT = PT0DW03.PT3POTOT;
  PT0DM002.PT3AVTOT = PT0DW03.PT3AVTOT;
  PT0DM002.PT4QTOT4 = PT0DW02.PT4QTOT4;
  PT0DM002.PT5IVTOT = PT0DW03.PT5IVTOT;
  PT0DM002.PT5FCTOT = PT0DW03.PT5FCTOT;
  PT0DM002.PT5FATOT = PT0DW03.PT5FATOT;
   /* OVE PT0DW02.PT2QTOT1(2) TO PT0DM002.PT2QTOT1(2);*/
  PT0DM002.PT2QTOT1[2] = PT0DW03.PT-SMART-RSRV-TOT;
  PT0DM002.PT0DMPCT = PT0DW02.PT0DMPCT;
  PT0DM002.PT0DMVAT = PT0DW02.PT0DMVAT;

  if (PT0DW03.PT5FCBKI == "B")
    PT0DM002.PT0DMBK1 = "FC BK *";
  else
    PT0DM002.PT0DMBK1 = "FC BK :";
  end

  PT0DW00.PT0DWIXC = 8; /* Column index*/
  PT0DW00.PT0DWEND = PT0DW00.PT0DWBEG + 8; /* Ending column*/

  while (PT0DW00.PT0DWEND > PT0DW00.PT0DWBEG) /* Until end of columns*/

    if (PT0DW03.SY4IDDSC[PT0DWEND] <= " ") /* No size information*/

      set PT0DM002.SY4IDDSC[PT0DWIXC] skip, invisible;

    else

      PT0DM002.SY4IDDSC[PT0DWIXC] = PT0DW03.SY4IDDSC[PT0DWEND];
      PT0DM002.PT2QTY1[PT0DWIXC] = PT0DW02.PT2QTY1[PT0DWEND];
      PT0DM002.PT2QTY2[PT0DWIXC] = PT0DW02.PT2QTY2[PT0DWEND];
      PT0DM002.PT3FUBK[PT0DWIXC] = PT0DW03.PT3FUBK[PT0DWEND];
      PT0DM002.PT3PRBK[PT0DWIXC] = PT0DW03.PT3PRBK[PT0DWEND];
      PT0DM002.PT2QTY3[PT0DWIXC] = PT0DW02.PT2QTY3[PT0DWEND];
      PT0DM002.PT3PDTN[PT0DWIXC] = PT0DW03.PT3PDTN[PT0DWEND];
      PT0DM002.PT3AVQT[PT0DWIXC] = PT0DW03.PT3AVQT[PT0DWEND];
      PT0DM002.PT4QT4[PT0DWIXC] = PT0DW02.PT4QT4[PT0DWEND];
      PT0DM002.PT5INVC[PT0DWIXC] = PT0DW03.PT5INVC[PT0DWEND];
      PT0DM002.PT5FCBK[PT0DWIXC] = PT0DW03.PT5FCBK[PT0DWEND];
      PT0DM002.PT5FCAV[PT0DWIXC] = PT0DW03.PT5FCAV[PT0DWEND];
      PT0DM002.PT2PCT1[PT0DWIXC] = PT0DW02.PT2PCT1[PT0DWEND];
      PT0DM002.PT0DMVAR[PT0DWIXC] = PT0DW02.PT0DMVAR[PT0DWEND];

     /* PT0DW00.PT0DWEND = PT0DW00.PT0DWEND + 40;*/
                                  /* Adjust for header/trailer*/
      PT0DW00.PT0DWIXC = PT0DW00.PT0DWIXC + 8; /* Adjust for map output*/

      /* OVE PT0DW02.PT2QTY1(PT0DWEND) TO PT0DM002.PT2QTY1(PT0DWIXC);*/
      PT0DM002.PT2QTY1[PT0DWIXC] = PT0DW03.PT-SMART-RSRV-SZ[PT0DWEND];

     /* PT0DW00.PT0DWEND = PT0DW00.PT0DWEND - 40;/* Remove adjustment*/
      PT0DW00.PT0DWIXC = PT0DW00.PT0DWIXC - 8; /* Remove adjustment*/

    end

    PT0DW00.PT0DWEND = PT0DW00.PT0DWEND - 1; /* Decrement ending column*/
    PT0DW00.PT0DWIXC = PT0DW00.PT0DWIXC - 1; /* Decrement column index*/

  end


end // end PT0D225

// Check attention identifier
Function PT0D230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PT0DM002 initial; /* M002 input/output*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PT0D131(); /* Purge any temporary storage*/

      XSPT001(); /* Exit to another application*/

      PT0DW00.PT0DWSWM = "1"; /* Map to be displayed switch*/
      PT0DM001.XXXMODID = "230"; /* Module identification*/
      set PT0DM001.CATOAP cursor, bold; /* Highlight*/

    else

      PT0DM002.XXXMODID = "230"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PT0DM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      set PT0DM001 initial; /* M001 input/output*/

      PT0DW00.PT0DWSWM = "1"; /* Map to be displayed switch*/

      exit stack; /* Exit to display map*/

    end

    PT0D131(); /* Purge any temporary storage*/

    XSPT001(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    PT0DW00.PT0DWSWM = "1"; /* Map to be displayed switch*/
    PT0DM001.XXXMODID = "230"; /* Module identification*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5   /* and PF5 was not pressed*/
   && converseVar.eventKey not pf6   /* and PF6 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf17  /* and PF17 was not pressed*/
   && converseVar.eventKey not pf18  /* and PF18 was not pressed*/
   && converseVar.eventKey not pf19) /* and PF18 was not pressed*/

    PT0DM002.XXXMODID = "230"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end


end // end PT0D230

// Reset highlighted fields
Function PT0D240()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PT0DM002.XWHCD initialAttributes; /* Warehouse code*/
  set PT0DM002.PT0DMSSA initialAttributes; /* Size scroll amount*/
  set PT0DM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PT0DM002.CAITEM initialAttributes; /* Commarea application data*/


end // end PT0D240

// Verify the entered data
Function PT0D250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PT0DM002.XXXMODID = "250"; /* Module identification*/
    set PT0DM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Restore any previously overlaid warehouse abbreviation.*/
   /* ------------------------------------------------------------*/

  PT0DM002.XWHABRV = PT0DW03.XWHABRV; /* Abbreviation*/

   /* ------------------------------------------------------------*/
   /* If PREV STY was requested, ensure that selections exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5) /* PREV STY was requested*/

    PT0DW00.PT0DWIXL = PT0DW00.PT0DWIXS - 1; /* Previous selection*/

    while (PT0DW00.PT0DWIXL >= 1 /* Until top of selections*/
     && PT0DM001.SY1STNBR[PT0DWIXL] <= " ") /* or selection found*/

      PT0DW00.PT0DWIXL = PT0DW00.PT0DWIXL - 1; /* Decrement index*/

    end

    if (PT0DW00.PT0DWIXL < 1) /* No previous selection*/

      PT0DM002.XXXMODID = "250"; /* Module identification*/
      converseLib.validationFailed(41); /* No previous style to display*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If NEXT STY was requested, ensure that selections exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* NEXT STY was requested*/

    PT0DW00.PT0DWIXL = PT0DW00.PT0DWIXS + 1; /* Next selection*/

    while (PT0DW00.PT0DWIXL <= 10 /* Until end of selections*/
     && PT0DM001.SY1STNBR[PT0DWIXL] <= " ") /* or selection found*/

      PT0DW00.PT0DWIXL = PT0DW00.PT0DWIXL + 1; /* Increment index*/

    end

    if (PT0DW00.PT0DWIXL > 10) /* No more selections*/

      PT0DM002.XXXMODID = "250"; /* Module identification*/
      converseLib.validationFailed(42); /* No more styles to display*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If FRWD was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* FRWD was requested*/
    PT0D251(); /* Verify FRWD request*/
  end


  if (converseVar.eventKey is pf19) /* FRWD was requested*/
    PT0DM002.PT0DMPSA = 99; /* MAX NUMBER OF PERIODS*/
    PT0D251(); /* Verify FRWD request*/
  end

   /* ------------------------------------------------------------*/
   /* If LEFT was requested, ensure that columns exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* LEFT was requested*/
   && PT0DW00.PT0DWBEG == 0)       /* and at beginning column*/

    PT0DM002.XXXMODID = "250"; /* Module identification*/
    set PT0DM002.PT0DMSSA cursor; /* Establish cursor position*/
    converseLib.validationFailed(49); /* No previous sizes to display*/

  end

   /* ------------------------------------------------------------*/
   /* If RIGHT was requested, ensure that columns exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11 /* RIGHT was requested*/
   && PT0DW00.PT0DWBEG == PT0DW03.PT0DWMAX) /* and at maximum column*/

    PT0DM002.XXXMODID = "250"; /* Module identification*/
    set PT0DM002.PT0DMSSA cursor; /* Establish cursor position*/
    converseLib.validationFailed(50); /* No more sizes to display*/

  end

   /* ------------------------------------------------------------*/
   /* If PREV CLR was requested, ensure that colors exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17) /* PREV CLR was requested*/
    PT0D252(); /* Verify PREV CLR request*/
  end

   /* ------------------------------------------------------------*/
   /* If NEXT CLR was requested, ensure that colors exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf18) /* NEXT CLR was requested*/
    PT0D253(); /* Verify NEXT CLR request*/
  end

   /* ------------------------------------------------------------*/
   /* If size scroll amount changed, verify the number entered.*/
   /* ------------------------------------------------------------*/

  if (PT0DM002.PT0DMSSA != PT0DW00.PT0DMSSA) /* Size scroll changed*/

    if (PT0DM002.PT0DMSSA < 1 /* Less than 1*/
     || PT0DM002.PT0DMSSA > 99) /* or greater than 99*/

      PT0DM002.XXXMODID = "250"; /* Module identification*/
      set PT0DM002.PT0DMSSA cursor, bold; /* Highlight*/
      converseLib.validationFailed(53); /* Amount missing or invalid*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If period scroll amount changed, verify the number entered.*/
   /* ------------------------------------------------------------*/

  if (PT0DM002.PT0DMPSA != PT0DW00.PT0DMPSA) /* Period scroll changed*/

    if (PT0DM002.PT0DMPSA < 0 /* Less than 1*/
     || PT0DM002.PT0DMPSA > 99) /* or greater than 99*/

      PT0DM002.XXXMODID = "250"; /* Module identification*/
      set PT0DM002.PT0DMPSA cursor, bold; /* Highlight*/
      converseLib.validationFailed(52); /* Amount missing or invalid*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if warehouse change is not allowed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER not pressed*/
   && PT0DM002.XWHCD != PT0DW03.XWHCD) /* and warehouse changed*/

    PT0DM002.XXXMODID = "250"; /* Module identification*/
    set PT0DM002.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, determine the warehouse to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    if (PT0DM002.XWHCD == PT0DW03.XWHCD) /* Warehouse not changed*/

      PT0D254(); /* Find the next warehouse*/
    else
      PT0D255(); /* Verify the entered warehouse*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end PT0D250

// Verify FRWD request
Function PT0D251()
   /* ------------------------------------------------------------*/
   /* If the last page, indicate no more periods to display.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.PT0DWTSP >= PT0DW00.TA5TSQIX) /* No more pages*/

    PT0DM002.XXXMODID = "251"; /* Module identification*/
    set PT0DM002.PT0DMPSA cursor; /* Establish cursor position*/
    converseLib.validationFailed(46); /* No more periods to display*/

  else

    /* ------------------------------------------------------------*/
     /* Increment the page number by the period scroll amount.*/
    /* ------------------------------------------------------------*/

    PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSP + PT0DM002.PT0DMPSA;

    if (PT0DW00.PT0DWTSS > PT0DW00.TA5TSQIX) /* Past maximum*/

      PT0DW00.PT0DWTSS = PT0DW00.TA5TSQIX; /* Default to maximum*/

      PTWREC.XXXMODID = "251"; /* Module identification*/
      PTWREC.XXXMSGNO = 55; /* Last period is shown*/

    end

    TA5REC.TA5TSQIX = PT0DW00.PT0DWTSS; /* Page number*/

    PT0DS09(); /* Obtain temporary storage page*/

    /* ------------------------------------------------------------*/
     /* Determine if scrolled past last period for the warehouse.*/
    /* ------------------------------------------------------------*/

    if (PT0DW02.VFBASE02-KEY != PT0DW03.VFBASM02-KEY) /* Not same base key*/

      while (PT0DW02.VFBASE02-KEY != PT0DW03.VFBASM02-KEY) /* til sm base*/

        PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSS - 1; /* Decrement page number*/

        TA5REC.TA5TSQIX = PT0DW00.PT0DWTSS; /* Page number*/

        PT0DS09(); /* Obtain temporary storage page*/

      end

      PTWREC.XXXMODID = "251"; /* Module identification*/
      PTWREC.XXXMSGNO = 55; /* Last period is shown*/

    end

    /* ------------------------------------------------------------*/
     /* If ending page is the first period, indicate no more pages.*/
    /* ------------------------------------------------------------*/

    if (PT0DW03.PT0DWSWP == "Y" /* First period*/
     && PT0DM002.PT0DMPSA > 0) 

      PT0DM002.XXXMODID = "251"; /* Module identification*/
      set PT0DM002.PT0DMPSA cursor; /* Establish cursor position*/
      converseLib.validationFailed(46); /* No more periods to display*/
      return;

    end
    if (PT0DM002.PT0DMPSA > 0)

      /* ------------------------------------------------------------*/
       /* Otherwise, obtain the beginning period for the display.*/
      /* ------------------------------------------------------------*/

      PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSS - 1; /* Beginning page number*/

      TA5REC.TA5TSQIX = PT0DW00.PT0DWTSS; /* Page number*/

      PT0DS09(); /* Obtain temporary storage page*/

      /* ------------------------------------------------------------*/
       /* If a first period, increment the beginning page number.*/
      /* ------------------------------------------------------------*/

      if (PT0DW03.PT0DWSWP == "Y" /* First period*/
       && PT0DM002.PT0DMPSA > 0) 
        PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSS + 1; /* Beginning page number*/
      end

    end

    /* ------------------------------------------------------------*/
     /* Reestablish the current temporary storage page.*/
    /* ------------------------------------------------------------*/

    TA5REC.TA5TSQIX = PT0DW00.PT0DWTSP; /* Page number*/

    PT0DS09(); /* Obtain temporary storage page*/

  end


end // end PT0D251

// Verify PREV CLR request
Function PT0D252()
   /* ------------------------------------------------------------*/
   /* Search the previous pages for another color for the style.*/
   /* ------------------------------------------------------------*/

  PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSP; /* Current page number*/

  while (PT0DW00.PT0DWTSS >= 1                 /* Until top of pages*/
   && PT0DM002.SY1STNBR == PT0DW03.SY1STNBR /* or style changes*/
   && PT0DM002.SY2CLRID == PT0DW03.SY2CLRID) /* or color changes*/

    PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSS - 1; /* Previous page number*/
    PT0DW03.PT0DWSWP = "N"; /* First period switch*/

    while (PT0DW00.PT0DWTSS >= 1 /* Until top of pages*/
     && PT0DW03.PT0DWSWP != "Y") /* or first period of product*/

      TA5REC.TA5TSQIX = PT0DW00.PT0DWTSS; /* Page number*/

      PT0DS09(); /* Obtain temporary storage page*/

      if (PT0DW03.PT0DWSWP != "Y") /* Not first period*/
        PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSS - 1; /* Decrement page number*/
      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If no page found, indicate no previous color to display.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.PT0DWTSS < 1 /* No page found*/
   || PT0DM002.SY1STNBR != PT0DW03.SY1STNBR) /* or style changed*/

    PT0DM002.XXXMODID = "252"; /* Module identification*/
    converseLib.validationFailed(43); /* No previous color to display*/

  end

   /* ------------------------------------------------------------*/
   /* Reestablish the current temporary storage page.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = PT0DW00.PT0DWTSP; /* Page number*/

  PT0DS09(); /* Obtain temporary storage page*/


end // end PT0D252

// Verify NEXT CLR request
Function PT0D253()
   /* ------------------------------------------------------------*/
   /* Search the following pages for another color for the style.*/
   /* ------------------------------------------------------------*/

  PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSP; /* Current page number*/

  while (PT0DW00.PT0DWTSS <= PT0DW00.TA5TSQIX  /* Until end of pages*/
   && PT0DM002.SY1STNBR == PT0DW03.SY1STNBR /* or style changes*/
   && PT0DM002.SY2CLRID == PT0DW03.SY2CLRID) /* or color changes*/

    PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSS + 1; /* Next page number*/
    PT0DW03.PT0DWSWP = "N"; /* First period switch*/

    while (PT0DW00.PT0DWTSS <= PT0DW00.TA5TSQIX /* Until end of pages*/
     && PT0DW03.PT0DWSWP != "Y") /* or first period of product*/

      TA5REC.TA5TSQIX = PT0DW00.PT0DWTSS; /* Page number*/

      PT0DS09(); /* Obtain temporary storage page*/

      if (PT0DW03.PT0DWSWP != "Y") /* Not first period*/
        PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSS + 1; /* Increment page number*/
      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If no page was found, indicate no more colors to display.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.PT0DWTSS > PT0DW00.TA5TSQIX /* No page found*/
   || PT0DM002.SY1STNBR != PT0DW03.SY1STNBR) /* or style changed*/

    PT0DM002.XXXMODID = "253"; /* Module identification*/
    converseLib.validationFailed(44); /* No more colors to display*/

  end

   /* ------------------------------------------------------------*/
   /* Reestablish the current temporary storage page.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = PT0DW00.PT0DWTSP; /* Page number*/

  PT0DS09(); /* Obtain temporary storage page*/


end // end PT0D253

// Find the next warehouse
Function PT0D254()
   /* ------------------------------------------------------------*/
   /* Initialize the page number and first period switch.*/
   /* ------------------------------------------------------------*/

  PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSP + 1; /* Initialize page number*/
  PT0DW03.PT0DWSWP = "N"; /* First period switch*/

   /* ------------------------------------------------------------*/
   /* Find the next first period page in temporary storage.*/
   /* ------------------------------------------------------------*/

  while (PT0DW00.PT0DWTSS <= PT0DW00.TA5TSQIX /* Until end of pages*/
   && PT0DW03.PT0DWSWP != "Y") /* or first period found*/

    TA5REC.TA5TSQIX = PT0DW00.PT0DWTSS; /* Page number*/

    PT0DS09(); /* Obtain temporary storage page*/

    if (PT0DW03.PT0DWSWP != "Y") /* Not first period*/
      PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSS + 1; /* Increment page*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If page not found, indicate no more warehouses to display.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.PT0DWTSS > PT0DW00.TA5TSQIX   /* No page found*/
   || PT0DM002.SY1STNBR != PT0DW03.SY1STNBR /* or style changed*/
   || PT0DM002.SY2CLRID != PT0DW03.SY2CLRID) /* or color changed*/

    PT0DM002.XXXMODID = "254"; /* Module identification*/
    converseLib.validationFailed(48); /* No more warehouses to display*/

  end

   /* ------------------------------------------------------------*/
   /* Reestablish the current temporary storage page.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = PT0DW00.PT0DWTSP; /* Page number*/

  PT0DS09(); /* Obtain temporary storage page*/


end // end PT0D254

// Verify the entered warehouse
Function PT0D255()
   /* ------------------------------------------------------------*/
   /* Verify that a valid warehouse code was entered.*/
   /* ------------------------------------------------------------*/

  if (PT0DM002.XWHCD == "**" /* Corporate warehouse*/
   || PT0DM002.XWHCD in XWHTBL.XWHCD) /* or code in table*/

    if (PT0DM002.XWHCD == "**") /* Corporate warehouse*/

      PT0DM002.XWHABRV = "CORP WHSE"; /* Abbreviation*/
    else
      PT0DM002.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* Abbreviation*/

    end

    /* ------------------------------------------------------------*/
     /* Search the pages for a match on warehouse, style and color.*/
    /* ------------------------------------------------------------*/

    PT0DW00.PT0DWTSS = 1; /* Initialize page number*/
    PT0DW03.PT0DWSWP = "N"; /* First period switch*/

    while (PT0DM002.XWHCD != PT0DW03.XWHCD       /* Until same warehouse*/
     || PT0DM002.SY1STNBR != PT0DW03.SY1STNBR /* and same style*/
     || PT0DM002.SY2CLRID != PT0DW03.SY2CLRID /* and same color*/
     || PT0DW03.PT0DWSWP != "Y") /* and first period of product*/

      TA5REC.TA5TSQIX = PT0DW00.PT0DWTSS; /* Page number*/

      PT0DS09(); /* Obtain temporary storage page*/

      if (PT0DM002.XWHCD != PT0DW03.XWHCD       /* Warehouse not same*/
       || PT0DM002.SY1STNBR != PT0DW03.SY1STNBR /* or style not same*/
       || PT0DM002.SY2CLRID != PT0DW03.SY2CLRID /* or color not same*/
       || PT0DW03.PT0DWSWP != "Y")              /* or not first period*/

        PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSS + 1; /* Increment page*/

        if (PT0DW00.PT0DWTSS > PT0DW00.TA5TSQIX) /* No page found*/

          PT0DW03.XWHCD = PT0DM002.XWHCD; /* Warehouse*/
          PT0DW03.SY1STNBR = PT0DM002.SY1STNBR; /* Style*/
          PT0DW03.SY2CLRID = PT0DM002.SY2CLRID; /* Color*/
          PT0DW03.PT0DWSWP = "Y"; /* First period switch*/

        end

      end

    end

    /* ------------------------------------------------------------*/
     /* If no page was found, indicate no product availability.*/
    /* ------------------------------------------------------------*/

    if (PT0DW00.PT0DWTSS > PT0DW00.TA5TSQIX) /* No page found*/

      set PT0DM002.XWHCD cursor, bold; /* Highlight*/
      PT0DM002.XXXMODID = "255"; /* Module identification*/
      converseLib.validationFailed(51); /* No availability for warehouse*/

    end

    /* ------------------------------------------------------------*/
     /* Reestablish the current temporary storage page.*/
    /* ------------------------------------------------------------*/

    TA5REC.TA5TSQIX = PT0DW00.PT0DWTSP; /* Page number*/

    PT0DS09(); /* Obtain temporary storage page*/

  else

    /* ------------------------------------------------------------*/
     /* Indicate that warehouse code is missing or invalid.*/
    /* ------------------------------------------------------------*/

    PT0DM002.XWHABRV = " "; /* Clear abbreviation*/

    set PT0DM002.XWHCD cursor, bold; /* Highlight*/
    PT0DM002.XXXMODID = "255"; /* Module identification*/
    converseLib.validationFailed(36); /* Indicate missing or invalid*/

  end


end // end PT0D255

// Process valid input request
Function PT0D260()
   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, adjust the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    PT0DW00.PT0DWTSP = PT0DW00.PT0DWTSS; /* Page number*/
  end

   /* ------------------------------------------------------------*/
   /* Save the key map data and clear the map input/output area.*/
   /* ------------------------------------------------------------*/

  PT0DW00.PT0DMSSA = PT0DM002.PT0DMSSA; /* Size scroll amount*/

  set PT0DM002 initial; /* M002 input/output*/

   /* ------------------------------------------------------------*/
   /* Commit all changes to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 1;
  sysLib.commit(); /* Commit all changes*/

   /* ------------------------------------------------------------*/
   /* If PREV or NEXT STY was requested, adjust selection index.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5) /* PREV was requested*/

    PT0DW00.PT0DWIXS = PT0DW00.PT0DWIXS - 1; /* Decrement index*/

    while (PT0DM001.SY1STNBR[PT0DWIXS] <= " ") /* Bypass blank lines*/
      PT0DW00.PT0DWIXS = PT0DW00.PT0DWIXS - 1; /* Decrement index*/
    end

    set PT0DM001.SY1STNBR[PT0DWIXS] cursor; /* Position cursor*/
    PT0DW00.PT0DWSWR = "Y"; /* Request for data switch*/

  end

  if (converseVar.eventKey is pf6) /* NEXT was requested*/

    PT0DW00.PT0DWIXS = PT0DW00.PT0DWIXS + 1; /* Increment index*/

    while (PT0DM001.SY1STNBR[PT0DWIXS] <= " ") /* Bypass blank lines*/
      PT0DW00.PT0DWIXS = PT0DW00.PT0DWIXS + 1; /* Increment index*/
    end

    set PT0DM001.SY1STNBR[PT0DWIXS] cursor; /* Position cursor*/
    PT0DW00.PT0DWSWR = "Y"; /* Request for data switch*/

  end

   /* ------------------------------------------------------------*/
   /* If FRWD was requested, adjust the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* FRWD was requested*/
   || converseVar.eventKey is pf19)

    set PT0DM003 initial; /* M003 input/output*/

    PT0DW00.PT0DWSWM = "3"; /* Map to be displayed switch*/
    PT0DW00.PT0DWTSP = PT0DW00.PT0DWTSS; /* Page number*/

    set PT0DM003.PT0DMPSA cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If LEFT or RIGHT was requested, adjust beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* LEFT was requested*/

    PT0DW00.PT0DWBEG = PT0DW00.PT0DWBEG - PT0DW00.PT0DMSSA;

    if (PT0DW00.PT0DWBEG < 0) /* Past minimum*/

      PT0DW00.PT0DWBEG = 0; /* Default to minimum*/

      PT0DM002.XXXMODID = "260"; /* Module identification*/
      PTWREC.XXXMSGNO = 56; /* First size is shown*/

    end

    set PT0DM002.PT0DMSSA cursor; /* Establish cursor position*/

  end

  if (converseVar.eventKey is pf11) /* RIGHT was requested*/

    PT0DW00.PT0DWBEG = PT0DW00.PT0DWBEG + PT0DW00.PT0DMSSA;

    if (PT0DW00.PT0DWBEG > PT0DW03.PT0DWMAX) /* Past maximum*/

      PT0DW00.PT0DWBEG = PT0DW03.PT0DWMAX; /* Default to maximum*/

      PT0DM002.XXXMODID = "260"; /* Module identification*/
      PTWREC.XXXMSGNO = 57; /* Last size is shown*/

    end

    set PT0DM002.PT0DMSSA cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If PRINT was requested, format and submit the request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* PRINT was requested*/
    if (PT0DM001.XQACD == "01") /* First quality*/
      PT0D261(); /* Format/submit print request*/
    else
      PT0D262(); /* Format/submit print request*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If BL AVAL was requested, indicate display Map 004.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* BL AVAL was requested*/

    set PT0DM004 initial; /* M004 input/output*/

    PT0DW00.PT0DWSWM = "4"; /* Map to be displayed switch*/
    PT0DW00.PT0DWSWR = "Y"; /* Request for data switch*/

    PT0DM004.XWHCD = PT0DW03.XWHCD; /* Warehouse*/
    PT0DM004.SY1STNBR = PT0DW03.SY1STNBR; /* Style*/
    PT0DM004.SY2CLRID = PT0DW03.SY2CLRID; /* Color*/

  end

   /* ------------------------------------------------------------*/
   /* If PREV or NEXT CLR was requested, adjust page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17 /* PREV CLR was requested*/
   || converseVar.eventKey is pf18) /* or NEXT CLR was requested*/

    PT0DW00.PT0DWTSP = PT0DW00.PT0DWTSS; /* Page number*/

  end


end // end PT0D260

// Format/submit print request
Function PT0D261()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PT0DW00.PT0DWIXT = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PT0DW00.PT0DWIXT > 0) /* Until end of table*/

    if (PT0DT01.TARTYPE[PT0DWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters for the product/warehouse being viewed.*/
      /* ------------------------------------------------------------*/

      PT0DW01.XWHCD = PT0DW00.XWHCD; /* Warehouse*/
      PT0DW01.SY1STNBR = PT0DW03.SY1STNBR; /* Style*/
      PT0DW01.SY2CLRID = PT0DW03.SY2CLRID; /* Color*/
      PT0DW01.XDMCD = PT0DW03.XDMCD; /* Dimension*/

      PT0DS06(); /* Format selection parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PT0DT01.TARJCL[PT0DWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT0DT01.TARTYPE[PT0DWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT0DT01.TARJCL[PT0DWIXT] == "/*EOF") /* End of table*/

      PT0DW00.PT0DWIXT = 0; /* Indicate end of table*/
    else
      PT0DW00.PT0DWIXT = PT0DW00.PT0DWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PT0DM002.XXXMODID = "261"; /* Module identification*/

  PT0DS07(); /* Submit the JCL*/


end // end PT0D261

// Format/submit print request
Function PT0D262()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PT0DW00.PT0DWIXT = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PT0DW00.PT0DWIXT > 0) /* Until end of table*/

    if (PT0DT03.TARTYPE[PT0DWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters for the product/warehouse being viewed.*/
      /* ------------------------------------------------------------*/

      PT0DW01.XWHCD = PT0DW00.XWHCD; /* Warehouse*/
      PT0DW01.SY1STNBR = PT0DW03.SY1STNBR; /* Style*/
      PT0DW01.SY2CLRID = PT0DW03.SY2CLRID; /* Color*/
      PT0DW01.XDMCD = PT0DW03.XDMCD; /* Dimension*/

      PT0DS06(); /* Format selection parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PT0DT03.TARJCL[PT0DWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT0DT03.TARTYPE[PT0DWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT0DT03.TARJCL[PT0DWIXT] == "/*EOF") /* End of table*/

      PT0DW00.PT0DWIXT = 0; /* Indicate end of table*/
    else
      PT0DW00.PT0DWIXT = PT0DW00.PT0DWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PT0DM002.XXXMODID = "262"; /* Module identification*/

  PT0DS07(); /* Submit the JCL*/


end // end PT0D262

// List the rows in the table
Function PT0D300()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT0D320(); /* Format and display the map*/

  PT0D330(); /* Check attention identifier*/

  PT0D340(); /* Reset fields to normal intensity*/

  PT0D350(); /* Verify the entered data*/

  PT0D360(); /* Process valid input request*/


end // end PT0D300

// Format and converse the map
Function PT0D320()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    PTWREC.XXXMODID = PT0DM003.XXXMODID; /* Module identification*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If map is not formatted, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (PT0DM003.XXXCURDT == 0) /* Map is not formatted*/

    PT0DW00.PT0DWIXL = 1; /* Initialize period index*/
    PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSP; /* Page number*/

    while (PT0DW00.PT0DWIXL <= 2 /* Until end of periods*/
     && PT0DW00.PT0DWTSS <= PT0DW00.TA5TSQIX) /* or end of pages*/

      PT0D321(); /* Format the data on the map*/

      PT0DW00.PT0DWIXL = PT0DW00.PT0DWIXL + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If not all warehouses specified, protect warehouse code.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.XWHCD != "XX") /* Not all warehouses*/
    set PT0DM003.XWHCD skip; /* Protect warehouse code*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PT0DM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PT0DM003.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PT0DM003.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0) /* Message to display*/

    PT0DM003.XXXMODID = PTWREC.XXXMODID; /* Module identification*/
    if (PTWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PTWREC.XXXMSGNO);
    end /* Message number*/
    set PT0DM003 alarm; /* Indicate sound alarm*/

  end

  converse PT0DM003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PT0DM003.XXXMODID = " "; /* Module identification*/
  COMMAREA.CATOAP = PT0DM003.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PT0DM003.CAITEM; /* Application data*/


end // end PT0D320

// Format the display data
Function PT0D321()
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.PT0DWTSS != TA5REC.TA5TSQIX) /* Desired page not current*/

    TA5REC.TA5TSQIX = PT0DW00.PT0DWTSS; /* Page number*/

    PT0DS09(); /* Obtain temporary storage page*/

  end

   /* ------------------------------------------------------------*/
   /* If not the same product number, reestablish the previous*/
   /* temporary storage page and return to previous process.*/
   /* ------------------------------------------------------------*/

  if (PT0DW02.VFBASE02-KEY != PT0DW03.VFBASM02-KEY) /* Not same product*/

    TA5REC.TA5TSQIX = PT0DW00.PT0DWTSS - 1; /* Decrement page number*/

    PT0DS09(); /* Obtain temporary storage page*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.PT0DWIXL == 1) /* First time through*/

    PT0DM003.SY1STNBR = PT0DW03.SY1STNBR; /* Style number*/
    PT0DM003.SY2CLRID = PT0DW03.SY2CLRID; /* Color identification*/
    PT0DM003.XDMCD = PT0DW03.XDMCD; /* Dimension code*/
    PT0DM003.SY1SSTNM = PT0DW03.SY1SSTNM; /* Style short name*/
    PT0DM003.SY2CLRAB = PT0DW03.SY2CLRAB; /* Color abbreviation*/
    PT0DM003.XGAABRV = PT0DW03.XGAABRV; /* Gender age abbreviation*/
    PT0DM003.XSUABRV = PT0DW03.XSUABRV; /* Silhouette abbreviation*/
    PT0DM003.PG1SC4CD = PT0DW03.PG1SC4CD; /* Scheduler code*/
    PT0DM003.XXXLSTNM = PT0DW03.XXXLSTNM; /* Last name*/
    PT0DM003.XQACD = PT0DW03.XQACD; /* Quality*/
    PT0DM003.XUMCD = PT0DW03.XUMCD; /* Unit of measure*/
    PT0DM003.XSDCD = PT0DW03.XSDCD; /* Specification difference*/
    PT0DM003.XPGCD = PT0DW03.XPGCD; /* Packaging type*/
    PT0DM003.XWHCD = PT0DW03.XWHCD; /* Warehouse code*/
    PT0DM003.XWHABRV = PT0DW03.XWHABRV; /* Abbreviation*/

  end

  if (PT0DM001.XQACD == "02" /* footwear*/
   && PT0DW03.PT0DTPMO == "FUT") /* future period*/
    PT0DM003.PT0DTPMO[PT0DWIXL] = PT0DW03.PT0DTPMO; /* Period month*/
  else
    PT0DM003.PT0DTPMO[PT0DWIXL] = PT0DW03.PT0DTPMO; /* Period month*/
    PT0DM003.PT0DTPOM[PT0DWIXL] = PT0DW03.PT0DTPOM; /* Order month*/
    PT0DM003.PT0DTPRM[PT0DWIXL] = PT0DW03.PT0DTPRM; /* Receipt month*/
  end

  PT0DM003.PT3FUTOT[PT0DWIXL] = PT0DW03.PT3FUTOT;
  PT0DM003.PT3PRTOT[PT0DWIXL] = PT0DW03.PT3PRTOT;
  PT0DM003.PT3POTOT[PT0DWIXL] = PT0DW03.PT3POTOT;
  PT0DM003.PT3AVTOT[PT0DWIXL] = PT0DW03.PT3AVTOT;
   /* OVE PT0DW03.PT5IVTOT TO PT0DM003.PT5IVTOT(PT0DWIXL);*/
  PT0DM003.PT-SMART-RSRV-TQTY[PT0DWIXL] = PT0DW03.PT-SMART-RSRV-TOT;
  PT0DM003.PT5FCTOT[PT0DWIXL] = PT0DW03.PT5FCTOT;
  PT0DM003.PT5FATOT[PT0DWIXL] = PT0DW03.PT5FATOT;

  if (PT0DW00.PT0DWIXL == 1) /* First time through*/
    if (PT0DW03.PT5FCBKI == "B")
      PT0DM003.PT0DMBK2 = "FC BK *";
    else
      PT0DM003.PT0DMBK2 = "FC BK :";
    end
  else
    if (PT0DW03.PT5FCBKI == "B") /* second time through*/
      PT0DM003.PT0DMBK3 = "FC BK *";
    else
      PT0DM003.PT0DMBK3 = "FC BK :";
    end
  end

  PT0DW00.PT0DWIXC = PT0DW00.PT0DWIXL * 8; /* Column index*/
  PT0DW00.PT0DWEND = PT0DW00.PT0DWBEG + 8; /* Ending column*/

  while (PT0DW00.PT0DWEND > PT0DW00.PT0DWBEG) /* Until end of columns*/

    if (PT0DW03.SY4IDDSC[PT0DWEND] <= " ") /* No size information*/

      if (PT0DW00.PT0DWIXL == 1) /* First time through*/
        set PT0DM003.SY4IDDSC[PT0DWIXC] skip, invisible;
      end

    else

      if (PT0DW00.PT0DWIXL == 1) /* First time through*/
        PT0DM003.SY4IDDSC[PT0DWIXC] = PT0DW03.SY4IDDSC[PT0DWEND];
      end

      PT0DM003.PT3FUBK[PT0DWIXC] = PT0DW03.PT3FUBK[PT0DWEND];
      PT0DM003.PT3PRBK[PT0DWIXC] = PT0DW03.PT3PRBK[PT0DWEND];
      PT0DM003.PT3PDTN[PT0DWIXC] = PT0DW03.PT3PDTN[PT0DWEND];
      PT0DM003.PT3AVQT[PT0DWIXC] = PT0DW03.PT3AVQT[PT0DWEND];
     /* MOVE PT0DW03.PT5INVC(PT0DWEND) TO PT0DM003.PT5INVC(PT0DWIXC);*/
      PT0DM003.PT-SMART-RSRV[PT0DWIXC] = PT0DW03.PT-SMART-RSRV-SZ[PT0DWEND];
      PT0DM003.PT5FCBK[PT0DWIXC] = PT0DW03.PT5FCBK[PT0DWEND];
      PT0DM003.PT5FCAV[PT0DWIXC] = PT0DW03.PT5FCAV[PT0DWEND];

    end

    PT0DW00.PT0DWEND = PT0DW00.PT0DWEND - 1; /* Decrement ending column*/
    PT0DW00.PT0DWIXC = PT0DW00.PT0DWIXC - 1; /* Decrement column index*/

  end

   /* ------------------------------------------------------------*/
   /* Increment the temporary storage page number.*/
   /* ------------------------------------------------------------*/

  PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSS + 1; /* Increment page number*/


end // end PT0D321

// Check attention identifier
Function PT0D330()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PT0DM003 initial; /* M003 input/output*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PT0D131(); /* Purge any temporary storage*/

      XSPT001(); /* Exit to another application*/

      PT0DW00.PT0DWSWM = "1"; /* Map to be displayed switch*/
      PT0DM001.XXXMODID = "330"; /* Module identification*/
      set PT0DM001.CATOAP cursor, bold; /* Highlight*/

    else

      PT0DM003.XXXMODID = "330"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PT0DM003"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      set PT0DM001 initial; /* M001 input/output*/

      PT0DW00.PT0DWSWM = "1"; /* Map to be displayed switch*/

      exit stack; /* Exit to display map*/

    end

    PT0D131(); /* Purge any temporary storage*/

    XSPT001(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    PT0DW00.PT0DWSWM = "1"; /* Map to be displayed switch*/
    PT0DM001.XXXMODID = "330"; /* Module identification*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5   /* and PF5 was not pressed*/
   && converseVar.eventKey not pf6   /* and PF6 was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf17  /* and PF17 was not pressed*/
   && converseVar.eventKey not pf18  /* and PF18 was not pressed*/
   && converseVar.eventKey not pf19) /* and PF18 was not pressed*/

    PT0DM003.XXXMODID = "330"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end


end // end PT0D330

// Reset highlighted fields
Function PT0D340()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PT0DM003.XWHCD initialAttributes; /* Warehouse code*/
  set PT0DM003.PT0DMPSA initialAttributes; /* Period scroll amount*/
  set PT0DM003.PT0DMSSA initialAttributes; /* Size scroll amount*/
  set PT0DM003.CATOAP initialAttributes; /* Commarea TO application*/
  set PT0DM003.CAITEM initialAttributes; /* Commarea application data*/


end // end PT0D340

// Verify the entered data
Function PT0D350()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PT0DM003.XXXMODID = "350"; /* Module identification*/
    set PT0DM003.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Restore any previously overlaid warehouse abbreviation.*/
   /* ------------------------------------------------------------*/

  PT0DM003.XWHABRV = PT0DW03.XWHABRV; /* Abbreviation*/

   /* ------------------------------------------------------------*/
   /* If PREV STY was requested, ensure that selections exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5) /* PREV STY was requested*/

    PT0DW00.PT0DWIXL = PT0DW00.PT0DWIXS - 1; /* Previous selection*/

    while (PT0DW00.PT0DWIXL >= 1 /* Until top of selections*/
     && PT0DM001.SY1STNBR[PT0DWIXL] <= " ") /* or selection found*/

      PT0DW00.PT0DWIXL = PT0DW00.PT0DWIXL - 1; /* Decrement index*/

    end

    if (PT0DW00.PT0DWIXL < 1) /* No previous selection*/

      PT0DM003.XXXMODID = "350"; /* Module identification*/
      converseLib.validationFailed(41); /* No previous style to display*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If NEXT STY was requested, ensure that selections exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* NEXT STY was requested*/

    PT0DW00.PT0DWIXL = PT0DW00.PT0DWIXS + 1; /* Next selection*/

    while (PT0DW00.PT0DWIXL <= 10 /* Until end of selections*/
     && PT0DM001.SY1STNBR[PT0DWIXL] <= " ") /* or selection found*/

      PT0DW00.PT0DWIXL = PT0DW00.PT0DWIXL + 1; /* Increment index*/

    end

    if (PT0DW00.PT0DWIXL > 10) /* No more selections*/

      PT0DM003.XXXMODID = "350"; /* Module identification*/
      converseLib.validationFailed(42); /* No more styles to display*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If BACK was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* BACK was requested*/
    PT0D351(); /* Verify BACK request*/
  end

   /* ------------------------------------------------------------*/
   /* If FRWD was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf19) /* FRWD was requested*/
    PT0DM003.PT0DMPSA = 99; /* SCROLL QUANTITY*/
    PT0D352(); /* Verify FRWD request*/
  end

  if (converseVar.eventKey is pf8) /* FRWD was requested*/
    PT0D352(); /* Verify FRWD request*/
  end

   /* ------------------------------------------------------------*/
   /* If LEFT was requested, ensure that columns exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* LEFT was requested*/
   && PT0DW00.PT0DWBEG == 0)       /* and at beginning column*/

    PT0DM003.XXXMODID = "350"; /* Module identification*/
    set PT0DM003.PT0DMSSA cursor; /* Establish cursor position*/
    converseLib.validationFailed(49); /* No previous sizes to display*/

  end

   /* ------------------------------------------------------------*/
   /* If RIGHT was requested, ensure that columns exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11 /* RIGHT was requested*/
   && PT0DW00.PT0DWBEG == PT0DW03.PT0DWMAX) /* and at maximum column*/

    PT0DM003.XXXMODID = "350"; /* Module identification*/
    set PT0DM003.PT0DMSSA cursor; /* Establish cursor position*/
    converseLib.validationFailed(50); /* No more sizes to display*/

  end

   /* ------------------------------------------------------------*/
   /* If PREV CLR was requested, ensure that colors exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17) /* PREV CLR was requested*/
    PT0D353(); /* Verify PREV CLR request*/
  end

   /* ------------------------------------------------------------*/
   /* If NEXT CLR was requested, ensure that colors exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf18) /* NEXT CLR was requested*/
    PT0D354(); /* Verify NEXT CLR request*/
  end

   /* ------------------------------------------------------------*/
   /* If size scroll amount changed, verify the number entered.*/
   /* ------------------------------------------------------------*/

  if (PT0DM003.PT0DMSSA != PT0DW00.PT0DMSSA) /* Size scroll changed*/

    if (PT0DM003.PT0DMSSA < 1 /* Less than 1*/
     || PT0DM003.PT0DMSSA > 99) /* or greater than 99*/

      PT0DM003.XXXMODID = "350"; /* Module identification*/
      set PT0DM003.PT0DMSSA cursor, bold; /* Highlight*/
      converseLib.validationFailed(53); /* Amount missing or invalid*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If period scroll amount changed, verify the number entered.*/
   /* ------------------------------------------------------------*/

  if (PT0DM003.PT0DMPSA != PT0DW00.PT0DMPSA) /* Period scroll changed*/

    if (PT0DM003.PT0DMPSA < 1 /* Less than 1*/
     || PT0DM003.PT0DMPSA > 99) /* or greater than 99*/

      PT0DM003.XXXMODID = "350"; /* Module identification*/
      set PT0DM003.PT0DMPSA cursor, bold; /* Highlight*/
      converseLib.validationFailed(52); /* Amount missing or invalid*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if warehouse change is not allowed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER not pressed*/
   && PT0DM003.XWHCD != PT0DW03.XWHCD) /* and warehouse changed*/

    PT0DM003.XXXMODID = "350"; /* Module identification*/
    set PT0DM003.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, determine the warehouse to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    if (PT0DM003.XWHCD == PT0DW03.XWHCD) /* Warehouse not changed*/

      PT0D355(); /* Find the next warehouse*/
    else
      PT0D356(); /* Verify the entered warehouse*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end PT0D350

// Verify BACK request
Function PT0D351()
   /* ------------------------------------------------------------*/
   /* Decrement the page number by the period scroll amount.*/
   /* ------------------------------------------------------------*/

  PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSP - PT0DM003.PT0DMPSA;

  if (PT0DW00.PT0DWTSS < 1) /* Past minimum*/

    PT0DW00.PT0DWTSS = 1; /* Default to minimum*/

    PTWREC.XXXMODID = "351"; /* Module identification*/
    PTWREC.XXXMSGNO = 54; /* First period is shown*/

  end

  TA5REC.TA5TSQIX = PT0DW00.PT0DWTSS; /* Page number*/

  PT0DS09(); /* Obtain temporary storage page*/

   /* ------------------------------------------------------------*/
   /* Determine if scrolled past first period for the warehouse.*/
   /* ------------------------------------------------------------*/

  if (PT0DW02.VFBASE02-KEY != PT0DW03.VFBASM02-KEY) /* Not same base key*/

    PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSP - 1; /* Initialize page number*/
    PT0DW03.PT0DWSWP = "N"; /* First period switch*/

    /* ------------------------------------------------------------*/
     /* Find the page with the first period for the warehouse.*/
    /* ------------------------------------------------------------*/

    while (PT0DW03.PT0DWSWP != "Y") /* Until first period*/

      TA5REC.TA5TSQIX = PT0DW00.PT0DWTSS; /* Page number*/

      PT0DS09(); /* Obtain temporary storage page*/

      if (PT0DW03.PT0DWSWP != "Y") /* Not first period*/
        PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSS - 1; /* Decrement page*/
      end

    end

    PTWREC.XXXMODID = "351"; /* Module identification*/
    PTWREC.XXXMSGNO = 54; /* First period is shown*/

  end

  PT0DW00.PT0DWSWP = PT0DW03.PT0DWSWP; /* First period switch*/

   /* ------------------------------------------------------------*/
   /* Reestablish the current temporary storage page.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = PT0DW00.PT0DWTSP; /* Page number*/

  PT0DS09(); /* Obtain temporary storage page*/



end // end PT0D351

// Verify FRWD request
Function PT0D352()
   /* ------------------------------------------------------------*/
   /* If the last page, indicate no more periods to display.*/
   /* ------------------------------------------------------------*/

  PT0DW00.PT0DWTSS = PT0DW00.TA5TSQIX + 1;

  if (PT0DW00.PT0DWTSP >= PT0DW00.PT0DWTSS)

    PT0DM003.XXXMODID = "352"; /* Module identification*/
    set PT0DM003.PT0DMPSA cursor; /* Establish cursor position*/
    converseLib.validationFailed(46); /* No more periods to display*/

  else

     /* Increment the page number by the period scroll amount.*/
    /* ------------------------------------------------------------*/

    PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSP + PT0DM003.PT0DMPSA;

    if (PT0DW00.PT0DWTSS >= PT0DW00.TA5TSQIX) /* Past maximum*/

      PT0DW00.PT0DWTSS = PT0DW00.TA5TSQIX - 1; /* Default to maximum*/

      PTWREC.XXXMODID = "352"; /* Module identification*/
      PTWREC.XXXMSGNO = 55; /* Last period is shown*/

    end

    PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSS + 1; /* Ending page number*/

    TA5REC.TA5TSQIX = PT0DW00.PT0DWTSS; /* Page number*/

    PT0DS09(); /* Obtain temporary storage page*/

    /* ------------------------------------------------------------*/
     /* Determine if scrolled past last period for the warehouse.*/
    /* ------------------------------------------------------------*/

    if (PT0DW02.VFBASE02-KEY != PT0DW03.VFBASM02-KEY) /* Not same base key*/

      while (PT0DW02.VFBASE02-KEY != PT0DW03.VFBASM02-KEY) /* Until same key*/

        PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSS - 1; /* Decrement page number*/

        TA5REC.TA5TSQIX = PT0DW00.PT0DWTSS; /* Page number*/

        PT0DS09(); /* Obtain temporary storage page*/

      end

      PTWREC.XXXMODID = "352"; /* Module identification*/
      PTWREC.XXXMSGNO = 55; /* Last period is shown*/

    end

    /* ------------------------------------------------------------*/
     /* Obtain the beginning period for the display.*/
    /* ------------------------------------------------------------*/

    PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSS - 1; /* Beginning page number*/

    TA5REC.TA5TSQIX = PT0DW00.PT0DWTSS; /* Page number*/

    PT0DS09(); /* Obtain temporary storage page*/

    /* ------------------------------------------------------------*/
     /* If a first period, increment the beginning page number.*/
    /* ------------------------------------------------------------*/

    /* IF PT0DW03.PT0DWSWP EQ 'Y'*/
      /* PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSS + 1*/
    /* END ;*/

    /* ------------------------------------------------------------*/
     /* If beginning page same as current, indicate no more pages.*/
    /* ------------------------------------------------------------*/

    if (PT0DW00.PT0DWTSS == PT0DW00.PT0DWTSP) /* Same as current page*/

      PT0DM003.XXXMODID = "352"; /* Module identification*/
      set PT0DM003.PT0DMPSA cursor; /* Establish cursor position*/
      converseLib.validationFailed(46); /* No more periods to display*/

    end

    PT0DW00.PT0DWSWP = "N"; /* First period switch*/

    /* ------------------------------------------------------------*/
     /* Reestablish the current temporary storage page.*/
    /* ------------------------------------------------------------*/

    TA5REC.TA5TSQIX = PT0DW00.PT0DWTSP; /* Page number*/

    PT0DS09(); /* Obtain temporary storage page*/

  end


end // end PT0D352

// Verify PREV CLR request
Function PT0D353()
   /* ------------------------------------------------------------*/
   /* Search the previous pages for another color for the style.*/
   /* ------------------------------------------------------------*/

  PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSP; /* Current page number*/

  while (PT0DW00.PT0DWTSS >= 1                 /* Until top of pages*/
   && PT0DM003.SY1STNBR == PT0DW03.SY1STNBR /* or style changes*/
   && PT0DM003.SY2CLRID == PT0DW03.SY2CLRID) /* or color changes*/

    PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSS - 1; /* Previous page number*/
    PT0DW03.PT0DWSWP = "N"; /* First period switch*/

    while (PT0DW00.PT0DWTSS >= 1 /* Until top of pages*/
     && PT0DW03.PT0DWSWP != "Y") /* or first period of product*/

      TA5REC.TA5TSQIX = PT0DW00.PT0DWTSS; /* Page number*/

      PT0DS09(); /* Obtain temporary storage page*/

      if (PT0DW03.PT0DWSWP != "Y") /* Not first period*/
        PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSS - 1; /* Decrement page number*/
      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If no page found, indicate no previous color to display.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.PT0DWTSS < 1 /* No page found*/
   || PT0DM003.SY1STNBR != PT0DW03.SY1STNBR) /* or style changed*/

    PT0DM003.XXXMODID = "353"; /* Module identification*/
    converseLib.validationFailed(43); /* No previous color to display*/

  end

   /* ------------------------------------------------------------*/
   /* Reestablish the current temporary storage page.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = PT0DW00.PT0DWTSP; /* Page number*/

  PT0DS09(); /* Obtain temporary storage page*/


end // end PT0D353

// Verify NEXT CLR request
Function PT0D354()
   /* ------------------------------------------------------------*/
   /* Search the following pages for another color for the style.*/
   /* ------------------------------------------------------------*/

  PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSP; /* Current page number*/

  while (PT0DW00.PT0DWTSS <= PT0DW00.TA5TSQIX  /* Until end of pages*/
   && PT0DM003.SY1STNBR == PT0DW03.SY1STNBR /* or style changes*/
   && PT0DM003.SY2CLRID == PT0DW03.SY2CLRID) /* or color changes*/

    PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSS + 1; /* Next page number*/
    PT0DW03.PT0DWSWP = "N"; /* First period switch*/

    while (PT0DW00.PT0DWTSS <= PT0DW00.TA5TSQIX /* Until end of pages*/
     && PT0DW03.PT0DWSWP != "Y") /* or first period of product*/

      TA5REC.TA5TSQIX = PT0DW00.PT0DWTSS; /* Page number*/

      PT0DS09(); /* Obtain temporary storage page*/

      if (PT0DW03.PT0DWSWP != "Y") /* Not first period*/
        PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSS + 1; /* Increment page number*/
      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If no page was found, indicate no more colors to display.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.PT0DWTSS > PT0DW00.TA5TSQIX /* No page found*/
   || PT0DM003.SY1STNBR != PT0DW03.SY1STNBR) /* or style changed*/

    PT0DM003.XXXMODID = "354"; /* Module identification*/
    converseLib.validationFailed(44); /* No more colors to display*/

  end

   /* ------------------------------------------------------------*/
   /* Reestablish the current temporary storage page.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = PT0DW00.PT0DWTSP; /* Page number*/

  PT0DS09(); /* Obtain temporary storage page*/


end // end PT0D354

// Find the next warehouse
Function PT0D355()
   /* ------------------------------------------------------------*/
   /* Initialize the page number and first period switch.*/
   /* ------------------------------------------------------------*/

  PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSP + 1; /* Initialize page number*/
  PT0DW03.PT0DWSWP = "N"; /* First period switch*/

   /* ------------------------------------------------------------*/
   /* Find the next first period page in temporary storage.*/
   /* ------------------------------------------------------------*/

  while (PT0DW00.PT0DWTSS <= PT0DW00.TA5TSQIX /* Until end of pages*/
   && PT0DW03.PT0DWSWP != "Y") /* or first period found*/

    TA5REC.TA5TSQIX = PT0DW00.PT0DWTSS; /* Page number*/

    PT0DS09(); /* Obtain temporary storage page*/

    if (PT0DW03.PT0DWSWP != "Y") /* Not first period*/
      PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSS + 1; /* Increment page*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If page not found, indicate no more warehouses to display.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.PT0DWTSS > PT0DW00.TA5TSQIX   /* No page found*/
   || PT0DM003.SY1STNBR != PT0DW03.SY1STNBR /* or style changed*/
   || PT0DM003.SY2CLRID != PT0DW03.SY2CLRID) /* or color changed*/

    PT0DM003.XXXMODID = "355"; /* Module identification*/
    converseLib.validationFailed(48); /* No more warehouses to display*/

  end

   /* ------------------------------------------------------------*/
   /* Reestablish the current temporary storage page.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = PT0DW00.PT0DWTSP; /* Page number*/

  PT0DS09(); /* Obtain temporary storage page*/


end // end PT0D355

// Verify the entered warehouse
Function PT0D356()
   /* ------------------------------------------------------------*/
   /* Verify that a valid warehouse code was entered.*/
   /* ------------------------------------------------------------*/

  if (PT0DM003.XWHCD == "**" /* Corporate warehouse*/
   || PT0DM003.XWHCD in XWHTBL.XWHCD) /* or code in table*/

    if (PT0DM003.XWHCD == "**") /* Corporate warehouse*/

      PT0DM003.XWHABRV = "CORP WHSE"; /* Abbreviation*/
    else
      PT0DM003.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* Abbreviation*/

    end

    /* ------------------------------------------------------------*/
     /* Search the pages for a match on warehouse, style and color.*/
    /* ------------------------------------------------------------*/

    PT0DW00.PT0DWTSS = 1; /* Initialize page number*/
    PT0DW03.PT0DWSWP = "N"; /* First period switch*/

    while (PT0DM003.XWHCD != PT0DW03.XWHCD       /* Until same warehouse*/
     || PT0DM003.SY1STNBR != PT0DW03.SY1STNBR /* and same style*/
     || PT0DM003.SY2CLRID != PT0DW03.SY2CLRID /* and same color*/
     || PT0DW03.PT0DWSWP != "Y") /* and first period*/

      TA5REC.TA5TSQIX = PT0DW00.PT0DWTSS; /* Page number*/

      PT0DS09(); /* Obtain temporary storage page*/

      if (PT0DM003.XWHCD != PT0DW03.XWHCD       /* Warehouse not same*/
       || PT0DM003.SY1STNBR != PT0DW03.SY1STNBR /* or style not same*/
       || PT0DM003.SY2CLRID != PT0DW03.SY2CLRID /* or color not same*/
       || PT0DW03.PT0DWSWP != "Y")              /* or not first period*/

        PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSS + 1; /* Increment page number*/

        if (PT0DW00.PT0DWTSS > PT0DW00.TA5TSQIX) /* No page found*/

          PT0DW03.XWHCD = PT0DM003.XWHCD; /* Warehouse*/
          PT0DW03.SY1STNBR = PT0DM003.SY1STNBR; /* Style*/
          PT0DW03.SY2CLRID = PT0DM003.SY2CLRID; /* Color*/
          PT0DW03.PT0DWSWP = "Y"; /* First period switch*/

        end

      end

    end

    /* ------------------------------------------------------------*/
     /* If no page was found, indicate no product availability.*/
    /* ------------------------------------------------------------*/

    if (PT0DW00.PT0DWTSS > PT0DW00.TA5TSQIX) /* No page found*/

      set PT0DM003.XWHCD cursor, bold; /* Highlight*/
      PT0DM003.XXXMODID = "356"; /* Module identification*/
      converseLib.validationFailed(51); /* No availability for warehouse*/

    end

    /* ------------------------------------------------------------*/
     /* Reestablish the current temporary storage page.*/
    /* ------------------------------------------------------------*/

    TA5REC.TA5TSQIX = PT0DW00.PT0DWTSP; /* Page number*/

    PT0DS09(); /* Obtain temporary storage page*/

  else

    /* ------------------------------------------------------------*/
     /* Indicate that warehouse code is missing or invalid.*/
    /* ------------------------------------------------------------*/

    PT0DM003.XWHABRV = " "; /* Clear abbreviation*/

    set PT0DM003.XWHCD cursor, bold; /* Highlight*/
    PT0DM003.XXXMODID = "356"; /* Module identification*/
    converseLib.validationFailed(36); /* Indicate missing or invalid*/

  end


end // end PT0D356

// Process valid input request
Function PT0D360()
   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, indicate display MAP 002.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    set PT0DM002 initial; /* M002 input/output*/

    PT0DW00.PT0DWSWM = "2"; /* Map to be displayed switch*/
    PT0DW00.PT0DWTSP = PT0DW00.PT0DWTSS; /* Page number*/

  end

   /* ------------------------------------------------------------*/
   /* Save the key map data and clear the map input/output area.*/
   /* ------------------------------------------------------------*/

  PT0DW00.PT0DMPSA = PT0DM003.PT0DMPSA; /* Period scroll amount*/
  PT0DW00.PT0DMSSA = PT0DM003.PT0DMSSA; /* Size scroll amount*/

  set PT0DM003 initial; /* M003 input/output*/

   /* ------------------------------------------------------------*/
   /* Commit all changes to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 1;
  sysLib.commit(); /* Commit all changes*/

   /* ------------------------------------------------------------*/
   /* If PREV or NEXT STY was requested, adjust selection index.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5) /* PREV was requested*/

    PT0DW00.PT0DWIXS = PT0DW00.PT0DWIXS - 1; /* Decrement index*/

    while (PT0DM001.SY1STNBR[PT0DWIXS] <= " ") /* Bypass blank lines*/
      PT0DW00.PT0DWIXS = PT0DW00.PT0DWIXS - 1; /* Decrement index*/
    end

    set PT0DM002 initial; /* M002 input/output*/

    set PT0DM001.SY1STNBR[PT0DWIXS] cursor; /* Position cursor*/
    PT0DW00.PT0DWSWM = "2"; /* Map to be displayed switch*/
    PT0DW00.PT0DWSWR = "Y"; /* Request for data switch*/

  end

  if (converseVar.eventKey is pf6) /* NEXT was requested*/

    PT0DW00.PT0DWIXS = PT0DW00.PT0DWIXS + 1; /* Increment index*/

    while (PT0DM001.SY1STNBR[PT0DWIXS] <= " ") /* Bypass blank lines*/
      PT0DW00.PT0DWIXS = PT0DW00.PT0DWIXS + 1; /* Increment index*/
    end

    set PT0DM002 initial; /* M002 input/output*/

    set PT0DM001.SY1STNBR[PT0DWIXS] cursor; /* Position cursor*/
    PT0DW00.PT0DWSWM = "2"; /* Map to be displayed switch*/
    PT0DW00.PT0DWSWR = "Y"; /* Request for data switch*/

  end

   /* ------------------------------------------------------------*/
   /* If BACK or FRWD was requested, adjust page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* BACK was requested*/
   || converseVar.eventKey is pf8 /* or FRWD was requested*/
   || converseVar.eventKey is pf19) /* or FRWD was requested*/

    if (PT0DW00.PT0DWSWP == "Y") /* First period of product*/

      set PT0DM002 initial; /* M002 input/output*/

      PT0DW00.PT0DWSWM = "2"; /* Map to be displayed switch*/

      set PT0DM002.PT0DMPSA cursor; /* Establish cursor position*/

    else

      set PT0DM003.PT0DMPSA cursor; /* Establish cursor position*/

    end

    PT0DW00.PT0DWTSP = PT0DW00.PT0DWTSS; /* Page number*/

  end

   /* ------------------------------------------------------------*/
   /* If LEFT or RIGHT was requested, adjust beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* LEFT was requested*/

    PT0DW00.PT0DWBEG = PT0DW00.PT0DWBEG - PT0DW00.PT0DMSSA;

    if (PT0DW00.PT0DWBEG < 0) /* Past minimum*/

      PT0DW00.PT0DWBEG = 0; /* Default to minimum*/

      PTWREC.XXXMODID = "360"; /* Module identification*/
      PTWREC.XXXMSGNO = 56; /* First size is shown*/

    end

    set PT0DM003.PT0DMSSA cursor; /* Establish cursor position*/

  end

  if (converseVar.eventKey is pf11) /* RIGHT was requested*/

    PT0DW00.PT0DWBEG = PT0DW00.PT0DWBEG + PT0DW00.PT0DMSSA;

    if (PT0DW00.PT0DWBEG > PT0DW03.PT0DWMAX) /* Past maximum*/

      PT0DW00.PT0DWBEG = PT0DW03.PT0DWMAX; /* Default to maximum*/

      PTWREC.XXXMODID = "360"; /* Module identification*/
      PTWREC.XXXMSGNO = 57; /* Last size is shown*/

    end

    set PT0DM003.PT0DMSSA cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If PRINT was requested, format and submit the request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* PRINT was requested*/
    if (PT0DM001.XQACD == "01") /* First quality*/
      PT0D361(); /* Format/submit print request*/
    else
      PT0D362(); /* Format/submit print request*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If BL AVAL was requested, indicate display Map 004.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* BL AVAL was requested*/

    set PT0DM004 initial; /* M004 input/output*/

    PT0DW00.PT0DWSWM = "4"; /* Map to be displayed switch*/
    PT0DW00.PT0DWSWR = "Y"; /* Request for data switch*/

    PT0DM004.XWHCD = PT0DW03.XWHCD; /* Warehouse*/
    PT0DM004.SY1STNBR = PT0DW03.SY1STNBR; /* Style*/
    PT0DM004.SY2CLRID = PT0DW03.SY2CLRID; /* Color*/

  end

   /* ------------------------------------------------------------*/
   /* If PREV or NEXT CLR was requested, adjust page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17 /* PREV CLR was requested*/
   || converseVar.eventKey is pf18) /* or NEXT CLR was requested*/

    set PT0DM002 initial; /* M002 input/output*/

    PT0DW00.PT0DWSWM = "2"; /* Map to be displayed switch*/
    PT0DW00.PT0DWTSP = PT0DW00.PT0DWTSS; /* Page number*/

  end


end // end PT0D360

// Format/submit print request
Function PT0D361()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PT0DW00.PT0DWIXT = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PT0DW00.PT0DWIXT > 0) /* Until end of table*/

    if (PT0DT01.TARTYPE[PT0DWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters for the product/warehouse being viewed.*/
      /* ------------------------------------------------------------*/

      PT0DW01.XWHCD = PT0DW00.XWHCD; /* Warehouse*/
      PT0DW01.SY1STNBR = PT0DW03.SY1STNBR; /* Style*/
      PT0DW01.SY2CLRID = PT0DW03.SY2CLRID; /* Color*/
      PT0DW01.XDMCD = PT0DW03.XDMCD; /* Dimension*/

      PT0DS06(); /* Format selection parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PT0DT01.TARJCL[PT0DWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT0DT01.TARTYPE[PT0DWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT0DT01.TARJCL[PT0DWIXT] == "/*EOF") /* End of table*/

      PT0DW00.PT0DWIXT = 0; /* Indicate end of table*/
    else
      PT0DW00.PT0DWIXT = PT0DW00.PT0DWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PT0DM003.XXXMODID = "361"; /* Module identification*/

  PT0DS07(); /* Submit the JCL*/


end // end PT0D361

// Format/submit print request
Function PT0D362()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PT0DW00.PT0DWIXT = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PT0DW00.PT0DWIXT > 0) /* Until end of table*/

    if (PT0DT03.TARTYPE[PT0DWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters for the product/warehouse being viewed.*/
      /* ------------------------------------------------------------*/

      PT0DW01.XWHCD = PT0DW00.XWHCD; /* Warehouse*/
      PT0DW01.SY1STNBR = PT0DW03.SY1STNBR; /* Style*/
      PT0DW01.SY2CLRID = PT0DW03.SY2CLRID; /* Color*/
      PT0DW01.XDMCD = PT0DW03.XDMCD; /* Dimension*/

      PT0DS06(); /* Format selection parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PT0DT03.TARJCL[PT0DWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT0DT03.TARTYPE[PT0DWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT0DT03.TARJCL[PT0DWIXT] == "/*EOF") /* End of table*/

      PT0DW00.PT0DWIXT = 0; /* Indicate end of table*/
    else
      PT0DW00.PT0DWIXT = PT0DW00.PT0DWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PT0DM003.XXXMODID = "362"; /* Module identification*/

  PT0DS07(); /* Submit the JCL*/


end // end PT0D362

// Display the selected table row
Function PT0D400()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT0D410(); /* Obtain the data to display*/

  PT0D420(); /* Format and display the map*/

  PT0D430(); /* Check attention identifier*/

  PT0D440(); /* Reset fields to normal intensity*/

  PT0D450(); /* Verify the entered data*/

  PT0D460(); /* Process valid input request*/


end // end PT0D400

// Obtain the data to display
Function PT0D410()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.PT0DWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any existing queue in temporary storage.*/
   /* ------------------------------------------------------------*/
  PT0D131(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/
  PT0DW00.PT0DWTSL = 2358; /* Temporary storage page length*/

  PT0DW00.PT0DWIXD = 1; /* init color index*/
  PT0DW00.PT0DW-COLOR-TABLE = " "; /* init color table*/
   /* ------------------------------------------------------------*/
   /* Either load color driver table with single color or if color*/
   /* is wildcarded get all of the colors for the current style*/
   /* and load the table.*/
   /* ------------------------------------------------------------*/
  if (PT0DM001.SY2CLRID[PT0DWIXS] == "***") /* color is wildcarded*/
    PT0DW00.PT0DW-COLOR[PT0DWIXD] = PT0DM001.SY2CLRID[PT0DWIXS];
    PT0DW05.XWHCD[1] = "  "; /* From warehouse*/
    PT0DW05.XWHCD[2] = "99"; /* To warehouse*/
    /* ------------------------------------------------------------*/
    /* Open cursor*/
    /* ------------------------------------------------------------*/
    PT0D212(); /* Select FBASM and open cursor*/

    /* ------------------------------------------------------------*/
    /* Fetch and load color table with all colors of current style*/
    /* ------------------------------------------------------------*/
    PT0D213(); /* Fetch selected FBASM rows*/

    while (PT0DW00.PT0DWSWC != "Y") /* Until end of cursor*/

      if (PT0DW00.PT0DWIXD > 1) /* If there is a prior entry*/
        sysVar.arrayIndex = PT0DW00.PT0DWIXD - 1;
        if (VFBASM02.SY2CLRID != PT0DW00.PT0DW-COLOR[sysVar.arrayIndex])
          PT0DW00.PT0DW-COLOR[PT0DWIXD] = VFBASM02.SY2CLRID;
          PT0DW00.PT0DWIXD = PT0DW00.PT0DWIXD + 1; /* increment index*/
        end
      else
        PT0DW00.PT0DW-COLOR[PT0DWIXD] = VFBASM02.SY2CLRID;
        PT0DW00.PT0DWIXD = PT0DW00.PT0DWIXD + 1; /* increment index*/
      end

      PT0D213(); /* Fetch selected FBASM rows*/

    end
    /* ------------------------------------------------------------*/
    /* Close cursor*/
    /* ------------------------------------------------------------*/
    PT0D216(); /* Close the FBASM cursor*/

    PT0DW00.PT0DWIXD = 1; /* reset color index*/

  else
    /* ------------------------------------------------------------*/
    /* Load color table with color from map.*/
    /* ------------------------------------------------------------*/
    PT0DW00.PT0DW-COLOR[PT0DWIXD] = PT0DM001.SY2CLRID[PT0DWIXS];

  end

  while (PT0DW00.PT0DW-COLOR[PT0DWIXD] != " ") /* colors to process*/
    /* ------------------------------------------------------------*/
    /* If all warehouses requested, set range for all warehouses.*/
    /* ------------------------------------------------------------*/
    if (PT0DM001.XWHCD == "XX") /* All warehouses requested*/

      PT0DW05.XWHCD[1] = "00"; /* From warehouse*/
      PT0DW05.XWHCD[2] = "99"; /* To warehouse*/

      /* ------------------------------------------------------------*/
      /* Select and open the cursor for the set to be formatted.*/
      /* ------------------------------------------------------------*/
      PT0D212(); /* Select set and open cursor*/

      /* ------------------------------------------------------------*/
      /* Fetch and format the data into pages until end of cursor.*/
      /* ------------------------------------------------------------*/
      while (PT0DW00.PT0DWSWC != "Y") /* Until end of cursor*/

        PT0D213(); /* Fetch selected rows*/

        if (PT0DW00.PT0DWSWC == "N") /* Not end of cursor*/

          /* ------------------------------------------------------------*/
          /* If key fields changed, add the page to the storage queue.*/
          /* ------------------------------------------------------------*/
          if (PT0DW04.VFBASM02-KEY > " " /* and not first time through*/
           && PT0DW04.VFBASM02-KEY != VFBASM02.VFBASM02-KEY) /**/

            PT0D414(); /* Add page to temporary storage*/

          end
          /* ------------------------------------------------------------*/
          /* Format the data into the map display storage area.*/
          /* ------------------------------------------------------------*/
          PT0D415(); /* Format the display storage*/

        end
      end

      /* ------------------------------------------------------------*/
      /* Add any partially formatted last page to the queue.*/
      /* ------------------------------------------------------------*/
      if (PT0DW04.VFBASM02-KEY > " ") /* Page was formatted*/
        PT0D414(); /* Add page to temporary storage*/
      end

      /* ------------------------------------------------------------*/
      /* Close the cursor for the selected set.*/
      /* ------------------------------------------------------------*/
      PT0D216(); /* Close the selected set cursor*/

      /* ------------------------------------------------------------*/
      /* Set range to obtain direct ship and corporate warehouses.*/
      /* ------------------------------------------------------------*/
      PT0DW05.XWHCD[1] = "  "; /* From warehouse*/
      PT0DW05.XWHCD[2] = "ZZ"; /* To warehouse*/

    else

      /* ------------------------------------------------------------*/
      /* Otherwise, set range to obtain a single warehouse.*/
      /* ------------------------------------------------------------*/
      PT0DW05.XWHCD[1] = PT0DM001.XWHCD; /* From warehouse*/
      PT0DW05.XWHCD[2] = PT0DM001.XWHCD; /* To warehouse*/

    end

    /* ------------------------------------------------------------*/
    /* Select and open the cursor for the set to be formatted.*/
    /* ------------------------------------------------------------*/

    PT0D212(); /* Select set and open cursor*/

    /* ------------------------------------------------------------*/
    /* Fetch and format the data into pages until end of cursor.*/
    /* ------------------------------------------------------------*/

    while (PT0DW00.PT0DWSWC != "Y") /* Until end of cursor*/

      PT0D213(); /* Fetch selected rows*/

      if (PT0DW00.PT0DWSWC == "N") /* Not end of cursor*/

        /* ------------------------------------------------------------*/
        /* If key fields changed, add the page to the storage queue.*/
        /* ------------------------------------------------------------*/
        if (PT0DW04.VFBASM02-KEY > " " /* and not first time through*/
         && PT0DW04.VFBASM02-KEY != VFBASM02.VFBASM02-KEY) /**/

          PT0D414(); /* Add page to temporary storage*/

        end

        /* ------------------------------------------------------------*/
        /* Format the data into the map display storage area.*/
        /* ------------------------------------------------------------*/
        PT0D415(); /* Format the display storage*/

      end

    end

    /* ------------------------------------------------------------*/
    /* Close the cursor for the selected set.*/
    /* ------------------------------------------------------------*/
    PT0D216(); /* Close the selected set cursor*/

    PT0DW00.PT0DWIXD = PT0DW00.PT0DWIXD + 1; /* increment index*/

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PT0DW04.VFBASM02-KEY > " ") /* Page was formatted*/
    PT0D414(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PT0DW00.PT0DWSWR = "N"; /* Request for data switch*/
  PT0DW00.PT0DWTSP = 1; /* Page number*/
  PT0DW00.PT0DMSSA = 8; /* Size scroll amount*/

   /* ------------------------------------------------------------*/
   /* If from the PERIODS display, find the page to be displayed.*/
   /* ------------------------------------------------------------*/

  if (PT0DM004.SY1STNBR > " ")
    PT0D417(); /* Find the page to be displayed*/
  end

end // end PT0D410

// Add page to temporary storage
Function PT0D414()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PT0DW04.PT0DWTSL = PT0DW00.PT0DWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PT0DW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PT0DW04 empty; /* M001 display storage*/

    PT0DW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    PT0DW00.PT0DWIXL = 1; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PT0DM001.XXXMODID = "414"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PT0DM001.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PT0DW00.PT0DWSWM = "1"; /* Map to be displayed switch*/

  exit stack; /* Exit to display map*/


end // end PT0D414

// Format the display storage
Function PT0D415()
   /* ------------------------------------------------------------*/
   /* If this is a new page, format the heading information.*/
   /* ------------------------------------------------------------*/

  if (PT0DW04.VFBASM02-KEY <= " ") /* First time through*/

    PT0DW04.VFBASM02-KEY = VFBASM02.VFBASM02-KEY; /* Save product key*/

    /* ------------------------------------------------------------*/
     /* Obtain the product style/color table row.*/
    /* ------------------------------------------------------------*/

    if (PT0DW04.PG2KEY != PG2REC.PG2KEY) /* Not same style/color*/

      set PG2REC empty; /* Clear row storage area*/
      PG2REC.PG2KEY = PT0DW04.PG2KEY; /* Style/color key*/
      TA1REC.TA1PGMNM = "PT0D415"; /* Process name*/

      XSPG202(); /* Select style/color row*/

      if (sysVar.errorCode != "00000000" /* Call not successful*/
       || SQLCA.VAGen_SQLCODE != 0)      /* or not normal return*/

        if (sysVar.errorCode == "00000000" /* Call successful*/
         && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

          converseLib.validationFailed(11); /* Indicate data in use*/
        else
          converseLib.validationFailed(10); /* Indicate system error*/

        end

        PT0DW00.PT0DWSWM = "1"; /* Map to be displayed switch*/
        PT0DM001.XXXMODID = "415"; /* Module identification*/

        exit stack; /* Exit to display map*/

      end

    end

    PT0DW04.SY1SSTNM = PG2REC.SY1SSTNM; /* Style name*/
    PT0DW04.SY2CLRAB = PG2REC.SY2CLRAB; /* Color abbreviation*/
    PT0DW04.PG1SC4CD = PG2REC.PG1SC4CD; /* Scheduler code*/
    PT0DW00.XGACD = PG2REC.XGACD; /* Gender age code*/
    if (PT0DW00.XGACD in XGATBL.XGACD)
      PT0DW04.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex];
    end
    PT0DW00.XSUCD = PG2REC.XSUCD; /* Silhouette code*/
    if (PT0DW00.XSUCD in XSUTBL.XSUCD)
      PT0DW04.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex];
    end

    /* ------------------------------------------------------------*/
     /* Obtain the product size descriptions.*/
    /* ------------------------------------------------------------*/

    if (PT0DW04.XGPCD != PG3REC.XGPCD       /* Not same GPC*/
     || PT0DW04.SY1STNBR != PG3REC.SY1STNBR /* or not same style*/
     || PT0DW04.SY2CLRID != PG3REC.SY2CLRID /* or not same color*/
     || PT0DW04.XDMCD != PG3REC.XDMCD       /* or not same dimension*/
     || PT0DW04.XQACD != PG3REC.XQACD)      /* or not same quality*/

      set PG3REC empty; /* Clear row storage area*/
      PG3REC.PG3FUNCD = "PC"; /* Function*/
      PG3REC.PG3DATFM = "C"; /* Data format*/
      PG3REC.PG3XDVCD = PG2REC.XDVCD1; /* Highest division*/
      PG3REC.PG3KEY = PT0DW04.PG2KEY; /* Style/color key*/
      PG3REC.XQACD = PT0DW04.XQACD; /* Quality code*/
      TA1REC.TA1PGMNM = "PT0D415"; /* Process name*/

      XSPG301(); /* Size description translation*/

      if (sysVar.errorCode != "00000000" /* Call not successful*/
       || PG3REC.PG3RETCD != "00")       /* or not normal return*/

        if (sysVar.errorCode == "00000000" /* Call successful*/
         && PG3REC.PG3RETCD == "09")       /* and resource not available*/

          converseLib.validationFailed(11); /* Indicate data in use*/
        else
          converseLib.validationFailed(10); /* Indicate system error*/

        end

        PT0DW00.PT0DWSWM = "1"; /* Map to be displayed switch*/
        PT0DM001.XXXMODID = "415"; /* Module identification*/

        exit stack; /* Exit to display map*/

      end

    end

    PT0DW00.PT0DWIXC = 1; /* Initialize column index*/

    while (PT0DW00.PT0DWIXC <= 40) /* Until end of sizes*/

      PT0DW04.SY4IDDSC[PT0DWIXC] = PG3REC.SY4IDDSC[PT0DWIXC];

      PT0DW00.PT0DWIXC = PT0DW00.PT0DWIXC + 1; /* Increment index*/

    end

    /* ------------------------------------------------------------*/
     /* Obtain the scheduler last name.*/
    /* ------------------------------------------------------------*/

    if (PT0DW04.XGPCD != PG1REC.XGPCD /* Not same GPC*/
     || PT0DW04.PG1SC4CD != PG1REC.PG1SC4CD) /* or not same scheduler*/

      set PG1REC empty; /* Clear row storage area*/
      PG1REC.XGPCD = PT0DW04.XGPCD; /* GPC code*/
      PG1REC.PG1SC4CD = PT0DW04.PG1SC4CD; /* Scheduler code*/

      PT0DS08(); /* Obtain scheduler last name*/

    end

    PT0DW04.XXXLSTNM = PG1REC.XXXLSTNM; /* Scheduler last name*/

    /* ------------------------------------------------------------*/
     /* Format warehouse abbreviation.*/
    /* ------------------------------------------------------------*/

    if (PT0DW04.XWHCD == "**") /* Corporate warehouse*/

      PT0DW04.XWHABRV = "CORP WHSE"; /* Abbreviation*/
    else
      if (PT0DW04.XWHCD in XWHTBL.XWHCD)
        PT0DW04.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      end

    end

    /* ------------------------------------------------------------*/
     /* Clear the array work areas and initialize the indexes.*/
    /* ------------------------------------------------------------*/

    PT0DW00.PT0DWPER = 0; /* Initialize base period*/
    PT0DW00.PT0DWIXL = 1; /* Initialize line index*/
    PT0DW00.PT0DWIXC = 1; /* Initialize column index*/

    move 0 to PT0DW00.PT3AVQT[1] for all; /* Clear available quantities*/

  end

   /* ------------------------------------------------------------*/
   /* If the base period has changed, increment the line index.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.PT0DWPER != 0 /* Not first time through*/
   && VFBASM02.PT3YYMM != PT0DW00.PT0DWPER) /* and period changed*/

    PT0DW00.PT0DWIXL = PT0DW00.PT0DWIXL + 1; /* Increment line index*/
    PT0DW00.PT0DWIXC = 1; /* Initialize column index*/
    move 0 to PT0DW00.PT3AVQT[1] for all; /* Clear available quantities*/

  end

   /* ------------------------------------------------------------*/
   /* Save the data in display storage.*/
   /* ------------------------------------------------------------*/

  PT0DW00.PT0DWPER = VFBASM02.PT3YYMM; /* Base period*/

  if (PT0DW00.PT0DTPRM in PT0DT02.PT0DTPRM)
    if (sysVar.arrayIndex != 0)
      PT0DW04.PT0DTPMO[PT0DWIXL] = PT0DT02.PT0DTPMO[sysVar.arrayIndex];
      PT0DW04.PT0DTPOM[PT0DWIXL] = PT0DT02.PT0DTPOM[sysVar.arrayIndex];
    end
  end
  PT0DW04.PT0DTPRM[PT0DWIXL] = PT0DW00.PT0DTPRM;

  PT0DW00.PT0DWIXR = 1; /* Initialize record index*/

  while (PT0DW00.PT0DWIXR <= 10 /* Until end of array*/
   && VFBASM02.SY5SZID[PT0DWIXR] != 0) /* or end of sizes*/

   /* MOVE VFBASM02.PT3AVQT(PT0DWIXR) TO PT0DW00.PT3AVQT(PT0DWIXC);*/
    PT0DW00.PT3AVQT[PT0DWIXC] = VFBASM02.PT-ADJ-AVAL-SZ[PT0DWIXR];

    PT0DW00.PT0DWEND = PT0DW00.PT0DWIXC - 8; /* Ending column*/

    if (PT0DW00.PT0DWEND > PT0DW04.PT0DWMAX) /* Greater than maximum*/
      PT0DW04.PT0DWMAX = PT0DW00.PT0DWEND; /* Maximum column*/
    end

    PT0DW00.PT0DWIXR = PT0DW00.PT0DWIXR + 1; /* Record index*/
    PT0DW00.PT0DWIXC = PT0DW00.PT0DWIXC + 1; /* Column index*/

  end

  PT0DW04.PT0DWAVQ[PT0DWIXL] = PT0DW00.PT0DWAVQ;
   /* OVE VFBASM02.PT3AVTOT TO PT0DW04.PT3AVTOT(PT0DWIXL);*/
  PT0DW04.PT3AVTOT[PT0DWIXL] = VFBASM02.PT-ADJ-AVAL-TQTY;


end // end PT0D415

// Find the page to be displayed
Function PT0D417()
   /* ------------------------------------------------------------*/
   /* Search the pages for a match on warehouse, style and color.*/
   /* ------------------------------------------------------------*/

  while (PT0DM004.XWHCD != PT0DW04.XWHCD       /* Until same warehouse*/
   || PT0DM004.SY1STNBR != PT0DW04.SY1STNBR /* and same style*/
   || PT0DM004.SY2CLRID != PT0DW04.SY2CLRID) /* and same color*/

    TA5REC.TA5TSQIX = PT0DW00.PT0DWTSP; /* Page number*/

    PT0DS11(); /* Obtain temporary storage page*/

    if (PT0DM004.XWHCD != PT0DW04.XWHCD       /* Warehouse not same*/
     || PT0DM004.SY1STNBR != PT0DW04.SY1STNBR /* or style not same*/
     || PT0DM004.SY2CLRID != PT0DW04.SY2CLRID) /* or color not same*/

      PT0DW00.PT0DWTSP = PT0DW00.PT0DWTSP + 1; /* Increment page number*/

    end

  end


end // end PT0D417

// Format and converse the map
Function PT0D420()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    PTWREC.XXXMODID = PT0DM004.XXXMODID; /* Module identification*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If map is not formatted, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (PT0DM004.XXXCURDT == 0) /* Map is not formatted*/
    PT0D421(); /* Format the data on the map*/
  end

   /* ------------------------------------------------------------*/
   /* If not all warehouses specified, protect warehouse code.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.XWHCD != "XX") /* Not all warehouses*/
    set PT0DM004.XWHCD skip; /* Protect warehouse code*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PT0DM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PT0DM004.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PT0DM004.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0) /* Message to display*/

    PT0DM004.XXXMODID = PTWREC.XXXMODID; /* Module identification*/
    if (PTWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PTWREC.XXXMSGNO);
    end /* Message number*/
    set PT0DM004 alarm; /* Indicate sound alarm*/

  end

  converse PT0DM004 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PT0DM004.XXXMODID = " "; /* Module identification*/
  COMMAREA.CATOAP = PT0DM004.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PT0DM004.CAITEM; /* Application data*/


end // end PT0D420

// Format the display data
Function PT0D421()
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.PT0DWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/

    TA5REC.TA5TSQIX = PT0DW00.PT0DWTSP; /* Page number*/

    PT0DS11(); /* Obtain temporary storage page*/

    PT0DW00.PT0DWBEG = 0; /* Beginning column*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PT0DM004.SY1STNBR = PT0DW04.SY1STNBR; /* Style number*/
  PT0DM004.SY2CLRID = PT0DW04.SY2CLRID; /* Color identification*/
  PT0DM004.XDMCD = PT0DW04.XDMCD; /* Dimension code*/
  PT0DM004.SY1SSTNM = PT0DW04.SY1SSTNM; /* Style short name*/
  PT0DM004.SY2CLRAB = PT0DW04.SY2CLRAB; /* Color abbreviation*/
  PT0DM004.XGAABRV = PT0DW04.XGAABRV; /* Gender age abbreviation*/
  PT0DM004.XSUABRV = PT0DW04.XSUABRV; /* Silhouette abbreviation*/
  PT0DM004.PG1SC4CD = PT0DW04.PG1SC4CD; /* Scheduler code*/
  PT0DM004.XXXLSTNM = PT0DW04.XXXLSTNM; /* Last name*/
  PT0DM004.XQACD = PT0DW04.XQACD; /* Quality*/
  PT0DM004.XUMCD = PT0DW04.XUMCD; /* Unit of measure*/
  PT0DM004.XSDCD = PT0DW04.XSDCD; /* Specification difference*/
  PT0DM004.XPGCD = PT0DW04.XPGCD; /* Packaging type*/
  PT0DM004.XWHCD = PT0DW04.XWHCD; /* Warehouse code*/
  PT0DM004.XWHABRV = PT0DW04.XWHABRV; /* Abbreviation*/

  PT0DW00.PT0DWIXL = 1; /* Initialize line index*/

  while (PT0DW00.PT0DWIXL <= 12 /* Until end of lines*/
   && PT0DW04.PT0DTPRM[PT0DWIXL] > 0) /* or end of periods*/

    if (PT0DM001.XQACD == "02" /* footwear*/
     && PT0DW04.PT0DTPMO[PT0DWIXL] == "FUT") /* future period*/
      PT0DM004.PT0DTPMO[PT0DWIXL] = PT0DW04.PT0DTPMO[PT0DWIXL];
    else
      PT0DM004.PT0DTPMO[PT0DWIXL] = PT0DW04.PT0DTPMO[PT0DWIXL];
      PT0DM004.PT0DTPOM[PT0DWIXL] = PT0DW04.PT0DTPOM[PT0DWIXL];
      PT0DM004.PT0DTPRM[PT0DWIXL] = PT0DW04.PT0DTPRM[PT0DWIXL];
    end
    PT0DW00.PT0DWAVQ = PT0DW04.PT0DWAVQ[PT0DWIXL];
    PT0DM004.PT3AVTOT[PT0DWIXL] = PT0DW04.PT3AVTOT[PT0DWIXL];

    PT0DW00.PT0DWIXC = PT0DW00.PT0DWIXL * 8; /* Column index*/
    PT0DW00.PT0DWEND = PT0DW00.PT0DWBEG + 8; /* Ending column*/

    while (PT0DW00.PT0DWEND > PT0DW00.PT0DWBEG) /* Until end of columns*/

      if (PT0DW04.SY4IDDSC[PT0DWEND] <= " ") /* No size information*/

        if (PT0DW00.PT0DWIXL == 1) /* First time through*/
          set PT0DM004.SY4IDDSC[PT0DWIXC] skip, invisible;
        end

      else

        if (PT0DW00.PT0DWIXL == 1) /* First time through*/
          PT0DM004.SY4IDDSC[PT0DWIXC] = PT0DW04.SY4IDDSC[PT0DWEND];
        end

        PT0DM004.PT3AVQT[PT0DWIXC] = PT0DW00.PT3AVQT[PT0DWEND];

      end

      PT0DW00.PT0DWEND = PT0DW00.PT0DWEND - 1; /* Decrement ending column*/
      PT0DW00.PT0DWIXC = PT0DW00.PT0DWIXC - 1; /* Decrement column index*/

    end

    PT0DW00.PT0DWIXL = PT0DW00.PT0DWIXL + 1; /* Increment line index*/

  end


end // end PT0D421

// Check attention identifier
Function PT0D430()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PT0DM004 initial; /* M004 input/output*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PT0D131(); /* Purge any temporary storage*/

      XSPT001(); /* Exit to another application*/

      PT0DW00.PT0DWSWM = "1"; /* Map to be displayed switch*/
      PT0DM001.XXXMODID = "430"; /* Module identification*/
      set PT0DM001.CATOAP cursor, bold; /* Highlight*/

    else

      PT0DM004.XXXMODID = "430"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PT0DM004"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      set PT0DM001 initial; /* M001 input/output*/

      PT0DW00.PT0DWSWM = "1"; /* Map to be displayed switch*/

      exit stack; /* Exit to display map*/

    end

    PT0D131(); /* Purge any temporary storage*/

    XSPT001(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    PT0DW00.PT0DWSWM = "1"; /* Map to be displayed switch*/
    PT0DM001.XXXMODID = "430"; /* Module identification*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5   /* and PF5 was not pressed*/
   && converseVar.eventKey not pf6   /* and PF6 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf17  /* and PF17 was not pressed*/
   && converseVar.eventKey not pf18) /* and PF18 was not pressed*/

    PT0DM004.XXXMODID = "430"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end


end // end PT0D430

// Reset highlighted fields
Function PT0D440()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PT0DM004.XWHCD initialAttributes; /* Warehouse code*/
  set PT0DM004.PT0DMSSA initialAttributes; /* Size scroll amount*/
  set PT0DM004.CATOAP initialAttributes; /* Commarea TO application*/
  set PT0DM004.CAITEM initialAttributes; /* Commarea application data*/


end // end PT0D440

// Verify the entered data
Function PT0D450()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PT0DM004.XXXMODID = "450"; /* Module identification*/
    set PT0DM004.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Restore any previously overlaid warehouse abbreviation.*/
   /* ------------------------------------------------------------*/

  PT0DM004.XWHABRV = PT0DW04.XWHABRV; /* Abbreviation*/

   /* ------------------------------------------------------------*/
   /* If PREV STY was requested, ensure that selections exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5) /* PREV STY was requested*/

    PT0DW00.PT0DWIXL = PT0DW00.PT0DWIXS - 1; /* Previous selection*/

    while (PT0DW00.PT0DWIXL >= 1 /* Until top of selections*/
     && PT0DM001.SY1STNBR[PT0DWIXL] <= " ") /* or selection found*/

      PT0DW00.PT0DWIXL = PT0DW00.PT0DWIXL - 1; /* Decrement index*/

    end

    if (PT0DW00.PT0DWIXL < 1) /* No previous selection*/

      PT0DM004.XXXMODID = "450"; /* Module identification*/
      converseLib.validationFailed(41); /* No previous style to display*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If NEXT STY was requested, ensure that selections exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* NEXT STY was requested*/

    PT0DW00.PT0DWIXL = PT0DW00.PT0DWIXS + 1; /* Next selection*/

    while (PT0DW00.PT0DWIXL <= 10 /* Until end of selections*/
     && PT0DM001.SY1STNBR[PT0DWIXL] <= " ") /* or selection found*/

      PT0DW00.PT0DWIXL = PT0DW00.PT0DWIXL + 1; /* Increment index*/

    end

    if (PT0DW00.PT0DWIXL > 10) /* No more selections*/

      PT0DM004.XXXMODID = "450"; /* Module identification*/
      converseLib.validationFailed(42); /* No more styles to display*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If LEFT was requested, ensure that columns exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* LEFT was requested*/
   && PT0DW00.PT0DWBEG == 0)       /* and at beginning column*/

    PT0DM004.XXXMODID = "450"; /* Module identification*/
    set PT0DM004.PT0DMSSA cursor; /* Establish cursor position*/
    converseLib.validationFailed(49); /* No previous sizes to display*/

  end

   /* ------------------------------------------------------------*/
   /* If RIGHT was requested, ensure that columns exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11 /* RIGHT was requested*/
   && PT0DW00.PT0DWBEG == PT0DW04.PT0DWMAX) /* and at maximum column*/

    PT0DM004.XXXMODID = "450"; /* Module identification*/
    set PT0DM004.PT0DMSSA cursor; /* Establish cursor position*/
    converseLib.validationFailed(50); /* No more sizes to display*/

  end

   /* ------------------------------------------------------------*/
   /* If PREV CLR was requested, ensure that colors exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17) /* PREV CLR was requested*/
    PT0D451(); /* Verify PREV CLR request*/
  end

   /* ------------------------------------------------------------*/
   /* If NEXT CLR was requested, ensure that colors exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf18) /* NEXT CLR was requested*/
    PT0D452(); /* Verify NEXT CLR request*/
  end

   /* ------------------------------------------------------------*/
   /* If size scroll amount changed, verify the number entered.*/
   /* ------------------------------------------------------------*/

  if (PT0DM004.PT0DMSSA != PT0DW00.PT0DMSSA) /* Size scroll changed*/

    if (PT0DM004.PT0DMSSA < 1 /* Less than 1*/
     || PT0DM004.PT0DMSSA > 99) /* or greater than 99*/

      PT0DM004.XXXMODID = "450"; /* Module identification*/
      set PT0DM004.PT0DMSSA cursor, bold; /* Highlight*/
      converseLib.validationFailed(53); /* Amount missing or invalid*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if warehouse change is not allowed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER not pressed*/
   && PT0DM004.XWHCD != PT0DW04.XWHCD) /* and warehouse changed*/

    PT0DM004.XXXMODID = "450"; /* Module identification*/
    set PT0DM004.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, determine the warehouse to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    if (PT0DM004.XWHCD == PT0DW04.XWHCD) /* Warehouse not changed*/

      PT0D453(); /* Find the next warehouse*/
    else
      PT0D454(); /* Verify the entered warehouse*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end PT0D450

// Verify PREV CLR request
Function PT0D451()
   /* ------------------------------------------------------------*/
   /* Search the previous pages for another color for the style.*/
   /* ------------------------------------------------------------*/

  PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSP - 1; /* Previous page number*/

  while (PT0DW00.PT0DWTSS >= 1                 /* Until top of pages*/
   && PT0DM004.SY1STNBR == PT0DW04.SY1STNBR /* or style changes*/
   && PT0DM004.SY2CLRID == PT0DW04.SY2CLRID) /* or color changes*/

    TA5REC.TA5TSQIX = PT0DW00.PT0DWTSS; /* Page number*/

    PT0DS11(); /* Obtain temporary storage page*/

    if (PT0DM004.SY1STNBR == PT0DW04.SY1STNBR /* Same style*/
     && PT0DM004.SY2CLRID == PT0DW04.SY2CLRID) /* and same color*/

      PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSS - 1; /* Decrement page number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If no page found, indicate no previous color to display.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.PT0DWTSS < 1 /* No page found*/
   || PT0DM004.SY1STNBR != PT0DW04.SY1STNBR) /* or style changed*/

    PT0DM004.XXXMODID = "451"; /* Module identification*/
    converseLib.validationFailed(43); /* No previous color to display*/

  end

   /* ------------------------------------------------------------*/
   /* Reestablish the current temporary storage page.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = PT0DW00.PT0DWTSP; /* Page number*/

  PT0DS11(); /* Obtain temporary storage page*/


end // end PT0D451

// Verify NEXT CLR request
Function PT0D452()
   /* ------------------------------------------------------------*/
   /* Search the following pages for another color for the style.*/
   /* ------------------------------------------------------------*/

  PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSP + 1; /* Next page number*/

  while (PT0DW00.PT0DWTSS <= PT0DW00.TA5TSQIX  /* Until end of pages*/
   && PT0DM004.SY1STNBR == PT0DW04.SY1STNBR /* or style changes*/
   && PT0DM004.SY2CLRID == PT0DW04.SY2CLRID) /* or color changes*/

    TA5REC.TA5TSQIX = PT0DW00.PT0DWTSS; /* Page number*/

    PT0DS11(); /* Obtain temporary storage page*/

    if (PT0DM004.SY1STNBR == PT0DW04.SY1STNBR /* Same style*/
     && PT0DM004.SY2CLRID == PT0DW04.SY2CLRID) /* and same color*/

      PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSS + 1; /* Increment page number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If no page was found, indicate no more colors to display.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.PT0DWTSS > PT0DW00.TA5TSQIX /* No page found*/
   || PT0DM004.SY1STNBR != PT0DW04.SY1STNBR) /* or style changed*/

    PT0DM004.XXXMODID = "452"; /* Module identification*/
    converseLib.validationFailed(44); /* No more colors to display*/

  end

   /* ------------------------------------------------------------*/
   /* Reestablish the current temporary storage page.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = PT0DW00.PT0DWTSP; /* Page number*/

  PT0DS11(); /* Obtain temporary storage page*/


end // end PT0D452

// Find the next warehouse
Function PT0D453()
   /* ------------------------------------------------------------*/
   /* If the last page, indicate no more warehouses to display.*/
   /* ------------------------------------------------------------*/

  if (PT0DW00.PT0DWTSP >= PT0DW00.TA5TSQIX) /* No more pages*/

    PT0DM004.XXXMODID = "453"; /* Module identification*/
    set PT0DM004.XWHCD cursor; /* Establish cursor position*/
    converseLib.validationFailed(48); /* No more warehouses to display*/

  else

    /* ------------------------------------------------------------*/
     /* Obtain the next page in temporary storage.*/
    /* ------------------------------------------------------------*/

    PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSP + 1; /* Increment page number*/

    TA5REC.TA5TSQIX = PT0DW00.PT0DWTSS; /* Page number*/

    PT0DS11(); /* Obtain temporary storage page*/

    /* ------------------------------------------------------------*/
     /* If product changed, indicate no more warehouses to display.*/
    /* ------------------------------------------------------------*/

    if (PT0DM004.SY1STNBR != PT0DW04.SY1STNBR /* Style changed*/
     || PT0DM004.SY2CLRID != PT0DW04.SY2CLRID) /* or color changed*/

      PT0DM004.XXXMODID = "453"; /* Module identification*/
      set PT0DM004.XWHCD cursor; /* Establish cursor position*/
      converseLib.validationFailed(48); /* No more warehouses to display*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Reestablish the current temporary storage page.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = PT0DW00.PT0DWTSP; /* Page number*/

  PT0DS11(); /* Obtain temporary storage page*/


end // end PT0D453

// Verify the entered warehouse
Function PT0D454()
   /* ------------------------------------------------------------*/
   /* Verify that a valid warehouse code was entered.*/
   /* ------------------------------------------------------------*/

  if (PT0DM004.XWHCD == "**" /* Corporate warehouse*/
   || PT0DM004.XWHCD in XWHTBL.XWHCD) /* or code in table*/

    if (PT0DM004.XWHCD == "**") /* Corporate warehouse*/

      PT0DM004.XWHABRV = "CORP WHSE"; /* Abbreviation*/
    else
      PT0DM004.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* Abbreviation*/

    end

    /* ------------------------------------------------------------*/
     /* Search the pages for a match on warehouse, style and color.*/
    /* ------------------------------------------------------------*/

    PT0DW00.PT0DWTSS = 1; /* Initialize page number*/

    while (PT0DM004.XWHCD != PT0DW04.XWHCD       /* Until same warehouse*/
     || PT0DM004.SY1STNBR != PT0DW04.SY1STNBR /* and same style*/
     || PT0DM004.SY2CLRID != PT0DW04.SY2CLRID) /* and same color*/

      TA5REC.TA5TSQIX = PT0DW00.PT0DWTSS; /* Page number*/

      PT0DS11(); /* Obtain temporary storage page*/

      if (PT0DM004.XWHCD != PT0DW04.XWHCD       /* Warehouse not same*/
       || PT0DM004.SY1STNBR != PT0DW04.SY1STNBR /* or style not same*/
       || PT0DM004.SY2CLRID != PT0DW04.SY2CLRID) /* or color not same*/

        PT0DW00.PT0DWTSS = PT0DW00.PT0DWTSS + 1; /* Increment page number*/

        if (PT0DW00.PT0DWTSS > PT0DW00.TA5TSQIX) /* No page found*/

          PT0DW04.XWHCD = PT0DM004.XWHCD; /* Warehouse*/
          PT0DW04.SY1STNBR = PT0DM004.SY1STNBR; /* Style*/
          PT0DW04.SY2CLRID = PT0DM004.SY2CLRID; /* Color*/

        end

      end

    end

    /* ------------------------------------------------------------*/
     /* If no page was found, indicate no product availability.*/
    /* ------------------------------------------------------------*/

    if (PT0DW00.PT0DWTSS > PT0DW00.TA5TSQIX) /* No page found*/

      set PT0DM004.XWHCD cursor, bold; /* Highlight*/
      PT0DM004.XXXMODID = "454"; /* Module identification*/
      converseLib.validationFailed(51); /* No availability for warehouse*/

    end

    /* ------------------------------------------------------------*/
     /* Reestablish the current temporary storage page.*/
    /* ------------------------------------------------------------*/

    TA5REC.TA5TSQIX = PT0DW00.PT0DWTSP; /* Page number*/

    PT0DS11(); /* Obtain temporary storage page*/

  else

    /* ------------------------------------------------------------*/
     /* Indicate that warehouse code is missing or invalid.*/
    /* ------------------------------------------------------------*/

    PT0DM004.XWHABRV = " "; /* Clear abbreviation*/

    set PT0DM004.XWHCD cursor, bold; /* Highlight*/
    PT0DM004.XXXMODID = "454"; /* Module identification*/
    converseLib.validationFailed(36); /* Indicate missing or invalid*/

  end


end // end PT0D454

// Process valid input request
Function PT0D460()
   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, adjust the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    PT0DW00.PT0DWTSP = PT0DW00.PT0DWTSS; /* Page number*/
  end

   /* ------------------------------------------------------------*/
   /* Save the key map data and clear the map input/output area.*/
   /* ------------------------------------------------------------*/

  PT0DW00.PT0DMSSA = PT0DM004.PT0DMSSA; /* Size scroll amount*/

  set PT0DM004 initial; /* M004 input/output*/

   /* ------------------------------------------------------------*/
   /* Commit all changes to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 1;
  sysLib.commit(); /* Commit all changes*/

   /* ------------------------------------------------------------*/
   /* If PREV or NEXT STY was requested, adjust selection index.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5) /* PREV was requested*/

    PT0DW00.PT0DWIXS = PT0DW00.PT0DWIXS - 1; /* Decrement index*/

    while (PT0DM001.SY1STNBR[PT0DWIXS] <= " ") /* Bypass blank lines*/
      PT0DW00.PT0DWIXS = PT0DW00.PT0DWIXS - 1; /* Decrement index*/
    end

    set PT0DM001.SY1STNBR[PT0DWIXS] cursor; /* Position cursor*/
    PT0DW00.PT0DWSWR = "Y"; /* Request for data switch*/

  end

  if (converseVar.eventKey is pf6) /* NEXT was requested*/

    PT0DW00.PT0DWIXS = PT0DW00.PT0DWIXS + 1; /* Increment index*/

    while (PT0DM001.SY1STNBR[PT0DWIXS] <= " ") /* Bypass blank lines*/
      PT0DW00.PT0DWIXS = PT0DW00.PT0DWIXS + 1; /* Increment index*/
    end

    set PT0DM001.SY1STNBR[PT0DWIXS] cursor; /* Position cursor*/
    PT0DW00.PT0DWSWR = "Y"; /* Request for data switch*/

  end

   /* ------------------------------------------------------------*/
   /* If LEFT or RIGHT was requested, adjust beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* LEFT was requested*/

    PT0DW00.PT0DWBEG = PT0DW00.PT0DWBEG - PT0DW00.PT0DMSSA;

    if (PT0DW00.PT0DWBEG < 0) /* Past minimum*/

      PT0DW00.PT0DWBEG = 0; /* Default to minimum*/

      PT0DM004.XXXMODID = "460"; /* Module identification*/
      PTWREC.XXXMSGNO = 56; /* First size is shown*/

    end

    set PT0DM004.PT0DMSSA cursor; /* Establish cursor position*/

  end

  if (converseVar.eventKey is pf11) /* RIGHT was requested*/

    PT0DW00.PT0DWBEG = PT0DW00.PT0DWBEG + PT0DW00.PT0DMSSA;

    if (PT0DW00.PT0DWBEG > PT0DW04.PT0DWMAX) /* Past maximum*/

      PT0DW00.PT0DWBEG = PT0DW04.PT0DWMAX; /* Default to maximum*/

      PT0DM004.XXXMODID = "460"; /* Module identification*/
      PTWREC.XXXMSGNO = 57; /* Last size is shown*/

    end

    set PT0DM004.PT0DMSSA cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If PRINT was requested, format and submit the request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* PRINT was requested*/
    if (PT0DM001.XQACD == "01") /* First quality*/
      PT0D461(); /* Format/submit print request*/
    else
      PT0D462(); /* Format/submit print request*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If PERIODS was requested, indicate display MAP 002.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* PERIODS was requested*/

    set PT0DM002 initial; /* M002 input/output*/

    PT0DW00.PT0DWSWM = "2"; /* Map to be displayed switch*/
    PT0DW00.PT0DWSWR = "Y"; /* Request for data switch*/

    PT0DM002.XWHCD = PT0DW04.XWHCD; /* Warehouse*/
    PT0DM002.SY1STNBR = PT0DW04.SY1STNBR; /* Style*/
    PT0DM002.SY2CLRID = PT0DW04.SY2CLRID; /* Color*/

  end

   /* ------------------------------------------------------------*/
   /* If PREV or NEXT CLR was requested, adjust page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17 /* PREV CLR was requested*/
   || converseVar.eventKey is pf18) /* or NEXT CLR was requested*/

    PT0DW00.PT0DWTSP = PT0DW00.PT0DWTSS; /* Page number*/

  end


end // end PT0D460

// Format/submit print request
Function PT0D461()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PT0DW00.PT0DWIXT = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PT0DW00.PT0DWIXT > 0) /* Until end of table*/

    if (PT0DT01.TARTYPE[PT0DWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters for the product/warehouse being viewed.*/
      /* ------------------------------------------------------------*/

      PT0DW01.XWHCD = PT0DW00.XWHCD; /* Warehouse*/
      PT0DW01.SY1STNBR = PT0DW04.SY1STNBR; /* Style*/
      PT0DW01.SY2CLRID = PT0DW04.SY2CLRID; /* Color*/
      PT0DW01.XDMCD = PT0DW04.XDMCD; /* Dimension*/

      PT0DS06(); /* Format selection parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PT0DT01.TARJCL[PT0DWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT0DT01.TARTYPE[PT0DWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT0DT01.TARJCL[PT0DWIXT] == "/*EOF") /* End of table*/

      PT0DW00.PT0DWIXT = 0; /* Indicate end of table*/
    else
      PT0DW00.PT0DWIXT = PT0DW00.PT0DWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PT0DM004.XXXMODID = "461"; /* Module identification*/

  PT0DS07(); /* Submit the JCL*/


end // end PT0D461

// Format/submit print request
Function PT0D462()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PT0DW00.PT0DWIXT = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PT0DW00.PT0DWIXT > 0) /* Until end of table*/

    if (PT0DT03.TARTYPE[PT0DWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters for the product/warehouse being viewed.*/
      /* ------------------------------------------------------------*/

      PT0DW01.XWHCD = PT0DW00.XWHCD; /* Warehouse*/
      PT0DW01.SY1STNBR = PT0DW04.SY1STNBR; /* Style*/
      PT0DW01.SY2CLRID = PT0DW04.SY2CLRID; /* Color*/
      PT0DW01.XDMCD = PT0DW04.XDMCD; /* Dimension*/

      PT0DS06(); /* Format selection parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PT0DT03.TARJCL[PT0DWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT0DT03.TARTYPE[PT0DWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT0DT03.TARJCL[PT0DWIXT] == "/*EOF") /* End of table*/

      PT0DW00.PT0DWIXT = 0; /* Indicate end of table*/
    else
      PT0DW00.PT0DWIXT = PT0DW00.PT0DWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PT0DM004.XXXMODID = "462"; /* Module identification*/

  PT0DS07(); /* Submit the JCL*/


end // end PT0D462

// Select the first style row
Function PT0DS01()
   /* ------------------------------------------------------------*/
   /* Select the row from the Production Style/Color Table.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1PGMNM = "PT0DS01"; /* Process name*/

  XSPG201(); /* Select style information*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PT0DM001.SY1SSTNM[PT0DWIXL] = PG2REC.SY1SSTNM;
    PT0DM001.SY2CLRAB[PT0DWIXL] = "ALL COLORS";
    PT0DM001.XUMCD[PT0DWIXL] = PG2REC.XUMCD;
    if (PG2REC.XUMCD in XUMTBL.XUMCD)
      PT0DM001.XUMDESC[PT0DWIXL] = XUMTBL.XUMDESC[sysVar.arrayIndex];
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If row not found, indicate style is missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/

    PT0DW00.PT0DWSWE = "Y"; /* Indicate error found*/

    PT0DM001.XXXMODID = "S01"; /* Module identification*/
    set PT0DM001.SY1STNBR[PT0DWIXL] cursor, bold; /* Highlight*/
    converseLib.validationFailed(28); /* Indicate missing or invalid*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0DM001.XXXMODID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/

  end

  exit stack; /* Exit to display map*/


end // end PT0DS01

// Select style/color table row
Function PT0DS02()
   /* ------------------------------------------------------------*/
   /* Select the row from the Production Style/Color Table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the description and return to the*/
   /* previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PT0DM001.SY1SSTNM[PT0DWIXL] = PG2REC.SY1SSTNM;
    PT0DM001.SY2CLRAB[PT0DWIXL] = PG2REC.SY2CLRAB;
    PT0DM001.XUMCD[PT0DWIXL] = PG2REC.XUMCD;
    if (PG2REC.XUMCD in XUMTBL.XUMCD)
      PT0DM001.XUMDESC[PT0DWIXL] = XUMTBL.XUMDESC[sysVar.arrayIndex];
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If row not found, indicate color is missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/

    PT0DW00.PT0DWSWE = "Y"; /* Indicate error found*/

    PT0DM001.XXXMODID = "S02"; /* Module identification*/
    set PT0DM001.SY1STNBR[PT0DWIXL] cursor, bold; /* Highlight*/
    set PT0DM001.SY2CLRID[PT0DWIXL] bold; /* Highlight*/
    set PT0DM001.XDMCD[PT0DWIXL] bold; /* Highlight*/
    converseLib.validationFailed(37); /* Indicate product number invalid*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0DM001.XXXMODID = "S02"; /* Module identification*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PT0DS02"; /* Module identification*/
  TA1REC.TA1LOC = "VERIFY COLOR IDENTIFICATION";
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0DS02

// Select base table set
Function PT0DS03()
   /* ------------------------------------------------------------*/
   /* Initialize the end of cursor switch.*/
   /* ------------------------------------------------------------*/

  PT0DW00.PT0DWSWC = "N"; /* End of cursor switch*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VFBASE02" ("S1", SQLCA, VFBASE02) {isNoRefresh = yes, isExternal = yes};
  end /* Select tbl*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PT0DM001.XXXMODID = "S03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PT0DM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBASE02"; /* Table view name*/
  TA1REC.TA1TBLKE = VFBASE02.VFBASE02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0DS03

// Fetch base table row
Function PT0DS04()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VFBASE02" ("N1", SQLCA, VFBASE02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PT0DW00.PT0DWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PT0DM001.XXXMODID = "S04"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PT0DM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBASE02"; /* Table view name*/
  TA1REC.TA1TBLKE = VFBASE02.VFBASE02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0DS04

// Close base table set
Function PT0DS05()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "VFBASE02" ("C1", SQLCA, VFBASE02) {isNoRefresh = yes, isExternal = yes};
  end /* Close tbl*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PT0DM001.XXXMODID = "S05"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PT0DM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBASE02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0DS05

// Format selection parameters
Function PT0DS06()
   /* ------------------------------------------------------------*/
   /* Indicate the file where the selection is to be written.*/
   /* ------------------------------------------------------------*/

  TA6REC.TARJCL[TA6INDEX] = "DDCARD     01"; /* Select file*/

  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

   /* ------------------------------------------------------------*/
   /* If not all warehouses, specify the warehouse to select.*/
   /* ------------------------------------------------------------*/

  if (PT0DW01.XWHCD != "XX") /* Not all warehouses*/

    PT0DW01.TARJCL = PT0DT01.TARJCL[PT0DWIXT]; /* Format*/

    PT0DW01.PT0DWDLN = 1; /* Line number*/
    PT0DW01.PT0DWDCN = 16; /* Column number*/
    PT0DW01.PT0DWDA3 = PT0DW01.XWHCD; /* Warehouse*/

    TA6REC.TARJCL[TA6INDEX] = PT0DW01.TARJCL; /* Parameters*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end

   /* ------------------------------------------------------------*/
   /* Specify the style to select.*/
   /* ------------------------------------------------------------*/

  PT0DW01.TARJCL = PT0DT01.TARJCL[PT0DWIXT]; /* Format*/

  PT0DW01.PT0DWDLN = 3; /* Line number*/
  PT0DW01.PT0DWDCN = 9; /* Column number*/
  PT0DW01.PT0DWDA6 = PT0DW01.SY1STNBR; /* Style*/
  PT0DW01.PT0DWDDL = "/"; /* Delimiter*/

  TA6REC.TARJCL[TA6INDEX] = PT0DW01.TARJCL; /* Parameters*/

  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

   /* ------------------------------------------------------------*/
   /* If not all colors, specify the color to select.*/
   /* ------------------------------------------------------------*/

  if (PT0DW01.SY2CLRID != "***") /* Not all colors*/

    PT0DW01.TARJCL = PT0DT01.TARJCL[PT0DWIXT]; /* Format*/

    PT0DW01.PT0DWDLN = 3; /* Line number*/
    PT0DW01.PT0DWDCN = 23; /* Column number*/
    PT0DW01.PT0DWDA3 = PT0DW01.SY2CLRID; /* Color*/

    TA6REC.TARJCL[TA6INDEX] = PT0DW01.TARJCL; /* Parameters*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end

   /* ------------------------------------------------------------*/
   /* Specify the dimension to select.*/
   /* ------------------------------------------------------------*/

  PT0DW01.TARJCL = PT0DT01.TARJCL[PT0DWIXT]; /* Format*/

  PT0DW01.PT0DWDLN = 3; /* Line number*/
  PT0DW01.PT0DWDCN = 33; /* Column number*/
  PT0DW01.PT0DWDA3 = PT0DW01.XDMCD; /* Dimension*/

  TA6REC.TARJCL[TA6INDEX] = PT0DW01.TARJCL; /* Parameters*/

  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


end // end PT0DS06

// Submit the JCL for execution
Function PT0DS07()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* Tailor and submit JCL*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PTWREC.XXXMSGNO = 40; /* Indicate job was submitted*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(39); /* Indicate user cancelled*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/

  end

  exit stack; /* Exit to display map*/


end // end PT0DS07

// Obtain scheduler last name
Function PT0DS08()
   /* ------------------------------------------------------------*/
   /* Select the row from the Production Special Users Table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1200" ("S ", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* If row not found, indicate last name is unknown.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PG1REC.XXXLSTNM = "UNKNOWN"; /* Last name*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0DM001.XXXMODID = "S08"; /* Module identification*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PT0DS08"; /* Module identification*/
  TA1REC.TA1LOC = "OBTAIN SCHEDULER LAST NAME";
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG1REC.PG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PT0DW00.PT0DWSWM = "1"; /* Map to be displayed switch*/

  exit stack; /* Exit to display map*/


end // end PT0DS08

// Obtain temporary storage page
Function PT0DS09()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PT0DW03.PT0DWTSL = PT0DW00.PT0DWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PT0DW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0DM001.XXXMODID = "S09"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1PGMNM = "PT0DS09"; /* Module identification*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1MAP = "PT0DM003"; /* Map name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PT0DW00.PT0DWSWM = "1"; /* Indicate map to display*/

  exit stack; /* Exit to display map*/


end // end PT0DS09

// Format the display storage
Function PT0DS10()
   /* ------------------------------------------------------------*/
   /* If header/trailer flag changed, initialize column index.*/
   /* ------------------------------------------------------------*/

  if (VFBASE02.PT2HDTR != PT0DW02.PT2HDTR) /* Header/trailer change*/
    PT0DW00.PT0DWIXC = 1; /* Initialize column index*/
  end

   /* ------------------------------------------------------------*/
   /* Save the data in display storage.*/
   /* ------------------------------------------------------------*/

  PT0DW02.PT2HDTR = VFBASE02.PT2HDTR; /* Header/trailer indicator*/

  if (PT0DW02.PT2HDTR == "H") /* Header row*/

    PT0DW02.PT2QTOT1[1] = VFBASE02.PT2QTOT1; /* Current inventory*/
    PT0DW02.PT2QTOT2 = VFBASE02.PT2QTOT2; /* Past due bookings*/
    PT0DW02.PT2QTOT3 = VFBASE02.PT2QTOT3; /* Available inventory*/
    PT0DW02.PT4QTOT4 = VFBASE02.PT4QTOT4; /* Forecast carryover*/

  end

  if (PT0DW02.PT2HDTR == "T") /* Trailer row*/
    PT0DW02.PT2QTOT1[2] = VFBASE02.PT2QTOT1; /* Smart reservation*/
  end

  PT0DW00.PT0DWIXR = 1; /* Initialize record index*/

  while (PT0DW00.PT0DWIXR <= 10 /* Until end of array*/
   && VFBASE02.SY5SZID[PT0DWIXR] != 0) /* or end of sizes*/

    if (PT0DW02.PT2HDTR == "H") /* Header row*/

      PT0DW02.PT2QTY1[PT0DWIXC] = VFBASE02.PT2QTY1[PT0DWIXR];
      PT0DW02.PT2QTY2[PT0DWIXC] = VFBASE02.PT2QTY2[PT0DWIXR];
      PT0DW02.PT2QTY3[PT0DWIXC] = VFBASE02.PT2QTY3[PT0DWIXR];
      PT0DW02.PT4QT4[PT0DWIXC] = VFBASE02.PT4QT4[PT0DWIXR];

    end

    if (PT0DW02.PT2HDTR == "T") /* Trailer row*/

      PT0DW02.PT2PCT1[PT0DWIXC] = VFBASE02.PT2PCT1[PT0DWIXR];

      PT0DW02.PT0DMPCT = PT0DW02.PT0DMPCT + VFBASE02.PT2PCT1[PT0DWIXR];

      PT0DW00.PT2PCT1 = VFBASE02.PT2PCT1[PT0DWIXR];
     /* MOVE VFBASE02.PT4QT4(PT0DWIXR) TO PT0DW00.PT4QT4;*/
      PT0DW00.PT4QT4 = VFBASE02.PT-ADJ-QTY4-SZ[PT0DWIXR];
      PT0DW00.PT0DWIXF = PT0DW03.SY5SZID[PT0DWIXC];

      if (PT0DW03.SY3FRGUT[PT0DWIXF] == "F") /* Fringe size*/

       /* PT0DW00.PT4QTOT4 = VFBASE02.PT4QTOT4 * PT0DW00.PT2PCT1 / 100;*/
        PT0DW00.PT4QTOT4 = VFBASE02.PT-ADJ-QTY4-TQTY * PT0DW00.PT2PCT1 / 100;
      else
       /* PT0DW00.PT4QTOT4 = VFBASE02.PT4QTOT4 * PT0DW00.PT2PCT1 / 100 (R;*/
        PT0DW00.PT4QTOT4 = mathLib.round(VFBASE02.PT-ADJ-QTY4-TQTY                          * PT0DW00.PT2PCT1 / 100, -mathLib.decimals(PT0DW00.PT4QTOT4));

      end

      PT0DW02.PT0DMVAR[PT0DWIXC] = PT0DW00.PT4QT4 - PT0DW00.PT4QTOT4;

   /* IF FORCAST DATA STARTS BEING BROUGHT INTO THE CALC, REMOVE THE*/
   /* FOLLOWING STATEMENT*/

      if (PT0DM001.XQACD == "02")
        PT0DW02.PT0DMVAR[PT0DWIXC] = 0;
      end

      if (PT0DW02.PT0DMVAR[PT0DWIXC] > 0) /* Positive variance*/
        PT0DW02.PT0DMVAT = PT0DW02.PT0DMVAT + PT0DW02.PT0DMVAR[PT0DWIXC];
      end

      PT0DW00.PT0DWIXC = PT0DW00.PT0DWIXC + 40; /* Adjust for map output*/

      PT0DW02.PT2QTY1[PT0DWIXC] = VFBASE02.PT2QTY1[PT0DWIXR];

      PT0DW00.PT0DWIXC = PT0DW00.PT0DWIXC - 40; /* Remove adjustment*/

    end

    PT0DW00.PT0DWIXR = PT0DW00.PT0DWIXR + 1; /* Record index*/
    PT0DW00.PT0DWIXC = PT0DW00.PT0DWIXC + 1; /* Column index*/

  end


end // end PT0DS10

// Obtain temporary storage page
Function PT0DS11()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PT0DW04.PT0DWTSL = PT0DW00.PT0DWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PT0DW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0DM001.XXXMODID = "S11"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1PGMNM = "PT0DS11"; /* Module identification*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1MAP = "PT0DM004"; /* Map name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PT0DW00.PT0DWSWM = "1"; /* Indicate map to display*/

  exit stack; /* Exit to display map*/


end // end PT0DS11

//*** RECORD=PT0DW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PT0DW00 type basicRecord
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 XQACD XQACD ; 
  10 XQADESC XQADESC ; 
  10 * char(4) ; 
    20 XGACD XGACD ; 
      21 XSUCD XSUCD ; 
    20 XGPCD XGPCD ; 
  10 PT0DMPSA PT0DMPSA ; 
  10 PT0DMSSA PT0DMSSA ; 
  10 PT0DWBEG PT0DWBEG ; 
  10 PT0DWEND PT0DWEND ; 
  10 PT0DWIXC PT0DWIXC ; 
  10 PT0DWIXF PT0DWIXF ; 
  10 PT0DWIXL PT0DWIXL ; 
  10 PT0DWIXR PT0DWIXR ; 
  10 PT0DWIXS PT0DWIXS ; 
  10 PT0DWIXT PT0DWIXT ; 
  10 PT0DWIXD PT0DWIXD ; 
  10 PT0DWSWC PT0DWSWC ; 
  10 PT0DWSWE PT0DWSWE ; 
  10 PT0DWSWM PT0DWSWM ; 
  10 PT0DWSWP PT0DWSWP ; 
  10 PT0DWSWR PT0DWSWR ; 
  10 PT0DWTSL PT0DWTSL ; 
  10 PT0DWTSP PT0DWTSP ; 
  10 PT0DWTSS PT0DWTSS ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 PT0DWPER PT0DWPER ; 
    15 * char(4) ; 
    15 PT0DTPRM PT0DTPRM ; 
  10 PT0DWAVQ PT0DWAVQ ; 
    15 PT3AVQT PT3AVQT [40] ; 
  10 PT4QT4 PT4QT4 ; 
  10 PT4QTOT4 PT4QTOT4 ; 
  10 PT2PCT1 PT2PCT1 ; 
  10 PT0DW-COLOR-TABLE PT0DW-COLOR-TABLE ; 
    15 PT0DW-COLOR PT0DW-COLOR [100] ; 
end // end PT0DW00

//*** RECORD=PT0DW01 ****
// --------------------------------------
// Disseminator print request parameters.
// --------------------------------------
// ***********************
Record PT0DW01 type basicRecord
  5 XWHCD XWHCD ; 
  5 SY1STNBR SY1STNBR ; 
  5 SY2CLRID SY2CLRID ; 
  5 XDMCD XDMCD ; 
  5 TARJCL TARJCL ; 
    10 * char(16) ; 
    10 PT0DWDLN PT0DWDLN ; 
    10 * char(9) ; 
    10 PT0DWDCN PT0DWDCN ; 
    10 * char(2) ; 
    10 PT0DWDA6 PT0DWDA6 ; 
      15 PT0DWDA3 PT0DWDA3 ; 
      15 * char(3) ; 
    10 PT0DWDDL PT0DWDDL ; 
    10 * char(41) ; 
end // end PT0DW01

//*** RECORD=PT0DW02 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record PT0DW02 type basicRecord
  10 VFBASE02-KEY VFBASE02-KEY ; 
  10 PT2HDTR PT2HDTR ; 
  10 PT2QTY1 PT2QTY1 [80] ; 
  10 PT2QTY2 PT2QTY2 [40] ; 
  10 PT2QTY3 PT2QTY3 [40] ; 
  10 PT4QT4 PT4QT4 [40] ; 
  10 PT2PCT1 PT2PCT1 [40] ; 
  10 PT0DMVAR PT0DMVAR [40] ; 
  10 PT2QTOT1 PT2QTOT1 [2] ; 
  10 PT2QTOT2 PT2QTOT2 ; 
  10 PT2QTOT3 PT2QTOT3 ; 
  10 PT4QTOT4 PT4QTOT4 ; 
  10 PT0DMPCT PT0DMPCT ; 
  10 PT0DMVAT PT0DMVAT ; 
end // end PT0DW02

//*** RECORD=PT0DW03 ****
// ------------------------
// Map 003 display storage.
// ------------------------
// ***********************
Record PT0DW03 type basicRecord
  5 PT0DWTSL PT0DWTSL ; 
  5 * char(1751) ; 
    10 VFBASM02-KEY VFBASM02-KEY ; 
      15 PG2KEY PG2KEY ; 
        20 XGPCD XGPCD ; 
        20 SY1STNBR SY1STNBR ; 
        20 SY2CLRID SY2CLRID ; 
        20 XDMCD XDMCD ; 
      15 XSDCD XSDCD ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 XQACD XQACD ; 
      15 XWHCD XWHCD ; 
    10 PT0DWSWP PT0DWSWP ; 
    10 PT3YYMM PT3YYMM ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 SY2CLRAB SY2CLRAB ; 
    10 XGAABRV XGAABRV ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 XXXLSTNM XXXLSTNM ; 
    10 XSUABRV XSUABRV ; 
    10 XWHABRV XWHABRV ; 
    10 PT0DWMAX PT0DWMAX ; 
    10 SY5SZID SY5SZID [40] ; 
    10 SY4IDDSC SY4IDDSC [40] ; 
    10 SY3FRGUT SY3FRGUT [40] ; 
    10 PT0DTPMO PT0DTPMO ; 
    10 PT0DTPOM PT0DTPOM ; 
    10 PT0DTPRM PT0DTPRM ; 
    10 PT3FUBK PT3FUBK [40] ; 
    10 PT3FUTOT PT3FUTOT ; 
    10 PT3PRBK PT3PRBK [40] ; 
    10 PT3PRTOT PT3PRTOT ; 
    10 PT3PDTN PT3PDTN [40] ; 
    10 PT3POTOT PT3POTOT ; 
    10 PT3AVQT PT3AVQT [40] ; 
    10 PT3AVTOT PT3AVTOT ; 
    10 PT5INVC PT5INVC [40] ; 
    10 PT5IVTOT PT5IVTOT ; 
    10 PT5FCBKI PT5FCBKI ; 
    10 PT5FCBK PT5FCBK [40] ; 
    10 PT5FCTOT PT5FCTOT ; 
    10 PT5FCAV PT5FCAV [40] ; 
    10 PT5FATOT PT5FATOT ; 
    10 PT-SMART-RSRV-SZ PT-SMART-RSRV-SZ [40] ; 
    10 PT-SMART-RSRV-TOT PT-SMART-RSRV-TOT ; 
end // end PT0DW03

//*** RECORD=PT0DW04 ****
// ------------------------
// Map 004 display storage.
// ------------------------
// ***********************
Record PT0DW04 type basicRecord
  5 PT0DWTSL PT0DWTSL ; 
  5 * char(2358) ; 
    10 VFBASM02-KEY VFBASM02-KEY ; 
      15 PG2KEY PG2KEY ; 
        20 XGPCD XGPCD ; 
        20 SY1STNBR SY1STNBR ; 
        20 SY2CLRID SY2CLRID ; 
        20 XDMCD XDMCD ; 
      15 XSDCD XSDCD ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 XQACD XQACD ; 
      15 XWHCD XWHCD ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 SY2CLRAB SY2CLRAB ; 
    10 XGAABRV XGAABRV ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 XXXLSTNM XXXLSTNM ; 
    10 XSUABRV XSUABRV ; 
    10 XWHABRV XWHABRV ; 
    10 PT0DWMAX PT0DWMAX ; 
    10 SY4IDDSC SY4IDDSC [40] ; 
    10 PT0DTPMO PT0DTPMO [12] ; 
    10 PT0DTPOM PT0DTPOM [12] ; 
    10 PT0DTPRM PT0DTPRM [12] ; 
    10 PT0DWAVQ PT0DWAVQ [12] ; 
    10 PT3AVTOT PT3AVTOT [12] ; 
end // end PT0DW04

//*** RECORD=PT0DW05 ****
// ------------------------------------------------------------
// First parameter passed to the I/O module when selecting rows
// from the Base By Month table.
// ------------------------------------------------------------
// ***********************
Record PT0DW05 type basicRecord
  10 PT0DWFUN PT0DWFUN ; 
  10 XWHCD XWHCD [2] ; 
end // end PT0DW05

//*** RECORD=VFBASE02 ****
// *************** MODELING FOOTWEAR BASE TABLE ***************
// 
// DB2 TABLE VIEW:      DMODEL.VFBASE02
// 
// DCLGEN MEMBER:       DFBASE02
// 
// I/O MODULE:          VFBASE02
// 
// KEY TO TABLE:        XGPCD
//                      SY1STNBR
//                      SY2CLRID
//                      XDMCD
//                      XSDCD
//                      XPGCD
//                      XUMCD
//                      XQACD
//                      XWHCD
// 
// MAINTENANCE HISTORY:
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          12/19/94  MHUYNH  New record.
// ************************
Record VFBASE02 type basicRecord
  5 VFBASE02-GROUP VFBASE02-GROUP ; 
    10 VFBASE02-KEY VFBASE02-KEY ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XSDCD XSDCD ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 XQACD XQACD ; 
      15 XWHCD XWHCD ; 
    10 PT2HDTR PT2HDTR ; 
    10 PT2RNUM PT2RNUM ; 
    10 SY5SZID SY5SZID [10] ; 
    10 PT2QTY1 PT2QTY1 [10] ; 
    10 PT2QTOT1 PT2QTOT1 ; 
    10 PT2QTY2 PT2QTY2 [10] ; 
    10 PT2QTOT2 PT2QTOT2 ; 
    10 PT-ADJ-QTY2-SZ PT-ADJ-QTY2-SZ [10] ; 
    10 PT-ADJ-QTY2-TQTY PT-ADJ-QTY2-TQTY ; 
    10 PT2QTY3 PT2QTY3 [10] ; 
    10 PT2QTOT3 PT2QTOT3 ; 
    10 PT4QT4 PT4QT4 [10] ; 
    10 PT4QTOT4 PT4QTOT4 ; 
    10 PT-ADJ-QTY4-SZ PT-ADJ-QTY4-SZ [10] ; 
    10 PT-ADJ-QTY4-TQTY PT-ADJ-QTY4-TQTY ; 
    10 PT2PCT1 PT2PCT1 [10] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VFBASE02

//*** RECORD=VFBASM02 ****
// ********** MODELING FOOTWEAR BASE BY MONTH TABLE ***********
// 
// DB2 TABLE VIEW:      DMODEL.VFBASM02
// 
// DCLGEN MEMBER:       DFBASM02
// 
// I/O MODULE:          VFBASM02
// 
// KEY TO TABLE:        XGPCD
//                      SY1STNBR
//                      SY2CLRID
//                      XDMCD
//                      XSDCD
//                      XPGCD
//                      XUMCD
//                      XQACD
//                      XWHCD
// 
// MAINTENANCE HISTORY:
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          12/19/94  MHUYNH  New record.
// Y2KFIX 12/06/1997  TTHAN1  CHANGE SIZE OF PT3YYMM FROM 4 TO
//                            9.
// ************************
Record VFBASM02 type basicRecord
  5 VFBASM02-GROUP VFBASM02-GROUP ; 
    10 VFBASM02-KEY VFBASM02-KEY ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 XQACD XQACD ; 
      15 XWHCD XWHCD ; 
    10 PT3YYMM PT3YYMM ; 
    10 PT2RNUM PT2RNUM ; 
    10 SY5SZID SY5SZID [10] ; 
    10 PT3FUBK PT3FUBK [10] ; 
    10 PT3FUTOT PT3FUTOT ; 
    10 PT3PRBK PT3PRBK [10] ; 
    10 PT3PRTOT PT3PRTOT ; 
    10 PT3PDTN PT3PDTN [10] ; 
    10 PT3POTOT PT3POTOT ; 
    10 PT-ADJ-PRDCTN-SZ PT-ADJ-PRDCTN-SZ [10] ; 
    10 PT-ADJ-PRDCTN-TQTY PT-ADJ-PRDCTN-TQTY ; 
    10 PT3AVQT PT3AVQT [10] ; 
    10 PT3AVTOT PT3AVTOT ; 
    10 PT-ADJ-AVAL-SZ PT-ADJ-AVAL-SZ [10] ; 
    10 PT-ADJ-AVAL-TQTY PT-ADJ-AVAL-TQTY ; 
    10 PT5INVC PT5INVC [10] ; 
    10 PT5IVTOT PT5IVTOT ; 
    10 PT5FCBKI PT5FCBKI ; 
    10 PT5FCBK PT5FCBK [10] ; 
    10 PT5FCTOT PT5FCTOT ; 
    10 PT5FCAV PT5FCAV [10] ; 
    10 PT5FATOT PT5FATOT ; 
    10 PT-ADJ-FCSTAV-SZ PT-ADJ-FCSTAV-SZ [10] ; 
    10 PT-ADJ-FCSTAV-TQTY PT-ADJ-FCSTAV-TQTY ; 
    10 PT-SMART-RSRV-SZ PT-SMART-RSRV-SZ [10] ; 
    10 PT-SMART-RSRV-TOT PT-SMART-RSRV-TOT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VFBASM02

DataItem PT-ADJ-AVAL-SZ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT-ADJ-AVAL-TQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT-ADJ-FCSTAV-SZ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT-ADJ-FCSTAV-TQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT-ADJ-PRDCTN-SZ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT-ADJ-PRDCTN-TQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT-ADJ-QTY2-SZ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT-ADJ-QTY2-TQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT-ADJ-QTY4-SZ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT-ADJ-QTY4-TQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PT-SMART-RSRV-SZ1
DataItem PT-SMART-RSRV-SZ int {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PT-SMART-RSRV-TOT
DataItem PT-SMART-RSRV-TOT int {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Standard percent total (100%)
DataItem PT0DMPCT num(8,2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Period scroll amount
DataItem PT0DMPSA num(2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size scroll amount
DataItem PT0DMSSA num(2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PT4QT4 - PT2QTOT2 * PT2PCT1
DataItem PT0DMVAR num(6)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Variance total (SUM OF + VARs)
DataItem PT0DMVAT num(8)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// COLOR OF A STYLE
DataItem PT0DW-COLOR char(3)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// all COLORS OF A STYLE
DataItem PT0DW-COLOR-TABLE char(300)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// Available quantity line
DataItem PT0DWAVQ char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Beginning column number
DataItem PT0DWBEG smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Disseminator argument of X(3)
DataItem PT0DWDA3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Disseminator argument of X(6)
DataItem PT0DWDA6 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Disseminator column number
DataItem PT0DWDCN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Disseminator delimiter
DataItem PT0DWDDL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Disseminator line number
DataItem PT0DWDLN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending column number
DataItem PT0DWEND smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Function for DB2 I/O module
DataItem PT0DWFUN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map columns
DataItem PT0DWIXC smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for Color table
DataItem PT0DWIXD smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for fringe/gut indicator
DataItem PT0DWIXF smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for line fields
DataItem PT0DWIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for record fields
DataItem PT0DWIXR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for selection fields
DataItem PT0DWIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for JCL table fields
DataItem PT0DWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Maximum beginning column
DataItem PT0DWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Period YYMM work area
DataItem PT0DWPER num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch
DataItem PT0DWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Edit error switch
DataItem PT0DWSWE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem PT0DWSWM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First period of product switch
DataItem PT0DWSWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PT0DWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage page length
DataItem PT0DWTSL num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = " ", inputRequired = no
}
end

// Current temporary storage page
DataItem PT0DWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage search page
DataItem PT0DWTSS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem VFBASE02-GROUP char(352)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem VFBASE02-KEY char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem VFBASM02-GROUP char(546)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem VFBASM02-KEY char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

