package pt0m;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import pc.common.*;
import pg.common.*;
import pt.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=PT0M ****
// This application displays the Production Tracking Menu.
// It provides entry to the subordinate applications.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          11/10/88  SPOPA   New application.
// E#000000 04/17/89  RSAMUE  include XGPCD 01 IN-STORE PROMO
// E#000000 03/08/91  RHETRI  Add CSP mod IDs to screen
// PT-42    06/18/92  MADAMS  Add PT0E to menu.
//          09/15/93  MHUYNH  Add PT05 to menu.
//          01/31/96  MCHOW   Add PT07 to menu.
// PT017    12/31/98  JKUNDU  Add PT08, PT09 to Menu.
// *********************
Program PT0M type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PT00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PT0MW00 PT0MW00; // record
  PT0MW01 PT0MW01; // record
  PTWREC PTWREC; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PT0MT {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use PT0MM.PT0MM001,  // forms
      PT0MM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPT001: XPPT001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set PT0MM001 initial; /* M001 input/output*/
    set PT0MW00 empty; /* Working storage*/
    set PT0MW01 empty; /* M001 display storage*/

    PT0MW01.XGPCD = COMMAREA.XGPCD; /* GPC code*/

    PT0MW00.PT0MWSWR = "Y"; /* Request for data switch*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PT0M001; /* Converse the main process*/


    PT0M001: PT0M001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PT0M001; /* Converse the main process*/


  end // end main
end // end PT0M

// Main process to display a map
Function PT0M001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT0M100(); /* Obtain the data to display*/

  PT0M200(); /* Format and display the map*/

  PT0M300(); /* Check attention identifier*/

  PT0M400(); /* Reset fields to normal intensity*/

  PT0M500(); /* Verify the data that was entered*/

  PT0M600(); /* Process valid input request*/


end // end PT0M001

// Obtain the data to display
Function PT0M100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PT0MW00.PT0MWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Obtain the General Product Class description.*/
   /* ------------------------------------------------------------*/

  if (PT0MW01.XGPCD in XGPTBL.XGPCD /* Code is in table*/
   && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PT0MW01.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex]; /* Save description*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PT0MW01.XGPABRV = " "; /* Clear description*/

    PT0MM001.XXXMODID = "100"; /* Module identification*/
    set PT0MM001.XGPCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(22); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* If no error was found, indicate request for data complete.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/
    PT0MW00.PT0MWSWR = "N"; /* Request for data switch*/
  end


end // end PT0M100

// Format and converse the map
Function PT0M200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If map is not formatted, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (PT0MM001.XXXCURDT == 0) /* Map is not formatted*/
    PT0M210(); /* Format the data on the map*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PT0MM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PT0MM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PT0MM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0) /* Message to display*/

    if (PTWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PTWREC.XXXMSGNO);
    end /* Message number*/
    set PT0MM001 alarm; /* Indicate sound alarm*/

  end

  converse PT0MM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PT0MM001.XXXMODID = " "; /* Module identification*/
  COMMAREA.CATOAP = PT0MM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PT0MM001.CAITEM; /* Application data*/


end // end PT0M200

// Format the display data
Function PT0M210()
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PT0MM001.XGPCD = PT0MW01.XGPCD; /* GPC code*/
  PT0MM001.XGPABRV = PT0MW01.XGPABRV; /* GPC description*/


end // end PT0M210

// Check attention identifier
Function PT0M300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PT0MM001 initial; /* M001 input/output*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSPT001(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    PT0MM001.XXXMODID = "300"; /* Module identification*/
    set PT0MM001.CATOAP cursor, bold; /* Highlight*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PT0MM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* TO application*/
    end

    XSPT001(); /* Exit to another application*/

    PT0MM001.XXXMODID = "300"; /* Module identification*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PT0MM001.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to display map*/

  end


end // end PT0M300

// Reset highlighted fields
Function PT0M400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PT0MM001.XGPCD initialAttributes; /* GPC code*/
  set PT0MM001.PT0MMSEL initialAttributes; /* Menu selection*/
  set PT0MM001.CATOAP initialAttributes; /* FAST PATH to application*/
  set PT0MM001.CAITEM initialAttributes; /* FAST PATH application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PT0MM001.XGPCD == "?") /* GPC list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      PT0MM001.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(34); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of GPC codes.*/
   /* ------------------------------------------------------------*/

  if (PT0MM001.XGPCD == "?") /* GPC list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  GPC"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXGP01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PT0MM001.XGPCD = PT0MW01.XGPCD; /* Restore prior code*/
      PT0MM001.XGPABRV = PT0MW01.XGPABRV; /* Description*/
    else
      PT0MM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* Selected code*/
      PT0MM001.XGPABRV = XGPTBL.XGPABRV[XX0XWPIX]; /* Description*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  PT0MM001.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(35); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end PT0M400

// Verify data that was entered
Function PT0M500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PT0MM001.XXXMODID = "500"; /* Module identification*/
    set PT0MM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Indicate only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the General Product Class code.*/
   /* ------------------------------------------------------------*/

  if (PT0MM001.XGPCD in XGPTBL.XGPCD /* Code in table*/
   && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PT0MM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex]; /* Save description*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PT0MM001.XGPABRV = " "; /* Clear description*/

    PT0MM001.XXXMODID = "500"; /* Module identification*/
    set PT0MM001.XGPCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(22); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Verify any menu selection that was entered.*/
   /* ------------------------------------------------------------*/

  if (PT0MM001.PT0MMSEL > 0) /* Menu selection was entered*/

    if (PT0MM001.PT0MMSEL in PT0MT.PT0MMSEL) /* Selection in table*/

      COMMAREA.CATOAP = PT0MT.CATOAP[sysVar.arrayIndex]; /* TO application*/
      PT0M510(); /* CHECK TO SEE IF PTOC CALLED AND RESET GPC*/

    else

      /* ------------------------------------------------------------*/
       /* If not found, indicate selection is invalid.*/
      /* ------------------------------------------------------------*/

      PT0MM001.XXXMODID = "500"; /* Module identification*/
      set PT0MM001.PT0MMSEL cursor, bold; /* Highlight*/
      converseLib.validationFailed(9); /* Indicate invalid selection*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end PT0M500

Function PT0M510()
   /* ------------------------------------------------------------*/
    /* CHANGE GPC CODE IF PT0C CALLED*/
   /* ------------------------------------------------------------*/

  if (PT0MM001.PT0MMSEL == 4
   || PT0MM001.PT0MMSEL == 24)
    PT0MM001.XGPCD = "01";
  else
    if (PT0MM001.PT0MMSEL == 3
     || PT0MM001.PT0MMSEL == 23
     || PT0MM001.PT0MMSEL == 26
     || PT0MM001.PT0MMSEL == 27
     || PT0MM001.PT0MMSEL == 28)
      PT0MM001.XGPCD = "02";
    else
      if (PT0MM001.PT0MMSEL == 2
       || PT0MM001.PT0MMSEL == 22)
        PT0MM001.XGPCD = "03";
      else
         /* NEXT SENTENCE*/
      end
    end
  end
end // end PT0M510

// Process valid input request
Function PT0M600()
   /* ------------------------------------------------------------*/
   /* Save the entered GPC code in the COMMAREA.*/
   /* ------------------------------------------------------------*/

  COMMAREA.XGPCD = PT0MM001.XGPCD; /* GPC code*/

   /* ------------------------------------------------------------*/
   /* If user selected "5", set switch for PT0C to use.*/
   /* ------------------------------------------------------------*/

  if (PT0MM001.PT0MMSEL == 5) /* If Menu selection is '5'*/
    PTWREC.PTWPT0CS = "Y"; /* Set PT0C switch to 'yes'*/
  end

   /* ------------------------------------------------------------*/
   /* Invoke the application indicated by the table entry.*/
   /* ------------------------------------------------------------*/

  if (PT0MM001.PT0MMSEL > 0) /* Menu selection was entered*/

    XSPT001(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* If the request failed, display the returned error message.*/
    /* ------------------------------------------------------------*/

    PT0MM001.XXXMODID = "600"; /* Module identification*/
    set PT0MM001.PT0MMSEL cursor, bold; /* Highlight*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Initialize the display storage and save key map data.*/
   /* ------------------------------------------------------------*/

  set PT0MW01 empty; /* M001 display storage*/

  PT0MW01.XGPCD = PT0MM001.XGPCD; /* GPC code*/

   /* ------------------------------------------------------------*/
   /* Clear map input/output area and request data to display.*/
   /* ------------------------------------------------------------*/

  set PT0MM001 initial; /* M001 input/output*/

  PT0MW00.PT0MWSWR = "Y"; /* Request for data switch*/


end // end PT0M600

//*** RECORD=PT0MW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PT0MW00 type basicRecord
  10 PT0MWSWR PT0MWSWR ; 
end // end PT0MW00

//*** RECORD=PT0MW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record PT0MW01 type basicRecord
  10 XGPCD XGPCD ; 
  10 XGPABRV XGPABRV ; 
end // end PT0MW01

// Request for data switch
DataItem PT0MWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

