package pt04;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ff.common.*;
import fk.common.*;
import fy.common.*;
import pc.common.*;
import pg.common.*;
import pt.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PT04 ****
// This application displays the Submit Job Request Menu screen
// and subordinate job submission screens.
// 
// The menu is displayed for the user to select the jobs to be
// submitted.  Another available selection allows the user to
// view the available printers and change the printed output
// destination.
// 
// Job Control Language statements are formatted and submitted
// through the Internal Reader Transient Data Queue (INTR).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TARTYPE).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed.
// 
// The data in working storage is substituted and the statement
// is written to the internal reader.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the menu, only.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          03/21/90  rgilli  New application.
//          09/21/90  cmessi  add smarts to submit test or
//                            production jcl.
//          08/09/93  cmessi  Table change
// *********************
Program PT04 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PT00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FFZREC FFZREC; // record
  FY1REC FY1REC; // record
  PCFREC PCFREC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  PT04W00 PT04W00; // record
  PT04W01 PT04W01; // record
  PT04W02 PT04W02; // record
  PT04W03 PT04W03; // record
  PT04W04 PT04W04; // record
  PTWREC PTWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  XZZREC XZZREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PT04T02; // table
  use PT04T03 {deleteAfterUse = yes}; // table
  use PT04T04 {deleteAfterUse = yes}; // table
  use PT04T12 {deleteAfterUse = yes}; // table
  use PT04T13 {deleteAfterUse = yes}; // table
  use PT04T14 {deleteAfterUse = yes}; // table
  use PT04M.PT04M002,  // forms
      PT04M.PT04M003, 
      PT04M.PT04M004, 
      PT04M.PT04M099, 
      PT04M.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPT001: XPPT001();
     /* ------------------------------------------------------------*/
     /* Initialize the working storage areas and variables.*/
     /* ------------------------------------------------------------*/

    set TA0PM001 initial; /* M001 input/output*/
    set PT04M002 initial; /* M002 input/output*/
    set PT04M003 initial; /* M002 input/output*/
    set PT04M004 initial; /* M002 input/output*/
    set PT04M099 initial; /* M099 input/output*/
    set PT04W00 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA6REC empty; /* Background job subroutine parameters*/

     /* ------------------------------------------------------------*/
     /* Indicate that the output destination must be obtained.*/
     /* ------------------------------------------------------------*/

    TA6REC.TA6SUBSW = "I"; /* Indicate obtain information*/

     /* ------------------------------------------------------------*/
     /* Indicate the number of selection lines on the menu.*/
     /* ------------------------------------------------------------*/

    PT04W00.PT04WIXL = 4; /* Number of selection lines*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PT04001; /* Converse the main process*/


    PT04001: PT04001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PT04001; /* Converse the main process*/


  end // end main
end // end PT04

// Main process to display a map
Function PT04001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Invoke the process for each selection entered on menu.*/
   /* 2) After all selections are processed, display the menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PT04W00.PT04WSWX != "Y") /* EXIT not requested*/

    if (PT04W00.PT04MSEL[1] == "S" /* Line 1 was selected*/
     || TA6REC.TA6SUBSW == "I")    /* or information requested*/

      PT04010(); /* Specify output destination*/

    end

    if (PT04W00.PT04MSEL[2] == "S") /* Line 2 was selected*/
      PT04W00.PT04WRD2 = "Y"; /* set request defaults switch 'on'*/
      if (CACHGFL == "Y")
        set PT04M002.PT04MPRM cursor;
      else
        set PT04M002.PT04MPRM skip;
        set PT04M002.PT04MLPD cursor;
      end
      PT04W00.PT04WERF = "Y"; /* set error flag 'on'*/
      while (PT04W00.PT04WERF != "N")
        PT04020(); /* delivery analysis report*/
      end
    end

    if (PT04W00.PT04MSEL[3] == "S") /* Line 2 was selected*/
      PT04030(); /* cpos by cust xref report*/
    end

    if (PT04W00.PT04MSEL[4] == "S") /* Line 2 was selected*/
      PT04040(); /* cpos by cust xref report*/
    end

  end

  PT04W00.PT04WSWX = "N"; /* Reset exit requested switch*/

  PT04990(); /* Report Request Menu*/


end // end PT04001

// Specify output destination
Function PT04010()
   /* ------------------------------------------------------------*/
   /* Obtain and/or display the output destination for the user.*/
   /* ------------------------------------------------------------*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If successful, indicate the selected function is completed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (TA6REC.TA6RTNCD == "0") /* Normal return*/

      if (TA6REC.TA6SUBSW == "I") /* Obtain information only*/

        TA6REC.TA6SUBSW = "N"; /* Indicate information obtained*/
      else
        PT04W00.PT04MSEL[1] = "*"; /* Indicate function completed*/

      end

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If user cancelled request, indicate function cancelled.*/
    /* ------------------------------------------------------------*/

    if (TA6REC.TA6RTNCD == "1") /* User cancelled request*/

      PT04W00.PT04MSEL[1] = "C"; /* Indicate function cancelled*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "010"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  exit stack; /* Exit to display map*/


end // end PT04010

// late production sum rpt
Function PT04020()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If first time thru, Obtain default data.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PT04W00.PT04WRD2 == "Y") /* if switch is on*/
    PT04021(); /* Obtain default data*/
    PT04W00.PT04WRD2 = "N"; /* set switch off*/
  end

  PT04022(); /* Format and display the map*/

  PT04023(); /* Check attention identifier*/

  PT04024(); /* Reset fields to normal intensity*/

  PT04025(); /* Verify the data that was entered*/

  PT04026(); /* Process valid input request*/


end // end PT04020

// select 's' dprodg.vsygrp01
Function PT04021()
   /* ------------------------------------------------------------*/
   /* obtain default date from dcorp.vparm101*/
   /* ------------------------------------------------------------*/

  set XZZREC empty;
  XZZREC.XZZQRYID = "PT4300"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/
  try
    call "IO1000" ("S ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PT04M002.PT04MPRM = XZZREC.XZZ1CHR1;
      PT04M002.PT04MLPD = XZZREC.XZZINT1;
      PT04M002.PT04MSCH = XZZREC.XZZ2CHR1;
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "021"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
   /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT04021

// Format and display the map
Function PT04022()
   /* ------------------------------------------------------------*/
   /* If user is authorized, allow access to parm update field.*/
   /* ------------------------------------------------------------*/

  if (PT04W00.PT04WERF == "N") /* No edir errors*/
    if (CACHGFL == "Y") /* Updates allowed by this user*/
      set PT04M002.PT04MPRM cursor; /* Have cursor appear here first*/
    else
      set PT04M002.PT04MLPD cursor; /* Have cursor appear here first*/
      set PT04M002.PT04MPRM skip; /* No access to this field*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    PT04M002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  PT04M002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT04M002.XURDEST = TA6REC.XURDEST; /* Print destination*/
  PT04M002.XRODESC = TA6REC.XRODESC; /* Printer description*/
  PT04M002.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  PT04M002.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  PT04M002.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT04M002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT04M002.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT04M002 alarm; /* Indicate sound alarm*/

  end

  converse PT04M002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PT04022

// Check attention identifier
Function PT04023()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PT04W00.PT04MSEL[5] = "C"; /* Indicate selection cancelled*/

    set PT04M002 initial; /* m005 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PT04W00.PT04MSEL[2] = " "; /* Indicate nothing happened*/
    COMMAREA.CAMSG = "NO ACTION TAKEN ON PREVIOUS SCREEN";

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "023"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PT04023

// Reset highlighted fields
Function PT04024()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (CACHGFL == "Y")
    set PT04M002.PT04MPRM initialAttributes;
  else
    set PT04M002.PT04MPRM skip;
  end
  set PT04M002.PT04MLPD initialAttributes;
  set PT04M002.PT04MSCH initialAttributes;


end // end PT04024

// Verify the entered data
Function PT04025()

   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

  PT04W00.PT04WERF = "N";

   /* ------------------------------------------------------------*/
   /* validate parm update field*/
   /* ------------------------------------------------------------*/

  if (PT04M002.PT04MPRM != "P"
   && PT04M002.PT04MPRM != "R")
    PT04W00.PT04WERF = "Y";
    converseLib.validationFailed(80);
    PTWREC.XXXMODID = "025";
    set PT04M002.PT04MPRM cursor, bold;
    return;
  end

  if (PT04W00.PT04WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate late production due date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGG = PT04M002.PT04MLPD;
  PT04S21(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set PT04M002.PT04MLPD cursor, bold; /* Highlight*/
    PT04W00.PT04WERF = "Y";
    converseLib.validationFailed(81); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "025";
    return;
  else
    set PT04M002.PT04MLPD initialAttributes;
  end

  if (PT04W00.PT04WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate scheduler code*/
   /* ------------------------------------------------------------*/

  if (PT04M002.PT04MSCH != "* "
   && PT04M002.PT04MSCH != " *"
   && PT04M002.PT04MSCH != "**")
    set PG1REC empty;
    PG1REC.PG1SC4CD = PT04M002.PT04MSCH;
    PG1REC.PG1FCTCD = "  ";
    PG1REC.XGPCD = "02";

    try
      call "IO1200" ("S ", SQLCA, PG1REC) {isNoRefresh = yes};
    end
    if (SQLCA.VAGen_SQLCODE != 0)
      set PT04M002.PT04MSCH cursor, bold; /* Highlight*/
      PT04W00.PT04WERF = "Y";
      converseLib.validationFailed(86); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "025";
      return;
    end
  end



end // end PT04025

// Process valid input request
Function PT04026()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

  if (PT04W00.PT04WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* if parm update was requested then UPDATE PARMS!! NOOOW!!!!!!*/
   /* ------------------------------------------------------------*/

  if (PT04M002.PT04MPRM == "P")

    PT04S26();
    PT04W00.PT04MSEL[2] = "*";
    COMMAREA.CAMSG = "FOOTWEAR LATE PROD SUMMARY PARMS - UPDATED";
    return;

  end


   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/
  PT04W00.PT04WIXT = 1;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03") /* if on production system*/
    PT04027(); /* format production jcl*/
  else
    PT04028(); /* format test jcl*/
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "026"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PT04W00.PT04MSEL[2] = "*"; /* Indicate function completed*/
    COMMAREA.CAMSG = "NIL FTWR LATE PROD SUM REPORT - SUBMITTED";

    set PT04M002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end PT04026

// Process valid production jcl
Function PT04027()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT04T02.TARTYPE[PT04WIXT] == "W")
      if (PT04M002.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT31 FORMS=PT31,COPIES=1,DEST=RMT00";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT41 FORMS=PT41,COPIES=1,DEST=RMT00";
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT31 FORMS=PT31,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT41 FORMS=PT41,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
    else

      if (PT04T02.TARJCL[PT04WIXT] == "===FILE01===")
        if (PT04M002.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT31)'";
        else
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT31)'";
        end
      else

        if (PT04T02.TARJCL[PT04WIXT] == "===FILE02===")
          if (PT04M002.XURDEST == "LOCAL") /* destination lazer*/
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT41)'";
          else
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT41)'";
          end
        else

          if (PT04T02.TARTYPE[PT04WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

            set PT04W02 empty; /* Parameters work area*/

            PT04W02.PT04MPRM = "N";
            PT04W02.PT04MLPD = PT04M002.PT04MLPD;
            PT04W02.PT04MSCH = PT04M002.PT04MSCH;

            TA6REC.TARJCL[TA6INDEX] = PT04W02.TARJCL; /* Parameters*/

          else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

            TA6REC.TARJCL[TA6INDEX] = PT04T02.TARJCL[PT04WIXT]; /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = PT04T02.TARTYPE[PT04WIXT]; /* Type*/

          end
        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT04T02.TARJCL[PT04WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT04W00.PT04WIXT = PT04W00.PT04WIXT + 1; /* Input table index*/

    end

  end

end // end PT04027

// Process valid test jcl
Function PT04028()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT04T12.TARJCL[PT04WIXT] == "===OUTPUT1===")
      if (PT04M002.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT31 FORMS=PT31,COPIES=1,DEST=RMT00";
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT31 FORMS=PT31,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
    else

      if (PT04T12.TARJCL[PT04WIXT] == "===OUTPUT2===")
        if (PT04M002.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT41 FORMS=PT41,COPIES=1,DEST=RMT00";
        else
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT41 FORMS=PT41,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
        end
      else

        if (PT04T12.TARJCL[PT04WIXT] == "===FILE01===")
          if (PT04M002.XURDEST == "LOCAL") /* destination lazer*/
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(2,,PT31)'";
          else
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(T,,PT31)'";
          end
        else

          if (PT04T12.TARJCL[PT04WIXT] == "===FILE02===")
            if (PT04M002.XURDEST == "LOCAL") /* destination lazer*/
              TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(2,,PT41)'";
            else
              TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(T,,PT41)'";
            end
          else

            if (PT04T12.TARTYPE[PT04WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

              set PT04W02 empty; /* Parameters work area*/

              PT04W02.PT04MPRM = "N";
              PT04W02.PT04MLPD = PT04M002.PT04MLPD;
              PT04W02.PT04MSCH = PT04M002.PT04MSCH;

              TA6REC.TARJCL[TA6INDEX] = PT04W02.TARJCL; /* Parameters*/

            else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

              TA6REC.TARJCL[TA6INDEX] = PT04T12.TARJCL[PT04WIXT]; /* JCL*/
              TA6REC.TARTYPE[TA6INDEX] = PT04T12.TARTYPE[PT04WIXT]; /* Type*/

            end
          end
        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT04T12.TARJCL[PT04WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT04W00.PT04WIXT = PT04W00.PT04WIXT + 1; /* Input table index*/

    end

  end

end // end PT04028

// late production sum rpt
Function PT04030()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT04032(); /* Format and display the map*/

  PT04033(); /* Check attention identifier*/

  PT04034(); /* Reset fields to normal intensity*/

  PT04035(); /* Verify the data that was entered*/

  PT04036(); /* Process valid input request*/


end // end PT04030

// Format and display the map
Function PT04032()
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  PT04M003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT04M003.XURDEST = TA6REC.XURDEST; /* Print destination*/
  PT04M003.XRODESC = TA6REC.XRODESC; /* Printer description*/
  PT04M003.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  PT04M003.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  PT04M003.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT04M003.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT04M003.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT04M003 alarm; /* Indicate sound alarm*/

  end

  converse PT04M003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PT04032

// Check attention identifier
Function PT04033()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PT04M003 initial; /* m005 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PT04W00.PT04MSEL[3] = " "; /* Indicate nothing happened*/
    COMMAREA.CAMSG = "NO ACTION TAKEN ON PREVIOUS SCREEN";

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "033"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PT04033

// Reset highlighted fields
Function PT04034()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/


end // end PT04034

// Verify the entered data
Function PT04035()

   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/


end // end PT04035

// Process valid input request
Function PT04036()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/
  PT04W00.PT04WIXT = 1;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03") /* if production system*/
    PT04037(); /* format production jcl*/
  else
    PT04038(); /* format test jcl*/
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "036"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PT04W00.PT04MSEL[3] = "*";
    COMMAREA.CAMSG = "CPOS (BY CUSTOMER CROSS REFERENCE) - SUBMITTED";

    set PT04M003 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end PT04036

// Process valid production jcl
Function PT04037()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT04T03.TARTYPE[PT04WIXT] == "W")
      if (PT04M003.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT71 FORMS=PT71,COPIES=1,DEST=RMT00";
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT71 FORMS=PT71,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
    else

      if (PT04T03.TARTYPE[PT04WIXT] == "F")
        if (PT04M003.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT71)'";
        else
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT71)'";
        end
      else

        if (PT04T03.TARTYPE[PT04WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

          set PT04W03 empty; /* Parameters work area*/

       /* load map fields to pt03w05 work record*/

          TA6REC.TARJCL[TA6INDEX] = PT04W03.TARJCL; /* Parameters*/

        else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = PT04T03.TARJCL[PT04WIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = PT04T03.TARTYPE[PT04WIXT]; /* Type*/

        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT04T03.TARJCL[PT04WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT04W00.PT04WIXT = PT04W00.PT04WIXT + 1; /* Input table index*/

    end

  end

end // end PT04037

// Process valid test jcl
Function PT04038()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT04T13.TARJCL[PT04WIXT] == "===OUTPUT===")
      if (PT04M003.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT71 FORMS=PT71,COPIES=1,DEST=RMT00";
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT71 FORMS=PT71,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
    else

      if (PT04T13.TARJCL[PT04WIXT] == "===FILE01===")
        if (PT04M003.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(2,,PT71)'";
        else
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(T,,PT71)'";
        end
      else

        if (PT04T13.TARTYPE[PT04WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

          set PT04W03 empty; /* Parameters work area*/

       /* load map fields to pt03w05 work record*/

          TA6REC.TARJCL[TA6INDEX] = PT04W03.TARJCL; /* Parameters*/

        else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = PT04T13.TARJCL[PT04WIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = PT04T13.TARTYPE[PT04WIXT]; /* Type*/

        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT04T13.TARJCL[PT04WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT04W00.PT04WIXT = PT04W00.PT04WIXT + 1; /* Input table index*/

    end

  end

end // end PT04038

// late production sum rpt
Function PT04040()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT04042(); /* Format and display the map*/

  PT04043(); /* Check attention identifier*/

  PT04044(); /* Reset fields to normal intensity*/

  PT04045(); /* Verify the data that was entered*/

  PT04046(); /* Process valid input request*/


end // end PT04040

// Format and display the map
Function PT04042()
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  PT04M004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT04M004.XURDEST = TA6REC.XURDEST; /* Print destination*/
  PT04M004.XRODESC = TA6REC.XRODESC; /* Printer description*/
  PT04M004.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  PT04M004.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  PT04M004.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT04M004.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT04M004.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT04M004 alarm; /* Indicate sound alarm*/

  end

  converse PT04M004 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PT04042

// Check attention identifier
Function PT04043()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PT04M004 initial; /* m005 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PT04W00.PT04MSEL[4] = " "; /* Indicate nothing happened*/
    COMMAREA.CAMSG = "NO ACTION TAKEN ON PREVIOUS SCREEN";

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "043"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PT04043

// Reset highlighted fields
Function PT04044()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/


end // end PT04044

// Verify the entered data
Function PT04045()

   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/


end // end PT04045

// Process valid input request
Function PT04046()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/
  PT04W00.PT04WIXT = 1;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03") /* if on production system*/
    PT04047(); /* format production jcl*/
  else
    PT04048(); /* format test jcl*/
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "046"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PT04W00.PT04MSEL[4] = "*";
    COMMAREA.CAMSG = "CPOS (BY PURCHASE ORDER ID)- SUBMITTED";
    return;

    set PT04M004 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end PT04046

// Process valid production jcl
Function PT04047()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT04T04.TARTYPE[PT04WIXT] == "W")
      if (PT04M004.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT61 FORMS=PT61,COPIES=1,DEST=RMT00";
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT61 FORMS=PT61,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
    else

      if (PT04T04.TARTYPE[PT04WIXT] == "F")
        if (PT04M004.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT61)'";
        else
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT61)'";
        end
      else

        if (PT04T04.TARTYPE[PT04WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

          set PT04W04 empty; /* Parameters work area*/

       /* load map fields to pt03w05 work record*/

          TA6REC.TARJCL[TA6INDEX] = PT04W04.TARJCL; /* Parameters*/

        else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = PT04T04.TARJCL[PT04WIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = PT04T04.TARTYPE[PT04WIXT]; /* Type*/

        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT04T04.TARJCL[PT04WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT04W00.PT04WIXT = PT04W00.PT04WIXT + 1; /* Input table index*/

    end

  end

end // end PT04047

// Process valid test jcl
Function PT04048()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT04T14.TARJCL[PT04WIXT] == "===OUTPUT===")
      if (PT04M004.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT61 FORMS=PT61,COPIES=1,DEST=RMT00";
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT61 FORMS=PT61,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
    else

      if (PT04T14.TARJCL[PT04WIXT] == "===FILE01===")
        if (PT04M004.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(2,,PT61)'";
        else
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(T,,PT61)'";
        end
      else

        if (PT04T14.TARTYPE[PT04WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

          set PT04W04 empty; /* Parameters work area*/

       /* load map fields to pt03w05 work record*/

          TA6REC.TARJCL[TA6INDEX] = PT04W04.TARJCL; /* Parameters*/

        else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = PT04T14.TARJCL[PT04WIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = PT04T14.TARTYPE[PT04WIXT]; /* Type*/

        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT04T14.TARJCL[PT04WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT04W00.PT04WIXT = PT04W00.PT04WIXT + 1; /* Input table index*/

    end

  end

end // end PT04048

// Report Request Menu
Function PT04990()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT04991(); /* Format and display the map*/

  PT04992(); /* Check attention identifier*/

  PT04993(); /* Reset fields to normal intensity*/

  PT04994(); /* Verify the data that was entered*/

  PT04995(); /* Process valid input request*/


end // end PT04990

// Format and display the map
Function PT04991()
   /* ------------------------------------------------------------*/
   /* call sub-routine to find which environment the program is*/
   /* executing in, development or ptoduction*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)         
  else
    converseLib.validationFailed(112); /* Error encountered with call*/
  end

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, format the map output area.*/
    /* ------------------------------------------------------------*/

    set PT04M099 initial; /* M099 input/output*/

    PT04W00.PT04WIXM = 1; /* Initialize map index*/

    while (PT04W00.PT04WIXM <= PT04W00.PT04WIXL) /* Until end of array*/

      PT04M099.PT04MSEL[PT04WIXM] = PT04W00.PT04MSEL[PT04WIXM];

      PT04W00.PT04WIXM = PT04W00.PT04WIXM + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PT04M099.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT04M099.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PT04M099.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT04M099.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT04M099.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT04M099 alarm; /* Indicate sound alarm*/

  end

  converse PT04M099 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PT04M099.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PT04M099.CAITEM; /* Application data*/


end // end PT04991

// Check attention identifier
Function PT04992()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PT04M099 initial; /* M099 input/output*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    PT04S99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSPT001(); /* Exit to another application*/

      set PT04M099.CATOAP cursor, bold; /* Highlight*/

    else

      PTWREC.XXXMODID = "992"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    PT04S99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to Production*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PT03M099"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PT0M"; /* TO application*/
    end

    XSPT001(); /* Exit to another application*/

    COMMAREA.CATOAP = " "; /* Clear TO application*/

    PT04S99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "992"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    PT04S99(); /* Exit to display map*/

  end


end // end PT04992

// Reset highlighted fields
Function PT04993()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  PT04W00.PT04WIXM = 1; /* Initialize index*/

  while (PT04W00.PT04WIXM <= PT04W00.PT04WIXL) /* Until all lines are reset*/

    set PT04M099.PT04MSEL[PT04WIXM] initialAttributes; /* Reset select field*/

    PT04W00.PT04WIXM = PT04W00.PT04WIXM + 1; /* Increment line index*/

  end

  set PT04M099.CATOAP initialAttributes; /* TO application*/
  set PT04M099.CAITEM initialAttributes; /* Application data*/


end // end PT04993

// Verify the entered data
Function PT04994()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PTWREC.XXXMODID = "994"; /* Module identification*/
    set PT04M099.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Check for proper select tag.*/
   /* ------------------------------------------------------------*/

  PT04W00.PT04WIXM = PT04W00.PT04WIXL; /* Initialize line index*/

  while (PT04W00.PT04WIXM > 0) /* Until all lines are verified*/

    /* ------------------------------------------------------------*/
     /* Indicate an error if the line was not selected properly.*/
    /* ------------------------------------------------------------*/

    if (PT04M099.PT04MSEL[PT04WIXM] != PT04W00.PT04MSEL[PT04WIXM]
     && PT04M099.PT04MSEL[PT04WIXM] != " " /* Line was selected*/
     && PT04M099.PT04MSEL[PT04WIXM] != "S") /* and not with an "S"*/

      PTWREC.XXXMODID = "994"; /* Module identification*/
      set PT04M099.PT04MSEL[PT04WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(13); /* Only "S" is valid*/

    end

    PT04W00.PT04WIXM = PT04W00.PT04WIXM - 1; /* Decrement line number*/

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PT04S99(); /* Exit to display map*/
  end


end // end PT04994

// Process valid input request
Function PT04995()
   /* ------------------------------------------------------------*/
   /* Save the selections in the working storage array.*/
   /* ------------------------------------------------------------*/

  move PT04M099.PT04MSEL to PT04W00.PT04MSEL[1] for all; /* Menu selections*/

   /* ------------------------------------------------------------*/
   /* If specify destination selected, indicate to subroutine to*/
   /* display output destination, but, do not submit any JCL.*/
   /* ------------------------------------------------------------*/

  if (PT04W00.PT04MSEL[1] == "S") /* Specify destination selected*/
    TA6REC.TA6SUBSW = "N"; /* Indicate do not submit JCL*/
  end


end // end PT04995

// select 's' dprodg.vsyclr01
Function PT04S21()
   /* ------------------------------------------------------------*/
   /* obtain style number dprodg.vsyclr01*/
   /* ------------------------------------------------------------*/

  PG2REC.XGPCD = COMMAREA.XGPCD;

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "S51"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(41); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DPRODG.VSYCLR01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT04S21

// date validation yymm
Function PT04S26()

   /* -----------------------------------------------------------;*/
    /* first delete the old row*/
   /* -----------------------------------------------------------;*/
  XZZREC.XZZQRYID = "PT4300"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/

  try
    call "IO1000" ("D ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* -----------------------------------------------------------;*/
    /* if delete didnt work bomb on out with ezeflo*/
   /* -----------------------------------------------------------;*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    PTWREC.XXXMODID = "S56"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


   /* -----------------------------------------------------------;*/
    /* then add the new row*/
   /* -----------------------------------------------------------;*/

  set XZZREC empty;

  XZZREC.XZZ1CHR1 = "R";
  XZZREC.XZZINT1 = PT04M002.PT04MLPD;
  XZZREC.XZZ2CHR1 = PT04M002.PT04MSCH;

  XZZREC.XZZQRYID = "PT4300"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/

  try
    call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* -----------------------------------------------------------;*/
    /* if add didnt work bomb on out with ezeflo*/
   /* -----------------------------------------------------------;*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    PTWREC.XXXMODID = "S56"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
    /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


end // end PT04S26

// Clear selections and exit
Function PT04S99()
   /* ------------------------------------------------------------*/
   /* Reset any pending selections in working storage.*/
   /* ------------------------------------------------------------*/

  PT04W00.PT04WIXM = 1; /* Initialize map index*/

  while (PT04W00.PT04WIXM <= PT04W00.PT04WIXL) /* Until end of array*/

    if (PT04W00.PT04MSEL[PT04WIXM] == "S") /* Entry is selected*/
      PT04W00.PT04MSEL[PT04WIXM] = " "; /* Reset entry*/
    end

    PT04W00.PT04WIXM = PT04W00.PT04WIXM + 1; /* Increment index*/

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the selection menu map.*/
   /* ------------------------------------------------------------*/

  exit stack; /* Exit to display map*/


end // end PT04S99

//*** RECORD=PT04W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PT04W00 type basicRecord
  10 PT04WERF PT04WERF ; 
  10 PT04WFOR PT04WFOR ; 
  10 PT04WJOB PT04WJOB ; 
  10 PT04MSEL PT04MSEL [7] ; 
  10 PT04WGRP PT04WGRP ; 
    15 PT04WPGC PT04WPGC ; 
    15 PT04WPLC PT04WPLC ; 
    15 PT04WPCC PT04WPCC ; 
  10 PT04WDT3 PT04WDT3 ; 
    15 PT04WDT1 PT04WDT1 ; 
    15 PT04WDT2 PT04WDT2 ; 
  10 PT04WRD2 PT04WRD2 ; 
  10 PT04WRD3 PT04WRD3 ; 
  10 PT04WRD4 PT04WRD4 ; 
  10 PT04WRD5 PT04WRD5 ; 
  10 PT04WRD6 PT04WRD6 ; 
  10 PT04WRD7 PT04WRD7 ; 
  10 PT04WIXL PT04WIXL ; 
  10 PT04WIXM PT04WIXM ; 
  10 PT04WIX2 PT04WIX2 ; 
  10 PT04WIXT PT04WIXT ; 
  10 PT04WSWX PT04WSWX ; 
end // end PT04W00

//*** RECORD=PT04W01 ****
// ------------------------------------------------------------
// Job and form identification variables in the JCL statements.
// ------------------------------------------------------------
// ***********************
Record PT04W01 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(4) ; 
    10 PT04W1JO PT04W1JO ; 
      15 PT04WRFO PT04WRFO ; 
    10 * char(3) ; 
    10 PT04WRPR PT04WRPR ; 
    10 * char(3) ; 
    10 PT04W3PR PT04W3PR ; 
    10 * char(1) ; 
    10 PT04W2PR PT04W2PR ; 
    10 * char(9) ; 
    10 PT04W4FI PT04W4FI ; 
    10 * char(50) ; 
  5 TARTYPE TARTYPE ; 
end // end PT04W01

//*** RECORD=PT04W02 ****
// ------------------------------------------------------------
// Parameters for pt???? - late production summary report
// ------------------------------------------------------------
// ***********************
Record PT04W02 type basicRecord
  5 TARJCL TARJCL ; 
    10 PT04MPRM PT04MPRM ; 
    10 PT04MLPD PT04MLPD ; 
    10 PT04MSCH PT04MSCH ; 
    10 * char(69) ; 
end // end PT04W02

//*** RECORD=PT04W03 ****
// ------------------------------------------------------------
// Parameters for pt???? - late production summary report
// ------------------------------------------------------------
// ***********************
Record PT04W03 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(80) ; 
end // end PT04W03

//*** RECORD=PT04W04 ****
// ------------------------------------------------------------
// Parameters for pt???? - late production summary report
// ------------------------------------------------------------
// ***********************
Record PT04W04 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(80) ; 
end // end PT04W04

DataItem PT04MLPD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT04MPRM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT04MSCH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Menu selection code
DataItem PT04MSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JOB job identification
DataItem PT04W1JO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// EXEC procedure identification
DataItem PT04W2PR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RUN program identification
DataItem PT04W3PR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PRINTDS file identification
DataItem PT04W4FI char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ccyymm part of above date
DataItem PT04WDT1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dd     part of above date
DataItem PT04WDT2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ccyymmdd date format
DataItem PT04WDT3 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem PT04WERF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forms code
DataItem PT04WFOR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pgc plc & pcc codes combined
DataItem PT04WGRP char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Secondary index for map fields
DataItem PT04WIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Limit for map fields index
DataItem PT04WIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PT04WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for table fields
DataItem PT04WIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Job identification
DataItem PT04WJOB char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product category code
DataItem PT04WPCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product type group code
DataItem PT04WPGC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product line code
DataItem PT04WPLC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request data switch for map 2
DataItem PT04WRD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request data switch for map 3
DataItem PT04WRD3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request data switch for map 4
DataItem PT04WRD4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request data switch for map 5
DataItem PT04WRD5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request data switch for map 6
DataItem PT04WRD6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request data switch for map 7
DataItem PT04WRD7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report distribution form
DataItem PT04WRFO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report distribution program
DataItem PT04WRPR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Exit requested switch
DataItem PT04WSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

