package pt0a;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pt.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PT0A ****
// ;-----------------------------------------------------------
// ;-----------------------------------------------------------
//  THE PURPOSE OF THIS APPLICATION IS TO ALLOW THE APPAREL
//  USER THE ABILITY TO MAINTAIN AND INQUIRE ON THE DATA NEEDED
//  FOR THE WORK IN PROCESS SYSTEMS.
//     MAP ONE ALLOWS THE USER TO ENTER CRITERIA TO SELECT
//  RECORDS FOR FURTHER WORK.  THIS MAP CONTAINS A PF KEY
//  WHICH THE USER MAY PRESS TO GO TO THE ADD FUNCTION OF
//  THIS APPLICATION.  THE ITEMS SELECTED ON MAP ONE WILL BE
//  PROCESSED ON MAP TWO.
//     MAP TWO HAS THREE FUNCTIONS WHICH IT SERVES.  THE FIRST
//  IS TO PROCESS ITEMS SELECTED ON MAP ONE AS READ ONLY, TO
//  BE VIEWED BY THE USER.  THE SECOND PURPOSE IS TO PROCESS
//  THE ITEMS SELECTED ON MAP ONE IN AN UPDATE MODE WHERE
//  THE USER MAY CHANGE THE WIP QUANTITY ON A PREVIOUSLY
//  ENTERED WIP RECORD.  THE THIRD AND LAST FUNCTION FOR
//  MAP TWO IS, FOR WIP ADDITIONS.  WHEN THE PF KEY FOR ADD
//  ON MAP ONE IS PRESSED, SCREEN TWO IS PRESENETD FOR THE USER
//  TO ADD A WIP RECORD.   THE MANY FUNCTIONS OF MAP TWO ARE
//  ACCOMPLISHED BY HIDEING THE FIELDS NOT NEEDED BY A
//  PARTICULAR FUNCTION.
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          10/01/89  SCOCHR  NEW APPLICATION.
//          01/11/91  lsutto  fix pageing
//          04/15/92  dbruih  set pg3rec empty in flow of
//                            xppt001.
// PT9999   11/09/93  MSMIT2  SET PTWREC EMPTY.
// Y2KFIX   12-09-97  ORICHA  Y2K MODIFICATIONS:  Add century
//                            windowing to pt0as14; zero fill
//                            cut date on m001.
// *********************
Program PT0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PT00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FY1REC FY1REC; // record
  PC3REC PC3REC; // record
  PC4REC PC4REC; // record
  PC6REC PC6REC; // record
  PC7REC PC7REC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  PT0AW01 PT0AW01; // record
  PT0AW02 PT0AW02; // record
  PTDREC PTDREC; // record
  PTWREC PTWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL {deleteAfterUse = yes}; // table
  use PT0AM.PT0AM001,  // forms
      PT0AM.PT0AM002, 
      PT0AM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPT001: XPPT001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set PT0AM001 initial; /* M001 input/output*/
    set PT0AM002 initial; /* M002 input/output*/
    set PT0AW01 empty; /* M001 display storage*/
    set PT0AW02 empty; /* M002 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set PCWREC empty;
    set PG2REC empty; /* PASS RECORD FOR IO3120*/
    set PG3REC empty; /* IO PASS RECORD FOR PG1050*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    set PTWREC empty; /* INITIALIZE COMMAREA WORK REC*/

    if (CAFRMSYS == "PC")
      PCWREC.CAUSERA = COMMAREA.CAUSERA;
      PT0AM001.PC3PONBR = PCWREC.PC3PONBR;
      PT0AM001.FY1FCTYC = PCWREC.FY1FCTYC;
      PT0AM001.SY1STNBR = PCWREC.SY1STNBR;
      PT0AM001.SY2CLRID = PCWREC.SY2CLRID;
      PT0AM001.XDMCD = PCWREC.XDMCD;
      set PT0AM001.SY1STNBR cursor, modified;
    end


     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    while (converseVar.eventKey not pa2) /* Converse the main process*/
      goto PT0A001;
    end

    PT0A001: PT0A001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    if (converseVar.eventKey not pa2)
      goto PT0A001; /* Converse the main process*/
    end

  end // end main
end // end PT0A

// Main process to display a map
Function PT0A001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Display the first map.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  PT0A100(); /* Display map 1*/



end // end PT0A001

// PROCESS FOR MAP 1
Function PT0A100()

   /* *****************************************************/
   /* * THIS PROCESS WILL SETUP MAP ONE FOR DISPLAY*/
   /* * AFTER THE CONVERSE IT WILL PROCESS THE PF KEYS*/
   /* * AND THE ENTERED DATA*/
   /* * IF THE ADD FUNCTION IS SPECIFIED,*/
   /* * IT WILL PERFORM THE ADD FUNCTION UNTIL*/
   /* * PF3 IS PRESSED*/
   /* *****************************************************/

  PT0AM001.XXXCURDT = VGVar.currentShortGregorianDate;

  PT0A110(); /* DISPLAY MAP ONE*/

  PT0A120(); /* CHECK ATTENTION IDENTIFIERS*/

  if (converseVar.eventKey is pf7)
    PT0A130(); /* UPDATE WORKING STORAGE SELECT*/
    PT0A131(); /* MOVE NEXT SECTION TO MAP*/
  end

  if (converseVar.eventKey is pf8)
    PT0A130(); /* UPDATE WORKING STORAGE SELECT*/
    PT0A132(); /* COMPUTE STARTING POINT FRO DATA MOVE*/
  end
end // end PT0A100

// CONVERSE MAP 1
Function PT0A110()
  converseLib.clearScreen();

  if (PT0AM001.PT0AWTPO[1] > 0)
    set PT0AM001.PT0AMSEL[1] cursor;

  end

  PT0AM001.XXXCURDT = VGVar.currentShortGregorianDate;
  converse PT0AM001 ;
end // end PT0A110

// CHECK ATTENTION IDENTIFIERS
Function PT0A120()
   /* *********************************************************/
   /* * THIS PROCESS WILL CHECK THE ATTENTION IDENTIFIERS**/
   /* * FROM CONVERSE OF MAP ONE**/
   /* * IF PF12 IS PRESSED THE ADD PROCESS WILL BE PERFORMED**/
   /* * UNTIL SUCH TIME AS PF3 IS PRESSED ON MAP TWO**/
   /* *********************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "FY0M";
    PT0AS01();

  end

  if (converseVar.eventKey is pf1)
    COMMAREA.CAITEM = "PT0AM001";
    PT0AS01();
  end

  if (converseVar.eventKey is pf4)
    PT0AS01();
  end

  if (converseVar.eventKey is pf12)
    if (COMMAREA.CAADDFL == "Y")
      PT0A200();
    else
      converseLib.validationFailed(103);
      return;
    end
  end

  if (converseVar.eventKey is pf13)
    if (PT0AM001.PC3PONBR > 0)
      PCWREC.PC3PONBR = PT0AM001.PC3PONBR;
      PCWREC.XGPCD = "03";
      if (PT0AM001.SY1STNBR > " ")
        PCWREC.SY1STNBR = PT0AM001.SY1STNBR;
        if (PT0AM001.SY2CLRID > " ")
          PCWREC.SY2CLRID = PT0AM001.SY2CLRID;
        end

        if (PT0AM001.XDMCD > " ")
          PCWREC.XDMCD = PT0AM001.XDMCD;
        end

      else
      end
    else
      set PCWREC empty;
      PCWREC.XGPCD = "03";
    end
    COMMAREA.CATOAP = "PC06";
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    PT0AS01();
    return;

  end
  if (PT0AM001.CATOAP > " ")
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = PT0AM001.CATOAP;
      COMMAREA.CAITEM = PT0AM001.CAITEM;
      PT0AS01();
    end
  end

  if (converseVar.eventKey is enter)
    if (PT0AM001.PC3PONBR is modified
     || PT0AM001.FY1FCTYC is modified
     || PT0AM001.SY1STNBR is modified
     || PT0AM001.SY2CLRID is modified
     || PT0AM001.XDMCD is modified)
      PT0A122(); /* CLEAR SCREEN 1 SELECT DATA*/
      PT0A140(); /* EDIT ENTERED DATA*/
      PT0AW01.PT0AWX2 = 0; /* INITIALIZE INDEX*/
      PT0A132(); /* SET DATA FOR SCREEN ONE*/
      return;
    end
    PT0A130();
    if (PT0AW02.PT0AWUPD == "Y")
      while (converseVar.eventKey not pf3)
        PT0A300();
      end
    else
      if (PT0AW02.PT0AWINQ == "Y")
        while (converseVar.eventKey not pf3)
          PT0A400();
        end
      else
        PT0AM001.VAGen_EZEMSG = "NO ROWS SELECTED FOR PROCESSING";
      end
    end
  end
end // end PT0A120

// CLEAR SELECT ORTION MAP 1
Function PT0A122()
   /* *************************************************************/
   /* *INITIAL WORKING STORAGE FOR MAP 1*/
   /* *CLEAR BOTTOM OF MAP 1*/
   /* **/
   /* **/
   /* ************************************************************/

  PT0AW01.PT0AWX3 = 0;

  while (PT0AW01.PT0AWX3 < 12)

    PT0AW01.PT0AWX3 = PT0AW01.PT0AWX3 + 1;
    set PT0AM001.PT0AMSEL[PT0AWX3] initialAttributes;
    PT0AM001.PT0AWTPO[PT0AWX3] = " ";
    PT0AM001.PT0AMFTC[PT0AWX3] = " ";
    PT0AM001.PT0AMSTM[PT0AWX3] = " ";
    PT0AM001.PT0AMLRD[PT0AWX3] = " ";
    PT0AM001.PT0AMTNM[PT0AWX3] = " ";
    PT0AM001.PT0AMRAB[PT0AWX3] = " ";
    PT0AM001.PT0AMXDM[PT0AWX3] = " ";
    PT0AM001.PT0AMDTE[PT0AWX3] = " ";
    PT0AM001.PT0AMTOT[PT0AWX3] = " ";

  end

  set PT0AW01 empty;

end // end PT0A122

// UPDATE SELECTS IN PT0AW01
Function PT0A130()
   /* **************************************************/
   /* * UPDATE WORKING STORAGE WITH SELECTS*/
   /* **************************************************/

  PT0AW01.PT0AWX3 = PT0AW01.PT0AWX2 - 12;

  if (PT0AW01.PT0AWX3 < 0)
    converseLib.validationFailed(2);
    PT0AW01.PT0AWX3 = 0;
  end

  PT0AW01.PT0AWX4 = 0;

  while (PT0AW01.PT0AWX3 < PT0AW01.PT0AWX2)

    PT0AW01.PT0AWX4 = PT0AW01.PT0AWX4 + 1;
    PT0AW01.PT0AWX3 = PT0AW01.PT0AWX3 + 1;

    if (PT0AM001.PT0AMSEL[PT0AWX4] == "I"
     || PT0AM001.PT0AMSEL[PT0AWX4] == "U"
     || PT0AM001.PT0AMSEL[PT0AWX4] == " ")
       /* NEXT SENTENCE*/
    else
      converseLib.validationFailed(70);
      PT0AM001.XXXMODID = "130";
      PT0AM002.XXXMODID = "130";
      set PT0AM001.PT0AMSEL[PT0AWX4] cursor, modified, bold;
    end

    PT0AW01.PT0AMSEL[PT0AWX3] = PT0AM001.PT0AMSEL[PT0AWX4];

    if (PT0AM001.PT0AMLRD[PT0AWX4] > "   ")
      set PT0AM001.PT0AMSEL[PT0AWX4] normal;
    end

    if (PT0AM001.PT0AMSEL[PT0AWX4] == "U")
      if (PT0AW02.PT0AWINQ == "Y")
        converseLib.validationFailed(69);
        set PT0AM001.PT0AMSEL[PT0AWX4] cursor, modified, bold;
      end

      PT0AW02.PT0AWUPD = "Y";
    end

    if (PT0AM001.PT0AMSEL[PT0AWX4] == "I")
      if (PT0AW02.PT0AWUPD == "Y")
        converseLib.validationFailed(69);
        set PT0AM001.PT0AMSEL[PT0AWX4] cursor, modified, bold;
      end

      PT0AW02.PT0AWINQ = "Y";
    end

    if (PT0AM001.PT0AMSEL[PT0AWX4] == "U"
     && COMMAREA.CACHGFL == "N")
      if (converseVar.validationMsgNum == 102)
        set PT0AM001.PT0AMSEL[PT0AWX4] modified, bold;
      else
        set PT0AM001.PT0AMSEL[PT0AWX4] cursor, modified, bold;
        converseLib.validationFailed(102);
      end
    end

  end

  if (converseVar.validationMsgNum > 0)
    exit stack;
  end

end // end PT0A130

// STARTING POINT FOR PF7 MAP 1
Function PT0A131()
   /* ***************************************************/
   /* * CALCULATE STARTING POINT FOR PF7*/
   /* ***************************************************/

  PT0AW01.PT0AWX2 = PT0AW01.PT0AWX2 - 24;

  if (PT0AW01.PT0AWX2 < 0)
    converseLib.validationFailed(2);
    PT0AW01.PT0AWX2 = 0;
  end

  PT0A132();

end // end PT0A131

// MOVE DATA TO MAP 1 FROM PT0W01
Function PT0A132()
   /* ******************************************************/
   /* * MOVE DATA TO MAP ONE FOR SELECT*/
   /* ******************************************************/

  if (PT0AW01.PT0AWX1 == 0)
    converseLib.validationFailed(18);
    set PT0AM001.SY1STNBR cursor, modified, bold;
    exit stack;
  end

  if (PT0AW01.PT0AWX2 >= PT0AW01.PT0AWX1)
    converseLib.validationFailed(42);
    PT0AM001.XXXMODID = "132";
    PT0AM002.XXXMODID = "132";
    return;
  end

  PT0AW01.PT0AWX3 = 0;

  while (PT0AW01.PT0AWX3 < 12)

    PT0AW01.PT0AWX3 = PT0AW01.PT0AWX3 + 1;

    PT0AW01.PT0AWX2 = PT0AW01.PT0AWX2 + 1;

    if (PT0AW01.SY2CLRID[PT0AWX2] > "   ")
      set PT0AM001.PT0AMSEL[PT0AWX3] normal;
      PT0AM001.PT0AMSTM[PT0AWX3] = PT0AM001.SY1STNBR;
      PT0AM001.PT0AMTNM[PT0AWX3] = PT0AM001.SY1SSTNM;
      PT0AM001.PT0AMSEL[PT0AWX3] = PT0AW01.PT0AMSEL[PT0AWX2];
      PT0AM001.PT0AWTPO[PT0AWX3] = PT0AW01.PT0AWTPO[PT0AWX2];
      PT0AM001.PT0AMFTC[PT0AWX3] = PT0AW01.PT0AMFTC[PT0AWX2];
      PT0AM001.PT0AMXDM[PT0AWX3] = PT0AW01.XDMCD[PT0AWX2];
      PT0AM001.PT0AMDTE[PT0AWX3] = PT0AW01.PTDCTDT[PT0AWX2];
      PT0AM001.PT0AMTOT[PT0AWX3] = PT0AW01.PT0AMTQT[PT0AWX2];
      PT0AM001.PT0AMLRD[PT0AWX3] = PT0AW01.SY2CLRID[PT0AWX2];
      if (PT0AM001.SY2CLRAB > " ")
        PT0AM001.PT0AMRAB[PT0AWX3] = PT0AM001.SY2CLRAB;
      else
        PG2REC.SY2CLRID = PT0AW01.SY2CLRID[PT0AWX2];
        PG2REC.XGPCD = "03";
        PG2REC.SY1STNBR = PT0AM001.SY1STNBR;
        PT0A510(); /* GET COLOR DESCRIPTION*/
        PT0AM001.PT0AMRAB[PT0AWX3] = PG2REC.SY2CLRAB;
      end
    else
      set PT0AM001.PT0AMSEL[PT0AWX3] protect, invisible;
      PT0AM001.PT0AMSTM[PT0AWX3] = " ";
      PT0AM001.PT0AMTNM[PT0AWX3] = " ";
      PT0AM001.PT0AMSEL[PT0AWX3] = " ";
      PT0AM001.PT0AWTPO[PT0AWX3] = " ";
      PT0AM001.PT0AMFTC[PT0AWX3] = " ";
      PT0AM001.PT0AMXDM[PT0AWX3] = " ";
      PT0AM001.PT0AMDTE[PT0AWX3] = 0;
      PT0AM001.PT0AMTOT[PT0AWX3] = 0;
      PT0AM001.PT0AMLRD[PT0AWX3] = " ";
      PT0AM001.PT0AMRAB[PT0AWX3] = " ";
    end

    if (PT0AW01.PT0AWX2 >= PT0AW01.PT0AWX1)
      converseLib.validationFailed(42);
    end

  end

end // end PT0A132

// EDIT MAP ONE ENTERED DATA
Function PT0A140()
   /* *******************************************************/
   /* *EDIT MAP ONE ENTERED DATA*/
   /* *-------------------------*/
   /* **/
   /* * P.O. NUMBER - IF ENTERED, MUST BE NUMERIC*/
   /* *               CSP WILL HANDLE.*/
   /* * FACTORY     - IF ENTERED MUST BE CHECKED AGAINST THE*/
   /* *               FACTORY DATABASE FOR DESCRIPTION*/
   /* * STYLE       - MUST BE ENTERED ALWAYS, WILL BE CHECKED*/
   /* *               FOR IN PRODUCT FILE*/
   /* * COLOR       - IF ENTERED MUST BE ON PRODUCT FILE*/
   /* * DIMENISON   - IF ENTERED MUST BE ON CORPORATE*/
   /* *               DIMENSION TABLE*/
   /* **/
   /* * IF ALL ENTERED DATA IS CORRECT, THE WIP TABLES WILL BE*/
   /* * READ FOR ALL MATCHING RECORDS*/
   /* ***********************************************************/

  PT0AM001.XXXMODID = " ";
  PT0AM001.XXXMODID = " ";
  if (PT0AM001.SY1STNBR > " ")
    PT0A141();
  else
    converseLib.validationFailed(28);
    set PT0AM001.SY1STNBR cursor, bold;
    PT0AM001.SY1SSTNM = " ";
    PT0AM001.XXXMODID = "140";
    PT0AM001.XXXMODID = "140";
    exit stack;
  end

  if (PT0AM001.XDMCD > " ")
    PT0A142();
  else
    PT0AM001.XDMABRV = " ";
  end

  if (PT0AM001.SY2CLRID > " ")
    /* NEXT SENTENCE;*/
  else
    PT0AM001.SY2CLRAB = " ";
  end

  if (PT0AM001.FY1FCTYC > " ")
    set PT0AM001.FY1FCTNM normal;
    set PT0AM001.FY1FCTYC normal;
    FY1REC.XGPCD = "03";
    FY1REC.FY1FCTYC = PT0AM001.FY1FCTYC;
    PT0A144();
    if (VAGen_SQLCODE == 0)
      PT0AM001.FY1FCTNM = FY1REC.FY1FCTNM;
    else
      set PT0AM001.FY1FCTYC cursor, modified, bold;
      PT0AM001.FY1FCTNM = " ";
      exit stack;
    end

  else
    PT0AM001.FY1FCTNM = " ";
  end

  PT0A145(); /* DECLARE CURSOR FOR WIP DATA BASE*/

  while (VAGen_SQLCODE == 0)
    PT0A146(); /* FETCH CURSOR FOR WIP DATA BASE*/
  end

  PT0A147(); /* CLOSE CURSOR FOR WIP DATA BASE*/

end // end PT0A140

// GET STYLE DESCRIPTIONS
Function PT0A141()
   /* ***************************************************/
   /* *  GET STYLE, COLOR DESCRIPTIONS AND MOVE TO MAP 1*/
   /* *  IF COLOR IS ENTERED*/
   /* *     CALL IO MOD WITH SELECT UNIQUE OPTION*/
   /* *  OTHERWISE*/
   /* *     CALL IO MOD WITH SELECT SCAN*/
   /* **/
   /* ****************************************************/

  PG2REC.SY1STNBR = PT0AM001.SY1STNBR;

  PG2REC.XGPCD = "03";
  PG2REC.XDMCD = "00";
  PG2REC.SY2CLRID = "*";

  if (PT0AM001.SY2CLRID > " ")
    PG2REC.SY2CLRID = PT0AM001.SY2CLRID;
    PT0A510();
    PT0AM001.SY1SSTNM = PG2REC.SY1SSTNM;
    PT0AM001.SY2CLRAB = PG2REC.SY2CLRAB;
    return;
  end

  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* STYLE CURSOR*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)

    PT0A148(); /* FETCH FIRST STYLE RECORD*/
    PT0A149(); /* CLOSE STYLE CURSOR*/
    return;

  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 100)

    converseLib.validationFailed(28);
    PT0AM001.XXXMODID = "141";
    PT0AM002.XXXMODID = "141";
    exit stack;

  end

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1LOC = "PT0A141 FETCH WIP CURSOR";
  TA1REC.TA1DBASE = "DPRODG";
  TA1REC.TA1TBLVU = "VSYCLR01";
  TA1REC.TA1TBLKE = PG2REC.PG2KEY;

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  PT0AM001.XXXMODID = "141";
  PT0AM002.XXXMODID = "141";
  exit stack;

end // end PT0A141

// GET DIMENSION DESCRIPTION
Function PT0A142()
   /* **************************************************/
   /* *  OBTAIN DIMENSION DESCRIPTION*/
   /* *  BY DOING TABLE SEARCH ON DIMENSION*/
   /* *  TABLE*/
   /* **/
   /* **************************************************/

  if (PT0AM001.XDMCD == "?")
    XPXX001(); /* PERFORM POP-UP INITIALIZATION*/
    XX0XW02.XX0XWHDR = "               DIMENSION";

    while (XX0XW02.XX0XWEND == "N")
      XPXDM01(); /* DIMENSION POPUP*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      PT0AM001.XDMCD = XDMTBL.XDMCD[XX0XWPIX];
      PT0AM001.XDMABRV = XDMTBL.XDMABRV[XX0XWPIX];
    else
      PT0AM001.XDMCD = " ";
      PT0AM001.XDMABRV = " ";
    end

    set PT0AM001.XDMCD initialAttributes;
    return;
  end

  if (PT0AM001.XDMCD in XDMTBL.XDMCD)
    PT0AM001.XDMABRV = XDMTBL.XDMABRV[sysVar.arrayIndex];
    return;
  else
    converseLib.validationFailed(30);
  end

end // end PT0A142

// GET FACTORY DESCRIPTION
Function PT0A144()
   /* *****************************************************/
   /* * GET FACTORY CODE DESCRIPTION*/
   /* **/
   /* *****************************************************/


  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)

    return;

  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 100)

    converseLib.validationFailed(68);
    PT0AM001.XXXMODID = "144";
    PT0AM002.XXXMODID = "144";
    return;

  end

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1LOC = "PT0A144 SELECT FACTORY  ";
  TA1REC.TA1DBASE = "DFCTY ";
  TA1REC.TA1TBLVU = "VFCTY001";
  TA1REC.TA1TBLKE = FY1REC.FY1KEY;

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  PT0AM001.XXXMODID = "144";
  PT0AM002.XXXMODID = "144";
  return;

end // end PT0A144

// DECLARE WIP CURSOR
Function PT0A145()
   /* ******************************************************/
   /* * DECLARE CURSOR BASED ON INPUT DATA*/
   /* **/
   /* **/
   /* * MOVE DATA FOR CURSOR DECLARATION*/
   /* *      FOR ALL WILD CARDS (DATA NOT ENTERED ON*/
   /* *      MAP ONE USE -1 FOR NUMERIC DATA*/
   /* *                   * FOR ALPHA DATA*/
   /* **/
   /* * OPEN CURSOR*/
   /* * IF CURSOR EMPTY*/
   /* *    MOVE WARNING MESSAGE TO EZEMSG AND REDISPLAY MAP*/
   /* **/
   /* ******************************************************/


  set PTDREC empty;

  if (PT0AM001.PC3PONBR > 0)
    PTDREC.PC3PONBR = PT0AM001.PC3PONBR;
  else
    PTDREC.PC3PONBR = -1;
  end

  if (PT0AM001.FY1FCTYC > " ")
    PTDREC.FY1FCTYC = PT0AM001.FY1FCTYC;
  else
    PTDREC.FY1FCTYC = "*";
  end

  PTDREC.SY1STNBR = PT0AM001.SY1STNBR;

  if (PT0AM001.SY2CLRID > " ")
    PTDREC.SY2CLRID = PT0AM001.SY2CLRID;
  else
    PTDREC.SY2CLRID = "*";
  end

  if (PT0AM001.XDMCD > " ")
    PTDREC.XDMCD = PT0AM001.XDMCD;
  else
    PTDREC.XDMCD = "*";
  end

  PTDREC.YPUCD = "OP";
  PTDREC.XGPCD = "03";

  try
    call "IO4580" ("S1", SQLCA, PTDREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)

    return;

  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 100)

    converseLib.validationFailed(18);
    /* GET STEVE*/
    PT0AM001.XXXMODID = "145";
    PT0AM002.XXXMODID = "145";
    exit stack;
  end

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1LOC = "PT0A145 DECLARE WIP CURSOR";
  TA1REC.TA1DBASE = "DPRODC";
  TA1REC.TA1TBLVU = "VPOWIP01";
  TA1REC.TA1TBLKE = PTDREC.PTDKEY;

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  PT0AM001.XXXMODID = "145";
  PT0AM002.XXXMODID = "145";
  exit stack;

end // end PT0A145

// FETCH WIP CURSOR
Function PT0A146()
   /* ************************************************/
   /* * FETCH WIP CURSOR*/
   /* **/
   /* *ADD EACH RECORD FETCHED TO TEMP STORAGE*/
   /* **/
   /* *IF SQLCODE NOT = 0 OR 100, FATAL ERROR*/
   /* **/
   /* **/
   /* ************************************************/

  try
    call "IO4580" ("N1", SQLCA, PTDREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)

    PT0A150(); /* ADD RECORD TO WORKING STORAGE*/
    return;

  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 100
   && PT0AW01.PT0AWX1 == 0)
    converseLib.validationFailed(18);

  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 100)

    return;

  end

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1LOC = "PT0A146 FETCH WIP CURSOR";
  TA1REC.TA1DBASE = "DPRODC";
  TA1REC.TA1TBLVU = "VPOWIP01";
  TA1REC.TA1TBLKE = PTDREC.PTDKEY;

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  PT0AM001.XXXMODID = "146";
  PT0AM002.XXXMODID = "146";
  exit stack;

end // end PT0A146

// CLOSE WIP CURSOR
Function PT0A147()
   /* ************************************************/
   /* * CLOSE WIP CURSOR*/
   /* **/
   /* * IF SQLCODE NOT = 0*/
   /* *   CONSIDER IT A FATAL ERROR*/
   /* **/
   /* ************************************************/

  try
    call "IO4580" ("C1", SQLCA, PTDREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)

    return;

  end

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1LOC = "PT0A147 CLOSE WIP CURSOR";
  TA1REC.TA1DBASE = "DPRODC";
  TA1REC.TA1TBLVU = "VPOWIP01";
  TA1REC.TA1TBLKE = PTDREC.PTDKEY;

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

   /* GET STEVE*/
  PT0AM001.XXXMODID = "147";
  PT0AM002.XXXMODID = "147";
  exit stack;

end // end PT0A147

// FETCH FIRST STYLE RECORD
Function PT0A148()
   /* *******************************************************/
   /* * FETCH FIRST STYLE/COLOR RECORD*/
   /* * THIS IS ONLY DONE WHEN NO COLOR SPECIFIED FOR SELECT*/
   /* *******************************************************/


  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* STYLE CURSOR*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)

    PT0AM001.SY1SSTNM = PG2REC.SY1SSTNM;
    return;

  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 100)

    converseLib.validationFailed(66);
    PT0AM001.XXXMODID = "148";
    PT0AM002.XXXMODID = "148";
    exit stack;

  end

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1LOC = "PT0A148 FETCH  STYLE ROW";
  TA1REC.TA1DBASE = "DPRODG";
  TA1REC.TA1TBLVU = "VSYCLR01";
  TA1REC.TA1TBLKE = PG2REC.PG2KEY;

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  PT0AM001.XXXMODID = "148";
  PT0AM002.XXXMODID = "148";
  exit stack;

end // end PT0A148

// CLOSE STYLE CURSOR
Function PT0A149()
   /* *******************************************************/
   /* * CLOSE CURSOR OPENED IN PT0A141*/
   /* *******************************************************/


  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* STYLE CURSOR*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)

    return;

  end


  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1LOC = "PT0A149 CLOSE  STYLE ROW";
  TA1REC.TA1DBASE = "DPRODG";
  TA1REC.TA1TBLVU = "VSYCLR01";
  TA1REC.TA1TBLKE = PG2REC.PG2KEY;

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  PT0AM001.XXXMODID = "149";
  PT0AM002.XXXMODID = "149";
  exit stack;

end // end PT0A149

// MOVE ITEMS FOR MAP 1 DISPLAY
Function PT0A150()
   /* ****************************************************/
   /* * WRITE LAST RECORD FETCHED TO WORKING STORAGE*/
   /* **/
   /* ****************************************************/

  if (PT0AW01.PT0AWX1 > 199)
    converseLib.validationFailed(67);
    PT0AM001.XXXMODID = "150";
    PT0AM002.XXXMODID = "150";
    exit stack;
  end

  PT0AW01.PT0AWX1 = PT0AW01.PT0AWX1 + 1;

  PT0AW01.PT0AMFTC[PT0AWX1] = PTDREC.FY1FCTYC;
  PT0AW01.SY2CLRID[PT0AWX1] = PTDREC.SY2CLRID;
  PT0AW01.PT0AWTPO[PT0AWX1] = PTDREC.PC3PONBR;
  PT0AW01.XDMCD[PT0AWX1] = PTDREC.XDMCD;
  PT0AW01.PTDCTDT[PT0AWX1] = PTDREC.PTDCTDT;
  PT0AW01.PT0AMTQT[PT0AWX1] = 0;

  PT0AW01.PT0AWX2 = 0;

  while (PT0AW01.PT0AWX2 < 40)

    PT0AW01.PT0AWX2 = PT0AW01.PT0AWX2 + 1;
    PT0AMTQT[PT0AWX1] = PT0AMTQT[PT0AWX1] + PTDREC.PTDCTQTY[PT0AWX2];

  end

end // end PT0A150

// SETUP FOR ADD ROUTINE
Function PT0A200()
   /* *************************************************************/
   /* * THIS PROCESS WILL SET UP THE APPLICATION TO PERFORM ADDS*/
   /* * UNTIL SUCH TIME AS PF3 IS PRESSED TO RETURN TO MAP 1*/
   /* *************************************************************/

  set PT0AM002 initial; /* INITIALIZE MAP2*/

  set PT0AM002.PC3PONBR cursor; /* PLACE CURSOR ON P.O. NUMBER*/
  PT0AM002.XDMCD = "00"; /* INITIALIZE DIMENSION CODE TO DEFAULT*/

  set PT0AW01 empty;
  set PT0AW02 empty;
  set PT0AM001 empty;

  while (converseVar.eventKey not pf3)

    PT0A210(); /* DISPLAY MAP 2*/

    PT0A220(); /* CHECK ATTENTION IDENTIFIERS*/

  end

  set PT0AM001.SY1STNBR cursor;

end // end PT0A200

// CONVERSE MAP 2
Function PT0A210()
  converseLib.clearScreen();

  PT0AM002.XXXCURDT = VGVar.currentShortGregorianDate;
  converse PT0AM002 ;
end // end PT0A210

// CHECK ATTENTION IDENTIFIERS
Function PT0A220()
   /* *********************************************************/
   /* * THIS PROCESS WILL CHECK THE ATTENTION IDENTIFIERS**/
   /* * FROM CONVERSE OF MAP TWO IN THE ADD PROCESS*/
   /* *********************************************************/

  if (converseVar.eventKey not pf9)

    PT0AWPF9 = "N";
  end

  if (converseVar.eventKey is pf3)
    return;

  end

  if (converseVar.eventKey is pf1)
    COMMAREA.CAITEM = "PT0AM002";
    PT0AS01();
  end

  if (converseVar.eventKey is pf4)
    PT0AS01();
  end

  if (converseVar.eventKey is pf13)
    if (PT0AM002.PC3PONBR > 0)
      PCWREC.PC3PONBR = PT0AM002.PC3PONBR;
      PCWREC.XGPCD = "03";
      if (PT0AM002.SY1STNBR > " ")
        PCWREC.SY1STNBR = PT0AM002.SY1STNBR;
        if (PT0AM002.SY2CLRID > " ")
          PCWREC.SY2CLRID = PT0AM002.SY2CLRID;
        end

        if (PT0AM002.XDMCD > " ")
          PCWREC.XDMCD = PT0AM002.XDMCD;
        end

      else
      end
    else
      set PCWREC empty;
      PCWREC.XGPCD = "03";
    end
    COMMAREA.CATOAP = "PC06";
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    PT0AS01();
    return;

  end
  if (PT0AM001.CATOAP > " ")
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = PT0AM001.CATOAP;
      COMMAREA.CAITEM = PT0AM001.CAITEM;
      PT0AS01();
    end
  end

  if (converseVar.eventKey is enter)
    if (PT0AM002.PC3PONBR is modified
     || PT0AM002.SY1STNBR is modified
     || PT0AM002.SY2CLRID is modified
     || PT0AM002.XDMCD is modified
     || PT0AM002.PT0AMMM is modified
     || PT0AM002.PT0AMDD is modified
     || PT0AM002.PT0AMYY is modified
     || PT0AWUPD == "N"
     || PT0AWPF9 == "Y")
      set PT0AW01 empty;
      set PT0AW02 empty;
      PT0AWUPD = "N";
      PT0AWPF9 = "N";
      PT0A501(); /* CLEAR SCREEN 1 SELECT DATA*/
      PT0A223(); /* EDIT ENTERED DATA*/
      return;
    else
      if (PT0AWUPD == "Y"
       && PT0AWPF9 == "N")
        PT0A230();
        return;
         /* SET MESSAGE TO PRESS PF9*/
      end
    end
  end

  if (converseVar.eventKey is pf9)
    if (PT0AWUPD == "Y")
      if (PT0AWPF9 == "Y")
        PT0AS14(); /* BUILD AND ADD WIP RECORD*/
        return;
      else
        converseLib.validationFailed(4);
        return;
      end
    else
      converseLib.validationFailed(4);
      return;
    end
  end
  converseLib.validationFailed(4);
end // end PT0A220

// CHECK ENTERED DATA TOP MAP 2
Function PT0A223()
   /* *******************************************************/
   /* * HERE WE WILL CHECK FOR EXISTANCE OF ENTERED DATA*/
   /* * IN THE P.O. SYSTEM, READ ALL ITEM SIZE DATA THAT*/
   /* * HAS SAME STYLE/COLOR/DIMENSION AND ACCUMULATE*/
   /* * DATA IN WORKING STORAGE*/
   /* * THEN THE WIP DATA BASE WILL BE READ AND ITS*/
   /* * QUANTITIES WILL BE TOTALED AND MOVED TO*/
   /* * THE MAP 2.*/
   /* * BEFORE ALL OF THIS HAPPENS, THE PROCESS WILL*/
   /* * GO OUT AND READ THE WIP DATA BASE TO SEE IF THERE*/
   /* * IS ALREADY A RECORD WITH THE ENTERED KEY*/
   /* ********************************************************/

  if (PT0AM002.XDMCD == "?")
    XPXX001(); /* PERFORM POP-UP INITIALIZATION*/
    XX0XW02.XX0XWHDR = "               DIMENSION";

    while (XX0XW02.XX0XWEND == "N")
      XPXDM01(); /* DIMENSION POPUP*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      PT0AM002.XDMCD = XDMTBL.XDMCD[XX0XWPIX];
    else
      PT0AM002.XDMCD = " ";
      PT0AM002.XDMCD = " ";
    end
  end


  if (PT0AM002.XDMCD in XDMTBL.XDMCD)
    PT0AM002.XDMABRV = XDMTBL.XDMABRV[sysVar.arrayIndex];
  else
    converseLib.validationFailed(30);
    set PT0AM002.XDMCD cursor, modified, bold;
    return;
  end


  set PT0AM002.PT0AMDD initialAttributes;
  if (PT0AM002.PT0AMDD < 1
   || PT0AM002.PT0AMDD > 31)
    converseLib.validationFailed(73);
    set PT0AM002.PT0AMDD cursor, modified, bold;
    return;
  end

  set PT0AM002.PT0AMMM initialAttributes;
  if (PT0AM002.PT0AMMM < 1
   || PT0AM002.PT0AMMM > 12)
    converseLib.validationFailed(72);
    set PT0AM002.PT0AMMM cursor, modified, bold;
    return;
  end

  set PG2REC empty;

  PG2REC.XGPCD = "03";
  PG2REC.SY1STNBR = PT0AM002.SY1STNBR;
  PG2REC.SY2CLRID = PT0AM002.SY2CLRID;
  PG2REC.XDMCD = PT0AM002.XDMCD;

  PT0A510(); /* GET STYLE/COLOR DESCRIPTIONS*/

  if (VAGen_SQLCODE == 100)
    set PT0AM002.SY1STNBR cursor, modified, bold;
    set PT0AM002.SY2CLRID modified, bold;
    PT0AM002.SY1SSTNM = " ";
    PT0AM002.SY2CLRAB = " ";
    return;
  else
    set PT0AM002.SY1STNBR initialAttributes;
    set PT0AM002.SY2CLRID initialAttributes;
    set PT0AM002.SY1SSTNM initialAttributes;
    set PT0AM002.SY2CLRID initialAttributes;
    PT0AM002.SY1SSTNM = PG2REC.SY1SSTNM;
    PT0AM002.SY2CLRAB = PG2REC.SY2CLRAB;
  end

  if (PT0AM002.PC3PONBR == 0)
    converseLib.validationFailed(71);
    set PT0AM002.PC3PONBR modified, bold;
    return;
  end

  set PT0AM002.PC3PONBR initialAttributes;

  PT0AS02(); /* GET PO HEADER*/

  if (converseVar.validationMsgNum > 0)
    return;
  end

  PT0AS03(); /* GET PO ORDER TYPE DESCRIPTION*/

  set FY1REC empty;
  FY1REC.FY1FCTYC = PT0AM002.FY1FCTYC;
  FY1REC.XGPCD = "03";

  PT0A144(); /* GET FACTORY DESCRIPTION*/

  if (VAGen_SQLCODE == 100)
    PT0AM002.FY1FCTNM = "UNKNOWN";
  else
    PT0AM002.FY1FCTNM = FY1REC.FY1FCTNM;
  end


  PT0AS04(); /* FETCH SPECIFIC WIP RECORD*/

  if (VAGen_SQLCODE == 0)
    set PT0AM002.SY1STNBR cursor, modified, bold;
    converseLib.validationFailed(74);
    return;
  end

  PT0A224(); /* SELECT AND BUILD WORKING STORAGE AND MAP*/
  PT0AWUPD = "Y"; /* PO RECORDS FOUND*/

end // end PT0A223

// BUILD DISPLAY DATA FOR MAP 2
Function PT0A224()
   /* ******************************************************/
   /* *  THIS PROCESS WILL SELECT THE PO SIZE QUANTITIES*/
   /* *  FOR THE KEY AS DEFINED IN UPPER PART OF MAP2*/
   /* *  AND STORE IN WORKING STORAGE*/
   /* **/
   /* *  THEN FETCH ALL OF THE WIP RECORDS FOR THE STYLE*/
   /* *  COLOR DIMENSION, PO. COMBINATION AND STORE IN*/
   /* *  WORKING STORAGE*/
   /* ******************************************************/


  PT0AS13(); /* DOES THIS PRODUCT EXIST IN PO*/

  if (converseVar.validationMsgNum > 0)
    return;
  end

  PT0AS06(); /* SETUP AND OPEN PO ITEM CURSOR*/

  if (converseVar.validationMsgNum > 0)
    return;
  end

  while (VAGen_SQLCODE == 0)
    PT0AS07(); /* FETCH PO ITEM CURSOR*/

    PT0AS08(); /* SETUP AND FETCH PO SIZE*/

  end

  PT0AS09(); /* CLOSE PO ITEM CURSOR*/

  if (converseVar.validationMsgNum > 0)
    return;
  end


  PT0AS10(); /* SETUP AND OPEN WIP CURSOR*/

  if (converseVar.validationMsgNum > 0)
    return;
  end

  while (VAGen_SQLCODE == 0)

    PT0AS11(); /* FETCH WIP CURSOR*/

  end

  PT0AS12(); /* CLOSE WIP CURSOR*/

  sysVar.arrayIndex = 0;
  PT0AWX4 = 0;

  set PG3REC empty; /* USED IN CALL TO PG1050*/

  PG3REC.PG3FUNCD = "IE"; /* FUNCTION CODE*/
  PG3REC.PG3DATFM = "C"; /* DATA FORMAT*/
  PG3REC.PG3XDVCD = "99"; /* HIGHEST DIVISION CODE ALLOWED*/
  PG3REC.SY1STNBR = PT0AM002.SY1STNBR; /* STYLE NUMBER*/
  PG3REC.SY2CLRID = PT0AM002.SY2CLRID; /* COLOR CODE*/
  PG3REC.XDMCD = PT0AM002.XDMCD; /* DIMENSION CODE*/
  PG3REC.XGPCD = "03";

  while (sysVar.arrayIndex < 40)
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
    if (PT0AW02.PT0AWPOQ[sysVar.arrayIndex] > 0)
      PT0AWX4 = PT0AWX4 + 1;
      PG3REC.SY5SZID[PT0AWX4] = sysVar.arrayIndex;
    end
  end

  XSPG301(); /* SIZE DESCRIPTION TRANSLATION*/

  if (sysVar.errorCode != "00000000") /* CICS RETURN CODE GOOD*/
    converseLib.validationFailed(10);
    return;
  end

  if (PG3REC.PG3RETCD > 5)
    converseLib.validationFailed(11);
    return;
  end

  PT0A225(); /* SETUP DATA ON SCREEN 2 FOR ADD*/
  set PT0AM002.PT0AMWPN cursor;

end // end PT0A224

// SETUP QTYS FOR ADD SCREEN 2
Function PT0A225()
   /* ----------------------------------------------*/
   /* THIS PROCESS WILL MOVE CONSTENT QUANTITIES*/
   /* TO MAP TWO FOR ADD FUNCTION*/
   /* THE SY5SZID IN PG3REC WILL DETERMINE HOW*/
   /* A FIELDS ATTRIBUTES ARE TO BE SET*/
   /* IF THE VALUE IS 0 THE FIELD WILL BE SET*/
   /* DARK AUTOSKIP OTHERWISE THE FIELD WILL BE*/
   /* SET DEFINED*/
   /* ----------------------------------------------*/

  sysVar.arrayIndex = 1;

  set PT0AM002.PT0AMTOT skip, invisible;
  PT0AM002.PT0AMTOP = 0;
  PT0AM002.PT0AMTOT = 0;
  PT0AM002.PT0AMTOS = 0;
  PT0AM002.PT0AMTON = 0;

  while (sysVar.arrayIndex <= 19)

    if (PG3REC.SY5SZID[sysVar.arrayIndex] > 0)
      PT0AM002.PT0AMSIZ[sysVar.arrayIndex] = PG3REC.SY4IDDSC[sysVar.arrayIndex];
      PT0AWX4 = PG3REC.SY5SZID[sysVar.arrayIndex];
      PT0AM002.PT0AMWPT[sysVar.arrayIndex] = PT0AW02.PT0AWIPQ[PT0AWX4];
      PT0AM002.PT0AMPOQ[sysVar.arrayIndex] = PT0AW02.PT0AWPOQ[PT0AWX4];
      set PT0AM002.PT0AMWPS[sysVar.arrayIndex] skip, invisible;
      set PT0AM002.PT0AMWPN[sysVar.arrayIndex] initialAttributes;
      PT0AMTOP = PT0AMTOP + PT0AW02.PT0AWPOQ[PT0AWX4];
      PT0AM002.PT0AMTOT = PT0AM002.PT0AMTOT + PT0AW02.PT0AWIPQ[PT0AWX4];
    else
      set PT0AM002.PT0AMSIZ[sysVar.arrayIndex] skip, invisible;
      set PT0AM002.PT0AMWPT[sysVar.arrayIndex] skip, invisible;
      set PT0AM002.PT0AMPOQ[sysVar.arrayIndex] skip, invisible;
      set PT0AM002.PT0AMWPS[sysVar.arrayIndex] skip, invisible;
      set PT0AM002.PT0AMWPN[sysVar.arrayIndex] skip, invisible;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  set PT0AM002.PT0AMTOT initialAttributes;
end // end PT0A225

// EDIT WIP ADD QTYS
Function PT0A230()
   /* ------------------------------------------------*/
   /* EDIT ENTERED WIP QUANTITIES*/

   /* NEW CUT QUANTITIES + EXISTING QUANTITIES*/
    /* CANNOT BE NEGATIVE*/
   /* ------------------------------------------------*/

  PT0AMTQT = 0;

  sysVar.arrayIndex = 19;

  while (sysVar.arrayIndex != 0)

    if (PG3REC.SY5SZID[sysVar.arrayIndex] > 0)
      set PT0AM002.PT0AMWPN[sysVar.arrayIndex] initialAttributes;
      PT0AWCQT = PT0AM002.PT0AMWPT[sysVar.arrayIndex] + PT0AM002.PT0AMWPN[sysVar.arrayIndex];
      PT0AMTQT = PT0AMTQT + PT0AM002.PT0AMWPN[sysVar.arrayIndex];

      if (PT0AWCQT < 0)
        set PT0AM002.PT0AMWPN[sysVar.arrayIndex] cursor, modified, bold;
        converseLib.validationFailed(76);
      end
    end

    sysVar.arrayIndex = sysVar.arrayIndex - 1;
  end

  if (converseVar.validationMsgNum > 0)
    PT0AWPF9 = "N";
  else
    PT0AWPF9 = "Y";
    converseLib.validationFailed(21);
  end

  PT0AM002.PT0AMTON = PT0AMTQT;

end // end PT0A230

// PROCESS SCREEN 2 FOR UPDATES
Function PT0A300()
   /* ----------------------------------------------*/
   /* PROCESS RECORDS FOR UPDATE*/
   /* ----------------------------------------------*/

  set PT0AM002.PC3PONBR skip;
  set PT0AM002.SY1STNBR skip;
  set PT0AM002.SY2CLRID skip;
  set PT0AM002.XDMCD skip;
  set PT0AM002.PT0AMMM skip;
  set PT0AM002.PT0AMDD skip;
  set PT0AM002.PT0AMYY skip;

  PT0AWX3 = 1;

  while (PT0AW01.PT0AMSEL[PT0AWX3] == " ")
    PT0AWX3 = PT0AWX3 + 1;
  end

  PT0A330(); /* SETUP DATA ON SCREEN 2*/

  while (converseVar.eventKey not pf3)
    PT0A210(); /* DISPLAY MAP2*/
    PT0A320(); /* CHECK ATTENTION IDENTIFIERS*/
  end
  set PT0AW01 empty;
  set PT0AW02 empty;
  set PT0AM001 initial;
  set PT0AM001.SY1STNBR cursor;
end // end PT0A300

// CHECK ATTENTION IDENTIFIERS
Function PT0A320()
   /* *********************************************************/
   /* * THIS PROCESS WILL CHECK THE ATTENTION IDENTIFIERS**/
   /* * FROM CONVERSE OF MAP TWO IN THE UPDATE PROCESS*/
   /* *********************************************************/

  if (converseVar.eventKey not pf9)

    PT0AWPF9 = "N";
  end

  if (converseVar.eventKey is pf3)
    return;

  end

  if (converseVar.eventKey is pf1)
    COMMAREA.CAITEM = "PT0AM002";
    PT0AS01();
  end

  if (converseVar.eventKey is pf7)
    PT0AWUPD = "N";
    move PT0AWX6 to PT0AWX3 withV60Compat;
    while (PT0AWUPD != "Y")
      if (PT0AWX3 <= 1)
        converseLib.validationFailed(77);
        PT0AWUPD = "Y";
      else
        PT0AWX3 = PT0AWX3 - 1;

        if (PT0AW01.PT0AMSEL[PT0AWX3] > " ")
          PT0AWUPD = "Y";
          PT0A330();
        end
      end

    end
    return;
  end

  if (converseVar.eventKey is pf8)
    PT0AWUPD = "N";
    move PT0AWX6 to PT0AWX3 withV60Compat;
    while (PT0AWUPD != "Y")
      if (PT0AWX3 >= 199)
        converseLib.validationFailed(78);
        PT0AWUPD = "Y";
      else
        PT0AWX3 = PT0AWX3 + 1;

        if (PT0AW01.PT0AMSEL[PT0AWX3] > " ")
          PT0AWUPD = "Y";
          PT0A330();
        end
      end
    end
    return;
  end

  if (converseVar.eventKey is pf4)
    PT0AS01();
  end

  if (converseVar.eventKey is pf13)
    if (PT0AM002.PC3PONBR > 0)
      PCWREC.PC3PONBR = PT0AM002.PC3PONBR;
      PCWREC.XGPCD = "03";
      if (PT0AM002.SY1STNBR > " ")
        PCWREC.SY1STNBR = PT0AM002.SY1STNBR;
        if (PT0AM002.SY2CLRID > " ")
          PCWREC.SY2CLRID = PT0AM002.SY2CLRID;
        end

        if (PT0AM002.XDMCD > " ")
          PCWREC.XDMCD = PT0AM002.XDMCD;
        end

      else
      end
    else
      set PCWREC empty;
      PCWREC.XGPCD = "03";
    end
    COMMAREA.CATOAP = "PC06";
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    PT0AS01();
    return;

  end
  if (PT0AM001.CATOAP > " ")
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = PT0AM001.CATOAP;
      COMMAREA.CAITEM = PT0AM001.CAITEM;
      PT0AS01();
    end
  end

  if (converseVar.eventKey is enter)
    set PT0AW02 empty;
    PT0AWPF9 = "N";
    PT0A340(); /* EDIT ENTERED DATA*/
    return;
  else
  end

  if (converseVar.eventKey is pf9)
    if (PT0AWPF9 == "Y")
      PT0AS15(); /* BUILD AND UPDATE WIP RECORD*/
      return;
    else
      converseLib.validationFailed(4);
      return;
    end
  end
  converseLib.validationFailed(4);
end // end PT0A320

// BUILD MAP 2 DATA
Function PT0A330()
   /* -------------------------------------------*/
    /* MOVE DATA FROM WORKING STORAGE TO TOP*/
    /* OF MAP 2*/
   /* -----------------*/
   /* GET DATA AND DISPLAY ON BOTTOM OF MAP2*/
   /* -------------------------------------------*/

  move PT0AWX3 to PT0AWX6 withV60Compat;
  PT0AM002.PC3PONBR = PT0AW01.PT0AWTPO[PT0AWX3];
  PT0AM002.SY1STNBR = PT0AM001.SY1STNBR;
  PT0AM002.SY2CLRID = PT0AW01.SY2CLRID[PT0AWX3];
  PT0AM002.XDMCD = PT0AW01.XDMCD[PT0AWX3];
  PT0AW02.PT0AWDT = PT0AW01.PTDCTDT[PT0AWX3];
  PT0AM002.PT0AMYY = PT0AW02.PT0AMYY;
  PT0AM002.PT0AMMM = PT0AW02.PT0AMMM;
  PT0AM002.PT0AMDD = PT0AW02.PT0AMDD;

  PT0A501(); /* CLEAR BOTTOM OF SCREEN 2*/
  PT0A332(); /* CHECK ENTERED DATA*/
  PT0A331(); /* BUILD SELECTED WIP DATA MAP 2*/

end // end PT0A330

// BUILD SELECTED WIP DATA MAP 2
Function PT0A331()
   /* ----------------------------------------------*/
   /* THIS PROCESS WILL MOVE CONSTENT QUANTITIES*/
   /* TO MAP TWO FOR ADD FUNCTION*/
   /* THE SY5SZID IN PG3REC WILL DETERMINE HOW*/
   /* A FIELDS ATTRIBUTES ARE TO BE SET*/
   /* IF THE VALUE IS 0 THE FIELD WILL BE SET*/
   /* DARK AUTOSKIP OTHERWISE THE FIELD WILL BE*/
   /* SET DEFINED*/
   /* ----------------------------------------------*/

  sysVar.arrayIndex = 1;

  PT0AS04(); /* CALL WIP DATABASE UNIQUE*/

  while (sysVar.arrayIndex <= 19)

    if (PG3REC.SY5SZID[sysVar.arrayIndex] > 0)
      PT0AWX4 = PG3REC.SY5SZID[sysVar.arrayIndex];
      PT0AM002.PT0AMWPS[sysVar.arrayIndex] = PTDREC.PTDCTQTY[PT0AWX4];
      set PT0AM002.PT0AMWPS[sysVar.arrayIndex] initialAttributes;
      PT0AMTOS = PT0AMTOS + PTDREC.PTDCTQTY[PT0AWX4];
    else
      set PT0AM002.PT0AMWPS[sysVar.arrayIndex] skip, invisible;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  set PT0AM002.PT0AMTOS initialAttributes;
end // end PT0A331

// BUILD TOTALS UPDATE MAP2
Function PT0A332()
   /* *******************************************************/
   /* * HERE WE WILL CHECK FOR EXISTANCE OF ENTERED DATA*/
   /* * IN THE P.O. SYSTEM, READ ALL ITEM SIZE DATA THAT*/
   /* * HAS SAME STYLE/COLOR/DIMENSION AND ACCUMULATE*/
   /* * DATA IN WORKING STORAGE*/
   /* * THEN THE WIP DATA BASE WILL BE READ AND ITS*/
   /* * QUANTITIES WILL BE TOTALED AND MOVED TO*/
   /* * THE MAP 2.*/
   /* ********************************************************/


  set PT0AM002.PT0AMDD initialAttributes;
  if (PT0AM002.PT0AMDD < 1
   || PT0AM002.PT0AMDD > 31)
    converseLib.validationFailed(73);
    set PT0AM002.PT0AMDD cursor, modified, bold;
    return;
  end

  set PT0AM002.PT0AMMM initialAttributes;
  if (PT0AM002.PT0AMMM < 1
   || PT0AM002.PT0AMMM > 12)
    converseLib.validationFailed(72);
    set PT0AM002.PT0AMMM cursor, modified, bold;
    return;
  end

  if (PT0AM002.XDMCD in XDMTBL.XDMCD)
    PT0AM002.XDMABRV = XDMTBL.XDMABRV[sysVar.arrayIndex];
  else
    converseLib.validationFailed(30);
    set PT0AM002.XDMCD cursor, modified, bold;
    return;
  end

  set PG2REC empty;

  PG2REC.XGPCD = "03";
  PG2REC.SY1STNBR = PT0AM002.SY1STNBR;
  PG2REC.SY2CLRID = PT0AM002.SY2CLRID;
  PG2REC.XDMCD = PT0AM002.XDMCD;

  PT0A510(); /* GET STYLE/COLOR DESCRIPTIONS*/

  if (VAGen_SQLCODE == 100)
    set PT0AM002.SY1STNBR cursor, modified, bold;
    set PT0AM002.SY2CLRID modified, bold;
    PT0AM002.SY1SSTNM = " ";
    PT0AM002.SY2CLRAB = " ";
    return;
  else
    set PT0AM002.SY1STNBR initialAttributes;
    set PT0AM002.SY2CLRID initialAttributes;
    set PT0AM002.SY1SSTNM initialAttributes;
    set PT0AM002.SY2CLRID initialAttributes;
    PT0AM002.SY1SSTNM = PG2REC.SY1SSTNM;
    PT0AM002.SY2CLRAB = PG2REC.SY2CLRAB;
  end

  if (PT0AM002.PC3PONBR == 0)
    converseLib.validationFailed(71);
    set PT0AM002.PC3PONBR modified, bold;
    return;
  end

  set PT0AM002.PC3PONBR initialAttributes;

  PT0AS02(); /* GET PO HEADER*/

  if (converseVar.validationMsgNum > 0)
    return;
  end

  PT0AS03(); /* GET PO ORDER TYPE DESCRIPTION*/

  set FY1REC empty;
  FY1REC.FY1FCTYC = PT0AM002.FY1FCTYC;
  FY1REC.XGPCD = "03";

  PT0A144(); /* GET FACTORY DESCRIPTION*/

  if (VAGen_SQLCODE == 100)
    PT0AM002.FY1FCTNM = "UNKNOWN";
  else
    PT0AM002.FY1FCTNM = FY1REC.FY1FCTNM;
  end


  PT0A224(); /* SELECT AND BUILD WORKING STORAGE AND MAP*/
  PT0AWUPD = "Y"; /* PO RECORDS FOUND*/

end // end PT0A332

// EDIT WIP CHANGE QUANTITIES
Function PT0A340()
   /* GET PT0A230*/
   /* ------------------------------------------------*/
   /* EDIT ENTERED WIP QUANTITIES*/

   /* NEW CUT QUANTITIES + EXISTING QUANTITIES*/
    /* CANNOT BE NEGATIVE*/
   /* ------------------------------------------------*/

  PT0AMTQT = 0;

  sysVar.arrayIndex = 19;

  while (sysVar.arrayIndex != 0)

    if (PG3REC.SY5SZID[sysVar.arrayIndex] > 0)
      set PT0AM002.PT0AMWPN[sysVar.arrayIndex] initialAttributes;
      PT0AWCQT = PT0AMWPT[sysVar.arrayIndex] + PT0AMWPN[sysVar.arrayIndex] - PT0AMWPS[sysVar.arrayIndex];
      PT0AMTQT = PT0AMTQT + PT0AM002.PT0AMWPN[sysVar.arrayIndex];

      if (PT0AWCQT < 0)
        set PT0AM002.PT0AMWPN[sysVar.arrayIndex] cursor, modified, bold;
        converseLib.validationFailed(76);
      end
    end

    sysVar.arrayIndex = sysVar.arrayIndex - 1;
  end

  if (converseVar.validationMsgNum > 0)
    PT0AWPF9 = "N";
  else
    PT0AWPF9 = "Y";
    converseLib.validationFailed(21);
  end

  PT0AM002.PT0AMTON = PT0AMTQT;

end // end PT0A340

// PROCESS SCREEN 2 FOR INQUIRY
Function PT0A400()
   /* ----------------------------------------------*/
   /* PROCESS RECORDS FOR UPDATE*/
   /* ----------------------------------------------*/

  set PT0AM002.PC3PONBR skip;
  set PT0AM002.SY1STNBR skip;
  set PT0AM002.SY2CLRID skip;
  set PT0AM002.XDMCD skip;
  set PT0AM002.PT0AMMM skip;
  set PT0AM002.PT0AMDD skip;
  set PT0AM002.PT0AMYY skip;

  PT0AWX3 = 1;

  while (PT0AW01.PT0AMSEL[PT0AWX3] == " ")
    PT0AWX3 = PT0AWX3 + 1;
  end

  PT0A430(); /* SETUP DATA ON SCREEN 2*/

  while (converseVar.eventKey not pf3)
    PT0A210(); /* DISPLAY MAP2*/
    PT0A420(); /* CHECK ATTENTION IDENTIFIERS*/
  end
  set PT0AW01 empty;
  set PT0AW02 empty;
  set PT0AM001 initial;
  set PT0AM001.SY1STNBR cursor;
end // end PT0A400

// CHECK ATTENTION IDENTIFIERS
Function PT0A420()
   /* *********************************************************/
   /* * THIS PROCESS WILL CHECK THE ATTENTION IDENTIFIERS**/
   /* * FROM CONVERSE OF MAP TWO IN THE INQUIRY PROCESS*/
   /* *********************************************************/

  if (converseVar.eventKey is pf3)
    return;

  end

  if (converseVar.eventKey is pf1)
    COMMAREA.CAITEM = "PT0AM002";
    PT0AS01();
  end

  if (converseVar.eventKey is pf7)
    PT0AWUPD = "N";
    move PT0AWX6 to PT0AWX3 withV60Compat;
    while (PT0AWUPD != "Y")
      if (PT0AWX3 <= 1)
        converseLib.validationFailed(77);
        PT0AWUPD = "Y";
      else
        PT0AWX3 = PT0AWX3 - 1;

        if (PT0AW01.PT0AMSEL[PT0AWX3] > " ")
          PT0AWUPD = "Y";
          PT0A430();
        end
      end

    end
    return;
  end

  if (converseVar.eventKey is pf8)
    PT0AWUPD = "N";
    move PT0AWX6 to PT0AWX3 withV60Compat;
    while (PT0AWUPD != "Y")
      if (PT0AWX3 >= 199)
        converseLib.validationFailed(78);
        PT0AWUPD = "Y";
      else
        PT0AWX3 = PT0AWX3 + 1;

        if (PT0AW01.PT0AMSEL[PT0AWX3] > " ")
          PT0AWUPD = "Y";
          PT0A430();
        end
      end
    end
    return;
  end

  if (converseVar.eventKey is pf4)
    PT0AS01();
  end

  if (converseVar.eventKey is pf13)
    if (PT0AM002.PC3PONBR > 0)
      PCWREC.PC3PONBR = PT0AM002.PC3PONBR;
      PCWREC.XGPCD = "03";
      if (PT0AM002.SY1STNBR > " ")
        PCWREC.SY1STNBR = PT0AM002.SY1STNBR;
        if (PT0AM002.SY2CLRID > " ")
          PCWREC.SY2CLRID = PT0AM002.SY2CLRID;
        end

        if (PT0AM002.XDMCD > " ")
          PCWREC.XDMCD = PT0AM002.XDMCD;
        end

      else
      end
    else
      set PCWREC empty;
      PCWREC.XGPCD = "03";
    end
    COMMAREA.CATOAP = "PC06";
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    PT0AS01();
    return;

  end
  if (PT0AM001.CATOAP > " ")
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = PT0AM001.CATOAP;
      COMMAREA.CAITEM = PT0AM001.CAITEM;
      PT0AS01();
    end
  end

  if (converseVar.eventKey is enter)
    PT0AWUPD = "N";
    move PT0AWX6 to PT0AWX3 withV60Compat;
    while (PT0AWUPD != "Y")
      if (PT0AWX3 >= 199)
        converseLib.validationFailed(78);
        PT0AWUPD = "Y";
      else
        PT0AWX3 = PT0AWX3 + 1;

        if (PT0AW01.PT0AMSEL[PT0AWX3] > " ")
          PT0AWUPD = "Y";
          PT0A430();
        end
      end
    end
    return;
  end

  converseLib.validationFailed(4);
end // end PT0A420

// MOVE DATA TO MAP 2
Function PT0A424()
   /* GET PT0A224*/
   /* ******************************************************/
   /* *  THIS PROCESS WILL SELECT THE PO SIZE QUANTITIES*/
   /* *  FOR THE KEY AS DEFINED IN UPPER PART OF MAP2*/
   /* *  AND STORE IN WORKING STORAGE*/
   /* **/
   /* *  THEN FETCH ALL OF THE WIP RECORDS FOR THE STYLE*/
   /* *  COLOR DIMENSION, PO. COMBINATION AND STORE IN*/
   /* *  WORKING STORAGE*/
   /* ******************************************************/


  PT0AS13(); /* DOES THIS PRODUCT EXIST IN PO*/

  if (converseVar.validationMsgNum > 0)
    return;
  end

  PT0AS06(); /* SETUP AND OPEN PO ITEM CURSOR*/

  if (converseVar.validationMsgNum > 0)
    return;
  end

  while (VAGen_SQLCODE == 0)
    PT0AS07(); /* FETCH PO ITEM CURSOR*/

    PT0AS08(); /* SETUP AND FETCH PO SIZE*/

  end

  PT0AS09(); /* CLOSE PO ITEM CURSOR*/

  if (converseVar.validationMsgNum > 0)
    return;
  end


  PT0AS10(); /* SETUP AND OPEN WIP CURSOR*/

  if (converseVar.validationMsgNum > 0)
    return;
  end

  while (VAGen_SQLCODE == 0)

    PT0AS11(); /* FETCH WIP CURSOR*/

  end

  PT0AS12(); /* CLOSE WIP CURSOR*/

  sysVar.arrayIndex = 0;
  PT0AWX4 = 0;

  set PG3REC empty; /* USED IN CALL TO PG1050*/

  PG3REC.PG3FUNCD = "IE"; /* FUNCTION CODE*/
  PG3REC.PG3DATFM = "C"; /* DATA FORMAT*/
  PG3REC.PG3XDVCD = "99"; /* HIGHEST DIVISION CODE ALLOWED*/
  PG3REC.SY1STNBR = PT0AM002.SY1STNBR; /* STYLE NUMBER*/
  PG3REC.SY2CLRID = PT0AM002.SY2CLRID; /* COLOR CODE*/
  PG3REC.XDMCD = PT0AM002.XDMCD; /* DIMENSION CODE*/
  PG3REC.XGPCD = "03";

  while (sysVar.arrayIndex < 40)
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
    if (PT0AW02.PT0AWPOQ[sysVar.arrayIndex] > 0)
      PT0AWX4 = PT0AWX4 + 1;
      PG3REC.SY5SZID[PT0AWX4] = sysVar.arrayIndex;
    end
  end

  XSPG301(); /* SIZE DESCRIPTION TRANSLATION*/

  if (sysVar.errorCode != "00000000") /* CICS RETURN CODE GOOD*/
    converseLib.validationFailed(10);
    return;
  end

  if (PG3REC.PG3RETCD > 5)
    converseLib.validationFailed(11);
    return;
  end

  PT0A425(); /* MOVE DATA TO SCREEN 2 FOR INQUIRY*/
  set PT0AM002.CATOAP cursor;

end // end PT0A424

// SETUP SCREEN 2 FOR INQUIRY
Function PT0A425()
   /* ----------------------------------------------*/
   /* THIS PROCESS WILL MOVE CONSTENT QUANTITIES*/
   /* TO MAP TWO FOR ADD FUNCTION*/
   /* THE SY5SZID IN PG3REC WILL DETERMINE HOW*/
   /* A FIELDS ATTRIBUTES ARE TO BE SET*/
   /* IF THE VALUE IS 0 THE FIELD WILL BE SET*/
   /* DARK AUTOSKIP OTHERWISE THE FIELD WILL BE*/
   /* SET DEFINED*/
   /* ----------------------------------------------*/

  sysVar.arrayIndex = 1;

  set PT0AM002.PT0AMTOT skip, invisible;
  PT0AM002.PT0AMTOP = 0;
  PT0AM002.PT0AMTOT = 0;
  PT0AM002.PT0AMTOS = 0;
  PT0AM002.PT0AMTON = 0;

  while (sysVar.arrayIndex <= 19)

    if (PG3REC.SY5SZID[sysVar.arrayIndex] > 0)
      PT0AM002.PT0AMSIZ[sysVar.arrayIndex] = PG3REC.SY4IDDSC[sysVar.arrayIndex];
      PT0AWX4 = PG3REC.SY5SZID[sysVar.arrayIndex];
      PT0AM002.PT0AMWPT[sysVar.arrayIndex] = PT0AW02.PT0AWIPQ[PT0AWX4];
      PT0AM002.PT0AMPOQ[sysVar.arrayIndex] = PT0AW02.PT0AWPOQ[PT0AWX4];
      set PT0AM002.PT0AMWPS[sysVar.arrayIndex] initialAttributes;
      set PT0AM002.PT0AMWPN[sysVar.arrayIndex] skip, invisible;
      PT0AMTOP = PT0AMTOP + PT0AW02.PT0AWPOQ[PT0AWX4];
      PT0AM002.PT0AMTOT = PT0AM002.PT0AMTOT + PT0AW02.PT0AWIPQ[PT0AWX4];
    else
      set PT0AM002.PT0AMSIZ[sysVar.arrayIndex] skip, invisible;
      set PT0AM002.PT0AMWPT[sysVar.arrayIndex] skip, invisible;
      set PT0AM002.PT0AMPOQ[sysVar.arrayIndex] skip, invisible;
      set PT0AM002.PT0AMWPS[sysVar.arrayIndex] skip, invisible;
      set PT0AM002.PT0AMWPN[sysVar.arrayIndex] skip, invisible;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  set PT0AM002.PT0AMTOT initialAttributes;
  set PT0AM002.PT0AMTON skip, invisible;

end // end PT0A425

// MOVE DATA TO MAP2 FOR INQUIRY
Function PT0A430()
   /* -------------------------------------------*/
    /* MOVE DATA FROM WORKING STORAGE TO TOP*/
    /* OF MAP 2*/
   /* -----------------*/
   /* GET DATA AND DISPLAY ON BOTTOM OF MAP2*/
   /* -------------------------------------------*/

  move PT0AWX3 to PT0AWX6 withV60Compat;
  PT0AM002.PC3PONBR = PT0AW01.PT0AWTPO[PT0AWX3];
  set PT0AM002.PC3PONBR skip;
  set PT0AM002.CATOAP cursor;
  PT0AM002.SY1STNBR = PT0AM001.SY1STNBR;
  set PT0AM002.SY1STNBR skip;
  PT0AM002.SY2CLRID = PT0AW01.SY2CLRID[PT0AWX3];
  set PT0AM002.SY2CLRID skip;
  PT0AM002.XDMCD = PT0AW01.XDMCD[PT0AWX3];
  set PT0AM002.XDMCD skip;
  PT0AW02.PT0AWDT = PT0AW01.PTDCTDT[PT0AWX3];
  PT0AM002.PT0AMYY = PT0AW02.PT0AMYY;
  set PT0AM002.PT0AMYY skip;
  PT0AM002.PT0AMMM = PT0AW02.PT0AMMM;
  set PT0AM002.PT0AMMM skip;
  PT0AM002.PT0AMDD = PT0AW02.PT0AMDD;
  set PT0AM002.PT0AMDD skip;

  PT0A501(); /* CLEAR BOTTOM OF SCREEN 2*/
  PT0A432(); /* CHECK ENTERED DATA*/
  PT0A331(); /* BUILD SELECTED WIP DATA MAP 2*/

end // end PT0A430

// VERIFY DATA TOP MAP 2
Function PT0A432()
   /* GET PT0A332*/
   /* *******************************************************/
   /* * HERE WE WILL CHECK FOR EXISTANCE OF ENTERED DATA*/
   /* * IN THE P.O. SYSTEM, READ ALL ITEM SIZE DATA THAT*/
   /* * HAS SAME STYLE/COLOR/DIMENSION AND ACCUMULATE*/
   /* * DATA IN WORKING STORAGE*/
   /* * THEN THE WIP DATA BASE WILL BE READ AND ITS*/
   /* * QUANTITIES WILL BE TOTALED AND MOVED TO*/
   /* * THE MAP 2.*/
   /* ********************************************************/


  if (PT0AM002.PT0AMDD < 1
   || PT0AM002.PT0AMDD > 31)
    converseLib.validationFailed(73);
    set PT0AM002.PT0AMDD cursor, modified, bold;
    return;
  end

  if (PT0AM002.PT0AMMM < 1
   || PT0AM002.PT0AMMM > 12)
    converseLib.validationFailed(72);
    set PT0AM002.PT0AMMM cursor, modified, bold;
    return;
  end

  if (PT0AM002.XDMCD in XDMTBL.XDMCD)
    PT0AM002.XDMABRV = XDMTBL.XDMABRV[sysVar.arrayIndex];
  else
    converseLib.validationFailed(30);
    set PT0AM002.XDMCD cursor, modified, bold;
    return;
  end

  set PG2REC empty;

  PG2REC.XGPCD = "03";
  PG2REC.SY1STNBR = PT0AM002.SY1STNBR;
  PG2REC.SY2CLRID = PT0AM002.SY2CLRID;
  PG2REC.XDMCD = PT0AM002.XDMCD;

  PT0A510(); /* GET STYLE/COLOR DESCRIPTIONS*/

  if (VAGen_SQLCODE == 100)
    set PT0AM002.SY1STNBR bold;
    set PT0AM002.SY2CLRID bold;
    PT0AM002.SY1SSTNM = " ";
    PT0AM002.SY2CLRAB = " ";
    return;
  else
    PT0AM002.SY1SSTNM = PG2REC.SY1SSTNM;
    PT0AM002.SY2CLRAB = PG2REC.SY2CLRAB;
  end

  if (PT0AM002.PC3PONBR == 0)
    converseLib.validationFailed(71);
    set PT0AM002.PC3PONBR modified, bold;
    return;
  end


  PT0AS02(); /* GET PO HEADER*/

  if (converseVar.validationMsgNum > 0)
    return;
  end

  PT0AS03(); /* GET PO ORDER TYPE DESCRIPTION*/

  set FY1REC empty;
  FY1REC.FY1FCTYC = PT0AM002.FY1FCTYC;
  FY1REC.XGPCD = "03";

  PT0A144(); /* GET FACTORY DESCRIPTION*/

  if (VAGen_SQLCODE == 100)
    PT0AM002.FY1FCTNM = "UNKNOWN";
  else
    PT0AM002.FY1FCTNM = FY1REC.FY1FCTNM;
  end


  PT0A424(); /* SELECT AND BUILD WORKING STORAGE AND MAP*/

end // end PT0A432

// CLEAR BOTTOM SECTION OF MAP 2
Function PT0A501()
   /* *************************************************************/
   /* *INITIAL WORKING STORAGE FOR MAP 2*/
   /* *CLEAR BOTTOM OF MAP 2*/
   /* **/
   /* **/
   /* ************************************************************/

  PT0AW01.PT0AWX5 = 0;

  while (PT0AW01.PT0AWX5 < 19)

    PT0AW01.PT0AWX5 = PT0AW01.PT0AWX5 + 1;
    set PT0AM002.PT0AMWPN[PT0AWX5] initialAttributes;
    PT0AM002.PT0AMSIZ[PT0AWX5] = " ";
    PT0AM002.PT0AMPOQ[PT0AWX5] = 0;
    PT0AM002.PT0AMWPT[PT0AWX5] = 0;
    PT0AM002.PT0AMWPS[PT0AWX5] = 0;
    PT0AM002.PT0AMWPN[PT0AWX5] = 0;

  end

  PT0AM002.PT0AMTOP = 0;
  PT0AM002.PT0AMTOT = 0;
  PT0AM002.PT0AMTOS = 0;
  PT0AM002.PT0AMTON = 0;
  set PT0AW02 empty;
  PT0AWUPD = "Y";
end // end PT0A501

// GET STYLE/COLOR DESCRIPTIONS
Function PT0A510()
   /* ****************************************************/
   /* *  SELECT THE STYLE/COLOR DESCRIPTIONS*/
   /* **/
   /* * THIS IS ONLY PERFORMED WHEN THE COLOR CODE*/
   /* *   IS GREATER THAN SPACES*/
   /* **/
   /* ***************************************************/


  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* STYLE CURSOR*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)

    return;

  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 100)

    converseLib.validationFailed(66);
    PT0AM001.XXXMODID = "510";
    PT0AM002.XXXMODID = "510";
    return;

  end

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1LOC = "PT0A510 SELECT STYLE ROW";
  TA1REC.TA1DBASE = "DPRODG";
  TA1REC.TA1TBLVU = "VSYCLR01";
  TA1REC.TA1TBLKE = PG2REC.PG2KEY;

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  PT0AM001.XXXMODID = "510";
  PT0AM002.XXXMODID = "510";
  exit stack;

end // end PT0A510

// PERFORM TRANSFER
Function PT0AS01()
   /* ------------------------------------------------------------*/
   /* Set the application to be invoked for PF1 or PF4.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/
    COMMAREA.CATOAP = "GD01"; /* Indicate Goal Documentation*/
  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/
    COMMAREA.CATOAP = "MN0M"; /* Indicate Master Menu*/
  end

   /* ------------------------------------------------------------*/
   /* Transfer control to the specified application.*/
   /* ------------------------------------------------------------*/

  XSEXIT(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* If transfer failed, return an error to the calling process.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CASECRC == 3 /* Application not found*/
   || COMMAREA.CASECRC == 4) /* or transfer not allowed*/

    converseLib.validationFailed(6); /* Indicate not allowed*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/

  end


end // end PT0AS01

// CALL IO3270 UNIQUE
Function PT0AS02()
   /* *******************************************************/
   /* * THIS STATEMENT GROUP WILL READ THE PO HEADER TO*/
   /* * RETRIEVE THE FACTORY AND PO. TYPE FOR DISPLAY*/
   /* * ON MAP 2.*/
   /* ********************************************************/


  set PC3REC empty;
  PC3REC.XGPCD = "03";
  PC3REC.PC3PONBR = PT0AM002.PC3PONBR;
  set PT0AM002.PC3PONBR initialAttributes;

  call "IO3270" ("S ", SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0
   && PC3REC.YPUCD == "OP")
    PT0AM002.FY1FCTYC = PC3REC.FY1FCTYC;
    PT0AM002.PC4ORTYP = PC3REC.PC4ORTYP;
    return;

  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0
   && PC3REC.YPUCD != "OP")
    converseLib.validationFailed(71);
    set PT0AM002.PC3PONBR cursor, modified, bold;
    return;

  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 100)

    converseLib.validationFailed(71);
    set PT0AM002.PC3PONBR cursor, modified, bold;
    return;

  end

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1LOC = "PT0AS02 SELECT FACTORY  ";
  TA1REC.TA1DBASE = "DFCTY ";
  TA1REC.TA1TBLVU = "VFCTY001";
  TA1REC.TA1TBLKE = FY1REC.FY1KEY;

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  PT0AM001.XXXMODID = "S02";
  PT0AM002.XXXMODID = "S02";
  exit stack;

end // end PT0AS02

// GET PO TYPE DESCRIPTION
Function PT0AS03()
   /* *****************************************************/
    /* GET THE PO TYPE DESCRIPTION*/
   /* *****************************************************/

  set PC4REC empty;

  PC4REC.PC4ORTYP = PT0AM002.PC4ORTYP;
  PC4REC.XGPCD = "03";

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end


  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)

    PT0AM002.PC4SDESC = PC4REC.PC4SDESC;
    return;

  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 100)
    set PT0AM002.PC4ORTYP cursor, modified, bold;
    PT0AM002.PC4SDESC = " ";

    return;
  end

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1LOC = "PT0AS03 GET PO TYPE DESC  ";
  TA1REC.TA1DBASE = "DPRODC";
  TA1REC.TA1TBLVU = "VPOTYP01";
  TA1REC.TA1TBLKE = PC4REC.PC4KEY;

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  converseLib.validationFailed(10);
  PT0AM002.XXXMODID = "S03";
  return;

end // end PT0AS03

// GET WIP RECORD UNIQUE
Function PT0AS04()
   /* *********************************************************/
   /* * FETCH UNIQUE WIP RECORD BASED ON KEY FROM TEMP STORAGE*/
   /* **/
   /* **/
   /* **/
   /* * IF SQLCODE NOT = 0*/
   /* *    CONSIDER THAT A FATAL ERROR MESSAGE*/
   /* **/
   /* **********************************************************/


  set PTDREC empty;

  PTDREC.PC3PONBR = PT0AM002.PC3PONBR;
  PTDREC.SY1STNBR = PT0AM002.SY1STNBR;
  PTDREC.SY2CLRID = PT0AM002.SY2CLRID;
  PTDREC.FY1FCTYC = PT0AM002.FY1FCTYC;
  PTDREC.XDMCD = PT0AM002.XDMCD;
  PT0AW02.PT0AMMM = PT0AM002.PT0AMMM;
  PT0AW02.PT0AMDD = PT0AM002.PT0AMDD;
  PT0AW02.PT0AMYY = PT0AM002.PT0AMYY;
  PT0AW02.PT0AWCC = "19";
  PTDREC.PTDCTDT = PT0AW02.PT0AWDT;

  PTDREC.YPUCD = "OP";
  PTDREC.XGPCD = "03";

  try
    call "IO4580" ("S ", SQLCA, PTDREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)

    return;

  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 100)

    return;
  end

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1LOC = "PT0AS04 DECLARE WIP CURSOR";
  TA1REC.TA1DBASE = "DPRODC";
  TA1REC.TA1TBLVU = "VPOWIP01";
  TA1REC.TA1TBLKE = PTDREC.PTDKEY;

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  converseLib.validationFailed(10);
  PT0AM002.XXXMODID = "S04";
  return;

end // end PT0AS04

// SETUP FOR P.O. ITEM CALL
Function PT0AS06()
   /* **********************************************/
   /* *  MOVE ALL VARIABLES NECESSARY TO PERFORM*/
   /* *   SELECT SET.*/
   /* *  PERFORM CALL TO PO ITEM DATA  BASE*/
   /* **********************************************/

  set PC6REC empty;

  PC6REC.XGPCD = "03";
  PC6REC.PC3PONBR = PT0AM002.PC3PONBR;
  PC6REC.SY1STNBR = PT0AM002.SY1STNBR;
  PC6REC.SY2CLRID = PT0AM002.SY2CLRID;
  PC6REC.XDMCD = PT0AM002.XDMCD;
  PC6REC.XQACD = "*";
  PC6REC.XOWCD = "*";
  PC6REC.PC2INSEG = "*";
  PC6REC.XPGCD = "*";
  PC6REC.XUMCD = "*";
  PC6REC.XWHCD = "*";
  PC6REC.PC2CUXID = "*";
  PC6REC.PC6ETSDT = -1;
  PC6REC.YMTCD = "*";
  PC6REC.PC6PLAN = -1;
  PC6REC.XDSCD = "*";
  PC6REC.YSMXDV = "*";


  try
    call "IO3310" ("S8", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)

    return;

  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(75);
    PT0AM002.XXXMODID = "S06";
    return;

  end


  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1LOC = "PT0AS06 FETCH PO ITEM   ";
  TA1REC.TA1DBASE = "DPRODC";
  TA1REC.TA1TBLVU = "VPOITM01";
  TA1REC.TA1TBLKE = PC6REC.PC6KEY;

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  PT0AM001.XXXMODID = "S06";
  converseLib.validationFailed(10);
  exit stack;

end // end PT0AS06

// FETCH PO ITEM RECORDS
Function PT0AS07()
   /* ***********************************************/
   /* *  FETCH PO ITEM RECORDS*/
   /* ***********************************************/

  try
    call "IO3310" ("N8", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end


  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)

    return;

  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 100)
    return;

  end


  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1LOC = "PT0AS07 FETCH PO ITEM   ";
  TA1REC.TA1DBASE = "DPRODC";
  TA1REC.TA1TBLVU = "VPOITM01";
  TA1REC.TA1TBLKE = PC6REC.PC6KEY;

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  PT0AM001.XXXMODID = "S07";
  converseLib.validationFailed(10);
  exit stack;

end // end PT0AS07

// SELECT UNIQUE P.O. RECORDS
Function PT0AS08()
   /* ***********************************************/
   /* *  SELECT UNIQUE PO SIZE RECORDS*/
   /* *  THEN ADD ALL OF THE QUANTITIES TO WORKING STORAGE*/
   /* ***********************************************/

  if (VAGen_SQLCODE == 100)
    return;
  end

  set PC7REC empty;

  PC7REC.XGPCD = PC6REC.XGPCD;
  PC7REC.PC3PONBR = PC6REC.PC3PONBR;
  PC7REC.PC6ITMNB = PC6REC.PC6ITMNB;

  try
    call "IO3640" ("S ", SQLCA, PC7REC) {isNoRefresh = yes, isExternal = yes};
  end


  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)

     /* NEXT SENTENCE*/
  else



    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1LOC = "PT0AS08 SELECT PO SIZE  ";
    TA1REC.TA1DBASE = "DPRODC";
    TA1REC.TA1TBLVU = "VPOSIZ01";
    TA1REC.TA1TBLKE = PC7REC.PC7KEY;

    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1MAP = sysVar.errorCode;
    TAEREC.SQLCAREC = SQLCA.SQLCAREC;

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

    PT0AM001.XXXMODID = "S08";
    converseLib.validationFailed(10);
    return;
  end

   /* HERE WE WILL MOVE THE SELECTED QUANTITIES TO WORKING STORAGE*/

  sysVar.arrayIndex = 0;

  while (sysVar.arrayIndex < 40)

    sysVar.arrayIndex = sysVar.arrayIndex + 1;

    PT0AWPOQ[sysVar.arrayIndex] = PT0AWPOQ[sysVar.arrayIndex] + PC7ORDEQ[sysVar.arrayIndex];

  end

  return;

end // end PT0AS08

// CLOSE P.O. ITEM CURSOR
Function PT0AS09()
   /* ***********************************************/
   /* *  CLOSE PO ITEM RECORDS*/
   /* ***********************************************/

  try
    call "IO3310" ("C8", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end


  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)

    return;

  end

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1LOC = "PT0AS09 FETCH PO ITEM   ";
  TA1REC.TA1DBASE = "DPRODC";
  TA1REC.TA1TBLVU = "VPOITM01";
  TA1REC.TA1TBLKE = PC6REC.PC6KEY;

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  PT0AM001.XXXMODID = "S09";
  converseLib.validationFailed(10);
  exit stack;

end // end PT0AS09

// DECLARE WIP CURSOR
Function PT0AS10()
   /* ******************************************************/
   /* * DECLARE CURSOR FOR WIP DATA*/
   /* ******************************************************/


  set PTDREC empty;

  PTDREC.PC3PONBR = PT0AM002.PC3PONBR;
  PTDREC.FY1FCTYC = PT0AM002.FY1FCTYC;
  PTDREC.SY1STNBR = PT0AM002.SY1STNBR;
  PTDREC.SY2CLRID = PT0AM002.SY2CLRID;
  PTDREC.XDMCD = PT0AM002.XDMCD;
  PTDREC.YPUCD = "OP";
  PTDREC.XGPCD = "03";

  try
    call "IO4580" ("S1", SQLCA, PTDREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)

    return;

  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 100)

    return;
  end

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1LOC = "PT0AS10 DECLARE WIP CURSOR";
  TA1REC.TA1DBASE = "DPRODC";
  TA1REC.TA1TBLVU = "VPOWIP01";
  TA1REC.TA1TBLKE = PTDREC.PTDKEY;

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  PT0AM001.XXXMODID = "S10";
  converseLib.validationFailed(10);
  return;

end // end PT0AS10

// FETCH WIP CURSOR
Function PT0AS11()
   /* ************************************************/
   /* * FETCH WIP CURSOR*/
   /* ************************************************/

  try
    call "IO4580" ("N1", SQLCA, PTDREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)

  else

    if (sysVar.errorCode == "00000000"
     && SQLCA.VAGen_SQLCODE == 100)
      return;

    end

    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1LOC = "PT0AS11 FETCH WIP CURSOR";
    TA1REC.TA1DBASE = "DPRODC";
    TA1REC.TA1TBLVU = "VPOWIP01";
    TA1REC.TA1TBLKE = PTDREC.PTDKEY;

    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1MAP = sysVar.errorCode;
    TAEREC.SQLCAREC = SQLCA.SQLCAREC;

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

    converseLib.validationFailed(10);
    PT0AM002.XXXMODID = "S11";
    exit stack;

  end

   /* WE WILL ADD THE QUANTITIES FETCHED TO WORKING STORAGE*/

  sysVar.arrayIndex = 0;

  while (sysVar.arrayIndex != 40)

    sysVar.arrayIndex = sysVar.arrayIndex + 1;

    PT0AWIPQ[sysVar.arrayIndex] = PT0AWIPQ[sysVar.arrayIndex] + PTDREC.PTDCTQTY[sysVar.arrayIndex];

  end

  return;
end // end PT0AS11

// CLOSE WIP CURSOR
Function PT0AS12()
   /* ***********************************************/
   /* *  CLOSE WIP RECORD*/
   /* ***********************************************/

  try
    call "IO4580" ("C1", SQLCA, PTDREC) {isNoRefresh = yes, isExternal = yes};
  end


  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)

    return;

  end

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1LOC = "PT0AS12 FETCH PO ITEM   ";
  TA1REC.TA1DBASE = "DPRODC";
  TA1REC.TA1TBLVU = "VPOWIP01";
  TA1REC.TA1TBLKE = PTDREC.PTDKEY;

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  PT0AM001.XXXMODID = "S12";
  converseLib.validationFailed(10);
  exit stack;

end // end PT0AS12

// SETUP FOR P.O. ITEM DB CALL
Function PT0AS13()
   /* **********************************************/
   /* *  MOVE ALL VARIABLES NECESSARY TO PERFORM*/
   /* *   SELECT SET.*/
   /* *  PERFORM CALL TO PO ITEM DATA  BASE*/
   /* **********************************************/

  set PC6REC empty;
  set PCYREC empty;

  PC6REC.XGPCD = "03";
  PC6REC.PC3PONBR = PT0AM002.PC3PONBR;
  PC6REC.SY1STNBR = PT0AM002.SY1STNBR;
  PC6REC.SY2CLRID = PT0AM002.SY2CLRID;
  PC6REC.XDMCD = PT0AM002.XDMCD;
  PC6REC.PC6STAT = "*";
  PC6REC.PC6OETS = -1;
  PC6REC.PC6CXNBR = -1;
  PC6REC.PC6RTADT = -1;
  PC6REC.PC6PLAN = -1;
  PC6REC.XQACD = "*";
  PC6REC.XOWCD = "*";
  PC6REC.PC2INSEG = "*";
  PC6REC.XPGCD = "*";
  PC6REC.XUMCD = "*";
  PC6REC.XWHCD = "*";
  PC6REC.PC2CUXID = "*";
  PC6REC.PC6ETSDT = -1;
  PC6REC.YMTCD = "*";
  PC6REC.XDSCD = "*";
  PC6REC.YSMXDV = "*";
  PCYREC.PCYFUNC = "T1";

  try
    call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)
    if (PCYREC.PCYCOUNT > 0)
      return;
    else
      converseLib.validationFailed(75);

      return;

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -305)

    converseLib.validationFailed(75);

    return;

  end

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1LOC = "PT0AS13 COUNT PO ITEM   ";
  TA1REC.TA1DBASE = "DPRODC";
  TA1REC.TA1TBLVU = "VPOITM01";
  TA1REC.TA1TBLKE = PC6REC.PC6KEY;

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  PT0AM001.XXXMODID = "S13";
  converseLib.validationFailed(10);
  exit stack;

end // end PT0AS13

// BUILD AND ADD WIP RECORDS
Function PT0AS14()
   /* ------------------------------------------------*/
   /* BUILD NEW WIP RECORD*/
   /* ------*/
   /* ADD NEW WIP RECORD TO WIL DATAABASE*/
   /* ------------------------------------------------*/

  set PTDREC empty;


  XX0XS01(); /* GET DATE FOR SETUP DATE*/

  PTDREC.ZZZSDT = XX0XWDAT;

  PTDREC.PC3PONBR = PT0AM002.PC3PONBR;
  PTDREC.SY1STNBR = PT0AM002.SY1STNBR;
  PTDREC.SY2CLRID = PT0AM002.SY2CLRID;
  PTDREC.FY1FCTYC = PT0AM002.FY1FCTYC;
  PTDREC.XDMCD = PT0AM002.XDMCD;
  PT0AW02.PT0AMMM = PT0AM002.PT0AMMM;
  PT0AW02.PT0AMDD = PT0AM002.PT0AMDD;
  PT0AW02.PT0AMYY = PT0AM002.PT0AMYY;
   /* ------------- y2k out begin ---------------*/
   /* MOVE '19' TO PT0AW02.PT0AWCC;*/
   /* ------------- y2k out end -----------------*/
   /* ------------- y2k in  begin ---------------*/
  if (PT0AW02.PT0AMYY > 60)
    PT0AW02.PT0AWCC = "19";
  else
    PT0AW02.PT0AWCC = "20";
  end
   /* ------------- y2k in end ------------------*/
  PTDREC.PTDCTDT = PT0AW02.PT0AWDT;

  PTDREC.YPUCD = "OP";
  PTDREC.XGPCD = "03";

  sysVar.arrayIndex = 1;

  while (PG3REC.SY5SZID[sysVar.arrayIndex] != 0)
    PT0AWX3 = PG3REC.SY5SZID[sysVar.arrayIndex];
    PTDREC.PTDCTQTY[PT0AWX3] = PT0AM002.PT0AMWPN[sysVar.arrayIndex];
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  try
    call "IO4580" ("A ", SQLCA, PTDREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)
    PT0AWUPD = "N";
    converseLib.validationFailed(1);
    set PT0AM002.PC3PONBR cursor;
    return;

  end


  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1LOC = "PT0AS14 ADD WIP CURSOR";
  TA1REC.TA1DBASE = "DPRODC";
  TA1REC.TA1TBLVU = "VPOWIP01";
  TA1REC.TA1TBLKE = PTDREC.PTDKEY;

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  converseLib.validationFailed(10);
  PT0AM002.XXXMODID = "S14";
  return;

end // end PT0AS14

// UPDATE WIP RECORD
Function PT0AS15()
   /* ------------------------------------------------*/
   /* BUILD QUANTITIES IN WIP RECORD*/
   /* ------*/
   /* UPDATE  WIP RECORD TO WIP DATABASE*/
   /* ------------------------------------------------*/


  XX0XS01(); /* GET DATE FOR SETUP DATE*/

  PTDREC.ZZZCHGDT = XX0XWDAT;
  PTDREC.ZZZCHGTM = XX0XWTIM;


  sysVar.arrayIndex = 1;

  while (PG3REC.SY5SZID[sysVar.arrayIndex] != 0)
    PT0AWX3 = PG3REC.SY5SZID[sysVar.arrayIndex];
    PTDREC.PTDCTQTY[PT0AWX3] = PT0AM002.PT0AMWPN[sysVar.arrayIndex];
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  try
    call "IO4580" ("U ", SQLCA, PTDREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)
    PT0AWUPD = "N";
    converseLib.validationFailed(1);
    return;

  end


  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1LOC = "PT0AS15 UPDATE WIP DB ";
  TA1REC.TA1DBASE = "DPRODC";
  TA1REC.TA1TBLVU = "VPOWIP01";
  TA1REC.TA1TBLKE = PTDREC.PTDKEY;

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  converseLib.validationFailed(10);
  PT0AM002.XXXMODID = "S15";
  return;

end // end PT0AS15

Record PT0AW01 type basicRecord
  5 PT0AWLN PT0AWLN ; 
    10 PT0AWX1 PT0AWX1 ; 
    10 PT0AWX2 PT0AWX2 ; 
    10 PT0AWX3 PT0AWX3 ; 
    10 PT0AWX4 PT0AWX4 ; 
    10 PT0AWX5 PT0AWX5 ; 
    10 PT0AWX6 PT0AWX6 ; 
    10 PT0AWPO PT0AWPO ; 
    10 PT0AWFC PT0AWFC ; 
    10 PT0AWFN PT0AWFN ; 
    10 PT0AWSY PT0AWSY ; 
    10 PT0AWSD PT0AWSD ; 
    10 PT0AWCL PT0AWCL ; 
    10 PT0AWCD PT0AWCD ; 
    10 PT0AWDM PT0AWDM ; 
    10 PT0AWDD PT0AWDD ; 
    10 PT0AWOC PT0AWOC [200] ; 
      15 PT0AMSEL PT0AMSEL ; 
      15 PT0AWTPO PT0AWTPO ; 
      15 PT0AMFTC PT0AMFTC ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 PTDCTDT PTDCTDT ; 
      15 PT0AMTQT PT0AMTQT ; 
    10 PT0AWCQT PT0AWCQT ; 
    10 PT0AWPF9 PT0AWPF9 ; 
end // end PT0AW01

Record PT0AW02 type basicRecord
  5 PT0AW2L PT0AW2L ; 
    10 PT0AWUPD PT0AWUPD ; 
    10 PT0AWINQ PT0AWINQ ; 
    10 PT0AWPOQ PT0AWPOQ [40] ; 
    10 PT0AWIPQ PT0AWIPQ [40] ; 
    10 PT0AWDT PT0AWDT ; 
      15 PT0AWCC PT0AWCC ; 
      15 PT0AMYY PT0AMYY ; 
      15 PT0AMMM PT0AMMM ; 
      15 PT0AMDD PT0AMDD ; 
end // end PT0AW02

// DAY FOR CUT DATE
DataItem PT0AMDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FACTORY CODE
DataItem PT0AMFTC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MONTH FOR  CUT DATE
DataItem PT0AMMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// SELECT ENTRY FROM MAP 1
DataItem PT0AMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL CUT QTY
DataItem PT0AMTQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YEAR FOR CUT DATE
DataItem PT0AMYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT0AW2L char(330)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CENTURY FOR CUT DATE
DataItem PT0AWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MAP COLOR DESCRIPTION
DataItem PT0AWCD char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map color
DataItem PT0AWCL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WORK AREA FOR TOTAL CUT SIZE
DataItem PT0AWCQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MAP DIMENSION DESCRIPTION
DataItem PT0AWDD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MAP DIMENSION
DataItem PT0AWDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SET UP CUTDATE
DataItem PT0AWDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MAP FACTORY CODE
DataItem PT0AWFC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map factory description
DataItem PT0AWFN char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// INQUIRY REQUEST INDICATOR
DataItem PT0AWINQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL WIP CUTS FOR PO
DataItem PT0AWIPQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT0AWLN char(6279)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DISPALY DATA FOR MAP 1
DataItem PT0AWOC char(31)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF9 REQUEST SWITCH
DataItem PT0AWPF9 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MAP PO NUMBER
DataItem PT0AWPO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TOTAL PO SIZE QUANTITY'S
DataItem PT0AWPOQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MAP STYLE DESCRIPTION
DataItem PT0AWSD char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MAP STYLE
DataItem PT0AWSY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selected p.o. number
DataItem PT0AWTPO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// UPDATE REQUEST INDICATOR
DataItem PT0AWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MAX RECORDS SELECTED WIP
DataItem PT0AWX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INDEX 2 MULTI USES
DataItem PT0AWX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INDEX 3 MULTI USES
DataItem PT0AWX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INDEX 4 MULTI USES
DataItem PT0AWX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MAP 2 INDEX
DataItem PT0AWX5 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MAP 2 INDEX FOR PG1050
DataItem PT0AWX6 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

