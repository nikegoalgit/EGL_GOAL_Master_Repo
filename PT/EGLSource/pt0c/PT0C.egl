package pt0c;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import pc.common.*;
import pg.common.*;
import pt.common.*;
import pw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PT0C ****
// This application allows a user to inquire on the production
// availability of up to ten style/color combinations.
// 
// There are four different screens that may be displayed.
// 
// The first screen displayed to the user indicates the
// selection criteria for the inquiry.  The Warehouse is
// specified, along with a list of Style/Color combinations
// that the user is requesting to view.  The monthly period
// detail is displayed for the user to page through, beginning
// with the first period, by pressing the ENTER key.  The user
// may request, instead, that a batch job be submitted to print
// the information selected from the list or that the period
// detail be bypassed and only the "bottom line" availability
// for each period be shown, by pressing the appropriate PF key
// from this screen.
// 
// The second screen is displayed when a valid list is ENTERed
// on the first screen or when the user scrolls back from the
// third screen to view the first period information.  It is
// the base detail and the detail for the first period.  The
// user may scroll left and right to view the sizes or forward
// to view subsequent periods for a selected style/color.  The
// user may, also, scroll forward and backward to view the next
// and previous, respectively, color selected from the list or
// style specified in the list.  The user may request, instead,
// that a batch job be submitted to print the information for
// the displayed style/color or that the period detail be
// bypassed and only the "bottom line" availability for each
// period be shown, by pressing the appropriate PF key from
// this screen.
// 
// The third screen is displayed when the user scrolls down on
// the second screen to view subsequent periods.  It is the
// detail for subsequent periods, two periods at a time.  The
// user may scroll left and right to view the sizes or forward
// to view subsequent periods for a selected style/color.  The
// user may, also, scroll forward and backward to view the next
// and previous, respectively, color selected from the list or
// style specified in the list.  The user may request, instead,
// that a batch job be submitted to print the information for
// the displayed style/color or that the period detail be
// bypassed and only the "bottom line" availability for each
// period be shown, by pressing the appropriate PF key from
// this screen.
// 
// The fourth screen displays the "bottom line" availability
// for each period in response to the user's PF key request on
// any of the other screens.  The user may scroll left and
// right to view the sizes for a selected style/color.  The
// user may, also, scroll forward and backward to view the next
// and previous, respectively, color selected from the list or
// style specified in the list.  The user may request, instead,
// that a batch job be submitted to print the information for
// the displayed style/color, by pressing the appropriate PF
// key from this screen.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          01/24/89  SPOPA   New application.
// E#00000  03/03/89  SPOPA   Remove PF7/PF8 keys from BL AVAL.
//                            ENTER pages to next warehouse.
//                            Clear M001 on EXIT from others.
//                            When PF14 between PERIODS and
//                            BL AVAL, start display at same
//                            style, color and warehouse.
//                            Correct PF8 on M002 if there are
//                            less than 3 periods for product.
// E#00000  03/07/89  SPOPA   Sign available quantity fields.
// E#00000  04/05/89  SPOPA   Change XTVCD processing to XGPCD.
// E#00000  04/25/89  RSAMUE  Modified Appl to include xgpcd 01
//                            IN-STORE PROMO. XGPCD is received
//                            from PT0M. Apparel or IN-Store
//                            Promo is displayed depending on
//                            XGPCD.
// E#00000  02/08/91  RHETRI  Add code to default owner group.
// E#00000  02/19/91  RHETRI  Fix search based on season/year.
// E#00000  02/28/91  RHETRI  Add apparel screen style capacity
// E#00000  06/01/91  rpatte  changed to use owner in the rept
//                            disem jcl.
//          07/30/91  bantho  fixed edits for owner group code
// T5501005 02/10/93  DFRANC  Change to allow entering ** for
//                            owner groups, and warehouse codes
//                            for NSG project.
//          03/19/93  JRICHA  ADDED IN TEST FOR PRODUCTION
//                            REGION.
//          03/24/93  DBRUIH  ADD CALL TO TA0230 TO DETERMINE
//                            REGION.
// PT9999   11/09/93  MSMIT2  SET PTWREC EMPTY.
// PT281    07/15/96  MHUYNH  INCLUDE DIRECT SHIP IN APAR
// Y2KFIX   01/13/98  WSQUIR  MODIFICATIONS MADE TO: PT0CW00 &
//                            PT0CW03.
//                            PT0C210: Change T/S LENGTH FROM
//                                     1104 TO 1106.
//                            PT0C212: Change to use VABASM02
//                                     vs. IO3090.
//                            PT0C213: Change to use VABASM02
//                                     vs. IO3090.
//                            PT0C216: Change to use VABASM02
//                                     vs. IO3090.
// PT011    06/23/98  SREDDY  MODIFICATIONS IN PARAS PT0C110,
//                            PT0C152, PT0C153, PT0C215,
//                            PT0C255, PT0C356, PT0C415, and
//                            PT0C454 to process the WHSE 'DP'.
// PT00     01/25/99  SMURTH  PT0CW-COLOR-TABLE LIMIT INCREASED
//                            FROM 100 TO 400
// PT4416   02/22/00  RSELVA  FIX FOR SCROLL SIZE ERR - PT0C001
// PT4490   02/29/00  RSELVA  FIX to populate correct size to
//                            quantities - PT0C215, PT0C415
// FIX01    10/24/00  VANNAM  If a product has prod-level div
//                            code as '03', then its size-level
//                            div cd should also be '03'. If
//                            not, those sizes should not be
//                            displayed.
//                            PT0C215, PT0C218, PT0C415 are the
//                            processes modified for this chg
// *********************
Program PT0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PT00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  PT0CW00 PT0CW00; // record
  PT0CW01 PT0CW01; // record
  PT0CW02 PT0CW02; // record
  PT0CW03 PT0CW03; // record
  PT0CW04 PT0CW04; // record
  PT0CW05 PT0CW05; // record
  PT2REC PT2REC; // record
  PT3REC PT3REC; // record
  PTWREC PTWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XOWREC XOWREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PT0CT01 {deleteAfterUse = yes}; // table
  use PT0CT02 {deleteAfterUse = yes}; // table
  use PT0CT03 {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XSNTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use PT0CM.PT0CM001,  // forms
      PT0CM.PT0CM002, 
      PT0CM.PT0CM003, 
      PT0CM.PT0CM004, 
      PT0CM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPT001: XPPT001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set PT0CM001 initial; /* M001 input/output*/
    set PT0CM002 initial; /* M002 input/output*/
    set PT0CM003 initial; /* M003 input/output*/
    set PT0CM004 initial; /* M004 input/output*/
    set PT0CW00 empty; /* Working storage*/
    set PT0CW01 empty; /* M001 display storage*/
    set PT0CW01 empty; /* M002 display storage*/
    set PT0CW03 empty; /* M003 display storage*/
    set PT0CW04 empty; /* M004 display storage*/
    set PT0CW05 empty; /* I/O module parameters*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    set PTWREC empty; /* INITIALIZE COMMAREA WORK REC*/

    PT0CW00.PT0CWSWM = "1"; /* Map to be displayed switch*/
    PT0CW00.PT0CWSWR = "Y"; /* Request for data switch*/
    PT0CW00.XWHCD = "XX"; /* Default warehouse code*/
    PT0CW00.XOWCD = "00"; /* Default owner group code*/

     /* ------------------------------------------------------------*/
     /* Determine screen title based on GPC and PTWPT0C switch.*/
     /* ------------------------------------------------------------*/

    if (PTWREC.PTWPT0CS == "Y") /* If apparel screen styles*/
      PT0CW00.XGPCD = "03"; /* General product class*/
      PT0CW00.PTWPT0CS = "Y"; /* PT0C screen style switch*/
      PTWREC.PTWPT0CS = " "; /* PT0C screen style switch*/
      PT0CW00.PT0CMTTE = "APPAREL SCN STY"; /* map title*/
    else
      if (COMMAREA.XGPCD == "01")
        PT0CW00.XGPCD = "01"; /* General product class*/
        PT0CW00.PT0CMTTE = " IN-STORE PROMO"; /* map title*/
      else
        PT0CW00.PT0CMTTE = "        APPAREL"; /* map title*/
        PT0CW00.XGPCD = "03"; /* General product class*/
      end
    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PT0C001; /* Converse the main process*/


    PT0C001: PT0C001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PT0C001; /* Converse the main process*/


  end // end main
end // end PT0C

// Main process to display a map
Function PT0C001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, if specified, display the third map.*/
   /* 4) Otherwise, if specified, display the fourth map.*/
   /* 5) Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

    /* ---------------------------------------------------*/
     /* Call subroutine TA0230 to find which environment*/
    /* the program is executing in, production or*/
    /* development.*/
    /* ---------------------------------------------------*/

  PT0CM002.PT0CMSSA = 08;
  PT0CM003.PT0CMSSA = 08;
  PT0CM004.PT0CMSSA = 08;
  PT0CM002.PT0CMPSA = 01;
  PT0CM003.PT0CMPSA = 02;

  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* call successful*/
   && TA3REC.TA3RTNCD == 0)          /* good return code*/
  else
    converseLib.validationFailed(8); /* error encountered with print request*/
  end

  if (PT0CW00.PT0CWSWM == "1") /* Map 1 was requested*/

    PT0C100(); /* Display map 1*/

  else

    if (PT0CW00.PT0CWSWM == "2") /* Map 2 was requested*/

      PT0C200(); /* Display map 2*/

    else

      if (PT0CW00.PT0CWSWM == "3") /* Map 3 was requested*/

        PT0C300(); /* Display map 3*/

      else

        if (PT0CW00.PT0CWSWM == "4") /* Map 4 was requested*/

          PT0C400(); /* Display map 4*/

        else

          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "APPL"; /* Type of error*/
          TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
          TA1REC.TA1MAPNO = PT0CW00.PT0CWSWM; /* Map number*/
          TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
          TA1REC.TA1PGMNO = "001"; /* Program number*/

          call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

          COMMAREA.CATOAP = "PT0M"; /* TO application*/

          XSPT001(); /* Exit to another application*/

          exit program; /* Severe error exit to CICS*/

        end

      end

    end

  end


end // end PT0C001

// Display the selected table row
Function PT0C100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT0C110(); /* Obtain the data to display*/

  PT0C120(); /* Format and display the map*/

  PT0C130(); /* Check attention identifier*/

  PT0C140(); /* Reset fields to normal intensity*/

  PT0C150(); /* Verify the entered data*/

  PT0C160(); /* Process valid input request*/


end // end PT0C100

// Obtain the data to display
Function PT0C110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.PT0CWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Obtain the description for the warehouse code.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.XWHCD == "XX") /* All warehouses*/

    PT0CW00.XWHABRV = "ALL WHSES"; /* Description*/

  else

    if (PT0CW00.XWHCD == "**") /* Corporate warehouse*/

      PT0CW00.XWHABRV = "CORP WHSE"; /* Description*/

    else

      if (PT0CW00.XWHCD in XWHTBL.XWHCD /* Code in table*/
       && XWHTBL.XWHCD[sysVar.arrayIndex] != "99") /* and not end of table*/

        PT0CW00.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* Description*/

      else

        if (PT0CW00.XWHCD == "DP")
          PT0CW00.XWHABRV = "PROMO DRS"; /* Description*/
        else

          PT0CW00.XWHABRV = " "; /* Description*/

          PT0CM001.XXXMODID = "110"; /* Module identification*/
          PTWREC.XXXMSGNO = 36;
                                          /* * Warehouse missing or invalid*/
        end

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Default the season/year to indicate all seasons.*/
   /* ------------------------------------------------------------*/

  PT0CW00.XSNABRV = " "; /* Season abbreviation*/
  PT0CW00.XSNDESC = "ALL SEASONS"; /* Season description*/

   /* ------------------------------------------------------------*/
   /* Verify owner group code valid.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.XOWCD == "00") /* Owner group*/

    PT0CW00.XOWDESC = "NOT APPLICABLE"; /* Description*/

  else

    if (PT0CW00.XWHCD == "**") /* If whse = '**'*/
      PT0CW00.XOWDESC = "CORP WHSE"; /* Description*/
    else
      if (PT0CW00.XWHCD == "XX") /* if whse = 'xx'*/
        XOWREC.XWHCD = "51"; /* Default key*/
      else
        XOWREC.XWHCD = PT0CW00.XWHCD; /* format key*/
      end

      XOWREC.XOWCD = PT0CM001.XOWCD; /* Format key*/

      if (XOWREC.XOWKEY in XOWTBL.XOWKEY /* Code in table*/
       && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

        PT0CM001.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex]; /* Abrv*/

      else

        if (PT0CW00.XWHCD == "DP")
          PT0CM001.XOWDESC = "PROMO DRS"; /* Abrv*/
        else
            /* --------------------------------------------------------*/
             /* If not found or inactive, indicate missing or invalid.*/
            /* --------------------------------------------------------*/

          PT0CM001.XOWDESC = " "; /* Abbreviation*/

          PT0CM001.XXXMODID = "110"; /* Module identification*/
          converseLib.validationFailed(116); /* Indicate missing or invalid*/

        end

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If no error was found, indicate request for data complete.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/
    PT0CW00.PT0CWSWR = "N"; /* Request for data switch*/
  end

   /* ***************** End of PT0C110 *************************************/
end // end PT0C110

// Format and converse the map
Function PT0C120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message information.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    PTWREC.XXXMODID = PT0CM001.XXXMODID; /* Module identification*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If map is not formatted, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (PT0CM001.XXXCURDT == 0) /* Map is not formatted*/
    PT0C121(); /* Format the data on the map*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PT0CM001.PT0CMTTE = PT0CW00.PT0CMTTE; /* Title*/
  PT0CM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PT0CM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PT0CM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0) /* Message to display*/

    PT0CM001.XXXMODID = PTWREC.XXXMODID; /* Module identification*/
    if (PTWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PTWREC.XXXMSGNO);
    end /* Message number*/
    set PT0CM001 alarm; /* Indicate sound alarm*/

  end

  converse PT0CM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PT0CM001.XXXMODID = " "; /* Module identification*/
  COMMAREA.CATOAP = PT0CM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PT0CM001.CAITEM; /* Application data*/


end // end PT0C120

// Format the display data
Function PT0C121()
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PT0CM001.XWHCD = PT0CW00.XWHCD; /* Warehouse code*/
  PT0CM001.XWHABRV = PT0CW00.XWHABRV; /* Description*/

  PT0CM001.XOWCD = PT0CW00.XOWCD; /* Owner grp code*/
  PT0CM001.XOWDESC = PT0CW00.XOWDESC; /* Description*/

  PT0CM001.XSECD = PT0CW00.XSECD; /* Season code*/
  PT0CM001.PT0CWSNY = PT0CW00.PT0CWSNY; /* Season year*/
  PT0CM001.XSNDESC = PT0CW00.XSNDESC; /* Season description*/


end // end PT0C121

// Check attention identifier
Function PT0C130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PT0CM001 initial; /* M001 input/output*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PT0C131(); /* Purge any temporary storage*/

      XSPT001(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    PT0CM001.XXXMODID = "130"; /* Module identification*/
    set PT0CM001.CATOAP cursor, bold; /* Highlight*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PT0CM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PT0M"; /* TO application*/
    end

    PT0C131(); /* Purge any temporary storage*/

    XSPT001(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    PT0CM001.XXXMODID = "130"; /* Module identification*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf12  /* and PF12 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14) /* and PF14 was not pressed*/

    PT0CM001.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end


end // end PT0C130

// Purge any temporary storage
Function PT0C131()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PT0CW03 empty; /* Base display storage*/
  set PT0CW04 empty; /* Bottom line display storage*/

  PT0CW00.TA5TSQIX = 0; /* Highest page number*/
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PT0CW00.PT0CWIXL = 1; /* Display line number*/

   /* ------------------------------------------------------------*/
   /* Purge any base display storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PT0CW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PT0CM001.XXXMODID = "131"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PT0CM001.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PT0CW00.PT0CWSWM = "1"; /* Map to be displayed switch*/

  exit stack; /* Exit to display map*/


end // end PT0C131

// Reset highlighted fields
Function PT0C140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PT0CM001.XWHCD initialAttributes; /* Warehouse code*/
  set PT0CM001.XOWCD initialAttributes; /* Owner group code*/
  set PT0CM001.XSECD initialAttributes; /* Season code*/
  set PT0CM001.PT0CWSNY initialAttributes; /* Season year*/

  PT0CW00.PT0CWIXL = 1; /* Initialize line index*/

  while (PT0CW00.PT0CWIXL <= 10) /* Until end of lines*/

    set PT0CM001.SY1STNBR[PT0CWIXL] initialAttributes; /* Style number*/
    set PT0CM001.SY2CLRID[PT0CWIXL] initialAttributes; /* Color identification*/
    set PT0CM001.XDMCD[PT0CWIXL] initialAttributes; /* Dimension code*/
    set PT0CM001.XUMCD[PT0CWIXL] initialAttributes; /* Unit of measure code*/
    set PT0CM001.PC2INSEG[PT0CWIXL] initialAttributes; /* Specification difference*/
    set PT0CM001.XPGCD[PT0CWIXL] initialAttributes; /* Packaging type code*/

    PT0CW00.PT0CWIXL = PT0CW00.PT0CWIXL + 1; /* Increment line index*/

  end

  set PT0CM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PT0CM001.CAITEM initialAttributes; /* Commarea application data*/


end // end PT0C140

// Verify the entered data
Function PT0C150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PT0CM001.XXXMODID = "150"; /* Module identification*/
    set PT0CM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the protected code fields in the selection lines.*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CWIXL = 1; /* Initialize line index*/

  while (PT0CW00.PT0CWIXL <= 10) /* Until end of lines*/

    PT0CM001.SY1SSTNM[PT0CWIXL] = " "; /* Style name*/
    PT0CM001.SY2CLRAB[PT0CWIXL] = " "; /* Color abbreviation*/
    PT0CM001.XDMABRV[PT0CWIXL] = " "; /* Dimension abbreviation*/
    PT0CM001.XUMCD[PT0CWIXL] = " "; /* Unit of measure*/
    PT0CM001.XUMDESC[PT0CWIXL] = " "; /* Unit of measure abbreviation*/
    PT0CM001.PC2INSEG[PT0CWIXL] = " "; /* Specification difference*/
    PT0CM001.XPGCD[PT0CWIXL] = " "; /* Packaging type*/

    PT0CW00.PT0CWIXL = PT0CW00.PT0CWIXL + 1; /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any modifiable fields were changed.*/
   /* ------------------------------------------------------------*/

  PT0C151(); /* Check for any entered fields*/

   /* ------------------------------------------------------------*/
   /* If warehouse was changed, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (PT0CM001.XWHCD != PT0CW00.XWHCD) /* Warehouse changed*/
    PT0C152(); /* Verify warehouse code*/
  end

   /* ------------------------------------------------------------*/
   /* If owner grp was changed, verify the entered code.*/
   /* ------------------------------------------------------------*/

       /* IF PT0CM001.XOWCD NE PT0CW00.XOWCD; Owner grp changed*/
  PT0C153(); /* Verify owner grp code*/
       /* END ;*/

  if (converseVar.validationMsgNum != 0) /* if invalid, display the map*/
    exit stack;
  end


   /* ------------------------------------------------------------*/
   /* Verify the entered season range.*/
   /* ------------------------------------------------------------*/

  PT0C154(); /* Verify the season range*/

   /* ------------------------------------------------------------*/
   /* If any selection line was entered, verify the selection.*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CWIXL = 10; /* Initialize line index*/

  while (PT0CW00.PT0CWIXL > 0) /* Until end of lines*/

    /* ------------------------------------------------------------*/
     /* If any fields were entered, verify the selection line.*/
    /* ------------------------------------------------------------*/

    if (PT0CM001.SY1STNBR[PT0CWIXL] > " " /* Style entered*/
     || PT0CM001.SY2CLRID[PT0CWIXL] > " " /* or color*/
     || PT0CM001.XDMCD[PT0CWIXL] > " "    /* or dimension*/
     || PT0CM001.XUMCD[PT0CWIXL] > " "    /* or unit of measure*/
     || PT0CM001.PC2INSEG[PT0CWIXL] > " " /* or specification difference*/
     || PT0CM001.XPGCD[PT0CWIXL] > " ")   /* or packaging type*/

      PT0CW00.PT0CWSWE = "N"; /* Initialize error switch*/

      PT0C155(); /* Verify selection line*/

    end

    PT0CW00.PT0CWIXL = PT0CW00.PT0CWIXL - 1; /* Decrement line index*/

  end

   /* ------------------------------------------------------------*/
   /* If no valid season/year, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (PT0CM001.XSNDESC <= " ") /* Valid season/year not entered*/

    PT0CM001.XXXMODID = "150"; /* Module identification*/
    set PT0CM001.XSECD cursor, bold; /* Highlight*/
    set PT0CM001.PT0CWSNY bold; /* Highlight*/
    converseLib.validationFailed(58); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* If no valid warehouse entered, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (PT0CM001.XWHABRV <= " ") /* Valid warehouse not entered*/

    PT0CM001.XXXMODID = "150"; /* Module identification*/
    set PT0CM001.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(36); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If PF12 was pressed, indicate press enter to update and*/
   /* exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf12) /* PF12 was pressed*/

    PT0CM001.XXXMODID = "150"; /* Module identification*/
    converseLib.validationFailed(17); /* Indicate press enter to update*/

    exit stack; /* Exit to display map*/

  end


end // end PT0C150

// Check for any entered fields
Function PT0C151()
   /* ------------------------------------------------------------*/
   /* Determine whether any selections were entered.*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CWIXL = 1; /* Initialize line index*/

  while (PT0CW00.PT0CWIXL <= 10) /* Until end of lines*/

    /* ------------------------------------------------------------*/
     /* If any selections were entered, return to verify the data.*/
    /* ------------------------------------------------------------*/

    if (PT0CM001.SY1STNBR[PT0CWIXL] > " " /* Style entered*/
     || PT0CM001.SY2CLRID[PT0CWIXL] > " " /* or color*/
     || PT0CM001.XDMCD[PT0CWIXL] > " "    /* or dimension*/
     || PT0CM001.XUMCD[PT0CWIXL] > " "    /* or unit of measure*/
     || PT0CM001.PC2INSEG[PT0CWIXL] > " " /* or specification difference*/
     || PT0CM001.XPGCD[PT0CWIXL] > " ")   /* or packaging type*/

      return; /* Return to previous process*/

    end

    PT0CW00.PT0CWIXL = PT0CW00.PT0CWIXL + 1; /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* If any key map fields changed, return to verify the data.*/
   /* ------------------------------------------------------------*/

  if (PT0CM001.XWHCD != PT0CW00.XWHCD /* Warehouse code changed*/
   || PT0CM001.XOWCD != PT0CW00.XOWCD /* or owner group changed*/
   || PT0CM001.XSECD != PT0CW00.XSECD /* or season code changed*/
   || PT0CM001.PT0CWSNY != PT0CW00.PT0CWSNY) /* or season year changed*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If no selections were entered, exit to display the map.*/
   /* ------------------------------------------------------------*/

  set PT0CM001 initial; /* M001 input/output area*/

  exit stack; /* Exit to display map*/


end // end PT0C151

// Verify the warehouse code
Function PT0C152()
   /* ------------------------------------------------------------*/
   /* Determine if the code is one of the allowable overrides.*/
   /* ------------------------------------------------------------*/

  if (PT0CM001.XWHCD == "XX") /* All warehouses*/

    PT0CM001.XWHABRV = "ALL WHSES"; /* Description*/

  else

    if (PT0CM001.XWHCD == "**") /* Corporate warehouse*/

      PT0CM001.XWHABRV = "CORP WHSE"; /* Description*/

    else

      /* ------------------------------------------------------------*/
       /* Determine if the code is in the table.*/
      /* ------------------------------------------------------------*/

      if (PT0CM001.XWHCD in XWHTBL.XWHCD /* Code in table*/
       && XWHTBL.XWHCD[sysVar.arrayIndex] != "99") /* and not end of table*/

        PT0CM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
                                   /* Save description*/

      else

        /* ------------------------------------------------------------*/
         /* Otherwise, indicate that a valid warehouse was not entered.*/
        /* ------------------------------------------------------------*/

        PT0CM001.XWHABRV = " "; /* Clear description*/

        if (PT0CM001.XWHCD == "DP")
          PT0CM001.XWHABRV = "PROMO DRS";
        end

      end

    end

  end


end // end PT0C152

// Verify the owner group code
Function PT0C153()
   /* ---------------------------------------------------------------------*/
   /* Verify owner group code valid.*/
   /* If warehouse code is xx use warehouse code 51 as part of the key,*/
   /* if the description is not found use code 25.  If still not found*/
   /* display an error.*/
   /* ---------------------------------------------------------------------*/

  if (PT0CM001.XWHCD == "XX") /* If warehouse equal 'xx'*/
    if (PT0CM001.XOWCD == "**") /* Owner group eq to corp view*/
      PT0CM001.XOWDESC = "CORP OWNER"; /* Abrv*/
    else
      XOWREC.XWHCD = "51"; /* Default key*/
      XOWREC.XOWCD = PT0CM001.XOWCD; /* Format key*/

      if (XOWREC.XOWKEY in XOWTBL.XOWKEY /* Code in table*/
       && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

        PT0CM001.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex]; /* Abrv*/
        PT0CW00.XOWCD = PT0CM001.XOWCD; /* Save owner*/
        PT0CW00.XOWDESC = PT0CM001.XOWDESC; /* Save owner name*/

      else

        XOWREC.XWHCD = "25"; /* NSG warehouse code*/

        if (XOWREC.XOWKEY in XOWTBL.XOWKEY /* Code in table*/
         && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

          PT0CM001.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex]; /* Abrv*/
          PT0CW00.XOWCD = PT0CM001.XOWCD; /* Save owner*/
          PT0CW00.XOWDESC = PT0CM001.XOWDESC; /* Save owner name*/

        else

              /* --------------------------------------------------------*/
               /* If not found or inactive, indicate missing or invalid.*/
              /* --------------------------------------------------------*/

          PT0CM001.XXXMODID = "153"; /* module id*/
          converseLib.validationFailed(116); /* set error number*/
          set PT0CM001.XWHCD cursor, bold; /* highlight field*/
          set PT0CM001.XOWCD bold; /* highlight field*/

        end
      end

    end

  else

    if (PT0CM001.XWHCD == "**" /* If warehouse equal '**'*/
     || PT0CM001.XOWCD == "**") /* if owner code '**'*/

      if (PT0CM001.XOWCD == "**")
        PT0CM001.XOWDESC = "CORP OWNER"; /* Abrv*/
      else
        PT0CM001.XOWDESC = "          "; /* Clear out name*/
      end

      PT0CW00.XOWDESC = PT0CM001.XOWDESC; /* Save owner name*/

      if (PT0CM001.XOWCD == "XX" /* If owner code eq 'xx'*/
       || PT0CM001.XOWCD == "  ") /* If owner code eq spaces*/
        PT0CM001.XXXMODID = "153"; /* module id*/
        converseLib.validationFailed(116); /* set error number*/
        set PT0CM001.XWHCD cursor, bold; /* highlight field*/
        set PT0CM001.XOWCD bold; /* highlight field*/
      end

    else
      if (PT0CM001.XWHCD == "  ") /* direct ship*/
           /* cool; next sentence*/
      else

        XOWREC.XWHCD = PT0CM001.XWHCD; /* Format key*/
        XOWREC.XOWCD = PT0CM001.XOWCD; /* Format key*/

        if (PT0CM001.XWHCD == "DP")
          PT0CM001.XOWDESC = "PROMO DRS"; /* Description*/
          PT0CW00.XOWCD = PT0CM001.XOWCD; /* Save owner*/
          PT0CW00.XOWDESC = PT0CM001.XOWDESC; /* Save owner name*/
          return;
        end

        /* ------------------------------------------------------------*/
         /* Search table for entry.*/
        /* ------------------------------------------------------------*/

        if (XOWREC.XOWKEY in XOWTBL.XOWKEY /* Code in table*/
         && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

          PT0CM001.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex]; /* Abrv*/
          PT0CW00.XOWCD = PT0CM001.XOWCD; /* Save owner*/
          PT0CW00.XOWDESC = PT0CM001.XOWDESC; /* Save owner name*/

        else

           /* --------------------------------------------------------*/
            /* If not found or inactive, indicate missing or invalid.*/
           /* --------------------------------------------------------*/

          PT0CM001.XXXMODID = "153"; /* module id*/
          converseLib.validationFailed(116); /* set error number*/
          set PT0CM001.XWHCD cursor, bold; /* highlight field*/
          set PT0CM001.XOWCD bold; /* highlight field*/

        end
      end

    end

  end

   /* ****************** End of PT0C153 ***********************************/
end // end PT0C153

// Verify the season range
Function PT0C154()
   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date and time*/

   /* ------------------------------------------------------------*/
   /* Format the season search argument from entered season/year.*/
   /* ------------------------------------------------------------*/

  PT0CW00.XSECD = PT0CM001.XSECD; /* Season code*/
  PT0CW00.PT0CWSNY = PT0CM001.PT0CWSNY; /* Season year*/

   /* ------------------------------------------------------------*/
   /* Determine if the code is one of the allowable overrides.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.PT0CWSNX == " ") /* All seasons*/

    PT0CM001.XSNDESC = "ALL SEASONS"; /* Description*/
    move 0 to PT0CW00.XSNYR[1] for all; /* Season range years*/

  else

    /* ------------------------------------------------------------*/
     /* Determine if season/year is an active entry in the table.*/
    /* ------------------------------------------------------------*/

    if (PT0CW00.PT0CWSNX in XSNTBL.XSNABRV       /* Code in table*/
     && XSNTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XSNTBL.XSNXDT[sysVar.arrayIndex] >= XX0XW01.XX0XWDAT) /* and not ended*/

      PT0CM001.XSNDESC = XSNTBL.XSNDESC[sysVar.arrayIndex]; /* Save description*/
      PT0CW00.XSNDESC = XSNTBL.XSNDESC[sysVar.arrayIndex]; /* Save description*/
      PT0CW00.XSNYR[1] = XSNTBL.XSNYR[sysVar.arrayIndex]; /* This season year*/
      PT0CW00.XSNYR[2] = XSNTBL.XSNYR[sysVar.arrayIndex] + 1; /* Next season year*/

    else

      /* ------------------------------------------------------------*/
       /* Otherwise, indicate a valid season/year was not entered.*/
      /* ------------------------------------------------------------*/

      PT0CM001.XSNDESC = " "; /* Clear description*/

    end

  end


end // end PT0C154

// Verify the selection line
Function PT0C155()
   /* ------------------------------------------------------------*/
   /* Set default values for the fields in the selection line.*/
   /* ------------------------------------------------------------*/

  if (PT0CM001.SY2CLRID[PT0CWIXL] <= " ") /* Color not entered*/
    PT0CM001.SY2CLRID[PT0CWIXL] = "***"; /* Default color*/
  end

  if (PT0CM001.XDMCD[PT0CWIXL] <= " ") /* Dimension not entered*/
    PT0CM001.XDMCD[PT0CWIXL] = "00"; /* Default dimension*/
  end

  PT0CM001.PC2INSEG[PT0CWIXL] = "000"; /* Specification difference*/
  PT0CM001.XPGCD[PT0CWIXL] = "00"; /* Packaging type*/

   /* ------------------------------------------------------------*/
   /* Verify the dimension code.*/
   /* ------------------------------------------------------------*/

  if (PT0CM001.XDMCD[PT0CWIXL] in XDMTBL.XDMCD /* Code in table*/
   && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PT0CM001.XDMABRV[PT0CWIXL] = XDMTBL.XDMABRV[sysVar.arrayIndex];

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PT0CW00.PT0CWSWE = "Y"; /* Indicate error found*/

    PT0CM001.XXXMODID = "155"; /* Module identification*/
    set PT0CM001.XDMCD[PT0CWIXL] cursor, bold; /* Highlight*/
    converseLib.validationFailed(30); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* If color was not entered, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (PT0CM001.SY2CLRID[PT0CWIXL] <= " ") /* Color was not entered*/

    PT0CW00.PT0CWSWE = "Y"; /* Indicate error found*/

    PT0CM001.XXXMODID = "155"; /* Module identification*/
    set PT0CM001.SY2CLRID[PT0CWIXL] cursor, bold; /* Highlight*/
    converseLib.validationFailed(29); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* If style was not entered, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (PT0CM001.SY1STNBR[PT0CWIXL] <= " ") /* Style was not entered*/

    PT0CW00.PT0CWSWE = "Y"; /* Indicate error found*/

    PT0CM001.XXXMODID = "155"; /* Module identification*/
    set PT0CM001.SY1STNBR[PT0CWIXL] cursor, bold; /* Highlight*/
    converseLib.validationFailed(28); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* If no edit error was found, determine if the product number*/
   /* is in the Production Style/Color Table.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.PT0CWSWE == "N") /* No edit error was found*/

    set PG2REC empty; /* Clear row storage area*/

    PG2REC.XGPCD = PT0CW00.XGPCD; /* GPC code*/
    PG2REC.SY1STNBR = PT0CM001.SY1STNBR[PT0CWIXL]; /* Style code*/
    PG2REC.SY2CLRID = PT0CM001.SY2CLRID[PT0CWIXL]; /* Color code*/
    PG2REC.XDMCD = PT0CM001.XDMCD[PT0CWIXL]; /* Dimension code*/

    if (PT0CM001.SY2CLRID[PT0CWIXL] == "***") /* All colors selected*/

      PT0CS01(); /* Select first style row*/
    else
      PT0CS02(); /* Select style/color row*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If no edit error was found and a valid request was entered,*/
   /* determine if the selection is in the Modeling Base Table.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.PT0CWSWE == "N" /* No edit error was found*/
   && PT0CM001.XWHABRV > " "  /* and valid warehouse was entered*/
   && PT0CM001.XSNDESC > " ") /* and valid season/year was entered*/

    set PT2REC empty; /* Clear row storage area*/

    PT2REC.XGPCD = PT0CW00.XGPCD; /* GPC code*/
    PT2REC.SY1STNBR = PT0CM001.SY1STNBR[PT0CWIXL]; /* Style code*/
    PT2REC.SY2CLRID = PT0CM001.SY2CLRID[PT0CWIXL]; /* Color code*/
    PT2REC.XDMCD = PT0CM001.XDMCD[PT0CWIXL]; /* Dimension code*/
    PT2REC.XOWCD = PT0CM001.XOWCD; /* Owner group*/
    PT2REC.PC2INSEG = PT0CM001.PC2INSEG[PT0CWIXL]; /* Spec code*/
    PT2REC.XPGCD = PT0CM001.XPGCD[PT0CWIXL]; /* Packaging type code*/
    PT2REC.XUMCD = PT0CM001.XUMCD[PT0CWIXL]; /* Unit of measure code*/
    PT2REC.XQACD = "01"; /* Quality code*/

    if (PT0CM001.XWHCD == "XX") /* All warehouses requested*/

      PT2REC.XWHCD = "* "; /* Indicate all warehouses*/
    else
      PT2REC.XWHCD = PT0CM001.XWHCD; /* Warehouse code*/

    end

    /* ------------------------------------------------------------*/
     /* Select the set of rows from the base table and search the*/
     /* rows until a match is found or end of cursor.*/
    /* ------------------------------------------------------------*/

    set PG2REC empty; /* Production style/color row*/

    PT0CS03(); /* Select base table set*/

    PT0CW00.PT0CWSWS = "N"; /* Season/year match switch*/

    while (PT0CW00.PT0CWSWC == "N" /* Until end of cursor*/
     && PT0CW00.PT0CWSWS == "N") /* or season/year match*/

      PT0CS04(); /* Fetch base table row*/

      if (PT0CW00.PT0CWSWC == "N") /* Not end of cursor*/

        /* ------------------------------------------------------------*/
         /* If no season/year was specified, indicate match was found.*/
        /* ------------------------------------------------------------*/

        if (PT0CW00.PT0CWSNX == " ") /* No season/year specified*/

          PT0CW00.PT0CWSWS = "Y"; /* Indicate match found*/

        else

          /* ------------------------------------------------------------*/
           /* If the product number is different than previous, obtain*/
           /* the style/color table row for the product season/year.*/
          /* ------------------------------------------------------------*/

          if (PT2REC.XGPCD != PG2REC.XGPCD       /* Not same GPC*/
           || PT2REC.SY1STNBR != PG2REC.SY1STNBR /* or not same style*/
           || PT2REC.SY2CLRID != PG2REC.SY2CLRID /* or not same color*/
           || PT2REC.XDMCD != PG2REC.XDMCD)      /* or not same dimension*/

            PG2REC.XGPCD = PT2REC.XGPCD; /* GPC*/
            PG2REC.SY1STNBR = PT2REC.SY1STNBR; /* Style*/
            PG2REC.SY2CLRID = PT2REC.SY2CLRID; /* Color*/
            PG2REC.XDMCD = PT2REC.XDMCD; /* Dimension*/
            TA1REC.TA1PGMNM = "PT0C155"; /* Process name*/

            XSPG202(); /* Get style/color row*/

            if (sysVar.errorCode != "00000000" /* Call not successful*/
             || SQLCA.VAGen_SQLCODE != 0)      /* or not normal return*/

              if (sysVar.errorCode == "00000000" /* Call successful*/
               && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

                converseLib.validationFailed(11); /* Indicate data in use*/
              else
                converseLib.validationFailed(10); /* Indicate system error*/

              end

              PT0CM001.XXXMODID = "155"; /* Module identification*/

              exit stack; /* Exit to display map*/

            end


            /* ------------------------------------------------------------*/
             /* Determine if the season/year matches entered season/year.*/

            /* ------------------------------------------------------------*/

            if (PT0CW00.XSECD == "SP") /* Spring season specified*/

              if (PG2REC.XSECD == "SP" /* Spring season*/
               || PG2REC.XSECD == "CS" /* or spring closeout*/
               || PG2REC.XSECD == "CF") /* or fall closeout*/

                if (PG2REC.XSNYR == PT0CW00.XSNYR[1]) /* For this year*/
                  PT0CW00.PT0CWSWS = "Y"; /* Indicate match found*/
                end

              end

            else

              if (PG2REC.XSECD == "FA" /* Fall season*/
               || PG2REC.XSECD == "CF" /* or fall closeout*/
               || PG2REC.XSECD == "CS") /* or spring closeout*/

                if (PG2REC.XSECD == "CS") /* if spring closeout*/
                  if (PG2REC.XSNYR == PT0CW00.XSNYR[2]) /* and next year*/
                    PT0CW00.PT0CWSWS = "Y"; /* Indicate match found*/
                  end
                else
                  if (PG2REC.XSNYR == PT0CW00.XSNYR[1]) /* For this year*/
                    PT0CW00.PT0CWSWS = "Y"; /* Indicate match found*/
                  end
                end

              end

            end
          end
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* If the end of cursor was found before a season/year match,*/
     /* indicate that there is no information to display.*/
    /* ------------------------------------------------------------*/

    if (PT0CW00.PT0CWSWC == "Y") /* End of cursor*/

      PT0CM001.XXXMODID = "155"; /* Module identification*/
      set PT0CM001.SY1STNBR[PT0CWIXL] cursor, bold; /* Highlight*/
      set PT0CM001.SY2CLRID[PT0CWIXL] bold; /* Highlight*/
      set PT0CM001.XDMCD[PT0CWIXL] bold; /* Highlight*/
      set PT0CM001.XUMCD[PT0CWIXL] bold; /* Highlight*/
      set PT0CM001.PC2INSEG[PT0CWIXL] bold; /* Highlight*/
      set PT0CM001.XPGCD[PT0CWIXL] bold; /* Highlight*/
      converseLib.validationFailed(38); /* Indicate no base information*/

    end

    PT0CS05(); /* Close base table set*/

  end


end // end PT0C155

// Process valid input request
Function PT0C160()
   /* ------------------------------------------------------------*/
   /* Purge any existing temporary storage queues.*/
   /* ------------------------------------------------------------*/

  PT0C131(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Save the key map data.*/
   /* ------------------------------------------------------------*/

  PT0CW00.XWHCD = PT0CM001.XWHCD; /* Warehouse code*/
  PT0CW00.XWHABRV = PT0CM001.XWHABRV; /* Abbreviation*/

  PT0CW00.XOWCD = PT0CM001.XOWCD; /* Owner grp code*/
  PT0CW00.XOWDESC = PT0CM001.XOWDESC; /* Abbreviation*/

  PT0CW00.XSECD = PT0CM001.XSECD; /* Season code*/
  PT0CW00.PT0CWSNY = PT0CM001.PT0CWSNY; /* Season year*/
  PT0CW00.XSNDESC = PT0CM001.XSNDESC; /* Abbreviation*/

   /* ------------------------------------------------------------*/
   /* Commit all changes to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 1;
  sysLib.commit(); /* Commit all changes*/

   /* ------------------------------------------------------------*/
   /* Establish the selection index on first selection entered.*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CWIXS = 1; /* Initialize selection index*/

  while (PT0CW00.PT0CWIXS <= 10 /* Until end of lines*/
   && PT0CM001.SY1STNBR[PT0CWIXS] <= " ") /* or selection found*/

    PT0CW00.PT0CWIXS = PT0CW00.PT0CWIXS + 1; /* Increment index*/

  end

   /* ------------------------------------------------------------*/
   /* If no selection was entered, return to display MAP 001.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.PT0CWIXS > 10) /* No selection entered*/

    set PT0CM001 initial; /* M001 input/output*/

    PT0CW00.PT0CWSWM = "1"; /* Map to be displayed switch*/
    PT0CW00.PT0CWSWR = "N"; /* Request for data switch*/

    return; /* Return to previous process*/

  else

    set PT0CM001.SY1STNBR[PT0CWIXS] cursor; /* Position cursor*/

  end

   /* ------------------------------------------------------------*/
   /* If PRINT was requested, format and submit the request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Print was requested*/

    if (TA3REC.TA3RGNID == "03") /* IF ON PRODUCTION SYSTEM*/
      PT0C161(); /* Format/submit print request*/
    else /**/
      PT0C162(); /* FORMAT TEST JCL*/
    end /**/

    set PT0CM001 initial; /* M001 input/output*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear map input/output area and request data to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* Bottom line was requested*/

    set PT0CM004 initial; /* M004 input/output*/

    PT0CW00.PT0CWSWM = "4"; /* Map to be displayed switch*/
    PT0CW00.PT0CWSWR = "Y"; /* Request for data switch*/

  end

  if (converseVar.eventKey is enter) /* Period data was requested*/

    set PT0CM002 initial; /* M002 input/output*/

    PT0CW00.PT0CWSWM = "2"; /* Map to be displayed switch*/
    PT0CW00.PT0CWSWR = "Y"; /* Request for data switch*/

  end

   /* ------------------------------------------------------------*/
   /* Initialize the working storage areas to be used.*/
   /* ------------------------------------------------------------*/

  set PG1REC empty; /* Production Special Users row*/
  set PG2REC empty; /* Production Style/Color row*/
  set PG3REC empty; /* Product Size Translation parameters*/


end // end PT0C160

// Format/submit print request
Function PT0C161()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PT0CW00.PT0CWIXT = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PT0CW00.PT0CWIXT > 0) /* Until end of table*/

    if (PT0CT01.TARTYPE[PT0CWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters for each line specified by the user.*/
      /* ------------------------------------------------------------*/

      PT0CW00.PT0CWIXL = 1; /* Initialize map index*/

      while (PT0CW00.PT0CWIXL <= 10) /* Until end of lines*/

        if (PT0CM001.SY1STNBR[PT0CWIXL] > " ") /* Selection entered*/

          PT0CW01.XWHCD = PT0CW00.XWHCD; /* Warehouse*/
          PT0CW01.SY1STNBR = PT0CM001.SY1STNBR[PT0CWIXL]; /* Style*/
          PT0CW01.SY2CLRID = PT0CM001.SY2CLRID[PT0CWIXL]; /* Color*/
          PT0CW01.XDMCD = PT0CM001.XDMCD[PT0CWIXL]; /* Dimension*/
          PT0CW01.XOWCD = PT0CM001.XOWCD; /* OWNER*/

          PT0CS06(); /* Format selection parameters*/

        end

        PT0CW00.PT0CWIXL = PT0CW00.PT0CWIXL + 1; /* Increment line index*/

      end

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      if (PT0CW00.XGPCD == "01" /* In Store Promo*/
       && PT0CT01.TARTYPE[PT0CWIXT] == "A") /* apparel  bypass*/

        PT0CW00.PT0CWIXT = PT0CW00.PT0CWIXT + 1; /* Increment table index*/

      end

      if (PT0CW00.XGPCD == "03" /* Apparel*/
       && PT0CT01.TARTYPE[PT0CWIXT] == "S") /* In Store*/

        PT0CW00.PT0CWIXT = PT0CW00.PT0CWIXT + 1; /* Increment table index*/

      end

      TA6REC.TARJCL[TA6INDEX] = PT0CT01.TARJCL[PT0CWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT0CT01.TARTYPE[PT0CWIXT]; /* Type*/


      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT0CT01.TARJCL[PT0CWIXT] == "/*EOF") /* End of table*/

      PT0CW00.PT0CWIXT = 0; /* Indicate end of table*/
    else
      PT0CW00.PT0CWIXT = PT0CW00.PT0CWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PT0CM001.XXXMODID = "161"; /* Module identification*/

  PT0CS07(); /* Submit the JCL*/


end // end PT0C161

// Format/submit print request
Function PT0C162()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PT0CW00.PT0CWIXT = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PT0CW00.PT0CWIXT > 0) /* Until end of table*/

    if (PT0CT03.TARTYPE[PT0CWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters for each line specified by the user.*/
      /* ------------------------------------------------------------*/

      PT0CW00.PT0CWIXL = 1; /* Initialize map index*/

      while (PT0CW00.PT0CWIXL <= 10) /* Until end of lines*/

        if (PT0CM001.SY1STNBR[PT0CWIXL] > " ") /* Selection entered*/

          PT0CW01.XWHCD = PT0CW00.XWHCD; /* Warehouse*/
          PT0CW01.SY1STNBR = PT0CM001.SY1STNBR[PT0CWIXL]; /* Style*/
          PT0CW01.SY2CLRID = PT0CM001.SY2CLRID[PT0CWIXL]; /* Color*/
          PT0CW01.XDMCD = PT0CM001.XDMCD[PT0CWIXL]; /* Dimension*/
          PT0CW01.XOWCD = PT0CM001.XOWCD; /* OWNER*/

          PT0CS13(); /* Format selection parametersFOR TEST*/

        end

        PT0CW00.PT0CWIXL = PT0CW00.PT0CWIXL + 1; /* Increment line index*/

      end

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      if (PT0CW00.XGPCD == "01" /* In Store Promo*/
       && PT0CT03.TARTYPE[PT0CWIXT] == "A") /* apparel  bypass*/

        PT0CW00.PT0CWIXT = PT0CW00.PT0CWIXT + 1; /* Increment table index*/

      end

      if (PT0CW00.XGPCD == "03" /* Apparel*/
       && PT0CT03.TARTYPE[PT0CWIXT] == "S") /* In Store*/

        PT0CW00.PT0CWIXT = PT0CW00.PT0CWIXT + 1; /* Increment table index*/

      end

      TA6REC.TARJCL[TA6INDEX] = PT0CT03.TARJCL[PT0CWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT0CT03.TARTYPE[PT0CWIXT]; /* Type*/


      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT0CT03.TARJCL[PT0CWIXT] == "/*EOF") /* End of table*/

      PT0CW00.PT0CWIXT = 0; /* Indicate end of table*/
    else
      PT0CW00.PT0CWIXT = PT0CW00.PT0CWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PT0CM001.XXXMODID = "161"; /* Module identification*/

  PT0CS07(); /* Submit the JCL*/


end // end PT0C162

// List the rows in the table
Function PT0C200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT0C210(); /* Obtain the data to display*/

  PT0C220(); /* Format and display the map*/

  PT0C230(); /* Check attention identifier*/

  PT0C240(); /* Reset fields to normal intensity*/

  PT0C250(); /* Verify the entered data*/

  PT0C260(); /* Process valid input request*/


end // end PT0C200

// Obtain the data to display
Function PT0C210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.PT0CWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Purge any existing queue in temporary storage.*/
   /* ------------------------------------------------------------*/

  PT0C131(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

   /* ----------------------- y2k out begin -----------------------*/
   /* MOVE 1104 TO PT0CW00.PT0CWTSL;    /* Temporary storage page length*/
   /* ----------------------- y2k out end   -----------------------*/
   /* ----------------------- y2k in begin  -----------------------*/
  PT0CW00.PT0CWTSL = 1106; /* Temporary storage page length*/
   /* ----------------------- y2k in end    -----------------------*/

  PT0CW00.PT0CWIXD = 1; /* Initialize color index*/
  PT0CW00.PT0CW-COLOR-TABLE = " "; /* Init color table*/

   /* ------------------------------------------------------------*/
   /* Either load color driver table with single color or if color*/
   /* is wildcarded get all of the colors for the current style and*/
   /* load the table.*/
   /* ------------------------------------------------------------*/

  if (PT0CM001.SY2CLRID[PT0CWIXS] == "***") /* color is wildcarded*/
    PT0CW00.PT0CW-COLOR[PT0CWIXD] = PT0CM001.SY2CLRID[PT0CWIXS];
    PT0CW05.XWHCD[1] = "  "; /* From warehouse*/
    PT0CW05.XWHCD[2] = "99"; /* To warehouse*/

     /* ------------------------------------------------------------*/
     /* Open cursor*/
     /* ------------------------------------------------------------*/

    PT0C212(); /* Fetch selected FBASM rows*/

     /* ------------------------------------------------------------*/
     /* Fetch and load color table with all colors fo current style*/
     /* ------------------------------------------------------------*/

    PT0C213(); /* Fetch selected FBASM rows*/

    while (PT0CW00.PT0CWSWC != "Y") /* Until end of cursor*/
      if (PT0CW00.PT0CWIXD > 1) /* If there is a prior entry*/
        sysVar.arrayIndex = PT0CW00.PT0CWIXD - 1;
        if (PT3REC.SY2CLRID != PT0CW00.PT0CW-COLOR[sysVar.arrayIndex])
          PT0CW00.PT0CW-COLOR[PT0CWIXD] = PT3REC.SY2CLRID;
          PT0CW00.PT0CWIXD = PT0CW00.PT0CWIXD + 1; /* Increment index*/
        end
      else
        PT0CW00.PT0CW-COLOR[PT0CWIXD] = PT3REC.SY2CLRID;
        PT0CW00.PT0CWIXD = PT0CW00.PT0CWIXD + 1; /* Increment index*/
      end
      PT0C213(); /* Fetch selected FBASM rows*/
    end

     /* ------------------------------------------------------------*/
      /* Close cursor*/
     /* ------------------------------------------------------------*/

    PT0C216(); /* Close the FBASM cursor*/
    PT0CW00.PT0CWIXD = 1; /* Reset color index*/

  else

     /* ------------------------------------------------------------*/
      /* Load color table with color from map.*/
     /* ------------------------------------------------------------*/

    PT0CW00.PT0CW-COLOR[PT0CWIXD] = PT0CM001.SY2CLRID[PT0CWIXS];

  end

   /* ------------------------------------------------------------*/
   /* If all warehouses requested, set range for all warehouses.*/
   /* ------------------------------------------------------------*/

  while (PT0CW00.PT0CW-COLOR[PT0CWIXD] != " ") /* colors to process*/

    if (PT0CM001.XWHCD == "XX") /* All warehouses requested*/

      PT0CW05.XWHCD[1] = "00"; /* From warehouse*/
      PT0CW05.XWHCD[2] = "99"; /* To warehouse*/

       /* ------------------------------------------------------------*/
        /* Select and open the cursor for the set to be formatted.*/
       /* ------------------------------------------------------------*/

      PT0C212(); /* Select FBASM and open cursor*/

       /* ------------------------------------------------------------*/
        /* Fetch and format the data into pages until end of cursor.*/
       /* ------------------------------------------------------------*/

      while (PT0CW00.PT0CWSWC != "Y") /* Until end of cursor*/

        PT0C213(); /* Fetch selected FBASM rows*/

        if (PT0CW00.PT0CWSWC == "N" /* Not end of cursor*/
         && PT0CW00.PT0CWSWS == "Y") /* Match found switch*/

           /* ------------------------------------------------------------*/
            /* If key fields changed, add the page to the storage queue.*/
           /* ------------------------------------------------------------*/

          if (PT0CW03.PT3KEY == " ") /* First time through*/

            PT0CW03.PT0CWSWP = "Y"; /* First period switch*/

          else

            if (PT0CW03.PT3KEY != PT3REC.PT3KEY /* Key fields changed*/
             || PT0CW03.PT3YYMM != PT3REC.PT3YYMM) /* or period changed*/

              if (PT0CW03.PT3KEY == PT3REC.PT3KEY) /* Same key fields*/

                PT0CW00.PT0CWSWP = "N"; /* Not first period*/
              else
                PT0CW00.PT0CWSWP = "Y"; /* First period*/

              end

              PT0C214(); /* Add page to temporary storage*/

              PT0CW03.PT0CWSWP = PT0CW00.PT0CWSWP; /* Period switch*/

            end

          end

           /* ------------------------------------------------------------*/
            /* Format the data into the map display storage area.*/
           /* ------------------------------------------------------------*/

          PT0C215(); /* Format the display storage*/

        end

      end

       /* ------------------------------------------------------------*/
        /* Add any partially formatted last page to the queue.*/
       /* ------------------------------------------------------------*/

      if (PT0CW03.PT3KEY > " ") /* Page was formatted*/
        PT0C214(); /* Add page to temporary storage*/
      end

       /* ------------------------------------------------------------*/
        /* Close the cursor for the selected set.*/
       /* ------------------------------------------------------------*/

      PT0C216(); /* Close the selected FBASM cursor*/

       /* ------------------------------------------------------------*/
        /* Set range to obtain direct ship and corporate warehouses.*/
       /* ------------------------------------------------------------*/

      PT0CW05.XWHCD[1] = "  "; /* From warehouse*/
      PT0CW05.XWHCD[2] = "ZZ"; /* To warehouse*/

    else

       /* ------------------------------------------------------------*/
        /* Otherwise, set range to obtain a single warehouse.*/
       /* ------------------------------------------------------------*/

      PT0CW05.XWHCD[1] = PT0CM001.XWHCD; /* From warehouse*/
      PT0CW05.XWHCD[2] = PT0CM001.XWHCD; /* To warehouse*/

    end

     /* ------------------------------------------------------------*/
      /* Select and open the cursor for the set to be formatted.*/
     /* ------------------------------------------------------------*/

    PT0C212(); /* Select FBASM and open cursor*/

     /* ------------------------------------------------------------*/
      /* Fetch and format the data into pages until end of cursor.*/
     /* ------------------------------------------------------------*/

    while (PT0CW00.PT0CWSWC != "Y") /* Until end of cursor*/

      PT0C213(); /* Fetch selected FBASM rows*/

      if (PT0CW00.PT0CWSWC == "N") /* Not end of cursor*/

         /* ------------------------------------------------------------*/
          /* If key fields changed, add the page to the storage queue.*/
         /* ------------------------------------------------------------*/

        if (PT0CW03.PT3KEY == " ") /* First time through*/

          PT0CW03.PT0CWSWP = "Y"; /* First period switch*/

        else

          if (PT0CW03.PT3KEY != PT3REC.PT3KEY /* Key fields changed*/
           || PT0CW03.PT3YYMM != PT3REC.PT3YYMM) /* or period changed*/

            if (PT0CW03.PT3KEY == PT3REC.PT3KEY) /* Same key fields*/

              PT0CW00.PT0CWSWP = "N"; /* First period switch*/
            else
              PT0CW00.PT0CWSWP = "Y"; /* First period switch*/

            end

            PT0C214(); /* Add page to temporary storage*/

            PT0CW03.PT0CWSWP = PT0CW00.PT0CWSWP; /* Frst period sw*/

          end

        end

         /* ------------------------------------------------------------*/
          /* Format the data into the map display storage area.*/
         /* ------------------------------------------------------------*/

        PT0C215(); /* Format the display storage*/

      end

    end

     /* ------------------------------------------------------------*/
      /* Add any partially formatted last page to the queue.*/
     /* ------------------------------------------------------------*/

    if (PT0CW03.PT3KEY > " ") /* Page was formatted*/
      PT0C214(); /* Add page to temporary storage*/
    end

     /* ------------------------------------------------------------*/
      /* Close the cursor for the selected set.*/
     /* ------------------------------------------------------------*/

    PT0C216(); /* Close the selected FBASM cursor*/

    PT0CW00.PT0CWIXD = PT0CW00.PT0CWIXD + 1; /* increment index*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CWSWR = "N"; /* Request for data switch*/
  PT0CW00.PT0CWTSP = 1; /* Page number*/
  PT0CW00.PT0CMPSA = 2; /* Period scroll amount*/
  PT0CW00.PT0CMSSA = 8; /* Size scroll amount*/

   /* ------------------------------------------------------------*/
   /* If from the BL AVAL display, find the page to be displayed.*/
   /* ------------------------------------------------------------*/

  if (PT0CM002.SY1STNBR > " ")
    PT0C217(); /* Find the page to be displayed*/
  end


end // end PT0C210

// Select FBASM and open cursor
Function PT0C212()
   /* ------------------------------------------------------------*/
   /* Initialize the end of cursor switch.*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CWSWC = "N"; /* End of cursor switch*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  set PT3REC empty; /* Clear row storage area*/

  PT3REC.XGPCD = PT0CW00.XGPCD; /* GPC code*/
  PT3REC.SY1STNBR = PT0CM001.SY1STNBR[PT0CWIXS]; /* Style code*/
   /* MOVE PT0CM001.SY2CLRID(PT0CWIXS) TO PT3REC.SY2CLRID; /* Color code*/
  PT3REC.SY2CLRID = PT0CW00.PT0CW-COLOR[PT0CWIXD]; /* Color code*/
  PT3REC.XDMCD = PT0CM001.XDMCD[PT0CWIXS]; /* Dimension code*/
  PT3REC.XOWCD = PT0CM001.XOWCD; /* Owner group*/
  PT3REC.PC2INSEG = PT0CM001.PC2INSEG[PT0CWIXS]; /* Spec code*/
  PT3REC.XPGCD = PT0CM001.XPGCD[PT0CWIXS]; /* Packaging type code*/
  PT3REC.XUMCD = PT0CM001.XUMCD[PT0CWIXS]; /* Unit of measure code*/
  PT3REC.XQACD = "01"; /* Quality code*/
  PT0CW05.XCTCD[1] = "    "; /* Country code not used*/
  PT0CW05.XCTCD[2] = "    "; /* Country code not used*/
  PT3REC.XCTCD = "    "; /* Country code not used*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  PT0CW05.PT0CWFUN = "S1"; /* I/O module function*/

   /* ------------------------ y2k out begin ------------------------*/
   /* CALL IO3090 PT0CW05,SQLCA,PT3REC (NOMAPS,NONCSP,REPLY; /* Select set*/
   /* ------------------------ y2k out end   ------------------------*/

   /* ------------------------ y2k in begin  ------------------------*/
  try
    call "VABASM02" (PT0CW05, SQLCA, PT3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
   /* ------------------------ y2k in end    ------------------------*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PT0CM001.XXXMODID = "212"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PT0CM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABASM02"; /* Table view name*/
  TA1REC.TA1TBLKE = PT3REC.PT3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PT0CW00.PT0CWSWM = "1"; /* Map to be displayed switch*/

  exit stack; /* Exit to display map*/


end // end PT0C212

// Fetch the next ABASM row
Function PT0C213()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  PT0CW05.PT0CWFUN = "N1"; /* I/O module function*/

   /* -------------------------- y2k out begin -----------------------*/
                                  /* CALL IO3090 PT0CW05,SQLCA,PT3REC*/
                                   /* (NOMAPS,NONCSP,REPLY; /* Fetch next*/
                                   /* row*/
   /* -------------------------- y2k out end   -----------------------*/

   /* -------------------------- y2k in begin  -----------------------*/
  try
    call "VABASM02" (PT0CW05, SQLCA, PT3REC) {isNoRefresh = yes, isExternal = yes};
  end /**/
   /* -------------------------- y2k in end    -----------------------*/

   /* ------------------------------------------------------------*/
   /* If successful, obtain the product season/year and return.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PT0CS08(); /* Obtain product style/color*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PT0CW00.PT0CWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PT0CM001.XXXMODID = "213"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PT0CM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABASM02"; /* Table view name*/
  TA1REC.TA1TBLKE = PT3REC.PT3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PT0CW00.PT0CWSWM = "1"; /* Map to be displayed switch*/

  exit stack; /* Exit to display map*/


end // end PT0C213

// Add page to temporary storage
Function PT0C214()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PT0CW03.PT0CWTSL = PT0CW00.PT0CWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PT0CW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PT0CW03 empty; /* M001 display storage*/

    PT0CW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    PT0CW00.PT0CWIXL = 1; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PT0CM001.XXXMODID = "214"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PT0CM001.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M003"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PT0CW00.PT0CWSWM = "1"; /* Map to be displayed switch*/

  exit stack; /* Exit to display map*/


end // end PT0C214

// Format the display storage
Function PT0C215()
   /* ------------------------------------------------------------*/
   /* If this is a new page, format the heading information.*/
   /* ------------------------------------------------------------*/

  if (PT0CW03.PT3KEY <= " ") /* First time through*/

    PT0CW03.PT3KEY = PT3REC.PT3KEY; /* Save product key*/

    /* ------------------------------------------------------------*/
     /* Format the product style/color information.*/
    /* ------------------------------------------------------------*/

    PT0CW03.SY1SSTNM = PG2REC.SY1SSTNM; /* Style name*/
    PT0CW03.SY2CLRAB = PG2REC.SY2CLRAB; /* Color abbreviation*/
    PT0CW03.PG1SC4CD = PG2REC.PG1SC4CD; /* Scheduler code*/
    PT0CW00.XGACD = PG2REC.XGACD; /* Gender age code*/
    if (PT0CW00.XGACD in XGATBL.XGACD)
      PT0CW03.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex];
    end
    PT0CW00.XPCCD = PG2REC.XPCCD; /* Category code*/
    if (PT0CW00.XPCKEY in XPCTBL.XPCKEY)
      PT0CW03.XPCSDESC = XPCTBL.XPCSDESC[sysVar.arrayIndex];
    end
    PT0CW00.XSUCD = PG2REC.XSUCD; /* Silhouette code*/
    if (PT0CW00.XSUCD in XSUTBL.XSUCD)
      PT0CW03.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex];
    end

    /* ------------------------------------------------------------*/
     /* Obtain the product size descriptions.*/
    /* ------------------------------------------------------------*/

    if (PT0CW03.XGPCD != PG3REC.XGPCD       /* Not same GPC*/
     || PT0CW03.SY1STNBR != PG3REC.SY1STNBR /* or not same style*/
     || PT0CW03.SY2CLRID != PG3REC.SY2CLRID /* or not same color*/
     || PT0CW03.XDMCD != PG3REC.XDMCD       /* or not same dimension*/
     || PT0CW03.XQACD != PG3REC.XQACD)      /* or not same quality*/

      set PG3REC empty; /* Clear row storage area*/
      PG3REC.PG3FUNCD = "PC"; /* Function*/
      PG3REC.PG3DATFM = "C"; /* Data format*/
      /* MOVE '01' TO PG3REC.PG3XDVCD       ; Highest division*/
      PG3REC.PG3KEY = PT0CW03.PG2KEY; /* Style/color key*/
      PG3REC.XQACD = PT0CW03.XQACD; /* Quality code*/
      TA1REC.TA1PGMNM = "PT0C215"; /* Process name*/
     /* MOVE PG2REC.XDVCD1 TO PG3REC.PG3XDVCD; /* SET TO PRODUCT DIV*/

      if (PG2REC.XDVCD1 > "01")
        PG3REC.PG3XDVCD = PG2REC.XDVCD1; /* SET TO PRODUCT DIV*/
      else
        PG3REC.PG3XDVCD = "01"; /* SET TO highest div*/
      end

      XSPG301(); /* Size description translation*/

      if (sysVar.errorCode != "00000000" /* Call not successful*/
       || PG3REC.PG3RETCD != "00")       /* or not normal return*/

        if (sysVar.errorCode == "00000000" /* Call successful*/
         && PG3REC.PG3RETCD == "09")       /* and resource not available*/

          converseLib.validationFailed(11); /* Indicate data in use*/
        else
          converseLib.validationFailed(10); /* Indicate system error*/

        end

        PT0CW00.PT0CWSWM = "1"; /* Map to be displayed switch*/
        PT0CM001.XXXMODID = "215"; /* Module identification*/

        exit stack; /* Exit to display map*/

      end

    end

   /* vannam changes begin here - 10/24/00*/
   /* **********************************************************/
   /* *  The products that have prod-level div cd '03' MUST   **/
   /* *      have its size-leve div cds as '03'. If not,      **/
   /* *      strip out that size ids from displaying APAR ... **/
   /* *                                                       **/
   /* **********************************************************/
    if (PG2REC.XDVCD1 == "03" && 
    PT3REC.XGPCD == "03" && 
    PT3REC.XWHCD == "09" && 
    PT3REC.XOWCD != "00") /* for prods that have prod-level div cd '03'*/
                            /* gpc '03' (apparel), whse '09'*/
                            /* (apprl promo whse) and owner grp ^= '00',*/
                            /* check the size-level div cds for '03'...*/
                            /* If not, do not show that div cd in PT0C*/
      PT0C218();
    end
   /* vannam changes end here - 10/24/00*/

    PT0CW00.PT0CWIXC = 1; /* Initialize column index*/

    while (PT0CW00.PT0CWIXC <= 40) /* Until end of sizes*/

      PT0CW03.SY5SZID[PT0CWIXC] = PG3REC.SY5SZID[PT0CWIXC];
      PT0CW03.SY4IDDSC[PT0CWIXC] = PG3REC.SY4IDDSC[PT0CWIXC];

      PT0CW00.PT0CWIXC = PT0CW00.PT0CWIXC + 1; /* Increment index*/

    end

    /* ------------------------------------------------------------*/
     /* Obtain the scheduler last name.*/
    /* ------------------------------------------------------------*/

    if (PT0CW03.XGPCD != PG1REC.XGPCD /* Not same GPC*/
     || PT0CW03.PG1SC4CD != PG1REC.PG1SC4CD) /* or not same scheduler*/

      set PG1REC empty; /* Clear row storage area*/
      PG1REC.XGPCD = PT0CW03.XGPCD; /* GPC code*/
      PG1REC.PG1SC4CD = PT0CW03.PG1SC4CD; /* Scheduler code*/

      PT0CS09(); /* Obtain scheduler last name*/

    end

    PT0CW03.XXXLSTNM = PG1REC.XXXLSTNM; /* Scheduler last name*/

    /* ------------------------------------------------------------*/
     /* Format warehouse abbreviation.*/
    /* ------------------------------------------------------------*/

    if (PT0CW03.XWHCD == "**") /* Corporate warehouse*/

      PT0CW03.XWHABRV = "CORP WHSE"; /* Abbreviation*/
    else
      if (PT0CW03.XWHCD in XWHTBL.XWHCD)
        PT0CW03.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      end

      if (PT0CW03.XWHCD == "DP")
        PT0CW03.XWHABRV = "PROMO DRS";
      end

    end

    /* ------------------------------------------------------------*/
     /* Clear the array work areas and initialize the indexes.*/
    /* ------------------------------------------------------------*/

    PT0CW00.PT0CWIXC = 1; /* Initialize column index*/

  end

   /* ------------------------------------------------------------*/
   /* Save the data in display storage.*/
   /* ------------------------------------------------------------*/

  PT0CW03.PT3YYMM = PT3REC.PT3YYMM; /* Base period*/
  PT0CW00.PT0CWPER = PT3REC.PT3YYMM; /* Base period*/

  if (PT0CW00.PT0CTPRM in PT0CT02.PT0CTPRM)
    PT0CW03.PT0CTPMO = PT0CT02.PT0CTPMO[sysVar.arrayIndex];
  end
  PT0CW03.PT0CTPRM = PT0CW00.PT0CTPRM; /* Receipt month*/

  PT0CW00.PT0CWIXR = 1; /* Initialize record index*/

  while (PT0CW00.PT0CWIXR <= 10 /* Until end of array*/
   && PT3REC.SY5SZID[PT0CWIXR] != 0) /* or end of sizes*/

    PT0CW03.PT3FUBK[PT0CWIXC] = PT3REC.PT3FUBK[PT0CWIXR];
    PT0CW03.PT3PRBK[PT0CWIXC] = PT3REC.PT3PRBK[PT0CWIXR];
    PT0CW03.PT3PDTN[PT0CWIXC] = PT3REC.PT3PDTN[PT0CWIXR];
    PT0CW03.PT3AVQT[PT0CWIXC] = PT3REC.PT3AVQT[PT0CWIXR];

    PT0CW00.PT0CWEND = PT0CW00.PT0CWIXC - 8; /* Ending column*/

    if (PT0CW00.PT0CWEND > PT0CW03.PT0CWMAX) /* Greater than maximum*/
      PT0CW03.PT0CWMAX = PT0CW00.PT0CWEND; /* Maximum column*/
    end

    PT0CW00.PT0CWIXR = PT0CW00.PT0CWIXR + 1; /* Record index*/
    PT0CW00.PT0CWIXC = PT0CW00.PT0CWIXC + 1; /* Column index*/

  end

  PT0CW03.PT3FUTOT = PT3REC.PT3FUTOT;
  PT0CW03.PT3PRTOT = PT3REC.PT3PRTOT;
  PT0CW03.PT3POTOT = PT3REC.PT3POTOT;
  PT0CW03.PT3AVTOT = PT3REC.PT3AVTOT;


end // end PT0C215

// Close selected ABASM cursor
Function PT0C216()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  PT0CW05.PT0CWFUN = "C1"; /* I/O module function*/

   /* ------------------------- y2k out begin ------------------------*/
   /* CALL IO3090 PT0CW05,SQLCA,PT3REC (NOMAPS,NONCSP,REPLY; /* Close set*/
   /* ------------------------- y2k out end   ------------------------*/

   /* ------------------------- y2k in begin  ------------------------*/
  try
    call "VABASM02" (PT0CW05, SQLCA, PT3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
   /* ------------------------- y2k in end    ------------------------*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PT0CM001.XXXMODID = "216"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PT0CM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABASM02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PT0CW00.PT0CWSWM = "1"; /* Map to be displayed switch*/

  exit stack; /* Exit to display map*/


end // end PT0C216

// Find the page to be displayed
Function PT0C217()
   /* ------------------------------------------------------------*/
   /* Search the pages for a match on warehouse, style and color.*/
   /* ------------------------------------------------------------*/

  PT0CW03.PT0CWSWP = "N"; /* First period switch*/

  while (PT0CM002.XWHCD != PT0CW03.XWHCD       /* Until same warehouse*/
   || PT0CM002.SY1STNBR != PT0CW03.SY1STNBR /* and same style*/
   || PT0CM002.SY2CLRID != PT0CW03.SY2CLRID /* and same color*/
   || PT0CW03.PT0CWSWP != "Y") /* and first period of product*/

    TA5REC.TA5TSQIX = PT0CW00.PT0CWTSP; /* Page number*/

    PT0CS10(); /* Obtain temporary storage page*/

    if (PT0CM002.XWHCD != PT0CW03.XWHCD       /* Warehouse not same*/
     || PT0CM002.SY1STNBR != PT0CW03.SY1STNBR /* or style not same*/
     || PT0CM002.SY2CLRID != PT0CW03.SY2CLRID /* or color not same*/
     || PT0CW03.PT0CWSWP != "Y")              /* or not first period*/

      PT0CW00.PT0CWTSP = PT0CW00.PT0CWTSP + 1; /* Increment page*/

    end

  end


end // end PT0C217

// correct the size ids
Function PT0C218()
   /* ------------------------------------------------------------*/
   /* correct the size ids, that is, load the size ids that*/
   /* corresponds to the div cd '03'*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CWIXC = 1; /* Initialize column index*/
  PT0CW00.PT0CWIXR = 0; /* Initialize record index*/

  while (((PT0CW00.PT0CWIXC <= 40) && 
  (PG3REC.SY5SZID[PT0CWIXC] != 0)))
    if (PG3REC.XDVCD[PT0CWIXC] == "03")
      PT0CW00.PT0CWIXR = PT0CW00.PT0CWIXR + 1; /* incr recd idx*/
      if (PT0CW00.PT0CWIXR != PT0CW00.PT0CWIXC)
        PG3REC.PG3SIZES[PT0CWIXR] = PG3REC.PG3SIZES[PT0CWIXC];
        PG3REC.SY5SZID[PT0CWIXC] = 0;
        PG3REC.SY4IDDSC[PT0CWIXC] = " ";
        PG3REC.XDVCD[PT0CWIXC] = " ";
        PG3REC.PG3SIZRC[PT0CWIXC] = " ";
      end
      PT0CW00.PT0CWIXC = PT0CW00.PT0CWIXC + 1; /* incr coln idx*/
    else
      PG3REC.SY5SZID[PT0CWIXC] = 0;
      PG3REC.SY4IDDSC[PT0CWIXC] = " ";
      PG3REC.XDVCD[PT0CWIXC] = " ";
      PG3REC.PG3SIZRC[PT0CWIXC] = " ";
      PT0CW00.PT0CWIXC = PT0CW00.PT0CWIXC + 1; /* Increment index*/
    end
  end

  PT0CW00.PT0CWIXC = 1; /* Initialize column index*/
  PT0CW00.PT0CWIXR = 1; /* Initialize record index*/

end // end PT0C218

// Format and converse the map
Function PT0C220()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    PTWREC.XXXMODID = PT0CM002.XXXMODID; /* Module identification*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If map is not formatted, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (PT0CM002.XXXCURDT == 0) /* Map is not formatted*/

    PT0C221(); /* Obtain the page to display*/

    PT0C222(); /* Select FBASE and open cursor*/

    while (PT0CW00.PT0CWSWC != "Y") /* Until end of cursor*/
      PT0C223(); /* Fetch selected FBASE rows*/
    end

    PT0C224(); /* Close the selected FBASE cursor*/

    PT0C225(); /* Format the data on the map*/

  end

   /* ------------------------------------------------------------*/
   /* If not all warehouses specified, protect warehouse code.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.XWHCD != "XX") /* Not all warehouses*/
    set PT0CM002.XWHCD skip; /* Protect warehouse code*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PT0CM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PT0CM002.PT0CMTTE = PT0CW00.PT0CMTTE; /* title*/
  PT0CM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PT0CM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0) /* Message to display*/

    PT0CM002.XXXMODID = PTWREC.XXXMODID; /* Module identification*/
    if (PTWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PTWREC.XXXMSGNO);
    end /* Message number*/
    set PT0CM002 alarm; /* Indicate sound alarm*/

  end

  converse PT0CM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PT0CM002.XXXMODID = " "; /* Module identification*/
  COMMAREA.CATOAP = PT0CM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PT0CM002.CAITEM; /* Application data*/


end // end PT0C220

// Obtain the page to display
Function PT0C221()
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.PT0CWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/

    TA5REC.TA5TSQIX = PT0CW00.PT0CWTSP; /* Page number*/

    PT0CS10(); /* Obtain temporary storage page*/

    PT0CW00.PT0CWBEG = 0; /* Beginning column*/

  end


end // end PT0C221

// Select ABASE and open cursor
Function PT0C222()
   /* ------------------------------------------------------------*/
   /* Initialize the end of cursor switch.*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CWSWC = "N"; /* End of cursor switch*/

  set PT0CW02 empty; /* M002 input/output*/

  PT0CW02.PT2KEY = PT0CW03.PT3KEY; /* Product key*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  set PT2REC empty; /* Clear row storage area*/

  PT2REC.PT2KEY = PT0CW02.PT2KEY; /* Product key*/
  PT2REC.XCTCD = "    "; /* Country code not used*/

  try
    call "IO3080" ("S1", SQLCA, PT2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PT0CM001.XXXMODID = "222"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PT0CM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABASE01"; /* Table view name*/
  TA1REC.TA1TBLKE = PT2REC.PT2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PT0CW00.PT0CWSWM = "1"; /* Map to be displayed switch*/

  exit stack; /* Exit to display map*/


end // end PT0C222

// Fetch the next ABASE row
Function PT0C223()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3080" ("N1", SQLCA, PT2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     && PT2REC.PT2KEY == PT0CW03.PT3KEY) /* and same product*/

      PT0CS11(); /* Format the display storage*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100 /* End of selected set*/
     || PT2REC.PT2KEY != PT0CW03.PT3KEY) /* or not same product*/

      PT0CW00.PT0CWSWC = "Y"; /* Indicate end of cursor*/

      if (PT0CW02.PT0CMPCT < 0) /* Standard percent total*/
        PT0CW02.PT0CMPCT = -100; /* Force to -100%*/
      end

      if (PT0CW02.PT0CMPCT > 0) /* Standard percent total*/
        PT0CW02.PT0CMPCT = 100; /* Force to 100%*/
      end

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PT0CM001.XXXMODID = "223"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PT0CM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABASE01"; /* Table view name*/
  TA1REC.TA1TBLKE = PT2REC.PT2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PT0CW00.PT0CWSWM = "1"; /* Map to be displayed switch*/

  exit stack; /* Exit to display map*/


end // end PT0C223

// Close selected ABASE cursor
Function PT0C224()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3080" ("C1", SQLCA, PT2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PT0CM001.XXXMODID = "224"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PT0CM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABASE01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PT0CW00.PT0CWSWM = "1"; /* Map to be displayed switch*/

  exit stack; /* Exit to display map*/


end // end PT0C224

// Format the display data
Function PT0C225()
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PT0CM002.SY1STNBR = PT0CW03.SY1STNBR; /* Style number*/
  PT0CM002.SY2CLRID = PT0CW03.SY2CLRID; /* Color identification*/
  PT0CM002.XDMCD = PT0CW03.XDMCD; /* Dimension code*/
  PT0CM002.SY1SSTNM = PT0CW03.SY1SSTNM; /* Style short name*/
  PT0CM002.SY2CLRAB = PT0CW03.SY2CLRAB; /* Color abbreviation*/
  PT0CM002.XGAABRV = PT0CW03.XGAABRV; /* Gender age abbreviation*/
  PT0CM002.XOWCD = PT0CW00.XOWCD; /* Owner group code*/
  PT0CM002.XPCSDESC = PT0CW03.XPCSDESC; /* Category description*/
  PT0CM002.XSUABRV = PT0CW03.XSUABRV; /* Silhouette abbreviation*/
  PT0CM002.PG1SC4CD = PT0CW03.PG1SC4CD; /* Scheduler code*/
  PT0CM002.XXXLSTNM = PT0CW03.XXXLSTNM; /* Last name*/
  PT0CM002.XUMCD = PT0CW03.XUMCD; /* Unit of measure*/
  PT0CM002.PC2INSEG = PT0CW03.PC2INSEG; /* Specification difference*/
  PT0CM002.XPGCD = PT0CW03.XPGCD; /* Packaging type*/
  PT0CM002.XWHCD = PT0CW03.XWHCD; /* Warehouse code*/
  PT0CM002.XWHABRV = PT0CW03.XWHABRV; /* Abbreviation*/

  PT0CM002.PT0CTPMO = PT0CW03.PT0CTPMO; /* Period month*/
  if (PT0CW03.PT0CTPRM != 99) /* Not futures month*/
    PT0CM002.PT0CTPRM = PT0CW03.PT0CTPRM; /* Receipt month*/
  end

  PT0CM002.PT2QTOT1[1] = PT0CW02.PT2QTOT1[1];
  PT0CM002.PT2QTOT2[1] = PT0CW02.PT2QTOT2[1];
  PT0CM002.PT3FUTOT = PT0CW03.PT3FUTOT;
  PT0CM002.PT3PRTOT = PT0CW03.PT3PRTOT;
  PT0CM002.PT2QTOT3[1] = PT0CW02.PT2QTOT3[1];
  PT0CM002.PT3POTOT = PT0CW03.PT3POTOT;
  PT0CM002.PT3AVTOT = PT0CW03.PT3AVTOT;
  PT0CM002.PT2QTOT1[2] = PT0CW02.PT2QTOT1[2];
  PT0CM002.PT2QTOT3[2] = PT0CW02.PT2QTOT3[2];
  PT0CM002.PT2QTOT2[2] = PT0CW02.PT2QTOT2[2];
  PT0CM002.PT0CMPCT = PT0CW02.PT0CMPCT;
  PT0CM002.PT0CMVAT = PT0CW02.PT0CMVAT;

  PT0CW00.PT0CWIXC = 8; /* Column index*/
  PT0CW00.PT0CWEND = PT0CW00.PT0CWBEG + 8; /* Ending column*/

  while (PT0CW00.PT0CWEND > PT0CW00.PT0CWBEG) /* Until end of columns*/

    if (PT0CW03.SY4IDDSC[PT0CWEND] <= " ") /* No size information*/

      set PT0CM002.SY4IDDSC[PT0CWIXC] skip, invisible;

    else

      PT0CM002.SY4IDDSC[PT0CWIXC] = PT0CW03.SY4IDDSC[PT0CWEND];
      PT0CM002.PT2QTY1[PT0CWIXC] = PT0CW02.PT2QTY1[PT0CWEND];
      PT0CM002.PT2QTY2[PT0CWIXC] = PT0CW02.PT2QTY2[PT0CWEND];
      PT0CM002.PT3FUBK[PT0CWIXC] = PT0CW03.PT3FUBK[PT0CWEND];
      PT0CM002.PT3PRBK[PT0CWIXC] = PT0CW03.PT3PRBK[PT0CWEND];
      PT0CM002.PT2QTY3[PT0CWIXC] = PT0CW02.PT2QTY3[PT0CWEND];
      PT0CM002.PT3PDTN[PT0CWIXC] = PT0CW03.PT3PDTN[PT0CWEND];
      PT0CM002.PT3AVQT[PT0CWIXC] = PT0CW03.PT3AVQT[PT0CWEND];
      PT0CM002.PT2PCT1[PT0CWIXC] = PT0CW02.PT2PCT1[PT0CWEND];
      PT0CM002.PT0CMVAR[PT0CWIXC] = PT0CW02.PT0CMVAR[PT0CWEND];

      PT0CW00.PT0CWEND = PT0CW00.PT0CWEND + 40; /* Adjust for trailer*/
      PT0CW00.PT0CWIXC = PT0CW00.PT0CWIXC + 8; /* Adjust for map output*/

      PT0CM002.PT2QTY1[PT0CWIXC] = PT0CW02.PT2QTY1[PT0CWEND];
      PT0CM002.PT2QTY3[PT0CWIXC] = PT0CW02.PT2QTY3[PT0CWEND];
      PT0CM002.PT2QTY2[PT0CWIXC] = PT0CW02.PT2QTY2[PT0CWEND];

      PT0CW00.PT0CWEND = PT0CW00.PT0CWEND - 40; /* Remove adjustment*/
      PT0CW00.PT0CWIXC = PT0CW00.PT0CWIXC - 8; /* Remove adjustment*/

    end

    PT0CW00.PT0CWEND = PT0CW00.PT0CWEND - 1; /* Decrement ending column*/
    PT0CW00.PT0CWIXC = PT0CW00.PT0CWIXC - 1; /* Decrement column index*/

  end


end // end PT0C225

// Check attention identifier
Function PT0C230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PT0CM002 initial; /* M002 input/output*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PT0C131(); /* Purge any temporary storage*/

      XSPT001(); /* Exit to another application*/

      PT0CW00.PT0CWSWM = "1"; /* Map to be displayed switch*/
      PT0CM001.XXXMODID = "230"; /* Module identification*/
      set PT0CM001.CATOAP cursor, bold; /* Highlight*/

    else

      PT0CM002.XXXMODID = "230"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PT0CM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      set PT0CM001 initial; /* M001 input/output*/

      PT0CW00.PT0CWSWM = "1"; /* Map to be displayed switch*/

      exit stack; /* Exit to display map*/

    end

    PT0C131(); /* Purge any temporary storage*/

    XSPT001(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    PT0CW00.PT0CWSWM = "1"; /* Map to be displayed switch*/
    PT0CM001.XXXMODID = "230"; /* Module identification*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5   /* and PF5 was not pressed*/
   && converseVar.eventKey not pf6   /* and PF6 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf17  /* and PF17 was not pressed*/
   && converseVar.eventKey not pf18) /* and PF18 was not pressed*/

    PT0CM002.XXXMODID = "230"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end


end // end PT0C230

// Reset highlighted fields
Function PT0C240()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PT0CM002.XWHCD initialAttributes; /* Warehouse code*/
  set PT0CM002.PT0CMSSA initialAttributes; /* Size scroll amount*/
  set PT0CM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PT0CM002.CAITEM initialAttributes; /* Commarea application data*/


end // end PT0C240

// Verify the entered data
Function PT0C250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PT0CM002.XXXMODID = "250"; /* Module identification*/
    set PT0CM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Restore any previously overlaid warehouse abbreviation.*/
   /* ------------------------------------------------------------*/

  PT0CM002.XWHABRV = PT0CW03.XWHABRV; /* Abbreviation*/

   /* ------------------------------------------------------------*/
   /* If PREV STY was requested, ensure that selections exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5) /* PREV STY was requested*/

    PT0CW00.PT0CWIXL = PT0CW00.PT0CWIXS - 1; /* Previous selection*/

    while (PT0CW00.PT0CWIXL >= 1 /* Until top of selections*/
     && PT0CM001.SY1STNBR[PT0CWIXL] <= " ") /* or selection found*/

      PT0CW00.PT0CWIXL = PT0CW00.PT0CWIXL - 1; /* Decrement index*/

    end

    if (PT0CW00.PT0CWIXL < 1) /* No previous selection*/

      PT0CM002.XXXMODID = "250"; /* Module identification*/
      converseLib.validationFailed(41); /* No previous style to display*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If NEXT STY was requested, ensure that selections exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* NEXT STY was requested*/

    PT0CW00.PT0CWIXL = PT0CW00.PT0CWIXS + 1; /* Next selection*/

    while (PT0CW00.PT0CWIXL <= 10 /* Until end of selections*/
     && PT0CM001.SY1STNBR[PT0CWIXL] <= " ") /* or selection found*/

      PT0CW00.PT0CWIXL = PT0CW00.PT0CWIXL + 1; /* Increment index*/

    end

    if (PT0CW00.PT0CWIXL > 10) /* No more selections*/

      PT0CM002.XXXMODID = "250"; /* Module identification*/
      converseLib.validationFailed(42); /* No more styles to display*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If FRWD was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* FRWD was requested*/
    PT0C251(); /* Verify FRWD request*/
  end

   /* ------------------------------------------------------------*/
   /* If LEFT was requested, ensure that columns exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* LEFT was requested*/
   && PT0CW00.PT0CWBEG == 0)       /* and at beginning column*/

    PT0CM002.XXXMODID = "250"; /* Module identification*/
    set PT0CM002.PT0CMSSA cursor; /* Establish cursor position*/
    converseLib.validationFailed(49); /* No previous sizes to display*/

  end

   /* ------------------------------------------------------------*/
   /* If RIGHT was requested, ensure that columns exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11 /* RIGHT was requested*/
   && PT0CW00.PT0CWBEG == PT0CW03.PT0CWMAX) /* and at maximum column*/

    PT0CM002.XXXMODID = "250"; /* Module identification*/
    set PT0CM002.PT0CMSSA cursor; /* Establish cursor position*/
    converseLib.validationFailed(50); /* No more sizes to display*/

  end

   /* ------------------------------------------------------------*/
   /* If PREV CLR was requested, ensure that colors exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17) /* PREV CLR was requested*/
    PT0C252(); /* Verify PREV CLR request*/
  end

   /* ------------------------------------------------------------*/
   /* If NEXT CLR was requested, ensure that colors exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf18) /* NEXT CLR was requested*/
    PT0C253(); /* Verify NEXT CLR request*/
  end

   /* ------------------------------------------------------------*/
   /* If size scroll amount changed, verify the number entered.*/
   /* ------------------------------------------------------------*/

  if (PT0CM002.PT0CMSSA != PT0CW00.PT0CMSSA) /* Size scroll changed*/

    if (PT0CM002.PT0CMSSA < 1 /* Less than 1*/
     || PT0CM002.PT0CMSSA > 99) /* or greater than 99*/

      PT0CM002.XXXMODID = "250"; /* Module identification*/
      set PT0CM002.PT0CMSSA cursor, bold; /* Highlight*/
      converseLib.validationFailed(53); /* Amount missing or invalid*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If period scroll amount changed, verify the number entered.*/
   /* ------------------------------------------------------------*/

  if (PT0CM002.PT0CMPSA != PT0CW00.PT0CMPSA) /* Period scroll changed*/

    if (PT0CM002.PT0CMPSA < 1 /* Less than 1*/
     || PT0CM002.PT0CMPSA > 99) /* or greater than 99*/

      PT0CM002.XXXMODID = "250"; /* Module identification*/
      set PT0CM002.PT0CMPSA cursor, bold; /* Highlight*/
      converseLib.validationFailed(52); /* Amount missing or invalid*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if warehouse change is not allowed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER not pressed*/
   && PT0CM002.XWHCD != PT0CW03.XWHCD) /* and warehouse changed*/

    PT0CM002.XXXMODID = "250"; /* Module identification*/
    set PT0CM002.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, determine the warehouse to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    if (PT0CM002.XWHCD == PT0CW03.XWHCD) /* Warehouse not changed*/

      PT0C254(); /* Find the next warehouse*/
    else
      PT0C255(); /* Verify the entered warehouse*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end PT0C250

// Verify FRWD request
Function PT0C251()
   /* ------------------------------------------------------------*/
   /* If the last page, indicate no more periods to display.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.PT0CWTSP >= PT0CW00.TA5TSQIX) /* No more pages*/

    PT0CM002.XXXMODID = "251"; /* Module identification*/
    set PT0CM002.PT0CMPSA cursor; /* Establish cursor position*/
    converseLib.validationFailed(46); /* No more periods to display*/

  else

    /* ------------------------------------------------------------*/
     /* Increment the page number by the period scroll amount.*/
    /* ------------------------------------------------------------*/

    PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSP + PT0CM002.PT0CMPSA;

    if (PT0CW00.PT0CWTSS > PT0CW00.TA5TSQIX) /* Past maximum*/

      PT0CW00.PT0CWTSS = PT0CW00.TA5TSQIX; /* Default to maximum*/

      PTWREC.XXXMODID = "251"; /* Module identification*/
      PTWREC.XXXMSGNO = 55; /* Last period is shown*/

    end

    TA5REC.TA5TSQIX = PT0CW00.PT0CWTSS; /* Page number*/

    PT0CS10(); /* Obtain temporary storage page*/

    /* ------------------------------------------------------------*/
     /* Determine if scrolled past last period for the warehouse.*/
    /* ------------------------------------------------------------*/

    if (PT0CW02.PT2KEY != PT0CW03.PT3KEY) /* Not same base key*/

      while (PT0CW02.PT2KEY != PT0CW03.PT3KEY) /* Until same base key*/

        PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSS - 1; /* Decrement page number*/

        TA5REC.TA5TSQIX = PT0CW00.PT0CWTSS; /* Page number*/

        PT0CS10(); /* Obtain temporary storage page*/

      end

      PTWREC.XXXMODID = "251"; /* Module identification*/
      PTWREC.XXXMSGNO = 55; /* Last period is shown*/

    end

    /* ------------------------------------------------------------*/
     /* If ending page is the first period, indicate no more pages.*/
    /* ------------------------------------------------------------*/

    if (PT0CW03.PT0CWSWP == "Y") /* First period*/

      PT0CM002.XXXMODID = "251"; /* Module identification*/
      set PT0CM002.PT0CMPSA cursor; /* Establish cursor position*/
      converseLib.validationFailed(46); /* No more periods to display*/

    else

      /* ------------------------------------------------------------*/
       /* Otherwise, obtain the beginning period for the display.*/
      /* ------------------------------------------------------------*/

      PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSS - 1; /* Beginning page number*/

      TA5REC.TA5TSQIX = PT0CW00.PT0CWTSS; /* Page number*/

      PT0CS10(); /* Obtain temporary storage page*/

      /* ------------------------------------------------------------*/
       /* If a first period, increment the beginning page number.*/
      /* ------------------------------------------------------------*/

      if (PT0CW03.PT0CWSWP == "Y") /* First period*/
        PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSS + 1; /* Beginning page number*/
      end

    end

    /* ------------------------------------------------------------*/
     /* Reestablish the current temporary storage page.*/
    /* ------------------------------------------------------------*/

    TA5REC.TA5TSQIX = PT0CW00.PT0CWTSP; /* Page number*/

    PT0CS10(); /* Obtain temporary storage page*/

  end


end // end PT0C251

// Verify PREV CLR request
Function PT0C252()
   /* ------------------------------------------------------------*/
   /* Search the previous pages for another color for the style.*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSP; /* Current page number*/

  while (PT0CW00.PT0CWTSS >= 1                 /* Until top of pages*/
   && PT0CM002.SY1STNBR == PT0CW03.SY1STNBR /* or style changes*/
   && PT0CM002.SY2CLRID == PT0CW03.SY2CLRID) /* or color changes*/

    PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSS - 1; /* Previous page number*/
    PT0CW03.PT0CWSWP = "N"; /* First period switch*/

    while (PT0CW00.PT0CWTSS >= 1 /* Until top of pages*/
     && PT0CW03.PT0CWSWP != "Y") /* or first period of product*/

      TA5REC.TA5TSQIX = PT0CW00.PT0CWTSS; /* Page number*/

      PT0CS10(); /* Obtain temporary storage page*/

      if (PT0CW03.PT0CWSWP != "Y") /* Not first period*/
        PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSS - 1; /* Decrement page number*/
      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If no page found, indicate no previous color to display.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.PT0CWTSS < 1 /* No page found*/
   || PT0CM002.SY1STNBR != PT0CW03.SY1STNBR) /* or style changed*/

    PT0CM002.XXXMODID = "252"; /* Module identification*/
    converseLib.validationFailed(43); /* No previous color to display*/

  end

   /* ------------------------------------------------------------*/
   /* Reestablish the current temporary storage page.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = PT0CW00.PT0CWTSP; /* Page number*/

  PT0CS10(); /* Obtain temporary storage page*/


end // end PT0C252

// Verify NEXT CLR request
Function PT0C253()
   /* ------------------------------------------------------------*/
   /* Search the following pages for another color for the style.*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSP; /* Current page number*/

  while (PT0CW00.PT0CWTSS <= PT0CW00.TA5TSQIX  /* Until end of pages*/
   && PT0CM002.SY1STNBR == PT0CW03.SY1STNBR /* or style changes*/
   && PT0CM002.SY2CLRID == PT0CW03.SY2CLRID) /* or color changes*/

    PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSS + 1; /* Next page number*/
    PT0CW03.PT0CWSWP = "N"; /* First period switch*/

    while (PT0CW00.PT0CWTSS <= PT0CW00.TA5TSQIX /* Until end of pages*/
     && PT0CW03.PT0CWSWP != "Y") /* or first period of product*/

      TA5REC.TA5TSQIX = PT0CW00.PT0CWTSS; /* Page number*/

      PT0CS10(); /* Obtain temporary storage page*/

      if (PT0CW03.PT0CWSWP != "Y") /* Not first period*/
        PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSS + 1; /* Increment page number*/
      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If no page was found, indicate no more colors to display.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.PT0CWTSS > PT0CW00.TA5TSQIX /* No page found*/
   || PT0CM002.SY1STNBR != PT0CW03.SY1STNBR) /* or style changed*/

    PT0CM002.XXXMODID = "253"; /* Module identification*/
    converseLib.validationFailed(44); /* No more colors to display*/

  end

   /* ------------------------------------------------------------*/
   /* Reestablish the current temporary storage page.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = PT0CW00.PT0CWTSP; /* Page number*/

  PT0CS10(); /* Obtain temporary storage page*/


end // end PT0C253

// Find the next warehouse
Function PT0C254()
   /* ------------------------------------------------------------*/
   /* Initialize the page number and first period switch.*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSP + 1; /* Initialize page number*/
  PT0CW03.PT0CWSWP = "N"; /* First period switch*/

   /* ------------------------------------------------------------*/
   /* Find the next first period page in temporary storage.*/
   /* ------------------------------------------------------------*/

  while (PT0CW00.PT0CWTSS <= PT0CW00.TA5TSQIX /* Until end of pages*/
   && PT0CW03.PT0CWSWP != "Y") /* or first period found*/

    TA5REC.TA5TSQIX = PT0CW00.PT0CWTSS; /* Page number*/

    PT0CS10(); /* Obtain temporary storage page*/

    if (PT0CW03.PT0CWSWP != "Y") /* Not first period*/
      PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSS + 1; /* Increment page*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If page not found, indicate no more warehouses to display.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.PT0CWTSS > PT0CW00.TA5TSQIX   /* No page found*/
   || PT0CM002.SY1STNBR != PT0CW03.SY1STNBR /* or style changed*/
   || PT0CM002.SY2CLRID != PT0CW03.SY2CLRID) /* or color changed*/

    PT0CM002.XXXMODID = "254"; /* Module identification*/
    converseLib.validationFailed(48); /* No more warehouses to display*/

  end

   /* ------------------------------------------------------------*/
   /* Reestablish the current temporary storage page.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = PT0CW00.PT0CWTSP; /* Page number*/

  PT0CS10(); /* Obtain temporary storage page*/


end // end PT0C254

// Verify the entered warehouse
Function PT0C255()
   /* ------------------------------------------------------------*/
   /* Verify that a valid warehouse code was entered.*/
   /* ------------------------------------------------------------*/

  if (PT0CM002.XWHCD == "**"         /* Corporate warehouse*/
   || PT0CM002.XWHCD in XWHTBL.XWHCD /* or code in table*/
   || PT0CM002.XWHCD == "DP")        /* Promo DRS*/

    if (PT0CM002.XWHCD == "**") /* Corporate warehouse*/

      PT0CM002.XWHABRV = "CORP WHSE"; /* Abbreviation*/
    else
      PT0CM002.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* Abbreviation*/

      if (PT0CM002.XWHCD == "DP")
        PT0CM002.XWHABRV = "PROMO DRS";
      end

    end

    /* ------------------------------------------------------------*/
     /* Search the pages for a match on warehouse, style and color.*/
    /* ------------------------------------------------------------*/

    PT0CW00.PT0CWTSS = 1; /* Initialize page number*/
    PT0CW03.PT0CWSWP = "N"; /* First period switch*/

    while (PT0CM002.XWHCD != PT0CW03.XWHCD       /* Until same warehouse*/
     || PT0CM002.SY1STNBR != PT0CW03.SY1STNBR /* and same style*/
     || PT0CM002.SY2CLRID != PT0CW03.SY2CLRID /* and same color*/
     || PT0CW03.PT0CWSWP != "Y") /* and first period of product*/

      TA5REC.TA5TSQIX = PT0CW00.PT0CWTSS; /* Page number*/

      PT0CS10(); /* Obtain temporary storage page*/

      if (PT0CM002.XWHCD != PT0CW03.XWHCD       /* Warehouse not same*/
       || PT0CM002.SY1STNBR != PT0CW03.SY1STNBR /* or style not same*/
       || PT0CM002.SY2CLRID != PT0CW03.SY2CLRID /* or color not same*/
       || PT0CW03.PT0CWSWP != "Y")              /* or not first period*/

        PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSS + 1; /* Increment page*/

        if (PT0CW00.PT0CWTSS > PT0CW00.TA5TSQIX) /* No page found*/

          PT0CW03.XWHCD = PT0CM002.XWHCD; /* Warehouse*/
          PT0CW03.SY1STNBR = PT0CM002.SY1STNBR; /* Style*/
          PT0CW03.SY2CLRID = PT0CM002.SY2CLRID; /* Color*/
          PT0CW03.PT0CWSWP = "Y"; /* First period switch*/

        end

      end

    end

    /* ------------------------------------------------------------*/
     /* If no page was found, indicate no product availability.*/
    /* ------------------------------------------------------------*/

    if (PT0CW00.PT0CWTSS > PT0CW00.TA5TSQIX) /* No page found*/

      set PT0CM002.XWHCD cursor, bold; /* Highlight*/
      PT0CM002.XXXMODID = "255"; /* Module identification*/
      converseLib.validationFailed(51); /* No availability for warehouse*/

    end

    /* ------------------------------------------------------------*/
     /* Reestablish the current temporary storage page.*/
    /* ------------------------------------------------------------*/

    TA5REC.TA5TSQIX = PT0CW00.PT0CWTSP; /* Page number*/

    PT0CS10(); /* Obtain temporary storage page*/

  else

    /* ------------------------------------------------------------*/
     /* Indicate that warehouse code is missing or invalid.*/
    /* ------------------------------------------------------------*/

    PT0CM002.XWHABRV = " "; /* Clear abbreviation*/

    set PT0CM002.XWHCD cursor, bold; /* Highlight*/
    PT0CM002.XXXMODID = "255"; /* Module identification*/
    converseLib.validationFailed(36); /* Indicate missing or invalid*/

  end


end // end PT0C255

// Process valid input request
Function PT0C260()
   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, adjust the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    PT0CW00.PT0CWTSP = PT0CW00.PT0CWTSS; /* Page number*/
  end

   /* ------------------------------------------------------------*/
   /* Save the key map data and clear the map input/output area.*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CMSSA = PT0CM002.PT0CMSSA; /* Size scroll amount*/

  set PT0CM002 initial; /* M002 input/output*/

   /* ------------------------------------------------------------*/
   /* Commit all changes to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 1;
  sysLib.commit(); /* Commit all changes*/

   /* ------------------------------------------------------------*/
   /* If PREV or NEXT STY was requested, adjust selection index.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5) /* PREV was requested*/

    PT0CW00.PT0CWIXS = PT0CW00.PT0CWIXS - 1; /* Decrement index*/

    while (PT0CM001.SY1STNBR[PT0CWIXS] <= " ") /* Bypass blank lines*/
      PT0CW00.PT0CWIXS = PT0CW00.PT0CWIXS - 1; /* Decrement index*/
    end

    set PT0CM001.SY1STNBR[PT0CWIXS] cursor; /* Position cursor*/
    PT0CW00.PT0CWSWR = "Y"; /* Request for data switch*/

  end

  if (converseVar.eventKey is pf6) /* NEXT was requested*/

    PT0CW00.PT0CWIXS = PT0CW00.PT0CWIXS + 1; /* Increment index*/

    while (PT0CM001.SY1STNBR[PT0CWIXS] <= " ") /* Bypass blank lines*/
      PT0CW00.PT0CWIXS = PT0CW00.PT0CWIXS + 1; /* Increment index*/
    end

    set PT0CM001.SY1STNBR[PT0CWIXS] cursor; /* Position cursor*/
    PT0CW00.PT0CWSWR = "Y"; /* Request for data switch*/

  end

   /* ------------------------------------------------------------*/
   /* If FRWD was requested, adjust the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* FRWD was requested*/

    set PT0CM003 initial; /* M003 input/output*/

    PT0CW00.PT0CWSWM = "3"; /* Map to be displayed switch*/
    PT0CW00.PT0CWTSP = PT0CW00.PT0CWTSS; /* Page number*/

    set PT0CM003.PT0CMPSA cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If LEFT or RIGHT was requested, adjust beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* LEFT was requested*/

    PT0CW00.PT0CWBEG = PT0CW00.PT0CWBEG - PT0CW00.PT0CMSSA;

    if (PT0CW00.PT0CWBEG < 0) /* Past minimum*/

      PT0CW00.PT0CWBEG = 0; /* Default to minimum*/

      PT0CM002.XXXMODID = "260"; /* Module identification*/
      PTWREC.XXXMSGNO = 56; /* First size is shown*/

    end

    set PT0CM002.PT0CMSSA cursor; /* Establish cursor position*/

  end

  if (converseVar.eventKey is pf11) /* RIGHT was requested*/

    PT0CW00.PT0CWBEG = PT0CW00.PT0CWBEG + PT0CW00.PT0CMSSA;

    if (PT0CW00.PT0CWBEG > PT0CW03.PT0CWMAX) /* Past maximum*/

      PT0CW00.PT0CWBEG = PT0CW03.PT0CWMAX; /* Default to maximum*/

      PT0CM002.XXXMODID = "260"; /* Module identification*/
      PTWREC.XXXMSGNO = 57; /* Last size is shown*/

    end

    set PT0CM002.PT0CMSSA cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If PRINT was requested, format and submit the request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* PRINT was requested*/
    if (TA3REC.TA3RGNID == "03") /* IF PRODUCTION REGION*/
      PT0C261(); /* Format/submit print request*/
    else /**/
      PT0C262(); /* FORMAT/SUBMIT PRINT TO TEST REGION*/
    end /**/
  end

   /* ------------------------------------------------------------*/
   /* If BL AVAL was requested, indicate display Map 004.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* BL AVAL was requested*/

    set PT0CM004 initial; /* M004 input/output*/

    PT0CW00.PT0CWSWM = "4"; /* Map to be displayed switch*/
    PT0CW00.PT0CWSWR = "Y"; /* Request for data switch*/

    PT0CM004.XWHCD = PT0CW03.XWHCD; /* Warehouse*/
    PT0CM004.SY1STNBR = PT0CW03.SY1STNBR; /* Style*/
    PT0CM004.SY2CLRID = PT0CW03.SY2CLRID; /* Color*/

  end

   /* ------------------------------------------------------------*/
   /* If PREV or NEXT CLR was requested, adjust page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17 /* PREV CLR was requested*/
   || converseVar.eventKey is pf18) /* or NEXT CLR was requested*/

    PT0CW00.PT0CWTSP = PT0CW00.PT0CWTSS; /* Page number*/

  end


end // end PT0C260

// Format/submit print request
Function PT0C261()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PT0CW00.PT0CWIXT = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PT0CW00.PT0CWIXT > 0) /* Until end of table*/

    if (PT0CT01.TARTYPE[PT0CWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters for the product/warehouse being viewed.*/
      /* ------------------------------------------------------------*/

      PT0CW01.XWHCD = PT0CW03.XWHCD; /* Warehouse*/
      PT0CW01.SY1STNBR = PT0CW03.SY1STNBR; /* Style*/
      PT0CW01.SY2CLRID = PT0CW03.SY2CLRID; /* Color*/
      PT0CW01.XDMCD = PT0CW03.XDMCD; /* Dimension*/
      PT0CW01.XOWCD = PT0CW03.XOWCD; /* OWNER*/

      PT0CS06(); /* Format selection parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      if (PT0CW00.XGPCD == "01" /* In Store Promo*/
       && PT0CT01.TARTYPE[PT0CWIXT] == "A") /* apparel  bypass*/

        PT0CW00.PT0CWIXT = PT0CW00.PT0CWIXT + 1; /* Increment table index*/

      end

      if (PT0CW00.XGPCD == "03" /* Apparel*/
       && PT0CT01.TARTYPE[PT0CWIXT] == "S") /* In Store*/

        PT0CW00.PT0CWIXT = PT0CW00.PT0CWIXT + 1; /* Increment table index*/

      end

      TA6REC.TARJCL[TA6INDEX] = PT0CT01.TARJCL[PT0CWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT0CT01.TARTYPE[PT0CWIXT]; /* Type*/


      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT0CT01.TARJCL[PT0CWIXT] == "/*EOF") /* End of table*/

      PT0CW00.PT0CWIXT = 0; /* Indicate end of table*/
    else
      PT0CW00.PT0CWIXT = PT0CW00.PT0CWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PT0CM002.XXXMODID = "261"; /* Module identification*/

  PT0CS07(); /* Submit the JCL*/


end // end PT0C261

// Format/submit print request
Function PT0C262()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PT0CW00.PT0CWIXT = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PT0CW00.PT0CWIXT > 0) /* Until end of table*/

    if (PT0CT03.TARTYPE[PT0CWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters for the product/warehouse being viewed.*/
      /* ------------------------------------------------------------*/

      PT0CW01.XWHCD = PT0CW03.XWHCD; /* Warehouse*/
      PT0CW01.SY1STNBR = PT0CW03.SY1STNBR; /* Style*/
      PT0CW01.SY2CLRID = PT0CW03.SY2CLRID; /* Color*/
      PT0CW01.XDMCD = PT0CW03.XDMCD; /* Dimension*/
      PT0CW01.XOWCD = PT0CW03.XOWCD; /* OWNER*/

      PT0CS13(); /* Format selection parameters FOR TEST*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      if (PT0CW00.XGPCD == "01" /* In Store Promo*/
       && PT0CT03.TARTYPE[PT0CWIXT] == "A") /* apparel  bypass*/

        PT0CW00.PT0CWIXT = PT0CW00.PT0CWIXT + 1; /* Increment table index*/

      end

      if (PT0CW00.XGPCD == "03" /* Apparel*/
       && PT0CT03.TARTYPE[PT0CWIXT] == "S") /* In Store*/

        PT0CW00.PT0CWIXT = PT0CW00.PT0CWIXT + 1; /* Increment table index*/

      end

      TA6REC.TARJCL[TA6INDEX] = PT0CT03.TARJCL[PT0CWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT0CT03.TARTYPE[PT0CWIXT]; /* Type*/


      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT0CT03.TARJCL[PT0CWIXT] == "/*EOF") /* End of table*/

      PT0CW00.PT0CWIXT = 0; /* Indicate end of table*/
    else
      PT0CW00.PT0CWIXT = PT0CW00.PT0CWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PT0CM002.XXXMODID = "261"; /* Module identification*/

  PT0CS07(); /* Submit the JCL*/


end // end PT0C262

// List the rows in the table
Function PT0C300()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT0C320(); /* Format and display the map*/

  PT0C330(); /* Check attention identifier*/

  PT0C340(); /* Reset fields to normal intensity*/

  PT0C350(); /* Verify the entered data*/

  PT0C360(); /* Process valid input request*/


end // end PT0C300

// Format and converse the map
Function PT0C320()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    PTWREC.XXXMODID = PT0CM003.XXXMODID; /* Module identification*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If map is not formatted, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (PT0CM003.XXXCURDT == 0) /* Map is not formatted*/

    PT0CW00.PT0CWIXL = 1; /* Initialize period index*/
    PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSP; /* Page number*/

    while (PT0CW00.PT0CWIXL <= 2 /* Until end of periods*/
     && PT0CW00.PT0CWTSS <= PT0CW00.TA5TSQIX) /* or end of pages*/

      PT0C321(); /* Format the data on the map*/

      PT0CW00.PT0CWIXL = PT0CW00.PT0CWIXL + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If not all warehouses specified, protect warehouse code.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.XWHCD != "XX") /* Not all warehouses*/
    set PT0CM003.XWHCD skip; /* Protect warehouse code*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PT0CM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PT0CM003.PT0CMTTE = PT0CW00.PT0CMTTE; /* Title*/
  PT0CM003.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PT0CM003.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0) /* Message to display*/

    PT0CM003.XXXMODID = PTWREC.XXXMODID; /* Module identification*/
    if (PTWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PTWREC.XXXMSGNO);
    end /* Message number*/
    set PT0CM003 alarm; /* Indicate sound alarm*/

  end

  converse PT0CM003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PT0CM003.XXXMODID = " "; /* Module identification*/
  COMMAREA.CATOAP = PT0CM003.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PT0CM003.CAITEM; /* Application data*/


end // end PT0C320

// Format the display data
Function PT0C321()
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.PT0CWTSS != TA5REC.TA5TSQIX) /* Desired page not current*/

    TA5REC.TA5TSQIX = PT0CW00.PT0CWTSS; /* Page number*/

    PT0CS10(); /* Obtain temporary storage page*/

  end

   /* ------------------------------------------------------------*/
   /* If not the same product number, reestablish the previous*/
   /* temporary storage page and return to previous process.*/
   /* ------------------------------------------------------------*/

  if (PT0CW02.PT2KEY != PT0CW03.PT3KEY) /* Not same product*/

    TA5REC.TA5TSQIX = PT0CW00.PT0CWTSS - 1; /* Decrement page number*/

    PT0CS10(); /* Obtain temporary storage page*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.PT0CWIXL == 1) /* First time through*/

    PT0CM003.SY1STNBR = PT0CW03.SY1STNBR; /* Style number*/
    PT0CM003.SY2CLRID = PT0CW03.SY2CLRID; /* Color identification*/
    PT0CM003.XDMCD = PT0CW03.XDMCD; /* Dimension code*/
    PT0CM003.SY1SSTNM = PT0CW03.SY1SSTNM; /* Style short name*/
    PT0CM003.SY2CLRAB = PT0CW03.SY2CLRAB; /* Color abbreviation*/
    PT0CM003.XGAABRV = PT0CW03.XGAABRV; /* Gender age abbreviation*/
    PT0CM003.XOWCD = PT0CW00.XOWCD; /* Owner group code*/
    PT0CM003.XPCSDESC = PT0CW03.XPCSDESC; /* Category description*/
    PT0CM003.XSUABRV = PT0CW03.XSUABRV; /* Silhouette abbreviation*/
    PT0CM003.PG1SC4CD = PT0CW03.PG1SC4CD; /* Scheduler code*/
    PT0CM003.XXXLSTNM = PT0CW03.XXXLSTNM; /* Last name*/
    PT0CM003.XUMCD = PT0CW03.XUMCD; /* Unit of measure*/
    PT0CM003.PC2INSEG = PT0CW03.PC2INSEG; /* Specification difference*/
    PT0CM003.XPGCD = PT0CW03.XPGCD; /* Packaging type*/
    PT0CM003.XWHCD = PT0CW03.XWHCD; /* Warehouse code*/
    PT0CM003.XWHABRV = PT0CW03.XWHABRV; /* Abbreviation*/
    PT0CM003.PT2QTOT2 = PT0CW02.PT2QTOT2[2]; /* Future availability*/
    PT0CM003.PT0CMPCT = PT0CW02.PT0CMPCT; /* Size percent total*/
    PT0CM003.PT0CMVAT = PT0CW02.PT0CMVAT; /* Variance total*/

  end

  PT0CM003.PT0CTPMO[PT0CWIXL] = PT0CW03.PT0CTPMO; /* Period month*/
  if (PT0CW03.PT0CTPRM != "99") /* Not futures month*/
    PT0CM003.PT0CTPRM[PT0CWIXL] = PT0CW03.PT0CTPRM; /* Receipt month*/
  end

  PT0CM003.PT3FUTOT[PT0CWIXL] = PT0CW03.PT3FUTOT;
  PT0CM003.PT3PRTOT[PT0CWIXL] = PT0CW03.PT3PRTOT;
  PT0CM003.PT3POTOT[PT0CWIXL] = PT0CW03.PT3POTOT;
  PT0CM003.PT3AVTOT[PT0CWIXL] = PT0CW03.PT3AVTOT;

  PT0CW00.PT0CWIXC = PT0CW00.PT0CWIXL * 8; /* Column index*/
  PT0CW00.PT0CWEND = PT0CW00.PT0CWBEG + 8; /* Ending column*/

  while (PT0CW00.PT0CWEND > PT0CW00.PT0CWBEG) /* Until end of columns*/

    if (PT0CW03.SY4IDDSC[PT0CWEND] <= " ") /* No size information*/

      if (PT0CW00.PT0CWIXL == 1) /* First time through*/
        set PT0CM003.SY4IDDSC[PT0CWIXC] skip, invisible;
      end

    else

      if (PT0CW00.PT0CWIXL == 1) /* First time through*/

        PT0CM003.SY4IDDSC[PT0CWIXC] = PT0CW03.SY4IDDSC[PT0CWEND];
        PT0CM003.PT2PCT1[PT0CWIXC] = PT0CW02.PT2PCT1[PT0CWEND];
        PT0CM003.PT0CMVAR[PT0CWIXC] = PT0CW02.PT0CMVAR[PT0CWEND];

        PT0CW00.PT0CWEND = PT0CW00.PT0CWEND + 40; /* Adjust for trailer*/

        PT0CM003.PT2QTY2[PT0CWIXC] = PT0CW02.PT2QTY2[PT0CWEND];

        PT0CW00.PT0CWEND = PT0CW00.PT0CWEND - 40; /* Remove adjustment*/

      end

      PT0CM003.PT3FUBK[PT0CWIXC] = PT0CW03.PT3FUBK[PT0CWEND];
      PT0CM003.PT3PRBK[PT0CWIXC] = PT0CW03.PT3PRBK[PT0CWEND];
      PT0CM003.PT3PDTN[PT0CWIXC] = PT0CW03.PT3PDTN[PT0CWEND];
      PT0CM003.PT3AVQT[PT0CWIXC] = PT0CW03.PT3AVQT[PT0CWEND];

    end

    PT0CW00.PT0CWEND = PT0CW00.PT0CWEND - 1; /* Decrement ending column*/
    PT0CW00.PT0CWIXC = PT0CW00.PT0CWIXC - 1; /* Decrement column index*/

  end

   /* ------------------------------------------------------------*/
   /* Increment the temporary storage page number.*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSS + 1; /* Increment page number*/


end // end PT0C321

// Check attention identifier
Function PT0C330()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PT0CM003 initial; /* M003 input/output*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PT0C131(); /* Purge any temporary storage*/

      XSPT001(); /* Exit to another application*/

      PT0CW00.PT0CWSWM = "1"; /* Map to be displayed switch*/
      PT0CM001.XXXMODID = "330"; /* Module identification*/
      set PT0CM001.CATOAP cursor, bold; /* Highlight*/

    else

      PT0CM003.XXXMODID = "330"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PT0CM003"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      set PT0CM001 initial; /* M001 input/output*/

      PT0CW00.PT0CWSWM = "1"; /* Map to be displayed switch*/

      exit stack; /* Exit to display map*/

    end

    PT0C131(); /* Purge any temporary storage*/

    XSPT001(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    PT0CW00.PT0CWSWM = "1"; /* Map to be displayed switch*/
    PT0CM001.XXXMODID = "330"; /* Module identification*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5   /* and PF5 was not pressed*/
   && converseVar.eventKey not pf6   /* and PF6 was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf17  /* and PF17 was not pressed*/
   && converseVar.eventKey not pf18) /* and PF18 was not pressed*/

    PT0CM003.XXXMODID = "330"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end


end // end PT0C330

// Reset highlighted fields
Function PT0C340()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PT0CM003.XWHCD initialAttributes; /* Warehouse code*/
  set PT0CM003.PT0CMPSA initialAttributes; /* Period scroll amount*/
  set PT0CM003.PT0CMSSA initialAttributes; /* Size scroll amount*/
  set PT0CM003.CATOAP initialAttributes; /* Commarea TO application*/
  set PT0CM003.CAITEM initialAttributes; /* Commarea application data*/


end // end PT0C340

// Verify the entered data
Function PT0C350()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PT0CM003.XXXMODID = "350"; /* Module identification*/
    set PT0CM003.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Restore any previously overlaid warehouse abbreviation.*/
   /* ------------------------------------------------------------*/

  PT0CM003.XWHABRV = PT0CW03.XWHABRV; /* Abbreviation*/

   /* ------------------------------------------------------------*/
   /* If PREV STY was requested, ensure that selections exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5) /* PREV STY was requested*/

    PT0CW00.PT0CWIXL = PT0CW00.PT0CWIXS - 1; /* Previous selection*/

    while (PT0CW00.PT0CWIXL >= 1 /* Until top of selections*/
     && PT0CM001.SY1STNBR[PT0CWIXL] <= " ") /* or selection found*/

      PT0CW00.PT0CWIXL = PT0CW00.PT0CWIXL - 1; /* Decrement index*/

    end

    if (PT0CW00.PT0CWIXL < 1) /* No previous selection*/

      PT0CM003.XXXMODID = "350"; /* Module identification*/
      converseLib.validationFailed(41); /* No previous style to display*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If NEXT STY was requested, ensure that selections exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* NEXT STY was requested*/

    PT0CW00.PT0CWIXL = PT0CW00.PT0CWIXS + 1; /* Next selection*/

    while (PT0CW00.PT0CWIXL <= 10 /* Until end of selections*/
     && PT0CM001.SY1STNBR[PT0CWIXL] <= " ") /* or selection found*/

      PT0CW00.PT0CWIXL = PT0CW00.PT0CWIXL + 1; /* Increment index*/

    end

    if (PT0CW00.PT0CWIXL > 10) /* No more selections*/

      PT0CM003.XXXMODID = "350"; /* Module identification*/
      converseLib.validationFailed(42); /* No more styles to display*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If BACK was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* BACK was requested*/
    PT0C351(); /* Verify BACK request*/
  end

   /* ------------------------------------------------------------*/
   /* If FRWD was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* FRWD was requested*/
    PT0C352(); /* Verify FRWD request*/
  end

   /* ------------------------------------------------------------*/
   /* If LEFT was requested, ensure that columns exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* LEFT was requested*/
   && PT0CW00.PT0CWBEG == 0)       /* and at beginning column*/

    PT0CM003.XXXMODID = "350"; /* Module identification*/
    set PT0CM003.PT0CMSSA cursor; /* Establish cursor position*/
    converseLib.validationFailed(49); /* No previous sizes to display*/

  end

   /* ------------------------------------------------------------*/
   /* If RIGHT was requested, ensure that columns exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11 /* RIGHT was requested*/
   && PT0CW00.PT0CWBEG == PT0CW03.PT0CWMAX) /* and at maximum column*/

    PT0CM003.XXXMODID = "350"; /* Module identification*/
    set PT0CM003.PT0CMSSA cursor; /* Establish cursor position*/
    converseLib.validationFailed(50); /* No more sizes to display*/

  end

   /* ------------------------------------------------------------*/
   /* If PREV CLR was requested, ensure that colors exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17) /* PREV CLR was requested*/
    PT0C353(); /* Verify PREV CLR request*/
  end

   /* ------------------------------------------------------------*/
   /* If NEXT CLR was requested, ensure that colors exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf18) /* NEXT CLR was requested*/
    PT0C354(); /* Verify NEXT CLR request*/
  end

   /* ------------------------------------------------------------*/
   /* If size scroll amount changed, verify the number entered.*/
   /* ------------------------------------------------------------*/

  if (PT0CM003.PT0CMSSA != PT0CW00.PT0CMSSA) /* Size scroll changed*/

    if (PT0CM003.PT0CMSSA < 1 /* Less than 1*/
     || PT0CM003.PT0CMSSA > 99) /* or greater than 99*/

      PT0CM003.XXXMODID = "350"; /* Module identification*/
      set PT0CM003.PT0CMSSA cursor, bold; /* Highlight*/
      converseLib.validationFailed(53); /* Amount missing or invalid*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If period scroll amount changed, verify the number entered.*/
   /* ------------------------------------------------------------*/

  if (PT0CM003.PT0CMPSA != PT0CW00.PT0CMPSA) /* Period scroll changed*/

    if (PT0CM003.PT0CMPSA < 1 /* Less than 1*/
     || PT0CM003.PT0CMPSA > 99) /* or greater than 99*/

      PT0CM003.XXXMODID = "350"; /* Module identification*/
      set PT0CM003.PT0CMPSA cursor, bold; /* Highlight*/
      converseLib.validationFailed(52); /* Amount missing or invalid*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if warehouse change is not allowed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER not pressed*/
   && PT0CM003.XWHCD != PT0CW03.XWHCD) /* and warehouse changed*/

    PT0CM003.XXXMODID = "350"; /* Module identification*/
    set PT0CM003.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, determine the warehouse to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    if (PT0CM003.XWHCD == PT0CW03.XWHCD) /* Warehouse not changed*/

      PT0C355(); /* Find the next warehouse*/
    else
      PT0C356(); /* Verify the entered warehouse*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end PT0C350

// Verify BACK request
Function PT0C351()
   /* ------------------------------------------------------------*/
   /* If the first page, indicate that no previous pages exist.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.PT0CWTSP <= 1) /* No previous pages*/

    PT0CM003.XXXMODID = "351"; /* Module identification*/
    set PT0CM003.PT0CMPSA cursor; /* Establish cursor position*/
    converseLib.validationFailed(45); /* No previous periods to display*/

  else

    /* ------------------------------------------------------------*/
     /* Decrement the page number by the period scroll amount.*/
    /* ------------------------------------------------------------*/

    PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSP - PT0CM003.PT0CMPSA;

    if (PT0CW00.PT0CWTSS < 1) /* Past minimum*/

      PT0CW00.PT0CWTSS = 1; /* Default to minimum*/

      PTWREC.XXXMODID = "351"; /* Module identification*/
      PTWREC.XXXMSGNO = 54; /* First period is shown*/

    end

    TA5REC.TA5TSQIX = PT0CW00.PT0CWTSS; /* Page number*/

    PT0CS10(); /* Obtain temporary storage page*/

    /* ------------------------------------------------------------*/
     /* Determine if scrolled past first period for the warehouse.*/
    /* ------------------------------------------------------------*/

    if (PT0CW02.PT2KEY != PT0CW03.PT3KEY) /* Not same base key*/

      PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSP - 1; /* Initialize page number*/
      PT0CW03.PT0CWSWP = "N"; /* First period switch*/

      /* ------------------------------------------------------------*/
       /* Find the page with the first period for the warehouse.*/
      /* ------------------------------------------------------------*/

      while (PT0CW03.PT0CWSWP != "Y") /* Until first period*/

        TA5REC.TA5TSQIX = PT0CW00.PT0CWTSS; /* Page number*/

        PT0CS10(); /* Obtain temporary storage page*/

        if (PT0CW03.PT0CWSWP != "Y") /* Not first period*/
          PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSS - 1; /* Decrement page*/
        end

      end

      PTWREC.XXXMODID = "351"; /* Module identification*/
      PTWREC.XXXMSGNO = 54; /* First period is shown*/

    end

    PT0CW00.PT0CWSWP = PT0CW03.PT0CWSWP; /* First period switch*/

    /* ------------------------------------------------------------*/
     /* Reestablish the current temporary storage page.*/
    /* ------------------------------------------------------------*/

    TA5REC.TA5TSQIX = PT0CW00.PT0CWTSP; /* Page number*/

    PT0CS10(); /* Obtain temporary storage page*/

  end


end // end PT0C351

// Verify FRWD request
Function PT0C352()
   /* ------------------------------------------------------------*/
   /* If the last page, indicate no more periods to display.*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CWTSS = PT0CW00.TA5TSQIX - 1; /* Maximum page number*/

  if (PT0CW00.PT0CWTSP >= PT0CW00.PT0CWTSS) /* No more pages*/

    PT0CM003.XXXMODID = "352"; /* Module identification*/
    set PT0CM003.PT0CMPSA cursor; /* Establish cursor position*/
    converseLib.validationFailed(46); /* No more periods to display*/

  else

    /* ------------------------------------------------------------*/
     /* Increment the page number by the period scroll amount.*/
    /* ------------------------------------------------------------*/

    PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSP + PT0CM003.PT0CMPSA;

    if (PT0CW00.PT0CWTSS >= PT0CW00.TA5TSQIX) /* Past maximum*/

      PT0CW00.PT0CWTSS = PT0CW00.TA5TSQIX - 1; /* Default to maximum*/

      PTWREC.XXXMODID = "352"; /* Module identification*/
      PTWREC.XXXMSGNO = 55; /* Last period is shown*/

    end

    PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSS + 1; /* Ending page number*/

    TA5REC.TA5TSQIX = PT0CW00.PT0CWTSS; /* Page number*/

    PT0CS10(); /* Obtain temporary storage page*/

    /* ------------------------------------------------------------*/
     /* Determine if scrolled past last period for the warehouse.*/
    /* ------------------------------------------------------------*/

    if (PT0CW02.PT2KEY != PT0CW03.PT3KEY) /* Not same base key*/

      while (PT0CW02.PT2KEY != PT0CW03.PT3KEY) /* Until same base key*/

        PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSS - 1; /* Decrement page number*/

        TA5REC.TA5TSQIX = PT0CW00.PT0CWTSS; /* Page number*/

        PT0CS10(); /* Obtain temporary storage page*/

      end

      PTWREC.XXXMODID = "352"; /* Module identification*/
      PTWREC.XXXMSGNO = 55; /* Last period is shown*/

    end

    /* ------------------------------------------------------------*/
     /* Obtain the beginning period for the display.*/
    /* ------------------------------------------------------------*/

    PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSS - 1; /* Beginning page number*/

    TA5REC.TA5TSQIX = PT0CW00.PT0CWTSS; /* Page number*/

    PT0CS10(); /* Obtain temporary storage page*/

    /* ------------------------------------------------------------*/
     /* If a first period, increment the beginning page number.*/
    /* ------------------------------------------------------------*/

    if (PT0CW03.PT0CWSWP == "Y") /* First period*/
      PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSS + 1; /* Beginning page number*/
    end

    /* ------------------------------------------------------------*/
     /* If beginning page same as current, indicate no more pages.*/
    /* ------------------------------------------------------------*/

    if (PT0CW00.PT0CWTSS == PT0CW00.PT0CWTSP) /* Same as current page*/

      PT0CM003.XXXMODID = "352"; /* Module identification*/
      set PT0CM003.PT0CMPSA cursor; /* Establish cursor position*/
      converseLib.validationFailed(46); /* No more periods to display*/

    end

    PT0CW00.PT0CWSWP = "N"; /* First period switch*/

    /* ------------------------------------------------------------*/
     /* Reestablish the current temporary storage page.*/
    /* ------------------------------------------------------------*/

    TA5REC.TA5TSQIX = PT0CW00.PT0CWTSP; /* Page number*/

    PT0CS10(); /* Obtain temporary storage page*/

  end


end // end PT0C352

// Verify PREV CLR request
Function PT0C353()
   /* ------------------------------------------------------------*/
   /* Search the previous pages for another color for the style.*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSP; /* Current page number*/

  while (PT0CW00.PT0CWTSS >= 1                 /* Until top of pages*/
   && PT0CM003.SY1STNBR == PT0CW03.SY1STNBR /* or style changes*/
   && PT0CM003.SY2CLRID == PT0CW03.SY2CLRID) /* or color changes*/

    PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSS - 1; /* Previous page number*/
    PT0CW03.PT0CWSWP = "N"; /* First period switch*/

    while (PT0CW00.PT0CWTSS >= 1 /* Until top of pages*/
     && PT0CW03.PT0CWSWP != "Y") /* or first period of product*/

      TA5REC.TA5TSQIX = PT0CW00.PT0CWTSS; /* Page number*/

      PT0CS10(); /* Obtain temporary storage page*/

      if (PT0CW03.PT0CWSWP != "Y") /* Not first period*/
        PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSS - 1; /* Decrement page number*/
      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If no page found, indicate no previous color to display.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.PT0CWTSS < 1 /* No page found*/
   || PT0CM003.SY1STNBR != PT0CW03.SY1STNBR) /* or style changed*/

    PT0CM003.XXXMODID = "353"; /* Module identification*/
    converseLib.validationFailed(43); /* No previous color to display*/

  end

   /* ------------------------------------------------------------*/
   /* Reestablish the current temporary storage page.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = PT0CW00.PT0CWTSP; /* Page number*/

  PT0CS10(); /* Obtain temporary storage page*/


end // end PT0C353

// Verify NEXT CLR request
Function PT0C354()
   /* ------------------------------------------------------------*/
   /* Search the following pages for another color for the style.*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSP; /* Current page number*/

  while (PT0CW00.PT0CWTSS <= PT0CW00.TA5TSQIX  /* Until end of pages*/
   && PT0CM003.SY1STNBR == PT0CW03.SY1STNBR /* or style changes*/
   && PT0CM003.SY2CLRID == PT0CW03.SY2CLRID) /* or color changes*/

    PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSS + 1; /* Next page number*/
    PT0CW03.PT0CWSWP = "N"; /* First period switch*/

    while (PT0CW00.PT0CWTSS <= PT0CW00.TA5TSQIX /* Until end of pages*/
     && PT0CW03.PT0CWSWP != "Y") /* or first period of product*/

      TA5REC.TA5TSQIX = PT0CW00.PT0CWTSS; /* Page number*/

      PT0CS10(); /* Obtain temporary storage page*/

      if (PT0CW03.PT0CWSWP != "Y") /* Not first period*/
        PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSS + 1; /* Increment page number*/
      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If no page was found, indicate no more colors to display.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.PT0CWTSS > PT0CW00.TA5TSQIX /* No page found*/
   || PT0CM003.SY1STNBR != PT0CW03.SY1STNBR) /* or style changed*/

    PT0CM003.XXXMODID = "354"; /* Module identification*/
    converseLib.validationFailed(44); /* No more colors to display*/

  end

   /* ------------------------------------------------------------*/
   /* Reestablish the current temporary storage page.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = PT0CW00.PT0CWTSP; /* Page number*/

  PT0CS10(); /* Obtain temporary storage page*/


end // end PT0C354

// Find the next warehouse
Function PT0C355()
   /* ------------------------------------------------------------*/
   /* Initialize the page number and first period switch.*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSP + 1; /* Initialize page number*/
  PT0CW03.PT0CWSWP = "N"; /* First period switch*/

   /* ------------------------------------------------------------*/
   /* Find the next first period page in temporary storage.*/
   /* ------------------------------------------------------------*/

  while (PT0CW00.PT0CWTSS <= PT0CW00.TA5TSQIX /* Until end of pages*/
   && PT0CW03.PT0CWSWP != "Y") /* or first period found*/

    TA5REC.TA5TSQIX = PT0CW00.PT0CWTSS; /* Page number*/

    PT0CS10(); /* Obtain temporary storage page*/

    if (PT0CW03.PT0CWSWP != "Y") /* Not first period*/
      PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSS + 1; /* Increment page*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If page not found, indicate no more warehouses to display.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.PT0CWTSS > PT0CW00.TA5TSQIX   /* No page found*/
   || PT0CM003.SY1STNBR != PT0CW03.SY1STNBR /* or style changed*/
   || PT0CM003.SY2CLRID != PT0CW03.SY2CLRID) /* or color changed*/

    PT0CM003.XXXMODID = "355"; /* Module identification*/
    converseLib.validationFailed(48); /* No more warehouses to display*/

  end

   /* ------------------------------------------------------------*/
   /* Reestablish the current temporary storage page.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = PT0CW00.PT0CWTSP; /* Page number*/

  PT0CS10(); /* Obtain temporary storage page*/


end // end PT0C355

// Verify the entered warehouse
Function PT0C356()
   /* ------------------------------------------------------------*/
   /* Verify that a valid warehouse code was entered.*/
   /* ------------------------------------------------------------*/

  if (PT0CM003.XWHCD == "**"         /* Corporate warehouse*/
   || PT0CM003.XWHCD in XWHTBL.XWHCD /* or code in table*/
   || PT0CM003.XWHCD == "DP")        /* or Promo DRS*/

    if (PT0CM003.XWHCD == "**") /* Corporate warehouse*/

      PT0CM003.XWHABRV = "CORP WHSE"; /* Abbreviation*/
    else
      PT0CM003.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* Abbreviation*/

      if (PT0CM003.XWHCD == "DP")
        PT0CM003.XWHABRV = "PROMO DRS";
      end

    end

    /* ------------------------------------------------------------*/
     /* Search the pages for a match on warehouse, style and color.*/
    /* ------------------------------------------------------------*/

    PT0CW00.PT0CWTSS = 1; /* Initialize page number*/
    PT0CW03.PT0CWSWP = "N"; /* First period switch*/

    while (PT0CM003.XWHCD != PT0CW03.XWHCD       /* Until same warehouse*/
     || PT0CM003.SY1STNBR != PT0CW03.SY1STNBR /* and same style*/
     || PT0CM003.SY2CLRID != PT0CW03.SY2CLRID /* and same color*/
     || PT0CW03.PT0CWSWP != "Y") /* and first period*/

      TA5REC.TA5TSQIX = PT0CW00.PT0CWTSS; /* Page number*/

      PT0CS10(); /* Obtain temporary storage page*/

      if (PT0CM003.XWHCD != PT0CW03.XWHCD       /* Warehouse not same*/
       || PT0CM003.SY1STNBR != PT0CW03.SY1STNBR /* or style not same*/
       || PT0CM003.SY2CLRID != PT0CW03.SY2CLRID /* or color not same*/
       || PT0CW03.PT0CWSWP != "Y")              /* or not first period*/

        PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSS + 1; /* Increment page number*/

        if (PT0CW00.PT0CWTSS > PT0CW00.TA5TSQIX) /* No page found*/

          PT0CW03.XWHCD = PT0CM003.XWHCD; /* Warehouse*/
          PT0CW03.SY1STNBR = PT0CM003.SY1STNBR; /* Style*/
          PT0CW03.SY2CLRID = PT0CM003.SY2CLRID; /* Color*/
          PT0CW03.PT0CWSWP = "Y"; /* First period switch*/

        end

      end

    end

    /* ------------------------------------------------------------*/
     /* If no page was found, indicate no product availability.*/
    /* ------------------------------------------------------------*/

    if (PT0CW00.PT0CWTSS > PT0CW00.TA5TSQIX) /* No page found*/

      set PT0CM003.XWHCD cursor, bold; /* Highlight*/
      PT0CM003.XXXMODID = "356"; /* Module identification*/
      converseLib.validationFailed(51); /* No availability for warehouse*/

    end

    /* ------------------------------------------------------------*/
     /* Reestablish the current temporary storage page.*/
    /* ------------------------------------------------------------*/

    TA5REC.TA5TSQIX = PT0CW00.PT0CWTSP; /* Page number*/

    PT0CS10(); /* Obtain temporary storage page*/

  else

    /* ------------------------------------------------------------*/
     /* Indicate that warehouse code is missing or invalid.*/
    /* ------------------------------------------------------------*/

    PT0CM003.XWHABRV = " "; /* Clear abbreviation*/

    set PT0CM003.XWHCD cursor, bold; /* Highlight*/
    PT0CM003.XXXMODID = "356"; /* Module identification*/
    converseLib.validationFailed(36); /* Indicate missing or invalid*/

  end


end // end PT0C356

// Process valid input request
Function PT0C360()
   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, indicate display MAP 002.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    set PT0CM002 initial; /* M002 input/output*/

    PT0CW00.PT0CWSWM = "2"; /* Map to be displayed switch*/
    PT0CW00.PT0CWTSP = PT0CW00.PT0CWTSS; /* Page number*/

  end

   /* ------------------------------------------------------------*/
   /* Save the key map data and clear the map input/output area.*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CMPSA = PT0CM003.PT0CMPSA; /* Period scroll amount*/
  PT0CW00.PT0CMSSA = PT0CM003.PT0CMSSA; /* Size scroll amount*/

  set PT0CM003 initial; /* M003 input/output*/

   /* ------------------------------------------------------------*/
   /* Commit all changes to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 1;
  sysLib.commit(); /* Commit all changes*/

   /* ------------------------------------------------------------*/
   /* If PREV or NEXT STY was requested, adjust selection index.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5) /* PREV was requested*/

    PT0CW00.PT0CWIXS = PT0CW00.PT0CWIXS - 1; /* Decrement index*/

    while (PT0CM001.SY1STNBR[PT0CWIXS] <= " ") /* Bypass blank lines*/
      PT0CW00.PT0CWIXS = PT0CW00.PT0CWIXS - 1; /* Decrement index*/
    end

    set PT0CM002 initial; /* M002 input/output*/

    set PT0CM001.SY1STNBR[PT0CWIXS] cursor; /* Position cursor*/
    PT0CW00.PT0CWSWM = "2"; /* Map to be displayed switch*/
    PT0CW00.PT0CWSWR = "Y"; /* Request for data switch*/

  end

  if (converseVar.eventKey is pf6) /* NEXT was requested*/

    PT0CW00.PT0CWIXS = PT0CW00.PT0CWIXS + 1; /* Increment index*/

    while (PT0CM001.SY1STNBR[PT0CWIXS] <= " ") /* Bypass blank lines*/
      PT0CW00.PT0CWIXS = PT0CW00.PT0CWIXS + 1; /* Increment index*/
    end

    set PT0CM002 initial; /* M002 input/output*/

    set PT0CM001.SY1STNBR[PT0CWIXS] cursor; /* Position cursor*/
    PT0CW00.PT0CWSWM = "2"; /* Map to be displayed switch*/
    PT0CW00.PT0CWSWR = "Y"; /* Request for data switch*/

  end

   /* ------------------------------------------------------------*/
   /* If BACK or FRWD was requested, adjust page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* BACK was requested*/
   || converseVar.eventKey is pf8) /* or FRWD was requested*/

    if (PT0CW00.PT0CWSWP == "Y") /* First period of product*/

      set PT0CM002 initial; /* M002 input/output*/

      PT0CW00.PT0CWSWM = "2"; /* Map to be displayed switch*/

      set PT0CM002.PT0CMPSA cursor; /* Establish cursor position*/

    else

      set PT0CM003.PT0CMPSA cursor; /* Establish cursor position*/

    end

    PT0CW00.PT0CWTSP = PT0CW00.PT0CWTSS; /* Page number*/

  end

   /* ------------------------------------------------------------*/
   /* If LEFT or RIGHT was requested, adjust beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* LEFT was requested*/

    PT0CW00.PT0CWBEG = PT0CW00.PT0CWBEG - PT0CW00.PT0CMSSA;

    if (PT0CW00.PT0CWBEG < 0) /* Past minimum*/

      PT0CW00.PT0CWBEG = 0; /* Default to minimum*/

      PTWREC.XXXMODID = "360"; /* Module identification*/
      PTWREC.XXXMSGNO = 56; /* First size is shown*/

    end

    set PT0CM003.PT0CMSSA cursor; /* Establish cursor position*/

  end

  if (converseVar.eventKey is pf11) /* RIGHT was requested*/

    PT0CW00.PT0CWBEG = PT0CW00.PT0CWBEG + PT0CW00.PT0CMSSA;

    if (PT0CW00.PT0CWBEG > PT0CW03.PT0CWMAX) /* Past maximum*/

      PT0CW00.PT0CWBEG = PT0CW03.PT0CWMAX; /* Default to maximum*/

      PTWREC.XXXMODID = "360"; /* Module identification*/
      PTWREC.XXXMSGNO = 57; /* Last size is shown*/

    end

    set PT0CM003.PT0CMSSA cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If PRINT was requested, format and submit the request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* PRINT was requested*/
    if (TA3REC.TA3RGNID == "03") /* IF PRODUCTION REGION*/
      PT0C361(); /* Format/submit print request*/
    else /**/
      PT0C362(); /* FORMAT/SUBMIT PRINT TO TEST REGION*/
    end /**/
  end

   /* ------------------------------------------------------------*/
   /* If BL AVAL was requested, indicate display Map 004.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* BL AVAL was requested*/

    set PT0CM004 initial; /* M004 input/output*/

    PT0CW00.PT0CWSWM = "4"; /* Map to be displayed switch*/
    PT0CW00.PT0CWSWR = "Y"; /* Request for data switch*/

    PT0CM004.XWHCD = PT0CW03.XWHCD; /* Warehouse*/
    PT0CM004.SY1STNBR = PT0CW03.SY1STNBR; /* Style*/
    PT0CM004.SY2CLRID = PT0CW03.SY2CLRID; /* Color*/

  end

   /* ------------------------------------------------------------*/
   /* If PREV or NEXT CLR was requested, adjust page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17 /* PREV CLR was requested*/
   || converseVar.eventKey is pf18) /* or NEXT CLR was requested*/

    set PT0CM002 initial; /* M002 input/output*/

    PT0CW00.PT0CWSWM = "2"; /* Map to be displayed switch*/
    PT0CW00.PT0CWTSP = PT0CW00.PT0CWTSS; /* Page number*/

  end


end // end PT0C360

// Format/submit print request
Function PT0C361()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PT0CW00.PT0CWIXT = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PT0CW00.PT0CWIXT > 0) /* Until end of table*/

    if (PT0CT01.TARTYPE[PT0CWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters for the product/warehouse being viewed.*/
      /* ------------------------------------------------------------*/

      PT0CW01.XWHCD = PT0CW03.XWHCD; /* Warehouse*/
      PT0CW01.SY1STNBR = PT0CW03.SY1STNBR; /* Style*/
      PT0CW01.SY2CLRID = PT0CW03.SY2CLRID; /* Color*/
      PT0CW01.XDMCD = PT0CW03.XDMCD; /* Dimension*/
      PT0CW01.XOWCD = PT0CW03.XOWCD; /* Owner*/

      PT0CS06(); /* Format selection parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      if (PT0CW00.XGPCD == "01" /* In Store Promo*/
       && PT0CT01.TARTYPE[PT0CWIXT] == "A") /* apparel  bypass*/

        PT0CW00.PT0CWIXT = PT0CW00.PT0CWIXT + 1; /* Increment table index*/

      end

      if (PT0CW00.XGPCD == "03" /* Apparel*/
       && PT0CT01.TARTYPE[PT0CWIXT] == "S") /* In Store*/

        PT0CW00.PT0CWIXT = PT0CW00.PT0CWIXT + 1; /* Increment table index*/

      end

      TA6REC.TARJCL[TA6INDEX] = PT0CT01.TARJCL[PT0CWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT0CT01.TARTYPE[PT0CWIXT]; /* Type*/


      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT0CT01.TARJCL[PT0CWIXT] == "/*EOF") /* End of table*/

      PT0CW00.PT0CWIXT = 0; /* Indicate end of table*/
    else
      PT0CW00.PT0CWIXT = PT0CW00.PT0CWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PT0CM003.XXXMODID = "361"; /* Module identification*/

  PT0CS07(); /* Submit the JCL*/


end // end PT0C361

// Format/submit print request
Function PT0C362()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PT0CW00.PT0CWIXT = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PT0CW00.PT0CWIXT > 0) /* Until end of table*/

    if (PT0CT03.TARTYPE[PT0CWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters for the product/warehouse being viewed.*/
      /* ------------------------------------------------------------*/

      PT0CW01.XWHCD = PT0CW03.XWHCD; /* Warehouse*/
      PT0CW01.SY1STNBR = PT0CW03.SY1STNBR; /* Style*/
      PT0CW01.SY2CLRID = PT0CW03.SY2CLRID; /* Color*/
      PT0CW01.XDMCD = PT0CW03.XDMCD; /* Dimension*/
      PT0CW01.XOWCD = PT0CW03.XOWCD; /* Owner*/

      PT0CS13(); /* Format selection parameters FOR TEST*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      if (PT0CW00.XGPCD == "01" /* In Store Promo*/
       && PT0CT03.TARTYPE[PT0CWIXT] == "A") /* apparel  bypass*/

        PT0CW00.PT0CWIXT = PT0CW00.PT0CWIXT + 1; /* Increment table index*/

      end

      if (PT0CW00.XGPCD == "03" /* Apparel*/
       && PT0CT03.TARTYPE[PT0CWIXT] == "S") /* In Store*/

        PT0CW00.PT0CWIXT = PT0CW00.PT0CWIXT + 1; /* Increment table index*/

      end

      TA6REC.TARJCL[TA6INDEX] = PT0CT03.TARJCL[PT0CWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT0CT03.TARTYPE[PT0CWIXT]; /* Type*/


      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT0CT03.TARJCL[PT0CWIXT] == "/*EOF") /* End of table*/

      PT0CW00.PT0CWIXT = 0; /* Indicate end of table*/
    else
      PT0CW00.PT0CWIXT = PT0CW00.PT0CWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PT0CM003.XXXMODID = "361"; /* Module identification*/

  PT0CS07(); /* Submit the JCL*/


end // end PT0C362

// Display the selected table row
Function PT0C400()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT0C410(); /* Obtain the data to display*/

  PT0C420(); /* Format and display the map*/

  PT0C430(); /* Check attention identifier*/

  PT0C440(); /* Reset fields to normal intensity*/

  PT0C450(); /* Verify the entered data*/

  PT0C460(); /* Process valid input request*/


end // end PT0C400

// Obtain the data to display
Function PT0C410()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.PT0CWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Purge any existing queue in temporary storage.*/
   /* ------------------------------------------------------------*/

  PT0C131(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CWTSL = 2348; /* Temporary storage page length*/

  PT0CW00.PT0CWIXD = 1; /* Init color index*/
  PT0CW00.PT0CW-COLOR-TABLE = " "; /* init color table*/

   /* ------------------------------------------------------------*/
   /* Either load color driver table with single color or if color*/
   /* is wildcarded get all of the colors for the current style and*/
   /* load the table.*/
   /* ------------------------------------------------------------*/

  if (PT0CM001.SY2CLRID[PT0CWIXS] == "***") /* color is wildcarded*/
    PT0CW00.PT0CW-COLOR[PT0CWIXD] = PT0CM001.SY2CLRID[PT0CWIXS];
    PT0CW05.XWHCD[1] = "  "; /* From warehouse*/
    PT0CW05.XWHCD[2] = "99"; /* To warehouse*/

     /* ------------------------------------------------------------*/
     /* Open cursor*/
     /* ------------------------------------------------------------*/

    PT0C212(); /* Select FBASM and open cursor*/

     /* ------------------------------------------------------------*/
     /* Fetch and load color table with all colors of current style*/
     /* ------------------------------------------------------------*/

    PT0C213(); /* Fetch selected FBASM rows*/

    while (PT0CW00.PT0CWSWC != "Y") /* Until end of cursor*/

      if (PT0CW00.PT0CWIXD > 1) /* If there is a prior entry*/
        sysVar.arrayIndex = PT0CW00.PT0CWIXD - 1;
        if (PT3REC.SY2CLRID != PT0CW00.PT0CW-COLOR[sysVar.arrayIndex])
          PT0CW00.PT0CW-COLOR[PT0CWIXD] = PT3REC.SY2CLRID;
          PT0CW00.PT0CWIXD = PT0CW00.PT0CWIXD + 1; /* increment index*/
        end
      else
        PT0CW00.PT0CW-COLOR[PT0CWIXD] = PT3REC.SY2CLRID;
        PT0CW00.PT0CWIXD = PT0CW00.PT0CWIXD + 1; /* increment index*/
      end

      PT0C213(); /* Fetch selected FBASM rows*/

    end
     /* ------------------------------------------------------------*/
     /* Close cursor*/
     /* ------------------------------------------------------------*/

    PT0C216(); /* Close cursor*/

    PT0CW00.PT0CWIXD = 1; /* Reset color index*/

  else
     /* ------------------------------------------------------------*/
     /* Load color table with color from map.*/
     /* ------------------------------------------------------------*/
    PT0CW00.PT0CW-COLOR[PT0CWIXD] = PT0CM001.SY2CLRID[PT0CWIXS];

  end

  while (PT0CW00.PT0CW-COLOR[PT0CWIXD] != " ")

     /* ------------------------------------------------------------*/
      /* If all warehouses requested, set range for all warehouses.*/
     /* ------------------------------------------------------------*/

    if (PT0CM001.XWHCD == "XX") /* All warehouses requested*/

      PT0CW05.XWHCD[1] = "00"; /* From warehouse*/
      PT0CW05.XWHCD[2] = "99"; /* To warehouse*/

       /* ------------------------------------------------------------*/
        /* Select and open the cursor for the set to be formatted.*/
       /* ------------------------------------------------------------*/

      PT0C212(); /* Select set and open cursor*/

       /* ------------------------------------------------------------*/
        /* Fetch and format the data into pages until end of cursor.*/
       /* ------------------------------------------------------------*/

      while (PT0CW00.PT0CWSWC != "Y") /* Until end of cursor*/

        PT0C213(); /* Fetch selected rows*/

        if (PT0CW00.PT0CWSWC == "N" /* Not end of cursor*/
         && PT0CW00.PT0CWSWS == "Y") /* Match found switch*/

           /* ------------------------------------------------------------*/
            /* If key fields changed, add the page to the storage queue.*/
           /* ------------------------------------------------------------*/

          if (PT0CW04.PT3KEY > " " /* and not first time through*/
           && PT0CW04.PT3KEY != PT3REC.PT3KEY) /* and key fields changed*/

            PT0C414(); /* Add page to temporary storage*/

          end

           /* ------------------------------------------------------------*/
            /* Format the data into the map display storage area.*/
           /* ------------------------------------------------------------*/

          PT0C415(); /* Format the display storage*/

        end

      end

       /* ------------------------------------------------------------*/
        /* Add any partially formatted last page to the queue.*/
       /* ------------------------------------------------------------*/

      if (PT0CW04.PT3KEY > " ") /* Page was formatted*/
        PT0C414(); /* Add page to temporary storage*/
      end

       /* ------------------------------------------------------------*/
        /* Close the cursor for the selected set.*/
       /* ------------------------------------------------------------*/

      PT0C216(); /* Close the selected set cursor*/

       /* ------------------------------------------------------------*/
        /* Set range to obtain direct ship and corporate warehouses.*/
       /* ------------------------------------------------------------*/

      PT0CW05.XWHCD[1] = "  "; /* From warehouse*/
      PT0CW05.XWHCD[2] = "ZZ"; /* To warehouse*/

    else

       /* ------------------------------------------------------------*/
        /* Otherwise, set range to obtain a single warehouse.*/
       /* ------------------------------------------------------------*/

      PT0CW05.XWHCD[1] = PT0CM001.XWHCD; /* From warehouse*/
      PT0CW05.XWHCD[2] = PT0CM001.XWHCD; /* To warehouse*/

    end

     /* ------------------------------------------------------------*/
      /* Select and open the cursor for the set to be formatted.*/
     /* ------------------------------------------------------------*/

    PT0C212(); /* Select set and open cursor*/

     /* ------------------------------------------------------------*/
      /* Fetch and format the data into pages until end of cursor.*/
     /* ------------------------------------------------------------*/

    while (PT0CW00.PT0CWSWC != "Y") /* Until end of cursor*/

      PT0C213(); /* Fetch selected rows*/

      if (PT0CW00.PT0CWSWC == "N") /* Not end of cursor*/

         /* ------------------------------------------------------------*/
          /* If key fields changed, add the page to the storage queue.*/
         /* ------------------------------------------------------------*/

        if (PT0CW04.PT3KEY > " " /* and not first time through*/
         && PT0CW04.PT3KEY != PT3REC.PT3KEY) /* and key fields changed*/

          PT0C414(); /* Add page to temporary storage*/

        end

         /* ------------------------------------------------------------*/
          /* Format the data into the map display storage area.*/
         /* ------------------------------------------------------------*/

        PT0C415(); /* Format the display storage*/

      end

    end

     /* ------------------------------------------------------------*/
      /* Close the cursor for the selected set.*/
     /* ------------------------------------------------------------*/

    PT0C216(); /* Close the selected set cursor*/

    PT0CW00.PT0CWIXD = PT0CW00.PT0CWIXD + 1; /* Increment index*/

  end
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PT0CW04.PT3KEY > " ") /* Page was formatted*/
    PT0C414(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CWSWR = "N"; /* Request for data switch*/
  PT0CW00.PT0CWTSP = 1; /* Page number*/
  PT0CW00.PT0CMSSA = 8; /* Size scroll amount*/

   /* ------------------------------------------------------------*/
   /* If from the PERIODS display, find the page to be displayed.*/
   /* ------------------------------------------------------------*/

  if (PT0CM004.SY1STNBR > " ")
    PT0C417(); /* Find the page to be displayed*/
  end

end // end PT0C410

// Add page to temporary storage
Function PT0C414()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PT0CW04.PT0CWTSL = PT0CW00.PT0CWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PT0CW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PT0CW04 empty; /* M001 display storage*/

    PT0CW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    PT0CW00.PT0CWIXL = 1; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PT0CM001.XXXMODID = "414"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PT0CM001.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PT0CW00.PT0CWSWM = "1"; /* Map to be displayed switch*/

  exit stack; /* Exit to display map*/


end // end PT0C414

// Format the display storage
Function PT0C415()
   /* ------------------------------------------------------------*/
   /* If this is a new page, format the heading information.*/
   /* ------------------------------------------------------------*/

  if (PT0CW04.PT3KEY <= " ") /* First time through*/

    PT0CW04.PT3KEY = PT3REC.PT3KEY; /* Save product key*/

    /* ------------------------------------------------------------*/
     /* Format the product style/color information.*/
    /* ------------------------------------------------------------*/

    PT0CW04.SY1SSTNM = PG2REC.SY1SSTNM; /* Style name*/
    PT0CW04.SY2CLRAB = PG2REC.SY2CLRAB; /* Color abbreviation*/
    PT0CW04.PG1SC4CD = PG2REC.PG1SC4CD; /* Scheduler code*/
    PT0CW00.XGACD = PG2REC.XGACD; /* Gender age code*/
    if (PT0CW00.XGACD in XGATBL.XGACD)
      PT0CW04.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex];
    end
    PT0CW00.XPCCD = PG2REC.XPCCD; /* Category code*/
    if (PT0CW00.XPCKEY in XPCTBL.XPCKEY)
      PT0CW04.XPCSDESC = XPCTBL.XPCSDESC[sysVar.arrayIndex];
    end
    PT0CW00.XSUCD = PG2REC.XSUCD; /* Silhouette code*/
    if (PT0CW00.XSUCD in XSUTBL.XSUCD)
      PT0CW04.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex];
    end

    /* ------------------------------------------------------------*/
     /* Obtain the product size descriptions.*/
    /* ------------------------------------------------------------*/

    if (PT0CW04.XGPCD != PG3REC.XGPCD       /* Not same GPC*/
     || PT0CW04.SY1STNBR != PG3REC.SY1STNBR /* or not same style*/
     || PT0CW04.SY2CLRID != PG3REC.SY2CLRID /* or not same color*/
     || PT0CW04.XDMCD != PG3REC.XDMCD       /* or not same dimension*/
     || PT0CW04.XQACD != PG3REC.XQACD)      /* or not same quality*/

      set PG3REC empty; /* Clear row storage area*/
      PG3REC.PG3FUNCD = "PC"; /* Function*/
      PG3REC.PG3DATFM = "C"; /* Data format*/
     /* MOVE '01' TO PG3REC.PG3XDVCD;        /* Highest division*/
      PG3REC.PG3KEY = PT0CW04.PG2KEY; /* Style/color key*/
      PG3REC.XQACD = PT0CW04.XQACD; /* Quality code*/
      TA1REC.TA1PGMNM = "PT0C415"; /* Process name*/

      if (PG2REC.XDVCD1 > "01")
        PG3REC.PG3XDVCD = PG2REC.XDVCD1; /* SET TO PRODUCT DIV*/
      else
        PG3REC.PG3XDVCD = "01"; /* SET TO highest div*/
      end

      XSPG301(); /* Size description translation*/

      if (sysVar.errorCode != "00000000" /* Call not successful*/
       || PG3REC.PG3RETCD != "00")       /* or not normal return*/

        if (sysVar.errorCode == "00000000" /* Call successful*/
         && PG3REC.PG3RETCD == "09")       /* and resource not available*/

          converseLib.validationFailed(11); /* Indicate data in use*/
        else
          converseLib.validationFailed(10); /* Indicate system error*/

        end

        PT0CW00.PT0CWSWM = "1"; /* Map to be displayed switch*/
        PT0CM001.XXXMODID = "415"; /* Module identification*/

        exit stack; /* Exit to display map*/

      end

    end

    /* vannam changes begin here - 10/24/00*/
    /* **********************************************************/
    /* *  The products that have prod-level div cd '03' MUST   **/
    /* *      have its size-leve div cds as '03'. If not,      **/
    /* *      strip out that size ids from displaying APAR ... **/
    /* *                                                       **/
    /* **********************************************************/
    if (PG2REC.XDVCD1 == "03" && 
    PT3REC.XGPCD == "03" && 
    PT3REC.XWHCD == "09" && 
    PT3REC.XOWCD != "00")
       /* check the size ids*/
      PT0C218();
    end
    /* vannam changes end here - 10/24/00*/

    PT0CW00.PT0CWIXC = 1; /* Initialize column index*/

    while (PT0CW00.PT0CWIXC <= 40) /* Until end of sizes*/

      PT0CW04.SY4IDDSC[PT0CWIXC] = PG3REC.SY4IDDSC[PT0CWIXC];

      PT0CW00.PT0CWIXC = PT0CW00.PT0CWIXC + 1; /* Increment index*/

    end

    /* ------------------------------------------------------------*/
     /* Obtain the scheduler last name.*/
    /* ------------------------------------------------------------*/

    if (PT0CW04.XGPCD != PG1REC.XGPCD /* Not same GPC*/
     || PT0CW04.PG1SC4CD != PG1REC.PG1SC4CD) /* or not same scheduler*/

      set PG1REC empty; /* Clear row storage area*/
      PG1REC.XGPCD = PT0CW04.XGPCD; /* GPC code*/
      PG1REC.PG1SC4CD = PT0CW04.PG1SC4CD; /* Scheduler code*/

      PT0CS09(); /* Obtain scheduler last name*/

    end

    PT0CW04.XXXLSTNM = PG1REC.XXXLSTNM; /* Scheduler last name*/

    /* ------------------------------------------------------------*/
     /* Format warehouse abbreviation.*/
    /* ------------------------------------------------------------*/

    if (PT0CW04.XWHCD == "**") /* Corporate warehouse*/

      PT0CW04.XWHABRV = "CORP WHSE"; /* Abbreviation*/
    else
      if (PT0CW04.XWHCD in XWHTBL.XWHCD)
        PT0CW04.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      end

      if (PT0CW04.XWHCD == "DP")
        PT0CW04.XWHABRV = "PROMO DRS";
      end

    end

    /* ------------------------------------------------------------*/
     /* Clear the array work areas and initialize the indexes.*/
    /* ------------------------------------------------------------*/

    PT0CW00.PT0CWPER = 0; /* Initialize base period*/
    PT0CW00.PT0CWIXL = 1; /* Initialize line index*/
    PT0CW00.PT0CWIXC = 1; /* Initialize column index*/

    move 0 to PT0CW00.PT3AVQT[1] for all; /* Clear available quantities*/

  end

   /* ------------------------------------------------------------*/
   /* If the base period has changed, increment the line index.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.PT0CWPER != 0 /* Not first time through*/
   && PT3REC.PT3YYMM != PT0CW00.PT0CWPER) /* and period changed*/

    PT0CW00.PT0CWIXL = PT0CW00.PT0CWIXL + 1; /* Increment line index*/
    PT0CW00.PT0CWIXC = 1; /* Initialize column index*/
    move 0 to PT0CW00.PT3AVQT[1] for all; /* Clear available quantities*/

  end

   /* ------------------------------------------------------------*/
   /* Save the data in display storage.*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CWPER = PT3REC.PT3YYMM; /* Base period*/

  if (PT0CW00.PT0CTPRM in PT0CT02.PT0CTPRM)
    PT0CW00.PT0CTPMO = PT0CT02.PT0CTPMO[sysVar.arrayIndex];
  end
  PT0CW04.PT0CTPMO[PT0CWIXL] = PT0CW00.PT0CTPMO; /* Period month*/
  PT0CW04.PT0CTPRM[PT0CWIXL] = PT0CW00.PT0CTPRM; /* Receipt month*/

  PT0CW00.PT0CWIXR = 1; /* Initialize record index*/

  while (PT0CW00.PT0CWIXR <= 10 /* Until end of array*/
   && PT3REC.SY5SZID[PT0CWIXR] != 0) /* or end of sizes*/

    PT0CW00.PT3AVQT[PT0CWIXC] = PT3REC.PT3AVQT[PT0CWIXR];

    PT0CW00.PT0CWEND = PT0CW00.PT0CWIXC - 8; /* Ending column*/

    if (PT0CW00.PT0CWEND > PT0CW04.PT0CWMAX) /* Greater than maximum*/
      PT0CW04.PT0CWMAX = PT0CW00.PT0CWEND; /* Maximum column*/
    end

    PT0CW00.PT0CWIXR = PT0CW00.PT0CWIXR + 1; /* Record index*/
    PT0CW00.PT0CWIXC = PT0CW00.PT0CWIXC + 1; /* Column index*/

  end

  PT0CW04.PT0CWAVQ[PT0CWIXL] = PT0CW00.PT0CWAVQ;
  PT0CW04.PT3AVTOT[PT0CWIXL] = PT3REC.PT3AVTOT;


end // end PT0C415

// Find the page to be displayed
Function PT0C417()
   /* ------------------------------------------------------------*/
   /* Search the pages for a match on warehouse, style and color.*/
   /* ------------------------------------------------------------*/

  while (PT0CM004.XWHCD != PT0CW04.XWHCD       /* Until same warehouse*/
   || PT0CM004.SY1STNBR != PT0CW04.SY1STNBR /* and same style*/
   || PT0CM004.SY2CLRID != PT0CW04.SY2CLRID) /* and same color*/

    TA5REC.TA5TSQIX = PT0CW00.PT0CWTSP; /* Page number*/

    PT0CS12(); /* Obtain temporary storage page*/

    if (PT0CM004.XWHCD != PT0CW04.XWHCD       /* Warehouse not same*/
     || PT0CM004.SY1STNBR != PT0CW04.SY1STNBR /* or style not same*/
     || PT0CM004.SY2CLRID != PT0CW04.SY2CLRID) /* or color not same*/

      PT0CW00.PT0CWTSP = PT0CW00.PT0CWTSP + 1; /* Increment page number*/

    end

  end


end // end PT0C417

// Format and converse the map
Function PT0C420()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    PTWREC.XXXMODID = PT0CM004.XXXMODID; /* Module identification*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If map is not formatted, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (PT0CM004.XXXCURDT == 0) /* Map is not formatted*/
    PT0C421(); /* Format the data on the map*/
  end

   /* ------------------------------------------------------------*/
   /* If not all warehouses specified, protect warehouse code.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.XWHCD != "XX") /* Not all warehouses*/
    set PT0CM004.XWHCD skip; /* Protect warehouse code*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PT0CM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PT0CM004.PT0CMTTE = PT0CW00.PT0CMTTE; /* Title*/
  PT0CM004.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PT0CM004.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0) /* Message to display*/

    PT0CM004.XXXMODID = PTWREC.XXXMODID; /* Module identification*/
    if (PTWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PTWREC.XXXMSGNO);
    end /* Message number*/
    set PT0CM004 alarm; /* Indicate sound alarm*/

  end

  converse PT0CM004 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PT0CM004.XXXMODID = " "; /* Module identification*/
  COMMAREA.CATOAP = PT0CM004.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PT0CM004.CAITEM; /* Application data*/


end // end PT0C420

// Format the display data
Function PT0C421()
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.PT0CWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/

    TA5REC.TA5TSQIX = PT0CW00.PT0CWTSP; /* Page number*/

    PT0CS12(); /* Obtain temporary storage page*/

    PT0CW00.PT0CWBEG = 0; /* Beginning column*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PT0CM004.SY1STNBR = PT0CW04.SY1STNBR; /* Style number*/
  PT0CM004.SY2CLRID = PT0CW04.SY2CLRID; /* Color identification*/
  PT0CM004.XDMCD = PT0CW04.XDMCD; /* Dimension code*/
  PT0CM004.SY1SSTNM = PT0CW04.SY1SSTNM; /* Style short name*/
  PT0CM004.SY2CLRAB = PT0CW04.SY2CLRAB; /* Color abbreviation*/
  PT0CM004.XGAABRV = PT0CW04.XGAABRV; /* Gender age abbreviation*/
  PT0CM004.XOWCD = PT0CW00.XOWCD; /* Owner group code*/
  PT0CM004.XPCSDESC = PT0CW04.XPCSDESC; /* Category description*/
  PT0CM004.XSUABRV = PT0CW04.XSUABRV; /* Silhouette abbreviation*/
  PT0CM004.PG1SC4CD = PT0CW04.PG1SC4CD; /* Scheduler code*/
  PT0CM004.XXXLSTNM = PT0CW04.XXXLSTNM; /* Last name*/
  PT0CM004.XUMCD = PT0CW04.XUMCD; /* Unit of measure*/
  PT0CM004.PC2INSEG = PT0CW04.PC2INSEG; /* Specification difference*/
  PT0CM004.XPGCD = PT0CW04.XPGCD; /* Packaging type*/
  PT0CM004.XWHCD = PT0CW04.XWHCD; /* Warehouse code*/
  PT0CM004.XWHABRV = PT0CW04.XWHABRV; /* Abbreviation*/

  PT0CW00.PT0CWIXL = 1; /* Initialize line index*/

  while (PT0CW00.PT0CWIXL <= 12 /* Until end of lines*/
   && PT0CW04.PT0CTPRM[PT0CWIXL] > 0) /* or end of periods*/

    PT0CM004.PT0CTPMO[PT0CWIXL] = PT0CW04.PT0CTPMO[PT0CWIXL];
    if (PT0CW04.PT0CTPRM[PT0CWIXL] != "99") /* Not futures month*/
      PT0CM004.PT0CTPRM[PT0CWIXL] = PT0CW04.PT0CTPRM[PT0CWIXL];
    end

    PT0CW00.PT0CWAVQ = PT0CW04.PT0CWAVQ[PT0CWIXL];
    PT0CM004.PT3AVTOT[PT0CWIXL] = PT0CW04.PT3AVTOT[PT0CWIXL];

    PT0CW00.PT0CWIXC = PT0CW00.PT0CWIXL * 8; /* Column index*/
    PT0CW00.PT0CWEND = PT0CW00.PT0CWBEG + 8; /* Ending column*/

    while (PT0CW00.PT0CWEND > PT0CW00.PT0CWBEG) /* Until end of columns*/

      if (PT0CW04.SY4IDDSC[PT0CWEND] <= " ") /* No size information*/

        if (PT0CW00.PT0CWIXL == 1) /* First time through*/
          set PT0CM004.SY4IDDSC[PT0CWIXC] skip, invisible;
        end

      else

        if (PT0CW00.PT0CWIXL == 1) /* First time through*/
          PT0CM004.SY4IDDSC[PT0CWIXC] = PT0CW04.SY4IDDSC[PT0CWEND];
        end

        PT0CM004.PT3AVQT[PT0CWIXC] = PT0CW00.PT3AVQT[PT0CWEND];

      end

      PT0CW00.PT0CWEND = PT0CW00.PT0CWEND - 1; /* Decrement ending column*/
      PT0CW00.PT0CWIXC = PT0CW00.PT0CWIXC - 1; /* Decrement column index*/

    end

    PT0CW00.PT0CWIXL = PT0CW00.PT0CWIXL + 1; /* Increment line index*/

  end


end // end PT0C421

// Check attention identifier
Function PT0C430()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PT0CM004 initial; /* M004 input/output*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PT0C131(); /* Purge any temporary storage*/

      XSPT001(); /* Exit to another application*/

      PT0CW00.PT0CWSWM = "1"; /* Map to be displayed switch*/
      PT0CM001.XXXMODID = "430"; /* Module identification*/
      set PT0CM001.CATOAP cursor, bold; /* Highlight*/

    else

      PT0CM004.XXXMODID = "430"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PT0CM004"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      set PT0CM001 initial; /* M001 input/output*/

      PT0CW00.PT0CWSWM = "1"; /* Map to be displayed switch*/

      exit stack; /* Exit to display map*/

    end

    PT0C131(); /* Purge any temporary storage*/

    XSPT001(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    PT0CW00.PT0CWSWM = "1"; /* Map to be displayed switch*/
    PT0CM001.XXXMODID = "430"; /* Module identification*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5   /* and PF5 was not pressed*/
   && converseVar.eventKey not pf6   /* and PF6 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf17  /* and PF17 was not pressed*/
   && converseVar.eventKey not pf18) /* and PF18 was not pressed*/

    PT0CM004.XXXMODID = "430"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end


end // end PT0C430

// Reset highlighted fields
Function PT0C440()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PT0CM004.XWHCD initialAttributes; /* Warehouse code*/
  set PT0CM004.PT0CMSSA initialAttributes; /* Size scroll amount*/
  set PT0CM004.CATOAP initialAttributes; /* Commarea TO application*/
  set PT0CM004.CAITEM initialAttributes; /* Commarea application data*/


end // end PT0C440

// Verify the entered data
Function PT0C450()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PT0CM004.XXXMODID = "450"; /* Module identification*/
    set PT0CM004.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Restore any previously overlaid warehouse abbreviation.*/
   /* ------------------------------------------------------------*/

  PT0CM004.XWHABRV = PT0CW04.XWHABRV; /* Abbreviation*/

   /* ------------------------------------------------------------*/
   /* If PREV STY was requested, ensure that selections exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5) /* PREV STY was requested*/

    PT0CW00.PT0CWIXL = PT0CW00.PT0CWIXS - 1; /* Previous selection*/

    while (PT0CW00.PT0CWIXL >= 1 /* Until top of selections*/
     && PT0CM001.SY1STNBR[PT0CWIXL] <= " ") /* or selection found*/

      PT0CW00.PT0CWIXL = PT0CW00.PT0CWIXL - 1; /* Decrement index*/

    end

    if (PT0CW00.PT0CWIXL < 1) /* No previous selection*/

      PT0CM004.XXXMODID = "450"; /* Module identification*/
      converseLib.validationFailed(41); /* No previous style to display*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If NEXT STY was requested, ensure that selections exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* NEXT STY was requested*/

    PT0CW00.PT0CWIXL = PT0CW00.PT0CWIXS + 1; /* Next selection*/

    while (PT0CW00.PT0CWIXL <= 10 /* Until end of selections*/
     && PT0CM001.SY1STNBR[PT0CWIXL] <= " ") /* or selection found*/

      PT0CW00.PT0CWIXL = PT0CW00.PT0CWIXL + 1; /* Increment index*/

    end

    if (PT0CW00.PT0CWIXL > 10) /* No more selections*/

      PT0CM004.XXXMODID = "450"; /* Module identification*/
      converseLib.validationFailed(42); /* No more styles to display*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If LEFT was requested, ensure that columns exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* LEFT was requested*/
   && PT0CW00.PT0CWBEG == 0)       /* and at beginning column*/

    PT0CM004.XXXMODID = "450"; /* Module identification*/
    set PT0CM004.PT0CMSSA cursor; /* Establish cursor position*/
    converseLib.validationFailed(49); /* No previous sizes to display*/

  end

   /* ------------------------------------------------------------*/
   /* If RIGHT was requested, ensure that columns exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11 /* RIGHT was requested*/
   && PT0CW00.PT0CWBEG == PT0CW04.PT0CWMAX) /* and at maximum column*/

    PT0CM004.XXXMODID = "450"; /* Module identification*/
    set PT0CM004.PT0CMSSA cursor; /* Establish cursor position*/
    converseLib.validationFailed(50); /* No more sizes to display*/

  end

   /* ------------------------------------------------------------*/
   /* If PREV CLR was requested, ensure that colors exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17) /* PREV CLR was requested*/
    PT0C451(); /* Verify PREV CLR request*/
  end

   /* ------------------------------------------------------------*/
   /* If NEXT CLR was requested, ensure that colors exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf18) /* NEXT CLR was requested*/
    PT0C452(); /* Verify NEXT CLR request*/
  end

   /* ------------------------------------------------------------*/
   /* If size scroll amount changed, verify the number entered.*/
   /* ------------------------------------------------------------*/

  if (PT0CM004.PT0CMSSA != PT0CW00.PT0CMSSA) /* Size scroll changed*/

    if (PT0CM004.PT0CMSSA < 1 /* Less than 1*/
     || PT0CM004.PT0CMSSA > 99) /* or greater than 99*/

      PT0CM004.XXXMODID = "450"; /* Module identification*/
      set PT0CM004.PT0CMSSA cursor, bold; /* Highlight*/
      converseLib.validationFailed(53); /* Amount missing or invalid*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if warehouse change is not allowed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER not pressed*/
   && PT0CM004.XWHCD != PT0CW04.XWHCD) /* and warehouse changed*/

    PT0CM004.XXXMODID = "450"; /* Module identification*/
    set PT0CM004.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, determine the warehouse to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    if (PT0CM004.XWHCD == PT0CW04.XWHCD) /* Warehouse not changed*/

      PT0C453(); /* Find the next warehouse*/
    else
      PT0C454(); /* Verify the entered warehouse*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end PT0C450

// Verify PREV CLR request
Function PT0C451()
   /* ------------------------------------------------------------*/
   /* Search the previous pages for another color for the style.*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSP - 1; /* Previous page number*/

  while (PT0CW00.PT0CWTSS >= 1                 /* Until top of pages*/
   && PT0CM004.SY1STNBR == PT0CW04.SY1STNBR /* or style changes*/
   && PT0CM004.SY2CLRID == PT0CW04.SY2CLRID) /* or color changes*/

    TA5REC.TA5TSQIX = PT0CW00.PT0CWTSS; /* Page number*/

    PT0CS12(); /* Obtain temporary storage page*/

    if (PT0CM004.SY1STNBR == PT0CW04.SY1STNBR /* Same style*/
     && PT0CM004.SY2CLRID == PT0CW04.SY2CLRID) /* and same color*/

      PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSS - 1; /* Decrement page number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If no page found, indicate no previous color to display.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.PT0CWTSS < 1 /* No page found*/
   || PT0CM004.SY1STNBR != PT0CW04.SY1STNBR) /* or style changed*/

    PT0CM004.XXXMODID = "451"; /* Module identification*/
    converseLib.validationFailed(43); /* No previous color to display*/

  end

   /* ------------------------------------------------------------*/
   /* Reestablish the current temporary storage page.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = PT0CW00.PT0CWTSP; /* Page number*/

  PT0CS12(); /* Obtain temporary storage page*/


end // end PT0C451

// Verify NEXT CLR request
Function PT0C452()
   /* ------------------------------------------------------------*/
   /* Search the following pages for another color for the style.*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSP + 1; /* Next page number*/

  while (PT0CW00.PT0CWTSS <= PT0CW00.TA5TSQIX  /* Until end of pages*/
   && PT0CM004.SY1STNBR == PT0CW04.SY1STNBR /* or style changes*/
   && PT0CM004.SY2CLRID == PT0CW04.SY2CLRID) /* or color changes*/

    TA5REC.TA5TSQIX = PT0CW00.PT0CWTSS; /* Page number*/

    PT0CS12(); /* Obtain temporary storage page*/

    if (PT0CM004.SY1STNBR == PT0CW04.SY1STNBR /* Same style*/
     && PT0CM004.SY2CLRID == PT0CW04.SY2CLRID) /* and same color*/

      PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSS + 1; /* Increment page number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If no page was found, indicate no more colors to display.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.PT0CWTSS > PT0CW00.TA5TSQIX /* No page found*/
   || PT0CM004.SY1STNBR != PT0CW04.SY1STNBR) /* or style changed*/

    PT0CM004.XXXMODID = "452"; /* Module identification*/
    converseLib.validationFailed(44); /* No more colors to display*/

  end

   /* ------------------------------------------------------------*/
   /* Reestablish the current temporary storage page.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = PT0CW00.PT0CWTSP; /* Page number*/

  PT0CS12(); /* Obtain temporary storage page*/


end // end PT0C452

// Find the next warehouse
Function PT0C453()
   /* ------------------------------------------------------------*/
   /* If the last page, indicate no more warehouses to display.*/
   /* ------------------------------------------------------------*/

  if (PT0CW00.PT0CWTSP >= PT0CW00.TA5TSQIX) /* No more pages*/

    PT0CM004.XXXMODID = "453"; /* Module identification*/
    set PT0CM004.XWHCD cursor; /* Establish cursor position*/
    converseLib.validationFailed(48); /* No more warehouses to display*/

  else

    /* ------------------------------------------------------------*/
     /* Obtain the next page in temporary storage.*/
    /* ------------------------------------------------------------*/

    PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSP + 1; /* Increment page number*/

    TA5REC.TA5TSQIX = PT0CW00.PT0CWTSS; /* Page number*/

    PT0CS12(); /* Obtain temporary storage page*/

    /* ------------------------------------------------------------*/
     /* If product changed, indicate no more warehouses to display.*/
    /* ------------------------------------------------------------*/

    if (PT0CM004.SY1STNBR != PT0CW04.SY1STNBR /* Style changed*/
     || PT0CM004.SY2CLRID != PT0CW04.SY2CLRID) /* or color changed*/

      PT0CM004.XXXMODID = "453"; /* Module identification*/
      set PT0CM004.XWHCD cursor; /* Establish cursor position*/
      converseLib.validationFailed(48); /* No more warehouses to display*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Reestablish the current temporary storage page.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = PT0CW00.PT0CWTSP; /* Page number*/

  PT0CS12(); /* Obtain temporary storage page*/


end // end PT0C453

// Verify the entered warehouse
Function PT0C454()
   /* ------------------------------------------------------------*/
   /* Verify that a valid warehouse code was entered.*/
   /* ------------------------------------------------------------*/

  if (PT0CM004.XWHCD == "**" /* Corporate warehouse*/
   || PT0CM004.XWHCD in XWHTBL.XWHCD) /* or code in table*/

    if (PT0CM004.XWHCD == "**") /* Corporate warehouse*/

      PT0CM004.XWHABRV = "CORP WHSE"; /* Abbreviation*/
    else
      PT0CM004.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* Abbreviation*/

      if (PT0CM004.XWHCD == "DP")
        PT0CM004.XWHABRV = "PROMO DRS"; /* Abbreviation*/
      end

    end

    /* ------------------------------------------------------------*/
     /* Search the pages for a match on warehouse, style and color.*/
    /* ------------------------------------------------------------*/

    PT0CW00.PT0CWTSS = 1; /* Initialize page number*/

    while (PT0CM004.XWHCD != PT0CW04.XWHCD       /* Until same warehouse*/
     || PT0CM004.SY1STNBR != PT0CW04.SY1STNBR /* and same style*/
     || PT0CM004.SY2CLRID != PT0CW04.SY2CLRID) /* and same color*/

      TA5REC.TA5TSQIX = PT0CW00.PT0CWTSS; /* Page number*/

      PT0CS12(); /* Obtain temporary storage page*/

      if (PT0CM004.XWHCD != PT0CW04.XWHCD       /* Warehouse not same*/
       || PT0CM004.SY1STNBR != PT0CW04.SY1STNBR /* or style not same*/
       || PT0CM004.SY2CLRID != PT0CW04.SY2CLRID) /* or color not same*/

        PT0CW00.PT0CWTSS = PT0CW00.PT0CWTSS + 1; /* Increment page number*/

        if (PT0CW00.PT0CWTSS > PT0CW00.TA5TSQIX) /* No page found*/

          PT0CW04.XWHCD = PT0CM004.XWHCD; /* Warehouse*/
          PT0CW04.SY1STNBR = PT0CM004.SY1STNBR; /* Style*/
          PT0CW04.SY2CLRID = PT0CM004.SY2CLRID; /* Color*/

        end

      end

    end

    /* ------------------------------------------------------------*/
     /* If no page was found, indicate no product availability.*/
    /* ------------------------------------------------------------*/

    if (PT0CW00.PT0CWTSS > PT0CW00.TA5TSQIX) /* No page found*/

      set PT0CM004.XWHCD cursor, bold; /* Highlight*/
      PT0CM004.XXXMODID = "454"; /* Module identification*/
      converseLib.validationFailed(51); /* No availability for warehouse*/

    end

    /* ------------------------------------------------------------*/
     /* Reestablish the current temporary storage page.*/
    /* ------------------------------------------------------------*/

    TA5REC.TA5TSQIX = PT0CW00.PT0CWTSP; /* Page number*/

    PT0CS12(); /* Obtain temporary storage page*/

  else

    /* ------------------------------------------------------------*/
     /* Indicate that warehouse code is missing or invalid.*/
    /* ------------------------------------------------------------*/

    PT0CM004.XWHABRV = " "; /* Clear abbreviation*/

    set PT0CM004.XWHCD cursor, bold; /* Highlight*/
    PT0CM004.XXXMODID = "454"; /* Module identification*/
    converseLib.validationFailed(36); /* Indicate missing or invalid*/

  end


end // end PT0C454

// Process valid input request
Function PT0C460()
   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, adjust the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    PT0CW00.PT0CWTSP = PT0CW00.PT0CWTSS; /* Page number*/
  end

   /* ------------------------------------------------------------*/
   /* Save the key map data and clear the map input/output area.*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CMSSA = PT0CM004.PT0CMSSA; /* Size scroll amount*/

  set PT0CM004 initial; /* M004 input/output*/

   /* ------------------------------------------------------------*/
   /* Commit all changes to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 1;
  sysLib.commit(); /* Commit all changes*/

   /* ------------------------------------------------------------*/
   /* If PREV or NEXT STY was requested, adjust selection index.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5) /* PREV was requested*/

    PT0CW00.PT0CWIXS = PT0CW00.PT0CWIXS - 1; /* Decrement index*/

    while (PT0CM001.SY1STNBR[PT0CWIXS] <= " ") /* Bypass blank lines*/
      PT0CW00.PT0CWIXS = PT0CW00.PT0CWIXS - 1; /* Decrement index*/
    end

    set PT0CM001.SY1STNBR[PT0CWIXS] cursor; /* Position cursor*/
    PT0CW00.PT0CWSWR = "Y"; /* Request for data switch*/

  end

  if (converseVar.eventKey is pf6) /* NEXT was requested*/

    PT0CW00.PT0CWIXS = PT0CW00.PT0CWIXS + 1; /* Increment index*/

    while (PT0CM001.SY1STNBR[PT0CWIXS] <= " ") /* Bypass blank lines*/
      PT0CW00.PT0CWIXS = PT0CW00.PT0CWIXS + 1; /* Increment index*/
    end

    set PT0CM001.SY1STNBR[PT0CWIXS] cursor; /* Position cursor*/
    PT0CW00.PT0CWSWR = "Y"; /* Request for data switch*/

  end

   /* ------------------------------------------------------------*/
   /* If LEFT or RIGHT was requested, adjust beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* LEFT was requested*/

    PT0CW00.PT0CWBEG = PT0CW00.PT0CWBEG - PT0CW00.PT0CMSSA;

    if (PT0CW00.PT0CWBEG < 0) /* Past minimum*/

      PT0CW00.PT0CWBEG = 0; /* Default to minimum*/

      PT0CM004.XXXMODID = "460"; /* Module identification*/
      PTWREC.XXXMSGNO = 56; /* First size is shown*/

    end

    set PT0CM004.PT0CMSSA cursor; /* Establish cursor position*/

  end

  if (converseVar.eventKey is pf11) /* RIGHT was requested*/

    PT0CW00.PT0CWBEG = PT0CW00.PT0CWBEG + PT0CW00.PT0CMSSA;

    if (PT0CW00.PT0CWBEG > PT0CW04.PT0CWMAX) /* Past maximum*/

      PT0CW00.PT0CWBEG = PT0CW04.PT0CWMAX; /* Default to maximum*/

      PT0CM004.XXXMODID = "460"; /* Module identification*/
      PTWREC.XXXMSGNO = 57; /* Last size is shown*/

    end

    set PT0CM004.PT0CMSSA cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If PRINT was requested, format and submit the request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* PRINT was requested*/
    if (TA3REC.TA3RGNID == "03") /* IF PRODUCTION REGION*/
      PT0C461(); /* Format/submit print request*/
    else /**/
      PT0C462(); /* FORMAT/SUBMIT PRINT IN TEST REGION*/
    end /**/
  end

   /* ------------------------------------------------------------*/
   /* If PERIODS was requested, indicate display MAP 002.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* PERIODS was requested*/

    set PT0CM002 initial; /* M002 input/output*/

    PT0CW00.PT0CWSWM = "2"; /* Map to be displayed switch*/
    PT0CW00.PT0CWSWR = "Y"; /* Request for data switch*/

    PT0CM002.XWHCD = PT0CW04.XWHCD; /* Warehouse*/
    PT0CM002.SY1STNBR = PT0CW04.SY1STNBR; /* Style*/
    PT0CM002.SY2CLRID = PT0CW04.SY2CLRID; /* Color*/

  end

   /* ------------------------------------------------------------*/
   /* If PREV or NEXT CLR was requested, adjust page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17 /* PREV CLR was requested*/
   || converseVar.eventKey is pf18) /* or NEXT CLR was requested*/

    PT0CW00.PT0CWTSP = PT0CW00.PT0CWTSS; /* Page number*/

  end


end // end PT0C460

// Format/submit print request
Function PT0C461()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PT0CW00.PT0CWIXT = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PT0CW00.PT0CWIXT > 0) /* Until end of table*/

    if (PT0CT01.TARTYPE[PT0CWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters for the product/warehouse being viewed.*/
      /* ------------------------------------------------------------*/

      PT0CW01.XWHCD = PT0CW04.XWHCD; /* Warehouse*/
      PT0CW01.SY1STNBR = PT0CW04.SY1STNBR; /* Style*/
      PT0CW01.SY2CLRID = PT0CW04.SY2CLRID; /* Color*/
      PT0CW01.XDMCD = PT0CW04.XDMCD; /* Dimension*/
      PT0CW01.XOWCD = PT0CW04.XOWCD; /* Owner*/

      PT0CS06(); /* Format selection parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      if (PT0CW00.XGPCD == "01" /* In Store Promo*/
       && PT0CT01.TARTYPE[PT0CWIXT] == "A") /* apparel  bypass*/

        PT0CW00.PT0CWIXT = PT0CW00.PT0CWIXT + 1; /* Increment table index*/

      end

      if (PT0CW00.XGPCD == "03" /* Apparel*/
       && PT0CT01.TARTYPE[PT0CWIXT] == "S") /* In Store*/

        PT0CW00.PT0CWIXT = PT0CW00.PT0CWIXT + 1; /* Increment table index*/

      end

      TA6REC.TARJCL[TA6INDEX] = PT0CT01.TARJCL[PT0CWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT0CT01.TARTYPE[PT0CWIXT]; /* Type*/


      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT0CT01.TARJCL[PT0CWIXT] == "/*EOF") /* End of table*/

      PT0CW00.PT0CWIXT = 0; /* Indicate end of table*/
    else
      PT0CW00.PT0CWIXT = PT0CW00.PT0CWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PT0CM004.XXXMODID = "461"; /* Module identification*/

  PT0CS07(); /* Submit the JCL*/


end // end PT0C461

// Format/submit print request
Function PT0C462()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PT0CW00.PT0CWIXT = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PT0CW00.PT0CWIXT > 0) /* Until end of table*/

    if (PT0CT03.TARTYPE[PT0CWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters for the product/warehouse being viewed.*/
      /* ------------------------------------------------------------*/

      PT0CW01.XWHCD = PT0CW04.XWHCD; /* Warehouse*/
      PT0CW01.SY1STNBR = PT0CW04.SY1STNBR; /* Style*/
      PT0CW01.SY2CLRID = PT0CW04.SY2CLRID; /* Color*/
      PT0CW01.XDMCD = PT0CW04.XDMCD; /* Dimension*/
      PT0CW01.XOWCD = PT0CW04.XOWCD; /* Owner*/

      PT0CS13(); /* Format selection parameters FOR TEST.*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      if (PT0CW00.XGPCD == "01" /* In Store Promo*/
       && PT0CT03.TARTYPE[PT0CWIXT] == "A") /* apparel  bypass*/

        PT0CW00.PT0CWIXT = PT0CW00.PT0CWIXT + 1; /* Increment table index*/

      end

      if (PT0CW00.XGPCD == "03" /* Apparel*/
       && PT0CT03.TARTYPE[PT0CWIXT] == "S") /* In Store*/

        PT0CW00.PT0CWIXT = PT0CW00.PT0CWIXT + 1; /* Increment table index*/

      end

      TA6REC.TARJCL[TA6INDEX] = PT0CT03.TARJCL[PT0CWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT0CT03.TARTYPE[PT0CWIXT]; /* Type*/


      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT0CT03.TARJCL[PT0CWIXT] == "/*EOF") /* End of table*/

      PT0CW00.PT0CWIXT = 0; /* Indicate end of table*/
    else
      PT0CW00.PT0CWIXT = PT0CW00.PT0CWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PT0CM004.XXXMODID = "461"; /* Module identification*/

  PT0CS07(); /* Submit the JCL*/


end // end PT0C462

// Select the first style row
Function PT0CS01()
   /* ------------------------------------------------------------*/
   /* Select the row from the Production Style/Color Table.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1PGMNM = "PT0CS01"; /* Process name*/

  XSPG201(); /* Select style information*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PT0CM001.SY1SSTNM[PT0CWIXL] = PG2REC.SY1SSTNM;
    PT0CM001.SY2CLRAB[PT0CWIXL] = "ALL COLORS";
    PT0CM001.XUMCD[PT0CWIXL] = PG2REC.XUMCD;
    if (PG2REC.XUMCD in XUMTBL.XUMCD)
      PT0CM001.XUMDESC[PT0CWIXL] = XUMTBL.XUMDESC[sysVar.arrayIndex];
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If row not found, indicate style is missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/

    PT0CW00.PT0CWSWE = "Y"; /* Indicate error found*/

    PT0CM001.XXXMODID = "S01"; /* Module identification*/
    set PT0CM001.SY1STNBR[PT0CWIXL] cursor, bold; /* Highlight*/
    converseLib.validationFailed(28); /* Indicate missing or invalid*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0CM001.XXXMODID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/

  end

  exit stack; /* Exit to display map*/


end // end PT0CS01

// Select style/color table row
Function PT0CS02()
   /* ------------------------------------------------------------*/
   /* Select the row from the Production Style/Color Table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the description and return to the*/
   /* previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PT0CM001.SY1SSTNM[PT0CWIXL] = PG2REC.SY1SSTNM;
    PT0CM001.SY2CLRAB[PT0CWIXL] = PG2REC.SY2CLRAB;
    PT0CM001.XUMCD[PT0CWIXL] = PG2REC.XUMCD;
    if (PG2REC.XUMCD in XUMTBL.XUMCD)
      PT0CM001.XUMDESC[PT0CWIXL] = XUMTBL.XUMDESC[sysVar.arrayIndex];
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If row not found, indicate color is missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/

    PT0CW00.PT0CWSWE = "Y"; /* Indicate error found*/

    PT0CM001.XXXMODID = "S02"; /* Module identification*/
    set PT0CM001.SY1STNBR[PT0CWIXL] cursor, bold; /* Highlight*/
    set PT0CM001.SY2CLRID[PT0CWIXL] bold; /* Highlight*/
    set PT0CM001.XDMCD[PT0CWIXL] bold; /* Highlight*/
    converseLib.validationFailed(37); /* Indicate product number invalid*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0CM001.XXXMODID = "S02"; /* Module identification*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PT0CS02"; /* Module identification*/
  TA1REC.TA1LOC = "VERIFY COLOR IDENTIFICATION";
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0CS02

// Select base table set
Function PT0CS03()
   /* ------------------------------------------------------------*/
   /* Initialize the end of cursor switch.*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CWSWC = "N"; /* End of cursor switch*/
  PT2REC.XCTCD = "    "; /* Country code not used*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3080" ("S1", SQLCA, PT2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PT0CM001.XXXMODID = "S03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PT0CM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABASE01"; /* Table view name*/
  TA1REC.TA1TBLKE = PT2REC.PT2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0CS03

// Fetch base table row
Function PT0CS04()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3080" ("N1", SQLCA, PT2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PT0CW00.PT0CWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PT0CM001.XXXMODID = "S04"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PT0CM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABASE01"; /* Table view name*/
  TA1REC.TA1TBLKE = PT2REC.PT2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0CS04

// Close base table set
Function PT0CS05()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3080" ("C1", SQLCA, PT2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PT0CM001.XXXMODID = "S05"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PT0CM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABASE01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0CS05

// Format selection parameters
Function PT0CS06()
   /* ------------------------------------------------------------*/
   /* Indicate the file where the selection is to be written.*/
   /* ------------------------------------------------------------*/

  TA6REC.TARJCL[TA6INDEX] = "DDCARD     01"; /* Select file*/

  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

   /* ------------------------------------------------------------*/
   /* If not all warehouses, specify the warehouse to select.*/
   /* ------------------------------------------------------------*/

  if (PT0CW01.XWHCD != "XX") /* Not all warehouses*/

    PT0CW01.TARJCL = PT0CT01.TARJCL[PT0CWIXT]; /* Format*/

    PT0CW01.PT0CWDLN = 1; /* Line number*/
    PT0CW01.PT0CWDCN = 16; /* Column number*/
    PT0CW01.PT0CWDA3 = PT0CW01.XWHCD; /* Warehouse*/

    TA6REC.TARJCL[TA6INDEX] = PT0CW01.TARJCL; /* Parameters*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end

   /* ------------------------------------------------------------*/
   /* Specify the style to select.*/
   /* ------------------------------------------------------------*/

  PT0CW01.TARJCL = PT0CT01.TARJCL[PT0CWIXT]; /* Format*/

  PT0CW01.PT0CWDLN = 2; /* Line number*/
  PT0CW01.PT0CWDCN = 10; /* Column number*/
  PT0CW01.PT0CWDA6 = PT0CW01.SY1STNBR; /* Style*/
  PT0CW01.PT0CWDDL = "/"; /* Delimiter*/

  TA6REC.TARJCL[TA6INDEX] = PT0CW01.TARJCL; /* Parameters*/

  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

   /* ------------------------------------------------------------*/
   /* If not all colors, specify the color to select.*/
   /* ------------------------------------------------------------*/

  if (PT0CW01.SY2CLRID != "***") /* Not all colors*/

    PT0CW01.TARJCL = PT0CT01.TARJCL[PT0CWIXT]; /* Format*/

    PT0CW01.PT0CWDLN = 2; /* Line number*/
    PT0CW01.PT0CWDCN = 23; /* Column number*/
    PT0CW01.PT0CWDA3 = PT0CW01.SY2CLRID; /* Color*/

    TA6REC.TARJCL[TA6INDEX] = PT0CW01.TARJCL; /* Parameters*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end

   /* ------------------------------------------------------------*/
   /* Specify the dimension to select.*/
   /* ------------------------------------------------------------*/

  PT0CW01.TARJCL = PT0CT01.TARJCL[PT0CWIXT]; /* Format*/

  PT0CW01.PT0CWDLN = 2; /* Line number*/
  PT0CW01.PT0CWDCN = 33; /* Column number*/
  PT0CW01.PT0CWDA3 = PT0CW01.XDMCD; /* Dimension*/

  TA6REC.TARJCL[TA6INDEX] = PT0CW01.TARJCL; /* Parameters*/

  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

   /* ------------------------------------------------------------*/
   /* Specify the owner     to select.*/
   /* ------------------------------------------------------------*/

  PT0CW01.TARJCL = PT0CT01.TARJCL[PT0CWIXT]; /* Format*/

  PT0CW01.PT0CWDLN = 2; /* Line number*/
  PT0CW01.PT0CWDCN = 75; /* Column number*/
  PT0CW01.PT0CWDA3 = PT0CW01.XOWCD; /* Owner*/

  TA6REC.TARJCL[TA6INDEX] = PT0CW01.TARJCL; /* Parameters*/

  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


end // end PT0CS06

// Submit the JCL for execution
Function PT0CS07()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* Tailor and submit JCL*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PTWREC.XXXMSGNO = 40; /* Indicate job was submitted*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(39); /* Indicate user cancelled*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/

  end

  exit stack; /* Exit to display map*/


end // end PT0CS07

// Obtain product style/color
Function PT0CS08()
   /* ------------------------------------------------------------*/
   /* Obtain the product style/color table row.*/
   /* ------------------------------------------------------------*/

  if (PT3REC.XGPCD != PG2REC.XGPCD       /* GPC changed*/
   || PT3REC.SY1STNBR != PG2REC.SY1STNBR /* or style changed*/
   || PT3REC.SY2CLRID != PG2REC.SY2CLRID /* or color changed*/
   || PT3REC.XDMCD != PG2REC.XDMCD)      /* or dimension changed*/

    PG2REC.XGPCD = PT3REC.XGPCD; /* GPC*/
    PG2REC.SY1STNBR = PT3REC.SY1STNBR; /* Style*/
    PG2REC.SY2CLRID = PT3REC.SY2CLRID; /* Color*/
    PG2REC.XDMCD = PT3REC.XDMCD; /* Dimension*/
    TA1REC.TA1PGMNM = "PT0CS08"; /* Process name*/

    XSPG202(); /* Select style/color row*/

    if (sysVar.errorCode != "00000000" /* Call not successful*/
     || SQLCA.VAGen_SQLCODE != 0)      /* or not normal return*/

      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

        converseLib.validationFailed(11); /* Indicate data in use*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/

      end

      PT0CW00.PT0CWSWM = "1"; /* Map to be displayed switch*/
      PT0CM001.XXXMODID = "S08"; /* Module identification*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Determine if the season/year matches entered season/year.*/
   /* ------------------------------------------------------------*/

  PT0CW00.PT0CWSWS = "N"; /* Default match found switch*/

  if (PT0CW00.XSECD == " ") /* Season/year not specified*/

    PT0CW00.PT0CWSWS = "Y"; /* Indicate match found*/

  else

    if (PT0CW00.XSECD == "SP") /* Spring season specified*/

      if (PG2REC.XSECD == "SP" /* Spring season*/
       || PG2REC.XSECD == "CS" /* or spring closeout*/
       || PG2REC.XSECD == "CF") /* or fall closeout*/

        if (PG2REC.XSNYR == PT0CW00.XSNYR[1]) /* For this year*/
          PT0CW00.PT0CWSWS = "Y"; /* Indicate match found*/
        end

      end

    else

      if (PG2REC.XSECD == "FA" /* Fall season*/
       || PG2REC.XSECD == "CF" /* or fall closeout*/
       || PG2REC.XSECD == "CS") /* or spring closeout*/

        if (PG2REC.XSECD == "CS") /* if spring closeout*/
          if (PG2REC.XSNYR == PT0CW00.XSNYR[2]) /* and next year*/
            PT0CW00.PT0CWSWS = "Y"; /* Indicate match found*/
          end
        else
          if (PG2REC.XSNYR == PT0CW00.XSNYR[1]) /* For this year*/
            PT0CW00.PT0CWSWS = "Y"; /* Indicate match found*/
          end
        end

      end
    end
  end


end // end PT0CS08

// Obtain scheduler last name
Function PT0CS09()
   /* ------------------------------------------------------------*/
   /* Select the row from the Production Special Users Table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1200" ("S ", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* If row not found, indicate last name is unknown.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PG1REC.XXXLSTNM = "UNKNOWN"; /* Last name*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0CM001.XXXMODID = "S09"; /* Module identification*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PT0CS09"; /* Module identification*/
  TA1REC.TA1LOC = "OBTAIN SCHEDULER LAST NAME";
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG1REC.PG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PT0CW00.PT0CWSWM = "1"; /* Map to be displayed switch*/

  exit stack; /* Exit to display map*/


end // end PT0CS09

// Obtain temporary storage page
Function PT0CS10()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PT0CW03.PT0CWTSL = PT0CW00.PT0CWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PT0CW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0CM001.XXXMODID = "S10"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1PGMNM = "PT0CS10"; /* Module identification*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1MAP = "PT0CM003"; /* Map name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PT0CW00.PT0CWSWM = "1"; /* Indicate map to display*/

  exit stack; /* Exit to display map*/


end // end PT0CS10

// Format the display storage
Function PT0CS11()
   /* ------------------------------------------------------------*/
   /* If header/trailer flag changed, initialize column index.*/
   /* ------------------------------------------------------------*/

  if (PT2REC.PT2HDTR != PT0CW02.PT2HDTR) /* Header/trailer change*/
    PT0CW00.PT0CWIXC = 1; /* Initialize column index*/
  end

   /* ------------------------------------------------------------*/
   /* Save the data in display storage.*/
   /* ------------------------------------------------------------*/

  PT0CW02.PT2HDTR = PT2REC.PT2HDTR; /* Header/trailer indicator*/

  if (PT0CW02.PT2HDTR == "H") /* Header row*/

    PT0CW02.PT2QTOT1[1] = PT2REC.PT2QTOT1; /* Current inventory*/
    PT0CW02.PT2QTOT2[1] = PT2REC.PT2QTOT2; /* Past due bookings*/
    PT0CW02.PT2QTOT3[1] = PT2REC.PT2QTOT3; /* Available inventory*/

  end

  if (PT0CW02.PT2HDTR == "T") /* Trailer row*/

    PT0CW02.PT2QTOT1[2] = PT2REC.PT2QTOT1; /* Smart reservation*/
    PT0CW02.PT2QTOT2[2] = PT2REC.PT2QTOT2; /* Future available*/
    PT0CW02.PT2QTOT3[2] = PT2REC.PT2QTOT3; /* This weeks bookings*/

  end

  PT0CW00.PT0CWIXR = 1; /* Initialize record index*/

  while (PT0CW00.PT0CWIXR <= 10 /* Until end of array*/
   && PT2REC.SY5SZID[PT0CWIXR] != 0) /* or end of sizes*/

    if (PT0CW02.PT2HDTR == "H") /* Header row*/

      PT0CW02.PT2QTY1[PT0CWIXC] = PT2REC.PT2QTY1[PT0CWIXR];
      PT0CW02.PT2QTY2[PT0CWIXC] = PT2REC.PT2QTY2[PT0CWIXR];
      PT0CW02.PT2QTY3[PT0CWIXC] = PT2REC.PT2QTY3[PT0CWIXR];

    end

    if (PT0CW02.PT2HDTR == "T") /* Trailer row*/

      PT0CW02.PT2PCT1[PT0CWIXC] = PT2REC.PT2PCT1[PT0CWIXR];

      PT0CW02.PT0CMPCT = PT0CW02.PT0CMPCT + PT2REC.PT2PCT1[PT0CWIXR];

      PT0CW00.PT2PCT1 = PT2REC.PT2PCT1[PT0CWIXR];
      PT0CW00.PT2QTY2 = PT2REC.PT2QTY2[PT0CWIXR];
      PT0CW00.PT0CWIXF = PT0CW03.SY5SZID[PT0CWIXR];

      if (PT0CW03.SY3FRGUT[PT0CWIXF] == "F") /* Fringe size*/

        PT0CW00.PT2QTOT2 = PT2REC.PT2QTOT2 * PT0CW00.PT2PCT1 / 100;
      else
        PT0CW00.PT2QTOT2 = mathLib.round(PT2REC.PT2QTOT2 * PT0CW00.PT2PCT1 / 100, -mathLib.decimals(PT0CW00.PT2QTOT2));

      end

      PT0CW02.PT0CMVAR[PT0CWIXC] = PT0CW00.PT2QTY2 - PT0CW00.PT2QTOT2;
      PT0CW02.PT0CMVAT = PT0CW02.PT0CMVAT + PT0CW02.PT0CMVAR[PT0CWIXC];

      PT0CW00.PT0CWIXC = PT0CW00.PT0CWIXC + 40; /* Adjust for map output*/

      PT0CW02.PT2QTY1[PT0CWIXC] = PT2REC.PT2QTY1[PT0CWIXR];
      PT0CW02.PT2QTY2[PT0CWIXC] = PT2REC.PT2QTY2[PT0CWIXR];
      PT0CW02.PT2QTY3[PT0CWIXC] = PT2REC.PT2QTY3[PT0CWIXR];

      PT0CW00.PT0CWIXC = PT0CW00.PT0CWIXC - 40; /* Remove adjustment*/

    end

    PT0CW00.PT0CWIXR = PT0CW00.PT0CWIXR + 1; /* Record index*/
    PT0CW00.PT0CWIXC = PT0CW00.PT0CWIXC + 1; /* Column index*/

  end


end // end PT0CS11

// Obtain temporary storage page
Function PT0CS12()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PT0CW04.PT0CWTSL = PT0CW00.PT0CWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PT0CW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0CM001.XXXMODID = "S12"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1PGMNM = "PT0CS12"; /* Module identification*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1MAP = "PT0CM004"; /* Map name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PT0CW00.PT0CWSWM = "1"; /* Indicate map to display*/

  exit stack; /* Exit to display map*/


end // end PT0CS12

// Format selection parameters
Function PT0CS13()
   /* ------------------------------------------------------------*/
   /* Indicate the file where the selection is to be written.*/
   /* ------------------------------------------------------------*/

  TA6REC.TARJCL[TA6INDEX] = "DDCARD     01"; /* Select file*/

  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

   /* ------------------------------------------------------------*/
   /* If not all warehouses, specify the warehouse to select.*/
   /* ------------------------------------------------------------*/

  if (PT0CW01.XWHCD != "XX") /* Not all warehouses*/

    PT0CW01.TARJCL = PT0CT03.TARJCL[PT0CWIXT]; /* Format*/

    PT0CW01.PT0CWDLN = 1; /* Line number*/
    PT0CW01.PT0CWDCN = 16; /* Column number*/
    PT0CW01.PT0CWDA3 = PT0CW01.XWHCD; /* Warehouse*/

    TA6REC.TARJCL[TA6INDEX] = PT0CW01.TARJCL; /* Parameters*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end

   /* ------------------------------------------------------------*/
   /* Specify the style to select.*/
   /* ------------------------------------------------------------*/

  PT0CW01.TARJCL = PT0CT03.TARJCL[PT0CWIXT]; /* Format*/

  PT0CW01.PT0CWDLN = 2; /* Line number*/
  PT0CW01.PT0CWDCN = 10; /* Column number*/
  PT0CW01.PT0CWDA6 = PT0CW01.SY1STNBR; /* Style*/
  PT0CW01.PT0CWDDL = "/"; /* Delimiter*/

  TA6REC.TARJCL[TA6INDEX] = PT0CW01.TARJCL; /* Parameters*/

  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

   /* ------------------------------------------------------------*/
   /* If not all colors, specify the color to select.*/
   /* ------------------------------------------------------------*/

  if (PT0CW01.SY2CLRID != "***") /* Not all colors*/

    PT0CW01.TARJCL = PT0CT03.TARJCL[PT0CWIXT]; /* Format*/

    PT0CW01.PT0CWDLN = 2; /* Line number*/
    PT0CW01.PT0CWDCN = 23; /* Column number*/
    PT0CW01.PT0CWDA3 = PT0CW01.SY2CLRID; /* Color*/

    TA6REC.TARJCL[TA6INDEX] = PT0CW01.TARJCL; /* Parameters*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end

   /* ------------------------------------------------------------*/
   /* Specify the dimension to select.*/
   /* ------------------------------------------------------------*/

  PT0CW01.TARJCL = PT0CT03.TARJCL[PT0CWIXT]; /* Format*/

  PT0CW01.PT0CWDLN = 2; /* Line number*/
  PT0CW01.PT0CWDCN = 33; /* Column number*/
  PT0CW01.PT0CWDA3 = PT0CW01.XDMCD; /* Dimension*/

  TA6REC.TARJCL[TA6INDEX] = PT0CW01.TARJCL; /* Parameters*/

  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

   /* ------------------------------------------------------------*/
   /* Specify the owner     to select.*/
   /* ------------------------------------------------------------*/

  PT0CW01.TARJCL = PT0CT03.TARJCL[PT0CWIXT]; /* Format*/

  PT0CW01.PT0CWDLN = 2; /* Line number*/
  PT0CW01.PT0CWDCN = 75; /* Column number*/
  PT0CW01.PT0CWDA3 = PT0CW01.XOWCD; /* Owner*/

  TA6REC.TARJCL[TA6INDEX] = PT0CW01.TARJCL; /* Parameters*/

  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


end // end PT0CS13

//*** RECORD=PT0CW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PT0CW00 type basicRecord
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 XOWCD XOWCD ; 
  10 XOWDESC XOWDESC ; 
  10 XSNABRV XSNABRV ; 
  10 XSNDESC XSNDESC ; 
  10 PT0CWSNX PT0CWSNX ; 
    20 XSECD XSECD ; 
    20 PT0CWSNY PT0CWSNY ; 
  10 XSNYR XSNYR [2] ; 
  10 XPCKEY XPCKEY ; 
    20 XGACD XGACD ; 
      21 XPCCD XPCCD ; 
        22 XSUCD XSUCD ; 
    20 XGPCD XGPCD ; 
  10 PT0CMTTE PT0CMTTE ; 
  10 PT0CMPSA PT0CMPSA ; 
  10 PT0CMSSA PT0CMSSA ; 
  10 PT0CWBEG PT0CWBEG ; 
  10 PT0CWEND PT0CWEND ; 
  10 PT0CWIXC PT0CWIXC ; 
  10 PT0CWIXF PT0CWIXF ; 
  10 PT0CWIXL PT0CWIXL ; 
  10 PT0CWIXR PT0CWIXR ; 
  10 PT0CWIXS PT0CWIXS ; 
  10 PT0CWIXT PT0CWIXT ; 
  10 PT0CWIXD PT0CWIXD ; 
  10 PT0CWSWC PT0CWSWC ; 
  10 PT0CWSWE PT0CWSWE ; 
  10 PTWPT0CS PTWPT0CS ; 
  10 PT0CWSWM PT0CWSWM ; 
  10 PT0CWSWP PT0CWSWP ; 
  10 PT0CWSWR PT0CWSWR ; 
  10 PT0CWSWS PT0CWSWS ; 
  10 PT0CWTSL PT0CWTSL ; 
  10 PT0CWTSP PT0CWTSP ; 
  10 PT0CWTSS PT0CWTSS ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 PT0CWPER PT0CWPER ; 
    15 * char(4) ; 
    15 PT0CTPRM PT0CTPRM ; 
  10 PT0CTPMO PT0CTPMO ; 
  10 PT0CWAVQ PT0CWAVQ ; 
    15 PT3AVQT PT3AVQT [40] ; 
  10 PT2QTY2 PT2QTY2 ; 
  10 PT2QTOT2 PT2QTOT2 ; 
  10 PT2PCT1 PT2PCT1 ; 
  10 PT0CW-COLOR-TABLE PT0CW-COLOR-TABLE ; 
  10 PT0CW-COLOR PT0CW-COLOR [400] ; 
end // end PT0CW00

//*** RECORD=PT0CW01 ****
// --------------------------------------
// Disseminator print request parameters.
// --------------------------------------
// ***********************
Record PT0CW01 type basicRecord
  5 XWHCD XWHCD ; 
  5 XOWCD XOWCD ; 
  5 SY1STNBR SY1STNBR ; 
  5 SY2CLRID SY2CLRID ; 
  5 XDMCD XDMCD ; 
  5 TARJCL TARJCL ; 
    10 * char(16) ; 
    10 PT0CWDLN PT0CWDLN ; 
    10 * char(9) ; 
    10 PT0CWDCN PT0CWDCN ; 
    10 * char(2) ; 
    10 PT0CWDA6 PT0CWDA6 ; 
      15 PT0CWDA3 PT0CWDA3 ; 
      15 * char(3) ; 
    10 PT0CWDDL PT0CWDDL ; 
    10 * char(41) ; 
end // end PT0CW01

//*** RECORD=PT0CW02 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record PT0CW02 type basicRecord
  10 PT2KEY PT2KEY ; 
  10 PT2HDTR PT2HDTR ; 
  10 PT2QTY1 PT2QTY1 [80] ; 
  10 PT2QTY2 PT2QTY2 [80] ; 
  10 PT2QTY3 PT2QTY3 [80] ; 
  10 PT2PCT1 PT2PCT1 [40] ; 
  10 PT0CMVAR PT0CMVAR [40] ; 
  10 PT2QTOT1 PT2QTOT1 [2] ; 
  10 PT2QTOT2 PT2QTOT2 [2] ; 
  10 PT2QTOT3 PT2QTOT3 [2] ; 
  10 PT0CMPCT PT0CMPCT ; 
  10 PT0CMVAT PT0CMVAT ; 
end // end PT0CW02

//*** RECORD=PT0CW03 ****
// ------------------------
// Map 003 display storage.
// ------------------------
// ***********************
Record PT0CW03 type basicRecord
  5 PT0CWTSL PT0CWTSL ; 
  5 * char(1106) ; 
    10 PT3KEY PT3KEY ; 
      15 PG2KEY PG2KEY ; 
        20 XGPCD XGPCD ; 
        20 SY1STNBR SY1STNBR ; 
        20 SY2CLRID SY2CLRID ; 
        20 XDMCD XDMCD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 XQACD XQACD ; 
      15 XWHCD XWHCD ; 
      15 XOWCD XOWCD ; 
    10 PT0CWSWP PT0CWSWP ; 
    10 PT3YYMM PT3YYMM ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 SY2CLRAB SY2CLRAB ; 
    10 XGAABRV XGAABRV ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 XXXLSTNM XXXLSTNM ; 
    10 XPCSDESC XPCSDESC ; 
    10 XWHABRV XWHABRV ; 
    10 XSUABRV XSUABRV ; 
    10 PT0CWMAX PT0CWMAX ; 
    10 SY5SZID SY5SZID [40] ; 
    10 SY4IDDSC SY4IDDSC [40] ; 
    10 SY3FRGUT SY3FRGUT [40] ; 
    10 PT0CTPMO PT0CTPMO ; 
    10 PT0CTPRM PT0CTPRM ; 
    10 PT3FUBK PT3FUBK [40] ; 
    10 PT3FUTOT PT3FUTOT ; 
    10 PT3PRBK PT3PRBK [40] ; 
    10 PT3PRTOT PT3PRTOT ; 
    10 PT3PDTN PT3PDTN [40] ; 
    10 PT3POTOT PT3POTOT ; 
    10 PT3AVQT PT3AVQT [40] ; 
    10 PT3AVTOT PT3AVTOT ; 
end // end PT0CW03

//*** RECORD=PT0CW04 ****
// ------------------------
// Map 004 display storage.
// ------------------------
// ***********************
Record PT0CW04 type basicRecord
  5 PT0CWTSL PT0CWTSL ; 
  5 * char(2348) ; 
    10 PT3KEY PT3KEY ; 
      15 PG2KEY PG2KEY ; 
        20 XGPCD XGPCD ; 
        20 SY1STNBR SY1STNBR ; 
        20 SY2CLRID SY2CLRID ; 
        20 XDMCD XDMCD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 XQACD XQACD ; 
      15 XWHCD XWHCD ; 
      15 XOWCD XOWCD ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 SY2CLRAB SY2CLRAB ; 
    10 XGAABRV XGAABRV ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 XXXLSTNM XXXLSTNM ; 
    10 XPCSDESC XPCSDESC ; 
    10 XWHABRV XWHABRV ; 
    10 XSUABRV XSUABRV ; 
    10 PT0CWMAX PT0CWMAX ; 
    10 SY4IDDSC SY4IDDSC [40] ; 
    10 PT0CTPMO PT0CTPMO [12] ; 
    10 PT0CTPRM PT0CTPRM [12] ; 
    10 PT0CWAVQ PT0CWAVQ [12] ; 
    10 PT3AVTOT PT3AVTOT [12] ; 
end // end PT0CW04

//*** RECORD=PT0CW05 ****
// ------------------------------------------------------------
// First parameter passed to the I/O module when selecting rows
// from the Base By Month table.
// ------------------------------------------------------------
// ***********************
Record PT0CW05 type basicRecord
  10 PT0CWFUN PT0CWFUN ; 
  10 XWHCD XWHCD [2] ; 
  10 XCTCD XCTCD [2] ; 
end // end PT0CW05

//*** RECORD=PT2REC ****
// *************** MODELING APPAREL BASE TABLE ****************
// 
// DB2 TABLE VIEW:      DMODEL.VABASE01
// 
// DCLGEN MEMBER:       DCL00537
// 
// I/O MODULE:          IO3080
// 
// KEY TO TABLE:        XGPCD
//                      SY1STNBR
//                      SY2CLRID
//                      XDMCD
//                      XSDCD
//                      XPGCD
//                      XUMCD
//                      XQACD
//                      XWHCD
//                      XOWCD
// 
// MAINTENANCE HISTORY:
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          01/20/89  SPOPA   New record.
//          02/09/91  RHETRI  Added PC2INSEG and XOWCD.
//                            Removed XSDCD.
// **********************
Record PT2REC type basicRecord
  5 PT2GROUP PT2GROUP ; 
    10 PT2KEY PT2KEY ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 XQACD XQACD ; 
      15 XWHCD XWHCD ; 
      15 XOWCD XOWCD ; 
    10 XCTCD XCTCD ; 
    10 PT2HDTR PT2HDTR ; 
    10 PT2RNUM PT2RNUM ; 
    10 SY5SZID SY5SZID [10] ; 
    10 PT2QTY1 PT2QTY1 [10] ; 
    10 PT2QTOT1 PT2QTOT1 ; 
    10 PT2QTY2 PT2QTY2 [10] ; 
    10 PT2QTOT2 PT2QTOT2 ; 
    10 PT2QTY3 PT2QTY3 [10] ; 
    10 PT2QTOT3 PT2QTOT3 ; 
    10 PT2PCT1 PT2PCT1 [10] ; 
    10 PT2PCT2 PT2PCT2 [10] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PT2REC

// Standard percent total (100%)
DataItem PT0CMPCT num(8,2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Period scroll amount
DataItem PT0CMPSA num(2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size scroll amount
DataItem PT0CMSSA num(2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map title
DataItem PT0CMTTE char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PT2QTY2 - PT2QTOT2 * PT2PCT1
DataItem PT0CMVAR num(6)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Variance total (SUM OF VARs)
DataItem PT0CMVAT num(8)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Color of a style
DataItem PT0CW-COLOR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// all COLORS OF A STYLE
DataItem PT0CW-COLOR-TABLE char(1200)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// Available quantity line
DataItem PT0CWAVQ char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Beginning column number
DataItem PT0CWBEG smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Disseminator argument of X(3)
DataItem PT0CWDA3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Disseminator argument of X(6)
DataItem PT0CWDA6 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Disseminator column number
DataItem PT0CWDCN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Disseminator delimiter
DataItem PT0CWDDL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Disseminator line number
DataItem PT0CWDLN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending column number
DataItem PT0CWEND smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Function for DB2 I/O module
DataItem PT0CWFUN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map columns
DataItem PT0CWIXC smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for color table
DataItem PT0CWIXD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for fringe/gut indicator
DataItem PT0CWIXF smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for line fields
DataItem PT0CWIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for record fields
DataItem PT0CWIXR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for selection fields
DataItem PT0CWIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for JCL table fields
DataItem PT0CWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Maximum beginning column
DataItem PT0CWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Period CCYYMM work area
DataItem PT0CWPER num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Season range search argument
DataItem PT0CWSNX char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season range year
DataItem PT0CWSNY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem PT0CWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Edit error switch
DataItem PT0CWSWE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem PT0CWSWM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First period of product switch
DataItem PT0CWSWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PT0CWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season/year match switch
DataItem PT0CWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage page length
DataItem PT0CWTSL num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = " ", inputRequired = no
}
end

// Current temporary storage page
DataItem PT0CWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage search page
DataItem PT0CWTSS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem PT2GROUP char(256)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem PT2KEY char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PT_PCT2_SZ
DataItem PT2PCT2 decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = " ", inputRequired = no
}
end

