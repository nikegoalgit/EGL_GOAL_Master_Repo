package pt09;
import ab.common.*;
import af.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import pg.common.*;
import pt.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PT09 ****
// This application is the add/delete/maintain application for
// delivery analysts in the production tracking system.
// 
// Upon initial entry, the table is read and columns from the
// selected rows are formatted and saved in temporary storage,
// one display page per queue record.
// 
// The records are retrieved from temporary storage one at a
// time, for display to the user.  The user may page forward
// and backward, to view the rows that were selected.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE     NAME       DESCRIPTION OF CHANGE
// --------   ---------  -------------------------------------
// 05/27/97   IDICKI     New application.
// CONTROL   DATE    NAME  DESCRIPTION OF CHANGE
// ------- -------- ------ -----------------------------------
// Y2KFIX  01/12/98 WSQUIR MODIFICATION MADE TO: XP1REC
// 01/03/01   VANNAM     Modified PT09163 process (delete) to
//                       include warehouse type. Also, modified
//                       PT09120, PT09150 & PT09153 procedures
// *********************
Program PT09 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PT00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PT09W01 PT09W01; // record
  PT09W02 PT09W02; // record
  PT09W03 PT09W03; // record
  PTWREC PTWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  VWHTYP01 VWHTYP01; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use PT09M.PT09M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPT001: XPPT001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Apparel Buy Prototype process.*/
     /* ------------------------------------------------------------*/

    set ERRSQLCA empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA5REC empty; /* Initialize working storage*/
    set PT09W01 empty; /* Initialize working storage*/
    set PT09W02 empty; /* Initialize working storage*/

    move "L" to PT09W02.XXXSTAT[1] for all; /* Initialize status codes to LAST*/

    set VWHTYP01 empty; /* Initialize working storage*/
    set PT09W03 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/

    set PT09M001 initial; /* Initialize map output area*/

    PT09W03.PTWAPPL = "PT09"; /* Initialize appl ID for this appl*/
    PT09W03.PTWPRCSN = " "; /* Initialize process number to blank*/

     /* ------------------------------------------------------------*/
     /* Initialize the literals used in the PT09W01 record*/
     /* these literals are used when a db2 error occurs and keys*/
     /* need to be moved to the error diag report.*/
     /* ------------------------------------------------------------*/
    PT09W01.PT09W1L1 = "D/A:"; /* Initialize GPC code literal*/
    PT09W01.PT09W1L2 = ", TYPE-CD :"; /* Initialize sched code literal*/
    PT09W01.PT09W1L3 = ", CAT-CD :"; /* Initialize fcst code literal*/
    PT09W01.PT09W1L4 = ", WHSE-TP:"; /* Initialize fcst code literal*/
     /* ------------------------------------------------------------*/

    PT09W03.PTWMAP = "1"; /* Indicate map to be displayed*/
    PT09W03.PTWSWR = "Y"; /* Indicate request for data*/
    PT09W03.PTWADDFL = "N"; /* Indicate not an ADD function*/

     /* *************************************************************/
     /* ***** this will assign PT09W03.PTWmpmax the value of the *****/
     /* ***** maximum number of rows on the screen.             *****/
     /* *************************************************************/
    move " " to PT09M001.XXXSTAT[1] for all; /* move blanks to array on map*/
    PT09W03.PTWMPMAX = sysVar.arrayIndex; /* EZETST has value of last occurs nbr*/


     /* *************************************************************/
     /* ***** this will assign PT09W03.PTWtsqsz the value of the *****/
     /* ***** length of the TSQ record to be writen. This value *****/
     /* ***** is calculated based on the physical size of each  *****/
     /* ***** row on the page times the number of rows on the   *****/
     /* ***** screen, as calculated above Plus 4(size of size   *****/
     /* ***** field).                                           *****/
     /* *************************************************************/
     /* temp storage length*/
    PT09W03.PTWTSQSZ = 0494;
    PT09W03.PTWSVWTP = PT09M001.PT09WTHD; /* save delivery analyst*/

    goto PT09001; /* Converse Apparel Buy Prototype*/

    PT09001: PT09001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    goto PT09001; /* loop thru processes until xsexit*/


  end // end main
end // end PT09

// Choose which map to display
Function PT09001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* GET SYSTEM DATE AND TIME*/

  if (PT09W03.PTWMAP == "1") /* Map 1 was requested*/

    PT09W03.PTWPRCSN = "M001"; /* Indicate map # 1*/
    PT09W03.XXXMAPNM = PT09W03.PTWERLOC; /* Move map name to PT09W03*/
    PT09W03.PTWPRCSN = " "; /* Re-Initialize process name*/

    PT09100(); /* Display map 1*/

  else

    if (PT09W03.PTWMAP == "2") /* Map 2 was requested*/

      PT09W03.PTWPRCSN = "M001"; /* Indicate map # 2*/
      PT09W03.XXXMAPNM = PT09W03.PTWERLOC; /* Move map name to W03*/
      PT09W03.PTWPRCSN = " "; /* Re-Initialize process name*/

      PT09200(); /* Display map 2*/

    else

      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      PT09W03.PTWPRCSN = "001 "; /* Process number*/
      TA1REC.TA1PGMNM = PT09W03.PTWERLOC; /* Error location*/
      TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
      TA1REC.TA1MAP = PT09W03.PTWMAP; /* Map name*/
      SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end
                                   /* Error diagnosis routine*/

      XSPF4(); /* Exit to Master Menu*/

    end

  end


end // end PT09001

// Driver process for 100 map
Function PT09100()
   /* *-----------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT09110(); /* Obtain the data to display*/

  PT09120(); /* Format and display the map*/

  PT09130(); /* Check attention identifier*/

  PT09140(); /* Reset fields to normal intensity*/

  PT09150(); /* Verify the entered data*/

  PT09160(); /* Process valid input request*/


end // end PT09100

// Obtain the data to display
Function PT09110()
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* Purge any existing queue in temporary storage.*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/


  if (PT09W03.PTWSWR != "Y") /* Data was not requested*/
    return; /* Return to previous process*/
  end

  PT09M001.PT09LITL = "WAREHOUSE TYPE:";
  PT09111(); /* Purge any temporary storage*/

  PT09112(); /* Select set and open the cursor*/

  if (converseVar.validationMsgNum == 0) /* No errors were found*/

    PT09W03.PTWSWC = "N"; /* Initialize end of file switch*/
    PT09W03.PTWIXM = 1; /* Initialize display line number*/

    while (PT09W03.PTWSWC == "N") /* Until cursor end of file*/

      PT09113(); /* Obtain data and format page*/

      if (PT09W03.PTWIXM > PT09W03.PTWMPMAX) /* Page is full*/
        PT09114(); /* Add page to temporary storage*/
      end

      if (converseVar.validationMsgNum != 0) /* Errors were found*/
        PT09W03.PTWSWC = "Y"; /* Force end of file*/
      end

    end

  end

  if (converseVar.validationMsgNum == 0 /* No errors were found*/
   && PT09W03.PTWIXM > 1)               /* and page was formatted*/
    if (PT09W03.PTWIXM <= PT09W03.PTWMPMAX) /* and page was formatted*/
      set VWHTYP01 empty; /* initialize VWHTYP01*/
      VWHTYP01.XXXSTAT = "L"; /* indicate end of data*/
      while (PT09W03.PTWIXM <= PT09W03.PTWMPMAX) /* empty rows with 'L'*/
        PT09W02.PT9GROUP[PTWIXM] = VWHTYP01.PT09GRUP;
        PT09W03.PTWIXM = PT09W03.PTWIXM + 1;
      end /* end of "WHILE" loop*/
    end /* end of "IF" statement*/
    PT09114(); /* Add page to temporary storage*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    PT09115(); /* Close the selected set cursor*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors were found*/

    PT09W03.PTWTSP = 1; /* Initialize page number*/
    PT09W03.PTWSWR = "N"; /* Request for data completed*/

  end


end // end PT09110

// Purge any temporary storage
Function PT09111()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = PT09W03.PTWAPPL; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PT09W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* temporaryary storage*/
                                  /* ; subroutine*/

  if (sysVar.errorCode != "00000000" /* Error was found*/
   || TA5REC.TA5RTNCD != 0)         

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PT09W03.PTWPRCSN = "111 "; /* Process number*/
    TA1REC.TA1PGMNM = PT09W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = PT09W03.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Error diagnosis routine*/

  end

  PT09W03.PTWTSP = 0; /* Reset current page number*/
  PT09W03.TA5TSQIX = 0; /* Reset highest page number*/
  TA5REC.TA5TSQIX = 0; /* Reset highest page number*/

  set PT09W02 empty; /* Initialize TSQ record*/
  move "L" to PT09W02.XXXSTAT[1] for all;
                                   /* Initialize Status to Last-Line*/

end // end PT09111

// Select set and open cursor
Function PT09112()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set VWHTYP01 empty; /* initialize*/

  VWHTYP01.PC_WHSE_TYP_CD = PT09W03.PTWSVWTP; /* indicate DA*/

  if (PT09W03.PTWSVWTP == "     ")
    try
      call "VWHTYP01" ("S1", SQLCA, VWHTYP01) {isNoRefresh = yes, isExternal = yes};
    end /* Select table*/
  else
    try
      call "VWHTYP01" ("S2", SQLCA, VWHTYP01) {isNoRefresh = yes, isExternal = yes};
    end /* Select table*/
  end

  if (sysVar.errorCode == "00000000") /* If call successful*/
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/

      else

        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/

        converseLib.clearScreen();
         /* Clear screen before redisplay*/

      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      PT09W03.PTWPRCSN = "112 "; /* Process number*/
      TA1REC.TA1PGMNM = PT09W03.PTWERLOC; /* Error location*/
      TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
      TA1REC.TA1MAP = PT09W03.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VWHTYP01"; /* Table view name*/
      TA1REC.TA1TBLKE = VWHTYP01.PT9KEY; /* Table key*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/

      return; /* Return to previous process*/

    end
  else /* call to VWHTYP01 unsuccessfull*/
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      PT09W03.PTWPRCSN = "112 "; /* Process number*/
      TA1REC.TA1PGMNM = PT09W03.PTWERLOC; /* Error location*/
      TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
      TA1REC.TA1MAP = PT09W03.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VWHTYP01"; /* Table view name*/
      TA1REC.TA1TBLKE = VWHTYP01.PT9KEY; /* Table key*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    end
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PT09W03.PTWPRCSN = "112 "; /* Process number*/
    TA1REC.TA1PGMNM = PT09W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "S1 CALL TO VWHTYP01";
    TA1REC.TA1MAP = PT09W03.XXXMAPNM; /* Map name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Error diagnosis routine*/

    PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    return; /* Return to previous process*/
  end


end // end PT09112

// Fetch next row and format
Function PT09113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  if (PT09W03.PTWSVWTP == "     ")
    try
      call "VWHTYP01" ("N1", SQLCA, VWHTYP01) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Fetch next row*/
  else
    try
      call "VWHTYP01" ("N2", SQLCA, VWHTYP01) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Fetch next row*/
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

    PT09W03.PTWSWC = "Y"; /* Indicate end of file*/

    return; /* Return to previous process*/

  end

  if (sysVar.errorCode == "00000000") /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/

      else

        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/

        converseLib.clearScreen();
         /* Clear screen before redisplay*/

      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      PT09W03.PTWPRCSN = "113 "; /* Process number*/
      TA1REC.TA1PGMNM = PT09W03.PTWERLOC; /* Error location*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = PT09W03.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VWHTYP01"; /* Table view name*/

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end /* Error diagnosis*/

      PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/

      return; /* Return to previous process*/

    end

  else /* call to VWHTYP01 no-good*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PT09W03.PTWPRCSN = "113 "; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* return function*/
    TA1REC.TA1PGMNM = PT09W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "N1 CALL TO VWHTYP01";
    TA1REC.TA1MAP = PT09W03.XXXMAPNM; /* Map name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* start over*/

  end

  if (PT09W03.PTWIXM == 1) /* IF this is 1st entry*/
    set PT09W02 empty; /* INITIALIZE TSQ record first*/
    move "L" to PT09W02.XXXSTAT[1] for all; /* Initialize status to 'last-line'*/
  end /* END of "IF" statement*/
  PT09W02.PT9GROUP[PTWIXM] = VWHTYP01.PT09GRUP;
  PT09W03.PTWIXM = PT09W03.PTWIXM + 1; /* Increment line index*/


end // end PT09113

// Add page to temporary storage
Function PT09114()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PT09W02.PT09LEN = PT09W03.PTWTSQSZ; /* Temporary storage length*/
  TA5REC.TA5APPID = PT09W03.PTWAPPL; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PT09W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                  /* ;subroutine*/

  if (sysVar.errorCode != "00000000"
   || TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PT09W03.PTWPRCSN = "114 "; /* Process number*/
    TA1REC.TA1PGMNM = PT09W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = PT09W03.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end

  PT09W03.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

  PT09W03.PTWIXM = 1; /* Reset display line number*/


end // end PT09114

// Close selected set cursor
Function PT09115()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  if (PT09W03.PTWSVWTP == "     ")
    try
      call "VWHTYP01" ("C1", SQLCA, VWHTYP01) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Close table set*/
  else
    try
      call "VWHTYP01" ("C2", SQLCA, VWHTYP01) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Close table set*/
  end

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   || sysVar.errorCode != "00000000")

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PT09W03.PTWPRCSN = "115 "; /* Process number*/
    TA1REC.TA1PGMNM = PT09W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = PT09W03.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VWHTYP01"; /* Table view name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Error diagnosis routine*/

    PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end


end // end PT09115

// Format and display the map
Function PT09120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set PT09M001 alarm; /* Indicate sound alarm*/
  end

  if (converseVar.validationMsgNum == 0 /* No error message to display*/
   || PT09W03.PTWFIRST == " ")          /* or first time through*/
    if (PT09W03.PTWFIRST == " ") /* First time through*/

      if (COMMAREA.CAITEM > " ") /* Application data exists*/

        PT09M001.CAITEM = COMMAREA.CAITEM; /* Application data*/
        set PT09M001.CAITEM modified; /* Set MDT on*/
        COMMAREA.CAITEM = " "; /* Clear application data*/

      end

    else

      set PT09M001 initial; /* Clear map output area*/
      PT09M001.PT09LITL = "WAREHOUSE TYPE:";

    end

    PT09W03.PTWFIRST = "N"; /* turn 'first time through' OFF*/

    PT09M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      PT09121(); /* Format the data on the page*/
    end

    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (PT09W03.PTWNMO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PT09W03.PTWNMO);
      end /* Information message number*/
    end

  end


  PT09W03.PTWNMO = 0; /* Reset information message number*/

  PT09M001.PT09MPFC = "13:ADD";
                                   /* set pfkey literal field to add*/
  PT09M001.PT09MPF7 = "7:FRWD"; /* set pfkey literal field PF7*/
  PT09M001.PT09MPF8 = "8:BACK"; /* set pfkey literal field PF8*/
  PT09M001.XXXMAPNM = PT09W03.XXXMAPNM; /* Move map name to Map*/
  PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Move Process name to map*/
  if (converseVar.validationMsgNum == 0 || converseVar.validationMsgNum == 21)
    set PT09M001.PT09WTHD cursor;
  end

  converse PT09M001 ;

  PT09W03.PTWPRCSN = " "; /* Clear out Error Process nbr*/

end // end PT09120

// Format the selected data
Function PT09121()
   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the plan sequence data in the map.*/
   /* ------------------------------------------------------------*/

  if (PT09W03.TA5TSQIX == 0) /* No data to display*/

    PT09W03.PTWPRCSN = "121 "; /* Process number*/
    PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/
    converseLib.validationFailed(148); /* Indicate no data to display*/

    PT09W03.PTWIXM = 1; /* Initialize Index*/
    while (PT09W03.PTWIXM <= PT09W03.PTWMPMAX)
      set PT09M001.XXXSTAT[PTWIXM] skip, invisible; /* protect unused fields*/
      set PT09M001.PC_WHSE_TYP_CD[PTWIXM] skip, invisible;
      set PT09M001.XWH_WHSE_CD[PTWIXM] skip, invisible;
      set PT09M001.PC_WHSE_TYP_DESC[PTWIXM] skip, invisible;
      PT09W03.PTWIXM = PT09W03.PTWIXM + 1;
    end

    PT09M001.PC_WHSE_TYP_CD = PT09W03.PTWSVWTP; /**/

    PT09M001.PT09MPGN = 1; /* Current page number*/
    PT09M001.PT09MOFP = 1; /* Highest page nbr*/

    return; /* Return to previous process*/

  end

  if (PT09W03.PTWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/
    PT09122(); /* Obtain temporary storage page*/
  end

  PT09M001.PT09MPGN = PT09W03.PTWTSP; /* Current page number*/
  PT09M001.PT09MOFP = PT09W03.TA5TSQIX; /* Highest page nbr*/

  PT09M001.PC_WHSE_TYP_CD = PT09W03.PTWSVWTP; /* and region to*/

  PT09W03.PTWIXM = 1; /* Initialize line index*/

  while (PT09W03.PTWIXM <= PT09W03.PTWMPMAX) /* Until end of lines*/
    VWHTYP01.PT09GRUP = PT09W02.PT9GROUP[PTWIXM];
    if (VWHTYP01.XXXSTAT != "L") /* end of data marker*/
      PT09M001.PT09WTHD = PT09W03.PTWSVWTP; /**/
      PT09M001.XXXSTAT[PTWIXM] = VWHTYP01.XXXSTAT; /* move status*/
      PT09M001.PC_WHSE_TYP_CD[PTWIXM] = VWHTYP01.PC_WHSE_TYP_CD; /**/
      PT09M001.XWH_WHSE_CD[PTWIXM] = VWHTYP01.XWHCD; /**/
      set PT09M001.XWH_WHSE_CD[PTWIXM] skip; /* SEt field autoskip*/
      PT09M001.PC_WHSE_TYP_DESC[PTWIXM] = VWHTYP01.PC_WHSE_TYP_DESC; /**/
    else
      set PT09M001.XXXSTAT[PTWIXM] skip, invisible; /* protect unused fields*/
      set PT09M001.PC_WHSE_TYP_CD[PTWIXM] skip, invisible;
      set PT09M001.XWH_WHSE_CD[PTWIXM] skip, invisible;
      set PT09M001.PC_WHSE_TYP_DESC[PTWIXM] skip, invisible;
    end
    PT09W03.PTWIXM = PT09W03.PTWIXM + 1; /* incriment line number*/
  end


end // end PT09121

// Read temporary storage page
Function PT09122()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PT09W02.PT09LEN = PT09W03.PTWTSQSZ; /* Temporary storage length*/
  TA5REC.TA5APPID = PT09W03.PTWAPPL; /* Application identification*/
  TA5REC.TA5TSQIX = PT09W03.PTWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PT09W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                  /* ;subroutine*/

  if (sysVar.errorCode != "00000000" /* call not-Okay*/
   || TA5REC.TA5RTNCD != 0)          /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PT09W03.PTWPRCSN = "122 "; /* Process number*/
    TA1REC.TA1PGMNM = PT09W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = PT09W03.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Error diagnosis routine*/

    PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PT09122

// Check attention identifier
Function PT09130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PT09M001 initial; /* Clear the map fields*/
    PT09M001.PT09LITL = "WAREHOUSE TYPE:";

    exit stack; /* Exit to redisplay map*/

  end

  if (PT09M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PT09111(); /* Purge any temporary storage*/

      COMMAREA.CATOAP = PT09M001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PT09M001.CAITEM; /* Application data*/

      XSPT001(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    set PT09M001.PT09WTHD cursor, modified, bold; /* Highlight*/

    PT09W03.PTWPRCSN = "130 "; /* Process number*/
    PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    PT09111(); /* Purge any temporary storage*/

    if (converseVar.eventKey is pf3)
      COMMAREA.CATOAP = "PT0M";
    end
    XSPT001(); /* Exit to another application*/

    PT09W03.PTWPRCSN = "130 "; /* Process number*/
    PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf13) /* If 'ADD' mode requested*/
    PT09W03.PTWMAP = "2"; /* Indicate switch to 'ADD' mode*/
    set PT09M001 initial; /* clear screen*/
    PT09M001.PT09LITL = "WAREHOUSE TYPE:";
    exit stack; /* GOTO flow section*/
  end /* END of "IF" statement*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf13) /* and PF13 was not pressed*/

    PT09W03.PTWPRCSN = "130 "; /* Process number*/
    PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end PT09130

// Reset highlighted fields
Function PT09140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to defined intensity.*/
   /* ------------------------------------------------------------*/

  PT09W03.PTWIXM = 1; /* Initialize line index*/

  while (PT09W03.PTWIXM <= PT09W03.PTWMPMAX) /* Until end of lines*/

    if (PT09W02.XXXSTAT[PTWIXM] != "L") /* if line has data*/
      set PT09M001.XXXSTAT[PTWIXM] initialAttributes; /* Reset field*/
      set PT09M001.PC_WHSE_TYP_CD[PTWIXM] skip; /* Reset field*/
      set PT09M001.XWH_WHSE_CD[PTWIXM] initialAttributes; /* Reset field*/
      set PT09M001.PC_WHSE_TYP_DESC[PTWIXM] initialAttributes; /* Reset field*/
    else
      set PT09M001.XXXSTAT[PTWIXM] skip, invisible;
      set PT09M001.PC_WHSE_TYP_CD[PTWIXM] skip, invisible;
      set PT09M001.XWH_WHSE_CD[PTWIXM] skip, invisible;
      set PT09M001.PC_WHSE_TYP_DESC[PTWIXM] skip, invisible;
    end

    PT09W03.PTWIXM = PT09W03.PTWIXM + 1; /* Increment line index*/

  end
   /* *************************************************************/
   /* SET AB0DM001.SY1SSTNM DEFINED;*/
   /* *************************************************************/

  set PT09M001.CATOAP initialAttributes; /* Commarea TO application*/
  set PT09M001.CAITEM initialAttributes; /* Commarea application data*/


end // end PT09140

// Verify the entered data
Function PT09150()
   /* *-----------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (PT09M001.CAITEM > " ") /* Application data was entered*/

    set PT09M001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PT09W03.PTWPRCSN = "150 "; /* Process number*/
    PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/

  end

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    PT09151(); /* Verify scroll request*/
  else
    PT09152(); /* Verify selection criteria*/
    if (PT09W03.PTWSWR == "Y") /* If new selection criteria entered*/
      exit stack; /* Go back to start of appl*/
    else /* Else(selection criteria not changed)*/
      PT09W03.PTWIXM = PT09W03.PTWMPMAX; /* Initialize line index*/
      while ((PT09W03.PTWIXM > 0 && 
      converseVar.validationMsgNum == 0)) /* Until end of lines*/
        if (PT09W02.XXXSTAT[PTWIXM] != "L")
          PT09153(); /* Verify any changed data*/
        end
        PT09W03.PTWIXM = PT09W03.PTWIXM - 1; /* Decrement line number*/
      end
    end
  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end

  PT09W03.PTWIXM = 1; /* Initialize*/
  while (PT09W03.PTWIXM <= 14)
    if (PT09M001.XXXSTAT[PTWIXM] == "  " && 
    PT09M001.PC_WHSE_TYP_CD[PTWIXM] == " " && 
    PT09M001.XWH_WHSE_CD[PTWIXM] == "  ")
      PT09W03.PTWIXM = 14;
    else
      if (PT09M001.XWH_WHSE_CD[PTWIXM] == "51" && 
      PT09M001.PC_WHSE_TYP_CD[PTWIXM] == "DOM  ")
        converseLib.validationFailed(36);
        set PT09M001.XWH_WHSE_CD[PTWIXM] cursor, bold;
        PT09W03.PTWIXM = 14;
      end
    end
    PT09W03.PTWIXM = PT09W03.PTWIXM + 1;
  end
  PT09W03.PTWIXM = 1; /* Initialize*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end PT09150

// Verify scroll request
Function PT09151()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PT09W03.PTWTSP < 2)         /* and no previous pages*/

    PT09W03.PTWPRCSN = "151 "; /* Process number*/
    PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PT09W03.PTWTSP >= PT09W03.TA5TSQIX) /* and no more pages*/

    PT09W03.PTWPRCSN = "151 "; /* Process number*/
    PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end



end // end PT09151
// Edit selection criteria
Function PT09152()
   /* ============================================================*/
   /* ===== E D I T    S E L E C T I O N    C R I T E R I A  =====*/
   /* =====                                                  =====*/
   /* ===== Compare selection criteria on screen to data on  =====*/
   /* ===== working storatge record, if any has changed,     =====*/
   /* ===== validate all selection criteria fields and turn  =====*/
   /* ===== on switch which allows later processing to purge =====*/
   /* ===== temporary storage and re-load it with newly      =====*/
   /* ===== selected data.                                   =====*/
   /* ============================================================*/

  PT09W03.PTWSWR = "N"; /* initialize switch to 'OFF'*/
  XP1REC.XP1MNO = 0;

  if (PT09M001.PT09WTHD != PT09W03.PTWSVWTP)
    PT09W03.PTWSVWTP = PT09M001.PT09WTHD;
    PT09W03.PTWSWR = "Y"; /* Turn 'ON' switch to re-select*/
    if (XP1REC.XXXSTAT == "I")
      PT09W03.PTWSVWTP = " ";
      set PT09M001.PT09WTHD cursor, bold;
      XP1REC.XP1MNO = 8;
    else
      PT09M001.PT09WTHD = PT09W03.PTWSVWTP;
    end
  end

  converseLib.clearScreen();



   /* ====================== END OF PROCESS ======================*/



end // end PT09152

// Verify any changed data
Function PT09153()
   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/

   /* *************************************************************/
   /* *****              edit delivery code here            ******/
   /* *************************************************************/

  if (PT09M001.XWH_WHSE_CD[PTWIXM] == " " /**/
   && PT09M001.XXXSTAT[PTWIXM] != "D")    /* delete row*/
    set PT09M001.XWH_WHSE_CD[PTWIXM] cursor, bold;
    converseLib.validationFailed(116); /* required field*/
    return;
  end

  if (PT09M001.XXXSTAT[PTWIXM] == "C"
   || PT09M001.XXXSTAT[PTWIXM] == "D"
   || PT09M001.XXXSTAT[PTWIXM] == "A")
   /* next sentence*/
  else
    converseLib.validationFailed(149);
    set PT09M001.XXXSTAT[PTWIXM] cursor, bold;
    return;
  end


end // end PT09153

// Process valid input request
Function PT09160()
   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    PT09W03.PTWTSP = PT09W03.PTWTSP - 1; /* Decrement page number*/
    return; /* Return to previous process*/
  end

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    PT09W03.PTWTSP = PT09W03.PTWTSP + 1; /* Increment page number*/
    return; /* Return to previous process*/
  end

  if (converseVar.validationMsgNum == 0) /* IF no ERRORS found*/
                                 /* ;*/
    PT09W03.PTWIXM = 1; /* Initialize index to 1*/
    PT09W03.PTWUFL = "N"; /* Initialize Update Flag to "NO"*/

    while (PT09W03.PTWIXM <= PT09W03.PTWMPMAX)
            /* LOOP thru entire screen*/
      if (PT09W02.XXXSTAT[PTWIXM] != "L") /* IF line has valid data*/
        /* ***** IF delete asked for ******/
        if (PT09M001.XXXSTAT[PTWIXM] == "D") /* If DELETE asked for*/
          if (COMMAREA.CADELFL == "Y") /* if authorized to delete*/
            PT09163();
          else
            converseLib.validationFailed(102);
            exit stack;
          end
        else
          /* ***** if any fields were changed *************************/
          if (PT09M001.XXXSTAT[PTWIXM] != PT09W02.XXXSTAT[PTWIXM]
           || PT09M001.PC_WHSE_TYP_CD[PTWIXM] != 
          PT09W02.PC_WHSE_TYP_CD[PTWIXM]
           || PT09M001.PC_WHSE_TYP_DESC[PTWIXM] != 
          PT09W02.PC_WHSE_TYP_DESC[PTWIXM]
           || PT09M001.XWH_WHSE_CD[PTWIXM] != 
          PT09W02.XWHCD[PTWIXM])
            if (PT09M001.PC_WHSE_TYP_CD[PTWIXM] != 
            PT09W02.PC_WHSE_TYP_CD[PTWIXM]
             || PT09M001.XWH_WHSE_CD[PTWIXM] != 
            PT09W02.XWHCD[PTWIXM])
              converseLib.validationFailed(160); /* can't update key - must del/add*/
              exit stack;
            else
              PT09W03.PTWUFL = "Y"; /* Indicate TSQ update needed*/
              if (COMMAREA.CACHGFL == "Y") /* if authorized to change*/
                PT09161(); /* update DB2 table*/

                PT09W02.PT9GROUP[PTWIXM] = VWHTYP01.PT09GRUP;
                                  /* ;        Move data to temp storage*/
                                  /* ;        page*/

              else
                converseLib.validationFailed(102);
                exit stack;
              end
            end /* End of "IF" statement*/
          end /* End of "IF" statement*/

        end /* End of "IF" statement*/

      end /* End of "IF" statement*/

      PT09W03.PTWIXM = PT09W03.PTWIXM + 1; /* Incriment index up by 1*/

    end /* End of "WHILE" loop*/

    if (PT09W03.PTWUFL != "N") /* if TSQ page needs updating*/
      PT09162(); /* update TSQ page*/
    end /* End of "IF" statement*/

  end /* End of "IF" statement*/

end // end PT09160

// Update DPRODC.VWHTYP01 tbl
Function PT09161()
   /* ------------------------------------------------------------*/
   /* Update a single row in DB2*/
   /* ------------------------------------------------------------*/

  set VWHTYP01 empty; /* Initialize record*/
  set SQLCA empty; /* Initialize record*/

   /* ***** move key data from TSQ record ******/
  VWHTYP01.PT9KEY = PT09W02.PT9KEY[PTWIXM]; /* Move key to rec*/
  VWHTYP01.ZZZCHGCT = PT09W02.ZZZCHGCT[PTWIXM];

   /* ***** get system date and time & move to VWHTYP01 ***********/
  XX0XS01(); /* get system date and time*/
  VWHTYP01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Move data*/
  VWHTYP01.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* ***** move data from map ******/
  VWHTYP01.PC_WHSE_TYP_DESC = PT09M001.PC_WHSE_TYP_DESC[PTWIXM];
  VWHTYP01.PC_WHSE_TYP_CD = PT09M001.PC_WHSE_TYP_CD[PTWIXM];
  VWHTYP01.XWHCD = PT09M001.XWH_WHSE_CD[PTWIXM];
  VWHTYP01.XXXSTAT = PT09M001.XXXSTAT[PTWIXM];

  try
    call "VWHTYP01" ("U ", SQLCA, VWHTYP01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  if (sysVar.errorCode == "00000000") /* If call to VWHTYP01 okay*/
    if (SQLCA.VAGen_SQLCODE != 0) /* DB2 error ( any error )*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      PT09W03.PTWPRCSN = "161 "; /* Process number*/
      TA1REC.TA1FUNC = "RETN"; /* set function to 'RETURN'*/
      TA1REC.TA1PGMNM = PT09W03.PTWERLOC; /* Error location*/
      TA1REC.TA1LOC = "UPDATE A SELECTED TABLE ROW";
      TA1REC.TA1MAP = PT09W03.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VWHTYP01"; /* Table view name*/
      TA1REC.TA1TBLKE = VWHTYP01.PT9KEY; /* move tbl key to errdiag*/

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end /* Error diagnosis*/

      converseLib.validationFailed(10); /* Indicate error occured*/
      PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/

      return; /* Return to previous process*/

    end
  else
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PT09W03.PTWPRCSN = "161 "; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* set function to 'RETURN'*/
    TA1REC.TA1PGMNM = PT09W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "UPDATE CALL TO VWHTYP01";
    TA1REC.TA1MAP = PT09W03.XXXMAPNM; /* Map name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diagnosis*/

    converseLib.validationFailed(10); /* Indicate error occured*/
    PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/

    return; /* Return to previous process*/
  end



end // end PT09161

// Update TSQ page in place
Function PT09162()
   /* ------------------------------------------------------------*/
   /* replace the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  PT09W02.PT09LEN = PT09W03.PTWTSQSZ; /* Temporary storage length*/
  TA5REC.TA5APPID = PT09W03.PTWAPPL; /* Application identification*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  TA5REC.TA5TSQIX = PT09W03.PTWTSP; /* TSQ page number to replace*/

  try
    call "TA0050" (PT09W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                  /* ;            subroutine*/

  if (sysVar.errorCode != "00000000"
   || TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PT09W03.PTWPRCSN = "162 "; /* Process number*/
    TA1REC.TA1PGMNM = PT09W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "REPLACE PAGE TO TEMP STORAGE";
    TA1REC.TA1MAP = PT09W03.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Error diagnosis routine*/

    PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end



end // end PT09162

// DELETE a row from VWHTYP01
Function PT09163()
   /* ------------------------------------------------------------*/
   /* DELETE a single row in DB2*/
   /* ------------------------------------------------------------*/

  set VWHTYP01 empty; /* Initialize record*/
  set SQLCA empty; /* Initialize record*/

   /* ***** move key data from TSQ record ******/
  VWHTYP01.PT9KEY = PT09W02.PT9KEY[PTWIXM]; /* Move key to rec*/
  VWHTYP01.ZZZCHGCT = PT09W02.ZZZCHGCT[PTWIXM];
  VWHTYP01.PC_WHSE_TYP_CD = PT09W02.PC_WHSE_TYP_CD[PTWIXM];


  try
    call "VWHTYP01" ("D ", SQLCA, VWHTYP01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  if (sysVar.errorCode == "00000000") /* If call to VWHTYP01 okay*/
    if (SQLCA.VAGen_SQLCODE != 0) /* DB2 error ( any error )*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      PT09W03.PTWPRCSN = "163 "; /* Process number*/
      TA1REC.TA1FUNC = "RETN"; /* set function to 'RETURN'*/
      TA1REC.TA1PGMNM = PT09W03.PTWERLOC; /* Error location*/
      TA1REC.TA1LOC = "DELETE A SELECTED TABLE ROW";
      TA1REC.TA1MAP = PT09W03.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VWHTYP01"; /* Table view name*/
      TA1REC.TA1TBLKE = VWHTYP01.PT9KEY; /* move tbl key to errdiag*/

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end /* Error diagnosis*/

      converseLib.validationFailed(10); /* Indicate error occured*/
      PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/

      return; /* Return to previous process*/

    else /* Return code OKAY, Row deleted*/
      PT09W03.PTWSWR = "Y"; /* RE-SELECT rows on DB*/
    end
  else
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PT09W03.PTWPRCSN = "163 "; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* set function to 'RETURN'*/
    TA1REC.TA1PGMNM = PT09W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "UPDATE CALL TO VWHTYP01";
    TA1REC.TA1MAP = PT09W03.XXXMAPNM; /* Map name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diagnosis*/

    converseLib.validationFailed(10); /* Indicate error occured*/
    PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/

    return; /* Return to previous process*/
  end



end // end PT09163

// Add Entries Function
Function PT09200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT09220(); /* Format and display the map*/

  PT09230(); /* Check attention identifier*/

  PT09240(); /* Reset fields to normal intensity*/

  PT09250(); /* Verify the entered data*/

  PT09260(); /* Process valid input request*/


end // end PT09200

// Format and display the map
Function PT09220()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set PT09M001 alarm; /* Indicate sound alarm*/
  end

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    PT09M001.PT09WTHD = "  "; /* move selection criteria*/

    PT09M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (PT09W03.PTWNMO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PT09W03.PTWNMO);
      end /* Information message number*/
    end

    PT09W03.PTWIXM = 1; /* Initialize index to 1*/
    PT09W03.PTWIDX5 = 0; /* Initialize index to 0*/

    while (PT09W03.PTWIXM <= PT09W03.PTWMPMAX) /* LOOP thru entire map*/

      if (PT09M001.XXXSTAT[PTWIXM] != " ") /* Is status not blank line used*/
        set PT09M001.XXXSTAT[PTWIXM] skip; /* protect field*/
        set PT09M001.PC_WHSE_TYP_CD[PTWIXM] skip; /* protect field*/
        set PT09M001.XWH_WHSE_CD[PTWIXM] skip; /* protect field*/
        set PT09M001.PC_WHSE_TYP_DESC[PTWIXM] skip; /* protect field*/

        PT09W03.PTWIDX5 = PT09W03.PTWIXM; /* Set last line used*/

      end

      PT09W03.PTWIXM = PT09W03.PTWIXM + 1; /* Incriment index*/

    end

    PT09W03.PTWIDX5 = PT09W03.PTWIDX5 + 1;

  end

  PT09W03.PTWNMO = 0; /* Reset information message number*/

  set PT09M001.PT09LITL skip, invisible;
  set PT09M001.PT09WTHD skip, invisible;
  PT09M001.PT09MPFC = "14:MAINTAIN";
                                   /* set pfkey literal field to add*/
  PT09M001.PT09MPF7 = " "; /* No scrolling on add screen*/
  PT09M001.PT09MPF8 = " "; /* No Scrolling on Add Screen*/

  if (converseVar.validationMsgNum == 0) /* IF no ERRORS*/
    set PT09M001.XXXSTAT[PTWIDX5] cursor;
                                   /* put cursor in correct place*/
  end /* END of "IF" statement*/

  PT09M001.XXXMAPNM = PT09W03.XXXMAPNM; /* Move map name to Map*/
  PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Move Process name to map*/
  converse PT09M001 ;

  PT09W03.PTWPRCSN = " "; /* Clear out Error Process nbr*/

end // end PT09220

// Check attention identifier
Function PT09230()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PT09M001 initial; /* Clear the map fields*/

    exit stack; /* Exit to redisplay map*/

  end

  if (PT09M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PT09111(); /* Purge any temporary storage*/

      COMMAREA.CATOAP = PT09M001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PT09M001.CAITEM; /* Application data*/

      XSPT001(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    set PT09M001.PT09WTHD cursor, modified, bold; /* Highlight*/

    PT09W03.PTWPRCSN = "230 "; /* Process number*/
    PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    PT09111(); /* Purge any temporary storage*/

    if (converseVar.eventKey is pf3)
      COMMAREA.CATOAP = "PT0M";
    end
    XSPT001(); /* Exit to another application*/

    PT09W03.PTWPRCSN = "230 "; /* Process number*/
    PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf14) /* If 'maintain' mode requested*/
    PT09W03.PTWMAP = "1"; /* Indicate switch to 'maintain' mode*/
    PT09W03.PTWSWR = "Y"; /* Turn on re-select switch*/
    set PT09M001 initial; /* CLEAR Map*/
    exit stack; /* GOTO flow section*/
  end /* END of "IF" statement*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf14) /* and PF13 was not pressed*/

    PT09W03.PTWPRCSN = "230 "; /* Process number*/
    PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end PT09230

// Reset highlighted fields
Function PT09240()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to defined intensity.*/
   /* ------------------------------------------------------------*/

  PT09W03.PTWIXM = PT09W03.PTWIDX5; /* Initialize line index*/

  while (PT09W03.PTWIXM <= PT09W03.PTWMPMAX) /* Until end of lines*/

    set PT09M001.XXXSTAT[PTWIXM] initialAttributes; /* Reset field*/
    set PT09M001.PC_WHSE_TYP_CD[PTWIXM] initialAttributes; /* reset field*/
    set PT09M001.XWH_WHSE_CD[PTWIXM] initialAttributes; /* Reset field*/
    set PT09M001.PC_WHSE_TYP_DESC[PTWIXM] initialAttributes; /* Reset field*/

    PT09W03.PTWIXM = PT09W03.PTWIXM + 1; /* Increment line index*/

  end
   /* *************************************************************/
   /* SET AB0DM001.SY1SSTNM DEFINED;*/
   /* *************************************************************/

  set PT09M001.CATOAP initialAttributes; /* Commarea TO application*/
  set PT09M001.CAITEM initialAttributes; /* Commarea application data*/


end // end PT09240

// Verify the entered data
Function PT09250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (PT09M001.CAITEM > " ") /* Application data was entered*/

    set PT09M001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PT09W03.PTWPRCSN = "250 "; /* Process number*/
    PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/

  end

  PT09251(); /* remove any blank lines*/

  PT09252(); /* Verify selection criteria*/

  PT09W03.PTWIXM = PT09W03.PTWMPMAX; /* Initialize line index*/
  while (PT09W03.PTWIXM >= PT09W03.PTWIDX5) /* Until end of lines*/
    PT09253(); /* Verify any changed data*/
    PT09W03.PTWIXM = PT09W03.PTWIXM - 1; /* Decrement line number*/
  end /* END of "WHILE" statement*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end

  PT09W03.PTWIXM = 1; /* Initialize*/
  while (PT09W03.PTWIXM <= 14)
    if (PT09M001.XXXSTAT[PTWIXM] == "  " && 
    PT09M001.PC_WHSE_TYP_CD[PTWIXM] == " " && 
    PT09M001.XWH_WHSE_CD[PTWIXM] == "  ")
      PT09W03.PTWIXM = 15;
    else
      if (PT09M001.XWH_WHSE_CD[PTWIXM] == "51" && 
      PT09M001.PC_WHSE_TYP_CD[PTWIXM] == "DOM  ")
        converseLib.validationFailed(36);
        set PT09M001.XWH_WHSE_CD[PTWIXM] cursor, bold;
        PT09W03.PTWIXM = 15;
      end
    end
    PT09W03.PTWIXM = PT09W03.PTWIXM + 1;
  end
  PT09W03.PTWIXM = 1; /* Initialize*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end PT09250

// Remove any Blank Lines From Mp
Function PT09251()
   /* *************************************************************/
   /* ***** R E M O V E    A N Y    B L A N K    L I N E S   ******/
   /* *****                 F R O M    M A P                 ******/
   /* *****                                                  ******/
   /* ***** This process will work its way thru the map and  ******/
   /* ***** Remove any embedded blank input lines.           ******/
   /* *************************************************************/

  PT09W03.PTWIDX2 = PT09W03.PTWMPMAX; /* Set First blank line*/
                                 /* ;        Pointer to max value*/
                                 /* ;*/
  PT09W03.PTWIDX3 = PT09W03.PTWIDX5; /* Set Current line pointer*/
                                 /* ;        to first line*/
                                 /* ;*/
  while (PT09W03.PTWIDX3 < PT09W03.PTWMPMAX) /* Loop Thru Entire Map*/
                                 /* ;*/
    if (PT09M001.XXXSTAT[PTWIDX3] == " "          /* IF Current Line Blank*/
     && PT09M001.PC_WHSE_TYP_CD[PTWIDX3] == " "   /* |*/
     && PT09M001.PC_WHSE_TYP_DESC[PTWIDX3] == " " /* |*/
     && PT09M001.XWH_WHSE_CD[PTWIDX3] == " "      /* |*/
    )                                             /* ;*/
      PT09W03.PTWIDX2 = PT09W03.PTWIDX3 + 1; /* Start looking For Non-Blanks*/
                                 /* ;            After blank line.*/
      while (PT09W03.PTWIDX2 <= PTWMPMAX) /* Loop Thru Rest Of MAP*/
                                 /* ;*/
        if (PT09M001.XXXSTAT[PTWIDX2] != " "          /* IF New Line Not Blank*/
         || PT09M001.PC_WHSE_TYP_CD[PTWIDX2] != " "   /* |*/
         || PT09M001.PC_WHSE_TYP_DESC[PTWIDX2] != " " /* |*/
         || PT09M001.XWH_WHSE_CD[PTWIDX2] != " "      /* |*/
        )                                             /* ;*/
          /* ***** move values from New Line to Current Line ******/
          PT09M001.XXXSTAT[PTWIDX3] = PT09M001.XXXSTAT[PTWIDX2];
          PT09M001.PC_WHSE_TYP_CD[PTWIDX3] = PT09M001.PC_WHSE_TYP_CD[PTWIDX2];
          PT09M001.XWH_WHSE_CD[PTWIDX3] = PT09M001.XWH_WHSE_CD[PTWIDX2];
          PT09M001.PC_WHSE_TYP_DESC[PTWIDX3] = PT09M001.PC_WHSE_TYP_DESC[PTWIDX2];
                                 /* ;*/
          /* ***** Now Move Spaces To New Line Fields ******/
          PT09M001.XXXSTAT[PTWIDX2] = " ";
          PT09M001.PC_WHSE_TYP_CD[PTWIDX2] = " ";
          PT09M001.XWH_WHSE_CD[PTWIDX2] = " ";
          PT09M001.PC_WHSE_TYP_DESC[PTWIDX2] = " ";
                                 /* ;*/
          PT09W03.PTWIDX2 = 99; /* Force End To Loop*/
                                 /* ;*/
        else /* Else (Line Is Not Blank)*/
                                 /* ;*/
          PT09W03.PTWIDX2 = PT09W03.PTWIDX2 + 1; /* Incriment Line Index*/
                                 /* ;*/
          if (PT09W03.PTWIDX2 > PT09W03.PTWMPMAX) /* IF NO DATA LINE FOUN*/
            return; /* Force END to LOOP*/
          end /* END Of "IF" Statement*/
                                 /* ;*/
        end /* END of "IF" Statement*/
                                 /* ;*/
      end /* END of "WHILE" Loop*/
                                 /* ;*/
    end /* END of "IF" Statement*/
                                 /* ;*/
    PT09W03.PTWIDX3 = PT09W03.PTWIDX3 + 1; /* Incriment Index By 1*/
                                 /* ;*/
  end /* END of "WHILE" Loop*/
end // end PT09251

// Edit selection criteria
Function PT09252()
   /* ============================================================*/
   /* ===== E D I T    S E L E C T I O N    C R I T E R I A  =====*/
   /* =====                                                  =====*/
   /* ===== Compare selection criteria on screen to data on  =====*/
   /* ===== working storatge record, if any has changed,     =====*/
   /* ===== validate all selection criteria fields and turn  =====*/
   /* ===== on switch which allows later processing to purge =====*/
   /* ===== temporary storage and re-load it with newly      =====*/
   /* ===== selected data.                                   =====*/
   /* ============================================================*/

  PT09W03.PTWSWR = "N"; /* initialize switch to 'OFF'*/
  XP1REC.XP1MNO = 0;

  if (PT09M001.PT09WTHD != PT09W03.PTWSVWTP)
    PT09W03.PTWSVWTP = PT09M001.PT09WTHD;
    if (XP1REC.XXXSTAT == "I")
      PT09W03.PTWSVWTP = " ";
      set PT09M001.PT09WTHD cursor, bold;
      XP1REC.XP1MNO = 8;
    else
      PT09M001.PT09WTHD = PT09W03.PTWSVWTP;
    end
  end
    /* END;*/
  converseLib.clearScreen();


   /* ====================== END OF PROCESS ======================*/



end // end PT09252

// Verify All Entered Data
Function PT09253()
   /* ------------------------------------------------------------*/
   /* Edit the entry if any of the fields on a line has data in*/
   /* it.*/
   /* ------------------------------------------------------------*/

  if (PT09M001.XXXSTAT[PTWIXM] != " "
   || PT09M001.PC_WHSE_TYP_CD[PTWIXM] != " "
   || PT09M001.PC_WHSE_TYP_DESC[PTWIXM] != " "
   || PT09M001.XWH_WHSE_CD[PTWIXM] != " "
  )
    /* *************************************************************/
    /* *****              edit warehouse here                 ******/
    /* *************************************************************/

    if (PT09M001.XWH_WHSE_CD[PTWIXM] in XWHTBL.XWHCD)
    else
      converseLib.validationFailed(36); /* bad warehouse*/
    end

    /* *************************************************************/
    /* *****              edit warehouse type here            ******/
    /* *************************************************************/

    if (PT09M001.XWH_WHSE_CD[PTWIXM] == " ") /* if WTP*/
      set PT09M001.XWH_WHSE_CD[PTWIXM] cursor, bold;
      converseLib.validationFailed(116); /* required field*/
    else
      PT09255(); /* check if duplicate entry*/
    end


    /* *************************************************************/
    /* ***** edit status field, only an 'A' is valid for 'add ******/
    /* *************************************************************/

    if (PT09M001.XXXSTAT[PTWIXM] != "A") /* active*/
      set PT09M001.XXXSTAT[PTWIXM] cursor, bold; /* --error--*/
      converseLib.validationFailed(149); /* invalid status*/
    else /* else(valid status)*/
      /* next sentence*/
    end
  end
end // end PT09253
// Check for duplicate entry
Function PT09255()
   /* ------------------------------------------------------------*/
   /* Select a single row based on keyed data, if return code*/
   /* okay, this is a duplicate entry....that is not OKAY !*/
   /* ------------------------------------------------------------*/

  set VWHTYP01 empty; /* Initialize record*/

   /* ***** move data from map ******/
  VWHTYP01.XWHCD = PT09M001.XWH_WHSE_CD; /**/
  VWHTYP01.PC_WHSE_TYP_CD = PT09M001.PC_WHSE_TYP_CD; /**/

  try
    call "VWHTYP01" ("S ", SQLCA, VWHTYP01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  if (sysVar.errorCode == "00000000") /* If call OKAY*/
    if (SQLCA.VAGen_SQLCODE == 100) /* If not found, OKAY not a duplicate*/

      /* ***** now make sure no duplicates on add screen ******/
      PT09W03.PTWIDX2 = PT09W03.PTWIXM - 1;
      while (PT09W03.PTWIDX2 >= PT09W03.PTWIDX5)
        if (PT09M001.XWH_WHSE_CD[PTWIXM] == 
        PT09M001.XWH_WHSE_CD[PTWIDX2])
          set PT09M001.XWH_WHSE_CD[PTWIXM] cursor, bold;
          set PT09M001.PC_WHSE_TYP_CD[PTWIXM] bold;
          converseLib.validationFailed(147); /* Duplicates not allowed*/
        end
        PT09W03.PTWIDX2 = PT09W03.PTWIDX2 - 1;
      end
      /* ***** now make sure no bad descriptions on screen ****/
      PT09W03.PTWIDX2 = PT09W03.PTWIXM - 1;
      while (PT09W03.PTWIDX2 >= PT09W03.PTWIDX5)
        if (((PT09M001.PC_WHSE_TYP_CD[PTWIXM] == 
        PT09M001.PC_WHSE_TYP_CD[PTWIDX2]) && 
        (PT09M001.PC_WHSE_TYP_DESC[PTWIXM] != 
        PT09M001.PC_WHSE_TYP_DESC[PTWIDX2])))
          set PT09M001.PC_WHSE_TYP_CD[PTWIXM] cursor, bold;
          set PT09M001.PC_WHSE_TYP_DESC[PTWIXM] cursor, bold;
          converseLib.validationFailed(158); /* Duplicates not allowed*/
        end
        PT09W03.PTWIDX2 = PT09W03.PTWIDX2 - 1;
      end

      /* ***** now make sure no bad types on screen ****/
      PT09W03.PTWIDX2 = PT09W03.PTWIXM - 1;
      while (PT09W03.PTWIDX2 >= PT09W03.PTWIDX5)
        if (((PT09M001.PC_WHSE_TYP_CD[PTWIXM] != 
        PT09M001.PC_WHSE_TYP_CD[PTWIDX2]) && 
        (PT09M001.PC_WHSE_TYP_DESC[PTWIXM] == 
        PT09M001.PC_WHSE_TYP_DESC[PTWIDX2])))
          set PT09M001.PC_WHSE_TYP_CD[PTWIXM] cursor, bold;
          converseLib.validationFailed(159); /* Duplicates not allowed*/
        end
        PT09W03.PTWIDX2 = PT09W03.PTWIDX2 - 1;
      end

    else
      if (SQLCA.VAGen_SQLCODE == 0) /* DB2 error ( any error )*/
        set PT09M001.XWH_WHSE_CD[PTWIXM] cursor, bold;
        set PT09M001.PC_WHSE_TYP_CD[PTWIXM] bold;
        converseLib.validationFailed(147); /* Duplicates not allowed*/
      else /* ELSE(other DB2 error)*/

        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        PT09W03.PTWPRCSN = "255 "; /* Process number*/
        TA1REC.TA1FUNC = "RETN"; /* Return function*/
        TA1REC.TA1PGMNM = PT09W03.PTWERLOC; /* Error location*/
        TA1REC.TA1LOC = "UPDATE A SELECTED TABLE ROW";
        TA1REC.TA1MAP = PT09W03.XXXMAPNM; /* Map name*/
        TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VWHTYP01"; /* Table view name*/

        try
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        end /* Error*/

        converseLib.validationFailed(10); /* Indicate error occured*/
        PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/

        return; /* Return to previous process*/

      end
    end
  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PT09W03.PTWPRCSN = "255 "; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* Return function*/
    TA1REC.TA1PGMNM = PT09W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "UPDATE A SELECTED TABLE ROW";
    TA1REC.TA1MAP = PT09W03.XXXMAPNM; /* Map name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diagnosis*/

    converseLib.validationFailed(10); /* Indicate error occured*/
    PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/

    return; /* Return to previous process*/

  end



end // end PT09255

// Process valid input request
Function PT09260()
   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* IF no ERRORS found*/
                                 /* ;*/
    PT09W03.PTWIXM = PT09W03.PTWIDX5; /* Initialize index to start*/
    PT09W03.PTWUFL = "N"; /* Initialize Update Flag to "NO"*/

    while (PT09W03.PTWIXM <= PT09W03.PTWMPMAX)
            /* LOOP thru entire screen*/
      /* ***** if any fields were added ***************************/
      if (PT09M001.XXXSTAT[PTWIXM] != " "
       || PT09M001.PC_WHSE_TYP_CD[PTWIXM] != " "
       || PT09M001.PC_WHSE_TYP_DESC[PTWIXM] != " "
       || PT09M001.XWH_WHSE_CD[PTWIXM] != " "
      )
        if (COMMAREA.CAADDFL == "Y") /* if have add authority*/
          PT09261();
        else
          converseLib.validationFailed(102);
          exit stack;
        end

      end /* End of "IF" statement*/

      PT09W03.PTWIXM = PT09W03.PTWIXM + 1; /* Incriment index up by 1*/
    end /* End of "WHILE" statement*/

  end /* End of "IF" statement*/

end // end PT09260

// Insert Into DPRODC.VWHTYP01
Function PT09261()
   /* ------------------------------------------------------------*/
   /* Insert a single row in DB2*/
   /* ------------------------------------------------------------*/

  set VWHTYP01 empty; /* Initialize record*/

   /* ***** move data from map ***********8*****/
  VWHTYP01.PC_WHSE_TYP_CD = PT09M001.PC_WHSE_TYP_CD[PTWIXM];
  VWHTYP01.PC_WHSE_TYP_DESC = PT09M001.PC_WHSE_TYP_DESC[PTWIXM];
  VWHTYP01.XWHCD = PT09M001.XWH_WHSE_CD[PTWIXM];
  VWHTYP01.XXXSTAT = PT09M001.XXXSTAT[PTWIXM];
  VWHTYP01.ZZZCHGCT = 0;

   /* ***** get system date & time for insert ******/
  XX0XS01();
  VWHTYP01.ZZZSDT = XX0XW01.XX0XWDAT; /* Move date*/
  VWHTYP01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Move time*/

  try
    call "VWHTYP01" ("A ", SQLCA, VWHTYP01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == 803) /* duplicates*/
      converseLib.validationFailed(147); /* indicate duplicate*/
    else
      if (SQLCA.VAGen_SQLCODE != 0) /* DB2 error ( any error )*/

        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        PT09W03.PTWPRCSN = "261 "; /* Process number*/
        TA1REC.TA1FUNC = "RETN"; /* return function*/
        TA1REC.TA1PGMNM = PT09W03.PTWERLOC; /* Error location*/
        TA1REC.TA1LOC = "UPDATE A SELECTED TABLE ROW";
        TA1REC.TA1MAP = PT09W03.XXXMAPNM; /* Map name*/
        TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VWHTYP01"; /* Table view name*/
        TA1REC.TA1TBLKE = VWHTYP01.PT9KEY; /* move tbl key to errdiag*/

        try
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        end /* Error diagnosis*/

        converseLib.validationFailed(10); /* Indicate error occured*/
        PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/

        return; /* Return to previous process*/

      end
    end
  else
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PT09W03.PTWPRCSN = "261 "; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* return function*/
    TA1REC.TA1PGMNM = PT09W03.PTWERLOC; /* Error location*/
    TA1REC.TA1LOC = "UPDATE A SELECTED TABLE ROW";
    TA1REC.TA1MAP = PT09W03.XXXMAPNM; /* Map name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diagnosis*/

    converseLib.validationFailed(10); /* Indicate error occured*/
    PT09M001.XXXPRCNM = PT09W03.PTWERLOC; /* Process name*/

    return; /* Return to previous process*/
  end



end // end PT09261

//*** RECORD=PT09W01 ****
// ************************************************************
// ***                    P T 0 9 W 0 1                     ***
// ***                                                      ***
// *** Working storage record for PT09 Application.         ***
// ***                                                      ***
// ***                                                      ***
// *** MAINTENANCE LOG:                                     ***
// ***                                                      ***
// ***   DATE    NAME      COMMENT                          ***
// *** --------  --------  -------------------------------- ***
// *** 05/27/97  IDICKI    Initial Record Creation          ***
// ************************************************************
// ***********************
Record PT09W01 type basicRecord
  5 PT09W1GP PT09W1GP ; 
    10 PT09WERR PT09WERR ; 
      15 PT09W1L1 PT09W1L1 ; 
      15 XGPCD XGPCD ; 
      15 PT09W1L2 PT09W1L2 ; 
      15 PC_WHSE_TYP_CD PC_WHSE_TYP_CD ; 
      15 PT09W1L3 PT09W1L3 ; 
      15 PG1FCTCD PG1FCTCD ; 
      15 PT09W1L4 PT09W1L4 ; 
      15 PG1PRRCD PG1PRRCD ; 
      15 * char(9) ; 
end // end PT09W01

//*** RECORD=PT09W02 ****
// Temporary storage record for PT09 - delivery analyst maint.
// ************************************************************
// ***                                                      ***
// *** Maintenance Log :                                    ***
// ***                                                      ***
// ***   DATE    NAME      COMMENT                          ***
// *** --------  --------  -------------------------------- ***
// *** 05/27/97  IDICKI    created                          ***
// ***                                                      ***
// ***                                                      ***
// ***                                                      ***
// ************************************************************
// ***********************
Record PT09W02 type basicRecord
  5 PT09LEN PT09LEN ; 
  5 PT9GROUP PT9GROUP [14] ; 
    10 PC_WHSE_TYP_CD PC_WHSE_TYP_CD ; 
    10 PC_WHSE_TYP_DESC PC_WHSE_TYP_DESC ; 
    10 PT9KEY PT9KEY ; 
      15 XWHCD XWHCD ; 
    10 XXXSTAT XXXSTAT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PT09W02

//*** RECORD=PT09W03 ****
// Working storage for PT09 delivery analyst
// ***********************
Record PT09W03 type basicRecord
  5 PTWGRP09 PTWGRP09 ; 
    10 * char(30) ; 
      15 PTWNMO PTWNMO ; 
      15 PTWIXM PTWIXM ; 
      15 PTWIX2 PTWIX2 ; 
      15 PTWIDX1 PTWIDX1 ; 
      15 PTWIDX2 PTWIDX2 ; 
      15 PTWIDX3 PTWIDX3 ; 
      15 PTWIDX4 PTWIDX4 ; 
      15 PTWIDX5 PTWIDX5 ; 
      15 PTWSWC PTWSWC ; 
      15 PTWSWR PTWSWR ; 
      15 PTWTSP PTWTSP ; 
      15 PTWFIRST PTWFIRST ; 
      15 TA5TSQIX TA5TSQIX ; 
      15 PTWMAP PTWMAP ; 
    10 PTWERLOC PTWERLOC ; 
      15 PTWAPPL PTWAPPL ; 
      15 PTWPRCSN PTWPRCSN ; 
    10 XXXMAPNM XXXMAPNM ; 
    10 PTWMPMAX PTWMPMAX ; 
    10 PTWUFL PTWUFL ; 
    10 PTWADDFL PTWADDFL ; 
    10 PTWTSQSZ PTWTSQSZ ; 
    10 PTWUSERA PTWUSERA ; 
    10 PTWSVGPC PTWSVGPC ; 
    10 PTWSVWTP PTWSVWTP ; 
end // end PT09W03

DataItem PT09LEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT09W1GP char(55)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT09W1L1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT09W1L2 char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT09W1L3 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT09W1L4 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT09WERR char(55)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem PT9GROUP char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PTWGRP09 char(659)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// User area
DataItem PTWSVWTP char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

