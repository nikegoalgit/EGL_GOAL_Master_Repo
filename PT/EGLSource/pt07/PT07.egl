package pt07;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import pc.common.*;
import pg.common.*;
import pt.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PT07 ****
// This application displays all the products with drop dead
// requested time of arrival override dates.  These dates are
// entered by the user.
// 
// There are 2 screens involved in PT07, PT07M001 & PT07M002
// respectively. PT07M001 concerns with DMODEL.VFORCD01 table
// and PT07M002 concerns with DMODEL.VFOFCT01. Also, the
// processing is further divided into Prioritized product &
// Non-Prioritized product. A prioritized product is one which
// has 'P' override code (prioritiy code as 'P' in VFORCD01).
// PT07M002 screen shows the factory information for the
// prioritized products ONLY.
// 
// User access is categorized as (i) an user with access to
// Add,Change,Delete & Inquiry to prioritized and non-Priority
// products (ii) an user with access to Add,Change,Delete &
// Inquiry to Non-Prioritized products only (iii) an user with
// access to Inquiry to prioritized & non-prioritized products
// 
// With security clearance, the screen will initially display
// all existing products. The user may then change any date
// for, or delete, any existing product.
// The user may also add products and dates by entering the
// information by pressing PF5(clear).
// 
// On pressing PF17(without any selection codes) in PT07M001,
// the users will be provided PT07M002 with listing all 'P'
// products. In PT07M002, Chage & Delete of factory information
// is allowed.
// Selection code 'S' with PF17 key pressed in PT07M001, the
// factory info for the products 'S'elected will be listed in
// PT07M002. Add, Change & Delete of factory info is allowed in
// PT07M002.
// If the selection code is 'A' with PF17 key pressed in M001
// (PF5 must be pressed before add), then add & change is allow
// for the already existing product in M002. Add only is allowe
// for new 'P' product in M002.
// If the selection code is 'C' with PF17 key pressed in M001,
// then add,change & delete is allowed for already existing pdt
// in M002. Add only is allowed for new 'P' pdt in M002.
// 
// PF9 is to confirm the changes made and to post the changes
// into the database.
// Any user may scroll forward and backward to view all
// products/dates by pressing PF7 and PF8.  Any user may also
// exit to any allowed application, via FAST PATH or PF Key,
// at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// PT303B   02/08/96  DBRUIH  New application.
// PT315    02/23/96  MCHOW   Add Request Override Code field
//                            to map, to control which records
//                            will be displayed on the map -
//                            either all records for all codes
//                            or all records for only one code
//                            (E, F, L, P or S).  Also added
//                            new record to use with call to
//                            VFEXDT01 to retrieve records in
//                            new sort order.  Also changed
//                            Override Date from required entry
//                            to optional entry for Factory
//                            Problems.
// PTxxx    03/05/96  MCHOW   Changed 'F'actory Problems to
//                            'P'rioritized, 'P'roduct Flow to
//                            'F'low Product, per Julie Adkins.
//                            Changes made to PT07505, PT07550,
//                            PT07560, PT07M001 and PT00ENU.
// PT1058   08/14/97  IDICKI  Added PO range and factory code
//                            to enable users to identify
//                            styles to be prioritized.
// FZ????   10/15/97  DPACK   Add PF15 to update POMS with chgs
//                            entered for Launch/Priority.
// PT1462   12/08/97  IDICKI  Enable user to specify same style
//                            as 'P' and 'S'.
//          12/10/97  NGANGO  y2k modification.Changed Mapfield
//                            PT07M-DROPDEAD-YY to remove lead-
//                            ing zero suppression.
// PT1496   02/20/98  SATINA  Code changes done not to allow
//                            overlapping po-id-mo-range and to
//                            allow the user to change it.
// PT00     04/15/98  SREDDY  Included FCTY-CD in overlap check
// PT00     04/21/98  SREDDY  Corrected the error of going to
//                            first page with every change.
// PT104    11/19/98  MSEVAL  Overlapping P.O. I.D's.
// PT207    05/11/99  RRENUK  Fixed the page problem -TSQ abend
//                            when selecting other override
// PT990721 07/21/99  gkamal  changed 'f' option as Y2K
//                            product.
// PT07     09/09/99  VANNAM  PT07 SCREEN ENHANCEMENT
// 
// PT07     02/15/00  GKAMAL  FIXED OVERLAPPING PO ID PROBLEM
//                            IN PT07-251
// 
// PT07     04/26/00  VANNAM  CHANGED PT07193-3 PROCESS TO
//                            ALLOW UPDATES IN M001 SCREEN WHEN
//                            PROD RLSE OR DDD IS CHANGED FOR
//                            AN EXISTING PRIORITIZED PRODUCT
// 
// *********************
Program PT07 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PT00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FY1REC FY1REC; // record
  PG2REC PG2REC; // record
  PT07W00 PT07W00; // record
  PT07W01 PT07W01; // record
  PT07W011 PT07W011; // record
  PT07W012 PT07W012; // record
  PT07W02 PT07W02; // record
  PT07W02A PT07W02A; // record
  PT07W02B PT07W02B; // record
  PT07W02C PT07W02C; // record
  PT07W02D PT07W02D; // record
  PT07W03 PT07W03; // record
  PTWREC PTWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VFOFCT01 VFOFCT01; // record
  VFORCD01 VFORCD01; // record
  VRTAOC01 VRTAOC01; // record
  XCTHREC XCTHREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PT07T01 {deleteAfterUse = yes}; // table
  use PT07T51 {deleteAfterUse = yes}; // table
  use PT07T02 {deleteAfterUse = yes}; // table
  use PT07T03 {deleteAfterUse = yes}; // table
  use PT07T04 {deleteAfterUse = yes}; // table
  use PT07T05 {deleteAfterUse = yes}; // table
  use PT07M.PT07M001,  // forms
      PT07M.PT07M002, 
      PT07M.TA0PM001, 
      PT07M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPT001: XPPT001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set PT07M001 initial; /* M001 input/output*/
    set PT07M002 initial; /* M002 input/output*/
    set XX0XM001 initial; /* pop-up window*/
    set PT07W00 empty; /* Working storage*/
    set PT07W01 empty; /* M001 display storage*/
    set PT07W02 empty; /* M002 display storage*/
    set PT07W011 empty; /* Vforcd01 io-parms wkg storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

     /* ------------------------------------------------------------*/
     /* Set up defaults.*/
     /* ------------------------------------------------------------*/

    PT07W00.PT07WMAP = "1"; /* Map to be displayed switch*/
    PT07W00.PT07WSWF = "Y"; /* Format the map switch*/
    PT07W00.PT07WSWR = "Y"; /* Default Request for data switch*/
    PT07W00.XGPCD = "02"; /* Default GPC code*/
    PT07W00.PT07W-FIRST-TIME = "Y"; /* First time through program*/
    PT07W00.PT07W-SY1STNBR = "  "; /* Style Number*/
    PT07W00.PT07W-SY2CLRID = "  "; /* Color*/
    PT07W00.PT07W-SPEC-OFFR-CD = "* "; /* default ovrd cd*/
    PT07W00.PT07W-KEY-TYP-CD = "* "; /* default ovrd cd*/
    PT07W00.PT07W-BRAND-CD = "* "; /* default ovrd cd*/
    PT07W00.PT07W-PRI-CD = "* "; /* default ovrd cd*/
    PT07W00.PT07W-WAIT-CONFIRM = "N "; /* wait confirm sw*/
    PT07W00.PT07W-WAIT-PF17 = "N"; /* wait PF17 sw*/
    PT07W00.PT07W-PF5-PRESSED = "N"; /* PF5 pressed sw*/
    set PT07M001.PT07M1CHG normal; /* Chg and Del - Literal in Map 1*/
    set PT07W03 empty; /* common shared area between map1 and map2*/

    PT07W00.PT07WSSW = "N";
    PT07W00.PT07WSSW-P = "N";
    PT07W00.PT07WSSW-NON-P = "N";
    PT07W00.PT07WSSW-INQ-P = "Y";
     /* ------------------------------------------------------------*/
     /* If user has security clearance, set security-switch.*/
     /* ------------------------------------------------------------*/

     /* IF COMMAREA.CAADDFL EQ 'Y'       /* If add clearance exists*/
     /* AND COMMAREA.CADELFL EQ 'Y'    /* If delete clearance exists*/
     /* AND COMMAREA.CACHGFL EQ 'Y';   /* If change clearance exists*/
     /* MOVE 'Y' TO PT07W00.PT07WSSW;  /* Security switch - yes*/
     /* ELSE;*/
     /* MOVE 'N' TO PT07W00.PT07WSSW;  /* Security switch - no*/
     /* END;*/

    if (COMMAREA.CAADDFL == "N"
     && COMMAREA.CADELFL == "N"
     && COMMAREA.CACHGFL == "N"
     && COMMAREA.CAALVL[1] == "N"
     && COMMAREA.CACLVL[1] == "N"
     && COMMAREA.CADLVL[1] == "N")
      PT07W00.PT07WSSW-NON-P = "N";
      PT07W00.PT07WSSW-P = "N";
      PT07W00.PT07WSSW = "N";
      if (COMMAREA.CAILVL[1] == "N")
        PT07W00.PT07WSSW-INQ-P = "N";
      end
    end

    if (COMMAREA.CAADDFL == "Y"
     && COMMAREA.CADELFL == "Y"
     && COMMAREA.CACHGFL == "Y"
     && COMMAREA.CAALVL[1] == "Y"
     && COMMAREA.CACLVL[1] == "Y"
     && COMMAREA.CADLVL[1] == "Y")
      PT07W00.PT07WSSW-NON-P = "Y";
      PT07W00.PT07WSSW-P = "Y";
      PT07W00.PT07WSSW = "Y";
    end

    if (COMMAREA.CAADDFL == "Y"
     && COMMAREA.CADELFL == "Y"
     && COMMAREA.CACHGFL == "Y"
     && COMMAREA.CAALVL[1] == "N"
     && COMMAREA.CACLVL[1] == "N"
     && COMMAREA.CADLVL[1] == "N")
      PT07W00.PT07WSSW-NON-P = "Y";
      PT07W00.PT07WSSW-P = "N";
      PT07W00.PT07WSSW = "Y";
      if (COMMAREA.CAILVL[1] == "N")
        PT07W00.PT07WSSW-INQ-P = "N";
      end
    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PT07001; /* Converse the main process*/


    PT07001: PT07001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PT07001; /* Converse the main process*/


  end // end main
end // end PT07

// Open VFOFCT01
Function PT07-211()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
   /* SET VFOFCT01 EMPTY;              /* Clear row storage area*/
  VFOFCT01.XGPCD = "02";

   /* Open cursor for VFOFCT01 (select all from table)*/
   /* ------------------------------------------------------------*/
  set PT07W012 empty;
  PT07W012.TASK-CODE = "S2";

  try
    call "VFOFCT01" (PT07W012, SQLCA, VFOFCT01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    PT07W02D.PT07WSWC = "N"; /* End of cursor switch*/
    PT07W02D.PT07WDSW = "N"; /* Data found switch*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "211"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFOFCT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFOFCT01.PT07W-FOFCT-GRP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07-211

// Fetch VFOFCT01
Function PT07-212()
   /* ------------------------------------------------------------*/
   /* Fetch VFOFCT01 + style name and color abreviation*/
   /* ------------------------------------------------------------*/
  set PT07W012 empty;
  PT07W012.TASK-CODE = "N2";

  try
    call "VFOFCT01" (PT07W012, SQLCA, VFOFCT01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* Row not found*/

      /* ------------------------------------------------------------*/
       /* If row found, set switch.*/
      /* ------------------------------------------------------------*/
      if (SQLCA.VAGen_SQLCODE == +0) /* Normal return code*/
        PT07W02D.PT07WDSW = "Y"; /* Data found switch*/
        PT07W02A.PT07WDAT = "Y"; /* Indicate Minimum Data*/
      end

      /* ------------------------------------------------------------*/
       /* If end of selected set, indicate end of cursor.*/
      /* ------------------------------------------------------------*/
      if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
        PT07W02D.PT07WSWC = "Y"; /* Indicate end of cursor*/
      end
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFOFCT01"; /* Table view name*/
   /* MOVE PT07W02.PT07W-FOFCT-GRP TO VFOFCT01.VFOFCT01-GRP;*/
  TA1REC.TA1TBLKE = VFOFCT01.PT07W-FOFCT-GRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07-212

// Save data in display storage
Function PT07-213()
   /* ------------------------------------------------------------*/
   /* If end of cursor, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (PT07W02D.PT07WSWC == "Y") /* End of cursor*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/
  PT07W02.SY1STNBR[PT07WIX] = VFOFCT01.SY1STNBR; /* Style*/
  PT07W02.SY2CLRID[PT07WIX] = VFOFCT01.SY2CLRID; /* Color*/
  PT07W02.XDMCD[PT07WIX] = VFOFCT01.XDMCD; /* Dimension*/
  PT07W02.FY-FCTY-CD[PT07WIX] = VFOFCT01.FY-FCTY-CD;
  PT07W02.PC-PO-ID-MO-RNG[PT07WIX] = VFOFCT01.PC-PO-ID-MO-RNG;
  PT07W02.PC-PO-ID-MO-TO-RNG[PT07WIX] = VFOFCT01.PC-PO-ID-MO-TO-RNG;
  PT07W02.ZZZSDT[PT07WIX] = VFOFCT01.ZZZSDT; /* change date*/

  PT07W02.SY1SSTNM[PT07WIX] = PT07W01.SY1SSTNM[PT07WIXM1];
  PT07W02.SY2CLRAB[PT07WIX] = PT07W01.SY2CLRAB[PT07WIXM1];

  if (PT07W02A.PT07WFLAG == "A"
   || PT07W02A.PT07WFLAG == "C"
   || PT07W02A.PT07WFLAG == "S")
    PT07W02A.PT07COUNT = PT07W02A.PT07COUNT + 1;
    if (PT07W02A.PT07COUNT > 39)
      converseLib.validationFailed(207);
      return;
    end
    PT07W02C.SY1STNBR[PT07COUNT] = VFOFCT01.SY1STNBR; /* /*/
    PT07W02B.SY1STNBR[PT07COUNT] = VFOFCT01.SY1STNBR; /* /*/
    PT07W02C.SY2CLRID[PT07COUNT] = VFOFCT01.SY2CLRID; /* Color*/
    PT07W02B.SY2CLRID[PT07COUNT] = VFOFCT01.SY2CLRID; /* Color*/
    PT07W02C.XDMCD[PT07COUNT] = VFOFCT01.XDMCD; /* Dimension*/
    PT07W02B.XDMCD[PT07COUNT] = VFOFCT01.XDMCD; /* Dimension*/
    PT07W02C.FY-FCTY-CD[PT07COUNT] = VFOFCT01.FY-FCTY-CD;
    PT07W02B.FY-FCTY-CD[PT07COUNT] = VFOFCT01.FY-FCTY-CD;
    PT07W02C.PC-PO-ID-MO-RNG[PT07COUNT] = VFOFCT01.PC-PO-ID-MO-RNG;
    PT07W02B.PC-PO-ID-MO-RNG[PT07COUNT] = VFOFCT01.PC-PO-ID-MO-RNG;
    PT07W02C.PC-PO-ID-MO-TO-RNG[PT07COUNT] = VFOFCT01.PC-PO-ID-MO-TO-RNG;
    PT07W02B.PC-PO-ID-MO-TO-RNG[PT07COUNT] = VFOFCT01.PC-PO-ID-MO-TO-RNG;
    PT07W02C.ZZZSDT[PT07COUNT] = VFOFCT01.ZZZSDT; /* change d*/
    PT07W02B.ZZZSDT[PT07COUNT] = VFOFCT01.ZZZSDT; /* change d*/

    PT07W02C.SY1SSTNM[PT07COUNT] = PT07W01.SY1SSTNM[PT07WIXM1];
    PT07W02C.SY2CLRAB[PT07COUNT] = PT07W01.SY2CLRAB[PT07WIXM1];

  end



   /* ------------------------------------------------------------*/
   /* Add to line loop counter.*/
   /* ------------------------------------------------------------*/
  PT07W02D.PT07WIX = PT07W02D.PT07WIX + 1; /* Increment line index*/


end // end PT07-213

// Close VFOFCT01
Function PT07-214()
   /* ------------------------------------------------------------*/
   /* Close VFOFCT01 CURSOR*/
   /* ------------------------------------------------------------*/
  set PT07W012 empty;
  PT07W012.TASK-CODE = "C2";

  try
    call "VFOFCT01" (PT07W012, SQLCA, VFOFCT01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "160"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFOFCT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07-214

// Add page to temporary storage
Function PT07-215()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

   /* Temporary storage length*/
  PT07W02.XXXTSLEN = PT07W02D.XXXTSLEN;
                                  /* MOVE COMMAREA.CACURRAP TO*/
                                   /* TA5REC.TA5APPID;/* Application*/
                                   /* identification*/
  TA5REC.TA5APPID = "PT72"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PT07W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PT07W02 empty; /* M002 display storage*/
    PT07W02D.PT07WIX = 1; /* Display line index*/
    PT07W02D.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PTWREC.XXXMODID = "150"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07-215

// Obtain TSQ Record
Function PT07-221()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  PT07W02.XXXTSLEN = PT07W02D.XXXTSLEN; /* Temporary storage length*/

                                  /* MOVE COMMAREA.CACURRAP TO*/
                                   /* TA5REC.TA5APPID;/* Application*/
                                   /* identification*/
  TA5REC.TA5APPID = "PT72"; /* Application identification*/
  TA5REC.TA5TSQIX = PT07W02D.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PT07W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PTWREC.XXXMODID = "211"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07-221

// Update TSQ Record
Function PT07-222()
   /* ------------------------------------------------------------*/
   /* Update the TSQ Record.*/
   /* ------------------------------------------------------------*/
  PT07W02.XXXTSLEN = PT07W02D.XXXTSLEN; /* Temporary storage length*/

                                  /* MOVE COMMAREA.CACURRAP TO*/
                                   /* TA5REC.TA5APPID;/* Application*/
                                   /* identification*/
  TA5REC.TA5APPID = "PT72"; /* Application identification*/
  TA5REC.TA5TSQIX = PT07W02D.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PT07W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PTWREC.XXXMODID = "211"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE INTO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07-222

// Check for overlap po range
Function PT07-251()
   /* ********************************************************/
   /* check for overlap po-id-mo range*/
   /* ********************************************************/
  move PT07WIX to PT07WX1 withV60Compat;
  set VFOFCT01 empty;
  VFOFCT01.SY1STNBR = PT07W02.SY1STNBR[PT07WX1];
  VFOFCT01.SY2CLRID = PT07W02.SY2CLRID[PT07WX1];
  VFOFCT01.XDMCD = PT07W02.XDMCD[PT07WX1];


  if (PT07M002.PC-PO-ID-MO-RNG[PT07WX1] !=  /* po-id-mo-range*/
  PT07W02.PC-PO-ID-MO-RNG[PT07WX1] ||       /* changed*/
  PT07M002.PC-PO-ID-MO-TO-RNG[PT07WX1] !=   
  PT07W02.PC-PO-ID-MO-TO-RNG[PT07WX1] ||    
  PT07M002.FY-FCTY-CD[PT07WX1] !=           
  PT07W02.FY-FCTY-CD[PT07WX1]               
  )                                        
    PT07-211(); /* declare VFEXDT02  cursor*/
    while (PT07W02D.PT07WSWC == "N") /* not end of cursor*/
      PT07-212(); /* fetch VFEXDT02*/
      if (VFOFCT01.SY1STNBR
       == PT07M002.SY1STNBR[PT07WX1] && 
      VFOFCT01.SY2CLRID
       == PT07M002.SY2CLRID[PT07WX1] && 
      VFOFCT01.FY-FCTY-CD == PT07M002.FY-FCTY-CD[PT07WX1])

        PT07W02A.PT07MO1 = VFOFCT01.PC-PO-ID-MO-RNG;
        PT07W02A.PT07MO2 = VFOFCT01.PC-PO-ID-MO-TO-RNG;
        PT07W02A.PT07MO3 = PT07M002.PC-PO-ID-MO-RNG[PT07WX1];
        PT07W02A.PT07MO4 = PT07M002.PC-PO-ID-MO-TO-RNG[PT07WX1];
        if (PT07W02A.PT07MO2M2 < PT07W02A.PT07MO2M1)
          PT07W02A.PT07MO2Y1 = PT07W02A.PT07MO2Y1 + 1;
        end
        if (PT07W02A.PT07MO4M2 < PT07W02A.PT07MO4M1)
          PT07W02A.PT07MO4Y1 = PT07W02A.PT07MO4Y1 + 1;
        end
        PT07W02A.PT07MO2M1 = PT07W02A.PT07MO2M2;
        PT07W02A.PT07MO4M1 = PT07W02A.PT07MO4M2;
        PT07W02A.PT07MO1M2 = 1;
        PT07W02A.PT07MO2M2 = 1;
        PT07W02A.PT07MO3M2 = 1;
        PT07W02A.PT07MO4M2 = 1;

   /* *********************************************************************/
   /* Changes made by RRENUK in this IF condition to fix the*/
   /* overlapping PO id problem on 01/21/2000*/
   /* *********************************************************************/
        if (VFOFCT01.PC-PO-ID-MO-TO-RNG == 
        PT07W02.PC-PO-ID-MO-TO-RNG[PT07WX1] && 
        VFOFCT01.PC-PO-ID-MO-RNG == 
        PT07W02.PC-PO-ID-MO-RNG[PT07WX1] && 
        VFOFCT01.FY-FCTY-CD == PT07W02.FY-FCTY-CD[PT07WX1])
        else
          if ((PT07W02A.PT07MO1 >= 
          PT07W02A.PT07MO3 && 
          PT07W02A.PT07MO1 <= 
          PT07W02A.PT07MO4)
          
           || (PT07W02A.PT07MO3 >= 
          PT07W02A.PT07MO1 && 
          PT07W02A.PT07MO3 <= 
          PT07W02A.PT07MO2)
          )
            set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] cursor, bold;
            set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;

            converseLib.validationFailed(167); /* overlap po-id-mo range*/
            exit stack;
          end
        end
      end
    end
    PT07-214(); /* close dprodc.vfexdt02*/
  end
end // end PT07-251

// Select exists vfofct01
Function PT07-252()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set VFOFCT01 empty; /* Clear copybook*/
   /* SET PT07W02 EMPTY;               /* Clear io-mod parms*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/
  if (PT07M002.PT07MSEL[PT07WIX] == "C" || 
  PT07M002.PT07MSEL[PT07WIX] == "D")
    if ("C" in PT07M002.PT07MSEL && PT07W02D.TA5TSQIX > 1
     && PT07W02A.PT07WFLAG != "I")
      VFOFCT01.XGPCD = "02"; /* gpc code*/
      VFOFCT01.SY1STNBR = PT07W02B.SY1STNBR[PT07COUNT]; /* style nbr*/
      VFOFCT01.SY2CLRID = PT07W02B.SY2CLRID[PT07COUNT]; /* color cd*/
      VFOFCT01.XDMCD = PT07W02B.XDMCD[PT07COUNT]; /* dimension cd*/
      VFOFCT01.FY-FCTY-CD = PT07W02B.FY-FCTY-CD[PT07COUNT]; /* factory*/
      VFOFCT01.PC-PO-ID-MO-RNG = PT07W02B.PC-PO-ID-MO-RNG[PT07COUNT]; /* po id*/
      VFOFCT01.PC-PO-ID-MO-TO-RNG = PT07W02B.PC-PO-ID-MO-TO-RNG[PT07COUNT]; /* po to id*/
    else
      VFOFCT01.XGPCD = "02"; /* gpc code*/
      VFOFCT01.SY1STNBR = PT07W02.SY1STNBR[PT07WIX]; /* style nbr*/
      VFOFCT01.SY2CLRID = PT07W02.SY2CLRID[PT07WIX]; /* color cd*/
      VFOFCT01.XDMCD = PT07W02.XDMCD[PT07WIX]; /* dimension cd*/
      VFOFCT01.FY-FCTY-CD = PT07W02.FY-FCTY-CD[PT07WIX]; /* factory*/
      VFOFCT01.PC-PO-ID-MO-RNG = PT07W02.PC-PO-ID-MO-RNG[PT07WIX]; /* po id*/
      VFOFCT01.PC-PO-ID-MO-TO-RNG = PT07W02.PC-PO-ID-MO-TO-RNG[PT07WIX]; /* po to id*/
    end
  end
  if (PT07M002.PT07MSEL[PT07WIX] == "A")
    VFOFCT01.XGPCD = "02"; /* gpc code*/
    VFOFCT01.SY1STNBR = PT07M002.SY1STNBR[1]; /* style nbr*/
    VFOFCT01.SY2CLRID = PT07M002.SY2CLRID[1]; /* color cd*/
    VFOFCT01.XDMCD = "00"; /* dimension cd*/
    VFOFCT01.FY-FCTY-CD = PT07M002.FY-FCTY-CD[PT07WIX]; /* factory*/
    VFOFCT01.PC-PO-ID-MO-RNG = PT07M002.PC-PO-ID-MO-RNG[PT07WIX]; /* po id*/
    VFOFCT01.PC-PO-ID-MO-TO-RNG = PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX]; /* po id*/
  end

   /* ------------------------------------------------------------*/
   /* Select VFOFCT01.*/
   /* ------------------------------------------------------------*/
  set PT07W012 empty;
  PT07W012.TASK-CODE = "S ";

  try
    call "VFOFCT01" (PT07W012, SQLCA, VFOFCT01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* row not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "541"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(011); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(010); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFOFCT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFOFCT01.PT07W-FOFCT-GRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07-252

// Check for overlap po range
Function PT07-253()
   /* ********************************************************/
   /* check for overlap po-id-mo range*/
   /* ********************************************************/
  move PT07WIX to PT07WX1 withV60Compat;
  set VFOFCT01 empty;
  VFOFCT01.SY1STNBR = PT07W02.SY1STNBR[PT07WX1];
  VFOFCT01.SY2CLRID = PT07W02.SY2CLRID[PT07WX1];
  VFOFCT01.XDMCD = "00";

  PT07-211(); /* declare VFEXDT02  cursor*/
  while (PT07W02D.PT07WSWC == "N") /* not end of cursor*/
    PT07-212(); /* fetch VFEXDT02*/
    PT07W02A.PT07MO1 = VFOFCT01.PC-PO-ID-MO-RNG;
    PT07W02A.PT07MO2 = VFOFCT01.PC-PO-ID-MO-TO-RNG;
    PT07W02A.PT07MO3 = PT07M002.PC-PO-ID-MO-RNG[PT07WX1];
    PT07W02A.PT07MO4 = PT07M002.PC-PO-ID-MO-TO-RNG[PT07WX1];
    if (PT07W02A.PT07MO2M2 < PT07W02A.PT07MO2M1)
      PT07W02A.PT07MO2Y1 = PT07W02A.PT07MO2Y1 + 1;
    end
    if (PT07W02A.PT07MO4M2 < PT07W02A.PT07MO4M1)
      PT07W02A.PT07MO4Y1 = PT07W02A.PT07MO4Y1 + 1;
    end
    PT07W02A.PT07MO2M1 = PT07W02A.PT07MO2M2;
    PT07W02A.PT07MO4M1 = PT07W02A.PT07MO4M2;
    PT07W02A.PT07MO1M2 = 1;
    PT07W02A.PT07MO2M2 = 1;
    PT07W02A.PT07MO3M2 = 1;
    PT07W02A.PT07MO4M2 = 1;


    if (VFOFCT01.FY-FCTY-CD == PT07M002.FY-FCTY-CD[PT07WX1])

      if ((PT07W02A.PT07MO1 >= 
      PT07W02A.PT07MO3 && 
      PT07W02A.PT07MO1 <= 
      PT07W02A.PT07MO4)
      
       || (PT07W02A.PT07MO3 >= 
      PT07W02A.PT07MO1 && 
      PT07W02A.PT07MO3 <= 
      PT07W02A.PT07MO2)
      )
        set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] cursor, bold;
        set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;

        converseLib.validationFailed(167); /* overlap po-id-mo range*/
        exit stack;
      end
    end
  end
  PT07-214(); /* close dprodc.vfexdt02*/
end // end PT07-253

// Check for overlap po range
Function PT07-254()
   /* ********************************************************/
   /* check for overlap po-id-mo range*/
   /* ********************************************************/

  PT07WX1 = 1;
  while (PT07WX1 < PT07WIX)
    PT07W02A.PT07MO1 = PT07M002.PC-PO-ID-MO-RNG[PT07WX1];
    PT07W02A.PT07MO2 = PT07M002.PC-PO-ID-MO-TO-RNG[PT07WX1];
    PT07W02A.PT07MO3 = PT07M002.PC-PO-ID-MO-RNG[PT07WIX];
    PT07W02A.PT07MO4 = PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX];
    if (PT07W02A.PT07MO2M2 < PT07W02A.PT07MO2M1)
      PT07W02A.PT07MO2Y1 = PT07W02A.PT07MO2Y1 + 1;
    end
    if (PT07W02A.PT07MO4M2 < PT07W02A.PT07MO4M1)
      PT07W02A.PT07MO4Y1 = PT07W02A.PT07MO4Y1 + 1;
    end
    PT07W02A.PT07MO2M1 = PT07W02A.PT07MO2M2;
    PT07W02A.PT07MO4M1 = PT07W02A.PT07MO4M2;
    PT07W02A.PT07MO1M2 = 1;
    PT07W02A.PT07MO2M2 = 1;
    PT07W02A.PT07MO3M2 = 1;
    PT07W02A.PT07MO4M2 = 1;

    if (PT07M002.FY-FCTY-CD[PT07WX1] == PT07M002.FY-FCTY-CD[PT07WIX])
      if ((PT07W02A.PT07MO1 >= 
      PT07W02A.PT07MO3 && 
      PT07W02A.PT07MO1 <= 
      PT07W02A.PT07MO4)
      
       || (PT07W02A.PT07MO3 >= 
      PT07W02A.PT07MO1 && 
      PT07W02A.PT07MO3 <= 
      PT07W02A.PT07MO2)
      )
        set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] cursor, bold;
        set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;

        converseLib.validationFailed(167); /* overlap po-id-mo range*/
        PT07W02D.PT07WSWF = "N";
        PT07W02D.PT07WSWR = "N";
      end
    end
    PT07W02D.PT07WX1 = PT07W02D.PT07WX1 + 1;
  end
end // end PT07-254

// Check for overlap po range
Function PT07-255()
   /* ********************************************************/
   /* check for overlap po-id-mo range*/
   /* ********************************************************/
  PT07WX1 = 1;
  while (PT07WX1 < PT07COUNT)
    PT07W02A.PT07MO1 = PT07W02C.PC-PO-ID-MO-RNG[PT07WX1];
    PT07W02A.PT07MO2 = PT07W02C.PC-PO-ID-MO-TO-RNG[PT07WX1];
    PT07W02A.PT07MO3 = PT07M002.PC-PO-ID-MO-RNG[PT07WIX];
    PT07W02A.PT07MO4 = PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX];
    if (PT07W02A.PT07MO2M2 < PT07W02A.PT07MO2M1)
      PT07W02A.PT07MO2Y1 = PT07W02A.PT07MO2Y1 + 1;
    end
    if (PT07W02A.PT07MO4M2 < PT07W02A.PT07MO4M1)
      PT07W02A.PT07MO4Y1 = PT07W02A.PT07MO4Y1 + 1;
    end
    PT07W02A.PT07MO2M1 = PT07W02A.PT07MO2M2;
    PT07W02A.PT07MO4M1 = PT07W02A.PT07MO4M2;
    PT07W02A.PT07MO1M2 = 1;
    PT07W02A.PT07MO2M2 = 1;
    PT07W02A.PT07MO3M2 = 1;
    PT07W02A.PT07MO4M2 = 1;

    if (PT07W02C.FY-FCTY-CD[PT07WX1] == PT07M002.FY-FCTY-CD[PT07WIX])
      if ((PT07W02A.PT07MO1 >= 
      PT07W02A.PT07MO3 && 
      PT07W02A.PT07MO1 <= 
      PT07W02A.PT07MO4)
      
       || (PT07W02A.PT07MO3 >= 
      PT07W02A.PT07MO1 && 
      PT07W02A.PT07MO3 <= 
      PT07W02A.PT07MO2)
      )
        set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] cursor, bold;
        set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;

        converseLib.validationFailed(167); /* overlap po-id-mo range*/
        PT07W02D.PT07WSWF = "N";
        PT07W02D.PT07WSWR = "N";
        exit stack;
      end
    end
    PT07W02D.PT07WX1 = PT07W02D.PT07WX1 + 1;
  end
end // end PT07-255

// Check for overlap po range
Function PT07-256()
   /* ********************************************************/
   /* check for overlap po-id-mo range*/
   /* ********************************************************/

  PT07WX1 = 1;
  while (PT07WX1 < PT07WIX)
    PT07W02A.PT07MO1 = PT07M002.PC-PO-ID-MO-RNG[PT07WX1];
    PT07W02A.PT07MO2 = PT07M002.PC-PO-ID-MO-TO-RNG[PT07WX1];
    PT07W02A.PT07MO3 = PT07M002.PC-PO-ID-MO-RNG[PT07WIX];
    PT07W02A.PT07MO4 = PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX];
    if (PT07W02A.PT07MO2M2 < PT07W02A.PT07MO2M1)
      PT07W02A.PT07MO2Y1 = PT07W02A.PT07MO2Y1 + 1;
    end
    if (PT07W02A.PT07MO4M2 < PT07W02A.PT07MO4M1)
      PT07W02A.PT07MO4Y1 = PT07W02A.PT07MO4Y1 + 1;
    end
    PT07W02A.PT07MO2M1 = PT07W02A.PT07MO2M2;
    PT07W02A.PT07MO4M1 = PT07W02A.PT07MO4M2;
    PT07W02A.PT07MO1M2 = 1;
    PT07W02A.PT07MO2M2 = 1;
    PT07W02A.PT07MO3M2 = 1;
    PT07W02A.PT07MO4M2 = 1;

    if (PT07M002.FY-FCTY-CD[PT07WX1] == PT07M002.FY-FCTY-CD[PT07WIX])
      if ((PT07W02A.PT07MO1 >= 
      PT07W02A.PT07MO3 && 
      PT07W02A.PT07MO1 <= 
      PT07W02A.PT07MO4)
      
       || (PT07W02A.PT07MO3 >= 
      PT07W02A.PT07MO1 && 
      PT07W02A.PT07MO3 <= 
      PT07W02A.PT07MO2)
      )
        set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] cursor, bold;
        set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;

        converseLib.validationFailed(167); /* overlap po-id-mo range*/
        PT07W02D.PT07WSWF = "N";
        PT07W02D.PT07WSWR = "N";
      end
    end
    PT07W02D.PT07WX1 = PT07W02D.PT07WX1 + 1;
  end
  PT07WX1 = PT07WX1 + 1;
  while (PT07WX1 <= 13)
    PT07W02A.PT07MO1 = PT07M002.PC-PO-ID-MO-RNG[PT07WX1];
    PT07W02A.PT07MO2 = PT07M002.PC-PO-ID-MO-TO-RNG[PT07WX1];
    PT07W02A.PT07MO3 = PT07M002.PC-PO-ID-MO-RNG[PT07WIX];
    PT07W02A.PT07MO4 = PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX];
    if (PT07W02A.PT07MO2M2 < PT07W02A.PT07MO2M1)
      PT07W02A.PT07MO2Y1 = PT07W02A.PT07MO2Y1 + 1;
    end
    if (PT07W02A.PT07MO4M2 < PT07W02A.PT07MO4M1)
      PT07W02A.PT07MO4Y1 = PT07W02A.PT07MO4Y1 + 1;
    end
    PT07W02A.PT07MO2M1 = PT07W02A.PT07MO2M2;
    PT07W02A.PT07MO4M1 = PT07W02A.PT07MO4M2;
    PT07W02A.PT07MO1M2 = 1;
    PT07W02A.PT07MO2M2 = 1;
    PT07W02A.PT07MO3M2 = 1;
    PT07W02A.PT07MO4M2 = 1;

    if (PT07M002.FY-FCTY-CD[PT07WX1] == PT07M002.FY-FCTY-CD[PT07WIX])
      if ((PT07W02A.PT07MO1 >= 
      PT07W02A.PT07MO3 && 
      PT07W02A.PT07MO1 <= 
      PT07W02A.PT07MO4)
      
       || (PT07W02A.PT07MO3 >= 
      PT07W02A.PT07MO1 && 
      PT07W02A.PT07MO3 <= 
      PT07W02A.PT07MO2)
      )
        set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] cursor, bold;
        set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;

        converseLib.validationFailed(167); /* overlap po-id-mo range*/
        PT07W02D.PT07WSWF = "N";
        PT07W02D.PT07WSWR = "N";
      end
    end
    PT07W02D.PT07WX1 = PT07W02D.PT07WX1 + 1;
  end
end // end PT07-256

// Check for overlap po range
Function PT07-257()
   /* ********************************************************/
   /* check for overlap po-id-mo range*/
   /* ********************************************************/
     /* MOVE PT07WIX TO PT07WX1;*/
      /* PT07WX1 = PT07WX1 + 1;*/

  PT07WX1 = 1;
  while (PT07WX1 < PT07COUNT)
    PT07W02A.PT07MO1 = PT07W02C.PC-PO-ID-MO-RNG[PT07WX1];
    PT07W02A.PT07MO2 = PT07W02C.PC-PO-ID-MO-TO-RNG[PT07WX1];
    PT07W02A.PT07MO3 = PT07M002.PC-PO-ID-MO-RNG[PT07WIX];
    PT07W02A.PT07MO4 = PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX];
    if (PT07W02A.PT07MO2M2 < PT07W02A.PT07MO2M1)
      PT07W02A.PT07MO2Y1 = PT07W02A.PT07MO2Y1 + 1;
    end
    if (PT07W02A.PT07MO4M2 < PT07W02A.PT07MO4M1)
      PT07W02A.PT07MO4Y1 = PT07W02A.PT07MO4Y1 + 1;
    end
    PT07W02A.PT07MO2M1 = PT07W02A.PT07MO2M2;
    PT07W02A.PT07MO4M1 = PT07W02A.PT07MO4M2;
    PT07W02A.PT07MO1M2 = 1;
    PT07W02A.PT07MO2M2 = 1;
    PT07W02A.PT07MO3M2 = 1;
    PT07W02A.PT07MO4M2 = 1;

    if (PT07W02C.FY-FCTY-CD[PT07WX1] == PT07M002.FY-FCTY-CD[PT07WIX])
      if ((PT07W02A.PT07MO1 >= 
      PT07W02A.PT07MO3 && 
      PT07W02A.PT07MO1 <= 
      PT07W02A.PT07MO4)
      
       || (PT07W02A.PT07MO3 >= 
      PT07W02A.PT07MO1 && 
      PT07W02A.PT07MO3 <= 
      PT07W02A.PT07MO2)
      )
        set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] cursor, bold;
        set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;

        converseLib.validationFailed(167); /* overlap po-id-mo range*/
        PT07W02D.PT07WSWF = "N";
        PT07W02D.PT07WSWR = "N";
        exit stack;
      end
    end
    PT07W02D.PT07WX1 = PT07W02D.PT07WX1 + 1;
  end

  PT07WX1 = PT07WX1 + 1;

  while (PT07WX1 <= 39)
    PT07W02A.PT07MO1 = PT07W02C.PC-PO-ID-MO-RNG[PT07WX1];
    PT07W02A.PT07MO2 = PT07W02C.PC-PO-ID-MO-TO-RNG[PT07WX1];
    PT07W02A.PT07MO3 = PT07M002.PC-PO-ID-MO-RNG[PT07WIX];
    PT07W02A.PT07MO4 = PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX];
    if (PT07W02A.PT07MO2M2 < PT07W02A.PT07MO2M1)
      PT07W02A.PT07MO2Y1 = PT07W02A.PT07MO2Y1 + 1;
    end
    if (PT07W02A.PT07MO4M2 < PT07W02A.PT07MO4M1)
      PT07W02A.PT07MO4Y1 = PT07W02A.PT07MO4Y1 + 1;
    end
    PT07W02A.PT07MO2M1 = PT07W02A.PT07MO2M2;
    PT07W02A.PT07MO4M1 = PT07W02A.PT07MO4M2;
    PT07W02A.PT07MO1M2 = 1;
    PT07W02A.PT07MO2M2 = 1;
    PT07W02A.PT07MO3M2 = 1;
    PT07W02A.PT07MO4M2 = 1;

    if (PT07W02C.FY-FCTY-CD[PT07WX1] == PT07M002.FY-FCTY-CD[PT07WIX])
      if ((PT07W02A.PT07MO1 >= 
      PT07W02A.PT07MO3 && 
      PT07W02A.PT07MO1 <= 
      PT07W02A.PT07MO4)
      
       || (PT07W02A.PT07MO3 >= 
      PT07W02A.PT07MO1 && 
      PT07W02A.PT07MO3 <= 
      PT07W02A.PT07MO2)
      )
        set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] cursor, bold;
        set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;

        converseLib.validationFailed(167); /* overlap po-id-mo range*/
        PT07W02D.PT07WSWF = "N";
        PT07W02D.PT07WSWR = "N";
        exit stack;
      end
    end
    PT07W02D.PT07WX1 = PT07W02D.PT07WX1 + 1;
  end
end // end PT07-257

// Check Minimum rec in VFOFCT01
Function PT07-261()
   /* ----------------------------------------------------------------------*/
   /* PT07-261 PROCESS*/
   /* Verify if atleast 1 rec available in VFOFCT01*/
   /* ----------------------------------------------------------------------*/
  PT07W02A.PT07COUNT = 0;
  PT07-211(); /* Open Cursor VFOFCT01*/
  while (PT07W02D.PT07WSWC == "N" && PT07W02A.PT07COUNT <= 1)
    PT07-212(); /* Fetch Cursor VFOFCT01*/
    if (PT07W02D.PT07WSWC == "N")
      PT07W02A.PT07COUNT = PT07W02A.PT07COUNT + 1;
    end
  end
  PT07-214(); /* Close Cursor VFOFCT01*/
  if (PT07W02A.PT07COUNT > 1 || PT07W02A.PT07W-RE-CONFIRM == "Y")
  else
    converseLib.validationFailed(202);
    set PT07M002.PT07MSEL[PT07WIX] cursor, bold;
    set PT07M002.SY1STNBR[PT07WIX] bold;
    set PT07M002.SY2CLRID[PT07WIX] bold;
    set PT07M002.FY-FCTY-CD[PT07WIX] bold;
    set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] bold;
    set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;
    PT07W02D.PT07W-WAIT-CONFIRM = "Y";
    PT07W02A.PT07W-PF9-CONFIRM = "N";
  end

end // end PT07-261

// Delete VFORCD01
Function PT07-262()

   /* ------------------------------------------------------------*/
   /* DELETE FROM DMODEL.VFORCD01*/
   /* ------------------------------------------------------------*/
  set PT07W012 empty;
  PT07W012.TASK-CODE = "D ";

  try
    call "PT6300" (PT07W012, SQLCA, VFORCD01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* Not Found*/
      if (SQLCA.VAGen_SQLCODE == +100)
        converseLib.validationFailed(194);
      end
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "164"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(011); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(010); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
   /* SET PT07M001 PAGE;             /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFORCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFORCD01.VFORCD01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07-262

// Update VFORCD01
Function PT07-263()

   /* ------------------------------------------------------------*/
   /* Update in DMODEL.VFORCD01*/
   /* ------------------------------------------------------------*/
  set PT07W012 empty;
  PT07W012.TASK-CODE = "U ";

  try
    call "PT6300" (PT07W012, SQLCA, VFORCD01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == +0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "163"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(011); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(010); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFORCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFORCD01.VFORCD01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07-263

// Select exists vforcd01
Function PT07-264()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set VFORCD01 empty; /* Clear io-mod parms*/

  VFORCD01.SY1STNBR = PT07W01.SY1STNBR[PT07WIXM1]; /* style nbr*/
  VFORCD01.SY2CLRID = PT07W01.SY2CLRID[PT07WIXM1]; /* color cd*/
  VFORCD01.XDMCD = PT07W01.DIM-CD[PT07WIXM1]; /* dimension cd*/
  VFORCD01.XGPCD = "02";

   /* ------------------------------------------------------------*/
   /* Select VFORCD01.*/
   /* ------------------------------------------------------------*/
  set PT07W012 empty;
  PT07W012.TASK-CODE = "S ";

  try
    call "PT6300" (PT07W012, SQLCA, VFORCD01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* row not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "264"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(011); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(010); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFORCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFORCD01.VFORCD01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07-264

// Insert VFORCD01
Function PT07-265()
   /* ------------------------------------------------------------*/
   /* Insert DMODEL.VFORCD01.*/
   /* ------------------------------------------------------------*/
  set PT07W012 empty;
  PT07W012.TASK-CODE = "A ";

  try
    call "PT6300" (PT07W012, SQLCA, VFORCD01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "265"; /* Module identification*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/
      converseLib.validationFailed(011); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    end
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    converseLib.validationFailed(010); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  if (SQLCA.VAGen_SQLCODE == -803) /* duplicate record*/
    converseLib.validationFailed(147); /* Indicate duplicate*/
    return;
  end
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFORCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFORCD01.VFORCD01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07-265

// Get the Next Record
Function PT07-266()
   /* ----------------------------------------------------------------------*/
   /* PT07-266 PROCESS*/
   /* Get the Next Record from the Array W01 & W03 Passed from Map1 Process*/
   /* ----------------------------------------------------------------------*/
  PT07W02A.PT07WIXM1 = PT07W02A.PT07WIXM1 + 1;
  if (PT07W02A.PT07WIXM1 > 11)
    PT07W00.PT07WMAP = "1";
    PT07W02D.PT07WSWR = "Y"; /* Request for data switch*/
    PT07W02D.PT07WSWF = "Y"; /* Format map switch*/
    PT07W02D.PT07WBSW = "N"; /* Blank Page switch*/
    PT07267();
    exit stack;
  end
  while (PT07W03.TRANS-P-REC[PT07WIXM1] != "P")
    PT07W02A.PT07WIXM1 = PT07W02A.PT07WIXM1 + 1;
    if (PT07W02A.PT07WIXM1 > 11)
      PT07W00.PT07WMAP = "1";
      PT07W02D.PT07WSWR = "Y"; /* Request for data switch*/
      PT07W02D.PT07WSWF = "Y"; /* Format map switch*/
      PT07W02D.PT07WBSW = "N"; /* Blank Page switch*/
      PT07267();
      exit stack;
    end
  end
  if (PT07W02A.PT07WIXM1 <= 11)
    PT07W02D.PT07WBSW = "Y";
    PT07W02D.PT07WSWF = "Y";
    PT07W02D.PT07WSWR = "Y";
    PT07W02A.PT07WDAT = "N";
    PT07W02D.PT07WIX = 1;
    PT07S03(); /* Purge temporary storage*/
  end
  exit stack;
end // end PT07-266

// Format VFORCD01
Function PT07-267()
   /* ------------------------------------------------------------*/
   /* Format  VFORCD01*/
   /* ------------------------------------------------------------*/
  set VFORCD01 empty;
  VFORCD01.SY1STNBR = PT07W01.SY1STNBR[PT07WIXM1];
  VFORCD01.SY2CLRID = PT07W01.SY2CLRID[PT07WIXM1];
  VFORCD01.XDMCD = "00";
  VFORCD01.XGPCD = "02";
  VFORCD01.PT-RTA-SPEC-OFR-CD = PT07W01.RTA-SPEC-OFR-CD[PT07WIXM1];
  VFORCD01.PT-RTA-KEY-CD = PT07W01.RTA-KEY-CD[PT07WIXM1];
  VFORCD01.PT-RTA-BRAND-CD = PT07W01.RTA-BRAND-CD[PT07WIXM1];
  VFORCD01.PT-PROD-REL-DT = PT07W01.PROD-REL-DT[PT07WIXM1];
  VFORCD01.PC-DROPDEAD-RTA-DT = PT07W01.DROPDEAD-RTA-DT[PT07WIXM1];
        /* MOVE PT07W06.FIRST-OFFER-DT(PT07WIXM1) TO*/
             /* PT07W03.PT-FIRST-OFFER-DT;*/
  VFORCD01.XXX-USER-ID = COMMAREA.CAUSERID;
  VFORCD01.ZZ-CHNG-PGM-ID = "PT07";
  VFORCD01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
  VFORCD01.ZZ-CHNG-HHMM = 0;
  VFORCD01.ZZ-CHNG-CNT = PT07W01.CHNG-COUNT[PT07WIXM1];
  VFORCD01.PT-RTA-PRI-CD = PT07W01.RTA-PRI-CD[PT07WIXM1];
  VFORCD01.ZZ-SDT = PT07W01.SETUP-DATE[PT07WIXM1];

end // end PT07-267

// FORMAT PROCESSED FLAG, FOR PF3
Function PT07-268()
   /* ----------------------------------------------------------------------*/
   /* PT07-268 PROCESS*/
   /* FORMAT THE PROCESSED FLAG, WHEN PF3 IS PRESSED*/
   /* ----------------------------------------------------------------------*/
  PT07-211(); /* Open Cursor VFOFCT01*/
  PT07-212(); /* Fetch Cursor VFOFCT01*/
  if (PT07W02D.PT07WSWC == "N") /* IF End-of-Cursor = 'N'*/
    PT07W03.PROCESSED-FLAG[PT07WIXM1] = "Y";
    PT07W01.PT07WSEL[PT07WIXM1] = " ";
  else
    PT07W01.RTA-PRI-CD[PT07WIXM1] = " ";
    if (PT07W01.RTA-SPEC-OFR-CD[PT07WIXM1] == " " && 
    PT07W01.RTA-KEY-CD[PT07WIXM1] == " " && 
    PT07W01.RTA-BRAND-CD[PT07WIXM1] == " ")
      PT07W03.PROCESSED-FLAG[PT07WIXM1] = "S";
      PT07W01.PT07WSEL[PT07WIXM1] = " ";
    else
      PT07W03.PROCESSED-FLAG[PT07WIXM1] = "N";
    end
  end
  PT07-214(); /* Close Cursor VFOFCT01*/

end // end PT07-268

// Main process to display a map
Function PT07001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Get current date & time and max/min dates*/
   /* 2) If specified, display the first map.*/
   /* 3) Otherwise, if specified, display the second map.*/
   /* 4) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date and time*/
   /* check for century*/
  if (XX0XW01.XX0XWYY < 95) /**/
    XX0XW01.XX0XW19 = 20; /* it's probably the 21st century*/
  else
    XX0XW01.XX0XW19 = 19; /* it's probably the 20th century*/
  end

   /* ------------------------------------------------------------*/
   /* calculate minimum/maximum rta override dates.*/
   /* ------------------------------------------------------------*/
  PT07S02(); /* Obtain min/max dates*/

  if (PT07W00.PT07WMAP == "1") /* Map 1 was requested*/
    PT07100(); /* Display map 1*/
  else

    if (PT07W00.PT07WMAP == "2") /* Map 2 was requested*/
      PT07200(); /* Display map 2*/
    else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/
      PTWREC.XXXMODID = "001"; /* Module identification*/
      PTWREC.XXXMSGNO = 10; /* Unexpected error occurred*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = PT07W00.PT07WMAP; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "PT0M"; /* TO application*/
      XSPT001(); /* Exit to another application*/
      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    end
  end

end // end PT07001

// Obtain the data to display
Function PT07100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT07110(); /* Obtain the data to display*/

  PT07120(); /* Format and display the map*/

  PT07130(); /* Check attention identifier*/

  PT07140(); /* Reset fields to normal intensity*/

  PT07150(); /* Verify the entered data*/

  PT07160(); /* Process valid input request*/

end // end PT07100

// Obtain the data to display
Function PT07110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No error was found*/
   || converseVar.validationMsgNum == 01) /* or this is an update message*/
  else
    return; /* Return to previous process*/
  end

  if (PT07W00.PT07WSWR == "N" /* Data was not requested*/
   || PT07W00.PT07WBSW == "Y") /* or blank page format requested*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/
  PT07W00.XXXTSLEN = 759; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Establish the number of data lines per page.*/
   /* ------------------------------------------------------------*/
  PT07W00.PT07WLIN = 11; /* nbr of data lines per page*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  PT07S01(); /* Purge temporary storage*/

   /* ------------------------------------------------------------*/
   /* Obtain data for lines.*/
   /* ------------------------------------------------------------*/

  PT07111(); /* Open dmodel.vforcd01*/
  PT07W00.PT07WIXM = 1; /* Display line index*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (PT07W00.PT07WSWC == "N") /* Until end of cursor*/
    PT07112(); /* Fetch forcd01*/

    if (PT07W00.PT07WSWC == "N") /* If row was found*/
      /* ------------------------------------------------------------*/
       /* Save data in display storage.*/
      /* ------------------------------------------------------------*/
      PT07114(); /* Save data*/
      /* ------------------------------------------------------------*/
       /* If the page is full, add the page to the storage queue.*/
      /* ------------------------------------------------------------*/
      if (PT07W00.PT07WIXM > PT07W00.PT07WLIN) /* Page is full*/
        PT07115(); /* Add page to temporary storage*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for DMODEL.VFORCD01.*/
   /* ------------------------------------------------------------*/
  PT07116(); /* close dmodel.vforcd01*/

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  if (PT07W00.PT07WIXM > 1) /* Page was formatted*/
    PT07115(); /* Add page to temporary storage*/
    PT07W00.PT07WBSW = "N"; /* Blank page switch*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  if (PT07W00.TA5TSQIX == 0) /* No pages formatted*/
    PTWREC.XXXMODID = "110"; /* Module identification*/
    PTWREC.XXXMSGNO = 018; /* Indicate no data to display*/
    if (PT07W00.PT07WSSW != "Y") /* No security clearance*/
   /* Next sentence*/
    else
      PT07W00.XXXTSPAG = 0; /* Desired page number*/
      PT07W00.TA5TSQIX = 0; /* Highest page number*/
    end
  else
    /* ------------------------------------------------------------*/
     /* Data was found, check conditions for adding blank page.*/
    /* ------------------------------------------------------------*/
    PT07W00.XXXTSPAG = 1; /* Desired page number*/
    if (PT07W00.PT07WBSW == "Y" /* If blank page required*/
     && PT07W00.PT07WSSW == "Y") /* Security clearance*/
      PT07115(); /* Add page to temporary storage*/
    end
  end

  if (PT07W00.PT07W-SAVE-PAGE > 0) /* pa2 pressed and page number saved*/
    PT07W00.XXXTSPAG = PT07W00.PT07W-SAVE-PAGE;
    PT07W00.PT07W-SAVE-PAGE = 0; /* reset save-page*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PT07W00.PT07WSWR = "N"; /* Request for data switch*/


end // end PT07110

// Open VFORCD01
Function PT07111()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set PT07W011 empty; /* clear io-mod data record*/
   /* load W00 variables into W011 variables*/
  PT07W011.PT-RTA-SPEC-OFR-CD = PT07W00.PT07W-SPEC-OFFR-CD;
  PT07W011.PT-RTA-KEY-CD = PT07W00.PT07W-KEY-TYP-CD;
  PT07W011.PT-RTA-BRAND-CD = PT07W00.PT07W-BRAND-CD;
  PT07W011.PT-RTA-PRI-CD = PT07W00.PT07W-PRI-CD;

  PT07W011.XGPCD = PT07W00.XGPCD;
  PT07W011.SY1STNBR = PT07W00.PT07W-SY1STNBR;
  PT07W011.SY2CLRID = PT07W00.PT07W-SY2CLRID;
  PT07W011.XDMCD = "00";

  set PT07W012 empty; /* clear the task code*/

   /* Open cursor for VFORCD01 (select all from table) after*/
   /* setting the task code -------------------------------------*/

  if (PT07W00.PT07W-SY1STNBR != " ") /* if style is entered*/
    PT07W012.TASK-CODE = "S2"; /* set the task code to S2*/
  else
    if (PT07W00.PT07W-SPEC-OFFR-CD != "  "
     && PT07W00.PT07W-KEY-TYP-CD == "  "
     && PT07W00.PT07W-BRAND-CD == "  "
     && PT07W00.PT07W-PRI-CD == "  ") /* if spec offer cd ONLY entered*/
      PT07W012.TASK-CODE = "S6"; /* set the task code to S6*/
    else
      if (PT07W00.PT07W-KEY-TYP-CD != "  "
       && PT07W00.PT07W-SPEC-OFFR-CD == "  "
       && PT07W00.PT07W-BRAND-CD == "  "
       && PT07W00.PT07W-PRI-CD == "  ") /* if key typ cd ONLY entered*/
        PT07W012.TASK-CODE = "S4"; /* set the task code to S4*/
      else
        if (PT07W00.PT07W-BRAND-CD != "  "
         && PT07W00.PT07W-KEY-TYP-CD == "  "
         && PT07W00.PT07W-PRI-CD == "  "
         && PT07W00.PT07W-SPEC-OFFR-CD == "  ") /* if brand cd ONLY*/
          PT07W012.TASK-CODE = "S5"; /* set the task code to S5*/
        else
          if (PT07W00.PT07W-PRI-CD != "  "
           && PT07W00.PT07W-KEY-TYP-CD == "  "
           && PT07W00.PT07W-SPEC-OFFR-CD == "  "
           && PT07W00.PT07W-BRAND-CD == "  ") /* if pri cd ONLY*/
            PT07W012.TASK-CODE = "S3"; /* set the task code to S3*/
          else
            PT07W012.TASK-CODE = "SS"; /* set the task code to SS*/
          end
        end
      end
    end
  end

   /* Open cursor for VFORCD01 (select all from table)*/
   /* ------------------------------------------------*/
  try
    call "PT6300" (PT07W012, SQLCA, PT07W011) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    PT07W00.PT07WSWC = "N"; /* End of cursor switch*/
    PT07W00.PT07WDSW = "N"; /* Data found switch*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFORCD01"; /* Table view name*/
  VFORCD01.VFORCD01-GRP = PT07W011.PT07W3-FORCD-GRP;
  TA1REC.TA1TBLKE = VFORCD01.VFORCD01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07111

// Fetch VFORCD01
Function PT07112()
  set PT07W011 empty; /* clear IO mod*/
  set PT07W012 empty; /* clear task code*/

   /* fetch cursor for VFORCD01*/
   /* --------------------------*/

  if (PT07W00.PT07W-SY1STNBR != " ")
    PT07W012.TASK-CODE = "N2";
  else
    if (PT07W00.PT07W-SPEC-OFFR-CD != "  "
     && PT07W00.PT07W-KEY-TYP-CD == "  "
     && PT07W00.PT07W-BRAND-CD == "  "
     && PT07W00.PT07W-PRI-CD == "  ")
      PT07W012.TASK-CODE = "N6";
    else
      if (PT07W00.PT07W-KEY-TYP-CD != "  "
       && PT07W00.PT07W-SPEC-OFFR-CD == "  "
       && PT07W00.PT07W-BRAND-CD == "  "
       && PT07W00.PT07W-PRI-CD == "  ")
        PT07W012.TASK-CODE = "N4";
      else
        if (PT07W00.PT07W-BRAND-CD != "  "
         && PT07W00.PT07W-KEY-TYP-CD == "  "
         && PT07W00.PT07W-PRI-CD == "  "
         && PT07W00.PT07W-SPEC-OFFR-CD == "  ")
          PT07W012.TASK-CODE = "N5";
        else
          if (PT07W00.PT07W-PRI-CD != "  "
           && PT07W00.PT07W-KEY-TYP-CD == "  "
           && PT07W00.PT07W-SPEC-OFFR-CD == "  "
           && PT07W00.PT07W-BRAND-CD == "  ")
            PT07W012.TASK-CODE = "N3";
          else
            PT07W012.TASK-CODE = "SN";
          end
        end
      end
    end
  end

  try
    call "PT6300" (PT07W012, SQLCA, PT07W011) {isNoRefresh = yes, isExternal = yes};
  end
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* Row not found*/

      /* ------------------------------------------------------------*/
       /* If row found, set switch.*/
      /* ------------------------------------------------------------*/
      if (SQLCA.VAGen_SQLCODE == +0) /* Normal return code*/
        PT07W00.PT07WDSW = "Y"; /* Data found switch*/
      end

      /* ------------------------------------------------------------*/
       /* If end of selected set, indicate end of cursor.*/
      /* ------------------------------------------------------------*/
      if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
        PT07W00.PT07WSWC = "Y"; /* Indicate end of cursor*/
      end
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFORCD01"; /* Table view name*/
  VFORCD01.VFORCD01-GRP = PT07W011.PT07W3-FORCD-GRP;
  TA1REC.TA1TBLKE = VFORCD01.VFORCD01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07112

// Save data in display storage
Function PT07114()
   /* ------------------------------------------------------------*/
   /* If end of cursor, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (PT07W00.PT07WSWC == "Y") /* End of cursor*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  PT07W01.SY1STNBR[PT07WIXM] = PT07W011.SY1STNBR;
  PT07W01.SY2CLRID[PT07WIXM] = PT07W011.SY2CLRID;
  PT07W01.SY1SSTNM[PT07WIXM] = PT07W011.SY1SSTNM;
  PT07W01.SY2CLRAB[PT07WIXM] = PT07W011.SY2CLRAB;
  PT07W01.RTA-SPEC-OFR-CD[PT07WIXM] = PT07W011.PT-RTA-SPEC-OFR-CD;
  PT07W01.RTA-KEY-CD[PT07WIXM] = PT07W011.PT-RTA-KEY-CD;
  PT07W01.RTA-BRAND-CD[PT07WIXM] = PT07W011.PT-RTA-BRAND-CD;
  PT07W01.RTA-PRI-CD[PT07WIXM] = PT07W011.PT-RTA-PRI-CD;

  PT07W00.PT07W-WS-YYMMDD-FORMAT = 0;
  PT07W00.PT07W-WS-CCYYMMDD-FORMAT = PT07W011.PT-PROD-REL-DT;
  PT07W00.PT07W-WS-YY = PT07W00.PT07W-WS-YY-NUM;
  PT07W00.PT07W-WS-MM = PT07W00.PT07W-WS-MM-NUM;
  PT07W00.PT07W-WS-DD = PT07W00.PT07W-WS-DD-NUM;
  PT07W01.PROD-REL-DT[PT07WIXM] = PT07W00.PT07W-WS-YYMMDD-FORMAT;

  PT07W00.PT07W-WS-YYMMDD-FORMAT = 0;
  PT07W00.PT07W-WS-CCYYMMDD-FORMAT = PT07W011.PC-DROPDEAD-RTA-DT;
  PT07W00.PT07W-WS-YY = PT07W00.PT07W-WS-YY-NUM;
  PT07W00.PT07W-WS-MM = PT07W00.PT07W-WS-MM-NUM;
  PT07W00.PT07W-WS-DD = PT07W00.PT07W-WS-DD-NUM;
  PT07W01.DROPDEAD-RTA-DT[PT07WIXM] = PT07W00.PT07W-WS-YYMMDD-FORMAT;

  PT07W00.PT07W-WS-YYMMDD-FORMAT = 0;
  PT07W00.PT07W-WS-CCYYMMDD-FORMAT = PT07W011.SY-FUTR-OFFER-BDT;
  PT07W00.PT07W-WS-YY = PT07W00.PT07W-WS-YY-NUM;
  PT07W00.PT07W-WS-MM = PT07W00.PT07W-WS-MM-NUM;
  PT07W00.PT07W-WS-DD = PT07W00.PT07W-WS-DD-NUM;
  PT07W01.FIRST-OFFER-DT[PT07WIXM] = PT07W00.PT07W-WS-YYMMDD-FORMAT;

  PT07W01.CHNG-COUNT[PT07WIXM] = PT07W011.ZZ-CHNG-CNT;
  PT07W01.SETUP-DATE[PT07WIXM] = PT07W011.ZZ-SDT;
  PT07W01.DIM-CD[PT07WIXM] = PT07W011.XDMCD;

   /* ------------------------------------------------------------*/
   /* Add to line loop counter.*/
   /* ------------------------------------------------------------*/
  PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1; /* Increment line index*/

end // end PT07114

// Add page to temporary storage
Function PT07115()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PT07W01.XXXTSLEN = PT07W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PT07W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PT07W01 empty; /* M001 display storage*/
    PT07W00.PT07WIXM = 1; /* Display line index*/
    PT07W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PTWREC.XXXMODID = "115"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07115

// Close VFORCD01
Function PT07116()
   /* ------------------------------------------------------------*/
   /* Close VFORCD01*/
   /* ------------------------------------------------------------*/
  set PT07W011 empty;
  set PT07W012 empty;

  if (PT07W00.PT07W-SY1STNBR != " ")
    PT07W012.TASK-CODE = "C2";
  else
    if (PT07W00.PT07W-SPEC-OFFR-CD != "  "
     && PT07W00.PT07W-KEY-TYP-CD == "  "
     && PT07W00.PT07W-BRAND-CD == "  "
     && PT07W00.PT07W-PRI-CD == "  ")
      PT07W012.TASK-CODE = "C6";
    else
      if (PT07W00.PT07W-KEY-TYP-CD != "  "
       && PT07W00.PT07W-SPEC-OFFR-CD == "  "
       && PT07W00.PT07W-BRAND-CD == "  "
       && PT07W00.PT07W-PRI-CD == "  ")
        PT07W012.TASK-CODE = "C4";
      else
        if (PT07W00.PT07W-BRAND-CD != "  "
         && PT07W00.PT07W-KEY-TYP-CD == "  "
         && PT07W00.PT07W-PRI-CD == "  "
         && PT07W00.PT07W-SPEC-OFFR-CD == "  ")
          PT07W012.TASK-CODE = "C5";
        else
          if (PT07W00.PT07W-PRI-CD != "  "
           && PT07W00.PT07W-KEY-TYP-CD == "  "
           && PT07W00.PT07W-SPEC-OFFR-CD == "  "
           && PT07W00.PT07W-BRAND-CD == "  ")
            PT07W012.TASK-CODE = "C3";
          else
            PT07W012.TASK-CODE = "CS";
          end
        end
      end
    end
  end

  try
    call "PT6300" (PT07W012, SQLCA, PT07W011) {isNoRefresh = yes, isExternal = yes};
  end

   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "116"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFORCD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07116

// Format and converse the map
Function PT07120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    if (converseVar.validationMsgNum == 01) /* update successful*/
      converseLib.validationFailed(0);
    end
  end

   /* ------------------------------------------------------------*/
   /* If user had update authority, display option and PF fields.*/
   /* Otherwise, darken option and PF fields.*/
   /* ------------------------------------------------------------*/
   /*  */
  PT07123(); /* reset the attributes if any error found*/
   /*  */
   /* ------------------------------------------------------------*/
   /* If blank screen for data entry requested:*/
   /* ------------------------------------------------------------*/
  if (PT07W00.PT07WBSW == "Y" /* If blank map was requested*/
   && converseVar.validationMsgNum == 0) /* and no error found*/
    if (PT07W00.PT07WSSW == "Y") /* if users has security clearance*/
      PT07122(); /* Format a blank map*/
    end
  else
    /* ------------------------------------------------------------*/
    /* If data requested or no error, format the data to display.*/
    /* ------------------------------------------------------------*/
    if (PT07W00.PT07WSWR == "Y" /* If data was requested*/
     || converseVar.validationMsgNum == 0) /* or no error found*/
      if (PT07W00.PT07WSWF == "Y") /* Map must be formatted*/
        PT07121(); /* Format the data on the map*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  PT07M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PT07M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PT07M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  if (PTWREC.XXXMSGNO != 0) /* Message to display*/
    PT07M001.XXXMODID = PTWREC.XXXMODID; /* Module identification*/
    if (PTWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PTWREC.XXXMSGNO);
    end /* Message number*/
    set PT07M001 alarm; /* Indicate sound alarm*/
  end

  converse PT07M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  PTWREC.XXXMSGNO = 0; /* Message number*/
  converseLib.validationFailed(0); /* Message number*/

  COMMAREA.CATOAP = PT07M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PT07M001.CAITEM; /* Application data*/

end // end PT07120

// Format the display data
Function PT07121()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  set PT07M001 initial; /* M001 input/output area*/
  PT07W00.PT07WSWF = "N"; /* Format the map switch*/

  if (PT07W00.PT07WSSW != "Y") /* user has no update authority*/
    set PT07M001.PT07M1-STY-NBR cursor, normal; /* position the cursor*/
  end
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  if (PT07W00.TA5TSQIX > 0 /* Pages were formatted*/
   && PT07W00.PT07WDSW == "Y") /* and data was found*/
    if (PT07W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      /* ------------------------------------------------------------*/
       /* If the desired page number is less or equal the highest*/
       /* page in storage, obtain temporary storage.*/
      /* ------------------------------------------------------------*/
      if (PT07W00.XXXTSPAG > PT07W00.TA5TSQIX) /* Desired greater highest*/
        PT07W00.XXXTSPAG = PT07W00.TA5TSQIX;
      else
        if (PT07W00.XXXTSPAG < 1) /* Desired less than lowest*/
          PT07W00.XXXTSPAG = 1;
        end
      end


   /* IF PT07W00.PT07W-SAVE-XXXTSPAG <= PT07W00.TA5TSQIX;*/
   /* ;*/
   /* IF PT07W00.XXXTSPAG = 1*/
   /* AND PT07W00.PT07W-SAVE-XXXTSPAG > 1;*/
   /* MOVE PT07W00.PT07W-SAVE-XXXTSPAG TO PT07W00.XXXTSPAG;*/
   /* END;*/
   /* ;*/
   /* END;*/


      PT07124(); /* Obtain temporary storage page*/

      PT07W00.PT07W-SAVE-XXXTSPAG = PT07W00.XXXTSPAG;

    end
    /* ------------------------------------------------------------*/
     /* Format the page information on the screen.*/
    /* ------------------------------------------------------------*/
    PT07M001.XXXTSPAG = PT07W00.XXXTSPAG; /* Current page*/
    PT07M001.TA5TSQIX = PT07W00.TA5TSQIX; /* Highest page*/
  end

   /* ------------------------------------------------------------*/
   /* Load the styles from VFORCD01 (stored in W01) to screen.*/
   /* ------------------------------------------------------------*/
  PT07W00.PT07WIXM = 1; /* Initialize line index*/
  set PT07M001.PT07M1CHG protect;

  while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN) /* Until screen is full*/
    set PT07M001.SY1SSTNM[PT07WIXM] initialAttributes; /* defined*/
    set PT07M001.SY2CLRAB[PT07WIXM] initialAttributes; /* defined*/

    PT07125(); /* load the styles from W01 to M001*/
    if (PT07W00.PT07WSSW == "Y") /* and security exists*/
      if (PT07M001.SY1STNBR[PT07WIXM] > " ") /* something entered*/
        set PT07M001.PT07M1-SEL[PT07WIXM] normal;
        set PT07M001.SY1STNBR[PT07WIXM] protect; /* protect*/
        set PT07M001.SY2CLRID[PT07WIXM] protect; /* protect*/
        set PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] normal;
        set PT07M001.RTA-KEY-CD[PT07WIXM] normal;
        set PT07M001.RTA-BRAND-CD[PT07WIXM] normal;
        set PT07M001.RTA-PRI-CD[PT07WIXM] normal;
        set PT07M001.PROD-REL-DT[PT07WIXM] normal;
        set PT07M001.DROPDEAD-RTA-DT[PT07WIXM] normal;
      else
        set PT07M001.PT07M1-SEL[PT07WIXM] protect;
        set PT07M001.SY1STNBR[PT07WIXM] protect; /* protect*/
        set PT07M001.SY2CLRID[PT07WIXM] protect; /* protect*/
        set PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] protect;
        set PT07M001.RTA-KEY-CD[PT07WIXM] protect;
        set PT07M001.RTA-BRAND-CD[PT07WIXM] protect;
        set PT07M001.RTA-PRI-CD[PT07WIXM] protect;
        set PT07M001.PROD-REL-DT[PT07WIXM] protect;
        set PT07M001.DROPDEAD-RTA-DT[PT07WIXM] protect;
      end
      PT07126(); /* protect already processed rows in map 2*/
    else
   /* SET PT07M001.PT07M1-SEL(PT07WIXM) DARK,PROTECT;/* hide select field*/
      if (PT07M001.SY1STNBR[PT07WIXM] > " ") /* something retrieved*/
        set PT07M001.PT07M1-SEL[PT07WIXM] initialAttributes;
      else
        set PT07M001.PT07M1-SEL[PT07WIXM] invisible, protect;
      end
      set PT07M001.SY1STNBR[PT07WIXM] protect; /* make unenterable*/
      set PT07M001.SY2CLRID[PT07WIXM] protect; /**/

      set PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] protect;
      set PT07M001.RTA-KEY-CD[PT07WIXM] protect;
      set PT07M001.RTA-BRAND-CD[PT07WIXM] protect;
      set PT07M001.RTA-PRI-CD[PT07WIXM] protect;
      set PT07M001.PROD-REL-DT[PT07WIXM] protect;
      set PT07M001.DROPDEAD-RTA-DT[PT07WIXM] protect;

    end
    PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1; /* Increment line index*/

  end

  if (PT07W00.PT07WSSW == "Y") /* if the security is cleared*/
    set PT07M001.PT07MPFS initialAttributes; /* show all the allowed PF keys*/
  else
    set PT07M001.PT07MPFS invisible, protect; /* show only the required PF keys*/
  end

  PT07127(); /* set up the remaining attributes*/

  if (PT07M001.SY1STNBR[1] == " ") /* if the first displayed style is empty*/
    converseLib.validationFailed(42); /* no entries found message*/
  end

  if (PT07W00.PT07W-FIRST-TIME == "Y") /* first time thru pgm*/
    PT07W00.PT07W-FIRST-TIME = "N"; /* set to 'n'o*/
    set PT07M001.PT07M1-STY-NBR normal, cursor;
  end

end // end PT07121

// Format a blank map
Function PT07122()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  set PT07M001 initial; /* M001 input/output area*/

  PT07W00.PT07W-SAVE-XXXTSPAG = 1; /* Set save page = 1*/

   /* ------------------------------------------------------------*/
   /* set enterable fields defined:*/
   /* ------------------------------------------------------------*/
  PT07W00.PT07WIXM = 1; /* Initialize line index*/

  set PT07M001.PT07M1-STY-NBR initialAttributes;
  set PT07M001.PT07M1-SY-COLR-CD-ID initialAttributes;
  set PT07M001.PT07M1-SPEC-OFFR-CD initialAttributes;
  set PT07M001.PT07M1-KEY-TYP-CD initialAttributes;
  set PT07M001.PT07M1-BRAND-CD initialAttributes;
  set PT07M001.PT07M1-PRI-CD initialAttributes;

  while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN) /* Until screen is full*/
    set PT07M001.PT07M1-SEL[PT07WIXM] initialAttributes; /**/
    set PT07M001.SY1STNBR[PT07WIXM] initialAttributes; /**/
    set PT07M001.SY2CLRID[PT07WIXM] initialAttributes; /**/

    set PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] initialAttributes;
    set PT07M001.RTA-KEY-CD[PT07WIXM] initialAttributes;
    set PT07M001.RTA-BRAND-CD[PT07WIXM] initialAttributes;
    set PT07M001.RTA-PRI-CD[PT07WIXM] initialAttributes;

    set PT07M001.PROD-REL-DT[PT07WIXM] initialAttributes;
    set PT07M001.DROPDEAD-RTA-DT[PT07WIXM] initialAttributes;

    PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1; /* Increment line index*/
  end

  set PT07M001.PT07M1-SEL[1] cursor; /* set the cursor in first sel code*/
  set PT07M001.PT07M1CHG invisible, protect; /* dark the Chg/Del lit in map 1*/

end // end PT07122

// Reset attributes-if any error
Function PT07123()

  if (PT07W00.PT07WSWR == "N" && PT07W00.PT07WSWF == "N")
   /* next sentence*/
  else
    return;
  end

  if (PT07W00.PT07WSSW == "Y") /* If user has update authority*/
    set PT07M001.PT07MPFS initialAttributes; /* define the pf keys*/
    if (PT07W00.PT07W-PF5-PRESSED == "N") /* if PF5 is not pressed*/
      set PT07M001.PT07M1CHG protect;
      PT07W00.PT07WIXM = 1;
      while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN) /* data lines per map*/
        set PT07M001.SY1STNBR[PT07WIXM] protect; /* protect style*/
        set PT07M001.SY2CLRID[PT07WIXM] protect; /* protect color*/
        if (PT07M001.SY1STNBR[PT07WIXM] == " ") /* if there are no entries*/
          set PT07M001.PT07M1-SEL[PT07WIXM] protect; /* protect*/
          set PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] protect; /* protect*/
          set PT07M001.RTA-KEY-CD[PT07WIXM] protect; /* protect*/
          set PT07M001.RTA-BRAND-CD[PT07WIXM] protect; /* protect*/
          set PT07M001.RTA-PRI-CD[PT07WIXM] protect; /* protect*/
          set PT07M001.PROD-REL-DT[PT07WIXM] protect; /* protect*/
          set PT07M001.DROPDEAD-RTA-DT[PT07WIXM] protect; /* protect*/
        end
        PT07126(); /* protect already processed rows in map 2*/
        PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1; /* increment line count*/
      end
    else /* if PF5 is pressed*/
      set PT07M001.PT07M1CHG invisible, protect; /* dark the chg/del lit in map1*/
      set PT07M001.PT07M1-STY-NBR initialAttributes; /* define the enterable fields*/
      set PT07M001.PT07M1-SY-COLR-CD-ID initialAttributes;
      set PT07M001.PT07M1-SPEC-OFFR-CD initialAttributes;
      set PT07M001.PT07M1-KEY-TYP-CD initialAttributes;
      set PT07M001.PT07M1-BRAND-CD initialAttributes;
      set PT07M001.PT07M1-PRI-CD initialAttributes;
    end
  else /* if security is not cleared*/
    set PT07M001.PT07M1CHG protect;
    set PT07M001.PT07MPFS invisible, protect; /* show only selected PF keys*/
    PT07W00.PT07WIXM = 1; /* initialize line count*/
    while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN) /* data lines per map*/
   /* SET PT07M001.PT07M1-SEL(PT07WIXM) DARK,PROTECT;/* hide select field*/
      if (PT07M001.SY1STNBR[PT07WIXM] > " ") /* something retrieved*/
        set PT07M001.PT07M1-SEL[PT07WIXM] initialAttributes;
      else
        set PT07M001.PT07M1-SEL[PT07WIXM] invisible, protect;
      end
      set PT07M001.SY1STNBR[PT07WIXM] protect;
      set PT07M001.SY2CLRID[PT07WIXM] protect;
      set PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] protect;
      set PT07M001.RTA-KEY-CD[PT07WIXM] protect;
      set PT07M001.RTA-BRAND-CD[PT07WIXM] protect;
      set PT07M001.RTA-PRI-CD[PT07WIXM] protect;
      set PT07M001.PROD-REL-DT[PT07WIXM] protect;
      set PT07M001.DROPDEAD-RTA-DT[PT07WIXM] protect;
      PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1; /* increment line count*/
    end
  end

end // end PT07123

// Obtain TSQ Record
Function PT07124()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PT07W01.XXXTSLEN = PT07W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PT07W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PT07W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PTWREC.XXXMODID = "121"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07124

// load from W01 to M001
Function PT07125()
   /* load from W01 variables to M001 variables*/

  if (PT07W01.SY1STNBR[PT07WIXM] != " ") /* if W01 style exist, load M001*/
    PT07M001.PT07M1-SEL[PT07WIXM] = PT07W01.PT07WSEL[PT07WIXM];
    PT07M001.SY1STNBR[PT07WIXM] = PT07W01.SY1STNBR[PT07WIXM];
    PT07M001.SY2CLRID[PT07WIXM] = PT07W01.SY2CLRID[PT07WIXM];

    PT07M001.SY1SSTNM[PT07WIXM] = PT07W01.SY1SSTNM[PT07WIXM];
    PT07M001.SY2CLRAB[PT07WIXM] = PT07W01.SY2CLRAB[PT07WIXM];

    PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] = PT07W01.RTA-SPEC-OFR-CD[PT07WIXM];
    PT07M001.RTA-KEY-CD[PT07WIXM] = PT07W01.RTA-KEY-CD[PT07WIXM];
    PT07M001.RTA-BRAND-CD[PT07WIXM] = PT07W01.RTA-BRAND-CD[PT07WIXM];
    PT07M001.RTA-PRI-CD[PT07WIXM] = PT07W01.RTA-PRI-CD[PT07WIXM];

    /* if W01 dates exist, then only load them to M001 dates.*/
    /* this check is coded to show M001 dates spaces when W01 dates*/
    /* are zero. (M001 dates are coded as numeric)*/

    if (PT07W01.FIRST-OFFER-DT[PT07WIXM] != 0)
      PT07M001.FIRST-OFFER-DT[PT07WIXM] = PT07W01.FIRST-OFFER-DT[PT07WIXM];
    end

    if (PT07W01.PROD-REL-DT[PT07WIXM] != 0)
      PT07M001.PROD-REL-DT[PT07WIXM] = PT07W01.PROD-REL-DT[PT07WIXM];
    end

    if (PT07W01.DROPDEAD-RTA-DT[PT07WIXM] != 0)
      PT07M001.DROPDEAD-RTA-DT[PT07WIXM] = PT07W01.DROPDEAD-RTA-DT[PT07WIXM];
    end
  end

end // end PT07125

// protect already processed rows
Function PT07126()
   /* if the processed flag is 'Y' (processed) or 'S'(skipped)*/
   /* then, protect that row in map 1*/

  if (PT07W03.PROCESSED-FLAG[PT07WIXM] == "Y" || 
  PT07W03.PROCESSED-FLAG[PT07WIXM] == "S")
    set PT07M001.PT07M1-SEL[PT07WIXM] protect;
    set PT07M001.SY1STNBR[PT07WIXM] protect; /* protect*/
    set PT07M001.SY2CLRID[PT07WIXM] protect; /* protect*/
    set PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] protect;
    set PT07M001.RTA-KEY-CD[PT07WIXM] protect;
    set PT07M001.RTA-BRAND-CD[PT07WIXM] protect;
    set PT07M001.RTA-PRI-CD[PT07WIXM] protect;
    set PT07M001.PROD-REL-DT[PT07WIXM] protect;
    set PT07M001.DROPDEAD-RTA-DT[PT07WIXM] protect;
  end

end // end PT07126

// set up the remaining attr
Function PT07127()
   /* load W00 variables to M001 variables*/

  PT07M001.PT07M1-SPEC-OFFR-CD = PT07W00.PT07W-SPEC-OFFR-CD;
  PT07M001.PT07M1-KEY-TYP-CD = PT07W00.PT07W-KEY-TYP-CD;
  PT07M001.PT07M1-BRAND-CD = PT07W00.PT07W-BRAND-CD;
  PT07M001.PT07M1-PRI-CD = PT07W00.PT07W-PRI-CD;

  if (PT07W00.PT07W-SY1STNBR != " ") /* after the retrieval, space out*/
    PT07W00.PT07W-SY1STNBR = " "; /* style &*/
    PT07M001.PT07M1-STY-NBR = " ";
    PT07M001.PT07M1-SY-COLR-CD-ID = " "; /* color*/
    PT07W00.PT07W-SY2CLRID = " ";
  else
    PT07M001.PT07M1-STY-NBR = PT07W00.PT07W-SY1STNBR;
    PT07M001.PT07M1-SY-COLR-CD-ID = PT07W00.PT07W-SY2CLRID;
  end


  set PT07M001.PT07M1-SPEC-OFFR-CD normal;
  set PT07M001.PT07M1-KEY-TYP-CD normal;
  set PT07M001.PT07M1-BRAND-CD normal;
  set PT07M001.PT07M1-PRI-CD normal;
  set PT07M001.PT07M1-STY-NBR normal;
  set PT07M001.PT07M1-SY-COLR-CD-ID normal;

end // end PT07127

// Check attention identifier
Function PT07130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    PT07W00.PT07W-WAIT-CONFIRM = "N"; /* turn off data verified*/
    PT07W00.PT07W-WAIT-PF17 = "N"; /* turn off the wait for PF17*/
    PT07W00.PT07W-PF5-PRESSED = "N"; /* turn off PF5 pressed sw*/
    set PT07W03 empty;
    if (PT07W00.PT07WSWR == "Y") /* Request for data*/
      set PT07W01 empty; /* M001 display storage*/
    end

    PT07W00.PT07W-SAVE-PAGE = PT07W00.XXXTSPAG; /* save page no*/

    PT07W00.PT07WSWF = "Y"; /* Format the map switch*/
    PT07W00.PT07WSWR = "Y"; /* Request for data switch*/

    if (PT07W00.PT07W-SY1STNBR == " " && 
    PT07W00.PT07W-SY2CLRID == " " && 
    PT07W00.PT07W-SPEC-OFFR-CD == " " && 
    PT07W00.PT07W-KEY-TYP-CD == " " && 
    PT07W00.PT07W-BRAND-CD == " " && 
    PT07W00.PT07W-PRI-CD == " ") /* if inquirable fields are spaces*/
      PT07W00.PT07W-SPEC-OFFR-CD = "* "; /* then, reset to **/
      PT07W00.PT07W-KEY-TYP-CD = "* ";
      PT07W00.PT07W-BRAND-CD = "* ";
      PT07W00.PT07W-PRI-CD = "* ";
    end

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  if (PT07M001.CATOAP > " ") /* FAST PATH was requested*/
    PT07S01(); /* Purge temporary storage*/
    XSPT001(); /* Exit to another application*/
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
  )                              
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PT07M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      PT07S01(); /* Purge temporary storage*/
      COMMAREA.CATOAP = "PT0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf4) /* PF3 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end

    XSPT001(); /* Exit to another application*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5   /* and PF5 was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf9   /* and PF9 was not pressed*/
   && converseVar.eventKey not pf15  /* and PF15 was not pressed*/
   && converseVar.eventKey not pf17) /* and PF17 was not pressed*/

    PTWREC.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(004); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If PF5, PF9 or PF15 pressed and user does not have update*/
   /* authority, display an error message to the user that*/
   /* the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  if (PT07W00.PT07WSSW == "N") /* User has no update authority*/
    if (converseVar.eventKey is pf5 /* if PF5 was pressed*/
     || converseVar.eventKey is pf9 /* or PF9 was pressed*/
     || converseVar.eventKey is pf15) /* or PF15 was pressed*/
   /* OR EZEAID IS PF17;           /* or PF17 was pressed*/

      PTWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(004); /* Indicate invalid attention key*/

      if (converseVar.eventKey is pakey) /* PA key was pressed*/
        converseLib.clearScreen();
         /* Clear screen before display*/
      end

      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If Update switch is on and neither PF17(to complete update)*/
   /* nor PA2 (to cancel) was pressed, give message that PF17 or*/
   /* PA2 required.*/
   /* ------------------------------------------------------------*/
  if (PT07W00.PT07W-WAIT-PF17 == "Y") /* data verified, waiting for update*/
    if (converseVar.eventKey is pf17 /* if PF9 was pressed*/
     || converseVar.eventKey is pa2) /* or PA2 was pressed*/
      if (converseVar.eventKey is pa2) /* PA2 was pressed*/
        PT07W00.PT07W-WAIT-PF17 = "N";
        PT07W00.PT07W-WAIT-CONFIRM = "N";
      end
      return;
    else

      if (converseVar.eventKey is pf5  /* if PF5 was pressed*/
       || converseVar.eventKey is pf7  /* if PF7 was pressed*/
       || converseVar.eventKey is pf8  /* if PF8 was pressed*/
       || converseVar.eventKey is pf15 /* if PF15 was pressed*/
       || converseVar.eventKey is pf9) /* if PF9 was pressed*/
        PTWREC.XXXMODID = "130"; /* Module identification*/
        converseLib.validationFailed(198); /* Indicate must PF17 or PA2*/

        if (converseVar.eventKey is pakey) /* PA key was pressed*/
          converseLib.clearScreen();
           /* Clear screen before display*/
        end

        exit stack; /* Exit to display map*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If Update switch is on and neither PF9 (to complete update)*/
   /* nor PA2 (to cancel) was pressed, give message that PF9 or*/
   /* PA2 required.*/
   /* ------------------------------------------------------------*/
  if (PT07W00.PT07W-WAIT-CONFIRM == "Y") /* data verified, waiting for update*/
    if (converseVar.eventKey is pf9 /* if PF9 was pressed*/
     || converseVar.eventKey is pa2) /* or PA2 was pressed*/
      if (converseVar.eventKey is pa2) /* PA2 was pressed*/
        PT07W00.PT07W-WAIT-CONFIRM = "N"; /**/
      end

    else

      if (converseVar.eventKey is pf5  /* if PF5 was pressed*/
       || converseVar.eventKey is pf7  /* if PF7 was pressed*/
       || converseVar.eventKey is pf8  /* if PF8 was pressed*/
       || converseVar.eventKey is pf15 /* if PF15 was pressed*/
       || converseVar.eventKey is pf17) /* if PF17 was pressed*/
        PTWREC.XXXMODID = "130"; /* Module identification*/
        converseLib.validationFailed(136); /* Indicate must PF9 or PA2*/

        if (converseVar.eventKey is pakey) /* PA key was pressed*/
          converseLib.clearScreen();
           /* Clear screen before display*/
        end

        exit stack; /* Exit to display map*/
      end
    end
  end

end // end PT07130

// Reset highlighted fields
Function PT07140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  PT07W00.PT07WIXM = 1; /* Initialize line index*/

  while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN) /* Until end of lines*/
    set PT07M001.SY1SSTNM[PT07WIXM] initialAttributes;
    set PT07M001.SY2CLRAB[PT07WIXM] initialAttributes;
    if (PT07W00.PT07WSSW == "Y") /* and security clearance*/
      set PT07M001.PT07M1-SEL[PT07WIXM] normal; /* Reset select flag*/
      set PT07M001.SY1STNBR[PT07WIXM] normal; /* Reset field*/
      set PT07M001.SY2CLRID[PT07WIXM] normal; /* Reset field*/
      set PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] normal;
      set PT07M001.RTA-KEY-CD[PT07WIXM] normal;
      set PT07M001.RTA-BRAND-CD[PT07WIXM] normal;
      set PT07M001.RTA-PRI-CD[PT07WIXM] normal;
      set PT07M001.PROD-REL-DT[PT07WIXM] normal;
      set PT07M001.DROPDEAD-RTA-DT[PT07WIXM] normal;
    end

    PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1; /* Increment line index*/
  end

  set PT07M001.PT07M1-SPEC-OFFR-CD normal; /* Reset field*/
  set PT07M001.PT07M1-KEY-TYP-CD normal; /* Reset field*/
  set PT07M001.PT07M1-BRAND-CD normal; /* Reset field*/
  set PT07M001.PT07M1-PRI-CD normal; /* Reset field*/
  set PT07M001.PT07M1CHG normal; /* Reset field*/

  converseLib.validationFailed(0);
  PTWREC.XXXMSGNO = 0;

  set PT07M001.CATOAP initialAttributes; /* TO application*/
  set PT07M001.CAITEM initialAttributes; /* Application data*/

  PT07141(); /* check for any pop-up window requested*/

end // end PT07140

// Search for ? entered
Function PT07141()
  if (converseVar.eventKey is pf3)
    return;
  end

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PT07M001.PT07M1-SPEC-OFFR-CD == "?" /* spec offer cd list requested*/
   || PT07M001.PT07M1-KEY-TYP-CD == "?"   /* key typ cd list requested*/
   || PT07M001.PT07M1-BRAND-CD == "?"     /* or brand cd list requested*/
   || PT07M001.PT07M1-PRI-CD == "?")      /* or pri cd ist requested*/
    if (converseVar.eventKey is enter /* ENTER was not pressed*/
    )                                 /* next sentence*/
    else
      PTWREC.XXXMODID = "141";
      converseLib.validationFailed(004); /* Indicate PF key not valid*/
      return; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of spec offer codes.*/
   /* ------------------------------------------------------------*/

  if (PT07M001.PT07M1-SPEC-OFFR-CD == "?") /* Spec offer cd lst request*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  SPEC OFFER CODE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      PT07142(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PT07M001.PT07M1-SPEC-OFFR-CD = " "; /* clear code*/
    else
      PT07M001.PT07M1-SPEC-OFFR-CD = PT07T02.OVRDCD[XX0XWPIX];
    end
    set PT07M001.PT07M1-SPEC-OFFR-CD cursor;
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of key type codes.*/
   /* ------------------------------------------------------------*/

  if (PT07M001.PT07M1-KEY-TYP-CD == "?") /* Key type code lst requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  KEY TYPE CODE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      PT07143(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PT07M001.PT07M1-KEY-TYP-CD = " "; /* clear code*/
    else
      PT07M001.PT07M1-KEY-TYP-CD = PT07T03.OVRDCD[XX0XWPIX];
    end
    set PT07M001.PT07M1-KEY-TYP-CD cursor;
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of brand type codes.*/
   /* ------------------------------------------------------------*/

  if (PT07M001.PT07M1-BRAND-CD == "?") /* brand code list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  BRAND CODE   "; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      PT07144(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PT07M001.PT07M1-BRAND-CD = " "; /* clear code*/
    else
      PT07M001.PT07M1-BRAND-CD = PT07T04.OVRDCD[XX0XWPIX];
    end
    set PT07M001.PT07M1-BRAND-CD cursor;
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of priority codes*/
   /* ------------------------------------------------------------*/

  if (PT07M001.PT07M1-PRI-CD == "?") /* brand code list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  PRIORITY CODE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      PT07145(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PT07M001.PT07M1-PRI-CD = " "; /* clear code*/
    else
      PT07M001.PT07M1-PRI-CD = PT07T05.OVRDCD[XX0XWPIX];
    end
    set PT07M001.PT07M1-PRI-CD cursor;
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

   /* MOVE '141' TO PTWREC.XXXMODID;*/
   /* MOVE 04 TO EZEMNO;               /* Indicate press ENTER*/

end // end PT07141

// converse pop up window
Function PT07142()
   /* ------------------------------------------------------------*/



              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = " SELECT & ENTER ";
    XX0XM001.XX0XMTR2 = " PF7:BACK  PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && PT07T02.OVRDCD[XX0XWCT1] != "99") /* Or end of data*/
        if (PT07T02.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = PT07T02.OVRDCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = PT07T02.OVRDNAME[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
   /* SET XX0XM001.XX0XMSEL(XX0XWCT2) NORMAL; /* Set selects to normal*/
   /* MOVE 'S' TO XX0XM001.XX0XMSEL(1);*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (PT07T02.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = PT07T02.OVRDCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = PT07T02.OVRDNAME[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && PT07T02.OVRDCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* chk for sel*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end PT07142

// converse pop up window
Function PT07143()
   /* ------------------------------------------------------------*/



              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = " SELECT & ENTER ";
    XX0XM001.XX0XMTR2 = " PF7:BACK  PF8:FRWD";
   /* OVE '              SELECT & ENTER          ' TO XX0XM001.XX0XMTR1;*/
   /* OVE '   PF7:BACK                   PF8:FRWD' TO XX0XM001.XX0XMTR2;*/

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && PT07T03.OVRDCD[XX0XWCT1] != "99") /* Or end of data*/
        if (PT07T03.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = PT07T03.OVRDCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = PT07T03.OVRDNAME[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
   /* SET XX0XM001.XX0XMSEL(XX0XWCT2) NORMAL; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (PT07T03.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = PT07T03.OVRDCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = PT07T03.OVRDNAME[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] initialAttributes;
   /* SET XX0XM001.XX0XMSEL(XX0XWCT2) NORMAL; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && PT07T03.OVRDCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end PT07143

// converse pop up window
Function PT07144()
   /* ------------------------------------------------------------*/



              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = " SELECT & ENTER ";
    XX0XM001.XX0XMTR2 = " PF7:BACK  PF8:FRWD";
   /* OVE '              SELECT & ENTER          ' TO XX0XM001.XX0XMTR1;*/
   /* OVE '   PF7:BACK                   PF8:FRWD' TO XX0XM001.XX0XMTR2;*/

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && PT07T04.OVRDCD[XX0XWCT1] != "99") /* Or end of data*/
        if (PT07T04.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = PT07T04.OVRDCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = PT07T04.OVRDNAME[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (PT07T04.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = PT07T04.OVRDCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = PT07T04.OVRDNAME[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && PT07T04.OVRDCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end PT07144

// converse pop up window
Function PT07145()
   /* ------------------------------------------------------------*/



              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = " SELECT & ENTER ";
    XX0XM001.XX0XMTR2 = " PF7:BACK  PF8:FRWD";
   /* OVE '              SELECT & ENTER          ' TO XX0XM001.XX0XMTR1;*/
   /* OVE '   PF7:BACK                   PF8:FRWD' TO XX0XM001.XX0XMTR2;*/

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && PT07T05.OVRDCD[XX0XWCT1] != "99") /* Or end of data*/
        if (PT07T05.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = PT07T05.OVRDCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = PT07T05.OVRDNAME[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (PT07T05.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = PT07T05.OVRDCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = PT07T05.OVRDNAME[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && PT07T05.OVRDCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end PT07145

// Verify the entered data
Function PT07150()
  if (converseVar.validationMsgNum != 0) /* if any error*/
    return; /* return*/
  end

  PTWREC.XXXMODID = "150"; /* Module identification*/

  PT07W00.PT07W-DATA-CHG = "N"; /* set data change indicator to no.*/

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PT07M001.CAITEM > " ") /* Application data was entered*/
    set PT07M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(007); /* Enter only with FAST PATH*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* validation of style/color , if changed*/
   /* ------------------------------------------------------------*/

  if (PT07M001.PT07M1-STY-NBR != PT07W00.PT07W-SY1STNBR
   || PT07M001.PT07M1-SY-COLR-CD-ID != PT07W00.PT07W-SY2CLRID)
   /* If Style/Color is changed*/
    if (converseVar.eventKey is enter) /* and ENTER pressed*/
      PT07171(); /* cross-validations when Style/Color is changed*/
    else
      if (converseVar.eventKey is pf5) /* blank screen was requested*/
        PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
        converseLib.validationFailed(34); /* PF key should not be used when Listing*/
      end
      if (converseVar.eventKey is pf9 /* confirm changes*/
       || converseVar.eventKey is pa2) /* refresh map*/
        converseLib.validationFailed(34); /* PF key should not be used when Listing*/
      end
      if (converseVar.eventKey is pf7  /* scroll back*/
       || converseVar.eventKey is pf8  /* scroll forward*/
       || converseVar.eventKey is pf15 /* update POMS*/
       || converseVar.eventKey is pf17) /* update fcty*/
        converseLib.validationFailed(34); /* PF key should not be used when Listing*/
      end
      set PT07M001.PT07M1-STY-NBR cursor, bold; /* highlight*/
      set PT07M001.PT07M1-SY-COLR-CD-ID bold; /* highlight*/
      PT07W00.PT07WBSW = "N"; /* set blank page to no*/
      PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
      PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate Override code, if changed - For Inquiry*/
   /* ------------------------------------------------------------*/

  if (PT07M001.PT07M1-SPEC-OFFR-CD != PT07W00.PT07W-SPEC-OFFR-CD
   || PT07M001.PT07M1-KEY-TYP-CD != PT07W00.PT07W-KEY-TYP-CD
   || PT07M001.PT07M1-BRAND-CD != PT07W00.PT07W-BRAND-CD
   || PT07M001.PT07M1-PRI-CD != PT07W00.PT07W-PRI-CD)
    if (converseVar.eventKey is enter) /* ENTER pressed - OK*/
      PT07175(); /* Validations for Override code entered*/
    else
      if (converseVar.eventKey is pf5) /* blank screen was requested*/
        PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
        converseLib.validationFailed(142);
      end
      if (converseVar.eventKey is pf9 /* confirm changes*/
       || converseVar.eventKey is pa2) /* refresh map*/
        converseLib.validationFailed(140);
      end
      if (converseVar.eventKey is pf7 /* scroll back*/
       || converseVar.eventKey is pf8) /* scroll forward*/
        converseLib.validationFailed(141);
      end
      if (converseVar.eventKey is pf15 /* update POMS*/
       || converseVar.eventKey is pf17) /* update fcty*/
        converseLib.validationFailed(219);
      end
      PT07W00.PT07WBSW = "N"; /* set blank page to no*/
      PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
      PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* If a blank screen was requested, make sure user authorized.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf5) /* blank screen was requested*/
    if ("S" in PT07M001.PT07M1-SEL)
      converseLib.validationFailed(183); /* Invalid PF key is pressed*/
      PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
      PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
      PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
      exit stack;
    end
    if (PT07W00.PT07WSSW == "Y") /* If security clearance*/
      PT07W00.PT07WBSW = "Y"; /* set display blank page to yes*/
      PT07W00.PT07W-SY1STNBR = " "; /* set the style as spaces*/
      PT07W00.PT07W-SY2CLRID = " "; /* set the color as spaces*/
      PT07W00.PT07W-SPEC-OFFR-CD = " "; /* set ovrd cds spaces*/
      PT07W00.PT07W-KEY-TYP-CD = " ";
      PT07W00.PT07W-BRAND-CD = " ";
      PT07W00.PT07W-PRI-CD = " ";
      PT07W00.PT07W-PF5-PRESSED = "Y"; /* set PF5 pressed sw*/
      set PT07W01 empty; /* set W01 empty*/
      exit stack;
    else
      PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
      PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
      PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
      converseLib.validationFailed(102); /* User not authorized*/
      exit stack;
    end
  end

  PT07W00.PT07WBSW = "N"; /* set display blank page to no*/

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    if ("A" in PT07M001.PT07M1-SEL
     || "S" in PT07M001.PT07M1-SEL
     || "C" in PT07M001.PT07M1-SEL
     || "D" in PT07M001.PT07M1-SEL)
      set PT07M001.PT07M1-SEL[sysVar.arrayIndex] normal, cursor;
      PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
      PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
      PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
      converseLib.validationFailed(120); /* can't scroll w/selection*/
      exit stack;
    else
      PT07177(); /* Verify scroll request*/
      return;
    end
  end

  PT07179(); /* validate the selection codes in PT07M001*/

  if (converseVar.eventKey is pf15) /* update POMS*/
    if (PT07W00.PT07W-SELECTION-MADE-SW == "Y")
      PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
      PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
      PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
      converseLib.validationFailed(183); /* invalid PF key is pressed*/
      exit stack;
    else
      if (PT07W00.PT07WSSW == "N")
        PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
        PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
        PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
        converseLib.validationFailed(102); /* User not authorized*/
        exit stack;
      else
        return;
      end
    end
  end

  PT07181(); /* compare data in the detail rows and validate*/
                  /* PF9, PF17 and enter keys*/

  PT07182(); /* validation and setting up the flags*/

  if (converseVar.eventKey is enter /* enter was pressed*/
   && PT07W00.PT07WSSW == "N")      /* and user not authorized to update*/
    exit stack;
  end

  if (converseVar.eventKey is enter) /* if enter key is pressed*/
    PT07W00.PT07WIXM = 1;
    while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN)
      PT07183-6(); /* load M001 to W01 variables*/
      PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1;
    end

    if (PT07W00.PT07W-SELECTION-MADE-SW == "N" && 
    PT07W00.PT07W-WAIT-PF17 == "Y") /* if no selection made and enter*/
      PT07W00.PT07W-WAIT-PF17 = "N"; /* reset the switches*/
      PT07W00.PT07WBSW = "N";
      PT07W00.PT07WSWF = "N";
      PT07W00.PT07WSWR = "N";
      exit stack;
    end

    if (PT07W00.PT07W-WAIT-PF17 == "Y") /* if wait-for-pf17 is set & enter*/
      PT07W00.PT07WBSW = "N";
      PT07W00.PT07WSWF = "N";
      PT07W00.PT07WSWR = "N";
      converseLib.validationFailed(186); /* press PF17 for the factory infos*/
      exit stack;
    end
    if (PT07W00.PT07W-WAIT-CONFIRM == "Y" && 
    PT07W00.PT07W-WAIT-PF17 == "N")
      PT07W00.PT07WBSW = "N";
      PT07W00.PT07WSWF = "N";
      PT07W00.PT07WSWR = "N";
      converseLib.validationFailed(189); /* press PF9 to confirm*/
      exit stack;
    end
    exit stack;
  end

  if (converseVar.validationMsgNum == 0) /* if no errors*/
    return; /* return to the next process*/
  else
    exit stack;
  end

end // end PT07150

// Verify the Override codes
Function PT07151()

  PT07W-CODE-FOUND-SW = "N";

  if (PT07M001.PT07M1-SPEC-OFFR-CD == "* "
   || PT07M001.PT07M1-SPEC-OFFR-CD == "  ")
    PT07W00.PT07W-SPEC-OFFR-CD = PT07M001.PT07M1-SPEC-OFFR-CD;
  else
    set VRTAOC01 empty;
    VRTAOC01.PT-RTA-OVRD-TYP-CD = "S";
    VRTAOC01.PT-RTA-OVRD-CD = PT07M001.PT07M1-SPEC-OFFR-CD;
    PT07152();
    if (PT07W-CODE-FOUND-SW == "Y")
      PT07W00.PT07W-SPEC-OFFR-CD = PT07M001.PT07M1-SPEC-OFFR-CD;
    else
      converseLib.validationFailed(174);
      set PT07M001.PT07M1-SPEC-OFFR-CD bold, cursor; /* hilite*/
      return; /* return to the previous process*/
    end
  end

  if (PT07M001.PT07M1-KEY-TYP-CD == "* "
   || PT07M001.PT07M1-KEY-TYP-CD == "  ")
    PT07W00.PT07W-KEY-TYP-CD = PT07M001.PT07M1-KEY-TYP-CD;
  else
    set VRTAOC01 empty;
    VRTAOC01.PT-RTA-OVRD-TYP-CD = "K";
    VRTAOC01.PT-RTA-OVRD-CD = PT07M001.PT07M1-KEY-TYP-CD;
    PT07152();
    if (PT07W-CODE-FOUND-SW == "Y")
      PT07W00.PT07W-KEY-TYP-CD = PT07M001.PT07M1-KEY-TYP-CD;
    else
      converseLib.validationFailed(175);
      set PT07M001.PT07M1-KEY-TYP-CD bold, cursor; /* hilite*/
      return; /* return to the previous process*/
    end
  end

  if (PT07M001.PT07M1-BRAND-CD == "* "
   || PT07M001.PT07M1-BRAND-CD == "  ")
    PT07W00.PT07W-BRAND-CD = PT07M001.PT07M1-BRAND-CD;
  else
    set VRTAOC01 empty;
    VRTAOC01.PT-RTA-OVRD-TYP-CD = "B";
    VRTAOC01.PT-RTA-OVRD-CD = PT07M001.PT07M1-BRAND-CD;
    PT07152();
    if (PT07W-CODE-FOUND-SW == "Y")
      PT07W00.PT07W-BRAND-CD = PT07M001.PT07M1-BRAND-CD;
    else
      converseLib.validationFailed(176);
      set PT07M001.PT07M1-BRAND-CD bold, cursor; /* hilite*/
      return; /* return to the previous process*/
    end
  end

  if (PT07M001.PT07M1-PRI-CD == "* "
   || PT07M001.PT07M1-PRI-CD == "  ")
    PT07W00.PT07W-PRI-CD = PT07M001.PT07M1-PRI-CD;
  else
    set VRTAOC01 empty;
    VRTAOC01.PT-RTA-OVRD-TYP-CD = "P";
    VRTAOC01.PT-RTA-OVRD-CD = PT07M001.PT07M1-PRI-CD;
    PT07152();
    if (PT07W-CODE-FOUND-SW == "Y")
      PT07W00.PT07W-PRI-CD = PT07M001.PT07M1-PRI-CD;
    else
      converseLib.validationFailed(177);
      set PT07M001.PT07M1-PRI-CD bold, cursor; /* hilite*/
      return; /* return to the previous process*/
    end
  end

   /* IF PT07M001.PT07M1-KEY-TYP-CD = 'L' AND*/
   /* PT07M001.PT07M1-PRI-CD = 'P';*/
   /* MOVE 213 TO EZEMNO; /*'L' & 'P' not allowed*/
   /* EZERTN;*/
   /* END;*/

end // end PT07151

// retrieve ovrd code
Function PT07152()
  PT07W-CODE-FOUND-SW = "N";

  try
    call "VRTAOC01" ("S ", SQLCA, VRTAOC01) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* Row not found*/

      if (SQLCA.VAGen_SQLCODE == +0) /* Normal return code*/
        PT07W-CODE-FOUND-SW = "Y";
      else
        PT07W-CODE-FOUND-SW = "N";
      end
      return;
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "152"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTAOC01"; /* Table view name*/
  TA1REC.TA1TBLKE = VRTAOC01.RTAOC-GRP-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07152

// check the security - P pdts
Function PT07153()
   /* if security for P products does not exist, display error message*/

  if (PT07W00.PT07WSSW-P == "Y")
    return;
  else
    PT07W00.PT07WBSW = "N";
    PT07W00.PT07WSWF = "N";
    PT07W00.PT07WSWR = "N";
    PT07W00.PT07W-WAIT-CONFIRM = "N";
    PT07W00.PT07W-WAIT-PF17 = "N";
    converseLib.validationFailed(215); /* user is not authorized for P products*/
    set PT07M001.PT07M1-SEL[PT07WIXM] cursor, bold;
    set PT07M001.SY1STNBR[PT07WIXM] bold;
    set PT07M001.SY2CLRID[PT07WIXM] bold;
    set PT07M001.RTA-PRI-CD[PT07WIXM] bold;
    exit stack;
  end

end // end PT07153

// check the security - nonP pdts
Function PT07154()
   /* if security for non-P products doesn't exist, display error message*/

  if (PT07W00.PT07WSSW-NON-P == "Y")
    return;
  else
    PT07W00.PT07WBSW = "N";
    PT07W00.PT07WSWF = "N";
    PT07W00.PT07WSWR = "N";
    PT07W00.PT07W-WAIT-CONFIRM = "N";
    PT07W00.PT07W-WAIT-PF17 = "N";
    converseLib.validationFailed(216); /* user is not authorized for non P products*/
    set PT07M001.PT07M1-SEL[PT07WIXM] cursor, bold;
    set PT07M001.SY1STNBR[PT07WIXM] bold;
    set PT07M001.SY2CLRID[PT07WIXM] bold;
    set PT07M001.RTA-PRI-CD[PT07WIXM] bold;
    exit stack;
  end

end // end PT07154

// check the security - P pdt INQ
Function PT07155()
   /* if security for P products does not exist, display error message*/

  if (PT07W00.PT07WSSW-INQ-P == "Y")
    return;
  else
    PT07W00.PT07WBSW = "N";
    PT07W00.PT07WSWF = "N";
    PT07W00.PT07WSWR = "N";
    PT07W00.PT07W-WAIT-CONFIRM = "N";
    PT07W00.PT07W-WAIT-PF17 = "N";
    converseLib.validationFailed(215); /* user is not authorized for P products*/
    set PT07M001.PT07M1-SEL[PT07WIXM] cursor, bold;
    set PT07M001.SY1STNBR[PT07WIXM] bold;
    set PT07M001.SY2CLRID[PT07WIXM] bold;
    set PT07M001.RTA-PRI-CD[PT07WIXM] bold;
    exit stack;
  end

end // end PT07155

// Process valid input request
Function PT07160()
  if (converseVar.validationMsgNum != 0) /* if any errors*/
    return; /* return*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    PT07W00.PT07WSWF = "Y"; /* Format the map switch*/
    PT07W00.XXXTSPAG = PT07W00.XXXTSPAG - 1; /* Decrement page number*/
    PT07W00.PT07W-SAVE-XXXTSPAG = PT07W00.XXXTSPAG;
    if (PT07W00.PT07W-PF5-PRESSED == "Y")
      PT07W00.PT07W-PF5-PRESSED = "N";
    end
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    PT07W00.PT07WSWF = "Y"; /* Format the map switch*/
    PT07W00.XXXTSPAG = PT07W00.XXXTSPAG + 1; /* Increment page number*/
    PT07W00.PT07W-SAVE-XXXTSPAG = PT07W00.XXXTSPAG;
    if (PT07W00.PT07W-PF5-PRESSED == "Y")
      PT07W00.PT07W-PF5-PRESSED = "N";
    end
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If update POMS was requested then submit the batch job*/
   /* and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf15) /* update POMS requested*/
    PT07670(); /* submit job*/
    return; /* Return to previous process*/
  end

  if (converseVar.eventKey is pf17) /* If PF17 was pressed*/
    if (PT07W00.PT07W-WAIT-PF17 == "Y")
      PT07W00.PT07WIXM = 1;
      while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN)
        PT07183-6(); /* load M001 to W01 variables*/
        PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1;
      end
      PT07W00.PT07W-SAVE-PAGE = PT07M001.XXXTSPAG; /* save page no*/
      PT07W00.PT07WMAP = "2"; /* transfer the control to Map2*/
      exit stack;
    else
      PT07W00.PT07W-WAIT-CONFIRM = "N"; /* reset the switches*/
      PT07W00.PT07W-WAIT-PF17 = "N";
      PT07W00.PT07WBSW = "N";
      PT07W00.PT07WSWF = "N";
      PT07W00.PT07WSWR = "N";
      converseLib.validationFailed(183); /* invalid PF key is pressed*/
      exit stack;
    end
  end

  if (converseVar.eventKey is pf9) /* If PF9 was pressed*/
    if (PT07W00.PT07W-WAIT-CONFIRM == "Y")
      PT07W00.PT07W-SAVE-PAGE = PT07M001.XXXTSPAG; /* save page no*/
      if ("A" in PT07M001.PT07M1-SEL) /* for add*/
        PT07161();
      else
        if ("C" in PT07M001.PT07M1-SEL || 
        "D" in PT07M001.PT07M1-SEL) /* for Chg/Del*/
          PT07162();
        end
      end
    else
      PT07W00.PT07W-WAIT-CONFIRM = "N";
      PT07W00.PT07W-WAIT-PF17 = "N";
      PT07W00.PT07WBSW = "N";
      PT07W00.PT07WSWF = "N";
      PT07W00.PT07WSWR = "N";
      converseLib.validationFailed(183); /* invalid PF key is pressed*/
      exit stack;
    end
  end

  converseLib.validationFailed(4); /* invalid PF key is pressed*/
  return; /* Return to previous process*/

end // end PT07160

// PROCESS 'A'DD
Function PT07161()

  PT07W00.PT07WIXM = 1;
  while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN)
    PT07161-1(); /* process for Adds*/
    PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1;
  end
  PT07W00.PT07W-SPEC-OFFR-CD = "*"; /* reset to **/
  PT07W00.PT07W-KEY-TYP-CD = "*";
  PT07W00.PT07W-BRAND-CD = "*";
  PT07W00.PT07W-PRI-CD = "*";
  PT07W00.PT07W-SY1STNBR = " ";
  PT07W00.PT07W-SY2CLRID = " ";

  converseLib.validationFailed(01); /* table updated successfully*/
  PT07163(); /* reset to inq*/

end // end PT07161

// PROCESS 'A'DD
Function PT07161-1()

  if (PT07M001.PT07M1-SEL[PT07WIXM] == " ") /* if no sel is made*/
    return; /* return*/
  end

  if (PT07M001.PT07M1-SEL[PT07WIXM] == "A") /* if sel code is 'A'*/
    if (PT07W03.PROCESSED-FLAG[PT07WIXM] == "N") /* and not processed*/
      if (PT07W03.OPERATION-FLAG[PT07WIXM] == "A ") /* and Add in M001*/
        PT07192(); /* select the row from VFORCD01 table*/
        if (SQLCA.VAGen_SQLCODE == +100) /* if not found*/
          PT07W011.PT-RTA-SPEC-OFR-CD = PT07M001.RTA-SPEC-OFR-CD[PT07WIXM]; /* load from M001*/
          PT07W011.PT-RTA-KEY-CD = PT07M001.RTA-KEY-CD[PT07WIXM];
          PT07W011.PT-RTA-BRAND-CD = PT07M001.RTA-BRAND-CD[PT07WIXM];
          PT07W011.PT-RTA-PRI-CD = PT07M001.RTA-PRI-CD[PT07WIXM];
          PT07161-2(); /* format date*/
          PT07W011.ZZ-CHNG-CNT = 1; /* set the count*/
          PT07W011.XXX-USER-ID = COMMAREA.CAUSERID; /* user-id*/
          PT07W011.ZZ-CHNG-PGM-ID = "PT07";
          PT07W011.ZZ-SDT = XX0XW01.XX0XWDAT;
   /* MOVE XX0XW01.XX0XWTIM TO PT07W011.ZZ-CHNG-HHMM;*/
          PT07161-3(); /* add record in VFORCD01 table*/
          PT07W03.PROCESSED-FLAG[PT07WIXM] = "Y"; /* processed*/
          return; /* return to the previous process*/
        else /* if record already exists in VFORCD01*/
          PT07W00.PT07WBSW = "N"; /* reset the switches*/
          PT07W00.PT07WSWF = "N";
          PT07W00.PT07WSWR = "N";
          PT07W00.PT07W-WAIT-CONFIRM = "N";
          PT07W00.PT07W-WAIT-PF17 = "N";
          converseLib.validationFailed(180); /* invalid selection code*/
          exit stack;
        end
      else
        if (PT07W03.OPERATION-FLAG[PT07WIXM] == "U ") /* if update in M001*/
          PT07192(); /* select the row from VFORCD01 table*/
          if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
            PT07W00.PT07WBSW = "N"; /* reset the switches*/
            PT07W00.PT07WSWF = "N";
            PT07W00.PT07WSWR = "N";
            PT07W00.PT07W-WAIT-CONFIRM = "N";
            PT07W00.PT07W-WAIT-PF17 = "N";
            converseLib.validationFailed(180); /* invalid selection code*/
            exit stack;
          else /* if record already exists*/
            PT07W011.PT-RTA-SPEC-OFR-CD = PT07M001.RTA-SPEC-OFR-CD[PT07WIXM]; /* load from M001*/
            PT07W011.PT-RTA-KEY-CD = PT07M001.RTA-KEY-CD[PT07WIXM];
            PT07W011.PT-RTA-BRAND-CD = PT07M001.RTA-BRAND-CD[PT07WIXM];
            PT07W011.PT-RTA-PRI-CD = PT07M001.RTA-PRI-CD[PT07WIXM];
            PT07161-2(); /* format date*/
   /* PT07W011.ZZ-CHNG-CNT = PT07W011.ZZ-CHNG-CNT + 1;*/
            PT07W011.XXX-USER-ID = COMMAREA.CAUSERID; /* user-id*/
            PT07W011.ZZ-CHNG-PGM-ID = "PT07";
            PT07W011.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
            PT07W011.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
            PT07161-4(); /* update record in VFORCD01 table*/
            PT07W03.PROCESSED-FLAG[PT07WIXM] = "Y"; /* processed*/
            return;
          end
        end
      end
    end
  end

end // end PT07161-1

// FORMAT DATE
Function PT07161-2()

  PT07W00.PT07W-FORMAT-DATE = 0; /* Initialize the date area*/

  if (PT07M001.FIRST-OFFER-DT[PT07WIXM] > 0)
    PT07W00.PT07W-WS-YYMMDD-FORMAT = PT07M001.FIRST-OFFER-DT[PT07WIXM];
    PT07W00.PT07W-WS-CCYYMMDD-FORMAT = 0;
    PT07W00.PT07W-WS-DD-NUM = PT07W00.PT07W-WS-DD;
    PT07W00.PT07W-WS-MM-NUM = PT07W00.PT07W-WS-MM;
    PT07W00.PT07W-WS-YY-NUM = PT07W00.PT07W-WS-YY;

    if (PT07W00.PT07W-WS-YY < 50)
      PT07W00.PT07W-WS-CC-NUM = 20;
    else
      PT07W00.PT07W-WS-CC-NUM = 19;
    end

   /* MOVE PT07W00.PT07W-WS-CCYYMMDD-FORMAT TO PT07W011.FIRST-OFFER-DT;*/
  end

  PT07W00.PT07W-FORMAT-DATE = 0; /* Initialize the date area*/

  if (PT07M001.PROD-REL-DT[PT07WIXM] > 0)
    PT07W00.PT07W-WS-YYMMDD-FORMAT = PT07M001.PROD-REL-DT[PT07WIXM];
    PT07W00.PT07W-WS-CCYYMMDD-FORMAT = 0;
    PT07W00.PT07W-WS-DD-NUM = PT07W00.PT07W-WS-DD;
    PT07W00.PT07W-WS-MM-NUM = PT07W00.PT07W-WS-MM;
    PT07W00.PT07W-WS-YY-NUM = PT07W00.PT07W-WS-YY;

    if (PT07W00.PT07W-WS-YY < 50)
      PT07W00.PT07W-WS-CC-NUM = 20;
    else
      PT07W00.PT07W-WS-CC-NUM = 19;
    end

    PT07W011.PT-PROD-REL-DT = PT07W00.PT07W-WS-CCYYMMDD-FORMAT;
  else
    PT07W011.PT-PROD-REL-DT = 0;
  end

  PT07W00.PT07W-FORMAT-DATE = 0; /* Initialize the date area*/

  if (PT07M001.DROPDEAD-RTA-DT[PT07WIXM] > 0)
    PT07W00.PT07W-WS-YYMMDD-FORMAT = PT07M001.DROPDEAD-RTA-DT[PT07WIXM];
    PT07W00.PT07W-WS-CCYYMMDD-FORMAT = 0;
    PT07W00.PT07W-WS-DD-NUM = PT07W00.PT07W-WS-DD;
    PT07W00.PT07W-WS-MM-NUM = PT07W00.PT07W-WS-MM;
    PT07W00.PT07W-WS-YY-NUM = PT07W00.PT07W-WS-YY;

    if (PT07W00.PT07W-WS-YY < 50)
      PT07W00.PT07W-WS-CC-NUM = 20;
    else
      PT07W00.PT07W-WS-CC-NUM = 19;
    end

    PT07W011.PC-DROPDEAD-RTA-DT = PT07W00.PT07W-WS-CCYYMMDD-FORMAT;
  else
    PT07W011.PC-DROPDEAD-RTA-DT = 0;
  end

end // end PT07161-2

// Add VFORCD01
Function PT07161-3()
  set PT07W012 empty;
  PT07W012.TASK-CODE = "A ";

   /* ------------------------------------------------------------*/
   /* Insert in DMODEL.VFORCD01*/
   /* ------------------------------------------------------------*/

  try
    call "PT6300" (PT07W012, SQLCA, PT07W011) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == +0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "161"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(011); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(010); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFORCD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07161-3

// Update VFORCD01
Function PT07161-4()
  set PT07W012 empty;
  PT07W012.TASK-CODE = "U ";

   /* ------------------------------------------------------------*/
   /* Update in DMODEL.VFORCD01*/
   /* ------------------------------------------------------------*/

  try
    call "PT6300" (PT07W012, SQLCA, PT07W011) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == +0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "161"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(011); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(010); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFORCD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07161-4

// PROCESS 'C'HANGE & 'D'ELETE
Function PT07162()

  PT07W00.PT07WIXM = 1;
  while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN)
    PT07162-1(); /* process for Chg/Del*/
    PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1;
  end
  converseLib.validationFailed(01); /* table updated successfully*/
  PT07163(); /* reset to inquiry*/
end // end PT07162

// PROCESS 'C'HANGE & 'D'ELETE
Function PT07162-1()

  if (PT07M001.PT07M1-SEL[PT07WIXM] == " ") /* if sel code is spaces*/
    return; /* return*/
  end

  if (PT07M001.PT07M1-SEL[PT07WIXM] == "C") /* if sel code is 'C' &*/
    if (PT07W03.PROCESSED-FLAG[PT07WIXM] == "N") /* not processed &*/
      if (PT07W03.OPERATION-FLAG[PT07WIXM] == "U ") /* update in M001*/
        PT07192(); /* select the row from VFORCD01 table*/
        if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
          PT07W00.PT07WBSW = "N"; /* reset the switches*/
          PT07W00.PT07WSWF = "N";
          PT07W00.PT07WSWR = "N";
          PT07W00.PT07W-WAIT-CONFIRM = "N";
          PT07W00.PT07W-WAIT-PF17 = "N";
          converseLib.validationFailed(180); /* invalid selection code*/
          exit stack;
        else
          PT07W011.PT-RTA-SPEC-OFR-CD = PT07M001.RTA-SPEC-OFR-CD[PT07WIXM]; /* load from M001*/
          PT07W011.PT-RTA-KEY-CD = PT07M001.RTA-KEY-CD[PT07WIXM];
          PT07W011.PT-RTA-BRAND-CD = PT07M001.RTA-BRAND-CD[PT07WIXM];
          PT07W011.PT-RTA-PRI-CD = PT07M001.RTA-PRI-CD[PT07WIXM];
          PT07161-2(); /* format date*/
   /* PT07W011.ZZ-CHNG-CNT = PT07W011.ZZ-CHNG-CNT + 1;*/
          PT07W011.XXX-USER-ID = COMMAREA.CAUSERID; /* user id*/
          PT07W011.ZZ-CHNG-PGM-ID = "PT07";
          PT07W011.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
          PT07W011.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
          PT07161-4(); /* update record in VFORCD01 table*/
          PT07W03.PROCESSED-FLAG[PT07WIXM] = "Y"; /* processed*/
          return;
        end
      else
        if (PT07W03.OPERATION-FLAG[PT07WIXM] == "UD")
          PT07192(); /* select the row from VFORCD01 table*/
          if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
            PT07W00.PT07WBSW = "N"; /* reset the switches*/
            PT07W00.PT07WSWF = "N";
            PT07W00.PT07WSWR = "N";
            PT07W00.PT07W-WAIT-CONFIRM = "N";
            PT07W00.PT07W-WAIT-PF17 = "N";
            converseLib.validationFailed(180); /* invalid selection code*/
            exit stack;
          else
            PT07W011.PT-RTA-SPEC-OFR-CD = PT07M001.RTA-SPEC-OFR-CD[PT07WIXM]; /* load from M001*/
            PT07W011.PT-RTA-KEY-CD = PT07M001.RTA-KEY-CD[PT07WIXM];
            PT07W011.PT-RTA-BRAND-CD = PT07M001.RTA-BRAND-CD[PT07WIXM];
            PT07W011.PT-RTA-PRI-CD = PT07M001.RTA-PRI-CD[PT07WIXM];
            PT07161-2(); /* format date*/
   /* PT07W011.ZZ-CHNG-CNT = PT07W011.ZZ-CHNG-CNT + 1;*/
            PT07W011.XXX-USER-ID = COMMAREA.CAUSERID; /* user id*/
            PT07W011.ZZ-CHNG-PGM-ID = "PT07";
            PT07W011.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
            PT07W011.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
            PT07161-4(); /* update record in VFORCD01 table*/
            if (PT07M001.RTA-PRI-CD[PT07WIXM] == " ")
              PT07162-2(); /* delete VFOFCT01 records*/
            end
            PT07W03.PROCESSED-FLAG[PT07WIXM] = "Y";
            return;
          end
        end
      end
    end
  end

  if (PT07M001.PT07M1-SEL[PT07WIXM] == "D") /* if sel code is 'D'*/
    if (PT07W03.PROCESSED-FLAG[PT07WIXM] == "N") /* & not processed*/
      if (PT07W03.OPERATION-FLAG[PT07WIXM] == "D ")
        PT07192(); /* select the row from VFORCD01 table*/
        if (SQLCA.VAGen_SQLCODE == +100) /* if not found*/
          PT07W00.PT07WBSW = "N"; /* reset switches*/
          PT07W00.PT07WSWF = "N";
          PT07W00.PT07WSWR = "N";
          PT07W00.PT07W-WAIT-CONFIRM = "N";
          PT07W00.PT07W-WAIT-PF17 = "N";
          converseLib.validationFailed(180); /* invalid selection code*/
          exit stack;
        else
          PT07162-3(); /* delete record in VFORCD01 table*/
          PT07W03.PROCESSED-FLAG[PT07WIXM] = "Y";
          return;
        end
      else
        if (PT07W03.OPERATION-FLAG[PT07WIXM] == "DD")
          PT07192(); /* select the row from VFORCD01 table*/
          if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
            PT07W00.PT07WBSW = "N"; /* reset switches*/
            PT07W00.PT07WSWF = "N";
            PT07W00.PT07WSWR = "N";
            PT07W00.PT07W-WAIT-CONFIRM = "N";
            PT07W00.PT07W-WAIT-PF17 = "N";
            converseLib.validationFailed(180); /* invalid selection code*/
            exit stack;
          else
            PT07162-3(); /* delete record in VFORCD01 table*/
            if (PT07M001.RTA-PRI-CD[PT07WIXM] == "P")
              PT07162-2(); /* delete VFOFCT01 records*/
            end
            PT07W03.PROCESSED-FLAG[PT07WIXM] = "Y";
            return;
          end
        end
      end
    end
  end
end // end PT07162-1

// Delete VFOFCT01
Function PT07162-2()

  set VFOFCT01 empty; /* clear io-mod data record*/
   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/
  VFOFCT01.SY1STNBR = PT07M001.SY1STNBR[PT07WIXM];
  VFOFCT01.SY2CLRID = PT07M001.SY2CLRID[PT07WIXM];
  VFOFCT01.XDMCD = "00";
  VFOFCT01.XGPCD = PT07W00.XGPCD;
   /* ------------------------------------------------------------*/
   /* DELETE FROM DMODEL.VFOFCT01*/
   /* ------------------------------------------------------------*/
  set PT07W012 empty;
  PT07W012.TASK-CODE = "D2";

  try
    call "VFOFCT01" (PT07W012, SQLCA, VFOFCT01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* or already deleted*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "162"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(011); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(010); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFOFCT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07162-2

// Delete VFORCD01
Function PT07162-3()
  set PT07W012 empty;
  PT07W012.TASK-CODE = "D ";

  set PT07W011 empty; /* clear io-mod data record*/
   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/
  PT07W011.SY1STNBR = PT07M001.SY1STNBR[PT07WIXM];
  PT07W011.SY2CLRID = PT07M001.SY2CLRID[PT07WIXM];
  PT07W011.XDMCD = "00";
  PT07W011.XGPCD = PT07W00.XGPCD;
   /* ------------------------------------------------------------*/
   /* DELETE FROM DMODEL.VFORCD01*/
   /* ------------------------------------------------------------*/

  try
    call "PT6300" (PT07W012, SQLCA, PT07W011) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == +0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "162"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(011); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(010); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFORCD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07162-3

// RESET TO INQUIRY
Function PT07163()
  PT07W00.PT07W-WAIT-PF17 = "N";
  PT07W00.PT07W-WAIT-CONFIRM = "N";
  PT07W00.PT07W-PF5-PRESSED = "N";
  PT07W00.PT07WMAP = "1";
  PT07W00.PT07WBSW = "N";
  PT07W00.PT07WSWF = "Y";
  PT07W00.PT07WSWR = "Y";

  if ("A" in PT07M001.PT07M1-SEL || 
  "C" in PT07M001.PT07M1-SEL)
    if ("Y" in PT07W03.PROCESSED-FLAG)
      if (converseVar.validationMsgNum == 01)
           /* next sentence*/
      else
        converseLib.validationFailed(0);
      end
    else
      converseLib.validationFailed(0);
    end
  else
    if (converseVar.validationMsgNum == 01)
        /* next sentence*/
    else
      converseLib.validationFailed(0);
    end
  end

  set PT07W03 empty;
  if (PT07W00.PT07W-SY1STNBR == " " && 
  PT07W00.PT07W-SY2CLRID == " " && 
  PT07W00.PT07W-SPEC-OFFR-CD == " " && 
  PT07W00.PT07W-KEY-TYP-CD == " " && 
  PT07W00.PT07W-BRAND-CD == " " && 
  PT07W00.PT07W-PRI-CD == " ")
    PT07W00.PT07W-SPEC-OFFR-CD = "* ";
    PT07W00.PT07W-KEY-TYP-CD = "* ";
    PT07W00.PT07W-BRAND-CD = "* ";
    PT07W00.PT07W-PRI-CD = "* ";
  end

  exit stack;

   /* MOVE '*' TO PT07W00.PT07W-SPEC-OFFR-CD;*/
   /* MOVE '*' TO PT07W00.PT07W-KEY-TYP-CD;*/
   /* MOVE '*' TO PT07W00.PT07W-BRAND-CD;*/
   /* MOVE '*' TO PT07W00.PT07W-PRI-CD;*/
   /* MOVE ' ' TO PT07W00.PT07W-SY1STNBR;*/
   /* MOVE ' ' TO PT07W00.PT07W-SY2CLRID;*/

   /* MOVE ' ' TO PT07M001.PT07M1-STY-NBR;*/
   /* MOVE ' ' TO PT07M001.PT07M1-SY-COLR-CD-ID;*/
   /* MOVE '*' TO PT07M001.PT07M1-SPEC-OFFR-CD;*/
   /* MOVE '*' TO PT07M001.PT07M1-KEY-TYP-CD;*/
   /* MOVE '*' TO PT07M001.PT07M1-BRAND-CD;*/
   /* MOVE '*' TO PT07M001.PT07M1-PRI-CD;*/
   /* MOVE 1 TO PT07W00.PT07W-SAVE-PAGE;*/
   /* PT07M001.XXXTSPAG current page*/

end // end PT07163

// Cross-Validations for style
Function PT07171()
   /* **********************************************************************/
   /* * - Check for any 'A', 'S', 'C', 'D' in sel code. if any, set error **/
   /* * - Check for any invalid selection code -other than mentioned above**/
   /* * - If style/color is spaces, validate override code & retrieve     **/
   /* * - If style is spaces but colr not spaces, set error               **/
   /* * - If style ONLY is entered, check the count (for > 0) & retrieve  **/
   /* * - If style & color is entered, check for existence in VFORCD01 &  **/
   /* *   retrieve                                                        **/
   /* **********************************************************************/

  if ("A" in PT07M001.PT07M1-SEL
   || "S" in PT07M001.PT07M1-SEL
   || "C" in PT07M001.PT07M1-SEL
   || "D" in PT07M001.PT07M1-SEL) /* if any SELection is made*/
    set PT07M001.PT07M1-SEL[sysVar.arrayIndex] cursor, bold;
    set PT07M001.PT07M1-STY-NBR bold; /* highlight*/
    set PT07M001.PT07M1-SY-COLR-CD-ID bold; /* highlight*/
    PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
    PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
    PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
    PTWREC.XXXMODID = "171";
    converseLib.validationFailed(181); /* Selection 'A','C','D' Not allowed*/
    exit stack;
  end

  PT07172(); /* check for any other invalid selection code*/

  if (PT07M001.PT07M1-STY-NBR == " "
   && PT07M001.PT07M1-SY-COLR-CD-ID == " ")
    PT07W00.PT07W-SY1STNBR = PT07M001.PT07M1-STY-NBR;
    PT07W00.PT07W-SY2CLRID = PT07M001.PT07M1-SY-COLR-CD-ID;
    PT07151(); /* verify override code*/
    if (converseVar.validationMsgNum == 0) /* no errors*/
      PT07W00.PT07W-SAVE-PAGE = 1; /* reset to first page*/
      PT07W00.PT07W-PF5-PRESSED = "N"; /* reset PF5 pressed sw*/
      PT07W00.PT07W-WAIT-CONFIRM = "N"; /* reset confirm sw*/
      PT07W00.PT07W-WAIT-PF17 = "N"; /* reset pf17 sw*/
      set PT07W03 empty;
      PT07W00.PT07WBSW = "N"; /* blank page to no*/
      PT07W00.PT07WSWF = "Y"; /* format sw to yes*/
      PT07W00.PT07WSWR = "Y"; /* request for data to yes*/
      exit stack;
    else
      PT07W00.PT07WBSW = "N"; /* blank page to no*/
      PT07W00.PT07WSWF = "N"; /* format sw to no*/
      PT07W00.PT07WSWR = "N"; /* request for data to no*/
      exit stack;
    end
  end

  if (PT07M001.PT07M1-STY-NBR == " "
   && PT07M001.PT07M1-SY-COLR-CD-ID != " ") /* if color ONLY entered*/
    converseLib.validationFailed(28); /* Style is missing or invalid- error message*/
    set PT07M001.PT07M1-STY-NBR cursor, bold; /* set cursor*/
    PT07W00.PT07WBSW = "N"; /* set blank page to no*/
    PT07W00.PT07WSWF = "N"; /* set format sw to no*/
    PT07W00.PT07WSWR = "N"; /* set request for data to no*/
    exit stack;
  end

  if (PT07M001.PT07M1-STY-NBR != " "
   && PT07M001.PT07M1-SY-COLR-CD-ID == " ") /* if style ONLY entered*/
    PT07173(); /* select count on vforcd01*/
    if (PT07W012.VFORCD01-COUNT > 0) /* if count > 0*/
      PT07151(); /* verify override codes in map*/
      if (converseVar.validationMsgNum == 0) /* no errors*/
        PT07W00.PT07W-SY1STNBR = PT07M001.PT07M1-STY-NBR;
        PT07W00.PT07W-SY2CLRID = PT07M001.PT07M1-SY-COLR-CD-ID;
        PT07W00.PT07W-SPEC-OFFR-CD = "* ";
        PT07W00.PT07W-KEY-TYP-CD = "* ";
        PT07W00.PT07W-BRAND-CD = "* ";
        PT07W00.PT07W-PRI-CD = "* ";
        PT07W00.PT07W-SAVE-PAGE = 1; /* reset to first page*/
        PT07W00.PT07W-PF5-PRESSED = "N"; /* reset the switches*/
        PT07W00.PT07W-WAIT-CONFIRM = "N";
        PT07W00.PT07W-WAIT-PF17 = "N";
        set PT07W03 empty;
        PT07W00.PT07WBSW = "N"; /* set the blank page to no*/
        PT07W00.PT07WSWF = "Y"; /* set format page to yes*/
        PT07W00.PT07WSWR = "Y"; /* set request for data to yes*/
        exit stack;
      else
        PT07W00.PT07WBSW = "N"; /* set blank page to no*/
        PT07W00.PT07WSWF = "N"; /* set format page to no*/
        PT07W00.PT07WSWR = "N"; /* set the request for data to no*/
        exit stack;
      end
    else
      converseLib.validationFailed(28); /* Style is missing or invalid - error message*/
      set PT07M001.PT07M1-STY-NBR cursor, bold; /* set cursor*/
      PT07W00.PT07WBSW = "N"; /* set blank page to no*/
      PT07W00.PT07WSWF = "N"; /* set format page to no*/
      PT07W00.PT07WSWR = "N"; /* set request for data to no*/
      exit stack;
    end
  end
   /*  */
  if (PT07M001.PT07M1-STY-NBR != " "
   && PT07M001.PT07M1-SY-COLR-CD-ID != " ") /* if style & color entered*/
    PT07174(); /* select unique on vforcd01*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if record exists*/
      PT07151(); /* verify override code*/
      if (converseVar.validationMsgNum == 0) /* if no errors*/
        PT07W00.PT07W-SY1STNBR = PT07M001.PT07M1-STY-NBR;
        PT07W00.PT07W-SY2CLRID = PT07M001.PT07M1-SY-COLR-CD-ID;
        PT07W00.PT07W-SPEC-OFFR-CD = "* "; /* reset ovrd cd to **/
        PT07W00.PT07W-KEY-TYP-CD = "* ";
        PT07W00.PT07W-BRAND-CD = "* ";
        PT07W00.PT07W-PRI-CD = "* ";
        PT07W00.PT07W-SAVE-PAGE = 1; /* reset to first page*/
        PT07W00.PT07W-PF5-PRESSED = "N"; /* reset the switches*/
        PT07W00.PT07W-WAIT-CONFIRM = "N";
        PT07W00.PT07W-WAIT-PF17 = "N";
        set PT07W03 empty;
        PT07W00.PT07WBSW = "N"; /* set the blank page to no*/
        PT07W00.PT07WSWF = "Y"; /* set format page to yes*/
        PT07W00.PT07WSWR = "Y"; /* set request for data to yes*/
        exit stack;
      else
        PT07W00.PT07WBSW = "N"; /* set blank page to no*/
        PT07W00.PT07WSWF = "N"; /* set format page to no*/
        PT07W00.PT07WSWR = "N"; /* set request for data to no*/
        exit stack;
      end
    else
      converseLib.validationFailed(95); /* Style/Color/Dim combination not found*/
      set PT07M001.PT07M1-STY-NBR cursor, bold; /* set cursor*/
      set PT07M001.PT07M1-SY-COLR-CD-ID bold; /* highlight*/
      PT07W00.PT07WBSW = "N"; /* set blank page to no*/
      PT07W00.PT07WSWF = "N"; /* set format page to no*/
      PT07W00.PT07WSWR = "N"; /* set request for data to no*/
      exit stack;
    end
  end
   /*  */

end // end PT07171

// Check for invalid sel code
Function PT07172()
  PT07W00.PT07WIXM = 1; /* Initialize line index*/

  while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN) /* 11 times (11 lines/page)*/

    if (PT07M001.PT07M1-SEL[PT07WIXM] == "A"
     || PT07M001.PT07M1-SEL[PT07WIXM] == "S"
     || PT07M001.PT07M1-SEL[PT07WIXM] == "C"
     || PT07M001.PT07M1-SEL[PT07WIXM] == "D"
     || PT07M001.PT07M1-SEL[PT07WIXM] == " ")
   /* next sentence*/
    else
      PTWREC.XXXMODID = "172";
      converseLib.validationFailed(180); /* invalid selection code*/
      set PT07M001.PT07M1-SEL[PT07WIXM] cursor, bold;
      PT07W00.PT07WBSW = "N"; /* set blank page to no*/
      PT07W00.PT07WSWF = "N"; /* set format data to no*/
      PT07W00.PT07WSWR = "N"; /* set request for data to no*/
      exit stack;
    end
    PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1; /* increment the index*/
  end

end // end PT07172

// Select COUNT(*) FROM VFORCD01
Function PT07173()
  set PT07W011 empty;
  PT07W011.XGPCD = PT07W00.XGPCD;
  PT07W011.SY1STNBR = PT07M001.PT07M1-STY-NBR;
  PT07W011.SY2CLRID = PT07M001.PT07M1-SY-COLR-CD-ID;
  PT07W011.XDMCD = "00";

  set PT07W012 empty;
  PT07W012.TASK-CODE = "CC"; /* count*/

  try
    call "PT6300" (PT07W012, SQLCA, PT07W011) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful , return to previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == +0)
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "173"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "COUNT ON VFORCD01   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFORCD01"; /* Table view name*/
  VFORCD01.VFORCD01-GRP = PT07W011.PT07W3-FORCD-GRP;
  TA1REC.TA1TBLKE = VFORCD01.VFORCD01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07173

// Select Unique FROM VFORCD01
Function PT07174()
  set PT07W011 empty;
  PT07W011.XGPCD = PT07W00.XGPCD;
  PT07W011.SY1STNBR = PT07M001.PT07M1-STY-NBR;
  PT07W011.SY2CLRID = PT07M001.PT07M1-SY-COLR-CD-ID;
  PT07W011.XDMCD = "00";

  set PT07W012 empty;
  PT07W012.TASK-CODE = "S "; /* select unique*/

  try
    call "PT6300" (PT07W012, SQLCA, PT07W011) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful , return to previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == +0
     || SQLCA.VAGen_SQLCODE == +100)
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "174"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE VFORCD";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFORCD01"; /* Table view name*/
  VFORCD01.VFORCD01-GRP = PT07W011.PT07W3-FORCD-GRP;
  TA1REC.TA1TBLKE = VFORCD01.VFORCD01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07174

// Validations for Override code
Function PT07175()
   /* ****************************************************************/
   /* * If any of the override codes are changed in PT07M001,       **/
   /* *    - check for any 'A','S','C','D' in sel code.             **/
   /* *    - check for any invalid sel code (other than A,C,D,S,,). **/
   /* *    - check for any detail row is changed without sel code.  **/
   /* *    - Verify the override codes (with VRTAOC01 table).       **/
   /* ****************************************************************/

  if ("A" in PT07M001.PT07M1-SEL
   || "S" in PT07M001.PT07M1-SEL
   || "C" in PT07M001.PT07M1-SEL
   || "D" in PT07M001.PT07M1-SEL) /* if any SELection is made*/
    set PT07M001.PT07M1-SEL[sysVar.arrayIndex] cursor, bold;
    PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
    PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
    PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
    PTWREC.XXXMODID = "175";
    converseLib.validationFailed(143); /* can't chng ovrd cd w/other chgs*/
    exit stack;
  end

  PT07172(); /* check for any other invalid selection code*/

  PT07W00.PT07WIXM = 1; /* Initialize line index*/
  while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN)
    if (PT07M001.PT07M1-SEL[PT07WIXM] == " ") /* if sel code is spaces*/
      if (PT07W01.SY1STNBR[PT07WIXM] != PT07M001.SY1STNBR[PT07WIXM]
       || PT07W01.SY2CLRID[PT07WIXM] != PT07M001.SY2CLRID[PT07WIXM]
       || PT07W01.RTA-SPEC-OFR-CD[PT07WIXM] != 
      PT07M001.RTA-SPEC-OFR-CD[PT07WIXM]
       || PT07W01.RTA-KEY-CD[PT07WIXM] != 
      PT07M001.RTA-KEY-CD[PT07WIXM]
       || PT07W01.RTA-BRAND-CD[PT07WIXM] != 
      PT07M001.RTA-BRAND-CD[PT07WIXM]
       || PT07W01.RTA-PRI-CD[PT07WIXM] != 
      PT07M001.RTA-PRI-CD[PT07WIXM]
       || PT07W01.PROD-REL-DT[PT07WIXM] != 
      PT07M001.PROD-REL-DT[PT07WIXM]
       || PT07W01.DROPDEAD-RTA-DT[PT07WIXM] != 
      PT07M001.DROPDEAD-RTA-DT[PT07WIXM]) /* if data is changed*/
        set PT07M001.PT07M1-SEL[PT07WIXM] cursor, bold; /* bright*/
        converseLib.validationFailed(139); /* data is changed but not selected*/
        PT07W00.PT07WBSW = "N"; /* set blank page to no*/
        PT07W00.PT07WSWF = "N"; /* set format page sw to no*/
        PT07W00.PT07WSWR = "N"; /* set request for data to no*/
        PTWREC.XXXMODID = "175";
        exit stack;
      end
    end
    PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1;
  end

  PT07151(); /* verify override code*/

  if (converseVar.validationMsgNum == 0) /* no errors*/
    PT07M001.PT07M1-STY-NBR = " "; /* space out style/color*/
    PT07M001.PT07M1-SY-COLR-CD-ID = " ";
    PT07W00.PT07W-SY1STNBR = " ";
    PT07W00.PT07W-SY2CLRID = " ";
    PT07W00.PT07W-SAVE-PAGE = 1; /* reset to first page*/
    PT07W00.PT07W-PF5-PRESSED = "N"; /* reset the switches*/
    PT07W00.PT07W-WAIT-CONFIRM = "N";
    PT07W00.PT07W-WAIT-PF17 = "N";
    set PT07W03 empty;
    PT07W00.PT07WBSW = "N"; /* set the blank page to no*/
    PT07W00.PT07WSWF = "Y"; /* set format page to yes*/
    PT07W00.PT07WSWR = "Y"; /* set request for data to yes*/
    exit stack;
  else
    PT07W00.PT07WBSW = "N"; /* set blank page to no*/
    PT07W00.PT07WSWF = "N"; /* set format page to no*/
    PT07W00.PT07WSWR = "N"; /* set request for data to no*/
    exit stack;
  end

end // end PT07175

// Verify for any chg in data
Function PT07176()
   /* ****************************************************************/
   /* * Check for any change between M001 & W01 variables.          **/
   /* * If any change found, set the data chg flag to yes and exit  **/
   /* * if no change observed, set the data chg flag to no and exit **/
   /* * The change between M001 & W01 variables is observed for the **/
   /* * detail rows only                                            **/
   /* ****************************************************************/

  PT07W00.PT07WIXM = 1; /* Initialize line index*/
  PT07W00.PT07W-DATA-CHG = "N"; /* set the data chg flag to No*/

  while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN
   && PT07W00.PT07W-DATA-CHG == "N") /* do until 11 lines or data is chg*/
      /* check the sel code*/
    if (PT07W00.PT07W-DATA-CHG == "N")
      if (PT07W01.PT07WSEL[PT07WIXM] != PT07M001.PT07M1-SEL[PT07WIXM])
   /* SET PT07M001.PT07M1-SEL(PT07WIXM) BRIGHT;*/
        PT07W00.PT07W-DATA-CHG = "Y";
      end
    end
      /* check style in detail row*/
    if (PT07W00.PT07W-DATA-CHG == "N")
      if (PT07W01.SY1STNBR[PT07WIXM] != PT07M001.SY1STNBR[PT07WIXM])
   /* SET PT07M001.SY1STNBR(PT07WIXM) BRIGHT;*/
        PT07W00.PT07W-DATA-CHG = "Y";
      end
    end
      /* check color in detail row*/
    if (PT07W00.PT07W-DATA-CHG == "N")
      if (PT07W01.SY2CLRID[PT07WIXM] != PT07M001.SY2CLRID[PT07WIXM])
   /* SET PT07M001.SY2CLRID(PT07WIXM) BRIGHT;*/
        PT07W00.PT07W-DATA-CHG = "Y";
      end
    end
      /* check short style name in detail row*/
    if (PT07W00.PT07W-DATA-CHG == "N")
      if (PT07W01.SY1SSTNM[PT07WIXM] != PT07M001.SY1SSTNM[PT07WIXM])
   /* SET PT07M001.SY1SSTNM(PT07WIXM) BRIGHT;*/
        PT07W00.PT07W-DATA-CHG = "Y";
      end
    end
      /* check style color abreviation in detail row*/
    if (PT07W00.PT07W-DATA-CHG == "N")
      if (PT07W01.SY2CLRAB[PT07WIXM] != PT07M001.SY2CLRAB[PT07WIXM])
   /* SET PT07M001.SY2CLRAB(PT07WIXM) BRIGHT;*/
        PT07W00.PT07W-DATA-CHG = "Y";
      end
    end
      /* check spec offer code in detail row*/
    if (PT07W00.PT07W-DATA-CHG == "N")
      if (PT07W01.RTA-SPEC-OFR-CD[PT07WIXM] != 
      PT07M001.RTA-SPEC-OFR-CD[PT07WIXM])
   /* SET PT07M001.RTA-SPEC-OFR-CD(PT07WIXM) BRIGHT;*/
        PT07W00.PT07W-DATA-CHG = "Y";
      end
    end
      /* check key code in detail row*/
    if (PT07W00.PT07W-DATA-CHG == "N")
      if (PT07W01.RTA-KEY-CD[PT07WIXM] != PT07M001.RTA-KEY-CD[PT07WIXM])
   /* SET PT07M001.RTA-KEY-CD(PT07WIXM) BRIGHT;*/
        PT07W00.PT07W-DATA-CHG = "Y";
      end
    end
      /* check brand code in detail row*/
    if (PT07W00.PT07W-DATA-CHG == "N")
      if (PT07W01.RTA-BRAND-CD[PT07WIXM] != 
      PT07M001.RTA-BRAND-CD[PT07WIXM])
   /* SET PT07M001.RTA-BRAND-CD(PT07WIXM) BRIGHT;*/
        PT07W00.PT07W-DATA-CHG = "Y";
      end
    end
      /* check priority code in detail row*/
    if (PT07W00.PT07W-DATA-CHG == "N")
      if (PT07W01.RTA-PRI-CD[PT07WIXM] != PT07M001.RTA-PRI-CD[PT07WIXM])
   /* SET PT07M001.RTA-PRI-CD(PT07WIXM) BRIGHT;*/
        PT07W00.PT07W-DATA-CHG = "Y";
      end
    end
      /* check first offer date in detail row*/
    if (PT07W00.PT07W-DATA-CHG == "N")
      if (PT07W01.FIRST-OFFER-DT[PT07WIXM] != 
      PT07M001.FIRST-OFFER-DT[PT07WIXM])
   /* SET PT07M001.FIRST-OFFER-DT(PT07WIXM) BRIGHT;*/
        PT07W00.PT07W-DATA-CHG = "Y";
      end
    end
      /* check product release date in detail row*/
    if (PT07W00.PT07W-DATA-CHG == "N")
      if (PT07W01.PROD-REL-DT[PT07WIXM] != 
      PT07M001.PROD-REL-DT[PT07WIXM])
   /* SET PT07M001.PROD-REL-DT(PT07WIXM) BRIGHT;*/
        PT07W00.PT07W-DATA-CHG = "Y";
      end
    end
      /* check dropdead date in detail row*/
    if (PT07W00.PT07W-DATA-CHG == "N")
      if (PT07W01.DROPDEAD-RTA-DT[PT07WIXM] != 
      PT07M001.DROPDEAD-RTA-DT[PT07WIXM])
   /* SET PT07M001.DROPDEAD-RTA-DT(PT07WIXM) BRIGHT;*/
        PT07W00.PT07W-DATA-CHG = "Y";
      end
    end

    PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1; /* increment line index*/

  end

end // end PT07176

// Verify scroll request
Function PT07177()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PT07W00.XXXTSPAG < 2)       /* And no previous pages*/
    PTWREC.XXXMODID = "177"; /* Module identification*/
    converseLib.validationFailed(02); /* No previous page to display*/
  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PT07W00.XXXTSPAG >= PT07W00.TA5TSQIX) /* and no more pages*/
    PTWREC.XXXMODID = "177"; /* Module identification*/
    converseLib.validationFailed(03); /* No more pages to display*/
  end

  if (converseVar.validationMsgNum != 0) /* paging error occurred*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered.*/
   /* ------------------------------------------------------------*/
  PT07178(); /* Highlight any selection*/

  if (converseVar.validationMsgNum != 0) /* paging error occurred*/
    exit stack;
  end

end // end PT07177

// Highlight any selection
Function PT07178()
   /* *************************************************************/
   /* * If PF7 or PF8 is pressed, then                           **/
   /* *    - check for any selection code entered                **/
   /* *    - check for any change in style/color entered         **/
   /* *    - check for any change in ovrd code entered           **/
   /* *    - check for any change in detail rows                 **/
   /* *************************************************************/

   /* ------------------------------------------------------------*/
   /* Indicate an error for any selection that was entered.*/
   /* ------------------------------------------------------------*/
  PT07W00.PT07WIXM = PT07W00.PT07WLIN; /* Initialize line index*/

  while (PT07W00.PT07WIXM > 0) /* Until end of lines*/
    if (PT07M001.PT07M1-SEL[PT07WIXM] > " ") /* Selection entered*/
      PTWREC.XXXMODID = "178"; /* Module identification*/
      set PT07M001.PT07M1-SEL[PT07WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(014); /* Modifications not allowed*/
      PT07W00.PT07WSWF = "N"; /* set format page to no*/
      PT07W00.PT07WSWR = "N"; /* set request for data to no*/
      PT07W00.PT07WBSW = "N"; /* set blank page to no*/
    end
    PT07W00.PT07WIXM = PT07W00.PT07WIXM - 1; /* Decrement line number*/
  end

  if (converseVar.validationMsgNum != 0) /* if any error*/
    return; /* return to the previous process*/
  end

   /* if style/color is entered (for inq) in the enterable fields*/
  if (PT07M001.PT07M1-STY-NBR != PT07W00.PT07W-SY1STNBR
   || PT07M001.PT07M1-SY-COLR-CD-ID != PT07W00.PT07W-SY2CLRID)
    PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
    PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
    PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
    set PT07M001.PT07M1-STY-NBR bold; /* highlight*/
    set PT07M001.PT07M1-SY-COLR-CD-ID bold;
    PTWREC.XXXMODID = "178"; /* Module identification*/
    converseLib.validationFailed(191); /* cannot change style/color with PF7/PF8*/
    return;
  end

   /* if override cd is entered (for inq) in the enterable fields*/
  if (PT07M001.PT07M1-SPEC-OFFR-CD != PT07W00.PT07W-SPEC-OFFR-CD
   || PT07M001.PT07M1-KEY-TYP-CD != PT07W00.PT07W-KEY-TYP-CD
   || PT07M001.PT07M1-BRAND-CD != PT07W00.PT07W-BRAND-CD
   || PT07M001.PT07M1-PRI-CD != PT07W00.PT07W-PRI-CD)
    PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
    PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
    PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
    if (PT07M001.PT07M1-SPEC-OFFR-CD != PT07W00.PT07W-SPEC-OFFR-CD)
      set PT07M001.PT07M1-SPEC-OFFR-CD bold; /* highlight*/
    else
      if (PT07M001.PT07M1-KEY-TYP-CD != PT07W00.PT07W-KEY-TYP-CD)
        set PT07M001.PT07M1-KEY-TYP-CD bold;
      else
        if (PT07M001.PT07M1-BRAND-CD != PT07W00.PT07W-BRAND-CD)
          set PT07M001.PT07M1-BRAND-CD bold;
        else
          if (PT07M001.PT07M1-PRI-CD != PT07W00.PT07W-PRI-CD)
            set PT07M001.PT07M1-PRI-CD bold;
          end
        end
      end
    end
    PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
    PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
    PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
    PTWREC.XXXMODID = "178"; /* Module identification*/
    converseLib.validationFailed(141); /* cannot change override with PF7/PF8*/
    return;
  end

  PT07176(); /* check for any changes in the detail row*/

  if (PT07W00.PT07W-DATA-CHG == "Y") /* if any change is observed*/
    PTWREC.XXXMODID = "178"; /* Module identification*/
    converseLib.validationFailed(192); /* press PA2 to cancel*/
    PT07W00.PT07W-DATA-CHG = "N";
    PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
    PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
    PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
    exit stack;
  end

end // end PT07178

// Validate selection codes
Function PT07179()
   /* ******************************************************************/
   /* * Check for any invalid selection code entered (other than A,S, **/
   /* *                                               C,D,,).         **/
   /* * If security is not cleared, (A)dd,(C)hange,(D)elete is not    **/
   /* *                                               allowed.        **/
   /* * If PF5 is not pressed, (A)dd is not allowed.                  **/
   /* * If PF5 is pressed (during Add), (C)hange,(D)elete,(S)elect is **/
   /* *                                               not allowed.    **/
   /* * If PF5 is pressed (during Add), Style/color MUST be entered   **/
   /* *           when the selection code is entered      &           **/
   /* *           style/color should NOT be spaces if sel code entered**/
   /* * If the selection code is spaces or Delete, data in the detail **/
   /* *                            row should not be changed          **/
   /* * If the selection code is not spaces, then style/color should  **/
   /* *                            not be spaces                      **/
   /* ******************************************************************/

   /* *******************************************************************/
   /* Check for any invalid selection code entered (other than A,S,C,D,,)*/
   /* *******************************************************************/

  PT07W00.PT07WIXM = 1;
  while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN)
    if (PT07M001.PT07M1-SEL[PT07WIXM] == "A" || 
    PT07M001.PT07M1-SEL[PT07WIXM] == "S" || 
    PT07M001.PT07M1-SEL[PT07WIXM] == "C" || 
    PT07M001.PT07M1-SEL[PT07WIXM] == "D" || 
    PT07M001.PT07M1-SEL[PT07WIXM] == " ")
   /* next sentence*/
    else
      set PT07M001.PT07M1-SEL[PT07WIXM] cursor, bold;
      PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
      PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
      PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
      converseLib.validationFailed(180); /* invalid selection code entered*/
      exit stack;
    end
    PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1;
  end

   /* *******************************************************************/
   /* If security is not cleared, (A)dd,(C)hange,(D)elete is not allowed*/
   /* *******************************************************************/

  if (PT07W00.PT07WSSW == "N")
    if ("A" in PT07M001.PT07M1-SEL
     || "C" in PT07M001.PT07M1-SEL
     || "D" in PT07M001.PT07M1-SEL)
      converseLib.validationFailed(102); /* user is not authorized for update*/
      PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
      PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
      PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
      exit stack;
    end
  end

   /* *******************************************************************/
   /* * If PF5 is not pressed, (A)dd is not allowed.                  **/
   /* *******************************************************************/

  if (PT07W00.PT07W-PF5-PRESSED != "Y")
    if ("A" in PT07M001.PT07M1-SEL)
      set PT07M001.PT07M1-SEL[sysVar.arrayIndex] cursor, bold;
      PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
      PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
      PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
      converseLib.validationFailed(188); /* press pf5 to add*/
      exit stack;
    end
  end

   /* *******************************************************************/
   /* If PF5 is pressed (during Add), (C)hange,(D)elete,(S)elect not allowed*/
   /* *******************************************************************/

  if (PT07W00.PT07W-PF5-PRESSED == "Y")
    if ("C" in PT07M001.PT07M1-SEL || 
    "D" in PT07M001.PT07M1-SEL || 
    "S" in PT07M001.PT07M1-SEL)
      set PT07M001.PT07M1-SEL[sysVar.arrayIndex] cursor, bold;
      PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
      PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
      PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
      converseLib.validationFailed(220); /* only Add is valid*/
      exit stack;
    end
  end

   /* *******************************************************************/
   /* If PF5 is pressed (during Add), Style/color MUST be entered     **/
   /* when the selection code is entered & style/color should NOT be  **/
   /* spaces if sel code entered                                      **/
   /* *******************************************************************/

  if (PT07W00.PT07W-PF5-PRESSED == "Y")
    PT07W00.PT07WIXM = 1;
    while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN)
      if (PT07M001.SY1STNBR[PT07WIXM] != " " || 
      PT07M001.SY2CLRID[PT07WIXM] != " ")
        if (PT07M001.PT07M1-SEL[PT07WIXM] == " ")
          if (PT07W03.PROCESSED-FLAG[PT07WIXM] == "Y")
              /* next sentence*/
          else
            set PT07M001.PT07M1-SEL[PT07WIXM] cursor, bold;
            PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
            PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
            PT07W00.PT07WSWR = "N"; /* set request for data sw no*/
            converseLib.validationFailed(139); /* data is changed but not selected*/
            exit stack;
          end
        end
      end
      if (PT07M001.PT07M1-SEL[PT07WIXM] != " ")
        if (PT07M001.SY1STNBR[PT07WIXM] == " " || 
        PT07M001.SY2CLRID[PT07WIXM] == " ")
          set PT07M001.PT07M1-SEL[PT07WIXM] cursor, bold;
          PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
          PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
          PT07W00.PT07WSWR = "N"; /* set request for data sw no*/
          converseLib.validationFailed(200); /* Style or Color cannot be spaces*/
          exit stack;
        end
      end
      PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1;
    end
  end

  if ("S" in PT07M001.PT07M1-SEL) /* if the sel code is Select*/
    PT07180();
    exit stack;
  end

  PT07W00.PT07W-SELECTION-MADE-SW = "N";

   /* *************************************************************/
   /* If the selection code is spaces, data in the detail row   **/
   /* should not be changed                                   **/
   /* This validation misses some of the cases and so, comparing**/
   /* the screen data with the data retrieved from DB is        **/
   /* again performed in later stages of validation             **/
   /* *************************************************************/

  PT07W00.PT07WIXM = 1;
  while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN)
    if (PT07M001.PT07M1-SEL[PT07WIXM] == " ")
      if (PT07W01.SY1STNBR[PT07WIXM] != PT07M001.SY1STNBR[PT07WIXM] || 
      PT07W01.SY2CLRID[PT07WIXM] != PT07M001.SY2CLRID[PT07WIXM] || 
      PT07W01.RTA-SPEC-OFR-CD[PT07WIXM] != 
      PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] || 
      PT07W01.RTA-KEY-CD[PT07WIXM] != 
      PT07M001.RTA-KEY-CD[PT07WIXM] || 
      PT07W01.RTA-BRAND-CD[PT07WIXM] != 
      PT07M001.RTA-BRAND-CD[PT07WIXM] || 
      PT07W01.RTA-PRI-CD[PT07WIXM] != 
      PT07M001.RTA-PRI-CD[PT07WIXM] || 
      PT07W01.PROD-REL-DT[PT07WIXM] != 
      PT07M001.PROD-REL-DT[PT07WIXM] || 
      PT07W01.DROPDEAD-RTA-DT[PT07WIXM] != 
      PT07M001.DROPDEAD-RTA-DT[PT07WIXM])
        set PT07M001.PT07M1-SEL[PT07WIXM] cursor, bold;
        PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
        PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
        PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
        converseLib.validationFailed(139); /* data is changed but not selected*/
        exit stack;
      end
    else
      PT07W00.PT07W-SELECTION-MADE-SW = "Y";
    end
    PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1;
  end

   /* ***************************************************************/
   /* If the selection code is not spaces, style/color should not **/
   /* be spaces                                               **/
   /* ***************************************************************/

  PT07W00.PT07WIXM = 1;
  while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN)
    if (PT07M001.PT07M1-SEL[PT07WIXM] != " ")
      if (PT07M001.SY1STNBR[PT07WIXM] == " " || 
      PT07M001.SY2CLRID[PT07WIXM] == " ")
        set PT07M001.PT07M1-SEL[PT07WIXM] cursor, bold;
        PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
        PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
        PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
        converseLib.validationFailed(180); /* invalid selection code*/
        exit stack;
      end
    end
    PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1;
  end

   /* *************************************************************/
   /* If the selection code is Delete, data in the detail row   **/
   /* should not be changed.                                  **/
   /* This validation is separated from the prev validation for **/
   /* spaces because of the difference in error messages     **/
   /* This validation misses some of the cases and so, comparing**/
   /* the screen data with the data retrieved from DB is        **/
   /* again performed in later stages of validation             **/
   /* *************************************************************/

  PT07W00.PT07WIXM = 1;
  while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN)
    if (PT07M001.PT07M1-SEL[PT07WIXM] == "D")
      if (PT07W01.SY1STNBR[PT07WIXM] != PT07M001.SY1STNBR[PT07WIXM] || 
      PT07W01.SY2CLRID[PT07WIXM] != PT07M001.SY2CLRID[PT07WIXM] || 
      PT07W01.RTA-SPEC-OFR-CD[PT07WIXM] != 
      PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] || 
      PT07W01.RTA-KEY-CD[PT07WIXM] != 
      PT07M001.RTA-KEY-CD[PT07WIXM] || 
      PT07W01.RTA-BRAND-CD[PT07WIXM] != 
      PT07M001.RTA-BRAND-CD[PT07WIXM] || 
      PT07W01.RTA-PRI-CD[PT07WIXM] != 
      PT07M001.RTA-PRI-CD[PT07WIXM] || 
      PT07W01.PROD-REL-DT[PT07WIXM] != 
      PT07M001.PROD-REL-DT[PT07WIXM] || 
      PT07W01.DROPDEAD-RTA-DT[PT07WIXM] != 
      PT07M001.DROPDEAD-RTA-DT[PT07WIXM])
        set PT07M001.PT07M1-SEL[PT07WIXM] cursor, bold;
        PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
        PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
        PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
        converseLib.validationFailed(178); /* entries should not be changed*/
        exit stack;
      end
    end
    PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1;
  end

end // end PT07179

// Validate selection code 'S'
Function PT07180()
   /* ******************************************************************/
   /* * Selection codes 'C' and 'D' are not allowed with 'S'          **/
   /* ******************************************************************/

  if ("S" in PT07M001.PT07M1-SEL)
    if ("C" in PT07M001.PT07M1-SEL || 
    "D" in PT07M001.PT07M1-SEL)
      set PT07M001.PT07M1-SEL[sysVar.arrayIndex] cursor, bold;
      PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
      PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
      PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
      converseLib.validationFailed(13); /* only Selection is allowed*/
      exit stack;
    end
  end

   /* ******************************************************************/
   /* * Selection code 'S' is allowed with only 'P' products          **/
   /* ******************************************************************/

  if ("S" in PT07M001.PT07M1-SEL)
    PT07W00.PT07WIXM = 1;
    while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN)
      if (PT07M001.PT07M1-SEL[PT07WIXM] == "S")
        if (PT07M001.RTA-PRI-CD[PT07WIXM] != "P")
          set PT07M001.PT07M1-SEL[PT07WIXM] cursor, bold;
          PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
          PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
          PT07W00.PT07WSWR = "N"; /* set request for data sw no*/
          converseLib.validationFailed(199); /* Selection code is allowed only for P*/
          exit stack;
        end
      end
      PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1;
    end
  end

   /* ******************************************************************/
   /* * PF5, PF7, PF8, PF9 & PF15 are not allowed with 'S'            **/
   /* ******************************************************************/

  if ("S" in PT07M001.PT07M1-SEL)
    if (converseVar.eventKey is pf5 || 
    converseVar.eventKey is pf7 || 
    converseVar.eventKey is pf8 || 
    converseVar.eventKey is pf9 || 
    converseVar.eventKey is pf15)
      PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
      PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
      PT07W00.PT07WSWR = "N"; /* set request for data sw no*/
      converseLib.validationFailed(183); /* invalid PF key pressed - press enter*/
      exit stack;
    end
  end

   /* ******************************************************************/
   /* * If the selection code 'S', data in the detail row should not  **/
   /* *                               be changed                      **/
   /* ******************************************************************/

  if ("S" in PT07M001.PT07M1-SEL)
    PT07W00.PT07WIXM = 1;
    while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN)
      if (PT07M001.PT07M1-SEL[PT07WIXM] == "S")
        if (PT07W01.SY1STNBR[PT07WIXM] != PT07M001.SY1STNBR[PT07WIXM] || 
        PT07W01.SY2CLRID[PT07WIXM] != PT07M001.SY2CLRID[PT07WIXM] || 
        PT07W01.RTA-SPEC-OFR-CD[PT07WIXM] != 
        PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] || 
        PT07W01.RTA-KEY-CD[PT07WIXM] != 
        PT07M001.RTA-KEY-CD[PT07WIXM] || 
        PT07W01.RTA-BRAND-CD[PT07WIXM] != 
        PT07M001.RTA-BRAND-CD[PT07WIXM] || 
        PT07W01.RTA-PRI-CD[PT07WIXM] != 
        PT07M001.RTA-PRI-CD[PT07WIXM] || 
        PT07W01.PROD-REL-DT[PT07WIXM] != 
        PT07M001.PROD-REL-DT[PT07WIXM] || 
        PT07W01.DROPDEAD-RTA-DT[PT07WIXM] != 
        PT07M001.DROPDEAD-RTA-DT[PT07WIXM])
          set PT07M001.PT07M1-SEL[PT07WIXM] cursor, bold;
          PT07W00.PT07WBSW = "N";
          PT07W00.PT07WSWF = "N";
          PT07W00.PT07WSWR = "N";
          converseLib.validationFailed(192); /* PRESS PA2 TO CANCEL THE CHANGES*/
          exit stack;
        end
      end
      PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1;
    end
  end

   /* ******************************************************************/
   /* * If the sel code is 'S', validate & check for any change and   **/
   /* *                  set the W03 flags and PF17 flag              **/
   /* ******************************************************************/

  if ("S" in PT07M001.PT07M1-SEL)
    PT07188(); /* validate the data and set the flags*/
  end

   /* ******************************************************************/
   /* * If PF17 key is pressed when wait-for-PF17 flag is not set,    **/
   /* *           error message has to be displayed                   **/
   /* ******************************************************************/

  if ("S" in PT07M001.PT07M1-SEL)
    if (converseVar.eventKey is pf17)
      if (PT07W00.PT07W-WAIT-PF17 != "Y")
        PT07W00.PT07W-WAIT-CONFIRM = "N"; /* reset confirm sw*/
        PT07W00.PT07WBSW = "N";
        PT07W00.PT07WSWF = "N";
        PT07W00.PT07WSWR = "N";
        converseLib.validationFailed(183); /* invalid PF key pressed - press enter*/
        exit stack;
      end
    end
   /* ******************************************************************/
   /* * If Enter is pressed along with sel code 'S', message to indica**/
   /* *                  -te "press PF17" has to be displayed         **/
   /* ******************************************************************/
    if (converseVar.eventKey is enter)
      PT07W00.PT07WIXM = 1;
      while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN)
        PT07183-6(); /* load M001 to W01 variables*/
        PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1;
      end
      PT07W00.PT07W-WAIT-PF17 = "Y";
      PT07W00.PT07W-WAIT-CONFIRM = "N";
      PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
      PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
      PT07W00.PT07WSWR = "N"; /* set request for data sw no*/
      converseLib.validationFailed(186); /* press PF17 for the factory infos*/
      exit stack;
    end
  end

   /* ******************************************************************/
   /* * If PF17 key is pressed when wait-for-PF17 flag is set, then   **/
   /* *           load M001 variables to W01 variables and transfer   **/
   /* *           the control to Map 2                                **/
   /* ******************************************************************/

  if ("S" in PT07M001.PT07M1-SEL)
    if (converseVar.eventKey is pf17)
      if (PT07W00.PT07W-WAIT-PF17 == "Y")
        PT07W00.PT07W-WAIT-CONFIRM = "N";
        PT07W00.PT07W-WAIT-PF17 = "N";
        PT07W00.PT07WIXM = 1;
        while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN)
          PT07183-6(); /* load M001 to W01 variables*/
          PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1;
        end
        PT07W00.PT07W-SAVE-PAGE = PT07M001.XXXTSPAG; /* save page*/
        PT07W00.PT07WMAP = "2"; /* set the map handle to 2*/
        PT07W00.PT07WBSW = "N"; /* blank page sw to no*/
        PT07W00.PT07WSWF = "N"; /* format page sw to no*/
        PT07W00.PT07WSWR = "N"; /* request for data sw to no*/
        exit stack;
      end
    end
  end
end // end PT07180

// Compare the data
Function PT07181()
   /* *****************************************************************/
   /* * If both wait-for-confirm & wait-for-PF17 switches are set,   **/
   /* * then PF17 has to be pressed first (for processing 'P' produc **/
   /* * -ts in PT07M002). When coming back from M002 to M001, remain **/
   /* * -ing non-prioritized products are to be processed when PF9   **/
   /* * is pressed in PT07M001                                       **/
   /* *****************************************************************/

   /* *****************************************************************/
   /* * If both wait-for-confirm & wait-for-PF17 switches are set,   **/
   /* *       PF9 should not be pressed                              **/
   /* *****************************************************************/

  if (PT07W00.PT07W-WAIT-CONFIRM == "Y" && 
  PT07W00.PT07W-WAIT-PF17 == "Y")
    if (converseVar.eventKey is pf9)
      PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
      PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
      PT07W00.PT07WSWR = "N"; /* set request for data sw no*/
      converseLib.validationFailed(186); /* press PF17 for the factory infos*/
      exit stack;
    end
  end

   /* *****************************************************************/
   /* * PF9 is pressed without wait-for-confirm switch is set        **/
   /* *****************************************************************/

  if (PT07W00.PT07W-WAIT-CONFIRM == "N")
    if (converseVar.eventKey is pf9)
      PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
      PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
      PT07W00.PT07WSWR = "N"; /* set request for data sw no*/
      converseLib.validationFailed(183); /* invalid PF key is pressed*/
      exit stack;
    end
  end

  PT07176(); /* compare data in the detail row*/

   /* *****************************************************************/
   /* * If any data in the detail row is changed, PF9 or PF17 should **/
   /* * not be pressed. Enter should be pressed first to edit data   **/
   /* *****************************************************************/

  if (PT07W00.PT07W-DATA-CHG == "Y")
    if (((PT07W00.PT07W-WAIT-PF17 == "Y" && 
    PT07W00.PT07W-WAIT-CONFIRM == "N") || 
    (PT07W00.PT07W-WAIT-PF17 == "Y" && 
    PT07W00.PT07W-WAIT-CONFIRM == "Y") || 
    (PT07W00.PT07W-WAIT-PF17 == "N" && 
    PT07W00.PT07W-WAIT-CONFIRM == "Y")))
      if (converseVar.eventKey is pf9 || 
      converseVar.eventKey is pf17)
        PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
        PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
        PT07W00.PT07WSWR = "N"; /* set request for data sw no*/
        converseLib.validationFailed(193); /* data is changed , press enter to edit*/
        exit stack;
      end
    end
   /* IF  PT07W00.PT07W-WAIT-CONFIRM = 'Y' AND*/
   /* PT07W00.PT07W-WAIT-PF17 = 'N';*/
   /* IF EZEAID IS PF9 OR*/
   /* EZEAID IS PF17;*/
   /* MOVE 'N' TO PT07W00.PT07WBSW;/* set display blank page to no*/
   /* MOVE 'N' TO PT07W00.PT07WSWF;/* set format map switch to no*/
   /* MOVE 'N' TO PT07W00.PT07WSWR;/* set request for data sw no*/
   /* MOVE 193 TO EZEMNO; /* data is changed , press enter to edit*/
   /* EZEFLO;*/
   /* END;*/
   /* END;*/
  end

   /* *****************************************************************/
   /* * If the data in the detail row is not changed,                **/
   /* *  - Enter or PF9 is invalid when wait-for-PF17 is yes         **/
   /* *  - Enter or PF17 is pressed when wait-for-confirm is yes     **/
   /* *****************************************************************/

  if (PT07W00.PT07W-DATA-CHG == "N")
    if (((PT07W00.PT07W-WAIT-PF17 == "Y" && 
    PT07W00.PT07W-WAIT-CONFIRM == "N") || 
    (PT07W00.PT07W-WAIT-PF17 == "Y" && 
    PT07W00.PT07W-WAIT-CONFIRM == "Y")))
      if (converseVar.eventKey is enter || 
      converseVar.eventKey is pf9)
        PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
        PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
        PT07W00.PT07WSWR = "N"; /* set request for data sw no*/
        converseLib.validationFailed(186); /* press PF17 for the factory information*/
        exit stack;
      end
      return;
    end
    if (PT07W00.PT07W-WAIT-CONFIRM == "Y")
      if (converseVar.eventKey is enter || 
      converseVar.eventKey is pf17)
        PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
        PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
        PT07W00.PT07WSWR = "N"; /* set request for data sw no*/
        converseLib.validationFailed(189); /* press PF9 to confirm*/
        exit stack;
      end
    end
  end
end // end PT07181

// Validation & setting up flags
Function PT07182()

   /* branch the control based on 'A', or 'C'/'D', or ' '*/

  if ("A" in PT07M001.PT07M1-SEL)
    PT07185(); /* validate & set-up the flags for Add*/
  else
    if ("C" in PT07M001.PT07M1-SEL || 
    "D" in PT07M001.PT07M1-SEL)
      PT07186(); /* validate & set-up flags for 'C'/'D'*/
    else
      PT07187(); /* validate & set-up flags if all sel cd spaces*/
    end
  end

end // end PT07182

// VALIDATE DETAIL ROWS
Function PT07183()
  PT07183-3(); /* Verify Override Codes*/

  PT07183-4(); /* Verify override code/ date relationship*/

  if (converseVar.validationMsgNum != 0)
    PT07W00.PT07WBSW = "N";
    PT07W00.PT07WSWF = "N";
    PT07W00.PT07WSWR = "N";
    PT07W00.PT07W-WAIT-CONFIRM = "N";
    PT07W00.PT07W-WAIT-PF17 = "N";
    exit stack;
  end

  PT07183-5(); /* Verify the dates entered*/

  if (converseVar.validationMsgNum != 0)
    PT07W00.PT07WBSW = "N";
    PT07W00.PT07WSWF = "N";
    PT07W00.PT07WSWR = "N";
    PT07W00.PT07W-WAIT-CONFIRM = "N";
    PT07W00.PT07W-WAIT-PF17 = "N";
    exit stack;
  end

end // end PT07183

// VALIDATE STYLE/COLOR
Function PT07183-1()

   /* IF PT07M001.SY2CLRID(PT07WIXM) EQ ' ';/* If color not entered*/
    /* MOVE '156' TO PTWREC.XXXMODID; /* Module identification*/
    /* SET PT07M001.SY2CLRID(PT07WIXM) CURSOR,BRIGHT;/* Highlight*/
    /* MOVE 029 TO EZEMNO;            /* Indicate missing*/
    /* EZERTN;*/
   /* END;*/

   /* IF PT07M001.SY1STNBR(PT07WIXM) EQ ' ';/* If color not entered*/
    /* MOVE '156' TO PTWREC.XXXMODID; /* Module identification*/
    /* SET PT07M001.SY1STNBR(PT07WIXM) CURSOR,BRIGHT;/* Highlight*/
    /* MOVE 028 TO EZEMNO;            /* Indicate missing*/
    /* EZERTN;*/
   /* END;*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

  PT07183-2(); /* SELECT AGAINST VSYCLR01 TABLE*/

  if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
    PTWREC.XXXMODID = "183"; /* Module identification*/
    set PT07M001.SY1STNBR[PT07WIXM] cursor, bold; /* Highlight*/
    set PT07M001.SY2CLRID[PT07WIXM] bold; /* Highlight*/
    converseLib.validationFailed(095); /* Indicate product not found*/
    PT07W00.PT07WBSW = "N";
    PT07W00.PT07WSWF = "N";
    PT07W00.PT07WSWR = "N";
    PT07W00.PT07W-WAIT-CONFIRM = "N";
    PT07W00.PT07W-WAIT-PF17 = "N";
    exit stack;
  end

end // end PT07183-1

// Select SYCLR
Function PT07183-2()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set PG2REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/
  PG2REC.SY1STNBR = PT07M001.SY1STNBR[PT07WIXM]; /* style nbr*/
  PG2REC.SY2CLRID = PT07M001.SY2CLRID[PT07WIXM]; /* color cd*/
  PG2REC.XDMCD = "00"; /* dimension*/
  PG2REC.XGPCD = PT07W00.XGPCD; /* GPC cd*/

   /* ------------------------------------------------------------*/
   /* Select FROM DPRODG.VSYCLR01*/
   /* ------------------------------------------------------------*/
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* row not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "183"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(011); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(010); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07183-2

// Verify the Ovrd codes(array)
Function PT07183-3()

  PT07W-CODE-FOUND-SW = "N";

  if (PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] == "  ")
     /* Next sentence*/
  else
    set VRTAOC01 empty;
    VRTAOC01.PT-RTA-OVRD-TYP-CD = "S";
    VRTAOC01.PT-RTA-OVRD-CD = PT07M001.RTA-SPEC-OFR-CD[PT07WIXM];
    PT07184(); /* retrieve override code*/
    if (PT07W-CODE-FOUND-SW == "Y")
     /* Next Sentence*/
    else
      converseLib.validationFailed(174);
      set PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] bold, cursor; /* hilite*/
      PT07W00.PT07WBSW = "N";
      PT07W00.PT07WSWF = "N";
      PT07W00.PT07WSWR = "N";
      PT07W00.PT07W-WAIT-CONFIRM = "N";
      PT07W00.PT07W-WAIT-PF17 = "N";
      exit stack;
    end
  end

  if (PT07M001.RTA-KEY-CD[PT07WIXM] == "  ")
   /* Next Sentence*/
  else
    set VRTAOC01 empty;
    VRTAOC01.PT-RTA-OVRD-TYP-CD = "K";
    VRTAOC01.PT-RTA-OVRD-CD = PT07M001.RTA-KEY-CD[PT07WIXM];
    PT07184();
    if (PT07W-CODE-FOUND-SW == "Y")
         /* Next Sentence*/
    else
      converseLib.validationFailed(175);
      set PT07M001.RTA-KEY-CD[PT07WIXM] bold, cursor; /* hilite*/
      PT07W00.PT07WBSW = "N";
      PT07W00.PT07WSWF = "N";
      PT07W00.PT07WSWR = "N";
      PT07W00.PT07W-WAIT-CONFIRM = "N";
      PT07W00.PT07W-WAIT-PF17 = "N";
      exit stack;
    end
  end

  if (PT07M001.RTA-BRAND-CD[PT07WIXM] == "  ")
     /* Next Sentence*/
  else
    set VRTAOC01 empty;
    VRTAOC01.PT-RTA-OVRD-TYP-CD = "B";
    VRTAOC01.PT-RTA-OVRD-CD = PT07M001.RTA-BRAND-CD[PT07WIXM];
    PT07184();
    if (PT07W-CODE-FOUND-SW == "Y")
        /* Next Sentence*/
    else
      converseLib.validationFailed(176);
      set PT07M001.RTA-BRAND-CD[PT07WIXM] bold, cursor; /* hilite*/
      PT07W00.PT07WBSW = "N";
      PT07W00.PT07WSWF = "N";
      PT07W00.PT07WSWR = "N";
      PT07W00.PT07W-WAIT-CONFIRM = "N";
      PT07W00.PT07W-WAIT-PF17 = "N";
      exit stack;
    end
  end

  if (PT07M001.RTA-PRI-CD[PT07WIXM] == "  ")
   /* Next Sentence*/
  else
    set VRTAOC01 empty;
    VRTAOC01.PT-RTA-OVRD-TYP-CD = "P";
    VRTAOC01.PT-RTA-OVRD-CD = PT07M001.RTA-PRI-CD[PT07WIXM];
    PT07184();
    if (PT07W-CODE-FOUND-SW == "Y")
     /* Next Sentence*/
    else
      converseLib.validationFailed(177);
      set PT07M001.RTA-PRI-CD[PT07WIXM] bold, cursor; /* hilite*/
      PT07W00.PT07WBSW = "N";
      PT07W00.PT07WSWF = "N";
      PT07W00.PT07WSWR = "N";
      PT07W00.PT07W-WAIT-CONFIRM = "N";
      PT07W00.PT07W-WAIT-PF17 = "N";
      exit stack;
    end
  end

  if (PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] == "  "
   && PT07M001.RTA-KEY-CD[PT07WIXM] == "  "
   && PT07M001.RTA-BRAND-CD[PT07WIXM] == "  "
   && PT07M001.RTA-PRI-CD[PT07WIXM] == "  ")
    converseLib.validationFailed(185);
    set PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] cursor, bold;
    set PT07M001.RTA-KEY-CD[PT07WIXM] bold;
    set PT07M001.RTA-BRAND-CD[PT07WIXM] bold;
    set PT07M001.RTA-PRI-CD[PT07WIXM] bold;
    PT07W00.PT07WBSW = "N";
    PT07W00.PT07WSWF = "N";
    PT07W00.PT07WSWR = "N";
    PT07W00.PT07W-WAIT-CONFIRM = "N";
    PT07W00.PT07W-WAIT-PF17 = "N";
    exit stack;
  end

  if (PT07M001.RTA-KEY-CD[PT07WIXM] == "L" && 
  PT07M001.RTA-PRI-CD[PT07WIXM] == "P")
    converseLib.validationFailed(213); /* 'L' & 'P' - not allowed*/
    set PT07M001.RTA-KEY-CD[PT07WIXM] bold;
    set PT07M001.RTA-PRI-CD[PT07WIXM] bold;
    PT07W00.PT07WBSW = "N";
    PT07W00.PT07WSWF = "N";
    PT07W00.PT07WSWR = "N";
    PT07W00.PT07W-WAIT-CONFIRM = "N";
    PT07W00.PT07W-WAIT-PF17 = "N";
    exit stack;
  end

end // end PT07183-3

// Verify Override code/Date rela
Function PT07183-4()

  if (PT07M001.RTA-KEY-CD[PT07WIXM] == "L "
   || PT07M001.RTA-KEY-CD[PT07WIXM] == "C "
   || PT07M001.RTA-BRAND-CD[PT07WIXM] == "R ")
    if (PT07M001.PROD-REL-DT[PT07WIXM] == 0)
      converseLib.validationFailed(144); /* blank date allowed only for E & P*/
      set PT07M001.PROD-REL-DT[PT07WIXM] cursor, bold;
      PT07W00.PT07WBSW = "N";
      PT07W00.PT07WSWF = "N";
      PT07W00.PT07WSWR = "N";
      PT07W00.PT07W-WAIT-CONFIRM = "N";
      PT07W00.PT07W-WAIT-PF17 = "N";
      exit stack;
    end
  end

  if (PT07M001.RTA-KEY-CD[PT07WIXM] == "L ")
    if (PT07M001.DROPDEAD-RTA-DT[PT07WIXM] == 0)
      converseLib.validationFailed(217); /* drop dead date is mandatory for 'L'*/
      set PT07M001.DROPDEAD-RTA-DT[PT07WIXM] cursor, bold;
      PT07W00.PT07WBSW = "N";
      PT07W00.PT07WSWF = "N";
      PT07W00.PT07WSWR = "N";
      PT07W00.PT07W-WAIT-CONFIRM = "N";
      PT07W00.PT07W-WAIT-PF17 = "N";
      exit stack;
    end
  end

  if (PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] == "E "
   && PT07M001.RTA-KEY-CD[PT07WIXM] == "  "
   && PT07M001.RTA-BRAND-CD[PT07WIXM] == "  "
   && PT07M001.RTA-PRI-CD[PT07WIXM] == "  ")

    if (PT07M001.PROD-REL-DT[PT07WIXM] != 0)
      converseLib.validationFailed(218); /* Date(s) should not be entered*/
   /* MOVE 81 TO EZEMNO;*/
      set PT07M001.PROD-REL-DT[PT07WIXM] cursor, bold;
      return;
    end

    if (PT07M001.DROPDEAD-RTA-DT[PT07WIXM] != 0)
   /* MOVE 81 TO EZEMNO;*/
      converseLib.validationFailed(218); /* Date(s) should not be entered*/
      set PT07M001.DROPDEAD-RTA-DT[PT07WIXM] cursor, bold;
      return;
    end
  end

   /* IF PT07M001.RTA-SPEC-OFR-CD(PT07WIXM) = '  '*/
   /* AND PT07M001.RTA-KEY-CD(PT07WIXM) = 'S '*/
   /* AND PT07M001.RTA-BRAND-CD(PT07WIXM) = '  '*/
   /* AND PT07M001.RTA-PRI-CD(PT07WIXM) = '  ';*/
   /* ;*/
   /* IF PT07M001.PROD-REL-DT(PT07WIXM) NE 0;*/
   /* MOVE 81 TO EZEMNO;*/
   /* SET PT07M001.PROD-REL-DT(PT07WIXM) CURSOR,BRIGHT;*/
   /* EZERTN;*/
   /* END;*/
   /* ;*/
   /* IF PT07M001.DROPDEAD-RTA-DT(PT07WIXM) NE 0;*/
   /* MOVE 81 TO EZEMNO;*/
   /* SET PT07M001.DROPDEAD-RTA-DT(PT07WIXM) CURSOR,BRIGHT;*/
   /* EZERTN;*/
   /* END;*/
   /* END;*/

  if (PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] == "  "
   && PT07M001.RTA-KEY-CD[PT07WIXM] == "  "
   && PT07M001.RTA-BRAND-CD[PT07WIXM] == "  "
   && PT07M001.RTA-PRI-CD[PT07WIXM] == "P ")

    if (PT07M001.PROD-REL-DT[PT07WIXM] != 0)
   /* MOVE 81 TO EZEMNO;*/
      converseLib.validationFailed(218); /* Date(s) should not be entered*/
      set PT07M001.PROD-REL-DT[PT07WIXM] cursor, bold;
      return;
    end

    if (PT07M001.DROPDEAD-RTA-DT[PT07WIXM] != 0)
   /* MOVE 81 TO EZEMNO;*/
      converseLib.validationFailed(218); /* Date(s) should not be entered*/
      set PT07M001.DROPDEAD-RTA-DT[PT07WIXM] cursor, bold;
      return;
    end
  end

  if (PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] == "E "
   && PT07M001.RTA-KEY-CD[PT07WIXM] == "  "
   && PT07M001.RTA-BRAND-CD[PT07WIXM] == "  "
   && PT07M001.RTA-PRI-CD[PT07WIXM] == "P ")

    if (PT07M001.PROD-REL-DT[PT07WIXM] != 0)
      converseLib.validationFailed(218); /* Date(s) should not be entered*/
      set PT07M001.PROD-REL-DT[PT07WIXM] cursor, bold;
      return;
    end

    if (PT07M001.DROPDEAD-RTA-DT[PT07WIXM] != 0)
      converseLib.validationFailed(218); /* Date(s) should not be entered*/
      set PT07M001.DROPDEAD-RTA-DT[PT07WIXM] cursor, bold;
      return;
    end
  end

end // end PT07183-4

// Verify DDD and Prod Rel Date
Function PT07183-5()

  if (PT07M001.PROD-REL-DT[PT07WIXM] != 0)

    PT07W00.PT07W-WS-YYMMDD-FORMAT = PT07M001.PROD-REL-DT[PT07WIXM];
    PT07W00.PT07W-WS-CCYYMMDD-FORMAT = 0;

   /* Validate day*/
    if (PT07W00.PT07W-WS-DD < 1
     || PT07W00.PT07W-WS-DD > 31)
      converseLib.validationFailed(073);
      set PT07M001.PROD-REL-DT[PT07WIXM] cursor, bold;
      return;
    else
      PT07W00.PT07W-WS-DD-NUM = PT07W00.PT07W-WS-DD;
    end

    if (PT07W00.PT07W-WS-MM < 1
     || PT07W00.PT07W-WS-MM > 12)
      converseLib.validationFailed(072);
      set PT07M001.PROD-REL-DT[PT07WIXM] cursor, bold;
      return;
    else
      PT07W00.PT07W-WS-MM-NUM = PT07W00.PT07W-WS-MM;
    end

    PT07W00.PT07W-WS-YY-NUM = PT07W00.PT07W-WS-YY;

    if (PT07W00.PT07W-WS-YY < 50)
      PT07W00.PT07W-WS-CC-NUM = 20;
    else
      PT07W00.PT07W-WS-CC-NUM = 19;
    end
    PT07W00.PT07W-FORMAT-DATE = PT07W00.PT07W-WS-CCYYMMDD-FORMAT;
   /* ------------------------------------------------------------*/
   /* Verify valid date*/
   /* check for valid month/day/year combination:*/
   /* ------------------------------------------------------------*/
    set TA2REC empty;
    TA2REC.TA2GRGGN = PT07W00.PT07W-FORMAT-DATE;
    TA2REC.TA2DTOPT = "GREGJUL ";
    TA2REC.TA2GRTYP = "G";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    if (TA2REC.TA2RTNCD != 0) /* bad date returned?*/
      converseLib.validationFailed(081); /* invalid mmddyy combination*/
      set PT07M001.PROD-REL-DT[PT07WIXM] cursor, bold;
      return;
    end
  end

  if (PT07M001.DROPDEAD-RTA-DT[PT07WIXM] != 0)

    PT07W00.PT07W-WS-YYMMDD-FORMAT = PT07M001.DROPDEAD-RTA-DT[PT07WIXM];
    PT07W00.PT07W-WS-CCYYMMDD-FORMAT = 0;

   /* Validate day*/
    if (PT07W00.PT07W-WS-DD < 1
     || PT07W00.PT07W-WS-DD > 31)
      converseLib.validationFailed(073);
      set PT07M001.DROPDEAD-RTA-DT[PT07WIXM] cursor, bold;
      return;
    else
      PT07W00.PT07W-WS-DD-NUM = PT07W00.PT07W-WS-DD;
    end

    if (PT07W00.PT07W-WS-MM < 1
     || PT07W00.PT07W-WS-MM > 12)
      converseLib.validationFailed(072);
      set PT07M001.DROPDEAD-RTA-DT[PT07WIXM] cursor, bold;
      return;
    else
      PT07W00.PT07W-WS-MM-NUM = PT07W00.PT07W-WS-MM;
    end

    PT07W00.PT07W-WS-YY-NUM = PT07W00.PT07W-WS-YY;

    if (PT07W00.PT07W-WS-YY < 50)
      PT07W00.PT07W-WS-CC-NUM = 20;
    else
      PT07W00.PT07W-WS-CC-NUM = 19;
    end
    PT07W00.PT07W-FORMAT-DATE = PT07W00.PT07W-WS-CCYYMMDD-FORMAT;
   /* ------------------------------------------------------------*/
   /* Verify valid date*/
   /* check for valid month/day/year combination:*/
   /* ------------------------------------------------------------*/
    set TA2REC empty;
    TA2REC.TA2GRGGN = PT07W00.PT07W-FORMAT-DATE;
    TA2REC.TA2DTOPT = "GREGJUL ";
    TA2REC.TA2GRTYP = "G";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    if (TA2REC.TA2RTNCD != 0) /* bad date returned?*/
      converseLib.validationFailed(081); /* invalid mmddyy combination*/
      set PT07M001.DROPDEAD-RTA-DT[PT07WIXM] cursor, bold;
      return;
    end

    if ((PT07W00.PT07W-FORMAT-DATE < PT07W00.PT07W-SAVE-MIN-DATE)
     || (PT07W00.PT07W-FORMAT-DATE >= PT07W00.PT07W-SAVE-MAX-DATE))
      set PT07M001.DROPDEAD-RTA-DT[PT07WIXM] cursor, bold;
      converseLib.validationFailed(133); /* Indicate need valid date range*/
    end

  end

end // end PT07183-5

// Load Validated M001 to W01
Function PT07183-6()

  PT07W01.PT07WSEL[PT07WIXM] = PT07M001.PT07M1-SEL[PT07WIXM];
  PT07W01.SY1STNBR[PT07WIXM] = PT07M001.SY1STNBR[PT07WIXM];
  PT07W01.SY2CLRID[PT07WIXM] = PT07M001.SY2CLRID[PT07WIXM];
  PT07W01.SY1SSTNM[PT07WIXM] = PT07M001.SY1SSTNM[PT07WIXM];
  PT07W01.SY2CLRAB[PT07WIXM] = PT07M001.SY2CLRAB[PT07WIXM];
  PT07W01.RTA-SPEC-OFR-CD[PT07WIXM] = PT07M001.RTA-SPEC-OFR-CD[PT07WIXM];
  PT07W01.RTA-KEY-CD[PT07WIXM] = PT07M001.RTA-KEY-CD[PT07WIXM];
  PT07W01.RTA-BRAND-CD[PT07WIXM] = PT07M001.RTA-BRAND-CD[PT07WIXM];
  PT07W01.RTA-PRI-CD[PT07WIXM] = PT07M001.RTA-PRI-CD[PT07WIXM];
  PT07W01.FIRST-OFFER-DT[PT07WIXM] = PT07M001.FIRST-OFFER-DT[PT07WIXM];
  PT07W01.PROD-REL-DT[PT07WIXM] = PT07M001.PROD-REL-DT[PT07WIXM];
  PT07W01.DROPDEAD-RTA-DT[PT07WIXM] = PT07M001.DROPDEAD-RTA-DT[PT07WIXM];

end // end PT07183-6

// Retrieve Ovrd code
Function PT07184()
  PT07W-CODE-FOUND-SW = "N";

  try
    call "VRTAOC01" ("S ", SQLCA, VRTAOC01) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* Row not found*/

      if (SQLCA.VAGen_SQLCODE == +0) /* Normal return code*/
        PT07W-CODE-FOUND-SW = "Y";
      else
        PT07W-CODE-FOUND-SW = "N";
      end
      return;
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "184"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTAOC01"; /* Table view name*/
  TA1REC.TA1TBLKE = VRTAOC01.RTAOC-GRP-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07184

// Set-up flags for Add
Function PT07185()
   /* ****************************************************************/
   /* * Re-set the PF17 & confirm sw to No.                         **/
   /* * P-entered flag is to identify any 'P'rioritized product is  **/
   /* *   entered in screen. P-retieved flag is to identify any 'P' **/
   /* *   exists in the database.                                   **/
   /* * Processed flag is to indicate whether the detail row is     **/
   /* *           processed or not.                                 **/
   /* * Operation flag is used to Update the tables                 **/
   /* * Trans-P-rec flag is used to indicate ONLY those products are**/
   /* *           to be displayed in screen PT07M002                **/
   /* ****************************************************************/

  PT07W00.PT07W-WAIT-PF17 = "N"; /* re-set wait-for-PF17 sw to no*/
  PT07W00.PT07W-WAIT-CONFIRM = "N"; /* re-set wait-for-confirm sw*/
  PT07W00.PT07WIXM = 1;

  while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN) /* do 11 times*/
    PT07W00.PT07W-P-ENTERED = "N"; /* re-set P-entered sw to no*/
    PT07W00.PT07W-P-RETRIEVED = "N"; /* re-set P-retrieved sw to no*/
    if (PT07M001.PT07M1-SEL[PT07WIXM] == " " && 
    PT07M001.SY1STNBR[PT07WIXM] == " " && 
    PT07M001.SY2CLRID[PT07WIXM] == " ") /* if no product in a detail row*/
      PT07W03.PROCESSED-FLAG[PT07WIXM] = " "; /* set W03 spaces*/
      PT07W03.OPERATION-FLAG[PT07WIXM] = " ";
      PT07W03.TRANS-P-REC[PT07WIXM] = " ";
    else
      if (PT07W03.PROCESSED-FLAG[PT07WIXM] == "Y" || 
      PT07W03.PROCESSED-FLAG[PT07WIXM] == "S") /* if already processed*/
                                                 /* or skipped, then*/
        PT07W03.OPERATION-FLAG[PT07WIXM] = "N "; /* no need to*/
                                                         /* update tables*/
      else
        PT07W03.PROCESSED-FLAG[PT07WIXM] = " "; /* reset W03 flags*/
        PT07W03.OPERATION-FLAG[PT07WIXM] = " ";
        PT07W03.TRANS-P-REC[PT07WIXM] = " ";
        PT07185-1();
      end
    end
    PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1; /* increment the index*/
  end

end // end PT07185

// Set-up flags for Add
Function PT07185-1()
  if (PT07M001.PT07M1-SEL[PT07WIXM] == " ")
    return;
  end

  PT07183-1(); /* validate style/color in VSYCLR01*/
  PT07192(); /* check for existence in VFORCD01*/
  if (SQLCA.VAGen_SQLCODE == +100) /* if not found*/
    PT07M001.SY1SSTNM[PT07WIXM] = PG2REC.SY1SSTNM;
    PT07M001.SY2CLRAB[PT07WIXM] = PG2REC.SY2CLRAB;
    PT07W00.PT07W-WS-YYMMDD-FORMAT = 0;
    PT07W00.PT07W-WS-CCYYMMDD-FORMAT = PG2REC.SY2FOFBD;
    PT07W00.PT07W-WS-YY = PT07W00.PT07W-WS-YY-NUM;
    PT07W00.PT07W-WS-MM = PT07W00.PT07W-WS-MM-NUM;
    PT07W00.PT07W-WS-DD = PT07W00.PT07W-WS-DD-NUM;
    PT07W01.FIRST-OFFER-DT[PT07WIXM] = PT07W00.PT07W-WS-YYMMDD-FORMAT;
    PT07M001.FIRST-OFFER-DT[PT07WIXM] = PT07W01.FIRST-OFFER-DT[PT07WIXM];
    PT07183(); /* validate the fields entered in the screen*/
    PT07191(); /* check for any P-code entered*/
    PT07193(); /* set-up the operation flag*/
  else
    PT07M001.SY1SSTNM[PT07WIXM] = PG2REC.SY1SSTNM;
    PT07M001.SY2CLRAB[PT07WIXM] = PG2REC.SY2CLRAB;
    PT07W00.PT07W-WS-YYMMDD-FORMAT = 0;
    PT07W00.PT07W-WS-CCYYMMDD-FORMAT = PG2REC.SY2FOFBD;
    PT07W00.PT07W-WS-YY = PT07W00.PT07W-WS-YY-NUM;
    PT07W00.PT07W-WS-MM = PT07W00.PT07W-WS-MM-NUM;
    PT07W00.PT07W-WS-DD = PT07W00.PT07W-WS-DD-NUM;
    PT07W01.FIRST-OFFER-DT[PT07WIXM] = PT07W00.PT07W-WS-YYMMDD-FORMAT;
    PT07M001.FIRST-OFFER-DT[PT07WIXM] = PT07W01.FIRST-OFFER-DT[PT07WIXM];
    PT07193-1(); /* overlap the data retrieved with entered data*/
    PT07183(); /* validate the fields entered in the screen*/
    PT07191(); /* check for any P-code entered*/
    PT07193-2(); /* set-up the operation flag*/
  end

end // end PT07185-1

// Set-up flags for Change/Delete
Function PT07186()
   /* ****************************************************************/
   /* * Re-set the PF17 & confirm sw to No.                         **/
   /* * P-entered flag is to identify any 'P'rioritized product is  **/
   /* *   entered in screen. P-retieved flag is to identify any 'P' **/
   /* *   exists in the database.                                   **/
   /* * Processed flag is to indicate whether the detail row is     **/
   /* *           processed or not.                                 **/
   /* * Operation flag is used to Update the tables                 **/
   /* * Trans-P-rec flag is used to indicate ONLY those products are**/
   /* *           to be displayed in screen PT07M002                **/
   /* ****************************************************************/

  PT07W00.PT07W-WAIT-PF17 = "N";
  PT07W00.PT07W-WAIT-CONFIRM = "N";
  PT07W00.PT07WIXM = 1;

  while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN)
    PT07W00.PT07W-P-ENTERED = "N";
    PT07W00.PT07W-P-RETRIEVED = "N";
    if (PT07M001.PT07M1-SEL[PT07WIXM] == " " && 
    PT07M001.SY1STNBR[PT07WIXM] == " " && 
    PT07M001.SY2CLRID[PT07WIXM] == " ") /* if no product in detail row*/
      PT07W03.PROCESSED-FLAG[PT07WIXM] = " "; /* reset W03 flags*/
      PT07W03.OPERATION-FLAG[PT07WIXM] = " ";
      PT07W03.TRANS-P-REC[PT07WIXM] = " ";
    else
      if (PT07W03.PROCESSED-FLAG[PT07WIXM] == "Y" || 
      PT07W03.PROCESSED-FLAG[PT07WIXM] == "S") /* if already processed*/
                                                  /* or skipped, then*/
        PT07W03.OPERATION-FLAG[PT07WIXM] = "N "; /* no need to*/
                                                         /* update tables*/
      else
        PT07W03.PROCESSED-FLAG[PT07WIXM] = " ";
        PT07W03.OPERATION-FLAG[PT07WIXM] = " ";
        PT07W03.TRANS-P-REC[PT07WIXM] = " "; /* reset W03 flags*/
        PT07186-1(); /**/
      end
    end
    PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1;
  end

end // end PT07186

// Set-up flags for Change/Delete
Function PT07186-1()
  PT07183-1(); /* validate style/color in VSYCLR01*/
  PT07192(); /* check for existence in VFORCD01*/
  if (SQLCA.VAGen_SQLCODE == +100) /* if not found*/
    set PT07M001.SY1STNBR[PT07WIXM] cursor, bold; /* Highlight*/
    set PT07M001.SY2CLRID[PT07WIXM] bold; /* Highlight*/
    converseLib.validationFailed(095); /* Indicate product not found*/
    PT07W00.PT07WBSW = "N";
    PT07W00.PT07WSWF = "N";
    PT07W00.PT07WSWR = "N";
    PT07W00.PT07W-WAIT-CONFIRM = "N";
    PT07W00.PT07W-WAIT-PF17 = "N";
    exit stack;
  else
    if (PT07M001.PT07M1-SEL[PT07WIXM] == "C")
      PT07183(); /* validate the fields entered in the screen*/
      PT07191(); /* check for any P-code entered*/
      PT07193-3(); /* set-up the operation flag*/
    else
      if (PT07M001.PT07M1-SEL[PT07WIXM] == "D" || 
      PT07M001.PT07M1-SEL[PT07WIXM] == " ")
   /* PERFORM PT07183-3; /* Verify Override Codes*/
   /* IF EZEMNO NE 0;*/
   /* MOVE 'N' TO PT07W00.PT07WBSW;*/
   /* MOVE 'N' TO PT07W00.PT07WSWF;*/
   /* MOVE 'N' TO PT07W00.PT07WSWR;*/
   /* MOVE 'N' TO PT07W00.PT07W-WAIT-CONFIRM;*/
   /* MOVE 'N' TO PT07W00.PT07W-WAIT-PF17;*/
   /* EZEFLO;*/
   /* END;*/
   /* PERFORM PT07183-5; /* Verify the dates entered*/
   /* IF EZEMNO NE 0;*/
   /* MOVE 'N' TO PT07W00.PT07WBSW;*/
   /* MOVE 'N' TO PT07W00.PT07WSWF;*/
   /* MOVE 'N' TO PT07W00.PT07WSWR;*/
   /* MOVE 'N' TO PT07W00.PT07W-WAIT-CONFIRM;*/
   /* MOVE 'N' TO PT07W00.PT07W-WAIT-PF17;*/
   /* EZEFLO;*/
   /* END;*/
        PT07194(); /* check for any changes made and set the flag*/
      end
    end
  end

end // end PT07186-1

// No selections made
Function PT07187()
   /* ****************************************************************/
   /* * Re-set the PF17 & confirm sw to No.                         **/
   /* * P-entered flag is to identify any 'P'rioritized product is  **/
   /* *   entered in screen. P-retieved flag is to identify any 'P' **/
   /* *   exists in the database.                                   **/
   /* * Processed flag is to indicate whether the detail row is     **/
   /* *           processed or not.                                 **/
   /* * Operation flag is used to Update the tables                 **/
   /* * Trans-P-rec flag is used to indicate ONLY those products are**/
   /* *           to be displayed in screen PT07M002                **/
   /* ****************************************************************/

  PT07W00.PT07W-SELECTION-MADE-SW = "N";
  PT07W00.PT07W-WAIT-PF17 = "N";
  PT07W00.PT07W-WAIT-CONFIRM = "N";
  PT07W00.PT07WIXM = 1;

  while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN)
    PT07W00.PT07W-P-ENTERED = "N";
    PT07W00.PT07W-P-RETRIEVED = "N";
    if (PT07M001.PT07M1-SEL[PT07WIXM] == " " && 
    PT07M001.SY1STNBR[PT07WIXM] == " " && 
    PT07M001.SY2CLRID[PT07WIXM] == " ") /* if no entry in detail row*/
      PT07W03.PROCESSED-FLAG[PT07WIXM] = " ";
      PT07W03.OPERATION-FLAG[PT07WIXM] = " ";
      PT07W03.TRANS-P-REC[PT07WIXM] = " "; /* reset W03 flags*/
    else
      if (PT07W03.PROCESSED-FLAG[PT07WIXM] == "Y" || 
      PT07W03.PROCESSED-FLAG[PT07WIXM] == "S") /* if already processed*/
        PT07W03.OPERATION-FLAG[PT07WIXM] = "N "; /* no updates*/
      else
        PT07W03.PROCESSED-FLAG[PT07WIXM] = " ";
        PT07W03.OPERATION-FLAG[PT07WIXM] = " ";
        PT07W03.TRANS-P-REC[PT07WIXM] = " ";
        PT07187-1(); /**/
      end
    end
    PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1;
  end

  if (PT07W00.PT07W-WAIT-PF17 == "Y") /* if wait-for-PF17 flag is set*/
    if (converseVar.eventKey is pf17)
      if (PT07W00.PT07WSSW-INQ-P == "Y")
           /* next sentence*/
      else
        PT07W00.PT07WBSW = "N";
        PT07W00.PT07WSWF = "N";
        PT07W00.PT07WSWR = "N";
        PT07W00.PT07W-WAIT-CONFIRM = "N";
        PT07W00.PT07W-WAIT-PF17 = "N";
        converseLib.validationFailed(215); /* user is not authorized for P products*/
        exit stack;
      end

      PT07W00.PT07W-SAVE-PAGE = PT07M001.XXXTSPAG; /* save page no*/
      PT07W00.PT07W-WAIT-PF17 = "N"; /* reset switches*/
      PT07W00.PT07W-WAIT-CONFIRM = "N";
      PT07W00.PT07WMAP = "2"; /* set the map handle to 2 and*/
      exit stack; /* trnasfer to PT07M002*/
    end
  end

  PT07W00.PT07W-WAIT-PF17 = "N";
end // end PT07187

// Set-up flags for Inquiry
Function PT07187-1()
  PT07183-1(); /* validate style/color in VSYCLR01*/
  PT07192(); /* check for existence in VFORCD01*/
  if (SQLCA.VAGen_SQLCODE == +100) /* if not found*/
    set PT07M001.SY1STNBR[PT07WIXM] cursor, bold; /* Highlight*/
    set PT07M001.SY2CLRID[PT07WIXM] bold; /* Highlight*/
    converseLib.validationFailed(095); /* Indicate product not found*/
    PT07W00.PT07WBSW = "N";
    PT07W00.PT07WSWF = "N";
    PT07W00.PT07WSWR = "N";
    PT07W00.PT07W-WAIT-CONFIRM = "N";
    PT07W00.PT07W-WAIT-PF17 = "N";
    exit stack;
  else
   /* PERFORM PT07183-3; /* Verify Override Codes*/
   /* IF EZEMNO NE 0;*/
   /* MOVE 'N' TO PT07W00.PT07WBSW;*/
   /* MOVE 'N' TO PT07W00.PT07WSWF;*/
   /* MOVE 'N' TO PT07W00.PT07WSWR;*/
   /* MOVE 'N' TO PT07W00.PT07W-WAIT-CONFIRM;*/
   /* MOVE 'N' TO PT07W00.PT07W-WAIT-PF17;*/
   /* EZEFLO;*/
   /* END;*/
   /* PERFORM PT07183-5; /* Verify the dates entered*/
   /* IF EZEMNO NE 0;*/
   /* MOVE 'N' TO PT07W00.PT07WBSW;*/
   /* MOVE 'N' TO PT07W00.PT07WSWF;*/
   /* MOVE 'N' TO PT07W00.PT07WSWR;*/
   /* MOVE 'N' TO PT07W00.PT07W-WAIT-CONFIRM;*/
   /* MOVE 'N' TO PT07W00.PT07W-WAIT-PF17;*/
   /* EZEFLO;*/
   /* END;*/

    PT07194-1(); /* check for any changes made and set the flag*/
  end

end // end PT07187-1

// Set-up flags for Select
Function PT07188()
   /* ****************************************************************/
   /* * Re-set the PF17 & confirm sw to No.                         **/
   /* * P-entered flag is to identify any 'P'rioritized product is  **/
   /* *   entered in screen. P-retieved flag is to identify any 'P' **/
   /* *   exists in the database.                                   **/
   /* * Processed flag is to indicate whether the detail row is     **/
   /* *           processed or not.                                 **/
   /* * Operation flag is used to Update the tables                 **/
   /* * Trans-P-rec flag is used to indicate ONLY those products are**/
   /* *           to be displayed in screen PT07M002                **/
   /* ****************************************************************/

  PT07W00.PT07W-WAIT-PF17 = "N";
  PT07W00.PT07W-WAIT-CONFIRM = "N";
  PT07W00.PT07WIXM = 1;

  while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN)
    PT07W00.PT07W-P-ENTERED = "N";
    PT07W00.PT07W-P-RETRIEVED = "N";
    if (PT07M001.PT07M1-SEL[PT07WIXM] == " " && 
    PT07M001.SY1STNBR[PT07WIXM] == " " && 
    PT07M001.SY2CLRID[PT07WIXM] == " ") /* if no data in detail row*/
      PT07W03.PROCESSED-FLAG[PT07WIXM] = " ";
      PT07W03.OPERATION-FLAG[PT07WIXM] = " ";
      PT07W03.TRANS-P-REC[PT07WIXM] = " "; /* reset W03 flags*/
    else
      if (PT07W03.PROCESSED-FLAG[PT07WIXM] == "Y" || 
      PT07W03.PROCESSED-FLAG[PT07WIXM] == "S") /* if already processed*/
        PT07W03.OPERATION-FLAG[PT07WIXM] = "N "; /* no updates*/
      else
        PT07W03.PROCESSED-FLAG[PT07WIXM] = " ";
        PT07W03.OPERATION-FLAG[PT07WIXM] = " ";
        PT07W03.TRANS-P-REC[PT07WIXM] = " ";
        PT07188-1(); /**/
      end
    end
    PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1;
  end

end // end PT07188

// Set-up flags for Select
Function PT07188-1()
  PT07183-1(); /* validate style/color in VSYCLR01*/
  PT07192(); /* check for existence in VFORCD01*/
  if (SQLCA.VAGen_SQLCODE == +100) /* if not found*/
    set PT07M001.SY1STNBR[PT07WIXM] cursor, bold; /* Highlight*/
    set PT07M001.SY2CLRID[PT07WIXM] bold; /* Highlight*/
    converseLib.validationFailed(095); /* Indicate product not found*/
    PT07W00.PT07WBSW = "N";
    PT07W00.PT07WSWF = "N";
    PT07W00.PT07WSWR = "N";
    PT07W00.PT07W-WAIT-CONFIRM = "N";
    PT07W00.PT07W-WAIT-PF17 = "N";
    exit stack;
  else
   /* PERFORM PT07183-3; /* Verify Override Codes*/
   /* IF EZEMNO NE 0;*/
   /* MOVE 'N' TO PT07W00.PT07WBSW;*/
   /* MOVE 'N' TO PT07W00.PT07WSWF;*/
   /* MOVE 'N' TO PT07W00.PT07WSWR;*/
   /* MOVE 'N' TO PT07W00.PT07W-WAIT-CONFIRM;*/
   /* MOVE 'N' TO PT07W00.PT07W-WAIT-PF17;*/
   /* EZEFLO;*/
   /* END;*/
   /* PERFORM PT07183-5; /* Verify the dates entered*/
   /* IF EZEMNO NE 0;*/
   /* MOVE 'N' TO PT07W00.PT07WBSW;*/
   /* MOVE 'N' TO PT07W00.PT07WSWF;*/
   /* MOVE 'N' TO PT07W00.PT07WSWR;*/
   /* MOVE 'N' TO PT07W00.PT07W-WAIT-CONFIRM;*/
   /* MOVE 'N' TO PT07W00.PT07W-WAIT-PF17;*/
   /* EZEFLO;*/
   /* END;*/

    if (PT07M001.PT07M1-SEL[PT07WIXM] == "S" || 
    PT07M001.PT07M1-SEL[PT07WIXM] == " ")
      PT07194-2(); /* check for any changes made and set the flag*/
    end
  end

end // end PT07188-1

// Set-up flags for P-entered
Function PT07191()
  if (PT07M001.PT07M1-SEL[PT07WIXM] != " ") /* if sel code is entered and*/
    if (PT07M001.RTA-PRI-CD[PT07WIXM] == "P") /* P entered in screen*/
      PT07W00.PT07W-P-ENTERED = "Y"; /* set P-entered flag*/
    else
      PT07W00.PT07W-P-ENTERED = "N";
    end
  else
    PT07W03.PROCESSED-FLAG[PT07WIXM] = " ";
    PT07W03.OPERATION-FLAG[PT07WIXM] = " ";
    PT07W03.TRANS-P-REC[PT07WIXM] = " ";
  end

end // end PT07191

// Check for existence in VFORCD
Function PT07192()

   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set PT07W011 empty; /* clear io-mod data record*/
   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/
  PT07W011.SY1STNBR = PT07M001.SY1STNBR[PT07WIXM];
  PT07W011.SY2CLRID = PT07M001.SY2CLRID[PT07WIXM];
  PT07W011.XDMCD = "00";
  PT07W011.XGPCD = PT07W00.XGPCD;

  set PT07W012 empty;
  PT07W012.TASK-CODE = "S ";

   /* ------------------------------------------------------------*/
   /* Select FROM DMODEL.VFORCD01*/
   /* ------------------------------------------------------------*/

  try
    call "PT6300" (PT07W012, SQLCA, PT07W011) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* row not found*/
      if (SQLCA.VAGen_SQLCODE == +0)
        if (PT07W011.PT-RTA-PRI-CD == "P")
          PT07W00.PT07W-P-RETRIEVED = "Y";
        end
      end
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "192"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(011); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(010); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFORCD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07192

// Add - Product not found- FORCD
Function PT07193()
   /* ****************************************************************/
   /* * Operation flag 'NA' stands for - 'N' -> No updates in M001  **/
   /* *                                - 'A' -> to be added in M002 **/
   /* *                                                             **/
   /* * Operation flag 'A ' stands for - 'A' -> Add VFORCD01 in M001**/
   /* *                                                             **/
   /* * Processed flag 'N' stands for - 'Not yet processed'         **/
   /* * Trans-P-rec 'P' stands for - that detail row is to be       **/
   /* *                              displayed in PT07M002          **/
   /* ****************************************************************/

  if (PT07W00.PT07W-P-ENTERED == "Y")
    PT07153(); /* check security for P products*/
    PT07W03.OPERATION-FLAG[PT07WIXM] = "NA";
    PT07W03.PROCESSED-FLAG[PT07WIXM] = "N";
    PT07W03.TRANS-P-REC[PT07WIXM] = "P";
    PT07W00.PT07W-WAIT-PF17 = "Y";
  else
    PT07154(); /* check security for non P products*/
    PT07W03.OPERATION-FLAG[PT07WIXM] = "A ";
    PT07W03.PROCESSED-FLAG[PT07WIXM] = "N";
    PT07W03.TRANS-P-REC[PT07WIXM] = " ";
    PT07W00.PT07W-WAIT-CONFIRM = "Y";
  end

end // end PT07193

// Overlap data
Function PT07193-1()
  if (PT07W011.PT-RTA-SPEC-OFR-CD != " " && 
  PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] == " ")
    PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] = PT07W011.PT-RTA-SPEC-OFR-CD;
  end

  if (PT07W011.PT-RTA-KEY-CD != " " && 
  PT07M001.RTA-KEY-CD[PT07WIXM] == " ")
    PT07M001.RTA-KEY-CD[PT07WIXM] = PT07W011.PT-RTA-KEY-CD;
  end

  if (PT07W011.PT-RTA-BRAND-CD != " " && 
  PT07M001.RTA-BRAND-CD[PT07WIXM] == " ")
    PT07M001.RTA-BRAND-CD[PT07WIXM] = PT07W011.PT-RTA-BRAND-CD;
  end

  if (PT07W011.PT-RTA-PRI-CD != " " && 
  PT07M001.RTA-PRI-CD[PT07WIXM] == " ")
    PT07M001.RTA-PRI-CD[PT07WIXM] = PT07W011.PT-RTA-PRI-CD;
  end

  if (PT07W011.PT-PROD-REL-DT != 0 && 
  PT07M001.PROD-REL-DT[PT07WIXM] == 0)
    PT07W00.PT07W-WS-YYMMDD-FORMAT = 0;
    PT07W00.PT07W-WS-CCYYMMDD-FORMAT = PT07W011.PT-PROD-REL-DT;
    PT07W00.PT07W-WS-YY = PT07W00.PT07W-WS-YY-NUM;
    PT07W00.PT07W-WS-MM = PT07W00.PT07W-WS-MM-NUM;
    PT07W00.PT07W-WS-DD = PT07W00.PT07W-WS-DD-NUM;
    PT07W01.PROD-REL-DT[PT07WIXM] = PT07W00.PT07W-WS-YYMMDD-FORMAT;
    PT07M001.PROD-REL-DT[PT07WIXM] = PT07W01.PROD-REL-DT;
  end

  if (PT07W011.PC-DROPDEAD-RTA-DT != 0 && 
  PT07M001.DROPDEAD-RTA-DT[PT07WIXM] == 0)
    PT07W00.PT07W-WS-YYMMDD-FORMAT = 0;
    PT07W00.PT07W-WS-CCYYMMDD-FORMAT = PT07W011.PC-DROPDEAD-RTA-DT;
    PT07W00.PT07W-WS-YY = PT07W00.PT07W-WS-YY-NUM;
    PT07W00.PT07W-WS-MM = PT07W00.PT07W-WS-MM-NUM;
    PT07W00.PT07W-WS-DD = PT07W00.PT07W-WS-DD-NUM;
    PT07W01.DROPDEAD-RTA-DT[PT07WIXM] = PT07W00.PT07W-WS-YYMMDD-FORMAT;
    PT07M001.DROPDEAD-RTA-DT[PT07WIXM] = PT07W01.DROPDEAD-RTA-DT[PT07WIXM];
  end

   /* IF PT07W011.SY1SSTNM NE ' ' AND*/
     /* PT07M001.SY1SSTNM(PT07WIXM) = ' ';*/
     /* MOVE PT07W011.SY1SSTNM TO*/
          /* PT07M001.SY1SSTNM(PT07WIXM);*/
   /* END;*/

   /* IF PT07W011.SY2CLRAB NE ' ' AND*/
     /* PT07M001.SY2CLRAB(PT07WIXM) = ' ';*/
     /* MOVE PT07W011.SY2CLRAB TO*/
          /* PT07M001.SY2CLRAB(PT07WIXM);*/
   /* END;*/

   /* IF PT07W011.SY-FUTR-OFFER-BDT NE 0 AND*/
     /* PT07M001.FIRST-OFFER-DT(PT07WIXM) = 0;*/
     /* MOVE 0 TO PT07W00.PT07W-WS-YYMMDD-FORMAT;*/
   /* MOVE PT07W011.SY-FUTR-OFFER-BDT TO PT07W00.PT07W-WS-CCYYMMDD-FORMAT;*/
     /* MOVE PT07W00.PT07W-WS-YY-NUM TO PT07W00.PT07W-WS-YY;*/
     /* MOVE PT07W00.PT07W-WS-MM-NUM TO PT07W00.PT07W-WS-MM;*/
     /* MOVE PT07W00.PT07W-WS-DD-NUM TO PT07W00.PT07W-WS-DD;*/
     /* MOVE PT07W00.PT07W-WS-YYMMDD-FORMAT TO*/
          /* PT07W01.FIRST-OFFER-DT(PT07WIXM);*/
     /* MOVE PT07W01.FIRST-OFFER-DT(PT07WIXM) TO*/
          /* PT07M001.FIRST-OFFER-DT(PT07WIXM);*/
   /* END;*/

  PT07W01.CHNG-COUNT[PT07WIXM] = PT07W011.ZZ-CHNG-CNT;
  PT07W01.SETUP-DATE[PT07WIXM] = PT07W011.ZZ-SDT;
  PT07W01.DIM-CD[PT07WIXM] = PT07W011.XDMCD;

end // end PT07193-1

// Add - Product found- FORCD
Function PT07193-2()
   /* **************************************************************/
   /* * Operation flag 'U ' stands for - Update VFORCD01 in M001  **/
   /* * Operation flag 'NU' stands for - 'N' -> No updates in M001**/
   /* *                                - 'U' -> Updates in M002   **/
   /* * Processed flag 'N' stands for - Not yet processed         **/
   /* * Trans-P-rec 'P' stands for - that detail row is to be     **/
   /* *                              displayed in PT07M002        **/
   /* **************************************************************/

  if (PT07W00.PT07W-P-ENTERED == "N" && 
  PT07W00.PT07W-P-RETRIEVED == "N") /* for non-P products*/
    PT07154(); /* check the security for Non P products*/
    PT07W03.OPERATION-FLAG[PT07WIXM] = "U ";
    PT07W03.PROCESSED-FLAG[PT07WIXM] = "N";
    PT07W03.TRANS-P-REC[PT07WIXM] = " ";
    PT07W00.PT07W-WAIT-CONFIRM = "Y";
    return;
  end

  if (PT07W00.PT07W-P-ENTERED == "Y" && 
  PT07W00.PT07W-P-RETRIEVED == "N") /* when new P is added*/
    PT07153(); /* check the security for P products*/
    PT07W03.OPERATION-FLAG[PT07WIXM] = "NU";
    PT07W03.PROCESSED-FLAG[PT07WIXM] = "N";
    PT07W03.TRANS-P-REC[PT07WIXM] = "P";
    PT07W00.PT07W-WAIT-PF17 = "Y";
    return;
  end

  if (PT07W00.PT07W-P-RETRIEVED == "Y") /* already existing P*/
    if (PT07W011.PT-RTA-SPEC-OFR-CD != 
    PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] || 
    PT07W011.PT-RTA-KEY-CD != 
    PT07M001.RTA-KEY-CD[PT07WIXM] || 
    PT07W011.PT-RTA-BRAND-CD != 
    PT07M001.RTA-BRAND-CD[PT07WIXM]) /* but other ovrd cds r changed*/
      PT07154(); /* check the security for Non P products*/
      PT07W03.OPERATION-FLAG[PT07WIXM] = "U ";
      PT07W03.PROCESSED-FLAG[PT07WIXM] = "N";
      PT07W03.TRANS-P-REC[PT07WIXM] = " ";
      PT07W00.PT07W-WAIT-CONFIRM = "Y";
    else
      PT07153(); /* check the security for P products*/
      PT07W03.OPERATION-FLAG[PT07WIXM] = "NU";
      PT07W03.PROCESSED-FLAG[PT07WIXM] = "N";
      PT07W03.TRANS-P-REC[PT07WIXM] = "P";
      PT07W00.PT07W-WAIT-PF17 = "Y";
    end
  end

end // end PT07193-2

// Change/Delete - operation flag
Function PT07193-3()
   /* *******************************************************************/
   /* * Operation flag 'NU' stands for - 'N' -> No updates in M001     **/
   /* *                                - 'U' -> Updates in M002        **/
   /* * Operation flag 'UD' stands for - 'U' -> Update VFORCD01 in M001**/
   /* *                                - 'D' -> Delete VFOFCT01 in M001**/
   /* * Operation flag 'U ' stands for - Update VFORCD01 in M001       **/
   /* * Processed flag 'N' stands for - Not yet processed              **/
   /* * Trans-P-rec 'P' stands for - that detail row is to be displaed **/
   /* *                              in PT07M002                       **/
   /* *******************************************************************/

  if (PT07W00.PT07W-P-ENTERED == "Y" && 
  PT07W00.PT07W-P-RETRIEVED == "N") /* new P product*/
    PT07153(); /* check the security for P products*/
    PT07W03.OPERATION-FLAG[PT07WIXM] = "NU";
    PT07W03.PROCESSED-FLAG[PT07WIXM] = "N";
    PT07W03.TRANS-P-REC[PT07WIXM] = "P";
    PT07W00.PT07W-WAIT-PF17 = "Y";
    return;
  end

  if (PT07W00.PT07W-P-ENTERED == "N" && 
  PT07W00.PT07W-P-RETRIEVED == "Y") /* removed the P code*/
    PT07154(); /* check the security for non P products*/
    PT07W03.OPERATION-FLAG[PT07WIXM] = "UD";
    PT07W03.PROCESSED-FLAG[PT07WIXM] = "N";
    PT07W03.TRANS-P-REC[PT07WIXM] = " ";
    PT07W00.PT07W-WAIT-CONFIRM = "Y";
    return;
  end

  if (PT07W00.PT07W-P-ENTERED == "N" && 
  PT07W00.PT07W-P-RETRIEVED == "N") /* non-P product*/
    PT07154(); /* check the security for non P products*/
    PT07W03.OPERATION-FLAG[PT07WIXM] = "U ";
    PT07W03.PROCESSED-FLAG[PT07WIXM] = "N";
    PT07W03.TRANS-P-REC[PT07WIXM] = " ";
    PT07W00.PT07W-WAIT-CONFIRM = "Y";
    return;
  end

  PT07W00.PT07W-SAVE-PROD-REL-DT = 0;
  PT07W00.PT07W-SAVE-DROPDEAD-RTA-DT = 0;

  if (PT07W011.PT-PROD-REL-DT != 0)
    PT07W00.PT07W-WS-CCYYMMDD-FORMAT = PT07W011.PT-PROD-REL-DT;
    PT07W00.PT07W-WS-YY = PT07W00.PT07W-WS-YY-NUM;
    PT07W00.PT07W-WS-MM = PT07W00.PT07W-WS-MM-NUM;
    PT07W00.PT07W-WS-DD = PT07W00.PT07W-WS-DD-NUM;
    PT07W00.PT07W-SAVE-PROD-REL-DT = PT07W00.PT07W-WS-YYMMDD-FORMAT;
  end

  if (PT07W011.PC-DROPDEAD-RTA-DT != 0)
    PT07W00.PT07W-WS-CCYYMMDD-FORMAT = PT07W011.PC-DROPDEAD-RTA-DT;
    PT07W00.PT07W-WS-YY = PT07W00.PT07W-WS-YY-NUM;
    PT07W00.PT07W-WS-MM = PT07W00.PT07W-WS-MM-NUM;
    PT07W00.PT07W-WS-DD = PT07W00.PT07W-WS-DD-NUM;
    PT07W00.PT07W-SAVE-DROPDEAD-RTA-DT = PT07W00.PT07W-WS-YYMMDD-FORMAT;
  end

   /* fix - 04/26/00*/
  if (PT07W00.PT07W-P-ENTERED == "Y" && 
  PT07W00.PT07W-P-RETRIEVED == "Y") /* for P products*/
    if (PT07W011.PT-RTA-SPEC-OFR-CD != 
    PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] || 
    PT07W011.PT-RTA-KEY-CD != 
    PT07M001.RTA-KEY-CD[PT07WIXM] || 
    PT07W011.PT-RTA-BRAND-CD != 
    PT07M001.RTA-BRAND-CD[PT07WIXM] || 
    PT07W00.PT07W-SAVE-PROD-REL-DT != 
    PT07M001.PROD-REL-DT[PT07WIXM] || 
    PT07W00.PT07W-SAVE-DROPDEAD-RTA-DT != 
    PT07M001.DROPDEAD-RTA-DT[PT07WIXM]) /* if any ovrd cd or dt chged*/
      PT07154(); /* check the security for non P products*/
      PT07W03.OPERATION-FLAG[PT07WIXM] = "U ";
      PT07W03.PROCESSED-FLAG[PT07WIXM] = "N";
      PT07W03.TRANS-P-REC[PT07WIXM] = " ";
      PT07W00.PT07W-WAIT-CONFIRM = "Y";
    else
      PT07153(); /* check the security for P products*/
      PT07W03.OPERATION-FLAG[PT07WIXM] = "NU";
      PT07W03.PROCESSED-FLAG[PT07WIXM] = "N";
      PT07W03.TRANS-P-REC[PT07WIXM] = "P";
      PT07W00.PT07W-WAIT-PF17 = "Y";
    end
  end

end // end PT07193-3

// Chk for chg of data in 'D', ''
Function PT07194()
  PT07W00.PT07W-SAVE-PROD-REL-DT = 0;
  PT07W00.PT07W-SAVE-DROPDEAD-RTA-DT = 0;

  if (PT07W011.PT-PROD-REL-DT != 0)
    PT07W00.PT07W-WS-CCYYMMDD-FORMAT = PT07W011.PT-PROD-REL-DT;
    PT07W00.PT07W-WS-YY = PT07W00.PT07W-WS-YY-NUM;
    PT07W00.PT07W-WS-MM = PT07W00.PT07W-WS-MM-NUM;
    PT07W00.PT07W-WS-DD = PT07W00.PT07W-WS-DD-NUM;
    PT07W00.PT07W-SAVE-PROD-REL-DT = PT07W00.PT07W-WS-YYMMDD-FORMAT;
  end

  if (PT07W011.PC-DROPDEAD-RTA-DT != 0)
    PT07W00.PT07W-WS-CCYYMMDD-FORMAT = PT07W011.PC-DROPDEAD-RTA-DT;
    PT07W00.PT07W-WS-YY = PT07W00.PT07W-WS-YY-NUM;
    PT07W00.PT07W-WS-MM = PT07W00.PT07W-WS-MM-NUM;
    PT07W00.PT07W-WS-DD = PT07W00.PT07W-WS-DD-NUM;
    PT07W00.PT07W-SAVE-DROPDEAD-RTA-DT = PT07W00.PT07W-WS-YYMMDD-FORMAT;
  end

  if (PT07M001.PT07M1-SEL[PT07WIXM] == " ") /* if no selection code*/
    if (PT07W011.PT-RTA-SPEC-OFR-CD != 
    PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] || 
    PT07W011.PT-RTA-KEY-CD != 
    PT07M001.RTA-KEY-CD[PT07WIXM] || 
    PT07W011.PT-RTA-BRAND-CD != 
    PT07M001.RTA-BRAND-CD[PT07WIXM] || 
    PT07W011.PT-RTA-PRI-CD != 
    PT07M001.RTA-PRI-CD[PT07WIXM] || 
    PT07W00.PT07W-SAVE-PROD-REL-DT != 
    PT07M001.PROD-REL-DT[PT07WIXM] || 
    PT07W00.PT07W-SAVE-DROPDEAD-RTA-DT != 
    PT07M001.DROPDEAD-RTA-DT[PT07WIXM]) /* and data is changed*/
      set PT07M001.PT07M1-SEL[PT07WIXM] cursor, bold;
      PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
      PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
      PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
      PT07W00.PT07W-WAIT-CONFIRM = "N";
      PT07W00.PT07W-WAIT-PF17 = "N";
      converseLib.validationFailed(139); /* data is changed but not selected*/
      exit stack;
    end
  end

  if (PT07M001.PT07M1-SEL[PT07WIXM] == "D") /* if 'D' selection code*/
    if (PT07W011.PT-RTA-SPEC-OFR-CD != 
    PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] || 
    PT07W011.PT-RTA-KEY-CD != 
    PT07M001.RTA-KEY-CD[PT07WIXM] || 
    PT07W011.PT-RTA-BRAND-CD != 
    PT07M001.RTA-BRAND-CD[PT07WIXM] || 
    PT07W011.PT-RTA-PRI-CD != 
    PT07M001.RTA-PRI-CD[PT07WIXM] || 
    PT07W00.PT07W-SAVE-PROD-REL-DT != 
    PT07M001.PROD-REL-DT[PT07WIXM] || 
    PT07W00.PT07W-SAVE-DROPDEAD-RTA-DT != 
    PT07M001.DROPDEAD-RTA-DT[PT07WIXM]) /* and data is changed*/
      set PT07M001.PT07M1-SEL[PT07WIXM] cursor, bold;
      PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
      PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
      PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
      PT07W00.PT07W-WAIT-CONFIRM = "N";
      PT07W00.PT07W-WAIT-PF17 = "N";
      converseLib.validationFailed(178); /* entries should not be changed*/
      exit stack;
    end
  end
   /* ***************************************************************/
   /* * Operation flag 'DD' means - 'D' -> Delete VFORCD01 in M001 **/
   /* *                           - 'D' -> Delete VFOFCT01 in M001 **/
   /* * Operation flag 'D ' means - 'D' -> Delete VFORCD01 in M001 **/
   /* * Processed flag 'N' means - Not yet processed               **/
   /* * trans-P-rec 'P' means - that detail row is to be displayed **/
   /* *                         in PT07M002                        **/
   /* **************************************************************/

  if (PT07M001.PT07M1-SEL[PT07WIXM] == "D")
    if (PT07W00.PT07W-P-RETRIEVED == "Y") /* if P product*/
      PT07153(); /* check the security for P products*/
      PT07154(); /* check the security for non P products*/
      PT07W03.OPERATION-FLAG[PT07WIXM] = "DD";
      PT07W03.PROCESSED-FLAG[PT07WIXM] = "N";
      PT07W03.TRANS-P-REC[PT07WIXM] = " ";
      PT07W00.PT07W-WAIT-CONFIRM = "Y";
    end

    if (PT07W00.PT07W-P-RETRIEVED == "N")
      PT07154(); /* check the security for non P products*/
      PT07W03.OPERATION-FLAG[PT07WIXM] = "D ";
      PT07W03.PROCESSED-FLAG[PT07WIXM] = "N";
      PT07W03.TRANS-P-REC[PT07WIXM] = " ";
      PT07W00.PT07W-WAIT-CONFIRM = "Y";
    end
  end

  if (PT07M001.PT07M1-SEL[PT07WIXM] == " ")
    PT07W03.OPERATION-FLAG[PT07WIXM] = "  ";
    PT07W03.PROCESSED-FLAG[PT07WIXM] = " ";
    PT07W03.TRANS-P-REC[PT07WIXM] = " ";
  end

end // end PT07194

// Chk for chg of data in ' '
Function PT07194-1()
  PT07W00.PT07W-SAVE-PROD-REL-DT = 0;
  PT07W00.PT07W-SAVE-DROPDEAD-RTA-DT = 0;

  if (PT07W011.PT-PROD-REL-DT != 0)
    PT07W00.PT07W-WS-CCYYMMDD-FORMAT = PT07W011.PT-PROD-REL-DT;
    PT07W00.PT07W-WS-YY = PT07W00.PT07W-WS-YY-NUM;
    PT07W00.PT07W-WS-MM = PT07W00.PT07W-WS-MM-NUM;
    PT07W00.PT07W-WS-DD = PT07W00.PT07W-WS-DD-NUM;
    PT07W00.PT07W-SAVE-PROD-REL-DT = PT07W00.PT07W-WS-YYMMDD-FORMAT;
  end

  if (PT07W011.PC-DROPDEAD-RTA-DT != 0)
    PT07W00.PT07W-WS-CCYYMMDD-FORMAT = PT07W011.PC-DROPDEAD-RTA-DT;
    PT07W00.PT07W-WS-YY = PT07W00.PT07W-WS-YY-NUM;
    PT07W00.PT07W-WS-MM = PT07W00.PT07W-WS-MM-NUM;
    PT07W00.PT07W-WS-DD = PT07W00.PT07W-WS-DD-NUM;
    PT07W00.PT07W-SAVE-DROPDEAD-RTA-DT = PT07W00.PT07W-WS-YYMMDD-FORMAT;
  end

  if (PT07M001.PT07M1-SEL[PT07WIXM] == " ") /* if sel code is spaces*/
    if (PT07W011.PT-RTA-SPEC-OFR-CD != 
    PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] || 
    PT07W011.PT-RTA-KEY-CD != 
    PT07M001.RTA-KEY-CD[PT07WIXM] || 
    PT07W011.PT-RTA-BRAND-CD != 
    PT07M001.RTA-BRAND-CD[PT07WIXM] || 
    PT07W011.PT-RTA-PRI-CD != 
    PT07M001.RTA-PRI-CD[PT07WIXM] || 
    PT07W00.PT07W-SAVE-PROD-REL-DT != 
    PT07M001.PROD-REL-DT[PT07WIXM] || 
    PT07W00.PT07W-SAVE-DROPDEAD-RTA-DT != 
    PT07M001.DROPDEAD-RTA-DT[PT07WIXM]) /* and data is changed*/
      set PT07M001.PT07M1-SEL[PT07WIXM] cursor, bold;
      PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
      PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
      PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
      PT07W00.PT07W-WAIT-CONFIRM = "N";
      PT07W00.PT07W-WAIT-PF17 = "N";
      converseLib.validationFailed(139); /* data is changed but not selected*/
      exit stack;
    end
  end

  if (PT07M001.PT07M1-SEL[PT07WIXM] != " ")
    PT07W00.PT07W-SELECTION-MADE-SW = "Y";
    set PT07M001.PT07M1-SEL[PT07WIXM] cursor, bold;
    PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
    PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
    PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
    PT07W00.PT07W-WAIT-CONFIRM = "N";
    PT07W00.PT07W-WAIT-PF17 = "N";
    converseLib.validationFailed(180); /* invalid selection code*/
    exit stack;
  end

   /* *****************************************************************/
   /* * Operation flag 'N ' means - No updates in M001               **/
   /* * Processed flag 'N' means - Not yet processed                 **/
   /* * trans-P-rec 'P'means - that detail row is to be displayed in **/
   /* *                        PT07M002                              **/
   /* *****************************************************************/

  if (PT07W00.PT07W-P-RETRIEVED == "Y")
   /* PERFORM PT07155; /* check the security- INQ for P products*/
    PT07W03.OPERATION-FLAG[PT07WIXM] = "N ";
    PT07W03.PROCESSED-FLAG[PT07WIXM] = "N";
    PT07W03.TRANS-P-REC[PT07WIXM] = "P";
    PT07W00.PT07W-WAIT-PF17 = "Y";
  end

end // end PT07194-1

// Chk for chg of data in 'S', ''
Function PT07194-2()
  PT07W00.PT07W-SAVE-PROD-REL-DT = 0;
  PT07W00.PT07W-SAVE-DROPDEAD-RTA-DT = 0;

  if (PT07W011.PT-PROD-REL-DT != 0)
    PT07W00.PT07W-WS-CCYYMMDD-FORMAT = PT07W011.PT-PROD-REL-DT;
    PT07W00.PT07W-WS-YY = PT07W00.PT07W-WS-YY-NUM;
    PT07W00.PT07W-WS-MM = PT07W00.PT07W-WS-MM-NUM;
    PT07W00.PT07W-WS-DD = PT07W00.PT07W-WS-DD-NUM;
    PT07W00.PT07W-SAVE-PROD-REL-DT = PT07W00.PT07W-WS-YYMMDD-FORMAT;
  end

  if (PT07W011.PC-DROPDEAD-RTA-DT != 0)
    PT07W00.PT07W-WS-CCYYMMDD-FORMAT = PT07W011.PC-DROPDEAD-RTA-DT;
    PT07W00.PT07W-WS-YY = PT07W00.PT07W-WS-YY-NUM;
    PT07W00.PT07W-WS-MM = PT07W00.PT07W-WS-MM-NUM;
    PT07W00.PT07W-WS-DD = PT07W00.PT07W-WS-DD-NUM;
    PT07W00.PT07W-SAVE-DROPDEAD-RTA-DT = PT07W00.PT07W-WS-YYMMDD-FORMAT;
  end

  if (PT07M001.PT07M1-SEL[PT07WIXM] == " " || 
  PT07M001.PT07M1-SEL[PT07WIXM] == "S") /* if the sel code is 'S', ' '*/
    if (PT07W011.PT-RTA-SPEC-OFR-CD != 
    PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] || 
    PT07W011.PT-RTA-KEY-CD != 
    PT07M001.RTA-KEY-CD[PT07WIXM] || 
    PT07W011.PT-RTA-BRAND-CD != 
    PT07M001.RTA-BRAND-CD[PT07WIXM] || 
    PT07W011.PT-RTA-PRI-CD != 
    PT07M001.RTA-PRI-CD[PT07WIXM] || 
    PT07W00.PT07W-SAVE-PROD-REL-DT != 
    PT07M001.PROD-REL-DT[PT07WIXM] || 
    PT07W00.PT07W-SAVE-DROPDEAD-RTA-DT != 
    PT07M001.DROPDEAD-RTA-DT[PT07WIXM]) /* and the data is changed*/
      set PT07M001.PT07M1-SEL[PT07WIXM] cursor, bold;
      PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
      PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
      PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
      PT07W00.PT07W-WAIT-CONFIRM = "N";
      PT07W00.PT07W-WAIT-PF17 = "N";
      converseLib.validationFailed(205); /* data is changed, valid selection is C*/
      exit stack;
    end
  end

   /* *****************************************************************/
   /* * Operation flag 'N ' means - No updates in M001               **/
   /* * Processed flag 'N' means - Not yet processed                 **/
   /* * trans-P-rec 'P' means - that detail row is to be displayed in**/
   /* *                         PT07M002                             **/
   /* *****************************************************************/

  if (PT07M001.PT07M1-SEL[PT07WIXM] == "S")
    if (PT07W00.PT07W-P-RETRIEVED == "Y")
      PT07155(); /* check the security- INQ for P products*/
      PT07W03.OPERATION-FLAG[PT07WIXM] = "N ";
      PT07W03.PROCESSED-FLAG[PT07WIXM] = "N";
      PT07W03.TRANS-P-REC[PT07WIXM] = "P";
      PT07W00.PT07W-WAIT-PF17 = "Y";
    end
  end

end // end PT07194-2

// coming back from Map2 to Map1
Function PT07195()
  PT07W00.PT07WMAP = "1";
   /* SET PT07M001 CLEAR;*/
  if (PT07W00.PT07W-PF5-PRESSED == "Y")
    PT07M001.XXXTSPAG = 1;
    PT07M001.TA5TSQIX = 1;
  else
    PT07M001.XXXTSPAG = PT07W00.PT07W-SAVE-PAGE; /* current page*/
    PT07M001.TA5TSQIX = PT07W00.TA5TSQIX; /* Highest page*/
  end

  PT07W00.PT07WIXM = 1;
  while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN)

    PT07125(); /* load from W01 to M001*/

    if (PT07W00.PT07WSSW == "Y") /* and security exists*/
      if (PT07M001.SY1STNBR[PT07WIXM] > " ") /* something entered*/
        set PT07M001.PT07M1-SEL[PT07WIXM] normal;
        if (PT07W00.PT07W-PF5-PRESSED == "N")
          set PT07M001.SY1STNBR[PT07WIXM] protect; /* protect*/
          set PT07M001.SY2CLRID[PT07WIXM] protect; /* protect*/
        else
          set PT07M001.SY1STNBR[PT07WIXM] normal;
          set PT07M001.SY2CLRID[PT07WIXM] normal;
        end
        set PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] normal;
        set PT07M001.RTA-KEY-CD[PT07WIXM] normal;
        set PT07M001.RTA-BRAND-CD[PT07WIXM] normal;
        set PT07M001.RTA-PRI-CD[PT07WIXM] normal;
        set PT07M001.PROD-REL-DT[PT07WIXM] normal;
        set PT07M001.DROPDEAD-RTA-DT[PT07WIXM] normal;
      else
        set PT07M001.PT07M1-SEL[PT07WIXM] protect;
        set PT07M001.SY1STNBR[PT07WIXM] protect; /* protect*/
        set PT07M001.SY2CLRID[PT07WIXM] protect; /* protect*/
        set PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] protect;
        set PT07M001.RTA-KEY-CD[PT07WIXM] protect;
        set PT07M001.RTA-BRAND-CD[PT07WIXM] protect;
        set PT07M001.RTA-PRI-CD[PT07WIXM] protect;
        set PT07M001.PROD-REL-DT[PT07WIXM] protect;
        set PT07M001.DROPDEAD-RTA-DT[PT07WIXM] protect;
      end
    else /* if security not exists*/
   /* SET PT07M001.PT07M1-SEL(PT07WIXM) PROTECT;*/
      if (PT07M001.SY1STNBR[PT07WIXM] > " ") /* something retrieved*/
        set PT07M001.PT07M1-SEL[PT07WIXM] initialAttributes;
      else
        set PT07M001.PT07M1-SEL[PT07WIXM] invisible, protect;
      end
      set PT07M001.SY1STNBR[PT07WIXM] protect; /* protect*/
      set PT07M001.SY2CLRID[PT07WIXM] protect; /* protect*/
      set PT07M001.RTA-SPEC-OFR-CD[PT07WIXM] protect;
      set PT07M001.RTA-KEY-CD[PT07WIXM] protect;
      set PT07M001.RTA-BRAND-CD[PT07WIXM] protect;
      set PT07M001.RTA-PRI-CD[PT07WIXM] protect;
      set PT07M001.PROD-REL-DT[PT07WIXM] protect;
      set PT07M001.DROPDEAD-RTA-DT[PT07WIXM] protect;
    end

    PT07126(); /* protect already processed rows*/
    PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1;
  end

  if (PT07W00.PT07W-PF5-PRESSED == "Y")
    set PT07M001.PT07M1CHG invisible;
  else
    set PT07M001.PT07M1CHG normal;
  end

  if (PT07W00.PT07WSSW == "Y")
    set PT07M001.PT07MPFS initialAttributes;
  else
    set PT07M001.PT07MPFS invisible, protect;
  end

  PT07127(); /* setup the remaining attributes*/

  PT07W00.PT07WIXM = 1;
  while (PT07W00.PT07WIXM <= PT07W00.PT07WLIN)
    if (PT07M001.PT07M1-SEL[PT07WIXM] == " " && 
    PT07M001.SY1STNBR[PT07WIXM] == " " && 
    PT07M001.SY2CLRID[PT07WIXM] == " ")
   /* next sentence*/
    else
      PT07183-2(); /* SELECT AGAINST VSYCLR01 TABLE*/
      if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
        PTWREC.XXXMODID = "195"; /* Module identification*/
        set PT07M001.SY1STNBR[PT07WIXM] cursor, bold; /* Highlight*/
        set PT07M001.SY2CLRID[PT07WIXM] bold; /* Highlight*/
        converseLib.validationFailed(095); /* Indicate product not found*/
        PT07W00.PT07WBSW = "N";
        PT07W00.PT07WSWF = "N";
        PT07W00.PT07WSWR = "N";
        PT07W00.PT07W-WAIT-CONFIRM = "N";
        PT07W00.PT07W-WAIT-PF17 = "N";
        exit stack;
      end

      if (PT07M001.PT07M1-SEL[PT07WIXM] == "D" || 
      PT07M001.PT07M1-SEL[PT07WIXM] == "S" || 
      PT07M001.PT07M1-SEL[PT07WIXM] == " ")
        PT07183-3(); /* Verify Override Codes*/
        if (converseVar.validationMsgNum == 0 || 
        converseVar.validationMsgNum == 01)
   /* next sentence*/
        else
          PT07W00.PT07WBSW = "N";
          PT07W00.PT07WSWF = "N";
          PT07W00.PT07WSWR = "N";
          PT07W00.PT07W-WAIT-CONFIRM = "N";
          PT07W00.PT07W-WAIT-PF17 = "N";
          exit stack;
        end
   /* PERFORM PT07183-5; /* Verify the dates entered*/
   /* IF EZEMNO NE 0;*/
   /* MOVE 'N' TO PT07W00.PT07WBSW;*/
   /* MOVE 'N' TO PT07W00.PT07WSWF;*/
   /* MOVE 'N' TO PT07W00.PT07WSWR;*/
   /* MOVE 'N' TO PT07W00.PT07W-WAIT-CONFIRM;*/
   /* MOVE 'N' TO PT07W00.PT07W-WAIT-PF17;*/
   /* EZEFLO;*/
   /* END;*/
      else
        PT07183-3(); /* Verify Override Codes*/
        PT07183-4(); /* Verify Override Codes/Date relationship*/
        if (converseVar.validationMsgNum == 0 || 
        converseVar.validationMsgNum == 01)
   /* next sentence*/
        else
          PT07W00.PT07WBSW = "N";
          PT07W00.PT07WSWF = "N";
          PT07W00.PT07WSWR = "N";
          PT07W00.PT07W-WAIT-CONFIRM = "N";
          PT07W00.PT07W-WAIT-PF17 = "N";
          exit stack;
        end
        PT07183-5(); /* Verify the dates entered*/
        if (converseVar.validationMsgNum == 0 || 
        converseVar.validationMsgNum == 01)
   /* next sentence*/
        else
          PT07W00.PT07WBSW = "N";
          PT07W00.PT07WSWF = "N";
          PT07W00.PT07WSWR = "N";
          PT07W00.PT07W-WAIT-CONFIRM = "N";
          PT07W00.PT07W-WAIT-PF17 = "N";
          exit stack;
        end
      end
    end
    PT07W00.PT07WIXM = PT07W00.PT07WIXM + 1;
  end

  if (PT07W00.PT07W-WAIT-CONFIRM == "Y")
    if (converseVar.validationMsgNum == 0)
      converseLib.validationFailed(189); /* press PF9 to confirm*/
      PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
      PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
      PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
      PT07W00.PT07W-WAIT-PF17 = "N";
      exit stack;
    else
      converseLib.validationFailed(221); /* table updated successfully - Press PF9*/
      PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
      PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
      PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
      PT07W00.PT07W-WAIT-PF17 = "N";
      exit stack;
    end
  else
    converseLib.validationFailed(193); /* data is changed, press enter to edit*/
    PT07W00.PT07WBSW = "N"; /* set display blank page to no*/
    PT07W00.PT07WSWF = "N"; /* set format map switch to no*/
    PT07W00.PT07WSWR = "N"; /* set request for data switch no*/
    PT07W00.PT07W-WAIT-PF17 = "N";
    exit stack;
  end

end // end PT07195

// Main process to display a map
Function PT07200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  PT07210(); /* Obtain the data to display*/

  PT07220(); /* Format and display the map*/

  PT07230(); /* Check attention identifier*/

  PT07240(); /* Reset fields to normal intensity*/

  PT07250(); /* Verify the entered data*/

  PT07260(); /* Process valid input request*/


end // end PT07200

// Main process to display a map
Function PT07210()
   /* ------------------------------------------------------------*/
   /* PT07210 Process*/
   /* 1. Check the Array pt07w03 passed by Map1 process for 'P' ind*/
   /* 2. Check the Selection code for 1st 'P' rec & set the Mode*/
   /* 3. Mode can be 'A'dd,'C'hange,'I'nquiry,'S'elect*/
   /* 4. For Inquiry Mode, Select all the VFOFCT Recs & store it in TSQ*/
   /* 5. For Other Modes, Set Blank Page switch & Format Switch to 'Y'*/
   /* and Exit to the Next Proc.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
    /* If data was not requested or an error was found, return to*/
    /* the previous process.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum == 0 /* No error was found*/
   || converseVar.validationMsgNum == 01) /* or this is an update message*/
  else
    return; /* Return to previous process*/
  end

  if (PT07W02D.PT07WSWR == "N" /* Data was not requested*/
   || PT07W02D.PT07WBSW == "Y") /* or blank page format requested*/
    return; /* Return to previous process*/
  end


  PT07S03();

  PT07W02D.PT07WLN = 13;
  PT07W02D.PT07WIX = 1;

  PT07W02A.PT07WDAT = "N";
  PT07W02A.PT07W-PF9-CONFIRM = "Y";
  PT07W02D.XXXTSLEN = 1044;
  PT07W02A.PT07WLIN1 = 11;
  set PT07W02 empty;

  PT07W02D.PT07WSWF = "Y";
  PT07W02D.PT07W-FIRST-TIME = "Y"; /* First time throu*/

  XX0XS01();
    /* check for century*/
  if (XX0XW01.XX0XWYY < 95)
    XX0XW01.XX0XW19 = 20;
  else
    XX0XW01.XX0XW19 = 19;
  end

  PT07W02A.PT07WIXM1 = 1;
  PT07W02D.PT07WSWR = "Y";

  while (PT07W02A.PT07WIXM1 <= PT07W02A.PT07WLIN1)
    if (PT07W03.TRANS-P-REC[PT07WIXM1] == "P")
      if (PT07W01.PT07WSEL[PT07WIXM1] == "A" || 
      PT07W01.PT07WSEL[PT07WIXM1] == "C" || 
      PT07W01.PT07WSEL[PT07WIXM1] == "S")
        if (PT07W01.PT07WSEL[PT07WIXM1] == "A")
          PT07W02A.PT07WFLAG = "A";
        end
        if (PT07W01.PT07WSEL[PT07WIXM1] == "C")
          PT07W02A.PT07WFLAG = "C";
        end
        if (PT07W01.PT07WSEL[PT07WIXM1] == "S")
          PT07W02A.PT07WFLAG = "S";
        end
        PT07W02D.PT07WBSW = "Y";
        PT07W02D.PT07WSWR = "N";
        return;
      end
      if (PT07W01.PT07WSEL[PT07WIXM1] == " ")
        PT07W02A.PT07WFLAG = "I";
        PT07W03.PROCESSED-FLAG[PT07WIXM1] = " ";
        PT07211(); /* Store Records in TSQ*/
      end
    end
    PT07W02A.PT07WIXM1 = PT07W02A.PT07WIXM1 + 1; /* increment line count*/
  end

  PT07212(); /* Add Last Page to Queue.*/

  if (PT07W02D.PT07W-FIRST-TIME == "Y") /* first time thru pgm*/
    PT07W02D.PT07W-FIRST-TIME = "N"; /* set to 'n'o*/
  end

end // end PT07210

// Main process to display a map
Function PT07211()
   /* ------------------------------------------------------------*/
   /* PT07211 Process*/
   /* 1. Open the VFOFCT Cursor*/
   /* 2. Fetch the Records*/
   /* 3. If the No. of Records is 13(tsq page size), store it in TSQ*/
   /* 4. Close the Cursor*/
   /* ------------------------------------------------------------*/

  set VFOFCT01 empty;
  VFOFCT01.SY1STNBR = PT07W01.SY1STNBR[PT07WIXM1];
  VFOFCT01.SY2CLRID = PT07W01.SY2CLRID[PT07WIXM1];
  VFOFCT01.XDMCD = PT07W01.DIM-CD[PT07WIXM1];

  PT07W02A.PT07COUNT = 0;
  set PT07W02C empty;

  PT07-211(); /* Open Cursor VFOFCT01*/
  while (PT07W02D.PT07WSWC == "N")
    PT07-212(); /* Fetch Cursor VFOFCT01*/
    if (PT07W02D.PT07WSWC == "N")
      PT07-213(); /* Save data*/
      if (PT07W02D.PT07WIX > PT07W02D.PT07WLN) /* Pag*/
        PT07-215(); /* Add page to temporary storage*/
      end
    end
  end
  PT07-214(); /* Close Cursor VFOFCT01*/
end // end PT07211

// Main process to display a map
Function PT07212()
   /* ------------------------------------------------------------*/
   /* PT07212 Process*/
   /* 1. Add any Partially formatted last page to Queue*/
   /* 2. If no Pages available in the Queue & the Mode is 'A'dd*/
   /* or 'C'hange, Display 'Enter Factory details'*/
   /* 3. If no Pages available in the Queue & the Mode is 'S'elect*/
   /* or 'I'nquiry, Display 'No Data to Display'*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  if (PT07W02D.PT07WIX > 1) /* Page was formatted*/
    PT07-215(); /* Add page to temporary storage*/
    PT07W02D.PT07WBSW = "N"; /* Blank page switch*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  if (PT07W02D.TA5TSQIX == 0) /* No pages formatted*/
    if (PT07W02A.PT07WFLAG == "A" || PT07W02A.PT07WFLAG == "C")
                              /* OR PT07W02A.PT07WFLAG = 'S';*/
      PT07W02D.XXXTSPAG = 1; /* Desired page number*/
      PT07W02D.TA5TSQIX = 1; /* Highest page number*/
      PT07W02A.PT07WSW2 = "Y"; /* New Page Add Switch*/
      PTWREC.XXXMSGNO = 209; /* Ask User to Enter Factory Details*/
      PT07W02A.PT07WSW3 = "Y"; /* Only Add allowed switch*/
    else
      PTWREC.XXXMSGNO = 018; /* Indicate no data to display*/
    end
  else
    /* ------------------------------------------------------------*/
     /* Data was found, check conditions for adding blank page.*/
    /* ------------------------------------------------------------*/
    PT07W02D.XXXTSPAG = 1; /* Desired page number*/
    if (PT07W02D.PT07WBSW == "Y" /* If blank page required*/
     && PT07W00.PT07WSSW == "Y") /* Security clearance*/
      PT07-215(); /* Add page to temporary storage*/
    end
  end

  if (PT07W02D.PT07W-SAVE-PAGE > 0) /* pa2 pressed and page number saved*/
    PT07W02D.XXXTSPAG = PT07W02D.PT07W-SAVE-PAGE;
    PT07W02D.PT07W-SAVE-PAGE = 0; /* reset save-page*/
  end

    /* ------------------------------------------------------------*/
     /* Indicate that the request for data is complete.*/
    /* ------------------------------------------------------------*/

  PT07W02D.PT07WSWR = "N"; /* Request for data switch*/

end // end PT07212

// Format and converse the map
Function PT07220()
   /* ------------------------------------------------------------*/
   /* PT07220 Process*/
   /* 1. If 'A'/'C'/'S' Mode, the Blank Page Switch = 'Y' & fetch*/
   /* the existing records, if any, from Database on to the TSQ*/
   /* 2. Format Flag = 'Y' is to move data from TSQ to Map Variables*/
   /* 3. If 'I'nq Mode, then Data Request Switch = 'Y' &*/
   /* Format Flage = 'Y'*/
   /* 4. If PT07WSW1 = 'Y', then the Mode is 'A'/'C'/'S' &*/
   /* PF7/PF8 is Requested*/
   /* 5. If PT07WSW2 = 'Y', then a New Page is requested by User*/
   /* by pressing PF8 & it has to be written into the TSQ,*/
   /* Otherwise, its a Old Page & the Page will be Rewritten on TSQ*/
   /* 6. If PT07WSW3 = 'Y',*/
   /* ONLY Add of Factory Details is Allowed, as no Factory details*/
   /* already exist, though the Mode is 'A'dd/'C'hange*/
   /* 7. In 'A'dd Mode, ONLY Add / Change of Factory Details allowed*/
   /* 8. In 'S'/'C' Mode, Add/Change/Delete of Factory Details allowed*/
   /* 9. In 'I'nq Mode, ONLY Change / Del of Factory Details allowed*/
   /* 10. PF17 (Return to Map1) is valid only in 'I'nq Mode*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    if (converseVar.validationMsgNum == 01) /* update successful*/
      converseLib.validationFailed(0);
      set PT07W02 empty;
    end
  end

   /* ------------------------------------------------------------*/
   /* If blank screen for data entry requested:*/
   /* ------------------------------------------------------------*/
  if (PT07W02D.PT07WBSW == "Y"           /* If blank map was requested*/
   && (converseVar.validationMsgNum == 0 /* and no error found*/
   || converseVar.validationMsgNum == 210)) /* Record skipped*/
    PT07W02A.PT07WSW3 = "N";
    PT07211();
    PT07212();
    if (PT07W02D.PT07WSWF == "Y") /* Map must be formatted*/
      PT07221(); /* Format the data on the map*/
    end
  else

    /* ------------------------------------------------------------*/
    /* If data requested or no error, format the data to display.*/
    /* ------------------------------------------------------------*/
    if (PT07W02D.PT07WSWR == "Y" /* If data was requested*/
     || converseVar.validationMsgNum == 0) /* or no error found*/
      if (PT07W02D.PT07WSWF == "Y") /* Map must be formatted*/
        PT07221(); /* Format the data on the map*/
      end
    end
  end

  if (PT07W02A.PT07WSW1 == "Y") /* If PF8 / PF7*/
                                    /* & 'A'dd Mode/'C'hange/'S'elect*/
    PT07W02A.PT07WSW1 = "N";
    if (converseVar.eventKey is pf8)
      PT07W02D.XXXTSPAG = PT07W02D.XXXTSPAG + 1; /* Increment page number*/
      if (PT07W02D.XXXTSPAG > 3)
        PT07W02D.XXXTSPAG = 3;
        converseLib.validationFailed(207);
      end
      PT07W02D.PT07W-SAVE-XXXTSPAG = PT07W02D.XXXTSPAG;
      if (PT07W02D.XXXTSPAG <= PT07W02D.TA5TSQIX) /* i.e.More Pgs exist in TS*/
        PT07221();
      else
        PT07W02A.PT07WSW2 = "Y"; /* Set the New Page to be added on*/
                                        /* to the TSQ Flage to 'Y'es*/
        set PT07M002 initial;
        PT07W02D.XXXTSPAG = PT07W02D.PT07W-SAVE-XXXTSPAG;
        PT07W02D.TA5TSQIX = PT07W02D.PT07W-SAVE-XXXTSPAG;
      end
    end
    if (converseVar.eventKey is pf7)
      PT07W02D.XXXTSPAG = PT07W02D.XXXTSPAG - 1; /* Increment page number*/
      PT07W02D.PT07W-SAVE-XXXTSPAG = PT07W02D.XXXTSPAG;
      PT07221();
    end

  end

  if (PT07W02A.PT07WFLAG == "I")
    set PT07M002.PT07MADD invisible, protect;
    set PT07M002.PT07PF3 invisible, protect;
  end


  if (PT07W02A.PT07WFLAG == "A" || 
  PT07W02A.PT07WFLAG == "C" || 
  PT07W02A.PT07WFLAG == "S")
    if (PT07W02A.PT07WSW3 == "Y") /* Only Add allowed Switch True?*/
      set PT07M002.PT07MCHG invisible, protect;
      set PT07M002.PT07MDEL invisible, protect;
    end
    if (PT07W02A.PT07WFLAG == "A")
      set PT07M002.PT07MDEL invisible, protect;
    end
    set PT07M002.PT07PF17 invisible, protect;
    if (PT07WIXM1 <= 11)
      PT07M002.SY1STNBR[1] = PT07W01.SY1STNBR[PT07WIXM1];
      PT07M002.SY2CLRID[1] = PT07W01.SY2CLRID[PT07WIXM1];
      PT07M002.SY1SSTNM[1] = PT07W01.SY1SSTNM[PT07WIXM1];
      PT07M002.SY2CLRAB[1] = PT07W01.SY2CLRAB[PT07WIXM1];
    end
  end

  if (PT07W00.PT07WSSW-P != "Y")
    set PT07M002.PT07MCHG invisible, protect;
    set PT07M002.PT07MDEL invisible, protect;
    set PT07M002.PT07MADD invisible, protect;
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  PT07M002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PT07M002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PT07M002.CAITEM = COMMAREA.CAITEM; /* Application data*/
  if (PT07W02A.PT07WFLAG == "I" || 
  PT07W02A.PT07WFLAG == "C" || 
  PT07W02A.PT07WFLAG == "A" || 
  PT07W02A.PT07WFLAG == "S")
    PT07W02D.PT07WIX = 1; /* initialize line count*/
    while (PT07W02D.PT07WIX <= 13) /* data lines per map*/
      set PT07M002.SY1STNBR[PT07WIX] protect;
      set PT07M002.SY2CLRID[PT07WIX] protect;
      set PT07M002.SY1SSTNM[PT07WIX] protect;
      set PT07M002.SY2CLRAB[PT07WIX] protect;
      if ((PT07W02A.PT07WFLAG == "A" || 
      PT07W02A.PT07WFLAG == "C" || 
      PT07W02A.PT07WFLAG == "S") && PT07WIX > 1)
        PT07M002.SY1STNBR[PT07WIX] = " ";
        PT07M002.SY2CLRID[PT07WIX] = " ";
        PT07M002.SY1SSTNM[PT07WIX] = " ";
        PT07M002.SY2CLRAB[PT07WIX] = " ";
        set PT07M002.SY1STNBR[PT07WIX] invisible, protect, noHighLight;
        set PT07M002.SY2CLRID[PT07WIX] invisible, protect, noHighLight;
        set PT07M002.SY1SSTNM[PT07WIX] invisible, protect, noHighLight;
        set PT07M002.SY2CLRAB[PT07WIX] invisible, protect, noHighLight;
      end
      if (PT07W02.PT07WCHG[PT07WIX] == "D")
        set PT07M002.PT07MSEL[PT07WIX] invisible, protect;
        set PT07M002.SY1STNBR[PT07WIX] protect;
        set PT07M002.SY2CLRID[PT07WIX] protect;
        set PT07M002.SY1SSTNM[PT07WIX] protect;
        set PT07M002.SY2CLRAB[PT07WIX] protect;
        set PT07M002.FY-FCTY-CD[PT07WIX] invisible, protect;
        set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] invisible, protect;
        set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] invisible, protect;
      end
      if (PT07W02A.PT07WFLAG == "I")
        if (PT07W02D.PT07WIX == 1)
          PT07W02A.STYLE1 = PT07M002.SY1STNBR[PT07WIX];
          PT07W02A.COLOR1 = PT07M002.SY2CLRID[PT07WIX];
        else
          if (PT07M002.SY1STNBR[PT07WIX] == PT07W02A.STYLE1 && 
          PT07M002.SY2CLRID[PT07WIX] == PT07W02A.COLOR1)
            set PT07M002.SY1STNBR[PT07WIX] invisible, protect, noHighLight;
            set PT07M002.SY2CLRID[PT07WIX] invisible, protect, noHighLight;
            set PT07M002.SY1SSTNM[PT07WIX] invisible, protect, noHighLight;
            set PT07M002.SY2CLRAB[PT07WIX] invisible, protect, noHighLight;
          else
            if (PT07M002.SY1STNBR[PT07WIX] == " " && 
            PT07M002.SY2CLRID[PT07WIX] == " ")
              set PT07M002.SY1STNBR[PT07WIX] invisible, protect, noHighLight;
              set PT07M002.SY2CLRID[PT07WIX] invisible, protect, noHighLight;
              set PT07M002.SY1SSTNM[PT07WIX] invisible, protect, noHighLight;
              set PT07M002.SY2CLRAB[PT07WIX] invisible, protect, noHighLight;
            end
            PT07W02A.STYLE1 = PT07M002.SY1STNBR[PT07WIX];
            PT07W02A.COLOR1 = PT07M002.SY2CLRID[PT07WIX];
          end
        end
      end
      PT07W02D.PT07WIX = PT07W02D.PT07WIX + 1; /* increment line count*/
    end
  end

  PT07M002.XXXTSPAG = PT07W02D.XXXTSPAG; /* Current page*/
  PT07M002.TA5TSQIX = PT07W02D.TA5TSQIX; /* Highest page*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  if (PTWREC.XXXMSGNO != 0) /* Message to display*/
    PT07M002.XXXMODID = PTWREC.XXXMODID; /* Module identification*/
    if (PTWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PTWREC.XXXMSGNO);
    end /* Message number*/
    set PT07M002 alarm; /* Indicate sound alarm*/
  end

  converse PT07M002 ;


   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  PTWREC.XXXMSGNO = 0; /* Message number*/
  converseLib.validationFailed(0); /* Message number*/



  COMMAREA.CATOAP = PT07M002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PT07M002.CAITEM; /* Application data*/

end // end PT07220

// Format the display data
Function PT07221()
   /* ------------------------------------------------------------*/
   /* PT07221 PROCESS*/
   /* Load the Map with Data in TSQ*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  set PT07M002 initial; /* M002 input/output area*/
  PT07W02D.PT07WSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  if (PT07W02D.TA5TSQIX > 0) /* Pages were formatted*/
   /* AND PT07W02D.PT07WDSW EQ 'Y';   /* and data was found*/
    if (PT07W02D.PT07WDSW == "Y" /* and data was found*/
     || PT07W02A.PT07WDAT == "Y") /* and 1st Page*/
      if (PT07W02D.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      /* ------------------------------------------------------------*/
       /* If the desired page number is less or equal the highest*/
       /* page in storage, obtain temporary storage.*/
      /* ------------------------------------------------------------*/
        if (PT07W02D.XXXTSPAG > PT07W02D.TA5TSQIX) /* Desired greater highest*/
          PT07W02D.XXXTSPAG = PT07W02D.TA5TSQIX;
        else
          if (PT07W02D.XXXTSPAG < 1) /* Desired less than lowest*/
            PT07W02D.XXXTSPAG = 1;
          end
        end


        if (PT07W02D.PT07W-SAVE-XXXTSPAG <= PT07W02D.TA5TSQIX)

          if (PT07W02D.XXXTSPAG == 1
           && PT07W02D.PT07W-SAVE-XXXTSPAG > 1)
            PT07W02D.XXXTSPAG = PT07W02D.PT07W-SAVE-XXXTSPAG;
          end

        end


        PT07-221(); /* Obtain temporary storage page*/

        PT07W02D.PT07W-SAVE-XXXTSPAG = PT07W02D.XXXTSPAG;

      end
    end
    /* ------------------------------------------------------------*/
     /* Format the page information on the screen.*/
    /* ------------------------------------------------------------*/
    PT07M002.XXXTSPAG = PT07W02D.XXXTSPAG; /* Current page*/
    PT07M002.TA5TSQIX = PT07W02D.TA5TSQIX; /* Highest page*/
  end

   /* ------------------------------------------------------------*/
   /* Load the styles from VFOFCT01 (stored in W02) to screen.*/
   /* ------------------------------------------------------------*/

  PT07223();

end // end PT07221

// Format the display data
Function PT07223()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  set PT07M002 initial; /* M002 input/output area*/
   /* ------------------------------------------------------------*/
   /* Load the styles from VFOFCT01 (stored in W02) to screen.*/
   /* ------------------------------------------------------------*/
  PT07W02D.PT07WIX = 1; /* Initialize line index*/

  while (PT07W02D.PT07WIX <= PT07W02D.PT07WLN) /* Until screen is full*/
    PT07M002.PT07MSEL[PT07WIX] = PT07W02.PT07WSEL[PT07WIX];
    PT07M002.SY1STNBR[PT07WIX] = PT07W02.SY1STNBR[PT07WIX];
    PT07M002.SY2CLRID[PT07WIX] = PT07W02.SY2CLRID[PT07WIX];
   /* MOVE PT07W02.XDMCD(PT07WIX) TO PT07M002.XDMCD(PT07WIX);*/

    PT07M002.SY1SSTNM[PT07WIX] = PT07W02.SY1SSTNM[PT07WIX];
    PT07M002.SY2CLRAB[PT07WIX] = PT07W02.SY2CLRAB[PT07WIX];

    PT07M002.FY-FCTY-CD[PT07WIX] = PT07W02.FY-FCTY-CD[PT07WIX];
    PT07M002.PC-PO-ID-MO-RNG[PT07WIX] = PT07W02.PC-PO-ID-MO-RNG[PT07WIX];
    PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] = PT07W02.PC-PO-ID-MO-TO-RNG[PT07WIX];

    set PT07M002.FY-FCTY-CD[PT07WIX] normal;
    set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] normal;
    set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] normal;
    PT07W02D.PT07WIX = PT07W02D.PT07WIX + 1; /* Increment line index*/

  end


end // end PT07223

// Save data in display storage
Function PT07224()
   /* -------------------------------------------------------------------*/
   /* PT07224 PROCESS*/
   /* Move the W02(working storage variables) into W02C which is the*/
   /* EXISTING Copy of Database, used for Changing Data in Database.*/
   /* Note: Change of Factory Details Record is done by deleting the*/
   /* existing Record & Adding a New Record. W02C has the image of Database*/
   /* therefore used for deleting a*/
   /* specific factory detail rec from DB*/
   /* And W02 at that time will have the*/
   /* New Data that is to be inserted*/
   /* into the Database. Change of Factory Details is accomplished this*/
   /* Way. Therefore W02C is used as Temporary Array for holding the*/
   /* Existing condition of Database in Case of Change of Factory details.*/
   /* -------------------------------------------------------------------*/

  PT07W02A.PT07COUNT = PT07W02A.PT07COUNT + 1;
  PT07W02C.PT07WSEL[PT07COUNT] = PT07W02.PT07WSEL[PT07WIX]; /* Style*/
  PT07W02C.SY1STNBR[PT07COUNT] = PT07W02.SY1STNBR[PT07WIX]; /* Style*/
  PT07W02C.SY2CLRID[PT07COUNT] = PT07W02.SY2CLRID[PT07WIX]; /* Color*/
  PT07W02C.XDMCD[PT07COUNT] = PT07W02.XDMCD[PT07WIX]; /* Dimension*/
  PT07W02C.FY-FCTY-CD[PT07COUNT] = PT07W02.FY-FCTY-CD[PT07WIX];
  PT07W02C.PC-PO-ID-MO-RNG[PT07COUNT] = PT07W02.PC-PO-ID-MO-RNG[PT07WIX];
  PT07W02C.PC-PO-ID-MO-TO-RNG[PT07COUNT] = PT07W02.PC-PO-ID-MO-TO-RNG[PT07WIX];
  PT07W02C.ZZZSDT[PT07COUNT] = PT07W02.ZZZSDT[PT07WIX]; /* change*/

  PT07W02C.SY1SSTNM[PT07COUNT] = PT07W02.SY1SSTNM[PT07WIX];
  PT07W02C.SY2CLRAB[PT07COUNT] = PT07W02.SY2CLRAB[PT07WIX];

end // end PT07224

// Check attention identifier
Function PT07230()
   /* ------------------------------------------------------------*/
   /* PT07230 PROCESS*/
   /* Check Attention Identifiers*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    PT07W02D.PT07W-WAIT-CONFIRM = "N"; /* turn off data verified*/
    PT07W02A.PT07W-PF9-CONFIRM = "Y";
    if (PT07W02D.PT07WSWR == "Y") /* Request for data*/
      set PT07W02 empty; /* M002 display storage*/
    end
    if (PT07W02A.PT07WFLAG == "A"
     || PT07W02A.PT07WFLAG == "C"
     || PT07W02A.PT07WFLAG == "S")
      PT07W02D.PT07WBSW = "Y";
      PT07W02D.PT07WIX = 1;
      set PT07W02 empty; /* M002 display storage*/
      set PT07W02C empty; /* W02C storage*/
      PT07S03();
    end

    PT07W02D.PT07W-SAVE-PAGE = PT07W02D.XXXTSPAG;

    PT07W02D.PT07WSWF = "Y"; /* Format the map switch*/
    PT07W02D.PT07WSWR = "Y"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  if (PT07M002.CATOAP > " ") /* FAST PATH was requested*/
    PT07S03(); /* Purge temporary storage*/
    XSPT001(); /* Exit to another application*/
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
  )                              
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PT07M002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end

    XSPT001(); /* Exit to another application*/
    exit stack; /* Exit to display map*/
  end

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    if (PT07W02A.PT07WFLAG == "I") /* If Mode is 'I'nq, set WMAP  = '1'*/
      PT07W00.PT07WMAP = "1";
      set PT07W02D empty;
      PT07267();
      exit stack;
    end
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    if (PT07W02A.PT07WFLAG == "A" || 
    PT07W02A.PT07WFLAG == "C" || 
    PT07W02A.PT07WFLAG == "S")
      VFOFCT01.SY1STNBR = PT07W01.SY1STNBR[PT07WIXM1];
      VFOFCT01.SY2CLRID = PT07W01.SY2CLRID[PT07WIXM1];
      VFOFCT01.XDMCD = "00";
      VFOFCT01.XGPCD = "02";
      PT07-268(); /* Check if atleast 1 vfofct rec exist & set flag*/
      PT07-266(); /* Get the Next Rec*/
    end
    PT07S03(); /* Purge temporary storage*/
  end
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf9)  /* and PF9 was not pressed*/

    PTWREC.XXXMODID = "230"; /* Module identification*/
    converseLib.validationFailed(004); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/
  end


   /* ------------------------------------------------------------*/
   /* If Update switch is on and neither PF9 (to complete update)*/
   /* nor PA2 (to cancel) was pressed, give message that PF9 or*/
   /* PA2 required.*/
   /* ------------------------------------------------------------*/
  if (PT07W02D.PT07W-WAIT-CONFIRM == "Y") /* data verified, waiting for updte*/
    if (converseVar.eventKey is pf9 /* if PF9 was pressed*/
     || converseVar.eventKey is pa2) /* or PA2 was pressed*/
      if (converseVar.eventKey is pa2) /* PA2 was pressed*/
        PT07W02D.PT07W-WAIT-CONFIRM = "N"; /**/
        PT07W02A.PT07W-PF9-CONFIRM = "Y"; /**/
      end

    else

      if (converseVar.eventKey is pf7 /* if PF7 was pressed*/
       || converseVar.eventKey is pf8 /* if PF8 was pressed*/
       || converseVar.eventKey is enter) /* if ENTER was pressed*/
        PTWREC.XXXMODID = "230"; /* Module identification*/
        converseLib.validationFailed(136); /* Indicate must PF9 or PA2*/

        if (converseVar.eventKey is pakey) /* PA key was pressed*/
          converseLib.clearScreen();
           /* Clear screen before display*/
        end

        exit stack; /* Exit to display map*/
      end
    end
  end

end // end PT07230

// Reset highlighted fields
Function PT07240()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  PT07W02D.PT07WIX = 1; /* Initialize line index*/

  while (PT07W02D.PT07WIX <= PT07W02D.PT07WLN) /* Until end of lines*/
    set PT07M002.PT07MSEL[PT07WIX] normal; /* Reset select flag*/
    set PT07M002.SY1STNBR[PT07WIX] normal; /* Reset field*/
    set PT07M002.SY2CLRID[PT07WIX] normal; /* Reset field*/
    set PT07M002.FY-FCTY-CD[PT07WIX] normal; /* Reset field*/
    set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] normal; /* Reset field*/
    set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] normal; /* Reset field*/

    PT07W02D.PT07WIX = PT07W02D.PT07WIX + 1; /* Increment line index*/
  end


  converseLib.validationFailed(0);
  PTWREC.XXXMSGNO = 0;

  set PT07M002.CATOAP initialAttributes; /* TO application*/
  set PT07M002.CAITEM initialAttributes; /* Application data*/

end // end PT07240

// Verify the entered data
Function PT07250()
   /* ---------------------------------------------------------------*/
   /* PT07250 PROCESS*/
   /* 1. Valid PF Keys are PF7,PF8,ENTER,PF9*/
   /* 2. IF PF7/PF8 & 'I'nq Mode, Verify the Scroll Request.Scrolling*/
   /* NOT Allowed with Selection Codes*/
   /* 3. If PF7/PF8 & NOT 'I'nq Mode, Scrolling Allowed with Selection*/
   /* Code. But PF8 allows a New Page, only if all the 13 lines*/
   /* on the Current Page are filled up by the User.*/
   /* 4. On PF8, Check the PT07WSW2(New Page Flag). If 'Y'es, then*/
   /* Add/Write the Data to TSQ, else Rewrite the Data to TSQ.*/
   /* Write/Rewrite the Data to TSQ should be done on ENTER Key Press too*/
   /* 5. On ENTER, Perform Validations a) Check for Valid Selection Code*/
   /* for the Mode 2) Check if the Data exists on Database 3) Check*/
   /* for Valid Factory Code 4) Check for Overlap PO-MO-RNG.*/
   /* 6. IF Validation is Through, SET THE DATA CHANGE FLAG = 'Y'*/
   /* set wait pf9 confirm 'Y' & ask user to confirm updation by PF9.*/
   /* 7. IF PF9 & NO Selection Code, then display 'No Changes'.*/
   /* 8. IF PF9 & DATA CHANGE FLAG = 'Y', then display 'Data changed*/
   /* while waiting for PF9. Enter to Re-edit'*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0)
    return;
  end

  PTWREC.XXXMODID = "250"; /* Module identification*/

  PT07W02D.PT07W-DATA-CHG = "N"; /* set data change indicator to no.*/
  PT07W02A.PT07WSW4 = "N"; /* set SELECT CODE FOUND SWITCH to no.*/
  PT07W02A.PT07WSW5 = "N"; /* 'D' SELECT CODE FOUND SWITCH to no.*/

  PT07W02A.PT07W-RE-CONFIRM = "N";

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  if (PT07M002.CAITEM > " ") /* Application data was entered*/
    set PT07M002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(007); /* Enter only with FAST PATH*/
  end

  PT07W02D.PT07WBSW = "N"; /* set display blank page to no*/

   /* VANNAM CHANGES BEGIN HERE*/
  if (PT07W02A.PT07WFLAG == "S")
    if (PT07W00.PT07WSSW-P == "N")
      if ("A" in PT07M002.PT07MSEL
       || "C" in PT07M002.PT07MSEL
       || "D" in PT07M002.PT07MSEL)
        converseLib.validationFailed(102);
        exit stack;
      end
    end
  end
   /* VANNAM CHANGES END HERE*/
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  if ((converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
   && PT07W02A.PT07WFLAG == "I")  
    if ("A" in PT07M002.PT07MSEL
     || "C" in PT07M002.PT07MSEL
     || "D" in PT07M002.PT07MSEL)
      set PT07M002.PT07MSEL[sysVar.arrayIndex] normal, cursor;
      PT07W02D.PT07WBSW = "N"; /* set display blank page to no*/
      PT07W02D.PT07WSWF = "N"; /* set format map switch to no*/
      PT07W02D.PT07WSWR = "N"; /* set request for data switch no*/
      converseLib.validationFailed(120); /* can't scroll w/selection*/
      exit stack;
    else
      PT07251(); /* Verify scroll request*/
      return;
    end
  else
    if ((converseVar.eventKey is pf8 ||                          /* or scroll forward request*/
    converseVar.eventKey is pf7)                                 /* or scroll forward request*/
     && PT07W02A.PT07WFLAG != "I")                              

      PT07W02D.PT07WIX = 1;
      while (PT07WIX <= 13)
        if (converseVar.eventKey is pf8)
          if (PT07M002.FY-FCTY-CD[PT07WIX] <= " " && 
          PT07M002.PC-PO-ID-MO-RNG[PT07WIX] <= 0 && 
          PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] <= 0)
            converseLib.validationFailed(197); /* Add a valid record to factory details*/
            set PT07M002.PT07MSEL[PT07WIX] cursor, bold; /* Highlight*/
            set PT07M002.FY-FCTY-CD[PT07WIX] bold;
            set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] bold;
            set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;
            exit stack;
          end
        end
        if (PT07W02A.PT07WSW3 == "Y" && PT07M002.PT07MSEL[PT07WIX] != "A")
          converseLib.validationFailed(204); /* Only 'A' Valid*/
          set PT07M002.PT07MSEL[PT07WIX] cursor, bold; /* hilite*/
          exit stack;
        end
        if ((PT07M002.FY-FCTY-CD[PT07WIX] != 
        PT07W02.FY-FCTY-CD[PT07WIX]
         || PT07M002.PC-PO-ID-MO-RNG[PT07WIX] != 
        PT07W02.PC-PO-ID-MO-RNG[PT07WIX]
         || PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] != 
        PT07W02.PC-PO-ID-MO-TO-RNG[PT07WIX]) && 
        (PT07M002.PT07MSEL[PT07WIX] != "A" && 
        PT07M002.PT07MSEL[PT07WIX] != "C" && 
        PT07M002.PT07MSEL[PT07WIX] != "D"))

          if (PT07M002.FY-FCTY-CD[PT07WIX] <= " " && 
          PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] <= 0 && 
          PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] <= 0)
          else
            converseLib.validationFailed(195); /* Entered Data NOT Selected*/
            set PT07M002.PT07MSEL[PT07WIX] cursor, bold; /* Highlight*/
            set PT07M002.FY-FCTY-CD[PT07WIX] bold;
            set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] bold;
            set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;
            exit stack;
          end
        end
        if (PT07W02A.PT07WFLAG == "A" && PT07M002.PT07MSEL[PT07WIX] == "D")
          converseLib.validationFailed(214); /* Selection INVALID*/
          set PT07M002.PT07MSEL[PT07WIX] cursor, bold; /* Highlight*/
          set PT07M002.FY-FCTY-CD[PT07WIX] bold;
          set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] bold;
          set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;
          exit stack;
        end
        PT07W02D.PT07WIX = PT07W02D.PT07WIX + 1;
      end /* End While*/

      PT07255();

      PT07W02D.PT07WSWF = "N";
      PT07W02A.PT07WSW1 = "Y";
      PT07W02D.PT07WIX = 1;

      if (converseVar.eventKey is pf7 && PT07W00.PT07WSSW-P != "Y")
        PT07W02D.PT07WSWR = "N";
      end

      exit stack;

    else
   /* IF PT07W00.PT07WSSW-P EQ 'Y';*/
   /* ELSE;*/
      /* MOVE 102 TO EZEMNO;*/
      /* EZEFLO;*/
   /* END; /* If Security Clearance Flag = 'y'*/
    /* ------------------------------------------------------------*/
    /* Otherwise, PF9 or ENTER was pressed.*/
    /* Or PF8 in Add Mode was pressed.*/
    /* If page was formatted, verify selections.*/
    /* ------------------------------------------------------------*/
    /* PROCESSING FOR ADD/CHANGE/SELECT MODE BEGINS----------------*/
      if (PT07W02A.PT07WFLAG == "A" || 
      PT07W02A.PT07WFLAG == "C" || 
      PT07W02A.PT07WFLAG == "S")
        if (PT07W02D.TA5TSQIX == 0 || 
        PT07W02D.TA5TSQIX == 1) /* Only 1 Page Processing*/
          PT07254(); /* Verify Entered Data for 'A'dd Mode*/
        else /* Multiple Pages Processing*/
          PT07W02D.PT07WIX = 1;
          while (PT07WIX <= 13)
            if (PT07W02A.PT07WSW3 == "Y" && PT07M002.PT07MSEL[PT07WIX] != "A"
             && PT07M002.PT07MSEL[PT07WIX] != " ")
              converseLib.validationFailed(204); /* ONLY 'A' VALID SELECTION*/
              set PT07M002.PT07MSEL[PT07WIX] cursor, bold; /* hilite*/
              exit stack;
            end
            if ((PT07M002.FY-FCTY-CD[PT07WIX] != 
            PT07W02.FY-FCTY-CD[PT07WIX] || 
            PT07M002.PT07MSEL[PT07WIX] != PT07W02.PT07WSEL[PT07WIX]
             || PT07M002.PC-PO-ID-MO-RNG[PT07WIX] != 
            PT07W02.PC-PO-ID-MO-RNG[PT07WIX]
             || PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] != 
            PT07W02.PC-PO-ID-MO-TO-RNG[PT07WIX]) && 
            (PT07M002.PT07MSEL[PT07WIX] != "A" && 
            PT07M002.PT07MSEL[PT07WIX] != "C" && 
            PT07M002.PT07MSEL[PT07WIX] != "D"))

              if (PT07M002.FY-FCTY-CD[PT07WIX] <= " " && 
              PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] <= 0 && 
              PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] <= 0)
              else
                converseLib.validationFailed(195); /* Entered Data NOT Selected*/
                set PT07M002.PT07MSEL[PT07WIX] cursor, bold; /* Highlight*/
                set PT07M002.FY-FCTY-CD[PT07WIX] bold;
                set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] bold;
                set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;
                exit stack;
              end
            end
            if (PT07W02A.PT07WFLAG == "A" && PT07M002.PT07MSEL[PT07WIX] == "D")
              converseLib.validationFailed(214); /* Selection INVALID*/
              set PT07M002.PT07MSEL[PT07WIX] cursor, bold; /* Highlight*/
              set PT07M002.FY-FCTY-CD[PT07WIX] bold;
              set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] bold;
              set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;
              exit stack;
            end
            PT07W02D.PT07WIX = PT07W02D.PT07WIX + 1;
          end /* End While*/

          PT07255();

          PT07W02A.PT07COUNT2 = 0;
          PT07W02D.XXXTSPAG = 1; /* Set the current page to 1*/

          while (PT07W02D.XXXTSPAG <= PT07W02D.TA5TSQIX)
            set PT07W02 empty;
            PT07W02D.PT07W-SAVE-XXXTSPAG = PT07W02D.XXXTSPAG;
            PT07-221(); /* Read from TSQ*/

            PT07223(); /* Load back to Map*/
            if ("A" in PT07M002.PT07MSEL || 
            "C" in PT07M002.PT07MSEL || 
            "D" in PT07M002.PT07MSEL)
              PT07W02A.PT07WSW4 = "Y";
            end
            if ("D" in PT07M002.PT07MSEL)
              PT07W02A.PT07WSW5 = "Y";
            end
            PT07W02A.PT07COUNT1 = PT07W02D.XXXTSPAG - 1;
            PT07256();

            PT07W02D.XXXTSPAG = PT07W02D.XXXTSPAG + 1; /* Increment the Page*/

          end /* End While Pages*/
          if (PT07W02D.XXXTSPAG > PT07W02D.TA5TSQIX)
            PT07W02D.XXXTSPAG = PT07W02D.TA5TSQIX;
          end

          PT07W02A.PT07COUNT3 = TA5REC.TA5TSQIX * 13;
          if (PT07W02A.PT07COUNT2 == PT07W02A.PT07COUNT3)
            if (PT07W02A.PT07WFLAG == "S")
              PT07W03.PROCESSED-FLAG[PT07WIXM1] = "Y";
              PT07-266(); /* Get the Next Record*/
            end
          end
        end /* End if Pages Greater than 1*/


      end /* End of If 'A' Mode*/

    /* PROCESSING FOR ADD/CHANGE/SELECT MODE ENDS  --------------------*/

    /* PROCESSING FOR INQUIRY MODE ------------------------------------*/
      if (PT07W02A.PT07WFLAG == "I")
        PT07W02D.PT07WIX = PT07W02D.PT07WLN; /* Initialize line index*/

        while (PT07W02D.PT07WIX > 0) /* Until end of lines*/
        /* ------------------------------------------------------------*/
        /* If any style/color/dim was added or changed:*/
        /* ------------------------------------------------------------*/
          if (PT07M002.PT07MSEL[PT07WIX] != " " && 
          PT07M002.PT07MSEL[PT07WIX] != "A" && 
          PT07M002.PT07MSEL[PT07WIX] != "C" && 
          PT07M002.PT07MSEL[PT07WIX] != "D")
            converseLib.validationFailed(214); /* SELECTION INVALID*/
            set PT07M002.PT07MSEL[PT07WIX] cursor, bold; /* hilite*/

          else
            if (PT07M002.PT07MSEL[PT07WIX] > " ")
              if (PT07M002.PT07MSEL[PT07WIX] == "C" || 
              PT07M002.PT07MSEL[PT07WIX] == "D")
              else
                converseLib.validationFailed(203); /* SELECTION NOT AVAILABLE*/
                set PT07M002.PT07MSEL[PT07WIX] cursor, bold; /* hilite*/
              end
            end
            if (converseVar.validationMsgNum == 0) /* If Selection Available*/
              move PT07WIX to PT07WX1 withV60Compat;
              if (PT07M002.FY-FCTY-CD[PT07WX1] != 
              PT07W02.FY-FCTY-CD[PT07WX1]
               || PT07M002.PC-PO-ID-MO-RNG[PT07WX1] != 
              PT07W02.PC-PO-ID-MO-RNG[PT07WX1]
               || PT07M002.PC-PO-ID-MO-TO-RNG[PT07WX1] != 
              PT07W02.PC-PO-ID-MO-TO-RNG[PT07WX1])
                PT07253(); /* Verify date, factory, and mo rng*/
                if (converseVar.validationMsgNum == 0)
                  if (PT07M002.PT07MSEL[PT07WX1] == "A"
                   || PT07M002.PT07MSEL[PT07WX1] == "C")
                    PT07W02D.PT07W-DATA-CHG = "Y";
                                   /* set data change indicator to yes*/
                  else
                    converseLib.validationFailed(205); /* data changed valid select is 'c'*/
                    set PT07M002.PT07MSEL[PT07WX1] cursor, bold; /* hilite*/
                    set PT07M002.FY-FCTY-CD[PT07WX1] bold;
                    set PT07M002.PC-PO-ID-MO-RNG[PT07WX1] bold;
                    set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WX1] bold;
                  end
                end
              end

              if (PT07M002.PT07MSEL[PT07WX1] > " " /* Selection was entered*/
               && PT07M002.PT07MSEL[PT07WX1] != PT07W02.PT07WSEL[PT07WX1]
              )                                   
                PT07252(); /* Verify selections*/
                if (converseVar.validationMsgNum == 0)
                  PT07W02D.PT07W-DATA-CHG = "Y";
                                   /* set data change indicator to yes*/
                end
              end

            end /* End of If Selection Available*/
          end

          PT07W02D.PT07WIX = PT07W02D.PT07WIX - 1; /* Decrement line number*/
        end /* End of While Loop*/
      end /* End If Inquiry*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0)
    exit stack; /* Exit to display map*/
  end

  PT07W02D.PT07WSWF = "Y"; /* set format map switch to yes*/
  PT07W02D.PT07WSWR = "Y"; /* set request for data switch yes*/

   /* ------------------------------------------------------------*/
   /* if ENTER was pressed and changes were made, and the user is*/
   /* authorized to make changes, request confirmation.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter) /**/
    if (PT07W00.PT07WSSW-P == "Y") /* If security clearance*/
      if (PT07W02D.PT07W-DATA-CHG == "Y") /* changes were made*/
        if ("D" in PT07M002.PT07MSEL /* any 'd' entered*/
         || "C" in PT07M002.PT07MSEL /* any 'c' entered*/
         || "A" in PT07M002.PT07MSEL /* any 'a' entered*/
         || PT07W02A.PT07WSW4 == "Y") /* SELECTION CODE FOUND IN MULTIPLE PAGES*/
          PT07W02D.PT07WSWF = "N"; /* set format map switch to no*/
          PT07W02D.PT07WSWR = "N"; /* set request for data switch no*/
          PT07W02D.PT07W-WAIT-CONFIRM = "Y";
                                   /* set waiting confirm to yes*/
          converseLib.validationFailed(021); /* Indicate please confirm*/
          /* ----------------------------------------------*/
          /* load the screen to w02 storage*/
          /* ----------------------------------------------*/

          if ((PT07W02A.PT07WFLAG == "A" || 
          PT07W02A.PT07WFLAG == "C" || 
          PT07W02A.PT07WFLAG == "S") && PT07W02D.TA5TSQIX > 1)

            set PT07W02C empty;
            PT07W02D.XXXTSPAG = 1; /* Set the current page to 1*/

            while (PT07W02D.XXXTSPAG <= PT07W02D.TA5TSQIX)
              set PT07W02 empty;
              PT07W02D.PT07WIX = 1;
              PT07W02D.PT07W-SAVE-XXXTSPAG = PT07W02D.XXXTSPAG;
              PT07-221(); /* Read from TSQ*/
              PT07W02A.PT07COUNT = (PT07W02D.XXXTSPAG - 1) * 13;
              while (PT07W02D.PT07WIX <= PT07W02D.PT07WLN)
                PT07224(); /* Load into W08*/
                PT07W02D.PT07WIX = PT07W02D.PT07WIX + 1;
              end

              PT07W02D.XXXTSPAG = PT07W02D.PT07W-SAVE-XXXTSPAG;
              PT07W02D.XXXTSPAG = PT07W02D.XXXTSPAG + 1; /* Increment the Page*/

            end /* End While Pages*/
            if (PT07W02D.XXXTSPAG > PT07W02D.TA5TSQIX)
              PT07W02D.XXXTSPAG = PT07W02D.TA5TSQIX;
            end

          else
            PT07W02D.PT07WIX = 1; /* initialize line index*/
            while (PT07W02D.PT07WIX <= PT07W02D.PT07WLN) /* until screen  full*/
              PT07264(); /* load the map to storage page*/
              if (PT07W02A.PT07WFLAG == "A" /* any 'a' entered*/
               || PT07W02A.PT07WFLAG == "C" /* any 'c' entered*/
               || PT07W02A.PT07WFLAG == "S") /* any 's' entered*/
                PT07W02.SY1STNBR[PT07WIX] = PT07M002.SY1STNBR[1];
                PT07W02.SY2CLRID[PT07WIX] = PT07M002.SY2CLRID[1];
              end /* End IF*/
              PT07W02D.PT07WIX = PT07W02D.PT07WIX + 1;
            end /* End While*/
          end /* End If 'A'/'C'/'S' & Pages more than 1*/
        end /* If Sel 'A'/'D'/'C'*/
      else
        if (PT07W02A.PT07WFLAG == "A" /* any 'a' entered*/
         || PT07W02A.PT07WFLAG == "C" /* any 'c' entered*/
         || PT07W02A.PT07WFLAG == "S") /* any 's' entered*/
          PT07W02D.PT07WSWF = "N";
          PT07W02D.PT07WSWR = "N";
          PT07W02D.PT07WIX = 1; /* initialize line index*/
          while (PT07W02D.PT07WIX <= PT07W02D.PT07WLN) /* until screen  full*/
            PT07M002.PT07MSEL[PT07WIX] = " ";
            PT07W02D.PT07WIX = PT07W02D.PT07WIX + 1;
          end
        end
      end /* End If Data_chng flag = 'Y'*/
    else
      converseLib.validationFailed(102);
      exit stack;
    end /* End If Security Clearance flag = 'Y'*/
    exit stack;
  end

  if (converseVar.eventKey is pf9) /* if this is a confirmation request*/
    if (PT07W00.PT07WSSW-P == "Y") /* If security clearance*/
      if ("D" in PT07M002.PT07MSEL /* any 'd' entered*/
       || "C" in PT07M002.PT07MSEL /* any 'c' entered*/
       || "A" in PT07M002.PT07MSEL /* any 'a' entered*/
       || PT07W02A.PT07WSW4 == "Y") /* SELECTION CODE FOUND IN MULTIPLE PAGES*/
        if ("D" in PT07M002.PT07MSEL || PT07W02A.PT07WSW5 == "Y")
          if (PT07W02A.PT07W-PF9-CONFIRM == "N")
            PT07W02A.PT07W-RE-CONFIRM = "Y";
            PT07W02A.PT07W-PF9-CONFIRM = "Y";
          end
        end
        if (PT07W02D.PT07W-DATA-CHG == "Y") /* changes were made*/
          PT07W02D.PT07WSWF = "N"; /* set format map switch to no*/
          PT07W02D.PT07WSWR = "N"; /* set request for data switch no*/
          PT07W02D.PT07W-WAIT-CONFIRM = "N";
                              /* set data verified ind to no*/
          converseLib.validationFailed(079); /* press enter to reedit*/
          exit stack;
        end
      else
        PT07W02D.PT07WSWF = "N"; /* set format map switch to no*/
        PT07W02D.PT07WSWR = "N"; /* set request for data switch no*/
        PT07W02D.PT07W-WAIT-CONFIRM = "N";
                                   /* set data verified ind to no*/
        converseLib.validationFailed(137); /* no changes, no updates made*/
        exit stack;
      end
    else
      converseLib.validationFailed(102);
      exit stack;
    end
  end

end // end PT07250

// Verify scroll request
Function PT07251()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PT07W02D.XXXTSPAG < 2)      /* And no previous pages*/
    PTWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(02); /* No previous page to display*/
  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PT07W02D.XXXTSPAG >= PT07W02D.TA5TSQIX) /* and no more pages*/
    PTWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(03); /* No more pages to display*/
  end

  if (converseVar.validationMsgNum != 0) /* paging error occurred*/
    exit stack;
  end

end // end PT07251

// Verify selection
Function PT07252()
   /* ------------------------------------------------------------*/
   /* Verify only 'A', 'C' or 'D' entered.*/
   /* ------------------------------------------------------------*/
  if (PT07M002.PT07MSEL[PT07WX1] != " " /* Valid selection character*/
   && PT07M002.PT07MSEL[PT07WX1] != "C" /* Valid selection character*/
   && PT07M002.PT07MSEL[PT07WX1] != "A" /* Valid selection character*/
   && PT07M002.PT07MSEL[PT07WX1] != "D") /* Valid selection character*/

    PTWREC.XXXMODID = "252"; /* Module identification*/
    set PT07M002.PT07MSEL[PT07WX1] cursor, bold; /* Highlight*/
    converseLib.validationFailed(131); /* Indicate invalid option selected*/
  else

    PT07-252(); /* select exists on DMODEL.VFOFCT01*/

    /* ------------------------------------------------------------*/
     /* Verify if product exists for Change or Delete:*/
    /* ------------------------------------------------------------*/
    if (PT07M002.PT07MSEL[PT07WX1] == "C" /* If 'c' entered*/
     || PT07M002.PT07MSEL[PT07WX1] == "D") /* If 'd' entered*/

      if (VAGen_SQLCODE == 100) /* if product not found*/
        PTWREC.XXXMODID = "252"; /* Module identification*/
        set PT07M002.PT07MSEL[PT07WX1] cursor, bold; /* Highlight*/
        converseLib.validationFailed(095); /* Indicate product not there*/
      else
        if (PT07M002.PT07MSEL[PT07WX1] == "C") /* If 'c' entered*/
          PT07-251(); /* verify po-id-mo-range*/

          PT07W02B.XGPCD[PT07WX1] = "02"; /* footwear gpc*/
          PT07W02B.SY1STNBR[PT07WX1] = PT07W02.SY1STNBR[PT07WX1];
                                   /* blk style nbr*/
          PT07W02B.SY2CLRID[PT07WX1] = PT07W02.SY2CLRID[PT07WX1];
                                /* blk color cd*/
          PT07W02B.XDMCD[PT07WX1] = PT07W02.XDMCD[PT07WX1]; /* dimen*/
          PT07W02B.FY-FCTY-CD[PT07WX1] = PT07W02.FY-FCTY-CD[PT07WX1];
                                /* factory*/
          PT07W02B.PC-PO-ID-MO-RNG[PT07WX1] = PT07W02.PC-PO-ID-MO-RNG[PT07WX1]; /* from PO number*/
          PT07W02B.PC-PO-ID-MO-TO-RNG[PT07WX1] = PT07W02.PC-PO-ID-MO-TO-RNG[PT07WX1]; /* to PO number*/

        end
      end
    else
      /* ------------------------------------------------------------*/
      /* Verify if Add requested, verify that style is not on database:*/
      /* ------------------------------------------------------------*/
      if (PT07M002.PT07MSEL[PT07WX1] == "A") /* If 'a' entered*/

        if (SQLCA.VAGen_SQLCODE == 0) /* If style found*/
          PTWREC.XXXMODID = "252"; /* Module identification*/
          set PT07M002.PT07MSEL[PT07WIX] cursor, bold; /* Highlight*/
          converseLib.validationFailed(206); /* Indicate product already exists*/
        end
      end
    end
  end

  if (converseVar.validationMsgNum == 0)
    set PT07M002.PT07MSEL[PT07WX1] normal;
  end


end // end PT07252

// Verify date
Function PT07253()
   /* ------------------------------------------------------------*/
   /* PT07253 PROCESS*/
   /* Validate PO ID MO RNG, FACTORY CODE*/
   /* ------------------------------------------------------------*/
  PTWREC.XXXMODID = "253"; /* Module identification*/
  if ((PT07M002.PC-PO-ID-MO-RNG[PT07WIX] < 00000001 || 
  PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] < 00000001 || 
  PT07M002.FY-FCTY-CD[PT07WIX] == "    "))
    set PT07M002.FY-FCTY-CD[PT07WIX] cursor, bold;
    set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] bold;
    set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;
    converseLib.validationFailed(166);
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Verify valid po month range from*/
   /* ------------------------------------------------------------*/
  if (PT07M002.PC-PO-ID-MO-RNG[PT07WIX] < 00000001)
    if (PT07M002.FY-FCTY-CD[PT07WIX] != "    ") /* no factory code*/
      set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] cursor, bold;
      converseLib.validationFailed(116); /* Indicate missing*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify valid po month range to*/
   /* ------------------------------------------------------------*/
  if (PT07M002.PC-PO-ID-MO-RNG[PT07WIX] == 00000000) /* no from range*/
    if (PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] > 00000000) /* is to range*/
      set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] cursor, bold;
      converseLib.validationFailed(161); /* Indicate must have from range*/
      exit stack;
    end
  end
  if (PT07M002.PC-PO-ID-MO-RNG[PT07WIX] > 00000000) /* if from range*/
    if (PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] == 00000000) /* no to range*/
      set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] cursor, bold;
      converseLib.validationFailed(163); /* Indicate must have to range*/
      exit stack;
    end
  end
  if (PT07M002.PC-PO-ID-MO-RNG[PT07WIX] > 00000000) /* have from range*/
    if (PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] > 00000000) /* and to range*/
      if (PT07M002.PC-PO-ID-MO-RNG[PT07WIX] > 
      PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX]) /* from is greater than to*/
        set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] cursor, bold;
        converseLib.validationFailed(162); /* Indicate to must be > from*/
        exit stack;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify valid factory*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  if (PT07M002.PC-PO-ID-MO-RNG[PT07WIX] > 00000000)
    if (PT07M002.FY-FCTY-CD[PT07WIX] == "    ")
      converseLib.validationFailed(68); /* Invalid factory*/
      set PT07M002.FY-FCTY-CD[PT07WIX] cursor, bold; /* Highlight error*/
      exit stack;
    end
  end
  if (PT07M002.PC-PO-ID-MO-RNG[PT07WIX] > 00000000)
    if (PT07M002.FY-FCTY-CD[PT07WIX] != "    ")
      FY1REC.XGPCD = "02";
      FY1REC.FY1FCTYC = PT07M002.FY-FCTY-CD[PT07WIX];

      call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the row*/

      if (SQLCA.VAGen_SQLCODE != 000) /* bad return*/
        if (SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/
          converseLib.validationFailed(68); /* Invalid factory*/
          set PT07M002.FY-FCTY-CD[PT07WIX] cursor, bold;
                                   /* Highlight error*/
          exit stack;
        else
          if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
            converseLib.validationFailed(11); /* Indicate not available*/
            TA1REC.TA1FUNC = "POST"; /* Termination function*/
          else
            converseLib.validationFailed(10); /* Indicate system error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            converseLib.clearScreen();
             /* Clear screen before redisplay*/
          end
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PT07550"; /* Process name*/
          TA1REC.TA1LOC = "SELECT UNIQUE FACTORY TABLE ROW";
          TA1REC.TA1MAP = "PT07M002"; /* Map name*/
          TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
          TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/


        end
      end
    end
  end
    /* ------------------------------------------------------------*/
    /* Verify valid PO ID Month Range of format ccyymmmm*/
    /* whereas 1st mm is production month & 2nd mm is buy month*/
    /* both mm should be in the range 1 - 12. The PO ID Month Range*/
    /* is validated by a common date checking routine TA0040 which*/
    /* validates ccyymm & by a compare statement which validates*/
    /* the 2nd mm.*/
    /* ------------------------------------------------------------*/
  set TA2REC empty;

    /* move override ccyymmdd date group to ta2rec ccyymmdd;*/
  PT07W02D.PT07W-FORMAT-DATE = PT07M002.PC-PO-ID-MO-RNG[PT07WIX];
  TA2REC.TA2GRGGN = PT07W02D.PT07W-FORMAT-DATE;
                                   /* ovrrde ccyymmdd grp*/
  TA2REC.TA2DTOPT = "GREGJUL ";
  TA2REC.TA2GRTYP = "G";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
                                   /* common date checking/converting pgm*/

  if (TA2REC.TA2RTNCD != 0) /* bad date returned?*/
    converseLib.validationFailed(208); /* invalid mmddyy combination*/
    set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] cursor, bold; /* Hilit*/
    exit stack;
  end

  if (PT07W02D.PT07W-FORMAT-DD > 0 && 
  PT07W02D.PT07W-FORMAT-DD <= 12)
  else
    converseLib.validationFailed(208); /* invalid mmddyy combination*/
    set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] cursor, bold; /* Hilit*/
    exit stack;
  end

   /* IF PT07W02D.PT07W-FORMAT-DD EQ PT07W02D.PT07W-FORMAT-MM;*/
     /* MOVE 208 TO EZEMNO;          /* invalid PO MO RNG*/
     /* SET PT07M002.PC-PO-ID-MO-RNG(PT07WIX) CURSOR,BRIGHT;/*Hilit*/
     /* EZEFLO;*/
   /* END;*/


  set TA2REC empty;

    /* move override ccyymmdd date group to ta2rec ccyymmdd;*/
  PT07W02D.PT07W-FORMAT-DATE = PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX];
  TA2REC.TA2GRGGN = PT07W02D.PT07W-FORMAT-DATE;
                                   /* ovrrde ccyymmdd grp*/
  TA2REC.TA2DTOPT = "GREGJUL ";
  TA2REC.TA2GRTYP = "G";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
                                   /* common date checking/converting pgm*/

  if (TA2REC.TA2RTNCD != 0) /* bad date returned?*/
    converseLib.validationFailed(208); /* invalid mmddyy combination*/
    set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] cursor, bold; /* Hilit*/
    exit stack;
  end

  if (PT07W02D.PT07W-FORMAT-DD > 0 && 
  PT07W02D.PT07W-FORMAT-DD <= 12)
  else
    converseLib.validationFailed(208); /* invalid mmddyy combination*/
    set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] cursor, bold; /* Hilit*/
    exit stack;
  end

   /* IF PT07W02D.PT07W-FORMAT-DD EQ PT07W02D.PT07W-FORMAT-MM;*/
     /* MOVE 208 TO EZEMNO;          /* invalid PO MO RNG*/
     /* SET PT07M002.PC-PO-ID-MO-TO-RNG(PT07WIX) CURSOR,BRIGHT;/*Hilit*/
     /* EZEFLO;*/
   /* END;*/

  if (PT07W02A.PT07WFLAG == "A"
   || PT07W02A.PT07WFLAG == "C"
   || PT07W02A.PT07WFLAG == "S")
    return;
  end

   /* ------------------------------------------------------------*/
   /* Check for overlaping po-id-mo range*/
   /* ------------------------------------------------------------*/
  if ("C" in PT07M002.PT07MSEL)
    PT07-251();
  end

  if (converseVar.validationMsgNum != 0) /* if any invalid fields*/
                                   /* display error*/
    exit stack;
  end

  PT07W02D.PT07W-DATA-CHG = "Y"; /* Modified data switch*/

end // end PT07253

// Verify data for Add Mode
Function PT07254()
   /* ----------------------------------------------------------------------*/
   /* PT07254 PROCESS*/
   /* Validate Map Data.*/
   /* Mode is 'A'/'C'/'S' & its ONLY 1 PAGE MAP / Product.*/
   /* ----------------------------------------------------------------------*/
  PT07W02D.PT07WIX = 1; /* Initialize line index*/
  PT07W02A.PT07COUNT = 0;
  PT07W02A.PT07COUNT1 = 0;

  while (PT07W02D.PT07WIX <= 13) /* Until end of lines*/
    if (PT07M002.PT07MSEL[PT07WIX] == "A" || 
    PT07M002.PT07MSEL[PT07WIX] == "C" || 
    PT07M002.PT07MSEL[PT07WIX] == "D" || 
    PT07M002.PT07MSEL[PT07WIX] == " ")
      if (PT07W02A.PT07WSW3 == "Y" && PT07M002.PT07MSEL[PT07WIX] != "A"
       && PT07M002.PT07MSEL[PT07WIX] != " ")
        converseLib.validationFailed(214); /* SELECTION INVALID*/
        set PT07M002.PT07MSEL[PT07WIX] cursor, bold; /* hilite*/
        exit stack;
      end
    else
      converseLib.validationFailed(204); /* ONLY 'A'/'C' IS VALID SELECTION.*/
      PT07W02D.PT07WSWF = "N";
      PT07W02D.PT07WSWR = "N";
      set PT07M002.PT07MSEL[PT07WIX] cursor, bold; /* hilite*/
      exit stack;
    end
    if ((PT07M002.FY-FCTY-CD[PT07WIX] != 
    PT07W02.FY-FCTY-CD[PT07WIX] || 
    PT07M002.PT07MSEL[PT07WIX] != PT07W02.PT07WSEL[PT07WIX]
     || PT07M002.PC-PO-ID-MO-RNG[PT07WIX] != 
    PT07W02.PC-PO-ID-MO-RNG[PT07WIX]
     || PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] != 
    PT07W02.PC-PO-ID-MO-TO-RNG[PT07WIX]) && 
    (PT07M002.PT07MSEL[PT07WIX] != "A" && 
    PT07M002.PT07MSEL[PT07WIX] != "C" && 
    PT07M002.PT07MSEL[PT07WIX] != "D"))

      if (PT07M002.FY-FCTY-CD[PT07WIX] <= " " && 
      PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] <= 0 && 
      PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] <= 0)
      else
        converseLib.validationFailed(195); /* Entered Data NOT Selected*/
        set PT07M002.PT07MSEL[PT07WIX] cursor, bold; /* Highlight*/
        set PT07M002.FY-FCTY-CD[PT07WIX] bold;
        set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] bold;
        set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;
        exit stack;
      end
    end

    if (PT07W02A.PT07WFLAG == "A" && PT07M002.PT07MSEL[PT07WIX] == "D")
      converseLib.validationFailed(214); /* Selection INVALID*/
      set PT07M002.PT07MSEL[PT07WIX] cursor, bold; /* Highlight*/
      set PT07M002.FY-FCTY-CD[PT07WIX] bold;
      set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] bold;
      set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;
      exit stack;
    end

    if (PT07M002.PT07MSEL[PT07WIX] == " ")
      if (PT07M002.FY-FCTY-CD[PT07WIX] <= " " && 
      PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] <= 0 && 
      PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] <= 0)
        PT07W02A.PT07COUNT = PT07W02A.PT07COUNT + 1;
      end
      if (PT07M002.FY-FCTY-CD[PT07WIX] == 
      PT07W02.FY-FCTY-CD[PT07WIX]
       && PT07M002.PC-PO-ID-MO-RNG[PT07WIX] == 
      PT07W02.PC-PO-ID-MO-RNG[PT07WIX]
       && PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] == 
      PT07W02.PC-PO-ID-MO-TO-RNG[PT07WIX])
        PT07W02A.PT07COUNT1 = PT07W02A.PT07COUNT1 + 1;
      end
    else
      if (PT07M002.FY-FCTY-CD[PT07WIX] <= " " && 
      PT07M002.PC-PO-ID-MO-RNG[PT07WIX] <= 0 && 
      PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] <= 0)
        converseLib.validationFailed(197); /* Add a valid record to factory details*/
        set PT07M002.PT07MSEL[PT07WIX] bold; /* Highlight*/
        set PT07M002.FY-FCTY-CD[PT07WIX] cursor, bold;
        set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] bold;
        set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;
        exit stack;
      end
      if (PT07M002.FY-FCTY-CD[PT07WIX] != 
      PT07W02.FY-FCTY-CD[PT07WIX]
       || PT07M002.PT07MSEL[PT07WIX] != PT07W02.PT07WSEL[PT07WIX]
       || PT07M002.PC-PO-ID-MO-RNG[PT07WIX] != 
      PT07W02.PC-PO-ID-MO-RNG[PT07WIX]
       || PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] != 
      PT07W02.PC-PO-ID-MO-TO-RNG[PT07WIX])
        PT07253(); /* Check Factory Code,PO MO RNG DATES.*/
        if (converseVar.validationMsgNum == 0)
          PT07-252(); /* If already exists?*/
          if (PT07M002.PT07MSEL[PT07WIX] == "A")
            if (SQLCA.VAGen_SQLCODE == 0) /* If style found*/
              set PT07M002.PT07MSEL[PT07WIX] cursor, bold; /* Highlight*/
              set PT07M002.FY-FCTY-CD[PT07WIX] bold;
              set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] bold;
              set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;
              converseLib.validationFailed(206); /* Indicate product already exists*/
              PT07W02D.PT07WSWF = "N";
              PT07W02D.PT07WSWR = "N";
              exit stack;
            end
            if (SQLCA.VAGen_SQLCODE == 100) /* If style NOT found*/
              PT07-254(); /* Overlap PO Check*/
            end
          end
          if (PT07M002.PT07MSEL[PT07WIX] == "C"
           || PT07M002.PT07MSEL[PT07WIX] == "D")
            if (SQLCA.VAGen_SQLCODE == 100) /* If style NOT found*/
              set PT07M002.PT07MSEL[PT07WIX] cursor, bold; /* Highlight*/
              set PT07M002.FY-FCTY-CD[PT07WIX] bold;
              set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] bold;
              set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;
              converseLib.validationFailed(211); /* Indicate product does not  exist*/
              PT07W02D.PT07WSWF = "N";
              PT07W02D.PT07WSWR = "N";
              exit stack;
            end
            if (SQLCA.VAGen_SQLCODE == 0) /* If style found*/
              PT07-256(); /* Overlap PO Check*/
            end
          end
          if (converseVar.validationMsgNum == 0)
            if (PT07M002.PT07MSEL[PT07WIX] == "D")
              if (PT07M002.FY-FCTY-CD[PT07WIX] != 
              PT07W02.FY-FCTY-CD[PT07WIX]
               || PT07M002.PC-PO-ID-MO-RNG[PT07WIX] != 
              PT07W02.PC-PO-ID-MO-RNG[PT07WIX]
               || PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] != 
              PT07W02.PC-PO-ID-MO-TO-RNG[PT07WIX])
                converseLib.validationFailed(212); /* Data Changed. 'D' is invalid*/
                set PT07M002.PT07MSEL[PT07WIX] bold; /* Highlight*/
                set PT07M002.FY-FCTY-CD[PT07WIX] cursor, bold;
                set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] bold;
                set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;
                exit stack;
              else
                PT07W02D.PT07W-DATA-CHG = "Y";
              end
            else
              PT07W02D.PT07W-DATA-CHG = "Y";
            end
          else
            PT07W02D.PT07W-DATA-CHG = "N";
          end
        end
      end /* End compare w02 with Map2 Variables*/
    end /* End of If 'A' in Map Select*/
    PT07W02D.PT07WIX = PT07W02D.PT07WIX + 1; /* Increment line number*/
  end /* End of While*/

  if (PT07W02A.PT07COUNT == 13)
    converseLib.validationFailed(197);
    set PT07M002.PT07MSEL[1] cursor, bold; /* Highlight*/
    set PT07M002.FY-FCTY-CD[1] bold;
    set PT07M002.PC-PO-ID-MO-RNG[1] bold;
    set PT07M002.PC-PO-ID-MO-TO-RNG[1] bold;
  end

  if (PT07W02A.PT07COUNT1 == 13)
    if (PT07W02A.PT07WFLAG == "S") /* If 'S' Mode & No changes done,*/
      if (converseVar.eventKey is enter) /* then ON ENTER, Display the Next Rec*/
        PT07W03.PROCESSED-FLAG[PT07WIXM1] = "Y";
        PT07-266(); /* Get the Next Record*/
      end
    end
  end

end // end PT07254

// Verify the entered data
Function PT07255()
   /* ----------------------------------------------------------------------*/
   /* PT07255 PROCESS*/
   /* IF NEW PAGE FLAG = 'Y', WRITE THE MAP DATA ON NEW PAGE OF THE QUEUE.*/
   /* ELSE REWRITE THE DATA ON THE CURRENT PAGE OF TSQ.*/
   /* ----------------------------------------------------------------------*/
  PT07W02D.PT07WIX = 1; /* initialize line index*/
  while (PT07W02D.PT07WIX <= PT07W02D.PT07WLN) /* until screen is full*/
    PT07264(); /* load the map to storage page*/
    if (PT07W02A.PT07WFLAG == "A" /* any 'a' entered*/
     || PT07W02A.PT07WFLAG == "C" /* any 'a' entered*/
     || PT07W02A.PT07WFLAG == "S") /* any 'a' entered*/
      PT07W02.SY1STNBR[PT07WIX] = PT07M002.SY1STNBR[1];
      PT07W02.SY2CLRID[PT07WIX] = PT07M002.SY2CLRID[1];
    end
    PT07W02D.PT07WIX = PT07W02D.PT07WIX + 1;
  end

  if (PT07W02A.PT07WSW2 == "Y") /* Whenevr a New Page is to be*/
    PT07W02A.PT07WSW2 = "N"; /* Added to the TSQ*/
    PT07-215(); /* Write the TSQ*/
  else
    PT07-222(); /* Rewrite the TSQ*/
  end


end // end PT07255

// Verify datafor Add Mode
Function PT07256()
   /* ----------------------------------------------------------------------*/
   /* PT07256 PROCESS*/
   /* Validate the Map Data*/
   /* Mode is 'A'/'C'/'S' & its Multiple Pages Map / Product*/
   /* ----------------------------------------------------------------------*/
  PT07W02D.PT07WIX = 1; /* Initialize line index*/

  while (PT07W02D.PT07WIX <= 13) /* Until end of lines*/

    PT07W02A.PT07COUNT = (PT07W02A.PT07COUNT1 * 13) + PT07W02D.PT07WIX;

    if (PT07M002.PT07MSEL[PT07WIX] == "A" || 
    PT07M002.PT07MSEL[PT07WIX] == "C" || 
    PT07M002.PT07MSEL[PT07WIX] == "D" || 
    PT07M002.PT07MSEL[PT07WIX] == " ")
    else
      converseLib.validationFailed(204); /* ONLY 'A' / 'C' IS VALID SELECTION.*/
      PT07W02D.PT07WSWF = "N";
      PT07W02D.PT07WSWR = "N";
      set PT07M002.PT07MSEL[PT07WIX] cursor, bold; /* hilite*/
      exit stack;
    end
    if (PT07M002.PT07MSEL[PT07WIX] == " ")
      if (PT07M002.FY-FCTY-CD[PT07WIX] == 
      PT07W02C.FY-FCTY-CD[PT07COUNT]
       && PT07M002.PC-PO-ID-MO-RNG[PT07WIX] == 
      PT07W02C.PC-PO-ID-MO-RNG[PT07COUNT]
       && PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] == 
      PT07W02C.PC-PO-ID-MO-TO-RNG[PT07COUNT])
        PT07W02A.PT07COUNT2 = PT07W02A.PT07COUNT2 + 1;
      end
    else
      if (PT07M002.FY-FCTY-CD[PT07WIX] <= " " && 
      PT07M002.PC-PO-ID-MO-RNG[PT07WIX] <= 0 && 
      PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] <= 0)
        converseLib.validationFailed(197); /* Add a valid record to factory details*/
        set PT07M002.PT07MSEL[PT07WIX] bold; /* Highlight*/
        set PT07M002.FY-FCTY-CD[PT07WIX] cursor, bold;
        set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] bold;
        set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;
        exit stack;
      end
      if (PT07M002.FY-FCTY-CD[PT07WIX] != 
      PT07W02C.FY-FCTY-CD[PT07COUNT]
       || PT07M002.PT07MSEL[PT07WIX] != PT07W02C.PT07WSEL[PT07COUNT]
       || PT07M002.PC-PO-ID-MO-RNG[PT07WIX] != 
      PT07W02C.PC-PO-ID-MO-RNG[PT07COUNT]
       || PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] != 
      PT07W02C.PC-PO-ID-MO-TO-RNG[PT07COUNT])
        PT07253(); /* Check Factory Code,PO MO RNG DATES.*/
        if (converseVar.validationMsgNum == 0)
          PT07-252(); /* If already exists?*/
          if (PT07M002.PT07MSEL[PT07WIX] == "A")
            if (SQLCA.VAGen_SQLCODE == 0) /* If style found*/
              set PT07M002.PT07MSEL[PT07WIX] cursor, bold; /* Highlight*/
              set PT07M002.FY-FCTY-CD[PT07WIX] bold;
              set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] bold;
              set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;
              converseLib.validationFailed(206); /* Indicate product already exists*/
              PT07W02D.PT07WSWF = "N";
              PT07W02D.PT07WSWR = "N";
              exit stack;
            end
            if (SQLCA.VAGen_SQLCODE == 100) /* If style NOT found*/
              PT07-255(); /* Overlap PO Check for Multiple Pages*/
            end
          end
          if (PT07M002.PT07MSEL[PT07WIX] == "C"
           || PT07M002.PT07MSEL[PT07WIX] == "D")
            if (SQLCA.VAGen_SQLCODE == 100) /* If style NOT found*/
              set PT07M002.PT07MSEL[PT07WIX] cursor, bold; /* Highlight*/
              set PT07M002.FY-FCTY-CD[PT07WIX] bold;
              set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] bold;
              set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;
              converseLib.validationFailed(211); /* Indicate product does not exist*/
              PT07W02D.PT07WSWF = "N";
              PT07W02D.PT07WSWR = "N";
              exit stack;
            end
            if (SQLCA.VAGen_SQLCODE == 0) /* If style found*/
              PT07-257(); /* Overlap PO Check for Multiple Pages*/
            end
          end
             /* ELSE;*/
          if (converseVar.validationMsgNum == 0)
            if (PT07M002.PT07MSEL[PT07WIX] == "D")
              if (PT07M002.FY-FCTY-CD[PT07WIX] != 
              PT07W02C.FY-FCTY-CD[PT07COUNT]
               || PT07M002.PC-PO-ID-MO-RNG[PT07WIX] != 
              PT07W02C.PC-PO-ID-MO-RNG[PT07COUNT]
               || PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] != 
              PT07W02C.PC-PO-ID-MO-TO-RNG[PT07COUNT])
                converseLib.validationFailed(212); /* Data Changed. 'D' is invalid*/
                set PT07M002.PT07MSEL[PT07WIX] bold; /* Highlight*/
                set PT07M002.FY-FCTY-CD[PT07WIX] cursor, bold;
                set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] bold;
                set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;
                exit stack;
              else
                PT07W02D.PT07W-DATA-CHG = "Y";
              end
            else
              PT07W02D.PT07W-DATA-CHG = "Y";
            end

          else
            PT07W02D.PT07W-DATA-CHG = "N";
          end
             /* END;*/
        end
      end /* End compare w02 with Map2 Variables*/
    end /* End of If 'A' in Map Select*/
    PT07W02D.PT07WIX = PT07W02D.PT07WIX + 1; /* Increment line number*/
  end /* End of While*/

end // end PT07256

// Process valid input request
Function PT07260()
   /* ------------------------------------------------------------*/
   /* PT07260 PROCESS*/
   /* If PF9, Commit the Changes on to the Database.*/
   /* Add/Change/Delete of Factory Details Record is carried out.*/
   /* Warn if the Last Factory Detail Record is to be deleted, which*/
   /* would lead to lose of Priority for the Product. If 'P' is the*/
   /* ONLY Code available, then the Product itself would be deleted.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  PT07W02D.PT07WSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    PT07W02D.XXXTSPAG = PT07W02D.XXXTSPAG - 1; /* Decrement page number*/
    PT07W02D.PT07W-SAVE-XXXTSPAG = PT07W02D.XXXTSPAG;
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    PT07W02D.XXXTSPAG = PT07W02D.XXXTSPAG + 1; /* Increment page number*/
    PT07W02D.PT07W-SAVE-XXXTSPAG = PT07W02D.XXXTSPAG;
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If PF9 confirm pressed, process adds, changes, deletes*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf9 /* If PF9 was pressed*/
   && PT07W02D.PT07W-WAIT-CONFIRM == "Y") /* and waiting confirm*/
    PT07W02D.PT07W-WAIT-CONFIRM = "N"; /* clear wait confirm sw*/
    PTWREC.XXXMSGNO = " "; /* Clear message out*/
    converseLib.validationFailed(0); /* Clear message out*/

    if (PT07W02A.PT07WFLAG == "A"
     || (PT07W02A.PT07WFLAG == "C"
     && PT07W02A.PT07W-RE-CONFIRM != "Y"))
      PT07-264(); /* Select Record from VFORCD01*/
      if (PT07W03.OPERATION-FLAG[PT07WIXM1] == "NA")
        if (SQLCA.VAGen_SQLCODE == 0)
          PT07W03.PROCESSED-FLAG[PT07WIXM1] = "S";
          converseLib.validationFailed(210);
          PT07-266(); /* Get the Next Record*/
        else
          if (SQLCA.VAGen_SQLCODE == 100)
            PT07W01.CHNG-COUNT[PT07WIXM1] = VFORCD01.ZZ-CHNG-CNT;
            PT07-267(); /* Format VFORCD01 Rec into VFORCD01*/
            VFORCD01.ZZ-SDT = XX0XW01.XX0XWDAT;
            VFORCD01.ZZ-CHNG-DT = 0;
            VFORCD01.ZZ-CHNG-HHMM = 0;
            PT07-265(); /* Insert Rec into VFORCD01*/
            if (SQLCA.VAGen_SQLCODE == 0)
                  /* MOVE 'Y' TO PT07W03.PROCESSED-FLAG(PT07WIXM1);*/
            else
              PT07W03.PROCESSED-FLAG[PT07WIXM1] = "S";
              converseLib.validationFailed(210);
              PT07-266(); /* Get the Next Record*/
            end
          end
        end
      end
      if (PT07W03.OPERATION-FLAG[PT07WIXM1] == "NU")
        if (SQLCA.VAGen_SQLCODE == 100)
          PT07W03.PROCESSED-FLAG[PT07WIXM1] = "S";
          converseLib.validationFailed(210);
          PT07-266(); /* Get the Next Record*/
        else
          if (SQLCA.VAGen_SQLCODE == 0)
            PT07W01.CHNG-COUNT[PT07WIXM1] = VFORCD01.ZZ-CHNG-CNT;
            PT07-267(); /* Format VFORCD01 Rec into VFORCD01*/
            VFORCD01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
            PT07-263(); /* Update Rec into VFORCD01*/
            if (SQLCA.VAGen_SQLCODE == 0)
                  /* MOVE 'Y' TO PT07W03.PROCESSED-FLAG(PT07WIXM1);*/
            else
              PT07W03.PROCESSED-FLAG[PT07WIXM1] = "S";
              converseLib.validationFailed(210);
              PT07-266(); /* Get the Next Record*/
            end
          end
        end
      end
    end
    if (PT07W02A.PT07WFLAG != "I" && PT07W02D.TA5TSQIX > 1)

      PT07W02D.XXXTSPAG = 1; /* Set the current page to 1*/

      while (PT07W02D.XXXTSPAG <= PT07W02D.TA5TSQIX)
        set PT07W02 empty;
        PT07W02D.PT07W-SAVE-XXXTSPAG = PT07W02D.XXXTSPAG;
        PT07-221(); /* Read from TSQ*/

        PT07223(); /* Load back to Map*/
        PT07W02A.PT07COUNT1 = PT07W02D.XXXTSPAG - 1;

        PT07W02D.PT07WIX = 1; /* Initialize line index*/

        while (PT07W02D.PT07WIX <= PT07W02D.PT07WLN) /* Until screen is full*/
          if (PT07M002.PT07MSEL[PT07WIX] == "A" /* and line to be added*/
           || PT07M002.PT07MSEL[PT07WIX] == "C" /* and line to be deleted*/
           || PT07M002.PT07MSEL[PT07WIX] == "D") /* and line to be deleted*/

            PT07266(); /* Insert recs into VFOFCT01*/

            if (PT07M002.PT07MSEL[PT07WIX] == "C") /* line to be changed*/
              if (converseVar.validationMsgNum == 0)
                PT07W02A.PT07COUNT2 = (PT07COUNT1 * 13) + PT07WIX;
                VFOFCT01.XGPCD = "02"; /* footwear gpc*/
                VFOFCT01.SY1STNBR = PT07W02B.SY1STNBR[PT07COUNT2];
                                       /* blk style nbr*/
                VFOFCT01.SY2CLRID = PT07W02B.SY2CLRID[PT07COUNT2];
                           /* blk color cd*/
                VFOFCT01.XDMCD = PT07W02B.XDMCD[PT07COUNT2]; /* dimension*/
                VFOFCT01.FY-FCTY-CD = PT07W02B.FY-FCTY-CD[PT07COUNT2];
                                        /* factory*/
                VFOFCT01.PC-PO-ID-MO-RNG = PT07W02B.PC-PO-ID-MO-RNG[PT07COUNT2]; /* from PO number*/
                VFOFCT01.PC-PO-ID-MO-TO-RNG = PT07W02B.PC-PO-ID-MO-TO-RNG[PT07COUNT2]; /* to PO number*/

                PT07263(); /* delete from vfofct01*/
                if (SQLCA.VAGen_SQLCODE == 0)
                  PT07262(); /* insert into vfofct01*/
                else
                  converseLib.validationFailed(201);
                  set PT07M002.FY-FCTY-CD[PT07WIX] cursor, bold;
                  set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] bold;
                  set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;
                end
              end
            end

            PT07268();

          end
          PT07W02D.PT07WIX = PT07W02D.PT07WIX + 1;
        end

        PT07W02D.XXXTSPAG = PT07W02D.XXXTSPAG + 1; /* Increment the Page*/

     /* PT07W06.PT07COUNT1 = PT07W06.PT07COUNT1 + 1;*/

      end /* End While Pages*/

      if (PT07W02D.XXXTSPAG > PT07W02D.TA5TSQIX)
        PT07W02D.XXXTSPAG = PT07W02D.TA5TSQIX;
      end

    else
    /* ------------------------------------------------------------*/
     /* If products added on screen, insert in vfexdt02*/
    /* ------------------------------------------------------------*/
      if ("A" in PT07M002.PT07MSEL /* Style(s) to be inserted*/
       || "C" in PT07M002.PT07MSEL /* Style(s) to be changed*/
       || "D" in PT07M002.PT07MSEL) /* Style(s) to be deleted*/


        PT07W02D.PT07WIX = 1; /* Initialize line index*/

        while (PT07W02D.PT07WIX <= PT07W02D.PT07WLN) /* Until screen is full*/
          if (PT07M002.PT07MSEL[PT07WIX] == "A" /* and line to be added*/
           || PT07M002.PT07MSEL[PT07WIX] == "C" /* and line to be deleted*/
           || PT07M002.PT07MSEL[PT07WIX] == "D") /* and line to be deleted*/
         /* PERFORM PT07610;         /* format the dropdead date*/

            PT07266(); /* Insert recs into VFOFCT01*/


          /* ------------------------------------------------------*/
           /* If products marked change on screen, update VFOFCT01*/
          /* ------------------------------------------------------*/
            if (PT07M002.PT07MSEL[PT07WIX] == "C") /* line to be changed*/
              if (converseVar.validationMsgNum == 0)
                VFOFCT01.XGPCD = "02"; /* footwear gpc*/
                VFOFCT01.SY1STNBR = PT07W02B.SY1STNBR[PT07WIX];
                                       /* blk style nbr*/
                VFOFCT01.SY2CLRID = PT07W02B.SY2CLRID[PT07WIX];
                           /* blk color cd*/
                VFOFCT01.XDMCD = PT07W02B.XDMCD[PT07WIX]; /* dimension*/
                VFOFCT01.FY-FCTY-CD = PT07W02B.FY-FCTY-CD[PT07WIX];
                                        /* factory*/
                VFOFCT01.PC-PO-ID-MO-RNG = PT07W02B.PC-PO-ID-MO-RNG[PT07WIX]; /* from PO number*/
                VFOFCT01.PC-PO-ID-MO-TO-RNG = PT07W02B.PC-PO-ID-MO-TO-RNG[PT07WIX]; /* to PO number*/

                PT07263(); /* delete from vfofct01*/
                if (SQLCA.VAGen_SQLCODE == 0)
                  PT07262(); /* insert into vfofct01*/
                else
                  converseLib.validationFailed(201);
                  set PT07M002.FY-FCTY-CD[PT07WIX] cursor, bold;
                  set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] bold;
                  set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;
                end
              end
            end

          /* ------------------------------------------------------------*/
           /* If products marked deleted on screen, delete from VFOFCT01*/
          /* ------------------------------------------------------------*/

            PT07268();

          end
          PT07W02D.PT07WIX = PT07W02D.PT07WIX + 1; /* Increment line index*/
        end /* End While*/

      end /* IF 'A'dd Mode & Pages > 1*/
    end /* If PF9*/

    if (converseVar.validationMsgNum == 0 ||  /* no errors*/
    converseVar.validationMsgNum == 202)      /* Re Confirm to delete last rec of prod*/

      /* ;/* ------------------------------------------------------------*/
      /* ;/* Load the map into storage.*/
      /* ;/* ------------------------------------------------------------*/
      PT07W02D.PT07WIX = 1; /* Initialize line index*/

      while (PT07W02D.PT07WIX <= PT07W02D.PT07WLN) /* Until screen is full*/
        PT07264(); /* Load map to W02*/
        PT07W02D.PT07WIX = PT07W02D.PT07WIX + 1; /* Increment line index*/
      end
      if (converseVar.validationMsgNum == 0)
        if (PT07W02A.PT07WFLAG == "A" || 
        PT07W02A.PT07WFLAG == "C" || 
        PT07W02A.PT07WFLAG == "S")
          if (PT07W02A.PT07W-RE-CONFIRM == "Y")
          else
            PT07W03.PROCESSED-FLAG[PT07WIXM1] = "Y";
            PT07W01.PT07WSEL[PT07WIXM1] = " ";
          end
          PT07W02A.PT07WIXM1 = PT07W02A.PT07WIXM1 + 1;
          if (PT07W02A.PT07WIXM1 > 11)
            converseLib.validationFailed(01); /* table updated successfully*/
            PT07W00.PT07WMAP = "1";
            PT07267();
            exit stack;
          end
          while (PT07W03.TRANS-P-REC[PT07WIXM1] != "P")
            PT07W02A.PT07WIXM1 = PT07W02A.PT07WIXM1 + 1;
            if (PT07W02A.PT07WIXM1 > 11)
              converseLib.validationFailed(01); /* table updated successfully*/
              PT07W00.PT07WMAP = "1";
              PT07267();
              exit stack;
            end
          end
          if (PT07W02A.PT07WIXM1 <= 11)
            PT07W02D.PT07WBSW = "Y";
            PT07W02D.PT07WSWF = "Y";
            PT07W02D.PT07WIX = 1;
            PT07W02A.PT07WDAT = "N";
            set PT07W02 empty;
            PT07S03(); /* Purge temp storage*/
          end
        end
        PT07W02D.PT07WSWR = "Y"; /* Request for data switch*/
        PT07W02D.PT07WSWF = "Y"; /* Format map switch*/
        converseLib.validationFailed(01); /* table updated successfully*/
      end
    end
  end

end // end PT07260

// Initialize VFEXDT01 copybook
Function PT07261()
   /* ------------------------------------------------------------*/
   /* PT07261 PROCESS*/
   /* Format VFOFCT01 Layout*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Clear the copybook*/
   /* ------------------------------------------------------------*/
  set VFOFCT01 empty; /* initialize the database record*/

   /* ------------------------------------------------------------*/
   /* Format the key fields*/
   /* ------------------------------------------------------------*/
  VFOFCT01.XGPCD = "02"; /* footwear gpc*/
  VFOFCT01.SY1STNBR = PT07M002.SY1STNBR[PT07WIX]; /* blk style nbr*/
  VFOFCT01.SY2CLRID = PT07M002.SY2CLRID[PT07WIX]; /* blk color cd*/
  VFOFCT01.XDMCD = "00"; /* dimension*/
  VFOFCT01.FY-FCTY-CD = PT07M002.FY-FCTY-CD[PT07WIX]; /* factory*/
  VFOFCT01.PC-PO-ID-MO-RNG = PT07M002.PC-PO-ID-MO-RNG[PT07WIX]; /* from PO number*/
  VFOFCT01.PC-PO-ID-MO-TO-RNG = PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX]; /* to PO number*/

  if (PT07W02A.PT07WFLAG != "I" && PT07M002.PT07MSEL[PT07WIX] == "D")
    VFOFCT01.SY1STNBR = PT07M002.SY1STNBR[1]; /* blk style nbr*/
    VFOFCT01.SY2CLRID = PT07M002.SY2CLRID[1]; /* blk color cd*/
  end

end // end PT07261

// Insert VFEXDT01
Function PT07262()
   /* ------------------------------------------------------------*/
   /* PT07262 PROCESS*/
   /* Add VFOFCT01 Record*/
   /* ------------------------------------------------------------*/
  if ((PT07M002.PC-PO-ID-MO-RNG[PT07WIX] < 00000001 || 
  PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] < 00000001 || 
  PT07M002.FY-FCTY-CD[PT07WIX] == "    "))
    set PT07M002.FY-FCTY-CD[PT07WIX] cursor, bold;
    set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] bold;
    set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;
    converseLib.validationFailed(166); /* Indicate error*/
    return;
  end
   /* ------------------------------------------------------------*/
   /* Verify valid po month range from*/
   /* ------------------------------------------------------------*/
  if (PT07M002.PC-PO-ID-MO-RNG[PT07WIX] < 00000001)
    if (PT07M002.FY-FCTY-CD[PT07WIX] != "    ")
      set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] cursor, bold;
                                   /* Highlight error*/
      converseLib.validationFailed(116); /* Indicate missing*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify valid po month range to*/
   /* ------------------------------------------------------------*/
  if (PT07M002.PC-PO-ID-MO-RNG[PT07WIX] == 00000000) /* no from range*/
    if (PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] > 00000000) /* is to range*/
      set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] cursor, bold;
      converseLib.validationFailed(161); /* Indicate must have from range*/
      return;
    end
  end
  if (PT07M002.PC-PO-ID-MO-RNG[PT07WIX] > 00000000) /* have from range*/
    if (PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] == 00000000) /* no to range*/
      set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] cursor, bold;
      converseLib.validationFailed(163); /* Indicate must have to range*/
      return;
    end
  end
  if (PT07M002.PC-PO-ID-MO-RNG[PT07WIX] > 00000000) /* have from range*/
    if (PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] > 00000000) /* and to range*/
      if (PT07M002.PC-PO-ID-MO-RNG[PT07WIX] > 
      PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX]) /* from is greater than to*/
        set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] cursor, bold;
        converseLib.validationFailed(162); /* Indicate to must be greater than from*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify valid factory*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  if (PT07M002.PC-PO-ID-MO-RNG[PT07WIX] > 00000000)
    if (PT07M002.FY-FCTY-CD[PT07WIX] == "    ")
      converseLib.validationFailed(68); /* Invalid factory*/
      set PT07M002.FY-FCTY-CD[PT07WIX] cursor, bold; /* Highlight error*/
      return;
    end
  end
  if (PT07M002.PC-PO-ID-MO-RNG[PT07WIX] > 00000000)
    if (PT07M002.FY-FCTY-CD[PT07WIX] != "    ")
      FY1REC.XGPCD = "02";
      FY1REC.FY1FCTYC = PT07M002.FY-FCTY-CD[PT07WIX];

      call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the row*/

      if (SQLCA.VAGen_SQLCODE != 000) /* bad return*/
        if (SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/
          converseLib.validationFailed(68); /* Invalid factory*/
          set PT07M002.FY-FCTY-CD[PT07WIX] cursor, bold;
                                   /* Highlight error*/
          return;
        else
          if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
            converseLib.validationFailed(11); /* Indicate not available*/
            TA1REC.TA1FUNC = "POST"; /* Termination function*/
          else
            converseLib.validationFailed(10); /* Indicate system error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            converseLib.clearScreen();
             /* Clear screen before redisplay*/
          end
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PT07262"; /* Process name*/
          TA1REC.TA1LOC = "SELECT UNIQUE FACTORY TABLE ROW";
          TA1REC.TA1MAP = "PT07M002"; /* Map name*/
          TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
          TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

        end
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* Format rest of record:*/
   /* ------------------------------------------------------------*/
  VFOFCT01.XGPCD = "02";
  VFOFCT01.FY-FCTY-CD = PT07M002.FY-FCTY-CD[PT07WIX];
  VFOFCT01.PC-PO-ID-MO-RNG = PT07M002.PC-PO-ID-MO-RNG[PT07WIX];
  VFOFCT01.PC-PO-ID-MO-TO-RNG = PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX];
  VFOFCT01.XXXUSRID = COMMAREA.CAUSERID; /* userid*/
  if (PT07M002.PT07MSEL[PT07WIX] == "A")
    VFOFCT01.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
    VFOFCT01.ZZZCHGDT = 0; /* Change date*/
    VFOFCT01.ZZZCHGTM = 0; /* Change time*/
  else
    VFOFCT01.ZZZSDT = PT07W02.ZZZSDT[PT07WIX]; /* Setup date*/
    VFOFCT01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
    VFOFCT01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  end
  VFOFCT01.PGM-ID = "PT07"; /* Change date*/
   /* MOVE 0 TO VFOFCT01.ZZZCHGTM;     /* change time*/
  VFOFCT01.ZZZCHGCT = 0; /* change count*/

   /* ------------------------------------------------------------*/
   /* Insert DMODEL.VFOFCT01.*/
   /* ------------------------------------------------------------*/
  set PT07W012 empty;
  PT07W012.TASK-CODE = "A ";

  try
    call "VFOFCT01" (PT07W012, SQLCA, VFOFCT01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "262"; /* Module identification*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/
      converseLib.validationFailed(011); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    end
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    converseLib.validationFailed(010); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  if (SQLCA.VAGen_SQLCODE == -803) /* duplicate record*/
    converseLib.validationFailed(147); /* Indicate duplicate*/
    return;
  end
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFOFCT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFOFCT01.PT07W-FOFCT-GRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07262

// Delete VFOFCT01
Function PT07263()
   /* ------------------------------------------------------------*/
   /* PT07263 PROCESS*/
   /* Delete from DMODEL.VFOFCT01*/
   /* ------------------------------------------------------------*/
  set PT07W012 empty;
  PT07W012.TASK-CODE = "D ";

  try
    call "VFOFCT01" (PT07W012, SQLCA, VFOFCT01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* already deleted - ok*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "263"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(011); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    converseLib.validationFailed(010); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFOFCT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFOFCT01.PT07W-FOFCT-GRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT07263

// Save map in working storage
Function PT07264()
   /* ------------------------------------------------------------*/
   /* Load the styles from screen to storage (W02).*/
   /* ------------------------------------------------------------*/

  PT07W02.PT07WSEL[PT07WIX] = PT07M002.PT07MSEL[PT07WIX];
  PT07W02.SY1STNBR[PT07WIX] = PT07M002.SY1STNBR[PT07WIX];
  PT07W02.SY2CLRID[PT07WIX] = PT07M002.SY2CLRID[PT07WIX];
  PT07W02.XDMCD[PT07WIX] = "00";

  PT07W02.SY1SSTNM[PT07WIX] = PT07M002.SY1SSTNM[PT07WIX];
  PT07W02.SY2CLRAB[PT07WIX] = PT07M002.SY2CLRAB[PT07WIX];


  PT07W02.PC-PO-ID-MO-RNG[PT07WIX] = PT07M002.PC-PO-ID-MO-RNG[PT07WIX];
  PT07W02.PC-PO-ID-MO-TO-RNG[PT07WIX] = PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX];
  PT07W02.FY-FCTY-CD[PT07WIX] = PT07M002.FY-FCTY-CD[PT07WIX];

  /* MOVE PT07M001.ZZZCHGCT(PT07WIX) TO PT07W01.ZZZCHGCT(PT07WIX);*/

end // end PT07264

// Save map in working storage
Function PT07265()
   /* ------------------------------------------------------------*/
   /* Delete from VFORCD01/ Update into VFORCD01*/
   /* ------------------------------------------------------------*/
  PT07W02A.PT07WIXM1 = 1;
  while (PT07W02A.PT07WIXM1 <= PT07W02A.PT07WLIN1)
    if (VFOFCT01.SY1STNBR == PT07W01.SY1STNBR[PT07WIXM1]
     && VFOFCT01.SY2CLRID == PT07W01.SY2CLRID[PT07WIXM1])
      set VFORCD01 empty;
      VFORCD01.SY1STNBR = VFOFCT01.SY1STNBR;
      VFORCD01.SY2CLRID = VFOFCT01.SY2CLRID;
      VFORCD01.XDMCD = "00";
      VFORCD01.XGPCD = "02";
      PT07-264();
      if (SQLCA.VAGen_SQLCODE == 0)
        PT07W01.CHNG-COUNT[PT07WIXM1] = VFORCD01.ZZ-CHNG-CNT;

        if (PT07W01.RTA-SPEC-OFR-CD[PT07WIXM1] == " " && 
        PT07W01.RTA-KEY-CD[PT07WIXM1] == " " && 
        PT07W01.RTA-BRAND-CD[PT07WIXM1] == " ")
          PT07-262();
          if (SQLCA.VAGen_SQLCODE == 0)
            PT07W01.PT07WSEL[PT07WIXM1] = " ";
            PT07W01.RTA-PRI-CD[PT07WIXM1] = " ";
            PT07W03.PROCESSED-FLAG[PT07WIXM1] = "S";
          else
            PT07W03.PROCESSED-FLAG[PT07WIXM1] = "N";
          end
        else
          PT07-267(); /* Format VFORCD Rec into VFORCD01*/
          VFORCD01.PT-RTA-PRI-CD = " ";
       /* IF PT07W02A.PT07WFLAG = 'C';*/
          /* VFORCD01.ZZ-CHNG-CNT = VFORCD01.ZZ-CHNG-CNT + 1;*/
       /* END;*/
          VFORCD01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
          PT07-263();
          if (SQLCA.VAGen_SQLCODE == 0)
            PT07W01.PT07WSEL[PT07WIXM1] = " ";
            PT07W01.RTA-PRI-CD[PT07WIXM1] = " ";
            PT07W03.PROCESSED-FLAG[PT07WIXM1] = "Y";
          else
            PT07W03.PROCESSED-FLAG[PT07WIXM1] = "N";
          end
        end
      end
      return;
    end
    PT07W02A.PT07WIXM1 = PT07W02A.PT07WIXM1 + 1;
  end

end // end PT07265

// Process valid input request
Function PT07266()
   /* ----------------------------------------------------------------------*/
   /* PT07266 PROCESS*/
   /* IF SELECTION IS 'A'/'C', CHECK IF THE PRODUCT ALREADY EXISTS*/
   /* IF SELECTION IS 'A', CHECK FOR OVERLAP PO*/
   /* ----------------------------------------------------------------------*/

  PT07261(); /* format vfofct01 with key fields*/
  if (PT07W02A.PT07WFLAG != "I" && PT07M002.PT07MSEL[PT07WIX] == "D")
    VFOFCT01.SY1STNBR = PT07M002.SY1STNBR[1];
    VFOFCT01.SY2CLRID = PT07M002.SY2CLRID[1];
    VFOFCT01.XDMCD = "00";
  end

  if (PT07M002.PT07MSEL[PT07WIX] == "A" /* line to be added*/
   || PT07M002.PT07MSEL[PT07WIX] == "C") /* line to be changed*/
   /* VANNAM CHANGES BEGIN HERE*/
   /* MOVE PT07M002.SY1STNBR(1) TO PT07W02.SY1STNBR(PT07WIX);*/
   /* MOVE PT07M002.SY2CLRID(1) TO PT07W02.SY2CLRID(PT07WIX);*/
   /* VANNAM CHANGES END HERE*/
    PT07W02.XDMCD[PT07WIX] = "00";
    PT07-252(); /* check to see if already added*/
    if (SQLCA.VAGen_SQLCODE == 100) /* product not found - ok to add*/
      if (PT07M002.PT07MSEL[PT07WIX] == "A")
        PT07-253(); /* OVERLAP PO CHECK with DB Records*/
        if (converseVar.validationMsgNum == 0)
          PT07262(); /* Insert into vfofct01*/
        end
        if (converseVar.validationMsgNum == 147) /* duplicate*/
          PT07W02D.PT07WSWR = "N"; /* don't request data*/
          PT07W02D.PT07WSWF = "N"; /* don't format the map*/
          set PT07M002.PT07MSEL[PT07WIX] cursor, bold; /**/
          exit stack; /* get out*/
        end
      end
    else
      converseLib.validationFailed(206); /* key row*/
                                   /* already exists, change date?*/
      PT07W02D.PT07WSWR = "N"; /* don't request data*/
      PT07W02D.PT07WSWF = "N"; /* don't format the map*/
      set PT07M002.PT07MSEL[PT07WIX] cursor, bold; /* highlight*/
      set PT07M002.FY-FCTY-CD[PT07WIX] bold;
      set PT07M002.PC-PO-ID-MO-RNG[PT07WIX] bold;
      set PT07M002.PC-PO-ID-MO-TO-RNG[PT07WIX] bold;
      exit stack;
    end /* If Product not found*/
  end /* If 'A','C'*/

end // end PT07266

// Process valid input request
Function PT07267()
   /* ----------------------------------------------------------------------*/
   /* PT07267 PROCESS*/
   /* PASS THE CONTROL BACK TO MAP1 PROCESS*/
   /* IF ATLEAST ONE PROCESSED FLAG = 'N', PERFORM VALIDATION BLOCK*/
   /* ELSE PERFORM INQUIRY BLOCK*/
   /* ----------------------------------------------------------------------*/
  PT07W02A.PT07COUNT = 0;
  PT07W02A.PT07WIXM2 = 1;

     /* IF EZEMNO EQ 01;*/
        /* MOVE 0 TO EZEMNO;*/
     /* END;*/

  PT07W00.PT07W-WAIT-PF17 = "N";

  while (PT07W02A.PT07WIXM2 <= 11)
    if (PT07W03.PROCESSED-FLAG[PT07WIXM2] == "N")
      PT07W02A.PT07COUNT = PT07W02A.PT07COUNT + 1;
    end
    PT07W02A.PT07WIXM2 = PT07W02A.PT07WIXM2 + 1;
  end
  if (PT07W02A.PT07COUNT > 0)
    PT07195(); /* Perform Validate Block*/
  else
    PT07163(); /* Perform Inquiry Block*/
  end
end // end PT07267

// Process valid input request
Function PT07268()
   /* ----------------------------------------------------------------------*/
   /* PT07268 PROCESS*/
   /* DELETE VFOFCT01 PROCESS*/
   /* ----------------------------------------------------------------------*/

  if (PT07M002.PT07MSEL[PT07WIX] == "D") /* line to be deleted*/
         /* OR PT07M002.PT07MSEL(PT07WIX) EQ 'C';/* line to be deleted*/
    PT07-261(); /* Check if Delete leads to lose of prod*/
                                   /* or Priority*/
    if (PT07W02A.PT07W-PF9-CONFIRM == "Y")
      if (PT07W02A.PT07W-RE-CONFIRM == "Y")
        PT07265(); /* Delete from vforcd01*/
      end
      if (converseVar.validationMsgNum == 0)
        PT07261(); /* format vfofct01 with key fields*/
        PT07263(); /* Delete from vfofct01*/
        PT07W02.PT07WCHG[PT07WIX] = "D";
      end
    end
  end
  if (converseVar.validationMsgNum == 0) /* no errors*/
    PT07M002.PT07MSEL[PT07WIX] = " "; /* clear select*/
  end

end // end PT07268

// Job submission
Function PT07670()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/
  PT07W00.PT07WIXT = 1;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes}; /* get the env running in*/

  if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* if on production system*/
    PT07671(); /* format production jcl*/
  else
    PT07672(); /* format test jcl*/
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "670"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(164); /* job submitted message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end PT07670

// production jcl
Function PT07671()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    /* ------------------------------------------------------------*/
                      /* Format the Job Control Language*/
                      /* statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = PT07T01.TARJCL[PT07WIXT];
                                   /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT07T01.TARTYPE[PT07WIXT];
                                   /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT07T01.TARJCL[PT07WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT07W00.PT07WIXT = PT07W00.PT07WIXT + 1; /* Input table index*/

    end

  end
end // end PT07671

// test jcl
Function PT07672()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    /* ------------------------------------------------------------*/
                      /* Format the Job Control Language*/
                      /* statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = PT07T51.TARJCL[PT07WIXT];
                                   /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PT07T51.TARTYPE[PT07WIXT];
                                   /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT07T51.TARJCL[PT07WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT07W00.PT07WIXT = PT07W00.PT07WIXT + 1; /* Input table index*/

    end

  end
end // end PT07672

// Purge temporary storage
Function PT07S01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  set PT07W01 empty; /* M001 display storage*/
  TA5REC.TA5TSQIX = 0; /* Current page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PT07W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PTWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(010); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to display map*/

end // end PT07S01

// calculate min/max rta override
Function PT07S02()
   /* ---------------------------------------------------------------------*/
   /* Check century on xxx0xw01.xx0xw19.  Change to 20 when appropriate.*/
   /* ---------------------------------------------------------------------*/

  if (XX0XW01.XX0XWYY < 95) /* pgm created 1995*/
    XX0XW01.XX0XW19 = 20;
  else
    XX0XW01.XX0XW19 = 19;
  end

   /* ---------------------------------------------------------------------*/
   /* calculate the minimum date - today's date minus 14 days.*/
   /* ---------------------------------------------------------------------*/

  PT07W00.PT07W-SAVE-MIN-DATE = 0;
  set TA2REC empty;
  TA2REC.TA2GRGGN = XX0XW01.XX0XWDAT;
  TA2REC.TA2DTOPT = "GREGJUL";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2DYAOD = -14;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /**/
                                  /* common date checking/coverting pgm*/
  if (TA2REC.TA2RTNCD != 0) /* bad date returned*/
    converseLib.validationFailed(081); /* indicate invalid date*/
    return; /* display error*/
  end

  PT07W00.PT07W-SAVE-MIN-CCYYMMDD = TA2REC.TA2GRGGN;

   /* ---------------------------------------------------------------------*/
   /* calculate the maximum date - today's date plus 1 year.*/
   /* ---------------------------------------------------------------------*/

  PT07W00.PT07W-SAVE-MAX-DATE = 0;
  PT07W00.PT07W-SAVE-MAX-CCYYMMDD = XX0XW01.XX0XWDAT;
  if (PT07W00.PT07W-SAVE-MAX-YY == 99) /* last year of the century*/
    PT07W00.PT07W-SAVE-MAX-YY = 0;
    PT07W00.PT07W-SAVE-MAX-CC = 20;
  else /* increment year by 1*/
    PT07W00.PT07W-SAVE-MAX-YY = PT07W00.PT07W-SAVE-MAX-YY + 1;
  end

   /* if current year is leap year and calc date is feb 29;*/
   /* subtract 1 from the max day;*/

  if (XX0XW01.XX0XWDD == 29
   && XX0XW01.XX0XWMM == 02) /* it's currently leap year*/
    PT07W00.PT07W-SAVE-MAX-DD = 28;
  end

end // end PT07S02

// Purge temporary storage
Function PT07S03()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  set PT07W02 empty; /* M001 display storage*/
  TA5REC.TA5TSQIX = 0; /* Current page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
                                  /* MOVE COMMAREA.CACURRAP TO*/
                                   /* TA5REC.TA5APPID;/* Application*/
                                   /* identification*/
  TA5REC.TA5APPID = "PT72"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PT07W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PTWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(010); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to display map*/

end // end PT07S03

//*** RECORD=PT07W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PT07W00 type basicRecord
  10 PT07WIXM PT07WIXM ; 
  10 PT07WIX1 PT07WIX1 ; 
  10 PT07WIX2 PT07WIX2 ; 
  10 PT07WIXT PT07WIXT ; 
  10 PT07WSWC PT07WSWC ; 
  10 PT07WSWF PT07WSWF ; 
  10 PT07WMAP PT07WMAP ; 
  10 PT07WSWR PT07WSWR ; 
  10 PT07WSSW PT07WSSW ; 
  10 PT07WSSW-P PT07WSSW-P ; 
  10 PT07WSSW-NON-P PT07WSSW-NON-P ; 
  10 PT07WSSW-INQ-P PT07WSSW-INQ-P ; 
  10 PT07WBSW PT07WBSW ; 
  10 PT07WDSW PT07WDSW ; 
  10 PT07W-CODE-FOUND-SW PT07W-CODE-FOUND-SW ; 
  10 PT07W-SELECTION-MADE-SW PT07W-SELECTION-MADE-SW ; 
  10 PT07W-PF5-PRESSED PT07W-PF5-PRESSED ; 
  10 PT07W-WAIT-CONFIRM PT07W-WAIT-CONFIRM ; 
  10 PT07W-WAIT-PF17 PT07W-WAIT-PF17 ; 
  10 PT07W-DATA-UPDATED PT07W-DATA-UPDATED ; 
  10 PT07W-FIRST-TIME PT07W-FIRST-TIME ; 
  10 PT07W-DATA-CHG PT07W-DATA-CHG ; 
  10 PT07W-P-ENTERED PT07W-P-ENTERED ; 
  10 PT07W-P-RETRIEVED PT07W-P-RETRIEVED ; 
  10 XGPCD XGPCD ; 
  10 PT07W-SAVE-PROD-REL-DT PT07W-SAVE-PROD-REL-DT ; 
  10 PT07W-SAVE-DROPDEAD-RTA-DT PT07W-SAVE-DROPDEAD-RTA-DT ; 
  10 PT07W-SAVE-MIN-DATE PT07W-SAVE-MIN-DATE ; 
    15 PT07W-SAVE-MIN-FILL num(1) ; // filler for min date
    15 PT07W-SAVE-MIN-CCYYMMDD PT07W-SAVE-MIN-CCYYMMDD ; 
      20 PT07W-SAVE-MIN-CC PT07W-SAVE-MIN-CC ; 
      20 PT07W-SAVE-MIN-YY PT07W-SAVE-MIN-YY ; 
      20 PT07W-SAVE-MIN-MM PT07W-SAVE-MIN-MM ; 
      20 PT07W-SAVE-MIN-DD PT07W-SAVE-MIN-DD ; 
  10 PT07W-SAVE-MAX-DATE PT07W-SAVE-MAX-DATE ; 
    15 PT07W-SAVE-MAX-FILL num(1) ; // filler for max date
    15 PT07W-SAVE-MAX-CCYYMMDD PT07W-SAVE-MAX-CCYYMMDD ; 
      20 PT07W-SAVE-MAX-CC PT07W-SAVE-MAX-CC ; 
      20 PT07W-SAVE-MAX-YY PT07W-SAVE-MAX-YY ; 
      20 PT07W-SAVE-MAX-MM PT07W-SAVE-MAX-MM ; 
      20 PT07W-SAVE-MAX-DD PT07W-SAVE-MAX-DD ; 
  10 PT07W-FORMAT-DATE PT07W-FORMAT-DATE ; 
    15 PT07W-FORMAT-FILL num(1) ; // filler for format date
    15 PT07W-FORMAT-CCYYMMDD PT07W-FORMAT-CCYYMMDD ; 
      20 PT07W-FORMAT-CC PT07W-FORMAT-CC ; 
      20 PT07W-FORMAT-YY PT07W-FORMAT-YY ; 
      20 PT07W-FORMAT-MM PT07W-FORMAT-MM ; 
      20 PT07W-FORMAT-DD PT07W-FORMAT-DD ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 PT07W-SAVE-XXXTSPAG PT07W-SAVE-XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 PT07W-SAVE-PAGE PT07W-SAVE-PAGE ; 
  10 PT07WLIN PT07WLIN ; 
  10 PT07W-SY1STNBR PT07W-SY1STNBR ; 
  10 PT07W-SY2CLRID PT07W-SY2CLRID ; 
  10 PT07W-SPEC-OFFR-CD PT07W-SPEC-OFFR-CD ; 
  10 PT07W-KEY-TYP-CD PT07W-KEY-TYP-CD ; 
  10 PT07W-BRAND-CD PT07W-BRAND-CD ; 
  10 PT07W-PRI-CD PT07W-PRI-CD ; 
  10 PT07W-WS-CCYYMMDD-FORMAT PT07W-WS-CCYYMMDD-FORMAT ; 
    15 PT07W-WS-CC-1-NUM PT07W-WS-CC-1-NUM ; 
    15 PT07W-WS-CC-NUM PT07W-WS-CC-NUM ; 
    15 PT07W-WS-YY-NUM PT07W-WS-YY-NUM ; 
    15 PT07W-WS-MM-NUM PT07W-WS-MM-NUM ; 
    15 PT07W-WS-DD-NUM PT07W-WS-DD-NUM ; 
  10 PT07W-WS-YYMMDD-FORMAT PT07W-WS-YYMMDD-FORMAT ; 
    15 PT07W-WS-YY PT07W-WS-YY ; 
    15 PT07W-WS-MM PT07W-WS-MM ; 
    15 PT07W-WS-DD PT07W-WS-DD ; 
end // end PT07W00

//*** RECORD=PT07W01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record PT07W01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(759) ; 
    10 PT07WSEL PT07WSEL [11] ; 
    10 SY1STNBR SY1STNBR [11] ; 
    10 SY2CLRID SY2CLRID [11] ; 
    10 SY1SSTNM SY1SSTNM [11] ; 
    10 SY2CLRAB SY2CLRAB [11] ; 
    10 RTA-SPEC-OFR-CD RTA-SPEC-OFR-CD [11] ; 
    10 RTA-KEY-CD RTA-KEY-CD [11] ; 
    10 RTA-BRAND-CD RTA-BRAND-CD [11] ; 
    10 RTA-PRI-CD RTA-PRI-CD [11] ; 
    10 FIRST-OFFER-DT FIRST-OFFER-DT [11] ; 
    10 PROD-REL-DT PROD-REL-DT [11] ; 
    10 DROPDEAD-RTA-DT DROPDEAD-RTA-DT [11] ; 
    10 CHNG-COUNT CHNG-COUNT [11] ; 
    10 SETUP-DATE SETUP-DATE [11] ; 
    10 DIM-CD DIM-CD [11] ; 
end // end PT07W01

//*** RECORD=PT07W011 ****
// ;/*This record contains the entire DMODEL.VFORCD01 dclgen,
// ;/*plus the short style name, color abreviation and future
// ;/*offer begin date from DPRODG.VSYCLR01
// ;/*
// ;/*IO MOD which uses this record is PT6300
// ;/*
// ;/*  created 10/01/99
// ************************
Record PT07W011 type basicRecord
  5 PT07W3-IO-GRP PT07W3-IO-GRP ; 
    10 PT07W3-FORCD-GRP PT07W3-FORCD-GRP ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 PT-RTA-SPEC-OFR-CD PT-RTA-SPEC-OFR-CD ; 
      15 PT-RTA-KEY-CD PT-RTA-KEY-CD ; 
      15 PT-RTA-BRAND-CD PT-RTA-BRAND-CD ; 
      15 PT-RTA-PRI-CD PT-RTA-PRI-CD ; 
      15 PT-PROD-REL-DT PT-PROD-REL-DT ; 
      15 PC-DROPDEAD-RTA-DT PC-DROPDEAD-RTA-DT ; 
      15 XXX-USER-ID XXX-USER-ID ; 
      15 ZZ-CHNG-PGM-ID ZZ-CHNG-PGM-ID ; 
      15 ZZ-SDT ZZ-SDT ; 
      15 ZZ-CHNG-DT ZZ-CHNG-DT ; 
      15 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
      15 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
    10 PT07W-SYCLR-GRP PT07W-SYCLR-GRP ; 
      15 SY1SSTNM SY1SSTNM ; 
      15 SY2CLRAB SY2CLRAB ; 
      15 SY-FUTR-OFFER-BDT SY-FUTR-OFFER-BDT ; 
end // end PT07W011

//*** RECORD=PT07W012 ****
// ;/*This record contains the Action code for the IOMOD PT6300
// ;/*and the count value.
// ;/*
// ;/*  created 10/01/99
// ************************
Record PT07W012 type basicRecord
  5 PT07W11-IO-GRP PT07W11-IO-GRP ; 
    10 TASK-CODE TASK-CODE ; 
    10 VFORCD01-COUNT VFORCD01-COUNT ; 
end // end PT07W012

//*** RECORD=PT07W02 ****
// ;/*This record contains the entire DPRODC.VFEXDT01 dclgen,
// ;/*plus the short style name and color abreviation from
// ;/*DPRODG.VSYCLR01, for use with IO MOD VFEXDT01.
// ;/*
// ;/*  created 02/22/96
// ***********************
Record PT07W02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1040) ; 
    10 PT07W-FOFCT-GRP PT07W-FOFCT-GRP [13] ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
    10 FY-FCTY-CD FY-FCTY-CD [13] ; 
    10 PC-PO-ID-MO-RNG PC-PO-ID-MO-RNG [13] ; 
    10 PC-PO-ID-MO-TO-RNG PC-PO-ID-MO-TO-RNG [13] ; 
    10 XXXUSRID XXXUSRID [13] ; 
    10 PGM-ID PGM-ID [13] ; 
    10 ZZZSDT ZZZSDT [13] ; 
    10 ZZZCHGDT ZZZCHGDT [13] ; 
    10 ZZZCHGTM ZZZCHGTM [13] ; 
    10 ZZZCHGCT ZZZCHGCT [13] ; 
    10 SY1SSTNM SY1SSTNM [13] ; 
    10 SY2CLRAB SY2CLRAB [13] ; 
    10 PT07WSEL PT07WSEL [13] ; 
    10 PT07WCHG PT07WCHG [13] ; 
end // end PT07W02

//*** RECORD=PT07W02A ****
// -------------------------------------------------------
// Storage to pass data from Map1 Process to Map2 Process.
// -------------------------------------------------------
// ************************
Record PT07W02A type basicRecord
  5 * char(72) ; 
    10 PT07WIXM1 PT07WIXM1 ; 
    10 PT07WIXM2 PT07WIXM2 ; 
    10 PT07WLIN1 PT07WLIN1 ; 
    10 PT07WFLAG PT07WFLAG ; 
    10 PT07W-RE-CONFIRM PT07W-RE-CONFIRM ; 
    10 PT07W-PF9-CONFIRM PT07W-PF9-CONFIRM ; 
    10 PT07COUNT PT07COUNT ; 
    10 PT07COUNT1 PT07COUNT1 ; 
    10 PT07COUNT2 PT07COUNT2 ; 
    10 PT07COUNT3 PT07COUNT3 ; 
    10 PT07WDAT PT07WDAT ; 
    10 PT07WSW1 PT07WSW1 ; 
    10 PT07WSW2 PT07WSW2 ; 
    10 PT07WSW3 PT07WSW3 ; 
    10 PT07WSW4 PT07WSW4 ; 
    10 PT07WSW5 PT07WSW5 ; 
    10 PT07MO1 PT07MO1 ; 
      15 PT07MO1Y1 PT07MO1Y1 ; 
      15 PT07MO1M1 PT07MO1M1 ; 
      15 PT07MO1M2 PT07MO1M2 ; 
    10 PT07MO2 PT07MO2 ; 
      15 PT07MO2Y1 PT07MO2Y1 ; 
      15 PT07MO2M1 PT07MO2M1 ; 
      15 PT07MO2M2 PT07MO2M2 ; 
    10 PT07MO3 PT07MO3 ; 
      15 PT07MO3Y1 PT07MO3Y1 ; 
      15 PT07MO3M1 PT07MO3M1 ; 
      15 PT07MO3M2 PT07MO3M2 ; 
    10 PT07MO4 PT07MO4 ; 
      15 PT07MO4Y1 PT07MO4Y1 ; 
      15 PT07MO4M1 PT07MO4M1 ; 
      15 PT07MO4M2 PT07MO4M2 ; 
    10 STYLE1 STYLE1 ; 
    10 COLOR1 COLOR1 ; 
end // end PT07W02A

//*** RECORD=PT07W02B ****
// ;/*This record contains the entire DPRODC.VFEXDT01 dclgen,
// ;/*plus the short style name and color abreviation from
// ;/*DPRODG.VSYCLR01, for use with IO MOD VFEXDT01.
// ;/*
// ;/*  created 02/22/96
// ************************
Record PT07W02B type basicRecord
  5 * char(2067) ; 
    10 PT07W-FOFCT-GRP PT07W-FOFCT-GRP [39] ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
    10 FY-FCTY-CD FY-FCTY-CD [39] ; 
    10 PC-PO-ID-MO-RNG PC-PO-ID-MO-RNG [39] ; 
    10 PC-PO-ID-MO-TO-RNG PC-PO-ID-MO-TO-RNG [39] ; 
    10 XXXUSRID XXXUSRID [39] ; 
    10 PGM-ID PGM-ID [39] ; 
    10 ZZZSDT ZZZSDT [39] ; 
    10 ZZZCHGDT ZZZCHGDT [39] ; 
    10 ZZZCHGTM ZZZCHGTM [39] ; 
    10 ZZZCHGCT ZZZCHGCT [39] ; 
end // end PT07W02B

//*** RECORD=PT07W02C ****
// ;/*This record contains the entire DPRODC.VFEXDT01 dclgen,
// ;/*plus the short style name and color abreviation from
// ;/*DPRODG.VSYCLR01, for use with IO MOD VFEXDT01.
// ;/*
// ;/*  created 02/22/96
// ************************
Record PT07W02C type basicRecord
  5 * char(3120) ; 
    10 PT07W-FOFCT-GRP PT07W-FOFCT-GRP [39] ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
    10 FY-FCTY-CD FY-FCTY-CD [39] ; 
    10 PC-PO-ID-MO-RNG PC-PO-ID-MO-RNG [39] ; 
    10 PC-PO-ID-MO-TO-RNG PC-PO-ID-MO-TO-RNG [39] ; 
    10 XXXUSRID XXXUSRID [39] ; 
    10 PGM-ID PGM-ID [39] ; 
    10 ZZZSDT ZZZSDT [39] ; 
    10 ZZZCHGDT ZZZCHGDT [39] ; 
    10 ZZZCHGTM ZZZCHGTM [39] ; 
    10 ZZZCHGCT ZZZCHGCT [39] ; 
    10 SY1SSTNM SY1SSTNM [39] ; 
    10 SY2CLRAB SY2CLRAB [39] ; 
    10 PT07WSEL PT07WSEL [39] ; 
    10 PT07WCHG PT07WCHG [39] ; 
end // end PT07W02C

//*** RECORD=PT07W02D ****
// ----------------------------
// Application working storage.
// ----------------------------
// ************************
Record PT07W02D type basicRecord
  10 PT07WIX PT07WIX ; 
  10 PT07WX1 PT07WX1 ; 
  10 PT07WSWC PT07WSWC ; 
  10 PT07WSWF PT07WSWF ; 
  10 PT07WSWR PT07WSWR ; 
  10 PT07WBSW PT07WBSW ; 
  10 PT07WDSW PT07WDSW ; 
  10 PT07W-FIRST-TIME PT07W-FIRST-TIME ; 
  10 PT07W-DATA-CHG PT07W-DATA-CHG ; 
  10 PT07W-WAIT-CONFIRM PT07W-WAIT-CONFIRM ; 
  10 PT07W-FORMAT-DATE PT07W-FORMAT-DATE ; 
    15 PT07W-FORMAT-FILL num(1) ; // filler for format date
    15 PT07W-FORMAT-CCYYMMDD PT07W-FORMAT-CCYYMMDD ; 
      20 PT07W-FORMAT-CC PT07W-FORMAT-CC ; 
      20 PT07W-FORMAT-YY PT07W-FORMAT-YY ; 
      20 PT07W-FORMAT-MM PT07W-FORMAT-MM ; 
      20 PT07W-FORMAT-DD PT07W-FORMAT-DD ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 PT07W-SAVE-XXXTSPAG PT07W-SAVE-XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 PT07W-SAVE-PAGE PT07W-SAVE-PAGE ; 
  10 PT07WLN PT07WLN ; 
end // end PT07W02D

//*** RECORD=PT07W03 ****
// ------------------------
// Driver of Screen 2
// ------------------------
// ***********************
Record PT07W03 type basicRecord
  5 * char(44) ; 
    10 PROCESSED-FLAG PROCESSED-FLAG [11] ; 
    10 TRANS-P-REC TRANS-P-REC [11] ; 
    10 OPERATION-FLAG OPERATION-FLAG [11] ; 
end // end PT07W03

//*** RECORD=VFOFCT01 ****
// ;/*This record contains the entire DPRODC.VFEXDT01 dclgen,
// ;/*plus the short style name and color abreviation from
// ;/*DPRODG.VSYCLR01, for use with IO MOD VFEXDT01.
// ;/*
// ;/*  created 02/22/96
// ************************
Record VFOFCT01 type basicRecord
  5 PT07W-IO-GRP PT07W-IO-GRP ; 
    10 PT07W-FOFCT-GRP PT07W-FOFCT-GRP ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
    10 FY-FCTY-CD FY-FCTY-CD ; 
    10 PC-PO-ID-MO-RNG PC-PO-ID-MO-RNG ; 
    10 PC-PO-ID-MO-TO-RNG PC-PO-ID-MO-TO-RNG ; 
    10 XXXUSRID XXXUSRID ; 
    10 PGM-ID PGM-ID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VFOFCT01

//*** RECORD=VFORCD01 ****
// *************** PRODUCTION STYLE/COLOR TABLE ***************
// 
// DB2 TABLE VIEW:      DMODEL.VFORCD01
// 
// DCLGEN MEMBER:       DFORCD01
// 
// I/O MODULE:          VFORCD01
// 
// CSP SUBROUTINE:      none
// 
// KEY TO TABLE:        SY1STNBR
//                      SY2CLRID
//                      XDMCD
//                      XGPCD
// 
// MAINTENANCE HISTORY:
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// PT019    09/13/99  VANNAM  CREATED
// 
// ************************
Record VFORCD01 type basicRecord
  5 VFORCD01-GRP VFORCD01-GRP ; 
    10 VFORCD01-KEY VFORCD01-KEY ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
    10 PT-RTA-SPEC-OFR-CD PT-RTA-SPEC-OFR-CD ; 
    10 PT-RTA-KEY-CD PT-RTA-KEY-CD ; 
    10 PT-RTA-BRAND-CD PT-RTA-BRAND-CD ; 
    10 PT-RTA-PRI-CD PT-RTA-PRI-CD ; 
    10 PT-PROD-REL-DT PT-PROD-REL-DT ; 
    10 PC-DROPDEAD-RTA-DT PC-DROPDEAD-RTA-DT ; 
    10 XXX-USER-ID XXX-USER-ID ; 
    10 ZZ-CHNG-PGM-ID ZZ-CHNG-PGM-ID ; 
    10 ZZ-SDT ZZ-SDT ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
    10 PT07W-SYCLR-GRP PT07W-SYCLR-GRP ; 
      15 SY1SSTNM SY1SSTNM ; 
      15 SY2CLRAB SY2CLRAB ; 
      15 SY-FUTR-OFFER-BDT SY-FUTR-OFFER-BDT ; 
end // end VFORCD01

//*** RECORD=VRTAOC01 ****
// ;/*This record contains the entire DMODEL.VRTAOC01 dclgen
// ;/*
// ;/*  created 06/10/99
// ************************
Record VRTAOC01 type basicRecord
  5 RTAOC-GRP RTAOC-GRP ; 
    10 RTAOC-GRP-KEY RTAOC-GRP-KEY ; 
      15 PT-RTA-OVRD-TYP-CD PT-RTA-OVRD-TYP-CD ; 
      15 PT-RTA-OVRD-CD PT-RTA-OVRD-CD ; 
    10 PT-RTA-OVRD-NAME PT-RTA-OVRD-NAME ; 
    10 XXX-STAT XXX-STAT ; 
    10 XXX-USER-ID XXX-USER-ID ; 
    10 ZZ-CHNG-PGM-ID ZZ-CHNG-PGM-ID ; 
    10 ZZ-SDT ZZ-SDT ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end VRTAOC01

DataItem CHNG-COUNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem COLOR1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DROPDEAD-DATE
DataItem DROPDEAD-RTA-DT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FIRST-OFFER-DATE
DataItem FIRST-OFFER-DT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem OPERATION-FLAG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC-PO-ID-MO-TO-RNG int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PGM-ID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PROCESSED-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PRODUCT-RELEASE-DATE
DataItem PROD-REL-DT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PRODUCT RELEASE DATE
DataItem PT-PROD-REL-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BRAND CODE
DataItem PT-RTA-BRAND-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KEY CODE
DataItem PT-RTA-KEY-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT-RTA-OVRD-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PT_RTA_OVRD_NAME
DataItem PT-RTA-OVRD-NAME char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Override type code
DataItem PT-RTA-OVRD-TYP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PRI CODE
DataItem PT-RTA-PRI-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SPEC OFFER CD
DataItem PT-RTA-SPEC-OFR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT07COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT07COUNT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT07COUNT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT07COUNT3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT07MO1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT07MO1M1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT07MO1M2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT07MO1Y1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT07MO2 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT07MO2M1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT07MO2M2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT07MO2Y1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT07MO3 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT07MO3M1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT07MO3M2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT07MO3Y1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT07MO4 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT07MO4M1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT07MO4M2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT07MO4Y1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BRAND CODE
DataItem PT07W-BRAND-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Any code found sw
DataItem PT07W-CODE-FOUND-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data changed indicator
DataItem PT07W-DATA-CHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data updated/added indicator
DataItem PT07W-DATA-UPDATED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first tme thru pgm switch
DataItem PT07W-FIRST-TIME char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key
DataItem PT07W-FOFCT-GRP char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format century
DataItem PT07W-FORMAT-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// format ccyymmdd
DataItem PT07W-FORMAT-CCYYMMDD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date formatter
DataItem PT07W-FORMAT-DATE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// format day
DataItem PT07W-FORMAT-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// format month
DataItem PT07W-FORMAT-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// format year
DataItem PT07W-FORMAT-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT07W-IO-GRP char(53)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KEY TYPE CODE
DataItem PT07W-KEY-TYP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT07W-P-ENTERED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT07W-P-RETRIEVED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pf5 pressed switch
DataItem PT07W-PF5-PRESSED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT07W-PF9-CONFIRM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PRI CD
DataItem PT07W-PRI-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT07W-RE-CONFIRM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT07W-SAVE-DROPDEAD-RTA-DT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// maximum override century
DataItem PT07W-SAVE-MAX-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// maximum override ccyymmdd
DataItem PT07W-SAVE-MAX-CCYYMMDD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// maximum rta override date
DataItem PT07W-SAVE-MAX-DATE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// maximum override day
DataItem PT07W-SAVE-MAX-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// maximum override month
DataItem PT07W-SAVE-MAX-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// maximum override year
DataItem PT07W-SAVE-MAX-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// minimum rta century
DataItem PT07W-SAVE-MIN-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// minimum rta ccyymmdd
DataItem PT07W-SAVE-MIN-CCYYMMDD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// minimum rta override date
DataItem PT07W-SAVE-MIN-DATE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// minimum rta day
DataItem PT07W-SAVE-MIN-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// minimum rta month
DataItem PT07W-SAVE-MIN-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// minimum rta year
DataItem PT07W-SAVE-MIN-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved curr temp storage page
DataItem PT07W-SAVE-PAGE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT07W-SAVE-PROD-REL-DT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved page number
DataItem PT07W-SAVE-XXXTSPAG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT07W-SELECTION-MADE-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SPEC OFFER CD
DataItem PT07W-SPEC-OFFR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style Number
DataItem PT07W-SY1STNBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color
DataItem PT07W-SY2CLRID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style/color desc grp
DataItem PT07W-SYCLR-GRP char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// chgs verified waiting confirm
DataItem PT07W-WAIT-CONFIRM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wait for PF17 to be pressed
DataItem PT07W-WAIT-PF17 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FILLER
DataItem PT07W-WS-CC-1-NUM num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WS century
DataItem PT07W-WS-CC-NUM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WS ccyymmdd
DataItem PT07W-WS-CCYYMMDD-FORMAT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WS day
DataItem PT07W-WS-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WS day
DataItem PT07W-WS-DD-NUM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WS month
DataItem PT07W-WS-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WS month
DataItem PT07W-WS-MM-NUM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WS year
DataItem PT07W-WS-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WS year
DataItem PT07W-WS-YY-NUM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WS year
DataItem PT07W-WS-YYMMDD-FORMAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT07W11-IO-GRP char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dclvfexdt01
DataItem PT07W3-FORCD-GRP char(57)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT07W3-IO-GRP char(86)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Blank page switch
DataItem PT07WBSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT07WCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT07WDAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data found switch
DataItem PT07WDSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT07WFLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PT07WIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PT07WIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Secondary index for map fields
DataItem PT07WIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PT07WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT07WIXM1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT07WIXM2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for JCL submit
DataItem PT07WIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// number of data lines on map
DataItem PT07WLIN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT07WLIN1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of data lines on map
DataItem PT07WLN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem PT07WMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT07WSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Security switch
DataItem PT07WSSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT07WSSW-INQ-P char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Security switch
DataItem PT07WSSW-NON-P char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Security switch
DataItem PT07WSSW-P char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT07WSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT07WSW2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT07WSW3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT07WSW4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT07WSW5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem PT07WSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem PT07WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PT07WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PT07WX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// RTA_BRAND_CD
DataItem RTA-BRAND-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RTA_KEY_CD
DataItem RTA-KEY-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RTA_PRI_CD
DataItem RTA-PRI-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RTA_SPEC_OFR_CD
DataItem RTA-SPEC-OFR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem RTAOC-GRP char(41)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem RTAOC-GRP-KEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SETUP-DATE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_STY_NBR
DataItem STYLE1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// IO Task
DataItem TASK-CODE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TRANS-P-REC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Count
DataItem VFORCD01-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Record group level
DataItem VFORCD01-GRP char(86)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem VFORCD01-KEY char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

