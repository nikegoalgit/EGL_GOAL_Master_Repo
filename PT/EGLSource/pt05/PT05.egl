package pt05;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import pc.common.*;
import pg.common.*;
import pt.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PT05 ****
// This application allows users to create and process the
// footwear expedite data.
// 
// The menu is displayed for the user to select the job to be
// performed.  Another available selection allows the user to
// view the available printers and change the printed output
// destination.
// 
// Job Control Language statements are formatted and submitted
// through the Internal Reader Transient Data Queue (INTR).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TARTYPE).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed.
// 
// The data in working storage is substituted and the statement
// is written to the internal reader.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the menu, only.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          09/15/93  mhuynh  initial creation
//          02/01/95  mhuynh  Removed option to run application
//                            by country.
//          10/11/95  dbruih  added vietnam to processing
//          02/29/96  mhuynh  enhancements with launch table
//          06/05/96  mhuynh  allowed opiton 3/4 running with
//                            y/n send lines
//          06/11/96  mhuynh  not allow fast path to PT06.
//          12/27/96  dpack   increase record lengthin jcl for
//                            extract data to asia
//          05/05/97  dpack   add Philippines to processing
//          05/06/97  IDICKI  add Philippines to process
//                            PT05035 to enable selection of
//                            PHIL only.
//          06/30/97  ccaint  delete country selection and
//                            applicable processing logic
//  PT1087  07/24/97  IDICKI  add changes for PO type and
//                            delivery analyst.
//  PT1087  09/04/97  IDICKI  place clear remarks on send to
//                            factory and update comments
//                            screens to assist in preventing
//                            accidental submission of
//                            jobs.
//  PT017   06/16/98  GKAMAL  Added Italy to the country list.
// 
//  PT012   06/10/98  SRANGA  Create Expedite Database
//                            Exception Report.
//          10/27/98  gkamal  changed the map pt05m099
//          06/22/99  VANNAM  Max allowed condition code from
//                            PT4862 job (update fcty cmt) has
//                            been changed from 0 to 4.
//                            The proc changed for this is
//                            PT05056
//  PT216   09/03/99  RRENUK  Added a new record for storing
//                            the output destination parameters
//                            entered in PT05 screen so that
//                            they dont get lost after going
//                            to PT06 and then coming back to
//                            PT05.
//                            Changed PT05032,PT05036 and
//                            created new record PT05W03.
//          09/15/99  VANNAM  Changed the following procs and
//                            recds for default printer setting
//                            PT05010, PT05022, PT05032,
//                            PT05042, PT05052, PT05-062,
//                            PT05W00.PT05-PRINTER-SET switch
//  PT310   10/16/00  VANNAM  Disable "Send to Liaison Office"
//                            function in PT05M099 screen
//                            Modified PT05S91, PT05S99,
//                            PT05991 & PT05993
//          02/08/01  PSARKA  Enabled "Send to Liaison Office"
//                            function in PT05M099 screen again
//                            Modified PT05S91, PT05S99,
//                            PT05991 & PT05993 to remove
//                            previous changes.
//  PT317   11/02/01  KKARLA  Allow maximum return code of 2
//                            for PT4792
// *********************
Program PT05 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PT00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FY1REC FY1REC; // record
  PC2REC PC2REC; // record
  PCYREC PCYREC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  PT05W00 PT05W00; // record
  PT05W01 PT05W01; // record
  PT05W02 PT05W02; // record
  PT05W03 PT05W03; // record
  PTWREC PTWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XCTHREC XCTHREC; // record
  XZZREC XZZREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PT05T02 {deleteAfterUse = yes}; // table
  use PT05T12 {deleteAfterUse = yes}; // table
  use PT05T2A {deleteAfterUse = yes}; // table
  use PT05T2B {deleteAfterUse = yes}; // table
  use PT05T03 {deleteAfterUse = yes}; // table
  use PT05T13 {deleteAfterUse = yes}; // table
  use PT05T04 {deleteAfterUse = yes}; // table
  use PT05T14 {deleteAfterUse = yes}; // table
  use PT05T05 {deleteAfterUse = yes}; // table
  use PT05T15 {deleteAfterUse = yes}; // table
  use PT05T06 {deleteAfterUse = yes}; // table
  use PT05T16 {deleteAfterUse = yes}; // table
  use PT05T4A {deleteAfterUse = yes}; // table
  use PT05T4B {deleteAfterUse = yes}; // table
  use PT05T5A {deleteAfterUse = yes}; // table
  use PT05T5B {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use PT05M.PT05M010,  // forms
      PT05M.PT05M011, 
      PT05M.PT05M014, 
      PT05M.PT05M015, 
      PT05M.PT05M016, 
      PT05M.PT05M099, 
      PT05M.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPT001: XPPT001();
     /* ------------------------------------------------------------*/
     /* Initialize the working storage areas and variables.*/
     /* ------------------------------------------------------------*/

    set TA0PM001 initial; /* M001 input/output*/
    set PT05M010 initial; /* M010 input/output*/
    set PT05M011 initial; /* M011 input/output*/
    set PT05M014 initial; /* M014 input/output*/
    set PT05M015 initial; /* M015 input/output*/
    set PT05M099 initial; /* M099 input/output*/
    set PT05W00 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA6REC empty; /* Background job subroutine parameters*/

     /* ------------------------------------------------------------*/
     /* Indicate that the output destination must be obtained.*/
     /* ------------------------------------------------------------*/

    TA6REC.TA6SUBSW = "I"; /* Indicate obtain information*/

     /* ------------------------------------------------------------*/
     /* Indicate the number of selection lines on the menu.*/
     /* ------------------------------------------------------------*/

    PT05W00.PT05WIXL = 5; /* Number of selection lines*/

     /* ------------------------------------------------------------*/
     /* Initialize data request switches on*/
     /* ------------------------------------------------------------*/

    PT05W00.PT05WRD2 = "Y"; /* data request switch 2*/
    PT05W00.PT05WRD3 = "Y"; /* data request switch 3*/
    PT05W00.PT05WRD4 = "Y"; /* data request switch 4*/
    PT05W00.PT05WRD5 = "Y"; /* data request switch 5*/
    PT05W00.PT05WSWX = "Y"; /* exit request switch*/

     /* ------------------------------------------------------------*/
     /* If coming in from 'PT06'*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.CAFROMAP == "PT06")
      move PTWREC to PT05M011 byName; /* load data to Map*/
      move PTWREC.PC2CUXID to PT05M011.PC2CUXID[1] for all;
      move PTWREC.PT05MSEL to PT05W00.PT05MSEL[1] for all;
      PT05W00.PT05WRD3 = "N"; /* reset data request 3 to 'N'*/
      PT05W00.PT05MSEL[3] = "S";
      PT05W00.PT05WSWX = "N";
    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PT05001; /* Converse the main process*/


    PT05001: PT05001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PT05001; /* Converse the main process*/


  end // end main
end // end PT05

// ftwr expedite send to factory
Function PT05-060()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If first time thru, Obtain default data.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  /* IF PT05W00.PT05WRD6 = 'Y';           /* if switch is on*/
  if (converseVar.validationMsgNum == 0) /* and no prefious errors*/
    PT05-061(); /* Obtain default data*/
    /* MOVE 'N' TO PT05W00.PT05WRD6;      /* set switch off*/
  end

  PT05-062(); /* Format and display the map*/

  PT05-063(); /* Check attention identifier*/

  PT05-064(); /* Reset fields to normal intensity*/

  PT05-065(); /* Verify the data that was entered*/

  PT05-066(); /* Process valid input request*/


end // end PT05-060

// Default screen fields
Function PT05-061()

  set PT05M016.PT05MPDR normal;

  PT05M016.PT05MIND = "N"; /* report indicator*/
  PT05M016.PT05MNAM = TA6REC.XURUSRID; /* user name*/

end // end PT05-061

// Format and display the map
Function PT05-062()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    PT05M016.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  PT05M016.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/


   /* *****C H A N G E S ********B E G I N ************H E R E **************/

   /* 09/15/99 - changes for default printer settings*/

  if (PT05W00.PT05-PRINTER-SET != "Y") /* if printer set sw = '' or 'N'*/
    PT05W00.PT05-PRINTER-SET = "N"; /* set the printer set sw to 'N'*/
  end

   /* this below mentioned block is used for -*/
   /* (1) When re-entering from PT06 application and the printer settings*/
   /* are changed using the first option of PT05 application, then,*/
   /* New printer setting should be effective*/
   /* (2) When re-entering from PT06 application and the printer settings*/
   /* are NOT changed using the first option of PT05 application, then,*/
   /* the previous printer settings should be used, (ie), the printer*/
   /* settings used before exiting to PT06 application*/
   /* (3) The printer settings which are set up using the first option in*/
   /* PT05 application should be effective thoroughout PT05 application*/
   /* till it exits to PT06 application or exits from PT05 application*/
   /* (4) When the printer settings is not made, then default printers*/
   /* should display.*/

  if (PT05W00.PT05-PRINTER-SET == "Y")
   /* this block is used when printer settings changed*/
   /* MOVE 'N' TO PT05W00.PT05-PRINTER-SET;*/
    PT05M016.XURDEST = TA6REC.XURDEST; /* Print destination*/
    PT05M016.XRODESC = TA6REC.XRODESC; /* Printer description*/
    PT05M016.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
    PT05M016.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
    PT05M016.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
  else
    if (COMMAREA.CAFROMAP == "PT06")
   /* this bloc is used when reentered from PT06*/
      set PT05W03 empty;
      PT05W03.PT05W03REC = COMMAREA.CA-USER-WORKAREA-2K-B;
      PT05M016.XURDEST = PT05W03.PT05XURDEST;
      PT05M016.XRODESC = PT05W03.PT05XRODESC;
      PT05M016.XURUSRNM = PT05W03.PT05XURUSRNM;
      PT05M016.XURBLDID = PT05W03.PT05XURBLDID;
      PT05M016.XURCOPY = PT05W03.PT05XURCOPY;
    else
   /* this bloc is used when printer settings are not entered*/
      PT05M016.XURDEST = TA6REC.XURDEST; /* Print destination*/
      PT05M016.XRODESC = TA6REC.XRODESC; /* Printer description*/
      PT05M016.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
      PT05M016.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
      PT05M016.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
    end
  end


   /* MOVE TA6REC.XURDEST TO PT05M016.XURDEST; /* Print destination*/
   /* MOVE TA6REC.XRODESC TO PT05M016.XRODESC; /* Printer description*/
   /* MOVE TA6REC.XURUSRNM TO PT05M016.XURUSRNM; /* Report recipient*/
   /* MOVE TA6REC.XURBLDID TO PT05M016.XURBLDID; /* NIKE building*/
   /* MOVE TA6REC.XURCOPY TO PT05M016.XURCOPY; /* Number of copies*/

   /* *****C H A N G E S ********E N D ****************H E R E **************/


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT05M016.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT05M016.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT05M016 alarm; /* Indicate sound alarm*/

  end

  converse PT05M016 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PT05-062

// Check attention identifier
Function PT05-063()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PT05W00.PT05MSEL[4] = "C"; /* Indicate selection cancelled*/

    set PT05M016 initial; /* m004 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FASTPATH was requested, transfer to the application*/
   /* ------------------------------------------------------------*/

  if (PT05M016.CATOAP > " ") /* FASTPATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (PT05M016.CATOAP == "PT06") /* Cannot fast past to PT06*/
        PTWREC.XXXMSGNO = 145; /* Indicate PF key not valid*/
        PTWREC.XXXMODID = "043";
        exit stack; /* exit to display map*/
      end

      COMMAREA.CATOAP = PT05M016.CATOAP;
      XSPT001(); /* Exit to another application*/
      set PT05M016.CATOAP cursor, bold;
    else
      PTWREC.XXXMSGNO = 18; /* Indicate PF key not valid*/
      PTWREC.XXXMODID = "043";

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PT05W00.PT05MSEL[4] = " "; /* Indicate nothing happened*/
    COMMAREA.CAMSG = "NO ACTION TAKEN ON PREVIOUS SCREEN";

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "023"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PT05-063

// Reset highlighted fields
Function PT05-064()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to AUTOSKIP intensity.*/
   /* ------------------------------------------------------------*/

  set PT05M016.PT05MPDR normal; /* all countries*/
  set PT05M016.PT05MNAM normal; /* preparer name*/
  set PT05M016.PT05MIND normal; /* report printed ind*/

end // end PT05-064

// Verify the entered data
Function PT05-065()
   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

  PT05W00.PT05WERF = "N";

   /* ------------------------------------------------------------*/
   /* validate report print indicator*/
   /* ------------------------------------------------------------*/

  if (PT05M016.PT05MIND != "Y"
   && PT05M016.PT05MIND != "N")
    PT05W00.PT05WERF = "Y";
    converseLib.validationFailed(116); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "025";
    set PT05M016.PT05MIND cursor, bold;
  else
    set PT05M016.PT05MIND initialAttributes;
  end

  if (PT05W00.PT05WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate user name*/
   /* ------------------------------------------------------------*/

  if (PT05M016.PT05MNAM == " ")
    PT05W00.PT05WERF = "Y";
    converseLib.validationFailed(116); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "025";
    set PT05M016.PT05MNAM cursor, bold;
  else
    set PT05M016.PT05MNAM initialAttributes;
  end

  if (PT05W00.PT05WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate all country select*/
   /* ------------------------------------------------------------*/

  if (PT05M016.PT05MPDR != "S")
    PT05W00.PT05WERF = "Y";
    converseLib.validationFailed(13); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "025";
    set PT05M016.PT05MPDR cursor, bold;
  else
    set PT05M016.PT05MPDR normal;
  end

  if (PT05W00.PT05WERF == "Y")
    return;
  end

end // end PT05-065

// Process valid input request
Function PT05-066()
   /* ------------------------------------------------------------*/
   /* if errors present dont submit job*/
   /* ------------------------------------------------------------*/

  if (PT05W00.PT05WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/
  PT05W00.PT05WIXT = 1;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* if on production system*/
    PT05-06610(); /* format production jcl*/
  else
    PT05-06620(); /* format test jcl*/
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "066"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PT05W00.PT05MSEL[4] = "*"; /* Indicate function completed*/
    COMMAREA.CAMSG = "CREATE DDD DISCREPANCY RPT - WAS SUBMITTED";

    set PT05M016 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end PT05-066

// Process valid production jcl
Function PT05-06610()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  set PT05W02 empty;

  PT05W02.PT05WPGM = "PT4790";
  PT05W02.PT05MNAM = PT05M016.PT05MNAM;
  PT05W02.PT05WCT1 = "CHIN";
  PT05W02.PT05WCT2 = "INDO";
  PT05W02.PT05WCT3 = "KORE";
  PT05W02.PT05WCT4 = "TAIW";
  PT05W02.PT05WCT5 = "THAI";
  PT05W02.PT05WCT6 = "VIET";
  PT05W02.PT05WCT7 = "PHIL";

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT05T06.TARTYPE[PT05WIXT] == "1")
      if (PT05M016.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT01 FORMS=PT01,COPIES=1,DEST=RMT00";
        TA6REC.TARTYPE[TA6INDEX] = " ";
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT01 FORMS=PT01,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    else

      if (PT05T06.TARTYPE[PT05WIXT] == "2")
        if (PT05M016.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT02 FORMS=PT02,COPIES=1,DEST=RMT00";
          TA6REC.TARTYPE[TA6INDEX] = " ";
        else
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT02 FORMS=PT02,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
        end
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      else

        if (PT05T06.TARTYPE[PT05WIXT] == "3")
          if (PT05M016.XURDEST == "LOCAL") /* destination lazer*/
            TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT03 FORMS=PT03,COPIES=1,DEST=RMT00";
            TA6REC.TARTYPE[TA6INDEX] = " ";
          else
            TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT03 FORMS=PT03,COPIES=_,DEST=_____";
            TA6REC.TARTYPE[TA6INDEX] = "O";
          end
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        else


            /* ------------------------------------------------------------*/
                                  /* Format the Job Control Language*/
                                   /* statement from the table.*/

            /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = PT05T06.TARJCL[PT05WIXT];
                                   /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = PT05T06.TARTYPE[PT05WIXT];
                                   /* Type*/
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        end
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT05T06.TARJCL[PT05WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT05W00.PT05WIXT = PT05W00.PT05WIXT + 1; /* Input table index*/

    end

  end
end // end PT05-06610

// Process valid test jcl
Function PT05-06620()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  set PT05W02 empty;

  PT05W02.PT05WPGM = "PT4790";
  PT05W02.PT05MNAM = PT05M016.PT05MNAM;
  PT05W02.PT05WCT1 = "CHIN";
  PT05W02.PT05WCT2 = "INDO";
  PT05W02.PT05WCT3 = "KORE";
  PT05W02.PT05WCT4 = "TAIW";
  PT05W02.PT05WCT5 = "THAI";
  PT05W02.PT05WCT6 = "VIET";
  PT05W02.PT05WCT7 = "PHIL";

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT05T16.TARTYPE[PT05WIXT] == "1")
      if (PT05M016.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT01 FORMS=PT01,COPIES=1,DEST=RMT00";
        TA6REC.TARTYPE[TA6INDEX] = " ";
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT01 FORMS=PT01,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    else

      if (PT05T16.TARTYPE[PT05WIXT] == "2")
        if (PT05M016.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT02 FORMS=PT02,COPIES=1,DEST=RMT00";
          TA6REC.TARTYPE[TA6INDEX] = " ";
        else
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT02 FORMS=PT02,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
        end
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      else

        if (PT05T16.TARTYPE[PT05WIXT] == "3")
          if (PT05M016.XURDEST == "LOCAL") /* destination lazer*/
            TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT03 FORMS=PT03,COPIES=1,DEST=RMT00";
            TA6REC.TARTYPE[TA6INDEX] = " ";
          else
            TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT03 FORMS=PT03,COPIES=_,DEST=_____";
            TA6REC.TARTYPE[TA6INDEX] = "O";
          end
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        else

            /* ------------------------------------------------------------*/
                                  /* Format the Job Control Language*/
                                   /* statement from the table.*/

            /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = PT05T16.TARJCL[PT05WIXT];
                                   /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = PT05T16.TARTYPE[PT05WIXT];
                                   /* Type*/
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        end
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT05T16.TARJCL[PT05WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT05W00.PT05WIXT = PT05W00.PT05WIXT + 1; /* Input table index*/

    end

  end
end // end PT05-06620

// Main process to display a map
Function PT05001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Invoke the process for each selection entered on menu.*/
   /* 2) After all selections are processed, display the menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PT05W00.PT05WSWX != "Y") /* EXIT not requested*/

    if (PT05W00.PT05MSEL[1] == "S" /* Line 1 was selected*/
     || TA6REC.TA6SUBSW == "I")    /* or information requested*/

      PT05010(); /* Specify output destination*/

    end

    if (PT05W00.PT05MSEL[2] == "S") /* Line 2 was selected*/
      if (COMMAREA.CAALVL[1] == "N")
        PT05W00.PT05WSWX = "Y";
        converseLib.validationFailed(6); /* user unauthorized*/
        set PT05M099.PT05MSEL[2] cursor, bold; /* highlight*/
        exit stack;
      end

      PT05W00.PT05WERF = "Y"; /* set error flag 'on'*/
      while (PT05W00.PT05WERF != "N")
        PT05020(); /* expedite creation*/
      end
    end

    if (PT05W00.PT05MSEL[3] == "S") /* Line 3 was selected*/

      call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};
      if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")
        TA1REC.TA1LOCAT[1] = "PT05001";
        TA1REC.TA1LOCAT[2] = "XC0910 ";
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1PGMNM = "PT05";

        TA1REC.TA1FUNC = "POST";
        call "TA0020" (TA1REC, SQLCA);
        converseLib.validationFailed(112);
      end

      PT05W00.PT05WERF = "Y"; /* set error flag 'on'*/
      while (PT05W00.PT05WERF != "N")
        PT05030(); /* expedite updates/inquiries*/
      end
    end

    if (PT05W00.PT05MSEL[4] == "S") /* Line 4 was selected*/
      if (COMMAREA.CAALVL[1] == "N")
        PT05W00.PT05WSWX = "Y";
        converseLib.validationFailed(6); /* user unauthorized*/
        set PT05M099.PT05MSEL[4] cursor, bold; /* highlight*/
        exit stack;
      end

      PT05W00.PT05WERF = "Y"; /* set error flag 'on'*/
      while (PT05W00.PT05WERF != "N")
        PT05-060(); /* create ddd discrepancy*/
      end
    end

    if (PT05W00.PT05MSEL[5] == "S") /* Line 5 was selected*/
      if (COMMAREA.CAALVL[1] == "N")
        PT05W00.PT05WSWX = "Y";
        converseLib.validationFailed(6); /* user unauthorized*/
        set PT05M099.PT05MSEL[5] cursor, bold; /* highlight*/
        exit stack;
      end

      PT05W00.PT05WERF = "Y"; /* set error flag 'on'*/
      while (PT05W00.PT05WERF != "N")
        PT05040(); /* send to factory file creation*/
      end
    end

    if (PT05W00.PT05MSEL[6] == "S") /* Line 6 was selected*/
      if (COMMAREA.CAALVL[1] == "N")
        PT05W00.PT05WSWX = "Y";
        converseLib.validationFailed(6); /* user unauthorized*/
        set PT05M099.PT05MSEL[6] cursor, bold; /* highlight*/
        exit stack;
      end

      PT05W00.PT05WERF = "Y"; /* set error flag 'on'*/
      while (PT05W00.PT05WERF != "N")
        PT05050(); /* update db2 with factory comments*/
      end
    end

  end

  PT05W00.PT05WSWX = "N"; /* Reset exit requested switch*/

  PT05990(); /* Report Request Menu*/

end // end PT05001

// Specify output destination
Function PT05010()
   /* ------------------------------------------------------------*/
   /* Obtain and/or display the output destination for the user.*/
   /* ------------------------------------------------------------*/

   /* ***********************************************************************/
   /* 09/15/99 changes for default printer settings*/
  if (TA6REC.TA6SUBSW == "I") /* if for information*/
   /* next sentence*/
  else
    PT05W00.PT05-PRINTER-SET = "Y"; /* set the printer set sw*/
  end
   /* ***********************************************************************/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If successful, indicate the selected function is completed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (TA6REC.TA6RTNCD == "0") /* Normal return*/

      if (TA6REC.TA6SUBSW == "I") /* Obtain information only*/

        TA6REC.TA6SUBSW = "N"; /* Indicate information obtained*/
      else
        PT05W00.PT05MSEL[1] = "*"; /* Indicate function completed*/

      end

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If user cancelled request, indicate function cancelled.*/
    /* ------------------------------------------------------------*/

    if (TA6REC.TA6RTNCD == "1") /* User cancelled request*/

      PT05W00.PT05MSEL[1] = "C"; /* Indicate function cancelled*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "010"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  exit stack; /* Exit to display map*/


end // end PT05010

// footwear expedite creation
Function PT05020()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If request for data switch set, obtain data.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

   /* F PT05W00.PT05WRD2 = 'Y'         /* request for data switch = yes*/
  if (converseVar.validationMsgNum == 0) /* and no previous errors*/
    PT05021(); /* Obtain data*/
    /* MOVE 'N' TO PT05W00.PT05WRD2;   /* SET SWITCH TO 'NO'*/
  end

  PT05022(); /* Format and display the map*/

  PT05023(); /* Check attention identifier*/

  PT05024(); /* Reset fields to normal intensity*/

  PT05025(); /* Verify the data that was entered*/

  PT05026(); /* Process valid input request*/


end // end PT05020

// Default screen fields
Function PT05021()

  set PT05M010.PT05MCTY normal;

  PT05M010.PT05MIND = "N"; /* report indicator*/
  PT05M010.PT05MNAM = TA6REC.XURUSRID; /* user name*/

end // end PT05021

// Format and display the map
Function PT05022()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    PT05M010.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  PT05M010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/


   /* ***** C H A N G E S ******** B E G I N ********** H E R E**************/

   /* 09/15/99 - changes for default printer settings*/

  if (PT05W00.PT05-PRINTER-SET != "Y") /* if printer set sw = '' or 'N'*/
    PT05W00.PT05-PRINTER-SET = "N"; /* set the printer set sw to 'N'*/
  end

   /* this below mentioned block is used for -*/
   /* (1) When re-entering from PT06 application and the printer settings*/
   /* are changed using the first option of PT05 application, then,*/
   /* New printer setting should be effective*/
   /* (2) When re-entering from PT06 application and the printer settings*/
   /* are NOT changed using the first option of PT05 application, then,*/
   /* the previous printer settings should be used, (ie), the printer*/
   /* settings used before exiting to PT06 application*/
   /* (3) The printer settings which are set up using the first option in*/
   /* PT05 application should be effective thoroughout PT05 application*/
   /* till it exits to PT06 application or exits from PT05 application*/
   /* (4) When the printer settings is not made, then default printers*/
   /* should display.*/

  if (PT05W00.PT05-PRINTER-SET == "Y")
   /* this block is used when printer settings changed*/
   /* MOVE 'N' TO PT05W00.PT05-PRINTER-SET;*/
    PT05M010.XURDEST = TA6REC.XURDEST; /* Print destination*/
    PT05M010.XRODESC = TA6REC.XRODESC; /* Printer description*/
    PT05M010.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
    PT05M010.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
    PT05M010.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
  else
    if (COMMAREA.CAFROMAP == "PT06")
   /* this bloc is used when reentered from PT06*/
      set PT05W03 empty;
      PT05W03.PT05W03REC = COMMAREA.CA-USER-WORKAREA-2K-B;
      PT05M010.XURDEST = PT05W03.PT05XURDEST;
      PT05M010.XRODESC = PT05W03.PT05XRODESC;
      PT05M010.XURUSRNM = PT05W03.PT05XURUSRNM;
      PT05M010.XURBLDID = PT05W03.PT05XURBLDID;
      PT05M010.XURCOPY = PT05W03.PT05XURCOPY;
    else
   /* this bloc is used when printer settings are not entered*/
      PT05M010.XURDEST = TA6REC.XURDEST; /* Print destination*/
      PT05M010.XRODESC = TA6REC.XRODESC; /* Printer description*/
      PT05M010.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
      PT05M010.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
      PT05M010.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
    end
  end


   /* MOVE TA6REC.XURDEST TO PT05M010.XURDEST; /* Print destination*/
   /* MOVE TA6REC.XRODESC TO PT05M010.XRODESC; /* Printer description*/
   /* MOVE TA6REC.XURUSRNM TO PT05M010.XURUSRNM; /* Report recipient*/
   /* MOVE TA6REC.XURBLDID TO PT05M010.XURBLDID; /* NIKE building*/
   /* MOVE TA6REC.XURCOPY TO PT05M010.XURCOPY; /* Number of copies*/

   /* ***** C H A N G E S ******** E N D ************** H E R E**************/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT05M010.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT05M010.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT05M010 alarm; /* Indicate sound alarm*/

  end

  converse PT05M010 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PT05022

// Check attention identifier
Function PT05023()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PT05W00.PT05MSEL[2] = "C"; /* Indicate selection cancelled*/

    set PT05M010 initial; /* m002 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FASTPATH was requested, transfer to the application*/
   /* ------------------------------------------------------------*/

  if (PT05M010.CATOAP > " ") /* FASTPATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (PT05M010.CATOAP == "PT06") /* Cannot fastpath to PT06*/
        PTWREC.XXXMSGNO = 145;
        PTWREC.XXXMODID = "023";
        exit stack; /* Exit to display map*/
      end

      COMMAREA.CATOAP = PT05M010.CATOAP;
      XSPT001(); /* Exit to another application*/
      set PT05M010.CATOAP cursor, bold;
    else
      PTWREC.XXXMSGNO = 18; /* Indicate PF key not valid*/
      PTWREC.XXXMODID = "023";

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PT05W00.PT05MSEL[2] = " "; /* Indicate nothing happened*/
    COMMAREA.CAMSG = "NO ACTION TAKEN ON PREVIOUS SCREEN";

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "023"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PT05023

// Reset highlighted fields
Function PT05024()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to DEFINED intensity.*/
   /* ------------------------------------------------------------*/

  set PT05M010.PT05MCTY normal; /* all countries*/
  set PT05M010.PT05MNAM normal; /* preparer name*/
  set PT05M010.PT05MIND normal; /* report printed ind*/

end // end PT05024

// Verify the entered data
Function PT05025()
   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

  PT05W00.PT05WERF = "N";

   /* ------------------------------------------------------------*/
   /* validate report print indicator*/
   /* ------------------------------------------------------------*/

  if (PT05M010.PT05MIND != "Y"
   && PT05M010.PT05MIND != "N")
    PT05W00.PT05WERF = "Y";
    converseLib.validationFailed(116); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "025";
    set PT05M010.PT05MIND cursor, bold;
  else
    set PT05M010.PT05MIND initialAttributes;
  end

  if (PT05W00.PT05WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate user name*/
   /* ------------------------------------------------------------*/

  if (PT05M010.PT05MNAM == " ")
    PT05W00.PT05WERF = "Y";
    converseLib.validationFailed(116); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "025";
    set PT05M010.PT05MNAM cursor, bold;
  else
    set PT05M010.PT05MNAM initialAttributes;
  end

  if (PT05W00.PT05WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate all country select*/
   /* ------------------------------------------------------------*/
   /*  */
  if (PT05M010.PT05MCTY != "S")
    PT05W00.PT05WERF = "Y";
    converseLib.validationFailed(13); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "025";
    set PT05M010.PT05MCTY cursor, bold;
  else
    set PT05M010.PT05MCTY normal;
  end

  if (PT05W00.PT05WERF == "Y")
    return;
  end

end // end PT05025

// Process valid input request
Function PT05026()
   /* ------------------------------------------------------------*/
   /* if errors present dont submit job*/
   /* ------------------------------------------------------------*/

  if (PT05W00.PT05WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/
  PT05W00.PT05WIXT = 1;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* if on production system*/
    PT05027(); /* format production jcl*/
  else
    PT05028(); /* format test jcl*/
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  TA6REC.TA6-MAX-COND-CODE = 2; /* maxmimum return code possible*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "026"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PT05W00.PT05MSEL[2] = "*"; /* Indicate function completed*/
    COMMAREA.CAMSG = "FOOTWEAR EXPEDITE CREATION - WAS SUBMITTED";

    set PT05M010 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end PT05026

// Process valid production jcl
Function PT05027()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  set PT05W02 empty;

  PT05W02.PT05WPGM = "PT479D";
  PT05W02.PT05MNAM = PT05M010.PT05MNAM;
  PT05W02.PT05WCT1 = "CHIN";
  PT05W02.PT05WCT2 = "INDO";
  PT05W02.PT05WCT3 = "KORE";
  PT05W02.PT05WCT4 = "TAIW";
  PT05W02.PT05WCT5 = "THAI";
  PT05W02.PT05WCT6 = "VIET";
  PT05W02.PT05WCT7 = "PHIL";
  PT05W02.PT05WCT8 = "ITAL";

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    if (PT05T02.TARTYPE[PT05WIXT] == "W")
      if (PT05M010.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT51 FORMS=PT51,COPIES=1,DEST=RMT00";
        TA6REC.TARTYPE[TA6INDEX] = " ";
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT51 FORMS=PT51,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    else

      if (PT05T02.TARJCL[PT05WIXT] == "===INSERT PARM===")
        TA6REC.TARJCL[TA6INDEX] = PT05W02.TARJCL;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      else

        if (PT05T02.TARJCL[PT05WIXT] == "===PRINT STEP===")
          if (PT05M010.PT05MIND == "Y")
            PT0502A();
          end
        else

          /* ------------------------------------------------------------*/
          /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = PT05T02.TARJCL[PT05WIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = PT05T02.TARTYPE[PT05WIXT];
                                   /* Type*/
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        end
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT05T02.TARJCL[PT05WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT05W00.PT05WIXT = PT05W00.PT05WIXT + 1; /* Input table index*/

    end

  end
end // end PT05027

// Process valid test jcl
Function PT05028()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  set PT05W02 empty;

  PT05W02.PT05WPGM = "PT479D";
  PT05W02.PT05MNAM = PT05M010.PT05MNAM;
  PT05W02.PT05WCT1 = "CHIN";
  PT05W02.PT05WCT2 = "INDO";
  PT05W02.PT05WCT3 = "KORE";
  PT05W02.PT05WCT4 = "TAIW";
  PT05W02.PT05WCT5 = "THAI";
  PT05W02.PT05WCT6 = "VIET";
  PT05W02.PT05WCT7 = "PHIL";
  PT05W02.PT05WCT8 = "ITAL";

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT05T12.TARJCL[PT05WIXT] == "===OUTPUT===")
      if (PT05M010.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT51 FORMS=PT51,COPIES=1,DEST=RMT00";
        TA6REC.TARTYPE[TA6INDEX] = " ";
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT51 FORMS=PT51,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    else

      if (PT05T12.TARJCL[PT05WIXT] == "===INSERT PARM===")
        TA6REC.TARJCL[TA6INDEX] = PT05W02.TARJCL;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      else

        if (PT05T12.TARJCL[PT05WIXT] == "===PRINT STEP===")
          if (PT05M010.PT05MIND == "Y")
            PT0502B();
          end
        else


          /* ------------------------------------------------------------*/
          /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = PT05T12.TARJCL[PT05WIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = PT05T12.TARTYPE[PT05WIXT];
                                   /* Type*/
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        end
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT05T12.TARJCL[PT05WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT05W00.PT05WIXT = PT05W00.PT05WIXT + 1; /* Input table index*/

    end

  end
end // end PT05028

// Process valid prod request
Function PT0502A()
  PT05W00.PT05WIDX = 1;

  while (PT05W00.PT05WIDX > 0) /* ; Until end of table*/
    if (PT05T2A.TARJCL[PT05WIDX] == "===FILE01===")
      if (PT05M010.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT51)'";
      else
        TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT51)'";
      end
      TA6REC.TARTYPE[TA6INDEX] = " ";
    else
      TA6REC.TARJCL[TA6INDEX] = PT05T2A.TARJCL[PT05WIDX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT05T2A.TARTYPE[PT05WIDX]; /* Type*/
    end
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT05W00.PT05WIDX = PT05W00.PT05WIDX + 1; /* Input table index*/
    if (PT05T2A.TARJCL[PT05WIDX] == "/*EOJ")
      PT05W00.PT05WIDX = 0; /* force end of file*/
    end
  end

end // end PT0502A

// Process valid test  request
Function PT0502B()
  PT05W00.PT05WIDX = 1;

  while (PT05W00.PT05WIDX > 0) /* ; Until end of table*/
    if (PT05T2B.TARJCL[PT05WIDX] == "===FILE01===")
      if (PT05M010.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(2,,PT51)'";
      else
        TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(T,,PT51)'";
      end
    else
      TA6REC.TARJCL[TA6INDEX] = PT05T2B.TARJCL[PT05WIDX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT05T2B.TARTYPE[PT05WIDX]; /* Type*/
    end
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT05W00.PT05WIDX = PT05W00.PT05WIDX + 1; /* Input table index*/
    if (PT05T2B.TARJCL[PT05WIDX] == "/*EOJ")
      PT05W00.PT05WIDX = 0; /* force end of file*/
    end
  end

end // end PT0502B

// ftwr expedite update/inquiry
Function PT05030()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If first time thru, Obtain default data.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PT05W00.PT05WRD3 == "Y" /* Request for data switch 'on'*/
   && converseVar.validationMsgNum == 0) /* and no previous errors*/
    PT05031(); /* Obtain default data*/
    PT05W00.PT05WRD3 = "N"; /* Set switch 'off'*/
  end

  PT05032(); /* Format and display the map*/

  PT05033(); /* Check attention identifier*/

  PT05034(); /* Reset fields to normal intensity*/

  PT05035(); /* Verify the data that was entered*/

  PT05036(); /* Process valid input request*/


end // end PT05030

// Default screen fields
Function PT05031()

  PT05M011.PT05MSRT = "1"; /* sort option code*/
  PT05M011.PT05MIND = "N"; /* report indicator*/
  PT05M011.PT05MNAM = TA6REC.XURUSRID; /* user name*/
  PT05M011.PC-FCTY-SEND-IND = "*"; /* fcty send ind*/
  PT05M011.PT05POTP = "**"; /* PO type*/
  PT05M011.PT05MPBD = 0; /* beginning po month*/
  PT05M011.PT05MPED = 0; /* ending po month*/
  PT05M011.PC2CUXID[1] = "     "; /* customer1*/
  PT05M011.PC2CUXID[2] = "     "; /* customer2*/
  PT05M011.PC2CUXID[3] = "     "; /* customer3*/
  PT05M011.PC2CUXID[4] = "     "; /* customer4*/
  PT05M011.PC2CUXID[5] = "     "; /* customer5*/
  PT05M011.PT05MDRS = "*"; /* direct ship*/
  PT05M011.XWHCD = "**"; /* warehouse*/
  PT05M011.SY1STNBR = "******"; /* style*/
  PT05M011.SY2CLRID = "***"; /* color*/
  PT05M011.XDMCD = "**"; /* dimension*/
  PT05M011.FY1FCTYC = "****"; /* factory*/
  PT05M011.XCTCD = "****"; /* country*/
  PT05M011.PG1SC4CD = "**"; /* scheduler code*/

end // end PT05031

// Format and display the map
Function PT05032()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    PT05M011.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  PT05M011.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/


   /* ******* C H A N G E S ********** B E G I N ********* H E R E **********/

   /* 09/15/99 - changes for default printer settings*/

  if (PT05W00.PT05-PRINTER-SET != "Y") /* if printer set sw = '' or 'N'*/
    PT05W00.PT05-PRINTER-SET = "N"; /* set the switch to 'N'*/
  end

   /* this below mentioned block is used for -*/
   /* (1) When re-entering from PT06 application and the printer settings*/
   /* are changed using the first option of PT05 application, then,*/
   /* New printer setting should be effective*/
   /* (2) When re-entering from PT06 application and the printer settings*/
   /* are NOT changed using the first option of PT05 application, then,*/
   /* the previous printer settings should be used, (ie), the printer*/
   /* settings used before exiting to PT06 application*/
   /* (3) The printer settings which are set up using the first option in*/
   /* PT05 application should be effective thoroughout PT05 application*/
   /* till it exits to PT06 application or exits from PT05 application*/
   /* (4) When the printer settings is not made, then default printers*/
   /* should display.*/

  if (PT05W00.PT05-PRINTER-SET == "Y")
   /* this block is used when printer settings changed*/
   /* MOVE 'N' TO PT05W00.PT05-PRINTER-SET;*/
    PT05M011.XURDEST = TA6REC.XURDEST; /* Print destination*/
    PT05M011.XRODESC = TA6REC.XRODESC; /* Printer description*/
    PT05M011.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
    PT05M011.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
    PT05M011.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
  else
   /* this bloc is used when reentered from PT06*/
    if (COMMAREA.CAFROMAP == "PT06")
      set PT05W03 empty;
      PT05W03.PT05W03REC = COMMAREA.CA-USER-WORKAREA-2K-B;
      PT05M011.XURDEST = PT05W03.PT05XURDEST;
      PT05M011.XRODESC = PT05W03.PT05XRODESC;
      PT05M011.XURBLDID = PT05W03.PT05XURBLDID;
      PT05M011.XURCOPY = PT05W03.PT05XURCOPY;
      PT05M011.XURUSRNM = PT05W03.PT05XURUSRNM;
    else
      PT05M011.XURDEST = TA6REC.XURDEST; /* Print destination*/
      PT05M011.XRODESC = TA6REC.XRODESC; /* Printer description*/
      PT05M011.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
      PT05M011.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
      PT05M011.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
    end
  end

   /* IF COMMAREA.CAFROMAP EQ 'PT06';*/
   /* SET PT05W03 EMPTY;*/
   /* MOVE COMMAREA.CA-USER-WORKAREA-2K-B TO PT05W03.PT05W03REC;*/
   /* MOVE PT05W03.PT05XURDEST TO PT05M011.XURDEST;*/
   /* MOVE PT05W03.PT05XRODESC TO PT05M011.XRODESC;*/
   /* MOVE PT05W03.PT05XURBLDID TO PT05M011.XURBLDID;*/
   /* MOVE PT05W03.PT05XURCOPY TO PT05M011.XURCOPY;*/
   /* MOVE PT05W03.PT05XURUSRNM TO PT05M011.XURUSRNM;*/
   /* ELSE;*/
   /* MOVE TA6REC.XURDEST TO PT05M011.XURDEST;/* Print destination*/
   /* MOVE TA6REC.XRODESC TO PT05M011.XRODESC;/* Printer description*/
   /* MOVE TA6REC.XURUSRNM TO PT05M011.XURUSRNM;/* Report recipient*/
   /* MOVE TA6REC.XURBLDID TO PT05M011.XURBLDID;/* NIKE building*/
   /* MOVE TA6REC.XURCOPY TO PT05M011.XURCOPY;/* Number of copies*/
   /* END;*/

   /* ******* C H A N G E S ********** E N D ************* H E R E **********/


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT05M011.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT05M011.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT05M011 alarm; /* Indicate sound alarm*/

  end

  converse PT05M011 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PT05032

// Check attention identifier
Function PT05033()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PT05W00.PT05MSEL[3] = "C"; /* Indicate selection cancelled*/

    set PT05M011 initial; /* m002 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FASTPATH was requested, transfer to the application*/
   /* ------------------------------------------------------------*/

  if (PT05M011.CATOAP > " ") /* FASTPATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (PT05M011.CATOAP == "PT06") /* Cannot fastpath to PT06*/
        PTWREC.XXXMSGNO = 145; /* Indicate PF key not valid*/
        PTWREC.XXXMODID = "033";
        exit stack; /* Exit to display map*/
      end

      COMMAREA.CATOAP = PT05M011.CATOAP;
      XSPT001(); /* Exit to another application*/
      set PT05M011.CATOAP cursor, bold;
      PTWREC.XXXMSGNO = 18; /* Indicate PF key not valid*/
      PTWREC.XXXMODID = "033";
    else

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PT05W00.PT05MSEL[3] = "*"; /* Indicate nothing happened*/
    /* OVE 'NO ACTION TAKEN ON PREVIOUS SCREEN' TO COMMAREA.CAMSG;*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "033"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PT05033

// Reset highlighted fields
Function PT05034()
   /* -----------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* -----------------------------------------------------------*/

  set PT05M011.PG1SC4CD normal; /* scheduler code*/
  set PT05M011.XCTCD normal; /* country code*/
  set PT05M011.FY1FCTYC normal; /* factory code*/
  set PT05M011.SY1STNBR normal; /* style*/
  set PT05M011.SY2CLRID normal; /* color*/
  set PT05M011.XDMCD normal; /* dimension*/
  set PT05M011.XWHCD normal; /* warehouse*/
  set PT05M011.PT05MDRS normal; /* direct ships*/
  set PT05M011.PC2CUXID[1] normal; /* customer id1*/
  set PT05M011.PC2CUXID[2] normal; /* customer id2*/
  set PT05M011.PC2CUXID[3] normal; /* customer id3*/
  set PT05M011.PC2CUXID[4] normal; /* customer id4*/
  set PT05M011.PC2CUXID[5] normal; /* customer id5*/
  set PT05M011.PT05MPBD normal; /* beginning po month*/
  set PT05M011.PT05MPED normal; /* ending po month*/
  set PT05M011.PT05POTP normal; /* PO type*/
  set PT05M011.PC-FCTY-SEND-IND normal; /* fcty send ind*/
  set PT05M011.PT05MNAM normal; /* preparer name*/
  set PT05M011.PT05MIND normal; /* report printed ind*/
  set PT05M011.PT05MSRT normal; /* sort option code*/

end // end PT05034

// Verify the entered data
Function PT05035()
   /* -----------------------------------------------------------*/
   /* verify the entered data*/
   /* -----------------------------------------------------------*/

  PT05W00.PT05WERF = "N";

   /* ------------------------------------------------------------*/
   /* validate sort option code*/
   /* ------------------------------------------------------------*/

  if (PT05M011.PT05MSRT != "1"
   && PT05M011.PT05MSRT != "2"
   && PT05M011.PT05MSRT != "3"
   && PT05M011.PT05MSRT != "4"
   && PT05M011.PT05MSRT != "5")
    PT05W00.PT05WERF = "Y";
    converseLib.validationFailed(116); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "035";
    set PT05M011.PT05MSRT cursor, bold;
    return;
  else
    set PT05M011.PT05MSRT initialAttributes;
  end
  if (PT05M011.PT05MSRT == "5" && 
  PT05M011.PC-FCTY-SEND-IND != "Y")
    PT05W00.PT05WERF = "Y";
    converseLib.validationFailed(130); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "035";
    set PT05M011.PT05MSRT cursor, bold;
    return;
  else
    set PT05M011.PT05MSRT initialAttributes;
  end


   /* ------------------------------------------------------------*/
   /* validate report print indicator*/
   /* ------------------------------------------------------------*/

  if (PT05M011.PT05MIND != "Y"
   && PT05M011.PT05MIND != "N")
    PT05W00.PT05WERF = "Y";
    converseLib.validationFailed(116); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "035";
    set PT05M011.PT05MIND cursor, bold;
    return;
  else
    set PT05M011.PT05MIND initialAttributes;
  end


   /* ------------------------------------------------------------*/
   /* validate user name*/
   /* ------------------------------------------------------------*/

  if (PT05M011.PT05MNAM == " ")
    PT05W00.PT05WERF = "Y";
    converseLib.validationFailed(116); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "035";
    set PT05M011.PT05MNAM cursor, bold;
    return;
  else
    set PT05M011.PT05MNAM initialAttributes;
  end


   /* ------------------------------------------------------------*/
   /* validate lines to send to factory flag*/
   /* ------------------------------------------------------------*/

  if (PT05M011.PC-FCTY-SEND-IND != "Y"
   && PT05M011.PC-FCTY-SEND-IND != "N"
   && PT05M011.PC-FCTY-SEND-IND != "*")
    PT05W00.PT05WERF = "Y";
    converseLib.validationFailed(116); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "035";
    set PT05M011.PC-FCTY-SEND-IND cursor, bold;
    return;
  else
    set PT05M011.PC-FCTY-SEND-IND initialAttributes;
  end
   /* ------------------------------------------------------------*/
   /* validate buy month range*/
   /* ------------------------------------------------------------*/

  if (PT05M011.PT05MPBD == 0)
    set PT05M011.PT05MPBD initialAttributes;
  else
    set TA2REC empty;
    TA2REC.TA2GRTYP = "G";
    PT05W00.PT05WBUY = PT05M011.PT05MPBD;
    PT05W00.PT05WDAY = "01";
    TA2REC.TA2GRGG = PT05W00.PT05WDAT;
    PT05S02();

    if (TA2REC.TA2RTNCD != 0)
      PT05W00.PT05WERF = "Y";
      converseLib.validationFailed(106); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "035";
      set PT05M011.PT05MPBD cursor, bold;
      return;
    else
      set PT05M011.PT05MPBD initialAttributes;
    end
  end


  if (PT05M011.PT05MPED == 0)
    set PT05M011.PT05MPED initialAttributes;
  else
    set TA2REC empty;
    TA2REC.TA2GRTYP = "G";
    PT05W00.PT05WBUY = PT05M011.PT05MPED;
    PT05W00.PT05WDAY = "01";
    TA2REC.TA2GRGG = PT05W00.PT05WDAT;
    PT05S02();

    if (TA2REC.TA2RTNCD != 0)
      PT05W00.PT05WERF = "Y";
      converseLib.validationFailed(106); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "035";
      set PT05M011.PT05MPED cursor, bold;
      return;
    else
      set PT05M011.PT05MPED initialAttributes;
    end
  end


  if (PT05M011.PT05MPBD > PT05M011.PT05MPED)
    PT05W00.PT05WERF = "Y";
    converseLib.validationFailed(106); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "035";
    set PT05M011.PT05MPBD cursor, bold;
    set PT05M011.PT05MPED bold;
    return;
  else
    set PT05M011.PT05MPBD initialAttributes;
    set PT05M011.PT05MPED initialAttributes;
  end


   /* ------------------------------------------------------------*/
   /* validate customer xref*/
   /* ------------------------------------------------------------*/

  if (PT05M011.PC2CUXID[5] != "     ")
    PT05W00.PC2CUXID = PT05M011.PC2CUXID[5];
    if (PT05W00.PT05WCH2 == "  "
     || PT05W00.PT05WCH2 == "**")
      PT05W00.PT05WCH2 = "__";
    end
    set PC2REC empty;
    PC2REC.XGPCD = "02"; /* Indicate missing or invalid*/
    PC2REC.PC2CUXID = PT05W00.PC2CUXID;
    PCYREC.PCYFUNC = "SL";

    PT05S01();

    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == -811)
      set PT05M011.PC2CUXID[5] initialAttributes;
    else
      PT05W00.PT05WERF = "Y";
      converseLib.validationFailed(118); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "035";
      set PT05M011.PC2CUXID[5] cursor, bold;
      return;
    end
  end


  if (PT05M011.PC2CUXID[4] != "     ")
    PT05W00.PC2CUXID = PT05M011.PC2CUXID[4];
    if (PT05W00.PT05WCH2 == "  "
     || PT05W00.PT05WCH2 == "**")
      PT05W00.PT05WCH2 = "__";
    end
    set PC2REC empty;
    PC2REC.XGPCD = "02"; /* Indicate missing or invalid*/
    PC2REC.PC2CUXID = PT05W00.PC2CUXID;
    PCYREC.PCYFUNC = "SL";

    PT05S01();

    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == -811)
      set PT05M011.PC2CUXID[4] initialAttributes;
    else
      PT05W00.PT05WERF = "Y";
      converseLib.validationFailed(118); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "035";
      set PT05M011.PC2CUXID[4] cursor, bold;
      return;
    end
  end


  if (PT05M011.PC2CUXID[3] != "     ")
    PT05W00.PC2CUXID = PT05M011.PC2CUXID[3];
    if (PT05W00.PT05WCH2 == "  "
     || PT05W00.PT05WCH2 == "**")
      PT05W00.PT05WCH2 = "__";
    end
    set PC2REC empty;
    PC2REC.XGPCD = "02"; /* Indicate missing or invalid*/
    PC2REC.PC2CUXID = PT05W00.PC2CUXID;
    PCYREC.PCYFUNC = "SL";

    PT05S01();

    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == -811)
      set PT05M011.PC2CUXID[3] initialAttributes;
    else
      PT05W00.PT05WERF = "Y";
      converseLib.validationFailed(118); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "035";
      set PT05M011.PC2CUXID[3] cursor, bold;
      return;
    end
  end


  if (PT05M011.PC2CUXID[2] != "     ")
    PT05W00.PC2CUXID = PT05M011.PC2CUXID[2];
    if (PT05W00.PT05WCH2 == "  "
     || PT05W00.PT05WCH2 == "**")
      PT05W00.PT05WCH2 = "__";
    end
    set PC2REC empty;
    PC2REC.XGPCD = "02"; /* Indicate missing or invalid*/
    PC2REC.PC2CUXID = PT05W00.PC2CUXID;
    PCYREC.PCYFUNC = "SL";

    PT05S01();

    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == -811)
      set PT05M011.PC2CUXID[2] initialAttributes;
    else
      PT05W00.PT05WERF = "Y";
      converseLib.validationFailed(118); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "035";
      set PT05M011.PC2CUXID[2] cursor, bold;
      return;
    end
  end


  if (PT05M011.PC2CUXID[1] != "     ")
    PT05W00.PC2CUXID = PT05M011.PC2CUXID[1];
    if (PT05W00.PT05WCH2 == "  "
     || PT05W00.PT05WCH2 == "**")
      PT05W00.PT05WCH2 = "__";
    end
    set PC2REC empty;
    PC2REC.XGPCD = "02"; /* Indicate missing or invalid*/
    PC2REC.PC2CUXID = PT05W00.PC2CUXID;
    PCYREC.PCYFUNC = "SL";

    PT05S01();

    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == -811)
      set PT05M011.PC2CUXID[1] initialAttributes;
    else
      PT05W00.PT05WERF = "Y";
      converseLib.validationFailed(118); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "035";
      set PT05M011.PC2CUXID[1] cursor, bold;
      return;
    end
  end


   /* ------------------------------------------------------------*/
   /* validate direct ship flag*/
   /* ------------------------------------------------------------*/

  if (PT05M011.PT05MDRS != "Y"
   && PT05M011.PT05MDRS != "N"
   && PT05M011.PT05MDRS != "*")
    PT05W00.PT05WERF = "Y";
    converseLib.validationFailed(116); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "035";
    set PT05M011.PT05MDRS cursor, bold;
    return;
  else
    set PT05M011.PT05MDRS initialAttributes;
  end


   /* ------------------------------------------------------------*/
   /* validate warehouse code*/
   /* ------------------------------------------------------------*/

  if (PT05M011.XWHCD != "  ")
    if (PT05M011.XWHCD in XWHTBL.XWHCD)
    else
      converseLib.validationFailed(036); /* Indicate missing or invalid*/
      set PT05M011.XWHCD cursor, bold;
      return;
    end
  end


   /* ------------------------------------------------------------*/
   /* validate style number*/
   /* ------------------------------------------------------------*/
  if (PT05M011.SY1STNBR != " "
   && PT05M011.SY1STNBR != "******")

    set PG2REC empty;

    PG2REC.XDMCD = "00";
    PG2REC.SY1STNBR = PT05M011.SY1STNBR;
    PG2REC.SYBSTGNB = PT05M011.SY1STNBR;
    if (PT05M011.SY2CLRID != "   "
     && PT05M011.SY2CLRID != "***")
      PG2REC.SY2CLRID = PT05M011.SY2CLRID;
      PT05S21(); /* validate style/color*/
    else
      PT05M011.SY2CLRID = "***";
      PT05S22(); /* validate style existence*/
    end

    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(95);
      PT05W00.PT05WERF = "Y";
      PTWREC.XXXMODID = "035";
      set PT05M011.SY1STNBR cursor, bold;
      set PT05M011.SY2CLRID bold;
    else
      set PT05M011.SY1STNBR initialAttributes;
      set PT05M011.SY2CLRID initialAttributes;
    end

  else
    PT05M011.SY1STNBR = "******";
    PT05M011.SY2CLRID = "***";
    set PT05M011.SY1STNBR initialAttributes;
    set PT05M011.SY2CLRID initialAttributes;

  end

  if (PT05W00.PT05WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate country code*/
   /* ------------------------------------------------------------*/

  if (PT05M011.XCTCD != "    "
   && PT05M011.XCTCD != "****")
    if (PT05M011.XCTCD == "CHIN"
     || PT05M011.XCTCD == "INDO"
     || PT05M011.XCTCD == "KORE"
     || PT05M011.XCTCD == "TAIW"
     || PT05M011.XCTCD == "THAI"
     || PT05M011.XCTCD == "VIET"
     || PT05M011.XCTCD == "PHIL"
     || PT05M011.XCTCD == "ITAL")
      set PT05M011.XCTCD initialAttributes;
    else
      PT05W00.PT05WERF = "Y";
      converseLib.validationFailed(96);
      PTWREC.XXXMODID = "035";
      set PT05M011.XCTCD cursor, bold;
      return;
    end
  else
    set PT05M011.XCTCD initialAttributes;
    PT05M011.XCTCD = "****";

  end

   /* ------------------------------------------------------------*/
   /* validate factory code*/
   /* ------------------------------------------------------------*/

  if (PT05M011.FY1FCTYC != "    "
   && PT05M011.FY1FCTYC != "****")
    set FY1REC empty;
    FY1REC.FY1FCTYC = PT05M011.FY1FCTYC;
    FY1REC.XGPCD = "02";

    try
      call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes};
    end
    if (SQLCA.VAGen_SQLCODE != 0)
      set PT05M011.FY1FCTYC cursor, bold; /* Highlight*/
      PT05W00.PT05WERF = "Y";
      converseLib.validationFailed(84); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "035";
      return;
    else
      set PT05M011.FY1FCTYC initialAttributes;
    end
  else
    set PT05M011.FY1FCTYC initialAttributes;
    PT05M011.FY1FCTYC = "****";
  end

  if (PT05W00.PT05WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate scheduler code*/
   /* ------------------------------------------------------------*/

  if (PT05M011.PG1SC4CD != "  "
   && PT05M011.PG1SC4CD != "**")
    set PG1REC empty;
    PG1REC.PG1SC4CD = PT05M011.PG1SC4CD;
    PG1REC.PG1FCTCD = "  ";
    PG1REC.XGPCD = "02";

    try
      call "IO1200" ("S ", SQLCA, PG1REC) {isNoRefresh = yes};
    end
    if (SQLCA.VAGen_SQLCODE != 0)
      set PT05M011.PG1SC4CD cursor, bold; /* Highlight*/
      PT05W00.PT05WERF = "Y";
      converseLib.validationFailed(87); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "035";
      return;
    end
  end



end // end PT05035

// Process valid input request
Function PT05036()
   /* -----------------------------------------------------------*/
   /* if errors present dont submit job*/
   /* -----------------------------------------------------------*/

  if (PT05W00.PT05WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* Save data*/
   /* ------------------------------------------------------------*/
   /* *** CHANGES DONE BY RRENUK BEGIN ****/
  set PT05W03 empty;
  PT05W03.PT05XURDEST = PT05M011.XURDEST;
  PT05W03.PT05XRODESC = PT05M011.XRODESC;
  PT05W03.PT05XURBLDID = PT05M011.XURBLDID;
  PT05W03.PT05XURCOPY = PT05M011.XURCOPY;
  PT05W03.PT05XURUSRNM = PT05M011.XURUSRNM;
  COMMAREA.CA-USER-WORKAREA-2K-B = "      ";
  COMMAREA.CA-USER-WORKAREA-2K-B = PT05W03.PT05W03REC;
   /* *** CHANGES DONE BY RRENUK END   ****/

  PTWREC.PG1SC4CD = PT05M011.PG1SC4CD;
  PTWREC.XCTCD = PT05M011.XCTCD;
  PTWREC.FY1FCTYC = PT05M011.FY1FCTYC;
  PTWREC.SY1STNBR = PT05M011.SY1STNBR;
  PTWREC.SY2CLRID = PT05M011.SY2CLRID;
  PTWREC.XDMCD = PT05M011.XDMCD;
  PTWREC.XWHCD = PT05M011.XWHCD;
  PTWREC.PT05MDRS = PT05M011.PT05MDRS;
  move PT05M011.PC2CUXID to PTWREC.PC2CUXID[1] for all;
  PTWREC.PT05MPBD = PT05M011.PT05MPBD;
  PTWREC.PT05MPED = PT05M011.PT05MPED;
  PTWREC.PT05POTP = PT05M011.PT05POTP;
  PTWREC.PC-FCTY-SEND-IND = PT05M011.PC-FCTY-SEND-IND;
  PTWREC.PT05WPGM = "PT487D";
  PTWREC.PT05MNAM = PT05M011.PT05MNAM;
  PTWREC.PT05MIND = PT05M011.PT05MIND;
  PTWREC.PT05MSRT = PT05M011.PT05MSRT;
  move PT05W00.PT05MSEL to PTWREC.PT05MSEL[1] for all;

  if (PT05M011.PT05MIND == "Y") /* Report print wanted*/
    /* ------------------------------------------------------------*/
    /* Format parameters into subroutine work area*/
    /* ------------------------------------------------------------*/

    PT05W01.PG1SC4CD = PT05M011.PG1SC4CD;
    PT05W01.XCTCD = PT05M011.XCTCD;
    PT05W01.FY1FCTYC = PT05M011.FY1FCTYC;
    PT05W01.SY1STNBR = PT05M011.SY1STNBR;
    PT05W01.SY2CLRID = PT05M011.SY2CLRID;
    PT05W01.XDMCD = PT05M011.XDMCD;
    PT05W01.XWHCD = PT05M011.XWHCD;
    PT05W01.PT05MDRS = PT05M011.PT05MDRS;
    PT05W01.PT05MCU1 = PT05M011.PC2CUXID[1];
    PT05W01.PT05MCU2 = PT05M011.PC2CUXID[2];
    PT05W01.PT05MCU3 = PT05M011.PC2CUXID[3];
    PT05W01.PT05MCU4 = PT05M011.PC2CUXID[4];
    PT05W01.PT05MCU5 = PT05M011.PC2CUXID[5];
    PT05W01.PT05MPBD = PT05M011.PT05MPBD;
    PT05W01.PT05MPED = PT05M011.PT05MPED;
    PT05W01.PT05POTP = PT05M011.PT05POTP;
    PT05W01.PC-FCTY-SEND-IND = PT05M011.PC-FCTY-SEND-IND;
    PT05W01.PT05WPGM = "PT487D";
    PT05W01.PT05MNAM = PT05M011.PT05MNAM;
    PT05W01.PT05MIND = PT05M011.PT05MIND;
    PT05W01.PT05MSRT = PT05M011.PT05MSRT;

    /* ------------------------------------------------------------*/
    /* Initialize the work area and indexes to be used.*/
    /* ------------------------------------------------------------*/

    move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

    TA6REC.TA6INDEX = 1; /* Output array index*/
    PT05W00.PT05WIXT = 1;

    /* ------------------------------------------------------------*/
    /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* if on production system*/
      PT05037(); /* format production jcl*/
    else
      PT05038(); /* format test jcl*/
    end

    /* ------------------------------------------------------------*/
    /* Submit the JCL and parameters for batch execution.*/
    /* ------------------------------------------------------------*/

    TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
    TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

    XPTA0P(); /* Submit JCL for background job*/

    /* ------------------------------------------------------------*/
    /* If job submit unsuccessful, indicate unexpected error has occurred.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode != "00000000" /* Call not successful*/
     || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

      converseLib.validationFailed(10); /* Unexpected error occurred*/

      return; /* Exit to display map*/
    end



  end
   /* ------------------------------------------------------------*/
   /* If submit was successful, transfer to PT06.*/
   /* ------------------------------------------------------------*/

  PT05W00.PT05MSEL[3] = "*";
  COMMAREA.CATOAP = "PT06"; /**/

   /* ------------------------------------------------------------*/
   /* transfer control to another application*/
   /* ------------------------------------------------------------*/
  XSPT001();

   /* ------------------------------------------------------------*/
   /* if request failed, display the return error message*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = " "; /**/
  exit stack;

end // end PT05036

// Process valid production jcl
Function PT05037()
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT05T03.TARTYPE[PT05WIXT] == "W")
      if (PT05M011.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT71 FORMS=PT71,COPIES=1,DEST=RMT00";
        TA6REC.TARTYPE[TA6INDEX] = " ";
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT71 FORMS=PT71,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    else

      if (PT05T03.TARJCL[PT05WIXT] == "===INSERT PARM===")
        TA6REC.TARJCL[TA6INDEX] = PT05W01.TARJCL;
        TA6REC.TARTYPE[TA6INDEX] = " ";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      else

        if (PT05T03.TARJCL[PT05WIXT] == "===FILE01===")
          if (PT05M011.XURDEST == "LOCAL") /* DESTINATION LAZER*/
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT71)'";
            TA6REC.TARTYPE[TA6INDEX] = " ";
          else
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT71)'";
            TA6REC.TARTYPE[TA6INDEX] = " ";
          end
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        else


            /* ------------------------------------------------------------*/
            /* Format the Job Control Language statement from the table.*/

            /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = PT05T03.TARJCL[PT05WIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = PT05T03.TARTYPE[PT05WIXT];
                                   /* Type*/
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        end
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT05T03.TARJCL[PT05WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT05W00.PT05WIXT = PT05W00.PT05WIXT + 1; /* Input table index*/

    end

  end
end // end PT05037

// Process valid test jcl
Function PT05038()
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT05T13.TARJCL[PT05WIXT] == "===OUTPUT===")
      if (PT05M011.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT71 FORMS=PT71,COPIES=1,DEST=RMT00";
        TA6REC.TARTYPE[TA6INDEX] = " ";
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT71 FORMS=PT71,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    else

      if (PT05T13.TARJCL[PT05WIXT] == "===INSERT PARM===")
        TA6REC.TARJCL[TA6INDEX] = PT05W01.TARJCL;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      else

        if (PT05T13.TARJCL[PT05WIXT] == "===FILE01===")
          if (PT05M011.XURDEST == "LOCAL") /* destination lazer*/
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(2,,PT71)'";
          else
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(T,,PT71)'";
          end
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        else




            /* ------------------------------------------------------------*/
            /* Format the Job Control Language statement from the table.*/

            /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = PT05T13.TARJCL[PT05WIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = PT05T13.TARTYPE[PT05WIXT];
                                   /* Type*/
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        end
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT05T13.TARJCL[PT05WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT05W00.PT05WIXT = PT05W00.PT05WIXT + 1; /* Input table index*/

    end
  end

end // end PT05038

// ftwr expedite send to factory
Function PT05040()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If first time thru, Obtain default data.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

   /* F PT05W00.PT05WRD4 = 'Y'            /* if switch is on*/
  if (converseVar.validationMsgNum == 0) /* and no prefious errors*/
    PT05041(); /* Obtain default data*/
    /* MOVE 'N' TO PT05W00.PT05WRD4;      /* set switch off*/
  end

  PT05042(); /* Format and display the map*/

  PT05043(); /* Check attention identifier*/

  PT05044(); /* Reset fields to normal intensity*/

  PT05045(); /* Verify the data that was entered*/

  PT05046(); /* Process valid input request*/


end // end PT05040

// Default screen fields
Function PT05041()

  set PT05M014.PT05MCTY normal;

  PT05M014.PT05MIND = "N"; /* report indicator*/
  PT05M014.PT05MNAM = TA6REC.XURUSRID; /* user name*/

end // end PT05041

// Format and display the map
Function PT05042()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    PT05M014.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  PT05M014.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/


   /* ***** C H A N G E S ********** B E G I N ********** H E R E ***********/

   /* 09/15/99 - changes for default printer settings*/

  if (PT05W00.PT05-PRINTER-SET != "Y") /* if printer set sw = '' or 'N'*/
    PT05W00.PT05-PRINTER-SET = "N"; /* set the printer set sw to 'N'*/
  end

   /* this below mentioned block is used for -*/
   /* (1) When re-entering from PT06 application and the printer settings*/
   /* are changed using the first option of PT05 application, then,*/
   /* New printer setting should be effective*/
   /* (2) When re-entering from PT06 application and the printer settings*/
   /* are NOT changed using the first option of PT05 application, then,*/
   /* the previous printer settings should be used, (ie), the printer*/
   /* settings used before exiting to PT06 application*/
   /* (3) The printer settings which are set up using the first option in*/
   /* PT05 application should be effective thoroughout PT05 application*/
   /* till it exits to PT06 application or exits from PT05 application*/
   /* (4) When the printer settings is not made, then default printers*/
   /* should display.*/

  if (PT05W00.PT05-PRINTER-SET == "Y")
   /* this block is used when printer settings changed*/
   /* MOVE 'N' TO PT05W00.PT05-PRINTER-SET;*/
    PT05M014.XURDEST = TA6REC.XURDEST; /* Print destination*/
    PT05M014.XRODESC = TA6REC.XRODESC; /* Printer description*/
    PT05M014.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
    PT05M014.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
    PT05M014.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
  else
    if (COMMAREA.CAFROMAP == "PT06")
   /* this bloc is used when reentered from PT06*/
      set PT05W03 empty;
      PT05W03.PT05W03REC = COMMAREA.CA-USER-WORKAREA-2K-B;
      PT05M014.XURDEST = PT05W03.PT05XURDEST;
      PT05M014.XRODESC = PT05W03.PT05XRODESC;
      PT05M014.XURUSRNM = PT05W03.PT05XURUSRNM;
      PT05M014.XURBLDID = PT05W03.PT05XURBLDID;
      PT05M014.XURCOPY = PT05W03.PT05XURCOPY;
    else
   /* this bloc is used when printer settings are not entered*/
      PT05M014.XURDEST = TA6REC.XURDEST; /* Print destination*/
      PT05M014.XRODESC = TA6REC.XRODESC; /* Printer description*/
      PT05M014.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
      PT05M014.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
      PT05M014.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
    end
  end

   /* MOVE TA6REC.XURDEST TO PT05M014.XURDEST; /* Print destination*/
   /* MOVE TA6REC.XRODESC TO PT05M014.XRODESC; /* Printer description*/
   /* MOVE TA6REC.XURUSRNM TO PT05M014.XURUSRNM; /* Report recipient*/
   /* MOVE TA6REC.XURBLDID TO PT05M014.XURBLDID; /* NIKE building*/
   /* MOVE TA6REC.XURCOPY TO PT05M014.XURCOPY; /* Number of copies*/

   /* ***** C H A N G E S ********** E N D ************** H E R E ***********/


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT05M014.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT05M014.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT05M014 alarm; /* Indicate sound alarm*/

  end

  converse PT05M014 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PT05042

// Check attention identifier
Function PT05043()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PT05W00.PT05MSEL[5] = "C"; /* Indicate selection cancelled*/

    set PT05M014 initial; /* m002 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FASTPATH was requested, transfer to the application*/
   /* ------------------------------------------------------------*/

  if (PT05M014.CATOAP > " ") /* FASTPATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (PT05M014.CATOAP == "PT06") /* Cannot fast past to PT06*/
        PTWREC.XXXMSGNO = 145; /* Indicate PF key not valid*/
        PTWREC.XXXMODID = "043";
        exit stack; /* exit to display map*/
      end

      COMMAREA.CATOAP = PT05M014.CATOAP;
      XSPT001(); /* Exit to another application*/
      set PT05M014.CATOAP cursor, bold;
    else
      PTWREC.XXXMSGNO = 18; /* Indicate PF key not valid*/
      PTWREC.XXXMODID = "043";

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PT05W00.PT05MSEL[5] = " "; /* Indicate nothing happened*/
    COMMAREA.CAMSG = "NO ACTION TAKEN ON PREVIOUS SCREEN";

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "023"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PT05043

// Reset highlighted fields
Function PT05044()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to AUTOSKIP intensity.*/
   /* ------------------------------------------------------------*/

  set PT05M014.PT05MCTY normal; /* all countries*/
  set PT05M014.PT05MNAM normal; /* preparer name*/
  set PT05M014.PT05MIND normal; /* report printed ind*/

end // end PT05044

// Verify the entered data
Function PT05045()
   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

  PT05W00.PT05WERF = "N";

   /* ------------------------------------------------------------*/
   /* validate report print indicator*/
   /* ------------------------------------------------------------*/

  if (PT05M014.PT05MIND != "Y"
   && PT05M014.PT05MIND != "N")
    PT05W00.PT05WERF = "Y";
    converseLib.validationFailed(116); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "025";
    set PT05M014.PT05MIND cursor, bold;
  else
    set PT05M014.PT05MIND initialAttributes;
  end

  if (PT05W00.PT05WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate user name*/
   /* ------------------------------------------------------------*/

  if (PT05M014.PT05MNAM == " ")
    PT05W00.PT05WERF = "Y";
    converseLib.validationFailed(116); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "025";
    set PT05M014.PT05MNAM cursor, bold;
  else
    set PT05M014.PT05MNAM initialAttributes;
  end

  if (PT05W00.PT05WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate all country select*/
   /* ------------------------------------------------------------*/

  if (PT05M014.PT05MCTY != "S")
    PT05W00.PT05WERF = "Y";
    converseLib.validationFailed(13); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "025";
    set PT05M014.PT05MCTY cursor, bold;
  else
    set PT05M014.PT05MCTY normal;
  end

  if (PT05W00.PT05WERF == "Y")
    return;
  end

end // end PT05045

// Process valid input request
Function PT05046()
   /* ------------------------------------------------------------*/
   /* if errors present dont submit job*/
   /* ------------------------------------------------------------*/

  if (PT05W00.PT05WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/
  PT05W00.PT05WIXT = 1;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* if on production system*/
    PT05047(); /* format production jcl*/
  else
    PT05048(); /* format test jcl*/
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "046"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PT05W00.PT05MSEL[5] = "*"; /* Indicate function completed*/
    COMMAREA.CAMSG = "SEND TO FCTY FILE CREATION - WAS SUBMITTED";

    set PT05M014 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end PT05046

// Process valid production jcl
Function PT05047()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  set PT05W02 empty;

  PT05W02.PT05WPGM = "PT485D";
  PT05W02.PT05MNAM = PT05M014.PT05MNAM;
  PT05W02.PT05WCT1 = "CHIN";
  PT05W02.PT05WCT2 = "INDO";
  PT05W02.PT05WCT3 = "KORE";
  PT05W02.PT05WCT4 = "TAIW";
  PT05W02.PT05WCT5 = "THAI";
  PT05W02.PT05WCT6 = "VIET";
  PT05W02.PT05WCT7 = "PHIL";
  PT05W02.PT05WCT8 = "ITAL";

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT05T04.TARTYPE[PT05WIXT] == "1")
      if (PT05M014.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT51 FORMS=PT51,COPIES=1,DEST=RMT00";
        TA6REC.TARTYPE[TA6INDEX] = " ";
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT51 FORMS=PT51,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    else

      if (PT05T04.TARTYPE[PT05WIXT] == "2")
        if (PT05M014.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT52 FORMS=PT52,COPIES=1,DEST=RMT00";
          TA6REC.TARTYPE[TA6INDEX] = " ";
        else
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT52 FORMS=PT52,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
        end
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      else

        if (PT05T04.TARTYPE[PT05WIXT] == "5")
          TA6REC.TARJCL[TA6INDEX] = PT05W02.TARJCL;
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        else

          if (PT05T04.TARTYPE[PT05WIXT] == "6")
            if (PT05M014.PT05MIND == "Y")
              PT0504A();
            end
          else

            if (PT05T04.TARTYPE[PT05WIXT] == "7")
              if (PT05M014.XURDEST == "LOCAL") /* destination lazer*/
                TA6REC.TARJCL[TA6INDEX] = "//       FILE01='(N,,PT52)'";
                TA6REC.TARTYPE[TA6INDEX] = " ";
              else
                TA6REC.TARJCL[TA6INDEX] = "//       FILE01='(P,,PT52)'";
                TA6REC.TARTYPE[TA6INDEX] = " ";
              end
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* output array index*/
            else



            /* ------------------------------------------------------------*/
                                  /* Format the Job Control Language*/
                                   /* statement from the table.*/

            /* ------------------------------------------------------------*/

              TA6REC.TARJCL[TA6INDEX] = PT05T04.TARJCL[PT05WIXT];
                                   /* JCL*/
              TA6REC.TARTYPE[TA6INDEX] = PT05T04.TARTYPE[PT05WIXT];
                                   /* Type*/
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

         /* END;*/
            end
          end
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT05T04.TARJCL[PT05WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT05W00.PT05WIXT = PT05W00.PT05WIXT + 1; /* Input table index*/

    end

  end
end // end PT05047

// Process valid test jcl
Function PT05048()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  set PT05W02 empty;

  PT05W02.PT05WPGM = "PT485D";
  PT05W02.PT05MNAM = PT05M014.PT05MNAM;
  PT05W02.PT05WCT1 = "CHIN";
  PT05W02.PT05WCT2 = "INDO";
  PT05W02.PT05WCT3 = "KORE";
  PT05W02.PT05WCT4 = "TAIW";
  PT05W02.PT05WCT5 = "THAI";
  PT05W02.PT05WCT6 = "VIET";
  PT05W02.PT05WCT7 = "PHIL";
  PT05W02.PT05WCT8 = "ITAL";

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT05T14.TARTYPE[PT05WIXT] == "1")
      if (PT05M014.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT51 FORMS=PT51,COPIES=1,DEST=RMT00";
        TA6REC.TARTYPE[TA6INDEX] = " ";
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT51 FORMS=PT51,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    else

      if (PT05T14.TARTYPE[PT05WIXT] == "2")
        if (PT05M014.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT52 FORMS=PT52,COPIES=1,DEST=RMT00";
          TA6REC.TARTYPE[TA6INDEX] = " ";
        else
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT52 FORMS=PT52,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
        end
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      else

        if (PT05T14.TARTYPE[PT05WIXT] == "5")
          TA6REC.TARJCL[TA6INDEX] = PT05W02.TARJCL;
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        else

          if (PT05T14.TARTYPE[PT05WIXT] == "6")
            if (PT05M014.PT05MIND == "Y")
              PT0504B();
            end
          else

            if (PT05T14.TARTYPE[PT05WIXT] == "7")
              if (PT05M014.XURDEST == "LOCAL") /* destination lazer*/
                TA6REC.TARJCL[TA6INDEX] = "//       FILE01='(2,,PT52)'";
                TA6REC.TARTYPE[TA6INDEX] = " ";
              else
                TA6REC.TARJCL[TA6INDEX] = "//       FILE01='(T,,PT52)'";
                TA6REC.TARTYPE[TA6INDEX] = " ";
              end
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
            else

        /* IF PT05T14.TARTYPE(PT05WIXT) EQ '8';*/
        /* PERFORM PT0504O;   /* for china*/
        /* PERFORM PT0504P;   /* for indonesia*/
        /* PERFORM PT0504Q;   /* for korea*/
        /* PERFORM PT0504R;   /* for taiwan*/
        /* PERFORM PT0504S;   /* for thailand*/
        /* PERFORM PT0504T;   /* for vietnam*/
        /* ELSE;*/

            /* ------------------------------------------------------------*/
                                  /* Format the Job Control Language*/
                                   /* statement from the table.*/

            /* ------------------------------------------------------------*/

              TA6REC.TARJCL[TA6INDEX] = PT05T14.TARJCL[PT05WIXT];
                                   /* JCL*/
              TA6REC.TARTYPE[TA6INDEX] = PT05T14.TARTYPE[PT05WIXT];
                                   /* Type*/
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

          /* END;*/
            end
          end
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT05T14.TARJCL[PT05WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT05W00.PT05WIXT = PT05W00.PT05WIXT + 1; /* Input table index*/

    end

  end
end // end PT05048

// Process valid prod request
Function PT0504A()
  PT05W00.PT05WIDX = 1;

  while (PT05W00.PT05WIDX > 0) /* ; Until end of table*/
    if (PT05T4A.TARJCL[PT05WIDX] == "===FILE01===")
      if (PT05M014.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT51)'";
      else
        TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT51)'";
      end
      TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
    else
      TA6REC.TARJCL[TA6INDEX] = PT05T4A.TARJCL[PT05WIDX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT05T4A.TARTYPE[PT05WIDX]; /* Type*/
    end
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT05W00.PT05WIDX = PT05W00.PT05WIDX + 1; /* Input table index*/
    if (PT05T4A.TARJCL[PT05WIDX] == "/*EOJ")
      PT05W00.PT05WIDX = 0; /* force end of file*/
    end
  end

end // end PT0504A

// Process valid test  request
Function PT0504B()
  PT05W00.PT05WIDX = 1;

  while (PT05W00.PT05WIDX > 0) /* ; Until end of table*/
    if (PT05T4B.TARJCL[PT05WIDX] == "===FILE01===")
      if (PT05M014.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(2,,PT51)'";
      else
        TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(T,,PT51)'";
      end
    else
      TA6REC.TARJCL[TA6INDEX] = PT05T4B.TARJCL[PT05WIDX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT05T4B.TARTYPE[PT05WIDX]; /* Type*/
    end
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT05W00.PT05WIDX = PT05W00.PT05WIDX + 1; /* Input table index*/
    if (PT05T4B.TARJCL[PT05WIDX] == "/*EOJ")
      PT05W00.PT05WIDX = 0; /* force end of file*/
    end
  end

end // end PT0504B

// ftwr expedite factory comment
Function PT05050()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If first time thru, Obtain default data.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

   /* F PT05W00.PT05WRD5 = 'Y'            /* if switch is on*/
  if (converseVar.validationMsgNum == 0) /* and no previous errors*/
    PT05051(); /* Obtain default data*/
    /* MOVE 'N' TO PT05W00.PT05WRD5;      /* set switch off*/
  end

  PT05052(); /* Format and display the map*/

  PT05053(); /* Check attention identifier*/

  PT05054(); /* Reset fields to normal intensity*/

  PT05055(); /* Verify the data that was entered*/

  PT05056(); /* Process valid input request*/


end // end PT05050

// Default screen fields
Function PT05051()

  set PT05M015.PT05MCTY normal;

  PT05M015.PT05MIND = "N"; /* report indicator*/
  PT05M015.PT05MNAM = TA6REC.XURUSRID; /* user name*/

end // end PT05051

// Format and display the map
Function PT05052()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    PT05M015.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  PT05M015.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/


   /* ******* C H A N G E S ******* B E G I N ****** H E R E ****************/

   /* 09/15/99 - changes for default printer settings*/

  if (PT05W00.PT05-PRINTER-SET != "Y") /* if printer set sw = '' or 'N'*/
    PT05W00.PT05-PRINTER-SET = "N"; /* set the switch to 'N'*/
  end

   /* this below mentioned block is used for -*/
   /* (1) When re-entering from PT06 application and the printer settings*/
   /* are changed using the first option of PT05 application, then,*/
   /* New printer setting should be effective*/
   /* (2) When re-entering from PT06 application and the printer settings*/
   /* are NOT changed using the first option of PT05 application, then,*/
   /* the previous printer settings should be used, (ie), the printer*/
   /* settings used before exiting to PT06 application*/
   /* (3) The printer settings which are set up using the first option in*/
   /* PT05 application should be effective thoroughout PT05 application*/
   /* till it exits to PT06 application or exits from PT05 application*/
   /* (4) When the printer settings is not made, then default printers*/
   /* should display.*/

  if (PT05W00.PT05-PRINTER-SET == "Y")
   /* this block is used when printer settings changed*/
   /* MOVE 'N' TO PT05W00.PT05-PRINTER-SET;*/
    PT05M015.XURDEST = TA6REC.XURDEST; /* Print destination*/
    PT05M015.XRODESC = TA6REC.XRODESC; /* Printer description*/
    PT05M015.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
    PT05M015.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
    PT05M015.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
  else
    if (COMMAREA.CAFROMAP == "PT06")
   /* this bloc is used when reentered from PT06*/
      set PT05W03 empty;
      PT05W03.PT05W03REC = COMMAREA.CA-USER-WORKAREA-2K-B;
      PT05M015.XURDEST = PT05W03.PT05XURDEST;
      PT05M015.XRODESC = PT05W03.PT05XRODESC;
      PT05M015.XURUSRNM = PT05W03.PT05XURUSRNM;
      PT05M015.XURBLDID = PT05W03.PT05XURBLDID;
      PT05M015.XURCOPY = PT05W03.PT05XURCOPY;
    else
   /* this bloc is used when printer settings are not entered*/
      PT05M015.XURDEST = TA6REC.XURDEST; /* Print destination*/
      PT05M015.XRODESC = TA6REC.XRODESC; /* Printer description*/
      PT05M015.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
      PT05M015.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
      PT05M015.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
    end
  end

   /* MOVE TA6REC.XURDEST TO PT05M015.XURDEST; /* Print destination*/
   /* MOVE TA6REC.XRODESC TO PT05M015.XRODESC; /* Printer description*/
   /* MOVE TA6REC.XURUSRNM TO PT05M015.XURUSRNM; /* Report recipient*/
   /* MOVE TA6REC.XURBLDID TO PT05M015.XURBLDID; /* NIKE building*/
   /* MOVE TA6REC.XURCOPY TO PT05M015.XURCOPY; /* Number of copies*/

   /* ******* C H A N G E S ******* E N D ********** H E R E ****************/


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT05M015.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT05M015.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT05M015 alarm; /* Indicate sound alarm*/

  end

  converse PT05M015 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PT05052

// Check attention identifier
Function PT05053()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PT05W00.PT05MSEL[6] = "C"; /* Indicate selection cancelled*/

    set PT05M015 initial; /* m002 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FASTPATH was requested, transfer to the application*/
   /* ------------------------------------------------------------*/

  if (PT05M015.CATOAP > " ") /* FASTPATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (PT05M015.CATOAP == "PT06") /* Cannot fast path to PT06*/
        PTWREC.XXXMSGNO = 145; /* Indicate PF key not valid*/
        PTWREC.XXXMODID = "053";
        exit stack; /* Exit to display map*/
      end

      COMMAREA.CATOAP = PT05M015.CATOAP;
      XSPT001(); /* Exit to another application*/
      set PT05M015.CATOAP cursor, bold;
    else
      PTWREC.XXXMSGNO = 18; /* Indicate PF key not valid*/
      PTWREC.XXXMODID = "053";

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PT05W00.PT05MSEL[6] = " "; /* Indicate nothing happened*/
    COMMAREA.CAMSG = "NO ACTION TAKEN ON PREVIOUS SCREEN";

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "023"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PT05053

// Reset highlighted fields
Function PT05054()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to AUTOSKIP intensity.*/
   /* ------------------------------------------------------------*/

  set PT05M015.PT05MCTY normal; /* all countries*/
  set PT05M015.PT05MNAM normal; /* preparer name*/
  set PT05M015.PT05MIND normal; /* report printed ind*/

end // end PT05054

// Verify the entered data
Function PT05055()
   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

  PT05W00.PT05WERF = "N";

   /* ------------------------------------------------------------*/
   /* validate report print indicator*/
   /* ------------------------------------------------------------*/

  if (PT05M015.PT05MIND != "Y"
   && PT05M015.PT05MIND != "N")
    PT05W00.PT05WERF = "Y";
    converseLib.validationFailed(116); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "025";
    set PT05M015.PT05MIND cursor, bold;
  else
    set PT05M015.PT05MIND initialAttributes;
  end

  if (PT05W00.PT05WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate user name*/
   /* ------------------------------------------------------------*/

  if (PT05M015.PT05MNAM == " ")
    PT05W00.PT05WERF = "Y";
    converseLib.validationFailed(116); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "025";
    set PT05M015.PT05MNAM cursor, bold;
  else
    set PT05M015.PT05MNAM initialAttributes;
  end

  if (PT05W00.PT05WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate all country select*/
   /* ------------------------------------------------------------*/

  if (PT05M015.PT05MCTY != "S")
    PT05W00.PT05WERF = "Y";
    converseLib.validationFailed(13); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "025";
    set PT05M015.PT05MCTY cursor, bold;
  else
    set PT05M015.PT05MCTY normal;
  end

  if (PT05W00.PT05WERF == "Y")
    return;
  end

end // end PT05055

// Process valid input request
Function PT05056()
   /* ------------------------------------------------------------*/
   /* if errors present dont submit job*/
   /* ------------------------------------------------------------*/

  if (PT05W00.PT05WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/
  PT05W00.PT05WIXT = 1;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* if on production system*/
    PT05057(); /* format production jcl*/
  else
    PT05058(); /* format test jcl*/
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  TA6REC.TA6-MAX-COND-CODE = 4; /* 4 as max cond cd*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "056"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PT05W00.PT05MSEL[6] = "*"; /* Indicate function completed*/
    COMMAREA.CAMSG = "UPDATE FACTORY COMMENTS - WAS SUBMITTED";

    set PT05M015 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end PT05056

// Process valid production jcl
Function PT05057()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  set PT05W02 empty;

  PT05W02.PT05WPGM = "PT486D";
  PT05W02.PT05MNAM = PT05M015.PT05MNAM;
  PT05W02.PT05WCT1 = "CHIN";
  PT05W02.PT05WCT2 = "INDO";
  PT05W02.PT05WCT3 = "KORE";
  PT05W02.PT05WCT4 = "TAIW";
  PT05W02.PT05WCT5 = "THAI";
  PT05W02.PT05WCT6 = "VIET";
  PT05W02.PT05WCT7 = "PHIL";
  PT05W02.PT05WCT8 = "ITAL";

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT05T05.TARTYPE[PT05WIXT] == "1")
      if (PT05M015.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT61 FORMS=PT61,COPIES=1,DEST=RMT00";
        TA6REC.TARTYPE[TA6INDEX] = " ";
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT61 FORMS=PT61,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    else

      if (PT05T05.TARTYPE[PT05WIXT] == "2")
        if (PT05M015.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT62 FORMS=PT62,COPIES=1,DEST=RMT00";
          TA6REC.TARTYPE[TA6INDEX] = " ";
        else
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT62 FORMS=PT62,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
        end
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      else

        if (PT05T05.TARTYPE[PT05WIXT] == "5")
          TA6REC.TARJCL[TA6INDEX] = PT05W02.TARJCL;
          TA6REC.TARTYPE[TA6INDEX] = " ";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        else

          if (PT05T05.TARTYPE[PT05WIXT] == "6")
            if (PT05M015.PT05MIND == "Y")
              PT0505A();
            end
          else

            if (PT05T05.TARTYPE[PT05WIXT] == "7")
              if (PT05M015.XURDEST == "LOCAL") /* destination lazer*/
                TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT62)'";
                TA6REC.TARTYPE[TA6INDEX] = " ";
              else
                TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT62)'";
                TA6REC.TARTYPE[TA6INDEX] = " ";
              end
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
            else


            /* ------------------------------------------------------------*/
                                  /* Format the Job Control Language*/
                                   /* statement from the table.*/

            /* ------------------------------------------------------------*/

              TA6REC.TARJCL[TA6INDEX] = PT05T05.TARJCL[PT05WIXT];
                                   /* JCL*/
              TA6REC.TARTYPE[TA6INDEX] = PT05T05.TARTYPE[PT05WIXT];
                                   /* Type*/
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

            end
          end
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT05T05.TARJCL[PT05WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT05W00.PT05WIXT = PT05W00.PT05WIXT + 1; /* Input table index*/

    end

  end
end // end PT05057

// Process valid test jcl
Function PT05058()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  set PT05W02 empty;

  PT05W02.PT05WPGM = "PT486D";
  PT05W02.PT05MNAM = PT05M015.PT05MNAM;
  PT05W02.PT05WCT1 = "CHIN";
  PT05W02.PT05WCT2 = "INDO";
  PT05W02.PT05WCT3 = "KORE";
  PT05W02.PT05WCT4 = "TAIW";
  PT05W02.PT05WCT5 = "THAI";
  PT05W02.PT05WCT6 = "VIET";
  PT05W02.PT05WCT7 = "PHIL";
  PT05W02.PT05WCT8 = "ITAL";

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT05T15.TARTYPE[PT05WIXT] == "1")
      if (PT05M015.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT61 FORMS=PT61,COPIES=1,DEST=RMT00";
        TA6REC.TARTYPE[TA6INDEX] = " ";
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT61 FORMS=PT61,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    else

      if (PT05T15.TARTYPE[PT05WIXT] == "2")
        if (PT05M015.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT62 FORMS=PT62,COPIES=1,DEST=RMT00";
          TA6REC.TARTYPE[TA6INDEX] = " ";
        else
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT62 FORMS=PT62,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
        end
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      else

        if (PT05T15.TARTYPE[PT05WIXT] == "5")
          TA6REC.TARJCL[TA6INDEX] = PT05W02.TARJCL;
          TA6REC.TARTYPE[TA6INDEX] = " ";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        else

          if (PT05T15.TARTYPE[PT05WIXT] == "6")
            if (PT05M015.PT05MIND == "Y")
              PT0505B();
            end
          else

            if (PT05T15.TARTYPE[PT05WIXT] == "7")
              if (PT05M015.XURDEST == "LOCAL") /* destination lazer*/
                TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(2,,PT62)'";
                TA6REC.TARTYPE[TA6INDEX] = " ";
              else
                TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(T,,PT62)'";
                TA6REC.TARTYPE[TA6INDEX] = " ";
              end
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
            else



            /* ------------------------------------------------------------*/
                                  /* Format the Job Control Language*/
                                   /* statement from the table.*/

            /* ------------------------------------------------------------*/

              TA6REC.TARJCL[TA6INDEX] = PT05T15.TARJCL[PT05WIXT];
                                   /* JCL*/
              TA6REC.TARTYPE[TA6INDEX] = PT05T15.TARTYPE[PT05WIXT];
                                   /* Type*/
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

            end
          end
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT05T15.TARJCL[PT05WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT05W00.PT05WIXT = PT05W00.PT05WIXT + 1; /* Input table index*/

    end

  end

end // end PT05058

// Process valid prod request
Function PT0505A()
  PT05W00.PT05WIDX = 1;

  while (PT05W00.PT05WIDX > 0) /* ; Until end of table*/
    if (PT05T5A.TARJCL[PT05WIDX] == "===FILE01===")
      if (PT05M015.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT61)'";
      else
        TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT61)'";
      end
      TA6REC.TARTYPE[TA6INDEX] = " ";
    else
      TA6REC.TARJCL[TA6INDEX] = PT05T5A.TARJCL[PT05WIDX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT05T5A.TARTYPE[PT05WIDX]; /* Type*/
    end
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT05W00.PT05WIDX = PT05W00.PT05WIDX + 1; /* Input table index*/
    if (PT05T5A.TARJCL[PT05WIDX] == "/*EOJ")
      PT05W00.PT05WIDX = 0; /* force end of file*/
    end
  end

end // end PT0505A

// Process valid test  request
Function PT0505B()
  PT05W00.PT05WIDX = 1;

  while (PT05W00.PT05WIDX > 0) /* ; Until end of table*/
    if (PT05T5B.TARJCL[PT05WIDX] == "===FILE01===")
      if (PT05M015.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(2,,PT61)'";
        TA6REC.TARTYPE[TA6INDEX] = " ";
      else
        TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(T,,PT61)'";
        TA6REC.TARTYPE[TA6INDEX] = " ";
      end
    else
      TA6REC.TARJCL[TA6INDEX] = PT05T5B.TARJCL[PT05WIDX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT05T5B.TARTYPE[PT05WIDX]; /* Type*/
    end
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT05W00.PT05WIDX = PT05W00.PT05WIDX + 1; /* Input table index*/
    if (PT05T5B.TARJCL[PT05WIDX] == "/*EOJ")
      PT05W00.PT05WIDX = 0; /* force end of file*/
    end
  end

end // end PT0505B

// Report Request Menu
Function PT05990()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT05991(); /* Format and display the map*/

  PT05992(); /* Check attention identifier*/

  PT05993(); /* Reset fields to normal intensity*/

  PT05994(); /* Verify the data that was entered*/

  PT05995(); /* Process valid input request*/


end // end PT05990

// Format and display the map
Function PT05991()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment the program is*/
   /* executing in, development or production*/
   /* ------------------------------------------------------------*/
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")
    TA1REC.TA1LOCAT[1] = "PT05991";
    TA1REC.TA1LOCAT[2] = "XC0910 ";
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1PGMNM = "PT05";

    TA1REC.TA1FUNC = "POST";
    call "TA0020" (TA1REC, SQLCA);

    converseLib.validationFailed(112);
  end

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, format the map output area.*/
    /* ------------------------------------------------------------*/

    set PT05M099 initial; /* M099 input/output*/

    PT05W00.PT05WIXM = 1; /* Initialize map index*/

    while (PT05W00.PT05WIXM <= PT05W00.PT05WIXL) /* Until end of array*/

      PT05M099.PT05MSEL[PT05WIXM] = PT05W00.PT05MSEL[PT05WIXM];

      PT05W00.PT05WIXM = PT05W00.PT05WIXM + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  /* change begins - 02/08/01*/
  /* SET PT05M099.PT05MSEL(5) DARK,PROTECT;*/
  /* MOVE '  ' TO PT05W00.PT05MSEL(5);*/
  set PT05M099.PT05MSEL[5] initialAttributes;
  /* change ends   - 02/08/01*/

  PT05M099.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT05M099.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PT05M099.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Get last run date of expedite*/
   /* ------------------------------------------------------------*/

  PT05S91(); /* Call IO1000 Dcorp.Vparm101*/

  PT05M099.XXX-CURR-DT = PT05W00.PT05-YYMMDD; /* Last run date*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT05M099.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT05M099.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT05M099 alarm; /* Indicate sound alarm*/

  end

  converse PT05M099 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PT05M099.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PT05M099.CAITEM; /* Application data*/


end // end PT05991

// Check attention identifier
Function PT05992()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PT05M099 initial; /* M099 input/output*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    PT05S99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PT05M099.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (PT05M099.CATOAP == "PT06") /* Cannot fast path to PT06*/
        converseLib.validationFailed(145);
        PTWREC.XXXMODID = "992";
        exit stack;
      end

      XSPT001(); /* Exit to another application*/

      set PT05M099.CATOAP cursor, bold; /* Highlight*/

    else

      PTWREC.XXXMODID = "992"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    PT05S99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to Production*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PTSC    "; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PT0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* TO application*/
    end

    XSPT001(); /* Exit to another application*/

    COMMAREA.CATOAP = " "; /* Clear TO application*/

    PT05S99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "992"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    PT05S99(); /* Exit to display map*/

  end


end // end PT05992

// Reset highlighted fields
Function PT05993()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  PT05W00.PT05WIXM = 1; /* Initialize index*/

  while (PT05W00.PT05WIXM <= PT05W00.PT05WIXL) /* Until all lines are reset*/

    set PT05M099.PT05MSEL[PT05WIXM] initialAttributes; /* Reset select field*/

    PT05W00.PT05WIXM = PT05W00.PT05WIXM + 1; /* Increment line index*/

  end

  /* change begins - 02/08/01*/
  /* SET PT05M099.PT05MSEL(5) DARK,PROTECT;*/
  /* MOVE '  ' TO PT05W00.PT05MSEL(5);*/
  set PT05M099.PT05MSEL[5] initialAttributes;
  /* change ends   - 02/08/01*/

  set PT05M099.CATOAP initialAttributes; /* TO application*/
  set PT05M099.CAITEM initialAttributes; /* Application data*/


end // end PT05993

// Verify the entered data
Function PT05994()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PTWREC.XXXMODID = "994"; /* Module identification*/
    set PT05M099.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Check for proper select tag.*/
   /* ------------------------------------------------------------*/

  PT05W00.PT05WIXM = PT05W00.PT05WIXL; /* Initialize line index*/

  while (PT05W00.PT05WIXM > 0) /* Until all lines are verified*/

    /* ------------------------------------------------------------*/
     /* Indicate an error if the line was not selected properly.*/
    /* ------------------------------------------------------------*/

    if (PT05M099.PT05MSEL[PT05WIXM] != PT05W00.PT05MSEL[PT05WIXM]
     && PT05M099.PT05MSEL[PT05WIXM] != " " /* Line was selected*/
     && PT05M099.PT05MSEL[PT05WIXM] != "S") /* and not with an "S"*/

      PTWREC.XXXMODID = "994"; /* Module identification*/
      set PT05M099.PT05MSEL[PT05WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(13); /* Only "S" is valid*/

    end

    PT05W00.PT05WIXM = PT05W00.PT05WIXM - 1; /* Decrement line number*/

  end

   /* ------------------------------------------------------------*/
   /* Check for duplicate selections*/
   /* ------------------------------------------------------------*/

  if ("S" in PT05M099.PT05MSEL)
    PT05W00.PT05WIXM = sysVar.arrayIndex + 1;
    if ("S" in PT05M099.PT05MSEL from PT05WIXM)

      PTWREC.XXXMODID = "994"; /* Module identification*/
      set PT05M099.PT05MSEL[sysVar.arrayIndex] cursor, bold; /* Highlight*/
      converseLib.validationFailed(13); /* Only "S" is valid*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PT05S99(); /* Exit to display map*/
  end


end // end PT05994

// Process valid input request
Function PT05995()
   /* ------------------------------------------------------------*/
   /* Save the selections in the working storage array.*/
   /* ------------------------------------------------------------*/

  move PT05M099.PT05MSEL to PT05W00.PT05MSEL[1] for all; /* Menu selections*/

   /* ------------------------------------------------------------*/
   /* If specify destination selected, indicate to subroutine to*/
   /* display output destination, but, do not submit any JCL.*/
   /* ------------------------------------------------------------*/

  if (PT05W00.PT05MSEL[1] == "S") /* Specify destination selected*/
    TA6REC.TA6SUBSW = "N"; /* Indicate do not submit JCL*/
  end


end // end PT05995

// Select DPRODC.VPRDCU01 row
Function PT05S01()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" (PCYREC, SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0   /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100 /* row not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* more than one rows found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of pt05s01 ***********************/
end // end PT05S01

// date validation yymm
Function PT05S02()

   /* ------------------------------------------------------------*/
   /* validate/format CCYYMMDD*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* option*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call successful*/
   || TA2REC.TA2RTNCD >= 888)        /* and subroutine completed*/

    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "PT05S02 DATE EDIT CCYYMM";

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    PTWREC.XXXMODID = "S02"; /* Module identification*/
    converseLib.validationFailed(81); /* System error occurred*/

    exit stack; /* exit to display map*/

  end


end // end PT05S02

// validate style/color combo
Function PT05S21()
   /* ------------------------------------------------------------*/
   /* obtain style number dprodg.vsyclr01*/
   /* ------------------------------------------------------------*/

  PG2REC.XGPCD = "02";

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "S21"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DPRODG.VSYCLR01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT05S21

// validate style existence
Function PT05S22()
   /* ------------------------------------------------------------*/
   /* obtain style number dprodg.vsyclr01*/
   /* ------------------------------------------------------------*/


  PG2REC.XGPCD = "02";

  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      XZZREC.XZZINT2 = SQLCA.VAGen_SQLCODE;

      try
        call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
      end /* Select set*/

      SQLCA.VAGen_SQLCODE = XZZREC.XZZINT2;

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "S22"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(41); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DPRODG.VSYCLR01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT05S22

// select 's' dcorp.vparm101
Function PT05S91()
   /* ------------------------------------------------------------*/
   /* obtain default date from dcorp.vparm101*/
   /* ------------------------------------------------------------*/

  set XZZREC empty;
  XZZREC.XZZQRYID = "PT479D"; /* program name id*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/
  try
    call "IO1000" ("S ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PT05W00.PT05-DATE = XZZREC.XZZINT1;
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "091"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  /* change begins - 02/08/01*/
  /* SET PT05M099.PT05MSEL(5) DARK,PROTECT;*/
  /* MOVE '  ' TO PT05W00.PT05MSEL(5);*/
    set PT05M099.PT05MSEL[5] initialAttributes;
  /* change ends   - 02/08/01*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
   /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT05S91

// Clear selections and exit
Function PT05S99()
   /* ------------------------------------------------------------*/
   /* Reset any pending selections in working storage.*/
   /* ------------------------------------------------------------*/

  PT05W00.PT05WIXM = 1; /* Initialize map index*/

  while (PT05W00.PT05WIXM <= PT05W00.PT05WIXL) /* Until end of array*/

    if (PT05W00.PT05MSEL[PT05WIXM] == "S") /* Entry is selected*/
      PT05W00.PT05MSEL[PT05WIXM] = " "; /* Reset entry*/
    end

    PT05W00.PT05WIXM = PT05W00.PT05WIXM + 1; /* Increment index*/

  end

  /* change begins - 02/08/01*/
  /* SET PT05M099.PT05MSEL(5) DARK,PROTECT;*/
  /* MOVE '  ' TO PT05W00.PT05MSEL(5);*/
  set PT05M099.PT05MSEL[5] initialAttributes;
  /* change ends   - 02/08/01*/

   /* ------------------------------------------------------------*/
   /* Exit to display the selection menu map.*/
   /* ------------------------------------------------------------*/

  exit stack; /* Exit to display map*/


end // end PT05S99

//*** RECORD=PT05W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PT05W00 type basicRecord
  10 PT05WERF PT05WERF ; 
  10 PT05WFOR PT05WFOR ; 
  10 PT05WJOB PT05WJOB ; 
  10 PT05MSEL PT05MSEL [6] ; 
  10 PT05WIXL PT05WIXL ; 
  10 PT05WIXM PT05WIXM ; 
  10 PT05WIDX PT05WIDX ; 
  10 PT05WIX2 PT05WIX2 ; 
  10 PT05WIXT PT05WIXT ; 
  10 PT05WSWX PT05WSWX ; 
  10 PT05WRD2 PT05WRD2 ; 
  10 PT05WRD3 PT05WRD3 ; 
  10 PT05WRD4 PT05WRD4 ; 
  10 PT05WRD5 PT05WRD5 ; 
  10 PT05WDAT PT05WDAT ; 
    15 PT05WBUY PT05WBUY ; 
    15 PT05WDAY PT05WDAY ; 
  10 PC2CUXID PC2CUXID ; 
    15 * char(3) ; 
    15 PT05WCH2 PT05WCH2 ; 
  10 PT05-DATE PT05-DATE ; 
    15 * num(3) ; 
    15 PT05-YYMMDD PT05-YYMMDD ; 
  10 PT05-PRINTER-SET PT05-PRINTER-SET ; 
end // end PT05W00

//*** RECORD=PT05W01 ****
// ------------------------------------------------------------
// Parameters for PT487D - ftwr expedite select
// ------------------------------------------------------------
// ***********************
Record PT05W01 type basicRecord
  5 TARJCL TARJCL ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 XCTCD XCTCD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XWHCD XWHCD ; 
    10 PT05MDRS PT05MDRS ; 
    10 PT05MCU1 PT05MCU1 ; 
    10 PT05MCU2 PT05MCU2 ; 
    10 PT05MCU3 PT05MCU3 ; 
    10 PT05MCU4 PT05MCU4 ; 
    10 PT05MCU5 PT05MCU5 ; 
    10 PT05MPBD PT05MPBD ; 
    10 PT05MPED PT05MPED ; 
    10 PT05POTP PT05POTP ; 
    10 PC-FCTY-SEND-IND PC-FCTY-SEND-IND ; 
    10 PT05WPGM PT05WPGM ; 
    10 PT05MNAM PT05MNAM ; 
    10 PT05MIND PT05MIND ; 
    10 PT05MSRT char(1) ; 
end // end PT05W01

//*** RECORD=PT05W02 ****
// ------------------------------------------------------------
// Parameters for pt479D - ftwr expedite creation
// ------------------------------------------------------------
// ***********************
Record PT05W02 type basicRecord
  5 TARJCL TARJCL ; 
    10 PT05WCT1 PT05WCT1 ; 
    10 PT05WCT2 PT05WCT2 ; 
    10 PT05WCT3 PT05WCT3 ; 
    10 PT05WCT4 PT05WCT4 ; 
    10 PT05WCT5 PT05WCT5 ; 
    10 PT05WCT6 PT05WCT6 ; 
    10 PT05WCT7 PT05WCT7 ; 
    10 PT05WCT8 PT05WCT8 ; 
    10 PT05WPGM PT05WPGM ; 
    10 PT05MNAM PT05MNAM ; 
    10 PT05MIND PT05MIND ; 
    10 * char(33) ; 
  5 PT05WJC1 PT05WJC1 ; 
    10 PT05WCD1 PT05WCD1 ; 
    10 PT05WEQ1 PT05WEQ1 ; 
    10 PT05WPR1 PT05WPR1 ; 
    10 PT05WFL1 PT05WFL1 ; 
end // end PT05W02

//*** RECORD=PT05W03 ****
// ------------------------------------------------------------
// Output destination parameters saved in this record
// ------------------------------------------------------------
// ***********************
Record PT05W03 type basicRecord
  5 PT05W03REC PT05W03REC ; 
    10 PT05XURDEST PT05XURDEST ; 
    10 PT05XRODESC PT05XRODESC ; 
    10 PT05XURBLDID PT05XURBLDID ; 
    10 PT05XURCOPY PT05XURCOPY ; 
    10 PT05XURUSRNM PT05XURUSRNM ; 
    10 * char(1986) ; 
end // end PT05W03

// bin cccyymmdd
DataItem PT05-DATE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// printer set sw
DataItem PT05-PRINTER-SET char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// yymmdd
DataItem PT05-YYMMDD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT05W03REC char(2048)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT05WBUY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl prefix 4
DataItem PT05WCD1 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT05WCH2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// country1 select
DataItem PT05WCT1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// country2 select
DataItem PT05WCT2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// country3 select
DataItem PT05WCT3 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// country4 select
DataItem PT05WCT4 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// country5 select
DataItem PT05WCT5 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// country5 select
DataItem PT05WCT6 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// country7 select
DataItem PT05WCT7 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// country7 select
DataItem PT05WCT8 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT05WDAT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT05WDAY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT05WEQ1 char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem PT05WERF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT05WFL1 char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forms code
DataItem PT05WFOR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PT05WIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Secondary index for map fields
DataItem PT05WIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Limit for map fields index
DataItem PT05WIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PT05WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for table fields
DataItem PT05WIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT05WJC1 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job identification
DataItem PT05WJOB char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT05WPR1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Exit requested switch
DataItem PT05WRD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Exit requested switch
DataItem PT05WRD3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Exit requested switch
DataItem PT05WRD4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Exit requested switch
DataItem PT05WRD5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Exit requested switch
DataItem PT05WSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT05XRODESC char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT05XURBLDID char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT05XURCOPY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT05XURDEST char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT05XURUSRNM char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

