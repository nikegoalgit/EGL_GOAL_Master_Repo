package pt02;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ff.common.*;
import fk.common.*;
import fy.common.*;
import pc.common.*;
import pg.common.*;
import pt.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PT02 ****
// This application displays the Submit Job Request Menu screen
// and subordinate job submission screens.
// 
// The menu is displayed for the user to select the jobs to be
// submitted.  Another available selection allows the user to
// view the available printers and change the printed output
// destination.
// 
// Job Control Language statements are formatted and submitted
// through the Internal Reader Transient Data Queue (INTR).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TARTYPE).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed.
// 
// The data in working storage is substituted and the statement
// is written to the internal reader.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the menu, only.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          03/21/90  rgilli  New application.
//          08/21/90  cmessi  chng'd b-grd rpts
//          09/27/90  mhuynh  added TA3REC and test JCLs
//          02/18/93  mhuynh  emer move to prod
//          08/09/93  mhuynh  Table change
//          10/02/93  mhuynh  Inactivate unavailable options
//          08/01/97  mhuynh  Inactivate unavailable options
//          07/25/97  satina  Changing proc TA0131 to GENER.
//                            Corresponding changes are done.
// y2kproj  12-10-97  oricha  y2k modifications:  zero fill
//                            map field pt02mpmo to accommodate
//                            year 2000.
// PT010    03-20-98  satina  enhance to have equipment
//                            negative availability report
// PT0009   04-15-99  gkamal  changed map to have calc prd and
//                            print prds for neg availability.
// PT0000   04-21-99  gkamal  changed to move deafult values
//                            to calc prd and print periods.
// PT0000   01-31-00  gkamal  changed pt4e41 to pt4951 as part
//                            of standarisation.
// 
// *********************
Program PT02 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PT00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FFZREC FFZREC; // record
  FY1REC FY1REC; // record
  PCFREC PCFREC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  PT02W00 PT02W00; // record
  PT02W01 PT02W01; // record
  PT02W02 PT02W02; // record
  PT02W03 PT02W03; // record
  PT02W04 PT02W04; // record
  PT02W05 PT02W05; // record
  PT02W06 PT02W06; // record
  PT02W07 PT02W07; // record
  PT02W08 PT02W08; // record
  PT02W09 PT02W09; // record
  PT02W10 PT02W10; // record
  PT02W2A PT02W2A; // record
  PTWREC PTWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  XZZREC XZZREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL; // table
  use XPRTBL; // table
  use XPLTBL; // table
  use XPCTBL; // table
  use PT02T01 {deleteAfterUse = yes}; // table
  use PT02T11 {deleteAfterUse = yes}; // table
  use PT02T02; // table
  use PT02T12; // table
  use PT02T03; // table
  use PT02T13; // table
  use PT02T04; // table
  use PT02T14; // table
  use PT02T05; // table
  use PT02T15; // table
  use PT02T06; // table
  use PT02T16; // table
  use PT02T07; // table
  use PT02T17; // table
  use PT02T08; // table
  use PT02T18; // table
  use PT02T09 {deleteAfterUse = yes}; // table
  use PT02T19 {deleteAfterUse = yes}; // table
  use PT02T9A {deleteAfterUse = yes}; // table
  use PT02T9B {deleteAfterUse = yes}; // table
  use PT02M.PT02M002,  // forms
      PT02M.PT02M005, 
      PT02M.PT02M006, 
      PT02M.PT02M007, 
      PT02M.PT02M008, 
      PT02M.PT02M009, 
      PT02M.PT02M010, 
      PT02M.PT02M099, 
      PT02M.TA0PM001, 
      PT02M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPT001: XPPT001();
     /* ------------------------------------------------------------*/
     /* Initialize the working storage areas and variables.*/
     /* ------------------------------------------------------------*/

    set TA0PM001 initial; /* M001 input/output*/
    set PT02M002 initial; /* M002 input/output*/
     /* ET PT02M003 CLEAR;               /* M003 input/output*/
     /* ET PT02M004 CLEAR;               /* M004 input/output*/
    set PT02M005 initial; /* M005 input/output*/
    set PT02M006 initial; /* M006 input/output*/
    set PT02M007 initial; /* M007 input/output*/
    set PT02M008 initial; /* M008 input/output*/
    set PT02M009 initial; /* M009 input/output*/
    set PT02M099 initial; /* M099 input/output*/
    set PT02W00 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA6REC empty; /* Background job subroutine parameters*/

     /* ------------------------------------------------------------*/
     /* Indicate that the output destination must be obtained.*/
     /* ------------------------------------------------------------*/

    TA6REC.TA6SUBSW = "I"; /* Indicate obtain information*/

     /* ------------------------------------------------------------*/
     /* Indicate the number of selection lines on the menu.*/
     /* ------------------------------------------------------------*/

    PT02W00.PT02WIXL = 9; /* Number of selection lines*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PT02001; /* Converse the main process*/


    PT02001: PT02001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PT02001; /* Converse the main process*/


  end // end main
end // end PT02

// equip negative availability
Function PT02-010()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If request for data switch set, obtain data.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PT02W00.PT02WRD10 == "Y" /* request for data switch = yes*/
   && converseVar.validationMsgNum == 0) /* and no previous errors*/
    PT02S-010-110(); /* Obtain data*/
    PT02W00.PT02WRD10 = "N"; /* SET SWITCH TO 'NO'*/
  end

  PT02-011(); /* Format and display the map*/

  PT02-012(); /* Check attention identifier*/

  PT02-013(); /* Reset fields to normal intensity*/

  PT02-014(); /* Verify the data that was entered*/

  PT02-015(); /* Process valid input request*/


end // end PT02-010

// Format and display the map
Function PT02-011()
   /* ------------------------------------------------------------*/
   /* If user is authorized, allow access to parm update field.*/
   /* ------------------------------------------------------------*/

  if (PT02W00.PT02WERF == "N") /* No edir errors*/
    if (CACHGFL == "Y") /* Updates allowed by this user*/
      set PT02M010.PT02MPRM cursor; /* Have cursor appear here first*/
    else
      set PT02M010.PT02MNSZ cursor; /* Have cursor appear here first*/
      set PT02M010.PT02MPRM skip; /* No access to this field*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    PT02M010.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  PT02M010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT02M010.XURDEST = TA6REC.XURDEST; /* Print destination*/
  PT02M010.XRODESC = TA6REC.XRODESC; /* Printer description*/
  PT02M010.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  PT02M010.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  PT02M010.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT02M010.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT02M010.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT02M010 alarm; /* Indicate sound alarm*/

  end

  converse PT02M010 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PT02-011

// Check attention identifier
Function PT02-012()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PT02W00.PT02MSEL[10] = "C"; /* Indicate selection cancelled*/

    set PT02M010 initial; /* m010 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PT02W00.PT02MSEL[10] = " "; /* Indicate nothing happened*/
    COMMAREA.CAMSG = "NO ACTION TAKEN ON PREVIOUS SCREEN";

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "102"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PT02-012

// Reset highlighted fields
Function PT02-013()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (CACHGFL == "Y")
    set PT02M010.PT02MPRM initialAttributes;
  else
    set PT02M010.PT02MPRM skip;
  end
  set PT02M010.PT02MNSZ initialAttributes;
  set PT02M010.PT02MASC initialAttributes;
  set PT02M010.PT02MTLQ initialAttributes;
  set PT02M010.PT02MPRC initialAttributes;
  set PT02M010.PT02MPLC initialAttributes;
  set PT02M010.PT02MPCC initialAttributes;


   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PT02M010.PT02MPRC == "?" /* product type group code*/
   || PT02M010.PT02MPLC == "?" /* product line code*/
   || PT02M010.PT02MPCC == "?") /* product category*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      PTWREC.XXXMODID = "104"; /* Module identification*/
      converseLib.validationFailed(4); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type code*/
   /* ------------------------------------------------------------*/

  if (PT02M010.PT02MPRC == "?") /* product type code*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT TYPE CODE"; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      PT02M010.PT02MPRC = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/

    end

    set PT02M010.PT02MPRC cursor; /* Establish cursor position*/

  end


   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes*/
   /* ------------------------------------------------------------*/

  if (PT02M010.PT02MPLC == "?") /* product line*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT LINE CODE"; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      PT02M010.PT02MPLC = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/

    end

    set PT02M010.PT02MPLC cursor; /* Establish cursor position*/

  end


   /* ------------------------------------------------------------*/
   /* If requested, display the list of product categories*/
   /* ------------------------------------------------------------*/

  if (PT02M010.PT02MPCC == "?") /* product line*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT CATEGORY CODE "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      PT02M010.PT02MPCC = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/

    end

    set PT02M010.PT02MPCC cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  PTWREC.XXXMODID = "104"; /* Module identification*/
  converseLib.validationFailed(42); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end PT02-013

// Verify the entered data
Function PT02-014()

   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

  PT02W00.PT02WERF = "N";

   /* ------------------------------------------------------------*/
   /* validate parm update field*/
   /* ------------------------------------------------------------*/

  if (PT02M010.PT02MPRM != "P"
   && PT02M010.PT02MPRM != "R")
    PT02W00.PT02WERF = "Y";
    converseLib.validationFailed(80);
    PTWREC.XXXMODID = "105";
    set PT02M010.PT02MPRM cursor, bold;
    return;
  else
    set PT02M010.PT02MPRM initialAttributes;
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate number of sizes*/
   /* ------------------------------------------------------------*/
  if (PT02M010.PT02MNSZ < 0)
    converseLib.validationFailed(100);
    PT02W00.PT02WERF = "Y";
    set PT02M010.PT02MNSZ cursor, bold;
  else
    set PT02M010.PT02MNSZ initialAttributes;
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate tolerance quantity*/
   /* ------------------------------------------------------------*/
  if (PT02M010.PT02MTLQ <= 0)
    converseLib.validationFailed(101);
    PT02W00.PT02WERF = "Y";
    set PT02M010.PT02MTLQ cursor, bold;
  else
    set PT02M010.PT02MTLQ initialAttributes;
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate product type code*/
   /* ------------------------------------------------------------*/

  if (PT02M010.PT02MPRC != "* "
   && PT02M010.PT02MPRC != "**")
    if (PT02M010.PT02MPRC in XPRTBL.XPRCD)
      set PT02M010.PT02MPRC initialAttributes;
    else
      PT02W00.PT02WERF = "Y";
      converseLib.validationFailed(97);
      PTWREC.XXXMODID = "065";
      set PT02M010.PT02MPRC cursor, bold;
    end
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate product line code*/
   /* ------------------------------------------------------------*/

  if (PT02M010.PT02MPLC != "* "
   && PT02M010.PT02MPLC != "**")
    if (PT02M010.PT02MPLC in XPLTBL.XPLCD)
      set PT02M010.PT02MPLC initialAttributes;
    else
      PT02W00.PT02WERF = "Y";
      converseLib.validationFailed(98);
      PTWREC.XXXMODID = "105";
      set PT02M010.PT02MPLC cursor, bold;
    end
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/

  if (PT02M010.PT02MPCC != "* "
   && PT02M010.PT02MPCC != "**")
    if (PT02M010.PT02MPCC in XPCTBL.XPCCD)
      set PT02M010.PT02MPCC initialAttributes;
    else
      PT02W00.PT02WERF = "Y";
      converseLib.validationFailed(99);
      PTWREC.XXXMODID = "105";
      set PT02M010.PT02MPCC cursor, bold;
    end
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate scheduler code*/
   /* ------------------------------------------------------------*/

  if (PT02M010.PT02MASC != "* "
   && PT02M010.PT02MASC != " *"
   && PT02M010.PT02MASC != "**")
    set PG1REC empty;
    PG1REC.PG1SC4CD = PT02M010.PT02MASC;
    PG1REC.PG1FCTCD = "  ";
    PG1REC.XGPCD = "02";

    try
      call "IO1200" ("S ", SQLCA, PG1REC) {isNoRefresh = yes};
    end
    if (SQLCA.VAGen_SQLCODE != 0)
      set PT02M010.PT02MASC cursor, bold; /* Highlight*/
      PT02W00.PT02WERF = "Y";
      converseLib.validationFailed(87); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "105";
      return;
    end
  end



end // end PT02-014

// Process valid input request
Function PT02-015()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

  if (PT02W00.PT02WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* if parm update was requested then UPDATE PARMS!! NOOOW!!!!!!*/
   /* ------------------------------------------------------------*/

  if (PT02M010.PT02MPRM == "P")

    PT02S-015-110();
    PT02W00.PT02MSEL[10] = "*";
    COMMAREA.CAMSG = "EQUIPMENT NEGATIVE AVAIL PARMS - UPDATED";
    return;

  end

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/
  PT02W00.PT02WIXT = 1;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03") /* if on production system*/
    PT02-01510(); /* format production jcl*/
  else
    PT02-01520(); /* format test jcl*/
  end
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "105"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PT02W00.PT02MSEL[10] = "*"; /* Indicate function completed*/
    COMMAREA.CAMSG = "EQUIPMENT NEGATIVE AVAIL REPORT - SUBMITTED";

    set PT02M010 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end PT02-015

// Process valid production jcl
Function PT02-01510()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT02T01.TARTYPE[PT02WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set PT02W10 empty; /* Parameters work area*/

      PT02W10.PT02MPRM = PT02M010.PT02MPRM;
      PT02W10.PT02MTLQ = PT02M010.PT02MTLQ;
      PT02W10.PT02MNSZ = PT02M010.PT02MNSZ;
      PT02W10.PT02MASC = PT02M010.PT02MASC;
      PT02W10.PT02MPRC = PT02M010.PT02MPRC;
      PT02W10.PT02MPLC = PT02M010.PT02MPLC;
      PT02W10.PT02MPCC = PT02M010.PT02MPCC;

      TA6REC.TARJCL[TA6INDEX] = PT02W10.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PT02T01.TARJCL[PT02WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT02T01.TARTYPE[PT02WIXT]; /* Type*/

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT02T01.TARJCL[PT02WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT02W00.PT02WIXT = PT02W00.PT02WIXT + 1; /* Input table index*/

    end

  end

end // end PT02-01510

// Process valid test jcl
Function PT02-01520()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT02T11.TARTYPE[PT02WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set PT02W10 empty; /* Parameters work area*/

      PT02W10.PT02MPRM = PT02M010.PT02MPRM;
      PT02W10.PT02MTLQ = PT02M010.PT02MTLQ;
      PT02W10.PT02MNSZ = PT02M010.PT02MNSZ;
      PT02W10.PT02MASC = PT02M010.PT02MASC;
      PT02W10.PT02MPRC = PT02M010.PT02MPRC;
      PT02W10.PT02MPLC = PT02M010.PT02MPLC;
      PT02W10.PT02MPCC = PT02M010.PT02MPCC;

      TA6REC.TARJCL[TA6INDEX] = PT02W10.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PT02T11.TARJCL[PT02WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT02T11.TARTYPE[PT02WIXT]; /* Type*/

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT02T11.TARJCL[PT02WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT02W00.PT02WIXT = PT02W00.PT02WIXT + 1; /* Input table index*/

    end

  end

end // end PT02-01520

// Main process to display a map
Function PT02001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Invoke the process for each selection entered on menu.*/
   /* 2) After all selections are processed, display the menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PT02W00.PT02WSWX != "Y") /* EXIT not requested*/

    if (PT02W00.PT02MSEL[1] == "S" /* Line 1 was selected*/
     || TA6REC.TA6SUBSW == "I")    /* or information requested*/

      PT02010(); /* Specify output destination*/

    end

    if (PT02W00.PT02MSEL[2] == "S") /* Line 2 was selected*/
      PT02W00.PT02WRD2 = "Y"; /* set request defaults switch 'on'*/
      if (CACHGFL == "Y")
        set PT02M002.PT02MFAC cursor;
      else
        set PT02M002.PT02MFAC cursor;
      end
      PT02W00.PT02WERF = "Y"; /* set error flag 'on'*/
      while (PT02W00.PT02WERF != "N")
        PT02020(); /* b-grade reporting*/
      end
    end

    if (PT02W00.PT02MSEL[3] == "S") /* Line 3 was selected*/
      PT02M099.PT02MSEL[3] = "*";
      converseLib.validationFailed(9);
      set PT02M099.PT02MSEL[3] cursor, bold;
      /* ELSE;*/
       /* SET PT02M003.PT02MPRM AUTOSKIP;*/
       /* SET PT02M003.PT02MPDT CURSOR;*/
      /* END;*/
      /* MOVE 'Y' TO PT02W00.PT02WERF;        /* set error flag 'on'*/
      /* WHILE PT02W00.PT02WERF NE 'N';*/
       /* PERFORM PT02030;            /* delivery analsis*/
      /* END;*/
    end

    if (PT02W00.PT02MSEL[4] == "S") /* Line 4 was selected*/
      PT02M099.PT02MSEL[4] = "*";
      converseLib.validationFailed(9);
      set PT02M099.PT02MSEL[4] cursor, bold;
      /* MOVE 'Y' TO PT02W00.PT02WRD4; /* set request defaults switch 'on'*/
      /* IF CACHGFL = 'Y';*/
       /* SET PT02M004.PT02MPRM CURSOR;*/
      /* ELSE;*/
       /* SET PT02M004.PT02MPRM AUTOSKIP;*/
       /* SET PT02M004.PT02MSY1 CURSOR;*/
      /* END;*/
      /* MOVE 'Y' TO PT02W00.PT02WERF;        /* set error flag 'on'*/
      /* WHILE PT02W00.PT02WERF NE 'N';*/
       /* PERFORM PT02040;            /* factory performance*/
      /* END;*/
    end

    if (PT02W00.PT02MSEL[5] == "S") /* Line 5 was selected*/
      PT02W00.PT02WRD5 = "Y"; /* set request defaults switch 'on'*/
      if (CACHGFL == "Y")
        set PT02M005.PT02MPRM cursor;
      else
        set PT02M005.PT02MPRM skip;
        set PT02M005.PT02MLPD cursor;
      end
      PT02W00.PT02WERF = "Y"; /* set error flag 'on'*/
      while (PT02W00.PT02WERF != "N")
        PT02050(); /* late production mapper request*/
      end
    end

    if (PT02W00.PT02MSEL[6] == "S") /* Line 6 was selected*/
      PT02W00.PT02WRD6 = "Y"; /* set request defaults switch 'on'*/
      if (CACHGFL == "Y")
        set PT02M006.PT02MPRM cursor;
      else
        set PT02M006.PT02MPRM skip;
        set PT02M006.PT02MNSZ cursor;
      end
      PT02W00.PT02WERF = "Y"; /* set error flag 'on'*/
      while (PT02W00.PT02WERF != "N")
        PT02060(); /* negative avaliability report*/
      end
    end

    if (PT02W00.PT02MSEL[7] == "S") /* Line 7 was selected*/
      PT02W00.PT02WRD7 = "Y"; /* set request defaults switch 'on'*/
      if (CACHGFL == "Y")
        set PT02M007.PT02MPRM cursor;
      else
        set PT02M007.PT02MPRM skip;
        set PT02M007.PT02MPRV cursor;
      end
      PT02W00.PT02WERF = "Y"; /* set error flag 'on'*/
      while (PT02W00.PT02WERF != "N")
        PT02070(); /* percent variance report*/
      end
    end

    if (PT02W00.PT02MSEL[8] == "S") /* Line 8 was selected*/
      PT02W00.PT02WRD8 = "Y"; /* set request defaults switch 'on'*/
      if (CACHGFL == "Y")
        set PT02M008.PT02MPRM cursor;
      else
        set PT02M008.PT02MPRM skip;
        set PT02M008.PT02MPBD cursor;
      end
      PT02W00.PT02WERF = "Y"; /* set error flag 'on'*/
      while (PT02W00.PT02WERF != "N")
        PT02080(); /* salesman samples report*/
      end
    end

    if (PT02W00.PT02MSEL[9] == "S") /* Line 8 was selected*/
      PT02W00.PT02WRD9 = "Y"; /* set request defaults switch 'on'*/
      /* IF CACHGFL = 'Y';*/
       /* SET PT02M009.PT02MPRM CURSOR;*/
      /* ELSE;*/
       /* SET PT02M009.PT02MPRM AUTOSKIP;*/
       /* SET PT02M009.PT02MPBD CURSOR;*/
      /* END;*/
      PT02W00.PT02WERF = "Y"; /* set error flag 'on'*/
      while (PT02W00.PT02WERF != "N")
        PT02090(); /* launch product delivery report*/
      end
    end

  end

  PT02W00.PT02WSWX = "N"; /* Reset exit requested switch*/

  PT02990(); /* Report Request Menu*/

  if (PT02W00.PT02MSEL[10] == "S") /* Line 10 was selected*/
    PT02W00.PT02WRD10 = "Y"; /* set request defaults switch 'on'*/
    if (CACHGFL == "Y")
      set PT02M008.PT02MPRM cursor;
    else
      set PT02M008.PT02MPRM skip;
      set PT02M008.PT02MPBD cursor;
    end
    PT02W00.PT02WERF = "Y"; /* set error flag 'on'*/
    while (PT02W00.PT02WERF != "N")
      PT02-010(); /* equipment Negative availability*/
    end /* report*/
  end

end // end PT02001

// Specify output destination
Function PT02010()
   /* ------------------------------------------------------------*/
   /* Obtain and/or display the output destination for the user.*/
   /* ------------------------------------------------------------*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If successful, indicate the selected function is completed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (TA6REC.TA6RTNCD == "0") /* Normal return*/

      if (TA6REC.TA6SUBSW == "I") /* Obtain information only*/

        TA6REC.TA6SUBSW = "N"; /* Indicate information obtained*/
      else
        PT02W00.PT02MSEL[1] = "*"; /* Indicate function completed*/

      end

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If user cancelled request, indicate function cancelled.*/
    /* ------------------------------------------------------------*/

    if (TA6REC.TA6RTNCD == "1") /* User cancelled request*/

      PT02W00.PT02MSEL[1] = "C"; /* Indicate function cancelled*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "010"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  exit stack; /* Exit to display map*/


end // end PT02010

// ftwr b-grade reports
Function PT02020()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If request for data switch set, obtain data.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PT02W00.PT02WRD2 == "Y" /* request for data switch = yes*/
   && converseVar.validationMsgNum == 0) /* and no previous errors*/
    PT02021(); /* Obtain data*/
    PT02W00.PT02WRD2 = "N"; /* SET SWITCH TO 'NO'*/
  end

  PT02022(); /* Format and display the map*/

  PT02023(); /* Check attention identifier*/

  PT02024(); /* Reset fields to normal intensity*/

  PT02025(); /* Verify the data that was entered*/

  PT02026(); /* Process valid input request*/


end // end PT02020

// select 's' dprodg.vsygrp01
Function PT02021()
   /* ------------------------------------------------------------*/
   /* obtain default date from dcorp.vparm101*/
   /* ------------------------------------------------------------*/

  set XZZREC empty;
  XZZREC.XZZQRYID = "PT4500"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/
  try
    call "IO1000" ("S ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
         /* MOVE XZZREC.XZZ4CHR1 TO PT02M002.PT02MFAC;*/
         /* MOVE XZZREC.XZZ6CHR TO PT02M002.PT02MSTY;*/
         /* MOVE XZZREC.XZZ3CHR1 TO PT02M002.PT02MCLR;*/
         /* MOVE XZZREC.XZZ2CHR1 TO PT02M002.PT02MDIM;*/
         /* MOVE XZZREC.XZZ4CHR2 TO PT02M002.PT02MCTY;*/
         /* MOVE XZZREC.XZZ2CHR1 TO PT02M002.PT02MPLC;*/
         /* MOVE XZZREC.XZZ2CHR1 TO PT02M002.PT02MPCC;*/
      PT02M002.PT02MFAC = "****";
      PT02M002.PT02MSTY = "******";
      PT02M002.PT02MCLR = "***";
      PT02M002.PT02MDIM = "**";
      PT02M002.PT02MCTY = "****";
      PT02M002.PT02MPLC = "**";
      PT02M002.PT02MPCC = "**";
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "021"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
   /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT02021

// Format and display the map
Function PT02022()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    PT02M002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  PT02M002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT02M002.XURDEST = TA6REC.XURDEST; /* Print destination*/
  PT02M002.XRODESC = TA6REC.XRODESC; /* Printer description*/
  PT02M002.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  PT02M002.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  PT02M002.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT02M002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT02M002.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT02M002 alarm; /* Indicate sound alarm*/

  end

  converse PT02M002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PT02022

// Check attention identifier
Function PT02023()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PT02W00.PT02MSEL[2] = "C"; /* Indicate selection cancelled*/

    set PT02M002 initial; /* m002 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PT02W00.PT02MSEL[2] = " "; /* Indicate nothing happened*/
    COMMAREA.CAMSG = "NO ACTION TAKEN ON PREVIOUS SCREEN";

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "023"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PT02023

// Reset highlighted fields
Function PT02024()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PT02M002.PT02MFAC normal; /* factory code*/
  set PT02M002.PT02MSTY normal; /* style*/
  set PT02M002.PT02MCLR normal; /* color*/
  set PT02M002.PT02MDIM normal; /* dimension*/
  set PT02M002.PT02MCTY normal; /* country*/
  set PT02M002.PT02MPLC normal; /* product line*/
  set PT02M002.PT02MPCC normal; /* product category*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PT02M002.PT02MCTY == "?" /* country code*/
   || PT02M002.PT02MPLC == "?" /* product line code*/
   || PT02M002.PT02MPCC == "?") /* product category*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      PTWREC.XXXMODID = "024"; /* Module identification*/
      converseLib.validationFailed(4); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of country codes*/
   /* ------------------------------------------------------------*/

  if (PT02M002.PT02MCTY == "?") /* country code*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "COUNTRY CODE "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      PT02M002.PT02MCTY = XCTTBL.XCTCD[XX0XWPIX]; /* Selected code*/

    end

    set PT02M002.PT02MCTY cursor; /* Establish cursor position*/

  end


   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes*/
   /* ------------------------------------------------------------*/

  if (PT02M002.PT02MPLC == "?") /* product line*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PROD LINE CODE"; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      PT02M002.PT02MPLC = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/

    end

    set PT02M002.PT02MPLC cursor; /* Establish cursor position*/

  end


   /* ------------------------------------------------------------*/
   /* If requested, display the list of product categories*/
   /* ------------------------------------------------------------*/

  if (PT02M002.PT02MPCC == "?") /* product line*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PROD CATEGORY "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      PT02M002.PT02MPCC = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/

    end

    set PT02M002.PT02MPCC cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  PTWREC.XXXMODID = "024"; /* Module identification*/
  converseLib.validationFailed(42); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end PT02024

// Verify the entered data
Function PT02025()
   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

  PT02W00.PT02WERF = "N";

   /* ------------------------------------------------------------*/
   /* validate factory code*/
   /* ------------------------------------------------------------*/

  if (PT02M002.PT02MFAC != "*   "
   && PT02M002.PT02MFAC != "**  "
   && PT02M002.PT02MFAC != "*** "
   && PT02M002.PT02MFAC != "****")
    set FY1REC empty;
    FY1REC.FY1FCTYC = PT02M002.PT02MFAC;
    FY1REC.XGPCD = "02";

    try
      call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes};
    end
    if (SQLCA.VAGen_SQLCODE != 0)
      set PT02M002.PT02MFAC cursor, bold; /* Highlight*/
      PT02W00.PT02WERF = "Y";
      converseLib.validationFailed(84); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "025";
      return;
    else
      set PT02M002.PT02MFAC initialAttributes;
    end
  else
    set PT02M002.PT02MFAC initialAttributes;
    PT02M002.PT02MFAC = "****";
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate style number*/
   /* ------------------------------------------------------------*/
  if (PT02M002.PT02MSTY != " "
   && PT02M002.PT02MSTY != "*     "
   && PT02M002.PT02MSTY != "**    "
   && PT02M002.PT02MSTY != "***   "
   && PT02M002.PT02MSTY != "****  "
   && PT02M002.PT02MSTY != "***** "
   && PT02M002.PT02MSTY != "******")

    set PG2REC empty;

    PG2REC.XGPCD = COMMAREA.XGPCD;
    PG2REC.SY1STNBR = PT02M002.PT02MSTY;
    if (PT02M002.PT02MCLR != "*  "
     && PT02M002.PT02MCLR != "** "
     && PT02M002.PT02MCLR != "***")
      PG2REC.SY2CLRID = PT02M002.PT02MCLR;
    else
      PT02M002.PT02MCLR = "***";
      PG2REC.SY2CLRID = "00";
    end
    if (PT02M002.PT02MDIM != "* "
     && PT02M002.PT02MDIM != "**")
      PG2REC.XDMCD = PT02M002.PT02MDIM;
    else
      PT02M002.PT02MDIM = "**";
      PG2REC.XDMCD = "00";
    end

    PT02S21(); /* validate style nbr*/

    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(95);
      PT02W00.PT02WERF = "Y";
      PTWREC.XXXMODID = "025";
      set PT02M002.PT02MSTY cursor, bold;
    else
      set PT02M002.PT02MSTY initialAttributes;
    end

  else
    set PT02M002.PT02MSTY initialAttributes;
    PT02M002.PT02MSTY = "******";

  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate color code*/
   /* ------------------------------------------------------------*/

  if (PT02M002.PT02MCLR != " "
   && PT02M002.PT02MCLR != "*  "
   && PT02M002.PT02MCLR != "** "
   && PT02M002.PT02MCLR != "***")
    set PT02M002.PT02MCLR initialAttributes;
  else
    PT02M002.PT02MCLR = "***";
    set PT02M002.PT02MCLR initialAttributes;
  end


   /* ------------------------------------------------------------*/
   /* validate dimension code*/
   /* ------------------------------------------------------------*/

  if (PT02M002.PT02MDIM != " "
   && PT02M002.PT02MDIM != "*  "
   && PT02M002.PT02MDIM != "** "
   && PT02M002.PT02MCLR != "***")
    set PT02M002.PT02MDIM initialAttributes;
  else
    PT02M002.PT02MDIM = "***";
    set PT02M002.PT02MDIM initialAttributes;
  end

   /* ------------------------------------------------------------*/
   /* validate country code*/
   /* ------------------------------------------------------------*/

  if (PT02M002.PT02MCTY != "*   "
   && PT02M002.PT02MCTY != "**  "
   && PT02M002.PT02MCTY != "*** "
   && PT02M002.PT02MCTY != "****")
    if (PT02M002.PT02MCTY in XCTTBL.XCTCD)
      set PT02M002.PT02MCTY initialAttributes;
    else
      PT02W00.PT02WERF = "Y";
      converseLib.validationFailed(96);
      PTWREC.XXXMODID = "025";
      set PT02M002.PT02MCTY cursor, bold;
    end
  else
    set PT02M002.PT02MCTY initialAttributes;
    PT02M002.PT02MCTY = "****";

  end


   /* ------------------------------------------------------------*/
   /* validate product line,*/
   /* ------------------------------------------------------------*/

  if (PT02M002.PT02MPLC != "* "
   && PT02M002.PT02MPLC != " *"
   && PT02M002.PT02MPLC != "**")
    if (PT02M002.PT02MPLC in XPLTBL.XPLCD)
      set PT02M002.PT02MPLC initialAttributes;
    else
      PT02W00.PT02WERF = "Y";
      converseLib.validationFailed(98);
      PTWREC.XXXMODID = "025";
      set PT02M002.PT02MPLC cursor, bold;
    end
  else
    set PT02M002.PT02MPLC initialAttributes;
    PT02M002.PT02MPLC = "**";
  end

   /* ------------------------------------------------------------*/
   /* validate product category*/
   /* ------------------------------------------------------------*/

  if (PT02M002.PT02MPCC != "* "
   && PT02M002.PT02MPCC != " *"
   && PT02M002.PT02MPCC != "**")
    if (PT02M002.PT02MPCC in XPCTBL.XPCCD)
      set PT02M002.PT02MPCC initialAttributes;
    else
      PT02W00.PT02WERF = "Y";
      converseLib.validationFailed(99);
      PTWREC.XXXMODID = "025";
      set PT02M002.PT02MPCC cursor, bold;
    end
  else
    set PT02M002.PT02MPCC initialAttributes;
    PT02M002.PT02MPCC = "**";
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end


end // end PT02025

// Process valid input request
Function PT02026()
   /* ------------------------------------------------------------*/
   /* if errors present dont submit job*/
   /* ------------------------------------------------------------*/

  if (PT02W00.PT02WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/
  PT02W00.PT02WIXT = 1;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03") /* if on production system*/
    PT02027(); /* format production jcl*/
  else
    PT02028(); /* format test jcl*/
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "026"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PT02W00.PT02MSEL[2] = "*"; /* Indicate function completed*/
    COMMAREA.CAMSG = "FOOTWEAR B-GRADE REPORT - WAS SUBMITTED";

    set PT02M002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end PT02026

// Process valid production jcl
Function PT02027()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  PT02W00.PT02WFLG = "N";
  PT02W02.PT02MFAC = PT02M002.PT02MFAC;
  PT02W02.PT02MSTY = PT02M002.PT02MSTY;
  PT02W02.PT02MCLR = PT02M002.PT02MCLR;
  PT02W02.PT02MDIM = PT02M002.PT02MDIM;
  PT02W02.PT02MCTY = PT02M002.PT02MCTY;
  PT02W02.PT02MPLC = PT02M002.PT02MPLC;
  PT02W02.PT02MPCC = PT02M002.PT02MPCC;
  PT02W02.PT02MPTG = "**";
  PT02W02.PT02MHST = "NO";
  PT02W02.PT02WFIL = " ";

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT02T02.TARTYPE[PT02WIXT] == "W")
      if (PT02M002.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT21 FORMS=PT21,COPIES=1,DEST=RMT00";
        TA6REC.TARTYPE[TA6INDEX] = " ";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT31 FORMS=PT31,COPIES=1,DEST=RMT00";
        TA6REC.TARTYPE[TA6INDEX] = " ";
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT21 FORMS=PT21,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT31 FORMS=PT31,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    else

      if (PT02T02.TARJCL[PT02WIXT] == "===FILE01===")
        if (PT02M002.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT21)'";
          TA6REC.TARTYPE[TA6INDEX] = " ";
        else
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT21)'";
          TA6REC.TARTYPE[TA6INDEX] = " ";
        end
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      else

        if (PT02T02.TARJCL[PT02WIXT] == "===FILE02===")
          if (PT02M002.XURDEST == "LOCAL") /* destination lazer*/
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT31)'";
            TA6REC.TARTYPE[TA6INDEX] = " ";
          else
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT31)'";
            TA6REC.TARTYPE[TA6INDEX] = " ";
          end
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        else

          if (PT02T02.TARJCL[PT02WIXT] == "===INSERT PARM===")
            TA6REC.TARJCL[TA6INDEX] = PT02W02.TARJCL;
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          else

            if (PT02T02.TARJCL[PT02WIXT] == "===INSERT FROM SCREEN===")
              if (PT02M002.PT02MFAC != "****")
                PT02W2A.PT02WPR1 = "  INCLUDE COND=(01,04,CH,EQ,C'";
                PT02W00.PT02WFLG = "Y";
                PT02W2A.PT02MFAC = PT02M002.PT02MFAC;
                if (PT02M002.PT02MSTY != "******"
                 || PT02M002.PT02MCLR != "***"
                 || PT02M002.PT02MDIM != "**"
                 || PT02M002.PT02MCTY != "****"
                 || PT02M002.PT02MPLC != "**"
                 || PT02M002.PT02MPCC != "**")
                  PT02W2A.PT02WSF1 = "',AND,";
                else
                  PT02W2A.PT02WSF1 = "')";
                end
                PT02W2A.PT02WFL1 = " ";
                TA6REC.TARJCL[TA6INDEX] = PT02W2A.PT02WJC1;
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              end
              if (PT02M002.PT02MSTY != "******")
                if (PT02W00.PT02WFLG == "N")
                  PT02W2A.PT02WPR2 = "  INCLUDE COND=(05,06,CH,EQ,C'";
                  PT02W00.PT02WFLG = "Y";
                else
                  PT02W2A.PT02WPR2 = "                05,06,CH,EQ,C'";
                end
                PT02W2A.PT02MSTY = PT02M002.PT02MSTY;
                if (PT02M002.PT02MCLR != "***"
                 || PT02M002.PT02MDIM != "**"
                 || PT02M002.PT02MCTY != "****"
                 || PT02M002.PT02MPLC != "**"
                 || PT02M002.PT02MPCC != "**")
                  PT02W2A.PT02WSF2 = "',AND,";
                else
                  PT02W2A.PT02WSF2 = "')";
                end
                PT02W2A.PT02WFL2 = " ";
                TA6REC.TARJCL[TA6INDEX] = PT02W2A.PT02WJC2;
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              end
              if (PT02M002.PT02MCLR != "***")
                if (PT02W00.PT02WFLG == "N")
                  PT02W2A.PT02WPR3 = "  INCLUDE COND=(11,03,CH,EQ,C'";
                  PT02W00.PT02WFLG = "Y";
                else
                  PT02W2A.PT02WPR3 = "                11,03,CH,EQ,C'";
                end
                PT02W2A.PT02MCLR = PT02M002.PT02MCLR;
                if (PT02M002.PT02MDIM != "**"
                 || PT02M002.PT02MCTY != "****"
                 || PT02M002.PT02MPLC != "**"
                 || PT02M002.PT02MPCC != "**")
                  PT02W2A.PT02WSF3 = "',AND,";
                else
                  PT02W2A.PT02WSF3 = "')";
                end
                PT02W2A.PT02WFL3 = " ";
                TA6REC.TARJCL[TA6INDEX] = PT02W2A.PT02WJC3;
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              end
              if (PT02M002.PT02MDIM != "**")
                if (PT02W00.PT02WFLG == "N")
                  PT02W2A.PT02WPR4 = "  INCLUDE COND=(14,02,CH,EQ,C'";
                  PT02W00.PT02WFLG = "Y";
                else
                  PT02W2A.PT02WPR4 = "                14,02,CH,EQ,C'";
                end
                PT02W2A.PT02MDIM = PT02M002.PT02MDIM;
                if (PT02M002.PT02MCTY != "****"
                 || PT02M002.PT02MPLC != "**"
                 || PT02M002.PT02MPCC != "**")
                  PT02W2A.PT02WSF4 = "',AND,";
                else
                  PT02W2A.PT02WSF4 = "')";
                end
                PT02W2A.PT02WFL4 = " ";
                TA6REC.TARJCL[TA6INDEX] = PT02W2A.PT02WJC4;
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              end
              if (PT02M002.PT02MCTY != "****")
                if (PT02W00.PT02WFLG == "N")
                  PT02W2A.PT02WPR5 = "  INCLUDE COND=(16,04,CH,EQ,C'";
                  PT02W00.PT02WFLG = "Y";
                else
                  PT02W2A.PT02WPR5 = "                16,04,CH,EQ,C'";
                end
                PT02W2A.PT02MCTY = PT02M002.PT02MCTY;
                if (PT02M002.PT02MPLC != "**"
                 || PT02M002.PT02MPCC != "**")
                  PT02W2A.PT02WSF5 = "',AND,";
                else
                  PT02W2A.PT02WSF5 = "')";
                end
                PT02W2A.PT02WFL5 = " ";
                TA6REC.TARJCL[TA6INDEX] = PT02W2A.PT02WJC5;
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              end
              if (PT02M002.PT02MPLC != "**")
                if (PT02W00.PT02WFLG == "N")
                  PT02W2A.PT02WPR6 = "  INCLUDE COND=(230,2,CH,EQ,C'";
                  PT02W00.PT02WFLG = "Y";
                else
                  PT02W2A.PT02WPR6 = "                230,2,CH,EQ,C'";
                end
                PT02W2A.PT02MPLC = PT02M002.PT02MPLC;
                if (PT02M002.PT02MPCC != "**")
                  PT02W2A.PT02WSF6 = "',AND,";
                else
                  PT02W2A.PT02WSF6 = "')";
                end
                PT02W2A.PT02WFL6 = " ";
                TA6REC.TARJCL[TA6INDEX] = PT02W2A.PT02WJC6;
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              end
              if (PT02M002.PT02MPCC != "**")
                if (PT02W00.PT02WFLG == "N")
                  PT02W2A.PT02WPR7 = "  INCLUDE COND=(232,2,CH,EQ,C'";
                  PT02W00.PT02WFLG = "Y";
                else
                  PT02W2A.PT02WPR7 = "                232,2,CH,EQ,C'";
                end
                PT02W2A.PT02MPCC = PT02M002.PT02MPCC;
                PT02W2A.PT02WSF7 = "')";
                PT02W2A.PT02WFL7 = " ";
                TA6REC.TARJCL[TA6INDEX] = PT02W2A.PT02WJC7;
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
              end
            else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

              TA6REC.TARJCL[TA6INDEX] = PT02T02.TARJCL[PT02WIXT]; /* JCL*/
              TA6REC.TARTYPE[TA6INDEX] = PT02T02.TARTYPE[PT02WIXT]; /* Type*/
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

            end
          end
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT02T02.TARJCL[PT02WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT02W00.PT02WIXT = PT02W00.PT02WIXT + 1; /* Input table index*/

    end

  end
end // end PT02027

// Process valid test jcl
Function PT02028()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  PT02W00.PT02WFLG = "N";
  PT02W02.PT02MFAC = PT02M002.PT02MFAC;
  PT02W02.PT02MSTY = PT02M002.PT02MSTY;
  PT02W02.PT02MCLR = PT02M002.PT02MCLR;
  PT02W02.PT02MDIM = PT02M002.PT02MDIM;
  PT02W02.PT02MCTY = PT02M002.PT02MCTY;
  PT02W02.PT02MPLC = PT02M002.PT02MPLC;
  PT02W02.PT02MPCC = PT02M002.PT02MPCC;
  PT02W02.PT02MPTG = "**";
  PT02W02.PT02MHST = "NO";
  PT02W02.PT02WFIL = " ";

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT02T12.TARJCL[PT02WIXT] == "===OUTPUT1===")
      if (PT02M002.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT21 FORMS=PT21,COPIES=1,DEST=RMT00";
        TA6REC.TARTYPE[TA6INDEX] = " ";
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT21 FORMS=PT21,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    else

      if (PT02T12.TARJCL[PT02WIXT] == "===OUTPUT2===")
        if (PT02M002.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT31 FORMS=PT31,COPIES=1,DEST=RMT00";
          TA6REC.TARTYPE[TA6INDEX] = " ";
        else
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT31 FORMS=PT31,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
        end
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      else

        if (PT02T12.TARJCL[PT02WIXT] == "===FILE01===")
          if (PT02M002.XURDEST == "LOCAL") /* destination lazer*/
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(2,,PT21)'";
            TA6REC.TARTYPE[TA6INDEX] = " ";
          else
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(T,,PT21)'";
            TA6REC.TARTYPE[TA6INDEX] = " ";
          end
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        else

          if (PT02T12.TARJCL[PT02WIXT] == "===FILE02===")
            if (PT02M002.XURDEST == "LOCAL") /* destination lazer*/
              TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(2,,PT31)'";
              TA6REC.TARTYPE[TA6INDEX] = " ";
            else
              TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(T,,PT31)'";
              TA6REC.TARTYPE[TA6INDEX] = " ";
            end
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
          else

            if (PT02T12.TARJCL[PT02WIXT] == "===INSERT PARM===")
              TA6REC.TARJCL[TA6INDEX] = PT02W02.TARJCL;
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
            else

              if (PT02T12.TARJCL[PT02WIXT] == "===INSERT FROM SCREEN===")
                if (PT02M002.PT02MFAC != "****")
                  PT02W2A.PT02WPR1 = "  INCLUDE COND=(01,04,CH,EQ,C'";
                  PT02W00.PT02WFLG = "Y";
                  PT02W2A.PT02MFAC = PT02M002.PT02MFAC;
                  if (PT02M002.PT02MSTY != "******"
                   || PT02M002.PT02MCLR != "***"
                   || PT02M002.PT02MDIM != "**"
                   || PT02M002.PT02MCTY != "****"
                   || PT02M002.PT02MPLC != "**"
                   || PT02M002.PT02MPCC != "**")
                    PT02W2A.PT02WSF1 = "',AND,";
                  else
                    PT02W2A.PT02WSF1 = "')";
                  end
                  PT02W2A.PT02WFL1 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT02W2A.PT02WJC1;
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                end
                if (PT02M002.PT02MSTY != "******")
                  if (PT02W00.PT02WFLG == "N")
                    PT02W2A.PT02WPR2 = "  INCLUDE COND=(05,06,CH,EQ,C'";
                    PT02W00.PT02WFLG = "Y";
                  else
                    PT02W2A.PT02WPR2 = "                05,06,CH,EQ,C'";
                  end
                  PT02W2A.PT02MSTY = PT02M002.PT02MSTY;
                  if (PT02M002.PT02MCLR != "***"
                   || PT02M002.PT02MDIM != "**"
                   || PT02M002.PT02MCTY != "****"
                   || PT02M002.PT02MPLC != "**"
                   || PT02M002.PT02MPCC != "**")
                    PT02W2A.PT02WSF2 = "',AND,";
                  else
                    PT02W2A.PT02WSF2 = "')";
                  end
                  PT02W2A.PT02WFL2 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT02W2A.PT02WJC2;
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                end
                if (PT02M002.PT02MCLR != "***")
                  if (PT02W00.PT02WFLG == "N")
                    PT02W2A.PT02WPR3 = "  INCLUDE COND=(11,03,CH,EQ,C'";
                    PT02W00.PT02WFLG = "Y";
                  else
                    PT02W2A.PT02WPR3 = "                11,03,CH,EQ,C'";
                  end
                  PT02W2A.PT02MCLR = PT02M002.PT02MCLR;
                  if (PT02M002.PT02MDIM != "**"
                   || PT02M002.PT02MCTY != "****"
                   || PT02M002.PT02MPLC != "**"
                   || PT02M002.PT02MPCC != "**")
                    PT02W2A.PT02WSF3 = "',AND,";
                  else
                    PT02W2A.PT02WSF3 = "')";
                  end
                  PT02W2A.PT02WFL3 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT02W2A.PT02WJC3;
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                end
                if (PT02M002.PT02MDIM != "**")
                  if (PT02W00.PT02WFLG == "N")
                    PT02W2A.PT02WPR4 = "  INCLUDE COND=(14,02,CH,EQ,C'";
                    PT02W00.PT02WFLG = "Y";
                  else
                    PT02W2A.PT02WPR4 = "                14,02,CH,EQ,C'";
                  end
                  PT02W2A.PT02MDIM = PT02M002.PT02MDIM;
                  if (PT02M002.PT02MCTY != "****"
                   || PT02M002.PT02MPLC != "**"
                   || PT02M002.PT02MPCC != "**")
                    PT02W2A.PT02WSF4 = "',AND,";
                  else
                    PT02W2A.PT02WSF4 = "')";
                  end
                  PT02W2A.PT02WFL4 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT02W2A.PT02WJC4;
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                end
                if (PT02M002.PT02MCTY != "****")
                  if (PT02W00.PT02WFLG == "N")
                    PT02W2A.PT02WPR5 = "  INCLUDE COND=(16,04,CH,EQ,C'";
                    PT02W00.PT02WFLG = "Y";
                  else
                    PT02W2A.PT02WPR5 = "                16,04,CH,EQ,C'";
                  end
                  PT02W2A.PT02MCTY = PT02M002.PT02MCTY;
                  if (PT02M002.PT02MPLC != "**"
                   || PT02M002.PT02MPCC != "**")
                    PT02W2A.PT02WSF5 = "',AND,";
                  else
                    PT02W2A.PT02WSF5 = "')";
                  end
                  PT02W2A.PT02WFL5 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT02W2A.PT02WJC5;
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                end
                if (PT02M002.PT02MPLC != "**")
                  if (PT02W00.PT02WFLG == "N")
                    PT02W2A.PT02WPR6 = "  INCLUDE COND=(230,2,CH,EQ,C'";
                    PT02W00.PT02WFLG = "Y";
                  else
                    PT02W2A.PT02WPR6 = "                230,2,CH,EQ,C'";
                  end
                  PT02W2A.PT02MPLC = PT02M002.PT02MPLC;
                  if (PT02M002.PT02MPCC != "**")
                    PT02W2A.PT02WSF6 = "',AND,";
                  else
                    PT02W2A.PT02WSF6 = "')";
                  end
                  PT02W2A.PT02WFL6 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT02W2A.PT02WJC6;
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                end
                if (PT02M002.PT02MPCC != "**")
                  if (PT02W00.PT02WFLG == "N")
                    PT02W2A.PT02WPR7 = "  INCLUDE COND=(232,2,CH,EQ,C'";
                    PT02W00.PT02WFLG = "Y";
                  else
                    PT02W2A.PT02WPR7 = "                232,2,CH,EQ,C'";
                  end
                  PT02W2A.PT02MPCC = PT02M002.PT02MPCC;
                  PT02W2A.PT02WSF7 = "')";
                  PT02W2A.PT02WFL7 = " ";
                  TA6REC.TARJCL[TA6INDEX] = PT02W2A.PT02WJC7;
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                end
              else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

                TA6REC.TARJCL[TA6INDEX] = PT02T12.TARJCL[PT02WIXT]; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = PT02T12.TARTYPE[PT02WIXT]; /* Type*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

              end
            end
          end
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT02T12.TARJCL[PT02WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT02W00.PT02WIXT = PT02W00.PT02WIXT + 1; /* Input table index*/

    end

  end
end // end PT02028

// ftwr lte prod'n mapper request
Function PT02050()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If first time thru, Obtain default data.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PT02W00.PT02WRD5 == "Y" /* if switch is on*/
   && converseVar.validationMsgNum == 0) /* and no previous errors*/
    PT02051(); /* Obtain default data*/
    PT02W00.PT02WRD5 = "N"; /* set switch off*/
  end

  PT02052(); /* Format and display the map*/

  PT02053(); /* Check attention identifier*/

  PT02054(); /* Reset fields to normal intensity*/

  PT02055(); /* Verify the data that was entered*/

  PT02056(); /* Process valid input request*/


end // end PT02050

// select 's' dprodg.vsygrp01
Function PT02051()
   /* ------------------------------------------------------------*/
   /* obtain default date from dcorp.vparm101*/
   /* ------------------------------------------------------------*/

  set XZZREC empty;
  XZZREC.XZZQRYID = "PT4300"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/
  try
    call "IO1000" ("S ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PT02M005.PT02MPRM = XZZREC.XZZ1CHR1;
      PT02M005.PT02MLPD = XZZREC.XZZINT1;
      PT02M005.PT02MSCH = XZZREC.XZZ2CHR1;
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "051"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
   /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT02051

// Format and display the map
Function PT02052()
   /* ------------------------------------------------------------*/
   /* If user is authorized, allow access to parm update field.*/
   /* ------------------------------------------------------------*/

  if (PT02W00.PT02WERF == "N") /* No edir errors*/
    if (CACHGFL == "Y") /* Updates allowed by this user*/
      set PT02M005.PT02MPRM cursor; /* Have cursor appear here first*/
    else
      set PT02M005.PT02MLPD cursor; /* Have cursor appear here first*/
      set PT02M005.PT02MPRM skip; /* No access to this field*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    PT02M005.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  PT02M005.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT02M005.XURDEST = TA6REC.XURDEST; /* Print destination*/
  PT02M005.XRODESC = TA6REC.XRODESC; /* Printer description*/
  PT02M005.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  PT02M005.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  PT02M005.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT02M005.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT02M005.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT02M005 alarm; /* Indicate sound alarm*/

  end

  converse PT02M005 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PT02052

// Check attention identifier
Function PT02053()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PT02W00.PT02MSEL[5] = "C"; /* Indicate selection cancelled*/

    set PT02M005 initial; /* m005 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PT02W00.PT02MSEL[5] = " "; /* Indicate nothing happened*/
    COMMAREA.CAMSG = "NO ACTION TAKEN ON PREVIOUS SCREEN";

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "053"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PT02053

// Reset highlighted fields
Function PT02054()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (CACHGFL == "Y")
    set PT02M005.PT02MPRM initialAttributes;
  else
    set PT02M005.PT02MPRM skip;
  end
  set PT02M005.PT02MLPD initialAttributes;
  set PT02M005.PT02MSCH initialAttributes;


end // end PT02054

// Verify the entered data
Function PT02055()

   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

  PT02W00.PT02WERF = "N";

   /* ------------------------------------------------------------*/
   /* validate parm update field*/
   /* ------------------------------------------------------------*/

  if (PT02M005.PT02MPRM != "P"
   && PT02M005.PT02MPRM != "R")
    PT02W00.PT02WERF = "Y";
    converseLib.validationFailed(80);
    PTWREC.XXXMODID = "055";
    set PT02M005.PT02MPRM cursor, bold;
    return;
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate late production due date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGG = PT02M005.PT02MLPD;
  PT02S02(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set PT02M005.PT02MLPD cursor, bold; /* Highlight*/
    PT02W00.PT02WERF = "Y";
    converseLib.validationFailed(81); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "055";
    return;
  else
    set PT02M005.PT02MLPD initialAttributes;
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate scheduler code*/
   /* ------------------------------------------------------------*/

  if (PT02M005.PT02MSCH != "* "
   && PT02M005.PT02MSCH != " *"
   && PT02M005.PT02MSCH != "**")
    set PG1REC empty;
    PG1REC.PG1SC4CD = PT02M005.PT02MSCH;
    PG1REC.PG1FCTCD = "  ";
    PG1REC.XGPCD = "02";

    try
      call "IO1200" ("S ", SQLCA, PG1REC) {isNoRefresh = yes};
    end
    if (SQLCA.VAGen_SQLCODE != 0)
      set PT02M005.PT02MSCH cursor, bold; /* Highlight*/
      PT02W00.PT02WERF = "Y";
      converseLib.validationFailed(86); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "055";
      return;
    end
  end



end // end PT02055

// Process valid input request
Function PT02056()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

  if (PT02W00.PT02WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* if parm update was requested then UPDATE PARMS!! NOOOW!!!!!!*/
   /* ------------------------------------------------------------*/

  if (PT02M005.PT02MPRM == "P")

    PT02S56();
    PT02W00.PT02MSEL[5] = "*";
    COMMAREA.CAMSG = "FOOTWEAR LATE PROD SUMMARY PARMS - UPDATED";
    return;

  end


   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/
  PT02W00.PT02WIXT = 1;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03") /* if on production system*/
    PT02057(); /* format production jcl*/
  else
    PT02058(); /* format test jcl*/
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "056"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PT02W00.PT02MSEL[5] = "*"; /* Indicate function completed*/
    COMMAREA.CAMSG = "FTWR LATE PROD - SUBMITTED";

    set PT02M005 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end PT02056

// Process valid production jcl
Function PT02057()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT02T05.TARTYPE[PT02WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set PT02W05 empty; /* Parameters work area*/

      PT02W05.PT02MPRM = "F";
      PT02W05.PT02MLPD = PT02M005.PT02MLPD;
      PT02W05.PT02MSCH = PT02M005.PT02MSCH;

      TA6REC.TARJCL[TA6INDEX] = PT02W05.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PT02T05.TARJCL[PT02WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT02T05.TARTYPE[PT02WIXT]; /* Type*/

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT02T05.TARJCL[PT02WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT02W00.PT02WIXT = PT02W00.PT02WIXT + 1; /* Input table index*/

    end

  end

end // end PT02057

// Process valid test jcl
Function PT02058()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT02T15.TARTYPE[PT02WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set PT02W05 empty; /* Parameters work area*/

      PT02W05.PT02MPRM = "F";
      PT02W05.PT02MLPD = PT02M005.PT02MLPD;
      PT02W05.PT02MSCH = PT02M005.PT02MSCH;

      TA6REC.TARJCL[TA6INDEX] = PT02W05.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PT02T15.TARJCL[PT02WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT02T15.TARTYPE[PT02WIXT]; /* Type*/

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT02T15.TARJCL[PT02WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT02W00.PT02WIXT = PT02W00.PT02WIXT + 1; /* Input table index*/

    end

  end

end // end PT02058

// ftwr negative availability
Function PT02060()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If request for data switch set, obtain data.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PT02W00.PT02WRD6 == "Y" /* request for data switch = yes*/
   && converseVar.validationMsgNum == 0) /* and no previous errors*/
    PT02S61(); /* Obtain data*/
    PT02W00.PT02WRD6 = "N"; /* SET SWITCH TO 'NO'*/
  end

  PT02062(); /* Format and display the map*/

  PT02063(); /* Check attention identifier*/

  PT02064(); /* Reset fields to normal intensity*/

  PT02065(); /* Verify the data that was entered*/

  PT02066(); /* Process valid input request*/


end // end PT02060

// Format and display the map
Function PT02062()
   /* ------------------------------------------------------------*/
   /* If user is authorized, allow access to parm update field.*/
   /* ------------------------------------------------------------*/

  if (PT02W00.PT02WERF == "N") /* No edir errors*/
    if (CACHGFL == "Y") /* Updates allowed by this user*/
      set PT02M006.PT02MPRM cursor; /* Have cursor appear here first*/
    else
      set PT02M006.PT02MNSZ cursor; /* Have cursor appear here first*/
      set PT02M006.PT02MPRM skip; /* No access to this field*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    PT02M006.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  PT02M006.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT02W00.PT02W-CURR-DATE = VGVar.currentShortGregorianDate; /* Current date*/

  PT02M006.XURDEST = TA6REC.XURDEST; /* Print destination*/
  PT02M006.XRODESC = TA6REC.XRODESC; /* Printer description*/
  PT02M006.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  PT02M006.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  PT02M006.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT02M006.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT02M006.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT02M006 alarm; /* Indicate sound alarm*/

  end

  converse PT02M006 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PT02062

// Check attention identifier
Function PT02063()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PT02W00.PT02MSEL[6] = "C"; /* Indicate selection cancelled*/

    set PT02M006 initial; /* m006 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PT02W00.PT02MSEL[6] = " "; /* Indicate nothing happened*/
    COMMAREA.CAMSG = "NO ACTION TAKEN ON PREVIOUS SCREEN";

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "062"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PT02063

// Reset highlighted fields
Function PT02064()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (CACHGFL == "Y")
    set PT02M006.PT02MPRM initialAttributes;
  else
    set PT02M006.PT02MPRM skip;
  end
  set PT02M006.PT02MNSZ initialAttributes;
  set PT02M006.PT02MASC initialAttributes;
  set PT02M006.PT02MTLQ initialAttributes;
  set PT02M006.PT02MPRC initialAttributes;
  set PT02M006.PT02MPLC initialAttributes;
  set PT02M006.PT02MPCC initialAttributes;
  set PT02M006.PT02MRPD initialAttributes;
  set PT02M006.PT02MPPS initialAttributes;
  set PT02M006.PT02MPPE initialAttributes;


   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PT02M006.PT02MPRC == "?" /* product type group code*/
   || PT02M006.PT02MPLC == "?" /* product line code*/
   || PT02M006.PT02MPCC == "?") /* product category*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      PTWREC.XXXMODID = "064"; /* Module identification*/
      converseLib.validationFailed(4); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type code*/
   /* ------------------------------------------------------------*/

  if (PT02M006.PT02MPRC == "?") /* product type code*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT TYPE CODE"; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      PT02M006.PT02MPRC = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/

    end

    set PT02M006.PT02MPRC cursor; /* Establish cursor position*/

  end


   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes*/
   /* ------------------------------------------------------------*/

  if (PT02M006.PT02MPLC == "?") /* product line*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT LINE CODE"; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      PT02M006.PT02MPLC = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/

    end

    set PT02M006.PT02MPLC cursor; /* Establish cursor position*/

  end


   /* ------------------------------------------------------------*/
   /* If requested, display the list of product categories*/
   /* ------------------------------------------------------------*/

  if (PT02M006.PT02MPCC == "?") /* product line*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT CATEGORY CODE "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      PT02M006.PT02MPCC = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/

    end

    set PT02M006.PT02MPCC cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  PTWREC.XXXMODID = "064"; /* Module identification*/
  converseLib.validationFailed(42); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end PT02064

// Verify the entered data
Function PT02065()

   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

  PT02W00.PT02WERF = "N";

   /* ------------------------------------------------------------*/
   /* validate parm update field*/
   /* ------------------------------------------------------------*/

  if (PT02M006.PT02MPRM != "P"
   && PT02M006.PT02MPRM != "R")
    PT02W00.PT02WERF = "Y";
    converseLib.validationFailed(80);
    PTWREC.XXXMODID = "065";
    set PT02M006.PT02MPRM cursor, bold;
    return;
  else
    set PT02M006.PT02MPRM initialAttributes;
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate number of sizes*/
   /* ------------------------------------------------------------*/
  if (PT02M006.PT02MNSZ < 0)
    converseLib.validationFailed(100);
    PT02W00.PT02WERF = "Y";
    set PT02M006.PT02MNSZ cursor, bold;
  else
    set PT02M006.PT02MNSZ initialAttributes;
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate tolerance quantity*/
   /* ------------------------------------------------------------*/
  if (PT02M006.PT02MTLQ <= 0)
    converseLib.validationFailed(101);
    PT02W00.PT02WERF = "Y";
    set PT02M006.PT02MTLQ cursor, bold;
  else
    set PT02M006.PT02MTLQ initialAttributes;
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* Validate entered valued of calculated period*/
   /* ------------------------------------------------------------*/

  if (PT02M006.PT02MRPD == 0 ||  /* No value if entered*/
  PT02M006.PT02MRPD < 0)        
    PT02M006.PT02MRPD = 10;
  end

  if (PT02M006.PT02MRPD > 10
   || PT02M006.PT02MRPD < 5)
    set PT02M006.PT02MRPD cursor, bold;
    PT02W00.PT02WERF = "Y";
    converseLib.validationFailed(168); /* Calc Period must range from 5 to 10*/
    PTWREC.XXXMODID = "065";
    return;
  else
    set PT02M006.PT02MRPD initialAttributes;
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end

  PT02W00.PT02W-CURRENT-MM = PT02W00.PT02W-CURR-MM;
  PT02W00.PT02W-CURRENT-YY = PT02W00.PT02W-CURR-YY;

  if (PT02W00.PT02W-CURRENT-YY > 60)
    PT02W00.PT02W-CURRENT-CC = 19;
  else
    PT02W00.PT02W-CURRENT-CC = 20;
  end

  PT02W00.PT02W-LAST-REPORT-PERIOD = PT02W00.PT02W-CURRENT-PERIOD + 4;
  PT02W00.PT02W-LAST-PRT-RPT-PERIOD = PT02W00.PT02W-CURRENT-PERIOD + 9;

  if (PT02W00.PT02W-LAST-REPORT-MM > 12)
    PT02W00.PT02W-LAST-REPORT-CCYY = PT02W00.PT02W-LAST-REPORT-CCYY + 1;
    PT02W00.PT02W-LAST-REPORT-MM = PT02W00.PT02W-LAST-REPORT-MM - 12;
  end
  if (PT02W00.PT02W-LAST-PRT-RPT-MM > 12)
    PT02W00.PT02W-LAST-PRT-RPT-CCYY = PT02W00.PT02W-LAST-PRT-RPT-CCYY     + 1;
    PT02W00.PT02W-LAST-PRT-RPT-MM = PT02W00.PT02W-LAST-PRT-RPT-MM - 12;
  end

   /* ------------------------------------------------------------*/
   /* Validate Start Print Period*/
   /* ------------------------------------------------------------*/
  if (PT02M006.PT02MPPS == 0)
    set PT02M006.PT02MPPS initialAttributes;
  else
    set TA2REC empty;
    TA2REC.TA2GRTYP = "G";
    PT02W00.PT02WDT2 = "01";
    PT02W00.PT02WDT1 = PT02M006.PT02MPPS;
    TA2REC.TA2GRGG = PT02W00.PT02WDT3;
    PT02S02(); /* edit date range*/

    if (TA2REC.TA2RTNCD != 0)
      set PT02M006.PT02MPPS cursor, bold; /* Highlight*/
      PT02W00.PT02WERF = "Y";
      converseLib.validationFailed(81); /* Date is Invalid*/
      PTWREC.XXXMODID = "065";
      return;
    else
      set PT02M006.PT02MPPS initialAttributes;
    end
  end

  if (PT02M006.PT02MPPS != 0)
    if (PT02M006.PT02MPPS < PT02W00.PT02W-CURRENT-PERIOD)
      set PT02M006.PT02MPPS cursor, bold; /* Highlight*/
      PT02W00.PT02WERF = "Y";
      converseLib.validationFailed(169); /* Start Period < Current Period*/
      PTWREC.XXXMODID = "065";
      return;
    end
  end


  if (PT02W00.PT02WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* Validate End Print Period*/
   /* ------------------------------------------------------------*/
  if (PT02M006.PT02MPPE == 0)
    set PT02M006.PT02MPPE initialAttributes;
  else
    set TA2REC empty;
    TA2REC.TA2GRTYP = "G";
    PT02W00.PT02WDT2 = "01";
    PT02W00.PT02WDT1 = PT02M006.PT02MPPE;
    TA2REC.TA2GRGG = PT02W00.PT02WDT3;
    PT02S02(); /* edit date range*/

    if (TA2REC.TA2RTNCD != 0) /* If date is not valid*/
      set PT02M006.PT02MPPE cursor, bold; /* Highlight*/
      PT02W00.PT02WERF = "Y";
      converseLib.validationFailed(81); /* Date is Invalid*/
      PTWREC.XXXMODID = "065";
      return;
    else
      set PT02M006.PT02MPPE initialAttributes;
    end
  end

  if (PT02M006.PT02MPPE != 0)
    if (PT02M006.PT02MPPE < PT02M006.PT02MPPS)
      set PT02M006.PT02MPPE cursor, bold; /* Highlight*/
      PT02W00.PT02WERF = "Y";
      converseLib.validationFailed(170); /* End Period < Start Period*/
      PTWREC.XXXMODID = "065";
      return;
    end

    if (PT02M006.PT02MPPE < PT02W00.PT02W-LAST-REPORT-PERIOD
     || PT02M006.PT02MPPE > PT02W00.PT02W-LAST-PRT-RPT-PERIOD)
      set PT02M006.PT02MPPE cursor, bold; /* Highlight*/
      PT02W00.PT02WERF = "Y";
      converseLib.validationFailed(171); /* End period < Last Report Period*/
      PTWREC.XXXMODID = "065";
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product type code*/
   /* ------------------------------------------------------------*/

  if (PT02M006.PT02MPRC != "* "
   && PT02M006.PT02MPRC != "**")
    if (PT02M006.PT02MPRC in XPRTBL.XPRCD)
      set PT02M006.PT02MPRC initialAttributes;
    else
      PT02W00.PT02WERF = "Y";
      converseLib.validationFailed(97);
      PTWREC.XXXMODID = "065";
      set PT02M006.PT02MPRC cursor, bold;
    end
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate product line code*/
   /* ------------------------------------------------------------*/

  if (PT02M006.PT02MPLC != "* "
   && PT02M006.PT02MPLC != "**")
    if (PT02M006.PT02MPLC in XPLTBL.XPLCD)
      set PT02M006.PT02MPLC initialAttributes;
    else
      PT02W00.PT02WERF = "Y";
      converseLib.validationFailed(98);
      PTWREC.XXXMODID = "065";
      set PT02M006.PT02MPLC cursor, bold;
    end
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/

  if (PT02M006.PT02MPCC != "* "
   && PT02M006.PT02MPCC != "**")
    if (PT02M006.PT02MPCC in XPCTBL.XPCCD)
      set PT02M006.PT02MPCC initialAttributes;
    else
      PT02W00.PT02WERF = "Y";
      converseLib.validationFailed(99);
      PTWREC.XXXMODID = "065";
      set PT02M006.PT02MPCC cursor, bold;
    end
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate scheduler code*/
   /* ------------------------------------------------------------*/

  if (PT02M006.PT02MASC != "* "
   && PT02M006.PT02MASC != " *"
   && PT02M006.PT02MASC != "**")
    set PG1REC empty;
    PG1REC.PG1SC4CD = PT02M006.PT02MASC;
    PG1REC.PG1FCTCD = "  ";
    PG1REC.XGPCD = "02";

    try
      call "IO1200" ("S ", SQLCA, PG1REC) {isNoRefresh = yes};
    end
    if (SQLCA.VAGen_SQLCODE != 0)
      set PT02M006.PT02MASC cursor, bold; /* Highlight*/
      PT02W00.PT02WERF = "Y";
      converseLib.validationFailed(87); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "065";
      return;
    end
  end



end // end PT02065

// Process valid input request
Function PT02066()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

  if (PT02W00.PT02WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* if parm update was requested then UPDATE PARMS!! NOOOW!!!!!!*/
   /* ------------------------------------------------------------*/

  if (PT02M006.PT02MPRM == "P")

    PT02S66();
    PT02W00.PT02MSEL[6] = "*";
    COMMAREA.CAMSG = "FOOTWEAR NEGATIVE AVAIL PARMS - UPDATED";
    return;

  end

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/
  PT02W00.PT02WIXT = 1;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03") /* if on production system*/
    PT02067(); /* format production jcl*/
  else
    PT02068(); /* format test jcl*/
  end
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "066"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PT02W00.PT02MSEL[6] = "*"; /* Indicate function completed*/
    COMMAREA.CAMSG = "FOOTWEAR NEGATIVE AVAIL REPORT - SUBMITTED";

    set PT02M006 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end PT02066

// Process valid production jcl
Function PT02067()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT02T06.TARTYPE[PT02WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set PT02W06 empty; /* Parameters work area*/

      PT02W06.PT02MPRM = PT02M006.PT02MPRM;
      PT02W06.PT02MTLQ = PT02M006.PT02MTLQ;
      PT02W06.PT02MRPD = PT02M006.PT02MRPD;
      PT02W06.PT02MPPS = PT02M006.PT02MPPS;
      PT02W06.PT02MPPE = PT02M006.PT02MPPE;
      PT02W06.PT02MNSZ = PT02M006.PT02MNSZ;
      PT02W06.PT02MASC = PT02M006.PT02MASC;
      PT02W06.PT02MPRC = PT02M006.PT02MPRC;
      PT02W06.PT02MPLC = PT02M006.PT02MPLC;
      PT02W06.PT02MPCC = PT02M006.PT02MPCC;

      TA6REC.TARJCL[TA6INDEX] = PT02W06.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PT02T06.TARJCL[PT02WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT02T06.TARTYPE[PT02WIXT]; /* Type*/

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT02T06.TARJCL[PT02WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT02W00.PT02WIXT = PT02W00.PT02WIXT + 1; /* Input table index*/

    end

  end

end // end PT02067

// Process valid test jcl
Function PT02068()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT02T16.TARTYPE[PT02WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set PT02W06 empty; /* Parameters work area*/

      PT02W06.PT02MPRM = PT02M006.PT02MPRM;
      PT02W06.PT02MTLQ = PT02M006.PT02MTLQ;
      PT02W06.PT02MRPD = PT02M006.PT02MRPD;
      PT02W06.PT02MPPS = PT02M006.PT02MPPS;
      PT02W06.PT02MPPE = PT02M006.PT02MPPE;
      PT02W06.PT02MNSZ = PT02M006.PT02MNSZ;
      PT02W06.PT02MASC = PT02M006.PT02MASC;
      PT02W06.PT02MPRC = PT02M006.PT02MPRC;
      PT02W06.PT02MPLC = PT02M006.PT02MPLC;
      PT02W06.PT02MPCC = PT02M006.PT02MPCC;

      TA6REC.TARJCL[TA6INDEX] = PT02W06.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PT02T16.TARJCL[PT02WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PT02T16.TARTYPE[PT02WIXT]; /* Type*/

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT02T16.TARJCL[PT02WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT02W00.PT02WIXT = PT02W00.PT02WIXT + 1; /* Input table index*/

    end

  end

end // end PT02068

// ftwr percent variance
Function PT02070()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If request for data switch set, obtain data.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PT02W00.PT02WRD7 == "Y" /* request for data switch = yes*/
   && converseVar.validationMsgNum == 0) /* and no previous errors*/
    PT02071(); /* Format and display the map*/
    PT02W00.PT02WRD7 = "N"; /* SET SWITCH TO 'NO'*/
  end

  PT02072(); /* Format and display the map*/

  PT02073(); /* Check attention identifier*/

  PT02074(); /* Reset fields to normal intensity*/

  PT02075(); /* Verify the data that was entered*/

  PT02076(); /* Process valid input request*/


end // end PT02070

// select 's' dprodg.vsygrp01
Function PT02071()
   /* ------------------------------------------------------------*/
   /* obtain default date from dcorp.vparm101*/
   /* ------------------------------------------------------------*/

  set XZZREC empty;
  XZZREC.XZZQRYID = "PT4470"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/
  try
    call "IO1000" ("S ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PT02M007.PT02MPRM = XZZREC.XZZ1CHR1;
      PT02M007.PT02MPRV = XZZREC.XZZ3CHR1;
     /* MOVE XZZREC.XZZ3CHR2 TO PT02M007.PT02MPRV;*/
      PT02M007.PT02MNSZ = XZZREC.XZZ2CHR1;
      PT02M007.PT02MPMO = XZZREC.XZZ4CHR1;
      PT02M007.PT02MASC = XZZREC.XZZ2CHR2;
      PT02M007.PT02MAVQ = XZZREC.XZZ4CHR2;
      PT02W00.PT02WGRP = XZZREC.XZZ6CHR;
      PT02M007.PT02MPRC = PT02W00.PT02WPRC;
      PT02M007.PT02MPLC = PT02W00.PT02WPLC;
      PT02M007.PT02MPCC = PT02W00.PT02WPCC;
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "021"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
   /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT02071

// Format and display the map
Function PT02072()
   /* ------------------------------------------------------------*/
   /* If user is authorized, allow access to parm update field.*/
   /* ------------------------------------------------------------*/

  if (PT02W00.PT02WERF == "N") /* No edir errors*/
    if (CACHGFL == "Y") /* Updates allowed by this user*/
      set PT02M007.PT02MPRM cursor; /* Have cursor appear here first*/
    else
      set PT02M007.PT02MPRV cursor; /* Have cursor appear here first*/
      set PT02M007.PT02MPRM skip; /* No access to this field*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    PT02M007.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  PT02M007.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT02M007.XURDEST = TA6REC.XURDEST; /* Print destination*/
  PT02M007.XRODESC = TA6REC.XRODESC; /* Printer description*/
  PT02M007.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  PT02M007.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  PT02M007.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT02M007.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT02M007.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT02M007 alarm; /* Indicate sound alarm*/

  end

  converse PT02M007 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PT02072

// Check attention identifier
Function PT02073()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PT02W00.PT02MSEL[7] = "C"; /* Indicate selection cancelled*/

    set PT02M007 initial; /* m007 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PT02W00.PT02MSEL[7] = " "; /* Indicate nothing happened*/
    COMMAREA.CAMSG = "NO ACTION TAKEN ON PREVIOUS SCREEN";

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "073"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PT02073

// Reset highlighted fields
Function PT02074()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (CACHGFL == "Y")
    set PT02M007.PT02MPRM initialAttributes;
  else
    set PT02M007.PT02MPRM skip;
  end
  set PT02M007.PT02MPRV initialAttributes;
  set PT02M007.PT02MNSZ initialAttributes;
  set PT02M007.PT02MPMO initialAttributes;
  set PT02M007.PT02MPRC initialAttributes;
  set PT02M007.PT02MPLC initialAttributes;
  set PT02M007.PT02MPCC initialAttributes;
  set PT02M007.PT02MAVQ initialAttributes;
  set PT02M007.PT02MASC initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PT02M007.PT02MPRC == "?" /* product type group code*/
   || PT02M007.PT02MPLC == "?" /* product line code*/
   || PT02M007.PT02MPCC == "?" /* product category*/
   || PT02M007.PT02MASC == "?") /* availability specialist*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      PTWREC.XXXMODID = "074"; /* Module identification*/
      converseLib.validationFailed(4); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type code*/
   /* ------------------------------------------------------------*/

  if (PT02M007.PT02MPRC == "?") /* product type code*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT TYPE CODE"; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      PT02M007.PT02MPRC = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/

    end

    set PT02M007.PT02MPRC cursor; /* Establish cursor position*/

  end


   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes*/
   /* ------------------------------------------------------------*/

  if (PT02M007.PT02MPLC == "?") /* product line*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT LINE CODE"; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      PT02M007.PT02MPLC = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/

    end

    set PT02M007.PT02MPLC cursor; /* Establish cursor position*/

  end


   /* ------------------------------------------------------------*/
   /* If requested, display the list of product categories*/
   /* ------------------------------------------------------------*/

  if (PT02M007.PT02MPCC == "?") /* product line*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT CATEGORY CODE "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      PT02M007.PT02MPCC = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/

    end

    set PT02M007.PT02MPCC cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  PTWREC.XXXMODID = "074"; /* Module identification*/
  converseLib.validationFailed(42); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/



end // end PT02074

// Verify the entered data
Function PT02075()
   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

  PT02W00.PT02WERF = "N";

   /* ------------------------------------------------------------*/
   /* validate parm update field*/
   /* ------------------------------------------------------------*/

  if (PT02M007.PT02MPRM != "P"
   && PT02M007.PT02MPRM != "R")
    PT02W00.PT02WERF = "Y";
    converseLib.validationFailed(80);
    PTWREC.XXXMODID = "075";
    set PT02M007.PT02MPRM cursor, bold;
    return;
  else
    set PT02M007.PT02MPRM initialAttributes;
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate pair variance*/
   /* ------------------------------------------------------------*/
  if (PT02M007.PT02MPRV <= 0)
    converseLib.validationFailed(104);
    PT02W00.PT02WERF = "Y";
    set PT02M007.PT02MPRV cursor, bold;
  else
    set PT02M007.PT02MPRV initialAttributes;
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate number of sizes*/
   /* ------------------------------------------------------------*/
  if (PT02M007.PT02MNSZ <= 0)
    converseLib.validationFailed(100);
    PT02W00.PT02WERF = "Y";
    set PT02M007.PT02MNSZ cursor, bold;
  else
    set PT02M007.PT02MNSZ initialAttributes;
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate po date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGYM = PT02M007.PT02MPMO;
  PT02S02(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set PT02M007.PT02MPMO cursor, bold; /* Highlight*/
    PT02W00.PT02WERF = "Y";
    converseLib.validationFailed(106); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "075";
    return;
  else
    set PT02M007.PT02MPMO initialAttributes;
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate product type code*/
   /* ------------------------------------------------------------*/

  if (PT02M007.PT02MPRC != "* "
   && PT02M007.PT02MPRC != "**"
   && PT02M007.PT02MPRC != " *")
    if (PT02M007.PT02MPRC in XPRTBL.XPRCD)
      set PT02M007.PT02MPRC initialAttributes;
    else
      PT02W00.PT02WERF = "Y";
      converseLib.validationFailed(97);
      PTWREC.XXXMODID = "075";
      set PT02M007.PT02MPRC cursor, bold;
    end
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate product line code*/
   /* ------------------------------------------------------------*/

  if (PT02M007.PT02MPLC != "* "
   && PT02M007.PT02MPLC != "**"
   && PT02M007.PT02MPLC != " *")
    if (PT02M007.PT02MPLC in XPLTBL.XPLCD)
      set PT02M007.PT02MPLC initialAttributes;
    else
      PT02W00.PT02WERF = "Y";
      converseLib.validationFailed(98);
      PTWREC.XXXMODID = "075";
      set PT02M007.PT02MPLC cursor, bold;
    end
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/

  if (PT02M007.PT02MPCC != "* "
   && PT02M007.PT02MPCC != "**"
   && PT02M007.PT02MPCC != " *")
    if (PT02M007.PT02MPCC in XPCTBL.XPCCD)
      set PT02M007.PT02MPLC initialAttributes;
    else
      PT02W00.PT02WERF = "Y";
      converseLib.validationFailed(99);
      PTWREC.XXXMODID = "075";
      set PT02M007.PT02MPCC cursor, bold;
    end
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate availability specialist code*/
   /* ------------------------------------------------------------*/

  if (PT02M007.PT02MASC != "* "
   && PT02M007.PT02MASC != " *"
   && PT02M007.PT02MASC != "**")
    set PG1REC empty;
    PG1REC.PG1SC4CD = PT02M007.PT02MASC;
    PG1REC.PG1FCTCD = "  ";
    PG1REC.XGPCD = "02";

    try
      call "IO1200" ("S ", SQLCA, PG1REC) {isNoRefresh = yes};
    end
    if (SQLCA.VAGen_SQLCODE != 0)
      set PT02M007.PT02MASC cursor, bold; /* Highlight*/
      PT02W00.PT02WERF = "Y";
      converseLib.validationFailed(87); /* Indicate missing or invalid*/
      PTWREC.XXXMODID = "075";
      return;
    end
  end



end // end PT02075

// Process valid input request
Function PT02076()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

  if (PT02W00.PT02WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* if parm update was requested then UPDATE PARMS!! NOOOW!!!!!!*/
   /* ------------------------------------------------------------*/

  if (PT02M007.PT02MPRM == "P")

    PT02S76();
    PT02W00.PT02MSEL[7] = "*";
    COMMAREA.CAMSG = "FOOTWEAR PERCENT VARIANCE PARMS - UPDATED";
    return;

  end

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/
  PT02W00.PT02WIXT = 1;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03") /* if on production system*/
    PT02077(); /* format production jcl*/
  else
    PT02078(); /* format test jcl*/
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "075"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PT02W00.PT02MSEL[7] = "*"; /* Indicate function completed*/
    COMMAREA.CAMSG = "FOOTWEAR PERCENT VARIANCE REPORT - SUBMITTED";

    set PT02M007 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end PT02076

// Process valid production jcl
Function PT02077()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT02T07.TARTYPE[PT02WIXT] == "W")
      if (PT02M007.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT01 FORMS=PT01,COPIES=1,DEST=RMT00";
        TA6REC.TARTYPE[TA6INDEX] = " ";
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT01 FORMS=PT01,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
    else

      if (PT02T07.TARTYPE[PT02WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

        set PT02W07 empty; /* Parameters work area*/

        PT02W07.PT02MPRM = PT02M007.PT02MPRM;
        PT02W07.PT02MGUV = PT02M007.PT02MPRV;
        PT02W07.PT02MFRV = PT02M007.PT02MPRV;
        PT02W07.PT02MNSZ = PT02M007.PT02MNSZ;
        PT02W07.PT02MPMO = PT02M007.PT02MPMO;
        PT02W07.PT02MASC = PT02M007.PT02MASC;
        if (PT02M007.PT02MPRC == "* "
         || PT02M007.PT02MPRC == "**"
         || PT02M007.PT02MPRC == " *")
          PT02W07.PT02MPRC = "**";
        else
          PT02W07.PT02MPRC = PT02M007.PT02MPRC;
        end
        if (PT02M007.PT02MPLC == "* "
         || PT02M007.PT02MPLC == "**"
         || PT02M007.PT02MPLC == " *")
          PT02W07.PT02MPLC = "**";
        else
          PT02W07.PT02MPLC = PT02M007.PT02MPLC;
        end
        if (PT02M007.PT02MPCC == "* "
         || PT02M007.PT02MPCC == "**"
         || PT02M007.PT02MPCC == " *")
          PT02W07.PT02MPCC = "**";
        else
          PT02W07.PT02MPCC = PT02M007.PT02MPCC;
        end
        PT02W07.PT02MAVQ = PT02M007.PT02MAVQ;

        TA6REC.TARJCL[TA6INDEX] = PT02W07.TARJCL; /* Parameters*/

      else

        TA6REC.TARJCL[TA6INDEX] = PT02T07.TARJCL[PT02WIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PT02T07.TARTYPE[PT02WIXT]; /* Type*/

      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT02T07.TARJCL[PT02WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT02W00.PT02WIXT = PT02W00.PT02WIXT + 1; /* Input table index*/

    end

  end

end // end PT02077

// Process valid test jcl
Function PT02078()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT02T17.TARJCL[PT02WIXT] == "===NOTIFY===")
      PT02W2A.PT02WPR8 = "//             NOTIFY="; /* notify*/
      PT02W2A.PT02WUID = TA6REC.XURUSRID; /* userid*/
      PT02W2A.PT02WFL8 = " "; /* filler*/
      TA6REC.TARJCL[TA6INDEX] = PT02W2A.PT02WJC8;
    else

      if (PT02T17.TARJCL[PT02WIXT] == "===OUTPUTS===")
        if (PT02M007.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT01 FORMS=PT01,COPIES=1,DEST=RMT00";
        else
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT01 FORMS=PT01,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
        end

      else

        if (PT02T17.TARTYPE[PT02WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

          set PT02W07 empty; /* Parameters work area*/

          PT02W07.PT02MPRM = PT02M007.PT02MPRM;
          PT02W07.PT02MGUV = PT02M007.PT02MPRV;
          PT02W07.PT02MFRV = PT02M007.PT02MPRV;
          PT02W07.PT02MNSZ = PT02M007.PT02MNSZ;
          PT02W07.PT02MPMO = PT02M007.PT02MPMO;
          PT02W07.PT02MASC = PT02M007.PT02MASC;
          if (PT02M007.PT02MPRC == "* "
           || PT02M007.PT02MPRC == "**"
           || PT02M007.PT02MPRC == " *")
            PT02W07.PT02MPRC = "**";
          else
            PT02W07.PT02MPRC = PT02M007.PT02MPRC;
          end
          if (PT02M007.PT02MPLC == "* "
           || PT02M007.PT02MPLC == "**"
           || PT02M007.PT02MPLC == " *")
            PT02W07.PT02MPLC = "**";
          else
            PT02W07.PT02MPLC = PT02M007.PT02MPLC;
          end
          if (PT02M007.PT02MPCC == "* "
           || PT02M007.PT02MPCC == "**"
           || PT02M007.PT02MPCC == " *")
            PT02W07.PT02MPCC = "**";
          else
            PT02W07.PT02MPCC = PT02M007.PT02MPCC;
          end
          PT02W07.PT02MAVQ = PT02M007.PT02MAVQ;

          TA6REC.TARJCL[TA6INDEX] = PT02W07.TARJCL; /* Parameters*/

        else

          TA6REC.TARJCL[TA6INDEX] = PT02T17.TARJCL[PT02WIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = PT02T17.TARTYPE[PT02WIXT]; /* Type*/

        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT02T17.TARJCL[PT02WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT02W00.PT02WIXT = PT02W00.PT02WIXT + 1; /* Input table index*/

    end

  end

end // end PT02078

// ftwr salesman samples
Function PT02080()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If request for data switch set, obtain data.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PT02W00.PT02WRD8 == "Y" /* request for data switch = yes*/
   && converseVar.validationMsgNum == 0) /* and no previous errors*/
    PT02081(); /* Obtain default data*/
    PT02W00.PT02WRD8 = "N"; /* SET SWITCH TO 'NO'*/
  end

  PT02082(); /* Format and display the map*/

  PT02083(); /* Check attention identifier*/

  PT02084(); /* Reset fields to normal intensity*/

  PT02085(); /* Verify the data that was entered*/

  PT02086(); /* Process valid input request*/


end // end PT02080

// select 's' dprodg.vsygrp01
Function PT02081()
   /* ------------------------------------------------------------*/
   /* obtain default date from dcorp.vparm101*/
   /* ------------------------------------------------------------*/

  set XZZREC empty;
  XZZREC.XZZQRYID = "PT4080"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/
  try
    call "IO1000" ("S ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PT02M008.PT02MPRM = XZZREC.XZZ1CHR1;
      PT02M008.PT02MPBD = XZZREC.XZZINT1;
      PT02M008.PT02MPED = XZZREC.XZZINT2;
      PT02M008.PT02MLPD = XZZREC.XZZ8CHR;
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "081"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
   /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT02081

// Format and display the map
Function PT02082()
   /* ------------------------------------------------------------*/
   /* If user is authorized, allow access to parm update field.*/
   /* ------------------------------------------------------------*/

  if (PT02W00.PT02WERF == "N") /* No edir errors*/
    if (CACHGFL == "Y") /* Updates allowed by this user*/
      set PT02M008.PT02MPRM cursor; /* Have cursor appear here first*/
    else
      set PT02M008.PT02MPBD cursor; /* Have cursor appear here first*/
      set PT02M008.PT02MPRM skip; /* No access to this field*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    PT02M008.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  PT02M008.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT02M008.XURDEST = TA6REC.XURDEST; /* Print destination*/
  PT02M008.XRODESC = TA6REC.XRODESC; /* Printer description*/
  PT02M008.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  PT02M008.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  PT02M008.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT02M008.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT02M008.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT02M008 alarm; /* Indicate sound alarm*/

  end

  converse PT02M008 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PT02082

// Check attention identifier
Function PT02083()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PT02W00.PT02MSEL[8] = "C"; /* Indicate selection cancelled*/

    set PT02M008 initial; /* m008 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PT02W00.PT02MSEL[8] = " "; /* Indicate nothing happened*/
    COMMAREA.CAMSG = "NO ACTION TAKEN ON PREVIOUS SCREEN";

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "083"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PT02083

// Reset highlighted fields
Function PT02084()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (CACHGFL == "Y")
    set PT02M008.PT02MPRM initialAttributes;
  else
    set PT02M008.PT02MPRM skip;
  end
  set PT02M008.PT02MPBD initialAttributes;
  set PT02M008.PT02MPED initialAttributes;
  set PT02M008.PT02MLPD initialAttributes;


end // end PT02084

// Verify the entered data
Function PT02085()

   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

  PT02W00.PT02WERF = "N";

   /* ------------------------------------------------------------*/
   /* validate parm update field*/
   /* ------------------------------------------------------------*/

  if (PT02M008.PT02MPRM != "P"
   && PT02M008.PT02MPRM != "R")
    PT02W00.PT02WERF = "Y";
    converseLib.validationFailed(80);
    PTWREC.XXXMODID = "085";
    set PT02M008.PT02MPRM cursor, bold;
    return;
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate production begin date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = 01;
  TA2REC.TA2GRCYM = PT02M008.PT02MPBD;
  PT02S02(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set PT02M008.PT02MPBD cursor, bold; /* Highlight*/
    PT02W00.PT02WERF = "Y";
    converseLib.validationFailed(81); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "085";
    return;
  else
    set PT02M008.PT02MPBD initialAttributes;
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate production end date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = 01;
  TA2REC.TA2GRCYM = PT02M008.PT02MPED;
  PT02S02(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set PT02M008.PT02MPED cursor, bold; /* Highlight*/
    PT02W00.PT02WERF = "Y";
    converseLib.validationFailed(81); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "085";
    return;
  else
    set PT02M008.PT02MPED initialAttributes;
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate late production due date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGG = PT02M008.PT02MLPD;
  PT02S02(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set PT02M008.PT02MLPD cursor, bold; /* Highlight*/
    PT02W00.PT02WERF = "Y";
    converseLib.validationFailed(81); /* Indicate missing or invalid*/
    PTWREC.XXXMODID = "085";
    return;
  else
    set PT02M008.PT02MLPD initialAttributes;
  end

  if (PT02W00.PT02WERF == "Y")
    return;
  end



end // end PT02085

// Process valid input request
Function PT02086()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

  if (PT02W00.PT02WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* if parm update was requested then UPDATE PARMS!! NOOOW!!!!!!*/
   /* ------------------------------------------------------------*/

  if (PT02M008.PT02MPRM == "P")

    PT02S86();
    PT02W00.PT02MSEL[8] = "*";
    COMMAREA.CAMSG = "FOOTWEAR SALESMAN SAMPLES PARMS - UPDATED";
    return;

  end
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/
  PT02W00.PT02WIXT = 1;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03") /* if on production system*/
    PT02087(); /* format production jcl*/
  else
    PT02088(); /* format test jcl*/
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "085"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PT02W00.PT02MSEL[8] = "*"; /* Indicate function completed*/
    COMMAREA.CAMSG = "SALESMAN SAMPLE REPORT - SUBMITTED";

    set PT02M008 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end PT02086

// Process valid production jcl
Function PT02087()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT02T08.TARTYPE[PT02WIXT] == "W")
      if (PT02M008.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT91 FORMS=PT91,COPIES=1,DEST=RMT00";
        TA6REC.TARTYPE[TA6INDEX] = " ";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT92 FORMS=PT92,COPIES=1,DEST=RMT00";
        TA6REC.TARTYPE[TA6INDEX] = " ";
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT91 FORMS=PT91,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT92 FORMS=PT92,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
    else

      if (PT02T08.TARJCL[PT02WIXT] == "===FILE01===")
        if (PT02M008.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT91)'";
          TA6REC.TARTYPE[TA6INDEX] = " ";
        else
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT91)'";
          TA6REC.TARTYPE[TA6INDEX] = " ";
        end
      else

        if (PT02T08.TARJCL[PT02WIXT] == "===FILE02===")
          if (PT02M008.XURDEST == "LOCAL") /* destination lazer*/
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT92)'";
            TA6REC.TARTYPE[TA6INDEX] = " ";
          else
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT92)'";
            TA6REC.TARTYPE[TA6INDEX] = " ";
          end
        else

          if (PT02T08.TARTYPE[PT02WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

            set PT02W08 empty; /* Parameters work area*/

            PT02W08.PT02MPBD = PT02M008.PT02MPBD;
            PT02W08.PT02WDD1 = 01;
            PT02W08.PT02MPED = PT02M008.PT02MPED;
            PT02W08.PT02WDD2 = 01;
            PT02W08.PT02MPRM = PT02M008.PT02MPRM;
            PT02W08.PT02MLPD = PT02M008.PT02MLPD;

            TA6REC.TARJCL[TA6INDEX] = PT02W08.TARJCL; /* Parameters*/

          else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

            TA6REC.TARJCL[TA6INDEX] = PT02T08.TARJCL[PT02WIXT]; /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = PT02T08.TARTYPE[PT02WIXT]; /* Type*/

          end
        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT02T08.TARJCL[PT02WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT02W00.PT02WIXT = PT02W00.PT02WIXT + 1; /* Input table index*/

    end

  end

end // end PT02087

// Process valid test jcl
Function PT02088()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT02T18.TARJCL[PT02WIXT] == "===OUTPUT1===")
      if (PT02M008.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT91 FORMS=PT91,COPIES=1,DEST=RMT00";
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT91 FORMS=PT91,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
    else

      if (PT02T18.TARJCL[PT02WIXT] == "===OUTPUT2===")
        if (PT02M008.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT92 FORMS=PT92,COPIES=1,DEST=RMT00";
        else
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT92 FORMS=PT92,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
        end
      else

        if (PT02T18.TARJCL[PT02WIXT] == "===FILE01===")
          if (PT02M008.XURDEST == "LOCAL") /* destination lazer*/
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(2,,PT91)'";
          else
            TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(T,,PT91)'";
          end
        else

          if (PT02T18.TARJCL[PT02WIXT] == "===FILE02===")
            if (PT02M008.XURDEST == "LOCAL") /* destination lazer*/
              TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(2,,PT92)'";
            else
              TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(T,,PT92)'";
            end
          else

            if (PT02T18.TARTYPE[PT02WIXT] == "P") /* Parameters statement*/


            /* ------------------------------------------------------------*/
        /* Format the variable parameters entered by the user.*/

            /* ------------------------------------------------------------*/

              set PT02W08 empty; /* Parameters work area*/

              PT02W08.PT02MPBD = PT02M008.PT02MPBD;
              PT02W08.PT02WDD1 = 01;
              PT02W08.PT02MPED = PT02M008.PT02MPED;
              PT02W08.PT02WDD2 = 01;
              PT02W08.PT02MPRM = PT02M008.PT02MPRM;
              PT02W08.PT02MLPD = PT02M008.PT02MLPD;

              TA6REC.TARJCL[TA6INDEX] = PT02W08.TARJCL; /* Parameters*/

            else


            /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/

            /* ------------------------------------------------------------*/

              TA6REC.TARJCL[TA6INDEX] = PT02T18.TARJCL[PT02WIXT];
                                   /* JCL*/
              TA6REC.TARTYPE[TA6INDEX] = PT02T18.TARTYPE[PT02WIXT];
                                   /* Type*/

            end
          end
        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT02T18.TARJCL[PT02WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT02W00.PT02WIXT = PT02W00.PT02WIXT + 1; /* Input table index*/

    end

  end

end // end PT02088

// launch product delivery report
Function PT02090()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If first time thru, Obtain default data.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PT02W00.PT02WRD9 == "Y" /* Request for data switch 'on'*/
   && converseVar.validationMsgNum == 0) /* and no previous errors*/
    PT02091(); /* Obtain default data*/
    PT02W00.PT02WRD9 = "N"; /* Set switch 'off'*/
  end

  PT02092(); /* Format and display the map*/

  PT02093(); /* Check attention identifier*/

  PT02094(); /* Reset fields to normal intensity*/

  PT02095(); /* Verify the data that was entered*/

  PT02096(); /* Process valid input request*/


end // end PT02090

// select 's' dprodg.vsygrp01
Function PT02091()
  return; /* Exit to display map*/

end // end PT02091

// Format and display the map
Function PT02092()
   /* ------------------------------------------------------------*/
   /* If user is authorized, allow acess to parm update field*/
   /* ------------------------------------------------------------*/

  if (PT02W00.PT02WERF == "N") /* No edir errors*/
    if (CACHGFL == "Y") /**/
      set PT02M009.PT02MSTY[1] cursor; /* Have cursor appear here first*/
    else
      set PT02M009.PT02MSTY[1] cursor; /* Have cursor appear here first*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    PT02M009.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  PT02M009.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT02M009.XURDEST = TA6REC.XURDEST; /* Print destination*/
  PT02M009.XRODESC = TA6REC.XRODESC; /* Printer description*/
  PT02M009.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  PT02M009.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  PT02M009.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT02M009.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT02M009.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT02M009 alarm; /* Indicate sound alarm*/

  end

  converse PT02M009 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PT02092

// Check attention identifier
Function PT02093()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PT02W00.PT02MSEL[9] = "C"; /* Indicate selection cancelled*/

    set PT02M009 initial; /* m003 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PT02W00.PT02MSEL[9] = " "; /* Indicate nothing happened*/
    COMMAREA.CAMSG = "NO ACTION TAKEN ON PREVIOUS SCREEN";

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "033"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PT02093

// Reset highlighted fields
Function PT02094()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

   /* F CACHGFL = 'Y';*/
   /* SET PT02M009.PT02MPRM DEFINED;*/
   /* LSE;*/
   /* SET PT02M009.PT02MPRM AUTOSKIP;*/
   /* ND;*/
  set PT02M009.PT02MSTY[1] initialAttributes;
  set PT02M009.PT02MSTY[2] initialAttributes;
  set PT02M009.PT02MSTY[3] initialAttributes;
  set PT02M009.PT02MSTY[4] initialAttributes;
  set PT02M009.PT02MSTY[5] initialAttributes;
  set PT02M009.PT02MSTY[6] initialAttributes;
  set PT02M009.PT02MSTY[7] initialAttributes;
  set PT02M009.PT02MSTY[8] initialAttributes;
  set PT02M009.PT02MSTY[9] initialAttributes;
  set PT02M009.PT02MSTY[10] initialAttributes;

  set PT02M009.PT02MCLR[1] initialAttributes;
  set PT02M009.PT02MCLR[2] initialAttributes;
  set PT02M009.PT02MCLR[3] initialAttributes;
  set PT02M009.PT02MCLR[4] initialAttributes;
  set PT02M009.PT02MCLR[5] initialAttributes;
  set PT02M009.PT02MCLR[6] initialAttributes;
  set PT02M009.PT02MCLR[7] initialAttributes;
  set PT02M009.PT02MCLR[8] initialAttributes;
  set PT02M009.PT02MCLR[9] initialAttributes;
  set PT02M009.PT02MCLR[10] initialAttributes;

  set PT02M009.PT02MDIM[1] initialAttributes;
  set PT02M009.PT02MDIM[2] initialAttributes;
  set PT02M009.PT02MDIM[3] initialAttributes;
  set PT02M009.PT02MDIM[4] initialAttributes;
  set PT02M009.PT02MDIM[5] initialAttributes;
  set PT02M009.PT02MDIM[6] initialAttributes;
  set PT02M009.PT02MDIM[7] initialAttributes;
  set PT02M009.PT02MDIM[8] initialAttributes;
  set PT02M009.PT02MDIM[9] initialAttributes;
  set PT02M009.PT02MDIM[10] initialAttributes;

  set PT02M009.PT02MPO1[1] initialAttributes;
  set PT02M009.PT02MPO1[2] initialAttributes;
  set PT02M009.PT02MPO1[3] initialAttributes;
  set PT02M009.PT02MPO1[4] initialAttributes;
  set PT02M009.PT02MPO1[5] initialAttributes;
  set PT02M009.PT02MPO1[6] initialAttributes;
  set PT02M009.PT02MPO1[7] initialAttributes;
  set PT02M009.PT02MPO1[8] initialAttributes;
  set PT02M009.PT02MPO1[9] initialAttributes;
  set PT02M009.PT02MPO1[10] initialAttributes;

  set PT02M009.PT02MPO2[1] initialAttributes;
  set PT02M009.PT02MPO2[2] initialAttributes;
  set PT02M009.PT02MPO2[3] initialAttributes;
  set PT02M009.PT02MPO2[4] initialAttributes;
  set PT02M009.PT02MPO2[5] initialAttributes;
  set PT02M009.PT02MPO2[6] initialAttributes;
  set PT02M009.PT02MPO2[7] initialAttributes;
  set PT02M009.PT02MPO2[8] initialAttributes;
  set PT02M009.PT02MPO2[9] initialAttributes;
  set PT02M009.PT02MPO2[10] initialAttributes;

  set PT02M009.PT02MPO3[1] initialAttributes;
  set PT02M009.PT02MPO3[2] initialAttributes;
  set PT02M009.PT02MPO3[3] initialAttributes;
  set PT02M009.PT02MPO3[4] initialAttributes;
  set PT02M009.PT02MPO3[5] initialAttributes;
  set PT02M009.PT02MPO3[6] initialAttributes;
  set PT02M009.PT02MPO3[7] initialAttributes;
  set PT02M009.PT02MPO3[8] initialAttributes;
  set PT02M009.PT02MPO3[9] initialAttributes;
  set PT02M009.PT02MPO3[10] initialAttributes;

  set PT02M009.PT02MPO4[1] initialAttributes;
  set PT02M009.PT02MPO4[2] initialAttributes;
  set PT02M009.PT02MPO4[3] initialAttributes;
  set PT02M009.PT02MPO4[4] initialAttributes;
  set PT02M009.PT02MPO4[5] initialAttributes;
  set PT02M009.PT02MPO4[6] initialAttributes;
  set PT02M009.PT02MPO4[7] initialAttributes;
  set PT02M009.PT02MPO4[8] initialAttributes;
  set PT02M009.PT02MPO4[9] initialAttributes;
  set PT02M009.PT02MPO4[10] initialAttributes;

  set PT02M009.PT02MPO5[1] initialAttributes;
  set PT02M009.PT02MPO5[2] initialAttributes;
  set PT02M009.PT02MPO5[3] initialAttributes;
  set PT02M009.PT02MPO5[4] initialAttributes;
  set PT02M009.PT02MPO5[5] initialAttributes;
  set PT02M009.PT02MPO5[6] initialAttributes;
  set PT02M009.PT02MPO5[7] initialAttributes;
  set PT02M009.PT02MPO5[8] initialAttributes;
  set PT02M009.PT02MPO5[9] initialAttributes;
  set PT02M009.PT02MPO5[10] initialAttributes;

  set PT02M009.PT02MFU1[1] initialAttributes;
  set PT02M009.PT02MFU1[2] initialAttributes;
  set PT02M009.PT02MFU1[3] initialAttributes;
  set PT02M009.PT02MFU1[4] initialAttributes;
  set PT02M009.PT02MFU1[5] initialAttributes;
  set PT02M009.PT02MFU1[6] initialAttributes;
  set PT02M009.PT02MFU1[7] initialAttributes;
  set PT02M009.PT02MFU1[8] initialAttributes;
  set PT02M009.PT02MFU1[9] initialAttributes;
  set PT02M009.PT02MFU1[10] initialAttributes;

  set PT02M009.PT02MFU2[1] initialAttributes;
  set PT02M009.PT02MFU2[2] initialAttributes;
  set PT02M009.PT02MFU2[3] initialAttributes;
  set PT02M009.PT02MFU2[4] initialAttributes;
  set PT02M009.PT02MFU2[5] initialAttributes;
  set PT02M009.PT02MFU2[6] initialAttributes;
  set PT02M009.PT02MFU2[7] initialAttributes;
  set PT02M009.PT02MFU2[8] initialAttributes;
  set PT02M009.PT02MFU2[9] initialAttributes;
  set PT02M009.PT02MFU2[10] initialAttributes;

  set PT02M009.PT02MDTE initialAttributes;
  set PT02M009.PT02MNAM initialAttributes;

end // end PT02094

// Verify the entered data
Function PT02095()
   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

  PT02W00.PT02WERF = "N";

   /* ------------------------------------------------------------*/
   /* validate scheduler name*/
   /* ------------------------------------------------------------*/
  if (PT02M009.PT02MNAM == " ")
    PT02W00.PT02WERF = "Y";
    converseLib.validationFailed(116); /* indicate missing or invalid*/
    PTWREC.XXXMODID = "095";
    set PT02M009.PT02MNAM cursor, bold;
  else
    set PT02M009.PT02MNAM initialAttributes;
  end
  if (PT02W00.PT02WERF == "Y")
    return;
  end
   /* ------------------------------------------------------------*/
   /* validate release date*/
   /* ------------------------------------------------------------*/
  if (PT02M009.PT02MDTE == " ")
    PT02W00.PT02WERF = "Y";
    converseLib.validationFailed(116); /* indicate missing or invalid*/
    PTWREC.XXXMODID = "095";
    set PT02M009.PT02MDTE cursor, bold;
  else
    PT02W00.PT02WDTE = PT02M009.PT02MDTE;
    if (PT02W00.PT02WD1 > 12)
      PT02W00.PT02WERF = "Y";
      converseLib.validationFailed(116); /* indicate missing or invalid*/
      PTWREC.XXXMODID = "095";
      set PT02M009.PT02MDTE cursor, bold;
    else
      if (PT02W00.PT02WD2 > 31)
        PT02W00.PT02WERF = "Y";
        converseLib.validationFailed(116); /* indicate missing or invalid*/
        PTWREC.XXXMODID = "095";
        set PT02M009.PT02MDTE cursor, bold;
      else
        set PT02M009.PT02MDTE initialAttributes;
      end
    end
  end
  if (PT02W00.PT02WERF == "Y")
    return;
  end
   /* ------------------------------------------------------------*/
   /* validate style/color/dimension*/
   /* ------------------------------------------------------------*/
  PT02W00.PT02WIXM = 10;

  while (PT02W00.PT02WIXM > 0)
    if (PT02M009.PT02MSTY[PT02WIXM] != "      "
     || PT02M009.PT02MCLR[PT02WIXM] != "   ")
   /* clear copybook*/
      set PG2REC empty;
   /* format key*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* current application*/
      PG2REC.XGPCD = "02";
      PG2REC.SY1STNBR = PT02M009.PT02MSTY[PT02WIXM];
      PG2REC.SY2CLRID = PT02M009.PT02MCLR[PT02WIXM];
   /* default dimension to '00' if not entered*/
      if (PT02M009.PT02MDIM[PT02WIXM] == "  ")
        PG2REC.XDMCD = "00";
      else
        PG2REC.XDMCD = PT02M009.PT02MDIM[PT02WIXM];
      end
   /* perform subroutine to call SYCLR*/
      XSPG202();
   /* if call was not normal, indicate error to user*/
      if (SQLCA.VAGen_SQLCODE != 0)
        converseLib.validationFailed(66);
        PT02W00.PT02WERF = "Y";
        PTWREC.XXXMODID = "95";
        set PT02M009.PT02MSTY[PT02WIXM] cursor, bold;
        set PT02M009.PT02MCLR[PT02WIXM] bold;
        set PT02M009.PT02MDIM[PT02WIXM] bold;
      end
    end
    if (PT02W00.PT02WERF == "Y")
      return;
    end
    PT02W00.PT02WIXM = PT02W00.PT02WIXM - 1;
  end

   /* ------------------------------------------------------------*/
   /* validate style*/
   /* ------------------------------------------------------------*/

  PT02W00.PT02WIXM = 10;

  while (PT02W00.PT02WIXM > 0)
    if (PT02M009.PT02MSTY[PT02WIXM] != "      ")
   /* clear copybook*/
      set PG2REC empty;
   /* format key*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* current application*/
      PG2REC.XGPCD = "02";
      PG2REC.SY1STNBR = PT02M009.PT02MSTY[PT02WIXM];
      PG2REC.XDMCD = "00";
   /* perform subroutine to call SYCLR*/
      XSPG201();
   /* if call was not normal, indicate error to user*/
      if (SQLCA.VAGen_SQLCODE != 0)
        converseLib.validationFailed(28);
        PT02W00.PT02WERF = "Y";
        PTWREC.XXXMODID = "95";
        set PT02M009.PT02MSTY[PT02WIXM] cursor, bold;
      end
    end
    if (PT02W00.PT02WERF == "Y")
      return;
    end
    PT02W00.PT02WIXM = PT02W00.PT02WIXM - 1;
  end

end // end PT02095

// Process valid input request
Function PT02096()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

  if (PT02W00.PT02WERF == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Output array index*/
  PT02W00.PT02WIXT = 1; /* jcl table index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03") /* if on production system*/
    PT02097(); /* format production jcl*/
  else
    PT02098(); /* format test jcl*/
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = "096"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PT02W00.PT02MSEL[9] = "*"; /* Indicate function completed*/

    set PT02M009 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end PT02096

// Process valid production jcl
Function PT02097()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT02T09.TARTYPE[PT02WIXT] == "W")
      if (PT02M009.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT81 FORMS=PT91,COPIES=1,DEST=RMT00";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT82 FORMS=PT92,COPIES=1,DEST=RMT00";
      else
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT81 FORMS=PT91,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT82 FORMS=PT92,COPIES=_,DEST=_____";
        TA6REC.TARTYPE[TA6INDEX] = "O";
      end
    else

      if (PT02T09.TARJCL[PT02WIXT] == "===DTL REPORT===")
        PT02W2A.PT02WPR9 = "//P0020.PT4812O  DD  DSN=PT.F4812.LAUNCH.DTL.";
        PT02W2A.PT02WFL9 = TA6REC.XURUSRID;
        TA6REC.TARJCL[TA6INDEX] = PT02W2A.PT02WJC9;
      else

        if (PT02T09.TARJCL[PT02WIXT] == "===SUM REPORT===")
          PT02W2A.PT02WPR9 = "//P0020.PT4814O  DD  DSN=PT.F4814.LAUNCH.SUM.";
          PT02W2A.PT02WFL9 = TA6REC.XURUSRID;
          TA6REC.TARJCL[TA6INDEX] = PT02W2A.PT02WJC9;
        else

          if (PT02T09.TARJCL[PT02WIXT] == "===PRINT===")
            if (PT02M009.PT02MIND == "Y") /* want to print reports*/
              PT0209A(); /* add print step to jcl*/
            end
          else

            if (PT02T09.TARTYPE[PT02WIXT] == "P") /* Parameters statement*/

              PT02W00.PT02WIXM = 1;
              while (PT02W00.PT02WIXM <= 10
               && PT02M009.PT02MSTY[PT02WIXM] != "      ")
        /* ------------------------------------------------------------*/
         /* Format the variable parameters entered by the user.*/
        /* ------------------------------------------------------------*/

                set PT02W09 empty; /* Parameters work area*/
                PT02W09.SY1STNBR = PT02M009.PT02MSTY[PT02WIXM];
                PT02W09.SY2CLRID = PT02M009.PT02MCLR[PT02WIXM];
                if (PT02M009.PT02MDIM[PT02WIXM] == "  ")
                  PT02W09.XDMCD = "00";
                else
                  PT02W09.XDMCD = PT02M009.PT02MDIM[PT02WIXM];
                end
                PT02W09.PT02MDTE = PT02M009.PT02MDTE;
                PT02W09.PT02MNAM = PT02M009.PT02MNAM;

                if (PT02M009.PT02MPO1[PT02WIXM] != "      ")
                  PT02W09.PT02MPO1 = PT02M009.PT02MPO1[PT02WIXM];
                  if (PT02M009.PT02MFU1[PT02WIXM] != "    ")
                    PT02W09.PT02MFU1 = PT02M009.PT02MFU1[PT02WIXM];
                  else
                    PT02W09.PT02MFU1 = "    ";
                  end
                  TA6REC.TARJCL[TA6INDEX] = PT02W09.TARJCL; /* Parameters*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                end

                if (PT02M009.PT02MPO2[PT02WIXM] != "      ")
                  PT02W09.PT02MPO1 = PT02M009.PT02MPO2[PT02WIXM];
                  if (PT02M009.PT02MFU2[PT02WIXM] != "    ")
                    PT02W09.PT02MFU1 = PT02M009.PT02MFU2[PT02WIXM];
                  else
                    PT02W09.PT02MFU1 = "    ";
                  end
                  TA6REC.TARJCL[TA6INDEX] = PT02W09.TARJCL; /* Parameters*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                end

                if (PT02M009.PT02MPO3[PT02WIXM] != "      ")
                  PT02W09.PT02MPO1 = PT02M009.PT02MPO3[PT02WIXM];
                  PT02W09.PT02MFU1 = "    ";

                  TA6REC.TARJCL[TA6INDEX] = PT02W09.TARJCL; /* Parameters*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                end

                if (PT02M009.PT02MPO4[PT02WIXM] != "      ")
                  PT02W09.PT02MPO1 = PT02M009.PT02MPO4[PT02WIXM];
                  PT02W09.PT02MFU1 = "    ";

                  TA6REC.TARJCL[TA6INDEX] = PT02W09.TARJCL; /* Parameters*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                end

                if (PT02M009.PT02MPO5[PT02WIXM] != "      ")
                  PT02W09.PT02MPO1 = PT02M009.PT02MPO5[PT02WIXM];
                  PT02W09.PT02MFU1 = "    ";

                  TA6REC.TARJCL[TA6INDEX] = PT02W09.TARJCL; /* Parameters*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                end

                PT02W00.PT02WIXM = PT02W00.PT02WIXM + 1; /* Input table index*/
              end /* (WHILE)*/
              TA6REC.TA6INDEX = TA6REC.TA6INDEX - 1; /* Output array index*/

            else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

              TA6REC.TARJCL[TA6INDEX] = PT02T09.TARJCL[PT02WIXT]; /* JCL*/
              TA6REC.TARTYPE[TA6INDEX] = PT02T09.TARTYPE[PT02WIXT]; /* Type*/

            end
          end
        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT02T09.TARJCL[PT02WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT02W00.PT02WIXT = PT02W00.PT02WIXT + 1; /* Input table index*/

    end

  end /* (WHILE)*/

end // end PT02097

// Process valid test jcl
Function PT02098()
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PT02T19.TARJCL[PT02WIXT] == "===NOTIFY===")
      PT02W2A.PT02WPR8 = "//             NOTIFY=";
      PT02W2A.PT02WUID = TA6REC.XURUSRID;
      PT02W2A.PT02WFL8 = " ";
      TA6REC.TARJCL[TA6INDEX] = PT02W2A.PT02WJC8;
    else

      if (PT02T19.TARJCL[PT02WIXT] == "===OUTPUT===")
        if (PT02M009.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT81 FORMS=PT81,COPIES=1,DEST=RMT00";
        else
          TA6REC.TARJCL[TA6INDEX] = "/*OUTPUT  PT81 FORMS=PT81,COPIES=_,DEST=_____";
          TA6REC.TARTYPE[TA6INDEX] = "O";
        end
      else

        if (PT02T19.TARJCL[PT02WIXT] == "===DTL REPORT===")
          PT02W2A.PT02WPR9 = "//P0020.PT4812O DD DSN=T.PT.F4812.LAUNCH.DTL.";
          PT02W2A.PT02WFL9 = TA6REC.XURUSRID;
          TA6REC.TARJCL[TA6INDEX] = PT02W2A.PT02WJC9;
        else

          if (PT02T19.TARJCL[PT02WIXT] == "===SUM REPORT===")
            PT02W2A.PT02WPR9 = "//P0020.PT4814O DD DSN=T.PT.F4814.LAUNCH.SUM.";
            PT02W2A.PT02WFL9 = TA6REC.XURUSRID;
            TA6REC.TARJCL[TA6INDEX] = PT02W2A.PT02WJC9;
          else

            if (PT02T19.TARJCL[PT02WIXT] == "===PRINT===")
              if (PT02M009.PT02MIND == "Y") /* want to print reports*/
                PT0209B(); /* add print step to jcl*/
              end
            else

              if (PT02T19.TARTYPE[PT02WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

                PT02W00.PT02WIXM = 1;
                while (PT02W00.PT02WIXM <= 10
                 && PT02M009.PT02MSTY[PT02WIXM] != "      ")

                  set PT02W09 empty; /* Parameters work area*/

                  PT02W09.SY1STNBR = PT02M009.PT02MSTY[PT02WIXM];
                  PT02W09.SY2CLRID = PT02M009.PT02MCLR[PT02WIXM];
                  if (PT02M009.PT02MDIM[PT02WIXM] == "  ")
                    PT02W09.XDMCD = "00";
                  else
                    PT02W09.XDMCD = PT02M009.PT02MDIM[PT02WIXM];
                  end
                  PT02W09.PT02MDTE = PT02M009.PT02MDTE;
                  PT02W09.PT02MNAM = PT02M009.PT02MNAM;

                  if (PT02M009.PT02MPO1[PT02WIXM] != "      ")
                    PT02W09.PT02MPO1 = PT02M009.PT02MPO1[PT02WIXM];
                    if (PT02M009.PT02MFU1[PT02WIXM] != "    ")
                      PT02W09.PT02MFU1 = PT02M009.PT02MFU1[PT02WIXM];
                    else
                      PT02W09.PT02MFU1 = "    ";
                    end
                    TA6REC.TARJCL[TA6INDEX] = PT02W09.TARJCL; /* Parameters*/
                    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                  end

                  if (PT02M009.PT02MPO2[PT02WIXM] != "      ")
                    PT02W09.PT02MPO1 = PT02M009.PT02MPO2[PT02WIXM];
                    if (PT02M009.PT02MFU2[PT02WIXM] != "    ")
                      PT02W09.PT02MFU1 = PT02M009.PT02MFU2[PT02WIXM];
                    else
                      PT02W09.PT02MFU1 = "    ";
                    end
                    TA6REC.TARJCL[TA6INDEX] = PT02W09.TARJCL; /* Parameters*/
                    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                  end

                  if (PT02M009.PT02MPO3[PT02WIXM] != "      ")
                    PT02W09.PT02MPO1 = PT02M009.PT02MPO3[PT02WIXM];
                    PT02W09.PT02MFU1 = "    ";

                    TA6REC.TARJCL[TA6INDEX] = PT02W09.TARJCL; /* Parameters*/
                    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                  end

                  if (PT02M009.PT02MPO4[PT02WIXM] != "      ")
                    PT02W09.PT02MPO1 = PT02M009.PT02MPO4[PT02WIXM];
                    PT02W09.PT02MFU1 = "    ";

                    TA6REC.TARJCL[TA6INDEX] = PT02W09.TARJCL; /* Parameters*/
                    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                  end

                  if (PT02M009.PT02MPO5[PT02WIXM] != "      ")
                    PT02W09.PT02MPO1 = PT02M009.PT02MPO5[PT02WIXM];
                    PT02W09.PT02MFU1 = "    ";

                    TA6REC.TARJCL[TA6INDEX] = PT02W09.TARJCL; /* Parameters*/
                    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
                  end
                  PT02W00.PT02WIXM = PT02W00.PT02WIXM + 1; /* Screen table index*/
                end /* (WHILE)*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX - 1; /* Output array index*/

              else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

                TA6REC.TARJCL[TA6INDEX] = PT02T19.TARJCL[PT02WIXT]; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = PT02T19.TARTYPE[PT02WIXT]; /* Type*/

              end
            end
          end
        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PT02T19.TARJCL[PT02WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PT02W00.PT02WIXT = PT02W00.PT02WIXT + 1; /* Input table index*/

    end

  end

end // end PT02098

// Process valid prod request
Function PT0209A()
  PT02W00.PT02WIX2 = 1;

  while (PT02W00.PT02WIX2 > 0) /* ; Until end of table*/
    if (PT02T9A.TARJCL[PT02WIX2] == "===FILE01===")
      if (PT02M009.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT81)'";
      else
        TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT81)'";
      end
    else
      if (PT02T9A.TARJCL[PT02WIX2] == "===FILE02===")
        if (PT02M009.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT82)'";
        else
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT82)'";
        end
      else
        TA6REC.TARJCL[TA6INDEX] = PT02T9A.TARJCL[PT02WIX2]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PT02T9A.TARTYPE[PT02WIX2]; /* Type*/
      end
    end
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT02W00.PT02WIX2 = PT02W00.PT02WIX2 + 1; /* Input table index*/
    if (PT02T9A.TARJCL[PT02WIX2] == "/*EOF")
      PT02W00.PT02WIX2 = 0; /* force end of file*/
    end
  end

end // end PT0209A

// Process valid prod  request
Function PT0209B()
  PT02W00.PT02WIX2 = 1;

  while (PT02W00.PT02WIX2 > 0) /* ; Until end of table*/
    if (PT02T9B.TARJCL[PT02WIX2] == "===FILE01===")
      if (PT02M009.XURDEST == "LOCAL") /* destination lazer*/
        TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT81)'";
      else
        TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT81)'";
      end
    else
      if (PT02T9B.TARJCL[PT02WIX2] == "===FILE02===")
        if (PT02M009.XURDEST == "LOCAL") /* destination lazer*/
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(N,,PT82)'";
        else
          TA6REC.TARJCL[TA6INDEX] = "//        FILE01='(P,,PT82)'";
        end
      else
        TA6REC.TARJCL[TA6INDEX] = PT02T9B.TARJCL[PT02WIX2]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PT02T9B.TARTYPE[PT02WIX2]; /* Type*/
      end
    end
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    PT02W00.PT02WIX2 = PT02W00.PT02WIX2 + 1; /* Input table index*/
    if (PT02T9B.TARJCL[PT02WIX2] == "/*EOF")
      PT02W00.PT02WIX2 = 0; /* force end of file*/
    end
  end

end // end PT0209B

// Report Request Menu
Function PT02990()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT02991(); /* Format and display the map*/

  PT02992(); /* Check attention identifier*/

  PT02993(); /* Reset fields to normal intensity*/

  PT02994(); /* Verify the data that was entered*/

  PT02995(); /* Process valid input request*/


end // end PT02990

// Format and display the map
Function PT02991()
   /* ------------------------------------------------------------*/
   /* call subroutine to find which environment the program is*/
   /* executing in, development or production.*/
   /* ------------------------------------------------------------*/

  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* call successful*/
   && TA3REC.TA3RTNCD == 0)         
  else
    converseLib.validationFailed(112); /* error encountered with call*/
  end

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, format the map output area.*/
    /* ------------------------------------------------------------*/

    set PT02M099 initial; /* M099 input/output*/

    PT02W00.PT02WIXM = 1; /* Initialize map index*/

    while (PT02W00.PT02WIXM <= PT02W00.PT02WIXL) /* Until end of array*/

      PT02M099.PT02MSEL[PT02WIXM] = PT02W00.PT02MSEL[PT02WIXM];

      PT02W00.PT02WIXM = PT02W00.PT02WIXM + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PT02M099.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT02M099.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PT02M099.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT02M099.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT02M099.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT02M099 alarm; /* Indicate sound alarm*/

  end

  converse PT02M099 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMSGNO = 0; /* Message number*/
  PTWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PT02M099.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PT02M099.CAITEM; /* Application data*/


end // end PT02991

// Check attention identifier
Function PT02992()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PT02M099 initial; /* M099 input/output*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    PT02S99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSPT001(); /* Exit to another application*/

      set PT02M099.CATOAP cursor, bold; /* Highlight*/

    else

      PTWREC.XXXMODID = "992"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    PT02S99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to Production*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PT03M099"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PT0M"; /* TO application*/
    end

    XSPT001(); /* Exit to another application*/

    COMMAREA.CATOAP = " "; /* Clear TO application*/

    PT02S99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PTWREC.XXXMODID = "992"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    PT02S99(); /* Exit to display map*/

  end


end // end PT02992

// Reset highlighted fields
Function PT02993()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  PT02W00.PT02WIXM = 1; /* Initialize index*/

  while (PT02W00.PT02WIXM <= PT02W00.PT02WIXL) /* Until all lines are reset*/

    set PT02M099.PT02MSEL[PT02WIXM] initialAttributes; /* Reset select field*/

    PT02W00.PT02WIXM = PT02W00.PT02WIXM + 1; /* Increment line index*/

  end

  set PT02M099.CATOAP initialAttributes; /* TO application*/
  set PT02M099.CAITEM initialAttributes; /* Application data*/


end // end PT02993

// Verify the entered data
Function PT02994()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PTWREC.XXXMODID = "994"; /* Module identification*/
    set PT02M099.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Check for proper select tag.*/
   /* ------------------------------------------------------------*/

  PT02W00.PT02WIXM = PT02W00.PT02WIXL; /* Initialize line index*/

  while (PT02W00.PT02WIXM > 0) /* Until all lines are verified*/

    /* ------------------------------------------------------------*/
     /* Indicate an error if the line was not selected properly.*/
    /* ------------------------------------------------------------*/

    if (PT02M099.PT02MSEL[PT02WIXM] != PT02W00.PT02MSEL[PT02WIXM]
     && PT02M099.PT02MSEL[PT02WIXM] != " " /* Line was selected*/
     && PT02M099.PT02MSEL[PT02WIXM] != "S") /* and not with an "S"*/

      PTWREC.XXXMODID = "994"; /* Module identification*/
      set PT02M099.PT02MSEL[PT02WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(13); /* Only "S" is valid*/

    end

    PT02W00.PT02WIXM = PT02W00.PT02WIXM - 1; /* Decrement line number*/

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PT02S99(); /* Exit to display map*/
  end


end // end PT02994

// Process valid input request
Function PT02995()
   /* ------------------------------------------------------------*/
   /* Save the selections in the working storage array.*/
   /* ------------------------------------------------------------*/

  move PT02M099.PT02MSEL to PT02W00.PT02MSEL[1] for all; /* Menu selections*/

   /* ------------------------------------------------------------*/
   /* If specify destination selected, indicate to subroutine to*/
   /* display output destination, but, do not submit any JCL.*/
   /* ------------------------------------------------------------*/

  if (PT02W00.PT02MSEL[1] == "S") /* Specify destination selected*/
    TA6REC.TA6SUBSW = "N"; /* Indicate do not submit JCL*/
  end


end // end PT02995

// select 's' dprodg.vsygrp01
Function PT02S-010-110()
   /* ------------------------------------------------------------*/
   /* obtain default date from dcorp.vparm101*/
   /* ------------------------------------------------------------*/

  set XZZREC empty;
  XZZREC.XZZQRYID = "PT4950"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/
  try
    call "IO1000" ("S ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PT02M010.PT02MPRM = XZZREC.XZZ1CHR1;
      PT02M010.PT02MNSZ = XZZREC.XZZ2CHR1;
      PT02M010.PT02MASC = XZZREC.XZZ2CHR2;
      PT02M010.PT02MTLQ = XZZREC.XZZ4CHR1;
      PT02W00.PT02WGRP = XZZREC.XZZ6CHR;
      PT02M010.PT02MPRC = PT02W00.PT02WPRC;
      PT02M010.PT02MPLC = PT02W00.PT02WPLC;
      PT02M010.PT02MPCC = PT02W00.PT02WPCC;
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "101"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
   /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT02S-010-110

// date validation yymm
Function PT02S-015-110()

   /* -----------------------------------------------------------;*/
    /* first delete the old row*/
   /* -----------------------------------------------------------;*/
  XZZREC.XZZQRYID = "PT4950"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/

  try
    call "IO1000" ("D ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* -----------------------------------------------------------;*/
    /* if delete didnt work bomb on out with ezeflo*/
   /* -----------------------------------------------------------;*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    PTWREC.XXXMODID = "S10"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


   /* -----------------------------------------------------------;*/
    /* then add the new row*/
   /* -----------------------------------------------------------;*/

  set XZZREC empty;

  XZZREC.XZZ1CHR1 = "R";
  XZZREC.XZZ2CHR1 = PT02M010.PT02MNSZ;
  XZZREC.XZZ4CHR1 = PT02M010.PT02MTLQ;
  XZZREC.XZZ2CHR2 = PT02M010.PT02MASC;
  PT02W00.PT02WPRC = PT02M010.PT02MPRC;
  PT02W00.PT02WPLC = PT02M010.PT02MPLC;
  PT02W00.PT02WPCC = PT02M010.PT02MPCC;
  XZZREC.XZZ6CHR = PT02W00.PT02WGRP;

  XZZREC.XZZQRYID = "PT4950"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/

  try
    call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* -----------------------------------------------------------;*/
    /* if add didnt work bomb on out with ezeflo*/
   /* -----------------------------------------------------------;*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    PTWREC.XXXMODID = "S10"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
    /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


end // end PT02S-015-110

// date validation yymm
Function PT02S02()

   /* ------------------------------------------------------------*/
   /* validate/format from YYMM to CCYYMM.*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* option*/

  TA2REC.TA2GRGDD = 01; /* dd to be validated*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call successful*/
   || TA2REC.TA2RTNCD >= 888)        /* and subroutine completed*/

    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "PT02S02 DATE EDIT YYMM";

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    PTWREC.XXXMODID = "S02"; /* Module identification*/
    converseLib.validationFailed(10); /* System error occurred*/

    exit stack; /* exit to display map*/

  end


end // end PT02S02

// select 's' dprodg.vsyclr01
Function PT02S21()
   /* ------------------------------------------------------------*/
   /* obtain style number dprodg.vsyclr01*/
   /* ------------------------------------------------------------*/

  PG2REC.XGPCD = COMMAREA.XGPCD;

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "S21"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(41); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DPRODG.VSYCLR01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT02S21

// date validation yymm
Function PT02S56()

   /* -----------------------------------------------------------;*/
    /* first delete the old row*/
   /* -----------------------------------------------------------;*/
  XZZREC.XZZQRYID = "PT4300"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/

  try
    call "IO1000" ("D ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* -----------------------------------------------------------;*/
    /* if delete didnt work bomb on out with ezeflo*/
   /* -----------------------------------------------------------;*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    PTWREC.XXXMODID = "S56"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


   /* -----------------------------------------------------------;*/
    /* then add the new row*/
   /* -----------------------------------------------------------;*/

  set XZZREC empty;

  XZZREC.XZZ1CHR1 = "R";
  XZZREC.XZZINT1 = PT02M005.PT02MLPD;
  XZZREC.XZZ2CHR1 = PT02M005.PT02MSCH;

  XZZREC.XZZQRYID = "PT4300"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/

  try
    call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* -----------------------------------------------------------;*/
    /* if add didnt work bomb on out with ezeflo*/
   /* -----------------------------------------------------------;*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    PTWREC.XXXMODID = "S56"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
    /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


end // end PT02S56

// select 's' dprodg.vsygrp01
Function PT02S61()
   /* ------------------------------------------------------------*/
   /* obtain default date from dcorp.vparm101*/
   /* ------------------------------------------------------------*/

  set XZZREC empty;
  XZZREC.XZZQRYID = "PT4540"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/
  try
    call "IO1000" ("S ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PT02M006.PT02MPRM = XZZREC.XZZ1CHR1;
      PT02M006.PT02MNSZ = XZZREC.XZZ2CHR1;
      PT02M006.PT02MASC = XZZREC.XZZ2CHR2;
      PT02M006.PT02MTLQ = XZZREC.XZZ4CHR1;
      /* MOVE XZZREC.XZZSINT1 TO PT02M006.PT02MRPD;*/
      /* MOVE XZZREC.XZZINT1 TO PT02M006.PT02MPPS;*/
      /* MOVE XZZREC.XZZINT2 TO PT02M006.PT02MPPE;*/
      PT02M006.PT02MRPD = "05";
      PT02W00.PT02W-CURR-DATE = VGVar.currentShortGregorianDate;

      PT02W00.PT02W-CURRENT-MM = PT02W00.PT02W-CURR-MM;
      PT02W00.PT02W-CURRENT-YY = PT02W00.PT02W-CURR-YY;

      if (PT02W00.PT02W-CURRENT-YY > 60)
        PT02W00.PT02W-CURRENT-CC = 19;
      else
        PT02W00.PT02W-CURRENT-CC = 20;
      end
      PT02M006.PT02MPPS = PT02W00.PT02W-CURRENT-PERIOD;
      PT02W00.PT02W-LAST-PRT-RPT-PERIOD = PT02W00.PT02W-CURRENT-PERIOD + 9;
      if (PT02W00.PT02W-LAST-PRT-RPT-MM > 12)
        PT02W00.PT02W-LAST-PRT-RPT-CCYY = PT02W00.PT02W-LAST-PRT-RPT-CCYY         + 1;
        PT02W00.PT02W-LAST-PRT-RPT-MM = PT02W00.PT02W-LAST-PRT-RPT-MM         - 12;
      end
      PT02M006.PT02MPPE = PT02W00.PT02W-LAST-PRT-RPT-PERIOD;
      PT02W00.PT02WGRP = XZZREC.XZZ6CHR;
      PT02M006.PT02MPRC = PT02W00.PT02WPRC;
      PT02M006.PT02MPLC = PT02W00.PT02WPLC;
      PT02M006.PT02MPCC = PT02W00.PT02WPCC;
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PTWREC.XXXMODID = "061"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
   /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT02S61

// date validation yymm
Function PT02S66()

   /* -----------------------------------------------------------;*/
    /* first delete the old row*/
   /* -----------------------------------------------------------;*/
  XZZREC.XZZQRYID = "PT4540"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/

  try
    call "IO1000" ("D ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* -----------------------------------------------------------;*/
    /* if delete didnt work bomb on out with ezeflo*/
   /* -----------------------------------------------------------;*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    PTWREC.XXXMODID = "S66"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


   /* -----------------------------------------------------------;*/
    /* then add the new row*/
   /* -----------------------------------------------------------;*/

  set XZZREC empty;

  XZZREC.XZZ1CHR1 = "R";
  XZZREC.XZZ2CHR1 = PT02M006.PT02MNSZ;
  XZZREC.XZZ4CHR1 = PT02M006.PT02MTLQ;
  XZZREC.XZZSINT1 = PT02M006.PT02MRPD;
  XZZREC.XZZINT1 = PT02M006.PT02MPPS;
  XZZREC.XZZINT2 = PT02M006.PT02MPPE;
  XZZREC.XZZ2CHR2 = PT02M006.PT02MASC;
  PT02W00.PT02WPRC = PT02M006.PT02MPRC;
  PT02W00.PT02WPLC = PT02M006.PT02MPLC;
  PT02W00.PT02WPCC = PT02M006.PT02MPCC;
  XZZREC.XZZ6CHR = PT02W00.PT02WGRP;

  XZZREC.XZZQRYID = "PT4540"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/

  try
    call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* -----------------------------------------------------------;*/
    /* if add didnt work bomb on out with ezeflo*/
   /* -----------------------------------------------------------;*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    PTWREC.XXXMODID = "S66"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
    /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


end // end PT02S66

// date validation yymm
Function PT02S76()

   /* -----------------------------------------------------------;*/
    /* first delete the old row*/
   /* -----------------------------------------------------------;*/
  XZZREC.XZZQRYID = "PT4470"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/

  try
    call "IO1000" ("D ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* -----------------------------------------------------------;*/
    /* if delete didnt work bomb on out with ezeflo*/
   /* -----------------------------------------------------------;*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    PTWREC.XXXMODID = "S76"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


   /* -----------------------------------------------------------;*/
    /* then add the new row*/
   /* -----------------------------------------------------------;*/

  set XZZREC empty;

  XZZREC.XZZ1CHR1 = "R";
  XZZREC.XZZ3CHR1 = PT02M007.PT02MPRV;
  XZZREC.XZZ3CHR2 = PT02M007.PT02MPRV;
  XZZREC.XZZ2CHR1 = PT02M007.PT02MNSZ;
  XZZREC.XZZ4CHR1 = PT02M007.PT02MPMO;
  XZZREC.XZZ2CHR2 = PT02M007.PT02MASC;
  XZZREC.XZZ4CHR2 = PT02M007.PT02MAVQ;
  PT02W00.PT02WPRC = PT02M007.PT02MPRC;
  PT02W00.PT02WPLC = PT02M007.PT02MPLC;
  PT02W00.PT02WPCC = PT02M007.PT02MPCC;
  XZZREC.XZZ6CHR = PT02W00.PT02WGRP;

  XZZREC.XZZQRYID = "PT4470"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/

  try
    call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* -----------------------------------------------------------;*/
    /* if add didnt work bomb on out with ezeflo*/
   /* -----------------------------------------------------------;*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    PTWREC.XXXMODID = "S76"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
    /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


end // end PT02S76

// date validation yymm
Function PT02S86()

   /* -----------------------------------------------------------;*/
    /* first delete the old row*/
   /* -----------------------------------------------------------;*/
  XZZREC.XZZQRYID = "PT4080"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/

  try
    call "IO1000" ("D ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* -----------------------------------------------------------;*/
    /* if delete didnt work bomb on out with ezeflo*/
   /* -----------------------------------------------------------;*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    PTWREC.XXXMODID = "S86"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


   /* -----------------------------------------------------------;*/
    /* then add the new row*/
   /* -----------------------------------------------------------;*/

  set XZZREC empty;

  XZZREC.XZZ1CHR1 = "R";
  XZZREC.XZZINT1 = PT02M008.PT02MPBD;
  XZZREC.XZZINT2 = PT02M008.PT02MPED;
  XZZREC.XZZ8CHR = PT02M008.PT02MLPD;

  XZZREC.XZZQRYID = "PT4080"; /* load prog name to key*/
  XZZREC.XZZQRYRN = 0; /* load request number*/
  XZZREC.XZZQRYLN = 0; /* load line number*/

  try
    call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* -----------------------------------------------------------;*/
    /* if add didnt work bomb on out with ezeflo*/
   /* -----------------------------------------------------------;*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    PTWREC.XXXMODID = "S86"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DCORP.VPARM101 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
    /* MOVE SYBREC.SYBDATA TO TA1REC.TA1TBLKE ; Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


end // end PT02S86

// Clear selections and exit
Function PT02S99()
   /* ------------------------------------------------------------*/
   /* Reset any pending selections in working storage.*/
   /* ------------------------------------------------------------*/

  PT02W00.PT02WIXM = 1; /* Initialize map index*/

  while (PT02W00.PT02WIXM <= PT02W00.PT02WIXL) /* Until end of array*/

    if (PT02W00.PT02MSEL[PT02WIXM] == "S") /* Entry is selected*/
      PT02W00.PT02MSEL[PT02WIXM] = " "; /* Reset entry*/
    end

    PT02W00.PT02WIXM = PT02W00.PT02WIXM + 1; /* Increment index*/

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the selection menu map.*/
   /* ------------------------------------------------------------*/

  exit stack; /* Exit to display map*/


end // end PT02S99

//*** RECORD=PT02W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PT02W00 type basicRecord
  10 PT02WERF PT02WERF ; 
  10 PT02WFOR PT02WFOR ; 
  10 PT02WJOB PT02WJOB ; 
  10 PT02MSEL PT02MSEL [10] ; 
  10 PT02WGRP PT02WGRP ; 
    15 PT02WPRC PT02WPRC ; 
    15 PT02WPLC PT02WPLC ; 
    15 PT02WPCC PT02WPCC ; 
  10 PT02WDT3 PT02WDT3 ; 
    15 PT02WDT1 PT02WDT1 ; 
    15 PT02WDT2 PT02WDT2 ; 
  10 PT02WRD2 PT02WRD2 ; 
  10 PT02WRD3 PT02WRD3 ; 
  10 PT02WRD4 PT02WRD4 ; 
  10 PT02WRD5 PT02WRD5 ; 
  10 PT02WRD6 PT02WRD6 ; 
  10 PT02WRD7 PT02WRD7 ; 
  10 PT02WRD8 PT02WRD8 ; 
  10 PT02WRD9 PT02WRD9 ; 
  10 PT02WRD10 PT02WRD10 ; 
  10 PT02WIXL PT02WIXL ; 
  10 PT02WIXM PT02WIXM ; 
  10 PT02WIX2 PT02WIX2 ; 
  10 PT02WIXT PT02WIXT ; 
  10 PT02WSWX PT02WSWX ; 
  10 PT02WFLG PT02WFLG ; 
  10 PT02WDTE PT02WDTE ; 
    15 PT02WD1 PT02WD1 ; 
    15 PT02WD2 PT02WD2 ; 
    15 PT02WD3 PT02WD3 ; 
  10 PT02W-CURR-DATE PT02W-CURR-DATE ; 
    15 PT02W-CURR-CC PT02W-CURR-CC ; 
    15 PT02W-CURR-YY PT02W-CURR-YY ; 
    15 PT02W-CURR-MM PT02W-CURR-MM ; 
    15 PT02W-CURR-DD num(2) ; // Current DD
  10 PT02W-CURRENT-PERIOD PT02W-CURRENT-PERIOD ; 
    15 PT02W-CURRENT-CC PT02W-CURRENT-CC ; 
    15 PT02W-CURRENT-YY PT02W-CURRENT-YY ; 
    15 PT02W-CURRENT-MM PT02W-CURRENT-MM ; 
  10 PT02W-LAST-REPORT-PERIOD PT02W-LAST-REPORT-PERIOD ; 
    15 PT02W-LAST-REPORT-CCYY PT02W-LAST-REPORT-CCYY ; 
    15 PT02W-LAST-REPORT-MM PT02W-LAST-REPORT-MM ; 
  10 PT02W-LAST-PRT-RPT-PERIOD PT02W-LAST-PRT-RPT-PERIOD ; 
    15 PT02W-LAST-PRT-RPT-CCYY PT02W-LAST-PRT-RPT-CCYY ; 
    15 PT02W-LAST-PRT-RPT-MM PT02W-LAST-PRT-RPT-MM ; 
end // end PT02W00

//*** RECORD=PT02W01 ****
// ------------------------------------------------------------
// Job and form identification variables in the JCL statements.
// ------------------------------------------------------------
// ***********************
Record PT02W01 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(4) ; 
    10 PT02W1JO PT02W1JO ; 
      15 PT02WRFO PT02WRFO ; 
    10 * char(3) ; 
    10 PT02WRPR PT02WRPR ; 
    10 * char(3) ; 
    10 PT02W3PR PT02W3PR ; 
    10 * char(1) ; 
    10 PT02W2PR PT02W2PR ; 
    10 * char(9) ; 
    10 PT02W4FI PT02W4FI ; 
    10 * char(50) ; 
  5 TARTYPE TARTYPE ; 
end // end PT02W01

//*** RECORD=PT02W02 ****
// ------------------------------------------------------------
// Parameters for pt4501 - b-grade report
// ------------------------------------------------------------
// ***********************
Record PT02W02 type basicRecord
  5 TARJCL TARJCL ; 
    10 PT02MFAC PT02MFAC ; 
    10 PT02MSTY PT02MSTY ; 
    10 PT02MCLR PT02MCLR ; 
    10 PT02MDIM PT02MDIM ; 
      15 * char(2) ; 
      15 PT02WDM3 PT02WDM3 ; 
    10 PT02MCTY PT02MCTY ; 
    10 PT02MHST PT02MHST ; 
    10 PT02MPTG PT02MPTG ; 
    10 PT02MPLC PT02MPLC ; 
    10 PT02MPCC PT02MPCC ; 
    10 PT02WFIL PT02WFIL ; 
end // end PT02W02

//*** RECORD=PT02W03 ****
// ------------------------------------------------------------
// Parameters for pt???? - delivery analysis report
// ------------------------------------------------------------
// ***********************
Record PT02W03 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(80) ; 
end // end PT02W03

//*** RECORD=PT02W04 ****
// ------------------------------------------------------------
// Parameters for pt???? - factory performance report
// ------------------------------------------------------------
// ***********************
Record PT02W04 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(80) ; 
end // end PT02W04

//*** RECORD=PT02W05 ****
// ------------------------------------------------------------
// Parameters for pt4301 - late production mapper file request
// ------------------------------------------------------------
// ***********************
Record PT02W05 type basicRecord
  5 TARJCL TARJCL ; 
    10 PT02MPRM PT02MPRM ; 
    10 PT02MLPD PT02MLPD ; 
    10 PT02MSCH PT02MSCH ; 
    10 * char(69) ; 
end // end PT02W05

//*** RECORD=PT02W06 ****
// ------------------------------------------------------------
// Parameters for pt4541 - negative availability report
// ------------------------------------------------------------
// ***********************
Record PT02W06 type basicRecord
  5 TARJCL TARJCL ; 
    10 PT02MPRM PT02MPRM ; 
    10 PT02MTLQ PT02MTLQ ; 
    10 PT02MNSZ PT02MNSZ ; 
    10 PT02MASC PT02MASC ; 
    10 PT02MPRC PT02MPRC ; 
    10 PT02MPLC PT02MPLC ; 
    10 PT02MPCC PT02MPCC ; 
    10 PT02MRPD PT02MRPD ; 
    10 PT02MPPS PT02MPPS ; 
    10 PT02MPPE PT02MPPE ; 
    10 * char(49) ; 
end // end PT02W06

//*** RECORD=PT02W07 ****
// ------------------------------------------------------------
// Parameters for pt4471 - percent variance report
// ------------------------------------------------------------
// ***********************
Record PT02W07 type basicRecord
  5 TARJCL TARJCL ; 
    10 PT02MPRM PT02MPRM ; 
    10 PT02MGUV PT02MGUV ; 
    10 PT02MFRV PT02MFRV ; 
    10 PT02MNSZ PT02MNSZ ; 
    10 PT02MPMO PT02MPMO ; 
    10 PT02MASC PT02MASC ; 
    10 PT02MPRC PT02MPRC ; 
    10 PT02MPLC PT02MPLC ; 
    10 PT02MPCC PT02MPCC ; 
    10 PT02MAVQ PT02MAVQ ; 
    10 * char(55) ; 
end // end PT02W07

//*** RECORD=PT02W08 ****
// ------------------------------------------------------------
// Parameters for pt4471 - percent variance report
// ------------------------------------------------------------
// ***********************
Record PT02W08 type basicRecord
  5 TARJCL TARJCL ; 
    10 PT02MPBD PT02MPBD ; 
    10 PT02WDD1 PT02WDD1 ; 
    10 PT02MPED PT02MPED ; 
    10 PT02WDD2 PT02WDD2 ; 
    10 PT02MPRM PT02MPRM ; 
    10 PT02MLPD PT02MLPD ; 
    10 * char(55) ; 
end // end PT02W08

//*** RECORD=PT02W09 ****
// ------------------------------------------------------------
// Parameters for pt4811 - launch product delivery update rpt
// ------------------------------------------------------------
// ***********************
Record PT02W09 type basicRecord
  5 TARJCL TARJCL ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 PT02MPO1 PT02MPO1 ; 
    10 PT02MFU1 PT02MFU1 ; 
    10 PT02MDTE PT02MDTE ; 
    10 PT02MNAM PT02MNAM ; 
    10 * char(33) ; 
end // end PT02W09

//*** RECORD=PT02W10 ****
// ------------------------------------------------------------
// Parameters for pt4E41 - Equip negative availability  report.
// ------------------------------------------------------------
// ***********************
Record PT02W10 type basicRecord
  5 TARJCL TARJCL ; 
    10 PT02MPRM PT02MPRM ; 
    10 PT02MTLQ PT02MTLQ ; 
    10 PT02MNSZ PT02MNSZ ; 
    10 PT02MASC PT02MASC ; 
    10 PT02MPRC PT02MPRC ; 
    10 PT02MPLC PT02MPLC ; 
    10 PT02MPCC PT02MPCC ; 
    10 * char(65) ; 
end // end PT02W10

//*** RECORD=PT02W2A ****
// ------------------------------------------------------------
// Parameters for pt4522 - ftwr b-grade report
// ------------------------------------------------------------
// ***********************
Record PT02W2A type basicRecord
  5 PT02WJC1 PT02WJC1 ; 
    10 PT02WPR1 PT02WPR1 ; 
    10 PT02MFAC PT02MFAC ; 
    10 PT02WSF1 PT02WSF1 ; 
    10 PT02WFL1 PT02WFL1 ; 
  5 PT02WJC2 PT02WJC2 ; 
    10 PT02WPR2 PT02WPR2 ; 
    10 PT02MSTY PT02MSTY ; 
    10 PT02WSF2 PT02WSF2 ; 
    10 PT02WFL2 PT02WFL2 ; 
  5 PT02WJC3 PT02WJC3 ; 
    10 PT02WPR3 PT02WPR3 ; 
    10 PT02MCLR PT02MCLR ; 
    10 PT02WSF3 PT02WSF3 ; 
    10 PT02WFL3 PT02WFL3 ; 
  5 PT02WJC4 PT02WJC4 ; 
    10 PT02WPR4 PT02WPR4 ; 
    10 PT02MDIM PT02MDIM ; 
    10 PT02WSF4 PT02WSF4 ; 
    10 PT02WFL4 PT02WFL4 ; 
  5 PT02WJC5 PT02WJC5 ; 
    10 PT02WPR5 PT02WPR5 ; 
    10 PT02MCTY PT02MCTY ; 
    10 PT02WSF5 PT02WSF5 ; 
    10 PT02WFL5 PT02WFL5 ; 
  5 PT02WJC6 PT02WJC6 ; 
    10 PT02WPR6 PT02WPR6 ; 
    10 PT02MPLC PT02MPLC ; 
    10 PT02WSF6 PT02WSF6 ; 
    10 PT02WFL6 PT02WFL6 ; 
  5 PT02WJC7 PT02WJC7 ; 
    10 PT02WPR7 PT02WPR7 ; 
    10 PT02MPCC PT02MPCC ; 
    10 PT02WSF7 PT02WSF7 ; 
    10 PT02WFL7 PT02WFL7 ; 
  5 PT02WJC8 PT02WJC8 ; 
    10 PT02WPR8 PT02WPR8 ; 
    10 PT02WUID PT02WUID ; 
    10 PT02WFL8 PT02WFL8 ; 
  5 PT02WJC9 PT02WJC9 ; 
    10 PT02WPR9 PT02WPR9 ; 
    10 PT02WFL9 PT02WFL9 ; 
end // end PT02W2A

// sched/avail-specialist code
DataItem PT02MASC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// avail qty
DataItem PT02MAVQ char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// identifying color
DataItem PT02MCLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// foreign country code
DataItem PT02MCTY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dimension code
DataItem PT02MDIM char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// scheduled release date
DataItem PT02MDTE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory code
DataItem PT02MFAC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fringe variance
DataItem PT02MFRV char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT02MFU1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gut variance
DataItem PT02MGUV char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history bridge (yes/no)
DataItem PT02MHST char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// late as of date
DataItem PT02MLPD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// scheduler name preparing rpt
DataItem PT02MNAM char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// no of sizes
DataItem PT02MNSZ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT02MPBD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// product category code
DataItem PT02MPCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT02MPED num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// product line code
DataItem PT02MPLC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po-month
DataItem PT02MPMO char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT02MPO1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT02MPPE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT02MPPS num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product type group
DataItem PT02MPRC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parm update flag
DataItem PT02MPRM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product type group
DataItem PT02MPTG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT02MRPD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// scheduler code
DataItem PT02MSCH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Menu selection code
DataItem PT02MSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style number
DataItem PT02MSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tolerance
DataItem PT02MTLQ char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT02W-CURR-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT02W-CURR-DATE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT02W-CURR-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT02W-CURR-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT02W-CURRENT-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT02W-CURRENT-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT02W-CURRENT-PERIOD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT02W-CURRENT-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT02W-LAST-PRT-RPT-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT02W-LAST-PRT-RPT-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT02W-LAST-PRT-RPT-PERIOD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT02W-LAST-REPORT-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT02W-LAST-REPORT-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT02W-LAST-REPORT-PERIOD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// JOB job identification
DataItem PT02W1JO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// EXEC procedure identification
DataItem PT02W2PR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RUN program identification
DataItem PT02W3PR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PRINTDS file identification
DataItem PT02W4FI char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sort include flag
DataItem PT02WD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sort include flag
DataItem PT02WD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sort include flag
DataItem PT02WD3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT02WDD1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT02WDD2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last byte of 3 char dim code
DataItem PT02WDM3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ccyymm part of above date
DataItem PT02WDT1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dd     part of above date
DataItem PT02WDT2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ccyymmdd date format
DataItem PT02WDT3 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sort include flag
DataItem PT02WDTE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem PT02WERF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT02WFIL char(51)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl filler
DataItem PT02WFL1 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl end filler
DataItem PT02WFL2 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT02WFL3 char(41)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT02WFL4 char(41)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT02WFL5 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT02WFL6 char(42)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT02WFL7 char(42)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT02WFL8 char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT02WFL9 char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sort include flag
DataItem PT02WFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forms code
DataItem PT02WFOR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pgc plc & pcc codes combined
DataItem PT02WGRP char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Secondary index for map fields
DataItem PT02WIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Limit for map fields index
DataItem PT02WIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PT02WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for table fields
DataItem PT02WIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT02WJC1 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT02WJC2 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT02WJC3 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT02WJC4 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT02WJC5 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT02WJC6 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT02WJC7 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT02WJC8 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT02WJC9 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job identification
DataItem PT02WJOB char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product category code
DataItem PT02WPCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product line code
DataItem PT02WPLC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl prefix 1
DataItem PT02WPR1 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl prefix 2
DataItem PT02WPR2 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl prefix 3
DataItem PT02WPR3 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl prefix 4
DataItem PT02WPR4 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl prefix 5
DataItem PT02WPR5 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl prefix 6
DataItem PT02WPR6 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl prefix 7
DataItem PT02WPR7 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl prefix 7
DataItem PT02WPR8 char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl prefix 7
DataItem PT02WPR9 char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product type code
DataItem PT02WPRC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request data switch for map 7
DataItem PT02WRD10 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request data switch for map 2
DataItem PT02WRD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request data switch for map 3
DataItem PT02WRD3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request data switch for map 4
DataItem PT02WRD4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request data switch for map 5
DataItem PT02WRD5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request data switch for map 6
DataItem PT02WRD6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request data switch for map 7
DataItem PT02WRD7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request data switch for map 7
DataItem PT02WRD8 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request data switch for map 7
DataItem PT02WRD9 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report distribution form
DataItem PT02WRFO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report distribution program
DataItem PT02WRPR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl suffix 1
DataItem PT02WSF1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl suffix 2
DataItem PT02WSF2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl suffix 3
DataItem PT02WSF3 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl suffix 4
DataItem PT02WSF4 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl suffix 5
DataItem PT02WSF5 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl suffix 6
DataItem PT02WSF6 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl suffix 7
DataItem PT02WSF7 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Exit requested switch
DataItem PT02WSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl suffix 7
DataItem PT02WUID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

