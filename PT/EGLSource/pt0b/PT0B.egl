package pt0b;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import pc.common.*;
import pg.common.*;
import pt.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PT0B ****
// This application allows a user to inquire and maintain rows
// in the Modeling Months Table.
// 
// There are three different screens that may be displayed.
// 
// The first screen displayed to the user indicates the General
// Product Class for which data is to be displayed.  This
// screen is used to add new rows to the table, either by
// category or by style, color, dimension, specification
// difference, packaging type and unit of measure.  The user
// may also request a list of the existing categories or styles
// in the table by pressing the appropriate PF key from this
// screen.
// 
// The other two screens display either the list of existing
// categories or the list of existing styles, in response to
// the user's PF key request.  The user may change or delete
// the rows displayed in these lists.  The user may page
// backward and forward to view the existing rows.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          10/25/88  SPOPA   New application.
// E#00000  01/27/89  SPOPA   Establish cursor position on the
//                            last field for which a pop-up
//                            window request was made.
// E#00000  03/02/89  SPOPA   Establish cursor position on
//                            CATEGORY upon initial entry or
//                            when a new category is entered
//                            and on STYLE when a new style is
//                            entered. Default color/dimension.
// E#00000  04/05/89  SPOPA   Change XTVCD processing to XGPCD.
// E#00004  04-05-90  MBLAIL  Table changes, xsd-spec-cd
//                            replaced by pc-cu-in-seg-cd. No
//                            pop-up window for seg-cd since
//                            no corp table exists.
//  pt-34   09-26-91  bantho  Added quality to pt0bm001 & m003.
//                            add code to validate quality and
//                            to set up read of dmodel.vmnym001
// PT9999   11-09-93  MSMIT2  SET PTWREC EMPTY.
// Y2KFIX   03/12/98  ksumme  Y2K MODIFICATIONS MADE TO:
//                            regen to pick up xx0xs01
// PT022    09/21/98  SMURTH  Change in num. of months to calc
//                            Old values <= 9.
//                            New Vlaues 9 thru 12.
// *********************
Program PT0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PT00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PC2REC PC2REC; // record
  PG2REC PG2REC; // record
  PT0BW00 PT0BW00; // record
  PT0BW01 PT0BW01; // record
  PT0BW02 PT0BW02; // record
  PT0BW03 PT0BW03; // record
  PT1REC PT1REC; // record
  PTWREC PTWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use PT0BM.PT0BM001,  // forms
      PT0BM.PT0BM002, 
      PT0BM.PT0BM003, 
      PT0BM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPT001: XPPT001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set PT0BW00 empty; /* Working storage*/
    set PT0BW01 empty; /* M001 display storage*/
    set PT0BW02 empty; /* M002 display storage*/
    set PT0BW03 empty; /* M003 display storage*/
    set TA5REC empty; /* Temporary storage parameters*/

    set PTWREC empty; /* INITIALIZE COMMAREA WORK REC*/

     /* ------------------------------------------------------------*/
     /* Indicate the initial map to be displayed.*/
     /* ------------------------------------------------------------*/

    PT0BW00.PT0BWMAP = "1"; /* Indicate map to be displayed*/

     /* ------------------------------------------------------------*/
     /* Default the quality to 01.*/
     /* ------------------------------------------------------------*/

    PT0BM001.XQACD = "01"; /* Default quality*/
    PT0BW01.XQACD = "01"; /* Default quality*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display maps.*/
     /* ------------------------------------------------------------*/

    goto PT0B001; /* Converse the main process*/


    PT0B001: PT0B001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display maps.*/
     /* ------------------------------------------------------------*/

    goto PT0B001; /* Converse the main process*/


  end // end main
end // end PT0B

// Main process to display maps
Function PT0B001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, if specified, display the third map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PT0BW00.PT0BWMAP == "1") /* Map 1 was requested*/

    PT0B100(); /* Display map 1*/

  else

    if (PT0BW00.PT0BWMAP == "2") /* Map 2 was requested*/

      PT0B200(); /* Display map 2*/

    else

      if (PT0BW00.PT0BWMAP == "3") /* Map 3 was requested*/

        PT0B300(); /* Display map 3*/

      else

        TA1REC.TA1TYPE = "APPL"; /* Type of error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1PGMNM = "PT0B001"; /* Process name*/
        TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
        TA1REC.TA1MAP = PT0BW00.PT0BWMAP; /* Map name*/
        SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";

        call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

        XSPF4(); /* Exit to Master Menu*/

      end

    end

  end


end // end PT0B001

// Add a new Control row
Function PT0B100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT0B110(); /* Obtain the data to display*/

  PT0B120(); /* Format and display the map*/

  PT0B130(); /* Check attention identifier*/

  PT0B140(); /* Reset fields to normal intensity*/

  PT0B150(); /* Verify the entered data*/

  PT0B160(); /* Process valid input request*/


end // end PT0B100

// Obtain the data to display
Function PT0B110()
   /* ------------------------------------------------------------*/
   /* If an error was found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* An error was found*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Obtain the General Product Class code and description.*/
   /* ------------------------------------------------------------*/

  PT0BW01.XGPCD = COMMAREA.XGPCD; /* GPC code*/

  if (PT0BW01.XGPCD in XGPTBL.XGPCD /* Code in table*/
   && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PT0BW01.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex]; /* Save description*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PT0BW01.XGPABRV = " "; /* Clear description*/

    PT0BM001.XXXMODID = "110"; /* Module identification*/
    set PT0BM001.XGPCD cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(22); /* Indicate missing or invalid*/

  end


   /* ------------------------------------------------------------*/
   /* Validate the quality code and description.*/
   /* ------------------------------------------------------------*/

  if (PT0BM001.XQACD > " ") /* map not clear*/
    PT0BW01.XQACD = PT0BM001.XQACD; /* Restore quality from map*/
  else
    PT0BW01.XQACD = PT0BW00.XQACD; /* Restore quality from ws*/
  end

  if (PT0BW01.XQACD in XQATBL.XQACD /* Code in table*/
   && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PT0BW01.XQADESC = XQATBL.XQADESC[sysVar.arrayIndex]; /* Save description*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PT0BW01.XQADESC = " "; /* Clear description*/

    PT0BM001.XXXMODID = "110"; /* Module identification*/
    set PT0BM001.XQACD cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(117); /* Indicate missing or invalid*/

  end

end // end PT0B110

// Format and converse the map
Function PT0B120()
   /* ------------------------------------------------------------*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set PT0BM001 alarm; /* Indicate sound alarm*/
  end

   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/
    PT0B121(); /* Format the data on the map*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date in the map.*/
   /* ------------------------------------------------------------*/

  PT0BM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

   /* ------------------------------------------------------------*/
   /* If application data exists, format it in the map.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data exists*/

    PT0BM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
    set PT0BM001.CAITEM modified; /* Set MDT on*/
    COMMAREA.CAITEM = " "; /* Clear application data*/

  end

   /* ------------------------------------------------------------*/
   /* Reset the information message number.*/
   /* ------------------------------------------------------------*/

  PT0BW00.PT0BWMNO = 0; /* Reset information message number*/

  converse PT0BM001 ;


end // end PT0B120

// Format the display data
Function PT0B121()
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  set PT0BM001 initial; /* Clear map output area*/

  PT0BM001.XGPCD = PT0BW01.XGPCD; /* GPC code*/
  PT0BM001.XGPABRV = PT0BW01.XGPABRV; /* GPC description*/

  PT0BM001.XQACD = PT0BW01.XQACD; /* Quality code*/
  PT0BM001.XQADESC = PT0BW01.XQADESC; /* Quality description*/

  PT0BM001.XPCCD = PT0BW01.XPCCD; /* Category code*/
  PT0BM001.XPCSDESC = PT0BW01.XPCSDESC; /* Category description*/

  PT0BM001.PT1MTC[1] = PT0BW01.PT1MTC[1]; /* Months to calculate*/

  if (converseVar.validationMsgNum == 0 /* No error was found*/
   && PT0BW01.SY1STNBR > " ")           /* and style entered*/

    set PT0BM001.SY1STNBR cursor; /* Establish cursor position*/

  end

  PT0BM001.SY1STNBR = PT0BW01.SY1STNBR; /* Style number*/
  PT0BM001.SY1SSTNM = PT0BW01.SY1SSTNM; /* Style description*/

  PT0BM001.SY2CLRID = PT0BW01.SY2CLRID; /* Color identification*/
  PT0BM001.SY2CLRAB = PT0BW01.SY2CLRAB; /* Color description*/

  PT0BM001.XDMCD = PT0BW01.XDMCD; /* Dimension code*/
  PT0BM001.XDMABRV = PT0BW01.XDMABRV; /* Dimension description*/

  PT0BM001.PC2INSEG = PT0BW01.PC2INSEG; /* Invt. segment code*/
  PT0BM001.PC2SEGAB = PT0BW01.PC2SEGAB; /* Invt. segment desc.*/

  PT0BM001.XPGCD = PT0BW01.XPGCD; /* Packaging type code*/
  PT0BM001.XPGABRV = PT0BW01.XPGABRV; /* Packaging type description*/

  PT0BM001.XUMCD = PT0BW01.XUMCD; /* Unit of measure code*/
  PT0BM001.XUMDESC = PT0BW01.XUMDESC; /* Unit of measure description*/

  PT0BM001.PT1MTC[2] = PT0BW01.PT1MTC[2]; /* Months to calculate*/

  if (PT0BW00.PT0BWMNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(PT0BW00.PT0BWMNO);
  end /* Information message number*/

end // end PT0B121

// Check attention identifier
Function PT0B130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PT0BM001 initial; /* Clear the map fields*/
    set PT0BW01 empty; /* and the display storage*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PT0BM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = PT0BM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PT0BM001.CAITEM; /* Application data*/

      XSPT001(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    PT0BM001.XXXMODID = "130"; /* Module identification*/
    set PT0BM001.CATOAP cursor, modified, bold; /* Highlight*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PT0BM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PT0M"; /* TO application*/
    end

    XSPT001(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    PT0BM001.XXXMODID = "130"; /* Module identification*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf12  /* and PF12 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14) /* and PF14 was not pressed*/

    PT0BM001.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end


end // end PT0B130

// Reset highlighted fields
Function PT0B140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PT0BM001.XGPCD initialAttributes; /* GPC code*/
  set PT0BM001.XPCCD initialAttributes; /* Category code*/
  set PT0BM001.XQACD initialAttributes; /* Quality code*/
  set PT0BM001.PT1MTC[1] initialAttributes; /* Category number of months*/
  set PT0BM001.SY1STNBR initialAttributes; /* Style code*/
  set PT0BM001.SY2CLRID initialAttributes; /* Color code*/
  set PT0BM001.XDMCD initialAttributes; /* Dimension code*/
  set PT0BM001.PC2INSEG initialAttributes; /* Cust. invt. segment code*/
  set PT0BM001.XPGCD initialAttributes; /* Packaging type code*/
  set PT0BM001.XUMCD initialAttributes; /* Unit of measure code*/
  set PT0BM001.PT1MTC[2] initialAttributes; /* Style number of months*/
  set PT0BM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PT0BM001.CAITEM initialAttributes; /* Commarea application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PT0BM001.XGPCD == "?" /* GPC list requested*/
   || PT0BM001.XPCCD == "?" /* or category list requested*/
   || PT0BM001.XDMCD == "?" /* or dimension list requested*/
   || PT0BM001.XPGCD == "?" /* or packaging type list requested*/
   || PT0BM001.XUMCD == "?" /* or unit of measure list requested*/
   || PT0BM001.XQACD == "?") /* or quality list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      PT0BM001.XXXMODID = "140"; /* Module identification*/
      converseLib.validationFailed(34); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list for GPC code.*/
   /* ------------------------------------------------------------*/

  if (PT0BM001.XGPCD == "?") /* GPC list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  GPC"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXGP01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PT0BM001.XGPCD = PT0BW01.XGPCD; /* Restore prior code*/
      PT0BM001.XGPABRV = PT0BW01.XGPABRV; /* Description*/
    else
      PT0BM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* Selected code*/
      PT0BM001.XGPABRV = XGPTBL.XGPABRV[XX0XWPIX]; /* Description*/

    end

    set PT0BM001.XGPCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list for unit of quality code.*/
   /* ------------------------------------------------------------*/

  if (PT0BM001.XQACD == "?") /* Unit of measure list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  QUALITY"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXQA01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PT0BM001.XQACD = PT0BW01.XQACD; /* Restore prior code*/
      PT0BM001.XQADESC = PT0BW01.XQADESC; /* Description*/
    else
      PT0BM001.XQACD = XQATBL.XQACD[XX0XWPIX]; /* Selected code*/
      PT0BM001.XQADESC = XQATBL.XQADESC[XX0XWPIX]; /* Description*/

    end

    set PT0BM001.XQACD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list for category code.*/
   /* ------------------------------------------------------------*/

  if (PT0BM001.XPCCD == "?") /* Category list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = PT0BM001.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PT0BM001.XPCCD = PT0BW01.XPCCD; /* Restore prior code*/
      PT0BM001.XPCSDESC = PT0BW01.XPCSDESC; /* Description*/
    else
      PT0BM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      PT0BM001.XPCSDESC = XPCTBL.XPCSDESC[XX0XWPIX]; /* Description*/

    end

    set PT0BM001.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list for dimension code.*/
   /* ------------------------------------------------------------*/

  if (PT0BM001.XDMCD == "?") /* Dimension list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  DIM"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDM01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PT0BM001.XDMCD = PT0BW01.XDMCD; /* Restore prior code*/
      PT0BM001.XDMABRV = PT0BW01.XDMABRV; /* Description*/
    else
      PT0BM001.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/
      PT0BM001.XDMABRV = XDMTBL.XDMABRV[XX0XWPIX]; /* Description*/

    end

    set PT0BM001.XDMCD cursor; /* Establish cursor position*/

  end


   /* ------------------------------------------------------------*/
   /* If requested, display the list for packaging type code.*/
   /* ------------------------------------------------------------*/

  if (PT0BM001.XPGCD == "?") /* Packaging type list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  PKG TYP"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PT0BM001.XPGCD = PT0BW01.XPGCD; /* Restore prior code*/
      PT0BM001.XPGABRV = PT0BW01.XPGABRV; /* Description*/
    else
      PT0BM001.XPGCD = XPGTBL.XPGCD[XX0XWPIX]; /* Selected code*/
      PT0BM001.XPGABRV = XPGTBL.XPGABRV[XX0XWPIX]; /* Description*/

    end

    set PT0BM001.XPGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list for unit of measure code.*/
   /* ------------------------------------------------------------*/

  if (PT0BM001.XUMCD == "?") /* Unit of measure list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  UOM"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXUM01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PT0BM001.XUMCD = PT0BW01.XUMCD; /* Restore prior code*/
      PT0BM001.XUMDESC = PT0BW01.XUMDESC; /* Description*/
    else
      PT0BM001.XUMCD = XUMTBL.XUMCD[XX0XWPIX]; /* Selected code*/
      PT0BM001.XUMDESC = XUMTBL.XUMDESC[XX0XWPIX]; /* Description*/

    end

    set PT0BM001.XUMCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  PT0BM001.XXXMODID = "140"; /* Module identification*/
  converseLib.validationFailed(35); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end PT0B140

// Verify the entered data
Function PT0B150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PT0BM001.CAITEM > " ") /* Application data was entered*/

    PT0BM001.XXXMODID = "150"; /* Module identification*/
    set PT0BM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the description fields in the map area.*/
   /* ------------------------------------------------------------*/

  PT0BM001.XGPABRV = " "; /* GPC description*/
  PT0BM001.XPCSDESC = " "; /* Category description*/
  PT0BM001.XQADESC = " "; /* Quality description*/
  PT0BM001.SY1SSTNM = " "; /* Style description*/
  PT0BM001.SY2CLRAB = " "; /* Color description*/
  PT0BM001.XDMABRV = " "; /* Dimension description*/
  PT0BM001.PC2SEGAB = " "; /* INvt. segment description*/
  PT0BM001.XPGABRV = " "; /* Packaging type description*/
  PT0BM001.XUMDESC = " "; /* Unit of measure description*/

   /* ------------------------------------------------------------*/
   /* Initialize the edit error switch.*/
   /* ------------------------------------------------------------*/

  PT0BW00.PT0BWSWE = "N"; /* Initialize edit error switch*/

   /* ------------------------------------------------------------*/
   /* Verify the quality code and obtain description.*/
   /* ------------------------------------------------------------*/

  if (PT0BM001.XQACD in XQATBL.XQACD /* Code in table*/
   && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PT0BM001.XQADESC = XQATBL.XQADESC[sysVar.arrayIndex]; /* Save description*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PT0BW00.PT0BWSWE = "Y"; /* Indicate error found*/

    PT0BM001.XQADESC = " "; /* Clear description*/

    PT0BM001.XXXMODID = "150"; /* Module identification*/
    set PT0BM001.XQACD cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(117); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the General Product Class code.*/
   /* ------------------------------------------------------------*/

  if (PT0BM001.XGPCD in XGPTBL.XGPCD /* Code in table*/
   && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PT0BM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex]; /* Save description*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PT0BW00.PT0BWSWE = "Y"; /* Indicate error found*/

    PT0BM001.XGPABRV = " "; /* Clear description*/

    PT0BM001.XXXMODID = "150"; /* Module identification*/
    set PT0BM001.XGPCD cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(22); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* If PF13 or PF14 was not pressed, determine whether any data*/
   /* was entered to add a new row.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not pf13 /* PF13 was not pressed*/
   && converseVar.eventKey not pf14) /* and PF14 was not pressed*/

    /* ------------------------------------------------------------*/
     /* If new row information changed, determine if data entered.*/
    /* ------------------------------------------------------------*/

    if (PT0BM001.XGPCD != PT0BW01.XGPCD         /* Changed category code*/
     || PT0BM001.XPCCD != PT0BW01.XPCCD         /* Changed category code*/
     || PT0BM001.PT1MTC[1] != PT0BW01.PT1MTC[1] /* category months*/
     || PT0BM001.XQACD != PT0BW01.XQACD         /* quality code*/
     || PT0BM001.SY1STNBR != PT0BW01.SY1STNBR   /* style code*/
     || PT0BM001.SY2CLRID != PT0BW01.SY2CLRID   /* color code*/
     || PT0BM001.XDMCD != PT0BW01.XDMCD         /* dimension code*/
     || PT0BM001.PC2INSEG != PT0BW01.PC2INSEG   /* Invt. seg code diff.*/
     || PT0BM001.XPGCD != PT0BW01.XPGCD         /* packaging type code*/
     || PT0BM001.XUMCD != PT0BW01.XUMCD         /* unit of measure code*/
     || PT0BM001.PT1MTC[2] != PT0BW01.PT1MTC[2]) /* style months*/

      /* ------------------------------------------------------------*/
       /* Clear the protected code fields in the map area.*/
      /* ------------------------------------------------------------*/

      PT0BM001.PC2INSEG = " "; /* Cust. invt. segment code*/
      PT0BM001.XPGCD = " "; /* Packaging type code*/
      PT0BM001.XUMCD = " "; /* Unit of measure code*/

      /* ------------------------------------------------------------*/
       /* If style data was entered, edit for a new style row.*/
      /* ------------------------------------------------------------*/

      if (PT0BM001.SY1STNBR > " " /* Entered style code*/
       || PT0BM001.SY2CLRID > " " /* color code*/
       || PT0BM001.XDMCD > " "    /* dimension code*/
       || PT0BM001.PC2INSEG > " " /* cust. invt. segment code*/
       || PT0BM001.XPGCD > " "    /* packaging type code*/
       || PT0BM001.XUMCD > " "    /* unit of measure code*/
       || PT0BM001.PT1MTC[2] > 0) /* style months*/

        PT0B151(); /* Edit for new style*/

      else

        /* ------------------------------------------------------------*/
         /* If category data was entered, edit for a new category row.*/
        /* ------------------------------------------------------------*/

        if (PT0BM001.XPCCD > " " /* Entered category code*/
         || PT0BM001.PT1MTC[1] > 0) /* category months*/

          PT0B152(); /* Edit for new category*/

        end

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If PF13 or PF14 was pressed and any of the fields changed,*/
   /* determine whether any data was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* PF13 was pressed*/
   || converseVar.eventKey is pf14) /* or PF14 was pressed*/

    if (PT0BM001.XPCCD != PT0BW01.XPCCD         /* Changed category code*/
     || PT0BM001.PT1MTC[1] != PT0BW01.PT1MTC[1] /* category months*/
     || PT0BM001.SY1STNBR != PT0BW01.SY1STNBR   /* style code*/
     || PT0BM001.SY2CLRID != PT0BW01.SY2CLRID   /* color code*/
     || PT0BM001.XDMCD != PT0BW01.XDMCD         /* dimension code*/
     || PT0BM001.PC2INSEG != PT0BW01.PC2INSEG   /* invt. segment code*/
     || PT0BM001.XPGCD != PT0BW01.XPGCD         /* packaging type code*/
     || PT0BM001.XUMCD != PT0BW01.XUMCD         /* unit of measure code*/
     || PT0BM001.PT1MTC[2] != PT0BW01.PT1MTC[2]) /* style months*/

      /* ------------------------------------------------------------*/
       /* If entered, indicate either press ENTER to update or press*/
       /* PA2 to cancel.*/
      /* ------------------------------------------------------------*/

      if (PT0BM001.XPCCD > " "    /* Entered category code*/
       || PT0BM001.XQACD > " "    /* quality code*/
       || PT0BM001.PT1MTC[1] > 0  /* category months*/
       || PT0BM001.SY1STNBR > " " /* style code*/
       || PT0BM001.SY2CLRID > " " /* color code*/
       || PT0BM001.XDMCD > " "    /* dimension code*/
       || PT0BM001.PC2INSEG > " " /* cust. invt. segment code*/
       || PT0BM001.XPGCD > " "    /* packaging type code*/
       || PT0BM001.XUMCD > " "    /* unit of measure code*/
       || PT0BM001.PT1MTC[2] > 0) /* style months*/

        PT0BM001.XXXMODID = "150"; /* Module identification*/
        converseLib.validationFailed(24); /* Indicate press PA2 to cancel*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If PF13 or PF14 was not pressed and none of the fields*/
   /* changed, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not pf13           /* PF13 was not pressed*/
   && converseVar.eventKey not pf14           /* & PF14 was not pressed*/
   && PT0BM001.XGPCD == PT0BW01.XGPCD         /* and same GPC code*/
   && PT0BM001.XPCCD == PT0BW01.XPCCD         /* category code*/
   && PT0BM001.XQACD == PT0BW01.XQACD         /* quality code*/
   && PT0BM001.PT1MTC[1] == PT0BW01.PT1MTC[1] /* category months*/
   && PT0BM001.SY1STNBR == PT0BW01.SY1STNBR   /* style code*/
   && PT0BM001.SY2CLRID == PT0BW01.SY2CLRID   /* color code*/
   && PT0BM001.XDMCD == PT0BW01.XDMCD         /* dimension code*/
   && PT0BM001.PC2INSEG == PT0BW01.PC2INSEG   /* invt. segment code*/
   && PT0BM001.XPGCD == PT0BW01.XPGCD         /* packaging type code*/
   && PT0BM001.XUMCD == PT0BW01.XUMCD         /* unit of measure code*/
   && PT0BM001.PT1MTC[2] == PT0BW01.PT1MTC[2]) /* style months*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF12 was pressed, indicate press enter to update.*/
   /* Exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf12) /* PF12 was pressed*/

    PT0BM001.XXXMODID = "150"; /* Module identification*/
    converseLib.validationFailed(17); /* Indicate press enter to update*/

    exit stack; /* Exit to display map*/

  end


end // end PT0B150

// Edit for new style row
Function PT0B151()
   /* ------------------------------------------------------------*/
   /* Set default input values.*/
   /* ------------------------------------------------------------*/

  if (PT0BM001.SY2CLRID <= " ") /* Color not entered*/
    PT0BM001.SY2CLRID = "00"; /* Default color*/
  end

  if (PT0BM001.XDMCD <= " ") /* Dimension not entered*/
    PT0BM001.XDMCD = "00"; /* Default dimension*/
  end

  PT0BM001.PC2INSEG = "000"; /* Default cust. invt. segment cd*/
  PT0BM001.XPGCD = "00"; /* Default packaging type*/

   /* ------------------------------------------------------------*/
   /* Verify that style months is between 9 and 12 both inclusive*/
   /* ------------------------------------------------------------*/

  if (PT0BM001.PT1MTC[2] < 9 /* Style months less than 9*/
   || PT0BM001.PT1MTC[2] > 12) /* or greater than 12*/

    PT0BM001.XXXMODID = "151"; /* Module identification*/
    set PT0BM001.PT1MTC[2] cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(26); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the packaging type and obtain description.*/
   /* ------------------------------------------------------------*/

  if (PT0BM001.XPGCD in XPGTBL.XPGCD /* Code in table*/
   && XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PT0BM001.XPGABRV = XPGTBL.XPGABRV[sysVar.arrayIndex]; /* Save description*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PT0BW00.PT0BWSWE = "Y"; /* Indicate error found*/

    PT0BM001.XPGABRV = " "; /* Clear description*/

    PT0BM001.XXXMODID = "151"; /* Module identification*/
    set PT0BM001.XPGCD cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(32); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the segment code and obtain description.*/
   /* ------------------------------------------------------------*/

  set PC2REC empty;
  PC2REC.XGPCD = PT0BM001.XGPCD; /* gpc code*/
  PC2REC.PC2INSEG = PT0BM001.PC2INSEG; /* cust segment code*/

  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    PT0BM001.PC2SEGAB = PC2REC.PC2SEGAB;
    set PT0BM001.PC2INSEG normal;
    /* EZERTN;*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      PT0BW00.PT0BWSWE = "Y"; /* Indicate error found*/
      PT0BM001.XXXMODID = "151"; /* Module identification*/
      converseLib.validationFailed(31); /* style record not found*/
      set PT0BM001.PC2INSEG cursor, modified, bold;
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "PT0B";
        TA1REC.TA1LOCAT = "SELECT ";
        TA1REC.TA1MAP = "PT0B151";
        TA1REC.TA1DBASE = "DPRODC";
        TA1REC.TA1TBLVU = "VPRDCU01"; /* table view*/
        TA1REC.TA1TBLKE = PT0BM001.PC2INSEG; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        converseLib.validationFailed(75);
        converseLib.clearScreen();
        
        return;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "PT0B";
        TA1REC.TA1LOCAT = "SELECT ";
        TA1REC.TA1MAP = "PT0BM001";
        TA1REC.TA1DBASE = "DPRODC"; /* table name*/
        TA1REC.TA1TBLVU = "VPRDCU01"; /* table view*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        converseLib.clearScreen();
        
        converseLib.validationFailed(76); /* fatal error*/
        return;
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* Verify the dimension and obtain description.*/
   /* ------------------------------------------------------------*/

  if (PT0BM001.XDMCD in XDMTBL.XDMCD /* Code in table*/
   && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PT0BM001.XDMABRV = XDMTBL.XDMABRV[sysVar.arrayIndex]; /* Save description*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PT0BW00.PT0BWSWE = "Y"; /* Indicate error found*/

    PT0BM001.XDMABRV = " "; /* Clear description*/

    PT0BM001.XXXMODID = "151"; /* Module identification*/
    set PT0BM001.XDMCD cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(30); /* Indicate missing or invalid*/

  end


   /* ------------------------------------------------------------*/
   /* If color was not entered, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (PT0BM001.SY2CLRID <= " ") /* Color was not entered*/

    PT0BW00.PT0BWSWE = "Y"; /* Indicate error found*/

    PT0BM001.XXXMODID = "151"; /* Module identification*/
    set PT0BM001.SY2CLRID cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(29); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* If style was not entered, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (PT0BM001.SY1STNBR <= " ") /* Style was not entered*/

    PT0BW00.PT0BWSWE = "Y"; /* Indicate error found*/

    PT0BM001.XXXMODID = "151"; /* Module identification*/
    set PT0BM001.SY1STNBR cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(28); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* If no edit error was found, verify the style number.*/
   /* ------------------------------------------------------------*/

  if (PT0BW00.PT0BWSWE == "N") /* No edit error was found*/
    PT0BS01(); /* Verify style number*/
  end

   /* ------------------------------------------------------------*/
   /* If no edit error was found, verify color identification.*/
   /* ------------------------------------------------------------*/

  if (PT0BW00.PT0BWSWE == "N") /* No edit error was found*/
    PT0BS02(); /* Verify color identification*/
  end

   /* ------------------------------------------------------------*/
   /* If no edit error was found, determine if the row to be*/
   /* added is already on file.*/
   /* ------------------------------------------------------------*/

  if (PT0BW00.PT0BWSWE == "N") /* No edit error was found*/

    set PT1REC empty; /* Clear row storage area*/

    PT1REC.XGPCD = PT0BM001.XGPCD; /* GPC code*/
    PT1REC.XQACD = PT0BM001.XQACD; /* Quality code*/
    PT1REC.SY1STNBR = PT0BM001.SY1STNBR; /* Style code*/
    PT1REC.SY2CLRID = PT0BM001.SY2CLRID; /* Color code*/
    PT1REC.XDMCD = PT0BM001.XDMCD; /* Dimension code*/
    PT1REC.PC2INSEG = PT0BM001.PC2INSEG; /* Seg. code / spec code*/
    PT1REC.XPGCD = PT0BM001.XPGCD; /* Packaging type code*/
    PT1REC.XUMCD = PT0BM001.XUMCD; /* Unit of measure code*/

    PT0BS03(); /* Select table row*/

  end

   /* ------------------------------------------------------------*/
   /* If any category-related fields were entered, highlight and*/
   /* indicate either category or style may be added, not both.*/
   /* ------------------------------------------------------------*/

  if (PT0BM001.PT1MTC[1] > 0) /* Category months entered*/

    PT0BM001.XXXMODID = "151"; /* Module identification*/
    set PT0BM001.PT1MTC[1] cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(23); /* Indicate cannot enter both*/

  end

  if (PT0BM001.XPCCD > " ") /* Category entered*/

    PT0BM001.XXXMODID = "151"; /* Module identification*/
    set PT0BM001.XPCCD cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(23); /* Indicate cannot enter both*/

  end


end // end PT0B151

// Edit for new category row
Function PT0B152()
   /* ------------------------------------------------------------*/
   /* If any style-related fields were entered, highlight and*/
   /* indicate either category or style may be added, not both.*/
   /* ------------------------------------------------------------*/

  if (PT0BM001.PT1MTC[2] > 0) /* Style months entered*/

    PT0BM001.XXXMODID = "152"; /* Module identification*/
    set PT0BM001.PT1MTC[2] cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(23); /* Indicate cannot enter both*/

  end

  if (PT0BM001.XUMCD > " ") /* Unit of measure entered*/

    PT0BM001.XXXMODID = "152"; /* Module identification*/
    set PT0BM001.XUMCD cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(23); /* Indicate cannot enter both*/

  end

  if (PT0BM001.XPGCD > " ") /* Packaging type entered*/

    PT0BM001.XXXMODID = "152"; /* Module identification*/
    set PT0BM001.XPGCD cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(23); /* Indicate cannot enter both*/

  end

  if (PT0BM001.PC2INSEG > " ") /* invt. segment code*/

    PT0BM001.XXXMODID = "152"; /* Module identification*/
    set PT0BM001.PC2INSEG cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(23); /* Indicate cannot enter both*/

  end

  if (PT0BM001.XDMCD > " ") /* Dimension entered*/

    PT0BM001.XXXMODID = "152"; /* Module identification*/
    set PT0BM001.XDMCD cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(23); /* Indicate cannot enter both*/

  end

  if (PT0BM001.SY2CLRID > " ") /* Color entered*/

    PT0BM001.XXXMODID = "152"; /* Module identification*/
    set PT0BM001.SY2CLRID cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(23); /* Indicate cannot enter both*/

  end

  if (PT0BM001.SY1STNBR > " ") /* Style entered*/

    PT0BM001.XXXMODID = "152"; /* Module identification*/
    set PT0BM001.SY1STNBR cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(23); /* Indicate cannot enter both*/

  end

   /* ------------------------------------------------------------*/
   /* Verify that category months is between 9 and 12 both inclusive*/
   /* ------------------------------------------------------------*/

  if (PT0BM001.PT1MTC[1] < 9 /* Category months less than 9*/
   || PT0BM001.PT1MTC[1] > 12) /* or greater than 12*/

    PT0BM001.XXXMODID = "152"; /* Module identification*/
    set PT0BM001.PT1MTC[1] cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(26); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the product category and obtain description.*/
   /* ------------------------------------------------------------*/

  PT0BW00.XPCCD = PT0BM001.XPCCD; /* Category code*/
  PT0BW00.XGPCD = PT0BM001.XGPCD; /* GPC code*/

  if (PT0BW00.XPCKEY in XPCTBL.XPCKEY /* Code in table*/
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PT0BM001.XPCSDESC = XPCTBL.XPCSDESC[sysVar.arrayIndex]; /* Save description*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PT0BW00.PT0BWSWE = "Y"; /* Indicate error found*/

    PT0BM001.XPCSDESC = " "; /* Clear description*/

    PT0BM001.XXXMODID = "152"; /* Module identification*/
    set PT0BM001.XPCCD cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(25); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* If no edit error was found, determine if the row to be*/
   /* added is already on file.*/
   /* ------------------------------------------------------------*/

  if (PT0BW00.PT0BWSWE == "N") /* No edit error was found*/

    set PT1REC empty; /* Clear row storage area*/

    PT1REC.XGPCD = PT0BM001.XGPCD; /* GPC code*/
    PT1REC.XQACD = PT0BM001.XQACD; /* Quality code*/
    PT1REC.XPCCD = PT0BM001.XPCCD; /* Category code*/

    PT0BS03(); /* Select table row*/

  end


end // end PT0B152

// Process valid input request
Function PT0B160()
   /* ------------------------------------------------------------*/
   /* Save the entered GPC code in the COMMAREA.*/
   /* ------------------------------------------------------------*/

  COMMAREA.XGPCD = PT0BM001.XGPCD; /* GPC code*/

   /* ------------------------------------------------------------*/
   /* Save the entered Quality code in Working Storage.*/
   /* ------------------------------------------------------------*/

  PT0BW00.XQACD = PT0BM001.XQACD; /* Quality code*/

   /* ------------------------------------------------------------*/
   /* If PF13 or PF14 was pressed, indicate next map to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* PF13 was pressed*/
   || converseVar.eventKey is pf14) /* or PF14 was pressed*/

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      PT0BW00.PT0BWMAP = "2"; /* Indicate map to be displayed*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      PT0BW00.PT0BWMAP = "3"; /* Indicate map to be displayed*/
    end

    /* ------------------------------------------------------------*/
     /* Clear the display storage for the current map.*/
    /* ------------------------------------------------------------*/

    set PT0BW01 empty; /* Clear current display storage*/

    /* ------------------------------------------------------------*/
     /* Indicate that the data to display must be obtained and the*/
     /* initial page to be displayed.*/
    /* ------------------------------------------------------------*/

    PT0BW00.PT0BWSWR = "Y"; /* Indicate obtain data to display*/
    PT0BW00.PT0BWTSP = 1; /* Indicate initial page to display*/

    /* ------------------------------------------------------------*/
     /* Exit to display the next map.*/
    /* ------------------------------------------------------------*/

    exit stack; /* Exit to display next map*/

  end

   /* ------------------------------------------------------------*/
   /* If category or style was entered, add the new table row.*/
   /* ------------------------------------------------------------*/

  if (PT0BM001.XPCCD > " " /* Category was entered*/
   || PT0BM001.SY1STNBR > " ") /* or style was entered*/

    /* ------------------------------------------------------------*/
     /* Obtain the current date and time.*/
    /* ------------------------------------------------------------*/

    XX0XS01(); /* Obtain date and time*/

    /* ------------------------------------------------------------*/
     /* If category was entered, add a new category row.*/
    /* ------------------------------------------------------------*/

    if (PT0BM001.XPCCD > " ") /* Category was entered*/
      PT0B161(); /* Add category row*/
    end

    /* ------------------------------------------------------------*/
     /* If style was entered, add a new style row.*/
    /* ------------------------------------------------------------*/

    if (PT0BM001.SY1STNBR > " ") /* Style was entered*/
      PT0B162(); /* Add style row*/
    end

    /* ------------------------------------------------------------*/
     /* Indicate that the update was successfully completed.*/
    /* ------------------------------------------------------------*/

    PT0BW00.PT0BWMNO = 1; /* Indicate update completed*/

  end

   /* ------------------------------------------------------------*/
   /* Save the map fields in the display storage area.*/
   /* ------------------------------------------------------------*/

  PT0BW01.XGPCD = PT0BM001.XGPCD; /* GPC code*/
  PT0BW01.XPCCD = PT0BM001.XPCCD; /* Save category code*/
  PT0BW01.XPCSDESC = PT0BM001.XPCSDESC; /* category description*/
  PT0BW01.XQACD = PT0BM001.XQACD; /* quality code*/
  PT0BW01.XQADESC = PT0BM001.XQADESC; /* quality description*/
  PT0BW01.PT1MTC[1] = PT0BM001.PT1MTC[1]; /* category months*/
  PT0BW01.SY1STNBR = PT0BM001.SY1STNBR; /* style code*/
  PT0BW01.SY1SSTNM = PT0BM001.SY1SSTNM; /* style description*/
  PT0BW01.SY2CLRID = PT0BM001.SY2CLRID; /* color code*/
  PT0BW01.SY2CLRAB = PT0BM001.SY2CLRAB; /* color description*/
  PT0BW01.XDMCD = PT0BM001.XDMCD; /* dimension code*/
  PT0BW01.XDMABRV = PT0BM001.XDMABRV; /* dimension description*/
  PT0BW01.PC2INSEG = PT0BM001.PC2INSEG; /* invt. segment code*/
  PT0BW01.PC2SEGAB = PT0BM001.PC2SEGAB; /* invt. segment code desc.*/
  PT0BW01.XPGCD = PT0BM001.XPGCD; /* packaging type code*/
  PT0BW01.XPGABRV = PT0BM001.XPGABRV; /* packaging type description*/
  PT0BW01.XUMCD = PT0BM001.XUMCD; /* unit of measure code*/
  PT0BW01.XUMDESC = PT0BM001.XUMDESC; /* unit of measure description*/
  PT0BW01.PT1MTC[2] = PT0BM001.PT1MTC[2]; /* style months*/


end // end PT0B160

// Add Modelling Months Category
Function PT0B161()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  set PT1REC empty; /* Clear row storage area*/

  PT1REC.XGPCD = PT0BM001.XGPCD; /* GPC code*/
  PT1REC.XPCCD = PT0BM001.XPCCD; /* Category code*/
  PT1REC.XQACD = PT0BM001.XQACD; /* Quality code*/
  PT1REC.PT1MTC = PT0BM001.PT1MTC[1]; /* Category months*/

  PT1REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  PT1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  PT1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Add the row to the Modeling Months Table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2960" ("A ", SQLCA, PT1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If row already exists, send error message to operator*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0BM001.XXXMODID = "161"; /* Module identification*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PT0B161"; /* Module identification*/
  TA1REC.TA1LOC = "ADD MODELING MONTHS CATEGORY";
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMNYMO01"; /* Table view name*/
  TA1REC.TA1TBLKE = PT1REC.PT1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0B161

// Add Modelling Months Style
Function PT0B162()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  set PT1REC empty; /* Clear row storage area*/

  PT1REC.XGPCD = PT0BM001.XGPCD; /* GPC code*/
  PT1REC.XQACD = PT0BM001.XQACD; /* Quality code*/
  PT1REC.SY1STNBR = PT0BM001.SY1STNBR; /* Style code*/
  PT1REC.SY2CLRID = PT0BM001.SY2CLRID; /* Color code*/
  PT1REC.XDMCD = PT0BM001.XDMCD; /* Dimension code*/
  PT1REC.PC2INSEG = PT0BM001.PC2INSEG; /* Spec difference code*/
  PT1REC.XPGCD = PT0BM001.XPGCD; /* Packaging type code*/
  PT1REC.XUMCD = PT0BM001.XUMCD; /* Unit of measure code*/
  PT1REC.PT1MTC = PT0BM001.PT1MTC[2]; /* Style months*/

  PT1REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  PT1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  PT1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Add the row to the Modeling Months Table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2960" ("A ", SQLCA, PT1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0BM001.XXXMODID = "162"; /* Module identification*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PT0B162"; /* Module identification*/
  TA1REC.TA1LOC = "ADD MODELING MONTHS STYLE";
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMNYMO01"; /* Table view name*/
  TA1REC.TA1TBLKE = PT1REC.PT1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0B162

// Control Categories List
Function PT0B200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT0B210(); /* Obtain the data to display*/

  PT0B220(); /* Format and display the map*/

  PT0B230(); /* Check attention identifier*/

  PT0B240(); /* Reset fields to normal intensity*/

  PT0B250(); /* Verify the entered data*/

  PT0B260(); /* Process valid input request*/


end // end PT0B200

// Obtain the data to display
Function PT0B210()
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PT0BW00.PT0BWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any existing queue in temporary storage.*/
   /* ------------------------------------------------------------*/

  PT0B211(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  PT0B212(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (PT0BW00.PT0BWSWC != "Y") /* Until end of cursor*/

    PT0B213(); /* Fetch selected rows*/

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (PT0BW00.PT0BWIXM > 15) /* Page is full*/
      PT0BW02.XGPCD = PT1REC.XGPCD; /* GPC*/
      PT0BW02.XQACD = PT1REC.XQACD; /* Quality*/
      PT0BW02.XQADESC = PT0BM001.XQADESC; /* Quality Description*/
      PT0B214(); /* Add page to temporary storage*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PT0BW00.PT0BWIXM > 1) /* Page was formatted*/
    PT0BW02.XGPCD = PT1REC.XGPCD; /* GPC*/
    PT0BW02.XQACD = PT1REC.XQACD; /* Quality*/
    PT0BW02.XQADESC = PT0BM001.XQADESC; /* Quality Description*/
    PT0B214(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PT0B215(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* Indicate the request for data was completed.*/
   /* ------------------------------------------------------------*/

  PT0BW00.PT0BWSWR = "N"; /* Request for data completed*/
  PT0BW00.PT0BWSWU = "N"; /* Initialize storage update indicator*/


end // end PT0B210

// Purge any temporary storage
Function PT0B211()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PT0BW02 empty; /* Display storage area*/

  PT0BW00.TA5TSQIX = 0; /* Highest page number*/
  PT0BW00.PT0BWIXM = 1; /* Display line number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PT0B"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PT0BW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, post an error to error diagnosis reporting.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1FUNC = "POST"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = "PT0B211"; /* Process name*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1MAP = "PT0BM002"; /* Map name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


end // end PT0B211

// Select set and open cursor
Function PT0B212()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PT1REC empty; /* Clear row storage area*/

  PT0BW00.PT0BWSWC = "N"; /* Initialize end of cursor switch*/

   /* ------------------------------------------------------------*/
   /* Indicate GPC and that all categories are to be selected.*/
   /* ------------------------------------------------------------*/

  PT1REC.XGPCD = COMMAREA.XGPCD; /* Indicate GPC code*/
  PT1REC.XQACD = PT0BM001.XQACD; /* Indicate Quality*/
  PT1REC.XPCCD = "**"; /* Indicate all categories*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2960" ("SS", SQLCA, PT1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0BW00.PT0BWMAP = "1"; /* Indicate map to display*/
  PT0BM001.XXXMODID = "212"; /* Module identification*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PT0B212"; /* Module identification*/
  TA1REC.TA1LOC = "SELECT SET OF CATEGORY ROWS";
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMNYMO01"; /* Table view name*/
  TA1REC.TA1TBLKE = PT1REC.PT1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0B212

// Fetch next row and format
Function PT0B213()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2960" ("SN", SQLCA, PT1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PT0BW02.XPCCD[PT0BWIXM] = PT1REC.XPCCD; /* Category code*/
    if (PT1REC.XPCCD in XPCTBL.XPCCD)
      PT0BW02.XPCSDESC[PT0BWIXM] = XPCTBL.XPCSDESC[sysVar.arrayIndex];
    end
    PT0BW02.PT1MTC[PT0BWIXM] = PT1REC.PT1MTC; /* Category months*/
    PT0BW02.ZZZSDT[PT0BWIXM] = PT1REC.ZZZSDT; /* Setup date*/
    PT0BW02.ZZZCHGCT[PT0BWIXM] = PT1REC.ZZZCHGCT; /* Change count*/

    PT0BW00.PT0BWIXM = PT0BW00.PT0BWIXM + 1; /* Increment line index*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If end of selected set, indicate end of cursor.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and end of selected set*/

    PT0BW00.PT0BWSWC = "Y"; /* Indicate end of cursor*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0BW00.PT0BWMAP = "1"; /* Indicate map to display*/
  PT0BM001.XXXMODID = "213"; /* Module identification*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PT0B213"; /* Module identification*/
  TA1REC.TA1LOC = "FETCH NEXT CATEGORY ROW";
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMNYMO01"; /* Table view name*/
  TA1REC.TA1TBLKE = PT1REC.PT1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0B213

// Add page to temporary storage
Function PT0B214()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PT0BW02.PT0BWLEN = 349; /* Temporary storage length*/
  TA5REC.TA5APPID = "PT0B"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PT0BW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PT0BW02 empty; /* Display storage area*/

    PT0BW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    PT0BW00.PT0BWIXM = 1; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0BW00.PT0BWMAP = "1"; /* Indicate map to display*/
  PT0BM001.XXXMODID = "214"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1PGMNM = "PT0B214"; /* Module identification*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1MAP = "PT0BM002"; /* Map name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0B214

// Close selected set cursor
Function PT0B215()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2960" ("CS", SQLCA, PT1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0BW00.PT0BWMAP = "1"; /* Indicate map to display*/
  PT0BM001.XXXMODID = "215"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1PGMNM = "PT0B215"; /* Module identification*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMNYMO01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0B215

// Format and converse the map
Function PT0B220()
   /* ------------------------------------------------------------*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set PT0BM002 alarm; /* Indicate sound alarm*/
  end

   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/
    PT0B221(); /* Format the data on the map*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date in the map.*/
   /* ------------------------------------------------------------*/

  PT0BM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

   /* ------------------------------------------------------------*/
   /* If application data exists, format it in the map.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data exists*/

    PT0BM002.CAITEM = COMMAREA.CAITEM; /* Application data*/
    set PT0BM002.CAITEM modified; /* Set MDT on*/
    COMMAREA.CAITEM = " "; /* Clear application data*/

  end

   /* ------------------------------------------------------------*/
   /* Reset the information message number.*/
   /* ------------------------------------------------------------*/

  PT0BW00.PT0BWMNO = 0; /* Reset information message number*/

  converse PT0BM002 ;


end // end PT0B220

// Format the display data
Function PT0B221()
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (PT0BW00.TA5TSQIX == 0) /* No data to display*/

    PT0BW00.PT0BWMAP = "1"; /* Map to display*/
    PT0BM001.XXXMODID = "221"; /* Module identification*/
    converseLib.validationFailed(18); /* Indicate no data to display*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PT0BW00.PT0BWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/

    if (PT0BW00.PT0BWTSP > PT0BW00.TA5TSQIX) /* Desired greater highest*/
      PT0BW00.PT0BWTSP = PT0BW00.TA5TSQIX; /* Default to highest*/
    end

    PT0BS04(); /* Obtain temporary storage page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  set PT0BM002 initial; /* Clear map output area*/

  PT0BM002.PT0BWTSP = PT0BW00.PT0BWTSP; /* Current page*/
  PT0BM002.TA5TSQIX = PT0BW00.TA5TSQIX; /* Highest page*/

  PT0BM002.XGPCD = PT0BW02.XGPCD; /* gpc*/
  PT0BM002.XQACD = PT0BW02.XQACD; /* quality*/
  PT0BM002.XQADESC = PT0BW02.XQADESC; /* quality description*/

  PT0BW00.PT0BWIXM = 1; /* Initialize line index*/

  while (PT0BW00.PT0BWIXM <= 15 /* Until screen is full*/
   && PT0BW02.XPCCD[PT0BWIXM] > " ") /* or end of data*/

    set PT0BM002.PT0BMSEL[PT0BWIXM] normal; /* Display select field*/
    set PT0BM002.PT1MTC[PT0BWIXM] normal; /* and months field*/

    PT0BM002.XPCCD[PT0BWIXM] = PT0BW02.XPCCD[PT0BWIXM];
    PT0BM002.XPCSDESC[PT0BWIXM] = PT0BW02.XPCSDESC[PT0BWIXM];
    PT0BM002.PT1MTC[PT0BWIXM] = PT0BW02.PT1MTC[PT0BWIXM];

    PT0BW00.PT0BWIXM = PT0BW00.PT0BWIXM + 1; /* Increment line index*/

  end

  if (PT0BW00.PT0BWMNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(PT0BW00.PT0BWMNO);
  end /* Information message number*/


end // end PT0B221

// Check attention identifier
Function PT0B230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PT0BM002 initial; /* Clear the map fields*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PT0BM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = PT0BM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PT0BM002.CAITEM; /* Application data*/

      PT0B211(); /* Purge temporary storage*/

      XSPT001(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    PT0BW00.PT0BWMAP = "1"; /* Indicate map to be displayed*/
    PT0BM001.XXXMODID = "230"; /* Module identification*/
    set PT0BM001.CATOAP cursor, modified, bold; /* Highlight*/
    PT0BM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
    COMMAREA.CATOAP = " "; /* Clear TO application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP or exit to the Master Menu was requested, exit to*/
   /* another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PT0BM002"; /* Application find code*/
    end

    PT0B211(); /* Purge temporary storage*/

    XSPT001(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    PT0BW00.PT0BWMAP = "1"; /* Indicate map to be displayed*/
    PT0BM001.XXXMODID = "230"; /* Module identification*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If exit to the previous level was requested, indicate that*/
   /* the first application map is to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PT0B211(); /* Purge temporary storage*/

    PT0BW00.PT0BWMAP = "1"; /* Indicate map to be displayed*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    PT0BM002.XXXMODID = "230"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end


end // end PT0B230

// Reset highlighted fields
Function PT0B240()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  PT0BW00.PT0BWIXM = 1; /* Initialize line index*/

  while (PT0BW00.PT0BWIXM <= 15 /* Until end of lines*/
   && PT0BM002.XPCCD[PT0BWIXM] > " ") /* or end of display*/

    set PT0BM002.PT0BMSEL[PT0BWIXM] normal; /* Reset select flag*/
    set PT0BM002.PT1MTC[PT0BWIXM] normal; /* Reset number of months*/

    PT0BW00.PT0BWIXM = PT0BW00.PT0BWIXM + 1; /* Increment line index*/

  end

  set PT0BM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PT0BM002.CAITEM initialAttributes; /* Commarea application data*/


end // end PT0B240

// Verify the entered data
Function PT0B250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PT0BM002.CAITEM > " ") /* Application data was entered*/

    PT0BM002.XXXMODID = "250"; /* Module identification*/
    set PT0BM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PT0B251(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
     /* If not a scroll request, verify any changed data.*/
    /* ------------------------------------------------------------*/

    PT0BW00.PT0BWIXM = 15; /* Initialize line index*/

    while (PT0BW00.PT0BWIXM > 0) /* Until end of lines*/

      PT0B252(); /* Verify any changed data*/

      PT0BW00.PT0BWIXM = PT0BW00.PT0BWIXM - 1; /* Decrement line number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end PT0B250

// Verify scroll request
Function PT0B251()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PT0BW00.PT0BWTSP < 2)       /* and no previous pages*/

    PT0BM002.XXXMODID = "251"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PT0BW00.PT0BWTSP >= PT0BW00.TA5TSQIX) /* and no more pages*/

    PT0BM002.XXXMODID = "251"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  PT0BW00.PT0BWIXM = 15; /* Initialize line index*/

  while (PT0BW00.PT0BWIXM > 0) /* Until end of lines*/

    if (PT0BM002.PT1MTC[PT0BWIXM] != PT0BW02.PT1MTC[PT0BWIXM])

      PT0BM002.XXXMODID = "251"; /* Module identification*/
      set PT0BM002.PT1MTC[PT0BWIXM] cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Modifications not allowed*/

    end

    if (PT0BM002.PT0BMSEL[PT0BWIXM] > " ") /* Selection was entered*/

      PT0BM002.XXXMODID = "251"; /* Module identification*/
      set PT0BM002.PT0BMSEL[PT0BWIXM] cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Modifications not allowed*/

    end

    PT0BW00.PT0BWIXM = PT0BW00.PT0BWIXM - 1; /* Decrement line number*/

  end


end // end PT0B251

// Verify any changed data
Function PT0B252()
   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* ------------------------------------------------------------*/

  if (PT0BM002.PT0BMSEL[PT0BWIXM] <= " " /* Selection not entered*/
   && PT0BM002.PT1MTC[PT0BWIXM] == PT0BW02.PT1MTC[PT0BWIXM])

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If number of months changed, verify it is between 1 and 9.*/
   /* ------------------------------------------------------------*/

  if (PT0BM002.PT1MTC[PT0BWIXM] != PT0BW02.PT1MTC[PT0BWIXM])

    if (PT0BM002.PT1MTC[PT0BWIXM] < 1 /* Months less than 1*/
     || PT0BM002.PT1MTC[PT0BWIXM] > 9) /* or greater than 9*/

      PT0BM002.XXXMODID = "252"; /* Module identification*/
      set PT0BM002.PT1MTC[PT0BWIXM] cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(26); /* Indicate missing or invalid*/

    end

    if (PT0BM002.PT0BMSEL[PT0BWIXM] == "D") /* Delete was requested*/

      PT0BM002.XXXMODID = "252"; /* Module identification*/
      set PT0BM002.PT1MTC[PT0BWIXM] cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(20); /* Indicate data may not change*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "D", indicate that*/
   /* only "D" may be used to delete a line.*/
   /* ------------------------------------------------------------*/

  if (PT0BM002.PT0BMSEL[PT0BWIXM] > " " /* Selection was entered*/
   && PT0BM002.PT0BMSEL[PT0BWIXM] != "D") /* and is not a "D"*/

    PT0BM002.XXXMODID = "252"; /* Module identification*/
    set PT0BM002.PT0BMSEL[PT0BWIXM] cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(19); /* Indicate only "D" may be used*/

  end


end // end PT0B252

// Process valid input request
Function PT0B260()
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PT0BW00.PT0BWTSP = PT0BW00.PT0BWTSP - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PT0BW00.PT0BWTSP = PT0BW00.PT0BWTSP + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Process any changed data on each line that was formatted.*/
   /* ------------------------------------------------------------*/

  PT0BW00.PT0BWIXM = 1; /* Initialize line index*/

  while (PT0BW00.PT0BWIXM <= 15 /* Until end of lines*/
   && PT0BM002.XPCCD[PT0BWIXM] > " ") /* or end of display*/

    /* ------------------------------------------------------------*/
     /* If delete was requested, delete the category control row.*/
     /* Indicate that temporary storage must be reformatted to*/
     /* reflect the deleted row.  Clear the delete indicator.*/
    /* ------------------------------------------------------------*/

    if (PT0BM002.PT0BMSEL[PT0BWIXM] == "D") /* Delete was requested*/

      PT0B261(); /* Delete category control row*/

      PT0BW00.PT0BWSWR = "Y"; /* Indicate request for data*/
      PT0BM002.PT0BMSEL[PT0BWIXM] = " "; /* Clear delete indicator*/

    end

    /* ------------------------------------------------------------*/
     /* If number of months changed, update category control row.*/
     /* Indicate that the temporary storage record must be updated*/
     /* reflect the changed row.  Save the changed data.*/
    /* ------------------------------------------------------------*/

    if (PT0BM002.PT1MTC[PT0BWIXM] != PT0BW02.PT1MTC[PT0BWIXM])

      PT0B262(); /* Update category control row*/

      PT0BW00.PT0BWSWU = "Y"; /* Indicate update storage*/
      PT0BW02.PT1MTC[PT0BWIXM] = PT1REC.PT1MTC; /* Category months*/
      PT0BW02.ZZZCHGCT[PT0BWIXM] = PT1REC.ZZZCHGCT; /* Change count*/

    end

    /* ------------------------------------------------------------*/
     /* Increment the display line index.*/
    /* ------------------------------------------------------------*/

    PT0BW00.PT0BWIXM = PT0BW00.PT0BWIXM + 1; /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* If any changes were made, indicate update completed.*/
   /* ------------------------------------------------------------*/

  if (PT0BW00.PT0BWSWR == "Y" /* Row was deleted*/
   || PT0BW00.PT0BWSWU == "Y") /* or row was updated*/

    PT0BW00.PT0BWMNO = 1; /* Indicate update completed*/

  end

   /* ------------------------------------------------------------*/
   /* If temporary storage must be updated, update the page.*/
   /* ------------------------------------------------------------*/

  if (PT0BW00.PT0BWSWU == "Y") /* Storage must be updated*/

    PT0B263(); /* Update temporary storage*/

    PT0BW00.PT0BWSWU = "N"; /* Reset update indicator*/

  end


end // end PT0B260

// Delete category control row
Function PT0B261()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  set PT1REC empty; /* Clear row storage area*/

  PT1REC.XGPCD = PT0BM002.XGPCD; /* GPC code*/
  PT1REC.XQACD = PT0BM002.XQACD; /* Quality code*/
  PT1REC.XPCCD = PT0BM002.XPCCD[PT0BWIXM]; /* Category code*/

   /* ------------------------------------------------------------*/
   /* Delete the row from the Modeling Months Table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2960" ("D ", SQLCA, PT1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete table row*/

   /* ------------------------------------------------------------*/
   /* If successful, commit the delete and return to the previous*/
   /* process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    VGVar.handleSysLibraryErrors = 1;
    sysLib.commit(); /* Commit changes*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If row was not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0BM002.XXXMODID = "261"; /* Module identification*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PT0B261"; /* Module identification*/
  TA1REC.TA1LOC = "DELETE MODELING MONTHS CATEGORY";
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMNYMO01"; /* Table view name*/
  TA1REC.TA1TBLKE = PT1REC.PT1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0B261

// Update category control row
Function PT0B262()
   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date and time*/

   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  set PT1REC empty; /* Clear row storage area*/

  PT1REC.XGPCD = PT0BM002.XGPCD; /* GPC code*/
  PT1REC.XQACD = PT0BM002.XQACD; /* Quality*/
  PT1REC.XPCCD = PT0BM002.XPCCD[PT0BWIXM]; /* Category code*/
  PT1REC.PT1MTC = PT0BM002.PT1MTC[PT0BWIXM]; /* Category months*/

  PT1REC.ZZZSDT = PT0BW02.ZZZSDT[PT0BWIXM]; /* Setup date*/
  PT1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  PT1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  PT1REC.ZZZCHGCT = PT0BW02.ZZZCHGCT[PT0BWIXM]; /* Change count*/

   /* ------------------------------------------------------------*/
   /* Update the row in the Modeling Months Table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2960" ("U ", SQLCA, PT1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update table row*/

   /* ------------------------------------------------------------*/
   /* If successful, commit the update and return to the previous*/
   /* process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    VGVar.handleSysLibraryErrors = 1;
    sysLib.commit(); /* Commit changes*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If row was not found, indicate data was updated by another.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/

    PT0BW00.PT0BWSWR = "Y"; /* Indicate request for data*/
    PT0BW00.PT0BWMNO = 12; /* Indicate data updated by another*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0BM002.XXXMODID = "262"; /* Module identification*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PT0B262"; /* Module identification*/
  TA1REC.TA1LOC = "UPDATE MODELING MONTHS CATEGORY";
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMNYMO01"; /* Table view name*/
  TA1REC.TA1TBLKE = PT1REC.PT1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0B262

// Update temporary storage page
Function PT0B263()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PT0BW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0BM002.XXXMODID = "263"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1PGMNM = "PT0B263"; /* Module identification*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1MAP = "PT0BM002"; /* Map name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0B263

// Control Styles List
Function PT0B300()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT0B310(); /* Obtain the data to display*/

  PT0B320(); /* Format and display the map*/

  PT0B330(); /* Check attention identifier*/

  PT0B340(); /* Reset fields to normal intensity*/

  PT0B350(); /* Verify the entered data*/

  PT0B360(); /* Process valid input request*/


end // end PT0B300

// Obtain the data to display
Function PT0B310()
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PT0BW00.PT0BWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any existing queue in temporary storage.*/
   /* ------------------------------------------------------------*/

  PT0B311(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  PT0B312(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (PT0BW00.PT0BWSWC != "Y") /* Until end of cursor*/

    PT0B313(); /* Fetch selected rows*/

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (PT0BW00.PT0BWIXM > 15) /* Page is full*/
      PT0BW03.XGPCD = PT1REC.XGPCD; /* GPC*/
      PT0BW03.XQACD = PT1REC.XQACD; /* Quality*/
      PT0BW03.XQADESC = PT0BM001.XQADESC; /* Quality Description*/
      PT0B314(); /* Add page to temporary storage*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PT0BW00.PT0BWIXM > 1) /* Page was formatted*/
    PT0BW03.XGPCD = PT1REC.XGPCD; /* GPC*/
    PT0BW03.XQACD = PT1REC.XQACD; /* Quality*/
    PT0BW03.XQADESC = PT0BM001.XQADESC; /* Quality Description*/
    PT0B314(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PT0B315(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* Indicate the request for data was completed.*/
   /* ------------------------------------------------------------*/

  PT0BW00.PT0BWSWR = "N"; /* Request for data completed*/
  PT0BW00.PT0BWSWU = "N"; /* Initialize storage update indicator*/


end // end PT0B310

// Purge any temporary storage
Function PT0B311()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PT0BW03 empty; /* Display storage area*/

  PT0BW00.TA5TSQIX = 0; /* Highest page number*/
  PT0BW00.PT0BWIXM = 1; /* Display line number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PT0B"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PT0BW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, post an error to error diagnosis reporting.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1FUNC = "POST"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = "PT0B311"; /* Process name*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1MAP = "PT0BM003"; /* Map name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


end // end PT0B311

// Select set and open cursor
Function PT0B312()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PT1REC empty; /* Clear row storage area*/

  PT0BW00.PT0BWSWC = "N"; /* Initialize end of cursor switch*/

   /* ------------------------------------------------------------*/
   /* Indicate GPC and that all styles are to be selected.*/
   /* ------------------------------------------------------------*/

  PT1REC.XGPCD = COMMAREA.XGPCD; /* Indicate GPC code*/
  PT1REC.XQACD = PT0BM001.XQACD; /* Indicate Quality*/
  PT1REC.SY1STNBR = "******"; /* Indicate all styles*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2960" ("SS", SQLCA, PT1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0BW00.PT0BWMAP = "1"; /* Indicate map to display*/
  PT0BM001.XXXMODID = "312"; /* Module identification*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PT0B312"; /* Module identification*/
  TA1REC.TA1LOC = "SELECT SET OF STYLE ROWS";
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMNYMO01"; /* Table view name*/
  TA1REC.TA1TBLKE = PT1REC.PT1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0B312

// Fetch next row and format
Function PT0B313()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2960" ("SN", SQLCA, PT1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PT0BW03.SY1STNBR[PT0BWIXM] = PT1REC.SY1STNBR; /* Style code*/
    PT0BW03.SY2CLRID[PT0BWIXM] = PT1REC.SY2CLRID; /* Color code*/
    PT0BW03.XDMCD[PT0BWIXM] = PT1REC.XDMCD; /* Dimension code*/
    PT0BW03.PC2INSEG[PT0BWIXM] = PT1REC.PC2INSEG; /* inv seg code*/
    PT0BW03.XPGCD[PT0BWIXM] = PT1REC.XPGCD; /* Packaging type code*/
    PT0BW03.XUMCD[PT0BWIXM] = PT1REC.XUMCD; /* Unit of measure code*/
    PT0BW03.PT1MTC[PT0BWIXM] = PT1REC.PT1MTC; /* Style months*/
    PT0BW03.ZZZSDT[PT0BWIXM] = PT1REC.ZZZSDT; /* Setup date*/
    PT0BW03.ZZZCHGCT[PT0BWIXM] = PT1REC.ZZZCHGCT; /* Change count*/

    PT0BS05(); /* Obtain style/color descriptions*/

    PT0BW00.PT0BWIXM = PT0BW00.PT0BWIXM + 1; /* Increment line index*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If end of selected set, indicate end of cursor.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and end of selected set*/

    PT0BW00.PT0BWSWC = "Y"; /* Indicate end of cursor*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0BW00.PT0BWMAP = "1"; /* Indicate map to display*/
  PT0BM001.XXXMODID = "313"; /* Module identification*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PT0B313"; /* Module identification*/
  TA1REC.TA1LOC = "FETCH NEXT STYLE ROW";
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMNYMO01"; /* Table view name*/
  TA1REC.TA1TBLKE = PT1REC.PT1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0B313

// Add page to temporary storage
Function PT0B314()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PT0BW03.PT0BWLEN = 784; /* Temporary storage length*/
  TA5REC.TA5APPID = "PT0B"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PT0BW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PT0BW03 empty; /* Display storage area*/

    PT0BW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    PT0BW00.PT0BWIXM = 1; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0BW00.PT0BWMAP = "1"; /* Indicate map to display*/
  PT0BM001.XXXMODID = "314"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1PGMNM = "PT0B314"; /* Module identification*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1MAP = "PT0BM003"; /* Map name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0B314

// Close selected set cursor
Function PT0B315()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2960" ("CS", SQLCA, PT1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0BW00.PT0BWMAP = "1"; /* Indicate map to display*/
  PT0BM001.XXXMODID = "315"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1PGMNM = "PT0B315"; /* Module identification*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMNYMO01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0B315

// Format and converse the map
Function PT0B320()
   /* ------------------------------------------------------------*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set PT0BM003 alarm; /* Indicate sound alarm*/
  end

   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/
    PT0B321(); /* Format the data on the map*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date in the map.*/
   /* ------------------------------------------------------------*/

  PT0BM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

   /* ------------------------------------------------------------*/
   /* If application data exists, format it in the map.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data exists*/

    PT0BM003.CAITEM = COMMAREA.CAITEM; /* Application data*/
    set PT0BM003.CAITEM modified; /* Set MDT on*/
    COMMAREA.CAITEM = " "; /* Clear application data*/

  end

   /* ------------------------------------------------------------*/
   /* Reset the information message number.*/
   /* ------------------------------------------------------------*/

  PT0BW00.PT0BWMNO = 0; /* Reset information message number*/

  converse PT0BM003 ;


end // end PT0B320

// Format the display data
Function PT0B321()
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (PT0BW00.TA5TSQIX == 0) /* No data to display*/

    PT0BW00.PT0BWMAP = "1"; /* Map to display*/
    PT0BM001.XXXMODID = "321"; /* Module identification*/
    converseLib.validationFailed(18); /* Indicate no data to display*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PT0BW00.PT0BWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/

    if (PT0BW00.PT0BWTSP > PT0BW00.TA5TSQIX) /* Desired greater highest*/
      PT0BW00.PT0BWTSP = PT0BW00.TA5TSQIX; /* Default to highest*/
    end

    PT0BS06(); /* Obtain temporary storage page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  set PT0BM003 initial; /* Clear map output area*/

  PT0BM003.PT0BWTSP = PT0BW00.PT0BWTSP; /* Current page*/
  PT0BM003.TA5TSQIX = PT0BW00.TA5TSQIX; /* Highest page*/

  PT0BM003.XGPCD = PT0BW03.XGPCD; /* gpc*/
  PT0BM003.XQACD = PT0BW03.XQACD; /* quality*/
  PT0BM003.XQADESC = PT0BW03.XQADESC; /* quality desc*/

  PT0BW00.PT0BWIXM = 1; /* Initialize line index*/

  while (PT0BW00.PT0BWIXM <= 15 /* Until screen is full*/
   && PT0BW03.SY1STNBR[PT0BWIXM] > " ") /* or end of data*/

    set PT0BM003.PT0BMSEL[PT0BWIXM] normal; /* Display select field*/
    set PT0BM003.PT1MTC[PT0BWIXM] normal; /* and months field*/

    PT0BM003.SY1STNBR[PT0BWIXM] = PT0BW03.SY1STNBR[PT0BWIXM];
    PT0BM003.SY2CLRID[PT0BWIXM] = PT0BW03.SY2CLRID[PT0BWIXM];
    PT0BM003.XDMCD[PT0BWIXM] = PT0BW03.XDMCD[PT0BWIXM];
    PT0BM003.PC2INSEG[PT0BWIXM] = PT0BW03.PC2INSEG[PT0BWIXM];
    PT0BM003.XPGCD[PT0BWIXM] = PT0BW03.XPGCD[PT0BWIXM];
    PT0BM003.XUMCD[PT0BWIXM] = PT0BW03.XUMCD[PT0BWIXM];
    PT0BM003.SY1SSTNM[PT0BWIXM] = PT0BW03.SY1SSTNM[PT0BWIXM];
    PT0BM003.SY2CLRAB[PT0BWIXM] = PT0BW03.SY2CLRAB[PT0BWIXM];
    PT0BM003.PT1MTC[PT0BWIXM] = PT0BW03.PT1MTC[PT0BWIXM];

    PT0BW00.PT0BWIXM = PT0BW00.PT0BWIXM + 1; /* Increment line index*/

  end

  if (PT0BW00.PT0BWMNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(PT0BW00.PT0BWMNO);
  end /* Information message number*/


end // end PT0B321

// Check attention identifier
Function PT0B330()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PT0BM003 initial; /* Clear the map fields*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PT0BM003.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = PT0BM003.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PT0BM003.CAITEM; /* Application data*/

      PT0B311(); /* Purge temporary storage*/

      XSPT001(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    PT0BW00.PT0BWMAP = "1"; /* Indicate map to be displayed*/
    PT0BM001.XXXMODID = "330"; /* Module identification*/
    set PT0BM001.CATOAP cursor, modified, bold; /* Highlight*/
    PT0BM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
    COMMAREA.CATOAP = " "; /* Clear TO application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP or exit to the Master Menu was requested, exit to*/
   /* another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PT0BM003"; /* Application find code*/
    end

    PT0B311(); /* Purge temporary storage*/

    XSPT001(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    PT0BW00.PT0BWMAP = "1"; /* Indicate map to be displayed*/

    PT0BM001.XXXMODID = "330"; /* Module identification*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If exit to the previous level was requested, indicate that*/
   /* the first application map is to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PT0B311(); /* Purge temporary storage*/

    PT0BW00.PT0BWMAP = "1"; /* Indicate map to be displayed*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    PT0BM003.XXXMODID = "330"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end


end // end PT0B330

// Reset highlighted fields
Function PT0B340()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  PT0BW00.PT0BWIXM = 1; /* Initialize line index*/

  while (PT0BW00.PT0BWIXM <= 15 /* Until end of lines*/
   && PT0BM003.SY1STNBR[PT0BWIXM] > " ") /* or end of display*/

    set PT0BM003.PT0BMSEL[PT0BWIXM] normal; /* Reset select flag*/
    set PT0BM003.PT1MTC[PT0BWIXM] normal; /* Reset number of months*/

    PT0BW00.PT0BWIXM = PT0BW00.PT0BWIXM + 1; /* Increment line index*/

  end

  set PT0BM003.CATOAP initialAttributes; /* Commarea TO application*/
  set PT0BM003.CAITEM initialAttributes; /* Commarea application data*/


end // end PT0B340

// Verify the entered data
Function PT0B350()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PT0BM003.CAITEM > " ") /* Application data was entered*/

    PT0BM003.XXXMODID = "350"; /* Module identification*/
    set PT0BM003.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PT0B351(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
     /* If not a scroll request, verify any changed data.*/
    /* ------------------------------------------------------------*/

    PT0BW00.PT0BWIXM = 15; /* Initialize line index*/

    while (PT0BW00.PT0BWIXM > 0) /* Until end of lines*/

      PT0B352(); /* Verify any changed data*/

      PT0BW00.PT0BWIXM = PT0BW00.PT0BWIXM - 1; /* Decrement line number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end PT0B350

// Verify scroll request
Function PT0B351()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PT0BW00.PT0BWTSP < 2)       /* and no previous pages*/

    PT0BM003.XXXMODID = "351"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PT0BW00.PT0BWTSP >= PT0BW00.TA5TSQIX) /* and no more pages*/

    PT0BM003.XXXMODID = "351"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  PT0BW00.PT0BWIXM = 15; /* Initialize line index*/

  while (PT0BW00.PT0BWIXM > 0) /* Until end of lines*/

    if (PT0BM003.PT1MTC[PT0BWIXM] != PT0BW03.PT1MTC[PT0BWIXM])

      PT0BM003.XXXMODID = "351"; /* Module identification*/
      set PT0BM003.PT1MTC[PT0BWIXM] cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Modifications not allowed*/

    end

    if (PT0BM003.PT0BMSEL[PT0BWIXM] > " ") /* Selection was entered*/

      PT0BM003.XXXMODID = "351"; /* Module identification*/
      set PT0BM003.PT0BMSEL[PT0BWIXM] cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Modifications not allowed*/

    end

    PT0BW00.PT0BWIXM = PT0BW00.PT0BWIXM - 1; /* Decrement line number*/

  end


end // end PT0B351

// Verify any changed data
Function PT0B352()
   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* ------------------------------------------------------------*/

  if (PT0BM003.PT0BMSEL[PT0BWIXM] <= " " /* Selection not entered*/
   && PT0BM003.PT1MTC[PT0BWIXM] == PT0BW03.PT1MTC[PT0BWIXM])

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If number of months changed, verify it is between 1 and 9.*/
   /* ------------------------------------------------------------*/

  if (PT0BM003.PT1MTC[PT0BWIXM] != PT0BW03.PT1MTC[PT0BWIXM])

    if (PT0BM003.PT1MTC[PT0BWIXM] < 1 /* Months less than 1*/
     || PT0BM003.PT1MTC[PT0BWIXM] > 9) /* or greater than 9*/

      PT0BM003.XXXMODID = "352"; /* Module identification*/
      set PT0BM003.PT1MTC[PT0BWIXM] cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(26); /* Indicate missing or invalid*/

    end

    if (PT0BM003.PT0BMSEL[PT0BWIXM] == "D") /* Delete was requested*/

      PT0BM003.XXXMODID = "352"; /* Module identification*/
      set PT0BM003.PT1MTC[PT0BWIXM] cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(20); /* Indicate data may not change*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "D", indicate that*/
   /* only "D" may be used to delete a line.*/
   /* ------------------------------------------------------------*/

  if (PT0BM003.PT0BMSEL[PT0BWIXM] > " " /* Selection was entered*/
   && PT0BM003.PT0BMSEL[PT0BWIXM] != "D") /* and is not a "D"*/

    PT0BM003.XXXMODID = "352"; /* Module identification*/
    set PT0BM003.PT0BMSEL[PT0BWIXM] cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(19); /* Indicate only "D" may be used*/

  end


end // end PT0B352

// Process valid input request
Function PT0B360()
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PT0BW00.PT0BWTSP = PT0BW00.PT0BWTSP - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PT0BW00.PT0BWTSP = PT0BW00.PT0BWTSP + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Process any changed data on each line that was formatted.*/
   /* ------------------------------------------------------------*/

  PT0BW00.PT0BWIXM = 1; /* Initialize line index*/

  while (PT0BW00.PT0BWIXM <= 15 /* Until end of lines*/
   && PT0BM003.SY1STNBR[PT0BWIXM] > " ") /* or end of display*/

    /* ------------------------------------------------------------*/
     /* If delete was requested, delete the style control row.*/
     /* Indicate that temporary storage must be reformatted to*/
     /* reflect the deleted row.  Clear the delete indicator.*/
    /* ------------------------------------------------------------*/

    if (PT0BM003.PT0BMSEL[PT0BWIXM] == "D") /* Delete was requested*/

      PT0B361(); /* Delete style control row*/

      PT0BW00.PT0BWSWR = "Y"; /* Indicate request for data*/
      PT0BM003.PT0BMSEL[PT0BWIXM] = " "; /* Clear delete indicator*/

    end

    /* ------------------------------------------------------------*/
     /* If number of months changed, update style control row.*/
     /* Indicate that the temporary storage record must be updated*/
     /* reflect the changed row.  Save the changed data.*/
    /* ------------------------------------------------------------*/

    if (PT0BM003.PT1MTC[PT0BWIXM] != PT0BW03.PT1MTC[PT0BWIXM])

      PT0B362(); /* Update style control row*/

      PT0BW00.PT0BWSWU = "Y"; /* Indicate update storage*/
      PT0BW03.PT1MTC[PT0BWIXM] = PT1REC.PT1MTC; /* Style months*/
      PT0BW03.ZZZCHGCT[PT0BWIXM] = PT1REC.ZZZCHGCT; /* Change count*/

    end

    /* ------------------------------------------------------------*/
     /* Increment the display line index.*/
    /* ------------------------------------------------------------*/

    PT0BW00.PT0BWIXM = PT0BW00.PT0BWIXM + 1; /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* If any changes were made, indicate update completed.*/
   /* ------------------------------------------------------------*/

  if (PT0BW00.PT0BWSWR == "Y" /* Row was deleted*/
   || PT0BW00.PT0BWSWU == "Y") /* or row was updated*/

    PT0BW00.PT0BWMNO = 1; /* Indicate update completed*/

  end

   /* ------------------------------------------------------------*/
   /* If temporary storage must be updated, update the page.*/
   /* ------------------------------------------------------------*/

  if (PT0BW00.PT0BWSWU == "Y") /* Storage must be updated*/

    PT0B363(); /* Update temporary storage*/

    PT0BW00.PT0BWSWU = "N"; /* Reset update indicator*/

  end


end // end PT0B360

// Delete style control row
Function PT0B361()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  set PT1REC empty; /* Clear row storage area*/

  PT1REC.XGPCD = PT0BM003.XGPCD; /* GPC code*/
  PT1REC.XQACD = PT0BM003.XQACD; /* Quality code*/
  PT1REC.SY1STNBR = PT0BM003.SY1STNBR[PT0BWIXM]; /* Style code*/
  PT1REC.SY2CLRID = PT0BM003.SY2CLRID[PT0BWIXM]; /* Color code*/
  PT1REC.XDMCD = PT0BM003.XDMCD[PT0BWIXM]; /* Dimension code*/
  PT1REC.PC2INSEG = PT0BM003.PC2INSEG[PT0BWIXM]; /* inv in seg code*/
  PT1REC.XPGCD = PT0BM003.XPGCD[PT0BWIXM]; /* Packaging type code*/
  PT1REC.XUMCD = PT0BM003.XUMCD[PT0BWIXM]; /* Unit of measure code*/

   /* ------------------------------------------------------------*/
   /* Delete the row from the Modeling Months Table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2960" ("D ", SQLCA, PT1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete table row*/

   /* ------------------------------------------------------------*/
   /* If successful, commit the delete and return to the previous*/
   /* process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    VGVar.handleSysLibraryErrors = 1;
    sysLib.commit(); /* Commit changes*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If row was not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0BM003.XXXMODID = "361"; /* Module identification*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PT0B361"; /* Module identification*/
  TA1REC.TA1LOC = "DELETE MODELING MONTHS STYLE";
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMNYMO01"; /* Table view name*/
  TA1REC.TA1TBLKE = PT1REC.PT1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0B361

// Update style control row
Function PT0B362()
   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date and time*/

   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  set PT1REC empty; /* Clear row storage area*/

  PT1REC.XGPCD = PT0BM003.XGPCD; /* GPC code*/
  PT1REC.XQACD = PT0BM003.XQACD; /* Quality code*/
  PT1REC.SY1STNBR = PT0BM003.SY1STNBR[PT0BWIXM]; /* Style code*/
  PT1REC.SY2CLRID = PT0BM003.SY2CLRID[PT0BWIXM]; /* Color code*/
  PT1REC.XDMCD = PT0BM003.XDMCD[PT0BWIXM]; /* Dimension code*/
  PT1REC.PC2INSEG = PT0BM003.PC2INSEG[PT0BWIXM]; /* inv in seg code*/
  PT1REC.XPGCD = PT0BM003.XPGCD[PT0BWIXM]; /* Packaging type code*/
  PT1REC.XUMCD = PT0BM003.XUMCD[PT0BWIXM]; /* Unit of measure code*/
  PT1REC.PT1MTC = PT0BM003.PT1MTC[PT0BWIXM]; /* Style months*/

  PT1REC.ZZZSDT = PT0BW03.ZZZSDT[PT0BWIXM]; /* Setup date*/
  PT1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  PT1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  PT1REC.ZZZCHGCT = PT0BW03.ZZZCHGCT[PT0BWIXM]; /* Change count*/

   /* ------------------------------------------------------------*/
   /* Update the row in the Modeling Months Table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2960" ("U ", SQLCA, PT1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update table row*/

   /* ------------------------------------------------------------*/
   /* If successful, commit the update and return to the previous*/
   /* process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    VGVar.handleSysLibraryErrors = 1;
    sysLib.commit(); /* Commit changes*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If row was not found, indicate data was updated by another.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/

    PT0BW00.PT0BWSWR = "Y"; /* Indicate request for data*/
    PT0BW00.PT0BWMNO = 12; /* Indicate data updated by another*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0BM003.XXXMODID = "362"; /* Module identification*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PT0B362"; /* Module identification*/
  TA1REC.TA1LOC = "UPDATE MODELING MONTHS STYLE";
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMNYMO01"; /* Table view name*/
  TA1REC.TA1TBLKE = PT1REC.PT1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0B362

// Update temporary storage page
Function PT0B363()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PT0BW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0BM003.XXXMODID = "363"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1PGMNM = "PT0B363"; /* Module identification*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1MAP = "PT0BM003"; /* Map name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0B363

// Verify style number
Function PT0BS01()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Clear row storage area*/

  PG2REC.XGPCD = PT0BM001.XGPCD; /* GPC code*/
  PG2REC.SY1STNBR = PT0BM001.SY1STNBR; /* Style number*/

   /* ------------------------------------------------------------*/
   /* Select the row from the Production Style/Color Table.*/
   /* ------------------------------------------------------------*/

  XSPG201(); /* Select style information*/

   /* ------------------------------------------------------------*/
   /* If successful, save the description and unit of measure*/
   /* and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PT0BM001.SY1SSTNM = PG2REC.SY1SSTNM; /* Description*/
    PT0BM001.XUMCD = PG2REC.XUMCD; /* Unit of measure*/
    if (PG2REC.XUMCD in XUMTBL.XUMCD)
      PT0BM001.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If row not found, indicate style is missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/

    PT0BW00.PT0BWSWE = "Y"; /* Indicate error found*/

    PT0BM001.XXXMODID = "S01"; /* Module identification*/
    set PT0BM001.SY1STNBR cursor, bold; /* Highlight*/
    converseLib.validationFailed(28); /* Indicate missing or invalid*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0BM001.XXXMODID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/

  end

  exit stack; /* Exit to display map*/


end // end PT0BS01

// Verify color identification
Function PT0BS02()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Clear row storage area*/

  PG2REC.XGPCD = PT0BM001.XGPCD; /* GPC code*/
  PG2REC.SY1STNBR = PT0BM001.SY1STNBR; /* Style number*/
  PG2REC.SY2CLRID = PT0BM001.SY2CLRID; /* Color identification*/
  PG2REC.XDMCD = PT0BM001.XDMCD; /* Dimension code*/

   /* ------------------------------------------------------------*/
   /* Select the row from the Production Style/Color Table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the description and return to the*/
   /* previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PT0BM001.SY2CLRAB = PG2REC.SY2CLRAB; /* Description*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If row not found, indicate color is missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/

    PT0BW00.PT0BWSWE = "Y"; /* Indicate error found*/

    PT0BM001.XXXMODID = "S02"; /* Module identification*/
    set PT0BM001.SY2CLRID cursor, bold; /* Highlight*/
    converseLib.validationFailed(29); /* Indicate missing or invalid*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0BM001.XXXMODID = "S02"; /* Module identification*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PT0BS02"; /* Module identification*/
  TA1REC.TA1LOC = "VERIFY COLOR IDENTIFICATION";
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0BS02

// Select row for duplicate check
Function PT0BS03()
   /* ------------------------------------------------------------*/
   /* Select the row from the Modeling Months Table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2960" ("S ", SQLCA, PT1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If duplicate row found, highlight the fields in error,*/
   /* indicate duplicate row and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and duplicate row found*/

    PT0BM001.XXXMODID = "S03"; /* Module identification*/

    if (PT1REC.XPCCD > " ") /* Check for category row*/

      set PT0BM001.XPCCD cursor, bold; /* Highlight*/
    else
      set PT0BM001.SY1STNBR cursor, bold; /* Highlight*/
      set PT0BM001.SY2CLRID bold; /* Highlight*/
      set PT0BM001.XDMCD bold; /* Highlight*/
      set PT0BM001.PC2INSEG bold; /* Highlight*/
      set PT0BM001.XPGCD bold; /* Highlight*/
      set PT0BM001.XUMCD bold; /* Highlight*/

    end

    converseLib.validationFailed(27); /* Indicate duplicate row*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If row not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0BM001.XXXMODID = "S03"; /* Module identification*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PT0BS03"; /* Module identification*/
  TA1REC.TA1LOC = "SELECT ROW FOR DUPLICATE CHECK";
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMNYMO01"; /* Table view name*/
  TA1REC.TA1TBLKE = PT1REC.PT1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0BS03

// Read temporary storage page
Function PT0BS04()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PT0BW02.PT0BWLEN = 349; /* Temporary storage length*/
  TA5REC.TA5APPID = "PT0B"; /* Application identification*/
  TA5REC.TA5TSQIX = PT0BW00.PT0BWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PT0BW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0BW00.PT0BWMAP = "1"; /* Indicate map to display*/
  PT0BM001.XXXMODID = "S04"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1PGMNM = "PT0BS04"; /* Module identification*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1MAP = "PT0BM002"; /* Map name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0BS04

// Obtain style/color description
Function PT0BS05()
   /* ------------------------------------------------------------*/
   /* Format the data from the control row in the table row.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Clear row storage area*/

  PG2REC.XGPCD = PT1REC.XGPCD; /* GPC code*/
  PG2REC.SY1STNBR = PT1REC.SY1STNBR; /* Style number*/
  PG2REC.SY2CLRID = PT1REC.SY2CLRID; /* Color identification*/
  PG2REC.XDMCD = PT1REC.XDMCD; /* Dimension code*/

   /* ------------------------------------------------------------*/
   /* Select the row from the Production Style/Color Table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the description and return to the*/
   /* previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PT0BW03.SY1SSTNM[PT0BWIXM] = PG2REC.SY1SSTNM;
                                   /* Style description*/
    PT0BW03.SY2CLRAB[PT0BWIXM] = PG2REC.SY2CLRAB;
                                   /* Color description*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If row not found, indicate color is missing and return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/

    PT0BW03.SY1SSTNM[PT0BWIXM] = "** NOT FOUND"; /* Style description*/
    PT0BW03.SY2CLRAB[PT0BWIXM] = "** NOT FOUND"; /* Color description*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0BW00.PT0BWMAP = "1"; /* Indicate map to display*/
  PT0BM001.XXXMODID = "S05"; /* Module identification*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PT0BS05"; /* Module identification*/
  TA1REC.TA1LOC = "OBTAIN STYLE/COLOR DESCRIPTIONS";
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0BS05

// Read temporary storage page
Function PT0BS06()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PT0BW03.PT0BWLEN = 784; /* Temporary storage length*/
  TA5REC.TA5APPID = "PT0B"; /* Application identification*/
  TA5REC.TA5TSQIX = PT0BW00.PT0BWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PT0BW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PT0BW00.PT0BWMAP = "1"; /* Indicate map to display*/
  PT0BM001.XXXMODID = "S06"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1PGMNM = "PT0BS06"; /* Module identification*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1MAP = "PT0BM003"; /* Map name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT0BS06

//*** RECORD=PT0BW00 ****
// Working storage for PT0B - Product Avail Control Maint
// ***********************
Record PT0BW00 type basicRecord
  10 PT0BWMNO PT0BWMNO ; 
  10 PT0BWIXM PT0BWIXM ; 
  10 PT0BWSWC PT0BWSWC ; 
  10 PT0BWSWE PT0BWSWE ; 
  10 PT0BWSWR PT0BWSWR ; 
  10 PT0BWSWU PT0BWSWU ; 
  10 PT0BWTSP PT0BWTSP ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 PT0BWMAP PT0BWMAP ; 
  10 XPCKEY XPCKEY ; 
    15 XPCCD XPCCD ; 
    15 XGPCD XGPCD ; 
  10 XQACD XQACD ; 
end // end PT0BW00

//*** RECORD=PT0BW01 ****
// Display storage for PT0BM001 - Add Category/Style Control
// ***********************
Record PT0BW01 type basicRecord
  10 XGPCD XGPCD ; 
  10 XGPABRV XGPABRV ; 
  10 XPCCD XPCCD ; 
  10 XPCSDESC XPCSDESC ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRID SY2CLRID ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 XDMCD XDMCD ; 
  10 XDMABRV XDMABRV ; 
  10 XQACD XQACD ; 
  10 XQADESC XQADESC ; 
  10 PC2INSEG PC2INSEG ; 
  10 PC2SEGAB PC2SEGAB ; 
  10 XPGCD XPGCD ; 
  10 XPGABRV XPGABRV ; 
  10 XUMCD XUMCD ; 
  10 XUMDESC XUMDESC ; 
  10 PT1MTC PT1MTC [2] ; 
end // end PT0BW01

//*** RECORD=PT0BW02 ****
// Display storage for PT0BM002 - Control Categories List
// ***********************
Record PT0BW02 type basicRecord
  10 PT0BWLEN PT0BWLEN ; 
  10 XGPCD XGPCD ; 
  10 XQACD XQACD ; 
  10 XQADESC XQADESC ; 
  10 XPCCD XPCCD [15] ; 
  10 XPCSDESC XPCSDESC [15] ; 
  10 PT1MTC PT1MTC [15] ; 
  10 ZZZSDT ZZZSDT [15] ; 
  10 ZZZCHGCT ZZZCHGCT [15] ; 
end // end PT0BW02

//*** RECORD=PT0BW03 ****
// Display storage for PT0BM003 - Control Styles List
// ***********************
Record PT0BW03 type basicRecord
  10 PT0BWLEN PT0BWLEN ; 
  10 XGPCD XGPCD ; 
  10 XQACD XQACD ; 
  10 XQADESC XQADESC ; 
  10 SY1STNBR SY1STNBR [15] ; 
  10 SY2CLRID SY2CLRID [15] ; 
  10 XDMCD XDMCD [15] ; 
  10 PC2INSEG PC2INSEG [15] ; 
  10 XPGCD XPGCD [15] ; 
  10 XUMCD XUMCD [15] ; 
  10 SY1SSTNM SY1SSTNM [15] ; 
  10 SY2CLRAB SY2CLRAB [15] ; 
  10 PT1MTC PT1MTC [15] ; 
  10 ZZZSDT ZZZSDT [15] ; 
  10 ZZZCHGCT ZZZCHGCT [15] ; 
end // end PT0BW03

//*** RECORD=PT1REC ****
// ****************** MODELING MONTHS TABLE *******************
// 
// DB2 TABLE VIEW:      DMODEL.VMNYMO01
// 
// DCLGEN MEMBER:       DCL00532
// 
// I/O MODULE:          IO2960
// 
// KEY TO TABLE:        XGPCD
//                      SY1STNBR
//                      SY2CLRID
//                      XDMCD
//                      XSDCD
//                      XPGCD
//                      XUMCD
//                      XPCCD
// 
// MAINTENANCE HISTORY:
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          10/26/88  SPOPA   New record.
// **********************
Record PT1REC type basicRecord
  5 PT1GROUP PT1GROUP ; 
    10 PT1KEY PT1KEY ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 XPCCD XPCCD ; 
    10 PT1MTC PT1MTC ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PT1REC

// Index for map fields
DataItem PT0BWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem PT0BWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map to be displayed
DataItem PT0BWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Information message number
DataItem PT0BWMNO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch
DataItem PT0BWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Edit error switch
DataItem PT0BWSWE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PT0BWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage update switch
DataItem PT0BWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current temporary storage page
DataItem PT0BWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem PT1GROUP char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem PT1KEY char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PT_MO_TO_CALC
DataItem PT1MTC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

