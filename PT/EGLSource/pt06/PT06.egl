package pt06;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import pc.common.*;
import pg.common.*;
import pt.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PT06 ****
// This application allows a user to inquire and maintain rows
// in the inspector hold DB2 table, DPRODC.VFEXPD01.
// 
// There are two different screens that may be displayed.
// The first screen will display all the rows in the table.
// User can do more than one selections.  The limit is 70 and
// selections cannot be on more than 5 different screens.
// After selections are entered, the second screen is
// displayed, showing all the rows selected for inquiry/change.
// There can be more than one screens brought up.
// The user may update the non-key fields.
// After changing the data, ENTER must be pressed
// update the data base.
// 
// When the user exits the second screen (via PF3 key) the
// the first screen is redisplayed, indicating with a "v"
// that the row was viewed/updated.
// 
// The user may scroll forward and backward to view all the
// rows by pressing PF7 and PF8.  He may exit to any allowed
// application, via FAST PATH or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          09/30/93  MHUYNH  New application.
//          02/13/96  MHUYNH  Changed heading DD date.
//          06/11/96  MHUYNH  Not allow fath path from other ap
//          01/02/97  DPACK   Add new expedite fields
// PT1087   07/25/97  IDICKI  Add new fileds for PO type.
// Y2KFIX   01/12/98  WSQUIR  MODIFICATIONS MADE TO: PT06M001,
//                            PT06W01 & PT06W02.
// Y2KFIX   02/12/98  WSQUIR  MODIFICATIONS MADE TO: PT06110
//                            PT06261, PT06S11, PT06S12,
//                            PT06S13, PT06S21, PT06S22,
//                            PT06S23, PT06S31, PT06S32,
//                            PT06S33, PT06S41, PT06S42,
//                            PT06S43.
// Y2KFIX   05/13/98  CSAWKI  MODIFICATIONS MADE TO: PT06M001,
//                            PT06M002 - RIGHT JUSTIFY PT06MPOD
// *********************
Program PT06 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PT00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FY1REC FY1REC; // record
  PG2REC PG2REC; // record
  PT06W00 PT06W00; // record
  PT06W01 PT06W01; // record
  PT06W02 PT06W02; // record
  PTWREC PTWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VFEXPD03 VFEXPD03; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PT06M.PT06M001,  // forms
      PT06M.PT06M002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPT001: XPPT001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set PT06M001 initial; /* M001 input/output*/
    set PT06M002 initial; /* M002 input/output*/
    set PT06W00 empty; /* Working storage*/
    set PT06W01 empty; /* M001 display storage*/
    set PT06W02 empty; /* M002 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    PT06W00.PT06WMAP = "1"; /* Map to be displayed switch*/
    PT06W00.PT06WSWF = "Y"; /* Format the map switch*/
    PT06W00.PT06WSWR = "Y"; /* Request for data switch*/
    PT06W00.PT06WCNT = 0; /* set counter of selected lines*/
    PT06W00.MAP1-NBR-ROWS = 14; /* Max 14 rows on map1*/
    PT06W00.MAP2-NBR-ROWS = 7; /* Max  7 rows on map2*/
    PT06W00.PT06-FCTY-RESP-LIT = "FCTY RESP "; /* set literal values*/
    PT06W00.PT06-CARR-LIT = "CARR ";
    PT06W00.PT06-CLS-LIT = " CLS ";
    PT06W00.PT06-ETD-LIT = " ETD ";
    PT06W00.PT06-ETA-LIT = " ETA ";
    PT06W00.PT06-SHOW-FCTY-CMT-TRANS = "F";

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PT06001; /* Converse the main process*/


    PT06001: PT06001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PT06001; /* Converse the main process*/


  end // end main
end // end PT06

// Main process to display a map
Function PT06001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Get current date and time.*/
   /* 2) If specified, display the first map.*/
   /* 3) Otherwise, if specified, display the second map.*/
   /* 4) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

      /* ------------------------------------------------------------*/
       /* If entry id from any application other than PT05, it*/
       /* is an error and a message is sent to PT05.*/
      /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP != "PT05")
    set PTWREC empty;
    PTWREC.XXXMSGNO = 145;
    COMMAREA.CAUSERA = PTWREC.CAUSERA;
    COMMAREA.CATOAP = "PT0M";
    COMMAREA.XGPCD = "02";
    XSEXIT();
  end

  XX0XS01(); /* Get date and time*/

  if (PT06W00.PT06WMAP == "1") /* Map 1 was requested*/
    PT06100(); /* Display map 1*/
  else

    if (PT06W00.PT06WMAP == "2") /* Map 2 was requested*/
      PT06200(); /* Display map 2*/
    else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/
      PTWREC.XXXMODID = "001"; /* Module identification*/
      PTWREC.XXXMSGNO = 10; /* Unexpected error occurred*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = PT06W00.PT06WMAP; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "PT0M"; /* TO application*/
      XSPT001(); /* Exit to another application*/
      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    end
  end


end // end PT06001

// List the rows in the table
Function PT06100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT06110(); /* Obtain the data to display*/

  PT06120(); /* Format and display the map*/

  PT06130(); /* Check attention identifier*/

  PT06140(); /* Reset fields to normal intensity*/

  PT06150(); /* Verify the entered data*/

  PT06160(); /* Process valid input request*/


end // end PT06100

// Obtain the data to display
Function PT06110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  if (PT06W00.PT06WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/
  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* MOVE 3332 TO PT06W00.XXXTSLEN;   /* Temporary storage page length*/
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
  /*  */
  /* ***************************** Y2K IN BEGIN *****************************/
  /*  */
  PT06W00.XXXTSLEN = 3360; /* Temporary storage page length*/
  /*  */
  /* ***************************** Y2K IN END *******************************/
  /*  */

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO == 0) /* No message to display*/
    PT06W00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/
  PT06S01(); /* Purge any temporary storage*/

   /* --------------------------------------------------------*/
   /* Open DPRODC.VFEXPD03*/
   /* --------------------------------------------------------*/
   /* !!!!   build the key for IO module*/
   /* --------------------------------------------------------*/

  PT06111(); /* Open VFEXPD03 cursor*/

   /* ----------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ----------------------------------------------------------*/
  while (PT06W00.PT06WEOC == "N") /* Until end of cursor*/

    PT06112(); /* Fetch VFEXPD03*/

    if (PT06W00.PT06WEOC == "N") /* If not end-of-cursor*/

      /* ----------------------------------------------------------*/
       /* Save data for display.*/
      /* ----------------------------------------------------------*/
      PT06113(); /* Save data*/

      /* ---------------------------------------------------------*/
       /* If the page is full, add the page to the storage queue.*/
      /* ---------------------------------------------------------*/
      if (PT06W00.PT06WIXM > 14) /* Page is full*/
        PT06114(); /* Add page to temporary storage*/
      end

    end
  end

   /* ----------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ----------------------------------------------------*/
  if (PT06W00.PT06WIXM > 1) /* Page was formatted*/
    PT06114(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close VFEXPD03 cursor*/
   /* ------------------------------------------------------------*/
  PT06115(); /* Close VFEXPD03*/

   /* ------------------------------------------------------------*/
   /* If no pages formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (PT06W00.TA5TSQIX == 0) /* No pages formatted*/

    PTWREC.XXXMODID = "110"; /* Module identification*/
    converseLib.validationFailed(38); /* No data was found to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PT06W00.PT06WSWR = "N"; /* Request for data switch*/


end // end PT06110

// Open DFQUAL.VINSPH01
Function PT06111()
   /* ------------------------------------------------------------*/
   /* Clear copybook.  NOTE: there is no key for this call.*/
   /* ------------------------------------------------------------*/
  set VFEXPD03 empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Get the drop dead rta limit date, 1 1/2 months from today*/
   /* ------------------------------------------------------------*/
  set TA2REC empty; /* Clear TA2REC*/
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = XX0XW01.XX0XWDAT;
  TA2REC.TA2DYAOD = +45;
  PT06S04();

  if (TA2REC.TA2RTNCD != 0)
    converseLib.validationFailed(106);
    PTWREC.XXXMODID = "111";
    return;
  else
    VFEXPD03.PC-DROPDEAD-RTA-DT = TA2REC.TA2GRGGN;
  end

   /* ------------------------------------------------------------*/
   /* Open VFEXPD03*/
   /* ------------------------------------------------------------*/

  VFEXPD03.PG1SC4CD = PTWREC.PG1SC4CD;
  VFEXPD03.XCTCD = PTWREC.XCTCD;
  VFEXPD03.FY1FCTYC = PTWREC.FY1FCTYC;
  VFEXPD03.SY1STNBR = PTWREC.SY1STNBR;
  VFEXPD03.SY2CLRID = PTWREC.SY2CLRID;
  VFEXPD03.XDMCD = PTWREC.XDMCD;
  VFEXPD03.XWHCD = PTWREC.XWHCD;
  VFEXPD03.PC3BUYMO = PTWREC.PT05MPBD;
  VFEXPD03.ZZZCHGDT = PTWREC.PT05MPED;
  VFEXPD03.PC6PREFL = "*";
  VFEXPD03.PC-PO-OT-CD = PTWREC.PT05POTP;
  VFEXPD03.PC-FCTY-SEND-IND = PTWREC.PC-FCTY-SEND-IND;
  VFEXPD03.PC-EXPD-TRNS-COMNT = "*";
  if (PTWREC.PT05MDRS == "Y"
   && PTWREC.PC2CUXID[1] == "     ")
    PT06S11(); /* Select tbl set*/
  end
  if (PTWREC.PT05MDRS == "N"
   && PTWREC.PC2CUXID[1] == "     ")
    PT06S21(); /* Select tbl set*/
  end
  if (PTWREC.PT05MDRS == "*"
   && PTWREC.PC2CUXID[1] == "     ")
    PT06S31(); /* Select tbl set*/
  end
  if (PTWREC.PC2CUXID[1] != "     ")
    PT06W00.PT05MCU1 = PTWREC.PC2CUXID[1];
    PT06W00.PT05MCU2 = PTWREC.PC2CUXID[2];
    PT06W00.PT05MCU3 = PTWREC.PC2CUXID[3];
    PT06W00.PT05MCU4 = PTWREC.PC2CUXID[4];
    PT06W00.PT05MCU5 = PTWREC.PC2CUXID[5];
    VFEXPD03.PC-EXPD-HQ-COMNT2 = PT06W00.PT06WPRD;
    PT06S41(); /* Select tbl set*/
  end

   /* ------------------------------------------------------------*/
   /* If successful, init switches & return to previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PT06W00.PT06WEOC = "N"; /* End of cursor switch*/
    PT06W00.PT06WIXM = 1; /* Display line index*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(8); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PT06M001 initial; /* Clear screen before display*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFEXPD03"; /* Table view name*/
  TA1REC.TA1TBLKE = VFEXPD03.VFEXPD03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT06111

// Fetch DFQUAL.VINSPH01
Function PT06112()
   /* ------------------------------------------------------------*/
   /* Fetch VFEXPD03.*/
   /* ------------------------------------------------------------*/
  if (PTWREC.PT05MDRS == "Y"
   && PTWREC.PC2CUXID[1] == "     ")
    PT06S12(); /* Select tbl set*/
  end
  if (PTWREC.PT05MDRS == "N"
   && PTWREC.PC2CUXID[1] == "     ")
    PT06S22(); /* Select tbl set*/
  end
  if (PTWREC.PT05MDRS == "*"
   && PTWREC.PC2CUXID[1] == "     ")
    PT06S32(); /* Select tbl set*/
  end
  if (PTWREC.PC2CUXID[1] != "     ")
    PT06S42(); /* Select tbl set*/
  end


   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Or row not found*/

      if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
        PT06W00.PT06WEOC = "Y"; /* Indicate end of cursor*/
      end

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(8); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VFEXPD03"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = VFEXPD03.VFEXPD03-KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT06112

// Save data for display
Function PT06113()
   /* ------------------------------------------------------------*/
   /* Save the data for display.*/
   /* ------------------------------------------------------------*/

  PT06W01.PT06MSEL[PT06WIXM] = " ";
  PT06W01.PG1SC4CD[PT06WIXM] = VFEXPD03.PG1SC4CD; /* Scheduler cd*/
  PT06W01.YSMXDV[PT06WIXM] = VFEXPD03.YSMXDV; /* Division cd*/
  PT06W01.PC3BUYMO[PT06WIXM] = VFEXPD03.PC3BUYMO; /* Buy month*/
  if (VFEXPD03.PC3BUYMO == 0)
    PT06W01.FY1FCTYC[PT06WIXM] = "  ";
  else
    PT06W01.FY1FCTYC[PT06WIXM] = VFEXPD03.FY1FCTYC; /* Factory*/
  end
  PT06W01.XCTCD[PT06WIXM] = VFEXPD03.XCTCD; /* Country*/
  PT06W01.SY1STNBR[PT06WIXM] = VFEXPD03.SY1STNBR; /* Style*/
  PT06W01.SY2CLRID[PT06WIXM] = VFEXPD03.SY2CLRID; /* Color*/
  PT06W01.XDMCD[PT06WIXM] = VFEXPD03.XDMCD; /* Dim*/
  PT06W01.PC2CUXID[PT06WIXM] = VFEXPD03.PC2CUXID; /* Customer Xref*/
  PT06W01.XWHCD[PT06WIXM] = VFEXPD03.XWHCD; /* Warehouse*/
  PT06W01.PC6PLAN[PT06WIXM] = VFEXPD03.PC6PLAN; /* Plan number*/
  PT06W01.PT06MORD[PT06WIXM] = VFEXPD03.PC6TORDE; /* On order*/
  PT06W01.PT06MBTS[PT06WIXM] = VFEXPD03.PC-TOT-BAL-SHP-QTY;
  PT06W01.PT06MBLA[PT06WIXM] = VFEXPD03.PT3AVTOT; /* BottomLine*/
  PT06W01.PT3YYMM[PT06WIXM] = VFEXPD03.PT3YYMM; /* Par Month*/
  PT06W01.PC6ETSDT[PT06WIXM] = VFEXPD03.PC6ETSDT; /* ets*/
  PT06W01.PC-ETAL-DT[PT06WIXM] = VFEXPD03.PC-ETAL-DT; /* etal*/
  PT06W01.PC-DROPDEAD-RTA-DT[PT06WIXM] = VFEXPD03.PC-DROPDEAD-RTA-DT; /* dropdead rta*/
  PT06W01.PC-FCTY-SEND-IND[PT06WIXM] = VFEXPD03.PC-FCTY-SEND-IND; /* fcty send fl*/
  PT06W01.PC-EXPD-PRTY-IND[PT06WIXM] = VFEXPD03.PC-EXPD-PRTY-IND; /* priority ind*/
  PT06W01.PC-EXPD-HQ-COMNT1[PT06WIXM] = VFEXPD03.PC-EXPD-HQ-COMNT1;
   /* OVE VFEXPD03.PC-EXPD-HQ-COMNT2*/
                   /* TO PT06W01.PC-EXPD-HQ-COMNT2(PT06WIXM);*/
  PT06W01.PC-EXPDRESP-COMNT1[PT06WIXM] = VFEXPD03.PC-EXPDRESP-COMNT1;
   /* OVE VFEXPD01.PC-EXPDRESP-COMNT2*/
                   /* TO PT06W01.PC-EXPDRESP-COMNT2(PT06WIXM);*/
   /* OVE VFEXPD01.PC-EXPD-TRNS-COMNT*/
                   /* TO PT06W01.PC-EXPD-TRNS-COMNT(PT06WIXM);*/
  PT06W01.PRDTN-FCTY-RSP-IND[PT06WIXM] = VFEXPD03.PRDTN-FCTY-RSP-IND;
  PT06W01.TS-CARR-CD[PT06WIXM] = VFEXPD03.TS-CARR-CD;
  PT06W01.PRDTN-CARR-SVC-ID[PT06WIXM] = VFEXPD03.PRDTN-CARR-SVC-ID;
  PT06W01.PRDTN-VESL-CLS-DT[PT06WIXM] = VFEXPD03.PRDTN-VESL-CLS-DT;
  PT06W01.TS-EST-DPRT-DT[PT06WIXM] = VFEXPD03.TS-EST-DPRT-DT;
  PT06W01.TS-EST-DEST-DT[PT06WIXM] = VFEXPD03.TS-EST-DEST-DT;
  PT06W01.PC-ITM-SEQ-NBR[PT06WIXM] = VFEXPD03.PC-ITM-SEQ-NBR;

   /* ------------------------------------------------------------*/
   /* Add to line counter.*/
   /* ------------------------------------------------------------*/
  PT06W00.PT06WIXM = PT06W00.PT06WIXM + 1; /* Increment line index*/


end // end PT06113

// Add page to temporary storage
Function PT06114()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PT06W01.XXXTSLEN = PT06W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PT06W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    PT06W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Reset to 0*/
    PT06W00.PT06WIXM = 1; /* Reset to 1*/
    set PT06W01 empty; /* M001 display storage*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PTWREC.XXXMODID = "114"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT06114

// Close DPRODC.VFEXPD03
Function PT06115()
   /* ------------------------------------------------------------*/
   /* Close VFEXPD03.*/
   /* ------------------------------------------------------------*/
  if (PTWREC.PT05MDRS == "Y"
   && PTWREC.PC2CUXID[1] == "     ")
    PT06S13(); /* Close table set*/
  end
  if (PTWREC.PT05MDRS == "N"
   && PTWREC.PC2CUXID[1] == "     ")
    PT06S23(); /* Close table set*/
  end
  if (PTWREC.PT05MDRS == "*"
   && PTWREC.PC2CUXID[1] == "     ")
    PT06S33(); /* Close table set*/
  end
  if (PTWREC.PC2CUXID[1] != "     ")
    PT06S43(); /* Close table set*/
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "115"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFEXPD03"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PT06115

// Format and converse the map
Function PT06120()
   /* ------------------------------------------------------------*/
   /* If error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* If error found*/

    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  if (PT06W00.PT06WSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PT06W00.PT06WSWF == "Y") /* Map must be formatted*/
      PT06121(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PT06M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT06M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PT06M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT06M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT06M001.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT06M001 alarm; /* Indicate sound alarm*/

  end

   /* -------------------------------------------------------------*/
   /* Make line visible/nonvisible depending on po delivery month*/
   /* -------------------------------------------------------------*/

  PT06W00.PT06WIXM = 1;
  while (PT06W00.PT06WIXM <= PT06W00.MAP1-NBR-ROWS)

    if (PT06M001.PC-EXPD-PRTY-IND[PT06WIXM] == "X")
      set PT06M001.PT06MSEL[PT06WIXM] skip, bold;
      set PT06M001.PT06MPOD[PT06WIXM] skip, bold;
      set PT06M001.FY1FCTYC[PT06WIXM] skip, bold;
      set PT06M001.SY1STNBR[PT06WIXM] skip, bold;
      set PT06M001.SY2CLRID[PT06WIXM] skip, bold;
      set PT06M001.XDMCD[PT06WIXM] skip, bold;
      set PT06M001.PC2CUXID[PT06WIXM] skip, bold;
      set PT06M001.XWHCD[PT06WIXM] skip, bold;
      set PT06M001.PT06MORD[PT06WIXM] skip, bold;
      set PT06M001.PT06MBTS[PT06WIXM] skip, bold;
      set PT06M001.PT06MBLA[PT06WIXM] skip, bold;
      set PT06M001.PT06MPAR[PT06WIXM] skip, bold;
      set PT06M001.PT06METS[PT06WIXM] skip, bold;
      set PT06M001.PT06META[PT06WIXM] skip, bold;
      set PT06M001.PT06MDDR[PT06WIXM] skip, bold;
      set PT06M001.PC-FCTY-SEND-IND[PT06WIXM] skip, bold;
      set PT06M001.PRDTN-FCTY-RSP-IND[PT06WIXM] skip, bold;
    else
      set PT06M001.PT06MSEL[PT06WIXM] normal; /* Reset select flag*/
    end

    if (PT06M001.PT06MPOD[PT06WIXM] == 0)
      set PT06M001.PT06MSEL[PT06WIXM] invisible, skip; /* nonvisible*/
    end
    if (PT06M001.SY1STNBR[PT06WIXM] == " ")
      set PT06M001.PT06MBLA[PT06WIXM] invisible, skip; /* nonvisible*/
    end

    PT06W00.PT06WIXM = PT06W00.PT06WIXM + 1;
  end


  converse PT06M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = " "; /* Module identification*/
  PTWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PT06M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PT06M001.CAITEM; /* Application data*/
   /* ========================*/


end // end PT06120

// Format the display data
Function PT06121()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PT06M001 initial;

  PT06W00.PT06WSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PT06W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PT06W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PT06W00.PT06WSWU == "Y") /* Current page was changed*/

        PT06S02(); /* Update temporary storage page*/

        PT06W00.PT06WSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      if (PT06W00.XXXTSPAG > PT06W00.TA5TSQIX) /* Desired greater highest*/
        PT06W00.XXXTSPAG = PT06W00.TA5TSQIX; /* Default to highest*/
      end

      PT06S03(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    PT06M001.XXXTSPAG = PT06W00.XXXTSPAG; /* Current page*/
    PT06M001.TA5TSQIX = PT06W00.TA5TSQIX; /* Highest page*/
    set PT06M001.XXXLITPG skip; /* "PAGE" literal*/
    set PT06M001.XXXLITOF skip; /* "OF" literal*/

  end
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

   /* retrieve selected lines from working storage table*/
   /* F PT06W00.XXXTSPAG IN PT06W00.PT06MPAG;*/
    /* MOVE EZETST TO PT06W00.PT06WIXM;*/
    /* MOVE 1 TO PT06W00.PT06WIX2;*/
    /* WHILE PT06W00.PT06WIX2 LE PT06W00.MAP1-NBR-ROWS;*/
      /* MOVE PT06W00.PT06MSEL(PT06WIXM) TO PT06W01.PT06MSEL(PT06WIX2);*/
      /* PT06W00.PT06WIXM = PT06W00.PT06WIXM + 1;*/
      /* PT06W00.PT06WIX2 = PT06W00.PT06WIX2 + 1;*/
    /* END;*/
   /* ND;*/

  PT06W00.PT06WIXM = 1; /* Initialize line index*/

  while (PT06W00.PT06WIXM <= PT06W00.MAP1-NBR-ROWS)

    PT06M001.PT06MSEL[PT06WIXM] = PT06W01.PT06MSEL[PT06WIXM];
    PT06W00.PT06WDT = PT06W01.PC3BUYMO[PT06WIXM];
    PT06M001.PT06MPOD[PT06WIXM] = PT06W00.PT06WDT4;
    PT06M001.FY1FCTYC[PT06WIXM] = PT06W01.FY1FCTYC[PT06WIXM];
    PT06M001.SY1STNBR[PT06WIXM] = PT06W01.SY1STNBR[PT06WIXM];
    PT06M001.SY2CLRID[PT06WIXM] = PT06W01.SY2CLRID[PT06WIXM];
    PT06M001.XDMCD[PT06WIXM] = PT06W01.XDMCD[PT06WIXM];
    PT06M001.PC2CUXID[PT06WIXM] = PT06W01.PC2CUXID[PT06WIXM];
    PT06M001.XWHCD[PT06WIXM] = PT06W01.XWHCD[PT06WIXM];
    PT06M001.PT06MORD[PT06WIXM] = PT06W01.PT06MORD[PT06WIXM];
    PT06M001.PT06MBTS[PT06WIXM] = PT06W01.PT06MBTS[PT06WIXM];
    PT06M001.PT06MBLA[PT06WIXM] = PT06W01.PT06MBLA[PT06WIXM];
    PT06M001.PT06MPAR[PT06WIXM] = PT06W01.PT3YYMM[PT06WIXM];
    PT06W00.PT06WDT = PT06W01.PC6ETSDT[PT06WIXM];
    if (PT06W00.PT06WDT4 == 0)
      PT06M001.PT06METS[PT06WIXM] = "    ";
    else
      PT06M001.PT06METS[PT06WIXM] = PT06W00.PT06WDT4;
    end
    PT06W00.PT06WDT = PT06W01.PC-ETAL-DT[PT06WIXM];
    if (PT06W00.PT06WDT4 == 0)
      PT06M001.PT06META[PT06WIXM] = "    ";
    else
      PT06M001.PT06META[PT06WIXM] = PT06W00.PT06WDT4;
    end
    PT06W00.PT06WDT = PT06W01.PC-DROPDEAD-RTA-DT[PT06WIXM];
    if (PT06W00.PT06WDT4 == 0)
      PT06M001.PT06MDDR[PT06WIXM] = "    ";
    else
      PT06M001.PT06MDDR[PT06WIXM] = PT06W00.PT06WDT4;
    end
    PT06M001.PC-FCTY-SEND-IND[PT06WIXM] = PT06W01.PC-FCTY-SEND-IND[PT06WIXM];
    PT06M001.PC-EXPD-PRTY-IND[PT06WIXM] = PT06W01.PC-EXPD-PRTY-IND[PT06WIXM];
    PT06M001.PRDTN-FCTY-RSP-IND[PT06WIXM] = PT06W01.PRDTN-FCTY-RSP-IND[PT06WIXM];

    /* ------------------------------------------------------------*/
     /* Add to counter.*/
    /* ------------------------------------------------------------*/
    PT06W00.PT06WIXM = PT06W00.PT06WIXM + 1; /* Increment line index*/

  end

  if (PT06M001.PT06MPOD[1] == 0)
    set PT06M001.PT06MSEL[2] cursor, normal; /* Position cursor*/
  else
    set PT06M001.PT06MSEL[1] cursor, normal; /* Position cursor*/
  end

end // end PT06121

// Check attention identifier
Function PT06130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    if (PT06W00.PT06WSWR == "Y") /* Request for data switch*/
      set PT06W01 empty;
    end

    PT06W00.PT06WSWF = "Y"; /* Format the map switch*/
    PT06W00.PT06WSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* Fast path to application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PT06M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PT06S01(); /* Purge any temporary storage*/

      XSPT001(); /* Exit to another application*/

      set PT06M001.CATOAP cursor, bold; /* Highlight*/

    else
      PTWREC.XXXMSGNO = 18; /* Indicate PF key not valid*/
      PTWREC.XXXMODID = "130"; /* Process name*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* PF3 was pressed*/
   || converseVar.eventKey is pf5 /* PF5 was pressed*/
  )                              
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PT06M001"; /* Move in map name for help*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PT05"; /* Set to ?????? application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "PT0M"; /* Set to ?????? application*/
    end


    PT06S01(); /* Purge any temporary storage*/

    XSPT001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   
   && converseVar.eventKey not pf8   
  )                                 
    PTWREC.XXXMODID = "130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PT06130

// Reset highlighted fields
Function PT06140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PT06M001.CATOAP initialAttributes; /* To application*/
  set PT06M001.CAITEM initialAttributes; /* Application data*/

  PT06W00.PT06WIXM = 1; /* Initialize line index*/

  while (PT06W00.PT06WIXM <= PT06W00.MAP1-NBR-ROWS)

    set PT06M001.PT06MSEL[PT06WIXM] normal; /* Reset select flag*/
    PT06W00.PT06WIXM = PT06W00.PT06WIXM + 1; /* Increment line index*/

  end


end // end PT06140

// Verify the entered data
Function PT06150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PT06M001.CAITEM > " ") /* Application data was entered*/

    PTWREC.XXXMODID = "150"; /* Module identification*/
    set PT06M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PT06151(); /* Verify scroll/add request*/

  else
    if (converseVar.eventKey is enter)

    /* ------------------------------------------------------------*/
     /* Otherwise, verify data in the line.*/
    /* ------------------------------------------------------------*/

      PT06W00.PT06WIXM = 14; /* Initialize line index*/

      while (PT06W00.PT06WIXM > 0) /* Until end of lines*/

        PT06152(); /* Verify data in the line*/

        PT06W00.PT06WIXM = PT06W00.PT06WIXM - 1; /* Decrement line number*/

      end
    else
      PTWREC.XXXMODID = "150";
      converseLib.validationFailed(4);
    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end PT06150

// Verify scroll request
Function PT06151()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PT06W00.XXXTSPAG < 2)       /* and no previous pages*/

    PTWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(77); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PT06W00.XXXTSPAG >= PT06W00.TA5TSQIX) /* and no more pages*/

    PTWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(78); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  PT06W00.PT06WIXM = 14; /* Initialize line index*/

  while (PT06W00.PT06WIXM > 0) /* Until end of lines*/

    if (PT06M001.PT06MSEL[PT06WIXM] != " " /* If selection was made*/
     && PT06M001.PT06MSEL[PT06WIXM] != "V" /* and line not reviewed*/
     && PT06M001.PT06MSEL[PT06WIXM] != "S") /* and line not selected*/

      PTWREC.XXXMODID = "151"; /* Module identification*/
      set PT06M001.PT06MSEL[PT06WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(9); /* Indicate data may not change*/

    end

    PT06W00.PT06WIXM = PT06W00.PT06WIXM - 1; /* Decrement line number*/

  end


end // end PT06151

// Verify selection
Function PT06152()
   /* ------------------------------------------------------------*/
   /* If selection was made, ensure an "S" & "V".*/
   /* ------------------------------------------------------------*/

  if (PT06M001.PT06MSEL[PT06WIXM] > " ") /* Selection was entered*/

    if (PT06M001.PT06MSEL[PT06WIXM] != "S" /* Valid selection character*/
     && PT06M001.PT06MSEL[PT06WIXM] != "V") /* Valid reviewed character*/

      PTWREC.XXXMODID = "152"; /* Module identification*/
      set PT06M001.PT06MSEL[PT06WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(13); /* Indicate only "S" may be used*/

    end

  end


end // end PT06152

// Process valid input request
Function PT06160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  PT06W00.PT06WSWF = "Y"; /* Format the map switch*/
   /* OVE 'N' TO PT06W00.PT06WLSW;     /* Init delete function switch*/

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    if (PT06W00.XXXTSPAG in PT06W00.PT06MPAG) /* page already saved*/
      PT06W00.PT06WIX2 = sysVar.arrayIndex; /* locate where page is*/
    else

      if ("S" in PT06M001.PT06MSEL)
        if (0 in PT06W00.PT06MPAG) /* locate next available page*/
          PT06W00.PT06WIX2 = sysVar.arrayIndex;

          PT06W00.PT06WIXM = 1;
          while (PT06W00.PT06WIXM <= PT06W00.MAP1-NBR-ROWS)
            PT06W00.PT06MPAG[PT06WIX2] = PT06W00.XXXTSPAG;
            PT06W00.PT06MSEL[PT06WIX2] = PT06M001.PT06MSEL[PT06WIXM];
            PT06W00.PT06WIXM = PT06W00.PT06WIXM + 1;
            PT06W00.PT06WIX2 = PT06W00.PT06WIX2 + 1;
          end

        else /* number of selected rows maxed*/
          PTWREC.XXXMODID = "160";
          converseLib.validationFailed(129);
          return;
        end
      end
    end

    set PT06M001 initial;
    PT06W00.XXXTSPAG = PT06W00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    if (PT06W00.XXXTSPAG in PT06W00.PT06MPAG) /* page already saved*/
      PT06W00.PT06WIX2 = sysVar.arrayIndex; /* locate where page is*/
    else

      if ("S" in PT06M001.PT06MSEL)
        if (0 in PT06W00.PT06MPAG) /* locate next available page*/
          PT06W00.PT06WIX2 = sysVar.arrayIndex;

          PT06W00.PT06WIXM = 1;
          while (PT06W00.PT06WIXM <= PT06W00.MAP1-NBR-ROWS)
            PT06W00.PT06MPAG[PT06WIX2] = PT06W00.XXXTSPAG;
            PT06W00.PT06MSEL[PT06WIX2] = PT06M001.PT06MSEL[PT06WIXM];
            PT06W00.PT06WIXM = PT06W00.PT06WIXM + 1;
            PT06W00.PT06WIX2 = PT06W00.PT06WIX2 + 1;
          end
        else /* number of selected rows maxed*/
          PTWREC.XXXMODID = "160";
          converseLib.validationFailed(129);
          return;
        end
      end
    end

    set PT06M001 initial;
    PT06W00.XXXTSPAG = PT06W00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* update and add to counter selections on the last screen*/
   /* ------------------------------------------------------------*/
  if (PT06W00.XXXTSPAG in PT06W00.PT06MPAG) /* page already saved*/
    PT06W00.PT06WIX2 = sysVar.arrayIndex; /* locate where page is*/
  else

    if ("S" in PT06M001.PT06MSEL)
      if (0 in PT06W00.PT06MPAG) /* locate next available page*/
        PT06W00.PT06WIX2 = sysVar.arrayIndex;

        PT06W00.PT06WIXM = 1;
        while (PT06W00.PT06WIXM <= PT06W00.MAP1-NBR-ROWS)
          PT06W00.PT06MPAG[PT06WIX2] = PT06W00.XXXTSPAG;
          PT06W00.PT06MSEL[PT06WIX2] = PT06M001.PT06MSEL[PT06WIXM];
          PT06W00.PT06WIXM = PT06W00.PT06WIXM + 1;
          PT06W00.PT06WIX2 = PT06W00.PT06WIX2 + 1;
        end
      else /* number of selected rows maxed*/
        PTWREC.XXXMODID = "160";
        converseLib.validationFailed(129);
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify if any selection was made*/
   /* ------------------------------------------------------------*/

  if ("S" in PT06W00.PT06MSEL)

  else
    PTWREC.XXXMODID = "160";
    converseLib.validationFailed(13);
    return;
  end

   /* ------------------------------------------------------------*/
   /* Process selected lines.  Set switch for map2*/
   /* ------------------------------------------------------------*/

  set PT06W02 empty;

  PT06W00.PT06WIXM = 1; /* index for temporary select table*/
  PT06W00.PT06WIX4 = 1; /* index for screen map2*/
  while (PT06W00.PT06WIXM <= 57 && PT06W00.PT06MPAG[PT06WIXM] != 0)

    PT06W00.XXXTSPAG = PT06W00.PT06MPAG[PT06WIXM];
    PT06S03(); /* Obtain a page*/

    PT06W00.PT06WIX2 = 1; /* subindex for temporary select table*/
    while (PT06WIX2 <= PT06W00.MAP1-NBR-ROWS)

      if (PT06W00.PT06MSEL[PT06WIXM] == "S") /* If line selected*/
        if (PT06W00.PT06WIXM <= 14)
          PT06W00.PT06WIX3 = PT06W00.PT06WIXM;
        else
          if (PT06W00.PT06WIXM <= 28)
            PT06W00.PT06WIX3 = PT06W00.PT06WIXM - 14;
          else
            if (PT06W00.PT06WIXM <= 42)
              PT06W00.PT06WIX3 = PT06W00.PT06WIXM - 28;
            else
              if (PT06W00.PT06WIXM <= 56)
                PT06W00.PT06WIX3 = PT06W00.PT06WIXM - 42;
              else
                if (PT06W00.PT06WIXM <= 70)
                  PT06W00.PT06WIX3 = PT06W00.PT06WIXM - 56;
                end
              end
            end
          end
        end

        PT06W02.PT06WIXT[PT06WIX4] = PT06W00.PT06WIX4;
        PT06W02.PG1SC4CD[PT06WIX4] = PT06W01.PG1SC4CD[PT06WIX3];
        PT06W02.YSMXDV[PT06WIX4] = PT06W01.YSMXDV[PT06WIX3];
        PT06W02.PC3BUYMO[PT06WIX4] = PT06W01.PC3BUYMO[PT06WIX3];
        PT06W02.FY1FCTYC[PT06WIX4] = PT06W01.FY1FCTYC[PT06WIX3];
        PT06W02.XCTCD[PT06WIX4] = PT06W01.XCTCD[PT06WIX3];
        PT06W02.SY1STNBR[PT06WIX4] = PT06W01.SY1STNBR[PT06WIX3];
        PT06W02.SY2CLRID[PT06WIX4] = PT06W01.SY2CLRID[PT06WIX3];
        PT06W02.XDMCD[PT06WIX4] = PT06W01.XDMCD[PT06WIX3];
        PT06W02.PC2CUXID[PT06WIX4] = PT06W01.PC2CUXID[PT06WIX3];
        PT06W02.XWHCD[PT06WIX4] = PT06W01.XWHCD[PT06WIX3];
        PT06W02.PC6PLAN[PT06WIX4] = PT06W01.PC6PLAN[PT06WIX3];
        PT06W02.PT06MORD[PT06WIX4] = PT06W01.PT06MORD[PT06WIX3];
        PT06W02.PT06MBTS[PT06WIX4] = PT06W01.PT06MBTS[PT06WIX3];
        PT06W02.PT06MBLA[PT06WIX4] = PT06W01.PT06MBLA[PT06WIX3];
        PT06W02.PT3YYMM[PT06WIX4] = PT06W01.PT3YYMM[PT06WIX3];
        PT06W02.PC6ETSDT[PT06WIX4] = PT06W01.PC6ETSDT[PT06WIX3];
        PT06W02.PC-ETAL-DT[PT06WIX4] = PT06W01.PC-ETAL-DT[PT06WIX3];
        PT06W02.PC-DROPDEAD-RTA-DT[PT06WIX4] = PT06W01.PC-DROPDEAD-RTA-DT[PT06WIX3];
        PT06W02.PC-FCTY-SEND-IND[PT06WIX4] = PT06W01.PC-FCTY-SEND-IND[PT06WIX3];
        PT06W02.PC-EXPD-HQ-COMNT1[PT06WIX4] = PT06W01.PC-EXPD-HQ-COMNT1[PT06WIX3];
        PT06W02.PC-EXPDRESP-COMNT1[PT06WIX4] = PT06W01.PC-EXPDRESP-COMNT1[PT06WIX3];
        PT06W02.PC-EXPD-TRNS-COMNT[PT06WIX4] = PT06W01.PC-EXPD-TRNS-COMNT[PT06WIX3];
        PT06W02.PRDTN-FCTY-RSP-IND[PT06WIX4] = PT06W01.PRDTN-FCTY-RSP-IND[PT06WIX3];
        PT06W02.TS-CARR-CD[PT06WIX4] = PT06W01.TS-CARR-CD[PT06WIX3];
        PT06W02.PRDTN-CARR-SVC-ID[PT06WIX4] = PT06W01.PRDTN-CARR-SVC-ID[PT06WIX3];
        PT06W02.PRDTN-VESL-CLS-DT[PT06WIX4] = PT06W01.PRDTN-VESL-CLS-DT[PT06WIX3];
        PT06W02.TS-EST-DPRT-DT[PT06WIX4] = PT06W01.TS-EST-DPRT-DT[PT06WIX3];
        PT06W02.TS-EST-DEST-DT[PT06WIX4] = PT06W01.TS-EST-DEST-DT[PT06WIX3];
        PT06W02.PC-ITM-SEQ-NBR[PT06WIX4] = PT06W01.PC-ITM-SEQ-NBR[PT06WIX3];

        PT06W00.PT06WIX4 = PT06W00.PT06WIX4 + 1;
       /* OVE 'V' TO PT06W01.PT06MSEL(PT06WIX3);  /* Move 'v' for reviewed*/
       /* T06S02;          /* update temporary page*/


      end /* if*/
      PT06W00.PT06WIX2 = PT06W00.PT06WIX2 + 1;
      PT06W00.PT06WIXM = PT06W00.PT06WIXM + 1;

    end /* while*/

  end /* while*/

  PT06W00.PT06WMAP = "2"; /* Map to be displayed switch*/
  PT06W00.PT06WSWR = "Y"; /* Request for data switch*/
  PT06W00.PT06WCNT = 1; /* set index for map2*/
  PT06W00.PT06WIX4 = PT06W00.PT06WIX4 - 1; /* total number of selections*/
end // end PT06160

// Main process to display map2
Function PT06200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PT06210(); /* Obtain the data to display*/

  PT06220(); /* Format and display the map*/

  PT06230(); /* Check attention identifier*/

  PT06240(); /* Reset fields to normal intensity*/

  PT06250(); /* Verify the entered data*/

  PT06260(); /* Process valid input request*/


end // end PT06200

// Obtain the data to display
Function PT06210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  if (PT06W00.PT06WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage.*/
   /* ------------------------------------------------------------*/
   /* ET PT06W02 EMPTY;               /* M002 display storage*/

   /* ------------------------------------------------------------*/
   /* Save MAP1 display storage in MAP2 storage area.*/
   /* ------------------------------------------------------------*/

      /* MOVE PT06W01.PG1SC4CD(EZETST) TO PT06W02.PG1SC4CD;/* Scheduler cd*/
      /* MOVE PT06W01.YSMXDV(EZETST) TO PT06W02.YSMXDV;/* Division code*/
   /* MOVE PT06W01.PC3BUYMO(EZETST) TO PT06W02.PC3BUYMO;/* po date*/
   /* MOVE PT06W01.FY1FCTYC(EZETST) TO PT06W02.FY1FCTYC;/* Factory code*/
   /* MOVE PT06W01.XCTCD(EZETST) TO PT06W02.XCTCD;/* Country code*/
   /* MOVE PT06W01.SY1STNBR(EZETST) TO PT06W02.SY1STNBR;/* Style number*/
   /* MOVE PT06W01.SY2CLRID(EZETST) TO PT06W02.SY2CLRID;/* Color id*/
   /* MOVE PT06W01.XDMCD(EZETST) TO PT06W02.XDMCD;/* Dimension code*/
   /* MOVE PT06W01.PC2CUXID(EZETST) TO PT06W02.PC2CUXID;/* Customer xref*/
   /* MOVE PT06W01.XWHCD(EZETST) TO PT06W02.XWHCD;/* warehouse*/
   /* MOVE PT06W01.PC-DROPDEAD-RTA-DT(EZETST) TO*/
                                  /* PT06W02.PC-DROPDEAD-RTA-DT;/* drop*/
                                   /* dead rta*/
                                  /* MOVE*/
                                   /* PT06W01.PC-DROPDEAD-RTA-DT(EZETST) TO*/
                                   /* PT06W02.PT06WDT;/* save it*/
   /* MOVE PT06W01.PC-ETAL-DT(EZETST) TO PT06W02.PC-ETAL-DT;/* etal date*/
   /* MOVE PT06W01.PC-FCTY-SEND-IND(EZETST) TO*/
                             /* PT06W02.PC-FCTY-SEND-IND; /* send flag*/
   /* MOVE PT06W01.PC-EXPD-HQ-COMNT1(EZETST) TO PT06W02.PC-EXPD-HQ-COMNT1;*/
   /* MOVE PT06W01.PC-EXPD-HQ-COMNT2(EZETST) TO PT06W02.PC-EXPD-HQ-COMNT2;*/
                                  /* MOVE*/
                                   /* PT06W01.PC-EXPDRESP-COMNT1(EZETST) TO*/
                                   /* PT06W02.PC-EXPDRESP-COMNT1;*/
                                  /* MOVE*/
                                  /* PT06W01.PC-EXPDRESP-COMNT2(EZETST) TO*/
                                  /* PT06W02.PC-EXPDRESP-COMNT2;*/
                                  /* MOVE*/
                                   /* PT06W01.PC-EXPD-TRNS-COMNT(EZETST) TO*/
                                   /* PT06W02.PC-EXPD-TRNS-COMNT;*/
   /* ;*/
   /* MOVE EZETST TO PT06W00.PT06WPNT;/* Save pointer*/
   /* ;*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PT06W00.PT06WSWR = "N"; /* Request for data switch*/


end // end PT06210

// Format and converse the map
Function PT06220()
   /* ----------------------------------------------------*/
   /* If an error was found, format data to be displayed.*/
   /* ----------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* If error found*/

    PTWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (PT06W00.PT06WSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PT06W00.PT06WSWF == "Y") /* Map must be formatted*/
      PT06221(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PT06M002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PT06M002.CATOAP = COMMAREA.CATOAP; /* To application*/
  PT06M002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PTWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PTWREC.XXXMSGNO != 0) /* Message to display*/

      if (PTWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PTWREC.XXXMSGNO);
      end /* Message number*/
    else
      PT06M002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PT06M002.XXXMODID = PTWREC.XXXMODID; /* Module identification*/

    set PT06M002 alarm; /* Indicate sound alarm*/

  end

  set PT06M002.PT06MDRT[1] cursor;
  PT06W00.PT06WIXM = 1;
  while (PT06W00.PT06WIXM <= PT06W00.MAP2-NBR-ROWS)
    if (PT06M002.PT06MPOD[PT06WIXM] == 0)
      set PT06M002.PC6PLAN[PT06WIXM] invisible, skip;
      set PT06M002.PT06MDRT[PT06WIXM] skip;
      set PT06M002.PC-FCTY-SEND-IND[PT06WIXM] skip;
      set PT06M002.PT06MHLT[PT06WIXM] invisible, skip;
      set PT06M002.PC-EXPD-HQ-COMNT1[PT06WIXM] invisible, skip;
      set PT06M002.PT06-FCTY-CMT-TRANS[PT06WIXM] invisible, skip;
    else
      set PT06M002.PC6PLAN[PT06WIXM] initialAttributes;
      set PT06M002.PT06MHLT[PT06WIXM] skip;
      set PT06M002.PT06MDRT[PT06WIXM] initialAttributes;
      set PT06M002.PC-FCTY-SEND-IND[PT06WIXM] initialAttributes;
      set PT06M002.PC-EXPD-HQ-COMNT1[PT06WIXM] initialAttributes;
      set PT06M002.PT06-FCTY-CMT-TRANS[PT06WIXM] initialAttributes;
    end
    PT06W00.PT06WIXM = PT06W00.PT06WIXM + 1;
  end

  converse PT06M002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PTWREC.XXXMODID = " "; /* Module identification*/
  PTWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PT06M002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PT06M002.CAITEM; /* Application data*/


end // end PT06220

// Format the display data
Function PT06221()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PT06M002 initial; /* m002 input/output area*/

  PT06W00.PT06WSWF = "N"; /* Format the map switch*/

  if (PT06W00.PT06-SHOW-FCTY-CMT-TRANS == "F") /* if fcty cmt disp*/
    PT06M002.PT06-FCTY-CMT-TRANS-PF = "13:TRANS";
  else
    PT06M002.PT06-FCTY-CMT-TRANS-PF = "13:FCTY CMT";
  end

   /* ------------------------------------------------------------*/
   /* Format page number.*/
   /* ------------------------------------------------------------*/

  PT06M002.XXXTSPAG = (PT06W00.PT06WCNT / PT06W00.MAP2-NBR-ROWS) + 1;

  if (PT06W00.PT06WIX4 <= PT06W00.MAP2-NBR-ROWS)
    PT06M002.TA5TSQIX = 1;
  else
    if (PT06W00.PT06WIX4 <= 14)
      PT06M002.TA5TSQIX = 2;
    else
      if (PT06W00.PT06WIX4 <= 21)
        PT06M002.TA5TSQIX = 3;
      else
        if (PT06W00.PT06WIX4 <= 28)
          PT06M002.TA5TSQIX = 4;
        else
          if (PT06W00.PT06WIX4 <= 35)
            PT06M002.TA5TSQIX = 5;
          else
            if (PT06W00.PT06WIX4 <= 42)
              PT06M002.TA5TSQIX = 6;
            else
              if (PT06W00.PT06WIX4 <= 49)
                PT06M002.TA5TSQIX = 7;
              else
                if (PT06W00.PT06WIX4 <= 56)
                  PT06M002.TA5TSQIX = 8;
                else
                  if (PT06W00.PT06WIX4 <= 63)
                    PT06M002.TA5TSQIX = 9;
                  else
                    if (PT06W00.PT06WIX4 <= 70)
                      PT06M002.TA5TSQIX = 10;
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the data from storage.*/
   /* ------------------------------------------------------------*/

  PT06W00.PT06WIX2 = PT06W00.PT06WCNT;
  PT06W00.PT06WIXM = 1;
  while (PT06W00.PT06WIXM <= PT06W00.MAP2-NBR-ROWS
   && PT06W02.PC3BUYMO[PT06WIXM] > 0)
    PT06W00.PT06WDT = PT06W02.PC3BUYMO[PT06WIX2]; /* po month*/
    PT06M002.PT06MPOD[PT06WIXM] = PT06W00.PT06WDT4; /* po month*/
    PT06M002.FY1FCTYC[PT06WIXM] = PT06W02.FY1FCTYC[PT06WIX2];
    PT06M002.SY1STNBR[PT06WIXM] = PT06W02.SY1STNBR[PT06WIX2];
    PT06M002.SY2CLRID[PT06WIXM] = PT06W02.SY2CLRID[PT06WIX2];
    PT06M002.XDMCD[PT06WIXM] = PT06W02.XDMCD[PT06WIX2];
    PT06M002.PC2CUXID[PT06WIXM] = PT06W02.PC2CUXID[PT06WIX2];
    PT06M002.XWHCD[PT06WIXM] = PT06W02.XWHCD[PT06WIX2];
    PT06M002.PC6PLAN[PT06WIXM] = PT06W02.PC6PLAN[PT06WIX2];
    PT06M002.PT06MORD[PT06WIXM] = PT06W02.PT06MORD[PT06WIX2];
    PT06M002.PT06MBTS[PT06WIXM] = PT06W02.PT06MBTS[PT06WIX2];
    PT06M002.PT06MBLA[PT06WIXM] = PT06W02.PT06MBLA[PT06WIX2];
    PT06M002.PT06MPAR[PT06WIXM] = PT06W02.PT3YYMM[PT06WIX2];
    PT06W00.PT06WDT = PT06W02.PC6ETSDT[PT06WIX2];
    if (PT06W00.PT06WDT4 == 0)
      PT06M002.PT06METS[PT06WIXM] = "    ";
    else
      PT06M002.PT06METS[PT06WIXM] = PT06W00.PT06WDT4;
    end
    PT06W00.PT06WDT = PT06W02.PC-ETAL-DT[PT06WIX2];
    if (PT06W00.PT06WDT4 == 0)
      PT06M002.PT06META[PT06WIXM] = "    ";
    else
      PT06M002.PT06META[PT06WIXM] = PT06W00.PT06WDT4;
    end
    PT06W00.PT06WDT = PT06W02.PC-DROPDEAD-RTA-DT[PT06WIX2];
    if (PT06W00.PT06WDT6 == 0)
      PT06M002.PT06MDRT[PT06WIXM] = "      ";
    else
      PT06M002.PT06MDRT[PT06WIXM] = PT06W00.PT06WDT6;
    end
    PT06M002.PC-FCTY-SEND-IND[PT06WIXM] = PT06W02.PC-FCTY-SEND-IND[PT06WIX2];
                                                            /* ty send flag*/
    PT06M002.PC-EXPD-HQ-COMNT1[PT06WIXM] = PT06W02.PC-EXPD-HQ-COMNT1[PT06WIX2];
    if (PT06W00.PT06-SHOW-FCTY-CMT-TRANS == "F")
      PT06W00.PT06-FCTY-RSP-IND = PT06W02.PRDTN-FCTY-RSP-IND[PT06WIX2];
      PT06W00.PT06-EXPDRESP-COMNT = PT06W02.PC-EXPDRESP-COMNT1[PT06WIX2];
      PT06M002.PT06-FCTY-CMT-TRANS[PT06WIXM] = PT06W00.PT06-FCTY-CMT;
    else
      PT06W00.PT06-CARR-CD = PT06W02.TS-CARR-CD[PT06WIX2];
      PT06W00.PT06-CARR-SVC-ID = PT06W02.PRDTN-CARR-SVC-ID[PT06WIX2];
      if (PT06W02.PRDTN-VESL-CLS-DT[PT06WIX2] == 0)
        PT06W00.PT06-VESL-CLS-DT = "    ";
      else
        PT06W00.PT06WDT = PT06W02.PRDTN-VESL-CLS-DT[PT06WIX2];
        PT06W00.PT06-VESL-CLS-DT = PT06W00.PT06WDT4;
      end
      if (PT06W02.TS-EST-DPRT-DT[PT06WIX2] == 0)
        PT06W00.PT06-EST-DPRT-DT = "    ";
      else
        PT06W00.PT06WDT = PT06W02.TS-EST-DPRT-DT[PT06WIX2];
        PT06W00.PT06-EST-DPRT-DT = PT06W00.PT06WDT4;
      end
      if (PT06W02.TS-EST-DEST-DT[PT06WIX2] == 0)
        PT06W00.PT06-EST-DEST-DT = "    ";
      else
        PT06W00.PT06WDT = PT06W02.TS-EST-DEST-DT[PT06WIX2];
        PT06W00.PT06-EST-DEST-DT = PT06W00.PT06WDT4;
      end
      PT06M002.PT06-FCTY-CMT-TRANS[PT06WIXM] = PT06W00.PT06-TRANS;
    end
    PT06W00.PT06WIX2 = PT06W00.PT06WIX2 + 1;
    PT06W00.PT06WIXM = PT06W00.PT06WIXM + 1;
  end
end // end PT06221

// Check attention identifier
Function PT06230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PT06W00.PT06WSWR == "Y") /* Request for data switch*/
      set PT06W02 empty;
    end

    PT06W00.PT06WSWR = "N"; /* Data request switch*/
    PT06W00.PT06WSWF = "Y"; /* Map formatted switch*/

    COMMAREA.CATOAP = " "; /* Fast path to application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PT06M002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PT06S01(); /* Purge any temporary storage*/

      XSPT001(); /* Exit to another application*/

      /* ------------------------------------------------------------*/
       /* If transfer failed, return to first map.*/
      /* ------------------------------------------------------------*/
      set PT06M002.CATOAP cursor, bold; /* Highlight*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      PTWREC.XXXMODID = "230"; /* Process name*/
    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* PF3 was pressed*/
   || converseVar.eventKey is pf5 /* PF5 was pressed*/
  )                              
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PT06M002"; /* Move in map name for help*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      PT06231(); /* Update temporary storage for map1*/

      PT06W00.PT06WIXM = 1;
      while (PT06W00.PT06WIXM <= 70 && PT06W00.PT06MPAG[PT06WIXM] != 0)
        PT06W00.PT06MSEL[PT06WIXM] = " ";
        PT06W00.PT06MPAG[PT06WIXM] = 0;

        PT06W00.PT06WIXM = PT06W00.PT06WIXM + 1;
      end

      /* OVE 'Y' TO PT06W00.PT06WSWR;      /* Data request switch*/

      PT06W00.PT06WMAP = "1"; /* Indicate map 1*/
      PT06W00.PT06WSWF = "Y"; /* Map formatted switch*/

      exit stack; /* Exit to redisplay map*/

    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "PT0M"; /* Move to 'PT0M' application*/
    end

    PT06S01(); /* Purge any temporary storage*/

    XSPT001(); /* Exit to another application*/

      /* ------------------------------------------------------------*/
       /* If transfer failed, return to first map.*/
      /* ------------------------------------------------------------*/
    set PT06M002.CATOAP cursor, bold; /* Highlight*/

    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* ENTER was not pressed*/
   || converseVar.eventKey is pf7   
   || converseVar.eventKey is pf8   
   || converseVar.eventKey is pf13)

    if (converseVar.eventKey is enter)

      PT06W00.PT06WLSW = "Y"; /* Data update switch*/

    end
  else

    PTWREC.XXXMODID = "230"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PT06230

// Update temp storage for map1
Function PT06231()
     /* ----------------------------------------------------------------*/
      /* Update temporary storage for map PT06M001.*/
     /* ----------------------------------------------------------------*/
  PT06W00.PT06WPAG = 1; /* start with page 1*/
  PT06W00.PT06WIX3 = 1; /* index for map2 temp storage*/

  while (PT06W00.PT06WPAG <= PT06W00.TA5TSQIX) /* go thru all the pages*/

    if (PT06W00.PT06WPAG in PT06W00.PT06MPAG)

      PT06W00.XXXTSPAG = PT06W00.PT06WPAG; /* desired page*/
      PT06S03(); /* obtain page from storage*/

      PT06W00.PT06WIX2 = sysVar.arrayIndex; /* index for select table*/
      PT06W00.PT06WIXM = 1;
      while (PT06W00.PT06WIXM <= PT06W00.MAP1-NBR-ROWS)

        if (PT06W00.PT06MSEL[PT06WIX2] == "S")
          PT06W01.PC-DROPDEAD-RTA-DT[PT06WIXM] = PT06W02.PC-DROPDEAD-RTA-DT[PT06WIX3];
          PT06W01.PC-FCTY-SEND-IND[PT06WIXM] = PT06W02.PC-FCTY-SEND-IND[PT06WIX3];
          PT06W01.PC-EXPD-HQ-COMNT1[PT06WIXM] = PT06W02.PC-EXPD-HQ-COMNT1[PT06WIX3];
          PT06W01.PC-EXPD-TRNS-COMNT[PT06WIXM] = PT06W02.PC-EXPD-TRNS-COMNT[PT06WIX3];
          PT06W01.PT06MSEL[PT06WIXM] = "V";

          PT06W00.PT06WIX3 = PT06W00.PT06WIX3 + 1;
        end

        PT06W00.PT06WIXM = PT06W00.PT06WIXM + 1;
        PT06W00.PT06WIX2 = PT06W00.PT06WIX2 + 1;
      end /* while*/

      PT06S02(); /* update temporary storage page*/

    end /* if*/
    PT06W00.PT06WPAG = PT06W00.PT06WPAG + 1;
  end /* while*/


end // end PT06231

// Reset highlighted fields
Function PT06240()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to defined intensity.*/
   /* ------------------------------------------------------------*/

  set PT06M002.PT06MDRT[1] cursor, normal; /* drop dead rta*/
  set PT06M002.PC-FCTY-SEND-IND[1] normal; /* fcty send flag*/
  set PT06M002.PC-EXPD-HQ-COMNT1[1] normal; /* hq comment*/


  set PT06M002.CATOAP initialAttributes; /* Commarea TO application*/
  set PT06M002.CAITEM initialAttributes; /* Commarea application data*/


end // end PT06240

// Verify data that was entered
Function PT06250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  if (COMMAREA.CAITEM > " ") /* Application data entered*/

    PTWREC.XXXMODID = "250"; /* Module identification*/
    set PT06M002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine if a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    PT06251();
  else
   /* ------------------------------------------------------------*/
   /* If pf13 return.*/
   /* ------------------------------------------------------------*/
    if (converseVar.eventKey is pf13)
      return;
    else
   /* ------------------------------------------------------------*/
   /* Verify all enterable fields for add/update*/
   /* ------------------------------------------------------------*/
      if (PT06W00.PT06WLSW == "Y") /* If update*/
        PT06W00.PT06WIXM = 1;
        while (PT06W00.PT06WIXM <= PT06W00.MAP2-NBR-ROWS
         && PT06M002.PT06MPOD[PT06WIXM] > 0)

          PT06252(); /* Verify fields entered*/
          PT06W00.PT06WIXM = PT06W00.PT06WIXM + 1;

        end

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end PT06250

// Verify scroll request
Function PT06251()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PT06W00.PT06WCNT == 1)      /* and no previous pages*/

    PTWREC.XXXMODID = "251"; /* Module identification*/
    converseLib.validationFailed(77); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward request*/
    PT06W00.PT06WIXM = PT06W00.PT06WIX4 - PT06W00.PT06WCNT;
    if (PT06W00.PT06WIXM < 7) /* and no more pages*/

      PTWREC.XXXMODID = "251"; /* Module identification*/
      converseLib.validationFailed(78); /* No more pages to display*/

    end
  end

end // end PT06251

// Verify key
Function PT06252()
   /* ------------------------------------------------------------*/
    /* Verify enough of a key has been entered.*/
   /* ------------------------------------------------------------*/

  if (PT06M002.PT06MDRT[PT06WIXM] == "      ") /* Drop dead RTA*/

    set PT06M002.PT06MDRT[PT06WIXM] cursor, bold; /* Highlight*/

    converseLib.validationFailed(116); /* Indicate ONE must be entered*/
    PTWREC.XXXMODID = "252"; /* Module identification*/

    exit stack; /* Return to display map*/

  end

  if (PT06M002.PC-FCTY-SEND-IND[PT06WIXM] == " " /* Factory send flag*/
  )                                             
    set PT06M002.PC-FCTY-SEND-IND[PT06WIXM] cursor, bold; /* Highlight*/

    converseLib.validationFailed(116); /* Indicate ONE must be entered*/
    PTWREC.XXXMODID = "252"; /* Module identification*/

    exit stack; /* Return to display map*/

  end

end // end PT06252

// Process valid input request
Function PT06260()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  PT06W00.PT06WSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If scroll backward, decrement index*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7)
    set PT06M002 initial;
    PT06W00.PT06WCNT = PT06W00.PT06WCNT - PT06W00.MAP2-NBR-ROWS;

    return;
  end

   /* ------------------------------------------------------------*/
   /* If scroll forward, increment index*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8)
    set PT06M002 initial;
    PT06W00.PT06WCNT = PT06W00.PT06WCNT + PT06W00.MAP2-NBR-ROWS;

    return;
  end

   /* ------------------------------------------------------------*/
   /* If pf13 flip between factory comnt and transportation info*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13)
    if (PT06W00.PT06-SHOW-FCTY-CMT-TRANS == "F")
      PT06W00.PT06-SHOW-FCTY-CMT-TRANS = "T";
    else
      PT06W00.PT06-SHOW-FCTY-CMT-TRANS = "F";
    end
    return;
  end

   /* ------------------------------------------------------------*/
   /* If updating a row*/
   /* ------------------------------------------------------------*/
  if (PT06W00.PT06WLSW == "Y")
   /* ------------------------------------------------------------*/
   /* Update temporary storage   (for map002)*/
   /* ------------------------------------------------------------*/
    PT06W00.PT06WPNT = PT06M002.XXXTSPAG * PT06W00.MAP2-NBR-ROWS - 6;
    PT06W00.PT06WIX2 = 1;
    while (PT06W00.PT06WIX2 <= PT06W00.MAP2-NBR-ROWS
     && PT06M002.PT06MPOD[PT06WIX2] > 0)
     /* MOVE PT06W02.PT06WIXT(PT06WIX2) TO PT06W00.PT06WPNT;*/

      PT06W02.PC-FCTY-SEND-IND[PT06WPNT] = PT06M002.PC-FCTY-SEND-IND[PT06WIX2];
      PT06W02.PT06WDT = PT06W02.PC-DROPDEAD-RTA-DT[PT06WIX2];
      PT06W02.PT06WDT6 = PT06M002.PT06MDRT[PT06WIX2];
      if (PT06W02.PT06WDT2 < 50) /* when year < 50 century = 20*/
        PT06W02.PT06WDT3 = 20;
      else
        PT06W02.PT06WDT3 = 19;
      end
      PT06W02.PC-DROPDEAD-RTA-DT[PT06WPNT] = PT06W02.PT06WDT;

      set TA2REC empty;
      TA2REC.TA2GRTYP = "G";
      TA2REC.TA2GRGGN = PT06W02.PT06WDT;
      TA2REC.TA2DYAOD = -10;
      PT06S04(); /* calculates dropdead date - 10*/

      if (TA2REC.TA2RTNCD != 0)
        converseLib.validationFailed(106);
        PTWREC.XXXMODID = "260";
        set PT06M002.PT06MDRT[PT06WIX2] cursor, bold;
        return;
      else
        PT06W00.PC-DROPDEAD-RTA-DT = TA2REC.TA2GRGGN;
        if (PT06W02.PC-ETAL-DT[PT06WPNT] <= PT06W00.PC-DROPDEAD-RTA-DT)
          PT06W02.PC-FCTY-SEND-IND[PT06WPNT] = "D";
        end
      end

      PT06W02.PC-EXPD-HQ-COMNT1[PT06WPNT] = PT06M002.PC-EXPD-HQ-COMNT1[PT06WIX2];
      PT06W02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/

      PT06261();

      PT06W00.PT06WIX2 = PT06W00.PT06WIX2 + 1;
      PT06W00.PT06WPNT = PT06W00.PT06WPNT + 1;
    end
   /* ------------------------------------------------------------*/
   /* Commit all changes made to protected resources.*/
   /* ------------------------------------------------------------*/
    PTWREC.XXXMODID = "260";
    PTWREC.XXXMSGNO = 128;

    VGVar.handleSysLibraryErrors = 1;
    sysLib.commit(); /* Commit all changes*/

  end


end // end PT06260

// updating VFEXPD01
Function PT06261()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set VFEXPD03 empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format copybook.*/
   /* ------------------------------------------------------------*/
  VFEXPD03.PC3BUYMO = PT06W02.PC3BUYMO[PT06WPNT]; /* Po buy month*/
  VFEXPD03.PG1SC4CD = PT06W02.PG1SC4CD[PT06WPNT]; /* Scheduler code*/
  VFEXPD03.FY1FCTYC = PT06W02.FY1FCTYC[PT06WPNT]; /* Factory code*/
  VFEXPD03.SY1STNBR = PT06W02.SY1STNBR[PT06WPNT]; /* Style number*/
  VFEXPD03.SY2CLRID = PT06W02.SY2CLRID[PT06WPNT]; /* Color id*/
  VFEXPD03.XDMCD = PT06W02.XDMCD[PT06WPNT]; /* Dimension*/
  VFEXPD03.XWHCD = PT06W02.XWHCD[PT06WPNT]; /* Warehouse code*/
  VFEXPD03.PC2CUXID = PT06W02.PC2CUXID[PT06WPNT]; /* Customer xref*/
  VFEXPD03.YSMXDV = PT06W02.YSMXDV[PT06WPNT]; /* Division code*/
  VFEXPD03.PT3YYMM = PT06W02.PT3YYMM[PT06WPNT]; /* Par month*/
  VFEXPD03.PC6PLAN = PT06W02.PC6PLAN[PT06WPNT]; /* Po plan nbr*/

   /* OVE PT06M002.PT06MDDR(PT06WPNT) TO PT06W02.PT06WDT4;*/
  VFEXPD03.PC-DROPDEAD-RTA-DT = PT06W02.PT06WDT;
  VFEXPD03.PC-FCTY-SEND-IND = PT06W02.PC-FCTY-SEND-IND[PT06WPNT];
  if (VFEXPD03.PC-FCTY-SEND-IND == "Y")
    if (PT06W02.PC-ETAL-DT[PT06WPNT] >= VFEXPD03.PC-DROPDEAD-RTA-DT)
      VFEXPD03.PC-EXPD-PRTY-IND = "A";
    else
      VFEXPD03.PC-EXPD-PRTY-IND = "B";
    end
  else
    VFEXPD03.PC-EXPD-PRTY-IND = " ";
  end
  VFEXPD03.PC-EXPD-HQ-COMNT1 = PT06W02.PC-EXPD-HQ-COMNT1[PT06WPNT];
  if (PT06W02.PC-EXPD-HQ-COMNT1[PT06WPNT] != " ")
    VFEXPD03.PC-HQ-COMNT-DT = XX0XW01.XX0XWDAT;
  end
  VFEXPD03.PC-EXPD-TRNS-COMNT = PT06W02.PC-EXPD-TRNS-COMNT[PT06WPNT];
  VFEXPD03.TS-CARR-CD = PT06W02.TS-CARR-CD[PT06WPNT];
  VFEXPD03.PRDTN-CARR-SVC-ID = PT06W02.PRDTN-CARR-SVC-ID[PT06WPNT];
  VFEXPD03.PRDTN-VESL-CLS-DT = PT06W02.PRDTN-VESL-CLS-DT[PT06WPNT];
  VFEXPD03.TS-EST-DPRT-DT = PT06W02.TS-EST-DPRT-DT[PT06WPNT];
  VFEXPD03.TS-EST-DEST-DT = PT06W02.TS-EST-DEST-DT[PT06WPNT];
  VFEXPD03.PRDTN-FCTY-RSP-IND = PT06W02.PRDTN-FCTY-RSP-IND[PT06WPNT];
  VFEXPD03.PC-ITM-SEQ-NBR = PT06W02.PC-ITM-SEQ-NBR[PT06WPNT];
  VFEXPD03.ZZZCHGDT = XX0XW01.XX0XWDAT;

   /* ------------------------------------------------------------*/
   /* Update the old row in the table.*/
   /* ------------------------------------------------------------*/
  /*  */
  /* **************************** Y2K OUT BEGIN *****************************/
  /*  */
  /* CALL VFEXPD03 'U ',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;/* Update row*/
  /*  */
  /* **************************** Y2K OUT END *******************************/
  /*  */
  /*  */
  /* **************************** Y2K IN BEGIN ******************************/
  /*  */
  try
    call "VFEXPD04" ("U ", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  /*  */
  /* **************************** Y2K IN END ********************************/
  /*  */
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
    )                           
      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PTWREC.XXXMODID = "261"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(8); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFEXPD03"; /* Table view name*/
  TA1REC.TA1TBLKE = VFEXPD03.VFEXPD03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT06261

// Purge any temporary storage
Function PT06S01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PT06W01 empty; /* M001 display storage*/

  PT06W00.PT06WSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PT06W00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PT06W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PTWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* System error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT06S01

// Update storage page
Function PT06S02()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  PT06W01.XXXTSLEN = PT06W00.XXXTSLEN; /* page length*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PT06W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PTWREC.XXXMODID = "S02"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT06S02

// Read temporary storage page
Function PT06S03()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PT06W01.XXXTSLEN = PT06W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PT06W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PT06W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PTWREC.XXXMODID = "S03"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PTWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PT06S03

// rta date validation ccyymmdd
Function PT06S04()

   /* ------------------------------------------------------------*/
   /* validate/format CCYYMMDD*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* option*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call successful*/
   || TA2REC.TA2RTNCD >= 888)        /* and subroutine completed*/

    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "PT06S04 DATE EDIT CCYYMMDD";

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    PTWREC.XXXMODID = "S04"; /* Module identification*/
    converseLib.validationFailed(81); /* System error occurred*/

    exit stack; /* exit to display map*/

  end


end // end PT06S04

// Select DPRODC.VFEXPD03 'S1'
Function PT06S11()

  if (PTWREC.PT05MSRT == "1")
  /*  */
  /* ******************************** Y2K OUT BEGIN *************************/
  /*  */
  /* CALL VFEXPD03 'SA',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ******************************** Y2K OUT END ***************************/
  /*  */
  /*  */
  /* ******************************** Y2K IN BEGIN **************************/
  /*  */
    try
      call "VFEXPD04" ("SA", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
    end
  /*  */
  /* ******************************** Y2K IN END ****************************/
  /*  */
  else

    if (PTWREC.PT05MSRT == "2")
  /*  */
  /* ******************************** Y2K OUT BEGIN *************************/
  /*  */
  /* CALL VFEXPD03 'SB',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ******************************** Y2K OUT END ***************************/
  /*  */
  /*  */
  /* ******************************** Y2K IN BEGIN **************************/
  /*  */
      try
        call "VFEXPD04" ("SB", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
      end
  /*  */
  /* ******************************** Y2K IN END ****************************/
  /*  */
    else

      if (PTWREC.PT05MSRT == "3")
  /*  */
  /* ******************************** Y2K OUT BEGIN *************************/
  /*  */
  /* CALL VFEXPD03 'SC',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ******************************** Y2K OUT END ***************************/
  /*  */
  /*  */
  /* ******************************** Y2K IN BEGIN **************************/
  /*  */
        try
          call "VFEXPD04" ("SC", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
        end
  /*  */
  /* ******************************** Y2K IN END ****************************/
  /*  */
      else

        if (PTWREC.PT05MSRT == "4")
  /*  */
  /* ******************************** Y2K OUT BEGIN *************************/
  /*  */
  /* CALL VFEXPD03 'SD',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ******************************** Y2K OUT END ***************************/
  /*  */
  /*  */
  /* ******************************** Y2K IN BEGIN **************************/
  /*  */
          try
            call "VFEXPD04" ("SD", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
          end
  /*  */
  /* ******************************** Y2K IN END ****************************/
  /*  */
        else

          if (PTWREC.PT05MSRT == "5")
  /*  */
  /* ******************************** Y2K OUT BEGIN *************************/
  /*  */
  /* CALL VFEXPD03 'SE',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ******************************** Y2K OUT END ***************************/
  /*  */
  /*  */
  /* ******************************** Y2K IN BEGIN **************************/
  /*  */
            try
              call "VFEXPD04" ("SE", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
            end
  /*  */
  /* ******************************** Y2K IN END ****************************/
  /*  */
          end
        end
      end
    end
  end
end // end PT06S11

// Fetch DPRODC.VFEXPD03 'N1'
Function PT06S12()

  if (PTWREC.PT05MSRT == "1")
  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* CALL VFEXPD03 'NA',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
  /*  */
  /* ***************************** Y2K IN BEGIN *****************************/
  /*  */
    try
      call "VFEXPD04" ("NA", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
    end
  /*  */
  /* ***************************** Y2K IN END *******************************/
  /*  */
  else

    if (PTWREC.PT05MSRT == "2")
  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* CALL VFEXPD03 'NB',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
  /*  */
  /* ***************************** Y2K IN BEGIN *****************************/
  /*  */
      try
        call "VFEXPD04" ("NB", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
      end
  /*  */
  /* ***************************** Y2K IN END *******************************/
  /*  */
    else

      if (PTWREC.PT05MSRT == "3")
  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* CALL VFEXPD03 'NC',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
  /*  */
  /* ***************************** Y2K IN BEGIN *****************************/
  /*  */
        try
          call "VFEXPD04" ("NC", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
        end
  /*  */
  /* ***************************** Y2K IN END *******************************/
  /*  */
      else

        if (PTWREC.PT05MSRT == "4")
  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* CALL VFEXPD03 'ND',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
  /*  */
  /* ***************************** Y2K IN BEGIN *****************************/
  /*  */
          try
            call "VFEXPD04" ("ND", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
          end
  /*  */
  /* ***************************** Y2K IN END *******************************/
  /*  */
        else

          if (PTWREC.PT05MSRT == "5")
  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* CALL VFEXPD03 'NE',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
  /*  */
  /* ***************************** Y2K IN BEGIN *****************************/
  /*  */
            try
              call "VFEXPD04" ("NE", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
            end
  /*  */
  /* ***************************** Y2K IN END *******************************/
  /*  */
          end
        end
      end
    end
  end
end // end PT06S12

// Close DPRODC.VFEXPD03 'C1'
Function PT06S13()

  if (PTWREC.PT05MSRT == "1")
  /*  */
  /* ******************************* Y2K OUT BEGIN **************************/
  /*  */
  /* CALL VFEXPD03 'CA',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ******************************* Y2K OUT END ****************************/
  /*  */
  /*  */
  /* ******************************* Y2K IN BEGIN ***************************/
  /*  */
    try
      call "VFEXPD04" ("CA", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
    end
  /*  */
  /* ******************************* Y2K IN END *****************************/
  /*  */
  else

    if (PTWREC.PT05MSRT == "2")
  /*  */
  /* ******************************* Y2K OUT BEGIN **************************/
  /*  */
  /* CALL VFEXPD03 'CB',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ******************************* Y2K OUT END ****************************/
  /*  */
  /*  */
  /* ******************************* Y2K IN BEGIN ***************************/
  /*  */
      try
        call "VFEXPD04" ("CB", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
      end
  /*  */
  /* ******************************* Y2K IN END *****************************/
  /*  */
    else

      if (PTWREC.PT05MSRT == "3")
  /*  */
  /* ******************************* Y2K OUT BEGIN **************************/
  /*  */
  /* CALL VFEXPD03 'CC',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ******************************* Y2K OUT END ****************************/
  /*  */
  /*  */
  /* ******************************* Y2K IN BEGIN ***************************/
  /*  */
        try
          call "VFEXPD04" ("CC", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
        end
  /*  */
  /* ******************************* Y2K IN END *****************************/
  /*  */
      else

        if (PTWREC.PT05MSRT == "4")
  /*  */
  /* ******************************* Y2K OUT BEGIN **************************/
  /*  */
  /* CALL VFEXPD03 'CD',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ******************************* Y2K OUT END ****************************/
  /*  */
  /*  */
  /* ******************************* Y2K IN BEGIN ***************************/
  /*  */
          try
            call "VFEXPD04" ("CD", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
          end
  /*  */
  /* ******************************* Y2K IN END *****************************/
  /*  */
        else

          if (PTWREC.PT05MSRT == "5")
  /*  */
  /* ******************************* Y2K OUT BEGIN **************************/
  /*  */
  /* CALL VFEXPD03 'CE',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ******************************* Y2K OUT END ****************************/
  /*  */
  /*  */
  /* ******************************* Y2K IN BEGIN ***************************/
  /*  */
            try
              call "VFEXPD04" ("CE", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
            end
  /*  */
  /* ******************************* Y2K IN END *****************************/
  /*  */
          end
        end
      end
    end
  end
end // end PT06S13

// Select DPRODC.VFEXPD01 'S2'
Function PT06S21()

  if (PTWREC.PT05MSRT == "1")
  /*  */
  /* ******************************* Y2K OUT BEGIN **************************/
  /*  */
  /* CALL VFEXPD03 'SF',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ******************************* Y2K OUT END ****************************/
  /*  */
  /*  */
  /* ******************************* Y2K IN BEGIN ***************************/
  /*  */
    try
      call "VFEXPD04" ("SF", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
    end
  /*  */
  /* ******************************* Y2K IN END *****************************/
  /*  */
  else

    if (PTWREC.PT05MSRT == "2")
  /*  */
  /* ******************************* Y2K OUT BEGIN **************************/
  /*  */
  /* CALL VFEXPD03 'SG',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ******************************* Y2K OUT END ****************************/
  /*  */
  /*  */
  /* ******************************* Y2K IN BEGIN ***************************/
  /*  */
      try
        call "VFEXPD04" ("SG", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
      end
  /*  */
  /* ******************************* Y2K IN END *****************************/
  /*  */
    else

      if (PTWREC.PT05MSRT == "3")
  /*  */
  /* ******************************* Y2K OUT BEGIN **************************/
  /*  */
  /* CALL VFEXPD03 'SH',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ******************************* Y2K OUT END ****************************/
  /*  */
  /*  */
  /* ******************************* Y2K IN BEGIN ***************************/
  /*  */
        try
          call "VFEXPD04" ("SH", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
        end
  /*  */
  /* ******************************* Y2K IN END *****************************/
  /*  */
      else

        if (PTWREC.PT05MSRT == "4")
  /*  */
  /* ******************************* Y2K OUT BEGIN **************************/
  /*  */
  /* CALL VFEXPD03 'SI',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ******************************* Y2K OUT END ****************************/
  /*  */
  /*  */
  /* ******************************* Y2K IN BEGIN ***************************/
  /*  */
          try
            call "VFEXPD04" ("SI", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
          end
  /*  */
  /* ******************************* Y2K IN END *****************************/
  /*  */
        else

          if (PTWREC.PT05MSRT == "5")
  /*  */
  /* ******************************* Y2K OUT BEGIN **************************/
  /*  */
  /* CALL VFEXPD03 'SJ',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ******************************* Y2K OUT END ****************************/
  /*  */
  /*  */
  /* ******************************* Y2K IN BEGIN ***************************/
  /*  */
            try
              call "VFEXPD04" ("SJ", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
            end
  /*  */
  /* ******************************* Y2K IN END *****************************/
  /*  */
          end
        end
      end
    end
  end
end // end PT06S21

// Fetch DPRODC.VFEXPD03 'N2'
Function PT06S22()

  if (PTWREC.PT05MSRT == "1")
  /*  */
  /* *************************** Y2K OUT BEGIN ******************************/
  /*  */
  /* CALL VFEXPD03 'NF',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* *************************** Y2K OUT END ********************************/
  /*  */
  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
    try
      call "VFEXPD04" ("NF", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
    end
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
  else

    if (PTWREC.PT05MSRT == "2")
  /*  */
  /* *************************** Y2K OUT BEGIN ******************************/
  /*  */
  /* CALL VFEXPD03 'NG',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* *************************** Y2K OUT END ********************************/
  /*  */
  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
      try
        call "VFEXPD04" ("NG", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
      end
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
    else

      if (PTWREC.PT05MSRT == "3")
  /*  */
  /* *************************** Y2K OUT BEGIN ******************************/
  /*  */
  /* CALL VFEXPD03 'NH',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* *************************** Y2K OUT END ********************************/
  /*  */
  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
        try
          call "VFEXPD04" ("NH", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
        end
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
      else

        if (PTWREC.PT05MSRT == "4")
  /*  */
  /* *************************** Y2K OUT BEGIN ******************************/
  /*  */
  /* CALL VFEXPD03 'NI',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* *************************** Y2K OUT END ********************************/
  /*  */
  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
          try
            call "VFEXPD04" ("NI", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
          end
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
        else

          if (PTWREC.PT05MSRT == "5")
  /*  */
  /* *************************** Y2K OUT BEGIN ******************************/
  /*  */
  /* CALL VFEXPD03 'NJ',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* *************************** Y2K OUT END ********************************/
  /*  */
  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
            try
              call "VFEXPD04" ("NJ", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
            end
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
          end
        end
      end
    end
  end
end // end PT06S22

// Close DPRODC.VFEXPD03 'C2'
Function PT06S23()

  if (PTWREC.PT05MSRT == "1")
  /*  */
  /* ****************************** Y2K OUT BEGIN ***************************/
  /*  */
  /* CALL VFEXPD03 'CF',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ****************************** Y2K OUT END *****************************/
  /*  */
  /*  */
  /* ****************************** Y2K IN BEGIN ****************************/
  /*  */
    try
      call "VFEXPD04" ("CF", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
    end
  /*  */
  /* ****************************** Y2K IN END ******************************/
  /*  */
  else

    if (PTWREC.PT05MSRT == "2")
  /*  */
  /* ****************************** Y2K OUT BEGIN ***************************/
  /*  */
  /* CALL VFEXPD03 'CG',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ****************************** Y2K OUT END *****************************/
  /*  */
  /*  */
  /* ****************************** Y2K IN BEGIN ****************************/
  /*  */
      try
        call "VFEXPD04" ("CG", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
      end
  /*  */
  /* ****************************** Y2K IN END ******************************/
  /*  */
    else

      if (PTWREC.PT05MSRT == "3")
  /*  */
  /* ****************************** Y2K OUT BEGIN ***************************/
  /*  */
  /* CALL VFEXPD03 'CH',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ****************************** Y2K OUT END *****************************/
  /*  */
  /*  */
  /* ****************************** Y2K IN BEGIN ****************************/
  /*  */
        try
          call "VFEXPD04" ("CH", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
        end
  /*  */
  /* ****************************** Y2K IN END ******************************/
  /*  */
      else

        if (PTWREC.PT05MSRT == "4")
  /*  */
  /* ****************************** Y2K OUT BEGIN ***************************/
  /*  */
  /* CALL VFEXPD03 'CI',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ****************************** Y2K OUT END *****************************/
  /*  */
  /*  */
  /* ****************************** Y2K IN BEGIN ****************************/
  /*  */
          try
            call "VFEXPD04" ("CI", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
          end
  /*  */
  /* ****************************** Y2K IN END ******************************/
  /*  */
        else

          if (PTWREC.PT05MSRT == "5")
  /*  */
  /* ****************************** Y2K OUT BEGIN ***************************/
  /*  */
  /* CALL VFEXPD03 'CJ',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ****************************** Y2K OUT END *****************************/
  /*  */
  /*  */
  /* ****************************** Y2K IN BEGIN ****************************/
  /*  */
            try
              call "VFEXPD04" ("CJ", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
            end
  /*  */
  /* ****************************** Y2K IN END ******************************/
  /*  */
          end
        end
      end
    end
  end
end // end PT06S23

// Select DPRODC.VFEXPD03 'S3'
Function PT06S31()

  if (PTWREC.PT05MSRT == "1")
  /*  */
  /* *************************** Y2K OUT BEGIN ******************************/
  /*  */
  /* CALL VFEXPD03 'SK',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* *************************** Y2K OUT END ********************************/
  /*  */
  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
    try
      call "VFEXPD04" ("SK", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
    end
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
  else

    if (PTWREC.PT05MSRT == "2")
  /*  */
  /* *************************** Y2K OUT BEGIN ******************************/
  /*  */
  /* CALL VFEXPD03 'SL',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* *************************** Y2K OUT END ********************************/
  /*  */
  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
      try
        call "VFEXPD04" ("SL", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
      end
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
    else

      if (PTWREC.PT05MSRT == "3")
  /*  */
  /* *************************** Y2K OUT BEGIN ******************************/
  /*  */
  /* CALL VFEXPD03 'SM',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* *************************** Y2K OUT END ********************************/
  /*  */
  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
        try
          call "VFEXPD04" ("SM", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
        end
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
      else

        if (PTWREC.PT05MSRT == "4")
  /*  */
  /* *************************** Y2K OUT BEGIN ******************************/
  /*  */
  /* CALL VFEXPD03 'SN',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* *************************** Y2K OUT END ********************************/
  /*  */
  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
          try
            call "VFEXPD04" ("SN", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
          end
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
        else

          if (PTWREC.PT05MSRT == "5")
  /*  */
  /* *************************** Y2K OUT BEGIN ******************************/
  /*  */
  /* CALL VFEXPD03 'SO',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* *************************** Y2K OUT END ********************************/
  /*  */
  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
            try
              call "VFEXPD04" ("SO", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
            end
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
          end
        end
      end
    end
  end
end // end PT06S31

// Fetch DPRODC.VFEXPD03 'N3'
Function PT06S32()

  if (PTWREC.PT05MSRT == "1")
  /*  */
  /* ******************************** Y2K OUT BEGIN *************************/
  /*  */
  /* CALL VFEXPD03 'NK',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ******************************** Y2K OUT END ***************************/
  /*  */
  /*  */
  /* ******************************** Y2K IN BEGIN **************************/
  /*  */
    try
      call "VFEXPD04" ("NK", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
    end
  /*  */
  /* ******************************** Y2K IN END ****************************/
  /*  */
  else

    if (PTWREC.PT05MSRT == "2")
  /*  */
  /* ******************************** Y2K OUT BEGIN *************************/
  /*  */
  /* CALL VFEXPD03 'NL',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ******************************** Y2K OUT END ***************************/
  /*  */
  /*  */
  /* ******************************** Y2K IN BEGIN **************************/
  /*  */
      try
        call "VFEXPD04" ("NL", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
      end
  /*  */
  /* ******************************** Y2K IN END ****************************/
  /*  */
    else

      if (PTWREC.PT05MSRT == "3")
  /*  */
  /* ******************************** Y2K OUT BEGIN *************************/
  /*  */
  /* CALL VFEXPD03 'NM',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ******************************** Y2K OUT END ***************************/
  /*  */
  /*  */
  /* ******************************** Y2K IN BEGIN **************************/
  /*  */
        try
          call "VFEXPD04" ("NM", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
        end
  /*  */
  /* ******************************** Y2K IN END ****************************/
  /*  */
      else

        if (PTWREC.PT05MSRT == "4")
  /*  */
  /* ******************************** Y2K OUT BEGIN *************************/
  /*  */
  /* CALL VFEXPD03 'NN',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ******************************** Y2K OUT END ***************************/
  /*  */
  /*  */
  /* ******************************** Y2K IN BEGIN **************************/
  /*  */
          try
            call "VFEXPD04" ("NN", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
          end
  /*  */
  /* ******************************** Y2K IN END ****************************/
  /*  */
        else

          if (PTWREC.PT05MSRT == "5")
  /*  */
  /* ******************************** Y2K OUT BEGIN *************************/
  /*  */
  /* CALL VFEXPD03 'NO',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ******************************** Y2K OUT END ***************************/
  /*  */
  /*  */
  /* ******************************** Y2K IN BEGIN **************************/
  /*  */
            try
              call "VFEXPD04" ("NO", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
            end
  /*  */
  /* ******************************** Y2K IN END ****************************/
  /*  */
          end
        end
      end
    end
  end
end // end PT06S32

// Close DPRODC.VFEXPD03 'C3'
Function PT06S33()

  if (PTWREC.PT05MSRT == "1")
  /*  */
  /* **************************** Y2K OUT BEGIN *****************************/
  /*  */
  /* CALL VFEXPD03 'CK',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* **************************** Y2K OUT END *******************************/
  /*  */
  /*  */
  /* **************************** Y2K IN BEGIN ******************************/
  /*  */
    try
      call "VFEXPD04" ("CK", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
    end
  /*  */
  /* **************************** Y2K IN END ********************************/
  /*  */
  else

    if (PTWREC.PT05MSRT == "2")
  /*  */
  /* **************************** Y2K OUT BEGIN *****************************/
  /*  */
  /* CALL VFEXPD03 'CL',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* **************************** Y2K OUT END *******************************/
  /*  */
  /*  */
  /* **************************** Y2K IN BEGIN ******************************/
  /*  */
      try
        call "VFEXPD04" ("CL", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
      end
  /*  */
  /* **************************** Y2K IN END ********************************/
  /*  */
    else

      if (PTWREC.PT05MSRT == "3")
  /*  */
  /* **************************** Y2K OUT BEGIN *****************************/
  /*  */
  /* CALL VFEXPD03 'CM',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* **************************** Y2K OUT END *******************************/
  /*  */
  /*  */
  /* **************************** Y2K IN BEGIN ******************************/
  /*  */
        try
          call "VFEXPD04" ("CM", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
        end
  /*  */
  /* **************************** Y2K IN END ********************************/
  /*  */
      else

        if (PTWREC.PT05MSRT == "4")
  /*  */
  /* **************************** Y2K OUT BEGIN *****************************/
  /*  */
  /* CALL VFEXPD03 'CN',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* **************************** Y2K OUT END *******************************/
  /*  */
  /*  */
  /* **************************** Y2K IN BEGIN ******************************/
  /*  */
          try
            call "VFEXPD04" ("CN", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
          end
  /*  */
  /* **************************** Y2K IN END ********************************/
  /*  */
        else

          if (PTWREC.PT05MSRT == "5")
  /*  */
  /* **************************** Y2K OUT BEGIN *****************************/
  /*  */
  /* CALL VFEXPD03 'CO',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* **************************** Y2K OUT END *******************************/
  /*  */
  /*  */
  /* **************************** Y2K IN BEGIN ******************************/
  /*  */
            try
              call "VFEXPD04" ("CO", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
            end
  /*  */
  /* **************************** Y2K IN END ********************************/
  /*  */
          end
        end
      end
    end
  end
end // end PT06S33

// Select DPRODC.VFEXPD03 'S4'
Function PT06S41()

  if (PTWREC.PT05MSRT == "1")
  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* CALL VFEXPD03 'SP',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
    try
      call "VFEXPD04" ("SP", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
    end
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
  else

    if (PTWREC.PT05MSRT == "2")
  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* CALL VFEXPD03 'SQ',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
      try
        call "VFEXPD04" ("SQ", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
      end
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
    else

      if (PTWREC.PT05MSRT == "3")
  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* CALL VFEXPD03 'SR',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
        try
          call "VFEXPD04" ("SR", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
        end
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
      else

        if (PTWREC.PT05MSRT == "4")
  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* CALL VFEXPD03 'SS',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
          try
            call "VFEXPD04" ("SS", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
          end
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
        else

          if (PTWREC.PT05MSRT == "5")
  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* CALL VFEXPD03 'ST',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
            try
              call "VFEXPD04" ("ST", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
            end
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
          end
        end
      end
    end
  end
end // end PT06S41

// Fetch DPRODC.VFEXPD03 'N4'
Function PT06S42()

  if (PTWREC.PT05MSRT == "1")
  /*  */
  /* ****************************** Y2K OUT BEGIN ***************************/
  /*  */
  /* CALL VFEXPD03 'NP',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ****************************** Y2K OUT END *****************************/
  /*  */
  /*  */
  /* ****************************** Y2K IN BEGIN ****************************/
  /*  */
    try
      call "VFEXPD04" ("NP", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
    end
  /*  */
  /* ****************************** Y2K IN END ******************************/
  /*  */
  else

    if (PTWREC.PT05MSRT == "2")
  /*  */
  /* ****************************** Y2K OUT BEGIN ***************************/
  /*  */
  /* CALL VFEXPD03 'NQ',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ****************************** Y2K OUT END *****************************/
  /*  */
  /*  */
  /* ****************************** Y2K IN BEGIN ****************************/
  /*  */
      try
        call "VFEXPD04" ("NQ", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
      end
  /*  */
  /* ****************************** Y2K IN END ******************************/
  /*  */
    else

      if (PTWREC.PT05MSRT == "3")
  /*  */
  /* ****************************** Y2K OUT BEGIN ***************************/
  /*  */
  /* CALL VFEXPD03 'NR',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ****************************** Y2K OUT END *****************************/
  /*  */
  /*  */
  /* ****************************** Y2K IN BEGIN ****************************/
  /*  */
        try
          call "VFEXPD04" ("NR", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
        end
  /*  */
  /* ****************************** Y2K IN END ******************************/
  /*  */
      else

        if (PTWREC.PT05MSRT == "4")
  /*  */
  /* ****************************** Y2K OUT BEGIN ***************************/
  /*  */
  /* CALL VFEXPD03 'NS',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ****************************** Y2K OUT END *****************************/
  /*  */
  /*  */
  /* ****************************** Y2K IN BEGIN ****************************/
  /*  */
          try
            call "VFEXPD04" ("NS", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
          end
  /*  */
  /* ****************************** Y2K IN END ******************************/
  /*  */
        else

          if (PTWREC.PT05MSRT == "5")
  /*  */
  /* ****************************** Y2K OUT BEGIN ***************************/
  /*  */
  /* CALL VFEXPD03 'NT',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ****************************** Y2K OUT END *****************************/
  /*  */
  /*  */
  /* ****************************** Y2K IN BEGIN ****************************/
  /*  */
            try
              call "VFEXPD04" ("NT", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
            end
  /*  */
  /* ****************************** Y2K IN END ******************************/
  /*  */
          end
        end
      end
    end
  end
end // end PT06S42

// Close DPRODC.VFEXPD03 'C4'
Function PT06S43()

  if (PTWREC.PT05MSRT == "1")
  /*  */
  /* ****************************** Y2K OUT BEGIN ***************************/
  /*  */
  /* CALL VFEXPD03 'CP',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ****************************** Y2K OUT END *****************************/
  /*  */
  /*  */
  /* ****************************** Y2K IN BEGIN ****************************/
  /*  */
    try
      call "VFEXPD04" ("CP", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
    end
  /*  */
  /* ****************************** Y2K IN END ******************************/
  /*  */
  else

    if (PTWREC.PT05MSRT == "2")
  /*  */
  /* ****************************** Y2K OUT BEGIN ***************************/
  /*  */
  /* CALL VFEXPD03 'CQ',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ****************************** Y2K OUT END *****************************/
  /*  */
  /*  */
  /* ****************************** Y2K IN BEGIN ****************************/
  /*  */
      try
        call "VFEXPD04" ("CQ", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
      end
  /*  */
  /* ****************************** Y2K IN END ******************************/
  /*  */
    else

      if (PTWREC.PT05MSRT == "3")
  /*  */
  /* ****************************** Y2K OUT BEGIN ***************************/
  /*  */
  /* CALL VFEXPD03 'CR',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ****************************** Y2K OUT END *****************************/
  /*  */
  /*  */
  /* ****************************** Y2K IN BEGIN ****************************/
  /*  */
        try
          call "VFEXPD04" ("CR", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
        end
  /*  */
  /* ****************************** Y2K IN END ******************************/
  /*  */
      else

        if (PTWREC.PT05MSRT == "4")
  /*  */
  /* ****************************** Y2K OUT BEGIN ***************************/
  /*  */
  /* CALL VFEXPD03 'CS',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ****************************** Y2K OUT END *****************************/
  /*  */
  /*  */
  /* ****************************** Y2K IN BEGIN ****************************/
  /*  */
          try
            call "VFEXPD04" ("CS", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
          end
  /*  */
  /* ****************************** Y2K IN END ******************************/
  /*  */
        else

          if (PTWREC.PT05MSRT == "5")
  /*  */
  /* ****************************** Y2K OUT BEGIN ***************************/
  /*  */
  /* CALL VFEXPD03 'CT',SQLCA,VFEXPD03 (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ****************************** Y2K OUT END *****************************/
  /*  */
  /*  */
  /* ****************************** Y2K IN BEGIN ****************************/
  /*  */
            try
              call "VFEXPD04" ("CT", SQLCA, VFEXPD03) {isNoRefresh = yes, isExternal = yes};
            end
  /*  */
  /* ****************************** Y2K IN END ******************************/
  /*  */
          end
        end
      end
    end
  end
end // end PT06S43

//*** RECORD=PT06W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PT06W00 type basicRecord
  10 PT06WIXM PT06WIXM ; 
  10 PT06WIX2 PT06WIX2 ; 
  10 PT06WIX3 PT06WIX3 ; 
  10 PT06WIX4 PT06WIX4 ; 
  10 PT06WPNT PT06WPNT ; 
  10 PT06WCNT PT06WCNT ; 
  10 PT06WPAG PT06WPAG ; 
  10 MAP1-NBR-ROWS MAP1-NBR-ROWS ; 
  10 MAP2-NBR-ROWS MAP2-NBR-ROWS ; 
  10 PT06WDT PT06WDT ; 
    15 PT06WDT3 PT06WDT3 ; 
    15 PT06WDT6 PT06WDT6 ; 
      20 PT06WDT2 PT06WDT2 ; 
      20 PT06WDT4 PT06WDT4 ; 
  10 PT06WEOC PT06WEOC ; 
  10 * char(1) ; 
  10 PT06WSWF PT06WSWF ; 
  10 PT06WLSW PT06WLSW ; 
  10 PT06WSWR PT06WSWR ; 
  10 PT06WSWU PT06WSWU ; 
  10 PT06WMAP PT06WMAP ; 
  10 * char(1) ; 
  10 PT06WPRD PT06WPRD ; 
    15 PT05MCU1 PT05MCU1 ; 
    15 PT05MCU2 PT05MCU2 ; 
    15 PT05MCU3 PT05MCU3 ; 
    15 PT05MCU4 PT05MCU4 ; 
    15 PT05MCU5 PT05MCU5 ; 
  10 * char(1) ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 PC-DROPDEAD-RTA-DT PC-DROPDEAD-RTA-DT ; 
  10 * char(1) ; 
  10 PT06MPAG PT06MPAG [70] ; 
  10 PT06MSEL PT06MSEL [70] ; 
  10 * char(1) ; 
  10 PT06-SHOW-FCTY-CMT-TRANS PT06-SHOW-FCTY-CMT-TRANS ; 
  10 * char(1) ; 
  10 PT06-FCTY-CMT PT06-FCTY-CMT ; 
    15 PT06-FCTY-RESP-LIT PT06-FCTY-RESP-LIT ; 
    15 PT06-FCTY-RSP-IND PT06-FCTY-RSP-IND ; 
    15 * char(2) ; 
    15 PT06-EXPDRESP-COMNT PT06-EXPDRESP-COMNT ; 
    15 * char(2) ; 
  10 * char(1) ; 
  10 PT06-TRANS PT06-TRANS ; 
    15 PT06-CARR-LIT PT06-CARR-LIT ; 
    15 PT06-CARR-CD PT06-CARR-CD ; 
    15 * char(1) ; 
    15 PT06-CARR-SVC-ID PT06-CARR-SVC-ID ; 
    15 PT06-CLS-LIT PT06-CLS-LIT ; 
    15 PT06-VESL-CLS-DT PT06-VESL-CLS-DT ; 
    15 PT06-ETD-LIT PT06-ETD-LIT ; 
    15 PT06-EST-DPRT-DT PT06-EST-DPRT-DT ; 
    15 PT06-ETA-LIT PT06-ETA-LIT ; 
    15 PT06-EST-DEST-DT PT06-EST-DEST-DT ; 
end // end PT06W00

//*** RECORD=PT06W01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record PT06W01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(3360) ; 
    10 PT06MSEL PT06MSEL [14] ; 
    10 PC3BUYMO PC3BUYMO [14] ; 
    10 FY1FCTYC FY1FCTYC [14] ; 
    10 XCTCD XCTCD [14] ; 
    10 SY1STNBR SY1STNBR [14] ; 
    10 SY2CLRID SY2CLRID [14] ; 
    10 XDMCD XDMCD [14] ; 
    10 PC2CUXID PC2CUXID [14] ; 
    10 XWHCD XWHCD [14] ; 
    10 PC6PLAN PC6PLAN [14] ; 
    10 PT06MORD PT06MORD [14] ; 
    10 PT06MBTS PT06MBTS [14] ; 
    10 PT06MBLA PT06MBLA [14] ; 
    10 PT3YYMM PT3YYMM [14] ; 
    10 PC6ETSDT PC6ETSDT [14] ; 
    10 PC-ETAL-DT PC-ETAL-DT [14] ; 
    10 PC-DROPDEAD-RTA-DT PC-DROPDEAD-RTA-DT [14] ; 
    10 PC-FCTY-SEND-IND PC-FCTY-SEND-IND [14] ; 
    10 PC-EXPD-PRTY-IND PC-EXPD-PRTY-IND [14] ; 
    10 PC-EXPD-HQ-COMNT1 PC-EXPD-HQ-COMNT1 [14] ; 
    10 PC-EXPDRESP-COMNT1 PC-EXPDRESP-COMNT1 [14] ; 
    10 PC-EXPD-TRNS-COMNT PC-EXPD-TRNS-COMNT [14] ; 
    10 PG1SC4CD PG1SC4CD [14] ; 
    10 YSMXDV YSMXDV [14] ; 
    10 PRDTN-FCTY-RSP-IND PRDTN-FCTY-RSP-IND [14] ; 
    10 TS-CARR-CD TS-CARR-CD [14] ; 
    10 PRDTN-CARR-SVC-ID PRDTN-CARR-SVC-ID [14] ; 
    10 PRDTN-VESL-CLS-DT PRDTN-VESL-CLS-DT [14] ; 
    10 TS-EST-DPRT-DT TS-EST-DPRT-DT [14] ; 
    10 TS-EST-DEST-DT TS-EST-DEST-DT [14] ; 
    10 PC-ITM-SEQ-NBR PC-ITM-SEQ-NBR [14] ; 
end // end PT06W01

//*** RECORD=PT06W02 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record PT06W02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 PT06WDT PT06WDT ; 
    10 PT06WDT3 PT06WDT3 ; 
    10 PT06WDT6 PT06WDT6 ; 
      15 PT06WDT2 PT06WDT2 ; 
      15 PT06WDT4 PT06WDT4 ; 
  5 ZZZCHGDT ZZZCHGDT ; 
  5 * char(16800) ; 
    10 PT06WIXT PT06WIXT [70] ; 
    10 PC3BUYMO PC3BUYMO [70] ; 
    10 FY1FCTYC FY1FCTYC [70] ; 
    10 XCTCD XCTCD [70] ; 
    10 SY1STNBR SY1STNBR [70] ; 
    10 SY2CLRID SY2CLRID [70] ; 
    10 XDMCD XDMCD [70] ; 
    10 PC2CUXID PC2CUXID [70] ; 
    10 XWHCD XWHCD [70] ; 
    10 PC6PLAN PC6PLAN [70] ; 
    10 PT06MORD PT06MORD [70] ; 
    10 PT06MBTS PT06MBTS [70] ; 
    10 PT06MBLA PT06MBLA [70] ; 
    10 PT3YYMM PT3YYMM [70] ; 
    10 PC6ETSDT PC6ETSDT [70] ; 
    10 PC-ETAL-DT PC-ETAL-DT [70] ; 
    10 PC-DROPDEAD-RTA-DT PC-DROPDEAD-RTA-DT [70] ; 
    10 PC-FCTY-SEND-IND PC-FCTY-SEND-IND [70] ; 
    10 PC-EXPD-HQ-COMNT1 PC-EXPD-HQ-COMNT1 [70] ; 
    10 PC-EXPDRESP-COMNT1 PC-EXPDRESP-COMNT1 [70] ; 
    10 PC-EXPD-TRNS-COMNT PC-EXPD-TRNS-COMNT [70] ; 
    10 PG1SC4CD PG1SC4CD [70] ; 
    10 YSMXDV YSMXDV [70] ; 
    10 PRDTN-FCTY-RSP-IND PRDTN-FCTY-RSP-IND [70] ; 
    10 TS-CARR-CD TS-CARR-CD [70] ; 
    10 PRDTN-CARR-SVC-ID PRDTN-CARR-SVC-ID [70] ; 
    10 PRDTN-VESL-CLS-DT PRDTN-VESL-CLS-DT [70] ; 
    10 TS-EST-DPRT-DT TS-EST-DPRT-DT [70] ; 
    10 TS-EST-DEST-DT TS-EST-DEST-DT [70] ; 
    10 PC-ITM-SEQ-NBR PC-ITM-SEQ-NBR [70] ; 
end // end PT06W02

//*** RECORD=VFEXPD03 ****
// **************** FTWR EXPEDITE DATA TABLE ******************
// 
// DB2 TABLE:              DPRODC.VFEXPD03
// 
// COPYLIB MEMBER          DFEXPD03
// 
// I/O MODULE              DFEXPD03
// 
// KEY TO DB2 TABLE        PC3BUYMO,
//                         FY1FCTYC,
//                         XCTCD,
//                         SY1STNBR,
//                         SY2CLRID,
//                         XDMCD,
//                         SY1SSTNM,
//                         PC2CUXID,
//                         XWHCD,
//                         PC6TORDE,
//                         PC_TOT_BAL_SHP_QTY,
//                         PT3AVTOT,
//                         PT3YYMM,
//                         PC6RTADT,
//                         PC6ETSDT,
//                         PC6PETS,
//                         TSLTRAVL,
//                         PC_ETAL_DT,
//                         PC_DD_RQT_ARVDT,
//                         PC_FCTY_SEND_IND,
//                         PC_NEW_LINE_FL,
//                         PC_EXPD_HQ_COMNT1,
//                         PC_EXPD_HQ_COMNT2,
//                         PC_HQ_COMNT_DT,
//                         PC_EXPDRESP_COMNT1,
//                         PC_EXPDRESP_COMNT2,
//                         PC_EXPD_RESP_DT,
//                         PC_EXPD_TRNS_COMNT,
//                         PG1SC4CD,
//                         PC6PREFL,
//                         PC_EXPD_PRTY_IND,
//                         YSMXDV,
//                         SY2FOFBD,
//                         YACSDESC,
//                         PC_SENT_FCTY_DT,
//                         PC_SENT_FCTY_HHMM,
//                         TS_CARR_CD,
//                         PRDTN_CARR_SVC_ID,
//                         PRDTN_VESL_CLS_DT,
//                         TS_EST_DPRT_DT,
//                         TS_EST_DEST_DT,
//                         PRDTN_FCTY_RSP_IND,
//                         PC_ITM_SEQ_NBR,
//                         ZZZSDT,
//                         ZZZCHGDT,
// 
// MAINTENANCE LOG:
// 
//   DATE      NAME      DESCRIPTION OF CHANGE
// --------    --------  -------------------------------------
// 08/12/97    IDICKI    CREATED FOR NEW VIEW
// 12/06/1997  TTHAN1    Y2KFIX - CHANGE SIZE OF PT3YYMM FROM 4
//                       TO 9.
// 02/13/98    WSQUIR    Y2KFIX - MOVED PC-PO-ID-MO-RNG ITEM
//                       TO JUST BEFORE ZZ-SDT ITEM TO MATCH
//                       DCLGEN.
// ************************
Record VFEXPD03 type basicRecord
  5 VFEXPD03-GROUP VFEXPD03-GROUP ; 
    10 VFEXPD03-KEY VFEXPD03-KEY ; 
      15 PC3BUYMO PC3BUYMO ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 XCTCD XCTCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 SY1SSTNM SY1SSTNM ; 
      15 PC2CUXID PC2CUXID ; 
      15 XWHCD XWHCD ; 
    10 PC6PLAN PC6PLAN ; 
    10 PC6TORDE PC6TORDE ; 
    10 PC-TOT-BAL-SHP-QTY PC-TOT-BAL-SHP-QTY ; 
    10 PT3AVTOT PT3AVTOT ; 
    10 PT3YYMM PT3YYMM ; 
    10 PC6RTADT PC6RTADT ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6OETS PC6OETS ; 
    10 TSLTRAVL TSLTRAVL ; 
    10 PC-ETAL-DT PC-ETAL-DT ; 
    10 PC-DROPDEAD-RTA-DT PC-DROPDEAD-RTA-DT ; 
    10 PC-FCTY-SEND-IND PC-FCTY-SEND-IND ; 
    10 PC-NEW-LINE-FL PC-NEW-LINE-FL ; 
    10 PC-EXPD-HQ-COMNT1 PC-EXPD-HQ-COMNT1 ; 
    10 PC-EXPD-HQ-COMNT2 PC-EXPD-HQ-COMNT2 ; 
    10 PC-HQ-COMNT-DT PC-HQ-COMNT-DT ; 
    10 PC-EXPDRESP-COMNT1 PC-EXPDRESP-COMNT1 ; 
    10 PC-EXPDRESP-COMNT2 PC-EXPDRESP-COMNT2 ; 
    10 PC-EXPD-RESP-DT PC-EXPD-RESP-DT ; 
    10 PC-EXPD-TRNS-COMNT PC-EXPD-TRNS-COMNT ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 PC6PREFL PC6PREFL ; 
    10 PC-EXPD-PRTY-IND PC-EXPD-PRTY-IND ; 
    10 YSMXDV YSMXDV ; 
    10 YMTCD YMTCD ; 
    10 SY2FOFBD SY2FOFBD ; 
    10 YACSDESC YACSDESC ; 
    10 PC-SENT-FCTY-DT PC-SENT-FCTY-DT ; 
    10 PC-SENT-FCTY-HHMM PC-SENT-FCTY-HHMM ; 
    10 TS-CARR-CD TS-CARR-CD ; 
    10 PRDTN-CARR-SVC-ID PRDTN-CARR-SVC-ID ; 
    10 PRDTN-VESL-CLS-DT PRDTN-VESL-CLS-DT ; 
    10 TS-EST-DPRT-DT TS-EST-DPRT-DT ; 
    10 TS-EST-DEST-DT TS-EST-DEST-DT ; 
    10 PRDTN-FCTY-RSP-IND PRDTN-FCTY-RSP-IND ; 
    10 PC-ITM-SEQ-NBR PC-ITM-SEQ-NBR ; 
    10 PC_DLVR_ANALYST_CD PC_DLVR_ANALYST_CD ; 
    10 PC-PO-OT-CD PC-PO-OT-CD ; 
    10 PC-PO-ID-MO-RNG PC-PO-ID-MO-RNG ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
end // end VFEXPD03

// Max number of rows map1
DataItem MAP1-NBR-ROWS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Max number of rows map2
DataItem MAP2-NBR-ROWS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ydd-dty-dwbk-cd
DataItem PC-ETAL-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// extracted date
DataItem PC-EXPD-HQ-COMNT1 char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// extracted date
DataItem PC-EXPD-HQ-COMNT2 char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC-EXPD-PRTY-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// extracted date
DataItem PC-EXPD-RESP-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// extracted date
DataItem PC-EXPD-TRNS-COMNT char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// extracted date
DataItem PC-EXPDRESP-COMNT1 char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// extracted date
DataItem PC-EXPDRESP-COMNT2 char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// extracted date
DataItem PC-HQ-COMNT-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to be extracted flag
DataItem PC-NEW-LINE-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC-SENT-FCTY-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PC-SENT-FCTY-HHMM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alternate def code 2
DataItem PC-TOT-BAL-SHP-QTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// carrier service route id
DataItem PRDTN-CARR-SVC-ID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory expedite response
DataItem PRDTN-FCTY-RSP-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// vessel close date
DataItem PRDTN-VESL-CLS-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT06-CARR-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT06-CARR-LIT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT06-CARR-SVC-ID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT06-CLS-LIT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT06-EST-DEST-DT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT06-EST-DPRT-DT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT06-ETA-LIT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT06-ETD-LIT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT06-EXPDRESP-COMNT char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT06-FCTY-CMT char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT06-FCTY-RESP-LIT char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT06-FCTY-RSP-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT06-SHOW-FCTY-CMT-TRANS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT06-TRANS char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT06-VESL-CLS-DT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold reason comment 2
DataItem PT06MBLA num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold reason comment 1
DataItem PT06MBTS num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XXX_STAT
DataItem PT06MORD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT06MPAG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line selection indicator
DataItem PT06MSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Count for lines selected
DataItem PT06WCNT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Ws date field
DataItem PT06WDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT06WDT2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT06WDT3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT06WDT4 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PT06WDT6 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch
DataItem PT06WEOC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PT06WIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PT06WIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PT06WIX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PT06WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PT06WIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Del function request switch
DataItem PT06WLSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem PT06WMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WS page number
DataItem PT06WPAG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pointer
DataItem PT06WPNT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PT06WPRD char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem PT06WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PT06WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem PT06WSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VFEXPD02 GROUP LEVEL
DataItem VFEXPD03-GROUP char(425)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key
DataItem VFEXPD03-KEY char(42)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

