package pk0u;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PK0U ****
// 
//  ************** pk0u: select customer (planning) ***********
// 
// 
// purpose: a customer number entered here will result in all
//          orders for that customer being processed in the
//          planning run tonight.
// 
// 
// narrative:
//    when the screen is first displayed all customers
//    already selected are displayed.  they are shown in
//    order by build schedule, priority and customer number.
//    (all customers selected here have a priority of normal.)
// 
//    for each customer number, a schedule number and pick
//    priority are shown.  this allows the user to build a
//    'customized' schedule containing only those customers
//    that they select to put into it.
// 
//    pick priority designates the customer as rush, normal
//    or same day.
// 
// 
// 
// 
//   maintenance history:
// 
//    date      name      description
//  --------  ---------  --------------------------------------
//  11-29-88  JWOOD      ADDED NONCSP OPTION TO CALLS
//  11-29-88  JWOOD      ADDED XSSEGTR LOGIC
//  07-21-89  Jcampb     changed xfer from pk0i to pk09
//                       added pwirec for io1720
//  03-06-91  SBEAUC     Remove PKAREC for table changes
//  03-19-91  BGOFF      Added special handling flag
//                       and changed map title
//  03-27-91  MWALTO     CHG'D MAP TITLE TO "PLAN"
//  09-25-91  SHENDE     Allowed transfer to PW0W rather than
//                       PK0S for whse 07.
//  03-16-92  SHENDE     Allowed transfer to PW0W rather than
//                       PK0S for whse 02 and 04
//  06-22-92  SHENDE     Table changes
//  08-05-92  SHENDE     Display brand code for colehaan. Allow
//                       wildcard for brand and division.
//  08-11-95  CBRINE     CANADA Added XCTCD to PKWREC
//  01-02-96  Pjames     Allowed transfer to PWOW rather than
//                       PK0S for whse 42.
// ************************************************************
// 
//  01-30-98  NGANGO     Y2k Modifications - Process Pk0US84 is
//                       modified to replace the hard coding of
//                       century .
// ************************************************************
// 
// *********************
Program PK0U type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK0UW01 PK0UW01; // record
  PK4REC PK4REC; // record
  PK6REC PK6REC; // record
  PK9REC PK9REC; // record
  PKGREC PKGREC; // record
  PKWREC PKWREC; // record
  PKXREC PKXREC; // record
  PKZREC PKZREC; // record
  PWIREC PWIREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  XP0FW01 XP0FW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use PK0UM.PK0UM030 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PK0U005: PK0U005();

    goto PK0U010;



    PK0U010: PK0U010();

    goto PK0U010;


  end // end main
end // end PK0U

// main process
Function PK0U005()
   /* ----------------------------------------------------------*/
   /* initialization process....*/
   /* ----------------------------------------------------------*/

  set TA2REC empty;
  set PK0UW01 empty;
  set SQLCA empty;

  XPPK001(); /* app initial.*/

  if (COMMAREA.CAFROMAP == "PW0W") /* pick planning*/
    PKWREC.PKWSELSW = "PP";
  else
    if (COMMAREA.CAFROMAP == "PW0V") /* picking*/
      PKWREC.PKWSELSW = "PK";
    end
  end

  PK0UM030.XWHCD = PKWREC.XWHCD; /* warehouse code*/
  PK0UW01.PK0UW-XDV-HOLD = PKWREC.XDVCD[1];
  PK0UW01.PK0UW-XBC-HOLD = PKWREC.XBCCD[1];

  if (PKWREC.PKWINDEX > 0)
    if (PKWREC.PKWFRMAP[1] == "PK0U") /* started from pk0u*/
      PKXREC.PKWARRAY = PKWREC.PKWARRAY[1];
      PKWREC.XWHCD = PKXREC.XWHCD; /* restore warehouse code*/
      PKWREC.PKWSLECT = " "; /* clear selects*/
    end
  end

  PK0UW01.PK0UWFT = "Y"; /* set first time flag*/
  PK0UM030.XXXERRID = "PK0U021"; /* format location*/

   /* ---------------------------------------------------------------*/
   /* Move PKWREC "from" and "to" DNSB date AND div to working storage*/
   /* so that is can be passed back to previous program without*/
   /* being cleared from the statement: MOVE ' ' TO PKWREC.PKWCNTRL*/
   /* ---------------------------------------------------------------*/

   /* OVE PKWREC.PKWFRMDT TO PK0UW01.PK0UMFDT;*/
   /* OVE PKWREC.PKWTODT TO PK0UW01.PK0UMTDT;*/

  PKWREC.PKWFRMDT = 0;
  PKWREC.PKWTODT = 0;
  PKWREC.PKWINDEX = 0;
  PKWREC.PKWCNTRL = " ";

  PKWREC.XBCCD[1] = PK0UW01.PK0UW-XBC-HOLD;
  PKWREC.XDVCD[1] = PK0UW01.PK0UW-XDV-HOLD;


   /* -------------  end process pk0u005  --------------------*/
end // end PK0U005

// select customer
Function PK0U010()

  if (converseVar.validationMsgNum == 2 /* invalid whse*/
   || converseVar.validationMsgNum == 3 /* inactive whse*/
   || converseVar.validationMsgNum == 4) /* whse required*/
    set PK0UM030.XWHCD cursor, modified, bold;
  else
    set PK0UM030.XWHCD initialAttributes;
    PK0U020(); /* format output*/
  end



  PK0U030(); /* converse map*/

   /* take care of pa2 key*/

  if (converseVar.eventKey is pa2)
    PK0UM030.XWHCD = PKWREC.XWHCD;
    XPPK002();
    if (converseVar.validationMsgNum == 2 /* invalid whse*/
     || converseVar.validationMsgNum == 3 /* inactive whse*/
     || converseVar.validationMsgNum == 4) /* whse required*/
      exit stack;
    else
      set PK0UM030.XWHCD initialAttributes;
    end
  end


   /* if the whse has changed ignore everything and start over.*/

  if (PK0UM030.XWHCD is modified)
    PKWREC.XWHCD = PK0UM030.XWHCD;
    XPPK002();
    if (converseVar.eventKey is enter) /* go to ezeflo except on pf key*/
      exit stack;
    else
      if (converseVar.validationMsgNum != 0) /* pf key but whse error*/
        exit stack;
      end
    end /* else pf key but no whse error*/
  end

  set PK0UM030.XWHCD cursor; /* initialize cursor position*/

  if (PKWREC.XWHCD == " ") /* receiving warehouse from map*/
    exit stack;
  end

  PK0UW01.PK0UWUPD = "N"; /* database update flag.*/

  PK0U040(); /* validate attention keys*/


  if (converseVar.validationMsgNum == 0)
    PK0U050(); /* validate inputs*/
  end

  TA2DTOPT = "GETDATE ";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  PK0UW01.PK0UWCDT = TA2REC.TA2GRGGN;


  if (converseVar.validationMsgNum == 0 /* ; no errors*/
   || converseVar.validationMsgNum == 85)
                                   /* ; update with warnings*/
    if (PKWREC.XWHCD == PK0UM030.XWHCD)
      if (converseVar.eventKey is pf12)
            /* no more processing*/
      else
        if (PK0UW01.PK0UWEDT == "N") /* data modified*/
          if (PK0UW01.PK0UWSEL == "Y") /* customer selected*/
            PK0U070(); /* process selects*/
          else
            /* no more processing*/
          end
        else
          if (PK0UW01.PK0UWEDT == "Y") /* edits-all-ok-flag*/
            PK0U080(); /* update databases*/
          end
        end
      end
    end
  end



   /* ------------------- end pk0u010 -------------------------*/
end // end PK0U010

// Format the output display
Function PK0U020()


   /* ------------------------------------------------------------*/
   /* first time through or a change in warehouse, the map is*/
   /* reformatted with new data.*/
   /* warehouse is highlited if invalid.*/
   /* ------------------------------------------------------------*/

  if (PK0UW01.PK0UWFT == "Y") /* first time set up*/
    PK0UW01.PK0UWTOP = 1; /* top of page*/
    if (PKWREC.XWHCD == " ") /* no incomming warehouse*/
      PK0U021(); /* format headings on map*/
      converseLib.validationFailed(4); /* warehouse is required*/
      PK0UW01.PK0UWTOP = 1; /* top of page*/
      set PK0UM030.XWHCD cursor, modified, bold;
      PK0UW01.PK0UWFT = "N"; /* turn off first time*/
      return;
    else
      XPPK002(); /* validate warehouse*/
      if (converseVar.validationMsgNum == 0) /* valid warehouse*/
        PK0U021(); /* Format map heading area*/
        PK0U022(); /* ss customers*/
        if (converseVar.validationMsgNum == 0) /* no database errors*/
          PK0U026(); /* find prior top of page location*/
          PK0U023(); /* format screen*/
          PKXREC.PKWARRAY = " "; /* clear select area*/
        end
      end
    end
  end



  if (PK0UW01.PK0UWFT == "N") /* not the first time thru*/
    if (converseVar.validationMsgNum == 0  
     || converseVar.validationMsgNum == 85 /* database updated with warnings*/
     || converseVar.validationMsgNum == 91) /* database updated*/
      if (PK0UM030.XWHCD is modified /* change in warehouse*/
       || PK0UW01.PK0UWUPD == "Y")   /* database updated*/

           /* ***********************************/
           /* *   * changed warehouse *        **/
           /* ***********************************/
        if (PK0UM030.XWHCD is modified) /* change in warehouse*/
          PKWREC.XWHCD = PK0UM030.XWHCD; /* warehouse*/
          XPPK002(); /* validate warehouse*/
          if (converseVar.validationMsgNum == 0  /* valid warehouse*/
           || converseVar.validationMsgNum == 85 /* database updated with warnings*/
           || converseVar.validationMsgNum == 91) /* database updated*/
            PK0U021(); /* Format map heading area*/
            PKXREC.PKWARRAY = " "; /* clear select area*/
            PK0UW01.PK0UWTOP = 1; /* set top of page subscript*/
            PK0U022(); /* ss customers*/
            if (converseVar.validationMsgNum == 0  /* no database errors*/
             || converseVar.validationMsgNum == 85 /* database updated with warnings*/
             || converseVar.validationMsgNum == 91) /* database updated*/
              PK0U023(); /* format screen*/
            end
          end
        else

             /* ***********************************/
             /* *   * database was updated *     **/
             /* ***********************************/
          if (PK0UW01.PK0UWUPD == "Y") /* database updated*/
            PK0UW01.PK0UWMNO = converseVar.validationMsgNum; /* save message #*/
            PK0U022(); /* ss customers*/
            if (converseVar.validationMsgNum == 0  /* no database errors*/
             || converseVar.validationMsgNum == 85 /* database updated with warnings*/
             || converseVar.validationMsgNum == 91) /* database updated*/
              PK0U021(); /* format headings*/
              PK0U023(); /* format screen*/
              if (PK0UW01.PK0UWMNO == 9999)
                converseLib.validationFailed();
              else
                converseLib.validationFailed(PK0UW01.PK0UWMNO);
              end
            end
          end
        end
      else
           /* ***********************************/
           /* *   * only paging is required *  **/
           /* ***********************************/

        if (converseVar.eventKey is pf7)
          PK0U021(); /* format map heading*/
          PK0UW01.PK0UWTOP = PK0UW01.PK0UWTOP - 22; /* set top of page*/
          if (PK0UW01.PK0UWTOP <= 0)
            PK0UW01.PK0UWTOP = 1; /* set top of page to 1*/
            converseLib.validationFailed(37); /* no previous page message*/
          end
          PK0U023(); /* format screen*/
        else
          if (converseVar.eventKey is pf8)
            PK0UW01.PK0UWMCH = PK0UW01.PK0UWTOP + 21; /* temp.counter*/
            if (PK0UW01.PK0UWMAX >= PK0UW01.PK0UWMCH) /* not last page*/
              PK0U021(); /* format map heading*/
              PK0UW01.PK0UWTOP = PK0UW01.PK0UWTOP + 22; /* set top of page*/
              PK0U023(); /* format screen*/
            else
              converseLib.validationFailed(38); /* no more pages to display*/
            end
          end
        end
      end
    end
  end


  if (converseVar.validationMsgNum == 2 /* invalid  warehouse*/
   || converseVar.validationMsgNum == 3 /* inactive warehouse*/
   || converseVar.validationMsgNum == 4) /* warehouse required*/
    set PK0UM030.XWHCD cursor, modified, bold; /* hilite warehouse*/
  else
    set PK0UM030.XWHCD initialAttributes;
  end

  PK0UW01.PK0UWFT = "N"; /* reset first time flag*/
  PK0U025(); /* set mdt's for updates not*/
                                   /* accomplished*/



end // end PK0U020

// format map heading
Function PK0U021()
   /* ---------------------------------------------------*/
      /* format map headings...........*/
   /* ---------------------------------------------------*/


  set PK0UM030 initial; /* clear map area*/
  set PK4REC empty; /* empty pool header record*/
  set PKGREC empty;

  PK0UM030.XXXCURDT = VGVar.currentShortGregorianDate; /* date to map*/
  PK0UM030.XWHCD = PKWREC.XWHCD; /* warehouse code*/
  PK0UM030.XWHABRV = PKWREC.XWHABRV; /* warehouse abbrev.*/
  PK0UM030.XXXRVNBR = "01"; /* warehouse abbrev.*/
  converseLib.validationFailed(0); /* reset any error*/



end // end PK0U021

// obtain set customer numbers
Function PK0U022()
   /* ----------------------------------------------------*/
   /* load working storage with customer data*/
   /* -  non plan only   -*/
   /* ----------------------------------------------------*/

  PKGREC.XWHCD = PKWREC.XWHCD;
  PKGREC.XDVCD = PKWREC.XDVCD[1];
  PKGREC.XBCCD = PKWREC.XBCCD[1];
  PKGREC.PKURUNMD = "P"; /* non-planned mode*/
  PK0UW01.PK0UWMAX = 0;

  while (PK0UW01.PK0UWMAX <= 499) /* table maximum*/

    PK0UW01.PK0UWMAX = PK0UW01.PK0UWMAX + 1; /* set up sub*/
    PK0UW01.KUCCOID[PK0UWMAX] = 0; /* comp*/
    PK0UW01.KUMSTRID[PK0UWMAX] = 0; /* store*/
    PK0UW01.XNXCD[PK0UWMAX] = 0; /* dept.*/
    PK0UW01.XBCCD[PK0UWMAX] = " "; /* brand*/
    PK0UW01.ZZZCHGCT[PK0UWMAX] = 0; /* change cnt*/

  end

  call "IO1730" ("S2", SQLCA, PKGREC) {isNoRefresh = yes, isExternal = yes}; /* ; ss on customers*/

  if (SQLCA.VAGen_SQLCODE != 0) /* ; unexpected return*/
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* database in use-try again*/
      PK0UM030.XXXERRID = "PK0U022"; /* ss on customers*/
      TA1REC.TA1FUNC = "POST"; /* term. function*/
      TA1REC.TA1LOC = "S2 FROM CUSTOMER PICKING FILE";
      TA1REC.TA1TYPE = "DB2 "; /* type of error*/
      TA1REC.TA1MAP = "PK0U022"; /* process name*/
      TA1REC.TA1MAP = "PK0UM030"; /* map name*/
      TA1REC.TA1DBASE = "DPICK   "; /* database name*/
      TA1REC.TA1TBLVU = "VSELCU01"; /* table view name*/
      TA1REC.TA1TBLKE = PKWREC.XWHCD; /* table key*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 100)
        converseLib.validationFailed(29); /* ; indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* ; term. function*/
        TA1REC.TA1LOC = "S2 FROM CUSTOMER PICKING FILE";
      end
    end
  end



  if (SQLCA.VAGen_SQLCODE == 0) /* good return from s2 above*/
    PK0UW01.PK0UWMAX = 0; /* records read in counter*/
    while (SQLCA.VAGen_SQLCODE == 0 /* good return within loop*/
     && PK0UW01.PK0UWMAX <= 500) /* table maximum*/
      call "IO1730" ("N2", SQLCA, PKGREC) {isNoRefresh = yes, isExternal = yes}; /* fetch next record*/

      if (SQLCA.VAGen_SQLCODE == 0) /* good fetch*/

        if (PKWREC.XBCCD[1] == "*"
         && PKGREC.XBCCD == "08") /* colehaan*/
          /* /next sentence*/
        else
          PK0UW01.PK0UWMAX = PK0UW01.PK0UWMAX + 1; /* set up sub*/

          if (PKGREC.KUCCOID >= 8000000
           && PKGREC.KUCCOID < 9000000)

            PK0UW01.XBCCD[PK0UWMAX] = "08";
            XP0FW01.KUCCOID = PKGREC.KUCCOID;
            XP0FW01.XBCCD = "08";
            XP0FS01();
            PK0UW01.KUCCOID[PK0UWMAX] = XP0FW01.XP0FW01-EXTERNAL;
            PK0UW01.PK0UW-CO-I[PK0UWMAX] = XP0FW01.XP0FW01-INTERNAL;
          else
            PK0UW01.KUCCOID[PK0UWMAX] = PKGREC.KUCCOID; /* company*/
          end

          PK0UW01.KUMSTRID[PK0UWMAX] = PKGREC.KUMSTRID; /* store*/
          PK0UW01.XNXCD[PK0UWMAX] = PKGREC.XNXCD; /* dept.*/
          PK0UW01.ZZZCHGCT[PK0UWMAX] = PKGREC.ZZZCHGCT;

        end
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(28); /* database in use-try again*/
          PK0UM030.XXXERRID = "PK0U022"; /* ss on customers*/
          TA1REC.TA1FUNC = "POST"; /* term. function*/
          TA1REC.TA1LOC = "S2 FROM CUSTOMER PICKING FILE";
          TA1REC.TA1TYPE = "DB2 "; /* type of error*/
          TA1REC.TA1MAP = "PK0U022"; /* process name*/
          TA1REC.TA1MAP = "PK0UM030"; /* map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* database name*/
          TA1REC.TA1TBLVU = "VSELCU01"; /* table view name*/
          TA1REC.TA1TBLKE = PKWREC.XWHCD; /* table key*/
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
          return;
        else
          if (SQLCA.VAGen_SQLCODE != 100) /* ; not end of data*/
            TA1REC.TA1FUNC = "RETN"; /* termination function*/
            TA1REC.TA1LOC = "N2 FETCH FROM CUSTOMER PICK  ";
          end
        end
      end
    end
    call "IO1730" ("C2", SQLCA, PKGREC) {isNoRefresh = yes, isExternal = yes}; /* close set*/
    if (SQLCA.VAGen_SQLCODE != 0) /* ; problem closing*/
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
      TA1REC.TA1LOC = "C2 CLOSE CUST.PICKING FILE   ";
    end
  end


  if (SQLCA.VAGen_SQLCODE != 0 /* ; unexpected return cd*/
   && SQLCA.VAGen_SQLCODE != 100) /* ; end of data*/
    TA1REC.TA1TYPE = "DB2 "; /* ; type of error*/
    TA1REC.TA1PGMNM = "PK0U022"; /* process name*/
    TA1REC.TA1MAP = "PK0UM030"; /* map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* database name*/
    TA1REC.TA1TBLVU = "VSELCU01"; /* table view name*/
    TA1REC.TA1TBLKE = PKWREC.XWHCD; /* table key*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
    XSPF4(); /* ; send to master menu*/

    return;
  else
    if (PK0UW01.PK0UWMAX == 0) /* ; no customers*/
      PK0US22(); /* clear map*/
      converseLib.validationFailed(94); /* ; no customer data found*/
    end
  end



end // end PK0U022

// format selected customers
Function PK0U023()
   /* ----------------------------------------------------*/
     /* format map.....*/
      /* pk0uwtop - location in ws. array of the top of screen*/
      /* pk0uwsb1 - this keeps track of location in working*/
                 /* storage array for moving to map*/
      /* pk0uwsb2 - locates position in map - pk0lm030*/
      /* pk0uwmax - end of valid data in working storage array*/
   /* ----------------------------------------------------*/



  if (PK0UM030.XXXERRID == " ")
    PK0UM030.XXXERRID = "PK0U023";
  end

  PK0UW01.PK0UWSB1 = PK0UW01.PK0UWTOP; /* hold current top of page*/

  PK0UW01.PK0UWSB2 = 1; /* map display subscript*/

  while (PK0UW01.PK0UWSB2 <= 22) /* only 22 displayed*/
    if (PK0UW01.PK0UWSB1 <= PK0UW01.PK0UWMAX) /* place in ws < data end*/
      PK0UM030.PK0UMACT[PK0UWSB2] = PK0UW01.PKXKUACT[PK0UWSB1]; /* act*/
      PK0UM030.KUCCOID[PK0UWSB2] = PK0UW01.KUCCOID[PK0UWSB1]; /* cust*/
      PK0UM030.KUMSTRID[PK0UWSB2] = PK0UW01.KUMSTRID[PK0UWSB1]; /* store*/
      PK0UM030.XNXCD[PK0UWSB2] = PK0UW01.XNXCD[PK0UWSB1]; /* dept.*/
    end
    PK0UW01.PK0UWSB2 = PK0UW01.PK0UWSB2 + 1; /* set-up map subscript*/
    PK0UW01.PK0UWSB1 = PK0UW01.PK0UWSB1 + 1; /* set-up place in work.stor.*/
  end


    /* ******************************************************/
    /* *  user messages for bottom  of screen .............**/
    /* ******************************************************/

  if (PK0UW01.PK0UWDDB == "Y") /* database updated this pass*/
    if (PK0UW01.PK0UWA91 == "Y" /* at least one add hit a -911*/
     || PK0UW01.PK0UWC91 == "Y") /* at least one change or delete hit a 911*/
      PK0UW01.PK0UWMNO = 113; /* partial update, database contention*/
    else
      if (PK0UW01.PK0UWCCT == "Y" /* change had change cnt.error*/
       || PK0UW01.PK0UWCDL == "Y" /* change request for deleted rec.*/
       || PK0UW01.PK0UWAAE == "Y") /* add a rec added by someone else*/
        PK0UW01.PK0UWMNO = 112; /* part.update, updated since ref.*/
      end
    end
  else /* no update accomplished*/
    if (PK0UW01.PK0UWA91 == "Y" /* on least one add hit a -911*/
     || PK0UW01.PK0UWC91 == "Y") /* at least one change or delete hit a 911*/
      PK0UW01.PK0UWMNO = 28; /* no update, database contention*/
    else
      if (PK0UW01.PK0UWAAE == "Y") /* add a rec added by someone else*/
        PK0UW01.PK0UWMNO = 44; /* customer already exists*/
      else
        if (PK0UW01.PK0UWCDL == "Y") /* change request for deleted rec.*/
          PK0UW01.PK0UWMNO = 142; /* cust. no longer exists*/
        else
          if (PK0UW01.PK0UWCCT == "Y") /* change had change cnt.error*/
            PK0UW01.PK0UWMNO = 143; /* updated since last referenced*/
          end
        end
      end
    end
  end


end // end PK0U023

// find prior top of page
Function PK0U025()
    /* -------------------------------------------------*/
           /* hilite any prior update requests not*/
        /* accomplished due to change counter differences*/
        /* or -911's.*/
    /* -------------------------------------------------*/

  PK0UW01.PK0UWSB2 = 1; /* location in map*/

  while (PK0UW01.PK0UWSB2 <= 22)
    PK0UW01.PK0UWC1 = PK0UM030.KUCCOID[PK0UWSB2]; /* reformat cust.*/
    PK0UW01.PK0UWC2 = PK0UM030.KUMSTRID[PK0UWSB2];
    PK0UW01.PK0UWC3 = PK0UM030.XNXCD[PK0UWSB2];
    if (PK0UW01.PK0UWCX2 in PK0UW01.PK0UWPBM) /* problem cust array*/
      if (sysVar.arrayIndex > 0 /* ; customer found*/
       && PK0UM030.KUCCOID[PK0UWSB2] > 0) /* actual customer*/
        set PK0UM030.KUCCOID[PK0UWSB2] bold;
        set PK0UM030.KUMSTRID[PK0UWSB2] bold;
        set PK0UM030.XNXCD[PK0UWSB2] bold;
      end
    end
    PK0UW01.PK0UWSB2 = PK0UW01.PK0UWSB2 + 1; /* ; set subscript up*/
  end

  PK0UW01.PK0UWSB3 = 1; /* location in map*/
  while (PK0UW01.PK0UWSB3 <= 22)
    PK0UW01.PK0UWPBM[PK0UWSB3] = 0; /* problem cust array*/
    PK0UW01.PK0UWSB3 = PK0UW01.PK0UWSB3 + 1; /* set subscript up*/
  end



end // end PK0U025

// find prior top of page
Function PK0U026()
    /* -------------------------------------------------*/
           /* find prior map display of pk0u*/
    /* -------------------------------------------------*/

  PK0UW01.PK0UWTOP = 1; /* top of page starts at array top*/
  PK0UW01.PK0UWSB2 = 30; /* array size in pkxrec*/

  while (PK0UW01.PK0UWSB2 > 0)
    if (PKXREC.KUCCOID[PK0UWSB2] > 0)
      PK0UW01.PK0UWC1 = PKXREC.KUCCOID[PK0UWSB2]; /* reformat cust.*/
      PK0UW01.PK0UWC2 = PKXREC.KUMSTRID[PK0UWSB2];
      PK0UW01.PK0UWC3 = PKXREC.XNXCD[PK0UWSB2];
      if (PK0UW01.PK0UWCX2 in PK0UW01.PK0UWCUS) /* select cust array*/
        if (sysVar.arrayIndex != 0) /* ; customer found*/
          PK0UW01.PK0UWTOP = sysVar.arrayIndex; /* ; adjust top of page*/
          PK0UW01.PKXKUACT[sysVar.arrayIndex] = PKXREC.PKXKUACT[PK0UWSB2];
        end
      end
    end
    PK0UW01.PK0UWSB2 = PK0UW01.PK0UWSB2 - 1; /* ; set subscript down*/
  end




end // end PK0U026

// converse map
Function PK0U030()


  converse PK0UM030 ;



   /* ------------------- end pk0u030 -------------------------*/
end // end PK0U030

// validate attention keys...
Function PK0U040()

  converseLib.validationFailed(0); /* reset error message field*/
   /* ------------------------------------------------------------*/
   /* stop indiscriminate button pressing......*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf3  /* send to pk0s menu*/
   || converseVar.eventKey is pf13 /* pk0t 'ord sel' transfer*/
   || converseVar.eventKey is pf14 /* pk0v 'ot sel' transfer*/
   || converseVar.eventKey is pf16 /* pk04 'p&h sel' transfer*/
   || converseVar.eventKey is pf18 /* pk09 'hold' transfer*/
   || converseVar.eventKey is pf19 /* pk07 'select' transfer*/
   || converseVar.eventKey is pf20) /* pk0a 'pick' transfer*/

    PK0U041(); /* Transfer to another application*/

  else

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      XSPF1(); /* Exit to the HELP facility*/

      PK0UM030.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
      converseLib.validationFailed(); /* Force error*/
      exit stack; /* Exit to redisplay map*/
    end


    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      XSPF4(); /* Exit to system main menu*/

      PK0UM030.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
      converseLib.validationFailed(); /* Force alarm to sound*/
      exit stack; /* Exit to redisplay map*/
    end

    if (converseVar.eventKey is pa2) /* PA2 was pressed*/

      PK0UW01.PK0UWUPD = "Y"; /* flag for reloading map*/
      PK0UW01.PK0UWSB1 = 1;
      while (PK0UW01.PK0UWSB1 <= PK0UW01.PK0UWMAX)
        PK0UW01.PKXKUACT[PK0UWSB1] = " "; /* clear action*/
        PK0UW01.PK0UWSB1 = PK0UW01.PK0UWSB1 + 1;
      end
      exit stack;
    end

    if (converseVar.eventKey is pf7  /* scroll backwards*/
     || converseVar.eventKey is pf8  /* scroll forward*/
     || converseVar.eventKey is pf12 /* test the water for errors*/
     || converseVar.eventKey is enter) /* enter..*/
       /* their choice of buttons was valid*/
    else
      converseLib.validationFailed(12); /* invalid pk key..*/

    end
  end



end // end PK0U040

// Exit to another application
Function PK0U041()
   /* ------------------------------------------------------------*/
   /* Set the "TO" application according to the PF key pressed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* ; PF3 was pressed*/
    if (PK0UM030.XWHCD == "51" /* memphis apparel*/
     || PK0UM030.XWHCD == "04" /* memphis footwear*/
     || PK0UM030.XWHCD == "07" /* wilsonville*/
     || PK0UM030.XWHCD == "02" /* greenland*/
     || PK0UM030.XWHCD == "42") /* canada*/
      COMMAREA.CATOAP = "PW0W"; /* pick planning menu*/
    else
      COMMAREA.CATOAP = "PK0S";
    end
  end

  if (converseVar.eventKey is pf13) /* ; PF13 was pressed*/
    COMMAREA.CATOAP = "PK0T"; /* Select By Order*/
  end

  if (converseVar.eventKey is pf14) /* ; PF14 was pressed*/
    COMMAREA.CATOAP = "PK0V"; /* Select By Order Type*/
  end

  if (converseVar.eventKey is pf16) /* ; PF16 was pressed*/
    COMMAREA.CATOAP = "PK04"; /* Select Pack And Hold*/
  end

  if (converseVar.eventKey is pf18) /* ; PF18 was pressed*/
    COMMAREA.CATOAP = "PK09"; /* Hold/Release*/
  end


  if (converseVar.eventKey is pf19) /* ; PF19 was pressed*/
    COMMAREA.CATOAP = "PK07"; /* Selection Menu*/
  end

  if (converseVar.eventKey is pf20) /* ; PF20 was pressed*/
    COMMAREA.CATOAP = "PK0A"; /* Master Menu*/
  end

  if (PK0UM030.XWHCD is modified)
    PKWREC.XWHCD = PK0UM030.XWHCD; /* Save in work area*/
  end

   /* ---------------------------------------------------*/
   /* Move to PKWREC fields*/
   /* ---------------------------------------------------*/

  PKWREC.PKWFRMDT[1] = PK0UW01.PK0UMFDT;
  PKWREC.PKWTODT[1] = PK0UW01.PK0UMTDT;

  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* COMMAREA user area*/

  XSEXIT(); /* Invoke selected application*/

  PK0UM030.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/

  exit stack; /* ; Exit to redisplay map*/



end // end PK0U041

// validate inputs
Function PK0U050()

    /* ---------------------------------------------*/
   /* -  - start validation of input data      -  -*/
    /* ---------------------------------------------*/


  PK0UW01.PK0UWSEL = "N"; /* reset select flag*/
  PK0UW01.PK0UWEDT = "N"; /* reset edit   flag*/
  PK0UW01.PK0UWDDB = "N"; /* reset edit   flag*/
  PK0UW01.PK0UWA91 = "N"; /* reset edit   flag*/
  PK0UW01.PK0UWC91 = "N"; /* reset edit   flag*/
  PK0UW01.PK0UWAAE = "N"; /* reset edit   flag*/
  PK0UW01.PK0UWCDL = "N"; /* reset edit   flag*/
  PK0UW01.PK0UWCCT = "N"; /* reset edit   flag*/


  PK0U051(); /* reset mdt's*/


  if (converseVar.validationMsgNum == 0) /* no errors from pk0l051*/
    if (PK0UW01.PK0UWSEL == "Y" /* customer selected*/
     || PK0UW01.PK0UWEDT == "Y") /* data modified*/

      if (PK0UM030.XWHCD != PKWREC.XWHCD) /* change in warehouse*/
        PK0UM030.XWHCD = PKWREC.XWHCD; /* restore warehouse*/
        set PK0UM030.XWHCD cursor, modified, bold;
        converseLib.validationFailed(23); /* can not modify & change warehouse*/
      else
        if (converseVar.eventKey is enter /* ;*/
         || converseVar.eventKey is pf12) /* ;*/
          PK0U052(); /* edit entered data*/
        else
          if (converseVar.eventKey is pf7 /* scroll requested*/
           || converseVar.eventKey is pf8) /* scroll requested*/
            converseLib.validationFailed(39); /* can not edit screen & scroll*/
            return; /* return to pk0l010*/
          end
        end
      end
    else
      if (converseVar.eventKey is pf7 /* scroll requested*/
       || converseVar.eventKey is pf8) /* scroll requested*/
        exit stack; /* bypass processing- format screen*/
      end
    end
  end



end // end PK0U050

// reset mdt's
Function PK0U051()

     /* --------------------------------------------------*/
     /* -   - reset mdt's to fields actually modified -  -*/
     /* --------------------------------------------------*/

  PK0UW01.PK0UWTOP = PK0UW01.PK0UWTOP;


  PK0UW01.PK0UWSB2 = 22;
  while (PK0UW01.PK0UWSB2 >= 1)
    PK0UW01.PK0UWSB1 = PK0UW01.PK0UWTOP + PK0UW01.PK0UWSB2 - 1;

    if (PK0UW01.PK0UWSB1 <= PK0UW01.PK0UWMAX) /* within the array of cust #*/

       /* **************************************************/
       /* * these are changes or selects for  existing    **/
       /* *   customers...or adds created by overtyping   **/
       /* *   an existing customer.                       **/
       /* **************************************************/

      PK0U05G(); /* field by field test for changes*/


      if (PK0UM030.PK0UMACT[PK0UWSB2] == " " /* no action*/
       || PK0UM030.PK0UMACT[PK0UWSB2] == "V" /* viewed*/
       || PK0UM030.PK0UMACT[PK0UWSB2] == "S") /* selected- test for edits*/

        if (PK0UM030.KUCCOID[PK0UWSB2] is modified
         || PK0UM030.KUMSTRID[PK0UWSB2] is modified
         || PK0UM030.XNXCD[PK0UWSB2] is modified)

          set PK0UM030.PK0UMACT[PK0UWSB2] modified;
          PK0UW01.PK0UWEDT = "Y"; /* cust.modified flag*/
        else
          set PK0UM030.PK0UMACT[PK0UWSB2] initialAttributes;
        end

      else
        set PK0UM030.PK0UMACT[PK0UWSB2] modified;
        PK0UW01.PK0UWEDT = "Y"; /* cust.modified flag*/
      end


      if (PK0UM030.PK0UMACT[PK0UWSB2] == "S")
        set PK0UM030.PK0UMACT[PK0UWSB2] modified;
        PK0UW01.PK0UWSEL = "Y"; /* customer selected*/
      end


       /* **********************************************/
       /* * these are added lines at bottom......     **/
       /* **********************************************/

    else /* - new line added*/
      if (PK0UM030.KUCCOID[PK0UWSB2] > 0  /* company*/
       || PK0UM030.KUMSTRID[PK0UWSB2] > 0 /* store*/
       || PK0UM030.XNXCD[PK0UWSB2] > 0)   /* department*/

        set PK0UM030.PK0UMACT[PK0UWSB2] modified;
        set PK0UM030.KUCCOID[PK0UWSB2] modified; /* company*/
        set PK0UM030.KUMSTRID[PK0UWSB2] modified; /* store*/
        set PK0UM030.XNXCD[PK0UWSB2] modified; /* department*/
        PK0UW01.PK0UWEDT = "Y"; /* cust.modified flag*/
        if (PK0UM030.PK0UMACT[PK0UWSB2] == "S")
          PK0UW01.PK0UWSEL = "Y"; /* cust.selected flag*/
        end
      else
          /* ***********************************************/
          /* *   user has blanked out a previous add      **/
          /* ***********************************************/
        if (PK0UM030.PK0UMACT[PK0UWSB2] == " ") /* no action*/
          set PK0UM030.PK0UMACT[PK0UWSB2] initialAttributes; /* action*/
          set PK0UM030.KUCCOID[PK0UWSB2] initialAttributes; /* company*/
          set PK0UM030.KUMSTRID[PK0UWSB2] initialAttributes; /* store*/
          set PK0UM030.XNXCD[PK0UWSB2] initialAttributes; /* department*/
        else
          if (PK0UM030.PK0UMACT[PK0UWSB2] == "A") /* no action*/
            set PK0UM030.PK0UMACT[PK0UWSB2] cursor, modified, bold; /* action*/
            set PK0UM030.KUCCOID[PK0UWSB2] modified, bold; /* company*/
            set PK0UM030.KUMSTRID[PK0UWSB2] modified, bold; /* store*/
            set PK0UM030.XNXCD[PK0UWSB2] modified, bold; /* department*/
            converseLib.validationFailed(131); /* incomplete add*/
          else
            set PK0UM030.PK0UMACT[PK0UWSB2] cursor, modified, bold;
            converseLib.validationFailed(35); /* invalid action code*/
          end
        end
      end
    end
    PK0UW01.PK0UWSB2 = PK0UW01.PK0UWSB2 - 1; /* set down map index*/
  end


     /* ******************************************************/
      /* not allowed to edit & select within the same screen*/
     /* ******************************************************/


  if (PK0UW01.PK0UWSEL == "Y"
   && PK0UW01.PK0UWEDT == "Y")
    converseLib.validationFailed(25); /* doing select & edits*/
    PK0UW01.PK0UWSB2 = 22;
    while (PK0UW01.PK0UWSB2 >= 1)
      if (PK0UM030.PK0UMACT[PK0UWSB2] != " ")
        set PK0UM030.PK0UMACT[PK0UWSB2] cursor, modified, bold;
      end
      PK0UW01.PK0UWSB2 = PK0UW01.PK0UWSB2 - 1;
    end
  end



end // end PK0U051

// edit map line
Function PK0U052()
   /* ------------------------------------------------------*/
   /* * edit map lines from the bottom up*/
       /* * pk0uwsb2 - position on map display*/
       /* * pk0uwsb1 - position of same data within ws. array*/
       /* * pk0uwtop - position in ws. array of record*/
                    /* at the top of the screen.*/
   /* ------------------------------------------------------*/


  PK0UW01.PK0UWSB2 = 22;
  while (PK0UW01.PK0UWSB2 >= 1)
    if (PK0UM030.PK0UMACT[PK0UWSB2] is modified
     || PK0UM030.KUCCOID[PK0UWSB2] is modified
     || PK0UM030.KUMSTRID[PK0UWSB2] is modified
     || PK0UM030.XNXCD[PK0UWSB2] is modified)

         /* ***** find position of this record in w.s. array ****/

      PK0UW01.PK0UWSB1 = PK0UW01.PK0UWTOP + PK0UW01.PK0UWSB2 - 1;

      PK0U053(); /* edit line*/

    end

    PK0UW01.PK0UWSB2 = PK0UW01.PK0UWSB2 - 1;
  end





end // end PK0U052

// edit entered fields
Function PK0U053()

       /* --------------------------------------*/
       /* -  edit by action requested          -*/
       /* --------------------------------------*/

  if (PK0UM030.PK0UMACT[PK0UWSB2] == "S" /* select*/
   || PK0UM030.PK0UMACT[PK0UWSB2] == "D" /* delete*/
   || PK0UM030.PK0UMACT[PK0UWSB2] == "A" /* add*/
   || PK0UM030.PK0UMACT[PK0UWSB2] == "C" /* change*/
   || PK0UM030.PK0UMACT[PK0UWSB2] == " " 
   || PK0UM030.PK0UMACT[PK0UWSB2] == "V") /* viewed*/
  else
    converseLib.validationFailed(35); /* invalid action code error*/
    set PK0UM030.PK0UMACT[PK0UWSB2] cursor, modified, bold;
    return;
  end



  if (PK0UM030.PK0UMACT[PK0UWSB2] == "S") /* select requested*/
    PK0U054();
  end

  if (PK0UM030.PK0UMACT[PK0UWSB2] == "A") /* add requested*/
    PK0U055();
  end

  if (PK0UM030.PK0UMACT[PK0UWSB2] == "D") /* delete requested*/
    PK0U056();
  end

  if (PK0UM030.PK0UMACT[PK0UWSB2] == "C") /* change requested*/
    PK0U057();
  end

  if (PK0UM030.PK0UMACT[PK0UWSB2] == " " /* no action*/
   || PK0UM030.PK0UMACT[PK0UWSB2] == "V") /* viewed*/
    PK0U058();
  end



end // end PK0U053

// validate select action
Function PK0U054()

   /* *********************************************************/
   /* with "select" option -no fields can be changed from original*/

      /* pk0uw01.pk0uwsb2 - position on map*/
      /* pk0uw01.pk0uwsb1 - position of this data in w.s. array*/
   /* *********************************************************/

  PK0UW01.PKXKUACT[PK0UWSB1] = " "; /* clear prev.actions*/


  if (PK0UM030.KUCCOID[PK0UWSB2] != PK0UW01.KUCCOID[PK0UWSB1])
    set PK0UM030.PK0UMACT[PK0UWSB2] cursor, modified, bold;
    set PK0UM030.KUCCOID[PK0UWSB2] modified, bold;
    converseLib.validationFailed(25); /* can not do inquiry & update*/
  else
    set PK0UM030.KUCCOID[PK0UWSB2] initialAttributes;
  end

  if (PK0UM030.KUMSTRID[PK0UWSB2] != PK0UW01.KUMSTRID[PK0UWSB1]) /* store*/
    set PK0UM030.PK0UMACT[PK0UWSB2] cursor, modified, bold;
    set PK0UM030.KUMSTRID[PK0UWSB2] modified, bold;
    converseLib.validationFailed(25); /* can not do inquiry & update*/
  else
    set PK0UM030.KUMSTRID[PK0UWSB2] initialAttributes;
  end

  if (PK0UM030.XNXCD[PK0UWSB2] != PK0UW01.XNXCD[PK0UWSB1]) /* dept.*/
    set PK0UM030.PK0UMACT[PK0UWSB2] cursor, modified, bold;
    set PK0UM030.XNXCD[PK0UWSB2] modified, bold;
    converseLib.validationFailed(25); /* can not do inquiry & update*/
  else
    set PK0UM030.XNXCD[PK0UWSB2] initialAttributes;
  end




end // end PK0U054

// validate add action
Function PK0U055()

   /* *********************************************************/
   /* purpose:    adding a new customer---*/

      /* pk0uw01.pk0uwsb2 - position on map*/
      /* pk0uw01.pk0uwsb1 - position of this data in w.s. array*/
   /* *********************************************************/

   /* *********************************************************/
       /* --- verify new customer number ---*/
   /* *********************************************************/

  PK0UW01.PKXKUACT[PK0UWSB1] = " "; /* clear prev.action*/

    /* see if this customer number already exists as non planned*/
    /* reformat entire customer number from map......*/

  PK0UW01.PK0UWC1 = PK0UM030.KUCCOID[PK0UWSB2]; /* customer*/
  PK0UW01.PK0UWC2 = PK0UM030.KUMSTRID[PK0UWSB2]; /* store*/
  PK0UW01.PK0UWC3 = PK0UM030.XNXCD[PK0UWSB2]; /* depart.*/

  if (PK0UW01.PK0UWCX2 in PK0UW01.PK0UWCUS) /* existing cust.*/
    set PK0UM030.KUCCOID[PK0UWSB2] cursor, modified, bold;
    set PK0UM030.KUMSTRID[PK0UWSB2] modified, bold;
    set PK0UM030.XNXCD[PK0UWSB2] modified, bold;
    converseLib.validationFailed(88); /* customer # already exists*/
    return;
  else
     /* *********************************************************/
       /* -be sure this customer is not being added on two lines*/
     /* *********************************************************/

    PK0UW01.PK0UWSB3 = PK0UW01.PK0UWSB2 - 1;
    while (PK0UW01.PK0UWSB3 >= 1)
      if (PK0UM030.KUCCOID[PK0UWSB3] == PK0UM030.KUCCOID[PK0UWSB2]   /* cust*/
       && PK0UM030.KUMSTRID[PK0UWSB3] == PK0UM030.KUMSTRID[PK0UWSB2] /* st*/
       && PK0UM030.XNXCD[PK0UWSB3] == PK0UM030.XNXCD[PK0UWSB2])      /* dept*/
        set PK0UM030.KUCCOID[PK0UWSB2] cursor, modified, bold;
        set PK0UM030.KUCCOID[PK0UWSB3] modified, bold;
        set PK0UM030.KUMSTRID[PK0UWSB2] modified, bold;
        set PK0UM030.KUMSTRID[PK0UWSB3] modified, bold;
        set PK0UM030.XNXCD[PK0UWSB2] modified, bold;
        set PK0UM030.XNXCD[PK0UWSB3] modified, bold;
        converseLib.validationFailed(89); /* customer # already exists*/
        return;
      end
      PK0UW01.PK0UWSB3 = PK0UW01.PK0UWSB3 - 1;
    end

     /* ******************************************************/
             /* - customer edits-----*/
     /* ******************************************************/

    PK0U05D(); /* customer on hold?*/

    if (PK0UW01.PK0UWFL1 == "N") /* cust not on hold*/
      PK0U05E(); /* customer in pool?*/
      if (PK0UW01.PK0UWFL1 == "Y") /* customer error*/
        return;
      end
    else /* cust is on hold-*/
      converseLib.validationFailed(81); /* customer is currently on hold*/
      set PK0UM030.KUCCOID[PK0UWSB2] cursor, modified, bold;
      set PK0UM030.KUMSTRID[PK0UWSB2] modified, bold;
      set PK0UM030.XNXCD[PK0UWSB2] modified, bold;
      return;
    end
  end



end // end PK0U055

// validate delete action
Function PK0U056()

   /* *********************************************************/
   /* with "delete" option -no fields can be changed from original*/

      /* pk0uw01.pk0uwsb2 - position on map*/
      /* pk0uw01.pk0uwsb1 - position of this data in w.s. array*/
   /* *********************************************************/

  PK0UW01.PKXKUACT[PK0UWSB1] = " "; /* clear prev.action*/

  if (PK0UM030.KUCCOID[PK0UWSB2] != PK0UW01.KUCCOID[PK0UWSB1]) /* company*/
    set PK0UM030.PK0UMACT[PK0UWSB2] cursor, modified, bold;
    set PK0UM030.KUCCOID[PK0UWSB2] modified, bold;
    converseLib.validationFailed(35); /* invalid option code*/
  else
    set PK0UM030.KUCCOID[PK0UWSB2] initialAttributes;
  end

  if (PK0UM030.KUMSTRID[PK0UWSB2] != PK0UW01.KUMSTRID[PK0UWSB1]) /* store*/
    set PK0UM030.PK0UMACT[PK0UWSB2] cursor, modified, bold;
    set PK0UM030.KUMSTRID[PK0UWSB2] modified, bold;
    converseLib.validationFailed(35); /* invalid option code*/
  else
    set PK0UM030.KUMSTRID[PK0UWSB2] initialAttributes;
  end

  if (PK0UM030.XNXCD[PK0UWSB2] != PK0UW01.XNXCD[PK0UWSB1]) /* dept.*/
    set PK0UM030.PK0UMACT[PK0UWSB2] cursor, modified, bold;
    set PK0UM030.XNXCD[PK0UWSB2] modified, bold;
    converseLib.validationFailed(35); /* invalid option code*/
  else
    set PK0UM030.XNXCD[PK0UWSB2] initialAttributes;
  end




end // end PK0U056

// validate change action
Function PK0U057()

   /* *********************************************************/
   /* with "change" option - customer can not be modified....*/

      /* pk0uw01.pk0uwsb2 - position on map*/
      /* pk0uw01.pk0uwsb1 - position of this data in w.s. array*/
   /* *********************************************************/

  PK0UW01.PKXKUACT[PK0UWSB1] = " "; /* clear prev.action*/


  if (PK0UM030.KUCCOID[PK0UWSB2] != PK0UW01.KUCCOID[PK0UWSB1]   /* company*/
   || PK0UM030.KUMSTRID[PK0UWSB2] != PK0UW01.KUMSTRID[PK0UWSB1] /* store*/
   || PK0UM030.XNXCD[PK0UWSB2] != PK0UW01.XNXCD[PK0UWSB1])      /* dept.*/
    PK0U05A(); /* edit error*/

  end



end // end PK0U057

// a blank action field
Function PK0U058()

   /* *********************************************************/
   /* with "blank" option -no fields can be changed from original*/

      /* pk0uw01.pk0uwsb2 - position on map*/
      /* pk0uw01.pk0uwsb1 - position of this data in w.s. array*/
   /* *********************************************************/

  if (PK0UM030.KUCCOID[PK0UWSB2] != PK0UW01.KUCCOID[PK0UWSB1]) /* company*/
    set PK0UM030.PK0UMACT[PK0UWSB2] cursor, modified, bold;
    set PK0UM030.KUCCOID[PK0UWSB2] modified, bold;
    converseLib.validationFailed(43); /* fields modified, action required*/
  else
    set PK0UM030.KUCCOID[PK0UWSB2] initialAttributes;
  end

  if (PK0UM030.KUMSTRID[PK0UWSB2] != PK0UW01.KUMSTRID[PK0UWSB1]) /* store*/
    set PK0UM030.PK0UMACT[PK0UWSB2] cursor, modified, bold;
    set PK0UM030.KUMSTRID[PK0UWSB2] modified, bold;
    converseLib.validationFailed(43); /* fields modified, action required*/
  else
    set PK0UM030.KUMSTRID[PK0UWSB2] initialAttributes;
  end

  if (PK0UM030.XNXCD[PK0UWSB2] != PK0UW01.XNXCD[PK0UWSB1]) /* dept.*/
    set PK0UM030.PK0UMACT[PK0UWSB2] cursor, modified, bold;
    set PK0UM030.XNXCD[PK0UWSB2] modified, bold;
    converseLib.validationFailed(43); /* fields modified, action required*/
  else
    set PK0UM030.XNXCD[PK0UWSB2] initialAttributes;
  end



end // end PK0U058

// change-cust.num edit
Function PK0U05A()

   /* *********************************************************/
   /* with "change" option -no customer number may be changed.*/

   /* *********************************************************/

  if (PK0UM030.KUCCOID[PK0UWSB2] != PK0UW01.KUCCOID[PK0UWSB1]   /* company*/
   || PK0UM030.KUMSTRID[PK0UWSB2] != PK0UW01.KUMSTRID[PK0UWSB1] /* store*/
   || PK0UM030.XNXCD[PK0UWSB2] != PK0UW01.XNXCD[PK0UWSB1])      /* dept.*/
    set PK0UM030.PK0UMACT[PK0UWSB2] cursor, modified, bold; /* action*/
    set PK0UM030.KUCCOID[PK0UWSB2] modified, bold; /* company*/
    set PK0UM030.KUMSTRID[PK0UWSB2] modified, bold; /* store*/
    set PK0UM030.XNXCD[PK0UWSB2] modified, bold; /* dept.*/
    converseLib.validationFailed(82); /* a change to cust # is an add*/
  else
    set PK0UM030.KUCCOID[PK0UWSB2] initialAttributes;
    set PK0UM030.KUMSTRID[PK0UWSB2] initialAttributes;
    set PK0UM030.XNXCD[PK0UWSB2] initialAttributes;
  end


  if (PK0UM030.KUMSTRID[PK0UWSB2] != PK0UW01.KUMSTRID[PK0UWSB1]) /* store*/
    set PK0UM030.PK0UMACT[PK0UWSB2] cursor, modified, bold;
    set PK0UM030.KUMSTRID[PK0UWSB2] modified, bold;
    converseLib.validationFailed(82); /* a change to cust # is an add*/
  else
    set PK0UM030.KUMSTRID[PK0UWSB2] initialAttributes;
  end


  if (PK0UM030.XNXCD[PK0UWSB2] != PK0UW01.XNXCD[PK0UWSB1]) /* dept.*/
    set PK0UM030.PK0UMACT[PK0UWSB2] cursor, modified, bold;
    set PK0UM030.XNXCD[PK0UWSB2] modified, bold;
    converseLib.validationFailed(82); /* a change to cust # is an add*/
  else
    set PK0UM030.XNXCD[PK0UWSB2] initialAttributes;
  end



end // end PK0U05A

// is customer on cust.hold?
Function PK0U05D()
   /* ----------------------------------------------------*/
     /* is customer on hold ???*/
   /* ----------------------------------------------------*/



  PK9REC.XWHCD = PK0UM030.XWHCD;
  PK9REC.KUCCOID = PK0UM030.KUCCOID[PK0UWSB2]; /* comp*/
  PK9REC.KUMSTRID = PK0UM030.KUMSTRID[PK0UWSB2]; /* store*/
  PK9REC.XNXCD = PK0UM030.XNXCD[PK0UWSB2]; /* dept.*/
  PK0UW01.PK0UWFL1 = "N"; /* reset flag field*/

  PKZREC.PKZFUNC = "S1"; /* set up for customer hold*/
  call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes}; /* ss on cust.holds*/

  if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* indicate unavailable*/
      TA1REC.TA1FUNC = "POST"; /* termination function*/
      TA1REC.TA1LOC = "S1 - CUST.HOLD FILE          ";
    else
      if (SQLCA.VAGen_SQLCODE != 100)
        converseLib.validationFailed(29); /* indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* termination function*/
        TA1REC.TA1LOC = "S1 FROM CUST. HOLD FILE      ";
      end
    end
  end



  if (SQLCA.VAGen_SQLCODE == 0) /* good return from s2 above*/
    while (SQLCA.VAGen_SQLCODE == 0 /* good return within loop*/
     && PK0UW01.PK0UWFL1 == "N") /* none found....*/
      call "IO1790" ("N1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes}; /* fetch next record*/

      if (SQLCA.VAGen_SQLCODE == 0) /* good fetch*/
        if (PK9REC.PK9PLRDT > PK0UW01.PK0UWCDT) /* pk0lwdt1 = curr. date*/
          PK0UW01.PK0UWFL1 = "Y"; /* found current 'on hold'*/
        end
      end
    end
    PKZREC.PKZFUNC = "C1"; /* close set -customer hold*/
    call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes}; /* ss on cust.holds*/
  end

  if (SQLCA.VAGen_SQLCODE != 0 /* unexpected return cd*/
   && SQLCA.VAGen_SQLCODE != 100) /* end of data*/
    TA1REC.TA1TYPE = "DB2 "; /* type of error*/
    TA1REC.TA1PGMNM = "PK0U05D"; /* process name*/
    TA1REC.TA1LOC = "S1 FROM CUSTOMER SELECT FILE";
    TA1REC.TA1MAP = "PK0UM030"; /* map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* database name*/
    TA1REC.TA1TBLVU = "VCUHLD01"; /* table view name*/
    TA1REC.TA1TBLKE = PKWREC.XWHCD; /* table key*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
    XSPF4(); /* ; send to master menu*/

    return;
  end



end // end PK0U05D

// is cust. in pick pool?
Function PK0U05E()
   /* ----------------------------------------------------*/
   /* purpose:  customer must be in pick customer file*/

   /* ----------------------------------------------------*/


   /* first check to see if this is a good customer number*/


  PK0UW01.PK0UWFL2 = "N"; /* reset warning flag*/

  PK6REC.KUCCOID = PK0UM030.KUCCOID[PK0UWSB2]; /* comp*/
  PK6REC.KUMSTRID = PK0UM030.KUMSTRID[PK0UWSB2]; /* store*/
  call "IO1830" ("S ", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes}; /* cust.list*/
  if (SQLCA.VAGen_SQLCODE == 0) /* ; good fetch*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      set PK0UM030.KUCCOID[PK0UWSB2] cursor, modified, bold;
      set PK0UM030.KUMSTRID[PK0UWSB2] modified, bold;
      set PK0UM030.XNXCD[PK0UWSB2] modified, bold;
      converseLib.validationFailed(86); /* ; invalid customer number*/
      PK0UW01.PK0UWFL1 = "Y"; /* customer error*/
      return;
    end
  end

  if (SQLCA.VAGen_SQLCODE != 0 /* unexpected return cd*/
   && SQLCA.VAGen_SQLCODE != 100) /* end of data*/
    TA1REC.TA1TYPE = "DB2 "; /* type of error*/
    TA1REC.TA1PGMNM = "PK0U05E"; /* process name*/
    TA1REC.TA1LOC = "S1 FROM CUSTOMER SELECT FILE";
    TA1REC.TA1MAP = "PK0UM030"; /* map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* database name*/
    TA1REC.TA1TBLVU = "        "; /* table view name*/
    TA1REC.TA1TBLKE = PK0UM030.KUCCOID[PK0UWSB2]; /* table key*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
    XSPF4(); /* ; send to master menu*/

    return;
  end

   /* next check to see if the customer has an order in the*/
   /* pool file. this is not a fatal error but will result in*/
   /* a warning message.*/


  PK4REC.XWHCD = PK0UM030.XWHCD;
  PK4REC.KUCCOID = PK0UM030.KUCCOID[PK0UWSB2]; /* comp*/
  PK4REC.KUMSTRID = PK0UM030.KUMSTRID[PK0UWSB2]; /* store*/
  PK4REC.XNXCD = PK0UM030.XNXCD[PK0UWSB2]; /* dept.*/
  PK0UW01.PK0UWFL2 = "N"; /* reset warning flag*/
  PWIREC.PWIFUNC = "S2";

  call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* ss -cust.order pool*/

  if (SQLCA.VAGen_SQLCODE != 0) /* ; bad return cd*/
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* ; unavailabel resource*/
      TA1REC.TA1FUNC = "POST"; /* termination function*/
      TA1REC.TA1LOC = "S2 - CUST.ORDER POOL         ";
      PK0UM030.XXXERRID = "PK0U05E"; /* error location*/
    else
      if (SQLCA.VAGen_SQLCODE != 100)
        converseLib.validationFailed(29); /* ; system error*/
        TA1REC.TA1FUNC = "RETN"; /* termination function*/
        TA1REC.TA1LOC = "S2 FROM CUST. ORDER POOL     ";
        PK0UM030.XXXERRID = "PK0U05E"; /* error location*/
      end
    end
  end



  if (SQLCA.VAGen_SQLCODE == 0) /* ; good return from set*/
    PWIREC.PWIFUNC = "N2";

    call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* fetch nedt record*/

    if (SQLCA.VAGen_SQLCODE == 0) /* ; good return...*/
                                        /* ; found customer in pool*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* ; not found*/
        set PK0UM030.KUCCOID[PK0UWSB2] cursor, modified, bold;
        set PK0UM030.KUMSTRID[PK0UWSB2] modified, bold;
        set PK0UM030.XNXCD[PK0UWSB2] modified, bold;
        converseLib.validationFailed(85); /* warning: cust. not in pick pool*/
        PK0UW01.PK0UWFL2 = "Y"; /* customer error*/
      else
        TA1REC.TA1FUNC = "RETN"; /* termination function*/
        TA1REC.TA1LOC = "S  FROM DPICK.VPKCUS01       ";
      end
    end
  end

  PWIREC.PWIFUNC = "N2";
  call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
                                   /* ss -cust.order pool close*/

  if (SQLCA.VAGen_SQLCODE != 0 /* unexpected return cd*/
   && SQLCA.VAGen_SQLCODE != 100) /* end of data*/
    TA1REC.TA1TYPE = "DB2 "; /* type of error*/
    TA1REC.TA1PGMNM = "PK0U05E"; /* process name*/
    TA1REC.TA1LOC = "S1 FROM CUSTOMER SELECT FILE";
    TA1REC.TA1MAP = "PK0UM030"; /* map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* database name*/
    TA1REC.TA1TBLVU = "        "; /* table view name*/
    TA1REC.TA1TBLKE = PK0UM030.KUCCOID[PK0UWSB2]; /* table key*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
    XSPF4(); /* ; send to master menu*/

    return;
  end



end // end PK0U05E

// field by field ck for changes
Function PK0U05G()


       /* ***************************************************/
       /* *   has user blanked a previous modification??   **/
       /* *     move back original data................    **/
       /* ***************************************************/
  if (PK0UM030.PK0UMACT[PK0UWSB2] <= " " /* action*/
   && PK0UM030.KUCCOID[PK0UWSB2] <= 0    /* company*/
   && PK0UM030.KUMSTRID[PK0UWSB2] <= 0   /* store*/
   && PK0UM030.XNXCD[PK0UWSB2] <= 0)     /* department*/

    PK0UM030.KUCCOID[PK0UWSB2] = PK0UW01.KUCCOID[PK0UWSB1];
    PK0UM030.KUMSTRID[PK0UWSB2] = PK0UW01.KUMSTRID[PK0UWSB1];
    PK0UM030.XNXCD[PK0UWSB2] = PK0UW01.XNXCD[PK0UWSB1];
  end


       /* **********************************************/
       /* * field by field test for changes           **/
       /* **********************************************/


  if (PK0UM030.KUCCOID[PK0UWSB2] != PK0UW01.KUCCOID[PK0UWSB1]) /* company*/
    set PK0UM030.KUCCOID[PK0UWSB2] modified;
    PK0UW01.PK0UWEDT = "Y"; /* cust.modified flag*/
  else
    set PK0UM030.KUCCOID[PK0UWSB2] initialAttributes;
  end

  if (PK0UM030.KUMSTRID[PK0UWSB2] != PK0UW01.KUMSTRID[PK0UWSB1]) /* store*/
    set PK0UM030.KUMSTRID[PK0UWSB2] modified;
    PK0UW01.PK0UWEDT = "Y"; /* cust.modified flag*/
  else
    set PK0UM030.KUMSTRID[PK0UWSB2] initialAttributes;
  end

  if (PK0UM030.XNXCD[PK0UWSB2] != PK0UW01.XNXCD[PK0UWSB1]) /* depart.*/
    set PK0UM030.XNXCD[PK0UWSB2] modified;
    PK0UW01.PK0UWEDT = "Y"; /* cust.modified flag*/
  else
    set PK0UM030.XNXCD[PK0UWSB2] initialAttributes;
  end



end // end PK0U05G

// Transfer to customer inq
Function PK0U070()
   /* ------------------------------------------------------------*/
   /* Clear the common array and move the selected customer*/
   /* numbers into it.*/
   /* Transfer control to the customer inquiry application.*/
   /* ------------------------------------------------------------*/

  set PKXREC empty; /* Clear cust. array*/


  PK0U071(); /* Move selected customers*/

  PKXREC.XWHCD = PKWREC.XWHCD; /* move warehouse code back*/
  PKXREC.XWHABRV = PKWREC.XWHABRV; /* and warehouse abbreviation*/

  PKWREC.PKWARRAY[1] = PKXREC.PKWARRAY; /* Inquiry keys array*/

  PKWREC.PKWSLTYP[1] = "C"; /* Inquiry selection type*/
  PKWREC.PKWINDEX = 1;
  PKWREC.PKWFRMAP[1] = "PK0U"; /* Previous application*/

  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* COMMAREA user area*/

  COMMAREA.CATOAP = "PK0D"; /* PICKING customer inquiry*/

  XSEXIT(); /* Transfer to cust. Inquiry*/

       /* **************************************************/
       /* **********  if xsexit did not work:   ************/
       /* **************************************************/
  PK0UM030.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
  converseLib.validationFailed(); /* problem exists!!!!!*/
  PK0UM030.XXXERRID = "PK0U070 "; /* Error location*/

  exit stack; /* redisplay map*/



end // end PK0U070

// Move selected order numbers
Function PK0U071()
   /* ------------------------------------------------------------*/
   /* If the line was selected for inquiry, move the customer num*/
   /* to the common key array.*/
   /* ------------------------------------------------------------*/

  PK0UW01.PK0UWSB2 = 1; /* position on map*/
  PK0UW01.PK0UWSB1 = 1; /* position in pass record*/

    /* **** move the first map line into array for returning *****/

  PKXREC.PKXKUACT[PK0UWSB1] = PK0UM030.PK0UMACT[PK0UWSB2]; /* act.*/

  if (PK0UW01.XBCCD[PK0UWSB2] == "08") /* colehaan*/
    PKXREC.KUCCOID[PK0UWSB1] = PK0UW01.PK0UW-CO-I[PK0UWSB2];
  else
    PKXREC.KUCCOID[PK0UWSB1] = PK0UM030.KUCCOID[PK0UWSB2]; /* cust.*/
  end

  PKXREC.KUMSTRID[PK0UWSB1] = PK0UM030.KUMSTRID[PK0UWSB2]; /* st.*/
  PKXREC.XNXCD[PK0UWSB1] = PK0UM030.XNXCD[PK0UWSB2]; /* dept.*/
  PK0UW01.PK0UWSB2 = 2; /* position on map*/
  PK0UW01.PK0UWSB1 = 2; /* position in pass record*/



  while (PK0UW01.PK0UWSB2 <= 22)
    if (PK0UM030.PK0UMACT[PK0UWSB2] == "S") /* Selected for inquiry*/

      PKXREC.PKXKUACT[PK0UWSB1] = PK0UM030.PK0UMACT[PK0UWSB2];

      if (PK0UM030.XBCCD[PK0UWSB2] == "08") /* colehaan*/
        PKXREC.KUCCOID[PK0UWSB1] = PK0UW01.PK0UW-CO-I[PK0UWSB2];
      else
        PKXREC.KUCCOID[PK0UWSB1] = PK0UM030.KUCCOID[PK0UWSB2];
      end

      PKXREC.KUMSTRID[PK0UWSB1] = PK0UM030.KUMSTRID[PK0UWSB2]; /* st.*/
      PKXREC.XNXCD[PK0UWSB1] = PK0UM030.XNXCD[PK0UWSB2]; /* dept.*/

      PK0UW01.PK0UWSB1 = PK0UW01.PK0UWSB1 + 1; /* Increment array index*/

    end

    PK0UW01.PK0UWSB2 = PK0UW01.PK0UWSB2 + 1; /* Increment map index*/
  end



end // end PK0U071

// database update.
Function PK0U080()


    /* ************************************************/
    /* * clear out the problem customer update list  **/
    /* ************************************************/

  PK0UW01.PK0UWSB3 = 1;
  while (PK0UW01.PK0UWSB3 <= 22)
    PK0UW01.PK0UWPBM[PK0UWSB3] = 0;
    PK0UW01.PK0UWSB3 = PK0UW01.PK0UWSB3 + 1;
  end


    /* ************************************************/
    /* * do all database updates possible .........  **/
    /* ************************************************/

  PK0UW01.PK0UWSB3 = 1;
  PK0UW01.PK0UWSB2 = 1;
  while (PK0UW01.PK0UWSB2 <= 22)
      /* *********************************************************/
      /* * pk0uwsb1 is the location of map record in w.s. array **/
      /* *     pk0uwtop = loc. in w.s. of record at top of screen*/
      /* *                display                               **/
      /* *     pk0uwsb2 = loc. on screen of current record.     **/
      /* *********************************************************/
    PK0UW01.PK0UWSB1 = PK0UWTOP + PK0UWSB2 - 1;

    if (PK0UM030.PK0UMACT[PK0UWSB2] == "A")
      PK0US81(); /* database add*/
    end

    if (PK0UM030.PK0UMACT[PK0UWSB2] == "D")
      PK0US82(); /* database delete*/
    end

    if (PK0UM030.PK0UMACT[PK0UWSB2] == "C")
      PK0US83(); /* database change*/
    end

    PK0UW01.PK0UWSB2 = PK0UW01.PK0UWSB2 + 1;
  end



end // end PK0U080

// clear map
Function PK0US22()
   /* ---------------------------------------------------*/
      /* clear the map*/
   /* ---------------------------------------------------*/

  PK0UW01.PK0UWHS = PK0UM030.XWHCD; /* warehouse code*/
  PK0UW01.PK0UWER = PK0UM030.XXXERRID; /* warehouse code*/
  PK0UW01.PK0UWABR = PK0UM030.XWHABRV; /* warehouse abbrev.*/

  set PK0UM030 initial; /* ; clear map area*/
  set PK4REC empty; /* ; empty pool header record*/
  set PKGREC empty;

  PK0UM030.XXXCURDT = VGVar.currentShortGregorianDate; /* date to map*/
  PK0UM030.XWHABRV = PK0UW01.PK0UWABR; /* warehouse abbrev.*/
  PK0UM030.XXXERRID = PK0UW01.PK0UWER;
  PK0UM030.XWHCD = PK0UW01.PK0UWHS; /* warehouse code*/
  PK0UM030.XXXRVNBR = "01"; /* revision number*/



end // end PK0US22

// add new database rec
Function PK0US81()
   /* ----------------------------------------------------------*/
   /* read to verify new add*/
   /* ----------------------------------------------------------*/

  set PKGREC empty;
  set SQLCA empty;

  PKGREC.XWHCD = PKWREC.XWHCD;

  if (PK0UW01.XBCCD[PK0UWSB2] == "08")
    PKGREC.KUCCOID = PK0UW01.PK0UW-CO-I[PK0UWSB2]; /* company*/
  else
    PKGREC.KUCCOID = PK0UM030.KUCCOID[PK0UWSB2]; /* company*/
  end
  PKGREC.KUMSTRID = PK0UM030.KUMSTRID[PK0UWSB2]; /* store*/
  PKGREC.XNXCD = PK0UM030.XNXCD[PK0UWSB2]; /* dept*/
  PKGREC.PKURUNMD = "P"; /* runmode*/

  call "IO1730" ("S ", SQLCA, PKGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0) /* customer added already....*/
    converseLib.validationFailed(112); /* table updated since last ref*/
    PK0UW01.PK0UWUPD = "Y"; /* database updated flag*/
  else
    if (SQLCA.VAGen_SQLCODE == +911) /* database contention   ....*/
      PK0UW01.PK0UWA91 = "Y"; /* database contention flag*/
      PK0UW01.PK0UWUPD = "Y"; /* display updated db flag*/
      PK0UW01.PK0UWC1 = PK0UM030.KUCCOID[PK0UWSB2]; /* cust #*/
      PK0UW01.PK0UWC2 = PK0UM030.KUMSTRID[PK0UWSB2]; /* store#*/
      PK0UW01.PK0UWC3 = PK0UM030.XNXCD[PK0UWSB2]; /* dept #*/
      PK0UW01.PK0UWPBM[PK0UWSB3] = PK0UW01.PK0UWCX2;
      PK0UW01.PK0UWSB3 = PK0UW01.PK0UWSB3 + 1; /* bump up sub.*/
      PK0UM030.XXXERRID = "PK0U081"; /* problem location*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != +100)
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "PK0U";
        TA1REC.TA1LOCAT[1] = "S ";
        TA1REC.TA1LOCAT[2] = "PK0U081";
        TA1REC.TA1LOCAT[3] = "IO1730";
        TA1REC.TA1MAP = "PK0UM030";
        TA1REC.TA1DBASE = "DPICK.";
        TA1REC.TA1TBLVU = "VSELCU01"; /* table view*/
        TA1REC.TA1TBLKE = PK0UM030.KUCCOID; /* table key*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        XSPF4();
        VAGen_EZEMSG = 9999;
        exit stack;
      end
    end
  end

     /* **************  add  new record  *************/
  if (SQLCA.VAGen_SQLCODE == +100)

    if (PK0UM030.KUCCOID[PK0UWSB2] >= 8000000
     && PK0UM030.KUCCOID[PK0UWSB2] < 9000000)

      PKGREC.XBCCD = "08";
    else
      PKGREC.XBCCD = " ";
    end

    if (PKWREC.XDVCD[1] == "*")
      PKGREC.XDVCD = " ";
    else
      PKGREC.XDVCD = PKWREC.XDVCD[1];
    end

    PKGREC.XWHCD = PKWREC.XWHCD; /* whse code*/
    PKGREC.KUCCOID = PK0UM030.KUCCOID[PK0UWSB2]; /* company*/
    PKGREC.KUMSTRID = PK0UM030.KUMSTRID[PK0UWSB2]; /* store*/
    PKGREC.XNXCD = PK0UM030.XNXCD[PK0UWSB2]; /* dept*/
    PKGREC.XGPCD = "00"; /* prod.class cd.*/
    PKGREC.XPPCD = "30"; /* picking priority*/
    PKGREC.PKURUNMD = "P"; /* runmode*/
    PK0US84(); /* date/time*/

    call "IO1730" ("A ", SQLCA, PKGREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == +0)
      PK0UW01.PK0UWUPD = "Y"; /* display updated database*/
      PK0UW01.PK0UWDDB = "Y"; /* database updated*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "PK0U";
      TA1REC.TA1LOCAT[1] = "A ";
      TA1REC.TA1LOCAT[2] = "PK0US81";
      TA1REC.TA1LOCAT[3] = "IO0730";
      TA1REC.TA1MAP = "PK0UM030";
      TA1REC.TA1DBASE = "DPICK.";
      TA1REC.TA1TBLVU = "VSELCU01"; /* table view*/
      TA1REC.TA1TBLKE = PK0UM030.KUCCOID; /* table key*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      XSPF4();
      VAGen_EZEMSG = 9999;
      exit stack;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0
   && converseVar.validationMsgNum == 0)
    converseLib.validationFailed(91); /* d.b. updated*/
    return;
  else
    return;
  end

end // end PK0US81

// delete  database rec
Function PK0US82()
   /* ----------------------------------------------------------*/
   /* find original record for delete*/
   /* ----------------------------------------------------------*/

  set PKGREC empty;
  set SQLCA empty;

  PKGREC.XWHCD = PKWREC.XWHCD; /* warehouse*/

  if (PK0UW01.XBCCD[PK0UWSB2] == "08")
    PKGREC.KUCCOID = PK0UW01.PK0UW-CO-I[PK0UWSB2];
  else
    PKGREC.KUCCOID = PK0UM030.KUCCOID[PK0UWSB2]; /* company*/
  end

  PKGREC.KUMSTRID = PK0UM030.KUMSTRID[PK0UWSB2]; /* store*/
  PKGREC.XNXCD = PK0UM030.XNXCD[PK0UWSB2]; /* dept*/

  PKGREC.PKURUNMD = "P"; /* runmode*/

  call "IO1730" ("S ", SQLCA, PKGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)

    call "IO1730" ("D ", SQLCA, PKGREC) {isNoRefresh = yes, isExternal = yes};

  end



  if (SQLCA.VAGen_SQLCODE == +0
   || SQLCA.VAGen_SQLCODE == 100)
    PK0UW01.PK0UWUPD = "Y"; /* display updated database*/
    PK0UW01.PK0UWDDB = "Y"; /* database updated*/
    converseLib.validationFailed(91); /* database updated*/
    PK0UW01.PK0UWPBM[PK0UWSB3] = PK0UW01.PK0UWCUS[PK0UWSB1];
    PK0UW01.PK0UWSB3 = PK0UW01.PK0UWSB3 + 1;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      PK0UW01.PK0UWC91 = "Y"; /* database contention flag*/
      PK0UW01.PK0UWUPD = "Y"; /* display updated database*/
      PK0UW01.PK0UWPBM[PK0UWSB3] = PK0UW01.PK0UWCUS[PK0UWSB1];
      PK0UW01.PK0UWSB3 = PK0UW01.PK0UWSB3 + 1; /* bump up sub*/
      PK0UM030.XXXERRID = "PK0U082"; /* error location*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "PK0U";
      TA1REC.TA1LOCAT[1] = "D ";
      TA1REC.TA1LOCAT[2] = "PK0U082";
      TA1REC.TA1LOCAT[3] = "IO0730";
      TA1REC.TA1MAP = "PK0UM030";
      TA1REC.TA1DBASE = "DPICK.";
      TA1REC.TA1TBLVU = "VSELCU01"; /* table view*/
      TA1REC.TA1TBLKE = PK0UM030.KUCCOID; /* table key*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
      VAGen_EZEMSG = 9999;
      exit stack;
    end
  end



end // end PK0US82

// change  database rec
Function PK0US83()
   /* ---------------------------------------------------------*/
   /* find original record for change*/
   /* ---------------------------------------------------------*/

  set PKGREC empty;
  set SQLCA empty;

  PKGREC.XWHCD = PKWREC.XWHCD; /* warehouse*/

  if (PK0UW01.XBCCD[PK0UWSB2] == "08")
    PKGREC.KUCCOID = PK0UW01.PK0UW-CO-I[PK0UWSB2]; /* company*/
  else
    PKGREC.KUCCOID = PK0UM030.KUCCOID[PK0UWSB2]; /* company*/
  end
  PKGREC.KUCCOID = PK0UM030.KUCCOID[PK0UWSB2]; /* company*/
  PKGREC.KUMSTRID = PK0UM030.KUMSTRID[PK0UWSB2]; /* store*/
  PKGREC.XNXCD = PK0UM030.XNXCD[PK0UWSB2]; /* dept*/

  PKGREC.PKURUNMD = "P"; /* ; runmode*/

  call "IO1730" ("S ", SQLCA, PKGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    if (PK0UW01.ZZZCHGCT[PK0UWSB1] != PKGREC.ZZZCHGCT) /* change count*/
      PK0UW01.PK0UWCCT = "Y"; /* ; change ct error flag*/
      PK0UW01.PK0UWUPD = "Y"; /* display updated db.*/
      PK0UW01.PK0UWPBM[PK0UWSB3] = PK0UW01.PK0UWCUS[PK0UWSB1];
      PK0UW01.PK0UWSB3 = PK0UW01.PK0UWSB3 + 1; /* bump up*/
      return; /* ; do not update*/
    end

    PK0US84(); /* ; date & time*/

    call "IO1730" ("U ", SQLCA, PKGREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == +0)
      PK0UW01.PK0UWUPD = "Y"; /* display updated db.*/
      PK0UW01.PK0UWDDB = "Y"; /* database updated*/
      converseLib.validationFailed(91); /* ; database updated*/
    end
  end



  if (SQLCA.VAGen_SQLCODE == -911)
    PK0UW01.PK0UWC91 = "Y"; /* ; contention on change*/
    PK0UW01.PK0UWUPD = "Y"; /* display updated db.*/
    PK0UW01.PK0UWPBM[PK0UWSB3] = PK0UW01.PK0UWCUS[PK0UWSB1];
    PK0UW01.PK0UWSB3 = PK0UW01.PK0UWSB3 + 1; /* bump up*/
    PK0UM030.XXXERRID = "PK0U083"; /* error location*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      PK0UW01.PK0UWCDL = "Y"; /* ; someone deleted it!!!*/
      PK0UW01.PK0UWUPD = "Y"; /* ; display updated db.*/
    else
      if (SQLCA.VAGen_SQLCODE != +0)
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "PK0U";
        TA1REC.TA1LOCAT[1] = "U ";
        TA1REC.TA1LOCAT[2] = "PK0U083";
        TA1REC.TA1LOCAT[3] = "IO0730";
        TA1REC.TA1MAP = "PK0UM030";
        TA1REC.TA1DBASE = "DPICK.";
        TA1REC.TA1TBLVU = "VSELCU01"; /* table view*/
        TA1REC.TA1TBLKE = PK0UM030.KUCCOID; /* table key*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        XSPF4();
        VAGen_EZEMSG = 9999;
        exit stack;
      end
    end
  end



end // end PK0US83

// dates for new/changed records
Function PK0US84()



   /*  */
   /* --------------- y2k out begin ------------*/
   /*  */
   /* MOVE EZEDTE TO PK0UW01.PK0UWFDA;  /* date*/
   /* MOVE '19' TO PK0UW01.PK0UWFCT;    /* centry*/
   /*  */
   /* --------------- y2k out end --------------*/
   /*  */
   /*  */
   /* --------------- y2k in  begin ------------*/
   /*  */
  PK0UW01.PK0UWFDT = VGVar.currentGregorianDate; /* date ccyymmdd*/
   /*  */
   /* --------------- y2k in  end --------------*/
   /*  */
  PKGREC.ZZZCHGDT = PK0UW01.PK0UWFDT; /* change date*/
  PK0UW01.PK0UWTIM = VGVar.currentFormattedTime;
  PK0UW01.PK0UWTHH = PK0UW01.PK0UWHH;
  PK0UW01.PK0UWTMM = PK0UW01.PK0UWMI;
  PKGREC.ZZZCHGTM = PK0UW01.PK0UWTI; /* change time*/



end // end PK0US84

//*** RECORD=PK0UW01 ****
// ;********************** pk0uw01 ****************************
// ;
// ;         work record for pk0u: select customer
// ;
// ;***********************************************************
// ***********************
Record PK0UW01 type basicRecord
  5 PK0UWGR1 PK0UWGR1 ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 PK0UW-XDV-HOLD PK0UW-XDV-HOLD ; 
    10 PK0UW-XBC-HOLD PK0UW-XBC-HOLD ; 
    10 PK0UWABR PK0UWABR ; 
    10 PK0UWHS PK0UWHS ; 
    10 PK0UWER PK0UWER ; 
    10 PK0UWCDT PK0UWCDT ; 
    10 PK0UWSB1 PK0UWSB1 ; 
    10 PK0UWSB2 PK0UWSB2 ; 
    10 PK0UWSB3 PK0UWSB3 ; 
    10 PK0UWSB4 PK0UWSB4 ; 
    10 PK0UWMAX PK0UWMAX ; 
    10 PK0UWTOP PK0UWTOP ; 
    10 PK0UWBOT PK0UWBOT ; 
    10 PK0UWMCH PK0UWMCH ; 
    10 PK0UWMNO PK0UWMNO ; 
    10 PK0UWFL1 PK0UWFL1 ; 
    10 PK0UWFL2 PK0UWFL2 ; 
    10 PK0UWSEL PK0UWSEL ; 
    10 PK0UWEDT PK0UWEDT ; 
    10 PK0UWUPD PK0UWUPD ; 
    10 PK0UWDDB PK0UWDDB ; 
    10 PK0UWA91 PK0UWA91 ; 
    10 PK0UWAAE PK0UWAAE ; 
    10 PK0UWC91 PK0UWC91 ; 
    10 PK0UWCDL PK0UWCDL ; 
    10 PK0UWCCT PK0UWCCT ; 
    10 PK0UWFT PK0UWFT ; 
    10 PK0UWCX1 PK0UWCX1 ; 
    10 PK0UWCX2 PK0UWCX2 ; 
      15 PK0UWC1 PK0UWC1 ; 
      15 PK0UWC2 PK0UWC2 ; 
      15 PK0UWC3 PK0UWC3 ; 
    10 PK0UWPP1 PK0UWPP1 ; 
    10 PK0UWDT PK0UWDT ; 
      15 PK0UWMM PK0UWMM ; 
      15 PK0UWDD PK0UWDD ; 
      15 PK0UWYY PK0UWYY ; 
    10 PK0UWFDT PK0UWFDT ; 
      15 PK0UWFCT PK0UWFCT ; 
      15 PK0UWFDA PK0UWFDA ; 
        20 PK0UWFYY PK0UWFYY ; 
        20 PK0UWFMM PK0UWFMM ; 
        20 PK0UWFDD PK0UWFDD ; 
    10 PK0UWTIM PK0UWTIM ; 
      15 PK0UWHH PK0UWHH ; 
      15 * char(1) ; 
      15 PK0UWMI PK0UWMI ; 
      15 * char(1) ; 
      15 PK0UWSS PK0UWSS ; 
    10 PK0UWTI PK0UWTI ; 
      15 PK0UWTHH PK0UWTHH ; 
      15 PK0UWTMM PK0UWTMM ; 
    10 * char(1) ; 
    10 PK0UMFDT PK0UMFDT ; 
    10 PK0UMTDT PK0UMTDT ; 
    10 * char(1) ; 
    10 PK0UWPBM PK0UWPBM [22] ; 
    10 PK0UWARY PK0UWARY [500] ; 
      15 PKXKUACT PKXKUACT ; 
      15 XPPCD XPPCD ; 
      15 XBCCD XBCCD ; 
      15 PK0UWCUS PK0UWCUS ; 
        20 KUCCOID KUCCOID ; 
        20 KUMSTRID KUMSTRID ; 
        20 XNXCD XNXCD ; 
      15 PK0UW-CO-I PK0UW-CO-I ; 
      15 ZZZCHGCT ZZZCHGCT ; 
end // end PK0UW01

// "from" DNSB date storgae
DataItem PK0UMFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// "to" DNSB date storage
DataItem PK0UMTDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CU_CO_ID internal code
DataItem PK0UW-CO-I int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// brand hold field
DataItem PK0UW-XBC-HOLD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// division hold field
DataItem PK0UW-XDV-HOLD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prob.add - 911
DataItem PK0UWA91 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prob.add - already exists
DataItem PK0UWAAE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse abbreviation
DataItem PK0UWABR char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer data array
DataItem PK0UWARY char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bottom of screen in w.s.array
DataItem PK0UWBOT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// company id- reformat
DataItem PK0UWC1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// store id-   reformat
DataItem PK0UWC2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// nike dept  - reformat
DataItem PK0UWC3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// prob.change- 911
DataItem PK0UWC91 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prob.change-d.b.updated prior
DataItem PK0UWCCT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prob.change-rec.deleted
DataItem PK0UWCDL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current date -yyyymmdd
DataItem PK0UWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer number
DataItem PK0UWCUS bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// reformat customer number
DataItem PK0UWCX1 bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// reformat customer number
DataItem PK0UWCX2 bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// day
DataItem PK0UWDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// database updated flag
DataItem PK0UWDDB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group date
DataItem PK0UWDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// database update request-flag
DataItem PK0UWEDT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse abrv
DataItem PK0UWER char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem PK0UWFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yymmdd
DataItem PK0UWFDA num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PK0UWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date in yyyymmdd
DataItem PK0UWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// general flag
DataItem PK0UWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for warning message
DataItem PK0UWFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PK0UWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first time switch
DataItem PK0UWFT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PK0UWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level
DataItem PK0UWGR1 char(9825)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hours
DataItem PK0UWHH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse code
DataItem PK0UWHS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total # of valid customers
DataItem PK0UWMAX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// temporary location
DataItem PK0UWMCH num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// min.
DataItem PK0UWMI char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PK0UWMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold message number
DataItem PK0UWMNO num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// problem cust.num array
DataItem PK0UWPBM bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// pick priority held for compare
DataItem PK0UWPP1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// subscript - ws.loc of sb2
DataItem PK0UWSB1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// subscript - position on map
DataItem PK0UWSB2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// subscript - gen.purpose
DataItem PK0UWSB3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// subscript - gen.purpose
DataItem PK0UWSB4 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// data selected for trans- flag
DataItem PK0UWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sec.
DataItem PK0UWSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hours
DataItem PK0UWTHH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// time
DataItem PK0UWTI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group time
DataItem PK0UWTIM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minutes
DataItem PK0UWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// top of screen in w.s.array
DataItem PK0UWTOP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// database updated flag
DataItem PK0UWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PK0UWYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

