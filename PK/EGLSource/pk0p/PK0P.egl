package pk0p;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import pk.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PK0P ****
// ------------------------------------------------------------
// This application displays the Report Request Menu screen and
// all subordinate report specification screens.
// 
// The menu is displayed for the user to select the reports to
// be printed.  Another available selection allows the user to
// view the available printers and change the remote printer
// destination.
// 
// Job Control Language statements are formatted and submitted
// through the Internal Reader Transient Data Queue (INTR).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// *** THE JCL FOR EACH JOB IS STORED AS A TABLE. ***
// 
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TF0BTTYP).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed, as follows:
// 
// PK0PTTYP        JCL statement        Variable        Columns
// --------        -------------        --------        -------
//    E                EXEC             PK0PWEXE         16-21
//    G            GDG parameter        PK0PMGEN         21-22
//    J                JOB              PK0PWUID          5-10
//    N  (Test only)  NOTIFY            PK0PWUID         23-28
//    O               OUTPUT            PK0PMRMT         32-36
//                    "    "            PK0PMCPY           45
//    P             Parameters          PK0PWJCL          1-80
//    R            RUN parameter        PK0PWRUN         21-24
//    W            WHSE parameter       XWHCD            22-23
// 
// The data in working storage (PK0PW01) is substituted and the
// statement is written to the internal reader.
// 
// The user may exit to any allowed application, via PF key,
// from the menu, only.
// 
// ------------------------------------------------------------
// 
// THE FOLLOWING IS A LIST OF THE TABLES CONTAINING ON-LINE
// SUBMITTED JCL AND THE DESCRIPTION FOR EACH:
// 
// PK0PT02 - PK7107 picking carton class table report
// PK0PT03 - PK7111 carton content table report
// PK0PT04 - PK7412 picking activity report
// PK0PT05 - Kill the plan
// PK0PT06 - Update the plan
// PK0PT07 - Print table dpick.vccdim01
// PK0PT08 - Unprinted packing list report
// PK0PT09 - Stock number report
// PK0PT10 - PK5231 Kill the plan
// PK0PT11 - Update the plan
// PK0PT12 - Print carton class dimension table
// 
// PK0PT13 through PK0PT20 do not exist
// 
// PK0PT21 - Print daily pick tickets
// PK0PT22 - Print pick tickets by schedule
// PK0PT23 - Print pick tickets by area/zone/row
// PK0PT24 - Print pick tickets by carrier sequence
// PK0PT25 - PK7211 replenishment spur labels
// PK0PT26 - PK409* Memphis Apparel carton content, RP only
// PK0PT27 - Multi packing lists, Nike & Cole Haan, Ftwr & Aprl
// PK0PT28 - RP & FC crtn content for ftwr, Nike & CH, FC Aprl
// PK0PT29 - Customer specified labels
// PK0PT30 - PK7241 replenishment spur labels
// 
// PK0PTZP - List of remotes to zebra printers
// 
// ------------------------------------------------------------
// 
// CONTROL   DATE       NAME    DESCRIPTION OF CHANGE
// ------- --------    ------   -------------------------------
//         08/13/87    SPOPA    New application.
// pk#     05/29/91    jcampb   allow w51 to terminate plan
// pk#     07/08/91    shende   Modified maps:pk0pm011,pk0pm012
//                              pk0pm013 to specify the kind of
//                              date (dnsb) and to display the
//                              previous dates entered.
//                              Inserted 00 century for dates
//                              00/00/00 and 99 century for
//                              dates 99/99/99.
//                              Deinstalled pk0pw11, pk0pw12, &
//                              pk0pw13.
// pk#     08/20/91    esmith   Fix logic to compare char data
//                              with map char date range fields
//                              ...was comparing numberic with
//                              char which caused date valida-
//                              tion logic not to work properly
// pk#     09/09/91    mpluth   Added a new carton content
//                              screen (PK0PM028) for
//                              Wilsonville (Warehouse 07).
// pk#     12/03/91    bgilde   Wilsonville fixes
// pk#     12/09/91    esmith   Added new option (PK0PM029)
//                              to print Customer Specified
//                              Labels.
// pk#     12/10/91    mpluth   Fixed the packing list output
//                              jcl card for Wilsonville and
//                              Memphis.
// pk#     12/16/91    mpluth   Fixed the carton content output
//                              jcl card for Wilsonville.
// pk#     12/31/91    mpluth   changed the carton content for
//                              Wilsonville.  Allow entry of a
//                              starting and ending sequence
//                              number.
// pk#     01/08/92    mpluth   Added a "PRINT FROM GENETATION"
//                              option to the Wilsonville
//                              carton content screen and to
//                              the packing list screen.
//                              (pk0pm27 & pk0pm28)
// pk#     01/16/92    mpluth   Fixed length of pk0pmrun in
//                              pk0pt029.
// pk#     01/16/92    mpluth   Removed the "USER=" and the
//                              "PASSWORD=" in pk0pt26,
//                              pk0pt27, and pk0pt28.
// pk#     01/16/92    SHENDE   Removed the "USER=" and the
//                              "PASSWORD=".  Also, added table
//                              PK0PT3O to execute pk7241 from
//                              JCL for warehouse 4 only.
// pk#     03/23/92    GRAY     ADDED A NEW OPTION TO THE MAIN
//                              SCREEN (PK0PM099), AND A NEW
//                              SCREEN (PK0M014). THIS WILL PUT
//                              CONTROL INFO ON DCORP.VPARM101
//                              FOR PROGRAM PK7040.
// pk#     03/25/92    tglenn   change pk0p084 to allow all
//                              whse to use unprinted packing
//                              list report.
// PK#     04/09/92    JCAMPB   VALIDATE DATES ENTERED IN AFTER
//                              PICKING SCREENS M011 - M014
// pk#     03/31/92    tglenn   Change PK0P002 edit check to
//                              allow whse's 02, 04 and 07 to
//                              use same Carton Content screen.
// memftwr 05/16/92    tglenn   Change PK0P994 process to
// retro                        prevent whse's 04 and 07 from
//                              using Replenishment Label
//                              application.
// memaprl 07/24/92    jcampb   add rmt108 for mema
// pk99999 07/30/92    jcampb   add print magnum startup chars
//                              option to pk0pm027 & m028 also
//                              add brand code.
// pk.bug  09/17/92    gray     fix cole haan forms codes for
//                              carton content and packlist.
//                              pk0p275 & pk0p285.
// pk99999 09/19/92    jcampb   add RMT 144 and 147 customer
//                              label print option.
// pk99999 10/08/92    jcampb   add from and to tote to m029
// pk99999 12/11/92    jcampb   add pk0ptzp to validate zebra
//                              printers allowed.
// pk99999 03/19/93    mwilso   Use generation as passed
//                              parameter for label print.
//                              (pk0pt27, pk0pt28, pk0p265,
//                              pk0p275 & pk0p285) and add
//                              jobparm proclib=onetime to tbls
// pk99999 04/15/93    gray     add whse 25 to hardcoded stuff.
//                              whse 25 will resemble whse 09.
// pk99999 06/16/93    jfiat    added remotes rmt201 and rmt203
//                              to zebra printers table.pk0ptzp
// pk#381  08/19/93    rmorga   Add bill of lading as a report
//                              selection criteria. Map027
// pk#392  09/14/93    rmorga   Add inner-pack carton content
//                              printing ability. Map026
// CLP     02/27/95    mpluth   added logic to print labels on
//                              either the laser printers or
//                              dot matrix printers.
// CLP     04/11/95    mpluth   added logic to print labels on
//                              either the laser printers or
//                              dot matrix printers.
// CLP     04/27/95    hchapm   added logic to print labels on
//                              either the laser printers or
//                              dot matrix printers.
// CANADA  08/11/95    CBRINE   CANADA Added XCTCD to PKWREC
// ASW001  10/23/95    PANDER   Add VM select flag for Memphis
//                              Apparel satellite warehouse.
// APRLPRJ 03/05/96    PANDER   Add single carton option.
// pk99999 04/30/93    PANDER   added remotes rmt351 and rmt352
//                              to zebra printers table.pk0ptzp
//         06/01/96    dgerlt   Add fast pick option to CCD
//                              print and customer labels.
//         09/17/96    mmcgol   Enabled gpc 01 for canada-xwh42
// fastpick12/06/96    dgerlt   Add fast pick location to the
//                              selection options.
//  pk nbr  12/17/96    dmays   Increase pack list 'to' and
//                              'from' numbers to 6 chars on
//                               screen and in working storage.
//                               reduced filler at end to
//                               bring record total back to 80.
// qd@bg   01/25/97    dgerlt   Added qd option to packing list
//                              and ccd selections.
//         02/04/97    dgerlt   Change the default to packing
//                              list number from 9999 to 999999
//         02/11/97    dmays    Change edit of packing list nbr
//                              from 9999 to 999999.
//         02/14/97    dgerlt   Fix for canada to add vm
//                              processing back.
// basics  04/22/97    kheina   Add processing for Basics.
//                              Add basics option for pick
//                              tickets by schedule, carton
//                              content, and packing lists.
//                              For basics option, submit
//                              basics procs to print
//                              documents.
//                              See pk0p224, pk0p225, pk0p???,
//                              pk0p???, pk0p274, pk0p275.
// basics  06/03/97    pander   Add processing for Basics.
//                              Add basics option for pick
//                              tickets by sequence.
//                              For basics option, submit
//                              basics procs to print
//                              documents.
//                              See pk0p244, pk0p245.
// maint   06/23/97    kviswa   Print multiple non-consecutive
//                              Packing lists from one screen
//                              (map pk0pm027).
// maint   06/23/97    kviswa   Print multiple non-consecutive
//                              cartons from one schedule on
//                              one screen (map pk0pm028).
// maint   06/23/97    kviswa   Yes or no option for printing
//                              entire schedule from pk0pm028.
// maint   07/14/97    kviswa   Print multiple non-consecutive
//                              cartons from one schedule on
//                              one screen (map pk0pm026)(for
//                              canada and memphis apparel).
//                              Item PK0PMECT om map pk0pm026
//                              was originally declared as a
//                              character variable. Changed it
//                              to numeric.
// maint   07/24/97    DMAYS    Change the default lane number
//                              for whse 42, repack orders
//                              (musicals) to zero so they will
//                              print.
// ASN     10/16/97    DMAYS    Add remotes 318,319 for wlsnv,
//                              425,426 for memf,
//                              refer to pk0p261, pk0p281
// ASN     2/3/98      DMAYS    Change thermal remote printer
//                              numbers to default to printer
//                              type of 'T' and update maps.
//                              pk0p261, pk0p281, m026, m028.
// ------------------------------------------------------------
// y2kproj 2/18/98     NGANGO   Y2K modifications done in Proc.
//                              PK0P094,PK0P095,PK0P114,PK0P115
//                              PK0P124,PK0P125,PK0P134,PK0P135
//                              PK0P144,and PK0P145.
// ------------------------------------------------------------
// maint   5/1/98      DMAYS    Reinstall pk0p001 and pk0p015
//                              to get bad modules out of prod.
//                              Updated remote printer lists
//                              again as they were wrong again.
// *********************
Program PK0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = yes, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PK0PW00 PK0PW00; // record
  PK0PW01 PK0PW01; // record
  PK0PW02 PK0PW02; // record
  PK0PW03 PK0PW03; // record
  PK0PW04 PK0PW04; // record
  PK0PW05 PK0PW05; // record
  PK0PW06 PK0PW06; // record
  PK0PW07 PK0PW07; // record
  PK0PW08 PK0PW08; // record
  PK0PW09 PK0PW09; // record
  PK0PW21 PK0PW21; // record
  PK0PW22 PK0PW22; // record
  PK0PW23 PK0PW23; // record
  PK0PW24 PK0PW24; // record
  PK0PW25 PK0PW25; // record
  PK0PW26 PK0PW26; // record
  PK0PW27 PK0PW27; // record
  PK0PW28 PK0PW28; // record
  PK0PW29 PK0PW29; // record
  PK0PW99 PK0PW99; // record
  PK0PW9A PK0PW9A { redefines = PK0PW99 } ; // record
  PK0PW9B PK0PW9B { redefines = PK0PW99 } ; // record
  PK0PW9C PK0PW9C { redefines = PK0PW99 } ; // record
  PK0PW9D PK0PW9D { redefines = PK0PW99 } ; // record
  PK0PW9E PK0PW9E { redefines = PK0PW99 } ; // record
  PK0PW9G PK0PW9G { redefines = PK0PW99 } ; // record
  PK0PW9J PK0PW9J { redefines = PK0PW99 } ; // record
  PK0PW9M PK0PW9M { redefines = PK0PW99 } ; // record
  PK0PW9N PK0PW9N { redefines = PK0PW99 } ; // record
  PK0PW9O PK0PW9O { redefines = PK0PW99 } ; // record
  PK0PW9P PK0PW9P { redefines = PK0PW99 } ; // record
  PK0PW9R PK0PW9R { redefines = PK0PW99 } ; // record
  PK0PW9S PK0PW9S { redefines = PK0PW99 } ; // record
  PK0PW9W PK0PW9W { redefines = PK0PW99 } ; // record
  PKDREC PKDREC; // record
  PKEREC PKEREC; // record
  PKQREC PKQREC; // record
  PKWREC PKWREC; // record
  SL5REC SL5REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TAEREC TAEREC; // record
  UT1REC UT1REC; // record
  UT2REC UT2REC; // record
  XX0XW01 XX0XW01; // record
  XZZREC XZZREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PK0PTZP; // table
  use PK0PT02; // table
  use PK0PT03; // table
  use PK0PT04; // table
  use PK0PT05; // table
  use PK0PT06; // table
  use PK0PT07; // table
  use PK0PT08; // table
  use PK0PT09; // table
  use PK0PT21; // table
  use PK0PT22; // table
  use PK0PT23; // table
  use PK0PT24; // table
  use PK0PT25; // table
  use PK0PT26; // table
  use PK0PT27; // table
  use PK0PT28; // table
  use PK0PT29; // table
  use PK0PT3O; // table
  use XROTBL; // table
  use XRQTBL; // table
  use XWHTBL; // table
  use XBCTBL; // table
  use PK0PM.PK0PM001,  // forms
      PK0PM.PK0PM002, 
      PK0PM.PK0PM003, 
      PK0PM.PK0PM004, 
      PK0PM.PK0PM005, 
      PK0PM.PK0PM006, 
      PK0PM.PK0PM007, 
      PK0PM.PK0PM008, 
      PK0PM.PK0PM009, 
      PK0PM.PK0PM011, 
      PK0PM.PK0PM012, 
      PK0PM.PK0PM013, 
      PK0PM.PK0PM014, 
      PK0PM.PK0PM021, 
      PK0PM.PK0PM022, 
      PK0PM.PK0PM023, 
      PK0PM.PK0PM024, 
      PK0PM.PK0PM025, 
      PK0PM.PK0PM026, 
      PK0PM.PK0PM027, 
      PK0PM.PK0PM028, 
      PK0PM.PK0PM029, 
      PK0PM.PK0PM099
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PK0P001: PK0P001();
     /* ------------------------------------------------------------*/
     /* Flow to execute the Picking Report Request process.*/
     /* ------------------------------------------------------------*/

    goto PK0P002; /* Picking Report Request*/


    PK0P002: PK0P002();
     /* ------------------------------------------------------------*/
     /* Flow to execute the Picking Report Request process.*/
     /* ------------------------------------------------------------*/

    goto PK0P002; /* Picking Report Request*/


  end // end main
end // end PK0P

// Report Requests initialization
Function PK0P001()
   /* ------------------------------------------------------------*/
   /* Perform Picking application initialization.*/
   /* Obtain the CICS Logon User Identification.*/
   /* Initialize the application working storage.*/
   /* Search the Remote Printer Destination Table (XROTBL) to*/
   /* determine the default remote printer destination.*/
   /* Initialize the selection line index limit.*/
   /* ------------------------------------------------------------*/

  XPPK001(); /* Application initialization*/

  set UT1REC empty; /* Initialize subroutine parameters*/

  call "UT0200" (UT1REC) {isNoRefresh = yes, isExternal = yes}; /* Obtain user identification*/

  if (UT1REC.UT1RETCD != 0) /* Non-zero return code*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0P001 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN CICS USER IDENTIFICATION";
    SQLCA.SQLCAREC = UT1REC.UT1GRPLV; /* Error information*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.validationFailed(29); /* Indicate system error*/

    COMMAREA.CATOAP = "PK0A"; /* Picking Master Menu*/

    XSEXIT(); /* Exit to master menu*/

    exit program; /* Terminate application if exit failed*/

  end

  set PK0PW01 empty; /* Initialize working storage*/
  set PKDREC empty; /* Initialize warehouse controls*/
  set PK0PM001 initial; /* Initialize map output area*/
  set PK0PM002 initial; /* Initialize map output area*/
  set PK0PM003 initial; /* Initialize map output area*/
  set PK0PM004 initial; /* Initialize map output area*/
  set PK0PM006 initial; /* Initialize map output area*/
  set PK0PM007 initial; /* Initialize map output area*/
  set PK0PM008 initial; /* Initialize map output area*/
  set PK0PM009 initial; /* Initialize map output area*/
  set PK0PM011 initial; /* Initialize map output area*/
  set PK0PM012 initial; /* Initialize map output area*/
  set PK0PM013 initial; /* Initialize map output area*/
  set PK0PM021 initial; /* Initialize map output area*/
  set PK0PM022 initial; /* Initialize map output area*/
  set PK0PM023 initial; /* Initialize map output area*/
  set PK0PM024 initial; /* Initialize map output area*/
  set PK0PM025 initial; /* Initialize map output area*/
  set PK0PM026 initial; /* Initialize map output area*/
  set PK0PM027 initial; /* Initialize map output area*/
  set PK0PM028 initial; /* Initialize map output area*/
  set PK0PM029 initial; /* Initialize map output area*/
  set PK0PM099 initial; /* Initialize map output area*/

  PK0PW01.PK0PWUID = UT1REC.UT1USRID; /* User identification*/

  PK0PW01.XWHCD = PKWREC.XWHCD; /* Initialize warehouse code*/
  PK0PW01.XWHABRV = PKWREC.XWHABRV; /* and warehouse abbreviation*/
  PK0PS12(); /* brand code*/
  if (PK0PW01.XBCCD != "08")
    PK0PW01.XBCCD = "*";
  end

  PK0PW01.PK0PWIXM = 1; /* Initialize line index*/

  while (XROTBL.XROCD[PK0PWIXM] != "9999" /* Until end of table*/
   && PK0PW01.PK0PMRMT == " ") /* or printer is found*/

    if (XROTBL.XXXSTAT[PK0PWIXM] == "A") /* Active status*/

      if (XROTBL.XWHCD1[PK0PWIXM] == PK0PW01.XWHCD /* Warehouse*/
       || XROTBL.XWHCD2[PK0PWIXM] == PK0PW01.XWHCD /* code*/
       || XROTBL.XWHCD3[PK0PWIXM] == PK0PW01.XWHCD) /* matches*/

        PK0PW01.PK0PMRMT = XROTBL.XROPDEST[PK0PWIXM]; /* Printer*/
        PK0PW01.PK0PMDES = XROTBL.XRODESC[PK0PWIXM]; /* Description*/

      end

    end

    PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* Increment line number*/

  end

  PK0PW01.PK0PWIXL = 23; /* Number of menu selection lines*/

  PK0PW01.XXXRVNBR = "07"; /* Application revision number*/


end // end PK0P001

// PICKING Report Requests
Function PK0P002()
   /* ------------------------------------------------------------*/
   /* Invoke the process for each selection entered on the menu.*/
   /* After all selections are processed, display the menu.*/
   /* ------------------------------------------------------------*/

  if (PK0PW01.PK0PMSEL[1] == "S" /* Line 1 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    PK0P010(); /* Specify/Override Default Printer*/
  end

  if (PK0PW01.PK0PMSEL[2] == "S" /* Line 2 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    PK0P020(); /* Carton Classification Report*/
  end

  if (PK0PW01.PK0PMSEL[3] == "S" /* Line 3 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    PK0P030(); /* Carton Content Table Report*/
  end

  if (PK0PW01.PK0PMSEL[4] == "S" /* Line 4 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    PK0P040(); /* Picking Activity Report*/
  end

  if (PK0PW01.PK0PMSEL[5] == "S" /* Line 5 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    PK0P050(); /* Terminate Picking Plan*/
  end

  if (PK0PW01.PK0PMSEL[6] == "S" /* Line 6 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    PK0P060(); /* Change Plan Carr/Spur Assignments*/
  end

  if (PK0PW01.PK0PMSEL[7] == "S" /* Line 7 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    PK0P070(); /* Carton Content Table Report*/
  end

  if (PK0PW01.PK0PMSEL[8] == "S" /* Line 8 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    PK0P080(); /* Application not available*/
  end

  if (PK0PW01.PK0PMSEL[9] == "S" /* Line 9 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    PK0P090(); /* Application not available*/
  end

  if (PK0PW01.PK0PMSEL[10] == "S" /* Line 10 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    PK0P110(); /* Carrier Summary by Order Number*/
  end

  if (PK0PW01.PK0PMSEL[11] == "S" /* Line 11 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    PK0P120(); /* Carrier Summary Report*/
  end

  if (PK0PW01.PK0PMSEL[12] == "S" /* Line 12 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    PK0P130(); /* Order Summary Report*/
  end

  if (PK0PW01.PK0PMSEL[21] == "S" /* Line 12 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    PK0P140(); /* Unscheduled Pack & Hold Orders*/
  end

  if (PK0PW01.PK0PMSEL[13] == "S" /* Line 13 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    PK0P210(); /* Print Daily Pick Tickets*/
  end

  if (PK0PW01.PK0PMSEL[14] == "S" /* Line 14 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    PK0P220(); /* Pick Tickets by Schedule*/
  end

  if (PK0PW01.PK0PMSEL[15] == "S" /* Line 15 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    PK0P230(); /* Pick Tickets by Area/Zone/Row*/
  end

  if (PK0PW01.PK0PMSEL[16] == "S" /* Line 16 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    PK0P240(); /* Reprint Pick by Sequence*/
  end

  if (PK0PW01.PK0PMSEL[17] == "S" /* Line 17 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    PK0P250(); /* Replenishment Spur Request*/
  end

  if (PK0PW01.PK0PMSEL[18] == "S" /* Line 18 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    if (PK0PW01.XWHCD == "07" /* If Wilsonville warehouse*/
     || PK0PW01.XWHCD == "02" 
     || PK0PW01.XWHCD == "04")
      PK0P280(); /* Wilsonville CC Request*/
    else
      PK0P260(); /* Carton Content Request*/
    end
  end

  if (PK0PW01.PK0PMSEL[19] == "S" /* Line 19 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    PK0P270(); /* Packing List Request*/
  end

  if (PK0PW01.PK0PMSEL[20] == "S" /* Line 20 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    if (PK0PW01.XWHCD == "51" /* Allow warehouse '51'*/
     || PK0PW01.XWHCD == "04") /* Allow warehouse '04'*/
      PK0P290(); /* Customer Label Request*/
    end
  end

  if (PK0PW01.PK0PMSEL[22] == "S" /* Line 22 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    PK0P260(); /* Canada Carton Content Req Apparel*/
  end

  if (PK0PW01.PK0PMSEL[23] == "S" /* Line 23 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    PK0P280(); /* Canada Carton Content Req Footwear*/
  end

  PK0P990(); /* Picking Report Request Menu*/


end // end PK0P002

// Specify/Override Printer
Function PK0P010()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  PK0P011(); /* Format and display the map*/

  PK0P012(); /* Check attention identifier*/

  PK0P013(); /* Reset fields to normal intensity*/

  PK0P014(); /* Verify the entered data*/

  PK0P015(); /* Process valid input request*/


end // end PK0P010

// Format and display the map
Function PK0P011()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map,*/
   /* including the active printer destination table entries.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    set PK0PM001 initial; /* Clear map output area*/

    PK0PM001.XXXRVNBR = PK0PW01.XXXRVNBR; /* Revision number*/

    PK0PM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    PK0PM001.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
    PK0PM001.XWHABRV = PK0PW01.XWHABRV; /* Warehouse abbreviation*/

    PK0PM001.PK0PMRMT = PK0PW01.PK0PMRMT; /* Printer*/
    PK0PM001.PK0PMDES = PK0PW01.PK0PMDES; /* Description*/

    PK0PW01.PK0PWSWP = "N"; /* Initialize page switch*/
    PK0PW01.PK0PWIXM = 1; /* Initialize map index*/

    if (PK0PW01.PK0PWIXP > 0) /* If not first page*/

      PK0PW01.PK0PWIXT = PK0PW01.PK0PWIXS[PK0PWIXP];
                                   /* Starting index*/
    else
      PK0PW01.PK0PWIXT = 1; /* Initialize table index*/

    end

    PK0PW01.PK0PWIXP = PK0PW01.PK0PWIXP + 1; /* Increment page index*/

    while (PK0PW01.PK0PWSWP == "N" /* Until page full*/
     && XROTBL.XROCD[PK0PWIXT] != "9999") /* or end of table*/

      if (XROTBL.XXXSTAT[PK0PWIXT] == "A") /* Active status*/

        if (PK0PW01.PK0PWIXM > 28) /* Display entries exceeded*/

          if (PK0PW01.PK0PWIXP > 10) /* Page entries exceeded*/

            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "APPL"; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0P011 "; /* Process name*/
            TA1REC.TA1LOC = "XROTBL DISPLAY ENTRIES EXCEEDED";
            TA1REC.TA1MAP = "PK0PM001"; /* Map name*/
            SQLCA.SQLCAREC = " "; /* Application error information*/

            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

            converseLib.clearScreen();
             /* Clear screen before redisplay*/

          else

            PK0PW01.PK0PWIXS[PK0PWIXP] = PK0PW01.PK0PWIXT;

          end

          PK0PW01.PK0PWSWP = "Y"; /* Indicate page full*/

        else

          PK0PM001.XROPDEST[PK0PWIXM] = XROTBL.XROPDEST[PK0PWIXT];
          PK0PM001.XRODESC[PK0PWIXM] = XROTBL.XRODESC[PK0PWIXT];

          PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* Increment map index*/

        end

      end

      if (PK0PW01.PK0PWSWP == "N") /* If page not full*/

        PK0PW01.PK0PWIXT = PK0PW01.PK0PWIXT + 1; /* Increment table index*/

      end

    end

    if (PK0PW01.PK0PWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK0PW01.PK0PWMNO);
    end /* Job submitted message number*/
    PK0PW01.PK0PWMNO = 0; /* Reset message number*/

  else

    set PK0PM001 alarm; /* Indicate sound alarm*/

  end

  converse PK0PM001 ;


end // end PK0P011

// Check attention identifier
Function PK0P012()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PK0PW01.PK0PWIXP = PK0PW01.PK0PWIXP - 1; /* Decrement page index*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0PM001.XXXPRCNM = "PK0P012"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0P012

// Reset highlighted fields
Function PK0P013()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0PM001.PK0PMRMT initialAttributes; /* Printer destination*/


end // end PK0P013

// Verify the entered data
Function PK0P014()
   /* ------------------------------------------------------------*/
   /* If scroll was requested and data changed, indicate error.*/
   /* If scroll was requested, verify pages exist to scroll.*/
   /* If printer was modified, verify the destination.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back requested*/
   || converseVar.eventKey is pf8) /* or scroll forward requested*/

    if (PK0PM001.PK0PMRMT != PK0PW01.PK0PMRMT) /* Printer was changed*/

      set PK0PM001.PK0PMRMT cursor, modified, bold; /* Highlight data*/

      PK0PM001.PK0PMDES = " "; /* Clear printer description*/

      converseLib.validationFailed(39); /* Indicate cannot change data*/
      PK0PM001.XXXPRCNM = "PK0P014"; /* Process name*/

    end

  end

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    if (PK0PW01.PK0PWIXP == 1) /* First page displayed*/

      converseLib.validationFailed(37); /* Indicate no previous page*/
      PK0PM001.XXXPRCNM = "PK0P014"; /* Process name*/

    end

  end

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    if (XROTBL.XROCD[PK0PWIXT] == "9999") /* End of table*/

      converseLib.validationFailed(38); /* Indicate no more pages*/
      PK0PM001.XXXPRCNM = "PK0P014"; /* Process name*/

    end

  end

  if (converseVar.eventKey not pf7 /* Scroll back not requested*/
   && converseVar.eventKey not pf8) /* and scroll forward not requested*/

    if (PK0PM001.PK0PMRMT != PK0PW01.PK0PMRMT /* Printer was changed*/
     || PK0PW01.PK0PMRMT == " ")              /* or no printer is specified*/

      if (PK0PM001.PK0PMRMT in XROTBL.XROPDEST)
        PK0PM001.PK0PMDES = XROTBL.XRODESC[sysVar.arrayIndex];
      end

      if (sysVar.arrayIndex == 0 /* Table entry not found*/
       || XROTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* or entry is not active*/

        set PK0PM001.PK0PMRMT cursor, modified, bold; /* Highlight data*/

        PK0PM001.PK0PMDES = " "; /* Clear printer description*/

        converseLib.validationFailed(124); /* Printer destination invalid*/
        PK0PM001.XXXPRCNM = "PK0P014"; /* Process name*/

      end

    end

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0P014

// Process valid input request
Function PK0P015()
   /* ------------------------------------------------------------*/
   /* If scroll was requested, exit to display the page.*/
   /* Save printer destination and description.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* If scroll back requested*/

    PK0PW01.PK0PWIXP = PK0PW01.PK0PWIXP - 2; /* Decrement page index*/

    exit stack; /* Exit to display previous page*/

  end

  if (converseVar.eventKey is pf8) /* If scroll forward requested*/

    exit stack; /* Exit to display next page*/

  end

  PK0PW01.PK0PMRMT = PK0PM001.PK0PMRMT; /* Printer*/
  PK0PW01.PK0PMDES = PK0PM001.PK0PMDES; /* Description*/

  PK0PW01.PK0PMSEL[1] = "*"; /* Indicate function completed*/


end // end PK0P015

// Carton Classification Report
Function PK0P020()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  PK0P021(); /* Format and display the map*/

  PK0P022(); /* Check attention identifier*/

  PK0P023(); /* Reset fields to normal intensity*/

  PK0P024(); /* Verify the entered data*/

  PK0P025(); /* Process valid input request*/


end // end PK0P020

// Format and display the map
Function PK0P021()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    PK0PM002.XXXRVNBR = PK0PW01.XXXRVNBR; /* Revision number*/

    PK0PM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    PK0PM002.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
    PK0PM002.XWHABRV = PK0PW01.XWHABRV; /* Warehouse abbreviation*/

    PK0PM002.PK0PMRMT = PK0PW01.PK0PMRMT; /* Printer*/
    PK0PM002.PK0PMDES = PK0PW01.PK0PMDES; /* Description*/

    if (PK0PW01.PK0PWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK0PW01.PK0PWMNO);
    end /* Job submitted message number*/
    PK0PW01.PK0PWMNO = 0; /* Reset message number*/

  else

    set PK0PM002 alarm; /* Indicate sound alarm*/

  end

  converse PK0PM002 ;


end // end PK0P021

// Check attention identifier
Function PK0P022()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PK0PW01.PK0PMSEL[2] = "C"; /* Indicate selection cancelled*/

    set PK0PM002 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0PM002.XXXPRCNM = "PK0P022"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0P022

// Reset highlighted fields
Function PK0P023()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0PM002.PK0PMCPY initialAttributes; /* Number of copies*/


end // end PK0P023

// Verify the entered data
Function PK0P024()
   /* ------------------------------------------------------------*/
   /* Verify the number of copies to be printed.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (PK0PM002.PK0PMCPY == 0) /* Number of copies invalid*/

    set PK0PM002.PK0PMCPY cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(126); /* Indicate invalid number*/
    PK0PM002.XXXPRCNM = "PK0P062"; /* Process name*/

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end PK0P024

// Process valid input request
Function PK0P025()
   /* ------------------------------------------------------------*/
   /* Format the batch program parameters.*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set PK0PW00 empty; /* Initialize variables work area*/
  set PK0PW02 empty; /* Initialize parameters work area*/

  PK0PW02.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/

  PK0PW00.PK0PWJCL = PK0PW02.PK0PWJCL; /* Report parameters*/

  PK0PW00.PK0PMCPY = PK0PM002.PK0PMCPY; /* Number of copies*/

  PK0P026(); /* Enque the internal reader*/

  while (PK0PW01.PK0PWSWS == "N") /* Until job is submitted*/

    PK0PW99.PK0PWJCL = PK0PT02.PK0PWJCL[PK0PWIXT]; /* JCL statement*/
    PK0PW01.PK0PTTYP = PK0PT02.PK0PTTYP[PK0PWIXT]; /* Statement type*/

    PK0P027(); /* Write to the internal reader*/

  end

  PK0P028(); /* Deque the internal reader*/

  PK0PW01.PK0PWMNO = 165; /* Job was submitted*/
  PK0PW01.PK0PMSEL[2] = "*"; /* Indicate function completed*/

  set PK0PM002 initial; /* Clear map output area*/


end // end PK0P025

// Enque the Internal Reader
Function PK0P026()
   /* ------------------------------------------------------------*/
   /* Enque the Internal Reader queue for job submission.*/
   /* ------------------------------------------------------------*/

  set UT2REC empty; /* Initialize subroutine parameters*/

  UT2REC.UT2FUNCT = "E"; /* Subroutine function*/
  UT2REC.UT2RSCLN = 8; /* Resource identification length*/
  UT2REC.UT2RSCID = "INTR"; /* Resource identification*/

  call "UT0220" (UT2REC) {isNoRefresh = yes, isExternal = yes}; /* Enque reader*/

  if (UT2REC.UT2RETCD != 0) /* Non-zero return code*/

    converseLib.validationFailed(123); /* Indicate not available*/

    exit stack; /* Exit to redisplay map*/

  end

  PK0PW01.PK0PWIXT = 1; /* Initialize table index*/
  PK0PW01.PK0PWSWS = "N"; /* Initialize submit switch*/


end // end PK0P026

// Submit JCL to internal reader
Function PK0P027()
   /* ------------------------------------------------------------*/
   /* Format the variable areas of the JCL statement.*/
   /* Write Job Control Language to the Internal Reader queue.*/
   /* If error occurred, report to the error diagnosis facility.*/
   /* Indicate the job was submitted when end of file is written.*/
   /* ------------------------------------------------------------*/

  if (PK0PW01.PK0PTTYP == "B") /* application statement*/
    PK0PW9B.PK0PWAPP = PK0PW00.PK0PWAPP; /* Application number*/
  end

  if (PK0PW01.PK0PTTYP == "C") /* CASE statement*/
    PK0PW9C.PK0PWCTP = PK0PW00.PK0PWCTP; /* Case type code*/
  end

  if (PK0PW01.PK0PTTYP == "E") /* EXEC statement*/
    PK0PW9E.PK0PWEXE = PK0PW00.PK0PWEXE; /* Procedure name*/
  end

  if (PK0PW01.PK0PTTYP == "G") /* GDG statement*/
    PK0PW9G.PK0PMGEN = PK0PW00.PK0PMGEN; /* Generation parameter*/
  end

  if (PK0PW01.PK0PTTYP == "J") /* JOB statement*/
    PK0PW9J.PK0PWUID = PK0PW01.PK0PWUID; /* User identification*/
    if (PK0PW00.PK0PWEXE > " ") /* Variable procedure name*/
      PK0PW9J.PK0PWEXE = PK0PW00.PK0PWEXE; /* Procedure name*/
    end
  end

  if (PK0PW01.PK0PTTYP == "N") /* NOTIFY statement*/
    PK0PW9N.PK0PWUID = PK0PW01.PK0PWUID; /* User identification*/
  end

  if (PK0PW01.PK0PTTYP == "A") /* abort user id*/
    PK0PW9A.PK0PWUID = PK0PW01.PK0PWUID; /* User identification*/
  end

  if (PK0PW01.PK0PTTYP == "L") /* OUTPUT statement*/
    PK0PW9M.PK0PMCPY = PK0PW00.PK0PMCPY; /* Number of copies*/
    PK0PW9M.PK0PMRMT = PK0PW01.PK0PMRMT; /* Print destination*/
  end

  if (PK0PW01.PK0PTTYP == "M") /* OUTPUT statement*/
    PK0PW9M.PK0PMFS1 = PK0PW00.PK0PMFS1; /* forms code*/
    PK0PW9M.PK0PMFS2 = PK0PW00.PK0PMFS1; /* forms code*/
    PK0PW9M.PK0PMCPY = PK0PW00.PK0PMCPY; /* Number of copies*/
    PK0PW9M.PK0PMRMT = PK0PW01.PK0PMRMT; /* Print destination*/
  end

  if (PK0PW01.PK0PTTYP == "O") /* OUTPUT statement*/
    PK0PW9O.PK0PMCPY = PK0PW00.PK0PMCPY; /* Number of copies*/
    PK0PW9O.PK0PMRMT = PK0PW01.PK0PMRMT; /* Print destination*/
  end

  if (PK0PW01.PK0PTTYP == "P") /* Parameter statement*/
    PK0PW99.PK0PWJCL = PK0PW00.PK0PWJCL; /* Report parameters*/
  end

  if (PK0PW01.PK0PTTYP == "R") /* RUN statement*/
    PK0PW9R.PK0PWRUN = PK0PW00.PK0PWRUN; /* Type of picking run*/
  end

  if (PK0PW01.PK0PTTYP == "S") /* SYSTSIN statement(test JCL only)*/
    PK0PW9S.PK0PWSYS = PK0PW00.PK0PWSYS; /* override parameter*/
  end

  if (PK0PW01.PK0PTTYP == "V") /* vsam reload parm*/
    PK0PW9P.PK0PWPRM = PK0PW00.PK0PWPRM; /* vsam reload parms*/
  end

  if (PK0PW01.PK0PTTYP == "W") /* WHSE statement*/
    PK0PW9W.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
  end


  if (PK0PW01.PK0PTTYP == "D") /* DLVRTYP symbolic*/
    if (PK0PW01.PK0PMLDL == "B") /* Batch delivery*/
      PK0PW9D.PK0PWLDD = "BATCH";
    else /* Automatic delivery*/
      PK0PW9D.PK0PWLDD = "AUTOM";
    end
  end

  try
    add PK0PW99 ;
  end

  if (sysVar.errorCode != "00000000") /* Non-zero return code*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PK0P027 "; /* Process name*/
    TA1REC.TA1LOC = "WRITE JCL TO INTERNAL READER";
    TA1REC.TA1MAP = sysVar.errorCode; /* Return code*/
    SQLCA.SQLCAREC = PK0PW99.PK0PWJCL; /* Error information*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.validationFailed(29); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


  if (PK0PW99.PK0PWJCL == "/*EOF") /* End of file*/

    PK0PW01.PK0PWSWS = "Y"; /* Indicate job submitted*/
  else
    PK0PW01.PK0PWIXT = PK0PW01.PK0PWIXT + 1; /* Increment index*/

  end


end // end PK0P027

// Deque the Internal Reader
Function PK0P028()
   /* ------------------------------------------------------------*/
   /* Deque the Internal Reader queue after job submission.*/
   /* ------------------------------------------------------------*/

  set UT2REC empty; /* Initialize subroutine parameters*/

  UT2REC.UT2FUNCT = "D"; /* Subroutine function*/
  UT2REC.UT2RSCLN = 8; /* Resource identification length*/
  UT2REC.UT2RSCID = "INTR"; /* Resource identification*/

  call "UT0220" (UT2REC) {isNoRefresh = yes, isExternal = yes}; /* Enque reader*/

  if (UT2REC.UT2RETCD != 0) /* Non-zero return code*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0P028 "; /* Process name*/
    TA1REC.TA1LOC = "DEQUE THE SYSTEM INTERNAL READER";
    SQLCA.SQLCAREC = UT2REC.UT2GRPLV; /* Error information*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.validationFailed(29); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0P028

// Enque the Internal Reader
Function PK0P029()
   /* ------------------------------------------------------------*/
   /* Enque the Internal Reader queue for job submission.*/
   /* ------------------------------------------------------------*/

  set UT2REC empty; /* Initialize subroutine parameters*/

  UT2REC.UT2FUNCT = "E"; /* Subroutine function*/
  UT2REC.UT2RSCLN = 8; /* Resource identification length*/
  UT2REC.UT2RSCID = "INTR"; /* Resource identification*/

  call "UT0220" (UT2REC) {isNoRefresh = yes, isExternal = yes}; /* Enque reader*/

  if (UT2REC.UT2RETCD != 0) /* Non-zero return code*/

    converseLib.validationFailed(123); /* Indicate not available*/

    exit stack; /* Exit to redisplay map*/

  end

  PK0PW01.PK0PWIXT = 1; /* Initialize table index*/
  PK0PW01.PK0PWSWS = "N"; /* Initialize submit switch*/


end // end PK0P029

// Carton Content Table Report
Function PK0P030()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  PK0P031(); /* Format and display the map*/

  PK0P032(); /* Check attention identifier*/

  PK0P033(); /* Reset fields to normal intensity*/

  PK0P034(); /* Verify the entered data*/

  PK0P035(); /* Process valid input request*/


end // end PK0P030

// Format and display the map
Function PK0P031()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    PK0PM003.XXXRVNBR = PK0PW01.XXXRVNBR; /* Revision number*/

    PK0PM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    PK0PM003.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
    PK0PM003.XWHABRV = PK0PW01.XWHABRV; /* Warehouse abbreviation*/

    PK0PM003.PK0PMRMT = PK0PW01.PK0PMRMT; /* Printer*/
    PK0PM003.PK0PMDES = PK0PW01.PK0PMDES; /* Description*/

    if (PK0PW01.PK0PWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK0PW01.PK0PWMNO);
    end /* Job submitted message number*/
    PK0PW01.PK0PWMNO = 0; /* Reset message number*/

  else

    set PK0PM003 alarm; /* Indicate sound alarm*/

  end

  converse PK0PM003 ;


end // end PK0P031

// Check attention identifier
Function PK0P032()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PK0PW01.PK0PMSEL[3] = "C"; /* Indicate selection cancelled*/

    set PK0PM003 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0PM003.XXXPRCNM = "PK0P032"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0P032

// Reset highlighted fields
Function PK0P033()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0PM003.PK0PMCPY initialAttributes; /* Number of copies*/


end // end PK0P033

// Verify the entered data
Function PK0P034()
   /* ------------------------------------------------------------*/
   /* Verify the number of copies to be printed.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (PK0PM003.PK0PMCPY == 0) /* Number of copies invalid*/

    set PK0PM003.PK0PMCPY cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(126); /* Indicate invalid number*/
    PK0PM003.XXXPRCNM = "PK0P034"; /* Process name*/

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end PK0P034

// Process valid input request
Function PK0P035()
   /* ------------------------------------------------------------*/
   /* Format the batch program parameters.*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set PK0PW00 empty; /* Initialize variables work area*/
  set PK0PW03 empty; /* Initialize parameters work area*/

  PK0PW03.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/

  PK0PW00.PK0PWJCL = PK0PW03.PK0PWJCL; /* Report parameters*/

  PK0PW00.PK0PMCPY = PK0PM003.PK0PMCPY; /* Number of copies*/

  PK0P026(); /* Enque the internal reader*/

  while (PK0PW01.PK0PWSWS == "N") /* Until job is submitted*/

    PK0PW99.PK0PWJCL = PK0PT03.PK0PWJCL[PK0PWIXT]; /* JCL statement*/
    PK0PW01.PK0PTTYP = PK0PT03.PK0PTTYP[PK0PWIXT]; /* Statement type*/

    PK0P027(); /* Write to the internal reader*/

  end

  PK0P028(); /* Deque the internal reader*/

  PK0PW01.PK0PWMNO = 166; /* Job was submitted*/
  PK0PW01.PK0PMSEL[3] = "*"; /* Indicate function completed*/

  set PK0PM003 initial; /* Clear map output area*/


end // end PK0P035

// Picking Activity Report
Function PK0P040()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  PK0P041(); /* Format and display the map*/

  PK0P042(); /* Check attention identifier*/

  PK0P043(); /* Reset fields to normal intensity*/

  PK0P044(); /* Verify the entered data*/

  PK0P045(); /* Process valid input request*/


end // end PK0P040

// Format and display the map
Function PK0P041()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    PK0PM004.XXXRVNBR = PK0PW01.XXXRVNBR; /* Revision number*/

    PK0PM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    PK0PM004.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
    PK0PM004.XWHABRV = PK0PW01.XWHABRV; /* Warehouse abbreviation*/

    PK0PM004.PK0PMRMT = PK0PW01.PK0PMRMT; /* Printer*/
    PK0PM004.PK0PMDES = PK0PW01.PK0PMDES; /* Description*/

    if (PK0PW01.PK0PWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK0PW01.PK0PWMNO);
    end /* Job submitted message number*/
    PK0PW01.PK0PWMNO = 0; /* Reset message number*/

  else

    set PK0PM004 alarm; /* Indicate sound alarm*/

  end

  converse PK0PM004 ;


end // end PK0P041

// Check attention identifier
Function PK0P042()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PK0PW01.PK0PMSEL[4] = "C"; /* Indicate selection cancelled*/

    set PK0PM004 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0PM004.XXXPRCNM = "PK0P042"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0P042

// Reset highlighted fields
Function PK0P043()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0PM004.PK0PMCPY initialAttributes; /* Number of copies*/


end // end PK0P043

// Verify the entered data
Function PK0P044()
   /* ------------------------------------------------------------*/
   /* Verify the number of copies to be printed.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (PK0PM004.PK0PMCPY == 0) /* Number of copies invalid*/

    set PK0PM004.PK0PMCPY cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(126); /* Indicate invalid number*/
    PK0PM004.XXXPRCNM = "PK0P044"; /* Process name*/

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end PK0P044

// Process valid input request
Function PK0P045()
   /* ------------------------------------------------------------*/
   /* Format the batch program parameters.*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set PK0PW00 empty; /* Initialize variables work area*/
  set PK0PW04 empty; /* Initialize parameters work area*/

  PK0PW00.PK0PMCPY = PK0PM004.PK0PMCPY; /* Number of copies*/
  PK0PW04.XWHCD[1] = PK0PW01.XWHCD; /* Warehouse code*/
  PK0PW04.PK0PWJCL[2] = "CMBND"; /* Type of picking run*/

  PK0P026(); /* Enque the internal reader*/

  while (PK0PW01.PK0PWSWS == "N") /* Until job is submitted*/

    PK0PW99.PK0PWJCL = PK0PT04.PK0PWJCL[PK0PWIXT]; /* JCL statement*/
    PK0PW01.PK0PTTYP = PK0PT04.PK0PTTYP[PK0PWIXT]; /* Statement type*/

    if (PK0PW01.PK0PTTYP == "P") /* Parameters statement*/
      PK0PW01.PK0PWIXM = 1; /* Initialize index*/
      while (PK0PW01.PK0PWIXM <= 2) /* Until end of array*/
        PK0PW00.PK0PWJCL = PK0PW04.PK0PWJCL[PK0PWIXM]; /* Parameter*/
        PK0P027(); /* Write to the internal reader*/
        PK0PW01.PK0PWIXT = PK0PW01.PK0PWIXT - 1; /* Keep table position*/
        PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* Increment index*/
      end
      PK0PW01.PK0PWIXT = PK0PW01.PK0PWIXT + 1; /* Continue with JCL table*/
    else
      PK0P027(); /* Write to the internal reader*/
    end
  end

  PK0P028(); /* Deque the internal reader*/

  PK0PW01.PK0PWMNO = 167; /* Job was submitted*/
  PK0PW01.PK0PMSEL[4] = "*"; /* Indicate function completed*/

  set PK0PM004 initial; /* Clear map output area*/


end // end PK0P045

// Kill The Picking Plan
Function PK0P050()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  PK0P051(); /* Format and display the map*/

  PK0P052(); /* Check attention identifier*/

  PK0P053(); /* Reset fields to normal intensity*/

  PK0P054(); /* Verify the entered data*/

  PK0P055(); /* Process valid input request*/


end // end PK0P050

// Format and display the map
Function PK0P051()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    PK0PM005.XXXRVNBR = PK0PW01.XXXRVNBR; /* Revision number*/

    PK0PM005.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    PK0PM005.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
    PK0PM005.XWHABRV = PK0PW01.XWHABRV; /* Warehouse abbreviation*/

    PK0PM005.PK0PMRMT = PK0PW01.PK0PMRMT; /* Printer*/
    PK0PM005.PK0PMDES = PK0PW01.PK0PMDES; /* Description*/

    if (PK0PW01.PK0PWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK0PW01.PK0PWMNO);
    end /* Job submitted message number*/
    PK0PW01.PK0PWMNO = 0; /* Reset message number*/

  else

    set PK0PM005 alarm; /* Indicate sound alarm*/

  end

  converse PK0PM005 ;


end // end PK0P051

// Check attention identifier
Function PK0P052()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    set PK0PM005 initial; /* Clear map output area*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PK0PW01.PK0PMSEL[5] = "C"; /* Indicate selection cancelled*/

    set PK0PM005 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0PM005.XXXPRCNM = "PK0P052"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0P052

// Reset highlighted fields
Function PK0P053()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0PM005.PK0PMCPY initialAttributes; /* Number of copies*/
  set PK0PM005.PK0PMKMS skip; /* kill the plan literal*/
  set PK0PM005.PK0PMKFL normal; /* kill the plan flag*/


end // end PK0P053

// Verify the entered data
Function PK0P054()
   /* ------------------------------------------------------------*/
   /* Option to terminate must either be 'Y' or 'N'.*/
   /* ------------------------------------------------------------*/

  if (PK0PM005.PK0PMKFL == " ")

    set PK0PM005.PK0PMKFL cursor, modified; /* set cursor*/
    converseLib.validationFailed(); /* force redisplay of map*/
    PK0PM005.XXXPRCNM = "PK0P054"; /* Process name*/

  else

    if (PK0PM005.PK0PMKFL == "Y"
     || PK0PM005.PK0PMKFL == "N")

      /* next sentence*/

    else

      set PK0PM005.PK0PMKFL cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(235); /* Terminate must be 'Y' or 'N'*/
      PK0PM005.XXXPRCNM = "PK0P054"; /* Process name*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Verify the number of copies to be printed.*/
   /* ------------------------------------------------------------*/

  if (PK0PM005.PK0PMCPY == 0) /* Number of copies invalid*/

    set PK0PM005.PK0PMCPY cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(126); /* Indicate invalid number*/
    PK0PM005.XXXPRCNM = "PK0P054"; /* Process name*/

  end

   /* ------------------------------------------------------------*/
   /* ensure the warehouse is one that has a plan to kill.*/
   /* ------------------------------------------------------------*/

  if (PK0PM005.XWHCD == "02"
   || PK0PM005.XWHCD == "04"
   || PK0PM005.XWHCD == "07"
   || PK0PM005.XWHCD == "32"
   || PK0PM005.XWHCD == "51"
   || PK0PM005.XWHCD == "42") /* canada*/
    PK0PS10();
  else
    set PK0PM005.PK0PMKMS initialAttributes; /* don't display message*/
    set PK0PM005.PK0PMKFL initialAttributes; /* don't display flag field*/
    set PK0PM005.PK0PMCPY cursor; /* set cursor to copies field*/
    converseLib.validationFailed(370); /* No plan for this warehouse*/
    PK0PM005.XXXPRCNM = "PK0P054"; /* Process name*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end PK0P054

// Process valid input request
Function PK0P055()
   /* ------------------------------------------------------------*/
   /* check terminate the plan option before proceeding*/
   /* Format the batch program parameters.*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  if (PK0PM005.PK0PMKFL == "N") /* do not terminate the picking plan*/

    PK0PW01.PK0PMSEL[5] = "*"; /* Indicate function completed*/
    set PK0PM005 initial; /* Clear map output area*/
    exit stack; /* exit to redisplay map*/

  end

  set PK0PW00 empty; /* Initialize variables work area*/
  set PK0PW05 empty; /* Initialize parameters work area*/

  PK0PW05.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/

  PK0PW00.PK0PWJCL = PK0PW05.PK0PWJCL; /* Report parameters*/

  PK0PW00.PK0PMCPY = PK0PM005.PK0PMCPY; /* Number of copies*/

  if (PK0PW05.XWHCD == "02") /* if whse 02*/
    PK0PW00.PK0PWEXE = "PK1003"; /* execute proc pk1003*/
  else
    if (PK0PW05.XWHCD == "04") /* if whse 04*/
      PK0PW00.PK0PWEXE = "PK1004"; /* execute proc pk1004*/
    else
      if (PK0PW05.XWHCD == "07") /* if whse 07*/
        PK0PW00.PK0PWEXE = "PK1005"; /* execute proc pk1005*/
      else
        if (PK0PW05.XWHCD == "32") /* if whse 32*/
          PK0PW00.PK0PWEXE = "PK1006"; /* execute proc pk1006*/
        end
        if (PK0PW05.XWHCD == "51") /* if whse 51*/
          PK0PW00.PK0PWEXE = "PK1008"; /* execute proc pk1008*/
        end
        if (PK0PW05.XWHCD == "42") /* if whse 42 (canada)*/
          PK0PW00.PK0PWEXE = "PK1009"; /* execute proc pk1009*/
        end
      end
    end
  end

  PK0P026(); /* Enque the internal reader*/

  while (PK0PW01.PK0PWSWS == "N") /* Until job is submitted*/

    PK0PW99.PK0PWJCL = PK0PT05.PK0PWJCL[PK0PWIXT]; /* JCL statement*/
    PK0PW01.PK0PTTYP = PK0PT05.PK0PTTYP[PK0PWIXT]; /* Statement type*/

    PK0P027(); /* Write to the internal reader*/

  end

  PK0P028(); /* Deque the internal reader*/

  PK0PW01.PK0PWMNO = 272; /* Job was submitted*/
  PK0PW01.PK0PMSEL[5] = "*"; /* Indicate function completed*/

  set PK0PM005 initial; /* Clear map output area*/


end // end PK0P055

// update The Picking Plan
Function PK0P060()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  PK0P061(); /* Format and display the map*/

  PK0P062(); /* Check attention identifier*/

  PK0P063(); /* Reset fields to normal intensity*/

  PK0P064(); /* Verify the entered data*/

  PK0P065(); /* Process valid input request*/


end // end PK0P060

// Format and display the map
Function PK0P061()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    PK0PM006.XXXRVNBR = PK0PW01.XXXRVNBR; /* Revision number*/

    PK0PM006.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    PK0PM006.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
    PK0PM006.XWHABRV = PK0PW01.XWHABRV; /* Warehouse abbreviation*/

    PK0PM006.PK0PMRMT = PK0PW01.PK0PMRMT; /* Printer*/
    PK0PM006.PK0PMDES = PK0PW01.PK0PMDES; /* Description*/

    if (PK0PW01.PK0PWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK0PW01.PK0PWMNO);
    end /* Job submitted message number*/
    PK0PW01.PK0PWMNO = 0; /* Reset message number*/

  else

    set PK0PM006 alarm; /* Indicate sound alarm*/

  end

  converse PK0PM006 ;


end // end PK0P061

// Check attention identifier
Function PK0P062()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    set PK0PM006 initial; /* Clear map output area*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PK0PW01.PK0PMSEL[6] = "C"; /* Indicate selection cancelled*/

    set PK0PM006 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0PM006.XXXPRCNM = "PK0P062"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0P062

// Reset highlighted fields
Function PK0P063()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0PM006.PK0PMCPY initialAttributes; /* Number of copies*/
  set PK0PM006.PK0PMUMS skip; /* run plan update literal*/
  set PK0PM006.PK0PMUFL normal; /* run plan ok-flag*/


end // end PK0P063

// Verify the entered data
Function PK0P064()
   /* ------------------------------------------------------------*/
   /* Option to terminate must either be 'Y' or 'N'.*/
   /* ------------------------------------------------------------*/

  if (PK0PM006.PK0PMUFL == " ")

    set PK0PM006.PK0PMUFL cursor, modified; /* set cursor*/
    converseLib.validationFailed(); /* force redisplay of map*/
    PK0PM006.XXXPRCNM = "PK0P064"; /* Process name*/

  else

    if (PK0PM006.PK0PMUFL == "Y"
     || PK0PM006.PK0PMUFL == "N")

      /* next sentence*/

    else

      set PK0PM006.PK0PMUFL cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(235); /* update must be 'Y' or 'N'*/
      PK0PM011.XXXPRCNM = "PK0P064"; /* Process name*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Verify the number of copies to be printed.*/
   /* ------------------------------------------------------------*/

  if (PK0PM006.PK0PMCPY == 0) /* Number of copies invalid*/

    set PK0PM006.PK0PMCPY cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(126); /* Indicate invalid number*/
    PK0PM006.XXXPRCNM = "PK0P064"; /* Process name*/

  end

   /* ------------------------------------------------------------*/
   /* ensure the warehouse is one that updates planning runs.*/
   /* ------------------------------------------------------------*/

  if (PK0PM006.XWHCD == "04"
   || PK0PM006.XWHCD == "07")
    PK0PS11();
  else
    set PK0PM006.PK0PMUMS initialAttributes; /* don't display message*/
    set PK0PM006.PK0PMUFL initialAttributes; /* don't display flag field*/
    set PK0PM006.PK0PMCPY cursor; /* set cursor to copies field*/
    converseLib.validationFailed(370); /* No plan for this warehouse*/
    PK0PM011.XXXPRCNM = "PK0P064"; /* Process name*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end PK0P064

// Process valid input request
Function PK0P065()
   /* ------------------------------------------------------------*/
   /* check change the plan option before proceeding*/
   /* Format the batch program parameters.*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  if (PK0PM006.PK0PMUFL == "N") /* do not change the picking plan*/

    PK0PW01.PK0PMSEL[6] = "*"; /* Indicate function completed*/
    set PK0PM006 initial; /* Clear map output area*/
    exit stack; /* exit to redisplay map*/

  end

  set PK0PW00 empty; /* Initialize variables work area*/
  set PK0PW06 empty; /* Initialize parameters work area*/

  PK0PW06.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/

  PK0PW00.PK0PWJCL = PK0PW06.PK0PWJCL; /* Report parameters*/

  PK0PW00.PK0PMCPY = PK0PM006.PK0PMCPY; /* Number of copies*/

  if (PK0PW01.XWHCD == "07")
    PK0PW00.PK0PWPRM = "PK565164";
  else
    PK0PW00.PK0PWPRM = "PK565162";
  end

  PK0P026(); /* Enque the internal reader*/

  while (PK0PW01.PK0PWSWS == "N") /* Until job is submitted*/

    PK0PW99.PK0PWJCL = PK0PT06.PK0PWJCL[PK0PWIXT]; /* JCL statement*/
    PK0PW01.PK0PTTYP = PK0PT06.PK0PTTYP[PK0PWIXT]; /* Statement type*/

    PK0P027(); /* Write to the internal reader*/

  end

  PK0P028(); /* Deque the internal reader*/

  PK0PW01.PK0PWMNO = 276; /* Job was submitted*/
  PK0PW01.PK0PMSEL[6] = "*"; /* Indicate function completed*/

  set PK0PM006 initial; /* Clear map output area*/


end // end PK0P065

// Carton Content Table Report
Function PK0P070()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  PK0P071(); /* Format and display the map*/

  PK0P072(); /* Check attention identifier*/

  PK0P073(); /* Reset fields to normal intensity*/

  PK0P074(); /* Verify the entered data*/

  PK0P075(); /* Process valid input request*/


end // end PK0P070

// Format and display the map
Function PK0P071()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    PK0PM007.XXXRVNBR = PK0PW01.XXXRVNBR; /* Revision number*/

    PK0PM007.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    PK0PM007.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
    PK0PM007.XWHABRV = PK0PW01.XWHABRV; /* Warehouse abbreviation*/

    PK0PM007.PK0PMRMT = PK0PW01.PK0PMRMT; /* Printer*/
    PK0PM007.PK0PMDES = PK0PW01.PK0PMDES; /* Description*/

    if (PK0PW01.PK0PWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK0PW01.PK0PWMNO);
    end /* Job submitted message number*/
    PK0PW01.PK0PWMNO = 0; /* Reset message number*/

  else

    set PK0PM007 alarm; /* Indicate sound alarm*/

  end

  converse PK0PM007 ;


end // end PK0P071

// Check attention identifier
Function PK0P072()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PK0PW01.PK0PMSEL[3] = "C"; /* Indicate selection cancelled*/

    set PK0PM007 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0PM007.XXXPRCNM = "PK0P072"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0P072

// Reset highlighted fields
Function PK0P073()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0PM007.PK0PMCPY initialAttributes; /* Number of copies*/


end // end PK0P073

// Verify the entered data
Function PK0P074()
   /* ------------------------------------------------------------*/
   /* Verify the number of copies to be printed.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (PK0PM007.PK0PMCPY == 0) /* Number of copies invalid*/

    set PK0PM007.PK0PMCPY cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(126); /* Indicate invalid number*/
    PK0PM007.XXXPRCNM = "PK0P074"; /* Process name*/

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end PK0P074

// Process valid input request
Function PK0P075()
   /* ------------------------------------------------------------*/
   /* Format the batch program parameters.*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set PK0PW00 empty; /* Initialize variables work area*/
  set PK0PW07 empty; /* Initialize parameters work area*/

  PK0PW00.PK0PMCPY = PK0PM007.PK0PMCPY; /* Number of copies*/

  PK0P026(); /* Enque the internal reader*/

  while (PK0PW01.PK0PWSWS == "N") /* Until job is submitted*/

    PK0PW99.PK0PWJCL = PK0PT07.PK0PWJCL[PK0PWIXT]; /* JCL statement*/
    PK0PW01.PK0PTTYP = PK0PT07.PK0PTTYP[PK0PWIXT]; /* Statement type*/

    PK0P027(); /* Write to the internal reader*/

  end

  PK0P028(); /* Deque the internal reader*/

  PK0PW01.PK0PWMNO = 314; /* Job was submitted*/
  PK0PW01.PK0PMSEL[7] = "*"; /* Indicate function completed*/

  set PK0PM007 initial; /* Clear map output area*/


end // end PK0P075

// Carton Classification Report
Function PK0P080()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  PK0P081(); /* Format and display the map*/

  PK0P082(); /* Check attention identifier*/

  PK0P083(); /* Reset fields to normal intensity*/

  PK0P084(); /* Verify the entered data*/

  PK0P085(); /* Process valid input request*/


end // end PK0P080

// Format and display the map
Function PK0P081()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    PK0PM008.XXXRVNBR = PK0PW01.XXXRVNBR; /* Revision number*/

    PK0PM008.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    PK0PM008.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
    PK0PM008.XWHABRV = PK0PW01.XWHABRV; /* Warehouse abbreviation*/

    PK0PM008.PK0PMRMT = PK0PW01.PK0PMRMT; /* Printer*/
    PK0PM008.PK0PMDES = PK0PW01.PK0PMDES; /* Description*/

    if (PK0PW01.PK0PWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK0PW01.PK0PWMNO);
    end /* Job submitted message number*/
    PK0PW01.PK0PWMNO = 0; /* Reset message number*/

  else

    set PK0PM008 alarm; /* Indicate sound alarm*/

  end

  converse PK0PM008 ;


end // end PK0P081

// Check attention identifier
Function PK0P082()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PK0PW01.PK0PMSEL[8] = "C"; /* Indicate selection cancelled*/

    set PK0PM008 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0PM008.XXXPRCNM = "PK0P082"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0P082

// Reset highlighted fields
Function PK0P083()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0PM008.PK0PMCPY initialAttributes; /* Number of copies*/


end // end PK0P083

// Verify the entered data
Function PK0P084()
   /* ------------------------------------------------------------*/
   /* Verify the number of copies to be printed.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (PK0PM008.PK0PMCPY == 0) /* Number of copies invalid*/

    set PK0PM008.PK0PMCPY cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(126); /* Indicate invalid number*/
    PK0PM008.XXXPRCNM = "PK0P084"; /* Process name*/

  end

  if (PK0PM008.XWHCD != "02" /* If not warehouse 02*/
   && PK0PM008.XWHCD != "04" /* If not warehouse 04*/
   && PK0PM008.XWHCD != "07" /* If not warehouse 07*/
   && PK0PM008.XWHCD != "51" /* If not warehouse 51*/
   && PK0PM008.XWHCD != "42") /* If not warehouse 42(canada)*/

    set PK0PM008.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(002); /* Indicate invalid warehouse*/
    PK0PM008.XXXPRCNM = "PK0P084"; /* Process name*/

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end PK0P084

// Process valid input request
Function PK0P085()
   /* ------------------------------------------------------------*/
   /* Format the batch program parameters.*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set PK0PW00 empty; /* Initialize variables work area*/
  set PK0PW08 empty; /* Initialize parameters work area*/

  PK0PW08.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/

  PK0PW00.PK0PWJCL = PK0PW08.PK0PWJCL; /* Report parameters*/

  PK0PW00.PK0PMCPY = PK0PM008.PK0PMCPY; /* Number of copies*/

  PK0P026(); /* Enque the internal reader*/

  while (PK0PW01.PK0PWSWS == "N") /* Until job is submitted*/

    PK0PW99.PK0PWJCL = PK0PT08.PK0PWJCL[PK0PWIXT]; /* JCL statement*/
    PK0PW01.PK0PTTYP = PK0PT08.PK0PTTYP[PK0PWIXT]; /* Statement type*/

    PK0P027(); /* Write to the internal reader*/

  end

  PK0P028(); /* Deque the internal reader*/

  PK0PW01.PK0PWMNO = 383; /* Job was submitted*/
  PK0PW01.PK0PMSEL[8] = "*"; /* Indicate function completed*/

  set PK0PM008 initial; /* Clear map output area*/


end // end PK0P085

// Stock Number Reports
Function PK0P090()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  PK0P091(); /* Format and display the map*/

  PK0P092(); /* Check attention identifier*/

  PK0P093(); /* Reset fields to normal intensity*/

  PK0P094(); /* Verify the entered data*/

  PK0P095(); /* Process valid input request*/


end // end PK0P090

// Format and display the map
Function PK0P091()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    PK0PM009.XXXRVNBR = PK0PW01.XXXRVNBR; /* Revision number*/

    PK0PM009.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    PK0PM009.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
    PK0PM009.XWHABRV = PK0PW01.XWHABRV; /* Warehouse abbreviat*/

    if (PK0PW01.PK0PWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK0PW01.PK0PWMNO);
    end /* Job submitted message*/
    PK0PW01.PK0PWMNO = 0; /* Reset message number*/

  else

    set PK0PM009 alarm; /* Indicate sound alarm*/

  end

  converse PK0PM009 ;


end // end PK0P091

// Check attention identifier
Function PK0P092()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection men*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PK0PW01.PK0PMSEL[9] = "C"; /* Indicate selection canceled*/

    set PK0PM009 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0PM009.XXXPRCNM = "PK0P092"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0P092

// Reset highlighted fields
Function PK0P093()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0PM009.PK0PMCPY initialAttributes; /* Number of Copies*/
  set PK0PM009.PK0PMRTP initialAttributes; /* Report Type*/
  set PK0PM009.PK0PMLMM initialAttributes; /* LOW Month*/
  set PK0PM009.PK0PMLDD initialAttributes; /* LOW Day*/
  set PK0PM009.PK0PMLYY initialAttributes; /* LOW Year*/
  set PK0PM009.PK0PMHMM initialAttributes; /* HIGH Month*/
  set PK0PM009.PK0PMHDD initialAttributes; /* HIGH Day*/
  set PK0PM009.PK0PMHYY initialAttributes; /* HIGH Year*/


end // end PK0P093

// Verify the entered data
Function PK0P094()
   /* ------------------------------------------------------------*/
   /* Verify the Do not Ship Before and Do not Ship After dates.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PK0PM009.PK0PMRTP cursor; /* Set cursor*/
    PK0PM009.XXXPRCNM = "PK0P094"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  PK0PW01.PK0PWSWX = "N"; /* Info entered switch*/
  PK0PW01.PK0PWSDT = PKDREC.PKDLBLDT[1]; /* Setup date*/

  if (PK0PM009.PK0PMRTP is modified) /* Report Type*/

    PK0PW01.PK0PWSWX = "Y"; /* Process Info Switch*/

  end

  if (PK0PW01.PK0PWSWX == "N") /* Info entered*/

    set PK0PM009.PK0PMRTP cursor, bold; /* Position cursor*/
    converseLib.validationFailed(139); /* Indicate parameters needed*/
    PK0PM009.XXXPRCNM = "PK0P094"; /* Process name*/

  else
    /*  */
    /* ------------ y2k in  begin ------------------*/
    /*  */
    PK0PW00.PK0PWCMP-YY1 = PK0PM009.PK0PMHYY;
    if (PK0PW00.PK0PWCMP-YY1 > 60)
      PK0PWCMP-CC1 = 19;
    else
      PK0PWCMP-CC1 = 20;
    end
    PK0PW00.PK0PWCMP-YY2 = PK0PM009.PK0PMLYY;
    if (PK0PW00.PK0PWCMP-YY2 > 60)
      PK0PWCMP-CC2 = 19;
    else
      PK0PWCMP-CC2 = 20;
    end
    if (PK0PW00.PK0PWCMP-CCYY1 < PK0PW00.PK0PWCMP-CCYY2)
      /*  */
      /* ------------ y2k in end ---------------------*/
      /*  */
      if (PK0PM009.PK0PMHMM < PK0PM009.PK0PMLMM /* If HIGH date*/
       && PK0PM009.PK0PMHDD < PK0PM009.PK0PMLDD) /* is less thanlow date*/
        /*  */
        /* ------------ y2k out begin ------------------*/
        /*  */
        /* AND PK0PM009.PK0PMHYY LT PK0PM009.PK0PMLYY;/* Low date*/
        /*  */
        /* ------------ y2k out end --------------------*/
        /*  */

        PK0PM009.PK0PMHMM = PK0PM009.PK0PMLMM; /* Move LOW date*/
        PK0PM009.PK0PMHDD = PK0PM009.PK0PMLDD; /* to*/
        PK0PM009.PK0PMHYY = PK0PM009.PK0PMLYY; /* High date*/

      end

    end

  end

  if (PK0PM009.PK0PMCPY == 0) /* Number oc copies invalid*/

    set PK0PM009.PK0PMCPY cursor, bold; /* Position cursor*/
    converseLib.validationFailed(126); /* Indicate parameters needed*/
    PK0PM009.XXXPRCNM = "PK0P094"; /* Process name*/

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end PK0P094

// Process valid input request
Function PK0P095()
   /* ------------------------------------------------------------*/
   /* Format the batch program parameters.*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set PK0PW00 empty; /* Initialize variables work a*/
  set PK0PW09 empty; /* Initialize parameters work*/

  PK0PW00.PK0PMCPY = PK0PM009.PK0PMCPY; /* Number of Copies*/

  PK0PW09.XWHCD = PK0PW01.XWHCD; /* Number of Copies*/

  if (PK0PM009.PK0PMRTP == "D") /* Detail Report*/

    PK0PW00.PK0PWEXE = "PK4181"; /* Execute proc PK4181*/
    PK0PW00.PK0PWSYS = "PK418D"; /* Run program PK418D*/

  end

  if (PK0PM009.PK0PMRTP == "S") /* Summary Report*/

    PK0PW00.PK0PWEXE = "PK4191"; /* Execute proc PK4181*/
    PK0PW00.PK0PWSYS = "PK419D"; /* Run program PK419D*/

  end

  PK0P026(); /* Enque the internal reader*/

  while (PK0PW01.PK0PWSWS == "N") /* Until job is submitted*/

    PK0PW99.PK0PWJCL = PK0PT09.PK0PWJCL[PK0PWIXT]; /* JCL statement*/
    PK0PW01.PK0PTTYP = PK0PT09.PK0PTTYP[PK0PWIXT]; /* Statement type*/

    if (PK0PW01.PK0PTTYP == "P") /* Parameters statement*/

      /*  */
      /* ----------------- y2k out begin ------*/
      /*  */
      /* MOVE 19 TO PK0PW09.PK0PMLCC; /* LOW Century*/
      /*  */
      /* ----------------- y2k out end --------*/
      /*  */
      PK0PW09.PK0PMLMM = PK0PM009.PK0PMLMM; /* LOW Month*/
      PK0PW09.PK0PMLDD = PK0PM009.PK0PMLDD; /* LOW Day*/
      PK0PW09.PK0PMLYY = PK0PM009.PK0PMLYY; /* LOW Year*/
      /*  */
      /* ----------------- y2k in  begin ------*/
      /*  */
      if (PK0PM009.PK0PMLYY > "60")
        PK0PW09.PK0PMLCC = 19; /* LOW Century*/
      else
        PK0PW09.PK0PMLCC = 20; /* LOW Century*/
      end
      /*  */
      /* ----------------- y2k in  end --------*/
      /*  */

      if (PK0PM009.PK0PMHMM > 0 /* HIGH Month*/
       && PK0PM009.PK0PMHDD > 0 /* HIGH Day*/
       && PK0PM009.PK0PMHYY >= "0") /* HIGH Year*/
        /*  */
        /* ----------------- y2k out begin ------*/
        /*  */
        /* AND PK0PM009.PK0PMHYY GT 0; /* HIGH Year*/
        /* MOVE 19 TO PK0PW09.PK0PMHCC;/* HIGH Century*/
        /*  */
        /* ----------------- y2k out end --------*/
        /*  */
        PK0PW09.PK0PMHMM = PK0PM009.PK0PMHMM; /* HIGH Month*/
        PK0PW09.PK0PMHDD = PK0PM009.PK0PMHDD; /* HIGH Day*/
        PK0PW09.PK0PMHYY = PK0PM009.PK0PMHYY; /* To Year*/
        /*  */
        /* ----------------- y2k in begin -------*/
        /*  */
        if (PK0PM009.PK0PMHYY > "60")
          PK0PW09.PK0PMHCC = 19; /* HIGH Century*/
        else
          PK0PW09.PK0PMHCC = 20; /* HIGH Century*/
        end
        /*  */
        /* ----------------- y2k in end ---------*/
        /*  */

      else
        PK0PW09.PK0PMHMM = 99; /* HIGH Month*/
        PK0PW09.PK0PMHDD = 99; /* HIGH Day*/
        PK0PW09.PK0PMHCC = 99; /* HIGH Ccentury*/
        PK0PW09.PK0PMHYY = 99; /* HIGH Year*/

      end

      PK0PW00.PK0PWJCL = PK0PW09.PK0PWJCL; /* Report parameters*/

      PK0P027(); /* Write to the internal reader*/

    else

      PK0P027(); /* Write to the internal reader*/

    end

  end

  PK0P028(); /* Deque the internal reader*/

   /* ------------------------------------------------------------*/
   /* Indicate that the function is completed.*/
   /* ------------------------------------------------------------*/

  PK0PW01.PK0PWMNO = 385; /* Parameters loaded message*/
  PK0PW01.PK0PMSEL[9] = "*"; /* Indicate function completed*/

  set PK0PM009 initial; /* Clear map output area*/


end // end PK0P095

// Carrier Summary By Order
Function PK0P110()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  PK0P111(); /* Format and display the map*/

  PK0P112(); /* Check attention identifier*/

  PK0P113(); /* Reset fields to normal intensity*/

  PK0P114(); /* Verify the entered data*/

  PK0P115(); /* Process valid input request*/


end // end PK0P110

// Format and display the map
Function PK0P111()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    PK0PM011.XXXRVNBR = PK0PW01.XXXRVNBR; /* Revision number*/

    PK0PM011.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    PK0PM011.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
    PK0PM011.XWHABRV = PK0PW01.XWHABRV; /* Warehouse abbreviation*/

    if (PK0PW01.PK0PWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK0PW01.PK0PWMNO);
    end /* Job submitted message number*/
    PK0PW01.PK0PWMNO = 0; /* Reset message number*/

    PK0PW01.PK0PWQRY = "PK412D"; /* Query Identification*/
    PK0PW01.PK0PWHSE = PK0PW01.XWHCD; /* Warehouse (numeric)*/

    /* ----------------------------------------------------------*/
    /* Select unique row from DCORP.VPARM101*/
    /* ----------------------------------------------------------*/

    PK0P116(); /* Select unique row*/

    /* ----------------------------------------------------------*/
    /* Display previous FROM DATE and TO DATE*/
    /* ----------------------------------------------------------*/

    XX0XW01.XX0XWDAT = XZZREC.XZZINT1;
    PK0PM011.PK0PMFMM = XX0XW01.XX0XWMM; /* From Month*/
    PK0PM011.PK0PMFDD = XX0XW01.XX0XWDD; /* From Day*/
    PK0PM011.PK0PMFYY = XX0XW01.XX0XWYY; /* From Year*/

    XX0XW01.XX0XWDAT = XZZREC.XZZINT2;
    PK0PM011.PK0PMTMM = XX0XW01.XX0XWMM; /* To Month*/
    PK0PM011.PK0PMTDD = XX0XW01.XX0XWDD; /* To Day*/
    PK0PM011.PK0PMTYY = XX0XW01.XX0XWYY; /* To Year*/

  else

    set PK0PM011 alarm; /* Indicate sound alarm*/

  end
  converse PK0PM011 ;


end // end PK0P111

// Check attention identifier
Function PK0P112()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PK0PW01.PK0PMSEL[9] = "C"; /* Indicate selection cancelled*/

    set PK0PM011 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0PM011.XXXPRCNM = "PK0P112"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0P112

// Reset highlighted fields
Function PK0P113()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0PM011.PK0PMFMM initialAttributes; /* From Month*/
  set PK0PM011.PK0PMFDD initialAttributes; /* From Day*/
  set PK0PM011.PK0PMFYY initialAttributes; /* From Year*/
  set PK0PM011.PK0PMTMM initialAttributes; /* To Month*/
  set PK0PM011.PK0PMTDD initialAttributes; /* To Day*/
  set PK0PM011.PK0PMTYY initialAttributes; /* To Year*/


end // end PK0P113

// Verify the entered data
Function PK0P114()
   /* ------------------------------------------------------------*/
   /* Verify the Do not Ship Before and Do not Ship After dates.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PK0PM011.PK0PMFMM cursor; /* Set cursor*/
    PK0PM011.XXXPRCNM = "PK0P114"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  PK0PW01.PK0PWSWX = "N"; /* Info entered switch*/
  PK0PW01.PK0PWSDT = PKDREC.PKDLBLDT[1]; /* Setup date*/

  if (PK0PM011.PK0PMFMM > "00"  /* From Month*/
   && PK0PM011.PK0PMFMM <= "12" 
   && PK0PM011.PK0PMFDD > "00"  /* From Day*/
   && PK0PM011.PK0PMFDD <= "31" 
   && PK0PM011.PK0PMFYY >= "00" /* From Year*/
   /**/
   /* ------------- y2k out begin --------*/
   /**/
   /* AND PK0PM011.PK0PMFYY GT '00'*/
   /* /* From Year*/
   /**/
   /* ------------- y2k out end ----------*/
   /**/
   && PK0PM011.PK0PMFYY <= "99" 
  )                            
    PK0PW01.PK0PWSWX = "Y"; /* Process name*/
  end

  if (PK0PM011.PK0PMFMM == "00" /* From Month*/
   && PK0PM011.PK0PMFDD == "00" /* From Day*/
   && PK0PM011.PK0PMFYY == "00") /* From Year*/
    PK0PW01.PK0PWSWX = "Y"; /* Process name*/
  end

  if (PK0PW01.PK0PWSWX == "N") /* Info entered*/

    set PK0PM011.PK0PMFMM cursor, bold; /* Position cursor*/
    converseLib.validationFailed(286); /* Indicate parameters needed*/
    PK0PM011.XXXPRCNM = "PK0P114"; /* Process name*/
    exit stack;
  end

  if (PK0PM011.PK0PMTMM > "00"  /* From Month*/
   && PK0PM011.PK0PMTMM <= "12" 
   && PK0PM011.PK0PMTDD > "00"  /* From Day*/
   && PK0PM011.PK0PMTDD <= "31" 
   && PK0PM011.PK0PMTYY >= "00" /* From Year*/
   /**/
   /* ------------- y2k out begin --------*/
   /**/
   /* AND PK0PM011.PK0PMTYY GT '00'*/
   /* /* From Year*/
   /**/
   /* ------------- y2k out end ----------*/
   /**/
   && PK0PM011.PK0PMTYY <= "99" 
  )                            
    PK0PW01.PK0PWSWX = "Y"; /* Process name*/
  end

  if (PK0PM011.PK0PMTMM == "00" /* From Month*/
   && PK0PM011.PK0PMTDD == "00" /* From Day*/
   && PK0PM011.PK0PMTYY == "00") /* From Year*/
    PK0PW01.PK0PWSWX = "Y"; /* Process name*/
  end

  if (PK0PW01.PK0PWSWX == "N") /* Info entered*/

    set PK0PM011.PK0PMTMM cursor, bold; /* Position cursor*/
    converseLib.validationFailed(286); /* Indicate parameters needed*/
    PK0PM011.XXXPRCNM = "PK0P114"; /* Process name*/
    exit stack;

  end

   /* ----------------CHECK THE DATES FOR VALIDITY----------------*/

  set PK0PW00 empty; /* Initialize variables work area*/

  PK0PW01.PK0PWQRY = "PK412D"; /* Query identification*/
  PK0PW01.PK0PWHSE = PK0PW01.XWHCD; /* Warehouse (numeric)*/

  if (PK0PM011.PK0PMFMM == "00" /* From Month*/
   && PK0PM011.PK0PMFDD == "00" /* From Day*/
   && PK0PM011.PK0PMFYY == "00") /* From Year*/
    PK0PW01.PK0PWFCC = 00; /* From Century*/
  else
    /*  */
    /* ------------- y2k out begin --------*/
    /*  */
    /* MOVE 19 TO PK0PW01.PK0PWFCC;    /* From Century*/
    /*  */
    /* --------------y2k out end ----------*/
    /*  */
    /*  */
    /* --------------y2k in begin ---------*/
    /*  */
    if (PK0PM011.PK0PMFYY > "60") /* From Year*/
      PK0PW01.PK0PWFCC = 19; /* From Century*/
    else
      PK0PW01.PK0PWFCC = 20; /* From Century*/
    end
    /*  */
    /* --------------y2k in end -----------*/
    /*  */
  end

  PK0PW01.PK0PWFMM = PK0PM011.PK0PMFMM; /* From Month*/
  PK0PW01.PK0PWFDD = PK0PM011.PK0PMFDD; /* From Day*/
  PK0PW01.PK0PWFYY = PK0PM011.PK0PMFYY; /* From Year*/

  if (PK0PM011.PK0PMTMM == "99" /* To Month*/
   && PK0PM011.PK0PMTDD == "99" /* To Day*/
   && PK0PM011.PK0PMTYY == "99") /* To Year*/
    PK0PW01.PK0PWTCC = 99; /* To Century*/
    PK0PW01.PK0PWTMM = PK0PM011.PK0PMTMM; /* To Month*/
    PK0PW01.PK0PWTDD = PK0PM011.PK0PMTDD; /* To Day*/
    PK0PW01.PK0PWTYY = PK0PM011.PK0PMTYY; /* To Year*/
  else
    if (PK0PM011.PK0PMTMM > "00" /* To Month*/
     && PK0PM011.PK0PMTDD > "00" /* To Day*/
     && PK0PM011.PK0PMTYY >= "00") /* To Year*/
      /*  */
      /* ---------- y2k out begin --------------*/
      /*  */
      /* AND PK0PM011.PK0PMTYY GT '00';/* To Year*/
      /* MOVE 19 TO PK0PW01.PK0PWTCC;  /* To Century*/
      /*  */
      /* ----------- y2k out end ---------------*/
      /*  */
      PK0PW01.PK0PWTMM = PK0PM011.PK0PMTMM; /* To Month*/
      PK0PW01.PK0PWTDD = PK0PM011.PK0PMTDD; /* To Day*/
      PK0PW01.PK0PWTYY = PK0PM011.PK0PMTYY; /* To Year*/
      /*  */
      /* ----------- y2k in begin --------------*/
      /*  */
      if (PK0PM011.PK0PMTYY > "60")
        PK0PW01.PK0PWTCC = 19; /* To Century*/
      else
        PK0PW01.PK0PWTCC = 20; /* To Century*/
      end
      /*  */
      /* ----------- y2k in  end ---------------*/
      /*  */
    else
      PK0PW01.PK0PWTMM = 99; /* To Month*/
      PK0PW01.PK0PWTDD = 99; /* To Day*/
      PK0PW01.PK0PWTCC = 99; /* To Century*/
      PK0PW01.PK0PWTYY = 99; /* To Year*/
    end
  end

  if (PK0PW01.PK0PWFRD > PK0PW01.PK0PWTOD)
    set PK0PM011.PK0PMFMM bold, cursor;
    set PK0PM011.PK0PMFDD bold;
    set PK0PM011.PK0PMFYY bold;
    converseLib.validationFailed(286); /* Indicate parameters needed*/
    PK0PM011.XXXPRCNM = "PK0P114"; /* Process name*/
    exit stack;
  end

  if (PK0PW01.PK0PWFRD > 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGJUL";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = PK0PW01.PK0PWFRD;
    TA1REC.TA1MAP = "PK0PM011";
    PK0PS09(); /* Validate dates*/
    if (TA2REC.TA2RTNCD > 0)
      set PK0PM011.PK0PMFMM bold, cursor;
      set PK0PM011.PK0PMFDD bold;
      set PK0PM011.PK0PMFYY bold;
      converseLib.validationFailed(158); /* Indicate parameters needed*/
      PK0PM011.XXXPRCNM = "PK0P114"; /* Process name*/
      exit stack;
    end
  end

  if (PK0PW01.PK0PWTOD > 0
   && PK0PW01.PK0PWTOD < 99999999)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGJUL";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = PK0PW01.PK0PWTOD;
    PK0PS09(); /* Validate dates*/
    if (TA2REC.TA2RTNCD > 0)
      set PK0PM011.PK0PMTMM bold, cursor;
      set PK0PM011.PK0PMTDD bold;
      set PK0PM011.PK0PMTYY bold;
      converseLib.validationFailed(158); /* Indicate parameters needed*/
      PK0PM011.XXXPRCNM = "PK0P114"; /* Process name*/
      exit stack;
    end
  end
end // end PK0P114

// Process valid input request
Function PK0P115()
   /* ------------------------------------------------------------*/
   /* Format the batch program parameters.*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set PK0PW00 empty; /* Initialize variables work area*/

  PK0PW01.PK0PWQRY = "PK412D"; /* Query identification*/
  PK0PW01.PK0PWHSE = PK0PW01.XWHCD; /* Warehouse (numeric)*/

  if (PK0PM011.PK0PMFMM == "00" /* From Month*/
   && PK0PM011.PK0PMFDD == "00" /* From Day*/
   && PK0PM011.PK0PMFYY == "00") /* From Year*/

    PK0PW01.PK0PWFCC = 00; /* From Century*/

  else
    /*  */
    /* ------------ y2k out begin --------------*/
    /*  */
    /* MOVE 19 TO PK0PW01.PK0PWFCC;    /* From Century*/
    /*  */
    /* ------------ y2k out end ----------------*/
    /*  */
    /*  */
    /* ------------ y2k in begin ---------------*/
    /*  */
    if (PK0PM011.PK0PMFYY > "60") /* From Year*/
      PK0PW01.PK0PWFCC = 19; /* From Century*/
    else
      PK0PW01.PK0PWFCC = 20; /* From Century*/
    end
    /*  */
    /* ------------ y2k in end ---------------------*/
    /*  */
  end

  PK0PW01.PK0PWFMM = PK0PM011.PK0PMFMM; /* From Month*/
  PK0PW01.PK0PWFDD = PK0PM011.PK0PMFDD; /* From Day*/
  PK0PW01.PK0PWFYY = PK0PM011.PK0PMFYY; /* From Year*/

  if (PK0PM011.PK0PMTMM == "99" /* To Month*/
   && PK0PM011.PK0PMTDD == "99" /* To Day*/
   && PK0PM011.PK0PMTYY == "99") /* To Year*/

    PK0PW01.PK0PWTCC = 99; /* To Century*/
    PK0PW01.PK0PWTMM = PK0PM011.PK0PMTMM; /* To Month*/
    PK0PW01.PK0PWTDD = PK0PM011.PK0PMTDD; /* To Day*/
    PK0PW01.PK0PWTYY = PK0PM011.PK0PMTYY; /* To Year*/

  else
    if (PK0PM011.PK0PMTMM > "00" /* To Month*/
     && PK0PM011.PK0PMTDD > "00" /* To Day*/
     && PK0PM011.PK0PMTYY >= "00") /* To Year*/

      /*  */
      /* ------------- y2k out begin -----------*/
      /*  */
      /* AND PK0PM011.PK0PMTYY GT '00';   /* To Year*/
      /* MOVE 19 TO PK0PW01.PK0PWTCC;  /* To Century*/
      /*  */
      /* ------------- y2k out end -----------*/
      /*  */
      PK0PW01.PK0PWTMM = PK0PM011.PK0PMTMM; /* To Month*/
      PK0PW01.PK0PWTDD = PK0PM011.PK0PMTDD; /* To Day*/
      PK0PW01.PK0PWTYY = PK0PM011.PK0PMTYY; /* To Year*/
      /*  */
      /* ------------- y2k in begin -----------*/
      /*  */
      if (PK0PM011.PK0PMTYY > "60")
        PK0PW01.PK0PWTCC = 19; /* To Century*/
      else
        PK0PW01.PK0PWTCC = 20; /* To Century*/
      end
      /*  */
      /* ------------- y2k in end  -----------*/
      /*  */

    else
      PK0PW01.PK0PWTMM = 99; /* To Month*/
      PK0PW01.PK0PWTDD = 99; /* To Day*/
      PK0PW01.PK0PWTCC = 99; /* To Century*/
      PK0PW01.PK0PWTYY = 99; /* To Year*/
    end
  end

   /* ------------------------------------------------------------*/
   /* select unique row on DCORP.VPARM101 and open.*/
   /* ------------------------------------------------------------*/

  PK0P116(); /* Select unique row*/

   /* ------------------------------------------------------------*/
   /* delete row from DCORP.VPARM101 if it already exists*/
   /* ------------------------------------------------------------*/

  if (PK0PW01.PK0PWSWR == "Y") /* Row exists switch*/

    PK0P117(); /* Delete row*/

  end

   /* ------------------------------------------------------------*/
   /* add row to DCORP.VPARM101.*/
   /* ------------------------------------------------------------*/

  PK0P118(); /* Add next row*/

   /* ------------------------------------------------------------*/
   /* Indicate that the function is completed.*/
   /* ------------------------------------------------------------*/

  PK0PW01.PK0PWMNO = 384; /* Parameters loaded message*/
  PK0PW01.PK0PMSEL[10] = "*"; /* Indicate function completed*/

  set PK0PM011 initial; /* Clear map output area*/


end // end PK0P115

// Declare cursor on VPARM101
Function PK0P116()
   /* ------------------------------------------------------------*/
   /* Declare cursor on DCORP.VPARM101 database usining IO1000.*/
   /* ------------------------------------------------------------*/

  PK0PW01.PK0PWSWR = "N"; /* Row exists switch*/

  set XZZREC empty; /* Initialize variables work a*/

  XZZREC.XZZQRYID = PK0PW01.PK0PWQRY; /* Query Identification*/
  XZZREC.XZZQRYRN = PK0PW01.PK0PWHSE; /* Query Request Number*/
  XZZREC.XZZQRYLN = 0; /* Query Line Number*/

   /* ------------------------------------------------------------*/
   /* select the requested set of rows from the table*/
   /* ------------------------------------------------------------*/

  try
    call "IO1000" ("S ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* if successful, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PK0PW01.PK0PWSWR = "Y"; /* Row exists switch*/
    return;

  else

    PK0PW01.PK0PWSWR = "N"; /* Row exists switch*/
    return;

  end

end // end PK0P116

// Delete row from VPARM101
Function PK0P117()
   /* ------------------------------------------------------------*/
   /* Delete row from DCORP.VPARM101 database usining IO1000.*/
   /* ------------------------------------------------------------*/

  XZZREC.XZZQRYID = PK0PW01.PK0PWQRY; /* Query Identification*/
  XZZREC.XZZQRYRN = PK0PW01.PK0PWHSE; /* Query Request Number*/

   /* ------------------------------------------------------------*/
   /* Delete row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1000" ("D ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* if successful, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* if data not available, return an error message to the user*/
   /* otherwise, indicate the a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP Return Code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(136); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(8); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE ROW FROM TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PK0PM011.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Database name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
  TA1REC.TA1TBLKE = XZZREC.XZZQRYID; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

end // end PK0P117

// Add row to VPARM101
Function PK0P118()
   /* ------------------------------------------------------------*/
   /* Add row to DCORP.VPARM101 database usining IO1000.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date and time*/

  XZZREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  XZZREC.ZZZSTM = XX0XW01.XX0XWTIM; /* Setup time*/

  XZZREC.XZZQRYID = PK0PW01.PK0PWQRY; /* Query Identification*/
  XZZREC.XZZQRYRN = PK0PW01.PK0PWHSE; /* Query Request Number*/
  XZZREC.XZZQRYLN = 0; /* Query Line Number*/
  XZZREC.XZZCHRGP = " "; /* Set group char spaces*/

  XZZREC.XZZ2CHR1 = PK0PW01.XWHCD; /* Warehouse Code*/
  XZZREC.XZZINT1 = PK0PW01.PK0PWFRD; /* From Date*/
  XZZREC.XZZINT2 = PK0PW01.PK0PWTOD; /* To Date*/

   /* ------------------------------------------------------------*/
   /* zero the numeric parameters not used*/
   /* ------------------------------------------------------------*/

  XZZREC.XZZSINT1 = 0;
  XZZREC.XZZSINT2 = 0;
  XZZREC.XZZDECIM = 0;

   /* ------------------------------------------------------------*/
   /* Add row to the table*/
   /* ------------------------------------------------------------*/

  try
    call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* if successful, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* if data not available, return an error message to the user*/
   /* otherwise, indicate the a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP Return Code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(136); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(8); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD A ROW TO THE TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PK0PM011.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Database name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
  TA1REC.TA1TBLKE = XZZREC.XZZQRYID; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

end // end PK0P118

// Carrier Summary Report
Function PK0P120()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  PK0P121(); /* Format and display the map*/

  PK0P122(); /* Check attention identifier*/

  PK0P123(); /* Reset fields to normal intensity*/

  PK0P124(); /* Verify the entered data*/

  PK0P125(); /* Process valid input request*/


end // end PK0P120

// Format and display the map
Function PK0P121()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    PK0PM012.XXXRVNBR = PK0PW01.XXXRVNBR; /* Revision number*/

    PK0PM012.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    PK0PM012.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
    PK0PM012.XWHABRV = PK0PW01.XWHABRV; /* Warehouse abbreviat*/

    if (PK0PW01.PK0PWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK0PW01.PK0PWMNO);
    end /* Job submitted message*/
    PK0PW01.PK0PWMNO = 0; /* Reset message number*/

    PK0PW01.PK0PWQRY = "PK413D"; /* Query Identification*/
    PK0PW01.PK0PWHSE = PK0PW01.XWHCD; /* Warehouse (numeric)*/

    /* ---------------------------------------------------------*/
     /* Select unique row from DCORP.MPARM101*/
    /* ---------------------------------------------------------*/

    PK0P116(); /* Select unique row*/

    /* ---------------------------------------------------------*/
     /* Display previous FROM DATE and TO DATE*/
    /* ---------------------------------------------------------*/

    XX0XW01.XX0XWDAT = XZZREC.XZZINT1;
    PK0PM012.PK0PMFMM = XX0XW01.XX0XWMM; /* From Month*/
    PK0PM012.PK0PMFDD = XX0XW01.XX0XWDD; /* From Day*/
    PK0PM012.PK0PMFYY = XX0XW01.XX0XWYY; /* From Year*/

    XX0XW01.XX0XWDAT = XZZREC.XZZINT2;
    PK0PM012.PK0PMTMM = XX0XW01.XX0XWMM; /* To Month*/
    PK0PM012.PK0PMTDD = XX0XW01.XX0XWDD; /* To Day*/
    PK0PM012.PK0PMTYY = XX0XW01.XX0XWYY; /* To Year*/

  else

    set PK0PM012 alarm; /* Indicate sound alarm*/

  end

  converse PK0PM012 ;


end // end PK0P121

// Check attention identifier
Function PK0P122()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection men*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PK0PW01.PK0PMSEL[10] = "C"; /* Indicate selection can*/

    set PK0PM012 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention ke*/
    PK0PM012.XXXPRCNM = "PK0P122"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0P122

// Reset highlighted fields
Function PK0P123()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0PM012.PK0PMFMM initialAttributes; /* From Month*/
  set PK0PM012.PK0PMFDD initialAttributes; /* From Day*/
  set PK0PM012.PK0PMFYY initialAttributes; /* From Year*/
  set PK0PM012.PK0PMTMM initialAttributes; /* To Month*/
  set PK0PM012.PK0PMTDD initialAttributes; /* To Day*/
  set PK0PM012.PK0PMTYY initialAttributes; /* To Year*/


end // end PK0P123

// Verify the entered data
Function PK0P124()
   /* ------------------------------------------------------------*/
   /* Verify the Do not Ship Before and Do not Ship After dates.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PK0PM012.PK0PMFMM cursor; /* Set cursor*/
    PK0PM012.XXXPRCNM = "PK0P124"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  PK0PW01.PK0PWSWX = "N"; /* Info entered switch*/
  PK0PW01.PK0PWSDT = PKDREC.PKDLBLDT[1]; /* Setup date*/

  if (PK0PM012.PK0PMFMM > "00"  /* From Month*/
   && PK0PM012.PK0PMFMM <= "12" 
   && PK0PM012.PK0PMFDD > "00"  /* From Day*/
   && PK0PM012.PK0PMFDD <= "31" 
   && PK0PM012.PK0PMFYY >= "00" /* From Year*/
   /**/
   /* --------------- y2k out begin*/
   /* ----------*/
   /**/
   /* AND PK0PM012.PK0PMFYY GT '00'  /**/
   /* From Year*/
   /**/
   /* --------------- y2k out end*/
   /* ------------*/
   /**/
   && PK0PM012.PK0PMFYY <= "99")

    PK0PW01.PK0PWSWX = "Y"; /* Process Info Switch*/

  end


  if (PK0PM012.PK0PMFMM == "00" /* From Month*/
   && PK0PM012.PK0PMFDD == "00" /* From Day*/
   && PK0PM012.PK0PMFYY == "00") /* From Year*/

    PK0PW01.PK0PWSWX = "Y"; /* Process Info Switch*/

  end

  if (PK0PW01.PK0PWSWX == "N") /* Info entered*/

    set PK0PM012.PK0PMFMM cursor, bold; /* Position cursor*/
    converseLib.validationFailed(286); /* Indicate parameters needed*/
    PK0PM012.XXXPRCNM = "PK0P124"; /* Process name*/
    exit stack;
  end

  if (PK0PM012.PK0PMTMM > "00"  /* From Month*/
   && PK0PM012.PK0PMTMM <= "12" 
   && PK0PM012.PK0PMTDD > "00"  /* From Day*/
   && PK0PM012.PK0PMTDD <= "31" 
   && PK0PM012.PK0PMTYY >= "00" /* From Year*/
   /**/
   /* --------------- y2k out begin*/
   /* ----------*/
   /**/
   /* AND PK0PM012.PK0PMTYY GT '00'  /**/
   /* From Year*/
   /**/
   /* --------------- y2k out end*/
   /* ------------*/
   /**/
   && PK0PM012.PK0PMTYY <= "99" 
  )                            
    PK0PW01.PK0PWSWX = "Y"; /* Process name*/
  end

  if (PK0PM012.PK0PMTMM == "00" /* From Month*/
   && PK0PM012.PK0PMTDD == "00" /* From Day*/
   && PK0PM012.PK0PMTYY == "00") /* From Year*/
    PK0PW01.PK0PWSWX = "Y"; /* Process name*/
  end

  if (PK0PW01.PK0PWSWX == "N") /* Info entered*/

    set PK0PM012.PK0PMTMM cursor, bold; /* Position cursor*/
    converseLib.validationFailed(286); /* Indicate parameters needed*/
    PK0PM012.XXXPRCNM = "PK0P124"; /* Process name*/
    exit stack;

  end

   /* ----------------CHECK THE DATES FOR VALIDITY----------------*/

  set PK0PW00 empty; /* Initialize variables work area*/

  PK0PW01.PK0PWQRY = "PK412D"; /* Query identification*/
  PK0PW01.PK0PWHSE = PK0PW01.XWHCD; /* Warehouse (numeric)*/

  if (PK0PM012.PK0PMFMM == "00" /* From Month*/
   && PK0PM012.PK0PMFDD == "00" /* From Day*/
   && PK0PM012.PK0PMFYY == "00") /* From Year*/
    PK0PW01.PK0PWFCC = 00; /* From Century*/
  else
    /*  */
    /* --------------- y2k out begin ----------*/
    /*  */
    /* MOVE 19 TO PK0PW01.PK0PWFCC;    /* From Century*/
    /*  */
    /* --------------- y2k out end ------------*/
    /*  */
    /*  */
    /* --------------- y2k in  begin ----------*/
    /*  */
    if (PK0PM012.PK0PMFYY > "60") /* From Year*/
      PK0PW01.PK0PWFCC = 19; /* From Century*/
    else
      PK0PW01.PK0PWFCC = 20; /* From Century*/
    end
    /*  */
    /* --------------- y2k in  end ------------*/
    /*  */
  end

  PK0PW01.PK0PWFMM = PK0PM012.PK0PMFMM; /* From Month*/
  PK0PW01.PK0PWFDD = PK0PM012.PK0PMFDD; /* From Day*/
  PK0PW01.PK0PWFYY = PK0PM012.PK0PMFYY; /* From Year*/

  if (PK0PM012.PK0PMTMM == "99" /* To Month*/
   && PK0PM012.PK0PMTDD == "99" /* To Day*/
   && PK0PM012.PK0PMTYY == "99") /* To Year*/
    PK0PW01.PK0PWTCC = 99; /* To Century*/
    PK0PW01.PK0PWTMM = PK0PM012.PK0PMTMM; /* To Month*/
    PK0PW01.PK0PWTDD = PK0PM012.PK0PMTDD; /* To Day*/
    PK0PW01.PK0PWTYY = PK0PM012.PK0PMTYY; /* To Year*/
  else
    if (PK0PM012.PK0PMTMM > "00" /* To Month*/
     && PK0PM012.PK0PMTDD > "00" /* To Day*/
     && PK0PM012.PK0PMTYY >= "00") /* To Year*/
      /*  */
      /* ----------- y2k out begin -------*/
      /*  */
      /* AND PK0PM012.PK0PMTYY GT '00';/* To Year*/
      /* MOVE 19 TO PK0PW01.PK0PWTCC; /* To Century*/
      /*  */
      /* ----------- y2k out end ---------*/
      /*  */
      PK0PW01.PK0PWTMM = PK0PM012.PK0PMTMM; /* To Month*/
      PK0PW01.PK0PWTDD = PK0PM012.PK0PMTDD; /* To Day*/
      PK0PW01.PK0PWTYY = PK0PM012.PK0PMTYY; /* To Year*/
      /*  */
      /* ----------- y2k in begin --------*/
      /*  */
      if (PK0PM012.PK0PMTYY > "60")
        PK0PW01.PK0PWTCC = 19; /* To Century*/
      else
        PK0PW01.PK0PWTCC = 20; /* To Century*/
      end
      /*  */
      /* ----------- y2k in end ----------*/
      /*  */
    else
      PK0PW01.PK0PWTMM = 99; /* To Month*/
      PK0PW01.PK0PWTDD = 99; /* To Day*/
      PK0PW01.PK0PWTCC = 99; /* To Century*/
      PK0PW01.PK0PWTYY = 99; /* To Year*/
    end
  end

  if (PK0PW01.PK0PWFRD > PK0PW01.PK0PWTOD)
    set PK0PM012.PK0PMFMM bold, cursor;
    set PK0PM012.PK0PMFDD bold;
    set PK0PM012.PK0PMFYY bold;
    converseLib.validationFailed(286); /* Indicate parameters needed*/
    PK0PM012.XXXPRCNM = "PK0P124"; /* Process name*/
    exit stack;
  end

  if (PK0PW01.PK0PWFRD > 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGJUL";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = PK0PW01.PK0PWFRD;
    TA1REC.TA1MAP = "PK0PM012";
    PK0PS09(); /* Validate dates*/
    if (TA2REC.TA2RTNCD > 0)
      set PK0PM012.PK0PMFMM bold, cursor;
      set PK0PM012.PK0PMFDD bold;
      set PK0PM012.PK0PMFYY bold;
      converseLib.validationFailed(158); /* Indicate parameters needed*/
      PK0PM012.XXXPRCNM = "PK0P124"; /* Process name*/
      exit stack;
    end
  end

  if (PK0PW01.PK0PWTOD > 0
   && PK0PW01.PK0PWTOD < 99999999)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGJUL";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = PK0PW01.PK0PWTOD;
    TA1REC.TA1MAP = "PK0PM012";
    PK0PS09(); /* Validate dates*/
    if (TA2REC.TA2RTNCD > 0)
      set PK0PM012.PK0PMTMM bold, cursor;
      set PK0PM012.PK0PMTDD bold;
      set PK0PM012.PK0PMTYY bold;
      converseLib.validationFailed(158); /* Indicate parameters needed*/
      PK0PM012.XXXPRCNM = "PK0P124"; /* Process name*/
      exit stack;
    end
  end
end // end PK0P124

// Process valid input request
Function PK0P125()
   /* ------------------------------------------------------------*/
   /* Format the batch program parameters.*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set PK0PW00 empty; /* Initialize variables work area*/

  PK0PW01.PK0PWQRY = "PK413D"; /* Query identification*/
  PK0PW01.PK0PWHSE = PK0PW01.XWHCD; /* Warehouse (numeric)*/

  if (PK0PM012.PK0PMFMM == "00" /* From Month*/
   && PK0PM012.PK0PMFDD == "00" /* From Day*/
   && PK0PM012.PK0PMFYY == "00") /* From Year*/

    PK0PW01.PK0PWFCC = 00; /* From Century*/

  else
    /*  */
    /* --------------- y2k out begin --------------*/
    /*  */
    /* MOVE 19 TO PK0PW01.PK0PWFCC;    /* From Century*/
    /*  */
    /* --------------- y2k out end ----------------*/
    /*  */
    /*  */
    /* --------------- y2k in begin ---------------*/
    /*  */
    if (PK0PM012.PK0PMFYY > "60") /* From Year*/
      PK0PW01.PK0PWFCC = 19; /* From Century*/
    else
      PK0PW01.PK0PWFCC = 20; /* From Century*/
    end
    /*  */
    /* --------------- y2k in end -----------------*/
    /*  */
  end

  PK0PW01.PK0PWFMM = PK0PM012.PK0PMFMM; /* From Month*/
  PK0PW01.PK0PWFDD = PK0PM012.PK0PMFDD; /* From Day*/
  PK0PW01.PK0PWFYY = PK0PM012.PK0PMFYY; /* From Year*/

  if (PK0PM012.PK0PMTMM == "99" /* To Month*/
   && PK0PM012.PK0PMTDD == "99" /* To Day*/
   && PK0PM012.PK0PMTYY == "99") /* To Year*/

    PK0PW01.PK0PWTCC = 99; /* To Century*/
    PK0PW01.PK0PWTMM = PK0PM012.PK0PMTMM; /* To Month*/
    PK0PW01.PK0PWTDD = PK0PM012.PK0PMTDD; /* To Day*/
    PK0PW01.PK0PWTYY = PK0PM012.PK0PMTYY; /* To Year*/

  else
    if (PK0PM012.PK0PMTMM > "00" /* To Month*/
     && PK0PM012.PK0PMTDD > "00" /* To Day*/
     && PK0PM012.PK0PMTYY >= "00") /* To Year*/
      /*  */
      /* --------------- y2k out begin --------------*/
      /*  */
      /* AND PK0PM012.PK0PMTYY GT '00';/* To Year*/
      /* MOVE 19 TO PK0PW01.PK0PWTCC; /* To Century*/
      /*  */
      /* --------------- y2k out end ----------------*/
      /*  */
      PK0PW01.PK0PWTMM = PK0PM012.PK0PMTMM; /* To Month*/
      PK0PW01.PK0PWTDD = PK0PM012.PK0PMTDD; /* To Day*/
      PK0PW01.PK0PWTYY = PK0PM012.PK0PMTYY; /* To Year*/
      /*  */
      /* --------------- y2k in  begin --------------*/
      /*  */
      if (PK0PM012.PK0PMTYY > "60") /* To Year*/
        PK0PW01.PK0PWTCC = 19; /* To Century*/
      else
        PK0PW01.PK0PWTCC = 20; /* To Century*/
      end
      /*  */
      /* --------------- y2k in end -----------------*/
      /*  */

    else
      PK0PW01.PK0PWTMM = 99; /* To Month*/
      PK0PW01.PK0PWTDD = 99; /* To Day*/
      PK0PW01.PK0PWTCC = 99; /* To Ccentury*/
      PK0PW01.PK0PWTYY = 99; /* To Year*/
    end
  end

   /* ------------------------------------------------------------*/
   /* select unique row from DCORP.VPARM101 and open.*/
   /* ------------------------------------------------------------*/

  PK0P116(); /* Declare cursor*/

   /* ------------------------------------------------------------*/
   /* delete row from DCORP.VPARM101 if it already exists*/
   /* ------------------------------------------------------------*/

  if (PK0PW01.PK0PWSWR == "Y") /* Row exists switch*/

    PK0P117(); /* Delete row*/

  end

   /* ------------------------------------------------------------*/
   /* add row to DCORP.VPARM101.*/
   /* ------------------------------------------------------------*/

  PK0P118(); /* Add next row*/

   /* ------------------------------------------------------------*/
   /* Indicate that the function is completed.*/
   /* ------------------------------------------------------------*/

  PK0PW01.PK0PWMNO = 385; /* Parameters loaded message*/
  PK0PW01.PK0PMSEL[11] = "*"; /* Indicate function completed*/

  set PK0PM012 initial; /* Clear map output area*/


end // end PK0P125

// Order Summary Report
Function PK0P130()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  PK0P131(); /* Format and display the map*/

  PK0P132(); /* Check attention identifier*/

  PK0P133(); /* Reset fields to normal intensity*/

  PK0P134(); /* Verify the entered data*/

  PK0P135(); /* Process valid input request*/


end // end PK0P130

// Format and display the map
Function PK0P131()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    PK0PM013.XXXRVNBR = PK0PW01.XXXRVNBR; /* Revision number*/

    PK0PM013.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    PK0PM013.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
    PK0PM013.XWHABRV = PK0PW01.XWHABRV; /* Warehouse abbreviation*/

    if (PK0PW01.PK0PWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK0PW01.PK0PWMNO);
    end /* Job submitted message number*/
    PK0PW01.PK0PWMNO = 0; /* Reset message number*/

    PK0PW01.PK0PWQRY = "PK415D"; /* Query Identification*/
    PK0PW01.PK0PWHSE = PK0PW01.XWHCD; /* Warehouse (numeric)*/

    /* --------------------------------------------------------*/
     /* Select unique row from DCORP.VPARM101*/
    /* --------------------------------------------------------*/

    PK0P116(); /* Select unique row*/

    /* --------------------------------------------------------*/
     /* Display previous FROM DATE and TO DATE*/
    /* --------------------------------------------------------*/

    XX0XW01.XX0XWDAT = XZZREC.XZZINT1;
    PK0PM013.PK0PMFMM = XX0XW01.XX0XWMM; /* From Month*/
    PK0PM013.PK0PMFDD = XX0XW01.XX0XWDD; /* From Day*/
    PK0PM013.PK0PMFYY = XX0XW01.XX0XWYY; /* From Year*/

    XX0XW01.XX0XWDAT = XZZREC.XZZINT2;
    PK0PM013.PK0PMTMM = XX0XW01.XX0XWMM; /* To Month*/
    PK0PM013.PK0PMTDD = XX0XW01.XX0XWDD; /* To Day*/
    PK0PM013.PK0PMTYY = XX0XW01.XX0XWYY; /* To Year*/

  else

    set PK0PM013 alarm; /* Indicate sound alarm*/

  end

  converse PK0PM013 ;


end // end PK0P131

// Check attention identifier
Function PK0P132()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    set PK0PM013 initial; /* Clear map output area*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PK0PW01.PK0PMSEL[11] = "C"; /* Indicate selection cancelled*/

    set PK0PM013 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0PM013.XXXPRCNM = "PK0P132"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0P132

// Reset highlighted fields
Function PK0P133()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0PM013.PK0PMFMM initialAttributes; /* From Month*/
  set PK0PM013.PK0PMFDD initialAttributes; /* From Day*/
  set PK0PM013.PK0PMFYY initialAttributes; /* From Year*/
  set PK0PM013.PK0PMTMM initialAttributes; /* To Month*/
  set PK0PM013.PK0PMTDD initialAttributes; /* To Day*/
  set PK0PM013.PK0PMTYY initialAttributes; /* To Year*/


end // end PK0P133

// Verify the entered data
Function PK0P134()
   /* ------------------------------------------------------------*/
   /* Verify the Do not Ship Before and Do not Ship After dates.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PK0PM013.PK0PMFMM cursor; /* Set cursor*/
    PK0PM013.XXXPRCNM = "PK0P134"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  PK0PW01.PK0PWSWX = "N"; /* Info entered switch*/
  PK0PW01.PK0PWSDT = PKDREC.PKDLBLDT[1]; /* Setup date*/

  if (PK0PM013.PK0PMFMM > "00"  /* From Month*/
   && PK0PM013.PK0PMFMM <= "12" 
   && PK0PM013.PK0PMFDD > "00"  /* From Day*/
   && PK0PM013.PK0PMFDD <= "31" 
   && PK0PM013.PK0PMFYY >= "00" /* From Year*/
   /**/
   /* --------------- y2k out begin*/
   /* --------------*/
   /**/
   /* AND PK0PM013.PK0PMFYY GT '00'  /**/
   /* From Year*/
   /**/
   /* --------------- y2k out end*/
   /* ----------------*/
   /**/
   && PK0PM013.PK0PMFYY <= "99")

    PK0PW01.PK0PWSWX = "Y"; /* Process name*/

  end


  if (PK0PM013.PK0PMFMM == "00" /* From Month*/
   && PK0PM013.PK0PMFDD == "00" /* From Day*/
   && PK0PM013.PK0PMFYY == "00") /* From Year*/

    PK0PW01.PK0PWSWX = "Y"; /* Process name*/

  end

  if (PK0PW01.PK0PWSWX == "N") /* Info entered*/

    set PK0PM013.PK0PMFMM cursor, bold; /* Position cursor*/
    converseLib.validationFailed(286); /* Indicate parameters needed*/
    PK0PM013.XXXPRCNM = "PK0P134"; /* Process name*/
    exit stack;
  end


  if (PK0PM013.PK0PMTMM > "00"  /* From Month*/
   && PK0PM013.PK0PMTMM <= "12" 
   && PK0PM013.PK0PMTDD > "00"  /* From Day*/
   && PK0PM013.PK0PMTDD <= "31" 
   && PK0PM013.PK0PMTYY >= "00" /* From Year*/
   /**/
   /* --------------- y2k out begin*/
   /* --------------*/
   /**/
   /* AND PK0PM013.PK0PMTYY GT '00'  /**/
   /* From Year*/
   /**/
   /* --------------- y2k out end*/
   /* ----------------*/
   /**/
   && PK0PM013.PK0PMTYY <= "99" 
  )                            
    PK0PW01.PK0PWSWX = "Y"; /* Process name*/
  end

  if (PK0PM013.PK0PMTMM == "00" /* From Month*/
   && PK0PM013.PK0PMTDD == "00" /* From Day*/
   && PK0PM013.PK0PMTYY == "00") /* From Year*/
    PK0PW01.PK0PWSWX = "Y"; /* Process name*/
  end

  if (PK0PW01.PK0PWSWX == "N") /* Info entered*/

    set PK0PM013.PK0PMTMM cursor, bold; /* Position cursor*/
    converseLib.validationFailed(286); /* Indicate parameters needed*/
    PK0PM013.XXXPRCNM = "PK0P134"; /* Process name*/
    exit stack;

  end

   /* ----------------CHECK THE DATES FOR VALIDITY----------------*/

  set PK0PW00 empty; /* Initialize variables work area*/

  PK0PW01.PK0PWQRY = "PK412D"; /* Query identification*/
  PK0PW01.PK0PWHSE = PK0PW01.XWHCD; /* Warehouse (numeric)*/

  if (PK0PM013.PK0PMFMM == "00" /* From Month*/
   && PK0PM013.PK0PMFDD == "00" /* From Day*/
   && PK0PM013.PK0PMFYY == "00") /* From Year*/
    PK0PW01.PK0PWFCC = 00; /* From Century*/
  else
    /*  */
    /* --------------- y2k out begin --------------*/
    /*  */
    /* MOVE 19 TO PK0PW01.PK0PWFCC;    /* From Century*/
    /*  */
    /* --------------- y2k out end ----------------*/
    /*  */
    /*  */
    /* --------------- y2k in begin ---------------*/
    /*  */
    if (PK0PM013.PK0PMFYY > "60") /* From Year*/
      PK0PW01.PK0PWFCC = 19; /* From Century*/
    else
      PK0PW01.PK0PWFCC = 20; /* From Century*/
    end
    /*  */
    /* --------------- y2k in end -----------------*/
    /*  */
  end

  PK0PW01.PK0PWFMM = PK0PM013.PK0PMFMM; /* From Month*/
  PK0PW01.PK0PWFDD = PK0PM013.PK0PMFDD; /* From Day*/
  PK0PW01.PK0PWFYY = PK0PM013.PK0PMFYY; /* From Year*/

  if (PK0PM013.PK0PMTMM == "99" /* To Month*/
   && PK0PM013.PK0PMTDD == "99" /* To Day*/
   && PK0PM013.PK0PMTYY == "99") /* To Year*/
    PK0PW01.PK0PWTCC = 99; /* To Century*/
    PK0PW01.PK0PWTMM = PK0PM013.PK0PMTMM; /* To Month*/
    PK0PW01.PK0PWTDD = PK0PM013.PK0PMTDD; /* To Day*/
    PK0PW01.PK0PWTYY = PK0PM013.PK0PMTYY; /* To Year*/
  else
    if (PK0PM013.PK0PMTMM > "00" /* To Month*/
     && PK0PM013.PK0PMTDD > "00" /* To Day*/
     && PK0PM013.PK0PMTYY >= "00") /* To Year*/
      /*  */
      /* --------------- y2k out begin ---------------*/
      /*  */
      /* AND PK0PM013.PK0PMTYY GT '00';/* To Year*/
      /* MOVE 19 TO PK0PW01.PK0PWTCC;  /* To Century*/
      /*  */
      /* --------------- y2k out end -----------------*/
      /*  */
      PK0PW01.PK0PWTMM = PK0PM013.PK0PMTMM; /* To Month*/
      PK0PW01.PK0PWTDD = PK0PM013.PK0PMTDD; /* To Day*/
      PK0PW01.PK0PWTYY = PK0PM013.PK0PMTYY; /* To Year*/
      /*  */
      /* --------------- y2k in begin -----------------*/
      /*  */
      if (PK0PM013.PK0PMTYY > "60")
        PK0PW01.PK0PWTCC = 19; /* To Century*/
      else
        PK0PW01.PK0PWTCC = 20; /* To Century*/
      end
      /*  */
      /* --------------- y2k in end -----------------*/
      /*  */
    else
      PK0PW01.PK0PWTMM = 99; /* To Month*/
      PK0PW01.PK0PWTDD = 99; /* To Day*/
      PK0PW01.PK0PWTCC = 99; /* To Century*/
      PK0PW01.PK0PWTYY = 99; /* To Year*/
    end
  end

  if (PK0PW01.PK0PWFRD > PK0PW01.PK0PWTOD)
    set PK0PM013.PK0PMFMM bold, cursor;
    set PK0PM013.PK0PMFDD bold;
    set PK0PM013.PK0PMFYY bold;
    converseLib.validationFailed(286); /* Indicate parameters needed*/
    PK0PM013.XXXPRCNM = "PK0P134"; /* Process name*/
    exit stack;
  end

  if (PK0PW01.PK0PWFRD > 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGJUL";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = PK0PW01.PK0PWFRD;
    TA1REC.TA1MAP = "PK0PM013";
    PK0PS09(); /* Validate dates*/
    if (TA2REC.TA2RTNCD > 0)
      set PK0PM013.PK0PMFMM bold, cursor;
      set PK0PM013.PK0PMFDD bold;
      set PK0PM013.PK0PMFYY bold;
      converseLib.validationFailed(158); /* Indicate parameters needed*/
      PK0PM013.XXXPRCNM = "PK0P134"; /* Process name*/
      exit stack;
    end
  end

  if (PK0PW01.PK0PWTOD > 0
   && PK0PW01.PK0PWTOD < 99999999)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGJUL";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = PK0PW01.PK0PWTOD;
    TA1REC.TA1MAP = "PK0PM013";
    PK0PS09(); /* Validate dates*/
    if (TA2REC.TA2RTNCD > 0)
      set PK0PM013.PK0PMTMM bold, cursor;
      set PK0PM013.PK0PMTDD bold;
      set PK0PM013.PK0PMTYY bold;
      converseLib.validationFailed(158); /* Indicate parameters needed*/
      PK0PM013.XXXPRCNM = "PK0P134"; /* Process name*/
      exit stack;
    end
  end
end // end PK0P134

// Process valid input request
Function PK0P135()
   /* ------------------------------------------------------------*/
   /* Format the batch program parameters.*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set PK0PW00 empty; /* Initialize variables work area*/

  PK0PW01.PK0PWQRY = "PK415D"; /* Query identification*/
  PK0PW01.PK0PWHSE = PK0PW01.XWHCD; /* Warehouse (numeric)*/

  if (PK0PM013.PK0PMFMM == "00" /* From Month*/
   && PK0PM013.PK0PMFDD == "00" /* From Day*/
   && PK0PM013.PK0PMFYY == "00") /* From Year*/

    PK0PW01.PK0PWFCC = 00; /* From Century*/

  else
    /*  */
    /* ----------- y2k out begin -------------*/
    /*  */
    /* MOVE 19 TO PK0PW01.PK0PWFCC;    /* From Century*/
    /*  */
    /* ----------- y2k out end ---------------*/
    /*  */
    /*  */
    /* ----------- y2k in begin -------------*/
    /*  */
    if (PK0PM013.PK0PMFYY > "60") /* From Year*/
      PK0PW01.PK0PWFCC = 19; /* From Century*/
    else
      PK0PW01.PK0PWFCC = 20; /* From Century*/
    end
    /*  */
    /* ----------- y2k in end  -------------*/
    /*  */
  end

  PK0PW01.PK0PWFMM = PK0PM013.PK0PMFMM; /* From Month*/
  PK0PW01.PK0PWFDD = PK0PM013.PK0PMFDD; /* From Day*/
  PK0PW01.PK0PWFYY = PK0PM013.PK0PMFYY; /* From Year*/

  if (PK0PM013.PK0PMTMM == "99" /* To Month*/
   && PK0PM013.PK0PMTDD == "99" /* To Day*/
   && PK0PM013.PK0PMTYY == "99") /* To Year*/

    PK0PW01.PK0PWTCC = 99; /* To Century*/
    PK0PW01.PK0PWTMM = PK0PM013.PK0PMTMM; /* To Month*/
    PK0PW01.PK0PWTDD = PK0PM013.PK0PMTDD; /* To Day*/
    PK0PW01.PK0PWTYY = PK0PM013.PK0PMTYY; /* To Year*/

  else
    if (PK0PM013.PK0PMTMM > "00" /* To Month*/
     && PK0PM013.PK0PMTDD > "00" /* To Day*/
     && PK0PM013.PK0PMTYY >= "00") /* To Year*/

      /*  */
      /* ----------- y2k out begin -----------*/
      /*  */
      /* AND PK0PM013.PK0PMTYY GT '00';   /* To Year*/
      /* MOVE 19 TO PK0PW01.PK0PWTCC;  /* To Century*/
      /*  */
      /* ----------- y2k out end -------------*/
      /*  */
      PK0PW01.PK0PWTMM = PK0PM013.PK0PMTMM; /* To Month*/
      PK0PW01.PK0PWTDD = PK0PM013.PK0PMTDD; /* To Day*/
      PK0PW01.PK0PWTYY = PK0PM013.PK0PMTYY; /* To Year*/
      /*  */
      /* ----------- y2k in begin ------------*/
      /*  */
      if (PK0PM013.PK0PMTYY > "60")
        PK0PW01.PK0PWTCC = 19; /* To Century*/
      else
        PK0PW01.PK0PWTCC = 20; /* To Century*/
      end
      /*  */
      /* ----------- y2k in end  -------------*/
      /*  */

    else
      PK0PW01.PK0PWTMM = 99; /* To Month*/
      PK0PW01.PK0PWTDD = 99; /* To Day*/
      PK0PW01.PK0PWTCC = 99; /* To Ccentury*/
      PK0PW01.PK0PWTYY = 99; /* To Year*/
    end
  end

   /* ------------------------------------------------------------*/
   /* select unique row from DCORP.VPARM101 and open.*/
   /* ------------------------------------------------------------*/

  PK0P116(); /* Declare cursor*/

   /* ------------------------------------------------------------*/
   /* delete row from DCORP.VPARM101 if it already exists*/
   /* ------------------------------------------------------------*/

  if (PK0PW01.PK0PWSWR == "Y") /* Row exists switch*/

    PK0P117(); /* Delete row*/

  end

   /* ------------------------------------------------------------*/
   /* add row to DCORP.VPARM101.*/
   /* ------------------------------------------------------------*/

  PK0P118(); /* Add next row*/

   /* ------------------------------------------------------------*/
   /* Indicate that the function is completed.*/
   /* ------------------------------------------------------------*/

  PK0PW01.PK0PWMNO = 386; /* Parameters loaded message*/
  PK0PW01.PK0PMSEL[12] = "*"; /* Indicate function completed*/

  set PK0PM013 initial; /* Clear map output area*/


end // end PK0P135

// UNSCEDULED PACK & HOLD REPORT
Function PK0P140()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  PK0P141(); /* Format and display the map*/

  PK0P142(); /* Check attention identifier*/

  PK0P143(); /* Reset fields to normal intensity*/

  PK0P144(); /* Verify the entered data*/

  PK0P145(); /* Process valid input request*/


end // end PK0P140

// Format and display the map
Function PK0P141()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    PK0PM014.XXXRVNBR = PK0PW01.XXXRVNBR; /* Revision number*/

    PK0PM014.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    PK0PM014.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
    PK0PM014.XWHABRV = PK0PW01.XWHABRV; /* Warehouse abbreviation*/

    if (PK0PW01.PK0PWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK0PW01.PK0PWMNO);
    end /* Job submitted message number*/
    PK0PW01.PK0PWMNO = 0; /* Reset message number*/

    PK0PW01.PK0PWQRY = "PK7040"; /* Query Identification*/
    PK0PW01.PK0PWHSE = PK0PW01.XWHCD; /* Warehouse (numeric)*/

    /* --------------------------------------------------------*/
     /* Select unique row from DCORP.VPARM101*/
    /* --------------------------------------------------------*/

    PK0P116(); /* Select unique row*/

    /* --------------------------------------------------------*/
     /* Display previous FROM DATE and TO DATE*/
    /* --------------------------------------------------------*/

    XX0XW01.XX0XWDAT = XZZREC.XZZINT1;
    PK0PM014.PK0PMFMM = XX0XW01.XX0XWMM; /* From Month*/
    PK0PM014.PK0PMFDD = XX0XW01.XX0XWDD; /* From Day*/
    PK0PM014.PK0PMFYY = XX0XW01.XX0XWYY; /* From Year*/

    XX0XW01.XX0XWDAT = XZZREC.XZZINT2;
    PK0PM014.PK0PMTMM = XX0XW01.XX0XWMM; /* To Month*/
    PK0PM014.PK0PMTDD = XX0XW01.XX0XWDD; /* To Day*/
    PK0PM014.PK0PMTYY = XX0XW01.XX0XWYY; /* To Year*/

  else

    set PK0PM014 alarm; /* Indicate sound alarm*/

  end

  converse PK0PM014 ;


end // end PK0P141

// Check attention identifier
Function PK0P142()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    set PK0PM014 initial; /* Clear map output area*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PK0PW01.PK0PMSEL[21] = "C"; /* Indicate selection cancelled*/

    set PK0PM014 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0PM014.XXXPRCNM = "PK0P142"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0P142

// Reset highlighted fields
Function PK0P143()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0PM014.PK0PMFMM initialAttributes; /* From Month*/
  set PK0PM014.PK0PMFDD initialAttributes; /* From Day*/
  set PK0PM014.PK0PMFYY initialAttributes; /* From Year*/
  set PK0PM014.PK0PMTMM initialAttributes; /* To Month*/
  set PK0PM014.PK0PMTDD initialAttributes; /* To Day*/
  set PK0PM014.PK0PMTYY initialAttributes; /* To Year*/


end // end PK0P143

// Verify the entered data
Function PK0P144()
   /* ------------------------------------------------------------*/
   /* Verify the Do not Ship Before and Do not Ship After dates.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PK0PM014.PK0PMFMM cursor; /* Set cursor*/
    PK0PM014.XXXPRCNM = "PK0P144"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  PK0PW01.PK0PWSWX = "N"; /* Info entered switch*/
  PK0PW01.PK0PWSDT = PKDREC.PKDLBLDT[1]; /* Setup date*/

  if (PK0PM014.PK0PMFMM > "00"  /* From Month*/
   && PK0PM014.PK0PMFMM <= "12" 
   && PK0PM014.PK0PMFDD > "00"  /* From Day*/
   && PK0PM014.PK0PMFDD <= "31" 
   && PK0PM014.PK0PMFYY >= "00" /* From Year*/
   /**/
   /* -------------- y2k out begin*/
   /* --------------*/
   /**/
   /* AND PK0PM014.PK0PMFYY GT '00'  /**/
   /* From Year*/
   /**/
   /* -------------- y2k out end*/
   /* --------------*/
   /**/
   && PK0PM014.PK0PMFYY <= "99")

    PK0PW01.PK0PWSWX = "Y"; /* Process name*/

  end


  if (PK0PM014.PK0PMFMM == "00" /* From Month*/
   && PK0PM014.PK0PMFDD == "00" /* From Day*/
   && PK0PM014.PK0PMFYY == "00") /* From Year*/

    PK0PW01.PK0PWSWX = "Y"; /* Process name*/

  end

  if (PK0PW01.PK0PWSWX == "N") /* Info entered*/

    set PK0PM014.PK0PMFMM cursor, bold; /* Position cursor*/
    set PK0PM014.PK0PMFDD bold; /* Position cursor*/
    set PK0PM014.PK0PMFYY bold; /* Position cursor*/
    converseLib.validationFailed(286); /* Indicate parameters needed*/
    PK0PM014.XXXPRCNM = "PK0P144"; /* Process name*/
    exit stack;
  end

  if (PK0PM014.PK0PMTMM > "00"  /* From Month*/
   && PK0PM014.PK0PMTMM <= "12" 
   && PK0PM014.PK0PMTDD > "00"  /* From Day*/
   && PK0PM014.PK0PMTDD <= "31" 
   && PK0PM014.PK0PMTYY >= "00" /* From Year*/
   /**/
   /* -------------- y2k out begin*/
   /* --------------*/
   /**/
   /* AND PK0PM014.PK0PMTYY GT '00'  /**/
   /* From Year*/
   /**/
   /* -------------- y2k out end*/
   /* --------------*/
   /**/
   && PK0PM014.PK0PMTYY <= "99" 
  )                            
    PK0PW01.PK0PWSWX = "Y"; /* Process name*/
  end

  if (PK0PM014.PK0PMTMM == "00" /* From Month*/
   && PK0PM014.PK0PMTDD == "00" /* From Day*/
   && PK0PM014.PK0PMTYY == "00") /* From Year*/
    PK0PW01.PK0PWSWX = "Y"; /* Process name*/
  end

  if (PK0PW01.PK0PWSWX == "N") /* Info entered*/

    set PK0PM014.PK0PMTMM cursor, bold; /* Position cursor*/
    set PK0PM014.PK0PMTDD bold;
    set PK0PM014.PK0PMTYY bold;
    converseLib.validationFailed(286); /* Indicate parameters needed*/
    PK0PM014.XXXPRCNM = "PK0P144"; /* Process name*/
    exit stack;

  end

   /* ----------------CHECK THE DATES FOR VALIDITY----------------*/

  set PK0PW00 empty; /* Initialize variables work area*/

  PK0PW01.PK0PWQRY = "PK412D"; /* Query identification*/
  PK0PW01.PK0PWHSE = PK0PW01.XWHCD; /* Warehouse (numeric)*/

  if (PK0PM014.PK0PMFMM == "00" /* From Month*/
   && PK0PM014.PK0PMFDD == "00" /* From Day*/
   && PK0PM014.PK0PMFYY == "00") /* From Year*/
    PK0PW01.PK0PWFCC = 00; /* From Century*/
  else
    /*  */
    /* -------------- y2k out begin --------------*/
    /*  */
    /* MOVE 19 TO PK0PW01.PK0PWFCC;    /* From Century*/
    /*  */
    /* -------------- y2k out end --------------*/
    /*  */
    /*  */
    /* -------------- y2k in begin -------------*/
    /*  */
    if (PK0PM014.PK0PMFYY > "60") /* From Year*/
      PK0PW01.PK0PWFCC = 19; /* From Century*/
    else
      PK0PW01.PK0PWFCC = 20; /* From Century*/
    end
    /*  */
    /* -------------- y2k in  end --------------*/
    /*  */
  end

  PK0PW01.PK0PWFMM = PK0PM014.PK0PMFMM; /* From Month*/
  PK0PW01.PK0PWFDD = PK0PM014.PK0PMFDD; /* From Day*/
  PK0PW01.PK0PWFYY = PK0PM014.PK0PMFYY; /* From Year*/

  if (PK0PM014.PK0PMTMM == "99" /* To Month*/
   && PK0PM014.PK0PMTDD == "99" /* To Day*/
   && PK0PM014.PK0PMTYY == "99") /* To Year*/
    PK0PW01.PK0PWTCC = 99; /* To Century*/
    PK0PW01.PK0PWTMM = PK0PM014.PK0PMTMM; /* To Month*/
    PK0PW01.PK0PWTDD = PK0PM014.PK0PMTDD; /* To Day*/
    PK0PW01.PK0PWTYY = PK0PM014.PK0PMTYY; /* To Year*/
  else
    if (PK0PM014.PK0PMTMM > "00" /* To Month*/
     && PK0PM014.PK0PMTDD > "00" /* To Day*/
     && PK0PM014.PK0PMTYY >= "00") /* To Year*/
      /*  */
      /* -------------- y2k out begin ------------*/
      /*  */
      /* AND PK0PM014.PK0PMTYY GT '00';/* To Year*/
      /* MOVE 19 TO PK0PW01.PK0PWTCC; /* To Century*/
      /*  */
      /* -------------- y2k out end --------------*/
      /*  */
      PK0PW01.PK0PWTMM = PK0PM014.PK0PMTMM; /* To Month*/
      PK0PW01.PK0PWTDD = PK0PM014.PK0PMTDD; /* To Day*/
      PK0PW01.PK0PWTYY = PK0PM014.PK0PMTYY; /* To Year*/
      /*  */
      /* -------------- y2k in begin -------------*/
      /*  */
      if (PK0PM014.PK0PMTYY > "60")
        PK0PW01.PK0PWTCC = 19; /* To Century*/
      else
        PK0PW01.PK0PWTCC = 20; /* To Century*/
      end
      /*  */
      /* -------------- y2k in  end --------------*/
      /*  */
    else
      PK0PW01.PK0PWTMM = 99; /* To Month*/
      PK0PW01.PK0PWTDD = 99; /* To Day*/
      PK0PW01.PK0PWTCC = 99; /* To Century*/
      PK0PW01.PK0PWTYY = 99; /* To Year*/
    end
  end

  if (PK0PW01.PK0PWFRD > PK0PW01.PK0PWTOD)
    set PK0PM014.PK0PMFMM bold, cursor;
    set PK0PM014.PK0PMFDD bold;
    set PK0PM014.PK0PMFYY bold;
    converseLib.validationFailed(286); /* Indicate parameters needed*/
    PK0PM014.XXXPRCNM = "PK0P144"; /* Process name*/
    exit stack;
  end

  if (PK0PW01.PK0PWFRD > 0)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGJUL";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = PK0PW01.PK0PWFRD;
    TA1REC.TA1MAP = "PK0PM014";
    PK0PS09(); /* Validate dates*/
    if (TA2REC.TA2RTNCD > 0)
      set PK0PM014.PK0PMFMM bold, cursor;
      set PK0PM014.PK0PMFDD bold;
      set PK0PM014.PK0PMFYY bold;
      converseLib.validationFailed(158); /* Indicate parameters needed*/
      PK0PM014.XXXPRCNM = "PK0P144"; /* Process name*/
      exit stack;
    end
  end

  if (PK0PW01.PK0PWTOD > 0
   && PK0PW01.PK0PWTOD < 99999999)
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGJUL";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = PK0PW01.PK0PWTOD;
    TA1REC.TA1MAP = "PK0PM014";
    PK0PS09(); /* Validate dates*/
    if (TA2REC.TA2RTNCD > 0)
      set PK0PM014.PK0PMTMM bold, cursor;
      set PK0PM014.PK0PMTDD bold;
      set PK0PM014.PK0PMTYY bold;
      converseLib.validationFailed(158); /* Indicate parameters needed*/
      PK0PM014.XXXPRCNM = "PK0P144"; /* Process name*/
      exit stack;
    end
  end
end // end PK0P144

// Process valid input request
Function PK0P145()
   /* ------------------------------------------------------------*/
   /* Format the batch program parameters.*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set PK0PW00 empty; /* Initialize variables work area*/

  PK0PW01.PK0PWQRY = "PK7040"; /* Query identification*/
  PK0PW01.PK0PWHSE = PK0PW01.XWHCD; /* Warehouse (numeric)*/

  if (PK0PM014.PK0PMFMM == "00" /* From Month*/
   && PK0PM014.PK0PMFDD == "00" /* From Day*/
   && PK0PM014.PK0PMFYY == "00") /* From Year*/

    PK0PW01.PK0PWFCC = 00; /* From Century*/

  else
    /*  */
    /* ---------------- y2k out begin ---------------*/
    /*  */
    /* MOVE 19 TO PK0PW01.PK0PWFCC;    /* From Century*/
    /*  */
    /* ---------------- y2k out end -----------------*/
    /*  */
    /*  */
    /* ---------------- y2k in  begin ---------------*/
    /*  */
    if (PK0PM014.PK0PMFYY > "60") /* From Year*/
      PK0PW01.PK0PWFCC = 19; /* From Century*/
    else
      PK0PW01.PK0PWFCC = 20; /* From Century*/
    end
    /*  */
    /* ---------------- y2k in  end -----------------*/
    /*  */
  end

  PK0PW01.PK0PWFMM = PK0PM014.PK0PMFMM; /* From Month*/
  PK0PW01.PK0PWFDD = PK0PM014.PK0PMFDD; /* From Day*/
  PK0PW01.PK0PWFYY = PK0PM014.PK0PMFYY; /* From Year*/

  if (PK0PM014.PK0PMTMM == "99" /* To Month*/
   && PK0PM014.PK0PMTDD == "99" /* To Day*/
   && PK0PM014.PK0PMTYY == "99") /* To Year*/

    PK0PW01.PK0PWTCC = 99; /* To Century*/
    PK0PW01.PK0PWTMM = PK0PM014.PK0PMTMM; /* To Month*/
    PK0PW01.PK0PWTDD = PK0PM014.PK0PMTDD; /* To Day*/
    PK0PW01.PK0PWTYY = PK0PM014.PK0PMTYY; /* To Year*/

  else
    if (PK0PM014.PK0PMTMM > "00" /* To Month*/
     && PK0PM014.PK0PMTDD > "00" /* To Day*/
     && PK0PM014.PK0PMTYY >= "00") /* To Year*/

      /*  */
      /* ---------------- y2k out begin ---------------*/
      /*  */
      /* AND PK0PM014.PK0PMTYY GT '00';/* To Year*/
      /* MOVE 19 TO PK0PW01.PK0PWTCC; /* To Century*/
      /*  */
      /* ---------------- y2k out end -----------------*/
      /*  */
      PK0PW01.PK0PWTMM = PK0PM014.PK0PMTMM; /* To Month*/
      PK0PW01.PK0PWTDD = PK0PM014.PK0PMTDD; /* To Day*/
      PK0PW01.PK0PWTYY = PK0PM014.PK0PMTYY; /* To Year*/
      /*  */
      /* ---------------- y2k in  begin ---------------*/
      /*  */
      if (PK0PM014.PK0PMTYY > "60")
        PK0PW01.PK0PWTCC = 19; /* To Century*/
      else
        PK0PW01.PK0PWTCC = 20; /* To Century*/
      end
      /*  */
      /* ---------------- y2k in  end -----------------*/
      /*  */

    else
      PK0PW01.PK0PWTMM = 99; /* To Month*/
      PK0PW01.PK0PWTDD = 99; /* To Day*/
      PK0PW01.PK0PWTCC = 99; /* To Ccentury*/
      PK0PW01.PK0PWTYY = 99; /* To Year*/
    end
  end

   /* ------------------------------------------------------------*/
   /* select unique row from DCORP.VPARM101 and open.*/
   /* ------------------------------------------------------------*/

  PK0P116(); /* Declare cursor*/

   /* ------------------------------------------------------------*/
   /* delete row from DCORP.VPARM101 if it already exists*/
   /* ------------------------------------------------------------*/

  if (PK0PW01.PK0PWSWR == "Y") /* Row exists switch*/

    PK0P117(); /* Delete row*/

  end

   /* ------------------------------------------------------------*/
   /* add row to DCORP.VPARM101.*/
   /* ------------------------------------------------------------*/

  PK0P118(); /* Add next row*/

   /* ------------------------------------------------------------*/
   /* Indicate that the function is completed.*/
   /* ------------------------------------------------------------*/

  PK0PW01.PK0PWMNO = 415; /* Parameters loaded message*/
  PK0PW01.PK0PMSEL[21] = "*"; /* Indicate function completed*/

  set PK0PM014 initial; /* Clear map output area*/


end // end PK0P145

// Print Daily Pick Tickets
Function PK0P210()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  PK0P211(); /* Format and display the map*/

  PK0P212(); /* Check attention identifier*/

  PK0P213(); /* Reset fields to normal intensity*/

  PK0P214(); /* Verify the entered data*/

  PK0P215(); /* Process valid input request*/


end // end PK0P210

// Format and display the map
Function PK0P211()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (PK0PW01.XWHCD != "51") /* Not apparel warehouse*/
    set PK0PM021.PK0PM-VM-SEL-FLAG initialAttributes; /* Hide VM flag*/
    set PK0PM021.PK0PM-VM-SEL-FLAG-LIT1 initialAttributes;
    PK0PM021.PK0PM-VM-SEL-FLAG = "A"; /* Initialize VM flag*/
  end

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    PK0PM021.XXXRVNBR = PK0PW01.XXXRVNBR; /* Revision number*/

    PK0PM021.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    PK0PM021.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
    PK0PM021.XWHABRV = PK0PW01.XWHABRV; /* Warehouse abbreviation*/

    PK0PM021.PK0PMRMT = PK0PW01.PK0PMRMT; /* Printer*/
    PK0PM021.PK0PMDES = PK0PW01.PK0PMDES; /* Description*/
    if (PKDREC.PKDWHTCD == "40" /* Special handling warehouse*/
     && PK0PM021.PKQTKTYP <= " ") /* and type not indicated*/
      PK0PM021.PKQTKTYP = "P"; /* Initial to Promotions Orders*/
    end

    if (PK0PM021.PK0PM-VM-SEL-FLAG <= " ") /* VM sel flag not indicated*/
      PK0PM021.PK0PM-VM-SEL-FLAG = "A"; /* Initialize VM flag*/
    end

    if (PK0PW01.XWHCD == "51") /* Apparel warehouse*/
      set PK0PM021.PK0PM-VM-SEL-FLAG normal; /* Display VM flag*/
      set PK0PM021.PK0PM-VM-SEL-FLAG-LIT1 normal;
      set PK0PM021.PK0PM-VM-SEL-FLAG-LIT1 protect;
    end

    if (PK0PW01.PK0PWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK0PW01.PK0PWMNO);
    end /* Job submitted message number*/
    PK0PW01.PK0PWMNO = 0; /* Reset message number*/

  else

    set PK0PM021 alarm; /* Indicate sound alarm*/

  end

  converse PK0PM021 ;


end // end PK0P211

// Check attention identifier
Function PK0P212()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PK0PW01.PK0PMSEL[13] = "C"; /* Indicate selection cancelled*/

    set PK0PM021 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0PM021.XXXPRCNM = "PK0P212"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0P212

// Reset highlighted fields
Function PK0P213()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0PM021.PK0PMCPY initialAttributes; /* Number of copies*/
  set PK0PM021.PK0PMGEN initialAttributes; /* Generation number*/
  set PK0PM021.PKQTKTYP initialAttributes; /* Full case/repack flag*/
  set PK0PM021.PKQTYPCD initialAttributes; /* Run type code*/
  set PK0PM021.PKQPRTFL initialAttributes; /* Label printed flag*/
  if (PK0PW01.XWHCD == "51")
    set PK0PM021.PK0PM-VM-SEL-FLAG normal; /* VM flag*/
    set PK0PM021.PK0PM-VM-SEL-FLAG-LIT1 normal;
    set PK0PM021.PK0PM-VM-SEL-FLAG-LIT1 protect;
  else
    set PK0PM021.PK0PM-VM-SEL-FLAG initialAttributes; /* VM flag*/
    set PK0PM021.PK0PM-VM-SEL-FLAG-LIT1 initialAttributes;
  end


end // end PK0P213

// Verify the entered data
Function PK0P214()
   /* ------------------------------------------------------------*/
   /* Obtain the warehouse control table row.*/
   /* Obtain the generation setup date.*/
   /* Verify the ticket reprint flag.*/
   /* Verify the run type code.*/
   /* Verify the inline/VM select flag.*/
   /* Determine whether there are any tickets to print.*/
   /* Verify the full case/repack flag.*/
   /* Verify the generation of labels to be printed.*/
   /* Verify the number of copies to be printed.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  PK0PS07(); /* Obtain warhouse control table row*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PK0PM021.PK0PMGEN cursor; /* set cursor*/
    PK0PM011.XXXPRCNM = "PK0P214"; /* process name*/
    exit stack; /* Exit to redisplay map*/
  end


  PK0PW01.PK0PWSWG = "N"; /* Initial generation error switch*/
  PK0PW01.PK0PWSWI = "N"; /* Initial ticket type error switch*/
  PK0PW01.PK0PWSWL = "N"; /* Initial line error switch*/
   /* Initial VM error switch*/
  PK0PW01.PK0PW-VM-SEL-SW = "N";
  if (PK0PM021.PK0PMGEN == "00") /* Generation number 0*/
    PK0PW01.PK0PWSDT = PKDREC.PKDLBLDT[1]; /* Setup date*/
  else

    if (PK0PM021.PK0PMGEN == "-1") /* Generation number -1*/
      PK0PW01.PK0PWSDT = PKDREC.PKDLBLDT[2]; /* Setup date*/
    else

      if (PK0PM021.PK0PMGEN == "-2") /* Generation number -2*/
        PK0PW01.PK0PWSDT = PKDREC.PKDLBLDT[3]; /* Setup date*/
      else

        PK0PW01.PK0PWSWG = "Y"; /* Indicate generation error*/

      end
    end
  end

  if (PK0PM021.PKQTKTYP != "F" /* Not full case*/
   && PK0PM021.PKQTKTYP != "R" /* and not repack*/
   && PK0PM021.PKQTKTYP != "P" /* and not orders*/
   && PK0PM021.PKQTKTYP != "L") /* and not labels*/

    PK0PW01.PK0PWSWI = "Y"; /* Indicate ticket type error*/

  end

  if (PK0PM021.PKQPRTFL != "Y" /* Print flag not yes*/
   && PK0PM021.PKQPRTFL != "N") /* and flag not no*/

    PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

    set PK0PM021.PKQPRTFL cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(116); /* Indicate print flag invalid*/
    PK0PM021.XXXPRCNM = "PK0P214"; /* Process name*/

  end

  if (PK0PM021.PKQTYPCD != "N" /* Not normal run type*/
   && PK0PM021.PKQTYPCD != "Q" /* and not nightly rush run type*/
   && PK0PM021.PKQTYPCD != "R" /* and not daily rush run type*/
   && PK0PM021.PKQTYPCD != "S" /* and not same day run type*/
   && PK0PM021.PKQTYPCD != "*") /* and not all run types*/

    PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

    set PK0PM021.PKQTYPCD cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(155); /* Indicate type code invalid*/
    PK0PM021.XXXPRCNM = "PK0P214"; /* Process name*/

  end

  if (PK0PM021.PK0PM-VM-SEL-FLAG == "A"  /* Apparel*/
   || PK0PM021.PK0PM-VM-SEL-FLAG == "V"  /* or VM*/
   || (PK0PM021.PK0PM-VM-SEL-FLAG == "S" /* or Single Carton*/
   && PK0PM021.PKQTKTYP == "F"))         /* and Full case*/
                                           /* OK*/
  else
    PK0PW01.PK0PW-VM-SEL-SW = "Y"; /* Indicate VM error*/

    set PK0PM021.PK0PM-VM-SEL-FLAG cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(342); /* Indicate type code invalid*/
    PK0PM021.XXXPRCNM = "PK0P214"; /* Process name*/

  end

  if (PK0PW01.PK0PWSWG == "N" /* No generation error*/
   && PK0PW01.PK0PWSWL == "N" /* and no line error*/
   && PK0PW01.PK0PW-VM-SEL-SW == "N") /* and no VM error*/

    PK0PS01(); /* Verify tickets by warehouse*/

  end

  if (PK0PW01.PK0PWSWI == "Y") /* Ticket type error*/

    set PK0PM021.PKQTKTYP cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(156); /* Indicate flag invalid*/
    PK0PM021.XXXPRCNM = "PK0P214"; /* Process name*/

  end

  if (PK0PW01.PK0PWSWG == "Y") /* Generation error*/

    set PK0PM021.PK0PMGEN cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(117); /* Indicate invalid generation*/
    PK0PM021.XXXPRCNM = "PK0P214"; /* Process name*/

  end

  if (PK0PM021.PK0PMCPY == 0) /* Number of copies invalid*/

    set PK0PM021.PK0PMCPY cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(126); /* Indicate invalid number*/
    PK0PM021.XXXPRCNM = "PK0P214"; /* Process name*/

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end PK0P214

// Process valid input request
Function PK0P215()
   /* ------------------------------------------------------------*/
   /* Format the batch program parameters.*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set PK0PW00 empty; /* Initialize variables work area*/
  set PK0PW21 empty; /* Initialize parameters work area*/

  PK0PW21.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
  PK0PW21.PK0PWSDT = PK0PW01.PK0PWSDT; /* Generation setup date*/
  PK0PW21.PKQTYPCD = PK0PM021.PKQTYPCD; /* Run type code*/
  PK0PW21.PKQPRTFL = PK0PM021.PKQPRTFL; /* Print status flag*/
  PK0PW21.PKQTKTYP = PK0PM021.PKQTKTYP; /* Ticket type indicator*/
  if (PK0PW21.XWHCD == "51") /* Warehouse 51 only*/
    if (PK0PM021.PK0PM-VM-SEL-FLAG == "V") /* VM only selected*/
      if (PK0PW21.PKQTKTYP == "F") /* Full case indicated*/
        PK0PW21.PKQTKTYP = "G"; /* Reset for VM full case*/
      else
        if (PK0PW21.PKQTKTYP == "R") /* Repack indicated*/
          PK0PW21.PKQTKTYP = "S"; /* Reset for VM repack*/
        end
      end
    else
      if (PK0PM021.PK0PM-VM-SEL-FLAG == "S") /* Single Carton only*/
        PK0PW21.PKQTKTYP = "H"; /* Single carton full case*/
      end
    end
  end

  PK0PW21.PK0PMGRP = "1"; /* Output print group*/
  PK0PW21.PK0PWSCD = "W"; /* Indicate select by warehouse*/

  PK0PW00.PK0PWJCL = PK0PW21.PK0PWJCL; /* Report parameters*/

  PK0PW00.PK0PMCPY = PK0PM021.PK0PMCPY; /* Number of copies*/
  PK0PW00.PK0PMGEN = PK0PM021.PK0PMGEN; /* Generation number*/

  if (PK0PM021.PKQTKTYP == "F") /* Full case indicated*/
    if (PK0PW21.XWHCD == "51" /* Warehouse 51*/
     || PK0PW21.XWHCD == "42") /* or Canada*/
      PK0PW00.PK0PWEXE = "PK5863"; /* Execute JCL procedure*/
    else
      PK0PW00.PK0PWEXE = "PK5881"; /* Execute JCL procedure*/
    end
  else

    if (PK0PM021.PKQTKTYP == "L") /* Labels indicated*/
      PK0PW00.PK0PWEXE = "PK5872"; /* Execute JCL procedure*/
    else

      if (PKDREC.PKDWHTCD == "40") /* Special handling warehouse*/

        if (PK0PW21.XWHCD == "09" /* promo warehouse*/
         || PK0PW21.XWHCD == "25") /* or NSG*/
          PK0PW00.PK0PWEXE = "PK5873"; /* Execute JCL procedure*/
        else
          PK0PW00.PK0PWEXE = "PK5871"; /* Execute JCL procedure*/

        end
      else
        if (PK0PW21.XWHCD == "51" /* Warehouse 51*/
         || PK0PW21.XWHCD == "42") /* or Canada*/
          PK0PW00.PK0PWEXE = "PK5862"; /* Execute JCL procedure*/
        else
          PK0PW00.PK0PWEXE = "PK5861"; /* Execute JCL procedure*/
        end

      end

    end

  end

  PK0P026(); /* Enque the internal reader*/

  while (PK0PW01.PK0PWSWS == "N") /* Until job is submitted*/

    PK0PW99.PK0PWJCL = PK0PT21.PK0PWJCL[PK0PWIXT]; /* JCL statement*/
    PK0PW01.PK0PTTYP = PK0PT21.PK0PTTYP[PK0PWIXT]; /* Statement type*/

    PK0P027(); /* Write to the internal reader*/

  end

  PK0P028(); /* Deque the internal reader*/

  PK0PW01.PK0PWMNO = 118; /* Job was submitted*/
  PK0PW01.PK0PMSEL[13] = "*"; /* Indicate function completed*/

  set PK0PM021 initial; /* Clear map output area*/


end // end PK0P215

// Pick Tickets by Schedule
Function PK0P220()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  PK0P221(); /* Format and display the map*/

  PK0P222(); /* Check attention identifier*/

  PK0P223(); /* Reset fields to normal intensity*/

  PK0P224(); /* Verify the entered data*/

  PK0P225(); /* Process valid input request*/


end // end PK0P220

// Format and display the map
Function PK0P221()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (PK0PW01.XWHCD != "51") /* Not apparel warehouse*/
    set PK0PM022.PK0PM-VM-SEL-FLAG initialAttributes; /* Hide VM flag*/
    set PK0PM022.PK0PM-VM-SEL-FLAG-LIT1 initialAttributes;
    PK0PM022.PK0PM-VM-SEL-FLAG = "A"; /* Initialize VM flag*/
  end

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    PK0PM022.XXXRVNBR = PK0PW01.XXXRVNBR; /* Revision number*/

    PK0PM022.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    PK0PM022.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
    PK0PM022.XWHABRV = PK0PW01.XWHABRV; /* Warehouse abbreviation*/

    PK0PM022.PK0PMRMT = PK0PW01.PK0PMRMT; /* Printer*/
    PK0PM022.PK0PMDES = PK0PW01.PK0PMDES; /* Description*/

    if (PKDREC.PKDWHTCD == "40" /* Special handling warehouse*/
     && PK0PM022.PKQTKTYP <= " ") /* and type not indicated*/
      PK0PM022.PKQTKTYP = "P"; /* Initial to Promotions Orders*/
    end

    if (PK0PM022.PK0PM-VM-SEL-FLAG <= " ") /* VM flag not indicated*/
      PK0PM022.PK0PM-VM-SEL-FLAG = "A"; /* Initialize VM flag*/
    end

    if (PK0PW01.XWHCD == "51") /* Apparel warehouse*/
      set PK0PM022.PK0PM-VM-SEL-FLAG normal; /* Display VM flag*/
      set PK0PM022.PK0PM-VM-SEL-FLAG-LIT1 normal;
      set PK0PM022.PK0PM-VM-SEL-FLAG-LIT1 protect;
    end

    if (PK0PW01.PK0PWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK0PW01.PK0PWMNO);
    end /* Job submitted message number*/
    PK0PW01.PK0PWMNO = 0; /* Reset message number*/

  else

    set PK0PM022 alarm; /* Indicate sound alarm*/

  end

  converse PK0PM022 ;


end // end PK0P221

// Check attention identifier
Function PK0P222()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PK0PW01.PK0PMSEL[14] = "C"; /* Indicate selection cancelled*/

    set PK0PM022 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0PM022.XXXPRCNM = "PK0P222"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0P222

// Reset highlighted fields
Function PK0P223()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0PM022.PK0PMCPY initialAttributes; /* Number of copies*/
  set PK0PM022.PK0PMGEN initialAttributes; /* Generation number*/
  set PK0PM022.PKQTKTYP initialAttributes; /* Full case/repack flag*/
  if (PK0PW01.XWHCD == "51")
    set PK0PM022.PK0PM-VM-SEL-FLAG normal; /* VM flag*/
    set PK0PM022.PK0PM-VM-SEL-FLAG-LIT1 normal;
    set PK0PM022.PK0PM-VM-SEL-FLAG-LIT1 protect;
  else
    set PK0PM022.PK0PM-VM-SEL-FLAG initialAttributes; /* VM flag*/
    set PK0PM022.PK0PM-VM-SEL-FLAG-LIT1 initialAttributes;
  end

  PK0PW01.PK0PWIXM = 1; /* Initialize map index*/

  while (PK0PW01.PK0PWIXM <= 20) /* Until all are reset*/

    set PK0PM022.PK1PKSCH[PK0PWIXM] initialAttributes; /* Schedule number*/

    if (PK0PW01.PK0PWIXM <= 10) /* Only ten print flags*/

      set PK0PM022.PK0PMGRP[PK0PWIXM] initialAttributes; /* Output print group*/
      set PK0PM022.PKQPRTFL[PK0PWIXM] initialAttributes; /* Print flag*/
      set PK0PM022.XRQCODE[PK0PWIXM] initialAttributes; /* Print queue*/

    end

    PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* Increment index*/

  end


end // end PK0P223

// Verify the entered data
Function PK0P224()
   /* ------------------------------------------------------------*/
   /* Obtain the warehouse control table row.*/
   /* Obtain the generation setup date.*/
   /* Ensure that at least one line was entered.*/
   /* Verify the schedule number selection list.*/
   /* Verify the full case/repack flag.*/
   /* Verify the generation of labels to be printed.*/
   /* Verify the number of copies to be printed.*/
   /* Verify the inline/VM select flag.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  PK0PS07(); /* Obtain warehouse control table row*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PK0PM022.PK0PMGEN cursor; /* set cursor*/
    PK0PM022.XXXPRCNM = "PK0P224"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  PK0PW01.PK0PWSWG = "N"; /* Initial generation error switch*/
  PK0PW01.PK0PWSWI = "N"; /* Initial ticket type error switch*/
  PK0PW01.PK0PWSWL = "N"; /* Initialize line switch*/
  PK0PW01.PK0PW-VM-SEL-SW = "N"; /* Initialize VM error switch*/

  if (PK0PM022.PK0PMGEN == "00") /* Generation number 0*/
    PK0PW01.PK0PWSDT = PKDREC.PKDLBLDT[1]; /* Setup date*/
  else

    if (PK0PM022.PK0PMGEN == "-1") /* Generation number -1*/
      PK0PW01.PK0PWSDT = PKDREC.PKDLBLDT[2]; /* Setup date*/
    else

      if (PK0PM022.PK0PMGEN == "-2") /* Generation number -2*/
        PK0PW01.PK0PWSDT = PKDREC.PKDLBLDT[3]; /* Setup date*/

      else

        PK0PW01.PK0PWSWG = "Y"; /* Indicate generation error*/

      end
    end
  end

  if (PK0PM022.PKQTKTYP != "F" /* Not full case*/
   && PK0PM022.PKQTKTYP != "R" /* and not repack*/
   && PK0PM022.PKQTKTYP != "P" /* and not orders*/
   && PK0PM022.PKQTKTYP != "L") /* and not labels*/

    PK0PW01.PK0PWSWI = "Y"; /* Indicate ticket type error*/

  end

  if (PK0PM022.PK0PM-VM-SEL-FLAG == "A"  /* Apparel*/
   || PK0PM022.PK0PM-VM-SEL-FLAG == "V"  /* or VM*/
   || PK0PM022.PK0PM-VM-SEL-FLAG == "B"  /* or Basics*/
   || (PK0PM022.PK0PM-VM-SEL-FLAG == "S" /* or Single carton*/
   && PK0PM022.PKQTKTYP == "F"))         /* and full case*/
                                          /* OK*/
  else

    PK0PW01.PK0PW-VM-SEL-SW = "Y"; /* Indicate VM error*/

  end

  if (PK0PM022.PK0PM-VM-SEL-FLAG == "B") /* Basics*/
    if ((PK0PM022.PKQTKTYP == "R" /* Repack*/
     || PK0PM022.PKQTKTYP == "F")) /* Full case*/
                                            /* OK*/
    else

      PK0PW01.PK0PW-VM-SEL-SW = "Y"; /* Indicate VM error*/

    end
  end

  PK0PW01.PK0PWIXM = 1; /* Initialize map index*/

  while (PK0PW01.PK0PWIXM <= 20 /* Until all schedules searched*/
   && PK0PW01.PK0PWSWL == "N") /* or an entered line is found*/

    if (PK0PW01.PK0PWIXM <= 10 /* Within print group array boundary*/
     && PK0PM022.PK0PMGRP[PK0PWIXM] > " ") /* and print group entered*/
      PK0PW01.PK0PWSWL = "Y"; /* Indicate line was entered*/
    end

    if (PK0PM022.PK1PKSCH[PK0PWIXM] != 0) /* Schedule was entered*/
      PK0PW01.PK0PWSWL = "Y"; /* Indicate line was entered*/
    end

    PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* Increment index*/

  end

  if (PK0PW01.PK0PWSWL == "N") /* No line was entered*/

    set PK0PM022.PK0PMGRP[1] cursor; /* Position cursor*/
    converseLib.validationFailed(139); /* Indicate parameters required*/
    PK0PM022.XXXPRCNM = "PK0P224"; /* Process name*/

  else

    PK0PW01.PK0PWIXM = 10; /* Initialize map from index*/
    PK0PW01.PK0PWIX2 = 20; /* Initialize map to index*/

    while (PK0PW01.PK0PWIXM != 0) /* Until all lines verified*/

      if (PK0PM022.PK0PMGRP[PK0PWIXM] > " " /* Print group entered*/
       || PK0PM022.PK1PKSCH[PK0PWIXM] != 0  /* or from schedule entered*/
       || PK0PM022.PK1PKSCH[PK0PWIX2] != 0  /* or to schedule entered*/
       || PK0PM022.XRQCODE[PK0PWIXM] > " ") /* or print queue entered*/

        PK0PS02(); /* Verify tickets by schedule*/

      end

      PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM - 1; /* Decrement from index*/
      PK0PW01.PK0PWIX2 = PK0PW01.PK0PWIX2 - 1; /* Decrement to index*/

    end

  end

  if (PK0PW01.PK0PWSWI == "Y") /* Ticket type error*/

    set PK0PM022.PKQTKTYP cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(156); /* Indicate flag invalid*/
    PK0PM022.XXXPRCNM = "PK0P224"; /* Process name*/

  end

  if (PK0PW01.PK0PWSWG == "Y") /* Generation error*/

    set PK0PM022.PK0PMGEN cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(117); /* Indicate invalid generation*/
    PK0PM022.XXXPRCNM = "PK0P224"; /* Process name*/

  end

  if (PK0PW01.PK0PW-VM-SEL-SW == "Y") /* VM error*/

    set PK0PM022.PK0PM-VM-SEL-FLAG cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(342); /* Indicate invalid entry*/
    PK0PM022.XXXPRCNM = "PK0P224"; /* Process name*/

  end

  if (PK0PM022.PK0PMCPY == 0) /* Number of copies invalid*/

    set PK0PM022.PK0PMCPY cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(126); /* Indicate invalid number*/
    PK0PM022.XXXPRCNM = "PK0P224"; /* Process name*/

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end PK0P224

// Process valid input request
Function PK0P225()
   /* ------------------------------------------------------------*/
   /* Format the batch program parameters.*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set PK0PW00 empty; /* Initialize variables work area*/
  set PK0PW22 empty; /* Initialize parameters work area*/

  PK0PW22.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
  PK0PW22.PK0PWSDT = PK0PW01.PK0PWSDT; /* Generation setup date*/
  PK0PW22.PKQTYPCD = "*"; /* Indicate all run type codes*/
  PK0PW22.PK0PWSCD = "S"; /* Indicate select by schedule*/
  PK0PW22.PKQTKTYP = PK0PM022.PKQTKTYP; /* Ticket type indicator*/

  if (PK0PW22.XWHCD == "51") /* Warehouse 51 only*/
    if (PK0PM022.PK0PM-VM-SEL-FLAG == "V") /* VM only selected*/
      if (PK0PW22.PKQTKTYP == "F") /* Full case indicated*/
        PK0PW22.PKQTKTYP = "G"; /* Reset for VM full case*/
      else
        if (PK0PW22.PKQTKTYP == "R") /* Repack indicated*/
          PK0PW22.PKQTKTYP = "S"; /* Reset for VM repack*/
        end
      end
    else
      if (PK0PM022.PK0PM-VM-SEL-FLAG == "S") /* Single Carton only*/
        PK0PW22.PKQTKTYP = "H"; /* Single carton full case*/
      end
    end
  end

  PK0PW00.PK0PMCPY = PK0PM022.PK0PMCPY; /* Number of copies*/
  PK0PW00.PK0PMGEN = PK0PM022.PK0PMGEN; /* Generation number*/

  if (PK0PM022.PKQTKTYP == "F") /* Full case indicated*/
    if (PK0PW22.XWHCD == "51" /* Warehouse 51*/
     || PK0PW22.XWHCD == "42") /* or Canada*/
      if (PK0PW22.XWHCD == "51" /* Warehouse 51*/
       && PK0PM022.PK0PM-VM-SEL-FLAG == "B") /* Basics*/
        PK0PW00.PK0PWEXE = "PK4962"; /* Execute JCL procedure*/
      else
        PK0PW00.PK0PWEXE = "PK5863"; /* Execute JCL procedure*/
      end
    else
      PK0PW00.PK0PWEXE = "PK5881"; /* Execute JCL procedure*/
    end
  else

    if (PK0PM022.PKQTKTYP == "L") /* Labels indicated*/
      PK0PW00.PK0PWEXE = "PK5872"; /* Execute JCL procedure*/
    else

      if (PKDREC.PKDWHTCD == "40") /* Special handling warehouse*/

        if (PK0PW22.XWHCD == "09" /* promo warehouse*/
         || PK0PW22.XWHCD == "25") /* or NSG*/
          PK0PW00.PK0PWEXE = "PK5873"; /* Execute JCL procedure*/
        else
          PK0PW00.PK0PWEXE = "PK5871"; /* Execute JCL procedure*/

        end
      else
        if (PK0PW22.XWHCD == "51" /* Warehouse 51*/
         || PK0PW22.XWHCD == "42") /* or Canada*/
          if (PK0PW22.XWHCD == "51" /* Warehouse 51*/
           && PK0PM022.PK0PM-VM-SEL-FLAG == "B") /* Basics*/
            PK0PW00.PK0PWEXE = "PK4961"; /* Execute JCL procedure*/
          else
            PK0PW00.PK0PWEXE = "PK5862"; /* Execute JCL procedure*/
          end
        else
          PK0PW00.PK0PWEXE = "PK5861"; /* Execute JCL procedure*/
        end

      end

    end

  end

  PK0P026(); /* Enque the internal reader*/

  while (PK0PW01.PK0PWSWS == "N") /* Until job is submitted*/

    PK0PW99.PK0PWJCL = PK0PT22.PK0PWJCL[PK0PWIXT]; /* JCL statement*/
    PK0PW01.PK0PTTYP = PK0PT22.PK0PTTYP[PK0PWIXT]; /* Statement type*/

    if (PK0PW01.PK0PTTYP == "P") /* Parameters statement*/

      PK0PW01.PK0PWIXM = 1; /* Initialize map from index*/
      PK0PW01.PK0PWIX2 = 11; /* Initialize map to index*/

      while (PK0PW01.PK0PWIXM <= 10) /* Until all lines processed*/

        if (PK0PM022.PK0PMGRP[PK0PWIXM] > " ") /* Print group entered*/

          PK0PW22.PK0PMGRP = PK0PM022.PK0PMGRP[PK0PWIXM];
          PK0PW22.PKQPRTFL = PK0PM022.PKQPRTFL[PK0PWIXM];
          PK0PW22.XRQCODE = PK0PM022.XRQCODE[PK0PWIXM];
          PK0PW22.PK0PWSCH[1] = PK0PM022.PK1PKSCH[PK0PWIXM];

          if (PK0PM022.PK1PKSCH[PK0PWIX2] == 0) /* To schedule not entered*/

            PK0PW22.PK0PWSCH[2] = PK0PM022.PK1PKSCH[PK0PWIXM];
          else
            PK0PW22.PK0PWSCH[2] = PK0PM022.PK1PKSCH[PK0PWIX2];

          end

          PK0PW00.PK0PWJCL = PK0PW22.PK0PWJCL; /* Report parameters*/

          PK0P027(); /* Write to the internal reader*/

          PK0PW01.PK0PWIXT = PK0PW01.PK0PWIXT - 1; /* Keep table position*/

        end

        PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* Increment from index*/
        PK0PW01.PK0PWIX2 = PK0PW01.PK0PWIX2 + 1; /* Increment to index*/

      end

      PK0PW01.PK0PWIXT = PK0PW01.PK0PWIXT + 1; /* Continue with JCL table*/

    else

      PK0P027(); /* Write to the internal reader*/

    end

  end

  PK0P028(); /* Deque the internal reader*/

  PK0PW01.PK0PWMNO = 127; /* Job was submitted*/
  PK0PW01.PK0PMSEL[14] = "*"; /* Indicate function completed*/

  set PK0PM022 initial; /* Clear map output area*/


end // end PK0P225

// Pick Tickets by Area/Zone/Row
Function PK0P230()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  PK0P231(); /* Format and display the map*/

  PK0P232(); /* Check attention identifier*/

  PK0P233(); /* Reset fields to normal intensity*/

  PK0P234(); /* Verify the entered data*/

  PK0P235(); /* Process valid input request*/


end // end PK0P230

// Format and display the map
Function PK0P231()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (PK0PW01.XWHCD != "51") /* Not apparel warehouse*/
    set PK0PM023.PK0PM-VM-SEL-FLAG initialAttributes; /* Hide VM flag*/
    set PK0PM023.PK0PM-VM-SEL-FLAG-LIT1 initialAttributes;
    PK0PM023.PK0PM-VM-SEL-FLAG = "A"; /* Initialize VM flag*/
  end

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    PK0PM023.XXXRVNBR = PK0PW01.XXXRVNBR; /* Revision number*/

    PK0PM023.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    PK0PM023.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
    PK0PM023.XWHABRV = PK0PW01.XWHABRV; /* Warehouse abbreviation*/

    PK0PM023.PK0PMRMT = PK0PW01.PK0PMRMT; /* Printer*/
    PK0PM023.PK0PMDES = PK0PW01.PK0PMDES; /* Description*/

    if (PKDREC.PKDWHTCD == "40" /* Special handling warehouse*/
     && PK0PM023.PKQTKTYP <= " ") /* and type not indicated*/
      PK0PM023.PKQTKTYP = "P"; /* Initial to Promotions Orders*/
    end

    if (PK0PM023.PK0PM-VM-SEL-FLAG <= " ") /* VM flag not indicated*/
      PK0PM023.PK0PM-VM-SEL-FLAG = "A"; /* Initialize VM flag*/
    end

    if (PK0PW01.XWHCD == "51") /* Apparel warehouse*/
      set PK0PM023.PK0PM-VM-SEL-FLAG normal; /* Display VM flag*/
      set PK0PM023.PK0PM-VM-SEL-FLAG-LIT1 normal;
      set PK0PM023.PK0PM-VM-SEL-FLAG-LIT1 protect;
    end

    if (PK0PW01.PK0PWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK0PW01.PK0PWMNO);
    end /* Job submitted message number*/
    PK0PW01.PK0PWMNO = 0; /* Reset message number*/

  else

    set PK0PM023 alarm; /* Indicate sound alarm*/

  end

  converse PK0PM023 ;


end // end PK0P231

// Check attention identifier
Function PK0P232()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PK0PW01.PK0PMSEL[15] = "C"; /* Indicate selection cancelled*/

    set PK0PM023 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0PM023.XXXPRCNM = "PK0P232"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0P232

// Reset highlighted fields
Function PK0P233()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0PM023.PK0PMCPY initialAttributes; /* Number of copies*/
  set PK0PM023.PK0PMGEN initialAttributes; /* Generation number*/
  set PK0PM023.PKQTKTYP initialAttributes; /* Full case/repack flag*/
  if (PK0PW01.XWHCD == "51")
    set PK0PM023.PK0PM-VM-SEL-FLAG normal; /* VM flag*/
    set PK0PM023.PK0PM-VM-SEL-FLAG-LIT1 normal;
    set PK0PM023.PK0PM-VM-SEL-FLAG-LIT1 protect;
  else
    set PK0PM023.PK0PM-VM-SEL-FLAG initialAttributes; /* VM flag*/
    set PK0PM023.PK0PM-VM-SEL-FLAG-LIT1 initialAttributes;
  end

  PK0PW01.PK0PWIXM = 1; /* Initialize map index*/

  while (PK0PW01.PK0PWIXM <= 10) /* Until all are reset*/

    set PK0PM023.PK0PMGRP[PK0PWIXM] initialAttributes; /* Output print group*/
    set PK0PM023.XARCD[PK0PWIXM] initialAttributes; /* Area code*/
    set PK0PM023.SL4ZONE[PK0PWIXM] initialAttributes; /* Zone code*/
    set PK0PM023.SL5ROWCD[PK0PWIXM] initialAttributes; /* Row code*/
    set PK0PM023.PKQTYPCD[PK0PWIXM] initialAttributes; /* Run type code*/
    set PK0PM023.PKQPRTFL[PK0PWIXM] initialAttributes; /* Print flag*/
    set PK0PM023.XRQCODE[PK0PWIXM] initialAttributes; /* Print queue*/

    PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* Increment index*/

  end


end // end PK0P233

// Verify the entered data
Function PK0P234()
   /* ------------------------------------------------------------*/
   /* Obtain the warehouse control table row.*/
   /* Obtain the generation setup date.*/
   /* Ensure that at least one line was entered.*/
   /* Verify the area/zone/row selection list.*/
   /* Verify the full case/repack flag.*/
   /* Verify the generation of labels to be printed.*/
   /* Verify the number of copies to be printed.*/
   /* Verify the inline/VM select flag.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  PK0PS07(); /* Obtain the warehouse control table row.*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PK0PM023.PK0PMGEN cursor; /* set cursor*/
    PK0PM023.XXXPRCNM = "PK0P234"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  PK0PW01.PK0PWSWG = "N"; /* Initial generation error switch*/
  PK0PW01.PK0PWSWI = "N"; /* Initial ticket type error switch*/
  PK0PW01.PK0PWSWL = "N"; /* Initialize line switch*/
  PK0PW01.PK0PW-VM-SEL-SW = "N"; /* Initialize line switch*/

  if (PK0PM023.PK0PMGEN == "00") /* Generation number 0*/
    PK0PW01.PK0PWSDT = PKDREC.PKDLBLDT[1]; /* Setup date*/
  else

    if (PK0PM023.PK0PMGEN == "-1") /* Generation number -1*/
      PK0PW01.PK0PWSDT = PKDREC.PKDLBLDT[2]; /* Setup date*/
    else

      if (PK0PM023.PK0PMGEN == "-2") /* Generation number -2*/
        PK0PW01.PK0PWSDT = PKDREC.PKDLBLDT[3]; /* Setup date*/

      else

        PK0PW01.PK0PWSWG = "Y"; /* Indicate generation error*/

      end
    end
  end

  if (PK0PM023.PKQTKTYP != "F" /* Not full case*/
   && PK0PM023.PKQTKTYP != "R" /* and not repack*/
   && PK0PM023.PKQTKTYP != "P" /* and not orders*/
   && PK0PM023.PKQTKTYP != "L") /* and not labels*/

    PK0PW01.PK0PWSWI = "Y"; /* Indicate ticket type error*/

  end

  if (PK0PM023.PK0PM-VM-SEL-FLAG == "A"  /* Apparel*/
   || PK0PM023.PK0PM-VM-SEL-FLAG == "V"  /* or VM*/
   || (PK0PM023.PK0PM-VM-SEL-FLAG == "S" /* or Single Carton*/
   && PK0PM023.PKQTKTYP == "F"))         /* and full case*/
                                           /* OK*/
  else

    PK0PW01.PK0PW-VM-SEL-SW = "Y"; /* Indicate VM error*/

  end

  PK0PW01.PK0PWIXM = 1; /* Initialize map index*/

  while (PK0PW01.PK0PWIXM <= 10 /* Until all area/zone/rows searched*/
   && PK0PW01.PK0PWSWL == "N") /* or an entered line is found*/

    if (PK0PM023.PK0PMGRP[PK0PWIXM] > " " /* Print group was entered*/
     || PK0PM023.XARCD[PK0PWIXM] > " "    /* or area was entered*/
     || PK0PM023.SL4ZONE[PK0PWIXM] > " "  /* or zone was entered*/
     || PK0PM023.SL5ROWCD[PK0PWIXM] > " " /* or row was entered*/
     || PK0PM023.XRQCODE[PK0PWIXM] > " ") /* or print queue entered*/

      PK0PW01.PK0PWSWL = "Y"; /* Indicate line was entered*/

    end

    PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* Increment index*/

  end

  if (PK0PW01.PK0PWSWL == "N") /* No line was entered*/

    set PK0PM023.PK0PMGRP[1] cursor; /* Position cursor*/
    converseLib.validationFailed(139); /* Indicate parameters required*/
    PK0PM023.XXXPRCNM = "PK0P234"; /* Process name*/

  else

    PK0PW01.PK0PWIXM = 10; /* Initialize map index*/

    while (PK0PW01.PK0PWIXM > 0) /* Until all lines verified*/

      if (PK0PM023.PK0PMGRP[PK0PWIXM] > " " /* Print group was entered*/
       || PK0PM023.XARCD[PK0PWIXM] > " "    /* or area was entered*/
       || PK0PM023.SL4ZONE[PK0PWIXM] > " "  /* or zone entered*/
       || PK0PM023.SL5ROWCD[PK0PWIXM] > " ") /* or row entered*/

        PK0PS03(); /* Verify tickets by area/zone/row*/

      end

      PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM - 1; /* Decrement from index*/

    end

  end

  if (PK0PW01.PK0PWSWI == "Y") /* Ticket type error*/

    set PK0PM023.PKQTKTYP cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(156); /* Indicate flag invalid*/
    PK0PM023.XXXPRCNM = "PK0P234"; /* Process name*/

  end

  if (PK0PW01.PK0PWSWG == "Y") /* Generation error*/

    set PK0PM023.PK0PMGEN cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(117); /* Indicate invalid generation*/
    PK0PM023.XXXPRCNM = "PK0P234"; /* Process name*/

  end

  if (PK0PW01.PK0PW-VM-SEL-SW == "Y") /* VM error*/

    set PK0PM023.PK0PM-VM-SEL-FLAG cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(342); /* Indicate invalid generation*/
    PK0PM023.XXXPRCNM = "PK0P234"; /* Process name*/

  end

  if (PK0PM023.PK0PMCPY == 0) /* Number of copies invalid*/

    set PK0PM023.PK0PMCPY cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(126); /* Indicate invalid number*/
    PK0PM023.XXXPRCNM = "PK0P234"; /* Process name*/

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end PK0P234

// Process valid input request
Function PK0P235()
   /* ------------------------------------------------------------*/
   /* Format the batch program parameters.*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set PK0PW00 empty; /* Initialize variables work area*/
  set PK0PW23 empty; /* Initialize parameters work area*/

  PK0PW23.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
  PK0PW23.PK0PWSDT = PK0PW01.PK0PWSDT; /* Generation setup date*/
  PK0PW23.PK0PWSCD = "L"; /* Indicate select by location*/
  PK0PW23.PKQTKTYP = PK0PM023.PKQTKTYP; /* Ticket type indicator*/

  if (PK0PW23.XWHCD == "51") /* Warehouse 51 only*/
    if (PK0PM023.PK0PM-VM-SEL-FLAG == "V") /* VM only selected*/
      if (PK0PW23.PKQTKTYP == "F") /* Full case indicated*/
        PK0PW23.PKQTKTYP = "G"; /* Reset for VM full case*/
      else
        if (PK0PW23.PKQTKTYP == "R") /* Repack indicated*/
          PK0PW23.PKQTKTYP = "S"; /* Reset for VM repack*/
        end
      end
    else
      if (PK0PM023.PK0PM-VM-SEL-FLAG == "S") /* Single Carton only*/
        PK0PW23.PKQTKTYP = "H"; /* Single carton full case*/
      end
    end
  end

  PK0PW00.PK0PMCPY = PK0PM023.PK0PMCPY; /* Number of copies*/
  PK0PW00.PK0PMGEN = PK0PM023.PK0PMGEN; /* Generation number*/

  if (PK0PM023.PKQTKTYP == "F") /* Full case indicated*/
    if (PK0PW23.XWHCD == "51" /* Warehouse 51*/
     || PK0PW23.XWHCD == "42") /* or Canada*/
      PK0PW00.PK0PWEXE = "PK5863"; /* Execute JCL procedure*/
    else
      PK0PW00.PK0PWEXE = "PK5881"; /* Execute JCL procedure*/
    end
  else

    if (PK0PM023.PKQTKTYP == "L") /* Labels indicated*/
      PK0PW00.PK0PWEXE = "PK5872"; /* Execute JCL procedure*/
    else

      if (PKDREC.PKDWHTCD == "40") /* Special handling warehouse*/

        if (PK0PW23.XWHCD == "09" /* promo warehouse*/
         || PK0PW23.XWHCD == "25") /* or NSG*/
          PK0PW00.PK0PWEXE = "PK5873"; /* Execute JCL procedure*/
        else
          PK0PW00.PK0PWEXE = "PK5871"; /* Execute JCL procedure*/

        end
      else
        if (PK0PW23.XWHCD == "51" /* Warehouse 51*/
         || PK0PW23.XWHCD == "42") /* or Canada*/
          PK0PW00.PK0PWEXE = "PK5862"; /* Execute JCL procedure*/
        else
          PK0PW00.PK0PWEXE = "PK5861"; /* Execute JCL procedure*/
        end

      end

    end

  end

  PK0P026(); /* Enque the internal reader*/

  while (PK0PW01.PK0PWSWS == "N") /* Until job is submitted*/

    PK0PW99.PK0PWJCL = PK0PT23.PK0PWJCL[PK0PWIXT]; /* JCL statement*/
    PK0PW01.PK0PTTYP = PK0PT23.PK0PTTYP[PK0PWIXT]; /* Statement type*/

    if (PK0PW01.PK0PTTYP == "P") /* Parameters statement*/

      PK0PW01.PK0PWIXM = 1; /* Initialize map from index*/

      while (PK0PW01.PK0PWIXM <= 10) /* Until all lines processed*/

        if (PK0PM023.PK0PMGRP[PK0PWIXM] > " ") /* Print group entered*/

          PK0PW23.PK0PMGRP = PK0PM023.PK0PMGRP[PK0PWIXM];
          PK0PW23.PKQTYPCD = PK0PM023.PKQTYPCD[PK0PWIXM];
          PK0PW23.PKQPRTFL = PK0PM023.PKQPRTFL[PK0PWIXM];
          PK0PW23.XRQCODE = PK0PM023.XRQCODE[PK0PWIXM];
          PK0PW23.XARCD = PK0PM023.XARCD[PK0PWIXM];
          PK0PW23.SL4ZONE = PK0PM023.SL4ZONE[PK0PWIXM];
          PK0PW23.SL5ROWCD = PK0PM023.SL5ROWCD[PK0PWIXM];

          PK0PW00.PK0PWJCL = PK0PW23.PK0PWJCL; /* Report parameters*/

          PK0P027(); /* Write to the internal reader*/

          PK0PW01.PK0PWIXT = PK0PW01.PK0PWIXT - 1; /* Keep table position*/

        end

        PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* Increment from index*/

      end

      PK0PW01.PK0PWIXT = PK0PW01.PK0PWIXT + 1; /* Continue with JCL table*/

    else

      PK0P027(); /* Write to the internal reader*/

    end

  end

  PK0P028(); /* Deque the internal reader*/

  PK0PW01.PK0PWMNO = 125; /* Job was submitted*/
  PK0PW01.PK0PMSEL[15] = "*"; /* Indicate function completed*/

  set PK0PM023 initial; /* Clear map output area*/


end // end PK0P235

// Pick Tickets by Schedule
Function PK0P240()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  PK0P241(); /* Format and display the map*/

  PK0P242(); /* Check attention identifier*/

  PK0P243(); /* Reset fields to normal intensity*/

  PK0P244(); /* Verify the entered data*/

  PK0P245(); /* Process valid input request*/


end // end PK0P240

// Format and display the map
Function PK0P241()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (PK0PW01.XWHCD != "51") /* Not apparel warehouse*/
    set PK0PM024.PK0PM-VM-SEL-FLAG initialAttributes; /* Hide VM flag*/
    set PK0PM024.PK0PM-VM-SEL-FLAG-LIT1 initialAttributes;
    PK0PM024.PK0PM-VM-SEL-FLAG = "A"; /* Initialize VM flag*/
  end

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    PK0PM024.XXXRVNBR = PK0PW01.XXXRVNBR; /* Revision number*/

    PK0PM024.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    PK0PM024.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
    PK0PM024.XWHABRV = PK0PW01.XWHABRV; /* Warehouse abbreviation*/

    PK0PM024.PK0PMRMT = PK0PW01.PK0PMRMT; /* Printer*/
    PK0PM024.PK0PMDES = PK0PW01.PK0PMDES; /* Description*/

    if (PKDREC.PKDWHTCD == "40" /* Special handling warehouse*/
     && PK0PM024.PKQTKTYP <= " ") /* and type not indicated*/
      PK0PM024.PKQTKTYP = "P"; /* Initial to Promotions Orders*/
    end

    if (PK0PM024.PK0PM-VM-SEL-FLAG <= " ") /* VM flag not indicated*/
      PK0PM024.PK0PM-VM-SEL-FLAG = "A"; /* Initialize VM flag*/
    end

    if (PK0PW01.XWHCD == "51") /* Apparel warehouse*/
      set PK0PM024.PK0PM-VM-SEL-FLAG normal; /* Display VM flag*/
      set PK0PM024.PK0PM-VM-SEL-FLAG-LIT1 normal;
      set PK0PM024.PK0PM-VM-SEL-FLAG-LIT1 protect;
    end

    if (PK0PW01.PK0PWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK0PW01.PK0PWMNO);
    end /* Job submitted message number*/
    PK0PW01.PK0PWMNO = 0; /* Reset message number*/

  else

    set PK0PM024 alarm; /* Indicate sound alarm*/

  end

  converse PK0PM024 ;


end // end PK0P241

// Check attention identifier
Function PK0P242()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PK0PW01.PK0PMSEL[16] = "C"; /* Indicate selection cancelled*/

    set PK0PM024 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0PM024.XXXPRCNM = "PK0P242"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0P242

// Reset highlighted fields
Function PK0P243()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0PM024.PK0PMCPY initialAttributes; /* Number of copies*/
  set PK0PM024.PK0PMGEN initialAttributes; /* Generation number*/
  set PK0PM024.PKQTKTYP initialAttributes; /* Full case/repack flag*/
  if (PK0PW01.XWHCD == "51")
    set PK0PM024.PK0PM-VM-SEL-FLAG normal; /* VM flag*/
    set PK0PM024.PK0PM-VM-SEL-FLAG-LIT1 normal;
    set PK0PM024.PK0PM-VM-SEL-FLAG-LIT1 protect;
  else
    set PK0PM024.PK0PM-VM-SEL-FLAG initialAttributes; /* VM flag*/
    set PK0PM024.PK0PM-VM-SEL-FLAG-LIT1 initialAttributes;
  end

  PK0PW01.PK0PWIXM = 1; /* Initialize map index*/

  while (PK0PW01.PK0PWIXM <= 20) /* Until all are reset*/

    set PK0PM024.PK0PMSEQ[PK0PWIXM] initialAttributes; /* Sequence number*/

    if (PK0PW01.PK0PWIXM <= 10) /* Only ten print flags*/

      set PK0PM024.PK0PMGRP[PK0PWIXM] initialAttributes; /* Output print group*/
      set PK0PM024.XRQCODE[PK0PWIXM] initialAttributes; /* Print queue*/

    end

    PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* Increment index*/

  end


end // end PK0P243

// Verify the entered data
Function PK0P244()
   /* ------------------------------------------------------------*/
   /* OBTAIN THE WAREHOUSE CONTROL TABLE ROW.*/
   /* Obtain the generation setup date.*/
   /* Ensure that at least one line was entered.*/
   /* Verify the sequence number selection list.*/
   /* Verify the full case/repack flag.*/
   /* Verify the generation of labels to be printed.*/
   /* Verify the inline/VM select flag.*/
   /* Verify the number of copies to be printed.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  PK0PS07(); /* OBTAIN THE WAREHOUSE CONTROL TABLE*/
                                   /* ROW*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PK0PM024.PK0PMGEN cursor; /* set cursor*/
    PK0PM024.XXXPRCNM = "PK0P244"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  PK0PW01.PK0PWSWG = "N"; /* Initial generation error switch*/
  PK0PW01.PK0PWSWI = "N"; /* Initial ticket type error switch*/
  PK0PW01.PK0PWSWL = "N"; /* Initialize line switch*/
  PK0PW01.PK0PW-VM-SEL-SW = "N"; /* Initialize line switch*/

  if (PK0PM024.PK0PMGEN == "00") /* Generation number 0*/
    PK0PW01.PK0PWSDT = PKDREC.PKDLBLDT[1]; /* Setup date*/
  else

    if (PK0PM024.PK0PMGEN == "-1") /* Generation number -1*/
      PK0PW01.PK0PWSDT = PKDREC.PKDLBLDT[2]; /* Setup date*/
    else

      if (PK0PM024.PK0PMGEN == "-2") /* Generation number -2*/
        PK0PW01.PK0PWSDT = PKDREC.PKDLBLDT[3]; /* Setup date*/
      else

        PK0PW01.PK0PWSWG = "Y"; /* Indicate generation error*/

      end
    end
  end

  if (PK0PM024.PKQTKTYP != "F" /* Not full case*/
   && PK0PM024.PKQTKTYP != "R" /* and not repack*/
   && PK0PM024.PKQTKTYP != "P" /* and not orders*/
   && PK0PM024.PKQTKTYP != "L") /* and not labels*/

    PK0PW01.PK0PWSWI = "Y"; /* Indicate ticket type error*/

  end

  if (PK0PM024.PK0PM-VM-SEL-FLAG == "A"  /* Apparel*/
   || PK0PM024.PK0PM-VM-SEL-FLAG == "V"  /* or VM*/
   || (PK0PM024.PK0PM-VM-SEL-FLAG == "S" /* or Single Carton*/
   && PK0PM024.PKQTKTYP == "F")          /* and Full case*/
   || PK0PM024.PK0PM-VM-SEL-FLAG == "B") /* or Basics*/
                                           /* OK*/
  else

    PK0PW01.PK0PW-VM-SEL-SW = "Y"; /* Indicate VM error*/

  end

  PK0PW01.PK0PWIXM = 1; /* Initialize map index*/

  while (PK0PW01.PK0PWIXM <= 20 /* Until all sequences searched*/
   && PK0PW01.PK0PWSWL == "N") /* or an entered line is found*/

    if (PK0PW01.PK0PWIXM <= 10 /* Within print group array boundary*/
     && PK0PM024.PK0PMGRP[PK0PWIXM] > " ")
                                   /* and print group was entered*/
      PK0PW01.PK0PWSWL = "Y"; /* Indicate line was entered*/
    end

    if (PK0PM024.PK0PMSEQ[PK0PWIXM] != 0) /* Sequence was entered*/
      PK0PW01.PK0PWSWL = "Y"; /* Indicate line was entered*/
    end

    PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* Increment index*/

  end

  if (PK0PW01.PK0PWSWL == "N") /* No line was entered*/

    set PK0PM024.PK0PMGRP[1] cursor; /* Position cursor*/
    converseLib.validationFailed(139); /* Indicate parameters required*/
    PK0PM024.XXXPRCNM = "PK0P244"; /* Process name*/

  else

    PK0PW01.PK0PWIXM = 10; /* Initialize map from index*/
    PK0PW01.PK0PWIX2 = 20; /* Initialize map to index*/

    while (PK0PW01.PK0PWIXM != 0) /* Until all lines verified*/

      if (PK0PM024.PK0PMGRP[PK0PWIXM] > " " /* Print group was entered*/
       || PK0PM024.PK0PMSEQ[PK0PWIXM] != 0  /* or from sequence entered*/
       || PK0PM024.PK0PMSEQ[PK0PWIX2] != 0  /* or to sequence entered*/
       || PK0PM024.XRQCODE[PK0PWIXM] > " ") /* or print queue entered*/

        PK0PS04(); /* Verify tickets by sequence*/

      end

      PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM - 1; /* Decrement from index*/
      PK0PW01.PK0PWIX2 = PK0PW01.PK0PWIX2 - 1; /* Decrement to index*/

    end

  end

  if (PK0PW01.PK0PWSWI == "Y") /* Ticket type error*/

    set PK0PM024.PKQTKTYP cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(156); /* Indicate flag invalid*/
    PK0PM024.XXXPRCNM = "PK0P244"; /* Process name*/

  end

  if (PK0PW01.PK0PWSWG == "Y") /* Generation error*/

    set PK0PM024.PK0PMGEN cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(117); /* Indicate invalid generation*/
    PK0PM024.XXXPRCNM = "PK0P244"; /* Process name*/

  end

  if (PK0PW01.PK0PW-VM-SEL-SW == "Y") /* VM error*/

    set PK0PM024.PK0PM-VM-SEL-FLAG cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(342); /* Indicate invalid generation*/
    PK0PM024.XXXPRCNM = "PK0P244"; /* Process name*/

  end

  if (PK0PM024.PK0PMCPY == 0) /* Number of copies invalid*/

    set PK0PM024.PK0PMCPY cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(126); /* Indicate invalid number*/
    PK0PM024.XXXPRCNM = "PK0P244"; /* Process name*/

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end PK0P244

// Process valid input request
Function PK0P245()
   /* ------------------------------------------------------------*/
   /* Format the batch program parameters.*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set PK0PW00 empty; /* Initialize variables work area*/
  set PK0PW24 empty; /* Initialize parameters work area*/

  PK0PW24.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
  PK0PW24.PK0PWSDT = PK0PW01.PK0PWSDT; /* Generation setup date*/
  PK0PW24.PKQPRTFL = "Y"; /* Indicate reprint only*/
  PK0PW24.PKQTYPCD = "*"; /* Indicate all run type codes*/
  PK0PW24.PK0PWSCD = "C"; /* Indicate select by sequence*/
  PK0PW24.PKQTKTYP = PK0PM024.PKQTKTYP; /* Ticket type indicator*/
  if (PK0PW24.XWHCD == "51") /* Warehouse 51 only*/
    if (PK0PM024.PK0PM-VM-SEL-FLAG == "V") /* VM only selected*/
      if (PK0PW24.PKQTKTYP == "F") /* Full case indicated*/
        PK0PW24.PKQTKTYP = "G"; /* Reset for VM full case*/
      else
        if (PK0PW24.PKQTKTYP == "R") /* Repack indicated*/
          PK0PW24.PKQTKTYP = "S"; /* Reset for VM repack*/
        end
      end
    else
      if (PK0PM024.PK0PM-VM-SEL-FLAG == "S") /* Single Carton only*/
        PK0PW24.PKQTKTYP = "H"; /* Single carton full case*/
      end
    end
  end


  PK0PW00.PK0PMCPY = PK0PM024.PK0PMCPY; /* Number of copies*/
  PK0PW00.PK0PMGEN = PK0PM024.PK0PMGEN; /* Generation number*/

  if (PK0PM024.PKQTKTYP == "F") /* Full case indicated*/
    if (PK0PW24.XWHCD == "42") /* Canada*/
      PK0PW00.PK0PWEXE = "PK5863"; /* Execute JCL procedure*/
    else
      if (PK0PW24.XWHCD == "51") /* Warehouse 51*/
        if (PK0PM024.PK0PM-VM-SEL-FLAG == "B") /* Basics only*/
          PK0PW00.PK0PWEXE = "PK5865"; /* Execute JCL procedure*/
        else /* Non Basics*/
          PK0PW00.PK0PWEXE = "PK5863"; /* Execute JCL procedure*/
        end
      else /* All other warehouses*/
        PK0PW00.PK0PWEXE = "PK5881"; /* Execute JCL procedure*/
      end
    end
  else

    if (PK0PM024.PKQTKTYP == "L") /* Labels indicated*/
      PK0PW00.PK0PWEXE = "PK5872"; /* Execute JCL procedure*/
    else

      if (PKDREC.PKDWHTCD == "40") /* Special handling warehouse*/

        if (PK0PW24.XWHCD == "09" /* promo warehouse*/
         || PK0PW24.XWHCD == "25") /* or NSG*/
          PK0PW00.PK0PWEXE = "PK5871"; /* Execute JCL procedure*/
        else
          PK0PW00.PK0PWEXE = "PK5871"; /* Execute JCL procedure*/

        end
      else
        if (PK0PW24.XWHCD == "42") /* Canada*/
          PK0PW00.PK0PWEXE = "PK5862"; /* Execute JCL procedure*/
        else
          if (PK0PW24.XWHCD == "51") /* Warehouse 51*/
            if (PK0PM024.PK0PM-VM-SEL-FLAG == "B") /* Basics only*/
              PK0PW00.PK0PWEXE = "PK5864"; /* Execute JCL procedure*/
            else /* Non Basics*/
              PK0PW00.PK0PWEXE = "PK5862"; /* Execute JCL procedure*/
            end /* Non Basics*/
          else /* All other warehouses*/
            PK0PW00.PK0PWEXE = "PK5861"; /* Execute JCL procedure*/
          end
        end

      end

    end

  end

  PK0P026(); /* Enque the internal reader*/

  while (PK0PW01.PK0PWSWS == "N") /* Until job is submitted*/

    PK0PW99.PK0PWJCL = PK0PT24.PK0PWJCL[PK0PWIXT]; /* JCL statement*/
    PK0PW01.PK0PTTYP = PK0PT24.PK0PTTYP[PK0PWIXT]; /* Statement type*/

    if (PK0PW01.PK0PTTYP == "P") /* Parameters statement*/

      PK0PW01.PK0PWIXM = 1; /* Initialize map from index*/
      PK0PW01.PK0PWIX2 = 11; /* Initialize map to index*/

      while (PK0PW01.PK0PWIXM <= 10) /* Until all lines processed*/

        if (PK0PM024.PK0PMGRP[PK0PWIXM] > " ") /* Print group entered*/

          PK0PW24.PK0PMGRP = PK0PM024.PK0PMGRP[PK0PWIXM];
          PK0PW24.XRQCODE = PK0PM024.XRQCODE[PK0PWIXM];
          PK0PW24.PK0PMSEQ[1] = PK0PM024.PK0PMSEQ[PK0PWIXM];

          if (PK0PM024.PK0PMSEQ[PK0PWIX2] == 0) /* To sequence not entered*/

            PK0PW24.PK0PMSEQ[2] = PK0PM024.PK0PMSEQ[PK0PWIXM];
          else
            PK0PW24.PK0PMSEQ[2] = PK0PM024.PK0PMSEQ[PK0PWIX2];

          end

          PK0PW00.PK0PWJCL = PK0PW24.PK0PWJCL; /* Report parameters*/

          PK0P027(); /* Write to the internal reader*/

          PK0PW01.PK0PWIXT = PK0PW01.PK0PWIXT - 1; /* Keep table position*/

        end

        PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* Increment from index*/
        PK0PW01.PK0PWIX2 = PK0PW01.PK0PWIX2 + 1; /* Increment to index*/

      end

      PK0PW01.PK0PWIXT = PK0PW01.PK0PWIXT + 1; /* Continue with JCL table*/

    else

      PK0P027(); /* Write to the internal reader*/

    end

  end

  PK0P028(); /* Deque the internal reader*/

  PK0PW01.PK0PWMNO = 148; /* Job was submitted*/
  PK0PW01.PK0PMSEL[16] = "*"; /* Indicate function completed*/

  set PK0PM024 initial; /* Clear map output area*/


end // end PK0P245

// Replenishment Spur Labels
Function PK0P250()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  PK0P251(); /* Format and display the map*/

  PK0P252(); /* Check attention identifier*/

  PK0P253(); /* Reset fields to normal intensity*/

  PK0P254(); /* Verify the entered data*/

  PK0P255(); /* Process valid input request*/


end // end PK0P250

// Format and display the map
Function PK0P251()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    PK0PM025.XXXRVNBR = PK0PW01.XXXRVNBR; /* Revision number*/

    PK0PM025.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    PK0PM025.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
    PK0PM025.XWHABRV = PK0PW01.XWHABRV; /* Warehouse abbreviation*/

    PK0PM025.PK0PMRMT = PK0PW01.PK0PMRMT; /* Printer*/
    PK0PM025.PK0PMDES = PK0PW01.PK0PMDES; /* Description*/

    if (PK0PW01.PK0PWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK0PW01.PK0PWMNO);
    end /* Job submitted message number*/
    PK0PW01.PK0PWMNO = 0; /* Reset message number*/

  else

    set PK0PM025 alarm; /* Indicate sound alarm*/

  end

  converse PK0PM025 ;


end // end PK0P251

// Check attention identifier
Function PK0P252()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PK0PW01.PK0PMSEL[17] = "C"; /* Indicate selection cancelled*/

    set PK0PM025 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0PM025.XXXPRCNM = "PK0P252"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0P252

// Reset highlighted fields
Function PK0P253()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  PK0PW01.PK0PWIXM = 1; /* Initialize map index*/

  while (PK0PW01.PK0PWIXM <= 12) /* Until all are reset*/

    set PK0PM025.PK0PMGRP[PK0PWIXM] initialAttributes; /* Output print group*/
    set PK0PM025.XARCD[PK0PWIXM] initialAttributes; /* Area code*/
    set PK0PM025.SL4ZONE[PK0PWIXM] initialAttributes; /* Zone code*/
    set PK0PM025.SL5LOCTN[PK0PWIXM] initialAttributes; /* Location code*/
    set PK0PM025.PKERNSRN[PK0PWIXM] initialAttributes; /* Spur code*/
    set PK0PM025.PK0PMCNT[PK0PWIXM] initialAttributes; /* Label count*/
    set PK0PM025.XRQCODE[PK0PWIXM] initialAttributes; /* Print queue*/

    PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* Increment index*/

  end


end // end PK0P253

// Verify the entered data
Function PK0P254()
   /* ------------------------------------------------------------*/
   /* Ensure that at least one line was entered.*/
   /* Verify the area/zone/row selection list.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  PK0PW01.PK0PWSWL = "N"; /* Initialize line switch*/

  PK0PW01.PK0PWIXM = 1; /* Initialize map index*/

  if (PK0PW01.XWHCD == "51"
   || PK0PW01.XWHCD == "42") /* canada*/

    set PK0PM025.XWHCD cursor, bold; /* Position cursor*/
    converseLib.validationFailed(370); /* Indicate invalid warehouse*/
    PK0PM025.XXXPRCNM = "PK0P254"; /* Process name*/

  else

    while (PK0PW01.PK0PWIXM <= 12 /* Until all area/zone/rows searched*/
     && PK0PW01.PK0PWSWL == "N") /* or an entered line is found*/

      if (PK0PM025.PK0PMGRP[PK0PWIXM] > " " /* Print group was entered*/
       || PK0PM025.XARCD[PK0PWIXM] > " "    /* or area was entered*/
       || PK0PM025.SL4ZONE[PK0PWIXM] > " "  /* or zone was entered*/
       || PK0PM025.SL5LOCTN[PK0PWIXM] > " " /* or location was entered*/
       || PK0PM025.PKERNSRN[PK0PWIXM] > 0   /* or spur was entered*/
       || PK0PM025.PK0PMCNT[PK0PWIXM] > 0   /* or count was entered*/
       || PK0PM025.XRQCODE[PK0PWIXM] > " ") /* or print queue entered*/

        PK0PW01.PK0PWSWL = "Y"; /* Indicate line was entered*/

      end

      PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* Increment index*/

    end

    if (PK0PW01.PK0PWSWL == "N") /* No line was entered*/

      set PK0PM025.PK0PMGRP[1] cursor; /* Position cursor*/
      converseLib.validationFailed(139); /* Indicate parameters required*/
      PK0PM025.XXXPRCNM = "PK0P254"; /* Process name*/

    else

      PK0PW01.PK0PWIXM = 12; /* Initialize map index*/

      while (PK0PW01.PK0PWIXM > 0) /* Until all lines verified*/

        if (PK0PM025.PK0PMGRP[PK0PWIXM] > " " /* Print group was entered*/
         || PK0PM025.XARCD[PK0PWIXM] > " "    /* or area was entered*/
         || PK0PM025.SL4ZONE[PK0PWIXM] > " "  /* or zone entered*/
         || PK0PM025.SL5LOCTN[PK0PWIXM] > " " /* or location entered*/
         || PK0PM025.PKERNSRN[PK0PWIXM] > 0   /* or spur was entered*/
         || PK0PM025.PK0PMCNT[PK0PWIXM] > 0   /* or count was entered*/
         || PK0PM025.XRQCODE[PK0PWIXM] > " ") /* or print queue entered*/

          PK0PS05(); /* Verify area/zone/location*/

        end

        PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM - 1; /* Decrement from index*/

      end

    end

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end PK0P254

// Process valid input request
Function PK0P255()
   /* ------------------------------------------------------------*/
   /* Format the batch program parameters.*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set PK0PW00 empty; /* Initialize variables work area*/
  set PK0PW25 empty; /* Initialize parameters work area*/

  PK0PW25.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/

  PK0PW00.PK0PMCPY = 1; /* Number of copies*/

  PK0P026(); /* Enque the internal reader*/

  while (PK0PW01.PK0PWSWS == "N") /* Until job is submitted*/

    if (PK0PW01.XWHCD == "04")
      /* ----- Use 8 Digit Barcode ----------------------*/
      PK0PW99.PK0PWJCL = PK0PT3O.PK0PWJCL[PK0PWIXT]; /* JCL stmt*/
      PK0PW01.PK0PTTYP = PK0PT3O.PK0PTTYP[PK0PWIXT]; /* Stmt type*/

    else
      /* ----- Use 6 Digit Barcode ----------------------*/
      PK0PW99.PK0PWJCL = PK0PT25.PK0PWJCL[PK0PWIXT]; /* JCL stmt*/
      PK0PW01.PK0PTTYP = PK0PT25.PK0PTTYP[PK0PWIXT]; /* Stmt type*/

    end

    if (PK0PW01.PK0PTTYP == "P") /* Parameters statement*/

      PK0PW01.PK0PWIXM = 1; /* Initialize map from index*/

      while (PK0PW01.PK0PWIXM <= 12) /* Until all lines processed*/

        if (PK0PM025.PK0PMGRP[PK0PWIXM] > " ") /* Print group entered*/

          PK0PW25.PK0PMGRP = PK0PM025.PK0PMGRP[PK0PWIXM];
          PK0PW25.XARCD = PK0PM025.XARCD[PK0PWIXM];
          PK0PW25.SL4ZONE = PK0PM025.SL4ZONE[PK0PWIXM];
          PK0PW25.SL5LOCTN = PK0PM025.SL5LOCTN[PK0PWIXM];
          PK0PW25.PK0PWSPR = PK0PM025.PKERNSRN[PK0PWIXM];
          PK0PW25.PK0PMCNT = PK0PM025.PK0PMCNT[PK0PWIXM];
          PK0PW25.XRQCODE = PK0PM025.XRQCODE[PK0PWIXM];

          PK0PW00.PK0PWJCL = PK0PW25.PK0PWJCL; /* Report parameters*/

          PK0P027(); /* Write to the internal reader*/

          PK0PW01.PK0PWIXT = PK0PW01.PK0PWIXT - 1; /* Keep table position*/

        end

        PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* Increment from index*/

      end

      PK0PW01.PK0PWIXT = PK0PW01.PK0PWIXT + 1; /* Continue with JCL table*/

    else

      PK0P027(); /* Write to the internal reader*/

    end

  end

  PK0P028(); /* Deque the internal reader*/

  PK0PW01.PK0PWMNO = 231; /* Job was submitted*/
  PK0PW01.PK0PMSEL[17] = "*"; /* Indicate function completed*/

  set PK0PM025 initial; /* Clear map output area*/


end // end PK0P255

// Carton Content Request
Function PK0P260()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  PK0P261(); /* Format and display the map*/

  PK0P262(); /* Check attention identifier*/

  PK0P263(); /* Reset fields to normal intensity*/

  PK0P264(); /* Verify the entered data*/

  PK0P265(); /* Process valid input request*/


end // end PK0P260

// Format and display the map
Function PK0P261()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (PK0PW01.XWHCD != "51" /* Not apparel warehouse*/
   && PK0PW01.XWHCD != "42") /* Not apparel warehouse*/
    set PK0PM026.PK0PM-VM-SEL-FLAG initialAttributes; /* Hide VM flag*/
    set PK0PM026.PK0PM-VM-SEL-FLAG-LIT1 initialAttributes;
    set PK0PM026.PK0PM-VM-SEL-FLAG-LIT2 initialAttributes;
    PK0PM026.PK0PM-VM-SEL-FLAG = "A"; /* Initialize VM flag*/
  end

  if (PK0PW01.XWHCD != 51
   && PK0PW01.XWHCD != 42)
    set PK0PM-OUTER-CARTON-LABEL invisible, skip;
    set PK0PM-PK-OUTER-SEQ-NBR-LOW invisible, skip;
    set PK0PM-PK-OUTER-SEQ-NBR-HIGH invisible, skip;
  end

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    PK0PM026.XXXRVNBR = PK0PW01.XXXRVNBR; /* Revision number*/

    PK0PM026.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    if (PK0PM026.PK0PM-VM-SEL-FLAG <= " ")
      PK0PM026.PK0PM-VM-SEL-FLAG = "A"; /* Initialize VM flag*/
    end

    PK0PM026.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/

    if (PK0PW01.XWHCD == 51
     || PK0PW01.XWHCD == 42)
      set PK0PM-OUTER-CARTON-LABEL initialAttributes;
      set PK0PM-PK-OUTER-SEQ-NBR-LOW initialAttributes;
      set PK0PM-PK-OUTER-SEQ-NBR-HIGH initialAttributes;
    end

    if (PK0PW01.XWHCD == "51" /* Apparel warehouse*/
     || PK0PW01.XWHCD == 42) 
      set PK0PM026.PK0PM-VM-SEL-FLAG normal; /* Display VM flag*/
      set PK0PM026.PK0PM-VM-SEL-FLAG-LIT1 normal;
      set PK0PM026.PK0PM-VM-SEL-FLAG-LIT1 protect;
      set PK0PM026.PK0PM-VM-SEL-FLAG-LIT2 normal;
      set PK0PM026.PK0PM-VM-SEL-FLAG-LIT2 protect;
    end

    PK0PM026.PK0PMRMT = PK0PW01.PK0PMRMT; /* Printer*/
    PK0PM026.PK0PMDES = PK0PW01.PK0PMDES; /* Description*/

    PK0PM026.PK0PM-MAGNUM-STARTUP = "N";
    PK0PM026.PK0PM-MAGNUM-END = "N";
    PK0PM026.PK0PM-SETUP-COUNT = 0;

    if ((PK0PW01.PK0PMRMT == "RMT124" /* remote 124*/
     || PK0PW01.PK0PMRMT == "RMT50"   /* remote 50*/
     || PK0PW01.PK0PMRMT == "RMT70"   /* remote 70*/
     || PK0PW01.PK0PMRMT == "RMT80"   /* remote 80*/
     || PK0PW01.PK0PMRMT == "RMT81"   /* remote 81*/
     || PK0PW01.PK0PMRMT == "RMT82"   /* remote 82*/
     || PK0PW01.PK0PMRMT == "RMT83"   /* remote 83*/
     || PK0PW01.PK0PMRMT == "RMT125"  /* remote 125*/
     || PK0PW01.PK0PMRMT == "RMT126"  /* remote 126*/
     || PK0PW01.PK0PMRMT == "RMT127"  /* remote 127*/
     || PK0PW01.PK0PMRMT == "RMT220")) /* canada remote 220*/
      PK0PM026.PK0PM-PRINTER-TYPE = "L"; /* laser*/
    else
      if ((PK0PW01.PK0PMRMT == "RMT318" /* WILSONVILLE FC INTERMEC THERMAL*/
       || PK0PW01.PK0PMRMT == "RMT319"  /* WILSONVILLE RP INTERMEC THERMAL*/
       || PK0PW01.PK0PMRMT == "RMT425"  /* MEMF INTERMEC THERMAL*/
       || PK0PW01.PK0PMRMT == "RMT426"  /* MEMF INTERMEC THERMAL*/
       || PK0PW01.PK0PMRMT == "RMT427"  /* MEMF INTERMEC THERMAL*/
       || PK0PW01.PK0PMRMT == "RMT428"  /* MEMF INTERMEC THERMAL*/
       || PK0PW01.PK0PMRMT == "RMT429"  /* MEMA INTERMEC THERMAL*/
       || PK0PW01.PK0PMRMT == "RMT430"  /* MEMA INTERMEC THERMAL*/
       || PK0PW01.PK0PMRMT == "RMT431"  /* MEMA INTERMEC THERMAL*/
       || PK0PW01.PK0PMRMT == "RMT432"  /* MEMA INTERMEC THERMAL*/
       || PK0PW01.PK0PMRMT == "RMT434")) /* MEMA INTERMEC THERMAL*/
        PK0PM026.PK0PM-PRINTER-TYPE = "T"; /* thermal*/
      else
        PK0PM026.PK0PM-PRINTER-TYPE = "I"; /* impact*/
      end
    end

    if (PK0PW01.PK0PWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK0PW01.PK0PWMNO);
    end /* Job submitted message number*/
    PK0PW01.PK0PWMNO = 0; /* Reset message number*/

  else

    set PK0PM026 alarm; /* Indicate sound alarm*/

  end

  converse PK0PM026 ;


end // end PK0P261

// Check attention identifier
Function PK0P262()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PK0PW01.XWHCD == "42")
      PK0PW01.PK0PMSEL[22] = "C"; /* Indicate selection cancelled*/
    else
      PK0PW01.PK0PMSEL[18] = "C"; /* Indicate selection cancelled*/
    end

    set PK0PM026 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0PM026.XXXPRCNM = "PK0P262"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0P262

// Reset highlighted fields
Function PK0P263()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0PM026.PK0PMCPY initialAttributes; /* Number of copies*/
  if (PK0PW01.XWHCD == "51"
   || PK0PW01.XWHCD == "42")
    set PK0PM026.PK0PM-VM-SEL-FLAG normal; /* VM flag*/
    set PK0PM026.PK0PM-VM-SEL-FLAG-LIT1 normal;
    set PK0PM026.PK0PM-VM-SEL-FLAG-LIT1 protect;
    set PK0PM026.PK0PM-VM-SEL-FLAG-LIT2 normal;
    set PK0PM026.PK0PM-VM-SEL-FLAG-LIT2 protect;
  else
    set PK0PM026.PK0PM-VM-SEL-FLAG initialAttributes; /* VM flag*/
    set PK0PM026.PK0PM-VM-SEL-FLAG-LIT1 initialAttributes;
    set PK0PM026.PK0PM-VM-SEL-FLAG-LIT2 initialAttributes;
  end

  set PK0PM026.PK0PMSFR initialAttributes; /* Schedule FROM*/
  set PK0PM026.PK0PMSTO initialAttributes; /* Schedule TO*/

  set PK0PM026.PK0PMLFR initialAttributes; /* Lane FROM*/
  set PK0PM026.PK0PMLTO initialAttributes; /* Lane TO*/

  PK0PW01.PK0PWIXM = 1;

  while (PK0PW01.PK0PWIXM <= 5)

    set PK0PM026.PK0PMSCT[PK0PWIXM] initialAttributes; /* Starting Carton Sequence Num*/
    set PK0PM026.PK0PMECT[PK0PWIXM] initialAttributes; /* Ending Carton Sequence Num*/

    PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1;

  end

  set PK0PM026.PK0PM-PK-OUTER-SEQ-NBR-LOW initialAttributes; /* Outer carton seq*/
  set PK0PM026.PK0PM-PK-OUTER-SEQ-NBR-HIGH initialAttributes; /* nbrs low and high*/

  set PK0PM026.PK0PM-MAGNUM-STARTUP initialAttributes; /* magnum startup-flag*/
  set PK0PM026.PK0PM-MAGNUM-END initialAttributes; /* magnum end-flag*/
  set PK0PM026.PK0PM-SETUP-COUNT initialAttributes; /* number of lineup labels*/
  set PK0PM026.PK0PM-PRINTER-TYPE initialAttributes; /* laser or impact*/

end // end PK0P263

// Verify the entered data
Function PK0P264()
   /* ------------------------------------------------------------*/
   /* Verify the Schedule FROM entry.*/
   /* Verify the Schedule TO entry.*/
   /* Verify the Lane FROM entry.*/
   /* Verify the Lane TO entry.*/
   /* Verify the Carton Sequence Number.*/
   /* Verify the Outer Carton Sequence Number low and high.*/
   /* Outer Carton choice is mutually exclucive of both Lane and Carton.*/
   /* Verify the inline/VM select flag.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PK0PM026.PK0PMSFR cursor; /* set cursor*/
    PK0PM026.XXXPRCNM = "PK0P264"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  PK0PW01.PK0PWSWX = "N"; /* Info entered switch*/

  PK0PW01.PK0PWSDT = PKDREC.PKDLBLDT[1]; /* Setup date*/

  if (PK0PM026.PK0PM-PK-OUTER-SEQ-NBR-LOW is modified) /* Outer carton*/
    PK0PW01.PK0PWSWX = "Y"; /* Info entered*/

  end

  if (PK0PM026.PK0PMLFR is modified) /* Lane FROM*/
    PK0PW01.PK0PWSWX = "Y"; /* Info entered*/

  end

  if (PK0PM026.PK0PMSFR is modified) /* Schedule FROM*/
    PK0PW01.PK0PWSWX = "Y"; /* Info entered*/

  end

  if (PK0PW01.PK0PWSWX == "N") /* Info not entered*/

    set PK0PM026.PK0PMSFR cursor, bold; /* Position cursor*/
    converseLib.validationFailed(139); /* Indicate parameters required*/
    PK0PM026.XXXPRCNM = "PK0P264"; /* Process name*/

  else

     /* For Pack Stations, the allowable lane ranges are from 0001*/
     /* to 9999.  For Belt Pick, no lane ranges are allowed.*/

    if (PK0PM026.PKQTKTYP == "P") /* if pack station selected*/
      if (PK0PM026.PK0PMLTO != 0 /* if to lane entered*/
       && PK0PM026.PK0PMLFR == 0) /* and from lane not entered*/
        set PK0PM026.PK0PMLFR cursor, modified, bold; /* Highlight*/
        converseLib.validationFailed(390); /* lane must be > 0 for pack station*/
        PK0PM026.XXXPRCNM = "PK0P264"; /* Process name*/
      end
    else
      if (PK0PM026.PKQTKTYP == "B") /* if belt pick selected*/
        if (PK0PM026.PK0PMLFR != 0 /* from and to lanes cannot be entered*/
         || PK0PM026.PK0PMLTO != 0)
          set PK0PM026.PK0PMLFR cursor, modified, bold; /* Highlight*/
          set PK0PM026.PK0PMLTO cursor, modified, bold; /* Highlight*/
          converseLib.validationFailed(391); /* lane must be = 0 for belt pick*/
          PK0PM026.XXXPRCNM = "PK0P264"; /* Process name*/
        end
      end
    end
  end

   /* Outer carton mutually exclusive of both Lane and Carton Seq*/

  if (PK0PW01.XWHCD == 51 /* Warehouse 51*/
   || PK0PW01.XWHCD == 42) /* or Canada*/
    if (PK0PM026.PK0PM-PK-OUTER-SEQ-NBR-LOW != 0)
      if (PK0PM026.PK0PMSCT[1] != 0
       || PK0PM026.PK0PMSCT[2] != 0
       || PK0PM026.PK0PMSCT[3] != 0
       || PK0PM026.PK0PMSCT[4] != 0
       || PK0PM026.PK0PMSCT[5] != 0) /* Carton > 0*/
        set PK0PM026.PK0PM-PK-OUTER-SEQ-NBR-LOW modified, bold;
        if (PK0PM026.PK0PMSCT[1] != 0)
          set PK0PM026.PK0PMSCT[1] cursor, modified, bold;
        end
        if (PK0PM026.PK0PMSCT[2] != 0)
          set PK0PM026.PK0PMSCT[2] cursor, modified, bold;
        end
        if (PK0PM026.PK0PMSCT[3] != 0)
          set PK0PM026.PK0PMSCT[3] cursor, modified, bold;
        end
        if (PK0PM026.PK0PMSCT[4] != 0)
          set PK0PM026.PK0PMSCT[4] cursor, modified, bold;
        end
        if (PK0PM026.PK0PMSCT[5] != 0)
          set PK0PM026.PK0PMSCT[5] cursor, modified, bold;
        end
        converseLib.validationFailed(466);
                               /* Outer Carton exclusive of lane and*/
                               /* carton*/
        PK0PM026.XXXPRCNM = "PK0P264"; /* Process name*/
      end
      if (PK0PM026.PK0PMLFR != 0) /* Lane > 0*/
        set PK0PM026.PK0PMLFR cursor, modified, bold;
        set PK0PM026.PK0PM-PK-OUTER-SEQ-NBR-LOW modified, bold;
        converseLib.validationFailed(466);
                        /* Outer Carton exclusive of lane and*/
                                  /* carton*/
        PK0PM026.XXXPRCNM = "PK0P264"; /* Process name*/
      end
    end
  end

  if (PK0PM026.PKQTKTYP != "B" /* Belt Pick Flag*/
   && PK0PM026.PKQTKTYP != "P") /* Pack Station Flag*/

    set PK0PM026.PKQTKTYP cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(156); /* Indicate invalid flag*/
    PK0PM026.XXXPRCNM = "PK0P264"; /* Process name*/

  end

  if (PK0PM026.PK0PM-VM-SEL-FLAG == "A"  /* Apparel*/
   || PK0PM026.PK0PM-VM-SEL-FLAG == "V"  /* or VM*/
   || (PK0PM026.PK0PM-VM-SEL-FLAG == "S" /* or Single Carton*/
   && PK0PM026.PKQTKTYP == "B")          /* and Belt Pick*/
   || PK0PM026.PK0PM-VM-SEL-FLAG == "F"  /* or Fast Pick*/
   || PK0PM026.PK0PM-VM-SEL-FLAG == "Q"  /* or Quality Drive*/
   || PK0PM026.PK0PM-VM-SEL-FLAG == "B"  /* or Basics*/
   || (PK0PM026.PK0PM-VM-SEL-FLAG == "C" /* or Basics single carton*/
   && PK0PM026.PKQTKTYP == "B"))         /* and Belt Pick*/
                                  /* OK*/
  else

    set PK0PM026.PK0PM-VM-SEL-FLAG cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(342); /* Indicate invalid flag*/
    PK0PM026.XXXPRCNM = "PK0P264"; /* Process name*/

  end

  if (PK0PM026.PK0PMCPY == 0) /* Number of copies invalid*/

    set PK0PM026.PK0PMCPY cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(126); /* Indicate invalid number*/
    PK0PM026.XXXPRCNM = "PK0P264"; /* Process name*/

  end


  if (PK0PM026.PK0PM-MAGNUM-STARTUP == "Y"
   || PK0PM026.PK0PM-MAGNUM-STARTUP == "N")
     /* continue*/
  else
    set PK0PM026.PK0PM-MAGNUM-STARTUP cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(235); /* Indicate invalid number*/
    PK0PM026.XXXPRCNM = "PK0P264"; /* Process name*/
  end

  if (PK0PM026.PK0PM-MAGNUM-END == "Y"
   || PK0PM026.PK0PM-MAGNUM-END == "N")
     /* continue*/
  else
    set PK0PM026.PK0PM-MAGNUM-END cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(235); /* Indicate invalid number*/
    PK0PM026.XXXPRCNM = "PK0P264"; /* Process name*/
  end

  if (PK0PM026.PK0PM-PRINTER-TYPE == "L"
   || PK0PM026.PK0PM-PRINTER-TYPE == "I"
   || PK0PM026.PK0PM-PRINTER-TYPE == "T")
     /* continue*/
  else
    set PK0PM026.PK0PM-PRINTER-TYPE cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(342); /* Indicate invalid number*/
    PK0PM026.XXXPRCNM = "PK0P264"; /* Process name*/
  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end

end // end PK0P264

// Jcl for "51"s Carton Content
Function PK0P265()
   /* ------------------------------------------------------------*/
   /* Format the batch program parameters.*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* This is a Memphis Apparel only process (see PK0P002 for list).*/
   /* Pk0p displays 2 seperate screens for carton contents, one for*/
   /* footwear another for apparel, determined from the warehouse code.*/
   /*  */
   /* This process has been modified to give Memphis Appareal the same*/
   /* carton content labels as footwear when fullcase is selected.*/
   /* (aka belt pick).*/
   /*  */
   /* If belt pick selected (aka FC), format and submit PK0PT28,*/
   /* which will execute program PK240D.*/
   /*  */
   /* If pack station selected (aka RP), format and submit PK0PT26,*/
   /* which will execute program PK242D.*/
   /* ------------------------------------------------------------*/

   /* check the outer carton - if to < from , move from to the to*/

  if (PK0PM026.PK0PM-PK-OUTER-SEQ-NBR-HIGH < 
  PK0PM026.PK0PM-PK-OUTER-SEQ-NBR-LOW) /* Hi less than Low*/
    PK0PM026.PK0PM-PK-OUTER-SEQ-NBR-HIGH = PK0PM026.PK0PM-PK-OUTER-SEQ-NBR-LOW;
  else
    if (PK0PM026.PK0PM-PK-OUTER-SEQ-NBR-LOW == 0
     && PK0PM026.PK0PM-PK-OUTER-SEQ-NBR-HIGH != 0)
      set PK0PM026.PK0PM-PK-OUTER-SEQ-NBR-LOW cursor, bold; /* error*/
      set PK0PM026.PK0PM-PK-OUTER-SEQ-NBR-HIGH bold; /**/
      converseLib.validationFailed(146);
      PK0PM026.XXXPRCNM = "PK0P265"; /* process name*/
    end
  end

   /* check the carton - if to < from , move from to the to*/

  if (PK0PM026.PK0PMECT[1] < PK0PM026.PK0PMSCT[1]
   || PK0PM026.PK0PMECT[2] < PK0PM026.PK0PMSCT[2]
   || PK0PM026.PK0PMECT[3] < PK0PM026.PK0PMSCT[3]
   || PK0PM026.PK0PMECT[4] < PK0PM026.PK0PMSCT[4]
   || PK0PM026.PK0PMECT[5] < PK0PM026.PK0PMSCT[5]) /* TO less than FROM*/
    if (PK0PM026.PK0PMECT[1] < PK0PM026.PK0PMSCT[1])
      PK0PM026.PK0PMECT[1] = PK0PM026.PK0PMSCT[1];
    end
    if (PK0PM026.PK0PMECT[2] < PK0PM026.PK0PMSCT[2])
      PK0PM026.PK0PMECT[2] = PK0PM026.PK0PMSCT[2];
    end
    if (PK0PM026.PK0PMECT[3] < PK0PM026.PK0PMSCT[3])
      PK0PM026.PK0PMECT[3] = PK0PM026.PK0PMSCT[3];
    end
    if (PK0PM026.PK0PMECT[4] < PK0PM026.PK0PMSCT[4])
      PK0PM026.PK0PMECT[4] = PK0PM026.PK0PMSCT[4];
    end
    if (PK0PM026.PK0PMECT[5] < PK0PM026.PK0PMSCT[5])
      PK0PM026.PK0PMECT[5] = PK0PM026.PK0PMSCT[5];
    end
  else
    if (PK0PM026.PK0PMSCT[1] == 0
     && PK0PM026.PK0PMECT[1] != 0)
      set PK0PM026.PK0PMSCT[1] cursor, bold; /* error*/
      set PK0PM026.PK0PMECT[1] bold; /* no from value*/
      converseLib.validationFailed(146);
      PK0PM026.XXXPRCNM = "PK0P265"; /* process name*/
    end
    if (PK0PM026.PK0PMSCT[2] == 0
     && PK0PM026.PK0PMECT[2] != 0)
      set PK0PM026.PK0PMSCT[2] cursor, bold; /* error*/
      set PK0PM026.PK0PMECT[2] bold; /* no from value*/
      converseLib.validationFailed(146);
      PK0PM026.XXXPRCNM = "PK0P265"; /* process name*/
    end
    if (PK0PM026.PK0PMSCT[3] == 0
     && PK0PM026.PK0PMECT[3] != 0)
      set PK0PM026.PK0PMSCT[3] cursor, bold; /* error*/
      set PK0PM026.PK0PMECT[3] bold; /* no from value*/
      converseLib.validationFailed(146);
      PK0PM026.XXXPRCNM = "PK0P265"; /* process name*/
    end
    if (PK0PM026.PK0PMSCT[4] == 0
     && PK0PM026.PK0PMECT[4] != 0)
      set PK0PM026.PK0PMSCT[4] cursor, bold; /* error*/
      set PK0PM026.PK0PMECT[4] bold; /* no from value*/
      converseLib.validationFailed(146);
      PK0PM026.XXXPRCNM = "PK0P265"; /* process name*/
    end
    if (PK0PM026.PK0PMSCT[5] == 0
     && PK0PM026.PK0PMECT[5] != 0)
      set PK0PM026.PK0PMSCT[5] cursor, bold; /* error*/
      set PK0PM026.PK0PMECT[5] bold; /* no from value*/
      converseLib.validationFailed(146);
      PK0PM026.XXXPRCNM = "PK0P265"; /* process name*/
    end
  end

   /* check the lane - if to < from , move from to the to*/

  if (PK0PM026.PK0PMLTO < PK0PM026.PK0PMLFR) /* TO less than FROM*/
    PK0PM026.PK0PMLTO = PK0PM026.PK0PMLFR;
  else
    if (PK0PM026.PK0PMLFR == 0
     && PK0PM026.PK0PMLTO != 0)
      set PK0PM026.PK0PMLFR cursor, bold; /* error*/
      set PK0PM026.PK0PMLTO bold; /* no from value*/
      converseLib.validationFailed(132);
      PK0PM026.XXXPRCNM = "PK0P265"; /* process name*/
    end
  end

   /* check the schedule - if to < from , move from to the to*/

  if (PK0PM026.PK0PMSTO < PK0PM026.PK0PMSFR) /* TO less than FROM*/
    PK0PM026.PK0PMSTO = PK0PM026.PK0PMSFR;
  else
    if (PK0PM026.PK0PMSFR == 0
     && PK0PM026.PK0PMSFR != 0)
      set PK0PM026.PK0PMSFR cursor, bold; /* error*/
      set PK0PM026.PK0PMSTO bold; /* no from value*/
      converseLib.validationFailed(132);
      PK0PM026.XXXPRCNM = "PK0P265"; /* process name*/
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* If error above, get out now*/
  end

   /* ------------------------------------------------------------------**/
   /* BELT PICK - FULLCASE*/
   /* ------------------------------------------------------------------**/

  if (PK0PM026.PKQTKTYP == "B") /* if belt pick*/

    set PK0PW00 empty; /* Initialize variables work area*/
    set PK0PW28 empty; /* Initialize parameters work area*/
    PK0PW01.PK0PWSWS = "N"; /* Job submitted switch*/

    PK0PW28.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
    PK0PW00.PK0PMCPY = PK0PM026.PK0PMCPY; /* Number of copies*/
    PK0PW00.PK0PMGEN = PK0PM026.PK0PM-PRINT-GENERATION; /* gen#*/
    PK0PW00.PK0PMFS1 = "PK0P"; /* Forms code*/

    if (PK0PW28.XWHCD == "51") /* Apparel warehouse*/
      if (PK0PM026.PK0PM-VM-SEL-FLAG == "S") /* Single carton pull*/
        PK0PW00.PK0PWEXE = "PK2403"; /* Execute proc PK2403*/
      else /* Apparel warehouse*/
        if (PK0PM026.PK0PM-VM-SEL-FLAG == "B") /* Basics*/
          PK0PW00.PK0PWEXE = "PK4971"; /* Execute proc PK4971*/
        else /* Apparel warehouse*/
          if (PK0PM026.PK0PM-VM-SEL-FLAG == "C") /* Basics single carton*/
            PK0PW00.PK0PWEXE = "PK4972"; /* Execute proc PK4972*/
          else /* Apparel warehouse*/
            PK0PW00.PK0PWEXE = "PK2401"; /* Execute proc PK2401*/
          end
        end
      end
    else /* All other warehouses*/
      PK0PW00.PK0PWEXE = "PK2401"; /* Execute proc PK2401*/
    end

    if (PK0PW28.XWHCD == "51"              /* Apparel warehouse*/
     && (PK0PM026.PK0PM-VM-SEL-FLAG == "B" /* Basics*/
     || PK0PM026.PK0PM-VM-SEL-FLAG == "C")) /* Basics single carton*/
      PK0PW00.PK0PWAPP = "PK497D"; /* Execute pgm  PK497d*/
    else /* All others*/
      PK0PW00.PK0PWAPP = "PK240D"; /* Execute pgm  PK240d*/
    end

    PK0PW00.PK0PWRUN = "NORM ";

    if (PK0PM026.PK0PMSCT[1] == 0 && PK0PM026.PK0PMECT[1] == 0
     && PK0PM026.PK0PMSCT[2] == 0 && PK0PM026.PK0PMECT[2] == 0
     && PK0PM026.PK0PMSCT[3] == 0 && PK0PM026.PK0PMECT[3] == 0
     && PK0PM026.PK0PMSCT[4] == 0 && PK0PM026.PK0PMECT[4] == 0
     && PK0PM026.PK0PMSCT[5] == 0 && PK0PM026.PK0PMECT[5] == 0)
      /* all blank entries*/
      PK0P026(); /* Enque the internal reader*/

      while (PK0PW01.PK0PWSWS == "N") /* Until job is submitted*/

        PK0PW99.PK0PWJCL = PK0PT28.PK0PWJCL[PK0PWIXT];
                                   /* JCL statement*/
        PK0PW01.PK0PTTYP = PK0PT28.PK0PTTYP[PK0PWIXT];
                                   /* Statement type*/

        if (PK0PW01.PK0PTTYP == "P") /* Parameters statement*/

          if (PK0PM026.PK0PMSFR > 0 /* build the from and to sched*/
           || PK0PM026.PK0PMSTO > 0)
            PK0PW28.PK0PMSFR = PK0PM026.PK0PMSFR; /* from schedule*/
            PK0PW28.PK0PMSTO = PK0PM026.PK0PMSTO; /* to schedule*/
          else
            PK0PW28.PK0PMSFR = 0; /* from schedule*/
            PK0PW28.PK0PMSTO = 99; /* to schedule*/
          end

          PK0PW28.PK0PMSCT = 0; /* starting crtn nbr*/
          PK0PW28.PK0PMECT = 999999999; /* ending crtn nbr*/

          PK0PW28.PK0PM-PRINT-GENERATION = PK0PM026.PK0PM-PRINT-GENERATION; /* print generation*/

          if (PK0PW28.XWHCD == "51") /* Apparel warehouse*/
            if (PK0PM026.PK0PM-VM-SEL-FLAG == "V") /* Inline/VM select flag*/
              PK0PW28.XGPCD = "01"; /* VM*/
            else
              PK0PW28.XGPCD = "03"; /* Inline*/
            end
            if (PK0PM026.PK0PM-VM-SEL-FLAG == "S"
             || PK0PM026.PK0PM-VM-SEL-FLAG == "C") /* Basics single carton*/
              PK0PW28.XARCD = "01"; /* Single carton*/
            else
              PK0PW28.XARCD = "02";
            end
            if (PK0PM026.PK0PM-VM-SEL-FLAG == "F") /* Fast Pick select flag*/
              PK0PW28.PK0P-FASTPICK-FL = "Y"; /* Fast Pick*/
            else
              PK0PW28.PK0P-FASTPICK-FL = "N"; /* Non Fast Pick*/
            end
            if (PK0PM026.PK0PM-VM-SEL-FLAG == "Q")
                                   /* Quality Drive select flag*/
              PK0PW28.PK0PQDFL = "Y"; /* Quality Drive*/
            else
              PK0PW28.PK0PQDFL = "N"; /* Non Quality Drive*/
            end
          end

          if (PK0PW28.XWHCD == "42") /* Canada*/
            if (PK0PM026.PK0PM-VM-SEL-FLAG == "V") /* Inline/VM select flag*/
              PK0PW28.XGPCD = "01"; /* VM*/
            else
              PK0PW28.XGPCD = "03"; /* Apparel*/
            end
          end

          PK0PW28.XBCCD = "01";

          PK0PM-SUBMIT-FLAG = "O";

          PK0PW28.PK0PM-MAGNUM-STARTUP = PK0PM026.PK0PM-MAGNUM-STARTUP;

          PK0PW28.PK0PM-MAGNUM-END = PK0PM026.PK0PM-MAGNUM-END;

          PK0PW28.PK0PM-SETUP-COUNT = PK0PM026.PK0PM-SETUP-COUNT;

          PK0PW28.PK0PM-PRINTER-TYPE = PK0PM026.PK0PM-PRINTER-TYPE;

          PK0PW00.PK0PWJCL = PK0PW28.PK0PWJCL; /* Control card*/

          PK0P027(); /* Write to the internal reader*/

        else

          PK0P027(); /* Write to the internal reader*/

        end

      end

      PK0P028(); /* Deque the internal reader*/
    else

      PK0PW01.PK0PWIXM = 1;

      while (PK0PW01.PK0PWIXM <= 5) /* until all entries are processed*/

        PK0PW01.PK0PWSWS = "N";

        if (PK0PM026.PK0PMSCT[PK0PWIXM] > 0
         || PK0PM026.PK0PMECT[PK0PWIXM] > 0)
                                   /* submit jobs for non blank entries*/

          PK0P026(); /* Enque the internal reader*/

          while (PK0PW01.PK0PWSWS == "N") /* Until job is submitted*/

            PK0PW99.PK0PWJCL = PK0PT28.PK0PWJCL[PK0PWIXT];
                                   /* JCL statement*/
            PK0PW01.PK0PTTYP = PK0PT28.PK0PTTYP[PK0PWIXT];
                                   /* Statement type*/

            if (PK0PW01.PK0PTTYP == "P") /* Parameters statement*/

              if (PK0PM026.PK0PMSFR > 0 /* build the from and to sched*/
               || PK0PM026.PK0PMSTO > 0)
                PK0PW28.PK0PMSFR = PK0PM026.PK0PMSFR; /* from schedule*/
                PK0PW28.PK0PMSTO = PK0PM026.PK0PMSTO; /* to schedule*/
              else
                PK0PW28.PK0PMSFR = 0; /* from schedule*/
                PK0PW28.PK0PMSTO = 99; /* to schedule*/
              end

              if (PK0PM026.PK0PMSCT[PK0PWIXM] > 0
               /* build from and to carton*/
               || PK0PM026.PK0PMECT[PK0PWIXM] > 0)
                PK0PW28.PK0PMSCT = PK0PM026.PK0PMSCT[PK0PWIXM];
                              /* starting crtn nbr*/
                PK0PW28.PK0PMECT = PK0PM026.PK0PMECT[PK0PWIXM];
                                /* ending crtn nbr*/
              else
                PK0PW28.PK0PMSCT = 0; /* starting crtn nbr*/
                PK0PW28.PK0PMECT = 999999999; /* ending crtn nbr*/
              end

              PK0PW28.PK0PM-PRINT-GENERATION = PK0PM026.PK0PM-PRINT-GENERATION; /* print generation*/

              if (PK0PW28.XWHCD == "51") /* Apparel warehouse*/
                if (PK0PM026.PK0PM-VM-SEL-FLAG == "V")
                                   /* Inline/VM select flag*/
                  PK0PW28.XGPCD = "01"; /* VM*/
                else
                  PK0PW28.XGPCD = "03"; /* Inline*/
                end
                if (PK0PM026.PK0PM-VM-SEL-FLAG == "S"
                 || PK0PM026.PK0PM-VM-SEL-FLAG == "C")
                                   /* Basics single carton*/
                  PK0PW28.XARCD = "01"; /* Single carton*/
                else
                  PK0PW28.XARCD = "02";
                end
                if (PK0PM026.PK0PM-VM-SEL-FLAG == "F")
                                   /* Fast Pick select flag*/
                  PK0PW28.PK0P-FASTPICK-FL = "Y"; /* Fast Pick*/
                else
                  PK0PW28.PK0P-FASTPICK-FL = "N"; /* Non Fast Pick*/
                end
                if (PK0PM026.PK0PM-VM-SEL-FLAG == "Q")
                                   /* Quality Drive select flag*/
                  PK0PW28.PK0PQDFL = "Y"; /* Quality Drive*/
                else
                  PK0PW28.PK0PQDFL = "N"; /* Non Quality Drive*/
                end
              end

              if (PK0PW28.XWHCD == "42") /* Canada*/
                if (PK0PM026.PK0PM-VM-SEL-FLAG == "V")
                                   /* Inline/VM select flag*/
                  PK0PW28.XGPCD = "01"; /* VM*/
                else
                  PK0PW28.XGPCD = "03"; /* Apparel*/
                end
              end

              PK0PW28.XBCCD = "01";

              PK0PM-SUBMIT-FLAG = "O";

              PK0PW28.PK0PM-MAGNUM-STARTUP = PK0PM026.PK0PM-MAGNUM-STARTUP;

              PK0PW28.PK0PM-MAGNUM-END = PK0PM026.PK0PM-MAGNUM-END;

              PK0PW28.PK0PM-SETUP-COUNT = PK0PM026.PK0PM-SETUP-COUNT;

              PK0PW28.PK0PM-PRINTER-TYPE = PK0PM026.PK0PM-PRINTER-TYPE;

              PK0PW00.PK0PWJCL = PK0PW28.PK0PWJCL; /* Control card*/

              PK0P027(); /* Write to the internal reader*/

            else

              PK0P027(); /* Write to the internal reader*/

            end

          end

          PK0P028(); /* Deque the internal reader*/

        end

        PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1;

      end

    end

    PK0PW01.PK0PWMNO = 372; /* Job was submitted*/
    if (PK0PW01.XWHCD == 42) /* Canada*/
      PK0PW01.PK0PMSEL[22] = "*"; /* Indicate function completed*/
    else
      PK0PW01.PK0PMSEL[18] = "*"; /* Indicate function completed*/
    end

    set PK0PM026 initial; /* Clear map output area*/

    return; /* return to caller, all done.*/
  end

   /* ------------------------------------------------------------------**/
   /* PACK STATION - REPACK*/
   /* ------------------------------------------------------------------**/

  if (PK0PM026.PKQTKTYP == "P") /* Pack station*/
    PK0PW00.PK0PWCTP = "PS";
    set PK0PW00 empty; /* Initialize variables work area*/
    set PK0PW26 empty; /* Initialize parameters work area*/
    PK0PW01.PK0PWSWS = "N"; /* Job submitted switch*/

    PK0PW26.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
    PK0PW00.PK0PMCPY = PK0PM026.PK0PMCPY; /* Number of copies*/

  end

  PK0PW26.PK0PWPRN = "N";
  PK0PW00.PK0PWRUN = "NORM ";

  if (PK0PM026.PK0PM-VM-SEL-FLAG == "B") /* Basics*/
    PK0PW00.PK0PWEXE = "PK4981"; /* Execute proc PK4981*/
    PK0PW00.PK0PWAPP = "PK498D"; /* Execute pgm  PK498D*/
  else
    PK0PW00.PK0PWEXE = "PK2421"; /* Execute proc PK2421*/
    PK0PW00.PK0PWAPP = "PK242D"; /* Execute pgm  PK242D*/
  end

  if (PK0PM026.PK0PMSCT[1] == 0 && PK0PM026.PK0PMECT[1] == 0
   && PK0PM026.PK0PMSCT[2] == 0 && PK0PM026.PK0PMECT[2] == 0
   && PK0PM026.PK0PMSCT[3] == 0 && PK0PM026.PK0PMECT[3] == 0
   && PK0PM026.PK0PMSCT[4] == 0 && PK0PM026.PK0PMECT[4] == 0
   && PK0PM026.PK0PMSCT[5] == 0 && PK0PM026.PK0PMECT[5] == 0)
      /* all blank entries*/
    PK0P026(); /* Enque the internal reader*/

    while (PK0PW01.PK0PWSWS == "N") /* Until job is submitted*/
      PK0PW99.PK0PWJCL = PK0PT26.PK0PWJCL[PK0PWIXT]; /* JCL statement*/
      PK0PW01.PK0PTTYP = PK0PT26.PK0PTTYP[PK0PWIXT]; /* Statement type*/

      if (PK0PW01.PK0PTTYP == "P") /* Parameters statement*/

           /* build the to and from outer cartons*/
        if (PK0PM026.PK0PM-PK-OUTER-SEQ-NBR-LOW > 0)
          PK0PW26.PK0PM-PK-OUTER-SEQ-NBR-LOW = PK0PM026.PK0PM-PK-OUTER-SEQ-NBR-LOW;
          PK0PW26.PK0PM-PK-OUTER-SEQ-NBR-HIGH = PK0PM026.PK0PM-PK-OUTER-SEQ-NBR-HIGH;
        else
          PK0PW26.PK0PM-PK-OUTER-SEQ-NBR-LOW = 0;
          PK0PW26.PK0PM-PK-OUTER-SEQ-NBR-HIGH = 999999999;
        end

        PK0PW26.PK0PMSCT = 0; /* from carton*/
        PK0PW26.PK0PMECT = 999999999; /* to carton*/

        if (PK0PM026.PK0PMSFR > 0 /* build the from and to sched*/
         || PK0PM026.PK0PMSTO > 0)
          PK0PW26.PK0PMSFR = PK0PM026.PK0PMSFR; /* from schedule*/
          PK0PW26.PK0PMSTO = PK0PM026.PK0PMSTO; /* to schedule*/
        else
          PK0PW26.PK0PMSFR = 0; /* from schedule*/
          PK0PW26.PK0PMSTO = 99; /* to schedule*/
        end

        if (PK0PM026.PKQTKTYP == "P") /* if pack station*/
          if (PK0PM026.PK0PMLFR > 0) /* if from lane > zero*/
            PK0PW26.PK0PMLFR = PK0PM026.PK0PMLFR; /* from lane*/
            PK0PW26.PK0PMLTO = PK0PM026.PK0PMLTO; /* to lane*/
          else
            if (PK0PW26.XWHCD == "42")
              PK0PW26.PK0PMLFR = 0; /* move 0 to from lane*/
            else
              PK0PW26.PK0PMLFR = 1; /* move 1 to from lane*/
            end
            PK0PW26.PK0PMLTO = 9999; /* move 9999 to to lane*/
          end
        end

        PK0PW26.PKQTKTYP = PK0PM026.PKQTKTYP; /* pick type*/

        PK0PW26.PK0PM-PRINT-GENERATION = PK0PM026.PK0PM-PRINT-GENERATION; /* print generation*/

        if (PK0PW26.XWHCD == "51") /* Apparel warehouse*/
          if (PK0PM026.PK0PM-VM-SEL-FLAG == "V") /* Inline/VM select flag*/
            PK0PW26.XGPCD = "01"; /* VM*/
          else
            PK0PW26.XGPCD = "03"; /* Inline*/
          end
          if (PK0PM026.PK0PM-VM-SEL-FLAG == "F") /* Fast Pick select flag*/
            PK0PW26.PK0P-FASTPICK-FL = "Y"; /* Fast Pick*/
          else
            PK0PW26.PK0P-FASTPICK-FL = "N"; /* Non Fast Pick*/
          end
          if (PK0PM026.PK0PM-VM-SEL-FLAG == "Q") /* Quality Drive select flag*/
            PK0PW26.PK0PQDFL = "Y"; /* Quality Drive*/
          else
            PK0PW26.PK0PQDFL = "N"; /* Non Quality Drive*/
          end
        end

        if (PK0PW26.XWHCD == "42") /* Canada*/
          if (PK0PM026.PK0PM-VM-SEL-FLAG == "V") /* Inline/VM select flag*/
            PK0PW26.XGPCD = "01"; /* VM*/
          else
            PK0PW26.XGPCD = "03"; /* Apparel*/
          end
        end

        PK0PW26.PK0PM-MAGNUM-STARTUP = PK0PM026.PK0PM-MAGNUM-STARTUP; /* mag startup flag*/

        PK0PW26.PK0PM-MAGNUM-END = PK0PM026.PK0PM-MAGNUM-END; /* mag end     flag*/

        PK0PW26.PK0PM-SETUP-COUNT = PK0PM026.PK0PM-SETUP-COUNT; /* nbr of lineup labels*/

        PK0PW26.PK0PM-PRINTER-TYPE = PK0PM026.PK0PM-PRINTER-TYPE; /* impact or laser*/

        PK0PW00.PK0PWJCL = PK0PW26.PK0PWJCL; /* Report parameters*/

        PK0P027(); /* Write to the internal reader*/

      else

        PK0P027(); /* Write to the internal reader*/

      end

    end

    PK0P028(); /* Deque the internal reader*/

  else

    PK0PW01.PK0PWIXM = 1;

    while (PK0PW01.PK0PWIXM <= 5) /* until all 5 entries are processed*/

      PK0PW01.PK0PWSWS = "N";

      if (PK0PM026.PK0PMSCT[PK0PWIXM] > 0
       || PK0PM026.PK0PMECT[PK0PWIXM] > 0)
                                   /* /submit job for non blank entries*/

        PK0P026(); /* Enque the internal reader*/

        while (PK0PW01.PK0PWSWS == "N") /* Until job is submitted*/
          PK0PW99.PK0PWJCL = PK0PT26.PK0PWJCL[PK0PWIXT];
                                   /* JCL statement*/
          PK0PW01.PK0PTTYP = PK0PT26.PK0PTTYP[PK0PWIXT];
                                   /* Statement type*/

          if (PK0PW01.PK0PTTYP == "P") /* Parameters statement*/

            /* build the to and from outer cartons*/
            if (PK0PM026.PK0PM-PK-OUTER-SEQ-NBR-LOW > 0)
              PK0PW26.PK0PM-PK-OUTER-SEQ-NBR-LOW = PK0PM026.PK0PM-PK-OUTER-SEQ-NBR-LOW;
              PK0PW26.PK0PM-PK-OUTER-SEQ-NBR-HIGH = PK0PM026.PK0PM-PK-OUTER-SEQ-NBR-HIGH;
            else
              PK0PW26.PK0PM-PK-OUTER-SEQ-NBR-LOW = 0;
              PK0PW26.PK0PM-PK-OUTER-SEQ-NBR-HIGH = 999999999;
            end

            if (PK0PM026.PK0PMSCT[PK0PWIXM] > 0
             /* build the from and to carton*/
             || PK0PM026.PK0PMECT[PK0PWIXM] > 0)
              PK0PW26.PK0PMSCT = PK0PM026.PK0PMSCT[PK0PWIXM];
                                   /* from carton*/
              PK0PW26.PK0PMECT = PK0PM026.PK0PMECT[PK0PWIXM];
                                   /* to carton*/
            else
              PK0PW26.PK0PMSCT = 0; /* from carton*/
              PK0PW26.PK0PMECT = 999999999; /* to carton*/
            end

            if (PK0PM026.PK0PMSFR > 0 /* build the from and to sched*/
             || PK0PM026.PK0PMSTO > 0)
              PK0PW26.PK0PMSFR = PK0PM026.PK0PMSFR; /* from schedule*/
              PK0PW26.PK0PMSTO = PK0PM026.PK0PMSTO; /* to schedule*/
            else
              PK0PW26.PK0PMSFR = 0; /* from schedule*/
              PK0PW26.PK0PMSTO = 99; /* to schedule*/
            end

            if (PK0PM026.PKQTKTYP == "P") /* if pack station*/
              if (PK0PM026.PK0PMLFR > 0) /* if from lane > zero*/
                PK0PW26.PK0PMLFR = PK0PM026.PK0PMLFR; /* from lane*/
                PK0PW26.PK0PMLTO = PK0PM026.PK0PMLTO; /* to lane*/
              else
                if (PK0PW26.XWHCD == "42")
                  PK0PW26.PK0PMLFR = 0; /* move 1 to 'from' lane*/
                else
                  PK0PW26.PK0PMLFR = 1; /* move 1 to 'from' lane*/
                end
                PK0PW26.PK0PMLTO = 9999; /* move 9999 to 'to' lane*/
              end
            end

            PK0PW26.PKQTKTYP = PK0PM026.PKQTKTYP; /* pick type*/

            PK0PW26.PK0PM-PRINT-GENERATION = PK0PM026.PK0PM-PRINT-GENERATION; /* print generation*/

            if (PK0PW26.XWHCD == "51") /* Apparel warehouse*/
              if (PK0PM026.PK0PM-VM-SEL-FLAG == "V") /* Inline/VM select flag*/
                PK0PW26.XGPCD = "01"; /* VM*/
              else
                PK0PW26.XGPCD = "03"; /* Inline*/
              end
              if (PK0PM026.PK0PM-VM-SEL-FLAG == "F") /* Fast Pick select flag*/
                PK0PW26.PK0P-FASTPICK-FL = "Y"; /* Fast Pick*/
              else
                PK0PW26.PK0P-FASTPICK-FL = "N"; /* Non Fast Pick*/
              end
              if (PK0PM026.PK0PM-VM-SEL-FLAG == "Q")
                                   /* Quality Drive select flag*/
                PK0PW26.PK0PQDFL = "Y"; /* Quality Drive*/
              else
                PK0PW26.PK0PQDFL = "N"; /* Non Quality Drive*/
              end
            end

            if (PK0PW26.XWHCD == "42") /* Canada*/
              if (PK0PM026.PK0PM-VM-SEL-FLAG == "V") /* Inline/VM select flag*/
                PK0PW26.XGPCD = "01"; /* VM*/
              else
                PK0PW26.XGPCD = "03"; /* Apparel*/
              end
            end

            PK0PW26.PK0PM-MAGNUM-STARTUP = PK0PM026.PK0PM-MAGNUM-STARTUP; /* mag startup flag*/

            PK0PW26.PK0PM-MAGNUM-END = PK0PM026.PK0PM-MAGNUM-END; /* mag end     flag*/

            PK0PW26.PK0PM-SETUP-COUNT = PK0PM026.PK0PM-SETUP-COUNT; /* nbr of lineup labels*/

            PK0PW26.PK0PM-PRINTER-TYPE = PK0PM026.PK0PM-PRINTER-TYPE; /* impact or laser*/

            PK0PW00.PK0PWJCL = PK0PW26.PK0PWJCL; /* Report parameters*/

            PK0P027(); /* Write to the internal reader*/

          else

            PK0P027(); /* Write to the internal reader*/

          end

        end

        PK0P028(); /* Deque the internal reader*/

      end

      PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1;

    end

  end

  PK0PW01.PK0PWMNO = 372; /* Job was submitted*/
  if (PK0PW01.XWHCD == 42) /* Canada*/
    PK0PW01.PK0PMSEL[22] = "*"; /* Indicate function completed*/
  else
    PK0PW01.PK0PMSEL[18] = "*"; /* Indicate function completed*/
  end


  set PK0PM026 initial; /* Clear map output area*/

end // end PK0P265

// Packing List Request
Function PK0P270()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  PK0P271(); /* Format and display the map*/

  PK0P272(); /* Check attention identifier*/

  PK0P273(); /* Reset fields to normal intensity*/

  PK0P274(); /* Verify the entered data*/

  PK0P275(); /* Process valid input request*/


end // end PK0P270

// Format and display the map
Function PK0P271()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (PK0PW01.XWHCD != "51") /* Not apparel warehouse*/
    set PK0PM027.PK0PM-VM-SEL-FLAG initialAttributes; /* Hide VM flag*/
    set PK0PM027.PK0PM-VM-SEL-FLAG-LIT1 initialAttributes;
    set PK0PM027.PK0PM-VM-SEL-FLAG-LIT2 initialAttributes;
    PK0PM027.PK0PM-VM-SEL-FLAG = "A"; /* Initialize VM flag*/
  end

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    PK0PM027.XXXRVNBR = PK0PW01.XXXRVNBR; /* Revision number*/

    PK0PM027.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    PK0PM027.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
    PK0PM027.XBCCD = PK0PW01.XBCCD; /* Brand code*/
    PK0PM027.XBCDESC = PK0PW01.XBCDESC;

    PK0PM027.PK0PM-PRNT-FLAG = "P"; /* Initialize print flag*/

    if (PK0PM027.PK0PM-VM-SEL-FLAG <= " ")
      PK0PM027.PK0PM-VM-SEL-FLAG = "A"; /* Initialize VM flag*/
    end

    if (PK0PW01.XWHCD == "51") /* Apparel warehouse*/
      set PK0PM027.PK0PM-VM-SEL-FLAG normal; /* Display VM flag*/
      set PK0PM027.PK0PM-VM-SEL-FLAG-LIT1 normal;
      set PK0PM027.PK0PM-VM-SEL-FLAG-LIT1 protect;
      set PK0PM027.PK0PM-VM-SEL-FLAG-LIT2 normal;
      set PK0PM027.PK0PM-VM-SEL-FLAG-LIT2 protect;
    end

    PK0PM027.PK0PMRMT = PK0PW01.PK0PMRMT; /* Printer*/
    PK0PM027.PK0PMDES = PK0PW01.PK0PMDES; /* Description*/

    PK0PM027.PK0PM-MAGNUM-STARTUP = "N";
    PK0PM027.PK0PM-MAGNUM-END = "N";
    PK0PM027.PK0PM-SETUP-COUNT = 0;

    if (PK0PW01.PK0PWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK0PW01.PK0PWMNO);
    end /* Job submitted message number*/
    PK0PW01.PK0PWMNO = 0; /* Reset message number*/

    if (PK0PM027.XBCCD != "08")
      PK0PM027.XBCCD = "*";
      PK0PM027.XBCDESC = "ALL EXCEPT COLE HAAN";
      converseLib.validationFailed(421); /* cole HAAN 'I' msg*/
      PK0PM026.XXXPRCNM = "PK0P271";
    end

  else

    set PK0PM027 alarm; /* Indicate sound alarm*/

  end

  converse PK0PM027 ;


end // end PK0P271

// Check attention identifier
Function PK0P272()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PK0PW01.PK0PMSEL[19] = "C"; /* Indicate selection cancelled*/

    set PK0PM027 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0PM027.XXXPRCNM = "PK0P272"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0P272

// Reset highlighted fields
Function PK0P273()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/


  set PK0PM027.PK0PMCPY initialAttributes; /* Number of copies*/

  set PK0PM027.XBCCD initialAttributes; /* brand code*/
  if (PK0PW01.XWHCD == "51")
    set PK0PM027.PK0PM-VM-SEL-FLAG normal; /* VM flag*/
    set PK0PM027.PK0PM-VM-SEL-FLAG-LIT1 normal;
    set PK0PM027.PK0PM-VM-SEL-FLAG-LIT1 protect;
    set PK0PM027.PK0PM-VM-SEL-FLAG-LIT2 normal;
    set PK0PM027.PK0PM-VM-SEL-FLAG-LIT2 protect;
  else
    set PK0PM027.PK0PM-VM-SEL-FLAG initialAttributes; /* VM flag*/
    set PK0PM027.PK0PM-VM-SEL-FLAG-LIT1 initialAttributes;
    set PK0PM027.PK0PM-VM-SEL-FLAG-LIT2 initialAttributes;
  end

  set PK0PM027.PK0PM-PRINT-GENERATION initialAttributes; /* Print generation*/
  set PK0PM027.PK0PM-PRNT-FLAG initialAttributes; /* P9012 or Zebra print option*/
  set PK0PM027.PK0PMLNF initialAttributes; /* Packing Lane FROM*/
  set PK0PM027.PK0PMLNT initialAttributes; /* Packing Lane TO*/
  set PK0PM027.PK0PMSFR initialAttributes; /* schedule FROM*/
  set PK0PM027.PK0PMSTO initialAttributes; /* schedule TO*/
  set PK0PM027.PK0PM-BILL-OF-LADING-FROM initialAttributes; /* bill of lading FROM*/
  set PK0PM027.PK0PM-BILL-OF-LADING-TO initialAttributes; /* bill of lading TO*/

  set PK0PM027.PK0PM-MAGNUM-STARTUP initialAttributes; /* magnum startup-flag*/
  set PK0PM027.PK0PM-MAGNUM-END initialAttributes; /* magnum end-flag*/
  set PK0PM027.PK0PM-SETUP-COUNT initialAttributes; /* number of lineup labels*/

  PK0PW01.PK0PWIXM = 1; /* Initialize map index*/

  while (PK0PW01.PK0PWIXM <= 5) /* Until all are reset*/
    set PK0PM027.PK0PMPFR[PK0PWIXM] initialAttributes; /* from packing list*/
    set PK0PM027.PK0PMPTO[PK0PWIXM] initialAttributes; /* to packing list*/

    PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* Increment index*/

  end

end // end PK0P273

// Verify the entered data
Function PK0P274()
   /* ------------------------------------------------------------*/
   /* Verify the Schedule FROM entry.*/
   /* Verify the Schedule TO entry.*/
   /* Verify the Bill of Lading FROM entry.*/
   /* Verify the Bill of Lading TO entry.*/
   /* Verify the Packing List FROM entry.*/
   /* Verify the Packing List TO entry.*/
   /* Verify the inline/VM select flag.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PK0PM027.PK0PMLNF cursor; /* set cursor*/
    PK0PM027.XXXPRCNM = "PK0P274"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  PK0PW01.PK0PWSWX = "N"; /* Initialize info entered switch*/
  PK0PW01.PK0PW-PL-NBR-SW = "N"; /* Initialize specific p/l# switch*/
  PK0PW01.PK0PW-PK-BOL-SW = "N"; /* Initialize specific bol# switch*/

  if (PK0PM027.XBCCD != " "
   && PK0PM027.XBCCD != PKWREC.XBCCD)
    PKWREC.XBCCD = PK0PM027.XBCCD;
    PK0PS12(); /* validate brand code*/
    if (converseVar.validationMsgNum == 0)
      PK0PM027.XBCDESC = PK0PW01.XBCDESC;
    else
      set PK0PM027.XBCCD cursor, bold; /* set cursor*/
      PK0PM027.XXXPRCNM = "PK0P274"; /* Process name*/
      exit stack; /* Exit to redisplay map*/
    end
  end

  if (PK0PM027.PK0PMCPY == 0) /* Number of copies invalid*/

    set PK0PM027.PK0PMCPY cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(126); /* Indicate invalid number*/
    PK0PM027.XXXPRCNM = "PK0P274"; /* Process name*/

  end

  PK0PW01.PK0PWSDT = PKDREC.PKDLBLDT[1]; /* Setup date*/

  if ((PK0PM027.PK0PMPFR[1] > 0 && PK0PM027.PK0PMPFR[1] <= 999999)
   || (PK0PM027.PK0PMPFR[2] > 0 && PK0PM027.PK0PMPFR[2] <= 999999)
   || (PK0PM027.PK0PMPFR[3] > 0 && PK0PM027.PK0PMPFR[3] <= 999999)
   || (PK0PM027.PK0PMPFR[4] > 0 && PK0PM027.PK0PMPFR[4] <= 999999)
   || (PK0PM027.PK0PMPFR[5] > 0 && PK0PM027.PK0PMPFR[5] <= 999999))
    PK0PW01.PK0PWSWX = "Y"; /* pack list from Info entered*/
    PK0PW01.PK0PW-PL-NBR-SW = "Y"; /* specific p/l# entered*/
  else
    if (PK0PM027.PK0PMSFR > 0 /* schedule from*/
     && PK0PM027.PK0PMSFR <= 99)
      PK0PW01.PK0PWSWX = "Y"; /* Info entered*/
    else
      if (PK0PM027.PK0PMLNF > 0 /* lane from*/
       && PK0PM027.PK0PMLNT <= 9999)
        PK0PW01.PK0PWSWX = "Y"; /* Info entered*/
      else
        if (PK0PM027.PK0PM-BILL-OF-LADING-FROM > 0 /* BOL from&to*/
         && PK0PM027.PK0PM-BILL-OF-LADING-TO <= 9999999999999)
          PK0PW01.PK0PWSWX = "Y"; /* Info entered*/
          PK0PW01.PK0PW-PK-BOL-SW = "Y"; /* specific bol# entered*/
        end
      end
    end
  end

  if (PK0PW01.PK0PWSWX == "N") /* No info entered*/

    set PK0PM027.PK0PMPFR[1] cursor, bold; /* Position cursor*/
    set PK0PM027.PK0PMLNF bold; /* bright*/
    set PK0PM027.PK0PMSFR bold; /* bright*/
    set PK0PM027.PK0PM-BILL-OF-LADING-FROM bold;
    converseLib.validationFailed(139); /* Indicate parameters required*/
    PK0PM027.XXXPRCNM = "PK0P274"; /* Process name*/

  else

    if (PK0PM027.PK0PMSTO < PK0PM027.PK0PMSFR) /* TO less than FROM*/
      PK0PM027.PK0PMSTO = PK0PM027.PK0PMSFR;
    end

    if (PK0PM027.PK0PMLNT < PK0PM027.PK0PMLNF) /* TO less than FROM*/
      PK0PM027.PK0PMLNT = PK0PM027.PK0PMLNF;
    end

    PK0PW01.PK0PWIXM = 1; /* initialise map index*/

    while (PK0PW01.PK0PWIXM <= 5) /* for all pack lists*/

      if (PK0PM027.PK0PMPTO[PK0PWIXM]
       < PK0PM027.PK0PMPFR[PK0PWIXM]) /* TO less than FROM*/
        PK0PM027.PK0PMPTO[PK0PWIXM] = PK0PM027.PK0PMPFR[PK0PWIXM];
      end

      PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* increment index*/

    end

    if (PK0PM027.PK0PM-BILL-OF-LADING-TO
     < PK0PM027.PK0PM-BILL-OF-LADING-FROM)
      PK0PM027.PK0PM-BILL-OF-LADING-TO = PK0PM027.PK0PM-BILL-OF-LADING-FROM;
    end

  end

  if (PK0PM027.PK0PM-PRINT-GENERATION == "+0" /* Print generation*/
   || PK0PM027.PK0PM-PRINT-GENERATION == "-1" 
   || PK0PM027.PK0PM-PRINT-GENERATION == "-2")
     /* continue*/
  else
    set PK0PM027.PK0PM-PRINT-GENERATION cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(117); /* Indicate invalid number*/
    PK0PM027.XXXPRCNM = "PK0P274"; /* Process name*/
  end

  if (PK0PM027.PK0PM-PRNT-FLAG == "P")
   /* OR PK0PM027.PK0PM-PRNT-FLAG = 'Z'; /* disabled zebra*/

  else
    converseLib.validationFailed(416);
    set PK0PM027.PK0PM-PRNT-FLAG cursor, bold; /* Highlight error.*/
  end

  if (PK0PM027.PK0PM-SINGLE-MULTI-FLAG == "S" /* SINGLE CARTON PROCESS*/
   || PK0PM027.PK0PM-SINGLE-MULTI-FLAG == "M" /* MULTI CARTON PROCESS*/
   || PK0PM027.PK0PM-SINGLE-MULTI-FLAG == "B") /* PROCESS BOTH*/
     /* continue*/
  else
    set PK0PM027.PK0PM-SINGLE-MULTI-FLAG cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(340); /* Indicate invalid number*/
    PK0PM027.XXXPRCNM = "PK0P274"; /* Process name*/
  end

  if (PK0PM027.PK0PM-VM-SEL-FLAG == "A" /* Apparel*/
   || PK0PM027.PK0PM-VM-SEL-FLAG == "V" /* or VM*/
   || PK0PM027.PK0PM-VM-SEL-FLAG == "Q" /* or Quality Drive*/
   || PK0PM027.PK0PM-VM-SEL-FLAG == "B") /* or Basics*/
     /* continue*/
  else
    set PK0PM027.PK0PM-VM-SEL-FLAG cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(342); /* Indicate invalid number*/
    PK0PM027.XXXPRCNM = "PK0P274"; /* Process name*/
  end

  if (PK0PM027.PK0PM-VM-SEL-FLAG == "B") /* or Basics*/
    if (PK0PM027.XWHCD == "51") /* Apparel warehouse*/
       /* continue*/
    else
      set PK0PM027.PK0PM-VM-SEL-FLAG cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(342); /* Indicate invalid number*/
      PK0PM027.XXXPRCNM = "PK0P274"; /* Process name*/
    end
  end

  if (PK0PM027.PK0PM-MAGNUM-STARTUP == "Y"
   || PK0PM027.PK0PM-MAGNUM-STARTUP == "N")
     /* continue*/
  else
    set PK0PM027.PK0PM-MAGNUM-STARTUP cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(235); /* Indicate invalid number*/
    PK0PM027.XXXPRCNM = "PK0P274"; /* Process name*/
  end

  if (PK0PM027.PK0PM-MAGNUM-END == "Y"
   || PK0PM027.PK0PM-MAGNUM-END == "N")
     /* continue*/
  else
    set PK0PM027.PK0PM-MAGNUM-END cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(235); /* Indicate invalid number*/
    PK0PM027.XXXPRCNM = "PK0P274"; /* Process name*/
  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end PK0P274

// JCL for FTWR Carton Content
Function PK0P275()
   /* ------------------------------------------------------------*/
   /* Format the batch program parameters.*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set PK0PW00 empty; /* Initialize variables work area*/
  set PK0PW27 empty; /* Initialize parameters work area*/
  PK0PW00.PK0PWRUN = "AFTER"; /* Type of picking run.*/
  PK0PW00.PK0PMCPY = PK0PM027.PK0PMCPY; /* Number of copies*/
  PK0PW00.PK0PMGEN = PK0PM027.PK0PM-PRINT-GENERATION; /* gen#*/

  if (PK0PM027.XBCCD == "08") /* Cole Haan*/
    if (PK0PM027.PK0PM-PRNT-FLAG == "P") /* P = MAGNUM*/
      if (PK0PW01.PK0PW-PL-NBR-SW == "Y")
                                   /* Specific packlist range entered.*/
        PK0PW00.PK0PWEXE = "PK1592"; /* Execute proc PK1592*/
      else
        if (PK0PW01.PK0PW-PK-BOL-SW == "Y")
                                   /* Specific bill of lading entered.*/
          PK0PW00.PK0PWEXE = "PK1596"; /* Execute proc PK1596*/
        else
          if (PK0PM027.PK0PM-SINGLE-MULTI-FLAG == "M") /* MULTI*/
            PK0PW00.PK0PWEXE = "PK1593"; /* Execute proc PK1593*/
          end
          if (PK0PM027.PK0PM-SINGLE-MULTI-FLAG == "S") /* SINGLE*/
            PK0PW00.PK0PWEXE = "PK1594"; /* Execute proc PK1594*/
          end
          if (PK0PM027.PK0PM-SINGLE-MULTI-FLAG == "B") /* BOTH*/
            PK0PW00.PK0PWEXE = "PK1595"; /* Execute proc PK1595*/
          end
        end
      end
    end
   /* IF PK0PM027.PK0PM-PRNT-FLAG = 'Z';*/
   /* Zebra or other printer type of the future*/
   /* IF PK0PW01.PK0PWSWN EQ 'Y';  /* Specific packlist range entered.*/
   /* IF PK0PM027.PK0PM-SINGLE-MULTI-FLAG = 'B';/* BOTH*/
   /* MOVE 'PK4813' TO PK0PW00.PK0PWEXE;/* Execute proc PK4813*/
   /* END;*/
  end

  if (PK0PM027.XBCCD != "08") /* NIKE*/
    if (PK0PM027.PK0PM-PRNT-FLAG == "P") /* P = MAGNUM*/
      if (PK0PW01.PK0PW-PL-NBR-SW == "Y")
                                   /* Specific packlist range entered.*/
        if (PK0PM027.PK0PM-VM-SEL-FLAG == "B") /* Basics*/
          PK0PW00.PK0PWEXE = "PK4994"; /* Execute proc PK4994*/
        else
          PK0PW00.PK0PWEXE = "PK4202"; /* Execute proc PK4202*/
        end
      else
        if (PK0PW01.PK0PW-PK-BOL-SW == "Y")
                                   /* Specific bill of lading entered.*/
          if (PK0PM027.PK0PM-VM-SEL-FLAG == "B") /* Basics*/
            PK0PW00.PK0PWEXE = "PK4995"; /* Execute proc PK4995*/
          else
            PK0PW00.PK0PWEXE = "PK4206"; /* Execute proc PK4206*/
          end
        else
          if (PK0PM027.PK0PM-SINGLE-MULTI-FLAG == "M") /* MULTI*/
            if (PK0PM027.PK0PM-VM-SEL-FLAG == "B") /* Basics*/
              PK0PW00.PK0PWEXE = "PK4991"; /* Execute proc PK4991*/
            else
              PK0PW00.PK0PWEXE = "PK4203"; /* Execute proc PK4203*/
            end
          end
          if (PK0PM027.PK0PM-SINGLE-MULTI-FLAG == "S") /* SINGLE*/
            if (PK0PM027.PK0PM-VM-SEL-FLAG == "B") /* Basics*/
              PK0PW00.PK0PWEXE = "PK4992"; /* Execute proc PK4992*/
            else
              PK0PW00.PK0PWEXE = "PK4204"; /* Execute proc PK4204*/
            end
          end
          if (PK0PM027.PK0PM-SINGLE-MULTI-FLAG == "B") /* BOTH*/
            if (PK0PM027.PK0PM-VM-SEL-FLAG == "B") /* Basics*/
              PK0PW00.PK0PWEXE = "PK4993"; /* Execute proc PK4993*/
            else
              PK0PW00.PK0PWEXE = "PK4205"; /* Execute proc PK4205*/
            end
          end
        end
      end
    end
   /* IF PK0PM027.PK0PM-PRNT-FLAG = 'Z';*/
   /* Zebra or other printer type of the future*/
   /* IF PK0PW01.PK0PWSWN EQ 'Y';  /* Specific packlist range entered.*/
   /* IF PK0PM027.PK0PM-SINGLE-MULTI-FLAG = 'B';/* BOTH*/
   /* MOVE 'PK4813' TO PK0PW00.PK0PWEXE;/* Execute proc PK4813*/
   /* END;*/
  end

  if (PK0PM027.PK0PMPFR[1] == 0 && PK0PM027.PK0PMPTO[1] == 0
   && PK0PM027.PK0PMPFR[2] == 0 && PK0PM027.PK0PMPTO[2] == 0
   && PK0PM027.PK0PMPFR[3] == 0 && PK0PM027.PK0PMPTO[3] == 0
   && PK0PM027.PK0PMPFR[4] == 0 && PK0PM027.PK0PMPTO[4] == 0
   && PK0PM027.PK0PMPFR[5] == 0 && PK0PM027.PK0PMPTO[5] == 0)
    /* if all pack list entries in the map are blank*/
    PK0P026(); /* Enque the internal reader*/

    while (PK0PW01.PK0PWSWS == "N") /* Until job is submitted*/

      PK0PW99.PK0PWJCL = PK0PT27.PK0PWJCL[PK0PWIXT]; /* JCL statement*/
      PK0PW01.PK0PTTYP = PK0PT27.PK0PTTYP[PK0PWIXT]; /* Statement type*/

      if (PK0PW01.PK0PTTYP == "P") /* Parameters statement*/

        if (PK0PM027.PK0PMLNF > 0
         && PK0PM027.PK0PMLNT > 0)
          PK0PW27.PK0PMLNF = PK0PM027.PK0PMLNF;
          PK0PW27.PK0PMLNT = PK0PM027.PK0PMLNT;
        else
          PK0PW27.PK0PMLNF = 0;
          PK0PW27.PK0PMLNT = 9999;
        end

        if (PK0PM027.PK0PMSFR > 0
         && PK0PM027.PK0PMSTO > 0)
          PK0PW27.PK0PMSFR = PK0PM027.PK0PMSFR;
          PK0PW27.PK0PMSTO = PK0PM027.PK0PMSTO;
        else
          PK0PW27.PK0PMSFR = 0;
          PK0PW27.PK0PMSTO = 9999;
        end

        if (PK0PM027.PK0PM-BILL-OF-LADING-FROM > 0
         && PK0PM027.PK0PM-BILL-OF-LADING-TO > 0)
          PK0PW27.PK0PM-BILL-OF-LADING-FROM = PK0PM027.PK0PM-BILL-OF-LADING-FROM;
          PK0PW27.PK0PM-BILL-OF-LADING-TO = PK0PM027.PK0PM-BILL-OF-LADING-TO;
        else
          PK0PW27.PK0PM-BILL-OF-LADING-FROM = 0;
          PK0PW27.PK0PM-BILL-OF-LADING-TO = 9999999999999;
        end

        PK0PW27.PK0PMPFR = 0;
        PK0PW27.PK0PMPTO = 999999;

        PK0PW27.XBCCD = PK0PM027.XBCCD;
        PK0PW27.PK0PM-PRINT-GENERATION = PK0PM027.PK0PM-PRINT-GENERATION;

        if (PK0PM027.XWHCD == "51") /* Apparel warehouse*/
          if (PK0PM027.PK0PM-VM-SEL-FLAG == "V") /* Inline/VM select flag*/
            PK0PW27.XGPCD = "01"; /* VM*/
          else
            PK0PW27.XGPCD = "03"; /* Inline*/
          end
          if (PK0PM027.PK0PM-VM-SEL-FLAG == "Q") /* Quality Drive flag*/
            PK0PW27.PK0PQDFL = "Y"; /* Quality Drive*/
          else
            PK0PW27.PK0PQDFL = "N"; /* Not Quality Drive*/
          end
        end

        PK0PW27.XBCCD = PK0PM027.XBCCD;

        PK0PW27.PK0PM-MAGNUM-STARTUP = PK0PM027.PK0PM-MAGNUM-STARTUP;

        PK0PW27.PK0PM-MAGNUM-END = PK0PM027.PK0PM-MAGNUM-END;

        PK0PW27.PK0PM-SETUP-COUNT = PK0PM027.PK0PM-SETUP-COUNT;

        PK0PW27.PK0PM-SINGLE-MULTI-FLAG = PK0PM027.PK0PM-SINGLE-MULTI-FLAG;

        PK0PW00.PK0PWJCL = PK0PW27.PK0PWJCL; /* Report parameters*/

        PK0P027(); /* Write to the internal reader*/

      else

        PK0P027(); /* Write to the internal reader*/

      end

    end

    PK0P028(); /* Deque the internal reader*/

  else

    PK0PW01.PK0PWIXM = 1; /* initialise map index*/

    while (PK0PW01.PK0PWIXM <= 5) /* until all 5 entries for pack lists*/
      /* are processed*/

      PK0PW01.PK0PWSWS = "N";

      if (PK0PM027.PK0PMPFR[PK0PWIXM] > 0 /* submit jobs only for*/
       || PK0PM027.PK0PMPTO[PK0PWIXM] > 0) /* non blank pack list entries*/

        PK0P026(); /* Enque the internal reader*/

        while (PK0PW01.PK0PWSWS == "N") /* Until job is submitted*/

          PK0PW99.PK0PWJCL = PK0PT27.PK0PWJCL[PK0PWIXT];
                                   /* JCL statement*/
          PK0PW01.PK0PTTYP = PK0PT27.PK0PTTYP[PK0PWIXT];
                                   /* Statement type*/

          if (PK0PW01.PK0PTTYP == "P") /* Parameters statement*/

            if (PK0PM027.PK0PMLNF > 0
             && PK0PM027.PK0PMLNT > 0)
              PK0PW27.PK0PMLNF = PK0PM027.PK0PMLNF;
              PK0PW27.PK0PMLNT = PK0PM027.PK0PMLNT;
            else
              PK0PW27.PK0PMLNF = 0;
              PK0PW27.PK0PMLNT = 9999;
            end

            if (PK0PM027.PK0PMSFR > 0
             && PK0PM027.PK0PMSTO > 0)
              PK0PW27.PK0PMSFR = PK0PM027.PK0PMSFR;
              PK0PW27.PK0PMSTO = PK0PM027.PK0PMSTO;
            else
              PK0PW27.PK0PMSFR = 0;
              PK0PW27.PK0PMSTO = 9999;
            end


            if (PK0PM027.PK0PM-BILL-OF-LADING-FROM > 0
             && PK0PM027.PK0PM-BILL-OF-LADING-TO > 0)
              PK0PW27.PK0PM-BILL-OF-LADING-FROM = PK0PM027.PK0PM-BILL-OF-LADING-FROM;
              PK0PW27.PK0PM-BILL-OF-LADING-TO = PK0PM027.PK0PM-BILL-OF-LADING-TO;
            else
              PK0PW27.PK0PM-BILL-OF-LADING-FROM = 0;
              PK0PW27.PK0PM-BILL-OF-LADING-TO = 9999999999999;
            end

            PK0PW27.PK0PMPFR = PK0PM027.PK0PMPFR[PK0PWIXM];
            PK0PW27.PK0PMPTO = PK0PM027.PK0PMPTO[PK0PWIXM];

            PK0PW27.XBCCD = PK0PM027.XBCCD;
            PK0PW27.PK0PM-PRINT-GENERATION = PK0PM027.PK0PM-PRINT-GENERATION;

            if (PK0PM027.XWHCD == "51") /* Apparel warehouse*/
              if (PK0PM027.PK0PM-VM-SEL-FLAG == "V") /* Inline/VM select flag*/
                PK0PW27.XGPCD = "01"; /* VM*/
              else
                PK0PW27.XGPCD = "03"; /* Inline*/
              end
              if (PK0PM027.PK0PM-VM-SEL-FLAG == "Q") /* Quality Drive flag*/
                PK0PW27.PK0PQDFL = "Y"; /* Quality Drive*/
              else
                PK0PW27.PK0PQDFL = "N"; /* Not Quality Drive*/
              end
            end

            PK0PW27.XBCCD = PK0PM027.XBCCD;

            PK0PW27.PK0PM-MAGNUM-STARTUP = PK0PM027.PK0PM-MAGNUM-STARTUP;

            PK0PW27.PK0PM-MAGNUM-END = PK0PM027.PK0PM-MAGNUM-END;

            PK0PW27.PK0PM-SETUP-COUNT = PK0PM027.PK0PM-SETUP-COUNT;

            PK0PW27.PK0PM-SINGLE-MULTI-FLAG = PK0PM027.PK0PM-SINGLE-MULTI-FLAG;

            PK0PW00.PK0PWJCL = PK0PW27.PK0PWJCL; /* Report parameters*/

            PK0P027(); /* Write to the internal reader*/

          else

            PK0P027(); /* Write to the internal reader*/

          end

        end

        PK0P028(); /* Deque the internal reader*/

      end

      PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* increment map index*/

    end

  end

  PK0PW01.PK0PWMNO = 373; /* Job was submitted*/
  PK0PW01.PK0PMSEL[19] = "*"; /* Indicate function completed*/

  set PK0PM027 initial; /* Clear map output area*/

end // end PK0P275

// Carton Content Request
Function PK0P280()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  PK0P281(); /* Format and display the map*/

  PK0P282(); /* Check attention identifier*/

  PK0P283(); /* Reset fields to normal intensity*/

  PK0P284(); /* Verify the entered data*/

  PK0P285(); /* Process valid input request*/


end // end PK0P280

// Format and display the map
Function PK0P281()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    PK0PM028.XXXRVNBR = PK0PW01.XXXRVNBR; /* Revision number*/

    PK0PM028.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    PK0PM028.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
    PK0PM028.XBCCD = PK0PW01.XBCCD; /* brand code*/
    PK0PM028.XBCDESC = PK0PW01.XBCDESC;
    PK0PM028.PK0PMRMT = PK0PW01.PK0PMRMT; /* Printer*/
    PK0PM028.PK0PMDES = PK0PW01.PK0PMDES; /* Description*/

    PK0PM028.PK0PM-MAGNUM-STARTUP = "N";
    PK0PM028.PK0PM-MAGNUM-END = "N";
    PK0PM028.PK0PM-SETUP-COUNT = 0;

    if (PK0PW01.PK0PMRMT == "RMT80"  /* remote 80*/
     || PK0PW01.PK0PMRMT == "RMT81"  /* remote 81*/
     || PK0PW01.PK0PMRMT == "RMT82"  /* remote 82*/
     || PK0PW01.PK0PMRMT == "RMT83"  /* remote 83*/
     || PK0PW01.PK0PMRMT == "RMT70"  /* remote 70*/
     || PK0PW01.PK0PMRMT == "RMT124" /* remote 124*/
     || PK0PW01.PK0PMRMT == "RMT125" /* remote 125*/
     || PK0PW01.PK0PMRMT == "RMT126" /* remote 126*/
     || PK0PW01.PK0PMRMT == "RMT127" /* remote 127*/
     || PK0PW01.PK0PMRMT == "RMT220" /* remote 220*/
     || PK0PW01.PK0PMRMT == "RMT50") /* remote 50*/
      PK0PM028.PK0PM-PRINTER-TYPE = "L"; /* laser printer*/
    else
      if (PK0PW01.PK0PMRMT == "RMT425" /* MEMF INTERMEC THERMAL*/
       || PK0PW01.PK0PMRMT == "RMT426" /* MEMF INTERMEC THERMAL*/
       || PK0PW01.PK0PMRMT == "RMT427" /* MEMF INTERMEC THERMAL*/
       || PK0PW01.PK0PMRMT == "RMT428" /* MEMF INTERMEC THERMAL*/
       || PK0PW01.PK0PMRMT == "RMT429" /* MEMA INTERMEC THERMAL*/
       || PK0PW01.PK0PMRMT == "RMT430" /* MEMA INTERMEC THERMAL*/
       || PK0PW01.PK0PMRMT == "RMT431" /* MEMA INTERMEC THERMAL*/
       || PK0PW01.PK0PMRMT == "RMT432" /* MEMA INTERMEC THERMAL*/
       || PK0PW01.PK0PMRMT == "RMT434" /* MEMA INTERMEC THERMAL*/
       || PK0PW01.PK0PMRMT == "RMT318" /* WLSNV INTERMEC FC THERMAL*/
       || PK0PW01.PK0PMRMT == "RMT319") /* WLSNV INTERMEC RP THERMAL*/
        PK0PM028.PK0PM-PRINTER-TYPE = "T"; /* thermal printer*/
      else
        PK0PM028.PK0PM-PRINTER-TYPE = "I"; /* impact printer*/
      end
    end

    if (PK0PW01.PK0PWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK0PW01.PK0PWMNO);
    end /* Job submitted message number*/
    PK0PW01.PK0PWMNO = 0; /* Reset message number*/

    if (PK0PM028.XBCCD != "08")
      PK0PM028.XBCCD = "*";
      PK0PM028.XBCDESC = "ALL EXCEPT COLE HAAN";
      converseLib.validationFailed(421); /* cole HAAN 'I' msg*/
      PK0PM026.XXXPRCNM = "PK0P281";
    end

  else

    set PK0PM028 alarm; /* Indicate sound alarm*/

  end

  converse PK0PM028 ;


end // end PK0P281

// Check attention identifier
Function PK0P282()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PK0PW01.XWHCD == 42)
      PK0PW01.PK0PMSEL[23] = "C"; /* Indicate selection cancelled*/
    else
      PK0PW01.PK0PMSEL[18] = "C"; /* Indicate selection cancelled*/
    end

    set PK0PM028 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0PM028.XXXPRCNM = "PK0P282"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0P282

// Reset highlighted fields
Function PK0P283()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0PM028.XBCCD initialAttributes; /* brand code*/
  set PK0PM028.PK0PMCPY initialAttributes; /* Number of copies*/
  set PK0PM028.PK0PM-PRINT-GENERATION initialAttributes; /* Print generation*/
  set PK0PM028.PK0PMSFR initialAttributes; /* Schedule FROM*/
  set PK0PM028.PK0PMSTO initialAttributes; /* Schedule TO*/
  set PK0PM028.PK0PM-MAGNUM-STARTUP initialAttributes; /* magnum startup-flag*/
  set PK0PM028.PK0PM-MAGNUM-END initialAttributes; /* magnum end-flag*/
  set PK0PM028.PK0PM-SETUP-COUNT initialAttributes; /* number of lineup labels*/
  set PK0PM028.PK0PM-PRINTER-TYPE initialAttributes; /* printer type*/

  PK0PW01.PK0PWIXM = 1; /* Initialize map index*/

  while (PK0PW01.PK0PWIXM <= 10) /* Until all are reset*/
    set PK0PM028.PK0PMSCT[PK0PWIXM] initialAttributes; /* Starting Carton Sequence Num*/
    set PK0PM028.PK0PMECT[PK0PWIXM] initialAttributes; /* Ending Carton Sequence Num*/

    PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* Increment index*/

  end

end // end PK0P283

// Verify the entered data
Function PK0P284()
   /* ------------------------------------------------------------*/
   /* Verify the Schedule FROM entry.*/
   /* Verify the Schedule TO entry.*/
   /* Verify the Carton Sequence Number*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PK0PM028.PK0PMSFR cursor; /* set cursor*/
    PK0PM028.XXXPRCNM = "PK0P284"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (PK0PM028.XBCCD != " "
   && PK0PM028.XBCCD != PKWREC.XBCCD)
    PKWREC.XBCCD = PK0PM028.XBCCD;
    PK0PS12(); /* validate brand code*/
    if (converseVar.validationMsgNum == 0)
      PK0PM028.XBCDESC = PK0PW01.XBCDESC;
    else
      set PK0PM028.XBCCD cursor, bold; /* set cursor*/
      PK0PM028.XXXPRCNM = "PK0P284"; /* Process name*/
      exit stack; /* Exit to redisplay map*/
    end
  end

  PK0PW01.PK0PWSWX = "N"; /* Info entered switch*/

  PK0PW01.PK0PWSDT = PKDREC.PKDLBLDT[1]; /* Setup date*/

  if (PK0PM028.PK0PMSFR is modified) /* Schedule FROM*/
    PK0PW01.PK0PWSWX = "Y"; /* Info entered*/
  end

  if (PK0PW01.PK0PWSWX == "N") /* Info not entered*/

    set PK0PM028.PK0PMSFR cursor, bold; /* Position cursor*/
    converseLib.validationFailed(139); /* Indicate parameters required*/
    PK0PM028.XXXPRCNM = "PK0P284"; /* Process name*/

  else

     /* check the schedule - if to < from , move from to the to*/

    if (PK0PM028.PK0PMSTO < PK0PM028.PK0PMSFR) /* TO less than FROM*/
      PK0PM028.PK0PMSTO = PK0PM028.PK0PMSFR;
    end

     /* check the crtn - if to < from , move from to the to*/

    PK0PW01.PK0PWIXM = 1; /* INITIALIZE MAP INDEX*/

    while (PK0PW01.PK0PWIXM <= 10) /* FOR ALL THE 10 LINES WHICH are entered*/
                                  /* FOR THE CARTON SEQUENCE NUM*/
      if (PK0PM028.PK0PMECT[PK0PWIXM]
       < PK0PM028.PK0PMSCT[PK0PWIXM]) /* TO less than FROM*/
        PK0PM028.PK0PMECT[PK0PWIXM] = PK0PM028.PK0PMSCT[PK0PWIXM];
      end

      PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* INCREMENT THE INDEX*/

    end

     /* For Pack Stations, the allowable lane ranges are from 0001*/
     /* to 9999.  For Belt Pick, no lane ranges are allowed.*/

  end

  if (PK0PM028.PKQTKTYP != "R" /* Repack Flag*/
   && PK0PM028.PKQTKTYP != "F") /* Full Case Flag*/

    set PK0PM028.PKQTKTYP cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(156); /* Indicate invalid flag*/
    PK0PM028.XXXPRCNM = "PK0P284"; /* Process name*/

  end

  if (PK0PM028.PK0PM-PRINT-GENERATION == "+0" /* print generation*/
   || PK0PM028.PK0PM-PRINT-GENERATION == "-1" 
   || PK0PM028.PK0PM-PRINT-GENERATION == "-2")
     /* continue*/
  else
    set PK0PM028.PK0PM-PRINT-GENERATION cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(117); /* Indicate invalid number*/
    PK0PM028.XXXPRCNM = "PK0P284"; /* Process name*/
  end

  if (PK0PM028.PK0PMCPY == 0) /* Number of copies invalid*/

    set PK0PM028.PK0PMCPY cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(126); /* Indicate invalid number*/
    PK0PM028.XXXPRCNM = "PK0P284"; /* Process name*/

  end

  if (PK0PM028.PK0PM-MAGNUM-STARTUP == "Y"
   || PK0PM028.PK0PM-MAGNUM-STARTUP == "N")
     /* continue*/
  else
    set PK0PM028.PK0PM-MAGNUM-STARTUP cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(235); /* Indicate invalid number*/
    PK0PM028.XXXPRCNM = "PK0P284"; /* Process name*/
  end

  if (PK0PM028.PK0PM-MAGNUM-END == "Y"
   || PK0PM028.PK0PM-MAGNUM-END == "N")
     /* continue*/
  else
    set PK0PM028.PK0PM-MAGNUM-END cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(235); /* Indicate invalid number*/
    PK0PM028.XXXPRCNM = "PK0P284"; /* Process name*/
  end

  if (PK0PM028.PK0PM-PRINTER-TYPE == "L" /* laser printer*/
   || PK0PM028.PK0PM-PRINTER-TYPE == "I" /* impact printer*/
   || PK0PM028.PK0PM-PRINTER-TYPE == "T") /* thermal printer*/
     /* continue*/
  else

    set PK0PM028.PK0PM-PRINTER-TYPE cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(342); /* Indicate invalid flag*/
    PK0PM028.XXXPRCNM = "PK0P284"; /* Process name*/

  end

  if (PK0PM028.PK0PMSCT[1] == 0 && PK0PM028.PK0PMECT[1] == 0
   && PK0PM028.PK0PMSCT[2] == 0 && PK0PM028.PK0PMECT[2] == 0
   && PK0PM028.PK0PMSCT[3] == 0 && PK0PM028.PK0PMECT[3] == 0
   && PK0PM028.PK0PMSCT[4] == 0 && PK0PM028.PK0PMECT[4] == 0
   && PK0PM028.PK0PMSCT[5] == 0 && PK0PM028.PK0PMECT[5] == 0
   && PK0PM028.PK0PMSCT[6] == 0 && PK0PM028.PK0PMECT[6] == 0
   && PK0PM028.PK0PMSCT[7] == 0 && PK0PM028.PK0PMECT[7] == 0
   && PK0PM028.PK0PMSCT[8] == 0 && PK0PM028.PK0PMECT[8] == 0
   && PK0PM028.PK0PMSCT[9] == 0 && PK0PM028.PK0PMECT[9] == 0
   && PK0PM028.PK0PMSCT[10] == 0 && PK0PM028.PK0PMECT[10] == 0
   && PK0PW01.PK0PW-MSG-FLAG == " ")
    converseLib.validationFailed(512);
    PK0PW01.PK0PW-MSG-FLAG = "Y";
    set PK0PM028.PK0PMSFR cursor, modified; /* Position cursor*/
    exit stack; /* Exit to redisplay map*/

  end

  PK0PW01.PK0PW-MSG-FLAG = " ";

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end PK0P284

// JCL for all packing list's
Function PK0P285()
   /* ------------------------------------------------------------*/
   /* Format the batch program parameters.*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set PK0PW00 empty; /* Initialize variables work area*/
  set PK0PW28 empty; /* Initialize parameters work area*/
  PK0PW01.PK0PWSWS = "N"; /* Job submitted switch*/

  PK0PW28.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
  PK0PW00.PK0PMCPY = PK0PM028.PK0PMCPY; /* Number of copies*/
  PK0PW00.PK0PMGEN = PK0PM028.PK0PM-PRINT-GENERATION; /* gen#*/

  if (PK0PM028.XBCCD == "08") /* cole hann*/
    if (PK0PM028.PKQTKTYP == "R") /* Repack*/
      PK0PW00.PK0PMFS1 = "PK0Q"; /* repack forms code*/
      PK0PW00.PK0PWEXE = "PK2441"; /* Execute proc PK2441*/
      PK0PW00.PK0PWAPP = "PK244D"; /* Execute pgm  PK244d*/
    else
      PK0PW00.PK0PMFS1 = "PK0P"; /* fc forms code*/
      PK0PW00.PK0PWEXE = "PK2431"; /* Execute proc PK2431*/
      PK0PW00.PK0PWAPP = "PK243D"; /* Execute pgm  PK243d*/
    end
  else
    if (PK0PW01.XWHCD == "07" /* wilsonville*/
     || PK0PW01.XWHCD == "04" /* memphis footwear*/
     || PK0PW01.XWHCD == "42") /* canada  footwear*/
      if (PK0PM028.PKQTKTYP == "R") /* Repack*/
        PK0PW00.PK0PMFS1 = "PK0Q"; /* repack forms code*/
        PK0PW00.PK0PWEXE = "PK2411"; /* Execute proc PK2411*/
        PK0PW00.PK0PWAPP = "PK241D"; /* Execute pgm  PK241d*/
      else
        PK0PW00.PK0PMFS1 = "PK0P"; /* fc forms code*/
        PK0PW00.PK0PWEXE = "PK2401"; /* Execute proc PK2401*/
        PK0PW00.PK0PWAPP = "PK240D"; /* Execute pgm  PK240d*/
      end
    else
      if (PK0PM028.PKQTKTYP == "R") /* Repack*/
        PK0PW00.PK0PMFS1 = "PK0Q"; /* repack forms code*/
        PK0PW00.PK0PWEXE = "PK1311"; /* Execute proc PK1311*/
        PK0PW00.PK0PWAPP = "PK131D"; /* Execute pgm  PK131d*/
      else
        PK0PW00.PK0PMFS1 = "PK0P"; /* fc forms code*/
        PK0PW00.PK0PWEXE = "PK1301"; /* Execute proc PK1301*/
        PK0PW00.PK0PWAPP = "PK130D"; /* Execute pgm  PK130d*/
      end
    end
  end

  PK0PW00.PK0PWRUN = "NORM ";

  if (PK0PM028.PK0PMSCT[1] == 0 && PK0PM028.PK0PMECT[1] == 0
   && PK0PM028.PK0PMSCT[2] == 0 && PK0PM028.PK0PMECT[2] == 0
   && PK0PM028.PK0PMSCT[3] == 0 && PK0PM028.PK0PMECT[3] == 0
   && PK0PM028.PK0PMSCT[4] == 0 && PK0PM028.PK0PMECT[4] == 0
   && PK0PM028.PK0PMSCT[5] == 0 && PK0PM028.PK0PMECT[5] == 0
   && PK0PM028.PK0PMSCT[6] == 0 && PK0PM028.PK0PMECT[6] == 0
   && PK0PM028.PK0PMSCT[7] == 0 && PK0PM028.PK0PMECT[7] == 0
   && PK0PM028.PK0PMSCT[8] == 0 && PK0PM028.PK0PMECT[8] == 0
   && PK0PM028.PK0PMSCT[9] == 0 && PK0PM028.PK0PMECT[9] == 0
   && PK0PM028.PK0PMSCT[10] == 0 && PK0PM028.PK0PMECT[10] == 0)
    /* if all ten entries for crtn seq num are blank*/
    PK0PW01.PK0PWSWS = "N"; /**/

    PK0P026(); /* Enque the internal reader*/

    while (PK0PW01.PK0PWSWS == "N") /* Until job is submitted*/

      PK0PW99.PK0PWJCL = PK0PT28.PK0PWJCL[PK0PWIXT];
                                   /* JCL statement*/
      PK0PW01.PK0PTTYP = PK0PT28.PK0PTTYP[PK0PWIXT];
                                   /* Statement type*/

      if (PK0PW01.PK0PTTYP == "P") /* Parameters statement*/

        if (PK0PM028.PK0PMSFR > 0 /* build the from and to sched*/
         || PK0PM028.PK0PMSTO > 0)
          PK0PW28.PK0PMSFR = PK0PM028.PK0PMSFR; /* from schedule*/
          PK0PW28.PK0PMSTO = PK0PM028.PK0PMSTO; /* to schedule*/
        else
          PK0PW28.PK0PMSFR = 0; /* from schedule*/
          PK0PW28.PK0PMSTO = 99; /* to schedule*/
        end

        PK0PW28.PK0PMSCT = 0; /* starting crtn nbr*/
        PK0PW28.PK0PMECT = 999999999; /* ending crtn nbr*/

        PK0PW28.PK0PM-PRINT-GENERATION = PK0PM028.PK0PM-PRINT-GENERATION; /* print generation*/

        if (PK0PW28.XWHCD == "42")
          PK0PW28.XGPCD = "02";
        end

        PK0PW28.XBCCD = PK0PM028.XBCCD;

        PK0PW28.PK0PM-SUBMIT-FLAG = "O";

        PK0PW28.PK0PM-MAGNUM-STARTUP = PK0PM028.PK0PM-MAGNUM-STARTUP;

        PK0PW28.PK0PM-MAGNUM-END = PK0PM028.PK0PM-MAGNUM-END;

        PK0PW28.PK0PM-SETUP-COUNT = PK0PM028.PK0PM-SETUP-COUNT;

        PK0PW28.PK0PM-PRINTER-TYPE = PK0PM028.PK0PM-PRINTER-TYPE;

        PK0PW00.PK0PWJCL = PK0PW28.PK0PWJCL; /* Report parameters*/

        PK0P027(); /* Write to the internal reader*/

      else

        PK0P027(); /* Write to the internal reader*/

      end

    end

    PK0P028(); /* Deque the internal reader*/

  else

    PK0PW01.PK0PWIXM = 1; /* INITIALISE THE MAP INDEX*/

    while (PK0PW01.PK0PWIXM <= 10) /* UNTIL ALL 10 ENTRIES IN THE MAP*/
      /* FOR CRTN SEQUENCE NUM'S ARE PROCESSED*/

      PK0PW01.PK0PWSWS = "N"; /**/

      if (PK0PM028.PK0PMSCT[PK0PWIXM] > 0 /* SUBMIT A JOB ONLY*/
       || PK0PM028.PK0PMECT[PK0PWIXM] > 0) /* FOR*/
                                  /* NON BLANK CRTN SEQ. NUM. ENTRIES*/
        PK0P026(); /* Enque the internal reader*/

        while (PK0PW01.PK0PWSWS == "N") /* Until job is submitted*/

          PK0PW99.PK0PWJCL = PK0PT28.PK0PWJCL[PK0PWIXT];
                                   /* JCL statement*/
          PK0PW01.PK0PTTYP = PK0PT28.PK0PTTYP[PK0PWIXT];
                                   /* Statement type*/

          if (PK0PW01.PK0PTTYP == "P") /* Parameters statement*/

            if (PK0PM028.PK0PMSFR > 0 /* build the from and to sched*/
             || PK0PM028.PK0PMSTO > 0)
              PK0PW28.PK0PMSFR = PK0PM028.PK0PMSFR; /* from schedule*/
              PK0PW28.PK0PMSTO = PK0PM028.PK0PMSTO; /* to schedule*/
            else
              PK0PW28.PK0PMSFR = 0; /* from schedule*/
              PK0PW28.PK0PMSTO = 99; /* to schedule*/
            end

            PK0PW28.PK0PMSCT = PK0PM028.PK0PMSCT[PK0PWIXM]; /* starting crtn nbr*/
            PK0PW28.PK0PMECT = PK0PM028.PK0PMECT[PK0PWIXM]; /* ending crtn nbr*/

            PK0PW28.PK0PM-PRINT-GENERATION = PK0PM028.PK0PM-PRINT-GENERATION; /* print generation*/

            if (PK0PW28.XWHCD == "42")
              PK0PW28.XGPCD = "02";
            end

            PK0PW28.XBCCD = PK0PM028.XBCCD;

            PK0PW28.PK0PM-SUBMIT-FLAG = "O";

            PK0PW28.PK0PM-MAGNUM-STARTUP = PK0PM028.PK0PM-MAGNUM-STARTUP;

            PK0PW28.PK0PM-MAGNUM-END = PK0PM028.PK0PM-MAGNUM-END;

            PK0PW28.PK0PM-SETUP-COUNT = PK0PM028.PK0PM-SETUP-COUNT;

            PK0PW28.PK0PM-PRINTER-TYPE = PK0PM028.PK0PM-PRINTER-TYPE;

            PK0PW00.PK0PWJCL = PK0PW28.PK0PWJCL; /* Report parameters*/

            PK0P027(); /* Write to the internal reader*/

          else

            PK0P027(); /* Write to the internal reader*/

          end

        end

        PK0P028(); /* Deque the internal reader*/

      end

      PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* INCREMENT MAP INDEX*/

    end

  end

  PK0PW01.PK0PWMNO = 372; /* Job was submitted*/
  if (PK0PW01.XWHCD == 42)
    PK0PW01.PK0PMSEL[23] = "*"; /* Indicate function completed*/
  else
    PK0PW01.PK0PMSEL[18] = "*"; /* Indicate function completed*/
  end

  set PK0PM028 initial; /* Clear map output area*/

end // end PK0P285

// Customer Labels Request
Function PK0P290()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  PK0P291(); /* Format and display the map*/

  PK0P292(); /* Check attention identifier*/

  PK0P293(); /* Reset fields to normal intensity*/

  PK0P294(); /* Verify the entered data*/

  PK0P295(); /* Process valid input request*/


end // end PK0P290

// Format and display the map
Function PK0P291()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    PK0PM029.XXXRVNBR = PK0PW01.XXXRVNBR; /* Revision number*/

    PK0PM029.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    PK0PM029.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/

    PK0PM029.PK0PMRMT = PK0PW01.PK0PMRMT; /* Printer*/
    PK0PM029.PK0PMDES = PK0PW01.PK0PMDES; /* Description*/
    PK0PM029.PK0PMGEN = "00"; /* File generation*/

    if (PK0PW01.PK0PWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK0PW01.PK0PWMNO);
    end /* Job submitted message number*/
    PK0PW01.PK0PWMNO = 0; /* Reset message number*/

  else

    set PK0PM029 alarm; /* Indicate sound alarm*/

  end

  converse PK0PM029 ;


end // end PK0P291

// Check attention identifier
Function PK0P292()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PK0PW01.PK0PMSEL[18] = "C"; /* Indicate selection cancelled*/

    set PK0PM029 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0PM029.XXXPRCNM = "PK0P292"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0P292

// Reset highlighted fields
Function PK0P293()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0PM029.PK0PMRMT initialAttributes; /* Remote Printer*/
  set PK0PM029.PK0PMGEN initialAttributes; /* File Generation*/
  set PK0PM029.PK0PMDES initialAttributes; /* Remote Description*/
  set PK0PM029.PK0PMLDL initialAttributes; /* Delivery Code*/
  set PK0PM029.PK0PWPRN initialAttributes; /* Run type*/
  set PK0PM029.KUISKUID initialAttributes; /* Customer id*/
  set PK0PM029.PK0PMFPL initialAttributes; /* Fast Pick Location*/
  set PK0PM029.PK0PMSFR initialAttributes; /* Schedule FROM*/
  set PK0PM029.PK0PMSTO initialAttributes; /* Schedule TO*/
  set PK0PM029.PK0PMLFR initialAttributes; /* Lane FROM*/
  set PK0PM029.PK0PMLTO initialAttributes; /* Lane TO*/
  set PK0PM029.PK0PMTFR initialAttributes; /* Tote FROM*/
  set PK0PM029.PK0PMTTO initialAttributes; /* Tote TO*/

end // end PK0P293

// Verify the entered data
Function PK0P294()
   /* ------------------------------------------------------------------*/
   /* Validations are done in reverse order*/
   /*  */
   /* Verify the Lane FROM entry.*/
   /* Verify the Lane TO entry.*/
   /* Verify the Schedule FROM entry.*/
   /* Verify the Schedule TO entry.*/
   /* Verify Stock Nbr has been entered*/
   /* Note: Customer needs no verification because labels*/
   /* labels will either be found for the customer or not.*/
   /* Verify the Run Type.*/
   /* Verify the Stock Number (sy1stnbr).*/
   /* Verify the Delivery Type.*/
   /* Verify the GDG reference - currently 10 generations are kept for*/
   /* normal and sameday label files...each*/
   /* generation represents 1 day*/
   /* Verify the Remote Printer is acceptable for printing Zebra labels.*/
   /*  */
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PK0PM029.PK0PMSFR cursor; /* set cursor*/
    PK0PM029.XXXPRCNM = "PK0P294"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  PK0PW01.PK0PWSWX = "N"; /* Info entered switch*/

  PK0PW01.PK0PWSDT = PKDREC.PKDLBLDT[1]; /* Setup date*/

   /* Check for any modifications to the map*/

  if (PK0PM029.PK0PMLDL is modified /* Label Delivery Type*/
   || PK0PM029.PK0PMRMT is modified /* Printer remote*/
   || PK0PM029.PK0PMGEN is modified /* File generation*/
   || PK0PM029.KUISKUID is modified /* Customer id*/
   || PK0PM029.PK0PWPRN is modified /* Run type*/
   || PK0PM029.SY1STNBR is modified /* Stock Number*/
   || PK0PM029.PK0PMFPL is modified /* Fast Pick Location*/
   || PK0PM029.PK0PMSFR is modified /* Schedule FROM*/
   || PK0PM029.PK0PMSTO is modified /* Schedule TO*/
   || PK0PM029.PK0PMLFR is modified /* Lane FROM*/
   || PK0PM029.PK0PMLTO is modified /* Lane TO*/
   || PK0PM029.PK0PMTFR is modified /* Tote FROM*/
   || PK0PM029.PK0PMTTO is modified) /* Tote TO*/
    PK0PW01.PK0PWSWX = "Y"; /* Info entered*/

  end


  if (PK0PW01.PK0PWSWX == "N") /* Info not entered*/


    set PK0PM029.PK0PMLDL cursor, bold; /* Position cursor*/
    converseLib.validationFailed(139); /* Indicate parameters required*/
    PK0PM029.XXXPRCNM = "PK0P294"; /* Process name*/

     /* Check the file GDG ...10 ARE KEPT*/

    if (PK0PM029.PK0PMGEN == "00"
     || PK0PM029.PK0PMGEN == "-1"
     || PK0PM029.PK0PMGEN == "-2"
     || PK0PM029.PK0PMGEN == "-3"
     || PK0PM029.PK0PMGEN == "-4"
     || PK0PM029.PK0PMGEN == "-5"
     || PK0PM029.PK0PMGEN == "-6"
     || PK0PM029.PK0PMGEN == "-7"
     || PK0PM029.PK0PMGEN == "-8"
     || PK0PM029.PK0PMGEN == "-9")
      /* next sentence*/
    else
      set PK0PM029.PK0PMGEN cursor, bold; /* Position cursor*/
      converseLib.validationFailed(117); /* Invalid generation*/
      PK0PM029.XXXPRCNM = "PK0P294"; /* Process name*/
    end

     /* Validate remote printer is zebra printer*/
     /* !!!! for now allow only rmt 166(batching) & 145(in whse)*/

    if (PK0PM029.PK0PMRMT in PK0PTZP.PK0PT-ZEBRA-PRINTER from 1)
       /* next sentence*/
    else
      set PK0PM029.PK0PMRMT cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(398); /* Remote must be ZEBRA printer*/
      PK0PM029.XXXPRCNM = "PK0P294"; /* Process name*/

    end

  else

     /* check the tote - if to < from , move from to the to*/

    if (PK0PM029.PK0PMTTO < PK0PM029.PK0PMTFR) /* TO less than FROM*/
      PK0PM029.PK0PMTTO = PK0PM029.PK0PMTFR;
    end

     /* check the lane - if to < from , move from to the to*/

    if (PK0PM029.PK0PMLTO < PK0PM029.PK0PMLFR) /* TO less than FROM*/
      PK0PM029.PK0PMLTO = PK0PM029.PK0PMLFR;
    end

     /* check the schedule - if to < from , move from to the to*/

    if (PK0PM029.PK0PMSTO < PK0PM029.PK0PMSFR) /* TO less than FROM*/
      PK0PM029.PK0PMSTO = PK0PM029.PK0PMSFR;
    end

     /* Verify that the run type if 'F' if a location is entered*/

    if (PK0PM029.PK0PMFPL > " ") /* Fast Pick location entered*/
      if (PK0PM029.PK0PWPRN != "F") /* Fastpick Flag*/
        set PK0PM029.PK0PMFPL cursor, modified, bold; /* Highlight*/
        converseLib.validationFailed(510); /* Location can only be used for*/
                             /* Fast Pick*/
        PK0PM029.XXXPRCNM = "PK0P294"; /* Process name*/
      end
    end

     /* Verify stock number has been entered and is valid*/

    if (PK0PM029.SY1STNBR > " ") /* Stock nbr entered*/

       /* labels are found for the stock or not*/
       /* therefore this does not have to be verified on prod tbl*/
    else
      set PK0PM029.SY1STNBR cursor, modified, bold; /* Highlight*/
       /* Required because 1 print file can only have 1 stock nbr*/
      converseLib.validationFailed(400); /* Stock nbr is required*/
      PK0PM029.XXXPRCNM = "PK0P294"; /* Process name*/
    end

     /* Validate run type*/

    if (PK0PM029.PK0PWPRN != "S" /* Sameday Flag*/
     && PK0PM029.PK0PWPRN != "N" /* Normal Flag*/
     && PK0PM029.PK0PWPRN != "B" /* Basics Flag*/
     && PK0PM029.PK0PWPRN != "F") /* Fastpick Flag*/

      set PK0PM029.PK0PWPRN cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(397); /* Run type missing or invalid*/
      PK0PM029.XXXPRCNM = "PK0P294"; /* Process name*/

    end

     /* Validate delivery type code entry*/

    if (PK0PM029.PK0PMLDL == "A" /* Automatic delivery selected*/
     || PK0PM029.PK0PMLDL == "B") /* Batch delivery selected*/
      /* Next sentence*/
    else
      set PK0PM029.PK0PMLDL cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(399); /* Delivery type missing or invalid*/
      PK0PM029.XXXPRCNM = "PK0P294"; /* Process name*/
    end

     /* Check the file GDG ...10 ARE KEPT*/

    if (PK0PM029.PK0PMGEN == "00"
     || PK0PM029.PK0PMGEN == "-1"
     || PK0PM029.PK0PMGEN == "-2"
     || PK0PM029.PK0PMGEN == "-3"
     || PK0PM029.PK0PMGEN == "-4"
     || PK0PM029.PK0PMGEN == "-5"
     || PK0PM029.PK0PMGEN == "-6"
     || PK0PM029.PK0PMGEN == "-7"
     || PK0PM029.PK0PMGEN == "-8"
     || PK0PM029.PK0PMGEN == "-9")
      /* next sentence*/
    else
      set PK0PM029.PK0PMGEN cursor, bold; /* Position cursor*/
      converseLib.validationFailed(117); /* Invalid generation*/
      PK0PM029.XXXPRCNM = "PK0P294"; /* Process name*/
    end

     /* Validate remote printer is zebra printer*/
     /* !!!! for now allow only rmt 166(batching) & 145(in whse)*/

    if (PK0PM029.PK0PMRMT in PK0PTZP.PK0PT-ZEBRA-PRINTER from 1)
       /* next sentence*/
    else
      set PK0PM029.PK0PMRMT cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(398); /* Remote must be ZEBRA printer*/
      PK0PM029.XXXPRCNM = "PK0P294"; /* Process name*/

    end

  end


  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end PK0P294

// Process valid input request
Function PK0P295()
   /* ------------------------------------------------------------*/
   /* Format the batch program parameters.*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set PK0PW00 empty; /* Initialize variables work area*/
  set PK0PW29 empty; /* Initialize parameters work area*/
  PK0PW01.PK0PWSWS = "N"; /* Job submitted switch*/

  PK0PW29.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
  PK0PW01.PK0PMRMT = PK0PM029.PK0PMRMT; /* Remote printer*/
  PK0PW00.PK0PMGEN = PK0PM029.PK0PMGEN; /* File generation*/
  PK0PW29.PK0PMGEN = PK0PM029.PK0PMGEN; /* File generation*/

  if (PK0PM029.PK0PMSFR > 0 /* Sched range given*/
   || PK0PM029.PK0PMSTO > 0)
    if (PK0PM029.PK0PMSTO == 0) /* Get only 1 schedule*/
      PK0PW29.PK0PMSFR = PK0PM029.PK0PMSFR;
      PK0PW29.PK0PMSTO = PK0PM029.PK0PMSFR;
    else
      PK0PW29.PK0PMSFR = PK0PM029.PK0PMSFR; /* Get range of scheds*/
      PK0PW29.PK0PMSTO = PK0PM029.PK0PMSTO;
    end
  else
    PK0PW29.PK0PMSFR = 0; /* Get all schedules*/
    PK0PW29.PK0PMSTO = 99;
  end

  if (PK0PM029.PK0PMLFR > 0 /* Lane range given*/
   || PK0PM029.PK0PMLTO > 0)
    if (PK0PM029.PK0PMLTO == 0) /* Get only 1 lane*/
      PK0PW29.PK0PMLFR = PK0PM029.PK0PMLFR;
      PK0PW29.PK0PMLTO = PK0PM029.PK0PMLFR;
    else
      PK0PW29.PK0PMLFR = PK0PM029.PK0PMLFR; /* Get given range*/
      PK0PW29.PK0PMLTO = PK0PM029.PK0PMLTO;
    end
  else
    PK0PW29.PK0PMLFR = 0; /* Get all lanes*/
    PK0PW29.PK0PMLTO = 9999;
  end

  if (PK0PM029.PK0PMTFR > 0 /* Tote range given*/
   || PK0PM029.PK0PMTTO > 0)
    if (PK0PM029.PK0PMTTO == 0) /* Get only 1 tote*/
      PK0PW29.PK0PMTFR = PK0PM029.PK0PMTFR;
      PK0PW29.PK0PMTTO = PK0PM029.PK0PMTFR;
    else
      PK0PW29.PK0PMTFR = PK0PM029.PK0PMTFR; /* Get given range*/
      PK0PW29.PK0PMTTO = PK0PM029.PK0PMTTO;
    end
  else
    PK0PW29.PK0PMTFR = 0; /* Get all totes*/
    PK0PW29.PK0PMTTO = 999999;
  end

  PK0PW01.PK0PMLDL = PK0PM029.PK0PMLDL; /* Delivery type*/
  PK0PW29.KUISKUID = PK0PM029.KUISKUID; /* Selected cust id*/
  PK0PW29.PK0PMRMT = PK0PM029.PK0PMRMT; /* Selected rmt printer*/
  PK0PW29.SY1STNBR = PK0PM029.SY1STNBR; /* Selected stock nbr*/
  PK0PW29.PK0PWPRN = PK0PM029.PK0PWPRN; /* Selected run type*/
  PK0PW29.PK0PMFPL = PK0PM029.PK0PMFPL; /* Fast Pick Location*/

  if (PK0PM029.PK0PWPRN == "S")
    PK0PW00.PK0PWRUN = "SAME ";
  else
    if (PK0PM029.PK0PWPRN == "F")
      PK0PW00.PK0PWRUN = "FAST ";
    else
      if (PK0PM029.PK0PWPRN == "B")
        PK0PW00.PK0PWRUN = "BASC ";
      else
        PK0PW00.PK0PWRUN = "NORM ";
      end
    end
  end

  PK0PW00.PK0PWJCL = PK0PW29.PK0PWJCL; /* Control parms*/

  PK0PW00.PK0PWEXE = "PK4771"; /* Execute proc PK4771*/

  PK0P029(); /* Enque the internal reader*/

  while (PK0PW01.PK0PWSWS == "N") /* Until job is submitted*/

    PK0PW99.PK0PWJCL = PK0PT29.PK0PWJCL[PK0PWIXT]; /* JCL statement*/
    PK0PW01.PK0PTTYP = PK0PT29.PK0PTTYP[PK0PWIXT]; /* Statement type*/

    PK0P027(); /* Write to the internal reader*/

  end

  PK0P029(); /* Deque the internal reader*/

  PK0PW01.PK0PWMNO = 401; /* Job was submitted*/
  PK0PW01.PK0PMSEL[20] = "*"; /* Indicate function completed*/

  set PK0PM029 initial; /* Clear map output area*/

end // end PK0P295

// Report Request Menu
Function PK0P990()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  PK0P991(); /* Format and display the map*/

  PK0P992(); /* Check attention identifier*/

  PK0P993(); /* Reset fields to normal intensity*/

  PK0P994(); /* Verify the entered data*/

  PK0P995(); /* Process valid input request*/


end // end PK0P990

// Format and display the map
Function PK0P991()
   /* ------------------------------------------------------------*/
   /* Indicate sound audible alarm for any error.*/
   /* If no error or first time, format and display the map.*/
   /* Highlight warehouse code if warehouse not valid.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set PK0PM099 alarm; /* Indicate sound alarm*/
  end

  if (converseVar.validationMsgNum == 0 /* No error message to display*/
   || PK0PM099.XXXRVNBR == " ")         /* or screen not formatted*/

    if (PK0PM099.XXXRVNBR == " ") /* First time through*/

      if (COMMAREA.CAITEM > " ") /* Application data exists*/

        PK0PM099.CAITEM = COMMAREA.CAITEM; /* Application data*/
        set PK0PM099.CAITEM modified; /* Set MDT on*/
        COMMAREA.CAITEM = " "; /* Clear application data*/

      end

    else

      set PK0PM099 initial; /* Clear map output area*/

      if (PK0PW01.PK0PWMNO != 0) /* Job has been submitted*/

        if (PK0PW01.PK0PWMNO == 9999)
          converseLib.validationFailed();
        else
          converseLib.validationFailed(PK0PW01.PK0PWMNO);
        end /* Job submitted message number*/
        PK0PW01.PK0PWMNO = 0; /* Reset message number*/

      end

    end

    PK0PM099.XXXRVNBR = PK0PW01.XXXRVNBR; /* Revision number*/

    PK0PM099.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    PK0PM099.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
    PK0PM099.XWHABRV = PK0PW01.XWHABRV; /* Warehouse abbreviation*/
    PK0PM099.XBCCD = PK0PW01.XBCCD; /* brand code*/
    PK0PM099.XBCDESC = PK0PW01.XBCDESC; /* brand code*/

    PK0PW01.PK0PWIXM = 1; /* Initialize map index*/

    while (PK0PW01.PK0PWIXM <= PK0PW01.PK0PWIXL) /* Until all lines are done*/

      PK0PM099.PK0PMSEL[PK0PWIXM] = PK0PW01.PK0PMSEL[PK0PWIXM];

      if (PK0PM099.PK0PMSEL[PK0PWIXM] == "S") /* Selected not processed*/
        set PK0PM099.PK0PMSEL[PK0PWIXM] modified; /* Set MDT on*/
      end

      PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* Increment index*/

    end

  end

  if (PKWREC.XWHABRV == " ") /* Warehouse missing or invalid*/

    set PK0PM099.XWHCD cursor, modified, bold; /* Highlight warehouse*/
    PK0PM099.XWHABRV = " "; /* Clear warehouse abbreviation*/
    PK0PM099.XXXPRCNM = "PK0P991"; /* Process name*/

  end

  if (converseVar.validationMsgNum == 0)
    if (PK0PM099.XBCCD != "08")
      PK0PM099.XBCCD = "*";
      PK0PM099.XBCDESC = "ALL EXCEPT COLE HAAN";
      converseLib.validationFailed(421); /* brand 'I' msg*/
      PK0PM099.XXXPRCNM = "PK0P991"; /* Process name*/
    end
  end
  converse PK0PM099 ;


end // end PK0P991

// Check attention identifier
Function PK0P992()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PK0PM099 initial; /* Clear map output area*/

    PKWREC.XWHCD = PK0PW01.XWHCD; /* Restore warehouse code*/
    PKWREC.XWHABRV = PK0PW01.XWHABRV; /* and abbreviation*/
    PKWREC.XBCCD = PK0PW01.XBCCD; /* restore brand code*/

    XPPK002(); /* Verify warehouse code*/

    PK0PS99(); /* Exit to redisplay map*/

  end

  if (PK0PM099.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (PK0PM099.CATOAP == COMMAREA.CACURRAP) /* Same as current*/

        set PK0PM099.CATOAP cursor, modified, bold; /* Highlight*/
        converseLib.validationFailed(1); /* Indicate invalid request*/
        PK0PM099.XXXPRCNM = "PK0P992"; /* Process name*/

        PK0PS99(); /* Exit to redisplay map*/

      end

      PKWREC.XWHCD = PK0PM099.XWHCD; /* Save warehouse code*/
      PKWREC.XBCCD = PK0PM099.XBCCD; /* Save brand code*/

      COMMAREA.CATOAP = PK0PM099.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PK0PM099.CAITEM; /* Application data*/

      COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* Application user area*/

      XSEXIT(); /* Transfer to requested application*/

      set PK0PM099.CATOAP cursor, modified, bold; /* Highlight*/

      PK0PM099.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
      converseLib.validationFailed(); /* Force alarm to sound*/
      PK0PM099.XXXPRCNM = "PK0P992"; /* Process name*/

      COMMAREA.CATOAP = " "; /* Clear TO application*/
      COMMAREA.CAITEM = " "; /* and application data*/

      PK0PS99(); /* Exit to redisplay map*/

    else

      set PK0PM099.CATOAP cursor, modified, bold; /* Highlight application*/
      converseLib.validationFailed(13); /* Indicate PF key not valid*/
      PK0PM099.XXXPRCNM = "PK0P992"; /* Process name*/

      PK0PS99(); /* Exit to redisplay map*/

    end

  end

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/

    XSPF1(); /* Exit to the HELP facility*/

    PK0PM099.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/
    PK0PM099.XXXPRCNM = "PK0P992"; /* Process name*/

    PK0PS99(); /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    COMMAREA.CATOAP = "PK0A"; /* PICKING Master Menu*/

    PKWREC.XWHCD = PK0PM099.XWHCD; /* Save warehouse code*/
   /* Save brand code*/
    PKWREC.XBCCD = PK0PM099.XBCCD;
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* COMMAREA user area*/

    XSEXIT(); /* Invoke selected application*/

    PK0PM099.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/
    PK0PM099.XXXPRCNM = "PK0P992"; /* Process name*/

    PK0PS99(); /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/

    XSPF4(); /* Exit to system main menu*/

    PK0PM099.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/
    PK0PM099.XXXPRCNM = "PK0P992"; /* Process name*/

    PK0PS99(); /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0PM099.XXXPRCNM = "PK0P992"; /* Process name*/

    PK0PS99(); /* Exit to redisplay map*/

  end


end // end PK0P992

// Reset highlighted fields
Function PK0P993()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0PM099.XWHCD initialAttributes; /* Warehouse code*/

  PK0PW01.PK0PWIXM = 1; /* Initialize index*/

  while (PK0PW01.PK0PWIXM <= PK0PW01.PK0PWIXL) /* Until all lines are reset*/

    set PK0PM099.PK0PMSEL[PK0PWIXM] initialAttributes; /* Reset select tag*/

    PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* Increment line index*/

  end

  set PK0PM099.CATOAP initialAttributes; /* FAST PATH application*/
  set PK0PM099.CAITEM initialAttributes; /* Application data*/


end // end PK0P993

// Verify the entered data
Function PK0P994()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Check for proper select tag.*/
   /* Indicate an error if the line was not selected properly.*/
   /* ------------------------------------------------------------*/


  if (PK0PM099.CAITEM > " ") /* Application data was entered*/

    set PK0PM099.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/
    PK0PM099.XXXPRCNM = "PK0P994"; /* Process name*/

  end

  if (PK0PM099.PK0PMSEL[5] == "S" /* is this kill the plan option*/
   || PK0PM099.PK0PMSEL[6] == "S")
                                   /* is this update the plan option*/

    if (COMMAREA.CADELFL != "Y") /* is user authorized to kill*/

      set PK0PM099.PK0PMSEL[5] cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(275); /* unauthorized user for this selection*/
      PK0PM099.XXXPRCNM = "PK0P994"; /* Process name*/

    end

  end

  PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXL; /* Initialize line index*/

  while (PK0PW01.PK0PWIXM > 0) /* Until all lines are verified*/

    if (PK0PM099.PK0PMSEL[PK0PWIXM] != PK0PW01.PK0PMSEL[PK0PWIXM]
     && PK0PM099.PK0PMSEL[PK0PWIXM] != " " /* Line was selected*/
     && PK0PM099.PK0PMSEL[PK0PWIXM] != "S") /* and not with an "S"*/

      set PK0PM099.PK0PMSEL[PK0PWIXM] cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Only "S" is valid for tag*/
      PK0PM099.XXXPRCNM = "PK0P994"; /* Process name*/

    end

    PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM - 1; /* Decrement line number*/

  end

  if (PK0PM099.XBCCD != PK0PW01.XBCCD) /* Brand code changed*/
    PKWREC.XBCCD = PK0PM099.XBCCD; /**/
    PK0PS12(); /* validate brand*/
    if (converseVar.validationMsgNum != 0)
      set PK0PM099.XBCCD bold, cursor;
      PK0PM099.XXXPRCNM = "PK0P994";
    end
  end

  if (PK0PM099.XWHCD != PK0PW01.XWHCD /* Warehouse code changed*/
   || PK0PW01.XWHABRV == " ")         /* or no valid warehouse*/
    PKWREC.XWHCD = PK0PM099.XWHCD; /* Warehouse code*/
    XPPK002(); /* Verify warehouse code*/
  end

  set PKDREC empty;
  PKDREC.XWHCD = PK0PM099.XWHCD;
  call "IO1890" ("S ", SQLCA, PKDREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    set PKDREC empty;
  end

  if (PK0PM099.PK0PMSEL[6] == "S" /* update the plan only valid for*/
   && PKDREC.PKDWHTCD != "30")    /* processing warehouses*/
    PK0PM099.XXXPRCNM = "PK0P994";
    converseLib.validationFailed(370);
  end

  if (PK0PM099.PK0PMSEL[17] == "S") /* Replentishment Spur Labels*/
    if (PK0PM099.XWHCD == "04" /* Invalid for whse 04*/
     || PK0PM099.XWHCD == "07" /* 07*/
     || PK0PM099.XWHCD == "51" /* 51*/
     || PK0PM099.XWHCD == "42") /* 42(canada)*/
      set PK0PM099.XWHCD bold;
      set PK0PM099.PK0PMSEL[17] cursor, bold;
      PK0PM099.XXXPRCNM = "PK0P994";
      converseLib.validationFailed(370);
    end
  end
  if (PK0PM099.PK0PMSEL[18] == "S") /* Carton Content Request*/
    if (PK0PM099.XWHCD == "42") /* Invalid for whse 42*/
      set PK0PM099.XWHCD bold;
      set PK0PM099.PK0PMSEL[18] cursor, bold;
      PK0PM099.XXXPRCNM = "PK0P994";
      converseLib.validationFailed(370);
    end
  end

  if (PK0PM099.PK0PMSEL[20] == "S" /* Customer Label Request*/
   && PK0PM099.XWHCD != "51"       /* runs against whse 51*/
   && PK0PM099.XWHCD != "04")      /* runs against whse 04*/
    set PK0PM099.XWHCD bold;
    set PK0PM099.PK0PMSEL[20] cursor, bold;
    PK0PM099.XXXPRCNM = "PK0P994";
    converseLib.validationFailed(370);
  end
  if (PK0PM099.PK0PMSEL[22] == "S" /* Carton Content Request Apparel*/
   && PK0PM099.XWHCD != "42")      /* runs against whse 42 only*/
    set PK0PM099.XWHCD bold;
    set PK0PM099.PK0PMSEL[22] cursor, bold;
    PK0PM099.XXXPRCNM = "PK0P994";
    converseLib.validationFailed(370);
  end

  if (PK0PM099.PK0PMSEL[23] == "S" /* Carton Content Request Footwear*/
   && PK0PM099.XWHCD != "42")      /* runs against whse 42 only*/
    set PK0PM099.XWHCD bold;
    set PK0PM099.PK0PMSEL[23] cursor, bold;
    PK0PM099.XXXPRCNM = "PK0P994";
    converseLib.validationFailed(370);
  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PK0PS99(); /* Exit to redisplay map*/
  end


end // end PK0P994

// Process valid input request
Function PK0P995()
   /* ------------------------------------------------------------*/
   /* Save warehouse code and selection tags.*/
   /* If no default print destination and at least one report was*/
   /* selected, force selection of printer.*/
   /* If warehouse changed, obtain Warehouse Control Table row.*/
   /* If no row is found, reset any menu selections.*/
   /* ------------------------------------------------------------*/

  PK0PW01.XWHCD = PKWREC.XWHCD; /* Save warehouse code*/
  PK0PW01.XWHABRV = PKWREC.XWHABRV; /* and abbreviation*/

  PK0PW01.PK0PWIXM = 1; /* Initialize map line index*/

  while (PK0PW01.PK0PWIXM <= PK0PW01.PK0PWIXL) /* Until all lines are moved*/

    if (PK0PM099.PK0PMSEL[PK0PWIXM] != PK0PW01.PK0PMSEL[PK0PWIXM])

      PK0PW01.PK0PMSEL[PK0PWIXM] = PK0PM099.PK0PMSEL[PK0PWIXM];

    end

    PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* Increment line number*/

  end

  if (PK0PW01.PK0PMRMT == " " /* No default print destination*/
   && PK0PW01.PK0PMSEL[1] != "S") /* and specify printer not selected*/

    PK0PW01.PK0PWIXM = 1; /* Initialize map line index*/

    while (PK0PW01.PK0PWIXM <= PK0PW01.PK0PWIXL /* Until end of selections*/
     && PK0PW01.PK0PMSEL[1] != "S") /* or specification is forced*/

      if (PK0PW01.PK0PMSEL[PK0PWIXM] == "S") /* Report was selected*/

        PK0PW01.PK0PMSEL[1] = "S"; /* Force printer specification*/

      end

      PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* Increment line number*/

    end

  end

  if (PK0PW01.PK0PMSEL[1] == "S") /* If specify printer selected*/

    PK0PW01.PK0PWIXP = 0; /* Initialize page index*/

  end


end // end PK0P995

// Verify tickets by warehouse
Function PK0PS01()
   /* ------------------------------------------------------------*/
   /* Determine whether there are any tickets to print.*/
   /* ------------------------------------------------------------*/

  set PKQREC empty; /* Initialize record area*/

  PKQREC.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
  PKQREC.ZZZSDT = PK0PW01.PK0PWSDT; /* Generation setup date*/
  PKQREC.PK1PKSCH = -1; /* Indicate all schedules*/
  PKQREC.PKQPRTFL = PK0PM021.PKQPRTFL; /* Print flag*/
  PKQREC.PKQTYPCD = PK0PM021.PKQTYPCD; /* Run type code*/

  PKQREC.PKQTKTYP = PK0PM021.PKQTKTYP; /* Ticket type indicator*/
  if (PK0PM021.XWHCD == "51") /* Apparel Warehouse*/
    if (PK0PM021.PK0PM-VM-SEL-FLAG == "V") /* VM only*/
      if (PKQREC.PKQTKTYP == "F") /* Full case*/
        PKQREC.PKQTKTYP = "G"; /* VM full case*/
      else
        if (PKQREC.PKQTKTYP == "R") /* Repack*/
          PKQREC.PKQTKTYP = "S"; /* VM repack*/
        end
      end
    else
      if (PK0PM021.PK0PM-VM-SEL-FLAG == "S") /* Single Carton only*/
        PKQREC.PKQTKTYP = "H"; /* Single carton full case*/
      end
    end
  end

  call "IO2080" ("S1", SQLCA, PKQREC) {isNoRefresh = yes, isExternal = yes}; /* Check for pick tickets*/

   /* ------------------------------------------------------------*/
   /* If pick tickets to print, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
   || SQLCA.VAGen_SQLCODE == -811) /* or multiple rows found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine if there are any pick tickets at all.*/
   /* Return the appropriate error message to the user.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* No pick tickets to print*/

    PKQREC.PKQPRTFL = "*"; /* Indicate any print status*/

    call "IO2080" ("S1", SQLCA, PKQREC) {isNoRefresh = yes, isExternal = yes}; /* Check for pick tickets*/

    if (SQLCA.VAGen_SQLCODE == 100) /* No pick tickets found*/

      set PK0PM021.PK0PMGEN cursor; /* Position cursor*/
      converseLib.validationFailed(20); /* Indicate no pick tickets*/
      PK0PM021.XXXPRCNM = "PK0PS01"; /* Process name*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -811) /* or multiple rows found*/

      set PK0PM021.PKQPRTFL cursor, modified, bold; /* Highlight*/
      PK0PM021.XXXPRCNM = "PK0PS01"; /* Process name*/

      if (PK0PM021.PKQPRTFL == "N") /* Not a reprint request*/

        converseLib.validationFailed(27); /* Indicate already printed*/
      else
        converseLib.validationFailed(41); /* Indicate have not been printed*/

      end

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate resource not available or system error.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PK0PS01 "; /* Process name*/
  TA1REC.TA1LOC = "OBTAIN PICKING LABEL TABLE ROW";
  TA1REC.TA1MAP = "PK0PM021"; /* Map name*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKLBL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKQREC.PKQKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PK0PM021.XXXPRCNM = "PK0PS01"; /* Process name*/

  exit stack; /* Exit to redisplay map*/
end // end PK0PS01

// Verify tickets by schedule
Function PK0PS02()
   /* ------------------------------------------------------------*/
   /* Verify that print queue is valid for the destination.*/
   /* ------------------------------------------------------------*/

  PK0PW01.PK0PWSWL = "N"; /* Initialize line error switch*/

  if (PK0PM022.XRQCODE[PK0PWIXM] > " ") /* Queue was entered*/

    PK0PW01.PK0PWSWQ = " "; /* Initialize queue switch*/
    PK0PW01.PK0PWIXT = 1; /* Initialize table index*/

    while (PK0PW01.PK0PWSWQ == " ") /* Until queue is verified*/

      if (XRQTBL.XROPDEST[PK0PWIXT] == "EOT") /* End of table*/

        PK0PW01.PK0PWSWQ = "N"; /* Indicate queue error*/

      else

        if (XRQTBL.XXXSTAT[PK0PWIXT] == "A"
         && PK0PW01.PK0PMRMT == XRQTBL.XROPDEST[PK0PWIXT]
         && PK0PM022.XRQCODE[PK0PWIXM] == XRQTBL.XRQCODE[PK0PWIXT])

          PK0PW01.PK0PWSWQ = "Y"; /* Indicate queue valid*/

        end

      end

      PK0PW01.PK0PWIXT = PK0PW01.PK0PWIXT + 1; /* Increment table index*/

    end

    if (PK0PW01.PK0PWSWQ == "N") /* Queue was not valid*/

      PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

      set PK0PM022.XRQCODE[PK0PWIXM] cursor, modified, bold;
      converseLib.validationFailed(262); /* Indicate queue invalid*/
      PK0PM022.XXXPRCNM = "PK0PS02"; /* Process name*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Verify that print queue is the same within print group.*/
   /* ------------------------------------------------------------*/

  PK0PW01.PK0PWIXA = PK0PW01.PK0PWIXM - 1; /* Initial from index*/

  while (PK0PW01.PK0PWIXA > 0) /* Until all lines compared*/

    if (PK0PM022.PK0PMGRP[PK0PWIXM] == PK0PM022.PK0PMGRP[PK0PWIXA]
     && PK0PM022.XRQCODE[PK0PWIXM] != PK0PM022.XRQCODE[PK0PWIXA])

      PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

      set PK0PM022.XRQCODE[PK0PWIXM] cursor, modified, bold;
      converseLib.validationFailed(240); /* Indicate must be same*/
      PK0PM022.XXXPRCNM = "PK0PS02"; /* Process name*/

    end

    PK0PW01.PK0PWIXA = PK0PW01.PK0PWIXA - 1; /* Decrement from index*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the ticket reprint flag.*/
   /* ------------------------------------------------------------*/

  if (PK0PM022.PKQPRTFL[PK0PWIXM] != "Y" /* Print flag not yes*/
   && PK0PM022.PKQPRTFL[PK0PWIXM] != "N") /* and flag not no*/

    PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

    set PK0PM022.PKQPRTFL[PK0PWIXM] cursor, modified, bold;
    converseLib.validationFailed(116); /* Indicate print flag invalid*/
    PK0PM022.XXXPRCNM = "PK0PS02"; /* Process name*/

  end

   /* ------------------------------------------------------------*/
   /* Verify that the range does not overlap a previous entry.*/
   /* ------------------------------------------------------------*/

  PK0PW01.PK0PWIXA = PK0PW01.PK0PWIXM - 1; /* Initial from index*/
  PK0PW01.PK0PWIXB = PK0PW01.PK0PWIX2 - 1; /* Initial to index*/

  while (PK0PW01.PK0PWIXA > 0) /* Until all lines compared*/

    if (PK0PM022.PK1PKSCH[PK0PWIX2] != 0 /* To schedule entered*/
     && PK0PM022.PK1PKSCH[PK0PWIX2] >= PK0PM022.PK1PKSCH[PK0PWIXA])

      if (PK0PM022.PK1PKSCH[PK0PWIXB] == 0) /* No to schedule*/

        if (PK0PM022.PK1PKSCH[PK0PWIX2] == PK0PM022.PK1PKSCH[PK0PWIXA])

          PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

          set PK0PM022.PK1PKSCH[PK0PWIX2] cursor, modified, bold;
          converseLib.validationFailed(134); /* Indicate schedule overlaps*/
          PK0PM022.XXXPRCNM = "PK0PS02"; /* Process name*/

        end

      else

        if (PK0PM022.PK1PKSCH[PK0PWIX2] <= PK0PM022.PK1PKSCH[PK0PWIXB])

          PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

          set PK0PM022.PK1PKSCH[PK0PWIX2] cursor, modified, bold;
          converseLib.validationFailed(134); /* Indicate schedule overlaps*/
          PK0PM022.XXXPRCNM = "PK0PS02"; /* Process name*/

        end

      end

    end

    if (PK0PM022.PK1PKSCH[PK0PWIXM] != 0 /* From schedule entered*/
     && PK0PM022.PK1PKSCH[PK0PWIXM] >= PK0PM022.PK1PKSCH[PK0PWIXA])

      if (PK0PM022.PK1PKSCH[PK0PWIXB] == 0) /* No to schedule*/

        if (PK0PM022.PK1PKSCH[PK0PWIXM] == PK0PM022.PK1PKSCH[PK0PWIXA])

          PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

          set PK0PM022.PK1PKSCH[PK0PWIXM] cursor, modified, bold;
          converseLib.validationFailed(134); /* Indicate schedule overlaps*/
          PK0PM022.XXXPRCNM = "PK0PS02"; /* Process name*/

        end

      else

        if (PK0PM022.PK1PKSCH[PK0PWIXM] <= PK0PM022.PK1PKSCH[PK0PWIXB])

          PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

          set PK0PM022.PK1PKSCH[PK0PWIXM] cursor, modified, bold;
          converseLib.validationFailed(134); /* Indicate schedule overlaps*/
          PK0PM022.XXXPRCNM = "PK0PS02"; /* Process name*/

        end

      end

    end

    PK0PW01.PK0PWIXA = PK0PW01.PK0PWIXA - 1; /* Decrement from index*/
    PK0PW01.PK0PWIXB = PK0PW01.PK0PWIXB - 1; /* Decrement to index*/

  end

   /* ------------------------------------------------------------*/
   /* If "TO" schedule was entered, verify that it is equal to or*/
   /* greater than the "FROM" schedule.*/
   /* ------------------------------------------------------------*/

  if (PK0PM022.PK1PKSCH[PK0PWIX2] != 0 /* To schedule entered*/
   && PK0PM022.PK1PKSCH[PK0PWIX2] < PK0PM022.PK1PKSCH[PK0PWIXM])

    PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

    set PK0PM022.PK1PKSCH[PK0PWIX2] cursor, modified, bold;
    converseLib.validationFailed(133); /* Indicate schedule invalid*/
    PK0PM022.XXXPRCNM = "PK0PS02"; /* Process name*/

  end

   /* ------------------------------------------------------------*/
   /* Verify that "FROM" schedule was entered.*/
   /* ------------------------------------------------------------*/

  if (PK0PM022.PK1PKSCH[PK0PWIXM] == 0) /* From schedule not entered*/

    PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

    set PK0PM022.PK1PKSCH[PK0PWIXM] cursor, modified, bold;
    converseLib.validationFailed(132); /* Indicate schedule required*/
    PK0PM022.XXXPRCNM = "PK0PS02"; /* Process name*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the output print group.*/
   /* ------------------------------------------------------------*/

  if (PK0PM022.PK0PMGRP[PK0PWIXM] < "1" /* Output print group must*/
   || PK0PM022.PK0PMGRP[PK0PWIXM] > "9") /* be from 1 through 9*/

    PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

    set PK0PM022.PK0PMGRP[PK0PWIXM] cursor, modified, bold;
    converseLib.validationFailed(157); /* Indicate print group invalid*/
    PK0PM022.XXXPRCNM = "PK0PS02"; /* Process name*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (PK0PW01.PK0PWSWG == "Y" /* Generation error found*/
   || PK0PW01.PK0PWSWI == "Y" /* or ticket type error found*/
   || PK0PW01.PK0PWSWL == "Y") /* or line error found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If "TO" schedule was entered and is not the same as "FROM",*/
   /* determine whether there are any tickets to print.*/
   /* ------------------------------------------------------------*/

  if (PK0PM022.PK1PKSCH[PK0PWIX2] != 0 /* To schedule entered*/
   && PK0PM022.PK1PKSCH[PK0PWIX2] != PK0PM022.PK1PKSCH[PK0PWIXM])

    PK0PS06(); /* Select control for TO schedule*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether there are any tickets to print.*/
   /* ------------------------------------------------------------*/

  set PKQREC empty; /* Initialize record area*/

  PKQREC.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
  PKQREC.ZZZSDT = PK0PW01.PK0PWSDT; /* Generation setup date*/
  PKQREC.PK1PKSCH = PK0PM022.PK1PKSCH[PK0PWIXM]; /* FROM schedule*/
  PKQREC.PKQPRTFL = PK0PM022.PKQPRTFL[PK0PWIXM]; /* Print flag*/
  PKQREC.PKQTYPCD = "*"; /* Indicate any run type code*/

  PKQREC.PKQTKTYP = PK0PM022.PKQTKTYP; /* Ticket type indicator*/
  if (PK0PM022.XWHCD == "51") /* Apparel Warehouse*/
    if (PK0PM022.PK0PM-VM-SEL-FLAG == "V") /* VM only*/
      if (PKQREC.PKQTKTYP == "F") /* Full case*/
        PKQREC.PKQTKTYP = "G"; /* VM full case*/
      else
        if (PKQREC.PKQTKTYP == "R") /* Repack*/
          PKQREC.PKQTKTYP = "S"; /* VM repack*/
        end
      end
    else
      if (PK0PM022.PK0PM-VM-SEL-FLAG == "S") /* Single Carton only*/
        PKQREC.PKQTKTYP = "H"; /* Single carton full case*/
      end
    end
  end

  call "IO2080" ("S1", SQLCA, PKQREC) {isNoRefresh = yes, isExternal = yes}; /* Check for tickets*/

   /* ------------------------------------------------------------*/
   /* If tickets to print, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
   || SQLCA.VAGen_SQLCODE == -811) /* or multiple rows found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine if there are any pick tickets at all.*/
   /* Return the appropriate error message to the user.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* No pick tickets to print*/

    PKQREC.PKQPRTFL = "*"; /* Indicate any print status*/

    call "IO2080" ("S1", SQLCA, PKQREC) {isNoRefresh = yes, isExternal = yes}; /* Check for pick tickets*/

    if (SQLCA.VAGen_SQLCODE == 100) /* No pick tickets found*/

      set PK0PM022.PK1PKSCH[PK0PWIXM] cursor, modified, bold;
      converseLib.validationFailed(20); /* Indicate no pick tickets*/
      PK0PM022.XXXPRCNM = "PK0PS02"; /* Process name*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -811) /* or multiple rows found*/

      set PK0PM022.PK1PKSCH[PK0PWIXM] cursor, modified, bold;
      PK0PM022.XXXPRCNM = "PK0PS02"; /* Process name*/

      if (PK0PM022.PKQPRTFL == "N") /* Not a reprint request*/

        converseLib.validationFailed(27); /* Indicate already printed*/
      else
        converseLib.validationFailed(41); /* Indicate have not been printed*/

      end

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate resource not available or system error.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PK0PS02 "; /* Process name*/
  TA1REC.TA1LOC = "OBTAIN PICKING LABEL TO ROW";
  TA1REC.TA1MAP = "PK0PM022"; /* Map name*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKLBL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKQREC.PKQKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PK0PM022.XXXPRCNM = "PK0PS02"; /* Process name*/

  exit stack; /* Exit to redisplay map*/
end // end PK0PS02

// Verify ticket by area/zone/row
Function PK0PS03()
   /* ------------------------------------------------------------*/
   /* Verify that print queue is valid for the destination.*/
   /* ------------------------------------------------------------*/

  PK0PW01.PK0PWSWL = "N"; /* Initialize line error switch*/

  if (PK0PM023.XRQCODE[PK0PWIXM] > " ") /* Queue was entered*/

    PK0PW01.PK0PWSWQ = " "; /* Initialize queue switch*/
    PK0PW01.PK0PWIXT = 1; /* Initialize table index*/

    while (PK0PW01.PK0PWSWQ == " ") /* Until queue is verified*/

      if (XRQTBL.XROPDEST[PK0PWIXT] == "EOT") /* End of table*/

        PK0PW01.PK0PWSWQ = "N"; /* Indicate queue error*/

      else

        if (XRQTBL.XXXSTAT[PK0PWIXT] == "A"
         && PK0PW01.PK0PMRMT == XRQTBL.XROPDEST[PK0PWIXT]
         && PK0PM023.XRQCODE[PK0PWIXM] == XRQTBL.XRQCODE[PK0PWIXT])

          PK0PW01.PK0PWSWQ = "Y"; /* Indicate queue valid*/

        end

      end

      PK0PW01.PK0PWIXT = PK0PW01.PK0PWIXT + 1; /* Increment table index*/

    end

    if (PK0PW01.PK0PWSWQ == "N") /* Queue was not valid*/

      PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

      set PK0PM023.XRQCODE[PK0PWIXM] cursor, modified, bold;
      converseLib.validationFailed(262); /* Indicate queue invalid*/
      PK0PM023.XXXPRCNM = "PK0PS03"; /* Process name*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Verify that print queue is the same within print group.*/
   /* ------------------------------------------------------------*/

  PK0PW01.PK0PWIX2 = PK0PW01.PK0PWIXM - 1; /* Initialize index*/

  while (PK0PW01.PK0PWIX2 > 0) /* Until all lines checked*/

    if (PK0PM023.PK0PMGRP[PK0PWIXM] == PK0PM023.PK0PMGRP[PK0PWIX2]
     && PK0PM023.XRQCODE[PK0PWIXM] != PK0PM023.XRQCODE[PK0PWIX2])

      PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

      set PK0PM023.XRQCODE[PK0PWIXM] cursor, modified, bold;
      converseLib.validationFailed(240); /* Indicate must be same*/
      PK0PM023.XXXPRCNM = "PK0PS03"; /* Process name*/

    end

    PK0PW01.PK0PWIX2 = PK0PW01.PK0PWIX2 - 1; /* Initialize index*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the ticket reprint flag.*/
   /* ------------------------------------------------------------*/

  if (PK0PM023.PKQPRTFL[PK0PWIXM] != "Y" /* Print flag not yes*/
   && PK0PM023.PKQPRTFL[PK0PWIXM] != "N") /* and flag not no*/

    PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

    set PK0PM023.PKQPRTFL[PK0PWIXM] cursor, modified, bold;
    converseLib.validationFailed(116); /* Indicate print flag invalid*/
    PK0PM023.XXXPRCNM = "PK0PS03"; /* Process name*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the run type code.*/
   /* ------------------------------------------------------------*/

  if (PK0PM023.PKQTYPCD[PK0PWIXM] != "N" /* Not normal run type*/
   && PK0PM023.PKQTYPCD[PK0PWIXM] != "Q" 
   /* and not nightly rush run type*/
   && PK0PM023.PKQTYPCD[PK0PWIXM] != "R" /* and not daily rush run type*/
   && PK0PM023.PKQTYPCD[PK0PWIXM] != "S" /* and not same day run type*/
   && PK0PM023.PKQTYPCD[PK0PWIXM] != "*") /* and not all run types*/

    PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

    set PK0PM023.PKQTYPCD[PK0PWIXM] cursor, modified, bold;
    converseLib.validationFailed(155); /* Indicate run type invalid*/
    PK0PM023.XXXPRCNM = "PK0PS03"; /* Process name*/

  end

   /* ------------------------------------------------------------*/
   /* Ensure that area/zone/row was entered.*/
   /* ------------------------------------------------------------*/

  if (PK0PM023.SL5ROWCD[PK0PWIXM] <= " ") /* Row not entered*/

    PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

    set PK0PM023.SL5ROWCD[PK0PWIXM] cursor, modified, bold;
    converseLib.validationFailed(137); /* Indicate row required*/
    PK0PM023.XXXPRCNM = "PK0PS03"; /* Process name*/

  end

  if (PK0PM023.SL4ZONE[PK0PWIXM] <= " ") /* Zone not entered*/

    PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

    set PK0PM023.SL4ZONE[PK0PWIXM] cursor, modified, bold;
    converseLib.validationFailed(136); /* Indicate zone required*/
    PK0PM023.XXXPRCNM = "PK0PS03"; /* Process name*/

  end

  if (PK0PM023.XARCD[PK0PWIXM] <= " ") /* Area not entered*/

    PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

    set PK0PM023.XARCD[PK0PWIXM] cursor, modified, bold;
    converseLib.validationFailed(135); /* Indicate area required*/
    PK0PM023.XXXPRCNM = "PK0PS03"; /* Process name*/

  end

   /* ------------------------------------------------------------*/
   /* Ensure that no duplicate area/zone/rows were entered.*/
   /* ------------------------------------------------------------*/

  PK0PW01.PK0PWIX2 = PK0PW01.PK0PWIXM - 1; /* Initialize index*/

  while (PK0PW01.PK0PWIX2 > 0) /* Until all lines checked*/

    if (PK0PM023.XARCD[PK0PWIX2] == PK0PM023.XARCD[PK0PWIXM]
     && PK0PM023.SL4ZONE[PK0PWIX2] == PK0PM023.SL4ZONE[PK0PWIXM]
     && PK0PM023.SL5ROWCD[PK0PWIX2] == PK0PM023.SL5ROWCD[PK0PWIXM])

      PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

      set PK0PM023.XARCD[PK0PWIXM] cursor, modified, bold;
      set PK0PM023.SL4ZONE[PK0PWIXM] modified, bold;
      set PK0PM023.SL5ROWCD[PK0PWIXM] modified, bold;
      converseLib.validationFailed(140); /* Indicate duplicate area/zone/row*/
      PK0PM023.XXXPRCNM = "PK0PS03"; /* Process name*/

    end

    PK0PW01.PK0PWIX2 = PK0PW01.PK0PWIX2 - 1; /* Initialize index*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the output print group.*/
   /* ------------------------------------------------------------*/

  if (PK0PM023.PK0PMGRP[PK0PWIXM] < "1" /* Output print group must*/
   || PK0PM023.PK0PMGRP[PK0PWIXM] > "9") /* be from 1 through 9*/

    PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

    set PK0PM023.PK0PMGRP[PK0PWIXM] cursor, modified, bold;
    converseLib.validationFailed(157); /* Indicate print group invalid*/
    PK0PM023.XXXPRCNM = "PK0PS03"; /* Process name*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PK0PW01.PK0PWSWG == "Y" /* Generation error found*/
   || PK0PW01.PK0PWSWI == "Y" /* or ticket type error found*/
   || PK0PW01.PK0PWSWL == "Y") /* or line error found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether there are any tickets to print.*/
   /* ------------------------------------------------------------*/

  set PKQREC empty; /* Initialize record area*/

  PKQREC.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
  PKQREC.ZZZSDT = PK0PW01.PK0PWSDT; /* Generation setup date*/
  PKQREC.XARCD = PK0PM023.XARCD[PK0PWIXM];
  PKQREC.SL4ZONE = PK0PM023.SL4ZONE[PK0PWIXM];
  PKQREC.SL5ROWCD = PK0PM023.SL5ROWCD[PK0PWIXM];
  PKQREC.PKQPRTFL = PK0PM023.PKQPRTFL[PK0PWIXM];
  PKQREC.PKQTYPCD = PK0PM023.PKQTYPCD[PK0PWIXM];

  PKQREC.PKQTKTYP = PK0PM023.PKQTKTYP; /* Ticket type indicator*/
  if (PK0PM023.XWHCD == "51") /* Apparel Warehouse*/
    if (PK0PM023.PK0PM-VM-SEL-FLAG == "V") /* VM only*/
      if (PKQREC.PKQTKTYP == "F") /* Full case*/
        PKQREC.PKQTKTYP = "G"; /* VM full case*/
      else
        if (PKQREC.PKQTKTYP == "R") /* Repack*/
          PKQREC.PKQTKTYP = "S"; /* VM repack*/
        end
      end
    else
      if (PK0PM023.PK0PM-VM-SEL-FLAG == "S") /* Single Carton only*/
        PKQREC.PKQTKTYP = "H"; /* Single carton full case*/
      end
    end
  end

  call "IO2080" ("S2", SQLCA, PKQREC) {isNoRefresh = yes, isExternal = yes}; /* Check for tickets*/

   /* ------------------------------------------------------------*/
   /* If tickets to print, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
   || SQLCA.VAGen_SQLCODE == -811) /* or multiple rows found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine if there are any pick tickets at all.*/
   /* Return the appropriate error message to the user.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* No pick tickets to print*/

    PKQREC.PKQPRTFL = "*"; /* Indicate any print status*/

    call "IO2080" ("S2", SQLCA, PKQREC) {isNoRefresh = yes, isExternal = yes}; /* Check for pick tickets*/

    if (SQLCA.VAGen_SQLCODE == 100) /* No pick tickets found*/

      set PK0PM023.XARCD[PK0PWIXM] cursor, modified, bold;
      set PK0PM023.SL4ZONE[PK0PWIXM] modified, bold;
      set PK0PM023.SL5ROWCD[PK0PWIXM] modified, bold;
      converseLib.validationFailed(20); /* Indicate no pick tickets*/
      PK0PM023.XXXPRCNM = "PK0PS03"; /* Process name*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -811) /* or multiple rows found*/

      set PK0PM023.XARCD[PK0PWIXM] cursor, modified, bold;
      set PK0PM023.SL4ZONE[PK0PWIXM] modified, bold;
      set PK0PM023.SL5ROWCD[PK0PWIXM] modified, bold;
      PK0PM023.XXXPRCNM = "PK0PS03"; /* Process name*/

      if (PK0PM023.PKQPRTFL == "N") /* Not a reprint request*/

        converseLib.validationFailed(27); /* Indicate already printed*/
      else
        converseLib.validationFailed(41); /* Indicate have not been printed*/

      end

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate resource not available or system error.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PK0PS03 "; /* Process name*/
  TA1REC.TA1LOC = "OBTAIN PICKING LABEL TABLE ROW";
  TA1REC.TA1MAP = "PK0PM023"; /* Map name*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKLBL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKQREC.PKQKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PK0PM023.XXXPRCNM = "PK0PS03"; /* Process name*/

  exit stack; /* Exit to redisplay map*/
end // end PK0PS03

// Verify tickets by sequence
Function PK0PS04()
   /* ------------------------------------------------------------*/
   /* Verify that print queue is valid for the destination.*/
   /* Verify that print queue is the same within print group.*/
   /* Verify the ticket reprint flag.*/
   /* Verify that the range does not overlap a previous entry.*/
   /* If "TO" sequence was entered, verify that it is equal to or*/
   /* greater than the "FROM" sequence.*/
   /* Verify that "FROM" sequence was entered.*/
   /* Verify the output print group.*/
   /* ------------------------------------------------------------*/

  if (PK0PM024.XRQCODE[PK0PWIXM] > " ") /* Queue was entered*/

    PK0PW01.PK0PWSWQ = " "; /* Initialize queue switch*/
    PK0PW01.PK0PWIXT = 1; /* Initialize table index*/

    while (PK0PW01.PK0PWSWQ == " ") /* Until queue is verified*/

      if (XRQTBL.XROPDEST[PK0PWIXT] == "EOT") /* End of table*/

        PK0PW01.PK0PWSWQ = "N"; /* Indicate queue error*/

      else

        if (XRQTBL.XXXSTAT[PK0PWIXT] == "A"
         && PK0PW01.PK0PMRMT == XRQTBL.XROPDEST[PK0PWIXT]
         && PK0PM024.XRQCODE[PK0PWIXM] == XRQTBL.XRQCODE[PK0PWIXT])

          PK0PW01.PK0PWSWQ = "Y"; /* Indicate queue valid*/

        end

      end

      PK0PW01.PK0PWIXT = PK0PW01.PK0PWIXT + 1; /* Increment table index*/

    end

    if (PK0PW01.PK0PWSWQ == "N") /* Queue was not valid*/

      set PK0PM024.XRQCODE[PK0PWIXM] cursor, modified, bold;
      converseLib.validationFailed(262); /* Indicate queue invalid*/
      PK0PM024.XXXPRCNM = "PK0PS04"; /* Process name*/

    end

  end

  PK0PW01.PK0PWIXA = PK0PW01.PK0PWIXM - 1; /* Initial from index*/

  while (PK0PW01.PK0PWIXA > 0) /* Until all lines compared*/

    if (PK0PM024.PK0PMGRP[PK0PWIXM] == PK0PM024.PK0PMGRP[PK0PWIXA]
     && PK0PM024.XRQCODE[PK0PWIXM] != PK0PM024.XRQCODE[PK0PWIXA])

      set PK0PM024.XRQCODE[PK0PWIXM] cursor, modified, bold;
      converseLib.validationFailed(240); /* Indicate must be same*/
      PK0PM024.XXXPRCNM = "PK0PS04"; /* Process name*/

    end

    PK0PW01.PK0PWIXA = PK0PW01.PK0PWIXA - 1; /* Decrement from index*/

  end

  PK0PW01.PK0PWIXA = PK0PW01.PK0PWIXM - 1; /* Initial from index*/
  PK0PW01.PK0PWIXB = PK0PW01.PK0PWIX2 - 1; /* Initial to index*/

  while (PK0PW01.PK0PWIXA > 0) /* Until all lines compared*/

    if (PK0PM024.PK0PMGRP[PK0PWIXM] == PK0PM024.PK0PMGRP[PK0PWIXA]
     && PK0PM024.XRQCODE[PK0PWIXM] != PK0PM024.XRQCODE[PK0PWIXA])

      set PK0PM024.XRQCODE[PK0PWIXA] cursor, modified, bold;
      converseLib.validationFailed(240); /* Indicate queue invalid*/
      PK0PM024.XXXPRCNM = "PK0PS04"; /* Process name*/

    end

    if (PK0PM024.PK0PMSEQ[PK0PWIX2] != 0 /* To sequence entered*/
     && PK0PM024.PK0PMSEQ[PK0PWIX2] >= PK0PM024.PK0PMSEQ[PK0PWIXA])

      if (PK0PM024.PK0PMSEQ[PK0PWIXB] == 0) /* No to sequence*/

        if (PK0PM024.PK0PMSEQ[PK0PWIX2] == PK0PM024.PK0PMSEQ[PK0PWIXA])

          set PK0PM024.PK0PMSEQ[PK0PWIX2] cursor, modified, bold;
          converseLib.validationFailed(144); /* Indicate sequence overlaps*/
          PK0PM024.XXXPRCNM = "PK0PS04"; /* Process name*/

        end

      else

        if (PK0PM024.PK0PMSEQ[PK0PWIX2] <= PK0PM024.PK0PMSEQ[PK0PWIXB])

          set PK0PM024.PK0PMSEQ[PK0PWIX2] cursor, modified, bold;
          converseLib.validationFailed(144); /* Indicate sequence overlaps*/
          PK0PM024.XXXPRCNM = "PK0PS04"; /* Process name*/

        end

      end

    end

    if (PK0PM024.PK0PMSEQ[PK0PWIXM] != 0 /* From sequence entered*/
     && PK0PM024.PK0PMSEQ[PK0PWIXM] >= PK0PM024.PK0PMSEQ[PK0PWIXA])

      if (PK0PM024.PK0PMSEQ[PK0PWIXB] == 0) /* No to sequence*/

        if (PK0PM024.PK0PMSEQ[PK0PWIXM] == PK0PM024.PK0PMSEQ[PK0PWIXA])

          set PK0PM024.PK0PMSEQ[PK0PWIXM] cursor, modified, bold;
          converseLib.validationFailed(144); /* Indicate sequence overlaps*/
          PK0PM024.XXXPRCNM = "PK0PS04"; /* Process name*/

        end

      else

        if (PK0PM024.PK0PMSEQ[PK0PWIXM] <= PK0PM024.PK0PMSEQ[PK0PWIXB])

          set PK0PM024.PK0PMSEQ[PK0PWIXM] cursor, modified, bold;
          converseLib.validationFailed(144); /* Indicate sequence overlaps*/
          PK0PM024.XXXPRCNM = "PK0PS04"; /* Process name*/

        end

      end

    end

    PK0PW01.PK0PWIXA = PK0PW01.PK0PWIXA - 1; /* Decrement from index*/
    PK0PW01.PK0PWIXB = PK0PW01.PK0PWIXB - 1; /* Decrement to index*/

  end

  if (PK0PM024.PK0PMSEQ[PK0PWIX2] != 0 /* To sequence entered*/
   && PK0PM024.PK0PMSEQ[PK0PWIX2] < PK0PM024.PK0PMSEQ[PK0PWIXM])

    set PK0PM024.PK0PMSEQ[PK0PWIX2] cursor, modified, bold;
    converseLib.validationFailed(145); /* Indicate sequence invalid*/
    PK0PM024.XXXPRCNM = "PK0PS04"; /* Process name*/

  end

  if (PK0PM024.PK0PMSEQ[PK0PWIXM] == 0) /* From sequence not entered*/

    set PK0PM024.PK0PMSEQ[PK0PWIXM] cursor, modified, bold;
    converseLib.validationFailed(146); /* Indicate sequence required*/
    PK0PM024.XXXPRCNM = "PK0PS04"; /* Process name*/

  end

  if (PK0PM024.PK0PMGRP[PK0PWIXM] < "1" /* Output print group must*/
   || PK0PM024.PK0PMGRP[PK0PWIXM] > "9") /* be from 1 through 9*/

    set PK0PM024.PK0PMGRP[PK0PWIXM] cursor, modified, bold;
    converseLib.validationFailed(157); /* Indicate print group invalid*/
    PK0PM024.XXXPRCNM = "PK0PS04"; /* Process name*/

  end
end // end PK0PS04

// Verify area/zone/location
Function PK0PS05()
   /* ------------------------------------------------------------*/
   /* Verify that print queue is valid for the destination.*/
   /* Verify that print queue is the same within print group.*/
   /* Verify that the number of labels to print was entered.*/
   /* Verify that the spur number was entered.*/
   /* Verify any entered area/zone/location fields.*/
   /* Verify the output print group.*/
   /* Determine whether the area/zone/location is valid.*/
   /* If invalid or not available, return an error.*/
   /* If any other error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  PK0PW01.PK0PWSWL = "N"; /* Initialize line error switch*/

  if (PK0PM025.XRQCODE[PK0PWIXM] > " ") /* Queue was entered*/

    PK0PW01.PK0PWSWQ = " "; /* Initialize queue switch*/
    PK0PW01.PK0PWIXT = 1; /* Initialize table index*/

    while (PK0PW01.PK0PWSWQ == " ") /* Until queue is verified*/

      if (XRQTBL.XROPDEST[PK0PWIXT] == "EOT") /* End of table*/

        PK0PW01.PK0PWSWQ = "N"; /* Indicate queue error*/

      else

        if (XRQTBL.XXXSTAT[PK0PWIXT] == "A"
         && PK0PW01.PK0PMRMT == XRQTBL.XROPDEST[PK0PWIXT]
         && PK0PM025.XRQCODE[PK0PWIXM] == XRQTBL.XRQCODE[PK0PWIXT])

          PK0PW01.PK0PWSWQ = "Y"; /* Indicate queue valid*/

        end

      end

      PK0PW01.PK0PWIXT = PK0PW01.PK0PWIXT + 1; /* Increment table index*/

    end

    if (PK0PW01.PK0PWSWQ == "N") /* Queue was not valid*/

      PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

      set PK0PM025.XRQCODE[PK0PWIXM] cursor, modified, bold;
      converseLib.validationFailed(262); /* Indicate queue invalid*/
      PK0PM025.XXXPRCNM = "PK0PS05"; /* Process name*/

    end

  end

  PK0PW01.PK0PWIX2 = PK0PW01.PK0PWIXM - 1; /* Initialize index*/

  while (PK0PW01.PK0PWIX2 > 0) /* Until all lines checked*/

    if (PK0PM025.PK0PMGRP[PK0PWIXM] == PK0PM025.PK0PMGRP[PK0PWIX2]
     && PK0PM025.XRQCODE[PK0PWIXM] != PK0PM025.XRQCODE[PK0PWIX2])

      PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

      set PK0PM025.XRQCODE[PK0PWIXM] cursor, modified, bold;
      converseLib.validationFailed(240); /* Indicate must be same*/
      PK0PM025.XXXPRCNM = "PK0PS05"; /* Process name*/

    end

    PK0PW01.PK0PWIX2 = PK0PW01.PK0PWIX2 - 1; /* Initialize index*/

  end

  if (PK0PM025.PK0PMCNT[PK0PWIXM] <= 0) /* Count not entered*/

    PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

    set PK0PM025.PK0PMCNT[PK0PWIXM] cursor, modified, bold;
    converseLib.validationFailed(138); /* Indicate count missing*/
    PK0PM025.XXXPRCNM = "PK0PS05"; /* Process name*/

  end

  if (PK0PM025.PKERNSRN[PK0PWIXM] <= 0) /* Spur not entered*/

    PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

    set PK0PM025.PKERNSRN[PK0PWIXM] cursor, modified, bold;
    converseLib.validationFailed(147); /* Indicate spur missing*/
    PK0PM025.XXXPRCNM = "PK0PS05"; /* Process name*/

  end

  if (PK0PM025.XARCD[PK0PWIXM] > " "   /* Area entered*/
   || PK0PM025.SL4ZONE[PK0PWIXM] > " " /* or zone entered*/
   || PK0PM025.SL5LOCTN[PK0PWIXM] > " ") /* or row entered*/

    if (PK0PM025.SL5LOCTN[PK0PWIXM] <= " " /* Row not entered*/
     || PK0PM025.SL5LOCTN[PK0PWIXM] == "%%%%%%") /* or invalid value*/

      PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

      set PK0PM025.SL5LOCTN[PK0PWIXM] cursor, modified, bold;
      converseLib.validationFailed(51); /* Indicate location required*/
      PK0PM025.XXXPRCNM = "PK0PS05"; /* Process name*/

    end

    if (PK0PM025.SL4ZONE[PK0PWIXM] <= " ") /* Zone not entered*/

      PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

      set PK0PM025.SL4ZONE[PK0PWIXM] cursor, modified, bold;
      converseLib.validationFailed(136); /* Indicate zone required*/
      PK0PM025.XXXPRCNM = "PK0PS05"; /* Process name*/

    end

    if (PK0PM025.XARCD[PK0PWIXM] <= " ") /* Area not entered*/

      PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

      set PK0PM025.XARCD[PK0PWIXM] cursor, modified, bold;
      converseLib.validationFailed(135); /* Indicate area required*/
      PK0PM025.XXXPRCNM = "PK0PS05"; /* Process name*/

    end

  end

  if (PK0PM025.PK0PMGRP[PK0PWIXM] < "1" /* Output print group must*/
   || PK0PM025.PK0PMGRP[PK0PWIXM] > "9") /* be from 1 through 9*/

    PK0PW01.PK0PWSWL = "Y"; /* Indicate line error*/

    set PK0PM025.PK0PMGRP[PK0PWIXM] cursor, modified, bold;
    converseLib.validationFailed(157); /* Indicate print group invalid*/
    PK0PM025.XXXPRCNM = "PK0PS05"; /* Process name*/

  end

  if (PK0PW01.PK0PWSWL == "N" /* No line error*/
   && PK0PM025.XARCD[PK0PWIXM] > " ") /* and area entered*/

    set SL5REC empty; /* Initialize record area*/

    SL5REC.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
    SL5REC.XARCD = PK0PM025.XARCD[PK0PWIXM]; /* Area*/
    SL5REC.SL4ZONE = PK0PM025.SL4ZONE[PK0PWIXM]; /* Zone*/

    if (PK0PM025.SL5LOCTN[PK0PWIXM] == "*") /* All locations*/

      SL5REC.SL5LOCTN = "%%%%%%"; /* Indicate any location*/
    else
      SL5REC.SL5LOCTN = PK0PM025.SL5LOCTN[PK0PWIXM];

    end

    call "IO1490" ("SA", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes}; /* Verify location*/

    if (SQLCA.VAGen_SQLCODE == 100) /* No pick tickets to print*/

      set PK0PM025.XARCD[PK0PWIXM] cursor, modified, bold;
      set PK0PM025.SL4ZONE[PK0PWIXM] modified, bold;
      set PK0PM025.SL5LOCTN[PK0PWIXM] modified, bold;
      converseLib.validationFailed(238); /* Indicate invalid location*/
      PK0PM025.XXXPRCNM = "PK0PS05"; /* Process name*/

    else

      if (SQLCA.VAGen_SQLCODE != -811 /* Not multiple rows found*/
       && SQLCA.VAGen_SQLCODE != 0)   /* and not normal return code*/

        if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

          converseLib.validationFailed(28); /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/

        else

          converseLib.validationFailed(29); /* Indicate system error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/

          converseLib.clearScreen();
           /* Clear screen before redisplay*/

        end

        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0PS05 "; /* Process name*/
        TA1REC.TA1LOC = "OBTAIN STOCK LOCATION TABLE ROW";
        TA1REC.TA1MAP = "PK0PM025"; /* Map name*/
        TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VLOCAT01"; /* Table view name*/
        TA1REC.TA1TBLKE = SL5REC.SL5KEY; /* Table key*/

        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        PK0PM025.XXXPRCNM = "PK0PS05"; /* Process name*/

        exit stack; /* Exit to redisplay map*/

      end

      PK0PS08(); /* edit spur against area/zone*/

    end

  end
end // end PK0PS05

// Select control for TO schedule
Function PK0PS06()
   /* ------------------------------------------------------------*/
   /* Determine whether there are any tickets to print.*/
   /* ------------------------------------------------------------*/

  set PKQREC empty; /* Initialize record area*/

  PKQREC.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
  PKQREC.ZZZSDT = PK0PW01.PK0PWSDT; /* Generation setup date*/
  PKQREC.PK1PKSCH = PK0PM022.PK1PKSCH[PK0PWIX2]; /* TO schedule*/
  PKQREC.PKQPRTFL = PK0PM022.PKQPRTFL[PK0PWIXM]; /* Print flag*/
  PKQREC.PKQTYPCD = "*"; /* Indicate any run type code*/
  PKQREC.PKQTKTYP = PK0PM022.PKQTKTYP; /* Ticket type indicator*/
  if (PK0PM022.XWHCD == "51") /* Apparel Warehouse*/
    if (PK0PM022.PK0PM-VM-SEL-FLAG == "V") /* VM only*/
      if (PKQREC.PKQTKTYP == "F") /* Full case*/
        PKQREC.PKQTKTYP = "G"; /* VM full case*/
      else
        if (PKQREC.PKQTKTYP == "R") /* Repack*/
          PKQREC.PKQTKTYP = "S"; /* VM repack*/
        end
      end
    else
      if (PK0PM022.PK0PM-VM-SEL-FLAG == "S") /* Single Carton only*/
        PKQREC.PKQTKTYP = "H"; /* Single carton full case*/
      end
    end
  end

  call "IO2080" ("S1", SQLCA, PKQREC) {isNoRefresh = yes, isExternal = yes}; /* Check for tickets*/

   /* ------------------------------------------------------------*/
   /* If tickets to print, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
   || SQLCA.VAGen_SQLCODE == -811) /* or multiple rows found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine if there are any pick tickets at all.*/
   /* Return the appropriate error message to the user.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* No pick tickets to print*/

    PKQREC.PKQPRTFL = "*"; /* Indicate any print status*/

    call "IO2080" ("S1", SQLCA, PKQREC) {isNoRefresh = yes, isExternal = yes}; /* Check for pick tickets*/

    if (SQLCA.VAGen_SQLCODE == 100) /* No pick tickets found*/

      set PK0PM022.PK1PKSCH[PK0PWIX2] cursor, modified, bold;
      converseLib.validationFailed(20); /* Indicate no pick tickets*/
      PK0PM022.XXXPRCNM = "PK0PS06"; /* Process name*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -811) /* or multiple rows found*/

      set PK0PM022.PK1PKSCH[PK0PWIX2] cursor, modified, bold;
      PK0PM022.XXXPRCNM = "PK0PS06"; /* Process name*/

      if (PK0PM022.PKQPRTFL == "N") /* Not a reprint request*/

        converseLib.validationFailed(27); /* Indicate already printed*/
      else
        converseLib.validationFailed(41); /* Indicate have not been printed*/

      end

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate resource not available or system error.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PK0PS06 "; /* Process name*/
  TA1REC.TA1LOC = "OBTAIN PICKING LABEL TO ROW";
  TA1REC.TA1MAP = "PK0PM022"; /* Map name*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKLBL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKQREC.PKQKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PK0PM022.XXXPRCNM = "PK0PS06"; /* Process name*/

  exit stack; /* Exit to redisplay map*/
end // end PK0PS06

// Obtain warehouse control table
Function PK0PS07()
   /* ------------------------------------------------------------*/
   /* If warehouse changed, obtain Warehouse Control Table row.*/
   /* If no row is found, indicate error and ezertn.*/
   /* ------------------------------------------------------------*/

  PKDREC.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/

  call "IO1890" ("S ", SQLCA, PKDREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* row not found on table*/

    set PKDREC empty; /* Clear warehouse control record*/
    converseLib.validationFailed(20); /* Indicate no tickets to print*/
    return; /* exit from statement group*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0PS07 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN WAREHOUSE CONTROL ROW";
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPKCTL01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKDREC.PKDKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    set PKDREC empty; /* Clear warehouse control record*/

    return; /* Exit*/

  end


end // end PK0PS07

// Verify area/zone/spur
Function PK0PS08()
   /* ------------------------------------------------------------*/
   /* Edit spur nbr against whse/area/zone*/
   /* ------------------------------------------------------------*/

  set PKEREC empty; /* Initialize record area*/
  set SQLCA empty;

  PKEREC.XWHCD = PK0PW01.XWHCD; /* Warehouse code*/
  PKEREC.PKETOARE = PK0PM025.XARCD[PK0PWIXM]; /* area*/
  PKEREC.PKETOZON = PK0PM025.SL4ZONE[PK0PWIXM]; /* Zone*/
  PKEREC.PKERNSRN = PK0PM025.PKERNSRN[PK0PWIXM]; /* Spur*/

  call "IO2150" ("SA", SQLCA, PKEREC) {isNoRefresh = yes, isExternal = yes}; /* Verify spur #*/

  if (SQLCA.VAGen_SQLCODE == 100) /* valid area/zone/spur not found*/

    set PK0PM025.XARCD[PK0PWIXM] cursor, modified, bold;
    set PK0PM025.SL4ZONE[PK0PWIXM] modified, bold;
    set PK0PM025.PKERNSRN[PK0PWIXM] modified, bold;
    converseLib.validationFailed(387); /* Indicate invalid location*/
    PK0PM025.XXXPRCNM = "PK0PS08"; /* Process name*/

  else

    if (SQLCA.VAGen_SQLCODE != -811 /* Not multiple rows found*/
     && SQLCA.VAGen_SQLCODE != 0)   /* and not normal return code*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

        converseLib.validationFailed(28); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/

      else

        converseLib.validationFailed(29); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/

        converseLib.clearScreen();
         /* Clear screen before redisplay*/

      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PK0PS08 "; /* Process name*/
      TA1REC.TA1LOC = "EDIT AREA/ZONE/SPUR  ";
      TA1REC.TA1MAP = "PK0PM025"; /* Map name*/
      TA1REC.TA1DBASE = "DPICK  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPDRAT01"; /* Table view name*/
      TA1REC.TA1TBLKE = PKEREC.PKEKEY; /* Table key*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      PK0PM025.XXXPRCNM = "PK0PS08"; /* Process name*/

      exit stack; /* Exit to redisplay map*/

    end

  end
end // end PK0PS08

// Call TA0040 - Validate Date's
Function PK0PS09()

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};


  if (TA2REC.TA2RTNCD > 333)
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0PS09 "; /* Process name*/
    TA1REC.TA1LOC = "VALIDATE DATES";
    TA1REC.TA1TBLKE = TA2REC.TA2GROUP; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0PM021.XXXPRCNM = "PK0PS09"; /* Process name*/

    exit stack; /* Exit to redisplay map*/
  end
end // end PK0PS09

// query dcorp.vparm101
Function PK0PS10()
   /* --------------------- start of pk0ps10 ---------------------*/

  set XZZREC empty;
  XZZREC.XZZQRYID = "PK5220  ";
  PK0PW05.XWHCD = PK0PM005.XWHCD;
  XZZREC.XZZQRYRN = PK0PW05.PK0PWWHN;

  XSXZZI0(); /* select unique dcorp.vparm101*/
  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(280); /* already requested*/
    set PK0PM005.PK0PMKMS initialAttributes; /* don't display message*/
    set PK0PM005.PK0PMKFL initialAttributes; /* don't display flag field*/
    set PK0PM005.PK0PMCPY cursor; /* set cursor to copies field*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(28); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(29); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PK0PS10 "; /* Process name*/
  TA1REC.TA1LOC = "OBTAIN DCORP.VPARM101 ROW";
  TA1REC.TA1MAP = "PK0PM005"; /* Map name*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
  TA1REC.TA1TBLKE = PKQREC.PKQKEY; /* Table key*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  PK0PM005.XXXPRCNM = "PK0PS10"; /* PROCESS NAME*/
  exit stack; /* Exit to redisplay map*/
end // end PK0PS10

// query dcorp.vparm101
Function PK0PS11()
   /* --------------------- start of pk0ps10 ---------------------*/

  set XZZREC empty;
  XZZREC.XZZQRYID = "PK5220  ";
  PK0PW06.XWHCD = PK0PM006.XWHCD;
  XZZREC.XZZQRYRN = PK0PW06.PK0PWWHN;

  XSXZZI0(); /* select unique dcorp.vparm101*/
  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(281); /* plan has been killed.*/
    set PK0PM006.PK0PMUMS initialAttributes; /* don't display message*/
    set PK0PM006.PK0PMUFL initialAttributes; /* don't display flag field*/
    set PK0PM006.PK0PMCPY cursor; /* set cursor to copies field*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(28); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(29); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PK0PS11 "; /* Process name*/
  TA1REC.TA1LOC = "OBTAIN DCORP.VPARM101 ROW";
  TA1REC.TA1MAP = "PK0PM006"; /* Map name*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
  TA1REC.TA1TBLKE = PKQREC.PKQKEY; /* Table key*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  PK0PM006.XXXPRCNM = "PK0PS11"; /* PROCESS NAME*/
  exit stack; /* Exit to redisplay map*/
end // end PK0PS11

// Obtain Brand Code description
Function PK0PS12()
   /* ------------------------------------------------------------*/
   /* This process will validate the brand code passed in the*/
   /* PICKING work record and obtain the brand abbreviation.*/
   /* If the brand code is not valid, an error number is*/
   /* returned in EZEMNO and brand abbreviation is spaces.*/
   /* If the code is valid, EZEMNO remains unchanged.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.XBCCD == PK0PW01.XBCCD)
    return; /* Return to caller*/
  end

  PK0PW01.XBCCD = PKWREC.XBCCD;

  if (PK0PW01.XBCCD == " " /* blanks valid*/
   || PK0PW01.XBCCD == "*") /* all but '08'*/
    PK0PW01.XBCDESC = " ";
    return;
  end

  if (PKWREC.XBCCD in XBCTBL.XBCCD)
    PK0PW01.XBCDESC = XBCTBL.XBCDESC[sysVar.arrayIndex];
  end
  if (sysVar.arrayIndex == 0) /* Table entry not found*/
    converseLib.validationFailed(413); /* Indicate invalid brand*/
    return; /* Return to caller*/
  end

  if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not active brand status*/
    PK0PW01.XBCDESC = " "; /* Clear brand abbreviation*/
    converseLib.validationFailed(414); /* Indicate inactive brand*/
    return; /* Return to caller*/
  end


end // end PK0PS12

// Clear selections and exit
Function PK0PS99()
   /* ------------------------------------------------------------*/
   /* Reset any selections in working storage.*/
   /* Exit to redisplay the selection menu map.*/
   /* ------------------------------------------------------------*/

  PK0PW01.PK0PWIXM = 1; /* Initialize map index*/

  while (PK0PW01.PK0PWIXM <= PK0PW01.PK0PWIXL) /* Until end of array*/

    if (PK0PW01.PK0PMSEL[PK0PWIXM] == "S") /* Entry is selected*/
      PK0PW01.PK0PMSEL[PK0PWIXM] = " "; /* Reset entry*/
    end

    PK0PW01.PK0PWIXM = PK0PW01.PK0PWIXM + 1; /* Increment index*/

  end

  exit stack; /* Exit to redisplay map*/


end // end PK0PS99

//*** RECORD=PK0PW00 ****
// JCL variable storage for PK0P - PICKING Report Requests
// ***********************
Record PK0PW00 type basicRecord
  10 PK0PWCMP-CCYY1 PK0PWCMP-CCYY1 ; 
    15 PK0PWCMP-CC1 PK0PWCMP-CC1 ; 
    15 PK0PWCMP-YY1 PK0PWCMP-YY1 ; 
  10 PK0PWCMP-CCYY2 PK0PWCMP-CCYY2 ; 
    15 PK0PWCMP-CC2 PK0PWCMP-CC2 ; 
    15 PK0PWCMP-YY2 PK0PWCMP-YY2 ; 
  10 PK0PWAPP PK0PWAPP ; 
  10 PK0PWEXE PK0PWEXE ; 
  10 PK0PWSYS PK0PWSYS ; 
  10 PK0PWRUN PK0PWRUN ; 
  10 PK0PMGEN PK0PMGEN ; 
  10 PK0PMCPY PK0PMCPY ; 
  10 PK0PMFS1 PK0PMFS1 ; 
  10 PK0PWCTP PK0PWCTP ; 
  10 PK0PWPRM PK0PWPRM ; 
  10 PK0PWJCL PK0PWJCL ; 
end // end PK0PW00

//*** RECORD=PK0PW01 ****
// Working storage for PK0P - PICKING Report Requests
// ***********************
Record PK0PW01 type basicRecord
  10 XXXRVNBR XXXRVNBR ; 
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 XBCCD XBCCD ; 
  10 XBCDESC XBCDESC ; 
  10 PK0PWIXA PK0PWIXA ; 
  10 PK0PWIXB PK0PWIXB ; 
  10 PK0PWIXL PK0PWIXL ; 
  10 PK0PWIXM PK0PWIXM ; 
  10 PK0PWIX2 PK0PWIX2 ; 
  10 PK0PWIXP PK0PWIXP ; 
  10 PK0PWIXS PK0PWIXS [10] ; 
  10 PK0PWIXT PK0PWIXT ; 
  10 PK0PWUID PK0PWUID ; 
  10 PK0PMRMT PK0PMRMT ; 
  10 PK0PMGEN PK0PMGEN ; 
  10 PK0PMDES PK0PMDES ; 
  10 PK0PMLDL PK0PMLDL ; 
  10 PK0PWSDT PK0PWSDT ; 
  10 PK0PWSWG PK0PWSWG ; 
  10 PK0PWSWI PK0PWSWI ; 
  10 PK0PWSWL PK0PWSWL ; 
  10 PK0PW-VM-SEL-SW PK0PW-VM-SEL-SW ; 
  10 PK0PW-PL-NBR-SW PK0PW-PL-NBR-SW ; 
  10 PK0PW-PK-BOL-SW PK0PW-PK-BOL-SW ; 
  10 PK0PWSWP PK0PWSWP ; 
  10 PK0PWSWR PK0PWSWR ; 
  10 PK0PWSWQ PK0PWSWQ ; 
  10 PK0PWSWS PK0PWSWS ; 
  10 PK0PWSWX PK0PWSWX ; 
  10 PK0PWMNO PK0PWMNO ; 
  10 PK0PWHSE PK0PWHSE ; 
  10 PK0PWQRY PK0PWQRY ; 
  10 PK0PTTYP PK0PTTYP ; 
  10 PK0PMSEL PK0PMSEL [98] ; 
  10 PK0PWFRD PK0PWFRD ; 
    15 PK0PWFCC PK0PWFCC ; 
    15 PK0PWFYY PK0PWFYY ; 
    15 PK0PWFMM PK0PWFMM ; 
    15 PK0PWFDD PK0PWFDD ; 
  10 PK0PWTOD PK0PWTOD ; 
    15 PK0PWTCC PK0PWTCC ; 
    15 PK0PWTYY PK0PWTYY ; 
    15 PK0PWTMM PK0PWTMM ; 
    15 PK0PWTDD PK0PWTDD ; 
  10 PK0PMLDT PK0PMLDT ; 
    15 PK0PMLZR PK0PMLZR ; 
    15 PK0PMLCC PK0PMLCC ; 
    15 PK0PMLYY PK0PMLYY ; 
    15 PK0PMLMM PK0PMLMM ; 
    15 PK0PMLDD PK0PMLDD ; 
  10 PK0PMHDT PK0PMHDT ; 
    15 PK0PMHZR PK0PMHZR ; 
    15 PK0PMHCC PK0PMHCC ; 
    15 PK0PMHYY PK0PMHYY ; 
    15 PK0PMHMM PK0PMHMM ; 
    15 PK0PMHDD PK0PMHDD ; 
  10 PK0PW-MSG-FLAG PK0PW-MSG-FLAG ; 
end // end PK0PW01

//*** RECORD=PK0PW02 ****
// Parameters for PK7101 - Carton Classification Table Report
// ***********************
Record PK0PW02 type basicRecord
  10 PK0PWJCL PK0PWJCL ; 
    15 XWHCD XWHCD ; 
    15 * char(78) ; 
end // end PK0PW02

//*** RECORD=PK0PW03 ****
// Parameters for PK7111 - Carton Content Table Report
// ***********************
Record PK0PW03 type basicRecord
  10 PK0PWJCL PK0PWJCL ; 
    15 XWHCD XWHCD ; 
    15 * char(78) ; 
end // end PK0PW03

//*** RECORD=PK0PW04 ****
// Parameters for PK7412 - Picking Activity Report
// ***********************
Record PK0PW04 type basicRecord
  10 PK0PWJCL PK0PWJCL [2] ; 
    15 PK0PWRUN PK0PWRUN ; 
      20 XWHCD XWHCD ; 
      20 * char(3) ; 
    15 * char(75) ; 
end // end PK0PW04

//*** RECORD=PK0PW05 ****
// Parameters for PK7101 - termination of picking plan
// ***********************
Record PK0PW05 type basicRecord
  10 PK0PWJCL PK0PWJCL ; 
    15 XWHCD XWHCD ; 
      20 PK0PWWHN PK0PWWHN ; 
    15 * char(78) ; 
end // end PK0PW05

//*** RECORD=PK0PW06 ****
// Parameters for PKnnPO - update plan
// ***********************
Record PK0PW06 type basicRecord
  10 PK0PWJCL PK0PWJCL ; 
    15 XWHCD XWHCD ; 
      20 PK0PWWHN PK0PWWHN ; 
    15 * char(78) ; 
end // end PK0PW06

//*** RECORD=PK0PW07 ****
// Parameters for PK7111 - Carton Content Table Report
// ***********************
Record PK0PW07 type basicRecord
  10 PK0PWJCL PK0PWJCL ; 
    15 XWHCD XWHCD ; 
    15 * char(78) ; 
end // end PK0PW07

//*** RECORD=PK0PW08 ****
// Parameters for PK7101 - Carton Classification Table Report
// ***********************
Record PK0PW08 type basicRecord
  10 PK0PWJCL PK0PWJCL ; 
    15 XWHCD XWHCD ; 
    15 * char(78) ; 
end // end PK0PW08

//*** RECORD=PK0PW09 ****
// Parameters for PK4151 - Order Summary Report
// ***********************
Record PK0PW09 type basicRecord
  10 PK0PWJCL PK0PWJCL ; 
    15 XWHCD XWHCD ; 
    15 PK0PMLDT PK0PMLDT ; 
      20 PK0PMLZR PK0PMLZR ; 
      20 PK0PMLCC PK0PMLCC ; 
      20 PK0PMLYY PK0PMLYY ; 
      20 PK0PMLMM PK0PMLMM ; 
      20 PK0PMLDD PK0PMLDD ; 
    15 PK0PMHDT PK0PMHDT ; 
      20 PK0PMHZR PK0PMHZR ; 
      20 PK0PMHCC PK0PMHCC ; 
      20 PK0PMHYY PK0PMHYY ; 
      20 PK0PMHMM PK0PMHMM ; 
      20 PK0PMHDD PK0PMHDD ; 
    15 * char(60) ; 
end // end PK0PW09

//*** RECORD=PK0PW21 ****
// Print Daily Pick Tickets Parameters (W) for PK5861/71/72/81.
// ***********************
Record PK0PW21 type basicRecord
  10 PK0PWJCL PK0PWJCL ; 
    15 XWHCD XWHCD ; 
    15 * char(1) ; 
    15 PK0PWSDT PK0PWSDT ; 
    15 * char(1) ; 
    15 PKQTYPCD PKQTYPCD ; 
    15 * char(1) ; 
    15 PKQPRTFL PKQPRTFL ; 
    15 * char(1) ; 
    15 PKQTKTYP PKQTKTYP ; 
    15 * char(1) ; 
    15 PK0PMGRP PK0PMGRP ; 
    15 * char(1) ; 
    15 XRQCODE XRQCODE ; 
    15 * char(1) ; 
    15 PK0PWSCD PK0PWSCD ; 
    15 * char(56) ; 
end // end PK0PW21

//*** RECORD=PK0PW22 ****
// Tickets by Schedule Parameters (S) for PK5861/71/72/81.
// ***********************
Record PK0PW22 type basicRecord
  10 PK0PWJCL PK0PWJCL ; 
    15 XWHCD XWHCD ; 
    15 * char(1) ; 
    15 PK0PWSDT PK0PWSDT ; 
    15 * char(1) ; 
    15 PKQTYPCD PKQTYPCD ; 
    15 * char(1) ; 
    15 PKQPRTFL PKQPRTFL ; 
    15 * char(1) ; 
    15 PKQTKTYP PKQTKTYP ; 
    15 * char(1) ; 
    15 PK0PMGRP PK0PMGRP ; 
    15 * char(1) ; 
    15 XRQCODE XRQCODE ; 
    15 * char(1) ; 
    15 PK0PWSCD PK0PWSCD ; 
    15 * char(8) [2] ; 
      20 * char(1) ; 
      20 PK0PWSCH PK0PWSCH ; 
    15 * char(40) ; 
end // end PK0PW22

//*** RECORD=PK0PW23 ****
// Tickets by Area/Zone/Row Parameters (L) PK5861/71/72/81.
// ***********************
Record PK0PW23 type basicRecord
  10 PK0PWJCL PK0PWJCL ; 
    15 XWHCD XWHCD ; 
    15 * char(1) ; 
    15 PK0PWSDT PK0PWSDT ; 
    15 * char(1) ; 
    15 PKQTYPCD PKQTYPCD ; 
    15 * char(1) ; 
    15 PKQPRTFL PKQPRTFL ; 
    15 * char(1) ; 
    15 PKQTKTYP PKQTKTYP ; 
    15 * char(1) ; 
    15 PK0PMGRP PK0PMGRP ; 
    15 * char(1) ; 
    15 XRQCODE XRQCODE ; 
    15 * char(1) ; 
    15 PK0PWSCD PK0PWSCD ; 
    15 * char(1) ; 
    15 XARCD XARCD ; 
    15 * char(1) ; 
    15 SL4ZONE SL4ZONE ; 
    15 * char(1) ; 
    15 SL5ROWCD SL5ROWCD ; 
    15 * char(47) ; 
end // end PK0PW23

//*** RECORD=PK0PW24 ****
// Tickets by Sequence Parameters (C) for PK5861/71/72/81.
// ***********************
Record PK0PW24 type basicRecord
  10 PK0PWJCL PK0PWJCL ; 
    15 XWHCD XWHCD ; 
    15 * char(1) ; 
    15 PK0PWSDT PK0PWSDT ; 
    15 * char(1) ; 
    15 PKQTYPCD PKQTYPCD ; 
    15 * char(1) ; 
    15 PKQPRTFL PKQPRTFL ; 
    15 * char(1) ; 
    15 PKQTKTYP PKQTKTYP ; 
    15 * char(1) ; 
    15 PK0PMGRP PK0PMGRP ; 
    15 * char(1) ; 
    15 XRQCODE XRQCODE ; 
    15 * char(1) ; 
    15 PK0PWSCD PK0PWSCD ; 
    15 * char(7) [2] ; 
      20 * char(1) ; 
      20 PK0PMSEQ PK0PMSEQ ; 
    15 * char(42) ; 
end // end PK0PW24

//*** RECORD=PK0PW25 ****
// Parameters for PK7211 - Replenishment Spur Labels
// ***********************
Record PK0PW25 type basicRecord
  10 PK0PWJCL PK0PWJCL ; 
    15 XWHCD XWHCD ; 
    15 * char(1) ; 
    15 PK0PMGRP PK0PMGRP ; 
    15 * char(1) ; 
    15 XARCD XARCD ; 
    15 * char(1) ; 
    15 SL4ZONE SL4ZONE ; 
    15 * char(1) ; 
    15 SL5LOCTN SL5LOCTN ; 
    15 * char(1) ; 
    15 PK0PWSPR PK0PWSPR ; 
    15 * char(1) ; 
    15 PK0PMCNT PK0PMCNT ; 
    15 * char(1) ; 
    15 XRQCODE XRQCODE ; 
    15 * char(53) ; 
end // end PK0PW25

//*** RECORD=PK0PW26 ****
// Carton Content Request Parameters   (L) WPK4091.
// PK#392 09/10/93 rmorga  Added PK0PM-PK-OUTER-SEQ-NBR-LOW/HI
//                         For outer carton selection.
// ASW001 10/19/95 pander  Added XGPCD.
//        06/01/96 dgerlt  Added PK0P-FAST-PICK.
// bg@qd  12/09/96 dgerlt  Added PK0Pqdsl.
// ***********************
Record PK0PW26 type basicRecord
  10 PK0PWJCL PK0PWJCL ; 
    15 XWHCD XWHCD ; 
    15 PK0PMSFR PK0PMSFR ; 
    15 PK0PMSTO PK0PMSTO ; 
    15 PK0PMLFR PK0PMLFR ; 
    15 PK0PMLTO PK0PMLTO ; 
    15 PK0PMSCT PK0PMSCT ; 
    15 PK0PMECT PK0PMECT ; 
    15 PKQTKTYP PKQTKTYP ; 
    15 PK0PWPRN PK0PWPRN ; 
    15 * char(1) ; 
    15 PK0PM-PRINT-GENERATION PK0PM-PRINT-GENERATION ; 
    15 * char(1) ; 
    15 XBCCD XBCCD ; 
    15 * char(1) ; 
    15 PK0PM-MAGNUM-STARTUP PK0PM-MAGNUM-STARTUP ; 
    15 PK0PM-MAGNUM-END PK0PM-MAGNUM-END ; 
    15 PK0PM-SETUP-COUNT PK0PM-SETUP-COUNT ; 
    15 PK0PM-PK-OUTER-SEQ-NBR-LOW PK0PM-PK-OUTER-SEQ-NBR-LOW ; 
    15 PK0PM-PK-OUTER-SEQ-NBR-HIGH PK0PM-PK-OUTER-SEQ-NBR-HIGH ; 
    15 PK0PM-PRINTER-TYPE PK0PM-PRINTER-TYPE ; 
    15 XGPCD XGPCD ; 
    15 PK0P-FASTPICK-FL PK0P-FASTPICK-FL ; 
    15 PK0PQDFL PK0PQDFL ; 
    15 * char(13) ; 
end // end PK0PW26

//*** RECORD=PK0PW27 ****
// Packing List Request parameters     (L) wpk1003
// CHANGED 09/03/92 GRAY    SINGLE/MULTI CARTON FLAG.
// ASW001  10/19/95 pander  Added XGPCD.
// ***********************
Record PK0PW27 type basicRecord
  10 PK0PWJCL PK0PWJCL ; 
    15 PK0PMLNF PK0PMLNF ; 
    15 PK0PMLNT PK0PMLNT ; 
    15 PK0PMPFR PK0PMPFR ; 
    15 PK0PMPTO PK0PMPTO ; 
    15 PK0PMSFR PK0PMSFR ; 
    15 PK0PMSTO PK0PMSTO ; 
    15 PK0PM-PRINT-GENERATION PK0PM-PRINT-GENERATION ; 
    15 * char(1) ; 
    15 XBCCD XBCCD ; 
    15 * char(1) ; 
    15 PK0PM-MAGNUM-STARTUP PK0PM-MAGNUM-STARTUP ; 
    15 PK0PM-MAGNUM-END PK0PM-MAGNUM-END ; 
    15 PK0PM-SETUP-COUNT PK0PM-SETUP-COUNT ; 
    15 * char(1) ; 
    15 PK0PM-SINGLE-MULTI-FLAG PK0PM-SINGLE-MULTI-FLAG ; 
    15 PK0PM-BILL-OF-LADING-TO PK0PM-BILL-OF-LADING-TO ; 
    15 PK0PM-BILL-OF-LADING-FROM PK0PM-BILL-OF-LADING-FROM ; 
    15 XGPCD XGPCD ; 
    15 PK0PQDFL PK0PQDFL ; 
    15 * char(16) ; 
end // end PK0PW27

//*** RECORD=PK0PW28 ****
// Carton Content Request Parameters   (L) wpk1301, wpk1311
// ASW001 10/19/95 pander  Added XGPCD.
//        06/03/96 dgerlt  Added PK0P-FASTPICK-FL
// BG@QD  12/09/96 dgerlt  Added PK0PQDSL
// ***********************
Record PK0PW28 type basicRecord
  10 PK0PWJCL PK0PWJCL ; 
    15 XWHCD XWHCD ; 
    15 PK0PMSFR PK0PMSFR ; 
    15 PK0PMSTO PK0PMSTO ; 
    15 PK0PMSCT PK0PMSCT ; 
    15 PK0PMECT PK0PMECT ; 
    15 PK0PM-SUBMIT-FLAG PK0PM-SUBMIT-FLAG ; 
    15 PK0PM-PRINT-GENERATION PK0PM-PRINT-GENERATION ; 
    15 * char(1) ; 
    15 XBCCD XBCCD ; 
    15 * char(1) ; 
    15 PK0PM-MAGNUM-STARTUP PK0PM-MAGNUM-STARTUP ; 
    15 PK0PM-MAGNUM-END PK0PM-MAGNUM-END ; 
    15 PK0PM-SETUP-COUNT PK0PM-SETUP-COUNT ; 
    15 PK0PM-PRINTER-TYPE PK0PM-PRINTER-TYPE ; 
    15 XGPCD XGPCD ; 
    15 XARCD XARCD ; 
    15 PK0P-FASTPICK-FL PK0P-FASTPICK-FL ; 
    15 PK0PQDFL PK0PQDFL ; 
    15 * char(39) ; 
end // end PK0PW28

//*** RECORD=PK0PW29 ****
// Customer Labels Request Parameters for PK477D.
// ***********************
Record PK0PW29 type basicRecord
  10 PK0PWJCL PK0PWJCL ; 
    15 XWHCD XWHCD ; 
    15 PK0PMSFR PK0PMSFR ; 
    15 PK0PMSTO PK0PMSTO ; 
    15 PK0PMLFR PK0PMLFR ; 
    15 PK0PMLTO PK0PMLTO ; 
    15 PK0PMTFR PK0PMTFR ; 
    15 PK0PMTTO PK0PMTTO ; 
    15 PK0PMLDL PK0PMLDL ; 
    15 PK0PWPRN PK0PWPRN ; 
    15 SY1STNBR SY1STNBR ; 
    15 PK0PMRMT PK0PMRMT ; 
    15 KUISKUID KUISKUID ; 
    15 PK0PMGEN PK0PMGEN ; 
    15 PK0PMFPL PK0PMFPL ; 
    15 * char(28) ; 
end // end PK0PW29

//*** RECORD=PK0PW99 ****
// System internal reader queue (INTR) record definition.
// ***********************
Record PK0PW99 type serialRecord  {
  fileName = "INTR"
  }
  10 PK0PWJCL PK0PWJCL ; 
end // end PK0PW99

//*** RECORD=PK0PW9A ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the NOTIFY user identification (PK0PWUID).
// ***********************
Record PK0PW9A type basicRecord // VAGen Info - redefined PK0PW99
  10 * char(59) ; 
  10 PK0PWUID PK0PWUID ; 
  10 * char(15) ; 
end // end PK0PW9A

//*** RECORD=PK0PW9B ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the WHSE cataloged procedure parameter (XWHCD).
// ***********************
Record PK0PW9B type basicRecord // VAGen Info - redefined PK0PW99
  10 * char(12) ; 
  10 PK0PWAPP PK0PWAPP ; 
  10 * char(62) ; 
end // end PK0PW9B

//*** RECORD=PK0PW9C ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the WHSE cataloged procedure parameter (XWHCD).
// ***********************
Record PK0PW9C type basicRecord // VAGen Info - redefined PK0PW99
  10 * char(21) ; 
  10 PK0PWCTP PK0PWCTP ; 
  10 * char(57) ; 
end // end PK0PW9C

//*** RECORD=PK0PW9D ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the DELIVERY TYPE symbolic parameter.
// ***********************
Record PK0PW9D type basicRecord // VAGen Info - redefined PK0PW99
  10 * char(23) ; 
  10 PK0PWLDD PK0PWLDD ; 
  10 * char(52) ; 
end // end PK0PW9D

//*** RECORD=PK0PW9E ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the EXEC procedure name (PK0PWEXE).
// ***********************
Record PK0PW9E type basicRecord // VAGen Info - redefined PK0PW99
  10 * char(15) ; 
  10 PK0PWEXE PK0PWEXE ; 
  10 * char(59) ; 
end // end PK0PW9E

//*** RECORD=PK0PW9G ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the GDG cataloged procedure parameter (PK0PMGEN).
// ***********************
Record PK0PW9G type basicRecord // VAGen Info - redefined PK0PW99
  10 * char(20) ; 
  10 PK0PMGEN PK0PMGEN ; 
  10 * char(58) ; 
end // end PK0PW9G

//*** RECORD=PK0PW9J ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the JOB name user identification (PK0PWUID).
// ***********************
Record PK0PW9J type basicRecord // VAGen Info - redefined PK0PW99
  10 * char(4) ; 
  10 PK0PWUID PK0PWUID ; 
  10 * char(16) ; 
  10 PK0PWEXE PK0PWEXE ; 
  10 * char(48) ; 
end // end PK0PW9J

//*** RECORD=PK0PW9M ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the OUTPUT remote printer identification (PK0PMRMT)
// and the number of copies to print (PK0PMCPY).
// ***********************
Record PK0PW9M type basicRecord // VAGen Info - redefined PK0PW99
  10 * char(10) ; 
  10 PK0PMFS1 PK0PMFS1 ; 
  10 * char(7) ; 
  10 PK0PMFS2 PK0PMFS2 ; 
  10 * char(8) ; 
  10 PK0PMCPY PK0PMCPY ; 
  10 * char(6) ; 
  10 PK0PMRMT PK0PMRMT ; 
  10 * char(34) ; 
end // end PK0PW9M

//*** RECORD=PK0PW9N ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the NOTIFY user identification (PK0PWUID).
// ***********************
Record PK0PW9N type basicRecord // VAGen Info - redefined PK0PW99
  10 * char(22) ; 
  10 PK0PWUID PK0PWUID ; 
  10 * char(52) ; 
end // end PK0PW9N

//*** RECORD=PK0PW9O ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the OUTPUT remote printer identification (PK0PMRMT)
// and the number of copies to print (PK0PMCPY).
// ***********************
Record PK0PW9O type basicRecord // VAGen Info - redefined PK0PW99
  10 * char(33) ; 
  10 PK0PMCPY PK0PMCPY ; 
  10 * char(6) ; 
  10 PK0PMRMT PK0PMRMT ; 
  10 * char(34) ; 
end // end PK0PW9O

//*** RECORD=PK0PW9P ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the parmmbr of the vsam file idcams statements
// ***********************
Record PK0PW9P type basicRecord // VAGen Info - redefined PK0PW99
  10 * char(24) ; 
  10 PK0PWPRM PK0PWPRM ; 
  10 * char(48) ; 
end // end PK0PW9P

//*** RECORD=PK0PW9R ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the RUN cataloged procedure parameter (PK0PWRUN).
// ***********************
Record PK0PW9R type basicRecord // VAGen Info - redefined PK0PW99
  10 * char(19) ; 
  10 PK0PWRUN PK0PWRUN ; 
  10 * char(56) ; 
end // end PK0PW9R

//*** RECORD=PK0PW9S ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the RUN cataloged procedure parameter (PK0PWRUN).
// ***********************
Record PK0PW9S type basicRecord // VAGen Info - redefined PK0PW99
  10 * char(12) ; 
  10 PK0PWSYS PK0PWSYS ; 
  10 * char(62) ; 
end // end PK0PW9S

//*** RECORD=PK0PW9W ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the WHSE cataloged procedure parameter (XWHCD).
// ***********************
Record PK0PW9W type basicRecord // VAGen Info - redefined PK0PW99
  10 * char(21) ; 
  10 XWHCD XWHCD ; 
  10 * char(57) ; 
end // end PK0PW9W

DataItem PK0P-FASTPICK-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FROM Bill of Lading
DataItem PK0PM-BILL-OF-LADING-FROM char(13)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// TO Bill of Lading
DataItem PK0PM-BILL-OF-LADING-TO char(13)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// magnum end flag
DataItem PK0PM-MAGNUM-END char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// print magnum startup chars
DataItem PK0PM-MAGNUM-STARTUP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Outer Carton To
DataItem PK0PM-PK-OUTER-SEQ-NBR-HIGH num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Outer Carton From
DataItem PK0PM-PK-OUTER-SEQ-NBR-LOW num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Print generation
DataItem PK0PM-PRINT-GENERATION char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// printer type
DataItem PK0PM-PRINTER-TYPE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of startup labels
DataItem PK0PM-SETUP-COUNT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// CARTON PROCESS FLAG S, M, B.
DataItem PK0PM-SINGLE-MULTI-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// submitted from 'O'nline
DataItem PK0PM-SUBMIT-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of labels to print
DataItem PK0PMCNT num(3)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of copies to print
DataItem PK0PMCPY num(1)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Default printer description
DataItem PK0PMDES char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Ending Carton Sequence Nbr
DataItem PK0PMECT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sl_loc_cd
DataItem PK0PMFPL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forms code.
DataItem PK0PMFS1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forms code.
DataItem PK0PMFS2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Print from generation number
DataItem PK0PMGEN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Tickets output print group
DataItem PK0PMGRP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HIGH century
DataItem PK0PMHCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// HIGH day
DataItem PK0PMHDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// HIGH date
DataItem PK0PMHDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HIGH month
DataItem PK0PMHMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// HIGH year
DataItem PK0PMHYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ZERO filler
DataItem PK0PMHZR num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// LOW century
DataItem PK0PMLCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// LOW day
DataItem PK0PMLDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PK_LABL_DLVR_CD
DataItem PK0PMLDL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// LOW date
DataItem PK0PMLDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Lane FROM
DataItem PK0PMLFR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// LOW month
DataItem PK0PMLMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FROM packing lane
DataItem PK0PMLNF num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TO packing lane
DataItem PK0PMLNT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Lane TO
DataItem PK0PMLTO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// LOW year
DataItem PK0PMLYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ZERO filler
DataItem PK0PMLZR num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Packing list FROM
DataItem PK0PMPFR num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Packing list TO
DataItem PK0PMPTO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Default printer destination
DataItem PK0PMRMT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Starting Carton Sequence Nbr
DataItem PK0PMSCT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// select field
DataItem PK0PMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Schedule sequence number
DataItem PK0PMSEQ num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Schedule FROM
DataItem PK0PMSFR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Schedule TO
DataItem PK0PMSTO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PK-TOTE-SEQ-NBR
DataItem PK0PMTFR num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PK-TOTE-SEQ-NBR
DataItem PK0PMTTO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0PQDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Flag to print entire sched
DataItem PK0PW-MSG-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// specific packlist nbr entered
DataItem PK0PW-PK-BOL-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// specific packlist nbr entered
DataItem PK0PW-PL-NBR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0PW-VM-SEL-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// application name
DataItem PK0PWAPP char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cc-1 for comparison
DataItem PK0PWCMP-CC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cc-2 for comparison
DataItem PK0PWCMP-CC2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ccyy-1 for comparison
DataItem PK0PWCMP-CCYY1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ccyy-2 for comparison
DataItem PK0PWCMP-CCYY2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy-1 for comparison
DataItem PK0PWCMP-YY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy-2 for comparison
DataItem PK0PWCMP-YY2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Case Type (full/repack)
DataItem PK0PWCTP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// EXEC procedure name
DataItem PK0PWEXE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FROM century
DataItem PK0PWFCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FROM day
DataItem PK0PWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FROM month
DataItem PK0PWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FROM Date
DataItem PK0PWFRD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FROM year
DataItem PK0PWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Warehouse Code (numeric)
DataItem PK0PWHSE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Second index for map fields
DataItem PK0PWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// General purpose index
DataItem PK0PWIXA smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// General purpose index
DataItem PK0PWIXB smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Limit for map fields index
DataItem PK0PWIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PK0PWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for page number
DataItem PK0PWIXP smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for starting table
DataItem PK0PWIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for table fields
DataItem PK0PWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0PWLDD char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job submitted message number
DataItem PK0PWMNO num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// parmlib (member name) variable
DataItem PK0PWPRM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Type of picking run
DataItem PK0PWPRN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Query identification
DataItem PK0PWQRY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Type of picking run
DataItem PK0PWRUN char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Print selection code
DataItem PK0PWSCD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Picking schedule number
DataItem PK0PWSCH num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Generation setup date
DataItem PK0PWSDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Spur number (display format)
DataItem PK0PWSPR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Generation error switch
DataItem PK0PWSWG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Ticket type error switch
DataItem PK0PWSWI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line error switch
DataItem PK0PWSWL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Page full switch
DataItem PK0PWSWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Queue verification switch
DataItem PK0PWSWQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Row exists switch
DataItem PK0PWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job submitted switch
DataItem PK0PWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Info Entered switch
DataItem PK0PWSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl - program id
DataItem PK0PWSYS char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TO century
DataItem PK0PWTCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TO day
DataItem PK0PWTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TO month
DataItem PK0PWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TO Date
DataItem PK0PWTOD num(8)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TO year
DataItem PK0PWTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// NIKE user identification
DataItem PK0PWUID char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric whse cd
DataItem PK0PWWHN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

