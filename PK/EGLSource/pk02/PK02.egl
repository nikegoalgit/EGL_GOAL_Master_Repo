package pk02;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pk.common.*;
import pw.common.*;
import sl.common.*;
import sm.common.*;
import sp.common.*;
import sw.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PK02 ****
// PK02 - ORDER FORCE OFFLINE
// 
// THIS PROGRAM WILL ALLOW THE USER TO SELECT SPECIFIC ORDERS
// AND FORCE THEM OFFLINE FOR SPECIAL PROCESSING.
// 
// THE USER MAY ENTER AN 'A', 'C', 'D' or 'S' TO ADD, CHANGE,
// DELETE OR SELECT ORDERS FOR OFFLINE PROCESSING.
// 
// THE USER CAN TRANSFER OUT OF THIS APPLICATION BY USING ONE
// OF THE PF KEYS DISPLAYED AT THE BOTTOM OF THE MAP, OR BY
// ENTERING FAST-PATH INFORMATION (ALSO AT THE BOTTOM OF THE
// MAP).
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      10/30/91  DCHIAN  New application.
// PK#???   05/13/93  RMORGA  Check for repeat orders on map.
// CANADA   08/11/95  CBRINE  Added XCTCD to PKWREC
// Canada   05/12/98  tdaugh  Increased internal table size
// *********************
Program PK02 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK02W01 PK02W01; // record
  PK4REC PK4REC; // record
  PKWREC PKWREC; // record
  PKYREC PKYREC; // record
  PWIREC PWIREC; // record
  SL5REC SL5REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  VORLOC01 VORLOC01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use PK02M.PK02M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
     /* ------------------------------------------------------------*/
     /* INITIALIZE WORKING STORAGE AND DISPLAY STORAGE AREAS.*/
     /* ------------------------------------------------------------*/

    set PK02M001 initial; /* CLEAR THE MAP*/
    set PK02W01 empty; /* INITIALIZE WORKING STORAGE*/
    set VORLOC01 empty; /* INITIALIZE ORDER LOCATION TBL*/
    set SQLCA empty; /* SQL COMMUNICATION AREA*/
    set TAEREC empty; /* ERROR DIAGNOSIS INFORMATION*/
    set TA1REC empty; /* ERROR DIAGNOSIS PARAMETERS*/

    PK02W01.PK02W-FIRST-TIME = "Y";

     /* ------------------------------------------------------------*/
     /* FLOW TO CONVERSE THE MAIN PROCESS USED TO DISPLAY A MAP.*/
     /* ------------------------------------------------------------*/

    goto PK02-001; /* Converse the main process*/

    PK02-001: PK02-001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PK02-001; /* Converse the main process*/


  end // end main
end // end PK02

// Inquire/maintain a table row
Function PK02-001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PK02-100(); /* Obtain the data to display*/

  PK02-200(); /* Format and display the map*/

  PK02-300(); /* Check attention identifier*/

  PK02-400(); /* Reset fields to normal intensity*/

  PK02-500(); /* Verify the entered data*/

  PK02-600(); /* Process valid input request*/


end // end PK02-001

// Obtain the data to display
Function PK02-100()
   /* --------------------------------------------------------------------*/
   /* OBTAIN DATA TO DISPLAY AND STORE IN W/S TABLE*/
   /* --------------------------------------------------------------------*/

   /* --------------------------------------------------------------------*/
   /* IF DATA WAS REQUESTED AND EZEMNO IS 0, 32, 172(INFORMATIONAL MSG*/
   /* NOT ERRORS) OBTAIN DATA, ELSE RETURN TO PREVIOUS PROCESS.*/
   /* --------------------------------------------------------------------*/

  if (PK02W01.PK02W-FIRST-TIME == "Y")
    if (converseVar.validationMsgNum == 0
     || converseVar.validationMsgNum == 32
     || converseVar.validationMsgNum == 172)
       /* NEXT SENTENCE*/
    end
  else
    return; /* RETURN TO PREVIOUS PROCESS(PK02-001)*/
  end


   /* --------------------------------------------------------------------*/
   /* SELECT ON THE ORDER LOCATION TABLE.*/
   /* --------------------------------------------------------------------*/

  VORLOC01.XWHCD = PKWREC.XWHCD;
  VORLOC01.OP1CUOID = -1;
  VORLOC01.OP1NORID = -1;
  VORLOC01.XXX-REC-TYP = "1";
  call "IO6050" ("S1", SQLCA, VORLOC01) {isNoRefresh = yes, isExternal = yes}; /* SELECT BY WAREHOUSE*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(21); /* CONTENTION FOR DATA BASE RESOURCE*/
      return;
    else
      converseLib.validationFailed(22); /* FATAL ERROR*/
      TA1REC.TA1PGMNO = "PK02"; /* MODULE ID*/
      TA1REC.TA1TYPE = "DB2"; /* TYPE OF ERROR*/
      TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* PROGRAM APPLICATION*/
      TA1REC.TA1DBASE = "DPICK   "; /* DATABASE NAME*/
      TA1REC.TA1TBLVU = "VORLOC01"; /* TABLE VIEW NAME*/
      TA1REC.TA1TBLKE = VORLOC01.VORLOC01-KEY; /* TABLE KEY*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC;
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* ERROR DIAG RTN*/
      return;
    end
  end

   /* --------------------------------------------------------------------*/
   /* LOAD WORKING STORAGE TABLE UNTIL END OF ORDER LOCATION TABLE*/
   /* --------------------------------------------------------------------*/

  PK02W01.PK02W-NDX = 1;
  while (SQLCA.VAGen_SQLCODE == 0)
    PK02-110();
  end

   /* --------------------------------------------------------------------*/
   /* CLOSE ORDER LOCATION TABLE*/
   /* --------------------------------------------------------------------*/

  call "IO6050" ("C1", SQLCA, VORLOC01) {isNoRefresh = yes, isExternal = yes};

end // end PK02-100

// Select the requested table row
Function PK02-110()
   /* ------------------------------------------------------------*/
   /* READ ORDER LOCATION TABLE AND LOAD INTO W/S TABLE*/
   /* ------------------------------------------------------------*/

  call "IO6050" ("N1", SQLCA, VORLOC01) {isNoRefresh = yes, isExternal = yes}; /* GET EACH ROW*/

  if (SQLCA.VAGen_SQLCODE == 0)
   /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(21); /* CONTENTION FOR DATA BASE RESOURCE*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* END OF FILE*/
        PK02W01.PK02W-TOT-REC-READ = PK02W01.PK02W-NDX;
        PK02W01.PK02W-TOT-REC-READ = PK02W01.PK02W-TOT-REC-READ - 1;
        return;
      else
        converseLib.validationFailed(22); /* FATAL ERROR*/
        TA1REC.TA1PGMNO = "PK02";
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1LOC = "GET NEXT TABLE ROW";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
        TA1REC.TA1DBASE = "DPICK   ";
        TA1REC.TA1TBLVU = "VORLOC01";
        TA1REC.TA1TBLKE = VORLOC01.VORLOC01-KEY;
        TAEREC.SQLCAREC = SQLCA.SQLCAREC;
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* LOAD INTO W/S TABLE AND ALSO CHECK FOR TABLE OVERFLOW*/
   /* ------------------------------------------------------------*/

  if (PK02W-NDX < 1001)
    PK02W01.OP1CUOID[PK02W-NDX] = VORLOC01.OP1CUOID;
    PK02W01.OP1NORID[PK02W-NDX] = VORLOC01.OP1NORID;
    PK02W01.XARCD[PK02W-NDX] = VORLOC01.XARCD;
    PK02W01.SL4ZONE[PK02W-NDX] = VORLOC01.SL4ZONE;
    PK02W01.SL5LOCTN[PK02W-NDX] = VORLOC01.SL5LOCTN;
    PK02W01.ZZZCHGCT[PK02W-NDX] = VORLOC01.ZZZCHGCT;
  else
    converseLib.validationFailed(24); /* TABLE OVERFLOW*/
    return;
  end

  PK02W01.PK02W-NDX = PK02W01.PK02W-NDX + 1;

end // end PK02-110

// Format and converse the map
Function PK02-200()
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  if (PK02W01.PK02W-FIRST-TIME == "Y")
    PK02W01.PK02W-FIRST-TIME = "N";
    PK02M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
    PK02M001.XWHCD = PKWREC.XWHCD; /* WAREHOUSE CODE*/
    PK02M001.XWHABRV = PKWREC.XWHABRV; /* WAREHOUSE ABBRV*/
    if (PK02W01.PK02W-TOT-REC-READ > 0)
      PK02W01.PK02W-NDX = 1;
      PK02W01.PK02W-NX2 = 1;
      PK02W01.PK02W-BAS = 1;
      PK02W01.PK02W-END = 28;
      PK02W01.PK02W-BLD-MAP-SW = "Y";
      while (PK02W01.PK02W-BLD-MAP-SW == "Y")
        PK02-210();
      end
    else
      converseLib.validationFailed(31); /* NO ORDERS WERE FOUND TO DISPLAY*/
    end
  end

  converse PK02M001 ;

  converseLib.validationFailed(0);

end // end PK02-200

// Format the display data
Function PK02-210()
   /* ------------------------------------------------------------*/
   /* Format the map key fields from the display storage area.*/
   /* ------------------------------------------------------------*/

  if (PK02W01.PK02W-NDX > PK02W01.PK02W-TOT-REC-READ
   || PK02W01.PK02W-NDX > PK02W01.PK02W-END)
    PK02W01.PK02W-BLD-MAP-SW = "N";
    return;
  else
    PK02M001.OP1CUOID[PK02W-NX2] = PK02W01.OP1CUOID[PK02W-NDX];
    PK02M001.OP1NORID[PK02W-NX2] = PK02W01.OP1NORID[PK02W-NDX];
    PK02M001.XARCD[PK02W-NX2] = PK02W01.XARCD[PK02W-NDX];
    PK02M001.SL4ZONE[PK02W-NX2] = PK02W01.SL4ZONE[PK02W-NDX];
    PK02M001.SL5LOCTN[PK02W-NX2] = PK02W01.SL5LOCTN[PK02W-NDX];
  end

  PK02W01.PK02W-NDX = PK02W01.PK02W-NDX + 1;
  PK02W01.PK02W-NX2 = PK02W01.PK02W-NX2 + 1;
end // end PK02-210

// Check attention identifier
Function PK02-300()
   /* ------------------------------------------------------------*/
   /* CHECK PF KEYS/USER INPUT*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf18
   || converseVar.eventKey is enter)
     /* NEXT SENTENCE*/
  else
    converseLib.validationFailed(12); /* INVALID PF KEY*/
    return; /* EXIT TO REDISPLAY MAP*/
  end

   /* ------------------------------------------------------------*/
   /* WAREHOUSE CODE WAS MODIFIED*/
   /* ------------------------------------------------------------*/

  if (PK02M001.XWHCD is modified)
    PKWREC.XWHCD = PK02M001.XWHCD;
    PKWREC.XWHABRV = " ";
    XPPK002();
    if (sysVar.arrayIndex == 0) /* WAREHOUSE TABLE ENTRY NOT FOUND*/
      set PK02M001.XWHCD cursor, modified, bold;
      exit stack;
    end
    set PK02M001 initial;
    set PK02W01 empty;
    PK02W01.PK02W-FIRST-TIME = "Y";
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* TRANSFER TO REQUESTED APPLICATION VIA FAST PATH*/
   /* ------------------------------------------------------------*/

  if (PK02M001.CATOAP is modified)
    PK02-310();
  end

   /* ------------------------------------------------------------*/
   /* GO TO HELP APPLICATION*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1)
    XSPF1();
    PK02M001.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  end

   /* ------------------------------------------------------------*/
   /* CANCEL*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2)
    set PK02M001 initial;
    PK02M001.XWHCD = PKWREC.XWHCD;
    PK02M001.XWHABRV = PKWREC.XWHABRV;
    PK02M001.XXXCURDT = VGVar.currentShortGregorianDate;
    PK02W01.PK02W-NDX = 1;
    PK02W01.PK02W-NX2 = 1;
    PK02W01.PK02W-YES-NO-SW = "N";
    while (PK02W01.PK02W-YES-NO-SW == "N")
      PK02-320(); /* REFRESH SCREEN*/
    end
    return;
  end

   /* ------------------------------------------------------------*/
   /* GO TO PICK MASTER MENU*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3)
    set PKWREC empty;
    PKWREC.XWHCD = PK02M001.XWHCD;
    PKWREC.XWHABRV = PK02M001.XWHABRV;
    COMMAREA.CAFROMAP = "PK02";
    COMMAREA.CATOAP = "PK0A";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* GO TO PICK MASTER MENU*/
    PK02M001.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  end

   /* ------------------------------------------------------------*/
   /* MOVES COMMON TO ALL TRANSFERRS*/
   /* ------------------------------------------------------------*/

  PKWREC.XWHCD = PK02M001.XWHCD;
  COMMAREA.CAFROMAP = "PK02";

   /* ------------------------------------------------------------*/
   /* GO TO MASTER MENU*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf4)
    XSPF4();
    PK02M001.VAGen_EZEMSG = COMMAREA.CAMSG;
  end

   /* ------------------------------------------------------------*/
   /* GO TO PICKING ORDER INQUIRY*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "PK0B";
    PKWREC.PKWFRMAP = "PK02";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT();
    PK02M001.VAGen_EZEMSG = COMMAREA.CAMSG;
  end

   /* ------------------------------------------------------------*/
   /* GO TO PICKING LINE ITEM INQUIRY*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14)
    COMMAREA.CATOAP = "PK0C";
    PKWREC.PKWFRMAP = "PK02";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT();
    PK02M001.VAGen_EZEMSG = COMMAREA.CAMSG;
  end

   /* ------------------------------------------------------------*/
   /* GO TO PICKING CUSTOMER INQUIRY*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15)
    COMMAREA.CATOAP = "PK0D";
    PKWREC.PKWFRMAP = "PK02";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT();
    PK02M001.VAGen_EZEMSG = COMMAREA.CAMSG;
  end

   /* ------------------------------------------------------------*/
   /* GO TO SALES PROGRAM/PRODUCT INQUIRY*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "PK0Z";
    PKWREC.PKWFRMAP = "PK02";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT();
    PK02M001.VAGen_EZEMSG = COMMAREA.CAMSG;
  end

   /* ------------------------------------------------------------*/
   /* GO TO PICKING HOLD/RELEASE*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf18)
    COMMAREA.CATOAP = "PK09";
    PKWREC.PKWFRMAP = "PK02";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT();
    PK02M001.VAGen_EZEMSG = COMMAREA.CAMSG;
  end

   /* ------------------------------------------------------------*/
   /* CHECK FOR FORWARD AND BACKWARD PAGING*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7
   && PK02W01.PK02W-BAS == 1)
    converseLib.validationFailed(37);
  end


  if (converseVar.eventKey is pf8
   && PK02W01.PK02W-END >= PK02W01.PK02W-TOT-REC-READ)
    converseLib.validationFailed(38);
  end



  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    if (PK02W01.PK02W-TOT-REC-READ < 29)
       /* NEXT SENTENCE*/
    else
      if (converseVar.eventKey is pf8 /* PAGE FORWARD*/
       && PK02W01.PK02W-END < PK02W01.PK02W-TOT-REC-READ)
        PK02W01.PK02W-END = PK02W01.PK02W-END + 28;
        PK02W01.PK02W-BAS = PK02W01.PK02W-BAS + 28;
        PK02W01.PK02W-NDX = 1;
        PK02W01.PK02W-NX2 = 1;
        PK02W01.PK02W-YES-NO-SW = "N";
        while (PK02W01.PK02W-YES-NO-SW == "N")
          PK02-330();
        end
      else
        if (converseVar.eventKey is pf7 /* PAGE BACKWARD*/
         && PK02W01.PK02W-BAS > 1)     
          PK02W01.PK02W-END = PK02W01.PK02W-END - 28;
          PK02W01.PK02W-BAS = PK02W01.PK02W-BAS - 28;
          if (PK02W01.PK02W-BAS < 1)
            PK02W01.PK02W-END = 28;
            PK02W01.PK02W-NDX = 1;
            PK02W01.PK02W-NX2 = 1;
            PK02W01.PK02W-BAS = 1;
            PK02W01.PK02W-YES-NO-SW = "N";
            while (PK02W01.PK02W-YES-NO-SW == "N")
              PK02-330();
            end
          else
            PK02W01.PK02W-NDX = 1;
            PK02W01.PK02W-NX2 = 1;
            PK02W01.PK02W-YES-NO-SW = "N";
            while (PK02W01.PK02W-YES-NO-SW == "N")
              PK02-330();
            end
          end
        end
      end
    end
  end
end // end PK02-300

// VALIDATE FAST PATH ROUTINE
Function PK02-310()
   /* ---------------------------------------------------------------------*/
   /* CHECK FAST PATH IS VALIDATE*/
   /* ---------------------------------------------------------------------*/

  if (converseVar.eventKey is enter)
    if (PK02M001.CATOAP == COMMAREA.CACURRAP)
      set PK02M001.CATOAP cursor, modified, bold;
      converseLib.validationFailed(1); /* INVALID FAST PATH OPTION*/
      return;
    else
      COMMAREA.CATOAP = PK02M001.CATOAP; /* TO APPLICATION*/
      COMMAREA.CAITEM = PK02M001.CAITEM; /* APPLICATION DATA*/
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* APPLICATION USER AREA*/
      XSEXIT(); /* TRANSTER TO REQ APPL*/
      PK02M001.CATOAP = COMMAREA.CATOAP; /* TO APPLICATION*/
      set PK02M001.CATOAP cursor, bold; /* HIGHLIGHT TO APPL*/
      PK02M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* RETURN ERROR MSG*/
      converseLib.validationFailed(); /* FORCE ALARM TO SOUND*/
      COMMAREA.CATOAP = " "; /* CLEAR APPLICATION*/
      exit stack;
    end
  end

end // end PK02-310

// REFRESH MAP SCREEN
Function PK02-320()
   /* -------------------------------------------------------------------*/
   /* REFRESH SCREEN*/
   /* -------------------------------------------------------------------*/

  if (PK02W01.PK02W-NDX > PK02W01.PK02W-END)
    PK02W01.PK02W-YES-NO-SW = "Y";
  else
    if (PK02W01.PK02W-NDX >= PK02W01.PK02W-BAS)
      PK02M001.PK02M-ACT[PK02W-NX2] = " ";
      PK02M001.OP1CUOID[PK02W-NX2] = PK02W01.OP1CUOID[PK02W-NDX];
      PK02M001.OP1NORID[PK02W-NX2] = PK02W01.OP1NORID[PK02W-NDX];
      PK02M001.XARCD[PK02W-NX2] = PK02W01.XARCD[PK02W-NDX];
      PK02M001.SL4ZONE[PK02W-NX2] = PK02W01.SL4ZONE[PK02W-NDX];
      PK02M001.SL5LOCTN[PK02W-NX2] = PK02W01.SL5LOCTN[PK02W-NDX];
      PK02W01.PK02W-NX2 = PK02W01.PK02W-NX2 + 1;
    end
  end


  PK02W01.PK02W-NDX = PK02W01.PK02W-NDX + 1;

end // end PK02-320

// PAGING FORWARD OR BACKWARD
Function PK02-330()
   /* --------------------------------------------------------------------*/
   /* PAGING FORWARD OR BACKWARD*/
   /* --------------------------------------------------------------------*/

  if (PK02W01.PK02W-NDX > PK02W01.PK02W-END)
    PK02W01.PK02W-YES-NO-SW = "Y";
  else
    if (PK02W01.PK02W-NDX >= PK02W01.PK02W-BAS)
      PK02M001.PK02M-ACT[PK02W-NX2] = PK02W01.PK02W-ACT[PK02W-NDX];
      PK02M001.OP1CUOID[PK02W-NX2] = PK02W01.OP1CUOID[PK02W-NDX];
      PK02M001.OP1NORID[PK02W-NX2] = PK02W01.OP1NORID[PK02W-NDX];
      PK02M001.XARCD[PK02W-NX2] = PK02W01.XARCD[PK02W-NDX];
      PK02M001.SL4ZONE[PK02W-NX2] = PK02W01.SL4ZONE[PK02W-NDX];
      PK02M001.SL5LOCTN[PK02W-NX2] = PK02W01.SL5LOCTN[PK02W-NDX];
      set PK02M001.OP1CUOID[PK02W-NX2] normal;
      set PK02M001.OP1NORID[PK02W-NX2] normal;
      set PK02M001.XARCD[PK02W-NX2] normal;
      set PK02M001.SL4ZONE[PK02W-NX2] normal;
      set PK02M001.SL5LOCTN[PK02W-NX2] normal;
      PK02W01.PK02W-NX2 = PK02W01.PK02W-NX2 + 1;
    end
  end


  PK02W01.PK02W-NDX = PK02W01.PK02W-NDX + 1;

end // end PK02-330

// Reset highlighted fields
Function PK02-400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  PK02W01.PK02W-NX2 = 1;
  while (PK02W01.PK02W-NX2 <= 28)
    set PK02M001.PK02M-ACT[PK02W-NX2] initialAttributes;
    set PK02M001.OP1CUOID[PK02W-NX2] initialAttributes;
    set PK02M001.OP1NORID[PK02W-NX2] initialAttributes;
    set PK02M001.XARCD[PK02W-NX2] initialAttributes;
    set PK02M001.SL4ZONE[PK02W-NX2] initialAttributes;
    set PK02M001.SL5LOCTN[PK02W-NX2] initialAttributes;
    PK02W01.PK02W-NX2 = PK02W01.PK02W-NX2 + 1;
  end


  set PK02M001.CATOAP initialAttributes;
  set PK02M001.CAITEM initialAttributes;


end // end PK02-400

// Verify data that was entered
Function PK02-500()
   /* ------------------------------------------------------------*/
   /* IF EZEAID IS ENTER - CHECK FOR SELECTED ORDER INQUIRY*/
   /* ------------------------------------------------------------*/

  PK02W01.PK02W-ORD-INQ-SW = "N";
  if (converseVar.eventKey is enter)
    if (PK02M001.PK02M-ACT[1] == "S"
     || PK02M001.PK02M-ACT[2] == "S"
     || PK02M001.PK02M-ACT[3] == "S"
     || PK02M001.PK02M-ACT[4] == "S"
     || PK02M001.PK02M-ACT[5] == "S"
     || PK02M001.PK02M-ACT[6] == "S"
     || PK02M001.PK02M-ACT[7] == "S"
     || PK02M001.PK02M-ACT[8] == "S"
     || PK02M001.PK02M-ACT[9] == "S"
     || PK02M001.PK02M-ACT[10] == "S"
     || PK02M001.PK02M-ACT[11] == "S"
     || PK02M001.PK02M-ACT[12] == "S"
     || PK02M001.PK02M-ACT[13] == "S"
     || PK02M001.PK02M-ACT[14] == "S"
     || PK02M001.PK02M-ACT[15] == "S"
     || PK02M001.PK02M-ACT[16] == "S"
     || PK02M001.PK02M-ACT[17] == "S"
     || PK02M001.PK02M-ACT[18] == "S"
     || PK02M001.PK02M-ACT[19] == "S"
     || PK02M001.PK02M-ACT[20] == "S"
     || PK02M001.PK02M-ACT[21] == "S"
     || PK02M001.PK02M-ACT[22] == "S"
     || PK02M001.PK02M-ACT[23] == "S"
     || PK02M001.PK02M-ACT[24] == "S"
     || PK02M001.PK02M-ACT[25] == "S"
     || PK02M001.PK02M-ACT[26] == "S"
     || PK02M001.PK02M-ACT[27] == "S"
     || PK02M001.PK02M-ACT[28] == "S")
      PK02W01.PK02W-ORD-INQ-SW = "Y";
    end
  end

   /* --------------------------------------------------------------*/
   /* IF EZEAID IS ENTER - EDIT LINE ITEMS*/
   /*  */
   /* PK02W-UPD-REQ-SW - UPDATE REQUEST SWITCH.*/
   /* IF ACTION IS A,C,D SET SWITCH TO 'Y'.*/
   /* --------------------------------------------------------------*/

  if (converseVar.eventKey is enter)
    PK02W01.PK02W-NX2 = 28;
    PK02W01.PK02W-UPD-REQ-SW = "N"; /* UPDATE REQUEST SWITCH*/
    PK02W01.PK02W-WARNING-SW = "N"; /* ADD-WARNING NOT ON PICK POOL*/
    PK02W01.PK02W-YES-NO-SW = "N";
    while (PK02W01.PK02W-YES-NO-SW == "N")
      PK02-510();
    end
  end

   /* ------------------------------------------------------------*/
   /* IF ORDER INQUIRY WAS SELECTED AND NO ERRORS HAVE OCCURED.*/
   /* LOAD ORDER NUMBERS INTO PKWREC USING PKYREC.*/
   /* SET THE INQUIRY SELECTION TYPE TO 'O' FOR ORDER.*/
   /* TRANSFER CONTROL TO PK0B - ORDER INQUIRY.*/
   /* ------------------------------------------------------------*/

  if (PK02W01.PK02W-ORD-INQ-SW == "Y"
   && converseVar.validationMsgNum == 0)
    set PKYREC empty;
    PKWREC.PKWINDEX = PKWREC.PKWINDEX + 1;
    PK02W01.PK02W-NX2 = 1;
    PK02W01.PK02W-NX3 = 1;
    PK02W01.PK02W-YES-NO-SW = "N";
    while (PK02W01.PK02W-YES-NO-SW == "N")
      PK02-550();
    end
    PKYREC.XWHCD = PKWREC.XWHCD;
    PKYREC.XWHABRV = PKWREC.XWHABRV;
    PKWREC.PKWARRAY[PKWINDEX] = PKYREC.PKWARRAY;
    PKWREC.PKWFRMAP[PKWINDEX] = COMMAREA.CACURRAP;
    PKWREC.PKWSLTYP[PKWINDEX] = "O";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    COMMAREA.CATOAP = "PK0B";
    XSEXIT();
    PK02M001.VAGen_EZEMSG = COMMAREA.CAMSG;
  end

end // end PK02-500

// EDIT LINE ITEMS ON MAP
Function PK02-510()
   /* --------------------------------------------------------------------*/
   /* EDIT LINE ITEMS*/
   /* --------------------------------------------------------------------*/

  PK02M001.XXXERRID = "PK02-510";
  PK02W01.PK02W-ORD-ERR-SW = "N"; /* ORDER HAD ERRORS FLAG*/
  PK02W01.PK02W-LOC-ERR-SW = "N"; /* LOCATION HAD ERRORS FLAG*/
  PK02W01.PK02W-ACT-ERR-SW = "N"; /* ACTION FIELD HAD ERRORS FLAG*/


  if (PK02W01.PK02W-NX2 < 1) /* NO MORE ITEMS ON SCREEN*/
    PK02W01.PK02W-YES-NO-SW = "Y"; /* TO CHECK, RETURN*/
    return;
  end

   /* --------------------------------------------------------------------*/
   /* FOR ADDS AND CHANGES, LOCATION MUST BE VERIFIED*/
   /* --------------------------------------------------------------------*/

  if (PK02M001.PK02M-ACT[PK02W-NX2] == "A"
   || PK02M001.PK02M-ACT[PK02W-NX2] == "C")
    PK02-520();
  end

   /* --------------------------------------------------------------------*/
   /* FOR ADDS AND CHANGES, PICKING POOL HEADER MUST BE VERIFIED*/
   /* --------------------------------------------------------------------*/

  if (PK02M001.PK02M-ACT[PK02W-NX2] == "A"
   || PK02M001.PK02M-ACT[PK02W-NX2] == "C")
    PK02-530();
  end

   /* --------------------------------------------------------------------*/
   /* IF ORDER INQUIRY SELECTION AND NULL ORDER - ERROR*/
   /* --------------------------------------------------------------------*/

  if (PK02M001.PK02M-ACT[PK02W-NX2] == "S")
    if (PK02M001.OP1CUOID[PK02W-NX2] == 0)
      set PK02M001.OP1CUOID[PK02W-NX2] cursor, bold;
      set PK02M001.OP1NORID[PK02W-NX2] bold;
      PK02W01.PK02W-ORD-ERR-SW = "Y";
      converseLib.validationFailed(11);
    end
  end

   /* --------------------------------------------------------------------*/
   /* IF ACTION NOT A, C, D, 'S' OR ' ' - ACTION ERROR HAS OCCURRED*/
   /* --------------------------------------------------------------------*/

  if (PK02M001.PK02M-ACT[PK02W-NX2] != "A"
   && PK02M001.PK02M-ACT[PK02W-NX2] != "C"
   && PK02M001.PK02M-ACT[PK02W-NX2] != "D"
   && PK02M001.PK02M-ACT[PK02W-NX2] != "S"
   && PK02M001.PK02M-ACT[PK02W-NX2] != " ")
    set PK02M001.PK02M-ACT[PK02W-NX2] cursor, bold;
    PK02W01.PK02W-ACT-ERR-SW = "Y";
    converseLib.validationFailed(35);
  end

   /* --------------------------------------------------------------------*/
   /* IF ACTION FIELD IS ' ' AND FIELDS HAVE CHANGED*/
   /* IT IS AN ERROR THE USER FORGOT TO PUT IN 'A' OR 'C'*/
   /* --------------------------------------------------------------------*/

  if (PK02W01.PK02W-BAS == 0)
    PK02W01.PK02W-BAS = 1;
    PK02W01.PK02W-END = 28;
  end


  PK02W01.PK02W-NDX = PK02W01.PK02W-NX2 + PK02W01.PK02W-BAS - 1;


  if (PK02M001.PK02M-ACT[PK02W-NX2] != "A"
   && PK02M001.PK02M-ACT[PK02W-NX2] != "C")
    if (PK02W01.OP1CUOID[PK02W-NDX] != PK02M001.OP1CUOID[PK02W-NX2]
     || PK02W01.OP1NORID[PK02W-NDX] != PK02M001.OP1NORID[PK02W-NX2]
     || PK02W01.XARCD[PK02W-NDX] != PK02M001.XARCD[PK02W-NX2]
     || PK02W01.SL4ZONE[PK02W-NDX] != PK02M001.SL4ZONE[PK02W-NX2]
     || PK02W01.SL5LOCTN[PK02W-NDX] != PK02M001.SL5LOCTN[PK02W-NX2])
      set PK02M001.PK02M-ACT[PK02W-NX2] cursor, bold;
      PK02W01.PK02W-ACT-ERR-SW = "Y"; /* ACTION FIELD ERROR*/
      converseLib.validationFailed(43);
    end
  end

   /* --------------------------------------------------------------------*/
   /* IF ACTION FIELD IS 'C' AND KEY FIELD HAVE CHANGED, IT IS ERROR*/
   /* --------------------------------------------------------------------*/

  if (PK02M001.PK02M-ACT[PK02W-NX2] == "C")
    if (PK02W01.OP1CUOID[PK02W-NDX] != PK02M001.OP1CUOID[PK02W-NX2]
     || PK02W01.OP1NORID[PK02W-NDX] != PK02M001.OP1NORID[PK02W-NX2])
      set PK02M001.PK02M-ACT[PK02W-NX2] cursor, bold;
      PK02W01.PK02W-ACT-ERR-SW = "Y"; /* ACTION FIELD ERROR*/
      converseLib.validationFailed(396); /* CHANGE ONLY VALID FOR AREA/ZONE/LOC*/
    end
  end

   /* --------------------------------------------------------------------*/
   /* IF ACTION FIELD IS 'A' (ADD) - CHECK FOR DUPLICATES*/
   /* --------------------------------------------------------------------*/

  if (PK02M001.PK02M-ACT[PK02W-NX2] == "A")
    PK02W01.PK02W-NDX = 1;
    while (PK02W01.PK02W-NDX <= PK02W01.PK02W-TOT-REC-READ)
      PK02-540(); /* Look in working storage*/
    end
    PK02-560(); /* Look at rest of the map*/
  end

   /* --------------------------------------------------------------------*/
   /* THE PROGRAM WILL NEED TO KNOW DOWN STREAM IF UPDATES WERE*/
   /* REQUESTED.  (PK02W-UPD-REQ-SW IS UPDATE REQUEST SWITCH).*/

   /* IF UPDATES WERE REQUESTED AND SELECTION FOR ORDER INQUIRY*/
   /* ALSO WAS REQUESTED, IT IS AN ERROR*/
   /* --------------------------------------------------------------------*/

  if (PK02M001.PK02M-ACT[PK02W-NX2] == "A"
   || PK02M001.PK02M-ACT[PK02W-NX2] == "C"
   || PK02M001.PK02M-ACT[PK02W-NX2] == "D")
    PK02W01.PK02W-UPD-REQ-SW = "Y"; /* UPDATE IS REQUESTED*/
    if (PK02W01.PK02W-ORD-INQ-SW == "Y") /* SELECTION FOR ORDER INQUIRY*/
      converseLib.validationFailed(171);
      PK02W01.PK02W-ACT-ERR-SW = "Y"; /* ACTION FIELD ERROR*/
      set PK02M001.PK02M-ACT[PK02W-NX2] cursor, bold;
    end
  end


   /* --------------------------------------------------------------------*/
   /* RESET FIELDS - MULTIPLY PASS UNTIL ERRORS ARE CORRECTED*/
   /* --------------------------------------------------------------------*/

  if (PK02W01.PK02W-ORD-ERR-SW == "N")
    set PK02M001.OP1CUOID[PK02W-NX2] normal;
    set PK02M001.OP1NORID[PK02W-NX2] normal;
  end

  if (PK02W01.PK02W-LOC-ERR-SW == "N")
    set PK02M001.XARCD[PK02W-NX2] normal;
    set PK02M001.SL4ZONE[PK02W-NX2] normal;
    set PK02M001.SL5LOCTN[PK02W-NX2] normal;
  end

  if (PK02W01.PK02W-ACT-ERR-SW == "N")
    set PK02M001.PK02M-ACT[PK02W-NX2] normal;
  end


  PK02W01.PK02W-NX2 = PK02W01.PK02W-NX2 - 1; /* DECREMENT MAP INDEX*/

end // end PK02-510

// VERIFY AREA, ZONE AND LOCATION
Function PK02-520()
   /* --------------------------------------------------------------------*/
   /* VERIFY AREA, ZONE & LOCATION*/
   /* --------------------------------------------------------------------*/

  set SL5REC empty;
  SL5REC.XWHCD = PK02M001.XWHCD;
  SL5REC.XARCD = PK02M001.XARCD[PK02W-NX2];
  SL5REC.SL4ZONE = PK02M001.SL4ZONE[PK02W-NX2];
  SL5REC.SL5LOCTN = PK02M001.SL5LOCTN[PK02W-NX2];

  call "IO1490" ("SA", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes}; /* SELECT UNIQUE ROW*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == -811)
     /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* IN USE*/
      set PK02M001.XARCD[PK02W-NX2] cursor, modified, bold;
      set PK02M001.SL4ZONE[PK02W-NX2] modified, bold;
      set PK02M001.SL5LOCTN[PK02W-NX2] modified, bold;
      PK02W01.PK02W-LOC-ERR-SW = "Y"; /* AREA/ZONE/LOC ERROR*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(238); /* AREA/ZONE/LOC NOT IN STK LOC TBL*/
        set PK02M001.XARCD[PK02W-NX2] cursor, modified, bold;
        set PK02M001.SL4ZONE[PK02W-NX2] modified, bold;
        set PK02M001.SL5LOCTN[PK02W-NX2] modified, bold;
        PK02W01.PK02W-LOC-ERR-SW = "Y"; /* AREA/ZONE/LOC ERROR*/
        return;
      else
        converseLib.validationFailed(29); /* FATAL ERROR*/
        set PK02M001.XARCD[PK02W-NX2] cursor, modified, bold;
        set PK02M001.SL4ZONE[PK02W-NX2] modified, bold;
        set PK02M001.SL5LOCTN[PK02W-NX2] modified, bold;
        PK02W01.PK02W-LOC-ERR-SW = "Y"; /* AREA/ZONE/LOC ERROR*/
        TA1REC.TA1PGMNO = "PK02";
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1LOC = "SELECT UNIQUE OF TABLE ROW";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
        TA1REC.TA1DBASE = "DSTLOC  ";
        TA1REC.TA1TBLVU = "VLOCAT01";
        TA1REC.TA1TBLKE = SL5REC.SL5KEY;
        TAEREC.SQLCAREC = SQLCA.SQLCAREC;
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
        return;
      end
    end
  end

   /* ---------------------------------------------------------------------*/
   /* EVEN IF AREA/ZONE/LOC IS IN STOCK LOCATION TABLE,*/
   /* SL5REC.YLTCD MUST = '15' OR '17' TO BE VALID FOR THIS PROGRAM.*/
   /* ---------------------------------------------------------------------*/

  if (SL5REC.YLTCD == "15"
   || SL5REC.YLTCD == "17")
     /* NEXT SENTENCE*/
  else
    converseLib.validationFailed(51); /* LOCATION IS MISSING OR INVALID*/
    set PK02M001.XARCD[PK02W-NX2] cursor, modified, bold;
    set PK02M001.SL4ZONE[PK02W-NX2] modified, bold;
    set PK02M001.SL5LOCTN[PK02W-NX2] modified, bold;
    PK02W01.PK02W-LOC-ERR-SW = "Y"; /* AREA/ZONE/LOC ERROR*/
  end

end // end PK02-520

// VERIFY PICKING POOL HEADER
Function PK02-530()
   /* --------------------------------------------------------------------*/
   /* VERIFY PICKING POOL HEADER*/
   /* --------------------------------------------------------------------*/

  set PK4REC empty;
  TA1REC.TA1LOCAT[2] = "PK02W-530";
  PK4REC.XWHCD = PK02M001.XWHCD;
  PK02W01.PK02W-9-NUM = PK02M001.OP1CUOID[PK02W-NX2];
  PK4REC.PK1PRTN = PK02W01.PK02W-CHK-DIG;
  PK4REC.PK1CUOID = PK02M001.OP1CUOID[PK02W-NX2];
  PK4REC.PK1NORID = PK02M001.OP1NORID[PK02W-NX2];
  PWIREC.PWIFUNC = "S ";
  call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* ROW NOT FOUND*/
      PK02W01.PK02W-WARNING-SW = "Y";
                                   /* ADDED-WARNING ORDER NOT IN PICK POOL*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(28); /* IN USE*/
        PK02W01.PK02W-ORD-ERR-SW = "Y"; /* OP1CUOID/OP1NORID ERROR*/
        set PK02M001.OP1CUOID[PK02W-NX2] cursor, modified, bold;
        set PK02M001.OP1NORID[PK02W-NX2] modified, bold;
        return;
      else
        converseLib.validationFailed(29); /* FATAL ERROR*/
        TA1REC.TA1PGMNO = "PK02";
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
        TA1REC.TA1DBASE = "DPICK   ";
        TA1REC.TA1TBLVU = "VPOOLH01";
        TA1REC.TA1TBLKE = PK4REC.PK4KEY;
        TAEREC.SQLCAREC = SQLCA.SQLCAREC;
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
        return;
      end
    end
  end
end // end PK02-530

// CHECK FOR DUPS ON ADD (W/S)
Function PK02-540()

   /* ---------------------------------------------------------------------*/
   /* ACTION 'A' (ADD), CHECK FOR DUPLICATES IN WORKING STORAGE*/
   /* ---------------------------------------------------------------------*/

  if (PK02W01.OP1CUOID[PK02W-NDX] == PK02M001.OP1CUOID[PK02W-NX2]
   && PK02W01.OP1NORID[PK02W-NDX] == PK02M001.OP1NORID[PK02W-NX2])
    set PK02M001.OP1CUOID[PK02W-NX2] cursor, bold;
    set PK02M001.OP1NORID[PK02W-NX2] bold;
    PK02W01.PK02W-ORD-ERR-SW = "Y";
    converseLib.validationFailed(44);
    PK02W01.PK02W-NDX = PK02W01.PK02W-TOT-REC-READ + 1;
  end


  PK02W01.PK02W-NDX = PK02W01.PK02W-NDX + 1; /* INCREMENT W/S TBL INDEX*/

end // end PK02-540

// LOAD PKWREC FOR ORDER INQUIRY
Function PK02-550()
   /* --------------------------------------------------------------------*/
   /* LOAD PKWREC FOR ORDER INQUIRY TRANSFER*/
   /* --------------------------------------------------------------------*/

  PK02M001.XXXERRID = "PK02-550";

  if (PK02W01.PK02W-NX2 > 28)
    PK02W01.PK02W-YES-NO-SW = "Y";
    return;
  end


  if (PK02M001.PK02M-ACT[PK02W-NX2] == "S")
    PKYREC.PKYORACT[PK02W-NX3] = PK02M001.PK02M-ACT[PK02W-NX2];
    PKYREC.PK1CUOID[PK02W-NX3] = PK02M001.OP1CUOID[PK02W-NX2];
    PKYREC.PK1NORID[PK02W-NX3] = PK02M001.OP1NORID[PK02W-NX2];
    PK02W01.PK02W-NX3 = PK02W01.PK02W-NX3 + 1;
  end


  PK02W01.PK02W-NX2 = PK02W01.PK02W-NX2 + 1; /* INCREMENT MAP INDEX*/

end // end PK02-550

// CHECK FOR DUPS ON ADD ( MAP )
Function PK02-560()

   /* ---------------------------------------------------------------------*/
   /* ACTION 'A' (ADD), CHECK FOR DUPLICATES ON OTHER ELEMENTS OF THE MAP*/
   /* ---------------------------------------------------------------------*/

  PK02W01.PK02W-NX4 = PK02W-NX2 + 1;

  while (PK02W01.PK02W-NX4 <= 28)

    if (PK02M001.PK02M-ACT[PK02W-NX4] == "A"
     && PK02M001.OP1CUOID[PK02W-NX2] == PK02M001.OP1CUOID[PK02W-NX4]
     && PK02M001.OP1NORID[PK02W-NX2] == PK02M001.OP1NORID[PK02W-NX4])

       /* If true, point to both errors*/

      set PK02M001.OP1CUOID[PK02W-NX4] cursor, bold;
      set PK02M001.OP1NORID[PK02W-NX4] bold;
      set PK02M001.OP1CUOID[PK02W-NX2] cursor, bold;
      set PK02M001.OP1NORID[PK02W-NX2] bold;

      PK02W01.PK02W-ORD-ERR-SW = "Y";
      converseLib.validationFailed(44);
    end

    PK02W01.PK02W-NX4 = PK02W01.PK02W-NX4 + 1;
  end

end // end PK02-560

// Process valid input request
Function PK02-600()

   /* --------------------------------------------------------------------*/
   /* IF UPDATES WERE REQUESTED, UPDATE ORDER LOCATAION TABLE*/
   /* THIS PROCESS IS PERFORMED 28 TIMES VARYING THE INDEX (PK02W-NX2)*/
   /* FROM 1 TO 28. IF UPDATES WERE SUCCESSFUL CLEAR THE MAP AND W/S*/
   /* AND RELOAD THE MAP AND W/S.*/
   /* --------------------------------------------------------------------*/

  if (PK02W01.PK02W-UPD-REQ-SW == "Y" /* UPDATE IS REQUEST*/
   && converseVar.validationMsgNum == 0) /* AND NO ERROR, DO UPDATE*/
    PK02W01.PK02W-NDX = 1;
    PK02W01.PK02W-NX2 = 1;
    PK02W01.PK02W-UPD-ERR-SW = "N";
    while (PK02W01.PK02W-NX2 <= 28
     && PK02W01.PK02W-UPD-ERR-SW == "N")
      PK02-610();
    end
    if (PK02W01.PK02W-UPD-ERR-SW == "N") /* UPDATE SUCCESSFUL*/
      set PK02W01 empty;
      PK02W01.PK02W-FIRST-TIME = "Y";
      set PK02M001 initial;
    end
  end

   /* --------------------------------------------------------------------*/
   /* UPDATE NOT REQUESTED, POSITION CURSOR TO 1ST ORDER ITEM*/
   /* --------------------------------------------------------------------*/

  if (PK02W01.PK02W-UPD-REQ-SW == "N"
   && converseVar.validationMsgNum == 0)
    set PK02M001.PK02M-ACT[1] cursor;
  end

   /* ------------------------------------------------------------*/
   /* Commit all changes to protected resources.*/
   /* ------------------------------------------------------------*/


  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/


end // end PK02-600

// DETERMINE UPDATE ACTION
Function PK02-610()

   /* --------------------------------------------------------------------*/
   /* DETERMINE UPDATE ACTION - ADD/CHANGE/DELETE*/
   /* --------------------------------------------------------------------*/

  PK02M001.XXXERRID = "PK02-610";
  set VORLOC01 empty;


  if (PK02M001.PK02M-ACT[PK02W-NX2] == "D")
    PK02-620(); /* DELETE ORDER LOCATION RECORD*/
  else
    if (PK02M001.PK02M-ACT[PK02W-NX2] == "A"
     || PK02M001.PK02M-ACT[PK02W-NX2] == "C")
      PK02-630(); /* ADD OR CHANGE ORDER LOCATION RECORD*/
    end
  end


  PK02W01.PK02W-NX2 = PK02W01.PK02W-NX2 + 1; /* INCREMENT MAP INDEX*/

end // end PK02-610

// DELETE ORDER LOCATION ROW
Function PK02-620()

   /* ---------------------------------------------------------------------*/
   /* DELETE ORDER LOCATION TABLE ROW*/
   /* ---------------------------------------------------------------------*/

  VORLOC01.XWHCD = PK02M001.XWHCD;
  PK02W01.PK02W-9-NUM = PK02M001.OP1CUOID[PK02W-NX2];
  VORLOC01.OP1PARTN = PK02W01.PK02W-CHK-DIG;
  VORLOC01.OP1CUOID = PK02M001.OP1CUOID[PK02W-NX2];
  VORLOC01.OP1NORID = PK02M001.OP1NORID[PK02W-NX2];
  VORLOC01.XXX-REC-TYP = "1";

  call "IO6050" ("D ", SQLCA, VORLOC01) {isNoRefresh = yes, isExternal = yes}; /* DELETE UNIQUE ROW*/

  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(32); /* TABLE UPDATE SUCESSFUL*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(21); /* CONTENTION FOR DATABASE RESOURCE*/
      PK02W01.PK02W-UPD-ERR-SW = "Y";
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* NO RECORD FOUND*/
        PK02W01.PK02W-UPD-ERR-SW = "Y";
        return;
      else
        converseLib.validationFailed(22); /* FATAL ERROR*/
        PK02W01.PK02W-UPD-ERR-SW = "Y";
        TA1REC.TA1PGMNO = "PK02";
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1LOC = "DELETE UNIQUE TABLE ROW";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
        TA1REC.TA1DBASE = "DPICK   ";
        TA1REC.TA1TBLVU = "VORLOC01";
        TA1REC.TA1TBLKE = VORLOC01.VORLOC01-KEY;
        TAEREC.SQLCAREC = SQLCA.SQLCAREC;
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
        return;
      end
    end
  end

end // end PK02-620

// ADD/CHANGE ORDER LOCATION ROW
Function PK02-630()

   /* --------------------------------------------------------------------*/
   /* ADD OR CHANGE ORDER LOCATION TABLE ROW*/
   /* --------------------------------------------------------------------*/

  VORLOC01.XWHCD = PK02M001.XWHCD;
  PK02W01.PK02W-9-NUM = PK02M001.OP1CUOID[PK02W-NX2];
  VORLOC01.OP1PARTN = PK02W01.PK02W-CHK-DIG;
  VORLOC01.OP1CUOID = PK02M001.OP1CUOID[PK02W-NX2];
  VORLOC01.OP1NORID = PK02M001.OP1NORID[PK02W-NX2];
  VORLOC01.XXX-REC-TYP = "1";
  VORLOC01.XGPCD = "00";
  VORLOC01.XARCD = PK02M001.XARCD[PK02W-NX2];
  VORLOC01.SL4ZONE = PK02M001.SL4ZONE[PK02W-NX2];
  VORLOC01.SL5LOCTN = PK02M001.SL5LOCTN[PK02W-NX2];
  VORLOC01.SWCLNENB = 0;
  VORLOC01.PK4SLIND = " ";
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  VORLOC01.ZZZCHGDT = TA2REC.TA2GRGGN;
  VORLOC01.ZZZCHGTM = TA2REC.TA2TIMHM;

  if (PK02M001.PK02M-ACT[PK02W-NX2] == "C")
    PK02W01.PK02W-NDX = PK02W01.PK02W-NX2 + PK02W01.PK02W-BAS - 1;
    VORLOC01.ZZZCHGCT = PK02W01.ZZZCHGCT[PK02W-NDX];
  end


   /* --------------------------------------------------------------------*/
   /* ADD UNIQUE ROW*/
   /* --------------------------------------------------------------------*/

  if (PK02M001.PK02M-ACT[PK02W-NX2] == "A")
    call "IO6050" ("A ", SQLCA, VORLOC01) {isNoRefresh = yes, isExternal = yes}; /* ADD UNIQUE ROW*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (PK02W01.PK02W-WARNING-SW == "Y")
        converseLib.validationFailed(172); /* ORDER ADDED-WARNING ORDER NOT IN PICK POOL*/
        return;
      else
        converseLib.validationFailed(32); /* TABLE UPDATE SUCCESSFUL*/
        return;
      end
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(21); /* CONTENTION FOR DATABASE RESOURCE*/
        PK02W01.PK02W-UPD-ERR-SW = "Y";
        return;
      else
        converseLib.validationFailed(22); /* FATAL ERROR*/
        PK02W01.PK02W-UPD-ERR-SW = "Y";
        TA1REC.TA1PGMNO = "PK02";
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1LOC = "ADD UNIQUE TABLE ROW";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
        TA1REC.TA1DBASE = "DPICK   ";
        TA1REC.TA1TBLVU = "VORLOC01";
        TA1REC.TA1TBLKE = VORLOC01.VORLOC01-KEY;
        TAEREC.SQLCAREC = SQLCA.SQLCAREC;
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
        return;
      end
    end
  end


   /* --------------------------------------------------------------------*/
   /* CHANGE UNIQUE ROW*/
   /* --------------------------------------------------------------------*/

  if (PK02M001.PK02M-ACT[PK02W-NX2] == "C")
    call "IO6050" ("U ", SQLCA, VORLOC01) {isNoRefresh = yes, isExternal = yes}; /* CHANGE UNIQUE ROW*/
    if (SQLCA.VAGen_SQLCODE == 0)
      converseLib.validationFailed(32); /* TABLE UPDATE SUCCESSFUL*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(21); /* CONTENTION FOR DATABASE RESOURCE*/
        PK02W01.PK02W-UPD-ERR-SW = "Y";
        return;
      else
        converseLib.validationFailed(22); /* FATAL ERROR*/
        PK02W01.PK02W-UPD-ERR-SW = "Y";
        TA1REC.TA1PGMNO = "PK02";
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1LOC = "CHANGE UNIQUE TABLE ROW";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
        TA1REC.TA1DBASE = "DPICK   ";
        TA1REC.TA1TBLVU = "VORLOC01";
        TA1REC.TA1TBLKE = VORLOC01.VORLOC01-KEY;
        TAEREC.SQLCAREC = SQLCA.SQLCAREC;
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
        return;
      end
    end
  end

end // end PK02-630

//*** RECORD=PK02W01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record PK02W01 type basicRecord
  3 PK02W-GROUP PK02W-GROUP ; 
    5 PK02W-FIRST-TIME PK02W-FIRST-TIME ; 
    5 PK02W-BLD-MAP-SW PK02W-BLD-MAP-SW ; 
    5 PK02W-ORD-INQ-SW PK02W-ORD-INQ-SW ; 
    5 PK02W-YES-NO-SW PK02W-YES-NO-SW ; 
    5 PK02W-UPD-REQ-SW PK02W-UPD-REQ-SW ; 
    5 PK02W-UPD-ERR-SW PK02W-UPD-ERR-SW ; 
    5 PK02W-WARNING-SW PK02W-WARNING-SW ; 
    5 PK02W-ORD-ERR-SW PK02W-ORD-ERR-SW ; 
    5 PK02W-LOC-ERR-SW PK02W-LOC-ERR-SW ; 
    5 PK02W-ACT-ERR-SW PK02W-ACT-ERR-SW ; 
    5 PK02W-TOT-REC-READ PK02W-TOT-REC-READ ; 
    5 PK02W-NDX PK02W-NDX ; 
    5 PK02W-NX2 PK02W-NX2 ; 
    5 PK02W-NX3 PK02W-NX3 ; 
    5 PK02W-NX4 PK02W-NX4 ; 
    5 PK02W-BAS PK02W-BAS ; 
    5 PK02W-END PK02W-END ; 
    5 PK02W-9-NUM PK02W-9-NUM ; 
      10 * char(8) ; // filler
      10 PK02W-CHK-DIG PK02W-CHK-DIG ; 
    5 PK02W-ORDER-TABLE PK02W-ORDER-TABLE ; 
      10 PK02W-ACT PK02W-ACT [1000] ; 
      10 OP1CUOID OP1CUOID [1000] ; 
      10 OP1NORID OP1NORID [1000] ; 
      10 XARCD XARCD [1000] ; 
      10 SL4ZONE SL4ZONE [1000] ; 
      10 SL5LOCTN SL5LOCTN [1000] ; 
      10 ZZZCHGCT ZZZCHGCT [1000] ; 
end // end PK02W01

//*** RECORD=VORLOC01 ****
// ;-----------------------------------------------------------
// ;----- ORDER LOCATION TABLE RECORD      --------------------
// ;----- CSP RECORD NAME IS VORLOC01      --------------------
// ;----- DATABASE  NAME IS DPICK.VORLOC01 --------------------
// ;----- THE I/O MODULE IS IO6050         --------------------
// ;-----                                  --------------------
// ;----- CREATED 11-08-91                 --------------------
// ;----- AUTHOR: DING CHIANG              --------------------
// ;-----------------------------------------------------------
// ************************
Record VORLOC01 type basicRecord
  5 VORLOC01-GROUP VORLOC01-GROUP ; 
    10 VORLOC01-KEY VORLOC01-KEY ; 
      15 XWHCD XWHCD ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
      15 XXX-REC-TYP XXX-REC-TYP ; 
    10 XGPCD XGPCD ; 
    10 XARCD XARCD ; 
    10 SL4ZONE SL4ZONE ; 
    10 SL5LOCTN SL5LOCTN ; 
    10 SWCLNENB SWCLNENB ; 
    10 PK4SLIND PK4SLIND ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VORLOC01

// convert binary to numeric
DataItem PK02W-9-NUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order action field
DataItem PK02W-ACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// action field error switch
DataItem PK02W-ACT-ERR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// base index (used for paging)
DataItem PK02W-BAS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// build map switch
DataItem PK02W-BLD-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last digit to pk02w-9-num
DataItem PK02W-CHK-DIG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end index (used for paging)
DataItem PK02W-END smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first time or start from top
DataItem PK02W-FIRST-TIME char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK02W01 group level
DataItem PK02W-GROUP char(19033)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// location field error switch
DataItem PK02W-LOC-ERR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage table index
DataItem PK02W-NDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map table index
DataItem PK02W-NX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pkyrec table index for ord inq
DataItem PK02W-NX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// second map index for searching
DataItem PK02W-NX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order field error switch
DataItem PK02W-ORD-ERR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order inquiry switch
DataItem PK02W-ORD-INQ-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order data
DataItem PK02W-ORDER-TABLE char(19000)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total records read
DataItem PK02W-TOT-REC-READ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// update errors switch
DataItem PK02W-UPD-ERR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update request switch
DataItem PK02W-UPD-REQ-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning message switch
DataItem PK02W-WARNING-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// common switch
DataItem PK02W-YES-NO-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem VORLOC01-GROUP char(33)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem VORLOC01-KEY char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XXX-REC-TYP
DataItem XXX-REC-TYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

