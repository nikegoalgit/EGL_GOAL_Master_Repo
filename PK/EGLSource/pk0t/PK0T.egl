package pk0t;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import dg.common.*;
import in1.common.*;
import ku.common.*;
import ob.common.*;
import op.common.*;
import pc.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PK0T ****
// ************************************************************
// * applid:    pk0t    select order planning
// *                          update
// ************************************************************
// * maint log
// *  when      who     what
// *-------- -------- -----------------------------------------
// *09/15/87  bnaber  original creation of program
// *11/29/88  JWOOD   ADDED NONCSP OPTION TO CALLS
// *11/29/88  JWOOD   ADDED XSSEGTR LOGIC
// *07/21/89  jcampb  changed xfer from pk0i to pk09
// *11/08/89  jcampb  pgm using wrong release date (pkbreldt)
// *                  should be using (pkbplrdt) fixed
// *03/05/91  SBEAUC  Changed PKA-items to XHR-items due to
// *                  table changes.
// *03/19/91  BGOFF   Removed build schedule and added special
//                    handling flag and changed map title.
// *03/27/91  MWALTO  CHG'D MAP TITLE TO "PLAN"
// *04/24/91  SBEAUC  Corrected error msg given when pf6
//                    pressed with no data in t/s.
// *09/03/91  SHENDE  -PK0TSQ0 never got past the first item in
//                    table dpick.vpooli01.  Fixed by initial-
//                    izing index before each loop.
//                    Also, program went through loop one extra
//                    time repeating last item.  Fixed by
//                    switching "if not end" condition with
//                    fetch dpick.vpooli01 to catch end flag.
//                    -Added tf_carr_cd to PK0TW03 and moved it
//                    into pkhrec for dpick.vselor01.
// *09/13/91  SHENDE  -Moved pk_sel_ind to pool header table to
//                    indicate if item has been selected
//                    de-selected.
// *10/10/91  jcampb  table changes
// *10/11/91  SHENDE  Allow whse '07' to be transfered to this
//                    appl. from PW0W.
// *12/18/91  SHENDE  Change so that division code remains the
//                    same rather than using pkwrec.xdvcd.
//                    Also, use itm qty rather than calculate.
// *01/14/92  SHENDE  Set spcl hndl flag depending upon sel
//                    typ cd of 5, 6, 10, 11, 12, 13.
// *03/09/92  SHENDE  Add xbc-brand-code (xbccd) for March
//                    table changes. Dpick.vselor01 table
// *03/16/92  SHENDE  Allow pk0t to return to PW0W for whse 02
//                    and 04.
// *04/21/92  SHENDE  Set pk-sel-typ-cd for in-store promo ord
// *05/16/92  SHENDE  Changed error msg from #105 to #226.
// *09/14/92  SHENDE  Move DNSB date to pkhrec when order sel'd
// *09/24/92  SHENDE  Display 1000 orders on screen.
// *03/12/93  WTATE   INITIALIZE PK0TWSB5 INDEX
// *03/12/93  RMORGA  Add PK0TS-CHK-ORD-STAT, don't allow
//                    changes in orders that are running.
// *07/28/93  RCREAM  Changed PF3 logic to allow transfer to
//                    PW0W.
// *08/11/95  CBRINE  CANADA Added XCTCD to PKWREC
// *11/13/95  PJAMES  Added warehouse 42 code to PK0TST0
// *04/15/97  PANDER  Do not allow basics orders (XOTCD = 'FV')
//                    to be selected.
// *04/10/98  kviswa  Added DNSB checking for orders which are)
//                    on pool and also for orders which are
//                    not on pool                             *
// *05/12/00  MARBUC  MODIFY PK0KS-GET-VORHDR01 to perform
// *                   XX0XS-SELECT-ORDER instead of calling
// *                   IO0430
// *                  Add XX0XW03 and OPHREC to Record/Table
// *                   list
// *04/06/01  PVENKA  1) MODIFY PK0KS-GET-VORHDR01 to perform
// *                   XX0XS-SELECT-ORDER instead of calling
// *                   IO0430 FOR SAP WHSES 04,07,09,42,51
// *                  2) MOVE MAP WHSE VALUES TO THE
// *                     XX0XW03 and OP1REC WHSE IN
// *                     PK0KS-GET-VORHDR01.
// *                     LOOK FOR DLVRUSA KEYWORD
// *********************
Program PK0T type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  OP1REC OP1REC; // record
  OPHREC OPHREC; // record
  PK0TW01 PK0TW01; // record
  PK0TW02 PK0TW02; // record
  PK0TW03 PK0TW03; // record
  PK4REC PK4REC; // record
  PK5REC PK5REC; // record
  PK9REC PK9REC; // record
  PKBREC PKBREC; // record
  PKHREC PKHREC; // record
  PKWREC PKWREC; // record
  PKYREC PKYREC; // record
  PWIREC PWIREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  XX0XW03 XX0XW03; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use XPPTBL {deleteAfterUse = yes}; // table
  use XOTTBL; // table
  use PK0TM.PK0TM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PK0T010: PK0T010();
    goto PK0T010;
  end // end main
end // end PK0T

// program control
Function PK0T010()
   /* *********************************************************/
   /* * this process controls entire program process control **/
   /* * transfer to other applications occurs in converse    **/
   /* *********************************************************/

  if (PK0TW01.PK0TWERSW == "Y") /* set error sw*/
    PK0TW01.PK0TWFL1 = "N";

    while (PK0TW01.PK0TWFL1 == "N")
      PK0T200();
      PK0TW01.PK0TWERSW = "N"; /* set error sw*/
    end

  end


  set PKYREC empty;

  XPPK001(); /* check picking security*/

  PK0TM001.XWHCD = PKWREC.XWHCD;
  if (PKWREC.PKWARRAY == " ")
    /* next sentence;*/
  else
    PKYREC.PKWARRAY = PKWREC.PKWARRAY;
  end

  PK0T100(); /* init pgm areas*/

   /* ---------------------------------------------------------*/
   /* control pgm converse*/
   /* ---------------------------------------------------------*/

  PK0TW01.PK0TWFL1 = "N";

  while (PK0TW01.PK0TWFL1 == "N")
    PK0T200();
  end

   /* **********************************************************/
end // end PK0T010

// program initialization
Function PK0T100()



      /* *********************************************************/
      /* * init program areas                                   **/
      /* *********************************************************/



  set PKBREC empty;
  set PKHREC empty;
  set PK4REC empty;
  set PK9REC empty;
  set TA1REC empty;
  set PK0TW01 empty;
  set PK0TW03 empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  TA1REC.TA1MAP = "PK0TM001";
  PK0TM001.XWHCD = PKWREC.XWHCD;

  if (COMMAREA.CAFROMAP == "PW0W") /* pick planning*/
    PKWREC.PKWSELSW = "PP";
  end


      /* init map*/

  PK0TSO1();
                                   /* fill up screen for first time thru*/



   /* ************************************************************/
end // end PK0T100

// process map
Function PK0T200()



      /* *********************************************************/
      /* * this process controls the converse for the map and   **/
      /* * the processing of the map                            **/
      /* *********************************************************/



   /* ************************************************************/
  converse PK0TM001 ;
   /* ************************************************************/



  PK0TSA0(); /* process conversed screen pk0km001*/


   /* ************************************************************/
end // end PK0T200

// check ord stat pk_sel_id
Function PK0TS-CHK-ORD-STAT()


                     /* PK0TS-CHK-ORD-STAT*/
       /* check if order is in current sameday ( PK_SEL_IND )*/

   /* ****************************************************************/
   /* Edit for orders which have already been picked up by the*/
   /* batch job.*/
   /* Edit for 'Basics' orders.*/
   /* ****************************************************************/

  set PK4REC empty;
  TA1REC.TA1LOCAT[2] = "PK0TSE3";
  PK4REC.XWHCD = PK0TM001.XWHCD;
  PK4REC.PK1CUOID = PK0TM001.PK1CUOID[PK0TWSB2];
  PK4REC.PK1NORID = PK0TM001.PK1NORID[PK0TWSB2];

  try
    call "IO1720" ("S ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (PK4REC.PK4SLIND == "D")
      set PK0TM001.PK0TMACT[PK0TWSB2] cursor, bold;
      converseLib.validationFailed(411); /* Order picked for selection already*/
    end
    if (PK4REC.XOTCD == "FV")
      set PK0TM001.PK0TMACT[PK0TWSB2] cursor, bold;
      converseLib.validationFailed(501); /* Basics order not available to select*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1PGMNM = "RETN";
      TA1REC.TA1LOCAT[1] = "IO1720 ";
      TA1REC.TA1LOCAT[2] = "SELECT ";
      TA1REC.TA1LOCAT[3] = "ROW    ";
      TA1REC.TA1DBASE = "DPICK  ";
      TA1REC.TA1TBLVU = "VPOOLH01";
      TA1REC.TA1TBLKE = PK4REC.PK4KEY;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end



end // end PK0TS-CHK-ORD-STAT

// Get OP1REC VIA IO For VORHDR01
Function PK0TS-GET-VORHDR01()


  set SQLCA empty;
  set OP1REC empty;
     /* Get DORDER.VORHDR01 using OP1REC*/
  OP1REC.OP1CUOID = PK4REC.PK1CUOID;
  OP1REC.OP1NORID = PK4REC.PK1NORID;
  PK0TW01.PK0TWNUM = PK4REC.PK1CUOID;
  OP1REC.OP1PARTN = PK0TW01.PK0TWPRT;
   /* DLVRUSA CHANGES BEGIN*/
  XX0XW03.XWHCD = PK0TM001.XWHCD;
  OP1REC.XWHCD = PK0TM001.XWHCD;
   /* DLVRUSA CHANGES END*/

   /* START ADDED  05/12/00  SAP ACCESS OTP FOR 42 AND ORDER FOR ALL OTHER*/
   /* START ADDED  04/04/01  SAP ACCESS OTP FOR SAP WHSES ORDER FOR ALL*/
   /* OTHER. SAP WAREHOUSES ARE 04,07,09,42 and 51.*/
  XSPKS-SELECT-ORDER();
   /* CALL IO0430 'S ',SQLCA,OP1REC (NOMAPS,NONCSP;*/
   /* END   ADDED  05/12/00  SAP*/


  if (SQLCA.VAGen_SQLCODE == 0)
    /* continue*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      PK0TW03.PK0TMACT[PK0TWSB4] = " ";
      /* SET pk0tW03.XPPCD(pk0tWSB4)    ;*/
      /* SET pk0tW03.PK1CUOID(pk0tWSB4) ;*/
      /* SET pk0tW03.PK1NORID(pk0tWSB4) ;*/
      set PK0TM001.PK0TMACT[PK0TWSB4] cursor, bold;
      set PK0TM001.PK1CUOID[PK0TWSB4] bold;
      set PK0TM001.PK1NORID[PK0TWSB4] bold;
      converseLib.validationFailed(520);
      PK0TW01.PK0TWERSW = "Y"; /* set error sw*/
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "PK0T    ";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1LOCAT[1] = "PK0TS-GE";
      TA1REC.TA1LOCAT[2] = "T-VORHDR";
      TA1REC.TA1LOCAT[3] = "01 IO043";
      TA1REC.TA1LOCAT[4] = "0 S     ";
      TA1REC.TA1DBASE = "DORDER  ";
      TA1REC.TA1TBLVU = "VORHDR01";
      TA1REC.TA1TBLKE = PK4REC.PK4KEY;

      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};

      COMMAREA.CAUSERA = " ";

      XSPF4();
      exit program;
    end
  end

end // end PK0TS-GET-VORHDR01

// validate the date
Function PK0TS-VALID-DATE()
   /* ------------------------------------------------------------*/
   /* validate DNSB date "to"*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* gregorian date*/
  TA2REC.TA2GRTYP = "G"; /* type*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD < 888)         /* subroutine completed*/


  else

    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "DNSB TO DATE";

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    TA1REC.TA1PGMNO = "S01"; /* Module identification*/
    converseLib.validationFailed(29); /* System error occurred*/

    exit stack; /* exit to display map*/

  end


end // end PK0TS-VALID-DATE

// Get OP1REC VIA IO For VORHDR01
Function PK0TS-VALID-DNSB()

  if (PK0TM001.PK0TMTMM != 0
   && PK0TM001.PK0TMTDD != 0
   && PK0TM001.PK0TMTYY >= 0) /* CHANGED FROM NE - SRADH1*/
    PK0TW01.PK0TMTMM = PK0TM001.PK0TMTMM; /* move to compare field*/
    PK0TW01.PK0TMTDD = PK0TM001.PK0TMTDD;
    PK0TW01.PK0TMTYY = PK0TM001.PK0TMTYY;

    if (PK0TW01.PK0TMTYY > 50
     && PK0TW01.PK0TMTYY <= 99)

      PK0TW01.PK0TMTCC = 19;
    else
      PK0TW01.PK0TMTCC = 20;
    end

    set TA2REC empty;
    TA2REC.TA2GRGGN = PK0TW01.PK0TMTDT;
    PK0TS-VALID-DATE(); /* Validate the date*/

    if (TA2REC.TA2RTNCD != 0)
      TA1REC.TA1LOC = "510";
      PK0TW01.PK0TWERSW = "Y"; /* set error sw*/
      converseLib.validationFailed(158);
      PK0TW03.PK0TMACT[PK0TWSB4] = " ";
      /* SET pk0tW03.XPPCD(pk0tWSB4)    ;*/
      /* SET pk0tW03.PK1CUOID(pk0tWSB4) ;*/
      /* SET pk0tW03.PK1NORID(pk0tWSB4) ;*/
      set PK0TM001.PK0TMTMM cursor, bold;
      set PK0TM001.PK0TMTDD bold;
      set PK0TM001.PK0TMTYY bold;
      exit stack;
    end

  end

  if (PK0TW01.PK0TMTDT != 0
   && OP1REC.OP1DSBDT != 0)
    if (OP1REC.OP1DSBDT > PK0TW01.PK0TMTDT)
      PK0TW03.PK0TMACT[PK0TWSB4] = " ";
      /* SET pk0tW03.XPPCD(pk0tWSB4)    ;*/
      /* SET pk0tW03.PK1CUOID(pk0tWSB4) ;*/
      /* SET pk0tW03.PK1NORID(pk0tWSB4) ;*/
      set PK0TM001.PK0TMACT[PK0TWSB4] cursor, bold;
      set PK0TM001.PK1CUOID[PK0TWSB4] bold;
      set PK0TM001.PK1NORID[PK0TWSB4] bold;
      converseLib.validationFailed(519);
      PK0TW01.PK0TWERSW = "Y"; /* set error sw*/
      exit stack;
    end
  end

end // end PK0TS-VALID-DNSB

// check deletes
Function PK0TS65()
   /* ---------------------------------------------------------*/
   /* check for deletes only.*/
   /* ---------------------------------------------------------*/

  if ("D" in PK0TM001.PK0TMACT)
    if ("A" in PK0TM001.PK0TMACT
     || "C" in PK0TM001.PK0TMACT)

      return;

    else

      PK0TW01.PK0TWARN = "Y";

    end
  end


end // end PK0TS65

// set warning flag
Function PK0TS66()
   /* ---------------------------------------------------------*/
   /* check if fields changed before setting warning flag*/
   /* ---------------------------------------------------------*/

  if (PK0TM001.PK0TMACT[PK0TWSB4] == "A" /* add*/
   || PK0TM001.PK0TMACT[PK0TWSB4] == "C") /* or change*/

    if (PK0TM001.PK0TMACT[PK0TWSB4] == PK0TW03.PK0TMACT[PK0TWSB4]
     && PK0TM001.PK1CUOID[PK0TWSB4] == PK0TW03.PK1CUOID[PK0TWSB4]
     && PK0TM001.PK1NORID[PK0TWSB4] == PK0TW03.PK1NORID[PK0TWSB4])

      PK0TW01.PK0TWARN = "Y"; /* warnings displayed flag*/

    else

      PK0TW03.PK0TMACT[PK0TWSB4] = PK0TM001.PK0TMACT[PK0TWSB4];
      PK0TW03.PK1CUOID[PK0TWSB4] = PK0TM001.PK1CUOID[PK0TWSB4];
      PK0TW03.PK1NORID[PK0TWSB4] = PK0TM001.PK1NORID[PK0TWSB4];

      PK0TW01.PK0TWARN = "N"; /* warnings displayed flag*/

    end
  end


end // end PK0TS66

// check pf keys
Function PK0TSA0()



   /* stop indiscriminate button pressing......*/




  if (converseVar.eventKey is pf3  /* send to pk0s menu*/
   || converseVar.eventKey is pf4  /* send to mn0m menu*/
   || converseVar.eventKey is pf14 /* pk0v 'ot sel' transfer*/
   || converseVar.eventKey is pf15 /* pk0u 'cust sel' transfer*/
   || converseVar.eventKey is pf16 /* pk04 'p&h sel' transfer*/
   || converseVar.eventKey is pf18 /* pk09 'hold' transfer*/
   || converseVar.eventKey is pf19 /* pk07 'select' transfer*/
   || converseVar.eventKey is pf20) /* pk0a 'pick' transfer*/

    PK0TST0(); /* Transfer to another application*/

  else

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      XSPF1(); /* Exit to the HELP facility*/

      PK0TM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
      converseLib.validationFailed(); /* Force error*/
    else
      if (converseVar.eventKey is pa2) /* PA2 was pressed*/
        PKWREC.XWHCD = PK0TM001.XWHCD;
        COMMAREA.XWHCD = PK0TM001.XWHCD;
        COMMAREA.CACURRAP = " ";
        COMMAREA.CATOAP = "PK0T";
        if (PK0TM001.XWHCD == "51")
          COMMAREA.CACURRAP = "PW0W";
        else
          COMMAREA.CAFRMSYS = "PK";
        end
        COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
        XSEXIT();
        PK0TM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        COMMAREA.CATOAP = " ";
      else
        if (converseVar.eventKey is pf7  /* scroll backwards*/
         || converseVar.eventKey is pf8  /* scroll forward*/
         || converseVar.eventKey is pf12 /* test the water for errors*/
         || converseVar.eventKey is enter) /* enter..*/
           /* their choice of buttons was valid*/
          PK0TSI0(); /* edit screen and check pfkeys*/
        else
          converseLib.validationFailed(12);
           /* invalid pfkey*/
        end
      end
    end
  end



end // end PK0TSA0

// edit screen
Function PK0TSE0()

         /* edit screen*/

  PK0TSE8();

  if (converseVar.validationMsgNum == 171) /* s(selection) action cannot be mixed*/
      /* next sentence                 with udpate functions*/
  else
    PK0TW01.PK0TWSB2 = 24;
    PK0TW01.PK0TWSB3 = PK0TW01.PK0TWSB1 - 25;
    PK0TW01.PK0TWSB3 = PK0TW01.PK0TWSB3 + PK0TW01.PK0TWSB2;

    while (PK0TW01.PK0TWSB2 >= 1)

      if (PK0TM001.PK0TMACT[PK0TWSB2] == "S")
          /* next sentence*/
      else
        if (PK0TM001.PK0TMACT[PK0TWSB2] > " "
         || PK0TM001.PK1CUOID[PK0TWSB2] != PK0TW02.PK1CUOID[PK0TWSB3]
         || PK0TM001.PK1NORID[PK0TWSB2] != PK0TW02.PK1NORID[PK0TWSB3])

          PK0TS-CHK-ORD-STAT(); /* check if order is already sched'd*/

          if (PK0TM001.PK0TMACT[PK0TWSB2] == "D")
               /* next sentence*/
          else
            PK0TSE2(); /* order number required*/
            PK0TSE3(); /* check if order is on hold*/
          end
          PK0TSE6(); /* check ord num if change or delete*/
          if (PK0TM001.PK0TMACT[PK0TWSB2] == "D")
               /* next sentence*/
          else
            PK0TSE7(); /* edit activity column*/
          end
        end
      end

      PK0TW01.PK0TWSB2 = PK0TW01.PK0TWSB2 - 1;
      PK0TW01.PK0TWSB3 = PK0TW01.PK0TWSB3 - 1;

    end

  end



end // end PK0TSE0

// same day pick pool edit
Function PK0TSE2()


         /* order number required*/



  if (PK0TM001.PK1CUOID[PK0TWSB2] == 0)
    set PK0TM001.PK1CUOID[PK0TWSB2] cursor, bold;
    converseLib.validationFailed(194);
       /* order number not on pick pool*/
  end
      /* below is pick pool edit*/
   /* iF PK0KM001.XPPCD(PK0KWSB2) EQ '10';*/
    /* SET PK4REC EMPTY;*/
   /* MOVE 'PK0KSU2' TO TA1REC.TA1LOCAT(2);*/
   /* MOVE PK0KM001.XWHCD TO PK4REC.XWHCD;*/
   /* MOVE PK0KM001.PK1CUOID(PK0KWSB2) TO PK4REC.PK1CUOID;*/
   /* MOVE PK0KM001.PK1NORID(PK0KWSB2) TO PK4REC.PK1NORID;*/
   /* ;*/
   /* XSPK4I0                  ;   find row on pool header file*/
   /* ;*/
   /* IF SQLCA.SQLCODE EQ 0;*/
   /* \ ; next sentence*/
   /* \ELSE ;*/
     /* IF SQLCA.SQLCODE = +100;*/
       /* SET PK0KM001.PK1CUOID(PK0KWSB2) CURSOR,BRIGHT;*/
       /* SET PK0KM001.PK1NORID(PK0KWSB2) BRIGHT;*/
       /* MOVE 168 TO EZEMNO;*/
       /* ;   order number not on pick pool*/
     /* ELSE ;*/
       /* IF SQLCA.SQLCODE = -911;*/
         /* MOVE 108 TO EZEMNO;*/
         /* ;   data base contention <try again>*/
       /* END ;*/
   /* ;  END ;*/
   /* END ;*/
   /* END ;*/


end // end PK0TSE2

// order on hold edit
Function PK0TSE3()


         /* order on hold edit*/



  if (PK0TM001.PK0TMACT[PK0TWSB2] == "A")
    set PKBREC empty;
    TA1REC.TA1LOCAT[2] = "PK0TSE3";
    PKBREC.XWHCD = PK0TM001.XWHCD;
    PKBREC.PK1CUOID = PK0TM001.PK1CUOID[PK0TWSB2];
    PKBREC.PK1NORID = PK0TM001.PK1NORID[PK0TWSB2];
    PKBREC.XHRCD = "*";

    PK0TSU1(); /* get current date*/


    XSPKBS1(); /* select set and select next pkbrec*/

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(028); /* data base in use*/
      /* data base contention <try again>*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        XSPKBC1(); /* close set*/
      else
        PK0TSE4(); /* check release date on records*/
        XSPKBC1(); /* close set*/
      end
    end

  end



end // end PK0TSE3

// check release hold date
Function PK0TSE4()


         /* check order hold release date*/



  TA1REC.TA1LOCAT[2] = "PK0TSE4";

  while (SQLCA.VAGen_SQLCODE == 0)

    if (PKBREC.PKBPLRDT > TA2REC.TA2GRGGN)
      set PK0TM001.PK1CUOID[PK0TWSB2] cursor, bold;
      set PK0TM001.PK1NORID[PK0TWSB2] bold;
      converseLib.validationFailed(169);
          /* order number is on hold*/
    end

    XSPKBF1(); /* xelect next tf1rec record*/

  end



end // end PK0TSE4

// check if order number changed
Function PK0TSE6()



    /* check if order number has been changed on a delete or add*/



  if (PK0TM001.PK0TMACT[PK0TWSB2] == "C"
   || PK0TM001.PK0TMACT[PK0TWSB2] == "D")
    if (PK0TM001.PK1CUOID[PK0TWSB2] == PK0TW02.PK1CUOID[PK0TWSB3]
     && PK0TM001.PK1NORID[PK0TWSB2] == PK0TW02.PK1NORID[PK0TWSB3])
        /* next sentence*/
    else
      if (PK0TW02.PK1CUOID[PK0TWSB3] == 0)
          /* next sentence*/
      else
        set PK0TM001.PK1CUOID[PK0TWSB2] cursor, bold;
        set PK0TM001.PK1NORID[PK0TWSB2] bold;
        PK0TM001.PK1CUOID[PK0TWSB2] = PK0TW02.PK1CUOID[PK0TWSB3];
        PK0TM001.PK1NORID[PK0TWSB2] = PK0TW02.PK1NORID[PK0TWSB3];
        converseLib.validationFailed(170);
          /* on a c(change) or d(delete) order number cannot be changed*/
      end
    end
  end



end // end PK0TSE6

// edit activity column
Function PK0TSE7()


         /* edit activity column*/


  if (PK0TM001.PK0TMACT[PK0TWSB2] == "A"
   || PK0TM001.PK0TMACT[PK0TWSB2] == "C"
   || PK0TM001.PK0TMACT[PK0TWSB2] == "D"
   || PK0TM001.PK0TMACT[PK0TWSB2] == "S"
   || PK0TM001.PK0TMACT[PK0TWSB2] == "V")
    if (PK0TM001.PK0TMACT[PK0TWSB2] != "A"
     && PK0TW02.PK1CUOID[PK0TWSB3] == 0
     && PK0TW02.PK1NORID[PK0TWSB3] == 0)
      converseLib.validationFailed(191);
        /* a(add) only allowed on this line*/
      set PK0TM001.PK0TMACT[PK0TWSB2] cursor, bold;
    end
      /* next sentence*/
  else
    converseLib.validationFailed(35);
    /* invalid action code*/
    set PK0TM001.PK0TMACT[PK0TWSB2] cursor, bold;
  end



end // end PK0TSE7

// selection update function edit
Function PK0TSE8()


         /* selection and update functions cannot be mixed*/


  PK0TW01.PK0TMACT = "S";

  if (PK0TW01.PK0TMACT in PK0TM001.PK0TMACT)
    PK0TW01.PK0TWSB4 = 24;

    while (PK0TW01.PK0TWSB4 >= 1)

      if (PK0TM001.PK0TMACT[PK0TWSB4] == "S"
       || PK0TM001.PK0TMACT[PK0TWSB4] == "V"
       || PK0TM001.PK0TMACT[PK0TWSB4] == " ")
          /* next sentence*/
      else
        converseLib.validationFailed(171);
         /* selection and update actions cannot be requested at the*/
         /* same time*/
        set PK0TM001.PK0TMACT[PK0TWSB4] cursor, bold;
      end

      PK0TW01.PK0TWSB4 = PK0TW01.PK0TWSB4 - 1;

    end
  end



end // end PK0TSE8

// pf7, pf8 ,pf12 and enter
Function PK0TSI0()

         /* pf7, pf8, pf12 and enter*/


  PK0TSI1(); /* set fields to normal*/

  if (PK0TM001.XWHCD != PK0TW01.XWHCD)
    PK0TSO1();
  else
    if (PK0TM001.PK0TMCON != PK0TW01.PK0TMCON
     || PK0TM001.PK0TMNON != PK0TW01.PK0TMNON)
      PK0TSS1(); /* find order number scroll*/
      if (converseVar.validationMsgNum != 164)
        PK0TSO4(); /* scroll forward*/
      end
    else
      set PK0TM001.PK0TMCON normal;
      set PK0TM001.PK0TMNON normal;
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf8)
        PK0TSS0(); /* process pf7 and pf8 keys*/
        PK0TSO4(); /* scroll forward or backward*/
      else
        PK0TSE0(); /* edit screen*/
        if (converseVar.validationMsgNum > 0)
             /* next sentence*/
        else
          if (converseVar.eventKey is pf12)
            converseLib.validationFailed(106);
               /* all edits passed - press <enter> to process data*/
          else

            PK0TSU6(); /* display warning messages if any*/
            PK0TSO9();

            if (PK0TW01.PK0TWARN == "Y") /* warnings given*/

              PK0TSU0(); /* update the database*/
              PK0TW01.PK0TWARN = "N";
              PK0TW01.PK1CUOID = PK0TM001.PK1CUOID[1];
              PK0TW01.PK1NORID = PK0TM001.PK1NORID[1];
              PK0TSO2(); /* rebuild scrolling table*/
              PK0TSO5(); /* find proper spot in table*/
              PK0TSO4(); /* rebuild online screen*/
              PK0TW01.PK0TWSB1 = PK0TW01.PK0TWSB1 - 24;
              PK0TSO4(); /* rebuild online screen*/

            end
          end
        end
      end
    end
  end



end // end PK0TSI0

// set fields to normal
Function PK0TSI1()

         /* set fields to normal*/


  PK0TW01.PK0TWSB2 = 1;
  set PK0TM001.PK0TMCON cursor;
  set PK0TM001.XWHCD normal;

  if (PK0TM001.XWHCD == "02"
   || PK0TM001.XWHCD == "04"
   || PK0TM001.XWHCD == "07"
   || PK0TM001.XWHCD == "42"
   || PK0TM001.XWHCD == "51")
    set PK0TM001.PK0TMTMM normal;
    set PK0TM001.PK0TMTDD normal;
    set PK0TM001.PK0TMTYY normal;
  else
    set PK0TM001.PK0TMDNSB-LIT invisible, skip;
    set PK0TM001.PK0TMTMM noHighLight, skip;
    set PK0TM001.PK0TMTDD noHighLight, skip;
    set PK0TM001.PK0TMTYY noHighLight, skip;
  end

  while (PK0TW01.PK0TWSB2 <= 24)

    set PK0TM001.PK0TMACT[PK0TWSB2] normal;
    set PK0TM001.PK1CUOID[PK0TWSB2] normal;
    set PK0TM001.PK1NORID[PK0TWSB2] normal;

    PK0TW01.PK0TWSB2 = PK0TW01.PK0TWSB2 + 1;

  end



end // end PK0TSI1

// get warehouse code & validate
Function PK0TSO1()


         /* get warehouse code and validate*/



  set PK0TM001.XWHCD normal;
  PK0TM001.XXXCURDT = VGVar.currentShortGregorianDate;

  if (PK0TM001.XWHCD <= " "
   || PK0TM001.XWHCD == "99")
    converseLib.validationFailed(02);
      /* invalid warehouse code entered <please re-enter>*/
    PK0TM001.XWHABRV = " ";
    PK0TW01.XWHCD = " ";
    set PK0TM001.XWHCD cursor, bold;
  else
    if (PK0TM001.XWHCD in XWHTBL.XWHCD)
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        converseLib.validationFailed(03);
          /* invalid warehouse code entered <please re-enter>*/
        PK0TM001.XWHABRV = " ";
        PK0TW01.XWHCD = " ";
        set PK0TM001.XWHCD cursor, bold;
      else
        PK0TW01.XWHCD = PK0TM001.XWHCD;

        converseLib.clearScreen();
        set PK0TM001 initial;

        XXXCURDT = VGVar.currentShortGregorianDate;
        XXXRVNBR = "01";
        PK0TM001.PK0TMCON = PK0TW01.PK0TMCON;
        PK0TM001.XWHCD = PK0TW01.XWHCD;
        PKWREC.XWHCD = PK0TW01.XWHCD;

        PK0TM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];

        PK0TSO2(); /* set up scrolling table ;*/

        if (PKYREC.PK1CUOID[1] > 0)
          PK0TW01.PK1CUOID = PKYREC.PK1CUOID[1];
          PK0TW01.PK1NORID = PKYREC.PK1NORID[1];
          PK0TSO5(); /* scroll to proper spot in table*/
        else
          PK0TW01.PK0TWSB1 = 1; /* initialize scrolling index*/
        end

        PK0TSO4(); /* set up screen*/
        if (PKYREC.PK1CUOID[1] > 0)
          PK0TSO6(); /* show viewed and selected records*/
          set PKYREC empty;
        end
      end
    else
      converseLib.validationFailed(02);
        /* invalid warehouse code entered <please re-enter>*/
      PK0TM001.XWHABRV = " ";
      PK0TW01.XWHCD = " ";
      set PK0TM001.XWHCD cursor, bold;
    end
  end

  COMMAREA.XWHCD = PK0TM001.XWHCD;

  if (PK0TM001.XWHCD == "02"
   || PK0TM001.XWHCD == "04"
   || PK0TM001.XWHCD == "07"
   || PK0TM001.XWHCD == "42"
   || PK0TM001.XWHCD == "51")
    set PK0TM001.PK0TMTMM normal;
    set PK0TM001.PK0TMTDD normal;
    set PK0TM001.PK0TMTYY normal;
  else
    set PK0TM001.PK0TMDNSB-LIT invisible, skip;
    set PK0TM001.PK0TMTMM noHighLight, skip;
    set PK0TM001.PK0TMTDD noHighLight, skip;
    set PK0TM001.PK0TMTYY noHighLight, skip;
  end

end // end PK0TSO1

// set up internal scroll tbl
Function PK0TSO2()


         /* set up internal program scrolling table*/



  set PK0TW02 empty;
  TA1REC.TA1LOCAT[2] = "PK0TSA2";
  PKHREC.XWHCD = PK0TM001.XWHCD;
  PKHREC.PKURUNMD = "P";

  XSPKHS1(); /* select set and select next pkhrec*/

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(028); /* data base in use*/
    /* data base contention <try again>*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      PK0TM001.PK0TMCON = " ";
      XSPKHC1(); /* close set*/
      if (PK0TW01.PK0TWUPD == "Y"
       && converseVar.validationMsgNum == 0)
        converseLib.validationFailed(32); /* table updated sucessfully*/
      end
    else
      PK0TSO3(); /* set up scrolling table*/
      XSPKHC1(); /* close set*/
      if (PK0TW01.PK0TWUPD == "Y"
       && converseVar.validationMsgNum == 0)
        converseLib.validationFailed(32); /* table updated sucessfully*/
      end
    end
  end



  PK0TW01.PK0TWUPD = " ";


end // end PK0TSO2

// build scrolling table
Function PK0TSO3()
   /* --------------------------------------------------------*/
   /* build scrolling table*/
   /* --------------------------------------------------------*/

  TA1REC.TA1LOCAT[2] = "PK0TS03";
  PK0TW01.PK0TWSB1 = 1;

  while (PK0TW01.PK0TWSB1 <= 1000)

    if (SQLCA.VAGen_SQLCODE == 100)
      PK0TW01.PK0TWSB1 = 1001;
    else
      PK0TW02.XWHCD[PK0TWSB1] = PKHREC.XWHCD;
      PK0TW02.XDVCD[PK0TWSB1] = PKHREC.XDVCD;
      PK0TW02.XBCCD[PK0TWSB1] = PKHREC.XBCCD;
      PK0TW02.PK1PRTN[PK0TWSB1] = PKHREC.PK1PRTN;
      PK0TW02.PK1CUOID[PK0TWSB1] = PKHREC.PK1CUOID;
      PK0TW02.PK1NORID[PK0TWSB1] = PKHREC.PK1NORID;
      PK0TW02.ZZZCHGCT[PK0TWSB1] = PKHREC.ZZZCHGCT;

      /* ----- SPECIAL HANDLING ------------*/
      if (PKHREC.PK-SEL-TYP-CD == " 5"
       || PKHREC.PK-SEL-TYP-CD == "10"
       || PKHREC.PK-SEL-TYP-CD == "12"
       || PKHREC.PK-SEL-TYP-CD == "14")

        PK0TW02.OP1SPHDF[PK0TWSB1] = "Y";

      else
        /* ----- NON-SPECIAL HANDLING -------*/
        if (PKHREC.PK-SEL-TYP-CD == " 6"
         || PKHREC.PK-SEL-TYP-CD == "11"
         || PKHREC.PK-SEL-TYP-CD == "13"
         || PKHREC.PK-SEL-TYP-CD == "15")

          PK0TW02.OP1SPHDF[PK0TWSB1] = "N";

        end
      end

      PK0TW01.PK0TWSB1 = PK0TW01.PK0TWSB1 + 1;
    end

    XSPKHF1(); /* select next pkhrec record*/

  end



end // end PK0TSO3

// set up online screen
Function PK0TSO4()
   /* ----------------------------------------------------------*/
   /* set up online screen*/
   /* ----------------------------------------------------------*/

  PK0TW01.PK0TWSB2 = 1;
  PK0TW01.PK0TW-SCRN-FULL = "N";
  PK0TW01.PK0TWORD = PK0TW01.PK0TWORH[PK0TWSB2];

  while (PK0TW01.PK0TWSB2 <= 24)

    if (PK0TW01.PK0TWSB1 <= 1000)
      PK0TM001.PK1CUOID[PK0TWSB2] = PK0TW02.PK1CUOID[PK0TWSB1];
      PK0TM001.PK1NORID[PK0TWSB2] = PK0TW02.PK1NORID[PK0TWSB1];
      PK0TM001.OP1SPHDF[PK0TWSB2] = PK0TW02.OP1SPHDF[PK0TWSB1];
      PK0TM001.PK0TMACT[PK0TWSB2] = " ";

      if (PK0TW01.PK1CUOID == 0
       && PK0TW01.PK1CUOID == 0)
            /* next sentence*/
      else
        if (PK0TM001.PK1CUOID[PK0TWSB2] == PK0TW01.PK1CUOID
         && PK0TM001.PK1NORID[PK0TWSB2] == PK0TW01.PK1NORID)
          set PK0TM001.PK1CUOID[PK0TWSB2] bold;
          set PK0TM001.PK1NORID[PK0TWSB2] bold;
        end
      end

      PK0TW01.PK0TWSB1 = PK0TW01.PK0TWSB1 + 1;
    else
      if (PK0TW01.PK0TW-SCRN-FULL == "Y")
          /* next sentence;*/
      else
        PK0TW01.PK0TW-SCRN-FULL = "Y";
        PK0TW01.PK0TW-HLD-DTL = PK0TW01.PK0TWSB2 - 1;
      end

      PK0TM001.PK1CUOID[PK0TWSB2] = 0;
      PK0TM001.PK1NORID[PK0TWSB2] = 0;
      PK0TM001.OP1SPHDF[PK0TWSB2] = " ";
      PK0TM001.PK0TMACT[PK0TWSB2] = " ";
    end

    PK0TW01.PK0TWSB2 = PK0TW01.PK0TWSB2 + 1;

  end

  PK0TSO9(); /* display warning messages if any*/


end // end PK0TSO4

// find proper place in table
Function PK0TSO5()
   /* -------------------------------------------------------*/
   /* find proper place table*/
   /* -------------------------------------------------------*/

  if (PK0TW01.PK0TWORD in PK0TW02.PK0TWORD)
    PK0TW01.PK0TWSB1 = sysVar.arrayIndex;
  else

    PK0TW01.PK0TWSB1 = 1;
    PK0TW01.PK0TWSB3 = 1;

    while (PK0TW01.PK0TWSB3 <= 1000)

      if (PK0TW01.PK0TWORD >= PK0TW02.PK0TWORD[PK0TWSB3])
        PK0TW01.PK0TWSB1 = PK0TW01.PK0TWSB3;
        PK0TW01.PK0TWSB3 = 1001;
      end

      PK0TW01.PK0TWSB3 = PK0TW01.PK0TWSB3 + 1;

    end

  end

  if (PK0TW01.PK0TWSB1 <= 24
   && PK0TM001.PK0TMCON == 0
   && PK0TM001.PK0TMNON == 0
   && PK0TW02.PK1CUOID[25] == 0)
    PK0TW01.PK0TWSB1 = 1;
  end


end // end PK0TSO5

// transfer to requested appl
Function PK0TSO6()



   /* let user know which records have been viewed or selected*/



  PK0TW01.PK0TWSB4 = 1; /* position in pkyarry*/

  while (PK0TW01.PK0TWSB4 <= 25)

    PK0TW01.PK0TWSB3 = 1; /* position on map*/

    while (PK0TW01.PK0TWSB3 <= 24)

      if (PKYREC.PK1CUOID[PK0TWSB4] == PK0TM001.PK1CUOID[PK0TWSB3]
       && PKYREC.PK1NORID[PK0TWSB4] == PK0TM001.PK1NORID[PK0TWSB3])
                                   /* st.*/
        PK0TM001.PK0TMACT[PK0TWSB3] = PKYREC.PKYORACT[PK0TWSB4];
        PK0TW01.PK0TWSB3 = 99;

      end

      PK0TW01.PK0TWSB3 = PK0TW01.PK0TWSB3 + 1; /* Increment map index*/

    end

    PK0TW01.PK0TWSB4 = PK0TW01.PK0TWSB4 + 1; /* Increment pkyarry*/

  end



end // end PK0TSO6

// highlight warning messages
Function PK0TSO9()



   /* highlight screen with warning messages*/



  PK0TW01.PK0TWSB4 = 1; /* position in pkyarry*/

  while (PK0TW01.PK0TWSB4 <= 24)

    PK0TW01.PK0TWSB3 = 1; /* position on map*/

    PK0TW01.PK0TWORD = PK0TW01.PK0TWORH[PK0TWSB4];

    if (PK0TW01.PK1CUOID == 0
     && PK0TW01.PK1NORID == 0)
      PK0TW01.PK0TWSB4 = 99;
    else
      while (PK0TW01.PK0TWSB3 <= 24)

        if (PK0TM001.PK1CUOID[PK0TWSB3] == PK0TW01.PK1CUOID
         && PK0TM001.PK1NORID[PK0TWSB3] == PK0TW01.PK1NORID)
          set PK0TM001.PK1CUOID[PK0TWSB3] bold;
          set PK0TM001.PK1NORID[PK0TWSB3] bold;
          PK0TW01.PK0TWSB3 = 99;

        end

        PK0TW01.PK0TWSB3 = PK0TW01.PK0TWSB3 + 1; /* Increment map index*/

      end
      PK0TW01.PK1CUOID = 0;
      PK0TW01.PK1NORID = 0;
      PK0TW01.PK0TWORH[PK0TWSB4] = PK0TW01.PK0TWORD;

    end

    PK0TW01.PK0TWSB4 = PK0TW01.PK0TWSB4 + 1; /* Increment pkyarry*/

  end



end // end PK0TSO9

// accum full case & repack qty's
Function PK0TSQ0()
   /* ------------------------------------------------------------*/
   /* Accumulate full case and repack quantities.*/
   /* ------------------------------------------------------------*/

  PK0TSQ1(); /* open cursor in DPICK.VPOOLI01*/

  PK0TW01.PK0TWFCT = 0; /* Full case qty tot*/
  PK0TW01.PK0TWRPT = 0; /* Repack qty tot*/
  PK0TW01.PK0TWCS1 = "N"; /* end of cursor switch*/

  while (PK0TW01.PK0TWCS1 == "N") /* until end of cursor*/

    PK0TSQ2(); /* fetch row in DPICK.VPOOLI01*/

    if (PK0TW01.PK0TWCS1 == "N") /* if not end*/

      PK0TW01.PK0TWRPT = PK0TW01.PK0TWRPT + PK5REC.PK5ITMRP;
      PK0TW01.PK0TWFCT = PK0TW01.PK0TWFCT + PK5REC.PK5ITMFC;

    end
  end

  PK0TSQ4(); /* close cursor in DPICK.VPOOLI01*/


end // end PK0TSQ0

// open cursor in DPICK.VPOOLI01
Function PK0TSQ1()
   /* ------------------------------------------------------------*/
   /* Open cursor in DPICK.VPOOLI01.*/
   /* ------------------------------------------------------------*/

  set PK5REC empty; /* Clear row storage area*/

  PK5REC.XWHCD = PK0TM001.XWHCD; /* Warehouse code*/
  PK5REC.PK1CUOID = PK0TM001.PK1CUOID[PK0TWSB2];
  PK5REC.PK1NORID = PK0TM001.PK1NORID[PK0TWSB2];

  try
    call "IO1990" ("S1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "SQ1"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK5REC.PK5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PK0TSQ1

// fetch row in DPICK.VPOOLI01
Function PK0TSQ2()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from DPICK.VPOOLI01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1990" ("N1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PK0TW01.PK0TWCS1 = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "SQ2"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK5REC.PK5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PK0TSQ2

// close cursor in DPICK.VPOOLI01
Function PK0TSQ4()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1990" ("C1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "SQ4"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PK0TSQ4

// do paging of screen data
Function PK0TSS0()
   /* ---------------------------------------------------------*/
   /* do paging of screen data*/
   /* ---------------------------------------------------------*/

   /* MOVE PK0TWSB1 TO PK0TWSB1;*/

  if (converseVar.eventKey is pf7)
    if (PK0TW01.PK0TWSB1 > 1000)
      PK0TW01.PK0TWSB1 = PK0TW01.PK0TWSB1 - PK0TW01.PK0TW-HLD-DTL;
      PK0TW01.PK0TWSB1 = PK0TW01.PK0TWSB1 - 24;
    else
      PK0TW01.PK0TWSB1 = PK0TW01.PK0TWSB1 - 48;
      if (PK0TW01.PK0TWSB1 <= 0)
        PK0TW01.PK0TWSB1 = 1;
         /* no more scrolling backward possible*/
        converseLib.validationFailed(37);
      end
    end
  else
    if (PK0TW01.PK0TWSB1 > 1000)
      PK0TW01.PK0TWSB1 = PK0TW01.PK0TWSB1 - PK0TW01.PK0TW-HLD-DTL;
       /* no more scrolling forward possible*/
      converseLib.validationFailed(38);
    else
      if (PK0TW02.XWHCD[PK0TWSB1] <= " ")
        PK0TW01.PK0TWSB1 = PK0TW01.PK0TWSB1 - 24;
         /* no more scrolling forward possible*/
        converseLib.validationFailed(38);
      end
    end
  end

  set PK0TW03 empty; /* clear hold record if paging*/


end // end PK0TSS0

// scroll to proper place in tabl
Function PK0TSS1()
   /* ---------------------------------------------------------*/
   /* scroll to proper spot in table*/
   /* ---------------------------------------------------------*/

  PK0TW01.PK0TWSB3 = 1;
  PK0TW01.PK0TWFL2 = "NOT FOUND";

  while (PK0TW01.PK0TWSB3 <= 1000)

    if (PK0TM001.PK0TMCON == PK0TW02.PK1CUOID[PK0TWSB3]
     && PK0TM001.PK0TMNON == PK0TW02.PK1NORID[PK0TWSB3])
      PK0TW01.PK0TWFL2 = "ORDER NUMBER FOUND";
      PK0TW01.PK0TWSB1 = PK0TW01.PK0TWSB3;
      PK0TW01.PK0TWSB3 = 1001;
    end
    PK0TW01.PK0TWSB3 = PK0TW01.PK0TWSB3 + 1;

  end

  if (PK0TW01.PK0TWFL2 == "ORDER NUMBER FOUND")
    PK0TM001.PK0TMCON = 0;
    PK0TM001.PK0TMNON = 0;
    set PK0TM001.PK0TMCON normal;
    set PK0TM001.PK0TMNON normal;
  else
    set PK0TM001.PK0TMCON cursor, bold;
    set PK0TM001.PK0TMNON bold;
    converseLib.validationFailed(164);
    PK0TW01.PK0TWSB3 = 1;
      /* order number not found*/
  end


end // end PK0TSS1

// transfer to requested appl
Function PK0TST0()


   /* Set the "TO" application according to the PF key pressed.*/


  PKWREC.XWHCD = PK0TM001.XWHCD;

  if (converseVar.eventKey is pf3) /* ; PF3 was pressed*/
    if (PK0TM001.XWHCD == "51" /* memphis apperal*/
     || PK0TM001.XWHCD == "04" /* memphis footwear*/
     || PK0TM001.XWHCD == "07" /* wilsonville*/
     || PK0TM001.XWHCD == "02" /* greenland*/
     || PK0TM001.XWHCD == "42") /* canada*/
      COMMAREA.CATOAP = "PW0W";
      XSPKS01(); /* exit routine*/
    else
      COMMAREA.CATOAP = "PK0S"; /* Planning Menu*/
    end
  else
    if (converseVar.eventKey is pf4) /* ; PF4 was pressed*/
      XSPF4(); /* Main Menu*/
    else
      if (converseVar.eventKey is pf14) /* ; PF14 was pressed*/
        COMMAREA.CATOAP = "PK0V"; /* Select By Order Type*/
      else
        if (converseVar.eventKey is pf15) /* ; PF15 was pressed*/
          COMMAREA.CATOAP = "PK0U"; /* Select By Customer*/
        else
          if (converseVar.eventKey is pf16) /* ; PF16 was pressed*/
            COMMAREA.CATOAP = "PK04"; /* Select Pack And Hold*/
          else
            if (converseVar.eventKey is pf18) /* ; PF18 was pressed*/
              COMMAREA.CATOAP = "PK09"; /* Hold/Release*/
            else
              if (converseVar.eventKey is pf19) /* ; PF19 was pressed*/
                COMMAREA.CATOAP = "PK07"; /* Selection Menu*/
              else
                if (converseVar.eventKey is pf20) /* ; PF20 was pressed*/
                  COMMAREA.CATOAP = "PK0A"; /* Master Menu*/
                end
              end
            end
          end
        end
      end
    end
  end

  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* COMMAREA user area*/
  COMMAREA.XWHCD = PK0TM001.XWHCD;

  XSEXIT(); /* Invoke selected application*/

  PK0TM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/




end // end PK0TST0

// transfer to requested appl
Function PK0TST1()




   /* Clear the common array and move the selected order*/
   /* numbers into it.*/
   /* Transfer control to the order inquiry application.*/


  set PKYREC empty; /* Clear order array*/


  PK0TST2(); /* Move selected orders*/

  PKYREC.XWHCD = PK0TM001.XWHCD; /* move warehouse code back*/
  PKYREC.XWHABRV = PK0TM001.XWHABRV; /* and warehouse abbreviation*/

  PKWREC.PKWARRAY[1] = PKYREC.PKWARRAY; /* Inquiry keys array*/

  PKWREC.PKWSLTYP[1] = "O"; /* Inquiry selection type*/
  PKWREC.PKWINDEX = 1;
  PKWREC.PKWFRMAP[1] = "PK0T"; /* Previous application*/

  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* COMMAREA user area*/

  COMMAREA.CATOAP = "PK0B"; /* PICKING order inquiry*/

  XSEXIT(); /* Transfer to cust. Inquiry*/

       /* **************************************************/
       /* **********  if xsexit did not work:   ************/
       /* **************************************************/
  PK0TM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
  converseLib.validationFailed(); /* problem exists!!!!!*/
  PK0TW01.PK0TWSB2 = 0;



end // end PK0TST1

// move selected orders to array
Function PK0TST2()



   /* If the line was selected for inquiry, move the customer num*/
   /* to the common key array.*/



  PK0TW01.PK0TWSB3 = 1; /* position on map*/
  PK0TW01.PK0TWSB1 = 1; /* position in pass record*/

    /* **** move the first map line into array for returning *****/

  PKYREC.PKYORACT[PK0TWSB1] = PK0TM001.PK0TMACT[PK0TWSB3]; /* act.*/
  PKYREC.PK1CUOID[PK0TWSB1] = PK0TM001.PK1CUOID[PK0TWSB3];
                                   /* order id*/
  PKYREC.PK1NORID[PK0TWSB1] = PK0TM001.PK1NORID[PK0TWSB3];
                                   /* order id*/
  PK0TW01.PK0TWSB3 = 2; /* position on map*/
  PK0TW01.PK0TWSB1 = 2; /* position in pass record*/



  while (PK0TW01.PK0TWSB3 <= 24)

    if (PK0TM001.PK0TMACT[PK0TWSB3] == "S") /* Selected for inquiry*/

      PKYREC.PKYORACT[PK0TWSB1] = PK0TM001.PK0TMACT[PK0TWSB3];
                                   /* act.*/
      PKYREC.PK1CUOID[PK0TWSB1] = PK0TM001.PK1CUOID[PK0TWSB3]; /* cust.*/
      PKYREC.PK1NORID[PK0TWSB1] = PK0TM001.PK1NORID[PK0TWSB3]; /* st.*/

      PK0TW01.PK0TWSB1 = PK0TW01.PK0TWSB1 + 1; /* Increment array index*/

    end

    PK0TW01.PK0TWSB3 = PK0TW01.PK0TWSB3 + 1; /* Increment map index*/

  end



end // end PK0TST2

// update data base
Function PK0TSU0()


         /* update order selection data base for picking*/



  PK0TW01.PK0TWSB2 = 24;

  PK0TSU1(); /* get date and time stamp*/

  while (PK0TW01.PK0TWSB2 >= 1)

    if (PK0TM001.PK0TMACT[PK0TWSB2] == " "
     || PK0TM001.PK0TMACT[PK0TWSB2] == "V")
        /* next sentence*/
    else
      if (PK0TM001.PK0TMACT[PK0TWSB2] == "A")
        PK0TSU3(); /* data base add*/
      else
        if (PK0TM001.PK0TMACT[PK0TWSB2] == "C")
          PK0TSU2(); /* change to data base*/
        else
          if (PK0TM001.PK0TMACT[PK0TWSB2] == "D")
            PK0TSU4(); /* check delete for inactive delete or physical*/
          else
            if (PK0TM001.PK0TMACT[PK0TWSB2] == "S")
              PK0TST1(); /* if selection is s transfer to inquiry appl*/
            end
          end
        end
      end
    end

    if (PK0TM001.PK0TMACT[PK0TWSB2] == "A"
     || PK0TM001.PK0TMACT[PK0TWSB2] == "C"
     || PK0TM001.PK0TMACT[PK0TWSB2] == "D")
      if (converseVar.validationMsgNum == 105) /* data base updated by someone else*/
        PK0TW01.PK0TWSB2 = 0; /* get out of loop*/
      else
        converseLib.validationFailed(32);
          /* table update successful*/
      end
    end

    PK0TW01.PK0TWSB2 = PK0TW01.PK0TWSB2 - 1;

  end


  if (converseVar.validationMsgNum == 32) /* table upate successful*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();
  end



end // end PK0TSU0

// get time and date stamp
Function PK0TSU1()


      /* get time and date stamp*/


  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};



end // end PK0TSU1

// change to data base
Function PK0TSU2()
   /* -------------------------------------------------------------------*/
   /* Select row from pool header*/
   /* -------------------------------------------------------------------*/

  set PK4REC empty;
  PK4REC.XWHCD = PK0TM001.XWHCD;
  PK4REC.PK1CUOID = PK0TM001.PK1CUOID[PK0TWSB2];
  PK4REC.PK1NORID = PK0TM001.PK1NORID[PK0TWSB2];

  try
    call "IO1720" ("S ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
  /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2     ";
    TA1REC.TA1PGMNM = "RETN    ";
    TA1REC.TA1LOCAT[1] = "IO1720  ";
    TA1REC.TA1LOCAT[2] = "SELECT  ";
    TA1REC.TA1LOCAT[3] = "ROW     ";
    TA1REC.TA1DBASE = "DPICK   ";
    TA1REC.TA1TBLVU = "VPOOLH01";
    TA1REC.TA1TBLKE = PK4REC.PK4KEY;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

  PK0TSQ0(); /* accum full case and repack*/

         /* change pkhrec in data base*/

  set PKHREC empty;
  TA1REC.TA1LOCAT[2] = "PK0TSU2";
  PK0TW01.PK0TWSB3 = PK0TW01.PK0TWSB1 - 25;
  PK0TW01.PK0TWSB3 = PK0TW01.PK0TWSB3 + PK0TW01.PK0TWSB2;
  PKHREC.XWHCD = PK0TM001.XWHCD;
  PKHREC.XDVCD = PK4REC.XDVCD;
  PKHREC.PK1CUOID = PK0TM001.PK1CUOID[PK0TWSB2];
  PKHREC.PK1NORID = PK0TM001.PK1NORID[PK0TWSB2];
  PKHREC.ZZZCHGCT = PK0TW02.ZZZCHGCT[PK0TWSB3];
  PKHREC.PKURUNMD = "P";

  PK0TSU5(); /* move row on scren to record*/

  PKHREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PKHREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  XSPKHR0(); /* update row on data base*/

  if (SQLCA.VAGen_SQLCODE == 0)
    PK0TW01.PK0TWUPD = "Y";
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(226);
         /* order changed, but not in the pick pool*/
    else
      if (SQLCA.VAGen_SQLCODE == -803)
        converseLib.validationFailed(109);
         /* needs message*/
         /* duplicate record*/
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(108);
             /* data base contention <try again>*/
        else
        end
      end
    end
  end


end // end PK0TSU2

// add to data base
Function PK0TSU3()
   /* -------------------------------------------------------------------*/
   /* Select row from pool header*/
   /* -------------------------------------------------------------------*/

  set PK4REC empty;
  PK4REC.XWHCD = PK0TM001.XWHCD;
  PK4REC.PK1CUOID = PK0TM001.PK1CUOID[PK0TWSB2];
  PK4REC.PK1NORID = PK0TM001.PK1NORID[PK0TWSB2];

  try
    call "IO1720" ("S ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
  /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2     ";
    TA1REC.TA1PGMNM = "RETN    ";
    TA1REC.TA1LOCAT[1] = "IO1720  ";
    TA1REC.TA1LOCAT[2] = "SELECT  ";
    TA1REC.TA1LOCAT[3] = "ROW     ";
    TA1REC.TA1DBASE = "DPICK   ";
    TA1REC.TA1TBLVU = "VPOOLH01";
    TA1REC.TA1TBLKE = PK4REC.PK4KEY;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

  /* -------------------------------------------------------------------*/
   /* Set status in pool header*/
   /* -------------------------------------------------------------------*/

  PK4REC.PK4SLIND = "P"; /* set status for pick planning*/

  PK4REC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PK4REC.ZZZCHGTM = TA2REC.TA2TIMHM;

   /* -------------------------------------------------------------------*/
   /* Update the changed row in the table*/
   /* -------------------------------------------------------------------*/

  try
    call "IO1720" ("U ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* -------------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* -------------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PK0TW01.PK0TWUPD = "Y";
    else

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        converseLib.validationFailed(226);
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(108);
        end

        TA1REC.TA1TYPE = "DB2     ";
        TA1REC.TA1PGMNM = "RETN    ";
        TA1REC.TA1LOCAT[1] = "IO1720  ";
        TA1REC.TA1LOCAT[2] = "REPLACE ";
        TA1REC.TA1LOCAT[3] = "ROW     ";
        TA1REC.TA1DBASE = "DPICK   ";
        TA1REC.TA1TBLVU = "VPOOLH01";
        TA1REC.TA1TBLKE = PK4REC.PK4KEY;
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        move SQLCA to ERRSQLCA withV60Compat;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        XSPF4();
      end
    end
  end


   /* -------------------------------------------------------------------*/
   /* Add record to pkhrec planning record.*/
   /* -------------------------------------------------------------------*/

  PK0TSQ0(); /* accum full case and repack qtys*/

  set PKHREC empty;
  PK0TSU5(); /* move row on screen to record*/

  TA1REC.TA1LOCAT[2] = "PK0TSU3";
  PKHREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PKHREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  PKHREC.PKURUNMD = "P";

  XSPKHA0(); /* add row to data base*/

  if (SQLCA.VAGen_SQLCODE == 0)
    PK0TW01.PK0TWUPD = "Y";
    converseLib.validationFailed(32);
  else
    if (SQLCA.VAGen_SQLCODE == -803)
      converseLib.validationFailed(44);
       /* needs message*/
       /* duplicate record*/
      set PK0TM001.PK0TMACT[PK0TWSB2] cursor, bold;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(108); /* data base in use*/
          /* data base in use, try again*/
      end
    end
  end


end // end PK0TSU3

// physical delete from data base
Function PK0TSU4()
   /* ----------------------------------------------------------------*/
   /* Select row from pool header*/
   /* ----------------------------------------------------------------*/

  set PK4REC empty;
  PK4REC.XWHCD = PK0TM001.XWHCD;
  PK4REC.PK1CUOID = PK0TM001.PK1CUOID[PK0TWSB2];
  PK4REC.PK1NORID = PK0TM001.PK1NORID[PK0TWSB2];

  try
    call "IO1720" ("S ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
  /* next sentence*/
  else
    TA1REC.TA1PGMNM = "DB2     ";
    TA1REC.TA1PGMNM = "RETN    ";
    TA1REC.TA1LOCAT[1] = "IO1720  ";
    TA1REC.TA1LOCAT[2] = "SELECT  ";
    TA1REC.TA1LOCAT[3] = "ROW     ";
    TA1REC.TA1DBASE = "DPICK   ";
    TA1REC.TA1TBLVU = "VPOOLH01";
    TA1REC.TA1TBLKE = PK4REC.PK4KEY;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

   /* ----------------------------------------------------------------*/
   /* Set status in pool header for de-select*/
   /* ----------------------------------------------------------------*/

  PK4REC.PK4SLIND = " "; /* Clear status*/

  PK4REC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PK4REC.ZZZCHGTM = TA2REC.TA2TIMHM;

   /* ----------------------------------------------------------------*/
   /* Update the deleted row in the pool header table*/
   /* ----------------------------------------------------------------*/

  try
    call "IO1720" ("U ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ----------------------------------------------------------------*/
   /* If successful, return to the previous process*/
   /* ----------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PK0TW01.PK0TWUPD = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        converseLib.validationFailed(226);
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(108);
        end

        TA1REC.TA1TYPE = "DB2     ";
        TA1REC.TA1PGMNM = "RETN    ";
        TA1REC.TA1LOCAT[1] = "IO1720  ";
        TA1REC.TA1LOCAT[2] = "REPLACE ";
        TA1REC.TA1LOCAT[3] = "ROW     ";
        TA1REC.TA1DBASE = "DPICK   ";
        TA1REC.TA1TBLVU = "VPOOLH01";
        TA1REC.TA1TBLKE = PK4REC.PK4KEY;
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        move SQLCA to ERRSQLCA withV60Compat;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        XSPF4();
      end
    end
  end

   /* -------------------------------------------------------------*/
         /* physical delete from data base of pkhrec*/
   /* -------------------------------------------------------------*/

  set PKHREC empty;
  TA1REC.TA1LOCAT[2] = "PK0TSU7";
  PKHREC.XWHCD = PK0TM001.XWHCD;
  PKHREC.PK1CUOID = PK0TM001.PK1CUOID[PK0TWSB2];
  PKHREC.PK1NORID = PK0TM001.PK1NORID[PK0TWSB2];
  PKHREC.PKURUNMD = "P";


  XSPKHI0(); /* select row*/

  if (SQLCA.VAGen_SQLCODE == 0)

    XSPKHD0(); /* delete row on data base*/

    if (SQLCA.VAGen_SQLCODE == 0)
      PK0TW01.PK0TWUPD = "Y";
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(226);
         /* order changed, but not in the pick pool*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(108);
           /* data base contention <try again>*/
      end
    end
  end





end // end PK0TSU4

// move data from scrn to record
Function PK0TSU5()


         /* move data from screen to pkhrec record*/


  PKHREC.XWHCD = PK0TM001.XWHCD;
  PKHREC.XDVCD = PK4REC.XDVCD;
  PKHREC.XBCCD = PK4REC.XBCCD;

  PK0TW01.PK0TWNUM = PK0TM001.PK1CUOID[PK0TWSB2];
  PKHREC.PK1CUOID = PK0TM001.PK1CUOID[PK0TWSB2];
  PKHREC.PK1NORID = PK0TM001.PK1NORID[PK0TWSB2];
  PKHREC.PK1PRTN = PK0TW01.PK0TWPRT;

  PKHREC.OP1DSBDT = PK4REC.OP1DSBDT;
  PKHREC.TF1CARCD = PK0TW03.TF1CARCD[PK0TWSB2];
  PKHREC.XPPCD = "30";
  PKHREC.PKURUNMD = "P";
  PKHREC.PKHPVSFC = PK0TW01.PK0TWFCT;
  PKHREC.PKHPVSRP = PK0TW01.PK0TWRPT;
  PKHREC.PK-SEL-TYP-CD = PK0TW03.PK-SEL-TYP-CD[PK0TWSB2];


end // end PK0TSU5

// display warning messages
Function PK0TSU6()

         /* warning messages if any*/

  PK0TS65(); /* check deletes*/

  if (PK0TW01.PK0TWARN == "Y") /* deletes only*/
    return; /* return to caller*/
  end

  PK0TW01.PK0TWSB4 = 24;
  PK0TW01.PK0TWSB5 = 1;
  PK0TW01.PK1CUOID = 0;
  PK0TW01.PK1NORID = 0;
  PK0TW01.PK0TWEZE = 0;

  while (PK0TW01.PK0TWSB4 >= 1)

    if (PK0TM001.PK0TMACT[PK0TWSB4] == "A"
     || PK0TM001.PK0TMACT[PK0TWSB4] == "C")
      PK0TS66(); /* set warning flag*/
    end

    if (PK0TM001.PK0TMACT[PK0TWSB4] == " "
     || PK0TM001.PK0TMACT[PK0TWSB4] == "V"
     || PK0TM001.PK0TMACT[PK0TWSB4] == "D")
        /* next sentence*/
    else
      if (PK0TM001.PK0TMACT[PK0TWSB4] == "S")
        PK0TST1();
      end
      if (PK0TW01.PK0TWARN == "N")
        PK0TSU7(); /* pick pool warning*/
      end
    end

    PK0TW01.PK0TWSB4 = PK0TW01.PK0TWSB4 - 1;

  end

  PK0TW01.PK0TWSB4 = 24;
  if (PK0TW01.PK0TWEZE == 0)
    while (PK0TW01.PK0TWSB4 >= 1)
      if (PK0TM001.PK0TMACT[PK0TWSB4] == "A"
       || PK0TM001.PK0TMACT[PK0TWSB4] == "C")
        PK0TW01.PK0TWEZE = 160; /* passed edits hit enter to process*/
      end
      PK0TW01.PK0TWSB4 = PK0TW01.PK0TWSB4 - 1;
    end
  end

  if (PK0TW01.PK0TWEZE == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(PK0TW01.PK0TWEZE);
  end


end // end PK0TSU6

// normal, rush pick pool warning
Function PK0TSU7()


         /* normal or rush pick pool warning*/



  set PK4REC empty;
  TA1REC.TA1LOCAT[2] = "PK0TSU7";
  PK4REC.XWHCD = PK0TM001.XWHCD;
  PK4REC.PK1CUOID = PK0TM001.PK1CUOID[PK0TWSB4];
  PK4REC.PK1NORID = PK0TM001.PK1NORID[PK0TWSB4];

  set PWIREC empty;

  XSPK4I0(); /* find row on pool header file*/

  if (SQLCA.VAGen_SQLCODE == 0)
   /* ----------------------------------------------------------------*/
    /* Set the selection type code (pk-sel-typ-cd).*/

    /* It is possible for trhe order to be both b-grade and closeout.*/
    /* In this case, the selection type would be set ot closeout (the*/
    /* condition stmt for closeout is AFTER the b-grade condition for*/
    /* this reason).*/
   /* ----------------------------------------------------------------*/

    /* ---------------- spcl hndl --------------------------*/
    if (PK4REC.OP1SPHDF == "Y")
      PK0TW03.PK-SEL-TYP-CD[PK0TWSB4] = " 5";
    end

    /* ---------------- non-spcl hndl ----------------------*/
    if (PK4REC.OP1SPHDF == "N")
      PK0TW03.PK-SEL-TYP-CD[PK0TWSB4] = " 6";
    end

    /* --------- determine b-grade and closeouts -----------*/
    XPPK005();

    /* ------- b-grade spcl hndl --------------------------*/
    if (PKW-ORDER-TYP-IND == "B"
     && PK4REC.OP1SPHDF == "Y")

      PK0TW03.PK-SEL-TYP-CD[PK0TWSB4] = "10";
    end

    /* ------- b-grade spcl hndl --------------------------*/
    if (PKW-ORDER-TYP-IND == "B"
     && PK4REC.OP1SPHDF == "N")

      PK0TW03.PK-SEL-TYP-CD[PK0TWSB4] = "11";
    end

    /* ------- closeout spcl hndl -------------------------*/
    if (PKW-ORDER-TYP-IND == "C"
     && PK4REC.OP1SPHDF == "Y")

      PK0TW03.PK-SEL-TYP-CD[PK0TWSB4] = "12";
    end

    /* ------- closeout non-spcl hndl ---------------------*/
    if (PKW-ORDER-TYP-IND == "C"
     && PK4REC.OP1SPHDF == "N")

      PK0TW03.PK-SEL-TYP-CD[PK0TWSB4] = "13";
    end

    /* ----in-store promo - non-spcl hndl -----------*/
    if (PK4REC.XDVCD == "01"
     && PK4REC.XGPCD == "01"
     && PK4REC.OP1SPHDF == "Y")

      PK0TW03.PK-SEL-TYP-CD[PK0TWSB4] = "14";
    end

    /* ----in-store promo - non-spcl hndl -------*/
    if (PK4REC.XDVCD == "01"
     && PK4REC.XGPCD == "01"
     && PK4REC.OP1SPHDF == "N")

      PK0TW03.PK-SEL-TYP-CD[PK0TWSB4] = "15";
    end


    PK0TW03.TF1CARCD[PK0TWSB4] = PK4REC.TF1CARCD;
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    PK0TW01.PK0TWSB5 = 1;
    PK0TSU8(); /* customer on hold warning*/
    PK0TW01.PK0TWSB5 = 1;
    PK0TSU9(); /* order on hold warning*/
    PK0TW01.PK0TWSB5 = +1;
    if (PK0TM001.XWHCD == "02" || 
    PK0TM001.XWHCD == "04" || 
    PK0TM001.XWHCD == "07" || 
    PK0TM001.XWHCD == "42" || 
    PK0TM001.XWHCD == "51")
      OP1REC.OP1DSBDT = PK4REC.OP1DSBDT;
      PK0TS-VALID-DNSB(); /* validate dnsb*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      if (PK0TM001.PK0TMACT[PK0TWSB4] == "A")
        if (PK0TM001.XWHCD == "04" || 
        PK0TM001.XWHCD == "07" || 
        PK0TM001.XWHCD == "42" || 
        PK0TM001.XWHCD == "51")
          PK0TS-GET-VORHDR01();
          PK0TS-VALID-DNSB();
          if (converseVar.validationMsgNum != 519)
            converseLib.validationFailed(172);
          end
        else
          converseLib.validationFailed(172);
        end
        PK0TSV3(); /* hold all orders with same warning*/
                                   /* messages*/
      end
      if (PK0TM001.PK0TMACT[PK0TWSB4] == "C")
        if (PK0TM001.XWHCD == "04" || 
        PK0TM001.XWHCD == "07" || 
        PK0TM001.XWHCD == "42" || 
        PK0TM001.XWHCD == "51")
          PK0TS-GET-VORHDR01();
          PK0TS-VALID-DNSB();
          if (converseVar.validationMsgNum != 519)
            converseLib.validationFailed(226);
          end
        else
          converseLib.validationFailed(226);
        end
           /* order(s) changed - warning orders(s) not in pick pool*/
        PK0TW01.PK0TWSB5 = 1;
        PK0TSV3(); /* hold all orders with same warning*/
                                   /* messages*/
      end
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(108);
        PK0TW01.PK0TWSB4 = 0;
           /* data base contention <try again>*/
      end
    end
  end


end // end PK0TSU7

// customer on hold warning
Function PK0TSU8()


         /* order on hold warning*/



  set PKBREC empty;
  TA1REC.TA1LOCAT[2] = "PK0TSU8";
  PK9REC.XWHCD = PK4REC.XWHCD;
  PK9REC.KUCCOID = PK4REC.KUCCOID;
  PK9REC.KUMSTRID = PK4REC.KUMSTRID;
  PK9REC.XNXCD = PK4REC.XNXCD;
  PKBREC.XHRCD = "*";

  PK0TSU1(); /* get current date*/


  XSPK9S1(); /* select set and select next pkbrec*/

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(028); /* data base in use*/
    /* data base contention <try again>*/
    PK0TW01.PK0TWSB4 = 0;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      XSPK9C1(); /* close set*/
    else
      PK0TSV2(); /* check release date on records*/
      XSPK9C1(); /* close set*/
    end
  end



end // end PK0TSU8

// order on hold warning
Function PK0TSU9()


         /* order on hold warning*/



  set PKBREC empty;
  TA1REC.TA1LOCAT[2] = "PK0TSU9";
  PKBREC.XWHCD = PK0TM001.XWHCD;
  PKBREC.PK1CUOID = PK0TM001.PK1CUOID[PK0TWSB4];
  PKBREC.PK1NORID = PK0TM001.PK1NORID[PK0TWSB4];
  PKBREC.XHRCD = "*";

  PK0TSU1(); /* get current date*/


  XSPKBS1(); /* select set and select next pkbrec*/

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(028); /* data base in use*/
    /* data base contention <try again>*/
    PK0TW01.PK0TWSB4 = 0;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      XSPKBC1(); /* close set*/
    else
      PK0TSV1(); /* check release date on records*/
      XSPKBC1(); /* close set*/
    end
  end



end // end PK0TSU9

// check release hold date
Function PK0TSV1()


         /* check order hold release date*/



  TA1REC.TA1LOCAT[2] = "PK0TSV1";

  while (SQLCA.VAGen_SQLCODE == 0)

    if (PKBREC.PKBRELDT > TA2REC.TA2GRGGN)
      converseLib.validationFailed(173);
          /* order(s) added - warning order(s)  on hold*/
      PK0TSV3(); /* load like warnings into warning table*/
    end

    XSPKBF1(); /* xelect next tf1rec record*/

  end



end // end PK0TSV1

// check release hold date
Function PK0TSV2()


         /* check customer hold release date*/



  TA1REC.TA1LOCAT[2] = "PK0TSV2";

  while (SQLCA.VAGen_SQLCODE == 0)

    if (PK9REC.PK9RELDT > TA2REC.TA2GRGGN)
      converseLib.validationFailed(174);
          /* order(s) added - warning customer(s) on hold*/
      PK0TSV3();
                                   /* load like warnings into warning table*/
    end

    XSPK9F1(); /* xelect next tf1rec record*/

  end



end // end PK0TSV2

// load table with like warnings
Function PK0TSV3()


         /* load warning table with like warnings*/



  if (PK0TW01.PK0TWEZE == 0)
    PK0TWEZE = converseVar.validationMsgNum;
  end

  if (PK0TW01.PK0TWEZE == converseVar.validationMsgNum)
    PK0TW01.PK1CUOID = PK0TM001.PK1CUOID[PK0TWSB4];
    PK0TW01.PK1NORID = PK0TM001.PK1NORID[PK0TWSB4];
    PK0TW01.PK0TWORH[PK0TWSB5] = PK0TW01.PK0TWORD;
    PK0TW01.PK0TWSB5 = PK0TW01.PK0TWSB5 + 1;
  end



end // end PK0TSV3

//*** RECORD=PK0TW01 ****
// allocation working storage.
// this area is the working storage unique to
// application AL0A for rule set selection for batch processing
// ***********************
Record PK0TW01 type basicRecord
  5 PK0TWGRP PK0TWGRP ; 
    10 PK0TWCS1 PK0TWCS1 ; 
    10 PK0TWFAC PK0TWFAC ; 
    10 PK0TWFCS PK0TWFCS ; 
    10 PK0TWFCT PK0TWFCT ; 
    10 PK0TWREP PK0TWREP ; 
    10 PK0TWRPT PK0TWRPT ; 
    10 PK0TWIXQ PK0TWIXQ ; 
    10 PK0TWARN PK0TWARN ; 
    10 PK0TMCON PK0TMCON ; 
    10 PK0TMNON PK0TMNON ; 
    10 PK0TWUPD PK0TWUPD ; 
    10 PK0TWFLG PK0TWFLG ; 
    10 PK0TWDTE PK0TWDTE ; 
    10 XWHCD XWHCD ; 
    10 PK0TWORH PK0TWORH [24] ; 
    10 PK0TWORD PK0TWORD ; 
      15 PK1CUOID PK1CUOID ; 
      15 PK1NORID PK1NORID ; 
    10 PK0TMTDT PK0TMTDT ; 
      15 PK0TMTCC PK0TMTCC ; 
      15 PK0TMTYY PK0TMTYY ; 
      15 PK0TMTMM PK0TMTMM ; 
      15 PK0TMTDD PK0TMTDD ; 
    10 PK0TWEZE PK0TWEZE ; 
    10 PK0TWFL1 PK0TWFL1 ; 
    10 PK0TWFL2 PK0TWFL2 ; 
    10 PK0TWCT5 PK0TWCT5 ; 
    10 PK0TWSB1 PK0TWSB1 ; 
    10 PK0TWSB2 PK0TWSB2 ; 
    10 PK0TWSB3 PK0TWSB3 ; 
    10 PK0TWSB4 PK0TWSB4 ; 
    10 PK0TWSB5 PK0TWSB5 ; 
    10 PK0TW-HLD-DTL PK0TW-HLD-DTL ; 
    10 PK0TW-SCRN-FULL PK0TW-SCRN-FULL ; 
    10 PK0TMACT PK0TMACT ; 
    10 PK0TWNUM PK0TWNUM ; 
      15 * num(8) ; 
      15 PK0TWPRT PK0TWPRT ; 
    10 PK0TWERSW PK0TWERSW ; 
end // end PK0TW01

//*** RECORD=PK0TW02 ****
// allocation working storage.
// this area is the working storage unique to
// application AL0A for rule set selection for batch processing
// ***********************
Record PK0TW02 type basicRecord
  5 PK0TW02G PK0TW02G ; 
    10 XWHCD XWHCD [1000] ; 
    10 XDVCD XDVCD [1000] ; 
    10 XBCCD XBCCD [1000] ; 
    10 PK1PRTN PK1PRTN [1000] ; 
    10 PK0TWORD PK0TWORD [1000] ; 
      15 PK1CUOID PK1CUOID ; 
      15 PK1NORID PK1NORID ; 
    10 XPPCD XPPCD [1000] ; 
    10 OP1SPHDF OP1SPHDF [1000] ; 
    10 PKURUNMD PKURUNMD [1000] ; 
    10 ZZZCHGCT ZZZCHGCT [1000] ; 
end // end PK0TW02

//*** RECORD=PK0TW03 ****
// working storage record 3 (used for hold)
// ***********************
Record PK0TW03 type basicRecord
  5 PK0TW03G PK0TW03G ; 
    10 PK0TMACT PK0TMACT [24] ; 
    10 XPPCD XPPCD [24] ; 
    10 PK1CUOID PK1CUOID [24] ; 
    10 PK1NORID PK1NORID [24] ; 
    10 PK-SEL-TYP-CD PK-SEL-TYP-CD [24] ; 
    10 TF1CARCD TF1CARCD [24] ; 
end // end PK0TW03

// action field
DataItem PK0TMACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next order number
DataItem PK0TMCON num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// next order id extention
DataItem PK0TMNON num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0TMTCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0TMTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0TMTDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0TMTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0TMTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold index for map detail line
DataItem PK0TW-HLD-DTL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Flag to indicate full screen
DataItem PK0TW-SCRN-FULL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group Level of Record
DataItem PK0TW02G char(19000)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group Level of Record
DataItem PK0TW03G char(360)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning msg flag
DataItem PK0TWARN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of cursor switch
DataItem PK0TWCS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work counter 1
DataItem PK0TWCT5 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// date hold area
DataItem PK0TWDTE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold area for pk1cuoid
DataItem PK0TWERSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-ord-stktf-id
DataItem PK0TWEZE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// full case factor
DataItem PK0TWFAC num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// full case qty
DataItem PK0TWFCS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// full cast qty total
DataItem PK0TWFCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// y or n type flag
DataItem PK0TWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order found flag
DataItem PK0TWFL2 char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// add or delete flag
DataItem PK0TWFLG char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group Level of Record
DataItem PK0TWGRP char(294)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// quantity index
DataItem PK0TWIXQ smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// hold area for pk1cuoid
DataItem PK0TWNUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group order # hold
DataItem PK0TWORD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order number hold
DataItem PK0TWORH char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold area for pk1prtn
DataItem PK0TWPRT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// repack qty
DataItem PK0TWREP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// repack qty total
DataItem PK0TWRPT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work subscript 1
DataItem PK0TWSB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work subscript 2
DataItem PK0TWSB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work subscript 3
DataItem PK0TWSB3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work subscript 4
DataItem PK0TWSB4 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work subscript 5
DataItem PK0TWSB5 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// add or delete flag
DataItem PK0TWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

