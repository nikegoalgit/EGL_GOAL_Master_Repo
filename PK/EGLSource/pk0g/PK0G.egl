package pk0g;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import ww.common.*;
//*** PROGRAM=PK0G ****
// ************************************************************
// picking carton content maintence
// 
// overview:  add and maintain the carton content.For each size
//            for the style entered a carton class and length
//            must be entered. the screen is designed to allow
//            the user to enter a class and length and have
//            that data apply to all sizes until a new class or
//            length is entered.
// 
// maintence history:
// date       by     rev     description of change
// --------   ------ ---     ----------------------------------
// 08/30/87   lholco  0      create application
// 06/30/88   mblail  sr#26  deleted sr3rec from table list
//                           because it's not used.
// 09/20/88   jcampb  sr#26  deleted sr1rec and sr2rec from
//                           table list because not used.
// 11/29/88   JWOOD          ADDED NONCSP OPT ON CALLS
// 11/29/88   JWOOD          ADDED XSSEGTR LOGIC
// 08/20/89   jcampb         ADDED pf17/18 xfer to pk04/pk0h
// 11/16/89   mwalto  0      bug fix, chg field name from
//                           pkkrec.pkccrtcl to pkkrec.pkkbxccd
//                           in procs pk0g122 & pk0g142
// 12/19/89   jcampb  0      fix heading color
// 03/19/91   rcream  0      moved map field sy1sstnm up one
//                           line and added xumcd and xpgcd to
//                           the map. modified the logic to
//                           display the added fields.
// 10/10/91   jcampb         table changes
// 08/11/95   CBRINE  CANADA modified to call SY2000 (PK0G901)
//                           Added XCTCD to PKWREC
// ************************************************************
// *********************
Program PK0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PK0GW01 PK0GW01; // record
  PK0GW02 PK0GW02; // record
  PK4REC PK4REC; // record
  PK5REC PK5REC; // record
  PKCREC PKCREC; // record
  PKFREC PKFREC; // record
  PKIREC PKIREC; // record
  PKKREC PKKREC; // record
  PKNREC PKNREC; // record
  PKOREC PKOREC; // record
  PKWREC PKWREC; // record
  PKYREC PKYREC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY4REC SY4REC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  WSY2000 WSY2000; // record
  XSPKW01 XSPKW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use PK0GM.PK0GM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
     /* ------------------------------------------------------------*/
     /* initialize working storage areas.*/
     /* if an inquiry keys array exists, see if it was orders from*/
     /* this application that were selected for inquiry.  save the*/
     /* information so that the display may be reestablished.*/
     /* ------------------------------------------------------------*/

    if (PKWREC.PKWINDEX > 0) /* INQUIRY KEYS ARRAY PROVIDED*/

      if (PKWREC.PKWSLTYP[PKWINDEX] == "M") /* have key from menu*/
         /* format key array*/
        PKYREC.PKWARRAY = PKWREC.PKWARRAY[PKWINDEX];
        PKWREC.XWHCD = PKYREC.XWHCD;
        PKWREC.XWHABRV = PKYREC.XWHABRV;
         /* clear inquiry selections*/
        PKWREC.PKWSLECT[PKWINDEX] = " ";
        /* decrement inquiry index*/
        PKWREC.PKWINDEX = PKWREC.PKWINDEX - 1;
      end
    end


    PK0G000: PK0G000();
    exit program;
  end // end main
end // end PK0G

// application main logic
Function PK0G000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/



  COMMAREA.CACURRAP = "PK0G";


  PK0G001(); /* initilize the application*/


  PK0GW01.PK0GWEOA = "N";
   /* set end-of-application flag to 'no'*/

  while (PK0GW01.PK0GWEOA == "N") /* while not end-of-application*/
    PK0G050(); /* process the application screen(s)*/
  end

  PK0G060(); /* exit this application*/
end // end PK0G000

// initialize application
Function PK0G001()
   /* ************************************************************/
   /* *      initialize the application working storage         **/
   /* *                                                         **/
   /* ************************************************************/


  set SQLCA empty;
  set PK0GW01 empty; /* clear out storage for pk0gw01*/
  set PK0GW02 empty; /* clear out storage for pk0gw02*/


  PK0GW01.XWHCD = PKWREC.XWHCD; /* inital warehouse code*/
  PK0GW01.XWHABRV = PKWREC.XWHABRV; /* and warehouse abbreviation*/




         /* the following seven lines refer to data held*/
         /* for one screen*/

   /* initialize the screen names*/
   /* set maximum size for array*/
   /* last filled row in array*/
   /* set need-to-build-screen to yes*/
   /* set need-to-build-array to yes*/
  PK0GW01.PK0GWSCN = "PK0GM001";
  PK0GW01.PK0GWMAR = 40;
  PK0GW01.PK0GWLSX = 0;
  PK0GW01.PK0GWBLS = "Y";
  PK0GW01.PK0GWBLA = "Y";


  PK0GW01.PK0GWARX = 1; /* generic array index*/

  PK0GW01.PK0GWFST = "Y"; /* first time thru flag*/
  PK0GW01.PK0GWUPD = "N"; /* not okay to update database*/
  PK0GW01.PK0GWSUP = "N"; /* if the update was successful*/
  PK0GW01.PK0GWBLA = "N"; /* don't want to build array*/
  PK0GW01.PK0GWBLS = "Y"; /* want to build screen*/
  PK0GW01.PK0GWCFF = "N"; /* no copy from fields entered yet*/

end // end PK0G001

// main pk0g branch control
Function PK0G050()
   /* ************************************************************/
   /* *    process the application screen(s)                    **/
   /* *                                                         **/
   /* *  note that this process being performed in a            **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/


  PK0GW01.PK0GWEOS = "N"; /* set end-of-screen flag to 'no'*/

  while (PK0GW01.PK0GWEOS == "N") /* while not end-of-screen*/
    PK0G100(); /* process screen pk0gm001*/
  end


   /* at this point;*/
       /* if the end-of-application flag (pk0gweoa) = 'n'*/
           /* we go back to the top of pk0%050...*/
       /* if the end-of-application flag (pk0gweoa) = 'y'*/
           /* we return to pk0%000.*/



end // end PK0G050

// exit application
Function PK0G060()
   /* ************************************************************/
   /* *    exit application*/
   /* *                                                         **/
   /* ************************************************************/



  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* commarea user area*/

  XSEXIT();

  PK0GM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* returned error message*/

  converseLib.validationFailed(); /* force alarm to sound*/
  PK0GM001.XXXERRID = "PK0G060"; /* error location*/

  PK0G100(); /* display screen to show error*/

end // end PK0G060

// converse screen m001
Function PK0G100()
   /* ************************************************************/
   /* *    process screen pk0gm001                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from pk0g050 until the end-of-screen   **/
   /* *     flag (pk0gweos) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/


  if (converseVar.validationMsgNum == 0
   && PK0GW01.PK0GWBLA == "Y") /* need to build database array*/
    PK0G101(); /* fill it with data*/
  end
  PK0GW01.PK0GWBLA = "Y";

  if (converseVar.validationMsgNum == 0
   && PK0GW01.PK0GWBLS == "Y") /* screen has no data in its body*/
    PK0G105(); /* fill it with data*/
  end
  PK0G108(); /* show description*/


   /* ***********************************************************/
  converse PK0GM001 ;
   /* ***********************************************************/

   /* the next 3 if stmts set up defaults for color and*/
   /* dimension if gpc = '02' or '03' if the user has not*/
   /* specificly entered them.*/

  if (PK0GM001.XGPCD == "02"
   && PK0GM001.SY2CLRID == " ")
    PK0GM001.SY2CLRID = "00 ";
    set PK0GM001.SY2CLRID modified;
  end
   /* ;*/
  if (PK0GM001.XGPCD == "02"
   && PK0GM001.XDMCD == " ")
    PK0GM001.XDMCD = "00";
    set PK0GM001.XDMCD modified;
  end

  if (PK0GM001.XGPCD == "03"
   && PK0GM001.XDMCD == " ")
    PK0GM001.XDMCD = "00";
    set PK0GM001.XDMCD modified;
  end


  PK0GW01.PK0GWERR = "N"; /* reset error flag*/

  PK0G111();
                                   /* if field is modified, set it modified*/

  PK0G110(); /* handle any special entries*/
       /* may exit appl from this process*/

  if (PK0GW01.PK0GWERR == "N")
    PK0G120(); /* go edit screen entries*/
  end


  if (PK0GW01.PK0GWERR == "N")
    PK0G130(); /* process entries*/
  end


    /* process pf keys*/

  if (PK0GW01.PK0GWERR == "N") /* if there were no map errors*/
    PK0G115(); /* process pfkeys*/
  end

    /* update database*/

  if (PK0GW01.PK0GWERR == "N" /* if there were no map errors*/
   && PK0GW01.PK0GWUPD == "Y") /* okay to do updates*/
    PK0G140(); /* update database*/
  end

   /* at this point;*/
     /* if the end-of-screen flag (pk0gweos) is 'n'*/
        /* we go back to top of process pk0%100.*/
     /* if the end-of-screen flag (pk0gweos) is 'y'*/
        /* we return to pk0%050.*/



end // end PK0G100

// build array for m001
Function PK0G101()
   /* ************************************************************/
   /* *      this processes the array for pk0gm001*/
   /* ************************************************************/


  if (PK0GM001.PK0GMACT == "D") /* de-activate*/
    return; /* when we look for the record, it won't be there*/
  end


   /* if 'copy from' fields have data, store the data*/
   /* else store the data from the heading*/

  if (PK0GW01.PK0GWCFF == "Y")
    PK0GW01.XGPCD = PK0GM001.PK0GMXGP;
    PK0GW01.PK0GMXWH = PK0GM001.PK0GMXWH;
    PK0GW01.SY1STNBR = PK0GM001.PK0GMSTY;
    PK0GW01.SY2CLRID = PK0GM001.PK0GMCLR;
    PK0GW01.XDMCD = PK0GM001.PK0GMXDM;
  else
    PK0GW01.XGPCD = PK0GM001.XGPCD;
    PK0GW01.XWHCD = PK0GM001.XWHCD;
    PK0GW01.SY1STNBR = PK0GM001.SY1STNBR;
    PK0GW01.SY2CLRID = PK0GM001.SY2CLRID;
    PK0GW01.XDMCD = PK0GM001.XDMCD;
    PK0GW01.XUMCD = PK0GM001.XUMCD;
    PK0GW01.XPGCD = PK0GM001.XPGCD;
  end

  set PKCREC empty;
  if (PK0GW01.PK0GWCFF == "Y")
    PKCREC.XWHCD = PK0GM001.PK0GMXWH;
  else
    PKCREC.XWHCD = PK0GW01.XWHCD;
  end
  PKCREC.XGPCD = PK0GW01.XGPCD;
  PKCREC.SY1STNBR = PK0GW01.SY1STNBR;
  PKCREC.SY2CLRID = PK0GW01.SY2CLRID;
  PKCREC.XDMCD = PK0GW01.XDMCD;
  PKCREC.XUMCD = PK0GW01.XUMCD;
  PKCREC.XPGCD = PK0GW01.XPGCD;

  PK0G902(); /* get classes and lengths from carton content*/
  if (converseVar.validationMsgNum != 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    PK0GW02.XUMCD = PKCREC.XUMCD;
    PK0GW02.XPGCD = PKCREC.XPGCD;
  end


  if (PKCREC.XXXSTAT == "A") /* if record is active*/
     /* next sentence*/
  else /* inactive status*/
    SQLCA.VAGen_SQLCODE = 100; /* pretend it isn't there*/
    set PK0GW02 empty; /* clear out array*/
    PK0GW01.PK0GWSZX = 1;
                                   /* the fields are blanked out so nothing*/
    while (PK0GW01.PK0GWSZX <= 40) /* will show on the map*/
      PKCREC.PKCCRTCL[PK0GWSZX] = " ";
      PKCREC.PKCCRTLN[PK0GWSZX] = 0;
      PK0GW01.PK0GWSZX = PK0GW01.PK0GWSZX + 1;
    end
  end

   /* set all fields normal, if there is an error they*/
   /* will be set bright*/

  set PK0GM001.XWHCD normal;
  set PK0GM001.XGPCD normal;
  set PK0GM001.SY1STNBR normal;
  set PK0GM001.SY2CLRID normal;
  set PK0GM001.XDMCD normal;
  set PK0GM001.XUMCD normal;
  set PK0GM001.XPGCD normal;

  set PK0GM001.PK0GMXWH normal;
  set PK0GM001.PK0GMXGP normal;
  set PK0GM001.PK0GMSTY normal;
  set PK0GM001.PK0GMCLR normal;
  set PK0GM001.PK0GMXDM normal;


  if (SQLCA.VAGen_SQLCODE == 100)
    if (PK0GM001.PK0GMACT == " "
     || PK0GM001.PK0GMACT == "C"
     || PK0GM001.PK0GMACT == "I")
      converseLib.validationFailed(8); /* ; no record was found*/
      set PK0GM001.PK0GMACT cursor;

      PK0GW01.PK0GWSZX = 1; /* clear screen*/
      while (PK0GW01.PK0GWSZX <= 40)
        PK0GM001.PK0GMSIZ[PK0GWSZX] = " ";
        PK0GM001.PK0GMCLS[PK0GWSZX] = " ";
        PK0GM001.PK0GMLEN[PK0GWSZX] = 0;
        PK0GW01.PK0GWSZX = PK0GW01.PK0GWSZX + 1;
      end

      PK0GM001.XXXERRID = "PK0G101";
      PK0GW01.PK0GWERR = "Y"; /* there was an error*/
      return;
    else
      if (PK0GM001.PK0GMACT == "A") /* trying to add record*/
        if (PK0GW01.PK0GWCFF == "N") /* no copy from fields entered*/
           /* next sentence -  everything is kosher*/
        else /* copy from record should be on*/
                                   /* database*/
          converseLib.validationFailed(120); /* copy from product not found*/
          set PK0GM001.PK0GMXWH cursor, bold;
          set PK0GM001.PK0GMXGP bold;
          set PK0GM001.PK0GMSTY bold;
          set PK0GM001.PK0GMCLR bold;
          set PK0GM001.PK0GMXDM bold;

          PK0GW01.PK0GWSZX = 1; /* clear screen*/
          while (PK0GW01.PK0GWSZX <= 40)
            PK0GM001.PK0GMSIZ[PK0GWSZX] = " ";
            PK0GM001.PK0GMCLS[PK0GWSZX] = " ";
            PK0GM001.PK0GMLEN[PK0GWSZX] = 0;
            PK0GW01.PK0GWSZX = PK0GW01.PK0GWSZX + 1;
          end

          PK0GM001.XXXERRID = "PK0G101";
          PK0GW01.PK0GWERR = "Y"; /* there was an error*/
          return;
        end
      end
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0 /* if the record was found*/
   && PK0GM001.PK0GMACT == "A" /* trying to add record*/
   && PK0GW01.PK0GWCFF == "N") /* copy from field should be in database*/
    converseLib.validationFailed(44); /* record to be added already exists*/
    set PK0GM001.XWHCD cursor, bold;
    set PK0GM001.XGPCD bold;
    set PK0GM001.SY1STNBR bold;
    set PK0GM001.SY2CLRID bold;
    set PK0GM001.XDMCD bold;
    set PK0GM001.XUMCD bold;
    set PK0GM001.XPGCD bold;
    PK0GM001.XXXERRID = "PK0G101";
    PK0GW01.PK0GWERR = "Y";
    return;
    /* ELSE ;*/
    /* SET PK0GM001.XWHCD NORMAL;*/
    /* SET PK0GM001.XGPCD NORMAL;*/
    /* SET PK0GM001.SY1STNBR NORMAL;*/
    /* SET PK0GM001.SY2CLRID NORMAL;*/
    /* SET PK0GM001.XDMCD NORMAL;*/
  end



  set SYPREC empty;
  SYPREC.SYPFC = "PC"; /* translator function code*/
  SYPREC.SYPCMPSW = "C"; /* non compressed data*/
  SYPREC.XQACD = "**"; /* accept all qualities*/

   /* need valid sizes for header data only*/

  SYPREC.XGPCD = PK0GM001.XGPCD;
  SYPREC.SY1STNBR = PK0GM001.SY1STNBR;
  SYPREC.SY2CLRID = PK0GM001.SY2CLRID;
  SYPREC.XDMCD = PK0GM001.XDMCD;

  PK0G903(); /* get valid sizes*/
  if (converseVar.validationMsgNum != 0)
    return;
  end

  PK0G102(); /* move data to array*/


end // end PK0G101

// move data to array
Function PK0G102()
   /* ************************************************************/
   /* *  move valid sizes to array*/
   /* **/
   /* ************************************************************/

  PK0GW02.ZZZCHGCT = PKCREC.ZZZCHGCT; /* used for updating record*/


  PK0GW01.PK0GWSZX = 1;

  while (SYPREC.SY5SZID[PK0GWSZX] != 0) /* for all valid sizes*/

    PK0GW02.SY5SZID[PK0GWSZX] = SYPREC.SY5SZID[PK0GWSZX];
    PK0GW01.PK0GWSIZ = SYPREC.SY5SZID[PK0GWSZX];
    PK0GW02.SY4IDDSC[PK0GWSZX] = SYPREC.SY4IDDSC[PK0GWSZX];
    PK0GW02.PKCCRTCL[PK0GWSZX] = PKCREC.PKCCRTCL[PK0GWSIZ];
    PK0GW02.PKCCRTLN[PK0GWSZX] = PKCREC.PKCCRTLN[PK0GWSIZ];

    PK0GW01.PK0GWSZX = PK0GW01.PK0GWSZX + 1;

  end


  PK0GW01.PK0GWLSX = PK0GW01.PK0GWSZX - 1; /* true nbr of entries in array*/

end // end PK0G102

// build screen for m001
Function PK0G105()
   /* ************************************************************/
   /* *      this process builds the screen for pk0gm001*/
   /* ************************************************************/


   /* clear size, length and class on map*/

  set PK0GM001 initial;
  set PK0GM001.PK0GMACT cursor; /* the cursor may be moved in pk0g106*/

  if (converseVar.eventKey is pa2)
     /* next sentence - don't show any data on screen*/
  else
    PK0GM001.PK0GMACT = PK0GW01.PK0GMACT;
    PK0GM001.XGPCD = PK0GW02.XGPCD;
    PK0GM001.SY1STNBR = PK0GW02.SY1STNBR; /* holds data from heading*/
    PK0GM001.SY2CLRID = PK0GW02.SY2CLRID;
    PK0GM001.XDMCD = PK0GW02.XDMCD;
    PK0GM001.XUMCD = PK0GW02.XUMCD;
    PK0GM001.XPGCD = PK0GW02.XPGCD;
    if (PK0GW01.PK0GWCFF == "Y") /* if copy from fields were used, show them*/
      PK0GM001.PK0GMXGP = PK0GW01.XGPCD; /* holds data from heading*/
      PK0GM001.PK0GMXWH = PK0GW01.PK0GMXWH;
      PK0GM001.PK0GMSTY = PK0GW01.SY1STNBR;
      PK0GM001.PK0GMCLR = PK0GW01.SY2CLRID;
      PK0GM001.PK0GMXDM = PK0GW01.XDMCD;
    end
  end


  PK0GM001.XXXERRID = "PK0GM";
  PK0GM001.XXXCURDT = VGVar.currentShortGregorianDate;
  PK0GM001.XXXRVNBR = "00";
  set PK0GM001.PK0GMACT cursor;

  PK0GM001.XWHCD = PK0GW01.XWHCD;
  PKWREC.XWHCD = PK0GW01.XWHCD;


  if (PK0GW01.XWHABRV == " ") /* if no abreviation*/
    if (PK0GM001.XWHCD in XWHTBL.XWHCD /* if code is in the table*/
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and it is active*/
      PK0GW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      PK0GM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      PK0GM001.XWHABRV = " ";
    end
  end
  PK0GM001.XWHABRV = PK0GW01.XWHABRV;
  PKWREC.XWHABRV = PK0GW01.XWHABRV;


   /* if update was done successfully, then show msg.*/
   /* the msg nbr is not moved to ezemno earlier because*/
   /* the application is set so data in ezemno means an*/
   /* error*/

  if (PK0GW01.PK0GWSUP == "Y") /* if there was a successful update*/

    if (PK0GW01.PK0GMACT == "C")
      converseLib.validationFailed(32); /* table update was successful*/
    else
      if (PK0GW01.PK0GMACT == "A")
        converseLib.validationFailed(93); /* record was added*/
      else
        if (PK0GW01.PK0GMACT == "D")
          converseLib.validationFailed(92); /* record was deleted*/
        end
      end
    end
    PK0GW01.PK0GWSUP = "N"; /* init successful update flag*/
  end

  PK0GW01.PK0GWSZX = 1;
  PK0GW01.PK0GWCT1 = 0;

  while (PK0GW01.PK0GWSZX <= 40)
    PK0G106(); /* build each screen line*/
    PK0GW01.PK0GWSZX = PK0GW01.PK0GWSZX + 1;
  end

end // end PK0G105

// build screen lines for m001
Function PK0G106()
   /* ************************************************************/
   /* *   take data from the database array and place           **/
   /* *   onto the screen one line at a time.                   **/
   /* ************************************************************/

  if (PK0GW02.SY5SZID[PK0GWSZX] == 0) /* have non valid size*/
    set PK0GM001.PK0GMSIZ[PK0GWSZX] skip;
    set PK0GM001.PK0GMCLS[PK0GWSZX] skip;
    set PK0GM001.PK0GMLEN[PK0GWSZX] skip;
  else /* have valid size*/
    PK0GM001.PK0GMSIZ[PK0GWSZX] = PK0GW02.SY4IDDSC[PK0GWSZX];
    PK0GM001.PK0GMCLS[PK0GWSZX] = PK0GW02.PKCCRTCL[PK0GWSZX];
    PK0GM001.PK0GMLEN[PK0GWSZX] = PK0GW02.PKCCRTLN[PK0GWSZX];
  end

   /* if fields were blanked out in pk0g137, the user probably*/
   /* wants to type in values, so the cursor is positioned at*/
   /* the first empty class*/
  if (converseVar.eventKey is pf12
   && PK0GW01.PK0GWCT1 == 0
   && PK0GM001.PK0GMCLS[PK0GWSZX] == " "
   && PK0GW02.SY5SZID[PK0GWSZX] != 0) /* have valid size*/
    set PK0GM001.PK0GMCLS[PK0GWSZX] cursor;
    PK0GW01.PK0GWCT1 = PK0GW01.PK0GWCT1 + 1;
  end
end // end PK0G106

// fills middle of m001
Function PK0G107()
   /* ************************************************************/
   /* *      this process builds the screen for pk0gm001*/
   /* ************************************************************/



  PK0GW01.PK0GWSZX = 1;
  PK0GW01.PK0GWCT1 = 0;

  while (PK0GW01.PK0GWSZX <= 40)

    if (PK0GW02.SY5SZID[PK0GWSZX] == 0) /* have non valid size*/
      set PK0GM001.PK0GMSIZ[PK0GWSZX] skip;
      set PK0GM001.PK0GMCLS[PK0GWSZX] skip;
      set PK0GM001.PK0GMLEN[PK0GWSZX] skip;
    else /* have valid size*/
      PK0GM001.PK0GMSIZ[PK0GWSZX] = PK0GW02.SY4IDDSC[PK0GWSZX];
      PK0GM001.PK0GMCLS[PK0GWSZX] = PK0GW02.PKCCRTCL[PK0GWSZX];
      PK0GM001.PK0GMLEN[PK0GWSZX] = PK0GW02.PKCCRTLN[PK0GWSZX];
    end

    PK0GW01.PK0GWSZX = PK0GW01.PK0GWSZX + 1;
  end

end // end PK0G107

// show description on m001
Function PK0G108()
   /* ************************************************************/
   /* *    show description on screen*/
   /* ************************************************************/



  if (PK0GM001.XGPCD != " "
   && PK0GM001.SY1STNBR != " "
   && PK0GM001.SY2CLRID != " "
   && PK0GM001.XDMCD != " ")
    PKNREC.XGPCD = PK0GM001.XGPCD;
    PKNREC.SY1STNBR = PK0GM001.SY1STNBR;
    PKNREC.SY2CLRID = PK0GM001.SY2CLRID;
    PKNREC.XDMCD = PK0GM001.XDMCD;

    PK0G901(); /* look up description*/
    if (converseVar.validationMsgNum != 0)
      return;
    else
      PK0GM001.SY1SSTNM = PKNREC.SY1SSTNM;
    end
  end

end // end PK0G108

// handle screen m001 pfkeys
Function PK0G110()
   /* ***********************************************************/
   /* *  check pf keys*/
   /* ***********************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
    return;
  end

  if (converseVar.eventKey is pf1)
    XSPF1();
    return;
  end

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "PK0A";
    PK0GW01.PK0GWERR = "Y";
    PK0GW01.PK0GWEOS = "Y";
    PK0GW01.PK0GWEOA = "Y";
    return;
  end

  if (converseVar.eventKey is pf4)
    XSPF4();
    return;
  end
  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "PK0B";
    PK0GW01.PK0GWERR = "Y";
    PK0GW01.PK0GWEOS = "Y";
    PK0GW01.PK0GWEOA = "Y";
    return;
  end

  if (converseVar.eventKey is pf14)
    COMMAREA.CATOAP = "PK0C";
    PK0GW01.PK0GWERR = "Y";
    PK0GW01.PK0GWEOS = "Y";
    PK0GW01.PK0GWEOA = "Y";
    return;
  end

  if (converseVar.eventKey is pf15)
    COMMAREA.CATOAP = "PK0D";
    PK0GW01.PK0GWERR = "Y";
    PK0GW01.PK0GWEOS = "Y";
    PK0GW01.PK0GWEOA = "Y";
    return;
  end

  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "PK0Z";
    PK0GW01.PK0GWERR = "Y";
    PK0GW01.PK0GWEOS = "Y";
    PK0GW01.PK0GWEOA = "Y";
    return;
  end

  if (converseVar.eventKey is pf17)
    COMMAREA.CATOAP = "PK04";
    PK0GW01.PK0GWERR = "Y";
    PK0GW01.PK0GWEOS = "Y";
    PK0GW01.PK0GWEOA = "Y";
    return;
  end

  if (converseVar.eventKey is pf18)
    COMMAREA.CATOAP = "PK0H";
    PK0GW01.PK0GWERR = "Y";
    PK0GW01.PK0GWEOS = "Y";
    PK0GW01.PK0GWEOA = "Y";
    return;
  end

  if (converseVar.eventKey is pf19)
    COMMAREA.CATOAP = "PK0S";
    PK0GW01.PK0GWERR = "Y";
    PK0GW01.PK0GWEOS = "Y";
    PK0GW01.PK0GWEOA = "Y";
    return;
  end

  if (converseVar.eventKey is pf20)
    COMMAREA.CATOAP = "PK07";
    PK0GW01.PK0GWERR = "Y";
    PK0GW01.PK0GWEOS = "Y";
    PK0GW01.PK0GWEOA = "Y";
    return;
  end

  if (converseVar.eventKey is pa2)
    PK0GW01.PK0GWERR = "Y";
    PK0GW01.PK0GWBLA = "N";
    PK0GW01.PK0GWBLS = "Y";
    set PK0GW02 empty;
    PK0GM001.SY1STNBR = " ";
    PK0GM001.SY2CLRID = " ";
    PK0GM001.XGPCD = " ";
    PK0GM001.XDMCD = " ";
    PK0GM001.XUMCD = " ";
    PK0GM001.XPGCD = " ";
    PK0GM001.SY1SSTNM = " ";
    return;
  end


   /* if no other condition was met, show message*/

  converseLib.validationFailed(12); /* invalid pfkey*/
  PK0GW01.PK0GWERR = "Y";
  XXXERRID = "PK0G110";
end // end PK0G110

// set modified fields, modified
Function PK0G111()
   /* ***********************************************************/
   /* *  set modified fields modified*/
   /* ***********************************************************/

  PK0GW01.PK0GWCT1 = 1;

  while (PK0GW01.PK0GWCT1 <= PK0GW01.PK0GWLSX)

    if (PK0GM001.PK0GMCLS[PK0GWCT1] is modified)
      set PK0GM001.PK0GMCLS[PK0GWCT1] modified;
    end
    if (PK0GM001.PK0GMLEN[PK0GWCT1] is modified)
      set PK0GM001.PK0GMLEN[PK0GWCT1] modified;
    end

    PK0GW01.PK0GWCT1 = PK0GW01.PK0GWCT1 + 1;

  end
end // end PK0G111

// handle pfkeys for m001
Function PK0G115()
   /* ************************************************************/
   /* *                                                         **/
   /* *   check pf keys and 'enter' for next action.  since     **/
   /* *   most keys and fast path were already acted upon,after  **/
   /* *   the converse, we only have to take care of the rest.  **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/


  if (converseVar.eventKey is enter)
     /* what to do*/
  end
end // end PK0G115

// edit screen m001 entries
Function PK0G120()
   /* ************************************************************/
   /* *     this process handles all edits of screen fields,    **/
   /* ************************************************************/


   /* validate carton class*/

  if (PK0GM001.XWHCD != PK0GW01.XWHCD /* if header data has changed*/
   || PK0GM001.XGPCD != PK0GW01.XGPCD 
   || PK0GM001.SY1STNBR != PK0GW01.SY1STNBR
   || PK0GM001.SY2CLRID != PK0GW01.SY2CLRID
   || PK0GM001.XDMCD != PK0GW01.XDMCD)
     /* next sentence - check validity next time thru*/
  else
    PK0GW01.PK0GWCT1 = 1;
    while (PK0GW01.PK0GWCT1 <= PK0GW01.PK0GWLSX) /* all valid sizes on map*/
      if (PK0GM001.PK0GMCLS[PK0GWCT1] != PK0GW02.PKCCRTCL[PK0GWCT1]
       && PK0GM001.PK0GMCLS[PK0GWCT1] != " ")
        PK0G121(); /* validate carton class*/
        PK0G122(); /* validate carton class diminsion*/
      end
      PK0GW01.PK0GWCT1 = PK0GW01.PK0GWCT1 + 1;
    end
  end


   /* if one 'copy from' field was entered they all must be*/

  PK0GW01.PK0GWCFF = "N"; /* init copy from fields flag*/

  if (PK0GM001.PK0GMXWH == " "
   && PK0GM001.PK0GMXGP == " "
   && PK0GM001.PK0GMSTY == " "
   && PK0GM001.PK0GMCLR == " "
   && PK0GM001.PK0GMXDM == " ")

    set PK0GM001.PK0GMXWH normal;
    set PK0GM001.PK0GMXGP normal;
    set PK0GM001.PK0GMSTY normal;
    set PK0GM001.PK0GMCLR normal;
    set PK0GM001.PK0GMXDM normal;
  else
    if (PK0GM001.PK0GMXWH != " "
     && PK0GM001.PK0GMXGP != " "
     && PK0GM001.PK0GMSTY != " "
     && PK0GM001.PK0GMCLR != " "
     && PK0GM001.PK0GMXDM != " ")

      PK0GW01.PK0GWCFF = "Y"; /* copy from field was entered*/
      set PK0GM001.PK0GMXWH normal;
      set PK0GM001.PK0GMXGP normal;
      set PK0GM001.PK0GMSTY normal;
      set PK0GM001.PK0GMCLR normal;
      set PK0GM001.PK0GMXDM normal;
    else
      set PK0GM001.PK0GMXWH cursor, bold;
      set PK0GM001.PK0GMXGP bold;
      set PK0GM001.PK0GMSTY bold;
      set PK0GM001.PK0GMCLR bold;
      set PK0GM001.PK0GMXDM bold;
       /* all or none of the 'copy from' fields must be enter*/
      converseLib.validationFailed(19);
      PK0GM001.XXXERRID = "PK0G120";
      PK0GW01.PK0GWERR = "Y";
      PK0GS31(); /* clear screen*/
      PK0GS30(); /* clear array*/
    end
  end



   /* excluding copy from data and inactivating the record,*/
   /* the record must be shown*/
   /* before it can be worked on*/

  PK0GW01.PK0GWFST = "N"; /* first time thru flag*/

  if (PK0GW01.PK0GWCFF == "Y")
    PK0GW01.PK0GWFST = "Y"; /* first time thru flag*/
    if (PK0GM001.PK0GMACT == "A")
      if (PK0GM001.PK0GMACT == PK0GW01.PK0GMACT) /* same action code*/
        PK0GW01.PK0GWFST = "N"; /* not really first thru flag*/
      end
    end
  else
    if (PK0GM001.PK0GMACT == "D")
       /* next sentence*/
    else
      if (PK0GM001.XWHCD != PK0GW01.XWHCD /* if header data has changed*/
       || PK0GM001.XGPCD != PK0GW01.XGPCD 
       || PK0GM001.SY1STNBR != PK0GW01.SY1STNBR
       || PK0GM001.SY2CLRID != PK0GW01.SY2CLRID
       || PK0GM001.XDMCD != PK0GW01.XDMCD)
        PK0GW01.PK0GWFST = "Y"; /* first time thru flag*/
        if (PK0GM001.PK0GMACT == "A")
          if (PK0GM001.PK0GMACT == PK0GW01.PK0GMACT) /* same action code*/
            PK0GW01.PK0GWFST = "N"; /* not really first thru flag*/
          end
        else
          if (PK0GM001.PK0GMACT == " "
           || PK0GM001.PK0GMACT == "I")
            PK0GS30(); /* clear array*/
            PK0GS31(); /* clear screen*/
            set PK0GM001.PK0GMACT normal;
          else
            if (PK0GM001.PK0GMACT == "C")
              converseLib.validationFailed(98); /* the record must be shown before it can be ch*/
              PK0GW01.PK0GWERR = "Y"; /* error on screen*/
              PK0GM001.XXXERRID = "PK0G120";
              set PK0GM001.PK0GMACT bold;
              PK0GS30(); /* clear array*/
              PK0GS31(); /* clear screen*/
            end
          end
        end
      end
    end
  end



    /* clear screen and array*/

  if (PK0GW01.PK0GWCFF == "Y"
   && PK0GW01.PK0GWFST == "Y")
    PK0GS31();
    PK0GS30();
  else
    if (PK0GM001.PK0GMACT == "D")
      PK0GS31();
      PK0GS30();
    else
      if (converseVar.eventKey is pf12)
         /* next sentence*/
      else
        if (PK0GW01.PK0GWFST == "Y")
          /* IF PK0GM001.PK0GMACT = 'A';*/
            /* ; next sentence - copy what is on screen*/
          /* ELSE ;*/
          PK0GS31();
          PK0GS30();
          /* END ;*/
        end
      end
    end
  end

   /* if we aren't doing mass deletes, all header data must be*/
   /* filled in*/

  if (PK0GM001.PK0GMACT == "D")
    if (PK0GM001.XWHCD == " "
     || PK0GM001.XGPCD == " "
     || PK0GM001.SY1STNBR == " ")
      converseLib.validationFailed(100); /* warehouse, gpc and style must be filled in*/
      PK0GM001.XXXERRID = "PK0G120";
      PK0GW01.PK0GWERR = "Y";
      PK0GS31(); /* clear screen*/
      PK0GS30(); /* clear array*/
    end
  else
    if (PK0GM001.XWHCD == " "
     || PK0GM001.XGPCD == " "
     || PK0GM001.SY1STNBR == " "
     || PK0GM001.SY2CLRID == " "
     || PK0GM001.XDMCD == " ")
      converseLib.validationFailed(99); /* all heading fields must be filled in*/
      PK0GM001.XXXERRID = "PK0G120";
      PK0GW01.PK0GWERR = "Y";
      PK0GS31(); /* clear screen*/
      PK0GS30(); /* clear array*/
    end
  end

   /* validate action field*/

  if (PK0GM001.PK0GMACT == " "
   || PK0GM001.PK0GMACT == "A"
   || PK0GM001.PK0GMACT == "C"
   || PK0GM001.PK0GMACT == "D"
   || PK0GM001.PK0GMACT == "I")
    set PK0GM001.PK0GMACT normal;
  else
    set PK0GM001.PK0GMACT cursor, bold;
    converseLib.validationFailed(35); /* invalid action code*/
    PK0GM001.XXXERRID = "PK0G120";
    PK0GW01.PK0GWERR = "Y";
  end


   /* validate combination of 'copy from' and action fields*/

  if (PK0GW01.PK0GWCFF == "Y")
    if (PK0GM001.PK0GMACT == "A")
      set PK0GM001.PK0GMACT normal;
    else
      converseLib.validationFailed(7); /* 'copy from' was enter, action  must be 'a'*/
      PK0GM001.XXXERRID = "PK0G120";
      set PK0GM001.PK0GMACT cursor, bold;
      PK0GW01.PK0GWERR = "Y";
      PK0GS31(); /* clear screen*/
      PK0GS30(); /* clear array*/
    end
  end



   /* if 'copy from' fields have data, make sure header record*/
   /* doesn't exist or it is inactive*/

  if (PK0GW01.PK0GWCFF == "Y"
   && PK0GM001.PK0GMACT == "A")

    set PKCREC empty;
    PKCREC.XWHCD = PK0GM001.XWHCD;
    PKCREC.XGPCD = PK0GM001.XGPCD;
    PKCREC.SY1STNBR = PK0GM001.SY1STNBR;
    PKCREC.SY2CLRID = PK0GM001.SY2CLRID;
    PKCREC.XDMCD = PK0GM001.XDMCD;

    PK0G902(); /* see if record exists*/
    if (converseVar.validationMsgNum != 0)
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100
     || PKCREC.XXXSTAT != "A")
      set PK0GM001.XWHCD normal;
      set PK0GM001.XGPCD normal;
      set PK0GM001.SY1STNBR normal;
      set PK0GM001.SY2CLRID normal;
      set PK0GM001.XDMCD normal;
      set PK0GM001.XUMCD normal;
      set PK0GM001.XPGCD normal;
    else
      converseLib.validationFailed(44); /* record to be added already exists*/
      PK0GM001.XXXERRID = "PK0G120";
      PK0GW01.PK0GWERR = "Y"; /* error on screen*/
      set PK0GM001.XWHCD cursor, bold;
      set PK0GM001.XGPCD bold;
      set PK0GM001.SY1STNBR bold;
      set PK0GM001.SY2CLRID bold;
      set PK0GM001.XDMCD bold;
      set PK0GM001.XUMCD bold;
      set PK0GM001.XPGCD bold;
      PK0GS31();
      PK0GS30();
    end
  end


   /* if data changes, have to enter action field*/

  if (PK0GM001.PK0GMACT == " "
   || PK0GM001.PK0GMACT == "I")

    PK0GW01.PK0GWCT1 = 1;
    PK0GW01.PK0GWCT2 = 0;

    while (PK0GW01.PK0GWCT1 <= PK0GW01.PK0GWLSX /* all valid sizes*/
     && PK0GW01.PK0GWCT2 < 1)
      if (PK0GW02.PKCCRTCL[PK0GWCT1] != PK0GM001.PK0GMCLS[PK0GWCT1]
       || PK0GW02.PKCCRTLN[PK0GWCT1] != PK0GM001.PK0GMLEN[PK0GWCT1])

        PK0GW01.PK0GWCT2 = 1;
        set PK0GM001.PK0GMACT cursor, bold;
        converseLib.validationFailed(43); /* fields have been modified,action field req*/
        PK0GW01.PK0GWERR = "Y";
        PK0GM001.XXXERRID = "PK0G120";

      end
      PK0GW01.PK0GWCT1 = PK0GW01.PK0GWCT1 + 1;
    end
  end




   /* validate warehouse*/

  if (PK0GM001.XWHCD != PK0GW01.XWHCD)
    if (PK0GM001.XWHCD in XWHTBL.XWHCD /* if code is in table*/
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and if it is active*/
      PK0GW01.XWHCD = XWHTBL.XWHCD[sysVar.arrayIndex];
      PKWREC.XWHCD = XWHTBL.XWHCD[sysVar.arrayIndex];
      PK0GW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      PKWREC.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];

                            /* pm 10/30/87  move abrev. to map*/
      PK0GM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];

      set PK0GM001.XWHCD normal;
    else
      converseLib.validationFailed(2); /* inactive warehouse*/
      set PK0GM001.XWHCD cursor, bold;
      PK0GM001.XWHABRV = " ";
      PK0GW01.PK0GWERR = "Y";
      PK0GM001.XXXERRID = "PK0G120";
    end
  end
end // end PK0G120

// validate carton class
Function PK0G121()
   /* ************************************************************/
   /* *  validate class entries*/
   /* ************************************************************/


  set PKOREC empty;
  PKOREC.PKCCRTCL = PK0GM001.PK0GMCLS[PK0GWCT1];
  PKOREC.XWHCD = PK0GM001.XWHCD;
  PKOREC.PKORECST = "A";


  PK0G904(); /* select set on carton class table*/
  if (converseVar.validationMsgNum != 0)
    PK0G906(); /* close set*/
    return;
  end

    /* see if there are any active classes*/

  PK0G905(); /* fetch record*/
  if (converseVar.validationMsgNum != 0)
    PK0G906(); /* close set*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    set PK0GM001.PK0GMCLS[PK0GWCT1] cursor, bold;
    converseLib.validationFailed(9); /* class is not valid*/
    PK0GW01.PK0GWERR = "Y"; /* there was an error on the screen*/
    PK0GM001.XXXERRID = "PK0G121";
  end

  PK0G906(); /* close cursor*/
end // end PK0G121

// validate carton cls ccdim
Function PK0G122()
   /* ************************************************************/
   /* *  validate and or get carton-class-dim*/
   /* ************************************************************/
  set PKKREC empty;
  PKKREC.PKKBXCCD = PK0GM001.PK0GMCLS[PK0GWCT1];
  PKKREC.XXXSTAT = "A";
  call "IO4560" ("S ", SQLCA, PKKREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != +0
   && SQLCA.VAGen_SQLCODE != +100
   && SQLCA.VAGen_SQLCODE != -911)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "PK04050 ";
    TA1REC.TA1LOCAT[1] = "IO4560  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "UNIQUE  ";
    TA1REC.TA1DBASE = "DPICK   ";
    TA1REC.TA1TBLVU = "VCCDIM01";
    TA1REC.TA1TBLKE = PKKREC.PKKKEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
    exit program;
  end

end // end PK0G122

// process screen m001 entries
Function PK0G130()
   /* ************************************************************/
   /* *  process screen entries*/
   /* **/
   /* ************************************************************/


  if (converseVar.eventKey is pf12)
    if (PK0GW01.PK0GWFST == "Y") /* if first time thru*/
      PK0GW01.PK0GWBLA = "Y"; /* need to build array*/
    else
      PK0GW01.PK0GWBLA = "N";
                                   /* don't wipe out changes to data*/
    end
    PK0GW01.PK0GWUPD = "N"; /* update database*/
    PK0G137(); /* propagate sizes forward*/
  else
    if (PK0GM001.PK0GMACT == "D")
      PK0GW01.PK0GWBLA = "N";
                                   /* don't wipe out changes to data*/
      PK0GW01.PK0GWUPD = "Y"; /* update database*/
    else
      if (PK0GM001.PK0GMACT == "C")
        PK0GW01.PK0GWBLA = "N";
                                   /* don't wipe out changes to data*/
        PK0GW01.PK0GWUPD = "Y"; /* update database*/
        PK0G137(); /* propagate sizes forward*/
      else /* pk0gmact is blank*/
        if (PK0GM001.PK0GMACT == " "
         || PK0GM001.PK0GMACT == "I")
          PK0GW01.PK0GWBLA = "Y"; /* need to build array*/
          PK0GW01.PK0GWUPD = "N"; /* update database*/
          PK0G137(); /* propagate sizes forward*/
        else /* pk0gmact is blank*/
          if (PK0GM001.PK0GMACT == "A")
            if (PK0GW01.PK0GWCFF == "Y" /* if data in copy from fields*/
             && PK0GW01.PK0GWFST == "Y")
              PK0G101();
              PK0G107(); /* put sizes on screen*/
              PK0GW01.PK0GWBLA = "N"; /* don't wipe out changes*/
              PK0GW01.PK0GWUPD = "N"; /* update database*/
            else
              PK0GW01.PK0GWBLA = "N"; /* build new array*/
              PK0GW01.PK0GWUPD = "Y"; /* don't update database*/
              PK0G138(); /* find valid sizes*/
              PK0G137(); /* propagate sizes forward*/
            end
          end
        end
      end
    end
  end


  PK0GW01.PK0GMACT = PK0GM001.PK0GMACT; /* save for use in pk0g105*/
  PK0GW02.XGPCD = PK0GM001.XGPCD;
  PK0GW02.SY1STNBR = PK0GM001.SY1STNBR;
  PK0GW02.SY2CLRID = PK0GM001.SY2CLRID;
  PK0GW02.XDMCD = PK0GM001.XDMCD;
  PK0GW02.XUMCD = PK0GM001.XUMCD;
  PK0GW02.XPGCD = PK0GM001.XPGCD;
end // end PK0G130

// propagate entries
Function PK0G137()
   /* ************************************************************/
   /* *  propagate class and length forward*/
   /* ************************************************************/


  PK0GW01.PK0GWCT1 = 1;

  PK0GW01.PKCCRTCL = " ";
  PK0GW01.PK0GWRTN = "N";

   /* while there are valid sizes:*/
   /* if the user blanks out a class and hits enter, then the*/
   /* following classes are blanked out until there is a*/
   /* change of class. it stops there.*/

  while (PK0GW01.PK0GWCT1 <= PK0GW01.PK0GWLSX
   && PK0GW01.PK0GWCT1 <= 40)

    if (PK0GM001.PK0GMCLS[PK0GWCT1] == " "
     && PK0GW02.PKCCRTCL[PK0GWCT1] != " ")

      PK0GW01.PKCCRTCL = PK0GW02.PKCCRTCL[PK0GWCT1];
      PK0GW02.PKCCRTCL[PK0GWCT1] = " ";
      PK0GW01.PK0GWRTN = "Y"; /* do ezertn when thru*/

      PK0GW01.PK0GWCT1 = PK0GW01.PK0GWCT1 + 1;
      while (PK0GW02.PKCCRTCL[PK0GWCT1] == PK0GW01.PKCCRTCL
       && PK0GM001.PK0GMCLS[PK0GWCT1] == PK0GW01.PKCCRTCL
       && PK0GW01.PK0GWCT1 <= PK0GW01.PK0GWLSX)

        PK0GW02.PKCCRTCL[PK0GWCT1] = " ";
        PK0GM001.PK0GMCLS[PK0GWCT1] = " ";
        PK0GW01.PK0GWCT1 = PK0GW01.PK0GWCT1 + 1;
      end

    else
      PK0GW01.PK0GWCT1 = PK0GW01.PK0GWCT1 + 1;
    end
  end


    /* move values from screen to array*/

  PK0GW01.PK0GWCT1 = 1;

  while (PK0GW01.PK0GWCT1 <= PK0GW01.PK0GWLSX
   && PK0GW01.PK0GWCT1 <= 40)

    if (PK0GM001.PK0GMLEN[PK0GWCT1] == 0
     && PK0GW02.PKCCRTLN[PK0GWCT1] != 0)
      PK0GW01.PK0GWRTN = "Y"; /* dont want to overwrite values which*/
       /* is done next*/
    end

    PK0GW02.PKCCRTCL[PK0GWCT1] = PK0GM001.PK0GMCLS[PK0GWCT1];
    PK0GW02.PKCCRTLN[PK0GWCT1] = PK0GM001.PK0GMLEN[PK0GWCT1];

    PK0GW01.PK0GWCT1 = PK0GW01.PK0GWCT1 + 1;
  end

  if (PK0GW01.PK0GWRTN == "Y")
    return;
  end

    /* move values from previous fields into the following fields*/

  PK0GW01.PK0GWCT1 = 1;

  while (PK0GW01.PK0GWCT1 <= PK0GW01.PK0GWLSX
   && PK0GW01.PK0GWCT1 <= 40)
    if (PK0GW01.PK0GWCT1 == 1) /* if looking at first entry on screen*/
      PK0GW01.PK0GWCT2 = 0;
      PK0GW01.PK0GWCT1 = PK0GW01.PK0GWCT1 + 1;
      PK0GW01.PK0GWCT2 = PK0GW01.PK0GWCT2 + 1;
    else

       /* if the field is blank, move in the value from*/
       /* the previous field*/

      if (PK0GM001.PK0GMCLS[PK0GWCT1] == " ")
        PK0GM001.PK0GMCLS[PK0GWCT1] = PK0GM001.PK0GMCLS[PK0GWCT2];
        PK0GW02.PKCCRTCL[PK0GWCT1] = PK0GM001.PK0GMCLS[PK0GWCT2];
      end
      if (PK0GM001.PK0GMLEN[PK0GWCT1] == 0)
        PK0GM001.PK0GMLEN[PK0GWCT1] = PK0GM001.PK0GMLEN[PK0GWCT2];
        PK0GW02.PKCCRTLN[PK0GWCT1] = PK0GM001.PK0GMLEN[PK0GWCT2];
      end

      PK0GW01.PK0GWCT1 = PK0GW01.PK0GWCT1 + 1;
      PK0GW01.PK0GWCT2 = PK0GW01.PK0GWCT2 + 1;

    end
  end

end // end PK0G137

// build array for m001
Function PK0G138()
   /* ************************************************************/
   /* *      this processes the array for pk0gm001*/
   /* ************************************************************/


  set PK0GW02 empty;
  set SYPREC empty;
  SYPREC.SYPFC = "PC"; /* translator function code*/
  SYPREC.SYPCMPSW = "C"; /* non compressed data*/
  SYPREC.XQACD = "**"; /* accept all qualities*/

   /* need valid sizes for header data only*/

  SYPREC.XGPCD = PK0GM001.XGPCD;
  SYPREC.SY1STNBR = PK0GM001.SY1STNBR;
  SYPREC.SY2CLRID = PK0GM001.SY2CLRID;
  SYPREC.XDMCD = PK0GM001.XDMCD;

  PK0G903(); /* get valid sizes*/
  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* ************************************************************/
   /* *  move valid sizes to array*/


  PK0GW01.PK0GWSZX = 1;

  while (SYPREC.SY5SZID[PK0GWSZX] != 0) /* for all valid sizes*/

    PK0GW02.SY5SZID[PK0GWSZX] = SYPREC.SY5SZID[PK0GWSZX];
    PK0GW02.SY4IDDSC[PK0GWSZX] = SYPREC.SY4IDDSC[PK0GWSZX];
    PK0GM001.PK0GMSIZ[PK0GWSZX] = SYPREC.SY4IDDSC[PK0GWSZX];
    set PK0GM001.PK0GMCLS[PK0GWSZX] normal;
    set PK0GM001.PK0GMLEN[PK0GWSZX] normal;

    PK0GW01.PK0GWSZX = PK0GW01.PK0GWSZX + 1;

  end


  PK0GW01.PK0GWLSX = PK0GW01.PK0GWSZX - 1; /* true nbr of entries in array*/

  while (PK0GW01.PK0GWSZX <= 40) /* for the rest of the sizes*/
     /* clear out any entries in non-valid sizes*/

    PK0GM001.PK0GMSIZ[PK0GWSZX] = " ";
    PK0GM001.PK0GMCLS[PK0GWSZX] = " ";
    PK0GM001.PK0GMLEN[PK0GWSZX] = 0;
    set PK0GM001.PK0GMCLS[PK0GWSZX] skip;
    set PK0GM001.PK0GMLEN[PK0GWSZX] skip;

    PK0GW01.PK0GWSZX = PK0GW01.PK0GWSZX + 1;
  end
end // end PK0G138

// update database
Function PK0G140()
   /* ************************************************************/
   /* *  validate action field and record status*/
   /* *  update database*/
   /* ************************************************************/
  set PKCREC empty;
  PKCREC.ZZZCHGCT = PK0GW02.ZZZCHGCT;
  PKCREC.XWHCD = PK0GM001.XWHCD;
  PKCREC.XGPCD = PK0GM001.XGPCD;
  PKCREC.SY1STNBR = PK0GM001.SY1STNBR;
  PKCREC.SY2CLRID = PK0GM001.SY2CLRID;
  PKCREC.XDMCD = PK0GM001.XDMCD;
  PKCREC.XUMCD = PK0GM001.XUMCD;
  PKCREC.XPGCD = PK0GM001.XPGCD;

  PK0G902(); /* inquire on record*/
  if (converseVar.validationMsgNum != 0)
    PK0GW01.PK0GWSUP = "N"; /* update wasn't successful*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 0
   && PK0GM001.PK0GMACT == "A"
   && PKCREC.XXXSTAT != "I")
    PK0GW01.PK0GWSUP = "N"; /* update wasn't successful*/
    converseLib.validationFailed(44); /* record to be added already exists*/
    PK0GM001.XXXERRID = "PK0G140";
    PK0GW01.PK0GWERR = "Y";
    PK0GS31(); /* clear screen*/
    PK0GS30(); /* clear array*/
    set PK0GM001.XWHCD cursor, bold;
    set PK0GM001.SY1STNBR bold;
    set PK0GM001.SY2CLRID bold;
    set PK0GM001.XGPCD bold;
    set PK0GM001.XDMCD bold;
    set PK0GM001.XUMCD bold;
    set PK0GM001.XPGCD bold;
    return;
  else
    set PK0GM001.XWHCD normal;
    set PK0GM001.SY1STNBR normal;
    set PK0GM001.SY2CLRID normal;
    set PK0GM001.XGPCD normal;
    set PK0GM001.XDMCD normal;
    set PK0GM001.XUMCD normal;
    set PK0GM001.XPGCD normal;
  end

  if (SQLCA.VAGen_SQLCODE == 0
   && PK0GM001.PK0GMACT == "C"
   && PKCREC.XXXSTAT == "I")
    PK0GW01.PK0GWSUP = "N"; /* update wasn't successful*/
    converseLib.validationFailed(8); /* no record was found*/
    PK0GM001.XXXERRID = "PK0G142";
    PK0GW01.PK0GWERR = "Y";
    return;
  end


   /* make sure all valid sizes have carton class and length*/

  if (PK0GW01.PK0GWLSX == 0)
    PK0GW01.PK0GWSZX = 1;
  else
    PK0GW01.PK0GWSZX = PK0GW01.PK0GWLSX; /* start at bottom of screen*/
  end

  if (PK0GM001.PK0GMACT == "D")
     /* next sentence - don't care if fields have data*/
  else
    while (PK0GW01.PK0GWSZX >= 1)
      if (PK0GW02.PKCCRTCL[PK0GWSZX] == " ")
        converseLib.validationFailed(78); /* carton class must be entered on all*/
         /* valid sizes*/
        set PK0GM001.PK0GMCLS[PK0GWSZX] cursor, bold;
        PK0GM001.XXXERRID = "PK0G140";
      else
        set PK0GM001.PK0GMCLS[PK0GWSZX] initialAttributes;
        if (PK0GW02.PKCCRTLN[PK0GWSZX] == 0)
          PK0G142();
          if (SQLCA.VAGen_SQLCODE != 0)
            converseLib.validationFailed(79); /* length must be entered on all*/
             /* valid sizes*/
            set PK0GM001.PK0GMLEN[PK0GWSZX] cursor, bold;
            PK0GM001.XXXERRID = "PK0G140";
          else
            set PK0GM001.PK0GMLEN[PK0GWSZX] normal;
          end
        end
      end
      PK0GW01.PK0GWSZX = PK0GW01.PK0GWSZX - 1;
    end
  end

  if (converseVar.validationMsgNum != 0) /* if not all valid sizes have data*/
    return;
  end


   /* before changing the record make sure data was changed*/
    /* to save unneccessary updates*/


  if (PK0GM001.PK0GMACT == "C")
    PK0GW01.PK0GWCT1 = 1;
    PK0GW01.PK0GWCT2 = 0;

    while (PK0GW01.PK0GWCT1 <= PK0GW01.PK0GWLSX
     && PK0GW01.PK0GWCT2 < 1)
      if (PK0GM001.PK0GMCLS[PK0GWCT1] is modified
       || PK0GM001.PK0GMLEN[PK0GWCT1] is modified)
        PK0GW01.PK0GWCT2 = 1;
      end
      PK0GW01.PK0GWCT1 = PK0GW01.PK0GWCT1 + 1;
    end
    if (PK0GW01.PK0GWCT2 == 0)
      converseLib.validationFailed(119); /* record was not changed, no update*/
                                   /* done*/
      return;
    end

  end


   /* get the current date and time for the database update*/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    PKCREC.ZZZCHGTM = TA2REC.TA2TIMHM;
    PKCREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  else
    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PK0GW01.PK0GWERR = "Y"; /* there was an error*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TA0040 "; /* Process name*/
    TA1REC.TA1LOC = "GETTING CURRENT DATE/TIME";
    TA1REC.TA1MAP = "PK0GM001"; /* Map name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0GM001.XXXERRID = "PK0G140 "; /* Error location*/
    return; /* Return to previous process*/

  end

   /* process the action field from the screen*/


  if (PK0GM001.PK0GMACT == "D")
    PK0G144(); /* inactivate the record*/
  else
    PK0G146(); /* delete then add the record if needed*/
  end

  if (converseVar.validationMsgNum == 0) /* if no errors on the db2 calls*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* commit the changes to the database*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* undo the changes to the database*/
  end
end // end PK0G140

// validate carton cls ccdim
Function PK0G142()
   /* ************************************************************/
   /* *  validate and or get carton-class-dim*/
   /* ************************************************************/
  set PKKREC empty;
  PKKREC.PKKBXCCD = PK0GM001.PK0GMCLS[PK0GWSZX];
  PKKREC.XXXSTAT = "A";
  call "IO4560" ("S ", SQLCA, PKKREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != +0
   && SQLCA.VAGen_SQLCODE != +100
   && SQLCA.VAGen_SQLCODE != -911)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "PK04050 ";
    TA1REC.TA1LOCAT[1] = "IO4560  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "UNIQUE  ";
    TA1REC.TA1DBASE = "DPICK   ";
    TA1REC.TA1TBLVU = "VCCDIM01";
    TA1REC.TA1TBLKE = PKKREC.PKKKEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
    exit program;
  end

end // end PK0G142

// inactivate the product carton
Function PK0G144()
   /* ************************************************************/
   /* *  inactivate the record*/
   /* **/
   /* ************************************************************/

   /* if dimension and/or color are left blank, many records may*/
   /* be deleted*/


  if (PKCREC.XDMCD == " ")
    PKCREC.XDMCD = "*";
  end
  if (PKCREC.SY2CLRID == " ")
    PKCREC.SY2CLRID = "*";
  end

  PK0G910(); /* select set of pick product carton records*/
  if (converseVar.validationMsgNum != 0)
    PK0G912(); /* close set*/
    return;
  end

  PK0GW01.PK0GWCT1 = 0;
  PK0GW01.PK0GWSUP = "Y"; /* init successful update flag*/

  while (SQLCA.VAGen_SQLCODE == 0)

    PK0G911(); /* select next record*/
    if (converseVar.validationMsgNum != 0)
      PK0G912(); /* close set*/
      PK0GW01.PK0GWSUP = "N"; /* updates weren't successful*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 0)

      PK0GW01.PK0GWCT1 = PK0GW01.PK0GWCT1 + 1;
      PKCREC.XXXSTAT = "I"; /* inactivate record*/

      PK0G908(); /* update the record*/
      if (converseVar.validationMsgNum != 0)
        PK0G912(); /* close set*/
        PK0GW01.PK0GWSUP = "N"; /* updates weren't successful*/
        return;
      end
    end

  end


  if (PK0GW01.PK0GWCT1 == 0) /* no records found*/
    converseLib.validationFailed(8); /* no record found*/
    PK0GW01.PK0GWSUP = "N"; /* updates weren't successful*/
    PK0GW01.PK0GWERR = "Y";
    PK0GM001.XXXERRID = "PK0G144";
  end

  PK0G912(); /* close set*/
  if (converseVar.validationMsgNum != 0)
    return;
    PK0GW01.PK0GWSUP = "N"; /* updates weren't successful*/
  end
end // end PK0G144

// delete/add record
Function PK0G146()
   /* ************************************************************/
   /* *  if there is a record out there, delete it, then add a*/
   /* *  new one*/
   /* ************************************************************/

  PK0GW01.PK0GWSUP = "Y"; /* init successful update flag*/

  PK0G907(); /* delete the record*/
  if (converseVar.validationMsgNum != 0)
    PK0GW01.PK0GWSUP = "N"; /* update wasn't successful*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    return;
  end



   /* clear out all existing classes and lengths*/

  PK0GW01.PK0GWCT1 = 1;

  while (PK0GW01.PK0GWCT1 <= 40)
    PKCREC.PKCCRTCL[PK0GWCT1] = " ";
    PKCREC.PKCCRTLN[PK0GWCT1] = 0;
    PK0GW01.PK0GWCT1 = PK0GW01.PK0GWCT1 + 1;
  end


   /* move all valid sizes to record*/

  PK0GW01.PK0GWCT1 = 1;

  while (PK0GW01.PK0GWCT1 <= 40) /* check all sizes*/
    if (PK0GW02.SY5SZID[PK0GWCT1] != 0) /* for all valid sizes*/

      PK0GW01.PK0GWSZX = PK0GW02.SY5SZID[PK0GWCT1];
      PKCREC.PKCCRTCL[PK0GWSZX] = PK0GW02.PKCCRTCL[PK0GWCT1];
      PKCREC.PKCCRTLN[PK0GWSZX] = PK0GW02.PKCCRTLN[PK0GWCT1];

    end
    PK0GW01.PK0GWCT1 = PK0GW01.PK0GWCT1 + 1;

  end



  PKCREC.XXXSTAT = "A"; /* the record is active*/

  PK0G909(); /* add the record*/
  if (converseVar.validationMsgNum != 0)
    PK0GW01.PK0GWSUP = "N"; /* update wasn't successful*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    return;
  end
end // end PK0G146

// select unique from pk style
Function PK0G901()
   /* *************************************************************/
   /* Fetch the selected record from picking for total weight*/
   /* If end of file, get out*/
   /* If any error, indicate a system error.*/
   /* *************************************************************/


  call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
  )                           
      /* CANADA 08/11/95*/

    if (PKWREC.XCTCD == "CANA")

        /* format ta1rec in case of bad return code from call to SY2000*/

      TA1REC.TA1PGMNM = "PK0G"; /* CANA program name*/
      TA1REC.TA1LOC = "PK0G901"; /* CANA sgrp name*/

      XSPK-CALL-SY2000(); /* CANA call SY2000 to get*/
                                /* product region record*/
      if (WSY2000.WSY2000-RETURN-CODE == 0) /* CANA row found*/
        return;
      else
        if (WSY2000.WSY2000-RETURN-CODE == 02) /* CANA row not found*/
          PKNREC.SY1SSTNM = " ";
          return;
        else
          if (WSY2000.WSY2000-RETURN-CODE == 98) /* CANA database busy*/
            converseLib.validationFailed(28); /* Indicate not available*/
            TA1REC.TA1FUNC = "POST"; /* Termination function*/
          else
            converseLib.validationFailed(29); /* Indicate system error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          end
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1LOC = "CALL SY2000";
          TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program appl*/
          TA1REC.TA1PGMNM = "PK0G901"; /* Program number*/
          TA1REC.TA1MAP = "PK0GM001"; /* Map name*/
          TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
          TA1REC.TA1TBLVU = "VSYREG02"; /* Table view name*/
          TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/

                                  /* Error diagnosis routine*/
          call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

          PK0GM001.XXXERRID = "PK0G901 "; /* Error location*/

        end
      end
    end
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* data was in use by another appl*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0G901 "; /* Process name*/
    TA1REC.TA1LOC = "SELECT STYLE FROM PICKING";
    TA1REC.TA1MAP = "PK0GM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPKSTY01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0GM001.XXXERRID = "PK0C901 "; /* Error location*/
    return; /* Return to previous process*/

  end
end // end PK0G901

// select unique from pk ctn cont
Function PK0G902()
   /* *************************************************************/
   /* Fetch the selected record from picking for carton content*/
   /* If end of file, get out*/
   /* If any error, indicate a system error.*/
   /* *************************************************************/


  call "IO1970" ("S ", SQLCA, PKCREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* no record found*/

    return; /* return to previous application*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* data was in use by another appl*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      PK0GW01.PK0GWERR = "Y"; /* there was an error*/

    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      PK0GW01.PK0GWERR = "Y"; /* there was an error*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C902 "; /* Process name*/
    TA1REC.TA1LOC = "SELECT CONTENT FROM PICKING";
    TA1REC.TA1MAP = "PK0GM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPCART01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKCREC.PKCKEY; /* table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0GM001.XXXERRID = "PK0C902 "; /* Error location*/
    return; /* Return to previous process*/

  end
end // end PK0G902

// select valid sizes with sy1190
Function PK0G903()
   /* *************************************************************/
   /* select valid sizes using dpick.vpkscl01 and dpick.vpksty01*/
   /* If end of file, get out*/
   /* If any error, indicate a system error.*/
   /* *************************************************************/


  call "SY1190" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes}; /* select the available sizes*/

  if (SYPREC.SYPRC == 10 /* size row not found*/
   || SYPREC.SYPRC == 11 /* style row not found*/
   || SYPREC.SYPRC == 16) /* scale row not found*/
    set PK0GM001.XWHCD bold;
    set PK0GM001.XGPCD cursor, bold;
    set PK0GM001.SY1STNBR bold;
    set PK0GM001.SY2CLRID bold;
    set PK0GM001.XDMCD bold;
    set PK0GM001.XUMCD bold;
    set PK0GM001.XPGCD bold;
    PK0GS31(); /* clear screen*/
    if (PK0GW01.PK0GWCFF == "Y")
      converseLib.validationFailed(121); /* copy to product not found on style table*/
    else
      converseLib.validationFailed(122); /* product not found on style table*/
    end
    PK0GM001.XXXERRID = "PK0G903";
    PK0GW01.PK0GWERR = "Y"; /* there was error on screen*/
    return;
  end

  if (SYPREC.SYPRC == 9 /* signify db2 problems*/
   || SYPREC.SYPRC == 99)

    if (SYPREC.SYPRC == 9) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      PK0GW01.PK0GWERR = "Y"; /* there was error on screen*/

    else
      if (SYPREC.SYPRC == 99) /* Unexpected return code*/

        converseLib.validationFailed(29); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        PK0GW01.PK0GWERR = "Y"; /* there was error on screen*/

      end
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C903 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN SIZE SCALE FOR PRODUCTS";
    TA1REC.TA1MAP = "PK0GM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "SY1190  "; /* Table view name*/
    TA1REC.TA1TBLKE = SYPREC.SYPDATA; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0GM001.XXXERRID = "PK0C903"; /* Error location*/
    return; /* Return to previous process*/

  end

end // end PK0G903

// select set for carton class
Function PK0G904()
   /* ************************************************************/
   /* *   select set on pkorec*/
   /* ************************************************************/

  call "IO1960" ("S1", SQLCA, PKOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/


  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      PK0GW01.PK0GWERR = "Y"; /* there was an error*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      PK0GW01.PK0GWERR = "Y"; /* there was an error*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0G904 "; /* Process name*/
    TA1REC.TA1LOC = "VALIDATE CARTON CLASS";
    TA1REC.TA1MAP = "PK0GM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCARTD01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKOREC.PKOKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0GM001.XXXERRID = "PK0G904"; /* Error location*/
    return; /* Return to previous process*/

  end

end // end PK0G904

// select next for carton class
Function PK0G905()
   /* ************************************************************/
   /* *   fetch next record on pkorec*/
   /* ************************************************************/

  call "IO1960" ("N1", SQLCA, PKOREC) {isNoRefresh = yes, isExternal = yes}; /* fetch next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0G905 "; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT CARTON CLASS";
    TA1REC.TA1MAP = "PK0GM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPCARTD1"; /* Table view name*/
    TA1REC.TA1TBLKE = PKOREC.PKOKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0GM001.XXXERRID = "PK0G905"; /* Error location*/
    return; /* Return to previous process*/

  end

end // end PK0G905

// close set for carton class
Function PK0G906()
   /* ************************************************************/
   /* *   close cursor for pkorec*/
   /* ************************************************************/

  call "IO1960" ("C1", SQLCA, PKOREC) {isNoRefresh = yes, isExternal = yes}; /* close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0G906 "; /* Process name*/
    TA1REC.TA1LOC = "VALIDATE CARTON CLASS";
    TA1REC.TA1MAP = "PK0GM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCARTD01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKOREC.PKOKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0GM001.XXXERRID = "PK0G906"; /* Error location*/
    return; /* Return to previous process*/

  end
end // end PK0G906

// select unique from pk ctn cont
Function PK0G907()
   /* *************************************************************/
   /* delete the selected record from picking for carton content*/
   /* If end of file, get out*/
   /* If any error, indicate a system error.*/
   /* *************************************************************/


  call "IO1970" ("D ", SQLCA, PKCREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* no record found*/

    return; /* return to previous application*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* data was in use by another appl*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      PK0GW01.PK0GWERR = "Y"; /* there was an error*/

    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      PK0GW01.PK0GWERR = "Y"; /* there was an error*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C907 "; /* Process name*/
    TA1REC.TA1LOC = "DELETE CONTENT FROM PICKING";
    TA1REC.TA1MAP = "PK0GM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPCART01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKCREC.PKCKEY; /* table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0GM001.XXXERRID = "PK0C907 "; /* Error location*/
    return; /* Return to previous process*/

  end
end // end PK0G907

// update unique from pk ctn cont
Function PK0G908()
   /* *************************************************************/
   /* update the selected record from picking for carton content*/
   /* If end of file, get out*/
   /* If any error, indicate a system error.*/
   /* *************************************************************/


  call "IO1970" ("U ", SQLCA, PKCREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* no record found*/

    return; /* return to previous application*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* data was in use by another appl*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      PK0GW01.PK0GWERR = "Y"; /* there was an error*/

    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      PK0GW01.PK0GWERR = "Y"; /* there was an error*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C908 "; /* Process name*/
    TA1REC.TA1LOC = "DELETE CONTENT FROM PICKING";
    TA1REC.TA1MAP = "PK0GM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPCART01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKCREC.PKCKEY; /* table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0GM001.XXXERRID = "PK0C908 "; /* Error location*/
    return; /* Return to previous process*/

  end
end // end PK0G908

// add record to  pk ctn cont
Function PK0G909()
   /* *************************************************************/
   /* add the selected record from picking for carton content*/
   /* If end of file, get out*/
   /* If any error, indicate a system error.*/
   /* *************************************************************/


  call "IO1970" ("A ", SQLCA, PKCREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* no record found*/

    return; /* return to previous application*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* data was in use by another appl*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      PK0GW01.PK0GWERR = "Y"; /* there was an error*/

    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      PK0GW01.PK0GWERR = "Y"; /* there was an error*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C909 "; /* Process name*/
    TA1REC.TA1LOC = "ADD CONTENT TO PICKING";
    TA1REC.TA1MAP = "PK0GM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPCART01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKCREC.PKCKEY; /* table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0GM001.XXXERRID = "PK0C909 "; /* Error location*/
    return; /* Return to previous process*/

  end
end // end PK0G909

// select set for pick prod cart
Function PK0G910()
   /* ************************************************************/
   /* *   select set on pkcrec*/
   /* ************************************************************/

  call "IO1970" ("S1", SQLCA, PKCREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/


  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      PK0GW01.PK0GWERR = "Y"; /* there was an error*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0G910 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN CONTENT FOR CARTONS";
    TA1REC.TA1MAP = "PK0GM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPCART01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKCREC.PKCKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0GM001.XXXERRID = "PK0G910"; /* Error location*/
    return; /* Return to previous process*/

  end

end // end PK0G910

// select next for pick carton
Function PK0G911()
   /* ************************************************************/
   /* *   fetch next record on pkcrec*/
   /* ************************************************************/

  call "IO1970" ("N1", SQLCA, PKCREC) {isNoRefresh = yes, isExternal = yes}; /* fetch next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0G911 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN CONTENT FOR CARTONS";
    TA1REC.TA1MAP = "PK0GM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPCART01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKCREC.PKCKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0GM001.XXXERRID = "PK0G911"; /* Error location*/
    return; /* Return to previous process*/

  end

end // end PK0G911

// close set for picking header
Function PK0G912()
   /* ************************************************************/
   /* *   close cursor for pkcrec*/
   /* ************************************************************/

  call "IO1970" ("C1", SQLCA, PKCREC) {isNoRefresh = yes, isExternal = yes}; /* close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0G912 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN CONTENT FOR CARTONS";
    TA1REC.TA1MAP = "PK0GM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPCART01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKCREC.PKCKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0GM001.XXXERRID = "PK0G912"; /* Error location*/
    return; /* Return to previous process*/

  end
end // end PK0G912

// clear array
Function PK0GS30()
   /* *********************************************/
   /* clear array*/
   /* *********************************************/

  PK0GW01.PK0GWSZX = 1;

  while (PK0GW01.PK0GWSZX <= 40)
    PK0GW02.SY4IDDSC[PK0GWSZX] = " ";
    PK0GW02.SY5SZID[PK0GWSZX] = 0;
    PK0GW02.PKCCRTCL[PK0GWSZX] = " ";
    PK0GW02.PKCCRTLN[PK0GWSZX] = 0;
    PK0GW01.PK0GWSZX = PK0GW01.PK0GWSZX + 1;
  end
end // end PK0GS30

// clear screen
Function PK0GS31()
   /* *********************************************/
   /* clear screen*/
   /* *********************************************/

  PK0GW01.PK0GWSZX = 1;

  while (PK0GW01.PK0GWSZX <= 40)
    PK0GM001.PK0GMSIZ[PK0GWSZX] = " ";
    PK0GM001.PK0GMCLS[PK0GWSZX] = " ";
    PK0GM001.PK0GMLEN[PK0GWSZX] = 0;
    set PK0GM001.PK0GMCLS[PK0GWSZX] normal;
    set PK0GM001.PK0GMLEN[PK0GWSZX] normal;
    PK0GW01.PK0GWSZX = PK0GW01.PK0GWSZX + 1;
  end
end // end PK0GS31

//*** RECORD=PK0GW01 ****
// flags and such used in the program
// ***********************
Record PK0GW01 type basicRecord
  10 PK0GWCT1 PK0GWCT1 ; 
  10 PK0GWCT2 PK0GWCT2 ; 
  10 XWHCD XWHCD ; 
  10 PK0GMXWH PK0GMXWH ; 
  10 XWHABRV XWHABRV ; 
  10 PKCCRTCL PKCCRTCL ; 
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XUMCD XUMCD ; 
  10 XPGCD XPGCD ; 
  10 PK0GWSIZ PK0GWSIZ ; 
  10 PK0GMACT PK0GMACT ; 
  10 PK0GWFST PK0GWFST ; 
  10 PK0GWCFF PK0GWCFF ; 
  10 PK0GWEOA PK0GWEOA ; 
  10 PK0GWEOS PK0GWEOS ; 
  10 PK0GWKEY PK0GWKEY ; 
  10 PK0GWERR PK0GWERR ; 
  10 PK0GWUPD PK0GWUPD ; 
  10 PK0GWSUP PK0GWSUP ; 
  10 PK0GWRTN PK0GWRTN ; 
  10 PK0GWSCI PK0GWSCI ; 
    15 PK0GWMAR PK0GWMAR ; 
    15 PK0GWSCN PK0GWSCN ; 
    15 PK0GWA1X PK0GWA1X ; 
    15 PK0GWLSX PK0GWLSX ; 
    15 PK0GWBLS PK0GWBLS ; 
    15 PK0GWBLA PK0GWBLA ; 
  10 PK0GWCSC PK0GWCSC ; 
  10 PK0GWARX PK0GWARX ; 
  10 PK0GWSZX PK0GWSZX ; 
  10 PK0GWSCX PK0GWSCX ; 
end // end PK0GW01

//*** RECORD=PK0GW02 ****
// array to hold database information
// ***********************
Record PK0GW02 type basicRecord
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XUMCD XUMCD ; 
  10 XPGCD XPGCD ; 
  10 ZZZCHGCT ZZZCHGCT ; 
  10 PK0GW2GR PK0GW2GR [40] ; 
    15 SY5SZID SY5SZID ; 
    15 SY4IDDSC SY4IDDSC ; 
    15 PKCCRTCL PKCCRTCL ; 
    15 PKCCRTLN PKCCRTLN ; 
end // end PK0GW02

DataItem PK0GMACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse code for map
DataItem PK0GMXWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level for pk0gw02
DataItem PK0GW2GR char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st array row for assoc map
DataItem PK0GWA1X smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// array index
DataItem PK0GWARX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// build array from database (y/n
DataItem PK0GWBLA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// build screen (y/n)
DataItem PK0GWBLS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// copy from field entered y/n
DataItem PK0GWCFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// name of current screen
DataItem PK0GWCSC char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// counter
DataItem PK0GWCT1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// counter
DataItem PK0GWCT2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end-of-application flag (y/n)
DataItem PK0GWEOA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end-of-screen flag (y/n)
DataItem PK0GWEOS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// have map error (y/n)
DataItem PK0GWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time thru flag (y/n)
DataItem PK0GWFST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// which pf key was used
DataItem PK0GWKEY char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last filled array row
DataItem PK0GWLSX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max size for array
DataItem PK0GWMAR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need to ezertn (y/n)
DataItem PK0GWRTN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen-information-array
DataItem PK0GWSCI char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen name
DataItem PK0GWSCN char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen pointer
DataItem PK0GWSCX num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size id
DataItem PK0GWSIZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// was update successful (y/n)
DataItem PK0GWSUP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size index
DataItem PK0GWSZX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// is it okay to update db (y/n)
DataItem PK0GWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

