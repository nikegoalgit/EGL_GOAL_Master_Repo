package pk06;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sr.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import ww.common.*;
//*** PROGRAM=PK06 ****
// ** * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// 
// auto hold release
// 
// 
// maintance history
// -----------------
//   date   name    reason
// -------- ----    -----------------------------------------
// 08/01/89 jcampb  created
// 08/31/89 jcampb  fix auto hold function.
// 01/31/90 mwalto  fix auto hold function when using pf8, &
//                  fix regular release and change functions
// 02/27/90 jcampb  post error when pool rec on hold and not
//                  found in dpick.vorhld01
// 03/05/91 SBEAUC  Change PKAREC access to corp table - also
//                  chg refer'cs from PKA- to XHR- items for
//                  table changes.
// 04/09/91 jcampb  remove pk8rec from records as not used
//                  table changes.
// 06/22/92 MWALTO  remove pk3rec from records as not used
// 08/14/95 CBRINE  modified to call SY2000 (PK06260). Added
//                  XCTCD to PKWREC.
// 02/28/98 DBETTR  Y2KFIX
//                  PROCEDURES MODIFIED TO MAKE PROGRAM Y2K
//                  COMPLIANT.
//                  PK06030, PK06220, PK06265,PK06310, PK06320
//                  PK06355, PK06365, PK06500,PK06510, PK06610
//                  PK06700
// 12/14/99 VALAPA  Y2KFIX, CHANGED THE VARIABLE RETURNING FROM
//                  TA0040 FROM TA2REC.TA2GRGEN TO
//                  TA2REC.TA2GRGGN IN PK06030 PROCESS GROUP
// ** * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// *********************
Program PK06 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK06W01 PK06W01; // record
  PK06W02 PK06W02; // record
  PK06W03 PK06W03; // record
  PK06W04 PK06W04; // record
  PK1REC PK1REC; // record
  PK2REC PK2REC; // record
  PK4REC PK4REC; // record
  PK5REC PK5REC; // record
  PK6REC PK6REC; // record
  PK7REC PK7REC; // record
  PK9REC PK9REC; // record
  PKBREC PKBREC; // record
  PKCREC PKCREC; // record
  PKDREC PKDREC; // record
  PKHREC PKHREC; // record
  PKNREC PKNREC; // record
  PKPREC PKPREC; // record
  PKWREC PKWREC; // record
  PKXREC PKXREC; // record
  PKYREC PKYREC; // record
  PKZREC PKZREC; // record
  PWFREC PWFREC; // record
  PWIREC PWIREC; // record
  SP1REC SP1REC; // record
  SQLCA SQLCA; // record
  SRCREC SRCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA9REC TA9REC; // record
  TAEREC TAEREC; // record
  TF1REC TF1REC; // record
  WSY2000 WSY2000; // record
  XP0FW01 XP0FW01; // record
  XSPKW01 XSPKW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XNXTBL; // table
  use XOTTBL; // table
  use XSYESNO; // table
  use XWHTBL; // table
  use XBCTBL; // table
  use XHRTBL; // table
  use PK06M.PK06M100,  // forms
      PK06M.PK06M200, 
      PK06M.PK06M300
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PK06005: PK06005();
    goto PK06100;
    PK06100: PK06100();
    goto PK06100;
  end // end main
end // end PK06

// * pack hold - process startup
// * pack hold - process startup
Function PK06005()
  ;
   /* ---------------  PICKING HOLD TABLE MAINTENANCE         ----*/
   /* ---------------          main process  pk06005          ----*/
  ;
  ;
   /* ---- clear records and*/
   /* ---- set up map header information*/
  set PK06M100 initial; /* initially clear the map*/
  set PK06M300 initial; /* initially clear the map*/
  set PK06M200 initial; /* initially clear the map*/
  set PK06W01 empty; /* initially clear working storage*/
  set PK06W02 empty; /* initially clear working storage*/
  set PK06W03 empty; /* initially clear working storage*/
  set PK06W04 empty; /* initially clear working storage*/
  ;
  converseVar.segmentedMode = 1; /* run in segmented mode*/
  VGVar.handleHardIOErrors = 1; /* to trap hard errors in program*/
  converseVar.commitOnConverse = 1; /* auto commit on every map converse*/
  ;
  PK06M100.XXXRVNBR = 00; /* revision number*/
  PK06W04.PK06WMAX = 668; /* max entries for pk06w04 array*/
  PK06M100.PK06MAHD = "N"; /* auto hold*/
  PK06M100.PK06MARL = "N"; /* auto rlse*/
  PK06M100.PK06MXHD = "N"; /* exclude orders on hold*/
  PK06M100.PK06MXPL = "N"; /* exclude orders on plan*/
  PK06M100.PK06MXNP = "N"; /* exclude orders not on plan*/
  PK06W01.PK06WERS = "N";
  ;
  XPPK001(); /* appl init*/
  ;
  if (sysVar.arrayIndex != 0) /* set in xppk002*/
    PK06M100.XWHCD = XWHTBL.XWHCD[sysVar.arrayIndex];
    PK06M100.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end
  ;
  PK06020(); /* load valid hold rsn codes*/
  ;
   /* ---- unconditionally clear the key areas*/
  if (PKWREC.PKWINDEX > 0
   && PKWREC.PKWUSERB > " ")
    PK06W03.PK06WSCR = PKWREC.PKWUSERB;
    PKYREC.PKWARRAY = PKWREC.PKWARRAY[1];
    move PK06W03 to PK06M100 withV60Compat;
    PK06030();
    PK06W01.PK06WGET = "Y";
    PK06W01.PK06WLSC = "Y";
    PK06W01.PK06WMAP = "PK06M300";
  else
    PK06W01.PK06WMAP = "PK06M100";
    PKWREC.PKWINDEX = 0;
    PKWREC.PKWCNTRL = " ";
  end
  ;
  ;
   /* -------------  end process pk06005  --------------------*/
end // end PK06005

// load valid reason codes
Function PK06020()
  ;
   /* ---------------  pk06020   ---------------------------------*/
       /* load map and working storage with valid reason codes*/
  ;
  PK06M100.XXXERRID = "PK06020";
  ;
  ;
  ;
   /* ----- if table overflow has occured (pk06wfl4 = 'y')*/
   /* ----- from a previous execution of this module*/
   /* -----     set ezemno and get out.*/
  if (PK06W01.PK06WFL4 == "Y")
    converseLib.validationFailed(24);
    return;
  end
  ;
  ;
       /* load map until end of reason code table*/
  PK06W01.PK06WNDX = 1;
  PK06W01.PK06WFL1 = "Y";
  while (PK06W01.PK06WFL1 == "Y")
    PK06025();
  end
  ;
  ;
   /* -------------  end process pk06020  --------------------*/
end // end PK06020

// select next reason code
Function PK06025()
   /* ---------------  pk06125   ---------------------------------*/
       /* select next reason code*/
       /* load working storage*/
  ;
  PK06M100.XXXERRID = "PK06125";
  ;
  ;
  ;
   /* ---------------  load valid reason codes          ----------*/
  ;
  if (PK06W01.PK06WNDX < 191)
    if (XHRTBL.XHRCD[PK06WNDX] != "99") /* not end of table*/
      PK06W01.XHRCD[PK06WNDX] = XHRTBL.XHRCD[PK06WNDX];
      PK06W01.XHRDESC[PK06WNDX] = XHRTBL.XHRDESC[PK06WNDX];
      PK06W01.XHRABRV[PK06WNDX] = XHRTBL.XHRABRV[PK06WNDX];
    else
      PK06W01.PK06WFL1 = "N"; /* end of table*/
      PK06W01.PK06WTRR = PK06W01.PK06WNDX; /* total entries in tbl*/
      PK06W01.PK06WTRR = PK06W01.PK06WTRR - 1; /* dont count '99' entry*/
    end
  else
    PK06W01.PK06WFL1 = "N";
    PK06W01.PK06WFL4 = "Y"; /* table overflow flag*/
    converseLib.validationFailed(24); /* table overflow*/
    return;
  end
  ;
  ;
  PK06W01.PK06WNDX = PK06W01.PK06WNDX + 1; /* increment index*/
  ;
  ;
  ;
   /* -------------  end process pk06125  --------------------*/
end // end PK06025

// date edits
Function PK06030()
   /* ---------- pk06030 - validate entered dates ----------------*/
  ;
  PK06M100.XXXERRID = "PK06030";
  ;
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
   /* *   check "from" and "to" customer need dates             **/
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
  ;
   /* --> "from" date*/
  PK06W01.PK06WWD1 = 0;
  if (PK06M100.PK06MNFM != 0
   || PK06M100.PK06MNFD != 0)
    ;
    /* ======= Y2K OUT BEGIN =======*/
    ;
    /* OR PK06M100.PK06MNFY NE 0;*/
    /* MOVE EZEDTE TO PK06W01.PK06WFDA;*/
    ;
    /* ======= Y2K OUT END =======*/
    ;
     /* ====== Y2K IN  BEGIN ======*/
    ;
    PK06W01.PK06WFDT = VGVar.currentGregorianDate;
    ;
     /* ====== Y2K IN END ======*/
    ;
    PK06W01.PK06WWMM = PK06M100.PK06MNFM;
    PK06W01.PK06WWDD = PK06M100.PK06MNFD;
    PK06W01.PK06WWYY = PK06M100.PK06MNFY;
    ;
     /* ====== Y2K IN  BEGIN ======*/
    ;
    if (PK06W01.PK06WWYY < 60)
      PK06W01.PK06WWCC = 20;
    else
      PK06W01.PK06WWCC = 19;
    end
    ;
     /* ====== Y2K IN END ======*/
    ;
    set TA2REC empty;
    TA2REC.TA2GRTYP = "G"; /* date is in yymmdd format*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* convert to all greg dates*/
    TA2REC.TA2GRGG = PK06W01.PK06WWDT; /* date to be checked*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* check the date*/
    if (TA2REC.TA2RTNCD == 0000) /* date is valid*/
      PK06W01.PK06WWD1 = TA2REC.TA2GRGGN;
      PK06W01.OP1CUNDT[1] = TA2REC.TA2GRGGN;
    else
      set PK06M100.PK06MNFM cursor, bold;
      set PK06M100.PK06MNFD bold;
      set PK06M100.PK06MNFY bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(158);
      return;
    end
  else
    PK06W01.OP1CUNDT[1] = -1;
  end
  ;
   /* --> "to  " date*/
  PK06W01.PK06WWD2 = 0;
  if (PK06M100.PK06MNTM != 0
   || PK06M100.PK06MNTD != 0)
    ;
    /* ======= Y2K OUT BEGIN =======*/
    ;
    /* OR PK06M100.PK06MNTY NE 0;*/
    /* MOVE EZEDTE TO PK06W01.PK06WFDA;*/
    ;
     /* ====== Y2K OUT END ======*/
    ;
    ;
     /* ====== Y2K IN  BEGIN ======*/
    ;
    PK06W01.PK06WFDT = VGVar.currentGregorianDate;
    ;
     /* ====== Y2K IN END ======*/
    ;
    PK06W01.PK06WWMM = PK06M100.PK06MNTM;
    PK06W01.PK06WWDD = PK06M100.PK06MNTD;
    PK06W01.PK06WWYY = PK06M100.PK06MNTY;
    ;
     /* ====== Y2K IN  BEGIN ======*/
    ;
    if (PK06W01.PK06WWYY < 60)
      PK06W01.PK06WWCC = 20;
    else
      PK06W01.PK06WWCC = 19;
    end
    ;
     /* ====== Y2K IN END ======*/
    ;
    set TA2REC empty;
    TA2REC.TA2GRTYP = "G"; /* date is in yymmdd format*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* convert to all greg dates*/
    TA2REC.TA2GRGG = PK06W01.PK06WWDT; /* date to be checked*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* check the date*/
    if (TA2REC.TA2RTNCD == 0000)
      PK06W01.PK06WWD2 = TA2REC.TA2GRGGN;
      PK06W01.OP1CUNDT[2] = TA2REC.TA2GRGGN;
    else
      set PK06M100.PK06MNTM cursor, bold;
      set PK06M100.PK06MNTD bold;
      set PK06M100.PK06MNTY bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(158);
      return;
    end
  else
    PK06W01.OP1CUNDT[2] = 999999999;
  end
  ;
   /* date1 must be less then or equal to date2*/
  ;
  if (PK06W01.PK06WWD2 > 0)
    if (PK06W01.PK06WWD1 == 0
     || PK06W01.PK06WWD2 < PK06W01.PK06WWD1)
      set PK06M100.PK06MNFM cursor, bold;
      set PK06M100.PK06MNFD bold;
      set PK06M100.PK06MNFY bold;
      set PK06M100.PK06MNTM bold;
      set PK06M100.PK06MNTD bold;
      set PK06M100.PK06MNTY bold;
      if (PK06W01.PK06WWD1 == 0)
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(288);
        return;
      else
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(285);
        return;
      end
    else
    end
  end
  ;
  ;
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
   /* *   check "from" and "to" don't ship before dates         **/
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
  ;
   /* --> "from" date*/
  PK06W01.PK06WWD1 = 0;
  if (PK06M100.PK06MDFM != 0
   || PK06M100.PK06MDFD != 0)
    ;
    /* ======= Y2K OUT BEGIN =======*/
    ;
    /* OR PK06M100.PK06MDFY NE 0;*/
    /* MOVE EZEDTE TO PK06W01.PK06WFDA;*/
    ;
    /* ======= Y2K OUT END =======*/
    ;
    ;
     /* ====== Y2K IN  BEGIN ======*/
    ;
    PK06W01.PK06WFDT = VGVar.currentGregorianDate;
    ;
     /* ====== Y2K IN END ======*/
    ;
    PK06W01.PK06WWMM = PK06M100.PK06MDFM;
    PK06W01.PK06WWDD = PK06M100.PK06MDFD;
    PK06W01.PK06WWYY = PK06M100.PK06MDFY;
    ;
     /* ====== Y2K IN  BEGIN ======*/
    ;
    if (PK06W01.PK06WWYY < 60)
      PK06W01.PK06WWCC = 20;
    else
      PK06W01.PK06WWCC = 19;
    end
    ;
     /* ====== Y2K IN END ======*/
    ;
    set TA2REC empty;
    TA2REC.TA2GRTYP = "G"; /* date is in yymmdd format*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* convert to all greg dates*/
    TA2REC.TA2GRGG = PK06W01.PK06WWDT; /* date to be checked*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* check the date*/
    if (TA2REC.TA2RTNCD == 0000) /* date is valid*/
      PK06W01.PK06WWD1 = TA2REC.TA2GRGGN;
      PK06W01.OP1DSBDT[1] = TA2REC.TA2GRGGN;
    else
      set PK06M100.PK06MDFM cursor, bold;
      set PK06M100.PK06MDFD bold;
      set PK06M100.PK06MDFY bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(158);
      return;
    end
  else
    PK06W01.OP1DSBDT[1] = -1;
  end
  ;
  ;
   /* --> "to  " date*/
  PK06W01.PK06WWD2 = 0;
  if (PK06M100.PK06MDTM != 0
   || PK06M100.PK06MDTD != 0)
    ;
    /* ======= Y2K OUT BEGIN =======*/
    ;
      /* OR PK06M100.PK06MDTY NE 0;*/
    /* MOVE EZEDTE TO PK06W01.PK06WFDA;*/
    ;
    /* ======= Y2K OUT END =======*/
    ;
     /* ====== Y2K IN  BEGIN ======*/
    ;
    PK06W01.PK06WFDT = VGVar.currentGregorianDate;
    ;
     /* ====== Y2K IN END ======*/
    ;
    PK06W01.PK06WWMM = PK06M100.PK06MDTM;
    PK06W01.PK06WWDD = PK06M100.PK06MDTD;
    PK06W01.PK06WWYY = PK06M100.PK06MDTY;
    ;
     /* ====== Y2K IN  BEGIN ======*/
    ;
    if (PK06W01.PK06WWYY < 60)
      PK06W01.PK06WWCC = 20;
    else
      PK06W01.PK06WWCC = 19;
    end
    ;
     /* ====== Y2K IN END ======*/
    ;
    set TA2REC empty;
    TA2REC.TA2GRTYP = "G"; /* date is in yymmdd format*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* convert to all greg dates*/
    TA2REC.TA2GRGG = PK06W01.PK06WWDT; /* date to be checked*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* check the date*/
    if (TA2REC.TA2RTNCD == 0000)
      PK06W01.PK06WWD2 = TA2REC.TA2GRGGN;
      PK06W01.OP1DSBDT[2] = TA2REC.TA2GRGGN;
    else
      set PK06M100.PK06MDTM cursor, bold;
      set PK06M100.PK06MDTD bold;
      set PK06M100.PK06MDTY bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(158);
      return;
    end
  else
    PK06W01.OP1DSBDT[2] = 999999999;
  end
  ;
   /* date1 must be less then or equal to date2*/
  ;
  if (PK06W01.PK06WWD2 > 0)
    if (PK06W01.PK06WWD1 == 0
     || PK06W01.PK06WWD2 < PK06W01.PK06WWD1)
      set PK06M100.PK06MDFM cursor, bold;
      set PK06M100.PK06MDFD bold;
      set PK06M100.PK06MDFY bold;
      set PK06M100.PK06MDTM bold;
      set PK06M100.PK06MDTD bold;
      set PK06M100.PK06MDTY bold;
      if (PK06W01.PK06WWD1 == 0)
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(288);
        return;
      else
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(286);
        return;
      end
    end
  end
  ;
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
   /* *   check "from" and "to" hold release dates              **/
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
  ;
   /* --> "from" date*/
  PK06W01.PK06WWD1 = 0;
  if (PK06M100.PK06MRFM == 99)
    PK06M100.PK06MRFD = 99;
    PK06M100.PK06MRFY = 99;
    TA2REC.TA2GRGEN = 999999999;
    PK06W01.PK06WWD1 = 999999999;
  else
    if (PK06M100.PK06MRFM != 0
     || PK06M100.PK06MRFD != 0)
      ;
      /* ====== Y2K OUT BEGIN =======*/
      ;
      /* OR PK06M100.PK06MRFY NE 0;*/
      /* MOVE EZEDTE TO PK06W01.PK06WFDA;*/
      ;
      /* ====== Y2K OUT END =========*/
      ;
      /* ====== Y2K IN  BEGIN ======*/
      ;
      PK06W01.PK06WFDT = VGVar.currentGregorianDate;
      ;
      /* ====== Y2K IN END ======*/
      ;
      PK06W01.PK06WWMM = PK06M100.PK06MRFM;
      PK06W01.PK06WWDD = PK06M100.PK06MRFD;
      PK06W01.PK06WWYY = PK06M100.PK06MRFY;
      ;
      /* ====== Y2K IN  BEGIN ======*/
      ;
      if (PK06W01.PK06WWYY < 60)
        PK06W01.PK06WWCC = 20;
      else
        PK06W01.PK06WWCC = 19;
      end
      ;
      /* ====== Y2K IN END ======*/
      ;
      set TA2REC empty;
      TA2REC.TA2GRTYP = "G"; /* date is in yymmdd format*/
      TA2REC.TA2DTOPT = "GREGGREG"; /* convert to all greg dates*/
      TA2REC.TA2GRGG = PK06W01.PK06WWDT; /* date to be checked*/
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* check the date*/
      if (TA2REC.TA2RTNCD == 0000) /* date is valid*/
        PK06W01.PK06WWD1 = TA2REC.TA2GRGEN;
      else
        set PK06M100.PK06MRFM cursor, bold;
        set PK06M100.PK06MRFD bold;
        set PK06M100.PK06MRFY bold;
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(158);
        return;
      end
    end
  end
  ;
  ;
   /* --> "to  " date*/
  PK06W01.PK06WWD2 = 0;
  if (PK06M100.PK06MRTM == 99)
    PK06M100.PK06MRTD = 99;
    PK06M100.PK06MRTY = 99;
    TA2REC.TA2GRGEN = 999999999;
    PK06W01.PK06WWD2 = 999999999;
  else
    if (PK06M100.PK06MRTM != 0
     || PK06M100.PK06MRTD != 0)
      ;
      /* ====== Y2K OUT BEGIN =======*/
      ;
      /* OR PK06M100.PK06MRTY NE 0;*/
      /* MOVE EZEDTE TO PK06W01.PK06WFDA;*/
      ;
      /* ====== Y2K OUT END =========*/
      ;
      /* ====== Y2K IN  BEGIN ======*/
      ;
      PK06W01.PK06WFDT = VGVar.currentGregorianDate;
      ;
      /* ====== Y2K IN END ======*/
      ;
      PK06W01.PK06WWMM = PK06M100.PK06MRTM;
      PK06W01.PK06WWDD = PK06M100.PK06MRTD;
      PK06W01.PK06WWYY = PK06M100.PK06MRTY;
      ;
      /* ====== Y2K IN  BEGIN ======*/
      ;
      if (PK06W01.PK06WWYY < 60)
        PK06W01.PK06WWCC = 20;
      else
        PK06W01.PK06WWCC = 19;
      end
      ;
      /* ====== Y2K IN END ======*/
      ;
      set TA2REC empty;
      TA2REC.TA2GRTYP = "G"; /* date is in yymmdd format*/
      TA2REC.TA2DTOPT = "GREGGREG"; /* convert to all greg dates*/
      TA2REC.TA2GRGG = PK06W01.PK06WWDT; /* date to be checked*/
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* check the date*/
      if (TA2REC.TA2RTNCD == 0000)
        PK06W01.PK06WWD2 = TA2REC.TA2GRGGN;
      else
        set PK06M100.PK06MRTM cursor, bold;
        set PK06M100.PK06MRTD bold;
        set PK06M100.PK06MRTY bold;
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(158);
        return;
      end
    end
  end
  ;
   /* date1 must be less then or equal to date2*/
  ;
  if (PK06W01.PK06WWD1 == 999999999)
    /* next sentence*/
  else
    if (PK06W01.PK06WWD2 > 0)
      if (PK06W01.PK06WWD1 == 0
       || PK06W01.PK06WWD2 < PK06W01.PK06WWD1)
        set PK06M100.PK06MRFM cursor, bold;
        set PK06M100.PK06MRFD bold;
        set PK06M100.PK06MRFY bold;
        set PK06M100.PK06MRTM bold;
        set PK06M100.PK06MRTD bold;
        set PK06M100.PK06MRTY bold;
        if (PK06W01.PK06WWD1 == 0)
          PK06W01.PK06WERS = "Y";
          converseLib.validationFailed(288);
          return;
        else
          PK06W01.PK06WERS = "Y";
          converseLib.validationFailed(287);
          return;
        end
      end
    end
  end
  ;
   /* if autohold flag equals 'y' then rlse date must be entered*/
  ;
  if (PK06M100.PK06MAHD == "Y")
    if (PK06M100.PK06MRMM == 0
     && PK06M100.PK06MRDD == 0
     && PK06M100.PK06MRYY == 0)
      converseLib.validationFailed(61);
      PK06W01.PK06WERS = "Y";
      set PK06M100.PK06MRMM cursor, bold;
      set PK06M100.PK06MRDD bold;
      set PK06M100.PK06MRYY bold;
      return;
    end
  end
  ;
   /* 1. if entered default hold release date must be:*/
   /* 2. all 9's*/
   /* 3. must be greater then today*/
   /* 4. must be a working day*/
  ;
   /* ** 1.*/
  if (PK06M100.PK06MRMM != 0
   || PK06M100.PK06MRDD != 0)
    ;
    /* ====== Y2K OUT BEGIN =======*/
    ;
    /* OR PK06M100.PK06MRYY NE 0;*/
    ;
    /* ====== Y2K OUT END =========*/
    ;
    /* **2.*/
    if (PK06M100.PK06MRMM == 99
     || PK06M100.PK06MRDD == 99)
      ;
      /* ===== Y2K OUT BEGIN =====*/
      ;
      /* OR PK06M100.PK06MRYY EQ 99;*/
      ;
      /* ===== Y2K OUT END =====*/
      ;
      PK06M100.PK06MRMM = 99;
      PK06M100.PK06MRDD = 99;
      PK06M100.PK06MRYY = 99;
    else
      /* ** 3.*/
      PK06W01.PK06WWYY = PK06M100.PK06MRYY;
      PK06W01.PK06WWMM = PK06M100.PK06MRMM;
      PK06W01.PK06WWDD = PK06M100.PK06MRDD;
      ;
      /* ====== Y2K IN  BEGIN ======*/
      ;
      if (PK06W01.PK06WWYY < 60)
        PK06W01.PK06WWCC = 20;
      else
        PK06W01.PK06WWCC = 19;
      end
      ;
      /* ====== Y2K IN END ======*/
      ;
      ;
        /* ====== Y2K OUT BEGIN =======*/
      ;
      /* MOVE EZEDTE TO PK06WFDA;*/
      /* IF PK06W01.PK06WFDA GT PK06W01.PK06WWDT;*/
      ;
        /* ====== Y2K OUT END =======*/
      ;
      ;
        /* ====== Y2K IN BEGIN =======*/
      ;
      PK06WFDT = VGVar.currentGregorianDate;
      if (PK06W01.PK06WFDT > PK06W01.PK06WWDT)
        ;
        /* ====== Y2K IN END =======*/
        ;
        converseLib.validationFailed(55);
        PK06W01.PK06WERS = "Y";
        set PK06M100.PK06MRMM cursor, bold;
        set PK06M100.PK06MRDD bold;
        set PK06M100.PK06MRYY bold;
      else
        /* ** 4.*/
        set TA9REC empty;
        ;
        /* ====== Y2K OUT BEGIN =======*/
        ;
        /* MOVE 19 TO TA9REC.TA9BEGCC;*/
        ;
        /* ====== Y2K OUT END =========*/
        ;
        ;
        /* ====== Y2K IN BEGIN =======*/
        ;
        if (PK06M100.PK06MRYY < 60)
          TA9REC.TA9BEGCC = 20;
        else
          TA9REC.TA9BEGCC = 19;
        end
        ;
        /* ====== Y2K IN END =========*/
        ;
        TA9REC.TA9BEGMM = PK06M100.PK06MRMM;
        TA9REC.TA9BEGDD = PK06M100.PK06MRDD;
        TA9REC.TA9BEGYY = PK06M100.PK06MRYY;
        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
        if (TA9REC.TA9RTNFL != 0)
          converseLib.validationFailed(56);
          PK06W01.PK06WERS = "Y";
          set PK06M100.PK06MRMM cursor, bold;
          set PK06M100.PK06MRDD bold;
          set PK06M100.PK06MRYY bold;
        end
      end
    end
  end
  ;
   /* --- end of:pk06030 - validate entered dates ----------------*/
end // end PK06030

// * pick hold/rlse main  process
Function PK06100()
  ;
  if (PK06W01.PK06WERS != "Y")
    PK06105(); /* process pf/xfer*/
  end
  ;
  if (PK06W01.PK06WERS != "Y")
    PK06110(); /* select data for display*/
  end
  ;
  if (PK06W01.PK06WMAP == "PK06M100")
    PK06200(); /* converse selection screen*/
  end
  ;
  if (PK06W01.PK06WMAP == "PK06M300")
    PK06300(); /* converse hold/rlse screen*/
  end
  ;
end // end PK06100

// application xfer logic
Function PK06105()
  COMMAREA.CAFROMAP = "PK06";
  COMMAREA.CAITEM = "    ";
  PK06M100.XXXERRID = "PK06105";
  PK06M300.XXXERRID = "PK06105";
  ;
  if (converseVar.eventKey is pfkey)
    if (PK06W01.PK06WMAP == "PK06M300")
      if (converseVar.eventKey is pf13)
        move PK06M100 to PK06W03 withV60Compat;
        PKWREC.PKWFRMAP = "PK06";
        PKWREC.PKWUSERB = PK06W03.PK06WSCR;
        COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
        COMMAREA.CATOAP = "PK0B";
        XSEXIT(); /* order header inquiry*/
        PK06W01.PK06WERS = "Y";
        PK06M300.VAGen_EZEMSG = COMMAREA.CAMSG;
        return;
      end
      if (converseVar.eventKey is pf14)
        move PK06M100 to PK06W03 withV60Compat;
        PKWREC.PKWFRMAP = "PK06";
        PKWREC.PKWUSERB = PK06W03.PK06WSCR;
        COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
        COMMAREA.CATOAP = "PK0C";
        XSEXIT(); /* line itm inq*/
        PK06W01.PK06WERS = "Y";
        PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
        PK06M300.VAGen_EZEMSG = COMMAREA.CAMSG;
        return;
      end
      if (converseVar.eventKey is pf15)
        move PK06M100 to PK06W03 withV60Compat;
        PKWREC.PKWFRMAP = "PK06";
        PKWREC.PKWUSERB = PK06W03.PK06WSCR;
        COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
        COMMAREA.CATOAP = "PK0D";
        XSEXIT(); /* line itm inq*/
        PK06W01.PK06WERS = "Y";
        PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
        PK06M300.VAGen_EZEMSG = COMMAREA.CAMSG;
        return;
      end
    end
    PKWREC.PKWINDEX = 0;
    PKWREC.PKWCNTRL = " ";
    PKWREC.PKWUSERB = " ";
    PKWREC.PKWFRMAP = "PK06";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    if (converseVar.eventKey is pf1)
      XSPF1();
      PK06W01.PK06WERS = "Y";
      PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
      PK06M300.VAGen_EZEMSG = COMMAREA.CAMSG;
      return;
    end
    if (converseVar.eventKey is pf3)
      if (PK06W01.PK06WMAP == "PK06M300")
        PK06W01.PK06WGET = "N";
        PK06W01.PK06WMAP = "PK06M100";
      else
        COMMAREA.CATOAP = "PK09";
        XSEXIT();
        PK06W01.PK06WERS = "Y";
        PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
        PK06M300.VAGen_EZEMSG = COMMAREA.CAMSG;
      end
      return;
    end
    if (converseVar.eventKey is pf4)
      XSPF4();
      PK06W01.PK06WERS = "Y";
      PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
      PK06M300.VAGen_EZEMSG = COMMAREA.CAMSG;
      return;
    end
    if (converseVar.eventKey is pf13)
      COMMAREA.CATOAP = "PK0B";
      XSEXIT(); /* picking order*/
      PK06W01.PK06WERS = "Y";
      PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
      return;
    end
    if (converseVar.eventKey is pf14)
      COMMAREA.CATOAP = "PK0C";
      XSEXIT(); /* line itm inq*/
      PK06W01.PK06WERS = "Y";
      PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
      PK06M300.VAGen_EZEMSG = COMMAREA.CAMSG;
      return;
    end
    if (converseVar.eventKey is pf15)
      COMMAREA.CATOAP = "PK0D";
      XSEXIT(); /* customer inquiry*/
      PK06W01.PK06WERS = "Y";
      PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
      PK06M300.VAGen_EZEMSG = COMMAREA.CAMSG;
      return;
    end
    if (converseVar.eventKey is pf16)
      COMMAREA.CATOAP = "PK0Z";
      XSEXIT(); /* sales program/product inquiry*/
      PK06W01.PK06WERS = "Y";
      PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
      PK06M300.VAGen_EZEMSG = COMMAREA.CAMSG;
      return;
    end
    if (converseVar.eventKey is pf17
     && PK06W01.PK06WMAP == "PK06M100")
      COMMAREA.CATOAP = "PK0I";
      XSEXIT(); /* company/carrier/order hold*/
      PK06W01.PK06WERS = "Y";
      PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
      return;
    end
    if (converseVar.eventKey is pf19)
      COMMAREA.CATOAP = "PK0S";
      XSEXIT(); /* planning menu*/
      PK06W01.PK06WERS = "Y";
      PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
      PK06M300.VAGen_EZEMSG = COMMAREA.CAMSG;
      return;
    end
    if (converseVar.eventKey is pf20)
      COMMAREA.CATOAP = "PK07";
      XSEXIT(); /* go to selection menu*/
      PK06W01.PK06WERS = "Y";
      PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
      PK06M300.VAGen_EZEMSG = COMMAREA.CAMSG;
      return;
    end
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2)
      PK06W01.PK06WGET = "N";
      PK06W01.PK06WFTF = "N";
      if (PK06W01.PK06WMAP == "PK06M100")
        set PK06M100 initial;
        return;
      else
        converseLib.clearScreen();
        
        return;
      end
    else
      if (converseVar.eventKey is enter
       && PK06M100.CATOAP > " ")
        COMMAREA.CATOAP = PK06M100.CATOAP;
        COMMAREA.CAITEM = PK06M100.CAITEM;
        XSEXIT();
        PK06W01.PK06WERS = "Y";
        PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
        return;
      end
    end
  end
  ;
  ;
  ;
   /* ------------------- end pk06210 -------------------------*/
end // end PK06105

// select data for display
Function PK06110()
   /* --------------------- pk06110 select data ------------------*/
  ;
  if (PK06W01.PK06WERS == "Y"
   || PK06W01.PK06WGET != "Y")
    return;
  end
  ;
  set PK06W04 empty;
  PK06W04.PK06WMAX = 668;
  ;
  if (PK06M100.PK1CUOID > 0)
    PK06120(); /* load by order*/
  else
    if (PK06M100.KUCCOID > 0)
      PK06130(); /* load by customer*/
    else
      if (PK06M100.XGPCD > " " /* load by style*/
       && PK06M100.SY1STNBR > " ")
        PK06140();
      else
        if (PK06M100.SP1ID > " ")
          PK06150(); /* load by sp1id*/
        else
          if (PK06M100.XHRCD > " "
           || PK06M100.PK06MRFD > 0
           || PK06M100.PK06MRTD > 0)
            PK06160(); /* load by hold code*/
          else
            PK06170(); /* load by dates/carrier*/
          end
        end
      end
    end
  end
  ;
  if (PK06W01.PK06WERS == "Y")
    PK06W01.PK06WMAP = "PK06M100";
  else
    if (PK06W04.PK06WCNT == 0)
      PK06W01.PK06WMAP = "PK06M100";
      PK06W01.PK06WERS = "Y";
      PK06W01.PK06WFTF = "N"; /* first time thru flag*/
      converseLib.validationFailed(31); /* no orders found*/
    else
      if (PKWREC.PKWINDEX > 0)
        PK06180(); /* return from another pk app*/
      else
        PK06W01.PK06WLSC = "Y"; /* load screen flag*/
        PK06W01.PK06WFTF = "Y"; /* first time thru flag*/
        PK06W01.PK06WMAP = "PK06M300";
      end
    end
  end
  PK06W01.PK06WGET = "N";
  ;
   /* ----------------- end of: pk06110 select data --------------*/
end // end PK06110

// load by order
Function PK06120()
   /* -------- pk06120 - load by order ---------------------------*/
  ;
  PK06M100.XXXERRID = "PK06120";
  ;
  set PWIREC empty;
  set PK4REC empty;
  PK4REC.XWHCD = PK06M100.XWHCD;
  PK4REC.PK1CUOID = PK06M100.PK1CUOID;
  PK4REC.PK1NORID = -1;
  PWIREC.PWIFUNC = "S3";
  PK06121(); /* open set*/
  PWIREC.PWIFUNC = "N3";
  PK06121(); /* fetch first rec*/
  if (SQLCA.VAGen_SQLCODE == 100)
    PK06W01.PK06WERS = "Y";
    converseLib.validationFailed(11);
    set PK06M100.PK1CUOID cursor, bold;
  else
    if (PK4REC.XBCCD == " ") /* no brand on pool record*/
  /* next sentence                      /*   skip around*/
    else
      if (PK06M100.XBCCD == " ") /* no brand on map*/
        PK06M100.XBCCD = PK4REC.XBCCD; /* use the pk4 brand*/
      else
        if (PK4REC.XBCCD != PK06M100.XBCCD) /* pk4 brand ne map brand*/
          PK06M100.VAGen_EZEMSG = "BRAND CODE ON MAP OVERRIDDEN BY BRAND CODE FROM POOL HDR"; /* override the map*/
          PK06M100.XBCCD = PK4REC.XBCCD;
        end
      end
    end
  end
  ;
  ;
  ;
  while (SQLCA.VAGen_SQLCODE == +0
   && PK06W01.PK06WERS != "Y")
    PK06122(); /* load working storage*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE != -911)
    PWIREC.PWIFUNC = "C3";
    PK06121(); /* close dpick.vpoolh01*/
  end
end // end PK06120

// access dpick.vpoolh01
Function PK06121()
   /* ----------- pk06121 - access dpick.vpoolh01 --------------*/
  ;
  ;
  call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* contention for data base resorce*/
      PK06W01.PK06WERS = "Y";
    else
      converseLib.validationFailed(29); /* fatal error*/
      PK06W01.PK06WERS = "Y";
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PK06121 "; /* Process name*/
      TA1REC.TA1LOC = PWIREC.PWIFUNC;
      TA1REC.TA1MAP = "PK06M100"; /* Map name*/
      TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
    end
  end
  ;
   /* -------------  end process pk06121  --------------------*/
end // end PK06121

// move ord  vpoolh01 to array
Function PK06122()
   /* -------------- pk06122 - move data to array ----------------*/
  ;
  PK06123(); /* screen pool data*/
  ;
  if (PK06W01.PK06WSEL == "Y")
    PK06124(); /* format rlse date*/
    if (PK4REC.PK4ORHLD == "Y")
      PKZREC.PKZFUNC = "S1";
      PKBREC.XWHCD = PK4REC.XWHCD;
      PKBREC.PK1CUOID = PK4REC.PK1CUOID;
      PKBREC.PK1NORID = PK4REC.PK1NORID;
      PK06125(); /* select dpick.vorhld01*/
      if (SQLCA.VAGen_SQLCODE == 0
       && PK06W01.PK06WERS != "Y")
        PKZREC.PKZFUNC = "N1";
        PK06125(); /* select nxt dpick.vorhld01*/
      end
      if (SQLCA.VAGen_SQLCODE == 100)
        PK06126();
                                   /* load order even if no orhld rec found*/
      else
        while (SQLCA.VAGen_SQLCODE == 0)
          PK06126(); /* screen hold rlse date*/
        end
      end
      if (SQLCA.VAGen_SQLCODE != -911)
        PKZREC.PKZFUNC = "C1";
        PK06125(); /* close dpick.vorhld01*/
      end
    else
      if (PK06W01.PK06WWD1 == 0) /* since order is not on hold do ONLY*/
                                   /* if rel date NOT input in pk06m100*/
         /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
                      /* LOAD WORKING STORAGE ARRAY                   **/
         /* if we made it this far all selections have passed and we  **/
         /* have a record to place in the pk06w04 array.              **/
         /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
        PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
        PK06W04.PK06WCNT = PK06W04.PK06WCNT + 1;
        PK06W04.PK4ORHLD[PK06WIX4] = PK4REC.PK4ORHLD;
        if (PK4REC.PK4ORHLD == "Y")
          if (PK06M100.PK06MARL == "Y")
            PK06W04.PK06WSEL[PK06WIX4] = "R";
          end
        else
          if (PK06M100.PK06MAHD == "Y")
            PK06W04.PK06WSEL[PK06WIX4] = "H";
          end
        end
        PK06W04.PK1CUOID[PK06WIX4] = PK4REC.PK1CUOID;
        PK06W04.PK1NORID[PK06WIX4] = PK4REC.PK1NORID;
        PK06W04.XOTCD[PK06WIX4] = PK4REC.XOTCD;
        PK06W04.XBCCD[PK06WIX4] = PK4REC.XBCCD;
        PK06W04.KUCCOID[PK06WIX4] = PK4REC.KUCCOID;
        PK06W04.KUMSTRID[PK06WIX4] = PK4REC.KUMSTRID;
        PK06W04.XNXCD[PK06WIX4] = PK4REC.XNXCD;
        PK06W04.TF1CARCD[PK06WIX4] = PK4REC.TF1CARCD;
        PK06W04.OP1DSBDT[PK06WIX4] = PK4REC.OP1DSBDT;
        PK06W04.PK4OTUNT[PK06WIX4] = PK4REC.PK4OTUNT;
        if (PK4REC.PK4PLNDT > 0)
          PK06W04.PK06WPLF[PK06WIX4] = "*";
        end
        ;
         /* get store short name*/
        if (PK4REC.KUCCOID != PK6REC.KUCCOID
         || PK4REC.KUMSTRID != PK6REC.KUMSTRID)
          set PK6REC empty;
          PK6REC.KUCCOID = PK4REC.KUCCOID;
          PK6REC.KUMSTRID = PK4REC.KUMSTRID;
          PK06127();
          if (VAGen_SQLCODE != 0)
            PK6REC.KUMSTSNM = "UNKN";
          end
        end
        PK06W04.PK06WSNM[PK06WIX4] = PK6REC.KUMSTSNM;
        ;
      end
    end
  end
  ;
  if (PK06W01.PK06WERS != "Y")
    if (PK06W04.PK06WCNT >= PK06W04.PK06WMAX)
      PK06M100.XXXERRID = "PK06122";
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(304);
    else
      PWIREC.PWIFUNC = "N3";
      PK06121(); /* fetch next vpoolh01*/
    end
  end
  ;
   /* ---------- end of pk06122 - move data to array -------------*/
end // end PK06122

// screen pool data for selection
Function PK06123()
   /* -------------- pk06123 - screen pool data ------------------*/
  ;
  PK06W01.PK06WSEL = "Y";
  ;
  if (PK06M100.KUCCOID > 0)
    if (PK06M100.KUCCOID != PK4REC.KUCCOID
     && XP0FW01-INTERNAL != PK4REC.KUCCOID) /* Cole-Haan customer*/
      PK06W01.PK06WSEL = "N";
      return;
    end
  end
  ;
  if (PK06M100.KUMSTRID > 0
   && PK06M100.KUMSTRID != PK4REC.KUMSTRID)
    PK06W01.PK06WSEL = "N";
    return;
  end
  ;
  if (PK06M100.XNXCD > 0
   && PK06M100.XNXCD != PK4REC.XNXCD)
    PK06W01.PK06WSEL = "N";
    return;
  end
  ;
  if (PK06M100.XOTCD > " "
   && PK06M100.XOTCD != PK4REC.XOTCD)
    PK06W01.PK06WSEL = "N";
    return;
  end
  ;
  if (PK06M100.PK1CUOID > 0
   && PK06M100.PK1CUOID != PK4REC.PK1CUOID)
    PK06W01.PK06WSEL = "N";
    return;
  end
  ;
  if (PK06M100.TF1CARCD != " "
   && PK06M100.TF1CARCD != PK4REC.TF1CARCD)
    PK06W01.PK06WSEL = "N";
    return;
  end
  ;
  if (PK06M100.SP1ID != " "
   && PK06M100.SP1ID != PK4REC.SP1ID)
    PK06W01.PK06WSEL = "N";
    return;
  end
  ;
   /* ** * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
   /* screen for hold code entry - if entered and order is not*/
   /* on hold then reject.*/
   /* ** * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
  if (PK06M100.XHRCD != " "
   && PK4REC.PK4ORHLD != "Y")
    PK06W01.PK06WSEL = "N";
    return;
  end
  ;
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
   /* exclude orders that are on hold*/
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
  if (PK06M100.PK06MXHD == "Y"
   && PK4REC.PK4ORHLD == "Y")
    PK06W01.PK06WSEL = "N";
    return;
  end
  ;
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
   /* exclude orders that are on a plan*/
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
  if (PK06M100.PK06MXPL == "Y"
   && PK4REC.PK4PLNDT > 0)
    PK06W01.PK06WSEL = "N";
    return;
  end
  ;
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
   /* exclude orders that are NOT on a plan*/
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
  if (PK06M100.PK06MXNP == "Y"
   && PK4REC.PK4PLNDT == 0)
    PK06W01.PK06WSEL = "N";
    return;
  end
  ;
  ;
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
    /* format need dates to working date fields and check for*/
    /* valid range to select*/
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
  ;
  PK06W01.PK06WWD1 = 0;
  PK06W01.PK06WWD2 = 0;
  ;
    /* from 'need' date*/
  if (PK06M100.PK06MNFM != 0)
    PK06W01.PK06WFMM = PK06M100.PK06MNFM;
    PK06W01.PK06WFDD = PK06M100.PK06MNFD;
    PK06W01.PK06WFYY = PK06M100.PK06MNFY;
    if (PK06W01.PK06WFYY > 67)
      PK06W01.PK06WFCT = 19;
    else
      PK06W01.PK06WFCT = 20;
    end
    PK06W01.PK06WWD1 = PK06W01.PK06WFDT;
  end
    /* to   'need' date*/
  if (PK06M100.PK06MNTM != 0)
    PK06W01.PK06WFMM = PK06M100.PK06MNTM;
    PK06W01.PK06WFDD = PK06M100.PK06MNTD;
    PK06W01.PK06WFYY = PK06M100.PK06MNTY;
    if (PK06W01.PK06WFYY > 67)
      PK06W01.PK06WFCT = 19;
    else
      PK06W01.PK06WFCT = 20;
    end
    PK06W01.PK06WWD2 = PK06W01.PK06WFDT;
  end
  ;
  if (PK06W01.PK06WWD1 != 0)
    if (PK06W01.PK06WWD2 != 0)
      if (PK06W01.PK06WWD1 > PK4REC.OP1CUNDT
       || PK06W01.PK06WWD2 < PK4REC.OP1CUNDT)
        PK06W01.PK06WSEL = "N";
        return;
      end
    else
      if (PK06W01.PK06WWD1 > PK4REC.OP1CUNDT)
        PK06W01.PK06WSEL = "N";
        return;
      end
    end
  end
  ;
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
    /* format dnsb dates to working date fields and check for*/
    /* valid range to select*/
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
  ;
  PK06W01.PK06WWD1 = 0;
  PK06W01.PK06WWD2 = 0;
  ;
    /* from 'dnsb' date*/
  if (PK06M100.PK06MDFM != 0)
    PK06W01.PK06WFMM = PK06M100.PK06MDFM;
    PK06W01.PK06WFDD = PK06M100.PK06MDFD;
    PK06W01.PK06WFYY = PK06M100.PK06MDFY;
    if (PK06W01.PK06WFYY > 67)
      PK06W01.PK06WFCT = 19;
    else
      PK06W01.PK06WFCT = 20;
    end
    PK06W01.PK06WWD1 = PK06W01.PK06WFDT;
  end
    /* to   'dnsb' date*/
  if (PK06M100.PK06MDTM != 0)
    PK06W01.PK06WFMM = PK06M100.PK06MDTM;
    PK06W01.PK06WFDD = PK06M100.PK06MDTD;
    PK06W01.PK06WFYY = PK06M100.PK06MDTY;
    if (PK06W01.PK06WFYY > 67)
      PK06W01.PK06WFCT = 19;
    else
      PK06W01.PK06WFCT = 20;
    end
    PK06W01.PK06WWD2 = PK06W01.PK06WFDT;
  end
  ;
  if (PK06W01.PK06WWD1 != 0)
    if (PK06W01.PK06WWD2 != 0)
      if (PK06W01.PK06WWD1 > PK4REC.OP1DSBDT
       || PK06W01.PK06WWD2 < PK4REC.OP1DSBDT)
        PK06W01.PK06WSEL = "N";
        return;
      end
    else
      if (PK06W01.PK06WWD1 > PK4REC.OP1DSBDT)
        PK06W01.PK06WSEL = "N";
        return;
      end
    end
  end
  ;
  ;
   /* ---------- end of pk06123 - screen pool data --------------*/
end // end PK06123

// format hold rlse date
Function PK06124()
   /* -------------- pk06124 - format hold rlse date -------------*/
  ;
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
    /* format rlse dates to working date fields and check for*/
    /* valid range to select*/
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
  ;
  PK06W01.PK06WWD1 = 0;
  PK06W01.PK06WWD2 = 0;
  ;
    /* from 'rlse' date*/
  if (PK06M100.PK06MRFM != 0)
    if (PK06M100.PK06MRFM == 99)
      PK06W01.PK06WWD1 = 999999999;
    else
      PK06W01.PK06WFMM = PK06M100.PK06MRFM;
      PK06W01.PK06WFDD = PK06M100.PK06MRFD;
      PK06W01.PK06WFYY = PK06M100.PK06MRFY;
      if (PK06W01.PK06WFYY > 70)
        PK06W01.PK06WFCT = 19;
      else
        PK06W01.PK06WFCT = 20;
      end
      PK06W01.PK06WWD1 = PK06W01.PK06WFDT;
    end
  end
    /* to   'rlse' date*/
  if (PK06M100.PK06MRTM != 0)
    if (PK06M100.PK06MRTM == 99)
      PK06W01.PK06WWD2 = 999999999;
    else
      PK06W01.PK06WFMM = PK06M100.PK06MRTM;
      PK06W01.PK06WFDD = PK06M100.PK06MRTD;
      PK06W01.PK06WFYY = PK06M100.PK06MRTY;
      if (PK06W01.PK06WFYY > 70)
        PK06W01.PK06WFCT = 19;
      else
        PK06W01.PK06WFCT = 20;
      end
      PK06W01.PK06WWD2 = PK06W01.PK06WFDT;
    end
  end
  ;
   /* ---------- end of pk06124 - format hold rlse date----------*/
end // end PK06124

// access dpick.vorhld01
Function PK06125()
   /* ----------- pk06125 - select set dpick.vpoolh01 ---------*/
  ;
  ;
  call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != -811)
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* contention for data base resorce*/
    else
      if (SQLCA.VAGen_SQLCODE != +100)
        converseLib.validationFailed(29); /* fatal error*/
        PK06W01.PK06WERS = "Y";
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK06125 "; /* Process name*/
        TA1REC.TA1LOC = PKZREC.PKZFUNC;
        TA1REC.TA1MAP = "PK06M100"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
        ;
      end
    end
  end
  ;
   /* -------------  end process pk06125  --------------------*/
end // end PK06125

// load hold rsn cds to array
Function PK06126()
   /* -------------- pk06126 - screen holds for release date -----*/
  ;
  PK06W01.PK06WSEL = "Y";
  ;
  if (PK06W01.PK06WWD1 != 0)
    if (PK06W01.PK06WWD2 != 0)
      if (PK06W01.PK06WWD1 > PKBREC.PKBRELDT
       || PK06W01.PK06WWD2 < PKBREC.PKBRELDT)
        PK06W01.PK06WSEL = "N";
      end
    else
      if (PK06W01.PK06WWD1 > PKBREC.PKBRELDT)
        PK06W01.PK06WSEL = "N";
      end
    end
  end
  ;
  if (PK06M100.XHRCD != " "
   && PKBREC.XHRCD != PK06M100.XHRCD)
    PK06W01.PK06WSEL = "N";
  end
  ;
  if (PK06W01.PK06WSEL == "Y"
   && PK06W01.PK06WERS != "Y")
     /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
                  /* LOAD WORKING STORAGE ARRAY                   **/
     /* if we made it this far all selections have passed and we  **/
     /* have a record to place in the pk06w04 array.              **/
     /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
    PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
    PK06W04.PK06WCNT = PK06W04.PK06WCNT + 1;
    PK06W04.PK4ORHLD[PK06WIX4] = PK4REC.PK4ORHLD;
    if (PK4REC.PK4ORHLD == "Y")
      if (PK06M100.PK06MARL == "Y")
        PK06W04.PK06WSEL[PK06WIX4] = "R";
      end
    else
      if (PK06M100.PK06MAHD == "Y")
        PK06W04.PK06WSEL[PK06WIX4] = "H";
      end
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      PK06W04.XHRCD[PK06WIX4] = PKBREC.XHRCD;
    else
      PK06W04.XHRCD[PK06WIX4] = "??";
    end
    PK06W04.PKBRELDT[PK06WIX4] = PKBREC.PKBRELDT;
    PK06W04.PK1CUOID[PK06WIX4] = PK4REC.PK1CUOID;
    PK06W04.PK1NORID[PK06WIX4] = PK4REC.PK1NORID;
    PK06W04.XOTCD[PK06WIX4] = PK4REC.XOTCD;
    PK06W04.XBCCD[PK06WIX4] = PK4REC.XBCCD;
    PK06W04.KUCCOID[PK06WIX4] = PK4REC.KUCCOID;
    PK06W04.KUMSTRID[PK06WIX4] = PK4REC.KUMSTRID;
    PK06W04.XNXCD[PK06WIX4] = PK4REC.XNXCD;
    PK06W04.TF1CARCD[PK06WIX4] = PK4REC.TF1CARCD;
    PK06W04.OP1DSBDT[PK06WIX4] = PK4REC.OP1DSBDT;
    PK06W04.PK4OTUNT[PK06WIX4] = PK4REC.PK4OTUNT;
    if (PK4REC.PK4PLNDT > 0)
      PK06W04.PK06WPLF[PK06WIX4] = "*";
    end
    ;
     /* get store short name*/
    set PK6REC empty;
    PK6REC.KUCCOID = PK4REC.KUCCOID;
    PK6REC.KUMSTRID = PK4REC.KUMSTRID;
    PK06127();
    if (VAGen_SQLCODE == 0)
      PK06W04.PK06WSNM[PK06WIX4] = PK6REC.KUMSTSNM;
    else
      PK06W04.PK06WSNM[PK06WIX4] = "UNKN";
    end
    ;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* get hold reason codes*/
    PKZREC.PKZFUNC = "N1";
    PK06125(); /* select nxt dpick.vorhld01*/
  else
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2"; /* Type of error*/
    TA1REC.TA1PGMNM = "PK06126 "; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE            ";
    TA1REC.TA1MAP = "PK06M100"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKBREC.PKBKEY;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  end
  ;
   /* ---------- end of pk06126 - move data to array -------------*/
end // end PK06126

// select unique  dpick.vpkcus01
Function PK06127()
   /* ---------  pk06127 - select unique dpick.vpkcus01 ----------*/
  ;
  ;
  call "IO1830" ("S ", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes}; /* select next*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* contention for data base resorce*/
      PK06W01.PK06WERS = "Y";
    else
      if (SQLCA.VAGen_SQLCODE != +100)
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK06127 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT UNIQUE            ";
        TA1REC.TA1MAP = "PK06M100"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VPKCUS01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
        ;
      end
    end
  end
  ;
   /* -------------  end process pk06127  --------------------*/
end // end PK06127

// load by customer
Function PK06130()
   /* -------- pk06130 - load by customer ------------------------*/
  ;
  PK06M100.XXXERRID = "PK06130";
  ;
  set PWIREC empty;
  set PK4REC empty;
  ;
  PK4REC.XWHCD = PK06M100.XWHCD;
  PK4REC.KUCCOID = PK06M100.KUCCOID;
  ;
  if (PK06M100.XBCCD == "08") /* if Cole-Haan*/
    if (PK06M100.KUCCOID > 99999 /**/
     && PK06M100.KUCCOID < 8000000)
      converseLib.validationFailed(427); /* invalid cole-haan customer*/
      set PK06M100.KUCCOID cursor, bold;
      PK06W01.PK06WERS = "Y";
      return;
    else
      if (PK06M100.KUCCOID > 8999999) /**/
        converseLib.validationFailed(427); /* invalid cole-haan customer*/
        set PK06M100.KUCCOID cursor, bold;
        PK06W01.PK06WERS = "Y";
        return;
      else
        XP0FW01.KUCCOID = PK06M100.KUCCOID;
        XP0FW01.XBCCD = PK06M100.XBCCD;
        XP0FS01(); /* look for Cole-Haan cust*/
        PK4REC.KUCCOID = XP0FW01.XP0FW01-INTERNAL;
                                   /* move C-H number to pk4rec*/
      end
    end
  else
    if (PK06M100.KUCCOID > 7999999 /* if Cole-Haan*/
     && PK06M100.KUCCOID < 9000000)
      XP0FW01.KUCCOID = PK06M100.KUCCOID;
      XP0FW01.XBCCD = PK06M100.XBCCD;
      XP0FS01(); /* look for Cole-Haan cust*/
      PK4REC.KUCCOID = XP0FW01.XP0FW01-INTERNAL;
                                   /* move it to pk4rec*/
    end
  end
  ;
  ;
  PK4REC.KUMSTRID = -1;
  PK4REC.XNXCD = -1;
  ;
  PWIREC.PWIFUNC = "S2";
  PK06121(); /* open set dpick.vpoolh01*/
  PWIREC.PWIFUNC = "N2";
  PK06121(); /* fetcn nxt dpick.vpoolh01*/
  if (SQLCA.VAGen_SQLCODE == 100)
    PK06W01.PK06WERS = "Y";
    converseLib.validationFailed(11);
    set PK06M100.KUCCOID cursor, bold;
    set PK06M100.KUMSTRID bold;
    set PK06M100.XNXCD bold;
  else
    if (PK4REC.XBCCD == " ") /* no brand on pool record*/
  /* next sentence                      /*   skip around*/
    else
      if (PK06M100.XBCCD == " ") /* no brand on map*/
        PK06M100.XBCCD = PK4REC.XBCCD; /* use the pk4 brand*/
      else
        if (PK4REC.XBCCD != PK06M100.XBCCD) /* pk4 brand ne map brand*/
          PK06M100.VAGen_EZEMSG = "BRAND CODE ON MAP OVERRIDDEN BY BRAND CODE FROM POOL HDR"; /* override the map*/
          PK06M100.XBCCD = PK4REC.XBCCD;
        end
      end
    end
  end
  ;
  ;
  ;
  while (SQLCA.VAGen_SQLCODE == +0
   && PK06W01.PK06WERS != "Y")
    PK06131(); /* load working storage*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE != -911)
    PWIREC.PWIFUNC = "C2";
    PK06121(); /* close set dpick.vpoolh01*/
  end
  ;
   /* -end of: pk06130 - load by customer ------------------------*/
end // end PK06130

// move cust vpoolh01 to array
Function PK06131()
   /* ----------- pk06131 - move cust vpoolh01 to array ----------*/
  ;
  ;
  PK06123(); /* screen pool data for selection*/
  ;
  if (PK06W01.PK06WSEL == "Y")
    PK06124();
    if (PK4REC.PK4ORHLD == "Y")
      PKZREC.PKZFUNC = "S1";
      PKBREC.XWHCD = PK4REC.XWHCD;
      PKBREC.PK1CUOID = PK4REC.PK1CUOID;
      PKBREC.PK1NORID = PK4REC.PK1NORID;
      PK06125(); /* select dpick.vorhld01*/
      if (SQLCA.VAGen_SQLCODE == 0
       && PK06W01.PK06WERS != "Y")
        PKZREC.PKZFUNC = "N1";
        PK06125(); /* select nxt dpick.vorhld01*/
      end
      if (SQLCA.VAGen_SQLCODE == 100)
        PK06132();
      else
        while (SQLCA.VAGen_SQLCODE == 0)
          PK06132();
        end
      end
      if (SQLCA.VAGen_SQLCODE != -911)
        PKZREC.PKZFUNC = "C1";
        PK06125();
      end
    else
      if (PK06W01.PK06WWD1 == 0) /* since order not on hold do ONLY*/
                                   /* if rel date NOT input in pk06m100*/
        ;
         /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
                      /* LOAD WORKING STORAGE ARRAY                   **/
         /* if we made it this far all selections have passed and we  **/
         /* have a record to place in the pk06w04 array.              **/
         /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
        PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
        PK06W04.PK06WCNT = PK06W04.PK06WCNT + 1;
        PK06W04.PK4ORHLD[PK06WIX4] = PK4REC.PK4ORHLD;
        if (PK4REC.PK4ORHLD == "Y")
          if (PK06M100.PK06MARL == "Y")
            PK06W04.PK06WSEL[PK06WIX4] = "R";
          end
        else
          if (PK06M100.PK06MAHD == "Y")
            PK06W04.PK06WSEL[PK06WIX4] = "H";
          end
        end
        PK06W04.PK1CUOID[PK06WIX4] = PK4REC.PK1CUOID;
        PK06W04.PK1NORID[PK06WIX4] = PK4REC.PK1NORID;
        PK06W04.XOTCD[PK06WIX4] = PK4REC.XOTCD;
        PK06W04.XBCCD[PK06WIX4] = PK4REC.XBCCD;
        PK06W04.KUCCOID[PK06WIX4] = PK4REC.KUCCOID;
        PK06W04.KUMSTRID[PK06WIX4] = PK4REC.KUMSTRID;
        PK06W04.XNXCD[PK06WIX4] = PK4REC.XNXCD;
        PK06W04.TF1CARCD[PK06WIX4] = PK4REC.TF1CARCD;
        PK06W04.OP1DSBDT[PK06WIX4] = PK4REC.OP1DSBDT;
        PK06W04.PK4OTUNT[PK06WIX4] = PK4REC.PK4OTUNT;
        if (PK4REC.PK4PLNDT > 0)
          PK06W04.PK06WPLF[PK06WIX4] = "*";
        end
        ;
         /* get store short name*/
        if (PK4REC.KUCCOID != PK6REC.KUCCOID
         || PK4REC.KUMSTRID != PK6REC.KUMSTRID)
          set PK6REC empty;
          PK6REC.KUCCOID = PK4REC.KUCCOID;
          PK6REC.KUMSTRID = PK4REC.KUMSTRID;
          PK06127();
          if (VAGen_SQLCODE != 0)
            PK6REC.KUMSTSNM = "UNKN";
          end
        end
        PK06W04.PK06WSNM[PK06WIX4] = PK6REC.KUMSTSNM;
      end
    end
  end
  ;
  if (PK06W01.PK06WERS != "Y")
    if (PK06W04.PK06WCNT >= PK06W04.PK06WMAX)
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(304);
    else
      PWIREC.PWIFUNC = "N2";
      PK06121(); /* fetch next vpoolh01(n2)*/
    end
  end
  ;
   /* ------ end: pk06131 - move cust vpoolh01 to array ----------*/
end // end PK06131

// move cust holds to array
Function PK06132()
   /* -------------- pk06132 - load holds by release date -----*/
  ;
  PK06W01.PK06WSEL = "Y";
  ;
  if (PK06W01.PK06WWD1 != 0)
    if (PK06W01.PK06WWD2 != 0)
      if (PK06W01.PK06WWD1 > PKBREC.PKBRELDT
       || PK06W01.PK06WWD2 < PKBREC.PKBRELDT)
        PK06W01.PK06WSEL = "N";
      end
    else
      if (PK06W01.PK06WWD1 > PKBREC.PKBRELDT)
        PK06W01.PK06WSEL = "N";
      end
    end
  end
  ;
  ;
  if (PK06M100.XHRCD != " "
   && PKBREC.XHRCD != PK06M100.XHRCD)
    PK06W01.PK06WSEL = "N";
  end
  ;
  if (PK06W01.PK06WSEL == "Y"
   && PK06W01.PK06WERS != "Y")
     /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
                  /* LOAD WORKING STORAGE ARRAY                   **/
     /* if we made it this far all selections have passed and we  **/
     /* have a record to place in the pk06w04 array.              **/
     /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
    PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
    PK06W04.PK06WCNT = PK06W04.PK06WCNT + 1;
    PK06W04.PK4ORHLD[PK06WIX4] = PK4REC.PK4ORHLD;
    if (PK4REC.PK4ORHLD == "Y")
      if (PK06M100.PK06MARL == "Y")
        PK06W04.PK06WSEL[PK06WIX4] = "R";
      end
    else
      if (PK06M100.PK06MAHD == "Y")
        PK06W04.PK06WSEL[PK06WIX4] = "H";
      end
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      PK06W04.XHRCD[PK06WIX4] = PKBREC.XHRCD;
    else
      PK06W04.XHRCD[PK06WIX4] = "??";
    end
    PK06W04.PKBRELDT[PK06WIX4] = PKBREC.PKBRELDT;
    PK06W04.PK1CUOID[PK06WIX4] = PK4REC.PK1CUOID;
    PK06W04.PK1NORID[PK06WIX4] = PK4REC.PK1NORID;
    PK06W04.XOTCD[PK06WIX4] = PK4REC.XOTCD;
    PK06W04.XBCCD[PK06WIX4] = PK4REC.XBCCD;
    PK06W04.KUCCOID[PK06WIX4] = PK4REC.KUCCOID;
    PK06W04.KUMSTRID[PK06WIX4] = PK4REC.KUMSTRID;
    PK06W04.XNXCD[PK06WIX4] = PK4REC.XNXCD;
    PK06W04.TF1CARCD[PK06WIX4] = PK4REC.TF1CARCD;
    PK06W04.OP1DSBDT[PK06WIX4] = PK4REC.OP1DSBDT;
    PK06W04.PK4OTUNT[PK06WIX4] = PK4REC.PK4OTUNT;
    if (PK4REC.PK4PLNDT > 0)
      PK06W04.PK06WPLF[PK06WIX4] = "*";
    end
    ;
     /* get store short name*/
    set PK6REC empty;
    PK6REC.KUCCOID = PK4REC.KUCCOID;
    PK6REC.KUMSTRID = PK4REC.KUMSTRID;
    PK06127();
    if (VAGen_SQLCODE == 0)
      PK06W04.PK06WSNM[PK06WIX4] = PK6REC.KUMSTSNM;
    else
      PK06W04.PK06WSNM[PK06WIX4] = "UNKN";
    end
    ;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* get hold reason codes*/
    PKZREC.PKZFUNC = "N1";
    PK06125(); /* select nxt dpick.vorhld01*/
  else
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2"; /* Type of error*/
    TA1REC.TA1PGMNM = "PK06132 "; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE            ";
    TA1REC.TA1MAP = "PK06M100"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKBREC.PKBKEY;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  end
  ;
   /* --------- end: pk06132 - load holds by release date -----*/
end // end PK06132

// load by style
Function PK06140()
   /* -------- pk06140 - load by style  --------------------------*/
  ;
  PK06M100.XXXERRID = "PK06140";
  ;
  ;
  set PKPREC empty;
  PKPREC.XWHCD = PK06M100.XWHCD;
  PKPREC.XGPCD = PK06M100.XGPCD;
  PKPREC.SY1STNBR = PK06M100.SY1STNBR;
  PKPREC.SY2CLRID = PK06M100.SY2CLRID;
  PKPREC.XDMCD = PK06M100.XDMCD;
  PKPREC.PC2INSEG = "*";
  PKPREC.XEGCD = "*";
  PKPREC.XPGCD = "*";
  PKPREC.XUMCD = "*";
  PKPREC.XOWCD = "*";
  PKPREC.XQACD = "*";
  ;
  PK06141(); /* open set and fetch first rec(io1870)*/
  if (SQLCA.VAGen_SQLCODE == 100)
    PK06W01.PK06WERS = "Y";
    converseLib.validationFailed(11);
    set PK06M100.XGPCD cursor, bold;
    set PK06M100.SY1STNBR bold;
    set PK06M100.SY2CLRID bold;
    set PK06M100.XDMCD bold;
  else
    if (PKPREC.XBCCD == " ") /* no brand on pool record*/
  /* next sentence                      /*   skip around*/
    else
      if (PK06M100.XBCCD == " ") /* no brand on map*/
        PK06M100.XBCCD = PKPREC.XBCCD; /* use the pkp brand*/
      else
        if (PKPREC.XBCCD != PK06M100.XBCCD) /* pkp brand ne map brand*/
          PK06M100.VAGen_EZEMSG = "BRAND CODE ON MAP OVERRIDDEN BY BRAND CODE FROM POOL HDR"; /* override the map*/
          PK06M100.XBCCD = PKPREC.XBCCD;
        end
      end
    end
  end
  ;
  while (SQLCA.VAGen_SQLCODE == +0
   && PK06W01.PK06WERS != "Y")
    PK06143(); /* load working storage*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE != -911)
    PK06145();
  end
  ;
   /* ----end: pk06140 - load by style  --------------------------*/
end // end PK06140

// select set(s1) dpick.vpoolh02
Function PK06141()
   /* ----------- pk06141 - select set dpick.vpoolh02 ---------*/
  ;
  ;
  PK06M100.XXXERRID = "PK06141";
  PK06M300.XXXERRID = "PK06141";
  ;
  call "IO1870" ("S1", SQLCA, PKPREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    PK06142(); /* fetch next dpick.vpoolh02*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* contention for data base resorce*/
      PK06W01.PK06WERS = "Y";
    else
      converseLib.validationFailed(29); /* fatal error*/
      PK06W01.PK06WERS = "Y";
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PK06141 "; /* Process name*/
      TA1REC.TA1LOC = "OPEN   SET(S1)        ";
      TA1REC.TA1MAP = "PK06M100"; /* Map name*/
      TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPOOLH02"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
    end
  end
  ;
   /* -------------  end process pk06141  --------------------*/
end // end PK06141

// select nxt(n1) dpick.vpoolh02
Function PK06142()
   /* ----------- pk06142 - select set dpick.vpoolh02 ---------*/
  ;
  PK06M100.XXXERRID = "PK06142";
  PK06M300.XXXERRID = "PK06142";
  ;
  call "IO1870" ("N1", SQLCA, PKPREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != +0
   && SQLCA.VAGen_SQLCODE != +100)
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* contention for data base resorce*/
      PK06W01.PK06WERS = "Y";
    else
      converseLib.validationFailed(29); /* fatal error*/
      PK06W01.PK06WERS = "Y";
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PK06142 "; /* Process name*/
      TA1REC.TA1LOC = "SELECT SET(N1)        ";
      TA1REC.TA1MAP = "PK06M100"; /* Map name*/
      TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPOOLH02"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
    end
  end
  ;
   /* -------------  end process pk06142  --------------------*/
end // end PK06142

// move sty/vpoolh01 to array
Function PK06143()
   /* -------------- pk06143 - move data to array ----------------*/
  ;
  set PK4REC empty;
  set PKBREC empty;
  set PKZREC empty;
  set PWIREC empty;
  PK4REC.XWHCD = PKPREC.XWHCD;
  PK4REC.PK1CUOID = PKPREC.PK1CUOID;
  PK4REC.PK1NORID = PKPREC.PK1NORID;
  PWIREC.PWIFUNC = "S ";
  PK06121(); /* select unique vpoolh01*/
  if (PK06W01.PK06WERS != "Y")
    PK06123(); /* screen pool data for selection*/
    if (PK06W01.PK06WSEL == "Y")
      PK06124(); /* format release date*/
      if (PK4REC.PK4ORHLD == "Y")
        PKZREC.PKZFUNC = "S1";
        PKBREC.XWHCD = PK4REC.XWHCD;
        PKBREC.PK1CUOID = PK4REC.PK1CUOID;
        PKBREC.PK1NORID = PK4REC.PK1NORID;
        PK06125(); /* select dpick.vorhld01*/
        if (SQLCA.VAGen_SQLCODE == 0
         && PK06W01.PK06WERS != "Y")
          PKZREC.PKZFUNC = "N1";
          PK06125(); /* select nxt dpick.vorhld01*/
        end
        if (SQLCA.VAGen_SQLCODE == 100)
          PK06144();
        else
          while (SQLCA.VAGen_SQLCODE == 0)
            PK06144();
          end
        end
        if (SQLCA.VAGen_SQLCODE == -911)
          return;
        else
          PKZREC.PKZFUNC = "C1";
          PK06125();
          PK06W01.PK06WSEL = "N";
        end
      else
        if (PK06W01.PK06WWD1 == 0) /* order not on hold*/
          ;
           /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
                        /* LOAD WORKING STORAGE ARRAY                   **/
           /* if we made it this far all selections have passed and we  **/
           /* have a record to place in the pk06w04 array.              **/
           /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
          PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
          PK06W04.PK06WCNT = PK06W04.PK06WCNT + 1;
          PK06W04.PK1CUOID[PK06WIX4] = PK4REC.PK1CUOID;
          PK06W04.PK1NORID[PK06WIX4] = PK4REC.PK1NORID;
          PK06W04.PK4ORHLD[PK06WIX4] = PK4REC.PK4ORHLD;
          if (PK4REC.PK4ORHLD == "Y")
            if (PK06M100.PK06MARL == "Y")
              PK06W04.PK06WSEL[PK06WIX4] = "R";
            end
          else
            if (PK06M100.PK06MAHD == "Y")
              PK06W04.PK06WSEL[PK06WIX4] = "H";
            end
          end
          PK06W04.XOTCD[PK06WIX4] = PK4REC.XOTCD;
          PK06W04.XBCCD[PK06WIX4] = PK4REC.XBCCD;
          PK06W04.KUCCOID[PK06WIX4] = PK4REC.KUCCOID;
          PK06W04.KUMSTRID[PK06WIX4] = PK4REC.KUMSTRID;
          PK06W04.XNXCD[PK06WIX4] = PK4REC.XNXCD;
          PK06W04.TF1CARCD[PK06WIX4] = PK4REC.TF1CARCD;
          PK06W04.OP1DSBDT[PK06WIX4] = PK4REC.OP1DSBDT;
          PK06W04.PK4OTUNT[PK06WIX4] = PK4REC.PK4OTUNT;
          if (PK4REC.PK4PLNDT > 0)
            PK06W04.PK06WPLF[PK06WIX4] = "*";
          end
          ;
           /* get store short name*/
          set PK6REC empty;
          PK6REC.KUCCOID = PK4REC.KUCCOID;
          PK6REC.KUMSTRID = PK4REC.KUMSTRID;
          PK06127();
          if (VAGen_SQLCODE == 0)
            PK06W04.PK06WSNM[PK06WIX4] = PK6REC.KUMSTSNM;
          else
            PK06W04.PK06WSNM[PK06WIX4] = "UNKN";
          end
          ;
        end
      end
    end
  end
  ;
  ;
  if (PK06W04.PK06WCNT >= PK06W04.PK06WMAX)
    PK06M100.XXXERRID = "PK06143";
    PK06M300.XXXERRID = "PK06143";
    PK06W01.PK06WERS = "Y";
    converseLib.validationFailed(304);
  else
    PK06142(); /* select next vpoolh02*/
  end
  ;
   /* ---------- end of pk06143 - move data to array -------------*/
  ;
end // end PK06143

// screen hold rlse dates
Function PK06144()
   /* -------------- pk06144 - screen holds for release date -----*/
  ;
  PK06W01.PK06WSEL = "Y";
  ;
  if (PK06W01.PK06WWD1 != 0)
    if (PK06W01.PK06WWD2 != 0)
      if (PK06W01.PK06WWD1 > PKBREC.PKBRELDT
       || PK06W01.PK06WWD2 < PKBREC.PKBRELDT)
        PK06W01.PK06WSEL = "N";
      end
    else
      if (PK06W01.PK06WWD1 > PKBREC.PKBRELDT)
        PK06W01.PK06WSEL = "N";
      end
    end
  end
  ;
  if (PK06M100.XHRCD != " "
   && PK06M100.XHRCD != PKBREC.XHRCD)
    PK06W01.PK06WSEL = "N";
  end
  ;
  if (PK06W01.PK06WSEL == "Y"
   && PK06W01.PK06WERS != "Y")
     /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
                  /* LOAD WORKING STORAGE ARRAY                   **/
     /* if we made it this far all selections have passed and we  **/
     /* have a record to place in the pk06w04 array.              **/
     /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
    PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
    PK06W04.PK06WCNT = PK06W04.PK06WCNT + 1;
    PK06W04.PK1CUOID[PK06WIX4] = PK4REC.PK1CUOID;
    PK06W04.PK1NORID[PK06WIX4] = PK4REC.PK1NORID;
    PK06W04.PK4ORHLD[PK06WIX4] = PK4REC.PK4ORHLD;
    if (PK4REC.PK4ORHLD == "Y")
      if (PK06M100.PK06MARL == "Y")
        PK06W04.PK06WSEL[PK06WIX4] = "R";
      end
    else
      if (PK06M100.PK06MAHD == "Y")
        PK06W04.PK06WSEL[PK06WIX4] = "H";
      end
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      PK06W04.XHRCD[PK06WIX4] = PKBREC.XHRCD;
    else
      PK06W04.XHRCD[PK06WIX4] = "??";
    end
    PK06W04.PKBRELDT[PK06WIX4] = PKBREC.PKBRELDT;
    PK06W04.XOTCD[PK06WIX4] = PK4REC.XOTCD;
    PK06W04.XBCCD[PK06WIX4] = PK4REC.XBCCD;
    PK06W04.KUCCOID[PK06WIX4] = PK4REC.KUCCOID;
    PK06W04.KUMSTRID[PK06WIX4] = PK4REC.KUMSTRID;
    PK06W04.XNXCD[PK06WIX4] = PK4REC.XNXCD;
    PK06W04.TF1CARCD[PK06WIX4] = PK4REC.TF1CARCD;
    PK06W04.OP1DSBDT[PK06WIX4] = PK4REC.OP1DSBDT;
    PK06W04.PK4OTUNT[PK06WIX4] = PK4REC.PK4OTUNT;
    if (PK4REC.PK4PLNDT > 0)
      PK06W04.PK06WPLF[PK06WIX4] = "*";
    end
    ;
     /* get store short name*/
    set PK6REC empty;
    PK6REC.KUCCOID = PK4REC.KUCCOID;
    PK6REC.KUMSTRID = PK4REC.KUMSTRID;
    PK06127();
    if (VAGen_SQLCODE == 0)
      PK06W04.PK06WSNM[PK06WIX4] = PK6REC.KUMSTSNM;
    else
      PK06W04.PK06WSNM[PK06WIX4] = "UNKN";
    end
    ;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* get hold reason codes*/
    PKZREC.PKZFUNC = "N1";
    PK06125(); /* select nxt dpick.vorhld01*/
  else
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2"; /* Type of error*/
    TA1REC.TA1PGMNM = "PK06144 "; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE            ";
    TA1REC.TA1MAP = "PK06M100"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKBREC.PKBKEY;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  end
  ;
   /* ---------- end of pk06144 - move data to array -------------*/
end // end PK06144

// close  set(c1) dpick.vpoolh02
Function PK06145()
   /* ----------- pk06145 - select set dpick.vpoolh02 ---------*/
  ;
  PK06M100.XXXERRID = "PK06145";
  PK06M300.XXXERRID = "PK06145";
  ;
  call "IO1870" ("C1", SQLCA, PKPREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != +0)
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* contention for data base resorce*/
      PK06W01.PK06WERS = "Y";
    else
      converseLib.validationFailed(29); /* fatal error*/
      PK06W01.PK06WERS = "Y";
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PK06145 "; /* Process name*/
      TA1REC.TA1LOC = "CLOSE  SET(C1)        ";
      TA1REC.TA1MAP = "PK06M100"; /* Map name*/
      TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPOOLH02"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
    end
  end
  ;
   /* -------------  end process pk06145  --------------------*/
end // end PK06145

// load by sp1cd
Function PK06150()
   /* -------- pk06150 - load by spgm ---------------------------*/
  ;
  PK06M100.XXXERRID = "PK06150";
  ;
  set PWIREC empty;
  set PK4REC empty;
  PK4REC.XWHCD = PK06M100.XWHCD;
  PK4REC.SP1ID = PK06M100.SP1ID;
  PWIREC.PWIFUNC = "S1";
  PK06121(); /* open set and fetch first rec*/
  PWIREC.PWIFUNC = "N1";
  PK06121(); /* open set and fetch first rec*/
  if (SQLCA.VAGen_SQLCODE == 100)
    PK06W01.PK06WERS = "Y";
    converseLib.validationFailed(11);
    set PK06M100.SP1ID cursor, bold;
  else
    if (PK4REC.XBCCD == " ") /* no brand on pool record*/
  /* next sentence                      /*   skip around*/
    else
      if (PK06M100.XBCCD == " ") /* no brand on map*/
        PK06M100.XBCCD = PK4REC.XBCCD; /* use the pk4 brand*/
      else
        if (PK4REC.XBCCD != PK06M100.XBCCD) /* pk4 brand ne map brand*/
          PK06M100.VAGen_EZEMSG = "BRAND CODE ON MAP OVERRIDDEN BY BRAND CODE FROM POOL HDR"; /* override the map*/
          PK06M100.XBCCD = PK4REC.XBCCD;
        end
      end
    end
  end
  ;
  while (SQLCA.VAGen_SQLCODE == +0
   && PK06W01.PK06WERS != "Y")
    PK06151(); /* load working storage*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE != -911)
    PWIREC.PWIFUNC = "C1";
    PK06121(); /* close set*/
  end
end // end PK06150

// move 'sp1cd' data to array
Function PK06151()
   /* -------------- pk06151 - move data to array ----------------*/
  ;
  PK06123(); /* screen pool data for selection*/
  ;
  if (PK06W01.PK06WSEL == "Y")
    PK06124();
    if (PK4REC.PK4ORHLD == "Y")
      PKZREC.PKZFUNC = "S1";
      PKBREC.XWHCD = PK4REC.XWHCD;
      PKBREC.PK1CUOID = PK4REC.PK1CUOID;
      PKBREC.PK1NORID = PK4REC.PK1NORID;
      PK06125(); /* select dpick.vorhld01*/
      if (SQLCA.VAGen_SQLCODE == 0
       && PK06W01.PK06WERS != "Y")
        PKZREC.PKZFUNC = "N1";
        PK06125(); /* select nxt dpick.vorhld01*/
      end
      if (SQLCA.VAGen_SQLCODE == 100)
        PK06152();
      else
        while (SQLCA.VAGen_SQLCODE == 0)
          PK06152();
        end
      end
      if (SQLCA.VAGen_SQLCODE != -911)
        PKZREC.PKZFUNC = "C1";
        PK06125();
      end
    else
      ;
      if (PK06W01.PK06WWD1 == 0)
         /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
                      /* LOAD WORKING STORAGE ARRAY                   **/
         /* if we made it this far all selections have passed and we  **/
         /* have a record to place in the pk06w04 array.              **/
         /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
        PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
        PK06W04.PK06WCNT = PK06W04.PK06WCNT + 1;
        PK06W04.PK4ORHLD[PK06WIX4] = PK4REC.PK4ORHLD;
        if (PK4REC.PK4ORHLD == "Y")
          if (PK06M100.PK06MARL == "Y")
            PK06W04.PK06WSEL[PK06WIX4] = "R";
          end
        else
          if (PK06M100.PK06MAHD == "Y")
            PK06W04.PK06WSEL[PK06WIX4] = "H";
          end
        end
        PK06W04.PK1CUOID[PK06WIX4] = PK4REC.PK1CUOID;
        PK06W04.PK1NORID[PK06WIX4] = PK4REC.PK1NORID;
        PK06W04.XOTCD[PK06WIX4] = PK4REC.XOTCD;
        PK06W04.XBCCD[PK06WIX4] = PK4REC.XBCCD;
        PK06W04.KUCCOID[PK06WIX4] = PK4REC.KUCCOID;
        PK06W04.KUMSTRID[PK06WIX4] = PK4REC.KUMSTRID;
        PK06W04.XNXCD[PK06WIX4] = PK4REC.XNXCD;
        PK06W04.TF1CARCD[PK06WIX4] = PK4REC.TF1CARCD;
        PK06W04.OP1DSBDT[PK06WIX4] = PK4REC.OP1DSBDT;
        PK06W04.PK4OTUNT[PK06WIX4] = PK4REC.PK4OTUNT;
        if (PK4REC.PK4PLNDT > 0)
          PK06W04.PK06WPLF[PK06WIX4] = "*";
        end
        ;
         /* get store short name*/
        if (PK4REC.KUCCOID != PK6REC.KUCCOID
         || PK4REC.KUMSTRID != PK6REC.KUMSTRID)
          set PK6REC empty;
          PK6REC.KUCCOID = PK4REC.KUCCOID;
          PK6REC.KUMSTRID = PK4REC.KUMSTRID;
          PK06127();
          if (VAGen_SQLCODE != 0)
            PK6REC.KUMSTSNM = "UNKN";
          end
        end
        PK06W04.PK06WSNM[PK06WIX4] = PK6REC.KUMSTSNM;
        ;
      end
    end
  end
  ;
  if (PK06W01.PK06WERS != "Y")
    if (PK06W04.PK06WCNT >= PK06W04.PK06WMAX)
      PK06M100.XXXERRID = "PK06151";
      PK06M300.XXXERRID = "PK06151";
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(304);
    else
      PWIREC.PWIFUNC = "N1";
      PK06121(); /* fetch next vpoolh01(n3)*/
    end
  end
  ;
   /* ---------- end of pk06151 - move data to array -------------*/
end // end PK06151

// screen hold rlse dates
Function PK06152()
   /* -------------- pk06152 - screen holds for release date -----*/
  ;
  PK06W01.PK06WSEL = "Y";
  ;
  if (PK06W01.PK06WWD1 != 0)
    if (PK06W01.PK06WWD2 != 0)
      if (PK06W01.PK06WWD1 > PKBREC.PKBRELDT
       || PK06W01.PK06WWD2 < PKBREC.PKBRELDT)
        PK06W01.PK06WSEL = "N";
      end
    else
      if (PK06W01.PK06WWD1 > PKBREC.PKBRELDT)
        PK06W01.PK06WSEL = "N";
      end
    end
  end
  ;
  if (PK06M100.XHRCD != " "
   && PK06M100.XHRCD != PKBREC.XHRCD)
    PK06W01.PK06WSEL = "N";
  end
  ;
  if (PK06W01.PK06WSEL == "Y"
   && PK06W01.PK06WERS != "Y")
     /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
                  /* LOAD WORKING STORAGE ARRAY                   **/
     /* if we made it this far all selections have passed and we  **/
     /* have a record to place in the pk06w04 array.              **/
     /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
    PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
    PK06W04.PK06WCNT = PK06W04.PK06WCNT + 1;
    PK06W04.PK4ORHLD[PK06WIX4] = PK4REC.PK4ORHLD;
    if (PK4REC.PK4ORHLD == "Y")
      if (PK06M100.PK06MARL == "Y")
        PK06W04.PK06WSEL[PK06WIX4] = "R";
      end
    else
      if (PK06M100.PK06MAHD == "Y")
        PK06W04.PK06WSEL[PK06WIX4] = "H";
      end
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      PK06W04.XHRCD[PK06WIX4] = PKBREC.XHRCD;
    else
      PK06W04.XHRCD[PK06WIX4] = "??";
    end
    PK06W04.PKBRELDT[PK06WIX4] = PKBREC.PKBRELDT;
    PK06W04.PK1CUOID[PK06WIX4] = PK4REC.PK1CUOID;
    PK06W04.PK1NORID[PK06WIX4] = PK4REC.PK1NORID;
    PK06W04.XOTCD[PK06WIX4] = PK4REC.XOTCD;
    PK06W04.XBCCD[PK06WIX4] = PK4REC.XBCCD;
    PK06W04.KUCCOID[PK06WIX4] = PK4REC.KUCCOID;
    PK06W04.KUMSTRID[PK06WIX4] = PK4REC.KUMSTRID;
    PK06W04.XNXCD[PK06WIX4] = PK4REC.XNXCD;
    PK06W04.TF1CARCD[PK06WIX4] = PK4REC.TF1CARCD;
    PK06W04.OP1DSBDT[PK06WIX4] = PK4REC.OP1DSBDT;
    PK06W04.PK4OTUNT[PK06WIX4] = PK4REC.PK4OTUNT;
    if (PK4REC.PK4PLNDT > 0)
      PK06W04.PK06WPLF[PK06WIX4] = "*";
    end
    ;
     /* get store short name*/
    if (PK4REC.KUCCOID != PK6REC.KUCCOID
     || PK4REC.KUMSTRID != PK6REC.KUMSTRID)
      set PK6REC empty;
      PK6REC.KUCCOID = PK4REC.KUCCOID;
      PK6REC.KUMSTRID = PK4REC.KUMSTRID;
      PK06127();
      if (VAGen_SQLCODE == 0)
        PK6REC.KUMSTSNM = "UNKN";
      end
    end
    PK06W04.PK06WSNM[PK06WIX4] = PK6REC.KUMSTSNM;
    ;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* get hold reason codes*/
    PKZREC.PKZFUNC = "N1";
    PK06125(); /* select nxt dpick.vorhld01*/
  else
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2"; /* Type of error*/
    TA1REC.TA1PGMNM = "PK06152 "; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE            ";
    TA1REC.TA1MAP = "PK06M100"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKBREC.PKBKEY;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  end
  ;
   /* ---------- end of pk06152 - move data to array -------------*/
end // end PK06152

// load by hold code/rel date
Function PK06160()
   /* -------- pk06160 - load by hold code & rlse date -----------*/
  ;
  PK06M100.XXXERRID = "PK06160";
  ;
  set PKZREC empty;
  set PKBREC empty;
  PKZREC.PKZFUNC = "S2";
  PKBREC.XWHCD = PK06M100.XWHCD;
  if (PK06M100.XHRCD != " ")
    PKBREC.XHRCD = PK06M100.XHRCD;
  else
    PKBREC.XHRCD = "*";
  end
  ;
  if (PK06M100.PK06MRFM == 99)
    PKBREC.PKBRELDT = 999999999;
  else
    PKBREC.PKBRELDT = -1;
  end
  ;
  PKBREC.PKBPLRDT = -1;
  ;
  PK06125(); /* open set dpick.vorhold01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    PKZREC.PKZFUNC = "N2";
    PK06125(); /* fetch next dpick.vorhold01*/
    if (SQLCA.VAGen_SQLCODE == 100)
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(11);
      if (PK06M100.XHRCD != " ")
        set PK06M100.XHRCD cursor, bold;
      else
        set PK06M100.PK06MRFM cursor, bold;
        set PK06M100.PK06MRFD cursor;
        set PK06M100.PK06MRFY cursor;
      end
    else
      while (SQLCA.VAGen_SQLCODE == +0
       && PK06W01.PK06WERS != "Y")
        PK06165(); /* load working storage*/
      end
    end
  end
  ;
  ;
  if (PK06M100.XBCCD != " ") /* brand code entered ?*/
    PK06M100.XBCCD = " "; /* erase it*/
    PK06M100.VAGen_EZEMSG = "BRAND CODE NOT APPLICABLE WITH HOLD CODE OPTION";
  end
  ;
  ;
  if (SQLCA.VAGen_SQLCODE != -911)
    PKZREC.PKZFUNC = "C2";
    PK06125();
  end
  ;
   /* -- end - pk06160 - load by hold code & rlse date -----------*/
end // end PK06160

// move data to array
Function PK06165()
   /* -------------- pk06165 - move data to array ----------------*/
  ;
  ;
  PK06W01.PK06WSEL = "Y";
  PK06124();
  ;
  if (PK06W01.PK06WWD1 != 0)
    if (PK06W01.PK06WWD2 != 0)
      if (PK06W01.PK06WWD1 > PKBREC.PKBRELDT
       || PK06W01.PK06WWD2 < PKBREC.PKBRELDT)
        PK06W01.PK06WSEL = "N";
      end
    else
      if (PK06W01.PK06WWD1 > PKBREC.PKBRELDT)
        PK06W01.PK06WSEL = "N";
      end
    end
  end
  ;
  if (PK06M100.XHRCD != " "
   && PK06M100.XHRCD != PKBREC.XHRCD)
    PK06W01.PK06WSEL = "N";
  end
  ;
  if (PK06W01.PK06WSEL == "Y")
    set PWIREC empty;
    set PK4REC empty;
    PK4REC.XWHCD = PKBREC.XWHCD;
    PK4REC.PK1CUOID = PKBREC.PK1CUOID;
    PK4REC.PK1NORID = PKBREC.PK1NORID;
    PWIREC.PWIFUNC = "S ";
    PK06121(); /* select unique vpoolh01*/
    if (PK06W01.PK06WERS != "Y")
      PK06123(); /* screen pool data for selection*/
    end
    if (PK06W01.PK06WSEL == "Y"
     && PK06W01.PK06WERS != "Y")
       /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
                    /* LOAD WORKING STORAGE ARRAY                   **/
       /* if we made it this far all selections have passed and we  **/
       /* have a record to place in the pk06w04 array.              **/
       /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
      PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
      PK06W04.PK06WCNT = PK06W04.PK06WCNT + 1;
      PK06W04.PK1CUOID[PK06WIX4] = PK4REC.PK1CUOID;
      PK06W04.PK1NORID[PK06WIX4] = PK4REC.PK1NORID;
      PK06W04.PK4ORHLD[PK06WIX4] = PK4REC.PK4ORHLD;
      if (PK4REC.PK4ORHLD == "Y")
        if (PK06M100.PK06MARL == "Y")
          PK06W04.PK06WSEL[PK06WIX4] = "R";
        end
      else
        if (PK06M100.PK06MAHD == "Y")
          PK06W04.PK06WSEL[PK06WIX4] = "H";
        end
      end
      PK06W04.XOTCD[PK06WIX4] = PK4REC.XOTCD;
      PK06W04.XBCCD[PK06WIX4] = PK4REC.XBCCD;
      PK06W04.KUCCOID[PK06WIX4] = PK4REC.KUCCOID;
      PK06W04.KUMSTRID[PK06WIX4] = PK4REC.KUMSTRID;
      PK06W04.XNXCD[PK06WIX4] = PK4REC.XNXCD;
      PK06W04.TF1CARCD[PK06WIX4] = PK4REC.TF1CARCD;
      PK06W04.OP1DSBDT[PK06WIX4] = PK4REC.OP1DSBDT;
      PK06W04.PK4OTUNT[PK06WIX4] = PK4REC.PK4OTUNT;
      if (PK4REC.PK4PLNDT > 0)
        PK06W04.PK06WPLF[PK06WIX4] = "*";
      end
      ;
      if (PK4REC.KUCCOID == 0)
        PK06W04.PK06WSNM[PK06WIX4] = "NOT IN POOL";
      else
         /* get store short name*/
        set PK6REC empty;
        PK6REC.KUCCOID = PK4REC.KUCCOID;
        PK6REC.KUMSTRID = PK4REC.KUMSTRID;
        PK06127();
        if (VAGen_SQLCODE == 0)
          PK06W04.PK06WSNM[PK06WIX4] = PK6REC.KUMSTSNM;
        else
          PK06W04.PK06WSNM[PK06WIX4] = "UNKN";
        end
      end
      ;
      /* get hold reason codes*/
      PK06W04.XHRCD[PK06WIX4] = PKBREC.XHRCD;
      PK06W04.PKBRELDT[PK06WIX4] = PKBREC.PKBRELDT;
      ;
    end
    ;
  end
  ;
  if (PK06W04.PK06WCNT >= PK06W04.PK06WMAX)
    PK06M100.XXXERRID = "PK06165";
    PK06M300.XXXERRID = "PK06165";
    PK06W01.PK06WERS = "Y";
    converseLib.validationFailed(304);
  else
    PKZREC.PKZFUNC = "N2";
    PK06125(); /* select next vorhld01*/
  end
  ;
   /* ---------- end of pk06165 - move data to array -------------*/
end // end PK06165

// load by carrier/dates etc
Function PK06170()
   /* -------- pk06170 - load by carr-etc ------------------------*/
  ;
  PK06M100.XXXERRID = "PK06170";
  ;
  set PWIREC empty;
  set PK4REC empty;
  PK4REC.XWHCD = PK06M100.XWHCD;
  if (PK06M100.TF1CARCD == " ")
    PK4REC.TF1CARCD = "*";
  else
    PK4REC.TF1CARCD = PK06M100.TF1CARCD;
  end
  ;
  PWIREC.OP1CUNDT[1] = PK06W01.OP1CUNDT[1];
  PWIREC.OP1CUNDT[2] = PK06W01.OP1CUNDT[2];
  PWIREC.OP1DSBDT[1] = PK06W01.OP1DSBDT[1];
  PWIREC.OP1DSBDT[2] = PK06W01.OP1DSBDT[2];
  PWIREC.PK4PLNDT[1] = -1;
  PWIREC.PK4PLNDT[2] = 999999999;
  ;
  PWIREC.PWIFUNC = "S5";
  PK06121(); /* open set   dpick.vpoolh01*/
  PWIREC.PWIFUNC = "N5";
  PK06121(); /* fetch next*/
  if (SQLCA.VAGen_SQLCODE == 100)
    PK06W01.PK06WERS = "Y";
    converseLib.validationFailed(11);
    if (PK06M100.TF1CARCD != " ")
      set PK06M100.TF1CARCD cursor, bold;
    else
      set PK06M100.PK06MNFM cursor, bold;
      set PK06M100.PK06MNFD bold;
      set PK06M100.PK06MNFY bold;
      set PK06M100.PK06MNTM bold;
      set PK06M100.PK06MNTD bold;
      set PK06M100.PK06MNTY bold;
      set PK06M100.PK06MDFM bold;
      set PK06M100.PK06MDFD bold;
      set PK06M100.PK06MDFY bold;
      set PK06M100.PK06MDTM bold;
      set PK06M100.PK06MDTD bold;
      set PK06M100.PK06MDTY bold;
    end
  end
  ;
  while (SQLCA.VAGen_SQLCODE == +0
   && PK06W01.PK06WERS != "Y")
    PK06171(); /* load working storage*/
  end
  ;
  ;
  if (PK06M100.XBCCD != " ") /* brand code entered ?*/
    PK06M100.XBCCD = " "; /* erase it*/
    PK06M100.VAGen_EZEMSG = "BRAND CODE NOT APPLICABLE WITH CARRIER OPTION";
  end
  ;
  if (SQLCA.VAGen_SQLCODE != -911)
    PWIREC.PWIFUNC = "C5";
    PK06121(); /* close set*/
  end
end // end PK06170

// move carrier/dates to array
Function PK06171()
   /* -------------- pk06171 - move data to array ----------------*/
  ;
  PK06123(); /* screen pool data for selection*/
  ;
  if (PK06W01.PK06WSEL == "Y")
    PK06124();
    if (PK4REC.PK4ORHLD == "Y")
      PKZREC.PKZFUNC = "S1";
      PKBREC.XWHCD = PK4REC.XWHCD;
      PKBREC.PK1CUOID = PK4REC.PK1CUOID;
      PKBREC.PK1NORID = PK4REC.PK1NORID;
      PK06125(); /* select dpick.vorhld01*/
      if (SQLCA.VAGen_SQLCODE == 0
       && PK06W01.PK06WERS != "Y")
        PKZREC.PKZFUNC = "N1";
        PK06125(); /* select nxt dpick.vorhld01*/
      end
      if (SQLCA.VAGen_SQLCODE == 100)
        PK06172(); /* load hold codes*/
      else
        while (SQLCA.VAGen_SQLCODE == 0)
          PK06172(); /* load hold codes*/
        end
      end
      if (SQLCA.VAGen_SQLCODE != -911)
        PKZREC.PKZFUNC = "C1";
        PK06125();
      end
    else
      ;
      if (PK06W01.PK06WWD1 == 0)
         /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
                      /* LOAD WORKING STORAGE ARRAY                   **/
         /* if we made it this far all selections have passed and we  **/
         /* have a record to place in the pk06w04 array.              **/
         /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
        PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
        PK06W04.PK06WCNT = PK06W04.PK06WCNT + 1;
        PK06W04.PK4ORHLD[PK06WIX4] = PK4REC.PK4ORHLD;
        if (PK4REC.PK4ORHLD == "Y")
          if (PK06M100.PK06MARL == "Y")
            PK06W04.PK06WSEL[PK06WIX4] = "R";
          end
        else
          if (PK06M100.PK06MAHD == "Y")
            PK06W04.PK06WSEL[PK06WIX4] = "H";
          end
        end
        PK06W04.PK1CUOID[PK06WIX4] = PK4REC.PK1CUOID;
        PK06W04.PK1NORID[PK06WIX4] = PK4REC.PK1NORID;
        PK06W04.XOTCD[PK06WIX4] = PK4REC.XOTCD;
        PK06W04.XBCCD[PK06WIX4] = PK4REC.XBCCD;
        PK06W04.KUCCOID[PK06WIX4] = PK4REC.KUCCOID;
        PK06W04.KUMSTRID[PK06WIX4] = PK4REC.KUMSTRID;
        PK06W04.XNXCD[PK06WIX4] = PK4REC.XNXCD;
        PK06W04.TF1CARCD[PK06WIX4] = PK4REC.TF1CARCD;
        PK06W04.OP1DSBDT[PK06WIX4] = PK4REC.OP1DSBDT;
        PK06W04.PK4OTUNT[PK06WIX4] = PK4REC.PK4OTUNT;
        if (PK4REC.PK4PLNDT > 0)
          PK06W04.PK06WPLF[PK06WIX4] = "*";
        end
        ;
         /* get store short name*/
        if (PK4REC.KUCCOID != PK6REC.KUCCOID
         || PK4REC.KUMSTRID != PK6REC.KUMSTRID)
          set PK6REC empty;
          PK6REC.KUCCOID = PK4REC.KUCCOID;
          PK6REC.KUMSTRID = PK4REC.KUMSTRID;
          PK06127();
          if (VAGen_SQLCODE != 0)
            PK6REC.KUMSTSNM = "UNKN";
          end
        end
        PK06W04.PK06WSNM[PK06WIX4] = PK6REC.KUMSTSNM;
        ;
      end
    end
  end
  ;
  if (PK06W01.PK06WERS != "Y")
    if (PK06W04.PK06WCNT >= PK06W04.PK06WMAX)
      PK06M100.XXXERRID = "PK06171";
      PK06M300.XXXERRID = "PK06171";
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(304);
    else
      PWIREC.PWIFUNC = "N5";
      PK06121(); /* fetch next vpoolh01(n5)*/
    end
  end
  ;
   /* ---------- end of pk06171 - move data to array -------------*/
end // end PK06171

// screen hold rlse dates
Function PK06172()
   /* -------------- pk06172 - screen holds for release date -----*/
  ;
  PK06W01.PK06WSEL = "Y";
  ;
  if (PK06W01.PK06WWD1 != 0)
    if (PK06W01.PK06WWD2 != 0)
      if (PK06W01.PK06WWD1 > PKBREC.PKBRELDT
       || PK06W01.PK06WWD2 < PKBREC.PKBRELDT)
        PK06W01.PK06WSEL = "N";
      end
    else
      if (PK06W01.PK06WWD1 > PKBREC.PKBRELDT)
        PK06W01.PK06WSEL = "N";
      end
    end
  end
  ;
  if (PK06M100.XHRCD != " "
   && PK06M100.XHRCD != PKBREC.XHRCD)
    PK06W01.PK06WSEL = "N";
  end
  ;
  if (PK06W01.PK06WSEL == "Y"
   && PK06W01.PK06WERS != "Y")
     /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
                  /* LOAD WORKING STORAGE ARRAY                   **/
     /* if we made it this far all selections have passed and we  **/
     /* have a record to place in the pk06w04 array.              **/
     /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
    PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
    PK06W04.PK06WCNT = PK06W04.PK06WCNT + 1;
    PK06W04.PK4ORHLD[PK06WIX4] = PK4REC.PK4ORHLD;
    if (PK4REC.PK4ORHLD == "Y")
      if (PK06M100.PK06MARL == "Y")
        PK06W04.PK06WSEL[PK06WIX4] = "R";
      end
    else
      if (PK06M100.PK06MAHD == "Y")
        PK06W04.PK06WSEL[PK06WIX4] = "H";
      end
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      PK06W04.XHRCD[PK06WIX4] = PKBREC.XHRCD;
    else
      PK06W04.XHRCD[PK06WIX4] = "??";
    end
    PK06W04.PKBRELDT[PK06WIX4] = PKBREC.PKBRELDT;
    PK06W04.PK1CUOID[PK06WIX4] = PK4REC.PK1CUOID;
    PK06W04.PK1NORID[PK06WIX4] = PK4REC.PK1NORID;
    PK06W04.XOTCD[PK06WIX4] = PK4REC.XOTCD;
    PK06W04.XBCCD[PK06WIX4] = PK4REC.XBCCD;
    PK06W04.KUCCOID[PK06WIX4] = PK4REC.KUCCOID;
    PK06W04.KUMSTRID[PK06WIX4] = PK4REC.KUMSTRID;
    PK06W04.XNXCD[PK06WIX4] = PK4REC.XNXCD;
    PK06W04.TF1CARCD[PK06WIX4] = PK4REC.TF1CARCD;
    PK06W04.OP1DSBDT[PK06WIX4] = PK4REC.OP1DSBDT;
    PK06W04.PK4OTUNT[PK06WIX4] = PK4REC.PK4OTUNT;
    if (PK4REC.PK4PLNDT > 0)
      PK06W04.PK06WPLF[PK06WIX4] = "*";
    end
    ;
     /* get store short name*/
    set PK6REC empty;
    PK6REC.KUCCOID = PK4REC.KUCCOID;
    PK6REC.KUMSTRID = PK4REC.KUMSTRID;
    PK06127();
    if (VAGen_SQLCODE == 0)
      PK06W04.PK06WSNM[PK06WIX4] = PK6REC.KUMSTSNM;
    else
      PK06W04.PK06WSNM[PK06WIX4] = "UNKN";
    end
    ;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* get hold reason codes*/
    PKZREC.PKZFUNC = "N1";
    PK06125(); /* select nxt dpick.vorhld01*/
  else
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2"; /* Type of error*/
    TA1REC.TA1PGMNM = "PK06172 "; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE            ";
    TA1REC.TA1MAP = "PK06M100"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKBREC.PKBKEY;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  end
  ;
   /* ---------- end of pk06172 - move data to array -------------*/
end // end PK06172

// return from pk application
Function PK06180()
  ;
  if (PKWREC.PKWFRMAP[1] == "PK06")
    if (PKWREC.PKWSLTYP[1] == "O" /* return from order inq*/
     || PKWREC.PKWSLTYP[1] == "S") /* return from ln itm inq*/
      PKYREC.PKWARRAY = PKWREC.PKWARRAY[1];
      PK06W01.PK06WWIX = 1;
      PK06W04.PK06WIX4 = 1;
      while (PKYREC.PK1CUOID[PK06WWIX] > 0
       && PK06W01.PK06WWIX <= 30
       && PK06W04.PK06WIX4 <= PK06W04.PK06WCNT)
        if (PKYREC.PK1CUOID[PK06WWIX] == PK06W04.PK1CUOID[PK06WIX4]
         && PKYREC.PK1NORID[PK06WWIX] == PK06W04.PK1NORID[PK06WIX4])
          PK06W04.PK06WSEL[PK06WIX4] = PKYREC.PKYORACT[PK06WWIX];
          PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
          PK06W01.PK06WWIX = PK06W01.PK06WWIX + 1;
        else
          PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
        end
      end
    else
      if (PKWREC.PKWSLTYP[1] == "C") /* return from cust inq*/
        PKXREC.PKWARRAY = PKWREC.PKWARRAY[1];
        PK06W01.PK06WWIX = 1;
        PK06W04.PK06WIX4 = 1;
        while (PKXREC.KUCCOID[PK06WWIX] > 0
         && PK06W01.PK06WWIX <= 30
         && PK06W04.PK06WIX4 <= PK06W04.PK06WCNT)
          if (PKXREC.KUCCOID[PK06WWIX] == PK06W04.KUCCOID[PK06WIX4]
           && PKXREC.KUCCOID[PK06WWIX] == PK06W04.KUCCOID[PK06WIX4]
           && PKXREC.XNXCD[PK06WWIX] == PK06W04.XNXCD[PK06WIX4])
            PK06W04.PK06WSEL[PK06WIX4] = PKXREC.PKXKUACT[PK06WWIX];
            PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
            PK06W01.PK06WWIX = PK06W01.PK06WWIX + 1;
          else
            PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
          end
        end
      end
    end
  end
  ;
  PK06W04.PK06WSVX = 1;
  while (PK06W04.PK06WIX4 > 13)
    PK06W04.PK06WIX4 = PK06W04.PK06WIX4 - 13;
    PK06W04.PK06WSVX = PK06W04.PK06WSVX + 13;
  end
  PK06W04.PK06WIX4 = PK06W04.PK06WSVX;
  ;
end // end PK06180

// * get selection criteria
Function PK06200()
   /* ------------ pk06010 converse selection screen -------------*/
  ;
  if (PK06WERS == "N")
    if (PKWREC.XWHCD == " ")
      set PK06M100.XWHCD cursor;
    else
      PK06M100.XWHCD = PKWREC.XWHCD;
      PK06M100.XWHABRV = PKWREC.XWHABRV;
      set PK06M100.KUCCOID cursor;
    end
  end
  ;
  PK06201(); /* edit brand code*/
  ;
  PK06M100.PK06MTIM = VGVar.currentFormattedTime;
  PK06M100.XXXCURDT = VGVar.currentShortGregorianDate;
  if (PK06W01.PK06WERS != "Y")
    PK06M100.XXXERRID = "PK06200";
  end
  ;
  converse PK06M100 ;
  ;
  PK06205(); /* process data from pk06m100*/
  ;
   /* -------------------- end pk06200 --------------------------*/
end // end PK06200

// edit brand code
Function PK06201()
  ;
  ;
  if (PK06M100.KUCCOID > 7999999 /* if cole-haan customer*/
   && PK06M100.KUCCOID < 9000000)
    PK06M100.KUCCOID = PK06M100.KUCCOID - 8000000;
                                  /* convert it to ordinary*/
    if (PK06M100.XBCCD != "08") /* if brand not cole-haan*/
      PK06M100.XBCCD = "08"; /**/
      PK06M100.VAGen_EZEMSG = "ALL CUSTOMERS IN 80NNNNN FORMAT ARE COLE-HAAN CUSTOMERS";
    end
  end
  ;
  ;
  if (PK06M100.XBCCD != " ") /* brand code found on map*/
    ;
    if (PK06M100.XBCCD in XBCTBL.XBCCD)
      PK06W01.PK06W-XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
    end
                                  /* brand description*/
    if (sysVar.arrayIndex == 0) /* Table entry not found*/
      ;
      converseLib.validationFailed(413); /* Indicate invalid brand*/
      set PK06M100.XBCCD cursor, modified, bold;
                                   /* Highlight brand*/
      PK06M100.XBCABRV = " "; /* Clear abbreviation*/
      PK06W01.PK06WERS = "Y";
      return;
      ;
    else
      ;
      PK06M100.XBCABRV = PK06W01.PK06W-XBCABRV;
                                   /* brand desc to map*/
    end
    ;
  else
    ;
    PK06M100.XBCABRV = " "; /* spaces to brand desc*/
    ;
  end
  ;
  ;
   /* -------------------- end pk06201 --------------------------*/
end // end PK06201

// process data from m100
Function PK06205()
   /* ------------------------ pk06205 --------------------------*/
  ;
  ;
  PK06210(); /* reset fields to normal*/
  PK06215(); /* check attention identifier*/
  PK06220(); /* edit for missing fields*/
  PK06225(); /* edit for relational fields*/
  PK06030(); /* validate dates*/
  PK06230(); /* validate cust/ord/carrier codes*/
  PK06260(); /* validate entered product code*/
  PK06265(); /* validate picking hold code*/
  ;
  if (PK06W01.PK06WERS != "Y") /* no errors*/
    if (PK06W01.PK06WFLE == 0) /* no valid data entered*/
      converseLib.validationFailed(291);
      PK06W01.PK06WERS = "Y";
      PK06M100.XXXERRID = "PK06205";
      PK06M300.XXXERRID = "PK06205";
    else
      PK06W01.PK06WGET = "Y"; /* turn on load flag*/
      PK06W01.PK06WFTF = "Y"; /* turn on load flag*/
      PK06W01.PK06WLSC = "Y"; /* turn on load flag*/
    end
  end
  ;
   /* -------------------- end pk06205 --------------------------*/
end // end PK06205

// reset hilighted fields
Function PK06210()
   /* --------------- pk06210 - reset highlighted fields ---------*/
  ;
  PK06W01.PK06WFLE = 0;
  PK06W01.PK06WERS = "N";
  set PK06M100.XWHCD initialAttributes;
  set PK06M100.XBCCD initialAttributes;
  set PK06M100.KUCCOID initialAttributes;
  set PK06M100.KUMSTRID initialAttributes;
  set PK06M100.XNXCD initialAttributes;
  set PK06M100.XOTCD initialAttributes;
  set PK06M100.XOTDESC initialAttributes;
  set PK06M100.PK1CUOID initialAttributes;
  set PK06M100.PK06MNFM initialAttributes;
  set PK06M100.PK06MNFD initialAttributes;
  set PK06M100.PK06MNFY initialAttributes;
  set PK06M100.PK06MNTM initialAttributes;
  set PK06M100.PK06MNTD initialAttributes;
  set PK06M100.PK06MNTY initialAttributes;
  set PK06M100.TF1CARCD initialAttributes;
  PK06M100.TF1ABRV = " ";
  set PK06M100.PK06MDFM initialAttributes;
  set PK06M100.PK06MDFD initialAttributes;
  set PK06M100.PK06MDFY initialAttributes;
  set PK06M100.PK06MDTM initialAttributes;
  set PK06M100.PK06MDTD initialAttributes;
  set PK06M100.PK06MDTY initialAttributes;
  set PK06M100.XGPCD initialAttributes;
  set PK06M100.SY1STNBR initialAttributes;
  set PK06M100.SY2CLRID initialAttributes;
  set PK06M100.XDMCD initialAttributes;
  set PK06M100.SP1ID initialAttributes;
  set PK06M100.XHRCD initialAttributes;
  PK06M100.XHRDESC = " ";
  set PK06M100.PK06MRFM initialAttributes;
  set PK06M100.PK06MRFD initialAttributes;
  set PK06M100.PK06MRFY initialAttributes;
  set PK06M100.PK06MRTM initialAttributes;
  set PK06M100.PK06MRTD initialAttributes;
  set PK06M100.PK06MRTY initialAttributes;
  set PK06M100.PK06MXHD initialAttributes;
  set PK06M100.PK06MAHD initialAttributes;
  set PK06M100.PK06MXPL initialAttributes;
  set PK06M100.PK06MARL initialAttributes;
  set PK06M100.PK06MXNP initialAttributes;
  set PK06M100.PK06MDHC initialAttributes;
  set PK06M100.PK06MRMM initialAttributes;
  set PK06M100.PK06MRDD initialAttributes;
  set PK06M100.PK06MRYY initialAttributes;
  set PK06M100.CATOAP initialAttributes;
  set PK06M100.CAITEM initialAttributes;
  ;
   /* ------- end of: pk06210 - reset highlighted fields ---------*/
end // end PK06210

// check attention identifier
Function PK06215()
   /* ---------------  pk06215    --------------------------------*/
   /* ---------------  check pf keys                        ------*/
  ;
  ;
  PK06M100.XXXERRID = "PK06215"; /* Process name*/
  ;
  ;
   /* -----  check for valid pf keys                        ------*/
  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf19
   || converseVar.eventKey is pakey)
    exit stack;
  else
    if (converseVar.eventKey is enter)
      /* next sentence*/
    else
      converseLib.validationFailed(12); /* invalid pf key*/
      PK06W01.PK06WERS = "Y";
      return; /* Exit to redisplay map*/
    end
  end
  ;
  ;
   /* ------------------- end pk06215 -------------------------*/
end // end PK06215

// missing field edits
Function PK06220()
   /* ------------ pk06220 missing field edits -----------*/
  ;
  PK06W01.PK06WFLE = 0;
  PK06M100.XXXERRID = "PK06220";
  ;
  if (PK06M100.CATOAP > " ")
                                   /* because of the users desire to retain*/
    exit stack; /* the entered data fastpath regardless*/
  else /* of what other data was entered*/
    if (PK06M100.CAITEM > " ")
      set PK06M100.CAITEM cursor, bold; /* options entered but no*/
      converseLib.validationFailed(15); /* trans id entered*/
      PK06M100.XXXERRID = "PK06220 ";
      PK06W01.PK06WERS = "Y";
      return;
    end
  end
  ;
    /* check xwhcd entry*/
  ;
  if (PK06M100.XWHCD != PKWREC.XWHCD)
    if (PK06M100.XWHCD in XWHTBL.XWHCD)
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        PKWREC.XWHCD = XWHTBL.XWHCD[sysVar.arrayIndex];
        PKWREC.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
        PK06M100.XWHABRV = PKWREC.XWHABRV;
      else
        set PK06M100.XWHCD cursor, bold;
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(003);
        return;
      end
    else
      set PK06M100.XWHCD cursor, bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(002);
      return;
    end
  end
  ;
  ;
    /* check for customer entry*/
  ;
  if (PK06M100.KUCCOID != 0)
    PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
  else
    if (PK06M100.KUMSTRID > 0
     || PK06M100.XNXCD > 0)
      set PK06M100.KUCCOID cursor, bold;
      set PK06M100.KUMSTRID bold;
      set PK06M100.XNXCD bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(144);
      return;
    end
  end
  ;
   /* see if xotcd entered*/
  ;
  if (PK06M100.XOTCD != " ")
    PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
  end
  ;
    /* see if order number entered*/
  ;
  if (PK06M100.PK1CUOID != 0)
    PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
  end
  ;
    /* check from 'need' date*/
          /* ----*/
  ;
  if (PK06M100.PK06MNFM == 0
   && PK06M100.PK06MNFD == 0
   && PK06M100.PK06MNFY == 0)
  else
    if (PK06M100.PK06MNFM > 0
     && PK06M100.PK06MNFD > 0)
      ;
      /* ====== Y2K OUT BEGIN ======*/
      ;
      /* AND PK06M100.PK06MNFY GT 0;*/
      ;
      /* ====== Y2K OUT END ======*/
      ;
      PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
    else
      set PK06M100.PK06MNFD cursor, bold;
      set PK06M100.PK06MNFM bold;
      set PK06M100.PK06MNFY bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(158);
      return;
    end
  end
  ;
    /* check to   'need' date*/
          /* --*/
  ;
  if (PK06M100.PK06MNTM == 0
   && PK06M100.PK06MNTD == 0
   && PK06M100.PK06MNTY == 0)
  else
    if (PK06M100.PK06MNTM > 0
     && PK06M100.PK06MNTD > 0)
      ;
      /* ====== Y2K OUT BEGIN ======*/
      ;
      /* AND PK06M100.PK06MNTY GT 0;*/
      ;
      /* ====== Y2K OUT END ======*/
      ;
      PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
    else
      set PK06M100.PK06MNTD cursor, bold;
      set PK06M100.PK06MNTM bold;
      set PK06M100.PK06MNTY bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(158);
      return;
    end
  end
  ;
   /* check carrier for data*/
  ;
  if (PK06M100.TF1CARCD != " ")
    PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
  end
  ;
    /* check from 'dnsb' date*/
          /* ----*/
  ;
  if (PK06M100.PK06MDFM == 0
   && PK06M100.PK06MDFD == 0
   && PK06M100.PK06MDFY == 0)
  else
    if (PK06M100.PK06MDFM > 0
     && PK06M100.PK06MDFD > 0
    )
      /* ====== Y2K OUT BEGIN ======*/
      ;
      /* AND PK06M100.PK06MDFY GT 0;*/
      ;
      /* ====== Y2K OUT END ======*/
      ;
      PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
    else
      set PK06M100.PK06MDFD cursor, bold;
      set PK06M100.PK06MDFM bold;
      set PK06M100.PK06MDFY bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(158);
      return;
    end
  end
  ;
    /* check to   'dnsb' date*/
          /* --*/
  ;
  if (PK06M100.PK06MDTM == 0
   && PK06M100.PK06MDTD == 0
   && PK06M100.PK06MDTY == 0)
  else
    if (PK06M100.PK06MDTM > 0
     && PK06M100.PK06MDTD > 0
    )
      /* ====== Y2K OUT BEGIN ======*/
      ;
      /* AND PK06M100.PK06MDTY GT 0;*/
      ;
      /* ====== Y2K OUT END ======*/
      ;
      PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
    else
      set PK06M100.PK06MDTD cursor, bold;
      set PK06M100.PK06MDTM bold;
      set PK06M100.PK06MDTY bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(158);
      return;
    end
  end
  ;
  ;
  if (PK06M100.XGPCD > " "
   && PK06M100.SY1STNBR > " ")
    PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
  end
  ;
  ;
    /* check from 'rlse' date*/
          /* ----*/
  ;
  if (PK06M100.PK06MRFM == 0
   && PK06M100.PK06MRFD == 0
   && PK06M100.PK06MRFY == 0)
  else
    if (PK06M100.PK06MRFM > 0
     && PK06M100.PK06MRFD > 0
    )
      /* ====== Y2K OUT BEGIN ======*/
      ;
      /* AND PK06M100.PK06MRFY GT 0;*/
      ;
      /* ====== Y2K OUT END ======*/
      ;
      PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
    else
      set PK06M100.PK06MRFD cursor, bold;
      set PK06M100.PK06MRFM bold;
      set PK06M100.PK06MRFY bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(158);
      return;
    end
  end
  ;
    /* check to   'rlse' date*/
          /* --*/
  ;
  if (PK06M100.PK06MRTM == 0
   && PK06M100.PK06MRTD == 0
   && PK06M100.PK06MRTY == 0)
  else
    if (PK06M100.PK06MRTM > 0
     && PK06M100.PK06MRTD > 0
    )
      /* ====== Y2K OUT BEGIN ======*/
      ;
      /* AND PK06M100.PK06MRTY GT 0;*/
      ;
      /* ====== Y2K OUT END ======*/
      ;
      PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
    else
      set PK06M100.PK06MRTD cursor, bold;
      set PK06M100.PK06MRTM bold;
      set PK06M100.PK06MRTY bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(158);
      return;
    end
  end
  ;
  if (PK06M100.XHRCD != " ")
    PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
  end
  ;
  if (PK06M100.SP1ID != " ")
    PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
  end
  ;
   /* -------------------- end pk06220 --------------------------*/
end // end PK06220

// relational field edits
Function PK06225()
   /* ---------pk06225 releational field edits--------------------*/
  ;
  ;
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
   /* exclude holds flag is on and a release date was entered   **/
   /* these are conflicting entrys as orders not on hold can't  **/
   /* have a release date.                                      **/
   /* ** * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
  if (PK06M100.PK06MXHD == "Y"
   && PK06M100.PK06MRFM != 0)
    PK06M100.XXXERRID = "PK06225";
    PK06W01.PK06WERS = "Y";
    set PK06M100.PK06MXHD cursor, bold;
    set PK06M100.PK06MRFM bold;
    set PK06M100.PK06MRFD bold;
    set PK06M100.PK06MRFY bold;
    converseLib.validationFailed(298);
  end
  ;
  if (PK06M100.PK06MXPL == "Y"
   && PK06M100.PK06MXNP == "Y")
    PK06M100.XXXERRID = "PK06225";
    PK06W01.PK06WERS = "Y";
    set PK06M100.PK06MXPL cursor, bold;
    set PK06M100.PK06MXNP bold;
    converseLib.validationFailed(65);
  end
  if (PK06M100.PK06MAHD == "Y")
    if (PK06M100.PK06MDHC == " ")
      PK06M100.XXXERRID = "PK06225";
      converseLib.validationFailed(296);
      PK06W01.PK06WERS = "Y";
      set PK06M100.PK06MDHC cursor, bold;
      return;
    end
    if (PK06M100.PK06MRMM == 0)
      PK06M100.XXXERRID = "PK06225";
      converseLib.validationFailed(297);
      PK06W01.PK06WERS = "Y";
      set PK06M100.PK06MRMM cursor, bold;
      set PK06M100.PK06MRDD bold;
      set PK06M100.PK06MRYY bold;
    end
  end
  ;
   /* -----end:pk06225 releational field edits--------------------*/
end // end PK06225

// tbl and verifiable data edits
Function PK06230()
   /* -------- pk06230 - validate cust/ord/carrier codes ---------*/
  ;
  PK06M100.XXXERRID = "PK06230";
  ;
   /* *** validate customer codes*/
  ;
  if (PK06M100.KUCCOID > 0)
    set PK6REC empty;
    PK6REC.KUCCOID = PK06M100.KUCCOID;
    ;
    ;
    ;
    if (PK06M100.XBCCD == "08") /* if Cole-Haan*/
      if (PK06M100.KUCCOID > 99999 /**/
       && PK06M100.KUCCOID < 8000000)
        converseLib.validationFailed(427); /* invalid cole-haan customer*/
        set PK06M100.KUCCOID cursor, bold;
        set PK06M100.KUMSTRID bold;
        PK06W01.PK06WERS = "Y";
        return;
      else
        if (PK06M100.KUCCOID > 8999999) /**/
          converseLib.validationFailed(427); /* invalid cole-haan customer*/
          set PK06M100.KUCCOID cursor, bold;
          set PK06M100.KUMSTRID bold;
          PK06W01.PK06WERS = "Y";
          return;
        else
          XP0FW01.KUCCOID = PK06M100.KUCCOID;
          XP0FW01.XBCCD = PK06M100.XBCCD;
          XP0FS01(); /* look for Cole-Haan cust*/
          PK6REC.KUCCOID = XP0FW01.XP0FW01-INTERNAL;
                                   /* move C-H number to pk6rec*/
        end
      end
    else
      if (PK06M100.KUCCOID > 7999999 /* if Cole-Haan*/
       && PK06M100.KUCCOID < 9000000)
        XP0FW01.KUCCOID = PK06M100.KUCCOID;
        XP0FW01.XBCCD = PK06M100.XBCCD;
        XP0FS01(); /* look for Cole-Haan cust*/
        PK6REC.KUCCOID = XP0FW01.XP0FW01-INTERNAL;
                                   /* move it to pk6rec*/
      end
    end
    ;
    ;
    ;
    ;
    ;
    if (PK06M100.KUMSTRID > 0)
      PK6REC.KUMSTRID = PK06M100.KUMSTRID;
      PK06127();
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(163); /* not found*/
        PK06W01.PK06WERS = "Y";
        set PK06M100.KUCCOID cursor, bold;
        set PK06M100.KUMSTRID bold;
        set PK06M100.XNXCD bold;
      end
    else
      PK06235();
      if (VAGen_SQLCODE != -911)
        PK06245(); /* close set*/
      end
    end
    if (PK06W01.PK06WERS == "Y")
      return;
    end
  end
  ;
  if (PK06M100.XNXCD in XNXTBL.XNXCD from 1)
    /* next sentence*/
  else
    set PK06M100.XNXCD cursor, bold;
    PK06W01.PK06WERS = "Y";
    converseLib.validationFailed(283); /* dept code invalid*/
    return;
  end
  ;
   /* validate xotcd and move desc*/
  ;
  if (PK06M100.XOTCD == " ")
    PK06M100.XOTDESC = " ";
  else
    if (PK06M100.XOTCD in XOTTBL.XOTCD from 1)
      PK06M100.XOTDESC = XOTTBL.XOTDESC[sysVar.arrayIndex];
    else
      converseLib.validationFailed(129);
      PK06W01.PK06WERS = "Y";
      set PK06M100.XOTCD cursor, bold;
      return;
    end
  end
  ;
   /* validate order number*/
  ;
  if (PK06M100.PK1CUOID > 0)
    set PK4REC empty;
    PK4REC.XWHCD = PK06M100.XWHCD;
    PK4REC.PK1CUOID = PK06M100.PK1CUOID;
    PK4REC.PK1NORID = -1;
    PWIREC.PWIFUNC = "S3";
    PK06121(); /* open set and fetch first rec*/
    PWIREC.PWIFUNC = "N3";
    PK06121(); /* open set and fetch first rec*/
    if (SQLCA.VAGen_SQLCODE == 100)
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(11);
      set PK06M100.PK1CUOID cursor, bold;
    end
    if (SQLCA.VAGen_SQLCODE != -911)
      PWIREC.PWIFUNC = "C3";
      PK06121(); /* open set and fetch first rec*/
    end
    return;
  end
  ;
   /* validate carrier code*/
  ;
  if (PK06M100.TF1CARCD == " ")
    PK06M100.TF1ABRV = " ";
  else
    set TF1REC empty;
    TF1REC.TF1CARCD = PK06M100.TF1CARCD;
    PK06250();
    if (PK06W01.PK06WERS == "Y")
      return;
    else
      PK06M100.TF1ABRV = TF1REC.TF1ABRV;
    end
  end
  ;
   /* validate sales program*/
  ;
  if (PK06M100.SP1ID == " ")
    PK06M100.SP1ABRV = " ";
  else
    set SP1REC empty;
    SP1REC.SP1ID = PK06M100.SP1ID;
    PK06255();
    if (PK06W01.PK06WERS == "Y")
      return;
    else
      PK06M100.SP1ABRV = SP1REC.SP1ABRV;
    end
  end
  ;
   /* -end of: pk06230 - validate cust/ord/carrier codes ---------*/
end // end PK06230

// select set(s1) dpick.vpkcus01
Function PK06235()
   /* ----------- pk06235 - select set dpick.vpkcus01 ---------*/
  ;
  ;
  call "IO1830" ("S1", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    PK06240(); /* fetch next dpick.vpkcus01*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* contention for data base resorce*/
      PK06W01.PK06WERS = "Y";
      PK06M100.XXXERRID = "PK06235";
      PK06M300.XXXERRID = "PK06235";
    else
      converseLib.validationFailed(29); /* fatal error*/
      PK06W01.PK06WERS = "Y";
      PK06M100.XXXERRID = "PK06235";
      PK06M300.XXXERRID = "PK06235";
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PK06235 "; /* Process name*/
      TA1REC.TA1LOC = "SELECT SET            ";
      TA1REC.TA1MAP = "PK06M100"; /* Map name*/
      TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPKCUS01"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
    end
  end
  ;
  ;
   /* -------------  end process pk06235  --------------------*/
end // end PK06235

// fetch  nxt(n1) dpick.vpkcus01
Function PK06240()
   /* ----------- pk06240 - select next dpick.vpkcus01 ---------*/
  ;
  ;
  call "IO1830" ("N1", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    PK06M100.XXXERRID = "PK06240";
    PK06M300.XXXERRID = "PK06240";
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* contention for data base resorce*/
      PK06W01.PK06WERS = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* end of file*/
        converseLib.validationFailed(163); /* invalid customer*/
        PK06W01.PK06WERS = "Y";
        set PK06M100.KUCCOID cursor, bold;
        set PK06M100.KUMSTRID bold;
        set PK06M100.XNXCD bold;
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK06240 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT NEXT            ";
        TA1REC.TA1MAP = "PK06M100"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VPKCUS01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
        ;
      end
    end
  end
  ;
   /* -------------  end process pk06240  --------------------*/
end // end PK06240

// close  set(c1) dpick.vpkcus01
Function PK06245()
   /* ----------- pk06245 - close set dpick.vpkcus01 ---------*/
  ;
  ;
  call "IO1830" ("C1", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    PK06M100.XXXERRID = "PK06245";
    PK06M300.XXXERRID = "PK06245";
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* contention for data base resorce*/
      PK06W01.PK06WERS = "Y";
    else
      converseLib.validationFailed(29); /* fatal error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PK06245 "; /* Process name*/
      TA1REC.TA1LOC = "CLOSE SET            ";
      TA1REC.TA1MAP = "PK06M100"; /* Map name*/
      TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPKCUS01"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
    end
  end
  ;
   /* -------------  end process pk06245  --------------------*/
end // end PK06245

// select unique dpick.vcarr001
Function PK06250()
   /* ---------  pk06250 - select unique dpick.vcarr001 ----------*/
  ;
  ;
  call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes}; /* select next*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    PK06M100.XXXERRID = "PK06250";
    PK06M300.XXXERRID = "PK06250";
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* contention for data base resorce*/
      PK06W01.PK06WERS = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        converseLib.validationFailed(77); /* not found*/
        PK06W01.PK06WERS = "Y";
        set PK06M100.TF1CARCD cursor, bold;
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK06250 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT UNIQUE            ";
        TA1REC.TA1MAP = "PK06M100"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCARR001"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
        ;
      end
    end
  end
  ;
   /* -------------  end process pk06250  --------------------*/
end // end PK06250

// select unique dspgm.vspgm001
Function PK06255()
   /* ---------  pk06255 - select unique dspgm.vspgm001 ----------*/
  ;
  ;
  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes}; /* select next*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != -811)
    PK06M100.XXXERRID = "PK06255";
    PK06M300.XXXERRID = "PK06255";
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(284); /* invalid sales program*/
      PK06W01.PK06WERS = "Y";
      set PK06M100.SP1ID cursor, bold;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(28); /* contention for data base resorce*/
        PK06W01.PK06WERS = "Y";
      else
        converseLib.validationFailed(29); /* fatal error*/
        PK06W01.PK06WERS = "Y";
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK06255 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT UNIQUE            ";
        TA1REC.TA1MAP = "PK06M100"; /* Map name*/
        TA1REC.TA1DBASE = "DSPGM   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VSPGM001"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
        ;
      end
    end
  end
  ;
   /* -------------  end process pk06255  --------------------*/
end // end PK06255

// validate product sku
Function PK06260()
   /* -------------------- pk06260 -------------------------------*/
   /* Obtain the Product Description Table row for the specified*/
   /* product number.  If not found or not available, return an*/
   /* error message to the user.  If any other error, indicate a*/
   /* system error.*/
   /* ------------------------------------------------------------*/
  ;
  PK06M100.XXXERRID = "PK06260";
  ;
  if (PK06M100.XGPCD == " "
   && PK06M100.SY1STNBR == " "
   && PK06M100.SY2CLRID == " "
   && PK06M100.XDMCD == " ")
    return;
  end
  ;
  if (PK06M100.SY2CLRID == " ")
    PK06M100.SY2CLRID = "00 ";
  end
  if (PK06M100.XDMCD == " ")
    PK06M100.XDMCD = "00";
  end
  ;
  PKNREC.XGPCD = PK06M100.XGPCD; /* GPC*/
  PKNREC.SY1STNBR = PK06M100.SY1STNBR; /* Style*/
  PKNREC.SY2CLRID = PK06M100.SY2CLRID; /* Color*/
  PKNREC.XDMCD = PK06M100.XDMCD; /* Dimension*/
  ;
  call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
  )                           
      /* CANADA 08/14/95*/
    ;
    if (PKWREC.XCTCD == "CANA")
      ;
        /* format ta1rec in case of bad return code from call to SY2000*/
      ;
      TA1REC.TA1PGMNM = "PK06"; /* CANA program name*/
      TA1REC.TA1LOC = "PK06260"; /* CANA sgrp name*/
      ;
      XSPK-CALL-SY2000(); /* CANA call SY2000 to get*/
                                /* product region record*/
      if (WSY2000.WSY2000-RETURN-CODE == 0) /* CANA row found*/
        return;
      else
        if (WSY2000.WSY2000-RETURN-CODE == 02) /* CANA row not found*/
          set PK06M100.XGPCD cursor, bold; /* Highlight GPC*/
          set PK06M100.SY1STNBR bold; /* Highlight style*/
          set PK06M100.SY2CLRID bold; /* Highlight color*/
          set PK06M100.XDMCD bold; /* Highlight dimension*/
          converseLib.validationFailed(498); /* Invalid stock number for region*/
          PK06W01.PK06WERS = "Y";
          PK06M100.XXXERRID = "PK06260 "; /* Error location*/
          return; /* Return to previous process*/
        else
          if (WSY2000.WSY2000-RETURN-CODE == 98) /* CANA database busy*/
            converseLib.validationFailed(28); /* Indicate not available*/
            TA1REC.TA1FUNC = "POST"; /* Termination function*/
          else
            converseLib.validationFailed(29); /* Indicate system error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          end
          PK06W01.PK06WERS = "Y";
          PK06M100.XXXERRID = "PK06260"; /* Error location*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK06260 "; /* Process name*/
          TA1REC.TA1LOC = "OBTAIN PRODUCT STYLE TABLE ROW";
          TA1REC.TA1MAP = "PK06M100"; /* Map name*/
          TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VSYREG02"; /* Table view name*/
          TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/
                                             /* Error diagnosis routine*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        end
      end
    end
    return;
  end
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      set PK06M100.XGPCD cursor, bold; /* Highlight GPC*/
      set PK06M100.SY1STNBR bold; /* Highlight style*/
      set PK06M100.SY2CLRID bold; /* Highlight color*/
      set PK06M100.XDMCD bold; /* Highlight dimension*/
      converseLib.validationFailed(45); /* Indicate not on file*/
      PK06W01.PK06WERS = "Y";
      PK06M100.XXXERRID = "PK06260 "; /* Error location*/
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end
    PK06W01.PK06WERS = "Y";
    PK06M100.XXXERRID = "PK06260"; /* Error location*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK06260 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN PRODUCT STYLE TABLE ROW";
    TA1REC.TA1MAP = "PK06M100"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPKSTY01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  end
  ;
  ;
   /* ------------end of:  pk06260 -------------------------------*/
end // end PK06260

// validate pkarhcd
Function PK06265()
   /* ------------ pk06265 hold rsn code edits -----------*/
  ;
  ;
  PK06M100.XXXERRID = "PK06265";
  ;
  if (PK06M100.XHRCD == "?")
    PK06270();
    PK06W02.PK06WENX = "N";
    while (PK06W02.PK06WENX == "N")
      PK06275();
    end
    converseLib.clearScreen();
    
    if (PK06W02.PK06WPIX > 0)
      PK06M100.XHRCD = PK06W01.XHRCD[PK06WPIX];
      PK06M100.XHRDESC = PK06W01.XHRDESC[PK06WPIX];
    end
  else
    if (PK06M100.XHRCD != " ")
      if (PK06M100.XHRCD in PK06W01.XHRCD from 1)
        PK06M100.XHRCD = PK06W01.XHRCD[sysVar.arrayIndex];
        PK06M100.XHRDESC = PK06W01.XHRDESC[sysVar.arrayIndex];
      else
        set PK06M100.XHRCD cursor, bold;
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(57); /* invalid hold code*/
        return;
      end
    end
  end
  ;
  if (PK06M100.PK06MDHC == "?")
    PK06270();
    PK06W02.PK06WENX = "N";
    while (PK06W02.PK06WENX == "N")
      PK06275();
    end
    converseLib.clearScreen();
    
    if (PK06W02.PK06WPIX > 0)
      PK06M100.PK06MDHC = PK06W01.XHRCD[PK06WPIX];
      PK06M100.PK06MDHR = PK06W01.XHRDESC[PK06WPIX];
    end
  end
  if (PK06M100.PK06MDHC == " ")
    if (PK06M100.PK06MAHD == "Y")
      set PK06M100.PK06MDHC cursor, bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(296); /* hold code required when flag=y*/
      return;
    end
  else
    if (PK06M100.PK06MDHC in PK06W01.XHRCD from 1)
      PK06M100.PK06MDHC = PK06W01.XHRCD[sysVar.arrayIndex];
      PK06M100.PK06MDHR = PK06W01.XHRDESC[sysVar.arrayIndex];
    else
      set PK06M100.PK06MDHC cursor, bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(57); /* invalid hold code*/
      return;
    end
  end
  ;
  if (PK06M100.PK06MRMM == 0
   && PK06M100.PK06MRDD == 0)
    ;
    /* ======= Y2K OUT BEGIN ======*/
    ;
    /* AND PK06M100.PK06MRYY EQ 0;*/
    ;
    /* ======= Y2K OUT END ======*/
    ;
    if (PK06M100.PK06MAHD == "Y")
      set PK06M100.PK06MRMM cursor, bold;
      set PK06M100.PK06MRDD bold;
      set PK06M100.PK06MRYY bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(297); /* hold date required when flag=y*/
      return;
    else
    end
  else
    if (PK06M100.PK06MRMM > 0
     && PK06M100.PK06MRDD > 0)
      ;
      /* ======= Y2K OUT BEGIN ======*/
      ;
      /* AND PK06M100.PK06MRYY GT 0;*/
      ;
      /* ======= Y2K OUT BEGIN ======*/
      ;
    else
      set PK06M100.PK06MRMM cursor, bold;
      set PK06M100.PK06MRDD bold;
      set PK06M100.PK06MRYY bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(158);
      return;
    end
  end
  ;
   /* -------------------- end pk06265 ---------------------------*/
end // end PK06265

// pkarhcd pop-up window init
Function PK06270()
  ;
   /* ---------------------- pk06270 -----------------------------*/
  ;
           /* INITIALIZATION PROCESS FOR POP UP WINDOWS*/
  ;
      /* Initialize fields on map and in working storage.*/
  ;
   /* ------------------------------------------------------------*/
  ;
     /* ***********************************************/
     /* ******  Initialize appropriate fields   *******/
     /* ***********************************************/
  ;
  set PK06M200 initial; /* Clear the map area*/
  set PK06W02 empty; /* clear working storage*/
  PK06W02.PK06WCT1 = 1; /* Table index*/
  PK06W02.PK06WCT2 = 1; /* Screen index*/
  PK06W02.PK06WSIX = 0; /* End of first page save index*/
  PK06W02.PK06WPIX = 0; /* Initialize pass index to zero*/
  PK06W02.PK06WFFL = "Y"; /* first time thru flag*/
  PK06W02.PK06WERR = "N"; /* Scroll error flag to no*/
  PK06W02.PK06WENX = "N"; /* End of pop up window session flag*/
  ;
  ;
   /* ----------------- end: pk06270 -----------------------------*/
end // end PK06270

// pkarhcd pop-up-window converse
Function PK06275()
   /* --------------------- pk06275 ------------------------------*/
  ;
              /* CONVERSE POP UP WINDOW*/
  ;
      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If enter pressed, check for any user selections.*/
  ;
   /* ------------------------------------------------------------*/
  ;
   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/
  ;
  if (PK06W02.PK06WERR == "N") /* If error flag not yes*/
    ;
     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/
    ;
    if (PK06W02.PK06WFFL == "N") /* if not the first time through*/
      PK06W02.PK06WCT1 = PK06W02.PK06WINX[10] + 1; /* set up scroll pf8*/
    end
    ;
    set PK06M200 initial; /* Clear map output area*/
    PK06M200.PK06MHDR = "         PICKING ORDER HOLD CODES     ";
    PK06M200.PK06MTR1 = "              SELECT & ENTER           ";
    PK06M200.PK06MTR2 = "   PF7:BACK                   PF8:FRWD";
    ;
     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/
    ;
    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || PK06W02.PK06WFFL == "Y")    /* Or it is the first time thru*/
      PK06W02.PK06WCT2 = 1; /* Set up screen index*/
      while (PK06W02.PK06WCT2 <= 10 /* Until end of screen lines*/
       && PK06W01.XHRCD[PK06WCT1] != "  ") /* Or end of data*/
        PK06M200.PK06MCD[PK06WCT2] = PK06W01.XHRCD[PK06WCT1];
        PK06M200.PK06MDES[PK06WCT2] = PK06W01.XHRDESC[PK06WCT1];
        PK06W02.PK06WINX[PK06WCT2] = PK06W02.PK06WCT1; /* Save array*/
        if (PK06W02.PK06WFFL == "Y") /* If first time thru*/
          PK06W02.PK06WSIX = PK06W02.PK06WCT1; /* Save last index*/
        end
        set PK06M200.PK06MSEL[PK06WCT2] normal; /* Set selects to normal*/
        PK06W02.PK06WCT2 = PK06W02.PK06WCT2 + 1; /* Increment screen index*/
        PK06W02.PK06WCT1 = PK06W02.PK06WCT1 + 1; /* Increment table index*/
      end
      PK06W02.PK06WFFL = "N"; /* Set first time flag to no*/
    end
    ;
     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/
    ;
    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      PK06W02.PK06WCT1 = PK06W02.PK06WINX[1] - 1; /* Set up table index*/
      PK06W02.PK06WCT2 = 10; /* Set up screen index*/
      while (PK06W02.PK06WCT2 >= 1) /* Load from the bottom up*/
        PK06M200.PK06MCD[PK06WCT2] = PK06W01.XHRCD[PK06WCT1];
        PK06M200.PK06MDES[PK06WCT2] = PK06W01.XHRDESC[PK06WCT1];
        PK06W02.PK06WINX[PK06WCT2] = PK06W02.PK06WCT1; /* Save array*/
        set PK06M200.PK06MSEL[PK06WCT2] normal; /* Set select visible*/
        PK06W02.PK06WCT2 = PK06W02.PK06WCT2 - 1; /* Decrement screen index*/
        PK06W02.PK06WCT1 = PK06W02.PK06WCT1 - 1; /* Decrement table index*/
      end
      if (PK06W02.PK06WCT1 < 1) /* If the table index was decremented*/
        PK06W02.PK06WCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end
  ;
  ;
  converse PK06M200 ;
  ;
  PK06W02.PK06WERR = "N"; /* Reset error flag*/
  ;
     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/
  ;
  PK06W02.PK06WCT2 = 1; /* Screen index*/
  while (PK06W02.PK06WCT2 <= 10 /* Set all fields with data to normal*/
   && PK06M200.PK06MCD[PK06WCT2] != " ")
    set PK06M200.PK06MSEL[PK06WCT2] normal;
    PK06W02.PK06WCT2 = PK06W02.PK06WCT2 + 1;
  end
  ;
    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/
  ;
  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && PK06W01.XHRCD[PK06WCT1] == "  ") /* And end of table*/
    PK06W02.PK06WERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && PK06W02.PK06WINX[1] <= PK06W02.PK06WSIX)
      PK06W02.PK06WERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter  pressed*/
        PK06W02.PK06WENX = "Y"; /* Set end flag*/
        ;
         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/
        ;
        PK06W02.PK06WCT2 = 1; /* Screen index*/
        while (PK06W02.PK06WCT2 <= 10) /* Until end of screen data*/
          if (PK06M200.PK06MSEL[PK06WCT2] != " ") /* Check for selection*/
            PK06W02.PK06WPIX = PK06W02.PK06WINX[PK06WCT2];
            PK06W02.PK06WCT2 = 11; /* End loop*/
          end
          PK06W02.PK06WCT2 = PK06W02.PK06WCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          PK06W02.PK06WERR = "Y"; /* set error flag*/
        end
      end
    end
  end
  ;
  ;
   /* --------------------- pk06275 ------------------------------*/
end // end PK06275

// * selected order screen driver
Function PK06300()
   /* ------------------------------------------------------------*/
     /* pk06300 - selected order screen driver*/
   /* ------------------------------------------------------------*/
  ;
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area*/
   /* 2) display the map*/
   /* 3) Process transaction*/
  ;
   /* ------------------------------------------------------------*/
  ;
  PK06305(); /* Format and display the map*/
  ;
  PK06330(); /* converse screen*/
  ;
  PK06335(); /* reset hilighted fields*/
  ;
  PK06340(); /* check for attention*/
  ;
  PK06345(); /* edit data*/
  ;
  PK06400(); /* process valid request*/
  ;
   /* --------------- end: pk06300 -------------------------------*/
end // end PK06300

// load screen with data
Function PK06305()
   /* ------------ pk06305 load screen with data -----------------*/
  ;
  ;
  if (PK06W01.PK06WLSC != "Y")
    return;
  else
    if (PK06W01.PK06WFTF == "Y")
      move PK06M100 to PK06W03 withV60Compat; /* save selection criteria*/
      PK06W01.PK06WFTF = "N";
      PK06W01.PK06WNDX = 1;
      PK06W04.PK06WIX4 = 1;
      PK06W04.PK06WSVX = 1;
      PK06W01.PK06WCPG = 1;
      if (PK06W01.PK06WUPD == "Y")
        PK06W04.PK06WIX4 = PK06W01.PK06WSUX;
        PK06W01.PK06WUPD = "N";
      end
    end
  end
  ;
  if (PKWREC.PKWINDEX > 0) /* calc curr page only if xfer to this*/
                                   /* app*/
    PK06W01.PK06WCPG = 0;
    PK06W01.PK06WPGS = PK06W04.PK06WSVX / 13;
    if (PK06W01.PK06WPGD > 0)
      PK06W01.PK06WCPG = PK06W01.PK06WPGI + 1;
    else
      PK06W01.PK06WCPG = PK06W01.PK06WPGI;
    end
  end
  ;
  PK06W01.PK06WPGS = PK06W04.PK06WCNT / 13;
  if (PK06W01.PK06WPGD > 0)
    PK06W01.PK06WPGI = PK06W01.PK06WPGI + 1;
  end
  ;
  PK06W01.PK06WLSC = "N"; /* turn off display screen flag*/
  PK06W01.PK06WERS = "N"; /* turn off error switch*/
  ;
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    if (PK06M300.PK06MFPG != PK06W01.PK06WCPG)
      PK06W01.PK06WCPG = PK06M300.PK06MFPG;
      PK06W04.PK06WIX4 = PK06W01.PK06WCPG * 13;
      PK06W04.PK06WIX4 = PK06W04.PK06WIX4 - 12;
    else
      if (converseVar.eventKey is pf7)
        if (PK06W04.PK06WSVX == 1)
          converseLib.validationFailed(37); /* cant back up*/
          return;
        else
          PK06W04.PK06WIX4 = PK06W04.PK06WSVX - 13;
          PK06W01.PK06WCPG = PK06W01.PK06WCPG - 1;
        end
      else
        PK06W04.PK06WIX4 = PK06W04.PK06WSVX + 13;
        if (PK06W04.PK06WIX4 > PK06W04.PK06WCNT)
          PK06W04.PK06WIX4 = PK06W04.PK06WSVX;
          converseLib.validationFailed(38); /* cant go forward*/
          return;
        else
          PK06W01.PK06WCPG = PK06W01.PK06WCPG + 1;
        end
      end
    end
  end
  set PK06M300 initial;
  set PK06M300.PK06MAWF normal;
  set PK06M300.PK06MAWF skip;
  if (PK06M100.PK06MAHD == "Y")
    PK06M300.PK06MAWF = "WARNING:AUTO HOLD IN EFFECT";
  else
    if (PK06M100.PK06MARL == "Y")
      PK06M300.PK06MAWF = "WARNING:AUTO RLSE IN EFFECT";
    else
      set PK06M300.PK06MAWF invisible;
    end
  end
  PK06M300.PK06MTOR = PK06W04.PK06WCNT;
  PK06M300.PK06MHLD = PK06M100.PK06MDHC;
  PK06M300.XHRDESC = PK06M100.PK06MDHR;
  PK06W01.PK06WMM = PK06M100.PK06MRMM;
  PK06W01.PK06WDD = PK06M100.PK06MRDD;
  PK06W01.PK06WYY = PK06M100.PK06MRYY;
  PK06M300.PK06MDDT = PK06W01.PK06WDT;
  PK06M300.XWHCD = PK06M100.XWHCD;
  PK06M300.PK06MFPG = PK06W01.PK06WCPG;
  PK06M300.PK06MLPG = PK06W01.PK06WPGI;
  PK06W01.PK06WKHF = "N";
  PK06W01.PK06WCHF = "N";
  ;
  ;
  PK06W04.PK06WTUN = 0; /* zero total units field*/
  PK06W01.PK06WNDX = 1;
  while (PK06W01.PK06WNDX <= PK06W04.PK06WCNT)
    PK06W04.PK06WTUN = PK06W04.PK06WTUN + PK06W04.PK4OTUNT[PK06WNDX];
    PK06W01.PK06WNDX = PK06W01.PK06WNDX + 1;
  end
  PK06M300.PK06WTUN = PK06W04.PK06WTUN; /* total units for array*/
  ;
  PK06W01.PK06WNDX = 1;
  PK06W04.PK06WSVX = PK06W04.PK06WIX4;
  PK06W01.PK06WSUX = PK06W04.PK06WIX4;
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
                /* LOAD WORKING STORAGE ARRAY                   **/
   /* if we made it this far all selections have passed and we  **/
   /* have a record to place in the pk06w04 array.              **/
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
  ;
  while (PK06W01.PK06WNDX <= 13)
    if (PK06W04.PK06WIX4 <= PK06W04.PK06WCNT)
      PK06M300.PK06MSEL[PK06WNDX] = PK06W04.PK06WSEL[PK06WIX4];
      if (PK06W04.PK06WSEL[PK06WIX4] == "H")
        PK06M300.XHRCD[PK06WNDX] = PK06M300.PK06MHLD;
        PK06M300.PK06MRDT[PK06WNDX] = PK06M300.PK06MDDT;
      else
        if (PKWREC.PKWINDEX > 0
         && PK06W04.PK06WSEL[PK06WIX4] == "V")
          set PK06M300.PK06MSEL[PK06WNDX] cursor;
        end
        PK06M300.XHRCD[PK06WNDX] = PK06W04.XHRCD[PK06WIX4];
        PK06W01.PK06WFDT = PK06W04.PKBRELDT[PK06WIX4];
        PK06W01.PK06WMM = PK06W01.PK06WFMM;
        PK06W01.PK06WDD = PK06W01.PK06WFDD;
        PK06W01.PK06WYY = PK06W01.PK06WFYY;
        PK06M300.PK06MRDT[PK06WNDX] = PK06W01.PK06WDT;
      end
      if (PK06W01.PK06WNDX > 1)
        PK06W04.PK06WIX5 = PK06W04.PK06WIX4 - 1;
        if (PK06W04.PK1CUOID[PK06WIX5] == PK06W04.PK1CUOID[PK06WIX4]
         && PK06W04.PK1NORID[PK06WIX5] == PK06W04.PK1NORID[PK06WIX4])
          PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
          PK06W01.PK06WNDX = PK06W01.PK06WNDX + 1;
        else
          PK06M300.PK1CUOID[PK06WNDX] = PK06W04.PK1CUOID[PK06WIX4];
          PK06M300.PK1NORID[PK06WNDX] = PK06W04.PK1NORID[PK06WIX4];
          PK06M300.XOTCD[PK06WNDX] = PK06W04.XOTCD[PK06WIX4];
          PK06M300.XBCCD[PK06WNDX] = PK06W04.XBCCD[PK06WIX4];
          PK06M300.PK06MPLF[PK06WNDX] = PK06W04.PK06WPLF[PK06WIX4];
          if (PK06W04.KUCCOID[PK06WIX4] > 7999999 /* if Cole-Haan customer #*/
           && PK06W04.KUCCOID[PK06WIX4] < 9000000)
            PK06M300.KUCCOID[PK06WNDX] = PK06W04.KUCCOID[PK06WIX4] -             8000000; /* convert cust # to cole-haan*/
          else
            PK06M300.KUCCOID[PK06WNDX] = PK06W04.KUCCOID[PK06WIX4];
          end
          PK06M300.KUMSTRID[PK06WNDX] = PK06W04.KUMSTRID[PK06WIX4];
          PK06M300.XNXCD[PK06WNDX] = PK06W04.XNXCD[PK06WIX4];
          PK06M300.KUMSTSNM[PK06WNDX] = PK06W04.PK06WSNM[PK06WIX4];
          if (PK06W04.PK06WSNM[PK06WNDX] == "NOT IN POOL")
            set PK06M300.KUMSTSNM[PK06WNDX] bold;
          else
            PK06310(); /* check customer for cust holds*/
          end
          PK06M300.TF1CARCD[PK06WNDX] = PK06W04.TF1CARCD[PK06WIX4];
          PK06320(); /* check carrier for carr holds*/
          PK06W01.PK06WFDT = PK06W04.OP1DSBDT[PK06WIX4];
          PK06W01.PK06WMM = PK06W01.PK06WFMM;
          PK06W01.PK06WDD = PK06W01.PK06WFDD;
          PK06W01.PK06WYY = PK06W01.PK06WFYY;
          PK06M300.OP1DSBDT[PK06WNDX] = PK06W01.PK06WDT;
          PK06M300.PK4OTUNT[PK06WNDX] = PK06W04.PK4OTUNT[PK06WIX4];
          PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
          PK06W01.PK06WNDX = PK06W01.PK06WNDX + 1;
        end
      else
        PK06M300.PK1CUOID[PK06WNDX] = PK06W04.PK1CUOID[PK06WIX4];
        PK06M300.PK1NORID[PK06WNDX] = PK06W04.PK1NORID[PK06WIX4];
        PK06M300.XOTCD[PK06WNDX] = PK06W04.XOTCD[PK06WIX4];
        PK06M300.XBCCD[PK06WNDX] = PK06W04.XBCCD[PK06WIX4];
        PK06M300.PK06MPLF[PK06WNDX] = PK06W04.PK06WPLF[PK06WIX4];
        if (PK06W04.KUCCOID[PK06WIX4] > 7999999 /* if Cole-Haan customer #*/
         && PK06W04.KUCCOID[PK06WIX4] < 9000000)
          PK06M300.KUCCOID[PK06WNDX] = PK06W04.KUCCOID[PK06WIX4] -           8000000; /* convert cust # to cole-haan*/
        else
          PK06M300.KUCCOID[PK06WNDX] = PK06W04.KUCCOID[PK06WIX4];
        end
        PK06M300.KUMSTRID[PK06WNDX] = PK06W04.KUMSTRID[PK06WIX4];
        PK06M300.XNXCD[PK06WNDX] = PK06W04.XNXCD[PK06WIX4];
        PK06M300.KUMSTSNM[PK06WNDX] = PK06W04.PK06WSNM[PK06WIX4];
        if (PK06W04.PK06WSNM[PK06WNDX] == "NOT IN POOL")
          set PK06M300.KUMSTSNM[PK06WNDX] bold;
        else
          PK06310(); /* check customer for cust holds*/
        end
        PK06M300.TF1CARCD[PK06WNDX] = PK06W04.TF1CARCD[PK06WIX4];
        PK06320(); /* check carrier for carr holds*/
        PK06W01.PK06WFDT = PK06W04.OP1DSBDT[PK06WIX4];
        PK06W01.PK06WMM = PK06W01.PK06WFMM;
        PK06W01.PK06WDD = PK06W01.PK06WFDD;
        PK06W01.PK06WYY = PK06W01.PK06WFYY;
        PK06M300.OP1DSBDT[PK06WNDX] = PK06W01.PK06WDT;
        PK06M300.PK4OTUNT[PK06WNDX] = PK06W04.PK4OTUNT[PK06WIX4];
        PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
        PK06W01.PK06WNDX = PK06W01.PK06WNDX + 1;
      end
    else
      set PK06M300.PK06MSEL[PK06WNDX] skip, invisible;
      set PK06M300.XHRCD[PK06WNDX] skip, invisible;
      set PK06M300.PK06MRDT[PK06WNDX] skip, invisible;
      PK06W01.PK06WNDX = PK06W01.PK06WNDX + 1;
    end
  end
  ;
  PKWREC.PKWINDEX = 0;
  ;
   /* ------------ pk06305 load screen with data -----------------*/
end // end PK06305

// check for customer holds
Function PK06310()
   /* ------------- pk06310 check for cust holds -----------------*/
  ;
   /* ====== Y2K OUT BEGIN ========*/
  ;
   /* MOVE EZEDTE TO PK06W01.PK06WFDA;*/
   /* MOVE 19 TO PK06W01.PK06WFCT;*/
  ;
  ;
   /* ====== Y2K OUT END ========*/
  ;
  ;
   /* ====== Y2K IN BEGIN ========*/
  ;
  PK06W01.PK06WFDT = VGVar.currentGregorianDate;
  ;
   /* ====== Y2K IN END ========*/
  ;
  set PK9REC empty;
  PK9REC.XWHCD = PK06M100.XWHCD;
  PK9REC.KUCCOID = PK06W04.KUCCOID[PK06WIX4];
  PK9REC.KUMSTRID = PK06W04.KUMSTRID[PK06WIX4];
  PK9REC.XNXCD = PK06W04.XNXCD[PK06WIX4];
  PK9REC.XHRCD = "*";
  PKZREC.PKZFUNC = "S1";
  PK06315(); /* select set dpick.vcuhld01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    PKZREC.PKZFUNC = "N1";
    PK06315(); /* select nxt dpick.vcuhld01*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (PK9REC.PK9RELDT > PK06W01.PK06WFDT) /* reldt > than today*/
        PK06W01.PK06WKHF = "Y";
        set PK06M300.KUCCOID[PK06WNDX] bold;
        set PK06M300.KUMSTRID[PK06WNDX] bold;
        set PK06M300.XNXCD[PK06WNDX] bold;
      end
    end
  end
  ;
  if (SQLCA.VAGen_SQLCODE != -911)
    PKZREC.PKZFUNC = "C1";
    PK06315(); /* select set dpick.vcuhld01*/
  end
  ;
   /* ---------end: pk06310 check for cust holds -----------------*/
end // end PK06310

// access dpick.vcuhld01
Function PK06315()
   /* -------------- pk06315 - access dpick.vcuhld01 ------------*/
  ;
  call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0) /* successful*/
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* contention for data base resorce*/
      PK06W01.PK06WERS = "Y";
    else
      if (SQLCA.VAGen_SQLCODE != +100)
        converseLib.validationFailed(29); /* fatal error*/
        PK06W01.PK06WERS = "Y";
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK06315 "; /* Process name*/
        TA1REC.TA1LOC = PKZREC.PKZFUNC;
        TA1REC.TA1MAP = "PK06M300"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
        ;
      end
    end
  end
  ;
   /* ------ end of: pk06315 - access dpick.vcuhld01 ------------*/
end // end PK06315

// check for carrier holds
Function PK06320()
   /* ---------- pk06320 check for carrier holds -----------------*/
  ;
  if (PK06W04.TF1CARCD == " ")
    return;
  end
  ;
   /* ====== Y2K OUT BEGIN ======*/
  ;
   /* MOVE EZEDTE TO PK06W01.PK06WFDA;*/
   /* MOVE 19 TO PK06W01.PK06WFCT;*/
  ;
   /* ====== Y2K OUT END ======*/
  ;
  ;
   /* ====== Y2K IN BEGIN ======*/
  ;
  PK06W01.PK06WFDT = VGVar.currentGregorianDate;
  ;
   /* ====== Y2K IN END ======*/
  ;
  set PWFREC empty;
  PWFREC.XWHCD = PK06M100.XWHCD;
  PWFREC.TF1CARCD = PK06W04.TF1CARCD[PK06WIX4];
  PK9REC.XHRCD = "*";
  PKZREC.PKZFUNC = "S1";
  PK06325(); /* select set dpick.vcahld01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    PKZREC.PKZFUNC = "N1";
    PK06325(); /* select nxt dpick.vcahld01*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (PWFREC.PKBRELDT > PK06W01.PK06WFDT)
        PK06W01.PK06WCHF = "Y";
        set PK06M300.TF1CARCD[PK06WNDX] bold;
      end
    end
  end
  ;
  if (SQLCA.VAGen_SQLCODE != -911)
    PKZREC.PKZFUNC = "C1";
    PK06325(); /* select nxt dpick.vcahld01*/
  end
  ;
   /* -- end of: pk06320  check for carrier holds ----------------*/
end // end PK06320

// access dpick.vcahld01
Function PK06325()
   /* ------------------------------------------------------------*/
  ;
  call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0) /* successful*/
    PK06M100.XXXERRID = "PK06325";
    PK06M300.XXXERRID = "PK06325";
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* contention for data base resorce*/
      PK06W01.PK06WERS = "Y";
    else
      if (SQLCA.VAGen_SQLCODE != +100)
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK06325 "; /* Process name*/
        TA1REC.TA1LOC = "ADD                      ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      end
    end
  end
end // end PK06325

// * order update selection
Function PK06330()
   /* ----------------- pk06330 - converse pk06m300 --------------*/
  ;
  set PK06M300.PK06MAWF normal;
  set PK06M300.PK06MAWF skip;
  if (PK06M100.PK06MAHD == "Y"
   && PK06M100.PK06MARL == "Y")
    PK06M300.PK06MAWF = "WARNING:AUTO HOLD/RLSE SET ";
  else
    if (PK06M100.PK06MAHD == "Y")
      PK06M300.PK06MAWF = "WARNING:AUTO HOLD IN EFFECT";
    else
      if (PK06M100.PK06MARL == "Y")
        PK06M300.PK06MAWF = "WARNING:AUTO RLSE IN EFFECT";
      else
        set PK06M300.PK06MAWF initialAttributes;
      end
    end
  end
  PK06M300.PK06MTOR = PK06W04.PK06WCNT;
  if (PK06M300.PK06MHLD != " ")
    PK06M100.PK06MDHC = PK06M300.PK06MHLD;
    PK06M100.PK06MDHR = PK06M300.XHRDESC;
  else
    PK06M300.PK06MHLD = PK06M100.PK06MDHC;
    PK06M300.XHRDESC = PK06M100.PK06MDHR;
  end
  PK06W01.PK06WMM = PK06M100.PK06MRMM;
  PK06W01.PK06WDD = PK06M100.PK06MRDD;
  PK06W01.PK06WYY = PK06M100.PK06MRYY;
  if (PK06M300.PK06MDDT != 0
   && PK06W01.PK06WDT != PK06M300.PK06MDDT)
    PK06W01.PK06WDT = PK06M300.PK06MDDT;
    PK06M100.PK06MRMM = PK06W01.PK06WMM;
    PK06M100.PK06MRDD = PK06W01.PK06WDD;
    PK06M100.PK06MRYY = PK06W01.PK06WYY;
  else
    PK06M300.PK06MDDT = PK06W01.PK06WDT;
  end
  PK06M300.XWHCD = PK06M100.XWHCD;
  PK06M300.PK06MFPG = PK06W01.PK06WCPG;
  PK06M300.PK06MLPG = PK06W01.PK06WPGI;
  PK06M300.PK06MTIM = VGVar.currentFormattedTime;
  PK06M300.XXXCURDT = VGVar.currentShortGregorianDate;
  PK06W01.PK06WERS = "N";
  if (converseVar.validationMsgNum == 0)
    if (PK06W01.PK06WKHF == "Y"
     && PK06W01.PK06WCHF == "Y")
      converseLib.validationFailed(301); /* at least 1 carrier and cust on hold*/
    else
      if (PK06W01.PK06WKHF == "Y")
        converseLib.validationFailed(299); /* at least 1 cust on hold*/
      else
        if (PK06W01.PK06WCHF == "Y")
          converseLib.validationFailed(300); /* at least 1 carrier on hold*/
        end
      end
    end
  end
  if (converseVar.validationMsgNum == 0)
    if ("??" in PK06M300.XHRCD from 1)
      set PK06M300.PK06MSEL[sysVar.arrayIndex] cursor, bold;
      set PK06M300.XHRCD[sysVar.arrayIndex] bold;
      set PK06M300.PK06MRDT[sysVar.arrayIndex] bold;
      converseLib.validationFailed(0315);
    end
  end
  ;
  if (PK06W01.PK06WERS != "Y")
    PK06M300.XXXERRID = "PK06330";
  end
  ;
  converse PK06M300 ;
  ;
   /* -------------end: pk06330 - converse pk06m300 --------------*/
end // end PK06330

// reset hilighted fields
Function PK06335()
   /* --------------- pk06335 - reset highlighted fields ---------*/
  ;
  PK06W01.PK06WERS = "N";
  set PK06M300.XWHCD initialAttributes;
  set PK06M300.PK06MHLD initialAttributes;
  set PK06M300.XHRDESC initialAttributes;
  set PK06M300.PK06MDDT initialAttributes;
  set PK06M300.PK06MAWF initialAttributes;
  ;
  PK06W01.PK06WNDX = 1;
  while (PK06W01.PK06WNDX <= 13)
    if (PK06M300.PK06MSEL[PK06WNDX] > " "
     || PK06M300.XHRCD[PK06WNDX] > " "
     || PK06M300.PK06MRDT[PK06WNDX] > 0
     || PK06M300.PK1CUOID[PK06WNDX] > 0)
      set PK06M300.PK06MSEL[PK06WNDX] initialAttributes;
      set PK06M300.XHRCD[PK06WNDX] initialAttributes;
      set PK06M300.PK06MRDT[PK06WNDX] initialAttributes;
      if (converseVar.eventKey not enter)
        set PK06M300.KUCCOID[PK06WNDX] initialAttributes;
        set PK06M300.KUMSTRID[PK06WNDX] initialAttributes;
        set PK06M300.XNXCD[PK06WNDX] initialAttributes;
        set PK06M300.TF1CARCD[PK06WNDX] initialAttributes;
      end
    end
    PK06W01.PK06WNDX = PK06W01.PK06WNDX + 1;
  end
  ;
   /* ------- end of: pk06335 - reset highlighted fields ---------*/
end // end PK06335

// process attention identifier
Function PK06340()
   /* ---------------  pk06340    --------------------------------*/
   /* ---------------  check pf keys                        ------*/
  ;
  ;
  PK06M100.XXXERRID = "PK06340"; /* Process name*/
  ;
  ;
   /* -----  check for valid pf keys                        ------*/
  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2)
    exit stack;
  else
    if (converseVar.eventKey is pf13
     || converseVar.eventKey is pf14
     || converseVar.eventKey is pf15
     || converseVar.eventKey is pf16
     || converseVar.eventKey is pf19
     || converseVar.eventKey is pf20)
      if (PK06W01.PK06WTRN == "Y")
        exit stack;
      end
    else
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf8)
        PK06W01.PK06WLSC = "Y";
      else
        if (converseVar.eventKey is pf12
         || converseVar.eventKey is enter)
          /* next sentence*/
        else
          converseLib.validationFailed(12); /* invalid pf key*/
          PK06W01.PK06WERS = "Y";
          return; /* Exit to redisplay map*/
        end
      end
    end
  end
  ;
   /* ------------------- end pk06340 -------------------------*/
end // end PK06340

// edit input data
Function PK06345()
   /* ------------ pk06345 - edit input data ---------------------*/
  ;
  ;
  PK06W01.PK06WUPD = "N"; /* turn off update switch*/
  ;
  if (PK06W01.PK06WERS == "Y") /* if error return*/
    return;
  end
  ;
  PK06M300.XXXERRID = "PK06345";
  ;
  if (converseVar.eventKey is pfkey) /* check for verified xfer request*/
    if (converseVar.eventKey is pf13 /* if verified return*/
     || converseVar.eventKey is pf14 
     || converseVar.eventKey is pf15 
     || converseVar.eventKey is pf16 
     || converseVar.eventKey is pf17 
     || converseVar.eventKey is pf18 
     || converseVar.eventKey is pf19 
     || converseVar.eventKey is pf20)
      if (PK06W01.PK06WTRN == "Y")
        return;
      end
    end
  end
  ;
  PK06W01.PK06WTRN = "N"; /* xfer not yet requested*/
  ;
  if (PK06M300.PK06MFPG != PK06W01.PK06WCPG) /* page change requested*/
    if (converseVar.eventKey not pf7
     && converseVar.eventKey not pf8)
      converseLib.validationFailed(0305); /* not allowed unless pf7 or pf8*/
      PK06W01.PK06WERS = "Y";
      PK06W01.PK06WLSC = "N";
      PK06M300.PK06MFPG = PK06W01.PK06WCPG;
      return;
    else
      if (PK06M300.PK06MFPG < 1 /* page range check*/
       || PK06M300.PK06MFPG > PK06M300.PK06MLPG)
        converseLib.validationFailed(0306); /* page range error*/
        PK06W01.PK06WERS = "Y";
        PK06W01.PK06WLSC = "N";
        set PK06M300.PK06MFPG cursor, bold;
        return;
      end
    end
  end
  ;
  ;
  if (PK06M300.PK06MDDT is modified)
    PK06355();
                                   /* check default release date for change*/
    if (PK06W01.PK06WERS == "Y")
      return;
    end
  end
  ;
  if (PK06M300.PK06MHLD != " " /* check hold code for change*/
   && PK06M300.PK06MHLD != PK06M100.PK06MDHC)
    if (PK06M300.PK06MHLD == "?")
      PK06350(); /* hold code pop-up window*/
    else
      if (PK06M300.PK06MHLD in PK06W01.XHRCD from 1)
        PK06M300.XHRDESC = PK06W01.XHRDESC[sysVar.arrayIndex];
        PK06M100.PK06MDHC = PK06W01.XHRCD[sysVar.arrayIndex];
        PK06M100.PK06MDHR = PK06W01.XHRDESC[sysVar.arrayIndex];
      else
        converseLib.validationFailed(57);
        PK06W01.PK06WERS = "Y";
        set PK06M300.PK06MHLD cursor, bold;
        return;
      end
    end
  end
  ;
  PK06W04.PK06WIX4 = PK06W04.PK06WSVX; /* restore array start pos*/
  PK06W01.PK06WVSF = "N"; /* no valid select codes*/
  PK06W01.PK06WNDX = 1; /* set scrn start at 1*/
  while (PK06W01.PK06WNDX <= 13
   && PK06W04.PK06WIX4 <= PK06W04.PK06WCNT
   && PK06W01.PK06WERS != "Y")
    if (PK06M300.PK06MSEL[PK06WNDX] == "H"
     || PK06M300.PK06MSEL[PK06WNDX] == "R"
     || PK06M300.PK06MSEL[PK06WNDX] == "C")
      if (COMMAREA.CACHGFL != "Y")
        PK06WERS = "Y";
        converseLib.validationFailed(275);
        set PK06M300.PK06MSEL[PK06WNDX] cursor, bold;
      end
    end
    if (PK06W01.PK06WERS != "Y")
      if (PK06M300.PK06MSEL[PK06WNDX] == "H" /* check valid selects*/
       || PK06M300.PK06MSEL[PK06WNDX] == "R" 
       || PK06M300.PK06MSEL[PK06WNDX] == "C" 
       || PK06M300.PK06MSEL[PK06WNDX] == "S")
        PK06W01.PK06WVSF = "Y";
      else
        if (PK06M300.PK06MSEL[PK06WNDX] != " "  /* nothing done*/
         && PK06M300.PK06MSEL[PK06WNDX] != "* " /* updated previously*/
         && PK06M300.PK06MSEL[PK06WNDX] != "V ") /* viewed*/
          set PK06M300.PK06MSEL[PK06WNDX] cursor, bold;
          PK06W01.PK06WERS = "Y";
          converseLib.validationFailed(292);
        end
      end
    end
    ;
    if (PK06W01.PK06WERS != "Y") /* validate hold request*/
      if (PK06M300.PK06MSEL[PK06WNDX] == "H")
        if (PK06M300.PK06MDDT == 0
         && PK06M300.PK06MRDT[PK06WNDX] == 0)
          converseLib.validationFailed(061); /* no release date*/
          PK06W01.PK06WERS = "Y";
          set PK06M300.PK06MRDT[PK06WNDX] cursor, bold;
        end
        if (PK06W01.PK06WERS != "Y")
          if (PK06M300.XHRCD[PK06WNDX] == "?")
            PK06360(); /* hold-code pop-up window*/
          else
            if (PK06M300.XHRCD[PK06WNDX] == " " /* no hold codes*/
             && PK06M300.PK06MHLD == " ")      
              converseLib.validationFailed(067);
              PK06W01.PK06WERS = "Y";
              set PK06M300.XHRCD[PK06WNDX] cursor, bold;
            end
          end
        end
      end
    end
    if (PK06W01.PK06WERS != "Y")
      if (PK06M300.PK06MSEL[PK06WNDX] == "R"
       && PK06W04.PK4ORHLD[PK06WIX4] != "Y"
       && PK06W04.PK06WSNM != "NOT IN POOL")
        set PK06M300.PK06MSEL[PK06WNDX] cursor, bold;
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(293);
      else
        if (PK06M300.PK06MSEL[PK06WNDX] == "C"
         && PK06W04.PK4ORHLD[PK06WIX4] != "Y"
         && PK06W04.PK06WSNM != "NOT IN POOL")
          set PK06M300.PK06MSEL[PK06WNDX] cursor, bold;
          PK06W01.PK06WERS = "Y";
          converseLib.validationFailed(294);
        end
      end
    end
    if (PK06W01.PK06WERS != "Y"
     && PK06M300.PK06MSEL[PK06WNDX] == "H")
      if (PK06M300.XHRCD[PK06WNDX] == " ")
        PK06M300.XHRCD[PK06WNDX] = PK06M300.PK06MHLD;
      end
      if (PK06M300.XHRCD[PK06WNDX] in PK06W01.XHRCD from 1)
        if (PK06M300.XHRCD[PK06WNDX] != PK06W04.XHRCD[PK06WIX4])
          PK06W04.XHRCD[PK06WIX4] = PK06M300.XHRCD[PK06WNDX];
        end
      else
        set PK06M300.XHRCD[PK06WNDX] cursor, bold;
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(57);
      end
    end
    if (PK06W01.PK06WERS != "Y")
      if (PK06M300.PK06MSEL[PK06WNDX] == "H"
       || PK06M300.PK06MSEL[PK06WNDX] == "C")
        if (PK06M300.PK06MRDT[PK06WNDX] == 0)
          PK06M300.PK06MRDT[PK06WNDX] = PK06M300.PK06MDDT;
          PK06365(); /* validate release date*/
        else
          PK06365(); /* validate release date*/
        end
      end
    end
    if (PK06W01.PK06WERS != "Y")
      if (PK06M300.PK06MSEL[PK06WNDX] == "S")
        if (converseVar.eventKey not pfkey)
          PK06W01.PK06WERS = "Y";
          converseLib.validationFailed(303);
        else
          if (converseVar.eventKey is pf13
           || converseVar.eventKey is pf14
           || converseVar.eventKey is pf15
           || converseVar.eventKey is pf16
           || converseVar.eventKey is pf17
           || converseVar.eventKey is pf18
           || converseVar.eventKey is pf19
           || converseVar.eventKey is pf20)
            PK06W01.PK06WTRN = "Y";
          end
        end
      end
    end
    if (PK06W01.PK06WERS != "Y")
      if (PK06M300.PK06MSEL[PK06WNDX] == "H")
        PK06370(); /* check for dup holds*/
      end
    end
    if (PK06W01.PK06WERS != "Y")
      PK06W04.PK06WSEL[PK06WIX4] = PK06M300.PK06MSEL[PK06WNDX];
      PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
      PK06W01.PK06WNDX = PK06W01.PK06WNDX + 1;
    end
  end
  ;
  ;
  if (PK06W01.PK06WERS != "Y"
   && PK06W01.PK06WTRN == "Y")
    if (converseVar.eventKey is pf13
     || converseVar.eventKey is pf14
     || converseVar.eventKey is pf15)
      if (converseVar.eventKey is pf13 /* order inq by selection*/
       || converseVar.eventKey is pf14) /* line item inq*/
        PK06375(); /* setup pkwrec*/
      end
      if (converseVar.eventKey is pf15) /* cust inq by selection*/
        PK06380(); /* setup pkxrec*/
      end
      if ("C" in PK06W04.PK06WSEL from 1 /* change requested*/
       || "H" in PK06W04.PK06WSEL from 1 /* hold requested*/
       || "R" in PK06W04.PK06WSEL from 1) /* release requested*/
                                   /* Warning: no update will be done*/
                                   /* xfer will loose user input*/
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(295);
      end
    end
  end
  ;
  if (PK06W01.PK06WERS != "Y"
   && PK06W01.PK06WVSF == "Y")
    if (converseVar.eventKey is enter)
      PK06W01.PK06WUPD = "Y";
    else
      if (converseVar.eventKey is pf12)
        converseLib.validationFailed(106);
      end
    end
  end
  ;
   /* ------- end: pk06345 - edit input data ---------------------*/
end // end PK06345

// validate pk06m300.pk06mhld
Function PK06350()
   /* ------------ pk06350 hold rsn code edits -----------*/
  ;
  ;
  PK06M300.XXXERRID = "PK06350";
  ;
  if (PK06M300.PK06MHLD == "?")
    PK06270();
    PK06W02.PK06WENX = "N";
    while (PK06W02.PK06WENX == "N")
      PK06352();
    end
    converseLib.clearScreen();
    
    if (PK06W02.PK06WPIX > 0)
      PK06M300.PK06MHLD = PK06W01.XHRCD[PK06WPIX];
      PK06M300.XHRDESC = PK06W01.XHRDESC[PK06WPIX];
    else
      set PK06M300.PK06MHLD cursor, bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(57); /* invalid hold code*/
      return;
    end
  else
    if (PK06M300.PK06MHLD != " ")
      if (PK06M300.PK06MHLD in PK06W01.XHRCD from 1)
        PK06M300.PK06MHLD = PK06W01.XHRCD[sysVar.arrayIndex];
        PK06M300.XHRDESC = PK06W01.XHRDESC[sysVar.arrayIndex];
      else
        set PK06M300.PK06MHLD cursor, bold;
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(57); /* invalid hold code*/
        return;
      end
    end
  end
  ;
   /* -------------------- end pk06350 --------------------------*/
end // end PK06350

// pkarhcd pop-up-window converse
Function PK06352()
   /* --------------------- pk07352 ------------------------------*/
  ;
              /* CONVERSE POP UP WINDOW*/
  ;
      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If pf12 pressed, check for any user selections.*/
  ;
   /* ------------------------------------------------------------*/
  ;
   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/
  ;
  if (PK06W02.PK06WERR == "N") /* If error flag not yes*/
    ;
     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/
    ;
    if (PK06W02.PK06WFFL == "N") /* if not the first time through*/
      PK06W02.PK06WCT1 = PK06W02.PK06WINX[10] + 1; /* set up scroll pf8*/
    end
    ;
    set PK06M200 initial; /* Clear map output area*/
    PK06M200.PK06MHDR = "         PICKING ORDER HOLD CODES     ";
    PK06M200.PK06MTR1 = "              SELECT & PF12           ";
    PK06M200.PK06MTR2 = "   PF7:BACK                   PF8:FRWD";
    ;
     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/
    ;
    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || PK06W02.PK06WFFL == "Y")    /* Or it is the first time thru*/
      PK06W02.PK06WCT2 = 1; /* Set up screen index*/
      while (PK06W02.PK06WCT2 <= 10 /* Until end of screen lines*/
       && PK06W01.XHRCD[PK06WCT1] != "  ") /* Or end of data*/
        PK06M200.PK06MCD[PK06WCT2] = PK06W01.XHRCD[PK06WCT1];
        PK06M200.PK06MDES[PK06WCT2] = PK06W01.XHRDESC[PK06WCT1];
        PK06W02.PK06WINX[PK06WCT2] = PK06W02.PK06WCT1; /* Save array*/
        if (PK06W02.PK06WFFL == "Y") /* If first time thru*/
          PK06W02.PK06WSIX = PK06W02.PK06WCT1; /* Save last index*/
        end
        set PK06M200.PK06MSEL[PK06WCT2] normal; /* Set selects to normal*/
        PK06W02.PK06WCT2 = PK06W02.PK06WCT2 + 1; /* Increment screen index*/
        PK06W02.PK06WCT1 = PK06W02.PK06WCT1 + 1; /* Increment table index*/
      end
      PK06W02.PK06WFFL = "N"; /* Set first time flag to no*/
    end
    ;
     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/
    ;
    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      PK06W02.PK06WCT1 = PK06W02.PK06WINX[1] - 1; /* Set up table index*/
      PK06W02.PK06WCT2 = 10; /* Set up screen index*/
      while (PK06W02.PK06WCT2 >= 1) /* Load from the bottom up*/
        PK06M200.PK06MCD[PK06WCT2] = PK06W01.XHRCD[PK06WCT1];
        PK06M200.PK06MDES[PK06WCT2] = PK06W01.XHRDESC[PK06WCT1];
        PK06W02.PK06WINX[PK06WCT2] = PK06W02.PK06WCT1; /* Save array*/
        set PK06M200.PK06MSEL[PK06WCT2] normal; /* Set select visible*/
        PK06W02.PK06WCT2 = PK06W02.PK06WCT2 - 1; /* Decrement screen index*/
        PK06W02.PK06WCT1 = PK06W02.PK06WCT1 - 1; /* Decrement table index*/
      end
      if (PK06W02.PK06WCT1 < 1) /* If the table index was decremented*/
        PK06W02.PK06WCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end
  ;
  converse PK06M200 ;
  ;
  PK06W02.PK06WERR = "N"; /* Reset error flag*/
  ;
     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/
  ;
  PK06W02.PK06WCT2 = 1; /* Screen index*/
  while (PK06W02.PK06WCT2 <= 10 /* Set all fields with data to normal*/
   && PK06M200.PK06MCD[PK06WCT2] != " ")
    set PK06M200.PK06MSEL[PK06WCT2] normal;
    PK06W02.PK06WCT2 = PK06W02.PK06WCT2 + 1;
  end
  ;
    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/
  ;
  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && PK06W01.XHRCD[PK06WCT1] == "  ") /* And end of table*/
    PK06W02.PK06WERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && PK06W02.PK06WINX[1] <= PK06W02.PK06WSIX)
      PK06W02.PK06WERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is pf12) /* If pf12  pressed*/
        PK06W02.PK06WENX = "Y"; /* Set end flag*/
        ;
         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/
        ;
        PK06W02.PK06WCT2 = 1; /* Screen index*/
        while (PK06W02.PK06WCT2 <= 10) /* Until end of screen data*/
          if (PK06M200.PK06MSEL[PK06WCT2] != " ") /* Check for selection*/
            PK06W02.PK06WPIX = PK06W02.PK06WINX[PK06WCT2];
            PK06W02.PK06WCT2 = 11; /* End loop*/
          end
          PK06W02.PK06WCT2 = PK06W02.PK06WCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not pf12)
          PK06W02.PK06WERR = "Y"; /* set error flag*/
        end
      end
    end
  end
  ;
  ;
   /* --------------------- pk07352 ------------------------------*/
end // end PK06352

// validate default rlse date
Function PK06355()
   /* ---------- pk06355 - validate default hold date-------------*/
  ;
  PK06M100.XXXERRID = "PK06355";
  PK06W01.PK06WDT = PK06M300.PK06MDDT;
  ;
   /* 1. if entered default hold release date must be:*/
   /* 2. all 9's*/
   /* 3. must be greater then today*/
   /* 4. must be a working day*/
  ;
   /* ** 1.*/
  if (PK06W01.PK06WMM != 0
   || PK06W01.PK06WDD != 0)
    ;
    /* ======= Y2K OUT BEGIN =====*/
    ;
    /* OR PK06W01.PK06WYY NE 0;*/
    ;
    /* ======= Y2K OUT END =======*/
    ;
    /* **2.*/
    if (PK06W01.PK06WMM == 99
     || PK06W01.PK06WDD == 99)
      ;
      /* ======= Y2K OUT BEGIN =====*/
      ;
      /* OR PK06W01.PK06WYY EQ 99;*/
      ;
      /* ======= Y2K OUT END =======*/
      ;
      PK06W01.PK06WMM = 99;
      PK06W01.PK06WDD = 99;
      PK06W01.PK06WYY = 99;
    else
      /* ** 3.*/
      PK06W01.PK06WWMM = PK06W01.PK06WMM;
      PK06W01.PK06WWDD = PK06W01.PK06WDD;
      PK06W01.PK06WWYY = PK06W01.PK06WYY;
      ;
      /* ===== Y2K IN BEGIN =====*/
      ;
      if (PK06W01.PK06WYY < 60)
        PK06W01.PK06WWCC = 20;
      else
        PK06W01.PK06WWCC = 19;
      end
      ;
      /* ===== Y2K IN END =====*/
      ;
      ;
      /* ===== Y2K OUT BEGIN =====*/
      ;
      /* MOVE EZEDTE TO PK06WFDA;*/
       /* IF PK06W01.PK06WFDA GT PK06W01.PK06WWDT;*/
      ;
      /* ===== Y2K OUT END =====*/
      ;
      /* ===== Y2K IN BEGIN =====*/
      ;
      PK06WFDT = VGVar.currentGregorianDate;
      if (PK06W01.PK06WFDT > PK06W01.PK06WWDT)
        ;
        /* ===== Y2K IN END =====*/
        ;
        converseLib.validationFailed(55);
        PK06W01.PK06WERS = "Y";
        set PK06M300.PK06MDDT cursor, bold;
      else
        /* ** 4.*/
        set TA9REC empty;
        ;
        /* ======= Y2K OUT BEGIN ======*/
        ;
        /* MOVE 19 TO TA9REC.TA9BEGCC;*/
        ;
        /* ======= Y2K OUT END ======*/
        ;
        ;
        /* ======= Y2K IN BEGIN ======*/
        ;
        if (PK06W01.PK06WYY < 60)
          TA9REC.TA9BEGCC = 20;
        else
          TA9REC.TA9BEGCC = 19;
        end
        ;
        /* ======= Y2K IN END ======*/
        ;
        TA9REC.TA9BEGMM = PK06W01.PK06WMM;
        TA9REC.TA9BEGDD = PK06W01.PK06WDD;
        TA9REC.TA9BEGYY = PK06W01.PK06WYY;
        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
        if (TA9REC.TA9RTNFL != 0)
          converseLib.validationFailed(56); /* must be a working day*/
          PK06W01.PK06WERS = "Y";
          set PK06M300.PK06MDDT cursor, bold;
        else
          PK06M100.PK06MRMM = PK06W01.PK06WMM;
          PK06M100.PK06MRDD = PK06W01.PK06WDD;
          PK06M100.PK06MRYY = PK06W01.PK06WYY;
        end
      end
    end
  end
  ;
   /* --end of:  pk06355 - validate default hold date-------------*/
end // end PK06355

// validate pk06m300.pkarhcd(x)
Function PK06360()
   /* ------------ pk06360 hold rsn code edits -----------*/
  ;
  ;
  PK06M300.XXXERRID = "PK06360";
  ;
  if (PK06M300.XHRCD[PK06WNDX] == "?")
    PK06270();
    PK06W02.PK06WENX = "N";
    while (PK06W02.PK06WENX == "N")
      PK06352();
    end
    converseLib.clearScreen();
    
    if (PK06W02.PK06WPIX > 0)
      PK06M300.XHRCD[PK06WNDX] = PK06W01.XHRCD[PK06WPIX];
      PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
    end
  else
    if (PK06M300.XHRCD[PK06WNDX] != " ")
      if (PK06M300.XHRCD[PK06WNDX] in PK06W01.XHRCD from 1)
        PK06M300.XHRCD[PK06WNDX] = PK06W01.XHRCD[sysVar.arrayIndex];
        PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
      else
        set PK06M300.XHRCD[PK06WNDX] cursor, bold;
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(57); /* invalid hold code*/
        return;
      end
    end
  end
  ;
   /* -------------------- end pk06360 --------------------------*/
end // end PK06360

// validate select release date
Function PK06365()
   /* ---------- pk06365 - validate release dates ----------------*/
  ;
  PK06M100.XXXERRID = "PK06365";
  ;
  set TA2REC empty;
  PK06W01.PK06WWD1 = 0;
  ;
   /* ======= Y2K OUT BEGIN =======*/
  ;
   /* MOVE EZEDTE TO PK06W01.PK06WFDA;*/
  ;
   /* ======= Y2K OUT BEGIN =======*/
  ;
  ;
   /* ======= Y2K IN BEGIN =======*/
  ;
  PK06W01.PK06WFDT = VGVar.currentGregorianDate;
  ;
   /* ======= Y2K IN BEGIN =======*/
  ;
  ;
  if (PK06M300.PK06MRDT == 0)
    ;
    /* ======= Y2K OUT BEGIN =======*/
    ;
    /* MOVE PK06M300.PK06MDDT TO PK06M300.PK06MRDT;*/
    ;
    /* ======= Y2K OUT END =======*/
    ;
    ;
    /* ======= Y2K IN BEGIN =======*/
    ;
    if (PK06M300.PK06MDDT != 0)
      PK06M300.PK06MRDT = PK06M300.PK06MDDT;
    else
      return;
    end
    ;
    /* ======= Y2K IN END =======*/
    ;
  end
   /* 1. if entered default hold release date must be:*/
   /* 2. all 9's*/
   /* 3. must be greater then today*/
   /* 4. must be a working day*/
  ;
   /* ** 1.*/
  if (PK06M300.PK06MRDT[PK06WNDX] != 0)
    /* **2.*/
    if (PK06M300.PK06MRDT[PK06WNDX] == 99
     || PK06M300.PK06MRDT[PK06WNDX] == 999
     || PK06M300.PK06MRDT[PK06WNDX] == 9999
     || PK06M300.PK06MRDT[PK06WNDX] == 99999
     || PK06M300.PK06MRDT[PK06WNDX] == 999999)
      PK06M300.PK06MRDT[PK06WNDX] = 999999;
      TA2REC.TA2GRGGN = 999999999;
    else
      ;
      TA2REC.TA2GRGAN = PK06M300.PK06MRDT[PK06WNDX];
      TA2REC.TA2GRTYP = "A"; /* date is in yymmdd format*/
      TA2REC.TA2DTOPT = "GREGGREG"; /* convert to all greg dates*/
      ;
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* check the date*/
      if (TA2REC.TA2RTNCD == 0000) /* date is valid*/
        PK06W01.PK06WWDT = TA2REC.TA2GRGGN;
      else
        set PK06M300.PK06MRDT[PK06WNDX] cursor, bold;
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(158);
        return;
      end
      ;
      /* ===== Y2K IN BEGIN ========*/
      ;
      if (PK06W01.PK06WWYY < 60)
        PK06W01.PK06WWCC = 20;
      else
        PK06W01.PK06WWCC = 19;
      end
      ;
      /* ===== Y2K IN END ========*/
      ;
      /* ** 3.*/
      ;
      /* ====== Y2K OUT BEGIN =======*/
      ;
      /* IF PK06W01.PK06WFDA GT PK06W01.PK06WWDT;*/
      ;
      /* ====== Y2K OUT END =======*/
      ;
      ;
      /* ====== Y2K IN BEGIN =======*/
      ;
      if (PK06W01.PK06WFDT > PK06W01.PK06WWDT)
        ;
        /* ====== Y2K IN END =======*/
        ;
        converseLib.validationFailed(55);
        PK06W01.PK06WERS = "Y";
        set PK06M300.PK06MRDT[PK06WNDX] cursor, bold;
      else
        /* ** 4.*/
        set TA9REC empty;
        TA9REC.TA9BEGDT = TA2REC.TA2GRGGN;
        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
        if (TA9REC.TA9RTNFL != 0)
          converseLib.validationFailed(56);
          PK06W01.PK06WERS = "Y";
          set PK06M300.PK06MRDT[PK06WNDX] cursor, bold;
        end
      end
    end
  end
  ;
  if (PK06W01.PK06WERS != "Y")
    PK06W04.PKBRELDT[PK06WIX4] = TA2REC.TA2GRGGN;
  end
  ;
   /* --- end of:pk06365 - validate release dates ----------------*/
end // end PK06365

// check for dup holds
Function PK06370()
   /* ------------pk06370 - check for dup holds ------------------*/
  ;
  ;
  PK06M300.XXXERRID = "PK06370";
  set PKZREC empty;
  set PKBREC empty;
  PKBREC.XWHCD = PK06M300.XWHCD;
  PKBREC.PK1CUOID = PK06M300.PK1CUOID[PK06WNDX];
  PKBREC.PK1NORID = PK06M300.PK1NORID[PK06WNDX];
  PKBREC.XHRCD = PK06M300.XHRCD[PK06WNDX];
  PKZREC.PKZFUNC = "S ";
  PK06125();
  if (SQLCA.VAGen_SQLCODE == 0 /* successful*/
   || SQLCA.VAGen_SQLCODE == -811)
    set PK06M300.PK06MSEL[PK06WNDX] cursor, bold;
    set PK06M300.XHRCD[PK06WNDX] bold;
    PK06W01.PK06WERS = "Y";
    converseLib.validationFailed(302);
  end
  ;
   /* ------- end:pk06370 - check for dup holds ------------------*/
end // end PK06370

// load pkyrec for ord/itm xfer
Function PK06375()
   /* -------------- pk06375 - load array for xfer ---------------*/
  ;
  set PKYREC empty;
  PKYREC.XWHCD = PK06M300.XWHCD;
  PKWREC.PKWINDEX = 1;
  if (converseVar.eventKey is pf13)
    PKWREC.PKWSLTYP[PKWINDEX] = "O";
  else
    PKWREC.PKWSLTYP[PKWINDEX] = "S";
  end
  PK06W04.PK06WIX4 = 1;
  PK06W01.PK06WWIX = 1;
  while (PK06W04.PK06WIX4 <= PK06W04.PK06WCNT
   && PK06W01.PK06WWIX <= 30)
    if (PK06W04.PK06WSEL[PK06WIX4] == "S")
      PKYREC.PKYORACT[PK06WWIX] = "S";
      PKYREC.PK1CUOID[PK06WWIX] = PK06W04.PK1CUOID[PK06WIX4];
      PKYREC.PK1NORID[PK06WWIX] = PK06W04.PK1NORID[PK06WIX4];
      PK06W01.PK06WWIX = PK06W01.PK06WWIX + 1;
    end
    PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
  end
  PKWREC.PKWARRAY[PKWINDEX] = PKYREC.PKWARRAY;
  ;
  if (PK06W04.PK06WIX4 <= PK06W04.PK06WCNT)
    set PKYREC empty;
    PK06W01.PK06WWIX = 1;
    PKWREC.PKWINDEX = 2;
    PKWREC.PKWSLTYP[PKWINDEX] = "O";
    while (PK06W04.PK06WIX4 <= PK06W04.PK06WCNT
     && PK06W01.PK06WWIX <= 30)
      if (PK06W04.PK06WSEL[PK06WIX4] == "S")
        PKYREC.PKYORACT[PK06WWIX] = "S";
        PKYREC.PK1CUOID[PK06WWIX] = PK06M300.PK1CUOID[PK06WIX4];
        PKYREC.PK1NORID[PK06WWIX] = PK06M300.PK1NORID[PK06WIX4];
        PK06W01.PK06WWIX = PK06W01.PK06WWIX + 1;
      end
      PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
    end
  end
  ;
   /* --------- end: pk06375 - load array for xfer ---------------*/
end // end PK06375

// load pkxrec for cust xfer
Function PK06380()
   /* -------------- pk06380 - load array for cust xfer ----------*/
  ;
  set PKXREC empty;
  PKXREC.XWHCD = PK06M300.XWHCD;
  PKXREC.XWHABRV = PKWREC.XWHABRV;
  PKWREC.PKWINDEX = 1;
  PKWREC.PKWSLTYP[PKWINDEX] = "C";
  ;
  PK06W04.PK06WIX4 = 1;
  PK06W01.PK06WWIX = 1;
  while (PK06W04.PK06WIX4 <= PK06W04.PK06WCNT
   && PK06W01.PK06WWIX <= 30)
    if (PK06W04.PK06WSEL[PK06WIX4] == "S")
      PKXREC.PKXKUACT[PK06WWIX] = "S";
      PKXREC.KUCCOID[PK06WWIX] = PK06W04.KUCCOID[PK06WIX4];
      PKXREC.KUMSTRID[PK06WWIX] = PK06W04.KUMSTRID[PK06WIX4];
      PKXREC.XNXCD[PK06WWIX] = PK06W04.XNXCD[PK06WIX4];
      PK06W01.PK06WWIX = PK06W01.PK06WWIX + 1;
    end
    PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
  end
  PKWREC.PKWARRAY[PKWINDEX] = PKXREC.PKWARRAY;
  ;
  if (PK06W04.PK06WIX4 <= PK06W04.PK06WCNT)
    set PKXREC empty;
    PK06W01.PK06WWIX = 1;
    PKWREC.PKWINDEX = 2;
    PKWREC.PKWSLTYP[PKWINDEX] = "O";
    while (PK06W04.PK06WIX4 <= PK06W04.PK06WCNT
     && PK06W01.PK06WWIX <= 30)
      if (PK06W04.PK06WSEL[PK06WIX4] == "S")
        PKXREC.PKXKUACT[PK06WWIX] = "S";
        PKXREC.KUCCOID[PK06WWIX] = PK06W04.KUCCOID[PK06WIX4];
        PKXREC.KUMSTRID[PK06WWIX] = PK06W04.KUMSTRID[PK06WIX4];
        PKXREC.XNXCD[PK06WWIX] = PK06W04.XNXCD[PK06WIX4];
        PK06W01.PK06WWIX = PK06W01.PK06WWIX + 1;
      end
      PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
    end
    PKWREC.PKWARRAY[PKWINDEX] = PKXREC.PKWARRAY;
  end
  ;
   /* ----------end: pk06380 - load array for cust xfer ----------*/
end // end PK06380

// process valid request
Function PK06400()
   /* ------------ pk06400 update those orders selected --------*/
  ;
  if (PK06W01.PK06WUPD != "Y")
    return;
  end
  ;
  PK06W04.PK06WIX4 = 1;
  PK06W01.PK06WERS = "N";
  while (PK06W04.PK06WIX4 <= PK06W04.PK06WCNT
   && PK06W01.PK06WERS != "Y")
    if (PK06W04.PK06WSEL[PK06WIX4] == "H")
      PK06500(); /* process order hold*/
    else
      if (PK06W04.PK06WSEL[PK06WIX4] == "R")
        PK06600(); /* process order release*/
      else
        if (PK06W04.PK06WSEL[PK06WIX4] == "C")
          PK06700(); /* change order release date*/
        end
      end
    end
    if (PK06W01.PK06WERS == "Y")
      if (SQLCA.VAGen_SQLCODE != -911)
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        exit stack;
      end
    else
      if (PK06W04.PK06WSEL[PK06WIX4] == "H"
       || PK06W04.PK06WSEL[PK06WIX4] == "R"
       || PK06W04.PK06WSEL[PK06WIX4] == "C")
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        if (PK06W04.PK06WSEL[PK06WIX4] == "R")
          PK06W04.PKBRELDT[PK06WIX4] = 0;
          PK06W04.XHRCD[PK06WIX4] = " ";
        end
        PK06W04.PK06WSEL[PK06WIX4] = "*";
        PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
      else
        PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
      end
    end
  end
  ;
  if (PK06W01.PK06WERS == "N")
    PK06W04.PK06WIX4 = PK06W04.PK06WSVX;
    PK06M100.XXXERRID = "PK06400";
    PK06M300.XXXERRID = "PK06400";
    PK06W01.PK06WLSC = "Y";
    converseLib.validationFailed(32);
  else
    if ("*" in PK06W04.PK06WSEL from 1)
      PK06W04.PK06WIX4 = PK06W04.PK06WSVX;
      PK06M100.XXXERRID = "PK06400";
      PK06M300.XXXERRID = "PK06400";
      PK06W01.PK06WLSC = "Y";
      converseLib.validationFailed(113); /* partial update completed*/
    end
  end
  ;
   /* ------------ pk06400 update those orders selected --------*/
end // end PK06400

// * order hold update
Function PK06500()
   /* ----- pk06500*/
   /* ----- update hold tables*/
  ;
  ;
  PK06M300.XXXERRID = "PK06500";
  ;
   /* create order hold row*/
  ;
  set PKBREC empty;
  PKBREC.XWHCD = PK06M300.XWHCD;
  PK06W01.PK06WPTN = PK06W04.PK1CUOID[PK06WIX4];
  PKBREC.PK1PRTN = PK06W01.PK06WPRT;
  PKBREC.PK1CUOID = PK06W04.PK1CUOID[PK06WIX4];
  PKBREC.PK1NORID = PK06W04.PK1NORID[PK06WIX4];
  if (PK06W04.XHRCD[PK06WIX4] == " ")
    PKBREC.XHRCD = PK06M100.PK06MDHC;
    PK06W04.XHRCD[PK06WIX4] = PK06M100.PK06MDHC;
  else
    PKBREC.XHRCD = PK06W04.XHRCD[PK06WIX4];
  end
  PK06W01.PK06WFDA = VGVar.currentShortGregorianDate;
  PKBREC.ZZZCHGDT = PK06W01.PK06WFDT; /* change date*/
  PKBREC.ZZZCHGCT = 0; /* change count*/
  PKBREC.XXXUSRID = COMMAREA.CAUSERID;
  PK06W01.PK06WTIM = VGVar.currentFormattedTime;
  PK06W01.PK06WTHH = PK06W01.PK06WHH;
  PK06W01.PK06WTMM = PK06W01.PK06WMI;
  PKBREC.ZZZCHGTM = PK06W01.PK06WTI; /* change time*/
  if (PK06W04.PKBRELDT[PK06WIX4] == 0)
    PK06W01.PK06WFMM = PK06M100.PK06MRMM;
    PK06W01.PK06WFDD = PK06M100.PK06MRDD;
    PK06W01.PK06WFYY = PK06M100.PK06MRYY;
    if (PK06W01.PK06WFYY >= 50)
      PK06W01.PK06WFCT = 19;
    else
      PK06W01.PK06WFCT = 20;
    end
    PKBREC.PKBRELDT = PK06W01.PK06WFDT;
    PK06W04.PKBRELDT[PK06WIX4] = PK06W01.PK06WFDT;
  else
    PKBREC.PKBRELDT = PK06W04.PKBRELDT[PK06WIX4];
  end
  ;
   /* --5/16/89--- if release date is not '999999' subtract 1 from*/
   /* ------------ release date and move to the plan release date*/
  ;
  PK06W01.PK06WFDT = PKBREC.PKBRELDT;
  ;
  ;
   /* ====== Y2K OUT BEGIN ======*/
  ;
   /* IF PK06W01.PK06WFMM NE 99*/
    /* OR PK06W01.PK06WFDD NE 99*/
    /* OR PK06W01.PK06WFYY NE 99;*/
  ;
   /* ====== Y2K OUT END ======*/
  ;
   /* ====== Y2K IN BEGIN ======*/
  ;
  if (PK06W01.PK06WFMM != 99
   && PK06W01.PK06WFDD != 99
   && PK06W01.PK06WFYY != 99)
    ;
    /* ====== Y2K IN END ======*/
    ;
    ;
    set TA9REC empty;
    TA9REC.TA9BEGDT = PK06W01.PK06WFDT;
    TA9REC.TA9OFSET = -1;
    ;
    try
      call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
    end /* subtract 1 from date*/
    ;
    /* ------------------------------------------------------------*/
     /* if successful, move date and continue through process*/
    /* ------------------------------------------------------------*/
    ;
    if (sysVar.errorCode == "00000000" /* call successful*/
     && TA9REC.TA9RTNFL == 0)          /* and normal return codes*/
      ;
      PKBREC.PKBPLRDT = TA9REC.TA9RTNDT;
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* otherwise indicate that a system error has occurred*/
      /* ------------------------------------------------------------*/
      ;
      PK06W01.PK06WERS = "Y";
      TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return codes*/
      TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* subroutine parameters*/
      converseLib.validationFailed(29); /* fatal error*/
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
      TA1REC.TA1TYPE = "APPL"; /* type of error*/
      TA1REC.TA1LOC = "UPDATE PLAN RELEASE DATE";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
      TA1REC.TA1PGMNO = "PK06"; /* program number*/
      TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* map application*/
      TA1REC.TA1MAPNO = "PK06M300"; /* map number*/
      ;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/
      ;
      exit stack; /* exit to display map*/
      ;
    end
    ;
  else
    PKBREC.PKBPLRDT = PK06W01.PK06WFDT;
    ;
  end
  ;
  PKZREC.PKZFUNC = "A ";
  call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes}; /* add order hold row*/
  if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
    PK06510(); /* update hold flag on pool header*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(28); /* contention for data base resorce*/
      return;
    else
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(29); /* fatal error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PK06500 "; /* Process name*/
      TA1REC.TA1LOC = "ADD                      ";
      TA1REC.TA1MAP = "PK06M300"; /* Map name*/
      TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
      return;
    end
  end
  ;
   /* ----- end pk06500*/
end // end PK06500

// update pool header hld-cd
Function PK06510()
  ;
   /* ----- pk06510*/
   /* ----- update pool header hold code if in pool*/
  ;
  PK06M300.XXXERRID = "PK06510";
  ;
   /* ----- update the pool header hold code to 'y'*/
   /* -----*/
  set PWIREC empty;
  set PK4REC empty;
  PK4REC.XWHCD = PK06M300.XWHCD;
  PK4REC.PK1CUOID = PK06W04.PK1CUOID[PK06WIX4];
  PK4REC.PK1NORID = PK06W04.PK1NORID[PK06WIX4];
  PWIREC.PWIFUNC = "S ";
  PK06121(); /* select unique*/
                                    /* on pool header*/
  if (SQLCA.VAGen_SQLCODE != 0) /* successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      converseLib.validationFailed(70); /* update ok but order not in pool*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(21); /* contention for data base resorce*/
      end
    end
    return;
  else
    if (PK4REC.PK4ORHLD != "Y")
      PK4REC.PK4ORHLD = "Y";
      PK06W04.PK4ORHLD[PK06WIX4] = "Y";
      ;
   /* ====== Y2K OUT BEGIN ======*/
      ;
     /* MOVE 19 TO PK06W01.PK06WFCT;*/
     /* MOVE EZEDTE TO PK06W01.PK06WFDA;*/
      ;
   /* ====== Y2K OUT END ======*/
      ;
      ;
   /* ====== Y2K IN BEGIN ======*/
      ;
      PK06W01.PK06WFDT = VGVar.currentGregorianDate;
      ;
   /* ====== Y2K IN END ======*/
      ;
      PK4REC.ZZZCHGDT = PK06W01.PK06WFDT; /* change date*/
      PK06W01.PK06WTIM = VGVar.currentFormattedTime;
      PK06W01.PK06WTHH = PK06W01.PK06WHH;
      PK06W01.PK06WTMM = PK06W01.PK06WMI;
      PK4REC.ZZZCHGTM = PK06W01.PK06WTI; /* change time*/
      PWIREC.PWIFUNC = "U ";
      PK06121(); /* update*/
      if (SQLCA.VAGen_SQLCODE != 0) /* successful*/
        if (SQLCA.VAGen_SQLCODE == -911)
          PK06W01.PK06WERS = "Y";
          converseLib.validationFailed(21); /* contention for data base resorce*/
        end
      end
    end
  end
   /* ----- end pk06510*/
end // end PK06510

// * order release
Function PK06600()
   /* ----- pk06600*/
   /* ----- update hold tables*/
   /* ----- order release processing*/
  ;
  PK06M300.XXXERRID = "PK06600";
  set PKZREC empty;
  set PKBREC empty;
  PKBREC.XWHCD = PK06M300.XWHCD;
  PKBREC.PK1CUOID = PK06W04.PK1CUOID[PK06WIX4];
  PKBREC.PK1NORID = PK06W04.PK1NORID[PK06WIX4];
  PKBREC.XHRCD = PK06W04.XHRCD[PK06WIX4];
  PKZREC.PKZFUNC = "D ";
  PK06125();
  if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
    set PKZREC empty;
    set PKBREC empty;
    PKBREC.XWHCD = PK06M300.XWHCD;
    PKBREC.PK1CUOID = PK06W04.PK1CUOID[PK06WIX4];
    PKBREC.PK1NORID = PK06W04.PK1NORID[PK06WIX4];
    PKBREC.XHRCD = "*";
    PKZREC.PKZFUNC = "CT";
    PK06125(); /* are there any more holds*/
    if (PKZREC.PKZSUM1 == 0) /* no more holds found*/
      PK06610(); /* update hold flag on pool header*/
    end
  end
  ;
   /* ----- end pk06600*/
end // end PK06600

// update pool header hld-cd
Function PK06610()
   /* ----- pk06610*/
   /* ----- update pool header hold code if there*/
  ;
  ;
  PK06M300.XXXERRID = "PK06610";
  ;
   /* ----- update the pool header hold code to 'n'*/
   /* -----*/
  set PWIREC empty;
  set PK4REC empty;
  PK4REC.XWHCD = PK06M300.XWHCD;
  PK4REC.PK1CUOID = PK06W04.PK1CUOID[PK06WIX4];
  PK4REC.PK1NORID = PK06W04.PK1NORID[PK06WIX4];
  PWIREC.PWIFUNC = "S ";
  PK06121();
                                  /* on pool header*/
  if (SQLCA.VAGen_SQLCODE != 0) /* successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      converseLib.validationFailed(70); /* update ok but order not on pool*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(21); /* contention for data base resorce*/
      end
    end
    return;
  else
    if (PK4REC.PK4ORHLD == "Y")
      PK4REC.PK4ORHLD = "N";
      PK06W04.PK4ORHLD[PK06WIX4] = "N";
      ;
   /* ====== Y2K OUT BEGIN =======*/
      ;
     /* MOVE 19 TO PK06W01.PK06WFCT;*/
     /* MOVE EZEDTE TO PK06W01.PK06WFDA;*/
      ;
   /* ====== Y2K OUT END =======*/
      ;
      ;
   /* ====== Y2K IN BEGIN =======*/
      ;
      PK06W01.PK06WFDT = VGVar.currentGregorianDate;
      ;
   /* ====== Y2K IN END =======*/
      ;
      PK4REC.ZZZCHGDT = PK06W01.PK06WFDT; /* change date*/
      PK06W01.PK06WTIM = VGVar.currentFormattedTime;
      PK06W01.PK06WTHH = PK06W01.PK06WHH;
      PK06W01.PK06WTMM = PK06W01.PK06WMI;
      PK4REC.ZZZCHGTM = PK06W01.PK06WTI; /* change time*/
      PWIREC.PWIFUNC = "U ";
      PK06121();
      if (SQLCA.VAGen_SQLCODE != 0) /* successful*/
        if (SQLCA.VAGen_SQLCODE == -911)
          PK06W01.PK06WERS = "Y";
          converseLib.validationFailed(21); /* contention for data base resorce*/
        end
      end
    end
  end
   /* ----- end pk06610*/
end // end PK06610

// change release date
Function PK06700()
  ;
   /* ----- pk06700*/
   /* ----- update hold tables*/
   /* ----- change release date*/
  ;
  ;
  PK06M300.XXXERRID = "PK06700";
  ;
  ;
  set TA9REC empty;
  TA9REC.TA9BEGDT = PK06W04.PKBRELDT[PK06WIX4];
  ;
   /* --5/16/89--- if release date is not '999999' subtract 1 from*/
   /* ------------ release date and move to the plan release date*/
  ;
  ;
   /* ======= Y2K OUT BEGIN =======*/
  ;
   /* IF TA9REC.TA9BEGMM EQ 99*/
    /* OR TA9REC.TA9BEGDD EQ 99*/
    /* OR TA9REC.TA9BEGYY EQ 99;*/
  ;
   /* ======= Y2K OUT END =======*/
  ;
   /* ======= Y2K IN BEGIN =======*/
  ;
  if (TA9REC.TA9BEGMM == 99
   && TA9REC.TA9BEGDD == 99
   && TA9REC.TA9BEGYY == 99)
    ;
   /* ======= Y2K IN END =======*/
    ;
    TA9REC.TA9BEGDT = 999999999;
    TA9REC.TA9RTNDT = 999999999;
  else
    TA9REC.TA9OFSET = -1;
    try
      call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
    end /* subtract 1 from date*/
    if (sysVar.errorCode == "00000000" /* call successful*/
     && TA9REC.TA9RTNFL == 0)          /* and normal return code*/
       /* next sentence*/
    else
      PK06W01.PK06WERS = "Y";
      TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
      TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* subroutine parameters*/
      converseLib.validationFailed(29); /* fatal error*/
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
      TA1REC.TA1TYPE = "APPL"; /* type of error*/
      TA1REC.TA1LOC = "UPDATE FOR PLAN RELEASE DATE";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
      TA1REC.TA1PGMNO = "400"; /* program number*/
      TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* map application*/
      TA1REC.TA1MAPNO = "M010"; /* map number*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/
      return; /* exit to display map*/
    end
  end
  ;
  ;
  PKBREC.XWHCD = PK06M300.XWHCD;
  PKBREC.PK1CUOID = PK06W04.PK1CUOID[PK06WIX4];
  PKBREC.PK1NORID = PK06W04.PK1NORID[PK06WIX4];
  PKBREC.XHRCD = PK06W04.XHRCD[PK06WIX4];
  TA1REC.TA1LOC = "SELECT";
  PKZREC.PKZFUNC = "S ";
  PK06125();
  if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
    TA1REC.TA1LOC = "UPDATE";
    ;
   /* ====== Y2K OUT BEGIN =======*/
    ;
   /* MOVE 19 TO PK06W01.PK06WFCT;    /* setup change date*/
   /* MOVE EZEDTE TO PK06W01.PK06WFDA;*/
    ;
   /* ====== Y2K OUT END =======*/
    ;
    ;
   /* ====== Y2K IN BEGIN =======*/
    ;
    PK06W01.PK06WFDT = VGVar.currentGregorianDate;
    ;
   /* ====== Y2K IN END =======*/
    ;
    PKBREC.ZZZCHGDT = PK06W01.PK06WFDT; /* change date*/
    PKBREC.XXXUSRID = COMMAREA.CAUSERID; /* userid*/
    PK06W01.PK06WTIM = VGVar.currentFormattedTime; /* setup change time*/
    PK06W01.PK06WTHH = PK06W01.PK06WHH;
    PK06W01.PK06WTMM = PK06W01.PK06WMI;
    PKBREC.ZZZCHGTM = PK06W01.PK06WTI; /* change time*/
    PKBREC.PKBRELDT = TA9REC.TA9BEGDT; /* MOVE NEW RLSE DATES*/
    PKBREC.PKBPLRDT = TA9REC.TA9RTNDT;
    PKZREC.PKZFUNC = "U ";
    PK06125();
  end
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* successful*/
    if (SQLCA.VAGen_SQLCODE == -911)
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(28); /* contention for data base resorce*/
    end
  end
  ;
   /* ----- end pk06700*/
end // end PK06700

DataItem CA-SYS-WORKAREA char(2048)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem CA-SYS-WORKAREA-1 char(512)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 512-char system sub-workarea
DataItem CA-SYS-WORKAREA-2 char(512)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 512-char system sub-workarea
DataItem CA-SYS-WORKAREA-3 char(512)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 512-char system sub-workarea
DataItem CA-SYS-WORKAREA-4 char(512)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 6K Workarea avail to users
DataItem CA-USER-WORKAREA char(6144)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2K sub-workarea
DataItem CA-USER-WORKAREA-2K-A char(2048)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2K sub-workarea
DataItem CA-USER-WORKAREA-2K-B char(2048)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2k sub-workarea
DataItem CA-USER-WORKAREA-2K-C char(2048)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 4K sub-workarea
DataItem CA-USER-WORKAREA-4K char(4096)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea add info
DataItem CAADD char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea add flag
DataItem CAADDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea add level flags
DataItem CAALVL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea chg info
DataItem CACHG char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea chg flag
DataItem CACHGFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea chg level flags
DataItem CACLVL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3rd pos of current applic
DataItem CACURAP3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 4th pos of current applic
DataItem CACURAP4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea current applic
DataItem CACURAPP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea current applic id
DataItem CACURRAP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea current system
DataItem CACURSYS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea del info
DataItem CADEL char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea del flag
DataItem CADELFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea del level flags
DataItem CADLVL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ezesegtr w/s
DataItem CAEZSAP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ezesegtr 1 & 2 pos
DataItem CAEZSG12 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ezesegtr 3rd pos
DataItem CAEZSG3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ezesegtr 4th pos
DataItem CAEZSG4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea from applic
DataItem CAFRMAPP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea from system
DataItem CAFRMSYS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea from applic id
DataItem CAFROMAP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea inq level flags
DataItem CAILVL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea inq info
DataItem CAINQ char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea inq flag
DataItem CAINQFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea item (to data)
DataItem CAITEM char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea item letter array
DataItem CAITMLTR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea system message
DataItem CAMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message, part a (1 of 2 parts)
DataItem CAMSGA char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message, part b (2 of 2 parts)
DataItem CAMSGB char(42)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2 char msg sequence number
DataItem CAMSGNO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// appl id to transfer to
DataItem CAMTOAP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea security ret code
DataItem CASECRC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// commarea system init flag
DataItem CASYSINT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea to application id
DataItem CATOAP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea to applic
DataItem CATOAPP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea to system
DataItem CATOSYS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// orig user workarea(1700 chars)
DataItem CAUSERA char(1700)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea user id
DataItem CAUSERID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// COMMISSIONS YES/NO FLAG
DataItem COCMFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem COMMAREA-GROUP char(8192)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_CO_SHORT_NM
DataItem CU-CO-SHORT-NM char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_doc_by_ord_fl
DataItem CU-DOC-BY-ORD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu-edi-cust-ind
DataItem CU-EDI-CUST-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_hang_dflt_fl
DataItem CU-HANG-DFLT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_max_aprl_ynt_cd
DataItem CU-MAX-APRL-YNT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_max_ftwr_ynt_cd
DataItem CU-MAX-FTWR-YNT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu-stynm-prt-fl
DataItem CU-PL-STYNM-PRT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_prt_xref_fl
DataItem CU-PRT-XREF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// IN_STKTF_FR_OWNGRP
DataItem IN7STFOW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// IN_STKTF_REL_DT
DataItem IN7STLDT int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// IN_STKTF_RQT_ETA
DataItem IN7STQDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// IN_STKTF_TO_WHSE
DataItem IN7STTWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// IN_SAS_ID
DataItem INASAID int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// CU_CO_ADDR_ID
DataItem KUCCOAID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CU_CO_ID
DataItem KUCCOID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// CU_CO_NM
DataItem KUCCONM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_GRP_CO_ID
DataItem KUCGRPID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// CU_CUSKU_IND
DataItem KUCSKIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_std_ynt_cd
DataItem KUCSTYNT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_unt_per_cs
DataItem KUCUNTCS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cu-alw-mix-box-fl
DataItem KUFMIXBL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_PROD_ID
DataItem KUIPRDID char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_DEPT_SELF_ID
DataItem KUJSLFID char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_PNT_CO_ID
DataItem KUKPCOID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CU_ADDR_ID
DataItem KULAAID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// CU_CNTY_CD
DataItem KULCNTY char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_ADDR_USE_CNT
DataItem KULUSCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// CU_STOR_CITY_SHORT
DataItem KUMCITYS char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_SHGRP_ADDR_ID
DataItem KUMSHAID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CU_STOR_SELF_ID
DataItem KUMSLFID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_STOR_ADDR_ID
DataItem KUMSTAID int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// CU_STOR_ID
DataItem KUMSTRID smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// CU_STOR_NM
DataItem KUMSTRNM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_STOR_NM_SHORT
DataItem KUMSTSNM char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_STOR_ST_CD
DataItem KUMXSTCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OP_CUST_LABL_PRTFL
DataItem OP-CUST-LABL-PRTFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OP_HMDL_HOT_FL
DataItem OP-HMDL-HOT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-onetime-ship-fl
DataItem OP11TMSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-cust-need-dt
DataItem OP1CUNDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// op_cust_ord_id
DataItem OP1CUOID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// op-cust-po
DataItem OP1CUPO char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-dnt-ship-aft-dt
DataItem OP1DSADT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-dnt-ship-bfr-dt
DataItem OP1DSBDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OP_EXPD_FL
DataItem OP1EXPDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-frgt-ppd-fl
DataItem OP1FTIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op_nike_ord_id
DataItem OP1NORID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// op-nbr-tm-alloc
DataItem OP1NTMAL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-shgrp-ovrd-ind
DataItem OP1SGPAO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-spcl-hndl-fl
DataItem OP1SPHDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-spcl-inst-fl
DataItem OP1SPINF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-spcl-labl-fl
DataItem OP1SPLBF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-tkn-by-svrep-id
DataItem OP1TBREP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-avg-unit-prc
DataItem OP2AUPRC decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-coor-grp-cd
DataItem OP2CGPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-cu-po-line-nbr
DataItem OP2CPLNB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OP_ALT_NM
DataItem OP5ALTNM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_CU_IN_SEG_CD
DataItem PC2INSEG char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PG_FCST_CD
DataItem PG-FCST-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PG_SCHED_SPCLT_CD
DataItem PG-SCHED-SPCLT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-hndl-lvl-fl
DataItem PK-HNDL-LVL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-ivc-req-fl
DataItem PK-IVC-REQ-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk_nxt_outer_nbr
DataItem PK-NXT-OUTER-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk-nxt-pre-crtnnbr
DataItem PK-NXT-PRE-CRTNNBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk-ord-dclr-val
DataItem PK-ORD-DCLR-VAL decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Run number
DataItem PK-RUN-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_SEL_TYP_CD
DataItem PK-SEL-TYP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-tot-item-wt
DataItem PK-TOT-ITEM-WT decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// auto hold flag
DataItem PK06MAHD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// auto release flag
DataItem PK06MARL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "from" dsnb dd
DataItem PK06MDFD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "from" dsnb mm
DataItem PK06MDFM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "from" dsnb yy
DataItem PK06MDFY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// default hold code
DataItem PK06MDHC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// default hold desc
DataItem PK06MDHR char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "to  " dsnb dd
DataItem PK06MDTD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "to  " dsnb mm
DataItem PK06MDTM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "to  " dsnb yy
DataItem PK06MDTY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "from" need dd
DataItem PK06MNFD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "from" need mm
DataItem PK06MNFM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "from" need yy
DataItem PK06MNFY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "to  " need dd
DataItem PK06MNTD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "to  " need mm
DataItem PK06MNTM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "to  " need yy
DataItem PK06MNTY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// default release date(dd)
DataItem PK06MRDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "from" rlse dd
DataItem PK06MRFD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "from" rlse mm
DataItem PK06MRFM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "from" rlse yy
DataItem PK06MRFY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// default release date(mm)
DataItem PK06MRMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "to  " rlse dd
DataItem PK06MRTD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "to  " rlse mm
DataItem PK06MRTM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "to  " rlse yy
DataItem PK06MRTY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// default release date(yy)
DataItem PK06MRYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current time
DataItem PK06MTIM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// exclude holds flag
DataItem PK06MXHD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// exclude non-planned flag
DataItem PK06MXNP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// exclude planned flag
DataItem PK06MXPL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// brand code abreviation
DataItem PK06W-XBCABRV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// carrier hold flag
DataItem PK06WCHF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total entries in array
DataItem PK06WCNT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current pk06m300 page
DataItem PK06WCPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// table counter
DataItem PK06WCT1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// screen counter
DataItem PK06WCT2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// screen array
DataItem PK06WDAT char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem PK06WDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group date mmddyy
DataItem PK06WDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold dates for selection
DataItem PK06WDTS char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag
DataItem PK06WENX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// scroll error flag
DataItem PK06WERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem PK06WERS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem PK06WFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group yymmdd
DataItem PK06WFDA num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PK06WFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group yyyymmdd
DataItem PK06WFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first time thru flag
DataItem PK06WFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of vholdr01 tbl flag
DataItem PK06WFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table overflow flag
DataItem PK06WFL4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fields entered counter
DataItem PK06WFLE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem PK06WFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first time thru flag
DataItem PK06WFTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PK06WFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// get data flag
DataItem PK06WGET char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hours
DataItem PK06WHH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// counter link screen/table
DataItem PK06WINX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// array index
DataItem PK06WIX4 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// array index
DataItem PK06WIX5 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer hold flag
DataItem PK06WKHF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// load screen flag
DataItem PK06WLSC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved current map id
DataItem PK06WMAP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max entries (see pk06005)
DataItem PK06WMAX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// minutes
DataItem PK06WMI char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PK06WMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// general index
DataItem PK06WNDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// left overs for divide
DataItem PK06WPGD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total pages for pk06m300
DataItem PK06WPGI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work area for page cnt
DataItem PK06WPGS num(10,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// passed index table location
DataItem PK06WPIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ord on plan flag
DataItem PK06WPLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order part character
DataItem PK06WPRT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "            " numeric
DataItem PK06WPTN num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk06m100 screen image grplvl
DataItem PK06WSCR char(212)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// action field
DataItem PK06WSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of first page save index
DataItem PK06WSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// store short name
DataItem PK06WSNM char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// seconds
DataItem PK06WSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save array pos of update
DataItem PK06WSUX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save array position
DataItem PK06WSVX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hours
DataItem PK06WTHH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// time
DataItem PK06WTI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group time
DataItem PK06WTIM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minutes
DataItem PK06WTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// transfer warning flag
DataItem PK06WTRN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total records read
DataItem PK06WTRR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total units in array
DataItem PK06WTUN num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// update flag
DataItem PK06WUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// release date error flag
DataItem PK06WVSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date CENTURY
DataItem PK06WWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work-date 1
DataItem PK06WWD1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work-date 2
DataItem PK06WWD2 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work day
DataItem PK06WWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date CCyymmdd
DataItem PK06WWDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work idx
DataItem PK06WWIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work month
DataItem PK06WWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem PK06WWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem PK06WYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk-nbr-times-aloc
DataItem PK1ALLNB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk-ord-stktf-id
DataItem PK1CUOID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PK-daloc-dt
DataItem PK1DALDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record group level
DataItem PK1GROUP char(193)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-hld-cd
DataItem PK1HLDCD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk1rec key
DataItem PK1KEY char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_LINE_ITEM_NBR
DataItem PK1LNINB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk-nike-ord-id
DataItem PK1NORID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pk-pick-sched-id
DataItem PK1PKSCH int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk-ord-part-char
DataItem PK1PRTN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-aloc-pick-qty (1-40)
DataItem PK1QTY decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order header key
DataItem PK1SBKEY char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-pick-tran-typ
DataItem PK1TRTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem PK2GROUP char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk2rec key
DataItem PK2KEY char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order header key
DataItem PK2SBKEY char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_SCHED_FL
DataItem PK2SCHFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_PICK_SCHED_NBR
DataItem PK2SCHNO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk-carr-spf-cd
DataItem PK4CARSP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_CUST_HLD_FL
DataItem PK4CUHLD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem PK4GROUP char(493)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_NBR_LN_ITEM
DataItem PK4ITEMS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Key group level
DataItem PK4KEY char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_ORD_FUL_CS_QTY
DataItem PK4ORDFC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_ORD_REPK_QTY
DataItem PK4ORDRP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_TOT_ORD_TM
DataItem PK4ORDTM decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_TOT_ORD_FT3
DataItem PK4ORFT3 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_ORD_HLD_FL
DataItem PK4ORHLD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_TOT_ORD_QTY
DataItem PK4OTUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_TOT_ORD_WT
DataItem PK4OTWGT decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_ORD_PLAN_DT
DataItem PK4PLNDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "MM-dd-yy", inputRequired = no
}
end

// PK_sel_ind
DataItem PK4SLIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_STKTF_FL
DataItem PK4STKTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem PK5GROUP char(290)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_TOT_ITM_FT3
DataItem PK5ITFT3 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_ITM_FUL_CS_QTY
DataItem PK5ITMFC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_ITM_REPK_QTY
DataItem PK5ITMRP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_TOT_ITM_TM
DataItem PK5ITMTM decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Record key
DataItem PK5KEY char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_LABL_DLVR_CD
DataItem PK5LBLDL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_TOT_ITEM_QTY
DataItem PK5TIQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Record group level
DataItem PK6GROUP char(166)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem PK7GROUP char(296)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem PK7KEY char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem PK9GROUP char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem PK9KEY char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_PICK_PLN_REL_DT
DataItem PK9PLRDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_REL_DT
DataItem PK9RELDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "MM-dd-yy", inputRequired = no
}
end

// Record group level
DataItem PKBGROUP char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem PKBKEY char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_PICK_PLN_REL_DT
DataItem PKBPLRDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_REL_DT
DataItem PKBRELDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "MM-dd-yy", inputRequired = no
}
end

// pk_crtn_cls
DataItem PKCCRTCL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk_crtn_lnth
DataItem PKCCRTLN decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data group item entire row
DataItem PKCDATA char(268)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style key into style table
DataItem PKCKEY char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_BOL_DFLT_TXT
DataItem PKDBDTXT char(75)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_BEG_SRT_LNE_NBR
DataItem PKDBSLNB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_DFLT_BELT_AREA
DataItem PKDDBPAR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_DFLT_BELT_LOC
DataItem PKDDBPLC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_DFLT_BELT_ZONE
DataItem PKDDBPZN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_DFLT_FUL_CS_MM
DataItem PKDDFCPM decimal(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_DFLT_CRTN_CLS
DataItem PKDDFCRC char(3)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// PK_DFLT_FT3_CASE
DataItem PKDDFF3C smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PK_DFLT_SY_AREA
DataItem PKDDFSYA char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// PK_DFLT_SY_LOC
DataItem PKDDFSYL char(6)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// PK_DFLT_SY_ZONE
DataItem PKDDFSYZ char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// PK_DFLT_TOTEPACKMM
DataItem PKDDFTPM decimal(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_DFLT_UNT_PER_CS
DataItem PKDDFUPC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PK_DFLT_WT_PER_UNT
DataItem PKDDFWPU decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PK_DFLT_ZONE_TYP
DataItem PKDDFZTY char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// PK_DFLT_HNDL_MM
DataItem PKDDHDPM decimal(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_DFLT_LETD_AREA
DataItem PKDDLDAR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_DFLT_LETD_LOC
DataItem PKDDLDLC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_DFLT_LETD_ZONE
DataItem PKDDLDZN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_DFLT_REPK_MM
DataItem PKDDRPPM decimal(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_FC_OFLN_AREA
DataItem PKDFCOFA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_FC_OFLN_LOC
DataItem PKDFCOFL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_FC-OFLN_ZONE
DataItem PKDFCOFZ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem PKDGRPLV char(274)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record key
DataItem PKDKEY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_LABL_DT(1,2,3)
DataItem PKDLBLDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_MUL_LOC_PRGE_DY
DataItem PKDMULOC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_MAX_CS_PER_LANE
DataItem PKDMXCPL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PK_MAX_UPS_WT_LMT
DataItem PKDMXWLM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PK_NBR_SRT_LANES
DataItem PKDNBRSL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pk_nxt_crtn_seqnbr
DataItem PKDNCSQN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_NFRGT_CRTN_FL
DataItem PKDNFCNF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_NBR_SRT_LNE_GRP
DataItem PKDNMSRT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk_nxt_pln_crtnnbr
DataItem PKDNPCNB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk_nxt_pln_totenbr
DataItem PKDNPTNB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk_nxt_shp_sched
DataItem PKDNSSCH smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk_nxt_tote_seqnbr
DataItem PKDNTSQN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk_nxt_pl_nbr
DataItem PKDNXPLN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_NXT_SCHED_NBR
DataItem PKDNXSCN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PK_PCT_CRTN_FILL
DataItem PKDPCCNF decimal(3,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_PKHLD_LDDY
DataItem PKDPHLDY smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_PAIR_CNT_REQ_FL
DataItem PKDPRCTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_QTY_NFRGT_SCHED
DataItem PKDQNFRT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_QTY_CARR_SCHED
DataItem PKDQTYCS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PK_DFLT_SPLY_AREA
DataItem PKDSPLAR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_DFLT_SPLY_LOC
DataItem PKDSPLLC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_DFLT_SPLY_ZONE
DataItem PKDSPLZN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_DFLT_TRLR_TYP
DataItem PKDTRLTP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk_ups_cnsld_fl
DataItem PKDUPSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_NXT_UPS_SGRPNBR
DataItem PKDUPSSG smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_WHSE_OFLN_AREA
DataItem PKDWHOFA char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// PK_WHSE_OFLN_LOC
DataItem PKDWHOFL char(6)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// PK_WHSE_OFLN_ZONE
DataItem PKDWHOFZ char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// PK_WHSE_TYP_CD
DataItem PKDWHTCD char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// pk_whse_typ_abrv
DataItem PKDWHTYA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk_whse_typ_desc
DataItem PKDWHTYD char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem PKHGROUP char(46)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem PKHKEY char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_PRV_FUL_CS_QTY
DataItem PKHPVSFC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_PRV_SEL_WRK_MM
DataItem PKHPVSMM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PK_PRV_REPK_QTY
DataItem PKHPVSRP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_bld_sched_cd
DataItem PKHSCHED char(2)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// Record group level
DataItem PKNGROUP char(358)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem PKNKEY char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem PKPGROUP char(77)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem PKPKEY char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-run-mode
DataItem PKURUNMD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XCT-CTRY-CD
DataItem PKW-ORD-GRP-SW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order type indicator
DataItem PKW-ORDER-TYP-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inquiry keys array
DataItem PKWARRAY char(344)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selected inquiry control
DataItem PKWCNTRL char(1197)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inquiry from application
DataItem PKWFRMAP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "from" date in DNSB date range
DataItem PKWFRMDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Record group level
DataItem PKWGRPLV char(1700)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Application array index
DataItem PKWINDEX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select fl values 'pp' or 'pk'
DataItem PKWSELSW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inquiry selections
DataItem PKWSLECT char(399)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inquiry selection type
DataItem PKWSLTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "to" date in DNSB date range
DataItem PKWTODT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Application user area
DataItem PKWUSERA char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// appl aditional user area
DataItem PKWUSERB char(485)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Previous warehouse code
DataItem PKWXWHCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Customer action field
DataItem PKXKUACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order action field
DataItem PKYORACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// I/O module function
DataItem PKZFUNC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Summary count 1
DataItem PKZSUM1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Summary count 2
DataItem PKZSUM2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Record group level
DataItem PWFGROUP char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem PWFKEY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PWIDATA char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// function to be performed
DataItem PWIFUNC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk_LABL_CD
DataItem PWRLBCD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// REG_ID
DataItem REG-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SM_SAGCY_ID
DataItem SM1AGYID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SP_SPGM_ABRV
DataItem SP1ABRV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SP_LIFE_CALC_FL
DataItem SP1CALCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SP_LIFE_CALC_XDT
DataItem SP1CALDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SP_CUST_IND
DataItem SP1CIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SP_SPGM_COMNT1
DataItem SP1COM1 char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SP_SPGM_COMNT10
DataItem SP1COM10 char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SP_SPGM_COMNT11
DataItem SP1COM11 char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SP_SPGM_COMNT12
DataItem SP1COM12 char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SP_SPGM_COMNT13
DataItem SP1COM13 char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SP_SPGM_COMNT14
DataItem SP1COM14 char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SP_SPGM_COMNT2
DataItem SP1COM2 char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SP_SPGM_COMNT3
DataItem SP1COM3 char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SP_SPGM_COMNT4
DataItem SP1COM4 char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SP_SPGM_COMNT5
DataItem SP1COM5 char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SP_SPGM_COMNT6
DataItem SP1COM6 char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SP_SPGM_COMNT7
DataItem SP1COM7 char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SP_SPGM_COMNT8
DataItem SP1COM8 char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SP_SPGM_COMNT9
DataItem SP1COM9 char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SP_SPGM_ID
DataItem SP1ID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Total of all sp1rec items
DataItem SP1ITEMS char(1218)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sp1rec key
DataItem SP1KEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SP_LIFE_FL
DataItem SP1LIFEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SP_SPGM_NM
DataItem SP1NM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SP_ORD_TYP_IND
DataItem SP1OTIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SP_PROD_IND
DataItem SP1PIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SP_SPGM_STAT
DataItem SP1STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// indicates the length of sqlca
DataItem SQLCABC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ezesqlca equivalent field
DataItem SQLCAHEX hex(272)  {
  align = left, fillCharacter = "0", isHexDigit = yes, inputRequired = no
}
end

// eye catcher for storage dumps
DataItem SQLCAID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SQLCAREC char(136)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// provide diagnotic information
DataItem SQLERRD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SQLERRM char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// description of error
DataItem SQLERRMC char(70)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// length indicator for sqlerrmc
DataItem SQLERRML smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// diagnostic information
DataItem SQLERRP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reserved for future use
DataItem SQLEXT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// provide diagnotic information
DataItem SQLWARN char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning indicator
DataItem SQLWARN0 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning indicator
DataItem SQLWARN1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning indicator
DataItem SQLWARN2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning indicator
DataItem SQLWARN3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning indicator
DataItem SQLWARN4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning indicator
DataItem SQLWARN5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning indicator
DataItem SQLWARN6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning indicator
DataItem SQLWARN7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SRCGRP char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_ALW_NEW_ORD_FL
DataItem SY-ALW-NEW-ORD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_BO_SW
DataItem SY-BO-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_BO_SW_EDT
DataItem SY-BO-SW-EDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem SY-COLR-CD-ID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_FRST_DOM_SLS_MO
DataItem SY-FRST-DOM-SLS-MO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_FUTR_OFFER_BDT
DataItem SY-FUTR-OFFER-BDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_FUTR_OFFER_XDT
DataItem SY-FUTR-OFFER-XDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_LIFE_CYC_EDT
DataItem SY-LIFE-CYC-EDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_PROD_ID
DataItem SY-PROD-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_PROJ_DOM_CLS_MO
DataItem SY-PROJ-DOM-CLS-MO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_PROP_OFFER_BDT
DataItem SY-PROP-OFFER-BDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_PROP_OFFER_XDT
DataItem SY-PROP-OFFER-XDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_RSTR_XSO_IND
DataItem SY-RSTR-XSO-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_SFTY_STKCLS_IND
DataItem SY-SFTY-STKCLS-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_ID
DataItem SY-STY-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_STY_NBR
DataItem SY-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_AVE_WT
DataItem SY1AVEWT decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// SY_SHORT_STY_NM
DataItem SY1SSTNM char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NBR
DataItem SY1STNBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NM
DataItem SY1STYNM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_UNITS_PER_CASE
DataItem SY1UNPCS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// SY_LIFE_CYC_EDT1
DataItem SY2CEDT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// SY_LIFE_CYC_EDT2
DataItem SY2CEDT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// SY_LIFE_CYC_EDT3
DataItem SY2CEDT3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_LIFE_CYC_EDT4
DataItem SY2CEDT4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_STY_COLR_ABRV
DataItem SY2CLRAB char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem SY2CLRID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_FRNG_GUT_SZ
DataItem SY3FRGUT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_SZ_SCL_CD
DataItem SY4SZSCL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_SZ_WT(1-40)
DataItem SYGSZWT decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TA1-GROUP char(152)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-data-base
DataItem TA1DBASE char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-db-tbl-group
DataItem TA1DBTBL char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-termination
DataItem TA1FUNC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-fyi-code
DataItem TA1FYICD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-location
DataItem TA1LOC char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-sub-location
DataItem TA1LOCAT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-map
DataItem TA1MAP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map application
DataItem TA1MAPAP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map number
DataItem TA1MAPNO char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Program application
DataItem TA1PGMAP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-pgm-name
DataItem TA1PGMNM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Program number
DataItem TA1PGMNO char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-tbl-key
DataItem TA1TBLKE char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-tbl-view
DataItem TA1TBLVU char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-error-type
DataItem TA1TYPE char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-century
DataItem TA2CENT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-days-diff
DataItem TA2DBDD char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-days-diff-num
DataItem TA2DBDDN num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-date-from
DataItem TA2DBDF char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-date-from-num
DataItem TA2DBDFN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-days-between-dates
DataItem TA2DBDGP char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-date-to
DataItem TA2DBDT char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-date-to-num
DataItem TA2DBDTN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-option
DataItem TA2DTOPT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-days-to-add
DataItem TA2DYAOD num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-day-of-week
DataItem TA2DYWK char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-error-message
DataItem TA2ERMSG char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-greg-dash
DataItem TA2GRBD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-greg-dash
DataItem TA2GRBD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-greg-b-dd
DataItem TA2GRBDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-greg-b-mm
DataItem TA2GRBMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-greg-b-yy
DataItem TA2GRBYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WDATE-GREG-CCYYMM
DataItem TA2GRCYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-greg-mmddccyy-num
DataItem TA2GRECN num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-greg-mmddyy
DataItem TA2GRGA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-greg-mmddyy-num
DataItem TA2GRGAN num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-greg-mmddyy-display
DataItem TA2GRGB char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-greg-mmddccyy
DataItem TA2GRGC char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-greg-mmddccyy-display
DataItem TA2GRGD char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WDATE-GREG-DD
DataItem TA2GRGDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-greg-yymmdd
DataItem TA2GRGE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-greg-yymmdd-num
DataItem TA2GRGEN num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-greg-ccyymmdd
DataItem TA2GRGG char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-greg-ccyymmdd-num
DataItem TA2GRGGN num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-greg-ccyymmdd-display
DataItem TA2GRGH char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WDATE-GREG-YYMM
DataItem TA2GRGYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-greg-yymmdd-display
DataItem TA2GROF char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-parameters
DataItem TA2GROUP char(200)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-type
DataItem TA2GRTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-julien
DataItem TA2JULN char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-julien-num
DataItem TA2JULNN num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-literal-date
DataItem TA2LITDT char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-return-code
DataItem TA2RTNCD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-time
DataItem TA2TIME char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-time-display
DataItem TA2TIMED char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-time-num
DataItem TA2TIMEN num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-time-hhmm
DataItem TA2TIMHM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-time-ss
DataItem TA2TIMSS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wta0230-db2-subsys-id
DataItem TA3DB2SS char(4)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// beginning date century
DataItem TA9BEGCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// beginning date day
DataItem TA9BEGDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// beginning date
DataItem TA9BEGDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// beginning date month
DataItem TA9BEGMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// beginning date year
DataItem TA9BEGYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of days difference
DataItem TA9DTDIF num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ending date century
DataItem TA9ENDCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ending date day
DataItem TA9ENDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ending date
DataItem TA9ENDDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ending date month
DataItem TA9ENDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ending date year
DataItem TA9ENDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ta9 record group level
DataItem TA9GRP char(36)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of days to offset
DataItem TA9OFSET num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// return date century
DataItem TA9RTNCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// return date day
DataItem TA9RTNDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// return date
DataItem TA9RTNDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// return flag (0=good, 1=bad)
DataItem TA9RTNFL num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// return date month
DataItem TA9RTNMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// return date year
DataItem TA9RTNYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ERRDIAG-APPL-ERR-DESC1
DataItem TAEDESC1 char(68)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ERRDIAG-APPL-ERR-DESC2
DataItem TAEDESC2 char(68)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-carr-abrv
DataItem TF1ABRV char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-air-carr-fl
DataItem TF1ACARF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-carr-cd
DataItem TF1CARCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-carr-nm
DataItem TF1CARNM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-carr-typ-cd
DataItem TF1CARTC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-clm-chg-req-fl
DataItem TF1CRQFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-export-carr-fl
DataItem TF1ECARF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-frgt-carr-fl
DataItem TF1FCARF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem TF1GRP char(118)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key group
DataItem TF1KEYS char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-misc-carr-fl
DataItem TF1MCARF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-prt-bar-fl
DataItem TF1PBRFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-carr-sabrv
DataItem TF1SABRV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-dest-cd
DataItem TF2DSTCD char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TF_NXT_ADDR_ID
DataItem TFXNXAID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_LOC_CD
DataItem TSCLOCCD char(4)  {
  upperCase = yes, align = left, fillCharacter = nullFill, 
  inputRequired = no
}
end

// sql return code
DataItem VAGen_SQLCODE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem WSY2000-FILLER char(899)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Look-up keys
DataItem WSY2000-KEY-INFO char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Option Code
DataItem WSY2000-OPTION-CODE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Output data
DataItem WSY2000-OUTPUT-DATA char(93)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group item for Entire Rec.
DataItem WSY2000-RECORD char(1024)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Return Code
DataItem WSY2000-RETURN-CODE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Sub-option
DataItem WSY2000-SUB-OPTION-CODE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XAU_ACCT_CLS_CD
DataItem XAUCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xbc_brand_abrv
DataItem XBCABRV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XBC_BRAND_CD
DataItem XBCCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xbc_brand_desc
DataItem XBCDESC char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xc1490 term kanji-dbcs flag
DataItem XCKJ-DBCS-TERM-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XCT-CTRY-CD
DataItem XCTCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// div: ' ', 'apparel' 'footwear'
DataItem XCTH-THEATER-DIVISION char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// loc: 'us', 'europe' or 'asia'
DataItem XCTH-THEATER-LOCATION char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xcthrec parms length
DataItem XCTH-THEATER-PARMS-LEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reserved for future use
DataItem XCTH-THEATER-RESERVED char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// runtype: 'test' or 'prod'
DataItem XCTH-THEATER-RUNTYPE char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// theater of ops data (grp item)
DataItem XCTHREC-GROUP char(54)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// XDI_DIST_AREA_CD
DataItem XDICD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDM_DIM_CD
DataItem XDM-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDM_DIM_CD
DataItem XDMCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDR_PROD_REG_CD
DataItem XDR-PROD-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDS_DIR_SHIP_CD
DataItem XDSCD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XDVCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDV_DIV_CD1
DataItem XDVCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDV_DIV_CD2
DataItem XDVCD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDV_DIV_CD3
DataItem XDVCD3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDV_DIV_CD4
DataItem XDVCD4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDV_DIV_CD5
DataItem XDVCD5 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xeg-engr-diff-cd
DataItem XEGCD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XGACD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem XGP-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XGPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD1
DataItem XGPCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD2
DataItem XGPCD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD3
DataItem XGPCD3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD4
DataItem XGPCD4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD5
DataItem XGPCD5 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD6
DataItem XGPCD6 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD7
DataItem XGPCD7 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD8
DataItem XGPCD8 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XHD_HNDL_CD
DataItem XHDCD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XHR_HLD_RSN_ABRV
DataItem XHRABRV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XHR_HLD_RSN_CD
DataItem XHRCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XHR_HLD_RSN_DESC
DataItem XHRDESC char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XLC_LIFE_CYC_CD
DataItem XLC-LIFE-CYC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XLC_LIFE_CYC_CD
DataItem XLCCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XLC_LIFE_CYC_CD1
DataItem XLCCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XLC_LIFE_CYC_CD2
DataItem XLCCD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XLC_LIFE_CYC_CD3
DataItem XLCCD3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XLC_LIFE_CYC_CD4
DataItem XLCCD4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XLC_LIFE_CYC_CD5
DataItem XLCCD5 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xle_lgl_entity_cd
DataItem XLECD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XMC_MAT_CTNT_CD
DataItem XMCCD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XNDCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XNX_DEPT_XREF_ABRV
DataItem XNXABRV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XNX_DEPT_ID_XREF
DataItem XNXCD smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// XNX_DEPT_XREF_DESC
DataItem XNXDESC char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xob_base_ot_cd
DataItem XOBCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XOC_ORD_CLS_CD
DataItem XOCCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-alw-bill-ovrd
DataItem XOTABILL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-ord-typ-abrv
DataItem XOTABRV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-alw-bulk-ord
DataItem XOTABULK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-alw-cogs-fl
DataItem XOTACOGS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-alw-dir-ship
DataItem XOTADIRS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-xdv-rstr-ind
DataItem XOTALWDV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-alw-non-stduom
DataItem XOTANSUM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-auto-print-fl
DataItem XOTAPRNT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-at-once-fl (y/n)
DataItem XOTATONF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-ovrd-auth-fl
DataItem XOTAUTHF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-av-demand-fl
DataItem XOTAVDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-ord-typ-bo-fl
DataItem XOTBOFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-ord-typ-cd
DataItem XOTCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-cr-life-dy
DataItem XOTCRLIF smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xot-ord-typ-desc
DataItem XOTDESC char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-dmd-rpt-fl
DataItem XOTDMRPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-display-aval
DataItem XOTDSAVL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-futr-fl (y/n)
DataItem XOTFUTRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-lead-tm
DataItem XOTLDAYS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xot-mrch-sum-cd
DataItem XOTMRSCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-on-line-aloc
DataItem XOTOALOC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-eff-prc-dt-fl
DataItem XOTPRCDT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-prc-var-pct
DataItem XOTPRCVP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xot-prge-dy-aft-dt
DataItem XOTPRGDD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xot-prop-fl (y/n)
DataItem XOTPROPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-ord-typ-sabrv
DataItem XOTSABRV char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-sml-chg-fl
DataItem XOTSMLCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-smpl-fl (y/n)
DataItem XOTSMPLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-sz-typ-fl
DataItem XOTSZIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-sz-verf-fl
DataItem XOTSZVER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-cncl-dy-aft-dt
DataItem XOTXLDD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xot_extra_sz_fl
DataItem XOTXTRAS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XOW_OWN_GRP_CD
DataItem XOWCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_CO_ID
DataItem XP0FW01-EXTERNAL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// CU_CO_ID
DataItem XP0FW01-INTERNAL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// XPA_CUST_PACK_CD
DataItem XPACD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XPC_PROD_CAT_CD
DataItem XPC-PROD-CAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XPCCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XPG_PKG_TYP_CD
DataItem XPGCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XPK_PICK_CD
DataItem XPKCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product line
DataItem XPL-PROD-LN-CD char(2)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// XPP_PICK_PRTY_CD
DataItem XPPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product type code
DataItem XPR-PROD-TYP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XPRCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XPY_PRC_TYP_CD
DataItem XPYCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XQACD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// allowed quality code1
DataItem XQACD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// allowed quality code2
DataItem XQACD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// allowed quality code3
DataItem XQACD3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSE_SESN_CD
DataItem XSE-SESN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSG_SPCL_CUST_CD
DataItem XSGCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN_SESN_YR_RNG
DataItem XSN-SESN-YR-RNG smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// XSO_SLS_OFC_ID
DataItem XSOCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSP_SPACT_CD
DataItem XSPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XSPKW-WSY2000-COLR-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XSPKW-WSY2000-DASH-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XSPKW-WSY2000-DASH-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XSPKW-WSY2000-DASH-3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XSPKW-WSY2000-DASH-4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XSPKW-WSY2000-DASH-5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XSPKW-WSY2000-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XSPKW-WSY2000-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XSPKW-WSY2000-POST-1 char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XSPKW-WSY2000-PROD-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XSPKW-WSY2000-RETURN-CD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem XSPKW-WSY2000-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XST_ST_CD
DataItem XSTCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xst-st-cd
DataItem XSTSTCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XSUCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XUM_UOM_CD
DataItem XUMCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH_EDI_NOTC_FL
DataItem XWH-EDI-NOTC-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xwh-whse-cd
DataItem XWH-WHSE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH_WHSE_ABRV
DataItem XWHABRV char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH_WHSE_CD
DataItem XWHCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH_CURR_DAY_QTY
DataItem XWHCDQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XWH_CURR_DAY_WHLSL
DataItem XWHCDWHL decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XWH_CURR_MO_QTY
DataItem XWHCMQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XWH_CURR_MO_WHLSL
DataItem XWHCMWHL decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XWH_CASE_WHSE_FL
DataItem XWHCSEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH_WHSE_NM
DataItem XWHNM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH_OWN_GRP_FL
DataItem XWHOWNGF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH_PRDCTN_ADJ_DY
DataItem XWHPAD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XWH_PRV_DAY_QTY
DataItem XWHPDQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XWH_PRV_DAY_WHLSL
DataItem XWHPDWHL decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XWH_PRV_MO_QTY
DataItem XWHPMQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XWH_PRV_MO_WHLSL
DataItem XWHPMWHL decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XWH_WHSE_SHT_ABRV
DataItem XWHSABRV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH_STK_LOC_FL
DataItem XWHSTKLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWO_WHSE_OWN_CD
DataItem XWOCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWT_WHSE_TYP_CD
DataItem XWTCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xxx-addr1
DataItem XXX-ADDR1 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xxx-addr2
DataItem XXX-ADDR2 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xxx-addr3
DataItem XXX-ADDR3 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xxx-addr4
DataItem XXX-ADDR4 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xxx-addr5
DataItem XXX-ADDR5 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xxx-addr6
DataItem XXX-ADDR6 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xxx_err_tbl_pfx_id
DataItem XXX-ERR-TBL-PFX-ID char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// XXX_CITY
DataItem XXXCITY char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XXX_PGM_COMMIT_CNT
DataItem XXXCMTCT int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Current date
DataItem XXXCURDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "MM-dd-yy", inputRequired = no
}
end

// unique error id
DataItem XXXERRID char(8)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

// program number
DataItem XXXPGMNO char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PROCESS NAME
DataItem XXXPRCNM char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// REVISION NUMBER
DataItem XXXRVNBR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xxxstat
DataItem XXXSTAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xxx-user-id
DataItem XXXUSRID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XXX_ZIP
DataItem XXXZIP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YCU_CRTN_USE_CD
DataItem YCU-CRTN-USE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Y, n are valid values
DataItem YESNO char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zfc-crcy-cd
DataItem ZFC-CRCY-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zfl-lang-cd
DataItem ZFL-LANG-CD mbchar(2)  {
  align = left, fillCharacter = nullFill, needsSOSI = yes, 
  inputRequired = no
}
end

DataItem ZZ-CHNG-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ZZ_CHNG_HHMM
DataItem ZZ-CHNG-HHMM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ZZ_SDT
DataItem ZZ-SDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem ZZZCHGCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem ZZZCHGDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem ZZZCHGTM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem ZZZSDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ZZ_SETUP_HHMM
DataItem ZZZSTM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//*** RECORD=COMMAREA ****
// the "commarea" is is the communication area that will be
// used between csp applications.  this area will be used to
// transport system required information and application
// specific information between applications.  all online
// main transactions will be required to use the commarea as
// working storage.
// 
// *-*-*-*-*-*-*-*-*-*   Maintenance Log   *-*-*-*-*-*-*-*-*-*
// tsup 02/03/94 bkoois  increased commarea size to 8192 bytes
// tsup 02/10/94 vcowan  added fields: ZFL-LANG-CD & all the
//                       XCTHREC items
// tsup 04/14/94 vcowan  added xxx-errmsg-tbl-pfx for used with
//                       XSTAS-VCSP4001 csp statement group for
//                       use on MVSEURD
// tsup 03/27/97 vcowan  added field: xcth-theater-division to
//                       xcthrec definition ... reason: for
//                       MVSDAPB (Apparel) & MVSDFTC (Footwear)
// tsup 03/27/97 vcowan  added field:
//                       ta3db2ss:  contains value of db2 sub-
//                         system associated with cics region
//                         ref table in pgm: TA0230
//                       xckj-dbcs-term-fl: xc1490 flag value
//                         for dbcs/mix kanji enable terminal
//                         Y for yes; N for no
// ************************
Record COMMAREA type basicRecord
  5 COMMAREA-GROUP COMMAREA-GROUP ; 
    10 CA-SYS-WORKAREA CA-SYS-WORKAREA ; 
      15 CA-SYS-WORKAREA-1 CA-SYS-WORKAREA-1 ; 
        20 CASYSINT CASYSINT ; 
        20 CAUSERID CAUSERID ; 
        20 CAFROMAP CAFROMAP ; 
          25 CAFRMSYS CAFRMSYS ; 
          25 CAFRMAPP CAFRMAPP ; 
        20 CACURRAP CACURRAP ; 
          25 CACURSYS CACURSYS ; 
          25 CACURAPP CACURAPP ; 
            30 CACURAP3 CACURAP3 ; 
            30 CACURAP4 CACURAP4 ; 
        20 CATOAP CATOAP ; 
          25 CATOSYS CATOSYS ; 
          25 CATOAPP CATOAPP ; 
        20 CAITEM CAITEM ; 
          25 CAITMLTR CAITMLTR [20] ; 
        20 CAMSG CAMSG ; 
          25 XXXPRCNM XXXPRCNM ; 
          25 CAMSGNO CAMSGNO ; 
          25 * char(1) ; 
          25 CAMSGA CAMSGA ; 
          25 CAMTOAP CAMTOAP ; 
          25 CAMSGB CAMSGB ; 
        20 CASECRC CASECRC ; 
        20 CAADD CAADD ; 
          25 CAADDFL CAADDFL ; 
          25 CAALVL CAALVL [10] ; 
        20 CACHG CACHG ; 
          25 CACHGFL CACHGFL ; 
          25 CACLVL CACLVL [10] ; 
        20 CADEL CADEL ; 
          25 CADELFL CADELFL ; 
          25 CADLVL CADLVL [10] ; 
        20 CAINQ CAINQ ; 
          25 CAINQFL CAINQFL ; 
          25 CAILVL CAILVL [10] ; 
        20 XWHCD XWHCD ; 
        20 XDVCD XDVCD ; 
        20 XSOCD XSOCD ; 
        20 XNDCD XNDCD ; 
        20 XGPCD XGPCD ; 
        20 CAEZSAP CAEZSAP ; 
          25 CAEZSG12 CAEZSG12 ; 
          25 CAEZSG3 CAEZSG3 ; 
          25 CAEZSG4 CAEZSG4 ; 
          25 * char(4) ; 
        20 ZFL-LANG-CD ZFL-LANG-CD ; 
        20 * char(2) ; 
        20 XCTHREC-GROUP XCTHREC-GROUP ; 
          25 XCTH-THEATER-RUNTYPE XCTH-THEATER-RUNTYPE ; 
          25 XCTH-THEATER-LOCATION XCTH-THEATER-LOCATION ; 
          25 XCTH-THEATER-RESERVED XCTH-THEATER-RESERVED ; 
            30 XCTH-THEATER-DIVISION XCTH-THEATER-DIVISION ; 
            30 * char(30) ; // reserved for future use
          25 XCTH-THEATER-PARMS-LEN XCTH-THEATER-PARMS-LEN ; 
        20 XXX-ERR-TBL-PFX-ID XXX-ERR-TBL-PFX-ID ; 
        20 TA3DB2SS TA3DB2SS ; 
        20 XCKJ-DBCS-TERM-FL XCKJ-DBCS-TERM-FL ; 
        20 * char(260) ; 
      15 CA-SYS-WORKAREA-2 CA-SYS-WORKAREA-2 ; 
      15 CA-SYS-WORKAREA-3 CA-SYS-WORKAREA-3 ; 
      15 CA-SYS-WORKAREA-4 CA-SYS-WORKAREA-4 ; 
    10 * char(6144) ; 
      15 CA-USER-WORKAREA CA-USER-WORKAREA ; 
        20 CA-USER-WORKAREA-4K CA-USER-WORKAREA-4K ; 
          25 CA-USER-WORKAREA-2K-A CA-USER-WORKAREA-2K-A ; 
            30 CAUSERA CAUSERA ; 
            30 * char(348) ; 
          25 CA-USER-WORKAREA-2K-B CA-USER-WORKAREA-2K-B ; 
        20 CA-USER-WORKAREA-2K-C CA-USER-WORKAREA-2K-C ; 
end // end COMMAREA

Record PK06W01 type basicRecord
  10 PK06WFL1 PK06WFL1 ; 
  10 PK06WFL4 PK06WFL4 ; 
  10 PK06WVSF PK06WVSF ; 
  10 PK06WCPG PK06WCPG ; 
  10 PK06WPGS PK06WPGS ; 
    15 PK06WPGI PK06WPGI ; 
    15 PK06WPGD PK06WPGD ; 
  10 PK06WFTF PK06WFTF ; 
  10 PK06WGET PK06WGET ; 
  10 PK06WTRN PK06WTRN ; 
  10 PK06WSEL PK06WSEL ; 
  10 PK06WLSC PK06WLSC ; 
  10 PK06WKHF PK06WKHF ; 
  10 PK06WCHF PK06WCHF ; 
  10 PK06WFLE PK06WFLE ; 
  10 PK06WTRR PK06WTRR ; 
  10 PK06WNDX PK06WNDX ; 
  10 PK06WDT PK06WDT ; 
    15 PK06WMM PK06WMM ; 
    15 PK06WDD PK06WDD ; 
    15 PK06WYY PK06WYY ; 
  10 PK06WWDT PK06WWDT ; 
    15 PK06WWCC PK06WWCC ; 
    15 PK06WWYY PK06WWYY ; 
    15 PK06WWMM PK06WWMM ; 
    15 PK06WWDD PK06WWDD ; 
  10 PK06WWD1 PK06WWD1 ; 
  10 PK06WWD2 PK06WWD2 ; 
  10 PK06WFDT PK06WFDT ; 
    15 PK06WFCT PK06WFCT ; 
    15 PK06WFDA PK06WFDA ; 
      20 PK06WFYY PK06WFYY ; 
      20 PK06WFMM PK06WFMM ; 
      20 PK06WFDD PK06WFDD ; 
  10 PK06WTIM PK06WTIM ; 
    15 PK06WHH PK06WHH ; 
    15 * char(1) ; 
    15 PK06WMI PK06WMI ; 
    15 * char(1) ; 
    15 PK06WSS PK06WSS ; 
  10 PK06WTI PK06WTI ; 
    15 PK06WTHH PK06WTHH ; 
    15 PK06WTMM PK06WTMM ; 
  10 PK06WMAP PK06WMAP ; 
  10 PK06WERS PK06WERS ; 
  10 PK06WUPD PK06WUPD ; 
  10 PK06WWIX PK06WWIX ; 
  10 PK06WSUX PK06WSUX ; 
  10 PK06W-XBCABRV PK06W-XBCABRV ; 
  10 XHRCD XHRCD [200] ; 
  10 XHRABRV XHRABRV [200] ; 
  10 XHRDESC XHRDESC [200] ; 
  10 PK06WPRT PK06WPRT ; 
    15 PK06WPTN PK06WPTN ; 
  10 PK06WDTS PK06WDTS [2] ; 
    15 OP1CUNDT OP1CUNDT ; 
    15 OP1DSBDT OP1DSBDT ; 
    15 PK4PLNDT PK4PLNDT ; 
end // end PK06W01

//*** RECORD=PK06W02 ****
// ************************************************************
// 
//         ***** POP UP WINDOW WORKING RECORD *****
// 
// ************************************************************
// 
//            This record is the working record used by
//            a CSP pop up window processes - pk06m200
//            and pk06m210 for internal picking hold code
//            table.
// 
// ************************************************************
// ***********************
Record PK06W02 type basicRecord
  10 PK06WCT1 PK06WCT1 ; 
  10 PK06WCT2 PK06WCT2 ; 
  10 PK06WSIX PK06WSIX ; 
  10 PK06WPIX PK06WPIX ; 
  10 PK06WINX PK06WINX [10] ; 
  10 PK06WENX PK06WENX ; 
  10 PK06WFFL PK06WFFL ; 
  10 PK06WERR PK06WERR ; 
end // end PK06W02

//*** RECORD=PK06W03 ****
// * ----------------------------------------------------------
// *       working storage record for application pk06
// *
// *       pk06w03 - image of screen pk06m100
// *
// *  this record is used in conjunction with pkwrec.pkwuserb
// *  for xfer to via pf keys - so that upon return the screen
// *  that was originaly up will return intact.
// *
// * ----------------------------------------------------------
// ***********************
Record PK06W03 type basicRecord
  5 PK06WSCR PK06WSCR ; 
    10 XXXERRID XXXERRID ; 
    10 XXXRVNBR XXXRVNBR ; 
    10 PK06MTIM PK06MTIM ; 
    10 XXXCURDT XXXCURDT ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 XOTCD XOTCD ; 
    10 XOTDESC XOTDESC ; 
    10 PK1CUOID PK1CUOID ; 
    10 PK06MNFM PK06MNFM ; 
    10 PK06MNFD PK06MNFD ; 
    10 PK06MNFY PK06MNFY ; 
    10 PK06MNTM PK06MNTM ; 
    10 PK06MNTD PK06MNTD ; 
    10 PK06MNTY PK06MNTY ; 
    10 TF1CARCD TF1CARCD ; 
    10 TF1ABRV TF1ABRV ; 
    10 PK06MDFM PK06MDFM ; 
    10 PK06MDFD PK06MDFD ; 
    10 PK06MDFY PK06MDFY ; 
    10 PK06MDTM PK06MDTM ; 
    10 PK06MDTD PK06MDTD ; 
    10 PK06MDTY PK06MDTY ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 SP1ID SP1ID ; 
    10 SP1ABRV SP1ABRV ; 
    10 XHRCD XHRCD ; 
    10 XHRDESC XHRDESC ; 
    10 PK06MRFM PK06MRFM ; 
    10 PK06MRFD PK06MRFD ; 
    10 PK06MRFY PK06MRFY ; 
    10 PK06MRTM PK06MRTM ; 
    10 PK06MRTD PK06MRTD ; 
    10 PK06MRTY PK06MRTY ; 
    10 PK06MARL PK06MARL ; 
    10 PK06MXHD PK06MXHD ; 
    10 PK06MAHD PK06MAHD ; 
    10 PK06MXPL PK06MXPL ; 
    10 PK06MDHC PK06MDHC ; 
    10 PK06MDHR PK06MDHR ; 
    10 PK06MXNP PK06MXNP ; 
    10 PK06MRMM PK06MRMM ; 
    10 PK06MRDD PK06MRDD ; 
    10 PK06MRYY PK06MRYY ; 
end // end PK06W03

//*** RECORD=PK06W04 ****
//   maintenance log:
// 
//   date        init     comments
//   ---------   ------   -----------------------------------
//   02-15-90    kande1   added pk06wtun total units in array
// ***********************
Record PK06W04 type basicRecord
  10 PK06WMAX PK06WMAX ; 
  10 PK06WCNT PK06WCNT ; 
  10 PK06WTUN PK06WTUN ; 
  10 PK06WIX4 PK06WIX4 ; 
  10 PK06WIX5 PK06WIX5 ; 
  10 PK06WSVX PK06WSVX ; 
  10 PK06WDAT PK06WDAT [668] ; 
    15 PK06WSEL PK06WSEL ; 
    15 PK4ORHLD PK4ORHLD ; 
    15 XHRCD XHRCD ; 
    15 PKBRELDT PKBRELDT ; 
    15 PK06WPLF PK06WPLF ; 
    15 PK1CUOID PK1CUOID ; 
    15 PK1NORID PK1NORID ; 
    15 XOTCD XOTCD ; 
    15 XBCCD XBCCD ; 
    15 KUCCOID KUCCOID ; 
    15 KUMSTRID KUMSTRID ; 
    15 XNXCD XNXCD ; 
    15 PK06WSNM PK06WSNM ; 
    15 TF1CARCD TF1CARCD ; 
    15 OP1DSBDT OP1DSBDT ; 
    15 PK4OTUNT PK4OTUNT ; 
end // end PK06W04

//*** RECORD=PK1REC ****
// **************** picking transaction table*****************
// 
// db2 table:           dpick.vpktrn01
// 
// copylib member:      dcl00018
// 
// i/o mod:             io0910
// 
// key to db2 table:    pk1partn
//                      pk1cuoid
//                      pk1norid
//                      pk1lninb
//                      pk1allnb
// 
// date crated:         10/18/86
// 
// maintenance log:
//   date    init.      comment
// --------  -----      ---------------------------------------
// 10/18/86   ral       initial record creation
// 11/04/86   ral       added xwhcd to record
// 01/15/91  CHYDE      Correct data item descriptions.
// **********************
Record PK1REC type basicRecord
  5 PK1GROUP PK1GROUP ; 
    10 PK1KEY PK1KEY ; 
      15 PK1SBKEY PK1SBKEY ; 
        20 PK1PRTN PK1PRTN ; 
        20 PK1CUOID PK1CUOID ; 
        20 PK1NORID PK1NORID ; 
      15 PK1LNINB PK1LNINB ; 
      15 PK1ALLNB PK1ALLNB ; 
    10 PK1TRTYP PK1TRTYP ; 
    10 PK1HLDCD PK1HLDCD ; 
    10 PK1DALDT PK1DALDT ; 
    10 XWHCD XWHCD ; 
    10 PK1QTY PK1QTY [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PK1REC

//*** RECORD=PK2REC ****
// ********* picking deallocation transaction table **********
// 
// db2 table:           dpick.vdaloc01
// 
// copylib member:      dcl00167
// 
// i/o mod:             io1020
// 
// key to db2 table:    pk1partn
//                      pk1cuoid
//                      pk1norid
//                      pk1lninb
//                      pk2schfl
//                      pk2schno
// 
// date crated:         11/05/86
// 
// maintenance log:
//   date    init.      comment
// --------  -----      ---------------------------------------
// 11/05/86   ral       initial record creation
// 01/15/91  CHYDE      Correct desc for pk2schfl & pk2schno.
// **********************
Record PK2REC type basicRecord
  5 PK2GROUP PK2GROUP ; 
    10 PK2KEY PK2KEY ; 
      15 PK2SBKEY PK2SBKEY ; 
        20 PK1PRTN PK1PRTN ; 
        20 PK1CUOID PK1CUOID ; 
        20 PK1NORID PK1NORID ; 
      15 PK1LNINB PK1LNINB ; 
    10 XWHCD XWHCD ; 
    10 PK2SCHFL PK2SCHFL ; 
    10 PK2SCHNO PK2SCHNO ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PK2REC

//*** RECORD=PK4REC ****
// ************* PICKING ORDER POOL HEADER TABLE **************
// 
// DB2 TABLE VIEW:      DPICK.VPOOLH01
// 
// COPYLIB MEMBER:      DCL00279
// 
// I/O MODULE:          IO1720
// 
// KEY TO DB2 TABLE:    XWHCD
//                      PK1PRTN
//                      PK1CUOID
//                      PK1NORID
// 
// DATE CREATED:        05/22/87
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 05/22/87   SHP       New record definition.
// 04/02/90  mchow      Added XBCCD to record; deleted IN7SPINS
//                      IN7STINS from record.
// 05/07/90  jcampb     added xsocd, xobcd, sm1acyid, xdscd,
//                      and op1ftind to record(struct change)
// 10/02/90  JWOOD      added PK4CUHLD, PK4PVSEL
// 02/05/91  MWALTO     added KUFMIXBL, KUCMXYNT, KUCUNTCS,
//                      XHDLPIND, XPACD AND RENAMED PK4PVSEL TO
//                      PK4SLIND for table changes.
// 03/04/91  SBEAUC     added PK4ORDFC, PK4ORDRP, PK4ORFT3,
//                      PK4ORDTM and deleted KUCMXYNT for table
//                      changes.
// 06/18/92  shende     Add kufmixbl, kucuntcs, pk-hndl-lvl-fl,
//                      pk-ivc-req-fl, kumslfid, kujslfid,
//                      pk-ord-dclr-val for table changes
// 02/21/94  MPLUTH     Changed XXXADDR1 - 3 to XXX-ADDR1 - 3.
//                      Added XXX_ADDR4 - 6.
// **********************
Record PK4REC type basicRecord
  5 PK4GROUP PK4GROUP ; 
    10 PK4KEY PK4KEY ; 
      15 XWHCD XWHCD ; 
      15 PK1PRTN PK1PRTN ; 
      15 PK1CUOID PK1CUOID ; 
      15 PK1NORID PK1NORID ; 
    10 PK4STKTF PK4STKTF ; 
    10 PK1ALLNB PK1ALLNB ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 XGPCD XGPCD ; 
    10 XDVCD XDVCD ; 
    10 XBCCD XBCCD ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1TBREP OP1TBREP ; 
    10 OP11TMSF OP11TMSF ; 
    10 OP1SPHDF OP1SPHDF ; 
    10 OP1SPLBF OP1SPLBF ; 
    10 OP1SPINF OP1SPINF ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 OP1DSADT OP1DSADT ; 
    10 OP1DSBDT OP1DSBDT ; 
    10 XPACD XPACD ; 
    10 PK-HNDL-LVL-FL PK-HNDL-LVL-FL ; 
    10 XPKCD XPKCD ; 
    10 XPPCD XPPCD ; 
    10 XSOCD XSOCD ; 
    10 XOTCD XOTCD ; 
    10 XOBCD XOBCD ; 
    10 XOCCD XOCCD ; 
    10 SP1ID SP1ID ; 
    10 SM1AGYID SM1AGYID ; 
    10 XDSCD XDSCD ; 
    10 OP1FTIND OP1FTIND ; 
    10 OP1SGPAO OP1SGPAO ; 
    10 KUMSHAID KUMSHAID ; 
    10 IN7STFOW IN7STFOW ; 
    10 IN7STQDT IN7STQDT ; 
    10 IN7STLDT IN7STLDT ; 
    10 IN7STTWH IN7STTWH ; 
    10 TF1CARCD TF1CARCD ; 
    10 TF2DSTCD TF2DSTCD ; 
    10 PK4CARSP PK4CARSP ; 
    10 PK-IVC-REQ-FL PK-IVC-REQ-FL ; 
    10 OP5ALTNM OP5ALTNM ; 
    10 KUMSLFID KUMSLFID ; 
    10 KUJSLFID KUJSLFID ; 
    10 XXX-ADDR1 XXX-ADDR1 ; 
    10 XXX-ADDR2 XXX-ADDR2 ; 
    10 XXX-ADDR3 XXX-ADDR3 ; 
    10 XXX-ADDR4 XXX-ADDR4 ; 
    10 XXX-ADDR5 XXX-ADDR5 ; 
    10 XXX-ADDR6 XXX-ADDR6 ; 
    10 XXXCITY XXXCITY ; 
    10 XSTSTCD XSTSTCD ; 
    10 XXXZIP XXXZIP ; 
    10 XCTCD XCTCD ; 
    10 PK4PLNDT PK4PLNDT ; 
    10 PK4OTWGT PK4OTWGT ; 
    10 PK4OTUNT PK4OTUNT ; 
    10 PK4ORDFC PK4ORDFC ; 
    10 PK4ORDRP PK4ORDRP ; 
    10 PK-ORD-DCLR-VAL PK-ORD-DCLR-VAL ; 
    10 PK4ORFT3 PK4ORFT3 ; 
    10 PK4ORDTM PK4ORDTM ; 
    10 PK4ITEMS PK4ITEMS ; 
    10 OP1EXPDF OP1EXPDF ; 
    10 PK4ORHLD PK4ORHLD ; 
    10 PK4CUHLD PK4CUHLD ; 
    10 PK4SLIND PK4SLIND ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PK4REC

//*** RECORD=PK5REC ****
// ***********************  TEXT TABLE  ***********************
// 
// DB2 TABLE:           DPICK.VPOOLI01
// 
// COPYLIB MEMBER:      DCL00280
// 
// I/O MOD:             IO1990
// 
// KEY TO DB2 TABLE:    XWHCD
//                      PK1PRTN
//                      PK1CUOID
//                      PK1NORID
//                      PK1LNINB
// 
// DATE CREATED:        06/23/87
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 06-23-87  LHOLCO     INITIAL RECORD CREATION
// 10-02-90  JWOOD      DELETED XSDCD, XSACD, ADDED PC2INSEG,
//                        XEGCD
// 02-05-91  mwalto     add YLBCD occurs 2 times, and changed
//                      XHDCD occurs from 3 to 5 times.
// 03-04-91  SBEAUC     add PK5ITMFC, PK5ITMRP, PK5ITFT3,
//                      PK5ITMTM and OP2CPLNB for table chgs.
// 06-07-91  mwalto     table changes
// 06-18-92  shende     Add xbccd, xmccd, op-cust-labl-prtfl,
//                      and pk-tot-item-wt for table changes
// 02-21-94  MPLUTH     Changed length of OP-AVG-UNIT-PRC
//                      FROM (7,2) TO (11,2).
// **********************
Record PK5REC type basicRecord
  5 PK5GROUP PK5GROUP ; 
    10 PK5KEY PK5KEY ; 
      15 XWHCD XWHCD ; 
      15 PK1PRTN PK1PRTN ; 
      15 PK1CUOID PK1CUOID ; 
      15 PK1NORID PK1NORID ; 
      15 PK1LNINB PK1LNINB ; 
    10 OP2CPLNB OP2CPLNB ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 OP2CGPCD OP2CGPCD ; 
    10 XQACD XQACD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XEGCD XEGCD ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 XOWCD XOWCD ; 
    10 XBCCD XBCCD ; 
    10 XMCCD XMCCD ; 
    10 XHDCD XHDCD [5] ; 
    10 OP-CUST-LABL-PRTFL OP-CUST-LABL-PRTFL ; 
    10 PWRLBCD PWRLBCD [2] ; 
    10 PK5LBLDL PK5LBLDL ; 
    10 KUIPRDID KUIPRDID ; 
    10 SY1UNPCS SY1UNPCS ; 
    10 PK-TOT-ITEM-WT PK-TOT-ITEM-WT ; 
    10 PK5TIQTY PK5TIQTY ; 
    10 PK5ITMFC PK5ITMFC ; 
    10 PK5ITMRP PK5ITMRP ; 
    10 PK5ITFT3 PK5ITFT3 ; 
    10 PK5ITMTM PK5ITMTM ; 
    10 OP2AUPRC OP2AUPRC ; 
    10 PK1QTY PK1QTY [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PK5REC

//*** RECORD=PK6REC ****
// *************** PICKING CUSTOMER STORE TABLE ***************
// 
// DB2 TABLE VIEW:      DPICK.VPKCUS01
// 
// COPYLIB MEMBER:      DCL00294
// 
// I/O MODULE:          IO1830
// 
// KEY TO DB2 TABLE:    KUCCOID
//                      KUMSTRID
// 
// DATE CREATED:        05/26/87
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 05/26/87   SHP       New record definition.
// 02/05/91  mwalto     chg KUMMNFFL, KUMSPDFL AND KUMPOMFL
//                      to filler, the filler will be deleted
//                      during a later table change.
// 03/04/91  SBEAUC     Add KUFMIXBL, KUCMXYNT, KUCUNTCS and
//                      delete filler for table changes.
// 10/03/91  mwalto     Add KUCGRPID, CU-CO-SHORT-NM, KUCSTYNT,
//                      & CU-PL-STYNM-PRT-FL for table changes.
// 03/06/92  SHENDE     Add KUJSLFID,KUJSLFNM, CU_DOC_BY_ORD_FL
//                      CU_HANG_DFLT_FL, CU_PRT_XREF_FL,
//                      KUMSLFID, XAUCD for March table changes
// 06/18/92  shende     Add xbccd, ycu-crtn-use-cd, xnxcd, and
//                      pk-ivc-req-fl for table changes
// 07/23/93  OVAZQU     Delete: xnx-dept-id-xref, cu-dept-self-
//                      nm, and add cu-edi-cust-ind for Aug 93
//                      table changes.
// 02/21/94  mpluth     Changed CU-MAX-YNT-CD to
//                      CU-MAX-FTWR-YNT-CD.  Added
//                      CU-MAX-APRL-YNT-CD.
// **********************
Record PK6REC type basicRecord
  5 PK6GROUP PK6GROUP ; 
    10 KUCCOID KUCCOID ; 
    10 XBCCD XBCCD ; 
    10 KUKPCOID KUKPCOID ; 
    10 KUCGRPID KUCGRPID ; 
    10 KUCCONM KUCCONM ; 
    10 CU-CO-SHORT-NM CU-CO-SHORT-NM ; 
    10 KUCCOAID KUCCOAID ; 
    10 KUCSKIND KUCSKIND ; 
    10 KUMSTRID KUMSTRID ; 
    10 KUMSTRNM KUMSTRNM ; 
    10 KUMSTSNM KUMSTSNM ; 
    10 KUMXSTCD KUMXSTCD ; 
    10 KUMCITYS KUMCITYS ; 
    10 KUMSTAID KUMSTAID ; 
    10 KUMSHAID KUMSHAID ; 
    10 KUFMIXBL KUFMIXBL ; 
    10 KUCSTYNT KUCSTYNT ; 
    10 CU-MAX-FTWR-YNT-CD CU-MAX-FTWR-YNT-CD ; 
    10 CU-MAX-APRL-YNT-CD CU-MAX-APRL-YNT-CD ; 
    10 YCU-CRTN-USE-CD YCU-CRTN-USE-CD ; 
    10 KUCUNTCS KUCUNTCS ; 
    10 CU-PL-STYNM-PRT-FL CU-PL-STYNM-PRT-FL ; 
    10 CU-DOC-BY-ORD-FL CU-DOC-BY-ORD-FL ; 
    10 CU-HANG-DFLT-FL CU-HANG-DFLT-FL ; 
    10 CU-PRT-XREF-FL CU-PRT-XREF-FL ; 
    10 XAUCD XAUCD ; 
    10 KUJSLFID KUJSLFID ; 
    10 KUMSLFID KUMSLFID ; 
    10 PK-IVC-REQ-FL PK-IVC-REQ-FL ; 
    10 CU-EDI-CUST-IND CU-EDI-CUST-IND ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PK6REC

//*** RECORD=PK7REC ****
// ************** PICKING CUSTOMER ADDRESS TABLE **************
// 
// DB2 TABLE VIEW:      DPICK.VPKADR01
// 
// COPYLIB MEMBER:      DCL00283
// 
// I/O MODULE:          IO2000
// 
// KEY TO DB2 TABLE:    KUCCOID
//                      KULAAID
// 
// DATE CREATED:        05/26/87
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 05/26/87   SHP       New record definition.
// 06/18/92  shende     Add xbccd, kulcnty for table changes
// 02/21/94  MPLUTH     Changed XXXADDR1 - 3 to XXX-ADDR1 - 3.
//                      Added XXX_ADDR4 - 6.
// **********************
Record PK7REC type basicRecord
  5 PK7GROUP PK7GROUP ; 
    10 PK7KEY PK7KEY ; 
      15 KUCCOID KUCCOID ; 
      15 KULAAID KULAAID ; 
    10 XBCCD XBCCD ; 
    10 KULUSCNT KULUSCNT ; 
    10 XXX-ADDR1 XXX-ADDR1 ; 
    10 XXX-ADDR2 XXX-ADDR2 ; 
    10 XXX-ADDR3 XXX-ADDR3 ; 
    10 XXX-ADDR4 XXX-ADDR4 ; 
    10 XXX-ADDR5 XXX-ADDR5 ; 
    10 XXX-ADDR6 XXX-ADDR6 ; 
    10 XXXCITY XXXCITY ; 
    10 XSTSTCD XSTSTCD ; 
    10 XXXZIP XXXZIP ; 
    10 KULCNTY KULCNTY ; 
    10 XCTCD XCTCD ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PK7REC

//*** RECORD=PK9REC ****
// *************** PICKING CUSTOMER HOLD TABLE ****************
// 
// DB2 TABLE VIEW:      DPICK.VCUHLD01
// 
// COPYLIB MEMBER:      DCL00261
// 
// I/O MODULE:          IO1790
// 
// KEY TO DB2 TABLE:    XWHCD
//                      KUCCOID
//                      KUMSTRID
//                      XNXCD
// 
// DATE CREATED:        05/29/87
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 05/29/87   SHP       New record definition.
// 01/15/91  CHYDE      Correct desc for pk9plrdt.
// 03/05/91  SBEAUC     Change reference of PKARHCD to XHRCD
//                      for table changes.
// 06/18/92  shende     Add xbccd for table changes
// **********************
Record PK9REC type basicRecord
  5 PK9GROUP PK9GROUP ; 
    10 PK9KEY PK9KEY ; 
      15 XWHCD XWHCD ; 
      15 KUCCOID KUCCOID ; 
      15 KUMSTRID KUMSTRID ; 
      15 XNXCD XNXCD ; 
    10 XGPCD XGPCD ; 
    10 XBCCD XBCCD ; 
    10 XHRCD XHRCD ; 
    10 PK9RELDT PK9RELDT ; 
    10 PK9PLRDT PK9PLRDT ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PK9REC

//*** RECORD=PKBREC ****
// *************** PICKING order HOLD TABLE *******************
// 
// DB2 TABLE VIEW:      DPICK.vorhLD01
// 
// COPYLIB MEMBER:      DCL00262
// 
// I/O MODULE:
// 
// KEY TO DB2 TABLE:    XWHCD
//                      pk1cuoid
//                      pk1norid
// 
// DATE CREATED:        06/24/87
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 06/24/87   prm       New record definition.
// 01/14/91  CHYDE      Correct desc of pkbplrdt.
// 03/04/91  SBEAUC     Change reference of PKARHCD to XHRCD
//                      for table changes.
// **********************
Record PKBREC type basicRecord
  5 PKBGROUP PKBGROUP ; 
    10 PKBKEY PKBKEY ; 
      15 XWHCD XWHCD ; 
      15 PK1PRTN PK1PRTN ; 
      15 PK1CUOID PK1CUOID ; 
      15 PK1NORID PK1NORID ; 
    10 XHRCD XHRCD ; 
    10 PKBRELDT PKBRELDT ; 
    10 PKBPLRDT PKBPLRDT ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PKBREC

//*** RECORD=PKCREC ****
// ***************PICK PRODUCT TABLE  *************************
// 
// DB2 TABLE:           dpick.vpcart01
// 
// COPYLIB MEMBER:      dcl00305
// 
// KEY TO DB2 TABLE:    XGPCD
//                      SY1STNBR
//                      sy2crlid
//                      xdmcd
// 
// DATE CREATED:        july 27,1987
// 
// MAINTENANCE LOG:
// 
// DATE     INIT       COMMENTS
// ------   ------     -------------------------------------
// 7-27-87  leh        created csp record
// 3-04-91  SBEAUC     added XUMCD and XPGCD
// ************************************************************
// **********************
Record PKCREC type basicRecord
  5 PKCDATA PKCDATA ; 
    10 PKCKEY PKCKEY ; 
      15 XWHCD XWHCD ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 XXXSTAT XXXSTAT ; 
    10 PKCCRTCL PKCCRTCL [40] ; 
    10 PKCCRTLN PKCCRTLN [40] ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PKCREC

//*** RECORD=PKDREC ****
// ****** dpick.vpkctl01 picking warehouse control table ******
// *
// * db2 table:       dpick.vpkctl01
// *
// * dclgen:          dcl00275
// *
// * i/o mod:         io1890
// *
// * key to table:    xwhcd
// *
// * date created:    06/16/87
// *
// * maintenance log:
// *   who      when     why
// * -------- -------- ----------------------------------------
// *  snoble  06/16/87 initial record creation
// *  ldeluh  10/28/88 added filler of 10.
// *  wjones  01/06/89 added default flds + 2 others
// *  MMOREH  10/30/90 ADDED PKBLDTXT PK-BOL-DFLT-TXT
//            CHANGED FILLER TO PKDFCOFA, PKDFCOFZ, PKDFCOFL
// *  CHYDE   1/14/91  Incl correct db name in data item desc.
// *  SBEAUC  3/04/91  Add PKDNTSQN, PKDNXPLN, PKDNPTNB,
// *                   PKDNPCNB, PKDDRPPM, PKDDHDPM and
// *                   PKDDFCPM for table changes.
// *  MWALTO  6/12/91  Add PK-DLFT-TRLR-TYP
// *                       PK-DLFT-SPLY-AREA
// *                       PK-DLFT-SPLY-ZONE
// *                       PK-DLFT-SPLY-LOC
// *                       PK-DLFT-TOTEPACKMM
// *                       PK-PAIR-CNT-REQ-FL For table chngs
// *  MWALTO  9/23/91  Add PK-NXT-PRE-CRTNNBR, AND PK-RUN-NBR
// *                   for October '91 table changes.
// *  OVAZQU  7/23/93  Add PK-NXT-OUTER-NBR for Aug 93 tbl chng
// **********************
Record PKDREC type basicRecord
  5 PKDGRPLV PKDGRPLV ; 
    10 PKDKEY PKDKEY ; 
      15 XWHCD XWHCD ; 
    10 PKDWHOFA PKDWHOFA ; 
    10 PKDWHOFZ PKDWHOFZ ; 
    10 PKDWHOFL PKDWHOFL ; 
    10 PKDWHTCD PKDWHTCD ; 
    10 PKDWHTYD PKDWHTYD ; 
    10 PKDWHTYA PKDWHTYA ; 
    10 PKDMXCPL PKDMXCPL ; 
    10 PKDNBRSL PKDNBRSL ; 
    10 PKDQTYCS PKDQTYCS ; 
    10 PKDTRLTP PKDTRLTP ; 
    10 PKDDFF3C PKDDFF3C ; 
    10 PKDDFUPC PKDDFUPC ; 
    10 PKDDFWPU PKDDFWPU ; 
    10 PKDDFCRC PKDDFCRC ; 
    10 PKDDFSYA PKDDFSYA ; 
    10 PKDDFSYZ PKDDFSYZ ; 
    10 PKDDFSYL PKDDFSYL ; 
    10 PKDDFZTY PKDDFZTY ; 
    10 PKDNXSCN PKDNXSCN ; 
    10 PKDNSSCH PKDNSSCH ; 
    10 PKDNCSQN PKDNCSQN ; 
    10 PK-NXT-PRE-CRTNNBR PK-NXT-PRE-CRTNNBR ; 
    10 PKDNTSQN PKDNTSQN ; 
    10 PKDNXPLN PKDNXPLN ; 
    10 PKDNPCNB PKDNPCNB ; 
    10 PKDNPTNB PKDNPTNB ; 
    10 PK-NXT-OUTER-NBR PK-NXT-OUTER-NBR ; 
    10 PKDMXWLM PKDMXWLM ; 
    10 PKDLBLDT PKDLBLDT [3] ; 
    10 PKDMULOC PKDMULOC ; 
    10 PKDNMSRT PKDNMSRT ; 
    10 PKDBSLNB PKDBSLNB ; 
    10 PKDNFCNF PKDNFCNF ; 
    10 PKDPCCNF PKDPCCNF ; 
    10 PKDQNFRT PKDQNFRT ; 
    10 TFXNXAID TFXNXAID ; 
    10 PKDUPSFL PKDUPSFL ; 
    10 PKDUPSSG PKDUPSSG ; 
    10 PKDPHLDY PKDPHLDY ; 
    10 PKDDBPAR PKDDBPAR ; 
    10 PKDDBPZN PKDDBPZN ; 
    10 PKDDBPLC PKDDBPLC ; 
    10 PKDDLDAR PKDDLDAR ; 
    10 PKDDLDZN PKDDLDZN ; 
    10 PKDDLDLC PKDDLDLC ; 
    10 PKDSPLAR PKDSPLAR ; 
    10 PKDSPLZN PKDSPLZN ; 
    10 PKDSPLLC PKDSPLLC ; 
    10 PKDFCOFA PKDFCOFA ; 
    10 PKDFCOFZ PKDFCOFZ ; 
    10 PKDFCOFL PKDFCOFL ; 
    10 PKDBDTXT PKDBDTXT ; 
    10 PKDDFCPM PKDDFCPM ; 
    10 PKDDRPPM PKDDRPPM ; 
    10 PKDDHDPM PKDDHDPM ; 
    10 PKDDFTPM PKDDFTPM ; 
    10 PKDPRCTF PKDPRCTF ; 
    10 PK-RUN-NBR PK-RUN-NBR ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PKDREC

//*** RECORD=PKHREC ****
// *************** PICKING SELECTED ORDER TABLE ***************
// 
// DB2 TABLE VIEW:      DPICK.VSELOR01
// 
// COPYLIB MEMBER:      DCL00266
// 
// I/O MODULE:          io1740
// 
// KEY TO DB2 TABLE:    XWHCD
//                      op1cuoid
//                      op1norid
//                      pkurunmd
// 
// DATE CREATED:        07/10/87
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 07/10/87   tl        New record definition.
// 10/02/90   JWOOD     ADDED OP1DSBDT, PK4PVSEL, PKHPVSFC,
//                      PKHPVSRP, PKHPVSMM, PKHTYPIN, tf1carcd
// 03/04/91   SBEAUC    Deleted PK4PVSEL for table changes.
// 09/23/91   MWALTO    Added xdvcd (xdv-div-cd) & renamed
//                      pkhtypin to pk-sel-typ-cd, plus
//                      increased the size of pk-sel-typ-cd
//                      to char 02 for Oct. table changes
// 03/05/92   SHENDE    Added xbccd (xbc-brand-cd) for March
//                      table changes.
// **********************
Record PKHREC type basicRecord
  5 PKHGROUP PKHGROUP ; 
    10 PKHKEY PKHKEY ; 
      15 XWHCD XWHCD ; 
      15 XDVCD XDVCD ; 
      15 XBCCD XBCCD ; 
      15 PK1PRTN PK1PRTN ; 
      15 PK1CUOID PK1CUOID ; 
      15 PK1NORID PK1NORID ; 
    10 OP1DSBDT OP1DSBDT ; 
    10 TF1CARCD TF1CARCD ; 
    10 XPPCD XPPCD ; 
    10 PKHSCHED PKHSCHED ; 
    10 PKURUNMD PKURUNMD ; 
    10 PKHPVSFC PKHPVSFC ; 
    10 PKHPVSRP PKHPVSRP ; 
    10 PK-SEL-TYP-CD PK-SEL-TYP-CD ; 
    10 PKHPVSMM PKHPVSMM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PKHREC

//*** RECORD=PKNREC ****
// *************** PICKING PRODUCT STYLE TABLE ****************
// 
// DB2 TABLE VIEW:      DPICK.VPKSTY01
// 
// COPYLIB MEMBER:      DCL00292
// 
// I/O MODULE:          IO1810
// 
// KEY TO DB2 TABLE:    XGPCD
//                      SY1STNBR
//                      SY2CLRID
//                      XDMCD
// 
// DATE CREATED:        06/14/87
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 06/14/87   SHP       New record definition.
// 04/02/90  mchow      Added XBCCD to record.
// 03/04/91  SBEAUC     Add XSUCD and delete SY2PRDES for table
//                      changes.
// 03/06/92  SHENDE     Add XGACD for March table changes.
// 06/18/92  shende     Add sy-sty-nm, xmccd for table changes
// **********************
Record PKNREC type basicRecord
  5 PKNGROUP PKNGROUP ; 
    10 PKNKEY PKNKEY ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
    10 XBCCD XBCCD ; 
    10 XSUCD XSUCD ; 
    10 XGACD XGACD ; 
    10 SY1UNPCS SY1UNPCS ; 
    10 SY1AVEWT SY1AVEWT ; 
    10 SY4SZSCL SY4SZSCL ; 
    10 XPRCD XPRCD ; 
    10 XLCCD1 XLCCD1 ; 
    10 XLCCD2 XLCCD2 ; 
    10 XLCCD3 XLCCD3 ; 
    10 XLCCD4 XLCCD4 ; 
    10 SY2CEDT1 SY2CEDT1 ; 
    10 SY2CEDT2 SY2CEDT2 ; 
    10 SY2CEDT3 SY2CEDT3 ; 
    10 SY2CEDT4 SY2CEDT4 ; 
    10 SY1STYNM SY1STYNM ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 SY2CLRAB SY2CLRAB ; 
    10 XMCCD XMCCD ; 
    10 XDVCD XDVCD [40] ; 
    10 SY3FRGUT SY3FRGUT [40] ; 
    10 SYGSZWT SYGSZWT [40] ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PKNREC

//*** RECORD=PKPREC ****
// ************* PICKING ORDER POOL HEADER TABLE **************
// 
// DB2 TABLE VIEW:      DPICK.VPOOLH02
// 
// COPYLIB MEMBER:      DCL00301
// 
// I/O MODULE:          IO1870
// 
// KEY TO DB2 TABLE:    XWHCD
//                      XGPCD
//                      SY1STNBR
//                      SY2CLRID
//                      XDMCD
//                      XQACD
//                      XSDCD
//                      XSACD
//                      XPGCD
//                      XUMCD
//                      XOWCD
// 
// DATE CREATED:        06/16/87
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 06/16/87   SHP       New record definition.
// 10/02/90   JWOOD     ADD XBCCD, PK4CUHLD
// **********************
Record PKPREC type basicRecord
  5 PKPGROUP PKPGROUP ; 
    10 XWHCD XWHCD ; 
    10 PK1PRTN PK1PRTN ; 
    10 PK1CUOID PK1CUOID ; 
    10 PK1NORID PK1NORID ; 
    10 PK4STKTF PK4STKTF ; 
    10 PK1ALLNB PK1ALLNB ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 XDVCD XDVCD ; 
    10 XBCCD XBCCD ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 OP1DSADT OP1DSADT ; 
    10 OP1DSBDT OP1DSBDT ; 
    10 XOTCD XOTCD ; 
    10 XOCCD XOCCD ; 
    10 PK4OTUNT PK4OTUNT ; 
    10 PK4ORHLD PK4ORHLD ; 
    10 PK4CUHLD PK4CUHLD ; 
    10 PK1LNINB PK1LNINB ; 
    10 PKPKEY PKPKEY ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 OP2CGPCD OP2CGPCD ; 
      15 XQACD XQACD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XEGCD XEGCD ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 XOWCD XOWCD ; 
end // end PKPREC

//*** RECORD=PKWREC ****
// This is the Picking common work record.  It is passed from
// application to application in the COMMAREA user area.
// 
//   DATE        NAME      COMMENT
// --------     ------     ------------------------------------
// 07/07/87     SPOPA      Initial record creation.
// 07/19/89     jcampb     add pkwuserb area for pass info
// 11/04/91     shende     add division code (XDVCD).
// 03/03/92     SHENDE     Add brand code (XBCCD).
// 08/11/95     CBRINE     CANADA - Add country code (XCTCD).
// **********************
Record PKWREC type basicRecord
  5 PKWGRPLV PKWGRPLV ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 PKWXWHCD PKWXWHCD ; 
    10 PKWINDEX PKWINDEX ; 
    10 PKWCNTRL PKWCNTRL ; 
      15 PKWSLECT PKWSLECT [3] ; 
        20 PKWFRMAP PKWFRMAP ; 
        20 PKWSLTYP PKWSLTYP ; 
        20 PKWARRAY PKWARRAY ; 
        20 PKWUSERA PKWUSERA ; 
          25 PKWSELSW PKWSELSW ; 
          25 PKWFRMDT PKWFRMDT ; 
          25 PKWTODT PKWTODT ; 
          25 PKW-ORDER-TYP-IND PKW-ORDER-TYP-IND ; 
          25 XDVCD XDVCD ; 
          25 XBCCD XBCCD ; 
          25 XCTCD XCTCD ; 
          25 PKW-ORD-GRP-SW PKW-ORD-GRP-SW ; 
          25 * char(29) ; 
    10 PKWUSERB PKWUSERB ; 
end // end PKWREC

//*** RECORD=PKXREC ****
// This work area is the customer keys array that is formatted
// and passed in the Picking common work record (PKWREC) when
// customers are selected for inquiry.
// 
//   DATE        NAME      COMMENT
// --------     ------     ------------------------------------
// 07/07/87     SPOPA      Initial record creation.
// **********************
Record PKXREC type basicRecord
  5 PKWARRAY PKWARRAY ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 PKXKUACT PKXKUACT [30] ; 
    10 KUCCOID KUCCOID [30] ; 
    10 KUMSTRID KUMSTRID [30] ; 
    10 XNXCD XNXCD [30] ; 
    10 * char(60) ; 
end // end PKXREC

//*** RECORD=PKYREC ****
// This work area is the order keys array that is formatted
// and passed in the Picking common work record (PKWREC) when
// orders are selected for inquiry.
// 
//   DATE        NAME      COMMENT
// --------     ------     ------------------------------------
// 07/07/87     SPOPA      Initial record creation.
// **********************
Record PKYREC type basicRecord
  5 PKWARRAY PKWARRAY ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 PKYORACT PKYORACT [30] ; 
    10 PK1CUOID PK1CUOID [30] ; 
    10 PK1NORID PK1NORID [30] ; 
    10 PK1PKSCH PK1PKSCH [30] ; 
end // end PKYREC

//*** RECORD=PKZREC ****
// This work area is the first argument that is passed in the
// CALL statement for modules IO1770, IO1790 and IO2160.
// It contains the function to be performed and two general
// use summary count fields.  Data is returned to the calling
// application in either one or both fields, depending on the
// called module.
// 
//   DATE       NAME      COMMENT
// --------    ------     -------------------------------------
// 07/27/87    SPOPA      Initial record creation.
// **********************
Record PKZREC type basicRecord
  10 PKZFUNC PKZFUNC ; 
  10 PKZSUM1 PKZSUM1 ; 
  10 PKZSUM2 PKZSUM2 ; 
end // end PKZREC

//*** RECORD=PWFREC ****
// *************** PICKING CARRIER HOLD TABLE *****************
// 
// DB2 TABLE VIEW:      DPICK.VCAHLD01
// 
// COPYLIB MEMBER:      DCL00561
// 
// I/O MODULE:          io3190
// 
// KEY TO DB2 TABLE:    XWHCD
//                      TF1CARCD
// 
// DATE CREATED:        02/07/89
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 02/07/89  mmoreh     New record definition.
// 03/05/91  SBEAUC     Change reference of PKARHCD to XHRCD
//                      for table changes.
// **********************
Record PWFREC type basicRecord
  5 PWFGROUP PWFGROUP ; 
    10 PWFKEY PWFKEY ; 
      15 XWHCD XWHCD ; 
      15 TF1CARCD TF1CARCD ; 
    10 XHRCD XHRCD ; 
    10 PKBRELDT PKBRELDT ; 
    10 PKBPLRDT PKBPLRDT ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PWFREC

//*** RECORD=PWIREC ****
// ** * * * * PICKING ORDER POOL HEADER IOMOD OPTION REC  * * *
// *
// *    USE IN CONJUCTION WITH IOMOD IO1720 AND REC PK4REC
// *
// *    WITH OPTION "S5" IT IS NESSARY TO PASS BOTH HIGH AND
// *    LOW VALUE RANGE DESIRED AS THE IOMOD WILL NOT DEFAULT
// *    ANY OF THE VALUES.
// *
// *    DATE CREATED: 07/25/89
// *
// *    MAINTENANCE LOG
// *
// *    DATE     INIT     REASON
// *  --------   ----     -----------------------------------
// *  07/25/89   jbc      created
// *
// *
// ** * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// **********************
Record PWIREC type basicRecord
  5 PWIDATA PWIDATA ; 
    10 PWIFUNC PWIFUNC ; 
    10 OP1CUNDT OP1CUNDT [2] ; 
    10 OP1DSBDT OP1DSBDT [2] ; 
    10 PK4PLNDT PK4PLNDT [2] ; 
end // end PWIREC

//*** RECORD=SP1REC ****
// ****************  sales program header table ***************
// 
// db2 table:        dspgm.vspgm001
// 
// copylib member:   none
// 
// key to db2 table: sp1id
// 
// date created:     march 11, 1986
// 
// 
// maintenance log:
// 
// date       init   comments
// --------   ----   ------------------------------------------
// 5-11-86    ral    created csp record
// 10-01-90   S.JOB  E1:SUBSTITUTE PRODUCT CATEGORIES FOR
//                      FAMILY CODES
// 2/5/91     CHYDE  Chg sp1* data item literal descriptions
//                   to corresponding db2 names.
// 06-11-91   S.JOB  E0:ADD LIFE CYCLES 2 & 3,  CHANGE FROM
//                   SPCL-CUST-ID(1-20)TO SPCL-CUST-CD(1-10).
// ************************************************************
// **********************
Record SP1REC type basicRecord
  5 SP1ITEMS SP1ITEMS ; 
    10 SP1KEY SP1KEY ; 
      15 SP1ID SP1ID ; 
    10 SP1NM SP1NM ; 
    10 SP1ABRV SP1ABRV ; 
    10 SP1LIFEF SP1LIFEF ; 
    10 SP1CALCF SP1CALCF ; 
    10 SP1CALDT SP1CALDT ; 
    10 XNDCD XNDCD ; 
    10 XLCCD XLCCD [3] ; 
    10 XQACD XQACD ; 
    10 SP1OTIND SP1OTIND ; 
    10 SP1CIND SP1CIND ; 
    10 SP1PIND SP1PIND ; 
    10 SP1STAT SP1STAT ; 
    10 XAUCD XAUCD [20] ; 
    10 XSGCD XSGCD [10] ; 
    10 XPCCD XPCCD [20] ; 
    10 XSPCD XSPCD [20] ; 
    10 SP1COM1 SP1COM1 ; 
    10 SP1COM2 SP1COM2 ; 
    10 SP1COM3 SP1COM3 ; 
    10 SP1COM4 SP1COM4 ; 
    10 SP1COM5 SP1COM5 ; 
    10 SP1COM6 SP1COM6 ; 
    10 SP1COM7 SP1COM7 ; 
    10 SP1COM8 SP1COM8 ; 
    10 SP1COM9 SP1COM9 ; 
    10 SP1COM10 SP1COM10 ; 
    10 SP1COM11 SP1COM11 ; 
    10 SP1COM12 SP1COM12 ; 
    10 SP1COM13 SP1COM13 ; 
    10 SP1COM14 SP1COM14 ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end SP1REC

//*** RECORD=SQLCA ****
// sqlca - sql communication area
// 
// sqlca is a collection of variables that are used by db2 to
// provike an application program with information about the
// execution of its sql statements.  thus, the information in
// the sqlca applies to the most recently executed sql
// statement.
// 
// the sqlca is the second argument to be passed to a db2
// i/o module.  an example of a call to db2 follows.
// 
//              call io0030,iotask,sqlca,sm5rec
// 
// for more complete definition of the variable names please
// refer to the  ibm database 2 reference sc26-4078-1
// appendix f.
// 
// *********************
Record SQLCA type basicRecord
  3 SQLCAREC SQLCAREC ; 
    4 SQLCAHEX SQLCAHEX ; 
      5 SQLCAID SQLCAID ; 
      5 SQLCABC SQLCABC ; 
      5 VAGen_SQLCODE VAGen_SQLCODE ; 
      5 SQLERRM SQLERRM ; 
        49 SQLERRML SQLERRML ; 
        49 SQLERRMC SQLERRMC ; 
      5 SQLERRP SQLERRP ; 
      5 SQLERRD SQLERRD [6] ; 
      5 SQLWARN SQLWARN ; 
        10 SQLWARN0 SQLWARN0 ; 
        10 SQLWARN1 SQLWARN1 ; 
        10 SQLWARN2 SQLWARN2 ; 
        10 SQLWARN3 SQLWARN3 ; 
        10 SQLWARN4 SQLWARN4 ; 
        10 SQLWARN5 SQLWARN5 ; 
        10 SQLWARN6 SQLWARN6 ; 
        10 SQLWARN7 SQLWARN7 ; 
      5 SQLEXT SQLEXT ; 
end // end SQLCA

//*** RECORD=SRCREC ****
// * * * * * * shiprec program last run table * * * * * * * * *
// 
// db2 table:           dship.vsrpgm01
// 
// copylib member:      dcl00112
// 
// i-o mod:             io4250
// 
// key to db2 table:    xwhcd
//                      xxxpgmno
// 
// date created:        06/19/89
// 
// ----------------------maint log:----------------------------
//   date    init.  comments
// --------  -----  -------------------------------------------
// 06/19/89   jbc   initial creation
// **********************
Record SRCREC type basicRecord
  5 SRCGRP SRCGRP ; 
    10 XXXPGMNO XXXPGMNO ; 
    10 XXXCMTCT XXXCMTCT ; 
    10 XWHCD XWHCD ; 
    10 PK1PKSCH PK1PKSCH ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP1NTMAL OP1NTMAL ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end SRCREC

//*** RECORD=TA1REC ****
// this record is for use with csp to call the error diag
// module ta0020.
// 
// the call statement for ta0020 should be in the following
// format:
// 
//         CALL TA0020 TA1REC,TAEREC (NONCSP ;
// 
// ta1rec is 48 bytes long and consists of the following:
// 
//    1) error type - four bytes charcater error type code
//                    'db2 ' db2 error
//                    'vsam' vsam error
//                    'appl' any other application error
// 
//    2) termination- four bytes character termination code
//                    'abnd' abend the application
//                           do not use for csp/db2
//                    'retn' log error and return to caller
//                           use for csp/db2
// 
//    3) program name - eight byter character program id.
// 
//    4) location     - 32 byte character user defined info.
//                      this field is sub-defined into four
//                      8 character fields (process/stmt group
//                      name, etc. may be placed in these
//                      fields).
// 
//    5) map          - last map name displayed/conversed.
// 
//    6) db2 view name- the view name for the data base.
//                      this field is sub-defined into two
//                      fields to separate the data base
//                      name from the table name.
// 
//    7) key value    - a/n value of key (user program should
//                      not attempt to convert any internal
//                      data fields. e.g. bin/pack to num).
// 
//  date created   :  05-07-86
// 
//  maintenance log:
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          05-13-86   dps    added map, data base, table view,
//                            table key, and filler columns
//          12/16/88  SPOPA   Defined subordinate fields to
//                            TA1PGMNM and TA1MAP.
//          06/08/93  jcampb  added TA1-GROUP level 03
// **********************
Record TA1REC type basicRecord
  3 TA1-GROUP TA1-GROUP ; 
    5 TA1TYPE TA1TYPE ; 
    5 TA1FUNC TA1FUNC ; 
    5 TA1PGMNM TA1PGMNM ; 
      10 TA1PGMAP TA1PGMAP ; 
      10 TA1PGMNO TA1PGMNO ; 
    5 TA1LOC TA1LOC ; 
      10 TA1LOCAT TA1LOCAT [4] ; 
    5 TA1MAP TA1MAP ; 
      10 TA1MAPAP TA1MAPAP ; 
      10 TA1MAPNO TA1MAPNO ; 
    5 TA1DBTBL TA1DBTBL ; 
      10 TA1DBASE TA1DBASE ; 
      10 TA1TBLVU TA1TBLVU ; 
    5 TA1TBLKE TA1TBLKE ; 
    5 TA1FYICD TA1FYICD ; 
    5 * char(37) ; 
end // end TA1REC

//*** RECORD=TA2REC ****
// ******************* PLEASE NOTE ****************************
// For access to the European Date formats you must include
// redefines record TA2REC01 to your application records list.
// ************************************************************
// 
// this date routine is good for any date from january 1, 1800
// to december 31, 2099.  all dates sent to this program are
// verified to be correct and an return code and written error
// message are returned to the calling program.  the time is
// verified and whenever numerics are contained in either of
// the time fields, it will be used as the time.
// when numerics are not in either time field the current time
// from the computer will be used.
// 
// the call statement for ta0040 should be in the following
// format:
// 
//         call ta0040,ta2rec
// 
// ta2rec is 200 bytes long and consists of the following:
// 
//        1) return - four bytes numeric characters
//                    return code from date routines
//                    '0000' successful (no errors)
//                    '0111' invalid julian date
//                    '0222' invalid gregorian date
//                    '0333' invalid century
//                    '0888' invalid gregorian type
//                    '0999' invalid option
//                    '1010' bad commarea -zero length received
// 
//        2) option - eight bytes alpha-numeric characters
//                    what you want the date routine to do
//                    'getdate ' get date and time
//                    'julgreg ' julian converted to all greg
//                               formats
//                    'gregjul ' greg converted to julian and
//                               all greg formats
//                    'greggreg' greg converted to julian and
//                               all greg formats
//                               (to convert dates from one
//                                format to another)
//                    'daysdiff' number of days between from
//                               and to dates not inclusive.
// 
//        3) type   - one byte character
//                    when doing a 'julgreg' or 'greggreg'
//                    where and in what format the
//                    gregorian date is.
//                    'a' mmddyy
//                    'b' mm/dd/yy
//                    'c' mmddccyy
//                    'd' mm/dd/ccyy
//                    'e' yymmdd
//                    'f' yy/mm/dd
//                    'g' ccyymmdd
//                    'h' ccyy/mm/dd
//                    'i' ddmmyy        * european date fmts
//                    'j' dd.mm.yy      * accessed through
//                    'k' ddmmccyy      * ta2rec01 (redefine
//                    'l' dd.mm.ccyy    * of ta2rec.
// 
//        4) days   - there bytes numeric characters
//                    days to add to current date or any date
//                    given.
//                    in other words dates-given = date + days
// 
//        5) days between dates
//                    date from format - ccyymmdd
//                    date to format   - ccyymmdd
//                    days difference
// 
// maint log
//   when      who     why
// --------  --------  ----------------------------------------
// 06/24/87  snoble    added date difference fields and docum
// 07/21/89  SPOPA     Defined lower level for Gregorian date
//                     fields so YYMM only could be addressed.
// 07/28/89  JJUCH     Add TA2group and adjust the levels.
// 09/20/89  JJUCH     Redefined the TA2GRGB to include subflds
//                     so dash fields can be addressed.
// **********************
Record TA2REC type basicRecord
  5 TA2GROUP TA2GROUP ; 
    10 TA2RTNCD TA2RTNCD ; 
    10 TA2DTOPT TA2DTOPT ; 
    10 TA2GRTYP TA2GRTYP ; 
    10 TA2DYAOD TA2DYAOD ; 
    10 TA2CENT TA2CENT ; 
    10 TA2DYWK TA2DYWK ; 
    10 TA2TIME TA2TIME ; 
      15 TA2TIMEN TA2TIMEN ; 
        20 TA2TIMHM TA2TIMHM ; 
        20 TA2TIMSS TA2TIMSS ; 
    10 TA2TIMED TA2TIMED ; 
    10 TA2JULN TA2JULN ; 
      15 TA2JULNN TA2JULNN ; 
    10 TA2GRGA TA2GRGA ; 
      15 TA2GRGAN TA2GRGAN ; 
    10 TA2GRGB TA2GRGB ; 
      15 TA2GRBMM TA2GRBMM ; 
      15 TA2GRBD1 TA2GRBD1 ; 
      15 TA2GRBDD TA2GRBDD ; 
      15 TA2GRBD2 TA2GRBD2 ; 
      15 TA2GRBYY TA2GRBYY ; 
    10 TA2GRGC TA2GRGC ; 
      15 TA2GRECN TA2GRECN ; 
    10 TA2GRGD TA2GRGD ; 
    10 TA2GRGE TA2GRGE ; 
      15 TA2GRGEN TA2GRGEN ; 
        20 TA2GRGYM TA2GRGYM ; 
        20 TA2GRGDD TA2GRGDD ; 
    10 TA2GROF TA2GROF ; 
    10 TA2GRGG TA2GRGG ; 
      15 TA2GRGGN TA2GRGGN ; 
        20 TA2GRCYM TA2GRCYM ; 
        20 * num(2) ; 
    10 TA2GRGH TA2GRGH ; 
    10 TA2LITDT TA2LITDT ; 
    10 TA2ERMSG TA2ERMSG ; 
    10 TA2DBDGP TA2DBDGP ; 
      15 TA2DBDF TA2DBDF ; 
        20 TA2DBDFN TA2DBDFN ; 
      15 TA2DBDT TA2DBDT ; 
        20 TA2DBDTN TA2DBDTN ; 
      15 TA2DBDD TA2DBDD ; 
        20 TA2DBDDN TA2DBDDN ; 
    10 * char(17) ; 
end // end TA2REC

//*** RECORD=TA9REC ****
// *************  working days calculation record *************
// *
// *  this record is used to pass/receive information to/from
// *  sub-program ta0190; the working-days calculation
// *  sub-program. This is also used for TA0290....
// *      (see copybook WWRKDATE)
// *  maint log:
// * date        init    comments
// * --------    ----    -------------------------------------
// * 11/20/86    lhh     created member
// ************************************************************
// **********************
Record TA9REC type basicRecord
  5 TA9GRP TA9GRP ; 
    10 TA9BEGDT TA9BEGDT ; 
      15 TA9BEGCC TA9BEGCC ; 
      15 TA9BEGYY TA9BEGYY ; 
      15 TA9BEGMM TA9BEGMM ; 
      15 TA9BEGDD TA9BEGDD ; 
    10 TA9ENDDT TA9ENDDT ; 
      15 TA9ENDCC TA9ENDCC ; 
      15 TA9ENDYY TA9ENDYY ; 
      15 TA9ENDMM TA9ENDMM ; 
      15 TA9ENDDD TA9ENDDD ; 
    10 TA9OFSET TA9OFSET ; 
    10 TA9RTNFL TA9RTNFL ; 
    10 TA9RTNDT TA9RTNDT ; 
      15 TA9RTNCC TA9RTNCC ; 
      15 TA9RTNYY TA9RTNYY ; 
      15 TA9RTNMM TA9RTNMM ; 
      15 TA9RTNDD TA9RTNDD ; 
    10 TA9DTDIF TA9DTDIF ; 
end // end TA9REC

//*** RECORD=TAEREC ****
// ---------- ERROR DIAGNOSIS REPORTING INFORMATION -----------
// 
// This record is intended to be used as the second parameter
// of the CALL statement when invoking subroutine TA0020 -
// Error Diagnosis Reporting.
// 
// Either move SQLCA.SQLCAREC to TAEREC.SQLCAREC for DB2 errors
// or move appropriate error information to TAEREC.TAEDESC1 and
// TAEREC.TAEDESC2 for application errors before calling the
// subroutine.
// 
// DB2 error example:
//      MOVE SQLCA.SQLCAREC TO TAEREC.SQLCAREC ;
//      CALL TA0020 TA1REC,TAEREC (NONCSP ;
// 
// Application error example:
//      MOVE EZERT8 TO TAEREC.TAEDESC1 ;
//      MOVE TA3REC.TA3GROUP TO TAEREC.TAEDESC2 ;
//      CALL TA0020 TA1REC,TAEREC (NONCSP ;
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          11/30/88  SPOPA   New record.
// **********************
Record TAEREC type basicRecord
  10 SQLCAREC SQLCAREC ; 
    15 TAEDESC1 TAEDESC1 ; 
    15 TAEDESC2 TAEDESC2 ; 
end // end TAEREC

//*** RECORD=TF1REC ****
// ************* ship recon carrier code record ***************
// 
// db2 table:          dpick.vcarr001
// 
// copylib member:     dcl00114
// 
// i/o mod:            io0860
// 
// key to db2 table:   tf1carcd
// 
// 
// date created:       9/10/86
// 
// maintenance log:
// 
//   date        init            comment
//   ----        ----       -----------------------------------
// 09/10/86      tl         initial creation
// 05/07/87      jsn        add carrier flags
// 06/25/87      jsn        add xwhcd's , tf1cartc
// 08/17/87      jsn        add tf1pbrfl's
// **********************
Record TF1REC type basicRecord
  5 TF1GRP TF1GRP ; 
    10 TF1KEYS TF1KEYS ; 
      15 TF1CARCD TF1CARCD ; 
    10 TF1CARNM TF1CARNM ; 
    10 TF1ABRV TF1ABRV ; 
    10 TF1SABRV TF1SABRV ; 
    10 TF1MCARF TF1MCARF ; 
    10 TF1ECARF TF1ECARF ; 
    10 TF1FCARF TF1FCARF ; 
    10 TF1ACARF TF1ACARF ; 
    10 TF1CRQFL TF1CRQFL ; 
    10 TF1CARTC TF1CARTC ; 
    10 XWHCD XWHCD [15] ; 
    10 TF1PBRFL TF1PBRFL [15] ; 
    10 XXXSTAT XXXSTAT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end TF1REC

//*** RECORD=WSY2000 ****
// **********  PASSING PARAMETER RECORD FOR SY2000  ***********
// 
// THIS COPY MEMBER IS USED WITH THE SY2000 SUB-PROGRAM TO
// RETURN REGIONAL INFORMATION ABOUT A PRODUCT. THIS SUB-
// PROGRAM IS A 'NIKE BOTH' ROUTINE AND CAN BE CALLED FROM BOTH
// ONLINE AND BATCH PROGRAMS. THE OPTIONS WORK THE SAME AS ANY
// STANDARD DB2 I/O MODULE. THE OPTIONS ARE DESCRIBED IN DETAIL
// BELOW:
// 
// SELECT UNIQUE       OPTION 'S '
//     KEYS REQUIRED:  XGP-GPC-CD, SY-STY-NBR, SY-COLR-CD-ID,
//                     XDM-DIM-CD, XDR-PROD-REG-CD
//                OR:  SY-PROD-ID, REG-ID
// 
//   RETURNED VALUES:  WSY2000-RETURN-CODE, WSY2000-OUTPUT-DATA
// 
// SELECT SCAN1        OPTION 'S1', 'N1', 'C1'
//                     (RETURNS ALL COLORS FOR A STYLE AND
//                      REGION)
//     KEYS REQUIRED:  XGP-GPC-CD, SY-STY-NBR, XDR-PROD-REG-CD
//                OR:  SY-STY-ID, REG-ID
// 
//   RETURNED VALUES:  WSY2000-RETURN-CODE, SY-COLR-CD-ID,
//                     XDM-DIM-CD, WSY2000-OUTPUT-DATA
// 
// SELECT SCAN2        OPTION 'S2', 'N2', 'C2'
//                     (RETURNS ALL REGIONS FOR A PRODUCT)
//     KEYS REQUIRED:  XGP-GPC-CD, SY-STY-NBR, SY-COLR-CD-ID,
//                     XDM-DIM-CD
//                OR:  SY-PROD-ID
// 
//   RETURNED VALUES:  WSY2000-RETURN-CODE, XDR-PROD-REG-CD,
//                     WSY2000-OUTPUT-DATA
// 
// SUB-OPTION-CODE AND HOW IT FUNCTIONS:
//   SUB-OPTION WILL TELL THE PROGRAM WHETHER TO USE 'OLD KEYS'
//   (XGP-GPC-CD, SY-STY-NBR, SY-COLR-CD-ID, XDM-DIM-CD, AND
//   XDR-PROD-REG-CD) OR THE NEW GLOBAL PRODUCT KEYS
//   (SY-STY-ID, SY-PROD-ID, REG-ID). THE PROGRAM WILL RETURN
//   ALL THE KEYS (EXAMPLE: IF YOU CALL WITH THE OLD KEYS
//   OPTION, YOU WILL GET THE NEW KEYS RETURNED TO YOU).
// 
//   VALUES ARE:      'O'   USE OLD KEYS
//                    'N'   USE NEW GLOBAL KEYS
//   *NOTE: GLOBAL PRODUCT KEYS NOT AVAILABLE UNTIL APRIL 1995
// 
// RETURN CODES:
// 
//        GOOD RETURN              VALUE 00
//        END OF SCAN              VALUE 01
//        ROW NOT FOUND            VALUE 02
//        INVALID OPTION           VALUE 10
//        INVALID SUB-OPTION       VALUE 11
//        DB2 UNAVAILABLE (-911)   VALUE 98
//        DB2 FATAL ERROR          VALUE 99
//   THE PROGRAM WILL POST DB2 ERRORS TO THE ERRDIAG FILES
//   USING TA0020.
// 
// CALLING FORMAT:
// 
//         CALL SY2000 WSY2000 (REPLY,NONCSP,NOMAPS;
// 
// 
// MAINTENANCE LOG:
// 
// DATE     INIT       COMMENTS
// -------- ------     -------------------------------------
// 02-21-95 MHALST     created csp record
// ************************************************************
// ***********************
Record WSY2000 type basicRecord
  3 WSY2000-RECORD WSY2000-RECORD ; 
    5 WSY2000-OPTION-CODE WSY2000-OPTION-CODE ; 
    5 WSY2000-SUB-OPTION-CODE WSY2000-SUB-OPTION-CODE ; 
    5 WSY2000-RETURN-CODE WSY2000-RETURN-CODE ; 
    5 WSY2000-KEY-INFO WSY2000-KEY-INFO ; 
      10 XGP-GPC-CD XGP-GPC-CD ; 
      10 SY-STY-NBR SY-STY-NBR ; 
      10 SY-COLR-CD-ID SY-COLR-CD-ID ; 
      10 XDM-DIM-CD XDM-DIM-CD ; 
      10 XDR-PROD-REG-CD XDR-PROD-REG-CD ; 
      10 SY-STY-ID SY-STY-ID ; 
      10 SY-PROD-ID SY-PROD-ID ; 
      10 REG-ID REG-ID ; 
    5 WSY2000-OUTPUT-DATA WSY2000-OUTPUT-DATA ; 
      10 PG-SCHED-SPCLT-CD PG-SCHED-SPCLT-CD ; 
      10 PG-FCST-CD PG-FCST-CD ; 
      10 XSE-SESN-CD XSE-SESN-CD ; 
      10 XSN-SESN-YR-RNG XSN-SESN-YR-RNG ; 
      10 SY-PROP-OFFER-BDT SY-PROP-OFFER-BDT ; 
      10 SY-PROP-OFFER-XDT SY-PROP-OFFER-XDT ; 
      10 SY-FUTR-OFFER-BDT SY-FUTR-OFFER-BDT ; 
      10 SY-FUTR-OFFER-XDT SY-FUTR-OFFER-XDT ; 
      10 XLC-LIFE-CYC-CD XLC-LIFE-CYC-CD [4] ; 
      10 SY-LIFE-CYC-EDT SY-LIFE-CYC-EDT [4] ; 
      10 XPR-PROD-TYP-CD XPR-PROD-TYP-CD ; 
      10 XPL-PROD-LN-CD XPL-PROD-LN-CD ; 
      10 XPC-PROD-CAT-CD XPC-PROD-CAT-CD ; 
      10 SY-FRST-DOM-SLS-MO SY-FRST-DOM-SLS-MO ; 
      10 SY-PROJ-DOM-CLS-MO SY-PROJ-DOM-CLS-MO ; 
      10 SY-SFTY-STKCLS-IND SY-SFTY-STKCLS-IND ; 
      10 OP-HMDL-HOT-FL OP-HMDL-HOT-FL ; 
      10 SY-ALW-NEW-ORD-FL SY-ALW-NEW-ORD-FL ; 
      10 XWH-WHSE-CD XWH-WHSE-CD [6] ; 
      10 SY-RSTR-XSO-IND SY-RSTR-XSO-IND ; 
      10 SY-BO-SW SY-BO-SW ; 
      10 SY-BO-SW-EDT SY-BO-SW-EDT ; 
      10 ZZ-SDT ZZ-SDT ; 
      10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
      10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    5 WSY2000-FILLER WSY2000-FILLER ; 
end // end WSY2000

//*** RECORD=XP0FW01 ****
// ************************ tfwrec ****************************
// This record is used in XP0FS01 to convert a CU-CO-ID to two
// formats the system INTERNAL type and the EXTERNAL(display)
// type.
// 
// maintenance
//   when      who     what
// -------- -------- ------------------------------------------
// 06/29/92  wtate    new record
// 
// ***********************
Record XP0FW01 type basicRecord
  10 KUCCOID KUCCOID ; 
  10 XBCCD XBCCD ; 
  10 XP0FW01-EXTERNAL XP0FW01-EXTERNAL ; 
  10 XP0FW01-INTERNAL XP0FW01-INTERNAL ; 
end // end XP0FW01

//*** RECORD=XSPKW01 ****
// Working Storage to format application posting information
// on a bad return from a call to SY2000.
// 
// 08/11/95  CBRINE  Initial setup.
// ***********************
Record XSPKW01 type basicRecord
  10 XSPKW-WSY2000-POST-1 XSPKW-WSY2000-POST-1 ; 
    15 XSPKW-WSY2000-GPC-CD XSPKW-WSY2000-GPC-CD ; 
    15 XSPKW-WSY2000-DASH-1 XSPKW-WSY2000-DASH-1 ; 
    15 XSPKW-WSY2000-STY-NBR XSPKW-WSY2000-STY-NBR ; 
    15 XSPKW-WSY2000-DASH-2 XSPKW-WSY2000-DASH-2 ; 
    15 XSPKW-WSY2000-COLR-CD XSPKW-WSY2000-COLR-CD ; 
    15 XSPKW-WSY2000-DASH-3 XSPKW-WSY2000-DASH-3 ; 
    15 XSPKW-WSY2000-DIM-CD XSPKW-WSY2000-DIM-CD ; 
    15 XSPKW-WSY2000-DASH-4 XSPKW-WSY2000-DASH-4 ; 
    15 XSPKW-WSY2000-PROD-REG-CD XSPKW-WSY2000-PROD-REG-CD ; 
    15 XSPKW-WSY2000-DASH-5 XSPKW-WSY2000-DASH-5 ; 
    15 XSPKW-WSY2000-RETURN-CD XSPKW-WSY2000-RETURN-CD ; 
end // end XSPKW01