package pk06;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sr.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import ww.common.*;
//*** PROGRAM=PK06 ****
// ** * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// 
// auto hold release
// 
// 
// maintance history
// -----------------
//   date   name    reason
// -------- ----    -----------------------------------------
// 08/01/89 jcampb  created
// 08/31/89 jcampb  fix auto hold function.
// 01/31/90 mwalto  fix auto hold function when using pf8, &
//                  fix regular release and change functions
// 02/27/90 jcampb  post error when pool rec on hold and not
//                  found in dpick.vorhld01
// 03/05/91 SBEAUC  Change PKAREC access to corp table - also
//                  chg refer'cs from PKA- to XHR- items for
//                  table changes.
// 04/09/91 jcampb  remove pk8rec from records as not used
//                  table changes.
// 06/22/92 MWALTO  remove pk3rec from records as not used
// 08/14/95 CBRINE  modified to call SY2000 (PK06260). Added
//                  XCTCD to PKWREC.
// 02/28/98 DBETTR  Y2KFIX
//                  PROCEDURES MODIFIED TO MAKE PROGRAM Y2K
//                  COMPLIANT.
//                  PK06030, PK06220, PK06265,PK06310, PK06320
//                  PK06355, PK06365, PK06500,PK06510, PK06610
//                  PK06700
// 12/14/99 VALAPA  Y2KFIX, CHANGED THE VARIABLE RETURNING FROM
//                  TA0040 FROM TA2REC.TA2GRGEN TO
//                  TA2REC.TA2GRGGN IN PK06030 PROCESS GROUP
// ** * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// *********************
Program PK06 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK06W01 PK06W01; // record
  PK06W02 PK06W02; // record
  PK06W03 PK06W03; // record
  PK06W04 PK06W04; // record
  PK1REC PK1REC; // record
  PK2REC PK2REC; // record
  PK4REC PK4REC; // record
  PK5REC PK5REC; // record
  PK6REC PK6REC; // record
  PK7REC PK7REC; // record
  PK9REC PK9REC; // record
  PKBREC PKBREC; // record
  PKCREC PKCREC; // record
  PKDREC PKDREC; // record
  PKHREC PKHREC; // record
  PKNREC PKNREC; // record
  PKPREC PKPREC; // record
  PKWREC PKWREC; // record
  PKXREC PKXREC; // record
  PKYREC PKYREC; // record
  PKZREC PKZREC; // record
  PWFREC PWFREC; // record
  PWIREC PWIREC; // record
  SP1REC SP1REC; // record
  SQLCA SQLCA; // record
  SRCREC SRCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA9REC TA9REC; // record
  TAEREC TAEREC; // record
  TF1REC TF1REC; // record
  WSY2000 WSY2000; // record
  XP0FW01 XP0FW01; // record
  XSPKW01 XSPKW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XNXTBL; // table
  use XOTTBL; // table
  use XSYESNO; // table
  use XWHTBL; // table
  use XBCTBL; // table
  use XHRTBL; // table
  use PK06M.PK06M100,  // forms
      PK06M.PK06M200, 
      PK06M.PK06M300
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PK06005: PK06005();
    goto PK06100;
    PK06100: PK06100();
    goto PK06100;
  end // end main
end // end PK06

// * pack hold - process startup
Function PK06005()

   /* ---------------  PICKING HOLD TABLE MAINTENANCE         ----*/
   /* ---------------          main process  pk06005          ----*/


   /* ---- clear records and*/
   /* ---- set up map header information*/
  set PK06M100 initial; /* initially clear the map*/
  set PK06M300 initial; /* initially clear the map*/
  set PK06M200 initial; /* initially clear the map*/
  set PK06W01 empty; /* initially clear working storage*/
  set PK06W02 empty; /* initially clear working storage*/
  set PK06W03 empty; /* initially clear working storage*/
  set PK06W04 empty; /* initially clear working storage*/

  converseVar.segmentedMode = 1; /* run in segmented mode*/
  VGVar.handleHardIOErrors = 1; /* to trap hard errors in program*/
  converseVar.commitOnConverse = 1; /* auto commit on every map converse*/

  PK06M100.XXXRVNBR = 00; /* revision number*/
  PK06W04.PK06WMAX = 668; /* max entries for pk06w04 array*/
  PK06M100.PK06MAHD = "N"; /* auto hold*/
  PK06M100.PK06MARL = "N"; /* auto rlse*/
  PK06M100.PK06MXHD = "N"; /* exclude orders on hold*/
  PK06M100.PK06MXPL = "N"; /* exclude orders on plan*/
  PK06M100.PK06MXNP = "N"; /* exclude orders not on plan*/
  PK06W01.PK06WERS = "N";

  XPPK001(); /* appl init*/

  if (sysVar.arrayIndex != 0) /* set in xppk002*/
    PK06M100.XWHCD = XWHTBL.XWHCD[sysVar.arrayIndex];
    PK06M100.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end

  PK06020(); /* load valid hold rsn codes*/

   /* ---- unconditionally clear the key areas*/
  if (PKWREC.PKWINDEX > 0
   && PKWREC.PKWUSERB > " ")
    PK06W03.PK06WSCR = PKWREC.PKWUSERB;
    PKYREC.PKWARRAY = PKWREC.PKWARRAY[1];
    move PK06W03 to PK06M100 withV60Compat;
    PK06030();
    PK06W01.PK06WGET = "Y";
    PK06W01.PK06WLSC = "Y";
    PK06W01.PK06WMAP = "PK06M300";
  else
    PK06W01.PK06WMAP = "PK06M100";
    PKWREC.PKWINDEX = 0;
    PKWREC.PKWCNTRL = " ";
  end


   /* -------------  end process pk06005  --------------------*/
end // end PK06005

// load valid reason codes
Function PK06020()

   /* ---------------  pk06020   ---------------------------------*/
       /* load map and working storage with valid reason codes*/

  PK06M100.XXXERRID = "PK06020";



   /* ----- if table overflow has occured (pk06wfl4 = 'y')*/
   /* ----- from a previous execution of this module*/
   /* -----     set ezemno and get out.*/
  if (PK06W01.PK06WFL4 == "Y")
    converseLib.validationFailed(24);
    return;
  end


       /* load map until end of reason code table*/
  PK06W01.PK06WNDX = 1;
  PK06W01.PK06WFL1 = "Y";
  while (PK06W01.PK06WFL1 == "Y")
    PK06025();
  end


   /* -------------  end process pk06020  --------------------*/
end // end PK06020

// select next reason code
Function PK06025()
   /* ---------------  pk06125   ---------------------------------*/
       /* select next reason code*/
       /* load working storage*/

  PK06M100.XXXERRID = "PK06125";



   /* ---------------  load valid reason codes          ----------*/

  if (PK06W01.PK06WNDX < 191)
    if (XHRTBL.XHRCD[PK06WNDX] != "99") /* not end of table*/
      PK06W01.XHRCD[PK06WNDX] = XHRTBL.XHRCD[PK06WNDX];
      PK06W01.XHRDESC[PK06WNDX] = XHRTBL.XHRDESC[PK06WNDX];
      PK06W01.XHRABRV[PK06WNDX] = XHRTBL.XHRABRV[PK06WNDX];
    else
      PK06W01.PK06WFL1 = "N"; /* end of table*/
      PK06W01.PK06WTRR = PK06W01.PK06WNDX; /* total entries in tbl*/
      PK06W01.PK06WTRR = PK06W01.PK06WTRR - 1; /* dont count '99' entry*/
    end
  else
    PK06W01.PK06WFL1 = "N";
    PK06W01.PK06WFL4 = "Y"; /* table overflow flag*/
    converseLib.validationFailed(24); /* table overflow*/
    return;
  end


  PK06W01.PK06WNDX = PK06W01.PK06WNDX + 1; /* increment index*/



   /* -------------  end process pk06125  --------------------*/
end // end PK06025

// date edits
Function PK06030()
   /* ---------- pk06030 - validate entered dates ----------------*/

  PK06M100.XXXERRID = "PK06030";

   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
   /* *   check "from" and "to" customer need dates             **/
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/

   /* --> "from" date*/
  PK06W01.PK06WWD1 = 0;
  if (PK06M100.PK06MNFM != 0
   || PK06M100.PK06MNFD != 0)

    /* ======= Y2K OUT BEGIN =======*/

    /* OR PK06M100.PK06MNFY NE 0;*/
    /* MOVE EZEDTE TO PK06W01.PK06WFDA;*/

    /* ======= Y2K OUT END =======*/

     /* ====== Y2K IN  BEGIN ======*/

    PK06W01.PK06WFDT = VGVar.currentGregorianDate;

     /* ====== Y2K IN END ======*/

    PK06W01.PK06WWMM = PK06M100.PK06MNFM;
    PK06W01.PK06WWDD = PK06M100.PK06MNFD;
    PK06W01.PK06WWYY = PK06M100.PK06MNFY;

     /* ====== Y2K IN  BEGIN ======*/

    if (PK06W01.PK06WWYY < 60)
      PK06W01.PK06WWCC = 20;
    else
      PK06W01.PK06WWCC = 19;
    end

     /* ====== Y2K IN END ======*/

    set TA2REC empty;
    TA2REC.TA2GRTYP = "G"; /* date is in yymmdd format*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* convert to all greg dates*/
    TA2REC.TA2GRGG = PK06W01.PK06WWDT; /* date to be checked*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* check the date*/
    if (TA2REC.TA2RTNCD == 0000) /* date is valid*/
      PK06W01.PK06WWD1 = TA2REC.TA2GRGGN;
      PK06W01.OP1CUNDT[1] = TA2REC.TA2GRGGN;
    else
      set PK06M100.PK06MNFM cursor, bold;
      set PK06M100.PK06MNFD bold;
      set PK06M100.PK06MNFY bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(158);
      return;
    end
  else
    PK06W01.OP1CUNDT[1] = -1;
  end

   /* --> "to  " date*/
  PK06W01.PK06WWD2 = 0;
  if (PK06M100.PK06MNTM != 0
   || PK06M100.PK06MNTD != 0)

    /* ======= Y2K OUT BEGIN =======*/

    /* OR PK06M100.PK06MNTY NE 0;*/
    /* MOVE EZEDTE TO PK06W01.PK06WFDA;*/

     /* ====== Y2K OUT END ======*/


     /* ====== Y2K IN  BEGIN ======*/

    PK06W01.PK06WFDT = VGVar.currentGregorianDate;

     /* ====== Y2K IN END ======*/

    PK06W01.PK06WWMM = PK06M100.PK06MNTM;
    PK06W01.PK06WWDD = PK06M100.PK06MNTD;
    PK06W01.PK06WWYY = PK06M100.PK06MNTY;

     /* ====== Y2K IN  BEGIN ======*/

    if (PK06W01.PK06WWYY < 60)
      PK06W01.PK06WWCC = 20;
    else
      PK06W01.PK06WWCC = 19;
    end

     /* ====== Y2K IN END ======*/

    set TA2REC empty;
    TA2REC.TA2GRTYP = "G"; /* date is in yymmdd format*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* convert to all greg dates*/
    TA2REC.TA2GRGG = PK06W01.PK06WWDT; /* date to be checked*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* check the date*/
    if (TA2REC.TA2RTNCD == 0000)
      PK06W01.PK06WWD2 = TA2REC.TA2GRGGN;
      PK06W01.OP1CUNDT[2] = TA2REC.TA2GRGGN;
    else
      set PK06M100.PK06MNTM cursor, bold;
      set PK06M100.PK06MNTD bold;
      set PK06M100.PK06MNTY bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(158);
      return;
    end
  else
    PK06W01.OP1CUNDT[2] = 999999999;
  end

   /* date1 must be less then or equal to date2*/

  if (PK06W01.PK06WWD2 > 0)
    if (PK06W01.PK06WWD1 == 0
     || PK06W01.PK06WWD2 < PK06W01.PK06WWD1)
      set PK06M100.PK06MNFM cursor, bold;
      set PK06M100.PK06MNFD bold;
      set PK06M100.PK06MNFY bold;
      set PK06M100.PK06MNTM bold;
      set PK06M100.PK06MNTD bold;
      set PK06M100.PK06MNTY bold;
      if (PK06W01.PK06WWD1 == 0)
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(288);
        return;
      else
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(285);
        return;
      end
    else
    end
  end


   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
   /* *   check "from" and "to" don't ship before dates         **/
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/

   /* --> "from" date*/
  PK06W01.PK06WWD1 = 0;
  if (PK06M100.PK06MDFM != 0
   || PK06M100.PK06MDFD != 0)

    /* ======= Y2K OUT BEGIN =======*/

    /* OR PK06M100.PK06MDFY NE 0;*/
    /* MOVE EZEDTE TO PK06W01.PK06WFDA;*/

    /* ======= Y2K OUT END =======*/


     /* ====== Y2K IN  BEGIN ======*/

    PK06W01.PK06WFDT = VGVar.currentGregorianDate;

     /* ====== Y2K IN END ======*/

    PK06W01.PK06WWMM = PK06M100.PK06MDFM;
    PK06W01.PK06WWDD = PK06M100.PK06MDFD;
    PK06W01.PK06WWYY = PK06M100.PK06MDFY;

     /* ====== Y2K IN  BEGIN ======*/

    if (PK06W01.PK06WWYY < 60)
      PK06W01.PK06WWCC = 20;
    else
      PK06W01.PK06WWCC = 19;
    end

     /* ====== Y2K IN END ======*/

    set TA2REC empty;
    TA2REC.TA2GRTYP = "G"; /* date is in yymmdd format*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* convert to all greg dates*/
    TA2REC.TA2GRGG = PK06W01.PK06WWDT; /* date to be checked*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* check the date*/
    if (TA2REC.TA2RTNCD == 0000) /* date is valid*/
      PK06W01.PK06WWD1 = TA2REC.TA2GRGGN;
      PK06W01.OP1DSBDT[1] = TA2REC.TA2GRGGN;
    else
      set PK06M100.PK06MDFM cursor, bold;
      set PK06M100.PK06MDFD bold;
      set PK06M100.PK06MDFY bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(158);
      return;
    end
  else
    PK06W01.OP1DSBDT[1] = -1;
  end


   /* --> "to  " date*/
  PK06W01.PK06WWD2 = 0;
  if (PK06M100.PK06MDTM != 0
   || PK06M100.PK06MDTD != 0)

    /* ======= Y2K OUT BEGIN =======*/

      /* OR PK06M100.PK06MDTY NE 0;*/
    /* MOVE EZEDTE TO PK06W01.PK06WFDA;*/

    /* ======= Y2K OUT END =======*/

     /* ====== Y2K IN  BEGIN ======*/

    PK06W01.PK06WFDT = VGVar.currentGregorianDate;

     /* ====== Y2K IN END ======*/

    PK06W01.PK06WWMM = PK06M100.PK06MDTM;
    PK06W01.PK06WWDD = PK06M100.PK06MDTD;
    PK06W01.PK06WWYY = PK06M100.PK06MDTY;

     /* ====== Y2K IN  BEGIN ======*/

    if (PK06W01.PK06WWYY < 60)
      PK06W01.PK06WWCC = 20;
    else
      PK06W01.PK06WWCC = 19;
    end

     /* ====== Y2K IN END ======*/

    set TA2REC empty;
    TA2REC.TA2GRTYP = "G"; /* date is in yymmdd format*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* convert to all greg dates*/
    TA2REC.TA2GRGG = PK06W01.PK06WWDT; /* date to be checked*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* check the date*/
    if (TA2REC.TA2RTNCD == 0000)
      PK06W01.PK06WWD2 = TA2REC.TA2GRGGN;
      PK06W01.OP1DSBDT[2] = TA2REC.TA2GRGGN;
    else
      set PK06M100.PK06MDTM cursor, bold;
      set PK06M100.PK06MDTD bold;
      set PK06M100.PK06MDTY bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(158);
      return;
    end
  else
    PK06W01.OP1DSBDT[2] = 999999999;
  end

   /* date1 must be less then or equal to date2*/

  if (PK06W01.PK06WWD2 > 0)
    if (PK06W01.PK06WWD1 == 0
     || PK06W01.PK06WWD2 < PK06W01.PK06WWD1)
      set PK06M100.PK06MDFM cursor, bold;
      set PK06M100.PK06MDFD bold;
      set PK06M100.PK06MDFY bold;
      set PK06M100.PK06MDTM bold;
      set PK06M100.PK06MDTD bold;
      set PK06M100.PK06MDTY bold;
      if (PK06W01.PK06WWD1 == 0)
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(288);
        return;
      else
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(286);
        return;
      end
    end
  end

   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
   /* *   check "from" and "to" hold release dates              **/
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/

   /* --> "from" date*/
  PK06W01.PK06WWD1 = 0;
  if (PK06M100.PK06MRFM == 99)
    PK06M100.PK06MRFD = 99;
    PK06M100.PK06MRFY = 99;
    TA2REC.TA2GRGEN = 999999999;
    PK06W01.PK06WWD1 = 999999999;
  else
    if (PK06M100.PK06MRFM != 0
     || PK06M100.PK06MRFD != 0)

      /* ====== Y2K OUT BEGIN =======*/

      /* OR PK06M100.PK06MRFY NE 0;*/
      /* MOVE EZEDTE TO PK06W01.PK06WFDA;*/

      /* ====== Y2K OUT END =========*/

      /* ====== Y2K IN  BEGIN ======*/

      PK06W01.PK06WFDT = VGVar.currentGregorianDate;

      /* ====== Y2K IN END ======*/

      PK06W01.PK06WWMM = PK06M100.PK06MRFM;
      PK06W01.PK06WWDD = PK06M100.PK06MRFD;
      PK06W01.PK06WWYY = PK06M100.PK06MRFY;

      /* ====== Y2K IN  BEGIN ======*/

      if (PK06W01.PK06WWYY < 60)
        PK06W01.PK06WWCC = 20;
      else
        PK06W01.PK06WWCC = 19;
      end

      /* ====== Y2K IN END ======*/

      set TA2REC empty;
      TA2REC.TA2GRTYP = "G"; /* date is in yymmdd format*/
      TA2REC.TA2DTOPT = "GREGGREG"; /* convert to all greg dates*/
      TA2REC.TA2GRGG = PK06W01.PK06WWDT; /* date to be checked*/
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* check the date*/
      if (TA2REC.TA2RTNCD == 0000) /* date is valid*/
        PK06W01.PK06WWD1 = TA2REC.TA2GRGEN;
      else
        set PK06M100.PK06MRFM cursor, bold;
        set PK06M100.PK06MRFD bold;
        set PK06M100.PK06MRFY bold;
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(158);
        return;
      end
    end
  end


   /* --> "to  " date*/
  PK06W01.PK06WWD2 = 0;
  if (PK06M100.PK06MRTM == 99)
    PK06M100.PK06MRTD = 99;
    PK06M100.PK06MRTY = 99;
    TA2REC.TA2GRGEN = 999999999;
    PK06W01.PK06WWD2 = 999999999;
  else
    if (PK06M100.PK06MRTM != 0
     || PK06M100.PK06MRTD != 0)

      /* ====== Y2K OUT BEGIN =======*/

      /* OR PK06M100.PK06MRTY NE 0;*/
      /* MOVE EZEDTE TO PK06W01.PK06WFDA;*/

      /* ====== Y2K OUT END =========*/

      /* ====== Y2K IN  BEGIN ======*/

      PK06W01.PK06WFDT = VGVar.currentGregorianDate;

      /* ====== Y2K IN END ======*/

      PK06W01.PK06WWMM = PK06M100.PK06MRTM;
      PK06W01.PK06WWDD = PK06M100.PK06MRTD;
      PK06W01.PK06WWYY = PK06M100.PK06MRTY;

      /* ====== Y2K IN  BEGIN ======*/

      if (PK06W01.PK06WWYY < 60)
        PK06W01.PK06WWCC = 20;
      else
        PK06W01.PK06WWCC = 19;
      end

      /* ====== Y2K IN END ======*/

      set TA2REC empty;
      TA2REC.TA2GRTYP = "G"; /* date is in yymmdd format*/
      TA2REC.TA2DTOPT = "GREGGREG"; /* convert to all greg dates*/
      TA2REC.TA2GRGG = PK06W01.PK06WWDT; /* date to be checked*/
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* check the date*/
      if (TA2REC.TA2RTNCD == 0000)
        PK06W01.PK06WWD2 = TA2REC.TA2GRGGN;
      else
        set PK06M100.PK06MRTM cursor, bold;
        set PK06M100.PK06MRTD bold;
        set PK06M100.PK06MRTY bold;
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(158);
        return;
      end
    end
  end

   /* date1 must be less then or equal to date2*/

  if (PK06W01.PK06WWD1 == 999999999)
    /* next sentence*/
  else
    if (PK06W01.PK06WWD2 > 0)
      if (PK06W01.PK06WWD1 == 0
       || PK06W01.PK06WWD2 < PK06W01.PK06WWD1)
        set PK06M100.PK06MRFM cursor, bold;
        set PK06M100.PK06MRFD bold;
        set PK06M100.PK06MRFY bold;
        set PK06M100.PK06MRTM bold;
        set PK06M100.PK06MRTD bold;
        set PK06M100.PK06MRTY bold;
        if (PK06W01.PK06WWD1 == 0)
          PK06W01.PK06WERS = "Y";
          converseLib.validationFailed(288);
          return;
        else
          PK06W01.PK06WERS = "Y";
          converseLib.validationFailed(287);
          return;
        end
      end
    end
  end

   /* if autohold flag equals 'y' then rlse date must be entered*/

  if (PK06M100.PK06MAHD == "Y")
    if (PK06M100.PK06MRMM == 0
     && PK06M100.PK06MRDD == 0
     && PK06M100.PK06MRYY == 0)
      converseLib.validationFailed(61);
      PK06W01.PK06WERS = "Y";
      set PK06M100.PK06MRMM cursor, bold;
      set PK06M100.PK06MRDD bold;
      set PK06M100.PK06MRYY bold;
      return;
    end
  end

   /* 1. if entered default hold release date must be:*/
   /* 2. all 9's*/
   /* 3. must be greater then today*/
   /* 4. must be a working day*/

   /* ** 1.*/
  if (PK06M100.PK06MRMM != 0
   || PK06M100.PK06MRDD != 0)

    /* ====== Y2K OUT BEGIN =======*/

    /* OR PK06M100.PK06MRYY NE 0;*/

    /* ====== Y2K OUT END =========*/

    /* **2.*/
    if (PK06M100.PK06MRMM == 99
     || PK06M100.PK06MRDD == 99)

      /* ===== Y2K OUT BEGIN =====*/

      /* OR PK06M100.PK06MRYY EQ 99;*/

      /* ===== Y2K OUT END =====*/

      PK06M100.PK06MRMM = 99;
      PK06M100.PK06MRDD = 99;
      PK06M100.PK06MRYY = 99;
    else
      /* ** 3.*/
      PK06W01.PK06WWYY = PK06M100.PK06MRYY;
      PK06W01.PK06WWMM = PK06M100.PK06MRMM;
      PK06W01.PK06WWDD = PK06M100.PK06MRDD;

      /* ====== Y2K IN  BEGIN ======*/

      if (PK06W01.PK06WWYY < 60)
        PK06W01.PK06WWCC = 20;
      else
        PK06W01.PK06WWCC = 19;
      end

      /* ====== Y2K IN END ======*/


        /* ====== Y2K OUT BEGIN =======*/

      /* MOVE EZEDTE TO PK06WFDA;*/
      /* IF PK06W01.PK06WFDA GT PK06W01.PK06WWDT;*/

        /* ====== Y2K OUT END =======*/


        /* ====== Y2K IN BEGIN =======*/

      PK06WFDT = VGVar.currentGregorianDate;
      if (PK06W01.PK06WFDT > PK06W01.PK06WWDT)

        /* ====== Y2K IN END =======*/

        converseLib.validationFailed(55);
        PK06W01.PK06WERS = "Y";
        set PK06M100.PK06MRMM cursor, bold;
        set PK06M100.PK06MRDD bold;
        set PK06M100.PK06MRYY bold;
      else
        /* ** 4.*/
        set TA9REC empty;

        /* ====== Y2K OUT BEGIN =======*/

        /* MOVE 19 TO TA9REC.TA9BEGCC;*/

        /* ====== Y2K OUT END =========*/


        /* ====== Y2K IN BEGIN =======*/

        if (PK06M100.PK06MRYY < 60)
          TA9REC.TA9BEGCC = 20;
        else
          TA9REC.TA9BEGCC = 19;
        end

        /* ====== Y2K IN END =========*/

        TA9REC.TA9BEGMM = PK06M100.PK06MRMM;
        TA9REC.TA9BEGDD = PK06M100.PK06MRDD;
        TA9REC.TA9BEGYY = PK06M100.PK06MRYY;
        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
        if (TA9REC.TA9RTNFL != 0)
          converseLib.validationFailed(56);
          PK06W01.PK06WERS = "Y";
          set PK06M100.PK06MRMM cursor, bold;
          set PK06M100.PK06MRDD bold;
          set PK06M100.PK06MRYY bold;
        end
      end
    end
  end

   /* --- end of:pk06030 - validate entered dates ----------------*/
end // end PK06030

// * pick hold/rlse main  process
Function PK06100()

  if (PK06W01.PK06WERS != "Y")
    PK06105(); /* process pf/xfer*/
  end

  if (PK06W01.PK06WERS != "Y")
    PK06110(); /* select data for display*/
  end

  if (PK06W01.PK06WMAP == "PK06M100")
    PK06200(); /* converse selection screen*/
  end

  if (PK06W01.PK06WMAP == "PK06M300")
    PK06300(); /* converse hold/rlse screen*/
  end

end // end PK06100

// application xfer logic
Function PK06105()
  COMMAREA.CAFROMAP = "PK06";
  COMMAREA.CAITEM = "    ";
  PK06M100.XXXERRID = "PK06105";
  PK06M300.XXXERRID = "PK06105";

  if (converseVar.eventKey is pfkey)
    if (PK06W01.PK06WMAP == "PK06M300")
      if (converseVar.eventKey is pf13)
        move PK06M100 to PK06W03 withV60Compat;
        PKWREC.PKWFRMAP = "PK06";
        PKWREC.PKWUSERB = PK06W03.PK06WSCR;
        COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
        COMMAREA.CATOAP = "PK0B";
        XSEXIT(); /* order header inquiry*/
        PK06W01.PK06WERS = "Y";
        PK06M300.VAGen_EZEMSG = COMMAREA.CAMSG;
        return;
      end
      if (converseVar.eventKey is pf14)
        move PK06M100 to PK06W03 withV60Compat;
        PKWREC.PKWFRMAP = "PK06";
        PKWREC.PKWUSERB = PK06W03.PK06WSCR;
        COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
        COMMAREA.CATOAP = "PK0C";
        XSEXIT(); /* line itm inq*/
        PK06W01.PK06WERS = "Y";
        PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
        PK06M300.VAGen_EZEMSG = COMMAREA.CAMSG;
        return;
      end
      if (converseVar.eventKey is pf15)
        move PK06M100 to PK06W03 withV60Compat;
        PKWREC.PKWFRMAP = "PK06";
        PKWREC.PKWUSERB = PK06W03.PK06WSCR;
        COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
        COMMAREA.CATOAP = "PK0D";
        XSEXIT(); /* line itm inq*/
        PK06W01.PK06WERS = "Y";
        PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
        PK06M300.VAGen_EZEMSG = COMMAREA.CAMSG;
        return;
      end
    end
    PKWREC.PKWINDEX = 0;
    PKWREC.PKWCNTRL = " ";
    PKWREC.PKWUSERB = " ";
    PKWREC.PKWFRMAP = "PK06";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    if (converseVar.eventKey is pf1)
      XSPF1();
      PK06W01.PK06WERS = "Y";
      PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
      PK06M300.VAGen_EZEMSG = COMMAREA.CAMSG;
      return;
    end
    if (converseVar.eventKey is pf3)
      if (PK06W01.PK06WMAP == "PK06M300")
        PK06W01.PK06WGET = "N";
        PK06W01.PK06WMAP = "PK06M100";
      else
        COMMAREA.CATOAP = "PK09";
        XSEXIT();
        PK06W01.PK06WERS = "Y";
        PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
        PK06M300.VAGen_EZEMSG = COMMAREA.CAMSG;
      end
      return;
    end
    if (converseVar.eventKey is pf4)
      XSPF4();
      PK06W01.PK06WERS = "Y";
      PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
      PK06M300.VAGen_EZEMSG = COMMAREA.CAMSG;
      return;
    end
    if (converseVar.eventKey is pf13)
      COMMAREA.CATOAP = "PK0B";
      XSEXIT(); /* picking order*/
      PK06W01.PK06WERS = "Y";
      PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
      return;
    end
    if (converseVar.eventKey is pf14)
      COMMAREA.CATOAP = "PK0C";
      XSEXIT(); /* line itm inq*/
      PK06W01.PK06WERS = "Y";
      PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
      PK06M300.VAGen_EZEMSG = COMMAREA.CAMSG;
      return;
    end
    if (converseVar.eventKey is pf15)
      COMMAREA.CATOAP = "PK0D";
      XSEXIT(); /* customer inquiry*/
      PK06W01.PK06WERS = "Y";
      PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
      PK06M300.VAGen_EZEMSG = COMMAREA.CAMSG;
      return;
    end
    if (converseVar.eventKey is pf16)
      COMMAREA.CATOAP = "PK0Z";
      XSEXIT(); /* sales program/product inquiry*/
      PK06W01.PK06WERS = "Y";
      PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
      PK06M300.VAGen_EZEMSG = COMMAREA.CAMSG;
      return;
    end
    if (converseVar.eventKey is pf17
     && PK06W01.PK06WMAP == "PK06M100")
      COMMAREA.CATOAP = "PK0I";
      XSEXIT(); /* company/carrier/order hold*/
      PK06W01.PK06WERS = "Y";
      PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
      return;
    end
    if (converseVar.eventKey is pf19)
      COMMAREA.CATOAP = "PK0S";
      XSEXIT(); /* planning menu*/
      PK06W01.PK06WERS = "Y";
      PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
      PK06M300.VAGen_EZEMSG = COMMAREA.CAMSG;
      return;
    end
    if (converseVar.eventKey is pf20)
      COMMAREA.CATOAP = "PK07";
      XSEXIT(); /* go to selection menu*/
      PK06W01.PK06WERS = "Y";
      PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
      PK06M300.VAGen_EZEMSG = COMMAREA.CAMSG;
      return;
    end
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2)
      PK06W01.PK06WGET = "N";
      PK06W01.PK06WFTF = "N";
      if (PK06W01.PK06WMAP == "PK06M100")
        set PK06M100 initial;
        return;
      else
        converseLib.clearScreen();
        
        return;
      end
    else
      if (converseVar.eventKey is enter
       && PK06M100.CATOAP > " ")
        COMMAREA.CATOAP = PK06M100.CATOAP;
        COMMAREA.CAITEM = PK06M100.CAITEM;
        XSEXIT();
        PK06W01.PK06WERS = "Y";
        PK06M100.VAGen_EZEMSG = COMMAREA.CAMSG;
        return;
      end
    end
  end



   /* ------------------- end pk06210 -------------------------*/
end // end PK06105

// select data for display
Function PK06110()
   /* --------------------- pk06110 select data ------------------*/

  if (PK06W01.PK06WERS == "Y"
   || PK06W01.PK06WGET != "Y")
    return;
  end

  set PK06W04 empty;
  PK06W04.PK06WMAX = 668;

  if (PK06M100.PK1CUOID > 0)
    PK06120(); /* load by order*/
  else
    if (PK06M100.KUCCOID > 0)
      PK06130(); /* load by customer*/
    else
      if (PK06M100.XGPCD > " " /* load by style*/
       && PK06M100.SY1STNBR > " ")
        PK06140();
      else
        if (PK06M100.SP1ID > " ")
          PK06150(); /* load by sp1id*/
        else
          if (PK06M100.XHRCD > " "
           || PK06M100.PK06MRFD > 0
           || PK06M100.PK06MRTD > 0)
            PK06160(); /* load by hold code*/
          else
            PK06170(); /* load by dates/carrier*/
          end
        end
      end
    end
  end

  if (PK06W01.PK06WERS == "Y")
    PK06W01.PK06WMAP = "PK06M100";
  else
    if (PK06W04.PK06WCNT == 0)
      PK06W01.PK06WMAP = "PK06M100";
      PK06W01.PK06WERS = "Y";
      PK06W01.PK06WFTF = "N"; /* first time thru flag*/
      converseLib.validationFailed(31); /* no orders found*/
    else
      if (PKWREC.PKWINDEX > 0)
        PK06180(); /* return from another pk app*/
      else
        PK06W01.PK06WLSC = "Y"; /* load screen flag*/
        PK06W01.PK06WFTF = "Y"; /* first time thru flag*/
        PK06W01.PK06WMAP = "PK06M300";
      end
    end
  end
  PK06W01.PK06WGET = "N";

   /* ----------------- end of: pk06110 select data --------------*/
end // end PK06110

// load by order
Function PK06120()
   /* -------- pk06120 - load by order ---------------------------*/

  PK06M100.XXXERRID = "PK06120";

  set PWIREC empty;
  set PK4REC empty;
  PK4REC.XWHCD = PK06M100.XWHCD;
  PK4REC.PK1CUOID = PK06M100.PK1CUOID;
  PK4REC.PK1NORID = -1;
  PWIREC.PWIFUNC = "S3";
  PK06121(); /* open set*/
  PWIREC.PWIFUNC = "N3";
  PK06121(); /* fetch first rec*/
  if (SQLCA.VAGen_SQLCODE == 100)
    PK06W01.PK06WERS = "Y";
    converseLib.validationFailed(11);
    set PK06M100.PK1CUOID cursor, bold;
  else
    if (PK4REC.XBCCD == " ") /* no brand on pool record*/
  /* next sentence                      /*   skip around*/
    else
      if (PK06M100.XBCCD == " ") /* no brand on map*/
        PK06M100.XBCCD = PK4REC.XBCCD; /* use the pk4 brand*/
      else
        if (PK4REC.XBCCD != PK06M100.XBCCD) /* pk4 brand ne map brand*/
          PK06M100.VAGen_EZEMSG = "BRAND CODE ON MAP OVERRIDDEN BY BRAND CODE FROM POOL HDR"; /* override the map*/
          PK06M100.XBCCD = PK4REC.XBCCD;
        end
      end
    end
  end



  while (SQLCA.VAGen_SQLCODE == +0
   && PK06W01.PK06WERS != "Y")
    PK06122(); /* load working storage*/
  end

  if (SQLCA.VAGen_SQLCODE != -911)
    PWIREC.PWIFUNC = "C3";
    PK06121(); /* close dpick.vpoolh01*/
  end
end // end PK06120

// access dpick.vpoolh01
Function PK06121()
   /* ----------- pk06121 - access dpick.vpoolh01 --------------*/


  call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* contention for data base resorce*/
      PK06W01.PK06WERS = "Y";
    else
      converseLib.validationFailed(29); /* fatal error*/
      PK06W01.PK06WERS = "Y";
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PK06121 "; /* Process name*/
      TA1REC.TA1LOC = PWIREC.PWIFUNC;
      TA1REC.TA1MAP = "PK06M100"; /* Map name*/
      TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    end
  end

   /* -------------  end process pk06121  --------------------*/
end // end PK06121

// move ord  vpoolh01 to array
Function PK06122()
   /* -------------- pk06122 - move data to array ----------------*/

  PK06123(); /* screen pool data*/

  if (PK06W01.PK06WSEL == "Y")
    PK06124(); /* format rlse date*/
    if (PK4REC.PK4ORHLD == "Y")
      PKZREC.PKZFUNC = "S1";
      PKBREC.XWHCD = PK4REC.XWHCD;
      PKBREC.PK1CUOID = PK4REC.PK1CUOID;
      PKBREC.PK1NORID = PK4REC.PK1NORID;
      PK06125(); /* select dpick.vorhld01*/
      if (SQLCA.VAGen_SQLCODE == 0
       && PK06W01.PK06WERS != "Y")
        PKZREC.PKZFUNC = "N1";
        PK06125(); /* select nxt dpick.vorhld01*/
      end
      if (SQLCA.VAGen_SQLCODE == 100)
        PK06126();
                                   /* load order even if no orhld rec found*/
      else
        while (SQLCA.VAGen_SQLCODE == 0)
          PK06126(); /* screen hold rlse date*/
        end
      end
      if (SQLCA.VAGen_SQLCODE != -911)
        PKZREC.PKZFUNC = "C1";
        PK06125(); /* close dpick.vorhld01*/
      end
    else
      if (PK06W01.PK06WWD1 == 0) /* since order is not on hold do ONLY*/
                                   /* if rel date NOT input in pk06m100*/
         /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
                      /* LOAD WORKING STORAGE ARRAY                   **/
         /* if we made it this far all selections have passed and we  **/
         /* have a record to place in the pk06w04 array.              **/
         /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
        PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
        PK06W04.PK06WCNT = PK06W04.PK06WCNT + 1;
        PK06W04.PK4ORHLD[PK06WIX4] = PK4REC.PK4ORHLD;
        if (PK4REC.PK4ORHLD == "Y")
          if (PK06M100.PK06MARL == "Y")
            PK06W04.PK06WSEL[PK06WIX4] = "R";
          end
        else
          if (PK06M100.PK06MAHD == "Y")
            PK06W04.PK06WSEL[PK06WIX4] = "H";
          end
        end
        PK06W04.PK1CUOID[PK06WIX4] = PK4REC.PK1CUOID;
        PK06W04.PK1NORID[PK06WIX4] = PK4REC.PK1NORID;
        PK06W04.XOTCD[PK06WIX4] = PK4REC.XOTCD;
        PK06W04.XBCCD[PK06WIX4] = PK4REC.XBCCD;
        PK06W04.KUCCOID[PK06WIX4] = PK4REC.KUCCOID;
        PK06W04.KUMSTRID[PK06WIX4] = PK4REC.KUMSTRID;
        PK06W04.XNXCD[PK06WIX4] = PK4REC.XNXCD;
        PK06W04.TF1CARCD[PK06WIX4] = PK4REC.TF1CARCD;
        PK06W04.OP1DSBDT[PK06WIX4] = PK4REC.OP1DSBDT;
        PK06W04.PK4OTUNT[PK06WIX4] = PK4REC.PK4OTUNT;
        if (PK4REC.PK4PLNDT > 0)
          PK06W04.PK06WPLF[PK06WIX4] = "*";
        end

         /* get store short name*/
        if (PK4REC.KUCCOID != PK6REC.KUCCOID
         || PK4REC.KUMSTRID != PK6REC.KUMSTRID)
          set PK6REC empty;
          PK6REC.KUCCOID = PK4REC.KUCCOID;
          PK6REC.KUMSTRID = PK4REC.KUMSTRID;
          PK06127();
          if (VAGen_SQLCODE != 0)
            PK6REC.KUMSTSNM = "UNKN";
          end
        end
        PK06W04.PK06WSNM[PK06WIX4] = PK6REC.KUMSTSNM;

      end
    end
  end

  if (PK06W01.PK06WERS != "Y")
    if (PK06W04.PK06WCNT >= PK06W04.PK06WMAX)
      PK06M100.XXXERRID = "PK06122";
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(304);
    else
      PWIREC.PWIFUNC = "N3";
      PK06121(); /* fetch next vpoolh01*/
    end
  end

   /* ---------- end of pk06122 - move data to array -------------*/
end // end PK06122

// screen pool data for selection
Function PK06123()
   /* -------------- pk06123 - screen pool data ------------------*/

  PK06W01.PK06WSEL = "Y";

  if (PK06M100.KUCCOID > 0)
    if (PK06M100.KUCCOID != PK4REC.KUCCOID
     && XP0FW01-INTERNAL != PK4REC.KUCCOID) /* Cole-Haan customer*/
      PK06W01.PK06WSEL = "N";
      return;
    end
  end

  if (PK06M100.KUMSTRID > 0
   && PK06M100.KUMSTRID != PK4REC.KUMSTRID)
    PK06W01.PK06WSEL = "N";
    return;
  end

  if (PK06M100.XNXCD > 0
   && PK06M100.XNXCD != PK4REC.XNXCD)
    PK06W01.PK06WSEL = "N";
    return;
  end

  if (PK06M100.XOTCD > " "
   && PK06M100.XOTCD != PK4REC.XOTCD)
    PK06W01.PK06WSEL = "N";
    return;
  end

  if (PK06M100.PK1CUOID > 0
   && PK06M100.PK1CUOID != PK4REC.PK1CUOID)
    PK06W01.PK06WSEL = "N";
    return;
  end

  if (PK06M100.TF1CARCD != " "
   && PK06M100.TF1CARCD != PK4REC.TF1CARCD)
    PK06W01.PK06WSEL = "N";
    return;
  end

  if (PK06M100.SP1ID != " "
   && PK06M100.SP1ID != PK4REC.SP1ID)
    PK06W01.PK06WSEL = "N";
    return;
  end

   /* ** * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
   /* screen for hold code entry - if entered and order is not*/
   /* on hold then reject.*/
   /* ** * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
  if (PK06M100.XHRCD != " "
   && PK4REC.PK4ORHLD != "Y")
    PK06W01.PK06WSEL = "N";
    return;
  end

   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
   /* exclude orders that are on hold*/
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
  if (PK06M100.PK06MXHD == "Y"
   && PK4REC.PK4ORHLD == "Y")
    PK06W01.PK06WSEL = "N";
    return;
  end

   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
   /* exclude orders that are on a plan*/
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
  if (PK06M100.PK06MXPL == "Y"
   && PK4REC.PK4PLNDT > 0)
    PK06W01.PK06WSEL = "N";
    return;
  end

   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
   /* exclude orders that are NOT on a plan*/
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
  if (PK06M100.PK06MXNP == "Y"
   && PK4REC.PK4PLNDT == 0)
    PK06W01.PK06WSEL = "N";
    return;
  end


   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
    /* format need dates to working date fields and check for*/
    /* valid range to select*/
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/

  PK06W01.PK06WWD1 = 0;
  PK06W01.PK06WWD2 = 0;

    /* from 'need' date*/
  if (PK06M100.PK06MNFM != 0)
    PK06W01.PK06WFMM = PK06M100.PK06MNFM;
    PK06W01.PK06WFDD = PK06M100.PK06MNFD;
    PK06W01.PK06WFYY = PK06M100.PK06MNFY;
    if (PK06W01.PK06WFYY > 67)
      PK06W01.PK06WFCT = 19;
    else
      PK06W01.PK06WFCT = 20;
    end
    PK06W01.PK06WWD1 = PK06W01.PK06WFDT;
  end
    /* to   'need' date*/
  if (PK06M100.PK06MNTM != 0)
    PK06W01.PK06WFMM = PK06M100.PK06MNTM;
    PK06W01.PK06WFDD = PK06M100.PK06MNTD;
    PK06W01.PK06WFYY = PK06M100.PK06MNTY;
    if (PK06W01.PK06WFYY > 67)
      PK06W01.PK06WFCT = 19;
    else
      PK06W01.PK06WFCT = 20;
    end
    PK06W01.PK06WWD2 = PK06W01.PK06WFDT;
  end

  if (PK06W01.PK06WWD1 != 0)
    if (PK06W01.PK06WWD2 != 0)
      if (PK06W01.PK06WWD1 > PK4REC.OP1CUNDT
       || PK06W01.PK06WWD2 < PK4REC.OP1CUNDT)
        PK06W01.PK06WSEL = "N";
        return;
      end
    else
      if (PK06W01.PK06WWD1 > PK4REC.OP1CUNDT)
        PK06W01.PK06WSEL = "N";
        return;
      end
    end
  end

   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
    /* format dnsb dates to working date fields and check for*/
    /* valid range to select*/
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/

  PK06W01.PK06WWD1 = 0;
  PK06W01.PK06WWD2 = 0;

    /* from 'dnsb' date*/
  if (PK06M100.PK06MDFM != 0)
    PK06W01.PK06WFMM = PK06M100.PK06MDFM;
    PK06W01.PK06WFDD = PK06M100.PK06MDFD;
    PK06W01.PK06WFYY = PK06M100.PK06MDFY;
    if (PK06W01.PK06WFYY > 67)
      PK06W01.PK06WFCT = 19;
    else
      PK06W01.PK06WFCT = 20;
    end
    PK06W01.PK06WWD1 = PK06W01.PK06WFDT;
  end
    /* to   'dnsb' date*/
  if (PK06M100.PK06MDTM != 0)
    PK06W01.PK06WFMM = PK06M100.PK06MDTM;
    PK06W01.PK06WFDD = PK06M100.PK06MDTD;
    PK06W01.PK06WFYY = PK06M100.PK06MDTY;
    if (PK06W01.PK06WFYY > 67)
      PK06W01.PK06WFCT = 19;
    else
      PK06W01.PK06WFCT = 20;
    end
    PK06W01.PK06WWD2 = PK06W01.PK06WFDT;
  end

  if (PK06W01.PK06WWD1 != 0)
    if (PK06W01.PK06WWD2 != 0)
      if (PK06W01.PK06WWD1 > PK4REC.OP1DSBDT
       || PK06W01.PK06WWD2 < PK4REC.OP1DSBDT)
        PK06W01.PK06WSEL = "N";
        return;
      end
    else
      if (PK06W01.PK06WWD1 > PK4REC.OP1DSBDT)
        PK06W01.PK06WSEL = "N";
        return;
      end
    end
  end


   /* ---------- end of pk06123 - screen pool data --------------*/
end // end PK06123

// format hold rlse date
Function PK06124()
   /* -------------- pk06124 - format hold rlse date -------------*/

   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
    /* format rlse dates to working date fields and check for*/
    /* valid range to select*/
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/

  PK06W01.PK06WWD1 = 0;
  PK06W01.PK06WWD2 = 0;

    /* from 'rlse' date*/
  if (PK06M100.PK06MRFM != 0)
    if (PK06M100.PK06MRFM == 99)
      PK06W01.PK06WWD1 = 999999999;
    else
      PK06W01.PK06WFMM = PK06M100.PK06MRFM;
      PK06W01.PK06WFDD = PK06M100.PK06MRFD;
      PK06W01.PK06WFYY = PK06M100.PK06MRFY;
      if (PK06W01.PK06WFYY > 70)
        PK06W01.PK06WFCT = 19;
      else
        PK06W01.PK06WFCT = 20;
      end
      PK06W01.PK06WWD1 = PK06W01.PK06WFDT;
    end
  end
    /* to   'rlse' date*/
  if (PK06M100.PK06MRTM != 0)
    if (PK06M100.PK06MRTM == 99)
      PK06W01.PK06WWD2 = 999999999;
    else
      PK06W01.PK06WFMM = PK06M100.PK06MRTM;
      PK06W01.PK06WFDD = PK06M100.PK06MRTD;
      PK06W01.PK06WFYY = PK06M100.PK06MRTY;
      if (PK06W01.PK06WFYY > 70)
        PK06W01.PK06WFCT = 19;
      else
        PK06W01.PK06WFCT = 20;
      end
      PK06W01.PK06WWD2 = PK06W01.PK06WFDT;
    end
  end

   /* ---------- end of pk06124 - format hold rlse date----------*/
end // end PK06124

// access dpick.vorhld01
Function PK06125()
   /* ----------- pk06125 - select set dpick.vpoolh01 ---------*/


  call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != -811)
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* contention for data base resorce*/
    else
      if (SQLCA.VAGen_SQLCODE != +100)
        converseLib.validationFailed(29); /* fatal error*/
        PK06W01.PK06WERS = "Y";
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK06125 "; /* Process name*/
        TA1REC.TA1LOC = PKZREC.PKZFUNC;
        TA1REC.TA1MAP = "PK06M100"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      end
    end
  end

   /* -------------  end process pk06125  --------------------*/
end // end PK06125

// load hold rsn cds to array
Function PK06126()
   /* -------------- pk06126 - screen holds for release date -----*/

  PK06W01.PK06WSEL = "Y";

  if (PK06W01.PK06WWD1 != 0)
    if (PK06W01.PK06WWD2 != 0)
      if (PK06W01.PK06WWD1 > PKBREC.PKBRELDT
       || PK06W01.PK06WWD2 < PKBREC.PKBRELDT)
        PK06W01.PK06WSEL = "N";
      end
    else
      if (PK06W01.PK06WWD1 > PKBREC.PKBRELDT)
        PK06W01.PK06WSEL = "N";
      end
    end
  end

  if (PK06M100.XHRCD != " "
   && PKBREC.XHRCD != PK06M100.XHRCD)
    PK06W01.PK06WSEL = "N";
  end

  if (PK06W01.PK06WSEL == "Y"
   && PK06W01.PK06WERS != "Y")
     /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
                  /* LOAD WORKING STORAGE ARRAY                   **/
     /* if we made it this far all selections have passed and we  **/
     /* have a record to place in the pk06w04 array.              **/
     /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
    PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
    PK06W04.PK06WCNT = PK06W04.PK06WCNT + 1;
    PK06W04.PK4ORHLD[PK06WIX4] = PK4REC.PK4ORHLD;
    if (PK4REC.PK4ORHLD == "Y")
      if (PK06M100.PK06MARL == "Y")
        PK06W04.PK06WSEL[PK06WIX4] = "R";
      end
    else
      if (PK06M100.PK06MAHD == "Y")
        PK06W04.PK06WSEL[PK06WIX4] = "H";
      end
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      PK06W04.XHRCD[PK06WIX4] = PKBREC.XHRCD;
    else
      PK06W04.XHRCD[PK06WIX4] = "??";
    end
    PK06W04.PKBRELDT[PK06WIX4] = PKBREC.PKBRELDT;
    PK06W04.PK1CUOID[PK06WIX4] = PK4REC.PK1CUOID;
    PK06W04.PK1NORID[PK06WIX4] = PK4REC.PK1NORID;
    PK06W04.XOTCD[PK06WIX4] = PK4REC.XOTCD;
    PK06W04.XBCCD[PK06WIX4] = PK4REC.XBCCD;
    PK06W04.KUCCOID[PK06WIX4] = PK4REC.KUCCOID;
    PK06W04.KUMSTRID[PK06WIX4] = PK4REC.KUMSTRID;
    PK06W04.XNXCD[PK06WIX4] = PK4REC.XNXCD;
    PK06W04.TF1CARCD[PK06WIX4] = PK4REC.TF1CARCD;
    PK06W04.OP1DSBDT[PK06WIX4] = PK4REC.OP1DSBDT;
    PK06W04.PK4OTUNT[PK06WIX4] = PK4REC.PK4OTUNT;
    if (PK4REC.PK4PLNDT > 0)
      PK06W04.PK06WPLF[PK06WIX4] = "*";
    end

     /* get store short name*/
    set PK6REC empty;
    PK6REC.KUCCOID = PK4REC.KUCCOID;
    PK6REC.KUMSTRID = PK4REC.KUMSTRID;
    PK06127();
    if (VAGen_SQLCODE == 0)
      PK06W04.PK06WSNM[PK06WIX4] = PK6REC.KUMSTSNM;
    else
      PK06W04.PK06WSNM[PK06WIX4] = "UNKN";
    end

  end

  if (SQLCA.VAGen_SQLCODE == 0)
    /* get hold reason codes*/
    PKZREC.PKZFUNC = "N1";
    PK06125(); /* select nxt dpick.vorhld01*/
  else
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2"; /* Type of error*/
    TA1REC.TA1PGMNM = "PK06126 "; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE            ";
    TA1REC.TA1MAP = "PK06M100"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKBREC.PKBKEY;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  end

   /* ---------- end of pk06126 - move data to array -------------*/
end // end PK06126

// select unique  dpick.vpkcus01
Function PK06127()
   /* ---------  pk06127 - select unique dpick.vpkcus01 ----------*/


  call "IO1830" ("S ", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes}; /* select next*/

  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* contention for data base resorce*/
      PK06W01.PK06WERS = "Y";
    else
      if (SQLCA.VAGen_SQLCODE != +100)
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK06127 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT UNIQUE            ";
        TA1REC.TA1MAP = "PK06M100"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VPKCUS01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      end
    end
  end

   /* -------------  end process pk06127  --------------------*/
end // end PK06127

// load by customer
Function PK06130()
   /* -------- pk06130 - load by customer ------------------------*/

  PK06M100.XXXERRID = "PK06130";

  set PWIREC empty;
  set PK4REC empty;

  PK4REC.XWHCD = PK06M100.XWHCD;
  PK4REC.KUCCOID = PK06M100.KUCCOID;

  if (PK06M100.XBCCD == "08") /* if Cole-Haan*/
    if (PK06M100.KUCCOID > 99999 /**/
     && PK06M100.KUCCOID < 8000000)
      converseLib.validationFailed(427); /* invalid cole-haan customer*/
      set PK06M100.KUCCOID cursor, bold;
      PK06W01.PK06WERS = "Y";
      return;
    else
      if (PK06M100.KUCCOID > 8999999) /**/
        converseLib.validationFailed(427); /* invalid cole-haan customer*/
        set PK06M100.KUCCOID cursor, bold;
        PK06W01.PK06WERS = "Y";
        return;
      else
        XP0FW01.KUCCOID = PK06M100.KUCCOID;
        XP0FW01.XBCCD = PK06M100.XBCCD;
        XP0FS01(); /* look for Cole-Haan cust*/
        PK4REC.KUCCOID = XP0FW01.XP0FW01-INTERNAL;
                                   /* move C-H number to pk4rec*/
      end
    end
  else
    if (PK06M100.KUCCOID > 7999999 /* if Cole-Haan*/
     && PK06M100.KUCCOID < 9000000)
      XP0FW01.KUCCOID = PK06M100.KUCCOID;
      XP0FW01.XBCCD = PK06M100.XBCCD;
      XP0FS01(); /* look for Cole-Haan cust*/
      PK4REC.KUCCOID = XP0FW01.XP0FW01-INTERNAL;
                                   /* move it to pk4rec*/
    end
  end


  PK4REC.KUMSTRID = -1;
  PK4REC.XNXCD = -1;

  PWIREC.PWIFUNC = "S2";
  PK06121(); /* open set dpick.vpoolh01*/
  PWIREC.PWIFUNC = "N2";
  PK06121(); /* fetcn nxt dpick.vpoolh01*/
  if (SQLCA.VAGen_SQLCODE == 100)
    PK06W01.PK06WERS = "Y";
    converseLib.validationFailed(11);
    set PK06M100.KUCCOID cursor, bold;
    set PK06M100.KUMSTRID bold;
    set PK06M100.XNXCD bold;
  else
    if (PK4REC.XBCCD == " ") /* no brand on pool record*/
  /* next sentence                      /*   skip around*/
    else
      if (PK06M100.XBCCD == " ") /* no brand on map*/
        PK06M100.XBCCD = PK4REC.XBCCD; /* use the pk4 brand*/
      else
        if (PK4REC.XBCCD != PK06M100.XBCCD) /* pk4 brand ne map brand*/
          PK06M100.VAGen_EZEMSG = "BRAND CODE ON MAP OVERRIDDEN BY BRAND CODE FROM POOL HDR"; /* override the map*/
          PK06M100.XBCCD = PK4REC.XBCCD;
        end
      end
    end
  end



  while (SQLCA.VAGen_SQLCODE == +0
   && PK06W01.PK06WERS != "Y")
    PK06131(); /* load working storage*/
  end

  if (SQLCA.VAGen_SQLCODE != -911)
    PWIREC.PWIFUNC = "C2";
    PK06121(); /* close set dpick.vpoolh01*/
  end

   /* -end of: pk06130 - load by customer ------------------------*/
end // end PK06130

// move cust vpoolh01 to array
Function PK06131()
   /* ----------- pk06131 - move cust vpoolh01 to array ----------*/


  PK06123(); /* screen pool data for selection*/

  if (PK06W01.PK06WSEL == "Y")
    PK06124();
    if (PK4REC.PK4ORHLD == "Y")
      PKZREC.PKZFUNC = "S1";
      PKBREC.XWHCD = PK4REC.XWHCD;
      PKBREC.PK1CUOID = PK4REC.PK1CUOID;
      PKBREC.PK1NORID = PK4REC.PK1NORID;
      PK06125(); /* select dpick.vorhld01*/
      if (SQLCA.VAGen_SQLCODE == 0
       && PK06W01.PK06WERS != "Y")
        PKZREC.PKZFUNC = "N1";
        PK06125(); /* select nxt dpick.vorhld01*/
      end
      if (SQLCA.VAGen_SQLCODE == 100)
        PK06132();
      else
        while (SQLCA.VAGen_SQLCODE == 0)
          PK06132();
        end
      end
      if (SQLCA.VAGen_SQLCODE != -911)
        PKZREC.PKZFUNC = "C1";
        PK06125();
      end
    else
      if (PK06W01.PK06WWD1 == 0) /* since order not on hold do ONLY*/
                                   /* if rel date NOT input in pk06m100*/

         /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
                      /* LOAD WORKING STORAGE ARRAY                   **/
         /* if we made it this far all selections have passed and we  **/
         /* have a record to place in the pk06w04 array.              **/
         /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
        PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
        PK06W04.PK06WCNT = PK06W04.PK06WCNT + 1;
        PK06W04.PK4ORHLD[PK06WIX4] = PK4REC.PK4ORHLD;
        if (PK4REC.PK4ORHLD == "Y")
          if (PK06M100.PK06MARL == "Y")
            PK06W04.PK06WSEL[PK06WIX4] = "R";
          end
        else
          if (PK06M100.PK06MAHD == "Y")
            PK06W04.PK06WSEL[PK06WIX4] = "H";
          end
        end
        PK06W04.PK1CUOID[PK06WIX4] = PK4REC.PK1CUOID;
        PK06W04.PK1NORID[PK06WIX4] = PK4REC.PK1NORID;
        PK06W04.XOTCD[PK06WIX4] = PK4REC.XOTCD;
        PK06W04.XBCCD[PK06WIX4] = PK4REC.XBCCD;
        PK06W04.KUCCOID[PK06WIX4] = PK4REC.KUCCOID;
        PK06W04.KUMSTRID[PK06WIX4] = PK4REC.KUMSTRID;
        PK06W04.XNXCD[PK06WIX4] = PK4REC.XNXCD;
        PK06W04.TF1CARCD[PK06WIX4] = PK4REC.TF1CARCD;
        PK06W04.OP1DSBDT[PK06WIX4] = PK4REC.OP1DSBDT;
        PK06W04.PK4OTUNT[PK06WIX4] = PK4REC.PK4OTUNT;
        if (PK4REC.PK4PLNDT > 0)
          PK06W04.PK06WPLF[PK06WIX4] = "*";
        end

         /* get store short name*/
        if (PK4REC.KUCCOID != PK6REC.KUCCOID
         || PK4REC.KUMSTRID != PK6REC.KUMSTRID)
          set PK6REC empty;
          PK6REC.KUCCOID = PK4REC.KUCCOID;
          PK6REC.KUMSTRID = PK4REC.KUMSTRID;
          PK06127();
          if (VAGen_SQLCODE != 0)
            PK6REC.KUMSTSNM = "UNKN";
          end
        end
        PK06W04.PK06WSNM[PK06WIX4] = PK6REC.KUMSTSNM;
      end
    end
  end

  if (PK06W01.PK06WERS != "Y")
    if (PK06W04.PK06WCNT >= PK06W04.PK06WMAX)
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(304);
    else
      PWIREC.PWIFUNC = "N2";
      PK06121(); /* fetch next vpoolh01(n2)*/
    end
  end

   /* ------ end: pk06131 - move cust vpoolh01 to array ----------*/
end // end PK06131

// move cust holds to array
Function PK06132()
   /* -------------- pk06132 - load holds by release date -----*/

  PK06W01.PK06WSEL = "Y";

  if (PK06W01.PK06WWD1 != 0)
    if (PK06W01.PK06WWD2 != 0)
      if (PK06W01.PK06WWD1 > PKBREC.PKBRELDT
       || PK06W01.PK06WWD2 < PKBREC.PKBRELDT)
        PK06W01.PK06WSEL = "N";
      end
    else
      if (PK06W01.PK06WWD1 > PKBREC.PKBRELDT)
        PK06W01.PK06WSEL = "N";
      end
    end
  end


  if (PK06M100.XHRCD != " "
   && PKBREC.XHRCD != PK06M100.XHRCD)
    PK06W01.PK06WSEL = "N";
  end

  if (PK06W01.PK06WSEL == "Y"
   && PK06W01.PK06WERS != "Y")
     /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
                  /* LOAD WORKING STORAGE ARRAY                   **/
     /* if we made it this far all selections have passed and we  **/
     /* have a record to place in the pk06w04 array.              **/
     /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
    PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
    PK06W04.PK06WCNT = PK06W04.PK06WCNT + 1;
    PK06W04.PK4ORHLD[PK06WIX4] = PK4REC.PK4ORHLD;
    if (PK4REC.PK4ORHLD == "Y")
      if (PK06M100.PK06MARL == "Y")
        PK06W04.PK06WSEL[PK06WIX4] = "R";
      end
    else
      if (PK06M100.PK06MAHD == "Y")
        PK06W04.PK06WSEL[PK06WIX4] = "H";
      end
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      PK06W04.XHRCD[PK06WIX4] = PKBREC.XHRCD;
    else
      PK06W04.XHRCD[PK06WIX4] = "??";
    end
    PK06W04.PKBRELDT[PK06WIX4] = PKBREC.PKBRELDT;
    PK06W04.PK1CUOID[PK06WIX4] = PK4REC.PK1CUOID;
    PK06W04.PK1NORID[PK06WIX4] = PK4REC.PK1NORID;
    PK06W04.XOTCD[PK06WIX4] = PK4REC.XOTCD;
    PK06W04.XBCCD[PK06WIX4] = PK4REC.XBCCD;
    PK06W04.KUCCOID[PK06WIX4] = PK4REC.KUCCOID;
    PK06W04.KUMSTRID[PK06WIX4] = PK4REC.KUMSTRID;
    PK06W04.XNXCD[PK06WIX4] = PK4REC.XNXCD;
    PK06W04.TF1CARCD[PK06WIX4] = PK4REC.TF1CARCD;
    PK06W04.OP1DSBDT[PK06WIX4] = PK4REC.OP1DSBDT;
    PK06W04.PK4OTUNT[PK06WIX4] = PK4REC.PK4OTUNT;
    if (PK4REC.PK4PLNDT > 0)
      PK06W04.PK06WPLF[PK06WIX4] = "*";
    end

     /* get store short name*/
    set PK6REC empty;
    PK6REC.KUCCOID = PK4REC.KUCCOID;
    PK6REC.KUMSTRID = PK4REC.KUMSTRID;
    PK06127();
    if (VAGen_SQLCODE == 0)
      PK06W04.PK06WSNM[PK06WIX4] = PK6REC.KUMSTSNM;
    else
      PK06W04.PK06WSNM[PK06WIX4] = "UNKN";
    end

  end

  if (SQLCA.VAGen_SQLCODE == 0)
    /* get hold reason codes*/
    PKZREC.PKZFUNC = "N1";
    PK06125(); /* select nxt dpick.vorhld01*/
  else
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2"; /* Type of error*/
    TA1REC.TA1PGMNM = "PK06132 "; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE            ";
    TA1REC.TA1MAP = "PK06M100"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKBREC.PKBKEY;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  end

   /* --------- end: pk06132 - load holds by release date -----*/
end // end PK06132

// load by style
Function PK06140()
   /* -------- pk06140 - load by style  --------------------------*/

  PK06M100.XXXERRID = "PK06140";


  set PKPREC empty;
  PKPREC.XWHCD = PK06M100.XWHCD;
  PKPREC.XGPCD = PK06M100.XGPCD;
  PKPREC.SY1STNBR = PK06M100.SY1STNBR;
  PKPREC.SY2CLRID = PK06M100.SY2CLRID;
  PKPREC.XDMCD = PK06M100.XDMCD;
  PKPREC.PC2INSEG = "*";
  PKPREC.XEGCD = "*";
  PKPREC.XPGCD = "*";
  PKPREC.XUMCD = "*";
  PKPREC.XOWCD = "*";
  PKPREC.XQACD = "*";

  PK06141(); /* open set and fetch first rec(io1870)*/
  if (SQLCA.VAGen_SQLCODE == 100)
    PK06W01.PK06WERS = "Y";
    converseLib.validationFailed(11);
    set PK06M100.XGPCD cursor, bold;
    set PK06M100.SY1STNBR bold;
    set PK06M100.SY2CLRID bold;
    set PK06M100.XDMCD bold;
  else
    if (PKPREC.XBCCD == " ") /* no brand on pool record*/
  /* next sentence                      /*   skip around*/
    else
      if (PK06M100.XBCCD == " ") /* no brand on map*/
        PK06M100.XBCCD = PKPREC.XBCCD; /* use the pkp brand*/
      else
        if (PKPREC.XBCCD != PK06M100.XBCCD) /* pkp brand ne map brand*/
          PK06M100.VAGen_EZEMSG = "BRAND CODE ON MAP OVERRIDDEN BY BRAND CODE FROM POOL HDR"; /* override the map*/
          PK06M100.XBCCD = PKPREC.XBCCD;
        end
      end
    end
  end

  while (SQLCA.VAGen_SQLCODE == +0
   && PK06W01.PK06WERS != "Y")
    PK06143(); /* load working storage*/
  end

  if (SQLCA.VAGen_SQLCODE != -911)
    PK06145();
  end

   /* ----end: pk06140 - load by style  --------------------------*/
end // end PK06140

// select set(s1) dpick.vpoolh02
Function PK06141()
   /* ----------- pk06141 - select set dpick.vpoolh02 ---------*/


  PK06M100.XXXERRID = "PK06141";
  PK06M300.XXXERRID = "PK06141";

  call "IO1870" ("S1", SQLCA, PKPREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    PK06142(); /* fetch next dpick.vpoolh02*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* contention for data base resorce*/
      PK06W01.PK06WERS = "Y";
    else
      converseLib.validationFailed(29); /* fatal error*/
      PK06W01.PK06WERS = "Y";
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PK06141 "; /* Process name*/
      TA1REC.TA1LOC = "OPEN   SET(S1)        ";
      TA1REC.TA1MAP = "PK06M100"; /* Map name*/
      TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPOOLH02"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    end
  end

   /* -------------  end process pk06141  --------------------*/
end // end PK06141

// select nxt(n1) dpick.vpoolh02
Function PK06142()
   /* ----------- pk06142 - select set dpick.vpoolh02 ---------*/

  PK06M100.XXXERRID = "PK06142";
  PK06M300.XXXERRID = "PK06142";

  call "IO1870" ("N1", SQLCA, PKPREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != +0
   && SQLCA.VAGen_SQLCODE != +100)
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* contention for data base resorce*/
      PK06W01.PK06WERS = "Y";
    else
      converseLib.validationFailed(29); /* fatal error*/
      PK06W01.PK06WERS = "Y";
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PK06142 "; /* Process name*/
      TA1REC.TA1LOC = "SELECT SET(N1)        ";
      TA1REC.TA1MAP = "PK06M100"; /* Map name*/
      TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPOOLH02"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    end
  end

   /* -------------  end process pk06142  --------------------*/
end // end PK06142

// move sty/vpoolh01 to array
Function PK06143()
   /* -------------- pk06143 - move data to array ----------------*/

  set PK4REC empty;
  set PKBREC empty;
  set PKZREC empty;
  set PWIREC empty;
  PK4REC.XWHCD = PKPREC.XWHCD;
  PK4REC.PK1CUOID = PKPREC.PK1CUOID;
  PK4REC.PK1NORID = PKPREC.PK1NORID;
  PWIREC.PWIFUNC = "S ";
  PK06121(); /* select unique vpoolh01*/
  if (PK06W01.PK06WERS != "Y")
    PK06123(); /* screen pool data for selection*/
    if (PK06W01.PK06WSEL == "Y")
      PK06124(); /* format release date*/
      if (PK4REC.PK4ORHLD == "Y")
        PKZREC.PKZFUNC = "S1";
        PKBREC.XWHCD = PK4REC.XWHCD;
        PKBREC.PK1CUOID = PK4REC.PK1CUOID;
        PKBREC.PK1NORID = PK4REC.PK1NORID;
        PK06125(); /* select dpick.vorhld01*/
        if (SQLCA.VAGen_SQLCODE == 0
         && PK06W01.PK06WERS != "Y")
          PKZREC.PKZFUNC = "N1";
          PK06125(); /* select nxt dpick.vorhld01*/
        end
        if (SQLCA.VAGen_SQLCODE == 100)
          PK06144();
        else
          while (SQLCA.VAGen_SQLCODE == 0)
            PK06144();
          end
        end
        if (SQLCA.VAGen_SQLCODE == -911)
          return;
        else
          PKZREC.PKZFUNC = "C1";
          PK06125();
          PK06W01.PK06WSEL = "N";
        end
      else
        if (PK06W01.PK06WWD1 == 0) /* order not on hold*/

           /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
                        /* LOAD WORKING STORAGE ARRAY                   **/
           /* if we made it this far all selections have passed and we  **/
           /* have a record to place in the pk06w04 array.              **/
           /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
          PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
          PK06W04.PK06WCNT = PK06W04.PK06WCNT + 1;
          PK06W04.PK1CUOID[PK06WIX4] = PK4REC.PK1CUOID;
          PK06W04.PK1NORID[PK06WIX4] = PK4REC.PK1NORID;
          PK06W04.PK4ORHLD[PK06WIX4] = PK4REC.PK4ORHLD;
          if (PK4REC.PK4ORHLD == "Y")
            if (PK06M100.PK06MARL == "Y")
              PK06W04.PK06WSEL[PK06WIX4] = "R";
            end
          else
            if (PK06M100.PK06MAHD == "Y")
              PK06W04.PK06WSEL[PK06WIX4] = "H";
            end
          end
          PK06W04.XOTCD[PK06WIX4] = PK4REC.XOTCD;
          PK06W04.XBCCD[PK06WIX4] = PK4REC.XBCCD;
          PK06W04.KUCCOID[PK06WIX4] = PK4REC.KUCCOID;
          PK06W04.KUMSTRID[PK06WIX4] = PK4REC.KUMSTRID;
          PK06W04.XNXCD[PK06WIX4] = PK4REC.XNXCD;
          PK06W04.TF1CARCD[PK06WIX4] = PK4REC.TF1CARCD;
          PK06W04.OP1DSBDT[PK06WIX4] = PK4REC.OP1DSBDT;
          PK06W04.PK4OTUNT[PK06WIX4] = PK4REC.PK4OTUNT;
          if (PK4REC.PK4PLNDT > 0)
            PK06W04.PK06WPLF[PK06WIX4] = "*";
          end

           /* get store short name*/
          set PK6REC empty;
          PK6REC.KUCCOID = PK4REC.KUCCOID;
          PK6REC.KUMSTRID = PK4REC.KUMSTRID;
          PK06127();
          if (VAGen_SQLCODE == 0)
            PK06W04.PK06WSNM[PK06WIX4] = PK6REC.KUMSTSNM;
          else
            PK06W04.PK06WSNM[PK06WIX4] = "UNKN";
          end

        end
      end
    end
  end


  if (PK06W04.PK06WCNT >= PK06W04.PK06WMAX)
    PK06M100.XXXERRID = "PK06143";
    PK06M300.XXXERRID = "PK06143";
    PK06W01.PK06WERS = "Y";
    converseLib.validationFailed(304);
  else
    PK06142(); /* select next vpoolh02*/
  end

   /* ---------- end of pk06143 - move data to array -------------*/

end // end PK06143

// screen hold rlse dates
Function PK06144()
   /* -------------- pk06144 - screen holds for release date -----*/

  PK06W01.PK06WSEL = "Y";

  if (PK06W01.PK06WWD1 != 0)
    if (PK06W01.PK06WWD2 != 0)
      if (PK06W01.PK06WWD1 > PKBREC.PKBRELDT
       || PK06W01.PK06WWD2 < PKBREC.PKBRELDT)
        PK06W01.PK06WSEL = "N";
      end
    else
      if (PK06W01.PK06WWD1 > PKBREC.PKBRELDT)
        PK06W01.PK06WSEL = "N";
      end
    end
  end

  if (PK06M100.XHRCD != " "
   && PK06M100.XHRCD != PKBREC.XHRCD)
    PK06W01.PK06WSEL = "N";
  end

  if (PK06W01.PK06WSEL == "Y"
   && PK06W01.PK06WERS != "Y")
     /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
                  /* LOAD WORKING STORAGE ARRAY                   **/
     /* if we made it this far all selections have passed and we  **/
     /* have a record to place in the pk06w04 array.              **/
     /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
    PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
    PK06W04.PK06WCNT = PK06W04.PK06WCNT + 1;
    PK06W04.PK1CUOID[PK06WIX4] = PK4REC.PK1CUOID;
    PK06W04.PK1NORID[PK06WIX4] = PK4REC.PK1NORID;
    PK06W04.PK4ORHLD[PK06WIX4] = PK4REC.PK4ORHLD;
    if (PK4REC.PK4ORHLD == "Y")
      if (PK06M100.PK06MARL == "Y")
        PK06W04.PK06WSEL[PK06WIX4] = "R";
      end
    else
      if (PK06M100.PK06MAHD == "Y")
        PK06W04.PK06WSEL[PK06WIX4] = "H";
      end
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      PK06W04.XHRCD[PK06WIX4] = PKBREC.XHRCD;
    else
      PK06W04.XHRCD[PK06WIX4] = "??";
    end
    PK06W04.PKBRELDT[PK06WIX4] = PKBREC.PKBRELDT;
    PK06W04.XOTCD[PK06WIX4] = PK4REC.XOTCD;
    PK06W04.XBCCD[PK06WIX4] = PK4REC.XBCCD;
    PK06W04.KUCCOID[PK06WIX4] = PK4REC.KUCCOID;
    PK06W04.KUMSTRID[PK06WIX4] = PK4REC.KUMSTRID;
    PK06W04.XNXCD[PK06WIX4] = PK4REC.XNXCD;
    PK06W04.TF1CARCD[PK06WIX4] = PK4REC.TF1CARCD;
    PK06W04.OP1DSBDT[PK06WIX4] = PK4REC.OP1DSBDT;
    PK06W04.PK4OTUNT[PK06WIX4] = PK4REC.PK4OTUNT;
    if (PK4REC.PK4PLNDT > 0)
      PK06W04.PK06WPLF[PK06WIX4] = "*";
    end

     /* get store short name*/
    set PK6REC empty;
    PK6REC.KUCCOID = PK4REC.KUCCOID;
    PK6REC.KUMSTRID = PK4REC.KUMSTRID;
    PK06127();
    if (VAGen_SQLCODE == 0)
      PK06W04.PK06WSNM[PK06WIX4] = PK6REC.KUMSTSNM;
    else
      PK06W04.PK06WSNM[PK06WIX4] = "UNKN";
    end

  end

  if (SQLCA.VAGen_SQLCODE == 0)
    /* get hold reason codes*/
    PKZREC.PKZFUNC = "N1";
    PK06125(); /* select nxt dpick.vorhld01*/
  else
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2"; /* Type of error*/
    TA1REC.TA1PGMNM = "PK06144 "; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE            ";
    TA1REC.TA1MAP = "PK06M100"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKBREC.PKBKEY;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  end

   /* ---------- end of pk06144 - move data to array -------------*/
end // end PK06144

// close  set(c1) dpick.vpoolh02
Function PK06145()
   /* ----------- pk06145 - select set dpick.vpoolh02 ---------*/

  PK06M100.XXXERRID = "PK06145";
  PK06M300.XXXERRID = "PK06145";

  call "IO1870" ("C1", SQLCA, PKPREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != +0)
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* contention for data base resorce*/
      PK06W01.PK06WERS = "Y";
    else
      converseLib.validationFailed(29); /* fatal error*/
      PK06W01.PK06WERS = "Y";
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PK06145 "; /* Process name*/
      TA1REC.TA1LOC = "CLOSE  SET(C1)        ";
      TA1REC.TA1MAP = "PK06M100"; /* Map name*/
      TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPOOLH02"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    end
  end

   /* -------------  end process pk06145  --------------------*/
end // end PK06145

// load by sp1cd
Function PK06150()
   /* -------- pk06150 - load by spgm ---------------------------*/

  PK06M100.XXXERRID = "PK06150";

  set PWIREC empty;
  set PK4REC empty;
  PK4REC.XWHCD = PK06M100.XWHCD;
  PK4REC.SP1ID = PK06M100.SP1ID;
  PWIREC.PWIFUNC = "S1";
  PK06121(); /* open set and fetch first rec*/
  PWIREC.PWIFUNC = "N1";
  PK06121(); /* open set and fetch first rec*/
  if (SQLCA.VAGen_SQLCODE == 100)
    PK06W01.PK06WERS = "Y";
    converseLib.validationFailed(11);
    set PK06M100.SP1ID cursor, bold;
  else
    if (PK4REC.XBCCD == " ") /* no brand on pool record*/
  /* next sentence                      /*   skip around*/
    else
      if (PK06M100.XBCCD == " ") /* no brand on map*/
        PK06M100.XBCCD = PK4REC.XBCCD; /* use the pk4 brand*/
      else
        if (PK4REC.XBCCD != PK06M100.XBCCD) /* pk4 brand ne map brand*/
          PK06M100.VAGen_EZEMSG = "BRAND CODE ON MAP OVERRIDDEN BY BRAND CODE FROM POOL HDR"; /* override the map*/
          PK06M100.XBCCD = PK4REC.XBCCD;
        end
      end
    end
  end

  while (SQLCA.VAGen_SQLCODE == +0
   && PK06W01.PK06WERS != "Y")
    PK06151(); /* load working storage*/
  end

  if (SQLCA.VAGen_SQLCODE != -911)
    PWIREC.PWIFUNC = "C1";
    PK06121(); /* close set*/
  end
end // end PK06150

// move 'sp1cd' data to array
Function PK06151()
   /* -------------- pk06151 - move data to array ----------------*/

  PK06123(); /* screen pool data for selection*/

  if (PK06W01.PK06WSEL == "Y")
    PK06124();
    if (PK4REC.PK4ORHLD == "Y")
      PKZREC.PKZFUNC = "S1";
      PKBREC.XWHCD = PK4REC.XWHCD;
      PKBREC.PK1CUOID = PK4REC.PK1CUOID;
      PKBREC.PK1NORID = PK4REC.PK1NORID;
      PK06125(); /* select dpick.vorhld01*/
      if (SQLCA.VAGen_SQLCODE == 0
       && PK06W01.PK06WERS != "Y")
        PKZREC.PKZFUNC = "N1";
        PK06125(); /* select nxt dpick.vorhld01*/
      end
      if (SQLCA.VAGen_SQLCODE == 100)
        PK06152();
      else
        while (SQLCA.VAGen_SQLCODE == 0)
          PK06152();
        end
      end
      if (SQLCA.VAGen_SQLCODE != -911)
        PKZREC.PKZFUNC = "C1";
        PK06125();
      end
    else

      if (PK06W01.PK06WWD1 == 0)
         /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
                      /* LOAD WORKING STORAGE ARRAY                   **/
         /* if we made it this far all selections have passed and we  **/
         /* have a record to place in the pk06w04 array.              **/
         /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
        PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
        PK06W04.PK06WCNT = PK06W04.PK06WCNT + 1;
        PK06W04.PK4ORHLD[PK06WIX4] = PK4REC.PK4ORHLD;
        if (PK4REC.PK4ORHLD == "Y")
          if (PK06M100.PK06MARL == "Y")
            PK06W04.PK06WSEL[PK06WIX4] = "R";
          end
        else
          if (PK06M100.PK06MAHD == "Y")
            PK06W04.PK06WSEL[PK06WIX4] = "H";
          end
        end
        PK06W04.PK1CUOID[PK06WIX4] = PK4REC.PK1CUOID;
        PK06W04.PK1NORID[PK06WIX4] = PK4REC.PK1NORID;
        PK06W04.XOTCD[PK06WIX4] = PK4REC.XOTCD;
        PK06W04.XBCCD[PK06WIX4] = PK4REC.XBCCD;
        PK06W04.KUCCOID[PK06WIX4] = PK4REC.KUCCOID;
        PK06W04.KUMSTRID[PK06WIX4] = PK4REC.KUMSTRID;
        PK06W04.XNXCD[PK06WIX4] = PK4REC.XNXCD;
        PK06W04.TF1CARCD[PK06WIX4] = PK4REC.TF1CARCD;
        PK06W04.OP1DSBDT[PK06WIX4] = PK4REC.OP1DSBDT;
        PK06W04.PK4OTUNT[PK06WIX4] = PK4REC.PK4OTUNT;
        if (PK4REC.PK4PLNDT > 0)
          PK06W04.PK06WPLF[PK06WIX4] = "*";
        end

         /* get store short name*/
        if (PK4REC.KUCCOID != PK6REC.KUCCOID
         || PK4REC.KUMSTRID != PK6REC.KUMSTRID)
          set PK6REC empty;
          PK6REC.KUCCOID = PK4REC.KUCCOID;
          PK6REC.KUMSTRID = PK4REC.KUMSTRID;
          PK06127();
          if (VAGen_SQLCODE != 0)
            PK6REC.KUMSTSNM = "UNKN";
          end
        end
        PK06W04.PK06WSNM[PK06WIX4] = PK6REC.KUMSTSNM;

      end
    end
  end

  if (PK06W01.PK06WERS != "Y")
    if (PK06W04.PK06WCNT >= PK06W04.PK06WMAX)
      PK06M100.XXXERRID = "PK06151";
      PK06M300.XXXERRID = "PK06151";
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(304);
    else
      PWIREC.PWIFUNC = "N1";
      PK06121(); /* fetch next vpoolh01(n3)*/
    end
  end

   /* ---------- end of pk06151 - move data to array -------------*/
end // end PK06151

// screen hold rlse dates
Function PK06152()
   /* -------------- pk06152 - screen holds for release date -----*/

  PK06W01.PK06WSEL = "Y";

  if (PK06W01.PK06WWD1 != 0)
    if (PK06W01.PK06WWD2 != 0)
      if (PK06W01.PK06WWD1 > PKBREC.PKBRELDT
       || PK06W01.PK06WWD2 < PKBREC.PKBRELDT)
        PK06W01.PK06WSEL = "N";
      end
    else
      if (PK06W01.PK06WWD1 > PKBREC.PKBRELDT)
        PK06W01.PK06WSEL = "N";
      end
    end
  end

  if (PK06M100.XHRCD != " "
   && PK06M100.XHRCD != PKBREC.XHRCD)
    PK06W01.PK06WSEL = "N";
  end

  if (PK06W01.PK06WSEL == "Y"
   && PK06W01.PK06WERS != "Y")
     /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
                  /* LOAD WORKING STORAGE ARRAY                   **/
     /* if we made it this far all selections have passed and we  **/
     /* have a record to place in the pk06w04 array.              **/
     /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
    PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
    PK06W04.PK06WCNT = PK06W04.PK06WCNT + 1;
    PK06W04.PK4ORHLD[PK06WIX4] = PK4REC.PK4ORHLD;
    if (PK4REC.PK4ORHLD == "Y")
      if (PK06M100.PK06MARL == "Y")
        PK06W04.PK06WSEL[PK06WIX4] = "R";
      end
    else
      if (PK06M100.PK06MAHD == "Y")
        PK06W04.PK06WSEL[PK06WIX4] = "H";
      end
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      PK06W04.XHRCD[PK06WIX4] = PKBREC.XHRCD;
    else
      PK06W04.XHRCD[PK06WIX4] = "??";
    end
    PK06W04.PKBRELDT[PK06WIX4] = PKBREC.PKBRELDT;
    PK06W04.PK1CUOID[PK06WIX4] = PK4REC.PK1CUOID;
    PK06W04.PK1NORID[PK06WIX4] = PK4REC.PK1NORID;
    PK06W04.XOTCD[PK06WIX4] = PK4REC.XOTCD;
    PK06W04.XBCCD[PK06WIX4] = PK4REC.XBCCD;
    PK06W04.KUCCOID[PK06WIX4] = PK4REC.KUCCOID;
    PK06W04.KUMSTRID[PK06WIX4] = PK4REC.KUMSTRID;
    PK06W04.XNXCD[PK06WIX4] = PK4REC.XNXCD;
    PK06W04.TF1CARCD[PK06WIX4] = PK4REC.TF1CARCD;
    PK06W04.OP1DSBDT[PK06WIX4] = PK4REC.OP1DSBDT;
    PK06W04.PK4OTUNT[PK06WIX4] = PK4REC.PK4OTUNT;
    if (PK4REC.PK4PLNDT > 0)
      PK06W04.PK06WPLF[PK06WIX4] = "*";
    end

     /* get store short name*/
    if (PK4REC.KUCCOID != PK6REC.KUCCOID
     || PK4REC.KUMSTRID != PK6REC.KUMSTRID)
      set PK6REC empty;
      PK6REC.KUCCOID = PK4REC.KUCCOID;
      PK6REC.KUMSTRID = PK4REC.KUMSTRID;
      PK06127();
      if (VAGen_SQLCODE == 0)
        PK6REC.KUMSTSNM = "UNKN";
      end
    end
    PK06W04.PK06WSNM[PK06WIX4] = PK6REC.KUMSTSNM;

  end

  if (SQLCA.VAGen_SQLCODE == 0)
    /* get hold reason codes*/
    PKZREC.PKZFUNC = "N1";
    PK06125(); /* select nxt dpick.vorhld01*/
  else
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2"; /* Type of error*/
    TA1REC.TA1PGMNM = "PK06152 "; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE            ";
    TA1REC.TA1MAP = "PK06M100"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKBREC.PKBKEY;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  end

   /* ---------- end of pk06152 - move data to array -------------*/
end // end PK06152

// load by hold code/rel date
Function PK06160()
   /* -------- pk06160 - load by hold code & rlse date -----------*/

  PK06M100.XXXERRID = "PK06160";

  set PKZREC empty;
  set PKBREC empty;
  PKZREC.PKZFUNC = "S2";
  PKBREC.XWHCD = PK06M100.XWHCD;
  if (PK06M100.XHRCD != " ")
    PKBREC.XHRCD = PK06M100.XHRCD;
  else
    PKBREC.XHRCD = "*";
  end

  if (PK06M100.PK06MRFM == 99)
    PKBREC.PKBRELDT = 999999999;
  else
    PKBREC.PKBRELDT = -1;
  end

  PKBREC.PKBPLRDT = -1;

  PK06125(); /* open set dpick.vorhold01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    PKZREC.PKZFUNC = "N2";
    PK06125(); /* fetch next dpick.vorhold01*/
    if (SQLCA.VAGen_SQLCODE == 100)
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(11);
      if (PK06M100.XHRCD != " ")
        set PK06M100.XHRCD cursor, bold;
      else
        set PK06M100.PK06MRFM cursor, bold;
        set PK06M100.PK06MRFD cursor;
        set PK06M100.PK06MRFY cursor;
      end
    else
      while (SQLCA.VAGen_SQLCODE == +0
       && PK06W01.PK06WERS != "Y")
        PK06165(); /* load working storage*/
      end
    end
  end


  if (PK06M100.XBCCD != " ") /* brand code entered ?*/
    PK06M100.XBCCD = " "; /* erase it*/
    PK06M100.VAGen_EZEMSG = "BRAND CODE NOT APPLICABLE WITH HOLD CODE OPTION";
  end


  if (SQLCA.VAGen_SQLCODE != -911)
    PKZREC.PKZFUNC = "C2";
    PK06125();
  end

   /* -- end - pk06160 - load by hold code & rlse date -----------*/
end // end PK06160

// move data to array
Function PK06165()
   /* -------------- pk06165 - move data to array ----------------*/


  PK06W01.PK06WSEL = "Y";
  PK06124();

  if (PK06W01.PK06WWD1 != 0)
    if (PK06W01.PK06WWD2 != 0)
      if (PK06W01.PK06WWD1 > PKBREC.PKBRELDT
       || PK06W01.PK06WWD2 < PKBREC.PKBRELDT)
        PK06W01.PK06WSEL = "N";
      end
    else
      if (PK06W01.PK06WWD1 > PKBREC.PKBRELDT)
        PK06W01.PK06WSEL = "N";
      end
    end
  end

  if (PK06M100.XHRCD != " "
   && PK06M100.XHRCD != PKBREC.XHRCD)
    PK06W01.PK06WSEL = "N";
  end

  if (PK06W01.PK06WSEL == "Y")
    set PWIREC empty;
    set PK4REC empty;
    PK4REC.XWHCD = PKBREC.XWHCD;
    PK4REC.PK1CUOID = PKBREC.PK1CUOID;
    PK4REC.PK1NORID = PKBREC.PK1NORID;
    PWIREC.PWIFUNC = "S ";
    PK06121(); /* select unique vpoolh01*/
    if (PK06W01.PK06WERS != "Y")
      PK06123(); /* screen pool data for selection*/
    end
    if (PK06W01.PK06WSEL == "Y"
     && PK06W01.PK06WERS != "Y")
       /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
                    /* LOAD WORKING STORAGE ARRAY                   **/
       /* if we made it this far all selections have passed and we  **/
       /* have a record to place in the pk06w04 array.              **/
       /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
      PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
      PK06W04.PK06WCNT = PK06W04.PK06WCNT + 1;
      PK06W04.PK1CUOID[PK06WIX4] = PK4REC.PK1CUOID;
      PK06W04.PK1NORID[PK06WIX4] = PK4REC.PK1NORID;
      PK06W04.PK4ORHLD[PK06WIX4] = PK4REC.PK4ORHLD;
      if (PK4REC.PK4ORHLD == "Y")
        if (PK06M100.PK06MARL == "Y")
          PK06W04.PK06WSEL[PK06WIX4] = "R";
        end
      else
        if (PK06M100.PK06MAHD == "Y")
          PK06W04.PK06WSEL[PK06WIX4] = "H";
        end
      end
      PK06W04.XOTCD[PK06WIX4] = PK4REC.XOTCD;
      PK06W04.XBCCD[PK06WIX4] = PK4REC.XBCCD;
      PK06W04.KUCCOID[PK06WIX4] = PK4REC.KUCCOID;
      PK06W04.KUMSTRID[PK06WIX4] = PK4REC.KUMSTRID;
      PK06W04.XNXCD[PK06WIX4] = PK4REC.XNXCD;
      PK06W04.TF1CARCD[PK06WIX4] = PK4REC.TF1CARCD;
      PK06W04.OP1DSBDT[PK06WIX4] = PK4REC.OP1DSBDT;
      PK06W04.PK4OTUNT[PK06WIX4] = PK4REC.PK4OTUNT;
      if (PK4REC.PK4PLNDT > 0)
        PK06W04.PK06WPLF[PK06WIX4] = "*";
      end

      if (PK4REC.KUCCOID == 0)
        PK06W04.PK06WSNM[PK06WIX4] = "NOT IN POOL";
      else
         /* get store short name*/
        set PK6REC empty;
        PK6REC.KUCCOID = PK4REC.KUCCOID;
        PK6REC.KUMSTRID = PK4REC.KUMSTRID;
        PK06127();
        if (VAGen_SQLCODE == 0)
          PK06W04.PK06WSNM[PK06WIX4] = PK6REC.KUMSTSNM;
        else
          PK06W04.PK06WSNM[PK06WIX4] = "UNKN";
        end
      end

      /* get hold reason codes*/
      PK06W04.XHRCD[PK06WIX4] = PKBREC.XHRCD;
      PK06W04.PKBRELDT[PK06WIX4] = PKBREC.PKBRELDT;

    end

  end

  if (PK06W04.PK06WCNT >= PK06W04.PK06WMAX)
    PK06M100.XXXERRID = "PK06165";
    PK06M300.XXXERRID = "PK06165";
    PK06W01.PK06WERS = "Y";
    converseLib.validationFailed(304);
  else
    PKZREC.PKZFUNC = "N2";
    PK06125(); /* select next vorhld01*/
  end

   /* ---------- end of pk06165 - move data to array -------------*/
end // end PK06165

// load by carrier/dates etc
Function PK06170()
   /* -------- pk06170 - load by carr-etc ------------------------*/

  PK06M100.XXXERRID = "PK06170";

  set PWIREC empty;
  set PK4REC empty;
  PK4REC.XWHCD = PK06M100.XWHCD;
  if (PK06M100.TF1CARCD == " ")
    PK4REC.TF1CARCD = "*";
  else
    PK4REC.TF1CARCD = PK06M100.TF1CARCD;
  end

  PWIREC.OP1CUNDT[1] = PK06W01.OP1CUNDT[1];
  PWIREC.OP1CUNDT[2] = PK06W01.OP1CUNDT[2];
  PWIREC.OP1DSBDT[1] = PK06W01.OP1DSBDT[1];
  PWIREC.OP1DSBDT[2] = PK06W01.OP1DSBDT[2];
  PWIREC.PK4PLNDT[1] = -1;
  PWIREC.PK4PLNDT[2] = 999999999;

  PWIREC.PWIFUNC = "S5";
  PK06121(); /* open set   dpick.vpoolh01*/
  PWIREC.PWIFUNC = "N5";
  PK06121(); /* fetch next*/
  if (SQLCA.VAGen_SQLCODE == 100)
    PK06W01.PK06WERS = "Y";
    converseLib.validationFailed(11);
    if (PK06M100.TF1CARCD != " ")
      set PK06M100.TF1CARCD cursor, bold;
    else
      set PK06M100.PK06MNFM cursor, bold;
      set PK06M100.PK06MNFD bold;
      set PK06M100.PK06MNFY bold;
      set PK06M100.PK06MNTM bold;
      set PK06M100.PK06MNTD bold;
      set PK06M100.PK06MNTY bold;
      set PK06M100.PK06MDFM bold;
      set PK06M100.PK06MDFD bold;
      set PK06M100.PK06MDFY bold;
      set PK06M100.PK06MDTM bold;
      set PK06M100.PK06MDTD bold;
      set PK06M100.PK06MDTY bold;
    end
  end

  while (SQLCA.VAGen_SQLCODE == +0
   && PK06W01.PK06WERS != "Y")
    PK06171(); /* load working storage*/
  end


  if (PK06M100.XBCCD != " ") /* brand code entered ?*/
    PK06M100.XBCCD = " "; /* erase it*/
    PK06M100.VAGen_EZEMSG = "BRAND CODE NOT APPLICABLE WITH CARRIER OPTION";
  end

  if (SQLCA.VAGen_SQLCODE != -911)
    PWIREC.PWIFUNC = "C5";
    PK06121(); /* close set*/
  end
end // end PK06170

// move carrier/dates to array
Function PK06171()
   /* -------------- pk06171 - move data to array ----------------*/

  PK06123(); /* screen pool data for selection*/

  if (PK06W01.PK06WSEL == "Y")
    PK06124();
    if (PK4REC.PK4ORHLD == "Y")
      PKZREC.PKZFUNC = "S1";
      PKBREC.XWHCD = PK4REC.XWHCD;
      PKBREC.PK1CUOID = PK4REC.PK1CUOID;
      PKBREC.PK1NORID = PK4REC.PK1NORID;
      PK06125(); /* select dpick.vorhld01*/
      if (SQLCA.VAGen_SQLCODE == 0
       && PK06W01.PK06WERS != "Y")
        PKZREC.PKZFUNC = "N1";
        PK06125(); /* select nxt dpick.vorhld01*/
      end
      if (SQLCA.VAGen_SQLCODE == 100)
        PK06172(); /* load hold codes*/
      else
        while (SQLCA.VAGen_SQLCODE == 0)
          PK06172(); /* load hold codes*/
        end
      end
      if (SQLCA.VAGen_SQLCODE != -911)
        PKZREC.PKZFUNC = "C1";
        PK06125();
      end
    else

      if (PK06W01.PK06WWD1 == 0)
         /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
                      /* LOAD WORKING STORAGE ARRAY                   **/
         /* if we made it this far all selections have passed and we  **/
         /* have a record to place in the pk06w04 array.              **/
         /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
        PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
        PK06W04.PK06WCNT = PK06W04.PK06WCNT + 1;
        PK06W04.PK4ORHLD[PK06WIX4] = PK4REC.PK4ORHLD;
        if (PK4REC.PK4ORHLD == "Y")
          if (PK06M100.PK06MARL == "Y")
            PK06W04.PK06WSEL[PK06WIX4] = "R";
          end
        else
          if (PK06M100.PK06MAHD == "Y")
            PK06W04.PK06WSEL[PK06WIX4] = "H";
          end
        end
        PK06W04.PK1CUOID[PK06WIX4] = PK4REC.PK1CUOID;
        PK06W04.PK1NORID[PK06WIX4] = PK4REC.PK1NORID;
        PK06W04.XOTCD[PK06WIX4] = PK4REC.XOTCD;
        PK06W04.XBCCD[PK06WIX4] = PK4REC.XBCCD;
        PK06W04.KUCCOID[PK06WIX4] = PK4REC.KUCCOID;
        PK06W04.KUMSTRID[PK06WIX4] = PK4REC.KUMSTRID;
        PK06W04.XNXCD[PK06WIX4] = PK4REC.XNXCD;
        PK06W04.TF1CARCD[PK06WIX4] = PK4REC.TF1CARCD;
        PK06W04.OP1DSBDT[PK06WIX4] = PK4REC.OP1DSBDT;
        PK06W04.PK4OTUNT[PK06WIX4] = PK4REC.PK4OTUNT;
        if (PK4REC.PK4PLNDT > 0)
          PK06W04.PK06WPLF[PK06WIX4] = "*";
        end

         /* get store short name*/
        if (PK4REC.KUCCOID != PK6REC.KUCCOID
         || PK4REC.KUMSTRID != PK6REC.KUMSTRID)
          set PK6REC empty;
          PK6REC.KUCCOID = PK4REC.KUCCOID;
          PK6REC.KUMSTRID = PK4REC.KUMSTRID;
          PK06127();
          if (VAGen_SQLCODE != 0)
            PK6REC.KUMSTSNM = "UNKN";
          end
        end
        PK06W04.PK06WSNM[PK06WIX4] = PK6REC.KUMSTSNM;

      end
    end
  end

  if (PK06W01.PK06WERS != "Y")
    if (PK06W04.PK06WCNT >= PK06W04.PK06WMAX)
      PK06M100.XXXERRID = "PK06171";
      PK06M300.XXXERRID = "PK06171";
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(304);
    else
      PWIREC.PWIFUNC = "N5";
      PK06121(); /* fetch next vpoolh01(n5)*/
    end
  end

   /* ---------- end of pk06171 - move data to array -------------*/
end // end PK06171

// screen hold rlse dates
Function PK06172()
   /* -------------- pk06172 - screen holds for release date -----*/

  PK06W01.PK06WSEL = "Y";

  if (PK06W01.PK06WWD1 != 0)
    if (PK06W01.PK06WWD2 != 0)
      if (PK06W01.PK06WWD1 > PKBREC.PKBRELDT
       || PK06W01.PK06WWD2 < PKBREC.PKBRELDT)
        PK06W01.PK06WSEL = "N";
      end
    else
      if (PK06W01.PK06WWD1 > PKBREC.PKBRELDT)
        PK06W01.PK06WSEL = "N";
      end
    end
  end

  if (PK06M100.XHRCD != " "
   && PK06M100.XHRCD != PKBREC.XHRCD)
    PK06W01.PK06WSEL = "N";
  end

  if (PK06W01.PK06WSEL == "Y"
   && PK06W01.PK06WERS != "Y")
     /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
                  /* LOAD WORKING STORAGE ARRAY                   **/
     /* if we made it this far all selections have passed and we  **/
     /* have a record to place in the pk06w04 array.              **/
     /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
    PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
    PK06W04.PK06WCNT = PK06W04.PK06WCNT + 1;
    PK06W04.PK4ORHLD[PK06WIX4] = PK4REC.PK4ORHLD;
    if (PK4REC.PK4ORHLD == "Y")
      if (PK06M100.PK06MARL == "Y")
        PK06W04.PK06WSEL[PK06WIX4] = "R";
      end
    else
      if (PK06M100.PK06MAHD == "Y")
        PK06W04.PK06WSEL[PK06WIX4] = "H";
      end
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      PK06W04.XHRCD[PK06WIX4] = PKBREC.XHRCD;
    else
      PK06W04.XHRCD[PK06WIX4] = "??";
    end
    PK06W04.PKBRELDT[PK06WIX4] = PKBREC.PKBRELDT;
    PK06W04.PK1CUOID[PK06WIX4] = PK4REC.PK1CUOID;
    PK06W04.PK1NORID[PK06WIX4] = PK4REC.PK1NORID;
    PK06W04.XOTCD[PK06WIX4] = PK4REC.XOTCD;
    PK06W04.XBCCD[PK06WIX4] = PK4REC.XBCCD;
    PK06W04.KUCCOID[PK06WIX4] = PK4REC.KUCCOID;
    PK06W04.KUMSTRID[PK06WIX4] = PK4REC.KUMSTRID;
    PK06W04.XNXCD[PK06WIX4] = PK4REC.XNXCD;
    PK06W04.TF1CARCD[PK06WIX4] = PK4REC.TF1CARCD;
    PK06W04.OP1DSBDT[PK06WIX4] = PK4REC.OP1DSBDT;
    PK06W04.PK4OTUNT[PK06WIX4] = PK4REC.PK4OTUNT;
    if (PK4REC.PK4PLNDT > 0)
      PK06W04.PK06WPLF[PK06WIX4] = "*";
    end

     /* get store short name*/
    set PK6REC empty;
    PK6REC.KUCCOID = PK4REC.KUCCOID;
    PK6REC.KUMSTRID = PK4REC.KUMSTRID;
    PK06127();
    if (VAGen_SQLCODE == 0)
      PK06W04.PK06WSNM[PK06WIX4] = PK6REC.KUMSTSNM;
    else
      PK06W04.PK06WSNM[PK06WIX4] = "UNKN";
    end

  end

  if (SQLCA.VAGen_SQLCODE == 0)
    /* get hold reason codes*/
    PKZREC.PKZFUNC = "N1";
    PK06125(); /* select nxt dpick.vorhld01*/
  else
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2"; /* Type of error*/
    TA1REC.TA1PGMNM = "PK06172 "; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE            ";
    TA1REC.TA1MAP = "PK06M100"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKBREC.PKBKEY;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  end

   /* ---------- end of pk06172 - move data to array -------------*/
end // end PK06172

// return from pk application
Function PK06180()

  if (PKWREC.PKWFRMAP[1] == "PK06")
    if (PKWREC.PKWSLTYP[1] == "O" /* return from order inq*/
     || PKWREC.PKWSLTYP[1] == "S") /* return from ln itm inq*/
      PKYREC.PKWARRAY = PKWREC.PKWARRAY[1];
      PK06W01.PK06WWIX = 1;
      PK06W04.PK06WIX4 = 1;
      while (PKYREC.PK1CUOID[PK06WWIX] > 0
       && PK06W01.PK06WWIX <= 30
       && PK06W04.PK06WIX4 <= PK06W04.PK06WCNT)
        if (PKYREC.PK1CUOID[PK06WWIX] == PK06W04.PK1CUOID[PK06WIX4]
         && PKYREC.PK1NORID[PK06WWIX] == PK06W04.PK1NORID[PK06WIX4])
          PK06W04.PK06WSEL[PK06WIX4] = PKYREC.PKYORACT[PK06WWIX];
          PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
          PK06W01.PK06WWIX = PK06W01.PK06WWIX + 1;
        else
          PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
        end
      end
    else
      if (PKWREC.PKWSLTYP[1] == "C") /* return from cust inq*/
        PKXREC.PKWARRAY = PKWREC.PKWARRAY[1];
        PK06W01.PK06WWIX = 1;
        PK06W04.PK06WIX4 = 1;
        while (PKXREC.KUCCOID[PK06WWIX] > 0
         && PK06W01.PK06WWIX <= 30
         && PK06W04.PK06WIX4 <= PK06W04.PK06WCNT)
          if (PKXREC.KUCCOID[PK06WWIX] == PK06W04.KUCCOID[PK06WIX4]
           && PKXREC.KUCCOID[PK06WWIX] == PK06W04.KUCCOID[PK06WIX4]
           && PKXREC.XNXCD[PK06WWIX] == PK06W04.XNXCD[PK06WIX4])
            PK06W04.PK06WSEL[PK06WIX4] = PKXREC.PKXKUACT[PK06WWIX];
            PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
            PK06W01.PK06WWIX = PK06W01.PK06WWIX + 1;
          else
            PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
          end
        end
      end
    end
  end

  PK06W04.PK06WSVX = 1;
  while (PK06W04.PK06WIX4 > 13)
    PK06W04.PK06WIX4 = PK06W04.PK06WIX4 - 13;
    PK06W04.PK06WSVX = PK06W04.PK06WSVX + 13;
  end
  PK06W04.PK06WIX4 = PK06W04.PK06WSVX;

end // end PK06180

// * get selection criteria
Function PK06200()
   /* ------------ pk06010 converse selection screen -------------*/

  if (PK06WERS == "N")
    if (PKWREC.XWHCD == " ")
      set PK06M100.XWHCD cursor;
    else
      PK06M100.XWHCD = PKWREC.XWHCD;
      PK06M100.XWHABRV = PKWREC.XWHABRV;
      set PK06M100.KUCCOID cursor;
    end
  end

  PK06201(); /* edit brand code*/

  PK06M100.PK06MTIM = VGVar.currentFormattedTime;
  PK06M100.XXXCURDT = VGVar.currentShortGregorianDate;
  if (PK06W01.PK06WERS != "Y")
    PK06M100.XXXERRID = "PK06200";
  end

  converse PK06M100 ;

  PK06205(); /* process data from pk06m100*/

   /* -------------------- end pk06200 --------------------------*/
end // end PK06200

// edit brand code
Function PK06201()


  if (PK06M100.KUCCOID > 7999999 /* if cole-haan customer*/
   && PK06M100.KUCCOID < 9000000)
    PK06M100.KUCCOID = PK06M100.KUCCOID - 8000000;
                                  /* convert it to ordinary*/
    if (PK06M100.XBCCD != "08") /* if brand not cole-haan*/
      PK06M100.XBCCD = "08"; /**/
      PK06M100.VAGen_EZEMSG = "ALL CUSTOMERS IN 80NNNNN FORMAT ARE COLE-HAAN CUSTOMERS";
    end
  end


  if (PK06M100.XBCCD != " ") /* brand code found on map*/

    if (PK06M100.XBCCD in XBCTBL.XBCCD)
      PK06W01.PK06W-XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
    end
                                  /* brand description*/
    if (sysVar.arrayIndex == 0) /* Table entry not found*/

      converseLib.validationFailed(413); /* Indicate invalid brand*/
      set PK06M100.XBCCD cursor, modified, bold;
                                   /* Highlight brand*/
      PK06M100.XBCABRV = " "; /* Clear abbreviation*/
      PK06W01.PK06WERS = "Y";
      return;

    else

      PK06M100.XBCABRV = PK06W01.PK06W-XBCABRV;
                                   /* brand desc to map*/
    end

  else

    PK06M100.XBCABRV = " "; /* spaces to brand desc*/

  end


   /* -------------------- end pk06201 --------------------------*/
end // end PK06201

// process data from m100
Function PK06205()
   /* ------------------------ pk06205 --------------------------*/


  PK06210(); /* reset fields to normal*/
  PK06215(); /* check attention identifier*/
  PK06220(); /* edit for missing fields*/
  PK06225(); /* edit for relational fields*/
  PK06030(); /* validate dates*/
  PK06230(); /* validate cust/ord/carrier codes*/
  PK06260(); /* validate entered product code*/
  PK06265(); /* validate picking hold code*/

  if (PK06W01.PK06WERS != "Y") /* no errors*/
    if (PK06W01.PK06WFLE == 0) /* no valid data entered*/
      converseLib.validationFailed(291);
      PK06W01.PK06WERS = "Y";
      PK06M100.XXXERRID = "PK06205";
      PK06M300.XXXERRID = "PK06205";
    else
      PK06W01.PK06WGET = "Y"; /* turn on load flag*/
      PK06W01.PK06WFTF = "Y"; /* turn on load flag*/
      PK06W01.PK06WLSC = "Y"; /* turn on load flag*/
    end
  end

   /* -------------------- end pk06205 --------------------------*/
end // end PK06205

// reset hilighted fields
Function PK06210()
   /* --------------- pk06210 - reset highlighted fields ---------*/

  PK06W01.PK06WFLE = 0;
  PK06W01.PK06WERS = "N";
  set PK06M100.XWHCD initialAttributes;
  set PK06M100.XBCCD initialAttributes;
  set PK06M100.KUCCOID initialAttributes;
  set PK06M100.KUMSTRID initialAttributes;
  set PK06M100.XNXCD initialAttributes;
  set PK06M100.XOTCD initialAttributes;
  set PK06M100.XOTDESC initialAttributes;
  set PK06M100.PK1CUOID initialAttributes;
  set PK06M100.PK06MNFM initialAttributes;
  set PK06M100.PK06MNFD initialAttributes;
  set PK06M100.PK06MNFY initialAttributes;
  set PK06M100.PK06MNTM initialAttributes;
  set PK06M100.PK06MNTD initialAttributes;
  set PK06M100.PK06MNTY initialAttributes;
  set PK06M100.TF1CARCD initialAttributes;
  PK06M100.TF1ABRV = " ";
  set PK06M100.PK06MDFM initialAttributes;
  set PK06M100.PK06MDFD initialAttributes;
  set PK06M100.PK06MDFY initialAttributes;
  set PK06M100.PK06MDTM initialAttributes;
  set PK06M100.PK06MDTD initialAttributes;
  set PK06M100.PK06MDTY initialAttributes;
  set PK06M100.XGPCD initialAttributes;
  set PK06M100.SY1STNBR initialAttributes;
  set PK06M100.SY2CLRID initialAttributes;
  set PK06M100.XDMCD initialAttributes;
  set PK06M100.SP1ID initialAttributes;
  set PK06M100.XHRCD initialAttributes;
  PK06M100.XHRDESC = " ";
  set PK06M100.PK06MRFM initialAttributes;
  set PK06M100.PK06MRFD initialAttributes;
  set PK06M100.PK06MRFY initialAttributes;
  set PK06M100.PK06MRTM initialAttributes;
  set PK06M100.PK06MRTD initialAttributes;
  set PK06M100.PK06MRTY initialAttributes;
  set PK06M100.PK06MXHD initialAttributes;
  set PK06M100.PK06MAHD initialAttributes;
  set PK06M100.PK06MXPL initialAttributes;
  set PK06M100.PK06MARL initialAttributes;
  set PK06M100.PK06MXNP initialAttributes;
  set PK06M100.PK06MDHC initialAttributes;
  set PK06M100.PK06MRMM initialAttributes;
  set PK06M100.PK06MRDD initialAttributes;
  set PK06M100.PK06MRYY initialAttributes;
  set PK06M100.CATOAP initialAttributes;
  set PK06M100.CAITEM initialAttributes;

   /* ------- end of: pk06210 - reset highlighted fields ---------*/
end // end PK06210

// check attention identifier
Function PK06215()
   /* ---------------  pk06215    --------------------------------*/
   /* ---------------  check pf keys                        ------*/


  PK06M100.XXXERRID = "PK06215"; /* Process name*/


   /* -----  check for valid pf keys                        ------*/
  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf19
   || converseVar.eventKey is pakey)
    exit stack;
  else
    if (converseVar.eventKey is enter)
      /* next sentence*/
    else
      converseLib.validationFailed(12); /* invalid pf key*/
      PK06W01.PK06WERS = "Y";
      return; /* Exit to redisplay map*/
    end
  end


   /* ------------------- end pk06215 -------------------------*/
end // end PK06215

// missing field edits
Function PK06220()
   /* ------------ pk06220 missing field edits -----------*/

  PK06W01.PK06WFLE = 0;
  PK06M100.XXXERRID = "PK06220";

  if (PK06M100.CATOAP > " ")
                                   /* because of the users desire to retain*/
    exit stack; /* the entered data fastpath regardless*/
  else /* of what other data was entered*/
    if (PK06M100.CAITEM > " ")
      set PK06M100.CAITEM cursor, bold; /* options entered but no*/
      converseLib.validationFailed(15); /* trans id entered*/
      PK06M100.XXXERRID = "PK06220 ";
      PK06W01.PK06WERS = "Y";
      return;
    end
  end

    /* check xwhcd entry*/

  if (PK06M100.XWHCD != PKWREC.XWHCD)
    if (PK06M100.XWHCD in XWHTBL.XWHCD)
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        PKWREC.XWHCD = XWHTBL.XWHCD[sysVar.arrayIndex];
        PKWREC.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
        PK06M100.XWHABRV = PKWREC.XWHABRV;
      else
        set PK06M100.XWHCD cursor, bold;
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(003);
        return;
      end
    else
      set PK06M100.XWHCD cursor, bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(002);
      return;
    end
  end


    /* check for customer entry*/

  if (PK06M100.KUCCOID != 0)
    PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
  else
    if (PK06M100.KUMSTRID > 0
     || PK06M100.XNXCD > 0)
      set PK06M100.KUCCOID cursor, bold;
      set PK06M100.KUMSTRID bold;
      set PK06M100.XNXCD bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(144);
      return;
    end
  end

   /* see if xotcd entered*/

  if (PK06M100.XOTCD != " ")
    PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
  end

    /* see if order number entered*/

  if (PK06M100.PK1CUOID != 0)
    PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
  end

    /* check from 'need' date*/
          /* ----*/

  if (PK06M100.PK06MNFM == 0
   && PK06M100.PK06MNFD == 0
   && PK06M100.PK06MNFY == 0)
  else
    if (PK06M100.PK06MNFM > 0
     && PK06M100.PK06MNFD > 0)

      /* ====== Y2K OUT BEGIN ======*/

      /* AND PK06M100.PK06MNFY GT 0;*/

      /* ====== Y2K OUT END ======*/

      PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
    else
      set PK06M100.PK06MNFD cursor, bold;
      set PK06M100.PK06MNFM bold;
      set PK06M100.PK06MNFY bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(158);
      return;
    end
  end

    /* check to   'need' date*/
          /* --*/

  if (PK06M100.PK06MNTM == 0
   && PK06M100.PK06MNTD == 0
   && PK06M100.PK06MNTY == 0)
  else
    if (PK06M100.PK06MNTM > 0
     && PK06M100.PK06MNTD > 0)

      /* ====== Y2K OUT BEGIN ======*/

      /* AND PK06M100.PK06MNTY GT 0;*/

      /* ====== Y2K OUT END ======*/

      PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
    else
      set PK06M100.PK06MNTD cursor, bold;
      set PK06M100.PK06MNTM bold;
      set PK06M100.PK06MNTY bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(158);
      return;
    end
  end

   /* check carrier for data*/

  if (PK06M100.TF1CARCD != " ")
    PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
  end

    /* check from 'dnsb' date*/
          /* ----*/

  if (PK06M100.PK06MDFM == 0
   && PK06M100.PK06MDFD == 0
   && PK06M100.PK06MDFY == 0)
  else
    if (PK06M100.PK06MDFM > 0
     && PK06M100.PK06MDFD > 0
    )
      /* ====== Y2K OUT BEGIN ======*/

      /* AND PK06M100.PK06MDFY GT 0;*/

      /* ====== Y2K OUT END ======*/

      PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
    else
      set PK06M100.PK06MDFD cursor, bold;
      set PK06M100.PK06MDFM bold;
      set PK06M100.PK06MDFY bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(158);
      return;
    end
  end

    /* check to   'dnsb' date*/
          /* --*/

  if (PK06M100.PK06MDTM == 0
   && PK06M100.PK06MDTD == 0
   && PK06M100.PK06MDTY == 0)
  else
    if (PK06M100.PK06MDTM > 0
     && PK06M100.PK06MDTD > 0
    )
      /* ====== Y2K OUT BEGIN ======*/

      /* AND PK06M100.PK06MDTY GT 0;*/

      /* ====== Y2K OUT END ======*/

      PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
    else
      set PK06M100.PK06MDTD cursor, bold;
      set PK06M100.PK06MDTM bold;
      set PK06M100.PK06MDTY bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(158);
      return;
    end
  end


  if (PK06M100.XGPCD > " "
   && PK06M100.SY1STNBR > " ")
    PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
  end


    /* check from 'rlse' date*/
          /* ----*/

  if (PK06M100.PK06MRFM == 0
   && PK06M100.PK06MRFD == 0
   && PK06M100.PK06MRFY == 0)
  else
    if (PK06M100.PK06MRFM > 0
     && PK06M100.PK06MRFD > 0
    )
      /* ====== Y2K OUT BEGIN ======*/

      /* AND PK06M100.PK06MRFY GT 0;*/

      /* ====== Y2K OUT END ======*/

      PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
    else
      set PK06M100.PK06MRFD cursor, bold;
      set PK06M100.PK06MRFM bold;
      set PK06M100.PK06MRFY bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(158);
      return;
    end
  end

    /* check to   'rlse' date*/
          /* --*/

  if (PK06M100.PK06MRTM == 0
   && PK06M100.PK06MRTD == 0
   && PK06M100.PK06MRTY == 0)
  else
    if (PK06M100.PK06MRTM > 0
     && PK06M100.PK06MRTD > 0
    )
      /* ====== Y2K OUT BEGIN ======*/

      /* AND PK06M100.PK06MRTY GT 0;*/

      /* ====== Y2K OUT END ======*/

      PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
    else
      set PK06M100.PK06MRTD cursor, bold;
      set PK06M100.PK06MRTM bold;
      set PK06M100.PK06MRTY bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(158);
      return;
    end
  end

  if (PK06M100.XHRCD != " ")
    PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
  end

  if (PK06M100.SP1ID != " ")
    PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
  end

   /* -------------------- end pk06220 --------------------------*/
end // end PK06220

// relational field edits
Function PK06225()
   /* ---------pk06225 releational field edits--------------------*/


   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
   /* exclude holds flag is on and a release date was entered   **/
   /* these are conflicting entrys as orders not on hold can't  **/
   /* have a release date.                                      **/
   /* ** * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
  if (PK06M100.PK06MXHD == "Y"
   && PK06M100.PK06MRFM != 0)
    PK06M100.XXXERRID = "PK06225";
    PK06W01.PK06WERS = "Y";
    set PK06M100.PK06MXHD cursor, bold;
    set PK06M100.PK06MRFM bold;
    set PK06M100.PK06MRFD bold;
    set PK06M100.PK06MRFY bold;
    converseLib.validationFailed(298);
  end

  if (PK06M100.PK06MXPL == "Y"
   && PK06M100.PK06MXNP == "Y")
    PK06M100.XXXERRID = "PK06225";
    PK06W01.PK06WERS = "Y";
    set PK06M100.PK06MXPL cursor, bold;
    set PK06M100.PK06MXNP bold;
    converseLib.validationFailed(65);
  end
  if (PK06M100.PK06MAHD == "Y")
    if (PK06M100.PK06MDHC == " ")
      PK06M100.XXXERRID = "PK06225";
      converseLib.validationFailed(296);
      PK06W01.PK06WERS = "Y";
      set PK06M100.PK06MDHC cursor, bold;
      return;
    end
    if (PK06M100.PK06MRMM == 0)
      PK06M100.XXXERRID = "PK06225";
      converseLib.validationFailed(297);
      PK06W01.PK06WERS = "Y";
      set PK06M100.PK06MRMM cursor, bold;
      set PK06M100.PK06MRDD bold;
      set PK06M100.PK06MRYY bold;
    end
  end

   /* -----end:pk06225 releational field edits--------------------*/
end // end PK06225

// tbl and verifiable data edits
Function PK06230()
   /* -------- pk06230 - validate cust/ord/carrier codes ---------*/

  PK06M100.XXXERRID = "PK06230";

   /* *** validate customer codes*/

  if (PK06M100.KUCCOID > 0)
    set PK6REC empty;
    PK6REC.KUCCOID = PK06M100.KUCCOID;



    if (PK06M100.XBCCD == "08") /* if Cole-Haan*/
      if (PK06M100.KUCCOID > 99999 /**/
       && PK06M100.KUCCOID < 8000000)
        converseLib.validationFailed(427); /* invalid cole-haan customer*/
        set PK06M100.KUCCOID cursor, bold;
        set PK06M100.KUMSTRID bold;
        PK06W01.PK06WERS = "Y";
        return;
      else
        if (PK06M100.KUCCOID > 8999999) /**/
          converseLib.validationFailed(427); /* invalid cole-haan customer*/
          set PK06M100.KUCCOID cursor, bold;
          set PK06M100.KUMSTRID bold;
          PK06W01.PK06WERS = "Y";
          return;
        else
          XP0FW01.KUCCOID = PK06M100.KUCCOID;
          XP0FW01.XBCCD = PK06M100.XBCCD;
          XP0FS01(); /* look for Cole-Haan cust*/
          PK6REC.KUCCOID = XP0FW01.XP0FW01-INTERNAL;
                                   /* move C-H number to pk6rec*/
        end
      end
    else
      if (PK06M100.KUCCOID > 7999999 /* if Cole-Haan*/
       && PK06M100.KUCCOID < 9000000)
        XP0FW01.KUCCOID = PK06M100.KUCCOID;
        XP0FW01.XBCCD = PK06M100.XBCCD;
        XP0FS01(); /* look for Cole-Haan cust*/
        PK6REC.KUCCOID = XP0FW01.XP0FW01-INTERNAL;
                                   /* move it to pk6rec*/
      end
    end





    if (PK06M100.KUMSTRID > 0)
      PK6REC.KUMSTRID = PK06M100.KUMSTRID;
      PK06127();
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(163); /* not found*/
        PK06W01.PK06WERS = "Y";
        set PK06M100.KUCCOID cursor, bold;
        set PK06M100.KUMSTRID bold;
        set PK06M100.XNXCD bold;
      end
    else
      PK06235();
      if (VAGen_SQLCODE != -911)
        PK06245(); /* close set*/
      end
    end
    if (PK06W01.PK06WERS == "Y")
      return;
    end
  end

  if (PK06M100.XNXCD in XNXTBL.XNXCD from 1)
    /* next sentence*/
  else
    set PK06M100.XNXCD cursor, bold;
    PK06W01.PK06WERS = "Y";
    converseLib.validationFailed(283); /* dept code invalid*/
    return;
  end

   /* validate xotcd and move desc*/

  if (PK06M100.XOTCD == " ")
    PK06M100.XOTDESC = " ";
  else
    if (PK06M100.XOTCD in XOTTBL.XOTCD from 1)
      PK06M100.XOTDESC = XOTTBL.XOTDESC[sysVar.arrayIndex];
    else
      converseLib.validationFailed(129);
      PK06W01.PK06WERS = "Y";
      set PK06M100.XOTCD cursor, bold;
      return;
    end
  end

   /* validate order number*/

  if (PK06M100.PK1CUOID > 0)
    set PK4REC empty;
    PK4REC.XWHCD = PK06M100.XWHCD;
    PK4REC.PK1CUOID = PK06M100.PK1CUOID;
    PK4REC.PK1NORID = -1;
    PWIREC.PWIFUNC = "S3";
    PK06121(); /* open set and fetch first rec*/
    PWIREC.PWIFUNC = "N3";
    PK06121(); /* open set and fetch first rec*/
    if (SQLCA.VAGen_SQLCODE == 100)
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(11);
      set PK06M100.PK1CUOID cursor, bold;
    end
    if (SQLCA.VAGen_SQLCODE != -911)
      PWIREC.PWIFUNC = "C3";
      PK06121(); /* open set and fetch first rec*/
    end
    return;
  end

   /* validate carrier code*/

  if (PK06M100.TF1CARCD == " ")
    PK06M100.TF1ABRV = " ";
  else
    set TF1REC empty;
    TF1REC.TF1CARCD = PK06M100.TF1CARCD;
    PK06250();
    if (PK06W01.PK06WERS == "Y")
      return;
    else
      PK06M100.TF1ABRV = TF1REC.TF1ABRV;
    end
  end

   /* validate sales program*/

  if (PK06M100.SP1ID == " ")
    PK06M100.SP1ABRV = " ";
  else
    set SP1REC empty;
    SP1REC.SP1ID = PK06M100.SP1ID;
    PK06255();
    if (PK06W01.PK06WERS == "Y")
      return;
    else
      PK06M100.SP1ABRV = SP1REC.SP1ABRV;
    end
  end

   /* -end of: pk06230 - validate cust/ord/carrier codes ---------*/
end // end PK06230

// select set(s1) dpick.vpkcus01
Function PK06235()
   /* ----------- pk06235 - select set dpick.vpkcus01 ---------*/


  call "IO1830" ("S1", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    PK06240(); /* fetch next dpick.vpkcus01*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* contention for data base resorce*/
      PK06W01.PK06WERS = "Y";
      PK06M100.XXXERRID = "PK06235";
      PK06M300.XXXERRID = "PK06235";
    else
      converseLib.validationFailed(29); /* fatal error*/
      PK06W01.PK06WERS = "Y";
      PK06M100.XXXERRID = "PK06235";
      PK06M300.XXXERRID = "PK06235";
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PK06235 "; /* Process name*/
      TA1REC.TA1LOC = "SELECT SET            ";
      TA1REC.TA1MAP = "PK06M100"; /* Map name*/
      TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPKCUS01"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    end
  end


   /* -------------  end process pk06235  --------------------*/
end // end PK06235

// fetch  nxt(n1) dpick.vpkcus01
Function PK06240()
   /* ----------- pk06240 - select next dpick.vpkcus01 ---------*/


  call "IO1830" ("N1", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    PK06M100.XXXERRID = "PK06240";
    PK06M300.XXXERRID = "PK06240";
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* contention for data base resorce*/
      PK06W01.PK06WERS = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* end of file*/
        converseLib.validationFailed(163); /* invalid customer*/
        PK06W01.PK06WERS = "Y";
        set PK06M100.KUCCOID cursor, bold;
        set PK06M100.KUMSTRID bold;
        set PK06M100.XNXCD bold;
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK06240 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT NEXT            ";
        TA1REC.TA1MAP = "PK06M100"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VPKCUS01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      end
    end
  end

   /* -------------  end process pk06240  --------------------*/
end // end PK06240

// close  set(c1) dpick.vpkcus01
Function PK06245()
   /* ----------- pk06245 - close set dpick.vpkcus01 ---------*/


  call "IO1830" ("C1", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    PK06M100.XXXERRID = "PK06245";
    PK06M300.XXXERRID = "PK06245";
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* contention for data base resorce*/
      PK06W01.PK06WERS = "Y";
    else
      converseLib.validationFailed(29); /* fatal error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PK06245 "; /* Process name*/
      TA1REC.TA1LOC = "CLOSE SET            ";
      TA1REC.TA1MAP = "PK06M100"; /* Map name*/
      TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPKCUS01"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    end
  end

   /* -------------  end process pk06245  --------------------*/
end // end PK06245

// select unique dpick.vcarr001
Function PK06250()
   /* ---------  pk06250 - select unique dpick.vcarr001 ----------*/


  call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes}; /* select next*/

  if (SQLCA.VAGen_SQLCODE != 0)
    PK06M100.XXXERRID = "PK06250";
    PK06M300.XXXERRID = "PK06250";
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* contention for data base resorce*/
      PK06W01.PK06WERS = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        converseLib.validationFailed(77); /* not found*/
        PK06W01.PK06WERS = "Y";
        set PK06M100.TF1CARCD cursor, bold;
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK06250 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT UNIQUE            ";
        TA1REC.TA1MAP = "PK06M100"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCARR001"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      end
    end
  end

   /* -------------  end process pk06250  --------------------*/
end // end PK06250

// select unique dspgm.vspgm001
Function PK06255()
   /* ---------  pk06255 - select unique dspgm.vspgm001 ----------*/


  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes}; /* select next*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != -811)
    PK06M100.XXXERRID = "PK06255";
    PK06M300.XXXERRID = "PK06255";
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(284); /* invalid sales program*/
      PK06W01.PK06WERS = "Y";
      set PK06M100.SP1ID cursor, bold;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(28); /* contention for data base resorce*/
        PK06W01.PK06WERS = "Y";
      else
        converseLib.validationFailed(29); /* fatal error*/
        PK06W01.PK06WERS = "Y";
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK06255 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT UNIQUE            ";
        TA1REC.TA1MAP = "PK06M100"; /* Map name*/
        TA1REC.TA1DBASE = "DSPGM   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VSPGM001"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      end
    end
  end

   /* -------------  end process pk06255  --------------------*/
end // end PK06255

// validate product sku
Function PK06260()
   /* -------------------- pk06260 -------------------------------*/
   /* Obtain the Product Description Table row for the specified*/
   /* product number.  If not found or not available, return an*/
   /* error message to the user.  If any other error, indicate a*/
   /* system error.*/
   /* ------------------------------------------------------------*/

  PK06M100.XXXERRID = "PK06260";

  if (PK06M100.XGPCD == " "
   && PK06M100.SY1STNBR == " "
   && PK06M100.SY2CLRID == " "
   && PK06M100.XDMCD == " ")
    return;
  end

  if (PK06M100.SY2CLRID == " ")
    PK06M100.SY2CLRID = "00 ";
  end
  if (PK06M100.XDMCD == " ")
    PK06M100.XDMCD = "00";
  end

  PKNREC.XGPCD = PK06M100.XGPCD; /* GPC*/
  PKNREC.SY1STNBR = PK06M100.SY1STNBR; /* Style*/
  PKNREC.SY2CLRID = PK06M100.SY2CLRID; /* Color*/
  PKNREC.XDMCD = PK06M100.XDMCD; /* Dimension*/

  call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
  )                           
      /* CANADA 08/14/95*/

    if (PKWREC.XCTCD == "CANA")

        /* format ta1rec in case of bad return code from call to SY2000*/

      TA1REC.TA1PGMNM = "PK06"; /* CANA program name*/
      TA1REC.TA1LOC = "PK06260"; /* CANA sgrp name*/

      XSPK-CALL-SY2000(); /* CANA call SY2000 to get*/
                                /* product region record*/
      if (WSY2000.WSY2000-RETURN-CODE == 0) /* CANA row found*/
        return;
      else
        if (WSY2000.WSY2000-RETURN-CODE == 02) /* CANA row not found*/
          set PK06M100.XGPCD cursor, bold; /* Highlight GPC*/
          set PK06M100.SY1STNBR bold; /* Highlight style*/
          set PK06M100.SY2CLRID bold; /* Highlight color*/
          set PK06M100.XDMCD bold; /* Highlight dimension*/
          converseLib.validationFailed(498); /* Invalid stock number for region*/
          PK06W01.PK06WERS = "Y";
          PK06M100.XXXERRID = "PK06260 "; /* Error location*/
          return; /* Return to previous process*/
        else
          if (WSY2000.WSY2000-RETURN-CODE == 98) /* CANA database busy*/
            converseLib.validationFailed(28); /* Indicate not available*/
            TA1REC.TA1FUNC = "POST"; /* Termination function*/
          else
            converseLib.validationFailed(29); /* Indicate system error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          end
          PK06W01.PK06WERS = "Y";
          PK06M100.XXXERRID = "PK06260"; /* Error location*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK06260 "; /* Process name*/
          TA1REC.TA1LOC = "OBTAIN PRODUCT STYLE TABLE ROW";
          TA1REC.TA1MAP = "PK06M100"; /* Map name*/
          TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VSYREG02"; /* Table view name*/
          TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/
                                             /* Error diagnosis routine*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        end
      end
    end
    return;
  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      set PK06M100.XGPCD cursor, bold; /* Highlight GPC*/
      set PK06M100.SY1STNBR bold; /* Highlight style*/
      set PK06M100.SY2CLRID bold; /* Highlight color*/
      set PK06M100.XDMCD bold; /* Highlight dimension*/
      converseLib.validationFailed(45); /* Indicate not on file*/
      PK06W01.PK06WERS = "Y";
      PK06M100.XXXERRID = "PK06260 "; /* Error location*/
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end
    PK06W01.PK06WERS = "Y";
    PK06M100.XXXERRID = "PK06260"; /* Error location*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK06260 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN PRODUCT STYLE TABLE ROW";
    TA1REC.TA1MAP = "PK06M100"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPKSTY01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  end


   /* ------------end of:  pk06260 -------------------------------*/
end // end PK06260

// validate pkarhcd
Function PK06265()
   /* ------------ pk06265 hold rsn code edits -----------*/


  PK06M100.XXXERRID = "PK06265";

  if (PK06M100.XHRCD == "?")
    PK06270();
    PK06W02.PK06WENX = "N";
    while (PK06W02.PK06WENX == "N")
      PK06275();
    end
    converseLib.clearScreen();
    
    if (PK06W02.PK06WPIX > 0)
      PK06M100.XHRCD = PK06W01.XHRCD[PK06WPIX];
      PK06M100.XHRDESC = PK06W01.XHRDESC[PK06WPIX];
    end
  else
    if (PK06M100.XHRCD != " ")
      if (PK06M100.XHRCD in PK06W01.XHRCD from 1)
        PK06M100.XHRCD = PK06W01.XHRCD[sysVar.arrayIndex];
        PK06M100.XHRDESC = PK06W01.XHRDESC[sysVar.arrayIndex];
      else
        set PK06M100.XHRCD cursor, bold;
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(57); /* invalid hold code*/
        return;
      end
    end
  end

  if (PK06M100.PK06MDHC == "?")
    PK06270();
    PK06W02.PK06WENX = "N";
    while (PK06W02.PK06WENX == "N")
      PK06275();
    end
    converseLib.clearScreen();
    
    if (PK06W02.PK06WPIX > 0)
      PK06M100.PK06MDHC = PK06W01.XHRCD[PK06WPIX];
      PK06M100.PK06MDHR = PK06W01.XHRDESC[PK06WPIX];
    end
  end
  if (PK06M100.PK06MDHC == " ")
    if (PK06M100.PK06MAHD == "Y")
      set PK06M100.PK06MDHC cursor, bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(296); /* hold code required when flag=y*/
      return;
    end
  else
    if (PK06M100.PK06MDHC in PK06W01.XHRCD from 1)
      PK06M100.PK06MDHC = PK06W01.XHRCD[sysVar.arrayIndex];
      PK06M100.PK06MDHR = PK06W01.XHRDESC[sysVar.arrayIndex];
    else
      set PK06M100.PK06MDHC cursor, bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(57); /* invalid hold code*/
      return;
    end
  end

  if (PK06M100.PK06MRMM == 0
   && PK06M100.PK06MRDD == 0)

    /* ======= Y2K OUT BEGIN ======*/

    /* AND PK06M100.PK06MRYY EQ 0;*/

    /* ======= Y2K OUT END ======*/

    if (PK06M100.PK06MAHD == "Y")
      set PK06M100.PK06MRMM cursor, bold;
      set PK06M100.PK06MRDD bold;
      set PK06M100.PK06MRYY bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(297); /* hold date required when flag=y*/
      return;
    else
    end
  else
    if (PK06M100.PK06MRMM > 0
     && PK06M100.PK06MRDD > 0)

      /* ======= Y2K OUT BEGIN ======*/

      /* AND PK06M100.PK06MRYY GT 0;*/

      /* ======= Y2K OUT BEGIN ======*/

    else
      set PK06M100.PK06MRMM cursor, bold;
      set PK06M100.PK06MRDD bold;
      set PK06M100.PK06MRYY bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(158);
      return;
    end
  end

   /* -------------------- end pk06265 ---------------------------*/
end // end PK06265

// pkarhcd pop-up window init
Function PK06270()

   /* ---------------------- pk06270 -----------------------------*/

           /* INITIALIZATION PROCESS FOR POP UP WINDOWS*/

      /* Initialize fields on map and in working storage.*/

   /* ------------------------------------------------------------*/

     /* ***********************************************/
     /* ******  Initialize appropriate fields   *******/
     /* ***********************************************/

  set PK06M200 initial; /* Clear the map area*/
  set PK06W02 empty; /* clear working storage*/
  PK06W02.PK06WCT1 = 1; /* Table index*/
  PK06W02.PK06WCT2 = 1; /* Screen index*/
  PK06W02.PK06WSIX = 0; /* End of first page save index*/
  PK06W02.PK06WPIX = 0; /* Initialize pass index to zero*/
  PK06W02.PK06WFFL = "Y"; /* first time thru flag*/
  PK06W02.PK06WERR = "N"; /* Scroll error flag to no*/
  PK06W02.PK06WENX = "N"; /* End of pop up window session flag*/


   /* ----------------- end: pk06270 -----------------------------*/
end // end PK06270

// pkarhcd pop-up-window converse
Function PK06275()
   /* --------------------- pk06275 ------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If enter pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (PK06W02.PK06WERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (PK06W02.PK06WFFL == "N") /* if not the first time through*/
      PK06W02.PK06WCT1 = PK06W02.PK06WINX[10] + 1; /* set up scroll pf8*/
    end

    set PK06M200 initial; /* Clear map output area*/
    PK06M200.PK06MHDR = "         PICKING ORDER HOLD CODES     ";
    PK06M200.PK06MTR1 = "              SELECT & ENTER           ";
    PK06M200.PK06MTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || PK06W02.PK06WFFL == "Y")    /* Or it is the first time thru*/
      PK06W02.PK06WCT2 = 1; /* Set up screen index*/
      while (PK06W02.PK06WCT2 <= 10 /* Until end of screen lines*/
       && PK06W01.XHRCD[PK06WCT1] != "  ") /* Or end of data*/
        PK06M200.PK06MCD[PK06WCT2] = PK06W01.XHRCD[PK06WCT1];
        PK06M200.PK06MDES[PK06WCT2] = PK06W01.XHRDESC[PK06WCT1];
        PK06W02.PK06WINX[PK06WCT2] = PK06W02.PK06WCT1; /* Save array*/
        if (PK06W02.PK06WFFL == "Y") /* If first time thru*/
          PK06W02.PK06WSIX = PK06W02.PK06WCT1; /* Save last index*/
        end
        set PK06M200.PK06MSEL[PK06WCT2] normal; /* Set selects to normal*/
        PK06W02.PK06WCT2 = PK06W02.PK06WCT2 + 1; /* Increment screen index*/
        PK06W02.PK06WCT1 = PK06W02.PK06WCT1 + 1; /* Increment table index*/
      end
      PK06W02.PK06WFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      PK06W02.PK06WCT1 = PK06W02.PK06WINX[1] - 1; /* Set up table index*/
      PK06W02.PK06WCT2 = 10; /* Set up screen index*/
      while (PK06W02.PK06WCT2 >= 1) /* Load from the bottom up*/
        PK06M200.PK06MCD[PK06WCT2] = PK06W01.XHRCD[PK06WCT1];
        PK06M200.PK06MDES[PK06WCT2] = PK06W01.XHRDESC[PK06WCT1];
        PK06W02.PK06WINX[PK06WCT2] = PK06W02.PK06WCT1; /* Save array*/
        set PK06M200.PK06MSEL[PK06WCT2] normal; /* Set select visible*/
        PK06W02.PK06WCT2 = PK06W02.PK06WCT2 - 1; /* Decrement screen index*/
        PK06W02.PK06WCT1 = PK06W02.PK06WCT1 - 1; /* Decrement table index*/
      end
      if (PK06W02.PK06WCT1 < 1) /* If the table index was decremented*/
        PK06W02.PK06WCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse PK06M200 ;

  PK06W02.PK06WERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  PK06W02.PK06WCT2 = 1; /* Screen index*/
  while (PK06W02.PK06WCT2 <= 10 /* Set all fields with data to normal*/
   && PK06M200.PK06MCD[PK06WCT2] != " ")
    set PK06M200.PK06MSEL[PK06WCT2] normal;
    PK06W02.PK06WCT2 = PK06W02.PK06WCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && PK06W01.XHRCD[PK06WCT1] == "  ") /* And end of table*/
    PK06W02.PK06WERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && PK06W02.PK06WINX[1] <= PK06W02.PK06WSIX)
      PK06W02.PK06WERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter  pressed*/
        PK06W02.PK06WENX = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        PK06W02.PK06WCT2 = 1; /* Screen index*/
        while (PK06W02.PK06WCT2 <= 10) /* Until end of screen data*/
          if (PK06M200.PK06MSEL[PK06WCT2] != " ") /* Check for selection*/
            PK06W02.PK06WPIX = PK06W02.PK06WINX[PK06WCT2];
            PK06W02.PK06WCT2 = 11; /* End loop*/
          end
          PK06W02.PK06WCT2 = PK06W02.PK06WCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          PK06W02.PK06WERR = "Y"; /* set error flag*/
        end
      end
    end
  end


   /* --------------------- pk06275 ------------------------------*/
end // end PK06275

// * selected order screen driver
Function PK06300()
   /* ------------------------------------------------------------*/
     /* pk06300 - selected order screen driver*/
   /* ------------------------------------------------------------*/

   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area*/
   /* 2) display the map*/
   /* 3) Process transaction*/

   /* ------------------------------------------------------------*/

  PK06305(); /* Format and display the map*/

  PK06330(); /* converse screen*/

  PK06335(); /* reset hilighted fields*/

  PK06340(); /* check for attention*/

  PK06345(); /* edit data*/

  PK06400(); /* process valid request*/

   /* --------------- end: pk06300 -------------------------------*/
end // end PK06300

// load screen with data
Function PK06305()
   /* ------------ pk06305 load screen with data -----------------*/


  if (PK06W01.PK06WLSC != "Y")
    return;
  else
    if (PK06W01.PK06WFTF == "Y")
      move PK06M100 to PK06W03 withV60Compat; /* save selection criteria*/
      PK06W01.PK06WFTF = "N";
      PK06W01.PK06WNDX = 1;
      PK06W04.PK06WIX4 = 1;
      PK06W04.PK06WSVX = 1;
      PK06W01.PK06WCPG = 1;
      if (PK06W01.PK06WUPD == "Y")
        PK06W04.PK06WIX4 = PK06W01.PK06WSUX;
        PK06W01.PK06WUPD = "N";
      end
    end
  end

  if (PKWREC.PKWINDEX > 0) /* calc curr page only if xfer to this*/
                                   /* app*/
    PK06W01.PK06WCPG = 0;
    PK06W01.PK06WPGS = PK06W04.PK06WSVX / 13;
    if (PK06W01.PK06WPGD > 0)
      PK06W01.PK06WCPG = PK06W01.PK06WPGI + 1;
    else
      PK06W01.PK06WCPG = PK06W01.PK06WPGI;
    end
  end

  PK06W01.PK06WPGS = PK06W04.PK06WCNT / 13;
  if (PK06W01.PK06WPGD > 0)
    PK06W01.PK06WPGI = PK06W01.PK06WPGI + 1;
  end

  PK06W01.PK06WLSC = "N"; /* turn off display screen flag*/
  PK06W01.PK06WERS = "N"; /* turn off error switch*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    if (PK06M300.PK06MFPG != PK06W01.PK06WCPG)
      PK06W01.PK06WCPG = PK06M300.PK06MFPG;
      PK06W04.PK06WIX4 = PK06W01.PK06WCPG * 13;
      PK06W04.PK06WIX4 = PK06W04.PK06WIX4 - 12;
    else
      if (converseVar.eventKey is pf7)
        if (PK06W04.PK06WSVX == 1)
          converseLib.validationFailed(37); /* cant back up*/
          return;
        else
          PK06W04.PK06WIX4 = PK06W04.PK06WSVX - 13;
          PK06W01.PK06WCPG = PK06W01.PK06WCPG - 1;
        end
      else
        PK06W04.PK06WIX4 = PK06W04.PK06WSVX + 13;
        if (PK06W04.PK06WIX4 > PK06W04.PK06WCNT)
          PK06W04.PK06WIX4 = PK06W04.PK06WSVX;
          converseLib.validationFailed(38); /* cant go forward*/
          return;
        else
          PK06W01.PK06WCPG = PK06W01.PK06WCPG + 1;
        end
      end
    end
  end
  set PK06M300 initial;
  set PK06M300.PK06MAWF normal;
  set PK06M300.PK06MAWF skip;
  if (PK06M100.PK06MAHD == "Y")
    PK06M300.PK06MAWF = "WARNING:AUTO HOLD IN EFFECT";
  else
    if (PK06M100.PK06MARL == "Y")
      PK06M300.PK06MAWF = "WARNING:AUTO RLSE IN EFFECT";
    else
      set PK06M300.PK06MAWF invisible;
    end
  end
  PK06M300.PK06MTOR = PK06W04.PK06WCNT;
  PK06M300.PK06MHLD = PK06M100.PK06MDHC;
  PK06M300.XHRDESC = PK06M100.PK06MDHR;
  PK06W01.PK06WMM = PK06M100.PK06MRMM;
  PK06W01.PK06WDD = PK06M100.PK06MRDD;
  PK06W01.PK06WYY = PK06M100.PK06MRYY;
  PK06M300.PK06MDDT = PK06W01.PK06WDT;
  PK06M300.XWHCD = PK06M100.XWHCD;
  PK06M300.PK06MFPG = PK06W01.PK06WCPG;
  PK06M300.PK06MLPG = PK06W01.PK06WPGI;
  PK06W01.PK06WKHF = "N";
  PK06W01.PK06WCHF = "N";


  PK06W04.PK06WTUN = 0; /* zero total units field*/
  PK06W01.PK06WNDX = 1;
  while (PK06W01.PK06WNDX <= PK06W04.PK06WCNT)
    PK06W04.PK06WTUN = PK06W04.PK06WTUN + PK06W04.PK4OTUNT[PK06WNDX];
    PK06W01.PK06WNDX = PK06W01.PK06WNDX + 1;
  end
  PK06M300.PK06WTUN = PK06W04.PK06WTUN; /* total units for array*/

  PK06W01.PK06WNDX = 1;
  PK06W04.PK06WSVX = PK06W04.PK06WIX4;
  PK06W01.PK06WSUX = PK06W04.PK06WIX4;
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
                /* LOAD WORKING STORAGE ARRAY                   **/
   /* if we made it this far all selections have passed and we  **/
   /* have a record to place in the pk06w04 array.              **/
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/

  while (PK06W01.PK06WNDX <= 13)
    if (PK06W04.PK06WIX4 <= PK06W04.PK06WCNT)
      PK06M300.PK06MSEL[PK06WNDX] = PK06W04.PK06WSEL[PK06WIX4];
      if (PK06W04.PK06WSEL[PK06WIX4] == "H")
        PK06M300.XHRCD[PK06WNDX] = PK06M300.PK06MHLD;
        PK06M300.PK06MRDT[PK06WNDX] = PK06M300.PK06MDDT;
      else
        if (PKWREC.PKWINDEX > 0
         && PK06W04.PK06WSEL[PK06WIX4] == "V")
          set PK06M300.PK06MSEL[PK06WNDX] cursor;
        end
        PK06M300.XHRCD[PK06WNDX] = PK06W04.XHRCD[PK06WIX4];
        PK06W01.PK06WFDT = PK06W04.PKBRELDT[PK06WIX4];
        PK06W01.PK06WMM = PK06W01.PK06WFMM;
        PK06W01.PK06WDD = PK06W01.PK06WFDD;
        PK06W01.PK06WYY = PK06W01.PK06WFYY;
        PK06M300.PK06MRDT[PK06WNDX] = PK06W01.PK06WDT;
      end
      if (PK06W01.PK06WNDX > 1)
        PK06W04.PK06WIX5 = PK06W04.PK06WIX4 - 1;
        if (PK06W04.PK1CUOID[PK06WIX5] == PK06W04.PK1CUOID[PK06WIX4]
         && PK06W04.PK1NORID[PK06WIX5] == PK06W04.PK1NORID[PK06WIX4])
          PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
          PK06W01.PK06WNDX = PK06W01.PK06WNDX + 1;
        else
          PK06M300.PK1CUOID[PK06WNDX] = PK06W04.PK1CUOID[PK06WIX4];
          PK06M300.PK1NORID[PK06WNDX] = PK06W04.PK1NORID[PK06WIX4];
          PK06M300.XOTCD[PK06WNDX] = PK06W04.XOTCD[PK06WIX4];
          PK06M300.XBCCD[PK06WNDX] = PK06W04.XBCCD[PK06WIX4];
          PK06M300.PK06MPLF[PK06WNDX] = PK06W04.PK06WPLF[PK06WIX4];
          if (PK06W04.KUCCOID[PK06WIX4] > 7999999 /* if Cole-Haan customer #*/
           && PK06W04.KUCCOID[PK06WIX4] < 9000000)
            PK06M300.KUCCOID[PK06WNDX] = PK06W04.KUCCOID[PK06WIX4] -             8000000; /* convert cust # to cole-haan*/
          else
            PK06M300.KUCCOID[PK06WNDX] = PK06W04.KUCCOID[PK06WIX4];
          end
          PK06M300.KUMSTRID[PK06WNDX] = PK06W04.KUMSTRID[PK06WIX4];
          PK06M300.XNXCD[PK06WNDX] = PK06W04.XNXCD[PK06WIX4];
          PK06M300.KUMSTSNM[PK06WNDX] = PK06W04.PK06WSNM[PK06WIX4];
          if (PK06W04.PK06WSNM[PK06WNDX] == "NOT IN POOL")
            set PK06M300.KUMSTSNM[PK06WNDX] bold;
          else
            PK06310(); /* check customer for cust holds*/
          end
          PK06M300.TF1CARCD[PK06WNDX] = PK06W04.TF1CARCD[PK06WIX4];
          PK06320(); /* check carrier for carr holds*/
          PK06W01.PK06WFDT = PK06W04.OP1DSBDT[PK06WIX4];
          PK06W01.PK06WMM = PK06W01.PK06WFMM;
          PK06W01.PK06WDD = PK06W01.PK06WFDD;
          PK06W01.PK06WYY = PK06W01.PK06WFYY;
          PK06M300.OP1DSBDT[PK06WNDX] = PK06W01.PK06WDT;
          PK06M300.PK4OTUNT[PK06WNDX] = PK06W04.PK4OTUNT[PK06WIX4];
          PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
          PK06W01.PK06WNDX = PK06W01.PK06WNDX + 1;
        end
      else
        PK06M300.PK1CUOID[PK06WNDX] = PK06W04.PK1CUOID[PK06WIX4];
        PK06M300.PK1NORID[PK06WNDX] = PK06W04.PK1NORID[PK06WIX4];
        PK06M300.XOTCD[PK06WNDX] = PK06W04.XOTCD[PK06WIX4];
        PK06M300.XBCCD[PK06WNDX] = PK06W04.XBCCD[PK06WIX4];
        PK06M300.PK06MPLF[PK06WNDX] = PK06W04.PK06WPLF[PK06WIX4];
        if (PK06W04.KUCCOID[PK06WIX4] > 7999999 /* if Cole-Haan customer #*/
         && PK06W04.KUCCOID[PK06WIX4] < 9000000)
          PK06M300.KUCCOID[PK06WNDX] = PK06W04.KUCCOID[PK06WIX4] -           8000000; /* convert cust # to cole-haan*/
        else
          PK06M300.KUCCOID[PK06WNDX] = PK06W04.KUCCOID[PK06WIX4];
        end
        PK06M300.KUMSTRID[PK06WNDX] = PK06W04.KUMSTRID[PK06WIX4];
        PK06M300.XNXCD[PK06WNDX] = PK06W04.XNXCD[PK06WIX4];
        PK06M300.KUMSTSNM[PK06WNDX] = PK06W04.PK06WSNM[PK06WIX4];
        if (PK06W04.PK06WSNM[PK06WNDX] == "NOT IN POOL")
          set PK06M300.KUMSTSNM[PK06WNDX] bold;
        else
          PK06310(); /* check customer for cust holds*/
        end
        PK06M300.TF1CARCD[PK06WNDX] = PK06W04.TF1CARCD[PK06WIX4];
        PK06320(); /* check carrier for carr holds*/
        PK06W01.PK06WFDT = PK06W04.OP1DSBDT[PK06WIX4];
        PK06W01.PK06WMM = PK06W01.PK06WFMM;
        PK06W01.PK06WDD = PK06W01.PK06WFDD;
        PK06W01.PK06WYY = PK06W01.PK06WFYY;
        PK06M300.OP1DSBDT[PK06WNDX] = PK06W01.PK06WDT;
        PK06M300.PK4OTUNT[PK06WNDX] = PK06W04.PK4OTUNT[PK06WIX4];
        PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
        PK06W01.PK06WNDX = PK06W01.PK06WNDX + 1;
      end
    else
      set PK06M300.PK06MSEL[PK06WNDX] skip, invisible;
      set PK06M300.XHRCD[PK06WNDX] skip, invisible;
      set PK06M300.PK06MRDT[PK06WNDX] skip, invisible;
      PK06W01.PK06WNDX = PK06W01.PK06WNDX + 1;
    end
  end

  PKWREC.PKWINDEX = 0;

   /* ------------ pk06305 load screen with data -----------------*/
end // end PK06305

// check for customer holds
Function PK06310()
   /* ------------- pk06310 check for cust holds -----------------*/

   /* ====== Y2K OUT BEGIN ========*/

   /* MOVE EZEDTE TO PK06W01.PK06WFDA;*/
   /* MOVE 19 TO PK06W01.PK06WFCT;*/


   /* ====== Y2K OUT END ========*/


   /* ====== Y2K IN BEGIN ========*/

  PK06W01.PK06WFDT = VGVar.currentGregorianDate;

   /* ====== Y2K IN END ========*/

  set PK9REC empty;
  PK9REC.XWHCD = PK06M100.XWHCD;
  PK9REC.KUCCOID = PK06W04.KUCCOID[PK06WIX4];
  PK9REC.KUMSTRID = PK06W04.KUMSTRID[PK06WIX4];
  PK9REC.XNXCD = PK06W04.XNXCD[PK06WIX4];
  PK9REC.XHRCD = "*";
  PKZREC.PKZFUNC = "S1";
  PK06315(); /* select set dpick.vcuhld01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    PKZREC.PKZFUNC = "N1";
    PK06315(); /* select nxt dpick.vcuhld01*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (PK9REC.PK9RELDT > PK06W01.PK06WFDT) /* reldt > than today*/
        PK06W01.PK06WKHF = "Y";
        set PK06M300.KUCCOID[PK06WNDX] bold;
        set PK06M300.KUMSTRID[PK06WNDX] bold;
        set PK06M300.XNXCD[PK06WNDX] bold;
      end
    end
  end

  if (SQLCA.VAGen_SQLCODE != -911)
    PKZREC.PKZFUNC = "C1";
    PK06315(); /* select set dpick.vcuhld01*/
  end

   /* ---------end: pk06310 check for cust holds -----------------*/
end // end PK06310

// access dpick.vcuhld01
Function PK06315()
   /* -------------- pk06315 - access dpick.vcuhld01 ------------*/

  call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0) /* successful*/
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* contention for data base resorce*/
      PK06W01.PK06WERS = "Y";
    else
      if (SQLCA.VAGen_SQLCODE != +100)
        converseLib.validationFailed(29); /* fatal error*/
        PK06W01.PK06WERS = "Y";
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK06315 "; /* Process name*/
        TA1REC.TA1LOC = PKZREC.PKZFUNC;
        TA1REC.TA1MAP = "PK06M300"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      end
    end
  end

   /* ------ end of: pk06315 - access dpick.vcuhld01 ------------*/
end // end PK06315

// check for carrier holds
Function PK06320()
   /* ---------- pk06320 check for carrier holds -----------------*/

  if (PK06W04.TF1CARCD == " ")
    return;
  end

   /* ====== Y2K OUT BEGIN ======*/

   /* MOVE EZEDTE TO PK06W01.PK06WFDA;*/
   /* MOVE 19 TO PK06W01.PK06WFCT;*/

   /* ====== Y2K OUT END ======*/


   /* ====== Y2K IN BEGIN ======*/

  PK06W01.PK06WFDT = VGVar.currentGregorianDate;

   /* ====== Y2K IN END ======*/

  set PWFREC empty;
  PWFREC.XWHCD = PK06M100.XWHCD;
  PWFREC.TF1CARCD = PK06W04.TF1CARCD[PK06WIX4];
  PK9REC.XHRCD = "*";
  PKZREC.PKZFUNC = "S1";
  PK06325(); /* select set dpick.vcahld01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    PKZREC.PKZFUNC = "N1";
    PK06325(); /* select nxt dpick.vcahld01*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (PWFREC.PKBRELDT > PK06W01.PK06WFDT)
        PK06W01.PK06WCHF = "Y";
        set PK06M300.TF1CARCD[PK06WNDX] bold;
      end
    end
  end

  if (SQLCA.VAGen_SQLCODE != -911)
    PKZREC.PKZFUNC = "C1";
    PK06325(); /* select nxt dpick.vcahld01*/
  end

   /* -- end of: pk06320  check for carrier holds ----------------*/
end // end PK06320

// access dpick.vcahld01
Function PK06325()
   /* ------------------------------------------------------------*/

  call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0) /* successful*/
    PK06M100.XXXERRID = "PK06325";
    PK06M300.XXXERRID = "PK06325";
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* contention for data base resorce*/
      PK06W01.PK06WERS = "Y";
    else
      if (SQLCA.VAGen_SQLCODE != +100)
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK06325 "; /* Process name*/
        TA1REC.TA1LOC = "ADD                      ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      end
    end
  end
end // end PK06325

// * order update selection
Function PK06330()
   /* ----------------- pk06330 - converse pk06m300 --------------*/

  set PK06M300.PK06MAWF normal;
  set PK06M300.PK06MAWF skip;
  if (PK06M100.PK06MAHD == "Y"
   && PK06M100.PK06MARL == "Y")
    PK06M300.PK06MAWF = "WARNING:AUTO HOLD/RLSE SET ";
  else
    if (PK06M100.PK06MAHD == "Y")
      PK06M300.PK06MAWF = "WARNING:AUTO HOLD IN EFFECT";
    else
      if (PK06M100.PK06MARL == "Y")
        PK06M300.PK06MAWF = "WARNING:AUTO RLSE IN EFFECT";
      else
        set PK06M300.PK06MAWF initialAttributes;
      end
    end
  end
  PK06M300.PK06MTOR = PK06W04.PK06WCNT;
  if (PK06M300.PK06MHLD != " ")
    PK06M100.PK06MDHC = PK06M300.PK06MHLD;
    PK06M100.PK06MDHR = PK06M300.XHRDESC;
  else
    PK06M300.PK06MHLD = PK06M100.PK06MDHC;
    PK06M300.XHRDESC = PK06M100.PK06MDHR;
  end
  PK06W01.PK06WMM = PK06M100.PK06MRMM;
  PK06W01.PK06WDD = PK06M100.PK06MRDD;
  PK06W01.PK06WYY = PK06M100.PK06MRYY;
  if (PK06M300.PK06MDDT != 0
   && PK06W01.PK06WDT != PK06M300.PK06MDDT)
    PK06W01.PK06WDT = PK06M300.PK06MDDT;
    PK06M100.PK06MRMM = PK06W01.PK06WMM;
    PK06M100.PK06MRDD = PK06W01.PK06WDD;
    PK06M100.PK06MRYY = PK06W01.PK06WYY;
  else
    PK06M300.PK06MDDT = PK06W01.PK06WDT;
  end
  PK06M300.XWHCD = PK06M100.XWHCD;
  PK06M300.PK06MFPG = PK06W01.PK06WCPG;
  PK06M300.PK06MLPG = PK06W01.PK06WPGI;
  PK06M300.PK06MTIM = VGVar.currentFormattedTime;
  PK06M300.XXXCURDT = VGVar.currentShortGregorianDate;
  PK06W01.PK06WERS = "N";
  if (converseVar.validationMsgNum == 0)
    if (PK06W01.PK06WKHF == "Y"
     && PK06W01.PK06WCHF == "Y")
      converseLib.validationFailed(301); /* at least 1 carrier and cust on hold*/
    else
      if (PK06W01.PK06WKHF == "Y")
        converseLib.validationFailed(299); /* at least 1 cust on hold*/
      else
        if (PK06W01.PK06WCHF == "Y")
          converseLib.validationFailed(300); /* at least 1 carrier on hold*/
        end
      end
    end
  end
  if (converseVar.validationMsgNum == 0)
    if ("??" in PK06M300.XHRCD from 1)
      set PK06M300.PK06MSEL[sysVar.arrayIndex] cursor, bold;
      set PK06M300.XHRCD[sysVar.arrayIndex] bold;
      set PK06M300.PK06MRDT[sysVar.arrayIndex] bold;
      converseLib.validationFailed(0315);
    end
  end

  if (PK06W01.PK06WERS != "Y")
    PK06M300.XXXERRID = "PK06330";
  end

  converse PK06M300 ;

   /* -------------end: pk06330 - converse pk06m300 --------------*/
end // end PK06330

// reset hilighted fields
Function PK06335()
   /* --------------- pk06335 - reset highlighted fields ---------*/

  PK06W01.PK06WERS = "N";
  set PK06M300.XWHCD initialAttributes;
  set PK06M300.PK06MHLD initialAttributes;
  set PK06M300.XHRDESC initialAttributes;
  set PK06M300.PK06MDDT initialAttributes;
  set PK06M300.PK06MAWF initialAttributes;

  PK06W01.PK06WNDX = 1;
  while (PK06W01.PK06WNDX <= 13)
    if (PK06M300.PK06MSEL[PK06WNDX] > " "
     || PK06M300.XHRCD[PK06WNDX] > " "
     || PK06M300.PK06MRDT[PK06WNDX] > 0
     || PK06M300.PK1CUOID[PK06WNDX] > 0)
      set PK06M300.PK06MSEL[PK06WNDX] initialAttributes;
      set PK06M300.XHRCD[PK06WNDX] initialAttributes;
      set PK06M300.PK06MRDT[PK06WNDX] initialAttributes;
      if (converseVar.eventKey not enter)
        set PK06M300.KUCCOID[PK06WNDX] initialAttributes;
        set PK06M300.KUMSTRID[PK06WNDX] initialAttributes;
        set PK06M300.XNXCD[PK06WNDX] initialAttributes;
        set PK06M300.TF1CARCD[PK06WNDX] initialAttributes;
      end
    end
    PK06W01.PK06WNDX = PK06W01.PK06WNDX + 1;
  end

   /* ------- end of: pk06335 - reset highlighted fields ---------*/
end // end PK06335

// process attention identifier
Function PK06340()
   /* ---------------  pk06340    --------------------------------*/
   /* ---------------  check pf keys                        ------*/


  PK06M100.XXXERRID = "PK06340"; /* Process name*/


   /* -----  check for valid pf keys                        ------*/
  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2)
    exit stack;
  else
    if (converseVar.eventKey is pf13
     || converseVar.eventKey is pf14
     || converseVar.eventKey is pf15
     || converseVar.eventKey is pf16
     || converseVar.eventKey is pf19
     || converseVar.eventKey is pf20)
      if (PK06W01.PK06WTRN == "Y")
        exit stack;
      end
    else
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf8)
        PK06W01.PK06WLSC = "Y";
      else
        if (converseVar.eventKey is pf12
         || converseVar.eventKey is enter)
          /* next sentence*/
        else
          converseLib.validationFailed(12); /* invalid pf key*/
          PK06W01.PK06WERS = "Y";
          return; /* Exit to redisplay map*/
        end
      end
    end
  end

   /* ------------------- end pk06340 -------------------------*/
end // end PK06340

// edit input data
Function PK06345()
   /* ------------ pk06345 - edit input data ---------------------*/


  PK06W01.PK06WUPD = "N"; /* turn off update switch*/

  if (PK06W01.PK06WERS == "Y") /* if error return*/
    return;
  end

  PK06M300.XXXERRID = "PK06345";

  if (converseVar.eventKey is pfkey) /* check for verified xfer request*/
    if (converseVar.eventKey is pf13 /* if verified return*/
     || converseVar.eventKey is pf14 
     || converseVar.eventKey is pf15 
     || converseVar.eventKey is pf16 
     || converseVar.eventKey is pf17 
     || converseVar.eventKey is pf18 
     || converseVar.eventKey is pf19 
     || converseVar.eventKey is pf20)
      if (PK06W01.PK06WTRN == "Y")
        return;
      end
    end
  end

  PK06W01.PK06WTRN = "N"; /* xfer not yet requested*/

  if (PK06M300.PK06MFPG != PK06W01.PK06WCPG) /* page change requested*/
    if (converseVar.eventKey not pf7
     && converseVar.eventKey not pf8)
      converseLib.validationFailed(0305); /* not allowed unless pf7 or pf8*/
      PK06W01.PK06WERS = "Y";
      PK06W01.PK06WLSC = "N";
      PK06M300.PK06MFPG = PK06W01.PK06WCPG;
      return;
    else
      if (PK06M300.PK06MFPG < 1 /* page range check*/
       || PK06M300.PK06MFPG > PK06M300.PK06MLPG)
        converseLib.validationFailed(0306); /* page range error*/
        PK06W01.PK06WERS = "Y";
        PK06W01.PK06WLSC = "N";
        set PK06M300.PK06MFPG cursor, bold;
        return;
      end
    end
  end


  if (PK06M300.PK06MDDT is modified)
    PK06355();
                                   /* check default release date for change*/
    if (PK06W01.PK06WERS == "Y")
      return;
    end
  end

  if (PK06M300.PK06MHLD != " " /* check hold code for change*/
   && PK06M300.PK06MHLD != PK06M100.PK06MDHC)
    if (PK06M300.PK06MHLD == "?")
      PK06350(); /* hold code pop-up window*/
    else
      if (PK06M300.PK06MHLD in PK06W01.XHRCD from 1)
        PK06M300.XHRDESC = PK06W01.XHRDESC[sysVar.arrayIndex];
        PK06M100.PK06MDHC = PK06W01.XHRCD[sysVar.arrayIndex];
        PK06M100.PK06MDHR = PK06W01.XHRDESC[sysVar.arrayIndex];
      else
        converseLib.validationFailed(57);
        PK06W01.PK06WERS = "Y";
        set PK06M300.PK06MHLD cursor, bold;
        return;
      end
    end
  end

  PK06W04.PK06WIX4 = PK06W04.PK06WSVX; /* restore array start pos*/
  PK06W01.PK06WVSF = "N"; /* no valid select codes*/
  PK06W01.PK06WNDX = 1; /* set scrn start at 1*/
  while (PK06W01.PK06WNDX <= 13
   && PK06W04.PK06WIX4 <= PK06W04.PK06WCNT
   && PK06W01.PK06WERS != "Y")
    if (PK06M300.PK06MSEL[PK06WNDX] == "H"
     || PK06M300.PK06MSEL[PK06WNDX] == "R"
     || PK06M300.PK06MSEL[PK06WNDX] == "C")
      if (COMMAREA.CACHGFL != "Y")
        PK06WERS = "Y";
        converseLib.validationFailed(275);
        set PK06M300.PK06MSEL[PK06WNDX] cursor, bold;
      end
    end
    if (PK06W01.PK06WERS != "Y")
      if (PK06M300.PK06MSEL[PK06WNDX] == "H" /* check valid selects*/
       || PK06M300.PK06MSEL[PK06WNDX] == "R" 
       || PK06M300.PK06MSEL[PK06WNDX] == "C" 
       || PK06M300.PK06MSEL[PK06WNDX] == "S")
        PK06W01.PK06WVSF = "Y";
      else
        if (PK06M300.PK06MSEL[PK06WNDX] != " "  /* nothing done*/
         && PK06M300.PK06MSEL[PK06WNDX] != "* " /* updated previously*/
         && PK06M300.PK06MSEL[PK06WNDX] != "V ") /* viewed*/
          set PK06M300.PK06MSEL[PK06WNDX] cursor, bold;
          PK06W01.PK06WERS = "Y";
          converseLib.validationFailed(292);
        end
      end
    end

    if (PK06W01.PK06WERS != "Y") /* validate hold request*/
      if (PK06M300.PK06MSEL[PK06WNDX] == "H")
        if (PK06M300.PK06MDDT == 0
         && PK06M300.PK06MRDT[PK06WNDX] == 0)
          converseLib.validationFailed(061); /* no release date*/
          PK06W01.PK06WERS = "Y";
          set PK06M300.PK06MRDT[PK06WNDX] cursor, bold;
        end
        if (PK06W01.PK06WERS != "Y")
          if (PK06M300.XHRCD[PK06WNDX] == "?")
            PK06360(); /* hold-code pop-up window*/
          else
            if (PK06M300.XHRCD[PK06WNDX] == " " /* no hold codes*/
             && PK06M300.PK06MHLD == " ")      
              converseLib.validationFailed(067);
              PK06W01.PK06WERS = "Y";
              set PK06M300.XHRCD[PK06WNDX] cursor, bold;
            end
          end
        end
      end
    end
    if (PK06W01.PK06WERS != "Y")
      if (PK06M300.PK06MSEL[PK06WNDX] == "R"
       && PK06W04.PK4ORHLD[PK06WIX4] != "Y"
       && PK06W04.PK06WSNM != "NOT IN POOL")
        set PK06M300.PK06MSEL[PK06WNDX] cursor, bold;
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(293);
      else
        if (PK06M300.PK06MSEL[PK06WNDX] == "C"
         && PK06W04.PK4ORHLD[PK06WIX4] != "Y"
         && PK06W04.PK06WSNM != "NOT IN POOL")
          set PK06M300.PK06MSEL[PK06WNDX] cursor, bold;
          PK06W01.PK06WERS = "Y";
          converseLib.validationFailed(294);
        end
      end
    end
    if (PK06W01.PK06WERS != "Y"
     && PK06M300.PK06MSEL[PK06WNDX] == "H")
      if (PK06M300.XHRCD[PK06WNDX] == " ")
        PK06M300.XHRCD[PK06WNDX] = PK06M300.PK06MHLD;
      end
      if (PK06M300.XHRCD[PK06WNDX] in PK06W01.XHRCD from 1)
        if (PK06M300.XHRCD[PK06WNDX] != PK06W04.XHRCD[PK06WIX4])
          PK06W04.XHRCD[PK06WIX4] = PK06M300.XHRCD[PK06WNDX];
        end
      else
        set PK06M300.XHRCD[PK06WNDX] cursor, bold;
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(57);
      end
    end
    if (PK06W01.PK06WERS != "Y")
      if (PK06M300.PK06MSEL[PK06WNDX] == "H"
       || PK06M300.PK06MSEL[PK06WNDX] == "C")
        if (PK06M300.PK06MRDT[PK06WNDX] == 0)
          PK06M300.PK06MRDT[PK06WNDX] = PK06M300.PK06MDDT;
          PK06365(); /* validate release date*/
        else
          PK06365(); /* validate release date*/
        end
      end
    end
    if (PK06W01.PK06WERS != "Y")
      if (PK06M300.PK06MSEL[PK06WNDX] == "S")
        if (converseVar.eventKey not pfkey)
          PK06W01.PK06WERS = "Y";
          converseLib.validationFailed(303);
        else
          if (converseVar.eventKey is pf13
           || converseVar.eventKey is pf14
           || converseVar.eventKey is pf15
           || converseVar.eventKey is pf16
           || converseVar.eventKey is pf17
           || converseVar.eventKey is pf18
           || converseVar.eventKey is pf19
           || converseVar.eventKey is pf20)
            PK06W01.PK06WTRN = "Y";
          end
        end
      end
    end
    if (PK06W01.PK06WERS != "Y")
      if (PK06M300.PK06MSEL[PK06WNDX] == "H")
        PK06370(); /* check for dup holds*/
      end
    end
    if (PK06W01.PK06WERS != "Y")
      PK06W04.PK06WSEL[PK06WIX4] = PK06M300.PK06MSEL[PK06WNDX];
      PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
      PK06W01.PK06WNDX = PK06W01.PK06WNDX + 1;
    end
  end


  if (PK06W01.PK06WERS != "Y"
   && PK06W01.PK06WTRN == "Y")
    if (converseVar.eventKey is pf13
     || converseVar.eventKey is pf14
     || converseVar.eventKey is pf15)
      if (converseVar.eventKey is pf13 /* order inq by selection*/
       || converseVar.eventKey is pf14) /* line item inq*/
        PK06375(); /* setup pkwrec*/
      end
      if (converseVar.eventKey is pf15) /* cust inq by selection*/
        PK06380(); /* setup pkxrec*/
      end
      if ("C" in PK06W04.PK06WSEL from 1 /* change requested*/
       || "H" in PK06W04.PK06WSEL from 1 /* hold requested*/
       || "R" in PK06W04.PK06WSEL from 1) /* release requested*/
                                   /* Warning: no update will be done*/
                                   /* xfer will loose user input*/
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(295);
      end
    end
  end

  if (PK06W01.PK06WERS != "Y"
   && PK06W01.PK06WVSF == "Y")
    if (converseVar.eventKey is enter)
      PK06W01.PK06WUPD = "Y";
    else
      if (converseVar.eventKey is pf12)
        converseLib.validationFailed(106);
      end
    end
  end

   /* ------- end: pk06345 - edit input data ---------------------*/
end // end PK06345

// validate pk06m300.pk06mhld
Function PK06350()
   /* ------------ pk06350 hold rsn code edits -----------*/


  PK06M300.XXXERRID = "PK06350";

  if (PK06M300.PK06MHLD == "?")
    PK06270();
    PK06W02.PK06WENX = "N";
    while (PK06W02.PK06WENX == "N")
      PK06352();
    end
    converseLib.clearScreen();
    
    if (PK06W02.PK06WPIX > 0)
      PK06M300.PK06MHLD = PK06W01.XHRCD[PK06WPIX];
      PK06M300.XHRDESC = PK06W01.XHRDESC[PK06WPIX];
    else
      set PK06M300.PK06MHLD cursor, bold;
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(57); /* invalid hold code*/
      return;
    end
  else
    if (PK06M300.PK06MHLD != " ")
      if (PK06M300.PK06MHLD in PK06W01.XHRCD from 1)
        PK06M300.PK06MHLD = PK06W01.XHRCD[sysVar.arrayIndex];
        PK06M300.XHRDESC = PK06W01.XHRDESC[sysVar.arrayIndex];
      else
        set PK06M300.PK06MHLD cursor, bold;
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(57); /* invalid hold code*/
        return;
      end
    end
  end

   /* -------------------- end pk06350 --------------------------*/
end // end PK06350

// pkarhcd pop-up-window converse
Function PK06352()
   /* --------------------- pk07352 ------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If pf12 pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (PK06W02.PK06WERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (PK06W02.PK06WFFL == "N") /* if not the first time through*/
      PK06W02.PK06WCT1 = PK06W02.PK06WINX[10] + 1; /* set up scroll pf8*/
    end

    set PK06M200 initial; /* Clear map output area*/
    PK06M200.PK06MHDR = "         PICKING ORDER HOLD CODES     ";
    PK06M200.PK06MTR1 = "              SELECT & PF12           ";
    PK06M200.PK06MTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || PK06W02.PK06WFFL == "Y")    /* Or it is the first time thru*/
      PK06W02.PK06WCT2 = 1; /* Set up screen index*/
      while (PK06W02.PK06WCT2 <= 10 /* Until end of screen lines*/
       && PK06W01.XHRCD[PK06WCT1] != "  ") /* Or end of data*/
        PK06M200.PK06MCD[PK06WCT2] = PK06W01.XHRCD[PK06WCT1];
        PK06M200.PK06MDES[PK06WCT2] = PK06W01.XHRDESC[PK06WCT1];
        PK06W02.PK06WINX[PK06WCT2] = PK06W02.PK06WCT1; /* Save array*/
        if (PK06W02.PK06WFFL == "Y") /* If first time thru*/
          PK06W02.PK06WSIX = PK06W02.PK06WCT1; /* Save last index*/
        end
        set PK06M200.PK06MSEL[PK06WCT2] normal; /* Set selects to normal*/
        PK06W02.PK06WCT2 = PK06W02.PK06WCT2 + 1; /* Increment screen index*/
        PK06W02.PK06WCT1 = PK06W02.PK06WCT1 + 1; /* Increment table index*/
      end
      PK06W02.PK06WFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      PK06W02.PK06WCT1 = PK06W02.PK06WINX[1] - 1; /* Set up table index*/
      PK06W02.PK06WCT2 = 10; /* Set up screen index*/
      while (PK06W02.PK06WCT2 >= 1) /* Load from the bottom up*/
        PK06M200.PK06MCD[PK06WCT2] = PK06W01.XHRCD[PK06WCT1];
        PK06M200.PK06MDES[PK06WCT2] = PK06W01.XHRDESC[PK06WCT1];
        PK06W02.PK06WINX[PK06WCT2] = PK06W02.PK06WCT1; /* Save array*/
        set PK06M200.PK06MSEL[PK06WCT2] normal; /* Set select visible*/
        PK06W02.PK06WCT2 = PK06W02.PK06WCT2 - 1; /* Decrement screen index*/
        PK06W02.PK06WCT1 = PK06W02.PK06WCT1 - 1; /* Decrement table index*/
      end
      if (PK06W02.PK06WCT1 < 1) /* If the table index was decremented*/
        PK06W02.PK06WCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end

  converse PK06M200 ;

  PK06W02.PK06WERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  PK06W02.PK06WCT2 = 1; /* Screen index*/
  while (PK06W02.PK06WCT2 <= 10 /* Set all fields with data to normal*/
   && PK06M200.PK06MCD[PK06WCT2] != " ")
    set PK06M200.PK06MSEL[PK06WCT2] normal;
    PK06W02.PK06WCT2 = PK06W02.PK06WCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && PK06W01.XHRCD[PK06WCT1] == "  ") /* And end of table*/
    PK06W02.PK06WERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && PK06W02.PK06WINX[1] <= PK06W02.PK06WSIX)
      PK06W02.PK06WERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is pf12) /* If pf12  pressed*/
        PK06W02.PK06WENX = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        PK06W02.PK06WCT2 = 1; /* Screen index*/
        while (PK06W02.PK06WCT2 <= 10) /* Until end of screen data*/
          if (PK06M200.PK06MSEL[PK06WCT2] != " ") /* Check for selection*/
            PK06W02.PK06WPIX = PK06W02.PK06WINX[PK06WCT2];
            PK06W02.PK06WCT2 = 11; /* End loop*/
          end
          PK06W02.PK06WCT2 = PK06W02.PK06WCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not pf12)
          PK06W02.PK06WERR = "Y"; /* set error flag*/
        end
      end
    end
  end


   /* --------------------- pk07352 ------------------------------*/
end // end PK06352

// validate default rlse date
Function PK06355()
   /* ---------- pk06355 - validate default hold date-------------*/

  PK06M100.XXXERRID = "PK06355";
  PK06W01.PK06WDT = PK06M300.PK06MDDT;

   /* 1. if entered default hold release date must be:*/
   /* 2. all 9's*/
   /* 3. must be greater then today*/
   /* 4. must be a working day*/

   /* ** 1.*/
  if (PK06W01.PK06WMM != 0
   || PK06W01.PK06WDD != 0)

    /* ======= Y2K OUT BEGIN =====*/

    /* OR PK06W01.PK06WYY NE 0;*/

    /* ======= Y2K OUT END =======*/

    /* **2.*/
    if (PK06W01.PK06WMM == 99
     || PK06W01.PK06WDD == 99)

      /* ======= Y2K OUT BEGIN =====*/

      /* OR PK06W01.PK06WYY EQ 99;*/

      /* ======= Y2K OUT END =======*/

      PK06W01.PK06WMM = 99;
      PK06W01.PK06WDD = 99;
      PK06W01.PK06WYY = 99;
    else
      /* ** 3.*/
      PK06W01.PK06WWMM = PK06W01.PK06WMM;
      PK06W01.PK06WWDD = PK06W01.PK06WDD;
      PK06W01.PK06WWYY = PK06W01.PK06WYY;

      /* ===== Y2K IN BEGIN =====*/

      if (PK06W01.PK06WYY < 60)
        PK06W01.PK06WWCC = 20;
      else
        PK06W01.PK06WWCC = 19;
      end

      /* ===== Y2K IN END =====*/


      /* ===== Y2K OUT BEGIN =====*/

      /* MOVE EZEDTE TO PK06WFDA;*/
       /* IF PK06W01.PK06WFDA GT PK06W01.PK06WWDT;*/

      /* ===== Y2K OUT END =====*/

      /* ===== Y2K IN BEGIN =====*/

      PK06WFDT = VGVar.currentGregorianDate;
      if (PK06W01.PK06WFDT > PK06W01.PK06WWDT)

        /* ===== Y2K IN END =====*/

        converseLib.validationFailed(55);
        PK06W01.PK06WERS = "Y";
        set PK06M300.PK06MDDT cursor, bold;
      else
        /* ** 4.*/
        set TA9REC empty;

        /* ======= Y2K OUT BEGIN ======*/

        /* MOVE 19 TO TA9REC.TA9BEGCC;*/

        /* ======= Y2K OUT END ======*/


        /* ======= Y2K IN BEGIN ======*/

        if (PK06W01.PK06WYY < 60)
          TA9REC.TA9BEGCC = 20;
        else
          TA9REC.TA9BEGCC = 19;
        end

        /* ======= Y2K IN END ======*/

        TA9REC.TA9BEGMM = PK06W01.PK06WMM;
        TA9REC.TA9BEGDD = PK06W01.PK06WDD;
        TA9REC.TA9BEGYY = PK06W01.PK06WYY;
        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
        if (TA9REC.TA9RTNFL != 0)
          converseLib.validationFailed(56); /* must be a working day*/
          PK06W01.PK06WERS = "Y";
          set PK06M300.PK06MDDT cursor, bold;
        else
          PK06M100.PK06MRMM = PK06W01.PK06WMM;
          PK06M100.PK06MRDD = PK06W01.PK06WDD;
          PK06M100.PK06MRYY = PK06W01.PK06WYY;
        end
      end
    end
  end

   /* --end of:  pk06355 - validate default hold date-------------*/
end // end PK06355

// validate pk06m300.pkarhcd(x)
Function PK06360()
   /* ------------ pk06360 hold rsn code edits -----------*/


  PK06M300.XXXERRID = "PK06360";

  if (PK06M300.XHRCD[PK06WNDX] == "?")
    PK06270();
    PK06W02.PK06WENX = "N";
    while (PK06W02.PK06WENX == "N")
      PK06352();
    end
    converseLib.clearScreen();
    
    if (PK06W02.PK06WPIX > 0)
      PK06M300.XHRCD[PK06WNDX] = PK06W01.XHRCD[PK06WPIX];
      PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
    end
  else
    if (PK06M300.XHRCD[PK06WNDX] != " ")
      if (PK06M300.XHRCD[PK06WNDX] in PK06W01.XHRCD from 1)
        PK06M300.XHRCD[PK06WNDX] = PK06W01.XHRCD[sysVar.arrayIndex];
        PK06W01.PK06WFLE = PK06W01.PK06WFLE + 1;
      else
        set PK06M300.XHRCD[PK06WNDX] cursor, bold;
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(57); /* invalid hold code*/
        return;
      end
    end
  end

   /* -------------------- end pk06360 --------------------------*/
end // end PK06360

// validate select release date
Function PK06365()
   /* ---------- pk06365 - validate release dates ----------------*/

  PK06M100.XXXERRID = "PK06365";

  set TA2REC empty;
  PK06W01.PK06WWD1 = 0;

   /* ======= Y2K OUT BEGIN =======*/

   /* MOVE EZEDTE TO PK06W01.PK06WFDA;*/

   /* ======= Y2K OUT BEGIN =======*/


   /* ======= Y2K IN BEGIN =======*/

  PK06W01.PK06WFDT = VGVar.currentGregorianDate;

   /* ======= Y2K IN BEGIN =======*/


  if (PK06M300.PK06MRDT == 0)

    /* ======= Y2K OUT BEGIN =======*/

    /* MOVE PK06M300.PK06MDDT TO PK06M300.PK06MRDT;*/

    /* ======= Y2K OUT END =======*/


    /* ======= Y2K IN BEGIN =======*/

    if (PK06M300.PK06MDDT != 0)
      PK06M300.PK06MRDT = PK06M300.PK06MDDT;
    else
      return;
    end

    /* ======= Y2K IN END =======*/

  end
   /* 1. if entered default hold release date must be:*/
   /* 2. all 9's*/
   /* 3. must be greater then today*/
   /* 4. must be a working day*/

   /* ** 1.*/
  if (PK06M300.PK06MRDT[PK06WNDX] != 0)
    /* **2.*/
    if (PK06M300.PK06MRDT[PK06WNDX] == 99
     || PK06M300.PK06MRDT[PK06WNDX] == 999
     || PK06M300.PK06MRDT[PK06WNDX] == 9999
     || PK06M300.PK06MRDT[PK06WNDX] == 99999
     || PK06M300.PK06MRDT[PK06WNDX] == 999999)
      PK06M300.PK06MRDT[PK06WNDX] = 999999;
      TA2REC.TA2GRGGN = 999999999;
    else

      TA2REC.TA2GRGAN = PK06M300.PK06MRDT[PK06WNDX];
      TA2REC.TA2GRTYP = "A"; /* date is in yymmdd format*/
      TA2REC.TA2DTOPT = "GREGGREG"; /* convert to all greg dates*/

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* check the date*/
      if (TA2REC.TA2RTNCD == 0000) /* date is valid*/
        PK06W01.PK06WWDT = TA2REC.TA2GRGGN;
      else
        set PK06M300.PK06MRDT[PK06WNDX] cursor, bold;
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(158);
        return;
      end

      /* ===== Y2K IN BEGIN ========*/

      if (PK06W01.PK06WWYY < 60)
        PK06W01.PK06WWCC = 20;
      else
        PK06W01.PK06WWCC = 19;
      end

      /* ===== Y2K IN END ========*/

      /* ** 3.*/

      /* ====== Y2K OUT BEGIN =======*/

      /* IF PK06W01.PK06WFDA GT PK06W01.PK06WWDT;*/

      /* ====== Y2K OUT END =======*/


      /* ====== Y2K IN BEGIN =======*/

      if (PK06W01.PK06WFDT > PK06W01.PK06WWDT)

        /* ====== Y2K IN END =======*/

        converseLib.validationFailed(55);
        PK06W01.PK06WERS = "Y";
        set PK06M300.PK06MRDT[PK06WNDX] cursor, bold;
      else
        /* ** 4.*/
        set TA9REC empty;
        TA9REC.TA9BEGDT = TA2REC.TA2GRGGN;
        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
        if (TA9REC.TA9RTNFL != 0)
          converseLib.validationFailed(56);
          PK06W01.PK06WERS = "Y";
          set PK06M300.PK06MRDT[PK06WNDX] cursor, bold;
        end
      end
    end
  end

  if (PK06W01.PK06WERS != "Y")
    PK06W04.PKBRELDT[PK06WIX4] = TA2REC.TA2GRGGN;
  end

   /* --- end of:pk06365 - validate release dates ----------------*/
end // end PK06365

// check for dup holds
Function PK06370()
   /* ------------pk06370 - check for dup holds ------------------*/


  PK06M300.XXXERRID = "PK06370";
  set PKZREC empty;
  set PKBREC empty;
  PKBREC.XWHCD = PK06M300.XWHCD;
  PKBREC.PK1CUOID = PK06M300.PK1CUOID[PK06WNDX];
  PKBREC.PK1NORID = PK06M300.PK1NORID[PK06WNDX];
  PKBREC.XHRCD = PK06M300.XHRCD[PK06WNDX];
  PKZREC.PKZFUNC = "S ";
  PK06125();
  if (SQLCA.VAGen_SQLCODE == 0 /* successful*/
   || SQLCA.VAGen_SQLCODE == -811)
    set PK06M300.PK06MSEL[PK06WNDX] cursor, bold;
    set PK06M300.XHRCD[PK06WNDX] bold;
    PK06W01.PK06WERS = "Y";
    converseLib.validationFailed(302);
  end

   /* ------- end:pk06370 - check for dup holds ------------------*/
end // end PK06370

// load pkyrec for ord/itm xfer
Function PK06375()
   /* -------------- pk06375 - load array for xfer ---------------*/

  set PKYREC empty;
  PKYREC.XWHCD = PK06M300.XWHCD;
  PKWREC.PKWINDEX = 1;
  if (converseVar.eventKey is pf13)
    PKWREC.PKWSLTYP[PKWINDEX] = "O";
  else
    PKWREC.PKWSLTYP[PKWINDEX] = "S";
  end
  PK06W04.PK06WIX4 = 1;
  PK06W01.PK06WWIX = 1;
  while (PK06W04.PK06WIX4 <= PK06W04.PK06WCNT
   && PK06W01.PK06WWIX <= 30)
    if (PK06W04.PK06WSEL[PK06WIX4] == "S")
      PKYREC.PKYORACT[PK06WWIX] = "S";
      PKYREC.PK1CUOID[PK06WWIX] = PK06W04.PK1CUOID[PK06WIX4];
      PKYREC.PK1NORID[PK06WWIX] = PK06W04.PK1NORID[PK06WIX4];
      PK06W01.PK06WWIX = PK06W01.PK06WWIX + 1;
    end
    PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
  end
  PKWREC.PKWARRAY[PKWINDEX] = PKYREC.PKWARRAY;

  if (PK06W04.PK06WIX4 <= PK06W04.PK06WCNT)
    set PKYREC empty;
    PK06W01.PK06WWIX = 1;
    PKWREC.PKWINDEX = 2;
    PKWREC.PKWSLTYP[PKWINDEX] = "O";
    while (PK06W04.PK06WIX4 <= PK06W04.PK06WCNT
     && PK06W01.PK06WWIX <= 30)
      if (PK06W04.PK06WSEL[PK06WIX4] == "S")
        PKYREC.PKYORACT[PK06WWIX] = "S";
        PKYREC.PK1CUOID[PK06WWIX] = PK06M300.PK1CUOID[PK06WIX4];
        PKYREC.PK1NORID[PK06WWIX] = PK06M300.PK1NORID[PK06WIX4];
        PK06W01.PK06WWIX = PK06W01.PK06WWIX + 1;
      end
      PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
    end
  end

   /* --------- end: pk06375 - load array for xfer ---------------*/
end // end PK06375

// load pkxrec for cust xfer
Function PK06380()
   /* -------------- pk06380 - load array for cust xfer ----------*/

  set PKXREC empty;
  PKXREC.XWHCD = PK06M300.XWHCD;
  PKXREC.XWHABRV = PKWREC.XWHABRV;
  PKWREC.PKWINDEX = 1;
  PKWREC.PKWSLTYP[PKWINDEX] = "C";

  PK06W04.PK06WIX4 = 1;
  PK06W01.PK06WWIX = 1;
  while (PK06W04.PK06WIX4 <= PK06W04.PK06WCNT
   && PK06W01.PK06WWIX <= 30)
    if (PK06W04.PK06WSEL[PK06WIX4] == "S")
      PKXREC.PKXKUACT[PK06WWIX] = "S";
      PKXREC.KUCCOID[PK06WWIX] = PK06W04.KUCCOID[PK06WIX4];
      PKXREC.KUMSTRID[PK06WWIX] = PK06W04.KUMSTRID[PK06WIX4];
      PKXREC.XNXCD[PK06WWIX] = PK06W04.XNXCD[PK06WIX4];
      PK06W01.PK06WWIX = PK06W01.PK06WWIX + 1;
    end
    PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
  end
  PKWREC.PKWARRAY[PKWINDEX] = PKXREC.PKWARRAY;

  if (PK06W04.PK06WIX4 <= PK06W04.PK06WCNT)
    set PKXREC empty;
    PK06W01.PK06WWIX = 1;
    PKWREC.PKWINDEX = 2;
    PKWREC.PKWSLTYP[PKWINDEX] = "O";
    while (PK06W04.PK06WIX4 <= PK06W04.PK06WCNT
     && PK06W01.PK06WWIX <= 30)
      if (PK06W04.PK06WSEL[PK06WIX4] == "S")
        PKXREC.PKXKUACT[PK06WWIX] = "S";
        PKXREC.KUCCOID[PK06WWIX] = PK06W04.KUCCOID[PK06WIX4];
        PKXREC.KUMSTRID[PK06WWIX] = PK06W04.KUMSTRID[PK06WIX4];
        PKXREC.XNXCD[PK06WWIX] = PK06W04.XNXCD[PK06WIX4];
        PK06W01.PK06WWIX = PK06W01.PK06WWIX + 1;
      end
      PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
    end
    PKWREC.PKWARRAY[PKWINDEX] = PKXREC.PKWARRAY;
  end

   /* ----------end: pk06380 - load array for cust xfer ----------*/
end // end PK06380

// process valid request
Function PK06400()
   /* ------------ pk06400 update those orders selected --------*/

  if (PK06W01.PK06WUPD != "Y")
    return;
  end

  PK06W04.PK06WIX4 = 1;
  PK06W01.PK06WERS = "N";
  while (PK06W04.PK06WIX4 <= PK06W04.PK06WCNT
   && PK06W01.PK06WERS != "Y")
    if (PK06W04.PK06WSEL[PK06WIX4] == "H")
      PK06500(); /* process order hold*/
    else
      if (PK06W04.PK06WSEL[PK06WIX4] == "R")
        PK06600(); /* process order release*/
      else
        if (PK06W04.PK06WSEL[PK06WIX4] == "C")
          PK06700(); /* change order release date*/
        end
      end
    end
    if (PK06W01.PK06WERS == "Y")
      if (SQLCA.VAGen_SQLCODE != -911)
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        exit stack;
      end
    else
      if (PK06W04.PK06WSEL[PK06WIX4] == "H"
       || PK06W04.PK06WSEL[PK06WIX4] == "R"
       || PK06W04.PK06WSEL[PK06WIX4] == "C")
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        if (PK06W04.PK06WSEL[PK06WIX4] == "R")
          PK06W04.PKBRELDT[PK06WIX4] = 0;
          PK06W04.XHRCD[PK06WIX4] = " ";
        end
        PK06W04.PK06WSEL[PK06WIX4] = "*";
        PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
      else
        PK06W04.PK06WIX4 = PK06W04.PK06WIX4 + 1;
      end
    end
  end

  if (PK06W01.PK06WERS == "N")
    PK06W04.PK06WIX4 = PK06W04.PK06WSVX;
    PK06M100.XXXERRID = "PK06400";
    PK06M300.XXXERRID = "PK06400";
    PK06W01.PK06WLSC = "Y";
    converseLib.validationFailed(32);
  else
    if ("*" in PK06W04.PK06WSEL from 1)
      PK06W04.PK06WIX4 = PK06W04.PK06WSVX;
      PK06M100.XXXERRID = "PK06400";
      PK06M300.XXXERRID = "PK06400";
      PK06W01.PK06WLSC = "Y";
      converseLib.validationFailed(113); /* partial update completed*/
    end
  end

   /* ------------ pk06400 update those orders selected --------*/
end // end PK06400

// * order hold update
Function PK06500()
   /* ----- pk06500*/
   /* ----- update hold tables*/


  PK06M300.XXXERRID = "PK06500";

   /* create order hold row*/

  set PKBREC empty;
  PKBREC.XWHCD = PK06M300.XWHCD;
  PK06W01.PK06WPTN = PK06W04.PK1CUOID[PK06WIX4];
  PKBREC.PK1PRTN = PK06W01.PK06WPRT;
  PKBREC.PK1CUOID = PK06W04.PK1CUOID[PK06WIX4];
  PKBREC.PK1NORID = PK06W04.PK1NORID[PK06WIX4];
  if (PK06W04.XHRCD[PK06WIX4] == " ")
    PKBREC.XHRCD = PK06M100.PK06MDHC;
    PK06W04.XHRCD[PK06WIX4] = PK06M100.PK06MDHC;
  else
    PKBREC.XHRCD = PK06W04.XHRCD[PK06WIX4];
  end
  PK06W01.PK06WFDA = VGVar.currentShortGregorianDate;
  PKBREC.ZZZCHGDT = PK06W01.PK06WFDT; /* change date*/
  PKBREC.ZZZCHGCT = 0; /* change count*/
  PKBREC.XXXUSRID = COMMAREA.CAUSERID;
  PK06W01.PK06WTIM = VGVar.currentFormattedTime;
  PK06W01.PK06WTHH = PK06W01.PK06WHH;
  PK06W01.PK06WTMM = PK06W01.PK06WMI;
  PKBREC.ZZZCHGTM = PK06W01.PK06WTI; /* change time*/
  if (PK06W04.PKBRELDT[PK06WIX4] == 0)
    PK06W01.PK06WFMM = PK06M100.PK06MRMM;
    PK06W01.PK06WFDD = PK06M100.PK06MRDD;
    PK06W01.PK06WFYY = PK06M100.PK06MRYY;
    if (PK06W01.PK06WFYY >= 50)
      PK06W01.PK06WFCT = 19;
    else
      PK06W01.PK06WFCT = 20;
    end
    PKBREC.PKBRELDT = PK06W01.PK06WFDT;
    PK06W04.PKBRELDT[PK06WIX4] = PK06W01.PK06WFDT;
  else
    PKBREC.PKBRELDT = PK06W04.PKBRELDT[PK06WIX4];
  end

   /* --5/16/89--- if release date is not '999999' subtract 1 from*/
   /* ------------ release date and move to the plan release date*/

  PK06W01.PK06WFDT = PKBREC.PKBRELDT;


   /* ====== Y2K OUT BEGIN ======*/

   /* IF PK06W01.PK06WFMM NE 99*/
    /* OR PK06W01.PK06WFDD NE 99*/
    /* OR PK06W01.PK06WFYY NE 99;*/

   /* ====== Y2K OUT END ======*/

   /* ====== Y2K IN BEGIN ======*/

  if (PK06W01.PK06WFMM != 99
   && PK06W01.PK06WFDD != 99
   && PK06W01.PK06WFYY != 99)

    /* ====== Y2K IN END ======*/


    set TA9REC empty;
    TA9REC.TA9BEGDT = PK06W01.PK06WFDT;
    TA9REC.TA9OFSET = -1;

    try
      call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
    end /* subtract 1 from date*/

    /* ------------------------------------------------------------*/
     /* if successful, move date and continue through process*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* call successful*/
     && TA9REC.TA9RTNFL == 0)          /* and normal return codes*/

      PKBREC.PKBPLRDT = TA9REC.TA9RTNDT;

    else

      /* ------------------------------------------------------------*/
       /* otherwise indicate that a system error has occurred*/
      /* ------------------------------------------------------------*/

      PK06W01.PK06WERS = "Y";
      TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return codes*/
      TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* subroutine parameters*/
      converseLib.validationFailed(29); /* fatal error*/
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
      TA1REC.TA1TYPE = "APPL"; /* type of error*/
      TA1REC.TA1LOC = "UPDATE PLAN RELEASE DATE";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
      TA1REC.TA1PGMNO = "PK06"; /* program number*/
      TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* map application*/
      TA1REC.TA1MAPNO = "PK06M300"; /* map number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/

      exit stack; /* exit to display map*/

    end

  else
    PKBREC.PKBPLRDT = PK06W01.PK06WFDT;

  end

  PKZREC.PKZFUNC = "A ";
  call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes}; /* add order hold row*/
  if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
    PK06510(); /* update hold flag on pool header*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(28); /* contention for data base resorce*/
      return;
    else
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(29); /* fatal error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PK06500 "; /* Process name*/
      TA1REC.TA1LOC = "ADD                      ";
      TA1REC.TA1MAP = "PK06M300"; /* Map name*/
      TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      return;
    end
  end

   /* ----- end pk06500*/
end // end PK06500

// update pool header hld-cd
Function PK06510()

   /* ----- pk06510*/
   /* ----- update pool header hold code if in pool*/

  PK06M300.XXXERRID = "PK06510";

   /* ----- update the pool header hold code to 'y'*/
   /* -----*/
  set PWIREC empty;
  set PK4REC empty;
  PK4REC.XWHCD = PK06M300.XWHCD;
  PK4REC.PK1CUOID = PK06W04.PK1CUOID[PK06WIX4];
  PK4REC.PK1NORID = PK06W04.PK1NORID[PK06WIX4];
  PWIREC.PWIFUNC = "S ";
  PK06121(); /* select unique*/
                                    /* on pool header*/
  if (SQLCA.VAGen_SQLCODE != 0) /* successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      converseLib.validationFailed(70); /* update ok but order not in pool*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(21); /* contention for data base resorce*/
      end
    end
    return;
  else
    if (PK4REC.PK4ORHLD != "Y")
      PK4REC.PK4ORHLD = "Y";
      PK06W04.PK4ORHLD[PK06WIX4] = "Y";

   /* ====== Y2K OUT BEGIN ======*/

     /* MOVE 19 TO PK06W01.PK06WFCT;*/
     /* MOVE EZEDTE TO PK06W01.PK06WFDA;*/

   /* ====== Y2K OUT END ======*/


   /* ====== Y2K IN BEGIN ======*/

      PK06W01.PK06WFDT = VGVar.currentGregorianDate;

   /* ====== Y2K IN END ======*/

      PK4REC.ZZZCHGDT = PK06W01.PK06WFDT; /* change date*/
      PK06W01.PK06WTIM = VGVar.currentFormattedTime;
      PK06W01.PK06WTHH = PK06W01.PK06WHH;
      PK06W01.PK06WTMM = PK06W01.PK06WMI;
      PK4REC.ZZZCHGTM = PK06W01.PK06WTI; /* change time*/
      PWIREC.PWIFUNC = "U ";
      PK06121(); /* update*/
      if (SQLCA.VAGen_SQLCODE != 0) /* successful*/
        if (SQLCA.VAGen_SQLCODE == -911)
          PK06W01.PK06WERS = "Y";
          converseLib.validationFailed(21); /* contention for data base resorce*/
        end
      end
    end
  end
   /* ----- end pk06510*/
end // end PK06510

// * order release
Function PK06600()
   /* ----- pk06600*/
   /* ----- update hold tables*/
   /* ----- order release processing*/

  PK06M300.XXXERRID = "PK06600";
  set PKZREC empty;
  set PKBREC empty;
  PKBREC.XWHCD = PK06M300.XWHCD;
  PKBREC.PK1CUOID = PK06W04.PK1CUOID[PK06WIX4];
  PKBREC.PK1NORID = PK06W04.PK1NORID[PK06WIX4];
  PKBREC.XHRCD = PK06W04.XHRCD[PK06WIX4];
  PKZREC.PKZFUNC = "D ";
  PK06125();
  if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
    set PKZREC empty;
    set PKBREC empty;
    PKBREC.XWHCD = PK06M300.XWHCD;
    PKBREC.PK1CUOID = PK06W04.PK1CUOID[PK06WIX4];
    PKBREC.PK1NORID = PK06W04.PK1NORID[PK06WIX4];
    PKBREC.XHRCD = "*";
    PKZREC.PKZFUNC = "CT";
    PK06125(); /* are there any more holds*/
    if (PKZREC.PKZSUM1 == 0) /* no more holds found*/
      PK06610(); /* update hold flag on pool header*/
    end
  end

   /* ----- end pk06600*/
end // end PK06600

// update pool header hld-cd
Function PK06610()
   /* ----- pk06610*/
   /* ----- update pool header hold code if there*/


  PK06M300.XXXERRID = "PK06610";

   /* ----- update the pool header hold code to 'n'*/
   /* -----*/
  set PWIREC empty;
  set PK4REC empty;
  PK4REC.XWHCD = PK06M300.XWHCD;
  PK4REC.PK1CUOID = PK06W04.PK1CUOID[PK06WIX4];
  PK4REC.PK1NORID = PK06W04.PK1NORID[PK06WIX4];
  PWIREC.PWIFUNC = "S ";
  PK06121();
                                  /* on pool header*/
  if (SQLCA.VAGen_SQLCODE != 0) /* successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      converseLib.validationFailed(70); /* update ok but order not on pool*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        PK06W01.PK06WERS = "Y";
        converseLib.validationFailed(21); /* contention for data base resorce*/
      end
    end
    return;
  else
    if (PK4REC.PK4ORHLD == "Y")
      PK4REC.PK4ORHLD = "N";
      PK06W04.PK4ORHLD[PK06WIX4] = "N";

   /* ====== Y2K OUT BEGIN =======*/

     /* MOVE 19 TO PK06W01.PK06WFCT;*/
     /* MOVE EZEDTE TO PK06W01.PK06WFDA;*/

   /* ====== Y2K OUT END =======*/


   /* ====== Y2K IN BEGIN =======*/

      PK06W01.PK06WFDT = VGVar.currentGregorianDate;

   /* ====== Y2K IN END =======*/

      PK4REC.ZZZCHGDT = PK06W01.PK06WFDT; /* change date*/
      PK06W01.PK06WTIM = VGVar.currentFormattedTime;
      PK06W01.PK06WTHH = PK06W01.PK06WHH;
      PK06W01.PK06WTMM = PK06W01.PK06WMI;
      PK4REC.ZZZCHGTM = PK06W01.PK06WTI; /* change time*/
      PWIREC.PWIFUNC = "U ";
      PK06121();
      if (SQLCA.VAGen_SQLCODE != 0) /* successful*/
        if (SQLCA.VAGen_SQLCODE == -911)
          PK06W01.PK06WERS = "Y";
          converseLib.validationFailed(21); /* contention for data base resorce*/
        end
      end
    end
  end
   /* ----- end pk06610*/
end // end PK06610

// change release date
Function PK06700()

   /* ----- pk06700*/
   /* ----- update hold tables*/
   /* ----- change release date*/


  PK06M300.XXXERRID = "PK06700";


  set TA9REC empty;
  TA9REC.TA9BEGDT = PK06W04.PKBRELDT[PK06WIX4];

   /* --5/16/89--- if release date is not '999999' subtract 1 from*/
   /* ------------ release date and move to the plan release date*/


   /* ======= Y2K OUT BEGIN =======*/

   /* IF TA9REC.TA9BEGMM EQ 99*/
    /* OR TA9REC.TA9BEGDD EQ 99*/
    /* OR TA9REC.TA9BEGYY EQ 99;*/

   /* ======= Y2K OUT END =======*/

   /* ======= Y2K IN BEGIN =======*/

  if (TA9REC.TA9BEGMM == 99
   && TA9REC.TA9BEGDD == 99
   && TA9REC.TA9BEGYY == 99)

   /* ======= Y2K IN END =======*/

    TA9REC.TA9BEGDT = 999999999;
    TA9REC.TA9RTNDT = 999999999;
  else
    TA9REC.TA9OFSET = -1;
    try
      call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
    end /* subtract 1 from date*/
    if (sysVar.errorCode == "00000000" /* call successful*/
     && TA9REC.TA9RTNFL == 0)          /* and normal return code*/
       /* next sentence*/
    else
      PK06W01.PK06WERS = "Y";
      TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
      TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* subroutine parameters*/
      converseLib.validationFailed(29); /* fatal error*/
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
      TA1REC.TA1TYPE = "APPL"; /* type of error*/
      TA1REC.TA1LOC = "UPDATE FOR PLAN RELEASE DATE";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
      TA1REC.TA1PGMNO = "400"; /* program number*/
      TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* map application*/
      TA1REC.TA1MAPNO = "M010"; /* map number*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/
      return; /* exit to display map*/
    end
  end


  PKBREC.XWHCD = PK06M300.XWHCD;
  PKBREC.PK1CUOID = PK06W04.PK1CUOID[PK06WIX4];
  PKBREC.PK1NORID = PK06W04.PK1NORID[PK06WIX4];
  PKBREC.XHRCD = PK06W04.XHRCD[PK06WIX4];
  TA1REC.TA1LOC = "SELECT";
  PKZREC.PKZFUNC = "S ";
  PK06125();
  if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
    TA1REC.TA1LOC = "UPDATE";

   /* ====== Y2K OUT BEGIN =======*/

   /* MOVE 19 TO PK06W01.PK06WFCT;    /* setup change date*/
   /* MOVE EZEDTE TO PK06W01.PK06WFDA;*/

   /* ====== Y2K OUT END =======*/


   /* ====== Y2K IN BEGIN =======*/

    PK06W01.PK06WFDT = VGVar.currentGregorianDate;

   /* ====== Y2K IN END =======*/

    PKBREC.ZZZCHGDT = PK06W01.PK06WFDT; /* change date*/
    PKBREC.XXXUSRID = COMMAREA.CAUSERID; /* userid*/
    PK06W01.PK06WTIM = VGVar.currentFormattedTime; /* setup change time*/
    PK06W01.PK06WTHH = PK06W01.PK06WHH;
    PK06W01.PK06WTMM = PK06W01.PK06WMI;
    PKBREC.ZZZCHGTM = PK06W01.PK06WTI; /* change time*/
    PKBREC.PKBRELDT = TA9REC.TA9BEGDT; /* MOVE NEW RLSE DATES*/
    PKBREC.PKBPLRDT = TA9REC.TA9RTNDT;
    PKZREC.PKZFUNC = "U ";
    PK06125();
  end

  if (SQLCA.VAGen_SQLCODE != 0) /* successful*/
    if (SQLCA.VAGen_SQLCODE == -911)
      PK06W01.PK06WERS = "Y";
      converseLib.validationFailed(28); /* contention for data base resorce*/
    end
  end

   /* ----- end pk06700*/
end // end PK06700

Record PK06W01 type basicRecord
  10 PK06WFL1 PK06WFL1 ; 
  10 PK06WFL4 PK06WFL4 ; 
  10 PK06WVSF PK06WVSF ; 
  10 PK06WCPG PK06WCPG ; 
  10 PK06WPGS PK06WPGS ; 
    15 PK06WPGI PK06WPGI ; 
    15 PK06WPGD PK06WPGD ; 
  10 PK06WFTF PK06WFTF ; 
  10 PK06WGET PK06WGET ; 
  10 PK06WTRN PK06WTRN ; 
  10 PK06WSEL PK06WSEL ; 
  10 PK06WLSC PK06WLSC ; 
  10 PK06WKHF PK06WKHF ; 
  10 PK06WCHF PK06WCHF ; 
  10 PK06WFLE PK06WFLE ; 
  10 PK06WTRR PK06WTRR ; 
  10 PK06WNDX PK06WNDX ; 
  10 PK06WDT PK06WDT ; 
    15 PK06WMM PK06WMM ; 
    15 PK06WDD PK06WDD ; 
    15 PK06WYY PK06WYY ; 
  10 PK06WWDT PK06WWDT ; 
    15 PK06WWCC PK06WWCC ; 
    15 PK06WWYY PK06WWYY ; 
    15 PK06WWMM PK06WWMM ; 
    15 PK06WWDD PK06WWDD ; 
  10 PK06WWD1 PK06WWD1 ; 
  10 PK06WWD2 PK06WWD2 ; 
  10 PK06WFDT PK06WFDT ; 
    15 PK06WFCT PK06WFCT ; 
    15 PK06WFDA PK06WFDA ; 
      20 PK06WFYY PK06WFYY ; 
      20 PK06WFMM PK06WFMM ; 
      20 PK06WFDD PK06WFDD ; 
  10 PK06WTIM PK06WTIM ; 
    15 PK06WHH PK06WHH ; 
    15 * char(1) ; 
    15 PK06WMI PK06WMI ; 
    15 * char(1) ; 
    15 PK06WSS PK06WSS ; 
  10 PK06WTI PK06WTI ; 
    15 PK06WTHH PK06WTHH ; 
    15 PK06WTMM PK06WTMM ; 
  10 PK06WMAP PK06WMAP ; 
  10 PK06WERS PK06WERS ; 
  10 PK06WUPD PK06WUPD ; 
  10 PK06WWIX PK06WWIX ; 
  10 PK06WSUX PK06WSUX ; 
  10 PK06W-XBCABRV PK06W-XBCABRV ; 
  10 XHRCD XHRCD [200] ; 
  10 XHRABRV XHRABRV [200] ; 
  10 XHRDESC XHRDESC [200] ; 
  10 PK06WPRT PK06WPRT ; 
    15 PK06WPTN PK06WPTN ; 
  10 PK06WDTS PK06WDTS [2] ; 
    15 OP1CUNDT OP1CUNDT ; 
    15 OP1DSBDT OP1DSBDT ; 
    15 PK4PLNDT PK4PLNDT ; 
end // end PK06W01

//*** RECORD=PK06W02 ****
// ************************************************************
// 
//         ***** POP UP WINDOW WORKING RECORD *****
// 
// ************************************************************
// 
//            This record is the working record used by
//            a CSP pop up window processes - pk06m200
//            and pk06m210 for internal picking hold code
//            table.
// 
// ************************************************************
// ***********************
Record PK06W02 type basicRecord
  10 PK06WCT1 PK06WCT1 ; 
  10 PK06WCT2 PK06WCT2 ; 
  10 PK06WSIX PK06WSIX ; 
  10 PK06WPIX PK06WPIX ; 
  10 PK06WINX PK06WINX [10] ; 
  10 PK06WENX PK06WENX ; 
  10 PK06WFFL PK06WFFL ; 
  10 PK06WERR PK06WERR ; 
end // end PK06W02

//*** RECORD=PK06W03 ****
// * ----------------------------------------------------------
// *       working storage record for application pk06
// *
// *       pk06w03 - image of screen pk06m100
// *
// *  this record is used in conjunction with pkwrec.pkwuserb
// *  for xfer to via pf keys - so that upon return the screen
// *  that was originaly up will return intact.
// *
// * ----------------------------------------------------------
// ***********************
Record PK06W03 type basicRecord
  5 PK06WSCR PK06WSCR ; 
    10 XXXERRID XXXERRID ; 
    10 XXXRVNBR XXXRVNBR ; 
    10 PK06MTIM PK06MTIM ; 
    10 XXXCURDT XXXCURDT ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 XOTCD XOTCD ; 
    10 XOTDESC XOTDESC ; 
    10 PK1CUOID PK1CUOID ; 
    10 PK06MNFM PK06MNFM ; 
    10 PK06MNFD PK06MNFD ; 
    10 PK06MNFY PK06MNFY ; 
    10 PK06MNTM PK06MNTM ; 
    10 PK06MNTD PK06MNTD ; 
    10 PK06MNTY PK06MNTY ; 
    10 TF1CARCD TF1CARCD ; 
    10 TF1ABRV TF1ABRV ; 
    10 PK06MDFM PK06MDFM ; 
    10 PK06MDFD PK06MDFD ; 
    10 PK06MDFY PK06MDFY ; 
    10 PK06MDTM PK06MDTM ; 
    10 PK06MDTD PK06MDTD ; 
    10 PK06MDTY PK06MDTY ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 SP1ID SP1ID ; 
    10 SP1ABRV SP1ABRV ; 
    10 XHRCD XHRCD ; 
    10 XHRDESC XHRDESC ; 
    10 PK06MRFM PK06MRFM ; 
    10 PK06MRFD PK06MRFD ; 
    10 PK06MRFY PK06MRFY ; 
    10 PK06MRTM PK06MRTM ; 
    10 PK06MRTD PK06MRTD ; 
    10 PK06MRTY PK06MRTY ; 
    10 PK06MARL PK06MARL ; 
    10 PK06MXHD PK06MXHD ; 
    10 PK06MAHD PK06MAHD ; 
    10 PK06MXPL PK06MXPL ; 
    10 PK06MDHC PK06MDHC ; 
    10 PK06MDHR PK06MDHR ; 
    10 PK06MXNP PK06MXNP ; 
    10 PK06MRMM PK06MRMM ; 
    10 PK06MRDD PK06MRDD ; 
    10 PK06MRYY PK06MRYY ; 
end // end PK06W03

//*** RECORD=PK06W04 ****
//   maintenance log:
// 
//   date        init     comments
//   ---------   ------   -----------------------------------
//   02-15-90    kande1   added pk06wtun total units in array
// ***********************
Record PK06W04 type basicRecord
  10 PK06WMAX PK06WMAX ; 
  10 PK06WCNT PK06WCNT ; 
  10 PK06WTUN PK06WTUN ; 
  10 PK06WIX4 PK06WIX4 ; 
  10 PK06WIX5 PK06WIX5 ; 
  10 PK06WSVX PK06WSVX ; 
  10 PK06WDAT PK06WDAT [668] ; 
    15 PK06WSEL PK06WSEL ; 
    15 PK4ORHLD PK4ORHLD ; 
    15 XHRCD XHRCD ; 
    15 PKBRELDT PKBRELDT ; 
    15 PK06WPLF PK06WPLF ; 
    15 PK1CUOID PK1CUOID ; 
    15 PK1NORID PK1NORID ; 
    15 XOTCD XOTCD ; 
    15 XBCCD XBCCD ; 
    15 KUCCOID KUCCOID ; 
    15 KUMSTRID KUMSTRID ; 
    15 XNXCD XNXCD ; 
    15 PK06WSNM PK06WSNM ; 
    15 TF1CARCD TF1CARCD ; 
    15 OP1DSBDT OP1DSBDT ; 
    15 PK4OTUNT PK4OTUNT ; 
end // end PK06W04

// auto hold flag
DataItem PK06MAHD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// auto release flag
DataItem PK06MARL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "from" dsnb dd
DataItem PK06MDFD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "from" dsnb mm
DataItem PK06MDFM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "from" dsnb yy
DataItem PK06MDFY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// default hold code
DataItem PK06MDHC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// default hold desc
DataItem PK06MDHR char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "to  " dsnb dd
DataItem PK06MDTD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "to  " dsnb mm
DataItem PK06MDTM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "to  " dsnb yy
DataItem PK06MDTY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "from" need dd
DataItem PK06MNFD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "from" need mm
DataItem PK06MNFM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "from" need yy
DataItem PK06MNFY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "to  " need dd
DataItem PK06MNTD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "to  " need mm
DataItem PK06MNTM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "to  " need yy
DataItem PK06MNTY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// default release date(dd)
DataItem PK06MRDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "from" rlse dd
DataItem PK06MRFD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "from" rlse mm
DataItem PK06MRFM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "from" rlse yy
DataItem PK06MRFY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// default release date(mm)
DataItem PK06MRMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "to  " rlse dd
DataItem PK06MRTD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "to  " rlse mm
DataItem PK06MRTM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "to  " rlse yy
DataItem PK06MRTY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// default release date(yy)
DataItem PK06MRYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current time
DataItem PK06MTIM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// exclude holds flag
DataItem PK06MXHD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// exclude non-planned flag
DataItem PK06MXNP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// exclude planned flag
DataItem PK06MXPL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// brand code abreviation
DataItem PK06W-XBCABRV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// carrier hold flag
DataItem PK06WCHF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total entries in array
DataItem PK06WCNT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current pk06m300 page
DataItem PK06WCPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// table counter
DataItem PK06WCT1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// screen counter
DataItem PK06WCT2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// screen array
DataItem PK06WDAT char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem PK06WDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group date mmddyy
DataItem PK06WDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold dates for selection
DataItem PK06WDTS char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag
DataItem PK06WENX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// scroll error flag
DataItem PK06WERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem PK06WERS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem PK06WFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group yymmdd
DataItem PK06WFDA num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PK06WFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group yyyymmdd
DataItem PK06WFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first time thru flag
DataItem PK06WFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of vholdr01 tbl flag
DataItem PK06WFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table overflow flag
DataItem PK06WFL4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fields entered counter
DataItem PK06WFLE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem PK06WFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first time thru flag
DataItem PK06WFTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PK06WFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// get data flag
DataItem PK06WGET char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hours
DataItem PK06WHH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// counter link screen/table
DataItem PK06WINX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// array index
DataItem PK06WIX4 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// array index
DataItem PK06WIX5 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer hold flag
DataItem PK06WKHF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// load screen flag
DataItem PK06WLSC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved current map id
DataItem PK06WMAP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max entries (see pk06005)
DataItem PK06WMAX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// minutes
DataItem PK06WMI char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PK06WMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// general index
DataItem PK06WNDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// left overs for divide
DataItem PK06WPGD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total pages for pk06m300
DataItem PK06WPGI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work area for page cnt
DataItem PK06WPGS num(10,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// passed index table location
DataItem PK06WPIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ord on plan flag
DataItem PK06WPLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order part character
DataItem PK06WPRT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "            " numeric
DataItem PK06WPTN num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk06m100 screen image grplvl
DataItem PK06WSCR char(212)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// action field
DataItem PK06WSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of first page save index
DataItem PK06WSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// store short name
DataItem PK06WSNM char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// seconds
DataItem PK06WSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save array pos of update
DataItem PK06WSUX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save array position
DataItem PK06WSVX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hours
DataItem PK06WTHH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// time
DataItem PK06WTI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group time
DataItem PK06WTIM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minutes
DataItem PK06WTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// transfer warning flag
DataItem PK06WTRN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total records read
DataItem PK06WTRR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total units in array
DataItem PK06WTUN num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// update flag
DataItem PK06WUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// release date error flag
DataItem PK06WVSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date CENTURY
DataItem PK06WWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work-date 1
DataItem PK06WWD1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work-date 2
DataItem PK06WWD2 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work day
DataItem PK06WWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date CCyymmdd
DataItem PK06WWDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work idx
DataItem PK06WWIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work month
DataItem PK06WWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem PK06WWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem PK06WYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

