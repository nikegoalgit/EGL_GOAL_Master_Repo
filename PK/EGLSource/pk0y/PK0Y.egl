package pk0y;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import in1.common.*;
import ku.common.*;
import ob.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sl.common.*;
import sm.common.*;
import sp.common.*;
import sr.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PK0Y ****
// ------------------------------------------------------------
// This application displays the On-Demand Customer Labels Sub-
// Menu and both Subordinate screens.
// 
// The menu is displayed for the user to select if the customer
// labels will be printed by order, or by product.
// Subordinate screens allow the user to view the order or
// product information, select the number of labels to be
// printed, and change the print destination for the labels.
// 
// Job Control Language statements are formatted and submitted
// through the Internal Reader Transient Data Queue (INTR).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// *** THE JCL FOR EACH JOB IS STORED AS A TABLE. ***
// 
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TF0BTTYP).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed, as follows:
// 
// PK0YTTYP        JCL statement        Variable        Columns
// --------        -------------        --------        -------
//    E                EXEC             PK0YWEXE         16-21
//    J                JOB              PK0YWUID          5-10
//    P             Parameters          PK0YWJCL          1-80
//    L             Label Ouput Class   PK0YWOUT         22-01
//    M             Label Destination   PK0YMRMT         22-01
//                                      PK0YMDST         23-03
//    Q             Complete/Abend Msg  PK0YW-MSGID       1-80
//                                      PK0YW-EIBRM
//                                      PK0YW-JOBID
//                                      PK0YW-USRID
//                                      PK0YW-MM
//                                      PK0YW-DD
//                                      PK0YW-YY
//                                      PK0YW-HR
//                                      PK0YW-MIN
// 
// The data in working storage (PK0YW01) is substituted and the
// statement is written to the internal reader.
// 
// The user may exit to any allowed application, via PF key,
// from the menu, only.
// 
// ------------------------------------------------------------
// 
// THE FOLLOWING IS A LIST OF THE TABLES CONTAINING ON-LINE
// SUBMITTED JCL AND THE DESCRIPTION FOR EACH:
// 
// PK0YT02 - PK4761 Print On-Demand Customer labels by Order
// PK0YTXX - PK4### Print On-Demand Customer Labels by Product
// 
// PK0YTZP - List of remotes to zebra printers
// 
// ------------------------------------------------------------
// 
// CONTROL   DATE       NAME    DESCRIPTION OF CHANGE
// ------- --------    ------   -------------------------------
//         11/22/94    pstroe   New application.
//         02/23/95    pstroe   Added label stock to map02,
//                              also added hard coded logic
//                              for Customer Number 2000221
//                              (World Footlocker).  This
//                              logic allows for a mis-match
//                              between the customer/label
//                              code combination.
//         08/01/95    KGROH    Added 4 customers to internal
//                              label table: Dick's, Sports &
//                              Rec (apparel), Sportmart and
//                              Sports Authority.  Also added a
//                              UOM column and a Ticket
//                              Quantity column.  Ticket qty is
//                              UOM x Order Qty.
// CANADA  08/11/95    CBRINE   Added XCTCD to PKWREC
//         01/05/96    KGROH    Add JCP Retail to list of valid
//                              footwear ticketing customers.
//         03/08/96    dfarli   Add four kinney footware
//                              divisions to valid ticket table
//         06/12/96    DGRIGG   Add remote printer RMT356 to
//                              zebra printer table.PK0YTZP
//         06/17/96    DGRIGG   Chg valid ticketing table: chg
//                              LL Bean to use label stock 1 &
//                              add JCPenney catlg to list of
//                              valid apparel tickt'g customers
//         10/01/96    mmcgol   added pk0ym004-sel by caselot
//         11/12/96    DGRIGG   Select op-line-item-nbr from
//                              order item table to be passed
//                              to batch programs.  Corrected
//                              order-info-flag in PK0YTLB.
//         01/17/97    DGERLT   Changed the size of the record
//                              written to temp storage.
//         05/23/97    tmcmic   Add tsa and tsb to pk0ytlb,
//                              incr counter in 2 stmt groups
//         07/29/97    ajalis   label code for cust-id 461616
//                              is changed from jcp to jck
//         10/16/97    bbasha   Add RTL to PK0YTLB, modified
//                              PK0YS-EDT-MAP3 and
//                              PK0YS-LOAD-PK0YW02 to access 66
//                              entries instead of 65 entries
//                              in PK0YTLB (PK0YW-LABL-SUB).
//         12/17/97    uanant   label codes CLR and FTR were
//                              added
//         01/14/97    ajalis  stock of JCC JCP and JCK changed
//                             from 001 to 004 for footwear
//                             in PK0YTLB
//         02/26/98    uanant   add new label codes for
//                              Athlete's Foot and Jumbo Sports
//         03/19/98    uanant   add new label codes FLK, LFK,
//                              KFK, CLK, FQK, CHS & GRS
//         04/13/98    uanant   add new account numbers for
//                              Footlocker and Lady Footlocker
//         06/11/98    uanant   add new label code BOB for
//                              ticketing
//         08/06/98    uanant   new map pk0y005 was added
//         08/25/98    uanant   Add new label code SHC for
//                              ticketing
//         09/02/98    uanant   Add Finish Line for caselot
//         09/29/98    jkenne   add hbt label for hibbitt
//                              add ven label for venator
//                              add pen label for jcpenney
//         10/20/98    bbasha   modifications for dcms inner-
//                              pack label printing.
//         11/17/98    pjanak   add LFV label for Ladyfootlkr
//         04/23/98    ovazqu   fix editing of size desc in
//                              map 3.
//         03/04/99    jkenne   Allow Caselot label prints for
//                              orders with blank label codes.
//         12/14/99    smahad   Added Academy customer.
//         02/28/00    smahad   Added Watch Station customer
//         03/25/00    smahad   Added SunGlassHut and also
//                              changed the label stock for
//                              watch station to LBL102
// GDS/NSC  05/15/00  MARBUC  Change call DB1000 to perform
//                             XX0XS-SELECT-ITM-SZ.  (Calls
//                             io1660 for Canada and DB1000 for
//                             all others)
//                            Change call IO0440 to perform
//                             XX0XS-SELECT-ITEM.  (Calls
//                             io1660 for Canada and io0440 for
//                             all others)
//                            Change call IO0430 to perform
//                             XX0XS-SEL-ORDER-04. (Calls
//                             VOPPKH04 for Canada and io0430
//                             for all others)
//                            Add VOPPKH04, XX0XW03, OPHREC,
//                             and OPIREC to Record/Table list
// DLVRUSA  03/22/01  PVENKA  Change call DB1000 to perform
//                             XX0XS-SELECT-ITM-SZ.  (Calls
//                             io1660 for SAP Warehouses and
//                             DB1000 for all others)
//                            Change call IO0440 to perform
//                             XX0XS-SELECT-ITEM.  (Calls
//                             io1660 for SAP Warehouses and
//                             io0440 for  all others)
//                            Change call IO0430 to perform
//                             XX0XS-SEL-ORDER-04. (Calls
//                             VOPPKH04 for SAP Warehouses
//                             and io0430 for all others)
//                            Change the PK0YS-NXT-VITEM001
//                             for the Warehouse condition from
//                             Canada Warehouse check to SAP
//                             Warehouses check.
// *********************
Program PK0Y type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  KUMREC KUMREC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  OP3REC OP3REC; // record
  OP8REC OP8REC; // record
  OPBREC OPBREC; // record
  OPHREC OPHREC; // record
  OPIREC OPIREC; // record
  PK0YW00 PK0YW00; // record
  PK0YW01 PK0YW01; // record
  PK0YW02 PK0YW02; // record
  PK0YW03 PK0YW03; // record
  PK0YW04 PK0YW04; // record
  PK0YW99 PK0YW99; // record
  PK0YW9E PK0YW9E { redefines = PK0YW99 } ; // record
  PK0YW9F PK0YW9F { redefines = PK0YW99 } ; // record
  PK0YW9J PK0YW9J { redefines = PK0YW99 } ; // record
  PK0YW9L PK0YW9L { redefines = PK0YW99 } ; // record
  PK0YW9M PK0YW9M { redefines = PK0YW99 }; // record
  PK0YW9P PK0YW9P { redefines = PK0YW99 } ; // record
  PK0YW9Q PK0YW9Q { redefines = PK0YW99 }; // record
  PK0YW9T PK0YW9T { redefines = PK0YW99 } ; // record
  PKDREC PKDREC; // record
  PKEREC PKEREC; // record
  PKQREC PKQREC; // record
  PKWREC PKWREC; // record
  PWRREC PWRREC; // record
  SL5REC SL5REC; // record
  SQLCA SQLCA; // record
  SY2REC SY2REC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  UT1REC UT1REC; // record
  UT2REC UT2REC; // record
  VOPPKH04 VOPPKH04; // record
  VOPPKI02 VOPPKI02; // record
  VORCPX02 VORCPX02; // record
  XX0XW01 XX0XW01; // record
  XX0XW03 XX0XW03; // record
  XX0XW05 XX0XW05; // record
  XZZREC XZZREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PK0YT02 {deleteAfterUse = yes}; // table
  use PK0YT03 {deleteAfterUse = yes}; // table
  use PK0YTZP {deleteAfterUse = yes}; // table
  use XNXTBL {deleteAfterUse = yes}; // table
  use XROTBL; // table
  use XRQTBL; // table
  use XWHTBL; // table
  use XBCTBL; // table
  use PK0YTLB {deleteAfterUse = yes}; // table
  use PK0YM.PK0YM001,  // forms
      PK0YM.PK0YM002, 
      PK0YM.PK0YM003, 
      PK0YM.PK0YM004, 
      PK0YM.PK0YM005
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PK0Y000: PK0Y000();
     /* ------------------------------------------------------------*/
     /* Flow to execute the Picking On-Demand Customer Label Menu*/
     /* ------------------------------------------------------------*/

    goto PK0Y010; /* Picking On-Demand Label Prt Menu*/


    PK0Y010: PK0Y010();
     /* ---------------------------------------------------------------*/
     /* Flow to execute the Picking On-Demand Customer Labels Menu*/
     /* ---------------------------------------------------------------*/

    goto PK0Y010; /* Picking On-Demand Cust. Labels*/

    PK0Y020: PK0Y020();
    PK0Y030: PK0Y030();
    PK0Y040: PK0Y040();
    PK0Y050: PK0Y050();
    PK0Y060: PK0Y060();
    PK0Y070: PK0Y070();
    PK0Y090: PK0Y090();
    PK0Y100: PK0Y100();
  end // end main
end // end PK0Y

// main execute process
Function PK0Y000()

     /* Initialize application*/

  PK0YS-INIT-PK0Y();

     /* Build map for display*/

  PK0YS-BLD-MAP1();


end // end PK0Y000

// converse/ after process
Function PK0Y010()

  converseLib.clearScreen();
   /* set map to scroll properly*/
  converseVar.segmentedMode = 1; /* force segmented converse mode*/

  converse PK0YM001 ;

     /* Init error stuff*/

  converseLib.validationFailed(0);
  PK0YW01.PK0YW-ERROR-FLAG = "N";


     /* Reset field attributes*/

  PK0YS-RESET-ATTR1();


     /* Edit map*/

  PK0YS-EDT-MAP1();


     /* Edit PF Keys*/

  PK0YS-TRNSFR-CNTL1(); /* transfer to requested application.*/


end // end PK0Y010

// main execute process map 2
Function PK0Y020()


     /* Update process for execute*/
     /* After process PK0Y030 submitts JCL it will return to the*/
     /* top of this process with 'PK0A' in PKWREC.PKWFRMAP*/

  if (PKWREC.PKWFRMAP[1] == "PK0A") /* came from last appl in flow*/
    if (PK0YW01.PK0YW-PRINTER-SAVE-ID != " ")
      PK0YM002.PK0YM-PRINTER-ID = PK0YW01.PK0YW-PRINTER-SAVE-ID;
    end
    PK0YW01.PK0YW-TS-EXISTS-FLAG = "N";
    PK0YW01.PK0YW-PAGE-NBR = 1; /* init page number*/
    PK0YW01.PK0YW-MAX-PAGE = 1; /* init max page number*/
    PK0YS-PRG-TMP-STOR(); /* purge temp storage*/
  else
    if (PKWREC.PKWFRMAP[1] == "PK0Y") /* restarted itself for display*/
      if (PK0YW01.PK0YW-TS-EXISTS-FLAG == "Y")
        PK0YS-RED-TMP-STOR(); /* read temp storage*/
      end
    end
  end

  PK0YS-BLD-MAP2(); /* build map*/

  PK0YW01.PK0YW-JOB-SUBMITTED-FLAG = "N";

  while (PK0YW01.PK0YW-JOB-SUBMITTED-FLAG == "N")
    PK0YM002.PK0YM-CONFIRM-FLAG = " ";
    PK0Y030(); /* converse map2*/
  end

  if (PK0YW01.PK0YW-JOB-SUBMITTED-FLAG == "Y")
    PK0Y020(); /* Loop back to the top of this process to re-display*/
  end /* this map for the next order to process*/
end // end PK0Y020

// converse/ after process
Function PK0Y030()


  // VAGen Info - map = PK0YM002
  converseLib.clearScreen();
   /* set map to scroll properly*/
  converseVar.segmentedMode = 1; /* force segmented converse mode*/
  PK0YW01.PK0YW-PAGE-NBR = PK0YM002.PK0YM-PAGE-NBR;

  converse PK0YM002 ;

     /* Init error/keys stuff*/

  PK0YW01.PK0YW-ERROR-FLAG = "N";
  PK0YW01.PK0YW-KEY-CHGD = "N";
  converseLib.validationFailed(0);


     /* Reset field attributes*/

  PK0YS-RESET-ATTR2();


     /* Edit map*/

  PK0YS-EDT-MAP2();

     /* Update map*/

  if (PK0YW01.PK0YW-ERROR-FLAG == "N")
    PK0YS-UPD-CONVRSE2();
  end

     /* Edit PFKeys*/

  if (PK0YW01.PK0YW-ERROR-FLAG == "N")
    PK0YS-SCROLL-PAGE(); /* pf7/pf8 redisplay screen*/
                                    /* If JCl submitted, restart at PK0Y020*/
  end

  PK0YS-TRNSFR-CNTL2(); /* transfer to requested application.*/

end // end PK0Y030

// main execute for PK0YM003
Function PK0Y040()

  converseVar.segmentedMode = 1; /* force segmented converse mode*/
  if (PKWREC.PKWFRMAP[1] == "PK0A") /* Loading saved printer id*/
    if (PK0YW01.PK0YW-PRINTER-SAVE-ID != " ")
      PK0YM003.PK0YM-PRINTER-ID = PK0YW01.PK0YW-PRINTER-SAVE-ID;
    end
  end

     /* Init error/keys stuff*/
     /* If ezemno = 477 the jcl was just submitted, and this message*/
     /* should display*/

  PK0YW01.PK0YW-ERROR-FLAG = "N";
  PK0YW01.PK0YW-KEY-CHGD = "N";

  if (converseVar.validationMsgNum == 477)
     /* next sentence*/
  else
    converseLib.validationFailed(0);
  end

     /* Reset field attributes*/

  PK0YS-RESET-ATTR3();

     /* Format heading for map PK0YM003*/

  PK0YS-FMT-HEADING3();

  PK0YW01.PK0YW-JOB-SUBMITTED-FLAG = "N";

  while (PK0YW01.PK0YW-JOB-SUBMITTED-FLAG == "N"
   && (PK0YM003.PK0YM-CONFIRM-FLAG == " "
   || PK0YM003.PK0YM-CONFIRM-FLAG == "Y"))
    PK0Y050(); /* converse map3*/
  end

  if (PK0YW01.PK0YW-JOB-SUBMITTED-FLAG == "Y")
    PK0Y040(); /* restart this process from the top to*/
  end /* redisplay the map*/
end // end PK0Y040

// converse/ after process
Function PK0Y050()

  converseVar.segmentedMode = 1; /* force segmented converse mode*/

  converse PK0YM003 ;

     /* Init error/keys stuff*/

  PK0YW01.PK0YW-ERROR-FLAG = "N";
  PK0YW01.PK0YW-KEY-CHGD = "N";
  converseLib.validationFailed(0);

     /* Reset field attributes*/

  PK0YS-RESET-ATTR3();

     /* Edit map*/

  PK0YS-EDT-MAP3();

     /* Transfer to requested application*/

  PK0YS-TRNSFR-CNTL3();

end // end PK0Y050

// main execute process map 4
Function PK0Y060()


     /* Update process for execute*/
     /* After process PK0Y070 submitts JCL it will return to the*/
     /* top of this process with 'PK0A' in PKWREC.PKWFRMAP*/

  if (PKWREC.PKWFRMAP[1] == "PK0A") /* came from last appl in flow*/
    if (PK0YW01.PK0YW-PRINTER-SAVE-ID != " ")
      PK0YM004.PK0YM-PRINTER-ID = PK0YW01.PK0YW-PRINTER-SAVE-ID;
    end
    PK0YW01.PK0YW-TS-EXISTS-FLAG = "N";
    PK0YW01.PK0YW-PAGE-NBR = 1; /* init page number*/
    PK0YW01.PK0YW-MAX-PAGE = 1; /* init max page number*/
    PK0YS-PRG-TMP-STOR(); /* purge temp storage*/
  else
    if (PKWREC.PKWFRMAP[1] == "PK0Y") /* restarted itself for display*/
      if (PK0YW01.PK0YW-TS-EXISTS-FLAG == "Y")
        PK0YS-RED-TMP-STOR(); /* read temp storage*/
      end
    end
  end

  PK0YS-BLD-MAP4(); /* build map*/

  PK0YW01.PK0YW-JOB-SUBMITTED-FLAG = "N";

  while (PK0YW01.PK0YW-JOB-SUBMITTED-FLAG == "N")
    PK0YM004.PK0YM-CONFIRM-FLAG = " ";
    PK0Y070(); /* converse map4*/
  end

  if (PK0YW01.PK0YW-JOB-SUBMITTED-FLAG == "Y")
    PK0Y060(); /* Loop back to the top of this process to re-display*/
  end /* this map for the next order to process*/
end // end PK0Y060

// converse/ after process
Function PK0Y070()


  converseLib.clearScreen();
   /* set map to scroll properly*/
  converseVar.segmentedMode = 1; /* force segmented converse mode*/
  PK0YW01.PK0YW-PAGE-NBR = PK0YM004.PK0YM-PAGE-NBR;

  converse PK0YM004 ;

     /* Init error/keys stuff*/

  PK0YW01.PK0YW-ERROR-FLAG = "N";
  PK0YW01.PK0YW-KEY-CHGD = "N";
  converseLib.validationFailed(0);


     /* Reset field attributes*/

  PK0YS-RESET-ATTR4();


     /* Edit map*/

  PK0YS-EDT-MAP4();

     /* Update map*/

  if (PK0YW01.PK0YW-ERROR-FLAG == "N")
    PK0YS-UPD-CONVRSE4();
  end

     /* Edit PFKeys*/

  if (PK0YW01.PK0YW-ERROR-FLAG == "N")
    PK0YS-SCROLL-PAGE4(); /* pf7/pf8 redisplay screen*/
                                    /* If JCl submitted, restart at PK0Y060*/
  end

  PK0YS-TRNSFR-CNTL4(); /* transfer to requested application.*/

end // end PK0Y070

// Submit JCL to internal reader
Function PK0Y080()

     /* Format the variable areas of the JCL statement.*/
     /* Write Job Control Language to the Internal Reader queue.*/
     /* If error occurred, report to the error diagnosis facility.*/
     /* Indicate the job was submitted when end of file is written.*/

     /* this statement group handles print requests for three maps,*/
     /* PK0YM002, PK0YM003 and PK0YM004*/

  if (PK0YW00.PK0YW-RUN-TYPE == "E") /* EXEC statement*/
    PK0YW9E.PK0YWEXE = PK0YW00.PK0YW-PROC-NAME; /* Procedure name*/
  end

  if (PK0YW00.PK0YW-RUN-TYPE == "J") /* JOB statement*/
    PK0YS-GET-JOBNM(); /* algorythm for job name*/
    PK0YW9J.PK0YWUID = PK0YW01.PK0YW-JOB-NAME; /* User identification*/
    if (PK0YW00.PK0YW-PROC-NAME > " ") /* Variable proc name*/
      PK0YW9J.PK0YWEXE = PK0YW00.PK0YW-PROC-NAME; /* Proc name*/
    end
  end

  if (PK0YW00.PK0YW-RUN-TYPE == "L") /* Label output class*/
    if (PK0YM002.PK0YM-PRINTER-ID == "161"
     || PK0YM003.PK0YM-PRINTER-ID == "161"
     || PK0YM004.PK0YM-PRINTER-ID == "161"
     || PK0YM005.PK0YM-PRINTER-ID == "161")
      PK0YW9L.PK0YWOUT = "I"; /* unix printer*/
    else
      PK0YW9L.PK0YWOUT = "P"; /* all other printers*/
    end
  end
  if (PK0YW00.PK0YW-RUN-TYPE == "P" /* Parameter statement*/
   || PK0YW00.PK0YW-RUN-TYPE == "I") /* Parameter statement*/
    PK0YW99.PK0YWJCL = PK0YW00.PK0YWJCL; /* Report parameters*/
  end

  if (PK0YW00.PK0YW-RUN-TYPE == "M") /* print destination*/
    if (PK0YM002.PK0YM-PRINTER-ID != 0)
      PK0YW9M.PK0YMDST = PK0YM002.PK0YM-PRINTER-ID;
    end
    if (PK0YM003.PK0YM-PRINTER-ID != 0)
      PK0YW9M.PK0YMDST = PK0YM003.PK0YM-PRINTER-ID;
    end
    if (PK0YM004.PK0YM-PRINTER-ID != 0)
      PK0YW9M.PK0YMDST = PK0YM004.PK0YM-PRINTER-ID;
    end
    if (PK0YM005.PK0YM-PRINTER-ID != 0)
      PK0YW9M.PK0YMDST = PK0YM005.PK0YM-PRINTER-ID;
    end
    PK0YW9M.PK0YMRMT = "R";
  end

  if (PK0YW00.PK0YW-RUN-TYPE == "T") /* remote for output card*/
    if (PK0YM002.PK0YM-PRINTER-ID != 0)
      PK0YW9T.PK0YMREM = PK0YM002.PK0YM-PRINTER-ID;
    end
    if (PK0YM003.PK0YM-PRINTER-ID != 0)
      PK0YW9T.PK0YMREM = PK0YM003.PK0YM-PRINTER-ID;
    end
    if (PK0YM004.PK0YM-PRINTER-ID != 0)
      PK0YW9T.PK0YMREM = PK0YM004.PK0YM-PRINTER-ID;
    end
    if (PK0YM005.PK0YM-PRINTER-ID != 0)
      PK0YW9T.PK0YMREM = PK0YM005.PK0YM-PRINTER-ID;
    end
    PK0YW9T.PK0YWLS1 = PK0YW02.PK0YM-LBL-STK-LAST-NBR;
    PK0YW9T.PK0YWLS2 = PK0YW02.PK0YM-LBL-STK-LAST-NBR;
  end

  if (PK0YW00.PK0YW-RUN-TYPE == "F") /* forms code*/
    PK0YW9F.PK0YWFRM = PK0YW02.PK0YM-LBL-STK-LAST-NBR;
  end

  if (PK0YW00.PK0YW-RUN-TYPE == "Q") /* EOJ Message statement*/

    set TA3REC empty;
    TA3REC.TA3OPTN = "ASSIGN ";
    try
      call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
    end

    if (sysVar.errorCode == "00000000" /* Call successful*/
     || TA3REC.TA3RTNCD == "0")       
      PK0YW9Q.PK0YW-MSGID = TA3REC.TA3MSGID; /* Region identification*/
    else
      PK0YW9Q.PK0YW-MSGID = " "; /* No region returned*/
    end

    set TA3REC empty;
    TA3REC.TA3OPTN = "EIBINFO";
    try
      call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
    end

    if (sysVar.errorCode == "00000000" /* Call successful*/
     || TA3REC.TA3RTNCD == "0")       
      PK0YW9Q.PK0YW-EIBRM = TA3REC.TA3EIBRM; /* Term identification*/
    else
      PK0YW9Q.PK0YW-EIBRM = " "; /* No term id*/
    end


    PK0YW9Q.PK0YW-JOBID = PK0YW01.PK0YW-JOB-NAME; /* Job identification*/
    PK0YW9Q.PK0YW-USRID = PK0YW01.PK0YWUID; /* User identification*/

    PK0YW9Q.PK0YW-MM = PK0YW01.PK0YW-MM; /* Current month*/
    PK0YW9Q.PK0YW-DD = PK0YW01.PK0YW-DD; /* Current day*/
    PK0YW9Q.PK0YW-YY = PK0YW01.PK0YW-YY; /* Current year*/
    PK0YW9Q.PK0YW-HR = PK0YW01.PK0YW-HOURS; /* Current hour*/
    PK0YW9Q.PK0YW-MIN = PK0YW01.PK0YW-MINUTES; /* Current minute*/
  end

  try
    add PK0YW99 ;
  end

  if (sysVar.errorCode != "00000000") /* Non-zero return code*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PK0Y-REA"; /* Process name*/
    TA1REC.TA1PGMAP = "PK0YM002"; /* Process name*/
    TA1REC.TA1LOC = "WRITE JCL TO INTERNAL READER";
    TA1REC.TA1MAP = sysVar.errorCode; /* Return code*/
    SQLCA.SQLCAREC = PK0YW99.PK0YWJCL; /* Error information*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.validationFailed(29); /* Indicate system error*/

    // VAGen Info - map = PK0YM002
    converseLib.clearScreen();
     /* Clear before redisplay*/
    converseLib.clearScreen();
     /* Clear before redisplay*/
    converseLib.clearScreen();
     /* Clear before redisplay*/
    converseLib.clearScreen();
     /* Clear before redisplay*/

    exit stack; /* exit to menu to display error*/

  end

  if (PK0YW99.PK0YWJCL == "/*EOF") /* End of file*/
    PK0YW01.PK0YW-JOB-SUBMITTED-FLAG = "Y"; /* Indicate job submitted*/
  else
    if (PK0YW00.PK0YW-RUN-TYPE == "P" /* more than one Parm statement*/
     && PK0YW01.PK0YW-TABLE-INDEX > 32) /* don't increment counter*/
      /* continue*/
    else
      PK0YW01.PK0YW-TABLE-INDEX = PK0YW01.PK0YW-TABLE-INDEX + 1;
    end

  end

end // end PK0Y080

// main execute for PK0YM005
Function PK0Y090()

  converseVar.segmentedMode = 1; /* force segmented converse mode*/
  if (PKWREC.PKWFRMAP[1] == "PK0A") /* Loading saved printer id*/
    if (PK0YW01.PK0YW-PRINTER-SAVE-ID != " ")
      PK0YM005.PK0YM-PRINTER-ID = PK0YW01.PK0YW-PRINTER-SAVE-ID;
    end
  end

     /* Init error/keys stuff*/
     /* If ezemno = 477 the jcl was just submitted, and this message*/
     /* should display*/

  PK0YW01.PK0YW-ERROR-FLAG = "N";
  PK0YW01.PK0YW-KEY-CHGD = "N";

  if (converseVar.validationMsgNum == 477)
     /* next sentence*/
  else
    converseLib.validationFailed(0);
  end

     /* Reset field attributes*/

  PK0YS-RESET-ATTR5();

     /* Format heading for map PK0YM005*/

  PK0YS-FMT-HEADING5();

  PK0YW01.PK0YW-JOB-SUBMITTED-FLAG = "N";

  while (PK0YW01.PK0YW-JOB-SUBMITTED-FLAG == "N")
    PK0YM005.PK0YM-CONFIRM-FLAG = " ";
    PK0Y100(); /* converse map5*/
  end

  if (PK0YW01.PK0YW-JOB-SUBMITTED-FLAG == "Y")
    PK0Y090(); /* restart this process from the top to*/
  end /* redisplay the map*/
end // end PK0Y090

// converse/ after process
Function PK0Y100()

  converseVar.segmentedMode = 1; /* force segmented converse mode*/

  converse PK0YM005 ;

     /* Init error/keys stuff*/

  PK0YW01.PK0YW-ERROR-FLAG = "N";
  PK0YW01.PK0YW-KEY-CHGD = "N";
  converseLib.validationFailed(0);

     /* Reset field attributes*/

  PK0YS-RESET-ATTR5();

     /* Edit map*/

  PK0YS-EDT-MAP5();

     /* Transfer to requested application*/

  PK0YS-TRNSFR-CNTL5();

end // end PK0Y100

// Build PK0YM001 Map
Function PK0YS-BLD-MAP1()

     /* build map headings*/

  PK0YM001.XXXRVNBR = PK0YW01.XXXRVNBR;

  PK0YM001.XXXERRID = "PK0Y";

  PK0YM001.XXXCURDT = VGVar.currentShortGregorianDate;

  PK0YM001.XWHCD = PK0YW01.XWHCD;

end // end PK0YS-BLD-MAP1

// Build Map PK0YM002
Function PK0YS-BLD-MAP2()

     /* reset field attributes for map2*/

  PK0YS-RESET-ATTR2();

  PK0YS-FMT-HEADING2(); /* format current date*/

     /* build order/item array on screen*/

  PK0YW01.PK0YW-SUBSCRIPT = 1; /* init subscript*/
  while (PK0YW01.PK0YW-SUBSCRIPT <= 11) /* process all 11 rows*/
    PK0YS-LOAD-MAP2();
    PK0YW01.PK0YW-SUBSCRIPT = PK0YW01.PK0YW-SUBSCRIPT + 1;
  end

     /* if no other warning message has been loaded*/
     /* and any line item status equals "AL" or "PA" display*/
     /* message*/

   /* IF EZEMNO EQ 0;*/
    /* MOVE 1 TO PK0YW01.PK0YW-SUBSCRIPT;     /* init subscript*/
    /* WHILE PK0YW01.PK0YW-SUBSCRIPT LE 11;   /* process all 11 rows*/
      /* IF PK0YM002.PK0YM-OP-LINE-ITEM-STAT(PK0YW-SUBSCRIPT) EQ 'AL'*/
        /* OR PK0YM002.PK0YM-OP-LINE-ITEM-STAT(PK0YW-SUBSCRIPT) EQ 'PA';*/
          /* MOVE 496 TO EZEMNO;          /* allocated qty msg*/
      /* END;*/
      /* PK0YW01.PK0YW-SUBSCRIPT = PK0YW01.PK0YW-SUBSCRIPT + 1;*/
    /* END;*/
   /* END;*/

  PK0YM002.PK0YM-MAX-PAGE = PK0YW01.PK0YW-MAX-PAGE; /* max page*/

end // end PK0YS-BLD-MAP2

// Build Map PK0YM004
Function PK0YS-BLD-MAP4()

     /* reset field attributes for map4*/

  PK0YS-RESET-ATTR4();

  PK0YS-FMT-HEADING4(); /* format current date*/

     /* build order/item array on screen*/

  PK0YW01.PK0YW-SUBSCRIPT = 1; /* init subscript*/
  while (PK0YW01.PK0YW-SUBSCRIPT <= 11) /* process all 11 rows*/
    PK0YS-LOAD-MAP4();
    PK0YW01.PK0YW-SUBSCRIPT = PK0YW01.PK0YW-SUBSCRIPT + 1;
  end


  PK0YM004.PK0YM-MAX-PAGE = PK0YW01.PK0YW-MAX-PAGE; /* max page*/

end // end PK0YS-BLD-MAP4

// Build PK0Y Map2 Temp Storage
Function PK0YS-BLD-TMP-STOR()

  PK0YS-OPN-VITEM001(); /* open cursor on vitem001*/
  PK0YS-NXT-VITEM001(); /* fetch first vitem001*/

  PK0YW01.PK0YW-PAGE-NBR = 1; /* init page number*/

  if (PK0YW01.PK0YW-EOF-ITEMS == "Y") /* end of file*/
    converseLib.validationFailed(470); /* no items exist*/
    PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set error flag*/
  else
    while (PK0YW01.PK0YW-EOF-ITEMS == "N") /* while there is items*/
      PK0YS-LOAD-PK0YW02(); /* load temp storage*/
    end
    PK0YW01.PK0YW-MAX-PAGE = PK0YW01.PK0YW-PAGE-NBR; /* set max page*/
    if (PK0YW01.PK0YW-MAX-PAGE > 1)
      PK0YW01.PK0YW-MAX-PAGE = PK0YW01.PK0YW-MAX-PAGE - 1; /* subtract 1*/
    end
    PK0YW01.PK0YW-PAGE-NBR = 1; /* set page to 1*/
    PK0YW01.PK0YW-SUBSCRIPT = 1; /* position cursor on first*/
  end

  PK0YS-CLS-VITEM001(); /* close vitem001 cursor*/

end // end PK0YS-BLD-TMP-STOR

// Close item cursor-IO0440
Function PK0YS-CLS-VITEM001()

     /* Call the I/O mod to close the cursor.*/

   /* START ADDED 05/15/00  SAP CANADA USE OTP ITEM/ ALL OTHERS USE ORDER*/
  XX0XW05.OPPKFUNC = "CS";

  XSPKS-SELECT-ITEM(); /* CLOSE ORDER ITEM/OTP ITEM*/
   /* END ADDED 05/15/00  SAP CANADA USE OTP ITEM/ ALL OTHERS USE ORDER*/

     /* Stop the program if error has occurred.*/

  if (SQLCA.VAGen_SQLCODE == 0)

     /* Next sentence - no errors, so do nothing.*/

  else
     /* Error has occurred.  Set up TA1REC fields and abend*/

    TA1REC.TA1PGMNM = "PK0Y    ";
    TA1REC.TA1MAP = PK0YW-MAP-INUSE;
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1TBLKE = PK0YW01.PK0YW-KEY;
    TA1REC.TA1LOCAT[1] = "PK0YS-CL";
    TA1REC.TA1LOCAT[2] = "S-VITEM0";
    TA1REC.TA1LOCAT[3] = "01 IO044";
    TA1REC.TA1LOCAT[4] = "0 CS    ";

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};

    COMMAREA.CAUSERA = " ";

    XSPF4();
    exit program;
  end

end // end PK0YS-CLS-VITEM001

// Convert sizes using SY1190
Function PK0YS-CONVERT-SIZE()
     /* *************************************************************/
     /* select valid sizes using dpick.vpkscl01 and dpick.vpksty01*/
     /* If end of file, get out*/
     /* If any error, indicate a system error.*/
     /* *************************************************************/

  call "SY1190" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes}; /* select the available sizes*/

  if (SYPREC.SYPRC == 10 /* size row not found*/
   || SYPREC.SYPRC == 11 /* style row not found*/
   || SYPREC.SYPRC == 16) /* scale row not found*/
    SYPREC.SY4IDDSC[1] = " ";
    SYPREC.SY4IDDSC[2] = " ";
    SYPREC.SY4IDDSC[3] = " ";
    SYPREC.SY4IDDSC[4] = " ";
    SYPREC.SY4IDDSC[5] = " ";
  end

  if (SYPREC.SYPRC == 9 /* signify db2 problems*/
   || SYPREC.SYPRC == 99)

    if (SYPREC.SYPRC == 9) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else
      if (SYPREC.SYPRC == 99) /* Unexpected return code*/

        converseLib.validationFailed(29); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      end
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0YS   "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN SIZE SCALE FOR PRODUCTS";
    TA1REC.TA1MAP = "PK0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPKSTY01"; /* Table view name*/
    TA1REC.TA1TBLKE = SYPREC.SYPDATA; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    return; /* Return to previous process*/

  end

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 40)
    PK0YW01.PK0YW-OP-ON-ORD-QTY[sysVar.arrayIndex] = 0;
    PK0YW01.PK0YW-OP-ALOC-QTY[sysVar.arrayIndex] = 0;
    PK0YW01.PK0YW-SY5SZID[sysVar.arrayIndex] = 0;
    PK0YW01.PK0YW-SY4IDDSC[sysVar.arrayIndex] = " ";
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  PK0YW01.PK0YW-SIZE-SUB = 0;
  sysVar.arrayIndex = 40;
  while (sysVar.arrayIndex >= 1)
    if (OP3REC.OP3SZAFL[sysVar.arrayIndex] == "Y")
      PK0YW-SIZE-SUB = PK0YW-SIZE-SUB + 1;
      PK0YW01.PK0YW-SY4IDDSC[PK0YW-SIZE-SUB] = SYPREC.SY4IDDSC[sysVar.arrayIndex];
      PK0YW01.PK0YW-SY5SZID[PK0YW-SIZE-SUB] = SYPREC.SY5SZID[sysVar.arrayIndex];
      PK0YW01.PK0YW-OP-ON-ORD-QTY[PK0YW-SIZE-SUB] = OP3REC.OP3ONOQT[sysVar.arrayIndex];
      PK0YW01.PK0YW-OP-ALOC-QTY[PK0YW-SIZE-SUB] = OP3REC.OP3ALQT[sysVar.arrayIndex];
    end
    sysVar.arrayIndex = sysVar.arrayIndex - 1;
  end

end // end PK0YS-CONVERT-SIZE

// Edit caselot
Function PK0YS-EDT-CASELOT()

  if (PK0YM004.OP-CASE-LOT-NBR != " ")
                                  /* next sentence*/
  else
    converseLib.validationFailed(499); /* printer id missing or invalid*/
    PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set error flag*/
    set PK0YM004.OP-CASE-LOT-NBR cursor, bold;
  end

end // end PK0YS-EDT-CASELOT

// Edit Print Confirm Msg Map 2
Function PK0YS-EDT-CONFIRM2()

    /* Edit Confirmation flag*/

  if (PK0YM002.PK0YM-CONFIRM-FLAG == " "
   || PK0YM002.PK0YM-CONFIRM-FLAG == "Y"
   || PK0YM002.PK0YM-CONFIRM-FLAG == "N")
    /* next sentence*/
  else
    set PK0YM002.PK0YM-CONFIRM-FLAG cursor, bold;
    PK0YW01.PK0YW-ERROR-FLAG = "Y";
    PK0YM002.PK0YM-CONFIRM-LIT1 = "OKAY TO PRINT?";
    PK0YM002.PK0YM-CONFIRM-LIT2 = "(Y/N)";
    set PK0YM002.PK0YM-CONFIRM-LIT1 bold;
    set PK0YM002.PK0YM-CONFIRM-LIT2 bold;
    set PK0YM002.PK0YM-CONFIRM-FLAG cursor, initialAttributes;
    converseLib.validationFailed(235); /* only y/n are valid entries*/
  end
end // end PK0YS-EDT-CONFIRM2

// Edit Print Confirm Msg Map 3
Function PK0YS-EDT-CONFIRM3()

    /* Edit Confirmation flag*/

  if (PK0YM003.PK0YM-CONFIRM-FLAG == " "
   || PK0YM003.PK0YM-CONFIRM-FLAG == "Y"
   || PK0YM003.PK0YM-CONFIRM-FLAG == "N")
    /* next sentence*/
  else
    set PK0YM003.PK0YM-CONFIRM-FLAG cursor, bold;
    PK0YW01.PK0YW-ERROR-FLAG = "Y";
    PK0YM003.PK0YM-CONFIRM-LIT1 = "OKAY TO PRINT?";
    PK0YM003.PK0YM-CONFIRM-LIT2 = "(Y/N)";
    set PK0YM003.PK0YM-CONFIRM-LIT1 bold;
    set PK0YM003.PK0YM-CONFIRM-LIT2 bold;
    set PK0YM003.PK0YM-CONFIRM-FLAG cursor, initialAttributes;
    set PK0YM003.PK0YM-VERIFY-LIT bold;
    PK0YM003.PK0YM-VERIFY-LIT = "*** PLEASE VERIFY ALL INFORMATION ***";
    converseLib.validationFailed(235); /* only y/n are valid entries*/
  end
end // end PK0YS-EDT-CONFIRM3

// Edit Print Confirm Msg Map 4
Function PK0YS-EDT-CONFIRM4()

    /* Edit Confirmation flag*/

  if (PK0YM004.PK0YM-CONFIRM-FLAG == " "
   || PK0YM004.PK0YM-CONFIRM-FLAG == "Y"
   || PK0YM004.PK0YM-CONFIRM-FLAG == "N")
    /* next sentence*/
  else
    set PK0YM004.PK0YM-CONFIRM-FLAG cursor, bold;
    PK0YW01.PK0YW-ERROR-FLAG = "Y";
    PK0YM004.PK0YM-CONFIRM-LIT1 = "OKAY TO PRINT?";
    PK0YM004.PK0YM-CONFIRM-LIT2 = "(Y/N)";
    set PK0YM004.PK0YM-CONFIRM-LIT1 bold;
    set PK0YM004.PK0YM-CONFIRM-LIT2 bold;
    set PK0YM004.PK0YM-CONFIRM-FLAG cursor, initialAttributes;
    converseLib.validationFailed(235); /* only y/n are valid entries*/
  end
end // end PK0YS-EDT-CONFIRM4

// Edit Print Confirm Msg Map 5
Function PK0YS-EDT-CONFIRM5()

    /* Edit Confirmation flag*/

  if (PK0YM005.PK0YM-CONFIRM-FLAG == " "
   || PK0YM005.PK0YM-CONFIRM-FLAG == "Y"
   || PK0YM005.PK0YM-CONFIRM-FLAG == "N")
    /* next sentence*/
  else
    set PK0YM005.PK0YM-CONFIRM-FLAG cursor, bold;
    PK0YW01.PK0YW-ERROR-FLAG = "Y";
    PK0YM005.PK0YM-CONFIRM-LIT1 = "OKAY TO PRINT?";
    PK0YM005.PK0YM-CONFIRM-LIT2 = "(Y/N)";
    set PK0YM005.PK0YM-CONFIRM-LIT1 bold;
    set PK0YM005.PK0YM-CONFIRM-LIT2 bold;
    set PK0YM005.PK0YM-CONFIRM-FLAG cursor, initialAttributes;
    set PK0YM005.PK0YM-VERIFY-LIT bold;
    PK0YM005.PK0YM-VERIFY-LIT = "*** PLEASE VERIFY ALL INFORMATION ***";
    converseLib.validationFailed(235); /* only y/n are valid entries*/
  end
end // end PK0YS-EDT-CONFIRM5

// Edit label stock
Function PK0YS-EDT-LBL-STCK()

     /* all line items selected must have the same labl code*/
     /* labl code is not shown on each line of the map, but it*/
     /* is kept in each line of temporary storage.  Thats why temporary*/
     /* storage is being used for comparison purposes.*/

  if (PK0YW01.PK0YW-SY-STY-NBR == " "
   && PK0YM002.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "S")
    PK0YW01.PK0YW-SY-STY-NBR = PK0YW02.PK-LABL-CD[PK0YW-SUBSCRIPT];
  else
    if (PK0YW02.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "S"
     && 
    PK0YW02.PK-LABL-CD[PK0YW-SUBSCRIPT] != 
    PK0YW01.PK0YW-SY-STY-NBR)
      PK0YW01.PK0YW-ERROR-FLAG = "Y";
      set PK0YM002.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] cursor, bold;
      converseLib.validationFailed(469);
    end
  end

end // end PK0YS-EDT-LBL-STCK

// Edit label stock
Function PK0YS-EDT-LBL-STK4()

     /* all line items selected must have the same labl code*/
     /* labl code is not shown on each line of the map, but it*/
     /* is kept in each line of temporary storage.  Thats why temporary*/
     /* storage is being used for comparison purposes.*/

  if (PK0YW01.PK0YW-SY-STY-NBR == " "
   && PK0YM004.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "S")
    PK0YW01.PK0YW-SY-STY-NBR = PK0YW02.PK-LABL-CD[PK0YW-SUBSCRIPT];
  else
    if (PK0YW02.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "S"
     && 
    PK0YW02.PK-LABL-CD[PK0YW-SUBSCRIPT] != 
    PK0YW01.PK0YW-SY-STY-NBR)
      PK0YW01.PK0YW-ERROR-FLAG = "Y";
      set PK0YM004.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] cursor, bold;
      converseLib.validationFailed(469);
    end
  end

end // end PK0YS-EDT-LBL-STK4

// Edit PK0YM001 Map
Function PK0YS-EDT-MAP1()

     /* init error flag*/

  PK0YW01.PK0YW-ERROR-FLAG = "N";

     /* check if application data was entered*/

  if (PK0YM001.CAITEM > " ")

    set PK0YM001.CAITEM cursor, modified, bold;
    converseLib.validationFailed(15);
    PK0YW01.PK0YW-ERROR-FLAG = "Y";

  end

     /* edit option*/

  if (PK0YM001.PK0YM-SEL-CD == "01"
   || PK0YM001.PK0YM-SEL-CD == "02"
   || PK0YM001.PK0YM-SEL-CD == "03"
   || PK0YM001.PK0YM-SEL-CD == "04"
   || PK0YM001.PK0YM-SEL-CD == " ")
    /* NEXT SENTENCE*/
  else
    PK0YW01.PK0YW-ERROR-FLAG = "Y";
    set PK0YM001.PK0YM-SEL-CD cursor, bold;
    converseLib.validationFailed(5); /* option invalid*/
  end

     /* if no errors, reset work fields equal to map fields*/

  if (PK0YW01.PK0YW-ERROR-FLAG == "N")
    PK0YW01.PK0YW-SEL-CD = PK0YM001.PK0YM-SEL-CD;
    PK0YW01.XWHCD = PK0YM001.XWHCD;
  end

end // end PK0YS-EDT-MAP1

// Edit Map PK0YM002
Function PK0YS-EDT-MAP2()

     /* validate customer order id*/

  if (PK0YM002.OP-CUST-ORD-ID > 0 /* order entered*/
   && PK0YM002.OP-CUST-ORD-ID != PK0YW01.PK0YW-CUST-ORD-ID) /* and chg*/
    PK0YW01.PK0YW-KEY-CHGD = "Y";
    PK0YS-EDT-OP1CUOID(); /* verify order exist*/
  else
    if (PK0YM002.OP-CUST-ORD-ID == 0 /* order not entered*/
     && converseVar.eventKey is enter) /* enter pressed*/
      converseLib.validationFailed(495); /* order number required*/
      PK0YW01.PK0YW-ERROR-FLAG = "Y";
      set PK0YM002.OP-CUST-ORD-ID cursor, bold;
    end
  end

     /* validate nike order id*/

  if (PK0YM002.OP-NIKE-ORD-ID > 0 /* order entered*/
   && PK0YM002.OP-NIKE-ORD-ID != PK0YW01.PK0YW-OP-NIKE-ORD-ID) /* and chg*/
    PK0YW01.PK0YW-KEY-CHGD = "Y";
    PK0YS-EDT-OP1CUOID(); /* verify order exist*/
  end

  if (PK0YW01.PK0YW-ERROR-FLAG == "Y" /* error exists*/
   || PK0YW01.PK0YW-KEY-CHGD == "Y")  /* key changed*/
    PKWREC.PKWFRMAP[1] = "PK0Y"; /* set from application*/
    PK0YS-PRG-TMP-STOR(); /* purge TS*/
    if (PK0YW01.PK0YW-ERROR-FLAG == "Y" /* error exists*/
    )                                   /* continue*/
    else
  /* GET PK0YS-BLD-TMP-STOR*/

      set OP2REC empty;
      PK0YW01.PK0YW-EOF-ITEMS = "N"; /* init eof flag*/
      PK0YW01.PK0YW-MORE-SIZES = "N"; /* init more sizes flag*/

      OP2REC.OP1CUOID = PK0YM002.OP-CUST-ORD-ID;
      OP2REC.OP1NORID = PK0YM002.OP-NIKE-ORD-ID;
      PK0YW01.PK0YW-CUST-ORD-ID = PK0YM002.OP-CUST-ORD-ID;
      OP2REC.OP1PARTN = PK0YW01.PK0YW-PART-CHAR;

      PK0YS-BLD-TMP-STOR(); /* build TS with new keys if*/
    end /* no error exist*/
    PK0YW01.PK0YW-SY-STY-NBR = " "; /* init working storage field*/
    PK0YW01.PK0YW-CUST-ORD-ID = PK0YM002.OP-CUST-ORD-ID;
    PK0Y020(); /* get out per incorrect key value*/
  end

     /* edit map bottom to top - select codes, page nbr,*/
     /* pf7/pf8, and relational edits for screen*/


     /* edit confirmation field*/

  PK0YS-EDT-CONFIRM2();

     /* edit select codes*/

  PK0YW01.PK0YW-SUBSCRIPT = 11; /* init subscript*/
  PK0YW01.PK0YW-SEL-MADE-FLAG = "N"; /* init selections made*/

  while (PK0YW01.PK0YW-SUBSCRIPT >= 1) /* process all 11 rows*/
    PK0YS-EDT-SELCDS2();
    PK0YW01.PK0YW-SUBSCRIPT = PK0YW01.PK0YW-SUBSCRIPT - 1;
  end

     /* check if all lines where selected*/

  PK0YS-SEL-ALL2();

     /* edit print quantity*/

  PK0YW01.PK0YW-SUBSCRIPT = 11; /* init subscript*/

  while (PK0YW01.PK0YW-SUBSCRIPT >= 1) /* process all 11 rows*/
    PK0YS-EDT-PRT-QTY();
    PK0YW01.PK0YW-SUBSCRIPT = PK0YW01.PK0YW-SUBSCRIPT - 1;
  end

     /* edit label stock, all selected items must be the same*/

  PK0YW01.PK0YW-SUBSCRIPT = 11; /* init subscript*/

  while (PK0YW01.PK0YW-SUBSCRIPT >= 1) /* process all 11 rows*/
    PK0YS-EDT-LBL-STCK();
    PK0YW01.PK0YW-SUBSCRIPT = PK0YW01.PK0YW-SUBSCRIPT - 1;
  end

     /* edit zebra printer id*/

  PK0YS-EDT-ZEBRA2();

     /* edit page number*/

  PK0YS-EDT-PAG-NBR();

     /* edit PF7/PF8*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    PK0YS-EDT-PAGING();
  end

     /* edit selection flag*/

  if (PK0YW01.PK0YW-ERROR-FLAG == "N") /* no errors found yet*/
    PK0YS-EDT-NO-SEL2();
  end

end // end PK0YS-EDT-MAP2

// Edit Map PK0YM003
Function PK0YS-EDT-MAP3()

     /* Edit all fields on PK0YM003 map*/
     /* from bottom to top, so message display correctly*/

  if (PK0YW01.PK0YW-ERROR-FLAG == "Y") /* error exists*/
    PKWREC.PKWFRMAP[1] = "PK0Y"; /* set from application*/
    PK0Y040(); /* get out per incorrect key value*/
  end

     /* edit confirmation field*/

  PK0YS-EDT-CONFIRM3();

     /* edit customer/label code combination*/
     /* this edit is done out of the normal bottom to top*/
     /* order because data is needed from the DPICK.VZLABL01*/
     /* table to edit the ticketing type*/

   /* -----------------------------------------*/
   /* PK0YS-EDT-CUSTLABL;*/
  PK0YW01.KUCCOID = PK0YM003.KUCCOID;
  PK0YW01.PK0YM-LABEL-CODE = PK0YM003.PK0YM-LABEL-CODE;

  if (PK0YM003.KUCCOID == 0)
    PK0YW-ERROR-FLAG = "Y";
    converseLib.validationFailed(30);
    set PK0YM003.KUCCOID bold, cursor;
    return;
  end

  PK0YW-LABL-SUB = +1;
  PK0YW-VALID-CUSTLABL = "N";
  PK0YW-PK-LABL-CD = PK0YM003.PK0YM-LABEL-CODE;
  PK0YW-CUSTOMER = PK0YM003.KUCCOID;
  PK0YW-XGP-GPC-CD = PK0YM003.XGPCD;
  while (PK0YW-VALID-CUSTLABL == "N"
   /* change by smahad on 03/25/2000 for SunGlassHut*/
   /* AND PK0YW-LABL-SUB LE 108;*/
   && PK0YW-LABL-SUB <= 109)
    PK0YS-GET-CUSTLABL();
  end

  if (PK0YW-VALID-CUSTLABL != "Y")
    PK0YW01.PK0YW-ERROR-FLAG = "Y";
    converseLib.validationFailed(480);
    set PK0YM003.KUCCOID bold, cursor;
    set PK0YM003.PK0YM-LABEL-CODE bold;
    return;
  end

   /* if customer label has order related info, must use order option*/
   /* unless this is warehouse 51 for DCMS*/
   /* dcms in*/
  if (PKWREC.XWHCD == "51")
    PK0YT-ORDER-INFO-IND[PK0YW-LABL-SUB] = "N";
  end
   /* dcms out*/

  if (PK0YT-ORDER-INFO-IND[PK0YW-LABL-SUB] == "Y")
    PK0YW01.PK0YW-ERROR-FLAG = "Y";
    converseLib.validationFailed(497);
    set PK0YM003.KUCCOID bold, cursor;
  end

  OP1REC.KUCCOID = PK0YM003.KUCCOID;
  PK0YS-GET-CUSTNM();
  if (SQLCA.VAGen_SQLCODE == 0)
    PK0YM003.CU-CO-NM = KUCREC.KUCCONM;
  else
    PK0YM003.CU-CO-NM = "NAME NOT FOUND";
  end

   /* -----------------------------------------*/
     /* edit size id using module SY1190*/

  PK0YS-EDT-SIZE3();

     /* edit ticketing type (by product or size)*/

  PK0YS-EDT-TICK-TYP();

     /* edit gpc/style/color/dimension combination (Product)*/

  PK0YS-EDT-PRODUCT();

     /* edit zebra printer id*/

  PK0YS-EDT-ZEBRA3();

     /* edit department id*/

  PK0YS-GET-DEPT();

     /* if confirm flag was set to yes, submitt JCL*/
     /* else*/
     /* if confirm flag is blank,  display the confirm message*/

  if (PK0YM003.PK0YM-CONFIRM-FLAG == "Y" /* ready to submit JCL*/
   && PK0YW01.PK0YW-ERROR-FLAG == "N")  
    PK0YS-SUB-JCL3(); /* Submitt JCL*/
  end

  if (PK0YM003.PK0YM-CONFIRM-FLAG == " "
   && PK0YW01.PK0YW-ERROR-FLAG == "N")
    PK0YM003.PK0YM-VERIFY-LIT = "*** PLEASE VERIFY ALL INFORMATION ***";
    set PK0YM003.PK0YM-VERIFY-LIT skip, bold;
    PK0YM003.PK0YM-CONFIRM-LIT1 = "OKAY TO PRINT?";
    set PK0YM003.PK0YM-CONFIRM-LIT1 skip, bold;
    PK0YM003.PK0YM-CONFIRM-LIT2 = "(Y/N)";
    set PK0YM003.PK0YM-CONFIRM-LIT2 skip, bold;
    set PK0YM003.PK0YM-CONFIRM-FLAG cursor, initialAttributes;
  end

     /* User is not ready to print at this point*/

  if (PK0YM003.PK0YM-CONFIRM-FLAG == "N")
    PK0YM003.PK0YM-VERIFY-LIT = " ";
    set PK0YM003.PK0YM-VERIFY-LIT skip, invisible;
    PK0YM003.PK0YM-CONFIRM-LIT1 = " ";
    set PK0YM003.PK0YM-CONFIRM-LIT1 skip, invisible;
    PK0YM003.PK0YM-CONFIRM-LIT2 = " ";
    set PK0YM003.PK0YM-CONFIRM-LIT2 skip, invisible;
    set PK0YM003.PK0YM-CONFIRM-FLAG skip, invisible;
    PK0YM003.PK0YM-CONFIRM-FLAG = " ";
    converseLib.validationFailed(486); /* /print request not submitted*/
  end

end // end PK0YS-EDT-MAP3

// Edit Map PK0YM004
Function PK0YS-EDT-MAP4()

     /* validate customer order id*/

  if (PK0YM004.OP-CUST-ORD-ID > 0 /* order entered*/
   && PK0YM004.OP-CUST-ORD-ID != PK0YW01.PK0YW-CUST-ORD-ID) /* and chg*/
    PK0YW01.PK0YW-KEY-CHGD = "Y";
    PK0YS-EDT-OP1CU4(); /* verify order exist*/
  else
    if (PK0YM004.OP-CUST-ORD-ID == 0 /* order not entered*/
     && converseVar.eventKey is enter) /* enter pressed*/
      converseLib.validationFailed(495); /* order number required*/
      PK0YW01.PK0YW-ERROR-FLAG = "Y";
      set PK0YM004.OP-CUST-ORD-ID cursor, bold;
    end
  end

     /* validate nike order id*/

  if (PK0YM004.OP-NIKE-ORD-ID > 0 /* order entered*/
   && PK0YM004.OP-NIKE-ORD-ID != PK0YW01.PK0YW-OP-NIKE-ORD-ID) /* and chg*/
    PK0YW01.PK0YW-KEY-CHGD = "Y";
    PK0YS-EDT-OP1CU4(); /* verify order exist*/
  end

   /* IF PK0YW01.PK0YW-ERROR-FLAG EQ 'N';/* error exists/*later*/
   /* PK0YS-GET-PRD-XREF;*/
   /* END;*/

  if (PK0YW01.PK0YW-ERROR-FLAG == "Y" /* error exists*/
   || PK0YW01.PK0YW-KEY-CHGD == "Y")  /* key changed*/
    PKWREC.PKWFRMAP[1] = "PK0Y"; /* set from application*/
    PK0YS-PRG-TMP-STOR(); /* purge TS*/
    if (PK0YW01.PK0YW-ERROR-FLAG == "Y" /* error exists*/
    )                                   /* continue*/
    else

      set OP2REC empty;
      PK0YW01.PK0YW-EOF-ITEMS = "N"; /* init eof flag*/
      PK0YW01.PK0YW-MORE-SIZES = "N"; /* init more sizes flag*/

      OP2REC.OP1CUOID = PK0YM004.OP-CUST-ORD-ID;
      OP2REC.OP1NORID = PK0YM004.OP-NIKE-ORD-ID;
      PK0YW01.PK0YW-CUST-ORD-ID = PK0YM004.OP-CUST-ORD-ID;
      OP2REC.OP1PARTN = PK0YW01.PK0YW-PART-CHAR;
      PK0YS-BLD-TMP-STOR(); /* build TS with new keys if*/
    end /* no error exist*/
    PK0YW01.PK0YW-SY-STY-NBR = " "; /* init working storage field*/
    PK0YW01.PK0YW-CUST-ORD-ID = PK0YM004.OP-CUST-ORD-ID;
    PK0Y060(); /* get out per incorrect key value*/
  end

     /* edit map bottom to top - select codes, page nbr,*/
     /* pf7/pf8, and relational edits for screen*/


     /* edit confirmation field*/

  PK0YS-EDT-CONFIRM4();

     /* edit select codes*/

  PK0YW01.PK0YW-SUBSCRIPT = 11; /* init subscript*/
  PK0YW01.PK0YW-SEL-MADE-FLAG = "N"; /* init selections made*/

  while (PK0YW01.PK0YW-SUBSCRIPT >= 1) /* process all 11 rows*/
    PK0YS-EDT-SELCDS4();
    PK0YW01.PK0YW-SUBSCRIPT = PK0YW01.PK0YW-SUBSCRIPT - 1;
  end

     /* check if all lines where selected*/

  PK0YS-SEL-ALL4();

     /* edit print quantity*/

  PK0YW01.PK0YW-SUBSCRIPT = 11; /* init subscript*/

  while (PK0YW01.PK0YW-SUBSCRIPT >= 1) /* process all 11 rows*/
    PK0YS-EDT-PRT-QTY4();
    PK0YW01.PK0YW-SUBSCRIPT = PK0YW01.PK0YW-SUBSCRIPT - 1;
  end

     /* edit label stock, all selected items must be the same*/

  PK0YW01.PK0YW-SUBSCRIPT = 11; /* init subscript*/

  while (PK0YW01.PK0YW-SUBSCRIPT >= 1) /* process all 11 rows*/
    PK0YS-EDT-LBL-STK4();
    PK0YW01.PK0YW-SUBSCRIPT = PK0YW01.PK0YW-SUBSCRIPT - 1;
  end

     /* edit case lot nbr*/

  PK0YS-EDT-CASELOT();

     /* edit zebra printer id*/

  PK0YS-EDT-ZEBRA4();

     /* edit page number*/

  PK0YS-EDT-PAG-NBR4();

     /* edit PF7/PF8*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    PK0YS-EDT-PAGING4();
  end

     /* edit selection flag*/

  if (PK0YW01.PK0YW-ERROR-FLAG == "N") /* no errors found yet*/
    PK0YS-EDT-NO-SEL4();
  end

end // end PK0YS-EDT-MAP4

// Edit Map PK0YM005
Function PK0YS-EDT-MAP5()

     /* Edit all fields on PK0YM005 map*/
     /* from bottom to top, so message display correctly*/

  if (PK0YW01.PK0YW-ERROR-FLAG == "Y") /* error exists*/
    PKWREC.PKWFRMAP[1] = "PK0Y"; /* set from application*/
    PK0Y090(); /* get out per incorrect key value*/
  end

  PK0YS-EDT-CONFIRM5();

     /* edit price*/

  PK0YS-EDT-PRICE5();

     /* edit zebra printer id*/

  PK0YS-EDT-ZEBRA5();

     /* if confirm flag was set to yes, submit JCL*/
     /* else*/
     /* if confirm flag is blank,  display the confirm message*/

  if (PK0YM005.PK0YM-CONFIRM-FLAG == "Y" /* ready to submit JCL*/
   && PK0YW01.PK0YW-ERROR-FLAG == "N")  
    PK0YS-SUB-JCL5(); /* Submit JCL*/
  end

  if (PK0YM005.PK0YM-CONFIRM-FLAG == " "
   && PK0YW01.PK0YW-ERROR-FLAG == "N")
    PK0YM005.PK0YM-VERIFY-LIT = "*** PLEASE VERIFY ALL INFORMATION ***";
    set PK0YM005.PK0YM-VERIFY-LIT skip, bold;
    PK0YM005.PK0YM-CONFIRM-LIT1 = "OKAY TO PRINT?";
    set PK0YM005.PK0YM-CONFIRM-LIT1 skip, bold;
    PK0YM005.PK0YM-CONFIRM-LIT2 = "(Y/N)";
    set PK0YM005.PK0YM-CONFIRM-LIT2 skip, bold;
    set PK0YM005.PK0YM-CONFIRM-FLAG cursor, initialAttributes;
  end

     /* User is not ready to print at this point*/

  if (PK0YM005.PK0YM-CONFIRM-FLAG == "N")
    PK0YM005.PK0YM-VERIFY-LIT = " ";
    set PK0YM005.PK0YM-VERIFY-LIT skip, invisible;
    PK0YM005.PK0YM-CONFIRM-LIT1 = " ";
    set PK0YM005.PK0YM-CONFIRM-LIT1 skip, invisible;
    PK0YM005.PK0YM-CONFIRM-LIT2 = " ";
    set PK0YM005.PK0YM-CONFIRM-LIT2 skip, invisible;
    set PK0YM005.PK0YM-CONFIRM-FLAG skip, invisible;
    PK0YM005.PK0YM-CONFIRM-FLAG = " ";
    converseLib.validationFailed(486); /* /print request not submitted*/
  end

end // end PK0YS-EDT-MAP5

// Edit For No Selections
Function PK0YS-EDT-NO-SEL2()

     /* Edit for no selections made*/

  if (PK0YW01.PK0YW-SEL-MADE-FLAG == "N" /* no selection*/
   && converseVar.eventKey is enter      /* enter pressed*/
   && PK0YM002.PK0YM-PAGE-NBR == PK0YW01.PK0YW-PAGE-NBR) /* no page chg*/
    converseLib.validationFailed(472); /* no select made*/
    PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* err flag*/
  end

end // end PK0YS-EDT-NO-SEL2

// Edit For No Selections
Function PK0YS-EDT-NO-SEL4()

     /* Edit for no selections made*/

  if (PK0YW01.PK0YW-SEL-MADE-FLAG == "N" /* no selection*/
   && converseVar.eventKey is enter      /* enter pressed*/
   && PK0YM004.PK0YM-PAGE-NBR == PK0YW01.PK0YW-PAGE-NBR) /* no page chg*/
    converseLib.validationFailed(472); /* no select made*/
    PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* err flag*/
  end

end // end PK0YS-EDT-NO-SEL4

// Edit customer/nike order id
Function PK0YS-EDT-OP1CU4()

     /* verify VORHDR01 record exists*/

  set SQLCA empty;
  set OP1REC empty;

  if (PK0YM004.OP-NIKE-ORD-ID == 0)
    PK0YM004.OP-NIKE-ORD-ID = 1; /* Default to 1*/
  end

  PK0YW01.PK0YW-KEY1 = PK0YM004.OP-CUST-ORD-ID;
  PK0YW01.PK0YW-KEY2 = PK0YM004.OP-NIKE-ORD-ID;
  PK0YW01.PK0YW-POST-KEY = PK0YW01.PK0YW-KEY;

  OP1REC.OP1CUOID = PK0YM004.OP-CUST-ORD-ID;
  OP1REC.OP1NORID = PK0YM004.OP-NIKE-ORD-ID;
  PK0YW01.PK0YW-CUST-ORD-ID = PK0YM004.OP-CUST-ORD-ID;
  OP1REC.OP1PARTN = PK0YW01.PK0YW-PART-CHAR;



  PK0YS-GET-VORHDR01(); /* select order header*/

  if (PK0YW01.PK0YW-HEADER-ERROR == "Y")
    set PK0YM004.OP-CUST-ORD-ID cursor, bold;
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* Order not found*/
    set PK0YM004.OP-CUST-ORD-ID cursor, bold;
    PK0YM004.CU-CO-ID = 0; /* blank out map fields*/
    PK0YM004.CU-STOR-ID = 0;
    PK0YM004.PK0YM-XNX-DEPT-ID-XREF = 0;
    PK0YM004.CU-CO-SHORT-NM = " ";
    PK0YM004.XOB-BASE-OT-CD = " ";
    PK0YM004.XOS-ORD-STAT-CD = " ";
    PK0YM004.XGP-GPC-CD = " ";
  end

    /* if no errors, save parent id for when screen is redisplayed,*/
    /* then edit order header information*/

  PK0YW01.PK0YW-HEADER-ERROR = " ";
  if (PK0YW01.PK0YW-ERROR-FLAG == "N") /* no errors*/
    PK0YW01.PK0YW-CUST-ORD-ID = PK0YM004.OP-CUST-ORD-ID;
    PK0YW01.PK0YW-OP-NIKE-ORD-ID = PK0YM004.OP-NIKE-ORD-ID;
    if (OP1REC.XOSCD == "XL"
     || OP1REC.XOSCD == "SH")
      set PK0YM004.OP-CUST-ORD-ID cursor, bold;
      PK0YW01.PK0YW-ERROR-FLAG = "Y";
      PK0YW01.PK0YW-HEADER-ERROR = "Y"; /* using same error flag*/
      converseLib.validationFailed(485); /* 'xl' and 'sh' statuses not allowed*/
    end
  end

  if (PK0YW-ERROR-FLAG == "Y" /* if any errors don't load heading info*/
  )                           /* next sentence*/
  else
    PK0YS-GET-CUSTNM(); /* get abbreviated customer name*/
   /* Load fields from op1rec to map*/
    PK0YM004.CU-CO-SHORT-NM = KUCREC.CU-CO-SHORT-NM;
    PK0YM004.CU-CO-ID = OP1REC.KUCCOID;
    PK0YM004.CU-STOR-ID = OP1REC.KUMSTRID;
    PK0YM004.PK0YM-XNX-DEPT-ID-XREF = OP1REC.XNXCD;
    PK0YM004.XOB-BASE-OT-CD = OP1REC.XOBCD;
    PK0YM004.XOS-ORD-STAT-CD = OP1REC.XOSCD;
    PK0YM004.XGP-GPC-CD = OP1REC.XGPCD;
  end

end // end PK0YS-EDT-OP1CU4

// Edit customer/nike order id
Function PK0YS-EDT-OP1CUOID()

     /* verify VORHDR01 record exists*/

  set SQLCA empty;
  set OP1REC empty;

  if (PK0YM002.OP-NIKE-ORD-ID == 0)
    PK0YM002.OP-NIKE-ORD-ID = 1; /* Default to 1*/
  end

  PK0YW01.PK0YW-KEY1 = PK0YM002.OP-CUST-ORD-ID;
  PK0YW01.PK0YW-KEY2 = PK0YM002.OP-NIKE-ORD-ID;
  PK0YW01.PK0YW-POST-KEY = PK0YW01.PK0YW-KEY;

  OP1REC.OP1CUOID = PK0YM002.OP-CUST-ORD-ID;
  OP1REC.OP1NORID = PK0YM002.OP-NIKE-ORD-ID;
  PK0YW01.PK0YW-CUST-ORD-ID = PK0YM002.OP-CUST-ORD-ID;
  OP1REC.OP1PARTN = PK0YW01.PK0YW-PART-CHAR;



  PK0YS-GET-VORHDR01(); /* select order header*/

  if (PK0YW01.PK0YW-HEADER-ERROR == "Y")
    set PK0YM002.OP-CUST-ORD-ID cursor, bold;
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* Order not found*/
    set PK0YM002.OP-CUST-ORD-ID cursor, bold;
    PK0YM002.CU-CO-ID = 0; /* blank out map fields*/
    PK0YM002.CU-STOR-ID = 0;
    PK0YM002.PK0YM-XNX-DEPT-ID-XREF = 0;
    PK0YM002.CU-CO-SHORT-NM = " ";
    PK0YM002.XOB-BASE-OT-CD = " ";
    PK0YM002.XOS-ORD-STAT-CD = " ";
    PK0YM002.XGP-GPC-CD = " ";
    PK0YM002.OP-CUST-NEED-DT = 0;
  end

    /* if no errors, save parent id for when screen is redisplayed,*/
    /* then edit order header information*/

  PK0YW01.PK0YW-HEADER-ERROR = " ";
  if (PK0YW01.PK0YW-ERROR-FLAG == "N") /* no errors*/
    PK0YW01.PK0YW-CUST-ORD-ID = PK0YM002.OP-CUST-ORD-ID;
    PK0YW01.PK0YW-OP-NIKE-ORD-ID = PK0YM002.OP-NIKE-ORD-ID;
    if (OP1REC.XOSCD == "XL"
     || OP1REC.XOSCD == "SH")
      set PK0YM002.OP-CUST-ORD-ID cursor, bold;
      PK0YW01.PK0YW-ERROR-FLAG = "Y";
      PK0YW01.PK0YW-HEADER-ERROR = "Y"; /* using same error flag*/
      converseLib.validationFailed(485); /* 'xl' and 'sh' statuses not allowed*/
    end
  end

  if (PK0YW-ERROR-FLAG == "Y" /* if any errors don't load heading info*/
  )                           /* next sentence*/
  else
    PK0YS-GET-CUSTNM(); /* get abbreviated customer name*/
   /* Load fields from op1rec to map*/
    PK0YM002.CU-CO-SHORT-NM = KUCREC.CU-CO-SHORT-NM;
    PK0YM002.CU-CO-ID = OP1REC.KUCCOID;
    PK0YM002.CU-STOR-ID = OP1REC.KUMSTRID;
    PK0YM002.PK0YM-XNX-DEPT-ID-XREF = OP1REC.XNXCD;
    PK0YM002.XOB-BASE-OT-CD = OP1REC.XOBCD;
    PK0YM002.XOS-ORD-STAT-CD = OP1REC.XOSCD;
    PK0YM002.OP-CUST-NEED-DT = OP1REC.OP1CUNDT;
    PK0YM002.XGP-GPC-CD = OP1REC.XGPCD;
  end

end // end PK0YS-EDT-OP1CUOID

// Edit Page Number
Function PK0YS-EDT-PAG-NBR()

     /* Editing page number, which can't be greater than max page*/

  if (PK0YM002.PK0YM-PAGE-NBR > PK0YM002.PK0YM-MAX-PAGE /* changed pg*/
   || PK0YM002.PK0YM-PAGE-NBR < 1)                     
    PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set error*/
    converseLib.validationFailed(306); /* page number must be between 1 and last page #*/
    set PK0YM002.PK0YM-PAGE-NBR cursor, bold;
   /* reset pg*/
    PK0YM002.PK0YM-PAGE-NBR = PK0YW01.PK0YW-PAGE-NBR;
  end

end // end PK0YS-EDT-PAG-NBR

// Edit Page Number
Function PK0YS-EDT-PAG-NBR4()

     /* Editing page number, which can't be greater than max page*/

  if (PK0YM004.PK0YM-PAGE-NBR > PK0YM004.PK0YM-MAX-PAGE /* changed pg*/
   || PK0YM004.PK0YM-PAGE-NBR < 1)                     
    PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set error*/
    converseLib.validationFailed(306); /* page number must be between 1 and last page #*/
    set PK0YM004.PK0YM-PAGE-NBR cursor, bold;
   /* reset pg*/
    PK0YM004.PK0YM-PAGE-NBR = PK0YW01.PK0YW-PAGE-NBR;
  end

end // end PK0YS-EDT-PAG-NBR4

// Edit PF7/PF8 and Page Nbr Chg
Function PK0YS-EDT-PAGING()

     /* Editing PF7 and PF8 keys*/

  if (converseVar.eventKey is pf7
   && PK0YM002.PK0YM-PAGE-NBR == 1) /* at first page*/
    PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set error*/
    converseLib.validationFailed(37); /* cant scroll backward*/
  end

  if (converseVar.eventKey is pf8 /* at max page*/
   && PK0YM002.PK0YM-PAGE-NBR >= PK0YW01.PK0YW-MAX-PAGE)
    PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set error*/
    converseLib.validationFailed(38); /* cant scroll forward*/
  end

  if (PK0YM002.PK0YM-PAGE-NBR != PK0YW01.PK0YW-PAGE-NBR) /* pf7/pf8 & pg chg*/
    PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set error*/
    converseLib.validationFailed(471); /* cant scroll and chg pg number*/
    set PK0YM002.PK0YM-PAGE-NBR cursor, bold;
    PK0YM002.PK0YM-PAGE-NBR = PK0YW01.PK0YW-PAGE-NBR; /* reset pg nbr*/
  end

end // end PK0YS-EDT-PAGING

// Edit PF7/PF8 and Page Nbr Chg
Function PK0YS-EDT-PAGING4()

     /* Editing PF7 and PF8 keys*/

  if (converseVar.eventKey is pf7
   && PK0YM004.PK0YM-PAGE-NBR == 1) /* at first page*/
    PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set error*/
    converseLib.validationFailed(37); /* cant scroll backward*/
  end

  if (converseVar.eventKey is pf8 /* at max page*/
   && PK0YM004.PK0YM-PAGE-NBR >= PK0YW01.PK0YW-MAX-PAGE)
    PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set error*/
    converseLib.validationFailed(38); /* cant scroll forward*/
  end

  if (PK0YM004.PK0YM-PAGE-NBR != PK0YW01.PK0YW-PAGE-NBR) /* pf7/pf8 & pg chg*/
    PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set error*/
    converseLib.validationFailed(471); /* cant scroll and chg pg number*/
    set PK0YM004.PK0YM-PAGE-NBR cursor, bold;
    PK0YM004.PK0YM-PAGE-NBR = PK0YW01.PK0YW-PAGE-NBR; /* reset pg nbr*/
  end

end // end PK0YS-EDT-PAGING4

// Edit print quantity & price
Function PK0YS-EDT-PRICE5()
  sysVar.arrayIndex = 1;
  PK0YW04.PK0YW-PRICE-FLAG = "N";

  while (sysVar.arrayIndex <= 11 && converseVar.validationMsgNum == 0)
    if (PK0YM005.PK0YM-PRICE[sysVar.arrayIndex] == 0
     && 
    PK0YM005.PK0YM-QUANTITY[sysVar.arrayIndex] > 0)
      PK0YW01.PK0YW-ERROR-FLAG = "Y";
      set PK0YM005.PK0YM-PRICE[sysVar.arrayIndex] cursor, bold;
      set PK0YM005.PK0YM-QUANTITY[sysVar.arrayIndex] bold;
      converseLib.validationFailed(521);
    end
    if (PK0YM005.PK0YM-PRICE[sysVar.arrayIndex] > 0
     && 
    PK0YM005.PK0YM-QUANTITY[sysVar.arrayIndex] == 0)
      PK0YW01.PK0YW-ERROR-FLAG = "Y";
      set PK0YM005.PK0YM-PRICE[sysVar.arrayIndex] bold;
      set PK0YM005.PK0YM-QUANTITY[sysVar.arrayIndex] cursor, bold;
      converseLib.validationFailed(521);
    end
    if (PK0YM005.PK0YM-PRICE[sysVar.arrayIndex] > 0
     && 
    PK0YM005.PK0YM-QUANTITY[sysVar.arrayIndex] > 0)
      PK0YW04.PK0YW-PRICE-FLAG = "Y";
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end
  if (PK0YW04.PK0YW-PRICE-FLAG == "N"
   && converseVar.validationMsgNum == 0)
    PK0YW01.PK0YW-ERROR-FLAG = "Y";
    set PK0YM005.PK0YM-PRICE[1] cursor;
    converseLib.validationFailed(522);
  end
end // end PK0YS-EDT-PRICE5

// Edit product using VCOLOR01
Function PK0YS-EDT-PRODUCT()

     /* validate GPC/Style/Color/Dimension using DPROD.VCOLOR01 table*/

  set SY2REC empty;

  SY2REC.SY1STNBR = PK0YM003.SY1STNBR;
  SY2REC.SY2CLRID = PK0YM003.SY2CLRID;
  SY2REC.XDMCD = PK0YM003.XDMCD;
  SY2REC.XGPCD = PK0YM003.XGPCD;

  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(479); /* style/color is not valid*/
      PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* error flag*/
      set PK0YM003.SY1STNBR cursor, bold;
      set PK0YM003.SY2CLRID bold;
      set PK0YM003.XDMCD bold;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "PK0Y    ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "EDT-PROD";
      TA1REC.TA1LOCAT[3] = " IO0130 ";
      TA1REC.TA1LOCAT[4] = "SY2REC  ";
      TA1REC.TA1DBASE = "DPROD   ";
      TA1REC.TA1TBLVU = "VCOLOR01";
      TA1REC.TA1TBLKE = SY2REC.SY2KEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error clear ws*/
      XSPF4();
      exit program;
    end
  end

end // end PK0YS-EDT-PRODUCT

// Edit print quantity
Function PK0YS-EDT-PRT-QTY()

     /*  */
     /* removed following logic which defaulted moved order quantity*/
     /* to print quantity, if line was selected but no print quantity*/
     /* entered.*/
     /*  */

  if ((PK0YW00.PK0YW-SELECT-ALL == "A"
   || PK0YW00.PK0YW-SELECT-ALL == "O")
   && 
  PK0YM002.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] == 0)
    if (PK0YW00.PK0YW-SELECT-ALL == "A") /* move allocation quantity*/
      PK0YM002.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] = PK0YM002.PK0YM-OP-ALOC-QTY[PK0YW-SUBSCRIPT];
    end
    if (PK0YW00.PK0YW-SELECT-ALL == "O") /* move order quantity*/
      PK0YM002.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] = PK0YM002.PK0YM-ON-ORD-QTY[PK0YW-SUBSCRIPT];
    end
  end

     /* print quantity is entered, but the line is not selected*/

  if (PK0YM002.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == " "
   && 
  PK0YM002.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] > 0)
    PK0YW01.PK0YW-ERROR-FLAG = "Y";
    set PK0YM002.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] cursor, bold;
    converseLib.validationFailed(468);
  end

     /* line selected but alloc quantity and print quantity*/
     /* both equal zeros*/

  if (PK0YM002.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "S"
   && 
  PK0YM002.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] == 0)
    PK0YW01.PK0YW-ERROR-FLAG = "Y";
    set PK0YM002.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] cursor, bold;
    converseLib.validationFailed(476);
  end

     /* print quantity cannot be more than 10 percent above or*/
     /* below alloc quantity.  This will only display a warning*/
     /* message.  IF the allocation quantity equals zero, the on*/
     /* order quantity is used for the calculation.  IF both are zero*/
     /* a warning message is displayed.*/


  if (PK0YW01.PK0YW-ERROR-FLAG == "Y" /* avoiding divde error*/
  )                                   /* next sentence*/
  else
    if (PK0YM002.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "S"
     && PK0YM002.PK0YM-OP-ALOC-QTY[PK0YW-SUBSCRIPT] != 0)
      PK0YW-PERCENT-DIFFERENCE = PK0YM002.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] /       PK0YM002.PK0YM-OP-ALOC-QTY[PK0YW-SUBSCRIPT];
      if (PK0YW-PERCENT-DIFFERENCE > 1
       || PK0YW-PERCENT-DIFFERENCE < 1)
        set PK0YM002.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] cursor, bold;
        converseLib.validationFailed(484);
      end
    else
      if (PK0YM002.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "S"
       && PK0YM002.PK0YM-OP-ALOC-QTY[PK0YW-SUBSCRIPT] == 0
       && PK0YM002.PK0YM-ON-ORD-QTY[PK0YW-SUBSCRIPT] != 0)
        PK0YW-PERCENT-DIFFERENCE = PK0YM002.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] /         PK0YM002.PK0YM-ON-ORD-QTY[PK0YW-SUBSCRIPT];
        if (PK0YW-PERCENT-DIFFERENCE > 1
         || PK0YW-PERCENT-DIFFERENCE < 1)
          set PK0YM002.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] cursor, bold;
          converseLib.validationFailed(493);
        end
      else
        if (PK0YM002.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "S"
         && PK0YM002.PK0YM-OP-ALOC-QTY[PK0YW-SUBSCRIPT] == 0
         && PK0YM002.PK0YM-ON-ORD-QTY[PK0YW-SUBSCRIPT] == 0)
          set PK0YM002.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] cursor, bold;
          converseLib.validationFailed(484);
        end
      end
    end
  end

end // end PK0YS-EDT-PRT-QTY

// Edit print quantity
Function PK0YS-EDT-PRT-QTY4()

     /*  */
     /* removed following logic which defaulted moved order quantity*/
     /* to print quantity, if line was selected but no print quantity*/
     /* entered.*/
     /*  */

  if (PK0YW00.PK0YW-SELECT-ALL == "A"
   && 
  PK0YM004.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] == 0)
    PK0YM004.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] = PK0YM004.PK0YM-ON-ORD-QTY[PK0YW-SUBSCRIPT];
  end

     /* print quantity is entered, but the line is not selected*/

  if (PK0YM004.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == " "
   && 
  PK0YM004.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] > 0)
    PK0YW01.PK0YW-ERROR-FLAG = "Y";
    set PK0YM004.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] cursor, bold;
    converseLib.validationFailed(468);
  end

     /* line selected but alloc quantity and print quantity*/
     /* both equal zeros*/

  if (PK0YM004.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "S"
   && 
  PK0YM004.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] == 0)
    PK0YW01.PK0YW-ERROR-FLAG = "Y";
    set PK0YM004.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] cursor, bold;
    converseLib.validationFailed(476);
  end

     /* print quantity cannot be more than 10 percent above or*/
     /* below alloc quantity.  This will only display a warning*/
     /* message.  IF the allocation quantity equals zero, the on*/
     /* order quantity is used for the calculation.  IF both are zero*/
     /* a warning message is displayed.*/


  if (PK0YW01.PK0YW-ERROR-FLAG == "Y" /* avoiding divde error*/
  )                                   /* next sentence*/
  else
    if (PK0YM004.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "S"
     && PK0YM004.PK0YM-ON-ORD-QTY[PK0YW-SUBSCRIPT] != 0)
      PK0YW-PERCENT-DIFFERENCE = PK0YM004.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] /       PK0YM004.PK0YM-ON-ORD-QTY[PK0YW-SUBSCRIPT];
      if (PK0YW-PERCENT-DIFFERENCE > 1
       || PK0YW-PERCENT-DIFFERENCE < 1)
        set PK0YM004.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] cursor, bold;
        converseLib.validationFailed(493);
      end
    else
      if (PK0YM004.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "S"
       && PK0YM004.PK0YM-ON-ORD-QTY[PK0YW-SUBSCRIPT] == 0)
        set PK0YM004.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] cursor, bold;
        converseLib.validationFailed(484);
      end
    end
  end

end // end PK0YS-EDT-PRT-QTY4

// Edit Select Codes
Function PK0YS-EDT-SELCDS2()

     /* compare select codes on screen with temp storage,*/
     /* if they are equal - OK*/
     /* if user entered ' ' or 'S'  -  OK*/
     /* other select options are errors.*/

  if (PK0YW02.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == 
  PK0YM002.PK0YM-SEL-CD[PK0YW-SUBSCRIPT])
     /* next sentence*/
  else
    if (PK0YM002.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == " " /* blank*/
     || PK0YM002.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "S" /* select made*/
     || PK0YM002.PK0YM-SEL-CD[1] == "A"               /* select all (alloc qty)*/
     || PK0YM002.PK0YM-SEL-CD[1] == "O")              /* select all (order qty)*/
       /* next sentence*/
    else
      PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set err flag*/
      converseLib.validationFailed(014); /* select option invalid - enter 's'*/
      set PK0YM002.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] cursor, bold;
    end
  end

  if (PK0YM002.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "S" /* selection made*/
   || PK0YM002.PK0YM-SEL-CD[1] == "A"               /* select all (alloc qty)*/
   || PK0YM002.PK0YM-SEL-CD[1] == "O")              /* select all (order qty)*/
    PK0YW01.PK0YW-SEL-MADE-FLAG = "Y"; /* set select flag*/
  end

end // end PK0YS-EDT-SELCDS2

// Edit Select Codes
Function PK0YS-EDT-SELCDS4()

     /* compare select codes on screen with temp storage,*/
     /* if they are equal - OK*/
     /* if user entered ' ' or 'S'  -  OK*/
     /* other select options are errors.*/

  if (PK0YW02.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == 
  PK0YM004.PK0YM-SEL-CD[PK0YW-SUBSCRIPT])
     /* next sentence*/
  else
    if (PK0YM004.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == " " /* blank*/
     || PK0YM004.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "S" /* select made*/
     || PK0YM004.PK0YM-SEL-CD[1] == "A"               /* select all (alloc qty)*/
     || PK0YM004.PK0YM-SEL-CD[1] == "O")              /* select all (order qty)*/
       /* next sentence*/
    else
      PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set err flag*/
      converseLib.validationFailed(014); /* select option invalid - enter 's'*/
      set PK0YM004.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] cursor, bold;
    end
  end

  if (PK0YM004.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "S" /* selection made*/
   || PK0YM004.PK0YM-SEL-CD[1] == "A"               /* select all (alloc qty)*/
   || PK0YM004.PK0YM-SEL-CD[1] == "O")              /* select all (order qty)*/
    PK0YW01.PK0YW-SEL-MADE-FLAG = "Y"; /* set select flag*/
  end

end // end PK0YS-EDT-SELCDS4

// Edit Size id on map 3
Function PK0YS-EDT-SIZE3()

     /* edit size id using module SY1190*/

  set OP3REC empty;
  set SYPREC empty;
  SYPREC.SYPFC = "PC"; /* product code*/
  SYPREC.SYPCMPSW = "N"; /* non compressed data*/
  SYPREC.XGPCD = PK0YM003.XGPCD;
  SYPREC.SY1STNBR = PK0YM003.SY1STNBR;
  SYPREC.SY2CLRID = PK0YM003.SY2CLRID;
  SYPREC.XDMCD = PK0YM003.XDMCD;

  if (PKWREC.XWHCD == "51")
    SYPREC.XQACD = "**";
  else
    SYPREC.XQACD = PK0YM003.XQACD;
  end

  PK0YS-CONVERT-SIZE(); /* get all 40 sizes for the product*/

  if (PKWREC.XWHCD == "51")
    SYPREC.XQACD = PK0YM003.XQACD;
  end

  sysVar.arrayIndex = 1; /* init working storage internal sizes*/
  while (sysVar.arrayIndex <= 5)
    PK0YW01.PK0YW-HOLD-SY5SZID[sysVar.arrayIndex] = 0;
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  PK0YW-SUBSCRIPT = 1; /* the 40 buckets*/
  while (PK0YW-SUBSCRIPT <= 5)
    if (PK0YM003.SY4IDDSC[PK0YW-SUBSCRIPT] > " ")
      PK0YW01.PK0YW-SIZE-MATCHED-FLAG = "N";
      sysVar.arrayIndex = 1; /* check all 40 size buckets*/
      while (sysVar.arrayIndex <= 40)
        if (SYPREC.SY4IDDSC[sysVar.arrayIndex] == PK0YM003.SY4IDDSC[PK0YW-SUBSCRIPT])
          PK0YW01.PK0YW-SIZE-MATCHED-FLAG = "Y";
          PK0YW01.PK0YW-HOLD-SY5SZID[PK0YW-SUBSCRIPT] = SYPREC.SY5SZID[sysVar.arrayIndex];
          sysVar.arrayIndex = 41;
        end
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      end
      if (PK0YW-SIZE-MATCHED-FLAG == "N")
        converseLib.validationFailed(478);
        PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set error flag*/
        set PK0YM003.SY4IDDSC[PK0YW-SUBSCRIPT] cursor, bold;
      end
    end
    PK0YW-SUBSCRIPT = PK0YW-SUBSCRIPT + 1;
  end

end // end PK0YS-EDT-SIZE3

// Edit ticketing type Map03
Function PK0YS-EDT-TICK-TYP()

     /* Checking PK-LABL-PRT-IND to make sure*/
     /* the proper fields were entered, depending on*/
     /* if the product is ticketed bi size or product*/

  if (PK0YT-XREF-LVL-IND[PK0YW-LABL-SUB] == "P"
   && PK0YM003.PK0YM-PRINT-QTY-PRODUCT == 0)
    converseLib.validationFailed(489); /* Label by product, but product*/
    PK0YW01.PK0YW-ERROR-FLAG = "Y";
    set PK0YM003.PK0YM-PRINT-QTY-PRODUCT bold, cursor;
  end /* data not entered*/

  if (PK0YT-XREF-LVL-IND[PK0YW-LABL-SUB] == "S"
   && PK0YM003.SY4IDDSC[1] == " "
   && PK0YM003.SY4IDDSC[2] == " "
   && PK0YM003.SY4IDDSC[3] == " "
   && PK0YM003.SY4IDDSC[4] == " "
   && PK0YM003.SY4IDDSC[5] == " ")
    converseLib.validationFailed(490); /* Label by size, but size data*/
    PK0YW01.PK0YW-ERROR-FLAG = "Y";
    set PK0YM003.SY4IDDSC[1] bold, cursor;
  end /* not entered*/

     /* Make sure that both size and product data was not entrered*/

  if (PK0YM003.SY4IDDSC[1] > " "
   || PK0YM003.SY4IDDSC[2] > " "
   || PK0YM003.SY4IDDSC[3] > " "
   || PK0YM003.SY4IDDSC[4] > " "
   || PK0YM003.SY4IDDSC[5] > " ")
    if (PK0YM003.PK0YM-PRINT-QTY-PRODUCT != 0)
      converseLib.validationFailed(492); /* both size and product data*/
      PK0YW01.PK0YW-ERROR-FLAG = "Y";
      set PK0YM003.PK0YM-PRINT-QTY-PRODUCT bold, cursor, red;
      set PK0YM003.SY4IDDSC[1] bold, cursor, red;
      set PK0YM003.PK0YM-PRINT-QTY-SZ[1] bold, cursor, red;
    end
  end /* not allowed*/

     /* If size data entered, make sure both size and quantity entered*/

  if (PK0YT-XREF-LVL-IND[PK0YW-LABL-SUB] == "S")
    sysVar.arrayIndex = 1;
    while (sysVar.arrayIndex <= 5)
      if (PK0YM003.SY4IDDSC[sysVar.arrayIndex] > " "
       && PK0YM003.PK0YM-PRINT-QTY-SZ[sysVar.arrayIndex] == 0)
        converseLib.validationFailed(491); /* size and quantity are both required*/
        PK0YW01.PK0YW-ERROR-FLAG = "Y";
        set PK0YM003.SY4IDDSC[sysVar.arrayIndex] bold, cursor;
      end
      if (PK0YM003.SY4IDDSC[sysVar.arrayIndex] == " "
       && PK0YM003.PK0YM-PRINT-QTY-SZ[sysVar.arrayIndex] != 0)
        converseLib.validationFailed(491); /* size and quantity are both required*/
        PK0YW01.PK0YW-ERROR-FLAG = "Y";
        set PK0YM003.SY4IDDSC[sysVar.arrayIndex] bold, cursor;
      end
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    end
  end
end // end PK0YS-EDT-TICK-TYP

// Edit Zebra Printer ID MAP 2
Function PK0YS-EDT-ZEBRA2()

  if (PK0YM002.PK0YM-PRINTER-ID in PK0YTZP.PK0YT-ZEBRA-PRINTER
  ) /* next sentence*/
  else
    converseLib.validationFailed(124); /* printer id missing or invalid*/
    PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set error flag*/
    set PK0YM002.PK0YM-PRINTER-ID cursor, bold;
  end

end // end PK0YS-EDT-ZEBRA2

// Edit Zebra Printer ID MAP 3
Function PK0YS-EDT-ZEBRA3()

  if (PK0YM003.PK0YM-PRINTER-ID in PK0YTZP.PK0YT-ZEBRA-PRINTER
  ) /* next sentence*/
  else
    converseLib.validationFailed(124); /* printer id missing or invalid*/
    PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set error flag*/
    set PK0YM003.PK0YM-PRINTER-ID cursor, bold;
  end

end // end PK0YS-EDT-ZEBRA3

// Edit Zebra Printer ID MAP 4
Function PK0YS-EDT-ZEBRA4()

  if (PK0YM004.PK0YM-PRINTER-ID in PK0YTZP.PK0YT-ZEBRA-PRINTER
  ) /* next sentence*/
  else
    converseLib.validationFailed(124); /* printer id missing or invalid*/
    PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set error flag*/
    set PK0YM004.PK0YM-PRINTER-ID cursor, bold;
  end

end // end PK0YS-EDT-ZEBRA4

// Edit Zebra Printer ID MAP 5
Function PK0YS-EDT-ZEBRA5()

  if (PK0YM005.PK0YM-PRINTER-ID in PK0YTZP.PK0YT-ZEBRA-PRINTER
  ) /* next sentence*/
  else
    converseLib.validationFailed(124); /* printer id missing or invalid*/
    PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set error flag*/
    set PK0YM005.PK0YM-PRINTER-ID cursor, bold;
  end

end // end PK0YS-EDT-ZEBRA5

// Format PK0YM002 Map Headings
Function PK0YS-FMT-HEADING2()

  PK0YM002.XXXCURDT = VGVar.currentShortGregorianDate; /* formatted current date*/

  PK0YM002.XXXRVNBR = 07;

  PK0YM002.XWHCD = PK0YM001.XWHCD;
  PK0YM002.PK0YM-PAGE-NBR = PK0YW01.PK0YW-PAGE-NBR;
  PK0YM002.PK0YM-MAX-PAGE = PK0YW01.PK0YW-MAX-PAGE;

  PK0YW01.PK0YW-CUST-ORD-ID = PK0YM002.OP-CUST-ORD-ID;
  PK0YW01.PK0YW-OP-NIKE-ORD-ID = PK0YM002.OP-NIKE-ORD-ID;
  if ((PK0YM002.PK0YM-PRINTER-ID == 0
   && PK0YM001.XWHCD == "51"))
    PK0YM002.PK0YM-PRINTER-ID = 161; /* Default Print id to 161*/
  end

end // end PK0YS-FMT-HEADING2

// Format PK0YM003 Map Headings
Function PK0YS-FMT-HEADING3()

  PK0YM003.XXXCURDT = VGVar.currentShortGregorianDate; /* formatted current date*/

  PK0YM003.XXXRVNBR = 07;

  if ((PK0YM003.PK0YM-PRINTER-ID == 0
   && PK0YM001.XWHCD == "51"))
    PK0YM003.PK0YM-PRINTER-ID = 161; /* Default Print id to 161*/
  end

end // end PK0YS-FMT-HEADING3

// Format PK0YM004 Map Headings
Function PK0YS-FMT-HEADING4()

  PK0YM004.XXXCURDT = VGVar.currentShortGregorianDate; /* formatted current date*/

  PK0YM004.XXXRVNBR = 07;

  PK0YM004.XWHCD = PK0YM001.XWHCD;
  PK0YM004.PK0YM-PAGE-NBR = PK0YW01.PK0YW-PAGE-NBR;
  PK0YM004.PK0YM-MAX-PAGE = PK0YW01.PK0YW-MAX-PAGE;

  PK0YW01.PK0YW-CUST-ORD-ID = PK0YM004.OP-CUST-ORD-ID;
  PK0YW01.PK0YW-OP-NIKE-ORD-ID = PK0YM004.OP-NIKE-ORD-ID;
  if ((PK0YM004.PK0YM-PRINTER-ID == 0
   && PK0YM001.XWHCD == "51"))
    PK0YM004.PK0YM-PRINTER-ID = 161; /* Default Print id to 161*/
  end

end // end PK0YS-FMT-HEADING4

// Format PK0YM005 Map Headings
Function PK0YS-FMT-HEADING5()

  PK0YM005.XXXCURDT = VGVar.currentShortGregorianDate; /* formatted current date*/

  PK0YM005.XXXRVNBR = 07;

  if ((PK0YM005.PK0YM-PRINTER-ID == 0
   && PK0YM005.XWHCD == "51"))
    PK0YM005.PK0YM-PRINTER-ID = 161; /* Default Print id to 161*/
  end

end // end PK0YS-FMT-HEADING5

// Edit cust/label, get nm, map3
Function PK0YS-GET-CUSTLABL()
   /* **********************************************************************/
   /* search internal table for gpc, customer, label code combination*/
   /* **********************************************************************/

  if ((PK0YT-XGP-GPC-CD[PK0YW-LABL-SUB] == PK0YW-XGP-GPC-CD
   && PK0YT-CU-CO-ID[PK0YW-LABL-SUB] == PK0YW-CUSTOMER
   && PK0YT-PK-LABL-CD[PK0YW-LABL-SUB] == PK0YW-PK-LABL-CD))

    PK0YW-VALID-CUSTLABL = "Y";

  else

    if (PK0YW-XGP-GPC-CD == "03"
     && PK0YW-PK-LABL-CD == "   "
     /* AND PK0YW01.PK0YW-SEL-CD EQ '03';/* Map by Order with Caselot*/
     && PK0YM001.PK0YM-SEL-CD == "03") /* Map by Order with Caselot*/

      PK0YW-VALID-CUSTLABL = "Y";

    else

      PK0YW-LABL-SUB = PK0YW-LABL-SUB + 1;

    end
  end
end // end PK0YS-GET-CUSTLABL

// get company record
Function PK0YS-GET-CUSTNM()


  set KUCREC empty; /* init record*/

      /* get customer company record*/

  KUCREC.KUCCOID = OP1REC.KUCCOID; /* load key - company*/
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* check for good rc*/
     /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
      TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
      PK0YW01.PK0YW-KUCCOID = KUCREC.KUCCOID; /* bin to num*/
      TA1REC.TA1TBLKE = PK0YW01.PK0YW-KUCCOID; /* key value*/
      TA1REC.TA1LOCAT[3] = "CUSTNM  "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO0240  "; /* i/o mod name*/
      XSOPS02(); /* abend routine*/
    end
  end

   /* *************************************************************/
end // end PK0YS-GET-CUSTNM

// Edit Department id - DC0040
Function PK0YS-GET-DEPT()

     /* validate department id using table XNXTBL*/


  if (PK0YM003.PK0YM-XNX-DEPT-ID-XREF in XNXTBL.XNXCD
  ) /* next sentence*/
  else
    converseLib.validationFailed(481); /* department id invalid*/
    PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set error flag*/
    set PK0YM003.PK0YM-XNX-DEPT-ID-XREF bold, cursor;
  end

end // end PK0YS-GET-DEPT

// Algorythm to calculate job nam
Function PK0YS-GET-JOBNM()

     /* algorythm to determine job name*/


  PK0YW01.PK0YW-SYS-PREFIX = "PKTIK"; /* first five bytes*/
  PK0YW01.PK0YW-DATE = VGVar.currentShortGregorianDate; /* reformat date/time*/
  PK0YW01.PK0YW-TIME = VGVar.currentFormattedTime; /* reformat date/time*/
  PK0YW01.PK0YW-SECONDS = PK0YW01.PK0YW-SECONDS * 6;
  PK0YW-DATE-TIME-SUMM = PK0YW01.PK0YW-MM +                        PK0YW01.PK0YW-DD +                        PK0YW01.PK0YW-YY +                        PK0YW01.PK0YW-HOURS +                        PK0YW01.PK0YW-MINUTES +                        PK0YW01.PK0YW-SECONDS;

end // end PK0YS-GET-JOBNM

// Get OP1REC VIA IO For VORHDR01
Function PK0YS-GET-VORHDR01()

     /* Get DORDER.VORHDR01 using OP1REC*/

   /* START ADD 05/15/00 SAP  SELECT OTP HDR FOR CANADA/ OTHER ORDER HDR*/
  XX0XW03.XWHCD = PK0YM002.XWHCD;
  OP1REC.XWHCD = PK0YM002.XWHCD;
  XSPKS-SEL-ORDER-04();
   /* END ADD 05/15/00 SAP  SELECT OTP HDR FOR CANADA/ OTHER ORDER HDR*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* continue*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* Order not found*/
      converseLib.validationFailed(184);
      PK0YW01.PK0YW-ERROR-FLAG = "Y";
      PK0YW01.PK0YW-HEADER-ERROR = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(010);
        PK0YW01.PK0YW-ERROR-FLAG = "Y";
        PK0YW01.PK0YW-HEADER-ERROR = "Y";
        return;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "PK0Y    ";
        TA1REC.TA1PGMAP = PK0YW-MAP-INUSE;
        TA1REC.TA1LOCAT[1] = "PK0YS-GE";
        TA1REC.TA1LOCAT[2] = "T-VORHDR";
        TA1REC.TA1LOCAT[3] = "01 IO043";
        TA1REC.TA1LOCAT[4] = "0 S     ";
        TA1REC.TA1DBASE = "DORDER  ";
        TA1REC.TA1TBLVU = "VORHDR01";
        TA1REC.TA1TBLKE = PK0YW01.PK0YW-POST-KEY;

        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};

        COMMAREA.CAUSERA = " ";

        XSPF4();
        exit program;
      end
    end
  end

end // end PK0YS-GET-VORHDR01

// Get OP3REC VIA IO For VOSIZE01
Function PK0YS-GET-VOSIZE01()

     /*  */
     /* only expecting one row from the IO6030 module*/
     /* the main reason this routine is needed is to get the 40 buckets*/
     /* for the on order quantity*/
     /*  */

  set SQLCA empty;
  set OP3REC empty;


   /* ==================================*/
      /* set up key to read db record*/
   /* ==================================*/

  OP3REC.OP1PARTN = OP2REC.OP1PARTN; /* partition*/
  OP3REC.OP1CUOID = OP2REC.OP1CUOID; /* cust. ord id*/
  OP3REC.OP1NORID = OP2REC.OP1NORID; /* nike ord id*/
  OP3REC.OP2LNINB = OP2REC.OP2LNINB; /* line item no.*/


     /* ===============================================*/
     /* SET UP PARM RECORD (OP8REC) TO BE PASSED TO*/
     /* DB1000*/
     /* ===============================================*/

  set OP8REC empty; /* initialize*/

  OP8REC.OP8TASK = "S "; /* select a record*/
  OP8REC.OP8LOCAT[1] = "PK0Y020 "; /* process name*/
  OP8REC.OP8LOCAT[2] = "PK0YS-GE"; /* group name*/
  OP8REC.OP8LOCAT[3] = "T-VOSIZE"; /* filler*/
  OP8REC.OP8LOCAT[4] = "01      "; /* filler*/
  OP8REC.OP8MAP = PK0YW01.PK0YW-MAP-INUSE; /* map name*/
  OPBREC.OPBSZRC = +911; /* inform DB1000 not to abend*/

   /* ==============================*/
      /* call db1000 to read db2*/
   /* ==============================*/

   /* START ADD 05/15/00  SAP SELECT OTP ITEM-SIZE/ DB1000*/

  XX0XW03.XWHCD = PK0YM002.XWHCD;
  XSPKS-SELCT-ITM-SZ(); /* SELECT OTP ITEM-SIZE FOR CANADA/ OTHERS DB1000*/

   /* START ADD 05/15/00  SAP SELECT OTP ITEM-SIZE/ DB1000*/


  if (SQLCA.VAGen_SQLCODE == 0)
    /* continue*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "PK0Y    ";
    TA1REC.TA1PGMAP = "PK0YM002";
    TA1REC.TA1PGMAP = PK0YW01.PK0YW-MAP-INUSE;
    TA1REC.TA1LOCAT[1] = "PK0YS-GE";
    TA1REC.TA1LOCAT[2] = "T-VOSIZE";
    TA1REC.TA1LOCAT[3] = "01 DB100";
    TA1REC.TA1LOCAT[4] = "0 S     ";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VOSIZE01";
    TA1REC.TA1TBLKE = PK0YW01.PK0YW-POST-KEY;

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};

    COMMAREA.CAUSERA = " ";

    XSPF4();
    exit program;
  end

end // end PK0YS-GET-VOSIZE01

// Initialize PK0Y Application
Function PK0YS-INIT-PK0Y()

  XPPK001(); /* Application initialzation*/

  set UT1REC empty; /* Initialize subroutine parameters*/

  call "UT0200" (UT1REC) {isNoRefresh = yes, isExternal = yes}; /* Obtain user Identification*/

  if (UT1REC.UT1RETCD != 0) /* Non-zero return code*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of Error*/
    TA1REC.TA1PGMNM = "PK0YS-INIT-PK0Y"; /* Process Name*/
    TA1REC.TA1LOC = "OBTAIN CICS USER IDENTIFICATION";
    SQLCA.SQLCAREC = UT1REC.UT1GRPLV; /* Error Info*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.validationFailed(29); /* Indicate system error*/

    COMMAREA.CATOAP = "PK0A"; /* Picking Master Menu*/

   /* Exit to master menu*/
    XSEXIT();
    exit program; /* Terminate App if exit failed*/

  end

  set SQLCA empty; /* return code from DB2*/
  set TA1REC empty; /* diagnostic record*/
  set PK0YW00 empty; /* common working storage*/
  set PK0YW01 empty; /* common working storage*/
  set PK0YW02 empty; /* common working storage*/
  set PK0YW03 empty; /* common working storage*/
  set PKDREC empty; /* Initialize warehouse controls*/

  set PK0YM001 empty; /* On-Demand Customer Labels Map*/
  set PK0YM002 empty; /* Customer Labels by Order Map*/
  set PK0YM003 empty; /* Customer Labeels by Product Map*/

  PK0YW01.PK0YWUID = UT1REC.UT1USRID;

  PK0YW01.XWHCD = PKWREC.XWHCD; /* Initialize Warehouse Code*/
  PK0YW01.XWHABRV = PKWREC.XWHABRV; /* and abbreviation*/

  PK0YW01.XXXRVNBR = "07"; /* Application revision number*/

end // end PK0YS-INIT-PK0Y

// Load Hndl code into Temp Stor
Function PK0YS-LOAD-HNDLCD()
     /* *************************************************************/
     /* Check all five occurances of the handling code on the op2rec.*/
     /* Look for 'LBL' or 'FLB'.  If neither of these exists, set*/
     /* the EZETST subscript to one, so the first handling code will*/
     /* be used back in routine which called this one.*/
     /* *************************************************************/

  sysVar.arrayIndex = 1;
  PK0YW02.XHD-HNDL-CD[PK0YW-SUBSCRIPT] = " ";
  while (sysVar.arrayIndex <= 5)
    if (OP2REC.XHDCD[sysVar.arrayIndex] == "LBL"
     || OP2REC.XHDCD[sysVar.arrayIndex] == "FLB"
     || OP2REC.XHDCD[sysVar.arrayIndex] == "PLB")
      PK0YW02.XHD-HNDL-CD[PK0YW-SUBSCRIPT] = OP2REC.XHDCD[sysVar.arrayIndex];
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  if (PK0YW02.XHD-HNDL-CD[PK0YW-SUBSCRIPT] == " ")
    PK0YW02.XHD-HNDL-CD[PK0YW-SUBSCRIPT] = OP2REC.XHDCD[1];
    if (PK0YW02.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "@") /* Lbl code error flag*/
        /* next sentence*/
    else
      if (PK0YW-XGP-GPC-CD == "03"
       && PK0YM001.PK0YM-SEL-CD == "03")
                                         /* /Blank label code okay for Map3*/
        /* next sentence*/
      else
        PK0YW02.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] = "*";
      end
    end
  end

end // end PK0YS-LOAD-HNDLCD

// Build/Load Cust Label Array
Function PK0YS-LOAD-MAP2()

     /* move fields from pk0yw02 to screen*/

  PK0YW01.PK0YW-SUBSCRIPT2 = PK0YW01.PK0YW-SUBSCRIPT;
  if (PK0YW01.PK0YW-SUBSCRIPT2 != 1)
    PK0YW01.PK0YW-SUBSCRIPT2 = PK0YW01.PK0YW-SUBSCRIPT - 1;
  end

  if (PK0YW01.PK0YW-SUBSCRIPT == 1) /* load map if line 1*/
    PK0YM002.PK0YM-LABEL-STOCK[PK0YW-SUBSCRIPT] = PK0YW02.PK0YM-LABEL-STK-NBR[PK0YW-SUBSCRIPT];
    PK0YM002.PK0YM-LABEL-CODE[PK0YW-SUBSCRIPT] = PK0YW02.PK-LABL-CD[PK0YW-SUBSCRIPT];
    PK0YM002.XHD-HNDL-CD[PK0YW-SUBSCRIPT] = PK0YW02.XHD-HNDL-CD[PK0YW-SUBSCRIPT];
    PK0YM002.SY-STY-NBR[PK0YW-SUBSCRIPT] = PK0YW02.SY-STY-NBR[PK0YW-SUBSCRIPT];
    PK0YM002.SY-COLR-CD-ID[PK0YW-SUBSCRIPT] = PK0YW02.SY-COLR-CD-ID[PK0YW-SUBSCRIPT];
    PK0YM002.PK0YM-XUM-UOM-CD[PK0YW-SUBSCRIPT] = PK0YW02.XUM-UOM-CD[PK0YW-SUBSCRIPT];
  end

  if (PK0YW01.PK0YW-SUBSCRIPT != 1) /* if label, hndl cd, style, or color*/
                                   /* are the same, don't display value*/
    PK0YW01.PK0YW-SUBSCRIPT2 = PK0YW01.PK0YW-SUBSCRIPT;
    PK0YW01.PK0YW-SUBSCRIPT2 = PK0YW01.PK0YW-SUBSCRIPT - 1;
    if ((PK0YW02.SY-COLR-CD-ID[PK0YW-SUBSCRIPT2] == 
    PK0YW02.SY-COLR-CD-ID[PK0YW-SUBSCRIPT])
     && 
    (PK0YW02.SY-STY-NBR[PK0YW-SUBSCRIPT2] == 
    PK0YW02.SY-STY-NBR[PK0YW-SUBSCRIPT]))
      PK0YM002.SY-COLR-CD-ID[PK0YW-SUBSCRIPT] = " ";
      PK0YM002.SY-STY-NBR[PK0YW-SUBSCRIPT] = " ";
      PK0YM002.PK0YM-XUM-UOM-CD[PK0YW-SUBSCRIPT] = " ";
      PK0YM002.PK0YM-LABEL-STOCK[PK0YW-SUBSCRIPT] = " ";
      PK0YM002.PK0YM-LABEL-CODE[PK0YW-SUBSCRIPT] = " ";
      PK0YM002.XHD-HNDL-CD[PK0YW-SUBSCRIPT] = " ";
    else
      PK0YM002.SY-COLR-CD-ID[PK0YW-SUBSCRIPT] = PK0YW02.SY-COLR-CD-ID[PK0YW-SUBSCRIPT];
      PK0YM002.SY-STY-NBR[PK0YW-SUBSCRIPT] = PK0YW02.SY-STY-NBR[PK0YW-SUBSCRIPT];
      PK0YM002.PK0YM-XUM-UOM-CD[PK0YW-SUBSCRIPT] = PK0YW02.XUM-UOM-CD[PK0YW-SUBSCRIPT];
      PK0YM002.PK0YM-LABEL-STOCK[PK0YW-SUBSCRIPT] = PK0YW02.PK0YM-LABEL-STK-NBR[PK0YW-SUBSCRIPT];
      PK0YM002.PK0YM-LABEL-CODE[PK0YW-SUBSCRIPT] = PK0YW02.PK-LABL-CD[PK0YW-SUBSCRIPT];
      PK0YM002.XHD-HNDL-CD[PK0YW-SUBSCRIPT] = PK0YW02.XHD-HNDL-CD[PK0YW-SUBSCRIPT];
    end

  end

  PK0YM002.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] = PK0YW02.PK0YM-SEL-CD[PK0YW-SUBSCRIPT];
  if (PK0YM002.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "*"
   && converseVar.validationMsgNum == 0)
    converseLib.validationFailed(487); /* Handling code or line status invalid*/
  end
  if (PK0YM002.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "@")
    converseLib.validationFailed(494); /* Line item label code does not match*/
                                   /* cust label*/
                         /* code form label table*/
  end
  PK0YM002.SY4IDDSC[PK0YW-SUBSCRIPT] = PK0YW02.SY4IDDSC[PK0YW-SUBSCRIPT];
  PK0YM002.PK0YM-OP-LINE-ITEM-STAT[PK0YW-SUBSCRIPT] = PK0YW02.PK0YM-OP-LINE-ITEM-STAT[PK0YW-SUBSCRIPT];
  PK0YM002.PK0YM-ON-ORD-QTY[PK0YW-SUBSCRIPT] = PK0YW02.PK0YM-ON-ORD-QTY[PK0YW-SUBSCRIPT];
  PK0YM002.PK0YM-OP-ALOC-QTY[PK0YW-SUBSCRIPT] = PK0YW02.PK0YM-OP-ALOC-QTY[PK0YW-SUBSCRIPT];
  PK0YM002.PK0YM-TICKET-QTY[PK0YW-SUBSCRIPT] = PK0YW02.PK0YW-TICKET-QTY[PK0YW-SUBSCRIPT];
  PK0YM002.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] = PK0YW02.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT];

     /* set select fields defined for lines with data*/
     /* otherwise the line has already been darkened*/

  if (PK0YM002.PK0YM-OP-LINE-ITEM-STAT[PK0YW-SUBSCRIPT] == " ")
    set PK0YM002.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] skip, invisible; /* blank line*/
    set PK0YM002.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] skip, invisible;
  else
    set PK0YM002.PK0YM-LABEL-CODE[PK0YW-SUBSCRIPT] initialAttributes;
    set PK0YM002.PK0YM-LABEL-STOCK[PK0YW-SUBSCRIPT] initialAttributes;
    set PK0YM002.XHD-HNDL-CD[PK0YW-SUBSCRIPT] initialAttributes;
    set PK0YM002.SY-STY-NBR[PK0YW-SUBSCRIPT] initialAttributes;
    set PK0YM002.SY-COLR-CD-ID[PK0YW-SUBSCRIPT] initialAttributes;
    set PK0YM002.SY4IDDSC[PK0YW-SUBSCRIPT] initialAttributes;
    set PK0YM002.PK0YM-XUM-UOM-CD[PK0YW-SUBSCRIPT] initialAttributes;
    set PK0YM002.PK0YM-OP-LINE-ITEM-STAT[PK0YW-SUBSCRIPT] initialAttributes;
    set PK0YM002.PK0YM-ON-ORD-QTY[PK0YW-SUBSCRIPT] initialAttributes;
    set PK0YM002.PK0YM-OP-ALOC-QTY[PK0YW-SUBSCRIPT] initialAttributes;
    set PK0YM002.PK0YM-TICKET-QTY[PK0YW-SUBSCRIPT] initialAttributes;
    if (PK0YM002.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "@") /* invalid lbl cd*/
      set PK0YM002.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] skip;
      set PK0YM002.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] skip;
    else
      set PK0YM002.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] initialAttributes; /* all other*/
      set PK0YM002.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] initialAttributes;
    end
  end

end // end PK0YS-LOAD-MAP2

// Build/Load Cust Label Array
Function PK0YS-LOAD-MAP4()

     /* move fields from pk0yw02 to screen*/

  PK0YW01.PK0YW-SUBSCRIPT2 = PK0YW01.PK0YW-SUBSCRIPT;
  if (PK0YW01.PK0YW-SUBSCRIPT2 != 1)
    PK0YW01.PK0YW-SUBSCRIPT2 = PK0YW01.PK0YW-SUBSCRIPT - 1;
  end

  if (PK0YW01.PK0YW-SUBSCRIPT == 1) /* load map if line 1*/
    PK0YM004.PK0YM-LABEL-STOCK[PK0YW-SUBSCRIPT] = PK0YW02.PK0YM-LABEL-STK-NBR[PK0YW-SUBSCRIPT];
    PK0YM004.PK0YM-LABEL-CODE[PK0YW-SUBSCRIPT] = PK0YW02.PK-LABL-CD[PK0YW-SUBSCRIPT];
    PK0YM004.SY-STY-NBR[PK0YW-SUBSCRIPT] = PK0YW02.SY-STY-NBR[PK0YW-SUBSCRIPT];
    PK0YM004.SY-COLR-CD-ID[PK0YW-SUBSCRIPT] = PK0YW02.SY-COLR-CD-ID[PK0YW-SUBSCRIPT];
  end

  if (PK0YW01.PK0YW-SUBSCRIPT != 1) /* if label, hndl cd, style, or color*/
                                   /* are the same, don't display value*/
    PK0YW01.PK0YW-SUBSCRIPT2 = PK0YW01.PK0YW-SUBSCRIPT;
    PK0YW01.PK0YW-SUBSCRIPT2 = PK0YW01.PK0YW-SUBSCRIPT - 1;
    if ((PK0YW02.SY-COLR-CD-ID[PK0YW-SUBSCRIPT2] == 
    PK0YW02.SY-COLR-CD-ID[PK0YW-SUBSCRIPT])
     && 
    (PK0YW02.SY-STY-NBR[PK0YW-SUBSCRIPT2] == 
    PK0YW02.SY-STY-NBR[PK0YW-SUBSCRIPT]))
      PK0YM004.SY-COLR-CD-ID[PK0YW-SUBSCRIPT] = " ";
      PK0YM004.SY-STY-NBR[PK0YW-SUBSCRIPT] = " ";
      PK0YM004.PK0YM-LABEL-STOCK[PK0YW-SUBSCRIPT] = " ";
      PK0YM004.PK0YM-LABEL-CODE[PK0YW-SUBSCRIPT] = " ";
    else
      PK0YM004.SY-COLR-CD-ID[PK0YW-SUBSCRIPT] = PK0YW02.SY-COLR-CD-ID[PK0YW-SUBSCRIPT];
      PK0YM004.SY-STY-NBR[PK0YW-SUBSCRIPT] = PK0YW02.SY-STY-NBR[PK0YW-SUBSCRIPT];
      PK0YM004.PK0YM-LABEL-STOCK[PK0YW-SUBSCRIPT] = PK0YW02.PK0YM-LABEL-STK-NBR[PK0YW-SUBSCRIPT];
      PK0YM004.PK0YM-LABEL-CODE[PK0YW-SUBSCRIPT] = PK0YW02.PK-LABL-CD[PK0YW-SUBSCRIPT];
    end

  end

  PK0YM004.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] = PK0YW02.PK0YM-SEL-CD[PK0YW-SUBSCRIPT];
  if (PK0YM004.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "*"
   && converseVar.validationMsgNum == 0)
    converseLib.validationFailed(487); /* Handling code or line status invalid*/
  end
  if (PK0YM004.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "@")
    converseLib.validationFailed(494); /* Line item label code does not match*/
                                   /* cust label*/
                         /* code form label table*/
  end
  PK0YM004.PK0YM-OP-LINE-ITEM-STAT[PK0YW-SUBSCRIPT] = PK0YW02.PK0YM-OP-LINE-ITEM-STAT[PK0YW-SUBSCRIPT];
  PK0YM004.PK0YM-ON-ORD-QTY[PK0YW-SUBSCRIPT] = PK0YW02.PK0YM-ON-ORD-QTY[PK0YW-SUBSCRIPT];
  PK0YM004.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] = PK0YW02.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT];

     /* set select fields defined for lines with data*/
     /* otherwise the line has already been darkened*/

  if (PK0YM004.PK0YM-OP-LINE-ITEM-STAT[PK0YW-SUBSCRIPT] == " ")
    set PK0YM004.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] skip, invisible; /* blank line*/
    set PK0YM004.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] skip, invisible;
  else
    set PK0YM004.PK0YM-LABEL-CODE[PK0YW-SUBSCRIPT] initialAttributes;
    set PK0YM004.PK0YM-LABEL-STOCK[PK0YW-SUBSCRIPT] initialAttributes;
    set PK0YM004.SY-STY-NBR[PK0YW-SUBSCRIPT] initialAttributes;
    set PK0YM004.SY-COLR-CD-ID[PK0YW-SUBSCRIPT] initialAttributes;
    set PK0YM004.PK0YM-OP-LINE-ITEM-STAT[PK0YW-SUBSCRIPT] initialAttributes;
    set PK0YM004.PK0YM-ON-ORD-QTY[PK0YW-SUBSCRIPT] initialAttributes;
    if (PK0YM004.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "@") /* invalid lbl cd*/
      set PK0YM004.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] skip;
      set PK0YM004.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] skip;
    else
      set PK0YM004.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] initialAttributes; /* all other*/
      set PK0YM004.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] initialAttributes;
    end
  end

end // end PK0YS-LOAD-MAP4

// Load Temp Storage Rec PK0YW02
Function PK0YS-LOAD-PK0YW02()

  set PK0YW02 empty;
  PK0YW01.PK0YW-SUBSCRIPT = 1; /* init subscript*/
  PK0YW01.PK0YW-EOF-ITEMS = "N"; /* init EOF flag*/

  while (PK0YW01.PK0YW-SUBSCRIPT <= 11 /* load upto 11 line*/
   && PK0YW01.PK0YW-EOF-ITEMS == "N") /* and not end of file*/

    PK0YW02.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] = " ";

    /* PK0YS-GET-VZLABL01;    get label code from dpick.vzlabl01*/

    PK0YW-LABL-SUB = +1; /* get label from int table*/
    PK0YW-VALID-CUSTLABL = "N";
    PK0YW-PK-LABL-CD = OP2REC.PWRLBCD; /* using labl*/
    PK0YW-CUSTOMER = OP1REC.KUCCOID; /* customer*/
    PK0YW-XGP-GPC-CD = OP1REC.XGPCD; /* and gpc*/

    while (PK0YW-VALID-CUSTLABL == "N"
     /* change by smahad on 03/25/2000 for SunGlassHut*/
     /* AND PK0YW-LABL-SUB LE 108;*/
     && PK0YW-LABL-SUB <= 109)
      PK0YS-GET-CUSTLABL();
    end

    if (PK0YW-VALID-CUSTLABL == "Y")
      PK0YW02.PK0YM-LABEL-STOCK[PK0YW-SUBSCRIPT] = PK0YT-LABEL-STOCK[PK0YW-LABL-SUB];
    else
      PK0YW02.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] = "@"; /* not found*/
    end
    PK0YW02.SY-STY-NBR[PK0YW-SUBSCRIPT] = OP2REC.SY1STNBR;

    PK0YW02.SY-COLR-CD-ID[PK0YW-SUBSCRIPT] = OP2REC.SY2CLRID;
    PK0YW02.XUM-UOM-CD[PK0YW-SUBSCRIPT] = OP2REC.XUMCD;
    PK0YW02.PK-LABL-CD[PK0YW-SUBSCRIPT] = OP2REC.PWRLBCD;

    PK0YS-LOAD-HNDLCD(); /* Get correct HNDL CD*/

    PK0YW02.PK0YM-OP-LINE-ITEM-STAT[PK0YW-SUBSCRIPT] = OP2REC.OP2LNIST;

    if (OP2REC.OP2LNIST == "XL" /* if line status equals*/
     || OP2REC.OP2LNIST == "SH") /* 'xl' or 'sh', protect line*/
      if (PK0YW02.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == " ")
        PK0YW02.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] = "*";
      end
    end

    PK0YW02.XGP-GPC-CD[PK0YW-SUBSCRIPT] = OP2REC.XGPCD;

    PK0YW02.XDM-DIM-CD[PK0YW-SUBSCRIPT] = OP2REC.XDMCD;

    PK0YW02.XQA-QUAL-CD[PK0YW-SUBSCRIPT] = OP2REC.XQACD;

    PK0YW02.XUM-UOM-CD[PK0YW-SUBSCRIPT] = OP2REC.XUMCD;

    PK0YW02.PK0YW-OP-LINE-ITEM-NBR[PK0YW-SUBSCRIPT] = OP2REC.OP2LNINB;

    PK0YW02.PK0YW-UOM-NBR[PK0YW-SUBSCRIPT] = PK0YW02.XUM-UOM-CD[PK0YW-SUBSCRIPT];

       /* loading size and order quantity*/
       /* upto 40 sizes may exists per order item*/

    if (PK0YW01.PK0YW-MORE-SIZES == "N")
      PK0YS-GET-VOSIZE01(); /* ; get all 40 on order quantity*/

      PK0YW01.PK0YW-MORE-SIZES = "Y";
      set SYPREC empty;
      SYPREC.SYPFC = "PC"; /* product code*/
      SYPREC.SYPCMPSW = "N"; /* non compressed data*/
      SYPREC.XGPCD = OP2REC.XGPCD; /* load keys for size convertion*/
      SYPREC.SY1STNBR = OP2REC.SY1STNBR;
      SYPREC.SY2CLRID = OP2REC.SY2CLRID;
      SYPREC.XDMCD = OP2REC.XDMCD;
      SYPREC.XQACD = OP2REC.XQACD;
      PK0YS-CONVERT-SIZE(); /* ; convert internal to external*/
    end

    /* skipping sizes with zero on order quantity*/

    if (PK0YW-SIZE-SUB == 0 /* no sizes for color*/
     && PK0YW01.PK0YW-MORE-SIZES == "Y")
      /* continue*/
    else
      PK0YW02.SY4IDDSC[PK0YW-SUBSCRIPT] = PK0YW01.PK0YW-SY4IDDSC[PK0YW-SIZE-SUB];
      PK0YW02.PK0YM-ON-ORD-QTY[PK0YW-SUBSCRIPT] = PK0YW01.PK0YW-OP-ON-ORD-QTY[PK0YW-SIZE-SUB];
      PK0YW02.PK0YM-OP-ALOC-QTY[PK0YW-SUBSCRIPT] = PK0YW01.PK0YW-OP-ALOC-QTY[PK0YW-SIZE-SUB];
      PK0YW02.PK0YW-TICKET-QTY[PK0YW-SUBSCRIPT] = PK0YW02.PK0YM-ON-ORD-QTY[PK0YW-SUBSCRIPT] *       PK0YW02.PK0YW-UOM-NBR[PK0YW-SUBSCRIPT];
      PK0YW02.SY5SZID[PK0YW-SUBSCRIPT] = PK0YW01.PK0YW-SY5SZID[PK0YW-SIZE-SUB];
      PK0YW01.PK0YW-SIZE-SUB = PK0YW01.PK0YW-SIZE-SUB - 1; /* incr sub*/
    end

    if (PK0YW-SIZE-SUB == 0)
      PK0YW01.PK0YW-MORE-SIZES = "N";
    end

    PK0YW01.PK0YW-SUBSCRIPT = PK0YW01.PK0YW-SUBSCRIPT + 1; /* incr sub*/

    if (PK0YW01.PK0YW-MORE-SIZES == "N")
      PK0YS-NXT-VITEM001(); /* get next line item*/
    end

  end

    /* write temp storage page to PK0YW02*/

  if (PK0YW01.PK0YW-SUBSCRIPT > 1) /* atleast 1 line item*/
    PK0YS-WRI-TMP-STOR();
    PK0YW01.PK0YW-MAX-PAGE = PK0YW01.PK0YW-PAGE-NBR + 1; /* sav max as page*/
    PK0YW01.PK0YW-PAGE-NBR = PK0YW01.PK0YW-PAGE-NBR + 1; /* increment page*/
  else
    if (PK0YW01.PK0YW-PAGE-NBR == 1) /* still on first page*/
      converseLib.validationFailed(470); /* no line items found*/
      PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* * set error flagag*/
    end
  end

end // end PK0YS-LOAD-PK0YW02

// Fetch next item-IO0440
Function PK0YS-NXT-VITEM001()

     /* Call the I/O mod to read an item record.*/

   /* START ADDED 05/15/00  SAP CANADA USE OTP ITEM/ ALL OTHERS USE ORDER*/
  XX0XW05.OPPKFUNC = "SN";

  XSPKS-SELECT-ITEM(); /* FETCH NEXT ORDER ITEM/OTP ITEM*/
   /* END ADDED 05/15/00  SAP CANADA USE OTP ITEM/ ALL OTHERS USE ORDER*/

     /* Stop program if error has occurred.*/

  if (SQLCA.VAGen_SQLCODE == 0)
                                  /* DLVRUSA PVENKA CHANGES BEGIN*/
    /* IF XX0XW03.XWHCD = '42';*/
    if (XX0XW03.XWHCD == "42" || 
    XX0XW03.XWHCD == "04" || 
    XX0XW03.XWHCD == "07" || 
    XX0XW03.XWHCD == "09" || 
    XX0XW03.XWHCD == "51"
    ) /* DLVRUSA PVENKA CHANGES END*/
       /* For SAP the line item status is not on the OTP item table.*/
       /* The OTP header status is used instead.*/
      OP2REC.OP2LNIST = OP1REC.XOSCD;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      PK0YW01.PK0YW-EOF-ITEMS = "Y"; /* Set EOF Flag*/
    else
       /* Error has occurred.  Set up TA1REC fields and exit*/

      TA1REC.TA1PGMNM = "PK0Y    ";
      TA1REC.TA1MAP = PK0YW-MAP-INUSE;
      TA1REC.TA1DBASE = "DORDER  ";
      TA1REC.TA1TBLVU = "VITEM001";
      TA1REC.TA1TBLKE = PK0YW01.PK0YW-KEY;
      TA1REC.TA1LOCAT[1] = "PK0YS-NX";
      TA1REC.TA1LOCAT[2] = "T-VITEM0";
      TA1REC.TA1LOCAT[3] = "01 IO044";
      TA1REC.TA1LOCAT[4] = "0 SN    ";

      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};

      COMMAREA.CAUSERA = " ";

      XSPF4();
      exit program;
    end
  end

end // end PK0YS-NXT-VITEM001

// Open item cursor-IO0440
Function PK0YS-OPN-VITEM001()

  set SQLCA empty;

   /* START ADDED 05/15/00  SAP CANADA USE OTP ITEM/ ALL OTHERS USE ORDER*/
  XX0XW05.OPPKFUNC = "SS";

  XX0XW03.XWHCD = PK0YM002.XWHCD;
   /* MOVE PK0YM002.XWHCD TO OP2REC.XWHCD;*/
  XSPKS-SELECT-ITEM(); /* OPEN ORDER ITEM/OTP ITEM*/
   /* END ADDED 05/15/00  SAP CANADA USE OTP ITEM/ ALL OTHERS USE ORDER*/

     /* Abend if an error has occurred.*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* Next sentence - no errors, so do nothing.*/

  else
     /* Error has occurred.  Set up TA1REC fields.*/

    TA1REC.TA1PGMNM = "PK0Y    ";
    TA1REC.TA1MAP = PK0YW-MAP-INUSE;
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VITEM001";
     /* Format the key of the cursor.*/
    PK0YW01.PK0YW-KEY1 = OP2REC.OP1CUOID;
    PK0YW01.PK0YW-KEY2 = OP2REC.OP1NORID;
    TA1REC.TA1TBLKE = PK0YW01.PK0YW-KEY;

    TA1REC.TA1LOCAT[1] = "PK0YS-OP";
    TA1REC.TA1LOCAT[2] = "N-VITEM0";
    TA1REC.TA1LOCAT[3] = "01 IO044";
    TA1REC.TA1LOCAT[4] = "0 SS    ";

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};

    COMMAREA.CAUSERA = " ";

    XSPF4();
    exit program;
  end

end // end PK0YS-OPN-VITEM001

// Non-DB2 Post Routine TA0020
Function PK0YS-POST-NO-ROLL()

       /* Non-DB2 post routine*/

   /* the following fields will be filled in by the*/
   /* calling stmt group before entering this routine*/
     /* ta1locat(1) = transaction type  ie: 'ss' 'sn'*/
     /* ta1locat(2) = i/o mod name*/
     /* ta1locat(3) = calling stmt group name*/
     /* ta1locat(4) = programmers option(extra key data)*/
     /* taerec.taedesc1 = programmers opiton (additional key data*/
     /* taerec.taedesc2 = messages*/
     /* ta1map = appl's mapname and should be initilized*/
              /* in the programs init process.*/
   /* return code processing will also be handled by the*/
   /* calling stmt group.*/

  TA1REC.TA1TYPE = "APPL";
  TA1REC.TA1FUNC = "POST";
  TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
  PK0YW01.PK0YW-POST-KEY = PK0YW01.PK0YW-KEY;
  TA1REC.TA1TBLKE = PK0YW01.PK0YW-POST-KEY; /* move system key*/
  try
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
  end

end // end PK0YS-POST-NO-ROLL

// Purge Cust Labels Temp Storage
Function PK0YS-PRG-TMP-STOR()

     /* purge temporary storage*/

  TA5REC.TA5APPID = "PKFY"; /* appl identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/
  call "TA0050" (PK0YW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    PK0YW01.PK0YW-PAGE-NBR = 1;
    PK0YW01.PK0YW-SUBSCRIPT = 1;
    PK0YW01.PK0YW-MAX-PAGE = 1;
  else
    TA1REC.TA1LOCAT[1] = "PRGE TS1";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = PK0YW02.PK0YW-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    PK0YS-POST-NO-ROLL(); /* post,  no rollback, non db2*/
  end

end // end PK0YS-PRG-TMP-STOR

// Deque Reader
Function PK0YS-READER-DEQUE()
     /* Deque the Internal Reader queue after job submission.*/

  set UT2REC empty; /* Initialize subroutine parameters*/

  UT2REC.UT2FUNCT = "D"; /* Subroutine function*/
  UT2REC.UT2RSCLN = 8; /* Resource identification length*/
  UT2REC.UT2RSCID = "INTR"; /* Resource identification*/

  call "UT0220" (UT2REC) {isNoRefresh = yes, isExternal = yes}; /* Enque reader*/

  if (UT2REC.UT2RETCD != 0) /* Non-zero return code*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0YS-RE"; /* Process name*/
    TA1REC.TA1LOC = "DEQUE THE SYSTEM INTERNAL READER";
    SQLCA.SQLCAREC = UT2REC.UT2GRPLV; /* Error information*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.validationFailed(29); /* Indicate system error*/

    // VAGen Info - map = PK0YM002
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end

end // end PK0YS-READER-DEQUE

// Enque Reader
Function PK0YS-READER-ENQUE()

     /* Enque the Internal Reader queue for job submission.*/

  set UT2REC empty; /* Initialize subroutine parameters*/

  UT2REC.UT2FUNCT = "E"; /* Subroutine function*/
  UT2REC.UT2RSCLN = 8; /* Resource identification length*/
  UT2REC.UT2RSCID = "INTR"; /* Resource identification*/

  call "UT0220" (UT2REC) {isNoRefresh = yes, isExternal = yes}; /* Enque reader*/

  if (UT2REC.UT2RETCD != 0) /* Non-zero return code*/

    converseLib.validationFailed(123); /* Indicate not available*/

    exit stack; /* Exit to redisplay map*/

  end

  PK0YW01.PK0YW-TABLE-INDEX = 1; /* Initialize table index*/
  PK0YW01.PK0YW-JOB-SUBMITTED-FLAG = "N";
                                   /* Initialize submit switch*/

end // end PK0YS-READER-ENQUE

// Read Cust Labels Temp Storage
Function PK0YS-RED-TMP-STOR()

     /* read temporary storage*/

  set PK0YW02 empty;
  set TA5REC empty;
  PK0YW01.PK0YW-TS-EXISTS-FLAG = "N"; /* set ts flag on*/

  TA5REC.TA5APPID = "PKFY"; /* appl identification*/
  TA5REC.TA5FNCCD = "R"; /* fnction code*/
  TA5REC.TA5TSQIX = PK0YW01.PK0YW-PAGE-NBR; /* current page*/
  PK0YW02.PK0YW-TS-LENGTH = 807; /* length of record*/

  call "TA0050" (PK0YW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    PK0YW01.PK0YW-TS-EXISTS-FLAG = "Y"; /* set ts flag on*/
  else
    if (TA5REC.TA5RTNCD == 7)
     /* continue                               /* TS does not exist*/
    else
      TA1REC.TA1LOCAT[1] = "READ TS1";
      TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
      TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
      TA1REC.TA1TBLKE = PK0YW02.PK0YW-TS-ROW[1]; /* first row, first rec*/
      TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
      PK0YS-POST-NO-ROLL(); /* post, no rollback, non db2 diags*/
    end
  end

end // end PK0YS-RED-TMP-STOR

// Reset Array Attributes
Function PK0YS-RESET-ARRAY2()

     /* set select fields defined*/

  set PK0YM002.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] initialAttributes;
  set PK0YM002.PK0YM-LABEL-CODE[PK0YW-SUBSCRIPT] initialAttributes;
  set PK0YM002.PK0YM-LABEL-STOCK[PK0YW-SUBSCRIPT] initialAttributes;
  set PK0YM002.XHD-HNDL-CD[PK0YW-SUBSCRIPT] initialAttributes;
  set PK0YM002.SY-STY-NBR[PK0YW-SUBSCRIPT] initialAttributes;
  set PK0YM002.SY-COLR-CD-ID[PK0YW-SUBSCRIPT] initialAttributes;
  set PK0YM002.SY4IDDSC[PK0YW-SUBSCRIPT] initialAttributes;
  set PK0YM002.PK0YM-XUM-UOM-CD[PK0YW-SUBSCRIPT] initialAttributes;
  set PK0YM002.PK0YM-OP-LINE-ITEM-STAT[PK0YW-SUBSCRIPT] initialAttributes;
  set PK0YM002.PK0YM-ON-ORD-QTY[PK0YW-SUBSCRIPT] initialAttributes;
  set PK0YM002.PK0YM-OP-ALOC-QTY[PK0YW-SUBSCRIPT] initialAttributes;
  set PK0YM002.PK0YM-TICKET-QTY[PK0YW-SUBSCRIPT] initialAttributes;
  set PK0YM002.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] initialAttributes;

     /* set select fields dark if line is empty*/

  if (PK0YM002.PK0YM-OP-LINE-ITEM-STAT[PK0YW-SUBSCRIPT] == " " /* blank line*/
   || PK0YW01.PK0YW-HEADER-ERROR == "Y")                       /* Order header error*/
    set PK0YM002.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] skip, invisible;
    set PK0YM002.XHD-HNDL-CD[PK0YW-SUBSCRIPT] skip, invisible;
    set PK0YM002.PK0YM-LABEL-CODE[PK0YW-SUBSCRIPT] skip, invisible;
    set PK0YM002.PK0YM-LABEL-STOCK[PK0YW-SUBSCRIPT] skip, invisible;
    set PK0YM002.SY-STY-NBR[PK0YW-SUBSCRIPT] skip, invisible;
    set PK0YM002.SY-COLR-CD-ID[PK0YW-SUBSCRIPT] skip, invisible;
    set PK0YM002.SY4IDDSC[PK0YW-SUBSCRIPT] skip, invisible;
    set PK0YM002.PK0YM-XUM-UOM-CD[PK0YW-SUBSCRIPT] skip, invisible;
    set PK0YM002.PK0YM-OP-LINE-ITEM-STAT[PK0YW-SUBSCRIPT] skip, invisible;
    set PK0YM002.PK0YM-ON-ORD-QTY[PK0YW-SUBSCRIPT] skip, invisible;
    set PK0YM002.PK0YM-OP-ALOC-QTY[PK0YW-SUBSCRIPT] skip, invisible;
    set PK0YM002.PK0YM-TICKET-QTY[PK0YW-SUBSCRIPT] skip, invisible;
    set PK0YM002.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] skip, invisible;
  end

     /* set select field and quantity protected if sel byte = '@'*/
     /* this indicates an invalid label code on the line, for*/
     /* the customer*/

  if (PK0YM002.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "@")
    set PK0YM002.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] skip;
    set PK0YM002.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] skip;
  end

end // end PK0YS-RESET-ARRAY2

// Reset Array Attributes
Function PK0YS-RESET-ARRAY4()

     /* set select fields defined*/

  set PK0YM004.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] initialAttributes;
  set PK0YM004.PK0YM-LABEL-CODE[PK0YW-SUBSCRIPT] initialAttributes;
  set PK0YM004.PK0YM-LABEL-STOCK[PK0YW-SUBSCRIPT] initialAttributes;
  set PK0YM004.SY-STY-NBR[PK0YW-SUBSCRIPT] initialAttributes;
  set PK0YM004.SY-COLR-CD-ID[PK0YW-SUBSCRIPT] initialAttributes;
  set PK0YM004.PK0YM-OP-LINE-ITEM-STAT[PK0YW-SUBSCRIPT] initialAttributes;
  set PK0YM004.PK0YM-ON-ORD-QTY[PK0YW-SUBSCRIPT] initialAttributes;
  set PK0YM004.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] initialAttributes;

     /* set select fields dark if line is empty*/

  if (PK0YM004.PK0YM-OP-LINE-ITEM-STAT[PK0YW-SUBSCRIPT] == " " /* blank line*/
   || PK0YW01.PK0YW-HEADER-ERROR == "Y")                       /* Order header error*/
    set PK0YM004.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] skip, invisible;
    set PK0YM004.PK0YM-LABEL-CODE[PK0YW-SUBSCRIPT] skip, invisible;
    set PK0YM004.PK0YM-LABEL-STOCK[PK0YW-SUBSCRIPT] skip, invisible;
    set PK0YM004.SY-STY-NBR[PK0YW-SUBSCRIPT] skip, invisible;
    set PK0YM004.SY-COLR-CD-ID[PK0YW-SUBSCRIPT] skip, invisible;
    set PK0YM004.PK0YM-OP-LINE-ITEM-STAT[PK0YW-SUBSCRIPT] skip, invisible;
    set PK0YM004.PK0YM-ON-ORD-QTY[PK0YW-SUBSCRIPT] skip, invisible;
    set PK0YM004.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] skip, invisible;
  end

     /* set select field and quantity protected if sel byte = '@'*/
     /* this indicates an invalid label code on the line, for*/
     /* the customer*/

  if (PK0YM004.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "@")
    set PK0YM004.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] skip;
    set PK0YM004.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] skip;
  end

end // end PK0YS-RESET-ARRAY4

// Reset Field Attributes Map01
Function PK0YS-RESET-ATTR1()

     /* Set map field attributes*/

  set PK0YM001.XWHCD initialAttributes;

  set PK0YM001.XXXERRID cursor, initialAttributes;

  set PK0YM001.PK0YM-SEL-CD cursor, initialAttributes;

  set PK0YM001.CATOAP initialAttributes;

  set PK0YM001.CAITEM initialAttributes;

end // end PK0YS-RESET-ATTR1

// Reset Field Attributes Map2
Function PK0YS-RESET-ATTR2()

     /* set heading attributes*/

  set PK0YM002.PK0YM-PRINTER-ID initialAttributes; /* Printer id*/
  set PK0YM002.PK0YM-CONFIRM-FLAG skip, invisible;
  set PK0YM002.PK0YM-CONFIRM-LIT1 initialAttributes; /* Confirm Literal 1*/
  PK0YM002.PK0YM-CONFIRM-LIT1 = " "; /* init to spaces*/
  set PK0YM002.PK0YM-CONFIRM-LIT2 initialAttributes; /* Confirm Literal 2*/
  PK0YM002.PK0YM-CONFIRM-LIT2 = " "; /* init to spaces*/
  set PK0YM002.PK0YM-MORE-TICK-PERCENT skip, invisible;
  set PK0YM002.PK0YM-MORE-TICK-LIT1 initialAttributes; /* More Tickets Literal 1*/
  PK0YM002.PK0YM-MORE-TICK-LIT1 = " "; /* init to spaces*/
  set PK0YM002.PK0YM-MORE-TICK-LIT2 initialAttributes; /* More Tickets Literal 2*/
  PK0YM002.PK0YM-MORE-TICK-LIT2 = " "; /* init to spaces*/
  set PK0YM002.XXXERRID initialAttributes; /* Error id*/
  PK0YM002.XXXERRID = "PK0Y";

  set PK0YM002.OP-CUST-ORD-ID cursor, initialAttributes; /* Cust Order id*/
  set PK0YM002.OP-NIKE-ORD-ID initialAttributes; /* Nike Order id*/
  set PK0YM002.CU-CO-ID initialAttributes; /* Cust id*/
  set PK0YM002.CU-STOR-ID initialAttributes; /* Store id*/
  set PK0YM002.PK0YM-XNX-DEPT-ID-XREF initialAttributes; /* deptartment number*/
  set PK0YM002.CU-CO-SHORT-NM initialAttributes; /* Cust name abbreviated*/
  set PK0YM002.XOB-BASE-OT-CD initialAttributes; /* order type code*/
  set PK0YM002.XOS-ORD-STAT-CD initialAttributes; /* order status code*/
  set PK0YM002.OP-CUST-NEED-DT initialAttributes; /* order status code*/
  set PK0YM002.XGP-GPC-CD initialAttributes; /* gpc code*/

  set PK0YM002.PK0YM-PAGE-NBR initialAttributes; /* page number*/

     /* reset order/item array attributes*/

  PK0YW01.PK0YW-SUBSCRIPT = 11; /* init subscript*/

  while (PK0YW01.PK0YW-SUBSCRIPT >= 1) /* process all 11 rows*/
    PK0YS-RESET-ARRAY2(); /* set askip, set unused dark*/
    PK0YW01.PK0YW-SUBSCRIPT = PK0YW01.PK0YW-SUBSCRIPT - 1;
  end

  set PK0YM002.OP-CUST-ORD-ID cursor; /* position cursor*/

end // end PK0YS-RESET-ATTR2

// Reset Field Attributes Map3
Function PK0YS-RESET-ATTR3()

     /* set heading attributes*/

  set PK0YM003.PK0YM-PRINTER-ID initialAttributes; /* Printer id*/
  set PK0YM003.PK0YM-CONFIRM-FLAG invisible, skip;
  set PK0YM003.PK0YM-CONFIRM-LIT1 initialAttributes; /* Confirm Literal 1*/
  PK0YM003.PK0YM-CONFIRM-LIT1 = " "; /* init to spaces*/
  set PK0YM003.PK0YM-CONFIRM-LIT2 initialAttributes; /* Confirm Literal 2*/
  PK0YM003.PK0YM-CONFIRM-LIT2 = " "; /* init to spaces*/
  set PK0YM003.PK0YM-VERIFY-LIT initialAttributes; /* Verify Literal*/
  PK0YM003.PK0YM-VERIFY-LIT = " "; /* init to spaces*/
  set PK0YM003.XXXERRID initialAttributes; /* Error id*/
  PK0YM003.XXXERRID = "PK0Y";

  set PK0YM003.XWHCD initialAttributes; /* Wartehouse Code*/
  PK0YM003.XWHCD = PKWREC.XWHCD;
  set PK0YM003.KUCCOID initialAttributes, cursor; /* Customer*/
  set PK0YM003.PK0YM-XNX-DEPT-ID-XREF initialAttributes; /* Department*/
  set PK0YM003.CU-CO-NM initialAttributes; /* Customer full name*/
  set PK0YM003.PK0YM-LABEL-CODE initialAttributes; /* label code*/
  set PK0YM003.PK0YM-PRINTER-ID initialAttributes; /* Zebra Printer id*/

  /* dcms in*/
  /* show the order and line item info only for whse 51*/

  if (PK0YM003.XWHCD == "51")
    set PK0YM003.PK0YM-ORDER-NBR initialAttributes; /* order number literal*/
    PK0YM003.PK0YM-ORDER-NBR = "ORDER NUMBER:";
    set PK0YM003.OP-CUST-ORD-ID initialAttributes; /* op-cust-order-id*/
    set PK0YM003.PK0YM-LIT-DOT initialAttributes; /* literal dot '.'*/
    PK0YM003.PK0YM-LIT-DOT = ".";
    set PK0YM003.OP-NIKE-ORDER-ID initialAttributes; /* op-nike-order-id*/
    set PK0YM003.PK0YM-LIT-LINE-ITEM-NBR initialAttributes; /* 'line item number:'*/
    PK0YM003.PK0YM-LIT-LINE-ITEM-NBR = "LINE ITEM NUMBER:";
    set PK0YM003.OP-LINE-ITEM-NBR initialAttributes; /* op-line-item-nbr*/
  else
    set PK0YM003.PK0YM-ORDER-NBR invisible, skip; /* order number literal*/
    PK0YM003.PK0YM-ORDER-NBR = "             ";
    set PK0YM003.OP-CUST-ORD-ID invisible, skip, noHighLight;
    PK0YM003.OP-CUST-ORD-ID = 0; /* op-cust-order-id*/
    set PK0YM003.PK0YM-LIT-DOT invisible, skip; /* literal dot '.'*/
    PK0YM003.PK0YM-LIT-DOT = " ";
    set PK0YM003.OP-NIKE-ORDER-ID invisible, skip, noHighLight;
    PK0YM003.OP-NIKE-ORDER-ID = 0; /* op-nike-order-id*/
    set PK0YM003.PK0YM-LIT-LINE-ITEM-NBR invisible, skip;
                                                     /* 'line item number:'*/
    PK0YM003.PK0YM-LIT-LINE-ITEM-NBR = "                ";
    set PK0YM003.OP-LINE-ITEM-NBR invisible, skip, noHighLight;
    PK0YM003.OP-LINE-ITEM-NBR = 0; /* op-line-item-nbr*/
  end
  /* dcms out*/

  set PK0YM003.XGPCD initialAttributes; /* GPC code*/
  set PK0YM003.SY1STNBR initialAttributes; /* Style*/
  set PK0YM003.SY2CLRID initialAttributes; /* Color*/
  set PK0YM003.XDMCD initialAttributes; /* Dimension Code*/
  if (PK0YM003.XDMCD == "  ")
    PK0YM003.XDMCD = "00";
  end
  set PK0YM003.XQACD initialAttributes; /* Quality Code*/
  PK0YM003.XQACD = "01"; /* init Quality code to 01*/

  set PK0YM003.PK0YM-PRINT-QTY-PRODUCT initialAttributes; /* prt qty by product*/
  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 5) /* prt qty and size by size*/
    set PK0YM003.SY4IDDSC[sysVar.arrayIndex] initialAttributes;
    set PK0YM003.PK0YM-PRINT-QTY-SZ[sysVar.arrayIndex] initialAttributes;
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

end // end PK0YS-RESET-ATTR3

// Reset Field Attributes Map4
Function PK0YS-RESET-ATTR4()

     /* set heading attributes*/

  set PK0YM004.PK0YM-PRINTER-ID initialAttributes; /* Printer id*/
  set PK0YM004.PK0YM-CONFIRM-FLAG skip, invisible;
  set PK0YM004.PK0YM-CONFIRM-LIT1 initialAttributes; /* Confirm Literal 1*/
  PK0YM004.PK0YM-CONFIRM-LIT1 = " "; /* init to spaces*/
  set PK0YM004.PK0YM-CONFIRM-LIT2 initialAttributes; /* Confirm Literal 2*/
  PK0YM004.PK0YM-CONFIRM-LIT2 = " "; /* init to spaces*/
  set PK0YM004.PK0YM-MORE-TICK-PERCENT skip, invisible;
  set PK0YM004.PK0YM-MORE-TICK-LIT1 initialAttributes; /* More Tickets Literal 1*/
  PK0YM004.PK0YM-MORE-TICK-LIT1 = " "; /* init to spaces*/
  set PK0YM004.PK0YM-MORE-TICK-LIT2 initialAttributes; /* More Tickets Literal 2*/
  PK0YM004.PK0YM-MORE-TICK-LIT2 = " "; /* init to spaces*/
  set PK0YM004.XXXERRID initialAttributes; /* Error id*/
  PK0YM004.XXXERRID = "PK0Y";

  set PK0YM004.OP-CUST-ORD-ID cursor, initialAttributes; /* Cust Order id*/
  set PK0YM004.OP-NIKE-ORD-ID initialAttributes; /* Nike Order id*/
  set PK0YM004.CU-CO-ID initialAttributes; /* Cust id*/
  set PK0YM004.CU-STOR-ID initialAttributes; /* Store id*/
  set PK0YM004.PK0YM-XNX-DEPT-ID-XREF initialAttributes; /* deptartment number*/
  set PK0YM004.CU-CO-SHORT-NM initialAttributes; /* Cust name abbreviated*/
  set PK0YM004.XOB-BASE-OT-CD initialAttributes; /* order type code*/
  set PK0YM004.XOS-ORD-STAT-CD initialAttributes; /* order status code*/
  set PK0YM004.XGP-GPC-CD initialAttributes; /* gpc code*/
  if (PK0YM004.OP-CASE-LOT-NBR != " ") /* case lot number*/
    set PK0YM004.OP-CASE-LOT-NBR initialAttributes;
  else
    set PK0YM004.OP-CASE-LOT-NBR cursor, bold;
  end
  set PK0YM004.XGP-GPC-CD initialAttributes; /* gpc code*/

  set PK0YM004.PK0YM-PAGE-NBR initialAttributes; /* page number*/

     /* reset order/item array attributes*/

  PK0YW01.PK0YW-SUBSCRIPT = 11; /* init subscript*/

  while (PK0YW01.PK0YW-SUBSCRIPT >= 1) /* process all 11 rows*/
    PK0YS-RESET-ARRAY4(); /* set askip, set unused dark*/
    PK0YW01.PK0YW-SUBSCRIPT = PK0YW01.PK0YW-SUBSCRIPT - 1;
  end

  set PK0YM004.OP-CUST-ORD-ID cursor; /* position cursor*/

end // end PK0YS-RESET-ATTR4

// Reset Field Attributes Map5
Function PK0YS-RESET-ATTR5()

     /* set heading attributes*/

                                  /* MOVE 'X' TO*/
                                   /* PK0YM005.PK0YM-CONFIRM-FLAG;/* Any*/
                                   /* char other than Y/N/blank*/
  set PK0YM005.PK0YM-CONFIRM-FLAG invisible, skip;
  set PK0YM005.PK0YM-CONFIRM-LIT1 initialAttributes; /* Confirm Literal 1*/
  PK0YM005.PK0YM-CONFIRM-LIT1 = " "; /* init to spaces*/
  set PK0YM005.PK0YM-CONFIRM-LIT2 initialAttributes; /* Confirm Literal 2*/
  PK0YM005.PK0YM-CONFIRM-LIT2 = " "; /* init to spaces*/
  set PK0YM005.PK0YM-VERIFY-LIT initialAttributes; /* Verify Literal*/
  PK0YM005.PK0YM-VERIFY-LIT = " "; /* init to spaces*/
  set PK0YM005.XXXERRID initialAttributes; /* Error id*/
  PK0YM005.XXXERRID = "PK0Y";

  set PK0YM005.XWHCD initialAttributes; /* Warehouse Code*/
  PK0YM005.XWHCD = PKWREC.XWHCD;
  set PK0YM005.PK0YM-PRINTER-ID initialAttributes; /* Zebra Printer id*/
  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 11) /* prt qty and size by size*/
    set PK0YM005.PK0YM-PRICE[sysVar.arrayIndex] initialAttributes;
    set PK0YM005.PK0YM-QUANTITY[sysVar.arrayIndex] initialAttributes;
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

end // end PK0YS-RESET-ATTR5

// Scroll Forward/Backward
Function PK0YS-SCROLL-PAGE()

     /* edit pf7/pf8 and enter for next PK0Y map display*/

  if (converseVar.eventKey is pf7)
    PK0YW01.PK0YW-PAGE-NBR = PK0YW01.PK0YW-PAGE-NBR - 1; /* prior page*/
  else
    if (converseVar.eventKey is pf8)
      PK0YW01.PK0YW-PAGE-NBR = PK0YW01.PK0YW-PAGE-NBR + 1; /* next page*/
    else
      if (converseVar.eventKey is enter
       && PK0YM002.PK0YM-PAGE-NBR != PK0YW01.PK0YW-PAGE-NBR) /* pg chg*/
        PK0YW01.PK0YW-PAGE-NBR = PK0YM002.PK0YM-PAGE-NBR; /* pg chg*/
        PK0Y020(); /* restart application*/
      end
    end
  end

end // end PK0YS-SCROLL-PAGE

// Scroll Forward/Backward
Function PK0YS-SCROLL-PAGE4()

     /* edit pf7/pf8 and enter for next PK0Y map display*/

  if (converseVar.eventKey is pf7)
    PK0YW01.PK0YW-PAGE-NBR = PK0YW01.PK0YW-PAGE-NBR - 1; /* prior page*/
  else
    if (converseVar.eventKey is pf8)
      PK0YW01.PK0YW-PAGE-NBR = PK0YW01.PK0YW-PAGE-NBR + 1; /* next page*/
    else
      if (converseVar.eventKey is enter
       && PK0YM004.PK0YM-PAGE-NBR != PK0YW01.PK0YW-PAGE-NBR) /* pg chg*/
        PK0YW01.PK0YW-PAGE-NBR = PK0YM004.PK0YM-PAGE-NBR; /* pg chg*/
        PK0Y060(); /* restart application*/
      end
    end
  end

end // end PK0YS-SCROLL-PAGE4

// Set All Selections = 'S'
Function PK0YS-SEL-ALL2()

     /* TURN ON ALL SELECTIONS IF USER REQUESTS "A"*/

  PK0YW00.PK0YW-SELECT-ALL = "N";

  if (PK0YM002.PK0YM-SEL-CD[1] == "A" /* select all items (alloc qty)*/
   || PK0YM002.PK0YM-SEL-CD[1] == "O") /* select all items (order qty)*/
    PK0YW01.PK0YW-SUBSCRIPT = 1; /* init subscript*/
    PK0YW00.PK0YW-SELECT-ALL = PK0YM002.PK0YM-SEL-CD[1]; /* all selcted*/
    while (PK0YW01.PK0YW-SUBSCRIPT <= 11) /* less than or equal to 11*/
      if (PK0YM002.SY4IDDSC[PK0YW-SUBSCRIPT] == " ")
         /* skip it*/
      else
        /* Commented out "Select All" Logic for now.  PSTORE 1/4/95*/
        PK0YM002.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] = "S"; /* turn on*/
      end
      PK0YW01.PK0YW-SUBSCRIPT = PK0YW01.PK0YW-SUBSCRIPT + 1; /* incr by +1*/
    end
  end

end // end PK0YS-SEL-ALL2

// Set All Selections = 'S'
Function PK0YS-SEL-ALL4()

     /* TURN ON ALL SELECTIONS IF USER REQUESTS "A"*/

  PK0YW00.PK0YW-SELECT-ALL = "N";

  if (PK0YM004.PK0YM-SEL-CD[1] == "O") /* select all items (order qty)*/
    PK0YW01.PK0YW-SUBSCRIPT = 1; /* init subscript*/
    PK0YW00.PK0YW-SELECT-ALL = PK0YM004.PK0YM-SEL-CD[1]; /* all selcted*/
    while (PK0YW01.PK0YW-SUBSCRIPT <= 11) /* less than or equal to 11*/
      PK0YM004.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] = "S"; /* turn on*/
    end
    PK0YW01.PK0YW-SUBSCRIPT = PK0YW01.PK0YW-SUBSCRIPT + 1; /* incr by +1*/
  end

end // end PK0YS-SEL-ALL4

// Submit JCL for map 2
Function PK0YS-SUB-JCL2()
     /*  */
     /* Format the batch program parameters.*/
     /* Enque the internal reader for job submission.*/
     /* Submit the job control through the internal reader.*/
     /* Deque the internal reader after job submission.*/
     /* Indicate that the selected function is completed.*/
     /*  */

  set PK0YW00 empty; /* Initialize variables work area*/
  set PK0YW03 empty; /* Initialize parameters work area*/
  PK0YW01.PK0YW-JOB-SUBMITTED-FLAG = "N";

  PK0YW03.XWHCD = PK0YM002.XWHCD; /* Warehouse code*/

  if (OP2REC.XGPCD == "02")
    PK0YW00.PK0YW-PROC-NAME = "PK3791"; /* Execute proc PK3791*/
    PK0YW00.PK0YW-PGM-NAME = "PK379D"; /* Execute pgm PK379D*/
  else
    PK0YW00.PK0YW-PROC-NAME = "PK4761"; /* Execute proc PK476t*/
    PK0YW00.PK0YW-PGM-NAME = "PK4760"; /* Execute pgm  PK4760*/
  end

  PK0YW00.PK0YW-RUN-TYPE = "NORM ";

   /* Enque the internal reader*/
  PK0YS-READER-ENQUE();
  while (PK0YW01.PK0YW-JOB-SUBMITTED-FLAG == "N")

    if (OP2REC.XGPCD == "02")

      PK0YW99.PK0YWJCL = PK0YT03.PK0YWJCL[PK0YW-TABLE-INDEX]; /* JCL statement*/

      PK0YW00.PK0YW-RUN-TYPE = PK0YT03.PK0YT-STATEMENT-TYPE[PK0YW-TABLE-INDEX]; /* Statement type*/

    else

      PK0YW99.PK0YWJCL = PK0YT02.PK0YWJCL[PK0YW-TABLE-INDEX]; /* JCL statement*/

      PK0YW00.PK0YW-RUN-TYPE = PK0YT02.PK0YT-STATEMENT-TYPE[PK0YW-TABLE-INDEX]; /* Statement type*/

    end

    if (PK0YW00.PK0YW-RUN-TYPE == "P" /* Parameters statement*/
     || PK0YW00.PK0YW-RUN-TYPE == "I") /* Parameters statement*/

      PK0YW01.PK0YW-PAGE-NBR = 1;
   /* calcualte extra tickets percent*/
      PK0YW01.PK0YW-EXTRA-TICK-PERCENT = PK0YM002.PK0YM-MORE-TICK-PERCENT + 100;
      while (PK0YW01.PK0YW-PAGE-NBR <= PK0YM002.PK0YM-MAX-PAGE)
        PK0YS-RED-TMP-STOR();
        PK0YW01.PK0YW-SUBSCRIPT = 1;
        while (PK0YW01.PK0YW-SUBSCRIPT < 12)
          if (PK0YW02.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "S")
            PK0YW03.PK0YW-PK-ORD-STKTF-ID = PK0YM002.OP-CUST-ORD-ID;
            PK0YW03.PK0YW-OP-NIKE-ORD-ID = PK0YM002.OP-NIKE-ORD-ID;
            PK0YW03.PK0YW-CU-CO-ID = OP1REC.KUCCOID;
            PK0YW03.PK0YW-CU-STOR-ID = PK0YM002.CU-STOR-ID;
            PK0YW03.PK0YM-XNX-DEPT-ID-XREF = PK0YM002.PK0YM-XNX-DEPT-ID-XREF;
            PK0YW03.PK0YM-LABEL-CODE = PK0YW02.PK-LABL-CD[PK0YW-SUBSCRIPT];
            PK0YW03.XGP-GPC-CD = PK0YW02.XGP-GPC-CD[PK0YW-SUBSCRIPT];
            PK0YW03.PK0YW-OP-LINE-ITEM-NBR = PK0YW02.PK0YW-OP-LINE-ITEM-NBR[PK0YW-SUBSCRIPT];
    /* MOVE PK0YW02.XDM-DIM-CD(PK0YW-SUBSCRIPT) TO*/
    /* PK0YW03.XDM-DIM-CD;*/
            PK0YW03.XUM-UOM-CD = PK0YW02.XUM-UOM-CD[PK0YW-SUBSCRIPT];
            PK0YW03.XQA-QUAL-CD = PK0YW02.XQA-QUAL-CD[PK0YW-SUBSCRIPT];
    /* MOVE PK0YW02.SY-STY-NBR(PK0YW-SUBSCRIPT) TO*/
    /* PK0YW03.SY-STY-NBR;*/
    /* MOVE PK0YW02.SY-COLR-CD-ID(PK0YW-SUBSCRIPT) TO*/
    /* PK0YW03.SY-COLR-CD-ID;*/
            PK0YW03.PK0YW-SY-SZ-ID = PK0YW02.SY5SZID[PK0YW-SUBSCRIPT];
            PK0YW03.PK0YW-ORIG-PRINT-QTY = PK0YW02.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT];
            PK0YW01.PK0YW-OLD-PRINT-QTY = PK0YW02.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT]; /* move prt qty to numeric fld*/
   /* calculate new print qty*/
            PK0YW01.PK0YW-NEW-PRINT-QTY = mathLib.round(PK0YW01.PK0YW-OLD-PRINT-QTY *             PK0YW01.PK0YW-EXTRA-TICK-PERCENT / 100, -mathLib.decimals(PK0YW01.PK0YW-NEW-PRINT-QTY));
   /* move new qty to parm*/
            PK0YW03.PK0YW-PRINT-QTY = PK0YW01.PK0YW-NEW-PRINT-QTY;
             /* Move Temporary Storage to W03 work record*/
            PK0YW00.PK0YWJCL = PK0YW03.PK0YW-JCL; /* Report parms*/
            PK0Y080(); /* Write to internal reader*/
          end
          PK0YW01.PK0YW-SUBSCRIPT = PK0YW01.PK0YW-SUBSCRIPT + 1;
        end
        PK0YW01.PK0YW-PAGE-NBR = PK0YW01.PK0YW-PAGE-NBR + 1;
      end
    else
      PK0Y080(); /* Write to internal reader*/
    end
   /* Reset pg*/
    PK0YW01.PK0YW-PAGE-NBR = PK0YM002.PK0YM-PAGE-NBR;
  end

  PK0YS-READER-DEQUE(); /* Deque the internal reader*/

    /* Save printer id, and trick process PK0Y020 into thinking*/
    /* that PK0A was the last application executed.  That way*/
    /* proper initialize will be done*/

  PK0YW01.PK0YW-PRINTER-SAVE-ID = PK0YM002.PK0YM-PRINTER-ID;
  PKWREC.PKWFRMAP = "PK0A";
  set PK0YW02 empty;

end // end PK0YS-SUB-JCL2

// Submit JCL for map 3
Function PK0YS-SUB-JCL3()
     /*  */
     /* Format the batch program parameters.*/
     /* Enque the internal reader for job submission.*/
     /* Submit the job control through the internal reader.*/
     /* Deque the internal reader after job submission.*/
     /* Indicate that the selected function is completed.*/
     /*  */

  set PK0YW00 empty; /* Initialize variables work area*/
  set PK0YW03 empty; /* Initialize parameters work area*/
  PK0YW01.PK0YW-JOB-SUBMITTED-FLAG = "N";

  PK0YW03.XWHCD = PK0YM003.XWHCD; /* Warehouse code*/
   /* Save label stock from table*/
  PK0YW02.PK0YM-LABEL-STOCK = PK0YT-LABEL-STOCK[PK0YW-LABL-SUB];

  if (PK0YM003.XGPCD == "03")
    PK0YW00.PK0YW-PROC-NAME = "PK4761"; /* Execute proc PK476t*/
    PK0YW00.PK0YW-PGM-NAME = "PK4760"; /* Execute pgm  PK4760*/
  else
    PK0YW00.PK0YW-PROC-NAME = "PK3791"; /* Execute proc PK3791*/
    PK0YW00.PK0YW-PGM-NAME = "PK379D"; /* Execute pgm  PK379d*/
  end

  PK0YW00.PK0YW-RUN-TYPE = "NORM ";

   /* Enque the internal reader*/
  PK0YS-READER-ENQUE();
  while (PK0YW01.PK0YW-JOB-SUBMITTED-FLAG == "N")

    if (PK0YM003.XGPCD == "03")
      PK0YW99.PK0YWJCL = PK0YT02.PK0YWJCL[PK0YW-TABLE-INDEX]; /* JCL statement*/

      PK0YW00.PK0YW-RUN-TYPE = PK0YT02.PK0YT-STATEMENT-TYPE[PK0YW-TABLE-INDEX]; /* Statement type*/
    else
      PK0YW99.PK0YWJCL = PK0YT03.PK0YWJCL[PK0YW-TABLE-INDEX]; /* JCL statement*/

      PK0YW00.PK0YW-RUN-TYPE = PK0YT03.PK0YT-STATEMENT-TYPE[PK0YW-TABLE-INDEX]; /* Statement type*/
    end

    if (PK0YW00.PK0YW-RUN-TYPE == "P" /* Parameters statement*/
     || PK0YW00.PK0YW-RUN-TYPE == "I") /* Parameters statement*/

      PK0YW03.PK0YW-PK-ORD-STKTF-ID = 0;
      PK0YW03.PK0YW-OP-NIKE-ORD-ID = 0;
      PK0YW03.PK0YW-CU-CO-ID = PK0YM003.KUCCOID;
      PK0YW03.PK0YM-XNX-DEPT-ID-XREF = PK0YM003.PK0YM-XNX-DEPT-ID-XREF;
      PK0YW03.PK0YM-LABEL-CODE = PK0YM003.PK0YM-LABEL-CODE;
      PK0YW03.XGP-GPC-CD = PK0YM003.XGPCD;
      PK0YW03.XDM-DIM-CD = PK0YM003.XDMCD;
      PK0YW03.XUM-UOM-CD = "01";
      PK0YW03.XQA-QUAL-CD = PK0YM003.XQACD;
      PK0YW03.SY-STY-NBR = PK0YM003.SY1STNBR;
      PK0YW03.SY-COLR-CD-ID = PK0YM003.SY2CLRID;
  /*  */
      /* IF PWRREC.PWRLBPRI EQ 'P';   /* priniting by product*/
      if (PK0YT-XREF-LVL-IND[PK0YW-LABL-SUB] == "P")
        PK0YW03.PK0YW-SY-SZ-ID = " "; /* only one parm line allowed*/
        PK0YW03.PK0YW-PRINT-QTY = PK0YM003.PK0YM-PRINT-QTY-PRODUCT;
        PK0YW03.PK0YW-ORIG-PRINT-QTY = PK0YM003.PK0YM-PRINT-QTY-PRODUCT;
        PK0YW00.PK0YWJCL = PK0YW03.PK0YW-JCL; /* Report parms*/
        PK0Y080(); /* Write to internal reader*/
      end
  /*  */
      /* IF PWRREC.PWRLBPRI EQ 'S';   /* priniting by size*/
      if (PK0YT-XREF-LVL-IND[PK0YW-LABL-SUB] == "S")
        sysVar.arrayIndex = 1; /* upto 5 parms allowed*/
        while (sysVar.arrayIndex <= 5)
          if (PK0YM003.PK0YM-PRINT-QTY-SZ[sysVar.arrayIndex] != 0)
            PK0YW03.PK0YW-SY-SZ-ID = PK0YW01.PK0YW-HOLD-SY5SZID[sysVar.arrayIndex];
            PK0YW03.PK0YW-PRINT-QTY = PK0YM003.PK0YM-PRINT-QTY-SZ[sysVar.arrayIndex];
            PK0YW03.PK0YW-ORIG-PRINT-QTY = PK0YM003.PK0YM-PRINT-QTY-SZ[sysVar.arrayIndex];
            /* DCMS IN*/
            /* Move the Order Number and Line Item Number to the*/
            /* PK0YW03 Work Record*/
            if (PK0YM003.XWHCD == "51")
              if (PK0YM003.OP-CUST-ORD-ID > 0)
                PK0YW03.PK0YW-PK-ORD-STKTF-ID = PK0YM003.OP-CUST-ORD-ID;
              else
                PK0YW03.PK0YW-PK-ORD-STKTF-ID = 0;
              end
              if (PK0YM003.OP-NIKE-ORDER-ID > 0)
                PK0YW03.PK0YW-OP-NIKE-ORD-ID = PK0YM003.OP-NIKE-ORDER-ID;
              else
                PK0YW03.PK0YW-OP-NIKE-ORD-ID = 0;
              end
              if (PK0YM003.OP-LINE-ITEM-NBR > 0)
                PK0YW03.PK0YW-OP-LINE-ITEM-NBR = PK0YM003.OP-LINE-ITEM-NBR;
              else
                PK0YW03.PK0YW-OP-LINE-ITEM-NBR = 0;
              end
            end
  /* DCMS OUT*/
             /* Move Temporary Storage to W03 work record*/
            PK0YW00.PK0YWJCL = PK0YW03.PK0YW-JCL; /* Report parms*/
            PK0Y080(); /* Write to internal reader*/
          end
          sysVar.arrayIndex = sysVar.arrayIndex + 1;
        end
      end
    else
      PK0Y080(); /* Write to internal reader*/
    end

  end

  PK0YS-READER-DEQUE(); /* Deque the internal reader*/

    /* Save printer id, and trick process PK0Y040 into thinking*/
    /* that PK0A was the last application executed.  That way*/
    /* proper initialize will be done*/

  PK0YW01.PK0YW-PRINTER-SAVE-ID = PK0YM003.PK0YM-PRINTER-ID;
  PKWREC.PKWFRMAP = "PK0A";

end // end PK0YS-SUB-JCL3

// Submit JCL for map 4
Function PK0YS-SUB-JCL4()
     /*  */
     /* Format the batch program parameters.*/
     /* Enque the internal reader for job submission.*/
     /* Submit the job control through the internal reader.*/
     /* Deque the internal reader after job submission.*/
     /* Indicate that the selected function is completed.*/
     /*  */

  set PK0YW00 empty; /* Initialize variables work area*/
  set PK0YW03 empty; /* Initialize parameters work area*/
  PK0YW01.PK0YW-JOB-SUBMITTED-FLAG = "N";

  PK0YW03.XWHCD = PK0YM004.XWHCD; /* Warehouse code*/

  if (OP2REC.XGPCD == "02")
    PK0YW00.PK0YW-PROC-NAME = "PK3791"; /* Execute proc PK3791*/
    PK0YW00.PK0YW-PGM-NAME = "PK379D"; /* Execute pgm PK379D*/
  else
    PK0YW00.PK0YW-PROC-NAME = "PK4761"; /* Execute proc PK476t*/
    PK0YW00.PK0YW-PGM-NAME = "PK4760"; /* Execute pgm  PK4760*/
  end

  PK0YW00.PK0YW-RUN-TYPE = "NORM ";

   /* Enque the internal reader*/
  PK0YS-READER-ENQUE();
  while (PK0YW01.PK0YW-JOB-SUBMITTED-FLAG == "N")

    if (OP2REC.XGPCD == "02")

      PK0YW99.PK0YWJCL = PK0YT03.PK0YWJCL[PK0YW-TABLE-INDEX]; /* JCL statement*/

      PK0YW00.PK0YW-RUN-TYPE = PK0YT03.PK0YT-STATEMENT-TYPE[PK0YW-TABLE-INDEX]; /* Statement type*/

    else

      PK0YW99.PK0YWJCL = PK0YT02.PK0YWJCL[PK0YW-TABLE-INDEX]; /* JCL statement*/

      PK0YW00.PK0YW-RUN-TYPE = PK0YT02.PK0YT-STATEMENT-TYPE[PK0YW-TABLE-INDEX]; /* Statement type*/

    end

    if (PK0YW00.PK0YW-RUN-TYPE == "P" /* Parameters statement*/
     || PK0YW00.PK0YW-RUN-TYPE == "I") /* Parameters statement*/

      PK0YW01.PK0YW-PAGE-NBR = 1;
   /* calcualte extra tickets percent*/
      PK0YW01.PK0YW-EXTRA-TICK-PERCENT = PK0YM004.PK0YM-MORE-TICK-PERCENT + 100;
      while (PK0YW01.PK0YW-PAGE-NBR <= PK0YM004.PK0YM-MAX-PAGE)
        PK0YS-RED-TMP-STOR();
        PK0YW01.PK0YW-SUBSCRIPT = 1;
        while (PK0YW01.PK0YW-SUBSCRIPT < 12)
          if (PK0YW02.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] == "S")
            PK0YW03.PK0YW-PK-ORD-STKTF-ID = PK0YM004.OP-CUST-ORD-ID;
            PK0YW03.PK0YW-OP-NIKE-ORD-ID = PK0YM004.OP-NIKE-ORD-ID;
            PK0YW03.PK0YW-CU-CO-ID = OP1REC.KUCCOID;
            PK0YW03.PK0YW-CU-STOR-ID = PK0YM004.CU-STOR-ID;
            PK0YW03.PK0YM-XNX-DEPT-ID-XREF = PK0YM004.PK0YM-XNX-DEPT-ID-XREF;
            PK0YW03.OP-CASE-LOT-NBR = PK0YM004.OP-CASE-LOT-NBR;
            if (PK0YW03.PK0YW-CU-CO-ID == 27580)
              PK0YW03.PK0YM-LABEL-CODE = "KCT";
            else
              PK0YW03.PK0YM-LABEL-CODE = "KCS";
            end
            PK0YW03.XGP-GPC-CD = PK0YW02.XGP-GPC-CD[PK0YW-SUBSCRIPT];
    /* MOVE PK0YW02.XDM-DIM-CD(PK0YW-SUBSCRIPT) TO*/
    /* PK0YW03.XDM-DIM-CD;*/
            PK0YW03.XUM-UOM-CD = PK0YW02.XUM-UOM-CD[PK0YW-SUBSCRIPT];
            PK0YW03.XQA-QUAL-CD = PK0YW02.XQA-QUAL-CD[PK0YW-SUBSCRIPT];
    /* MOVE PK0YW02.SY-STY-NBR(PK0YW-SUBSCRIPT) TO*/
    /* PK0YW03.SY-STY-NBR;*/
    /* MOVE PK0YW02.SY-COLR-CD-ID(PK0YW-SUBSCRIPT) TO*/
    /* PK0YW03.SY-COLR-CD-ID;*/
            PK0YW03.PK0YW-OP-LINE-ITEM-NBR = PK0YW02.PK0YW-OP-LINE-ITEM-NBR[PK0YW-SUBSCRIPT];
            PK0YW03.PK0YW-SY-SZ-ID = PK0YW02.SY5SZID[PK0YW-SUBSCRIPT];
            PK0YW03.PK0YW-ORIG-PRINT-QTY = PK0YW02.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT];
            PK0YW01.PK0YW-OLD-PRINT-QTY = PK0YW02.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT]; /* move prt qty to numeric fld*/
   /* calculate new print qty*/
            PK0YW01.PK0YW-NEW-PRINT-QTY = mathLib.round(PK0YW01.PK0YW-OLD-PRINT-QTY *             PK0YW01.PK0YW-EXTRA-TICK-PERCENT / 100, -mathLib.decimals(PK0YW01.PK0YW-NEW-PRINT-QTY));
   /* move new qty to parm*/
            PK0YW03.PK0YW-PRINT-QTY = PK0YW01.PK0YW-NEW-PRINT-QTY;
             /* Move Temporary Storage to W03 work record*/
            PK0YW00.PK0YWJCL = PK0YW03.PK0YW-JCL; /* Report parms*/
            PK0Y080(); /* Write to internal reader*/
          end
          PK0YW01.PK0YW-SUBSCRIPT = PK0YW01.PK0YW-SUBSCRIPT + 1;
        end
        PK0YW01.PK0YW-PAGE-NBR = PK0YW01.PK0YW-PAGE-NBR + 1;
      end
    else
      PK0Y080(); /* Write to internal reader*/
    end
   /* Reset pg*/
    PK0YW01.PK0YW-PAGE-NBR = PK0YM004.PK0YM-PAGE-NBR;
  end

  PK0YS-READER-DEQUE(); /* Deque the internal reader*/

    /* Save printer id, and trick process PK0Y060 into thinking*/
    /* that PK0A was the last application executed.  That way*/
    /* proper initialize will be done*/

  PK0YW01.PK0YW-PRINTER-SAVE-ID = PK0YM004.PK0YM-PRINTER-ID;
  PKWREC.PKWFRMAP = "PK0A";
  set PK0YW02 empty;

end // end PK0YS-SUB-JCL4

// Submit JCL for map 5
Function PK0YS-SUB-JCL5()
     /*  */
     /* Format the batch program parameters.*/
     /* Enque the internal reader for job submission.*/
     /* Submit the job control through the internal reader.*/
     /* Deque the internal reader after job submission.*/
     /* Indicate that the selected function is completed.*/
     /*  */

  set PK0YW00 empty; /* Initialize variables work area*/
  set PK0YW04 empty; /* Initialize parameters work area*/
  PK0YW01.PK0YW-JOB-SUBMITTED-FLAG = "N";

  PK0YW04.XWHCD = PK0YM005.XWHCD; /* Warehouse code*/
  PK0YW02.PK0YM-LABEL-STOCK = "LBL004";

  PK0YW00.PK0YW-PROC-NAME = "PK3801"; /* Execute proc PK3801*/
  PK0YW00.PK0YW-PGM-NAME = "PK380D"; /* Execute pgm  PK380D*/

  PK0YW00.PK0YW-RUN-TYPE = "NORM ";

   /* Enque the internal reader*/
  PK0YS-READER-ENQUE();
  while (PK0YW01.PK0YW-JOB-SUBMITTED-FLAG == "N")

    PK0YW99.PK0YWJCL = PK0YT02.PK0YWJCL[PK0YW-TABLE-INDEX]; /* JCL statement*/

    PK0YW00.PK0YW-RUN-TYPE = PK0YT02.PK0YT-STATEMENT-TYPE[PK0YW-TABLE-INDEX]; /* Statement type*/

    if (PK0YW00.PK0YW-RUN-TYPE == "P" /* Parameters statement*/
     || PK0YW00.PK0YW-RUN-TYPE == "I") /* Parameters statement*/
      sysVar.arrayIndex = 1; /* upto 11 parms allowed*/
      while (sysVar.arrayIndex <= 11)
        if (PK0YM005.PK0YM-PRICE[sysVar.arrayIndex] != 0)
          PK0YW04.PK0YW-PRICE = PK0YM005.PK0YM-PRICE[sysVar.arrayIndex];
          PK0YW04.PK0YW-QUANTITY = PK0YM005.PK0YM-QUANTITY[sysVar.arrayIndex];
            /* Move Temporary Storage to W04 work record*/
          PK0YW00.PK0YWJCL = PK0YW04.PK0YW-JCL; /* Report parms*/
          PK0Y080(); /* Write to internal reader*/
        end
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      end
    else
      PK0Y080();
    end
  end

  PK0YS-READER-DEQUE(); /* Deque the internal reader*/

    /* Save printer id, and trick process PK0Y040 into thinking*/
    /* that PK0A was the last application executed.  That way*/
    /* proper initialize will be done*/

  PK0YW01.PK0YW-PRINTER-SAVE-ID = PK0YM005.PK0YM-PRINTER-ID;
  PKWREC.PKWFRMAP = "PK0A";

end // end PK0YS-SUB-JCL5

// Transfer Control for PK0Y MAP1
Function PK0YS-TRNSFR-CNTL1()

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set PK0YM001 initial; /* Clear map output area*/
    PKWREC.XWHCD = PK0YW01.XWHCD; /* Restore warehouse code*/
    PKWREC.XWHABRV = PK0YW01.XWHABRV; /* and abbreviation*/
    XPPK002(); /* Verify warehouse code*/
    PK0YW01.PK0YW-SEL-CD = " ";
  end

  if (PK0YM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter)
      if (PK0YM001.CATOAP == COMMAREA.CACURRAP) /* Same as current*/
        set PK0YM001.CATOAP cursor, modified, bold;
        PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set error flag*/
        converseLib.validationFailed(1); /* invalid request*/
      else
        PKWREC.XWHCD = PK0YM001.XWHCD; /* Save warehouse code*/
        COMMAREA.CATOAP = PK0YM001.CATOAP; /* TO application*/
        COMMAREA.CAITEM = PK0YM001.CAITEM; /* Application data*/
        COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* Application user area*/
        XSEXIT(); /* Trans. to requested App*/
      end
    end
  end

  if (converseVar.eventKey is pf1)
    COMMAREA.CAUSERA = " ";
    XSPF1();
  end

  if (converseVar.eventKey is pf3)
    COMMAREA.CAUSERA = " ";
    COMMAREA.CATOAP = "PK0A"; /* Picking Master Menu*/
    PKWREC.XWHCD = PK0YM001.XWHCD; /* Save warehouse code*/
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* COMMAREA user area*/
    XSEXIT();
  end

  if (converseVar.eventKey is pf4)
    COMMAREA.CAUSERA = " ";
    XSPF4();
  end

  if (converseVar.eventKey is enter
  ) /* next sentence - there may be errors*/
  else
    converseLib.validationFailed(002); /* invalid pf key*/
    PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set error flag*/
  end

  PKWREC.PKWFRMAP = "PK0A"; /* init from app*/
  if (converseVar.eventKey is enter
   && PK0YW01.PK0YW-ERROR-FLAG == "N")
    if (PK0YM001.PK0YM-SEL-CD == "01")
      PK0Y020(); /* By order process*/
    else
      if (PK0YM001.PK0YM-SEL-CD == "02")
        PK0Y040(); /* By product*/
      else
        if (PK0YM001.PK0YM-SEL-CD == "03")
          PK0Y060(); /* By order with CASELOT*/
        else
          if (PK0YM001.PK0YM-SEL-CD == "04")
            PK0Y090(); /* By price*/
          end
        end
      end
    end
  end

end // end PK0YS-TRNSFR-CNTL1

// Transfer Control to App.
Function PK0YS-TRNSFR-CNTL2()

  if (converseVar.eventKey is pf3)
    if (PK0YW01.PK0YW-TS-EXISTS-FLAG == "Y") /* temp storage exists*/
      PK0YS-PRG-TMP-STOR(); /* purge temporary storage*/
    end

    COMMAREA.CATOAP = "PK0Y"; /* restart application*/
    COMMAREA.CAFROMAP = "PK0A"; /* trick init logic*/
    COMMAREA.CACURRAP = "PK0A"; /* trick init logic*/
    PKWREC.XWHCD = PK0YM002.XWHCD; /* Save warehouse code*/
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* Application user area*/
    XSEXIT();

  end

  if (converseVar.eventKey is pf4)
    if (PK0YW01.PK0YW-TS-EXISTS-FLAG == "Y") /* temp storage exists*/
      PK0YS-PRG-TMP-STOR(); /* purge temp storage 1*/
    end
    COMMAREA.CAUSERA = " ";

    XSPF4();
  end

  if (PK0YM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter)
      if (PK0YM002.CATOAP == COMMAREA.CACURRAP) /* Same as current*/
        set PK0YM002.CATOAP cursor, modified, bold;
        PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set error flag*/
        converseLib.validationFailed(1); /* invalid request*/
      else
        PKWREC.XWHCD = PK0YM002.XWHCD; /* Save warehouse code*/
        COMMAREA.CATOAP = PK0YM002.CATOAP; /* TO application*/
        COMMAREA.CAITEM = PK0YM002.CAITEM; /* Application data*/
        COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* Application user area*/
        XSEXIT(); /* Transfer to requested App*/
      end
    end
  end

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    if (PK0YW01.PK0YW-ERROR-FLAG == "N")
      PK0Y020();
    end
  end

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
  ) /* next sentence - errors may exist*/
  else
    converseLib.validationFailed(012); /* invalid pf key*/
    PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set 'PK' error flag*/
  end

  if (PK0YW01.PK0YW-JOB-SUBMITTED-FLAG == "Y"
   && PK0YW01.PK0YW-ERROR-FLAG == "N")
    set PK0YM002 initial;
    set PK0YM002 empty;
    converseLib.validationFailed(477); /* jcl was submitted message*/
  end
end // end PK0YS-TRNSFR-CNTL2

// Transfer Control to App.
Function PK0YS-TRNSFR-CNTL3()

  if (converseVar.eventKey is pf3)
    PKWREC.XWHCD = PK0YM003.XWHCD; /* Save warehouse code*/
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* Application user area*/
    COMMAREA.CATOAP = "PK0Y"; /* restart application*/
    COMMAREA.CAFROMAP = "PK0A"; /* trick init logic*/
    COMMAREA.CACURRAP = "PK0A"; /* trick init logic*/
    XSEXIT();
  end

  if (converseVar.eventKey is pf4)
    COMMAREA.CAUSERA = " ";
    XSPF4();
  end

  if (PK0YM003.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter)
      if (PK0YM003.CATOAP == COMMAREA.CACURRAP) /* Same as current*/
        set PK0YM003.CATOAP cursor, modified, bold;
        PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set error flag*/
        converseLib.validationFailed(1); /* invalid request*/
      else
        PKWREC.XWHCD = PK0YM003.XWHCD; /* Save warehouse code*/
        COMMAREA.CATOAP = PK0YM003.CATOAP; /* TO application*/
        COMMAREA.CAITEM = PK0YM003.CAITEM; /* Application data*/
        COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* Application user area*/
        XSEXIT(); /* Transfer to requested App*/
      end
    end
  end

  if (converseVar.eventKey is enter
  ) /* next sentence - errors may exist*/
  else
    converseLib.validationFailed(012); /* invalid pf key*/
    PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set 'PK' error flag*/
  end

  if (PK0YW01.PK0YW-JOB-SUBMITTED-FLAG == "Y" /* Clear map if jcl submitted*/
   && PK0YW01.PK0YW-ERROR-FLAG == "N")       
    set PK0YM003 initial;
    PK0YM003.PK0YM-XNX-DEPT-ID-XREF = 0;
    PK0YM003.XDMCD = "00"; /* Dimension Code*/
    converseLib.validationFailed(477); /* JCL was submitted message*/
  end
end // end PK0YS-TRNSFR-CNTL3

// Transfer Control to App.
Function PK0YS-TRNSFR-CNTL4()

  if (converseVar.eventKey is pf3)
    if (PK0YW01.PK0YW-TS-EXISTS-FLAG == "Y") /* temp storage exists*/
      PK0YS-PRG-TMP-STOR(); /* purge temporary storage*/
    end

    COMMAREA.CATOAP = "PK0Y"; /* restart application*/
    COMMAREA.CAFROMAP = "PK0A"; /* trick init logic*/
    COMMAREA.CACURRAP = "PK0A"; /* trick init logic*/
    PKWREC.XWHCD = PK0YM004.XWHCD; /* Save warehouse code*/
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* Application user area*/
    XSEXIT();

  end

  if (converseVar.eventKey is pf4)
    if (PK0YW01.PK0YW-TS-EXISTS-FLAG == "Y") /* temp storage exists*/
      PK0YS-PRG-TMP-STOR(); /* purge temp storage 1*/
    end
    COMMAREA.CAUSERA = " ";

    XSPF4();
  end

  if (PK0YM004.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter)
      if (PK0YM004.CATOAP == COMMAREA.CACURRAP) /* Same as current*/
        set PK0YM004.CATOAP cursor, modified, bold;
        PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set error flag*/
        converseLib.validationFailed(1); /* invalid request*/
      else
        PKWREC.XWHCD = PK0YM004.XWHCD; /* Save warehouse code*/
        COMMAREA.CATOAP = PK0YM004.CATOAP; /* TO application*/
        COMMAREA.CAITEM = PK0YM004.CAITEM; /* Application data*/
        COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* Application user area*/
        XSEXIT(); /* Transfer to requested App*/
      end
    end
  end

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    if (PK0YW01.PK0YW-ERROR-FLAG == "N")
      PK0Y060();
    end
  end

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
  ) /* next sentence - errors may exist*/
  else
    converseLib.validationFailed(012); /* invalid pf key*/
    PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set 'PK' error flag*/
  end

  if (PK0YW01.PK0YW-JOB-SUBMITTED-FLAG == "Y"
   && PK0YW01.PK0YW-ERROR-FLAG == "N")
    set PK0YM004 initial;
    set PK0YM004 empty;
    converseLib.validationFailed(477); /* jcl was submitted message*/
  end
end // end PK0YS-TRNSFR-CNTL4

// Transfer Control to App.
Function PK0YS-TRNSFR-CNTL5()

  if (converseVar.eventKey is pf3)
    PKWREC.XWHCD = PK0YM005.XWHCD; /* Save warehouse code*/
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* Application user area*/
    COMMAREA.CATOAP = "PK0Y"; /* restart application*/
    COMMAREA.CAFROMAP = "PK0A"; /* trick init logic*/
    COMMAREA.CACURRAP = "PK0A"; /* trick init logic*/
    XSEXIT();
  end

  if (converseVar.eventKey is pf4)
    COMMAREA.CAUSERA = " ";
    XSPF4();
  end

  if (PK0YM005.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter)
      if (PK0YM005.CATOAP == COMMAREA.CACURRAP) /* Same as current*/
        set PK0YM005.CATOAP cursor, modified, bold;
        PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set error flag*/
        converseLib.validationFailed(1); /* invalid request*/
      else
        PKWREC.XWHCD = PK0YM005.XWHCD; /* Save warehouse code*/
        COMMAREA.CATOAP = PK0YM005.CATOAP; /* TO application*/
        COMMAREA.CAITEM = PK0YM005.CAITEM; /* Application data*/
        COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* Application user area*/
        XSEXIT(); /* Transfer to requested App*/
      end
    end
  end

  if (converseVar.eventKey is enter
  ) /* next sentence - errors may exist*/
  else
    converseLib.validationFailed(012); /* invalid pf key*/
    PK0YW01.PK0YW-ERROR-FLAG = "Y"; /* set 'PK' error flag*/
  end

  if (PK0YW01.PK0YW-JOB-SUBMITTED-FLAG == "Y" /* Clear map if jcl submitted*/
   && PK0YW01.PK0YW-ERROR-FLAG == "N")       
    set PK0YM005 initial;
    converseLib.validationFailed(477); /* JCL was submitted message*/
  end
end // end PK0YS-TRNSFR-CNTL5

// Update For Converse
Function PK0YS-UPD-CONVRSE2()

     /* move all selections from map to temp storage*/
     /* then process first selection using temp storage*/

  PK0YW01.PK0YW-SUBSCRIPT = 1; /* init subscript*/
  while (PK0YW01.PK0YW-SUBSCRIPT <= 11) /* max orders per page*/
    PK0YW02.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] = PK0YM002.PK0YM-SEL-CD[PK0YW-SUBSCRIPT];
    PK0YW02.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] = PK0YM002.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT];
    PK0YW01.PK0YW-SUBSCRIPT = PK0YW01.PK0YW-SUBSCRIPT + 1;
  end

  PK0YS-UPD-TMP-STOR(); /* update temp storage*/

  if (PK0YM002.PK0YM-CONFIRM-FLAG == "Y" /* ready to submit JCL*/
   && PK0YW01.PK0YW-SEL-MADE-FLAG == "Y")
    PK0YS-SUB-JCL2(); /* Submitt JCL for map2*/
  else
    if (PK0YW01.PK0YW-SEL-MADE-FLAG == "Y")
      PK0YM002.PK0YM-CONFIRM-LIT1 = "OKAY TO PRINT?";
      set PK0YM002.PK0YM-CONFIRM-LIT1 skip, bold;
      PK0YM002.PK0YM-CONFIRM-LIT2 = "(Y/N)";
      set PK0YM002.PK0YM-CONFIRM-LIT2 skip, bold;
      set PK0YM002.PK0YM-CONFIRM-FLAG cursor, initialAttributes;
      PK0YM002.PK0YM-MORE-TICK-LIT1 = "PRINT";
      set PK0YM002.PK0YM-MORE-TICK-LIT1 skip, bold;
      PK0YM002.PK0YM-MORE-TICK-LIT2 = "% MORE";
      set PK0YM002.PK0YM-MORE-TICK-LIT2 skip, bold;
      PK0YM002.PK0YM-MORE-TICK-PERCENT = " ";
      set PK0YM002.PK0YM-MORE-TICK-PERCENT initialAttributes;
    end
  end
     /*  */
     /* IF user not ready to print, re-display screen with message*/
     /*  */
  if (PK0YM002.PK0YM-CONFIRM-FLAG == "N")
    set PK0YM002.PK0YM-CONFIRM-LIT1 skip, invisible;
    set PK0YM002.PK0YM-CONFIRM-LIT2 skip, invisible;
    set PK0YM002.PK0YM-CONFIRM-FLAG skip, invisible;
    set PK0YM002.PK0YM-SEL-CD[1] cursor;
    set PK0YM002.PK0YM-MORE-TICK-LIT1 skip, invisible;
    set PK0YM002.PK0YM-MORE-TICK-LIT2 skip, invisible;
    set PK0YM002.PK0YM-MORE-TICK-PERCENT skip, invisible;
    set PK0YM002.PK0YM-SEL-CD[1] cursor;
    converseLib.validationFailed(486); /* print request not submitted*/
  end

end // end PK0YS-UPD-CONVRSE2

// Update For Converse
Function PK0YS-UPD-CONVRSE4()

     /* move all selections from map to temp storage*/
     /* then process first selection using temp storage*/

  PK0YW01.PK0YW-SUBSCRIPT = 1; /* init subscript*/
  while (PK0YW01.PK0YW-SUBSCRIPT <= 11) /* max orders per page*/
    PK0YW02.PK0YM-SEL-CD[PK0YW-SUBSCRIPT] = PK0YM004.PK0YM-SEL-CD[PK0YW-SUBSCRIPT];
    PK0YW02.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT] = PK0YM004.PK0YM-PRINT-QTY[PK0YW-SUBSCRIPT];
    PK0YW01.PK0YW-SUBSCRIPT = PK0YW01.PK0YW-SUBSCRIPT + 1;
  end

  PK0YS-UPD-TMP-STOR(); /* update temp storage*/

  if (PK0YM004.PK0YM-CONFIRM-FLAG == "Y" /* ready to submit JCL*/
   && PK0YW01.PK0YW-SEL-MADE-FLAG == "Y")
    PK0YS-SUB-JCL4(); /* Submitt JCL for map4*/
  else
    if (PK0YW01.PK0YW-SEL-MADE-FLAG == "Y")
      PK0YM004.PK0YM-CONFIRM-LIT1 = "OKAY TO PRINT?";
      set PK0YM004.PK0YM-CONFIRM-LIT1 skip, bold;
      PK0YM004.PK0YM-CONFIRM-LIT2 = "(Y/N)";
      set PK0YM004.PK0YM-CONFIRM-LIT2 skip, bold;
      set PK0YM004.PK0YM-CONFIRM-FLAG cursor, initialAttributes;
      PK0YM004.PK0YM-MORE-TICK-LIT1 = "PRINT";
      set PK0YM004.PK0YM-MORE-TICK-LIT1 skip, bold;
      PK0YM004.PK0YM-MORE-TICK-LIT2 = "% MORE";
      set PK0YM004.PK0YM-MORE-TICK-LIT2 skip, bold;
      PK0YM004.PK0YM-MORE-TICK-PERCENT = " ";
      set PK0YM004.PK0YM-MORE-TICK-PERCENT initialAttributes;
    end
  end
     /*  */
     /* IF user not ready to print, re-display screen with message*/
     /*  */
  if (PK0YM004.PK0YM-CONFIRM-FLAG == "N")
    set PK0YM004.PK0YM-CONFIRM-LIT1 skip, invisible;
    set PK0YM004.PK0YM-CONFIRM-LIT2 skip, invisible;
    set PK0YM004.PK0YM-CONFIRM-FLAG skip, invisible;
    set PK0YM004.PK0YM-SEL-CD[1] cursor;
    set PK0YM004.PK0YM-MORE-TICK-LIT1 skip, invisible;
    set PK0YM004.PK0YM-MORE-TICK-LIT2 skip, invisible;
    set PK0YM004.PK0YM-MORE-TICK-PERCENT skip, invisible;
    set PK0YM004.PK0YM-SEL-CD[1] cursor;
    converseLib.validationFailed(486); /* print request not submitted*/
  end

end // end PK0YS-UPD-CONVRSE4

// Update Cust Labels Temp Storag
Function PK0YS-UPD-TMP-STOR()

     /* update temporary storage*/

  set TA5REC empty;
  TA5REC.TA5APPID = "PKFY"; /* appl identification*/
  TA5REC.TA5FNCCD = "U"; /* function code*/
  TA5REC.TA5TSQIX = PK0YW01.PK0YW-PAGE-NBR; /* current page*/
  PK0YW02.PK0YW-TS-LENGTH = 807; /* length of rec*/

  call "TA0050" (PK0YW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* ts subroutine*/

  if (TA5REC.TA5RTNCD == 0
   || TA5REC.TA5RTNCD == 4)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "UPD TS1";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = PK0YW02.PK0YW-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    PK0YS-POST-NO-ROLL(); /* post, no roll, non db2*/


  end

end // end PK0YS-UPD-TMP-STOR

// Write Cust Labels Temp Storag
Function PK0YS-WRI-TMP-STOR()

     /* write temporary storage*/

  set TA5REC empty;

  TA5REC.TA5APPID = "PKFY"; /* appl identification*/
  TA5REC.TA5FNCCD = "A"; /* function code*/
  PK0YW02.PK0YW-TS-LENGTH = 807; /* length of record*/
  TA5REC.TA5TSQIX = PK0YW01.PK0YW-PAGE-NBR; /* page number*/

  call "TA0050" (PK0YW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage routine*/

  if (TA5REC.TA5RTNCD == 0)
    PK0YW01.PK0YW-TS-EXISTS-FLAG = "Y"; /* set temp storage flg*/
    PK0YW01.PK0YW-MAX-PAGE = TA5REC.TA5TSQIX;
  else
    TA1REC.TA1LOCAT[1] = "WRI TS1";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = PK0YW02.PK0YW-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    PK0YS-POST-NO-ROLL(); /* post, no roll, non db2*/
  end

end // end PK0YS-WRI-TMP-STOR

// Sel VORHDR01/VOPPKH04 Order
Function XSPKS-SEL-ORDER-04()
   /*  */
   /* This statement is created to have the option to retrieve an order*/
   /* from the DORDER.VORHDR04 table (for facilities not interfacing*/
   /* with SAP yet) or from the DORDER.VOPPKH04 (for when a warehouse is*/
   /* interacting with SAP).  When the item data is from the VOPPKH01*/
   /* table, it needs to populate OP1REC (VORHDR01 copybook) to minimize*/
   /* the changes to the main program.*/
   /*  */
   /* Note that this process uses the common working record containing the*/
   /* warehouse code and so before this routine is added to the program,*/
   /* make sure it contains XX0XW03 copybook and that it is being*/
   /* populated with the correct warehouse code.*/
   /*  */
   /* DLVRUSA CHANGES BEGIN*/
   /* Changed the condition for the USA - NSC Go live*/
   /* IF XX0XW03.XWHCD NE '42';     /* If not Canada warehouse*/
   /*  */
  if (XX0XW03.XWHCD == "04" /* IF WAREHOUSE = 04,07,09,42,51*/
   || XX0XW03.XWHCD == "07" 
   || XX0XW03.XWHCD == "09" 
   || XX0XW03.XWHCD == "42" 
   || XX0XW03.XWHCD == "51")

    set VOPPKH04 empty;

    VOPPKH04.XWHCD = OP1REC.XWHCD;
    VOPPKH04.OP1PARTN = OP1REC.OP1PARTN;
    VOPPKH04.OP1CUOID = OP1REC.OP1CUOID;
    VOPPKH04.OP1NORID = OP1REC.OP1NORID;

    try
      call "VOPPKH04" ("S ", SQLCA, VOPPKH04) {isNoRefresh = yes, isExternal = yes};
    end
                                  /* Select VOPPKH04*/

    if (sysVar.errorCode == "00000000"
     && SQLCA.VAGen_SQLCODE == +0) /* Found*/

      set OP1REC empty;

        /* Populate OP1REC with VOPPKH04*/

      OP1REC.OP1PARTN = VOPPKH04.OP1PARTN;
      OP1REC.OP1CUOID = VOPPKH04.OP1CUOID;
      OP1REC.OP1NORID = VOPPKH04.OP1NORID;
      OP1REC.OB1XREFN = " ";
      OP1REC.KUCCOID = VOPPKH04.KUCCOID;
      OP1REC.KUMSTRID = VOPPKH04.KUMSTRID;
      OP1REC.XNXCD = VOPPKH04.XNXCD;
      OP1REC.XGPCD = VOPPKH04.XGPCD;
      OP1REC.OP1CMPNB = +0;
      OP1REC.OP1CUPO = VOPPKH04.OP1CUPO;
      OP1REC.OP1PORMF = " ";
      OP1REC.OP1ORDBY = " ";
      OP1REC.OP1TBREP = VOPPKH04.OP1TBREP;
      OP1REC.XDVCD = VOPPKH04.XDVCD;
      OP1REC.XBCCD = VOPPKH04.XBCCD;
      OP1REC.XSOCD = VOPPKH04.XSOCD;
      OP1REC.XOTCD = VOPPKH04.XOTCD;
      OP1REC.XOBCD = VOPPKH04.XOBCD;
      OP1REC.XOCCD = VOPPKH04.XOCCD;
      OP1REC.SP1ID = " ";
      OP1REC.SP6MDISC = +0;
      OP1REC.XWHCD = VOPPKH04.XWHCD;
      OP1REC.OP1OWHMF = " ";
      OP1REC.OP1CUNDT = VOPPKH04.OP1CUNDT;
      OP1REC.OP-ORIG-NEED-DT = +0;
      OP1REC.XOSCD = VOPPKH04.GR-ORD-STAT-CD;
      OP1REC.OP1OSADT = +0;
      OP1REC.OP1TDOF = " ";
      OP1REC.XTDPCT = +0;
      OP1REC.OP1TDFCP = +0;
      OP1REC.OP1TDBKP = +0;
      OP1REC.OP1PTOF = " ";
      OP1REC.XPTCD = " ";
      OP1REC.OP1AAOF = " ";
      OP1REC.XAAPCT = +0;
      OP1REC.OP1AAFCP = +0;
      OP1REC.OP1AABKP = +0;
      OP1REC.OP1COPOF = " ";
      OP1REC.XCPPCT = +0;
      OP1REC.OP1DFAOF = " ";
      OP1REC.XDAPCT = +0;
      OP1REC.XDSCD = VOPPKH04.XDSCD;
      OP1REC.OP-DIRSHP-DSCT-PCT = +0;
      OP1REC.SM1AGYID = VOPPKH04.SM1AGYID;
      OP1REC.SM4REPID = VOPPKH04.SM4REPID;
      OP1REC.OP-SREP-OVRD-FL = " ";
      OP1REC.OP1SWORD = +0;
      OP1REC.XBDCD = " ";
      OP1REC.OP1BLKID = +0;
      OP1REC.OP1NDRAW = +0;
      OP1REC.OP1COGID = +0;
      OP1REC.OP1BLAID = +0;
      OP1REC.OP1SGPAO = VOPPKH04.OP1SGPAO;
      OP1REC.OP1SHAID = VOPPKH04.KUMSHAID;
      OP1REC.OP1ODSKF = " ";
      OP1REC.OP1ENTDT = +0;
      OP1REC.OP1ORCDT = +0;
      OP1REC.OP1ENREP = +0;
      OP1REC.OP1CALDT = +0;
      OP1REC.OP-SND-CNFM-FL = " ";
      OP1REC.OP1DSBDT = VOPPKH04.OP1DSBDT;
      OP1REC.OP1DSADT = VOPPKH04.OP1DSADT;
      OP1REC.DN-PROD-INTR-DT = VOPPKH04.DN-PROD-INTR-DT;
      OP1REC.OP1NTMAL = VOPPKH04.OP1NTMAL;
      OP1REC.OP1ALSEQ = +0;
      OP1REC.OP1OALSQ = +0;
      OP1REC.OP1LALDT = +0;
      OP1REC.OP1DABDT = +0;
      OP1REC.OP1DRBDT = +0;
      OP1REC.XACCD = " ";
      /* MOVE VOPPKH04.XACCD TO OP1REC.XACCD*/
      OP1REC.OP1ASGCO = " ";
      OP1REC.XAHCD = " ";
      OP1REC.OP1ALHDT = +0;
      OP1REC.OP1PAHCD = " ";
      OP1REC.OP1ALRDT = +0;
      OP1REC.XAFCD = " ";
      OP1REC.OP1ALFDT = +0;
      OP1REC.KUNMAPCT = +0;
      OP1REC.OP1RSVF = " ";
      OP1REC.OP1WIPIN = " ";
      OP1REC.OP1EXPDF = VOPPKH04.OP1EXPDF;
      OP1REC.KUNNOSFL = " ";
      OP1REC.OP1ASHDF = " ";
      OP1REC.OP1ACNLF = " ";
      OP1REC.OP1SMSCF = " ";
      OP1REC.OP1TIERF = " ";
      OP1REC.OP1TLVLN = +0;
      OP1REC.OP1CPODT = +0;
      OP1REC.OP1BOFL = " ";
      OP1REC.XCHCD = " ";
      OP1REC.XCSCD = " ";
      OP1REC.OP1CSADT = +0;
      OP1REC.OP1CSATM = +0;
      OP1REC.OP1CRLMP = " ";
      OP1REC.OP1CRLMR = " ";
      OP1REC.OP1PCSCD = " ";
      OP1REC.OP1PCSDT = +0;
      OP1REC.OP1PCSTM = +0;
      OP1REC.OP1CCKOQ = +0;
      OP1REC.OP1CKAMT = +0;
      OP1REC.OP1DCHLD = +0;
      OP1REC.KUCVNDFL = " ";
      OP1REC.OP1VAUDT = +0;
      OP1REC.OP1VAUNB = " ";
      OP1REC.OP-LST-CR-CK-CO-ID = +0;
      OP1REC.XPACD = VOPPKH04.XPACD;
      OP1REC.KUFMIXBL = VOPPKH04.KUFMIXBL;
      OP1REC.KUCUNTCS = VOPPKH04.KUCUNTCS;
      OP1REC.XPKCD = VOPPKH04.XPKCD;
      OP1REC.XPPCD = VOPPKH04.XPPCD;
      OP1REC.TF1CARCD = VOPPKH04.TF1CARCD;
      OP1REC.OP1SSHPO = " ";
      OP1REC.OP1ECADT = +0;
      OP1REC.OP1ECANM = " ";
      OP1REC.OP1IVADT = +0;
      OP1REC.OP1PCNDT = +0;
      OP1REC.OP1CFMDT = +0;
      OP1REC.OP1IPIND = " ";
      OP1REC.OP1FTIND = VOPPKH04.OP1FTIND;
      OP1REC.OP1SHAMT = +0;
      OP1REC.OP1IFAMT = +0;
      OP1REC.XMDCD = " ";
      OP1REC.ZFC-CRCY-CD = VOPPKH04.ZFC-CRCY-CD;
      OP1REC.OP1OVALU = +0;
      OP1REC.OP1OTUNT = +0;
      OP1REC.OP1ALCQF = " ";
      OP1REC.OP1RSVQF = " ";
      OP1REC.OP1SHPQF = " ";
      OP1REC.OP1OSRID = +0;
      OP1REC.OP1ORADT = +0;
      OP1REC.XOMCD = " ";
      OP1REC.OP1OMDT = +0;
      OP1REC.OP1MTREP = +0;
      OP1REC.OP1SPLBF = VOPPKH04.OP1SPLBF;
      OP1REC.OP1SPINF = VOPPKH04.OP1SPINF;
      OP1REC.OP1SPHDF = VOPPKH04.OP1SPHDF;
      OP1REC.OP1OMCMF = " ";
      OP1REC.OP11TMSF = VOPPKH04.OP11TMSF;
      OP1REC.OP11TMBF = " ";
      OP1REC.XID-IVC-DIST-CD = VOPPKH04.XID-IVC-DIST-CD;
      OP1REC.DN-ORD-DIST-IND = " ";
      OP1REC.XDZ-DATA-DIST-CD = " ";
      OP1REC.ZZ-CS400-CHNG-DT = +0;
      OP1REC.ZZ-CS400-CHNG-HHMM = +0;
      OP1REC.ZZ-DS400-CHNG-DT = +0;
      OP1REC.ZZ-DS400-CHNG-HHMM = +0;
      OP1REC.ZZZSDT = +0;
      OP1REC.ZZZSTM = +0;
      OP1REC.ZZZCHGDT = +0;
      OP1REC.ZZZCHGTM = +0;
      OP1REC.ZZZCHGCT = +0;

    end

  else

    try
      call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
    end
                                  /* Select VORHDR01*/

  end
   /*  */
   /* DLVRUSA CHANGES END*/


end // end XSPKS-SEL-ORDER-04

// Select ord. for VITEM/VOPPKI
Function XSPKS-SELECT-ITEM()
   /*  */
   /* This statement is created to have the option to retrieve a line item*/
   /* from the DORDER.VITEM001 table (for facilities not interfacing*/
   /* with SAP yet) or from the DORDER.VOPPKI02 (for when a warehouse is*/
   /* interacting with SAP).  When the item data is from the VOPPKI02*/
   /* table, it needs to populate OP2REC (VITEM001 copybook) to minimize*/
   /* the changes to the main program.*/
   /*  */
   /* Note that this process uses the warehouse code from the warehouse*/
   /* table and so before this routine is added to the program, make sure*/
   /* it contains XX0XW03 copybook.*/
   /*  */


   /* DLVRUSA CHANGES BEGIN*/
   /* Changed the condition for the USA - NSC Go live*/
   /* IF XX0XW03.XWHCD NE '42';     /* If not Canada warehouse*/
   /*  */
  if (XX0XW03.XWHCD == "04" /* IF WAREHOUSE = 04,07,09,42,51*/
   || XX0XW03.XWHCD == "07" 
   || XX0XW03.XWHCD == "09" 
   || XX0XW03.XWHCD == "42" 
   || XX0XW03.XWHCD == "51")

    if (XX0XW05.OPPKFUNC == "S "
     || XX0XW05.OPPKFUNC == "SS")
      set VOPPKI02 empty;

      VOPPKI02.XWHCD = XX0XW03.XWHCD;
      VOPPKI02.OP1PARTN = OP2REC.OP1PARTN;
      VOPPKI02.OP1CUOID = OP2REC.OP1CUOID;
      VOPPKI02.OP1NORID = OP2REC.OP1NORID;
    end

    try
      call "VOPPKI02" (XX0XW05, SQLCA, VOPPKI02) {isNoRefresh = yes, isExternal = yes};
    end
                                  /* Select VOPPKI021*/

    if (sysVar.errorCode == "00000000"
     && SQLCA.VAGen_SQLCODE == +0) /* Found*/

      if (XX0XW05.OPPKFUNC == "S "
       || XX0XW05.OPPKFUNC == "SN")
        set OP2REC empty;

        /* Populate OP2REC with VOPPKI02*/

        OP2REC.OP1PARTN = VOPPKI02.OP1PARTN;
        OP2REC.OP1CUOID = VOPPKI02.OP1CUOID;
        OP2REC.OP1NORID = VOPPKI02.OP1NORID;
        OP2REC.OP2LNINB = VOPPKI02.OP2LNINB;
        OP2REC.OP2CPLNB = VOPPKI02.OP2CPLNB;
        OP2REC.XGPCD = VOPPKI02.XGPCD;
        OP2REC.SY1STNBR = VOPPKI02.SY1STNBR;
        OP2REC.SY2CLRID = VOPPKI02.SY2CLRID;
        OP2REC.XDMCD = VOPPKI02.XDMCD;
        OP2REC.KUIPRDID = VOPPKI02.KUIPRDID;
        OP2REC.XUMCD = VOPPKI02.XUMCD;
        OP2REC.XOWCD = VOPPKI02.XOWCD;
        OP2REC.OP2PRDSF = " ";
        OP2REC.OP2SSTYN = " ";
        OP2REC.OP2SCLCD = " ";
        OP2REC.OP2SDMCD = " ";
        OP2REC.OP2SUBQT = +0;
        OP2REC.OPRBNOID = +0;
        OP2REC.OP2TDRWQ = +0;
        OP2REC.OP2CGPCD = VOPPKI02.OP2CGPCD;
        OP2REC.OP2KSTYF = " ";
        OP2REC.OP2GTSZF = " ";
        OP2REC.XEGCD = VOPPKI02.XEGCD;
        OP2REC.PC2INSEG = VOPPKI02.PC2INSEG;
        OP2REC.XPGCD = VOPPKI02.XPGCD;
        OP2REC.XBK-BK-SESN-CD = " ";
        OP2REC.OP-BK-YR = +0;
        OP2REC.OP-BK-MO = +0;
        OP2REC.OP2MSCDP = +0;
        OP2REC.OP2PGRPF = " ";
        OP2REC.OP2FSTFL = " ";
        OP2REC.XQACD = VOPPKI02.XQACD;
        OP2REC.OP2LNIST = " ";
        OP2REC.OP2LNSDT = +0;
        OP2REC.XBRCD = " ";
        OP2REC.XDNCD = " ";
        OP2REC.XRSCD = " ";
        OP2REC.XAFCD = " ";
        OP2REC.OP1ALFDT = +0;
        OP2REC.OP1BOFL = " ";
        OP2REC.XHDCD[1] = VOPPKI02.XHDCD[1];
        OP2REC.XHDCD[2] = VOPPKI02.XHDCD[2];
        OP2REC.XHDCD[3] = VOPPKI02.XHDCD[3];
        OP2REC.XHDCD[4] = VOPPKI02.XHDCD[4];
        OP2REC.XHDCD[5] = VOPPKI02.XHDCD[5];
        OP2REC.XHDCHG = +0;
        OP2REC.OP2HCHGO = " ";
        OP2REC.PWRLBCD[1] = VOPPKI02.PWRLBCD[1];
        OP2REC.PWRLBCD[2] = VOPPKI02.PWRLBCD[2];
        OP2REC.OP-CUST-LABL-PRTFL = VOPPKI02.OP-CUST-LABL-PRTFL;
        OP2REC.XOMCD = " ";
        OP2REC.XMTCD = " ";
        OP2REC.OP2OMQTY = +0;
        OP2REC.OP2OMDT = +0;
        OP2REC.OP1MTREP = +0;
        OP2REC.OP2GBLOF = " ";
        OP2REC.OP2PRCOF = " ";
        OP2REC.OP2PRCVF = " ";
        OP2REC.OP2TOBKQ = +0;
        OP2REC.OP2TORGQ = +0;
        OP2REC.OP2TONOQ = +0;
        OP2REC.OP2TALCQ = +0;
        OP2REC.OP2TOHRQ = +0;
        OP2REC.OP2TWIPQ = +0;
        OP2REC.OP2TSHPQ = +0;
        OP2REC.OP2TCNLQ = +0;
        OP2REC.OP2AUPRC = VOPPKI02.OP2AUPRC;
        OP2REC.OP2LNIVL = +0;
        OP2REC.OP2NSIZE = +0;
        OP2REC.XDZ-DATA-DIST-CD = " ";
        OP2REC.ZZ-CS400-CHNG-DT = +0;
        OP2REC.ZZ-CS400-CHNG-HHMM = +0;
        OP2REC.ZZ-DS400-CHNG-DT = +0;
        OP2REC.ZZ-DS400-CHNG-HHMM = +0;
        OP2REC.ZZZSDT = +0;
        OP2REC.ZZZSTM = +0;
        OP2REC.ZZZCHGDT = +0;
        OP2REC.ZZZCHGTM = +0;
        OP2REC.ZZZCHGCT = +0;

      end

    end

  else

    try
      call "IO0440" (XX0XW05, SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
    end
                                  /* Select VITEM001*/
  end
   /*  */
   /* DLVRUSA CHANGES END*/


end // end XSPKS-SELECT-ITEM

//*** RECORD=PK0YW00 ****
// JCL variable storage for PK0Y - PICKING On-Demand Cust Lbl
// ***********************
Record PK0YW00 type basicRecord
  10 PK0YW-PGM-NAME PK0YW-PGM-NAME ; 
  10 PK0YW-PROC-NAME PK0YW-PROC-NAME ; 
  10 PK0YWSYS PK0YWSYS ; 
  10 PK0YW-RUN-TYPE PK0YW-RUN-TYPE ; 
  10 PK0YMGEN PK0YMGEN ; 
  10 PK0YMCPY PK0YMCPY ; 
  10 PK0YW-FORMS-CD PK0YW-FORMS-CD ; 
  10 PK0YWCTP PK0YWCTP ; 
  10 PK0YWPRM PK0YWPRM ; 
  10 PK0YWJCL PK0YWJCL ; 
  10 PK0YW-XGP-GPC-CD PK0YW-XGP-GPC-CD ; 
  10 PK0YW-PK-LABL-CD PK0YW-PK-LABL-CD ; 
  10 PK0YW-CUSTOMER PK0YW-CUSTOMER ; 
  10 PK0YW-VALID-CUSTLABL PK0YW-VALID-CUSTLABL ; 
  10 PK0YW-SELECT-ALL PK0YW-SELECT-ALL ; 
end // end PK0YW00

//*** RECORD=PK0YW01 ****
// Working storage for PK0Y - PICKING On-Demand Customer Labels
//  07/30/96 mmcgol added fields map-inuse and op-case-lot-nbr
// ***********************
Record PK0YW01 type basicRecord
  10 XXXRVNBR XXXRVNBR ; 
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 XBCCD XBCCD ; 
  10 XBCDESC XBCDESC ; 
  10 PK0YW-KEY PK0YW-KEY ; 
    15 PK0YW-KEY1 PK0YW-KEY1 ; 
    15 PK0YW-KEY2 PK0YW-KEY2 ; 
  10 PK0YW-SEL-CD PK0YW-SEL-CD ; 
  10 PK0YW-SEL-MADE-FLAG PK0YW-SEL-MADE-FLAG ; 
  10 PK0YW-JOB-SUBMITTED-FLAG PK0YW-JOB-SUBMITTED-FLAG ; 
  10 PK0YW-MORE-SIZES PK0YW-MORE-SIZES ; 
  10 PK0YW-SIZE-MATCHED-FLAG PK0YW-SIZE-MATCHED-FLAG ; 
  10 PK0YW-EOF-ITEMS PK0YW-EOF-ITEMS ; 
  10 PK0YW-ERROR-FLAG PK0YW-ERROR-FLAG ; 
  10 PK0YW-HEADER-ERROR PK0YW-HEADER-ERROR ; 
  10 PK0YW-TS-EXISTS-FLAG PK0YW-TS-EXISTS-FLAG ; 
  10 PK0YW-MAP-INUSE PK0YW-MAP-INUSE ; 
  10 PK0YW-POST-KEY PK0YW-POST-KEY ; 
  10 PK0YW-CUST-LABL-KEY PK0YW-CUST-LABL-KEY ; 
  10 KUCCOID KUCCOID ; 
  10 PK0YW-KUCCOID PK0YW-KUCCOID ; 
  10 PK0YM-LABEL-CODE PK0YM-LABEL-CODE ; 
  10 PK0YW-LABL-SUB PK0YW-LABL-SUB ; 
  10 PK0YW-MAX-PAGE PK0YW-MAX-PAGE ; 
  10 PK0YW-PAGE-NBR PK0YW-PAGE-NBR ; 
  10 PK0YW-SUBSCRIPT PK0YW-SUBSCRIPT ; 
  10 PK0YW-SUBSCRIPT2 PK0YW-SUBSCRIPT2 ; 
  10 PK0YW-TABLE-INDEX PK0YW-TABLE-INDEX ; 
  10 PK0YW-SIZE-SUB PK0YW-SIZE-SUB ; 
  10 PK0YW-KEY-CHGD PK0YW-KEY-CHGD ; 
  10 PK0YW-OP-NIKE-ORD-ID PK0YW-OP-NIKE-ORD-ID ; 
  10 PK0YW-CUST-ORD-ID PK0YW-CUST-ORD-ID ; 
    15 * num(8) ; 
    15 PK0YW-PART-CHAR PK0YW-PART-CHAR ; 
  10 PK0YW-PRINTER-SAVE-ID PK0YW-PRINTER-SAVE-ID ; 
  10 PK0YW-OP-CASE-LOT-NBR PK0YW-OP-CASE-LOT-NBR ; 
  10 PK0YW-SIZE-QTY PK0YW-SIZE-QTY [40] ; 
    15 PK0YW-SY5SZID PK0YW-SY5SZID ; 
    15 PK0YW-SY4IDDSC PK0YW-SY4IDDSC ; 
    15 PK0YW-OP-ON-ORD-QTY PK0YW-OP-ON-ORD-QTY ; 
    15 PK0YW-OP-ALOC-QTY PK0YW-OP-ALOC-QTY ; 
  10 PK0YW-HOLD-SY5SZID PK0YW-HOLD-SY5SZID [5] ; 
  10 PK0YW-SY-STY-NBR PK0YW-SY-STY-NBR ; 
  10 PK0YWUID PK0YWUID ; 
  10 PK0YW-PERCENT-DIFFERENCE PK0YW-PERCENT-DIFFERENCE ; 
  10 PK0YW-EXTRA-TICK-PERCENT PK0YW-EXTRA-TICK-PERCENT ; 
  10 PK0YW-NEW-PRINT-QTY PK0YW-NEW-PRINT-QTY ; 
  10 PK0YW-OLD-PRINT-QTY PK0YW-OLD-PRINT-QTY ; 
  10 PK0YW-DATE PK0YW-DATE ; 
    15 PK0YW-YY PK0YW-YY ; 
    15 PK0YW-MM PK0YW-MM ; 
    15 PK0YW-DD PK0YW-DD ; 
  10 PK0YW-TIME PK0YW-TIME ; 
    15 PK0YW-HOURS PK0YW-HOURS ; 
    15 * char(1) ; 
    15 PK0YW-MINUTES PK0YW-MINUTES ; 
    15 * char(1) ; 
    15 PK0YW-SECONDS PK0YW-SECONDS ; 
  10 PK0YW-JOB-NAME PK0YW-JOB-NAME ; 
    15 PK0YW-SYS-PREFIX PK0YW-SYS-PREFIX ; 
    15 PK0YW-DATE-TIME-SUMM PK0YW-DATE-TIME-SUMM ; 
end // end PK0YW01

//*** RECORD=PK0YW02 ****
// *    Temp Storage Record used to hold picking label info
// *    associated with products for an order.
// *
// *    CSP Record: PK0YW02
// *
// *    File Name:  PKF1
// *
// *    Data From:  DORDER.VITEM001
// *                DORDER.VOSIZE01
// *                DPICK.VZLABL01
// *
// *    Loaded in:  PK0Y
// *
// *    Displayed:  PK0Y
// *
// *    Statement Groups: PK0YS-PRG-TMP-STOR
// *                      PK0YS-RED-TMP-STOR
// *                      PK0YS-WRI-TMP-STOR
// *                      PK0YS-UPD-TMP-STOR
// *
// ***********************
Record PK0YW02 type basicRecord
  5 PK0YW-TS-GROUP PK0YW-TS-GROUP ; 
    10 PK0YW-TS-LENGTH PK0YW-TS-LENGTH ; 
    10 PK0YW-TS-ROW PK0YW-TS-ROW [11] ; 
      15 PK0YM-SEL-CD PK0YM-SEL-CD ; 
      15 PK0YM-LABEL-STOCK PK0YM-LABEL-STOCK ; 
        20 PK0YM-LABEL-STK-CNSTNT PK0YM-LABEL-STK-CNSTNT ; 
        20 PK0YM-LABEL-STK-NBR PK0YM-LABEL-STK-NBR ; 
          25 * char(2) ; 
          25 PK0YM-LBL-STK-LAST-NBR PK0YM-LBL-STK-LAST-NBR ; 
      15 PK-LABL-CD PK-LABL-CD ; 
      15 XHD-HNDL-CD XHD-HNDL-CD ; 
      15 XGP-GPC-CD XGP-GPC-CD ; 
      15 XDM-DIM-CD XDM-DIM-CD ; 
      15 XQA-QUAL-CD XQA-QUAL-CD ; 
      15 XUM-UOM-CD XUM-UOM-CD ; 
      15 SY-STY-NBR SY-STY-NBR ; 
      15 SY-COLR-CD-ID SY-COLR-CD-ID ; 
      15 SY4IDDSC SY4IDDSC ; 
      15 PK0YM-OP-LINE-ITEM-STAT PK0YM-OP-LINE-ITEM-STAT ; 
      15 PK0YM-ON-ORD-QTY PK0YM-ON-ORD-QTY ; 
      15 PK0YM-OP-ALOC-QTY PK0YM-OP-ALOC-QTY ; 
      15 PK0YM-PRINT-QTY PK0YM-PRINT-QTY ; 
      15 PK0YW-UOM-NBR PK0YW-UOM-NBR ; 
      15 PK0YW-TICKET-QTY PK0YW-TICKET-QTY ; 
      15 SY5SZID SY5SZID ; 
      15 PK0YW-OP-LINE-ITEM-NBR PK0YW-OP-LINE-ITEM-NBR ; 
end // end PK0YW02

//*** RECORD=PK0YW03 ****
// Customer labels by Order
// request Parameters  (L) wpk4761
// 09/03/1996  mmcgol  added caselot-nbr to record
// ***********************
Record PK0YW03 type basicRecord
  10 PK0YW-JCL PK0YW-JCL ; 
    15 XWHCD XWHCD ; 
    15 PK0YW-PK-ORD-STKTF-ID PK0YW-PK-ORD-STKTF-ID ; 
    15 PK0YW-OP-NIKE-ORD-ID PK0YW-OP-NIKE-ORD-ID ; 
    15 PK0YW-CU-CO-ID PK0YW-CU-CO-ID ; 
    15 PK0YW-CU-STOR-ID PK0YW-CU-STOR-ID ; 
    15 PK0YM-XNX-DEPT-ID-XREF PK0YM-XNX-DEPT-ID-XREF ; 
    15 PK0YM-LABEL-CODE PK0YM-LABEL-CODE ; 
    15 XGP-GPC-CD XGP-GPC-CD ; 
    15 SY-STY-NBR SY-STY-NBR ; 
      20 PK0YW-OP-LINE-ITEM-NBR PK0YW-OP-LINE-ITEM-NBR ; 
      20 * char(2) ; 
    15 SY-COLR-CD-ID SY-COLR-CD-ID ; 
    15 XDM-DIM-CD XDM-DIM-CD ; 
    15 XQA-QUAL-CD XQA-QUAL-CD ; 
    15 XUM-UOM-CD XUM-UOM-CD ; 
    15 PK0YW-SY-SZ-ID PK0YW-SY-SZ-ID ; 
    15 PK0YW-PRINT-QTY PK0YW-PRINT-QTY ; 
    15 PK0YW-ORIG-PRINT-QTY PK0YW-ORIG-PRINT-QTY ; 
    15 OP-CASE-LOT-NBR char(12) ; // op-case-lot-nbr
end // end PK0YW03

//*** RECORD=PK0YW04 ****
// Customer labels by PRICE
// request Parameters  (L) wpk9991
// ***********************
Record PK0YW04 type basicRecord
  10 PK0YW-JCL PK0YW-JCL ; 
    15 XWHCD XWHCD ; 
    15 PK0YW-PRICE PK0YW-PRICE ; 
    15 PK0YW-QUANTITY PK0YW-QUANTITY ; 
    15 PK0YW-PRICE-FLAG PK0YW-PRICE-FLAG ; 
    15 * char(63) ; 
end // end PK0YW04

//*** RECORD=PK0YW99 ****
// System internal reader queue (INTR) record definition .
// ***********************
Record PK0YW99 type serialRecord  {
  fileName = "INTR"
  }
  10 PK0YWJCL PK0YWJCL ; 
end // end PK0YW99

//*** RECORD=PK0YW9E ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the EXEC procedure name (PK0YWEXE).
// ***********************
Record PK0YW9E type basicRecord // VAGen Info - redefined PK0YW99
  10 * char(15) ; 
  10 PK0YWEXE PK0YWEXE ; 
  10 * char(59) ; 
end // end PK0YW9E

Record PK0YW9F type basicRecord // VAGen Info - redefined PK0YW99
  10 * char(24) ; 
  10 PK0YWFRM PK0YWFRM ; 
  10 * char(55) ; 
end // end PK0YW9F

//*** RECORD=PK0YW9J ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the JOB name user identification (PK0YWUID).
// ***********************
Record PK0YW9J type basicRecord // VAGen Info - redefined PK0YW99
  10 * char(2) ; 
  10 PK0YWUID PK0YWUID ; 
  10 * char(16) ; 
  10 PK0YWEXE PK0YWEXE ; 
  10 * char(48) ; 
end // end PK0YW9J

//*** RECORD=PK0YW9L ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the LABEL output class (PK0YWOUT).
// ***********************
Record PK0YW9L type basicRecord // VAGen Info - redefined PK0YW99
  10 * char(21) ; 
  10 PK0YWOUT PK0YWOUT ; 
  10 * char(58) ; 
end // end PK0YW9L

//*** RECORD=PK0YW9M ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the print destination procedure parameter.
// ***********************
Record PK0YW9M type basicRecord // VAGen Info - redefined PK0YW99
  10 * char(21) ; 
  10 PK0YMRMT PK0YMRMT ; 
  10 PK0YMDST PK0YMDST ; 
  10 * char(55) ; 
end // end PK0YW9M
//*** RECORD=PK0YW9P ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the parmmbr of the vsam file idcams statements
// ***********************
Record PK0YW9P type basicRecord // VAGen Info - redefined PK0YW99
  10 * char(24) ; 
  10 PK0YWPRM PK0YWPRM ; 
  10 * char(48) ; 
end // end PK0YW9P

//*** RECORD=PK0YW9Q ****
// ------------------------------------------------------------
// This record is a redefinition of the PK0YW99 statement.
// It is used to define the columns to be used to insert the
// EOJ online message information for JCL procedure TA9911.
// ------------------------------------------------------------
// ***********************
Record PK0YW9Q type basicRecord // VAGen Info - redefined PK0YW99
  10 PK0YW-MSGID PK0YW-MSGID ; 
  10 PK0YW-EIBRM PK0YW-EIBRM ; 
  10 * char(5) ; 
  10 PK0YW-JOBID PK0YW-JOBID ; 
  10 * char(6) ; 
  10 PK0YW-USRID PK0YW-USRID ; 
  10 * char(4) ; 
  10 PK0YW-MM PK0YW-MM ; 
  10 * char(1) ; 
  10 PK0YW-DD PK0YW-DD ; 
  10 * char(1) ; 
  10 PK0YW-YY PK0YW-YY ; 
  10 * char(4) ; 
  10 PK0YW-HR PK0YW-HR ; 
  10 * char(1) ; 
  10 PK0YW-MIN PK0YW-MIN ; 
  10 * char(22) ; 
end // end PK0YW9Q

Record PK0YW9T type basicRecord // VAGen Info - redefined PK0YW99
  10 * char(13) ; 
  10 PK0YWLS1 PK0YWLS1 ; 
  10 * char(9) ; 
  10 PK0YMREM PK0YMREM ; 
  10 * char(6) ; 
  10 PK0YWLS2 PK0YWLS2 ; 
  10 * char(47) ; 
end // end PK0YW9T

//*** RECORD=VOPPKH04 ****
// ************************************************************
//   this is the csp record for the header records to be passed
//   to picking. this is for orders allocated on-line.
// 
// 
// db2 table:             dorder.voppkh01
// 
// copylib member:        dcl00284
// 
// i/o module:            io1650
// 
// key to table:          xwhcd
//                        op1partn
//                        op1cuoid
//                        op1norid
// 
// date created:          june 4, 1987
// 
// maintenance log:
// 
//   date    init.    description
// --------  ------   -----------------------------------------
// 06/04/87  jvande   original table creation.
// 11/09/89  craine   db2 changes - removed op1frtof and xftcd
//                    ophgroup size changed from 434 to 431
// 03/29/90  ssteph   db2 changes - removed in7stins & in7spins
//                    added xbccd
// 06/11/90  BWATSO   Added XOBCD, XDSCD, and OP1FTIND.
// 02/11/91  dmeier   added kucmxynt, kucuntcd, kufmixbx xpacd
// 03/04/91  dharri   db2 chgs - delecte kucmxynt
// 02-21-94  gcalki   db2 changes
//                    add:dn-prod-intr-dt
//                    add:xxx-addr 1-6
//                    add:zfc-crcy-cd
//                    add:xid-ivc-dist-cd
// ************************
Record VOPPKH04 type basicRecord
  5 VOPPKH04-GROUP VOPPKH04-GROUP ; 
    10 XWHCD XWHCD ; 
    10 OP1KEY OP1KEY ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
    10 PK4STKTF PK4STKTF ; 
    10 OP1NTMAL OP1NTMAL ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 XGPCD XGPCD ; 
    10 XDVCD XDVCD ; 
    10 XBCCD XBCCD ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1TBREP OP1TBREP ; 
    10 XSOCD XSOCD ; 
    10 SM1AGYID SM1AGYID ; 
    10 SM4REPID SM4REPID ; 
    10 OP11TMSF OP11TMSF ; 
    10 OP1SPHDF OP1SPHDF ; 
    10 OP1SPLBF OP1SPLBF ; 
    10 OP1SPINF OP1SPINF ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 OP1DSADT OP1DSADT ; 
    10 OP1DSBDT OP1DSBDT ; 
    10 DN-PROD-INTR-DT DN-PROD-INTR-DT ; 
    10 PK1DALDT PK1DALDT ; 
    10 PK1HLDCD PK1HLDCD ; 
    10 XPACD XPACD ; 
    10 KUFMIXBL KUFMIXBL ; 
    10 KUCUNTCS KUCUNTCS ; 
    10 XPKCD XPKCD ; 
    10 XPPCD XPPCD ; 
    10 XOTCD XOTCD ; 
    10 XOBCD XOBCD ; 
    10 XOCCD XOCCD ; 
    10 XDSCD XDSCD ; 
    10 OP1FTIND OP1FTIND ; 
    10 SP1ID SP1ID ; 
    10 OP1SGPAO OP1SGPAO ; 
    10 KUMSHAID KUMSHAID ; 
    10 XOWCD XOWCD ; 
    10 IN7STQDT IN7STQDT ; 
    10 IN7STLDT IN7STLDT ; 
    10 IN7STTWH IN7STTWH ; 
    10 TF1CARCD TF1CARCD ; 
    10 TF2DSTCD TF2DSTCD ; 
    10 PK4CARSP PK4CARSP ; 
    10 OP5ALTNM OP5ALTNM ; 
    10 XXX-ADDR1 XXX-ADDR1 ; 
      15 XXXADDR1 XXXADDR1 ; 
      15 * char(8) ; 
    10 XXX-ADDR2 XXX-ADDR2 ; 
      15 XXXADDR2 XXXADDR2 ; 
      15 * char(8) ; 
    10 XXX-ADDR3 XXX-ADDR3 ; 
      15 XXXADDR3 XXXADDR3 ; 
      15 * char(8) ; 
    10 XXX-ADDR4 XXX-ADDR4 ; 
      15 XXXADDR4 XXXADDR4 ; 
      15 * char(8) ; 
    10 XXX-ADDR5 XXX-ADDR5 ; 
      15 XXXADDR5 XXXADDR5 ; 
      15 * char(8) ; 
    10 XXX-ADDR6 XXX-ADDR6 ; 
      15 XXXADDR6 XXXADDR6 ; 
      15 * char(8) ; 
    10 XXXCITY XXXCITY ; 
    10 XSTCD XSTCD ; 
    10 XXXZIP XXXZIP ; 
    10 VOPPKH04-XXX-ALT-ADDR1 VOPPKH04-XXX-ALT-ADDR1 ; 
    10 VOPPKH04-XXX-ALT-ADDR2 VOPPKH04-XXX-ALT-ADDR2 ; 
    10 VOPPKH04-XXX-ALT-ADDR3 VOPPKH04-XXX-ALT-ADDR3 ; 
    10 XXX-ALT-CITY XXX-ALT-CITY ; 
    10 XXX-ALT-ST-CD XXX-ALT-ST-CD ; 
    10 XXX-ALT-ZIP XXX-ALT-ZIP ; 
    10 PK-XCT-CTRY-CD PK-XCT-CTRY-CD ; 
    10 XCTCD XCTCD ; 
    10 PK4PLNDT PK4PLNDT ; 
    10 PK4OTWGT PK4OTWGT ; 
    10 OP1OTUNT OP1OTUNT ; 
    10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
    10 PK4ITEMS PK4ITEMS ; 
    10 OP1EXPDF OP1EXPDF ; 
    10 PK4ORHLD PK4ORHLD ; 
    10 OPHALOPF OPHALOPF ; 
    10 XID-IVC-DIST-CD XID-IVC-DIST-CD ; 
    10 CU-EXPT-FL CU-EXPT-FL ; 
    10 OP-SAME-DAY-FL OP-SAME-DAY-FL ; 
    10 XACCD XACCD ; 
    10 PK-SAP-SLS-DOC-NBR PK-SAP-SLS-DOC-NBR ; 
    10 PK-SAP-CUST-NBR PK-SAP-CUST-NBR ; 
    10 PK-SAP-LOAD-NBR PK-SAP-LOAD-NBR ; 
    10 SR-DC-REC-STAT-IND SR-DC-REC-STAT-IND ; 
    10 GR-ORD-STAT-CD GR-ORD-STAT-CD ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VOPPKH04

//*** RECORD=VOPPKI02 ****
// ************************************************************
//   this is the csp record for order items that need to go to
//   picking. this is for items allocated on-line.
// 
// 
// db2 table:               dorder.voppki01
// 
// copylib member:          dcl00285
// 
// i/o module:              io1660
// 
// key to db2 table:        xwhcd
//                          op1partn
//                          op1cuoid
//                          op1norid
//                          op2lninb
// 
// date created:            june 4, 1987
// 
// maintenance log:
// 
//   date    init.   description
// --------  ------  ------------------------------------------
// 06/04/87  jvande  original record creation
// 02/11/91  dmeier  replaced xsdcd with pc2insegcd
//                   replaced xsacd with xegcd
//                   added xhdcd and yblcd
// 03/04/91  dharri  db2 chgs - added op2cplnb
// 06/08/92  dharri  db2 chgs - added OP-CUST-LABL-PRTFL AND
//                      NAME CHG TO pwrlbcd from ylbcd.
// 02-21-94  gcalki  db2 chgs
//                   resize:op-avg-unit-prc
// ************************
Record VOPPKI02 type basicRecord
  5 VOPPKI02-GROUP VOPPKI02-GROUP ; 
    10 XWHCD XWHCD ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP2CPLNB OP2CPLNB ; 
    10 OP2LNINB OP2LNINB ; 
    10 OP1NTMAL OP1NTMAL ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 OP2CGPCD OP2CGPCD ; 
    10 XQACD XQACD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XEGCD XEGCD ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 XOWCD XOWCD ; 
    10 XHDCD XHDCD [5] ; 
    10 PWRLBCD PWRLBCD [2] ; 
    10 OP-CUST-LABL-PRTFL OP-CUST-LABL-PRTFL ; 
    10 KUIPRDID KUIPRDID ; 
    10 SY1UNPCS SY1UNPCS ; 
    10 PK5TIWT PK5TIWT ; 
    10 PK5TIQTY PK5TIQTY ; 
    10 OP2AUPRC OP2AUPRC ; 
    10 OP3ALQT OP3ALQT [40] ; 
    10 SR-DC-REC-STAT-IND SR-DC-REC-STAT-IND ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VOPPKI02

//*** RECORD=VORCPX02 ****
//  *********** ORDER BATCH CUST XREF OVERRIDES ***************
// 
//  DB2 TABLE:           DORDER.VORCPX02
// 
//  COPYLIB MEMBER:      DORCPX02
// 
//  I/O MOD:             VORCPX02
// 
//  KEY TO DB2 TABLE:    OP-ORD-PART-ID
//                       OP-CUST-ORD-ID
//                       OP-CU-PO-LINE-NBR
// 
//  DATE CREATED:        06/18/96
// 
//  MAINTENANCE LOG:
// 
//    DATE    INIT.      COMMENT
//  --------  -----      --------------------------------------
//  06-18-96  WLEONG     INITIAL RECORD CREATION
// 
// ************************
Record VORCPX02 type basicRecord
  5 VORCPX02-GRP VORCPX02-GRP ; 
    10 OP-ORD-PART-CHAR OP-ORD-PART-CHAR ; 
    10 OP-CUST-ORD-ID OP-CUST-ORD-ID ; 
    10 OP-CU-PO-LINE-NBR OP-CU-PO-LINE-NBR ; 
    10 OP-SMPL-RQT-ID OP-SMPL-RQT-ID ; 
    10 CU-CUST-PROD-ID CU-CUST-PROD-ID ; 
    10 CU-PROD-COLR-NM CU-PROD-COLR-NM ; 
    10 CU-PROD-SZ-ID CU-PROD-SZ-ID ; 
    10 SY-STY-NBR SY-STY-NBR ; 
    10 SY-COLR-CD-ID SY-COLR-CD-ID ; 
    10 XDM-DIM-CD XDM-DIM-CD ; 
    10 SY-SZ-ID SY-SZ-ID ; 
    10 CU-BUY-SESN-ID CU-BUY-SESN-ID ; 
    10 CU-COST-ID CU-COST-ID ; 
    10 OP-CASE-LOT-NBR OP-CASE-LOT-NBR ; 
    10 CU-OVRD-EXISTS-FL CU-OVRD-EXISTS-FL ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VORCPX02

//*** RECORD=XX0XW05 ****
// ************************************************************
// 
//   ***** working record for order/item/size retrieval *****
// 
// ************************************************************
// 
// Overview :
//            This record is the working record used by
//            the CSP order, item, size retrieval - for
//            use by XX0XS-SELECT-ORDER.
// 
// Maintenance History :
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          04-19-00  HKEMPE  Created.
// ***********************
Record XX0XW05 type basicRecord
  5 OPPKFUNC OPPKFUNC ; 
end // end XX0XW05

DataItem PK0YM-LABEL-CODE char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YM-LABEL-STK-CNSTNT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YM-LABEL-STK-NBR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YM-LABEL-STOCK char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YM-LBL-STK-LAST-NBR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YM-ON-ORD-QTY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0YM-OP-ALOC-QTY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0YM-OP-LINE-ITEM-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// print quantity
DataItem PK0YM-PRINT-QTY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map selection
DataItem PK0YM-SEL-CD char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// came from 'b'atch or 'o'nline.
DataItem PK0YM-XNX-DEPT-ID-XREF num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Number of copies to print
DataItem PK0YMCPY num(1)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YMDST char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Print from generation number
DataItem PK0YMGEN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YMREM char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Default printer destination
DataItem PK0YMRMT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer company id
DataItem PK0YW-CU-CO-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// customer store id
DataItem PK0YW-CU-STOR-ID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YW-CUST-LABL-KEY char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CUST ORD ID
DataItem PK0YW-CUST-ORD-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// used for internal table search
DataItem PK0YW-CUSTOMER num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0YW-DATE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record yy
DataItem PK0YW-DATE-TIME-SUMM num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record dd
DataItem PK0YW-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wta0230-eibtrmid
DataItem PK0YW-EIBRM char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map selection
DataItem PK0YW-EOF-ITEMS char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NIKE user identification
DataItem PK0YW-ERROR-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YW-EXTRA-TICK-PERCENT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Forms code.
DataItem PK0YW-FORMS-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NIKE user identification
DataItem PK0YW-HEADER-ERROR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_SZ_ID
DataItem PK0YW-HOLD-SY5SZID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record mm
DataItem PK0YW-HOURS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record hours
DataItem PK0YW-HR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0YW-JCL char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YW-JOB-NAME char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YW-JOB-SUBMITTED-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NIKE job identification
DataItem PK0YW-JOBID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YW-KEY char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YW-KEY-CHGD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YW-KEY1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0YW-KEY2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CU_CO_ID
DataItem PK0YW-KUCCOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// used for internal table search
DataItem PK0YW-LABL-SUB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0YW-MAP-INUSE char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YW-MAX-PAGE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record minutes
DataItem PK0YW-MIN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record dd
DataItem PK0YW-MINUTES num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record mm
DataItem PK0YW-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0YW-MORE-SIZES char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WTA0230-MSG-REGION-ID
DataItem PK0YW-MSGID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YW-NEW-PRINT-QTY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0YW-OLD-PRINT-QTY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0YW-OP-ALOC-QTY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YW-OP-CASE-LOT-NBR char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YW-OP-LINE-ITEM-NBR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NIKE ORD ID
DataItem PK0YW-OP-NIKE-ORD-ID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0YW-OP-ON-ORD-QTY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YW-ORIG-PRINT-QTY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0YW-PAGE-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0YW-PART-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NIKE user identification
DataItem PK0YW-PERCENT-DIFFERENCE num(6,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// application name
DataItem PK0YW-PGM-NAME char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// used for internal table search
DataItem PK0YW-PK-LABL-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YW-PK-ORD-STKTF-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0YW-POST-KEY num(13)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0YW-PRICE num(6,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0YW-PRICE-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YW-PRINT-QTY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0YW-PRINTER-SAVE-ID num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// EXEC procedure name
DataItem PK0YW-PROC-NAME char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YW-QUANTITY num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Type of picking run
DataItem PK0YW-RUN-TYPE char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work record yy
DataItem PK0YW-SECONDS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map selection
DataItem PK0YW-SEL-CD char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YW-SEL-MADE-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust found in int tbl search
DataItem PK0YW-SELECT-ALL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YW-SIZE-MATCHED-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YW-SIZE-QTY char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YW-SIZE-SUB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0YW-SUBSCRIPT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0YW-SUBSCRIPT2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0YW-SY-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_SZ_ID
DataItem PK0YW-SY-SZ-ID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_SZ_ID_DESC
DataItem PK0YW-SY4IDDSC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// SY_SZ_ID
DataItem PK0YW-SY5SZID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record mm
DataItem PK0YW-SYS-PREFIX char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YW-TABLE-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0YW-TICKET-QTY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0YW-TIME char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YW-TS-EXISTS-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// REVISION NUMBER
DataItem PK0YW-TS-GROUP char(807)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH_WHSE_CD
DataItem PK0YW-TS-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0YW-TS-ROW char(73)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YW-UOM-NBR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NIKE user identification
DataItem PK0YW-USRID char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust found in int tbl search
DataItem PK0YW-VALID-CUSTLABL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// used for internal table search
DataItem PK0YW-XGP-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work record yy
DataItem PK0YW-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Case Type (full/repack)
DataItem PK0YWCTP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// EXEC procedure name
DataItem PK0YWEXE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YWFRM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YWLS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0YWLS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NIKE user identification
DataItem PK0YWOUT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parmlib (member name) variable
DataItem PK0YWPRM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl - program id
DataItem PK0YWSYS char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NIKE user identification
DataItem PK0YWUID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// oph record group
DataItem VOPPKH04-GROUP char(661)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// home address 1
DataItem VOPPKH04-XXX-ALT-ADDR1 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// home address 2
DataItem VOPPKH04-XXX-ALT-ADDR2 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// home address 1
DataItem VOPPKH04-XXX-ALT-ADDR3 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// opirec group level
DataItem VOPPKI02-GROUP char(271)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end
// vcugrp01 group level
DataItem VORCPX02-GRP char(141)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

