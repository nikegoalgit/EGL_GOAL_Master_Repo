package pk0k;
import al.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import dg.common.*;
import in1.common.*;
import ku.common.*;
import ob.common.*;
import op.common.*;
import pc.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import gd00.GD00M;
//*** PROGRAM=PK0K ****
// ************************************************************
// * applid:    pk0k    select order
// *                       update
// ************************************************************
// * maint log
// *  when      who     what
// *-------- -------- -----------------------------------------
// *09/10/87  bnaber  original creation of program
// *06/22/88  jcampb  add lookup to batch de-allocation tbl
// *                  to see if request entered - if so dont
// *                  allow order to be added
// *11/29/88  JWOOD   ADDED NONCSP OPT TO CALLS
// *11/29/88  JWOOD   ADDED XSSEGTR LOGIC
// *07/21/89  Jcampb  changed xfer from "pkoi" to pk09
// *02/12/91  BGOFF   Added logic for pk_sel_typ_ind and
// *                  pk_prv_ful_cs_qty and pk_prv_repk_qty
// *                  added logic for warehouse '51'
// *                  and switched warning msgs to go before
// *                  updates
// *03/05/91  SBEAUC  Changed references from PKA-items to
// *                  XHR-items due to table changes.
// *03/19/90  BGOFF   Take out build schedule,change map title
// *                  and add special handling flag.
// *04/06/91  jcampb  make sure subscript pk0kwsb5 > 0 and >
// *                  max array value when entering pk0ksv3
// *09/03/91  SHENDE  -PK0KSQ0 never got past the first item in
//                    table dpick.vpooli01.  Fixed by initial-
//                    izing index before each loop.  Also,
//                    program went through loop one extra time
//                    repeating last item.  Fixed by switching
//                    "if not end" condition with fetch dpick.
//                    vpooli01 to catch end flag.
//                    -Added tf_carr_cd to PK0KW03 and moved it
//                    into pkhrec for dpick.vselor01.
// *09/23/91  SHENDE  -Moved pk_sel_ind to pool header table to
//                    indicate if item has been selected or
//                    de-selected.
// *10/10/91  Jcampb  table changes
// *10/11/91  SHENDE  Allow warehouse '07' to be transfered to
//                    this appl. from PW0V rather than to PK07.
// *10/24/91  SHENDE  Set selection type code to 10 for b-grade
//                    spcl hndl, 11 for b-grade non-spcl hndl
//                    and 12 for closeouts spcl hndl, 13 for
//                    closeouts non-spcl hndl in PK0KSU7.
// *12/09/91  SHENDE  Fix so garbage numbers aren't moved onto
//                    the map at beginning.  Also, changed so
//                    qty is from itm qty not calculating from
//                    sy_units_per_cs.
// *12/18/91  SHENDE  Change so that division code remains the
//                    same rather than using pkwrec.xdvcd.
// *01/14/92  SHENDE  Set spcl hndl flag using sel typ code 5,
//                    6, 10, 11, 12, 13.  Also, changed so that
//                    an order will not be allowed to be added
//                    if pk_sel_ind = 'd'.
// *03/09/92  SHENDE  Add xbc-brand-code (xbccd) for March
//                    table changes. Dpick.vselor01 table
// *03/16/92  SHENDE  Add whse 02 and 04 as valid whse to PF3
//                    back to PW0V.
// *04/21/92  SHENDE  Move '14' or '15' to pk-sel-typ-ind for
//                    in-store promo orders.
// *05/16/92  SHENDE  Changed error msg in PK0KSU2,SU3,SU3 from
// *                  #105 to #226.
// *09/14/92  SHENDE  Move DNSB date to pkhrec when selected.
// *09/24/92  SHENDE  Allow 1000 orders to be displayed.
// *03/12/93  WTATE   INITIALIZE PK0KSB5 INDEX.
// *07/28/93  RCREAM  Changed PF3 logic in PK0TST0 to allow the
//                    transfer to PW0V.
// *08/11/95  cbrine  CANADA Added XCTCD to PKWREC
// *04/15/97  PANDER  Do not allow Basics orders (XOTCD = 'FV')
//                    to be selected.
// *04/10/98  kviswa  Added DNSB checking for orders which are
//                    on pool and also for orders which are
//                    not on pool
// *05/12/00  MARBUC  MODIFY PK0KS-GET-VORHDR01 to perform
// *                   XX0XS-SELECT-ORDER instead of calling
// *                   IO0430
// *                  Add XX0XW03 and OPHREC to Record/Table
// *                   list
// *04/05/01  RNUNNA  MODIFY PK0KS-GET-VORHDR01 to perform
//                     XSPKS-SELECT-ORDER instead of
//                     XX0XS-SELECT-ORDER.
// ************************************************************
// *********************
Program PK0K type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  ALHREC ALHREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  OP1REC OP1REC; // record
  OPHREC OPHREC; // record
  PK0KW01 PK0KW01; // record
  PK0KW02 PK0KW02; // record
  PK0KW03 PK0KW03; // record
  PK4REC PK4REC; // record
  PK5REC PK5REC; // record
  PK9REC PK9REC; // record
  PKBREC PKBREC; // record
  PKHREC PKHREC; // record
  PKWREC PKWREC; // record
  PKYREC PKYREC; // record
  PWIREC PWIREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  XX0XW03 XX0XW03; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use XPPTBL {deleteAfterUse = yes}; // table
  use XOTTBL; // table
  use PK0KM.PK0KM001 // form
   {
    helpKey = pf1,
    pfKeyEquate = no
  };
  use GD00M {
    helpGroup = yes,
    helpKey = pf1,
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PK0K010: PK0K010();
    goto PK0K010;
  end // end main
end // end PK0K

// program control
Function PK0K010()
   /* *********************************************************/
   /* * this process controls entire program process control **/
   /* * transfer to other applications occurs in converse    **/
   /* *********************************************************/

  if (PK0KW01.PK0KWERSW == "Y") /* set error sw*/
    PK0KW01.PK0KWFL1 = "N";

    while (PK0KW01.PK0KWFL1 == "N")
      PK0K200();
      PK0KW01.PK0KWERSW = "N"; /* set error sw*/
    end

  end

  set PKYREC empty;

  XPPK001(); /* check picking security*/

  PK0KM001.XWHCD = PKWREC.XWHCD;

  if (PKWREC.PKWARRAY == " ")
    /* next sentence*/
  else
    PKYREC.PKWARRAY = PKWREC.PKWARRAY;
  end

  PK0K100(); /* init pgm areas*/



      /* control pgm converse*/

  PK0KW01.PK0KWFL1 = "N";

  while (PK0KW01.PK0KWFL1 == "N")
    PK0K200();
  end



   /* ************************************************************/
end // end PK0K010

// program initialization
Function PK0K100()



      /* *********************************************************/
      /* * init program areas                                   **/
      /* *********************************************************/



  set PKBREC empty;
  set PKHREC empty;
  set PK4REC empty;
  set PK9REC empty;
  set TA1REC empty;
  set SQLCA empty;
  set PK0KW01 empty;
  set PK0KW03 empty;
  set ERRSQLCA empty;
  TA1REC.TA1MAP = "PK0KM001";
  PK0KM001.XWHCD = PKWREC.XWHCD;

  if (COMMAREA.CAFROMAP == "PW0W") /* from pick planning menu*/
    PKWREC.PKWSELSW = "PP";
  else
    if (COMMAREA.CAFROMAP == "PW0V") /* from picking selection menu*/
      PKWREC.PKWSELSW = "PK";
    end
  end

      /* init map*/

  PK0KSO1();
                                   /* fill up screen for first time thru*/



   /* ************************************************************/
end // end PK0K100

// process map
Function PK0K200()



      /* *********************************************************/
      /* * this process controls the converse for the map and   **/
      /* * the processing of the map                            **/
      /* *********************************************************/



   /* ************************************************************/
  converse PK0KM001 ;
   /* ************************************************************/



  PK0KSA0(); /* process conversed screen pk0km001*/


   /* ************************************************************/
end // end PK0K200

// Get OP1REC VIA IO For VORHDR01
Function PK0KS-GET-VORHDR01()


  set SQLCA empty;
  set OP1REC empty;
     /* Get DORDER.VORHDR01 using OP1REC*/
  OP1REC.OP1CUOID = PK4REC.PK1CUOID;
  OP1REC.OP1NORID = PK4REC.PK1NORID;
  PK0KW01.PK0KWNUM = PK4REC.PK1CUOID;
  OP1REC.OP1PARTN = PK0KW01.PK0KWPRT;

  /* dlvrusa start*/

  XX0XW03.XWHCD = PK0KM001.XWHCD;
  OP1REC.XWHCD = PK0KM001.XWHCD;

   /* START ADDED  05/12/00  SAP ACCESS OTP FOR 42 AND ORDER FOR ALL OTHER*/
  /* XX0XS-SELECT-ORDER;*/
  XSPKS-SELECT-ORDER();
   /* CALL IO0430 'S ',SQLCA,OP1REC (NOMAPS,NONCSP;*/
   /* END   ADDED  05/12/00  SAP*/

  /* dlvrusa end*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* continue*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      PK0KW03.PK0KMACT[PK0KWSB4] = " ";
      /* SET PK0KW03.XPPCD(PK0KWSB4)    ;*/
      /* SET PK0KW03.PK1CUOID(PK0KWSB4) ;*/
      /* SET PK0KW03.PK1NORID(PK0KWSB4) ;*/
      set PK0KM001.PK0KMACT[PK0KWSB4] cursor, bold;
      set PK0KM001.PK1CUOID[PK0KWSB4] bold;
      set PK0KM001.PK1NORID[PK0KWSB4] bold;
      converseLib.validationFailed(520);
      PK0KW01.PK0KWERSW = "Y"; /* set error sw*/
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "PK0K    ";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1LOCAT[1] = "PK0KS-GE";
      TA1REC.TA1LOCAT[2] = "T-VORHDR";
      TA1REC.TA1LOCAT[3] = "01 IO043";
      TA1REC.TA1LOCAT[4] = "0 S     ";
      TA1REC.TA1DBASE = "DORDER  ";
      TA1REC.TA1TBLVU = "VORHDR01";
      TA1REC.TA1TBLKE = PK4REC.PK4KEY;

      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};

      COMMAREA.CAUSERA = " ";
      XSPF4();
      exit program;
    end
  end

end // end PK0KS-GET-VORHDR01

// validate the date
Function PK0KS-VALID-DATE()
   /* ------------------------------------------------------------*/
   /* validate DNSB date "to"*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* gregorian date*/
  TA2REC.TA2GRTYP = "G"; /* type*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD < 888)         /* subroutine completed*/


  else

    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "DNSB TO DATE";

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    TA1REC.TA1PGMNO = "S01"; /* Module identification*/
    converseLib.validationFailed(29); /* System error occurred*/

    exit stack; /* exit to display map*/

  end


end // end PK0KS-VALID-DATE

// Get OP1REC VIA IO For VORHDR01
Function PK0KS-VALID-DNSB()

  if (PK0KM001.PK0KMTMM != 0
   && PK0KM001.PK0KMTDD != 0
   && PK0KM001.PK0KMTYY >= 0) /* NE CHANGED TO GE*/
    PK0KW01.PK0KMTMM = PK0KM001.PK0KMTMM; /* move to compare field*/
    PK0KW01.PK0KMTDD = PK0KM001.PK0KMTDD;
    PK0KW01.PK0KMTYY = PK0KM001.PK0KMTYY;

    if (PK0KW01.PK0KMTYY > 50
     && PK0KW01.PK0KMTYY <= 99)

      PK0KW01.PK0KMTCC = 19;
    else
      PK0KW01.PK0KMTCC = 20;
    end

    set TA2REC empty;
    TA2REC.TA2GRGGN = PK0KW01.PK0KMTDT;
    PK0KS-VALID-DATE(); /* Validate the date*/

    if (TA2REC.TA2RTNCD != 0)
      TA1REC.TA1LOC = "510";
      PK0KW01.PK0KWERSW = "Y"; /* set error sw*/
      converseLib.validationFailed(158);
      PK0KW03.PK0KMACT[PK0KWSB4] = " ";
      /* SET PK0KW03.XPPCD(PK0KWSB4)    ;*/
      /* SET PK0KW03.PK1CUOID(PK0KWSB4) ;*/
      /* SET PK0KW03.PK1NORID(PK0KWSB4) ;*/
      set PK0KM001.PK0KMTMM cursor, bold;
      set PK0KM001.PK0KMTDD bold;
      set PK0KM001.PK0KMTYY bold;
      exit stack;
    end

  end

  if (PK0KW01.PK0KMTDT != 0
   && OP1REC.OP1DSBDT != 0)
    if (OP1REC.OP1DSBDT > PK0KW01.PK0KMTDT)
      PK0KW03.PK0KMACT[PK0KWSB4] = " ";
      /* SET PK0KW03.XPPCD(PK0KWSB4)    ;*/
      /* SET PK0KW03.PK1CUOID(PK0KWSB4) ;*/
      /* SET PK0KW03.PK1NORID(PK0KWSB4) ;*/
      set PK0KM001.PK0KMACT[PK0KWSB4] cursor, bold;
      set PK0KM001.PK1CUOID[PK0KWSB4] bold;
      set PK0KM001.PK1NORID[PK0KWSB4] bold;
      converseLib.validationFailed(519);
      PK0KW01.PK0KWERSW = "Y"; /* set error sw*/
      exit stack;
    end
  end

end // end PK0KS-VALID-DNSB

// default priority code
Function PK0KS10()


         /* default priority code to normal (30) if blank*/


  if (converseVar.validationMsgNum == 171) /* s(selection) action cannot be mixed*/
    return;
  else
    PK0KW01.PK0KWSB2 = 24;
    PK0KW01.PK0KWCT2 = PK0KW01.PK0KWSB1; /* store high sub for table*/
    PK0KW01.PK0KWSB3 = PK0KW01.PK0KWSB1 - 25;
    PK0KW01.PK0KWCT1 = PK0KW01.PK0KWSB3; /* store start sub in table*/
    PK0KW01.PK0KWSB3 = PK0KW01.PK0KWSB3 + PK0KW01.PK0KWSB2;

    while (PK0KW01.PK0KWSB2 >= 1)

      if (PK0KM001.PK0KMACT[PK0KWSB2] == "S")
          /* next sentence*/
      else
        if (PK0KM001.PK0KMACT[PK0KWSB2] > " "
         || PK0KM001.XPPCD[PK0KWSB2] != PK0KW02.XPPCD[PK0KWSB3]
         || PK0KM001.PK1CUOID[PK0KWSB2] != PK0KW02.PK1CUOID[PK0KWSB3]
         || PK0KM001.PK1NORID[PK0KWSB2] != PK0KW02.PK1NORID[PK0KWSB3])
          if (PK0KM001.PK0KMACT[PK0KWSB2] == "D")
               /* next sentence*/
          else
            if (PK0KM001.XPPCD[PK0KWSB2] == "  ")
              PK0KM001.XPPCD[PK0KWSB2] = "30";
            end
          end
        end
      end

      PK0KW01.PK0KWSB2 = PK0KW01.PK0KWSB2 - 1;
      PK0KW01.PK0KWSB3 = PK0KW01.PK0KWSB3 - 1;

    end

    PK0KW01.PK0KWSB1 = PK0KW01.PK0KWCT2; /* restore high sub for table*/
    PK0KW01.PK0KWSB3 = PK0KW01.PK0KWCT1; /* restore start sub in table*/

  end


end // end PK0KS10

// check deletes
Function PK0KS65()
   /* ---------------------------------------------------------*/
   /* check for deletes only.*/
   /* ---------------------------------------------------------*/

  if ("D" in PK0KM001.PK0KMACT)
    if ("A" in PK0KM001.PK0KMACT
     || "C" in PK0KM001.PK0KMACT)

      return;

    else

      PK0KW01.PK0KWARN = "Y";

    end
  end


end // end PK0KS65

// set warning flag
Function PK0KS66()
   /* ---------------------------------------------------------*/
   /* check if fields changed before setting warning flag*/
   /* ---------------------------------------------------------*/

  if (PK0KM001.PK0KMACT[PK0KWSB4] == "A" /* add*/
   || PK0KM001.PK0KMACT[PK0KWSB4] == "C") /* or change*/

    if (PK0KM001.PK0KMACT[PK0KWSB4] == PK0KW03.PK0KMACT[PK0KWSB4]
     && PK0KM001.XPPCD[PK0KWSB4] == PK0KW03.XPPCD[PK0KWSB4]
     && PK0KM001.PK1CUOID[PK0KWSB4] == PK0KW03.PK1CUOID[PK0KWSB4]
     && PK0KM001.PK1NORID[PK0KWSB4] == PK0KW03.PK1NORID[PK0KWSB4])

      PK0KW01.PK0KWARN = "Y"; /* warnings displayed flag*/

    else

      PK0KW03.PK0KMACT[PK0KWSB4] = PK0KM001.PK0KMACT[PK0KWSB4];
      PK0KW03.XPPCD[PK0KWSB4] = PK0KM001.XPPCD[PK0KWSB4];
      PK0KW03.PK1CUOID[PK0KWSB4] = PK0KM001.PK1CUOID[PK0KWSB4];
      PK0KW03.PK1NORID[PK0KWSB4] = PK0KM001.PK1NORID[PK0KWSB4];

      PK0KW01.PK0KWARN = "N"; /* warnings displayed flag*/

    end
  end


end // end PK0KS66

// check pf keys
Function PK0KSA0()



   /* stop indiscriminate button pressing......*/




  if (converseVar.eventKey is pf3  /* send to pk07 menu*/
   || converseVar.eventKey is pf14 /* pk0m 'ot sel' transfer*/
   || converseVar.eventKey is pf15 /* pk0l 'cust sel' transfer*/
   || converseVar.eventKey is pf16 /* pk01 'p&h sel' transfer*/
   || converseVar.eventKey is pf18 /* pk0i 'hold' transfer*/
   || converseVar.eventKey is pf19 /* pk0s 'plan' transfer*/
   || converseVar.eventKey is pf20) /* pk0a 'pick' transfer*/

    PK0KST0(); /* Transfer to another application*/

  else

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      XSPF1(); /* Exit to the HELP facility*/

      PK0KM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
      converseLib.validationFailed(); /* Force error*/
    else
      if (converseVar.eventKey is pf4) /* PF4 was pressed*/
        XSPF4(); /* Exit to system main menu*/

        PK0KM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
        converseLib.validationFailed(); /* Force alarm to sound*/
      else
        if (converseVar.eventKey is pa2) /* PA2 was pressed*/
          PKWREC.XWHCD = PK0KM001.XWHCD;
          COMMAREA.XWHCD = PK0KM001.XWHCD;
          COMMAREA.CACURRAP = " ";
          COMMAREA.CATOAP = "PK0K";
          if (PK0KM001.XWHCD == "51")
            COMMAREA.CACURRAP = "PW0V";
          else
            COMMAREA.CAFRMSYS = "PK";
          end
          COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
          XSEXIT();
          PK0KM001.VAGen_EZEMSG = COMMAREA.CAMSG;
          COMMAREA.CATOAP = " ";
        else
          if (converseVar.eventKey is pf7  /* scroll backwards*/
           || converseVar.eventKey is pf8  /* scroll forward*/
           || converseVar.eventKey is pf12 /* test the water for errors*/
           || converseVar.eventKey is enter) /* enter..*/
             /* their choice of buttons was valid*/
            PK0KSI0(); /* edit screen and check pfkeys*/
          else
            converseLib.validationFailed(12);
             /* invalid pfkey*/
          end
        end
      end
    end
  end



end // end PK0KSA0

// edit screen
Function PK0KSE0()


         /* edit sreen*/



  PK0KSE8();
                                   /* s(selection) action cannot be mixed*/
                                     /* with update functions*/

                                     /* PRM (11/17/87)*/
  PK0KS10();
                                   /* default priority to normal if blank*/


  if (converseVar.validationMsgNum == 171) /* s(selection) action cannot be mixed*/
      /* next sentence                 with udpate functions*/
  else
    PK0KW01.PK0KWSB2 = 24;
    PK0KW01.PK0KWCT2 = PK0KW01.PK0KWSB1; /* store high sub for table*/
    PK0KW01.PK0KWSB3 = PK0KW01.PK0KWSB1 - 25;
    PK0KW01.PK0KWCT1 = PK0KW01.PK0KWSB3; /* store start sub in table*/
    PK0KW01.PK0KWSB3 = PK0KW01.PK0KWSB3 + PK0KW01.PK0KWSB2;

    while (PK0KW01.PK0KWSB2 >= 1)

      if (PK0KM001.PK0KMACT[PK0KWSB2] == "S")
          /* next sentence*/
      else
        if (PK0KM001.PK0KMACT[PK0KWSB2] > " "
         || PK0KM001.XPPCD[PK0KWSB2] != PK0KW02.XPPCD[PK0KWSB3]
         || PK0KM001.PK1CUOID[PK0KWSB2] != PK0KW02.PK1CUOID[PK0KWSB3]
         || PK0KM001.PK1NORID[PK0KWSB2] != PK0KW02.PK1NORID[PK0KWSB3])
          if (PK0KM001.PK0KMACT[PK0KWSB2] == "D")
               /* next sentence*/
          else
            PK0KSE2(); /* order number required*/
            PK0KSE3(); /* edit order*/
          end
          PK0KSE6(); /* check ord num if change or delete*/
          if (PK0KM001.PK0KMACT[PK0KWSB2] == "D")
               /* next sentence*/
          else
            PK0KSE5(); /* pick priority edit*/
            PK0KSE7(); /* edit activity column*/
          end
        end
      end

      PK0KW01.PK0KWSB2 = PK0KW01.PK0KWSB2 - 1;
      PK0KW01.PK0KWSB3 = PK0KW01.PK0KWSB3 - 1;

    end
           /* vvvvvvvvvvvvvvv ?????????????*/
    PK0KW01.PK0KWSB1 = PK0KW01.PK0KWCT2;
                                   /* restore high sub for table*/
    PK0KW01.PK0KWSB3 = PK0KW01.PK0KWCT1;
                                   /* restore start sub in table*/

  end



end // end PK0KSE0

// same day pick pool edit
Function PK0KSE2()


         /* order number required*/



  if (PK0KM001.PK1CUOID[PK0KWSB2] == 0)
    set PK0KM001.PK1CUOID[PK0KWSB2] cursor, bold;
    converseLib.validationFailed(194);
       /* order number not on pick pool*/
  end


end // end PK0KSE2

// Edit for order number
Function PK0KSE3()
   /* ****************************************************************/
         /* order on hold edit*/
   /* ****************************************************************/


  if (PK0KM001.PK0KMACT[PK0KWSB2] == "A")
    set PKBREC empty;
    TA1REC.TA1LOCAT[2] = "PK0KSE3";
    PKBREC.XWHCD = PK0KM001.XWHCD;
    PKBREC.PK1CUOID = PK0KM001.PK1CUOID[PK0KWSB2];
    PKBREC.PK1NORID = PK0KM001.PK1NORID[PK0KWSB2];
    PKBREC.XHRCD = "*";

    PK0KSU1(); /* get current date*/

    XSPKBS1(); /* select set and select next pkbrec*/

    if (SQLCA.VAGen_SQLCODE == -911)
      /* data base contention <try again>*/
      converseLib.validationFailed(028); /* data base in use*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        XSPKBC1(); /* close set*/
      else
        PK0KSE4(); /* check release date on records*/
        XSPKBC1(); /* close set*/
      end
    end

  end

   /* ****************************************************************/
   /* Edit for orders which have already been picked up by the*/
   /* batch job.*/
   /* Edit for 'Basics' orders.*/
   /* ****************************************************************/

  if (PK0KM001.PK0KMACT[PK0KWSB2] == "A")
    set PK4REC empty;
    TA1REC.TA1LOCAT[2] = "PK0KSE3";
    PK4REC.XWHCD = PK0KM001.XWHCD;
    PK4REC.PK1CUOID = PK0KM001.PK1CUOID[PK0KWSB2];
    PK4REC.PK1NORID = PK0KM001.PK1NORID[PK0KWSB2];

    try
      call "IO1720" ("S ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
    end /* Select unique*/

    if (SQLCA.VAGen_SQLCODE == 0)
      if (PK4REC.PK4SLIND == "D")
        set PK0KM001.PK0KMACT[PK0KWSB2] cursor, bold;
        converseLib.validationFailed(411); /* Order picked for selection already*/
      end
      if (PK4REC.XOTCD == "FV")
        set PK0KM001.PK0KMACT[PK0KWSB2] cursor, bold;
        converseLib.validationFailed(501); /* Basics order not available to select*/
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1PGMNM = "RETN";
        TA1REC.TA1LOCAT[1] = "IO1720 ";
        TA1REC.TA1LOCAT[2] = "SELECT ";
        TA1REC.TA1LOCAT[3] = "ROW    ";
        TA1REC.TA1DBASE = "DPICK  ";
        TA1REC.TA1TBLVU = "VPOOLH01";
        TA1REC.TA1TBLKE = PK4REC.PK4KEY;
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        move SQLCA to ERRSQLCA withV60Compat;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        XSPF4();
      end
    end
  end




end // end PK0KSE3

// check release hold date
Function PK0KSE4()


         /* check order hold release date*/



  TA1REC.TA1LOCAT[2] = "PK0KSE4";

  while (SQLCA.VAGen_SQLCODE == 0)

    if (PKBREC.PKBRELDT > TA2REC.TA2GRGGN)
      set PK0KM001.PK1CUOID[PK0KWSB2] cursor, bold;
      set PK0KM001.PK1NORID[PK0KWSB2] bold;
      converseLib.validationFailed(169);
          /* order number is on hold*/
    end

    XSPKBF1(); /* xelect next tf1rec record*/

  end



end // end PK0KSE4

// pick priority edit
Function PK0KSE5()


      /* pick priority edit*/


  if (PK0KM001.XPPCD[PK0KWSB2] != "  ")
    if (PK0KM001.XPPCD[PK0KWSB2] in XPPTBL.XPPCD)
      if (XPPTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        converseLib.validationFailed(195);
         /* inactive pick priority*/
        set PK0KM001.XPPCD[PK0KWSB2] cursor, bold;
      end
    else
      set PK0KM001.XPPCD[PK0KWSB2] cursor, bold;
      converseLib.validationFailed(80);
          /* invalid pick priority*/
    end
  end



end // end PK0KSE5

// check if order number changed
Function PK0KSE6()



    /* check if order number has been changed on a delete or add*/



  if (PK0KM001.PK0KMACT[PK0KWSB2] == "C"
   || PK0KM001.PK0KMACT[PK0KWSB2] == "D")
    if (PK0KM001.PK1CUOID[PK0KWSB2] == PK0KW02.PK1CUOID[PK0KWSB3]
     && PK0KM001.PK1NORID[PK0KWSB2] == PK0KW02.PK1NORID[PK0KWSB3])
        /* next sentence*/
    else
      if (PK0KW02.PK1CUOID[PK0KWSB3] == 0)
          /* next sentence*/
      else
        set PK0KM001.PK1CUOID[PK0KWSB2] cursor, bold;
        set PK0KM001.PK1NORID[PK0KWSB2] bold;
        PK0KM001.PK1CUOID[PK0KWSB2] = PK0KW02.PK1CUOID[PK0KWSB3];
        PK0KM001.PK1NORID[PK0KWSB2] = PK0KW02.PK1NORID[PK0KWSB3];
        converseLib.validationFailed(170);
          /* on a c(change) or d(delete) order number cannot be changed*/
      end
    end
  end



end // end PK0KSE6

// edit activity column
Function PK0KSE7()


         /* edit activity column*/


  if (PK0KM001.PK0KMACT[PK0KWSB2] == "A"
   || PK0KM001.PK0KMACT[PK0KWSB2] == "C"
   || PK0KM001.PK0KMACT[PK0KWSB2] == "D"
   || PK0KM001.PK0KMACT[PK0KWSB2] == "S"
   || PK0KM001.PK0KMACT[PK0KWSB2] == "V"
   || PK0KM001.PK0KMACT[PK0KWSB2] == " ")

    if (PK0KM001.PK0KMACT[PK0KWSB2] != "A"
     && PK0KW02.XPPCD[PK0KWSB3] == " "
     && PK0KW02.PK1CUOID[PK0KWSB3] == 0
     && PK0KW02.PK1NORID[PK0KWSB3] == 0)
      converseLib.validationFailed(191);
        /* a(add) only allowed on this line*/
      set PK0KM001.PK0KMACT[PK0KWSB2] cursor, bold;
    end

  else
    converseLib.validationFailed(35);
    /* invalid action code*/
    set PK0KM001.PK0KMACT[PK0KWSB2] cursor, bold;
  end



end // end PK0KSE7

// selection update function edit
Function PK0KSE8()


         /* selection and update functions cannot be mixed*/


  PK0KW01.PK0KMACT = "S";

  if (PK0KW01.PK0KMACT in PK0KM001.PK0KMACT)
    PK0KW01.PK0KWSB4 = 24;

    while (PK0KW01.PK0KWSB4 >= 1)

      if (PK0KM001.PK0KMACT[PK0KWSB4] == "S"
       || PK0KM001.PK0KMACT[PK0KWSB4] == "V"
       || PK0KM001.PK0KMACT[PK0KWSB4] == " ")
          /* next sentence*/
      else
        converseLib.validationFailed(171);
         /* selection and update actions cannot be requested at the*/
         /* same time*/
        set PK0KM001.PK0KMACT[PK0KWSB4] cursor, bold;
      end

      PK0KW01.PK0KWSB4 = PK0KW01.PK0KWSB4 - 1;

    end
  end



end // end PK0KSE8

// pf7, pf8 ,pf12 and enter
Function PK0KSI0()


         /* pf7, pf8, pf12 and enter*/



  PK0KSI1(); /* set fields to normal*/

  if (PK0KM001.XWHCD != PK0KW01.XWHCD)
    PK0KSO1();
  else
    if (PK0KM001.PK0KMCON != PK0KW01.PK0KMCON
     || PK0KM001.PK0KMNON != PK0KW01.PK0KMNON)
      PK0KSS1(); /* find order number scroll*/
      if (converseVar.validationMsgNum != 164)
        PK0KSO4(); /* scroll forward*/
      end
    else
      set PK0KM001.PK0KMCON normal;
      set PK0KM001.PK0KMNON normal;
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf8)
        PK0KSS0(); /* process pf7 and pf8 keys*/
        PK0KSO4(); /* scroll forward or backward*/
      else
        PK0KSE0(); /* edit screen*/
        if (converseVar.validationMsgNum > 0)
             /* next sentence*/
        else
          if (converseVar.eventKey is pf12)
            converseLib.validationFailed(106);
               /* all edits passed - press <enter> to process data*/
          else

            PK0KSU6(); /* display warning messages if any*/
            PK0KSO9();

            if (PK0KW01.PK0KWARN == "Y") /* warnings given*/

              PK0KSU0(); /* update data base*/
              PK0KW01.PK0KWARN = "N";
              PK0KW01.PK1CUOID = PK0KM001.PK1CUOID[1];
              PK0KW01.PK1NORID = PK0KM001.PK1NORID[1];
              PK0KSO2(); /* rebuild scrolling table*/
              PK0KSO5(); /* find proper spot in table*/
              PK0KSO4(); /* rebuild online screen*/
              PK0KW01.PK0KWSB1 = PK0KW01.PK0KWSB1 - 24;
              PK0KSO4(); /* rebuild online screen*/

            end
          end
        end
      end
    end
  end



end // end PK0KSI0

// set fields to normal
Function PK0KSI1()


         /* set fields to normal*/



  PK0KW01.PK0KWSB2 = 1;
  set PK0KM001.PK0KMCON cursor;
  set PK0KM001.XWHCD normal;
  if (PK0KM001.XWHCD == "02"
   || PK0KM001.XWHCD == "04"
   || PK0KM001.XWHCD == "07"
   || PK0KM001.XWHCD == "42"
   || PK0KM001.XWHCD == "51")
    set PK0KM001.PK0KMTMM normal;
    set PK0KM001.PK0KMTDD normal;
    set PK0KM001.PK0KMTYY normal;
  else
    set PK0KM001.PK0KMDNSB-LIT invisible, skip;
    set PK0KM001.PK0KMTMM noHighLight, skip;
    set PK0KM001.PK0KMTDD noHighLight, skip;
    set PK0KM001.PK0KMTYY noHighLight, skip;
  end

  while (PK0KW01.PK0KWSB2 <= 24)

    set PK0KM001.PK0KMACT[PK0KWSB2] normal;
    set PK0KM001.XPPCD[PK0KWSB2] normal;
    set PK0KM001.PK1CUOID[PK0KWSB2] normal;
    set PK0KM001.PK1NORID[PK0KWSB2] normal;

    PK0KW01.PK0KWSB2 = PK0KW01.PK0KWSB2 + 1;

  end



end // end PK0KSI1

// get warehouse code & validate
Function PK0KSO1()


         /* get warehouse code and validate*/



  set PK0KM001.XWHCD normal;
  PK0KM001.XXXCURDT = VGVar.currentShortGregorianDate;

  if (PK0KM001.XWHCD <= " "
   || PK0KM001.XWHCD == "99")
    converseLib.validationFailed(02);
      /* invalid warehouse code entered <please re-enter>*/
    PK0KM001.XWHABRV = " ";
    PK0KW01.XWHCD = " ";
    set PK0KM001.XWHCD cursor, bold;
  else
    if (PK0KM001.XWHCD in XWHTBL.XWHCD)
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        converseLib.validationFailed(03);
          /* invalid warehouse code entered <please re-enter>*/
        PK0KM001.XWHABRV = " ";
        PK0KW01.XWHCD = " ";
        set PK0KM001.XWHCD cursor, bold;
      else
        PK0KW01.XWHCD = PK0KM001.XWHCD;

        converseLib.clearScreen();
        set PK0KM001 initial;

        XXXCURDT = VGVar.currentShortGregorianDate;
        XXXRVNBR = "01";
        PK0KM001.PK0KMCON = PK0KW01.PK0KMCON;
        PK0KM001.XWHCD = PK0KW01.XWHCD;
        PKWREC.XWHCD = PK0KW01.XWHCD;

        PK0KM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];

        PK0KSO2(); /* set up scrolling table ;*/

        if (PKYREC.PK1CUOID[1] > 0)
          PK0KW01.PK1CUOID = PKYREC.PK1CUOID[1];
          PK0KW01.PK1NORID = PKYREC.PK1NORID[1];
          PK0KSO5(); /* scroll to proper spot in table*/
        else
          PK0KW01.PK0KWSB1 = 1; /* initialize scrolling index*/
        end

        PK0KSO4(); /* set up screen*/
        if (PKYREC.PK1CUOID[1] > 0)
          PK0KSO6(); /* show viewed and selected records*/
          set PKYREC empty;
        end
      end
    else
      converseLib.validationFailed(02);
        /* invalid warehouse code entered <please re-enter>*/
      PK0KM001.XWHABRV = " ";
      PK0KW01.XWHCD = " ";
      set PK0KM001.XWHCD cursor, bold;
    end
  end

  if (PK0KM001.XWHCD == "02"
   || PK0KM001.XWHCD == "04"
   || PK0KM001.XWHCD == "07"
   || PK0KM001.XWHCD == "42"
   || PK0KM001.XWHCD == "51")
    set PK0KM001.PK0KMTMM normal;
    set PK0KM001.PK0KMTDD normal;
    set PK0KM001.PK0KMTYY normal;
  else
    set PK0KM001.PK0KMDNSB-LIT invisible, skip;
    set PK0KM001.PK0KMTMM noHighLight, skip;
    set PK0KM001.PK0KMTDD noHighLight, skip;
    set PK0KM001.PK0KMTYY noHighLight, skip;
  end
  COMMAREA.XWHCD = PK0KM001.XWHCD;


end // end PK0KSO1

// set up scrolling table
Function PK0KSO2()


         /* set up scrolling table*/



  set PK0KW02 empty;
  TA1REC.TA1LOCAT[2] = "PK0KSA2";
  PKHREC.XWHCD = PK0KM001.XWHCD;
  PKHREC.PKURUNMD = " ";

  XSPKHS1(); /* select set and select next pkhrec*/

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(028); /* data base in use*/
    /* data base contention <try again>*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      PK0KM001.PK0KMCON = " ";
      XSPKHC1(); /* close set*/
      if (PK0KW01.PK0KWUPD == "Y"
       && converseVar.validationMsgNum == 0)
        converseLib.validationFailed(32); /* table updated sucessfully*/
      end
    else
      PK0KSO3(); /* set up scrolling table*/
      XSPKHC1(); /* close set*/
      if (PK0KW01.PK0KWUPD == "Y"
       && converseVar.validationMsgNum == 0)
        converseLib.validationFailed(32); /* table updated sucessfully*/
      end
    end
  end

  PK0KW01.PK0KWUPD = " ";


end // end PK0KSO2

// build scrolling table
Function PK0KSO3()
   /* ------------------------------------------------------*/
   /* build scrolling table*/
   /* ------------------------------------------------------*/

  TA1REC.TA1LOCAT[2] = "PK0KSO3";
  PK0KW01.PK0KWSB1 = 1;

  while (PK0KW01.PK0KWSB1 <= 1000)

    if (SQLCA.VAGen_SQLCODE == 100)
      PK0KW01.PK0KWSB1 = 1001;
    else
      PK0KW02.XWHCD[PK0KWSB1] = PKHREC.XWHCD;
      PK0KW02.PK1PRTN[PK0KWSB1] = PKHREC.PK1PRTN;
      PK0KW02.PK1CUOID[PK0KWSB1] = PKHREC.PK1CUOID;
      PK0KW02.PK1NORID[PK0KWSB1] = PKHREC.PK1NORID;
      PK0KW02.XPPCD[PK0KWSB1] = PKHREC.XPPCD;
      PK0KW02.XDVCD[PK0KWSB1] = PKHREC.XDVCD;
      PK0KW02.XBCCD[PK0KWSB1] = PKHREC.XBCCD;

       /* ----- SPECIAL HANDLING ------------*/
      if (PKHREC.PK-SEL-TYP-CD == " 5"
       || PKHREC.PK-SEL-TYP-CD == "10"
       || PKHREC.PK-SEL-TYP-CD == "12"
       || PKHREC.PK-SEL-TYP-CD == "14")

        PK0KW02.OP1SPHDF[PK0KWSB1] = "Y";

      else
         /* ----- NON-SPECIAL HANDLING -------*/
        if (PKHREC.PK-SEL-TYP-CD == " 6"
         || PKHREC.PK-SEL-TYP-CD == "11"
         || PKHREC.PK-SEL-TYP-CD == "13"
         || PKHREC.PK-SEL-TYP-CD == "15")

          PK0KW02.OP1SPHDF[PK0KWSB1] = "N";
        end
      end

      PK0KW02.ZZZCHGCT[PK0KWSB1] = PKHREC.ZZZCHGCT;
      PK0KW01.PK0KWSB1 = PK0KW01.PK0KWSB1 + 1;

      XSPKHF1(); /* select next pkhrec record*/
    end

  end


end // end PK0KSO3

// set up online screen
Function PK0KSO4()
   /* ------------------------------------------------------------*/
   /* set up online screen*/
   /* ------------------------------------------------------------*/

  PK0KW01.PK0KWSB2 = 1;
  PK0KW01.PK0KW-SCRN-FULL = "N";
  PK0KW01.PK0KWORD = PK0KW01.PK0KWORH[PK0KWSB2];

  while (PK0KW01.PK0KWSB2 <= 24)

    if (PK0KW01.PK0KWSB1 <= 1000)
      PK0KM001.PK1CUOID[PK0KWSB2] = PK0KW02.PK1CUOID[PK0KWSB1];
      PK0KM001.PK1NORID[PK0KWSB2] = PK0KW02.PK1NORID[PK0KWSB1];
      PK0KM001.XPPCD[PK0KWSB2] = PK0KW02.XPPCD[PK0KWSB1];
      PK0KM001.OP1SPHDF[PK0KWSB2] = PK0KW02.OP1SPHDF[PK0KWSB1];
      PK0KM001.PK0KMACT[PK0KWSB2] = " ";

      if (PK0KW01.PK1CUOID == 0
       && PK0KW01.PK1CUOID == 0)
            /* next sentence*/
      else
        if (PK0KM001.PK1CUOID[PK0KWSB2] == PK0KW01.PK1CUOID
         && PK0KM001.PK1NORID[PK0KWSB2] == PK0KW01.PK1NORID)
          set PK0KM001.PK1CUOID[PK0KWSB2] bold;
          set PK0KM001.PK1NORID[PK0KWSB2] bold;
        end
      end

      PK0KW01.PK0KWSB1 = PK0KW01.PK0KWSB1 + 1;
    else
      if (PK0KW01.PK0KW-SCRN-FULL == "Y")
          /* next sentence*/
      else
        PK0KW01.PK0KW-HLD-DTL = PK0KW01.PK0KWSB2 - 1;
        PK0KW01.PK0KW-SCRN-FULL = "Y";
      end

      PK0KM001.PK1CUOID[PK0KWSB2] = 0;
      PK0KM001.PK1NORID[PK0KWSB2] = 0;
      PK0KM001.XPPCD[PK0KWSB2] = " ";
      PK0KM001.OP1SPHDF[PK0KWSB2] = " ";
      PK0KM001.PK0KMACT[PK0KWSB2] = " ";
    end

    PK0KW01.PK0KWSB2 = PK0KW01.PK0KWSB2 + 1;
  end

  PK0KSO9(); /* display warning messages if any*/


end // end PK0KSO4

// find proper place in table
Function PK0KSO5()
   /* ------------------------------------------------------------*/
   /* find proper place in table*/
   /* ------------------------------------------------------------*/

  if (PK0KW01.PK0KWORD in PK0KW02.PK0KWORD)
    PK0KW01.PK0KWSB1 = sysVar.arrayIndex;
  else

    PK0KW01.PK0KWSB1 = 1;
    PK0KW01.PK0KWSB3 = 1;

    while (PK0KW01.PK0KWSB3 <= 1000)

      if (PK0KW02.PK1CUOID[PK0KWSB3] == 0
       && PK0KW02.PK1NORID[PK0KWSB3] == 0)

        PK0KW01.PK0KWSB1 = 1;
        PK0KW01.PK0KWSB3 = 1001;

      else

        if (PK0KW01.PK0KWORD >= PK0KW02.PK0KWORD[PK0KWSB3])
          PK0KW01.PK0KWSB1 = PK0KW01.PK0KWSB3;
          PK0KW01.PK0KWSB3 = 1001;
        end

        PK0KW01.PK0KWSB3 = PK0KW01.PK0KWSB3 + 1;

      end

    end

  end

  if (PK0KW01.PK0KWSB1 <= 24
   && PK0KM001.PK0KMCON == 0
   && PK0KM001.PK0KMNON == 0
   && PK0KW02.PK1CUOID[25] == 0)
    PK0KW01.PK0KWSB1 = 1;
  end


end // end PK0KSO5

// transfer to requested appl
Function PK0KSO6()



   /* let user know which records have been viewed or selected*/



  PK0KW01.PK0KWSB4 = 1; /* position in pkyarry*/

  while (PK0KW01.PK0KWSB4 <= 25)

    PK0KW01.PK0KWSB3 = 1; /* position on map*/

    while (PK0KW01.PK0KWSB3 <= 24)

      if (PKYREC.PK1CUOID[PK0KWSB4] == PK0KM001.PK1CUOID[PK0KWSB3]
       && PKYREC.PK1NORID[PK0KWSB4] == PK0KM001.PK1NORID[PK0KWSB3])
                                   /* st.*/
        PK0KM001.PK0KMACT[PK0KWSB3] = PKYREC.PKYORACT[PK0KWSB4];
        PK0KW01.PK0KWSB3 = 99;

      end

      PK0KW01.PK0KWSB3 = PK0KW01.PK0KWSB3 + 1; /* Increment map index*/

    end

    PK0KW01.PK0KWSB4 = PK0KW01.PK0KWSB4 + 1; /* Increment pkyarry*/

  end



end // end PK0KSO6

// highlight warning messages
Function PK0KSO9()



   /* highlight screen with warning messages*/



  PK0KW01.PK0KWSB4 = 1; /* position in pkyarry*/

  while (PK0KW01.PK0KWSB4 <= 24)

    PK0KW01.PK0KWSB3 = 1; /* position on map*/

    PK0KW01.PK0KWORD = PK0KW01.PK0KWORH[PK0KWSB4];

    if (PK0KW01.PK1CUOID == 0
     && PK0KW01.PK1NORID == 0)
      PK0KW01.PK0KWSB4 = 99;
    else
      while (PK0KW01.PK0KWSB3 <= 24)

        if (PK0KM001.PK1CUOID[PK0KWSB3] == PK0KW01.PK1CUOID
         && PK0KM001.PK1NORID[PK0KWSB3] == PK0KW01.PK1NORID)
          set PK0KM001.PK1CUOID[PK0KWSB3] bold;
          set PK0KM001.PK1NORID[PK0KWSB3] bold;
          PK0KW01.PK0KWSB3 = 99;

        end

        PK0KW01.PK0KWSB3 = PK0KW01.PK0KWSB3 + 1; /* Increment map index*/

      end
      PK0KW01.PK1CUOID = 0;
      PK0KW01.PK1NORID = 0;
      PK0KW01.PK0KWORH[PK0KWSB4] = PK0KW01.PK0KWORD;

    end

    PK0KW01.PK0KWSB4 = PK0KW01.PK0KWSB4 + 1; /* Increment pkyarry*/

  end



end // end PK0KSO9

// accum full case & repack qty's
Function PK0KSQ0()
   /* ------------------------------------------------------------*/
   /* loop thru POOLI01 table until end of cursor*/
   /* ------------------------------------------------------------*/

  PK0KSQ1(); /* open cursor in DPICK.VPOOLI01*/

  PK0KW01.PK0KWFCT = 0; /* Full case qty tot*/
  PK0KW01.PK0KWRPT = 0; /* Repack qty tot*/
  PK0KW01.PK0KWCS1 = "N"; /* end of cursor switch*/

  while (PK0KW01.PK0KWCS1 == "N") /* until end of cursor*/
    PK0KSQ2(); /* fetch row in DPICK.VPOOLI01*/
    if (PK0KW01.PK0KWCS1 == "N") /* if not end*/

      PK0KW01.PK0KWFCT = PK0KW01.PK0KWFCT + PK5REC.PK5ITMFC;
      PK0KW01.PK0KWRPT = PK0KW01.PK0KWRPT + PK5REC.PK5ITMRP;

    end
  end

  PK0KSQ4(); /* close cursor in DPICK.VPOOLI01*/


end // end PK0KSQ0

// open cursor in DPICK.VPOOLI01
Function PK0KSQ1()
   /* ------------------------------------------------------------*/
   /* Open cursor in DPICK.VPOOLI01.*/
   /* ------------------------------------------------------------*/

  set PK5REC empty; /* Clear row storage area*/

  PK5REC.XWHCD = PK0KM001.XWHCD; /* Warehouse code*/
  PK5REC.PK1CUOID = PK0KM001.PK1CUOID[PK0KWSB2];
  PK5REC.PK1NORID = PK0KM001.PK1NORID[PK0KWSB2];

  try
    call "IO1990" ("S1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "SQ1"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK5REC.PK5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PK0KSQ1

// fetch row in DPICK.VPOOLI01
Function PK0KSQ2()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from DPICK.VPOOLI01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1990" ("N1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PK0KW01.PK0KWCS1 = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "SQ2"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK5REC.PK5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PK0KSQ2

// close cursor in DPICK.VPOOLI01
Function PK0KSQ4()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1990" ("C1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "SQ4"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PK0KSQ4

// do paging of screen data
Function PK0KSS0()
   /* ---------------------------------------------------------*/
   /* do paging of screen data*/
   /* ---------------------------------------------------------*/

   /* MOVE PK0KWSB1 TO PK0KWSB1;*/

  if (converseVar.eventKey is pf7)
    if (PK0KW01.PK0KWSB1 > 1000)
      PK0KW01.PK0KWSB1 = PK0KW01.PK0KWSB1 - PK0KW01.PK0KW-HLD-DTL;
      PK0KW01.PK0KWSB1 = PK0KW01.PK0KWSB1 - 24;
    else
      PK0KW01.PK0KWSB1 = PK0KW01.PK0KWSB1 - 48;
      if (PK0KW01.PK0KWSB1 <= 0)
        PK0KW01.PK0KWSB1 = 1;
        converseLib.validationFailed(37);
          /* no more scrolling backward possible*/
      end
    end
  else
    if (PK0KW01.PK0KWSB1 > 1000)
      PK0KW01.PK0KWSB1 = PK0KW01.PK0KWSB1 - PK0KW01.PK0KW-HLD-DTL;
        /* no more scrolling forward possible*/
      converseLib.validationFailed(38);
    else
      if (PK0KW02.XWHCD[PK0KWSB1] <= " ")
        PK0KW01.PK0KWSB1 = PK0KW01.PK0KWSB1 - 24;
           /* no more scrolling forward possible*/
        converseLib.validationFailed(38);
      end
    end
  end

  set PK0KW03 empty; /* clear hold record if paging*/



end // end PK0KSS0

// scroll to proper place in tabl
Function PK0KSS1()
   /* -----------------------------------------------------*/
   /* scroll to proper spot in table*/
   /* -----------------------------------------------------*/

  PK0KW01.PK0KWSB3 = 1;
  PK0KW01.PK0KWFL2 = "NOT FOUND";

  while (PK0KW01.PK0KWSB3 <= 1000)

    if (PK0KM001.PK0KMCON == PK0KW02.PK1CUOID[PK0KWSB3]
     && PK0KM001.PK0KMNON == PK0KW02.PK1NORID[PK0KWSB3])

      PK0KW01.PK0KWFL2 = "ORDER NUMBER FOUND";
      PK0KW01.PK0KWSB1 = PK0KW01.PK0KWSB3;
      PK0KW01.PK0KWSB3 = 1001;
    end

    PK0KW01.PK0KWSB3 = PK0KW01.PK0KWSB3 + 1;

  end

  if (PK0KW01.PK0KWFL2 == "ORDER NUMBER FOUND")
    PK0KM001.PK0KMCON = 0;
    PK0KM001.PK0KMNON = 0;
    set PK0KM001.PK0KMCON normal;
    set PK0KM001.PK0KMNON normal;
  else
    set PK0KM001.PK0KMCON cursor, bold;
    set PK0KM001.PK0KMNON bold;
    converseLib.validationFailed(164);
    PK0KW01.PK0KWSB3 = 1;
      /* order number not found*/
  end


end // end PK0KSS1

// transfer to requested appl
Function PK0KST0()




   /* Set the "TO" application according to the PF key pressed.*/




  PKWREC.XWHCD = PK0KM001.XWHCD;

  if (converseVar.eventKey is pf3) /* ; PF3 was pressed*/
    if (PK0KM001.XWHCD == "51" /* memphis footware*/
     || PK0KM001.XWHCD == "04" /* memphis apparel*/
     || PK0KM001.XWHCD == "07" /* wilsonville warehouse*/
     || PK0KM001.XWHCD == "02") /* greenland warehouse*/
      COMMAREA.CATOAP = "PW0V"; /* picking selection menu*/
      XSPKS01(); /* exit*/
      exit stack;
    else
      COMMAREA.CATOAP = "PK07"; /* Selection Menu*/
    end
  else
    if (converseVar.eventKey is pf14) /* ; PF14 was pressed*/
      COMMAREA.CATOAP = "PK0M"; /* Select By Order Type*/
    else
      if (converseVar.eventKey is pf15) /* ; PF15 was pressed*/
        COMMAREA.CATOAP = "PK0L"; /* Select By Customer*/
      else
        if (converseVar.eventKey is pf16) /* ; PF16 was pressed*/
          COMMAREA.CATOAP = "PK01"; /* Select Pack And Hold*/
        else
          if (converseVar.eventKey is pf18) /* ; PF18 was pressed*/
            COMMAREA.CATOAP = "PK09"; /* Hold/Release*/
          else
            if (converseVar.eventKey is pf19) /* ; PF19 was pressed*/
              COMMAREA.CATOAP = "PK0S"; /* Planning Menu*/
            else
              if (converseVar.eventKey is pf20) /* ; PF20 was pressed*/
                COMMAREA.CATOAP = "PK0A"; /* Master Menu*/
              end
            end
          end
        end
      end
    end
  end

  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* COMMAREA user area*/
  COMMAREA.XWHCD = PK0KM001.XWHCD;

  XSEXIT(); /* Invoke selected application*/

  PK0KM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/




end // end PK0KST0

// transfer to requested appl
Function PK0KST1()




   /* Clear the common array and move the selected order*/
   /* numbers into it.*/
   /* Transfer control to the order inquiry application.*/


  set PKYREC empty; /* Clear order array*/


  PK0KST2(); /* Move selected orders*/

  PKYREC.XWHCD = PK0KM001.XWHCD; /* move warehouse code back*/
  PKYREC.XWHABRV = PK0KM001.XWHABRV; /* and warehouse abbreviation*/

  PKWREC.PKWARRAY[1] = PKYREC.PKWARRAY; /* Inquiry keys array*/

  PKWREC.PKWSLTYP[1] = "O"; /* Inquiry selection type*/
  PKWREC.PKWINDEX = 1;
  PKWREC.PKWFRMAP[1] = "PK0K"; /* Previous application*/

  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* COMMAREA user area*/

  COMMAREA.CATOAP = "PK0B"; /* PICKING order inquiry*/

  XSEXIT(); /* Transfer to cust. Inquiry*/

       /* **************************************************/
       /* **********  if xsexit did not work:   ************/
       /* **************************************************/
  PK0KM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
  converseLib.validationFailed(); /* problem exists!!!!!*/
  PK0KW01.PK0KWSB2 = 0;



end // end PK0KST1

// transfer to requested appl
Function PK0KST2()



   /* If the line was selected for inquiry, move the customer num*/
   /* to the common key array.*/



  PK0KW01.PK0KWSB3 = 1; /* position on map*/
  PK0KW01.PK0KWSB1 = 1; /* position in pass record*/

    /* **** move the first map line into array for returning *****/

  PKYREC.PKYORACT[PK0KWSB1] = PK0KM001.PK0KMACT[PK0KWSB3]; /* act.*/
  PKYREC.PK1CUOID[PK0KWSB1] = PK0KM001.PK1CUOID[PK0KWSB3];
                                   /* order id*/
  PKYREC.PK1NORID[PK0KWSB1] = PK0KM001.PK1NORID[PK0KWSB3];
                                   /* order id*/
  PK0KW01.PK0KWSB3 = 2; /* position on map*/
  PK0KW01.PK0KWSB1 = 2; /* position in pass record*/



  while (PK0KW01.PK0KWSB3 <= 24)

    if (PK0KM001.PK0KMACT[PK0KWSB3] == "S") /* Selected for inquiry*/

      PKYREC.PKYORACT[PK0KWSB1] = PK0KM001.PK0KMACT[PK0KWSB3];
                                   /* act.*/
      PKYREC.PK1CUOID[PK0KWSB1] = PK0KM001.PK1CUOID[PK0KWSB3]; /* cust.*/
      PKYREC.PK1NORID[PK0KWSB1] = PK0KM001.PK1NORID[PK0KWSB3]; /* st.*/

      PK0KW01.PK0KWSB1 = PK0KW01.PK0KWSB1 + 1; /* Increment array index*/

    end

    PK0KW01.PK0KWSB3 = PK0KW01.PK0KWSB3 + 1; /* Increment map index*/

  end



end // end PK0KST2

// update data base
Function PK0KSU0()


         /* update order selection data base for picking*/



  PK0KW01.PK0KWSB2 = 24;

  PK0KSU1(); /* get date and time stamp*/

  while (PK0KW01.PK0KWSB2 >= 1)

    if (PK0KM001.PK0KMACT[PK0KWSB2] == " "
     || PK0KM001.PK0KMACT[PK0KWSB2] == "V")
        /* next sentence*/
    else
      if (PK0KM001.PK0KMACT[PK0KWSB2] == "A")
        PK0KSU3(); /* data base add*/
      else
        if (PK0KM001.PK0KMACT[PK0KWSB2] == "C")
          PK0KSU2(); /* change to data base*/
        else
          if (PK0KM001.PK0KMACT[PK0KWSB2] == "D")
            PK0KSU4(); /* check delete for inactive delete or physical*/
          else
            if (PK0KM001.PK0KMACT[PK0KWSB2] == "S")
              PK0KST1(); /* if selection is s transfer to inquiry appl*/
            end
          end
        end
      end
    end

    if (PK0KM001.PK0KMACT[PK0KWSB2] == "A"
     || PK0KM001.PK0KMACT[PK0KWSB2] == "C"
     || PK0KM001.PK0KMACT[PK0KWSB2] == "D")
      if (converseVar.validationMsgNum == 105) /* data base updated by someone else*/
        PK0KW01.PK0KWSB2 = 0; /* get out of loop*/
      else
        converseLib.validationFailed(32);
          /* table update successful*/
      end
    end

    PK0KW01.PK0KWSB2 = PK0KW01.PK0KWSB2 - 1;

  end


  if (converseVar.validationMsgNum == 32) /* table upate successful*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();
  end



end // end PK0KSU0

// get time and date stamp
Function PK0KSU1()


      /* get time and date stamp*/


  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};



end // end PK0KSU1

// change to data base
Function PK0KSU2()

   /* -----------------------------------------------------------------*/
   /* Select row from pool header*/
   /* -----------------------------------------------------------------*/

  set PK4REC empty;
  PK4REC.XWHCD = PK0KM001.XWHCD;
  PK4REC.PK1CUOID = PK0KM001.PK1CUOID[PK0KWSB2];
  PK4REC.PK1NORID = PK0KM001.PK1NORID[PK0KWSB2];

  try
    call "IO1720" ("S ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2      ";
    TA1REC.TA1PGMNM = "RETN     ";
    TA1REC.TA1LOCAT[1] = "IO1720   ";
    TA1REC.TA1LOCAT[2] = "SELECT   ";
    TA1REC.TA1LOCAT[3] = "ROW      ";
    TA1REC.TA1LOCAT[3] = "DPICK    ";
    TA1REC.TA1LOCAT[3] = "VPOOLH01 ";
    TA1REC.TA1TBLKE = PK4REC.PK4KEY;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

   /* ---------------------------------------------------------------*/
   /* Change PKHREC in database*/
   /* ---------------------------------------------------------------*/

  PK0KSQ0(); /* accum full case and repack qtys*/

  set PKHREC empty;
  TA1REC.TA1LOCAT[2] = "PK0KSU2";
  PK0KW01.PK0KWSB3 = PK0KW01.PK0KWSB1 - 25;
  PK0KW01.PK0KWSB3 = PK0KW01.PK0KWSB3 + PK0KW01.PK0KWSB2;
  PKHREC.ZZZCHGCT = PK0KW02.ZZZCHGCT[PK0KWSB3];

  PK0KSU5(); /* move row on scren to record*/

  PKHREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PKHREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  XSPKHR0(); /* update row on data base*/

  if (SQLCA.VAGen_SQLCODE == 0)
    PK0KW01.PK0KWUPD = "Y";
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(226);
         /* data base has been changed*/
      PK0KW01.PK0KWUPD = "ADD OR PHYSICAL DELETE TAKEN PLACE";
    else
      if (SQLCA.VAGen_SQLCODE == -803)
        converseLib.validationFailed(109);
         /* needs message*/
         /* duplicate record*/
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(108);
             /* data base contention <try again>*/
        else
        end
      end
    end
  end



end // end PK0KSU2

// add to data base
Function PK0KSU3()
   /* -----------------------------------------------------------------*/
   /* Select row from pool header*/
   /* -----------------------------------------------------------------*/

  set PK4REC empty;
  PK4REC.XWHCD = PK0KM001.XWHCD;
  PK4REC.PK1CUOID = PK0KM001.PK1CUOID[PK0KWSB2];
  PK4REC.PK1NORID = PK0KM001.PK1NORID[PK0KWSB2];

  try
    call "IO1720" ("S ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2      ";
    TA1REC.TA1PGMNM = "RETN     ";
    TA1REC.TA1LOCAT[1] = "IO1720   ";
    TA1REC.TA1LOCAT[2] = "SELECT   ";
    TA1REC.TA1LOCAT[3] = "ROW      ";
    TA1REC.TA1LOCAT[3] = "DPICK    ";
    TA1REC.TA1LOCAT[3] = "VPOOLH01 ";
    TA1REC.TA1TBLKE = PK4REC.PK4KEY;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end
   /* -----------------------------------------------------------------*/
   /* Set status in pool header*/
   /* -----------------------------------------------------------------*/

  PK4REC.PK4SLIND = "S"; /* set status for picking*/

  PK4REC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PK4REC.ZZZCHGTM = TA2REC.TA2TIMHM;

   /* -----------------------------------------------------------------*/
   /* Update the changed row in the table*/
   /* -----------------------------------------------------------------*/

  try
    call "IO1720" ("U ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0)
      PK0KW01.PK0KWUPD = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        converseLib.validationFailed(226);
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(108);
        end

        TA1REC.TA1TYPE = "DB2      ";
        TA1REC.TA1PGMNM = "RETN     ";
        TA1REC.TA1LOCAT[1] = "IO1720   ";
        TA1REC.TA1LOCAT[2] = "UPDATE   ";
        TA1REC.TA1LOCAT[3] = "ROW      ";
        TA1REC.TA1LOCAT[3] = "DPICK    ";
        TA1REC.TA1LOCAT[3] = "VPOOLH01 ";
        TA1REC.TA1TBLKE = PK4REC.PK4KEY;
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        move SQLCA to ERRSQLCA withV60Compat;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        XSPF4();
      end
    end
  end
   /* -----------------------------------------------------------------*/
   /* Add record to pkhrec non-planning record*/
   /* -----------------------------------------------------------------*/

  PK0KSQ0(); /* accum full case and repack qtys*/

  set PKHREC empty;
  TA1REC.TA1LOCAT[2] = "PK0KSU3";
  PKHREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PKHREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  PKHREC.PKURUNMD = " ";

  PK0KSU5(); /* move row on screen to record*/

  XSPKHA0(); /* add row to data base*/

  if (SQLCA.VAGen_SQLCODE == 0)
    PK0KW01.PK0KWUPD = "Y";
    converseLib.validationFailed(32);
  else
    if (SQLCA.VAGen_SQLCODE == -803)
      converseLib.validationFailed(44);
       /* needs message*/
       /* duplicate record*/
      set PK0KM001.PK0KMACT[PK0KWSB2] cursor, bold;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(108); /* data base in use*/
          /* data base in use, try again*/
      end
    end
  end



end // end PK0KSU3

// physical delete from data base
Function PK0KSU4()
   /* -----------------------------------------------------------*/
   /* Select row from pool header*/
   /* -----------------------------------------------------------*/

  set PK4REC empty;
  PK4REC.XWHCD = PK0KM001.XWHCD;
  PK4REC.PK1CUOID = PK0KM001.PK1CUOID[PK0KWSB2];
  PK4REC.PK1NORID = PK0KM001.PK1NORID[PK0KWSB2];

  try
    call "IO1720" ("S ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2     ";
    TA1REC.TA1PGMNM = "RETN    ";
    TA1REC.TA1LOCAT[1] = "IO1720  ";
    TA1REC.TA1LOCAT[2] = "SELECT  ";
    TA1REC.TA1LOCAT[3] = "ROW     ";
    TA1REC.TA1DBASE = "DPICK   ";
    TA1REC.TA1TBLVU = "VPOOLH01";
    TA1REC.TA1TBLKE = PK4REC.PK4KEY;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end
   /* -----------------------------------------------------------*/
   /* Set status in pool header for de-select*/
   /* -----------------------------------------------------------*/

  PK4REC.PK4SLIND = " "; /* Clear status*/

  PK4REC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PK4REC.ZZZCHGTM = TA2REC.TA2TIMHM;

   /* -----------------------------------------------------------*/
   /* Update the deleted row in the pool header table*/
   /* -----------------------------------------------------------*/

  try
    call "IO1720" ("U ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0)
      PK0KW01.PK0KWUPD = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(226);
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(108);
        end

        TA1REC.TA1TYPE = "DB2     ";
        TA1REC.TA1PGMNM = "RETN    ";
        TA1REC.TA1LOCAT[1] = "IO1720  ";
        TA1REC.TA1LOCAT[2] = "UPDATE  ";
        TA1REC.TA1LOCAT[3] = "ROW     ";
        TA1REC.TA1DBASE = "DPICK   ";
        TA1REC.TA1TBLVU = "VPOOLH01";
        TA1REC.TA1TBLKE = PK4REC.PK4KEY;
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        move SQLCA to ERRSQLCA withV60Compat;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        XSPF4();
      end
    end
  end

   /* -------------------------------------------------------------------*/
   /* Physical delete from data base of pkhrec*/
   /* -------------------------------------------------------------------*/

  set PKHREC empty;
  TA1REC.TA1LOCAT[2] = "PK0KSU4";
  PKHREC.XWHCD = PK0KM001.XWHCD;
  PKHREC.PK1CUOID = PK0KM001.PK1CUOID[PK0KWSB2];
  PKHREC.PK1NORID = PK0KM001.PK1NORID[PK0KWSB2];


  XSPKHI0(); /* select row*/

  if (SQLCA.VAGen_SQLCODE == 0)

    XSPKHD0(); /* delete row on data base*/

    if (SQLCA.VAGen_SQLCODE == 0)
      PK0KW01.PK0KWUPD = "Y";
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(226);
         /* order changed but not in pick pool*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(108);
           /* data base contention <try again>*/
      end
    end
  end



end // end PK0KSU4

// move data from scrn to record
Function PK0KSU5()


         /* move data from screen to pkhrec record*/


  PKHREC.XWHCD = PK0KM001.XWHCD;
  PKHREC.XDVCD = PK4REC.XDVCD;
  PKHREC.XBCCD = PK4REC.XBCCD;

  PK0KW01.PK0KWNUM = PK0KM001.PK1CUOID[PK0KWSB2];
  PKHREC.PK1CUOID = PK0KM001.PK1CUOID[PK0KWSB2];
  PKHREC.PK1NORID = PK0KM001.PK1NORID[PK0KWSB2];
  PKHREC.PK1PRTN = PK0KW01.PK0KWPRT;

  PKHREC.OP1DSBDT = PK4REC.OP1DSBDT;
  PKHREC.TF1CARCD = PK0KW03.TF1CARCD[PK0KWSB2];
  PKHREC.XPPCD = PK0KM001.XPPCD[PK0KWSB2];
  PKHREC.PKURUNMD = " ";
  PKHREC.PKHPVSFC = PK0KW01.PK0KWFCT;
  PKHREC.PKHPVSRP = PK0KW01.PK0KWRPT;
  PKHREC.PK-SEL-TYP-CD = PK0KW03.PK-SEL-TYP-CD[PK0KWSB2];



end // end PK0KSU5

// display warning messages
Function PK0KSU6()

  PK0KS65(); /* check deletes*/

  if (PK0KW01.PK0KWARN == "Y") /* deletes only*/
    return; /* return to calling process*/
  end
         /* warning messages if any*/


  PK0KW01.PK0KWSB4 = 24;
  PK0KW01.PK0KWSB5 = 1;
  PK0KW01.PK1CUOID = 0;
  PK0KW01.PK1NORID = 0;
  PK0KW01.PK0KWEZE = 0;

  while (PK0KW01.PK0KWSB4 >= 1)

    if (PK0KM001.PK0KMACT[PK0KWSB4] == "A"
     || PK0KM001.PK0KMACT[PK0KWSB4] == "C")
      PK0KS66(); /* set warning msg flag*/
    end

    if (PK0KM001.PK0KMACT[PK0KWSB4] == " "
     || PK0KM001.PK0KMACT[PK0KWSB4] == "V"
     || PK0KM001.PK0KMACT[PK0KWSB4] == "D")

    else
      if (PK0KM001.PK0KMACT[PK0KWSB4] == "S")
        PK0KST1();
      end
      if (PK0KW01.PK0KWARN == "N")
        PK0KSU7(); /* pick pool warning*/
      end
    end

    PK0KW01.PK0KWSB4 = PK0KW01.PK0KWSB4 - 1;

  end

  PK0KW01.PK0KWSB4 = 24;
  if (PK0KW01.PK0KWEZE == 0)
    while (PK0KW01.PK0KWSB4 >= 1)
      if (PK0KM001.PK0KMACT[PK0KWSB4] == "A"
       || PK0KM001.PK0KMACT[PK0KWSB4] == "C")
        PK0KW01.PK0KWEZE = 160; /* passed edits hit enter to process*/
      end
      PK0KW01.PK0KWSB4 = PK0KW01.PK0KWSB4 - 1;
    end
  end

  if (PK0KW01.PK0KWEZE == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(PK0KW01.PK0KWEZE);
  end


end // end PK0KSU6

// normal, rush pick pool warning
Function PK0KSU7()


         /* normal or rush pick pool warning*/



  set PK4REC empty;
  TA1REC.TA1LOCAT[2] = "PK0KSU7";
  PK4REC.XWHCD = PK0KM001.XWHCD;
  PK4REC.PK1CUOID = PK0KM001.PK1CUOID[PK0KWSB4];
  PK4REC.PK1NORID = PK0KM001.PK1NORID[PK0KWSB4];
  PK0KW01.PK0KWPHD = "Y"; /* pool header found*/

  set PWIREC empty;

  XSPK4I0(); /* find row on pool header file*/

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(108);
    PK0KW01.PK0KWSB4 = 0;
       /* data base contention <try again>*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == +100) /* not found*/
    PK0KW01.PK0KWPHD = "N"; /* pool header not found*/
  end
  if (SQLCA.VAGen_SQLCODE == 0)
    /* -----------------------------------------------------*/
     /* Set the selection type code (pk-sel-typ-cd)*/
     /*  */
     /* It is possible for the order to be both b-grade and*/
     /* closeout.  In this case, the selection type would be*/
     /* set to closeout (the condition stmt for closeout is*/
     /* AFTER the b-grade condition for this reason).*/
    /* -----------------------------------------------------*/

    /* ----------- spcl hndl ----------------------*/
    if (PK4REC.OP1SPHDF == "Y")
      PK0KW03.PK-SEL-TYP-CD[PK0KWSB4] = " 5";
    end

    /* ----------- non-spcl hndl ------------------*/
    if (PK4REC.OP1SPHDF == "N")
      PK0KW03.PK-SEL-TYP-CD[PK0KWSB4] = " 6";
    end


    /* --- determine b-grade/closeout -------------*/
    XPPK005();

    /* ----------- b-grade / spcl hndl ------------*/
    if (PKW-ORDER-TYP-IND == "B" /* B-Grade*/
     && PK4REC.OP1SPHDF == "Y") 

      PK0KW03.PK-SEL-TYP-CD[PK0KWSB4] = "10";

    end

    /* ----------- b-grade / non-spcl hndl --------*/
    if (PKW-ORDER-TYP-IND == "B" /* B-Grade*/
     && PK4REC.OP1SPHDF == "N") 

      PK0KW03.PK-SEL-TYP-CD[PK0KWSB4] = "11";

    end

    /* ----------- closeouts - spcl hndl ----------*/
    if (PKW-ORDER-TYP-IND == "C"
     && PK4REC.OP1SPHDF == "Y")

      PK0KW03.PK-SEL-TYP-CD[PK0KWSB4] = "12";

    end

    /* ----------- closeouts - non-spcl hndl ------*/
    if (PKW-ORDER-TYP-IND == "C"
     && PK4REC.OP1SPHDF == "N")

      PK0KW03.PK-SEL-TYP-CD[PK0KWSB4] = "13";

    end

    /* ----- in-store promo - spcl hndl ----------*/
    if (PK4REC.XDVCD == "01"
     && PK4REC.XGPCD == "01"
     && PK4REC.OP1SPHDF == "Y")

      PK0KW03.PK-SEL-TYP-CD[PK0KWSB4] = "14";

    end

    /* ----- in-store promo - non-spcl hndl ------*/
    if (PK4REC.XDVCD == "01"
     && PK4REC.XGPCD == "01"
     && PK4REC.OP1SPHDF == "N")

      PK0KW03.PK-SEL-TYP-CD[PK0KWSB4] = "15";

    end

    PK0KW03.TF1CARCD[PK0KWSB4] = PK4REC.TF1CARCD;
  end

  if (PK0KM001.PK0KMACT[PK0KWSB4] == "A")
    PK0KSUA(); /* check for batch de-alloc request*/
    if (PK4REC.XWHCD == ALHREC.XWHCD
     && PK4REC.PK1CUOID == ALHREC.OP1CUOID
     && PK4REC.PK1NORID == ALHREC.OP1NORID)
      converseLib.validationFailed(271);
         /* order(s) added - warning order(s) batch dealoc requested*/
      PK0KW01.PK0KWSB5 = +1;
      PK0KSV3(); /* hold all orders with same warning*/
                                   /* messages*/
    end
  end

  if (PK0KW01.PK0KWPHD == "Y") /* pool header found*/
    PK0KW01.PK0KWSB5 = +1;
    PK0KSU8(); /* customer on hold warning*/
    PK0KW01.PK0KWSB5 = +1;
    PK0KSU9(); /* order on hold warning*/
    PK0KW01.PK0KWSB5 = +1;
    if (PK0KM001.XWHCD == "02" || 
    PK0KM001.XWHCD == "04" || 
    PK0KM001.XWHCD == "07" || 
    PK0KM001.XWHCD == "42" || 
    PK0KM001.XWHCD == "51")
      OP1REC.OP1DSBDT = PK4REC.OP1DSBDT;
      PK0KS-VALID-DNSB(); /* validate dnsb*/
    end
  else
    if (PK0KM001.PK0KMACT[PK0KWSB4] == "A")
      if (PK0KM001.XWHCD == "04" || 
      PK0KM001.XWHCD == "07" || 
      PK0KM001.XWHCD == "42" || 
      PK0KM001.XWHCD == "51")
        PK0KS-GET-VORHDR01();
        PK0KS-VALID-DNSB();
        if (converseVar.validationMsgNum != 519)
          converseLib.validationFailed(172);
        end
      else
        converseLib.validationFailed(172);
      end
         /* order(s) added - warning orders(s) not in pick pool*/
      PK0KW01.PK0KWSB5 = +1;
      PK0KSV3(); /* hold all orders with same warning*/
                                   /* messages*/
    end
    if (PK0KM001.PK0KMACT[PK0KWSB4] == "C")
      if (PK0KM001.XWHCD == "04" || 
      PK0KM001.XWHCD == "07" || 
      PK0KM001.XWHCD == "42" || 
      PK0KM001.XWHCD == "51")
        PK0KS-GET-VORHDR01();
        PK0KS-VALID-DNSB();
        if (converseVar.validationMsgNum != 519)
          converseLib.validationFailed(226);
        end
      else
        converseLib.validationFailed(226);
      end
         /* order(s) changed - warning orders(s) not in pick pool*/
      PK0KW01.PK0KWSB5 = +1;
      PK0KSV3(); /* hold all orders with same warning*/
                                   /* messages*/
    end
  end


  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(108);
    PK0KW01.PK0KWSB4 = 0;
       /* data base contention <try again>*/
  end






end // end PK0KSU7

// customer on hold warning
Function PK0KSU8()


         /* order on hold warning*/



  set PKBREC empty;
  TA1REC.TA1LOCAT[2] = "PK0KSU8";
  PK9REC.XWHCD = PK4REC.XWHCD;
  PK9REC.KUCCOID = PK4REC.KUCCOID;
  PK9REC.KUMSTRID = PK4REC.KUMSTRID;
  PK9REC.XNXCD = PK4REC.XNXCD;
  PKBREC.XHRCD = "*";

  PK0KSU1(); /* get current date*/


  XSPK9S1(); /* select set and select next pkbrec*/

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(028); /* data base in use*/
    /* data base contention <try again>*/
    PK0KW01.PK0KWSB4 = 0;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      XSPK9C1(); /* close set*/
    else
      PK0KSV2(); /* check release date on records*/
      XSPK9C1(); /* close set*/
    end
  end



end // end PK0KSU8

// order on hold warning
Function PK0KSU9()


         /* order on hold warning*/



  set PKBREC empty;
  TA1REC.TA1LOCAT[2] = "PK0KSU9";
  PKBREC.XWHCD = PK0KM001.XWHCD;
  PKBREC.PK1CUOID = PK0KM001.PK1CUOID[PK0KWSB4];
  PKBREC.PK1NORID = PK0KM001.PK1NORID[PK0KWSB4];
  PKBREC.XHRCD = "*";

  PK0KSU1(); /* get current date*/


  XSPKBS1(); /* select set and select next pkbrec*/

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(028); /* data base in use*/
    /* data base contention <try again>*/
    PK0KW01.PK0KWSB4 = 0;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      XSPKBC1(); /* close set*/
    else
      PK0KSV1(); /* check release date on records*/
      XSPKBC1(); /* close set*/
    end
  end



end // end PK0KSU9

// check for batch de-alloc req
Function PK0KSUA()
   /* -------------------- pk0ksua -------------------------------*/

  set ALHREC empty;
  ALHREC.ALHRQT = "A";
  call "IO2660" ("S1", SQLCA, ALHREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    call "IO2660" ("N1", SQLCA, ALHREC) {isNoRefresh = yes, isExternal = yes};
    while (SQLCA.VAGen_SQLCODE == 0)
      if (ALHREC.XWHCD >= PK4REC.XWHCD
       && ALHREC.OP1CUOID >= PK4REC.PK1CUOID
       && ALHREC.OP1NORID >= PK4REC.PK1NORID)
        SQLCA.VAGen_SQLCODE = +100;
      else
        call "IO2660" ("N1", SQLCA, ALHREC) {isNoRefresh = yes, isExternal = yes};
      end
    end
  end

  if (SQLCA.VAGen_SQLCODE >= 0)
    call "IO2660" ("C1", SQLCA, ALHREC) {isNoRefresh = yes, isExternal = yes};
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(108);
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "N1";
      TA1REC.TA1PGMNM = "PK0K   ";
      TA1REC.TA1LOCAT[1] = "PK0KSUA ";
      TA1REC.TA1LOCAT[2] = "IO2660  ";
      TA1REC.TA1LOCAT[3] = " ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "PK0KM010";
      TA1REC.TA1DBASE = "DALLOC";
      TA1REC.TA1TBLVU = "VALTAG01";
      TA1TBLKE = ALHREC.ALHKEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      XSPF4();
    end
  end




end // end PK0KSUA

// check release hold date
Function PK0KSV1()


         /* check order hold release date*/



  TA1REC.TA1LOCAT[2] = "PK0KSV1";

  while (SQLCA.VAGen_SQLCODE == 0)

    if (PKBREC.PKBRELDT > TA2REC.TA2GRGGN)
      converseLib.validationFailed(173);
          /* order(s) added - warning order(s)  on hold*/
      PK0KSV3(); /* load like warnings into warning table*/
    end

    XSPKBF1(); /* xelect next tf1rec record*/

  end



end // end PK0KSV1

// check release hold date
Function PK0KSV2()


         /* check customer hold release date*/



  TA1REC.TA1LOCAT[2] = "PK0KSV2";

  while (SQLCA.VAGen_SQLCODE == 0)

    if (PK9REC.PK9RELDT > TA2REC.TA2GRGGN)
      converseLib.validationFailed(174);
          /* order(s) added - warning customer(s) on hold*/
      PK0KSV3();
                                   /* load like warnings into warning table*/
    end

    XSPK9F1(); /* xelect next tf1rec record*/

  end



end // end PK0KSV2

// load table with like warnings
Function PK0KSV3()


         /* load warning table with like warnings*/



  if (PK0KW01.PK0KWEZE == 0)
    PK0KWEZE = converseVar.validationMsgNum;
  end

  if (PK0KW01.PK0KWEZE == converseVar.validationMsgNum)
    if (PK0KW01.PK0KWSB5 == 0)
      PK0KW01.PK0KWSB5 = 1;
    end
    PK0KW01.PK1CUOID = PK0KM001.PK1CUOID[PK0KWSB4];
    PK0KW01.PK1NORID = PK0KM001.PK1NORID[PK0KWSB4];
    PK0KW01.PK0KWORH[PK0KWSB5] = PK0KW01.PK0KWORD;
    PK0KW01.PK0KWSB5 = PK0KW01.PK0KWSB5 + 1;
  end



end // end PK0KSV3

//*** RECORD=PK0KW01 ****
// allocation working storage.
// this area is the working storage unique to
// application AL0A for rule set selection for batch processing
// ***********************
Record PK0KW01 type basicRecord
  5 PK0KWGRP PK0KWGRP ; 
    10 PK0KWCS1 PK0KWCS1 ; 
    10 PK0KWPHD PK0KWPHD ; 
    10 PK0KWFAC PK0KWFAC ; 
    10 PK0KWFCS PK0KWFCS ; 
    10 PK0KWFCT PK0KWFCT ; 
    10 PK0KWREP PK0KWREP ; 
    10 PK0KWRPT PK0KWRPT ; 
    10 PK0KWIXQ PK0KWIXQ ; 
    10 PK0KWARN PK0KWARN ; 
    10 PK0KMCON PK0KMCON ; 
    10 PK0KMNON PK0KMNON ; 
    10 PK0KWUPD PK0KWUPD ; 
    10 PK0KWFLG PK0KWFLG ; 
    10 PK0KWDTE PK0KWDTE ; 
    10 XWHCD XWHCD ; 
    10 PK0KWORH PK0KWORH [24] ; 
    10 PK0KWORD PK0KWORD ; 
      15 PK1CUOID PK1CUOID ; 
      15 PK1NORID PK1NORID ; 
    10 PK0KMTDT PK0KMTDT ; 
      15 PK0KMTCC PK0KMTCC ; 
      15 PK0KMTYY PK0KMTYY ; 
      15 PK0KMTMM PK0KMTMM ; 
      15 PK0KMTDD PK0KMTDD ; 
    10 PK0KWEZE PK0KWEZE ; 
    10 PK0KWFL1 PK0KWFL1 ; 
    10 PK0KWFL2 PK0KWFL2 ; 
    10 PK0KWCT1 PK0KWCT1 ; 
    10 PK0KWCT2 PK0KWCT2 ; 
    10 PK0KWCT3 PK0KWCT3 ; 
    10 PK0KWSB1 PK0KWSB1 ; 
    10 PK0KWSB2 PK0KWSB2 ; 
    10 PK0KWSB3 PK0KWSB3 ; 
    10 PK0KWSB4 PK0KWSB4 ; 
    10 PK0KWSB5 PK0KWSB5 ; 
    10 PK0KW-HLD-DTL PK0KW-HLD-DTL ; 
    10 PK0KW-SCRN-FULL PK0KW-SCRN-FULL ; 
    10 PK0KMACT PK0KMACT ; 
    10 PK0KWNUM PK0KWNUM ; 
      15 * num(8) ; 
      15 PK0KWPRT PK0KWPRT ; 
    10 PK0KWERSW PK0KWERSW ; 
end // end PK0KW01

//*** RECORD=PK0KW02 ****
// allocation working storage.
// this area is the working storage unique to
// application AL0A for rule set selection for batch processing
// ***********************
Record PK0KW02 type basicRecord
  5 PK0KW02G PK0KW02G ; 
    10 XWHCD XWHCD [1000] ; 
    10 XDVCD XDVCD [1000] ; 
    10 XBCCD XBCCD [1000] ; 
    10 PK1PRTN PK1PRTN [1000] ; 
    10 PK0KWORD PK0KWORD [1000] ; 
      15 PK1CUOID PK1CUOID ; 
      15 PK1NORID PK1NORID ; 
    10 XPPCD XPPCD [1000] ; 
    10 OP1SPHDF OP1SPHDF [1000] ; 
    10 PKURUNMD PKURUNMD [1000] ; 
    10 ZZZCHGCT ZZZCHGCT [1000] ; 
end // end PK0KW02

//*** RECORD=PK0KW03 ****
// working storage record 3 (used for hold)
// ***********************
Record PK0KW03 type basicRecord
  5 PK0KW03G PK0KW03G ; 
    10 PK0KMACT PK0KMACT [24] ; 
    10 XPPCD XPPCD [24] ; 
    10 PK1CUOID PK1CUOID [24] ; 
    10 PK1NORID PK1NORID [24] ; 
    10 PK-SEL-TYP-CD PK-SEL-TYP-CD [24] ; 
    10 TF1CARCD TF1CARCD [24] ; 
end // end PK0KW03

// action field
DataItem PK0KMACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next order number
DataItem PK0KMCON num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// next order id extention
DataItem PK0KMNON num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0KMTCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0KMTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0KMTDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0KMTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0KMTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map detail line
DataItem PK0KW-HLD-DTL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// flag indicate screen full
DataItem PK0KW-SCRN-FULL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group Level of Record
DataItem PK0KW02G char(19000)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group Level of Record
DataItem PK0KW03G char(360)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning msg flag
DataItem PK0KWARN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of cursor switch
DataItem PK0KWCS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work counter 1
DataItem PK0KWCT1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work counter 2
DataItem PK0KWCT2 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work counter 3
DataItem PK0KWCT3 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// date hold area
DataItem PK0KWDTE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold area for pk1cuoid
DataItem PK0KWERSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-ord-stktf-id
DataItem PK0KWEZE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// full case factor
DataItem PK0KWFAC num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// full case qty
DataItem PK0KWFCS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// full case qty tot
DataItem PK0KWFCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// y or n type flag
DataItem PK0KWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order found flag
DataItem PK0KWFL2 char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// add or delete flag
DataItem PK0KWFLG char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group Level of Record
DataItem PK0KWGRP char(311)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// quantity index
DataItem PK0KWIXQ smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// hold area for pk1cuoid
DataItem PK0KWNUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group order # hold
DataItem PK0KWORD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order number hold
DataItem PK0KWORH char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pool header switch
DataItem PK0KWPHD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold area for pk1prtn
DataItem PK0KWPRT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// repack qty
DataItem PK0KWREP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// repack qty tot
DataItem PK0KWRPT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work subscript 1
DataItem PK0KWSB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work subscript 2
DataItem PK0KWSB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work subscript 3
DataItem PK0KWSB3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work subscript 4
DataItem PK0KWSB4 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work subscript 5
DataItem PK0KWSB5 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// add or delete flag
DataItem PK0KWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

