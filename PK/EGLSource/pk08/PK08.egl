package pk08;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import pk.common.*;
import sl.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PK08 ****
// This application displays Production Rates Per Location for
// the user to view and/or add, change, delete.
// 
// Upon initial entry, the Production Rate Per Location Table
// is read and all rows for the warehouse are selected and
// formatted in temporary storage, one display page per record.
// 
// The records are retrieved from temporary storage one at a
// time, for display to the user.  The user may page forward
// and backward, to view the rows that were selected.
// 
// The user may change any row's data or delete any row.  Rows
// may be added either by overtyping an existing row or using
// a blank row.  Overtyped rows are not changed.
// 
// If warehouse code is changed, the temporary storage queue
// is deleted and the process repeats as initial entry, above.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          09/09/87  SPOPA   New application.
//          11/30/88  JWOOD   ADDED NONCSP OPTION TO CALLS
//          11/30/88  JWOOD   ADDED XSSEGTR LOGIC
// PK#161   06/27/90  SPOPA   Changed edit to use restocking
//                            edit flag from PK08T.
// e00000   01/21/91  jcampb  Increased Lng of spur to 4 on map
//          04/01/91  RCREAM  added edit to enter units/tickets
//                            if PK08T is '40'.
//          04/01/91  RCREAM  Restricted warehouse '51' from
//                            entering code if pick type is
//                            '01' or '02'.
//          04/01/91  RCREAM  Broke apart production rate field
//                            on the map.
//          04/01/91  RCREAM  Added pop-up window for pick type
//          04/15/93  gray    add whse 25 to hardcoded stuff.
//                            whse 25 will resemble whse 09.
// CANADA   08/11/95  CBRINE  Added XCTCD to PKWREC
//                    PJAMES  Added hard-coded logic for whse42
// Y2KFIX   02/02/98  MBURLE  Regenerated to pick up latest
//                            version of date routine, XX0XS01.
// *********************
Program PK08 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PK08W01 PK08W01; // record
  PK08W02 PK08W02; // record
  PKEREC PKEREC; // record
  PKWREC PKWREC; // record
  SL4REC SL4REC; // record
  SL5REC SL5REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PK08T01 {deleteAfterUse = yes}; // table
  use PK08T02 {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use PK08M.PK08M001,  // forms
      PK08M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage areas.*/
     /* Flow to converse the Production Rate Per Location process.*/
     /* ------------------------------------------------------------*/

    set PK08W01 empty; /* Initialize working storage*/
    set PK08W02 empty; /* Initialize temporary storage*/
    set PK08M001 initial; /* Initialize map output area*/

    PK08W01.XWHCD = PKWREC.XWHCD; /* Initialize warehouse code*/
    PK08W01.XWHABRV = PKWREC.XWHABRV; /* and warehouse abbreviation*/

    PK08W01.XXXRVNBR = "00"; /* Application revision number*/

    PK08W01.PK08WSWR = "Y"; /* Indicate request for data*/

    goto PK08001;
                                     /* Converse Production Rate Per Location*/


    PK08001: PK08001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Production Rate Per Location process.*/
     /* ------------------------------------------------------------*/

    goto PK08001;
                                     /* Converse Production Rate Per Location*/


  end // end main
end // end PK08

// Zone/Row Attribute Maintenance
Function PK08001()
   /* ------------------------------------------------------------*/
   /* If data was requested, obtain the data to display.*/
   /* Format the map output area and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process input request if no errors found and not a cancel.*/
   /* ------------------------------------------------------------*/

  if (PK08W01.PK08WSWR == "Y") /* Request for data*/
    PK08100(); /* Obtain the data to display*/
  end

  PK08200(); /* Format and display the map*/

  PK08300(); /* Check attention identifier*/

  PK08400(); /* Reset fields to normal intensity*/

  PK08500(); /* Verify the entered data*/

  if (converseVar.validationMsgNum == 0 /* No errors were found*/
   && converseVar.eventKey not pa2)     /* and not a cancel request*/
    PK08600(); /* Process valid input request*/
  end


end // end PK08001

// Obtain the data to display
Function PK08100()
   /* ------------------------------------------------------------*/
   /* Purge any existing queue in temporary storage.*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  PK08110(); /* Purge any temporary storage*/

  PK08120(); /* Select set and open the cursor*/

  if (converseVar.validationMsgNum == 0) /* No errors were found*/

    PK08W01.PK08WSWC = "N"; /* Initialize end of file switch*/
    PK08W01.PK08WIXM = 1; /* Initialize display line number*/

    set PK08W02 empty; /* Clear temporary storage record*/

    while (PK08W01.PK08WSWC == "N") /* Until cursor end of file*/

      PK08130(); /* Obtain data and format page*/

      if (PK08W01.PK08WIXM > 15) /* Page is full*/
        PK08140(); /* Add page to temporary storage*/
      end

      if (converseVar.validationMsgNum != 0) /* Errors were found*/
        PK08W01.PK08WSWC = "Y"; /* Force end of file*/
      end

    end

  end

  if (converseVar.validationMsgNum == 0 /* No errors were found*/
   && PK08W01.PK08WIXM > 1)             /* and page was formatted*/
    PK08140(); /* Add page to temporary storage*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    PK08150(); /* Close the selected set cursor*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors were found*/

    PK08W01.PK08WTSP = 1; /* Initialize page number*/
    PK08W01.PK08WSWR = "N"; /* Request for data completed*/

  end


end // end PK08100

// Purge any temporary storage
Function PK08110()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PK08"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (PK08W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "PK08110"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PK08M001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  PK08W01.PK08WTSP = 0; /* Reset current page number*/
  PK08W01.TA5TSQIX = 0; /* Reset highest page number*/


end // end PK08110

// Select set and open cursor
Function PK08120()
   /* ------------------------------------------------------------*/
   /* Select the set of production rate rows for the warehouse.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  PKEREC.XWHCD = PK08W01.XWHCD; /* Warehouse code*/

  call "IO2150" ("S1", SQLCA, PKEREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK08120"; /* Process name*/
    TA1REC.TA1LOC = "SELECT PRODUCTION RATE TABLE SET";
    TA1REC.TA1MAP = "PK08M001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPDRAT01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKEREC.XWHCD; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK08M001.XXXPRCNM = "PK08120"; /* Process name*/

    return; /* Return to previous process*/

  end


end // end PK08120

// Fetch next row and format
Function PK08130()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected production rate set.*/
   /* If end of file, set production rate eof switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  call "IO2150" ("N1", SQLCA, PKEREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

    PK08W01.PK08WSWC = "Y"; /* Indicate end of file*/

    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PK08130"; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT PRODUCTION RATE ROW";
    TA1REC.TA1MAP = "PK08M001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPDRAT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK08M001.XXXPRCNM = "PK08130"; /* Process name*/
    converseLib.validationFailed(29); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end

  PK08W02.PKEFRARE[PK08WIXM] = PKEREC.PKEFRARE; /* From area*/
  PK08W02.PKEFRZON[PK08WIXM] = PKEREC.PKEFRZON; /* From zone*/
  PK08W02.PKEFRROW[PK08WIXM] = PKEREC.PKEFRROW; /* From row*/
  PK08W02.PKETOARE[PK08WIXM] = PKEREC.PKETOARE; /* To area*/
  PK08W02.PKETOZON[PK08WIXM] = PKEREC.PKETOZON; /* To zone*/
  PK08W02.PKETOROW[PK08WIXM] = PKEREC.PKETOROW; /* To row*/
  PK08W02.PKERNSRN[PK08WIXM] = PKEREC.PKERNSRN; /* Spur number*/
  PK08W02.PK08WUNT[PK08WIXM] = PKEREC.PKEPKPRT[1]; /* Prod rate unit*/
  PK08W02.PK08WTCK[PK08WIXM] = PKEREC.PKEPKPRT[2];
                                   /* Prod rate ticket*/
  PK08W02.PKEPBYTY[PK08WIXM] = PKEREC.PKEPBYTY; /* Pick by type*/

  PK08W01.PK08WIXM = PK08W01.PK08WIXM + 1; /* Increment line index*/


end // end PK08130

// Add page to temporary storage
Function PK08140()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PK08W02.PK08WLEN = 360; /* Temporary storage length*/
  TA5REC.TA5APPID = "PK08"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (PK08W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PK08140"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PK08M001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK08M001.XXXPRCNM = "PK08140"; /* Process name*/
    converseLib.validationFailed(29); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end

  PK08W01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

  PK08W01.PK08WIXM = 1; /* Reset display line number*/

  set PK08W02 empty; /* Clear temporary storage record*/


end // end PK08140

// Close selected set cursor
Function PK08150()
   /* ------------------------------------------------------------*/
   /* Close the selected production rate table set.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "IO2150" ("C1", SQLCA, PKEREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PK08150"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE PRODUCTION RATE TABLE SET";
    TA1REC.TA1MAP = "PK08M001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPDRAT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK08M001.XXXPRCNM = "PK08150"; /* Process name*/
    converseLib.validationFailed(29); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end


end // end PK08150

// Format and display the map
Function PK08200()
   /* ------------------------------------------------------------*/
   /* Indicate sound audible alarm for any error.*/
   /* If no error to display, format and display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set PK08M001 alarm; /* Indicate sound alarm*/
  end

  if (converseVar.validationMsgNum == 0 /* No error message to display*/
   || PK08M001.XXXRVNBR == " ")         /* or first time through*/

    if (PK08M001.XXXRVNBR == " ") /* First time through*/

      if (COMMAREA.CAITEM > " ") /* Application data exists*/

        PK08M001.CAITEM = COMMAREA.CAITEM; /* Application data*/
        set PK08M001.CAITEM modified; /* Set MDT on*/
        COMMAREA.CAITEM = " "; /* Clear application data*/

      end

    else

      set PK08M001 initial; /* Clear map output area*/

    end

    PK08M001.XXXRVNBR = PK08W01.XXXRVNBR; /* Revision number*/

    PK08M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    PK08M001.XWHCD = PK08W01.XWHCD; /* Warehouse code*/
    PK08M001.XWHABRV = PK08W01.XWHABRV; /* Warehouse abbreviation*/

    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      PK08210(); /* Format the data on the page*/
    end

    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (PK08W01.PK08WMNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PK08W01.PK08WMNO);
      end /* Information message number*/
    end

  end

  if (PKWREC.XWHABRV == " ") /* Warehouse missing or invalid*/

    set PK08M001.XWHCD cursor, modified, bold; /* Highlight warehouse*/
    PK08M001.XWHABRV = " "; /* Clear warehouse abbreviation*/
    PK08M001.XXXPRCNM = "PK08200"; /* Process name*/

  end

  PK08W01.PK08WMNO = 0; /* Reset information message number*/

  converse PK08M001 ;


end // end PK08200

// Format production rate data
Function PK08210()
   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the production rate data in the map.*/
   /* ------------------------------------------------------------*/

  if (PK08W01.TA5TSQIX == 0) /* No pages to display*/

    set PK08M001.XWHCD cursor; /* Position cursor on warehouse*/
    PK08M001.XXXPRCNM = "PK08210"; /* Process name*/
    converseLib.validationFailed(198); /* Indicate no locations to display*/

    return; /* Return to previous process*/

  end

  if (PK08W01.PK08WPAG != 0) /* Starting page number*/

    if (PK08W01.PK08WPAG > PK08W01.TA5TSQIX) /* Greater than highest*/

      PK08W01.PK08WTSP = PK08W01.TA5TSQIX; /* Current is highest*/
    else
      PK08W01.PK08WTSP = PK08W01.PK08WPAG; /* Current is starting*/

    end

    PK08W01.PK08WPAG = 0; /* Reset starting page*/

  end

  PK08211(); /* Obtain temporary storage page*/

  set PK08M001.PK08MPGL skip; /* Display "PAGE" literal*/
  set PK08M001.PK08MOFL skip; /* Display "OF" literal*/

  PK08M001.PK08WTSP = PK08W01.PK08WTSP; /* Current page number*/
  PK08M001.TA5TSQIX = PK08W01.TA5TSQIX; /* Highest page number*/

  PK08W01.PK08WIXM = 1; /* Initialize map index*/

  while (PK08W01.PK08WIXM <= 15 /* Until end of array*/
   && PK08W02.PKEPBYTY[PK08WIXM] > " ") /* or all lines are formatted*/

    PK08212(); /* Format production rate line*/

  end


end // end PK08210

// Read temporary storage page
Function PK08211()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PK08W02.PK08WLEN = 360; /* Temporary storage length*/
  TA5REC.TA5APPID = "PK08"; /* Application identification*/
  TA5REC.TA5TSQIX = PK08W01.PK08WTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (PK08W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PK08211"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PK08M001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK08M001.XXXPRCNM = "PK08211"; /* Process name*/
    converseLib.validationFailed(29); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK08211

// Format production rate line
Function PK08212()
   /* ------------------------------------------------------------*/
   /* Format the fields from the temporary storage record line to*/
   /* the output display line.*/
   /* ------------------------------------------------------------*/

  PK08M001.PKEFRARE[PK08WIXM] = PK08W02.PKEFRARE[PK08WIXM];
  PK08M001.PKEFRZON[PK08WIXM] = PK08W02.PKEFRZON[PK08WIXM];
  PK08M001.PKEFRROW[PK08WIXM] = PK08W02.PKEFRROW[PK08WIXM];
  PK08M001.PKETOARE[PK08WIXM] = PK08W02.PKETOARE[PK08WIXM];
  PK08M001.PKETOZON[PK08WIXM] = PK08W02.PKETOZON[PK08WIXM];
  PK08M001.PKETOROW[PK08WIXM] = PK08W02.PKETOROW[PK08WIXM];
  PK08M001.PKERNSRN[PK08WIXM] = PK08W02.PKERNSRN[PK08WIXM];
  PK08M001.PK08MUNT[PK08WIXM] = PK08W02.PK08WUNT[PK08WIXM];
  PK08M001.PK08MTCK[PK08WIXM] = PK08W02.PK08WTCK[PK08WIXM];
  PK08M001.PKEPBYTY[PK08WIXM] = PK08W02.PKEPBYTY[PK08WIXM];

  PK08W01.PK08WIXM = PK08W01.PK08WIXM + 1; /* Increment line index*/


end // end PK08212

// Check attention identifier
Function PK08300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PK08M001 initial; /* Clear map storage area*/

    PKWREC.XWHCD = PK08W01.XWHCD; /* Restore warehouse code*/
    PKWREC.XWHABRV = PK08W01.XWHABRV; /* and warehouse abbreviation*/

    return; /* Return to previous process*/

  end

  if (PK08M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PK08310(); /* Execute FAST PATH request*/

    else

      set PK08M001.CATOAP cursor, modified, bold; /* Highlight application*/
      converseLib.validationFailed(13); /* Indicate PF key not valid*/
      PK08M001.XXXPRCNM = "PK08300"; /* Process name*/

      exit stack; /* Exit to redisplay map*/

    end

  end

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf19 /* or PF19 was pressed*/
   || converseVar.eventKey is pf20) /* or PF20 was pressed*/

    PK08110(); /* Purge any temporary storage*/

  end

  if (converseVar.eventKey is pf3  /* PF3 was pressed*/
   || converseVar.eventKey is pf19 /* or PF19 was pressed*/
   || converseVar.eventKey is pf20) /* or PF20 was pressed*/

    PK08320(); /* Exit to another application*/

  end

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/

    XSPF1(); /* Exit to the HELP facility*/

    PK08M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    PK08M001.XXXPRCNM = "PK08300"; /* Process name*/
    converseLib.validationFailed(); /* Force alarm to sound*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/

    XSPF4(); /* Exit to system main menu*/

    PK08M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    PK08M001.XXXPRCNM = "PK08300"; /* Process name*/
    converseLib.validationFailed(); /* Force alarm to sound*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf12) /* and PF12 was not pressed*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    PK08M001.XXXPRCNM = "PK08300"; /* Process name*/
    converseLib.validationFailed(12); /* Indicate invalid attention key*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK08300

// Execute FAST PATH request
Function PK08310()
   /* ------------------------------------------------------------*/
   /* Transfer to requested application via FAST PATH.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (PK08M001.CATOAP == COMMAREA.CACURRAP)
                                   /* TO application same as current*/

    set PK08M001.CATOAP cursor, modified, bold; /* Highlight TO application*/
    converseLib.validationFailed(1); /* Indicate invalid request*/
    PK08M001.XXXPRCNM = "PK08310"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  PKWREC.XWHCD = PK08M001.XWHCD; /* Save warehouse code*/

  COMMAREA.CATOAP = PK08M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PK08M001.CAITEM; /* Application data*/

  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* Application user area*/

  XSEXIT(); /* Transfer to requested application*/

  set PK08M001.CATOAP cursor, modified, bold; /* Highlight to application*/

  PK08M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
  converseLib.validationFailed(); /* Force alarm to sound*/
  PK08M001.XXXPRCNM = "PK08310"; /* Process name*/

  COMMAREA.CATOAP = " "; /* Clear TO application*/
  COMMAREA.CAITEM = " "; /* and application data*/

  exit stack; /* Exit to redisplay map*/


end // end PK08310

// Exit to another application
Function PK08320()
   /* ------------------------------------------------------------*/
   /* Set the "TO" application according to the PF key pressed.*/
   /* If warehouse code was modified, save in common work area.*/
   /* Transfer to the application.  Display any returned error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CATOAP = "PK0A"; /* PICKING Master Menu*/
  end

  if (converseVar.eventKey is pf19) /* PF19 was pressed*/
    COMMAREA.CATOAP = "PK0S"; /* PICK PLANNING Menu*/
  end

  if (converseVar.eventKey is pf20) /* PF20 was pressed*/
    COMMAREA.CATOAP = "PK07"; /* PICK SELECTION Menu*/
  end

  PKWREC.XWHCD = PK08M001.XWHCD; /* Save warehouse code*/

  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* COMMAREA user area*/

  XSEXIT(); /* Invoke selected application*/

  PK08M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
  converseLib.validationFailed(); /* Force alarm to sound*/
  PK08M001.XXXPRCNM = "PK08320"; /* Process name*/

  exit stack; /* Exit to redisplay map*/


end // end PK08320

// Reset highlighted fields
Function PK08400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK08M001.XWHCD initialAttributes; /* Warehouse code*/

  PK08W01.PK08WIXM = 1; /* Initialize index*/

  while (PK08W01.PK08WIXM <= 15) /* Until end of array*/

    set PK08M001.PK08MACT[PK08WIXM] initialAttributes; /* Action code*/
    set PK08M001.PKEFRARE[PK08WIXM] initialAttributes; /* From area*/
    set PK08M001.PKEFRZON[PK08WIXM] initialAttributes; /* From zone*/
    set PK08M001.PKEFRROW[PK08WIXM] initialAttributes; /* From row*/
    set PK08M001.PKETOARE[PK08WIXM] initialAttributes; /* To area*/
    set PK08M001.PKETOZON[PK08WIXM] initialAttributes; /* To zone*/
    set PK08M001.PKETOROW[PK08WIXM] initialAttributes; /* To row*/
    set PK08M001.PKERNSRN[PK08WIXM] initialAttributes; /* Spur number*/
    set PK08M001.PK08MUNT[PK08WIXM] initialAttributes; /* Production rate*/
    set PK08M001.PK08MTCK[PK08WIXM] initialAttributes; /* Production rate*/
    set PK08M001.PKEPBYTY[PK08WIXM] initialAttributes; /* Pick by type*/

    PK08W01.PK08WIXM = PK08W01.PK08WIXM + 1; /* Increment line index*/

  end

  set PK08M001.CATOAP initialAttributes; /* Commarea TO application*/
  set PK08M001.CAITEM initialAttributes; /* Commarea application data*/


   /* ------------------------------------------------------------*/
   /* IF NO LISTS WERE REQUESTED, RETURN TO THE PREVIOUS PROCESS*/
   /* ------------------------------------------------------------*/

  if ("?" in PK08M001.PKEPBYTY) /* pick type list*/

    if (converseVar.eventKey not enter) /* enter not pressed*/

      PK08W01.PK08WMNO = "400"; /* mod id*/
      converseLib.validationFailed(320); /* not valid without enter key*/

      exit stack;
    else

      PK08W01.PK08WIXM = sysVar.arrayIndex; /* set index*/

    end

  else

    return;

  end

   /* ------------------------------------------------------------*/
   /* DISPLAY THE POP-UP WINDOW FOR PICK TYPES*/
   /* ------------------------------------------------------------*/

  XPXX001(); /* window initialization*/
  XX0XW02.XX0XWHDR = "        PICK BY TYPE"; /* title*/

  while (XX0XW02.XX0XWEND == "N")
    PK08410(); /* display the list*/
  end

  if (XX0XW02.XX0XWPIX == 0)

    PK08M001.PKEPBYTY[PK08WIXM] = PK08W02.PKEPBYTY[PK08WIXM];
  else
    PK08M001.PKEPBYTY[PK08WIXM] = PK08T01.PKEPBYTY[XX0XWPIX];

  end

  converseLib.clearScreen();
  
  PK08W01.PK08WMNO = "400";


end // end PK08400

// converse pop up window
Function PK08410()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && PK08T01.PKEPBYTY[XX0XWCT1] != "99") /* Or end of data*/
             /* IF XWHTBL.XXXSTAT(XX0XWCT1) = 'A';active status code*/
        XX0XM001.XX0XMCD[XX0XWCT2] = PK08T01.PKEPBYTY[XX0XWCT1];
        XX0XM001.XX0XMDES[XX0XWCT2] = PK08T01.PK08TDES[XX0XWCT1];
        XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
        if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
          XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
        end
        set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
        XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Increment screen index*/
             /* END ;*/
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
             /* IF XWHTBL.XXXSTAT(XX0XWCT1) = 'A';active status code*/
        XX0XM001.XX0XMCD[XX0XWCT2] = PK08T01.PKEPBYTY[XX0XWCT1];
        XX0XM001.XX0XMDES[XX0XWCT2] = PK08T01.PK08TDES[XX0XWCT1];
        XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
        set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
        XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1; /* Decrement screen index*/
             /* END ;*/
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && PK08T01.PKEPBYTY[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end PK08410

// Verify the entered data
Function PK08500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Verify any changed lines.*/
   /* If warehouse code was changed, ensure that no lines were*/
   /* changed.*/
   /* Save and verify warehouse code.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* If an edit request, indicate data was edited.*/
   /* ------------------------------------------------------------*/

  if (PK08M001.CAITEM > " ") /* Application data was entered*/

    set PK08M001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/
    PK08M001.XXXPRCNM = "PK08500"; /* Process name*/

  end

  if (converseVar.eventKey not pa2) /* Not a cancel request*/

    PK08W01.PK08WIXM = 15; /* Initialize map line index*/

    while (PK08W01.PK08WIXM > 0) /* Until end of array*/

      if (PK08M001.XWHCD == PK08W01.XWHCD) /* Warehouse was not changed*/

        PK08510(); /* Verify changed lines*/

      else

        PK08W01.PK08WERR = 162; /* Error message number*/
        PK08S01(); /* Highlight any changed lines*/

      end

      PK08W01.PK08WIXM = PK08W01.PK08WIXM - 1; /* Decrement line number*/

    end

    PKWREC.XWHCD = PK08M001.XWHCD; /* Warehouse code*/

  end

  XPPK002(); /* Verify warehouse code*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PK08520(); /* Verify scroll request*/

  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf12) /* Edit request*/

    PK08M001.XXXPRCNM = "PK08500"; /* Process name*/
    converseLib.validationFailed(160); /* Indicate data was edited*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK08500

// Verify changed lines
Function PK08510()
   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* If an add, verify type and production rate were entered.*/
   /* Verify that area/zone/row were entered.*/
   /* Ensure that no duplicate area/zone/rows were entered.*/
   /* Verify that action was entered.*/
   /* If an add, verify that the location is valid.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  if (PK08M001.PKEPBYTY[PK08WIXM] in PK08T01.PKEPBYTY) /* Code in table*/
    PK08W01.PK08TRFL = PK08T01.PK08TRFL[sysVar.arrayIndex]; /* Restocking flag*/
  else
    PK08W01.PK08TRFL = "N"; /* Default to no*/
  end

  PK08W01.PK08WSWE = "N"; /* Initialize error switch*/

  if (PK08M001.PK08MACT[PK08WIXM] <= " " /* Action not entered*/
   && PK08M001.PKEFRARE[PK08WIXM] == PK08W02.PKEFRARE[PK08WIXM]
   && PK08M001.PKEFRZON[PK08WIXM] == PK08W02.PKEFRZON[PK08WIXM]
   && PK08M001.PKEFRROW[PK08WIXM] == PK08W02.PKEFRROW[PK08WIXM]
   && PK08M001.PKETOARE[PK08WIXM] == PK08W02.PKETOARE[PK08WIXM]
   && PK08M001.PKETOZON[PK08WIXM] == PK08W02.PKETOZON[PK08WIXM]
   && PK08M001.PKETOROW[PK08WIXM] == PK08W02.PKETOROW[PK08WIXM]
   && PK08M001.PKERNSRN[PK08WIXM] == PK08W02.PKERNSRN[PK08WIXM]
   && PK08M001.PK08MUNT[PK08WIXM] == PK08W02.PK08WUNT[PK08WIXM]
   && PK08M001.PK08MTCK[PK08WIXM] == PK08W02.PK08WTCK[PK08WIXM]
   && PK08M001.PKEPBYTY[PK08WIXM] == PK08W02.PKEPBYTY[PK08WIXM])

    return; /* Return to previous process*/

  end


  if (PK08M001.XWHCD == "51"
   || PK08M001.XWHCD == "42") /* canada*/

    if (PK08M001.PKEPBYTY[PK08WIXM] == "01"
     || PK08M001.PKEPBYTY[PK08WIXM] == "02")

      set PK08M001.PKEPBYTY[PK08WIXM] cursor, modified, bold; /* Highlight*/
      PK08M001.XXXPRCNM = "PK08510"; /* Process name*/
      converseLib.validationFailed(376); /* Indicate missing or invalid*/

      return; /* return to previous process*/

    end

  end


  if (PK08M001.PKEPBYTY[PK08WIXM] == "01"
   || PK08M001.PKEPBYTY[PK08WIXM] == "02")

    if (PK08M001.XWHCD == "03"
     || PK08M001.XWHCD == "09"
     || PK08M001.XWHCD == "12"
     || PK08M001.XWHCD == "15"
     || PK08M001.XWHCD == "25")
      /* next sentence;*/

    else
      set PK08M001.PKEPBYTY[PK08WIXM] cursor, modified, bold; /* Highlight*/
      PK08M001.XXXPRCNM = "PK08510"; /* Process name*/
      converseLib.validationFailed(376); /* Indicate missing or invalid*/

      return; /* return to previous process*/

    end

  else
                                 /* if any other pick-by type*/
    if (PK08M001.XWHCD == "02"
     || PK08M001.XWHCD == "04"
     || PK08M001.XWHCD == "07"
     || PK08M001.XWHCD == "51"
     || PK08M001.XWHCD == "42") /* canada*/
      /* next sentence;*/

    else
      set PK08M001.PKEPBYTY[PK08WIXM] cursor, modified, bold; /* Highlight*/
      PK08M001.XXXPRCNM = "PK08510"; /* Process name*/
      converseLib.validationFailed(376); /* Indicate missing or invalid*/

      return; /* return to previous process*/

    end

  end


  if (PK08M001.PK08MACT[PK08WIXM] == "A" /* Action add*/
   || PK08M001.PK08MACT[PK08WIXM] == "C") /* or change*/

    PK08511(); /* Verify pick by type*/

    if (PK08M001.PK08MTCK[PK08WIXM] <= 0 /* Not greater than 0*/
     && PK08M001.PK08MUNT[PK08WIXM] <= 0) /* Not greater than 0*/

      set PK08M001.PK08MTCK[PK08WIXM] cursor, modified, bold; /* Highlight*/
      set PK08M001.PK08MUNT[PK08WIXM] cursor, modified, bold; /* Highlight*/
      PK08M001.XXXPRCNM = "PK08510"; /* Process name*/
      converseLib.validationFailed(204); /* Indicate missing or invalid*/
    end

    if (PK08M001.PKERNSRN[PK08WIXM] == 0 /* Spur number entered*/
     && PK08W01.PK08TRFL == "Y"          /* not restocking zone*/
     && PK08M001.PKEPBYTY[PK08WIXM] != "31") /* Pick type*/
      set PK08M001.PKERNSRN[PK08WIXM] cursor, modified, bold;
      PK08M001.XXXPRCNM = "PK08510"; /* Process name*/
      converseLib.validationFailed(246); /* Spur number warning*/
    else
      if (PK08M001.PKEPBYTY[PK08WIXM] == "31") /* Pick type*/
        if (PK08W01.PK08WSWS == "Y") /* Spur error detected and handled*/
          PK08W01.PK08WSWS = "N"; /* Reset error handled switch*/
        else
          set PK08M001.PKERNSRN[PK08WIXM] cursor, modified, bold; /**/
          PK08M001.XXXPRCNM = "PK08510"; /* Process name*/
          converseLib.validationFailed(449); /* Indicate not allowed*/
          PK08W01.PK08WSWS = "Y"; /* Spur error detected and handled*/
        end
      end
    end

    if (PK08M001.PKEPBYTY[PK08WIXM] == "10" /* Let down*/
     || PK08M001.PKEPBYTY[PK08WIXM] == "11" /* or let down to belt pick*/
     || PK08W01.PK08TRFL == "Y"             /* or restocking zone*/
     || PK08M001.PKETOARE[PK08WIXM] > " "   /* or TO area entered*/
     || PK08M001.PKETOZON[PK08WIXM] > " "   /* or TO zone entered*/
     || PK08M001.PKETOROW[PK08WIXM] > " ")  /* or TO row entered*/

      if (PK08M001.PKETOZON[PK08WIXM] <= " ") /* Zone not entered*/

        PK08W01.PK08WSWE = "Y"; /* Indicate error found*/

        set PK08M001.PKETOZON[PK08WIXM] cursor, modified, bold;
                                   /* Highlight*/
        PK08M001.XXXPRCNM = "PK08510"; /* Process name*/
        converseLib.validationFailed(136); /* Indicate missing or invalid*/

      end

      if (PK08M001.PKETOARE[PK08WIXM] <= " ") /* Area not entered*/

        PK08W01.PK08WSWE = "Y"; /* Indicate error found*/

        set PK08M001.PKETOARE[PK08WIXM] cursor, modified, bold;
                                   /* Highlight*/
        PK08M001.XXXPRCNM = "PK08510"; /* Process name*/
        converseLib.validationFailed(135); /* Indicate missing or invalid*/

      end

    end

    if (PK08M001.PKEFRARE[PK08WIXM] > " " /* FROM area entered*/
     || PK08M001.PKEFRZON[PK08WIXM] > " " /* or FROM zone entered*/
     || PK08M001.PKEFRROW[PK08WIXM] > " ") /* or FROM row entered*/

      if (PK08M001.PKETOARE[PK08WIXM] == PK08M001.PKEFRARE[PK08WIXM]
       && PK08M001.PKETOZON[PK08WIXM] == PK08M001.PKEFRZON[PK08WIXM]
       && PK08M001.PKETOROW[PK08WIXM] == PK08M001.PKEFRROW[PK08WIXM])

        PK08W01.PK08WSWE = "Y"; /* Indicate error found*/

        set PK08M001.PKETOARE[PK08WIXM] cursor, modified, bold;
                                   /* Highlight*/
        set PK08M001.PKETOZON[PK08WIXM] modified, bold; /* Highlight*/
        set PK08M001.PKETOROW[PK08WIXM] modified, bold; /* Highlight*/
        PK08M001.XXXPRCNM = "PK08510"; /* Process name*/
        converseLib.validationFailed(247); /* Indicate cannot equal FROM*/

      end

    end

    if (PK08W01.PK08TRFL == "N"           /* Not restocking zone*/
     || PK08M001.PKEFRARE[PK08WIXM] > " " /* or FROM area entered*/
     || PK08M001.PKEFRZON[PK08WIXM] > " " /* or FROM zone entered*/
     || PK08M001.PKEFRROW[PK08WIXM] > " ") /* or FROM row entered*/

      if (PK08M001.PKEFRZON[PK08WIXM] <= " ") /* Zone not entered*/

        PK08W01.PK08WSWE = "Y"; /* Indicate error found*/

        set PK08M001.PKEFRZON[PK08WIXM] cursor, modified, bold;
                                   /* Highlight*/
        PK08M001.XXXPRCNM = "PK08510"; /* Process name*/
        converseLib.validationFailed(136); /* Indicate missing or invalid*/

      end

      if (PK08M001.PKEFRARE[PK08WIXM] <= " ") /* Area not entered*/

        PK08W01.PK08WSWE = "Y"; /* Indicate error found*/

        set PK08M001.PKEFRARE[PK08WIXM] cursor, modified, bold;
                                   /* Highlight*/
        PK08M001.XXXPRCNM = "PK08510"; /* Process name*/
        converseLib.validationFailed(135); /* Indicate missing or invalid*/

      end

    end

    PK08W01.PK08WIX2 = PK08W01.PK08WIXM - 1; /* Initialize index*/

    while (PK08W01.PK08WIX2 > 0) /* Until all lines checked*/

      if (PK08M001.PK08MACT[PK08WIX2] > " " /* Action was entered*/
       && PK08M001.PKEFRARE[PK08WIX2] == PK08M001.PKEFRARE[PK08WIXM]
       && PK08M001.PKEFRZON[PK08WIX2] == PK08M001.PKEFRZON[PK08WIXM]
       && PK08M001.PKEFRROW[PK08WIX2] == PK08M001.PKEFRROW[PK08WIXM]
       && PK08M001.PKETOARE[PK08WIX2] == PK08M001.PKETOARE[PK08WIXM]
       && PK08M001.PKETOZON[PK08WIX2] == PK08M001.PKETOZON[PK08WIXM]
       && PK08M001.PKETOROW[PK08WIX2] == PK08M001.PKETOROW[PK08WIXM])

        PK08W01.PK08WSWE = "Y"; /* Indicate error found*/

        set PK08M001.PKEFRARE[PK08WIXM] cursor, modified, bold;
        set PK08M001.PKEFRZON[PK08WIXM] modified, bold;
        set PK08M001.PKEFRROW[PK08WIXM] modified, bold;
        set PK08M001.PKETOARE[PK08WIXM] modified, bold;
        set PK08M001.PKETOZON[PK08WIXM] modified, bold;
        set PK08M001.PKETOROW[PK08WIXM] modified, bold;

        PK08M001.XXXPRCNM = "PK08510"; /* Process name*/
        converseLib.validationFailed(140); /* Indicate duplicate area/zone/row*/

      end

      PK08W01.PK08WIX2 = PK08W01.PK08WIX2 - 1; /* Decrement index*/

    end

    PK08515(); /* verify fields entered against pick by*/
                                   /* type*/


  end

  if (PK08M001.PK08MACT[PK08WIXM] != "A" /* Action not add*/
   && PK08M001.PK08MACT[PK08WIXM] != "C" /* and not change*/
   && PK08M001.PK08MACT[PK08WIXM] != "D") /* and not delete*/

    PK08W01.PK08WSWE = "Y"; /* Indicate error found*/

    set PK08M001.PK08MACT[PK08WIXM] cursor, modified, bold; /* Highlight*/
    PK08M001.XXXPRCNM = "PK08510"; /* Process name*/
    converseLib.validationFailed(35); /* Indicate missing or invalid*/

  end

  if (PK08W01.PK08WSWE == "N" /* No error was found*/
   && PK08M001.PK08MACT[PK08WIXM] == "A") /* and add requested*/

    if (PK08M001.PKETOARE[PK08WIXM] > " ") /* TO location entered*/
      PK08512(); /* Verify TO area/zone/row*/
    end

    if (PK08M001.PKEFRARE[PK08WIXM] > " ") /* FROM location entered*/
      PK08513(); /* Verify FROM area/zone/row*/
    end

  end

  if (PK08W01.PK08WSWE == "N") /* No error was found*/

    PK08514(); /* Verify production rate entry*/

    if (PK08M001.PK08MACT[PK08WIXM] == "A") /* Entry being added*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Entry was found*/

        set PK08M001.PK08MACT[PK08WIXM] cursor, modified, bold;
                                   /* Highlight*/
        PK08M001.XXXPRCNM = "PK08510"; /* Process name*/
        converseLib.validationFailed(140); /* Indicate duplicate entry*/

      end

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* No entry was found*/

        set PK08M001.PK08MACT[PK08WIXM] cursor, modified, bold;
                                   /* Highlight*/
        PK08M001.XXXPRCNM = "PK08510"; /* Process name*/
        converseLib.validationFailed(207); /* Indicate entry not found*/

      end

    end

  end


end // end PK08510

// Verify Pick By Type
Function PK08511()
   /* ------------------------------------------------------------*/
   /* If pick by type is in table, return to previous process.*/
   /* Otherwise, indicate the field is missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (PK08M001.PKEPBYTY[PK08WIXM] in PK08T01.PKEPBYTY)
    return;
  end

  set PK08M001.PKEPBYTY[PK08WIXM] cursor, modified, bold; /* Highlight*/
  PK08M001.XXXPRCNM = "PK08511"; /* Process name*/
  converseLib.validationFailed(203); /* Indicate missing or invalid*/


end // end PK08511

// Verify TO area/zone/row
Function PK08512()
   /* ------------------------------------------------------------*/
   /* Determine whether the area/zone/row location that was*/
   /* entered is a valid location.*/
   /* If not found, indicate invalid location to the user.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set SL5REC empty; /* Clear record area*/

  SL5REC.XWHCD = PK08W01.XWHCD; /* Warehouse code*/
  SL5REC.XARCD = PK08M001.PKETOARE[PK08WIXM]; /* Area code*/
  SL5REC.SL4ZONE = PK08M001.PKETOZON[PK08WIXM]; /* Zone code*/

  if (PK08M001.PKETOROW[PK08WIXM] > " ") /* Row entered*/

    SL5REC.SL5ROWCD = PK08M001.PKETOROW[PK08WIXM]; /* Row code*/
  else
    SL5REC.SL5ROWCD = "%%"; /* Indicate any row*/

  end

  SL5REC.SL5PBIN = "%%%%"; /* Indicate LIKE*/

  call "IO1490" ("SA", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Location not in table*/

    PK08W01.PK08WSWE = "Y"; /* Indicate error found*/

    set PK08M001.PKETOARE[PK08WIXM] cursor, modified, bold; /* Highlight*/
    set PK08M001.PKETOZON[PK08WIXM] modified, bold; /* Highlight*/
    set PK08M001.PKETOROW[PK08WIXM] modified, bold; /* Highlight*/

    PK08M001.XXXPRCNM = "PK08512"; /* Process name*/
    converseLib.validationFailed(51); /* Location is invalid*/

    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE != 0 /* Not normal return*/
   && SQLCA.VAGen_SQLCODE != -811) /* and not multiple found*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK08512"; /* Process name*/
    TA1REC.TA1LOC = "VERIFY AREA/ZONE/ROW LOCATION";
    TA1REC.TA1MAP = "PK08M001"; /* Map name*/
    TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VLOCAT01"; /* Table view name*/
    TA1REC.TA1TBLKE = SL5REC.SL5KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK08M001.XXXPRCNM = "PK08512"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK08512

// Verify FROM area/zone/row
Function PK08513()
   /* ------------------------------------------------------------*/
   /* Determine whether the area/zone/row location that was*/
   /* entered is a valid location.*/
   /* If not found, indicate invalid location to the user.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set SL5REC empty; /* Clear record area*/

  SL5REC.XWHCD = PK08W01.XWHCD; /* Warehouse code*/
  SL5REC.XARCD = PK08M001.PKEFRARE[PK08WIXM]; /* Area code*/
  SL5REC.SL4ZONE = PK08M001.PKEFRZON[PK08WIXM]; /* Zone code*/

  if (PK08M001.PKEFRROW[PK08WIXM] > " ") /* Row entered*/

    SL5REC.SL5ROWCD = PK08M001.PKEFRROW[PK08WIXM]; /* Row code*/
  else
    SL5REC.SL5ROWCD = "%%"; /* Indicate any row*/

  end

  SL5REC.SL5PBIN = "%%%%"; /* Indicate LIKE*/

  call "IO1490" ("SA", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Location not in table*/

    PK08W01.PK08WSWE = "Y"; /* Indicate error found*/

    set PK08M001.PKEFRARE[PK08WIXM] cursor, modified, bold; /* Highlight*/
    set PK08M001.PKEFRZON[PK08WIXM] modified, bold; /* Highlight*/
    set PK08M001.PKEFRROW[PK08WIXM] modified, bold; /* Highlight*/

    PK08M001.XXXPRCNM = "PK08513"; /* Process name*/
    converseLib.validationFailed(51); /* Location is invalid*/

    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE != 0 /* Not normal return*/
   && SQLCA.VAGen_SQLCODE != -811) /* and not multiple found*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK08513"; /* Process name*/
    TA1REC.TA1LOC = "VERIFY AREA/ZONE/ROW LOCATION";
    TA1REC.TA1MAP = "PK08M001"; /* Map name*/
    TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VLOCAT01"; /* Table view name*/
    TA1REC.TA1TBLKE = SL5REC.SL5KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK08M001.XXXPRCNM = "PK08513"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK08513

// Verify production rate entry
Function PK08514()
   /* ------------------------------------------------------------*/
   /* Determine whether the area/zone/row location that was*/
   /* entered is in the production rate table.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PKEREC empty; /* Clear record area*/

  PKEREC.XWHCD = PK08W01.XWHCD; /* Warehouse code*/
  PKEREC.PKEFRARE = PK08M001.PKEFRARE[PK08WIXM]; /* From area*/
  PKEREC.PKEFRZON = PK08M001.PKEFRZON[PK08WIXM]; /* From zone*/
  PKEREC.PKEFRROW = PK08M001.PKEFRROW[PK08WIXM]; /* From row*/
  PKEREC.PKETOARE = PK08M001.PKETOARE[PK08WIXM]; /* To area*/
  PKEREC.PKETOZON = PK08M001.PKETOZON[PK08WIXM]; /* To zone*/
  PKEREC.PKETOROW = PK08M001.PKETOROW[PK08WIXM]; /* To row*/

  call "IO2150" ("S ", SQLCA, PKEREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Not normal return*/
   && SQLCA.VAGen_SQLCODE != 100) /* and not no row found*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK08514"; /* Process name*/
    TA1REC.TA1LOC = "VERIFY PRODUCTION RATE ENTRY";
    TA1REC.TA1MAP = "PK08M001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPDRAT01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKEREC.PKEKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK08M001.XXXPRCNM = "PK08514"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK08514

// edit fields entered w/pick typ
Function PK08515()
   /* ------------------------------------------------------------*/
   /* Determine that the proper fields have data*/
   /* ------------------------------------------------------------*/


  if (PK08M001.PKEPBYTY[PK08WIXM] == "01" /* pick by product*/
   || PK08M001.PKEPBYTY[PK08WIXM] == "02") /* or pick by order*/

    if (PK08M001.PKERNSRN[PK08WIXM] > 0   /* Spur number entered*/
     || PK08M001.PKETOARE[PK08WIXM] > " " /* or TO area entered*/
     || PK08M001.PKETOZON[PK08WIXM] > " " /* or TO zone entered*/
     || PK08M001.PKETOROW[PK08WIXM] > " ") /* or TO row entered*/

      PK08W01.PK08WSWE = "Y"; /* Indicate error found*/

      set PK08M001.PKETOARE[PK08WIXM] cursor, bold;
      set PK08M001.PKETOZON[PK08WIXM] bold;
      set PK08M001.PKETOROW[PK08WIXM] bold;
      set PK08M001.PKERNSRN[PK08WIXM] bold;
                                   /* Highlight*/
      PK08M001.XXXPRCNM = "PK08510"; /* Process name*/
      converseLib.validationFailed(428); /* Indicate not valid for pick type*/
      return; /* get out*/
    end
  end

  if (PK08M001.PKEPBYTY[PK08WIXM] == "10" /* Let down*/
   || PK08M001.PKEPBYTY[PK08WIXM] == "11" /* or let down to belt pick*/
   || PK08M001.PKEPBYTY[PK08WIXM] == "20" /* or full case from let down*/
   || PK08M001.PKEPBYTY[PK08WIXM] == "21" /* or full case from handstck*/
   || PK08M001.PKEPBYTY[PK08WIXM] == "22" /* or full case from belt pick*/
   || PK08M001.PKEPBYTY[PK08WIXM] == "23") /* or fullcase from highrise*/

    if (PK08M001.PKERNSRN[PK08WIXM] > 0   /* Spur number entered*/
     || PK08M001.PKEFRROW[PK08WIXM] > " " /* or FROM row entered*/
     || PK08M001.PKETOROW[PK08WIXM] > " ") /* or TO row entered*/

      PK08W01.PK08WSWE = "Y"; /* Indicate error found*/

      set PK08M001.PKEFRROW[PK08WIXM] cursor, bold;
      set PK08M001.PKETOROW[PK08WIXM] bold;
      set PK08M001.PKERNSRN[PK08WIXM] bold;
                                   /* Highlight*/
      PK08M001.XXXPRCNM = "PK08510"; /* Process name*/
      converseLib.validationFailed(428); /* Indicate not valid for pick type*/
      return; /* get out*/
    end
  end

  if (PK08M001.PKEPBYTY[PK08WIXM] == "30" /* restocking flow rack by spur*/
   || PK08M001.PKEPBYTY[PK08WIXM] == "31" /* restocking handstck by spur*/
   || PK08M001.PKEPBYTY[PK08WIXM] == "33") /* restocking highrise by spur*/

    if (PK08M001.PKEFRARE[PK08WIXM] > " " /* or FROM area entered*/
     || PK08M001.PKEFRZON[PK08WIXM] > " " /* or FROM zone entered*/
     || PK08M001.PKEFRROW[PK08WIXM] > " ") /* or FROM row entered*/

      PK08W01.PK08WSWE = "Y"; /* Indicate error found*/

      set PK08M001.PKEFRARE[PK08WIXM] cursor, bold;
      set PK08M001.PKEFRZON[PK08WIXM] bold;
      set PK08M001.PKEFRROW[PK08WIXM] bold;
                                   /* Highlight*/
      PK08M001.XXXPRCNM = "PK08510"; /* Process name*/
      converseLib.validationFailed(428); /* Indicate not valid for pick type*/
      return; /* get out*/
    end
  end


  if (PK08M001.PKEPBYTY[PK08WIXM] == "40" /* flow rack pick by zone/row*/
   || PK08M001.PKEPBYTY[PK08WIXM] == "41") /* handstck pick by zone/row*/

    if (PK08M001.PKETOARE[PK08WIXM] > " " /* or TO area entered*/
     || PK08M001.PKETOZON[PK08WIXM] > " " /* or TO zone entered*/
     || PK08M001.PKETOROW[PK08WIXM] > " ") /* or TO row entered*/

      PK08W01.PK08WSWE = "Y"; /* Indicate error found*/

      set PK08M001.PKETOARE[PK08WIXM] cursor, bold;
      set PK08M001.PKETOZON[PK08WIXM] bold;
      set PK08M001.PKETOROW[PK08WIXM] bold;
                                   /* Highlight*/
      PK08M001.XXXPRCNM = "PK08510"; /* Process name*/
      converseLib.validationFailed(428); /* Indicate not valid for pick type*/
      return; /* get out*/
    end
  end


  if (PK08M001.PKEPBYTY[PK08WIXM] == "50") /* empty pallet pick up*/

    if (PK08M001.PKETOARE[PK08WIXM] > " " /* or TO area entered*/
     || PK08M001.PKETOZON[PK08WIXM] > " " /* or TO zone entered*/
     || PK08M001.PKETOROW[PK08WIXM] > " " /* or TO row entered*/
     || PK08M001.PKEFRROW[PK08WIXM] > " " /* or FROM row entered*/
     || PK08M001.PKERNSRN[PK08WIXM] > 0)  /* Spur number entered*/

      PK08W01.PK08WSWE = "Y"; /* Indicate error found*/

      set PK08M001.PKEFRROW[PK08WIXM] cursor, bold;
      set PK08M001.PKETOARE[PK08WIXM] bold;
      set PK08M001.PKETOZON[PK08WIXM] bold;
      set PK08M001.PKETOROW[PK08WIXM] bold;
      set PK08M001.PKERNSRN[PK08WIXM] bold;
                                   /* Highlight*/
      PK08M001.XXXPRCNM = "PK08510"; /* Process name*/
      converseLib.validationFailed(428); /* Indicate not valid for pick type*/
      return; /* get out*/
    end
  end


  if (PK08M001.PKEPBYTY[PK08WIXM] == "60" /* let up to handstck*/
   || PK08M001.PKEPBYTY[PK08WIXM] == "61") /* let up to bulk*/

    if (PK08M001.PKETOROW[PK08WIXM] > " " /* or TO row entered*/
     || PK08M001.PKEFRROW[PK08WIXM] > " " /* or FROM row entered*/
     || PK08M001.PKERNSRN[PK08WIXM] > 0)  /* Spur number entered*/

      PK08W01.PK08WSWE = "Y"; /* Indicate error found*/

      set PK08M001.PKEFRROW[PK08WIXM] cursor, bold;
      set PK08M001.PKETOROW[PK08WIXM] bold;
      set PK08M001.PKERNSRN[PK08WIXM] bold;
                                   /* Highlight*/
      PK08M001.XXXPRCNM = "PK08510"; /* Process name*/
      converseLib.validationFailed(428); /* Indicate not valid for pick type*/
      return; /* get out*/
    end
  end


  if (PK08M001.PKEPBYTY[PK08WIXM] == "01" /* pick by product*/
   || PK08M001.PKEPBYTY[PK08WIXM] == "02") /* or pick by order*/
    /* next sentence*/
  else
    PK08516(); /* edit the moves*/
  end


end // end PK08515

// edit from & to moves
Function PK08516()
   /* ------------------------------------------------------------*/
   /* Determine that the move locations are valid*/
   /* ------------------------------------------------------------*/


  set SL4REC empty; /* Clear record area*/

  SL4REC.XWHCD = PK08W01.XWHCD; /* Warehouse code to record*/

  if (PK08M001.PKEPBYTY[PK08WIXM] == "10" /**/
   || PK08M001.PKEPBYTY[PK08WIXM] == "11" /**/
   || PK08M001.PKEPBYTY[PK08WIXM] == "20" /**/
   || PK08M001.PKEPBYTY[PK08WIXM] == "21" /**/
   || PK08M001.PKEPBYTY[PK08WIXM] == "22" /**/
   || PK08M001.PKEPBYTY[PK08WIXM] == "23" /**/
   || PK08M001.PKEPBYTY[PK08WIXM] == "60" /**/
   || PK08M001.PKEPBYTY[PK08WIXM] == "61") /**/

    PK08W01.PK08W-AREA = PK08M001.PKEFRARE[PK08WIXM]; /* w/s area*/
    PK08W01.PK08W-ZONE = PK08M001.PKEFRZON[PK08WIXM]; /* w/s zone*/

    PK08517(); /* get YZT code*/

    PK08W01.PK08W-FROM-YZTCD = SL4REC.YZTCD; /* from yzt code*/

    PK08W01.PK08W-AREA = PK08M001.PKETOARE[PK08WIXM]; /* w/s area*/
    PK08W01.PK08W-ZONE = PK08M001.PKETOZON[PK08WIXM]; /* w/s zone*/

    PK08517(); /* get YZT code*/

    PK08W01.PK08W-TO-YZTCD = SL4REC.YZTCD; /* to yzt code*/
    PK08W01.PK08W-PBYTY = PK08M001.PKEPBYTY[PK08WIXM];
                                  /* pick by type*/
    if (PK08W01.PK08W-KEY in PK08T02.PK08T-KEY)
      PK08W-DESC = PK08T02.PK08T-DESC[sysVar.arrayIndex];
    end
                                   /* does the key exist in the table*/

    if (sysVar.arrayIndex == 0) /* not found*/
      PK08W01.PK08WSWE = "Y"; /* Indicate error found*/

      set PK08M001.PKEFRARE[PK08WIXM] cursor, bold;
      set PK08M001.PKETOARE[PK08WIXM] bold;
      set PK08M001.PKEFRZON[PK08WIXM] bold;
      set PK08M001.PKETOZON[PK08WIXM] bold;
                                   /* Highlight*/
      PK08M001.XXXPRCNM = "PK08516"; /* Process name*/
      if (PK08W01.PK08W-PBYTY in PK08T02.PK08T-PBYTY)
        if (PK08T02.PK08T-ERROR-MSG-NBR[sysVar.arrayIndex] == 9999)
          converseLib.validationFailed();
        else
          converseLib.validationFailed(PK08T02.PK08T-ERROR-MSG-NBR[sysVar.arrayIndex]);
        end
      end
                                   /* get error message*/
    end
  end


  if (PK08M001.PKEPBYTY[PK08WIXM] == "30" /**/
   || PK08M001.PKEPBYTY[PK08WIXM] == "31" /**/
   || PK08M001.PKEPBYTY[PK08WIXM] == "33") /**/

    PK08W01.PK08W-FROM-YZTCD = 00; /* from yzt code*/

    PK08W01.PK08W-AREA = PK08M001.PKETOARE[PK08WIXM]; /* w/s area*/
    PK08W01.PK08W-ZONE = PK08M001.PKETOZON[PK08WIXM]; /* w/s zone*/

    PK08517(); /* get YZT code*/

    PK08W01.PK08W-TO-YZTCD = SL4REC.YZTCD; /* to yzt code*/
    PK08W01.PK08W-PBYTY = PK08M001.PKEPBYTY[PK08WIXM];
                                  /* pick by type*/
    if (PK08W01.PK08W-KEY in PK08T02.PK08T-KEY)
      PK08W-DESC = PK08T02.PK08T-DESC[sysVar.arrayIndex];
    end
                                   /* does the key exist in the table*/

    if (sysVar.arrayIndex == 0) /* not found*/
      PK08W01.PK08WSWE = "Y"; /* Indicate error found*/

      set PK08M001.PKETOARE[PK08WIXM] cursor, bold;
      set PK08M001.PKETOZON[PK08WIXM] bold;
                                   /* Highlight*/
      PK08M001.XXXPRCNM = "PK08516"; /* Process name*/
      if (PK08W01.PK08W-PBYTY in PK08T02.PK08T-PBYTY)
        if (PK08T02.PK08T-ERROR-MSG-NBR[sysVar.arrayIndex] == 9999)
          converseLib.validationFailed();
        else
          converseLib.validationFailed(PK08T02.PK08T-ERROR-MSG-NBR[sysVar.arrayIndex]);
        end
      end
                                   /* get error message*/
    end
  end


  if (PK08M001.PKEPBYTY[PK08WIXM] == "40" /**/
   || PK08M001.PKEPBYTY[PK08WIXM] == "41" /**/
   || PK08M001.PKEPBYTY[PK08WIXM] == "50") /**/

    PK08W01.PK08W-AREA = PK08M001.PKEFRARE[PK08WIXM]; /* w/s area*/
    PK08W01.PK08W-ZONE = PK08M001.PKEFRZON[PK08WIXM]; /* w/s zone*/

    PK08517(); /* get YZT code*/

    PK08W01.PK08W-FROM-YZTCD = SL4REC.YZTCD; /* from yzt code*/

    PK08W01.PK08W-TO-YZTCD = 00; /* to yzt code*/
    PK08W01.PK08W-PBYTY = PK08M001.PKEPBYTY[PK08WIXM];
                                  /* pick by type*/
    if (PK08W01.PK08W-KEY in PK08T02.PK08T-KEY)
      PK08W-DESC = PK08T02.PK08T-DESC[sysVar.arrayIndex];
    end
                                   /* does the key exist in the table*/

    if (sysVar.arrayIndex == 0) /* not found*/
      PK08W01.PK08WSWE = "Y"; /* Indicate error found*/

      set PK08M001.PKEFRARE[PK08WIXM] cursor, bold;
      set PK08M001.PKEFRZON[PK08WIXM] bold;
                                   /* Highlight*/
      PK08M001.XXXPRCNM = "PK08516"; /* Process name*/
      if (PK08W01.PK08W-PBYTY in PK08T02.PK08T-PBYTY)
        if (PK08T02.PK08T-ERROR-MSG-NBR[sysVar.arrayIndex] == 9999)
          converseLib.validationFailed();
        else
          converseLib.validationFailed(PK08T02.PK08T-ERROR-MSG-NBR[sysVar.arrayIndex]);
        end
      end
                                   /* get error message*/
    end
  end


end // end PK08516

// get YZT code
Function PK08517()
   /* ------------------------------------------------------------*/
   /* Use warehouse, area and zone to find YZT-CODE*/
   /* If not found, indicate invalid location to the user.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  SL4REC.XARCD = PK08W-AREA; /* Area code*/
  SL4REC.SL4ZONE = PK08W-ZONE; /* Zone code*/


  call "IO1480" ("S ", SQLCA, SL4REC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Location not in table*/

    PK08W01.PK08WSWE = "Y"; /* Indicate error found*/

    set PK08M001.PKETOARE[PK08WIXM] cursor, modified, bold; /* Highlight*/
    set PK08M001.PKETOZON[PK08WIXM] modified, bold; /* Highlight*/
    set PK08M001.PKETOROW[PK08WIXM] modified, bold; /* Highlight*/

    PK08M001.XXXPRCNM = "PK08512"; /* Process name*/
    converseLib.validationFailed(51); /* Location is invalid*/

    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Not normal return*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK08517"; /* Process name*/
    TA1REC.TA1LOC = "GET YZT CODE                 ";
    TA1REC.TA1MAP = "PK08M001"; /* Map name*/
    TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAZONE01"; /* Table view name*/
    TA1REC.TA1TBLKE = SL4REC.SL4KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK08M001.XXXPRCNM = "PK08517"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK08517

// Verify scroll request
Function PK08520()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PK08W01.PK08WTSP < 2)       /* and no previous pages*/

    PK08M001.XXXPRCNM = "PK08520"; /* Process name*/
    converseLib.validationFailed(37); /* No previous page to display*/

  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PK08W01.PK08WTSP >= PK08W01.TA5TSQIX) /* and no more pages*/

    PK08M001.XXXPRCNM = "PK08520"; /* Process name*/
    converseLib.validationFailed(38); /* No more pages to display*/

  end

  PK08W01.PK08WIXM = 12; /* Initialize map line index*/

  while (PK08W01.PK08WIXM > 0) /* Until end of array*/

    PK08W01.PK08WERR = 39; /* Error message number*/
    PK08S01(); /* Highlight any changed lines*/

    PK08W01.PK08WIXM = PK08W01.PK08WIXM - 1; /* Decrement line number*/

  end

  if (PK08M001.XWHCD != PK08W01.XWHCD) /* Warehouse was changed*/

    set PK08M001.XWHCD cursor, modified, bold; /* Highlight warehouse*/
    PK08M001.XXXPRCNM = "PK08520"; /* Process name*/
    converseLib.validationFailed(39); /* Modifications not allowed*/

  end


end // end PK08520

// Process valid input request
Function PK08600()
   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Save any of the data that was changed in temporary storage.*/
   /* If warehouse code changed, purge all temporary storage and*/
   /* indicate that the new warehouse is to be displayed.*/
   /* Otherwise, update any changed lines.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PK08W01.PK08WTSP = PK08W01.PK08WTSP - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PK08W01.PK08WTSP = PK08W01.PK08WTSP + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

  if (PK08M001.XWHCD == PK08W01.XWHCD) /* Warehouse code not changed*/

    PK08610(); /* Update production rate table*/

  else

    PK08W01.XWHCD = PKWREC.XWHCD; /* Save warehouse code*/
    PK08W01.XWHABRV = PKWREC.XWHABRV; /* and abbreviation*/

    PK08W01.PK08WSWR = "Y"; /* Indicate request for data*/

  end


end // end PK08600

// Update production rate table
Function PK08610()
   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* Update the production rate table rows with changed lines.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain current date and time*/

  PK08W01.PK08WSWT = "N"; /* Initialize page update switch*/
  PK08W01.PK08WIXM = 1; /* Initialize line index*/

  while (PK08W01.PK08WIXM <= 15) /* Until end of array*/

    if (PK08M001.PK08MACT[PK08WIXM] > " ") /* Action was entered*/

      if (PK08M001.PK08MACT[PK08WIXM] == "A") /* Add requested*/

        PK08611(); /* Insert production rate row*/

      end

      if (PK08M001.PK08MACT[PK08WIXM] == "C") /* Change requested*/

        PK08612(); /* Select production rate row*/
        PK08613(); /* Update production rate row*/

      end

      if (PK08M001.PK08MACT[PK08WIXM] == "D") /* Delete requested*/

        PK08614(); /* Delete production rate row*/

      end

      PK08W01.PK08WSWT = "Y"; /* Indicate update page*/
      PK08W01.PK08WMNO = 32; /* Indicate table was updated*/

    end

    PK08W01.PK08WIXM = PK08W01.PK08WIXM + 1; /* Increment map index*/

  end

  if (PK08W01.PK08WSWT == "Y") /* Change made to current page*/

    PK08W01.PK08WPAG = PK08W01.PK08WTSP; /* Starting page*/
    PK08W01.PK08WSWR = "Y"; /* Indicate request for data*/

  end


end // end PK08610

// Insert production rate row
Function PK08611()
   /* ------------------------------------------------------------*/
   /* Format and insert the production rate table row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PKEREC empty; /* Initialize record area*/

  PKEREC.XWHCD = PK08W01.XWHCD; /* Warehouse*/
  PKEREC.PKEFRARE = PK08M001.PKEFRARE[PK08WIXM]; /* From area*/
  PKEREC.PKEFRZON = PK08M001.PKEFRZON[PK08WIXM]; /* From zone*/
  PKEREC.PKEFRROW = PK08M001.PKEFRROW[PK08WIXM]; /* From row*/
  PKEREC.PKETOARE = PK08M001.PKETOARE[PK08WIXM]; /* To area*/
  PKEREC.PKETOZON = PK08M001.PKETOZON[PK08WIXM]; /* To zone*/
  PKEREC.PKETOROW = PK08M001.PKETOROW[PK08WIXM]; /* To row*/
  PKEREC.PKERNSRN = PK08M001.PKERNSRN[PK08WIXM]; /* Spur number*/
  PKEREC.PKEPKPRT[1] = PK08M001.PK08MUNT[PK08WIXM];
                                   /* Production rate*/
  PKEREC.PKEPKPRT[2] = PK08M001.PK08MTCK[PK08WIXM];
                                   /* Production rate*/
  PKEREC.PKEPBYTY = PK08M001.PKEPBYTY[PK08WIXM]; /* Pick by type*/
  PKEREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  PKEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  PKEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  call "IO2150" ("A ", SQLCA, PKEREC) {isNoRefresh = yes, isExternal = yes}; /* Add table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    move SQLCA to ERRSQLCA withV60Compat; /* SQL communication area*/

    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* Rollback any changes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK08611"; /* Process name*/
    TA1REC.TA1LOC = "INSERT PRODUCTION RATE TABLE ROW";
    TA1REC.TA1MAP = "PK08M001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPDRAT01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKEREC.PKEKEY; /* Table key*/

    call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK08M001.XXXPRCNM = "PK08611"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK08611

// Select production rate row
Function PK08612()
   /* ------------------------------------------------------------*/
   /* Obtain the production rate table row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  PKEREC.XWHCD = PK08W01.XWHCD; /* Warehouse*/
  PKEREC.PKEFRARE = PK08M001.PKEFRARE[PK08WIXM]; /* From area*/
  PKEREC.PKEFRZON = PK08M001.PKEFRZON[PK08WIXM]; /* From zone*/
  PKEREC.PKEFRROW = PK08M001.PKEFRROW[PK08WIXM]; /* From row*/
  PKEREC.PKETOARE = PK08M001.PKETOARE[PK08WIXM]; /* To area*/
  PKEREC.PKETOZON = PK08M001.PKETOZON[PK08WIXM]; /* To zone*/
  PKEREC.PKETOROW = PK08M001.PKETOROW[PK08WIXM]; /* To row*/

  call "IO2150" ("S ", SQLCA, PKEREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    move SQLCA to ERRSQLCA withV60Compat; /* SQL communication area*/

    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* Rollback any changes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK08612"; /* Process name*/
    TA1REC.TA1LOC = "SELECT PRODUCTION RATE TABLE ROW";
    TA1REC.TA1MAP = "PK08M001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPDRAT01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKEREC.PKEKEY; /* Table key*/

    call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK08M001.XXXPRCNM = "PK08612"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK08612

// Update production rate row
Function PK08613()
   /* ------------------------------------------------------------*/
   /* Change and update the production rate table row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  PKEREC.PKEPKPRT[1] = PK08M001.PK08MUNT[PK08WIXM];
                                   /* Production rate*/
  PKEREC.PKEPKPRT[2] = PK08M001.PK08MTCK[PK08WIXM];
                                   /* Production rate*/
  PKEREC.PKEPBYTY = PK08M001.PKEPBYTY[PK08WIXM]; /* Pick by type*/
  PKEREC.PKERNSRN = PK08M001.PKERNSRN[PK08WIXM]; /* spur*/
  PKEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  PKEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  call "IO2150" ("U ", SQLCA, PKEREC) {isNoRefresh = yes, isExternal = yes}; /* Update table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    move SQLCA to ERRSQLCA withV60Compat; /* SQL communication area*/

    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* Rollback any changes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK08613"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE PRODUCTION RATE TABLE ROW";
    TA1REC.TA1MAP = "PK08M001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPDRAT01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKEREC.PKEKEY; /* Table key*/

    call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK08M001.XXXPRCNM = "PK08613"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK08613

// Delete production rate row
Function PK08614()
   /* ------------------------------------------------------------*/
   /* Delete the production rate table row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  PKEREC.XWHCD = PK08W01.XWHCD; /* Warehouse*/
  PKEREC.PKEFRARE = PK08M001.PKEFRARE[PK08WIXM]; /* From area*/
  PKEREC.PKEFRZON = PK08M001.PKEFRZON[PK08WIXM]; /* From zone*/
  PKEREC.PKEFRROW = PK08M001.PKEFRROW[PK08WIXM]; /* From row*/
  PKEREC.PKETOARE = PK08M001.PKETOARE[PK08WIXM]; /* To area*/
  PKEREC.PKETOZON = PK08M001.PKETOZON[PK08WIXM]; /* To zone*/
  PKEREC.PKETOROW = PK08M001.PKETOROW[PK08WIXM]; /* To row*/

  call "IO2150" ("D ", SQLCA, PKEREC) {isNoRefresh = yes, isExternal = yes}; /* Delete table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    move SQLCA to ERRSQLCA withV60Compat; /* SQL communication area*/

    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* Rollback any changes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK08614"; /* Process name*/
    TA1REC.TA1LOC = "DELETE PRODUCTION RATE TABLE ROW";
    TA1REC.TA1MAP = "PK08M001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPDRAT01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKEREC.PKEKEY; /* Table key*/

    call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK08M001.XXXPRCNM = "PK08614"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK08614

// Highlight any changed lines
Function PK08S01()
   /* ------------------------------------------------------------*/
   /* Indicate an error if any data on the line was changed.*/
   /* ------------------------------------------------------------*/

  if (PK08M001.PKEPBYTY[PK08WIXM] != PK08W02.PKEPBYTY[PK08WIXM])

    set PK08M001.PKEPBYTY[PK08WIXM] cursor, modified, bold; /* Highlight*/
    PK08M001.XXXPRCNM = "PK08S01"; /* Process name*/
    if (PK08W01.PK08WERR == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK08W01.PK08WERR);
    end /* Modifications not allowed*/

  end

  if (PK08M001.PK08MTCK[PK08WIXM] != PK08W02.PK08WTCK[PK08WIXM])

    set PK08M001.PK08MTCK[PK08WIXM] cursor, modified, bold; /* Highlight*/
    PK08M001.XXXPRCNM = "PK08S01"; /* Process name*/
    if (PK08W01.PK08WERR == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK08W01.PK08WERR);
    end /* Modifications not allowed*/

  end

  if (PK08M001.PK08MUNT[PK08WIXM] != PK08W02.PK08WUNT[PK08WIXM])

    set PK08M001.PK08MUNT[PK08WIXM] cursor, modified, bold; /* Highlight*/
    PK08M001.XXXPRCNM = "PK08S01"; /* Process name*/
    if (PK08W01.PK08WERR == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK08W01.PK08WERR);
    end /* Modifications not allowed*/

  end

  if (PK08M001.PKERNSRN[PK08WIXM] != PK08W02.PKERNSRN[PK08WIXM])

    set PK08M001.PKERNSRN[PK08WIXM] cursor, modified, bold; /* Highlight*/
    PK08M001.XXXPRCNM = "PK08S01"; /* Process name*/
    if (PK08W01.PK08WERR == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK08W01.PK08WERR);
    end /* Modifications not allowed*/

  end

  if (PK08M001.PKETOROW[PK08WIXM] != PK08W02.PKETOROW[PK08WIXM])

    set PK08M001.PKETOROW[PK08WIXM] cursor, modified, bold; /* Highlight*/
    PK08M001.XXXPRCNM = "PK08S01"; /* Process name*/
    if (PK08W01.PK08WERR == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK08W01.PK08WERR);
    end /* Modifications not allowed*/

  end

  if (PK08M001.PKETOZON[PK08WIXM] != PK08W02.PKETOZON[PK08WIXM])

    set PK08M001.PKETOZON[PK08WIXM] cursor, modified, bold; /* Highlight*/
    PK08M001.XXXPRCNM = "PK08S01"; /* Process name*/
    if (PK08W01.PK08WERR == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK08W01.PK08WERR);
    end /* Modifications not allowed*/

  end

  if (PK08M001.PKETOARE[PK08WIXM] != PK08W02.PKETOARE[PK08WIXM])

    set PK08M001.PKETOARE[PK08WIXM] cursor, modified, bold; /* Highlight*/
    PK08M001.XXXPRCNM = "PK08S01"; /* Process name*/
    if (PK08W01.PK08WERR == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK08W01.PK08WERR);
    end /* Modifications not allowed*/

  end

  if (PK08M001.PKEFRROW[PK08WIXM] != PK08W02.PKEFRROW[PK08WIXM])

    set PK08M001.PKEFRROW[PK08WIXM] cursor, modified, bold; /* Highlight*/
    PK08M001.XXXPRCNM = "PK08S01"; /* Process name*/
    if (PK08W01.PK08WERR == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK08W01.PK08WERR);
    end /* Modifications not allowed*/

  end

  if (PK08M001.PKEFRZON[PK08WIXM] != PK08W02.PKEFRZON[PK08WIXM])

    set PK08M001.PKEFRZON[PK08WIXM] cursor, modified, bold; /* Highlight*/
    PK08M001.XXXPRCNM = "PK08S01"; /* Process name*/
    if (PK08W01.PK08WERR == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK08W01.PK08WERR);
    end /* Modifications not allowed*/

  end

  if (PK08M001.PKEFRARE[PK08WIXM] != PK08W02.PKEFRARE[PK08WIXM])

    set PK08M001.PKEFRARE[PK08WIXM] cursor, modified, bold; /* Highlight*/
    PK08M001.XXXPRCNM = "PK08S01"; /* Process name*/
    if (PK08W01.PK08WERR == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK08W01.PK08WERR);
    end /* Modifications not allowed*/

  end

  if (PK08M001.PK08MACT[PK08WIXM] > " ") /* Action was entered*/

    set PK08M001.PK08MACT[PK08WIXM] cursor, modified, bold; /* Highlight*/
    PK08M001.XXXPRCNM = "PK08S01"; /* Process name*/
    if (PK08W01.PK08WERR == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PK08W01.PK08WERR);
    end /* Modifications not allowed*/

  end


end // end PK08S01

//*** RECORD=PK08W01 ****
// Working storage for PK08 - Production Rate Per Location
// ***********************
Record PK08W01 type basicRecord
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 XXXRVNBR XXXRVNBR ; 
  10 PK08TRFL PK08TRFL ; 
  10 PK08WPAG PK08WPAG ; 
  10 PK08WMNO PK08WMNO ; 
  10 PK08WERR PK08WERR ; 
  10 PK08WIXM PK08WIXM ; 
  10 PK08WIX2 PK08WIX2 ; 
  10 PK08WSWC PK08WSWC ; 
  10 PK08WSWE PK08WSWE ; 
  10 PK08WSWR PK08WSWR ; 
  10 PK08WSWS PK08WSWS ; 
  10 PK08WSWT PK08WSWT ; 
  10 PK08WTSP PK08WTSP ; 
  10 PK08W-AREA PK08W-AREA ; 
  10 PK08W-ZONE PK08W-ZONE ; 
  10 PK08W-KEY PK08W-KEY ; 
    15 PK08W-PBYTY PK08W-PBYTY ; 
    15 PK08W-FROM-YZTCD PK08W-FROM-YZTCD ; 
    15 PK08W-TO-YZTCD PK08W-TO-YZTCD ; 
  10 PK08W-DESC PK08W-DESC ; 
  10 TA5TSQIX TA5TSQIX ; 
end // end PK08W01

//*** RECORD=PK08W02 ****
// Temporary storage for PK08 - Zone/Row Attributes Maintenance
// ***********************
Record PK08W02 type basicRecord
  10 PK08WLEN PK08WLEN ; 
  10 PKEFRARE PKEFRARE [15] ; 
  10 PKEFRZON PKEFRZON [15] ; 
  10 PKEFRROW PKEFRROW [15] ; 
  10 PKETOARE PKETOARE [15] ; 
  10 PKETOZON PKETOZON [15] ; 
  10 PKETOROW PKETOROW [15] ; 
  10 PK08WUNT PK08WUNT [15] ; 
  10 PK08WTCK PK08WTCK [15] ; 
  10 PKERNSRN PKERNSRN [15] ; 
  10 PKEPBYTY PKEPBYTY [15] ; 
end // end PK08W02

// w/s for area code
DataItem PK08W-AREA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// description
DataItem PK08W-DESC char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

//   from yzt code
DataItem PK08W-FROM-YZTCD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// key for yzt table
DataItem PK08W-KEY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

//   pick by type
DataItem PK08W-PBYTY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

//   to yzt code
DataItem PK08W-TO-YZTCD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// w/s for zone code
DataItem PK08W-ZONE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Error message number
DataItem PK08WERR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Second index for map fields
DataItem PK08WIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PK08WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem PK08WLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Information message number
DataItem PK08WMNO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Starting page number
DataItem PK08WPAG num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem PK08WSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line error was found switch
DataItem PK08WSWE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PK08WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Spur error detected switch
DataItem PK08WSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage switch
DataItem PK08WSWT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_PRDCTN_RT
DataItem PK08WTCK decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Current temporary storage page
DataItem PK08WTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PK_PRDCTN_RT
DataItem PK08WUNT decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

