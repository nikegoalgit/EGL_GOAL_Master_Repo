package pk01;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import in1.common.*;
import pk.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PK01 ****
// 
//  ************** pk01: picking pack & hold selection  *******
//  **************       (by carrier, order type, dnsb dt) ****
// 
// 
// purpose:  A carrier, order type and do not ship before date
//          range will cause all orders for that carrier & ot
//          that are pack and hold and have do not ship before
//          date in the range to be processed in the night run.
// 
//          The units for each carrier, order type, and range
//          will be the total number of p&h records seleceted
//          for that specific entry.  each entry will be for a
//          unique carrier, order type and dnsb date range.
//          units for each entry and date ranges are required.
// 
// narrative:
//     All carriers already selected will be displayed when
//    this screen is first entered (not including selected
//    planning carriers).  They will be displayed in carrier,
//    order type, and date range order.
// 
//     In order to delete a carrier the user will simply
//    erase the carrier (erase eof).
// 
//     Carriers can be added on blank lines or overtyped.
// 
//     Since there may be several do not ship before dates
//    for a carrier, a change of date really results in the
//    program deleting the old carrier/date and adding the
//    new carrier/date.
// 
// 
//   maintenance history:
// 
//    date      name      description
//  --------  ---------  --------------------------------------
//  08-27-87  PRM        created
//  12-17-87  DGK        added 'all' carriers/dates function.
//  11-29-88  JWOOD      ADDED NONCSP OPTION TO CALLS
//  11-29-88  JWOOD      ADDED XSSEGTR LOGIC
//  07-07-89  mmoreh     added order type, units per entry, and
//                       do not ship before date ranges.
//  03-19-91  BHARRI     Restrict warehouse from PK01020
//  08-11-95  CBRINE     CANADA Added XCTCD to PKWREC
// 
//  02-19-98  dBETTR     Y2KFIX made code year 2000 compliant
//                       altering code in procedures PK01053
// *                     pk01081, pk01082, pk01083, pk01084  *
// ************************************************************
// 
// 
// *********************
Program PK01 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK01W01 PK01W01; // record
  PK01W02 PK01W02; // record
  PKJREC PKJREC; // record
  PKWREC PKWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TF1REC TF1REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use PK01M.PK01M030 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PK01005: PK01005();

    goto PK01010;



    PK01010: PK01010();

    goto PK01010;


  end // end main
end // end PK01

// main process
Function PK01005()

   /* ----------------------------------------------------------*/
   /* initialization process....*/
   /* ----------------------------------------------------------*/


  set PKWREC empty; /* clear work records*/
  set PK01W01 empty;
  set PK01W02 empty;
  set SQLCA empty;

  if (COMMAREA.CAFROMAP == "PK07")
    PK01W01.PK01WED2 = "N";
  else
    if (COMMAREA.CAFROMAP == "PK0S")
      PK01W01.PK01WED2 = "Y";
    else
      PK01W01.PK01WED2 = "?";
      set PK01M030.PK01MPLN cursor, modified, bold;
      PK01025();
      converseLib.validationFailed(235);
    end
  end


  XPPK001(); /* app initial.*/
  PK01M030.XWHCD = PKWREC.XWHCD;
  if (converseVar.validationMsgNum == 2 /* invalid  warehouse*/
   || converseVar.validationMsgNum == 3 /* inactive warehouse*/
   || converseVar.validationMsgNum == 4) /* warehouse required*/
    set PK01M030.XWHCD cursor, modified, bold; /* hilite warehouse*/
    PKWREC.XWHCD = " "; /* warehouse*/
  end


  if (converseVar.validationMsgNum == 0) /* valid warehouse & plan indicator*/
    PK01M030.XWHCD = PKWREC.XWHCD;
    PK01021(); /* Format map heading area*/
    PK01W01.PK01WTOP = 1; /* set top of page subscript*/
    PK01022(); /* ss order type rows*/
    if (converseVar.validationMsgNum == 0) /* no database errors*/
      PK01023(); /* format screen*/
    end
  end




  COMMAREA.CAFROMAP = COMMAREA.CACURRAP; /* save current application*/





  PKWREC.PKWINDEX = 0;
  PKWREC.PKWCNTRL = " ";




   /* -------------  end process pk01005  --------------------*/
end // end PK01005

// select pack and hold
Function PK01010()


  PK01020(); /* format output*/



  PK01030(); /* converse map*/




   /* *********************************************/
   /* ** if table overflow has occured           **/
   /* **     go back to main selection menu      **/
   /* *********************************************/
  if (PK01W01.PK01WFL1 == "Y") /* table overflow flag*/
    converseLib.validationFailed(24);
    PK01030(); /* converse map*/
    COMMAREA.CATOAP = "PK07"; /* select Menu*/
    PKWREC.XWHCD = PK01M030.XWHCD; /* Save in work area*/
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* COMMAREA user area*/
    XSEXIT(); /* Invoke selected application*/
    PK01M030.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    exit stack; /* ; Exit to redisplay map*/
  end





  if (PKWREC.XWHCD == " " /* receiving warehouse from map*/
   || PK01W01.PK01WED2 == "?") /* receiving plan indicator from map*/
    if (converseVar.eventKey not pf3)
      exit stack;
    end
  end





  PK01W01.PK01WUPD = "N"; /* database update flag.*/

  PK01040(); /* validate pfkeys keys*/




  if (converseVar.validationMsgNum == 0)
    PK01050(); /* validate inputs*/
  end


  if (converseVar.validationMsgNum == 0) /* ; no errors*/
    if (PKWREC.XWHCD == PK01M030.XWHCD)
      if (converseVar.eventKey is pf12)
            /* no more processing*/
      else
        if (PK01W01.PK01WED1 == "N") /* data modified*/
          /* no more processing*/
        else
          if (PK01W01.PK01WED1 == "Y") /* edits-all-ok-flag*/
            PK01080(); /* update databases*/
          end
        end
      end
    end
  end



   /* ------------------- end pk0m010 -------------------------*/
end // end PK01010

// Format the output display
Function PK01020()


   /* ------------------------------------------------------------*/
   /* first time through or a change in warehouse, the map is*/
   /* reformatted with new data.*/
   /* warehouse is highlited if invalid.*/
   /* ------------------------------------------------------------*/


  if (PK01W01.PK01WED2 != PK01M030.PK01MPLN) /* change in plan indicator*/
    if (PK01M030.PK01MPLN == "Y"
     || PK01M030.PK01MPLN == "N")
      if (PK01M030.PK01MPLN == "Y")
        PK01W01.PK01WED2 = PK01M030.PK01MPLN;
        set PK01M030.PK01MPLN protect;
      end
      if (PK01M030.PK01MPLN == "N")
        PK01W01.PK01WED2 = PK01M030.PK01MPLN;
        set PK01M030.PK01MPLN protect;
      end
      PK01021(); /* Format map heading area*/
      PK01W01.PK01WTOP = 1; /* set top of page subscript*/
      PK01022(); /* ss carrier/date rows*/
      if (converseVar.validationMsgNum == 0) /* no database errors*/
        PK01023(); /* format screen*/
      end
    else
      PK01021(); /* Format map heading area*/
      PK01W01.PK01WED2 = "?";
      set PK01M030.PK01MPLN cursor, modified, bold;
      PK01025();
      converseLib.validationFailed(235);
      return;
    end
  end


     /* ***********************************/
     /* *  if changed warehouse          **/
     /* *      get warehouse abbrev.     **/
     /* *      if lookup not successful  **/
     /* *         get out                **/
     /* *      else                      **/
     /* *         load new warehouse's   **/
     /* *         data into map and array**/
     /* ***********************************/

  if (PK01M030.XWHCD == "51") /* If warhouse 51*/
    set PK01M030.XWHCD cursor, modified, bold; /* highlight warhouse*/
    PKWREC.XWHCD = " "; /* init work field*/
    converseLib.validationFailed(370); /* 'application unavailable'*/
    return; /* return*/
  end
                                   /* end if*/

  if (PKWREC.XWHCD != PK01M030.XWHCD) /* change in warehouse*/
    set PK01W01 empty;
    PK01W01.PK01WED2 = PK01M030.PK01MPLN; /* plan/non-plan indicator*/
    PKWREC.XWHCD = PK01M030.XWHCD; /* warehouse*/
    XPPK002(); /* validate warehouse*/
    if (converseVar.validationMsgNum == 2 /* invalid  warehouse*/
     || converseVar.validationMsgNum == 3 /* inactive warehouse*/
     || converseVar.validationMsgNum == 4) /* warehouse required*/
      set PK01M030.XWHCD cursor, modified, bold; /* hilite warehouse*/
      PKWREC.XWHCD = " "; /* warehouse*/
      return;
    end
    set PK01M030.XWHCD normal;


    if (converseVar.validationMsgNum == 0) /* valid warehouse*/
      PK01021(); /* Format map heading area*/
      PK01W01.PK01WTOP = 1; /* set top of page subscript*/
      PK01022(); /* ss carrier/date rows*/
      if (converseVar.validationMsgNum == 0) /* no database errors*/
        PK01023(); /* format screen*/
      end
    end
  end




     /* ***********************************/
     /* *   * database was updated.      **/
     /* *   * refresh the array,         **/
     /* *   * the map, set ezemno        **/
     /* *   * to 'updated' and get out   **/
     /* ***********************************/
  if (PK01W01.PK01WUPD == "Y") /* database updated*/
    move PK01W02 to PK01W01 withV60Compat; /* initialize data base save area*/
    PK01021(); /* format headings*/
    PK01022(); /* ss carrier/date rows*/
    PK01023(); /* format screen*/
    if (converseVar.eventKey not pa2)
      converseLib.validationFailed(32);
    end
    return;
  end




     /* ***********************************/
     /* *   * only paging is required *  **/
     /* *   *                            **/
     /* *   * if at the beginning or end **/
     /* *   * of the map, is's an error. **/
     /* *   * subtract 24 from variable  **/
     /* *   * holding top of map value   **/
     /* *   * when page backward is      **/
     /* *   * requested.                 **/
     /* *   * add 24 to variable         **/
     /* *   * holding top of map value   **/
     /* *   * when page forward is       **/
     /* *   * requested.                 **/
     /* ***********************************/

  if (converseVar.eventKey is pf7) /* page backward*/
    if (PK01W01.PK01WTOP == 1)
      converseLib.validationFailed(37);
    end
    if (PK01W01.PK01WTOP != 1)
      PK01W01.PK01WTOP = PK01W01.PK01WTOP - 13; /* set top of page*/
      PK01021(); /* format map heading*/
      PK01023(); /* format screen*/
    end
  end

  if (converseVar.eventKey is pf8) /* page forward*/
    PK01W01.PK01WTOP = PK01W01.PK01WTOP + 13; /* set top of page*/
    if (PK01W01.PK01WTOP <= PK01W01.PK01WMAX)
      PK01021(); /* format map heading*/
      PK01023(); /* format screen*/
    end
    if (PK01W01.PK01WTOP > PK01W01.PK01WMAX)
      PK01W01.PK01WTOP = PK01W01.PK01WTOP - 13; /* reset top of page*/
      converseLib.validationFailed(38); /* no more pages to display*/
    end
  end




  if (converseVar.validationMsgNum == 2 /* invalid  warehouse*/
   || converseVar.validationMsgNum == 3 /* inactive warehouse*/
   || converseVar.validationMsgNum == 4) /* warehouse required*/
    set PK01M030.XWHCD cursor, modified, bold;
  end





end // end PK01020

// format map heading
Function PK01021()
   /* ---------------------------------------------------*/
      /* format map headings...........*/
   /* ---------------------------------------------------*/


  set PK01M030 initial; /* clear map area*/
  set PKJREC empty; /* empty select carrier table*/

  PK01M030.XXXERRID = "PK01021"; /* format location*/
  PK01M030.XXXCURDT = VGVar.currentShortGregorianDate; /* date to map*/
  PK01M030.XWHCD = PKWREC.XWHCD; /* warehouse code*/
  PK01M030.XWHABRV = PKWREC.XWHABRV; /* warehouse abbrev.*/
  PK01M030.XXXRVNBR = "01"; /* revision number*/
  converseLib.validationFailed(0); /* reset any error*/

  if (PK01W01.PK01WED2 == "Y")
    PK01M030.PK01MPLN = "Y";
    set PK01M030.PK01MPLN protect;
    PK01M030.PK01MTTL = "  P I C K  P L A N N I N G  ";
  else
    if (PK01W01.PK01WED2 == "N")
      PK01M030.PK01MPLN = "N";
      set PK01M030.PK01MPLN protect;
      PK01M030.PK01MTTL = "      P I C K I N G         ";
    else
      PK01M030.PK01MTTL = "      P I C K I N G         ";
    end
  end

end // end PK01021

// obtain set selected carriers
Function PK01022()
   /* ----------------------------------------------------*/
     /* load working storage with selected carrier rows*/
             /* -  non planned only   -*/
   /* ----------------------------------------------------*/


  PKJREC.XWHCD = PKWREC.XWHCD;

  if (PK01W01.PK01WED2 == "Y")
    PKJREC.PKURUNMD = "P"; /* plan or non-plan*/
  else
    if (PK01W01.PK01WED2 == "N")
      PKJREC.PKURUNMD = " "; /* plan or non-plan*/
    else
      PKJREC.PKURUNMD = "?"; /* plan or non-plan*/
    end
  end

  call "IO1750" ("S1", SQLCA, PKJREC) {isNoRefresh = yes, isExternal = yes}; /* ; ss on customers*/

  if (SQLCA.VAGen_SQLCODE != 0) /* ; unexpected return*/
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST"; /* ; term. function*/
      TA1REC.TA1LOC = "SELECT";
      TA1REC.TA1TYPE = "DB2 "; /* ; type of error*/
      TA1REC.TA1PGMNM = "PK01022"; /* process name*/
      TA1REC.TA1MAP = "PK01M030"; /* map name*/
      TA1REC.TA1DBASE = "DPICK   "; /* database name*/
      TA1REC.TA1TBLVU = "VSELPH01"; /* table view name*/
      TA1REC.TA1TBLKE = PKWREC.XWHCD; /* table key*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
      converseLib.validationFailed(28);
    else
      if (SQLCA.VAGen_SQLCODE != 100)
        converseLib.validationFailed(29); /* ; indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* ; term. function*/
        TA1REC.TA1LOC = "SELECT";
        TA1REC.TA1TYPE = "DB2 "; /* ; type of error*/
        TA1REC.TA1PGMNM = "PK01022"; /* process name*/
        TA1REC.TA1MAP = "PK01M030"; /* map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* database name*/
        TA1REC.TA1TBLVU = "VSELPH01"; /* table view name*/
        TA1REC.TA1TBLKE = PKWREC.XWHCD; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
        return;
      end
    end
  end



  if (SQLCA.VAGen_SQLCODE == 0) /* ; good return from s1 above*/
    PK01W01.PK01WMAX = 0; /* ; records read in counter*/
    while (SQLCA.VAGen_SQLCODE == 0 /* ; good return within loop*/
     && PK01W01.PK01WMAX <= 500) /* ; table maximum*/
      call "IO1750" ("N1", SQLCA, PKJREC) {isNoRefresh = yes, isExternal = yes}; /* fetch next record*/

      if (SQLCA.VAGen_SQLCODE == 0) /* ; good fetch*/
        PK01W01.PK01WMAX = PK01W01.PK01WMAX + 1; /* ;*/
        PK01W01.TF1CARCD[PK01WMAX] = PKJREC.TF1CARCD; /* ;*/
        PK01W01.PK01WCCR = PKJREC.TF1CARCD;
        PK01026(); /* get carrier abbreviation*/
        PK01W01.TF1ABRV[PK01WMAX] = PK01W01.PK01WACR;
        set SQLCA empty;
        PK01W01.XOTCD[PK01WMAX] = PKJREC.XOTCD;
        PK01W01.PKRMIUNT[PK01WMAX] = PKJREC.PKRMIUNT;
        PK01W01.PK01WFDT = PKJREC.PKJDNSBF;
        PK01W01.PK01WMMF[PK01WMAX] = PK01W01.PK01WFMM;
        PK01W01.PK01WDDF[PK01WMAX] = PK01W01.PK01WFDD;
        PK01W01.PK01WYYF[PK01WMAX] = PK01W01.PK01WFYY;
        PK01W01.PK01WFDT = PKJREC.PKJDNSBT;
        PK01W01.PK01WMMT[PK01WMAX] = PK01W01.PK01WFMM;
        PK01W01.PK01WDDT[PK01WMAX] = PK01W01.PK01WFDD;
        PK01W01.PK01WYYT[PK01WMAX] = PK01W01.PK01WFYY;
        PK01W01.ZZZCHGCT[PK01WMAX] = PKJREC.ZZZCHGCT;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          TA1REC.TA1FUNC = "POST"; /* ; term. function*/
          TA1REC.TA1LOC = "SELECT NEXT";
          TA1REC.TA1TYPE = "DB2 "; /* ; type of error*/
          TA1REC.TA1PGMNM = "PK01022"; /* process name*/
          TA1REC.TA1MAP = "PK01M030"; /* map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* database name*/
          TA1REC.TA1TBLVU = "VSELPH01"; /* table view name*/
          TA1REC.TA1TBLKE = PKWREC.XWHCD; /* table key*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
          converseLib.validationFailed(28);
        else
          if (SQLCA.VAGen_SQLCODE != 100) /* ; not end of data*/
            converseLib.validationFailed(29); /* ; indicate system error*/
            TA1REC.TA1FUNC = "RETN"; /* ; term. function*/
            TA1REC.TA1LOC = "SELECT NEXT";
            TA1REC.TA1TYPE = "DB2 "; /* ; type of error*/
            TA1REC.TA1PGMNM = "PK01022"; /* process name*/
            TA1REC.TA1MAP = "PK01M030"; /* map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* database name*/
            TA1REC.TA1TBLVU = "VSELPH01"; /* table view name*/
            TA1REC.TA1TBLKE = PKWREC.XWHCD; /* table key*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
            return;
          end
        end
      end
    end
  end



  if (SQLCA.VAGen_SQLCODE == 0 /* ; good return from n1 above*/
   && PK01W01.PK01WMAX > 500)  /* ; table maximum was reached*/
    converseLib.validationFailed(24); /* overflow*/
    PK01W01.PK01WFL1 = "Y"; /* table overflow flag*/
    return;
  end



end // end PK01022

// load map page
Function PK01023()
   /* ----------------------------------------------------*/
     /* format map.....*/
      /* pk0lwtop - location in ws. array of the top of screen*/
      /* pk0lwndx - this keeps track of location in working*/
                 /* storage array for moving to map*/
      /* pk0lwnx2 - locates position in map - pk0lm030*/
      /* pk0lwmax - end of valid data in working storage array*/
   /* ----------------------------------------------------*/



  PK01W01.PK01WNDX = PK01W01.PK01WTOP; /* hold current top of page*/

  PK01W01.PK01WNX2 = 1; /* map display subscript*/

  while (PK01W01.PK01WNX2 <= 13) /* only 13 displayed*/
    if (PK01W01.PK01WNDX <= PK01W01.PK01WMAX) /* place in ws < data end*/
      PK01M030.TF1CARCD[PK01WNX2] = PK01W01.TF1CARCD[PK01WNDX];
      PK01M030.TF1ABRV[PK01WNX2] = PK01W01.TF1ABRV[PK01WNDX];
      PK01M030.XOTCD[PK01WNX2] = PK01W01.XOTCD[PK01WNDX];
      PK01M030.PKRMIUNT[PK01WNX2] = PK01W01.PKRMIUNT[PK01WNDX];
      PK01M030.PK01MFMM[PK01WNX2] = PK01W01.PK01WMMF[PK01WNDX];
      PK01M030.PK01MFDD[PK01WNX2] = PK01W01.PK01WDDF[PK01WNDX];
      PK01M030.PK01MFYY[PK01WNX2] = PK01W01.PK01WYYF[PK01WNDX];
      PK01M030.PK01MTMM[PK01WNX2] = PK01W01.PK01WMMT[PK01WNDX];
      PK01M030.PK01MTDD[PK01WNX2] = PK01W01.PK01WDDT[PK01WNDX];
      PK01M030.PK01MTYY[PK01WNX2] = PK01W01.PK01WYYT[PK01WNDX];
    end
    PK01W01.PK01WNX2 = PK01W01.PK01WNX2 + 1; /* set-up map subscript*/
    PK01W01.PK01WNDX = PK01W01.PK01WNDX + 1; /* set-up place in work.stor.*/
  end


end // end PK01023

// protect fields
Function PK01025()

     /* --------------------------------------------------*/
     /* -   set all fields to protected except plan indicator*/
     /* --------------------------------------------------*/


  PK01W01.PK01WNX2 = 13;
  while (PK01W01.PK01WNX2 >= 1)
    PK01W01.PK01WNDX = PK01W01.PK01WTOP + PK01W01.PK01WNX2 - 1;


     /* **********************************************/
     /* * field by field set to protect             **/
     /* **********************************************/


    set PK01M030.PK01MACT[PK01WNX2] protect;
    set PK01M030.TF1CARCD[PK01WNX2] protect;
    set PK01M030.XOTCD[PK01WNX2] protect;
    set PK01M030.PKRMIUNT[PK01WNX2] protect;
    set PK01M030.PK01MFMM[PK01WNX2] protect;
    set PK01M030.PK01MFDD[PK01WNX2] protect;
    set PK01M030.PK01MFYY[PK01WNX2] protect;
    set PK01M030.PK01MTMM[PK01WNX2] protect;
    set PK01M030.PK01MTDD[PK01WNX2] protect;
    set PK01M030.PK01MTYY[PK01WNX2] protect;


    PK01W01.PK01WNX2 = PK01W01.PK01WNX2 - 1;
  end


end // end PK01025

// get carrier description
Function PK01026()
   /* ---------------  pk01026   ---------------------------------*/
   /* ----- get carrier description*/


  PK01M030.XXXERRID = "PK01026";




  set TF1REC empty;
  TF1REC.TF1CARCD = PK01W01.PK01WCCR;

  call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes}; /* select unique on*/
                                 /* traffic carrier table*/
  if (SQLCA.VAGen_SQLCODE == 0) /* 1 row was found*/
    PK01W01.PK01WACR = TF1REC.TF1ABRV;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* contention for data base resorce*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        PK01W01.PK01WACR = "ALL CARRIERS";
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK01026 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT UNIQUE            ";
        TA1REC.TA1MAP = "PK01M030"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCARR001"; /* Table view name*/
        COMMAREA.CAFROMAP = "PK01";
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      end
    end
  end








   /* -------------  end process pk01026  --------------------*/
end // end PK01026

// converse map
Function PK01030()


  converse PK01M030 ;



   /* ------------------- end pk01030 -------------------------*/
end // end PK01030

// validate pf keys
Function PK01040()

  converseLib.validationFailed(0); /* reset error message field*/





   /* ------------------------------------------------------------*/
   /* stop indiscriminate button pressing......*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf3  /* send to pk07 menu*/
   || converseVar.eventKey is pf13 /* pk0k 'ord sel' transfer*/
   || converseVar.eventKey is pf14 /* pk0m 'ot sel' transfer*/
   || converseVar.eventKey is pf15 /* pk0l 'cust sel' transfer*/
   || converseVar.eventKey is pf18 /* pk09 'hold' transfer*/
   || converseVar.eventKey is pf19 /* pk0s 'plan' transfer*/
   || converseVar.eventKey is pf20) /* pk0a 'pick' transfer*/

    PK01041(); /* Transfer to another application*/

  else

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      XSPF1(); /* Exit to the HELP facility*/

      PK01M030.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
      exit stack; /* Exit to redisplay map*/
    end


    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      XSPF4(); /* Exit to system main menu*/

      PK01M030.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
      exit stack; /* Exit to redisplay map*/
    end

    if (converseVar.eventKey is pa2) /* PA2 was pressed*/
      PK01W01.PK01WUPD = "Y"; /* flag for reloading map*/
      exit stack;
    end

    if (converseVar.eventKey is pf7  /* scroll backwards*/
     || converseVar.eventKey is pf8  /* scroll forward*/
     || converseVar.eventKey is pf12 /* test the water for errors*/
     || converseVar.eventKey is enter) /* enter..*/
       /* their choice of buttons was valid*/
    else
      converseLib.validationFailed(12); /* invalid pk key..*/

    end
  end



end // end PK01040

// Exit to another application
Function PK01041()
   /* ------------------------------------------------------------*/
   /* Set the "TO" application according to the PF key pressed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* ; PF3 was pressed*/
    if (PK01W01.PK01WED2 == "Y")
      COMMAREA.CATOAP = "PK0S"; /* planning Selection Menu*/
    else
      COMMAREA.CATOAP = "PK07"; /* non-plan Selection Menu*/
    end
  end

  if (converseVar.eventKey is pf13) /* ; PF13 was pressed*/
    COMMAREA.CATOAP = "PK0K"; /* Select By Order*/
  end

  if (converseVar.eventKey is pf14) /* ; PF14 was pressed*/
    COMMAREA.CATOAP = "PK0M"; /* Select By Order Type*/
  end

  if (converseVar.eventKey is pf15) /* ; PF15 was pressed*/
    COMMAREA.CATOAP = "PK0L"; /* Select By Customer*/
  end

  if (converseVar.eventKey is pf18) /* ; PF18 was pressed*/
    COMMAREA.CATOAP = "PK09"; /* Hold/Release*/
  end

  if (converseVar.eventKey is pf19) /* ; PF19 was pressed*/
    COMMAREA.CATOAP = "PK0S"; /* Planning Menu*/
  end

  if (converseVar.eventKey is pf20) /* ; PF19 was pressed*/
    COMMAREA.CATOAP = "PK0A"; /* Master Menu*/
  end

  if (PK01M030.XWHCD is modified) /* ; Warehouse code changed*/
    PKWREC.XWHCD = PK01M030.XWHCD; /* Save in work area*/
  end

  PKWREC.PKWINDEX = 0;
  PKWREC.PKWCNTRL = " ";
  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* COMMAREA user area*/

  XSEXIT(); /* Invoke selected application*/

  PK01M030.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/

  exit stack; /* ; Exit to redisplay map*/



end // end PK01041

// validate inputs
Function PK01050()

    /* ---------------------------------------------*/
   /* -  - start validation of input data      -  -*/
    /* ---------------------------------------------*/


  PK01W01.PK01WED1 = "N"; /* reset order type edit flag*/


  PK01051(); /* reset mdt's*/


  if (converseVar.validationMsgNum == 0) /* no errors from pk01051*/
    if (PK01W01.PK01WED1 == "Y") /* data modified*/

      if (PK01M030.XWHCD != PKWREC.XWHCD) /* change in warehouse*/
        PK01M030.XWHCD = PKWREC.XWHCD; /* restore warehouse*/
        set PK01M030.XWHCD cursor, modified, bold;
        converseLib.validationFailed(23); /* can not modify & change warehouse*/
      else
        if (converseVar.eventKey is enter /* ;*/
         || converseVar.eventKey is pf12) /* ;*/
          PK01052(); /* edit entered data*/
        else
          if (converseVar.eventKey is pf7 /* scroll requested*/
           || converseVar.eventKey is pf8) /* scroll requested*/
            converseLib.validationFailed(39); /* can not edit screen & scroll*/
            return; /* return to pk01010*/
          end
        end
      end
    else
      if (converseVar.eventKey is pf7 /* scroll requested*/
       || converseVar.eventKey is pf8) /* scroll requested*/
        exit stack; /* bypass processing- format screen*/
      end
    end
  end



end // end PK01050

// reset mdt's
Function PK01051()

     /* --------------------------------------------------*/
     /* -   - reset mdt's to fields actually modified -  -*/
     /* --------------------------------------------------*/


  PK01W01.PK01WNX2 = 13;
  while (PK01W01.PK01WNX2 >= 1)
    PK01W01.PK01WNDX = PK01W01.PK01WTOP + PK01W01.PK01WNX2 - 1;


     /* **********************************************/
     /* * field by field test for changes           **/
     /* **********************************************/


    if (PK01M030.PK01MACT[PK01WNX2] != " ")
      set PK01M030.PK01MACT[PK01WNX2] modified;
      PK01W01.PK01WED1 = "Y"; /* cust.modified flag*/
    else
      set PK01M030.PK01MACT[PK01WNX2] initialAttributes;
    end


    if (PK01M030.TF1CARCD[PK01WNX2] != PK01W01.TF1CARCD[PK01WNDX])
      set PK01M030.TF1CARCD[PK01WNX2] modified;
      PK01W01.PK01WED1 = "Y"; /* cust.modified flag*/
    else
      set PK01M030.TF1CARCD[PK01WNX2] initialAttributes;
    end


    if (PK01M030.XOTCD[PK01WNX2] != PK01W01.XOTCD[PK01WNDX])
      set PK01M030.XOTCD[PK01WNX2] modified;
      PK01W01.PK01WED1 = "Y"; /* cust.modified flag*/
    else
      set PK01M030.XOTCD[PK01WNX2] initialAttributes;
    end


    if (PK01M030.PKRMIUNT[PK01WNX2] != PK01W01.PKRMIUNT[PK01WNDX])
      set PK01M030.PKRMIUNT[PK01WNX2] modified;
      PK01W01.PK01WED1 = "Y"; /* cust.modified flag*/
    else
      set PK01M030.PKRMIUNT[PK01WNX2] initialAttributes;
    end


    if (PK01M030.PK01MFMM[PK01WNX2] != PK01W01.PK01WMMF[PK01WNDX]
     || PK01M030.PK01MFMM[PK01WNX2] is modified)
      set PK01M030.PK01MFMM[PK01WNX2] modified;
      PK01W01.PK01WED1 = "Y"; /* order type modified flag*/
    else
      set PK01M030.PK01MFMM[PK01WNX2] initialAttributes;
    end

    if (PK01M030.PK01MFDD[PK01WNX2] != PK01W01.PK01WDDF[PK01WNDX]
     || PK01M030.PK01MFDD[PK01WNX2] is modified)
      set PK01M030.PK01MFDD[PK01WNX2] modified;
      PK01W01.PK01WED1 = "Y"; /* order type modified flag*/
    else
      set PK01M030.PK01MFDD[PK01WNX2] initialAttributes;
    end

    if (PK01M030.PK01MFYY[PK01WNX2] != PK01W01.PK01WYYF[PK01WNDX]
     || PK01M030.PK01MFYY[PK01WNX2] is modified)
      set PK01M030.PK01MFYY[PK01WNX2] modified;
      PK01W01.PK01WED1 = "Y"; /* order type modified flag*/
    else
      set PK01M030.PK01MFYY[PK01WNX2] initialAttributes;
    end

    if (PK01M030.PK01MTMM[PK01WNX2] != PK01W01.PK01WMMT[PK01WNDX]
     || PK01M030.PK01MTMM[PK01WNX2] is modified)
      set PK01M030.PK01MTMM[PK01WNX2] modified;
      PK01W01.PK01WED1 = "Y"; /* order type modified flag*/
    else
      set PK01M030.PK01MTMM[PK01WNX2] initialAttributes;
    end

    if (PK01M030.PK01MTDD[PK01WNX2] != PK01W01.PK01WDDT[PK01WNDX]
     || PK01M030.PK01MTDD[PK01WNX2] is modified)
      set PK01M030.PK01MTDD[PK01WNX2] modified;
      PK01W01.PK01WED1 = "Y"; /* order type modified flag*/
    else
      set PK01M030.PK01MTDD[PK01WNX2] initialAttributes;
    end

    if (PK01M030.PK01MTYY[PK01WNX2] != PK01W01.PK01WYYT[PK01WNDX]
     || PK01M030.PK01MTYY[PK01WNX2] is modified)
      set PK01M030.PK01MTYY[PK01WNX2] modified;
      PK01W01.PK01WED1 = "Y"; /* order type modified flag*/
    else
      set PK01M030.PK01MTYY[PK01WNX2] initialAttributes;
    end


    PK01W01.PK01WNX2 = PK01W01.PK01WNX2 - 1;
  end


end // end PK01051

// edit map line
Function PK01052()
   /* ------------------------------------------------------*/
   /* * edit map lines from the bottom up*/
       /* * pk0lwnx2 - position on map display*/
       /* * pk0lwndx - position of same data within ws. array*/
       /* * pk0lwtop - position in ws. array of record*/
                    /* at the top of the screen.*/
   /* ------------------------------------------------------*/


  PK01W01.PK01WNX2 = 13;
  while (PK01W01.PK01WNX2 >= 1)
    if (PK01M030.PK01MACT[PK01WNX2] is modified
     || PK01M030.TF1CARCD[PK01WNX2] is modified
     || PK01M030.XOTCD[PK01WNX2] is modified
     || PK01M030.PKRMIUNT[PK01WNX2] is modified
     || PK01M030.PK01MFMM[PK01WNX2] is modified
     || PK01M030.PK01MFDD[PK01WNX2] is modified
     || PK01M030.PK01MFYY[PK01WNX2] is modified
     || PK01M030.PK01MTMM[PK01WNX2] is modified
     || PK01M030.PK01MTDD[PK01WNX2] is modified
     || PK01M030.PK01MTYY[PK01WNX2] is modified)

         /* ***** find position of this record in w.s. array ****/

      PK01W01.PK01WNDX = PK01W01.PK01WTOP + PK01W01.PK01WNX2 - 1;

      PK01053(); /* edit line*/

    end

    PK01W01.PK01WNX2 = PK01W01.PK01WNX2 - 1;
  end





end // end PK01052

// edit entered fields
Function PK01053()

       /* --------------------------------------*/
       /* -  edit line items                   -*/
       /* --------------------------------------*/


   /* -----  if adding a new carrier row*/
   /* -----  or changing 'to' dont-ship-before-date*/
   /* -----      verify that date is not in the past.*/
  if (PK01M030.PK01MACT[PK01WNX2] == "A"
   || PK01M030.PK01MACT[PK01WNX2] == "C")
    if (PK01M030.PK01MTMM[PK01WNX2] != 0
     || PK01M030.PK01MTDD[PK01WNX2] != 0
    )
      /* ===== Y2K OUT BEGIN ======*/

      /* OR PK01M030.PK01MTYY(PK01WNX2) NE 0;*/
      /* MOVE EZEDTE TO PK01W01.PK01WFDA;/* date*/

      /* ===== Y2K OUT END ======*/


      /* ===== Y2K in BEGIN =====*/

       /* current date*/

      PK01W01.PK01WCTD = VGVar.currentGregorianDate;

      PK01W01.PK01WFYY = PK01M030.PK01MTYY[PK01WNX2];
      PK01W01.PK01WFMM = PK01M030.PK01MTMM[PK01WNX2];
      PK01W01.PK01WFDD = PK01M030.PK01MTDD[PK01WNX2];

       /* add century*/

      if (PK01W01.PK01WFYY < 60)
        PK01WFCT = 20;
      else
        PK01WFCT = 19;
      end

       /* compare to entered date*/
      /* entered date must be gt current*/

      if (PK01W01.PK01WFDT < PK01W01.PK01WCTD)

        /* ===== Y2K in end =====*/

        set PK01M030.PK01MTMM[PK01WNX2] cursor, modified, bold;
        set PK01M030.PK01MTDD[PK01WNX2] modified, bold;
        set PK01M030.PK01MTYY[PK01WNX2] modified, bold;
        converseLib.validationFailed(150);
      end
      if (PK01M030.PK01MTYY[PK01WNX2] == PK01W01.PK01WFYY
       && PK01M030.PK01MTMM[PK01WNX2] < PK01W01.PK01WFMM)
        set PK01M030.PK01MTMM[PK01WNX2] cursor, modified, bold;
        set PK01M030.PK01MTDD[PK01WNX2] modified, bold;
        set PK01M030.PK01MTYY[PK01WNX2] modified, bold;
        converseLib.validationFailed(150);
      end

      if (PK01M030.PK01MTYY[PK01WNX2] == PK01W01.PK01WFYY
       && PK01M030.PK01MTMM[PK01WNX2] == PK01W01.PK01WFMM
       && PK01M030.PK01MTDD[PK01WNX2] < PK01W01.PK01WFDD)
        set PK01M030.PK01MTMM[PK01WNX2] cursor, modified, bold;
        set PK01M030.PK01MTDD[PK01WNX2] modified, bold;
        set PK01M030.PK01MTYY[PK01WNX2] modified, bold;
        converseLib.validationFailed(150);
      end
    end
  end


   /* -----  if adding a new carrier row*/
   /* -----  or changing from dont-ship-before-date*/
   /* -----      verify that date is not in the past.*/
  if (PK01M030.PK01MACT[PK01WNX2] == "A"
   || PK01M030.PK01MACT[PK01WNX2] == "C")
    if (PK01M030.PK01MFMM[PK01WNX2] != 0
     || PK01M030.PK01MFDD[PK01WNX2] != 0
    )
      /* ===== Y2K OUT BEGIN ======*/

      /* OR PK01M030.PK01MFYY(PK01WNX2) NE 0;*/
      /* MOVE EZEDTE TO PK01W01.PK01WFDA;/* date*/
      /* IF PK01M030.PK01MFYY(PK01WNX2) LT PK01W01.PK01WFYY;*/

      /* ===== Y2K OUT END ======*/

      /* ===== Y2K in BEGIN =====*/

       /* current date*/

      PK01W01.PK01WCTD = VGVar.currentGregorianDate;

      PK01W01.PK01WFYY = PK01M030.PK01MFYY[PK01WNX2];
      PK01W01.PK01WFMM = PK01M030.PK01MFMM[PK01WNX2];
      PK01W01.PK01WFDD = PK01M030.PK01MFDD[PK01WNX2];

       /* add century*/

      if (PK01W01.PK01WFYY < 60)
        PK01WFCT = 20;
      else
        PK01WFCT = 19;
      end

       /* compare to entered date*/
      /* entered date must be gt current*/

      if (PK01W01.PK01WFDT < PK01W01.PK01WCTD)

        /* ===== Y2K in end =====*/

        set PK01M030.PK01MFMM[PK01WNX2] cursor, modified, bold;
        set PK01M030.PK01MFDD[PK01WNX2] modified, bold;
        set PK01M030.PK01MFYY[PK01WNX2] modified, bold;
        converseLib.validationFailed(150);
      end
      if (PK01M030.PK01MFYY[PK01WNX2] == PK01W01.PK01WFYY
       && PK01M030.PK01MFMM[PK01WNX2] < PK01W01.PK01WFMM)
        set PK01M030.PK01MFMM[PK01WNX2] cursor, modified, bold;
        set PK01M030.PK01MFDD[PK01WNX2] modified, bold;
        set PK01M030.PK01MFYY[PK01WNX2] modified, bold;
        converseLib.validationFailed(150);
      end

      if (PK01M030.PK01MFYY[PK01WNX2] == PK01W01.PK01WFYY
       && PK01M030.PK01MFMM[PK01WNX2] == PK01W01.PK01WFMM
       && PK01M030.PK01MFDD[PK01WNX2] < PK01W01.PK01WFDD)
        set PK01M030.PK01MFMM[PK01WNX2] cursor, modified, bold;
        set PK01M030.PK01MFDD[PK01WNX2] modified, bold;
        set PK01M030.PK01MFYY[PK01WNX2] modified, bold;
        converseLib.validationFailed(150);
      end
    end
  end


   /* -----  if adding a new carrier row*/
   /* -----  or changing 'to' dont-ship-before-date*/
   /* -----      verify day and month is within reason*/
  if (PK01M030.PK01MACT[PK01WNX2] == "A"
   || PK01M030.PK01MACT[PK01WNX2] == "C")
    if (PK01M030.PK01MTMM[PK01WNX2] != 0
     || PK01M030.PK01MTDD[PK01WNX2] != 0
    )
      /* ===== Y2K OUT BEGIN ======*/

      /* OR PK01M030.PK01MTYY(PK01WNX2) NE 0;*/

      /* ===== Y2K OUT END ======*/

      if (PK01M030.PK01MTMM[PK01WNX2] < 1
       || PK01M030.PK01MTMM[PK01WNX2] > 12)
        set PK01M030.PK01MTMM[PK01WNX2] cursor, modified, bold;
        set PK01M030.PK01MTDD[PK01WNX2] modified, bold;
        set PK01M030.PK01MTYY[PK01WNX2] modified, bold;
        converseLib.validationFailed(158);
      end
      if (PK01M030.PK01MTDD[PK01WNX2] < 1
       || PK01M030.PK01MTDD[PK01WNX2] > 31)
        set PK01M030.PK01MTMM[PK01WNX2] cursor, modified, bold;
        set PK01M030.PK01MTDD[PK01WNX2] modified, bold;
        set PK01M030.PK01MTYY[PK01WNX2] modified, bold;
        converseLib.validationFailed(158);
      end
    end
  end


   /* -----  if adding a new carrier row*/
   /* -----  or changing 'from' dont-ship-before-date*/
   /* -----      verify day and month is within reason*/
  if (PK01M030.PK01MACT[PK01WNX2] == "A"
   || PK01M030.PK01MACT[PK01WNX2] == "C")
    if (PK01M030.PK01MFMM[PK01WNX2] != 0
     || PK01M030.PK01MFDD[PK01WNX2] != 0
    )
      /* ===== Y2K OUT BEGIN ======*/

      /* OR PK01M030.PK01MFYY(PK01WNX2) NE 0;*/

      /* ===== Y2K OUT END ======*/

      if (PK01M030.PK01MFMM[PK01WNX2] < 1
       || PK01M030.PK01MFMM[PK01WNX2] > 12)
        set PK01M030.PK01MFMM[PK01WNX2] cursor, modified, bold;
        set PK01M030.PK01MFDD[PK01WNX2] modified, bold;
        set PK01M030.PK01MFYY[PK01WNX2] modified, bold;
        converseLib.validationFailed(158);
      end
      if (PK01M030.PK01MFDD[PK01WNX2] < 1
       || PK01M030.PK01MFDD[PK01WNX2] > 31)
        set PK01M030.PK01MFMM[PK01WNX2] modified, bold;
        set PK01M030.PK01MFDD[PK01WNX2] cursor, modified, bold;
        set PK01M030.PK01MFYY[PK01WNX2] modified, bold;
        converseLib.validationFailed(158);
      end
    end
  end


   /* -----  if adding a new carrier row*/
   /* -----  or changing 'to' dont-ship-before-date*/
   /* -----      verify that date is not*/
   /* -----      more than 1 year in the future.*/
  if (PK01M030.PK01MACT[PK01WNX2] == "A"
   || PK01M030.PK01MACT[PK01WNX2] == "C")
    if (PK01M030.PK01MFMM[PK01WNX2] != 0
     || PK01M030.PK01MFDD[PK01WNX2] != 0
    )
      /* ===== Y2K OUT BEGIN ======*/

      /* OR PK01M030.PK01MFYY(PK01WNX2) NE 0;*/
      /* MOVE EZEDTE TO PK01W01.PK01WFDA;/* date*/
      /* PK01W01.PK01WFYY = PK01W01.PK01WFYY + 1;*/
      /* IF PK01M030.PK01MfYY(PK01WNX2) GT PK01W01.PK01WFYY;*/

      /* ===== Y2K OUT END ======*/


      /* ===== Y2K in BEGIN =====*/

       /* current date plus one*/

      PK01W01.PK01WCTD = VGVar.currentGregorianDate;
      PK01W01.PK01WCTD = PK01W01.PK01WCTD + 10000;

      PK01W01.PK01WFYY = PK01M030.PK01MTYY[PK01WNX2];
      PK01W01.PK01WFMM = PK01M030.PK01MTMM[PK01WNX2];
      PK01W01.PK01WFDD = PK01M030.PK01MTDD[PK01WNX2];

       /* add century*/

      if (PK01W01.PK01WFYY < 60)
        PK01WFCT = 20;
      else
        PK01WFCT = 19;
      end


       /* compare to entered date*/
      /* entered date must be lt current + 1*/

      if (PK01W01.PK01WFDT > PK01W01.PK01WCTD)

        /* ===== Y2K in end =====*/

        set PK01M030.PK01MTMM[PK01WNX2] cursor, modified, bold;
        set PK01M030.PK01MTDD[PK01WNX2] modified, bold;
        set PK01M030.PK01MTYY[PK01WNX2] modified, bold;
        converseLib.validationFailed(151);
      end
      if (PK01M030.PK01MTYY[PK01WNX2] == PK01W01.PK01WFYY
       && PK01M030.PK01MTMM[PK01WNX2] > PK01W01.PK01WFMM)
        set PK01M030.PK01MTMM[PK01WNX2] cursor, modified, bold;
        set PK01M030.PK01MTDD[PK01WNX2] modified, bold;
        set PK01M030.PK01MTYY[PK01WNX2] modified, bold;
        converseLib.validationFailed(151);
      end

      if (PK01M030.PK01MTYY[PK01WNX2] == PK01W01.PK01WFYY
       && PK01M030.PK01MTMM[PK01WNX2] == PK01W01.PK01WFMM
       && PK01M030.PK01MTDD[PK01WNX2] > PK01W01.PK01WFDD)
        set PK01M030.PK01MTMM[PK01WNX2] cursor, modified, bold;
        set PK01M030.PK01MTDD[PK01WNX2] modified, bold;
        set PK01M030.PK01MTYY[PK01WNX2] modified, bold;
        converseLib.validationFailed(151);
      end
    end
  end


   /* -----  if adding a new carrier row*/
   /* -----  or changing 'from' dont-ship-before-date*/
   /* -----      verify that date is not*/
   /* -----      more than 1 year in the future.*/
  if (PK01M030.PK01MACT[PK01WNX2] == "A"
   || PK01M030.PK01MACT[PK01WNX2] == "C")
    if (PK01M030.PK01MFMM[PK01WNX2] != 0
     || PK01M030.PK01MFDD[PK01WNX2] != 0
    )
      /* ========= Y2K OUT BEGIN ========*/

      /* OR PK01M030.PK01MFYY(PK01WNX2) NE 0;*/

      /* ========= Y2K OUT END ========*/

      /* MOVE EZEDTE TO PK01W01.PK01WFDA;/* date*/
      /* PK01W01.PK01WFYY = PK01W01.PK01WFYY + 1;*/
      /* IF PK01M030.PK01MFYY(PK01WNX2) GT PK01W01.PK01WFYY;*/

      /* ===== Y2K in BEGIN =====*/

       /* current date plus one*/

      PK01W01.PK01WCTD = VGVar.currentGregorianDate;
      PK01W01.PK01WCTD = PK01W01.PK01WCTD + 10000;

      PK01W01.PK01WFYY = PK01M030.PK01MFYY[PK01WNX2];
      PK01W01.PK01WFMM = PK01M030.PK01MFMM[PK01WNX2];
      PK01W01.PK01WFDD = PK01M030.PK01MFDD[PK01WNX2];

       /* add century*/

      if (PK01W01.PK01WFYY < 60)
        PK01WFCT = 20;
      else
        PK01WFCT = 19;
      end


       /* compare to entered date*/
      /* entered date must be lt current + 1*/

      if (PK01W01.PK01WFDT > PK01W01.PK01WCTD)

        /* ===== Y2K in end =====*/

        set PK01M030.PK01MFMM[PK01WNX2] cursor, modified, bold;
        set PK01M030.PK01MFDD[PK01WNX2] modified, bold;
        set PK01M030.PK01MFYY[PK01WNX2] modified, bold;
        converseLib.validationFailed(151);
      end
      if (PK01M030.PK01MFYY[PK01WNX2] == PK01W01.PK01WFYY
       && PK01M030.PK01MFMM[PK01WNX2] > PK01W01.PK01WFMM)
        set PK01M030.PK01MFMM[PK01WNX2] cursor, modified, bold;
        set PK01M030.PK01MFDD[PK01WNX2] modified, bold;
        set PK01M030.PK01MFYY[PK01WNX2] modified, bold;
        converseLib.validationFailed(151);
      end

      if (PK01M030.PK01MFYY[PK01WNX2] == PK01W01.PK01WFYY
       && PK01M030.PK01MFMM[PK01WNX2] == PK01W01.PK01WFMM
       && PK01M030.PK01MFDD[PK01WNX2] > PK01W01.PK01WFDD)
        set PK01M030.PK01MFMM[PK01WNX2] cursor, modified, bold;
        set PK01M030.PK01MFDD[PK01WNX2] modified, bold;
        set PK01M030.PK01MFYY[PK01WNX2] modified, bold;
        converseLib.validationFailed(151);
      end
    end
  end


   /* -----  if adding a new carrier row*/
   /* -----      verify that 'to' date is entered*/
  if (PK01M030.PK01MACT[PK01WNX2] == "A"
   || PK01M030.PK01MACT[PK01WNX2] == "C")
    if (PK01M030.PK01MTMM[PK01WNX2] == 0
     || PK01M030.PK01MTDD[PK01WNX2] == 0)

      /* ====== Y2K OUT BEGIN =======*/

      /* OR PK01M030.PK01MTYY(PK01WNX2) EQ 0;*/

      set PK01M030.PK01MTMM[PK01WNX2] cursor, modified, bold;
      set PK01M030.PK01MTDD[PK01WNX2] modified, bold;
      set PK01M030.PK01MTYY[PK01WNX2] modified, bold;
      converseLib.validationFailed(152);
    end
  end


   /* -----  if adding a new carrier row*/
   /* -----      verify that 'from' date is entered*/
  if (PK01M030.PK01MACT[PK01WNX2] == "A"
   || PK01M030.PK01MACT[PK01WNX2] == "C")
    if (PK01M030.PK01MFMM[PK01WNX2] == 0
     || PK01M030.PK01MFDD[PK01WNX2] == 0
    )
      /* ======== Y2K OUT BEGIN ========*/

      /* OR PK01M030.PK01MFYY(PK01WNX2) EQ 0;*/

      /* ======== Y2K OUT END ========*/

      set PK01M030.PK01MFMM[PK01WNX2] cursor, modified, bold;
      set PK01M030.PK01MFDD[PK01WNX2] modified, bold;
      set PK01M030.PK01MFYY[PK01WNX2] modified, bold;
      converseLib.validationFailed(152);
    end
  end


   /* -----  if deleting a carrier*/
   /* -----      verify that 'to' date has not changed*/
  if (PK01M030.PK01MACT[PK01WNX2] == "D")
    if (PK01M030.PK01MTMM[PK01WNX2] != PK01W01.PK01WMMT[PK01WNDX]
     || PK01M030.PK01MTDD[PK01WNX2] != PK01W01.PK01WDDT[PK01WNDX]
     || PK01M030.PK01MTYY[PK01WNX2] != PK01W01.PK01WYYT[PK01WNDX])
      set PK01M030.PK01MTMM[PK01WNX2] cursor, modified, bold;
      set PK01M030.PK01MTDD[PK01WNX2] modified, bold;
      set PK01M030.PK01MTYY[PK01WNX2] modified, bold;
      converseLib.validationFailed(153);
    end
  end


   /* -----  if deleting a carrier*/
   /* -----      verify that 'from' date has not changed*/
  if (PK01M030.PK01MACT[PK01WNX2] == "D")
    if (PK01M030.PK01MFMM[PK01WNX2] != PK01W01.PK01WMMF[PK01WNDX]
     || PK01M030.PK01MFDD[PK01WNX2] != PK01W01.PK01WDDF[PK01WNDX]
     || PK01M030.PK01MFYY[PK01WNX2] != PK01W01.PK01WYYF[PK01WNDX])
      set PK01M030.PK01MFMM[PK01WNX2] cursor, modified, bold;
      set PK01M030.PK01MFDD[PK01WNX2] modified, bold;
      set PK01M030.PK01MFYY[PK01WNX2] modified, bold;
      converseLib.validationFailed(153);
    end
  end


   /* -----  if adding a new carrier row*/
   /* -----      if new entry matches an entry already entered*/
   /* -----          on the screen then, it is an error.*/
  if (PK01M030.PK01MACT[PK01WNX2] == "A")
    PK01W01.PK01WNX3 = 1;
    while (PK01W01.PK01WNX3 <= 13)
      if (PK01M030.TF1CARCD[PK01WNX2] == PK01M030.TF1CARCD[PK01WNX3]
       && PK01M030.XOTCD[PK01WNX2] == PK01M030.XOTCD[PK01WNX3]
       && PK01M030.PK01MFMM[PK01WNX2] == PK01M030.PK01MFMM[PK01WNX3]
       && PK01M030.PK01MFDD[PK01WNX2] == PK01M030.PK01MFDD[PK01WNX3]
       && PK01M030.PK01MFYY[PK01WNX2] == PK01M030.PK01MFYY[PK01WNX3]
       && PK01M030.PK01MTMM[PK01WNX2] == PK01M030.PK01MTMM[PK01WNX3]
       && PK01M030.PK01MTDD[PK01WNX2] == PK01M030.PK01MTDD[PK01WNX3]
       && PK01M030.PK01MTYY[PK01WNX2] == PK01M030.PK01MTYY[PK01WNX3]
       && PK01WNX2 != PK01WNX3)
        set PK01M030.TF1CARCD[PK01WNX2] cursor, modified, bold;
        set PK01M030.XOTCD[PK01WNX2] modified, bold;
        set PK01M030.PK01MFMM[PK01WNX2] modified, bold;
        set PK01M030.PK01MFDD[PK01WNX2] modified, bold;
        set PK01M030.PK01MFYY[PK01WNX2] modified, bold;
        set PK01M030.PK01MTMM[PK01WNX2] modified, bold;
        set PK01M030.PK01MTDD[PK01WNX2] modified, bold;
        set PK01M030.PK01MTYY[PK01WNX2] modified, bold;
        converseLib.validationFailed(154);
      end
      PK01W01.PK01WNX3 = PK01W01.PK01WNX3 + 1;
    end
  end


   /* -----  if changing a carrier row*/
   /* -----      if the entry matches an entry already entered*/
   /* -----          on the screen then, it is an error.*/
  if (PK01M030.PK01MACT[PK01WNX2] == "C")
    PK01W01.PK01WNX3 = 1;
    while (PK01W01.PK01WNX3 <= 13)
      if (PK01M030.TF1CARCD[PK01WNX2] == PK01M030.TF1CARCD[PK01WNX3]
       && PK01M030.XOTCD[PK01WNX2] == PK01M030.XOTCD[PK01WNX3]
       && PK01M030.PK01MFMM[PK01WNX2] == PK01M030.PK01MFMM[PK01WNX3]
       && PK01M030.PK01MFDD[PK01WNX2] == PK01M030.PK01MFDD[PK01WNX3]
       && PK01M030.PK01MFYY[PK01WNX2] == PK01M030.PK01MFYY[PK01WNX3]
       && PK01M030.PK01MTMM[PK01WNX2] == PK01M030.PK01MTMM[PK01WNX3]
       && PK01M030.PK01MTDD[PK01WNX2] == PK01M030.PK01MTDD[PK01WNX3]
       && PK01M030.PK01MTYY[PK01WNX2] == PK01M030.PK01MTYY[PK01WNX3]
       && PK01WNX2 != PK01WNX3)
        set PK01M030.TF1CARCD[PK01WNX2] cursor, modified, bold;
        set PK01M030.XOTCD[PK01WNX2] modified, bold;
        set PK01M030.PK01MFMM[PK01WNX2] modified, bold;
        set PK01M030.PK01MFDD[PK01WNX2] modified, bold;
        set PK01M030.PK01MFYY[PK01WNX2] modified, bold;
        set PK01M030.PK01MTMM[PK01WNX2] modified, bold;
        set PK01M030.PK01MTDD[PK01WNX2] modified, bold;
        set PK01M030.PK01MTYY[PK01WNX2] modified, bold;
        converseLib.validationFailed(154);
      end
      PK01W01.PK01WNX3 = PK01W01.PK01WNX3 + 1;
    end
  end


   /* -----  if adding a new carrier row*/
   /* -----      if new entry matches an entry already entered*/
   /* -----          in the db2 table, it is an error.*/
  if (PK01M030.PK01MACT[PK01WNX2] == "A")
    PK01W01.PK01WNX3 = 1;
    while (PK01W01.PK01WNX3 <= PK01W01.PK01WMAX)
      if (PK01M030.TF1CARCD[PK01WNX2] == PK01W01.TF1CARCD[PK01WNX3]
       && PK01M030.XOTCD[PK01WNX2] == PK01W01.XOTCD[PK01WNX3]
       && PK01M030.PK01MFMM[PK01WNX2] == PK01W01.PK01WMMF[PK01WNX3]
       && PK01M030.PK01MFDD[PK01WNX2] == PK01W01.PK01WDDF[PK01WNX3]
       && PK01M030.PK01MFYY[PK01WNX2] == PK01W01.PK01WYYF[PK01WNX3]
       && PK01M030.PK01MTMM[PK01WNX2] == PK01W01.PK01WMMT[PK01WNX3]
       && PK01M030.PK01MTDD[PK01WNX2] == PK01W01.PK01WDDT[PK01WNX3]
       && PK01M030.PK01MTYY[PK01WNX2] == PK01W01.PK01WYYT[PK01WNX3])
        set PK01M030.TF1CARCD[PK01WNX2] cursor, modified, bold;
        set PK01M030.XOTCD[PK01WNX2] modified, bold;
        set PK01M030.PK01MFMM[PK01WNX2] modified, bold;
        set PK01M030.PK01MFDD[PK01WNX2] modified, bold;
        set PK01M030.PK01MFYY[PK01WNX2] modified, bold;
        set PK01M030.PK01MTMM[PK01WNX2] modified, bold;
        set PK01M030.PK01MTDD[PK01WNX2] modified, bold;
        set PK01M030.PK01MTYY[PK01WNX2] modified, bold;
        converseLib.validationFailed(154);
      end
      PK01W01.PK01WNX3 = PK01W01.PK01WNX3 + 1;
    end
  end


   /* -----  if changing a carrier row*/
   /* -----      if the entry matches an entry already entered*/
   /* -----          in the db2 table, it is an error.*/
  if (PK01M030.PK01MACT[PK01WNX2] == "C")
    PK01W01.PK01WNX3 = 1;
    while (PK01W01.PK01WNX3 <= PK01W01.PK01WMAX)
      if (PK01M030.TF1CARCD[PK01WNX2] == PK01W01.TF1CARCD[PK01WNX3]
       && PK01M030.XOTCD[PK01WNX2] == PK01W01.XOTCD[PK01WNX3]
       && PK01M030.PK01MFMM[PK01WNX2] == PK01W01.PK01WMMF[PK01WNX3]
       && PK01M030.PK01MFDD[PK01WNX2] == PK01W01.PK01WDDF[PK01WNX3]
       && PK01M030.PK01MFYY[PK01WNX2] == PK01W01.PK01WYYF[PK01WNX3]
       && PK01M030.PK01MTMM[PK01WNX2] == PK01W01.PK01WMMT[PK01WNX3]
       && PK01M030.PK01MTDD[PK01WNX2] == PK01W01.PK01WDDT[PK01WNX3]
       && PK01M030.PK01MTYY[PK01WNX2] == PK01W01.PK01WYYT[PK01WNX3]
       && PK01WNX2 != PK01WNX3)
        set PK01M030.TF1CARCD[PK01WNX2] cursor, modified, bold;
        set PK01M030.XOTCD[PK01WNX2] modified, bold;
        set PK01M030.PK01MFMM[PK01WNX2] modified, bold;
        set PK01M030.PK01MFDD[PK01WNX2] modified, bold;
        set PK01M030.PK01MFYY[PK01WNX2] modified, bold;
        set PK01M030.PK01MTMM[PK01WNX2] modified, bold;
        set PK01M030.PK01MTDD[PK01WNX2] modified, bold;
        set PK01M030.PK01MTYY[PK01WNX2] modified, bold;
        converseLib.validationFailed(154);
      end
      PK01W01.PK01WNX3 = PK01W01.PK01WNX3 + 1;
    end
  end


   /* -----  if units to select has changed*/
   /* -----      check for units greater than zero*/
  if (PK01M030.PK01MACT[PK01WNX2] == "A"
   || PK01M030.PK01MACT[PK01WNX2] == "C")
    if (PK01M030.PKRMIUNT[PK01WNX2] > 0)
       /* ----- NEXT SENTENCE*/
    else
      set PK01M030.PKRMIUNT[PK01WNX2] cursor, modified, bold;
      converseLib.validationFailed(221);
    end
  end


   /* -----  if order type has changed*/
   /* -----      check for valid order type*/
  if (PK01M030.PK01MACT[PK01WNX2] == "A"
   || PK01M030.PK01MACT[PK01WNX2] == "C")
    if (PK01M030.XOTCD[PK01WNX2] != "  ")
      if (PK01M030.XOTCD[PK01WNX2] in XOTTBL.XOTCD
       && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* ----- NEXT SENTENCE*/
      else
        set PK01M030.XOTCD[PK01WNX2] cursor, modified, bold;
        converseLib.validationFailed(129);
      end
    end
  end


   /* -----  if selected carrier has changed*/
   /* -----      check for valid carrier (get description)*/
  if (PK01M030.PK01MACT[PK01WNX2] == "A"
   || PK01M030.PK01MACT[PK01WNX2] == "C")
    if (PK01M030.TF1CARCD[PK01WNX2] != "    ")
      PK01W01.PK01WCCR = PK01M030.TF1CARCD[PK01WNX2];
      PK01026(); /* get carrier abbreviation*/
      if (SQLCA.VAGen_SQLCODE == 0) /* a row was found*/
        PK01M030.TF1ABRV[PK01WNX2] = PK01W01.PK01WACR;
        if (PK01M030.XWHCD != TF1REC.XWHCD[1]
         && PK01M030.XWHCD != TF1REC.XWHCD[2]
         && PK01M030.XWHCD != TF1REC.XWHCD[3]
         && PK01M030.XWHCD != TF1REC.XWHCD[4]
         && PK01M030.XWHCD != TF1REC.XWHCD[5]
         && PK01M030.XWHCD != TF1REC.XWHCD[6]
         && PK01M030.XWHCD != TF1REC.XWHCD[7]
         && PK01M030.XWHCD != TF1REC.XWHCD[8]
         && PK01M030.XWHCD != TF1REC.XWHCD[9]
         && PK01M030.XWHCD != TF1REC.XWHCD[10]
         && PK01M030.XWHCD != TF1REC.XWHCD[11]
         && PK01M030.XWHCD != TF1REC.XWHCD[12]
         && PK01M030.XWHCD != TF1REC.XWHCD[13]
         && PK01M030.XWHCD != TF1REC.XWHCD[14]
         && PK01M030.XWHCD != TF1REC.XWHCD[15])
          set PK01M030.TF1CARCD[PK01WNX2] cursor, modified, bold;
          converseLib.validationFailed(149);
        end
      end
      if (SQLCA.VAGen_SQLCODE != 0) /* a row was not found*/
        set PK01M030.TF1CARCD[PK01WNX2] cursor, modified, bold;
        converseLib.validationFailed(77);
      end
    end
  end


   /* -----  check action code*/
   /* -----      check for add, change or delete code*/
  if (PK01M030.PK01MACT[PK01WNX2] != " ")
    if (PK01M030.PK01MACT[PK01WNX2] == "A"
     || PK01M030.PK01MACT[PK01WNX2] == "C"
     || PK01M030.PK01MACT[PK01WNX2] == "D")
       /* ----- NEXT SENTENCE*/
    else
      set PK01M030.PK01MACT[PK01WNX2] cursor, modified, bold;
      converseLib.validationFailed(035);
    end
  end


   /* -----  if no action code entered*/
   /* -----      check to see if fields were updated*/
  if (PK01M030.PK01MACT[PK01WNX2] == " ")
    if (PK01M030.TF1CARCD[PK01WNX2] is modified
     || PK01M030.XOTCD[PK01WNX2] is modified
     || PK01M030.PKRMIUNT[PK01WNX2] is modified
     || PK01M030.PK01MFMM[PK01WNX2] is modified
     || PK01M030.PK01MFDD[PK01WNX2] is modified
     || PK01M030.PK01MFYY[PK01WNX2] is modified
     || PK01M030.PK01MTMM[PK01WNX2] is modified
     || PK01M030.PK01MTDD[PK01WNX2] is modified
     || PK01M030.PK01MTYY[PK01WNX2] is modified)
      set PK01M030.PK01MACT[PK01WNX2] cursor, modified, bold;
      converseLib.validationFailed(043);
    end
  end


   /* -----  check plan or normal indicator*/
   /* -----      check for y=plan, n=non plan*/
  if (PK01M030.PK01MPLN == "Y"
   || PK01M030.PK01MPLN == "N")
    if (PK01M030.PK01MPLN == "Y")
      PK01W01.PK01WED2 = "Y";
      set PK01M030.PK01MPLN protect;
    end
    if (PK01M030.PK01MPLN == "N")
      PK01W01.PK01WED2 = "N";
      set PK01M030.PK01MPLN protect;
    end
  else
    set PK01M030.PK01MPLN cursor, modified, bold;
    converseLib.validationFailed(235);
  end


end // end PK01053

// update pack & hold select tbl
Function PK01080()



  PK01W01.PK01WNX2 = 1;
  while (PK01W01.PK01WNX2 <= 13)
    if (PK01M030.PK01MACT[PK01WNX2] is modified
     || PK01M030.TF1CARCD[PK01WNX2] is modified
     || PK01M030.XOTCD[PK01WNX2] is modified
     || PK01M030.PKRMIUNT[PK01WNX2] is modified
     || PK01M030.PK01MFMM[PK01WNX2] is modified
     || PK01M030.PK01MFDD[PK01WNX2] is modified
     || PK01M030.PK01MFYY[PK01WNX2] is modified
     || PK01M030.PK01MTMM[PK01WNX2] is modified
     || PK01M030.PK01MTDD[PK01WNX2] is modified
     || PK01M030.PK01MTYY[PK01WNX2] is modified)


      PK01W01.PK01WNDX = PK01W01.PK01WTOP + PK01W01.PK01WNX2 - 1;
      if (PK01M030.PK01MACT[PK01WNX2] == "A")
        PK01081(); /* database add*/
      end

      if (PK01M030.PK01MACT[PK01WNX2] == "C")
        PK01083(); /* database change*/
      end

      if (PK01M030.PK01MACT[PK01WNX2] == "D")
        PK01082(); /* database delete*/
      end



    end

    PK01W01.PK01WNX2 = PK01W01.PK01WNX2 + 1;
  end



end // end PK01080

// add pack & hold row
Function PK01081()


     /* **************  add  new record  *************/
  PK01M030.XXXERRID = "PK01081";

   /* ******************************************************/
   /* *    first check to make sure the record has not    **/
   /* *    been added by someone else.                    **/
   /* ******************************************************/
  set SQLCA empty;
  set PKJREC empty;

  PKJREC.XWHCD = PK01M030.XWHCD;

  if (PK01W01.PK01WED2 == "Y")
    PKJREC.PKURUNMD = "P"; /* runmode*/
  else
    PKJREC.PKURUNMD = " "; /* runmode*/
  end
  PKJREC.TF1CARCD = PK01M030.TF1CARCD[PK01WNX2];
  PKJREC.XOTCD = PK01M030.XOTCD[PK01WNX2];
  PK01W01.PK01WFMM = PK01M030.PK01MFMM[PK01WNX2];
  PK01W01.PK01WFDD = PK01M030.PK01MFDD[PK01WNX2];
  PK01W01.PK01WFYY = PK01M030.PK01MFYY[PK01WNX2];

   /* ======== Y2K OUT BEGIN =======*/

   /* MOVE 19 TO PK01W01.PK01WFCT;     /* centry*/

   /* ======== Y2K OUT END   =======*/


   /* ======== Y2K IN BEGIN =======*/

  if (PK01W01.PK01WFYY < 60)
    PK01W01.PK01WFCT = 20;
  else
    PK01W01.PK01WFCT = 19;
  end

   /* ======== Y2K IN  END   =======*/

  PKJREC.PKJDNSBF = PK01W01.PK01WFDT; /* from dnsb date*/
  PK01W01.PK01WFMM = PK01M030.PK01MTMM[PK01WNX2];
  PK01W01.PK01WFDD = PK01M030.PK01MTDD[PK01WNX2];
  PK01W01.PK01WFYY = PK01M030.PK01MTYY[PK01WNX2];


   /* ======== Y2K OUT BEGIN =======*/

   /* MOVE 19 TO PK01W01.PK01WFCT;     /* centry*/

   /* ======== Y2K OUT END   =======*/


   /* ======== Y2K IN BEGIN =======*/

  if (PK01W01.PK01WFYY < 60)
    PK01W01.PK01WFCT = 20;
  else
    PK01W01.PK01WFCT = 19;
  end

   /* ======== Y2K IN  END   =======*/

  PKJREC.PKJDNSBT = PK01W01.PK01WFDT; /* to dnsb date*/

  call "IO1750" ("S ", SQLCA, PKJREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 100) /* not found, thats good*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == +0)
      set PK01M030.TF1CARCD[PK01WNX2] cursor, modified, bold;
      PK01W01.PK01WUPD = "N"; /* d.b. updated flag*/
      converseLib.validationFailed(105);
      exit stack;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "PK01";
        TA1REC.TA1LOCAT = "SELECT";
        TA1REC.TA1MAP = "PK01M030";
        TA1REC.TA1DBASE = "DPICK.";
        TA1REC.TA1TBLVU = "VSELPH01"; /* table view*/
        TA1REC.TA1TBLKE = PK01M030.XWHCD; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        set PK01M030.TF1CARCD[PK01WNX2] cursor, modified, bold;
        converseLib.validationFailed(28);
        exit stack;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "PK01";
        TA1REC.TA1LOCAT = "SELECT";
        TA1REC.TA1MAP = "PK01M030";
        TA1REC.TA1DBASE = "DPICK.";
        TA1REC.TA1TBLVU = "VSELPH01"; /* table view*/
        TA1REC.TA1TBLKE = PK01M030.XWHCD; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        converseLib.validationFailed(29);
        exit stack;
      end
    end
  end







   /* ******************************************************/
   /* *    now add the row.                               **/
   /* ******************************************************/
  set SQLCA empty;
  set PKJREC empty;

  PKJREC.XWHCD = PK01M030.XWHCD;

  if (PK01W01.PK01WED2 == "Y")
    PKJREC.PKURUNMD = "P"; /* runmode*/
  else
    PKJREC.PKURUNMD = " "; /* runmode*/
  end

  PKJREC.TF1CARCD = PK01M030.TF1CARCD[PK01WNX2];
  PKJREC.XOTCD = PK01M030.XOTCD[PK01WNX2];
  PKJREC.PKRMIUNT = PK01M030.PKRMIUNT[PK01WNX2];
  PK01W01.PK01WFMM = PK01M030.PK01MFMM[PK01WNX2];
  PK01W01.PK01WFDD = PK01M030.PK01MFDD[PK01WNX2];
  PK01W01.PK01WFYY = PK01M030.PK01MFYY[PK01WNX2];

   /* ======== Y2K OUT BEGIN =======*/

   /* MOVE 19 TO PK01W01.PK01WFCT;     /* centry*/

   /* ======== Y2K OUT END   =======*/


   /* ======== Y2K IN BEGIN =======*/

  if (PK01W01.PK01WFYY < 60)
    PK01W01.PK01WFCT = 20;
  else
    PK01W01.PK01WFCT = 19;
  end

   /* ======== Y2K IN  END   =======*/


  PKJREC.PKJDNSBF = PK01W01.PK01WFDT; /* from dnsb date*/

  PK01W01.PK01WFMM = PK01M030.PK01MTMM[PK01WNX2];
  PK01W01.PK01WFDD = PK01M030.PK01MTDD[PK01WNX2];
  PK01W01.PK01WFYY = PK01M030.PK01MTYY[PK01WNX2];

   /* ======== Y2K OUT BEGIN =======*/

   /* MOVE 19 TO PK01W01.PK01WFCT;     /* centry*/

   /* ======== Y2K OUT END   =======*/


   /* ======== Y2K IN BEGIN =======*/

  if (PK01W01.PK01WFYY < 60)
    PK01W01.PK01WFCT = 20;
  else
    PK01W01.PK01WFCT = 19;
  end

   /* ======== Y2K IN  END   =======*/

  PKJREC.PKJDNSBT = PK01W01.PK01WFDT; /* to dnsb date*/


  PK01084(); /* date/time*/

  call "IO1750" ("A ", SQLCA, PKJREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    PK01W01.PK01WUPD = "Y"; /* d.b. updated flag*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMNM = "PK01";
      TA1REC.TA1LOCAT = "ADD";
      TA1REC.TA1MAP = "PK01M030";
      TA1REC.TA1DBASE = "DPICK.";
      TA1REC.TA1TBLVU = "VSELPH01"; /* table view*/
      TA1REC.TA1TBLKE = PK01M030.XWHCD; /* table key*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      set PK01M030.TF1CARCD[PK01WNX2] cursor, modified, bold;
      converseLib.validationFailed(28);
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "PK01";
      TA1REC.TA1LOCAT = "ADD";
      TA1REC.TA1MAP = "PK01M030";
      TA1REC.TA1DBASE = "DPICK.";
      TA1REC.TA1TBLVU = "VSELPH01"; /* table view*/
      TA1REC.TA1TBLKE = PK01M030.XWHCD; /* table key*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      converseLib.validationFailed(29);
      exit stack;
    end
  end



end // end PK01081

// delete pack & hold row
Function PK01082()


     /* **************  delete a row               *****/

  PK01M030.XXXERRID = "PK01082";
  set PKJREC empty;
  set SQLCA empty;


  PKJREC.XWHCD = PK01M030.XWHCD;

  if (PK01W01.PK01WED2 == "Y")
    PKJREC.PKURUNMD = "P"; /* runmode*/
  else
    PKJREC.PKURUNMD = " "; /* runmode*/
  end

  PK01W01.PK01WNDX = PK01W01.PK01WTOP + PK01W01.PK01WNX2 - 1;
  PKJREC.TF1CARCD = PK01W01.TF1CARCD[PK01WNDX];
  PKJREC.XOTCD = PK01M030.XOTCD[PK01WNX2];
  PKJREC.PKRMIUNT = PK01M030.PKRMIUNT[PK01WNX2];

  PK01W01.PK01WFMM = PK01M030.PK01MFMM[PK01WNX2];
  PK01W01.PK01WFDD = PK01M030.PK01MFDD[PK01WNX2];
  PK01W01.PK01WFYY = PK01M030.PK01MFYY[PK01WNX2];


   /* ======== Y2K OUT BEGIN =======*/

   /* MOVE 19 TO PK01W01.PK01WFCT;     /* centry*/

   /* ======== Y2K OUT END   =======*/


   /* ======== Y2K IN BEGIN =======*/

  if (PK01W01.PK01WFYY < 60)
    PK01W01.PK01WFCT = 20;
  else
    PK01W01.PK01WFCT = 19;
  end

   /* ======== Y2K IN  END   =======*/

  PKJREC.PKJDNSBF = PK01W01.PK01WFDT; /* from dnsb date*/

  PK01W01.PK01WFMM = PK01M030.PK01MTMM[PK01WNX2];
  PK01W01.PK01WFDD = PK01M030.PK01MTDD[PK01WNX2];
  PK01W01.PK01WFYY = PK01M030.PK01MTYY[PK01WNX2];


   /* ======== Y2K OUT BEGIN =======*/

   /* MOVE 19 TO PK01W01.PK01WFCT;     /* centry*/

   /* ======== Y2K OUT END   =======*/


   /* ======== Y2K IN BEGIN =======*/

  if (PK01W01.PK01WFYY < 60)
    PK01W01.PK01WFCT = 20;
  else
    PK01W01.PK01WFCT = 19;
  end

   /* ======== Y2K IN  END   =======*/


  PKJREC.PKJDNSBF = PK01W01.PK01WFDT; /* from dnsb date*/

  PK01W01.PK01WFMM = PK01M030.PK01MTMM[PK01WNX2];
  PK01W01.PK01WFDD = PK01M030.PK01MTDD[PK01WNX2];
  PK01W01.PK01WFYY = PK01M030.PK01MTYY[PK01WNX2];


   /* ======== Y2K OUT BEGIN =======*/

   /* MOVE 19 TO PK01W01.PK01WFCT;     /* centry*/

   /* ======== Y2K OUT END   =======*/


   /* ======== Y2K IN BEGIN =======*/

  if (PK01W01.PK01WFYY < 60)
    PK01W01.PK01WFCT = 20;
  else
    PK01W01.PK01WFCT = 19;
  end

   /* ======== Y2K IN  END   =======*/

  PKJREC.PKJDNSBT = PK01W01.PK01WFDT; /* to dnsb date*/

  call "IO1750" ("D ", SQLCA, PKJREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    PK01W01.PK01WUPD = "Y"; /* d.b. updated flag*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(201);
      set PK01M030.TF1CARCD[PK01WNX2] cursor, modified, bold;
      PK01W01.PK01WUPD = "N"; /* d.b. updated flag*/
      exit stack;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "PK01";
        TA1REC.TA1LOCAT = "DELETE ";
        TA1REC.TA1MAP = "PK01M030";
        TA1REC.TA1DBASE = "DPICK.";
        TA1REC.TA1TBLVU = "VSELPH01"; /* table view*/
        TA1REC.TA1TBLKE = PK01M030.XWHCD; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        converseLib.validationFailed(28);
        exit stack;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "PK01";
        TA1REC.TA1LOCAT = "DELETE ";
        TA1REC.TA1MAP = "PK01M030";
        TA1REC.TA1DBASE = "DPICK.";
        TA1REC.TA1TBLVU = "VSELPH01"; /* table view*/
        TA1REC.TA1TBLKE = PK01M030.XWHCD; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        converseLib.validationFailed(29);
        exit stack;
      end
    end
  end





end // end PK01082

// change pack & hold row
Function PK01083()


     /* ********* change.*/
     /* ********* actually a delete*/
     /* ********* and an add*/

  PK01M030.XXXERRID = "PK01083";
  set SQLCA empty;
  set PKJREC empty;


  PKJREC.XWHCD = PK01M030.XWHCD;

  if (PK01W01.PK01WED2 == "Y")
    PKJREC.PKURUNMD = "P"; /* runmode*/
  else
    PKJREC.PKURUNMD = " "; /* runmode*/
  end

  PK01W01.PK01WNDX = PK01W01.PK01WTOP + PK01W01.PK01WNX2 - 1;
  PKJREC.TF1CARCD = PK01W01.TF1CARCD[PK01WNDX];
  PKJREC.XOTCD = PK01W01.XOTCD[PK01WNDX];
  PKJREC.PKRMIUNT = PK01W01.PKRMIUNT[PK01WNDX];
  PK01W01.PK01WFMM = PK01W01.PK01WMMF[PK01WNDX];
  PK01W01.PK01WFDD = PK01W01.PK01WDDF[PK01WNDX];
  PK01W01.PK01WFYY = PK01W01.PK01WYYF[PK01WNDX];

   /* ======== Y2K OUT BEGIN =======*/

   /* MOVE 19 TO PK01W01.PK01WFCT;     /* centry*/

   /* ======== Y2K OUT END   =======*/


   /* ======== Y2K IN BEGIN =======*/

  if (PK01W01.PK01WFYY < 60)
    PK01W01.PK01WFCT = 20;
  else
    PK01W01.PK01WFCT = 19;
  end

   /* ======== Y2K IN  END   =======*/

  PKJREC.PKJDNSBF = PK01W01.PK01WFDT; /* from dnsb date*/
  PK01W01.PK01WFMM = PK01W01.PK01WMMT[PK01WNDX];
  PK01W01.PK01WFDD = PK01W01.PK01WDDT[PK01WNDX];
  PK01W01.PK01WFYY = PK01W01.PK01WYYT[PK01WNDX];

   /* ======== Y2K OUT BEGIN =======*/

   /* MOVE 19 TO PK01W01.PK01WFCT;     /* centry*/

   /* ======== Y2K OUT END   =======*/


   /* ======== Y2K IN BEGIN =======*/

  if (PK01W01.PK01WFYY < 60)
    PK01W01.PK01WFCT = 20;
  else
    PK01W01.PK01WFCT = 19;
  end

   /* ======== Y2K IN  END   =======*/

  PKJREC.PKJDNSBT = PK01W01.PK01WFDT; /* to dnsb date*/

  call "IO1750" ("D ", SQLCA, PKJREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    PK01W01.PK01WUPD = "Y"; /* d.b. updated flag*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(105);
      PK01W01.PK01WUPD = "N"; /* d.b. updated flag*/
      set PK01M030.TF1CARCD[PK01WNX2] cursor, modified, bold;
      exit stack;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "PK01";
        TA1REC.TA1LOCAT = "DELETE ";
        TA1REC.TA1MAP = "PK01M030";
        TA1REC.TA1DBASE = "DPICK.";
        TA1REC.TA1TBLVU = "VSELPH01"; /* table view*/
        TA1REC.TA1TBLKE = PK01M030.XWHCD; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        converseLib.validationFailed(28);
        exit stack;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "PK01";
        TA1REC.TA1LOCAT = "DELETE ";
        TA1REC.TA1MAP = "PK01M030";
        TA1REC.TA1DBASE = "DPICK.";
        TA1REC.TA1TBLVU = "VSELPH01"; /* table view*/
        TA1REC.TA1TBLKE = PK01M030.XWHCD; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        converseLib.validationFailed(29);
        exit stack;
      end
    end
  end




  set SQLCA empty;
  set PKJREC empty;


  PKJREC.XWHCD = PK01M030.XWHCD;

  if (PK01W01.PK01WED2 == "Y")
    PKJREC.PKURUNMD = "P"; /* runmode*/
  else
    PKJREC.PKURUNMD = " "; /* runmode*/
  end

  PKJREC.TF1CARCD = PK01M030.TF1CARCD[PK01WNX2];
  PKJREC.XOTCD = PK01M030.XOTCD[PK01WNX2];
  PKJREC.PKRMIUNT = PK01M030.PKRMIUNT[PK01WNX2];
  PK01W01.PK01WFMM = PK01M030.PK01MFMM[PK01WNX2];
  PK01W01.PK01WFDD = PK01M030.PK01MFDD[PK01WNX2];
  PK01W01.PK01WFYY = PK01M030.PK01MFYY[PK01WNX2];

   /* ======== Y2K OUT BEGIN =======*/

   /* MOVE 19 TO PK01W01.PK01WFCT;     /* centry*/

   /* ======== Y2K OUT END   =======*/


   /* ======== Y2K IN BEGIN =======*/

  if (PK01W01.PK01WFYY < 60)
    PK01W01.PK01WFCT = 20;
  else
    PK01W01.PK01WFCT = 19;
  end

   /* ======== Y2K IN  END   =======*/

  PKJREC.PKJDNSBF = PK01W01.PK01WFDT; /* from dnsb date*/
  PK01W01.PK01WFMM = PK01M030.PK01MTMM[PK01WNX2];
  PK01W01.PK01WFDD = PK01M030.PK01MTDD[PK01WNX2];
  PK01W01.PK01WFYY = PK01M030.PK01MTYY[PK01WNX2];

   /* ======== Y2K OUT BEGIN =======*/

   /* MOVE 19 TO PK01W01.PK01WFCT;     /* centry*/

   /* ======== Y2K OUT END   =======*/


   /* ======== Y2K IN BEGIN =======*/

  if (PK01W01.PK01WFYY < 60)
    PK01W01.PK01WFCT = 20;
  else
    PK01W01.PK01WFCT = 19;
  end

   /* ======== Y2K IN  END   =======*/

  PKJREC.PKJDNSBT = PK01W01.PK01WFDT; /* to dnsb date*/


  PK01084(); /* date/time*/

  call "IO1750" ("A ", SQLCA, PKJREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    PK01W01.PK01WUPD = "Y"; /* d.b. updated flag*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(105);
      PK01W01.PK01WUPD = "N"; /* d.b. updated flag*/
      set PK01M030.TF1CARCD[PK01WNX2] cursor, modified, bold;
      exit stack;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "PK01";
        TA1REC.TA1LOCAT = "ADD    ";
        TA1REC.TA1MAP = "PK01M030";
        TA1REC.TA1DBASE = "DPICK.";
        TA1REC.TA1TBLVU = "VSELPH01"; /* table view*/
        TA1REC.TA1TBLKE = PK01M030.XWHCD; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        converseLib.validationFailed(28);
        exit stack;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "PK01";
        TA1REC.TA1LOCAT = "CHANGE ";
        TA1REC.TA1MAP = "PK01M030";
        TA1REC.TA1DBASE = "DPICK.";
        TA1REC.TA1TBLVU = "VSELPH01"; /* table view*/
        TA1REC.TA1TBLKE = PK01M030.XWHCD; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        converseLib.validationFailed(29);
        exit stack;
      end
    end
  end




end // end PK01083

// dates for new/changed pkjrec
Function PK01084()



  PK01W01.PK01WFDA = VGVar.currentShortGregorianDate; /* date*/

   /* ======== Y2K OUT BEGIN =======*/

   /* MOVE 19 TO PK01W01.PK01WFCT;     /* centry*/

   /* ======== Y2K OUT END   =======*/


   /* ======== Y2K IN BEGIN =======*/

  if (PK01W01.PK01WFYY < 60)
    PK01W01.PK01WFCT = 20;
  else
    PK01W01.PK01WFCT = 19;
  end

   /* ======== Y2K IN  END   =======*/

  PKJREC.PKJDNSBF = PK01W01.PK01WFDT; /* from dnsb date*/
  PK01W01.PK01WFMM = PK01M030.PK01MTMM[PK01WNX2];
  PK01W01.PK01WFDD = PK01M030.PK01MTDD[PK01WNX2];
  PK01W01.PK01WFYY = PK01M030.PK01MTYY[PK01WNX2];


   /* ======== Y2K OUT BEGIN =======*/

   /* MOVE 19 TO PK01W01.PK01WFCT;     /* centry*/

   /* ======== Y2K OUT END   =======*/


   /* ======== Y2K IN BEGIN =======*/

  if (PK01W01.PK01WFYY < 60)
    PK01W01.PK01WFCT = 20;
  else
    PK01W01.PK01WFCT = 19;
  end

   /* ======== Y2K IN  END   =======*/

  PKJREC.ZZZCHGDT = PK01W01.PK01WFDT; /* change date*/
  PK01W01.PK01WTIM = VGVar.currentFormattedTime;
  PK01W01.PK01WTHH = PK01W01.PK01WHH;
  PK01W01.PK01WTMM = PK01W01.PK01WMI;
  PKJREC.ZZZCHGTM = PK01W01.PK01WTI; /* change time*/



end // end PK01084

//*** RECORD=PK01W01 ****
// ;********************** pk0lw01 ****************************
// ;
// ;         work record for pk01: pack and hole selection
// ;
// ;***********************************************************
// ***********************
Record PK01W01 type basicRecord
  5 PK01WGR1 PK01WGR1 ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 PK01WCTD PK01WCTD ; 
    10 PK01WNDX PK01WNDX ; 
    10 PK01WNX2 PK01WNX2 ; 
    10 PK01WNX3 PK01WNX3 ; 
    10 PK01WMAX PK01WMAX ; 
    10 PK01WTOP PK01WTOP ; 
    10 PK01WBOT PK01WBOT ; 
    10 PK01WFL1 PK01WFL1 ; 
    10 PK01WFL2 PK01WFL2 ; 
    10 PK01WMOD PK01WMOD ; 
    10 PK01WED1 PK01WED1 ; 
    10 PK01WED2 PK01WED2 ; 
    10 PK01WUPD PK01WUPD ; 
    10 PK01WDT PK01WDT ; 
      15 PK01WMM PK01WMM ; 
      15 PK01WDD PK01WDD ; 
      15 PK01WYY PK01WYY ; 
    10 PK01WFDT PK01WFDT ; 
      15 PK01WFCT PK01WFCT ; 
      15 PK01WFDA PK01WFDA ; 
        20 PK01WFYY PK01WFYY ; 
        20 PK01WFMM PK01WFMM ; 
        20 PK01WFDD PK01WFDD ; 
    10 PK01WTIM PK01WTIM ; 
      15 PK01WHH PK01WHH ; 
      15 * char(1) ; 
      15 PK01WMI PK01WMI ; 
      15 * char(1) ; 
      15 PK01WSS PK01WSS ; 
    10 PK01WTI PK01WTI ; 
      15 PK01WTHH PK01WTHH ; 
      15 PK01WTMM PK01WTMM ; 
    10 * char(1) ; 
    10 PK01WCCR PK01WCCR ; 
    10 PK01WACR PK01WACR ; 
    10 PK01WSAV PK01WSAV ; 
      15 TF1CARCD TF1CARCD [514] ; 
      15 TF1ABRV TF1ABRV [514] ; 
      15 XOTCD XOTCD [514] ; 
      15 PKRMIUNT PKRMIUNT [514] ; 
      15 PK01WMMF PK01WMMF [514] ; 
      15 PK01WDDF PK01WDDF [514] ; 
      15 PK01WYYF PK01WYYF [514] ; 
      15 PK01WMMT PK01WMMT [514] ; 
      15 PK01WDDT PK01WDDT [514] ; 
      15 PK01WYYT PK01WYYT [514] ; 
      15 ZZZCHGCT ZZZCHGCT [514] ; 
    10 * char(1) ; 
end // end PK01W01

//*** RECORD=PK01W02 ****
// ;********************** pk0lw02 ****************************
// ;
// ;         work record for pk01: pack and hold selection
// ;
// ;***********************************************************
// ***********************
Record PK01W02 type basicRecord
  10 PK01WSAV PK01WSAV ; 
    15 TF1CARCD TF1CARCD [514] ; 
    15 TF1ABRV TF1ABRV [514] ; 
    15 XOTCD XOTCD [514] ; 
    15 PKRMIUNT PKRMIUNT [514] ; 
    15 PK01WMMF PK01WMMF [514] ; 
    15 PK01WDDF PK01WDDF [514] ; 
    15 PK01WYYF PK01WYYF [514] ; 
    15 PK01WMMT PK01WMMT [514] ; 
    15 PK01WDDT PK01WDDT [514] ; 
    15 PK01WYYT PK01WYYT [514] ; 
    15 ZZZCHGCT ZZZCHGCT [514] ; 
end // end PK01W02

//*** RECORD=PKJREC ****
// *************** PICKING SELECTED PACK AND HOLD TABLE *******
// 
// DB2 TABLE VIEW:      DPICK.VSELPH01
// 
// COPYLIB MEMBER:      DCL00268
// 
// I/O MODULE:          IO1750
// 
// KEY TO DB2 TABLE:    XWHCD
//                      TF1CARCD
//                      PKURUNMD
// 
// DATE CREATED:        07/10/87
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 07/10/87   tl        New record definition.
// **********************
Record PKJREC type basicRecord
  5 PKJGROUP PKJGROUP ; 
    10 PKJKEY PKJKEY ; 
      15 XWHCD XWHCD ; 
      15 TF1CARCD TF1CARCD ; 
    10 XOTCD XOTCD ; 
    10 PKJDNSBF PKJDNSBF ; 
    10 PKJDNSBT PKJDNSBT ; 
    10 PKRMIUNT PKRMIUNT ; 
    10 PKURUNMD PKURUNMD ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PKJREC

// passed carrier abbreviation
DataItem PK01WACR char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bottom of screen in w.s.array
DataItem PK01WBOT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// passed carrier code
DataItem PK01WCCR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current date -yyyymmdd
DataItem PK01WCTD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PK01WDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-from-dnt-shp-dt day
DataItem PK01WDDF num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pk-to-dnt-shp-dt day
DataItem PK01WDDT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// group date
DataItem PK01WDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// o.t. sel update request-flag
DataItem PK01WED1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// plan/non-plan indicator flag
DataItem PK01WED2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem PK01WFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yymmdd
DataItem PK01WFDA num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PK01WFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date in yyyymmdd
DataItem PK01WFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// enternal table overflow flag
DataItem PK01WFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for warning message
DataItem PK01WFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PK01WFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem PK01WFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level
DataItem PK01WGR1 char(18594)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hours
DataItem PK01WHH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total # of valid o. t. rows
DataItem PK01WMAX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// min.
DataItem PK01WMI char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PK01WMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-from-dnt-shp-dt month
DataItem PK01WMMF num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pk-to-dnt-shp-dt month
DataItem PK01WMMT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// data modified flag
DataItem PK01WMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// subscript - ws.loc of sb2
DataItem PK01WNDX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// subscript - position on map
DataItem PK01WNX2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// subscript - gen.purpose
DataItem PK01WNX3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// data base save area
DataItem PK01WSAV char(18504)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sec.
DataItem PK01WSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hours
DataItem PK01WTHH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// time
DataItem PK01WTI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group time
DataItem PK01WTIM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minutes
DataItem PK01WTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// top of screen in w.s.array
DataItem PK01WTOP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// database updated flag
DataItem PK01WUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PK01WYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-from-dnt-shp-dt year
DataItem PK01WYYF num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pk-to-dnt-shp-dt year
DataItem PK01WYYT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pk-from-dnt-shp-dt
DataItem PKJDNSBF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk-to-dnt-shp-dt
DataItem PKJDNSBT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PKJGROUP char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PKJKEY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

