package pk0i;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PK0I ****
// ;***********************************************************
// 
//       pk0i  -  PICKING HOLD & RELEASE SCREEN.
//                THIS APPLICATION GIVES THE USER THE
//                ABILITY TO PUT ORDERS, CUSTOMERS, CARRIERS
//                ON HOLD, RELEASE THEM FROM BEING ON
//                HOLD AND MODIFY THE RELEASE DATE.
//                WHEN A CUST/ORD/CARRIER IS ON HOLD, THIS
//                MEANS IT WILL NOT GET SHIPPED UNTIL
//                IT IS TAKEN OFF HOLD OR THE RELEASE DATE
//                HAS EXPIRED.
// 
//                THE PROGRAM SUPPORTS SELECTING AN ORDER,
//                JUMPING TO ORDER INQUIRY AND RETURNING
//                WITH THAT ORDER SHOWN AS BEING VIEWED.
//                (shown with a 'v' in the action field)
// 
//                SELECTION FOR CUSTOMER INQUIRY WORKS
//                THE SAME WAY.
// 
// ;***********************************************************
// 
//       MAINTENANCE LOG:
//       ----------------
//      NAME    DATE       DESCRIPTION
//      ----    --------   ------------------------------------
//      PRM     07/22/87   created
//      JBW     11/29/88   ADDED NONCSP OPT TO CALLS
//      JBW     11/29/88   ADDED XSSEGTR LOGIC
//      MKM     02/08/89   ADDED CARRIER HOLD LOGIC
//      MLW     05/16/89   CHANGES TO PLAN RELEASE DATE
//                         IN pk0i400 & pk0i410
//      jbc     07/18/89   change pf3 to go to pk09, new
//                         hold release menu, also make
//                         rls dates all '9's
//                         also add pwirec for io1720
//      jbc     11/08/89   default nike ord id to 1 if not
//                         entered.
//      KHEINA  01/03/91   Update customer hold flag on pool
//                         header. Modified pk0i400 and 410.
//                         Added pk0i430.
//      SBEAUC  03/05/91   Change PKA-items to XHR-items and
//                         use corporate table for hold reason
//                         codes for table changes.
//      BGOFF   03/07/91   Change map to call pop-up window
//                         for xhr-items.
//      smacmi  08/17/92   Added xp0fs01 and record xp0fw01 to
//                         convert customer nbrs to Cole-Haan
//                         format. Added brand code to screen.
//      PANDER  10/01/93   Remove unconditional move of
//                         COMMAREA.CAUSERA in flow of XPPK001.
//      CBRINE  08/11/95   CANADA add XCTCD to PKWREC
//      dBETTR  02/16/98   Y2KFIX
//                         CHANGES TO PROCEDURES
//                         PK0I251, PK0I254,PK0I255, PK0I257
//                         PK0I410, PK0I420,PK0I430, PK0I500
//                         PK0I510, PK0I520. PK0I530.
//                         FIND CHANGES: SEARCH ON PHRASE 'Y2K'
//                         changed all release date fields on
//                         map to zero fill and display zeros.
//      SRADH1  02/14/00  Corrected Y2K bug PK0I255 & PK0I257.
//                       changes similar to PK0I251 & PK0I254.
// ;***********************************************************
// *********************
Program PK0I type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK0IW01 PK0IW01; // record
  PK4REC PK4REC; // record
  PK6REC PK6REC; // record
  PK9REC PK9REC; // record
  PKBREC PKBREC; // record
  PKWREC PKWREC; // record
  PKXREC PKXREC; // record
  PKYREC PKYREC; // record
  PKZREC PKZREC; // record
  PWFREC PWFREC; // record
  PWGREC PWGREC; // record
  PWIREC PWIREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA9REC TA9REC; // record
  TAEREC TAEREC; // record
  TF1REC TF1REC; // record
  XP0FW01 XP0FW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XBCTBL; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use XHRTBL; // table
  use PK0IM.PK0IM010,  // forms
      PK0IM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();




     /* ---- clear records and*/
     /* ---- set up map header information*/
    set PK0IM010 initial; /* initially clear the map*/
    set PK0IW01 empty; /* initially clear working storage*/
    PK0IW01.PK0IWFL8 = "Y"; /* first time thru flag*/
    PK0IW01.PK0IWINT = "Y"; /* init flag*/
    PK0IM010.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
    PK0IM010.XXXRVNBR = "02"; /* revision number*/
    PK0IW01.PK0IWBAS = 1; /* beginning piont of reason code array*/
    PK0IW01.PK0IWEND = 10; /* ending piont of reason code array*/


    goto PK0I005;


    PK0I005: PK0I005();
    goto PK0I005;
  end // end main
end // end PK0I

// pick hold - main process
Function PK0I005()

   /* ---------------  PICKING HOLD TABLE MAINTENANCE         ----*/
   /* ---------------          main process  pk0i005          ----*/



  if (PK0IW01.PK0IWINT == "Y")
    PK0I100(); /* initialization*/
  end



  PK0I200(); /* converse map until done*/

  PK0I300(); /* ;main process*/



   /* -------------  end process pk0i005  --------------------*/
end // end PK0I005

// initialization routine
Function PK0I100()

  PK0IW01.PK0IWINT = "N";
   /* ---------------  pk0i100 initialization  -------------------*/







        /* if returning from customer inquiry*/
            /* next sentence*/
        /* else*/
            /* if transfer was from inside picking*/
            /* and warehouse changed from commarea.xwhcd*/
            /* and security allows warehouse change*/
                /* get whse abreviation using pkwrec.xwhcd*/
            /* else*/
                /* get whse abreviation using commarea.xwhcd*/
  if (PKWREC.PKWINDEX > 0
   && PKWREC.PKWFRMAP[1] == COMMAREA.CACURRAP)
     /* next sentence*/
  else
    PK0IW01.PK0IWFRM = COMMAREA.CAFROMAP;
    if (PK0IW01.PK0IWFRM != "PK0"
     && PK0IW01.PK0IWFRM != "PW0")
      set PKWREC empty; /* initially clear the shared work rec*/
      PKWREC.XWHCD = COMMAREA.XWHCD;
      PK0IM010.XWHCD = COMMAREA.XWHCD;
      PK0I110(); /* get warehouse abbreviation*/
    else
      if (PKWREC.XWHCD != COMMAREA.XWHCD)
        /* and commarea.calvl(1) eq 'y'*/
        PK0IM010.XWHCD = PKWREC.XWHCD;
        PK0I110(); /* get warehouse abbreviation*/
      else
        PKWREC.XWHCD = COMMAREA.XWHCD;
        PK0IM010.XWHCD = COMMAREA.XWHCD;
        PK0I110(); /* get warehouse abbreviation*/
      end
    end
  end



  PK0I120();

   /* if warehouse lookup was not successful, exit*/
  if (PK0IW01.PK0IWFL3 == "N")
    return;
  end






   /* ----- if returning from inquiry*/
   /* ----- or from main menu with customer key*/
   /* -----     redisplay the row that was viewed*/
  if (PKWREC.PKWINDEX > 0)
    if (PKWREC.PKWFRMAP[1] == COMMAREA.CACURRAP
     || PKWREC.PKWFRMAP[1] == "PK0A")
      PK0I130();
      if (PK0IM010.PK0IMKUA == "S")
        PK0IM010.PK0IMKUA = " ";
      end
    end
  end



   /* ---- unconditionally clear the key areas*/
  PKWREC.PKWINDEX = 0;
  PKWREC.PKWCNTRL = " ";





   /* -------------  end process pk0i100  --------------------*/
end // end PK0I100

// get warehouse abbreviation
Function PK0I110()

   /* ---------------  pk0i110 get warehouse abbreviation --------*/




  PK0IW01.PK0IWFL3 = "Y"; /* whse lookup successful flag*/
  if (PKWREC.XWHCD in XWHTBL.XWHCD)
    PK0IM010.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end

  if (sysVar.arrayIndex == 0) /* Table entry not found*/
    converseLib.validationFailed(2); /* Indicate invalid warehouse*/
    PK0IM010.XWHABRV = " ";
    PK0IW01.PK0IWFL3 = "N"; /* whse lookup successful flag*/
    set PK0IM010.XWHCD cursor, bold;
    return; /* Return to caller*/
  end

  if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not active warehouse status*/
    converseLib.validationFailed(3); /* Indicate inactive warehouse*/
    PK0IM010.XWHABRV = " ";
    PK0IW01.PK0IWFL3 = "N"; /* whse lookup successful flag*/
    set PK0IM010.XWHCD cursor, bold;
    return; /* Return to caller*/
  end





  PKWREC.XWHABRV = PK0IM010.XWHABRV;


   /* -------------  end process pk0i110  --------------------*/
end // end PK0I110

// load valid reason codes
Function PK0I120()

   /* ---------------  pk0q120   ---------------------------------*/
       /* load map and working storage with valid reason codes*/

  PK0IM010.XXXERRID = "PK0I120";



   /* ----- if table overflow has occured (pk0qwfl4 = 'y')*/
   /* ----- from a previous execution of this module*/
   /* -----     set ezemno and get out.*/
  if (PK0IW01.PK0IWFL4 == "Y")
    converseLib.validationFailed(24);
    return;
  end

       /* load map until end of reason code table*/
  PK0IW01.PK0IWNDX = 1;
  PK0IW01.PK0IWNX2 = 1;
  PK0IW01.PK0IWNX3 = 1;
  PK0IW01.PK0IWFL1 = "Y";
  while (PK0IW01.PK0IWFL1 == "Y")
    PK0I125();
  end


   /* -------------  end process pk0i120  --------------------*/
end // end PK0I120

// select next reason code
Function PK0I125()
   /* ---------------  pk0i125   ---------------------------------*/
       /* select next reason code*/
       /* load working storage*/

  PK0IM010.XXXERRID = "PK0I125";


   /* ---------------  load valid reason codes          ----------*/

  if (PK0IW01.PK0IWNDX < 191)
    if (XHRTBL.XHRCD[PK0IWNDX] != "99") /* end of table*/
      PK0IW01.XHRCD[PK0IWNDX] = XHRTBL.XHRCD[PK0IWNDX];
      PK0IW01.XHRDESC[PK0IWNDX] = XHRTBL.XHRDESC[PK0IWNDX];
      PK0IW01.XHRABRV[PK0IWNDX] = XHRTBL.XHRABRV[PK0IWNDX];
    else
      PK0IW01.PK0IWFL1 = "N"; /* no more entries*/
      PK0IW01.PK0IWTRR = PK0IW01.PK0IWNDX; /* total recs in table*/
      PK0IW01.PK0IWTRR = PK0IW01.PK0IWTRR - 1; /* dont include '99' entry*/
    end
  else
    PK0IW01.PK0IWFL1 = "N";
    PK0IW01.PK0IWFL4 = "Y"; /* table overflow flag*/
    converseLib.validationFailed(24); /* table overflow*/
    return;
  end




  PK0IW01.PK0IWNDX = PK0IW01.PK0IWNDX + 1; /* increment index*/



   /* -------------  end process pk0i125  --------------------*/
end // end PK0I125

// returned from inquiry
Function PK0I130()
   /* ---------------  pk0i130   ---------------------------------*/
   /* ----- returned from inquiry*/


  PK0IM010.XXXERRID = "PK0I130";




   /* ----- if returning from customer inquiry*/
   /* ----- or from main menu with customer key*/
   /* -----     get customer hold row(s) and*/
   /* -----     get customer description*/
  if (PKWREC.PKWSLTYP[1] == "C"
   || PKWREC.PKWSLTYP[1] == "M")
    PK0IW01.PK0IWFL7 = "C"; /* processing customers/orders fl*/
    PKXREC.PKWARRAY = PKWREC.PKWARRAY[1];
    set PKWREC empty;
    set PK9REC empty;
    PK0IM010.XWHCD = PKXREC.XWHCD;
    PKWREC.XWHCD = PKXREC.XWHCD;
    PK0IM010.XWHABRV = PKXREC.XWHABRV;
    PKWREC.XWHABRV = PKXREC.XWHABRV;
    PK0IM010.PK0IMKUA = PKXREC.PKXKUACT[1];
    PK0IM010.KUCCOID = PKXREC.KUCCOID[1];
    PK0IM010.KUMSTRID = PKXREC.KUMSTRID[1];
    PK0IM010.XNXCD = PKXREC.XNXCD[1];
                                    /* protect order fields*/
    set PK0IM010.PK0IMORA protect;
    set PK0IM010.PK1CUOID protect;
    set PK0IM010.PK1NORID protect;
    set PK0IM010.PK0IMORR protect;
    set PK0IM010.PK0IMOMM protect;
    set PK0IM010.PK0IMODD protect;
    set PK0IM010.PK0IMOYY protect;
                                    /* protect carrier fields*/
    set PK0IM010.PK0IMCAA protect;
    set PK0IM010.TF1CARCD protect;
    set PK0IM010.PK0IMCAR protect;
    set PK0IM010.PK0IMCMM protect;
    set PK0IM010.PK0IMCDD protect;
    set PK0IM010.PK0IMCYY protect;
    PK0I135(); /* get customer name*/
    if (SQLCA.VAGen_SQLCODE != 0)
      return;
    end

    PK9REC.XWHCD = PKXREC.XWHCD;
    PK9REC.KUCCOID = PKXREC.KUCCOID[1];
    PK9REC.KUMSTRID = PKXREC.KUMSTRID[1];
    PK9REC.XNXCD = PKXREC.XNXCD[1];
    PK9REC.XHRCD = "*";
    PKZREC.PKZFUNC = "S ";
    call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
                                   /* sel unique on customer*/
                                   /* hold table using wildcard '*'*/
                                   /* for reason code*/
    if (SQLCA.VAGen_SQLCODE == 0) /* 1 row was found*/
      PK0IW01.PK0IWFDT = PK9REC.PK9RELDT;
      PK0IM010.PK0IMKYY = PK0IW01.PK0IWFYY;
      PK0IM010.PK0IMKMM = PK0IW01.PK0IWFMM;
      PK0IM010.PK0IMKDD = PK0IW01.PK0IWFDD;
      PK0IM010.PK0IMKUR = PK9REC.XHRCD;
      PK0IW01.PK0IWRSN = PK9REC.XHRCD;
      PK0IW01.PK0IWNDX = 1;
      PK0IW01.PK0IWFL6 = "N";
      while (PK0IW01.PK0IWNDX <= PK0IW01.PK0IWTRR
       && PK0IW01.PK0IWFL6 == "N")
        PK0I252();
      end
      if (PK0IW01.PK0IWFL6 == "Y")
        PK0IM010.PK0IMKUD = PK0IW01.XHRABRV[PK0IWNDX];
      else
        PK0IM010.PK0IMKUD = "UNKNWN";
      end
    else
      if (SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
        set PK9REC empty;
        set PK0IM010.PK0IMKUR protect;
        set PK0IM010.PK0IMKUA protect;
        set PK0IM010.PK0IMKMM protect;
        set PK0IM010.PK0IMKDD protect;
        set PK0IM010.PK0IMKYY protect;
        PK9REC.XWHCD = PKXREC.XWHCD;
        PK9REC.KUCCOID = PKXREC.KUCCOID[1];
        PK9REC.KUMSTRID = PKXREC.KUMSTRID[1];
        PK9REC.XNXCD = PKXREC.XNXCD[1];
        call "IO1790" ("S1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
        PK0IW01.PK0IWNX3 = 1;
        while (PK0IW01.PK0IWNX3 <= 10)
          PK0I137(); /* load customer hold line items*/
        end
        set PK0IM010.PK0IMACT[1] cursor;
        PKZREC.PKZFUNC = "C1";
        call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes}; /* close set*/
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(28); /* contention for data base resorce*/
          return;
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* no records found,*/
            converseLib.validationFailed(71);
            return; /* no need to load the map/ws*/
          else
            converseLib.validationFailed(29); /* fatal error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0I130 "; /* Process name*/
            TA1REC.TA1LOC = "SELECT SET               ";
            TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
            TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

            return;
          end
        end
      end
    end
  end





   /* ----- if returning from order inquiry*/
   /* -----     get order hold row(s)*/
  if (PKWREC.PKWSLTYP[1] == "O")
    PK0IW01.PK0IWFL7 = "O"; /* processing customers/orders fl*/
    PKYREC.PKWARRAY = PKWREC.PKWARRAY[1];
    set PKWREC empty;
    set PKBREC empty;
    PK0IM010.XWHCD = PKYREC.XWHCD;
    PKWREC.XWHCD = PKYREC.XWHCD;
    PK0IM010.XWHABRV = PKYREC.XWHABRV;
    PKWREC.XWHABRV = PKYREC.XWHABRV;
    PK0IM010.PK0IMORA = PKYREC.PKYORACT[1];
    PK0IM010.PK1CUOID = PKYREC.PK1CUOID[1];
    PK0IM010.PK1NORID = PKYREC.PK1NORID[1];
                                   /* protect customer fields*/
    set PK0IM010.PK0IMKUA protect;
    set PK0IM010.KUCCOID protect;
    set PK0IM010.KUMSTRID protect;
    set PK0IM010.XNXCD protect;
    set PK0IM010.PK0IMKUR protect;
    set PK0IM010.PK0IMKMM protect;
    set PK0IM010.PK0IMKDD protect;
    set PK0IM010.PK0IMKYY protect;
                                   /* protect carrier fields*/
    set PK0IM010.PK0IMCAA protect;
    set PK0IM010.TF1CARCD protect;
    set PK0IM010.PK0IMCAR protect;
    set PK0IM010.PK0IMCMM protect;
    set PK0IM010.PK0IMCDD protect;
    set PK0IM010.PK0IMCYY protect;

    PKBREC.XWHCD = PKYREC.XWHCD;
    PKBREC.PK1CUOID = PKYREC.PK1CUOID[1];
    PKBREC.PK1NORID = PKYREC.PK1NORID[1];
    PKBREC.XHRCD = "*";
    PKZREC.PKZFUNC = "S ";
    call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
                                   /* select unique on order*/
                                   /* hold table using wildcard '*'*/
                                   /* for reason code*/
    if (SQLCA.VAGen_SQLCODE == 0) /* 1 row was found*/
      PK0IW01.PK0IWFDT = PKBREC.PKBRELDT;
      PK0IM010.PK0IMOYY = PK0IW01.PK0IWFYY;
      PK0IM010.PK0IMOMM = PK0IW01.PK0IWFMM;
      PK0IM010.PK0IMODD = PK0IW01.PK0IWFDD;
      PK0IM010.PK0IMORR = PKBREC.XHRCD;
      PK0IW01.PK0IWRSN = PKBREC.XHRCD;
      PK0IW01.PK0IWNDX = 1;
      PK0IW01.PK0IWFL6 = "N";
      while (PK0IW01.PK0IWNDX <= PK0IW01.PK0IWTRR
       && PK0IW01.PK0IWFL6 == "N")
        PK0I252();
      end
      if (PK0IW01.PK0IWFL6 == "Y")
        PK0IM010.PK0IMORD = PK0IW01.XHRABRV[PK0IWNDX];
      else
        PK0IM010.PK0IMORD = "UNKNWN";
      end
      set PK0IM010.PK0IMORA cursor;
    else
      if (SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
        set PKBREC empty;
        set PK0IM010.PK0IMORR protect;
        set PK0IM010.PK0IMORA protect;
        set PK0IM010.PK0IMOMM protect;
        set PK0IM010.PK0IMODD protect;
        set PK0IM010.PK0IMOYY protect;
        PKBREC.XWHCD = PKYREC.XWHCD;
        PKBREC.PK1CUOID = PKYREC.PK1CUOID[1];
        PKBREC.PK1NORID = PKYREC.PK1NORID[1];
        call "IO1770" ("S1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
        PK0IW01.PK0IWNX3 = 1;
        while (PK0IW01.PK0IWNX3 <= 10)
          PK0I138(); /* load order hold line items*/
        end
        set PK0IM010.PK0IMACT[1] cursor;
        PKZREC.PKZFUNC = "C1";
        call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes}; /* close set*/
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(28); /* contention for data base resorce*/
          return;
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* no records found,*/
            converseLib.validationFailed(72);
            return; /* no need to load the map/ws*/
          else
            converseLib.validationFailed(29); /* fatal error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0I130 "; /* Process name*/
            TA1REC.TA1LOC = "SELECT SET               ";
            TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
            TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

            return;
          end
        end
      end
    end
  end








   /* ----- if returning from carrier inquiry*/
   /* -----     get carrier hold row(s)*/
  if (PKWREC.PKWSLTYP[1] == "R")
    PK0IW01.PK0IWFL7 = "R"; /* processing carrier flag*/
    PWGREC.PKWARRAY = PKWREC.PKWARRAY[1];
    set PKWREC empty;
    set PWFREC empty;
    PK0IM010.XWHCD = PWGREC.XWHCD;
    PKWREC.XWHCD = PWGREC.XWHCD;
    PK0IM010.XWHABRV = PWGREC.XWHABRV;
    PKWREC.XWHABRV = PWGREC.XWHABRV;
    PK0IM010.PK0IMCAA = PWGREC.PWGCAACT[1];
    PK0IM010.TF1CARCD = PWGREC.TF1CARCD[1];
                                    /* protect customer fields*/
    set PK0IM010.PK0IMKUA protect;
    set PK0IM010.KUCCOID protect;
    set PK0IM010.KUMSTRID protect;
    set PK0IM010.XNXCD protect;
    set PK0IM010.PK0IMKUR protect;
    set PK0IM010.PK0IMKMM protect;
    set PK0IM010.PK0IMKDD protect;
    set PK0IM010.PK0IMKYY protect;
                                    /* protect order fields*/
                                    /* protect order fields*/
    set PK0IM010.PK0IMORA protect;
    set PK0IM010.PK1CUOID protect;
    set PK0IM010.PK1NORID protect;
    set PK0IM010.PK0IMORR protect;
    set PK0IM010.PK0IMOMM protect;
    set PK0IM010.PK0IMODD protect;
    set PK0IM010.PK0IMOYY protect;
    PK0I134(); /* get carrier abrv*/
    if (SQLCA.VAGen_SQLCODE != 0)
      return;
    end

    PWFREC.XWHCD = PWGREC.XWHCD;
    PWFREC.TF1CARCD = PWGREC.TF1CARCD[1];
    PWFREC.XHRCD = "*";
    PKZREC.PKZFUNC = "S ";
    call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes}; /* select unique carrier*/
                                   /* hold table using wildcard '*'*/
                                   /* for reason code*/
    if (SQLCA.VAGen_SQLCODE == 0) /* 1 row was found*/
      PK0IW01.PK0IWFDT = PWFREC.PKBRELDT;
      PK0IM010.PK0IMCYY = PK0IW01.PK0IWFYY;
      PK0IM010.PK0IMCMM = PK0IW01.PK0IWFMM;
      PK0IM010.PK0IMCDD = PK0IW01.PK0IWFDD;
      PK0IM010.PK0IMCAR = PWFREC.XHRCD;
      PK0IW01.PK0IWRSN = PWFREC.XHRCD;
      PK0IW01.PK0IWNDX = 1;
      PK0IW01.PK0IWFL6 = "N";
      while (PK0IW01.PK0IWNDX <= PK0IW01.PK0IWTRR
       && PK0IW01.PK0IWFL6 == "N")
        PK0I252();
      end
      if (PK0IW01.PK0IWFL6 == "Y")
        PK0IM010.PK0IMCAD = PK0IW01.XHRABRV[PK0IWNDX];
      else
        PK0IM010.PK0IMCAD = "UNKNWN";
      end
      set PK0IM010.PK0IMCAA cursor;
    else
      if (SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
        set PWFREC empty;
        set PK0IM010.PK0IMCAR protect;
        set PK0IM010.PK0IMCAA protect;
        set PK0IM010.PK0IMCMM protect;
        set PK0IM010.PK0IMCDD protect;
        set PK0IM010.PK0IMCYY protect;
        PWFREC.XWHCD = PWGREC.XWHCD;
        PWFREC.TF1CARCD = PWGREC.TF1CARCD[1];
        call "IO3190" ("S1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
        PK0IW01.PK0IWNX3 = 1;
        while (PK0IW01.PK0IWNX3 <= 10)
          PK0I139(); /* load carrier hold line items*/
        end
        set PK0IM010.PK0IMACT[1] cursor;
        PKZREC.PKZFUNC = "C1";
        call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes}; /* close set*/
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(28); /* contention for data base resorce*/
          return;
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* no records found,*/
            converseLib.validationFailed(277);
            return; /* no need to load the map/ws*/
          else
            converseLib.validationFailed(29); /* fatal error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0I130 "; /* Process name*/
            TA1REC.TA1LOC = "SELECT SET               ";
            TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
            TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

            return;
          end
        end
      end
    end
  end








   /* -------------  end process pk0i130  --------------------*/
end // end PK0I130

// get carrier abbreviation
Function PK0I134()
   /* ---------------  pk0i134   ---------------------------------*/
   /* ----- get carrier abbreviation*/


  PK0IM010.XXXERRID = "PK0I134";

  set TF1REC empty;
  TF1REC.TF1CARCD = PK0IM010.TF1CARCD;


  call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes}; /* select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == -811)
    PK0IM010.TF1ABRV = TF1REC.TF1ABRV;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      PK0IW01.PK0IWFLE = "Y"; /* carrier had errors flag*/
      converseLib.validationFailed(28); /* in use*/
      return;

    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(77); /* not found*/
        set PK0IM010.TF1CARCD cursor, bold;
        PK0IW01.PK0IWFLE = "Y"; /* carrier had errors flag*/
        return;

      else
        converseLib.validationFailed(29); /* fatal error*/
        PK0IW01.PK0IWFLE = "Y"; /* carrier had errors flag*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I134 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT UNIQUE            ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCARR001"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        return;
      end
    end
  end








   /* -------------  end process pk0i134  --------------------*/
end // end PK0I134

// get customer name
Function PK0I135()
   /* ---------------  pk0i135   ---------------------------------*/
   /* ----- get customer name*/


  PK0IM010.XXXERRID = "PK0I135";

  set PK6REC empty;

  if (PK0IM010.XBCCD == "08") /* if Cole-Haan*/
    if (PK0IM010.KUCCOID > 99999 /**/
     && PK0IM010.KUCCOID < 8000000)
      converseLib.validationFailed(427); /* invalid cole-haan customer*/
      set PK0IM010.KUCCOID cursor, bold;
      set PK0IM010.KUMSTRID bold;
      PK0IW01.PK0IWFL9 = "Y"; /* customer had errors flag*/
      return;
    else
      if (PK0IM010.KUCCOID > 8999999) /**/
        converseLib.validationFailed(427); /* invalid cole-haan customer*/
        set PK0IM010.KUCCOID cursor, bold;
        set PK0IM010.KUMSTRID bold;
        PK0IW01.PK0IWFL9 = "Y"; /* customer had errors flag*/
        return;
      else
        XP0FW01.KUCCOID = PK0IM010.KUCCOID;
        XP0FW01.XBCCD = PK0IM010.XBCCD;
        XP0FS01(); /* look for Cole-Haan cust*/
        PK0IM010.KUCCOID = XP0FW01.XP0FW01-INTERNAL;
                                   /* move it to map field*/
      end
    end
  else
    if (PK0IM010.KUCCOID > 7999999 /* if Cole-Haan*/
     && PK0IM010.KUCCOID < 9000000)
      XP0FW01.KUCCOID = PK0IM010.KUCCOID;
      XP0FW01.XBCCD = PK0IM010.XBCCD;
      XP0FS01(); /* look for Cole-Haan cust*/
      PK0IM010.KUCCOID = XP0FW01.XP0FW01-INTERNAL;
                                   /* move it to map field*/
    end
  end

  PK6REC.KUCCOID = PK0IM010.KUCCOID;
  PK6REC.KUMSTRID = PK0IM010.KUMSTRID;


  call "IO1830" ("S ", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes}; /* select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == -811)
    PK0IM010.KUMSTRNM = PK6REC.KUMSTRNM;
    PK0IM010.XBCCD = PK6REC.XBCCD;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      PK0IW01.PK0IWFL9 = "Y"; /* customer had errors flag*/
      converseLib.validationFailed(28); /* in use*/
      return;

    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(34); /* not found*/
        set PK0IM010.KUCCOID cursor, bold;
        set PK0IM010.KUMSTRID bold;
        PK0IW01.PK0IWFL9 = "Y"; /* customer had errors flag*/
        if (PK0IM010.XBCCD == "08") /* if Cole-Haan*/
          PK0IM010.KUCCOID = XP0FW01-EXTERNAL; /* use cust entered*/
        end
        return;

      else
        converseLib.validationFailed(29); /* fatal error*/
        PK0IW01.PK0IWFL9 = "Y"; /* customer had errors flag*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I135 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT UNIQUE            ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VPKCUS01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        return;
      end
    end
  end








   /* -------------  end process pk0i135  --------------------*/
end // end PK0I135

// load customer hold rows
Function PK0I137()
   /* -----  pk0i137   ---------------------------------*/
   /* -----  load customer hold line items*/


  PK0IM010.XXXERRID = "PK0I137";




  PKZREC.PKZFUNC = "N1";
  call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes}; /* select next customer*/
                                         /* hold record*/


  if (SQLCA.VAGen_SQLCODE == 0)
    PK0IW01.PK0IWFDT = PK9REC.PK9RELDT;
    PK0IM010.PK0IMYY[PK0IWNX3] = PK0IW01.PK0IWFYY;
    PK0IM010.PK0IMMM[PK0IWNX3] = PK0IW01.PK0IWFMM;
    PK0IM010.PK0IMDD[PK0IWNX3] = PK0IW01.PK0IWFDD;
    PK0IW01.PK0IWFDT = PK9REC.PK9PLRDT;
    PK0IM010.PK0IMPYY[PK0IWNX3] = PK0IW01.PK0IWFYY;
    PK0IM010.PK0IMPMM[PK0IWNX3] = PK0IW01.PK0IWFMM;
    PK0IM010.PK0IMPDD[PK0IWNX3] = PK0IW01.PK0IWFDD;
    PK0IM010.PK0IMRES[PK0IWNX3] = PK9REC.XHRCD;
    set PK0IM010.PK0IMRES[PK0IWNX3] protect;
    PK0IW01.PK0IWRSN = PK9REC.XHRCD;
    PK0IW01.PK0IWNDX = 1;
    PK0IW01.PK0IWFL6 = "N";
    while (PK0IW01.PK0IWNDX <= PK0IW01.PK0IWTRR
     && PK0IW01.PK0IWFL6 == "N")
      PK0I252(); /* to get reason code abbreviation*/
    end
    if (PK0IW01.PK0IWFL6 == "N")
      PK0IM010.XHRABRV[PK0IWNX3] = "UNKNWN";
    else
      PK0IM010.XHRABRV[PK0IWNX3] = PK0IW01.XHRABRV[PK0IWNDX];
    end

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* end of set*/
      PK0IW01.PK0IWNX3 = 11; /* set index above maximum*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(21); /* contention for data base resorce*/
        PK0IW01.PK0IWNX3 = 11;
        return;
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I137 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT NEXT              ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        PK0IW01.PK0IWNX3 = 11;
        return;
      end
    end
  end







  PK0IW01.PK0IWNX3 = PK0IW01.PK0IWNX3 + 1; /* increment index*/



   /* -------------  end process pk0i137  --------------------*/
end // end PK0I137

// load order hold rows
Function PK0I138()
   /* -----  pk0i138   ---------------------------------*/
   /* -----  load order hold line items*/


  PK0IM010.XXXERRID = "PK0I138";



  PKZREC.PKZFUNC = "N1";
  call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes}; /* select next customer*/
                                         /* hold record*/


  if (SQLCA.VAGen_SQLCODE == 0)
    PK0IW01.PK0IWFDT = PKBREC.PKBRELDT;
    PK0IM010.PK0IMYY[PK0IWNX3] = PK0IW01.PK0IWFYY;
    PK0IM010.PK0IMMM[PK0IWNX3] = PK0IW01.PK0IWFMM;
    PK0IM010.PK0IMDD[PK0IWNX3] = PK0IW01.PK0IWFDD;
    PK0IW01.PK0IWFDT = PKBREC.PKBPLRDT;
    PK0IM010.PK0IMPYY[PK0IWNX3] = PK0IW01.PK0IWFYY;
    PK0IM010.PK0IMPMM[PK0IWNX3] = PK0IW01.PK0IWFMM;
    PK0IM010.PK0IMPDD[PK0IWNX3] = PK0IW01.PK0IWFDD;
    PK0IM010.PK0IMRES[PK0IWNX3] = PKBREC.XHRCD;
    set PK0IM010.PK0IMRES[PK0IWNX3] protect;
    PK0IW01.PK0IWRSN = PKBREC.XHRCD;
    PK0IW01.PK0IWNDX = 1;
    PK0IW01.PK0IWFL6 = "N";
    while (PK0IW01.PK0IWNDX <= PK0IW01.PK0IWTRR
     && PK0IW01.PK0IWFL6 == "N")
      PK0I252(); /* to get reason code abbreviation*/
    end
    if (PK0IW01.PK0IWFL6 == "N")
      PK0IM010.XHRABRV[PK0IWNX3] = "UNKNWN";
    else
      PK0IM010.XHRABRV[PK0IWNX3] = PK0IW01.XHRABRV[PK0IWNDX];
    end

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* end of set*/
      PK0IW01.PK0IWNX3 = 11; /* set index above maximum*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(21); /* contention for data base resorce*/
        PK0IW01.PK0IWNX3 = 11;
        return;
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I138 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT NEXT              ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        PK0IW01.PK0IWNX3 = 11;
        return;
      end
    end
  end








  PK0IW01.PK0IWNX3 = PK0IW01.PK0IWNX3 + 1; /* increment index*/



   /* -------------  end process pk0i138  --------------------*/
end // end PK0I138

// load carrier hold rows
Function PK0I139()
   /* -----  pk0i139   ---------------------------------*/
   /* -----  load carrier hold line items*/


  PK0IM010.XXXERRID = "PK0I139";



  PKZREC.PKZFUNC = "N1";
  call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes}; /* select next carrier*/
                                         /* hold record*/


  if (SQLCA.VAGen_SQLCODE == 0)
    PK0IW01.PK0IWFDT = PWFREC.PKBRELDT;
    PK0IM010.PK0IMYY[PK0IWNX3] = PK0IW01.PK0IWFYY;
    PK0IM010.PK0IMMM[PK0IWNX3] = PK0IW01.PK0IWFMM;
    PK0IM010.PK0IMDD[PK0IWNX3] = PK0IW01.PK0IWFDD;
    PK0IW01.PK0IWFDT = PWFREC.PKBPLRDT;
    PK0IM010.PK0IMPYY[PK0IWNX3] = PK0IW01.PK0IWFYY;
    PK0IM010.PK0IMPMM[PK0IWNX3] = PK0IW01.PK0IWFMM;
    PK0IM010.PK0IMPDD[PK0IWNX3] = PK0IW01.PK0IWFDD;
    PK0IM010.PK0IMRES[PK0IWNX3] = PWFREC.XHRCD;
    set PK0IM010.PK0IMRES[PK0IWNX3] protect;
    PK0IW01.PK0IWRSN = PWFREC.XHRCD;
    PK0IW01.PK0IWNDX = 1;
    PK0IW01.PK0IWFL6 = "N";
    while (PK0IW01.PK0IWNDX <= PK0IW01.PK0IWTRR
     && PK0IW01.PK0IWFL6 == "N")
      PK0I252(); /* to get reason code abbreviation*/
    end
    if (PK0IW01.PK0IWFL6 == "N")
      PK0IM010.XHRABRV[PK0IWNX3] = "UNKNWN";
    else
      PK0IM010.XHRABRV[PK0IWNX3] = PK0IW01.XHRABRV[PK0IWNDX];
    end

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* end of set*/
      PK0IW01.PK0IWNX3 = 11; /* set index above maximum*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(28); /* contention for data base resorce*/
        PK0IW01.PK0IWNX3 = 11;
        return;
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I139 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT NEXT              ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        PK0IW01.PK0IWNX3 = 11;
        return;
      end
    end
  end








  PK0IW01.PK0IWNX3 = PK0IW01.PK0IWNX3 + 1; /* increment index*/



   /* -------------  end process pk0i139  --------------------*/
end // end PK0I139

// main process
Function PK0I200()
  converse PK0IM010 ;
end // end PK0I200

// check pf keys
Function PK0I210()
   /* ---------------  pk0i210    --------------------------------*/
   /* ---------------  check pf keys                        ------*/


  PK0IM010.XXXERRID = "PK0I210"; /* Process name*/


   /* -----  check for valid pf keys                        ------*/
  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf19
   || converseVar.eventKey is pf20
   || converseVar.eventKey is enter)
    /* next sentence*/
  else
    converseLib.validationFailed(12); /* invalid pf key*/
    return; /* Exit to redisplay map*/
  end






  if (converseVar.eventKey is pf1)
    XSPF1(); /* go to help application*/
    PK0IM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  end






       /* re-load the customer forced location table*/
       /* into the map and working storage*/
  if (converseVar.eventKey is pa2) /* cancel*/
    PK0I215();
    return;
  end





  if (converseVar.eventKey is pf3)
    set PKWREC empty;
    PKWREC.XWHCD = PK0IM010.XWHCD;
    PKWREC.XWHABRV = PK0IM010.XWHABRV;
    COMMAREA.CAFROMAP = "PK0I";
    COMMAREA.CATOAP = "PK09";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to pick master menu*/
    PK0IM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  end




     /* moves common to all transferrs*/

  PKWREC.XWHCD = PK0IM010.XWHCD;
  COMMAREA.CAFROMAP = "PK0I";



  if (converseVar.eventKey is pf4)
    set PKWREC empty;
    PKWREC.XWHCD = PK0IM010.XWHCD;
    PKWREC.XWHABRV = PK0IM010.XWHABRV;
    COMMAREA.CAFROMAP = "PK0I";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSPF4(); /* go to master menu*/
    PK0IM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end




  if (converseVar.eventKey is pf12)
    PK0IW01.PK0IWFL2 = "Y"; /* edit only flag*/
  else
    PK0IW01.PK0IWFL2 = "N"; /* edit only flag*/
  end


  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "PK0B";
    PKWREC.PKWFRMAP = "PK0I";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to picking order inquiry*/
    PK0IM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end


  if (converseVar.eventKey is pf14)
    COMMAREA.CATOAP = "PK0C";
    PKWREC.PKWFRMAP = "PK0I";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to picking line item inquiry*/
    PK0IM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end


  if (converseVar.eventKey is pf15)
    COMMAREA.CATOAP = "PK0D";
    PKWREC.PKWFRMAP = "PK0I";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to picking customer inquiry*/
    PK0IM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end


  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "PK0Z";
    PKWREC.PKWFRMAP = "PK0I";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* sales program/product inquiry*/
    PK0IM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end


  if (converseVar.eventKey is pf19)
    COMMAREA.CATOAP = "PK0S";
    PKWREC.PKWFRMAP = "PK0I";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* planning menu*/
    PK0IM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end


  if (converseVar.eventKey is pf20)
    COMMAREA.CATOAP = "PK07";
    PKWREC.PKWFRMAP = "PK0I";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to selection menu*/
    PK0IM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end



   /* ------------------- end pk0i210 -------------------------*/
end // end PK0I210

// clear screen
Function PK0I215()
   /* ----- pk0i215*/
   /* ----- clear screen*/




  PK0IW01.PK0IWSER = PK0IM010.XXXERRID;
  PK0IW01.PK0IWSAB = PK0IM010.XWHABRV;

  PK0IW01.PK0IWFL7 = " "; /* processing customer / order flag*/

  set PK0IM010 initial;

  PK0IM010.XWHCD = PKWREC.XWHCD;
  PK0IM010.XXXERRID = PK0IW01.PK0IWSER;
  PK0IM010.XWHABRV = PK0IW01.PK0IWSAB;
  PK0IM010.XXXCURDT = VGVar.currentShortGregorianDate;
  PK0IM010.XXXRVNBR = 02;

  set PK0IM010.PK0IMKUA cursor, normal;

  PK0IW01.PK0IWNDX = 1;
  PK0IW01.PK0IWNX2 = 1;
  PK0IW01.PK0IWFL6 = "N";



   /* ----- end pk0i215*/
end // end PK0I215

// clear screen line items
Function PK0I217()
   /* ----- pk0i217*/
   /* ----- clear screen line items*/



  PK0IM010.PK0IMACT[PK0IWNX3] = " ";
  PK0IM010.PK0IMRES[PK0IWNX3] = " ";
   /* MOVE ' ' TO PK0IM010.xhrcd(PK0IWNX3);*/
  PK0IM010.XHRABRV[PK0IWNX3] = " ";
  PK0IM010.PK0IMMM[PK0IWNX3] = 0;
  PK0IM010.PK0IMDD[PK0IWNX3] = 0;
  PK0IM010.PK0IMYY[PK0IWNX3] = 0;
  PK0IM010.PK0IMPMM[PK0IWNX3] = 0;
  PK0IM010.PK0IMPDD[PK0IWNX3] = 0;
  PK0IM010.PK0IMPYY[PK0IWNX3] = 0;



  set PK0IM010.PK0IMACT[PK0IWNX3] normal;
  set PK0IM010.PK0IMRES[PK0IWNX3] normal;
  set PK0IM010.PK0IMMM[PK0IWNX3] normal;
  set PK0IM010.PK0IMDD[PK0IWNX3] normal;
  set PK0IM010.PK0IMYY[PK0IWNX3] normal;


  PK0IW01.PK0IWNX3 = PK0IW01.PK0IWNX3 - 1; /* decrement index*/




   /* ----- end pk0i217*/
end // end PK0I217

// pop-up window routine
Function PK0I220()
   /* ------------------------------------------------------------*/
   /* if requested display list of hold reason codes.*/
   /* ------------------------------------------------------------*/

  if ("?" in PK0IM010.PK0IMRES
   || PK0IM010.PK0IMKUR == "?"
   || PK0IM010.PK0IMORR == "?"
   || PK0IM010.PK0IMCAR == "?")

    PK0I221();

    /* ------------------------------------------------------------*/
     /* Indicate that the requested lists have been displayed and*/
     /* that ENTER must be pressed to process any changes.*/
    /* ------------------------------------------------------------*/

    PK0IM010.XXXERRID = "PK0I220"; /* Module identification*/

    converseLib.clearScreen();

    exit stack;

  else
    return;
  end


end // end PK0I220

// display pop-up window
Function PK0I221()
   /* ------------------------------------------------------------*/
   /* if requested display list of hold reason codes.*/
   /* ------------------------------------------------------------*/

  if ("?" in PK0IM010.PK0IMRES)

    PK0IW01.PK0IWNX3 = 1; /* index*/

    while (PK0IW01.PK0IWNX3 <= 10) /* until end*/

      if (PK0IM010.PK0IMRES[PK0IWNX3] == "?") /* hrc list requested*/

        XPXX001(); /* window initialization*/
        XX0XW02.XX0XWHDR = "  HRC"; /* Heading*/

        while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
          XPXHR01(); /* Display the list*/
        end

        if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

          PK0IM010.PK0IMRES[PK0IWNX3] = " ";
        else
          PK0IM010.PK0IMRES[PK0IWNX3] = XHRTBL.XHRCD[XX0XWPIX];

        end

        set PK0IM010.PK0IMRES[PK0IWNX3] cursor, modified;

      end

      PK0IW01.PK0IWNX3 = PK0IW01.PK0IWNX3 + 1; /* increment index*/

    end

  end

  if (PK0IM010.PK0IMKUR == "?")

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  HRC"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXHR01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PK0IM010.PK0IMKUR = " ";
    else
      PK0IM010.PK0IMKUR = XHRTBL.XHRCD[XX0XWPIX];

    end

    set PK0IM010.PK0IMKUR cursor, modified;

  end

  if (PK0IM010.PK0IMORR == "?")

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  HRC"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXHR01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PK0IM010.PK0IMORR = " ";
    else
      PK0IM010.PK0IMORR = XHRTBL.XHRCD[XX0XWPIX];

    end

    set PK0IM010.PK0IMORR cursor, modified;

  end

  if (PK0IM010.PK0IMCAR == "?")

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  HRC"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXHR01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PK0IM010.PK0IMCAR = " ";
    else
      PK0IM010.PK0IMCAR = XHRTBL.XHRCD[XX0XWPIX];

    end

    set PK0IM010.PK0IMCAR cursor, modified;

  end

end // end PK0I221

// edit user input
Function PK0I250()

   /* ----- pk0i250*/
   /* ----- edit user input*/




   /* ----- set selection for inquiry flag to 'n'*/
   /* ----- set line items modified flag to 'n'*/
  PK0IW01.PK0IWFL5 = "N";
  PK0IW01.PK0IWFL8 = "N";
  PK0IW01.PK0IWFL9 = "N";
  PK0IW01.PK0IWFLD = "N";
  PK0IW01.PK0IWFLE = "N";






   /* ----- check to see if line items were modified*/
  PK0IW01.PK0IWNX3 = 10;
  while (PK0IW01.PK0IWNX3 >= 1)
    PK0I253();
  end



   /* ----- if order data was changed,*/
   /* ----- clear the pk4rec so brand code*/
   /* ----- doesn't get passed to the new*/
   /* -----     order*/
  if (PK0IM010.PK1CUOID is modified)
    set PK4REC empty;
  end



   /* ----- if order data was entered*/
   /* ----- and line items were entered*/
   /* -----     it is an error*/
   /* -----     clear the screen, get out*/
  if (PK0IM010.PK0IMORA is modified
   || PK0IM010.PK0IMORR is modified
   || PK0IM010.PK1CUOID is modified
   || PK0IM010.PK1NORID is modified
   || PK0IM010.PK0IMOMM is modified
   || PK0IM010.PK0IMODD is modified
   || PK0IM010.PK0IMOYY is modified)
    if (PK0IW01.PK0IWFL8 == "Y") /* line items were modified flag*/
      PK0IW01.PK0IWNX3 = 10;
      while (PK0IW01.PK0IWNX3 >= 1)
        PK0I217();
      end
      set PK0IM010.PK0IMORA cursor, modified, bold;
      converseLib.validationFailed(54);
      return;
    else
      PK0IW01.PK0IWFL7 = "O";
                                   /* processing customer/order flag*/
    end
  end





   /* ----- if heading customer information was entered*/
   /* ----- and line items were entered*/
   /* -----     it is an error*/
  if (PK0IM010.PK0IMKUA is modified
   || PK0IM010.PK0IMKUR is modified
   || PK0IM010.KUCCOID is modified
   || PK0IM010.KUMSTRID is modified
   || PK0IM010.XNXCD is modified
   || PK0IM010.PK0IMKMM is modified
   || PK0IM010.PK0IMKDD is modified
   || PK0IM010.PK0IMKYY is modified)
    if (PK0IW01.PK0IWFL8 == "Y")
      PK0IW01.PK0IWFLA = "Y";
      PK0IW01.PK0IWNX3 = 10;
      while (PK0IW01.PK0IWNX3 >= 1)
        PK0I217();
      end
      set PK0IM010.PK0IMKUA cursor, modified, bold;
      converseLib.validationFailed(54);
      return;
    else
      PK0IW01.PK0IWFL7 = "C";
                                   /* processing customer/order flag*/
    end
  end





   /* ----- if carrier data was entered*/
   /* ----- and line items were entered*/
   /* -----     it is an error*/
   /* -----     clear the screen, get out*/
  if (PK0IM010.PK0IMCAA is modified
   || PK0IM010.PK0IMCAR is modified
   || PK0IM010.TF1CARCD is modified
   || PK0IM010.PK0IMCMM is modified
   || PK0IM010.PK0IMCDD is modified
   || PK0IM010.PK0IMCYY is modified)
    if (PK0IW01.PK0IWFL8 == "Y") /* line items were modified flag*/
      PK0IW01.PK0IWNX3 = 10;
      while (PK0IW01.PK0IWNX3 >= 1)
        PK0I217();
      end
      set PK0IM010.PK0IMCAA cursor, modified, bold;
      converseLib.validationFailed(54);
      return;
    else
      PK0IW01.PK0IWFL7 = "R"; /* processing carrier*/
    end
  end






   /* ----- if heading customer information was entered*/
   /* ----- and heading carrier information was entered*/
   /* ----- and heading order information was entered*/
   /* -----     it is an error*/
  if (PK0IM010.PK0IMKUA is modified
   || PK0IM010.PK0IMKUR is modified
   || PK0IM010.KUCCOID is modified
   || PK0IM010.KUMSTRID is modified
   || PK0IM010.XNXCD is modified
   || PK0IM010.PK0IMKMM is modified
   || PK0IM010.PK0IMKDD is modified
   || PK0IM010.PK0IMKYY is modified)
    if (PK0IM010.PK0IMORA is modified
     || PK0IM010.PK0IMORR is modified
     || PK0IM010.PK1CUOID is modified
     || PK0IM010.PK1NORID is modified
     || PK0IM010.PK0IMOMM is modified
     || PK0IM010.PK0IMODD is modified
     || PK0IM010.PK0IMOYY is modified)
      if (PK0IM010.PK0IMCAA is modified
       || PK0IM010.PK0IMCAR is modified
       || PK0IM010.TF1CARCD is modified
       || PK0IM010.PK0IMCMM is modified
       || PK0IM010.PK0IMCDD is modified
       || PK0IM010.PK0IMCYY is modified)
        set PK0IM010.PK0IMKUA cursor, bold;
        set PK0IM010.PK0IMKUR bold;
        set PK0IM010.KUCCOID bold;
        set PK0IM010.KUMSTRID bold;
        set PK0IM010.XNXCD bold;
        set PK0IM010.PK0IMKMM bold;
        set PK0IM010.PK0IMKDD bold;
        set PK0IM010.PK0IMKYY bold;

        set PK0IM010.PK0IMORA bold;
        set PK0IM010.PK0IMORR bold;
        set PK0IM010.PK1CUOID bold;
        set PK0IM010.PK1NORID bold;
        set PK0IM010.PK0IMOMM bold;
        set PK0IM010.PK0IMODD bold;
        set PK0IM010.PK0IMOYY bold;

        set PK0IM010.PK0IMCAA bold;
        set PK0IM010.PK0IMCAR bold;
        set PK0IM010.TF1CARCD bold;
        set PK0IM010.PK0IMCMM bold;
        set PK0IM010.PK0IMCDD bold;
        set PK0IM010.PK0IMCYY bold;
        converseLib.validationFailed(65);
        return;
      end
    end
  end






   /* ----- if heading customer information was entered*/
   /* ----- and heading order information was entered*/
   /* -----     it is an error*/
  if (PK0IM010.PK0IMKUA is modified
   || PK0IM010.PK0IMKUR is modified
   || PK0IM010.KUCCOID is modified
   || PK0IM010.KUMSTRID is modified
   || PK0IM010.XNXCD is modified
   || PK0IM010.PK0IMKMM is modified
   || PK0IM010.PK0IMKDD is modified
   || PK0IM010.PK0IMKYY is modified)
    if (PK0IM010.PK0IMORA is modified
     || PK0IM010.PK0IMORR is modified
     || PK0IM010.PK1CUOID is modified
     || PK0IM010.PK1NORID is modified
     || PK0IM010.PK0IMOMM is modified
     || PK0IM010.PK0IMODD is modified
     || PK0IM010.PK0IMOYY is modified)
      set PK0IM010.PK0IMKUA cursor, bold;
      set PK0IM010.PK0IMKUR bold;
      set PK0IM010.KUCCOID bold;
      set PK0IM010.KUMSTRID bold;
      set PK0IM010.XNXCD bold;
      set PK0IM010.PK0IMKMM bold;
      set PK0IM010.PK0IMKDD bold;
      set PK0IM010.PK0IMKYY bold;

      set PK0IM010.PK0IMORA bold;
      set PK0IM010.PK0IMORR bold;
      set PK0IM010.PK1CUOID bold;
      set PK0IM010.PK1NORID bold;
      set PK0IM010.PK0IMOMM bold;
      set PK0IM010.PK0IMODD bold;
      set PK0IM010.PK0IMOYY bold;
      converseLib.validationFailed(65);
      return;
    end
  end






   /* ----- if heading customer information was entered*/
   /* ----- and heading carrier information was entered*/
   /* -----     it is an error*/
  if (PK0IM010.PK0IMKUA is modified
   || PK0IM010.PK0IMKUR is modified
   || PK0IM010.KUCCOID is modified
   || PK0IM010.KUMSTRID is modified
   || PK0IM010.XNXCD is modified
   || PK0IM010.PK0IMKMM is modified
   || PK0IM010.PK0IMKDD is modified
   || PK0IM010.PK0IMKYY is modified)
    if (PK0IM010.PK0IMCAA is modified
     || PK0IM010.PK0IMCAR is modified
     || PK0IM010.TF1CARCD is modified
     || PK0IM010.PK0IMCMM is modified
     || PK0IM010.PK0IMCDD is modified
     || PK0IM010.PK0IMCYY is modified)
      set PK0IM010.PK0IMKUA cursor, bold;
      set PK0IM010.PK0IMKUR bold;
      set PK0IM010.KUCCOID bold;
      set PK0IM010.KUMSTRID bold;
      set PK0IM010.XNXCD bold;
      set PK0IM010.PK0IMKMM bold;
      set PK0IM010.PK0IMKDD bold;
      set PK0IM010.PK0IMKYY bold;

      set PK0IM010.PK0IMCAA bold;
      set PK0IM010.PK0IMCAR bold;
      set PK0IM010.TF1CARCD bold;
      set PK0IM010.PK0IMCMM bold;
      set PK0IM010.PK0IMCDD bold;
      set PK0IM010.PK0IMCYY bold;
      converseLib.validationFailed(65);
      return;
    end
  end






   /* ----- if  heading order information was entered*/
   /* ----- and heading carrier information was entered*/
   /* -----     it is an error*/
  if (PK0IM010.PK0IMORA is modified
   || PK0IM010.PK0IMORR is modified
   || PK0IM010.PK1CUOID is modified
   || PK0IM010.PK1NORID is modified
   || PK0IM010.PK0IMOMM is modified
   || PK0IM010.PK0IMODD is modified
   || PK0IM010.PK0IMOYY is modified)
    if (PK0IM010.PK0IMCAA is modified
     || PK0IM010.PK0IMCAR is modified
     || PK0IM010.TF1CARCD is modified
     || PK0IM010.PK0IMCMM is modified
     || PK0IM010.PK0IMCDD is modified
     || PK0IM010.PK0IMCYY is modified)
      set PK0IM010.PK0IMORA cursor, bold;
      set PK0IM010.PK0IMORR bold;
      set PK0IM010.PK1CUOID bold;
      set PK0IM010.PK1NORID bold;
      set PK0IM010.PK0IMOMM bold;
      set PK0IM010.PK0IMODD bold;
      set PK0IM010.PK0IMOYY bold;

      set PK0IM010.PK0IMCAA bold;
      set PK0IM010.PK0IMCAR bold;
      set PK0IM010.TF1CARCD bold;
      set PK0IM010.PK0IMCMM bold;
      set PK0IM010.PK0IMCDD bold;
      set PK0IM010.PK0IMCYY bold;
      converseLib.validationFailed(65);
      return;
    end
  end






  if (PK0IW01.PK0IWFL7 == "O"
   && PK0IW01.PK0IWFL8 == "N") /* line items were modified flag*/
    PK0IM010.PK0IMKMM = 0;
    PK0IM010.PK0IMKDD = 0;
    PK0IM010.PK0IMKYY = 0;
    PK0IM010.PK0IMKUR = " ";
    PK0IM010.KUCCOID = 0;
    PK0IM010.KUMSTRID = 0;
    PK0IM010.XNXCD = 0;
    PK0IM010.PK0IMKUA = " ";
    PK0IM010.PK0IMCMM = 0;
    PK0IM010.PK0IMCDD = 0;
    PK0IM010.PK0IMCYY = 0;
    PK0IM010.PK0IMCAR = " ";
    PK0IM010.TF1CARCD = 0;
    PK0IM010.PK0IMCAA = " ";
    set PK0IM010.KUCCOID protect;
    set PK0IM010.KUMSTRID protect;
    set PK0IM010.XNXCD protect;
    set PK0IM010.PK0IMKUR protect;
    set PK0IM010.PK0IMKUA protect;
    set PK0IM010.PK0IMKMM protect;
    set PK0IM010.PK0IMKDD protect;
    set PK0IM010.PK0IMKYY protect;
    set PK0IM010.TF1CARCD protect;
    set PK0IM010.PK0IMCAR protect;
    set PK0IM010.PK0IMCAA protect;
    set PK0IM010.PK0IMCMM protect;
    set PK0IM010.PK0IMCDD protect;
    set PK0IM010.PK0IMCYY protect;
    set PK0IM010.PK1CUOID normal;
    set PK0IM010.PK1NORID normal;
    set PK0IM010.PK0IMORR normal;
    set PK0IM010.PK0IMORA normal;
    set PK0IM010.PK0IMOMM normal;
    set PK0IM010.PK0IMODD normal;
    set PK0IM010.PK0IMOYY normal;
  end


  if (PK0IW01.PK0IWFL7 == "C"
   && PK0IW01.PK0IWFL8 == "N") /* line items were modified flag*/
    PK0IM010.PK0IMOMM = 0;
    PK0IM010.PK0IMODD = 0;
    PK0IM010.PK0IMOYY = 0;
    PK0IM010.PK0IMORR = " ";
    PK0IM010.PK1CUOID = 0;
    PK0IM010.PK1NORID = 0;
    PK0IM010.PK0IMORA = " ";
    PK0IM010.PK0IMCMM = 0;
    PK0IM010.PK0IMCDD = 0;
    PK0IM010.PK0IMCYY = 0;
    PK0IM010.PK0IMCAR = " ";
    PK0IM010.TF1CARCD = 0;
    PK0IM010.PK0IMCAA = " ";
    set PK0IM010.PK1CUOID protect;
    set PK0IM010.PK1NORID protect;
    set PK0IM010.PK0IMORR protect;
    set PK0IM010.PK0IMORA protect;
    set PK0IM010.PK0IMOMM protect;
    set PK0IM010.PK0IMODD protect;
    set PK0IM010.PK0IMOYY protect;
    set PK0IM010.TF1CARCD protect;
    set PK0IM010.PK0IMCAR protect;
    set PK0IM010.PK0IMCAA protect;
    set PK0IM010.PK0IMCMM protect;
    set PK0IM010.PK0IMCDD protect;
    set PK0IM010.PK0IMCYY protect;
    set PK0IM010.KUCCOID normal;
    set PK0IM010.KUMSTRID normal;
    set PK0IM010.XNXCD normal;
    set PK0IM010.PK0IMKUR normal;
    set PK0IM010.PK0IMKUA normal;
    set PK0IM010.PK0IMKMM normal;
    set PK0IM010.PK0IMKDD normal;
    set PK0IM010.PK0IMKYY normal;
  end






  if (PK0IW01.PK0IWFL7 == "R"
   && PK0IW01.PK0IWFL8 == "N") /* line items were modified flag*/
    PK0IM010.PK0IMKMM = 0;
    PK0IM010.PK0IMKDD = 0;
    PK0IM010.PK0IMKYY = 0;
    PK0IM010.PK0IMKUR = " ";
    PK0IM010.KUCCOID = 0;
    PK0IM010.KUMSTRID = 0;
    PK0IM010.XNXCD = 0;
    PK0IM010.PK0IMKUA = " ";
    PK0IM010.PK0IMOMM = 0;
    PK0IM010.PK0IMODD = 0;
    PK0IM010.PK0IMOYY = 0;
    PK0IM010.PK0IMORR = " ";
    PK0IM010.PK1CUOID = 0;
    PK0IM010.PK1NORID = 0;
    PK0IM010.PK0IMORA = " ";
    set PK0IM010.KUCCOID protect;
    set PK0IM010.KUMSTRID protect;
    set PK0IM010.XNXCD protect;
    set PK0IM010.PK0IMKUR protect;
    set PK0IM010.PK0IMKUA protect;
    set PK0IM010.PK0IMKMM protect;
    set PK0IM010.PK0IMKDD protect;
    set PK0IM010.PK0IMKYY protect;
    set PK0IM010.PK1CUOID protect;
    set PK0IM010.PK1NORID protect;
    set PK0IM010.PK0IMORR protect;
    set PK0IM010.PK0IMORA protect;
    set PK0IM010.PK0IMOMM protect;
    set PK0IM010.PK0IMODD protect;
    set PK0IM010.PK0IMOYY protect;
    set PK0IM010.TF1CARCD normal;
    set PK0IM010.PK0IMCAR normal;
    set PK0IM010.PK0IMCAA normal;
    set PK0IM010.PK0IMCMM normal;
    set PK0IM010.PK0IMCDD normal;
    set PK0IM010.PK0IMCYY normal;
  end





   /* ----- if heading order information was entered*/
   /* -----     validate heading - order information*/
  if (PK0IW01.PK0IWFL7 == "O"
   && PK0IW01.PK0IWFL8 == "N")
    PK0I255();
  end






   /* ----- if heading customer information was entered*/
   /* -----     validate heading - customer information*/
  if (PK0IW01.PK0IWFL7 == "C"
   && PK0IW01.PK0IWFL8 == "N")
    PK0I257();
  end






   /* ----- if heading carrier information was entered*/
   /* -----     validate heading - carrier information*/
  if (PK0IW01.PK0IWFL7 == "R"
   && PK0IW01.PK0IWFL8 == "N")
    PK0I254();
  end





   /* ----- if line items were modified*/
   /* -----     edit line items*/
  if (PK0IW01.PK0IWFL8 == "Y")
    PK0IW01.PK0IWNX3 = 10;
    while (PK0IW01.PK0IWNX3 >= 1)
      PK0I251();
    end
  end





   /* ----- if brand code was entered*/
   /* -----     validate it*/
  if (PK0IM010.XBCCD != " ")
    if (PK0IM010.XBCCD in XBCTBL.XBCCD)
      PK0IW01.PK0IWSBC = XBCTBL.XBCCD[sysVar.arrayIndex];
    end
    if (sysVar.arrayIndex == 0)
      if (converseVar.validationMsgNum == 0)
        set PK0IM010.XBCCD cursor, bold; /* highlight brand*/
        converseLib.validationFailed(413); /* invalid brand*/
        PK0IM010.XXXERRID = "PK0I250 ";
      else
        set PK0IM010.XBCCD bold; /* highlight brand*/
      end
    else
      set PK0IM010.XBCCD normal; /* reset brand*/
    end
  end


   /* ----- end pk0i250*/


end // end PK0I250

// edit line items
Function PK0I251()

   /* ----- pk0i251*/
   /* ----- edit line items*/







   /* ----- initialize field error flags*/
  PK0IW01.PK0IWFLA = "N";
  PK0IW01.PK0IWFLB = "N";
  PK0IW01.PK0IWFLC = "N";





   /* ----- edit line item release dates*/

   /* ----- if release date is entered*/
   /* ----- and it's older than todays date*/
   /* -----     it is an error*/
  if (PK0IM010.PK0IMACT[PK0IWNX3] != "R"
   && PK0IM010.PK0IMACT[PK0IWNX3] != " "
   && PK0IM010.PK0IMACT[PK0IWNX3] != "S")
    if (PK0IM010.PK0IMMM[PK0IWNX3] != 0
     || PK0IM010.PK0IMDD[PK0IWNX3] != 0)

        /* ====== Y2K OUT BEGIN ======*/

      /* OR PK0IM010.PK0IMYY(PK0IWNX3) NE 0;*/
      /* MOVE EZEDTE TO PK0IWFDA;*/
      /* IF PK0IM010.PK0IMYY(PK0IWNX3) LT PK0IW01.PK0IWFYY;*/

        /* ====== Y2K OUT END ======*/


        /* ====== Y2K IN BEGIN ======*/

      PK0IWFDT = VGVar.currentGregorianDate;

      PK0IW01.PK0IWRDD = PK0IM010.PK0IMDD[PK0IWNX3];
      PK0IW01.PK0IWRMM = PK0IM010.PK0IMMM[PK0IWNX3];
      PK0IW01.PK0IWRYY = PK0IM010.PK0IMYY[PK0IWNX3];

      PK0IS10();

       /* check for high values*/

      if (PK0IW01.PK0IWRDD == 99)
        PK0IW01.PK0IWRCC = 99;
      end
      if (PK0IW01.PK0IWRDT < PK0IW01.PK0IWFDT)

        /* ====== Y2K IN END ======*/

        set PK0IM010.PK0IMMM[PK0IWNX3] cursor, modified, bold;
        set PK0IM010.PK0IMDD[PK0IWNX3] modified, bold;
        set PK0IM010.PK0IMYY[PK0IWNX3] modified, bold;
        PK0IW01.PK0IWFLC = "Y"; /* release date had errors*/
        converseLib.validationFailed(55);
      end
      if (PK0IM010.PK0IMYY[PK0IWNX3] == PK0IW01.PK0IWFYY
       && PK0IM010.PK0IMMM[PK0IWNX3] < PK0IW01.PK0IWFMM)
        set PK0IM010.PK0IMMM[PK0IWNX3] cursor, modified, bold;
        set PK0IM010.PK0IMDD[PK0IWNX3] modified, bold;
        set PK0IM010.PK0IMYY[PK0IWNX3] modified, bold;
        PK0IW01.PK0IWFLC = "Y"; /* release date had errors*/
        converseLib.validationFailed(55);
      end
      if (PK0IM010.PK0IMYY[PK0IWNX3] == PK0IW01.PK0IWFYY
       && PK0IM010.PK0IMMM[PK0IWNX3] == PK0IW01.PK0IWFMM
       && PK0IM010.PK0IMDD[PK0IWNX3] < PK0IW01.PK0IWFDD)
        set PK0IM010.PK0IMMM[PK0IWNX3] cursor, modified, bold;
        set PK0IM010.PK0IMDD[PK0IWNX3] modified, bold;
        set PK0IM010.PK0IMYY[PK0IWNX3] modified, bold;
        PK0IW01.PK0IWFLC = "Y"; /* release date had errors*/
        converseLib.validationFailed(55);
      end
    end
  end





   /* ----- if action field is 'h' or 'c'*/
   /* ----- and release date is not entered*/
   /* -----     it is an error*/
  if (PK0IM010.PK0IMMM[PK0IWNX3] == 0
   && PK0IM010.PK0IMDD[PK0IWNX3] == 0)

    /* ===== Y2K OUT BEGIN ======*/

    /* AND PK0IM010.PK0IMYY(PK0IWNX3) EQ 0;*/

    /* ===== Y2K OUT END =======*/

    if (PK0IM010.PK0IMACT[PK0IWNX3] == "H"
     || PK0IM010.PK0IMACT[PK0IWNX3] == "C")
      set PK0IM010.PK0IMMM[PK0IWNX3] cursor, modified, bold;
      set PK0IM010.PK0IMDD[PK0IWNX3] modified, bold;
      set PK0IM010.PK0IMYY[PK0IWNX3] modified, bold;
      PK0IW01.PK0IWFLC = "Y"; /* release date had errors*/
      converseLib.validationFailed(61);
    end
  end




   /* ----- validate release date is on a working day*/
  if (PK0IM010.PK0IMACT[PK0IWNX3] != "R"
   && PK0IM010.PK0IMACT[PK0IWNX3] != " "
   && PK0IM010.PK0IMACT[PK0IWNX3] != "S")
    if (PK0IM010.PK0IMMM[PK0IWNX3] != 0
     || PK0IM010.PK0IMDD[PK0IWNX3] != 0)

      /* ====== Y2K OUT BEGIN =======*/

      /* OR PK0IM010.PK0IMYY(PK0IWNX3) NE 0;*/

      /* ====== Y2K OUT END ========*/

      if (PK0IM010.PK0IMMM[PK0IWNX3] != 99
       || PK0IM010.PK0IMDD[PK0IWNX3] != 99
       || PK0IM010.PK0IMYY[PK0IWNX3] != 99)
        set TA9REC empty;
        TA9REC.TA9BEGMM = PK0IM010.PK0IMMM[PK0IWNX3];
        TA9REC.TA9BEGDD = PK0IM010.PK0IMDD[PK0IWNX3];
        TA9REC.TA9BEGYY = PK0IM010.PK0IMYY[PK0IWNX3];

        /* date window the century*/

        if (TA9REC.TA9BEGYY < 60)
          TA9REC.TA9BEGCC = 20;
        else
          TA9REC.TA9BEGCC = 19;
        end

        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
        if (TA9REC.TA9RTNFL == 0)
           /* next sentence*/
        else
          set PK0IM010.PK0IMMM[PK0IWNX3] cursor, modified, bold;
          set PK0IM010.PK0IMDD[PK0IWNX3] modified, bold;
          set PK0IM010.PK0IMYY[PK0IWNX3] modified, bold;
          PK0IW01.PK0IWFLC = "Y"; /* release date had errors*/
          converseLib.validationFailed(56);
        end
      end
    end
  end









   /* ----- validate reason code*/
  if (PK0IM010.PK0IMRES[PK0IWNX3] != " ")
    PK0IW01.PK0IWRSN = PK0IM010.PK0IMRES[PK0IWNX3];
    PK0IW01.PK0IWNDX = 1;
    PK0IW01.PK0IWFL6 = "N";
    while (PK0IW01.PK0IWNDX <= PK0IW01.PK0IWTRR
     && PK0IW01.PK0IWFL6 == "N")
      PK0I252();
    end

    if (PK0IW01.PK0IWFL6 == "N")
      set PK0IM010.PK0IMRES[PK0IWNX3] cursor, modified, bold;
      PK0IW01.PK0IWFLB = "Y"; /* reason code had errors*/
      converseLib.validationFailed(57);
    else
      PK0IM010.XHRABRV[PK0IWNX3] = PK0IW01.XHRABRV[PK0IWNDX];
    end
  end






   /* ----- if action field is 'h'*/
   /* ----- and reason code is not entered*/
   /* -----     it is an error*/
  if (PK0IM010.PK0IMRES[PK0IWNX3] == " ")
    if (PK0IM010.PK0IMACT[PK0IWNX3] == "H"
     || PK0IM010.PK0IMACT[PK0IWNX3] == "R"
     || PK0IM010.PK0IMACT[PK0IWNX3] == "C")
      set PK0IM010.PK0IMRES[PK0IWNX3] cursor, modified, bold;
      PK0IW01.PK0IWFLB = "Y"; /* reason code had errors*/
      converseLib.validationFailed(60);
    end
  end







   /* ----- for holds*/
   /* -----     check for duplicates - customer*/
  if (PK0IM010.PK0IMACT[PK0IWNX3] == "H"
   && PK0IW01.PK0IWFL7 == "C") /* processing customer/order flag*/
    set PK9REC empty;
    PK9REC.XHRCD = PK0IM010.PK0IMRES[PK0IWNX3];
    PK0I259();
    if (SQLCA.VAGen_SQLCODE != 100)
      set PK0IM010.PK0IMRES[PK0IWNX3] modified, bold;
      PK0IW01.PK0IWFLB = "Y";
    end
  end









   /* ----- for holds*/
   /* -----     check for duplicates - order*/
  if (PK0IM010.PK0IMACT[PK0IWNX3] == "H"
   && PK0IW01.PK0IWFL7 == "O") /* processing customer/order flag*/
    set PKBREC empty;
    PKBREC.XHRCD = PK0IM010.PK0IMRES[PK0IWNX3];
    PK0I256();
    if (SQLCA.VAGen_SQLCODE != 100)
      set PK0IM010.PK0IMRES[PK0IWNX3] modified, bold;
      PK0IW01.PK0IWFLB = "Y";
    end
  end







   /* ----- for holds*/
   /* -----     check for duplicates - carrier*/
  if (PK0IM010.PK0IMACT[PK0IWNX3] == "H"
   && PK0IW01.PK0IWFL7 == "R") /* processing carrier*/
    set PWFREC empty;
    PWFREC.XHRCD = PK0IM010.PK0IMRES[PK0IWNX3];
    PK0I258();
    if (SQLCA.VAGen_SQLCODE != 100)
      set PK0IM010.PK0IMRES[PK0IWNX3] modified, bold;
      PK0IW01.PK0IWFLB = "Y";
    end
  end







   /* ----- validate line item action field*/
  if (PK0IM010.PK0IMACT[PK0IWNX3] == " "
   || PK0IM010.PK0IMACT[PK0IWNX3] == "S"
   || PK0IM010.PK0IMACT[PK0IWNX3] == "H"
   || PK0IM010.PK0IMACT[PK0IWNX3] == "R"
   || PK0IM010.PK0IMACT[PK0IWNX3] == "C")
     /* next sentence*/
  else
    set PK0IM010.PK0IMACT[PK0IWNX3] cursor, modified, bold;
    PK0IW01.PK0IWFLA = "Y"; /* action field had errors*/
    converseLib.validationFailed(35);
  end








   /* ----- if selected for inquiry*/
   /* -----     set selection for inquiry flag*/
   /* -----     depending on customer or order entry*/
  if (PK0IM010.PK0IMACT[PK0IWNX3] == "S")
    PK0IW01.PK0IWFL5 = "Y"; /* select for customer inquiry*/
  end




   /* ----- reset fields*/
  if (PK0IW01.PK0IWFLB == "N"
   && PK0IM010.PK0IMRES[PK0IWNX3] == " ")
    set PK0IM010.PK0IMRES[PK0IWNX3] normal;
  end
  if (PK0IW01.PK0IWFLB == "N"
   && PK0IM010.PK0IMRES[PK0IWNX3] != " ")
    set PK0IM010.PK0IMRES[PK0IWNX3] protect;
  end

  if (PK0IW01.PK0IWFLA == "N")
    set PK0IM010.PK0IMACT[PK0IWNX3] normal;
  end

  if (PK0IW01.PK0IWFLC == "N")
    set PK0IM010.PK0IMMM[PK0IWNX3] normal;
    set PK0IM010.PK0IMDD[PK0IWNX3] normal;
    set PK0IM010.PK0IMYY[PK0IWNX3] normal;
  end


  PK0IW01.PK0IWNX3 = PK0IW01.PK0IWNX3 - 1; /* decrement index*/




   /* ----- end pk0i251*/
end // end PK0I251

// validate reason code
Function PK0I252()

   /* ----- pk0i252*/


   /* ----- validate reason code*/
  if (PK0IW01.PK0IWRSN == PK0IW01.XHRCD[PK0IWNDX])
    PK0IW01.PK0IWFL6 = "Y";
    return;
  end


  PK0IW01.PK0IWNDX = PK0IW01.PK0IWNDX + 1; /* increment index*/


   /* ----- end pk0i252*/
end // end PK0I252

// check if line items modified
Function PK0I253()

   /* ----- pk0i253*/
   /* ----- check to see if line items were modified*/




  if (PK0IM010.PK0IMMM[PK0IWNX3] is modified
   || PK0IM010.PK0IMDD[PK0IWNX3] is modified
   || PK0IM010.PK0IMYY[PK0IWNX3] is modified
   || PK0IM010.PK0IMRES[PK0IWNX3] is modified
   || PK0IM010.PK0IMACT[PK0IWNX3] is modified)
    PK0IW01.PK0IWFL8 = "Y"; /* line items modified flag*/
  end



  PK0IW01.PK0IWNX3 = PK0IW01.PK0IWNX3 - 1; /* decrement index*/




   /* ----- end pk0i253*/
end // end PK0I253

// validate header - carrier
Function PK0I254()
   /* ----- pk0i254*/
   /* -----*/
   /* ----- validate header - carrier data*/


  PK0IM010.XXXERRID = "PK0I254";




   /* ----- initialize field error flags*/
  PK0IW01.PK0IWFLA = "N"; /* action field error flag*/
  PK0IW01.PK0IWFLB = "N"; /* reason code error flag*/
  PK0IW01.PK0IWFLC = "N"; /* release date error flag*/
  PK0IW01.PK0IWFLE = "N"; /* carrier  error flag*/






   /* ----- validate carrier  - get carrier abbreviation*/
  PK0I134();
  if (SQLCA.VAGen_SQLCODE != 0)
    return;
  end






   /* ----- if action field is ' '*/
   /* -----     if only 1 reason exixts*/
   /* -----         get reason description*/
   /* -----     else*/
   /* -----          load line items*/
  if (PK0IM010.PK0IMCAA == " ")
    set PWFREC empty;
    PWFREC.XWHCD = PKWREC.XWHCD;
    PWFREC.TF1CARCD = PK0IM010.TF1CARCD;
    PWFREC.XHRCD = "*";
    PKZREC.PKZFUNC = "S ";
    call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes}; /* sel unique on carrier*/
                                  /* hold table using wildcard '*'*/
                                  /* for reason code*/
    if (SQLCA.VAGen_SQLCODE == 0) /* 1 row was found*/
      PK0IW01.PK0IWFDT = PWFREC.PKBRELDT;
      PK0IM010.PK0IMCYY = PK0IW01.PK0IWFYY;
      PK0IM010.PK0IMCMM = PK0IW01.PK0IWFMM;
      PK0IM010.PK0IMCDD = PK0IW01.PK0IWFDD;
      PK0IM010.PK0IMCAR = PWFREC.XHRCD;
      set PK0IM010.PK0IMCAA cursor;
       /* ----- clear screen line items*/
      PK0IW01.PK0IWNX3 = 10;
      while (PK0IW01.PK0IWNX3 >= 1)
        PK0I217();
      end
      PK0IW01.PK0IWRSN = PWFREC.XHRCD;
      PK0IW01.PK0IWNDX = 1;
      PK0IW01.PK0IWFL6 = "N";
      while (PK0IW01.PK0IWNDX <= PK0IW01.PK0IWTRR
       && PK0IW01.PK0IWFL6 == "N")
        PK0I252();
      end
      if (PK0IW01.PK0IWFL6 == "Y")
        PK0IM010.PK0IMCAD = PK0IW01.XHRABRV[PK0IWNDX];
      else
        PK0IM010.PK0IMCAD = "UNKNWN";
      end
    else
      if (SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
        PK0IM010.PK0IMCAR = " ";
        PK0IM010.PK0IMCAD = " ";
        PK0IM010.PK0IMCMM = 0;
        PK0IM010.PK0IMCDD = 0;
        PK0IM010.PK0IMCYY = 0;

        PK0IM010.PK0IMORA = " ";
        PK0IM010.PK0IMORR = " ";
        PK0IM010.PK0IMORD = " ";
        PK0IM010.PK1CUOID = 0;
        PK0IM010.PK1NORID = 0;
        PK0IM010.PK0IMOMM = 0;
        PK0IM010.PK0IMODD = 0;
        PK0IM010.PK0IMOYY = 0;

        PK0IM010.PK0IMKUA = " ";
        PK0IM010.PK0IMKUR = " ";
        PK0IM010.PK0IMKUD = " ";
        PK0IM010.KUCCOID = 0;
        PK0IM010.KUMSTRID = 0;
        PK0IM010.XNXCD = 0;
        PK0IM010.PK0IMKMM = 0;
        PK0IM010.PK0IMKDD = 0;
        PK0IM010.PK0IMKYY = 0;

        set PK0IM010.PK0IMORA protect;
        set PK0IM010.PK0IMORR protect;
        set PK0IM010.PK1CUOID protect;
        set PK0IM010.PK1NORID protect;
        set PK0IM010.PK0IMOMM protect;
        set PK0IM010.PK0IMODD protect;
        set PK0IM010.PK0IMOYY protect;

        set PK0IM010.PK0IMKUA protect;
        set PK0IM010.PK0IMKUR protect;
        set PK0IM010.KUCCOID protect;
        set PK0IM010.KUMSTRID protect;
        set PK0IM010.XNXCD protect;
        set PK0IM010.PK0IMKMM protect;
        set PK0IM010.PK0IMKDD protect;
        set PK0IM010.PK0IMKYY protect;

        set PK0IM010.PK0IMCAA protect;
        set PK0IM010.PK0IMCAR protect;
        set PK0IM010.PK0IMCMM protect;
        set PK0IM010.PK0IMCDD protect;
        set PK0IM010.PK0IMCYY protect;
         /* ----- clear screen line items*/
        PK0IW01.PK0IWNX3 = 10;
        while (PK0IW01.PK0IWNX3 >= 1)
          PK0I217();
        end
        set PK0IM010.PK0IMACT[1] cursor;
        set PWFREC empty;
        PWFREC.XWHCD = PKWREC.XWHCD;
        PWFREC.TF1CARCD = PK0IM010.TF1CARCD;
        PKZREC.PKZFUNC = "S1";
        call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
        PK0IW01.PK0IWNX3 = 1;
        while (PK0IW01.PK0IWNX3 <= 10)
          PK0I139(); /* load carrier hold line items*/
        end
        PKZREC.PKZFUNC = "C1";
        call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes}; /* close set*/
        return;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(28); /* contention for data base resorce*/
          return;
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* no records found,*/
            PK0IW01.PK0IWFLE = "Y";
            PK0IM010.PK0IMCMM = 0;
            PK0IM010.PK0IMCDD = 0;
            PK0IM010.PK0IMCYY = 0;
            PK0IM010.PK0IMCAD = " ";
            PK0IM010.PK0IMCAR = " ";
            set PK0IM010.TF1CARCD cursor, modified, bold;
            converseLib.validationFailed(277);
            return; /* no need to load the map/ws*/
          else
            converseLib.validationFailed(29); /* fatal error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0I254 "; /* Process name*/
            TA1REC.TA1LOC = "SELECT UNIQUE            ";
            TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
            TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

            return;
          end
        end
      end
    end
  end




   /* ----- validate realease dates.*/

   /* ----- if carrier release date is entered*/
   /* ----- and it's older than todays date*/
   /* -----     it is an error*/
  if (PK0IM010.PK0IMCAA != "R"
   && PK0IM010.PK0IMCAA != " "
   && PK0IM010.PK0IMCAA != "S"
   && PK0IM010.PK0IMCAA != "V")
    if (PK0IM010.PK0IMCMM != 0
     || PK0IM010.PK0IMCDD != 0)

       /* ===== Y2K OUT BEGIN ======*/

      /* OR PK0IM010.PK0IMCYY NE 0;*/
      /* MOVE EZEDTE TO PK0IWFDA;*/
      /* IF PK0IM010.PK0IMCYY LT PK0IW01.PK0IWFYY;*/

       /* ===== Y2K OUT END ======*/


      /* ====== Y2K IN BEGIN ======*/

      PK0IWFDT = VGVar.currentGregorianDate;

      PK0IW01.PK0IWRDD = PK0IM010.PK0IMCDD;
      PK0IW01.PK0IWRMM = PK0IM010.PK0IMCMM;
      PK0IW01.PK0IWRYY = PK0IM010.PK0IMCYY;

      PK0IS10();

       /* compensate for high values entered*/

      if (PK0IW01.PK0IWRDD == 99)
        PK0IW01.PK0IWRCC = 99;
      end

      if (PK0IW01.PK0IWRDT < PK0IW01.PK0IWFDT)

        /* ====== Y2K IN END ======*/


        set PK0IM010.PK0IMCMM cursor, modified, bold;
        set PK0IM010.PK0IMCDD modified, bold;
        set PK0IM010.PK0IMCYY modified, bold;
        PK0IW01.PK0IWFLC = "Y"; /* release date error flag*/
        converseLib.validationFailed(55);
      end
      if (PK0IM010.PK0IMCYY == PK0IW01.PK0IWFYY
       && PK0IM010.PK0IMCMM < PK0IW01.PK0IWFMM)
        set PK0IM010.PK0IMCMM cursor, modified, bold;
        set PK0IM010.PK0IMCDD modified, bold;
        set PK0IM010.PK0IMCYY modified, bold;
        PK0IW01.PK0IWFLC = "Y"; /* release date error flag*/
        converseLib.validationFailed(55);
      end
      if (PK0IM010.PK0IMCYY == PK0IW01.PK0IWFYY
       && PK0IM010.PK0IMCMM == PK0IW01.PK0IWFMM
       && PK0IM010.PK0IMCDD < PK0IW01.PK0IWFDD)
        set PK0IM010.PK0IMCMM cursor, modified, bold;
        set PK0IM010.PK0IMCDD modified, bold;
        set PK0IM010.PK0IMCYY modified, bold;
        PK0IW01.PK0IWFLC = "Y"; /* release date error flag*/
        converseLib.validationFailed(55);
      end
    end
  end


   /* ----- if action is hold or change*/
   /* ----- and date is not entered*/
   /* -----     it is an error*/
  if (PK0IM010.PK0IMCAA == "H"
   || PK0IM010.PK0IMCAA == "C")

    /* ===== Y2K OUT BEGIN =====*/

    /* IF PK0IM010.PK0IMCYY EQ 0*/

    /* ===== Y2K OUT END =====*/

    if (PK0IM010.PK0IMCMM == 0
     && PK0IM010.PK0IMCDD == 0)
      set PK0IM010.PK0IMCMM cursor, modified, bold;
      set PK0IM010.PK0IMCDD modified, bold;
      set PK0IM010.PK0IMCYY modified, bold;
      PK0IW01.PK0IWFLC = "Y"; /* release date error flag*/
      converseLib.validationFailed(66);
    end
  end







   /* ----- if carrier release date is entered*/
   /* ----- and it's not all 9's*/
   /* -----     check to see if falls on a working day*/
  if (PK0IM010.PK0IMCAA != "R"
   && PK0IM010.PK0IMCAA != " "
   && PK0IM010.PK0IMCAA != "S"
   && PK0IM010.PK0IMCAA != "V")
    if (PK0IM010.PK0IMCMM != 0
     || PK0IM010.PK0IMCDD != 0)

  /* --------------------- Y2K OUT BEGIN -----------/**/

      /* OR PK0IM010.PK0IMCYY NE 0;*/

  /* --------------------- Y2K OUT END -----------/**/

      if (PK0IM010.PK0IMCMM != 99
       || PK0IM010.PK0IMCDD != 99
       || PK0IM010.PK0IMCYY != 99)
        set TA9REC empty;
        TA9REC.TA9BEGMM = PK0IM010.PK0IMCMM;
        TA9REC.TA9BEGDD = PK0IM010.PK0IMCDD;
        TA9REC.TA9BEGYY = PK0IM010.PK0IMCYY;

  /* --------------------- Y2K OUT BEGIN -----------/**/
        /* MOVE 19 TO TA9REC.TA9BEGCC;*/
  /* --------------------- Y2K OUT END -------------/**/


  /* --------------------- Y2K IN BEGIN -----------/**/
        if (TA9REC.TA9BEGYY < 60)
          TA9REC.TA9BEGCC = 20;
        else
          TA9REC.TA9BEGCC = 19;
        end
  /* --------------------- Y2K OUT END -------------/**/

        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* move to nearest working day*/
        if (TA9REC.TA9RTNFL == 0) /* good return code*/
           /* next sentence*/
        else
          set PK0IM010.PK0IMCMM cursor, modified, bold;
          set PK0IM010.PK0IMCDD modified, bold;
          set PK0IM010.PK0IMCYY modified, bold;
          PK0IW01.PK0IWFLC = "Y"; /* release date error flag*/
          converseLib.validationFailed(56);
        end
      end
    end
  end







   /* ----- validate reason code*/


  if (PK0IM010.PK0IMCAA != "R"
   && PK0IM010.PK0IMCAA != " "
   && PK0IM010.PK0IMCAA != "S"
   && PK0IM010.PK0IMCAA != "V")
    PK0IW01.PK0IWRSN = PK0IM010.PK0IMCAR;
    PK0IW01.PK0IWNDX = 1;
    PK0IW01.PK0IWFL6 = "N";
    while (PK0IW01.PK0IWNDX <= PK0IW01.PK0IWTRR
     && PK0IW01.PK0IWFL6 == "N")
      PK0I252();
    end

    if (PK0IW01.PK0IWFL6 == "N")
      set PK0IM010.PK0IMCAR cursor, modified, bold;
      PK0IW01.PK0IWFLB = "Y"; /* reason code error flag*/
      converseLib.validationFailed(57);
    else
      PK0IM010.PK0IMCAD = PK0IW01.XHRABRV[PK0IWNDX];
    end
  end





   /* ----- if action is hold, change or release*/
   /* ----- and reason code is not entered*/
   /* -----     it is an error*/
  if (PK0IM010.PK0IMCAA == "H"
   || PK0IM010.PK0IMCAA == "C"
   || PK0IM010.PK0IMCAA == "R")
    if (PK0IM010.PK0IMCAR == " ")
      set PK0IM010.PK0IMCAR cursor, modified, bold;
      PK0IW01.PK0IWFLB = "Y"; /* reason code error flag*/
      converseLib.validationFailed(67);
    end
  end






   /* ----- for holds*/
   /* -----     check for duplicates*/
  if (PK0IM010.PK0IMCAA == "H")
    set PWFREC empty;
    PWFREC.XHRCD = PK0IM010.PK0IMCAR;
    PK0I258();
    if (SQLCA.VAGen_SQLCODE != 100)
      set PK0IM010.PK0IMCAR modified, bold;
      PK0IW01.PK0IWFLB = "Y";
    end
  end








   /* ----- for holds*/
   /* -----     check if reason limit is exceeded*/
  if (PK0IM010.PK0IMCAA == "H")
    set PWFREC empty;
    PWFREC.XHRCD = "*";
    PWFREC.XWHCD = PKWREC.XWHCD;
    PWFREC.TF1CARCD = PK0IM010.TF1CARCD;
    PKZREC.PKZFUNC = "CT";
    call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes}; /* sel count on carrier*/
    if (SQLCA.VAGen_SQLCODE == 0
     && PKZREC.PKZSUM1 > 9)
      converseLib.validationFailed(278);
      PK0IW01.PK0IWFLE = "Y"; /* carrier  had errors flag*/
      set PK0IM010.TF1CARCD cursor, bold;
    else
      if (SQLCA.VAGen_SQLCODE == 0)
        /* next sentence*/
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          PK0IW01.PK0IWFLE = "Y"; /* carrier  had errors flag*/
          converseLib.validationFailed(28); /* contention for data base resorce*/
          return;
        else
          PK0IW01.PK0IWFLE = "Y"; /* carrier  had errors flag*/
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0I254 "; /* Process name*/
          TA1REC.TA1LOC = "SELECT COUNT      ";
          TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

          return;
        end
      end
    end
  end







   /* ----- validate action field*/


  if (PK0IM010.PK0IMCAA == " "
   || PK0IM010.PK0IMCAA == "V"
   || PK0IM010.PK0IMCAA == "S"
   || PK0IM010.PK0IMCAA == "H"
   || PK0IM010.PK0IMCAA == "R"
   || PK0IM010.PK0IMCAA == "C")
     /* next sentence*/
  else
    set PK0IM010.PK0IMCAA cursor, modified, bold;
    PK0IW01.PK0IWFLA = "Y"; /* action field error flag*/
    converseLib.validationFailed(35);
  end






   /* ----- if action field is 's'*/
   /* -----     set selection for inquiry flag to 'y'*/
  if (PK0IM010.PK0IMCAA == "S")
    PK0IW01.PK0IWFL5 = "Y";
  end





   /* ----- reset fields*/
  if (PK0IW01.PK0IWFLB == "N")
    set PK0IM010.PK0IMCAR normal;
  end

  if (PK0IW01.PK0IWFLA == "N")
    set PK0IM010.PK0IMCAA normal;
  end

  if (PK0IW01.PK0IWFLC == "N")
    set PK0IM010.PK0IMCMM normal;
    set PK0IM010.PK0IMCDD normal;
    set PK0IM010.PK0IMCYY normal;
  end

  if (PK0IW01.PK0IWFLE == "N")
    set PK0IM010.TF1CARCD normal;
  end



   /* ----- end pk0i254*/
end // end PK0I254

// validate header - order data
Function PK0I255()

   /* ----- pk0i255*/
   /* -----*/
   /* ----- validate header - order data*/

  PK0IM010.XXXERRID = "PK0I255";

   /* in the next if stmt,0 is moved to nike order id as a default*/
   /* if the user has not entered a nike order number (pk1norid).*/

  if (PK0IM010.PK1CUOID != 0
   && PK0IM010.PK1NORID == 0)
    if (PK0IM010.PK1NORID not modified)
      PK0IM010.PK1NORID = 1;
    else
      PK0IM010.PK1NORID = 0;
    end
  end



   /* ----- initialize field error flags*/
  PK0IW01.PK0IWFLA = "N"; /* action field error flag*/
  PK0IW01.PK0IWFLB = "N"; /* reason code error flag*/
  PK0IW01.PK0IWFLC = "N"; /* release date error flag*/
  PK0IW01.PK0IWFLD = "N"; /* order had errors flag*/











   /* ----- if action field is ' '*/
   /* -----     if only 1 reason exists*/
   /* -----         get reason description*/
   /* -----     else*/
   /* -----          load line items*/
  if (PK0IM010.PK0IMORA == " ")
    set PKBREC empty;
    PKBREC.XWHCD = PKWREC.XWHCD;
    PKBREC.PK1CUOID = PK0IM010.PK1CUOID;
    PKBREC.PK1NORID = PK0IM010.PK1NORID;
    PKBREC.XHRCD = "*";
    PKZREC.PKZFUNC = "S ";
    call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
                                   /* select unique on order*/
                                  /* hold table using wildcard '*'*/
                                  /* for reason code*/
    if (SQLCA.VAGen_SQLCODE == 0) /* 1 row was found*/
      PK0IW01.PK0IWFDT = PKBREC.PKBRELDT;
      PK0IM010.PK0IMOYY = PK0IW01.PK0IWFYY;
      PK0IM010.PK0IMOMM = PK0IW01.PK0IWFMM;
      PK0IM010.PK0IMODD = PK0IW01.PK0IWFDD;
      set PK0IM010.PK0IMORA cursor;
      PK0IM010.PK0IMORR = PKBREC.XHRCD;
       /* ----- clear screen line items*/
      PK0IW01.PK0IWNX3 = 10;
      while (PK0IW01.PK0IWNX3 >= 1)
        PK0I217();
      end
      PK0IW01.PK0IWRSN = PKBREC.XHRCD;
      PK0IW01.PK0IWNDX = 1;
      PK0IW01.PK0IWFL6 = "N";
      while (PK0IW01.PK0IWNDX <= PK0IW01.PK0IWTRR
       && PK0IW01.PK0IWFL6 == "N")
        PK0I252();
      end
      if (PK0IW01.PK0IWFL6 == "Y")
        PK0IM010.PK0IMORD = PK0IW01.XHRABRV[PK0IWNDX];
      else
        PK0IM010.PK0IMORD = "UNKNWN";
      end
    else
      if (SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
        PK0IM010.PK0IMORR = " ";
        PK0IM010.PK0IMORD = " ";
        PK0IM010.PK0IMOMM = 0;
        PK0IM010.PK0IMODD = 0;
        PK0IM010.PK0IMOYY = 0;

        PK0IM010.PK0IMKUA = " ";
        PK0IM010.PK0IMKUR = " ";
        PK0IM010.PK0IMKUD = " ";
        PK0IM010.KUCCOID = 0;
        PK0IM010.KUMSTRID = 0;
        PK0IM010.XNXCD = 0;
        PK0IM010.PK0IMKMM = 0;
        PK0IM010.PK0IMKDD = 0;
        PK0IM010.PK0IMKYY = 0;

        PK0IM010.PK0IMCAA = " ";
        PK0IM010.PK0IMCAR = " ";
        PK0IM010.PK0IMCAD = " ";
        PK0IM010.TF1CARCD = 0;
        PK0IM010.PK0IMCMM = 0;
        PK0IM010.PK0IMCDD = 0;
        PK0IM010.PK0IMCYY = 0;

        set PK0IM010.PK0IMKUA protect;
        set PK0IM010.PK0IMKUR protect;
        set PK0IM010.KUCCOID protect;
        set PK0IM010.KUMSTRID protect;
        set PK0IM010.XNXCD protect;
        set PK0IM010.PK0IMKMM protect;
        set PK0IM010.PK0IMKDD protect;
        set PK0IM010.PK0IMKYY protect;

        set PK0IM010.PK0IMCAA protect;
        set PK0IM010.PK0IMCAR protect;
        set PK0IM010.TF1CARCD protect;
        set PK0IM010.PK0IMCMM protect;
        set PK0IM010.PK0IMCDD protect;
        set PK0IM010.PK0IMCYY protect;

        set PK0IM010.PK0IMORA protect;
        set PK0IM010.PK0IMORR protect;
        set PK0IM010.PK0IMOMM protect;
        set PK0IM010.PK0IMODD protect;
        set PK0IM010.PK0IMOYY protect;
         /* ----- clear screen line items*/
        PK0IW01.PK0IWNX3 = 10;
        while (PK0IW01.PK0IWNX3 >= 1)
          PK0I217();
        end
        set PK0IM010.PK0IMACT[1] cursor;
        set PKBREC empty;
        PKBREC.XWHCD = PKWREC.XWHCD;
        PKBREC.PK1CUOID = PK0IM010.PK1CUOID;
        PKBREC.PK1NORID = PK0IM010.PK1NORID;
        PKZREC.PKZFUNC = "S1";
        call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
        PK0IW01.PK0IWNX3 = 1;
        while (PK0IW01.PK0IWNX3 <= 10)
          PK0I138(); /* load order hold line items*/
        end
        PKZREC.PKZFUNC = "C1";
        call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes}; /* close set*/
        return;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(28); /* contention for data base resorce*/
          return;
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* no records found,*/
            PK0IW01.PK0IWFLD = "Y"; /* order had errors flag*/
            PK0IM010.PK0IMORR = " ";
            PK0IM010.PK0IMORD = " ";
            PK0IM010.PK0IMOMM = 0;
            PK0IM010.PK0IMODD = 0;
            PK0IM010.PK0IMOYY = 0;
            set PK0IM010.PK1CUOID cursor, modified, bold;
            set PK0IM010.PK1NORID modified, bold;
            converseLib.validationFailed(72);
            return; /* no need to load the map/ws*/
          else
            converseLib.validationFailed(29); /* fatal error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0I255 "; /* Process name*/
            TA1REC.TA1LOC = "SELECT UNIQUE            ";
            TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
            TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

            return;
          end
        end
      end
    end
  end




   /* ----- validate realease dates.*/

   /* ----- if order release date is entered*/
   /* ----- and it's older than todays date*/
   /* -----     it is an error*/
  if (PK0IM010.PK0IMORA != "R"
   && PK0IM010.PK0IMORA != " "
   && PK0IM010.PK0IMORA != "S"
   && PK0IM010.PK0IMORA != "V")
    if (PK0IM010.PK0IMOMM != 0
     || PK0IM010.PK0IMODD != 0)

  /* =========== Y2K OUT BEGIN ===========/**/

      /* OR PK0IM010.PK0IMOYY NE 0;*/
      /* MOVE EZEDTE TO PK0IWFDA;*/
      /* IF PK0IM010.PK0IMOYY LT PK0IW01.PK0IWFYY;*/
  /* =========== Y2K OUT END ===========/**/

        /* ====== Y2K IN BEGIN ======*/

      PK0IWFDT = VGVar.currentGregorianDate;

      PK0IW01.PK0IWRDD = PK0IM010.PK0IMODD;
      PK0IW01.PK0IWRMM = PK0IM010.PK0IMOMM;
      PK0IW01.PK0IWRYY = PK0IM010.PK0IMOYY;

      PK0IS10();
      /* SRADH1 CHANGE BEGINS*/
      /* compensate for the high values entered*/
      if (PK0IW01.PK0IWRDD == 99)
        PK0IW01.PK0IWRCC = 99;
      end
      /* SRADH1 CHANGE ENDS*/
      if (PK0IW01.PK0IWRDT < PK0IW01.PK0IWFDT)

        /* ====== Y2K IN END ======*/

        set PK0IM010.PK0IMOMM cursor, modified, bold;
        set PK0IM010.PK0IMODD modified, bold;
        set PK0IM010.PK0IMOYY modified, bold;
        PK0IW01.PK0IWFLC = "Y"; /* release date error flag*/
        converseLib.validationFailed(55);
      end
      if (PK0IM010.PK0IMOYY == PK0IW01.PK0IWFYY
       && PK0IM010.PK0IMOMM < PK0IW01.PK0IWFMM)
        set PK0IM010.PK0IMOMM cursor, modified, bold;
        set PK0IM010.PK0IMODD modified, bold;
        set PK0IM010.PK0IMOYY modified, bold;
        PK0IW01.PK0IWFLC = "Y"; /* release date error flag*/
        converseLib.validationFailed(55);
      end
      if (PK0IM010.PK0IMOYY == PK0IW01.PK0IWFYY
       && PK0IM010.PK0IMOMM == PK0IW01.PK0IWFMM
       && PK0IM010.PK0IMODD < PK0IW01.PK0IWFDD)
        set PK0IM010.PK0IMOMM cursor, modified, bold;
        set PK0IM010.PK0IMODD modified, bold;
        set PK0IM010.PK0IMOYY modified, bold;
        PK0IW01.PK0IWFLC = "Y"; /* release date error flag*/
        converseLib.validationFailed(55);
      end
    end
  end


   /* ----- if action is hold or change*/
   /* ----- and date is not entered*/
   /* -----     it is an error*/
  if (PK0IM010.PK0IMORA == "H"
   || PK0IM010.PK0IMORA == "C")

    /* ====== Y2K OUT BEGIN =====*/

    /* IF PK0IM010.PK0IMOYY EQ 0*/

    /* ====== Y2K OUT END =====*/

    if (PK0IM010.PK0IMOMM == 0
     && PK0IM010.PK0IMODD == 0)
      set PK0IM010.PK0IMOMM cursor, modified, bold;
      set PK0IM010.PK0IMODD modified, bold;
      set PK0IM010.PK0IMOYY modified, bold;
      PK0IW01.PK0IWFLC = "Y"; /* release date error flag*/
      converseLib.validationFailed(66);
    end
  end







   /* ----- if order release date is entered*/
   /* ----- and it's not all 9's*/
   /* -----     check to see if falls on a working day*/
  if (PK0IM010.PK0IMORA != "R"
   && PK0IM010.PK0IMORA != " "
   && PK0IM010.PK0IMORA != "S"
   && PK0IM010.PK0IMORA != "V")
    if (PK0IM010.PK0IMOMM != 0
     || PK0IM010.PK0IMODD != 0)

      /* ===== Y2K OUT BEGIN =====*/

      /* OR PK0IM010.PK0IMOYY NE 0;*/

      /* ===== Y2K OUT END =====*/

      if (PK0IM010.PK0IMOMM != 99
       || PK0IM010.PK0IMODD != 99)

        /* ===== Y2K OUT BEGIN =====*/

        /* OR PK0IM010.PK0IMOYY NE 99;*/

        /* ===== Y2K OUT BEGIN =====*/

        set TA9REC empty;
        TA9REC.TA9BEGMM = PK0IM010.PK0IMOMM;
        TA9REC.TA9BEGDD = PK0IM010.PK0IMODD;
        TA9REC.TA9BEGYY = PK0IM010.PK0IMOYY;

  /* --------------------- Y2K IN BEGIN -----------/**/
        if (TA9REC.TA9BEGYY < 60)
          TA9REC.TA9BEGCC = 20;
        else
          TA9REC.TA9BEGCC = 19;
        end
  /* --------------------- Y2K IN END -------------/**/

        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* move to nearest working day*/
        if (TA9REC.TA9RTNFL == 0) /* good return code*/
           /* next sentence*/
        else
          set PK0IM010.PK0IMOMM cursor, modified, bold;
          set PK0IM010.PK0IMODD modified, bold;
          set PK0IM010.PK0IMOYY modified, bold;
          PK0IW01.PK0IWFLC = "Y"; /* release date error flag*/
          converseLib.validationFailed(56);
        end
      end
    end
  end







   /* ----- validate reason code*/


  if (PK0IM010.PK0IMORA != "R"
   && PK0IM010.PK0IMORA != " "
   && PK0IM010.PK0IMORA != "S"
   && PK0IM010.PK0IMORA != "V")
    PK0IW01.PK0IWRSN = PK0IM010.PK0IMORR;
    PK0IW01.PK0IWNDX = 1;
    PK0IW01.PK0IWFL6 = "N";
    while (PK0IW01.PK0IWNDX <= PK0IW01.PK0IWTRR
     && PK0IW01.PK0IWFL6 == "N")
      PK0I252();
    end

    if (PK0IW01.PK0IWFL6 == "N")
      set PK0IM010.PK0IMORR cursor, modified, bold;
      PK0IW01.PK0IWFLB = "Y"; /* reason code error flag*/
      converseLib.validationFailed(57);
    else
      PK0IM010.PK0IMORD = PK0IW01.XHRABRV[PK0IWNDX];
    end
  end





   /* ----- if action is hold, change or release*/
   /* ----- and reason code is not entered*/
   /* -----     it is an error*/
  if (PK0IM010.PK0IMORA == "H"
   || PK0IM010.PK0IMORA == "C"
   || PK0IM010.PK0IMORA == "R")
    if (PK0IM010.PK0IMORR == " ")
      set PK0IM010.PK0IMORR cursor, modified, bold;
      PK0IW01.PK0IWFLB = "Y"; /* reason code error flag*/
      converseLib.validationFailed(67);
    end
  end








   /* ----- for holds*/
   /* -----     check for duplicates*/
  if (PK0IM010.PK0IMORA == "H")
    set PKBREC empty;
    PKBREC.XHRCD = PK0IM010.PK0IMORR;
    PK0I256();
    if (SQLCA.VAGen_SQLCODE != 100)
      set PK0IM010.PK0IMORR modified, bold;
      PK0IW01.PK0IWFLB = "Y";
    end
  end










   /* ----- for holds*/
   /* -----     check maximum reason limit*/
  if (PK0IM010.PK0IMORA == "H")
    set PKBREC empty;
    PKBREC.XHRCD = "*";
    PKBREC.XWHCD = PKWREC.XWHCD;
    PKBREC.PK1CUOID = PK0IM010.PK1CUOID;
    PKBREC.PK1NORID = PK0IM010.PK1NORID;
    PKZREC.PKZFUNC = "CT";
    call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes}; /* select count on order*/
    if (SQLCA.VAGen_SQLCODE == 0
     && PKZREC.PKZSUM1 > 9)
      converseLib.validationFailed(74);
      PK0IW01.PK0IWFLD = "Y"; /* order had errors flag*/
      set PK0IM010.PK1CUOID cursor, bold;
      set PK0IM010.PK1NORID bold;
    else
      if (SQLCA.VAGen_SQLCODE == 0)
        /* next sentence*/
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          PK0IW01.PK0IWFLD = "Y"; /* order had errors flag*/
          converseLib.validationFailed(28); /* contention for data base resorce*/
          return;
        else
          PK0IW01.PK0IWFLD = "Y"; /* order had errors flag*/
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0I255 "; /* Process name*/
          TA1REC.TA1LOC = "SELECT COUNT      ";
          TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

          return;
        end
      end
    end
  end











   /* ----- validate action field*/


  if (PK0IM010.PK0IMORA == " "
   || PK0IM010.PK0IMORA == "V"
   || PK0IM010.PK0IMORA == "S"
   || PK0IM010.PK0IMORA == "H"
   || PK0IM010.PK0IMORA == "R"
   || PK0IM010.PK0IMORA == "C")
     /* next sentence*/
  else
    set PK0IM010.PK0IMORA cursor, modified, bold;
    PK0IW01.PK0IWFLA = "Y"; /* action field error flag*/
    converseLib.validationFailed(35);
  end






   /* ----- if action field is 's'*/
   /* -----     set selection for inquiry flag to 'y'*/
  if (PK0IM010.PK0IMORA == "S")
    PK0IW01.PK0IWFL5 = "Y";
  end





   /* ----- reset fields*/
  if (PK0IW01.PK0IWFLB == "N")
    set PK0IM010.PK0IMORR normal;
  end

  if (PK0IW01.PK0IWFLA == "N")
    set PK0IM010.PK0IMORA normal;
  end

  if (PK0IW01.PK0IWFLC == "N")
    set PK0IM010.PK0IMOMM normal;
    set PK0IM010.PK0IMODD normal;
    set PK0IM010.PK0IMOYY normal;
  end

  if (PK0IW01.PK0IWFLD == "N")
    set PK0IM010.PK1CUOID normal;
    set PK0IM010.PK1NORID normal;
  end





   /* ----- end pk0i255*/
end // end PK0I255

// check for duplicate, order hld
Function PK0I256()

   /* ----- pk0i256*/
   /* ----- check for duplicates - order hold table*/


  PK0IM010.XXXERRID = "PK0I256";



  PKBREC.XWHCD = PKWREC.XWHCD;
  PKBREC.PK1CUOID = PK0IM010.PK1CUOID;
  PKBREC.PK1NORID = PK0IM010.PK1NORID;




  PKZREC.PKZFUNC = "S ";
  call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes}; /* select unique on order*/
                                 /* and reason code*/
  if (SQLCA.VAGen_SQLCODE == 0 /* 1 row was found*/
   || SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
    converseLib.validationFailed(44);
    PK0IW01.PK0IWFLD = "Y"; /* order had errors flag*/
    set PK0IM010.PK1CUOID cursor, bold;
    set PK0IM010.PK1NORID bold;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      PK0IW01.PK0IWFLD = "Y"; /* order had errors flag*/
      converseLib.validationFailed(21); /* contention for data base resorce*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* no records found, good*/
        /* next sentence*/
      else
        PK0IW01.PK0IWFLD = "Y"; /* order had errors flag*/
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I256 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT UNIQUE     ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        return;
      end
    end
  end








   /* ----- end pk0i256*/
end // end PK0I256

// validate header - customer
Function PK0I257()
   /* ----- pk0i257*/
   /* -----*/
   /* ----- validate header - customer data*/


  PK0IM010.XXXERRID = "PK0I257";




   /* ----- initialize field error flags*/
  PK0IW01.PK0IWFLA = "N"; /* action field error flag*/
  PK0IW01.PK0IWFLB = "N"; /* reason code error flag*/
  PK0IW01.PK0IWFLC = "N"; /* release date error flag*/
  PK0IW01.PK0IWFL9 = "N"; /* customer error flag*/






   /* ----- validate customer - get customer name*/
  PK0I135();
  if (SQLCA.VAGen_SQLCODE != 0)
    return;
  end






   /* ----- if action field is ' '*/
   /* -----     if only 1 reason exixts*/
   /* -----         get reason description*/
   /* -----     else*/
   /* -----          load line items*/
  if (PK0IM010.PK0IMKUA == " ")
    set PK9REC empty;
    PK9REC.XWHCD = PKWREC.XWHCD;
    PK9REC.KUCCOID = PK0IM010.KUCCOID;
    PK9REC.KUMSTRID = PK0IM010.KUMSTRID;
    PK9REC.XNXCD = PK0IM010.XNXCD;
    PK9REC.XHRCD = "*";
    PKZREC.PKZFUNC = "S ";
    call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
                                   /* sel unique on customer*/
                                  /* hold table using wildcard '*'*/
                                  /* for reason code*/
    if (SQLCA.VAGen_SQLCODE == 0) /* 1 row was found*/
      PK0IW01.PK0IWFDT = PK9REC.PK9RELDT;
      PK0IM010.PK0IMKYY = PK0IW01.PK0IWFYY;
      PK0IM010.PK0IMKMM = PK0IW01.PK0IWFMM;
      PK0IM010.PK0IMKDD = PK0IW01.PK0IWFDD;
      PK0IM010.PK0IMKUR = PK9REC.XHRCD;
      set PK0IM010.PK0IMKUA cursor;
       /* ----- clear screen line items*/
      PK0IW01.PK0IWNX3 = 10;
      while (PK0IW01.PK0IWNX3 >= 1)
        PK0I217();
      end
      PK0IW01.PK0IWRSN = PK9REC.XHRCD;
      PK0IW01.PK0IWNDX = 1;
      PK0IW01.PK0IWFL6 = "N";
      while (PK0IW01.PK0IWNDX <= PK0IW01.PK0IWTRR
       && PK0IW01.PK0IWFL6 == "N")
        PK0I252();
      end
      if (PK0IW01.PK0IWFL6 == "Y")
        PK0IM010.PK0IMKUD = PK0IW01.XHRABRV[PK0IWNDX];
      else
        PK0IM010.PK0IMKUD = "UNKNWN";
      end
    else
      if (SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
        PK0IM010.PK0IMKUR = " ";
        PK0IM010.PK0IMKUD = " ";
        PK0IM010.PK0IMKMM = 0;
        PK0IM010.PK0IMKDD = 0;
        PK0IM010.PK0IMKYY = 0;

        PK0IM010.PK0IMORA = " ";
        PK0IM010.PK0IMORR = " ";
        PK0IM010.PK0IMORD = " ";
        PK0IM010.PK1CUOID = 0;
        PK0IM010.PK1NORID = 0;
        PK0IM010.PK0IMOMM = 0;
        PK0IM010.PK0IMODD = 0;
        PK0IM010.PK0IMOYY = 0;

        PK0IM010.PK0IMCAA = " ";
        PK0IM010.PK0IMCAR = " ";
        PK0IM010.PK0IMCAD = " ";
        PK0IM010.TF1CARCD = 0;
        PK0IM010.PK0IMCMM = 0;
        PK0IM010.PK0IMCDD = 0;
        PK0IM010.PK0IMCYY = 0;

        set PK0IM010.PK0IMORA protect;
        set PK0IM010.PK0IMORR protect;
        set PK0IM010.PK1CUOID protect;
        set PK0IM010.PK1NORID protect;
        set PK0IM010.PK0IMOMM protect;
        set PK0IM010.PK0IMODD protect;
        set PK0IM010.PK0IMOYY protect;

        set PK0IM010.PK0IMCAA protect;
        set PK0IM010.PK0IMCAR protect;
        set PK0IM010.TF1CARCD protect;
        set PK0IM010.PK0IMCMM protect;
        set PK0IM010.PK0IMCDD protect;
        set PK0IM010.PK0IMCYY protect;

        set PK0IM010.PK0IMKUA protect;
        set PK0IM010.PK0IMKUR protect;
        set PK0IM010.PK0IMKMM protect;
        set PK0IM010.PK0IMKDD protect;
        set PK0IM010.PK0IMKYY protect;
         /* ----- clear screen line items*/
        PK0IW01.PK0IWNX3 = 10;
        while (PK0IW01.PK0IWNX3 >= 1)
          PK0I217();
        end
        set PK0IM010.PK0IMACT[1] cursor;
        set PK9REC empty;
        PK9REC.XWHCD = PKWREC.XWHCD;
        PK9REC.KUCCOID = PK0IM010.KUCCOID;
        PK9REC.KUMSTRID = PK0IM010.KUMSTRID;
        PK9REC.XNXCD = PK0IM010.XNXCD;
        PKZREC.PKZFUNC = "S1";
        call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
        PK0IW01.PK0IWNX3 = 1;
        while (PK0IW01.PK0IWNX3 <= 10)
          PK0I137(); /* load customer hold line items*/
        end
        PKZREC.PKZFUNC = "C1";
        call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes}; /* close set*/
        return;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(28); /* contention for data base resorce*/
          return;
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* no records found,*/
            PK0IW01.PK0IWFL9 = "Y";
            PK0IM010.PK0IMKMM = 0;
            PK0IM010.PK0IMKDD = 0;
            PK0IM010.PK0IMKYY = 0;
            PK0IM010.PK0IMKUD = " ";
            PK0IM010.PK0IMKUR = " ";
            set PK0IM010.KUCCOID cursor, modified, bold;
            set PK0IM010.KUMSTRID modified, bold;
            set PK0IM010.XNXCD modified, bold;
            converseLib.validationFailed(71);
            return; /* no need to load the map/ws*/
          else
            converseLib.validationFailed(29); /* fatal error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0I257 "; /* Process name*/
            TA1REC.TA1LOC = "SELECT UNIQUE            ";
            TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
            TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

            return;
          end
        end
      end
    end
  end




   /* ----- validate realease dates.*/

   /* ----- if customer release date is entered*/
   /* ----- and it's older than todays date*/
   /* -----     it is an error*/
  if (PK0IM010.PK0IMKUA != "R"
   && PK0IM010.PK0IMKUA != " "
   && PK0IM010.PK0IMKUA != "S"
   && PK0IM010.PK0IMKUA != "V")
    if (PK0IM010.PK0IMKMM != 0
     || PK0IM010.PK0IMKDD != 0)

        /* ====== Y2K OUT BEGIN ======*/

      /* OR PK0IM010.PK0IMKYY NE 0;*/

      /* MOVE EZEDTE TO PK0IWFDA;*/
      /* IF PK0IM010.PK0IMKYY LT PK0IW01.PK0IWFYY;*/

        /* ====== Y2K OUT END ======*/


        /* ====== Y2K IN BEGIN ======*/

      PK0IWFDT = VGVar.currentGregorianDate;

      PK0IW01.PK0IWRDD = PK0IM010.PK0IMKDD;
      PK0IW01.PK0IWRMM = PK0IM010.PK0IMKMM;
      PK0IW01.PK0IWRYY = PK0IM010.PK0IMKYY;

      PK0IS10();

      /* SRADH1 CHANGES BEGIN*/
      /* compensate for the high values entered*/
      if (PK0IW01.PK0IWRDD == 99)
        PK0IW01.PK0IWRCC = 99;
      end
      /* SRADH1 CHANGES END*/
      if (PK0IW01.PK0IWRDT < PK0IW01.PK0IWFDT)

        /* ====== Y2K IN END ======*/

        set PK0IM010.PK0IMKMM cursor, modified, bold;
        set PK0IM010.PK0IMKDD modified, bold;
        set PK0IM010.PK0IMKYY modified, bold;
        PK0IW01.PK0IWFLC = "Y"; /* release date error flag*/
        converseLib.validationFailed(55);
      end
      if (PK0IM010.PK0IMKYY == PK0IW01.PK0IWFYY
       && PK0IM010.PK0IMKMM < PK0IW01.PK0IWFMM)
        set PK0IM010.PK0IMKMM cursor, modified, bold;
        set PK0IM010.PK0IMKDD modified, bold;
        set PK0IM010.PK0IMKYY modified, bold;
        PK0IW01.PK0IWFLC = "Y"; /* release date error flag*/
        converseLib.validationFailed(55);
      end
      if (PK0IM010.PK0IMKYY == PK0IW01.PK0IWFYY
       && PK0IM010.PK0IMKMM == PK0IW01.PK0IWFMM
       && PK0IM010.PK0IMKDD < PK0IW01.PK0IWFDD)
        set PK0IM010.PK0IMKMM cursor, modified, bold;
        set PK0IM010.PK0IMKDD modified, bold;
        set PK0IM010.PK0IMKYY modified, bold;
        PK0IW01.PK0IWFLC = "Y"; /* release date error flag*/
        converseLib.validationFailed(55);
      end
    end
  end


   /* ----- if action is hold or change*/
   /* ----- and date is not entered*/
   /* -----     it is an error*/
  if (PK0IM010.PK0IMKUA == "H"
   || PK0IM010.PK0IMKUA == "C")

    /* ====== Y2K OUT BEGIN =====*/

    /* IF PK0IM010.PK0IMKYY EQ 0*/

    /* ====== Y2K OUT END =====*/


    if (PK0IM010.PK0IMKMM == 0
     && PK0IM010.PK0IMKDD == 0)
      set PK0IM010.PK0IMKMM cursor, modified, bold;
      set PK0IM010.PK0IMKDD modified, bold;
      set PK0IM010.PK0IMKYY modified, bold;
      PK0IW01.PK0IWFLC = "Y"; /* release date error flag*/
      converseLib.validationFailed(66);
    end
  end







   /* ----- if customer release date is entered*/
   /* ----- and it's not all 9's*/
   /* -----     check to see if falls on a working day*/
  if (PK0IM010.PK0IMKUA != "R"
   && PK0IM010.PK0IMKUA != " "
   && PK0IM010.PK0IMKUA != "S"
   && PK0IM010.PK0IMKUA != "V")
    if (PK0IM010.PK0IMKMM != 0
     || PK0IM010.PK0IMKDD != 0)

   /* ==== Y2K OUT BEGIN =====*/

     /* OR PK0IM010.PK0IMKYY NE 0;*/

   /* ===== Y2K OUT END  =====*/

      if (PK0IM010.PK0IMKMM != 99
       || PK0IM010.PK0IMKDD != 99
       || PK0IM010.PK0IMKYY != 99)
        set TA9REC empty;
        TA9REC.TA9BEGMM = PK0IM010.PK0IMKMM;
        TA9REC.TA9BEGDD = PK0IM010.PK0IMKDD;
        TA9REC.TA9BEGYY = PK0IM010.PK0IMKYY;

        /* ========= Y2K IN BEGIN ==========*/
        if (TA9REC.TA9BEGYY < 60)
          TA9REC.TA9BEGCC = 20;
        else
          TA9REC.TA9BEGCC = 19;
        end
        /* ========= Y2K IN BEGIN ==========*/

        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* move to nearest working day*/
        if (TA9REC.TA9RTNFL == 0) /* good return code*/
           /* next sentence*/
        else
          set PK0IM010.PK0IMKMM cursor, modified, bold;
          set PK0IM010.PK0IMKDD modified, bold;
          set PK0IM010.PK0IMKYY modified, bold;
          PK0IW01.PK0IWFLC = "Y"; /* release date error flag*/
          converseLib.validationFailed(56);
        end
      end
    end
  end







   /* ----- validate reason code*/


  if (PK0IM010.PK0IMKUA != "R"
   && PK0IM010.PK0IMKUA != " "
   && PK0IM010.PK0IMKUA != "S"
   && PK0IM010.PK0IMKUA != "V")
    PK0IW01.PK0IWRSN = PK0IM010.PK0IMKUR;
    PK0IW01.PK0IWNDX = 1;
    PK0IW01.PK0IWFL6 = "N";
    while (PK0IW01.PK0IWNDX <= PK0IW01.PK0IWTRR
     && PK0IW01.PK0IWFL6 == "N")
      PK0I252();
    end

    if (PK0IW01.PK0IWFL6 == "N")
      set PK0IM010.PK0IMKUR cursor, modified, bold;
      PK0IW01.PK0IWFLB = "Y"; /* reason code error flag*/
      converseLib.validationFailed(57);
    else
      PK0IM010.PK0IMKUD = PK0IW01.XHRABRV[PK0IWNDX];
    end
  end





   /* ----- if action is hold, change or release*/
   /* ----- and reason code is not entered*/
   /* -----     it is an error*/
  if (PK0IM010.PK0IMKUA == "H"
   || PK0IM010.PK0IMKUA == "C"
   || PK0IM010.PK0IMKUA == "R")
    if (PK0IM010.PK0IMKUR == " ")
      set PK0IM010.PK0IMKUR cursor, modified, bold;
      PK0IW01.PK0IWFLB = "Y"; /* reason code error flag*/
      converseLib.validationFailed(67);
    end
  end






   /* ----- for holds*/
   /* -----     check for duplicates*/
  if (PK0IM010.PK0IMKUA == "H")
    set PK9REC empty;
    PK9REC.XHRCD = PK0IM010.PK0IMKUR;
    PK0I259();
    if (SQLCA.VAGen_SQLCODE != 100)
      set PK0IM010.PK0IMKUR modified, bold;
      PK0IW01.PK0IWFLB = "Y";
    end
  end








   /* ----- for holds*/
   /* -----     check if reason limit is exceeded*/
  if (PK0IM010.PK0IMKUA == "H")
    set PK9REC empty;
    PK9REC.XHRCD = "*";
    PK9REC.XWHCD = PKWREC.XWHCD;
    PK9REC.KUCCOID = PK0IM010.KUCCOID;
    PK9REC.KUMSTRID = PK0IM010.KUMSTRID;
    PK9REC.XNXCD = PK0IM010.XNXCD;
    PK9REC.XGPCD = "00";
    PKZREC.PKZFUNC = "CT";
    call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
                                   /* sel Unique on customer*/
                                  /* and reason code*/
    if (SQLCA.VAGen_SQLCODE == 0
     && PKZREC.PKZSUM1 > 9)
      converseLib.validationFailed(73);
      PK0IW01.PK0IWFL9 = "Y"; /* customer had errors flag*/
      set PK0IM010.KUCCOID cursor, bold;
      set PK0IM010.KUMSTRID bold;
      set PK0IM010.XNXCD bold;
    else
      if (SQLCA.VAGen_SQLCODE == 0)
        /* next sentence*/
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          PK0IW01.PK0IWFL9 = "Y"; /* customer had errors flag*/
          converseLib.validationFailed(28); /* contention for data base resorce*/
          return;
        else
          PK0IW01.PK0IWFL9 = "Y"; /* customer had errors flag*/
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0I257 "; /* Process name*/
          TA1REC.TA1LOC = "SELECT COUNT      ";
          TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

          return;
        end
      end
    end
  end







   /* ----- validate action field*/


  if (PK0IM010.PK0IMKUA == " "
   || PK0IM010.PK0IMKUA == "V"
   || PK0IM010.PK0IMKUA == "S"
   || PK0IM010.PK0IMKUA == "H"
   || PK0IM010.PK0IMKUA == "R"
   || PK0IM010.PK0IMKUA == "C")
     /* next sentence*/
  else
    set PK0IM010.PK0IMKUA cursor, modified, bold;
    PK0IW01.PK0IWFLA = "Y"; /* action field error flag*/
    converseLib.validationFailed(35);
  end






   /* ----- if action field is 's'*/
   /* -----     set selection for inquiry flag to 'y'*/
  if (PK0IM010.PK0IMKUA == "S")
    PK0IW01.PK0IWFL5 = "Y";
  end





   /* ----- reset fields*/
  if (PK0IW01.PK0IWFLB == "N")
    set PK0IM010.PK0IMKUR normal;
  end

  if (PK0IW01.PK0IWFLA == "N")
    set PK0IM010.PK0IMKUA normal;
  end

  if (PK0IW01.PK0IWFLC == "N")
    set PK0IM010.PK0IMKMM normal;
    set PK0IM010.PK0IMKDD normal;
    set PK0IM010.PK0IMKYY normal;
  end

  if (PK0IW01.PK0IWFL9 == "N")
    set PK0IM010.KUCCOID normal;
    set PK0IM010.KUMSTRID normal;
    set PK0IM010.XNXCD normal;
  end



   /* ----- end pk0i257*/
end // end PK0I257

// check duplicate carrier holds
Function PK0I258()

   /* ----- pk0i258*/
   /* ----- check for duplicates - carrier hold table*/


  PK0IM010.XXXERRID = "PK0I258";



  PWFREC.XWHCD = PKWREC.XWHCD;
  PWFREC.TF1CARCD = PK0IM010.TF1CARCD;




  PKZREC.PKZFUNC = "S ";
  call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes}; /* select unique carrier*/
                                 /* and reason code*/
  if (SQLCA.VAGen_SQLCODE == 0 /* 1 row was found*/
   || SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
    converseLib.validationFailed(44);
    PK0IW01.PK0IWFLE = "Y"; /* carrier had errors flag*/
    set PK0IM010.TF1CARCD cursor, bold;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      PK0IW01.PK0IWFLE = "Y"; /* carrier had errors flag*/
      converseLib.validationFailed(28); /* contention for data base resorce*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* no records found, good*/
        /* next sentence*/
      else
        PK0IW01.PK0IWFLE = "Y"; /* carrier had errors flag*/
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I258 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT UNIQUE     ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        return;
      end
    end
  end








   /* ----- end pk0i258*/
end // end PK0I258

// check for duplicates
Function PK0I259()

   /* ----- pk0i259*/
   /* ----- check for duplicates - customer hold table*/


  PK0IM010.XXXERRID = "PK0I259";



  PK9REC.XWHCD = PKWREC.XWHCD;
  PK9REC.KUCCOID = PK0IM010.KUCCOID;
  PK9REC.KUMSTRID = PK0IM010.KUMSTRID;
  PK9REC.XNXCD = PK0IM010.XNXCD;
  PK9REC.XGPCD = "00";



  if (PK0IM010.XBCCD == "08") /* if cole-haan customer*/
    PK9REC.KUCCOID = XP0FW01-INTERNAL; /* use cole-haan nbr*/
  end




  PKZREC.PKZFUNC = "S ";
  call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
                                   /* select unique on customer*/
                                 /* and reason code*/
  if (SQLCA.VAGen_SQLCODE == 0 /* 1 row was found*/
   || SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
    converseLib.validationFailed(44);
    PK0IW01.PK0IWFL9 = "Y"; /* customer had errors flag*/
    set PK0IM010.KUCCOID cursor, bold;
    set PK0IM010.KUMSTRID bold;
    set PK0IM010.XNXCD bold;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      PK0IW01.PK0IWFL9 = "Y"; /* customer had errors flag*/
      converseLib.validationFailed(21); /* contention for data base resorce*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* no records found, good*/
        /* next sentence*/
      else
        PK0IW01.PK0IWFL9 = "Y"; /* customer had errors flag*/
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I259 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT UNIQUE     ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        return;
      end
    end
  end








   /* ----- end pk0i259*/
end // end PK0I259

// main process
Function PK0I300()






   /* ----- if table overflow*/
   /* -----     go back to main menu.*/
  if (PK0IW01.PK0IWFL4 == "Y")
    set PKWREC empty;
    PKWREC.XWHCD = PK0IM010.XWHCD;
    PKWREC.XWHABRV = PK0IM010.XWHABRV;
    COMMAREA.CATOAP = "PK0A";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to pick master menu*/
    PK0IM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  end






   /* ---------------  if warehouse is not modified         ------*/
   /* ---------------      check pf keys                    ------*/
  if (PK0IM010.XWHCD is modified)
    /* next sentence*/
  else
    PK0I210();
  end

   /* ---------------  if error condition occured*/
   /* ---------------      get out.  the screen will be     ------*/
   /* ---------------      conversed again.                 ------*/
  if (converseVar.validationMsgNum != 0)
    return;
  end





   /* ---------------  if warehouse has been modified*/
   /* ---------------  and security allows warehouse changes*/
   /* ---------------      get warehouse abbreviation*/
   /* ---------------      and reload map and working storage*/
   /* ---------------      with new set of records*/
  if (PK0IM010.XWHCD is modified)
     /* AND COMMAREA.CACLVL(1) EQ 'Y';*/
    PKWREC.XWHCD = PK0IM010.XWHCD;
     /* ----- clear screen line items*/
    PK0IW01.PK0IWNX3 = 10;
    while (PK0IW01.PK0IWNX3 >= 1)
      PK0I217();
    end
    PK0I110(); /* change warehouses*/
  end

   /* ---------------  if warehouse could not be resolved   ------*/
   /* ---------------      get out.  the screen will be     ------*/
   /* ---------------      conversed again.                 ------*/
  if (PK0IW01.PK0IWFL3 == "N")
    converseLib.validationFailed(2);
    set PK0IM010.XWHCD cursor, bold;
    return;
  else
    if (PK0IM010.XWHCD is modified)
      set PK0IM010.XWHCD normal;
      set PK0IM010.PK0IMKUA cursor;
    end
  end


  PK0I220(); /* pop-up window*/

   /* ----- edit user input fields*/
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
    PK0I250();
  end







   /* ----- if no errors have occured*/
   /* ----- and selection for inquiry was requested*/
   /* ----- and warehouse was not modified*/
   /* -----     transfer to the appropriate inquiry application*/
  if (converseVar.validationMsgNum == 0
   && PK0IW01.PK0IWFL5 == "Y"
   && PK0IM010.XWHCD not modified)
    PK0I400();
  end






   /* ----- if no errors have occured*/
   /* ----- and edit only flag is no*/
   /* -----     perform update of the hold tables*/
  if (converseVar.validationMsgNum == 0
   && converseVar.eventKey is enter)
    PK0I500();
  end


  /* check cust & brand code*/
  /* for Cole-Haan*/
  if (PK0IW01.PK0IWFL7 == "C"
   || PK0IW01.PK0IWFL7 == "R")
    PK0I310();
  end


   /* ------------------- end pk0i200 -------------------------*/


end // end PK0I300

// verify brand cd for cust & car
Function PK0I310()
   /* ------------------------------------------------------------*/
   /* If an order was entered, retrieve the brand code from the*/
   /* pool header and display it. If customer entered, display*/
   /* brand from vcuhld01.*/
   /* ------------------------------------------------------------*/

  if (PK0IW01.PK0IWFL7 == "C") /* if customer option*/

    if (XP0FW01-INTERNAL == PK0IM010.KUCCOID /* if converted cole-Haan*/
     || XP0FW01-EXTERNAL == PK0IM010.KUCCOID) /**/

      if (XP0FW01.XP0FW01-INTERNAL > 7999999 /* if Cole-Haan cust nbr*/
       && XP0FW01.XP0FW01-INTERNAL < 9000000)

        PK0IM010.KUCCOID = XP0FW01-INTERNAL - 8000000; /* move ordinary*/
                                   /* number to screen*/
        if (PK0IM010.XBCCD != "08") /**/
          PK0IM010.XBCCD = "08"; /* move 08 to brand code*/
          if (converseVar.validationMsgNum == 0) /* don't write over another msg*/
            converseLib.validationFailed(425); /* 'all 80xxxxx cust nbrs are*/
                                   /* Cole-Haan customers*/
            PK0IM010.XXXERRID = "PK0I310 ";
          end
          set XP0FW01 empty; /* clear Cole-Hann coversion rec*/
          return; /* get out*/
        end
      end
    end

  end



  if (PK0IW01.PK0IWFL7 == "C") /* if customer option*/

    if (PK0IM010.XBCCD != " ") /* screen has brand code*/

      if (PK9REC.XBCCD != " " /* cust hold table has brand code*/
       && PK9REC.XBCCD != PK0IM010.XBCCD
       /* if they don't match*/
       && PK9REC.KUCCOID == PK0IM010.KUCCOID) /* is the pool rec current?*/

        PK0IM010.XBCCD = PK9REC.XBCCD; /* move pk9 brand to map*/
        if (converseVar.validationMsgNum == 0) /* don't write over another msg*/
          converseLib.validationFailed(423); /* display msg brand override*/
          PK0IM010.XXXERRID = "PK0I310 ";
        end

      end

    else
      if (PK9REC.KUCCOID == PK0IM010.KUCCOID) /* cust hld rec current*/

        PK0IM010.XBCCD = PK9REC.XBCCD; /* move cust brand to map*/

      end

    end
    set XP0FW01 empty; /* clear Cole-Hann coversion rec*/
    return; /* get out*/
  end



  if (PK0IW01.PK0IWFL7 == "R") /* carrier being processed*/
    if (PK0IM010.XBCCD != " ") /* brand code not spaces*/
      PK0IM010.XBCCD = " "; /* move spaces to map*/
      if (converseVar.validationMsgNum == 0) /* don't write over another msg*/
        PK0IM010.XXXERRID = "PK0I310 ";
        converseLib.validationFailed(424); /* 'brand code n/a with*/
      end /**/
    end /* carrier option'*/
    set XP0FW01 empty; /* clear Cole-Hann coversion rec*/
    return; /* get out*/
  end



  if (PK0IW01.PK0IWFL7 == "O") /* if order option*/

    if (PK0IM010.XBCCD != " ") /* screen has brand code*/

      if (PK4REC.XBCCD != " "            /* pool rec has brand*/
       && PK4REC.XBCCD != PK0IM010.XBCCD /* which doesn't match scrn*/
       && PK4REC.PK1CUOID == PK0IM010.PK1CUOID)
                                   /* is the pool rec current*/
        PK0IM010.XBCCD = PK4REC.XBCCD; /* move pk4 brand to map*/
        if (converseVar.validationMsgNum == 0) /* if no other msgs*/
          converseLib.validationFailed(423); /* display msg brand override*/
          PK0IM010.XXXERRID = "PK0I310 ";
        end
      end

    else /* screen has no brand code*/

      if (PK4REC.PK1CUOID == PK0IM010.PK1CUOID)
                                   /* is the pool rec current*/

        PK0IM010.XBCCD = PK4REC.XBCCD; /* move pool brand to map*/

      end
    end
  end

  set XP0FW01 empty; /* clear Cole-Hann coversion rec*/


   /* ----- end pk0i310*/
end // end PK0I310

// transfer to inquiry
Function PK0I400()
   /* -----  pk0i400*/
   /* -----  transfer to appropriate inquiry application*/






  PKWREC.PKWINDEX = PKWREC.PKWINDEX + 1;


   /* -----   if customer inquiry was selected*/
   /* -----      load customer into pkwrec*/
   /* -----      set the inquiry selection type to 'c' for cust.*/
   /* -----      transfer control to pk0d - customer inquiry*/
  if (PK0IW01.PK0IWFL7 == "C")
    set PKXREC empty;
    PKXREC.KUCCOID[1] = PK0IM010.KUCCOID;
    PKXREC.KUMSTRID[1] = PK0IM010.KUMSTRID;
    PKXREC.XNXCD[1] = PK0IM010.XNXCD;
    PKXREC.PKXKUACT[1] = "S";
    PKXREC.XWHCD = PKWREC.XWHCD;
    PKXREC.XWHABRV = PKWREC.XWHABRV;
    PKWREC.PKWARRAY[PKWINDEX] = PKXREC.PKWARRAY;
    PKWREC.PKWFRMAP[PKWINDEX] = COMMAREA.CACURRAP;
    PKWREC.PKWSLTYP[PKWINDEX] = "C";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    COMMAREA.CATOAP = "PK0D";
    XSEXIT();
    PK0IM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end






   /* -----   if order inquiry was selected*/
   /* -----      load order number into pkwrec*/
   /* -----      set the inquiry selection type to 'o' for order.*/
   /* -----      transfer control to pk0b - order inquiry*/
  if (PK0IW01.PK0IWFL7 == "O")
    set PKYREC empty;
    PKYREC.PK1CUOID[1] = PK0IM010.PK1CUOID;
    PKYREC.PK1NORID[1] = PK0IM010.PK1NORID;
    PKYREC.PKYORACT[1] = "S";
    PKYREC.XWHCD = PKWREC.XWHCD;
    PKYREC.XWHABRV = PKWREC.XWHABRV;
    PKWREC.PKWARRAY[PKWINDEX] = PKYREC.PKWARRAY;
    PKWREC.PKWFRMAP[PKWINDEX] = COMMAREA.CACURRAP;
    PKWREC.PKWSLTYP[PKWINDEX] = "O";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    COMMAREA.CATOAP = "PK0B";
    XSEXIT();
    PK0IM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end






   /* -----   if carrier inquiry was selected*/
   /* -----      load carrier code into pkwrec*/
   /* -----      set the inquiry selection type to 'o' for carrier*/
   /* -----      transfer control to tf0e - carrier inquiry*/
  if (PK0IW01.PK0IWFL7 == "R")
    set PWGREC empty;
    PWGREC.TF1CARCD[1] = PK0IM010.TF1CARCD;
    PWGREC.PWGCAACT[1] = "S";
    PWGREC.XWHCD = PKWREC.XWHCD;
    PWGREC.XWHABRV = PKWREC.XWHABRV;
    PKWREC.PKWARRAY[PKWINDEX] = PWGREC.PKWARRAY;
    PKWREC.PKWFRMAP[PKWINDEX] = COMMAREA.CACURRAP;
    PKWREC.PKWSLTYP[PKWINDEX] = "?";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    COMMAREA.CATOAP = "TF0E";
    XSEXIT();
    PK0IM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end






   /* ------------------- end pk0i400 -------------------------*/
end // end PK0I400

// update hold tables
Function PK0I500()


   /* ----- pk0i500*/
   /* ----- update hold tables*/


  PK0IM010.XXXERRID = "PK0I500";



  if (PK0IM010.XBCCD == "08") /* if cole-haan customer*/
    PK0IM010.KUCCOID = XP0FW01-INTERNAL; /* use cole-haan nbr*/
  end



   /* ----- if line items were entered*/
   /* -----     perform update line items*/
   /* -----     varying index from 10 to 1 by -1*/
  if (PK0IW01.PK0IWFL8 == "Y")
    PK0IW01.PK0IWNX3 = 10;
    while (PK0IW01.PK0IWNX3 >= 1)
      PK0I510();
    end
  end







   /* ----- if line items were entered*/
   /* -----     if customers were being processed*/
   /* -----     and no customer errors*/
   /* -----         set customer normal*/
   /* -----     else*/
   /* -----             set cursor at customer number*/
  if (PK0IW01.PK0IWFL8 == "Y")
    if (PK0IW01.PK0IWFL7 == "C"
     && PK0IW01.PK0IWFL9 == "N")
      set PK0IM010.KUCCOID cursor, normal;
      set PK0IM010.KUMSTRID normal;
      set PK0IM010.XNXCD normal;
    else
      if (PK0IW01.PK0IWFL7 == "O"
       && PK0IW01.PK0IWFLD == "N")
        set PK0IM010.PK1CUOID cursor, normal;
        set PK0IM010.PK1NORID normal;
      else
        if (PK0IW01.PK0IWFL7 == "R"
         && PK0IW01.PK0IWFLE == "N")
          set PK0IM010.TF1CARCD cursor, normal;
        end
      end
    end
  end





   /* ----- if line items were entered*/
   /* -----     then get out, bypass the logic below*/
  if (PK0IW01.PK0IWFL8 == "Y")
    return;
  end


                    /* C U S T O M E R*/
                    /* | | | | | | | |*/
                    /* V V V V V V V V*/

   /* *---------------------**/
   /* * hold customer       **/
   /* *---------------------**/

  if (PK0IW01.PK0IWFL7 == "C" /* customer being processed*/
   && PK0IM010.PK0IMKUA == "H") /* create customer hold row*/
    set PK9REC empty;
    PK9REC.XWHCD = PKWREC.XWHCD;
    PK9REC.XBCCD = PK0IM010.XBCCD;
    PK9REC.KUCCOID = PK0IM010.KUCCOID;
    PK9REC.KUMSTRID = PK0IM010.KUMSTRID;
    PK9REC.XNXCD = PK0IM010.XNXCD;
    PK9REC.XGPCD = "00";
    PK9REC.XHRCD = PK0IM010.PK0IMKUR;

  /* --------------------- Y2K OUT BEGIN -----------/**/
    /* MOVE 19 TO PK0IW01.PK0IWFCT;*/
    /* MOVE EZEDTE TO PK0IW01.PK0IWFDA;*/
  /* --------------------- Y2K OUT END -------------/**/

  /* --------------------- Y2K IN BEGIN -----------/**/
    PK0IW01.PK0IWFDT = VGVar.currentGregorianDate;
  /* --------------------- Y2K OUT END -------------/**/

    PK9REC.ZZZCHGDT = PK0IW01.PK0IWFDT; /* change date*/
    PK9REC.ZZZCHGCT = 0; /* change count*/
    PK9REC.XXXUSRID = COMMAREA.CAUSERID;
    PK0IW01.PK0IWTIM = VGVar.currentFormattedTime;
    PK0IW01.PK0IWTHH = PK0IW01.PK0IWHH;
    PK0IW01.PK0IWTMM = PK0IW01.PK0IWMI;
    PK9REC.ZZZCHGTM = PK0IW01.PK0IWTI; /* change time*/
    PK0IW01.PK0IWFYY = PK0IM010.PK0IMKYY;

    /* ====== Y2K IN BEGIN =======*/

    /* date windowing for century*/

    if (PK0IW01.PK0IWFYY < 60)
      PK0IW01.PK0IWFCT = 20;
    else
      PK0IW01.PK0IWFCT = 19;
    end


    /* ====== Y2K IN END =======*/

    PK0IW01.PK0IWFMM = PK0IM010.PK0IMKMM;
    PK0IW01.PK0IWFDD = PK0IM010.PK0IMKDD;
    PK9REC.PK9RELDT = PK0IW01.PK0IWFDT;

    /* --5/16/89-- if release date is not '999999' subtract 1 from*/
    /* ----------- release date and move to the plan release date*/

    if (PK0IW01.PK0IWFMM != 99
     || PK0IW01.PK0IWFDD != 99
     || PK0IW01.PK0IWFYY != 99)

      set TA9REC empty;
      TA9REC.TA9BEGDT = PK0IW01.PK0IWFDT;
      TA9REC.TA9OFSET = -1;

      try
        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
      end /* subtract 1 from date*/

      /* ------------------------------------------------------------*/
       /* if successful, move date and continue through process*/
      /* ------------------------------------------------------------*/

      if (sysVar.errorCode == "00000000" /* call successful*/
       && TA9REC.TA9RTNFL == 0)          /* and normal return codes*/

        PK9REC.PK9PLRDT = TA9REC.TA9RTNDT;
        PK9REC.PK9RELDT = PK0IW01.PK0IWFDT;

      else

        /* ------------------------------------------------------------*/
         /* otherwise indicate that a system error has occurred*/
        /* ------------------------------------------------------------*/

        TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return codes*/
        TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* subroutine parameters*/
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* termination function*/
        TA1REC.TA1TYPE = "APPL"; /* type of error*/
        TA1REC.TA1LOC = "UPDATE PLAN RELEASE DATE";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
        TA1REC.TA1PGMNO = "400"; /* program number*/
        TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* map application*/
        TA1REC.TA1MAPNO = "M010"; /* map number*/

        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/

        exit stack; /* exit to display map*/

      end

    else

       /* IF 999999 WAS ENTERED FOR YY MM DD DO THE SAME TO CENTURY*/
      /* MOVE THESE DATES TO THE RELEASE DATE AND THE PLANNED RELEASE*/
       /* DATE FIELDS.*/

      PK0IW01.PK0IWFCT = 99;
      PK9REC.PK9RELDT = PK0IW01.PK0IWFDT;

    end

  /* --------------------- Y2K OUT BEGIN -----------/**/
    /* IF PK9REC.PK9RELDT GT 19991231;*/
  /* --------------------- Y2K OUT END -------------/**/


    /* ====== Y2K IN BEGIN ======*/

    if (PK9REC.PK9RELDT > 20431231)

      /* ====== Y2K IN END ======*/

      PK9REC.PK9RELDT = 999999999;
      PK9REC.PK9PLRDT = 999999999;
    end

     /* ----- add customer hold row*/
     /* ----- update customer hold flag on pool header*/

    PKZREC.PKZFUNC = "A ";
    call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes}; /* add customer hold row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      converseLib.validationFailed(32);
      PK0I530();
                                   /* update customer hold flag on pool hdr*/
      set PK0IM010.KUCCOID cursor;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(28); /* contention for data base resorce*/
        set PK0IM010.KUCCOID cursor, modified, bold;
        set PK0IM010.KUMSTRID modified, bold;
        set PK0IM010.XNXCD modified, bold;
        return;
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I500 "; /* Process name*/
        TA1REC.TA1LOC = "ADD                      ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        set PK0IM010.KUCCOID cursor, modified, bold;
        set PK0IM010.KUMSTRID modified, bold;
        set PK0IM010.XNXCD modified, bold;
        return;
      end
    end
  end


   /* *---------------------**/
   /* * release customer    **/
   /* *---------------------**/


  if (PK0IW01.PK0IWFL7 == "C" /* customer being processed*/
   && PK0IM010.PK0IMKUA == "R") /* release*/
    set PK9REC empty;
    PK9REC.XWHCD = PKWREC.XWHCD;
    PK9REC.KUCCOID = PK0IM010.KUCCOID;
    PK9REC.KUMSTRID = PK0IM010.KUMSTRID;
    PK9REC.XNXCD = PK0IM010.XNXCD;
    PK9REC.XGPCD = "00";
    PK9REC.XHRCD = PK0IM010.PK0IMKUR;
    PKZREC.PKZFUNC = "D ";
    call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes}; /* add customer hold row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      converseLib.validationFailed(32);
      PK0I530();
                                   /* update customer hold flag on pool hdr*/
      set PK0IM010.KUCCOID cursor;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        set PK0IM010.KUCCOID cursor, modified, bold;
        set PK0IM010.KUMSTRID modified, bold;
        set PK0IM010.XNXCD modified, bold;
        converseLib.validationFailed(28); /* contention for data base resorce*/
        return;
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          set PK0IM010.KUCCOID cursor, modified, bold;
          set PK0IM010.KUMSTRID modified, bold;
          set PK0IM010.XNXCD modified, bold;
          converseLib.validationFailed(71); /* row not found for delete*/
          return;
        else
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0I500 "; /* Process name*/
          TA1REC.TA1LOC = "DELETE                   ";
          TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

          set PK0IM010.KUCCOID cursor, modified, bold;
          set PK0IM010.KUMSTRID modified, bold;
          set PK0IM010.XNXCD modified, bold;
          return;
        end
      end
    end
  end


   /* *---------------------**/
   /* * change customer     **/
   /* *  release date       **/
   /* *---------------------**/


  if (PK0IW01.PK0IWFL7 == "C" /* customer being processed*/
   && PK0IM010.PK0IMKUA == "C") /* change release date*/
    set PK9REC empty;
    PK9REC.XWHCD = PKWREC.XWHCD;
    PK9REC.KUCCOID = PK0IM010.KUCCOID;
    PK9REC.KUMSTRID = PK0IM010.KUMSTRID;
    PK9REC.XNXCD = PK0IM010.XNXCD;
    PK9REC.XGPCD = "00";
    PK9REC.XHRCD = PK0IM010.PK0IMKUR;
    PKZREC.PKZFUNC = "S ";
    call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(71); /* row not found for change*/
        set PK0IM010.KUCCOID cursor, modified, bold;
        set PK0IM010.KUMSTRID modified, bold;
        set PK0IM010.XNXCD modified, bold;
        return;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(28); /* contention for data base resorce*/
          set PK0IM010.KUCCOID cursor, modified, bold;
          set PK0IM010.KUMSTRID modified, bold;
          set PK0IM010.XNXCD modified, bold;
          return;
        else
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0I500 "; /* Process name*/
          TA1REC.TA1LOC = "SELECT UNIQUE            ";
          TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

          return;
        end
      end
    end
  end

  if (PK0IW01.PK0IWFL7 == "C"  /* customer being processed*/
   && PK0IM010.PK0IMKUA == "C" /* change release date*/
   && SQLCA.VAGen_SQLCODE == 0) /* customer hold row was found*/
    PK9REC.XBCCD = PK0IM010.XBCCD;

  /* --------------------- Y2K OUT BEGIN -----------/**/
    /* MOVE 19 TO PK0IW01.PK0IWFCT;*/
    /* MOVE EZEDTE TO PK0IW01.PK0IWFDA;*/
  /* --------------------- Y2K OUT END -------------/**/


  /* --------------------- Y2K IN BEGIN -----------/**/
    PK0IW01.PK0IWFDT = VGVar.currentGregorianDate;
  /* --------------------- Y2K IN END -------------/**/

    PK9REC.ZZZCHGDT = PK0IW01.PK0IWFDT; /* change date*/
    PK9REC.XXXUSRID = COMMAREA.CAUSERID;
    PK0IW01.PK0IWTIM = VGVar.currentFormattedTime;
    PK0IW01.PK0IWTHH = PK0IW01.PK0IWHH;
    PK0IW01.PK0IWTMM = PK0IW01.PK0IWMI;
    PK9REC.ZZZCHGTM = PK0IW01.PK0IWTI; /* change time*/
    PK0IW01.PK0IWFYY = PK0IM010.PK0IMKYY;
    PK0IW01.PK0IWFMM = PK0IM010.PK0IMKMM;
    PK0IW01.PK0IWFDD = PK0IM010.PK0IMKDD;

    /* ====== Y2K IN BEGIN =======*/

    /* date windowing for century*/

    if (PK0IW01.PK0IWFYY < 60)
      PK0IW01.PK0IWFCT = 20;
    else
      PK0IW01.PK0IWFCT = 19;
    end


    /* ====== Y2K IN END =======*/

    PK9REC.PK9RELDT = PK0IW01.PK0IWFDT;

    /* --5/16/89--- if release date is not '999999' subtract 1 from*/
    /* ------------ release date and move to the plan release date*/

    if (PK0IW01.PK0IWFMM != 99
     || PK0IW01.PK0IWFDD != 99
     || PK0IW01.PK0IWFYY != 99)

      set TA9REC empty;
      TA9REC.TA9BEGDT = PK0IW01.PK0IWFDT;
      TA9REC.TA9OFSET = -1;

      try
        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
      end /* subtract 1 from date*/

      /* ----------------------------------------------------------*/
       /* if successful, move date and continue through process*/
      /* ----------------------------------------------------------*/

      if (sysVar.errorCode == "00000000" /* call successful*/
       && TA9REC.TA9RTNFL == 0)          /* and normal return code*/

        PK9REC.PK9PLRDT = TA9REC.TA9RTNDT;

      else

        /* ----------------------------------------------------------*/
         /* otherwise indicate that a system error has occurred*/
        /* ----------------------------------------------------------*/

        TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
        TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* subroutine parameters*/
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* termination function*/
        TA1REC.TA1TYPE = "APPL"; /* type of error*/
        TA1REC.TA1LOC = "UPDATE FOR PLAN RELEASE DATE";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
        TA1REC.TA1PGMNO = "400"; /* program number*/
        TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* map application*/
        TA1REC.TA1MAPNO = "M010"; /* map number*/

        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/

        exit stack; /* exit to display map*/

      end

    else


       /* IF 999999 WAS ENTERED FOR YY MM DD DO THE SAME TO CENTURY*/

      PK0IW01.PK0IWFCT = 99;
      PK9REC.PK9RELDT = PK0IW01.PK0IWFDT;

    end


  /* --------------------- Y2K OUT BEGIN -----------/**/
    /* IF PK9REC.PK9RELDT GT 19991231;*/
  /* --------------------- Y2K OUT END -------------/**/


    /* ====== Y2K IN BEGIN ======*/

    if (PK9REC.PK9RELDT > 20431231)

      /* ====== Y2K IN END ======*/

      PK9REC.PK9RELDT = 999999999;
      PK9REC.PK9PLRDT = 999999999;
    end

    PKZREC.PKZFUNC = "U ";
    call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes}; /* update cust hold row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      converseLib.validationFailed(32);
      set PK0IM010.KUCCOID cursor;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        set PK0IM010.KUCCOID cursor, modified, bold;
        set PK0IM010.KUMSTRID modified, bold;
        set PK0IM010.XNXCD modified, bold;
        converseLib.validationFailed(28); /* contention for data base resorce*/
        return;
      else
        converseLib.validationFailed(29); /* fatal error*/
        set PK0IM010.KUCCOID cursor, modified, bold;
        set PK0IM010.KUMSTRID modified, bold;
        set PK0IM010.XNXCD modified, bold;
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I500 "; /* Process name*/
        TA1REC.TA1LOC = "UPDATE                   ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        return;
      end
    end
  end



                       /* o r d e r*/
                       /* | | | | |*/
                       /* v v v v v*/

   /* *---------------------**/
   /* * hold order          **/
   /* *---------------------**/

  if (PK0IW01.PK0IWFL7 == "O" /* order being processed*/
   && PK0IM010.PK0IMORA == "H") /* create order hold row*/
    set PKBREC empty;
    PKBREC.XWHCD = PKWREC.XWHCD;
    PK0IW01.PK0IWPTN = PK0IM010.PK1CUOID;
    PKBREC.PK1PRTN = PK0IW01.PK0IWPRT;
    PKBREC.PK1CUOID = PK0IM010.PK1CUOID;
    PKBREC.PK1NORID = PK0IM010.PK1NORID;
    PKBREC.XHRCD = PK0IM010.PK0IMORR;

  /* --------------------- Y2K OUT BEGIN -----------/**/
    /* MOVE 19 TO PK0IW01.PK0IWFCT;*/
    /* MOVE EZEDTE TO PK0IW01.PK0IWFDA;*/
  /* --------------------- Y2K OUT END -------------/**/


  /* --------------------- Y2K IN BEGIN -----------/**/
    PK0IW01.PK0IWFDT = VGVar.currentGregorianDate;
  /* --------------------- Y2K IN END -------------/**/

    PKBREC.ZZZCHGDT = PK0IW01.PK0IWFDT; /* change date*/
    PKBREC.ZZZCHGCT = 0; /* change count*/
    PKBREC.XXXUSRID = COMMAREA.CAUSERID;
    PK0IW01.PK0IWTIM = VGVar.currentFormattedTime;
    PK0IW01.PK0IWTHH = PK0IW01.PK0IWHH;
    PK0IW01.PK0IWTMM = PK0IW01.PK0IWMI;
    PKBREC.ZZZCHGTM = PK0IW01.PK0IWTI; /* change time*/
    PK0IW01.PK0IWFYY = PK0IM010.PK0IMOYY;
    PK0IW01.PK0IWFMM = PK0IM010.PK0IMOMM;
    PK0IW01.PK0IWFDD = PK0IM010.PK0IMODD;

    /* ====== Y2K IN BEGIN =======*/

    /* date windowing for century*/

    if (PK0IW01.PK0IWFYY < 60)
      PK0IW01.PK0IWFCT = 20;
    else
      PK0IW01.PK0IWFCT = 19;
    end


    /* ====== Y2K IN END =======*/

    PKBREC.PKBRELDT = PK0IW01.PK0IWFDT;

    /* --5/16/89--- if release date is not '999999' subtract 1 from*/
    /* ------------ release date and move to the plan release date*/

    if (PK0IW01.PK0IWFMM != 99
     || PK0IW01.PK0IWFDD != 99
     || PK0IW01.PK0IWFYY != 99)

      set TA9REC empty;
      TA9REC.TA9BEGDT = PK0IW01.PK0IWFDT;
      TA9REC.TA9OFSET = -1;

      try
        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
      end /* subtract 1 from date*/

      /* ------------------------------------------------------------*/
       /* if successful, move date and continue through process*/
      /* ------------------------------------------------------------*/

      if (sysVar.errorCode == "00000000" /* call successful*/
       && TA9REC.TA9RTNFL == 0)          /* and normal return codes*/

        PKBREC.PKBPLRDT = TA9REC.TA9RTNDT;

      else

        /* ------------------------------------------------------------*/
         /* otherwise indicate that a system error has occurred*/
        /* ------------------------------------------------------------*/

        TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return codes*/
        TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* subroutine parameters*/
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* termination function*/
        TA1REC.TA1TYPE = "APPL"; /* type of error*/
        TA1REC.TA1LOC = "UPDATE PLAN RELEASE DATE";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
        TA1REC.TA1PGMNO = "400"; /* program number*/
        TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* map application*/
        TA1REC.TA1MAPNO = "M010"; /* map number*/

        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/

        exit stack; /* exit to display map*/

      end

    else


       /* IF 999999 WAS ENTERED FOR YY MM DD DO THE SAME TO CENTURY*/

      PK0IW01.PK0IWFCT = 99;
      PKBREC.PKBRELDT = PK0IW01.PK0IWFDT;

    end

  /* --------------------- Y2K OUT BEGIN -----------/**/
    /* IF PKBREC.PKBRELDT GT 19991231;*/
  /* --------------------- Y2K OUT END -------------/**/

    /* ====== Y2K IN BEGIN ======*/

    if (PKBREC.PKBRELDT > 20431231)

      /* ====== Y2K IN END ======*/

      PKBREC.PKBRELDT = 999999999;
      PKBREC.PKBPLRDT = 999999999;
    end

     /* ----- add order hold row*/
     /* ----- update order hold flag on pool header*/

    PKZREC.PKZFUNC = "A ";
    call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes}; /* add order hold row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      converseLib.validationFailed(32);
      PK0I520();
                                   /* update order hold flag on pool header*/
      set PK0IM010.PK1CUOID cursor;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(28); /* contention for data base resorce*/
        set PK0IM010.PK1CUOID cursor, modified, bold;
        set PK0IM010.PK1NORID modified, bold;
        return;
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I500 "; /* Process name*/
        TA1REC.TA1LOC = "ADD                      ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        set PK0IM010.PK1CUOID cursor, modified, bold;
        set PK0IM010.PK1NORID modified, bold;
        return;
      end
    end
  end


   /* *---------------------**/
   /* * release order       **/
   /* *---------------------**/


  if (PK0IW01.PK0IWFL7 == "O" /* order being processed*/
   && PK0IM010.PK0IMORA == "R") /* release*/
    set PKBREC empty;
    PKBREC.XWHCD = PKWREC.XWHCD;
    PKBREC.PK1CUOID = PK0IM010.PK1CUOID;
    PKBREC.PK1NORID = PK0IM010.PK1NORID;
    PKBREC.XHRCD = PK0IM010.PK0IMORR;
    PKZREC.PKZFUNC = "D ";
    call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes}; /* add customer hold row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      converseLib.validationFailed(32);
      PK0I520();
      /* check cust & brand code*/
      /* for Cole-Haan (orders only)*/
      if (PK0IW01.PK0IWFL7 == "O")
        PK0I526();
      end
                                   /* update order hold flag on pool header*/
      set PK0IM010.PK1CUOID cursor;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        set PK0IM010.PK1CUOID cursor, modified, bold;
        set PK0IM010.PK1NORID modified, bold;
        converseLib.validationFailed(28); /* contention for data base resorce*/
        return;
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          set PK0IM010.PK1CUOID cursor, modified, bold;
          set PK0IM010.PK1NORID modified, bold;
          set PK0IM010.PK0IMORR modified, bold;
          converseLib.validationFailed(72); /* row not found for delete*/
          return;
        else
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0I500 "; /* Process name*/
          TA1REC.TA1LOC = "DELETE                   ";
          TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

          set PK0IM010.PK1CUOID cursor, modified, bold;
          set PK0IM010.PK1NORID modified, bold;
          return;
        end
      end
    end
  end


   /* *---------------------**/
   /* * change order        **/
   /* *  release date       **/
   /* *---------------------**/


  if (PK0IW01.PK0IWFL7 == "O" /* order being processed*/
   && PK0IM010.PK0IMORA == "C") /* change release date*/
    set PKBREC empty;
    PKBREC.XWHCD = PKWREC.XWHCD;
    PKBREC.PK1CUOID = PK0IM010.PK1CUOID;
    PKBREC.PK1NORID = PK0IM010.PK1NORID;
    PKBREC.XHRCD = PK0IM010.PK0IMORR;
    PKZREC.PKZFUNC = "S ";
    call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(72); /* row not found for delete*/
        set PK0IM010.PK1CUOID cursor, modified, bold;
        set PK0IM010.PK1NORID modified, bold;
        set PK0IM010.PK0IMORR modified, bold;
        return;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(28); /* contention for data base resorce*/
          set PK0IM010.PK1CUOID cursor, modified, bold;
          set PK0IM010.PK1NORID modified, bold;
          return;
        else
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0I500 "; /* Process name*/
          TA1REC.TA1LOC = "SELECT UNIQUE            ";
          TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/
          set PK0IM010.PK1CUOID cursor, modified, bold;
          set PK0IM010.PK1NORID modified, bold;

          return;
        end
      end
    end
  end

  if (PK0IW01.PK0IWFL7 == "O"  /* order being processed*/
   && PK0IM010.PK0IMORA == "C" /* change release date*/
   && SQLCA.VAGen_SQLCODE == 0) /* order hold row was found*/

    /* ===== Y2K OUT BEGIN =======*/

    /* MOVE 19 TO PK0IW01.PK0IWFCT;*/
    /* MOVE EZEDTE TO PK0IW01.PK0IWFDA;*/

    /* ===== Y2K OUT END =======*/


    /* ===== Y2K IN BEGIN =======*/

    PK0IW01.PK0IWFDT = VGVar.currentGregorianDate;

    /* ===== Y2K IN  END =======*/


    PKBREC.ZZZCHGDT = PK0IW01.PK0IWFDT; /* change date*/
    PKBREC.XXXUSRID = COMMAREA.CAUSERID;
    PK0IW01.PK0IWTIM = VGVar.currentFormattedTime;
    PK0IW01.PK0IWTHH = PK0IW01.PK0IWHH;
    PK0IW01.PK0IWTMM = PK0IW01.PK0IWMI;
    PKBREC.ZZZCHGTM = PK0IW01.PK0IWTI; /* change time*/
    PK0IW01.PK0IWFYY = PK0IM010.PK0IMOYY;
    PK0IW01.PK0IWFMM = PK0IM010.PK0IMOMM;
    PK0IW01.PK0IWFDD = PK0IM010.PK0IMODD;

    /* ====== Y2K IN BEGIN =======*/

    /* date windowing for century*/

    if (PK0IW01.PK0IWFYY < 60)
      PK0IW01.PK0IWFCT = 20;
    else
      PK0IW01.PK0IWFCT = 19;
    end


    /* ====== Y2K IN END =======*/

    PKBREC.PKBRELDT = PK0IW01.PK0IWFDT;

    /* --5/16/89--- if release date is not '999999' subtract 1 from*/
    /* ------------ release date and move to the plan release date*/

    if (PK0IW01.PK0IWFMM != 99
     || PK0IW01.PK0IWFDD != 99
     || PK0IW01.PK0IWFYY != 99)

      set TA9REC empty;
      TA9REC.TA9BEGDT = PK0IW01.PK0IWFDT;
      TA9REC.TA9OFSET = -1;

      try
        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
      end /* subtract 1 from date*/

      /* ----------------------------------------------------------*/
       /* if successful, move date and continue through process*/
      /* ----------------------------------------------------------*/

      if (sysVar.errorCode == "00000000" /* call successful*/
       && TA9REC.TA9RTNFL == 0)          /* and normal return code*/

        PKBREC.PKBPLRDT = TA9REC.TA9RTNDT;

      else

        /* ----------------------------------------------------------*/
         /* otherwise indicate that a system error has occurred*/
        /* ----------------------------------------------------------*/

        TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
        TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* subroutine parameters*/
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* termination function*/
        TA1REC.TA1TYPE = "APPL"; /* type of error*/
        TA1REC.TA1LOC = "UPDATE FOR PLAN RELEASE DATE";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
        TA1REC.TA1PGMNO = "400"; /* program number*/
        TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* map application*/
        TA1REC.TA1MAPNO = "M010"; /* map number*/

        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/

        exit stack; /* exit to display map*/

      end

    else


       /* IF 999999 WAS ENTERED FOR YY MM DD DO THE SAME TO CENTURY*/

      PK0IW01.PK0IWFCT = 99;
      PKBREC.PKBRELDT = PK0IW01.PK0IWFDT;

    end

  /* --------------------- Y2K OUT BEGIN -----------/**/
    /* IF PKBREC.PKBRELDT GT 19991231;*/
  /* --------------------- Y2K OUT END -------------/**/

    /* ====== Y2K IN BEGIN ======*/

    if (PKBREC.PKBRELDT > 20431231)

      /* ====== Y2K IN END ======*/

      PKBREC.PKBRELDT = 999999999;
      PKBREC.PKBPLRDT = 999999999;
    end

    PKZREC.PKZFUNC = "U ";
    call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes}; /* update order hold row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      converseLib.validationFailed(32);
      set PK0IM010.PK1CUOID cursor;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        set PK0IM010.PK1CUOID cursor, modified, bold;
        set PK0IM010.PK1NORID modified, bold;
        converseLib.validationFailed(28); /* contention for data base resorce*/
        return;
      else
        converseLib.validationFailed(29); /* fatal error*/
        set PK0IM010.PK1CUOID cursor, modified, bold;
        set PK0IM010.PK1NORID modified, bold;
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I500 "; /* Process name*/
        TA1REC.TA1LOC = "UPDATE                   ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        return;
      end
    end
  end


                    /* C A R R I E R*/
                    /* | | | | | | |*/
                    /* V V V V V V V*/

   /* *---------------------**/
   /* * hold carrier        **/
   /* *---------------------**/

  if (PK0IW01.PK0IWFL7 == "R" /* carrier being processed*/
   && PK0IM010.PK0IMCAA == "H") /* create customer hold row*/
    set PWFREC empty;
    PWFREC.XWHCD = PKWREC.XWHCD;
    PWFREC.TF1CARCD = PK0IM010.TF1CARCD;
    PWFREC.XHRCD = PK0IM010.PK0IMCAR;

  /* --------------------- Y2K OUT BEGIN -----------/**/
    /* MOVE 19 TO PK0IW01.PK0IWFCT;*/
    /* MOVE EZEDTE TO PK0IW01.PK0IWFDA;*/
  /* --------------------- Y2K OUT END -------------/**/


  /* --------------------- Y2K IN BEGIN -----------/**/
    PK0IW01.PK0IWFDT = VGVar.currentGregorianDate;
  /* --------------------- Y2K IN END -------------/**/

    PWFREC.ZZZCHGDT = PK0IW01.PK0IWFDT; /* change date*/
    PWFREC.ZZZCHGCT = 0; /* change count*/
    PWFREC.XXXUSRID = COMMAREA.CAUSERID;
    PK0IW01.PK0IWTIM = VGVar.currentFormattedTime;
    PK0IW01.PK0IWTHH = PK0IW01.PK0IWHH;
    PK0IW01.PK0IWTMM = PK0IW01.PK0IWMI;
    PWFREC.ZZZCHGTM = PK0IW01.PK0IWTI; /* change time*/
    PK0IW01.PK0IWFYY = PK0IM010.PK0IMCYY;
    PK0IW01.PK0IWFMM = PK0IM010.PK0IMCMM;
    PK0IW01.PK0IWFDD = PK0IM010.PK0IMCDD;

    /* ====== Y2K IN BEGIN =======*/

    /* date windowing for century*/

    if (PK0IW01.PK0IWFYY < 60)
      PK0IW01.PK0IWFCT = 20;
    else
      PK0IW01.PK0IWFCT = 19;
    end


    /* ====== Y2K IN END =======*/

    PWFREC.PKBRELDT = PK0IW01.PK0IWFDT;

    /* --5/16/89--- if release date is not '999999' subtract 1 from*/
    /* ------------ release date and move to the plan release date*/

    if (PK0IW01.PK0IWFMM != 99
     || PK0IW01.PK0IWFDD != 99
     || PK0IW01.PK0IWFYY != 99)

      set TA9REC empty;
      TA9REC.TA9BEGDT = PK0IW01.PK0IWFDT;
      TA9REC.TA9OFSET = -1;

      try
        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
      end /* subtract 1 from date*/

      /* ------------------------------------------------------------*/
       /* if successful, move date and continue through process*/
      /* ------------------------------------------------------------*/

      if (sysVar.errorCode == "00000000" /* call successful*/
       && TA9REC.TA9RTNFL == 0)          /* and normal return codes*/

        PWFREC.PKBPLRDT = TA9REC.TA9RTNDT;

      else

        /* ------------------------------------------------------------*/
         /* otherwise indicate that a system error has occurred*/
        /* ------------------------------------------------------------*/

        TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return codes*/
        TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* subroutine parameters*/
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* termination function*/
        TA1REC.TA1TYPE = "APPL"; /* type of error*/
        TA1REC.TA1LOC = "UPDATE PLAN RELEASE DATE";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
        TA1REC.TA1PGMNO = "400"; /* program number*/
        TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* map application*/
        TA1REC.TA1MAPNO = "M010"; /* map number*/

        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/

        exit stack; /* exit to display map*/

      end

    else


       /* IF 999999 WAS ENTERED FOR YY MM DD DO THE SAME TO CENTURY*/

      PK0IW01.PK0IWFCT = 99;
      PWFREC.PKBRELDT = PK0IW01.PK0IWFDT;

    end

  /* --------------------- Y2K OUT BEGIN -----------/**/
    /* IF PWFREC.PKBRELDT GT 19991231;*/
  /* --------------------- Y2K OUT END -------------/**/

      /* ====== Y2K IN BEGIN ======*/

    if (PWFREC.PKBRELDT > 20431231)

      /* ====== Y2K IN END ======*/

      PWFREC.PKBRELDT = 999999999;
      PWFREC.PKBPLRDT = 999999999;
    end

    PKZREC.PKZFUNC = "A ";
    call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes}; /* add carrier hold row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      converseLib.validationFailed(32);
      set PK0IM010.TF1CARCD cursor;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(28); /* contention for data base resorce*/
        set PK0IM010.TF1CARCD cursor, modified, bold;
        return;
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I500 "; /* Process name*/
        TA1REC.TA1LOC = "ADD                      ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        set PK0IM010.TF1CARCD cursor, modified, bold;
        return;
      end
    end
  end


   /* *---------------------**/
   /* * release carrier     **/
   /* *---------------------**/


  if (PK0IW01.PK0IWFL7 == "R" /* carrier being processed*/
   && PK0IM010.PK0IMCAA == "R") /* release*/
    set PWFREC empty;
    PWFREC.XWHCD = PKWREC.XWHCD;
    PWFREC.TF1CARCD = PK0IM010.TF1CARCD;
    PWFREC.XHRCD = PK0IM010.PK0IMCAR;
    PKZREC.PKZFUNC = "D ";
    call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes}; /* add carrier hold row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      converseLib.validationFailed(32);
      set PK0IM010.TF1CARCD cursor;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        set PK0IM010.TF1CARCD cursor, modified, bold;
        converseLib.validationFailed(28); /* contention for data base resorce*/
        return;
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          set PK0IM010.TF1CARCD cursor, modified, bold;
          converseLib.validationFailed(277); /* row not found for delete*/
          return;
        else
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0I500 "; /* Process name*/
          TA1REC.TA1LOC = "DELETE                   ";
          TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

          set PK0IM010.TF1CARCD cursor, modified, bold;
          return;
        end
      end
    end
  end


   /* *---------------------**/
   /* * change carrier      **/
   /* *  release date       **/
   /* *---------------------**/


  if (PK0IW01.PK0IWFL7 == "R" /* carrier being processed*/
   && PK0IM010.PK0IMCAA == "C") /* change release date*/
    set PWFREC empty;
    PWFREC.XWHCD = PKWREC.XWHCD;
    PWFREC.TF1CARCD = PK0IM010.TF1CARCD;
    PWFREC.XHRCD = PK0IM010.PK0IMCAR;
    PKZREC.PKZFUNC = "S ";
    call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(277); /* row not found for change*/
        set PK0IM010.TF1CARCD cursor, modified, bold;
        return;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(28); /* contention for data base resorce*/
          set PK0IM010.TF1CARCD cursor, modified, bold;
          return;
        else
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0I500 "; /* Process name*/
          TA1REC.TA1LOC = "SELECT UNIQUE            ";
          TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

          return;
        end
      end
    end
  end

  if (PK0IW01.PK0IWFL7 == "R"  /* carrier being processed*/
   && PK0IM010.PK0IMCAA == "C" /* change release date*/
   && SQLCA.VAGen_SQLCODE == 0) /* carrier hold row was found*/

  /* --------------------- Y2K OUT BEGIN -----------/**/
    /* MOVE 19 TO PK0IW01.PK0IWFCT;*/
    /* MOVE EZEDTE TO PK0IW01.PK0IWFDA;*/
  /* --------------------- Y2K OUT END -------------/**/


  /* --------------------- Y2K IN BEGIN -----------/**/
    PK0IW01.PK0IWFDT = VGVar.currentShortGregorianDate;
  /* --------------------- Y2K OUT END -------------/**/

    PWFREC.ZZZCHGDT = PK0IW01.PK0IWFDT; /* change date*/
    PWFREC.XXXUSRID = COMMAREA.CAUSERID;
    PK0IW01.PK0IWTIM = VGVar.currentFormattedTime;
    PK0IW01.PK0IWTHH = PK0IW01.PK0IWHH;
    PK0IW01.PK0IWTMM = PK0IW01.PK0IWMI;
    PWFREC.ZZZCHGTM = PK0IW01.PK0IWTI; /* change time*/
    PK0IW01.PK0IWFYY = PK0IM010.PK0IMCYY;
    PK0IW01.PK0IWFMM = PK0IM010.PK0IMCMM;
    PK0IW01.PK0IWFDD = PK0IM010.PK0IMCDD;

    /* ====== Y2K IN BEGIN =======*/

    /* date windowing for century*/

    if (PK0IW01.PK0IWFYY < 60)
      PK0IW01.PK0IWFCT = 20;
    else
      PK0IW01.PK0IWFCT = 19;
    end


    /* ====== Y2K IN END =======*/

    PWFREC.PKBRELDT = PK0IW01.PK0IWFDT;

    /* --5/16/89--- if release date is not '999999' subtract 1 from*/
    /* ------------ release date and move to the plan release date*/

    if (PK0IW01.PK0IWFMM != 99
     || PK0IW01.PK0IWFDD != 99
     || PK0IW01.PK0IWFYY != 99)

      set TA9REC empty;
      TA9REC.TA9BEGDT = PK0IW01.PK0IWFDT;
      TA9REC.TA9OFSET = -1;

      try
        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
      end /* subtract 1 from date*/

      /* ----------------------------------------------------------*/
       /* if successful, move date and continue through process*/
      /* ----------------------------------------------------------*/

      if (sysVar.errorCode == "00000000" /* call successful*/
       && TA9REC.TA9RTNFL == 0)          /* and normal return code*/

        PWFREC.PKBPLRDT = TA9REC.TA9RTNDT;

      else

        /* ----------------------------------------------------------*/
         /* otherwise indicate that a system error has occurred*/
        /* ----------------------------------------------------------*/

        TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
        TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* subroutine parameters*/
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* termination function*/
        TA1REC.TA1TYPE = "APPL"; /* type of error*/
        TA1REC.TA1LOC = "UPDATE FOR PLAN RELEASE DATE";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
        TA1REC.TA1PGMNO = "400"; /* program number*/
        TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* map application*/
        TA1REC.TA1MAPNO = "M010"; /* map number*/

        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/

        exit stack; /* exit to display map*/

      end

    else


       /* IF 999999 WAS ENTERED FOR YY MM DD DO THE SAME TO CENTURY*/

      PK0IW01.PK0IWFCT = 99;
      PWFREC.PKBRELDT = PK0IW01.PK0IWFDT;

    end

  /* --------------------- Y2K OUT BEGIN -----------/**/
    /* IF PWFREC.PKBRELDT GT 19991231;*/
  /* --------------------- Y2K OUT END -------------/**/


    /* ====== Y2K IN BEGIN ======*/

    if (PWFREC.PKBRELDT > 20431231)

      /* ====== Y2K IN END ======*/

      PWFREC.PKBRELDT = 999999999;
      PWFREC.PKBPLRDT = 999999999;
    end

    PKZREC.PKZFUNC = "U ";
    call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
                                   /* update carrier hold row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      converseLib.validationFailed(32);
      set PK0IM010.TF1CARCD cursor;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        set PK0IM010.TF1CARCD cursor, modified, bold;
        converseLib.validationFailed(28); /* contention for data base resorce*/
        return;
      else
        converseLib.validationFailed(29); /* fatal error*/
        set PK0IM010.TF1CARCD cursor, modified, bold;
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I500 "; /* Process name*/
        TA1REC.TA1LOC = "UPDATE                   ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        return;
      end
    end
  end



   /* ----- end pk0i500*/
end // end PK0I500

// line item update hold tables
Function PK0I510()

   /* *---------------------------------------------------**/
   /* *     pk0i510                                       **/
   /* *     line item update hold tables                  **/
   /* *---------------------------------------------------**/


  PK0IM010.XXXERRID = "PK0I510";


                 /* C U S T O M E R*/
                 /* | | | | | | | |*/
                 /* V V V V V V V V*/

   /* *---------------------**/
   /* * hold customer       **/
   /* *---------------------**/

  if (PK0IW01.PK0IWFL7 == "C" /* customer being processed*/
   && PK0IM010.PK0IMACT[PK0IWNX3] == "H") /* create customer hold row*/
    set PK9REC empty;
    PK9REC.XWHCD = PKWREC.XWHCD;
    PK9REC.XBCCD = PK0IM010.XBCCD;
    PK9REC.KUCCOID = PK0IM010.KUCCOID;
    PK9REC.KUMSTRID = PK0IM010.KUMSTRID;
    PK9REC.XNXCD = PK0IM010.XNXCD;
    PK9REC.XGPCD = "00";
    PK9REC.XHRCD = PK0IM010.PK0IMRES[PK0IWNX3];

  /* --------------------- Y2K OUT BEGIN -----------/**/
    /* MOVE 19 TO PK0IW01.PK0IWFCT;*/
    /* MOVE EZEDTE TO PK0IW01.PK0IWFDA;*/
  /* --------------------- Y2K OUT END -------------/**/

  /* --------------------- Y2K IN BEGIN -----------/**/
    PK0IW01.PK0IWFDT = VGVar.currentGregorianDate;
  /* --------------------- Y2K IN END -------------/**/

    PK9REC.ZZZCHGDT = PK0IW01.PK0IWFDT; /* change date*/
    PK9REC.ZZZCHGCT = 0; /* change count*/
    PK9REC.XXXUSRID = COMMAREA.CAUSERID;
    PK0IW01.PK0IWTIM = VGVar.currentFormattedTime;
    PK0IW01.PK0IWTHH = PK0IW01.PK0IWHH;
    PK0IW01.PK0IWTMM = PK0IW01.PK0IWMI;
    PK9REC.ZZZCHGTM = PK0IW01.PK0IWTI; /* change time*/
    PK0IW01.PK0IWFYY = PK0IM010.PK0IMYY[PK0IWNX3];
    PK0IW01.PK0IWFMM = PK0IM010.PK0IMMM[PK0IWNX3];
    PK0IW01.PK0IWFDD = PK0IM010.PK0IMDD[PK0IWNX3];

      /* ====== Y2K IN BEGIN =======*/

    if (PK0IW01.PK0IWFYY < 60)
      PK0IW01.PK0IWFCT = 20;
    else
      PK0IW01.PK0IWFCT = 19;
    end

      /* ====== Y2K IN END =======*/

    PK9REC.PK9RELDT = PK0IW01.PK0IWFDT;

    /* --5/16/89--- if release date is not '999999' subtract 1 from*/
    /* ------------ release date and move to the plan release date*/

    if (PK0IW01.PK0IWFYY != 99
     || PK0IW01.PK0IWFMM != 99
     || PK0IW01.PK0IWFDD != 99)

      set TA9REC empty;
      TA9REC.TA9BEGDT = PK0IW01.PK0IWFDT;
      TA9REC.TA9OFSET = -1;

      try
        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
      end /* subtract 1 from date*/

      /* ------------------------------------------------------------*/
       /* if successful, move date and continue through process*/
      /* ------------------------------------------------------------*/

      if (sysVar.errorCode == "00000000" /* call successful*/
       && TA9REC.TA9RTNFL == 0)          /* and normal return codes*/

        PK9REC.PK9PLRDT = TA9REC.TA9RTNDT;
        PK0IM010.PK0IMPYY[PK0IWNX3] = TA9REC.TA9RTNYY;
        PK0IM010.PK0IMPMM[PK0IWNX3] = TA9REC.TA9RTNMM;
        PK0IM010.PK0IMPDD[PK0IWNX3] = TA9REC.TA9RTNDD;

      else

        /* ------------------------------------------------------------*/
         /* otherwise indicate that a system error has occurred*/
        /* ------------------------------------------------------------*/

        TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return codes*/
        TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* subroutine parameters*/
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* termination function*/
        TA1REC.TA1TYPE = "APPL"; /* type of error*/
        TA1REC.TA1LOC = "UPDATE PLAN RELEASE DATE";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
        TA1REC.TA1PGMNO = "410"; /* program number*/
        TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* map application*/
        TA1REC.TA1MAPNO = "M010"; /* map number*/

        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/

        exit stack;

      end

    else

      /* ======  Y2K IN BEGIN ========*/

       /* IF 99 99 99 ENTERED DO THE SAME TO CENTURY*/

      PK0IW01.PK0IWFCT = 99;
      PK9REC.PK9RELDT = PK0IW01.PK0IWFDT;

      /* ======  Y2K IN END ========*/

      PK0IM010.PK0IMPYY[PK0IWNX3] = PK0IM010.PK0IMYY[PK0IWNX3];
      PK0IM010.PK0IMPMM[PK0IWNX3] = PK0IM010.PK0IMMM[PK0IWNX3];
      PK0IM010.PK0IMPDD[PK0IWNX3] = PK0IM010.PK0IMDD[PK0IWNX3];

    end

  /* --------------------- Y2K OUT BEGIN -----------/**/
    /* IF PK9REC.PK9RELDT GT 19991231;*/
  /* --------------------- Y2K OUT END -------------/**/


    /* ====== Y2K IN BEGIN ======*/

    if (PK9REC.PK9RELDT > 20431231)

      /* ====== Y2K IN END ======*/

      PK9REC.PK9RELDT = 999999999;
      PK9REC.PK9PLRDT = 999999999;
    end

    PKZREC.PKZFUNC = "A ";
    call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes}; /* add customer hold row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      converseLib.validationFailed(32);
      PK0I530(); /* update cust hold flag on pool hdr*/
      PK0IM010.PK0IMACT[PK0IWNX3] = " ";
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(28); /* contention for data base resorce*/
        set PK0IM010.KUCCOID cursor, bold;
        set PK0IM010.KUMSTRID bold;
        set PK0IM010.XNXCD bold;
        set PK0IM010.PK0IMRES[PK0IWNX3] bold;
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I510 "; /* Process name*/
        TA1REC.TA1LOC = "ADD                      ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        set PK0IM010.KUCCOID cursor, bold;
        set PK0IM010.KUMSTRID bold;
        set PK0IM010.XNXCD bold;
        set PK0IM010.PK0IMRES[PK0IWNX3] bold;
      end
    end
  end


   /* *---------------------**/
   /* * release customer    **/
   /* *---------------------**/


  if (PK0IW01.PK0IWFL7 == "C" /* customer being processed*/
   && PK0IM010.PK0IMACT[PK0IWNX3] == "R") /* release*/
    set PK9REC empty;
    PK9REC.XWHCD = PKWREC.XWHCD;
    PK9REC.KUCCOID = PK0IM010.KUCCOID;
    PK9REC.KUMSTRID = PK0IM010.KUMSTRID;
    PK9REC.XNXCD = PK0IM010.XNXCD;
    PK9REC.XGPCD = "00";
    PK9REC.XHRCD = PK0IM010.PK0IMRES[PK0IWNX3];
    PKZREC.PKZFUNC = "D ";
    call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
                                   /* delete customer hold row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      converseLib.validationFailed(32);
      PK0IM010.PK0IMRES[PK0IWNX3] = " ";
      PK0IM010.XHRABRV[PK0IWNX3] = " ";
      PK0IM010.PK0IMMM[PK0IWNX3] = 0;
      PK0IM010.PK0IMDD[PK0IWNX3] = 0;
      PK0IM010.PK0IMYY[PK0IWNX3] = 0;
      PK0IM010.PK0IMPMM[PK0IWNX3] = 0;
      PK0IM010.PK0IMPDD[PK0IWNX3] = 0;
      PK0IM010.PK0IMPYY[PK0IWNX3] = 0;
      PK0I530(); /* update cust hold flag on pool hdr*/
      PK0IM010.PK0IMACT[PK0IWNX3] = " ";
      set PK0IM010.PK0IMRES[PK0IWNX3] normal;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        set PK0IM010.KUCCOID cursor, bold;
        set PK0IM010.KUMSTRID bold;
        set PK0IM010.XNXCD bold;
        set PK0IM010.PK0IMRES[PK0IWNX3] bold;
        converseLib.validationFailed(28); /* contention for data base resorce*/
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          set PK0IM010.KUCCOID cursor, bold;
          set PK0IM010.KUMSTRID bold;
          set PK0IM010.XNXCD bold;
          set PK0IM010.PK0IMRES[PK0IWNX3] bold;
          PK0IW01.PK0IWFL9 = "Y";
          converseLib.validationFailed(68); /* row not found for delete*/
        else
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0I510 "; /* Process name*/
          TA1REC.TA1LOC = "DELETE                   ";
          TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

          set PK0IM010.KUCCOID cursor, bold;
          set PK0IM010.KUMSTRID bold;
          set PK0IM010.XNXCD bold;
          set PK0IM010.PK0IMRES[PK0IWNX3] bold;
        end
      end
    end
  end


   /* *---------------------**/
   /* * change customer     **/
   /* *  release date       **/
   /* *---------------------**/


  if (PK0IW01.PK0IWFL7 == "C" /* customer being processed*/
   && PK0IM010.PK0IMACT[PK0IWNX3] == "C") /* change release date*/
    set PK9REC empty;
    PK9REC.XWHCD = PKWREC.XWHCD;
    PK9REC.KUCCOID = PK0IM010.KUCCOID;
    PK9REC.KUMSTRID = PK0IM010.KUMSTRID;
    PK9REC.XNXCD = PK0IM010.XNXCD;
    PK9REC.XGPCD = "00";
    PK9REC.XHRCD = PK0IM010.PK0IMRES[PK0IWNX3];
    PKZREC.PKZFUNC = "S ";
    call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(68); /* row not found for change*/
        PK0IW01.PK0IWFL9 = "Y"; /* cusrtomer error flag*/
        set PK0IM010.KUCCOID cursor, bold;
        set PK0IM010.KUMSTRID bold;
        set PK0IM010.XNXCD bold;
        set PK0IM010.PK0IMRES[PK0IWNX3] bold;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(28); /* contention for data base resorce*/
          set PK0IM010.KUCCOID cursor, bold;
          set PK0IM010.KUMSTRID bold;
          set PK0IM010.XNXCD bold;
          set PK0IM010.PK0IMRES[PK0IWNX3] bold;
        else
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0I510 "; /* Process name*/
          TA1REC.TA1LOC = "SELECT UNIQUE            ";
          TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

        end
      end
    end
  end

  if (PK0IW01.PK0IWFL7 == "C" /* customer being processed*/
   && PK0IM010.PK0IMACT[PK0IWNX3] == "C"
   && SQLCA.VAGen_SQLCODE == 0) /* successful*/
    PK9REC.XBCCD = PK0IM010.XBCCD;

  /* --------------------- Y2K OUT BEGIN -----------/**/
    /* MOVE 19 TO PK0IW01.PK0IWFCT;*/
    /* MOVE EZEDTE TO PK0IW01.PK0IWFDA;*/
  /* --------------------- Y2K OUT END -------------/**/


  /* --------------------- Y2K IN BEGIN -----------/**/
    PK0IW01.PK0IWFDT = VGVar.currentGregorianDate;
  /* --------------------- Y2K IN END -------------/**/

    PK9REC.ZZZCHGDT = PK0IW01.PK0IWFDT; /* change date*/
    PK9REC.XXXUSRID = COMMAREA.CAUSERID;
    PK0IW01.PK0IWTIM = VGVar.currentFormattedTime;
    PK0IW01.PK0IWTHH = PK0IW01.PK0IWHH;
    PK0IW01.PK0IWTMM = PK0IW01.PK0IWMI;
    PK9REC.ZZZCHGTM = PK0IW01.PK0IWTI; /* change time*/
    PK0IW01.PK0IWFYY = PK0IM010.PK0IMYY[PK0IWNX3];
    PK0IW01.PK0IWFMM = PK0IM010.PK0IMMM[PK0IWNX3];
    PK0IW01.PK0IWFDD = PK0IM010.PK0IMDD[PK0IWNX3];

    /* ====== Y2K IN BEGIN ========*/

    if (PK0IM010.PK0IMYY[PK0IWNX3] < 60)
      PK0IW01.PK0IWFCT = 20;
    else
      PK0IW01.PK0IWFCT = 19;
    end

    /* ====== Y2K IN END ========*/

    PK9REC.PK9RELDT = PK0IW01.PK0IWFDT;

    /* --5/16/89--- if release date is not '999999' subtract 1 from*/
    /* ------------ release date and move to the plan release date*/

    if (PK0IW01.PK0IWFYY != 99
     || PK0IW01.PK0IWFMM != 99
     || PK0IW01.PK0IWFDD != 99)

      set TA9REC empty;
      TA9REC.TA9BEGDT = PK0IW01.PK0IWFDT;
      TA9REC.TA9OFSET = -1;

      try
        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
      end /* subtract 1 from date*/

      /* ------------------------------------------------------------*/
       /* if successful, move date and continue through process*/
      /* ------------------------------------------------------------*/

      if (sysVar.errorCode == "00000000" /* call successful*/
       && TA9REC.TA9RTNFL == 0)          /* and normal return codes*/

        PK9REC.PK9PLRDT = TA9REC.TA9RTNDT;
        PK0IM010.PK0IMPYY[PK0IWNX3] = TA9REC.TA9RTNYY;
        PK0IM010.PK0IMPMM[PK0IWNX3] = TA9REC.TA9RTNMM;
        PK0IM010.PK0IMPDD[PK0IWNX3] = TA9REC.TA9RTNDD;

      else

        /* ------------------------------------------------------------*/
         /* otherwise indicate that a system error has occurred*/
        /* ------------------------------------------------------------*/

        TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return codes*/
        TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* subroutine parameters*/
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* termination function*/
        TA1REC.TA1TYPE = "APPL"; /* type of error*/
        TA1REC.TA1LOC = "UPDATE PLAN RELEASE DATE";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
        TA1REC.TA1PGMNO = "410"; /* program number*/
        TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* map application*/
        TA1REC.TA1MAPNO = "M010"; /* map number*/

        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/

        exit stack;

      end

    else

      /* === Y2K OUT BEGIN ======*/

      /* MOVE PK0IW01.PK0IWFDT TO PK9REC.PK9PLRDT;*/

      /* === Y2K OUT END ======*/

      /* ======  Y2K IN BEGIN ========*/

       /* IF 99 99 99 ENTERED DO THE SAME TO CENTURY*/

      PK0IW01.PK0IWFCT = 99;
      PK9REC.PK9RELDT = PK0IW01.PK0IWFDT;

      /* ======  Y2K IN END ========*/

      PK0IM010.PK0IMPYY[PK0IWNX3] = PK0IM010.PK0IMYY[PK0IWNX3];
      PK0IM010.PK0IMPMM[PK0IWNX3] = PK0IM010.PK0IMMM[PK0IWNX3];
      PK0IM010.PK0IMPDD[PK0IWNX3] = PK0IM010.PK0IMDD[PK0IWNX3];


    end


  /* --------------------- Y2K OUT BEGIN -----------/**/
    /* IF PK9REC.PK9RELDT GT 19991231;*/
  /* --------------------- Y2K OUT END -------------/**/


      /* ====== Y2K IN BEGIN ======*/

    if (PK9REC.PK9RELDT > 20431231)

      /* ====== Y2K IN END ======*/

      PK9REC.PK9RELDT = 999999999;
      PK9REC.PK9PLRDT = 999999999;
    end

    PKZREC.PKZFUNC = "U ";
    call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
                                   /* update customer hold row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      converseLib.validationFailed(32);
      PK0IM010.PK0IMACT[PK0IWNX3] = " ";
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        set PK0IM010.KUCCOID cursor, bold;
        set PK0IM010.KUMSTRID bold;
        set PK0IM010.XNXCD bold;
        set PK0IM010.PK0IMRES[PK0IWNX3] bold;
        converseLib.validationFailed(28); /* contention for data base resorce*/
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I510 "; /* Process name*/
        TA1REC.TA1LOC = "UPDATE                   ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        set PK0IM010.KUCCOID cursor, bold;
        set PK0IM010.KUMSTRID bold;
        set PK0IM010.XNXCD bold;
        set PK0IM010.PK0IMRES[PK0IWNX3] bold;
      end
    end
  end



       /* O R D E R*/

       /* | | | | |*/
       /* V V V V V*/

   /* *---------------------**/
   /* * hold order          **/
   /* *---------------------**/


  if (PK0IW01.PK0IWFL7 == "O" /* order being processed*/
   && PK0IM010.PK0IMACT[PK0IWNX3] == "H") /* create order hold row*/
    set PKBREC empty;
    PKBREC.XWHCD = PKWREC.XWHCD;
    PK0IW01.PK0IWPTN = PK0IM010.PK1CUOID;
    PKBREC.PK1PRTN = PK0IW01.PK0IWPRT;
    PKBREC.PK1CUOID = PK0IM010.PK1CUOID;
    PKBREC.PK1NORID = PK0IM010.PK1NORID;
    PKBREC.XHRCD = PK0IM010.PK0IMRES[PK0IWNX3];

  /* --------------------- Y2K OUT BEGIN -----------/**/
    /* MOVE 19 TO PK0IW01.PK0IWFCT;*/
    /* MOVE EZEDTE TO PK0IW01.PK0IWFDA;*/
  /* --------------------- Y2K OUT END -------------/**/

  /* ===================== Y2K IN BEGIN ===========/**/
    PK0IW01.PK0IWFDT = VGVar.currentGregorianDate;
  /* ===================== Y2K IN END =============/**/

    PKBREC.ZZZCHGDT = PK0IW01.PK0IWFDT; /* change date*/
    PKBREC.ZZZCHGCT = 0; /* change count*/
    PKBREC.XXXUSRID = COMMAREA.CAUSERID;
    PK0IW01.PK0IWTIM = VGVar.currentFormattedTime;
    PK0IW01.PK0IWTHH = PK0IW01.PK0IWHH;
    PK0IW01.PK0IWTMM = PK0IW01.PK0IWMI;
    PKBREC.ZZZCHGTM = PK0IW01.PK0IWTI; /* change time*/
    PK0IW01.PK0IWFYY = PK0IM010.PK0IMYY[PK0IWNX3];
    PK0IW01.PK0IWFMM = PK0IM010.PK0IMMM[PK0IWNX3];
    PK0IW01.PK0IWFDD = PK0IM010.PK0IMDD[PK0IWNX3];

    /* ====== Y2K IN BEGIN =======*/

    if (PK0IM010.PK0IMYY[PK0IWNX3] < 60)
      PK0IW01.PK0IWFCT = 20;
    else
      PK0IW01.PK0IWFCT = 19;
    end

    /* ====== Y2K IN END =======*/

    PKBREC.PKBRELDT = PK0IW01.PK0IWFDT;

    /* --5/16/89--- if release date is not '999999' subtract a from*/
    /* ------------ release date and move to the plan release date*/

    if (PK0IW01.PK0IWFYY != 99
     || PK0IW01.PK0IWFMM != 99
     || PK0IW01.PK0IWFDD != 99)

      set TA9REC empty;
      TA9REC.TA9BEGDT = PK0IW01.PK0IWFDT;
      TA9REC.TA9OFSET = -1;

      try
        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
      end /* subtract 1 from date*/

      /* ------------------------------------------------------------*/
       /* if successful, move date and continue through process*/
      /* ------------------------------------------------------------*/

      if (sysVar.errorCode == "00000000" /* call successful*/
       && TA9REC.TA9RTNFL == 0)          /* and normal return codes*/

        PKBREC.PKBPLRDT = TA9REC.TA9RTNDT;
        PK0IM010.PK0IMPYY[PK0IWNX3] = TA9REC.TA9RTNYY;
        PK0IM010.PK0IMPMM[PK0IWNX3] = TA9REC.TA9RTNMM;
        PK0IM010.PK0IMPDD[PK0IWNX3] = TA9REC.TA9RTNDD;

      else

        /* ------------------------------------------------------------*/
         /* otherwise indicate that a system error has occurred*/
        /* ------------------------------------------------------------*/

        TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return codes*/
        TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* subroutine parameters*/
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* termination function*/
        TA1REC.TA1TYPE = "APPL"; /* type of error*/
        TA1REC.TA1LOC = "UPDATE PLAN RELEASE DATE";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
        TA1REC.TA1PGMNO = "410"; /* program number*/
        TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* map application*/
        TA1REC.TA1MAPNO = "M010"; /* map number*/

        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/

        exit stack;

      end

    else

      /* === Y2K OUT BEGIN ======*/

      /* MOVE PK0IW01.PK0IWFDT TO PKBREC.PKBPLRDT;*/

      /* === Y2K OUT END ======*/

      /* ======  Y2K IN BEGIN ========*/

       /* ALL 9'S TO BOTH THE PLANNED AND ACTUAL RELEASE DATE FIELDS*/

      PK0IW01.PK0IWFCT = 99;
      PKBREC.PKBRELDT = PK0IW01.PK0IWFDT;

      /* ======  Y2K IN END ========*/

      PK0IM010.PK0IMPYY[PK0IWNX3] = PK0IM010.PK0IMYY[PK0IWNX3];
      PK0IM010.PK0IMPMM[PK0IWNX3] = PK0IM010.PK0IMMM[PK0IWNX3];
      PK0IM010.PK0IMPDD[PK0IWNX3] = PK0IM010.PK0IMDD[PK0IWNX3];


    end

  /* --------------------- Y2K OUT BEGIN -----------/**/
    /* IF PKBREC.PKBRELDT GT 19991231;*/
  /* --------------------- Y2K OUT END -------------/**/

    /* ====== Y2K IN BEGIN ======*/

    if (PKBREC.PKBRELDT > 20431231)

      /* ====== Y2K IN END ======*/

      PKBREC.PKBRELDT = 999999999;
      PKBREC.PKBPLRDT = 999999999;
    end

    PKZREC.PKZFUNC = "A ";
    call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes}; /* add order hold row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      converseLib.validationFailed(32);
      PK0I520(); /* update order hold flag on pool hdr*/
      PK0IM010.PK0IMACT[PK0IWNX3] = " ";
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(28); /* contention for data base resorce*/
        set PK0IM010.PK1CUOID cursor, bold;
        set PK0IM010.PK1NORID bold;
        set PK0IM010.PK0IMRES[PK0IWNX3] bold;
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I510 "; /* Process name*/
        TA1REC.TA1LOC = "ADD                      ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        set PK0IM010.PK1CUOID cursor, bold;
        set PK0IM010.PK1NORID bold;
        set PK0IM010.PK0IMRES[PK0IWNX3] bold;
      end
    end
  end


   /* *---------------------**/
   /* * release order       **/
   /* *---------------------**/


  if (PK0IW01.PK0IWFL7 == "O" /* order being processed*/
   && PK0IM010.PK0IMACT[PK0IWNX3] == "R") /* release*/
    set PKBREC empty;
    PKBREC.XWHCD = PKWREC.XWHCD;
    PKBREC.PK1CUOID = PK0IM010.PK1CUOID;
    PKBREC.PK1NORID = PK0IM010.PK1NORID;
    PKBREC.XHRCD = PK0IM010.PK0IMRES[PK0IWNX3];
    PKZREC.PKZFUNC = "D ";
    call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes}; /* delete order hold row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      converseLib.validationFailed(32);
      PK0IM010.PK0IMRES[PK0IWNX3] = " ";
      PK0IM010.XHRABRV[PK0IWNX3] = " ";
      PK0IM010.PK0IMMM[PK0IWNX3] = 0;
      PK0IM010.PK0IMDD[PK0IWNX3] = 0;
      PK0IM010.PK0IMYY[PK0IWNX3] = 0;
      PK0IM010.PK0IMPMM[PK0IWNX3] = 0;
      PK0IM010.PK0IMPDD[PK0IWNX3] = 0;
      PK0IM010.PK0IMPYY[PK0IWNX3] = 0;
      PK0I520(); /* update order hold flag on pool hdr*/
      PK0I526(); /* check brand code for the order*/
      PK0IM010.PK0IMACT[PK0IWNX3] = " ";
      set PK0IM010.PK0IMRES[PK0IWNX3] normal;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        set PK0IM010.PK1CUOID cursor, bold;
        set PK0IM010.PK1NORID bold;
        set PK0IM010.PK0IMRES[PK0IWNX3] bold;
        converseLib.validationFailed(28); /* contention for data base resorce*/
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          PK0IW01.PK0IWFLD = "Y"; /* order error flag*/
          set PK0IM010.PK1CUOID cursor, bold;
          set PK0IM010.PK1NORID bold;
          set PK0IM010.PK0IMRES[PK0IWNX3] bold;
          converseLib.validationFailed(69); /* row not found for delete*/
        else
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0I510 "; /* Process name*/
          TA1REC.TA1LOC = "DELETE                   ";
          TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

          set PK0IM010.PK1CUOID cursor, bold;
          set PK0IM010.PK1NORID bold;
          set PK0IM010.PK0IMRES[PK0IWNX3] bold;
        end
      end
    end
  end


   /* *---------------------**/
   /* * change order        **/
   /* *  release date       **/
   /* *---------------------**/


  if (PK0IW01.PK0IWFL7 == "O" /* order being processed*/
   && PK0IM010.PK0IMACT[PK0IWNX3] == "C") /* change release date*/
    set PKBREC empty;
    PKBREC.XWHCD = PKWREC.XWHCD;
    PKBREC.PK1CUOID = PK0IM010.PK1CUOID;
    PKBREC.PK1NORID = PK0IM010.PK1NORID;
    PKBREC.XHRCD = PK0IM010.PK0IMRES[PK0IWNX3];
    PKZREC.PKZFUNC = "S ";
    call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(69); /* row not found for change*/
        PK0IW01.PK0IWFLD = "Y"; /* order error flag*/
        set PK0IM010.PK1CUOID cursor, bold;
        set PK0IM010.PK1NORID bold;
        set PK0IM010.PK0IMRES[PK0IWNX3] bold;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(28); /* contention for data base resorce*/
          set PK0IM010.PK1CUOID cursor, bold;
          set PK0IM010.PK1NORID bold;
          set PK0IM010.PK0IMRES[PK0IWNX3] bold;
        else
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0I510 "; /* Process name*/
          TA1REC.TA1LOC = "SELECT UNIQUE            ";
          TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

          set PK0IM010.PK1CUOID cursor, bold;
          set PK0IM010.PK1NORID bold;
          set PK0IM010.PK0IMRES[PK0IWNX3] bold;
        end
      end
    end
  end

  if (PK0IW01.PK0IWFL7 == "O"            /* order being processed*/
   && PK0IM010.PK0IMACT[PK0IWNX3] == "C" /* change release date*/
   && SQLCA.VAGen_SQLCODE == 0)          /* order hold row was found*/

  /* --------------------- Y2K OUT BEGIN -----------/**/
    /* MOVE 19 TO PK0IW01.PK0IWFCT;*/
    /* MOVE EZEDTE TO PK0IW01.PK0IWFDA;*/
  /* --------------------- Y2K OUT END -------------/**/


  /* --------------------- Y2K OUT BEGIN -----------/**/
    PK0IW01.PK0IWFDT = VGVar.currentGregorianDate;
  /* --------------------- Y2K OUT END -------------/**/

    PKBREC.ZZZCHGDT = PK0IW01.PK0IWFDT; /* change date*/
    PKBREC.XXXUSRID = COMMAREA.CAUSERID;
    PK0IW01.PK0IWTIM = VGVar.currentFormattedTime;
    PK0IW01.PK0IWTHH = PK0IW01.PK0IWHH;
    PK0IW01.PK0IWTMM = PK0IW01.PK0IWMI;
    PKBREC.ZZZCHGTM = PK0IW01.PK0IWTI; /* change time*/
    PK0IW01.PK0IWFYY = PK0IM010.PK0IMYY[PK0IWNX3];
    PK0IW01.PK0IWFMM = PK0IM010.PK0IMMM[PK0IWNX3];
    PK0IW01.PK0IWFDD = PK0IM010.PK0IMDD[PK0IWNX3];

    /* ====== Y2K IN BEGIN =======*/

    if (PK0IM010.PK0IMYY[PK0IWNX3] < 60)
      PK0IW01.PK0IWFCT = 20;
    else
      PK0IW01.PK0IWFCT = 19;
    end

    /* ====== Y2K IN END =======*/

    PKBREC.PKBRELDT = PK0IW01.PK0IWFDT;

    /* --5/16/89--- if release date is not '999999' subtract 1 from*/
    /* ------------ release date and move to the plan release date*/

    if (PK0IW01.PK0IWFYY != 99
     || PK0IW01.PK0IWFMM != 99
     || PK0IW01.PK0IWFDD != 99)

      set TA9REC empty;
      TA9REC.TA9BEGDT = PK0IW01.PK0IWFDT;
      TA9REC.TA9OFSET = -1;

      try
        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
      end /* subtract 1 from date*/

      /* ------------------------------------------------------------*/
       /* if successful, move date and continue through process*/
      /* ------------------------------------------------------------*/

      if (sysVar.errorCode == "00000000" /* call successful*/
       && TA9REC.TA9RTNFL == 0)          /* and normal return codes*/

        PKBREC.PKBPLRDT = TA9REC.TA9RTNDT;
        PK0IM010.PK0IMPYY[PK0IWNX3] = TA9REC.TA9RTNYY;
        PK0IM010.PK0IMPMM[PK0IWNX3] = TA9REC.TA9RTNMM;
        PK0IM010.PK0IMPDD[PK0IWNX3] = TA9REC.TA9RTNDD;

      else

        /* ------------------------------------------------------------*/
         /* otherwise indicate that a system error has occurred*/
        /* ------------------------------------------------------------*/

        TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return codes*/
        TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* subroutine parameters*/
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* termination function*/
        TA1REC.TA1TYPE = "APPL"; /* type of error*/
        TA1REC.TA1LOC = "UPDATE PLAN RELEASE DATE";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
        TA1REC.TA1PGMNO = "410"; /* program number*/
        TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* map application*/
        TA1REC.TA1MAPNO = "M010"; /* map number*/

        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/

        exit stack;

      end

    else

      /* === Y2K OUT BEGIN ======*/

      /* MOVE PK0IW01.PK0IWFDT TO PKBREC.PKBPLRDT;*/

      /* === Y2K OUT END ======*/


      /* ======  Y2K IN BEGIN ========*/

       /* IF 99 99 99 ENTERED DO THE SAME TO CENTURY*/

      PK0IW01.PK0IWFCT = 99;
      PKBREC.PKBRELDT = PK0IW01.PK0IWFDT;

      /* ======  Y2K IN END ========*/

      PK0IM010.PK0IMPYY[PK0IWNX3] = PK0IM010.PK0IMYY[PK0IWNX3];
      PK0IM010.PK0IMPMM[PK0IWNX3] = PK0IM010.PK0IMMM[PK0IWNX3];
      PK0IM010.PK0IMPDD[PK0IWNX3] = PK0IM010.PK0IMDD[PK0IWNX3];


    end

  /* --------------------- Y2K OUT BEGIN -----------/**/
    /* IF PKBREC.PKBRELDT GT 19991231;*/
  /* --------------------- Y2K OUT END -------------/**/


    /* ====== Y2K IN BEGIN ======*/

    if (PKBREC.PKBRELDT > 20431231)

      /* ====== Y2K IN END ======*/

      PKBREC.PKBRELDT = 999999999;
      PKBREC.PKBPLRDT = 999999999;
    end

    PKZREC.PKZFUNC = "U ";
    call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes}; /* update order hold row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      converseLib.validationFailed(32);
      PK0IM010.PK0IMACT[PK0IWNX3] = " ";
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        set PK0IM010.PK1CUOID cursor, bold;
        set PK0IM010.PK1NORID bold;
        set PK0IM010.PK0IMRES[PK0IWNX3] bold;
        converseLib.validationFailed(28); /* contention for data base resorce*/
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I510 "; /* Process name*/
        TA1REC.TA1LOC = "UPDATE                   ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        set PK0IM010.PK1CUOID cursor, bold;
        set PK0IM010.PK1NORID bold;
        set PK0IM010.PK0IMRES[PK0IWNX3] bold;
      end
    end
  end


                 /* C A R R I E R*/
                 /* | | | | | | |*/
                 /* V V V V V V V*/


   /* *---------------------**/
   /* * hold carrier        **/
   /* *---------------------**/


  if (PK0IW01.PK0IWFL7 == "R" /* carrier being processed*/
   && PK0IM010.PK0IMACT[PK0IWNX3] == "H") /* create carrier hold row*/
    set PWFREC empty;
    PWFREC.XWHCD = PKWREC.XWHCD;
    PWFREC.TF1CARCD = PK0IM010.TF1CARCD;
    PWFREC.XHRCD = PK0IM010.PK0IMRES[PK0IWNX3];

  /* --------------------- Y2K OUT BEGIN -----------/**/
    /* MOVE 19 TO PK0IW01.PK0IWFCT;*/
    /* MOVE EZEDTE TO PK0IW01.PK0IWFDA;*/
  /* --------------------- Y2K OUT END -------------/**/


  /* --------------------- Y2K IN BEGIN -----------/**/
    PK0IW01.PK0IWFDT = VGVar.currentGregorianDate;
  /* --------------------- Y2K IN END -------------/**/

    PWFREC.ZZZCHGDT = PK0IW01.PK0IWFDT; /* change date*/
    PWFREC.ZZZCHGCT = 0; /* change count*/
    PWFREC.XXXUSRID = COMMAREA.CAUSERID;
    PK0IW01.PK0IWTIM = VGVar.currentFormattedTime;
    PK0IW01.PK0IWTHH = PK0IW01.PK0IWHH;
    PK0IW01.PK0IWTMM = PK0IW01.PK0IWMI;
    PWFREC.ZZZCHGTM = PK0IW01.PK0IWTI; /* change time*/
    PK0IW01.PK0IWFYY = PK0IM010.PK0IMYY[PK0IWNX3];
    PK0IW01.PK0IWFMM = PK0IM010.PK0IMMM[PK0IWNX3];
    PK0IW01.PK0IWFDD = PK0IM010.PK0IMDD[PK0IWNX3];

    /* ====== Y2K IN BEGIN =======*/

    if (PK0IM010.PK0IMYY[PK0IWNX3] < 60)
      PK0IW01.PK0IWFCT = 20;
    else
      PK0IW01.PK0IWFCT = 19;
    end

    /* ====== Y2K IN END =======*/

    PWFREC.PKBRELDT = PK0IW01.PK0IWFDT;

    /* --5/16/89--- if release date is not '999999' subtract 1 from*/
    /* ------------ release date and move to the plan release date*/

    if (PK0IW01.PK0IWFYY != 99
     || PK0IW01.PK0IWFMM != 99
     || PK0IW01.PK0IWFDD != 99)

      set TA9REC empty;
      TA9REC.TA9BEGDT = PK0IW01.PK0IWFDT;
      TA9REC.TA9OFSET = -1;

      try
        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
      end /* subtract 1 from date*/

      /* ------------------------------------------------------------*/
       /* if successful, move date and continue through process*/
      /* ------------------------------------------------------------*/

      if (sysVar.errorCode == "00000000" /* call successful*/
       && TA9REC.TA9RTNFL == 0)          /* and normal return codes*/

        PWFREC.PKBPLRDT = TA9REC.TA9RTNDT;
        PK0IM010.PK0IMPYY[PK0IWNX3] = TA9REC.TA9RTNYY;
        PK0IM010.PK0IMPMM[PK0IWNX3] = TA9REC.TA9RTNMM;
        PK0IM010.PK0IMPDD[PK0IWNX3] = TA9REC.TA9RTNDD;

      else

        /* ------------------------------------------------------------*/
         /* otherwise indicate that a system error has occurred*/
        /* ------------------------------------------------------------*/

        TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return codes*/
        TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* subroutine parameters*/
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* termination function*/
        TA1REC.TA1TYPE = "APPL"; /* type of error*/
        TA1REC.TA1LOC = "UPDATE PLAN RELEASE DATE";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
        TA1REC.TA1PGMNO = "410"; /* program number*/
        TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* map application*/
        TA1REC.TA1MAPNO = "M010"; /* map number*/

        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/

        exit stack;

      end

    else


      /* === Y2K OUT BEGIN ======*/

      PWFREC.PKBPLRDT = PK0IW01.PK0IWFDT;

      /* === Y2K OUT END ======*/

      /* ======  Y2K IN BEGIN ========*/

       /* IF 99 99 99 ENTERED DO THE SAME TO CENTURY*/

      PK0IW01.PK0IWFCT = 99;
      PWFREC.PKBRELDT = PK0IW01.PK0IWFDT;

      /* ======  Y2K IN END ========*/

      PK0IM010.PK0IMPYY[PK0IWNX3] = PK0IM010.PK0IMYY[PK0IWNX3];
      PK0IM010.PK0IMPMM[PK0IWNX3] = PK0IM010.PK0IMMM[PK0IWNX3];
      PK0IM010.PK0IMPDD[PK0IWNX3] = PK0IM010.PK0IMDD[PK0IWNX3];

    end

  /* --------------------- Y2K OUT BEGIN -----------/**/
    /* IF PWFREC.PKBRELDT GT 19991231;*/
  /* --------------------- Y2K OUT END -------------/**/


    /* ====== Y2K IN BEGIN ======*/

    if (PWFREC.PKBRELDT > 20431231)

      /* ====== Y2K IN END ======*/

      PWFREC.PKBRELDT = 999999999;
      PWFREC.PKBPLRDT = 999999999;
    end

    PKZREC.PKZFUNC = "A ";
    call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes}; /* add carrier hold row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      converseLib.validationFailed(32);
      PK0IM010.PK0IMACT[PK0IWNX3] = " ";
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(28); /* contention for data base resorce*/
        set PK0IM010.TF1CARCD cursor, bold;
        set PK0IM010.PK0IMRES[PK0IWNX3] bold;
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I510 "; /* Process name*/
        TA1REC.TA1LOC = "ADD                      ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        set PK0IM010.TF1CARCD cursor, bold;
        set PK0IM010.PK0IMRES[PK0IWNX3] bold;
      end
    end
  end


   /* *---------------------**/
   /* * release carrier     **/
   /* *---------------------**/


  if (PK0IW01.PK0IWFL7 == "R" /* carrier being processed*/
   && PK0IM010.PK0IMACT[PK0IWNX3] == "R") /* release*/
    set PWFREC empty;
    PWFREC.XWHCD = PKWREC.XWHCD;
    PWFREC.TF1CARCD = PK0IM010.TF1CARCD;
    PWFREC.XHRCD = PK0IM010.PK0IMRES[PK0IWNX3];
    PKZREC.PKZFUNC = "D ";
    call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
                                   /* delete carrier hold row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      converseLib.validationFailed(32);
      PK0IM010.PK0IMRES[PK0IWNX3] = " ";
      PK0IM010.PK0IMACT[PK0IWNX3] = " ";
      PK0IM010.XHRABRV[PK0IWNX3] = " ";
      PK0IM010.PK0IMMM[PK0IWNX3] = 0;
      PK0IM010.PK0IMDD[PK0IWNX3] = 0;
      PK0IM010.PK0IMYY[PK0IWNX3] = 0;
      PK0IM010.PK0IMPMM[PK0IWNX3] = 0;
      PK0IM010.PK0IMPDD[PK0IWNX3] = 0;
      PK0IM010.PK0IMPYY[PK0IWNX3] = 0;
      set PK0IM010.PK0IMRES[PK0IWNX3] normal;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        set PK0IM010.TF1CARCD cursor, bold;
        set PK0IM010.PK0IMRES[PK0IWNX3] bold;
        converseLib.validationFailed(28); /* contention for data base resorce*/
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          set PK0IM010.TF1CARCD cursor, bold;
          set PK0IM010.PK0IMRES[PK0IWNX3] bold;
          PK0IW01.PK0IWFLE = "Y";
          converseLib.validationFailed(279); /* row not found for delete*/
        else
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0I510 "; /* Process name*/
          TA1REC.TA1LOC = "DELETE                   ";
          TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

          set PK0IM010.TF1CARCD cursor, bold;
          set PK0IM010.PK0IMRES[PK0IWNX3] bold;
        end
      end
    end
  end


   /* *---------------------**/
   /* * change carrier      **/
   /* *  release date       **/
   /* *---------------------**/


  if (PK0IW01.PK0IWFL7 == "R" /* carrier being processed*/
   && PK0IM010.PK0IMACT[PK0IWNX3] == "C") /* change release date*/
    set PWFREC empty;
    PWFREC.XWHCD = PKWREC.XWHCD;
    PWFREC.TF1CARCD = PK0IM010.TF1CARCD;
    PWFREC.XHRCD = PK0IM010.PK0IMRES[PK0IWNX3];
    PKZREC.PKZFUNC = "S ";
    call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(279); /* row not found for change*/
        PK0IW01.PK0IWFLE = "Y"; /* carrier error flag*/
        set PK0IM010.TF1CARCD cursor, bold;
        set PK0IM010.PK0IMRES[PK0IWNX3] bold;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(28); /* contention for data base resorce*/
          set PK0IM010.TF1CARCD cursor, bold;
          set PK0IM010.PK0IMRES[PK0IWNX3] bold;
        else
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0I510 "; /* Process name*/
          TA1REC.TA1LOC = "SELECT UNIQUE            ";
          TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

        end
      end
    end
  end

  if (PK0IW01.PK0IWFL7 == "R" /* carrier being processed*/
   && PK0IM010.PK0IMACT[PK0IWNX3] == "C"
   && SQLCA.VAGen_SQLCODE == 0) /* successful*/

  /* --------------------- Y2K OUT BEGIN -----------/**/
    /* MOVE 19 TO PK0IW01.PK0IWFCT;*/
    /* MOVE EZEDTE TO PK0IW01.PK0IWFDA;*/
  /* --------------------- Y2K OUT END -------------/**/


  /* --------------------- Y2K IN BEGIN -----------/**/
    PK0IW01.PK0IWFDT = VGVar.currentGregorianDate;
  /* --------------------- Y2K IN END -------------/**/

    PWFREC.ZZZCHGDT = PK0IW01.PK0IWFDT; /* change date*/
    PWFREC.XXXUSRID = COMMAREA.CAUSERID;
    PK0IW01.PK0IWTIM = VGVar.currentFormattedTime;
    PK0IW01.PK0IWTHH = PK0IW01.PK0IWHH;
    PK0IW01.PK0IWTMM = PK0IW01.PK0IWMI;
    PWFREC.ZZZCHGTM = PK0IW01.PK0IWTI; /* change time*/
    PK0IW01.PK0IWFYY = PK0IM010.PK0IMYY[PK0IWNX3];
    PK0IW01.PK0IWFMM = PK0IM010.PK0IMMM[PK0IWNX3];
    PK0IW01.PK0IWFDD = PK0IM010.PK0IMDD[PK0IWNX3];

    /* ====== Y2K IN BEGIN =======*/

    if (PK0IM010.PK0IMYY[PK0IWNX3] < 60)
      PK0IW01.PK0IWFCT = 20;
    else
      PK0IW01.PK0IWFCT = 19;
    end

    /* ====== Y2K IN END =======*/

    PWFREC.PKBRELDT = PK0IW01.PK0IWFDT;

    /* --5/16/89--- if release date is not '999999' subtract 1 from*/
    /* ------------ release date and move to the plan release date*/

    if (PK0IW01.PK0IWFYY != 99
     || PK0IW01.PK0IWFMM != 99
     || PK0IW01.PK0IWFDD != 99)

      set TA9REC empty;
      TA9REC.TA9BEGDT = PK0IW01.PK0IWFDT;
      TA9REC.TA9OFSET = -1;

      try
        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
      end /* subtract 1 from date*/

      /* ------------------------------------------------------------*/
       /* if successful, move date and continue through process*/
      /* ------------------------------------------------------------*/

      if (sysVar.errorCode == "00000000" /* call successful*/
       && TA9REC.TA9RTNFL == 0)          /* and normal return codes*/

        PWFREC.PKBPLRDT = TA9REC.TA9RTNDT;
        PK0IM010.PK0IMPYY[PK0IWNX3] = TA9REC.TA9RTNYY;
        PK0IM010.PK0IMPMM[PK0IWNX3] = TA9REC.TA9RTNMM;
        PK0IM010.PK0IMPDD[PK0IWNX3] = TA9REC.TA9RTNDD;

      else

        /* ------------------------------------------------------------*/
         /* otherwise indicate that a system error has occurred*/
        /* ------------------------------------------------------------*/

        TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return codes*/
        TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* subroutine parameters*/
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* termination function*/
        TA1REC.TA1TYPE = "APPL"; /* type of error*/
        TA1REC.TA1LOC = "UPDATE PLAN RELEASE DATE";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
        TA1REC.TA1PGMNO = "410"; /* program number*/
        TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* map application*/
        TA1REC.TA1MAPNO = "M010"; /* map number*/

        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/

        exit stack;

      end

    else

      /* === Y2K OUT BEGIN ======*/

     /* MOVE PK0IW01.PK0IWFDT TO PWFREC.PKBPLRDT;*/

      /* === Y2K OUT END ======*/


      /* ======  Y2K IN BEGIN ========*/

       /* IF 99 99 99 ENTERED DO THE SAME TO CENTURY*/

      PK0IW01.PK0IWFCT = 99;
      PWFREC.PKBRELDT = PK0IW01.PK0IWFDT;

      /* ======  Y2K IN END ========*/

      PK0IM010.PK0IMPYY[PK0IWNX3] = PK0IM010.PK0IMYY[PK0IWNX3];
      PK0IM010.PK0IMPMM[PK0IWNX3] = PK0IM010.PK0IMMM[PK0IWNX3];
      PK0IM010.PK0IMPDD[PK0IWNX3] = PK0IM010.PK0IMDD[PK0IWNX3];


    end

  /* --------------------- Y2K OUT BEGIN -----------/**/
    /* IF PWFREC.PKBRELDT GT 19991231;*/
  /* --------------------- Y2K OUT END -------------/**/

    /* ====== Y2K IN BEGIN ======*/

    if (PWFREC.PKBRELDT > 20431231)

      /* ====== Y2K IN END ======*/

      PWFREC.PKBRELDT = 999999999;
      PWFREC.PKBPLRDT = 999999999;
    end

    PKZREC.PKZFUNC = "U ";
    call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
                                   /* update carrier hold row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      converseLib.validationFailed(32);
      PK0IM010.PK0IMACT[PK0IWNX3] = " ";
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        set PK0IM010.TF1CARCD cursor, bold;
        set PK0IM010.PK0IMRES[PK0IWNX3] bold;
        converseLib.validationFailed(28); /* contention for data base resorce*/
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I510 "; /* Process name*/
        TA1REC.TA1LOC = "UPDATE                   ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        set PK0IM010.TF1CARCD cursor, bold;
        set PK0IM010.PK0IMRES[PK0IWNX3] bold;
      end
    end
  end








  PK0IW01.PK0IWNX3 = PK0IW01.PK0IWNX3 - 1; /* decrement index*/



   /* ----- end pk0i510*/
end // end PK0I510

// update pool header hld-cd
Function PK0I520()

   /* ----- pk0i520*/
   /* ----- update pool header hold code*/


  PK0IM010.XXXERRID = "PK0I520";



   /* ----- if line items are not being processed*/
   /* -----     set index to 1 so it won't blow up*/
  if (PK0IW01.PK0IWFL8 != "Y")
    PK0IW01.PK0IWNX3 = 1;
  end



   /* ----- if action field is 'h' for hold*/
   /* -----     update the pool header hold code to 'y'*/
   /* -----     for the order being processed*/
  if (PK0IM010.PK0IMORA == "H" /* put order on hold*/
   || PK0IM010.PK0IMACT[PK0IWNX3] == "H")
    set PK4REC empty;
    PK4REC.XWHCD = PKWREC.XWHCD;
    PK4REC.PK1CUOID = PK0IM010.PK1CUOID;
    PK4REC.PK1NORID = PK0IM010.PK1NORID;
    PWIREC.PWIFUNC = "S ";
    call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
                                  /* on pool header*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        converseLib.validationFailed(70);
                                   /* update successful but order*/
                                  /* was not on the pool*/
        return;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(21); /* contention for data base resorce*/
          set PK0IM010.PK1CUOID cursor, modified, bold;
          set PK0IM010.PK1NORID modified, bold;
          return;
        else
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0I520 "; /* Process name*/
          TA1REC.TA1LOC = "SELECT UNIQUE            ";
          TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

          set PK0IM010.PK1CUOID cursor, modified, bold;
          set PK0IM010.PK1NORID modified, bold;
          return;
        end
      end
    end
  end

  if (PK0IM010.PK0IMORA == "H" /* put order on hold*/
   || PK0IM010.PK0IMACT[PK0IWNX3] == "H")
    if (SQLCA.VAGen_SQLCODE == 0 /* successful*/
     && PK4REC.PK4ORHLD != "Y") 
      PK4REC.PK4ORHLD = "Y";

  /* --------------------- Y2K OUT BEGIN -----------/**/
      /* MOVE 19 TO PK0IW01.PK0IWFCT;*/
      /* MOVE EZEDTE TO PK0IW01.PK0IWFDA;*/
  /* --------------------- Y2K OUT END -------------/**/


  /* --------------------- Y2K OUT BEGIN -----------/**/
      PK0IW01.PK0IWFDT = VGVar.currentGregorianDate;
  /* --------------------- Y2K OUT END -------------/**/

      PK4REC.ZZZCHGDT = PK0IW01.PK0IWFDT; /* change date*/
      PK0IW01.PK0IWTIM = VGVar.currentFormattedTime;
      PK0IW01.PK0IWTHH = PK0IW01.PK0IWHH;
      PK0IW01.PK0IWTMM = PK0IW01.PK0IWMI;
      PK4REC.ZZZCHGTM = PK0IW01.PK0IWTI; /* change time*/
      PWIREC.PWIFUNC = "U ";
      call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* update*/
      if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
        converseLib.validationFailed(32);
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(21); /* contention for data base resorce*/
          set PK0IM010.PK1CUOID cursor, modified, bold;
          set PK0IM010.PK1NORID modified, bold;
          return;
        else
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0I520 "; /* Process name*/
          TA1REC.TA1LOC = "UPDATE                   ";
          TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

          set PK0IM010.PK1CUOID cursor, modified, bold;
          set PK0IM010.PK1NORID modified, bold;
          return;
        end
      end
    end
  end











   /* ----- if action field is 'r' for release*/
   /* -----     find out if their are any more hold rows*/
   /* -----     left for that order.*/
   /* -----     if not*/
   /* -----         update the pool header hold code to 'n'*/
   /* -----         for the order being processed*/
  if (PK0IM010.PK0IMORA == "R" /* order released*/
   || PK0IM010.PK0IMACT[PK0IWNX3] == "R")
    set PKBREC empty;
    PKBREC.XWHCD = PKWREC.XWHCD;
    PKBREC.PK1CUOID = PK0IM010.PK1CUOID;
    PKBREC.PK1NORID = PK0IM010.PK1NORID;
    PKBREC.XHRCD = "*";
    PKZREC.PKZFUNC = "S ";
    call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
    if (SQLCA.VAGen_SQLCODE == 100) /* no rows found*/
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 0 /* successful*/
       || SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
        return;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(21); /* contention for data base resorce*/
          set PK0IM010.PK1CUOID cursor, modified, bold;
          set PK0IM010.PK1NORID modified, bold;
          return;
        else
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0I520 "; /* Process name*/
          TA1REC.TA1LOC = "SELECT UNIQUE            ";
          TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/
          set PK0IM010.PK1CUOID cursor, modified, bold;
          set PK0IM010.PK1NORID modified, bold;

          return;
        end
      end
    end
  end

  if (PK0IM010.PK0IMORA == "R" /* order released*/
   || PK0IM010.PK0IMACT[PK0IWNX3] == "R")
    if (SQLCA.VAGen_SQLCODE == 100) /* no more hold records*/
                                  /* for this order*/
      set PK4REC empty;
      PK4REC.XWHCD = PKWREC.XWHCD;
      PK4REC.PK1CUOID = PK0IM010.PK1CUOID;
      PK4REC.PK1NORID = PK0IM010.PK1NORID;
      PWIREC.PWIFUNC = "S ";
      call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
                                  /* on pool header*/
      if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
         /* next sentence*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
          converseLib.validationFailed(70);
                                   /* update successful but order*/
                                  /* was not on the pool*/
          return;
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            converseLib.validationFailed(21); /* contention for data base resorce*/
            set PK0IM010.PK1CUOID cursor, modified, bold;
            set PK0IM010.PK1NORID modified, bold;
            return;
          else
            converseLib.validationFailed(29); /* fatal error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0I520 "; /* Process name*/
            TA1REC.TA1LOC = "SELECT UNIQUE            ";
            TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
            TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diag routine*/

            set PK0IM010.PK1CUOID cursor, modified, bold;
            set PK0IM010.PK1NORID modified, bold;
            return;
          end
        end
      end
    end
  end

  if (PK0IM010.PK0IMORA == "R" /* order released*/
   || PK0IM010.PK0IMACT[PK0IWNX3] == "R")
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      PK4REC.PK4ORHLD = "N";

  /* --------------------- Y2K OUT BEGIN -----------/**/
     /* MOVE 19 TO PK0IW01.PK0IWFCT;*/
     /* MOVE EZEDTE TO PK0IW01.PK0IWFDA;*/
  /* --------------------- Y2K OUT END -------------/**/


  /* --------------------- Y2K OUT BEGIN -----------/**/
      PK0IW01.PK0IWFDT = VGVar.currentGregorianDate;
  /* --------------------- Y2K OUT END -------------/**/

      PK4REC.ZZZCHGDT = PK0IW01.PK0IWFDT; /* change date*/
      PK0IW01.PK0IWTIM = VGVar.currentFormattedTime;
      PK0IW01.PK0IWTHH = PK0IW01.PK0IWHH;
      PK0IW01.PK0IWTMM = PK0IW01.PK0IWMI;
      PK4REC.ZZZCHGTM = PK0IW01.PK0IWTI; /* change time*/
      PWIREC.PWIFUNC = "U ";
      call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* update*/
      if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
        converseLib.validationFailed(32);
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(21); /* contention for data base resorce*/
          set PK0IM010.PK1CUOID cursor, modified, bold;
          set PK0IM010.PK1NORID modified, bold;
          return;
        else
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0I520 "; /* Process name*/
          TA1REC.TA1LOC = "UPDATE                   ";
          TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

          set PK0IM010.PK1CUOID cursor, modified, bold;
          set PK0IM010.PK1NORID modified, bold;
          return;
        end
      end
    end
  end







   /* ----- end pk0i520*/
end // end PK0I520

// verify brand code for orders
Function PK0I526()
  if (PK0IW01.PK0IWFL7 == "O") /* if order option*/

    if (PK0IM010.XBCCD != " ") /* screen has brand code*/

      if (PK4REC.XBCCD != " "            /* pool rec has brand*/
       && PK4REC.XBCCD != PK0IM010.XBCCD /* which doesn't match scrn*/
       && PK4REC.PK1CUOID == PK0IM010.PK1CUOID)
                                   /* is the pool rec current*/
        PK0IM010.XXXERRID = "PK0I526 ";
        PK0IM010.XBCCD = PK4REC.XBCCD; /* move pk4 brand to map*/
        if (converseVar.validationMsgNum == 0) /* if no other msgs*/
          converseLib.validationFailed(423); /* display msg brand override*/
        end
      end

    else /* screen has no brand code*/

      if (PK4REC.PK1CUOID == PK0IM010.PK1CUOID)
                                   /* is the pool rec current*/

        PK0IM010.XBCCD = PK4REC.XBCCD; /* move pool brand to map*/

      end
    end
  end



   /* ----- end pk0i526*/
end // end PK0I526

// update pool header hld-cd
Function PK0I530()

   /* *---------------------------------------------------**/
   /* *     pk0i530                                       **/
   /* *     update pool header customer hold code         **/
   /* *---------------------------------------------------**/


  PK0IM010.XXXERRID = "PK0I530";


   /* *---------------------------------------------------**/
   /* *  if line items are not being processed            **/
   /* *    set index to 1 so it won't blow up             **/
   /* *---------------------------------------------------**/

  if (PK0IW01.PK0IWFL8 != "Y")
    PK0IW01.PK0IWNX3 = 1;
  end



   /* *---------------------------------------------------**/
   /* *---------------------------------------------------**/
   /* *  hold customer                                    **/
   /* *---------------------------------------------------**/
   /* *---------------------------------------------------**/



   /* *---------------------------------------------------**/
   /* *  if action field is 'h' for hold*/
   /* *      update the pool header customer hold code*/
   /* *      to 'y' for all orders for the customer*/
   /* *---------------------------------------------------**/

   /* check pool header - get first order for customer*/

  if (PK0IM010.PK0IMKUA == "H" /* put customer on hold*/
   || PK0IM010.PK0IMACT[PK0IWNX3] == "H")
    set PK4REC empty;

     /* declare cursor - get all orders for customer*/

    PK4REC.XWHCD = PKWREC.XWHCD;
    PK4REC.KUCCOID = PK0IM010.KUCCOID; /* company*/
    PK4REC.KUMSTRID = PK0IM010.KUMSTRID; /* store*/
    PK4REC.XNXCD = PK0IM010.XNXCD; /* dept*/
    PWIREC.PWIFUNC = "S2";
    call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* declare cursor*/
                                  /* on pool header - all orders*/
                                  /* for customer*/
     /* **  begin - test sql return code  ***/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(21); /* contention for data base resorce*/
        set PK0IM010.KUCCOID cursor, modified, bold;
        set PK0IM010.KUMSTRID cursor, modified, bold;
        set PK0IM010.XNXCD cursor, modified, bold;
        return;
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I530 "; /* Process name*/
        TA1REC.TA1LOC = "DECLARE CURSOR           ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        set PK0IM010.KUCCOID cursor, modified, bold;
        set PK0IM010.KUMSTRID cursor, modified, bold;
        set PK0IM010.XNXCD cursor, modified, bold;
        return;
      end
    end
     /* **  end   - test sql return code  ***/

     /* get first order for customer*/
       /* at end - move message and return*/

    PWIREC.PWIFUNC = "N2";
    call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* get next pool*/
                                  /* header for customer*/
     /* **  begin - test sql return code (fetch next)  ***/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

        converseLib.validationFailed(327); /* update successful but customer*/
                                  /* was not on the pool*/

        PWIREC.PWIFUNC = "C2";
        call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* close pool*/
                                  /* header cursor*/
         /* **  begin - test sql return code (close cursor)  ***/
        if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
           /* next sentence*/
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            converseLib.validationFailed(21); /* contention for data base resorce*/
            set PK0IM010.KUCCOID cursor, modified, bold;
            set PK0IM010.KUMSTRID cursor, modified, bold;
            set PK0IM010.XNXCD cursor, modified, bold;
            return;
          else
            converseLib.validationFailed(29); /* fatal error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0I530 "; /* Process name*/
            TA1REC.TA1LOC = "SELECT NEXT              ";
            TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
            TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

            set PK0IM010.KUCCOID cursor, modified, bold;
            set PK0IM010.KUMSTRID cursor, modified, bold;
            set PK0IM010.XNXCD cursor, modified, bold;
            return;
          end
        end
         /* **  end   - test sql return code (close cursor)  ***/

        return;

      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(21); /* contention for data base resorce*/
          set PK0IM010.KUCCOID cursor, modified, bold;
          set PK0IM010.KUMSTRID cursor, modified, bold;
          set PK0IM010.XNXCD cursor, modified, bold;
          return;
        else
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0I530 "; /* Process name*/
          TA1REC.TA1LOC = "SELECT NEXT              ";
          TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis*/
                                  /* routine*/
          set PK0IM010.KUCCOID cursor, modified, bold;
          set PK0IM010.KUMSTRID cursor, modified, bold;
          set PK0IM010.XNXCD cursor, modified, bold;
          return;
        end
      end
    end
     /* **  end   - test sql return code (fetch next)  ***/
  end

   /* if order found for customer - update cust hold flag on*/
    /* all orders for customer*/

  if (PK0IM010.PK0IMKUA == "H" /* put customer on hold*/
   || PK0IM010.PK0IMACT[PK0IWNX3] == "H")

    while (SQLCA.VAGen_SQLCODE == 0) /* begin loop*/

      if (PK4REC.PK4CUHLD != "Y")

         /* update customer hold code on pool header*/

        PK4REC.PK4CUHLD = "Y"; /* cust hold flag*/

  /* --------------------- Y2K OUT BEGIN -----------/**/
        /* MOVE 19 TO PK0IW01.PK0IWFCT;*/
        /* MOVE EZEDTE TO PK0IW01.PK0IWFDA;*/
  /* --------------------- Y2K OUT END -------------/**/


  /* --------------------- Y2K IN BEGIN -----------/**/
        PK0IW01.PK0IWFDT = VGVar.currentGregorianDate;
  /* --------------------- Y2K IN END -------------/**/

        PK4REC.ZZZCHGDT = PK0IW01.PK0IWFDT; /* change date*/
        PK0IW01.PK0IWTIM = VGVar.currentFormattedTime;
        PK0IW01.PK0IWTHH = PK0IW01.PK0IWHH;
        PK0IW01.PK0IWTMM = PK0IW01.PK0IWMI;
        PK4REC.ZZZCHGTM = PK0IW01.PK0IWTI; /* change time*/
        PWIREC.PWIFUNC = "U ";
        call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* update pool hdr*/
         /* **  begin - test sql return code  ***/
        if (SQLCA.VAGen_SQLCODE == 0) /* successful*/

          converseLib.validationFailed(32);

        else
          if (SQLCA.VAGen_SQLCODE == -911)
            converseLib.validationFailed(21); /* contention for data base resorce*/
            set PK0IM010.KUCCOID cursor, modified, bold;
            set PK0IM010.KUMSTRID cursor, modified, bold;
            set PK0IM010.XNXCD cursor, modified, bold;
            return;
          else
            converseLib.validationFailed(29); /* fatal error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0I530 "; /* Process name*/
            TA1REC.TA1LOC = "UPDATE                   ";
            TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
            TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error*/
                                  /* routine*/
            set PK0IM010.KUCCOID cursor, modified, bold;
            set PK0IM010.KUMSTRID cursor, modified, bold;
            set PK0IM010.XNXCD cursor, modified, bold;
            return;
          end
        end
         /* **  end - test sql return code    ***/

      end /* if cust hold code ne 'Y'*/

       /* get next order for customer*/

      PWIREC.PWIFUNC = "N2";
      call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* get next pool*/
                                  /* header for*/
                                  /* customer*/
       /* **  begin - test sql return code  ***/
      if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
         /* next sentence*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* no rows found*/
           /* next sentence*/
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            converseLib.validationFailed(21); /* contention for data base resorce*/
            set PK0IM010.KUCCOID cursor, modified, bold;
            set PK0IM010.KUMSTRID cursor, modified, bold;
            set PK0IM010.XNXCD cursor, modified, bold;
            return;
          else
            converseLib.validationFailed(29); /* fatal error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0I530 "; /* Process name*/
            TA1REC.TA1LOC = "SELECT NEXT              ";
            TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
            TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

            set PK0IM010.KUCCOID cursor, modified, bold;
            set PK0IM010.KUMSTRID cursor, modified, bold;
            set PK0IM010.XNXCD cursor, modified, bold;
            return;
          end
        end
      end
       /* **  end   - test sql return code  ***/


    end /* end loop - while sqlcode equal zero*/

     /* close pool header cursor after*/
       /* processing all orders for customer*/

    PWIREC.PWIFUNC = "C2";
    call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* close pool*/
                                  /* header cursor*/
     /* **  begin - test sql return code  ***/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(21); /* contention for data base resorce*/
        set PK0IM010.KUCCOID cursor, modified, bold;
        set PK0IM010.KUMSTRID cursor, modified, bold;
        set PK0IM010.XNXCD cursor, modified, bold;
        return;
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I530 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT NEXT              ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

        set PK0IM010.KUCCOID cursor, modified, bold;
        set PK0IM010.KUMSTRID cursor, modified, bold;
        set PK0IM010.XNXCD cursor, modified, bold;
        return;
      end

    end
     /* **  end   - test sql return code  ***/

  end /* if customer hold*/



   /* *---------------------------------------------------**/
   /* *---------------------------------------------------**/
   /* *  release customer                                 **/
   /* *---------------------------------------------------**/
   /* *---------------------------------------------------**/



   /* *---------------------------------------------------**/
   /* *  if action field is 'r' for release*/
   /* *    find out if their are any more hold rows*/
   /* *    left for that order.*/
   /* *    if not*/
   /* *      update the pool header cust hold code to 'n'*/
   /* *      for the all orders for customer*/
   /* *---------------------------------------------------**/

   /* test - any remaining cust hold codes?*/
     /* note:*/
      /* an order, customer, or carrier may have multiple*/
      /* hold codes. when all of the hold codes for a*/
      /* customer are deleted, the pool header customer*/
      /* hold flag is set to spaces.*/

  if (PK0IM010.PK0IMKUA == "R" /* customer released*/
   || PK0IM010.PK0IMACT[PK0IWNX3] == "R")
    set PK9REC empty;
    PK9REC.XWHCD = PKWREC.XWHCD;
    PK9REC.KUCCOID = PK0IM010.KUCCOID; /* company*/
    PK9REC.KUMSTRID = PK0IM010.KUMSTRID; /* store*/
    PK9REC.XNXCD = PK0IM010.XNXCD; /* dept*/
    PK9REC.XHRCD = "*";
    PKZREC.PKZFUNC = "S ";
    call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
                                  /* customer hold*/
     /* **  begin - test sql return code  ***/
    if (SQLCA.VAGen_SQLCODE == 100) /* no rows found*/
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 0 /* successful*/
       || SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
        return;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(21); /* contention for data base resorce*/
          set PK0IM010.KUCCOID cursor, modified, bold;
          set PK0IM010.KUMSTRID cursor, modified, bold;
          set PK0IM010.XNXCD cursor, modified, bold;
          return;
        else
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0I530 "; /* Process name*/
          TA1REC.TA1LOC = "SELECT UNIQUE            ";
          TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

          set PK0IM010.KUCCOID cursor, modified, bold;
          set PK0IM010.KUMSTRID cursor, modified, bold;
          set PK0IM010.XNXCD cursor, modified, bold;

          return;
        end
      end
    end
     /* **  end   - test sql return code  ***/
  end

   /* test - any remaining cust hold codes?*/
     /* note:*/
      /* an order, customer, or carrier may have multiple*/
      /* hold codes. when all of the hold codes for a*/
      /* customer are deleted, the pool header customer*/
      /* hold flag is set to spaces.*/

  if (PK0IM010.PK0IMKUA == "R" /* customer released*/
   || PK0IM010.PK0IMACT[PK0IWNX3] == "R")
    set PK4REC empty;

     /* declare cursor - get all orders for customer*/

    PK4REC.XWHCD = PKWREC.XWHCD;
    PK4REC.KUCCOID = PK0IM010.KUCCOID; /* company*/
    PK4REC.KUMSTRID = PK0IM010.KUMSTRID; /* store*/
    PK4REC.XNXCD = PK0IM010.XNXCD; /* dept*/
    PWIREC.PWIFUNC = "S2";
    call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* declare cursor*/
                                  /* on pool header - all orders*/
                                  /* for customer*/
     /* **  begin - test sql return code  ***/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(21); /* contention for data base resorce*/
        set PK0IM010.KUCCOID cursor, modified, bold;
        set PK0IM010.KUMSTRID cursor, modified, bold;
        set PK0IM010.XNXCD cursor, modified, bold;
        return;
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I530 "; /* Process name*/
        TA1REC.TA1LOC = "DECLARE CURSOR           ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        set PK0IM010.KUCCOID cursor, modified, bold;
        set PK0IM010.KUMSTRID cursor, modified, bold;
        set PK0IM010.XNXCD cursor, modified, bold;
        return;
      end
    end
     /* **  end   - test sql return code  ***/

     /* get first order for customer*/
       /* at end - close cursor*/

    PWIREC.PWIFUNC = "N2";
    call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* get next pool*/
                                  /* header for customer*/
     /* **  begin - test sql return code  ***/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

        converseLib.validationFailed(327); /* update successful but customer*/
                                  /* was not on the pool*/

        PWIREC.PWIFUNC = "C2";
        call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* close pool*/
                                  /* header cursor*/
         /* **  begin - test sql return code (close cursor)  ***/
        if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
           /* next sentence*/
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            converseLib.validationFailed(21); /* contention for data base resorce*/
            set PK0IM010.KUCCOID cursor, modified, bold;
            set PK0IM010.KUMSTRID cursor, modified, bold;
            set PK0IM010.XNXCD cursor, modified, bold;
            return;
          else
            converseLib.validationFailed(29); /* fatal error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0I530 "; /* Process name*/
            TA1REC.TA1LOC = "SELECT NEXT              ";
            TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
            TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

            set PK0IM010.KUCCOID cursor, modified, bold;
            set PK0IM010.KUMSTRID cursor, modified, bold;
            set PK0IM010.XNXCD cursor, modified, bold;
            return;
          end
        end
         /* **  end   - test sql return code (close cursor)  ***/

        return;

      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(21); /* contention for data base resorce*/
          set PK0IM010.KUCCOID cursor, modified, bold;
          set PK0IM010.KUMSTRID cursor, modified, bold;
          set PK0IM010.XNXCD cursor, modified, bold;
          return;
        else
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0I530 "; /* Process name*/
          TA1REC.TA1LOC = "SELECT NEXT              ";
          TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

          set PK0IM010.KUCCOID cursor, modified, bold;
          set PK0IM010.KUMSTRID cursor, modified, bold;
          set PK0IM010.XNXCD cursor, modified, bold;
          return;
        end
      end
    end
     /* **  end   - test sql return code  ***/
  end

   /* if order found for customer - update cust hold flag on*/
    /* all orders for customer*/

  if (PK0IM010.PK0IMKUA == "R" /* release customer*/
   || PK0IM010.PK0IMACT[PK0IWNX3] == "R")

    while (SQLCA.VAGen_SQLCODE == 0) /* begin loop*/

      if (PK4REC.PK4CUHLD != "N")

         /* update customer hold code on pool header*/

        PK4REC.PK4CUHLD = "N"; /* customer hold code*/

  /* --------------------- Y2K OUT BEGIN -----------/**/
       /* MOVE 19 TO PK0IW01.PK0IWFCT;*/
       /* MOVE EZEDTE TO PK0IW01.PK0IWFDA;*/
  /* --------------------- Y2K OUT END -------------/**/


  /* --------------------- Y2K IN BEGIN -----------/**/
        PK0IW01.PK0IWFDT = VGVar.currentGregorianDate;
  /* --------------------- Y2K IN END -------------/**/

        PK4REC.ZZZCHGDT = PK0IW01.PK0IWFDT; /* change date*/
        PK0IW01.PK0IWTIM = VGVar.currentFormattedTime;
        PK0IW01.PK0IWTHH = PK0IW01.PK0IWHH;
        PK0IW01.PK0IWTMM = PK0IW01.PK0IWMI;
        PK4REC.ZZZCHGTM = PK0IW01.PK0IWTI; /* change time*/
        PWIREC.PWIFUNC = "U ";
        call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* update pool hdr*/
         /* **  begin - test sql return code  ***/
        if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
          converseLib.validationFailed(32);
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            converseLib.validationFailed(21); /* contention for data base resorce*/
            set PK0IM010.KUCCOID cursor, modified, bold;
            set PK0IM010.KUMSTRID cursor, modified, bold;
            set PK0IM010.XNXCD cursor, modified, bold;
            return;
          else
            converseLib.validationFailed(29); /* fatal error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0I530 "; /* Process name*/
            TA1REC.TA1LOC = "UPDATE                   ";
            TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
            TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

            set PK0IM010.KUCCOID cursor, modified, bold;
            set PK0IM010.KUMSTRID cursor, modified, bold;
            set PK0IM010.XNXCD cursor, modified, bold;
            return;
          end
        end
         /* **  end   - test sql return code  ***/

      end /* if cust hold code ne 'N'*/

       /* get next order for customer*/

      PWIREC.PWIFUNC = "N2";
      call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* get next pool*/
                                  /* header for customer*/
       /* **  begin - test sql return code  ***/
      if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
         /* next sentence*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
           /* next sentence*/
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            converseLib.validationFailed(21); /* contention for data base resorce*/
            set PK0IM010.KUCCOID cursor, modified, bold;
            set PK0IM010.KUMSTRID cursor, modified, bold;
            set PK0IM010.XNXCD cursor, modified, bold;
            return;
          else
            converseLib.validationFailed(29); /* fatal error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0I530 "; /* Process name*/
            TA1REC.TA1LOC = "SELECT NEXT              ";
            TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
            TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

            set PK0IM010.KUCCOID cursor, modified, bold;
            set PK0IM010.KUMSTRID cursor, modified, bold;
            set PK0IM010.XNXCD cursor, modified, bold;
            return;
          end
        end
      end
       /* **  end   - test sql return code  ***/

    end /* end loop - while sqlcode equal zero*/

     /* close pool header cursor after*/
       /* processing all orders for customer*/

    PWIREC.PWIFUNC = "C2";
    call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* close pool*/
                                  /* header cursor*/
     /* **  begin - test sql return code  ***/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(21); /* contention for data base resorce*/
        set PK0IM010.KUCCOID cursor, modified, bold;
        set PK0IM010.KUMSTRID cursor, modified, bold;
        set PK0IM010.XNXCD cursor, modified, bold;
        return;
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I530 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT NEXT              ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

        set PK0IM010.KUCCOID cursor, modified, bold;
        set PK0IM010.KUMSTRID cursor, modified, bold;
        set PK0IM010.XNXCD cursor, modified, bold;
        return;
      end

    end
     /* **  end   - test sql return code  ***/

  end /* if customer release*/





   /* *---------------------------------------------------**/
   /* *     end pk0i530                                   **/
   /* *---------------------------------------------------**/
end // end PK0I530

// Year 2000 dates
Function PK0IS10()

   /* Date windowing for Year 2000*/

  if (PK0IW01.PK0IWRYY > 60)
    PK0IW01.PK0IWRCC = 19;
  else
    PK0IW01.PK0IWRCC = 20;
  end
end // end PK0IS10

Record PK0IW01 type basicRecord
  3 PK0IWGRP PK0IWGRP ; 
    5 PK0IWFL1 PK0IWFL1 ; 
    5 PK0IWFL2 PK0IWFL2 ; 
    5 PK0IWFL3 PK0IWFL3 ; 
    5 PK0IWFL4 PK0IWFL4 ; 
    5 PK0IWFL5 PK0IWFL5 ; 
    5 PK0IWFL6 PK0IWFL6 ; 
    5 PK0IWFL7 PK0IWFL7 ; 
    5 PK0IWFL8 PK0IWFL8 ; 
    5 PK0IWFL9 PK0IWFL9 ; 
    5 PK0IWFLA PK0IWFLA ; 
    5 PK0IWFLB PK0IWFLB ; 
    5 PK0IWFLC PK0IWFLC ; 
    5 PK0IWFLD PK0IWFLD ; 
    5 PK0IWFLE PK0IWFLE ; 
    5 PK0IWINT PK0IWINT ; 
    5 PK0IWFRM PK0IWFRM ; 
    5 PK0IWTRR PK0IWTRR ; 
    5 PK0IWNDX PK0IWNDX ; 
    5 PK0IWNX2 PK0IWNX2 ; 
    5 PK0IWNX3 PK0IWNX3 ; 
    5 PK0IWRSN PK0IWRSN ; 
    5 PK0IWBAS PK0IWBAS ; 
    5 PK0IWEND PK0IWEND ; 
    5 PK0IWRDT PK0IWRDT ; 
      10 PK0IWRCC PK0IWRCC ; 
      10 PK0IWRYY PK0IWRYY ; 
      10 PK0IWRMM PK0IWRMM ; 
      10 PK0IWRDD PK0IWRDD ; 
    5 PK0IWDT PK0IWDT ; 
      10 PK0IWMM PK0IWMM ; 
      10 PK0IWDD PK0IWDD ; 
      10 PK0IWYY PK0IWYY ; 
    5 PK0IWFDT PK0IWFDT ; 
      10 PK0IWFCT PK0IWFCT ; 
      10 PK0IWFDA PK0IWFDA ; 
        15 PK0IWFYY PK0IWFYY ; 
        15 PK0IWFMM PK0IWFMM ; 
        15 PK0IWFDD PK0IWFDD ; 
    5 PK0IWTIM PK0IWTIM ; 
      10 PK0IWHH PK0IWHH ; 
      10 * char(1) ; 
      10 PK0IWMI PK0IWMI ; 
      10 * char(1) ; 
      10 PK0IWSS PK0IWSS ; 
    5 PK0IWTI PK0IWTI ; 
      10 PK0IWTHH PK0IWTHH ; 
      10 PK0IWTMM PK0IWTMM ; 
    5 XHRCD XHRCD [200] ; 
    5 XHRABRV XHRABRV [200] ; 
    5 XHRDESC XHRDESC [200] ; 
    5 PK0IWPRT PK0IWPRT ; 
      10 PK0IWPTN PK0IWPTN ; 
    5 PK0IWSWH PK0IWSWH ; 
    5 PK0IWSBC PK0IWSBC ; 
    5 PK0IWSER PK0IWSER ; 
    5 PK0IWSAB PK0IWSAB ; 
end // end PK0IW01

// base index (used for paging)
DataItem PK0IWBAS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PK0IWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group date
DataItem PK0IWDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end index (used for paging)
DataItem PK0IWEND smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem PK0IWFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group yymmdd
DataItem PK0IWFDA num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PK0IWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group yyyymmdd
DataItem PK0IWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of vholdr01 tbl flag
DataItem PK0IWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// edit only flag
DataItem PK0IWFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// whse lookup successful flag
DataItem PK0IWFL3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table overflow flag
DataItem PK0IWFL4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selected for inquiry flag
DataItem PK0IWFL5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// valid reason code flag
DataItem PK0IWFL6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// processing customers/orders
DataItem PK0IWFL7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line items modified
DataItem PK0IWFL8 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer error flag
DataItem PK0IWFL9 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// action field error flag
DataItem PK0IWFLA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reason code error flag
DataItem PK0IWFLB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// release date error flag
DataItem PK0IWFLC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order error flag
DataItem PK0IWFLD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// carrier error flag
DataItem PK0IWFLE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PK0IWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 1st 3 bytes of cafromap
DataItem PK0IWFRM char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PK0IWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0IWGRP char(5691)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hours
DataItem PK0IWHH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// init flag
DataItem PK0IWINT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minutes
DataItem PK0IWMI char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PK0IWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// general index
DataItem PK0IWNDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// second general index
DataItem PK0IWNX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// third general index
DataItem PK0IWNX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order part character
DataItem PK0IWPRT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "            " numeric
DataItem PK0IWPTN num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Release century
DataItem PK0IWRCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Release day
DataItem PK0IWRDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Release date
DataItem PK0IWRDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Release month
DataItem PK0IWRMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// passed reason code
DataItem PK0IWRSN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Release year
DataItem PK0IWRYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved whse abreviation
DataItem PK0IWSAB char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved brand code
DataItem PK0IWSBC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved xxxerrid
DataItem PK0IWSER char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// seconds
DataItem PK0IWSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved warehouse
DataItem PK0IWSWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hours
DataItem PK0IWTHH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// time
DataItem PK0IWTI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group time
DataItem PK0IWTIM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minutes
DataItem PK0IWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total records read
DataItem PK0IWTRR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem PK0IWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

