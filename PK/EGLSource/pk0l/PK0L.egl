package pk0l;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PK0L ****
// 
//  ************** pk0l: select customer **********************
// 
// 
// purpose: a customer number entered here will result in all
//          orders for that customer being processed tonight.
// 
// 
// 
// narrative:
//    when the screen is first displayed all customers
//    already selected are displayed.  they are shown in
//    order by build schedule, priority and customer number.
// 
//    for each customer number, a schedule number and pick
//    priority are shown.  this allows the user to build a
//    'customized' schedule containing only those customers
//    that they select to put into it.
// 
//    pick priority designates the customer as rush, normal
//    or same day.
// 
// 
// 
// 
//   maintenance history:
// 
//    date      name      description
//  --------  ---------  --------------------------------------
//  11-29-88  JWOOD      ADDED NONCSP OPTION ON CALLS
//  11-29-88  JWOOD      ADDED XSSEGTR LOGIC
//  07-21-89  Jcampb     change xfer from pk0i to pk09
//                       also add pwirec for io1720
//  02-14-91  BGOFF      Take out build schedule logic and add
//                       code to transfer to correct menu for
//                       warehouse '51'.
//  09-25-91  SHENDE     Allow warehouse '07' to transfer to
//                       this appl. from PW0V rather than PK07.
//  03-16-92  SHENDE     Allow whse '02' and '04' to return
//                       to PW0V rather than PK07.
//  06-24-92  MWALTO     Move brand to pkgrec before calling
//                       IO1730 in pk0l022,s81,s82 & s83.
//  07-28-93  rcream     made color changes to map
//  08-11-95  CBRINE     CANADA  Added XCTCD to PKWREC
// ************************************************************
//  01-30-98  NGANGO     Y2K modification - changed Stmt. Grp.
//                       PK0LS84 to remove century hard coding.
// 
// ************************************************************
// 
// 
// *********************
Program PK0L type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK0LW01 PK0LW01; // record
  PK4REC PK4REC; // record
  PK6REC PK6REC; // record
  PK9REC PK9REC; // record
  PKGREC PKGREC; // record
  PKWREC PKWREC; // record
  PKXREC PKXREC; // record
  PKZREC PKZREC; // record
  PWIREC PWIREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  XP0FW01 XP0FW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPPTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use PK0LM.PK0LM030 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PK0L005: PK0L005();

    goto PK0L010;



    PK0L010: PK0L010();

    goto PK0L010;


  end // end main
end // end PK0L

// main process
Function PK0L005()

   /* ----------------------------------------------------------*/
   /* initialization process....*/
   /* ----------------------------------------------------------*/



  set TA2REC empty;
  set PK0LW01 empty;
  set SQLCA empty;


  XPPK001(); /* app initial.*/


  if (COMMAREA.CAFROMAP == "PW0V") /* from picking selection menu*/
    PKWREC.PKWSELSW = "PK";
  else
    if (COMMAREA.CAFROMAP == "PW0W") /* from pick planning*/
      PKWREC.PKWSELSW = "PP";
    end
  end

  PK0LM030.XWHCD = PKWREC.XWHCD; /* warehouse code*/
  PK0LW-XDV-HOLD = PKWREC.XDVCD[1];
  PK0LW-XBC-HOLD = PKWREC.XBCCD[1];

  if (PKWREC.PKWINDEX > 0)
    if (PKWREC.PKWFRMAP[1] == "PK0L") /* started from pk0l*/
      PKXREC.PKWARRAY = PKWREC.PKWARRAY[1];
      PKWREC.XWHCD = PKXREC.XWHCD; /* restore warehouse code*/
      PKWREC.PKWSLECT = " "; /* clear selects*/
    end
  end


  PKWREC.XDVCD[1] = PK0LW-XDV-HOLD;
  PKWREC.XBCCD[1] = PK0LW-XBC-HOLD;
  PKWREC.PKWFRMDT[1] = 0;
  PKWREC.PKWTODT[1] = 0;

  COMMAREA.CAFROMAP = COMMAREA.CACURRAP; /* save current application*/


  PK0LW01.PK0LWFT = "Y"; /* set first time flag*/
  PK0LM030.XXXERRID = "PK0L021"; /* format location*/




  PKWREC.PKWINDEX = 0;




   /* -------------  end process pk0l005  --------------------*/
end // end PK0L005

// select customer
Function PK0L010()


  if (converseVar.validationMsgNum == 2 /* invalid whse*/
   || converseVar.validationMsgNum == 3 /* inactive whse*/
   || converseVar.validationMsgNum == 4) /* whse required*/
    set PK0LM030.XWHCD cursor, modified, bold;
  else
    set PK0LM030.XWHCD initialAttributes;
    PK0L020(); /* format output*/
  end



  PK0L030(); /* converse map*/


   /* take care of pa2 key*/


  if (converseVar.eventKey is pa2)
    PK0LM030.XWHCD = PKWREC.XWHCD;
    XPPK002();
    if (converseVar.validationMsgNum == 2 /* invalid whse*/
     || converseVar.validationMsgNum == 3 /* inactive whse*/
     || converseVar.validationMsgNum == 4) /* whse required*/
      exit stack;
    else
      set PK0LM030.XWHCD initialAttributes;
    end
  end


   /* if the whse has changed ignore everything and start over*/


  if (PK0LM030.XWHCD is modified)
    PKWREC.XWHCD = PK0LM030.XWHCD;
    XPPK002();
    if (converseVar.eventKey is enter) /* go to ezeflo except on a pf key*/
      exit stack;
    else
      if (converseVar.validationMsgNum != 0) /* pf key, but whse error*/
        exit stack; /* else pf key no whse error*/
      end
    end
  end

  set PK0LM030.XWHCD cursor; /* reset cursor position*/
  if (PKWREC.XWHCD == " ") /* receiving warehouse from map*/
    exit stack;
  end

  PK0LW01.PK0LWUPD = "N"; /* database update flag.*/

  PK0L040(); /* validate attention keys*/


  if (converseVar.validationMsgNum == 0)
    PK0L050(); /* validate inputs*/
  end

  TA2DTOPT = "GETDATE ";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  PK0LW01.PK0LWCDT = TA2REC.TA2GRGGN;


  if (converseVar.validationMsgNum == 0 /* no errors*/
   || converseVar.validationMsgNum == 85) /* update with warnings*/
    if (PKWREC.XWHCD == PK0LM030.XWHCD)
      if (converseVar.eventKey is pf12)
            /* no more processing*/
      else
        if (PK0LW01.PK0LWEDT == "N") /* ; data modified*/
          if (PK0LW01.PK0LWSEL == "Y") /* customer selected*/
            PK0L070(); /* ; process selects*/
          else
            /* no more processing*/
          end
        else
          if (PK0LW01.PK0LWEDT == "Y") /* edits-all-ok-flag*/
            PK0L080(); /* ; update databases*/
          end
        end
      end
    end
  end



   /* ------------------- end pk0l010 -------------------------*/
end // end PK0L010

// Format the output display
Function PK0L020()


   /* ------------------------------------------------------------*/
   /* first time through or a change in warehouse, the map is*/
   /* reformatted with new data.*/
   /* warehouse is highlited if invalid.*/
   /* ------------------------------------------------------------*/



  if (PK0LW01.PK0LWFT == "Y") /* first time set up*/
    PK0LW01.PK0LWTOP = 1; /* top of page*/
    if (PKWREC.XWHCD == " ") /* no incomming warehouse*/
      PK0L021(); /* format headings on map*/
      converseLib.validationFailed(4); /* warehouse is required*/
      PK0LW01.PK0LWTOP = 1; /* top of page*/
      set PK0LM030.XWHCD cursor, modified, bold;
      PK0LW01.PK0LWFT = "N"; /* turn off first time*/
      return;
    else
      XPPK002(); /* validate warehouse*/
      if (converseVar.validationMsgNum == 0) /* valid warehouse*/
        PK0L021(); /* Format map heading area*/
        PK0L022(); /* ss customers*/
        if (converseVar.validationMsgNum == 0) /* no database errors*/
          PK0L026(); /* find prior top of page location*/
          PK0L023(); /* format screen*/
          PKXREC.PKWARRAY = " "; /* clear select area*/
        end
      else
        PKWREC.XWHCD = " ";
      end
    end
  end




  if (PK0LW01.PK0LWFT == "N") /* not the first time thru*/
    if (converseVar.validationMsgNum == 0  
     || converseVar.validationMsgNum == 85 /* database updated with warnings*/
     || converseVar.validationMsgNum == 91) /* database updated*/
      if (PK0LM030.XWHCD is modified /* change in warehouse*/
       || PK0LW01.PK0LWUPD == "Y")   /* database updated*/

           /* ***********************************/
           /* *   * changed warehouse *        **/
           /* ***********************************/
        if (PK0LM030.XWHCD is modified) /* change in warehouse*/
          PKWREC.XWHCD = PK0LM030.XWHCD; /* warehouse*/
          XPPK002(); /* validate warehouse*/
          if (converseVar.validationMsgNum == 0  /* valid warehouse*/
           || converseVar.validationMsgNum == 85 /* database updated with warnings*/
           || converseVar.validationMsgNum == 91) /* database updated*/
            PK0L021(); /* Format map heading area*/
            PKXREC.PKWARRAY = " "; /* clear select area*/
            PK0LW01.PK0LWTOP = 1; /* set top of page subscript*/
            PK0L022(); /* ss customers*/
            if (converseVar.validationMsgNum == 0  /* no database errors*/
             || converseVar.validationMsgNum == 85 /* database updated with warnings*/
             || converseVar.validationMsgNum == 91) /* database updated*/
              PK0L023(); /* format screen*/
            end
          end
        else

             /* ***********************************/
             /* *   * database was updated *     **/
             /* ***********************************/
          if (PK0LW01.PK0LWUPD == "Y") /* database updated*/
            PK0LW01.PK0LWMNO = converseVar.validationMsgNum; /* save message #*/
            PK0L022(); /* ss customers*/
            if (converseVar.validationMsgNum == 0  /* no database errors*/
             || converseVar.validationMsgNum == 85 /* database updated with warnings*/
             || converseVar.validationMsgNum == 91) /* database updated*/
              PK0L021(); /* format headings*/
              PK0L023(); /* format screen*/
              if (PK0LW01.PK0LWMNO == 9999)
                converseLib.validationFailed();
              else
                converseLib.validationFailed(PK0LW01.PK0LWMNO);
              end
            end
          end
        end
      else
           /* ***********************************/
           /* *   * only paging is required *  **/
           /* ***********************************/

        if (converseVar.eventKey is pf7)
          PK0L021(); /* format map heading*/
          PK0LW01.PK0LWTOP = PK0LW01.PK0LWTOP - 22; /* set top of page*/
          if (PK0LW01.PK0LWTOP <= 0)
            PK0LW01.PK0LWTOP = 1; /* set top of page to 1*/
            converseLib.validationFailed(37); /* no previous page message*/
          end
          PK0L023(); /* format screen*/
        else
          if (converseVar.eventKey is pf8)
            PK0LW01.PK0LWMCH = PK0LW01.PK0LWTOP + 21; /* temp.counter*/
            if (PK0LW01.PK0LWMAX >= PK0LW01.PK0LWMCH) /* not last page*/
              PK0L021(); /* format map heading*/
              PK0LW01.PK0LWTOP = PK0LW01.PK0LWTOP + 22; /* set top of page*/
              PK0L023(); /* format screen*/
            else
              converseLib.validationFailed(38); /* no more pages to display*/
            end
          end
        end
      end
    end
  end


  if (converseVar.validationMsgNum == 2 /* invalid  warehouse*/
   || converseVar.validationMsgNum == 3 /* inactive warehouse*/
   || converseVar.validationMsgNum == 4) /* warehouse required*/
    set PK0LM030.XWHCD cursor, modified, bold; /* hilite warehouse*/
  else
    set PK0LM030.XWHCD initialAttributes;
  end

  PK0LW01.PK0LWFT = "N"; /* reset first time flag*/
  PK0L025(); /* set mdt's for updates not*/
                                   /* accomplished*/



end // end PK0L020

// format map heading
Function PK0L021()
   /* ---------------------------------------------------*/
      /* format map headings...........*/
   /* ---------------------------------------------------*/


  set PK0LM030 initial; /* ; clear map area*/
  set PK4REC empty; /* ; empty pool header record*/
  set PKGREC empty;

  PK0LM030.XXXCURDT = VGVar.currentShortGregorianDate; /* date to map*/
  PK0LM030.XWHCD = PKWREC.XWHCD; /* warehouse code*/
  PK0LM030.XWHABRV = PKWREC.XWHABRV; /* warehouse abbrev.*/
  PK0LM030.XXXRVNBR = "01"; /* ; revision number*/
  converseLib.validationFailed(0); /* ; reset any error*/



end // end PK0L021

// obtain set customer numbers
Function PK0L022()
   /* ----------------------------------------------------*/
     /* load working storage with customer data*/
             /* -  non planned only   -*/
   /* ----------------------------------------------------*/


  PKGREC.XWHCD = PKWREC.XWHCD; /* ; warehouse code*/
  PKGREC.XDVCD = PKWREC.XDVCD[1]; /* ; division code*/
  PKGREC.XBCCD = PKWREC.XBCCD[1]; /* ; brand code*/
  PKGREC.PKURUNMD = " "; /* ; non-planned mode*/

  PK0LW01.PK0LWMAX = 0;

  if (PK0LW01.PK0LWC91 == "Y")
     /* next sentence*/
  else
    while (PK0LW01.PK0LWMAX <= 499)

      PK0LW01.PK0LWMAX = PK0LW01.PK0LWMAX + 1;
      PK0LW01.KUCCOID[PK0LWMAX] = 0;
      PK0LW01.KUMSTRID[PK0LWMAX] = 0;
      PK0LW01.XNXCD[PK0LWMAX] = 0;
      PK0LW01.XBCCD[PK0LWMAX] = " ";
      PK0LW01.PKHSCHED[PK0LWMAX] = " ";
      PK0LW01.ZZZCHGCT[PK0LWMAX] = 0;
    end
  end

  call "IO1730" ("S2", SQLCA, PKGREC) {isNoRefresh = yes, isExternal = yes}; /* ; ss on customers*/

  if (SQLCA.VAGen_SQLCODE != 0) /* ; unexpected return*/
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28);
                                   /* ;    ; database in use-try again*/
      PK0LM030.XXXERRID = "PK0L022"; /* error process...*/
      TA1REC.TA1FUNC = "POST"; /* ; term. function*/
      TA1REC.TA1LOC = "S2 FROM CUSTOMER PICKING FILE";
      TA1REC.TA1TYPE = "DB2 "; /* ; type of error*/
      TA1REC.TA1PGMNM = "PK0L022"; /* process name*/
      TA1REC.TA1MAP = "PK0LM030"; /* map name*/
      TA1REC.TA1DBASE = "DPICK   "; /* database name*/
      TA1REC.TA1TBLVU = "VSELCU01"; /* table view name*/
      TA1REC.TA1TBLKE = PKWREC.XWHCD; /* table key*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 100)
        converseLib.validationFailed(29); /* ; indicate system error*/
        PK0LM030.XXXERRID = "PK0L022"; /* error process...*/
        TA1REC.TA1FUNC = "RETN"; /* ; term. function*/
        TA1REC.TA1LOC = "S2 FROM CUSTOMER PICKING FILE";
      end
    end
  end



  if (SQLCA.VAGen_SQLCODE == 0) /* ; good return from s2 above*/
    PK0LW01.PK0LWMAX = 0; /* ; records read in counter*/
    while (SQLCA.VAGen_SQLCODE == 0 /* ; good return within loop*/
     && PK0LW01.PK0LWMAX <= 500) /* ; table maximum*/
      call "IO1730" ("N2", SQLCA, PKGREC) {isNoRefresh = yes, isExternal = yes}; /* fetch next record*/

      if (SQLCA.VAGen_SQLCODE == 0) /* ; good fetch*/

        if (PKWREC.XBCCD[1] == "*" /* colehaan*/
         && PKGREC.XBCCD == "08") 
          /* next sentence*/
        else
          PK0LW01.PK0LWMAX = PK0LW01.PK0LWMAX + 1; /* ; set up sub*/

          if (PKGREC.KUCCOID >= 8000000
           && PKGREC.KUCCOID < 9000000)

            PK0LW01.XBCCD[PK0LWMAX] = "08";
            XP0FW01.XBCCD = "08";
            XP0FW01.KUCCOID = PKGREC.KUCCOID;

            XP0FS01();

            PK0LW01.KUCCOID[PK0LWMAX] = XP0FW01.XP0FW01-EXTERNAL;
            PK0LW01.PK0LW-CO-I[PK0LWMAX] = XP0FW01.XP0FW01-INTERNAL;
          else
            PK0LW01.KUCCOID[PK0LWMAX] = PKGREC.KUCCOID; /* ; comp*/
          end

          PK0LW01.PKXKUACT[PK0LWMAX] = " "; /* ; action*/
          PK0LW01.XPPCD[PK0LWMAX] = PKGREC.XPPCD; /* ; pick pr*/
          PK0LW01.KUMSTRID[PK0LWMAX] = PKGREC.KUMSTRID; /* store*/
          PK0LW01.XNXCD[PK0LWMAX] = PKGREC.XNXCD; /* ; dept.*/
          PK0LW01.PKHSCHED[PK0LWMAX] = PKGREC.PKHSCHED; /* build sched*/
          PK0LW01.ZZZCHGCT[PK0LWMAX] = PKGREC.ZZZCHGCT; /* change cnt*/
        end
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* ; db in use....*/
          converseLib.validationFailed(28); /* ; database in use-try again*/
          PK0LM030.XXXERRID = "PK0L022"; /* error process...*/
          TA1REC.TA1FUNC = "POST"; /* ; term. function*/
          TA1REC.TA1LOC = "S2 FROM CUSTOMER PICKING FILE";
          TA1REC.TA1TYPE = "DB2 "; /* ; type of error*/
          TA1REC.TA1PGMNM = "PK0L022"; /* process name*/
          TA1REC.TA1MAP = "PK0LM030"; /* map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* database name*/
          TA1REC.TA1TBLVU = "VSELCU01"; /* table view name*/
          TA1REC.TA1TBLKE = PKWREC.XWHCD; /* table key*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
        else
          if (SQLCA.VAGen_SQLCODE != 100) /* ; not end of data*/
            TA1REC.TA1FUNC = "RETN"; /* termination function*/
            TA1REC.TA1LOC = "N2 FETCH FROM CUSTOMER PICK  ";
          end
        end
      end
    end
    call "IO1730" ("C2", SQLCA, PKGREC) {isNoRefresh = yes, isExternal = yes}; /* close set*/
    if (SQLCA.VAGen_SQLCODE != 0) /* ; problem closing*/
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
      TA1REC.TA1LOC = "C2 CLOSE CUST.PICKING FILE   ";
    end
  end


  if (SQLCA.VAGen_SQLCODE != 0 /* ; unexpected return cd*/
   && SQLCA.VAGen_SQLCODE != 100) /* ; end of data*/
    TA1REC.TA1TYPE = "DB2 "; /* ; type of error*/
    TA1REC.TA1PGMNM = "PK0L022"; /* process name*/
    TA1REC.TA1MAP = "PK0LM030"; /* map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* database name*/
    TA1REC.TA1TBLVU = "VSELCU01"; /* table view name*/
    TA1REC.TA1TBLKE = PKWREC.XWHCD; /* table key*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
    XSPF4(); /* ; send to master menu*/

    return;
  else
    if (PK0LW01.PK0LWMAX == 0) /* ; no customers*/
      PK0LS22(); /* clear map*/
      converseLib.validationFailed(94); /* ; no customer data found*/
    end
  end



end // end PK0L022

// format selected customers
Function PK0L023()
   /* ----------------------------------------------------*/
     /* format map.....*/
      /* pk0lwtop - location in ws. array of the top of screen*/
      /* pk0lwsb1 - this keeps track of location in working*/
                 /* storage array for moving to map*/
      /* pk0lwsb2 - locates position in map - pk0lm030*/
      /* pk0lwmax - end of valid data in working storage array*/
   /* ----------------------------------------------------*/

  if (PK0LM030.XXXERRID == " ")
    PK0LM030.XXXERRID = "PK0L023";
  end

  PK0LW01.PK0LWSB1 = PK0LW01.PK0LWTOP; /* hold current top of page*/

  PK0LW01.PK0LWSB2 = 1; /* map display subscript*/

  while (PK0LW01.PK0LWSB2 <= 22) /* only 22 displayed*/
    if (PK0LW01.PK0LWSB1 <= PK0LW01.PK0LWMAX) /* place in ws < data end*/
      PK0LM030.PK0LMACT[PK0LWSB2] = PK0LW01.PKXKUACT[PK0LWSB1]; /* act*/
      PK0LM030.XPPCD[PK0LWSB2] = PK0LW01.XPPCD[PK0LWSB1]; /* pickp*/
      PK0LM030.KUCCOID[PK0LWSB2] = PK0LW01.KUCCOID[PK0LWSB1]; /* cust*/
      PK0LM030.KUMSTRID[PK0LWSB2] = PK0LW01.KUMSTRID[PK0LWSB1]; /* st.*/
      PK0LM030.XNXCD[PK0LWSB2] = PK0LW01.XNXCD[PK0LWSB1]; /* dept.*/
    end
    PK0LW01.PK0LWSB2 = PK0LW01.PK0LWSB2 + 1; /* set-up map subscript*/
    PK0LW01.PK0LWSB1 = PK0LW01.PK0LWSB1 + 1; /* set-up place in work.stor.*/
  end


    /* ******************************************************/
    /* *  user messages for bottom  of screen .............**/
    /* ******************************************************/

  if (PK0LW01.PK0LWDDB == "Y") /* database updated this pass*/
    if (PK0LW01.PK0LWA91 == "Y" /* at least one add hit a -911*/
     || PK0LW01.PK0LWC91 == "Y") /* at least one change or delete hit a 911*/
      PK0LW01.PK0LWMNO = 113; /* partial update, database contention*/
    else
      if (PK0LW01.PK0LWCCT == "Y" /* change had change cnt.error*/
       || PK0LW01.PK0LWCDL == "Y" /* change request for deleted rec.*/
       || PK0LW01.PK0LWAAE == "Y") /* add a rec added by someone else*/
        PK0LW01.PK0LWMNO = 112; /* part.update, updated since ref.*/
      end
    end
  else /* no update accomplished*/
    if (PK0LW01.PK0LWA91 == "Y" /* on least one add hit a -911*/
     || PK0LW01.PK0LWC91 == "Y") /* at least one change or delete hit a 911*/
      PK0LW01.PK0LWMNO = 28; /* no update, database contention*/
    else
      if (PK0LW01.PK0LWAAE == "Y") /* add a rec added by someone else*/
        PK0LW01.PK0LWMNO = 44; /* customer already exists*/
      else
        if (PK0LW01.PK0LWCDL == "Y") /* change request for deleted rec.*/
          PK0LW01.PK0LWMNO = 142; /* cust. no longer exists*/
        else
          if (PK0LW01.PK0LWCCT == "Y") /* change had change cnt.error*/
            PK0LW01.PK0LWMNO = 143; /* updated since last referenced*/
          end
        end
      end
    end
  end


end // end PK0L023

// find prior top of page
Function PK0L025()
    /* -------------------------------------------------*/
           /* hilite any prior update requests not*/
        /* accomplished due to change counter differences*/
        /* or -911's.*/
    /* -------------------------------------------------*/

  PK0LW01.PK0LWSB2 = 1; /* location in map*/

  while (PK0LW01.PK0LWSB2 <= 22)
    PK0LW01.PK0LWC1 = PK0LM030.KUCCOID[PK0LWSB2]; /* reformat cust.*/
    PK0LW01.PK0LWC2 = PK0LM030.KUMSTRID[PK0LWSB2];
    PK0LW01.PK0LWC3 = PK0LM030.XNXCD[PK0LWSB2];
    if (PK0LW01.PK0LWCX2 in PK0LW01.PK0LWPBM) /* problem cust array*/
      if (sysVar.arrayIndex > 0 /* ; customer found*/
       && PK0LM030.KUCCOID[PK0LWSB2] > 0) /* actual customer*/
        set PK0LM030.KUCCOID[PK0LWSB2] bold;
        set PK0LM030.KUMSTRID[PK0LWSB2] bold;
        set PK0LM030.XNXCD[PK0LWSB2] bold;
      end
    end
    PK0LW01.PK0LWSB2 = PK0LW01.PK0LWSB2 + 1; /* ; set subscript up*/
  end

  PK0LW01.PK0LWSB3 = 1; /* location in map*/
  while (PK0LW01.PK0LWSB3 <= 22)
    PK0LW01.PK0LWPBM[PK0LWSB3] = 0; /* problem cust array*/
    PK0LW01.PK0LWSB3 = PK0LW01.PK0LWSB3 + 1; /* set subscript up*/
  end



end // end PK0L025

// find prior top of page
Function PK0L026()
    /* -------------------------------------------------*/
           /* find prior map display of pk0l*/
    /* -------------------------------------------------*/

  PK0LW01.PK0LWTOP = 1; /* top of page starts at array top*/
  PK0LW01.PK0LWSB2 = 30; /* array size in pkxrec*/

  while (PK0LW01.PK0LWSB2 > 0)
    if (PKXREC.KUCCOID[PK0LWSB2] > 0)
      PK0LW01.PK0LWC1 = PKXREC.KUCCOID[PK0LWSB2]; /* reformat cust.*/
      PK0LW01.PK0LWC2 = PKXREC.KUMSTRID[PK0LWSB2];
      PK0LW01.PK0LWC3 = PKXREC.XNXCD[PK0LWSB2];
      if (PK0LW01.PK0LWCX2 in PK0LW01.PK0LWCUS) /* select cust array*/
        if (sysVar.arrayIndex != 0) /* ; customer found*/
          PK0LW01.PK0LWTOP = sysVar.arrayIndex; /* ; adjust top of page*/
          PK0LW01.PKXKUACT[sysVar.arrayIndex] = PKXREC.PKXKUACT[PK0LWSB2];
        end
      end
    end
    PK0LW01.PK0LWSB2 = PK0LW01.PK0LWSB2 - 1; /* ; set subscript down*/
  end




end // end PK0L026

// converse map
Function PK0L030()


  converse PK0LM030 ;



   /* ------------------- end pk0l030 -------------------------*/
end // end PK0L030

// validate attention keys...
Function PK0L040()


   /* ------------------------------------------------------------*/
   /* stop indiscriminate button pressing......*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf3  /* send to pk07 menu*/
   || converseVar.eventKey is pf13 /* pk0k 'ord sel' transfer*/
   || converseVar.eventKey is pf14 /* pk0m 'ot sel' transfer*/
   || converseVar.eventKey is pf16 /* pk01 'p&h sel' transfer*/
   || converseVar.eventKey is pf18 /* pk0i 'hold'trans*/
   || converseVar.eventKey is pf19 /* pk0s 'plan' transfer*/
   || converseVar.eventKey is pf20) /* pk0a 'pick' transfer*/

    PK0L041(); /* Transfer to another application*/

  else

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      XSPF1(); /* Exit to the HELP facility*/

      PK0LM030.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
      converseLib.validationFailed(); /* Force error*/
      exit stack; /* Exit to redisplay map*/
    end


    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      XSPF4(); /* Exit to system main menu*/

      PK0LM030.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
      converseLib.validationFailed(); /* Force alarm to sound*/
      exit stack; /* Exit to redisplay map*/
    end

    if (converseVar.eventKey is pa2) /* PA2 was pressed*/

      PK0LW01.PK0LWUPD = "Y"; /* flag for reloading map*/
      PK0LW01.PK0LWSB1 = 1;
      while (PK0LW01.PK0LWSB1 <= PK0LW01.PK0LWMAX)
        PK0LW01.PKXKUACT[PK0LWSB1] = " "; /* clear action*/
        PK0LW01.PK0LWSB1 = PK0LW01.PK0LWSB1 + 1;
      end
      exit stack;
    end

    if (converseVar.eventKey is pf7  /* scroll backwards*/
     || converseVar.eventKey is pf8  /* scroll forward*/
     || converseVar.eventKey is pf12 /* test the water for errors*/
     || converseVar.eventKey is enter) /* enter..*/
       /* their choice of buttons was valid*/
    else
      converseLib.validationFailed(12); /* invalid pk key..*/

    end
  end



end // end PK0L040

// Exit to another application
Function PK0L041()
   /* ------------------------------------------------------------*/
   /* Set the "TO" application according to the PF key pressed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* ; PF3 was pressed*/
    if (PK0LM030.XWHCD == "51" /* memphis apparel*/
     || PK0LM030.XWHCD == "04" /* memphis footware*/
     || PK0LM030.XWHCD == "07" /* wilsonville warehouse*/
     || PK0LM030.XWHCD == "02") /* greenland warehouse*/

      COMMAREA.CATOAP = "PW0V"; /* picking selection menu*/
    else
      COMMAREA.CATOAP = "PK07"; /* Selection Menu*/
    end
  end

  if (converseVar.eventKey is pf13) /* ; PF13 was pressed*/
    COMMAREA.CATOAP = "PK0K"; /* Select By Order*/
  end

  if (converseVar.eventKey is pf14) /* ; PF14 was pressed*/
    COMMAREA.CATOAP = "PK0M"; /* Select By Order Type*/
  end

  if (converseVar.eventKey is pf16) /* ; PF16 was pressed*/
    COMMAREA.CATOAP = "PK01"; /* Select Pack And Hold*/
  end

  if (converseVar.eventKey is pf18) /* ; PF18 was pressed*/
    COMMAREA.CATOAP = "PK09"; /* Hold/Release*/
  end

  if (converseVar.eventKey is pf19) /* ; PF19 was pressed*/
    COMMAREA.CATOAP = "PK0S"; /* Planning Menu*/
  end

  if (converseVar.eventKey is pf20) /* ; PF20 was pressed*/
    COMMAREA.CATOAP = "PK0A"; /* Master Menu*/
  end

  if (PK0LM030.XWHCD is modified) /* ; Warehouse code changed*/
    PKWREC.XWHCD = PK0LM030.XWHCD; /* Save in work area*/
  end

  PKWREC.PKWINDEX = 0;
  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* COMMAREA user area*/

  XSEXIT(); /* Invoke selected application*/

  PK0LM030.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/

  exit stack; /* ; Exit to redisplay map*/



end // end PK0L041

// validate inputs
Function PK0L050()

    /* ---------------------------------------------*/
   /* -  - start validation of input data      -  -*/
    /* ---------------------------------------------*/


  PK0LW01.PK0LWSEL = "N"; /* reset select flag*/
  PK0LW01.PK0LWEDT = "N"; /* reset edit   flag*/
  PK0LW01.PK0LWDDB = "N"; /* database updated this pass(flag)*/
  PK0LW01.PK0LWA91 = "N"; /* 911 on add flag*/
  PK0LW01.PK0LWC91 = "N"; /* 911 on change/delete flag*/
  PK0LW01.PK0LWAAE = "N"; /* add existing rec. flag*/
  PK0LW01.PK0LWCDL = "N"; /* change a deleted rec flag*/
  PK0LW01.PK0LWCCT = "N"; /* change counter error flag*/


  PK0L051(); /* reset mdt's*/


  if (converseVar.validationMsgNum == 0) /* no errors from pk0l051*/
    if (PK0LW01.PK0LWSEL == "Y" /* customer selected*/
     || PK0LW01.PK0LWEDT == "Y") /* data modified*/

      if (PK0LM030.XWHCD != PKWREC.XWHCD) /* change in warehouse*/
        PK0LM030.XWHCD = PKWREC.XWHCD; /* restore warehouse*/
        set PK0LM030.XWHCD cursor, modified, bold;
        converseLib.validationFailed(23); /* can not modify & change warehouse*/
      else
        if (converseVar.eventKey is enter
         || converseVar.eventKey is pf12) /* ;*/
          PK0L052(); /* edit entered data*/
        else
          if (converseVar.eventKey is pf7 /* scroll requested*/
           || converseVar.eventKey is pf8) /* scroll requested*/
            converseLib.validationFailed(39); /* can not edit screen & scroll*/
            return; /* return to pk0l010*/
          end
        end
      end
    else
      if (converseVar.eventKey is pf7 /* scroll requested*/
       || converseVar.eventKey is pf8) /* scroll requested*/
        exit stack; /* bypass processing- format screen*/
      end
    end
  end



end // end PK0L050

// reset mdt's
Function PK0L051()

     /* --------------------------------------------------*/
     /* -   - reset mdt's to fields actually modified -  -*/
     /* --------------------------------------------------*/

  PK0LW01.PK0LWTOP = PK0LW01.PK0LWTOP;


  PK0LW01.PK0LWSB2 = 22;
  while (PK0LW01.PK0LWSB2 >= 1)
    PK0LW01.PK0LWSB1 = PK0LW01.PK0LWTOP + PK0LW01.PK0LWSB2 - 1;

    if (PK0LW01.PK0LWSB1 <= PK0LW01.PK0LWMAX) /* within the array of cust #*/

       /* **************************************************/
       /* * these are changes or selects for  existing    **/
       /* *   customers...or adds created by overtyping   **/
       /* *   an existing customer.                       **/
       /* **************************************************/

      PK0L05G(); /* field by field test for changes*/


      if (PK0LM030.PK0LMACT[PK0LWSB2] == " " /* no action*/
       || PK0LM030.PK0LMACT[PK0LWSB2] == "V" /* viewed*/
       || PK0LM030.PK0LMACT[PK0LWSB2] == "S") /* selected- test for edits*/

        if (PK0LM030.XPPCD[PK0LWSB2] is modified    /* pick priority*/
         || PK0LM030.KUCCOID[PK0LWSB2] is modified  /* company*/
         || PK0LM030.KUMSTRID[PK0LWSB2] is modified /* store*/
         || PK0LM030.XNXCD[PK0LWSB2] is modified)   /* department*/

          set PK0LM030.PK0LMACT[PK0LWSB2] modified;
          PK0LW01.PK0LWEDT = "Y"; /* cust.modified flag*/
        else
          set PK0LM030.PK0LMACT[PK0LWSB2] initialAttributes;
        end

      else
        set PK0LM030.PK0LMACT[PK0LWSB2] modified;
        PK0LW01.PK0LWEDT = "Y"; /* cust.modified flag*/
      end


      if (PK0LM030.PK0LMACT[PK0LWSB2] == "S")
        set PK0LM030.PK0LMACT[PK0LWSB2] modified;
        PK0LW01.PK0LWSEL = "Y"; /* customer selected*/
      end


       /* **********************************************/
       /* * these are added lines at bottom......     **/
       /* **********************************************/

    else /* - new line added*/
      if (PK0LM030.XPPCD[PK0LWSB2] > " "  /* pick priority*/
       || PK0LM030.KUCCOID[PK0LWSB2] > 0  /* company*/
       || PK0LM030.KUMSTRID[PK0LWSB2] > 0 /* store*/
       || PK0LM030.XNXCD[PK0LWSB2] > 0)   /* department*/

        set PK0LM030.PK0LMACT[PK0LWSB2] modified;
        set PK0LM030.XPPCD[PK0LWSB2] modified; /* pick priority*/
        set PK0LM030.KUCCOID[PK0LWSB2] modified; /* company*/
        set PK0LM030.KUMSTRID[PK0LWSB2] modified; /* store*/
        set PK0LM030.XNXCD[PK0LWSB2] modified; /* department*/
        PK0LW01.PK0LWEDT = "Y"; /* cust.modified flag*/
        if (PK0LM030.PK0LMACT[PK0LWSB2] == "S")
          PK0LW01.PK0LWSEL = "Y"; /* cust.selected flag*/
        end
      else
          /* ***********************************************/
          /* *   user has blanked out a previous add      **/
          /* ***********************************************/
        if (PK0LM030.PK0LMACT[PK0LWSB2] == " ") /* no action*/
          set PK0LM030.PK0LMACT[PK0LWSB2] initialAttributes; /* action*/
          set PK0LM030.XPPCD[PK0LWSB2] initialAttributes; /* pick priority*/
          set PK0LM030.KUCCOID[PK0LWSB2] initialAttributes; /* company*/
          set PK0LM030.KUMSTRID[PK0LWSB2] initialAttributes; /* store*/
          set PK0LM030.XNXCD[PK0LWSB2] initialAttributes; /* department*/
        else
          if (PK0LM030.PK0LMACT[PK0LWSB2] == "A") /* no action*/
            set PK0LM030.PK0LMACT[PK0LWSB2] cursor, modified, bold;
            set PK0LM030.XPPCD[PK0LWSB2] modified, bold;
            set PK0LM030.KUCCOID[PK0LWSB2] modified, bold;
            set PK0LM030.KUMSTRID[PK0LWSB2] modified, bold;
            set PK0LM030.XNXCD[PK0LWSB2] modified, bold;
            converseLib.validationFailed(131); /* ;incomplete add*/
          else
            set PK0LM030.PK0LMACT[PK0LWSB2] cursor, modified, bold;
            converseLib.validationFailed(35); /* ;invalid action code*/
          end
        end
      end
    end
    PK0LW01.PK0LWSB2 = PK0LW01.PK0LWSB2 - 1; /* set down map index*/
  end


     /* ******************************************************/
      /* not allowed to edit & select within the same screen*/
     /* ******************************************************/


  if (PK0LW01.PK0LWSEL == "Y"
   && PK0LW01.PK0LWEDT == "Y")
    converseLib.validationFailed(25); /* doing select & edits*/
    PK0LW01.PK0LWSB2 = 22;
    while (PK0LW01.PK0LWSB2 >= 1)
      if (PK0LM030.PK0LMACT[PK0LWSB2] != " ")
        set PK0LM030.PK0LMACT[PK0LWSB2] cursor, modified, bold;
      end
      PK0LW01.PK0LWSB2 = PK0LW01.PK0LWSB2 - 1;
    end
  end



end // end PK0L051

// edit map line
Function PK0L052()
   /* ------------------------------------------------------*/
   /* * edit map lines from the bottom up*/
       /* * pk0lwsb2 - position on map display*/
       /* * pk0lwsb1 - position of same data within ws. array*/
       /* * pk0lwtop - position in ws. array of record*/
                    /* at the top of the screen.*/
   /* ------------------------------------------------------*/


  PK0LW01.PK0LWSB2 = 22;
  while (PK0LW01.PK0LWSB2 >= 1)
    if (PK0LM030.PK0LMACT[PK0LWSB2] is modified /* action*/
     || PK0LM030.XPPCD[PK0LWSB2] is modified    /* pick priority*/
     || PK0LM030.KUCCOID[PK0LWSB2] is modified  /* customer*/
     || PK0LM030.KUMSTRID[PK0LWSB2] is modified /* store*/
     || PK0LM030.XNXCD[PK0LWSB2] is modified)   /* department*/

         /* ***** find position of this record in w.s. array ****/

      PK0LW01.PK0LWSB1 = PK0LW01.PK0LWTOP + PK0LW01.PK0LWSB2 - 1;

      PK0L053(); /* edit line*/

    end

    PK0LW01.PK0LWSB2 = PK0LW01.PK0LWSB2 - 1;
  end





end // end PK0L052

// edit entered fields
Function PK0L053()

       /* --------------------------------------*/
       /* -  edit by action requested          -*/
       /* --------------------------------------*/

  if (PK0LM030.PK0LMACT[PK0LWSB2] == "S" /* select*/
   || PK0LM030.PK0LMACT[PK0LWSB2] == "D" /* delete*/
   || PK0LM030.PK0LMACT[PK0LWSB2] == "A" /* add*/
   || PK0LM030.PK0LMACT[PK0LWSB2] == "C" /* change*/
   || PK0LM030.PK0LMACT[PK0LWSB2] == " " 
   || PK0LM030.PK0LMACT[PK0LWSB2] == "V") /* viewed*/
  else
    converseLib.validationFailed(35); /* invalid action code error*/
    set PK0LM030.PK0LMACT[PK0LWSB2] cursor, modified, bold;
    return;
  end



  if (PK0LM030.PK0LMACT[PK0LWSB2] == "S") /* select requested*/
    PK0L054();
  end

  if (PK0LM030.PK0LMACT[PK0LWSB2] == "A") /* add requested*/
    PK0L055();
  end

  if (PK0LM030.PK0LMACT[PK0LWSB2] == "D") /* delete requested*/
    PK0L056();
  end

  if (PK0LM030.PK0LMACT[PK0LWSB2] == "C") /* change requested*/
    PK0L057();
  end

  if (PK0LM030.PK0LMACT[PK0LWSB2] == " " /* no action*/
   || PK0LM030.PK0LMACT[PK0LWSB2] == "V") /* viewed*/
    PK0L058();
  end



end // end PK0L053

// validate select action
Function PK0L054()

   /* *********************************************************/
   /* with "select" option -no fields can be changed from original*/

      /* pk0lw01.pk0lwsb2 - position on map*/
      /* pk0lw01.pk0lwsb1 - position of this data in w.s. array*/
   /* *********************************************************/

  PK0LW01.PKXKUACT[PK0LWSB1] = " "; /* clear prev.actions*/


  if (PK0LM030.XPPCD[PK0LWSB2] != PK0LW01.XPPCD[PK0LWSB1])
    set PK0LM030.PK0LMACT[PK0LWSB2] cursor, modified, bold;
    set PK0LM030.XPPCD[PK0LWSB2] modified, bold;
    converseLib.validationFailed(25); /* can not do inquiry & update*/
  else
    set PK0LM030.PK0LMACT[PK0LWSB2] initialAttributes;
    set PK0LM030.XPPCD[PK0LWSB2] initialAttributes;
  end

  if (PK0LM030.KUCCOID[PK0LWSB2] != PK0LW01.KUCCOID[PK0LWSB1])
    set PK0LM030.PK0LMACT[PK0LWSB2] cursor, modified, bold;
    set PK0LM030.KUCCOID[PK0LWSB2] modified, bold;
    converseLib.validationFailed(25); /* can not do inquiry & update*/
  else
    set PK0LM030.KUCCOID[PK0LWSB2] initialAttributes;
  end

  if (PK0LM030.KUMSTRID[PK0LWSB2] != PK0LW01.KUMSTRID[PK0LWSB1]) /* store*/
    set PK0LM030.PK0LMACT[PK0LWSB2] cursor, modified, bold;
    set PK0LM030.KUMSTRID[PK0LWSB2] modified, bold;
    converseLib.validationFailed(25); /* can not do inquiry & update*/
  else
    set PK0LM030.KUMSTRID[PK0LWSB2] initialAttributes;
  end

  if (PK0LM030.XNXCD[PK0LWSB2] != PK0LW01.XNXCD[PK0LWSB1]) /* dept.*/
    set PK0LM030.PK0LMACT[PK0LWSB2] cursor, modified, bold;
    set PK0LM030.XNXCD[PK0LWSB2] modified, bold;
    converseLib.validationFailed(25); /* can not do inquiry & update*/
  else
    set PK0LM030.XNXCD[PK0LWSB2] initialAttributes;
  end



end // end PK0L054

// validate add action
Function PK0L055()

   /* *********************************************************/
   /* purpose:    adding a new customer---*/

      /* pk0lw01.pk0lwsb2 - position on map*/
      /* pk0lw01.pk0lwsb1 - position of this data in w.s. array*/
   /* *********************************************************/

   /* *********************************************************/
       /* --- verify new customer number ---*/
   /* *********************************************************/

  PK0LW01.PKXKUACT[PK0LWSB1] = " "; /* clear prev.action*/

    /* see if this customer number already exists as non planned*/
    /* reformat entire customer number from map......*/

  PK0LW01.PK0LWC1 = PK0LM030.KUCCOID[PK0LWSB2]; /* customer*/
  PK0LW01.PK0LWC2 = PK0LM030.KUMSTRID[PK0LWSB2]; /* store*/
  PK0LW01.PK0LWC3 = PK0LM030.XNXCD[PK0LWSB2]; /* depart.*/

  if (PK0LW01.PK0LWCX2 in PK0LW01.PK0LWCUS) /* existing cust.*/
    set PK0LM030.KUCCOID[PK0LWSB2] cursor, modified, bold;
    set PK0LM030.KUMSTRID[PK0LWSB2] modified, bold;
    set PK0LM030.XNXCD[PK0LWSB2] modified, bold;
    converseLib.validationFailed(88); /* customer # already exists*/
    return;
  else
     /* *********************************************************/
       /* -be sure this customer is not being added on two lines*/
     /* *********************************************************/

    PK0LW01.PK0LWSB3 = PK0LW01.PK0LWSB2 - 1;
    while (PK0LW01.PK0LWSB3 >= 1)
      if (PK0LM030.KUCCOID[PK0LWSB3] == PK0LM030.KUCCOID[PK0LWSB2]   /* cust*/
       && PK0LM030.KUMSTRID[PK0LWSB3] == PK0LM030.KUMSTRID[PK0LWSB2] /* st*/
       && PK0LM030.XNXCD[PK0LWSB3] == PK0LM030.XNXCD[PK0LWSB2])      /* dept*/
        set PK0LM030.KUCCOID[PK0LWSB2] cursor, modified, bold;
        set PK0LM030.KUCCOID[PK0LWSB3] modified, bold;
        set PK0LM030.KUMSTRID[PK0LWSB2] modified, bold;
        set PK0LM030.KUMSTRID[PK0LWSB3] modified, bold;
        set PK0LM030.XNXCD[PK0LWSB2] modified, bold;
        set PK0LM030.XNXCD[PK0LWSB3] modified, bold;
        converseLib.validationFailed(89); /* customer # already exists*/
        return;
      end
      PK0LW01.PK0LWSB3 = PK0LW01.PK0LWSB3 - 1;
    end

     /* ******************************************************/
             /* - customer edits-----*/
     /* ******************************************************/

    PK0L05D(); /* customer on hold?*/

    if (PK0LW01.PK0LWFL1 == "N") /* cust not on hold*/
      PK0L05E(); /* customer in pool?*/
      if (PK0LW01.PK0LWFL1 == "Y") /* customer error*/
        return;
      end
    else /* cust is on hold-*/
      converseLib.validationFailed(81); /* customer is currently on hold*/
      set PK0LM030.KUCCOID[PK0LWSB2] cursor, modified, bold;
      set PK0LM030.KUMSTRID[PK0LWSB2] modified, bold;
      set PK0LM030.XNXCD[PK0LWSB2] modified, bold;
      return;
    end
  end


   /* *********************************************************/
    /* --- validate the build schedule/pick priority for ---*/
    /* --- this new customer.*/
   /* *********************************************************/

  PK0L05F();



end // end PK0L055

// validate delete action
Function PK0L056()

   /* *********************************************************/
   /* with "delete" option -no fields can be changed from original*/

      /* pk0lw01.pk0lwsb2 - position on map*/
      /* pk0lw01.pk0lwsb1 - position of this data in w.s. array*/
   /* *********************************************************/

  PK0LW01.PKXKUACT[PK0LWSB1] = " "; /* clear prev.action*/

  if (PK0LM030.XPPCD[PK0LWSB2] != PK0LW01.XPPCD[PK0LWSB1]) /* pick sched*/
    set PK0LM030.PK0LMACT[PK0LWSB2] cursor, modified, bold;
    set PK0LM030.XPPCD[PK0LWSB2] modified, bold;
    converseLib.validationFailed(35); /* invalid option code*/
  else
    set PK0LM030.PK0LMACT[PK0LWSB2] initialAttributes;
    set PK0LM030.XPPCD[PK0LWSB2] initialAttributes;
  end

  if (PK0LM030.KUCCOID[PK0LWSB2] != PK0LW01.KUCCOID[PK0LWSB1]) /* company*/
    set PK0LM030.PK0LMACT[PK0LWSB2] cursor, modified, bold;
    set PK0LM030.KUCCOID[PK0LWSB2] modified, bold;
    converseLib.validationFailed(35); /* invalid option code*/
  else
    set PK0LM030.KUCCOID[PK0LWSB2] initialAttributes;
  end

  if (PK0LM030.KUMSTRID[PK0LWSB2] != PK0LW01.KUMSTRID[PK0LWSB1]) /* store*/
    set PK0LM030.PK0LMACT[PK0LWSB2] cursor, modified, bold;
    set PK0LM030.KUMSTRID[PK0LWSB2] modified, bold;
    converseLib.validationFailed(35); /* invalid option code*/
  else
    set PK0LM030.KUMSTRID[PK0LWSB2] initialAttributes;
  end

  if (PK0LM030.XNXCD[PK0LWSB2] != PK0LW01.XNXCD[PK0LWSB1]) /* dept.*/
    set PK0LM030.PK0LMACT[PK0LWSB2] cursor, modified, bold;
    set PK0LM030.XNXCD[PK0LWSB2] modified, bold;
    converseLib.validationFailed(35); /* invalid option code*/
  else
    set PK0LM030.XNXCD[PK0LWSB2] initialAttributes;
  end



end // end PK0L056

// validate change action
Function PK0L057()

   /* *********************************************************/
    /* with "change" option - customer can not be modified....*/

      /* pk0lw01.pk0lwsb2 - position on map*/
      /* pk0lw01.pk0lwsb1 - position of this data in w.s. array*/
   /* *********************************************************/

  PK0LW01.PKXKUACT[PK0LWSB1] = " "; /* clear prev.action*/


  if (PK0LM030.KUCCOID[PK0LWSB2] != PK0LW01.KUCCOID[PK0LWSB1]   /* company*/
   || PK0LM030.KUMSTRID[PK0LWSB2] != PK0LW01.KUMSTRID[PK0LWSB1] /* store*/
   || PK0LM030.XNXCD[PK0LWSB2] != PK0LW01.XNXCD[PK0LWSB1])      /* dept.*/
    PK0L05A(); /* edit error*/

  else
    if (PK0LM030.XPPCD[PK0LWSB2] != PK0LW01.XPPCD[PK0LWSB1]) /* pick pr.*/
                                        /* ;*/
      /* -----******************************************************/
                  /* verify pick priority exists*/
      /* -----******************************************************/


      if (PK0LM030.XPPCD[PK0LWSB2] in XPPTBL.XPPCD) /* valid pick pr*/
        if (PK0LM030.XPPCD[PK0LWSB2] != "20") /* rush*/
          PK0L05E(); /* is it in the pick pool?*/
        end

      else
        set PK0LM030.XPPCD[PK0LWSB2] cursor, modified, bold;
        converseLib.validationFailed(80); /* invalid pick priority*/
      end

    else /* 'c' requested & no changes*/
      set PK0LM030.PK0LMACT[PK0LWSB2] cursor, modified, bold;
      converseLib.validationFailed(35); /* invalid action code*/
    end
  end



end // end PK0L057

// a blank action field
Function PK0L058()

   /* *********************************************************/
   /* with "blank" option -no fields can be changed from original*/

      /* pk0lw01.pk0lwsb2 - position on map*/
      /* pk0lw01.pk0lwsb1 - position of this data in w.s. array*/
   /* *********************************************************/

  if (PK0LM030.XPPCD[PK0LWSB2] != PK0LW01.XPPCD[PK0LWSB1]) /* pick sched*/
    set PK0LM030.PK0LMACT[PK0LWSB2] cursor, modified, bold;
    set PK0LM030.XPPCD[PK0LWSB2] modified, bold;
    converseLib.validationFailed(43); /* fields modified, action required*/
  else
    set PK0LM030.PK0LMACT[PK0LWSB2] initialAttributes;
    set PK0LM030.XPPCD[PK0LWSB2] initialAttributes;
  end

  if (PK0LM030.KUCCOID[PK0LWSB2] != PK0LW01.KUCCOID[PK0LWSB1]) /* company*/
    set PK0LM030.PK0LMACT[PK0LWSB2] cursor, modified, bold;
    set PK0LM030.KUCCOID[PK0LWSB2] modified, bold;
    converseLib.validationFailed(43); /* fields modified, action required*/
  else
    set PK0LM030.KUCCOID[PK0LWSB2] initialAttributes;
  end

  if (PK0LM030.KUMSTRID[PK0LWSB2] != PK0LW01.KUMSTRID[PK0LWSB1]) /* store*/
    set PK0LM030.PK0LMACT[PK0LWSB2] cursor, modified, bold;
    set PK0LM030.KUMSTRID[PK0LWSB2] modified, bold;
    converseLib.validationFailed(43); /* fields modified, action required*/
  else
    set PK0LM030.KUMSTRID[PK0LWSB2] initialAttributes;
  end

  if (PK0LM030.XNXCD[PK0LWSB2] != PK0LW01.XNXCD[PK0LWSB1]) /* dept.*/
    set PK0LM030.PK0LMACT[PK0LWSB2] cursor, modified, bold;
    set PK0LM030.XNXCD[PK0LWSB2] modified, bold;
    converseLib.validationFailed(43); /* fields modified, action required*/
  else
    set PK0LM030.XNXCD[PK0LWSB2] initialAttributes;
  end



end // end PK0L058

// change-cust.num edit
Function PK0L05A()

   /* *********************************************************/
   /* with "change" option -no customer number may be changed.*/

   /* *********************************************************/

  if (PK0LM030.KUCCOID[PK0LWSB2] != PK0LW01.KUCCOID[PK0LWSB1]   /* company*/
   || PK0LM030.KUMSTRID[PK0LWSB2] != PK0LW01.KUMSTRID[PK0LWSB1] /* store*/
   || PK0LM030.XNXCD[PK0LWSB2] != PK0LW01.XNXCD[PK0LWSB1])      /* dept.*/
    set PK0LM030.PK0LMACT[PK0LWSB2] cursor, modified, bold; /* action*/
    set PK0LM030.KUCCOID[PK0LWSB2] modified, bold; /* company*/
    set PK0LM030.KUMSTRID[PK0LWSB2] modified, bold; /* store*/
    set PK0LM030.XNXCD[PK0LWSB2] modified, bold; /* dept.*/
    converseLib.validationFailed(82); /* a change to cust # is an add*/
  else
    set PK0LM030.KUCCOID[PK0LWSB2] initialAttributes;
    set PK0LM030.KUMSTRID[PK0LWSB2] initialAttributes;
    set PK0LM030.XNXCD[PK0LWSB2] initialAttributes;
  end


  if (PK0LM030.KUMSTRID[PK0LWSB2] != PK0LW01.KUMSTRID[PK0LWSB1]) /* store*/
    set PK0LM030.PK0LMACT[PK0LWSB2] cursor, modified, bold;
    set PK0LM030.KUMSTRID[PK0LWSB2] modified, bold;
    converseLib.validationFailed(82); /* a change to cust # is an add*/
  else
    set PK0LM030.KUMSTRID[PK0LWSB2] initialAttributes;
  end


  if (PK0LM030.XNXCD[PK0LWSB2] != PK0LW01.XNXCD[PK0LWSB1]) /* dept.*/
    set PK0LM030.PK0LMACT[PK0LWSB2] cursor, modified, bold;
    set PK0LM030.XNXCD[PK0LWSB2] modified, bold;
    converseLib.validationFailed(82); /* a change to cust # is an add*/
  else
    set PK0LM030.XNXCD[PK0LWSB2] initialAttributes;
  end



end // end PK0L05A

// is customer on cust.hold?
Function PK0L05D()
   /* ----------------------------------------------------*/
     /* is customer on credit hold ???*/
   /* ----------------------------------------------------*/



  PK9REC.XWHCD = PK0LM030.XWHCD;
  PK9REC.KUCCOID = PK0LM030.KUCCOID[PK0LWSB2]; /* comp*/
  PK9REC.KUMSTRID = PK0LM030.KUMSTRID[PK0LWSB2]; /* store*/
  PK9REC.XNXCD = PK0LM030.XNXCD[PK0LWSB2]; /* dept.*/
  PK0LW01.PK0LWFL1 = "N"; /* reset flag field*/

  PKZREC.PKZFUNC = "S1"; /* set up for customer hold*/
  call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes}; /* ss on cust.holds*/

  if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* indicate unavailable*/
      TA1REC.TA1FUNC = "POST"; /* termination function*/
      TA1REC.TA1LOC = "S1 - CUST.HOLD FILE          ";
    else
      if (SQLCA.VAGen_SQLCODE != 100)
        converseLib.validationFailed(29); /* indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* termination function*/
        TA1REC.TA1LOC = "S1 FROM CUST. HOLD FILE      ";
      end
    end
  end



  if (SQLCA.VAGen_SQLCODE == 0) /* good return from s2 above*/
    while (SQLCA.VAGen_SQLCODE == 0 /* good return within loop*/
     && PK0LW01.PK0LWFL1 == "N") /* none found....*/
      call "IO1790" ("N1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes}; /* fetch next record*/

      if (SQLCA.VAGen_SQLCODE == 0) /* good fetch*/
        if (PK9REC.PK9RELDT > PK0LW01.PK0LWCDT) /* pk0lwdt1 = curr. date*/
          PK0LW01.PK0LWFL1 = "Y"; /* found current 'on hold'*/
        end
      end
    end
    PKZREC.PKZFUNC = "C1"; /* close set -customer hold*/
    call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes}; /* ss on cust.holds*/
  end

  if (SQLCA.VAGen_SQLCODE != 0 /* unexpected return cd*/
   && SQLCA.VAGen_SQLCODE != 100) /* end of data*/
    TA1REC.TA1TYPE = "DB2 "; /* type of error*/
    TA1REC.TA1PGMNM = "PK0L05D"; /* process name*/
    TA1REC.TA1LOC = "S1 FROM CUSTOMER SELECT FILE";
    TA1REC.TA1MAP = "PK0LM030"; /* map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* database name*/
    TA1REC.TA1TBLVU = "VCUHLD01"; /* table view name*/
    TA1REC.TA1TBLKE = PKWREC.XWHCD; /* table key*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
    XSPF4(); /* ; send to master menu*/

    return;
  end



end // end PK0L05D

// is cust. in pick pool?
Function PK0L05E()
   /* ----------------------------------------------------*/
   /* purpose:  customer must be in pick customer file.*/
             /* also customer should be in the pool. if*/
             /* not add him to the select file but display*/
             /* a warning message.*/

   /* ----------------------------------------------------*/

   /* first check to see if this is a good customer number*/


  PK0LW01.PK0LWFL2 = "N"; /* reset warning flag*/

  PK6REC.KUCCOID = PK0LM030.KUCCOID[PK0LWSB2]; /* comp*/
  PK6REC.KUMSTRID = PK0LM030.KUMSTRID[PK0LWSB2]; /* store*/
  call "IO1830" ("S ", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes}; /* cust.list*/
  if (SQLCA.VAGen_SQLCODE == 0) /* ; good fetch*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      set PK0LM030.KUCCOID[PK0LWSB2] cursor, modified, bold;
      set PK0LM030.KUMSTRID[PK0LWSB2] modified, bold;
      set PK0LM030.XNXCD[PK0LWSB2] modified, bold;
      converseLib.validationFailed(86); /* ; invalid customer number*/
      PK0LW01.PK0LWFL1 = "Y"; /* customer error*/
      return;
    end
  end

  if (SQLCA.VAGen_SQLCODE != 0 /* unexpected return cd*/
   && SQLCA.VAGen_SQLCODE != 100) /* end of data*/
    TA1REC.TA1TYPE = "DB2 "; /* type of error*/
    TA1REC.TA1PGMNM = "PK0L05E"; /* process name*/
    TA1REC.TA1LOC = "S1 FROM CUSTOMER SELECT FILE";
    TA1REC.TA1MAP = "PK0LM030"; /* map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* database name*/
    TA1REC.TA1TBLVU = "VPKCUS01"; /* table view name*/
    TA1REC.TA1TBLKE = PK0LM030.KUCCOID[PK0LWSB2]; /* table key*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
    XSPF4(); /* ; send to master menu*/

    return;
  end


   /* next check to see if the customer has an order in the*/
   /* pool file. this is not a fatal error but will result in*/
   /* a warning message.*/


  PK4REC.XWHCD = PK0LM030.XWHCD;
  PK4REC.KUCCOID = PK0LM030.KUCCOID[PK0LWSB2]; /* comp*/
  PK4REC.KUMSTRID = PK0LM030.KUMSTRID[PK0LWSB2]; /* store*/
  PK4REC.XNXCD = PK0LM030.XNXCD[PK0LWSB2]; /* dept.*/
  PK0LW01.PK0LWFL2 = "N"; /* reset warning flag*/

  PWIREC.PWIFUNC = "S2";
  call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* ss -cust.order pool*/

  if (SQLCA.VAGen_SQLCODE != 0) /* ; bad return cd*/
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* ; unavailabel resource*/
      TA1REC.TA1FUNC = "POST"; /* termination function*/
      TA1REC.TA1LOC = "S2 - CUST.ORDER POOL         ";
      PK0LM030.XXXERRID = "PK0L05E"; /* error location*/
    else
      if (SQLCA.VAGen_SQLCODE != 100)
        converseLib.validationFailed(29); /* ; system error*/
        TA1REC.TA1FUNC = "RETN"; /* termination function*/
        TA1REC.TA1LOC = "S2 FROM CUST. ORDER POOL     ";
        PK0LM030.XXXERRID = "PK0L05E"; /* error location*/
      end
    end
  end



  if (SQLCA.VAGen_SQLCODE == 0) /* good return from set*/
    PWIREC.PWIFUNC = "N2";
    call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* fetch*/

    if (SQLCA.VAGen_SQLCODE == 0) /* good return...*/
         /* found customer in pool*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* ; not found*/
        set PK0LM030.KUCCOID[PK0LWSB2] cursor, modified, bold;
        set PK0LM030.KUMSTRID[PK0LWSB2] modified, bold;
        set PK0LM030.XNXCD[PK0LWSB2] modified, bold;
        converseLib.validationFailed(85); /* warning: cust. not in pick pool*/
        PK0LW01.PK0LWFL2 = "Y"; /* customer error*/
      else
        TA1REC.TA1FUNC = "RETN"; /* termination function*/
        TA1REC.TA1LOC = "S  FROM DPICK.VPKCUS01       ";
      end
    end
  end

  PWIREC.PWIFUNC = "C2";
  call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* close*/

  if (SQLCA.VAGen_SQLCODE != 0 /* unexpected return cd*/
   && SQLCA.VAGen_SQLCODE != 100) /* end of data*/
    TA1REC.TA1TYPE = "DB2 "; /* type of error*/
    TA1REC.TA1PGMNM = "PK0L05E"; /* process name*/
    TA1REC.TA1LOC = "S1 FROM CUSTOMER SELECT FILE";
    TA1REC.TA1MAP = "PK0LM030"; /* map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* database name*/
    TA1REC.TA1TBLVU = "        "; /* table view name*/
    TA1REC.TA1TBLKE = PK0LM030.KUCCOID[PK0LWSB2]; /* table key*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
    XSPF4(); /* ; send to master menu*/

    return;
  end



end // end PK0L05E

// new cust:build sched/pick p.
Function PK0L05F()

   /* *********************************************************/
    /* --- validate the build schedule/pick priority for ---*/
    /* --- this new customer.*/
   /* *********************************************************/


  if (PK0LM030.KUCCOID[PK0LWSB2] == PK0LW01.KUCCOID[PK0LWSB1]   /* company*/
   && PK0LM030.KUMSTRID[PK0LWSB2] == PK0LW01.KUMSTRID[PK0LWSB1] /* store*/
   && PK0LM030.XNXCD[PK0LWSB2] == PK0LW01.XNXCD[PK0LWSB1])      /* dept.*/

    set PK0LM030.KUCCOID[PK0LWSB2] cursor, modified, bold;
    set PK0LM030.KUMSTRID[PK0LWSB2] modified, bold;
    set PK0LM030.XNXCD[PK0LWSB2] modified, bold;
    converseLib.validationFailed(88); /* please enter new cust #*/
    return;

  else
    if (PK0LM030.XPPCD[PK0LWSB2] == "  ") /* default if not entered*/
      PK0LM030.XPPCD[PK0LWSB2] = "30";
    end

    if (PK0LM030.XPPCD[PK0LWSB2] != PK0LW01.XPPCD[PK0LWSB1]) /* pick pr.*/
                                        /* ;*/
      /* -----******************************************************/
                    /* valid  pick priority required*/
      /* -----******************************************************/

      if (PK0LM030.XPPCD[PK0LWSB2] in XPPTBL.XPPCD) /* pick pr table*/
        /* next sentence*/
      else
        set PK0LM030.XPPCD[PK0LWSB2] cursor, modified, bold;
        converseLib.validationFailed(80); /* invalid pick priority*/
      end
    end
  end


end // end PK0L05F

// field by field ck for changes
Function PK0L05G()


       /* ***************************************************/
       /* *   has user blanked a previous modification??   **/
       /* *     move back original data................    **/
       /* ***************************************************/
  if (PK0LM030.PK0LMACT[PK0LWSB2] <= " " /* action*/
   && PK0LM030.XPPCD[PK0LWSB2] <= " "    /* pick priority*/
   && PK0LM030.KUCCOID[PK0LWSB2] <= 0    /* company*/
   && PK0LM030.KUMSTRID[PK0LWSB2] <= 0   /* store*/
   && PK0LM030.XNXCD[PK0LWSB2] <= 0)     /* department*/

    PK0LM030.XPPCD[PK0LWSB2] = PK0LW01.XPPCD[PK0LWSB1];
    PK0LM030.KUCCOID[PK0LWSB2] = PK0LW01.KUCCOID[PK0LWSB1];
    PK0LM030.KUMSTRID[PK0LWSB2] = PK0LW01.KUMSTRID[PK0LWSB1];
    PK0LM030.XNXCD[PK0LWSB2] = PK0LW01.XNXCD[PK0LWSB1];
  end


       /* **********************************************/
       /* * field by field test for changes           **/
       /* **********************************************/


  if (PK0LM030.XPPCD[PK0LWSB2] != PK0LW01.XPPCD[PK0LWSB1])
    set PK0LM030.XPPCD[PK0LWSB2] modified;
    PK0LW01.PK0LWEDT = "Y"; /* cust.modified flag*/
  else
    set PK0LM030.XPPCD[PK0LWSB2] initialAttributes;
  end

  if (PK0LM030.KUCCOID[PK0LWSB2] != PK0LW01.KUCCOID[PK0LWSB1]) /* company*/
    set PK0LM030.KUCCOID[PK0LWSB2] modified;
    PK0LW01.PK0LWEDT = "Y"; /* cust.modified flag*/
  else
    set PK0LM030.KUCCOID[PK0LWSB2] initialAttributes;
  end

  if (PK0LM030.KUMSTRID[PK0LWSB2] != PK0LW01.KUMSTRID[PK0LWSB1]) /* store*/
    set PK0LM030.KUMSTRID[PK0LWSB2] modified;
    PK0LW01.PK0LWEDT = "Y"; /* cust.modified flag*/
  else
    set PK0LM030.KUMSTRID[PK0LWSB2] initialAttributes;
  end

  if (PK0LM030.XNXCD[PK0LWSB2] != PK0LW01.XNXCD[PK0LWSB1]) /* depart.*/
    set PK0LM030.XNXCD[PK0LWSB2] modified;
    PK0LW01.PK0LWEDT = "Y"; /* cust.modified flag*/
  else
    set PK0LM030.XNXCD[PK0LWSB2] initialAttributes;
  end



end // end PK0L05G

// Transfer to customer inq
Function PK0L070()
   /* ------------------------------------------------------------*/
   /* Clear the common array and move the selected customer*/
   /* numbers into it.*/
   /* Transfer control to the customer inquiry application.*/
   /* ------------------------------------------------------------*/

  set PKXREC empty; /* Clear cust. array*/


  PK0L071(); /* Move selected customers*/

  PKXREC.XWHCD = PKWREC.XWHCD; /* move warehouse code back*/
  PKXREC.XWHABRV = PKWREC.XWHABRV; /* and warehouse abbreviation*/

  PKWREC.PKWARRAY[1] = PKXREC.PKWARRAY; /* Inquiry keys array*/

  PKWREC.PKWSLTYP[1] = "C"; /* Inquiry selection type*/
  PKWREC.PKWINDEX = 1;
  PKWREC.PKWFRMAP[1] = "PK0L"; /* Previous application*/

  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* COMMAREA user area*/

  COMMAREA.CATOAP = "PK0D"; /* PICKING customer inquiry*/

  XSEXIT(); /* Transfer to cust. Inquiry*/

       /* **************************************************/
       /* **********  if xsexit did not work:   ************/
       /* **************************************************/
  PK0LM030.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
  converseLib.validationFailed(); /* problem exists!!!!!*/
  PK0LM030.XXXERRID = "PK0L070 "; /* Error location*/

  exit stack; /* redisplay map*/



end // end PK0L070

// Move selected order numbers
Function PK0L071()
   /* ------------------------------------------------------------*/
   /* If the line was selected for inquiry, move the customer num*/
   /* to the common key array.*/
   /* ------------------------------------------------------------*/

  PK0LW01.PK0LWSB2 = 1; /* position on map*/
  PK0LW01.PK0LWSB1 = 1; /* position in pass record*/

    /* **** move the first map line into array for returning *****/

  PKXREC.PKXKUACT[PK0LWSB1] = PK0LM030.PK0LMACT[PK0LWSB2]; /* act.*/

  if (PK0LW01.XBCCD[PK0LWSB2] == "08")
    PKXREC.KUCCOID[PK0LWSB1] = PK0LW01.PK0LW-CO-I[PK0LWSB2];
  else
    PKXREC.KUCCOID[PK0LWSB1] = PK0LM030.KUCCOID[PK0LWSB2]; /* cust.*/
  end

  PKXREC.KUMSTRID[PK0LWSB1] = PK0LM030.KUMSTRID[PK0LWSB2]; /* st.*/
  PKXREC.XNXCD[PK0LWSB1] = PK0LM030.XNXCD[PK0LWSB2]; /* dept.*/
  PK0LW01.PK0LWSB2 = 2; /* position on map*/
  PK0LW01.PK0LWSB1 = 2; /* position in pass record*/



  while (PK0LW01.PK0LWSB2 <= 22)
    if (PK0LM030.PK0LMACT[PK0LWSB2] == "S") /* Selected for inquiry*/

      PKXREC.PKXKUACT[PK0LWSB1] = PK0LM030.PK0LMACT[PK0LWSB2];

      if (PK0LW01.XBCCD[PK0LWSB2] == "08")
        PKXREC.KUCCOID[PK0LWSB1] = PK0LW01.PK0LW-CO-I[PK0LWSB2];
      else
        PKXREC.KUCCOID[PK0LWSB1] = PK0LM030.KUCCOID[PK0LWSB2];
      end

      PKXREC.KUMSTRID[PK0LWSB1] = PK0LM030.KUMSTRID[PK0LWSB2]; /* st.*/
      PKXREC.XNXCD[PK0LWSB1] = PK0LM030.XNXCD[PK0LWSB2]; /* dept.*/

      PK0LW01.PK0LWSB1 = PK0LW01.PK0LWSB1 + 1; /* Increment array index*/

    end

    PK0LW01.PK0LWSB2 = PK0LW01.PK0LWSB2 + 1; /* Increment map index*/
  end



end // end PK0L071

// database update.
Function PK0L080()


    /* ************************************************/
    /* * clear out the problem customer update list  **/
    /* ************************************************/

  PK0LW01.PK0LWSB3 = 1;
  while (PK0LW01.PK0LWSB3 <= 22)
    PK0LW01.PK0LWPBM[PK0LWSB3] = 0;
    PK0LW01.PK0LWSB3 = PK0LW01.PK0LWSB3 + 1;
  end


    /* ************************************************/
    /* * do all database updates possible .........  **/
    /* ************************************************/

  PK0LW01.PK0LWSB3 = 1;
  PK0LW01.PK0LWSB2 = 1;
  while (PK0LW01.PK0LWSB2 <= 22)
      /* *********************************************************/
      /* * pk0lwsb1 is the location of map record in w.s. array **/
      /* *     pk0lwtop = loc. in w.s. of record at top of screen*/
      /* *                display                               **/
      /* *     pk0lwsb2 = loc. on screen of current record.     **/
      /* *********************************************************/
    PK0LW01.PK0LWSB1 = PK0LWTOP + PK0LWSB2 - 1;

    if (PK0LM030.PK0LMACT[PK0LWSB2] == "A")
      PK0LS81(); /* database add*/
    end

    if (PK0LM030.PK0LMACT[PK0LWSB2] == "D")
      PK0LS82(); /* database delete*/
    end

    if (PK0LM030.PK0LMACT[PK0LWSB2] == "C")
      PK0LS83(); /* database change*/
    end

    PK0LW01.PK0LWSB2 = PK0LW01.PK0LWSB2 + 1;
  end



end // end PK0L080

// clear map
Function PK0LS22()
   /* ---------------------------------------------------*/
      /* clear the map*/
   /* ---------------------------------------------------*/

  PK0LW01.PK0LWHS = PK0LM030.XWHCD; /* warehouse code*/
  PK0LW01.PK0LWER = PK0LM030.XXXERRID; /* warehouse code*/
  PK0LW01.PK0LWABR = PK0LM030.XWHABRV; /* warehouse abbrev.*/

  set PK0LM030 initial; /* ; clear map area*/
  set PK4REC empty; /* ; empty pool header record*/
  set PKGREC empty;

  PK0LM030.XXXCURDT = VGVar.currentShortGregorianDate; /* date to map*/
  PK0LM030.XWHABRV = PK0LW01.PK0LWABR; /* warehouse abbrev.*/
  PK0LM030.XXXERRID = PK0LW01.PK0LWER;
  PK0LM030.XWHCD = PK0LW01.PK0LWHS; /* warehouse code*/
  PK0LM030.XXXRVNBR = "01"; /* revision number*/



end // end PK0LS22

// add new database rec
Function PK0LS81()


     /* **************  read to verify new add *******/

  set PKGREC empty;
  set SQLCA empty;

  PKGREC.XWHCD = PKWREC.XWHCD; /* warehouse code*/

  if (PK0LW01.XBCCD[PK0LWSB2] == "08")
    PKGREC.KUCCOID = PK0LW01.PK0LW-CO-I[PK0LWSB2]; /* ; company*/
  else
    PKGREC.KUCCOID = PK0LM030.KUCCOID[PK0LWSB2]; /* ; company*/
  end

  PKGREC.KUMSTRID = PK0LM030.KUMSTRID[PK0LWSB2]; /* store*/
  PKGREC.XNXCD = PK0LM030.XNXCD[PK0LWSB2]; /* ; dept*/
  PKGREC.PKURUNMD = " "; /* ; runmode*/

  call "IO1730" ("S ", SQLCA, PKGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0) /* customer added already....*/
    PK0LW01.PK0LWAAE = "Y"; /* customer already exists-flag*/
    PK0LW01.PK0LWUPD = "Y"; /* display updated db flag*/
    PK0LW01.PK0LWC1 = PK0LM030.KUCCOID[PK0LWSB2]; /* cust #*/
    PK0LW01.PK0LWC2 = PK0LM030.KUMSTRID[PK0LWSB2]; /* store #*/
    PK0LW01.PK0LWC3 = PK0LM030.XNXCD[PK0LWSB2]; /* dept #*/
    PK0LW01.PK0LWPBM[PK0LWSB3] = PK0LW01.PK0LWCX2;
    PK0LW01.PK0LWSB3 = PK0LW01.PK0LWSB3 + 1; /* bump up sub.*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* database contention   ....*/
      PK0LW01.PK0LWA91 = "Y"; /* database contention flag*/
      PK0LW01.PK0LWUPD = "Y"; /* display updated db flag*/
      PK0LW01.PK0LWC1 = PK0LM030.KUCCOID[PK0LWSB2]; /* cust #*/
      PK0LW01.PK0LWC2 = PK0LM030.KUMSTRID[PK0LWSB2]; /* store #*/
      PK0LW01.PK0LWC3 = PK0LM030.XNXCD[PK0LWSB2]; /* dept #*/
      PK0LW01.PK0LWPBM[PK0LWSB3] = PK0LW01.PK0LWCX2;
      PK0LW01.PK0LWSB3 = PK0LW01.PK0LWSB3 + 1; /* bump up sub.*/
      PK0LM030.XXXERRID = "PK0L081"; /* problem location*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE != +100)
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "PK0L";
        TA1REC.TA1LOCAT[1] = "S ";
        TA1REC.TA1LOCAT[2] = "PK0L081";
        TA1REC.TA1LOCAT[3] = "IO1730";
        TA1REC.TA1MAP = "PK0LM030";
        TA1REC.TA1DBASE = "DPICK.";
        TA1REC.TA1TBLVU = "VSELCU01"; /* table view*/
        TA1REC.TA1TBLKE = PK0LM030.KUCCOID; /* table key*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        XSPF4();
        VAGen_EZEMSG = 9999;
        exit stack;
      end
    end
  end
     /* **************  add  new record  *************/

  if (SQLCA.VAGen_SQLCODE == +100)

    if (PKWREC.XDVCD[1] == "*")
      PKGREC.XDVCD = " "; /* division*/
    else
      PKGREC.XDVCD = PKWREC.XDVCD[1]; /* division*/
    end

    if (PK0LM030.KUCCOID[PK0LWSB2] >= 8000000
     && PK0LM030.KUCCOID[PK0LWSB2] < 9000000)

      PKGREC.XBCCD = "08";
    else
      PKGREC.XBCCD = " "; /* brand*/
    end

    PKGREC.XWHCD = PKWREC.XWHCD; /* warehouse code*/
    PKGREC.KUCCOID = PK0LM030.KUCCOID[PK0LWSB2]; /* company*/
    PKGREC.KUMSTRID = PK0LM030.KUMSTRID[PK0LWSB2]; /* store*/
    PKGREC.XNXCD = PK0LM030.XNXCD[PK0LWSB2]; /* dept*/
    PKGREC.XGPCD = "00"; /* prod.class cd.*/
    PKGREC.XPPCD = PK0LM030.XPPCD[PK0LWSB2]; /* pick priority*/
    PKGREC.PKURUNMD = " "; /* runmode*/
    PK0LS84(); /* date/time*/

    call "IO1730" ("A ", SQLCA, PKGREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == +0)
      PK0LW01.PK0LWDDB = "Y"; /* d.b. updated flag*/
      PK0LW01.PK0LWUPD = "Y"; /* redisplay database*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        PK0LW01.PK0LWA91 = "Y"; /* db.contention on add- flag*/
        PK0LW01.PK0LWUPD = "Y"; /* display updated db flag*/
        PK0LW01.PK0LWC1 = PK0LM030.KUCCOID[PK0LWSB2]; /* cust #*/
        PK0LW01.PK0LWC2 = PK0LM030.KUMSTRID[PK0LWSB2]; /* store #*/
        PK0LW01.PK0LWC3 = PK0LM030.XNXCD[PK0LWSB2]; /* dept #*/
        PK0LW01.PK0LWPBM[PK0LWSB3] = PK0LW01.PK0LWCX2;
        PK0LW01.PK0LWSB3 = PK0LW01.PK0LWSB3 + 1; /* bump up sub.*/
        PK0LM030.XXXERRID = "PK0L081"; /* problem location*/
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "PK0L";
        TA1REC.TA1LOCAT[1] = "A ";
        TA1REC.TA1LOCAT[2] = "PK0L081";
        TA1REC.TA1LOCAT[3] = "IO0730";
        TA1REC.TA1MAP = "PK0LM030";
        TA1REC.TA1DBASE = "DPICK.";
        TA1REC.TA1TBLVU = "VSELCU01"; /* table view*/
        TA1REC.TA1TBLKE = PK0LM030.KUCCOID; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        XSPF4();
        VAGen_EZEMSG = 9999;
        exit stack;
      end
    end
  end


  if (converseVar.validationMsgNum == 0
   && SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(91); /* ; d.b. updated*/
    return;
  else
    return;
  end

end // end PK0LS81

// delete  database rec
Function PK0LS82()


     /* **************  find original record for delete ****/

  set PKGREC empty;
  set SQLCA empty;

  PKGREC.XWHCD = PKWREC.XWHCD; /* warehouse*/

  if (PK0LW01.XBCCD[PK0LWSB2] == "08")
    PKGREC.KUCCOID = PK0LW01.PK0LW-CO-I[PK0LWSB2]; /* company*/
  else
    PKGREC.KUCCOID = PK0LM030.KUCCOID[PK0LWSB2]; /* company*/
  end

  PKGREC.KUMSTRID = PK0LM030.KUMSTRID[PK0LWSB2]; /* store*/
  PKGREC.XNXCD = PK0LM030.XNXCD[PK0LWSB2]; /* dept*/
  PKGREC.PKURUNMD = " "; /* runmode*/

  call "IO1730" ("S ", SQLCA, PKGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)

    call "IO1730" ("D ", SQLCA, PKGREC) {isNoRefresh = yes, isExternal = yes};

  end



  if (SQLCA.VAGen_SQLCODE == +0
   || SQLCA.VAGen_SQLCODE == 100)
    PK0LW01.PK0LWUPD = "Y"; /* display updated database*/
    PK0LW01.PK0LWDDB = "Y"; /* database updated*/
    converseLib.validationFailed(91); /* database updated*/
    PK0LW01.PK0LWPBM[PK0LWSB3] = PK0LW01.PK0LWCUS[PK0LWSB1];
    PK0LW01.PK0LWSB3 = PK0LW01.PK0LWSB3 + 1;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      PK0LW01.PK0LWC91 = "Y"; /* database contention flag*/
      PK0LW01.PK0LWUPD = "Y"; /* display updated database*/
      PK0LW01.PK0LWPBM[PK0LWSB3] = PK0LW01.PK0LWCUS[PK0LWSB1];
      PK0LW01.PK0LWSB3 = PK0LW01.PK0LWSB3 + 1; /* bump up sub*/
      PK0LM030.XXXERRID = "PK0L082"; /* error location*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "PK0L";
      TA1REC.TA1LOCAT[1] = "D ";
      TA1REC.TA1LOCAT[2] = "PK0L082";
      TA1REC.TA1LOCAT[3] = "IO0730";
      TA1REC.TA1MAP = "PK0LM030";
      TA1REC.TA1DBASE = "DPICK.";
      TA1REC.TA1TBLVU = "VSELCU01"; /* table view*/
      TA1REC.TA1TBLKE = PK0LM030.KUCCOID; /* table key*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
      VAGen_EZEMSG = 9999;
      exit stack;
    end
  end



end // end PK0LS82

// change  database rec
Function PK0LS83()


     /* *********  find original record for change *********/

  set PKGREC empty;
  set SQLCA empty;

  PKGREC.XWHCD = PKWREC.XWHCD; /* warehouse*/

  if (PK0LW01.XBCCD[PK0LWSB2] == "08")
    PKGREC.KUCCOID = PK0LW01.PK0LW-CO-I[PK0LWSB2]; /* company*/
  else
    PKGREC.KUCCOID = PK0LM030.KUCCOID[PK0LWSB2]; /* company*/
  end

  PKGREC.KUMSTRID = PK0LM030.KUMSTRID[PK0LWSB2]; /* store*/
  PKGREC.XNXCD = PK0LM030.XNXCD[PK0LWSB2]; /* dept*/
  PKGREC.PKURUNMD = " "; /* runmode*/

  call "IO1730" ("S ", SQLCA, PKGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    if (PK0LW01.ZZZCHGCT[PK0LWSB1] != PKGREC.ZZZCHGCT) /* change count*/
      PK0LW01.PK0LWCCT = "Y"; /* ; change ct error flag*/
      PK0LW01.PK0LWUPD = "Y"; /* display updated db.*/
      PK0LW01.PK0LWPBM[PK0LWSB3] = PK0LW01.PK0LWCUS[PK0LWSB1];
      PK0LW01.PK0LWSB3 = PK0LW01.PK0LWSB3 + 1; /* bump up*/
      return; /* ; do not update*/
    end

    PKGREC.XPPCD = PK0LM030.XPPCD[PK0LWSB2]; /* pick pr.*/
    PK0LS84(); /* ; date & time*/

    call "IO1730" ("U ", SQLCA, PKGREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == +0)
      PK0LW01.PK0LWUPD = "Y"; /* display updated db.*/
      PK0LW01.PK0LWDDB = "Y"; /* database updated*/
      converseLib.validationFailed(91); /* ; database updated*/
    end
  end



  if (SQLCA.VAGen_SQLCODE == -911)
    PK0LW01.PK0LWC91 = "Y"; /* ; contention on change*/
    PK0LW01.PK0LWUPD = "Y"; /* display updated db.*/
    PK0LW01.PK0LWPBM[PK0LWSB3] = PK0LW01.PK0LWCUS[PK0LWSB1];
    PK0LW01.PK0LWSB3 = PK0LW01.PK0LWSB3 + 1; /* bump up*/
    PK0LM030.XXXERRID = "PK0L083"; /* error location*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      PK0LW01.PK0LWCDL = "Y"; /* ; someone deleted it!!!*/
      PK0LW01.PK0LWUPD = "Y"; /* ; display updated db.*/
    else
      if (SQLCA.VAGen_SQLCODE != +0)
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "PK0L";
        TA1REC.TA1LOCAT[1] = "U ";
        TA1REC.TA1LOCAT[2] = "PK0L083";
        TA1REC.TA1LOCAT[3] = "IO0730";
        TA1REC.TA1MAP = "PK0LM030";
        TA1REC.TA1DBASE = "DPICK.";
        TA1REC.TA1TBLVU = "VSELCU01"; /* table view*/
        TA1REC.TA1TBLKE = PK0LM030.KUCCOID; /* table key*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        XSPF4();
        VAGen_EZEMSG = 9999;
        exit stack;
      end
    end
  end



end // end PK0LS83

// dates for new/changed records
Function PK0LS84()



   /*  */
   /* ----------------- y2k out begin -------*/
   /*  */
   /* MOVE EZEDTE TO PK0LW01.PK0LWFDA;  /* date*/
   /* MOVE '19' TO PK0LW01.PK0LWFCT;    /* centry*/
   /*  */
   /* ----------------- y2k out end ---------*/
   /*  */
   /*  */
   /* ----------------- y2k in begin -------*/
   /*  */
  PK0LW01.PK0LWFDT = VGVar.currentGregorianDate; /* date with century*/
   /*  */
   /* ----------------- y2k in end ---------*/
   /*  */
  PKGREC.ZZZCHGDT = PK0LW01.PK0LWFDT; /* change date*/
  PK0LW01.PK0LWTIM = VGVar.currentFormattedTime;
  PK0LW01.PK0LWTHH = PK0LW01.PK0LWHH;
  PK0LW01.PK0LWTMM = PK0LW01.PK0LWMI;
  PKGREC.ZZZCHGTM = PK0LW01.PK0LWTI; /* change time*/



end // end PK0LS84

//*** RECORD=PK0LW01 ****
// ;********************** pk0lw01 ****************************
// ;
// ;         work record for pk0l: select customer
// ;
// ;***********************************************************
// ***********************
Record PK0LW01 type basicRecord
  5 PK0LWGR1 PK0LWGR1 ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 PK0LW-XBC-HOLD PK0LW-XBC-HOLD ; 
    10 PK0LW-XDV-HOLD PK0LW-XDV-HOLD ; 
    10 PK0LWHS PK0LWHS ; 
    10 PK0LWABR PK0LWABR ; 
    10 PK0LWER PK0LWER ; 
    10 PK0LWCDT PK0LWCDT ; 
    10 PK0LWSB1 PK0LWSB1 ; 
    10 PK0LWSB2 PK0LWSB2 ; 
    10 PK0LWSB3 PK0LWSB3 ; 
    10 PK0LWSB4 PK0LWSB4 ; 
    10 PK0LWMAX PK0LWMAX ; 
    10 PK0LWTOP PK0LWTOP ; 
    10 PK0LWBOT PK0LWBOT ; 
    10 PK0LWMCH PK0LWMCH ; 
    10 PK0LWMNO PK0LWMNO ; 
    10 PK0LWFL1 PK0LWFL1 ; 
    10 PK0LWFL2 PK0LWFL2 ; 
    10 PK0LWSEL PK0LWSEL ; 
    10 PK0LWEDT PK0LWEDT ; 
    10 PK0LWUPD PK0LWUPD ; 
    10 PK0LWDDB PK0LWDDB ; 
    10 PK0LWA91 PK0LWA91 ; 
    10 PK0LWAAE PK0LWAAE ; 
    10 PK0LWC91 PK0LWC91 ; 
    10 PK0LWCDL PK0LWCDL ; 
    10 PK0LWCCT PK0LWCCT ; 
    10 PK0LWFT PK0LWFT ; 
    10 PK0LWCX1 PK0LWCX1 ; 
    10 PK0LWCX2 PK0LWCX2 ; 
      15 PK0LWC1 PK0LWC1 ; 
      15 PK0LWC2 PK0LWC2 ; 
      15 PK0LWC3 PK0LWC3 ; 
    10 PK0LWPP1 PK0LWPP1 ; 
    10 PK0LWDT PK0LWDT ; 
      15 PK0LWMM PK0LWMM ; 
      15 PK0LWDD PK0LWDD ; 
      15 PK0LWYY PK0LWYY ; 
    10 PK0LWFDT PK0LWFDT ; 
      15 PK0LWFCT PK0LWFCT ; 
      15 PK0LWFDA PK0LWFDA ; 
        20 PK0LWFYY PK0LWFYY ; 
        20 PK0LWFMM PK0LWFMM ; 
        20 PK0LWFDD PK0LWFDD ; 
    10 PK0LWTIM PK0LWTIM ; 
      15 PK0LWHH PK0LWHH ; 
      15 * char(1) ; 
      15 PK0LWMI PK0LWMI ; 
      15 * char(1) ; 
      15 PK0LWSS PK0LWSS ; 
    10 PK0LWTI PK0LWTI ; 
      15 PK0LWTHH PK0LWTHH ; 
      15 PK0LWTMM PK0LWTMM ; 
    10 * char(1) ; 
    10 PK0LWPBM PK0LWPBM [22] ; 
    10 PK0LWARY PK0LWARY [500] ; 
      15 PKXKUACT PKXKUACT ; 
      15 XPPCD XPPCD ; 
      15 XBCCD XBCCD ; 
      15 PK0LWCUS PK0LWCUS ; 
        20 KUCCOID KUCCOID ; 
        20 KUMSTRID KUMSTRID ; 
        20 XNXCD XNXCD ; 
      15 PK0LW-CO-I PK0LW-CO-I ; 
      15 PKHSCHED PKHSCHED ; 
      15 ZZZCHGCT ZZZCHGCT ; 
end // end PK0LW01

// Internal cu-co-id
DataItem PK0LW-CO-I int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// brand hold field
DataItem PK0LW-XBC-HOLD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// division hold field
DataItem PK0LW-XDV-HOLD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prob.add - 911
DataItem PK0LWA91 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prob.add - already exists
DataItem PK0LWAAE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save whse abrv
DataItem PK0LWABR char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer data array
DataItem PK0LWARY char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bottom of screen in w.s.array
DataItem PK0LWBOT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// company id- reformat
DataItem PK0LWC1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// store id-   reformat
DataItem PK0LWC2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// nike dept  - reformat
DataItem PK0LWC3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// prob.change- 911
DataItem PK0LWC91 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prob.change-d.b.updated prior
DataItem PK0LWCCT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prob.change-rec.deleted
DataItem PK0LWCDL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current date -yyyymmdd
DataItem PK0LWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer number
DataItem PK0LWCUS bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// reformat customer number
DataItem PK0LWCX1 bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// reformat customer number
DataItem PK0LWCX2 bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// day
DataItem PK0LWDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// database updated flag
DataItem PK0LWDDB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group date
DataItem PK0LWDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// database update request-flag
DataItem PK0LWEDT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save xxxerrid
DataItem PK0LWER char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem PK0LWFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yymmdd
DataItem PK0LWFDA num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PK0LWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date in yyyymmdd
DataItem PK0LWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// general flag
DataItem PK0LWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for warning message
DataItem PK0LWFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PK0LWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first time switch
DataItem PK0LWFT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PK0LWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// broup level
DataItem PK0LWGR1 char(10808)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hours
DataItem PK0LWHH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save whse
DataItem PK0LWHS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total # of valid customers
DataItem PK0LWMAX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// temporary location
DataItem PK0LWMCH num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// min.
DataItem PK0LWMI char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PK0LWMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold message number
DataItem PK0LWMNO num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// problem cust.num array
DataItem PK0LWPBM bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// pick priority held for compare
DataItem PK0LWPP1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// subscript - ws.loc of sb2
DataItem PK0LWSB1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// subscript - position on map
DataItem PK0LWSB2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// subscript - gen.purpose
DataItem PK0LWSB3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// subscript - gen.purpose
DataItem PK0LWSB4 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// data selected for trans- flag
DataItem PK0LWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sec.
DataItem PK0LWSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hours
DataItem PK0LWTHH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// time
DataItem PK0LWTI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group time
DataItem PK0LWTIM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minutes
DataItem PK0LWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// top of screen in w.s.array
DataItem PK0LWTOP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// refresh screen-redisplay data
DataItem PK0LWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PK0LWYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

