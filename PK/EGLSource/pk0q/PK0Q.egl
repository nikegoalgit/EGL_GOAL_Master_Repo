package pk0q;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import pk.common.*;
import sl.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PK0Q ****
// ------------------------------------------------------------
// ------------------------------------------------------------
// ------------------------------------------------------------
// ----- pk0q  -  Picking Customer forced offline screen.  ----
// -----          The purpose of this screen is to         ----
// -----          designate certain customers orders to    ----
// -----          be picked from an offline location.      ----
// -----          If a customer/location is added to the   ----
// -----          customer forced location table, nightly  ----
// -----          picking will assign the zone, area and   ----
// -----          location on the table rather than using  ----
// -----          the stock locate area, zone and location ----
// -----          that would normally be assigned.         ----
// -----                                                   ----
// -----          This program supports selecting          ----
// -----          customers, jumping to customer inquiry   ----
// -----          and returning with those customers      ----
// -----          displayed as have being viewed.          ----
// -----          (shown with a 'v' in the action field)   ----
// -----                                                   ----
// ------------------------------------------------------------
// ------------------------------------------------------------
// ------------------------------------------------------------
// ----- Maintenance log:                                  ----
// -----                                                   ----
// ----- name      date      description                   ----
// ----- PRM     06/29/87    created                       ----
// ----- JWOOD   11/29/88    ADDED NONCSP OPTION TO CALLS  ----
// ----- JWOOD   11/29/88    ADDED XSSEGTR LOGIC           ----
// ----- Jcampb  07/21/89    change xfer from pk0i to pk09 ----
// ----- BHARRI  03/19/91    Restrict warehouse 51 from PK0Q200
// ----- DCHIAN  12/02/91    REMOVE PF19 & PF20 TRANSFERS, ----
// -----                     CHANGE 'ROW' TO 'LOCTN' ON MAP----
// -----                     & EDIT, ALLOW ONLY LOCATION   ----
// -----                     TYPE CODES(SL5REC.YLTCD = '15'----
// -----                     OR '17' BEFORE UPDATING DPICK.----
// -----                     VCULOC01 TABLE.               ----
// ----- MWALTO  06/24/92    Move brand code to pk3rec     ----
// -----                     before calling io1430 in      ----
// -----                     pk0q120, 320 & 340.           ----
// ----- SMACMI  08/24/92    Added brand code to the map   ----
// -----                     for Cole-Haan install         ----
// ----- CBRINE  08/11/95    CANADA Added XCTCD to PKWREC  ----
// ------------------------------------------------------------
// ------------------------------------------------------------
// 
// ----- NGANGO 01/30/98   Y2K modifications,in Process PK0Q340
//                         the century hard coding is replaced.
// ------------------------------------------------------------
// ------------------------------------------------------------
// *********************
Program PK0Q type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK0QW01 PK0QW01; // record
  PK0QW04 PK0QW04; // record
  PK3REC PK3REC; // record
  PK6REC PK6REC; // record
  PKWREC PKWREC; // record
  PKXREC PKXREC; // record
  SL5REC SL5REC; // record
  SQLCA SQLCA; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use XBCTBL {deleteAfterUse = yes}; // table
  use PK0QM.PK0QM010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PK0Q005: PK0Q005();
  end // end main
end // end PK0Q

// main process
Function PK0Q005()

   /* ---------------  CUSTOMER FORCED ZONE TABLE MAINTENENCE ----*/
   /* ---------------          main process  pk0q005          ----*/

  XSENTRY();


  XSSEGTR();


  PK0Q100(); /* initialization*/

  PK0QW01.PK0QWFL2 = "Y";
  while (PK0QW01.PK0QWFL2 == "Y")
    PK0Q200(); /* converse map until done*/
  end


   /* -------------  end process pk0q005  --------------------*/
end // end PK0Q005

// initialization routine
Function PK0Q100()

   /* ---------------  pk0q100 initialization  -------------------*/









        /* clear records and*/
        /* set up map header information*/
  set PK0QM010 initial; /* initially clear the map*/
  set PK0QW01 empty; /* initially clear working storage*/
  set PK0QW04 empty; /* initially clear working storage*/
  set PK3REC empty; /* initially clear cust. forced loc*/
  PK0QW01.PK0QWFL8 = "Y"; /* first time thru flag*/
  PK0QM010.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  PK0QM010.XXXRVNBR = 01; /* revision number*/
  converseVar.segmentedMode = 1; /* run in segmented mode*/
  VGVar.handleHardIOErrors = 1; /* to trap hard errors in program*/
  converseVar.commitOnConverse = 1; /* auto commit on every map converse*/






  PKWREC.PKWGRPLV = COMMAREA.CAUSERA;




        /* if returning from customer inquiry*/
            /* next sentence*/
        /* else*/
            /* if transfer was from inside picking*/
            /* and warehouse changed from commarea.xwhcd*/
            /* and security allows warehouse change*/
                /* get whse abreviation using pkwrec.xwhcd*/
            /* else*/
                /* get whse abreviation using commarea.xwhcd*/
  if (PKWREC.PKWINDEX > 0
   && PKWREC.PKWFRMAP[1] == COMMAREA.CACURRAP)
     /* next sentence*/
  else
    PK0QW01.PK0QWFRM = COMMAREA.CAFROMAP;
    if (PK0QW01.PK0QWFRM != "PK0"
     && PK0QW01.PK0QWFRM != "PW0")
      set PKWREC empty; /* initially clear the shared work rec*/
      PKWREC.XWHCD = COMMAREA.XWHCD;
      PK0QM010.XWHCD = COMMAREA.XWHCD;
      PK0Q110(); /* get warehouse abbreviation*/
    else
      if (PKWREC.XWHCD != COMMAREA.XWHCD)
        /* and commarea.calvl(1) eq 'y'*/
        PK0QM010.XWHCD = PKWREC.XWHCD;
        PK0Q110(); /* get warehouse abbreviation*/
      else
        PKWREC.XWHCD = COMMAREA.XWHCD;
        PK0QM010.XWHCD = COMMAREA.XWHCD;
        PK0Q110(); /* get warehouse abbreviation*/
      end
    end
  end



   /* if warehouse lookup was not successful, exit*/
  if (PK0QW01.PK0QWFL3 == "N")
    return;
  end




   /* ----- IF RETURNING FROM CUSTOMER INQUIRY*/
   /* -----     set the beginning and ending boundaries*/
   /* -----     of the map to 0*/
   /* -----     load the customer forced location table*/
   /* -----     into map and working storage*/
   /* ----- else*/
   /* -----     set the beginning and ending boundaries*/
   /* -----     of the map to 1 and 28*/
   /* -----     load the customer forced location table*/
   /* -----     into map and working storage.*/
  if (PKWREC.PKWINDEX > 0
   && PKWREC.PKWFRMAP[1] == COMMAREA.CACURRAP)
    PKXREC.PKWARRAY = PKWREC.PKWARRAY[1];
    PKWREC.XWHCD = PKXREC.XWHCD;
    PK0QM010.XWHCD = PKXREC.XWHCD;
    PKWREC.XWHABRV = PKXREC.XWHABRV;
    PK0QM010.XWHABRV = PKXREC.XWHABRV;
    PK0QW01.PK0QWBAS = 0;
    PK0QW01.PK0QWEND = 0;
    PK0Q120();
  else
    PK0QW01.PK0QWBAS = 1;
    PK0QW01.PK0QWEND = 28;
    PK0Q120();
  end



  PKWREC.PKWINDEX = 0;
  PKWREC.PKWCNTRL = " ";


   /* -------------  end process pk0q100  --------------------*/
end // end PK0Q100

// get warehouse abbreviation
Function PK0Q110()

   /* ---------------  pk0q110 get warehouse abbreviation --------*/
   /* ---------------  and warehouse offline zone and area*/




  PK0QW01.PK0QWFL3 = "Y"; /* whse lookup successful flag*/
  if (PKWREC.XWHCD in XWHTBL.XWHCD)
    PK0QM010.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end

  if (sysVar.arrayIndex == 0) /* Table entry not found*/
    converseLib.validationFailed(2); /* Indicate invalid warehouse*/
    PK0QM010.XWHABRV = " ";
    PK0QW01.PK0QWFL3 = "N"; /* whse lookup successful flag*/
    set PK0QM010.XWHCD cursor, bold;
    return; /* Return to caller*/
  end

  if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not active warehouse status*/
    converseLib.validationFailed(3); /* Indicate inactive warehouse*/
    PK0QM010.XWHABRV = " ";
    PK0QW01.PK0QWFL3 = "N"; /* whse lookup successful flag*/
    set PK0QM010.XWHCD cursor, bold;
    return; /* Return to caller*/
  end


  PKWREC.XWHABRV = PK0QM010.XWHABRV;


   /* -------------  end process pk0q110  --------------------*/
end // end PK0Q110

// load map
Function PK0Q120()

   /* ---------------  pk0q120   ---------------------------------*/
       /* load map with customer forced zone table records*/



   /* ----- if table overflow has occured (pk0qwfl4 = 'y')*/
   /* ----- from a previous execution of this module*/
   /* -----     set ezemno and get out.*/
  if (PK0QW01.PK0QWFL4 == "Y")
    converseLib.validationFailed(24);
    return;
  end

       /* do a select set on the customer forced location tbl*/

  PK3REC.XWHCD = PKWREC.XWHCD; /* warehouse code*/
  PK3REC.XBCCD = PKWREC.XBCCD; /* brand code*/

  call "IO1430" ("SS", SQLCA, PK3REC) {isNoRefresh = yes, isExternal = yes}; /* select set by warehouse*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(21); /* contention for data base resorce*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* no records found,*/
        return; /* no need to load the map/ws*/
      else
        converseLib.validationFailed(22); /* fatal error*/
        return;
      end
    end
  end


       /* load map until end of customer forced loc table*/
  PK0QW01.PK0QWNDX = 1;
  PK0QW01.PK0QWNX2 = 1;
  PK0QW01.PK0QWNX3 = 1;
  PK0QW01.PK0QWFL1 = "Y";
  while (PK0QW01.PK0QWFL1 == "Y")
    PK0Q130();
  end




  call "IO1430" ("CS", SQLCA, PK3REC) {isNoRefresh = yes, isExternal = yes}; /* select set by warehouse*/




   /* -------------  end process pk0q120  --------------------*/
end // end PK0Q120

// load working storage
Function PK0Q130()
   /* ---------------  pk0q130   ---------------------------------*/
       /* load working storage*/


   /* ---------------  read customer forced zone table  ----------*/
  call "IO1430" ("SN", SQLCA, PK3REC) {isNoRefresh = yes, isExternal = yes}; /* select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(21); /* contention for data base resorce*/
      PK0QW01.PK0QWFL1 = "N";
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* end of file*/
        PK0QW01.PK0QWFL1 = "N";
        PK0QW01.PK0QWTRR = PK0QW01.PK0QWNDX; /* total records read*/
        PK0QW01.PK0QWTRR = PK0QW01.PK0QWTRR - 1;
        return; /* done loading the map/ws*/
      else
        converseLib.validationFailed(22); /* fatal error*/
        PK0QW01.PK0QWFL1 = "N";
        return;
      end
    end
  end



  if (PK0QW01.PK0QWNDX < 501)
    PK0QW01.XBCCD[PK0QWNDX] = PK3REC.XBCCD;
    PK0QW01.KUCCOID[PK0QWNDX] = PK3REC.KUCCOID;
    PK0QW01.KUMSTRID[PK0QWNDX] = PK3REC.KUMSTRID;
    PK0QW01.XNXCD[PK0QWNDX] = PK3REC.XNXCD;
    PK0QW01.XARCD[PK0QWNDX] = PK3REC.XARCD;
    PK0QW01.SL4ZONE[PK0QWNDX] = PK3REC.SL4ZONE;
    PK0QW01.SL5LOCTN[PK0QWNDX] = PK3REC.SL5LOCTN;
    PK0QW01.ZZZCHGCT[PK0QWNDX] = PK3REC.ZZZCHGCT;
  else
    PK0QW01.PK0QWFL1 = "N";
    PK0QW01.PK0QWFL4 = "Y"; /* table overflow flag*/
    converseLib.validationFailed(24); /* table overflow*/
    return;
  end




   /* ----- if returning from customer inquiry*/
   /* -----     load map using pkwrec keys*/
   /* ----- else*/
   /* -----     load map.*/
  if (PKWREC.PKWINDEX > 0
   && PKWREC.PKWFRMAP[PKWINDEX] == COMMAREA.CACURRAP)
    PK0Q135();
  else
    PK0Q137();
  end




  PK0QW01.PK0QWNDX = PK0QW01.PK0QWNDX + 1; /* increment index*/


   /* -------------  end process pk0q130  --------------------*/
end // end PK0Q130

// load map using pkwrec keys
Function PK0Q135()

   /* ---------------  pk0q135   ---------------------------------*/
       /* start map at first customer key*/


   /* ----- if first time thru*/
   /* ----- and keys match that of the*/
   /* ----- first element of the work record*/
   /* -----     set the beginning and ending boundaries*/
   /* -----     of the map relative to the 500 element array.*/
  if (PK0QW01.PK0QWFL8 == "Y"
   && PK3REC.KUCCOID == PKXREC.KUCCOID[1]
   && PK3REC.KUMSTRID == PKXREC.KUMSTRID[1]
   && PK3REC.XNXCD == PKXREC.XNXCD[1])
    PK0QW01.PK0QWFL8 = "N";
    PK0QW01.PK0QWBAS = PK0QW01.PK0QWNDX;
    PK0QW01.PK0QWEND = PK0QW01.PK0QWBAS + 27;
  end






  if (PK0QW01.PK0QWNDX <= PK0QW01.PK0QWEND
   && PK0QW01.PK0QWNDX >= PK0QW01.PK0QWBAS)
    PK0QM010.XBCCD[PK0QWNX2] = PK3REC.XBCCD;
    set PK0QM010.XBCCD[PK0QWNX2] skip; /* no changes to brand code*/
    PK0QM010.KUCCOID[PK0QWNX2] = PK3REC.KUCCOID;
    PK0QW01.PK0QWN4 = PK3REC.KUMSTRID;
    PK0Q136(); /* numeric to alpha convert*/
    PK0QM010.PK0QMSTR[PK0QWNX2] = PK0QW01.PK0QWALP;
    PK0QW01.PK0QWN4 = PK3REC.XNXCD;
    if (PK0QW01.PK0QWN4 != -1)
      PK0QW01.PK0QWN4 = PK0QW01.PK0QWN4 * 100;
    end
    PK0Q136(); /* numeric to alpha convert*/
    PK0QM010.PK0QMXNX[PK0QWNX2] = PK0QW01.PK0QWALP;
    PK0QM010.XARCD[PK0QWNX2] = PK3REC.XARCD;
    PK0QM010.SL5LOCTN[PK0QWNX2] = PK3REC.SL5LOCTN;
    PK0QM010.SL4ZONE[PK0QWNX2] = PK3REC.SL4ZONE;
  end





  if (PK3REC.KUCCOID > PKXREC.KUCCOID[PK0QWNX3]
   && PK0QW01.PK0QWNX3 < 28)
    PK0QW01.PK0QWNX3 = PK0QW01.PK0QWNX3 + 1;
  end


  if (PK3REC.KUCCOID == PKXREC.KUCCOID[PK0QWNX3]
   && PK3REC.KUMSTRID > PKXREC.KUMSTRID[PK0QWNX3]
   && PK0QW01.PK0QWNX3 < 28)
    PK0QW01.PK0QWNX3 = PK0QW01.PK0QWNX3 + 1;
  end


  if (PK3REC.KUCCOID == PKXREC.KUCCOID[PK0QWNX3]
   && PK3REC.KUMSTRID == PKXREC.KUMSTRID[PK0QWNX3]
   && PK3REC.XNXCD > PKXREC.XNXCD[PK0QWNX3]
   && PK0QW01.PK0QWNX3 < 28)
    PK0QW01.PK0QWNX3 = PK0QW01.PK0QWNX3 + 1;
  end


  if (PK3REC.KUCCOID == PKXREC.KUCCOID[PK0QWNX3]
   && PK3REC.KUMSTRID == PKXREC.KUMSTRID[PK0QWNX3]
   && PK3REC.XNXCD == PKXREC.XNXCD[PK0QWNX3])
    PK0QM010.PK0QMACT[PK0QWNX2] = PKXREC.PKXKUACT[PK0QWNX3];
    PK0QW01.PK0QWACT[PK0QWNDX] = PKXREC.PKXKUACT[PK0QWNX3];
  end




  if (PK0QW01.PK0QWNDX <= PK0QW01.PK0QWEND
   && PK0QW01.PK0QWNDX >= PK0QW01.PK0QWBAS)
    PK0QW01.PK0QWNX2 = PK0QW01.PK0QWNX2 + 1; /* increment index*/
  end
   /* -------------  end process pk0q135  --------------------*/
end // end PK0Q135

// convert numeric to alpha
Function PK0Q136()
   /* ---------------  pk0q136    --------------------------------*/
   /* ---------------  convert numeric to alpha*/




  if (PK0QW01.PK0QWN4 == -1)
    PK0QW01.PK0QWALP = "ALL ";
  else
    if (PK0QW01.PK0QWN4 == 0)
      PK0QW01.PK0QWALP = "    ";
    else
      PK0QW01.PK0QWALP = PK0QW01.PK0QWNU4;
      if (PK0QW01.PK0QWDIG[4] != "0"
       && PK0QW01.PK0QWDIG[3] == "0"
       && PK0QW01.PK0QWDIG[2] == "0"
       && PK0QW01.PK0QWDIG[1] == "0")
        PK0QW01.PK0QWDIG[3] = " ";
        PK0QW01.PK0QWDIG[2] = " ";
        PK0QW01.PK0QWDIG[1] = " ";
      else

        if (PK0QW01.PK0QWDIG[3] != "0"
         && PK0QW01.PK0QWDIG[2] == "0"
         && PK0QW01.PK0QWDIG[1] == "0")
          PK0QW01.PK0QWDIG[2] = " ";
          PK0QW01.PK0QWDIG[1] = " ";
        else
          if (PK0QW01.PK0QWDIG[2] != "0"
           && PK0QW01.PK0QWDIG[1] == "0")
            PK0QW01.PK0QWDIG[1] = " ";
          end
        end
      end
    end
  end



   /* ------------------- end pk0q136 -------------------------*/
end // end PK0Q136

// load map
Function PK0Q137()

   /* ---------------  pk0q137   ---------------------------------*/
       /* load map*/


  if (PK0QW01.PK0QWNDX <= PK0QW01.PK0QWEND
   && PK0QW01.PK0QWNDX >= PK0QW01.PK0QWBAS)
    PK0QM010.XBCCD[PK0QWNX2] = PK3REC.XBCCD;
    set PK0QM010.XBCCD[PK0QWNX2] skip; /* no changes to brand code*/
    PK0QM010.KUCCOID[PK0QWNX2] = PK3REC.KUCCOID;
    PK0QW01.PK0QWN4 = PK3REC.KUMSTRID;
    PK0Q136(); /* numeric to alpha convert*/
    PK0QM010.PK0QMSTR[PK0QWNX2] = PK0QW01.PK0QWALP;
    PK0QW01.PK0QWN4 = PK3REC.XNXCD;
    if (PK0QW01.PK0QWN4 != -1)
      PK0QW01.PK0QWN4 = PK0QW01.PK0QWN4 * 100;
    end
    PK0Q136(); /* numeric to alpha convert*/
    PK0QM010.PK0QMXNX[PK0QWNX2] = PK0QW01.PK0QWALP;
    PK0QM010.XARCD[PK0QWNX2] = PK3REC.XARCD;
    PK0QM010.SL5LOCTN[PK0QWNX2] = PK3REC.SL5LOCTN;
    PK0QM010.SL4ZONE[PK0QWNX2] = PK3REC.SL4ZONE;
    PK0QW01.PK0QWNX2 = PK0QW01.PK0QWNX2 + 1; /* increment index*/
  end




   /* -------------  end process pk0q130  --------------------*/
end // end PK0Q137

// converse map until done
Function PK0Q200()
   /* --------------  pk0q200    --------------------------------*/
   /* --------------  converse map until done   -----------------*/


   /* ---------------         convert any cole-haan adds to proper*/
   /* ---------------         c-h nbrs*/
  PK0QW01.PK0QWNX2 = 1;
  while (PK0QW01.PK0QWNX2 <= 28)
    PK0Q220();
  end



  converse PK0QM010 ;
   /* ----- if table overflow*/
   /* -----     go back to main menu.*/
  if (PK0QW01.PK0QWFL4 == "Y")
    set PKWREC empty;
    PKWREC.XWHCD = PK0QM010.XWHCD;
    PKWREC.XWHABRV = PK0QM010.XWHABRV;
    COMMAREA.CATOAP = "PK0A";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to pick master menu*/
    PK0QM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  end






   /* ---------------         convert any cole-haan adds to proper*/
   /* ---------------         c-h nbrs*/
  PK0QW01.PK0QWNX2 = 1;
  while (PK0QW01.PK0QWNX2 <= 28)
    PK0Q220();
  end







   /* ---------------  if warehouse is not modified         ------*/
   /* ---------------      check pf keys                    ------*/
  PK0QW01.PK0QWFL7 = "N";
  if (PK0QM010.XWHCD is modified)
    if (PK0QM010.XWHCD == "51") /* If warehouse 51*/
      set PK0QM010.XWHCD cursor, modified, bold; /* highlight warehouse*/
      PKWREC.XWHCD = " "; /* init work rec field*/
      converseLib.validationFailed(370);
                                   /* 'application unavailable'*/
      return; /* return*/
    end /* end if*/
  else
    PK0Q230();
  end

   /* ---------------  if error condition occured*/
   /* ---------------      get out.  the screen will be     ------*/
   /* ---------------      conversed again.                 ------*/
  if (converseVar.validationMsgNum != 0)
    return;
  end





   /* ---------------  if warehouse has been modified*/
   /* ---------------  and security allows warehouse changes*/
   /* ---------------      get warehouse abbreviation*/
   /* ---------------      and reload map and working storage*/
   /* ---------------      with new set of records*/
  if (PK0QM010.XWHCD is modified)
     /* AND COMMAREA.CACLVL(1) EQ 'Y';*/
    PK0Q250(); /* change warehouses*/
  end

   /* ---------------  if warehouse could not be resolved   ------*/
   /* ---------------      get out.  the screen will be     ------*/
   /* ---------------      conversed again.                 ------*/
  if (PK0QW01.PK0QWFL3 == "N")
    set PK0QM010.XWHCD cursor, bold;
    converseLib.validationFailed(2);
    return;
  end




   /* --------------- if updates were requested*/
   /* ---------------     update customer forced location table. -*/
   /* ---------------     this  process is performed 28 times  ---*/
   /* ---------------     varying the index from 1 to 28       ---*/
   /* ---------------     if updates were successful*/
   /* ---------------         clear the map and working storage*/
   /* ---------------         reload the map and working storage.*/
  if (PK0QW01.PK0QWFL7 == "Y"
   && converseVar.validationMsgNum == 0)
    PK0QW01.PK0QWNDX = 1;
    PK0QW01.PK0QWNX2 = 1;
    PK0QW01.PK0QWFL9 = "N";
    while (PK0QW01.PK0QWNX2 <= 28
     && PK0QW01.PK0QWFL9 == "N")
      PK0Q300();
    end
    if (PK0QW01.PK0QWFL9 == "N")
      PK0QW01.PK0QWNX2 = 1;
      while (PK0QW01.PK0QWNX2 <= 28)
        PK0Q400();
      end
      PK0QW01.PK0QWFL7 = "N";
      PK0QW01.PK0QWCUS = PK0QW04.PK0QW4GP;
      PK0Q120();
      set PK0QM010.PK0QMACT[1] cursor;
    end
  end
  if (PK0QW01.PK0QWFL7 == "N"
   && converseVar.validationMsgNum == 0)
    set PK0QM010.PK0QMACT[1] cursor;
  end


   /* ------------------- end pk0q200 -------------------------*/
end // end PK0Q200

// convert input to cole-haan
Function PK0Q220()

   /* ---------------  pk0q220   ---------------------------------*/
       /* start map at first customer key*/


  if (PK0QM010.XBCCD[PK0QWNX2] == "08")
    if (PK0QM010.KUCCOID[PK0QWNX2] > 7999999
     && PK0QM010.KUCCOID[PK0QWNX2] < 9000000)
      PK0QM010.KUCCOID[PK0QWNX2] = PK0QM010.KUCCOID[PK0QWNX2] - 8000000;
    end
  else
    if (PK0QM010.KUCCOID[PK0QWNX2] > 7999999
     && PK0QM010.KUCCOID[PK0QWNX2] < 9000000)
      PK0QM010.KUCCOID[PK0QWNX2] = PK0QM010.KUCCOID[PK0QWNX2] - 8000000;
      PK0QM010.XBCCD[PK0QWNX2] = "08";
    end
  end


  PK0QW01.PK0QWNX2 = PK0QW01.PK0QWNX2 + 1; /* increment index*/


   /* -------------  end process pk0q220  --------------------*/
end // end PK0Q220

// check pf keys/user input
Function PK0Q230()
   /* ---------------  pk0q230    --------------------------------*/
   /* ---------------  check pf keys                        ------*/


  PK0QM010.XXXERRID = "PK0Q230"; /* Process name*/


   /* -----  check for valid pf keys                        ------*/
  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf10
   || converseVar.eventKey is pf11
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf18
   || converseVar.eventKey is enter
   || converseVar.eventKey is pa2)
    /* next sentence*/
  else
    converseLib.validationFailed(12); /* invalid pf key*/
    return; /* Exit to redisplay map*/
  end






  if (converseVar.eventKey is pf1)
    XSPF1(); /* go to help application*/
    PK0QM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  end






       /* re-load the customer forced location table*/
       /* into the map and working storage*/
  if (converseVar.eventKey is pa2) /* cancel*/
    set PK0QM010 initial; /* initially clear the map*/
    PK0QM010.XWHCD = PKWREC.XWHCD; /* move wearehouse into pkwrec*/
    PK0QM010.XWHABRV = PKWREC.XWHABRV; /* move whse abrev into pkwrec*/
    PK0QM010.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
    PK0QM010.XXXRVNBR = 11; /* revision number*/
    PK0QW01.PK0QWNDX = 1;
    PK0QW01.PK0QWNX2 = 1;
    PK0QW01.PK0QWFL6 = "N";
    while (PK0QW01.PK0QWFL6 == "N")
      PK0Q232();
    end
    return;
  end





  if (converseVar.eventKey is pf3)
    set PKWREC empty;
    PKWREC.XWHCD = PK0QM010.XWHCD;
    PKWREC.XWHABRV = PK0QM010.XWHABRV;
    COMMAREA.CAFROMAP = "PK0Q";
    COMMAREA.CATOAP = "PK0A";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to pick master menu*/
    PK0QM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  end




     /* moves common to all transferrs*/

  PKWREC.XWHCD = PK0QM010.XWHCD;
  COMMAREA.CAFROMAP = "PK0Q";



  if (converseVar.eventKey is pf4)
    XSPF4(); /* go to master menu*/
    PK0QM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end


  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "PK0B";
    PKWREC.PKWFRMAP = "PK0Q";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to picking order inquiry*/
    PK0QM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end


  if (converseVar.eventKey is pf14)
    COMMAREA.CATOAP = "PK0C";
    PKWREC.PKWFRMAP = "PK0Q";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to picking line item inquiry*/
    PK0QM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end


  if (converseVar.eventKey is pf15)
    COMMAREA.CATOAP = "PK0D";
    PKWREC.PKWFRMAP = "PK0Q";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to picking customer inquiry*/
    PK0QM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end


  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "PK0Z"; /* go to picking*/
    PKWREC.PKWFRMAP = "PK0Q";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* sales program/product inquiry*/
    PK0QM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end


  if (converseVar.eventKey is pf18)
    COMMAREA.CATOAP = "PK09";
    PKWREC.PKWFRMAP = "PK0Q";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to picking hold/release*/
    PK0QM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end



       /* first, check for 'no more pages' condition*/

       /* check for paging forward (pf8) and backward (pf7) thru*/
       /* the 500 element array in pk0qw01 record.*/
       /* if the user pages backward or forward*/
       /* but all records read in will fit on a single map*/
         /* do nothing, paging is meaningless*/
       /* else*/
         /* if user pages forward*/
         /* and the end of the total*/
         /* records read has not been reached*/
           /* set the beginning and ending indexes up by 28*/
         /* else*/
           /* if user pages backward*/
           /* and the we are not*/
             /* already positioned at the beginning of the array*/
             /* set the beginning and ending indexes down by 28.*/
             /* (or to the initial position)*/

  if (converseVar.eventKey is pf7 /* (back)*/
   && PK0QW01.PK0QWBAS == 1)     
    converseLib.validationFailed(37);
  end
  if (converseVar.eventKey is pf8 /* (frwd)*/
   && PK0QW01.PK0QWEND >= PK0QW01.PK0QWTRR)
    converseLib.validationFailed(38);
  end

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    if (PK0QW01.PK0QWTRR < 29)
       /* next sentence*/
    else
      if (converseVar.eventKey is pf8 /* (frwd)*/
       && PK0QW01.PK0QWEND < PK0QW01.PK0QWTRR)
        PK0QW01.PK0QWEND = PK0QW01.PK0QWEND + 28;
        PK0QW01.PK0QWBAS = PK0QW01.PK0QWBAS + 28;
        PK0QW01.PK0QWNDX = 1;
        PK0QW01.PK0QWNX2 = 1;
        PK0QW01.PK0QWFL6 = "N";
        while (PK0QW01.PK0QWFL6 == "N")
          PK0Q235();
        end
      else
        if (converseVar.eventKey is pf7 /* (back)*/
         && PK0QW01.PK0QWBAS > 1)      
          PK0QW01.PK0QWEND = PK0QW01.PK0QWEND - 28;
          PK0QW01.PK0QWBAS = PK0QW01.PK0QWBAS - 28;
          if (PK0QW01.PK0QWBAS < 1)
            PK0QW01.PK0QWEND = 28;
            PK0QW01.PK0QWNDX = 1;
            PK0QW01.PK0QWNX2 = 1;
            PK0QW01.PK0QWBAS = 1;
            PK0QW01.PK0QWFL6 = "N";
            while (PK0QW01.PK0QWFL6 == "N")
              PK0Q235();
            end
          else
            PK0QW01.PK0QWNDX = 1;
            PK0QW01.PK0QWNX2 = 1;
            PK0QW01.PK0QWFL6 = "N";
            while (PK0QW01.PK0QWFL6 == "N")
              PK0Q235();
            end
          end
        end
      end
    end
  end


       /* if ezeaid is enter*/
           /* check for selected customer inquiry*/
  PK0QW01.PK0QWFL5 = "N";
  if (converseVar.eventKey is enter)
    if (PK0QM010.PK0QMACT[1] == "S"
     || PK0QM010.PK0QMACT[2] == "S"
     || PK0QM010.PK0QMACT[3] == "S"
     || PK0QM010.PK0QMACT[4] == "S"
     || PK0QM010.PK0QMACT[5] == "S"
     || PK0QM010.PK0QMACT[6] == "S"
     || PK0QM010.PK0QMACT[7] == "S"
     || PK0QM010.PK0QMACT[8] == "S"
     || PK0QM010.PK0QMACT[9] == "S"
     || PK0QM010.PK0QMACT[10] == "S"
     || PK0QM010.PK0QMACT[11] == "S"
     || PK0QM010.PK0QMACT[12] == "S"
     || PK0QM010.PK0QMACT[13] == "S"
     || PK0QM010.PK0QMACT[14] == "S"
     || PK0QM010.PK0QMACT[15] == "S"
     || PK0QM010.PK0QMACT[16] == "S"
     || PK0QM010.PK0QMACT[17] == "S"
     || PK0QM010.PK0QMACT[18] == "S"
     || PK0QM010.PK0QMACT[19] == "S"
     || PK0QM010.PK0QMACT[20] == "S"
     || PK0QM010.PK0QMACT[21] == "S"
     || PK0QM010.PK0QMACT[22] == "S"
     || PK0QM010.PK0QMACT[23] == "S"
     || PK0QM010.PK0QMACT[24] == "S"
     || PK0QM010.PK0QMACT[25] == "S"
     || PK0QM010.PK0QMACT[26] == "S"
     || PK0QM010.PK0QMACT[27] == "S"
     || PK0QM010.PK0QMACT[28] == "S")
      PK0QW01.PK0QWFL5 = "Y";
    end
  end





   /* ----- if ezeaid is enter*/
   /* -----    edit line items*/
  if (converseVar.eventKey is enter)
    PK0QW01.PK0QWNX2 = 28;
    PK0QW01.PK0QWFL6 = "N";
    PK0QW01.PK0QWFL7 = "N";
    while (PK0QW01.PK0QWFL6 == "N")
      PK0Q237();
    end
  end







   /* -----   if customer inquiry was selected*/
   /* -----   and no errors have occured*/
   /* -----      load customer numbers into pkwrec*/
   /* -----      set the inquiry selection type to 'c' for cust.*/
   /* -----      transfer control to pk0d - customer inquiry*/
  if (PK0QW01.PK0QWFL5 == "Y"
   && converseVar.validationMsgNum == 0)
    PKWREC.PKWINDEX = PKWREC.PKWINDEX + 1;
    PK0QW01.PK0QWNX3 = 1;
    PK0QW01.PK0QWNX2 = 1;
    PK0QW01.PK0QWFL6 = "N";
    set PKXREC empty;
    while (PK0QW01.PK0QWFL6 == "N")
      PK0Q238();
    end
    PKXREC.XWHCD = PKWREC.XWHCD;
    PKXREC.XWHABRV = PKWREC.XWHABRV;
    PKWREC.PKWARRAY[PKWINDEX] = PKXREC.PKWARRAY;
    PKWREC.PKWFRMAP[PKWINDEX] = COMMAREA.CACURRAP;
    PKWREC.PKWSLTYP[PKWINDEX] = "C";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    COMMAREA.CATOAP = "PK0D";
    XSEXIT();
    PK0QM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end




   /* ------------------- end pk0q230 -------------------------*/
end // end PK0Q230

// refresh screen
Function PK0Q232()

   /* ---------------  pk0q232   ---------------------------------*/
       /* refresh screen*/


  if (PK0QW01.PK0QWNDX > PK0QW01.PK0QWEND)
    PK0QW01.PK0QWFL6 = "Y";
  else
    if (PK0QW01.PK0QWNDX >= PK0QW01.PK0QWBAS)
      PK0QM010.PK0QMACT[PK0QWNX2] = " ";
      PK0QW01.PK0QWACT[PK0QWNDX] = " ";
      PK0QM010.XBCCD[PK0QWNX2] = PK0QW01.XBCCD[PK0QWNDX];
      if (PK0QW01.KUCCOID[PK0QWNDX] > 0) /* if cust entered*/
        set PK0QM010.XBCCD[PK0QWNX2] skip; /* no changes to brand code*/
      else
        set PK0QM010.XBCCD[PK0QWNX2] normal; /**/
      end
      PK0QM010.KUCCOID[PK0QWNX2] = PK0QW01.KUCCOID[PK0QWNDX];
      PK0QW01.PK0QWN4 = PK0QW01.KUMSTRID[PK0QWNDX];
      PK0Q136(); /* numeric to alpha convert*/
      PK0QM010.PK0QMSTR[PK0QWNX2] = PK0QW01.PK0QWALP;
      PK0QW01.PK0QWN4 = PK0QW01.XNXCD[PK0QWNDX];
      if (PK0QW01.PK0QWN4 != -1)
        PK0QW01.PK0QWN4 = PK0QW01.PK0QWN4 * 100;
      end
      PK0Q136(); /* numeric to alpha convert*/
      PK0QM010.PK0QMXNX[PK0QWNX2] = PK0QW01.PK0QWALP;
      PK0QM010.XARCD[PK0QWNX2] = PK0QW01.XARCD[PK0QWNDX];
      PK0QM010.SL5LOCTN[PK0QWNX2] = PK0QW01.SL5LOCTN[PK0QWNDX];
      PK0QM010.SL4ZONE[PK0QWNX2] = PK0QW01.SL4ZONE[PK0QWNDX];
      PK0QW01.PK0QWNX2 = PK0QW01.PK0QWNX2 + 1; /* increment index*/
    end
  end


  PK0QW01.PK0QWNDX = PK0QW01.PK0QWNDX + 1; /* increment index*/

   /* -------------  end process pk0q235  --------------------*/
end // end PK0Q232

// page forward or backwards
Function PK0Q235()

   /* ---------------  pk0q235   ---------------------------------*/
       /* page forwards or backwards*/


  if (PK0QW01.PK0QWNDX > PK0QW01.PK0QWEND)
    PK0QW01.PK0QWFL6 = "Y";
  else
    if (PK0QW01.PK0QWNDX >= PK0QW01.PK0QWBAS)
      PK0QM010.PK0QMACT[PK0QWNX2] = PK0QW01.PK0QWACT[PK0QWNDX];
      PK0QM010.XBCCD[PK0QWNX2] = PK0QW01.XBCCD[PK0QWNDX];
      set PK0QM010.XBCCD[PK0QWNX2] skip;
      PK0QM010.KUCCOID[PK0QWNX2] = PK0QW01.KUCCOID[PK0QWNDX];
      PK0QW01.PK0QWN4 = PK0QW01.KUMSTRID[PK0QWNDX];
      PK0Q136(); /* numeric to alpha convert*/
      PK0QM010.PK0QMSTR[PK0QWNX2] = PK0QW01.PK0QWALP;
      PK0QW01.PK0QWN4 = PK0QW01.XNXCD[PK0QWNDX];
      if (PK0QW01.PK0QWN4 != -1)
        PK0QW01.PK0QWN4 = PK0QW01.PK0QWN4 * 100;
      end
      PK0Q136(); /* numeric to alpha convert*/
      PK0QM010.PK0QMXNX[PK0QWNX2] = PK0QW01.PK0QWALP;
      PK0QM010.XARCD[PK0QWNX2] = PK0QW01.XARCD[PK0QWNDX];
      PK0QM010.SL5LOCTN[PK0QWNX2] = PK0QW01.SL5LOCTN[PK0QWNDX];
      PK0QM010.SL4ZONE[PK0QWNX2] = PK0QW01.SL4ZONE[PK0QWNDX];
       /* ----- reset fields*/
      set PK0QM010.XBCCD[PK0QWNX2] normal;
      set PK0QM010.KUCCOID[PK0QWNX2] normal;
      set PK0QM010.PK0QMSTR[PK0QWNX2] normal;
      set PK0QM010.PK0QMXNX[PK0QWNX2] normal;
      set PK0QM010.SL5LOCTN[PK0QWNX2] normal;
      set PK0QM010.SL4ZONE[PK0QWNX2] normal;
      set PK0QM010.XARCD[PK0QWNX2] normal;
      set PK0QM010.PK0QMACT[PK0QWNX2] normal;
      PK0QW01.PK0QWNX2 = PK0QW01.PK0QWNX2 + 1; /* increment index*/
    end
  end


  PK0QW01.PK0QWNDX = PK0QW01.PK0QWNDX + 1; /* increment index*/

   /* -------------  end process pk0q235  --------------------*/
end // end PK0Q235

// edit line items
Function PK0Q237()

   /* ---------------  pk0q237   ---------------------------------*/
   /* ----- edit line items*/

  PK0QM010.XXXERRID = "PK0Q237";
  PK0QW01.PK0QWFLA = "N"; /* invalid numeric flag*/
  PK0QW01.PK0QWFLB = "N"; /* customer had errors flag*/
  PK0QW01.PK0QWFLC = "N"; /* location had errors flag*/
  PK0QW01.PK0QWFLD = "N"; /* action field had errors flag*/




  if (PK0QW01.PK0QWNX2 < 1)
    PK0QW01.PK0QWFL6 = "Y";
    return;
  end



   /* ----- for adds and changes, location must be varified*/
  if (PK0QM010.PK0QMACT[PK0QWNX2] != "S"
   && PK0QM010.PK0QMACT[PK0QWNX2] != "V"
   && PK0QM010.PK0QMACT[PK0QWNX2] != "D"
   && PK0QM010.PK0QMACT[PK0QWNX2] != " ")
    PK0Q246();
  end





   /* ----- next, convert store id and xnxcd to numeric*/
  PK0Q240();




   /* ----- if and add is requested*/
   /* -----     varify that customer (company and store) exists.*/
  if (PK0QM010.PK0QMACT[PK0QWNX2] == "A")
    PK0Q248();
  end






   /* ----- if customer inquiry selection*/
   /* ----- and null customer*/
   /* -----     error.*/
  if (PK0QM010.PK0QMACT[PK0QWNX2] == "S")
    if (PK0QM010.KUCCOID[PK0QWNX2] == 0
     && PK0QM010.PK0QMSTR[PK0QWNX2] == "    "
     && PK0QM010.PK0QMXNX[PK0QWNX2] == "  ")
      set PK0QM010.KUCCOID[PK0QWNX2] cursor, bold;
      set PK0QM010.PK0QMSTR[PK0QWNX2] bold;
      set PK0QM010.PK0QMXNX[PK0QWNX2] bold;
      PK0QW01.PK0QWFLB = "Y"; /* customer had errors flag*/
      converseLib.validationFailed(33); /* error, can't select null customer*/
    end
  end





  if (PK0QM010.PK0QMACT[PK0QWNX2] != "A"
   && PK0QM010.PK0QMACT[PK0QWNX2] != "C"
   && PK0QM010.PK0QMACT[PK0QWNX2] != "D"
   && PK0QM010.PK0QMACT[PK0QWNX2] != "S"
   && PK0QM010.PK0QMACT[PK0QWNX2] != "V"
   && PK0QM010.PK0QMACT[PK0QWNX2] != " ")
    set PK0QM010.PK0QMACT[PK0QWNX2] cursor, bold;
    PK0QW01.PK0QWFLD = "Y"; /* action field had errors flag*/
    converseLib.validationFailed(35);
  end







  if (PK0QM010.PK0QMACT[PK0QWNX2] == "S")
    if (PK0QM010.PK0QMSTR[PK0QWNX2] == "ALL "
     || PK0QM010.PK0QMXNX[PK0QWNX2] == "AL"
     || PK0QM010.XARCD[PK0QWNX2] == "AL")
      set PK0QM010.PK0QMACT[PK0QWNX2] cursor, bold;
      PK0QW01.PK0QWFLD = "Y"; /* action field had errors*/
      converseLib.validationFailed(62); /* can't select for inq with wildcards*/
    end
  end



  if (PK0QW01.PK0QWBAS == 0)
    PK0QW01.PK0QWBAS = 1;
    PK0QW01.PK0QWEND = 28;
  end



  /* if nbr was changed to cole-haan*/
  PK0QW01.PK0QW-KUCCOID-WORK = PK0QM010.KUCCOID[PK0QWNX2] + 8000000;


   /* ----- if the action field is ' '*/
   /* ----- and fields have changed*/
   /* -----     it is an error, the user forgot to*/
   /* -----     put in 'a' or 'c'.*/
  PK0QW01.PK0QWNDX = PK0QW01.PK0QWNX2 + PK0QWBAS - 1;
  if (PK0QM010.PK0QMACT[PK0QWNX2] != "A"
   && PK0QM010.PK0QMACT[PK0QWNX2] != "C")
    if (PK0QW01.KUCCOID[PK0QWNDX] != PK0QM010.KUCCOID[PK0QWNX2]
     && PK0QW01.KUCCOID[PK0QWNDX] != PK0QW01.PK0QW-KUCCOID-WORK)
      PK0QM010.XBCCD[PK0QWNX2] = PK0QW01.XBCCD[PK0QWNDX];
      set PK0QM010.XBCCD[PK0QWNDX] skip; /* no changes to brand code*/
      PK0QM010.KUCCOID[PK0QWNX2] = PK0QW01.KUCCOID[PK0QWNDX];
      PK0QW01.PK0QWN4 = PK0QW01.KUMSTRID[PK0QWNDX];
      PK0Q136(); /* numeric to alpha convert*/
      PK0QM010.PK0QMSTR[PK0QWNX2] = PK0QW01.PK0QWALP;
      PK0QW01.PK0QWN4 = PK0QW01.XNXCD[PK0QWNDX];
      if (PK0QW01.PK0QWN4 != -1)
        PK0QW01.PK0QWN4 = PK0QW01.PK0QWN4 * 100;
      end
      PK0Q136(); /* numeric to alpha convert*/
      PK0QM010.PK0QMXNX[PK0QWNX2] = PK0QW01.PK0QWALP;
      PK0QM010.XARCD[PK0QWNX2] = PK0QW01.XARCD[PK0QWNDX];
      PK0QM010.SL5LOCTN[PK0QWNX2] = PK0QW01.SL5LOCTN[PK0QWNDX];
      PK0QM010.SL4ZONE[PK0QWNX2] = PK0QW01.SL4ZONE[PK0QWNDX];
      set PK0QM010.PK0QMACT[PK0QWNX2] cursor, bold;
      PK0QW01.PK0QWFLD = "Y"; /* action field had errors*/
      converseLib.validationFailed(43);
    else
      if (PK0QW01.KUMSTRID[PK0QWNDX] != PK0QW01.PK0QWST
       || PK0QW01.XNXCD[PK0QWNDX] != PK0QW01.PK0QWXNX
       || PK0QW01.XARCD[PK0QWNDX] != PK0QM010.XARCD[PK0QWNX2]
       || PK0QW01.SL5LOCTN[PK0QWNDX] != PK0QM010.SL5LOCTN[PK0QWNX2]
       || PK0QW01.SL4ZONE[PK0QWNDX] != PK0QM010.SL4ZONE[PK0QWNX2])
        PK0QM010.XBCCD[PK0QWNX2] = PK0QW01.XBCCD[PK0QWNDX];
        set PK0QM010.XBCCD[PK0QWNDX] skip; /* no changes to brand code*/
        PK0QM010.KUCCOID[PK0QWNX2] = PK0QW01.KUCCOID[PK0QWNDX];
        PK0QW01.PK0QWN4 = PK0QW01.KUMSTRID[PK0QWNDX];
        PK0Q136(); /* numeric to alpha convert*/
        PK0QM010.PK0QMSTR[PK0QWNX2] = PK0QW01.PK0QWALP;
        PK0QW01.PK0QWN4 = PK0QW01.XNXCD[PK0QWNDX];
        if (PK0QW01.PK0QWN4 != -1)
          PK0QW01.PK0QWN4 = PK0QW01.PK0QWN4 * 100;
        end
        PK0Q136(); /* numeric to alpha convert*/
        PK0QM010.PK0QMXNX[PK0QWNX2] = PK0QW01.PK0QWALP;
        PK0QM010.XARCD[PK0QWNX2] = PK0QW01.XARCD[PK0QWNDX];
        PK0QM010.SL5LOCTN[PK0QWNX2] = PK0QW01.SL5LOCTN[PK0QWNDX];
        PK0QM010.SL4ZONE[PK0QWNX2] = PK0QW01.SL4ZONE[PK0QWNDX];
        set PK0QM010.PK0QMACT[PK0QWNX2] cursor, bold;
        PK0QW01.PK0QWFLD = "Y"; /* action field had errors*/
        converseLib.validationFailed(43);
      end
    end
  end





   /* ----- if the action field is 'c '*/
   /* ----- and key fields have change*/
   /* -----     it is an error.*/
  if (PK0QM010.PK0QMACT[PK0QWNX2] == "C")
    if (PK0QW01.KUCCOID[PK0QWNDX] != PK0QM010.KUCCOID[PK0QWNX2]
     && PK0QW01.KUCCOID[PK0QWNDX] != PK0QW01.PK0QW-KUCCOID-WORK)
      PK0QM010.XBCCD[PK0QWNX2] = PK0QW01.XBCCD[PK0QWNDX];
      PK0QM010.KUCCOID[PK0QWNX2] = PK0QW01.KUCCOID[PK0QWNDX];
      PK0QW01.PK0QWN4 = PK0QW01.KUMSTRID[PK0QWNDX];
      PK0Q136(); /* numeric to alpha convert*/
      PK0QM010.PK0QMSTR[PK0QWNX2] = PK0QW01.PK0QWALP;
      PK0QW01.PK0QWN4 = PK0QW01.XNXCD[PK0QWNDX];
      if (PK0QW01.PK0QWN4 != -1)
        PK0QW01.PK0QWN4 = PK0QW01.PK0QWN4 * 100;
      end
      PK0Q136(); /* numeric to alpha convert*/
      PK0QM010.PK0QMXNX[PK0QWNX2] = PK0QW01.PK0QWALP;
      PK0QM010.XARCD[PK0QWNX2] = PK0QW01.XARCD[PK0QWNDX];
      PK0QM010.SL5LOCTN[PK0QWNX2] = PK0QW01.SL5LOCTN[PK0QWNDX];
      PK0QM010.SL4ZONE[PK0QWNX2] = PK0QW01.SL4ZONE[PK0QWNDX];
      set PK0QM010.PK0QMACT[PK0QWNX2] cursor, bold;
      PK0QW01.PK0QWFLD = "Y"; /* action field had errors*/
      converseLib.validationFailed(236); /* change only valid for area/zone/row*/
    else
    /* ----- if the action field is 'c '*/
    /* ----- and key fields have change*/
    /* -----     it is an error.*/
      if (PK0QW01.KUMSTRID[PK0QWNDX] != PK0QW01.PK0QWST
       || PK0QW01.XNXCD[PK0QWNDX] != PK0QW01.PK0QWXNX)
        PK0QM010.XBCCD[PK0QWNX2] = PK0QW01.XBCCD[PK0QWNDX];
        PK0QM010.KUCCOID[PK0QWNX2] = PK0QW01.KUCCOID[PK0QWNDX];
        PK0QW01.PK0QWN4 = PK0QW01.KUMSTRID[PK0QWNDX];
        PK0Q136(); /* numeric to alpha convert*/
        PK0QM010.PK0QMSTR[PK0QWNX2] = PK0QW01.PK0QWALP;
        PK0QW01.PK0QWN4 = PK0QW01.XNXCD[PK0QWNDX];
        if (PK0QW01.PK0QWN4 != -1)
          PK0QW01.PK0QWN4 = PK0QW01.PK0QWN4 * 100;
        end
        PK0Q136(); /* numeric to alpha convert*/
        PK0QM010.PK0QMXNX[PK0QWNX2] = PK0QW01.PK0QWALP;
        PK0QM010.XARCD[PK0QWNX2] = PK0QW01.XARCD[PK0QWNDX];
        PK0QM010.SL5LOCTN[PK0QWNX2] = PK0QW01.SL5LOCTN[PK0QWNDX];
        PK0QM010.SL4ZONE[PK0QWNX2] = PK0QW01.SL4ZONE[PK0QWNDX];
        set PK0QM010.PK0QMACT[PK0QWNX2] cursor, bold;
        PK0QW01.PK0QWFLD = "Y"; /* action field had errors*/
        converseLib.validationFailed(236); /* change only valid for area/zone/row*/
      end
    end
  end













   /* ----- if the action field is 'a' (add)*/
   /* -----     check for duplicates.*/
  if (PK0QM010.PK0QMACT[PK0QWNX2] == "A")
    PK0QW01.PK0QWNDX = 1;
    while (PK0QW01.PK0QWNDX <= PK0QW01.PK0QWTRR)
      PK0Q239();
    end
    PK0Q245(); /* edit brand code before add*/
  end




   /* ----- the program will need to know down stream if updates*/
   /* ----- were requested. (pk0qwfl7 - updates requested flag)*/
   /* ----- if updates were requested and selection for*/
   /* ----- customer inquiry was requested*/
   /* -----     it is an error.*/
  if (PK0QM010.PK0QMACT[PK0QWNX2] == "A"
   || PK0QM010.PK0QMACT[PK0QWNX2] == "D"
   || PK0QM010.PK0QMACT[PK0QWNX2] == "C")
    PK0QW01.PK0QWFL7 = "Y";
    if (PK0QW01.PK0QWFL5 == "Y") /* selected for customer inquiry*/
      converseLib.validationFailed(25);
      PK0QW01.PK0QWFLD = "Y"; /* action field had errors*/
      set PK0QM010.PK0QMACT[PK0QWNX2] cursor, bold;
    end
  end





   /* ----- reset fields*/
  if (PK0QW01.PK0QWFLB == "N")
    set PK0QM010.KUCCOID[PK0QWNX2] normal;
    set PK0QM010.PK0QMSTR[PK0QWNX2] normal;
    set PK0QM010.PK0QMXNX[PK0QWNX2] normal;
  end

  if (PK0QW01.PK0QWFLC == "N")
    set PK0QM010.SL5LOCTN[PK0QWNX2] normal;
    set PK0QM010.SL4ZONE[PK0QWNX2] normal;
    set PK0QM010.XARCD[PK0QWNX2] normal;
  end

  if (PK0QW01.PK0QWFLD == "N")
    set PK0QM010.PK0QMACT[PK0QWNX2] normal;
  end






  PK0QW01.PK0QWNX2 = PK0QW01.PK0QWNX2 - 1; /* decrement index*/

   /* -------------  end process pk0q237  --------------------*/
end // end PK0Q237

// load pkwrec for customer inq.
Function PK0Q238()

   /* ---------------  pk0q238   ---------------------------------*/
       /* load pkwrec for customer inquiry transfer*/


  PK0QM010.XXXERRID = "PK0Q238";




   /* -----      if we have reached the end of the map*/
   /* -----          get out*/
  if (PK0QW01.PK0QWNX2 > 28)
    PK0QW01.PK0QWFL6 = "Y";
    return;
  end






   /* ----- first, convert store id and xnxcd to numeric*/
  if (PK0QWNX2 == 1
   || PK0QM010.PK0QMACT[PK0QWNX2] == "S"
   || PK0QM010.PK0QMACT[PK0QWNX2] == "V")
    PK0QW01.PK0QWFLA = "N";
    PK0Q240();
    if (PK0QW01.PK0QWFLA == "N")
      PK3REC.KUMSTRID = PK0QW01.PK0QWST;
      PK3REC.XNXCD = PK0QW01.PK0QWXNX;
    else
      PK0QW01.PK0QWFL9 = "Y";
      converseLib.validationFailed(29);
      return;
    end
  end





   /* -----      load pkwrec with appropriate keys (first key*/
   /* -----      on the map and any subsequent keys with 's'*/
   /* -----      in the action field)*/
  if (PK0QWNX2 == 1)
    PKXREC.KUCCOID[PK0QWNX3] = PK0QM010.KUCCOID[PK0QWNX2];
    PKXREC.KUMSTRID[PK0QWNX3] = PK0QW01.PK0QWST;
    PKXREC.XNXCD[PK0QWNX3] = PK0QW01.PK0QWXNX;
    PKXREC.PKXKUACT[PK0QWNX3] = PK0QM010.PK0QMACT[PK0QWNX2];
  else
    if (PK0QM010.PK0QMACT[PK0QWNX2] == "S"
     || PK0QM010.PK0QMACT[PK0QWNX2] == "V")
      if (PK0QM010.KUCCOID[PK0QWNX2] != PKXREC.KUCCOID[PK0QWNX3]
       || PK0QW01.PK0QWST != PKXREC.KUMSTRID[PK0QWNX3]
       || PK0QW01.PK0QWXNX != PKXREC.XNXCD[PK0QWNX3])
        PK0QWNX3 = PK0QWNX3 + 1;
        if (PK0QM010.XBCCD[PK0QWNX2] == "08") /* if cole-haan cust*/
          PKXREC.KUCCOID[PK0QWNX3] = PK0QM010.KUCCOID[PK0QWNX2] + 8000000; /* convert it*/
        else
          PKXREC.KUCCOID[PK0QWNX3] = PK0QM010.KUCCOID[PK0QWNX2];
        end
        PKXREC.KUMSTRID[PK0QWNX3] = PK0QW01.PK0QWST;
        PKXREC.XNXCD[PK0QWNX3] = PK0QW01.PK0QWXNX;
        PKXREC.PKXKUACT[PK0QWNX3] = PK0QM010.PK0QMACT[PK0QWNX2];
      end
    end
  end





  PK0QW01.PK0QWNX2 = PK0QW01.PK0QWNX2 + 1; /* increment index*/

   /* -------------  end process pk0q238  --------------------*/
end // end PK0Q238

// check for duplicates on add
Function PK0Q239()

   /* ---------------  pk0q239   ---------------------------------*/
   /* ----- check for duplicates on add*/




   /* ----- if wildcards were used (-1, -1, and 'al')*/
   /* -----     only one row per company is allowed.*/
   /* ----- if wildcards were not used*/
   /* -----     only one row per company, store,*/
   /* -----     department and gpc is allowed.*/
  if (PK0QW01.PK0QWST == -1
   || PK0QW01.PK0QWXNX == -1)
    if (PK0QW01.KUCCOID[PK0QWNDX] == PK0QM010.KUCCOID[PK0QWNX2])
      set PK0QM010.KUCCOID[PK0QWNX2] cursor, bold;
      PK0QW01.PK0QWFLB = "Y"; /* customer had errors flag*/
      converseLib.validationFailed(44);
      PK0QW01.PK0QWNDX = PK0QW01.PK0QWTRR + 1; /* set index over max.*/
    end
  else
    if (PK0QW01.KUMSTRID[PK0QWNDX] == -1
     || PK0QW01.XNXCD[PK0QWNDX] == -1)
      if (PK0QW01.KUCCOID[PK0QWNDX] == PK0QM010.KUCCOID[PK0QWNX2])
        set PK0QM010.KUCCOID[PK0QWNX2] cursor, bold;
        PK0QW01.PK0QWFLB = "Y"; /* customer had errors flag*/
        converseLib.validationFailed(44);
        PK0QW01.PK0QWNDX = PK0QW01.PK0QWTRR + 1; /* set index over max.*/
      end
    else
      if (PK0QW01.KUCCOID[PK0QWNDX] == PK0QM010.KUCCOID[PK0QWNX2]
       && PK0QW01.KUMSTRID[PK0QWNDX] == PK0QW01.PK0QWST
       && PK0QW01.XNXCD[PK0QWNDX] == PK0QW01.PK0QWXNX)
        set PK0QM010.KUCCOID[PK0QWNX2] cursor, bold;
        set PK0QM010.PK0QMSTR[PK0QWNX2] bold;
        set PK0QM010.PK0QMXNX[PK0QWNX2] bold;
        PK0QW01.PK0QWFLB = "Y"; /* customer had errors flag*/
        converseLib.validationFailed(44);
        PK0QW01.PK0QWNDX = PK0QW01.PK0QWTRR + 1; /* set index over max.*/
      end
    end
  end





   /* ----- also check to for duplicates*/
   /* ----- on other elements of the map*/
  if (PK0QW01.PK0QWNDX <= 28
   && PK0QW01.PK0QWNDX != PK0QW01.PK0QWNX2)
    if (PK0QM010.KUCCOID[PK0QWNDX] == PK0QM010.KUCCOID[PK0QWNX2]
     && PK0QM010.PK0QMSTR[PK0QWNDX] == PK0QM010.PK0QMSTR[PK0QWNX2]
     && PK0QM010.PK0QMXNX[PK0QWNDX] == PK0QM010.PK0QMXNX[PK0QWNX2])
      set PK0QM010.KUCCOID[PK0QWNX2] cursor, bold;
      set PK0QM010.PK0QMSTR[PK0QWNX2] bold;
      set PK0QM010.PK0QMXNX[PK0QWNX2] bold;
      PK0QW01.PK0QWFLB = "Y"; /* customer had errors flag*/
      converseLib.validationFailed(44);
      PK0QW01.PK0QWNDX = PK0QW01.PK0QWTRR + 1; /* set index over max.*/
    end
  end







  PK0QW01.PK0QWNDX = PK0QW01.PK0QWNDX + 1; /* increment index*/

   /* -------------  end process pk0q239  --------------------*/
end // end PK0Q239

// convert customer to numeric
Function PK0Q240()
   /* ---------------  pk0q240    --------------------------------*/
   /* ---------------  convert customer from  alpha to numeric*/




   /* ----- if store id modified*/
   /* ----- and equal to 'all'*/
   /* -----     force 'al' into department*/
   /* -----         force '-1' into enternal store id*/
   /* -----         force '-1' into enternal dept*/
   /* ----  else*/
   /* -----     if deptartment is modified*/
   /* -----     and equal to 'al'*/
   /* -----         force '-1' into enternal dept*/
  if (PK0QM010.PK0QMSTR[PK0QWNX2] == "ALL")
    PK0QM010.PK0QMXNX[PK0QWNX2] = "AL";
    PK0QW01.PK0QWST = -1;
    PK0QW01.PK0QWXNX = -1;
    return;
  end

  if (PK0QM010.PK0QMXNX[PK0QWNX2] == "AL")
    PK0QW01.PK0QWXNX = -1;
    PK0QW01.PK0QWALP = PK0QM010.PK0QMSTR[PK0QWNX2];
    if (PK0QM010.PK0QMSTR[PK0QWNX2] is modified
     && PK0QW01.PK0QWDIG[1] == " ")
      set PK0QM010.PK0QMSTR[PK0QWNX2] cursor, modified, bold;
      PK0QW01.PK0QWFLB = "Y";
      converseLib.validationFailed(34);
    else
      if (PK0QM010.PK0QMSTR[PK0QWNX2] not modified
       && PK0QW01.PK0QWDIG[1] == " ")
        PK0QW01.PK0QWNDX = PK0QW01.PK0QWNX2 + PK0QWBAS - 1;
        PK0QW01.PK0QWST = PK0QW01.KUMSTRID[PK0QWNDX];
      else
        PK0Q241(); /* alpha to numeric convert*/
        if (PK0QW01.PK0QWFLA == "N")
          PK0QW01.PK0QWST = PK0QW01.PK0QWN4;
        else
          set PK0QM010.PK0QMSTR[PK0QWNX2] cursor, modified, bold;
          PK0QW01.PK0QWFLB = "Y";
          converseLib.validationFailed(34);
        end
      end
    end
    return;
  end





   /* ----- if deptartment is modified*/
   /* -----     convert it to numeric*/
  PK0QW01.PK0QWALP = PK0QM010.PK0QMXNX[PK0QWNX2];
  if (PK0QM010.PK0QMXNX[PK0QWNX2] is modified
   && PK0QW01.PK0QWDIG[1] == " ")
    set PK0QM010.PK0QMXNX[PK0QWNX2] cursor, modified, bold;
    PK0QW01.PK0QWFLA = "Y";
    PK0QW01.PK0QWFLB = "Y";
    converseLib.validationFailed(34);
  else
    if (PK0QM010.PK0QMXNX[PK0QWNX2] not modified
     && PK0QW01.PK0QWDIG[1] == " ")
      PK0QW01.PK0QWNDX = PK0QW01.PK0QWNX2 + PK0QWBAS - 1;
      PK0QW01.PK0QWXNX = PK0QW01.XNXCD[PK0QWNDX];
    else
      PK0Q241(); /* alpha to numeric convert*/
      if (PK0QW01.PK0QWFLA == "N")
        PK0QW01.PK0QWXNX = PK0QW01.PK0QWN4;
      else
        set PK0QM010.PK0QMXNX[PK0QWNX2] cursor, modified, bold;
        PK0QW01.PK0QWFLB = "Y";
        converseLib.validationFailed(34);
      end
    end
  end


   /* ----- if store id modified*/
   /* -----     convert it to numeric store id*/
  PK0QW01.PK0QWALP = PK0QM010.PK0QMSTR[PK0QWNX2];
  if (PK0QM010.PK0QMSTR[PK0QWNX2] is modified
   && PK0QW01.PK0QWDIG[1] == " ")
    set PK0QM010.PK0QMSTR[PK0QWNX2] cursor, modified, bold;
    PK0QW01.PK0QWFLB = "Y";
    converseLib.validationFailed(34);
  else
    if (PK0QM010.PK0QMSTR[PK0QWNX2] not modified
     && PK0QW01.PK0QWDIG[1] == " ")
      PK0QW01.PK0QWNDX = PK0QW01.PK0QWNX2 + PK0QWBAS - 1;
      PK0QW01.PK0QWST = PK0QW01.KUMSTRID[PK0QWNDX];
    else
      PK0Q241(); /* alpha to numeric convert*/
      if (PK0QW01.PK0QWFLA == "N")
        PK0QW01.PK0QWST = PK0QW01.PK0QWN4;
      else
        set PK0QM010.PK0QMSTR[PK0QWNX2] cursor, modified, bold;
        PK0QW01.PK0QWFLB = "Y";
        converseLib.validationFailed(34);
      end
    end
  end




   /* ------------------- end pk0q240 -------------------------*/
end // end PK0Q240

// convert alpha to numeric
Function PK0Q241()
   /* ---------------  pk0q241    --------------------------------*/
   /* ---------------  convert alpha to numeric*/





  PK0QW01.PK0QWNX4 = 1;
  while (PK0QW01.PK0QWNX4 <= 4
   && PK0QW01.PK0QWFLA == "N")
    PK0Q242();
  end




  if (PK0QW01.PK0QWFLA == "Y")
    return;
  end






  if (PK0QW01.PK0QWALP == "    ")
    PK0QW01.PK0QWN4 = 0;
  else

    if (PK0QW01.PK0QWDIG[1] != " "
     && PK0QW01.PK0QWDIG[2] == " "
     && PK0QW01.PK0QWDIG[3] == " "
     && PK0QW01.PK0QWDIG[4] == " ")
      PK0QW01.PK0QWNU1 = PK0QW01.PK0QWALP;
      PK0QW01.PK0QWN4 = PK0QW01.PK0QWN1;
    else

      if (PK0QW01.PK0QWDIG[1] != " "
       && PK0QW01.PK0QWDIG[2] != " "
       && PK0QW01.PK0QWDIG[3] == " "
       && PK0QW01.PK0QWDIG[4] == " ")
        PK0QW01.PK0QWNU2 = PK0QW01.PK0QWALP;
        PK0QW01.PK0QWN4 = PK0QW01.PK0QWN2;
      else
        if (PK0QW01.PK0QWDIG[1] != " "
         && PK0QW01.PK0QWDIG[2] != " "
         && PK0QW01.PK0QWDIG[3] != " "
         && PK0QW01.PK0QWDIG[4] == " ")
          PK0QW01.PK0QWNU3 = PK0QW01.PK0QWALP;
          PK0QW01.PK0QWN4 = PK0QW01.PK0QWN3;
        else

          if (PK0QW01.PK0QWDIG[4] != " "
           && PK0QW01.PK0QWDIG[1] != " "
           && PK0QW01.PK0QWDIG[2] != " "
           && PK0QW01.PK0QWDIG[3] != " ")
            PK0QW01.PK0QWNU4 = PK0QW01.PK0QWALP;
          else
            PK0QW01.PK0QWFLA = "Y";
          end
        end
      end
    end
  end




   /* ------------------- end pk0q241 -------------------------*/
end // end PK0Q241

// check numerics
Function PK0Q242()
   /* ---------------  pk0q242    --------------------------------*/
   /* ---------------  check numerics*/




  if (PK0QW01.PK0QWDIG[PK0QWNX4] != " ")
    if (PK0QW01.PK0QWDIG[PK0QWNX4] < "0"
     || PK0QW01.PK0QWDIG[PK0QWNX4] > "9")
      PK0QW01.PK0QWFLA = "Y";
      return;
    end
  end




  PK0QW01.PK0QWNX4 = PK0QW01.PK0QWNX4 + 1;




   /* ------------------- end pk0q242 -------------------------*/
end // end PK0Q242

// check for duplicates on add
Function PK0Q245()
  /* ---------------  pk0q245  -------------------------------------*/
  /* ---------------------------------------------------------------*/
   /* ----- edit brand code before add*/


  if (PK0QM010.XBCCD[PK0QWNX2] == "08") /* brand is Cole-Haan*/

    if (PK0QM010.KUCCOID[PK0QWNX2] < 100000)
      /* NEXT SENTENCE*/
    else

      if (PK0QM010.KUCCOID[PK0QWNX2] > 7999999
       && PK0QM010.KUCCOID[PK0QWNX2] < 8100000) /* it's already cole-haan*/
        PK0QM010.KUCCOID[PK0QWNX2] = PK0QM010.KUCCOID[PK0QWNX2] - 8000000; /* don't need '80' on screen*/
      else
        set PK0QM010.KUCCOID[PK0QWNX2] cursor, bold;
        PK0QW01.PK0QWFLB = "Y"; /* customer had errors flag*/
        converseLib.validationFailed(427); /* customer nbr invalid for c-h*/
        return;
      end
    end

  else /* not brand 08 (Cole-Haan)*/

    if (PK0QM010.KUCCOID[PK0QWNX2] > 7999999
     && PK0QM010.KUCCOID[PK0QWNX2] < 8100000) /* cole-haan number*/
      PK0QM010.XBCCD[PK0QWNX2] = "08"; /* convert to cole-haan*/
      PK0QM010.KUCCOID[PK0QWNX2] = PK0QM010.KUCCOID[PK0QWNX2] - 8000000; /* don't need '80' on screen*/
      PK0QM010.VAGen_EZEMSG = 423; /* brand code on screen override*/
    else

      if (PK0QM010.XBCCD[PK0QWNX2] == "  ") /* brand is not entered*/
        PK0QM010.XBCCD[PK0QWNX2] = "01"; /* make it Nike*/
      end
    end
  end

  if (PK0QM010.XBCCD[PK0QWNX2] in XBCTBL.XBCCD) /* verify brand code*/
  else
    set PK0QM010.XBCCD[PK0QWNX2] cursor, bold;
    PK0QW01.PK0QWFLB = "Y"; /* customer had errors flag*/
    converseLib.validationFailed(413); /* brand invalid*/
  end


   /* -------------  end process pk0q245  --------------------*/
end // end PK0Q245

// varify area, zone & location
Function PK0Q246()
   /* ---------------  pk0q246    --------------------------------*/
   /* -----  varify area, zone & location*/


  set SL5REC empty;
  SL5REC.XWHCD = PK0QM010.XWHCD;
  SL5REC.SL5LOCTN = PK0QM010.SL5LOCTN[PK0QWNX2];
  SL5REC.SL4ZONE = PK0QM010.SL4ZONE[PK0QWNX2];
  SL5REC.XARCD = PK0QM010.XARCD[PK0QWNX2];


  call "IO1490" ("SA", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes}; /* select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == -811)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* in use*/
      set PK0QM010.XARCD[PK0QWNX2] cursor, modified, bold;
      set PK0QM010.SL4ZONE[PK0QWNX2] modified, bold;
      set PK0QM010.SL5LOCTN[PK0QWNX2] modified, bold;
      PK0QW01.PK0QWFLC = "Y"; /* location error flag*/
      return;

    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(237); /* invalid area/zone/row*/
        set PK0QM010.XARCD[PK0QWNX2] cursor, modified, bold;
        set PK0QM010.SL4ZONE[PK0QWNX2] modified, bold;
        set PK0QM010.SL5LOCTN[PK0QWNX2] modified, bold;
        PK0QW01.PK0QWFLC = "Y"; /* location error flag*/
        return;

      else
        converseLib.validationFailed(29); /* fatal error*/
        set PK0QM010.XARCD[PK0QWNX2] cursor, modified, bold;
        set PK0QM010.SL4ZONE[PK0QWNX2] modified, bold;
        set PK0QM010.SL5LOCTN[PK0QWNX2] modified, bold;
        PK0QW01.PK0QWFLC = "Y"; /* location error flag*/
        return;
      end
    end
  end


   /* -----EVEN IF AREA/ZONE/LOC IS IN STOCK LOCATION TABLE,*/
   /* -----SL5REC.YLTCD MUST = '15' OR '17' TO BE VALID.*/

  if (SL5REC.YLTCD == "15"
   || SL5REC.YLTCD == "17")
     /* NEXT SENTENCE*/
  else
    converseLib.validationFailed(51); /* LOCATION IS MISSING OR INVALID*/
    set PK0QM010.XARCD[PK0QWNX2] cursor, modified, bold;
    set PK0QM010.SL4ZONE[PK0QWNX2] modified, bold;
    set PK0QM010.SL5LOCTN[PK0QWNX2] modified, bold;
    PK0QW01.PK0QWFLC = "Y"; /* location error flag*/
    return;
  end

   /* ------------------- end pk0q246 -------------------------*/
end // end PK0Q246

// varify customer
Function PK0Q248()
   /* ---------------  pk0q248    --------------------------------*/
   /* -----     varify that customer (company and store) exists.*/


  set PK6REC empty;
  if (PK0QM010.XBCCD[PK0QWNX2] == "08") /* brand is cole-haan*/
    PK6REC.KUCCOID = PK0QM010.KUCCOID[PK0QWNX2] + 8000000;
  else /* make nbr cole-haan*/
    PK6REC.KUCCOID = PK0QM010.KUCCOID[PK0QWNX2];
  end
  PK6REC.KUMSTRID = PK0QW01.PK0QWST;


  if (PK0QW01.PK0QWST == -1)
    call "IO1830" ("S1", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes}; /* select set on company*/
    call "IO1830" ("N1", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes}; /* select set on company*/
  else
    if (PK0QW01.PK0QWST != -1)
      call "IO1830" ("S ", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes}; /* select unique row*/
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == -811)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* in use*/
      PK0QW01.PK0QWFLB = "Y";
      set PK0QM010.KUCCOID[PK0QWNX2] cursor, modified, bold;
      set PK0QM010.PK0QMSTR[PK0QWNX2] modified, bold;
      return;

    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(34); /* not found*/
        PK0QW01.PK0QWFLB = "Y";
        set PK0QM010.KUCCOID[PK0QWNX2] cursor, modified, bold;
        set PK0QM010.PK0QMSTR[PK0QWNX2] modified, bold;
        return;

      else
        converseLib.validationFailed(29); /* fatal error*/
        set PK0QM010.KUCCOID[PK0QWNX2] cursor, modified, bold;
        set PK0QM010.PK0QMSTR[PK0QWNX2] modified, bold;
        PK0QW01.PK0QWFLB = "Y";
        return;
      end
    end
  end





  if (PK0QW01.PK0QWST == -1)
    call "IO1830" ("C1", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes}; /* select set on company*/
  end

   /* ------------------- end pk0q248 -------------------------*/
end // end PK0Q248

// change warehouses
Function PK0Q250()

   /* ---------------  pk0q250 change warehouses -----------------*/
   /* ---------------          or re-initialize  -----------------*/



  set PKWREC empty; /* initially the work record*/
  PKWREC.XWHCD = PK0QM010.XWHCD; /* move wearehouse into pkwrec*/
  set PK0QM010 initial; /* initially clear the map*/
  PK0QM010.XWHCD = PKWREC.XWHCD; /* move wearehouse into pkwrec*/
  set PK3REC empty; /* initially clear cust. forced loc*/
  PK0QW01.PK0QWCUS = PK0QW04.PK0QW4GP;
  PK0QM010.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  PK0QM010.XXXRVNBR = 11; /* revision number*/
  PK0QW01.PK0QWBAS = 1;
  PK0QW01.PK0QWEND = 28;






  PK0Q110(); /* get warehouse abbreviation*/

   /* if warehouse lookup was not successful, exit*/
  if (PK0QW01.PK0QWFL3 == "N")
    return;
  end




       /* re-load the customer forced location table*/
       /* into the map and working storage*/
  PK0QW01.PK0QWBAS = 1;
  PK0QW01.PK0QWEND = 28;
  PK0Q120();




   /* -------------  end process pk0q250  --------------------*/
end // end PK0Q250

// update cust forced zone tbl
Function PK0Q300()
   /* ---------------  pk0q300    --------------------------------*/
   /* ---------------  update customer forced location tbl  ------*/



  PK0QM010.XXXERRID = "PK0Q300";
  set PK3REC empty;

  if (PK0QM010.PK0QMACT[PK0QWNX2] == "D"
   || PK0QM010.PK0QMACT[PK0QWNX2] == "C"
   || PK0QM010.PK0QMACT[PK0QWNX2] == "A")
    PK0QW01.PK0QWFLA = "N";
    PK0Q240();
    if (PK0QW01.PK0QWFLA == "N")
      PK3REC.KUMSTRID = PK0QW01.PK0QWST;
      PK3REC.XNXCD = PK0QW01.PK0QWXNX;
    else
      PK0QW01.PK0QWFL9 = "Y";
      converseLib.validationFailed(29); /* this should never happen*/
      return;
    end
  end









  if (PK0QM010.PK0QMACT[PK0QWNX2] == "D")
    PK0Q320(); /* delete customer forced location rec*/
  else
    if (PK0QM010.PK0QMACT[PK0QWNX2] == "A"
     || PK0QM010.PK0QMACT[PK0QWNX2] == "C")
      PK0Q340(); /* change customer forced location rec*/
    end
  end





  PK0QW01.PK0QWNX2 = PK0QW01.PK0QWNX2 + 1; /* increment index*/


   /* ------------------- end pk0q300 -------------------------*/
end // end PK0Q300

// delete cust. forced loc. row
Function PK0Q320()
   /* ---------------  pk0q320    --------------------------------*/
   /* ---------------  delete customer forced location record ----*/







  PK3REC.XWHCD = PK0QM010.XWHCD; /* map field warehouse*/
  PK3REC.XBCCD = PKWREC.XBCCD; /* common picking area brand code*/
  PK3REC.KUCCOID = PK0QM010.KUCCOID[PK0QWNX2];

  if (PK0QM010.XBCCD[PK0QWNX2] == "08") /* brand is cole-haan*/
   /* make it a c-h nbr*/
    PK3REC.KUCCOID = PK0QM010.KUCCOID[PK0QWNX2] + 8000000;
  else
    PK3REC.KUCCOID = PK0QM010.KUCCOID[PK0QWNX2];
  end

  PK3REC.XGPCD = "00";




  call "IO1430" ("D ", SQLCA, PK3REC) {isNoRefresh = yes, isExternal = yes}; /* delete unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(32); /* table update successful*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(21); /* contention for data base resorce*/
      PK0QW01.PK0QWFL9 = "Y";
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* no records found,*/
        PK0QW01.PK0QWFL9 = "Y";
        return;
      else
        converseLib.validationFailed(22); /* fatal error*/
        PK0QW01.PK0QWFL9 = "Y";
        return;
      end
    end
  end





   /* ------------------- end pk0q320 -------------------------*/
end // end PK0Q320

// add/change cust. forced loc.
Function PK0Q340()
   /* ---------------  pk0q340    --------------------------------*/
   /* ---------------  add or change customer*/
   /* ---------------  forced location row*/





   /*  */
   /* ------------------ y2k out begin ------------*/
   /*  */
   /* MOVE 19 TO PK0QW01.PK0QWFCT;*/
   /* MOVE EZEDTE TO PK0QW01.PK0QWFDA;*/
   /*  */
   /* ------------------ y2k out end ------------*/
   /*  */
   /*  */
   /* ------------------ y2k in begin ------------*/
   /*  */
  PK0QW01.PK0QWFDT = VGVar.currentGregorianDate;
   /*  */
   /* ------------------ y2k in end ------------*/
   /*  */
  PK3REC.ZZZCHGDT = PK0QW01.PK0QWFDT; /* change date*/
  PK0QW01.PK0QWTIM = VGVar.currentFormattedTime;
  PK0QW01.PK0QWTHH = PK0QW01.PK0QWHH;
  PK0QW01.PK0QWTMM = PK0QW01.PK0QWMI;
  PK3REC.ZZZCHGTM = PK0QW01.PK0QWTI; /* change time*/




  PK3REC.XWHCD = PK0QM010.XWHCD; /* map field warehouse code*/

  if (PK0QM010.XBCCD[PK0QWNX2] > " ") /* if brand code on screen*/
    PK3REC.XBCCD = PK0QM010.XBCCD[PK0QWNX2]; /* use it*/
  else /* otherwise use*/
    PK3REC.XBCCD = PKWREC.XBCCD; /* picking common area brand code*/
  end

  if (PK0QM010.XBCCD[PK0QWNX2] == "08") /* brand is cole-haan*/
   /* make it a c-h nbr*/
    PK3REC.KUCCOID = PK0QM010.KUCCOID[PK0QWNX2] + 8000000;
  else
    PK3REC.KUCCOID = PK0QM010.KUCCOID[PK0QWNX2];
  end

  PK3REC.XARCD = PK0QM010.XARCD[PK0QWNX2];
  PK3REC.SL5LOCTN = PK0QM010.SL5LOCTN[PK0QWNX2];
  PK3REC.SL4ZONE = PK0QM010.SL4ZONE[PK0QWNX2];
  PK3REC.XGPCD = "00";
  if (PK0QM010.PK0QMACT[PK0QWNX2] == "C")
    PK0QW01.PK0QWNDX = PK0QW01.PK0QWNX2 + PK0QWBAS - 1;
    PK3REC.ZZZCHGCT = PK0QW01.ZZZCHGCT[PK0QWNDX];
  end





  if (PK0QM010.PK0QMACT[PK0QWNX2] == "A")
    call "IO1430" ("A ", SQLCA, PK3REC) {isNoRefresh = yes, isExternal = yes}; /* add unique row*/
    if (SQLCA.VAGen_SQLCODE == 0)
         /* CALL EZECOMIT;*/
      converseLib.validationFailed(32); /* table update successful*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(21); /* contention for data base resorce*/
        PK0QW01.PK0QWFL9 = "Y";
        return;
      else
        converseLib.validationFailed(22); /* fatal error*/
        PK0QW01.PK0QWFL9 = "Y";
        return;
      end
    end
  end








  if (PK0QM010.PK0QMACT[PK0QWNX2] == "C")
    call "IO1430" ("U ", SQLCA, PK3REC) {isNoRefresh = yes, isExternal = yes}; /* add unique row*/
    if (SQLCA.VAGen_SQLCODE == 0)
         /* CALL EZECOMIT;*/
      converseLib.validationFailed(32); /* table update successful*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(21); /* contention for data base resorce*/
        PK0QW01.PK0QWFL9 = "Y";
        return;
      else
        converseLib.validationFailed(22); /* fatal error*/
        PK0QW01.PK0QWFL9 = "Y";
        return;
      end
    end
  end




   /* ------------------- end pk0q340 -------------------------*/
end // end PK0Q340

// clear map
Function PK0Q400()
   /* ---------------  pk0q400    --------------------------------*/
   /* ---------------  clear map*/




  PK0QM010.XBCCD[PK0QWNX2] = " ";
  set PK0QM010.XBCCD normal;
  PK0QM010.KUCCOID[PK0QWNX2] = 0;
  PK0QM010.PK0QMSTR[PK0QWNX2] = " ";
  PK0QM010.PK0QMXNX[PK0QWNX2] = " ";
  PK0QM010.XARCD[PK0QWNX2] = " ";
  PK0QM010.PK0QMACT[PK0QWNX2] = " ";
  PK0QM010.SL5LOCTN[PK0QWNX2] = " ";
  PK0QM010.SL4ZONE[PK0QWNX2] = " ";

  PK0QW01.PK0QWNX2 = PK0QW01.PK0QWNX2 + 1;

   /* ------------------- end pk0q400 -------------------------*/
end // end PK0Q400

Record PK0QW01 type basicRecord
  3 PK0QWGRP PK0QWGRP ; 
    5 PK0QWFL1 PK0QWFL1 ; 
    5 PK0QWFL2 PK0QWFL2 ; 
    5 PK0QWFL3 PK0QWFL3 ; 
    5 PK0QWFL4 PK0QWFL4 ; 
    5 PK0QWFL5 PK0QWFL5 ; 
    5 PK0QWFL6 PK0QWFL6 ; 
    5 PK0QWFL7 PK0QWFL7 ; 
    5 PK0QWFL8 PK0QWFL8 ; 
    5 PK0QWFL9 PK0QWFL9 ; 
    5 PK0QWFLA PK0QWFLA ; 
    5 PK0QWFLB PK0QWFLB ; 
    5 PK0QWFLC PK0QWFLC ; 
    5 PK0QWFLD PK0QWFLD ; 
    5 PK0QWFRM PK0QWFRM ; 
    5 PK0QWTRR PK0QWTRR ; 
    5 PK0QWNDX PK0QWNDX ; 
    5 PK0QWNX2 PK0QWNX2 ; 
    5 PK0QWNX3 PK0QWNX3 ; 
    5 PK0QWNX4 PK0QWNX4 ; 
    5 PK0QWBAS PK0QWBAS ; 
    5 PK0QWEND PK0QWEND ; 
    5 PK0QWDT PK0QWDT ; 
      10 PK0QWMM PK0QWMM ; 
      10 PK0QWDD PK0QWDD ; 
      10 PK0QWYY PK0QWYY ; 
    5 PK0QWFDT PK0QWFDT ; 
      10 PK0QWFCT PK0QWFCT ; 
      10 PK0QWFDA PK0QWFDA ; 
        15 PK0QWFYY PK0QWFYY ; 
        15 PK0QWFMM PK0QWFMM ; 
        15 PK0QWFDD PK0QWFDD ; 
    5 PK0QWTIM PK0QWTIM ; 
      10 PK0QWHH PK0QWHH ; 
      10 * char(1) ; 
      10 PK0QWMI PK0QWMI ; 
      10 * char(1) ; 
      10 PK0QWSS PK0QWSS ; 
    5 PK0QWTI PK0QWTI ; 
      10 PK0QWTHH PK0QWTHH ; 
      10 PK0QWTMM PK0QWTMM ; 
    5 PK0QWALP PK0QWALP ; 
      10 PK0QWDIG PK0QWDIG [4] ; 
    5 PK0QWNU1 PK0QWNU1 ; 
      10 PK0QWN1 PK0QWN1 ; 
    5 PK0QWNU2 PK0QWNU2 ; 
      10 PK0QWN2 PK0QWN2 ; 
    5 PK0QWNU3 PK0QWNU3 ; 
      10 PK0QWN3 PK0QWN3 ; 
    5 PK0QWNU4 PK0QWNU4 ; 
      10 PK0QWN4 PK0QWN4 ; 
    5 PK0QWST PK0QWST ; 
    5 PK0QWXNX PK0QWXNX ; 
    5 PK0QWCUS PK0QWCUS ; 
      10 PK0QWACT PK0QWACT [528] ; 
      10 XBCCD XBCCD [528] ; 
      10 KUCCOID KUCCOID [528] ; 
      10 KUMSTRID KUMSTRID [528] ; 
      10 XNXCD XNXCD [528] ; 
      10 XARCD XARCD [528] ; 
      10 SL4ZONE SL4ZONE [528] ; 
      10 SL5LOCTN SL5LOCTN [528] ; 
      10 ZZZCHGCT ZZZCHGCT [528] ; 
    5 PK0QW-KUCCOID-WORK PK0QW-KUCCOID-WORK ; 
end // end PK0QW01

//*** RECORD=PK0QW04 ****
// ; ----   pk0qw04
// ; ----   used to initialize array in pk0qw01 record
// ***********************
Record PK0QW04 type basicRecord
  3 PK0QW4GP PK0QW4GP ; 
    10 PK0QWACT PK0QWACT [528] ; 
    10 XBCCD XBCCD [528] ; 
    10 KUCCOID KUCCOID [528] ; 
    10 KUMSTRID KUMSTRID [528] ; 
    10 XNXCD XNXCD [528] ; 
    10 XARCD XARCD [528] ; 
    10 SL4ZONE SL4ZONE [528] ; 
    10 SL5LOCTN SL5LOCTN [528] ; 
    10 ZZZCHGCT ZZZCHGCT [528] ; 
end // end PK0QW04

//*** RECORD=PK3REC ****
// ;---------------------------------------------------------
// ;---- Customer forced location table record --------------
// ;---- csp record name is pk3rec             --------------
// ;---- data base name is dpick.vculoc01      --------------
// ;---- the IO-module is IO1430               --------------
// ;----                                       --------------
// ;---- CREATED 5-14-87                       --------------
// ;---- AUTHOR: Paul Mainwaring               --------------
// ;---------------------------------------------------------
// ; date     userid   description
// ;**********************************************************
// ;06/18/92  shende   Add xbccd for table changes
// ;
// ;
// ;**********************************************************
// **********************
Record PK3REC type basicRecord
  5 PK3GRPLV PK3GRPLV ; 
    10 XWHCD XWHCD ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 XGPCD XGPCD ; 
    10 XBCCD XBCCD ; 
    10 XARCD XARCD ; 
    10 SL4ZONE SL4ZONE ; 
    10 SL5LOCTN SL5LOCTN ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PK3REC

// CU_CO_ID work area
DataItem PK0QW-KUCCOID-WORK int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

DataItem PK0QW4GP char(12144)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer action field
DataItem PK0QWACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// alpha convert field
DataItem PK0QWALP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// base index (used for paging)
DataItem PK0QWBAS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Customer data
DataItem PK0QWCUS char(12144)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem PK0QWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual digits
DataItem PK0QWDIG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group date
DataItem PK0QWDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end index (used for paging)
DataItem PK0QWEND smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem PK0QWFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group yymmdd
DataItem PK0QWFDA num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PK0QWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group yyyymmdd
DataItem PK0QWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of vculoc01 tbl flag
DataItem PK0QWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// all done conversing flag
DataItem PK0QWFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// whse lookup successful flag
DataItem PK0QWFL3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table overflow flag
DataItem PK0QWFL4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selected for customer inq.
DataItem PK0QWFL5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// done with 1 page of map flag
DataItem PK0QWFL6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// updates were requested
DataItem PK0QWFL7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time thru flag
DataItem PK0QWFL8 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update errors flag
DataItem PK0QWFL9 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// invalid numeric flag
DataItem PK0QWFLA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer had errors flag
DataItem PK0QWFLB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// location field error flag
DataItem PK0QWFLC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// action field error flag
DataItem PK0QWFLD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PK0QWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 1st 3 bytes of cafromap
DataItem PK0QWFRM char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PK0QWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0QWGRP char(12226)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hours
DataItem PK0QWHH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minutes
DataItem PK0QWMI char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PK0QWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0QWN1 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0QWN2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0QWN3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0QWN4 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// general index
DataItem PK0QWNDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 1 digit number
DataItem PK0QWNU1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2 digit number
DataItem PK0QWNU2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3 digit number
DataItem PK0QWNU3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 4 digit number
DataItem PK0QWNU4 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// second general index
DataItem PK0QWNX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// third general index
DataItem PK0QWNX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fourth general index
DataItem PK0QWNX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// seconds
DataItem PK0QWSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// converted store id
DataItem PK0QWST num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hours
DataItem PK0QWTHH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// time
DataItem PK0QWTI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group time
DataItem PK0QWTIM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minutes
DataItem PK0QWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total records read
DataItem PK0QWTRR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted xnxcd
DataItem PK0QWXNX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem PK0QWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cust forced location rec
DataItem PK3GRPLV char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

