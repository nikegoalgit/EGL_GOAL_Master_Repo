package pk05;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PK05 ****
// ------------------------------------------------------------
// ------------------------------------------------------------
// ------------------------------------------------------------
// ----- pk05  -  CARRIER CODE MAINTENANCE SCREEN.        -----
// -----          THIS APPLICATION GIVES THE USER THE     -----
// -----          ABILITY TO MODIFY THE CARRIER CODE      -----
// -----          ON THE PICK POOL HEADER.                -----
// -----                                                  -----
// -----          THE PROGRAM SUPPORTS SELECTING AN ORDER,-----
// -----          JUMPING TO ORDER INQUIRY AND RETURNING  -----
// -----          WITH THAT ORDER SHOWN AS BEING VIEWED.  -----
// -----          (shown with a 'v' in the action field)  -----
// -----                                                  -----
// ------------------------------------------------------------
// ------------------------------------------------------------
// ------------------------------------------------------------
// ----- MAINTENANCE LOG:                                 -----
// -----                                                  -----
// ----- NAME   DATE       DESCRIPTION                    -----
// ----- PRM    07/31/87   created                        -----
// ----- JSN    09/29/87   add multiple line logic        -----
// ----- JBW    11/30/88   ADDED NONCSP OPTION TO CALLS   -----
// ----- JBW    11/30/88   XSSEGTR LOGIC ADDED            -----
// ----- jbc    07/21/89   changed xfer from pk0i to pk09 -----
// -----                   added pwirec for io1720        -----
// ----- rhm    02/05/93   update DPICK.VPHDIT01 carrier  -----
// -----                   code when VPOOLH01 is updated  -----
// -----                   succesfully.  PK05500 series.  -----
// ----- CBRINE 08/11/95   CANADA Added XCTCD to PKWREC   -----
// ----- OVAZQU 03/21/97   Add default Carrier code to screen--
// ----- OVAZQU 04/29/97   One more little change related -----
// -----                   to previous change.            -----
// ----- MBURLE 01/30/98   Y2KFIX: No longer hard-code the-----
// -----                   century in proc, PK05400.      -----
// -----                                                  -----
// ------------------------------------------------------------
// ------------------------------------------------------------
// ------------------------------------------------------------
// *********************
Program PK05 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK05W01 PK05W01; // record
  PK4REC PK4REC; // record
  PK6REC PK6REC; // record
  PKWREC PKWREC; // record
  PKYREC PKYREC; // record
  PKZREC PKZREC; // record
  PWIREC PWIREC; // record
  PWNREC PWNREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TF1REC TF1REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use PK05M.PK05M010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PK05005: PK05005();
  end // end main
end // end PK05

// carrier code maintenance
Function PK05005()
   /* ---------------          main process  pk05005          ----*/
  ;
   /* ---------------  carrier code maintenance               ----*/
  ;
  ;
   /* IF COMMAREA.CASYSINT NE 'CSP';*/
    /* SET COMMAREA EMPTY;*/
    /* MOVE 'CSP' TO COMMAREA.CASYSINT;*/
    /* MOVE 'DEMO' TO COMMAREA.CAUSERID;*/
    /* MOVE 'PK05' TO COMMAREA.CACURRAP;*/
    /* MOVE 'MN0M' TO COMMAREA.CAFROMAP;*/
    /* MOVE '02' TO COMMAREA.XWHCD;*/
   /* END ;*/
  ;
  XSENTRY();
  ;
  XSSEGTR(); /* SET SEGMENTED TRANSACTION ID*/
  ;
  ;
  ;
  PK05100(); /* initialization*/
  ;
  ;
  ;
  PK05W01.PK05WFL0 = "N";
  while (PK05W01.PK05WFL0 == "N")
    PK05200(); /* converse map until done*/
  end
  ;
  ;
  ;
   /* -------------  end process pk05005  --------------------*/
end // end PK05005

// initialization routine
Function PK05100()
  ;
   /* ---------------  pk05100 initialization  -------------------*/
  ;
  ;
  ;
   /* ---- clear records and*/
   /* ---- set up map header information*/
  ;
  set PK05M010 initial; /* initially clear the map*/
  set SQLCA empty; /* initially clear working storage*/
  set TF1REC empty; /* initially clear working storage*/
  set TA1REC empty; /* initially clear working storage*/
  set PK4REC empty; /* initially clear working storage*/
  set PK6REC empty; /* initially clear working storage*/
  set PKWREC empty; /* initially clear working storage*/
  set PKYREC empty; /* initially clear working storage*/
  set PKZREC empty; /* initially clear working storage*/
  set PK05W01 empty; /* initially clear working storage*/
  PK05W01.PK05WSCM = 12; /* set max screen entries*/
  PK05M010.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  PK05M010.XXXRVNBR = "03"; /* revision number*/
  PK05M010.XXXERRID = "PK05100"; /* error id*/
  PK05M010.PK05MDFL = "Y"; /* set default quest field*/
  VGVar.handleHardIOErrors = 1; /* to trap hard errors in program*/
  converseVar.commitOnConverse = 1; /* auto commit on every map converse*/
  ;
  ;
  ;
      /* protect action codes initally*/
  ;
  PK05SA0(); /* protect action codes*/
  ;
  ;
  PKWREC.PKWGRPLV = COMMAREA.CAUSERA;
  ;
  ;
  ;
        /* if returning from inquiry*/
            /* next sentence*/
        /* else*/
            /* if transfer was from inside picking*/
            /* and warehouse changed from commarea.xwhcd*/
            /* and security allows warehouse change*/
                /* get whse abreviation using pkwrec.xwhcd*/
            /* else*/
                /* get whse abreviation using commarea.xwhcd*/
  ;
  PK05W01.PK05WFL1 = "Y"; /* set warehouse found*/
  PK05W01.PK05WFRM = COMMAREA.CAFROMAP;
  if (PK05W01.PK05WFRM == "PK0"
   && PKWREC.PKWINDEX > 0
   && PKWREC.PKWFRMAP[1] == COMMAREA.CACURRAP)
     /* next sentence*/
  else
    if (PK05W01.PK05WFRM == "PW0"
     && PKWREC.PKWINDEX > 0
     && PKWREC.PKWFRMAP[1] == COMMAREA.CACURRAP)
       /* next sentence*/
    else
      if (PK05W01.PK05WFRM != "PK0"
       && PK05W01.PK05WFRM != "PW0")
        set PKWREC empty; /* initially clear the shared work rec*/
        PKWREC.XWHCD = COMMAREA.XWHCD;
        PK05M010.XWHCD = COMMAREA.XWHCD;
        PK05110(); /* get warehouse abbreviation*/
      else
        if (PKWREC.XWHCD != COMMAREA.XWHCD)
          /* and commarea.calvl(1) eq 'y'*/
          PK05M010.XWHCD = PKWREC.XWHCD;
          PK05110(); /* get warehouse abbreviation*/
        else
          PKWREC.XWHCD = COMMAREA.XWHCD;
          PK05M010.XWHCD = COMMAREA.XWHCD;
          PK05110(); /* get warehouse abbreviation*/
        end
      end
    end
  end
  ;
  ;
  ;
   /* if warehouse lookup was not successful, exit*/
  ;
  if (PK05W01.PK05WFL1 == "N")
    return;
  end
  ;
  ;
  ;
   /* ----- if returning from inquiry*/
   /* ----- or from main menu with customer key*/
   /* -----     redisplay the rows that were viewed*/
  ;
  if (PKWREC.PKWINDEX > 0)
    if (PKWREC.PKWFRMAP[1] == COMMAREA.CACURRAP)
      PK05130();
    end
  end
  ;
  ;
  ;
   /* ---- unconditionally clear the key areas*/
  ;
  PKWREC.PKWINDEX = 0;
  PKWREC.PKWCNTRL = " ";
  set PKYREC empty;
  PKWREC.PKWARRAY[1] = PKYREC.PKWARRAY;
  PKWREC.PKWARRAY[2] = PKYREC.PKWARRAY;
  PKWREC.PKWARRAY[3] = PKYREC.PKWARRAY;
  ;
  ;
  ;
   /* -------------  end process pk05100  --------------------*/
end // end PK05100

// get warehouse abbreviation
Function PK05110()
   /* ---------------  pk05110 get warehouse abbreviation --------*/
  ;
  ;
  ;
  PK05W01.PK05WFL1 = "Y"; /* whse lookup successful flag*/
  if (PKWREC.XWHCD in XWHTBL.XWHCD)
    PK05M010.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end
  ;
  if (sysVar.arrayIndex == 0) /* Table entry not found*/
    converseLib.validationFailed(2); /* Indicate invalid warehouse*/
    PK05M010.XWHABRV = " ";
    PK05W01.PK05WFL1 = "N"; /* whse lookup successful flag*/
    set PK05M010.XWHCD cursor, bold;
    return; /* Return to caller*/
  end
  ;
  if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not active warehouse status*/
    converseLib.validationFailed(3); /* Indicate inactive warehouse*/
    PK05M010.XWHABRV = " ";
    PK05W01.PK05WFL1 = "N"; /* whse lookup successful flag*/
    set PK05M010.XWHCD cursor, bold;
    return; /* Return to caller*/
  end
  ;
  ;
  ;
  PKWREC.XWHABRV = PK05M010.XWHABRV;
  set PK05M010.XWHCD normal;
  ;
  ;
  ;
   /* -------------  end process pk05110  --------------------*/
end // end PK05110

// returned from inquiry
Function PK05130()
   /* ---------------  pk05130   ---------------------------------*/
  ;
   /* ----- returned from inquiry*/
  ;
  PK05M010.XXXERRID = "PK05130";
  ;
  ;
   /* ----- get pool header row*/
  ;
  PKYREC.PKWARRAY = PKWREC.PKWARRAY[1];
  set PKWREC empty;
  set PK4REC empty;
  PK05M010.XWHCD = PKYREC.XWHCD;
  PKWREC.XWHCD = PKYREC.XWHCD;
  PK05M010.XWHABRV = PKYREC.XWHABRV;
  PKWREC.XWHABRV = PKYREC.XWHABRV;
  PK05M010.PK05MDFL = "N"; /* set default*/
  PK05M010.PK05MDCC = "    "; /* set carrier cd default*/
  ;
  PK05SA1(); /* unprotect action codes*/
  ;
  PK05SA3(); /* unprotect carrier codes*/
  ;
  PK05W01.PK05WSSB = 1; /* set screen sub*/
  while (PK05W01.PK05WSSB <= PK05W01.PK05WSCM) /* le max*/
    PK05M010.PK05MACT[PK05WSSB] = " ";
    PK05M010.PK1CUOID[PK05WSSB] = PKYREC.PK1CUOID[PK05WSSB];
    PK05M010.PK1NORID[PK05WSSB] = PKYREC.PK1NORID[PK05WSSB];
    if (PKYREC.PK1CUOID[PK05WSSB] > 0)
      PK05134(); /* get pool header row*/
      if (SQLCA.VAGen_SQLCODE == 0)
        PK05M010.TF1CARCD[PK05WSSB] = PK4REC.TF1CARCD;
        PK05W01.TF1CARCD[PK05WSSB] = PK4REC.TF1CARCD;
        if (PK05M010.TF1CARCD[PK05WSSB] > " ")
          PK05136(); /* get carrier description*/
        end
        PK05138(); /* get customer name*/
      end
    else
      PK05M010.TF1CARCD[PK05WSSB] = " "; /* clear carrier cd*/
      PK05M010.TF1ABRV[PK05WSSB] = " "; /* clear carrier abrv*/
      PK05M010.KUMSTRNM[PK05WSSB] = " "; /* clear cust name*/
    end
    PK05W01.PK05WSSB = PK05W01.PK05WSSB + 1;
  end
  ;
  ;
   /* -------------  end process pk05130  --------------------*/
end // end PK05130

// get pool header row
Function PK05134()
   /* ---------------  pk05134   ---------------------------------*/
  ;
   /* ----- get pool header row*/
  ;
  ;
  PK05M010.XXXERRID = "PK05134";
  ;
  ;
  ;
  set PWIREC empty;
  set PK4REC empty;
  PK4REC.XWHCD = PK05M010.XWHCD; /* build key*/
  PK4REC.PK1CUOID = PK05M010.PK1CUOID[PK05WSSB];
  PK4REC.PK1NORID = PK05M010.PK1NORID[PK05WSSB];
  ;
  PWIREC.PWIFUNC = "S ";
  call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
                                   /* select unique pool header*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* 1 row was found*/
    set PK05M010.PK1CUOID[PK05WSSB] normal;
    set PK05M010.PK1NORID[PK05WSSB] normal;
    PK05W01.TF1CARCD[PK05WSSB] = PK4REC.TF1CARCD; /* save*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      set PK05M010.PK1CUOID cursor, modified, bold;
      set PK05M010.PK1NORID modified, bold;
      converseLib.validationFailed(28); /* contention for data base resorce*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        set PK05M010.PK1CUOID[PK05WSSB] cursor, modified, bold;
        set PK05M010.PK1NORID[PK05WSSB] modified, bold;
        PK05M010.KUMSTRNM[PK05WSSB] = " "; /* clear name*/
        converseLib.validationFailed(11); /* no data found for order*/
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK05134 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT UNIQUE            ";
        TA1REC.TA1MAP = "PK05M010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
        TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key value*/
        COMMAREA.CAFROMAP = "PK05";
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      end
    end
  end
  ;
  ;
  ;
   /* -------------  end process pk05134  --------------------*/
end // end PK05134

// get carrier description
Function PK05136()
   /* ---------------  pk05136   ---------------------------------*/
  ;
   /* ----- get carrier description*/
  ;
  ;
  PK05M010.XXXERRID = "PK05136";
  ;
  ;
   /*  */
   /* if carrier same as last time, avoid unnecessary i/o*/
   /*  */
  if (PK05M010.TF1CARCD[PK05WSSB] == TF1REC.TF1CARCD)
    SQLCA.VAGen_SQLCODE = 0; /* set as row was found*/
  else
    set TF1REC empty;
    TF1REC.TF1CARCD = PK05M010.TF1CARCD[PK05WSSB];
    ;
    call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes}; /* select unique on*/
  end
                                 /* traffic carrier table*/
  if (SQLCA.VAGen_SQLCODE == 0) /* row was found*/
    if (TF1REC.XXXSTAT == "A") /* and row active*/
      PK05M010.TF1ABRV[PK05WSSB] = TF1REC.TF1ABRV;
    else
      PK05M010.TF1ABRV[PK05WSSB] = " ";
      set PK05M010.TF1CARCD[PK05WSSB] cursor, modified, bold;
      converseLib.validationFailed(77); /* carrier code invalid*/
    end
  else
    set TF1REC empty;
    if (SQLCA.VAGen_SQLCODE == -911)
      set PK05M010.TF1CARCD[PK05WSSB] cursor, modified, bold;
      converseLib.validationFailed(28); /* contention for data base resorce*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
        PK05M010.TF1ABRV[PK05WSSB] = " ";
        set PK05M010.TF1CARCD[PK05WSSB] cursor, modified, bold;
        converseLib.validationFailed(77); /* carrier code invalid*/
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK05136 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT UNIQUE            ";
        TA1REC.TA1MAP = "PK05M010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCARR001"; /* Table view name*/
        TA1REC.TA1TBLKE = TF1REC.TF1KEYS; /* Table key value*/
        COMMAREA.CAFROMAP = "PK05";
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      end
    end
  end
  ;
  ;
   /* -------------  end process pk05136  --------------------*/
end // end PK05136

// get customer name
Function PK05138()
   /* ---------------  pk05138   ---------------------------------*/
  ;
   /* ----- get customer name*/
  ;
  ;
  ;
  PK05M010.XXXERRID = "PK05138";
  ;
  ;
  ;
  set PK6REC empty;
  PK6REC.KUCCOID = PK4REC.KUCCOID; /* build key*/
  PK6REC.KUMSTRID = PK4REC.KUMSTRID;
  ;
  call "IO1830" ("S ", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes}; /* select unique on*/
                                 /* traffic carrier table*/
  if (SQLCA.VAGen_SQLCODE == 0) /* row was found*/
    PK05M010.KUMSTRNM[PK05WSSB] = PK6REC.KUMSTRNM;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      PK05M010.KUMSTRNM[PK05WSSB] = "** CUSTOMER NOT FOUND **";
      SQLCA.VAGen_SQLCODE = 0; /* reset*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        set PK05M010.PK1CUOID[PK05WSSB] cursor, modified, bold;
        converseLib.validationFailed(28); /* contention for data base resorce*/
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK05138 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT UNIQUE            ";
        TA1REC.TA1MAP = "PK05M010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VPKCUS01"; /* Table view name*/
        TA1REC.TA1TBLKE = PK6REC.PK6GROUP; /* Table key value*/
        COMMAREA.CAFROMAP = "PK05";
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      end
    end
  end
  ;
  ;
  ;
   /* -------------  end process pk05138  --------------------*/
end // end PK05138

// converse map until done
Function PK05200()
   /* ----- pk05200 - converse map until done*/
  ;
  ;
  ;
   /* -----------------------------------------------------------*/
  converse PK05M010 ;
   /* -----------------------------------------------------------*/
  ;
  ;
  ;
   /* ---------------  if warehouse is not modified         ------*/
   /* ---------------      check pf keys                    ------*/
  ;
  if (converseVar.eventKey is pa1 /* check for bad pa key*/
   || converseVar.eventKey is pa3)
    converseLib.clearScreen();
     /* resend map*/
    converseLib.validationFailed(12); /* invalid pf key*/
    return; /* Exit to redisplay map*/
  end
  ;
  PK05210(); /* check pfkeys/transfer*/
  ;
  ;
  ;
   /* ---------------  if error condition occured*/
   /* ---------------      get out.  the screen will be     ------*/
   /* ---------------      conversed again.                 ------*/
  ;
  if (converseVar.validationMsgNum > 0
   || VAGen_EZEMSG > " ")
    return;
  end
  ;
  ;
  ;
   /* ---------------  if warehouse has been modified*/
   /* ---------------  and security allows warehouse changes*/
   /* ---------------      get warehouse abbreviation*/
   /* ---------------      and reload map and working storage*/
   /* ---------------      with new set of records*/
  ;
  if (PK05M010.XWHCD is modified)
     /* AND COMMAREA.CACLVL(1) EQ 'Y';*/
    PKWREC.XWHCD = PK05M010.XWHCD;
    PK05110(); /* change warehouses*/
    if (PK05W01.PK05WFL1 == "N") /* if error, reconverse*/
      return;
    end
  end
  ;
  ;
  ;
   /* ----- edit user input fields*/
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
    ;
    if (converseVar.validationMsgNum == 0) /* no errors*/
      PK05250(); /* check for default action*/
      ;
      PK05W01.PK05WSSB = PK05W01.PK05WSCM; /* init index to max*/
      while (PK05W01.PK05WSSB > 0)
        PK05252(); /* edit user fields*/
        PK05W01.PK05WSSB = PK05W01.PK05WSSB - 1; /* decrem index*/
      end
      ;
      PK05254(); /* edit other fields*/
      ;
      if (converseVar.validationMsgNum == 0) /* no errors*/
        PK05256(); /* edit field combinations*/
      end
    end
  end
  ;
  ;
  ;
   /* ----- if no errors have occured*/
   /* ----- and enter is hit*/
   /* ----- and selection for inquiry was requested*/
   /* -----     transfer to the appropriate inquiry application*/
  ;
  if (converseVar.validationMsgNum == 0
   && converseVar.eventKey is enter
   && "S" in PK05M010.PK05MACT)
    PK05300();
  end
  ;
  ;
  ;
   /* ----- if no errors have occured*/
   /* ----- and enter is hit*/
   /* ----- and action code is 'c' for change*/
   /* -----     perform update pool header*/
  ;
  if (converseVar.validationMsgNum == 0
   && converseVar.eventKey is enter
   && "C" in PK05M010.PK05MACT)
    SQLCA.VAGen_SQLCODE = 0; /* clear field*/
    PK05W01.PK05WSSB = sysVar.arrayIndex; /* init index to first 'c'*/
    PK05W01.PK05WFL2 = "N"; /* clear update flag*/
    while (PK05W01.PK05WSSB <= PK05W01.PK05WSCM /* le max*/
     && SQLCA.VAGen_SQLCODE == 0) /* no db2 errors*/
      if (PK05M010.PK05MACT[PK05WSSB] == "C"
       && PK05M010.PK1CUOID[PK05WSSB] > 0)
        PK05400(); /* perform update, vpoolh01*/
        if (SQLCA.VAGen_SQLCODE == 0)
          PK05500(); /* perform update, vphdit01*/
        end
      end
      PK05W01.PK05WSSB = PK05W01.PK05WSSB + 1; /* increm index*/
    end
    if (SQLCA.VAGen_SQLCODE == 0 /* no db2 error*/
     && PK05W01.PK05WFL2 == "Y") /* updates occured*/
      converseLib.validationFailed(32); /* updates sucessful*/
    end
  end
  ;
  ;
  ;
   /* ------------------- end pk05200 -------------------------*/
end // end PK05200

// check pf keys
Function PK05210()
   /* ---------------  pk05210    --------------------------------*/
  ;
   /* ---------------  check pf keys                        ------*/
  ;
  PK05M010.XXXERRID = "PK05210"; /* Process name*/
  ;
   /* ----  check for valid pf keys                        ------*/
   /* ----    note:  invalid pa keys were already checked  ------*/
  ;
  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf19
   || converseVar.eventKey is pf20
   || converseVar.eventKey is enter)
    /* next sentence*/
  else
    converseLib.validationFailed(12); /* invalid pf key*/
    return; /* Exit to redisplay map*/
  end
  ;
  ;
  if (converseVar.eventKey is pa2) /* cancel*/
    PK05M010.PK05MDFL = "Y"; /* set default*/
    set PK05M010.PK05MDFL cursor, normal;
    PK05M010.PK05MDCC = " "; /* set carrier cd default*/
    set PK05M010.PK05MDCC normal;
    PK05SA0(); /* protect action fields*/
    PK05W01.PK05WSSB = 1; /* set index*/
    while (PK05W01.PK05WSSB <= PK05W01.PK05WSCM) /* le max size*/
      PK05M010.PK1CUOID[PK05WSSB] = 0; /* cust order*/
      PK05M010.PK1NORID[PK05WSSB] = 0; /* nike order*/
      PK05W01.TF1CARCD[PK05WSSB] = " "; /* carrier code*/
      PK05M010.TF1CARCD[PK05WSSB] = " "; /* carrier code*/
      PK05M010.TF1ABRV[PK05WSSB] = " "; /* carrier abbrv*/
      PK05M010.KUMSTRNM[PK05WSSB] = " "; /* cust name*/
      set PK05M010.PK1CUOID[PK05WSSB] normal;
      set PK05M010.PK1NORID[PK05WSSB] normal;
      set PK05M010.TF1CARCD[PK05WSSB] normal;
      PK05W01.PK05WSSB = PK05W01.PK05WSSB + 1; /* increm index*/
    end
    return;
  end
  ;
  ;
     /* check and set modified if <enter> pressed*/
  ;
  if (converseVar.eventKey is enter) /* check and set modified*/
    if (PK05M010.PK05MDFL is modified)
      set PK05M010.PK05MDFL modified;
    else
      set PK05M010.PK05MDFL normal;
    end
    ;
    if (PK05M010.PK05MDCC is modified)
      set PK05M010.PK05MDCC modified;
    else
      set PK05M010.PK05MDCC normal;
    end
    ;
    PK05W01.PK05WSSB = 1; /* set index*/
    while (PK05W01.PK05WSSB <= PK05W01.PK05WSCM) /* le max size*/
      if (PK05M010.PK05MACT[PK05WSSB] is modified)
        set PK05M010.PK05MACT[PK05WSSB] modified;
      end
      ;
      if (PK05M010.PK1CUOID[PK05WSSB] is modified)
        set PK05M010.PK1CUOID[PK05WSSB] modified;
      else
        set PK05M010.PK1CUOID[PK05WSSB] normal;
      end
      ;
      if (PK05M010.PK1NORID[PK05WSSB] is modified)
        set PK05M010.PK1NORID[PK05WSSB] modified;
      else
        set PK05M010.PK1NORID[PK05WSSB] normal;
      end
      ;
      if (PK05M010.PK05MDCC > " ") /* default carrier*/
        if (PK05M010.TF1CARCD[PK05WSSB] is modified)
          set PK05M010.TF1CARCD[PK05WSSB] skip, modified;
        else
          set PK05M010.TF1CARCD[PK05WSSB] skip;
        end
      else
        if (PK05M010.TF1CARCD[PK05WSSB] is modified)
          set PK05M010.TF1CARCD[PK05WSSB] modified;
        else
          set PK05M010.TF1CARCD[PK05WSSB] normal;
        end
      end
      ;
      PK05W01.PK05WSSB = PK05W01.PK05WSSB + 1; /* increm index*/
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf1)
    XSPF1(); /* go to help application*/
    PK05M010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end
  ;
  ;
  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "PK0A";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to picking master menu*/
    PK05M010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end
  ;
  ;
  if (converseVar.eventKey is pf4)
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSPF4(); /* go to master menu*/
    PK05M010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end
  ;
  ;
  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "PK0B";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to picking order inquiry*/
    PK05M010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end
  ;
  ;
  if (converseVar.eventKey is pf14)
    COMMAREA.CATOAP = "PK0C";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to picking line item inquiry*/
    PK05M010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end
  ;
  ;
  if (converseVar.eventKey is pf15)
    COMMAREA.CATOAP = "PK0D";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to picking customer inquiry*/
    PK05M010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end
  ;
  ;
  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "PK0Z";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* sales program/product inquiry*/
    PK05M010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end
  ;
  ;
  if (converseVar.eventKey is pf18)
    COMMAREA.CATOAP = "PK09";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to picking hold / release*/
    PK05M010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end
  ;
  ;
  if (converseVar.eventKey is pf19)
    COMMAREA.CATOAP = "PK0S";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to planning menu*/
    PK05M010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end
  ;
  ;
  if (converseVar.eventKey is pf20)
    COMMAREA.CATOAP = "PK07";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to selection menu*/
    PK05M010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end
  ;
  ;
   /* ------------------- end pk05210 -------------------------*/
end // end PK05210

// control default action code
Function PK05250()
   /* ----- pk05250 control default action code-------------*/
  ;
  ;
  ;
   /* ----- set action codes and attributes*/
  ;
  if (PK05M010.PK05MDFL is modified)
    if (PK05M010.PK05MDFL == "Y")
      PK05SA0(); /* set to protected*/
    else
      if (PK05M010.PK05MDFL == "N")
        PK05SA1(); /* set to unprotected*/
      end
    end
  end
  ;
  ;
   /* ----- set carrier codes and attributes*/
  ;
  if (PK05M010.PK05MDCC is modified)
    set PK05M010.PK05MDCC normal;
    if (PK05M010.PK05MDCC > " ")
      PK05SA2(); /* set to protected*/
    else
      PK05SA3(); /* set to unprotected*/
    end
  end
  ;
  ;
  ;
   /* ----- end pk05250 -----------------------------------------*/
end // end PK05250

// edit user input
Function PK05252()
   /* ----- pk05252 edit user input ------------------------*/
  ;
  ;
   /* ----- check to see if line needs to be cleared*/
  ;
  if (PK05M010.PK1CUOID[PK05WSSB] is modified
   && PK05M010.PK1CUOID[PK05WSSB] <= 0)
    PK05M010.PK1CUOID[PK05WSSB] = 0;
    PK05M010.PK1NORID[PK05WSSB] = 0;
    PK05M010.KUMSTRNM[PK05WSSB] = " ";
    if (PK05M010.PK05MDFL == "N")
      PK05M010.PK05MACT[PK05WSSB] = " ";
      set PK05M010.PK05MACT[PK05WSSB] normal;
    end
    PK05W01.TF1CARCD[PK05WSSB] = " ";
    if (PK05M010.PK05MDCC <= " ")
      PK05M010.TF1CARCD[PK05WSSB] = " ";
      PK05M010.TF1ABRV[PK05WSSB] = " ";
      set PK05M010.TF1CARCD[PK05WSSB] normal;
    end
    set PK05M010.PK1CUOID[PK05WSSB] normal;
    set PK05M010.PK1NORID[PK05WSSB] normal;
    return;
  end
  ;
  ;
  ;
   /* ----- edit carrier*/
   /* -----*/
   /* ----- if carrier was entered*/
   /* -----     verify that the carrier exists*/
   /* -----     on the carrier table.*/
  ;
  if (PK05M010.TF1CARCD[PK05WSSB] is modified
   || PK05M010.TF1CARCD[PK05WSSB] != PK05W01.TF1CARCD[PK05WSSB])
    ;
    if (PK05M010.PK05MDCC > " ")
      set PK05M010.TF1CARCD[PK05WSSB] skip;
    else
      set PK05M010.TF1CARCD[PK05WSSB] normal;
    end
    ;
    if (PK05M010.TF1CARCD[PK05WSSB] > " ")
      PK05136(); /* get carrier*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
       && TF1REC.XXXSTAT == "A")   /* and active*/
        if (PK05M010.XWHCD != TF1REC.XWHCD[1]
         && PK05M010.XWHCD != TF1REC.XWHCD[2]
         && PK05M010.XWHCD != TF1REC.XWHCD[3]
         && PK05M010.XWHCD != TF1REC.XWHCD[4]
         && PK05M010.XWHCD != TF1REC.XWHCD[5]
         && PK05M010.XWHCD != TF1REC.XWHCD[6]
         && PK05M010.XWHCD != TF1REC.XWHCD[7]
         && PK05M010.XWHCD != TF1REC.XWHCD[8]
         && PK05M010.XWHCD != TF1REC.XWHCD[9]
         && PK05M010.XWHCD != TF1REC.XWHCD[10]
         && PK05M010.XWHCD != TF1REC.XWHCD[11]
         && PK05M010.XWHCD != TF1REC.XWHCD[12]
         && PK05M010.XWHCD != TF1REC.XWHCD[13]
         && PK05M010.XWHCD != TF1REC.XWHCD[14]
         && PK05M010.XWHCD != TF1REC.XWHCD[15])
          set PK05M010.TF1CARCD[PK05WSSB] cursor, modified, bold;
          converseLib.validationFailed(149); /* carrier invalid for warehouse*/
        end
      else /* carrier inactive or not found*/
        set PK05M010.TF1CARCD[PK05WSSB] cursor, modified, bold;
        converseLib.validationFailed(77); /* carrier invalid*/
      end
    else /* carrier inactive or not found*/
      PK05M010.TF1ABRV[PK05WSSB] = " ";
      set PK05M010.TF1CARCD[PK05WSSB] normal;
    end
  end
  ;
  ;
   /* ----- if carrier was entered (not by default carrier)*/
   /* -----     verify that the order number is present*/
  ;
  if (PK05M010.TF1CARCD[PK05WSSB] > " "
   && PK05M010.PK05MDCC <= " ")
    if (PK05M010.PK1CUOID[PK05WSSB] > 0)
       /* next sentence*/
    else /* no order number*/
      converseLib.validationFailed(244); /* carrier entered, order required*/
      set PK05M010.PK1CUOID[PK05WSSB] cursor, bold;
      set PK05M010.PK1NORID[PK05WSSB] bold;
    end
  end
  ;
  ;
   /* ----- if carrier was entered (not by default carrier)*/
   /* ----- change is required*/
  ;
  if (PK05M010.PK05MACT[PK05WSSB] == "C"
   || PK05M010.PK05MACT[PK05WSSB] == "S"
   || PK05M010.PK05MACT[PK05WSSB] == "V")
     /* next sentence*/
  else
    if (PK05M010.TF1CARCD[PK05WSSB] > " "
     && PK05M010.PK05MDCC <= " ")
      set PK05M010.PK05MACT[PK05WSSB] cursor, modified, bold;
      converseLib.validationFailed(96); /* carrier entered, action 'c' required*/
    else
      set PK05M010.PK05MACT[PK05WSSB] normal;
    end
  end
  ;
  ;
   /* ----- if order was changed*/
   /* ----- or warehouse has just changed*/
   /* ----- get pool header row*/
   /* -----   if order header record was found*/
   /* -----   and carrier was not entered*/
   /* -----     get carrier description using carrier code*/
   /* -----     from the order.*/
  ;
  if (PK05M010.XWHCD is modified              /* warehouse*/
   || PK05M010.PK1CUOID[PK05WSSB] is modified /* order number*/
   || PK05M010.PK1NORID[PK05WSSB] is modified)
    if (PK05M010.PK1CUOID[PK05WSSB] > 0)
      PK05134(); /* get order*/
      if (SQLCA.VAGen_SQLCODE == 0) /* found*/
         /* note if customer is not found,*/
         /* the sqlcode will be set to zero*/
         /* by pk05138*/
        PK05138(); /* get customer*/
        if (PK05M010.TF1CARCD[PK05WSSB] <= " ") /* no carrier cd on map*/
          if (PK05M010.PK05MDCC > " ") /* default carrier on top of map?*/
            PK05M010.TF1CARCD[PK05WSSB] = PK05M010.PK05MDCC;
          else
            PK05M010.TF1CARCD[PK05WSSB] = PK4REC.TF1CARCD;
          end
          if (PK05M010.TF1CARCD[PK05WSSB] > " ")
            PK05136(); /* get carrier*/
          else
            PK05M010.TF1ABRV[PK05WSSB] = " ";
          end
        end
      end
    end
  end
  ;
  ;
   /* -----   if carrier on map matches pool carrier*/
   /* -----     it's an error*/
  ;
  if (PK05M010.PK05MACT[PK05WSSB] == "C") /* change requested*/
    if (PK05M010.PK1CUOID[PK05WSSB] > 0 /* order nbr entered*/
     && PK05M010.TF1CARCD[PK05WSSB] == PK05W01.TF1CARCD[PK05WSSB]
     && PK05M010.PK05MDCC <= " ")      
      /* AND PK4REC.PK4CARSP EQ '20';*/
       /* since this edit is done after the above*/
       /* it is necessary to suppress the error message*/
       /* if a previous error has occured*/
      if (converseVar.validationMsgNum == 0)
        converseLib.validationFailed(97); /* carrier not changd from orig. value*/
      end
      set PK05M010.TF1CARCD[PK05WSSB] cursor, modified, bold;
    end
  end
  ;
  ;
   /* ----- order number is required if action is 's'*/
  ;
  if (PK05M010.PK05MACT[PK05WSSB] == "S")
    if (PK05M010.PK1CUOID[PK05WSSB] > 0
     && PK05M010.PK1NORID[PK05WSSB] not modified)
       /* next sentence*/
    else
      set PK05M010.PK1CUOID[PK05WSSB] cursor, bold;
      set PK05M010.PK1NORID[PK05WSSB] bold;
      converseLib.validationFailed(026); /* customer order invalid*/
    end
  end
  ;
  ;
   /* ----- validate line item action field*/
  ;
  if (PK05M010.PK05MACT[PK05WSSB] == " "
   || PK05M010.PK05MACT[PK05WSSB] == "C"
   || PK05M010.PK05MACT[PK05WSSB] == "S")
     /* next sentence*/
  else
    if (PK05M010.PK05MACT[PK05WSSB] == "V")
      if (PK05M010.PK1CUOID[PK05WSSB] not modified
       && PK05M010.PK1NORID[PK05WSSB] not modified)
         /* next sentence*/
      else
        PK05M010.PK05MACT[PK05WSSB] = " ";
      end
    else
      set PK05M010.PK05MACT[PK05WSSB] cursor, modified, bold;
      converseLib.validationFailed(35); /* invalid action code*/
    end
  end
  ;
  ;
   /* ----- end pk05252 -----------------------------------------*/
end // end PK05252

// edit other input
Function PK05254()
   /* ----- pk05254 edit other input ------------------------*/
  ;
  ;
  ;
   /* ----- validate default action field*/
  ;
  if (PK05M010.PK05MDFL == "Y"
   || PK05M010.PK05MDFL == "N")
    set PK05M010.PK05MDFL normal;
  else
    set PK05M010.PK05MDFL cursor, modified, bold;
    converseLib.validationFailed(235); /* invalid value - must be y or n*/
  end
  ;
  ;
  ;
   /* ----- end pk05254 -----------------------------------------*/
end // end PK05254

// edit field comb's
Function PK05256()
   /* ----- pk05256 edit field combinations ----------------*/
  ;
  ;
   /* ----- edit to see if order number has*/
   /* ----- been duplicated on the screen*/
  ;
  PK05W01.PK05WSSB = 1; /* init index*/
  while (PK05W01.PK05WSSB < PK05W01.PK05WSCM) /* not max*/
    if (PK05M010.PK1CUOID[PK05WSSB] > 0) /* order entered*/
      sysVar.arrayIndex = PK05W01.PK05WSSB + 1; /* init index*/
      while (sysVar.arrayIndex <= PK05W01.PK05WSCM) /* not max*/
        if (PK05M010.PK1CUOID[sysVar.arrayIndex] > 0) /* order entered*/
          if (PK05M010.PK1CUOID[PK05WSSB] == PK05M010.PK1CUOID[sysVar.arrayIndex]
           && PK05M010.PK1NORID[PK05WSSB] == PK05M010.PK1NORID[sysVar.arrayIndex])
            set PK05M010.PK1CUOID[sysVar.arrayIndex] cursor, bold;
            set PK05M010.PK1NORID[sysVar.arrayIndex] bold;
            converseLib.validationFailed(248); /* order already specified on screen*/
          end
        end
        sysVar.arrayIndex = sysVar.arrayIndex + 1; /* increm index*/
      end
    end
    PK05W01.PK05WSSB = PK05W01.PK05WSSB + 1; /* increm index*/
  end
  ;
  ;
   /* ----- validate line item action field*/
  ;
  if ("C" in PK05M010.PK05MACT) /* update*/
    if ("S" in PK05M010.PK05MACT) /* select*/
      set PK05M010.PK05MACT[sysVar.arrayIndex] cursor, modified, bold;
      converseLib.validationFailed(232); /* invalid action code combination*/
    end
  end
  ;
  ;
   /* ----- validate line item action field vs. default*/
  ;
  if ("Y" == PK05M010.PK05MDFL) /* update*/
    if ("S" in PK05M010.PK05MACT) /* select*/
      set PK05M010.PK05MDFL modified, bold;
      set PK05M010.PK05MACT[sysVar.arrayIndex] cursor, modified, bold;
      converseLib.validationFailed(232); /* invalid action code combination*/
    end
  end
  ;
  ;
   /* ----- validate line item action field vs. carrier default*/
  ;
  if (PK05M010.PK05MDCC > " ") /* update*/
    if ("S" in PK05M010.PK05MACT) /* select*/
      set PK05M010.PK05MDCC modified, bold;
      set PK05M010.PK05MACT[sysVar.arrayIndex] cursor, modified, bold;
      converseLib.validationFailed(232); /* invalid action code combination*/
    end
  end
  ;
  ;
   /* ----- end pk05256 -----------------------------------------*/
end // end PK05256

// transfer to inquiry
Function PK05300()
   /* -----  pk05300 --------------------------------------------*/
  ;
   /* -----  transfer to order inquiry*/
  ;
  ;
  ;
  PKWREC.PKWINDEX = PKWREC.PKWINDEX + 1;
  ;
  ;
  ;
   /* -----  load order number into pkwrec*/
   /* -----  set the inquiry selection type to 'o' for order*/
   /* -----  transfer control to pk0b - order inquiry*/
  ;
  set PKYREC empty;
  PK05W01.PK05WSSB = 1; /* init index*/
  while (PK05W01.PK05WSSB <= PK05W01.PK05WSCM) /* le max*/
    PKYREC.PKYORACT[PK05WSSB] = PK05M010.PK05MACT[PK05WSSB];
    PKYREC.PK1CUOID[PK05WSSB] = PK05M010.PK1CUOID[PK05WSSB];
    PKYREC.PK1NORID[PK05WSSB] = PK05M010.PK1NORID[PK05WSSB];
    PK05W01.PK05WSSB = PK05W01.PK05WSSB + 1; /* increm index*/
  end
  PKYREC.XWHCD = PKWREC.XWHCD;
  PKYREC.XWHABRV = PKWREC.XWHABRV;
  PKWREC.PKWARRAY[PKWINDEX] = PKYREC.PKWARRAY;
  PKWREC.PKWFRMAP[PKWINDEX] = COMMAREA.CACURRAP;
  PKWREC.PKWSLTYP[PKWINDEX] = "O";
  COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
  COMMAREA.CATOAP = "PK0B";
  XSEXIT();
  PK05M010.VAGen_EZEMSG = COMMAREA.CAMSG;
  ;
  ;
  ;
   /* ------------------- end pk05300 -------------------------*/
end // end PK05300

// update pool header
Function PK05400()
   /* ----- pk05400 update pool header --------------------------*/
  ;
  ;
  ;
  PK05M010.XXXERRID = "PK05400";
  ;
  ;
  ;
      /* get the pool header row*/
  ;
  PK05134();
  if (SQLCA.VAGen_SQLCODE != 0) /* not found?*/
    return;
  end
  ;
  ;
  ;
      /* allow the clearing of specified carrier*/
  ;
  if (PK05M010.TF1CARCD[PK05WSSB] > " ")
    PK4REC.PK4CARSP = "20"; /* upd carrier specified cd*/
  else
    PK4REC.PK4CARSP = "  "; /* clear carrier specified cd*/
  end
  ;
  PK4REC.TF1CARCD = PK05M010.TF1CARCD[PK05WSSB]; /* upd carrier cd*/
  PK05W01.TF1CARCD[PK05WSSB] = PK05M010.TF1CARCD[PK05WSSB];
                                   /* save cd*/
  ;
   /* --------- Y2K OUT ----------*/
   /* MOVE 19 TO PK05W01.PK05WFCT;*/
   /* MOVE EZEDTE TO PK05W01.PK05WFDA;*/
   /* --------- Y2K OUT ----------*/
  ;
   /* --------- Y2K IN ----------*/
  PK05W01.PK05WFDT = VGVar.currentGregorianDate;
   /* --------- Y2K IN ----------*/
  PK4REC.ZZZCHGDT = PK05W01.PK05WFDT; /* change date*/
  PK05W01.PK05WTIM = VGVar.currentFormattedTime;
  PK05W01.PK05WTHH = PK05W01.PK05WHH;
  PK05W01.PK05WTMM = PK05W01.PK05WMI;
  PK4REC.ZZZCHGTM = PK05W01.PK05WTI; /* change time*/
  ;
  PWIREC.PWIFUNC = "U ";
  call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* update pool header*/
  if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
    PK05W01.PK05WFL2 = "Y"; /* update occured*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(21); /* contention for data base resorce*/
      set PK05M010.PK1CUOID[PK05WSSB] cursor, modified, bold;
      set PK05M010.PK1NORID[PK05WSSB] modified, bold;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
         /* do rollback to back out any updates to this point*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        converseLib.validationFailed(105); /* data base updated by another appl*/
        set PK05M010.PK1CUOID[PK05WSSB] cursor, modified, bold;
        set PK05M010.PK1NORID[PK05WSSB] modified, bold;
      else
         /* do rollback to back out any updates to this point*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK05400 "; /* Process name*/
        TA1REC.TA1LOC = "UPDATE                   ";
        TA1REC.TA1MAP = "PK05M010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
        TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key value*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
        ;
        set PK05M010.PK1CUOID[PK05WSSB] cursor, modified, bold;
        set PK05M010.PK1NORID[PK05WSSB] modified, bold;
      end
    end
  end
  ;
  ;
  ;
   /* ----- end pk05400 -----------------------------------------*/
end // end PK05400

// update item headers
Function PK05500()
   /* ----- pk05500 update item headers ------------------------- */
   /* */
   /* pk05500's update all the items in sched/ord           */
   /* with the new carrier code.  Not commited unless       */
   /* all rows can be changed.  There can be multiple       */
   /* rows in table for an item, with xhd_hndl_cd being     */
   /* distinctive.  Any DB2 error will call for a           */
   /* rollback to keep vpoolh01 changes from commitment.    */
   /* */
   /* ----------------------------------------------------------- */
  ;
  ;
  PK05M010.XXXERRID = "PK05500";
  ;
  ;
  PK05510(); /* open item, get first item*/
  if (SQLCA.VAGen_SQLCODE != 0) /* bad cursor?*/
    return; /* PK05510 has ezerollb logic*/
  end
  ;
  ;
  while (SQLCA.VAGen_SQLCODE == 0) /* no problems and more records*/
    PWNREC.TF1CARCD = PK05M010.TF1CARCD[PK05WSSB];
                                  /* update carrier code*/
    PWNREC.ZZZCHGDT = PK4REC.ZZZCHGDT; /* change date*/
    PWNREC.ZZZCHGTM = PK4REC.ZZZCHGTM; /* change time*/
    PK05530(); /* insert changed item*/
    if (SQLCA.VAGen_SQLCODE != 0) /* update unsuccessful*/
      return; /* PK05530 has ezerollb logic*/
    else
      PK05520(); /* get next item*/
    end
  end /* out of rows, or DB2 error*/
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* no more items left*/
    PK05W01.PK05WFL2 = "Y"; /* updates occured*/
    PK05540(); /* close item cursor*/
    if (SQLCA.VAGen_SQLCODE != 0) /* error closing cursor*/
      return; /* PK05540 has ezerollb logic*/
    end
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* don't change on converse*/
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(21); /* contention for data base resorce*/
      set PK05M010.PK1CUOID[PK05WSSB] cursor, modified, bold;
      set PK05M010.PK1NORID[PK05WSSB] modified, bold;
    else
      converseLib.validationFailed(29); /* fatal error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PK05500 "; /* Process    name*/
      TA1REC.TA1LOC = "UPDATE                   ";
      TA1REC.TA1MAP = "PK05M010"; /* Map        name*/
      TA1REC.TA1DBASE = "DPICK   "; /* Data  base name*/
      TA1REC.TA1TBLVU = "VPHDIT01"; /* Table view name*/
      TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key value*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
      set PK05M010.PK1CUOID[PK05WSSB] cursor, modified, bold;
      set PK05M010.PK1NORID[PK05WSSB] modified, bold;
    end
  end
  ;
  ;
  ;
   /* ----- end pk05500 -----------------------------------------*/
end // end PK05500

// select item cursor
Function PK05510()
   /* ---------------  pk05510   ---------------------------------*/
  ;
   /* ----- select item cursor and get first item*/
   /* if no items are found, rollback vpoolh01 changes*/
  ;
  ;
  PK05M010.XXXERRID = "PK05510";
  ;
  ;
  set PWIREC empty;
  set PWNREC empty;
  PWNREC.XWHCD = PK05M010.XWHCD; /* build key*/
  PWNREC.PK1CUOID = PK05M010.PK1CUOID[PK05WSSB];
  PWNREC.PK1NORID = PK05M010.PK1NORID[PK05WSSB];
  PWNREC.PK1PRTN = PK4REC.PK1PRTN;
  ;
  PWIREC.PWIFUNC = "S2";
  call "IO5490" (PWIREC, SQLCA, PWNREC) {isNoRefresh = yes, isExternal = yes};
                                  /* select item cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* cursor opened OK*/
    ;
    set PWIREC empty;
    ;
    PWIREC.PWIFUNC = "N2"; /* read first item*/
    call "IO5490" (PWIREC, SQLCA, PWNREC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* item fetched*/
      ;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        set PK05M010.PK1CUOID cursor, modified, bold;
        set PK05M010.PK1NORID modified, bold;
        converseLib.validationFailed(28); /* contention for data base*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* no items*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* don't change vphoolh01*/
          set PK05M010.PK1CUOID[PK05WSSB] cursor, modified, bold;
          set PK05M010.PK1NORID[PK05WSSB] modified, bold;
          PK05M010.KUMSTRNM[PK05WSSB] = " "; /* clear name*/
          converseLib.validationFailed(11); /* no data found for order*/
        else
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* don't change vphoolh01*/
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK05510 "; /* Process name*/
          TA1REC.TA1LOC = "SELECT ITEMS             ";
          TA1REC.TA1MAP = "PK05M010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VPHDIT01"; /* Table view name*/
          TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key value*/
          COMMAREA.CAFROMAP = "PK05";
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        end /* no items found*/
      end /* data base contention*/
    end /* get first item*/
    ;
  else /* cursor opening error*/
    if (SQLCA.VAGen_SQLCODE == -911)
      set PK05M010.PK1CUOID cursor, modified, bold;
      set PK05M010.PK1NORID modified, bold;
      converseLib.validationFailed(28); /* contention for data base resource*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* no items*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* don't change vphoolh01 on converse*/
        set PK05M010.PK1CUOID[PK05WSSB] cursor, modified, bold;
        set PK05M010.PK1NORID[PK05WSSB] modified, bold;
        PK05M010.KUMSTRNM[PK05WSSB] = " "; /* clear name*/
        converseLib.validationFailed(11); /* no data found for order*/
      else
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* don't change vphoolh01 on converse*/
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK05510 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT ITEMS             ";
        TA1REC.TA1MAP = "PK05M010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VPHDIT01"; /* Table view name*/
        TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key value*/
        COMMAREA.CAFROMAP = "PK05";
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      end
    end
  end
  ;
  ;
  ;
   /* -------------  end process pk05510  --------------------*/
end // end PK05510

// get next item
Function PK05520()
   /* ---------------  pk05520   ---------------------------------*/
  ;
   /* ----- read next item cursor*/
  ;
  ;
  PK05M010.XXXERRID = "PK05520";
  ;
  ;
  set PWIREC empty;
  ;
  PWIREC.PWIFUNC = "N2"; /* read next item*/
  call "IO5490" (PWIREC, SQLCA, PWNREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    ;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      set PK05M010.PK1CUOID cursor, modified, bold;
      set PK05M010.PK1NORID modified, bold;
      converseLib.validationFailed(28); /* contention for data base resource*/
    else
      if (SQLCA.VAGen_SQLCODE != 100) /* not out of rows error*/
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK05520 "; /* Process name*/
        TA1REC.TA1LOC = "GET NEXT ROW             ";
        TA1REC.TA1MAP = "PK05M010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VPHDIT01"; /* Table view name*/
        TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key value*/
        COMMAREA.CAFROMAP = "PK05";
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      end
    end
  end
  ;
  ;
  ;
   /* -------------  end process pk05520  --------------------*/
end // end PK05520

// update item
Function PK05530()
   /* ---------------  pk05530   ---------------------------------*/
  ;
   /* ----- update item*/
  ;
  ;
  PK05M010.XXXERRID = "PK05530";
  ;
  ;
  PWIREC.PWIFUNC = "U "; /* add item*/
  call "IO5490" (PWIREC, SQLCA, PWNREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    ;
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* don't change vpoolh01 on converse*/
    if (SQLCA.VAGen_SQLCODE == -911)
      set PK05M010.PK1CUOID cursor, modified, bold;
      set PK05M010.PK1NORID modified, bold;
      converseLib.validationFailed(28); /* contention for data base resorce*/
    else
      converseLib.validationFailed(29); /* fatal error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PK05530 "; /* Process name*/
      TA1REC.TA1LOC = "UPDATE ITEM              ";
      TA1REC.TA1MAP = "PK05M010"; /* Map name*/
      TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPHDIT01"; /* Table view name*/
      TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key value*/
      COMMAREA.CAFROMAP = "PK05";
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    end
  end
  ;
  ;
  ;
   /* -------------  end process pk05530  --------------------*/
end // end PK05530

// close item cursor
Function PK05540()
   /* ---------------  pk05540   ---------------------------------*/
  ;
   /* ----- close item cursor*/
  ;
  ;
  PK05M010.XXXERRID = "PK05540";
  ;
  ;
  PWIREC.PWIFUNC = "C2"; /* close cursor*/
  call "IO5490" (PWIREC, SQLCA, PWNREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* updates unsuccessful*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* back out all changes*/
    if (SQLCA.VAGen_SQLCODE == -911)
      set PK05M010.PK1CUOID cursor, modified, bold;
      set PK05M010.PK1NORID modified, bold;
      converseLib.validationFailed(28); /* contention for data base resorce*/
    else
      converseLib.validationFailed(29); /* fatal error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PK05540 "; /* Process    name*/
      TA1REC.TA1LOC = "CLOSE ITEM CURSOR        ";
      TA1REC.TA1MAP = "PK05M010"; /* Map        name*/
      TA1REC.TA1DBASE = "DPICK   "; /* Data base  name*/
      TA1REC.TA1TBLVU = "VPHDIT01"; /* Table view name*/
      TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key value*/
      COMMAREA.CAFROMAP = "PK05";
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    end
  end
  ;
   /* -------------  end process pk05540  --------------------*/
end // end PK05540

// protect action code fields
Function PK05SA0()
   /* ------- pk05sa0 protect action code fields ----------------*/
  ;
  ;
  ;
  PK05W01.PK05WSSB = 1; /* init index*/
  while (PK05W01.PK05WSSB <= PK05W01.PK05WSCM) /* le max*/
    PK05M010.PK05MACT[PK05WSSB] = "C"; /* set change action*/
    set PK05M010.PK05MACT[PK05WSSB] skip;
    PK05W01.PK05WSSB = PK05W01.PK05WSSB + 1; /* increm index*/
  end
  ;
  ;
  ;
   /* ------- end pk05sa0 ---------------------------------------*/
end // end PK05SA0

// unprotect action code fields
Function PK05SA1()
   /* ------- pk05sa1 unprotect action code fields --------------*/
  ;
  ;
  ;
  PK05W01.PK05WSSB = 1; /* init index*/
  while (PK05W01.PK05WSSB <= PK05W01.PK05WSCM) /* le max*/
    PK05M010.PK05MACT[PK05WSSB] = " "; /* reset action*/
    set PK05M010.PK05MACT[PK05WSSB] normal;
    PK05W01.PK05WSSB = PK05W01.PK05WSSB + 1; /* increm index*/
  end
  ;
  ;
  ;
   /* ------- end pk05sa1 ---------------------------------------*/
end // end PK05SA1

Function PK05SA2()
   /* ------- pk05sa2 protect carrier code fields ----------------*/
  ;
  ;
  PK05W01.PK05WSSB = 1; /* init index*/
  while (PK05W01.PK05WSSB <= PK05W01.PK05WSCM) /* le max*/
    PK05M010.TF1CARCD[PK05WSSB] = PK05M010.PK05MDCC; /* set carrier*/
    set PK05M010.TF1CARCD[PK05WSSB] skip, modified;
    PK05W01.PK05WSSB = PK05W01.PK05WSSB + 1; /* increm index*/
  end
  ;
  ;
   /* ------- end pk05sa2 ---------------------------------------*/
end // end PK05SA2

Function PK05SA3()
   /* ------- pk05sa3 unprotect carrier code fields --------------*/
  ;
  ;
  PK05W01.PK05WSSB = 1; /* init index*/
  while (PK05W01.PK05WSSB <= PK05W01.PK05WSCM) /* le max*/
    PK05M010.TF1CARCD[PK05WSSB] = " "; /* reset carrier code*/
    PK05M010.TF1ABRV[PK05WSSB] = " "; /* reset carrier description*/
    set PK05M010.TF1CARCD[PK05WSSB] normal;
    PK05W01.PK05WSSB = PK05W01.PK05WSSB + 1; /* increm index*/
  end
  ;
  ;
   /* ------- end pk05sa1 ---------------------------------------*/
end // end PK05SA3

DataItem CA-SYS-WORKAREA char(2048)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem CA-SYS-WORKAREA-1 char(512)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 512-char system sub-workarea
DataItem CA-SYS-WORKAREA-2 char(512)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 512-char system sub-workarea
DataItem CA-SYS-WORKAREA-3 char(512)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 512-char system sub-workarea
DataItem CA-SYS-WORKAREA-4 char(512)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 6K Workarea avail to users
DataItem CA-USER-WORKAREA char(6144)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2K sub-workarea
DataItem CA-USER-WORKAREA-2K-A char(2048)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2K sub-workarea
DataItem CA-USER-WORKAREA-2K-B char(2048)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2k sub-workarea
DataItem CA-USER-WORKAREA-2K-C char(2048)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 4K sub-workarea
DataItem CA-USER-WORKAREA-4K char(4096)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea add info
DataItem CAADD char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea add flag
DataItem CAADDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea add level flags
DataItem CAALVL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea chg info
DataItem CACHG char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea chg flag
DataItem CACHGFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea chg level flags
DataItem CACLVL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3rd pos of current applic
DataItem CACURAP3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 4th pos of current applic
DataItem CACURAP4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea current applic
DataItem CACURAPP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea current applic id
DataItem CACURRAP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea current system
DataItem CACURSYS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea del info
DataItem CADEL char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea del flag
DataItem CADELFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea del level flags
DataItem CADLVL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ezesegtr w/s
DataItem CAEZSAP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ezesegtr 1 & 2 pos
DataItem CAEZSG12 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ezesegtr 3rd pos
DataItem CAEZSG3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ezesegtr 4th pos
DataItem CAEZSG4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea from applic
DataItem CAFRMAPP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea from system
DataItem CAFRMSYS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea from applic id
DataItem CAFROMAP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea inq level flags
DataItem CAILVL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea inq info
DataItem CAINQ char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea inq flag
DataItem CAINQFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea item (to data)
DataItem CAITEM char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea item letter array
DataItem CAITMLTR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea system message
DataItem CAMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message, part a (1 of 2 parts)
DataItem CAMSGA char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message, part b (2 of 2 parts)
DataItem CAMSGB char(42)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2 char msg sequence number
DataItem CAMSGNO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// appl id to transfer to
DataItem CAMTOAP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea security ret code
DataItem CASECRC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// commarea system init flag
DataItem CASYSINT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea to application id
DataItem CATOAP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea to applic
DataItem CATOAPP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea to system
DataItem CATOSYS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// orig user workarea(1700 chars)
DataItem CAUSERA char(1700)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea user id
DataItem CAUSERID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem COMMAREA-GROUP char(8192)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_CO_SHORT_NM
DataItem CU-CO-SHORT-NM char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_doc_by_ord_fl
DataItem CU-DOC-BY-ORD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu-edi-cust-ind
DataItem CU-EDI-CUST-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_hang_dflt_fl
DataItem CU-HANG-DFLT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_max_aprl_ynt_cd
DataItem CU-MAX-APRL-YNT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_max_ftwr_ynt_cd
DataItem CU-MAX-FTWR-YNT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu-stynm-prt-fl
DataItem CU-PL-STYNM-PRT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_prt_xref_fl
DataItem CU-PRT-XREF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// IN_STKTF_FR_OWNGRP
DataItem IN7STFOW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// IN_STKTF_REL_DT
DataItem IN7STLDT int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// IN_STKTF_RQT_ETA
DataItem IN7STQDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// IN_STKTF_TO_WHSE
DataItem IN7STTWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// IN_SAS_ID
DataItem INASAID int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// CU_CO_ADDR_ID
DataItem KUCCOAID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CU_CO_ID
DataItem KUCCOID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// CU_CO_NM
DataItem KUCCONM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_GRP_CO_ID
DataItem KUCGRPID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// CU_CUSKU_IND
DataItem KUCSKIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_std_ynt_cd
DataItem KUCSTYNT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_unt_per_cs
DataItem KUCUNTCS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cu-alw-mix-box-fl
DataItem KUFMIXBL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_DEPT_SELF_ID
DataItem KUJSLFID char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_PNT_CO_ID
DataItem KUKPCOID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CU_STOR_CITY_SHORT
DataItem KUMCITYS char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_SHGRP_ADDR_ID
DataItem KUMSHAID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CU_STOR_SELF_ID
DataItem KUMSLFID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_STOR_ADDR_ID
DataItem KUMSTAID int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// CU_STOR_ID
DataItem KUMSTRID smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// CU_STOR_NM
DataItem KUMSTRNM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_STOR_NM_SHORT
DataItem KUMSTSNM char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_STOR_ST_CD
DataItem KUMXSTCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-onetime-ship-fl
DataItem OP11TMSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-cust-need-dt
DataItem OP1CUNDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// op-cust-po
DataItem OP1CUPO char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-dnt-ship-aft-dt
DataItem OP1DSADT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-dnt-ship-bfr-dt
DataItem OP1DSBDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OP_EXPD_FL
DataItem OP1EXPDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-frgt-ppd-fl
DataItem OP1FTIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-shgrp-ovrd-ind
DataItem OP1SGPAO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-spcl-hndl-fl
DataItem OP1SPHDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-spcl-inst-fl
DataItem OP1SPINF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-spcl-labl-fl
DataItem OP1SPLBF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-tkn-by-svrep-id
DataItem OP1TBREP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OP_ALT_NM
DataItem OP5ALTNM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-hndl-lvl-fl
DataItem PK-HNDL-LVL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-ivc-req-fl
DataItem PK-IVC-REQ-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-ord-dclr-val
DataItem PK-ORD-DCLR-VAL decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PK05WDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group date
DataItem PK05WDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem PK05WFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group yymmdd
DataItem PK05WFDA num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PK05WFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group yyyymmdd
DataItem PK05WFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converse loop flag
DataItem PK05WFL0 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// whse lookup successful flag
DataItem PK05WFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// whse chngd for order flag
DataItem PK05WFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PK05WFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 1st 3 bytes of cafromap
DataItem PK05WFRM char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PK05WFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK05WGRP char(86)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hours
DataItem PK05WHH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minutes
DataItem PK05WMI char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PK05WMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work sub1
DataItem PK05WS1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// max screen entries
DataItem PK05WSCM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// seconds
DataItem PK05WSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen sub
DataItem PK05WSSB smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// hours
DataItem PK05WTHH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// time
DataItem PK05WTI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group time
DataItem PK05WTIM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minutes
DataItem PK05WTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem PK05WYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk-nbr-times-aloc
DataItem PK1ALLNB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk-ord-stktf-id
DataItem PK1CUOID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pk-nike-ord-id
DataItem PK1NORID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pk-pick-sched-id
DataItem PK1PKSCH int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk-ord-part-char
DataItem PK1PRTN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-carr-spf-cd
DataItem PK4CARSP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_CUST_HLD_FL
DataItem PK4CUHLD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem PK4GROUP char(493)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_NBR_LN_ITEM
DataItem PK4ITEMS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Key group level
DataItem PK4KEY char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_ORD_FUL_CS_QTY
DataItem PK4ORDFC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_ORD_REPK_QTY
DataItem PK4ORDRP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_TOT_ORD_TM
DataItem PK4ORDTM decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_TOT_ORD_FT3
DataItem PK4ORFT3 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_ORD_HLD_FL
DataItem PK4ORHLD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_TOT_ORD_QTY
DataItem PK4OTUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_TOT_ORD_WT
DataItem PK4OTWGT decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_ORD_PLAN_DT
DataItem PK4PLNDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "MM-dd-yy", inputRequired = no
}
end

// PK_sel_ind
DataItem PK4SLIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_STKTF_FL
DataItem PK4STKTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem PK6GROUP char(166)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XCT-CTRY-CD
DataItem PKW-ORD-GRP-SW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order type indicator
DataItem PKW-ORDER-TYP-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inquiry keys array
DataItem PKWARRAY char(344)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selected inquiry control
DataItem PKWCNTRL char(1197)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inquiry from application
DataItem PKWFRMAP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "from" date in DNSB date range
DataItem PKWFRMDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Record group level
DataItem PKWGRPLV char(1700)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Application array index
DataItem PKWINDEX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select fl values 'pp' or 'pk'
DataItem PKWSELSW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inquiry selections
DataItem PKWSLECT char(399)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inquiry selection type
DataItem PKWSLTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "to" date in DNSB date range
DataItem PKWTODT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Application user area
DataItem PKWUSERA char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// appl aditional user area
DataItem PKWUSERB char(485)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Previous warehouse code
DataItem PKWXWHCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order action field
DataItem PKYORACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// I/O module function
DataItem PKZFUNC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Summary count 1
DataItem PKZSUM1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Summary count 2
DataItem PKZSUM2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PWIDATA char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// function to be performed
DataItem PWIFUNC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-aloc-ful-cs-qty
DataItem PWNFCQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working Storage Group Level
DataItem PWNGROUP char(42)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-aloc-repk-qty
DataItem PWNRPQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SM_SAGCY_ID
DataItem SM1AGYID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SP_SPGM_ID
DataItem SP1ID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// indicates the length of sqlca
DataItem SQLCABC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ezesqlca equivalent field
DataItem SQLCAHEX hex(272)  {
  align = left, fillCharacter = "0", isHexDigit = yes, inputRequired = no
}
end

// eye catcher for storage dumps
DataItem SQLCAID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SQLCAREC char(136)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// provide diagnotic information
DataItem SQLERRD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SQLERRM char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// description of error
DataItem SQLERRMC char(70)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// length indicator for sqlerrmc
DataItem SQLERRML smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// diagnostic information
DataItem SQLERRP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reserved for future use
DataItem SQLEXT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// provide diagnotic information
DataItem SQLWARN char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning indicator
DataItem SQLWARN0 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning indicator
DataItem SQLWARN1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning indicator
DataItem SQLWARN2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning indicator
DataItem SQLWARN3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning indicator
DataItem SQLWARN4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning indicator
DataItem SQLWARN5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning indicator
DataItem SQLWARN6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning indicator
DataItem SQLWARN7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TA1-GROUP char(152)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-data-base
DataItem TA1DBASE char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-db-tbl-group
DataItem TA1DBTBL char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-termination
DataItem TA1FUNC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-fyi-code
DataItem TA1FYICD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-location
DataItem TA1LOC char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-sub-location
DataItem TA1LOCAT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-map
DataItem TA1MAP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map application
DataItem TA1MAPAP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map number
DataItem TA1MAPNO char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Program application
DataItem TA1PGMAP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-pgm-name
DataItem TA1PGMNM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Program number
DataItem TA1PGMNO char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-tbl-key
DataItem TA1TBLKE char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-tbl-view
DataItem TA1TBLVU char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-error-type
DataItem TA1TYPE char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wta0230-db2-subsys-id
DataItem TA3DB2SS char(4)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// tf-carr-abrv
DataItem TF1ABRV char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-air-carr-fl
DataItem TF1ACARF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-carr-cd
DataItem TF1CARCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-carr-nm
DataItem TF1CARNM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-carr-typ-cd
DataItem TF1CARTC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-clm-chg-req-fl
DataItem TF1CRQFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-export-carr-fl
DataItem TF1ECARF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-frgt-carr-fl
DataItem TF1FCARF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem TF1GRP char(118)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key group
DataItem TF1KEYS char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-misc-carr-fl
DataItem TF1MCARF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-prt-bar-fl
DataItem TF1PBRFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-carr-sabrv
DataItem TF1SABRV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-dest-cd
DataItem TF2DSTCD char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_LOC_CD
DataItem TSCLOCCD char(4)  {
  upperCase = yes, align = left, fillCharacter = nullFill, 
  inputRequired = no
}
end

// sql return code
DataItem VAGen_SQLCODE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XAU_ACCT_CLS_CD
DataItem XAUCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XBC_BRAND_CD
DataItem XBCCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xc1490 term kanji-dbcs flag
DataItem XCKJ-DBCS-TERM-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XCT-CTRY-CD
DataItem XCTCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// div: ' ', 'apparel' 'footwear'
DataItem XCTH-THEATER-DIVISION char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// loc: 'us', 'europe' or 'asia'
DataItem XCTH-THEATER-LOCATION char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xcthrec parms length
DataItem XCTH-THEATER-PARMS-LEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reserved for future use
DataItem XCTH-THEATER-RESERVED char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// runtype: 'test' or 'prod'
DataItem XCTH-THEATER-RUNTYPE char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// theater of ops data (grp item)
DataItem XCTHREC-GROUP char(54)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// XDI_DIST_AREA_CD
DataItem XDICD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDS_DIR_SHIP_CD
DataItem XDSCD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XDVCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDV_DIV_CD1
DataItem XDVCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDV_DIV_CD2
DataItem XDVCD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDV_DIV_CD3
DataItem XDVCD3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XGPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD1
DataItem XGPCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD2
DataItem XGPCD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD3
DataItem XGPCD3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD4
DataItem XGPCD4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD5
DataItem XGPCD5 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD6
DataItem XGPCD6 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD7
DataItem XGPCD7 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD8
DataItem XGPCD8 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XHD_HNDL_CD
DataItem XHDCD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XNDCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XNX_DEPT_ID_XREF
DataItem XNXCD smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// xob_base_ot_cd
DataItem XOBCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XOC_ORD_CLS_CD
DataItem XOCCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xot-ord-typ-cd
DataItem XOTCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XPA_CUST_PACK_CD
DataItem XPACD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XPK_PICK_CD
DataItem XPKCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XPP_PICK_PRTY_CD
DataItem XPPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSO_SLS_OFC_ID
DataItem XSOCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XST_ST_CD
DataItem XSTCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xst-st-cd
DataItem XSTSTCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH_EDI_NOTC_FL
DataItem XWH-EDI-NOTC-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH_WHSE_ABRV
DataItem XWHABRV char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH_WHSE_CD
DataItem XWHCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH_CURR_DAY_QTY
DataItem XWHCDQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XWH_CURR_DAY_WHLSL
DataItem XWHCDWHL decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XWH_CURR_MO_QTY
DataItem XWHCMQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XWH_CURR_MO_WHLSL
DataItem XWHCMWHL decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XWH_CASE_WHSE_FL
DataItem XWHCSEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH_WHSE_NM
DataItem XWHNM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH_OWN_GRP_FL
DataItem XWHOWNGF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH_PRDCTN_ADJ_DY
DataItem XWHPAD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XWH_PRV_DAY_QTY
DataItem XWHPDQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XWH_PRV_DAY_WHLSL
DataItem XWHPDWHL decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XWH_PRV_MO_QTY
DataItem XWHPMQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XWH_PRV_MO_WHLSL
DataItem XWHPMWHL decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XWH_WHSE_SHT_ABRV
DataItem XWHSABRV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH_STK_LOC_FL
DataItem XWHSTKLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWO_WHSE_OWN_CD
DataItem XWOCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWT_WHSE_TYP_CD
DataItem XWTCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xxx-addr1
DataItem XXX-ADDR1 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xxx-addr2
DataItem XXX-ADDR2 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xxx-addr3
DataItem XXX-ADDR3 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xxx-addr4
DataItem XXX-ADDR4 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xxx-addr5
DataItem XXX-ADDR5 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xxx-addr6
DataItem XXX-ADDR6 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xxx_err_tbl_pfx_id
DataItem XXX-ERR-TBL-PFX-ID char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// XXX_CITY
DataItem XXXCITY char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PROCESS NAME
DataItem XXXPRCNM char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xxxstat
DataItem XXXSTAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XXX_ZIP
DataItem XXXZIP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YCU_CRTN_USE_CD
DataItem YCU-CRTN-USE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zfc-crcy-cd
DataItem ZFC-CRCY-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zfl-lang-cd
DataItem ZFL-LANG-CD mbchar(2)  {
  align = left, fillCharacter = nullFill, needsSOSI = yes, 
  inputRequired = no
}
end

DataItem ZZZCHGCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem ZZZCHGDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem ZZZCHGTM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem ZZZSDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//*** RECORD=COMMAREA ****
// the "commarea" is is the communication area that will be
// used between csp applications.  this area will be used to
// transport system required information and application
// specific information between applications.  all online
// main transactions will be required to use the commarea as
// working storage.
// 
// *-*-*-*-*-*-*-*-*-*   Maintenance Log   *-*-*-*-*-*-*-*-*-*
// tsup 02/03/94 bkoois  increased commarea size to 8192 bytes
// tsup 02/10/94 vcowan  added fields: ZFL-LANG-CD & all the
//                       XCTHREC items
// tsup 04/14/94 vcowan  added xxx-errmsg-tbl-pfx for used with
//                       XSTAS-VCSP4001 csp statement group for
//                       use on MVSEURD
// tsup 03/27/97 vcowan  added field: xcth-theater-division to
//                       xcthrec definition ... reason: for
//                       MVSDAPB (Apparel) & MVSDFTC (Footwear)
// tsup 03/27/97 vcowan  added field:
//                       ta3db2ss:  contains value of db2 sub-
//                         system associated with cics region
//                         ref table in pgm: TA0230
//                       xckj-dbcs-term-fl: xc1490 flag value
//                         for dbcs/mix kanji enable terminal
//                         Y for yes; N for no
// ************************
Record COMMAREA type basicRecord
  5 COMMAREA-GROUP COMMAREA-GROUP ; 
    10 CA-SYS-WORKAREA CA-SYS-WORKAREA ; 
      15 CA-SYS-WORKAREA-1 CA-SYS-WORKAREA-1 ; 
        20 CASYSINT CASYSINT ; 
        20 CAUSERID CAUSERID ; 
        20 CAFROMAP CAFROMAP ; 
          25 CAFRMSYS CAFRMSYS ; 
          25 CAFRMAPP CAFRMAPP ; 
        20 CACURRAP CACURRAP ; 
          25 CACURSYS CACURSYS ; 
          25 CACURAPP CACURAPP ; 
            30 CACURAP3 CACURAP3 ; 
            30 CACURAP4 CACURAP4 ; 
        20 CATOAP CATOAP ; 
          25 CATOSYS CATOSYS ; 
          25 CATOAPP CATOAPP ; 
        20 CAITEM CAITEM ; 
          25 CAITMLTR CAITMLTR [20] ; 
        20 CAMSG CAMSG ; 
          25 XXXPRCNM XXXPRCNM ; 
          25 CAMSGNO CAMSGNO ; 
          25 * char(1) ; 
          25 CAMSGA CAMSGA ; 
          25 CAMTOAP CAMTOAP ; 
          25 CAMSGB CAMSGB ; 
        20 CASECRC CASECRC ; 
        20 CAADD CAADD ; 
          25 CAADDFL CAADDFL ; 
          25 CAALVL CAALVL [10] ; 
        20 CACHG CACHG ; 
          25 CACHGFL CACHGFL ; 
          25 CACLVL CACLVL [10] ; 
        20 CADEL CADEL ; 
          25 CADELFL CADELFL ; 
          25 CADLVL CADLVL [10] ; 
        20 CAINQ CAINQ ; 
          25 CAINQFL CAINQFL ; 
          25 CAILVL CAILVL [10] ; 
        20 XWHCD XWHCD ; 
        20 XDVCD XDVCD ; 
        20 XSOCD XSOCD ; 
        20 XNDCD XNDCD ; 
        20 XGPCD XGPCD ; 
        20 CAEZSAP CAEZSAP ; 
          25 CAEZSG12 CAEZSG12 ; 
          25 CAEZSG3 CAEZSG3 ; 
          25 CAEZSG4 CAEZSG4 ; 
          25 * char(4) ; 
        20 ZFL-LANG-CD ZFL-LANG-CD ; 
        20 * char(2) ; 
        20 XCTHREC-GROUP XCTHREC-GROUP ; 
          25 XCTH-THEATER-RUNTYPE XCTH-THEATER-RUNTYPE ; 
          25 XCTH-THEATER-LOCATION XCTH-THEATER-LOCATION ; 
          25 XCTH-THEATER-RESERVED XCTH-THEATER-RESERVED ; 
            30 XCTH-THEATER-DIVISION XCTH-THEATER-DIVISION ; 
            30 * char(30) ; // reserved for future use
          25 XCTH-THEATER-PARMS-LEN XCTH-THEATER-PARMS-LEN ; 
        20 XXX-ERR-TBL-PFX-ID XXX-ERR-TBL-PFX-ID ; 
        20 TA3DB2SS TA3DB2SS ; 
        20 XCKJ-DBCS-TERM-FL XCKJ-DBCS-TERM-FL ; 
        20 * char(260) ; 
      15 CA-SYS-WORKAREA-2 CA-SYS-WORKAREA-2 ; 
      15 CA-SYS-WORKAREA-3 CA-SYS-WORKAREA-3 ; 
      15 CA-SYS-WORKAREA-4 CA-SYS-WORKAREA-4 ; 
    10 * char(6144) ; 
      15 CA-USER-WORKAREA CA-USER-WORKAREA ; 
        20 CA-USER-WORKAREA-4K CA-USER-WORKAREA-4K ; 
          25 CA-USER-WORKAREA-2K-A CA-USER-WORKAREA-2K-A ; 
            30 CAUSERA CAUSERA ; 
            30 * char(348) ; 
          25 CA-USER-WORKAREA-2K-B CA-USER-WORKAREA-2K-B ; 
        20 CA-USER-WORKAREA-2K-C CA-USER-WORKAREA-2K-C ; 
end // end COMMAREA

Record PK05W01 type basicRecord
  3 PK05WGRP PK05WGRP ; 
    5 PK05WSCM PK05WSCM ; 
    5 PK05WSSB PK05WSSB ; 
    5 PK05WS1 PK05WS1 ; 
    5 TF1CARCD TF1CARCD [12] ; 
    5 PK05WFL0 PK05WFL0 ; 
    5 PK05WFL1 PK05WFL1 ; 
    5 PK05WFL2 PK05WFL2 ; 
    5 PK05WFRM PK05WFRM ; 
    5 PK05WDT PK05WDT ; 
      10 PK05WMM PK05WMM ; 
      10 PK05WDD PK05WDD ; 
      10 PK05WYY PK05WYY ; 
    5 PK05WFDT PK05WFDT ; 
      10 PK05WFCT PK05WFCT ; 
      10 PK05WFDA PK05WFDA ; 
        15 PK05WFYY PK05WFYY ; 
        15 PK05WFMM PK05WFMM ; 
        15 PK05WFDD PK05WFDD ; 
    5 PK05WTIM PK05WTIM ; 
      10 PK05WHH PK05WHH ; 
      10 * char(1) ; 
      10 PK05WMI PK05WMI ; 
      10 * char(1) ; 
      10 PK05WSS PK05WSS ; 
    5 PK05WTI PK05WTI ; 
      10 PK05WTHH PK05WTHH ; 
      10 PK05WTMM PK05WTMM ; 
end // end PK05W01

//*** RECORD=PK4REC ****
// ************* PICKING ORDER POOL HEADER TABLE **************
// 
// DB2 TABLE VIEW:      DPICK.VPOOLH01
// 
// COPYLIB MEMBER:      DCL00279
// 
// I/O MODULE:          IO1720
// 
// KEY TO DB2 TABLE:    XWHCD
//                      PK1PRTN
//                      PK1CUOID
//                      PK1NORID
// 
// DATE CREATED:        05/22/87
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 05/22/87   SHP       New record definition.
// 04/02/90  mchow      Added XBCCD to record; deleted IN7SPINS
//                      IN7STINS from record.
// 05/07/90  jcampb     added xsocd, xobcd, sm1acyid, xdscd,
//                      and op1ftind to record(struct change)
// 10/02/90  JWOOD      added PK4CUHLD, PK4PVSEL
// 02/05/91  MWALTO     added KUFMIXBL, KUCMXYNT, KUCUNTCS,
//                      XHDLPIND, XPACD AND RENAMED PK4PVSEL TO
//                      PK4SLIND for table changes.
// 03/04/91  SBEAUC     added PK4ORDFC, PK4ORDRP, PK4ORFT3,
//                      PK4ORDTM and deleted KUCMXYNT for table
//                      changes.
// 06/18/92  shende     Add kufmixbl, kucuntcs, pk-hndl-lvl-fl,
//                      pk-ivc-req-fl, kumslfid, kujslfid,
//                      pk-ord-dclr-val for table changes
// 02/21/94  MPLUTH     Changed XXXADDR1 - 3 to XXX-ADDR1 - 3.
//                      Added XXX_ADDR4 - 6.
// **********************
Record PK4REC type basicRecord
  5 PK4GROUP PK4GROUP ; 
    10 PK4KEY PK4KEY ; 
      15 XWHCD XWHCD ; 
      15 PK1PRTN PK1PRTN ; 
      15 PK1CUOID PK1CUOID ; 
      15 PK1NORID PK1NORID ; 
    10 PK4STKTF PK4STKTF ; 
    10 PK1ALLNB PK1ALLNB ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 XGPCD XGPCD ; 
    10 XDVCD XDVCD ; 
    10 XBCCD XBCCD ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1TBREP OP1TBREP ; 
    10 OP11TMSF OP11TMSF ; 
    10 OP1SPHDF OP1SPHDF ; 
    10 OP1SPLBF OP1SPLBF ; 
    10 OP1SPINF OP1SPINF ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 OP1DSADT OP1DSADT ; 
    10 OP1DSBDT OP1DSBDT ; 
    10 XPACD XPACD ; 
    10 PK-HNDL-LVL-FL PK-HNDL-LVL-FL ; 
    10 XPKCD XPKCD ; 
    10 XPPCD XPPCD ; 
    10 XSOCD XSOCD ; 
    10 XOTCD XOTCD ; 
    10 XOBCD XOBCD ; 
    10 XOCCD XOCCD ; 
    10 SP1ID SP1ID ; 
    10 SM1AGYID SM1AGYID ; 
    10 XDSCD XDSCD ; 
    10 OP1FTIND OP1FTIND ; 
    10 OP1SGPAO OP1SGPAO ; 
    10 KUMSHAID KUMSHAID ; 
    10 IN7STFOW IN7STFOW ; 
    10 IN7STQDT IN7STQDT ; 
    10 IN7STLDT IN7STLDT ; 
    10 IN7STTWH IN7STTWH ; 
    10 TF1CARCD TF1CARCD ; 
    10 TF2DSTCD TF2DSTCD ; 
    10 PK4CARSP PK4CARSP ; 
    10 PK-IVC-REQ-FL PK-IVC-REQ-FL ; 
    10 OP5ALTNM OP5ALTNM ; 
    10 KUMSLFID KUMSLFID ; 
    10 KUJSLFID KUJSLFID ; 
    10 XXX-ADDR1 XXX-ADDR1 ; 
    10 XXX-ADDR2 XXX-ADDR2 ; 
    10 XXX-ADDR3 XXX-ADDR3 ; 
    10 XXX-ADDR4 XXX-ADDR4 ; 
    10 XXX-ADDR5 XXX-ADDR5 ; 
    10 XXX-ADDR6 XXX-ADDR6 ; 
    10 XXXCITY XXXCITY ; 
    10 XSTSTCD XSTSTCD ; 
    10 XXXZIP XXXZIP ; 
    10 XCTCD XCTCD ; 
    10 PK4PLNDT PK4PLNDT ; 
    10 PK4OTWGT PK4OTWGT ; 
    10 PK4OTUNT PK4OTUNT ; 
    10 PK4ORDFC PK4ORDFC ; 
    10 PK4ORDRP PK4ORDRP ; 
    10 PK-ORD-DCLR-VAL PK-ORD-DCLR-VAL ; 
    10 PK4ORFT3 PK4ORFT3 ; 
    10 PK4ORDTM PK4ORDTM ; 
    10 PK4ITEMS PK4ITEMS ; 
    10 OP1EXPDF OP1EXPDF ; 
    10 PK4ORHLD PK4ORHLD ; 
    10 PK4CUHLD PK4CUHLD ; 
    10 PK4SLIND PK4SLIND ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PK4REC

//*** RECORD=PK6REC ****
// *************** PICKING CUSTOMER STORE TABLE ***************
// 
// DB2 TABLE VIEW:      DPICK.VPKCUS01
// 
// COPYLIB MEMBER:      DCL00294
// 
// I/O MODULE:          IO1830
// 
// KEY TO DB2 TABLE:    KUCCOID
//                      KUMSTRID
// 
// DATE CREATED:        05/26/87
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 05/26/87   SHP       New record definition.
// 02/05/91  mwalto     chg KUMMNFFL, KUMSPDFL AND KUMPOMFL
//                      to filler, the filler will be deleted
//                      during a later table change.
// 03/04/91  SBEAUC     Add KUFMIXBL, KUCMXYNT, KUCUNTCS and
//                      delete filler for table changes.
// 10/03/91  mwalto     Add KUCGRPID, CU-CO-SHORT-NM, KUCSTYNT,
//                      & CU-PL-STYNM-PRT-FL for table changes.
// 03/06/92  SHENDE     Add KUJSLFID,KUJSLFNM, CU_DOC_BY_ORD_FL
//                      CU_HANG_DFLT_FL, CU_PRT_XREF_FL,
//                      KUMSLFID, XAUCD for March table changes
// 06/18/92  shende     Add xbccd, ycu-crtn-use-cd, xnxcd, and
//                      pk-ivc-req-fl for table changes
// 07/23/93  OVAZQU     Delete: xnx-dept-id-xref, cu-dept-self-
//                      nm, and add cu-edi-cust-ind for Aug 93
//                      table changes.
// 02/21/94  mpluth     Changed CU-MAX-YNT-CD to
//                      CU-MAX-FTWR-YNT-CD.  Added
//                      CU-MAX-APRL-YNT-CD.
// **********************
Record PK6REC type basicRecord
  5 PK6GROUP PK6GROUP ; 
    10 KUCCOID KUCCOID ; 
    10 XBCCD XBCCD ; 
    10 KUKPCOID KUKPCOID ; 
    10 KUCGRPID KUCGRPID ; 
    10 KUCCONM KUCCONM ; 
    10 CU-CO-SHORT-NM CU-CO-SHORT-NM ; 
    10 KUCCOAID KUCCOAID ; 
    10 KUCSKIND KUCSKIND ; 
    10 KUMSTRID KUMSTRID ; 
    10 KUMSTRNM KUMSTRNM ; 
    10 KUMSTSNM KUMSTSNM ; 
    10 KUMXSTCD KUMXSTCD ; 
    10 KUMCITYS KUMCITYS ; 
    10 KUMSTAID KUMSTAID ; 
    10 KUMSHAID KUMSHAID ; 
    10 KUFMIXBL KUFMIXBL ; 
    10 KUCSTYNT KUCSTYNT ; 
    10 CU-MAX-FTWR-YNT-CD CU-MAX-FTWR-YNT-CD ; 
    10 CU-MAX-APRL-YNT-CD CU-MAX-APRL-YNT-CD ; 
    10 YCU-CRTN-USE-CD YCU-CRTN-USE-CD ; 
    10 KUCUNTCS KUCUNTCS ; 
    10 CU-PL-STYNM-PRT-FL CU-PL-STYNM-PRT-FL ; 
    10 CU-DOC-BY-ORD-FL CU-DOC-BY-ORD-FL ; 
    10 CU-HANG-DFLT-FL CU-HANG-DFLT-FL ; 
    10 CU-PRT-XREF-FL CU-PRT-XREF-FL ; 
    10 XAUCD XAUCD ; 
    10 KUJSLFID KUJSLFID ; 
    10 KUMSLFID KUMSLFID ; 
    10 PK-IVC-REQ-FL PK-IVC-REQ-FL ; 
    10 CU-EDI-CUST-IND CU-EDI-CUST-IND ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PK6REC

//*** RECORD=PKWREC ****
// This is the Picking common work record.  It is passed from
// application to application in the COMMAREA user area.
// 
//   DATE        NAME      COMMENT
// --------     ------     ------------------------------------
// 07/07/87     SPOPA      Initial record creation.
// 07/19/89     jcampb     add pkwuserb area for pass info
// 11/04/91     shende     add division code (XDVCD).
// 03/03/92     SHENDE     Add brand code (XBCCD).
// 08/11/95     CBRINE     CANADA - Add country code (XCTCD).
// **********************
Record PKWREC type basicRecord
  5 PKWGRPLV PKWGRPLV ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 PKWXWHCD PKWXWHCD ; 
    10 PKWINDEX PKWINDEX ; 
    10 PKWCNTRL PKWCNTRL ; 
      15 PKWSLECT PKWSLECT [3] ; 
        20 PKWFRMAP PKWFRMAP ; 
        20 PKWSLTYP PKWSLTYP ; 
        20 PKWARRAY PKWARRAY ; 
        20 PKWUSERA PKWUSERA ; 
          25 PKWSELSW PKWSELSW ; 
          25 PKWFRMDT PKWFRMDT ; 
          25 PKWTODT PKWTODT ; 
          25 PKW-ORDER-TYP-IND PKW-ORDER-TYP-IND ; 
          25 XDVCD XDVCD ; 
          25 XBCCD XBCCD ; 
          25 XCTCD XCTCD ; 
          25 PKW-ORD-GRP-SW PKW-ORD-GRP-SW ; 
          25 * char(29) ; 
    10 PKWUSERB PKWUSERB ; 
end // end PKWREC

//*** RECORD=PKYREC ****
// This work area is the order keys array that is formatted
// and passed in the Picking common work record (PKWREC) when
// orders are selected for inquiry.
// 
//   DATE        NAME      COMMENT
// --------     ------     ------------------------------------
// 07/07/87     SPOPA      Initial record creation.
// **********************
Record PKYREC type basicRecord
  5 PKWARRAY PKWARRAY ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 PKYORACT PKYORACT [30] ; 
    10 PK1CUOID PK1CUOID [30] ; 
    10 PK1NORID PK1NORID [30] ; 
    10 PK1PKSCH PK1PKSCH [30] ; 
end // end PKYREC

//*** RECORD=PKZREC ****
// This work area is the first argument that is passed in the
// CALL statement for modules IO1770, IO1790 and IO2160.
// It contains the function to be performed and two general
// use summary count fields.  Data is returned to the calling
// application in either one or both fields, depending on the
// called module.
// 
//   DATE       NAME      COMMENT
// --------    ------     -------------------------------------
// 07/27/87    SPOPA      Initial record creation.
// **********************
Record PKZREC type basicRecord
  10 PKZFUNC PKZFUNC ; 
  10 PKZSUM1 PKZSUM1 ; 
  10 PKZSUM2 PKZSUM2 ; 
end // end PKZREC

//*** RECORD=PWIREC ****
// ** * * * * PICKING ORDER POOL HEADER IOMOD OPTION REC  * * *
// *
// *    USE IN CONJUCTION WITH IOMOD IO1720 AND REC PK4REC
// *
// *    WITH OPTION "S5" IT IS NESSARY TO PASS BOTH HIGH AND
// *    LOW VALUE RANGE DESIRED AS THE IOMOD WILL NOT DEFAULT
// *    ANY OF THE VALUES.
// *
// *    DATE CREATED: 07/25/89
// *
// *    MAINTENANCE LOG
// *
// *    DATE     INIT     REASON
// *  --------   ----     -----------------------------------
// *  07/25/89   jbc      created
// *
// *
// ** * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// **********************
Record PWIREC type basicRecord
  5 PWIDATA PWIDATA ; 
    10 PWIFUNC PWIFUNC ; 
    10 OP1CUNDT OP1CUNDT [2] ; 
    10 OP1DSBDT OP1DSBDT [2] ; 
    10 PK4PLNDT PK4PLNDT [2] ; 
end // end PWIREC

//*** RECORD=PWNREC ****
// ************* PICKING HEADER/ITEM RECORD *******************
// 
// CSP RECORD:                PWNREC
// 
// DB2 TABLE:                 DPICK.VPHDIT01
// 
// COPYLIB MEMBER:            DCL00908
// 
// DB2 TABLE KEY:             XWHCD
// 
// DATE CREATED:              01/17/91
// 
// MAINTENANCE LOG:
// 
//   DATE       NAME     COMMENTS
// --------   --------   --------------------------------------
// 01/17/91   M. SMITH   New CSP Record
// 06/18/92   shende     Add xgpcd, xdvcd, xbccd for tbl chnges
// 
// ************************************************************
// **********************
Record PWNREC type basicRecord
  5 PWNGROUP PWNGROUP ; 
    10 XWHCD XWHCD ; 
    10 PK1PRTN PK1PRTN ; 
    10 PK1CUOID PK1CUOID ; 
    10 PK1NORID PK1NORID ; 
    10 OP1DSBDT OP1DSBDT ; 
    10 XHDCD XHDCD ; 
    10 TF1CARCD TF1CARCD ; 
    10 XGPCD XGPCD ; 
    10 XDVCD XDVCD ; 
    10 XBCCD XBCCD ; 
    10 PWNFCQTY PWNFCQTY ; 
    10 PWNRPQTY PWNRPQTY ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PWNREC

//*** RECORD=SQLCA ****
// sqlca - sql communication area
// 
// sqlca is a collection of variables that are used by db2 to
// provike an application program with information about the
// execution of its sql statements.  thus, the information in
// the sqlca applies to the most recently executed sql
// statement.
// 
// the sqlca is the second argument to be passed to a db2
// i/o module.  an example of a call to db2 follows.
// 
//              call io0030,iotask,sqlca,sm5rec
// 
// for more complete definition of the variable names please
// refer to the  ibm database 2 reference sc26-4078-1
// appendix f.
// 
// *********************
Record SQLCA type basicRecord
  3 SQLCAREC SQLCAREC ; 
    4 SQLCAHEX SQLCAHEX ; 
      5 SQLCAID SQLCAID ; 
      5 SQLCABC SQLCABC ; 
      5 VAGen_SQLCODE VAGen_SQLCODE ; 
      5 SQLERRM SQLERRM ; 
        49 SQLERRML SQLERRML ; 
        49 SQLERRMC SQLERRMC ; 
      5 SQLERRP SQLERRP ; 
      5 SQLERRD SQLERRD [6] ; 
      5 SQLWARN SQLWARN ; 
        10 SQLWARN0 SQLWARN0 ; 
        10 SQLWARN1 SQLWARN1 ; 
        10 SQLWARN2 SQLWARN2 ; 
        10 SQLWARN3 SQLWARN3 ; 
        10 SQLWARN4 SQLWARN4 ; 
        10 SQLWARN5 SQLWARN5 ; 
        10 SQLWARN6 SQLWARN6 ; 
        10 SQLWARN7 SQLWARN7 ; 
      5 SQLEXT SQLEXT ; 
end // end SQLCA

//*** RECORD=TA1REC ****
// this record is for use with csp to call the error diag
// module ta0020.
// 
// the call statement for ta0020 should be in the following
// format:
// 
//         CALL TA0020 TA1REC,TAEREC (NONCSP ;
// 
// ta1rec is 48 bytes long and consists of the following:
// 
//    1) error type - four bytes charcater error type code
//                    'db2 ' db2 error
//                    'vsam' vsam error
//                    'appl' any other application error
// 
//    2) termination- four bytes character termination code
//                    'abnd' abend the application
//                           do not use for csp/db2
//                    'retn' log error and return to caller
//                           use for csp/db2
// 
//    3) program name - eight byter character program id.
// 
//    4) location     - 32 byte character user defined info.
//                      this field is sub-defined into four
//                      8 character fields (process/stmt group
//                      name, etc. may be placed in these
//                      fields).
// 
//    5) map          - last map name displayed/conversed.
// 
//    6) db2 view name- the view name for the data base.
//                      this field is sub-defined into two
//                      fields to separate the data base
//                      name from the table name.
// 
//    7) key value    - a/n value of key (user program should
//                      not attempt to convert any internal
//                      data fields. e.g. bin/pack to num).
// 
//  date created   :  05-07-86
// 
//  maintenance log:
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          05-13-86   dps    added map, data base, table view,
//                            table key, and filler columns
//          12/16/88  SPOPA   Defined subordinate fields to
//                            TA1PGMNM and TA1MAP.
//          06/08/93  jcampb  added TA1-GROUP level 03
// **********************
Record TA1REC type basicRecord
  3 TA1-GROUP TA1-GROUP ; 
    5 TA1TYPE TA1TYPE ; 
    5 TA1FUNC TA1FUNC ; 
    5 TA1PGMNM TA1PGMNM ; 
      10 TA1PGMAP TA1PGMAP ; 
      10 TA1PGMNO TA1PGMNO ; 
    5 TA1LOC TA1LOC ; 
      10 TA1LOCAT TA1LOCAT [4] ; 
    5 TA1MAP TA1MAP ; 
      10 TA1MAPAP TA1MAPAP ; 
      10 TA1MAPNO TA1MAPNO ; 
    5 TA1DBTBL TA1DBTBL ; 
      10 TA1DBASE TA1DBASE ; 
      10 TA1TBLVU TA1TBLVU ; 
    5 TA1TBLKE TA1TBLKE ; 
    5 TA1FYICD TA1FYICD ; 
    5 * char(37) ; 
end // end TA1REC

//*** RECORD=TF1REC ****
// ************* ship recon carrier code record ***************
// 
// db2 table:          dpick.vcarr001
// 
// copylib member:     dcl00114
// 
// i/o mod:            io0860
// 
// key to db2 table:   tf1carcd
// 
// 
// date created:       9/10/86
// 
// maintenance log:
// 
//   date        init            comment
//   ----        ----       -----------------------------------
// 09/10/86      tl         initial creation
// 05/07/87      jsn        add carrier flags
// 06/25/87      jsn        add xwhcd's , tf1cartc
// 08/17/87      jsn        add tf1pbrfl's
// **********************
Record TF1REC type basicRecord
  5 TF1GRP TF1GRP ; 
    10 TF1KEYS TF1KEYS ; 
      15 TF1CARCD TF1CARCD ; 
    10 TF1CARNM TF1CARNM ; 
    10 TF1ABRV TF1ABRV ; 
    10 TF1SABRV TF1SABRV ; 
    10 TF1MCARF TF1MCARF ; 
    10 TF1ECARF TF1ECARF ; 
    10 TF1FCARF TF1FCARF ; 
    10 TF1ACARF TF1ACARF ; 
    10 TF1CRQFL TF1CRQFL ; 
    10 TF1CARTC TF1CARTC ; 
    10 XWHCD XWHCD [15] ; 
    10 TF1PBRFL TF1PBRFL [15] ; 
    10 XXXSTAT XXXSTAT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end TF1REC

