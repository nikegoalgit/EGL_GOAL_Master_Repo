package pk05;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PK05 ****
// ------------------------------------------------------------
// ------------------------------------------------------------
// ------------------------------------------------------------
// ----- pk05  -  CARRIER CODE MAINTENANCE SCREEN.        -----
// -----          THIS APPLICATION GIVES THE USER THE     -----
// -----          ABILITY TO MODIFY THE CARRIER CODE      -----
// -----          ON THE PICK POOL HEADER.                -----
// -----                                                  -----
// -----          THE PROGRAM SUPPORTS SELECTING AN ORDER,-----
// -----          JUMPING TO ORDER INQUIRY AND RETURNING  -----
// -----          WITH THAT ORDER SHOWN AS BEING VIEWED.  -----
// -----          (shown with a 'v' in the action field)  -----
// -----                                                  -----
// ------------------------------------------------------------
// ------------------------------------------------------------
// ------------------------------------------------------------
// ----- MAINTENANCE LOG:                                 -----
// -----                                                  -----
// ----- NAME   DATE       DESCRIPTION                    -----
// ----- PRM    07/31/87   created                        -----
// ----- JSN    09/29/87   add multiple line logic        -----
// ----- JBW    11/30/88   ADDED NONCSP OPTION TO CALLS   -----
// ----- JBW    11/30/88   XSSEGTR LOGIC ADDED            -----
// ----- jbc    07/21/89   changed xfer from pk0i to pk09 -----
// -----                   added pwirec for io1720        -----
// ----- rhm    02/05/93   update DPICK.VPHDIT01 carrier  -----
// -----                   code when VPOOLH01 is updated  -----
// -----                   succesfully.  PK05500 series.  -----
// ----- CBRINE 08/11/95   CANADA Added XCTCD to PKWREC   -----
// ----- OVAZQU 03/21/97   Add default Carrier code to screen--
// ----- OVAZQU 04/29/97   One more little change related -----
// -----                   to previous change.            -----
// ----- MBURLE 01/30/98   Y2KFIX: No longer hard-code the-----
// -----                   century in proc, PK05400.      -----
// -----                                                  -----
// ------------------------------------------------------------
// ------------------------------------------------------------
// ------------------------------------------------------------
// *********************
Program PK05 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK05W01 PK05W01; // record
  PK4REC PK4REC; // record
  PK6REC PK6REC; // record
  PKWREC PKWREC; // record
  PKYREC PKYREC; // record
  PKZREC PKZREC; // record
  PWIREC PWIREC; // record
  PWNREC PWNREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TF1REC TF1REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use PK05M.PK05M010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PK05005: PK05005();
  end // end main
end // end PK05

// carrier code maintenance
Function PK05005()
   /* ---------------          main process  pk05005          ----*/

   /* ---------------  carrier code maintenance               ----*/


   /* IF COMMAREA.CASYSINT NE 'CSP';*/
    /* SET COMMAREA EMPTY;*/
    /* MOVE 'CSP' TO COMMAREA.CASYSINT;*/
    /* MOVE 'DEMO' TO COMMAREA.CAUSERID;*/
    /* MOVE 'PK05' TO COMMAREA.CACURRAP;*/
    /* MOVE 'MN0M' TO COMMAREA.CAFROMAP;*/
    /* MOVE '02' TO COMMAREA.XWHCD;*/
   /* END ;*/

  XSENTRY();

  XSSEGTR(); /* SET SEGMENTED TRANSACTION ID*/



  PK05100(); /* initialization*/



  PK05W01.PK05WFL0 = "N";
  while (PK05W01.PK05WFL0 == "N")
    PK05200(); /* converse map until done*/
  end



   /* -------------  end process pk05005  --------------------*/
end // end PK05005

// initialization routine
Function PK05100()

   /* ---------------  pk05100 initialization  -------------------*/



   /* ---- clear records and*/
   /* ---- set up map header information*/

  set PK05M010 initial; /* initially clear the map*/
  set SQLCA empty; /* initially clear working storage*/
  set TF1REC empty; /* initially clear working storage*/
  set TA1REC empty; /* initially clear working storage*/
  set PK4REC empty; /* initially clear working storage*/
  set PK6REC empty; /* initially clear working storage*/
  set PKWREC empty; /* initially clear working storage*/
  set PKYREC empty; /* initially clear working storage*/
  set PKZREC empty; /* initially clear working storage*/
  set PK05W01 empty; /* initially clear working storage*/
  PK05W01.PK05WSCM = 12; /* set max screen entries*/
  PK05M010.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  PK05M010.XXXRVNBR = "03"; /* revision number*/
  PK05M010.XXXERRID = "PK05100"; /* error id*/
  PK05M010.PK05MDFL = "Y"; /* set default quest field*/
  VGVar.handleHardIOErrors = 1; /* to trap hard errors in program*/
  converseVar.commitOnConverse = 1; /* auto commit on every map converse*/



      /* protect action codes initally*/

  PK05SA0(); /* protect action codes*/


  PKWREC.PKWGRPLV = COMMAREA.CAUSERA;



        /* if returning from inquiry*/
            /* next sentence*/
        /* else*/
            /* if transfer was from inside picking*/
            /* and warehouse changed from commarea.xwhcd*/
            /* and security allows warehouse change*/
                /* get whse abreviation using pkwrec.xwhcd*/
            /* else*/
                /* get whse abreviation using commarea.xwhcd*/

  PK05W01.PK05WFL1 = "Y"; /* set warehouse found*/
  PK05W01.PK05WFRM = COMMAREA.CAFROMAP;
  if (PK05W01.PK05WFRM == "PK0"
   && PKWREC.PKWINDEX > 0
   && PKWREC.PKWFRMAP[1] == COMMAREA.CACURRAP)
     /* next sentence*/
  else
    if (PK05W01.PK05WFRM == "PW0"
     && PKWREC.PKWINDEX > 0
     && PKWREC.PKWFRMAP[1] == COMMAREA.CACURRAP)
       /* next sentence*/
    else
      if (PK05W01.PK05WFRM != "PK0"
       && PK05W01.PK05WFRM != "PW0")
        set PKWREC empty; /* initially clear the shared work rec*/
        PKWREC.XWHCD = COMMAREA.XWHCD;
        PK05M010.XWHCD = COMMAREA.XWHCD;
        PK05110(); /* get warehouse abbreviation*/
      else
        if (PKWREC.XWHCD != COMMAREA.XWHCD)
          /* and commarea.calvl(1) eq 'y'*/
          PK05M010.XWHCD = PKWREC.XWHCD;
          PK05110(); /* get warehouse abbreviation*/
        else
          PKWREC.XWHCD = COMMAREA.XWHCD;
          PK05M010.XWHCD = COMMAREA.XWHCD;
          PK05110(); /* get warehouse abbreviation*/
        end
      end
    end
  end



   /* if warehouse lookup was not successful, exit*/

  if (PK05W01.PK05WFL1 == "N")
    return;
  end



   /* ----- if returning from inquiry*/
   /* ----- or from main menu with customer key*/
   /* -----     redisplay the rows that were viewed*/

  if (PKWREC.PKWINDEX > 0)
    if (PKWREC.PKWFRMAP[1] == COMMAREA.CACURRAP)
      PK05130();
    end
  end



   /* ---- unconditionally clear the key areas*/

  PKWREC.PKWINDEX = 0;
  PKWREC.PKWCNTRL = " ";
  set PKYREC empty;
  PKWREC.PKWARRAY[1] = PKYREC.PKWARRAY;
  PKWREC.PKWARRAY[2] = PKYREC.PKWARRAY;
  PKWREC.PKWARRAY[3] = PKYREC.PKWARRAY;



   /* -------------  end process pk05100  --------------------*/
end // end PK05100

// get warehouse abbreviation
Function PK05110()
   /* ---------------  pk05110 get warehouse abbreviation --------*/



  PK05W01.PK05WFL1 = "Y"; /* whse lookup successful flag*/
  if (PKWREC.XWHCD in XWHTBL.XWHCD)
    PK05M010.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end

  if (sysVar.arrayIndex == 0) /* Table entry not found*/
    converseLib.validationFailed(2); /* Indicate invalid warehouse*/
    PK05M010.XWHABRV = " ";
    PK05W01.PK05WFL1 = "N"; /* whse lookup successful flag*/
    set PK05M010.XWHCD cursor, bold;
    return; /* Return to caller*/
  end

  if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not active warehouse status*/
    converseLib.validationFailed(3); /* Indicate inactive warehouse*/
    PK05M010.XWHABRV = " ";
    PK05W01.PK05WFL1 = "N"; /* whse lookup successful flag*/
    set PK05M010.XWHCD cursor, bold;
    return; /* Return to caller*/
  end



  PKWREC.XWHABRV = PK05M010.XWHABRV;
  set PK05M010.XWHCD normal;



   /* -------------  end process pk05110  --------------------*/
end // end PK05110

// returned from inquiry
Function PK05130()
   /* ---------------  pk05130   ---------------------------------*/

   /* ----- returned from inquiry*/

  PK05M010.XXXERRID = "PK05130";


   /* ----- get pool header row*/

  PKYREC.PKWARRAY = PKWREC.PKWARRAY[1];
  set PKWREC empty;
  set PK4REC empty;
  PK05M010.XWHCD = PKYREC.XWHCD;
  PKWREC.XWHCD = PKYREC.XWHCD;
  PK05M010.XWHABRV = PKYREC.XWHABRV;
  PKWREC.XWHABRV = PKYREC.XWHABRV;
  PK05M010.PK05MDFL = "N"; /* set default*/
  PK05M010.PK05MDCC = "    "; /* set carrier cd default*/

  PK05SA1(); /* unprotect action codes*/

  PK05SA3(); /* unprotect carrier codes*/

  PK05W01.PK05WSSB = 1; /* set screen sub*/
  while (PK05W01.PK05WSSB <= PK05W01.PK05WSCM) /* le max*/
    PK05M010.PK05MACT[PK05WSSB] = " ";
    PK05M010.PK1CUOID[PK05WSSB] = PKYREC.PK1CUOID[PK05WSSB];
    PK05M010.PK1NORID[PK05WSSB] = PKYREC.PK1NORID[PK05WSSB];
    if (PKYREC.PK1CUOID[PK05WSSB] > 0)
      PK05134(); /* get pool header row*/
      if (SQLCA.VAGen_SQLCODE == 0)
        PK05M010.TF1CARCD[PK05WSSB] = PK4REC.TF1CARCD;
        PK05W01.TF1CARCD[PK05WSSB] = PK4REC.TF1CARCD;
        if (PK05M010.TF1CARCD[PK05WSSB] > " ")
          PK05136(); /* get carrier description*/
        end
        PK05138(); /* get customer name*/
      end
    else
      PK05M010.TF1CARCD[PK05WSSB] = " "; /* clear carrier cd*/
      PK05M010.TF1ABRV[PK05WSSB] = " "; /* clear carrier abrv*/
      PK05M010.KUMSTRNM[PK05WSSB] = " "; /* clear cust name*/
    end
    PK05W01.PK05WSSB = PK05W01.PK05WSSB + 1;
  end


   /* -------------  end process pk05130  --------------------*/
end // end PK05130

// get pool header row
Function PK05134()
   /* ---------------  pk05134   ---------------------------------*/

   /* ----- get pool header row*/


  PK05M010.XXXERRID = "PK05134";



  set PWIREC empty;
  set PK4REC empty;
  PK4REC.XWHCD = PK05M010.XWHCD; /* build key*/
  PK4REC.PK1CUOID = PK05M010.PK1CUOID[PK05WSSB];
  PK4REC.PK1NORID = PK05M010.PK1NORID[PK05WSSB];

  PWIREC.PWIFUNC = "S ";
  call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
                                   /* select unique pool header*/

  if (SQLCA.VAGen_SQLCODE == 0) /* 1 row was found*/
    set PK05M010.PK1CUOID[PK05WSSB] normal;
    set PK05M010.PK1NORID[PK05WSSB] normal;
    PK05W01.TF1CARCD[PK05WSSB] = PK4REC.TF1CARCD; /* save*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      set PK05M010.PK1CUOID cursor, modified, bold;
      set PK05M010.PK1NORID modified, bold;
      converseLib.validationFailed(28); /* contention for data base resorce*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        set PK05M010.PK1CUOID[PK05WSSB] cursor, modified, bold;
        set PK05M010.PK1NORID[PK05WSSB] modified, bold;
        PK05M010.KUMSTRNM[PK05WSSB] = " "; /* clear name*/
        converseLib.validationFailed(11); /* no data found for order*/
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK05134 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT UNIQUE            ";
        TA1REC.TA1MAP = "PK05M010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
        TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key value*/
        COMMAREA.CAFROMAP = "PK05";
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      end
    end
  end



   /* -------------  end process pk05134  --------------------*/
end // end PK05134

// get carrier description
Function PK05136()
   /* ---------------  pk05136   ---------------------------------*/

   /* ----- get carrier description*/


  PK05M010.XXXERRID = "PK05136";


   /*  */
   /* if carrier same as last time, avoid unnecessary i/o*/
   /*  */
  if (PK05M010.TF1CARCD[PK05WSSB] == TF1REC.TF1CARCD)
    SQLCA.VAGen_SQLCODE = 0; /* set as row was found*/
  else
    set TF1REC empty;
    TF1REC.TF1CARCD = PK05M010.TF1CARCD[PK05WSSB];

    call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes}; /* select unique on*/
  end
                                 /* traffic carrier table*/
  if (SQLCA.VAGen_SQLCODE == 0) /* row was found*/
    if (TF1REC.XXXSTAT == "A") /* and row active*/
      PK05M010.TF1ABRV[PK05WSSB] = TF1REC.TF1ABRV;
    else
      PK05M010.TF1ABRV[PK05WSSB] = " ";
      set PK05M010.TF1CARCD[PK05WSSB] cursor, modified, bold;
      converseLib.validationFailed(77); /* carrier code invalid*/
    end
  else
    set TF1REC empty;
    if (SQLCA.VAGen_SQLCODE == -911)
      set PK05M010.TF1CARCD[PK05WSSB] cursor, modified, bold;
      converseLib.validationFailed(28); /* contention for data base resorce*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
        PK05M010.TF1ABRV[PK05WSSB] = " ";
        set PK05M010.TF1CARCD[PK05WSSB] cursor, modified, bold;
        converseLib.validationFailed(77); /* carrier code invalid*/
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK05136 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT UNIQUE            ";
        TA1REC.TA1MAP = "PK05M010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCARR001"; /* Table view name*/
        TA1REC.TA1TBLKE = TF1REC.TF1KEYS; /* Table key value*/
        COMMAREA.CAFROMAP = "PK05";
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      end
    end
  end


   /* -------------  end process pk05136  --------------------*/
end // end PK05136

// get customer name
Function PK05138()
   /* ---------------  pk05138   ---------------------------------*/

   /* ----- get customer name*/



  PK05M010.XXXERRID = "PK05138";



  set PK6REC empty;
  PK6REC.KUCCOID = PK4REC.KUCCOID; /* build key*/
  PK6REC.KUMSTRID = PK4REC.KUMSTRID;

  call "IO1830" ("S ", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes}; /* select unique on*/
                                 /* traffic carrier table*/
  if (SQLCA.VAGen_SQLCODE == 0) /* row was found*/
    PK05M010.KUMSTRNM[PK05WSSB] = PK6REC.KUMSTRNM;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      PK05M010.KUMSTRNM[PK05WSSB] = "** CUSTOMER NOT FOUND **";
      SQLCA.VAGen_SQLCODE = 0; /* reset*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        set PK05M010.PK1CUOID[PK05WSSB] cursor, modified, bold;
        converseLib.validationFailed(28); /* contention for data base resorce*/
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK05138 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT UNIQUE            ";
        TA1REC.TA1MAP = "PK05M010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VPKCUS01"; /* Table view name*/
        TA1REC.TA1TBLKE = PK6REC.PK6GROUP; /* Table key value*/
        COMMAREA.CAFROMAP = "PK05";
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      end
    end
  end



   /* -------------  end process pk05138  --------------------*/
end // end PK05138

// converse map until done
Function PK05200()
   /* ----- pk05200 - converse map until done*/



   /* -----------------------------------------------------------*/
  converse PK05M010 ;
   /* -----------------------------------------------------------*/



   /* ---------------  if warehouse is not modified         ------*/
   /* ---------------      check pf keys                    ------*/

  if (converseVar.eventKey is pa1 /* check for bad pa key*/
   || converseVar.eventKey is pa3)
    converseLib.clearScreen();
     /* resend map*/
    converseLib.validationFailed(12); /* invalid pf key*/
    return; /* Exit to redisplay map*/
  end

  PK05210(); /* check pfkeys/transfer*/



   /* ---------------  if error condition occured*/
   /* ---------------      get out.  the screen will be     ------*/
   /* ---------------      conversed again.                 ------*/

  if (converseVar.validationMsgNum > 0
   || VAGen_EZEMSG > " ")
    return;
  end



   /* ---------------  if warehouse has been modified*/
   /* ---------------  and security allows warehouse changes*/
   /* ---------------      get warehouse abbreviation*/
   /* ---------------      and reload map and working storage*/
   /* ---------------      with new set of records*/

  if (PK05M010.XWHCD is modified)
     /* AND COMMAREA.CACLVL(1) EQ 'Y';*/
    PKWREC.XWHCD = PK05M010.XWHCD;
    PK05110(); /* change warehouses*/
    if (PK05W01.PK05WFL1 == "N") /* if error, reconverse*/
      return;
    end
  end



   /* ----- edit user input fields*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)

    if (converseVar.validationMsgNum == 0) /* no errors*/
      PK05250(); /* check for default action*/

      PK05W01.PK05WSSB = PK05W01.PK05WSCM; /* init index to max*/
      while (PK05W01.PK05WSSB > 0)
        PK05252(); /* edit user fields*/
        PK05W01.PK05WSSB = PK05W01.PK05WSSB - 1; /* decrem index*/
      end

      PK05254(); /* edit other fields*/

      if (converseVar.validationMsgNum == 0) /* no errors*/
        PK05256(); /* edit field combinations*/
      end
    end
  end



   /* ----- if no errors have occured*/
   /* ----- and enter is hit*/
   /* ----- and selection for inquiry was requested*/
   /* -----     transfer to the appropriate inquiry application*/

  if (converseVar.validationMsgNum == 0
   && converseVar.eventKey is enter
   && "S" in PK05M010.PK05MACT)
    PK05300();
  end



   /* ----- if no errors have occured*/
   /* ----- and enter is hit*/
   /* ----- and action code is 'c' for change*/
   /* -----     perform update pool header*/

  if (converseVar.validationMsgNum == 0
   && converseVar.eventKey is enter
   && "C" in PK05M010.PK05MACT)
    SQLCA.VAGen_SQLCODE = 0; /* clear field*/
    PK05W01.PK05WSSB = sysVar.arrayIndex; /* init index to first 'c'*/
    PK05W01.PK05WFL2 = "N"; /* clear update flag*/
    while (PK05W01.PK05WSSB <= PK05W01.PK05WSCM /* le max*/
     && SQLCA.VAGen_SQLCODE == 0) /* no db2 errors*/
      if (PK05M010.PK05MACT[PK05WSSB] == "C"
       && PK05M010.PK1CUOID[PK05WSSB] > 0)
        PK05400(); /* perform update, vpoolh01*/
        if (SQLCA.VAGen_SQLCODE == 0)
          PK05500(); /* perform update, vphdit01*/
        end
      end
      PK05W01.PK05WSSB = PK05W01.PK05WSSB + 1; /* increm index*/
    end
    if (SQLCA.VAGen_SQLCODE == 0 /* no db2 error*/
     && PK05W01.PK05WFL2 == "Y") /* updates occured*/
      converseLib.validationFailed(32); /* updates sucessful*/
    end
  end



   /* ------------------- end pk05200 -------------------------*/
end // end PK05200

// check pf keys
Function PK05210()
   /* ---------------  pk05210    --------------------------------*/

   /* ---------------  check pf keys                        ------*/

  PK05M010.XXXERRID = "PK05210"; /* Process name*/

   /* ----  check for valid pf keys                        ------*/
   /* ----    note:  invalid pa keys were already checked  ------*/

  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf19
   || converseVar.eventKey is pf20
   || converseVar.eventKey is enter)
    /* next sentence*/
  else
    converseLib.validationFailed(12); /* invalid pf key*/
    return; /* Exit to redisplay map*/
  end


  if (converseVar.eventKey is pa2) /* cancel*/
    PK05M010.PK05MDFL = "Y"; /* set default*/
    set PK05M010.PK05MDFL cursor, normal;
    PK05M010.PK05MDCC = " "; /* set carrier cd default*/
    set PK05M010.PK05MDCC normal;
    PK05SA0(); /* protect action fields*/
    PK05W01.PK05WSSB = 1; /* set index*/
    while (PK05W01.PK05WSSB <= PK05W01.PK05WSCM) /* le max size*/
      PK05M010.PK1CUOID[PK05WSSB] = 0; /* cust order*/
      PK05M010.PK1NORID[PK05WSSB] = 0; /* nike order*/
      PK05W01.TF1CARCD[PK05WSSB] = " "; /* carrier code*/
      PK05M010.TF1CARCD[PK05WSSB] = " "; /* carrier code*/
      PK05M010.TF1ABRV[PK05WSSB] = " "; /* carrier abbrv*/
      PK05M010.KUMSTRNM[PK05WSSB] = " "; /* cust name*/
      set PK05M010.PK1CUOID[PK05WSSB] normal;
      set PK05M010.PK1NORID[PK05WSSB] normal;
      set PK05M010.TF1CARCD[PK05WSSB] normal;
      PK05W01.PK05WSSB = PK05W01.PK05WSSB + 1; /* increm index*/
    end
    return;
  end


     /* check and set modified if <enter> pressed*/

  if (converseVar.eventKey is enter) /* check and set modified*/
    if (PK05M010.PK05MDFL is modified)
      set PK05M010.PK05MDFL modified;
    else
      set PK05M010.PK05MDFL normal;
    end

    if (PK05M010.PK05MDCC is modified)
      set PK05M010.PK05MDCC modified;
    else
      set PK05M010.PK05MDCC normal;
    end

    PK05W01.PK05WSSB = 1; /* set index*/
    while (PK05W01.PK05WSSB <= PK05W01.PK05WSCM) /* le max size*/
      if (PK05M010.PK05MACT[PK05WSSB] is modified)
        set PK05M010.PK05MACT[PK05WSSB] modified;
      end

      if (PK05M010.PK1CUOID[PK05WSSB] is modified)
        set PK05M010.PK1CUOID[PK05WSSB] modified;
      else
        set PK05M010.PK1CUOID[PK05WSSB] normal;
      end

      if (PK05M010.PK1NORID[PK05WSSB] is modified)
        set PK05M010.PK1NORID[PK05WSSB] modified;
      else
        set PK05M010.PK1NORID[PK05WSSB] normal;
      end

      if (PK05M010.PK05MDCC > " ") /* default carrier*/
        if (PK05M010.TF1CARCD[PK05WSSB] is modified)
          set PK05M010.TF1CARCD[PK05WSSB] skip, modified;
        else
          set PK05M010.TF1CARCD[PK05WSSB] skip;
        end
      else
        if (PK05M010.TF1CARCD[PK05WSSB] is modified)
          set PK05M010.TF1CARCD[PK05WSSB] modified;
        else
          set PK05M010.TF1CARCD[PK05WSSB] normal;
        end
      end

      PK05W01.PK05WSSB = PK05W01.PK05WSSB + 1; /* increm index*/
    end
  end


  if (converseVar.eventKey is pf1)
    XSPF1(); /* go to help application*/
    PK05M010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end


  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "PK0A";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to picking master menu*/
    PK05M010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end


  if (converseVar.eventKey is pf4)
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSPF4(); /* go to master menu*/
    PK05M010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end


  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "PK0B";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to picking order inquiry*/
    PK05M010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end


  if (converseVar.eventKey is pf14)
    COMMAREA.CATOAP = "PK0C";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to picking line item inquiry*/
    PK05M010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end


  if (converseVar.eventKey is pf15)
    COMMAREA.CATOAP = "PK0D";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to picking customer inquiry*/
    PK05M010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end


  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "PK0Z";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* sales program/product inquiry*/
    PK05M010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end


  if (converseVar.eventKey is pf18)
    COMMAREA.CATOAP = "PK09";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to picking hold / release*/
    PK05M010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end


  if (converseVar.eventKey is pf19)
    COMMAREA.CATOAP = "PK0S";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to planning menu*/
    PK05M010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end


  if (converseVar.eventKey is pf20)
    COMMAREA.CATOAP = "PK07";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to selection menu*/
    PK05M010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end


   /* ------------------- end pk05210 -------------------------*/
end // end PK05210

// control default action code
Function PK05250()
   /* ----- pk05250 control default action code-------------*/



   /* ----- set action codes and attributes*/

  if (PK05M010.PK05MDFL is modified)
    if (PK05M010.PK05MDFL == "Y")
      PK05SA0(); /* set to protected*/
    else
      if (PK05M010.PK05MDFL == "N")
        PK05SA1(); /* set to unprotected*/
      end
    end
  end


   /* ----- set carrier codes and attributes*/

  if (PK05M010.PK05MDCC is modified)
    set PK05M010.PK05MDCC normal;
    if (PK05M010.PK05MDCC > " ")
      PK05SA2(); /* set to protected*/
    else
      PK05SA3(); /* set to unprotected*/
    end
  end



   /* ----- end pk05250 -----------------------------------------*/
end // end PK05250

// edit user input
Function PK05252()
   /* ----- pk05252 edit user input ------------------------*/


   /* ----- check to see if line needs to be cleared*/

  if (PK05M010.PK1CUOID[PK05WSSB] is modified
   && PK05M010.PK1CUOID[PK05WSSB] <= 0)
    PK05M010.PK1CUOID[PK05WSSB] = 0;
    PK05M010.PK1NORID[PK05WSSB] = 0;
    PK05M010.KUMSTRNM[PK05WSSB] = " ";
    if (PK05M010.PK05MDFL == "N")
      PK05M010.PK05MACT[PK05WSSB] = " ";
      set PK05M010.PK05MACT[PK05WSSB] normal;
    end
    PK05W01.TF1CARCD[PK05WSSB] = " ";
    if (PK05M010.PK05MDCC <= " ")
      PK05M010.TF1CARCD[PK05WSSB] = " ";
      PK05M010.TF1ABRV[PK05WSSB] = " ";
      set PK05M010.TF1CARCD[PK05WSSB] normal;
    end
    set PK05M010.PK1CUOID[PK05WSSB] normal;
    set PK05M010.PK1NORID[PK05WSSB] normal;
    return;
  end



   /* ----- edit carrier*/
   /* -----*/
   /* ----- if carrier was entered*/
   /* -----     verify that the carrier exists*/
   /* -----     on the carrier table.*/

  if (PK05M010.TF1CARCD[PK05WSSB] is modified
   || PK05M010.TF1CARCD[PK05WSSB] != PK05W01.TF1CARCD[PK05WSSB])

    if (PK05M010.PK05MDCC > " ")
      set PK05M010.TF1CARCD[PK05WSSB] skip;
    else
      set PK05M010.TF1CARCD[PK05WSSB] normal;
    end

    if (PK05M010.TF1CARCD[PK05WSSB] > " ")
      PK05136(); /* get carrier*/

      if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
       && TF1REC.XXXSTAT == "A")   /* and active*/
        if (PK05M010.XWHCD != TF1REC.XWHCD[1]
         && PK05M010.XWHCD != TF1REC.XWHCD[2]
         && PK05M010.XWHCD != TF1REC.XWHCD[3]
         && PK05M010.XWHCD != TF1REC.XWHCD[4]
         && PK05M010.XWHCD != TF1REC.XWHCD[5]
         && PK05M010.XWHCD != TF1REC.XWHCD[6]
         && PK05M010.XWHCD != TF1REC.XWHCD[7]
         && PK05M010.XWHCD != TF1REC.XWHCD[8]
         && PK05M010.XWHCD != TF1REC.XWHCD[9]
         && PK05M010.XWHCD != TF1REC.XWHCD[10]
         && PK05M010.XWHCD != TF1REC.XWHCD[11]
         && PK05M010.XWHCD != TF1REC.XWHCD[12]
         && PK05M010.XWHCD != TF1REC.XWHCD[13]
         && PK05M010.XWHCD != TF1REC.XWHCD[14]
         && PK05M010.XWHCD != TF1REC.XWHCD[15])
          set PK05M010.TF1CARCD[PK05WSSB] cursor, modified, bold;
          converseLib.validationFailed(149); /* carrier invalid for warehouse*/
        end
      else /* carrier inactive or not found*/
        set PK05M010.TF1CARCD[PK05WSSB] cursor, modified, bold;
        converseLib.validationFailed(77); /* carrier invalid*/
      end
    else /* carrier inactive or not found*/
      PK05M010.TF1ABRV[PK05WSSB] = " ";
      set PK05M010.TF1CARCD[PK05WSSB] normal;
    end
  end


   /* ----- if carrier was entered (not by default carrier)*/
   /* -----     verify that the order number is present*/

  if (PK05M010.TF1CARCD[PK05WSSB] > " "
   && PK05M010.PK05MDCC <= " ")
    if (PK05M010.PK1CUOID[PK05WSSB] > 0)
       /* next sentence*/
    else /* no order number*/
      converseLib.validationFailed(244); /* carrier entered, order required*/
      set PK05M010.PK1CUOID[PK05WSSB] cursor, bold;
      set PK05M010.PK1NORID[PK05WSSB] bold;
    end
  end


   /* ----- if carrier was entered (not by default carrier)*/
   /* ----- change is required*/

  if (PK05M010.PK05MACT[PK05WSSB] == "C"
   || PK05M010.PK05MACT[PK05WSSB] == "S"
   || PK05M010.PK05MACT[PK05WSSB] == "V")
     /* next sentence*/
  else
    if (PK05M010.TF1CARCD[PK05WSSB] > " "
     && PK05M010.PK05MDCC <= " ")
      set PK05M010.PK05MACT[PK05WSSB] cursor, modified, bold;
      converseLib.validationFailed(96); /* carrier entered, action 'c' required*/
    else
      set PK05M010.PK05MACT[PK05WSSB] normal;
    end
  end


   /* ----- if order was changed*/
   /* ----- or warehouse has just changed*/
   /* ----- get pool header row*/
   /* -----   if order header record was found*/
   /* -----   and carrier was not entered*/
   /* -----     get carrier description using carrier code*/
   /* -----     from the order.*/

  if (PK05M010.XWHCD is modified              /* warehouse*/
   || PK05M010.PK1CUOID[PK05WSSB] is modified /* order number*/
   || PK05M010.PK1NORID[PK05WSSB] is modified)
    if (PK05M010.PK1CUOID[PK05WSSB] > 0)
      PK05134(); /* get order*/
      if (SQLCA.VAGen_SQLCODE == 0) /* found*/
         /* note if customer is not found,*/
         /* the sqlcode will be set to zero*/
         /* by pk05138*/
        PK05138(); /* get customer*/
        if (PK05M010.TF1CARCD[PK05WSSB] <= " ") /* no carrier cd on map*/
          if (PK05M010.PK05MDCC > " ") /* default carrier on top of map?*/
            PK05M010.TF1CARCD[PK05WSSB] = PK05M010.PK05MDCC;
          else
            PK05M010.TF1CARCD[PK05WSSB] = PK4REC.TF1CARCD;
          end
          if (PK05M010.TF1CARCD[PK05WSSB] > " ")
            PK05136(); /* get carrier*/
          else
            PK05M010.TF1ABRV[PK05WSSB] = " ";
          end
        end
      end
    end
  end


   /* -----   if carrier on map matches pool carrier*/
   /* -----     it's an error*/

  if (PK05M010.PK05MACT[PK05WSSB] == "C") /* change requested*/
    if (PK05M010.PK1CUOID[PK05WSSB] > 0 /* order nbr entered*/
     && PK05M010.TF1CARCD[PK05WSSB] == PK05W01.TF1CARCD[PK05WSSB]
     && PK05M010.PK05MDCC <= " ")      
      /* AND PK4REC.PK4CARSP EQ '20';*/
       /* since this edit is done after the above*/
       /* it is necessary to suppress the error message*/
       /* if a previous error has occured*/
      if (converseVar.validationMsgNum == 0)
        converseLib.validationFailed(97); /* carrier not changd from orig. value*/
      end
      set PK05M010.TF1CARCD[PK05WSSB] cursor, modified, bold;
    end
  end


   /* ----- order number is required if action is 's'*/

  if (PK05M010.PK05MACT[PK05WSSB] == "S")
    if (PK05M010.PK1CUOID[PK05WSSB] > 0
     && PK05M010.PK1NORID[PK05WSSB] not modified)
       /* next sentence*/
    else
      set PK05M010.PK1CUOID[PK05WSSB] cursor, bold;
      set PK05M010.PK1NORID[PK05WSSB] bold;
      converseLib.validationFailed(026); /* customer order invalid*/
    end
  end


   /* ----- validate line item action field*/

  if (PK05M010.PK05MACT[PK05WSSB] == " "
   || PK05M010.PK05MACT[PK05WSSB] == "C"
   || PK05M010.PK05MACT[PK05WSSB] == "S")
     /* next sentence*/
  else
    if (PK05M010.PK05MACT[PK05WSSB] == "V")
      if (PK05M010.PK1CUOID[PK05WSSB] not modified
       && PK05M010.PK1NORID[PK05WSSB] not modified)
         /* next sentence*/
      else
        PK05M010.PK05MACT[PK05WSSB] = " ";
      end
    else
      set PK05M010.PK05MACT[PK05WSSB] cursor, modified, bold;
      converseLib.validationFailed(35); /* invalid action code*/
    end
  end


   /* ----- end pk05252 -----------------------------------------*/
end // end PK05252

// edit other input
Function PK05254()
   /* ----- pk05254 edit other input ------------------------*/



   /* ----- validate default action field*/

  if (PK05M010.PK05MDFL == "Y"
   || PK05M010.PK05MDFL == "N")
    set PK05M010.PK05MDFL normal;
  else
    set PK05M010.PK05MDFL cursor, modified, bold;
    converseLib.validationFailed(235); /* invalid value - must be y or n*/
  end



   /* ----- end pk05254 -----------------------------------------*/
end // end PK05254

// edit field comb's
Function PK05256()
   /* ----- pk05256 edit field combinations ----------------*/


   /* ----- edit to see if order number has*/
   /* ----- been duplicated on the screen*/

  PK05W01.PK05WSSB = 1; /* init index*/
  while (PK05W01.PK05WSSB < PK05W01.PK05WSCM) /* not max*/
    if (PK05M010.PK1CUOID[PK05WSSB] > 0) /* order entered*/
      sysVar.arrayIndex = PK05W01.PK05WSSB + 1; /* init index*/
      while (sysVar.arrayIndex <= PK05W01.PK05WSCM) /* not max*/
        if (PK05M010.PK1CUOID[sysVar.arrayIndex] > 0) /* order entered*/
          if (PK05M010.PK1CUOID[PK05WSSB] == PK05M010.PK1CUOID[sysVar.arrayIndex]
           && PK05M010.PK1NORID[PK05WSSB] == PK05M010.PK1NORID[sysVar.arrayIndex])
            set PK05M010.PK1CUOID[sysVar.arrayIndex] cursor, bold;
            set PK05M010.PK1NORID[sysVar.arrayIndex] bold;
            converseLib.validationFailed(248); /* order already specified on screen*/
          end
        end
        sysVar.arrayIndex = sysVar.arrayIndex + 1; /* increm index*/
      end
    end
    PK05W01.PK05WSSB = PK05W01.PK05WSSB + 1; /* increm index*/
  end


   /* ----- validate line item action field*/

  if ("C" in PK05M010.PK05MACT) /* update*/
    if ("S" in PK05M010.PK05MACT) /* select*/
      set PK05M010.PK05MACT[sysVar.arrayIndex] cursor, modified, bold;
      converseLib.validationFailed(232); /* invalid action code combination*/
    end
  end


   /* ----- validate line item action field vs. default*/

  if ("Y" == PK05M010.PK05MDFL) /* update*/
    if ("S" in PK05M010.PK05MACT) /* select*/
      set PK05M010.PK05MDFL modified, bold;
      set PK05M010.PK05MACT[sysVar.arrayIndex] cursor, modified, bold;
      converseLib.validationFailed(232); /* invalid action code combination*/
    end
  end


   /* ----- validate line item action field vs. carrier default*/

  if (PK05M010.PK05MDCC > " ") /* update*/
    if ("S" in PK05M010.PK05MACT) /* select*/
      set PK05M010.PK05MDCC modified, bold;
      set PK05M010.PK05MACT[sysVar.arrayIndex] cursor, modified, bold;
      converseLib.validationFailed(232); /* invalid action code combination*/
    end
  end


   /* ----- end pk05256 -----------------------------------------*/
end // end PK05256

// transfer to inquiry
Function PK05300()
   /* -----  pk05300 --------------------------------------------*/

   /* -----  transfer to order inquiry*/



  PKWREC.PKWINDEX = PKWREC.PKWINDEX + 1;



   /* -----  load order number into pkwrec*/
   /* -----  set the inquiry selection type to 'o' for order*/
   /* -----  transfer control to pk0b - order inquiry*/

  set PKYREC empty;
  PK05W01.PK05WSSB = 1; /* init index*/
  while (PK05W01.PK05WSSB <= PK05W01.PK05WSCM) /* le max*/
    PKYREC.PKYORACT[PK05WSSB] = PK05M010.PK05MACT[PK05WSSB];
    PKYREC.PK1CUOID[PK05WSSB] = PK05M010.PK1CUOID[PK05WSSB];
    PKYREC.PK1NORID[PK05WSSB] = PK05M010.PK1NORID[PK05WSSB];
    PK05W01.PK05WSSB = PK05W01.PK05WSSB + 1; /* increm index*/
  end
  PKYREC.XWHCD = PKWREC.XWHCD;
  PKYREC.XWHABRV = PKWREC.XWHABRV;
  PKWREC.PKWARRAY[PKWINDEX] = PKYREC.PKWARRAY;
  PKWREC.PKWFRMAP[PKWINDEX] = COMMAREA.CACURRAP;
  PKWREC.PKWSLTYP[PKWINDEX] = "O";
  COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
  COMMAREA.CATOAP = "PK0B";
  XSEXIT();
  PK05M010.VAGen_EZEMSG = COMMAREA.CAMSG;



   /* ------------------- end pk05300 -------------------------*/
end // end PK05300

// update pool header
Function PK05400()
   /* ----- pk05400 update pool header --------------------------*/



  PK05M010.XXXERRID = "PK05400";



      /* get the pool header row*/

  PK05134();
  if (SQLCA.VAGen_SQLCODE != 0) /* not found?*/
    return;
  end



      /* allow the clearing of specified carrier*/

  if (PK05M010.TF1CARCD[PK05WSSB] > " ")
    PK4REC.PK4CARSP = "20"; /* upd carrier specified cd*/
  else
    PK4REC.PK4CARSP = "  "; /* clear carrier specified cd*/
  end

  PK4REC.TF1CARCD = PK05M010.TF1CARCD[PK05WSSB]; /* upd carrier cd*/
  PK05W01.TF1CARCD[PK05WSSB] = PK05M010.TF1CARCD[PK05WSSB];
                                   /* save cd*/

   /* --------- Y2K OUT ----------*/
   /* MOVE 19 TO PK05W01.PK05WFCT;*/
   /* MOVE EZEDTE TO PK05W01.PK05WFDA;*/
   /* --------- Y2K OUT ----------*/

   /* --------- Y2K IN ----------*/
  PK05W01.PK05WFDT = VGVar.currentGregorianDate;
   /* --------- Y2K IN ----------*/
  PK4REC.ZZZCHGDT = PK05W01.PK05WFDT; /* change date*/
  PK05W01.PK05WTIM = VGVar.currentFormattedTime;
  PK05W01.PK05WTHH = PK05W01.PK05WHH;
  PK05W01.PK05WTMM = PK05W01.PK05WMI;
  PK4REC.ZZZCHGTM = PK05W01.PK05WTI; /* change time*/

  PWIREC.PWIFUNC = "U ";
  call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* update pool header*/
  if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
    PK05W01.PK05WFL2 = "Y"; /* update occured*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(21); /* contention for data base resorce*/
      set PK05M010.PK1CUOID[PK05WSSB] cursor, modified, bold;
      set PK05M010.PK1NORID[PK05WSSB] modified, bold;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
         /* do rollback to back out any updates to this point*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        converseLib.validationFailed(105); /* data base updated by another appl*/
        set PK05M010.PK1CUOID[PK05WSSB] cursor, modified, bold;
        set PK05M010.PK1NORID[PK05WSSB] modified, bold;
      else
         /* do rollback to back out any updates to this point*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK05400 "; /* Process name*/
        TA1REC.TA1LOC = "UPDATE                   ";
        TA1REC.TA1MAP = "PK05M010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
        TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key value*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        set PK05M010.PK1CUOID[PK05WSSB] cursor, modified, bold;
        set PK05M010.PK1NORID[PK05WSSB] modified, bold;
      end
    end
  end



   /* ----- end pk05400 -----------------------------------------*/
end // end PK05400

// update item headers
Function PK05500()
   /* ----- pk05500 update item headers ------------------------- */
   /* */
   /* pk05500's update all the items in sched/ord           */
   /* with the new carrier code.  Not commited unless       */
   /* all rows can be changed.  There can be multiple       */
   /* rows in table for an item, with xhd_hndl_cd being     */
   /* distinctive.  Any DB2 error will call for a           */
   /* rollback to keep vpoolh01 changes from commitment.    */
   /* */
   /* ----------------------------------------------------------- */


  PK05M010.XXXERRID = "PK05500";


  PK05510(); /* open item, get first item*/
  if (SQLCA.VAGen_SQLCODE != 0) /* bad cursor?*/
    return; /* PK05510 has ezerollb logic*/
  end


  while (SQLCA.VAGen_SQLCODE == 0) /* no problems and more records*/
    PWNREC.TF1CARCD = PK05M010.TF1CARCD[PK05WSSB];
                                  /* update carrier code*/
    PWNREC.ZZZCHGDT = PK4REC.ZZZCHGDT; /* change date*/
    PWNREC.ZZZCHGTM = PK4REC.ZZZCHGTM; /* change time*/
    PK05530(); /* insert changed item*/
    if (SQLCA.VAGen_SQLCODE != 0) /* update unsuccessful*/
      return; /* PK05530 has ezerollb logic*/
    else
      PK05520(); /* get next item*/
    end
  end /* out of rows, or DB2 error*/


  if (SQLCA.VAGen_SQLCODE == 100) /* no more items left*/
    PK05W01.PK05WFL2 = "Y"; /* updates occured*/
    PK05540(); /* close item cursor*/
    if (SQLCA.VAGen_SQLCODE != 0) /* error closing cursor*/
      return; /* PK05540 has ezerollb logic*/
    end
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* don't change on converse*/
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(21); /* contention for data base resorce*/
      set PK05M010.PK1CUOID[PK05WSSB] cursor, modified, bold;
      set PK05M010.PK1NORID[PK05WSSB] modified, bold;
    else
      converseLib.validationFailed(29); /* fatal error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PK05500 "; /* Process    name*/
      TA1REC.TA1LOC = "UPDATE                   ";
      TA1REC.TA1MAP = "PK05M010"; /* Map        name*/
      TA1REC.TA1DBASE = "DPICK   "; /* Data  base name*/
      TA1REC.TA1TBLVU = "VPHDIT01"; /* Table view name*/
      TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key value*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      set PK05M010.PK1CUOID[PK05WSSB] cursor, modified, bold;
      set PK05M010.PK1NORID[PK05WSSB] modified, bold;
    end
  end



   /* ----- end pk05500 -----------------------------------------*/
end // end PK05500

// select item cursor
Function PK05510()
   /* ---------------  pk05510   ---------------------------------*/

   /* ----- select item cursor and get first item*/
   /* if no items are found, rollback vpoolh01 changes*/


  PK05M010.XXXERRID = "PK05510";


  set PWIREC empty;
  set PWNREC empty;
  PWNREC.XWHCD = PK05M010.XWHCD; /* build key*/
  PWNREC.PK1CUOID = PK05M010.PK1CUOID[PK05WSSB];
  PWNREC.PK1NORID = PK05M010.PK1NORID[PK05WSSB];
  PWNREC.PK1PRTN = PK4REC.PK1PRTN;

  PWIREC.PWIFUNC = "S2";
  call "IO5490" (PWIREC, SQLCA, PWNREC) {isNoRefresh = yes, isExternal = yes};
                                  /* select item cursor*/

  if (SQLCA.VAGen_SQLCODE == 0) /* cursor opened OK*/

    set PWIREC empty;

    PWIREC.PWIFUNC = "N2"; /* read first item*/
    call "IO5490" (PWIREC, SQLCA, PWNREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0) /* item fetched*/

    else
      if (SQLCA.VAGen_SQLCODE == -911)
        set PK05M010.PK1CUOID cursor, modified, bold;
        set PK05M010.PK1NORID modified, bold;
        converseLib.validationFailed(28); /* contention for data base*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* no items*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* don't change vphoolh01*/
          set PK05M010.PK1CUOID[PK05WSSB] cursor, modified, bold;
          set PK05M010.PK1NORID[PK05WSSB] modified, bold;
          PK05M010.KUMSTRNM[PK05WSSB] = " "; /* clear name*/
          converseLib.validationFailed(11); /* no data found for order*/
        else
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* don't change vphoolh01*/
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK05510 "; /* Process name*/
          TA1REC.TA1LOC = "SELECT ITEMS             ";
          TA1REC.TA1MAP = "PK05M010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VPHDIT01"; /* Table view name*/
          TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key value*/
          COMMAREA.CAFROMAP = "PK05";
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        end /* no items found*/
      end /* data base contention*/
    end /* get first item*/

  else /* cursor opening error*/
    if (SQLCA.VAGen_SQLCODE == -911)
      set PK05M010.PK1CUOID cursor, modified, bold;
      set PK05M010.PK1NORID modified, bold;
      converseLib.validationFailed(28); /* contention for data base resource*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* no items*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* don't change vphoolh01 on converse*/
        set PK05M010.PK1CUOID[PK05WSSB] cursor, modified, bold;
        set PK05M010.PK1NORID[PK05WSSB] modified, bold;
        PK05M010.KUMSTRNM[PK05WSSB] = " "; /* clear name*/
        converseLib.validationFailed(11); /* no data found for order*/
      else
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* don't change vphoolh01 on converse*/
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK05510 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT ITEMS             ";
        TA1REC.TA1MAP = "PK05M010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VPHDIT01"; /* Table view name*/
        TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key value*/
        COMMAREA.CAFROMAP = "PK05";
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      end
    end
  end



   /* -------------  end process pk05510  --------------------*/
end // end PK05510

// get next item
Function PK05520()
   /* ---------------  pk05520   ---------------------------------*/

   /* ----- read next item cursor*/


  PK05M010.XXXERRID = "PK05520";


  set PWIREC empty;

  PWIREC.PWIFUNC = "N2"; /* read next item*/
  call "IO5490" (PWIREC, SQLCA, PWNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

  else
    if (SQLCA.VAGen_SQLCODE == -911)
      set PK05M010.PK1CUOID cursor, modified, bold;
      set PK05M010.PK1NORID modified, bold;
      converseLib.validationFailed(28); /* contention for data base resource*/
    else
      if (SQLCA.VAGen_SQLCODE != 100) /* not out of rows error*/
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK05520 "; /* Process name*/
        TA1REC.TA1LOC = "GET NEXT ROW             ";
        TA1REC.TA1MAP = "PK05M010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VPHDIT01"; /* Table view name*/
        TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key value*/
        COMMAREA.CAFROMAP = "PK05";
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      end
    end
  end



   /* -------------  end process pk05520  --------------------*/
end // end PK05520

// update item
Function PK05530()
   /* ---------------  pk05530   ---------------------------------*/

   /* ----- update item*/


  PK05M010.XXXERRID = "PK05530";


  PWIREC.PWIFUNC = "U "; /* add item*/
  call "IO5490" (PWIREC, SQLCA, PWNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* don't change vpoolh01 on converse*/
    if (SQLCA.VAGen_SQLCODE == -911)
      set PK05M010.PK1CUOID cursor, modified, bold;
      set PK05M010.PK1NORID modified, bold;
      converseLib.validationFailed(28); /* contention for data base resorce*/
    else
      converseLib.validationFailed(29); /* fatal error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PK05530 "; /* Process name*/
      TA1REC.TA1LOC = "UPDATE ITEM              ";
      TA1REC.TA1MAP = "PK05M010"; /* Map name*/
      TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPHDIT01"; /* Table view name*/
      TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key value*/
      COMMAREA.CAFROMAP = "PK05";
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    end
  end



   /* -------------  end process pk05530  --------------------*/
end // end PK05530

// close item cursor
Function PK05540()
   /* ---------------  pk05540   ---------------------------------*/

   /* ----- close item cursor*/


  PK05M010.XXXERRID = "PK05540";


  PWIREC.PWIFUNC = "C2"; /* close cursor*/
  call "IO5490" (PWIREC, SQLCA, PWNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0) /* updates unsuccessful*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* back out all changes*/
    if (SQLCA.VAGen_SQLCODE == -911)
      set PK05M010.PK1CUOID cursor, modified, bold;
      set PK05M010.PK1NORID modified, bold;
      converseLib.validationFailed(28); /* contention for data base resorce*/
    else
      converseLib.validationFailed(29); /* fatal error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PK05540 "; /* Process    name*/
      TA1REC.TA1LOC = "CLOSE ITEM CURSOR        ";
      TA1REC.TA1MAP = "PK05M010"; /* Map        name*/
      TA1REC.TA1DBASE = "DPICK   "; /* Data base  name*/
      TA1REC.TA1TBLVU = "VPHDIT01"; /* Table view name*/
      TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key value*/
      COMMAREA.CAFROMAP = "PK05";
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    end
  end

   /* -------------  end process pk05540  --------------------*/
end // end PK05540

// protect action code fields
Function PK05SA0()
   /* ------- pk05sa0 protect action code fields ----------------*/



  PK05W01.PK05WSSB = 1; /* init index*/
  while (PK05W01.PK05WSSB <= PK05W01.PK05WSCM) /* le max*/
    PK05M010.PK05MACT[PK05WSSB] = "C"; /* set change action*/
    set PK05M010.PK05MACT[PK05WSSB] skip;
    PK05W01.PK05WSSB = PK05W01.PK05WSSB + 1; /* increm index*/
  end



   /* ------- end pk05sa0 ---------------------------------------*/
end // end PK05SA0

// unprotect action code fields
Function PK05SA1()
   /* ------- pk05sa1 unprotect action code fields --------------*/



  PK05W01.PK05WSSB = 1; /* init index*/
  while (PK05W01.PK05WSSB <= PK05W01.PK05WSCM) /* le max*/
    PK05M010.PK05MACT[PK05WSSB] = " "; /* reset action*/
    set PK05M010.PK05MACT[PK05WSSB] normal;
    PK05W01.PK05WSSB = PK05W01.PK05WSSB + 1; /* increm index*/
  end



   /* ------- end pk05sa1 ---------------------------------------*/
end // end PK05SA1

Function PK05SA2()
   /* ------- pk05sa2 protect carrier code fields ----------------*/


  PK05W01.PK05WSSB = 1; /* init index*/
  while (PK05W01.PK05WSSB <= PK05W01.PK05WSCM) /* le max*/
    PK05M010.TF1CARCD[PK05WSSB] = PK05M010.PK05MDCC; /* set carrier*/
    set PK05M010.TF1CARCD[PK05WSSB] skip, modified;
    PK05W01.PK05WSSB = PK05W01.PK05WSSB + 1; /* increm index*/
  end


   /* ------- end pk05sa2 ---------------------------------------*/
end // end PK05SA2

Function PK05SA3()
   /* ------- pk05sa3 unprotect carrier code fields --------------*/


  PK05W01.PK05WSSB = 1; /* init index*/
  while (PK05W01.PK05WSSB <= PK05W01.PK05WSCM) /* le max*/
    PK05M010.TF1CARCD[PK05WSSB] = " "; /* reset carrier code*/
    PK05M010.TF1ABRV[PK05WSSB] = " "; /* reset carrier description*/
    set PK05M010.TF1CARCD[PK05WSSB] normal;
    PK05W01.PK05WSSB = PK05W01.PK05WSSB + 1; /* increm index*/
  end


   /* ------- end pk05sa1 ---------------------------------------*/
end // end PK05SA3

Record PK05W01 type basicRecord
  3 PK05WGRP PK05WGRP ; 
    5 PK05WSCM PK05WSCM ; 
    5 PK05WSSB PK05WSSB ; 
    5 PK05WS1 PK05WS1 ; 
    5 TF1CARCD TF1CARCD [12] ; 
    5 PK05WFL0 PK05WFL0 ; 
    5 PK05WFL1 PK05WFL1 ; 
    5 PK05WFL2 PK05WFL2 ; 
    5 PK05WFRM PK05WFRM ; 
    5 PK05WDT PK05WDT ; 
      10 PK05WMM PK05WMM ; 
      10 PK05WDD PK05WDD ; 
      10 PK05WYY PK05WYY ; 
    5 PK05WFDT PK05WFDT ; 
      10 PK05WFCT PK05WFCT ; 
      10 PK05WFDA PK05WFDA ; 
        15 PK05WFYY PK05WFYY ; 
        15 PK05WFMM PK05WFMM ; 
        15 PK05WFDD PK05WFDD ; 
    5 PK05WTIM PK05WTIM ; 
      10 PK05WHH PK05WHH ; 
      10 * char(1) ; 
      10 PK05WMI PK05WMI ; 
      10 * char(1) ; 
      10 PK05WSS PK05WSS ; 
    5 PK05WTI PK05WTI ; 
      10 PK05WTHH PK05WTHH ; 
      10 PK05WTMM PK05WTMM ; 
end // end PK05W01

// day
DataItem PK05WDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group date
DataItem PK05WDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem PK05WFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group yymmdd
DataItem PK05WFDA num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PK05WFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group yyyymmdd
DataItem PK05WFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converse loop flag
DataItem PK05WFL0 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// whse lookup successful flag
DataItem PK05WFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// whse chngd for order flag
DataItem PK05WFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PK05WFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 1st 3 bytes of cafromap
DataItem PK05WFRM char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PK05WFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK05WGRP char(86)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hours
DataItem PK05WHH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minutes
DataItem PK05WMI char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PK05WMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work sub1
DataItem PK05WS1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// max screen entries
DataItem PK05WSCM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// seconds
DataItem PK05WSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen sub
DataItem PK05WSSB smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// hours
DataItem PK05WTHH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// time
DataItem PK05WTI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group time
DataItem PK05WTIM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minutes
DataItem PK05WTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem PK05WYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

