package pk0x;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pk.common.*;
import sl.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PK0X ****
// This application displays Pick Planning schedules for the
// user to view and/or modify.
// 
// Upon initial entry, the Picking Plan Sequence Table is read
// and all rows for the warehouse are selected and formatted in
// temporary storage, one display page per queue record.
// 
// The records are retrieved from temporary storage one at a
// time, for display to the user.  The user may page forward
// and backward, to view the rows that were selected.
// 
// The user may change any row's sequence number to any
// available sequence number.  The data base is updated, but,
// temporary storage is not refreshed to reorder the rows.
// 
// If the Reorder Sequence Numbers Yes/No switch is "Y" or if
// warehouse code is changed, the temporary storage queue is
// deleted and the process repeats as at initial entry, above.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE     NAME              COMMENTS
// --------   ---------------   -------------------------------
// 08/21/87   Stephen Popa      New application.
// 11/29/88   JWOOD             ADDED NONCSP OPTION TO CALLS
// 11/29/88   JWOOD             ADDED XSSEGTR LOGIC
// 08/11/95   CBRINE            CANADA Added XCTCD to PKWREC
// 02/25/98   DBETTR            Y2KFIX
//                              REGENERATED TO PICK UP DATE
//                              ROUTINE.
// *********************
Program PK0X type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PK0XW01 PK0XW01; // record
  PK0XW02 PK0XW02; // record
  PKWREC PKWREC; // record
  PWAREC PWAREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TF1REC TF1REC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use PK0XM.PK0XM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Resequence Pick Schedules process.*/
     /* ------------------------------------------------------------*/

    set PK0XW01 empty; /* Initialize working storage*/
    set PK0XW02 empty; /* Initialize temporary storage*/
    set PK0XM001 initial; /* Initialize map output area*/

    PK0XW01.XWHCD = PKWREC.XWHCD; /* Initialize warehouse code*/
    PK0XW01.XWHABRV = PKWREC.XWHABRV; /* and warehouse abbreviation*/

    PK0XW01.XXXRVNBR = "00"; /* Application revision number*/

    PK0XW01.PK0XWSWR = "Y"; /* Indicate request for data*/

    goto PK0X001; /* Converse Resequence Pick Schedules*/


    PK0X001: PK0X001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Resequence Pick Schedules process.*/
     /* ------------------------------------------------------------*/

    goto PK0X001; /* Converse Resequence Pick Schedules*/


  end // end main
end // end PK0X

// Resequence Pick Schedules
Function PK0X001()
   /* ------------------------------------------------------------*/
   /* If data was requested, obtain the data to display.*/
   /* Format the map output area and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process input request if no errors found and not a cancel.*/
   /* ------------------------------------------------------------*/

  if (PK0XW01.PK0XWSWR == "Y") /* Request for data*/
    PK0X100(); /* Obtain the data to display*/
  end

  PK0X200(); /* Format and display the map*/

  PK0X300(); /* Check attention identifier*/

  PK0X400(); /* Reset fields to normal intensity*/

  PK0X500(); /* Verify the entered data*/

  if (converseVar.validationMsgNum == 0 /* No errors were found*/
   && converseVar.eventKey not pa2)     /* and not a cancel request*/
    PK0X600(); /* Process valid input request*/
  end


end // end PK0X001

// Obtain the data to display
Function PK0X100()
   /* ------------------------------------------------------------*/
   /* Purge any existing queue in temporary storage.*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  PK0X110(); /* Purge any temporary storage*/

  PK0X120(); /* Select set and open the cursor*/

  if (converseVar.validationMsgNum == 0) /* No errors were found*/

    PK0XW01.PK0XWSWC = "N"; /* Initialize end of file switch*/
    PK0XW01.PK0XWIXM = 1; /* Initialize display line number*/

    set PK0XW02 empty; /* Clear temporary storage record*/

    while (PK0XW01.PK0XWSWC == "N") /* Until cursor end of file*/

      PK0X130(); /* Obtain data and format page*/

      if (PK0XW01.PK0XWIXM > 12) /* Page is full*/
        PK0X140(); /* Add page to temporary storage*/
      end

      if (converseVar.validationMsgNum != 0) /* Errors were found*/
        PK0XW01.PK0XWSWC = "Y"; /* Force end of file*/
      end

    end

  end

  if (converseVar.validationMsgNum == 0 /* No errors were found*/
   && PK0XW01.PK0XWIXM > 1)             /* and page was formatted*/
    PK0X140(); /* Add page to temporary storage*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    PK0X150(); /* Close the selected set cursor*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors were found*/

    PK0XW01.PK0XWTSP = 1; /* Initialize page number*/
    PK0XW01.PK0XWSWR = "N"; /* Request for data completed*/

  end


end // end PK0X100

// Purge any temporary storage
Function PK0X110()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PK0X"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (PK0XW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0X110"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PK0XM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  PK0XW01.PK0XWTSP = 0; /* Reset current page number*/
  PK0XW01.TA5TSQIX = 0; /* Reset highest page number*/


end // end PK0X110

// Select set and open cursor
Function PK0X120()
   /* ------------------------------------------------------------*/
   /* Select the set of plan sequence rows for the warehouse.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  PWAREC.XWHCD = PK0XW01.XWHCD; /* Warehouse code*/

  call "IO1980" ("S1", SQLCA, PWAREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0X120"; /* Process name*/
    TA1REC.TA1LOC = "SELECT PLAN SEQUENCE TABLE SET";
    TA1REC.TA1MAP = "PK0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPLNSQ01"; /* Table view name*/
    TA1REC.TA1TBLKE = PWAREC.XWHCD; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0XM001.XXXPRCNM = "PK0X120"; /* Process name*/

    return; /* Return to previous process*/

  end


end // end PK0X120

// Fetch next row and format
Function PK0X130()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected plan sequence set.*/
   /* If end of file, set plan sequence eof switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  call "IO1980" ("N1", SQLCA, PWAREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

    PK0XW01.PK0XWSWC = "Y"; /* Indicate end of file*/

    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PK0X130"; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT PLAN SEQUENCE ROW";
    TA1REC.TA1MAP = "PK0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPLNSQ01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0XM001.XXXPRCNM = "PK0X130"; /* Process name*/
    converseLib.validationFailed(29); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end

  if (PWAREC.TF1CARCD > " ")
    PK0X131(); /* Obtain carrier abbreviation*/
  else
    TF1REC.TF1ABRV = " ";
  end

  PK0XW02.PWAPLNSQ[PK0XWIXM] = PWAREC.PWAPLNSQ; /* Plan sequence*/
  PK0XW02.PKHSCHED[PK0XWIXM] = PWAREC.PKHSCHED; /* Build schedule*/
  PK0XW02.TF1CARCD[PK0XWIXM] = PWAREC.TF1CARCD; /* Carrier code*/
  PK0XW02.TF1ABRV[PK0XWIXM] = TF1REC.TF1ABRV; /* Carrier abbreviation*/
  PK0XW02.TF1FCARF[PK0XWIXM] = PWAREC.TF1FCARF; /* Freight indicator*/
  PK0XW02.PWACARUN[PK0XWIXM] = PWAREC.PWACARUN; /* Plan units*/
  PK0XW02.OP1DSBDT[PK0XWIXM] = PWAREC.OP1DSBDT; /* Don't ship before*/

  PK0XW01.PK0XWIXM = PK0XW01.PK0XWIXM + 1; /* Increment line index*/


end // end PK0X130

// Obtain carrier abbreviation
Function PK0X131()
   /* ------------------------------------------------------------*/
   /* Obtain the Picking Carrier Table row for the specified*/
   /* carrier code.  If not available, return an error message*/
   /* to the user.  If any other error, indicate a system error.*/
   /* Format the carrier name field in the map.*/
   /* ------------------------------------------------------------*/

  TF1REC.TF1CARCD = PWAREC.TF1CARCD; /* Carrier code*/

  call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0X131"; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN CARRIER TABLE ROW";
    TA1REC.TA1MAP = "PK0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCARR001"; /* Table view name*/
    TA1REC.TA1TBLKE = TF1REC.TF1KEYS; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0XM001.XXXPRCNM = "PK0X131"; /* Process name*/

    return; /* Return to previous process*/

  end


end // end PK0X131

// Add page to temporary storage
Function PK0X140()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PK0XW02.PK0XWLEN = 372; /* Temporary storage length*/
  TA5REC.TA5APPID = "PK0X"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (PK0XW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PK0X140"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PK0XM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0XM001.XXXPRCNM = "PK0X140"; /* Process name*/
    converseLib.validationFailed(29); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end

  PK0XW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

  PK0XW01.PK0XWIXM = 1; /* Reset display line number*/

  set PK0XW02 empty; /* Clear temporary storage record*/


end // end PK0X140

// Close selected set cursor
Function PK0X150()
   /* ------------------------------------------------------------*/
   /* Close the selected plan sequence table set.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "IO1980" ("C1", SQLCA, PWAREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PK0X150"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE PLAN SEQUENCE TABLE SET";
    TA1REC.TA1MAP = "PK0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPLNSQ01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0XM001.XXXPRCNM = "PK0X150"; /* Process name*/
    converseLib.validationFailed(29); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end


end // end PK0X150

// Format and display the map
Function PK0X200()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set PK0XM001 alarm; /* Indicate sound alarm*/
  end

  if (converseVar.validationMsgNum == 0 /* No error message to display*/
   || PK0XM001.XXXRVNBR == " ")         /* or first time through*/

    if (PK0XM001.XXXRVNBR == " ") /* First time through*/

      if (COMMAREA.CAITEM > " ") /* Application data exists*/

        PK0XM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
        set PK0XM001.CAITEM modified; /* Set MDT on*/
        COMMAREA.CAITEM = " "; /* Clear application data*/

      end

    else

      set PK0XM001 initial; /* Clear map output area*/

    end

    PK0XM001.XXXRVNBR = PK0XW01.XXXRVNBR; /* Revision number*/

    PK0XM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    PK0XM001.XWHCD = PK0XW01.XWHCD; /* Warehouse code*/
    PK0XM001.XWHABRV = PK0XW01.XWHABRV; /* Warehouse abbreviation*/

    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      PK0X210(); /* Format the data on the page*/
    end

    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (PK0XW01.PK0XWMNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PK0XW01.PK0XWMNO);
      end /* Information message number*/
    end

  end

  if (PKWREC.XWHABRV == " ") /* Warehouse missing or invalid*/

    set PK0XM001.XWHCD cursor, modified, bold; /* Highlight warehouse*/
    PK0XM001.XWHABRV = " "; /* Clear warehouse abbreviation*/
    PK0XM001.XXXPRCNM = "PK0X200"; /* Process name*/

  end

  PK0XW01.PK0XWMNO = 0; /* Reset information message number*/

  converse PK0XM001 ;


end // end PK0X200

// Format plan sequence data
Function PK0X210()
   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the plan sequence data in the map.*/
   /* ------------------------------------------------------------*/

  if (PK0XW01.TA5TSQIX == 0) /* No orders to display*/

    set PK0XM001.XWHCD cursor; /* Position cursor on warehouse*/
    PK0XM001.XXXPRCNM = "PK0X210"; /* Process name*/
    converseLib.validationFailed(159); /* Indicate no schedules to display*/

    return; /* Return to previous process*/

  end

  PK0XW01.PK0XWSWT = "N"; /* Initialize page found switch*/

  while (PK0XW01.PK0XWSWT == "N") /* Until page is found*/
    PK0X211(); /* Obtain temporary storage page*/
    PK0X212(); /* Check for starting sequence*/
  end

  if (PK0XW01.PK0XWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/
    PK0X211(); /* Obtain temporary storage page*/
  end

  set PK0XMPGL skip; /* Display "PAGE" literal*/
  set PK0XMOFL skip; /* Display "OF" literal*/

  PK0XM001.PK0XWTSP = PK0XW01.PK0XWTSP; /* Current page number*/
  PK0XM001.TA5TSQIX = PK0XW01.TA5TSQIX; /* Highest page number*/

  PK0XW01.PK0XWIXM = 1; /* Initialize map index*/

  while (PK0XW01.PK0XWIXM <= 12 /* Until end of array*/
   && PK0XW02.PWAPLNSQ[PK0XWIXM] != 0) /* or all lines are formatted*/
    PK0X213(); /* Format schedule display line*/
  end


end // end PK0X210

// Read temporary storage page
Function PK0X211()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PK0XW02.PK0XWLEN = 372; /* Temporary storage length*/
  TA5REC.TA5APPID = "PK0X"; /* Application identification*/
  TA5REC.TA5TSQIX = PK0XW01.PK0XWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (PK0XW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PK0X211"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PK0XM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0XM001.XXXPRCNM = "PK0X211"; /* Process name*/
    converseLib.validationFailed(29); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0X211

// Check starting sequence number
Function PK0X212()
   /* ------------------------------------------------------------*/
   /* Determine whether the starting sequence is on this page.*/
   /* ------------------------------------------------------------*/

  if (PK0XW01.PK0XMSEQ == 0) /* No starting sequence*/

    PK0XW01.PK0XWSWT = "Y"; /* Indicate page was found*/
    return; /* Return to previous process*/

  end

  PK0XW01.PK0XWIXM = 1; /* Initialize array index*/

  while (PK0XW01.PK0XWIXM <= 12) /* Until end of array*/

    if (PK0XW02.PWAPLNSQ[PK0XWIXM] == 0 /* No more sequence numbers*/
     || PK0XW02.PWAPLNSQ[PK0XWIXM] > PK0XW01.PK0XMSEQ)

      PK0XW01.PK0XWIXM = PK0XW01.PK0XWIXM - 1; /* Decrement index*/

      if (PK0XW01.PK0XWIXM <= 0) /* Sequence number not on page*/

        if (PK0XW01.PK0XWTSP == 1) /* First page*/

          PK0XW01.PK0XWIXM = 1; /* Set index to first entry*/
        else
          PK0XW01.PK0XWIXM = 12; /* Set index to last entry*/
          PK0XW01.PK0XWTSP = PK0XW01.PK0XWTSP - 1; /* Decrement page*/

        end

      end

      set PK0XM001.PWAPLNSQ[PK0XWIXM] cursor; /* Initial cursor*/
      PK0XW01.PK0XWSWT = "Y"; /* Indicate page was found*/
      PK0XW01.PK0XMSEQ = 0; /* Reset starting sequence*/

      return; /* Return to previous process*/

    end

    PK0XW01.PK0XWIXM = PK0XW01.PK0XWIXM + 1; /* Increment index*/

  end

  if (PK0XW01.PK0XWTSP == PK0XW01.TA5TSQIX) /* Last page*/

    PK0XW01.PK0XWIXM = 12; /* Set index to last entry*/
    set PK0XM001.PWAPLNSQ[PK0XWIXM] cursor; /* Initial cursor*/
    PK0XW01.PK0XWSWT = "Y"; /* Indicate page was found*/
    PK0XW01.PK0XMSEQ = 0; /* Reset starting sequence*/

  else

    PK0XW01.PK0XWTSP = PK0XW01.PK0XWTSP + 1; /* Increment page*/

  end


end // end PK0X212

// Format plan sequence line
Function PK0X213()
   /* ------------------------------------------------------------*/
   /* Format the fields from the temporary storage record line to*/
   /* the output display line.*/
   /* ------------------------------------------------------------*/

  set PK0XM001.PWAPLNSQ[PK0XWIXM] normal; /* Allow access to field*/

  PK0XM001.PWAPLNSQ[PK0XWIXM] = PK0XW02.PWAPLNSQ[PK0XWIXM];
  PK0XM001.PKHSCHED[PK0XWIXM] = PK0XW02.PKHSCHED[PK0XWIXM];
  PK0XM001.TF1CARCD[PK0XWIXM] = PK0XW02.TF1CARCD[PK0XWIXM];
  PK0XM001.TF1ABRV[PK0XWIXM] = PK0XW02.TF1ABRV[PK0XWIXM];
  PK0XM001.TF1FCARF[PK0XWIXM] = PK0XW02.TF1FCARF[PK0XWIXM];
  PK0XM001.PWACARUN[PK0XWIXM] = PK0XW02.PWACARUN[PK0XWIXM];

  if (PK0XW02.OP1DSBDT[PK0XWIXM] != 0) /* Don't ship before exists*/
    PK0XM001.OP1DSBDT[PK0XWIXM] = PK0XW02.OP1DSBDT[PK0XWIXM];
  end

  PK0XW01.PK0XWIXM = PK0XW01.PK0XWIXM + 1; /* Increment line index*/


end // end PK0X213

// Check attention identifier
Function PK0X300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PK0XM001 initial; /* Clear map storage area*/

    PKWREC.XWHCD = PK0XW01.XWHCD; /* Restore warehouse code*/
    PKWREC.XWHABRV = PK0XW01.XWHABRV; /* and warehouse abbreviation*/

    return; /* Return to previous process*/

  end

  if (PK0XM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PK0X310(); /* Execute FAST PATH request*/

    else

      set PK0XM001.CATOAP cursor, modified, bold; /* Highlight application*/
      converseLib.validationFailed(13); /* Indicate PF key not valid*/
      PK0XM001.XXXPRCNM = "PK0X300"; /* Process name*/

      exit stack; /* Exit to redisplay map*/

    end

  end

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf19 /* or PF19 was pressed*/
   || converseVar.eventKey is pf20) /* or PF20 was pressed*/

    PK0X110(); /* Purge any temporary storage*/

  end

  if (converseVar.eventKey is pf3  /* PF3 was pressed*/
   || converseVar.eventKey is pf19 /* or PF19 was pressed*/
   || converseVar.eventKey is pf20) /* or PF20 was pressed*/

    PK0X320(); /* Exit to another application*/

  end

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/

    XSPF1(); /* Exit to the HELP facility*/

    PK0XM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    PK0XM001.XXXPRCNM = "PK0X300"; /* Process name*/
    converseLib.validationFailed(); /* Force alarm to sound*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/

    XSPF4(); /* Exit to system main menu*/

    PK0XM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    PK0XM001.XXXPRCNM = "PK0X300"; /* Process name*/
    converseLib.validationFailed(); /* Force alarm to sound*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf12) /* and PF12 was not pressed*/

    PK0XM001.XXXPRCNM = "PK0X300"; /* Process name*/
    converseLib.validationFailed(12); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0X300

// Execute FAST PATH request
Function PK0X310()
   /* ------------------------------------------------------------*/
   /* Transfer to requested application via FAST PATH.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (PK0XM001.CATOAP == COMMAREA.CACURRAP)
                                   /* TO application same as current*/

    set PK0XM001.CATOAP cursor, modified, bold; /* Highlight TO application*/
    converseLib.validationFailed(1); /* Indicate invalid request*/
    PK0XM001.XXXPRCNM = "PK0X310"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  PKWREC.XWHCD = PK0XM001.XWHCD; /* Save warehouse code*/

  COMMAREA.CATOAP = PK0XM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PK0XM001.CAITEM; /* Application data*/

  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* Application user area*/

  XSEXIT(); /* Transfer to requested application*/

  set PK0XM001.CATOAP cursor, modified, bold; /* Highlight to application*/

  PK0XM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
  converseLib.validationFailed(); /* Force alarm to sound*/
  PK0XM001.XXXPRCNM = "PK0X310"; /* Process name*/

  COMMAREA.CATOAP = " "; /* Clear TO application*/
  COMMAREA.CAITEM = " "; /* and application data*/

  exit stack; /* Exit to redisplay map*/


end // end PK0X310

// Exit to another application
Function PK0X320()
   /* ------------------------------------------------------------*/
   /* Set the "TO" application according to the PF key pressed.*/
   /* If warehouse code was modified, save in common work area.*/
   /* Transfer to the application.  Display any returned error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CATOAP = "PK0A"; /* PICKING Master Menu*/
  end

  if (converseVar.eventKey is pf19) /* PF19 was pressed*/
    COMMAREA.CATOAP = "PK0S"; /* PICK PLANNING Menu*/
  end

  if (converseVar.eventKey is pf20) /* PF20 was pressed*/
    COMMAREA.CATOAP = "PK07"; /* PICK SELECTION Menu*/
  end

  PKWREC.XWHCD = PK0XM001.XWHCD; /* Save warehouse code*/

  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* COMMAREA user area*/

  XSEXIT(); /* Invoke selected application*/

  PK0XM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
  converseLib.validationFailed(); /* Force alarm to sound*/
  PK0XM001.XXXPRCNM = "PK0X320"; /* Process name*/

  exit stack; /* Exit to redisplay map*/


end // end PK0X320

// Reset highlighted fields
Function PK0X400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0XM001.XWHCD initialAttributes; /* Warehouse code*/
  set PK0XM001.PK0XMSEQ initialAttributes; /* Starting sequence number*/
  set PK0XM001.PK0XMORD initialAttributes; /* Reorder sequence numbers*/

  PK0XW01.PK0XWIXM = 1; /* Initialize index*/

  while (PK0XW01.PK0XWIXM <= 12) /* Until end of array*/

    if (PK0XM001.PWAPLNSQ[PK0XWIXM] != 0) /* Schedule line formatted*/
      set PK0XM001.PWAPLNSQ[PK0XWIXM] normal; /* Reset schedule sequence*/
    end

    PK0XW01.PK0XWIXM = PK0XW01.PK0XWIXM + 1; /* Increment line index*/

  end

  set PK0XM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PK0XM001.CAITEM initialAttributes; /* Commarea application data*/


end // end PK0X400

// Verify the entered data
Function PK0X500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Verify any changed schedule sequence numbers.*/
   /* If warehouse code was modified, ensure that no sequence*/
   /* numbers were changed.*/
   /* Verify the reorder sequence numbers switch.*/
   /* Save and verify warehouse code.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* If an edit request, indicate data was edited.*/
   /* ------------------------------------------------------------*/

  if (PK0XM001.CAITEM > " ") /* Application data was entered*/

    set PK0XM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/
    PK0XM001.XXXPRCNM = "PK0X500"; /* Process name*/

  end

  if (converseVar.eventKey not pa2) /* Not a cancel request*/

    PK0XW01.PK0XWIXM = 12; /* Initialize map line index*/

    while (PK0XW01.PK0XWIXM > 0) /* Until end of array*/

      if (PK0XM001.XWHCD == PK0XW01.XWHCD) /* Warehouse was not changed*/

        PK0X510(); /* Verify changed sequence number*/

      else

        PK0X520(); /* See if any sequences were changed*/

      end

      PK0XW01.PK0XWIXM = PK0XW01.PK0XWIXM - 1; /* Decrement line number*/

    end

    if (PK0XM001.PK0XMORD != "N" /* Reorder not no*/
     && PK0XM001.PK0XMORD != "Y") /* and not yes*/

      set PK0XM001.PK0XMORD cursor, modified, bold; /* Highlight data*/
      converseLib.validationFailed(175); /* Reorder missing or invalid*/
      PK0XM001.XXXPRCNM = "PK0X500"; /* Process name*/

    end

    PKWREC.XWHCD = PK0XM001.XWHCD; /* Warehouse code*/

  end

  XPPK002(); /* Verify warehouse code*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PK0X530(); /* Verify scroll request*/

  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf12) /* Edit request*/

    PK0XM001.XXXPRCNM = "PK0X500"; /* Process name*/
    converseLib.validationFailed(160); /* Indicate data was edited*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0X500

// Verify changed sequence number
Function PK0X510()
   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify that the sequence number is within allowable limit.*/
   /* Verify that the sequence number is not a duplicate.*/
   /* ------------------------------------------------------------*/

  PK0XW01.PK0XWSWE = "N"; /* Initialize error switch*/

  if (PK0XM001.PWAPLNSQ[PK0XWIXM] == PK0XW02.PWAPLNSQ[PK0XWIXM])

    return; /* Return to previous process*/

  end

  if (PK0XM001.PWAPLNSQ[PK0XWIXM] <= 0 /* Not greater than 0*/
   || PK0XM001.PWAPLNSQ[PK0XWIXM] > 89999) /* or greater than 89999*/

    PK0XW01.PK0XWSWE = "Y"; /* Indicate error found*/

    set PK0XM001.PWAPLNSQ[PK0XWIXM] cursor, modified, bold; /* Highlight*/
    PK0XM001.XXXPRCNM = "PK0X510"; /* Process name*/
    converseLib.validationFailed(141); /* Indicate missing or invalid*/

  end

  PK0XW01.PK0XWIX2 = PK0XW01.PK0XWIXM - 1; /* Initialize index*/

  while (PK0XW01.PK0XWIX2 > 0) /* Until all lines checked*/

    if (PK0XM001.PWAPLNSQ[PK0XWIX2] == PK0XM001.PWAPLNSQ[PK0XWIXM])

      PK0XW01.PK0XWSWE = "Y"; /* Indicate error found*/

      set PK0XM001.PWAPLNSQ[PK0XWIXM] cursor, modified, bold;
      PK0XM001.XXXPRCNM = "PK0X510"; /* Process name*/
      converseLib.validationFailed(161); /* Indicate duplicate sequence*/

    end

    PK0XW01.PK0XWIX2 = PK0XW01.PK0XWIX2 - 1; /* Decrement index*/

  end

  if (PK0XW01.PK0XWSWE == "N") /* No error was found*/

    PK0X511(); /* Verify sequence not in table*/

  end


end // end PK0X510

// Verify sequence not in table
Function PK0X511()
   /* ------------------------------------------------------------*/
   /* Verify that no table row exists for the sequence number.*/
   /* If not found, sequence number is valid.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  PWAREC.XWHCD = PK0XW01.XWHCD; /* Warehouse code*/
  PWAREC.PWAPLNSQ = PK0XM001.PWAPLNSQ[PK0XWIXM]; /* Sequence*/

  call "IO1980" ("S ", SQLCA, PWAREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 100) /* Not row was not found*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Table row was found*/

      PK0XW01.PK0XWSWE = "Y"; /* Indicate error found*/

      set PK0XM001.PWAPLNSQ[PK0XWIXM] cursor, modified, bold; /* Highlight*/
      PK0XM001.XXXPRCNM = "PK0X511"; /* Process name*/
      converseLib.validationFailed(161); /* Indicate duplicate sequence*/

    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

        converseLib.validationFailed(28); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/

      else

        converseLib.validationFailed(29); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/

        converseLib.clearScreen();
         /* Clear screen before redisplay*/

      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PK0X511"; /* Process name*/
      TA1REC.TA1LOC = "SELECT ROW BY SEQUENCE NUMBER";
      TA1REC.TA1MAP = "PK0XM001"; /* Map name*/
      TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPLNSQ01"; /* Table view name*/
      TA1REC.TA1TBLKE = PWAREC.PWAKEY; /* Table key*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      PK0XM001.XXXPRCNM = "PK0X511"; /* Process name*/

      exit stack; /* Exit to redisplay map*/

    end

  end


end // end PK0X511

// Highlight any changed sequence
Function PK0X520()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the sequence number was changed.*/
   /* ------------------------------------------------------------*/

  if (PK0XM001.PWAPLNSQ[PK0XWIXM] != PK0XW02.PWAPLNSQ[PK0XWIXM])

    set PK0XM001.PWAPLNSQ[PK0XWIXM] cursor, modified, bold; /* Highlight*/
    PK0XM001.XXXPRCNM = "PK0X520"; /* Process name*/
    converseLib.validationFailed(162); /* Modifications not allowed*/

  end


end // end PK0X520

// Verify scroll request
Function PK0X530()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PK0XW01.PK0XWTSP < 2)       /* and no previous pages*/

    PK0XM001.XXXPRCNM = "PK0X530"; /* Process name*/
    converseLib.validationFailed(37); /* No previous page to display*/

  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PK0XW01.PK0XWTSP >= PK0XW01.TA5TSQIX) /* and no more pages*/

    PK0XM001.XXXPRCNM = "PK0X530"; /* Process name*/
    converseLib.validationFailed(38); /* No more pages to display*/

  end

  PK0XW01.PK0XWIXM = 12; /* Initialize map line index*/

  while (PK0XW01.PK0XWIXM > 0) /* Until end of array*/

    if (PK0XM001.PWAPLNSQ[PK0XWIXM] != PK0XW02.PWAPLNSQ[PK0XWIXM])

      set PK0XM001.PWAPLNSQ[PK0XWIXM] cursor, modified, bold; /* Highlight*/
      PK0XM001.XXXPRCNM = "PK0X530"; /* Process name*/
      converseLib.validationFailed(39); /* Modifications not allowed*/

    end

    PK0XW01.PK0XWIXM = PK0XW01.PK0XWIXM - 1; /* Decrement line number*/

  end

  if (PK0XM001.PK0XMORD == "Y") /* Reorder sequence numbers entered*/

    set PK0XM001.PK0XMORD cursor, modified, bold; /* Highlight*/
    PK0XM001.XXXPRCNM = "PK0X530"; /* Process name*/
    converseLib.validationFailed(39); /* Modifications not allowed*/

  end

  if (PK0XM001.PK0XMSEQ != 0) /* Starting sequence number entered*/

    set PK0XM001.PK0XMSEQ cursor, modified, bold; /* Highlight*/
    PK0XM001.XXXPRCNM = "PK0X530"; /* Process name*/
    converseLib.validationFailed(39); /* Modifications not allowed*/

  end

  if (PK0XM001.XWHCD != PK0XW01.XWHCD) /* Warehouse was changed*/

    set PK0XM001.XWHCD cursor, modified, bold; /* Highlight*/
    PK0XM001.XXXPRCNM = "PK0X530"; /* Process name*/
    converseLib.validationFailed(39); /* Modifications not allowed*/

  end


end // end PK0X530

// Process valid input request
Function PK0X600()
   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Save any of the data that was changed in temporary storage.*/
   /* If warehouse code changed, purge all temporary storage and*/
   /* indicate that the new warehouse is to be displayed.*/
   /* Otherwise, update any changed sequence numbers.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PK0XW01.PK0XWTSP = PK0XW01.PK0XWTSP - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PK0XW01.PK0XWTSP = PK0XW01.PK0XWTSP + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

  if (PK0XM001.XWHCD == PK0XW01.XWHCD) /* Warehouse code not changed*/

    PK0X610(); /* Update any changed data*/

    if (PK0XM001.PK0XMORD == "Y") /* Reorder sequence requested*/
      PK0XW01.PK0XWSWR = "Y"; /* Indicate request for data*/
    end

  else

    PK0XW01.XWHCD = PKWREC.XWHCD; /* Save warehouse code*/
    PK0XW01.XWHABRV = PKWREC.XWHABRV; /* and abbreviation*/

    PK0XW01.PK0XWSWR = "Y"; /* Indicate request for data*/

  end

  if (PK0XM001.PK0XMSEQ > 0) /* Starting sequence entered*/

    PK0XW01.PK0XMSEQ = PK0XM001.PK0XMSEQ; /* Starting sequence*/
    PK0XW01.PK0XWTSP = 1; /* Reset current page number*/

  end


end // end PK0X600

// Update plan sequence table
Function PK0X610()
   /* ------------------------------------------------------------*/
   /* Update the plan sequence table rows with changed sequences.*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  PK0XW01.PK0XWSWT = "N"; /* Initialize page update switch*/
  PK0XW01.PK0XWIXM = 1; /* Initialize line index*/

  while (PK0XW01.PK0XWIXM <= 12) /* Until end of array*/

    if (PK0XM001.PWAPLNSQ[PK0XWIXM] != PK0XW02.PWAPLNSQ[PK0XWIXM])

      PK0X611(); /* Select old sequence table row*/

      PK0X612(); /* Delete old sequence table row*/

      PK0X613(); /* Insert new sequence table row*/

      PK0XW02.PWAPLNSQ[PK0XWIXM] = PK0XM001.PWAPLNSQ[PK0XWIXM];

      PK0XW01.PK0XWSWT = "Y"; /* Indicate update page*/
      PK0XW01.PK0XWMNO = 32; /* Indicate table was updated*/

    end

    PK0XW01.PK0XWIXM = PK0XW01.PK0XWIXM + 1; /* Increment map index*/

  end

  if (PK0XW01.PK0XWSWT == "Y") /* Change made to current page*/
    PK0X614(); /* Update temporary storage page*/
  end


end // end PK0X610

// Select plan sequence row
Function PK0X611()
   /* ------------------------------------------------------------*/
   /* Obtain the specified plan sequence table row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  PWAREC.XWHCD = PK0XW01.XWHCD; /* Warehouse*/
  PWAREC.PWAPLNSQ = PK0XW02.PWAPLNSQ[PK0XWIXM]; /* Old sequence*/

  call "IO1980" ("S ", SQLCA, PWAREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    move SQLCA to ERRSQLCA withV60Compat; /* SQL communication area*/

    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* Rollback any changes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0X611"; /* Process name*/
    TA1REC.TA1LOC = "SELECT ROW BY SEQUENCE NUMBER";
    TA1REC.TA1MAP = "PK0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPLNSQ01"; /* Table view name*/
    TA1REC.TA1TBLKE = PWAREC.PWAKEY; /* Table key*/

    call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0XM001.XXXPRCNM = "PK0X611"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0X611

// Delete plan sequence row
Function PK0X612()
   /* ------------------------------------------------------------*/
   /* Delete the plan sequence table row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  call "IO1980" ("D ", SQLCA, PWAREC) {isNoRefresh = yes, isExternal = yes}; /* Delete table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    move SQLCA to ERRSQLCA withV60Compat; /* SQL communication area*/

    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* Rollback any changes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0X612"; /* Process name*/
    TA1REC.TA1LOC = "DELETE ROW BY SEQUENCE NUMBER";
    TA1REC.TA1MAP = "PK0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPLNSQ01"; /* Table view name*/
    TA1REC.TA1TBLKE = PWAREC.PWAKEY; /* Table key*/

    call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0XM001.XXXPRCNM = "PK0X612"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0X612

// Insert plan sequence row
Function PK0X613()
   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* Change and insert the specified plan sequence table row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain current date and time*/

  PWAREC.PWAPLNSQ = PK0XM001.PWAPLNSQ[PK0XWIXM]; /* New sequence*/
  PWAREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  PWAREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  PWAREC.ZZZCHGCT = PWAREC.ZZZCHGCT + 1; /* Change count*/

  call "IO1980" ("A ", SQLCA, PWAREC) {isNoRefresh = yes, isExternal = yes}; /* Add table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    move SQLCA to ERRSQLCA withV60Compat; /* SQL communication area*/

    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* Rollback any changes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0X613"; /* Process name*/
    TA1REC.TA1LOC = "INSERT ROW BY SEQUENCE NUMBER";
    TA1REC.TA1MAP = "PK0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPLNSQ01"; /* Table view name*/
    TA1REC.TA1TBLKE = PWAREC.PWAKEY; /* Table key*/

    call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0XM001.XXXPRCNM = "PK0X613"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0X613

// Update temporary storage page
Function PK0X614()
   /* ------------------------------------------------------------*/
   /* Update the page of orders in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Update page in temporary storage*/

  call "TA0050" (PK0XW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PK0X614"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PK0XM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0XM001.XXXPRCNM = "PK0X614"; /* Process name*/
    converseLib.validationFailed(29); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end


end // end PK0X614

//*** RECORD=PK0XW01 ****
// Working storage for PK0X - Resequence Pick Schedules
// ***********************
Record PK0XW01 type basicRecord
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 XXXRVNBR XXXRVNBR ; 
  10 PK0XMSEQ PK0XMSEQ ; 
  10 PK0XWMNO PK0XWMNO ; 
  10 PK0XWIXM PK0XWIXM ; 
  10 PK0XWIX2 PK0XWIX2 ; 
  10 PK0XWSWC PK0XWSWC ; 
  10 PK0XWSWE PK0XWSWE ; 
  10 PK0XWSWR PK0XWSWR ; 
  10 PK0XWSWT PK0XWSWT ; 
  10 PK0XWTSP PK0XWTSP ; 
  10 TA5TSQIX TA5TSQIX ; 
end // end PK0XW01

//*** RECORD=PK0XW02 ****
// Temporary storage record for PK0X - Resequence Pick Tickets
// ***********************
Record PK0XW02 type basicRecord
  10 PK0XWLEN PK0XWLEN ; 
  10 PWAPLNSQ PWAPLNSQ [12] ; 
  10 PKHSCHED PKHSCHED [12] ; 
  10 TF1CARCD TF1CARCD [12] ; 
  10 TF1ABRV TF1ABRV [12] ; 
  10 TF1FCARF TF1FCARF [12] ; 
  10 PWACARUN PWACARUN [12] ; 
  10 OP1DSBDT OP1DSBDT [12] ; 
end // end PK0XW02

//*** RECORD=PWAREC ****
// *************** PICKING PLAN SEQUENCE TABLE ****************
// 
// DB2 TABLE VIEW:      DPICK.VPLNSQ01
// 
// COPYLIB MEMBER:      DCL00319
// 
// I/O MODULE:          IO1980
// 
// KEY TO DB2 TABLE:    XWHCD
//                      PWAPLNSQ
// 
// DATE CREATED:        09/01/87
// 
// MAINTENANCE LOG:
// 
// DATE       NAME     COMMENT
// --------   ------   ---------------------------------------
// 09/01/87   SPOPA    New record definition.
// **********************
Record PWAREC type basicRecord
  5 PWAGROUP PWAGROUP ; 
    10 XWHCD XWHCD ; 
    10 PKHSCHED PKHSCHED ; 
    10 PWASELID PWASELID ; 
    10 TF1CARCD TF1CARCD ; 
    10 XPKCD XPKCD ; 
    10 PWAZNTYP PWAZNTYP ; 
    10 XARCD XARCD [6] ; 
    10 SL4ZONE SL4ZONE [6] ; 
    10 SL5LOCTN SL5LOCTN [6] ; 
    10 XPPCD XPPCD ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 OP1CUPO OP1CUPO ; 
    10 PK4STKTF PK4STKTF ; 
    10 OP1DSBDT OP1DSBDT ; 
    10 XOTCD XOTCD ; 
    10 XOCCD XOCCD ; 
    10 PWAPRMFL PWAPRMFL ; 
    10 PWAEXPFL PWAEXPFL ; 
    10 PWAINSFL PWAINSFL ; 
    10 PWAPOPFL PWAPOPFL ; 
    10 IN7STTWH IN7STTWH ; 
    10 PWABGRFL PWABGRFL ; 
    10 PWACLSFL PWACLSFL ; 
    10 PWAKEY PWAKEY ; 
      15 PWAPLNSQ PWAPLNSQ ; 
    10 TF1FCARF TF1FCARF ; 
    10 PWACARUN PWACARUN ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PWAREC

// Starting sequence number
DataItem PK0XMSEQ num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Second index for map fields
DataItem PK0XWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PK0XWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem PK0XWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Information message number
DataItem PK0XWMNO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch
DataItem PK0XWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line error was found switch
DataItem PK0XWSWE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PK0XWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage switch
DataItem PK0XWSWT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current temporary storage page
DataItem PK0XWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pk_btch_bgrd_fl
DataItem PWABGRFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_PLAN_CARR_UNT
DataItem PWACARUN int {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// pk_btch_cls_out-fl
DataItem PWACLSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_BTCH_EXPT_FL
DataItem PWAEXPFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem PWAGROUP char(139)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_BTCH_INSTPRM_FL
DataItem PWAINSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem PWAKEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_PLAN_SEQ_NBR
DataItem PWAPLNSQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PK_BTCH_POP_FL
DataItem PWAPOPFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_BTCH_PRM_FL
DataItem PWAPRMFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_SEL_ID
DataItem PWASELID char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_PROC_ZN_TYP_CD
DataItem PWAZNTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

