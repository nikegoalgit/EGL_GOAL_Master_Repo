package pk0e;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import ww.common.*;
//*** PROGRAM=PK0E ****
// This application allows a user to display and update rows
// in the label table (DPICK.VZLABL01).
// 
// The user enters required key data (label code and/or
// customer and/or format code) to retrieve a row.
// 
// Users may add new rows and change existing rows.  Deletes
// are not allowed.  The label key will be re-used as there
// are only 999 maximum keys.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          04/18/91  gbaugh  new program
//          10/21/91  esmith  new map; major changes to make
//                            application work and meet new
//                            specifications...virtually a
//                            new program
//          02/04/92  esmith  change label code to be alpha-
//                            numeric, customer-assigned vs.
//                            numeric char, system-assigned.
//                            remove option to edit status.
//          04/16/92  esmith  correct add of new record when
//                            no data has previously been
//                            displayed on screen and there
//                            is no existing temp storage.
//          07/01/92  jcampb  change print flag to accept only
//                            "P" for Print by Product or "S"
//                            for print by size. (msg 419)
//          08/10/92  jcampb  ADD LABEL CODES 5 & 6 FOR CHAMPS
//          08/10/92  jcampb  ADD LABEL CODE  7 for lazarus
// CANADA   08/11/95  CBRINE  Added XCTCD to PKWREC. Modified
//                            to call SY2000-PK0ES-11-GETPKSTYL
// Y2KFIX   02/02/98  MBURLE  Regenerated to pick up latest
//                            version of date routine, XX0XS01.
// *********************
Program PK0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PK0EW00 PK0EW00; // record
  PK0EW01 PK0EW01; // record
  PK0EW03 PK0EW03; // record
  PKNREC PKNREC; // record
  PKWREC PKWREC; // record
  PKZREC PKZREC; // record
  PWRREC PWRREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  WSY2000 WSY2000; // record
  XSPKW01 XSPKW01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XLRTBL; // table
  use XGPTBL; // table
  use XNXTBL; // table
  use XWHTBL; // table
  use PK0ET01 {deleteAfterUse = yes}; // table
  use PK0EM.PK0EM001,  // forms
      PK0EM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();

     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    set PK0EM001 initial; /* M001 input/output*/
    set PK0EW00 empty; /* Working storage*/
    set PK0EW01 empty; /* M001 display storage*/
    set PK0EW03 empty; /* Temp storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* Date routine work area*/
    set TA5REC empty; /* Temporary storage area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

     /* ------------------------------------------------------------*/
     /* Determine default data to be loaded*/
     /* ------------------------------------------------------------*/
    PK0EW00.PK0EW-DATA-REQUEST-SW = "N"; /* Request for data switch*/
    PK0EW00.PK0EW-FMAT-MAP-SW = "Y"; /* Format screen data switch*/
    PK0EW01.CACHGFL = "N"; /* Record change flag*/

    PK0EW00.XXXTSLEN = 510; /* Temp storage*/

     /* ------------------------------------------------------------*/
     /* Flow to mainline processing*/
     /* ------------------------------------------------------------*/
    goto PK0E-001;

    PK0E-001: PK0E-001();
    goto PK0E-001;
  end // end main
end // end PK0E

// INQUIRE/MAINTENANCE M001
Function PK0E-001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) OBTAIN THE DATA TO DISPLAY.*/
   /* 2) FORMAT THE MAP OUTPUT AREA AND DISPLAY THE MAP.*/
   /* 3) CHECK THE ATTENTION IDENTIFIER.*/
   /* 4) RESET HIGHLIGHTED FIEDLS TO NORMAL INTENSITY.*/
   /* 5) VERIFY THE DATA THAT WAS ENTERED.*/
   /* 6) PROCESS A VALID INPUT REQUEST.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PK0E-100(); /* Obtain the data to display*/

  PK0E-200(); /* Format and display the map*/

  PK0E-300(); /* Check attention identifier*/

  PK0E-400(); /* Reset fields to normal intensity*/

  PK0E-500(); /* Verify the entered data*/

  PK0E-600(); /* Process valid input request*/

end // end PK0E-001

// OBTAIN THE DATA TO DISPLAY
Function PK0E-100()

   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* previous process.*/
   /* ------------------------------------------------------------*/
  if (PK0EW00.PK0EW-DATA-REQUEST-SW != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0)   /* or an error was found*/

    return; /* Return to previous process*/

  end

  PK0ES-06-PRGTMPSTR(); /* Purge temp storage*/

   /* ------------------------------------------------------------*/
   /* Get the requested label table rows*/
   /* ------------------------------------------------------------*/
  set PWRREC empty;

  PK0EW00.PK0EW-CSR-EOF-SW = "N"; /* Not EOF label table*/
  PK0EW00.PK0EW-ANY-TASK-CHGD-FL = "N";
                                          /* Tasks not changed on any page*/
  set PK0EW03 empty; /* Initialize W03*/
  PK0EW03.PK0EW-TMP-STOR-IDX = 1; /* Set index to start*/

  PK0EW00.PK0EM-MAP-LABL-TO-SELECT = PK0EW01.PK0EM-MAP-LABL-TO-SELECT; /* LABEL CODE*/
  if (PK0EW01.PK0EM-MAP-LABL-TO-SELECT > "   ") /* Label cd*/
    PWRREC.PWRLBCD = PK0EW01.PK0EM-MAP-LABL-TO-SELECT;
                                               /* Use valid label cd*/
  else
    PWRREC.PWRLBCD = "*"; /* Use wildcard*/
  end

  PK0EW00.PK0EM-MAP-CUST-TO-SELECT = PK0EW01.PK0EM-MAP-CUST-TO-SELECT; /* CUSTOMER ID*/
  if (PK0EW01.PK0EM-MAP-CUST-TO-SELECT > 0)
    PWRREC.KUISKUID = PK0EW01.PK0EM-MAP-CUST-TO-SELECT;
                                               /* Use valid customer*/
  else
    PWRREC.KUISKUID = -1; /* Use wildcard*/
  end

  PWRREC.XNXCD = -1; /* GET ALL DEPARTMENTS*/

  PK0EW00.PK0EM-MAP-FRMT-TO-SELECT = PK0EW01.PK0EM-MAP-FRMT-TO-SELECT; /* FORM CODE*/
  if (PK0EW01.PK0EM-MAP-FRMT-TO-SELECT > 0)
    PWRREC.PWRLBFMT = PK0EW01.PK0EM-MAP-FRMT-TO-SELECT;
                                                       /* Use valid form cd*/
  else
    PWRREC.PWRLBFMT = -1; /* Use wildcard*/
  end


  PK0ES-08-NEWLBLSET(); /* Select 's1' DPICK.VZLABL01 row*/

  converseLib.validationFailed(403); /* No data for this selection msg*/
  PK0EM001.XXXLOCID = "100"; /* Display location on map*/

  while (PK0EW00.PK0EW-CSR-EOF-SW == "N") /* Not EOF label code table*/

    PK0ES-04-FETCHLABL(); /* Select 'n1' DPICK.VZLABL01 row*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Test for good return code*/
      converseLib.validationFailed(0); /* Data to display...reset msg*/
      PK0E-110(); /* Move detail data to working storage*/
      set PWRREC empty; /* Clear the record*/
    end

  end

  PK0ES-03-CLOSLABEL(); /* Select 'c1' DPICK.VZLABL01 row*/

  PK0E-120(); /* Last page to temp stor, if needed*/

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* ------------------------------------------------------------*/
   /* Inidcate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  PK0EW00.XXXTSPAG = 1; /* First page*/
  PK0EW00.PK0EW-DATA-REQUEST-SW = "N"; /* Request for data switch*/
  PK0EW00.PK0EW-SELECT-REQUEST-SW = "N"; /* Request new label cd*/
  PK0EW01.CACHGFL = "Y"; /* Data is available for change*/

end // end PK0E-100

// MOVE DETAIL TO WORKING STORAGE
Function PK0E-110()

   /* --------------------------------------------------*/
   /* Load label code data to W03*/
   /* --------------------------------------------------*/
  PK0EW03.PK0EW-ACTION-CODE[PK0EW-TMP-STOR-IDX] = " ";
  PK0EW03.KUISKUID[PK0EW-TMP-STOR-IDX] = PWRREC.KUISKUID;
  PK0EW03.XNXCD[PK0EW-TMP-STOR-IDX] = PWRREC.XNXCD;
  PK0EW03.PWRLBCD[PK0EW-TMP-STOR-IDX] = PWRREC.PWRLBCD;
  PK0EW03.PWRLBABR[PK0EW-TMP-STOR-IDX] = PWRREC.PWRLBABR;
  PK0EW03.SY1STNBR[PK0EW-TMP-STOR-IDX] = PWRREC.SY1STNBR;
  PK0EW03.PWRLBPRI[PK0EW-TMP-STOR-IDX] = PWRREC.PWRLBPRI;
  PK0EW03.PWRLBFMT[PK0EW-TMP-STOR-IDX] = PWRREC.PWRLBFMT;
  PK0EW03.XLRCD[PK0EW-TMP-STOR-IDX] = PWRREC.XLRCD;
  PK0EW03.PWRLBQTY[PK0EW-TMP-STOR-IDX] = PWRREC.PWRLBQTY;
  PK0EW03.PWRLBSSC[PK0EW-TMP-STOR-IDX] = PWRREC.PWRLBSSC;
  PK0EW03.PWRLBPSC[PK0EW-TMP-STOR-IDX] = PWRREC.PWRLBPSC;
  PK0EW03.XXXSTAT[PK0EW-TMP-STOR-IDX] = PWRREC.XXXSTAT;
  PK0EW03.ZZZSDT[PK0EW-TMP-STOR-IDX] = PWRREC.ZZZSDT;
  PK0EW03.ZZZCHGDT[PK0EW-TMP-STOR-IDX] = PWRREC.ZZZCHGDT;
  PK0EW03.ZZZCHGTM[PK0EW-TMP-STOR-IDX] = PWRREC.ZZZCHGTM;
  PK0EW03.PK0EW-MAX-LINES = PK0EW03.PK0EW-TMP-STOR-IDX; /* Total tasks*/
  PK0EW03.PK0EW-TMP-STOR-IDX = PK0EW03.PK0EW-TMP-STOR-IDX + 1;
                                                     /* Increment W03 index*/

   /* ---------------------------------------------------------*/
   /* If the page is full, add to temporary storage*/
   /* ---------------------------------------------------------*/
  if (PK0EW03.PK0EW-TMP-STOR-IDX > 11) /* Page is full*/
    PK0ES-01-ADDTMPSTR(); /* Add page to temp storage*/
    set PK0EW03 empty; /* Initialize w03*/
    PK0EW03.PK0EW-TMP-STOR-IDX = 1; /* W03 index*/
  end

  if (PK0EW00.PK0EW-CSR-EOF-SW == "N") /* Check for more data to process*/
    return; /* Go get more data*/
  end

end // end PK0E-110

// OBTAIN THE DATA TO DISPLAY
Function PK0E-120()
   /* --------------------------------------------------*/
   /* Add 5 blank lines to end*/
   /* --------------------------------------------------*/
  PK0EW03.PK0EW-MAX-LINES = PK0EW03.PK0EW-MAX-LINES + 5; /* Tasks count*/
  PK0EW03.PK0EW-TMP-STOR-IDX = PK0EW03.PK0EW-TMP-STOR-IDX + 4;
                                                             /* Tasks count*/

   /* -------------------------------------------------------*/
   /* Add any partially formatted last page to the queue*/
   /* -------------------------------------------------------*/
  if (PK0EW03.PK0EW-TMP-STOR-IDX > 1) /* Fill the last page*/
    if (PK0EW03.PK0EW-TMP-STOR-IDX <= 11) /* Fill the last page*/

      PK0ES-01-ADDTMPSTR(); /* Add page to temp storage*/

    else
      PK0EW00.PK0EW-REMAINING-LINES = PK0EW03.PK0EW-TMP-STOR-IDX - 11;
                                                     /* Lines for next page*/
      PK0EW03.PK0EW-MAX-LINES = 11; /* Full page*/

      PK0ES-01-ADDTMPSTR(); /* Add page to temp storage*/

      PK0EW03.PK0EW-MAX-LINES = PK0EW00.PK0EW-REMAINING-LINES;
                                                              /* Last lines*/
      PK0EW03.PK0EW-TMP-STOR-IDX = 1; /* Blank out tasks*/

      while (PK0EW03.PK0EW-TMP-STOR-IDX <= 11) /* Blank out tasks*/
        PK0EW03.PK0EW-ACTION-CODE[PK0EW-TMP-STOR-IDX] = " ";
        PK0EW03.KUISKUID[PK0EW-TMP-STOR-IDX] = 0;
        PK0EW03.XNXCD[PK0EW-TMP-STOR-IDX] = 0;
        PK0EW03.PWRLBCD[PK0EW-TMP-STOR-IDX] = " ";
        PK0EW03.PWRLBABR[PK0EW-TMP-STOR-IDX] = " ";
        PK0EW03.PWRLBFMT[PK0EW-TMP-STOR-IDX] = 0;
        PK0EW03.SY1STNBR[PK0EW-TMP-STOR-IDX] = " ";
        PK0EW03.PWRLBPRI[PK0EW-TMP-STOR-IDX] = " ";
        PK0EW03.PWRLBQTY[PK0EW-TMP-STOR-IDX] = 0;
        PK0EW03.PWRLBSSC[PK0EW-TMP-STOR-IDX] = " ";
        PK0EW03.PWRLBPSC[PK0EW-TMP-STOR-IDX] = " ";
        PK0EW03.XLRCD[PK0EW-TMP-STOR-IDX] = " ";
        PK0EW03.XXXSTAT[PK0EW-TMP-STOR-IDX] = " ";
        PK0EW03.ZZZSDT[PK0EW-TMP-STOR-IDX] = 0;
        PK0EW03.ZZZCHGDT[PK0EW-TMP-STOR-IDX] = 0;
        PK0EW03.ZZZCHGTM[PK0EW-TMP-STOR-IDX] = 0;
        PK0EW03.PK0EW-TMP-STOR-IDX = PK0EW03.PK0EW-TMP-STOR-IDX + 1;
                                                      /* Increment line idx*/
      end

      PK0ES-01-ADDTMPSTR(); /* Add page to temp storage*/

    end
  end
end // end PK0E-120

// FORMAT AND CONVERSE THE MAP
Function PK0E-200()
   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/
  if (PK0EW00.PK0EW-DATA-REQUEST-SW == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0)   /* or no error found*/

    if (PK0EW00.PK0EW-FMAT-MAP-SW == "Y") /* Map must be formatted*/
      PK0E-210(); /* Format data on the map*/
    end

  end


  if (PK0EW00.PK0EW-DATA-UPDATED-SW == "Y") /* Update just completed*/
    set PK0EM001.PK0EM-MAP-LABL-TO-SELECT cursor; /* Reposition cursor*/
    converseLib.validationFailed(32); /* Table update successful*/
    PK0EM001.XXXLOCID = "200"; /* Display location on map*/
    PK0EW00.PK0EW-DATA-UPDATED-SW = " "; /* Reset flag*/
  else

    if (converseVar.validationMsgNum == 0)
      if (PK0EM001.PWRLBCD[1] > "   ") /* 1st Label code formatted*/
        set PK0EM001.PK0EM-MAP-ACTION-CODE[1] cursor; /* Put cursor at dtl*/
      else
        set PK0EM001.PK0EM-MAP-LABL-TO-SELECT cursor; /* Put cursor at hdr*/
      end
    end

  end


  if (PK0EW00.TA5TSQIX > 1)
    set PK0EM001.PK0EM-MAP-LITERAL-PAGE bold, protect;
    PK0EM001.XXXTSPAG = PK0EW00.XXXTSPAG; /* Current page*/
    set PK0EM001.PK0EM-MAP-LITERAL-OF bold, protect;
    PK0EM001.TA5TSQIX = PK0EW00.TA5TSQIX; /* Last page*/
  else
    set PK0EM001.PK0EM-MAP-LITERAL-PAGE initialAttributes; /* Dark*/
    set PK0EM001.PK0EM-MAP-LITERAL-OF initialAttributes; /* Dark*/
  end


  PK0EM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PK0EM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PK0EM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

  converse PK0EM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  COMMAREA.CAMSG = " "; /* Commarea error message*/

  COMMAREA.CATOAP = PK0EM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PK0EM001.CAITEM; /* Application data*/

end // end PK0E-200

// FORMAT M001 DISPLAY DATA
Function PK0E-210()

   /* ------------------------------------------------------------*/
   /* Initialize the map - PK0EM001*/
   /* ------------------------------------------------------------*/
  set PK0EM001 initial; /* M001 input/ouput area*/
  PK0EW00.PK0EW-FMAT-MAP-SW = "N"; /* Init map switch*/

   /* ------------------------------------------------------------*/
   /* Read TEMPORARY STORAGE*/
   /* ------------------------------------------------------------*/
  if (TA5REC.TA5TSQIX > 0) /* Data in temp storage*/
    PK0ES-07-GETTMPSTR(); /* Read temp storage*/
  end

   /* ------------------------------------------------------------*/
   /* Format PK0EM001 using the key data*/
   /* ------------------------------------------------------------*/
  PK0E-220(); /* Format header data*/

   /* ------------------------------------------------------------*/
   /* If data has not been loaded, bypass load of map fields*/
   /* ------------------------------------------------------------*/
  if (PK0EW01.CACHGFL != "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* Position cursor at first action*/
   /* ------------------------------------------------------------*/
  set PK0EM001.PK0EM-MAP-ACTION-CODE[1] cursor;

end // end PK0E-210

// FORMAT M001 WITH W01 DATA
Function PK0E-220()
   /* ------------------------------------------------------------*/
   /* Format PK0EM001 Using key data*/
   /* ------------------------------------------------------------*/
  PK0EM001.PK0EM-MAP-LABL-TO-SELECT = PK0EW01.PK0EM-MAP-LABL-TO-SELECT; /* Label code*/
  PK0EM001.PK0EM-MAP-CUST-TO-SELECT = PK0EW01.PK0EM-MAP-CUST-TO-SELECT; /* Description*/
  PK0EM001.PK0EM-MAP-FRMT-TO-SELECT = PK0EW01.PK0EM-MAP-FRMT-TO-SELECT; /* Format code*/

   /* ------------------------------------------------------------*/
   /* Format PK0EM001 using page from temporary storage*/
   /* ------------------------------------------------------------*/
  PK0EW03.PK0EW-TMP-STOR-IDX = 1;
  while (PK0EW03.PK0EW-TMP-STOR-IDX <= 11)
    PK0EM001.PK0EM-MAP-ACTION-CODE[PK0EW-TMP-STOR-IDX] = PK0EW03.PK0EW-ACTION-CODE[PK0EW-TMP-STOR-IDX];
    PK0EM001.KUISKUID[PK0EW-TMP-STOR-IDX] = PK0EW03.KUISKUID[PK0EW-TMP-STOR-IDX];
    PK0EM001.XNXCD[PK0EW-TMP-STOR-IDX] = PK0EW03.XNXCD[PK0EW-TMP-STOR-IDX];
    PK0EM001.PWRLBCD[PK0EW-TMP-STOR-IDX] = PK0EW03.PWRLBCD[PK0EW-TMP-STOR-IDX];
    PK0EM001.PWRLBFMT[PK0EW-TMP-STOR-IDX] = PK0EW03.PWRLBFMT[PK0EW-TMP-STOR-IDX];
    PK0EM001.PWRLBABR[PK0EW-TMP-STOR-IDX] = PK0EW03.PWRLBABR[PK0EW-TMP-STOR-IDX];
    PK0EM001.SY1STNBR[PK0EW-TMP-STOR-IDX] = PK0EW03.SY1STNBR[PK0EW-TMP-STOR-IDX];
    PK0EM001.PWRLBPRI[PK0EW-TMP-STOR-IDX] = PK0EW03.PWRLBPRI[PK0EW-TMP-STOR-IDX];
    PK0EM001.PWRLBQTY[PK0EW-TMP-STOR-IDX] = PK0EW03.PWRLBQTY[PK0EW-TMP-STOR-IDX];
    PK0EM001.PWRLBSSC[PK0EW-TMP-STOR-IDX] = PK0EW03.PWRLBSSC[PK0EW-TMP-STOR-IDX];
    PK0EM001.PWRLBPSC[PK0EW-TMP-STOR-IDX] = PK0EW03.PWRLBPSC[PK0EW-TMP-STOR-IDX];
    PK0EM001.XLRCD[PK0EW-TMP-STOR-IDX] = PK0EW03.XLRCD[PK0EW-TMP-STOR-IDX];
    PK0EM001.XXXSTAT[PK0EW-TMP-STOR-IDX] = PK0EW03.XXXSTAT[PK0EW-TMP-STOR-IDX];
    PK0EW03.PK0EW-TMP-STOR-IDX = PK0EW03.PK0EW-TMP-STOR-IDX + 1;
                                                         /* Increment index*/
  end
end // end PK0E-220

// CHECK ATTENTION IDENTIFIER
Function PK0E-300()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If cancel was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Refresh map*/
    PK0EW00.PK0EW-DATA-REQUEST-SW = "N"; /* Request for data*/
    PK0EW00.PK0EW-FMAT-MAP-SW = "Y"; /* Format screen m001*/
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Passed data*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
  if (PK0EM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      XSEXIT(); /* Exit to another appl*/
      PK0EW00.PK0EW-DATA-REQUEST-SW = "N"; /* Request for data*/
      PK0EW00.PK0EW-FMAT-MAP-SW = "Y"; /* Format screen m001*/
      set PK0EM001.CATOAP cursor, bold; /* Highlight*/
    else
      converseLib.validationFailed(12); /* PF key not valid*/
      PK0EM001.XXXLOCID = "300"; /* Display location on map*/
    end
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or EXIT TO THE MASTER*/
   /* MENU Was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PK0EM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PK0A"; /* Picking mstr menu*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* Master menu*/
    end

    XSEXIT(); /* Exit to another appl*/
    PK0EW00.PK0EW-DATA-REQUEST-SW = "N"; /* Request for data*/
    PK0EW00.PK0EW-FMAT-MAP-SW = "Y"; /* Format screen m001*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    PK0EW00.PK0EW-DATA-REQUEST-SW = "Y"; /* Indicate data to process*/
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* or PF7 was pressed*/
   && converseVar.eventKey not pf8)  /* or PF8 was pressed*/
    converseLib.validationFailed(12); /* Indicate invalid att key*/
    PK0EM001.XXXLOCID = "300"; /* Display location on map*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen*/
    end

    exit stack; /* Exit to display map*/
  end

end // end PK0E-300

// RESET HIGHLIGHTED FIELDS
Function PK0E-400()
   /* ------------------------------------------------------------*/
   /* Label selection data at header*/
   /* ------------------------------------------------------------*/
  set PK0EM001.PK0EM-MAP-LABL-TO-SELECT initialAttributes; /* Label code*/
  set PK0EM001.PK0EM-MAP-CUST-TO-SELECT initialAttributes; /* Description*/
  set PK0EM001.PK0EM-MAP-FRMT-TO-SELECT initialAttributes; /* Format code*/

   /* ------------------------------------------------------------*/
   /* Label data at detail*/
   /* ------------------------------------------------------------*/
  PK0EW00.PK0EW-WORK-IDX = 1; /* Init index*/
  while (PK0EW00.PK0EW-WORK-IDX <= 11)
    set PK0EM001.PK0EM-MAP-ACTION-CODE[PK0EW-WORK-IDX] initialAttributes; /* Action*/
    set PK0EM001.KUISKUID[PK0EW-WORK-IDX] initialAttributes; /* Customer*/
    set PK0EM001.XNXCD[PK0EW-WORK-IDX] initialAttributes; /* Dept id*/
    set PK0EM001.PWRLBCD[PK0EW-WORK-IDX] initialAttributes; /* Label code*/
    set PK0EM001.PWRLBABR[PK0EW-WORK-IDX] initialAttributes;
                                                 /* Short label description*/
    set PK0EM001.PWRLBFMT[PK0EW-WORK-IDX] initialAttributes; /* Format codeiption*/
    set PK0EM001.SY1STNBR[PK0EW-WORK-IDX] initialAttributes; /* Stock number*/
    set PK0EM001.PWRLBPRI[PK0EW-WORK-IDX] initialAttributes; /* Print flag*/
    set PK0EM001.PWRLBQTY[PK0EW-WORK-IDX] initialAttributes; /* Quantity*/
    set PK0EM001.PWRLBSSC[PK0EW-WORK-IDX] initialAttributes; /* Style source*/
    set PK0EM001.PWRLBPSC[PK0EW-WORK-IDX] initialAttributes; /* Price source*/
    set PK0EM001.XLRCD[PK0EW-WORK-IDX] initialAttributes; /* Ink color*/
    set PK0EM001.XXXSTAT[PK0EW-WORK-IDX] initialAttributes; /* Status*/

    PK0E-410(); /* Pop-up requests*/

    PK0EW00.PK0EW-WORK-IDX = PK0EW00.PK0EW-WORK-IDX + 1;
  end

  set PK0EM001.CATOAP initialAttributes;
  set PK0EM001.CAITEM initialAttributes;

end // end PK0E-400

// POP-UP requests on details
Function PK0E-410()
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PK0EM001.XLRCD[PK0EW-WORK-IDX] == "?") /* Ink clr requested*/

    if (converseVar.eventKey not enter) /* ENTER not pressed*/
      PK0EM001.XXXLOCID = "410"; /* Display loc on map*/
      set PK0EM001.XLRCD[PK0EW-WORK-IDX] cursor, bold;
      converseLib.validationFailed(410); /* PF invalid w/list request*/

      exit stack; /* Exit to display map*/
    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of GPC codes.*/
   /* ------------------------------------------------------------*/

  if (PK0EM001.XLRCD[PK0EW-WORK-IDX] == "?") /* Ink clr requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  XLR"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXLR01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PK0EM001.XLRCD[PK0EW-WORK-IDX] = PK0EW01.XLRCD[PK0EW-WORK-IDX];
    else
      PK0EM001.XLRCD[PK0EW-WORK-IDX] = XLRTBL.XLRCD[XX0XWPIX];
    end

    set PK0EM001.XLRCD[PK0EW-WORK-IDX] cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  PK0EM001.XXXLOCID = "410"; /* Module identification*/
  converseLib.validationFailed(409); /* Requested list(s) displayed*/

  exit stack; /* Exit to display map*/


end // end PK0E-410

// VERIFY THE ENTERED DATA
Function PK0E-500()
   /* ------------------------------------------------------------*/
   /* Check key field modifications*/
   /* ------------------------------------------------------------*/
  PK0E-510(); /* Verify modified data*/
  PK0E-520(); /* Validate entry fields*/

  if (converseVar.validationMsgNum != 0) /* Error found*/
    exit stack; /* Return to main processing*/
  end

   /* ------------------------------------------------------------*/
   /* Request to scroll*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7 /* Scroll forward*/
   || converseVar.eventKey is pf8) /* Scroll backward*/

    if (converseVar.validationMsgNum == 0) /* No errors*/
      PK0E-540(); /* Scroll*/
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
end // end PK0E-500

// VERIFY DATA HAS BEEN MODIFIED
Function PK0E-510()
   /* -----------------------------------------------------*/
   /* Check modifiable fields*/
   /* -----------------------------------------------------*/
  PK0EW00.PK0EW-SELECT-REQUEST-SW = "N"; /* Label request*/


  if (PK0EW01.PK0EM-MAP-LABL-TO-SELECT != PK0EM001.PK0EM-MAP-LABL-TO-SELECT
   /* If any selection*/
   || PK0EW01.PK0EM-MAP-CUST-TO-SELECT != 
  PK0EM001.PK0EM-MAP-CUST-TO-SELECT /* criteria changed*/
   || PK0EW01.PK0EM-MAP-FRMT-TO-SELECT != 
  PK0EM001.PK0EM-MAP-FRMT-TO-SELECT)

    PK0EW00.PK0EW-SELECT-REQUEST-SW = "Y";
    PK0EW01.PK0EM-MAP-LABL-TO-SELECT = PK0EM001.PK0EM-MAP-LABL-TO-SELECT;
    PK0EW01.PK0EM-MAP-CUST-TO-SELECT = PK0EM001.PK0EM-MAP-CUST-TO-SELECT;
    PK0EW01.PK0EM-MAP-FRMT-TO-SELECT = PK0EM001.PK0EM-MAP-FRMT-TO-SELECT;

    set PK0EM001 initial; /* Clear the screen*/

    PK0EM001.PK0EM-MAP-FRMT-TO-SELECT = PK0EW01.PK0EM-MAP-FRMT-TO-SELECT; /* Restore selection*/
    PK0EM001.PK0EM-MAP-CUST-TO-SELECT = PK0EW01.PK0EM-MAP-CUST-TO-SELECT; /* to map*/
    PK0EM001.PK0EM-MAP-LABL-TO-SELECT = PK0EW01.PK0EM-MAP-LABL-TO-SELECT;

  end


  if (PK0EW-SELECT-REQUEST-SW == "N"
   && PK0EW00.PK0EW-ANY-TASK-CHGD-FL == "N"
   /* Tasks not changed on any page*/
   && converseVar.eventKey is enter
   && PK0EM001.PK0EM-MAP-ACTION-CODE[1] == " "
   && PK0EM001.PK0EM-MAP-ACTION-CODE[2] == " "
   && PK0EM001.PK0EM-MAP-ACTION-CODE[3] == " "
   && PK0EM001.PK0EM-MAP-ACTION-CODE[4] == " "
   && PK0EM001.PK0EM-MAP-ACTION-CODE[5] == " "
   && PK0EM001.PK0EM-MAP-ACTION-CODE[6] == " "
   && PK0EM001.PK0EM-MAP-ACTION-CODE[7] == " "
   && PK0EM001.PK0EM-MAP-ACTION-CODE[8] == " "
   && PK0EM001.PK0EM-MAP-ACTION-CODE[9] == " "
   && PK0EM001.PK0EM-MAP-ACTION-CODE[10] == " "
   && PK0EM001.PK0EM-MAP-ACTION-CODE[11] == " ")
    converseLib.validationFailed(119);
    PK0EM001.XXXLOCID = "510"; /* Location of error*/
  end
end // end PK0E-510

// VERIFY THE ENTERED DATA
Function PK0E-520()
   /* ------------------------------------------------------------*/
   /* Edit the required fields starting at the bottom of the*/
   /* map.*/
   /* ------------------------------------------------------------*/
  PK0EW03.PK0EW-PAGE-TSK-CHG-SW = "N"; /* Changes to task*/

   /* ------------------------------------------------------------*/
   /* Validate the detail data*/
   /* ------------------------------------------------------------*/
  PK0EW00.PK0EW-WORK-IDX = 11;

  while (PK0EW00.PK0EW-WORK-IDX >= 1)

    if (PK0EM001.PK0EM-MAP-ACTION-CODE[PK0EW-WORK-IDX] != " ")
                                                          /* Action entered*/
      PK0EW00.PK0EW-DATA-REQUEST-SW = "N"; /* Indicate modification*/
      PK0E-525(); /* Check Task and errors codes*/
    end

    PK0EW00.PK0EW-WORK-IDX = PK0EW00.PK0EW-WORK-IDX - 1;
  end

   /* ------------------------------------------------------------*/
   /* Update temp storage with changes from map*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum == 0) /* No errors*/

    if (PK0EW03.PK0EW-PAGE-TSK-CHG-SW == "Y") /* Task changed*/
      PK0EW00.PK0EW-ANY-TASK-CHGD-FL = "Y";
                                       /* A task changed on at least 1 page*/
      PK0E-530(); /* Update temp storage page*/
    end

  end
end // end PK0E-520

// VALIDATE TASK DATA
Function PK0E-525()
  if (PK0EM001.PK0EM-MAP-ACTION-CODE[PK0EW-WORK-IDX] == "A" /* Add*/
   || PK0EM001.PK0EM-MAP-ACTION-CODE[PK0EW-WORK-IDX] == "C") /* Change*/

    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
    /* Validate RIBBON COLOR*/
    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
    if (PK0EM001.XLRCD[PK0EW-WORK-IDX] in XLRTBL.XLRCD)
       /* next sentence                            /* Not found*/
    else
      converseLib.validationFailed(406); /* Invalid ribbon color*/
      PK0EM001.XXXLOCID = "525"; /* Location of error*/
      set PK0EM001.XLRCD[PK0EW-WORK-IDX] cursor, bold;
    end

    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
    /* Validate PRICE SOURCE CODE*/
    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
    if (PK0EM001.PWRLBPSC[PK0EW-WORK-IDX] == "CU" /* Customer only*/
     || PK0EM001.PWRLBPSC[PK0EW-WORK-IDX] == "CN" /* Cust first, then NIKE*/
     || PK0EM001.PWRLBPSC[PK0EW-WORK-IDX] == "NK") /* NIKE only*/
      /* next sentence*/
    else
      converseLib.validationFailed(407); /* Invalid source cd*/
      PK0EM001.XXXLOCID = "525"; /* Location of error*/
      set PK0EM001.PWRLBPSC[PK0EW-WORK-IDX] cursor, bold;
    end

    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
    /* Validate STYLE SOURCE CODE*/
    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
    if (PK0EM001.PWRLBSSC[PK0EW-WORK-IDX] == "CU" /* Customer only*/
     || PK0EM001.PWRLBSSC[PK0EW-WORK-IDX] == "CN" /* Cust first, then NIKE*/
     || PK0EM001.PWRLBSSC[PK0EW-WORK-IDX] == "NK") /* NIKE only*/
      /* next sentence*/
    else
      converseLib.validationFailed(407); /* Invalid source cd*/
      PK0EM001.XXXLOCID = "525"; /* Location of error*/
      set PK0EM001.PWRLBSSC[PK0EW-WORK-IDX] cursor, bold;
    end

    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
    /* Validate LABEL QUANTITY*/
    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
    if (PK0EM001.PWRLBQTY[PK0EW-WORK-IDX] < 1)
      converseLib.validationFailed(138); /* Nbr of labels missing*/
      PK0EM001.XXXLOCID = "525"; /* Location of error*/
      set PK0EM001.PWRLBQTY[PK0EW-WORK-IDX] cursor, bold;
    end

    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
    /* Validate PRINT FLAG*/
    /*  */
    /* P = Print by Product*/
    /* S = Print by Size*/
    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
    if (PK0EM001.PWRLBPRI[PK0EW-WORK-IDX] == "P"
     || PK0EM001.PWRLBPRI[PK0EW-WORK-IDX] == "S")
       /* next sentence*/
    else
      if (PK0EM001.PWRLBPRI[PK0EW-WORK-IDX] == " ") /* Default to 'P'*/
        PK0EM001.PWRLBPRI[PK0EW-WORK-IDX] = "P";
      else
        converseLib.validationFailed(419); /* Invalid print flag*/
        PK0EM001.XXXLOCID = "525"; /* Location of error*/
        set PK0EM001.PWRLBPRI[PK0EW-WORK-IDX] cursor, bold;
      end
    end

    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
    /* Validate STOCK NUMBER*/
    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
    set PKNREC empty;
    PKNREC.XGPCD = "04";
    PKNREC.SY1STNBR = PK0EM001.SY1STNBR[PK0EW-WORK-IDX];
    PKNREC.SY2CLRID = "00";
    PKNREC.XDMCD = "00";
    PK0ES-11-GETPKSTYL(); /* Select 's ' DPICK.VPKSTY01*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Found*/
      /* next sentence*/
    else
      converseLib.validationFailed(48); /* Invalid stock number*/
      PK0EM001.XXXLOCID = "525"; /* Location of error*/
      set PK0EM001.SY1STNBR[PK0EW-WORK-IDX] cursor, bold;
    end

    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
    /* Validate FORMAT CODE in PK0E FORMAT TABLE (PK0ETFMT) that*/
    /* lists all current, active format numbers*/
    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
    if (PK0EM001.PWRLBFMT[PK0EW-WORK-IDX] in PK0ET01.PWRLBFMT)
                                                            /* Valid format*/
    /* next sentence*/
    else
      converseLib.validationFailed(408); /* Invalid format nbr*/
      PK0EM001.XXXLOCID = "525"; /* Location of error*/
      set PK0EM001.PWRLBFMT[PK0EW-WORK-IDX] cursor, bold;
    end

    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
    /* Validate LABEL CODE*/
    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
    if (PK0EM001.PK0EM-MAP-ACTION-CODE[PK0EW-WORK-IDX] == "A") /* Add*/

      if (PK0EM001.PWRLBCD[PK0EW-WORK-IDX] == "   ")
        converseLib.validationFailed(341); /* KEY FIELD REQUIRED*/
        PK0EM001.XXXLOCID = "525"; /* Location of error*/
        set PK0EM001.PWRLBCD[PK0EW-WORK-IDX] cursor, bold;
        set PK0EM001.PK0EM-MAP-ACTION-CODE[PK0EW-WORK-IDX] bold;

      else
        set PWRREC empty;
        PWRREC.PWRLBCD = PK0EM001.PWRLBCD[PK0EW-WORK-IDX];
        PK0ES-05-VERIFYKEY(); /* Validate that key is unique*/

        if (SQLCA.VAGen_SQLCODE != 100)
          converseLib.validationFailed(404); /* Label code not unique*/
          PK0EM001.XXXLOCID = "525"; /* Location of error*/
          set PK0EM001.PWRLBCD[PK0EW-WORK-IDX] cursor, bold;
        end
      end
    else
      if (PK0EM001.PK0EM-MAP-ACTION-CODE[PK0EW-WORK-IDX] == "C") /* Chg*/

        if (PK0EM001.PWRLBCD[PK0EW-WORK-IDX] != 
        PK0EW03.PWRLBCD[PK0EW-WORK-IDX]) /* Label cd changed*/

          if (PK0EM001.PWRLBCD[PK0EW-WORK-IDX] == "   ")
            converseLib.validationFailed(341); /* KEY FIELD REQUIRED*/
            PK0EM001.XXXLOCID = "525"; /* Location of error*/
            set PK0EM001.PWRLBCD[PK0EW-WORK-IDX] cursor, bold;
            set PK0EM001.PK0EM-MAP-ACTION-CODE[PK0EW-WORK-IDX] bold;

          else
            converseLib.validationFailed(412); /* KEY CHG NOT ALLOWED*/
            PK0EM001.XXXLOCID = "525"; /* Location of error*/
            set PK0EM001.PK0EM-MAP-ACTION-CODE[PK0EW-WORK-IDX] bold;
            set PK0EM001.PWRLBCD[PK0EW-WORK-IDX] cursor, bold;
          end
        else /* Using 'c' on a blank line...need to enter code*/
          if (PK0EM001.PWRLBCD[PK0EW-WORK-IDX] == "   ")
            converseLib.validationFailed(341); /* KEY FIELD REQUIRED*/
            PK0EM001.XXXLOCID = "525"; /* Location of error*/
            set PK0EM001.PWRLBCD[PK0EW-WORK-IDX] cursor, bold;
            set PK0EM001.PK0EM-MAP-ACTION-CODE[PK0EW-WORK-IDX] bold;
          end
        end
      end
    end

    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
    /* Validate DEPT ID*/
    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
    if (PK0EM001.XNXCD[PK0EW-WORK-IDX] in XNXTBL.XNXCD)
      /* next sentence*/
    else
      converseLib.validationFailed(402); /* Invalid dept id*/
      PK0EM001.XXXLOCID = "525"; /* Location of error*/
      set PK0EM001.XNXCD[PK0EW-WORK-IDX] cursor, bold;
    end

    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
    /* Validate CUSTOMER*/
    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
    if (PK0EM001.KUISKUID[PK0EW-WORK-IDX] > 0) /* Customer entered*/
      /* next sentence*/
    else

      converseLib.validationFailed(341); /* Required field*/
      PK0EM001.XXXLOCID = "525"; /* Location of error*/
      set PK0EM001.KUISKUID[PK0EW-WORK-IDX] cursor, bold;
    end

  end

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Validate FUNCTION CODE*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
  if (PK0EM001.PK0EM-MAP-ACTION-CODE[PK0EW-WORK-IDX] == "A" /* Add*/
   || PK0EM001.PK0EM-MAP-ACTION-CODE[PK0EW-WORK-IDX] == "C") /* Change*/
    PK0EW03.PK0EW-PAGE-TSK-CHG-SW = "Y"; /* Task change*/
  else

    if (PK0EM001.PK0EM-MAP-ACTION-CODE[PK0EW-WORK-IDX] == " ") /* No change*/
      PK0EW03.PK0EW-PAGE-TSK-CHG-SW = "N";
    else
      converseLib.validationFailed(35); /* Invalid action code*/
      PK0EM001.XXXLOCID = "525"; /* Location of error*/
      set PK0EM001.PK0EM-MAP-ACTION-CODE[PK0EW-WORK-IDX] cursor, bold;
    end

  end

end // end PK0E-525

// MOVE M001 TO W03
Function PK0E-530()

   /* ------------------------------------------------------------*/
   /* Move changed fields on the map (M001) to TEMP STORAGE (W03)*/
   /* ------------------------------------------------------------*/
  if (PK0EW03.PK0EW-PAGE-TSK-CHG-SW == "Y") /* Task changed flag*/
    PK0EW03.PK0EW-TMP-STOR-IDX = 1; /* Initialize index*/

    while (PK0EW03.PK0EW-TMP-STOR-IDX <= 11) /* 11 label code recs*/

      if (PK0EM001.PK0EM-MAP-ACTION-CODE[PK0EW-TMP-STOR-IDX] != " ")
                                                            /* Changed task*/
        PK0EW03.PK0EW-ACTION-CODE[PK0EW-TMP-STOR-IDX] = PK0EM001.PK0EM-MAP-ACTION-CODE[PK0EW-TMP-STOR-IDX];
        PK0EW03.KUISKUID[PK0EW-TMP-STOR-IDX] = PK0EM001.KUISKUID[PK0EW-TMP-STOR-IDX];
        PK0EW03.XNXCD[PK0EW-TMP-STOR-IDX] = PK0EM001.XNXCD[PK0EW-TMP-STOR-IDX];
        PK0EW03.PWRLBCD[PK0EW-TMP-STOR-IDX] = PK0EM001.PWRLBCD[PK0EW-TMP-STOR-IDX];
        PK0EW03.PWRLBABR[PK0EW-TMP-STOR-IDX] = PK0EM001.PWRLBABR[PK0EW-TMP-STOR-IDX];
        PK0EW03.PWRLBFMT[PK0EW-TMP-STOR-IDX] = PK0EM001.PWRLBFMT[PK0EW-TMP-STOR-IDX];
        PK0EW03.SY1STNBR[PK0EW-TMP-STOR-IDX] = PK0EM001.SY1STNBR[PK0EW-TMP-STOR-IDX];
        PK0EW03.PWRLBPRI[PK0EW-TMP-STOR-IDX] = PK0EM001.PWRLBPRI[PK0EW-TMP-STOR-IDX];
        PK0EW03.PWRLBQTY[PK0EW-TMP-STOR-IDX] = PK0EM001.PWRLBQTY[PK0EW-TMP-STOR-IDX];
        PK0EW03.PWRLBSSC[PK0EW-TMP-STOR-IDX] = PK0EM001.PWRLBSSC[PK0EW-TMP-STOR-IDX];
        PK0EW03.PWRLBPSC[PK0EW-TMP-STOR-IDX] = PK0EM001.PWRLBPSC[PK0EW-TMP-STOR-IDX];
        PK0EW03.XLRCD[PK0EW-TMP-STOR-IDX] = PK0EM001.XLRCD[PK0EW-TMP-STOR-IDX];
        PK0EW03.XXXSTAT[PK0EW-TMP-STOR-IDX] = PK0EM001.XXXSTAT[PK0EW-TMP-STOR-IDX];
      end
      PK0EW03.PK0EW-TMP-STOR-IDX = PK0EW03.PK0EW-TMP-STOR-IDX + 1;
                                                      /* Increment ts index*/
    end
  end

  if (PK0EW00.PK0EW-TEMP-STOR-DATA-SW == "Y") /* Temp storage has data*/
    PK0ES-12-UPDTMPSTR(); /* Update temp storage*/
  else
    PK0ES-01-ADDTMPSTR(); /* Add temp storage*/
  end
end // end PK0E-530

// VERIFY DATA FOR SCROLLING
Function PK0E-540()
   /* --------------------------------------------------------*/
   /* --------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* --------------------------------------------------------*/
   /* --------------------------------------------------------*/
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PK0EW00.XXXTSPAG < 2)       /* No previous pages*/

    converseLib.validationFailed(037); /* No previous pages to display*/
    PK0EM001.XXXLOCID = "540"; /* Display location on map*/

  end

   /* --------------------------------------------------------*/
   /* --------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* --------------------------------------------------------*/
   /* --------------------------------------------------------*/
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PK0EW00.XXXTSPAG >= PK0EW00.TA5TSQIX) /* No more pages*/

    converseLib.validationFailed(038); /* No more pages to display*/
    PK0EM001.XXXLOCID = "540"; /* Display location on map*/

  end

end // end PK0E-540

// PROCESS VALID INPUT REQUEST
Function PK0E-600()

   /* ------------------------------------------------------------*/
   /* Indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/
  PK0EW00.PK0EW-FMAT-MAP-SW = "Y"; /* Set format map switch*/

   /* ------------------------------------------------------------*/
   /* Update working storage W01*/
   /* ------------------------------------------------------------*/
  PK0E-610(); /* Move M001 to W01*/

   /* ------------------------------------------------------------*/
   /* Request to scroll back*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7) /* Backward*/
    PK0EW00.PK0EW-DATA-REQUEST-SW = "N";
    PK0EW00.XXXTSPAG = PK0EW00.XXXTSPAG - 1; /* Decrement page*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Request to scroll forward*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Forward*/
    PK0EW00.PK0EW-DATA-REQUEST-SW = "N";
    PK0EW00.XXXTSPAG = PK0EW00.XXXTSPAG + 1; /* Increment page*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Update label table*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter          
   && PK0EW00.PK0EW-SELECT-REQUEST-SW == "N" /* Select label cd not chgd*/
   && PK0EW00.PK0EW-ANY-TASK-CHGD-FL == "Y")
                                               /* Task on any page modified*/
    PK0EW00.PK0EW-TEMP-STOR-PAGE = PK0EW00.XXXTSPAG;
                                               /* Hold current page*/
    PK0E-620(); /* Update label codes*/
    PK0EW00.XXXTSPAG = PK0EW00.PK0EW-TEMP-STOR-PAGE;
                                               /* Get current temp storage*/
    return;
  end

end // end PK0E-600

// MOVE M001 TO W01
Function PK0E-610()
   /* ------------------------------------------------------------*/
   /* Move key data fields from the map (M001) to work rec (W01)*/
   /* ------------------------------------------------------------*/
  PK0EW01.PK0EM-MAP-LABL-TO-SELECT = PK0EM001.PK0EM-MAP-LABL-TO-SELECT; /* label code*/
  PK0EW01.PK0EM-MAP-CUST-TO-SELECT = PK0EM001.PK0EM-MAP-CUST-TO-SELECT; /* description*/
  PK0EW01.PK0EM-MAP-FRMT-TO-SELECT = PK0EM001.PK0EM-MAP-FRMT-TO-SELECT; /* format code*/


end // end PK0E-610

// UPDATE INSPECTION DATA
Function PK0E-620()
   /* ------------------------------------------------------------*/
   /* Read thru temporary storage*/
   /* ------------------------------------------------------------*/
  PK0EW00.XXXTSPAG = 1; /* First temp stor rec*/

  while (PK0EW00.XXXTSPAG <= PK0EW00.TA5TSQIX) /* All temp storage*/
    PK0ES-07-GETTMPSTR(); /* Read temp storage*/

    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
    /* update the label table*/
    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
    if (PK0EW00.PK0EW-ANY-TASK-CHGD-FL == "Y") /* Tasks on any page changed*/

      XX0XS01(); /* Obtain date/time for zz fields*/
      PK0EW03.PK0EW-TMP-STOR-IDX = 1; /* First task*/

      while (PK0EW03.PK0EW-TMP-STOR-IDX <= 11) /* Max possible lines on page*/


        /* ------------------------------------------------------------*/
        /* ------------------------------------------------------------*/
        /* A D D   N E W   R O W*/
        /* Each ADD is made with a new label code key - duplicates*/
        /* of key cannot exist, but rows with same data and different*/
        /* label codes are a possibility.*/
        /* ------------------------------------------------------------*/
        /* ------------------------------------------------------------*/

        if (PK0EW03.PK0EW-ACTION-CODE[PK0EW-TMP-STOR-IDX] == "A") /* ADD ROW*/

          PWRREC.KUISKUID = PK0EW03.KUISKUID[PK0EW-TMP-STOR-IDX];
                                                                /* Customer*/
          PWRREC.XNXCD = PK0EW03.XNXCD[PK0EW-TMP-STOR-IDX]; /* Dept id*/
          PWRREC.PWRLBCD = PK0EW03.PWRLBCD[PK0EW-TMP-STOR-IDX];
                                                                /* Store key*/
          PWRREC.PWRLBABR = PK0EW03.PWRLBABR[PK0EW-TMP-STOR-IDX];
                                                               /* Short desc*/
          PWRREC.PWRLBDSC = PK0EW03.PWRLBABR[PK0EW-TMP-STOR-IDX];
                                                                /* Long desc*/
          PWRREC.SY1STNBR = "04"; /* Stock gpc*/
          PWRREC.SY1STNBR = PK0EW03.SY1STNBR[PK0EW-TMP-STOR-IDX];
                                                                /* Stock nbr*/
          PWRREC.PWRLBFMT = PK0EW03.PWRLBFMT[PK0EW-TMP-STOR-IDX];
                                                               /* Format cd*/
          PWRREC.PWRLBPRI = PK0EW03.PWRLBPRI[PK0EW-TMP-STOR-IDX];
                                                                /* Prt flag*/
          PWRREC.PWRLBQTY = PK0EW03.PWRLBQTY[PK0EW-TMP-STOR-IDX];
                                                                /* # labels*/
          PWRREC.PWRLBSSC = PK0EW03.PWRLBSSC[PK0EW-TMP-STOR-IDX];
                                                               /* Style src*/
          PWRREC.PWRLBPSC = PK0EW03.PWRLBPSC[PK0EW-TMP-STOR-IDX];
                                                               /* Price src*/
          PWRREC.XLRCD = PK0EW03.XLRCD[PK0EW-TMP-STOR-IDX];
                                                                /* Ribn clr*/
          PWRREC.XXXSTAT = "A"; /* Default all status to active*/
          PWRREC.ZZZSDT = XX0XW01.XX0XWDAT;
          PWRREC.ZZZCHGDT = 0;
          PWRREC.ZZZCHGTM = 0;

          PK0ES-13-ADDNEWLBL(); /* Insert dpick.vzlabl01*/

          PK0EW00.PK0EW-DATA-UPDATED-SW = "Y"; /* Set update flag on*/
        end


        /* ------------------------------------------------------------*/
        /* ------------------------------------------------------------*/
        /* C H A N G E   T O   E X I S T I N G   R O W*/
        /* ------------------------------------------------------------*/
        /* ------------------------------------------------------------*/

        if (PK0EW03.PK0EW-ACTION-CODE[PK0EW-TMP-STOR-IDX] == "C")
                                                             /* CHANGE task*/

          PWRREC.PWRLBCD = PK0EW03.PWRLBCD[PK0EW-TMP-STOR-IDX];
                                                                /* Label cd*/
          PK0ES-10-GETUNQLBL(); /* Read label table*/

          if (SQLCA.VAGen_SQLCODE == 0) /* Normal return*/
            PWRREC.PWRLBCD = PK0EW03.PWRLBCD[PK0EW-TMP-STOR-IDX];
                                                                /* Label cd*/
            PWRREC.KUISKUID = PK0EW03.KUISKUID[PK0EW-TMP-STOR-IDX];
                                                                /* Customer*/
            PWRREC.XNXCD = PK0EW03.XNXCD[PK0EW-TMP-STOR-IDX];
                                                                 /* Dept id*/
            PWRREC.PWRLBABR = PK0EW03.PWRLBABR[PK0EW-TMP-STOR-IDX];
                                                               /* Short dsc*/
            PWRREC.PWRLBDSC = PK0EW03.PWRLBABR[PK0EW-TMP-STOR-IDX];
                                                                /* Long dsc*/
            PWRREC.SY1STNBR = "04"; /* Stock gpc*/
            PWRREC.SY1STNBR = PK0EW03.SY1STNBR[PK0EW-TMP-STOR-IDX];
                                                                 /* Stock #*/
            PWRREC.PWRLBFMT = PK0EW03.PWRLBFMT[PK0EW-TMP-STOR-IDX];
                                                               /* Format cd*/
            PWRREC.PWRLBPRI = PK0EW03.PWRLBPRI[PK0EW-TMP-STOR-IDX];
                                                                /* Prt flag*/
            PWRREC.PWRLBQTY = PK0EW03.PWRLBQTY[PK0EW-TMP-STOR-IDX];
                                                                /* # labels*/
            PWRREC.PWRLBSSC = PK0EW03.PWRLBSSC[PK0EW-TMP-STOR-IDX];
                                                               /* Style src*/
            PWRREC.PWRLBPSC = PK0EW03.PWRLBPSC[PK0EW-TMP-STOR-IDX];
                                                               /* Price src*/
            PWRREC.XLRCD = PK0EW03.XLRCD[PK0EW-TMP-STOR-IDX];
                                                               /* Ribbon cl*/
            PWRREC.XXXSTAT = "A"; /* Default all status to active*/
            PWRREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
            PWRREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

            PK0ES-02-UPDTLABEL(); /* Update dpick.vzlabl01*/

            PK0EW00.PK0EW-DATA-UPDATED-SW = "Y"; /* Set update flag on*/
          else
            if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback(); /* Roll back all changes*/
              set PK0EM001.PK0EM-MAP-ACTION-CODE[PK0EW-TMP-STOR-IDX] cursor, bold;
              converseLib.validationFailed(110); /* Record not found*/
              PK0EM001.XXXLOCID = "620"; /* Display location on map*/
              exit stack; /* Return to display error*/
            end
          end
        end


        /* ------------------------------------------------------------*/
        /* ------------------------------------------------------------*/
        /* N O T E -*/
        /*  */
        /* DELETE option is NOT ALLOWED because of the difficulty*/
        /* involved in verifying that a label code has no outstanding*/
        /* references by order or customer.  REFERENTIAL INTEGRITY*/
        /* issue.*/
        /* ------------------------------------------------------------*/
        /* ------------------------------------------------------------*/


        PK0EW03.PK0EW-TMP-STOR-IDX = PK0EW03.PK0EW-TMP-STOR-IDX + 1;
                                                      /* Increment index*/
      end

      PK0EW00.PK0EW-DATA-REQUEST-SW = "Y";
                                              /* Get new data after updates*/
    end
    PK0EW00.XXXTSPAG = PK0EW00.XXXTSPAG + 1; /* Increment temp storage page*/
  end
   /* -----------------------------------------------------*/
   /* commit all changes to protect resources*/
   /* -----------------------------------------------------*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/
end // end PK0E-620

// ADD TEMPORARY STORAGE
Function PK0ES-01-ADDTMPSTR()

   /* ------------------------------------------------------------*/
   /* Add page to temporary storage.*/
   /* ------------------------------------------------------------*/
  PK0EW03.XXXTSLEN = PK0EW00.XXXTSLEN; /* Temp storage length*/
  TA5REC.TA5APPID = "PK0E"; /* Application id*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (PK0EW03, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temp stor subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    PK0EM001.XXXLOCID = "S01"; /* Display location on map*/

    converseLib.validationFailed(229); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0ES01"; /* PK0E module id*/
    TA1REC.TA1LOC = "ADD PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PK0EM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    return; /* Return to previous process*/

  end

  PK0EW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page*/
  PK0EW00.XXXTSPAG = TA5REC.TA5TSQIX; /* Last page for upd*/
  PK0EW00.PK0EW-TEMP-STOR-DATA-SW = "Y"; /* Temp stor data present*/

end // end PK0ES-01-ADDTMPSTR

// UPDATE 'U' DPICK.VZLABL01
Function PK0ES-02-UPDTLABEL()

   /* ------------------------------------------------------------*/
   /* Update DPICK.VZLABL01 table using 'current' key*/
   /* ------------------------------------------------------------*/
  XX0XS01(); /* get current time and date*/

  PWRREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PWRREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO5750" ("U ", SQLCA, PWRREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PK0EM001.XXXLOCID = "S02"; /* Display location on map*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(229); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DPICK.VZLABL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PK0ES02"; /* PK0E module id*/
  TA1REC.TA1DBASE = "DPICK  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VZLABL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PK0ES-02-UPDTLABEL

// CLOSE CSR DPICK.VZLABL01
Function PK0ES-03-CLOSLABEL()

   /* ------------------------------------------------------------*/
   /* Close DPICK.VZLABL01 row*/
   /* ------------------------------------------------------------*/
  set PKZREC empty;

  if (PK0EM001.PK0EM-MAP-LABL-TO-SELECT > "   ") /* LABEL CODE WAS REQUESTED*/
    PKZREC.PKZFUNC = "C1"; /* Use 1st set close (IO5750)*/
  else
    if (PK0EM001.PK0EM-MAP-CUST-TO-SELECT > 0) /* CUSTOMER WAS REQUESTED*/
      PKZREC.PKZFUNC = "C2"; /* Use 2nd set close (IO5750)*/
    else
      if (PK0EM001.PK0EM-MAP-FRMT-TO-SELECT > 0) /* FORMAT CODE WAS REQUESTED*/
        PKZREC.PKZFUNC = "C3"; /* Use 3rd set close (IO5750)*/
      else
        PKZREC.PKZFUNC = "C1"; /* Use 1st set close (IO5750)*/
      end
    end
  end

  try
    call "IO5750" (PKZREC, SQLCA, PWRREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
  end

  PK0EM001.XXXLOCID = "S03"; /* Display loc on map*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 DPICK.VZLABL01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PK0ES03"; /* PK0E module id*/
  TA1REC.TA1DBASE = "DPICK  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VZLABL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK0EW01.PK0EW-LABEL-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PK0ES-03-CLOSLABEL

// FETCH NEXT DPICK.VZLABL01
Function PK0ES-04-FETCHLABL()

   /* ------------------------------------------------------------*/
   /* Fetch set DPICK.VZLABL01*/
   /* ------------------------------------------------------------*/
  set PKZREC empty;
   /* Determine the correct fetch function using same logic that*/
   /* determined select set (see PK0ES03).*/

  if (PK0EM001.PK0EM-MAP-LABL-TO-SELECT > "   ") /* LABEL CODE WAS REQUESTED*/
    PKZREC.PKZFUNC = "N1"; /* Use 1st set fetch (IO5750)*/
  else
    if (PK0EM001.PK0EM-MAP-CUST-TO-SELECT > 0) /* CUSTOMER WAS REQUESTED*/
      PKZREC.PKZFUNC = "N2"; /* Use 2nd set fetch (IO5750)*/
    else
      if (PK0EM001.PK0EM-MAP-FRMT-TO-SELECT > 0) /* FORMAT CODE WAS REQUESTED*/
        PKZREC.PKZFUNC = "N3"; /* Use 3rd set fetch (IO5750)*/
      else
        PKZREC.PKZFUNC = "N1"; /* Use 1st set fetch (IO5750)*/
      end
    end
  end

  try
    call "IO5750" (PKZREC, SQLCA, PWRREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      PK0EW00.PK0EW-CSR-EOF-SW = "Y"; /* End of file*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PK0EM001.XXXLOCID = "S04"; /* Display loc on map*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(108); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(229); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT N1 TABLE DPICK.VZLABL01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PK0ES04"; /* PK0E module id*/
  TA1REC.TA1DBASE = "DPICK  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VZLABL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK0EW01.PK0EW-LABEL-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PK0ES-04-FETCHLABL

// VERIFY KEY AS NON-DUPLICATE
Function PK0ES-05-VERIFYKEY()

   /* ------------------------------------------------------------*/
   /* Verify that the key entered by the user is not a duplicate.*/
   /* Users assign label code which is the primary key into this*/
   /* this table.  Verify that the code they have entered*/
   /* does not already exist.*/
   /* ------------------------------------------------------------*/
  try
    call "IO5750" ("S ", SQLCA, PWRREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select uniq*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Label code found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Label code not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PK0EM001.XXXLOCID = "S05"; /* Display loc on map*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(108); /* Indicate not available*/
    PK0EM001.XXXLOCID = "S05"; /* Display location on map*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(229); /* Indicate system error*/
    PK0EM001.XXXLOCID = "S05"; /* Display location on map*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DPICK.VZLABL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PK0ES05"; /* PK0E module id*/
  TA1REC.TA1DBASE = "DPICK  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VZLABL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PK0ES-05-VERIFYKEY

// PURGE TEMPORARY STORAGE
Function PK0ES-06-PRGTMPSTR()

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  set PK0EW03 empty; /* M001 temporary storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PK0EW00.TA5TSQIX = 0; /* Highest page number*/
  PK0EW00.XXXTSPAG = 0; /* INIT TEMP STORAGE PAGE*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PK0EW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (TA5REC.TA5RTNCD == 0 /* and normal return code*/
     || TA5REC.TA5RTNCD == 4) /* and not found*/
      PK0EW00.PK0EW-TEMP-STOR-DATA-SW = "N"; /* No temp stor data*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  PK0EM001.XXXLOCID = "S06"; /* Display loc on map*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  converseLib.validationFailed(229); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PK0ES06"; /* PK0E module id*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PK0ES-06-PRGTMPSTR

// READ TEMPORARY STORAGE
Function PK0ES-07-GETTMPSTR()

   /* ------------------------------------------------------------*/
   /* Obtain the next page of label codes to display*/
   /* ------------------------------------------------------------*/
  PK0EW03.XXXTSLEN = PK0EW00.XXXTSLEN; /* Temp storage length*/
  TA5REC.TA5TSQIX = PK0EW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5APPID = "PK0E"; /* Appl identification*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (PK0EW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && TA5REC.TA5RTNCD == 0)          /* Normal return code*/
    return; /* Return to previous process*/
  end

  PK0EM001.XXXLOCID = "S07"; /* Display loc on map*/

  converseLib.validationFailed(229); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = "PK0ES07"; /* PK0E module id*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1MAP = "PK0EM001"; /* Map name*/
  SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

end // end PK0ES-07-GETTMPSTR

// SELECT SET DPICK.VXLABL01
Function PK0ES-08-NEWLBLSET()

   /* ------------------------------------------------------------*/
   /* Select set DPICK.VZLABL01*/
   /* ------------------------------------------------------------*/
  set PKZREC empty;

   /* Determine which IO5750 select set to use based on select criteria*/

  if (PK0EM001.PK0EM-MAP-LABL-TO-SELECT > "   ") /* LABEL CODE WAS REQUESTED*/
    PKZREC.PKZFUNC = "S1"; /* Use 1st select set in IO5750*/
  else
    if (PK0EM001.PK0EM-MAP-CUST-TO-SELECT > 0) /* CUSTOMER WAS REQUESTED*/
      PKZREC.PKZFUNC = "S2"; /* Use 2nd select set in IO5750*/
    else
      if (PK0EM001.PK0EM-MAP-FRMT-TO-SELECT > 0) /* FORMAT CODE WAS REQUESTED*/
        PKZREC.PKZFUNC = "S3"; /* Use 3rd select set in IO5750*/
      else
        PKZREC.PKZFUNC = "S1"; /* Drop through logic*/
      end
    end
  end

  try
    call "IO5750" (PKZREC, SQLCA, PWRREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(108); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(229); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  PK0EM001.XXXLOCID = "S08"; /* Display loc on map*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DPICK.VZLABL01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PK0ES08"; /* PK0E module id*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VZLABL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK0EW01.PK0EW-LABEL-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PK0ES-08-NEWLBLSET

// SELECT 'S' DPICK.VZLABL01 ROW
Function PK0ES-10-GETUNQLBL()

   /* ------------------------------------------------------------*/
   /* Select DPICK.VZLABL01 table row*/
   /* ------------------------------------------------------------*/
  set PKZREC empty;
  PKZREC.PKZFUNC = "S ";

  try
    call "IO5750" (PKZREC, SQLCA, PWRREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unq*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
   || SQLCA.VAGen_SQLCODE == -811) /* More than one row*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PK0EM001.XXXLOCID = "S10"; /* Display loc on map*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(108); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PK0ES10"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VZLABL01"; /* Table view name*/
  PK0EW01.PK0EM-MAP-LABL-TO-SELECT = PWRREC.PWRLBCD; /* Label code*/
  TA1REC.TA1TBLKE = PK0EW01.PK0EW-LABEL-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PK0ES-10-GETUNQLBL

// SELECT 'S' DPICK.VPKSTY01
Function PK0ES-11-GETPKSTYL()

   /* ------------------------------------------------------------*/
   /* Get color and style*/
   /* ------------------------------------------------------------*/
  try
    call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
    )                           
      /* CANADA 08/11/95*/

      if (PKWREC.XCTCD == "CANA")

        /* format ta1rec in case of bad return code from call to SY2000*/

        TA1REC.TA1PGMNM = "PK0E"; /* CANA program name*/
        TA1REC.TA1LOC = "PK0ES-11-GETPKSTYL"; /* CANA sgrp name*/

        XSPK-CALL-SY2000(); /* CANA call SY2000 to get*/
                                /* product region record*/
        if (WSY2000.WSY2000-RETURN-CODE == 0) /* CANA row found*/
          return;
        else
          if (WSY2000.WSY2000-RETURN-CODE == 02) /* CANA row not found*/
            converseLib.validationFailed(498); /* Invalid stock number for region*/
            PK0EM001.XXXLOCID = "S11"; /* Location of error*/
            set PK0EM001.SY1STNBR[PK0EW-WORK-IDX] cursor, bold;
            return;
          else
            if (WSY2000.WSY2000-RETURN-CODE == 98) /* CANA database busy*/
              converseLib.validationFailed(108); /* Indicate not available*/
              TA1REC.TA1FUNC = "POST"; /* Termination function*/
            else
              converseLib.validationFailed(229); /* Indicate system error*/
              TA1REC.TA1FUNC = "RETN"; /* Termination function*/
              converseLib.clearScreen();
               /* Clear screen before display*/
            end
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1LOC = "CALL SY2000";
            TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program appl*/
            TA1REC.TA1PGMNM = "PK0ES11"; /* Program number*/
            TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
            TA1REC.TA1TBLVU = "VSYREG02"; /* Table view name*/
            TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/

                                   /* Error diagnosis routine*/
            call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

            exit stack; /* Exit to display map*/

          end
        end
      end
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PK0EM001.XXXLOCID = "S11"; /* Display loc on map*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(108); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(229); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PK0ES11"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PK0ES-11-GETPKSTYL

// UPDATE TEMPORARY STORAGE
Function PK0ES-12-UPDTMPSTR()

   /* ------------------------------------------------------------*/
   /* Update page to temporary storage.*/
   /* ------------------------------------------------------------*/
  PK0EW03.XXXTSLEN = PK0EW00.XXXTSLEN; /* Temp storage length*/
  TA5REC.TA5TSQIX = PK0EW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5APPID = "PK0E"; /* Appl identification*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  call "TA0050" (PK0EW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end

  converseLib.validationFailed(229); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  PK0EM001.XXXLOCID = "S12"; /* Display loc on map*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = "PK0ES12"; /* Process name*/
  TA1REC.TA1LOC = "UPDATE PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1MAP = "PK0EM001"; /* Map name*/
  SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PK0ES-12-UPDTMPSTR

// INSERT 'A' DPICK.VZLABL01
Function PK0ES-13-ADDNEWLBL()

   /* ------------------------------------------------------------*/
   /* Determine the next available label code for adding the*/
   /* new record.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Add DPICK.VZLABL01 table using 'current' key*/
   /* ------------------------------------------------------------*/
  PWRREC.XGPCD = "04"; /* Always '04'*/
  PWRREC.ZZZSDT = XX0XW01.XX0XWDAT;

  try
    call "IO5750" ("A ", SQLCA, PWRREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PK0EM001.XXXLOCID = "S13"; /* Display loc on map*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(108); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(229); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DPICK.VZLABL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PK0ES13"; /* PK0E module id*/
  TA1REC.TA1DBASE = "DPICK  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VZLABL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PK0ES-13-ADDNEWLBL

// converse pop up window
Function XPXLR01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XLRTBL.XLRCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XLRTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XLRTBL.XLRCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XLRTBL.XLRDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XLRTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XLRTBL.XLRCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XLRTBL.XLRDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XLRTBL.XLRCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXLR01

//*** RECORD=PK0EW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 
// ***********************
Record PK0EW00 type basicRecord
  10 PK0EW-DATA-REQUEST-SW PK0EW-DATA-REQUEST-SW ; 
  10 PK0EW-FMAT-MAP-SW PK0EW-FMAT-MAP-SW ; 
  10 PK0EW-SELECT-REQUEST-SW PK0EW-SELECT-REQUEST-SW ; 
  10 PK0EW-CSR-EOF-SW PK0EW-CSR-EOF-SW ; 
  10 PK0EW-DATA-UPDATED-SW PK0EW-DATA-UPDATED-SW ; 
  10 PK0EW-TEMP-STOR-DATA-SW PK0EW-TEMP-STOR-DATA-SW ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 PK0EW-WORK-IDX PK0EW-WORK-IDX ; 
  10 PK0EW-REMAINING-LINES PK0EW-REMAINING-LINES ; 
  10 PK0EW-HOLD-IDX PK0EW-HOLD-IDX ; 
  10 PK0EM-MAP-CUST-TO-SELECT PK0EM-MAP-CUST-TO-SELECT ; 
  10 PK0EM-MAP-LABL-TO-SELECT PK0EM-MAP-LABL-TO-SELECT ; 
  10 PK0EM-MAP-FRMT-TO-SELECT PK0EM-MAP-FRMT-TO-SELECT ; 
  10 PWRLBCD PWRLBCD ; 
  10 PWRLBDSC PWRLBDSC ; 
  10 PWRLBABR PWRLBABR ; 
  10 SY1STNBR SY1STNBR ; 
  10 PWRLBPRI PWRLBPRI ; 
  10 PWRLBFMT PWRLBFMT ; 
  10 XLRCD XLRCD ; 
  10 PWRLBQTY PWRLBQTY ; 
  10 PWRLBSSC PWRLBSSC ; 
  10 PWRLBPSC PWRLBPSC ; 
  10 XXXSTAT XXXSTAT ; 
  10 PK0EW-TEMP-STOR-PAGE PK0EW-TEMP-STOR-PAGE ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 PK0EW-LABEL-CD-NUM PK0EW-LABEL-CD-NUM ; 
  10 PK0EW-ANY-TASK-CHGD-FL PK0EW-ANY-TASK-CHGD-FL ; 
end // end PK0EW00

//*** RECORD=PK0EW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// ***********************
Record PK0EW01 type basicRecord
  5 PK0EW-W01-GROUP-LEVEL PK0EW-W01-GROUP-LEVEL ; 
    10 PK0EW-LABEL-KEY PK0EW-LABEL-KEY ; 
    10 XXXLOCID XXXLOCID ; 
    10 PK0EM-MAP-LITERAL-PAGE PK0EM-MAP-LITERAL-PAGE ; 
    10 XXXTSPAG XXXTSPAG ; 
    10 PK0EM-MAP-LITERAL-OF PK0EM-MAP-LITERAL-OF ; 
    10 TA5TSQIX TA5TSQIX ; 
    10 XXXCURDT XXXCURDT ; 
    10 CACHGFL CACHGFL ; 
    10 PK0EM-MAP-LABL-TO-SELECT PK0EM-MAP-LABL-TO-SELECT ; 
    10 PK0EM-MAP-CUST-TO-SELECT PK0EM-MAP-CUST-TO-SELECT ; 
    10 PK0EM-MAP-FRMT-TO-SELECT PK0EM-MAP-FRMT-TO-SELECT ; 
    10 * char(34) [11] ; 
      15 PK0EM-MAP-ACTION-CODE PK0EM-MAP-ACTION-CODE ; 
      15 KUISKUID KUISKUID ; 
      15 XNXCD XNXCD ; 
      15 PWRLBCD PWRLBCD ; 
      15 PWRLBABR PWRLBABR ; 
      15 PWRLBFMT PWRLBFMT ; 
      15 SY1STNBR SY1STNBR ; 
      15 PWRLBPRI PWRLBPRI ; 
      15 PWRLBQTY PWRLBQTY ; 
      15 PWRLBSSC PWRLBSSC ; 
      15 PWRLBPSC PWRLBPSC ; 
      15 XLRCD XLRCD ; 
      15 XXXSTAT XXXSTAT ; 
    10 PK0EM-MAP-ERROR-MSG PK0EM-MAP-ERROR-MSG ; 
    10 CATOAP CATOAP ; 
    10 CAITEM CAITEM ; 
end // end PK0EW01

//*** RECORD=PK0EW03 ****
// ;-----------------------------------------------------------
// ; WORKING STORAGE FOR BUILDING TEMP STORAGE RECORDS
// ;-----------------------------------------------------------
// ***********************
Record PK0EW03 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 PK0EW-W03-GROUP-LEVEL PK0EW-W03-GROUP-LEVEL ; 
    10 PK0EW-TMP-STOR-IDX PK0EW-TMP-STOR-IDX ; 
    10 PK0EW-MAX-LINES PK0EW-MAX-LINES ; 
    10 PK0EW-COUNTER PK0EW-COUNTER ; 
    10 PK0EW-PAGE-TSK-CHG-SW PK0EW-PAGE-TSK-CHG-SW ; 
    10 * char(1) ; 
    10 PK0EM-MAP-LABL-TO-SELECT PK0EM-MAP-LABL-TO-SELECT ; 
    10 PK0EM-MAP-CUST-TO-SELECT PK0EM-MAP-CUST-TO-SELECT ; 
    10 PK0EM-MAP-FRMT-TO-SELECT PK0EM-MAP-FRMT-TO-SELECT ; 
    10 PK0EWMGP char(44) [11] ; // Map group - details
      15 PK0EW-ACTION-CODE PK0EW-ACTION-CODE ; 
      15 KUISKUID KUISKUID ; 
      15 XNXCD XNXCD ; 
      15 PWRLBCD PWRLBCD ; 
      15 PWRLBABR PWRLBABR ; 
      15 PWRLBFMT PWRLBFMT ; 
      15 SY1STNBR SY1STNBR ; 
      15 PWRLBPRI PWRLBPRI ; 
      15 PWRLBQTY PWRLBQTY ; 
      15 PWRLBSSC PWRLBSSC ; 
      15 PWRLBPSC PWRLBPSC ; 
      15 XLRCD XLRCD ; 
      15 XXXSTAT XXXSTAT ; 
      15 ZZZSDT ZZZSDT ; 
      15 ZZZCHGDT ZZZCHGDT ; 
      15 ZZZCHGTM ZZZCHGTM ; 
end // end PK0EW03

// Action Code
DataItem PK0EM-MAP-ACTION-CODE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Requested Description
DataItem PK0EM-MAP-CUST-TO-SELECT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Error Message
DataItem PK0EM-MAP-ERROR-MSG char(77)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0EM-MAP-FRMT-TO-SELECT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Label Code Requested
DataItem PK0EM-MAP-LABL-TO-SELECT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "OF" literal
DataItem PK0EM-MAP-LITERAL-OF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "PAGE" literal
DataItem PK0EM-MAP-LITERAL-PAGE char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Action code
DataItem PK0EW-ACTION-CODE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Task changed on any page
DataItem PK0EW-ANY-TASK-CHGD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Count field
DataItem PK0EW-COUNTER num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// Select eof
DataItem PK0EW-CSR-EOF-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PK0EW-DATA-REQUEST-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data updated switch
DataItem PK0EW-DATA-UPDATED-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem PK0EW-FMAT-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hold index
DataItem PK0EW-HOLD-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// LABEL CODE (NUMERIC FORMAT)
DataItem PK0EW-LABEL-CD-NUM num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// LABEL TABLE KEY
DataItem PK0EW-LABEL-KEY char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max lines per page
DataItem PK0EW-MAX-LINES smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Task changed on this page
DataItem PK0EW-PAGE-TSK-CHG-SW char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Remaining lines
DataItem PK0EW-REMAINING-LINES smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// request product flag
DataItem PK0EW-SELECT-REQUEST-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data updated switch
DataItem PK0EW-TEMP-STOR-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hold temporary storage page
DataItem PK0EW-TEMP-STOR-PAGE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// temp storage index
DataItem PK0EW-TMP-STOR-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK0EW01 group level
DataItem PK0EW-W01-GROUP-LEVEL char(521)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0EW-W03-GROUP-LEVEL char(510)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work index
DataItem PK0EW-WORK-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

