package pk0v;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import in1.common.*;
import pk.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PK0V ****
// 
//  ************** pk0v: order type selection *****************
//  **************       pick planning        *****************
// 
// 
// purpose:  An order type entered here along with total units
//          for that order type will result in orders for that
//          order type being processed tonight.
//           The units selected for each order type and
//          sequence number will actually determine how many
//          orders for each order type are processed (that is
//          it may be that not all orders for a particular
//          order type are processed).
// 
// 
// 
// narrative:
//     Enter the order types that are to be selected along with
//    the number of units desired and the sequence number of
//    the order type.  The sequence number will determine the
//    order that the order types will be processed in.
//     There is a field at the bottom of the screen for
//    entering the units of stock transfers desired and the
//    limit of rps and ups units the user desires.
// 
//     All order types already selected will be displayed when
//    this screen is first entered (these will be pick planning
//    order types).  They will be displayed in sequence number
//    order.
// 
//     In order to delete an order type the user will enter
//    0 in the units field.
// 
//     The user will add an order type by using a blank line
//    (if the screen is full the user may have to page forward
//    a blank line) or by overtyping an already existing ot.
// 
//   maintenance history:
// 
//    date      name      description
//  --------  ---------  --------------------------------------
//  08-24-87  PRM        created
//  11-29-88  JWOOD      ADDED NONCSP OPTION TO CALLS
//  11-29-88  JWOOD      ADDED XSSEGTR LOGIC
//  07-21-89  jcampb     changed xfer from pk0i to pk09
//  08-11-95  CBRINE     CANADA Added XCTCD to PKWREC
// 
// ************************************************************
// 
//  02-04-98  NGANGO     Y2K MODIFICATION - Modified Stmt group
//                       Pk0V084 and PK0V094. Also to follow
//                       the Standard NIKE naming standard the
//                       Stmt. Groups PK0V081,PK0V082,PK0V083,
//                       Pk0V084,PK0V091,PK0V093,PK0V094 are
//                       renamed as PK0VS81,PK0VS82,PK0VS83,
//                       Pk0VS84,PK0VS91,PK0V093 and PK0V094
//                       respectively. Also for that Process
//                       PK0V080 and PK0V090 also modified
//                       accordingly .
// ************************************************************
// 
// *********************
Program PK0V type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK0VW01 PK0VW01; // record
  PK0VW02 PK0VW02; // record
  PKRREC PKRREC; // record
  PKUREC PKUREC; // record
  PKWREC PKWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XOTTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use PK0VM.PK0VM030 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PK0V005: PK0V005();

    goto PK0V010;



    PK0V010: PK0V010();

    goto PK0V010;


  end // end main
end // end PK0V

// main process
Function PK0V005()

   /* ----------------------------------------------------------*/
   /* initialization process....*/
   /* ----------------------------------------------------------*/






  set PKWREC empty; /* clear work records*/
  set PK0VW01 empty;
  set PK0VW02 empty;
  set SQLCA empty;


  XPPK001(); /* app initial.*/
  PK0VM030.XWHCD = PKWREC.XWHCD;
  if (converseVar.validationMsgNum == 2 /* invalid  warehouse*/
   || converseVar.validationMsgNum == 3 /* inactive warehouse*/
   || converseVar.validationMsgNum == 4) /* warehouse required*/
    set PK0VM030.XWHCD cursor, modified, bold; /* hilite warehouse*/
    PKWREC.XWHCD = " "; /* warehouse*/
  end
  if (converseVar.validationMsgNum == 0) /* valid warehouse*/
    PK0VM030.XWHCD = PKWREC.XWHCD;
    PK0V021(); /* Format map heading area*/
    PK0VW01.PK0VWTOP = 1; /* set top of page subscript*/
    PK0V022(); /* ss order type rows*/
    if (converseVar.validationMsgNum == 0) /* no database errors*/
      PK0V024(); /* ss misc. qtys rows*/
      if (converseVar.validationMsgNum == 0) /* no database errors*/
        PK0V023(); /* format screen*/
      end
    end
  end





  COMMAREA.CAFROMAP = COMMAREA.CACURRAP; /* save current application*/





  PKWREC.PKWINDEX = 0;
  PKWREC.PKWCNTRL = " ";




   /* -------------  end process pk0v005  --------------------*/
end // end PK0V005

// select by order type
Function PK0V010()


  PK0V020(); /* format output*/



  PK0V030(); /* converse map*/




   /* *********************************************/
   /* ** if table overflow has occured           **/
   /* **     go back to main selection menu      **/
   /* *********************************************/
  if (PK0VW01.PK0VWFL1 == "Y") /* table overflow flag*/
    converseLib.validationFailed(24);
    PK0V030(); /* converse map*/
    COMMAREA.CATOAP = "PK0S"; /* pick planning Menu*/
    PKWREC.XWHCD = PK0VM030.XWHCD; /* Save in work area*/
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* COMMAREA user area*/
    XSEXIT(); /* Invoke selected application*/
    PK0VM030.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    exit stack; /* ; Exit to redisplay map*/
  end





  if (PKWREC.XWHCD == " " /* receiving warehouse from map*/
   && converseVar.eventKey not pf3)
    exit stack;
  end





  PK0VW01.PK0VWUPD = "N"; /* database update flag.*/

  PK0V040(); /* validate pfkeys keys*/




  if (converseVar.validationMsgNum == 0)
    PK0V050(); /* validate inputs*/
  end


  if (converseVar.validationMsgNum == 0) /* ; no errors*/
    if (PKWREC.XWHCD == PK0VM030.XWHCD)
      if (converseVar.eventKey is pf12)
            /* no more processing*/
      else
        if (PK0VW01.PK0VWED1 == "N" /* data modified*/
         && PK0VW01.PK0VWED2 == "N") /* data modified*/
          /* no more processing*/
        else
          if (PK0VW01.PK0VWED1 == "Y") /* edits-all-ok-flag*/
            PK0V080(); /* update databases*/
          end
          if (PK0VW01.PK0VWED2 == "Y") /* edits-all-ok-flag*/
            PK0V090(); /* update databases*/
          end
        end
      end
    end
  end



   /* ------------------- end pk0m010 -------------------------*/
end // end PK0V010

// Format the output display
Function PK0V020()


   /* ------------------------------------------------------------*/
   /* first time through or a change in warehouse, the map is*/
   /* reformatted with new data.*/
   /* warehouse is highlited if invalid.*/
   /* ------------------------------------------------------------*/





     /* ***********************************/
     /* *  if changed warehouse          **/
     /* *      get warehouse abbrev.     **/
     /* *      if lookup not successful  **/
     /* *         get out                **/
     /* *      else                      **/
     /* *         load new warehouse's   **/
     /* *         data into map and array**/
     /* ***********************************/
  if (PKWREC.XWHCD != PK0VM030.XWHCD) /* change in warehouse*/
    set PK0VW01 empty;
    PKWREC.XWHCD = PK0VM030.XWHCD; /* warehouse*/
    XPPK002(); /* validate warehouse*/
    if (converseVar.validationMsgNum == 2 /* invalid  warehouse*/
     || converseVar.validationMsgNum == 3 /* inactive warehouse*/
     || converseVar.validationMsgNum == 4) /* warehouse required*/
      set PK0VM030.XWHCD cursor, modified, bold; /* hilite warehouse*/
      PKWREC.XWHCD = " "; /* warehouse*/
      return;
    end
    set PK0VM030.XWHCD normal;
    if (converseVar.validationMsgNum == 0) /* valid warehouse*/
      PK0V021(); /* Format map heading area*/
      PK0VW01.PK0VWTOP = 1; /* set top of page subscript*/
      PK0V022(); /* ss order type rows*/
      if (converseVar.validationMsgNum == 0) /* no database errors*/
        PK0V024(); /* ss misc. qtys rows*/
        if (converseVar.validationMsgNum == 0) /* no database errors*/
          PK0V023(); /* format screen*/
        end
      end
    end
  end

     /* ***********************************/
     /* *   * database was updated.      **/
     /* *   * refresh the array,         **/
     /* *   * the map, set ezemno        **/
     /* *   * to 'updated' and get out   **/
     /* ***********************************/
  if (PK0VW01.PK0VWUPD == "Y") /* database updated*/
    move PK0VW02 to PK0VW01 withV60Compat; /* initialize data base save area*/
    PK0V022(); /* ss customers*/
    PK0V024(); /* ss pack&hold row*/
    PK0V021(); /* format headings*/
    PK0V023(); /* format screen*/
    if (converseVar.eventKey not pa2)
      converseLib.validationFailed(32);
    end
    return;
  end




     /* ***********************************/
     /* *   * only paging is required *  **/
     /* *   *                            **/
     /* *   * if at the beginning or end **/
     /* *   * of the map, is's an error. **/
     /* *   * subtract 24 from variable  **/
     /* *   * holding top of map value   **/
     /* *   * when page backward is      **/
     /* *   * requested.                 **/
     /* *   * add 24 to variable         **/
     /* *   * holding top of map value   **/
     /* *   * when page forward is       **/
     /* *   * requested.                 **/
     /* ***********************************/

  if (converseVar.eventKey is pf7) /* page backward*/
    if (PK0VW01.PK0VWTOP == 1)
      converseLib.validationFailed(37);
    end
    if (PK0VW01.PK0VWTOP != 1)
      PK0VW01.PK0VWTOP = PK0VW01.PK0VWTOP - 24; /* set top of page*/
      PK0V021(); /* format map heading*/
      PK0V023(); /* format screen*/
    end
  end

  if (converseVar.eventKey is pf8) /* page forward*/
    PK0VW01.PK0VWTOP = PK0VW01.PK0VWTOP + 24; /* set top of page*/
    if (PK0VW01.PK0VWTOP <= PK0VW01.PK0VWMAX)
      PK0V021(); /* format map heading*/
      PK0V023(); /* format screen*/
    end
    if (PK0VW01.PK0VWTOP > PK0VW01.PK0VWMAX)
      PK0VW01.PK0VWTOP = PK0VW01.PK0VWTOP - 24; /* reset top of page*/
      converseLib.validationFailed(38); /* no more pages to display*/
    end
  end




  if (converseVar.validationMsgNum == 2 /* invalid  warehouse*/
   || converseVar.validationMsgNum == 3 /* inactive warehouse*/
   || converseVar.validationMsgNum == 4) /* warehouse required*/
    set PK0VM030.XWHCD cursor, modified, bold; /* hilite warehouse*/
  end





end // end PK0V020

// format map heading
Function PK0V021()
   /* ---------------------------------------------------*/
      /* format map headings...........*/
   /* ---------------------------------------------------*/


  set PK0VM030 initial; /* clear map area*/
  set PKUREC empty; /* empty select order type table*/
  set PKRREC empty; /* empty select pack & hold table*/

  PK0VM030.XXXERRID = "PK0V021"; /* format location*/
  PK0VM030.XXXCURDT = VGVar.currentShortGregorianDate; /* date to map*/
  PK0VM030.XWHCD = PKWREC.XWHCD; /* warehouse code*/
  PK0VM030.XWHABRV = PKWREC.XWHABRV; /* warehouse abbrev.*/
  PK0VM030.XXXRVNBR = "01"; /* warehouse abbrev.*/
  converseLib.validationFailed(0); /* reset any error*/



end // end PK0V021

// obtain set order type rows
Function PK0V022()
   /* ----------------------------------------------------*/
     /* load working storage with order type selection rows*/
             /* -  non planned only   -*/
   /* ----------------------------------------------------*/


  PKUREC.XWHCD = PKWREC.XWHCD;
  PKUREC.PKURUNMD = "P"; /* ; non-planned mode*/

  call "IO2020" ("S1", SQLCA, PKUREC) {isNoRefresh = yes, isExternal = yes}; /* ; ss on customers*/

  if (SQLCA.VAGen_SQLCODE != 0) /* ; unexpected return*/
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST"; /* ; term. function*/
      TA1REC.TA1LOC = "SELECT";
      TA1REC.TA1TYPE = "DB2 "; /* ; type of error*/
      TA1REC.TA1PGMNM = "PK0V022"; /* process name*/
      TA1REC.TA1MAP = "PK0VM030"; /* map name*/
      TA1REC.TA1DBASE = "DPICK   "; /* database name*/
      TA1REC.TA1TBLVU = "VSELOT01"; /* table view name*/
      TA1REC.TA1TBLKE = PKWREC.XWHCD; /* table key*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
      converseLib.validationFailed(28);
    else
      if (SQLCA.VAGen_SQLCODE != 100)
        converseLib.validationFailed(29); /* ; indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* ; term. function*/
        TA1REC.TA1LOC = "SELECT";
        TA1REC.TA1TYPE = "DB2 "; /* ; type of error*/
        TA1REC.TA1PGMNM = "PK0V022"; /* process name*/
        TA1REC.TA1MAP = "PK0VM030"; /* map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* database name*/
        TA1REC.TA1TBLVU = "VSELOT01"; /* table view name*/
        TA1REC.TA1TBLKE = PKWREC.XWHCD; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
        return;
      end
    end
  end



  if (SQLCA.VAGen_SQLCODE == 0) /* ; good return from s2 above*/
    PK0VW01.PK0VWMAX = 0; /* ; records read in counter*/
    while (SQLCA.VAGen_SQLCODE == 0 /* ; good return within loop*/
     && PK0VW01.PK0VWMAX <= 100) /* ; table maximum*/
      call "IO2020" ("N1", SQLCA, PKUREC) {isNoRefresh = yes, isExternal = yes}; /* fetch next record*/

      if (SQLCA.VAGen_SQLCODE == 0) /* ; good fetch*/
        PK0VW01.PK0VWMAX = PK0VW01.PK0VWMAX + 1; /* ;*/
        PK0VW01.XOTCD[PK0VWMAX] = PKUREC.XOTCD; /* ;*/
        PK0VW01.PK0VWCOT = PKUREC.XOTCD;
        PK0V026(); /* get order type abbreviation*/
        PK0VW01.XOTABRV[PK0VWMAX] = PK0VW01.PK0VWAOT;
        PK0VW01.PKUSQNBR[PK0VWMAX] = PKUREC.PKUSQNBR;
        PK0VW01.PKUOTUNT[PK0VWMAX] = PKUREC.PKUOTUNT;
        PK0VW01.PK0VWUCT[PK0VWMAX] = PKUREC.ZZZCHGCT;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          TA1REC.TA1FUNC = "POST"; /* ; term. function*/
          TA1REC.TA1LOC = "SELECT NEXT";
          TA1REC.TA1TYPE = "DB2 "; /* ; type of error*/
          TA1REC.TA1PGMNM = "PK0V022"; /* process name*/
          TA1REC.TA1MAP = "PK0VM030"; /* map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* database name*/
          TA1REC.TA1TBLVU = "VSELOT01"; /* table view name*/
          TA1REC.TA1TBLKE = PKWREC.XWHCD; /* table key*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
          converseLib.validationFailed(28);
        else
          if (SQLCA.VAGen_SQLCODE != 100) /* ; not end of data*/
            converseLib.validationFailed(29); /* ; indicate system error*/
            TA1REC.TA1FUNC = "RETN"; /* ; term. function*/
            TA1REC.TA1LOC = "SELECT NEXT";
            TA1REC.TA1TYPE = "DB2 "; /* ; type of error*/
            TA1REC.TA1PGMNM = "PK0V022"; /* process name*/
            TA1REC.TA1MAP = "PK0VM030"; /* map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* database name*/
            TA1REC.TA1TBLVU = "VSELOT01"; /* table view name*/
            TA1REC.TA1TBLKE = PKWREC.XWHCD; /* table key*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
            return;
          end
        end
      end
    end
  end



  if (SQLCA.VAGen_SQLCODE == 0 /* ; good return from s2 above*/
   && PK0VW01.PK0VWMAX > 100)  /* ; table maximum was reached*/
    converseLib.validationFailed(24); /* overflow*/
    PK0VW01.PK0VWFL1 = "Y"; /* table overflow flag*/
    return;
  end



end // end PK0V022

// load map page
Function PK0V023()
   /* ----------------------------------------------------*/
     /* format map.....*/
      /* pk0lwtop - location in ws. array of the top of screen*/
      /* pk0lwndx - this keeps track of location in working*/
                 /* storage array for moving to map*/
      /* pk0lwnx2 - locates position in map - pk0lm030*/
      /* pk0lwmax - end of valid data in working storage array*/
   /* ----------------------------------------------------*/




  PK0VW01.PK0VWNDX = PK0VW01.PK0VWTOP; /* hold current top of page*/

  PK0VW01.PK0VWNX2 = 1; /* map display subscript*/

  while (PK0VW01.PK0VWNX2 <= 24) /* only 24 displayed*/
    if (PK0VW01.PK0VWNDX <= PK0VW01.PK0VWMAX) /* place in ws < data end*/
      PK0VM030.PKUSQNBR[PK0VWNX2] = PK0VW01.PKUSQNBR[PK0VWNDX];
      PK0VM030.PKUOTUNT[PK0VWNX2] = PK0VW01.PKUOTUNT[PK0VWNDX];
      PK0VM030.XOTCD[PK0VWNX2] = PK0VW01.XOTCD[PK0VWNDX];
      PK0VM030.XOTABRV[PK0VWNX2] = PK0VW01.XOTABRV[PK0VWNDX];
    end
    if (PK0VW01.PK0VWNX2 <= 3)
      PK0VM030.PKRMIUNT[PK0VWNX2] = PK0VW01.PKRMIUNT[PK0VWNX2];
    end
    PK0VW01.PK0VWNX2 = PK0VW01.PK0VWNX2 + 1; /* set-up map subscript*/
    PK0VW01.PK0VWNDX = PK0VW01.PK0VWNDX + 1; /* set-up place in work.stor.*/
  end



end // end PK0V023

// obtain set misc. qtys rows
Function PK0V024()
   /* ----------------------------------------------------*/
     /* load map and working storage with ups/rps row*/
             /* -  non planned only   -*/
   /* ----------------------------------------------------*/


  set PKRREC empty;
  PKRREC.XWHCD = PKWREC.XWHCD;
  PKRREC.PKURUNMD = "P"; /* non-planned mode*/

  call "IO2090" ("S1", SQLCA, PKRREC) {isNoRefresh = yes, isExternal = yes}; /* select unique ups/rps*/
  if (SQLCA.VAGen_SQLCODE == 100) /* no records found*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST"; /* ; term. function*/
      TA1REC.TA1TYPE = "DB2 "; /* ; type of error*/
      TA1REC.TA1PGMNM = "PK0V024"; /* process name*/
      TA1REC.TA1MAP = "PK0VM030"; /* map name*/
      TA1REC.TA1DBASE = "DPICK   "; /* database name*/
      TA1REC.TA1LOC = "SELECT SET                  ";
      TA1REC.TA1TBLVU = "VSELSR01"; /* table view name*/
      TA1REC.TA1TBLKE = PKWREC.XWHCD; /* table key*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
    else
      if (SQLCA.VAGen_SQLCODE != 0)
        TA1REC.TA1TYPE = "DB2 "; /* ; type of error*/
        TA1REC.TA1PGMNM = "PK0V024"; /* process name*/
        TA1REC.TA1MAP = "PK0VM030"; /* map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* database name*/
        TA1REC.TA1LOC = "SELECT SET                  ";
        TA1REC.TA1TBLVU = "VSELSR01"; /* table view name*/
        TA1REC.TA1TBLKE = PKWREC.XWHCD; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
        converseLib.validationFailed(29);
        return;
      end
    end
  end

  while (SQLCA.VAGen_SQLCODE == 0) /* ; good return within loop*/
    call "IO2090" ("N1", SQLCA, PKRREC) {isNoRefresh = yes, isExternal = yes}; /* fetch next record*/

    if (SQLCA.VAGen_SQLCODE == 0) /* ; good fetch*/
      if (PKRREC.PKRMCSCD == "S")
        PK0VW01.PKRMIUNT[1] = PKRREC.PKRMIUNT;
        PK0VW01.PKRMCSCD[1] = PKRREC.PKRMCSCD;
        PK0VW01.PK0VWRCT[1] = PKRREC.ZZZCHGCT;
      end
      if (PKRREC.PKRMCSCD == "U")
        PK0VW01.PKRMIUNT[2] = PKRREC.PKRMIUNT;
        PK0VW01.PKRMCSCD[2] = PKRREC.PKRMCSCD;
        PK0VW01.PK0VWRCT[2] = PKRREC.ZZZCHGCT;
      end
      if (PKRREC.PKRMCSCD == "R")
        PK0VW01.PKRMIUNT[3] = PKRREC.PKRMIUNT;
        PK0VW01.PKRMCSCD[3] = PKRREC.PKRMCSCD;
        PK0VW01.PK0VWRCT[3] = PKRREC.ZZZCHGCT;
      end
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        TA1REC.TA1FUNC = "POST"; /* ; term. function*/
        TA1REC.TA1PGMNM = "PK0V024"; /* process name*/
        TA1REC.TA1MAP = "PK0VM030"; /* map name*/
        TA1REC.TA1LOC = "FETCH NEXT                  ";
        TA1REC.TA1DBASE = "DPICK   "; /* database name*/
        TA1REC.TA1TBLKE = PKWREC.XWHCD; /* table key*/
        TA1REC.TA1TBLVU = "VSELSR01"; /* table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
      else
        if (SQLCA.VAGen_SQLCODE != 100)
          TA1REC.TA1TYPE = "DB2 "; /* ; type of error*/
          TA1REC.TA1PGMNM = "PK0V024"; /* process name*/
          TA1REC.TA1MAP = "PK0VM030"; /* map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* database name*/
          TA1REC.TA1LOC = "FETCH NEXT                  ";
          TA1REC.TA1TBLVU = "VSELSR01"; /* table view name*/
          TA1REC.TA1TBLKE = PKWREC.XWHCD; /* table key*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
          converseLib.validationFailed(29);
        end
      end
    end
  end

end // end PK0V024

// get order type abbreviation
Function PK0V026()

   /* ---------------  pk0v026 get order type abbreviation -------*/




  if (PK0VW01.PK0VWCOT in XOTTBL.XOTCD)
    PK0VW01.PK0VWAOT = XOTTBL.XOTABRV[sysVar.arrayIndex];
  end

  if (sysVar.arrayIndex == 0) /* Table entry not found*/
    PK0VW01.PK0VWAOT = "INVALD";
  else

    if (XOTTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not active status*/
      PK0VW01.PK0VWAOT = "INACTV";
    end
  end




   /* ----- if table entry found and active*/
   /* -----     if the order types general product*/
   /* -----     class code is not a valid gpc code*/
   /* -----     for the current warehouse*/
   /* -----         the order type is invalid.*/
  if (sysVar.arrayIndex != 0
   && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    PK0VW01.XGPCD = XOTTBL.XGPCD[sysVar.arrayIndex];
    if (PKWREC.XWHCD in XWHTBL.XWHCD)
      PKWREC.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    end
    if (sysVar.arrayIndex != 0 /* Table entry found*/
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active warehouse status*/
      if (XWHTBL.XGPCD1[sysVar.arrayIndex] != PK0VW01.XGPCD
       && XWHTBL.XGPCD2[sysVar.arrayIndex] != PK0VW01.XGPCD
       && XWHTBL.XGPCD3[sysVar.arrayIndex] != PK0VW01.XGPCD
       && XWHTBL.XGPCD4[sysVar.arrayIndex] != PK0VW01.XGPCD
       && XWHTBL.XGPCD5[sysVar.arrayIndex] != PK0VW01.XGPCD
       && XWHTBL.XGPCD6[sysVar.arrayIndex] != PK0VW01.XGPCD
       && XWHTBL.XGPCD7[sysVar.arrayIndex] != PK0VW01.XGPCD
       && XWHTBL.XGPCD8[sysVar.arrayIndex] != PK0VW01.XGPCD)
        PK0VW01.PK0VWAOT = "INVALD";
        sysVar.arrayIndex = 0; /* force error message*/
      end
    end
  end


   /* -------------  end process pk0v026  --------------------*/
end // end PK0V026

// converse map
Function PK0V030()


  converse PK0VM030 ;



   /* ------------------- end pk0m030 -------------------------*/
end // end PK0V030

// validate pf keys
Function PK0V040()

  converseLib.validationFailed(0); /* reset error message field*/
   /* ------------------------------------------------------------*/
   /* stop indiscriminate button pressing......*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf3  /* send to pk0a menu*/
   || converseVar.eventKey is pf4  /* send to mn0m menu*/
   || converseVar.eventKey is pf13 /* pk0t 'ord sel' transfer*/
   || converseVar.eventKey is pf15 /* pk0u 'cust sel' transfer*/
   || converseVar.eventKey is pf16 /* pk04 'p&h sel' transfer*/
   || converseVar.eventKey is pf18 /* pk09 'pick hold/rlse'trans*/
   || converseVar.eventKey is pf19 /* pk07 'select' transfer*/
   || converseVar.eventKey is pf20) /* pk0a 'pick' transfer*/

    PK0V041(); /* Transfer to another application*/

  else

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      XSPF1(); /* Exit to the HELP facility*/

      PK0VM030.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
      exit stack; /* Exit to redisplay map*/
    end


    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      XSPF4(); /* Exit to system main menu*/

      PK0VM030.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
      exit stack; /* Exit to redisplay map*/
    end

    if (converseVar.eventKey is pa2) /* PA2 was pressed*/
      PK0VW01.PK0VWUPD = "Y"; /* flag for reloading map*/
      exit stack;
    end

    if (converseVar.eventKey is pf7  /* scroll backwards*/
     || converseVar.eventKey is pf8  /* scroll forward*/
     || converseVar.eventKey is pf12 /* test the water for errors*/
     || converseVar.eventKey is enter) /* enter..*/
       /* their choice of buttons was valid*/
    else
      converseLib.validationFailed(12); /* invalid pk key..*/

    end
  end



end // end PK0V040

// Exit to another application
Function PK0V041()
   /* ------------------------------------------------------------*/
   /* Set the "TO" application according to the PF key pressed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* ; PF3 was pressed*/
    COMMAREA.CATOAP = "PK0S"; /* selection Master Menu*/
  end

  if (converseVar.eventKey is pf4) /* ; PF4 was pressed*/
    XSPF4(); /* ; master menu*/
  end

  if (converseVar.eventKey is pf13) /* ; PF13 was pressed*/
    COMMAREA.CATOAP = "PK0T"; /* PICKING Order select*/
  end

  if (converseVar.eventKey is pf15) /* ; PF15 was pressed*/
    COMMAREA.CATOAP = "PK0U"; /* PICKING Customer select*/
  end

  if (converseVar.eventKey is pf16) /* ; PF16 was pressed*/
    COMMAREA.CATOAP = "PK04"; /* pack & Hold select*/
  end

  if (converseVar.eventKey is pf18) /* ; PF18 was pressed*/
    COMMAREA.CATOAP = "PK09"; /* PICK hold/rlse inq.*/
  end


  if (converseVar.eventKey is pf19) /* ; PF19 was pressed*/
    COMMAREA.CATOAP = "PK07"; /* selection Menu*/
  end

  if (converseVar.eventKey is pf20) /* ; PF20 was pressed*/
    COMMAREA.CATOAP = "PK0A"; /* picking menu*/
  end

  if (PK0VM030.XWHCD is modified) /* ; Warehouse code changed*/
    PKWREC.XWHCD = PK0VM030.XWHCD; /* Save in work area*/
  end

  PKWREC.PKWINDEX = 0;
  PKWREC.PKWCNTRL = " ";
  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* COMMAREA user area*/

  XSEXIT(); /* Invoke selected application*/

  PK0VM030.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/

  exit stack; /* ; Exit to redisplay map*/



end // end PK0V041

// validate inputs
Function PK0V050()

    /* ---------------------------------------------*/
   /* -  - start validation of input data      -  -*/
    /* ---------------------------------------------*/


  PK0VW01.PK0VWED1 = "N"; /* reset order type edit flag*/
  PK0VW01.PK0VWED2 = "N"; /* reset misc. qtys edit flag*/


  PK0V051(); /* reset mdt's*/


  if (converseVar.validationMsgNum == 0) /* no errors from pk0l051*/
    if (PK0VW01.PK0VWED1 == "Y" /* data modified*/
     || PK0VW01.PK0VWED2 == "Y") /* data modified*/

      if (PK0VM030.XWHCD != PKWREC.XWHCD) /* change in warehouse*/
        PK0VM030.XWHCD = PKWREC.XWHCD; /* restore warehouse*/
        set PK0VM030.XWHCD cursor, modified, bold;
        converseLib.validationFailed(23); /* can not modify & change warehouse*/
      else
        if (converseVar.eventKey is enter /* ;*/
         || converseVar.eventKey is pf12) /* ;*/
          PK0V052(); /* edit entered data*/
        else
          if (converseVar.eventKey is pf7 /* scroll requested*/
           || converseVar.eventKey is pf8) /* scroll requested*/
            converseLib.validationFailed(39); /* can not edit screen & scroll*/
            return; /* return to pk0l010*/
          end
        end
      end
    else
      if (converseVar.eventKey is pf7 /* scroll requested*/
       || converseVar.eventKey is pf8) /* scroll requested*/
        exit stack; /* bypass processing- format screen*/
      end
    end
  end



end // end PK0V050

// reset mdt's
Function PK0V051()

     /* --------------------------------------------------*/
     /* -   - reset mdt's to fields actually modified -  -*/
     /* --------------------------------------------------*/



  PK0VW01.PK0VWNX2 = 24;
  while (PK0VW01.PK0VWNX2 >= 1)
    PK0VW01.PK0VWNDX = PK0VW01.PK0VWTOP + PK0VW01.PK0VWNX2 - 1;


     /* **********************************************/
     /* * field by field test for changes           **/
     /* **********************************************/
    if (PK0VM030.XOTCD[PK0VWNX2] != PK0VW01.XOTCD[PK0VWNDX])
      set PK0VM030.XOTCD[PK0VWNX2] modified;
      PK0VW01.PK0VWED1 = "Y"; /* cust.modified flag*/
    else
      set PK0VM030.XOTCD[PK0VWNX2] initialAttributes;
    end

    if (PK0VM030.PKUSQNBR[PK0VWNX2] != PK0VW01.PKUSQNBR[PK0VWNDX])
      set PK0VM030.PKUSQNBR[PK0VWNX2] modified;
      PK0VW01.PK0VWED1 = "Y"; /* cust.modified flag*/
    else
      set PK0VM030.PKUSQNBR[PK0VWNX2] initialAttributes;
    end

    if (PK0VM030.PKUOTUNT[PK0VWNX2] != PK0VW01.PKUOTUNT[PK0VWNDX]
     || PK0VM030.PKUOTUNT[PK0VWNX2] is modified)
      set PK0VM030.PKUOTUNT[PK0VWNX2] modified;
      PK0VW01.PK0VWED1 = "Y"; /* order type modified flag*/
    else
      set PK0VM030.PKUOTUNT[PK0VWNX2] initialAttributes;
    end

    if (PK0VW01.PK0VWNX2 < 4)
      if (PK0VM030.PKRMIUNT[PK0VWNX2] != PK0VW01.PKRMIUNT[PK0VWNX2]
       || PK0VM030.PKRMIUNT[PK0VWNX2] is modified)
        set PK0VM030.PKRMIUNT[PK0VWNX2] modified;
        PK0VW01.PK0VWED2 = "Y"; /* misc. qtys modified flag*/
      else
        set PK0VM030.PKRMIUNT[PK0VWNX2] initialAttributes;
      end
    end

    PK0VW01.PK0VWNX2 = PK0VW01.PK0VWNX2 - 1;
  end



end // end PK0V051

// edit map line
Function PK0V052()
   /* ------------------------------------------------------*/
   /* * edit map lines from the bottom up*/
       /* * pk0lwnx2 - position on map display*/
       /* * pk0lwndx - position of same data within ws. array*/
       /* * pk0lwtop - position in ws. array of record*/
                    /* at the top of the screen.*/
   /* ------------------------------------------------------*/


  PK0VW01.PK0VWNX2 = 24;
  while (PK0VW01.PK0VWNX2 >= 1)
    if (PK0VM030.XOTCD[PK0VWNX2] is modified
     || PK0VM030.PKUSQNBR[PK0VWNX2] is modified
     || PK0VM030.PKUOTUNT[PK0VWNX2] is modified)

         /* ***** find position of this record in w.s. array ****/

      PK0VW01.PK0VWNDX = PK0VW01.PK0VWTOP + PK0VW01.PK0VWNX2 - 1;

      PK0V053(); /* edit line*/

    end

    PK0VW01.PK0VWNX2 = PK0VW01.PK0VWNX2 - 1;
  end




  if (PK0VW01.PK0VWED2 == "Y") /* misc. qtys modifiied flag*/

    if (PK0VM030.PKRMIUNT[3] != PK0VW01.PKRMIUNT[3]
     && PK0VM030.PKRMIUNT[3] < 0)
      set PK0VM030.PKRMIUNT[3] cursor, modified, bold;
      converseLib.validationFailed(242);
    end

    if (PK0VM030.PKRMIUNT[2] != PK0VW01.PKRMIUNT[2]
     && PK0VM030.PKRMIUNT[2] < 0)
      set PK0VM030.PKRMIUNT[2] cursor, modified, bold;
      converseLib.validationFailed(241);
    end

    if (PK0VM030.PKRMIUNT[1] != PK0VW01.PKRMIUNT[1]
     && PK0VM030.PKRMIUNT[1] < 0)
      set PK0VM030.PKRMIUNT[1] cursor, modified, bold;
      converseLib.validationFailed(239);
    end

  end




end // end PK0V052

// edit entered fields
Function PK0V053()

       /* --------------------------------------*/
       /* -  edit by units field               -*/
       /* --------------------------------------*/



   /* -----  if units was set to zero (delete requested)*/
   /* -----  and key fields have been modified*/
   /* -----      it is an error.*/
  if (PK0VM030.PKUOTUNT[PK0VWNX2] == 0)
    if (PK0VM030.XOTCD[PK0VWNX2] != PK0VW01.XOTCD[PK0VWNDX]
     || PK0VM030.PKUSQNBR[PK0VWNX2] != PK0VW01.PKUSQNBR[PK0VWNDX])
      set PK0VM030.PKUOTUNT[PK0VWNX2] cursor, modified, bold;
      converseLib.validationFailed(128); /* cannot delete and change keys*/
    end
  end



   /* -----  if sequence was set to zero*/
   /* -----  and key fields have been modified*/
   /* -----      it is an error (invalid sequence number)*/
  if (PK0VM030.PKUSQNBR[PK0VWNX2] == 0)
    if (PK0VM030.XOTCD[PK0VWNX2] != PK0VW01.XOTCD[PK0VWNDX]
     || PK0VM030.PKUSQNBR[PK0VWNX2] != PK0VW01.PKUSQNBR[PK0VWNDX])
      set PK0VM030.PKUSQNBR[PK0VWNX2] cursor, modified, bold;
      converseLib.validationFailed(141); /* invalid or missing sequence number*/
    end
  end




   /* -----  if adding a new order type row*/
   /* -----      if sequence number was exists already*/
   /* -----          it is an error*/
   /* -----      if order type was exists already*/
   /* -----          it is an error.*/
  if (PK0VM030.XOTCD[PK0VWNX2] != PK0VW01.XOTCD[PK0VWNDX])
    PK0VW01.PK0VWNX3 = 1;
    while (PK0VW01.PK0VWNX3 <= PK0VW01.PK0VWMAX)
      if (PK0VM030.PKUSQNBR[PK0VWNX2] == PK0VW01.PKUSQNBR[PK0VWNX3])
        set PK0VM030.PKUSQNBR[PK0VWNX2] cursor, modified, bold;
        converseLib.validationFailed(130);
      end
      if (PK0VM030.XOTCD[PK0VWNX2] == PK0VW01.XOTCD[PK0VWNX3])
        set PK0VM030.XOTCD[PK0VWNX2] cursor, modified, bold;
        converseLib.validationFailed(44);
      end
      PK0VW01.PK0VWNX3 = PK0VW01.PK0VWNX3 + 1;
    end
  end



   /* -----  if adding a new order type row*/
   /* -----      if sequence number was entered already*/
   /* -----          it is an error*/
   /* -----      if order type was entered already*/
   /* -----          it is an error.*/
  if (PK0VM030.XOTCD[PK0VWNX2] != PK0VW01.XOTCD[PK0VWNDX])
    PK0VW01.PK0VWNX3 = 1;
    while (PK0VW01.PK0VWNX3 <= 24)
      if (PK0VM030.PKUSQNBR[PK0VWNX2] == PK0VM030.PKUSQNBR[PK0VWNX3]
       && PK0VWNX2 != PK0VWNX3
       && PK0VM030.PKUSQNBR[PK0VWNX2] != 0)
        set PK0VM030.PKUSQNBR[PK0VWNX2] cursor, modified, bold;
        converseLib.validationFailed(130);
      end
      if (PK0VM030.XOTCD[PK0VWNX2] == PK0VM030.XOTCD[PK0VWNX3]
       && PK0VWNX2 != PK0VWNX3)
        set PK0VM030.XOTCD[PK0VWNX2] cursor, modified, bold;
        converseLib.validationFailed(44);
      end
      PK0VW01.PK0VWNX3 = PK0VW01.PK0VWNX3 + 1;
    end
  end






   /* -----  if changeing sequence*/
   /* -----      if sequence number was entered already*/
   /* -----          it is an error.*/
  if (PK0VM030.PKUSQNBR[PK0VWNX2] != PK0VW01.PKUSQNBR[PK0VWNDX])
    PK0VW01.PK0VWNX3 = 1;
    while (PK0VW01.PK0VWNX3 <= 24)
      if (PK0VM030.PKUSQNBR[PK0VWNX2] == PK0VM030.PKUSQNBR[PK0VWNX3]
       && PK0VWNX2 != PK0VWNX3
       && PK0VM030.PKUSQNBR[PK0VWNX2] != 0)
        set PK0VM030.PKUSQNBR[PK0VWNX2] cursor, modified, bold;
        converseLib.validationFailed(130);
      end
      PK0VW01.PK0VWNX3 = PK0VW01.PK0VWNX3 + 1;
    end
  end






   /* -----  if changeing sequence*/
   /* -----      if sequence number exists already*/
   /* -----          it is an error.*/
  if (PK0VM030.PKUSQNBR[PK0VWNX2] != PK0VW01.PKUSQNBR[PK0VWNDX])
    PK0VW01.PK0VWNX3 = 1;
    while (PK0VW01.PK0VWNX3 <= PK0VW01.PK0VWMAX)
      if (PK0VM030.PKUSQNBR[PK0VWNX2] == PK0VW01.PKUSQNBR[PK0VWNX3]
       && PK0VM030.PKUSQNBR[PK0VWNX2] != 0)
        PK0V054(); /* check if it's a resequence*/
      end
      PK0VW01.PK0VWNX3 = PK0VW01.PK0VWNX3 + 1;
    end
  end


   /* -----  if changeing sequence*/
   /* -----  and sequence number is zero*/
   /* -----      it is an error.*/
  if (PK0VM030.PKUSQNBR[PK0VWNX2] != PK0VW01.PKUSQNBR[PK0VWNDX]
   && PK0VM030.PKUSQNBR[PK0VWNX2] is modified
   && PK0VM030.PKUSQNBR[PK0VWNX2] == 0)
    set PK0VM030.PKUSQNBR[PK0VWNX2] cursor, modified, bold;
    converseLib.validationFailed(141); /* invalid or missing sequence number*/
  end






   /* -----  if order type has changed*/
   /* -----      check for valid order type*/
  if (PK0VM030.XOTCD[PK0VWNX2] != PK0VW01.XOTCD[PK0VWNDX])
    PK0VW01.PK0VWCOT = PK0VM030.XOTCD[PK0VWNX2];
    PK0V026(); /* get order type abbreviation*/
    if (sysVar.arrayIndex == 0
     || XOTTBL.XXXSTAT[sysVar.arrayIndex] != "A")
      set PK0VM030.XOTCD[PK0VWNX2] cursor, modified, bold;
      converseLib.validationFailed(129);
    else
      PK0VM030.XOTABRV[PK0VWNX2] = PK0VW01.PK0VWAOT;
    end
  end








   /* -----  if changeing order type*/
   /* -----      verify that order type is not equal to zero*/
  if (PK0VM030.XOTCD[PK0VWNX2] == "  ")
    if (PK0VM030.PKUSQNBR[PK0VWNX2] != PK0VW01.PKUSQNBR[PK0VWNDX]
     || PK0VM030.PKUOTUNT[PK0VWNX2] != PK0VW01.PKUOTUNT[PK0VWNDX])
      set PK0VM030.XOTCD[PK0VWNX2] cursor, modified, bold;
      converseLib.validationFailed(129); /* invalid order type*/
    end
  end



end // end PK0V053

// check for resequence
Function PK0V054()


   /* -----  see if duplicate occurred in area of array that is*/
   /* -----  currently displayed,*/
   /* -----  if not, it is a duplicate.*/
  PK0VW01.PK0VWEND = PK0VW01.PK0VWTOP + 23;
  if (PK0VW01.PK0VWNX3 < PK0VW01.PK0VWTOP
   || PK0VW01.PK0VWNX3 > PK0VW01.PK0VWEND)
    set PK0VM030.PKUSQNBR[PK0VWNX2] cursor, modified, bold;
    converseLib.validationFailed(130);
    return;
  end





  PK0VW01.PK0VWNX4 = PK0VW01.PK0VWNX3 - PK0VW01.PK0VWTOP + 1;
  if (PK0VM030.PKUSQNBR[PK0VWNX4] == PK0VW01.PKUSQNBR[PK0VWNDX])
    /* next sentence*/
  else
    set PK0VM030.PKUSQNBR[PK0VWNX2] cursor, modified, bold;
    converseLib.validationFailed(130);
  end





end // end PK0V054

// update order type select tbl
Function PK0V080()



  PK0VW01.PK0VWNX2 = 1;
  while (PK0VW01.PK0VWNX2 <= 24)
    PK0VW01.PK0VWNDX = PK0VW01.PK0VWTOP + PK0VW01.PK0VWNX2 - 1;
    if (PK0VM030.XOTCD[PK0VWNX2] != PK0VW01.XOTCD[PK0VWNDX])
      PK0VS81(); /* database add*/
    end

    if (PK0VM030.XOTCD[PK0VWNX2] == PK0VW01.XOTCD[PK0VWNDX])
      if (PK0VM030.PKUSQNBR[PK0VWNX2] != PK0VW01.PKUSQNBR[PK0VWNDX]
       || PK0VM030.PKUOTUNT[PK0VWNX2] != PK0VW01.PKUOTUNT[PK0VWNDX])
        PK0VS83(); /* database change*/
      end
    end

    if (PK0VM030.PKUOTUNT[PK0VWNX2] == 0
     && PK0VM030.PKUOTUNT[PK0VWNX2] != PK0VW01.PKUOTUNT[PK0VWNDX])
      PK0VS82(); /* database delete*/
    end

    if (PK0VM030.PKUOTUNT[PK0VWNX2] == 0
     && PK0VM030.PKUOTUNT[PK0VWNX2] == PK0VW01.PKUOTUNT[PK0VWNDX]
     && PK0VM030.PKUOTUNT[PK0VWNX2] is modified
     && PK0VM030.XOTCD[PK0VWNX2] != "  "
     && PK0VM030.PKUSQNBR[PK0VWNX2] != 0)
      PK0VS82(); /* database delete*/
    end


    PK0VW01.PK0VWNX2 = PK0VW01.PK0VWNX2 + 1;
  end



end // end PK0V080

// update misc. qtys tbl
Function PK0V090()



  PK0VW01.PK0VWNX2 = 1;
  while (PK0VW01.PK0VWNX2 <= 3)
    if (PK0VM030.PKRMIUNT[PK0VWNX2] is modified)
      if (PK0VW01.PKRMIUNT[PK0VWNX2] == 0 /* record does not exist*/
       && PK0VW01.PKRMCSCD[PK0VWNX2] == " "
       && PK0VW01.PK0VWRCT[PK0VWNX2] == 0)
        PK0VS91(); /* database add*/
      end
    end

    if (PK0VM030.PKRMIUNT[PK0VWNX2] is modified)
      if (PK0VW01.PKRMIUNT[PK0VWNX2] != 0 /* record already exists*/
       || PK0VW01.PKRMCSCD[PK0VWNX2] != " "
       || PK0VW01.PK0VWRCT[PK0VWNX2] != 0)
        PK0VS93(); /* database change*/
      end
    end


    PK0VW01.PK0VWNX2 = PK0VW01.PK0VWNX2 + 1;
  end



end // end PK0V090

// add order type select tbl
Function PK0VS81()


     /* **************  add  new record  *************/
  PK0VM030.XXXERRID = "PK0VS81";

   /* ******************************************************/
   /* *    first check to make sure the record has not    **/
   /* *    been added by someone else.                    **/
   /* ******************************************************/
  set SQLCA empty;
  set PKUREC empty;

  PKUREC.XWHCD = PK0VM030.XWHCD;
  PKUREC.PKURUNMD = "P"; /* runmode*/
  PKUREC.PKUSQNBR = PK0VM030.PKUSQNBR[PK0VWNX2];
  PKUREC.PKUOTUNT = PK0VM030.PKUOTUNT[PK0VWNX2];
  PKUREC.XOTCD = PK0VM030.XOTCD[PK0VWNX2];

  call "IO2020" ("S ", SQLCA, PKUREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 100) /* not found, thats good*/
    /* next sentece*/
  else
    if (SQLCA.VAGen_SQLCODE == +0)
      set PK0VM030.XOTCD[PK0VWNX2] cursor, modified, bold;
      PK0VW01.PK0VWUPD = "N"; /* d.b. updated flag*/
      converseLib.validationFailed(105);
      exit stack;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "PK0V";
        TA1REC.TA1LOCAT = "SELECT";
        TA1REC.TA1MAP = "PK0VM030";
        TA1REC.TA1DBASE = "DPICK.";
        TA1REC.TA1TBLVU = "VSELOT01"; /* table view*/
        TA1REC.TA1TBLKE = PK0VM030.XWHCD; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        set PK0VM030.XOTCD[PK0VWNX2] cursor, modified, bold;
        converseLib.validationFailed(28);
        exit stack;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "PK0V";
        TA1REC.TA1LOCAT = "SELECT";
        TA1REC.TA1MAP = "PK0VM030";
        TA1REC.TA1DBASE = "DPICK.";
        TA1REC.TA1TBLVU = "VSELOT01"; /* table view*/
        TA1REC.TA1TBLKE = PK0VM030.XWHCD; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        converseLib.validationFailed(29);
        exit stack;
      end
    end
  end







   /* ******************************************************/
   /* *    now add the row.                               **/
   /* ******************************************************/

  set SQLCA empty;
  set PKUREC empty;
  PKUREC.XWHCD = PK0VM030.XWHCD;
  PKUREC.PKURUNMD = "P"; /* runmode*/
  PKUREC.PKUSQNBR = PK0VM030.PKUSQNBR[PK0VWNX2];
  PKUREC.PKUOTUNT = PK0VM030.PKUOTUNT[PK0VWNX2];
  PKUREC.XOTCD = PK0VM030.XOTCD[PK0VWNX2];

  PK0VS84(); /* date/time*/

  call "IO2020" ("A ", SQLCA, PKUREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    PK0VW01.PK0VWUPD = "Y"; /* d.b. updated flag*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMNM = "PK0V";
      TA1REC.TA1LOCAT = "ADD";
      TA1REC.TA1MAP = "PK0VM030";
      TA1REC.TA1DBASE = "DPICK.";
      TA1REC.TA1TBLVU = "VSELOT01"; /* table view*/
      TA1REC.TA1TBLKE = PK0VM030.XWHCD; /* table key*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      set PK0VM030.XOTCD[PK0VWNX2] cursor, modified, bold;
      converseLib.validationFailed(28);
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "PK0V";
      TA1REC.TA1LOCAT = "ADD";
      TA1REC.TA1MAP = "PK0VM030";
      TA1REC.TA1DBASE = "DPICK.";
      TA1REC.TA1TBLVU = "VSELOT01"; /* table view*/
      TA1REC.TA1TBLKE = PK0VM030.XWHCD; /* table key*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      converseLib.validationFailed(29);
      exit stack;
    end
  end



end // end PK0VS81

// delete order type select tbl
Function PK0VS82()


     /* **************  delete a row               *****/

  PK0VM030.XXXERRID = "PK0VS82";
  set PKUREC empty;
  set SQLCA empty;


  PKUREC.XWHCD = PK0VM030.XWHCD;
  PKUREC.PKURUNMD = "P"; /* runmode*/
  PKUREC.PKUSQNBR = PK0VM030.PKUSQNBR[PK0VWNX2];
  PKUREC.PKUOTUNT = PK0VM030.PKUOTUNT[PK0VWNX2];
  PKUREC.XOTCD = PK0VM030.XOTCD[PK0VWNX2];

  call "IO2020" ("D ", SQLCA, PKUREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    PK0VW01.PK0VWUPD = "Y"; /* d.b. updated flag*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(105);
      set PK0VM030.XOTCD[PK0VWNX2] cursor, modified, bold;
      PK0VW01.PK0VWUPD = "N"; /* d.b. updated flag*/
      exit stack;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "PK0V";
        TA1REC.TA1LOCAT = "DELETE ";
        TA1REC.TA1MAP = "PK0VM030";
        TA1REC.TA1DBASE = "DPICK.";
        TA1REC.TA1TBLVU = "VSELOT01"; /* table view*/
        TA1REC.TA1TBLKE = PK0VM030.XWHCD; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        converseLib.validationFailed(28);
        exit stack;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "PK0V";
        TA1REC.TA1LOCAT = "DELETE ";
        TA1REC.TA1MAP = "PK0VM030";
        TA1REC.TA1DBASE = "DPICK.";
        TA1REC.TA1TBLVU = "VSELOT01"; /* table view*/
        TA1REC.TA1TBLKE = PK0VM030.XWHCD; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        converseLib.validationFailed(29);
        exit stack;
      end
    end
  end





end // end PK0VS82

// change order type select tbl
Function PK0VS83()


     /* ********* change *********/

  PK0VM030.XXXERRID = "PK0VS83";
  set SQLCA empty;
  set PKUREC empty;


  PKUREC.XWHCD = PK0VM030.XWHCD;
  PKUREC.PKURUNMD = "P"; /* runmode*/
  PKUREC.PKUSQNBR = PK0VM030.PKUSQNBR[PK0VWNX2];
  PKUREC.PKUOTUNT = PK0VM030.PKUOTUNT[PK0VWNX2];
  PKUREC.XOTCD = PK0VM030.XOTCD[PK0VWNX2];
  PK0VW01.PK0VWNDX = PK0VW01.PK0VWTOP + PK0VW01.PK0VWNX2 - 1;
  PKUREC.ZZZCHGCT = PK0VW01.PK0VWUCT[PK0VWNDX];

  PK0VS84(); /* date/time*/

  call "IO2020" ("U ", SQLCA, PKUREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    PK0VW01.PK0VWUPD = "Y"; /* d.b. updated flag*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(105);
      PK0VW01.PK0VWUPD = "N"; /* d.b. updated flag*/
      set PK0VM030.XOTCD[PK0VWNX2] cursor, modified, bold;
      exit stack;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "PK0V";
        TA1REC.TA1LOCAT = "CHANGE ";
        TA1REC.TA1MAP = "PK0VM030";
        TA1REC.TA1DBASE = "DPICK.";
        TA1REC.TA1TBLVU = "VSELOT01"; /* table view*/
        TA1REC.TA1TBLKE = PK0VM030.XWHCD; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        converseLib.validationFailed(28);
        exit stack;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "PK0V";
        TA1REC.TA1LOCAT = "CHANGE ";
        TA1REC.TA1MAP = "PK0VM030";
        TA1REC.TA1DBASE = "DPICK.";
        TA1REC.TA1TBLVU = "VSELOT01"; /* table view*/
        TA1REC.TA1TBLKE = PK0VM030.XWHCD; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        converseLib.validationFailed(28);
        exit stack;
      end
    end
  end





end // end PK0VS83

// dates for new/changed records
Function PK0VS84()



   /*  */
   /* ------------ y2k out begin ---------------*/
   /*  */
   /* MOVE EZEDTE TO PK0VW01.PK0VWFDA;  /* date*/
   /* MOVE '19' TO PK0VW01.PK0VWFCT;    /* centry*/
   /*  */
   /* ------------ y2k out end -----------------*/
   /*  */
   /*  */
   /* ------------ y2k in  begin ---------------*/
   /*  */
  PK0VW01.PK0VWFDT = VGVar.currentGregorianDate; /* system date ccyymmdd*/
   /*  */
   /* ------------ y2k in end ------------------*/
   /*  */
  PKUREC.ZZZCHGDT = PK0VW01.PK0VWFDT; /* change date*/
  PK0VW01.PK0VWTIM = VGVar.currentFormattedTime;
  PK0VW01.PK0VWTHH = PK0VW01.PK0VWHH;
  PK0VW01.PK0VWTMM = PK0VW01.PK0VWMI;
  PKUREC.ZZZCHGTM = PK0VW01.PK0VWTI; /* change time*/



end // end PK0VS84

// add misc. qtys tbl
Function PK0VS91()


     /* **************  add  new record  *************/

  PK0VM030.XXXERRID = "PK0VS91";
  set SQLCA empty;
  set PKRREC empty;

  PKRREC.XWHCD = PK0VM030.XWHCD;
  PKRREC.PKURUNMD = "P"; /* runmode*/
  PKRREC.PKRMIUNT = PK0VM030.PKRMIUNT[PK0VWNX2];

  if (PK0VW01.PK0VWNX2 == 1)
    PKRREC.PKRMCSCD = "S";
  else
    if (PK0VW01.PK0VWNX2 == 2)
      PKRREC.PKRMCSCD = "U";
    else
      if (PK0VW01.PK0VWNX2 == 3)
        PKRREC.PKRMCSCD = "R";
      end
    end
  end






    /* ************************************************/
    /* *  FIRST, CHECK TO SEE IF THE ROW HAS BEEN    **/
    /* *  ADDED BY ANOTHER APPLICATION.              **/
    /* ************************************************/


  call "IO2090" ("S ", SQLCA, PKRREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 100) /* no record found, thats good*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == +0)
      converseLib.validationFailed(105);
      PK0VW01.PK0VWUPD = "N"; /* d.b. updated flag*/
      set PK0VM030.PKRMIUNT[PK0VWNX2] cursor, modified, bold;
      exit stack;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "PK0V";
        TA1REC.TA1LOCAT = "SELECT";
        TA1REC.TA1MAP = "PK0VM030";
        TA1REC.TA1DBASE = "DPICK.";
        TA1REC.TA1TBLVU = "VSELSR01"; /* table view*/
        TA1REC.TA1TBLKE = PK0VM030.XWHCD; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        set PK0VM030.PKRMIUNT[PK0VWNX2] cursor, modified, bold;
        converseLib.validationFailed(28);
        exit stack;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "PK0V";
        TA1REC.TA1LOCAT = "SELECT ";
        TA1REC.TA1MAP = "PK0VM030";
        TA1REC.TA1DBASE = "DPICK.";
        TA1REC.TA1TBLVU = "VSELSR01"; /* table view*/
        TA1REC.TA1TBLKE = PK0VM030.XWHCD; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        converseLib.validationFailed(29);
        exit stack;
      end
    end
  end








    /* ************************************************/
    /* *  NOW ADD THE ROW.                           **/
    /* ************************************************/
  set SQLCA empty;
  set PKRREC empty;

  PKRREC.XWHCD = PK0VM030.XWHCD;
  PKRREC.PKURUNMD = "P"; /* runmode*/
  PKRREC.PKRMIUNT = PK0VM030.PKRMIUNT[PK0VWNX2];

  if (PK0VW01.PK0VWNX2 == 1)
    PKRREC.PKRMCSCD = "S";
  else
    if (PK0VW01.PK0VWNX2 == 2)
      PKRREC.PKRMCSCD = "U";
    else
      if (PK0VW01.PK0VWNX2 == 3)
        PKRREC.PKRMCSCD = "R";
      end
    end
  end

  PK0VS94(); /* date/time*/

  call "IO2090" ("A ", SQLCA, PKRREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    PK0VW01.PK0VWUPD = "Y"; /* d.b. updated flag*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMNM = "PK0V";
      TA1REC.TA1LOCAT = "ADD";
      TA1REC.TA1MAP = "PK0VM030";
      TA1REC.TA1DBASE = "DPICK.";
      TA1REC.TA1TBLVU = "VSELSR01"; /* table view*/
      TA1REC.TA1TBLKE = PK0VM030.XWHCD; /* table key*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      set PK0VM030.PKRMIUNT[PK0VWNX2] cursor, modified, bold;
      converseLib.validationFailed(28);
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "PK0V";
      TA1REC.TA1LOCAT = "ADD";
      TA1REC.TA1MAP = "PK0VM030";
      TA1REC.TA1DBASE = "DPICK.";
      TA1REC.TA1TBLVU = "VSELSR01"; /* table view*/
      TA1REC.TA1TBLKE = PK0VM030.XWHCD; /* table key*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      converseLib.validationFailed(29);
      exit stack;
    end
  end






end // end PK0VS91

// change misc. qtys tbl
Function PK0VS93()


     /* *********  change rps/ups row              *********/

  PK0VM030.XXXERRID = "PK0VS93";
  set SQLCA empty;
  set PKRREC empty;


  PKRREC.XWHCD = PK0VM030.XWHCD;
  PKRREC.PKURUNMD = "P"; /* runmode*/
  PKRREC.PKRMIUNT = PK0VM030.PKRMIUNT[PK0VWNX2];
  PKRREC.PKRMCSCD = PK0VW01.PKRMCSCD[PK0VWNX2];
  PKRREC.ZZZCHGCT = PK0VW01.PK0VWRCT[PK0VWNX2];

  PK0VS94(); /* date/time*/

  call "IO2090" ("U ", SQLCA, PKRREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    PK0VW01.PK0VWUPD = "Y"; /* d.b. updated flag*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(105);
      set PK0VM030.PKRMIUNT[PK0VWNX2] cursor, modified, bold;
      PK0VW01.PK0VWUPD = "N"; /* d.b. updated flag*/
      exit stack;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "PK0V";
        TA1REC.TA1LOCAT = "CHANGE ";
        TA1REC.TA1MAP = "PK0VM030";
        TA1REC.TA1DBASE = "DPICK.";
        TA1REC.TA1TBLVU = "VSELSR01"; /* table view*/
        TA1REC.TA1TBLKE = PK0VM030.XWHCD; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        converseLib.validationFailed(28);
        exit stack;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "PK0V";
        TA1REC.TA1LOCAT = "CHANGE ";
        TA1REC.TA1MAP = "PK0VM030";
        TA1REC.TA1DBASE = "DPICK.";
        TA1REC.TA1TBLVU = "VSELSR01"; /* table view*/
        TA1REC.TA1TBLKE = PK0VM030.XWHCD; /* table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        converseLib.validationFailed(28);
        exit stack;
      end
    end
  end





end // end PK0VS93

// dates for new/changed records
Function PK0VS94()



   /*  */
   /* ------------ y2k out begin ----------*/
   /*  */
   /* MOVE EZEDTE TO PK0VW01.PK0VWFDA; /* date*/
   /* MOVE '19' TO PK0VW01.PK0VWFCT;   /* centry*/
   /*  */
   /* ------------ y2k out end ------------*/
   /*  */
   /*  */
   /* ------------ y2k in  begin ----------*/
   /*  */
  PK0VW01.PK0VWFDT = VGVar.currentGregorianDate; /* date*/
   /*  */
   /* ------------ y2k in end -------------*/
   /*  */
  PKRREC.ZZZCHGDT = PK0VW01.PK0VWFDT; /* change date*/
  PK0VW01.PK0VWTIM = VGVar.currentFormattedTime;
  PK0VW01.PK0VWTHH = PK0VW01.PK0VWHH;
  PK0VW01.PK0VWTMM = PK0VW01.PK0VWMI;
  PKRREC.ZZZCHGTM = PK0VW01.PK0VWTI; /* change time*/



end // end PK0VS94

//*** RECORD=PK0VW01 ****
// ;********************** pk0lw01 ****************************
// ;
// ;         work record for pk0m: select by order type
// ;
// ;***********************************************************
// ***********************
Record PK0VW01 type basicRecord
  5 PK0VWGR1 PK0VWGR1 ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 XGPCD XGPCD ; 
    10 PK0VWCTD PK0VWCTD ; 
    10 PK0VWNDX PK0VWNDX ; 
    10 PK0VWNX2 PK0VWNX2 ; 
    10 PK0VWNX3 PK0VWNX3 ; 
    10 PK0VWNX4 PK0VWNX4 ; 
    10 PK0VWEND PK0VWEND ; 
    10 PK0VWMAX PK0VWMAX ; 
    10 PK0VWTOP PK0VWTOP ; 
    10 PK0VWBOT PK0VWBOT ; 
    10 PK0VWFL1 PK0VWFL1 ; 
    10 PK0VWFL2 PK0VWFL2 ; 
    10 PK0VWMOD PK0VWMOD ; 
    10 PK0VWSEL PK0VWSEL ; 
    10 PK0VWED1 PK0VWED1 ; 
    10 PK0VWED2 PK0VWED2 ; 
    10 PK0VWUPD PK0VWUPD ; 
    10 PK0VWDT PK0VWDT ; 
      15 PK0VWMM PK0VWMM ; 
      15 PK0VWDD PK0VWDD ; 
      15 PK0VWYY PK0VWYY ; 
    10 PK0VWFDT PK0VWFDT ; 
      15 PK0VWFCT PK0VWFCT ; 
      15 PK0VWFDA PK0VWFDA ; 
        20 PK0VWFYY PK0VWFYY ; 
        20 PK0VWFMM PK0VWFMM ; 
        20 PK0VWFDD PK0VWFDD ; 
    10 PK0VWTIM PK0VWTIM ; 
      15 PK0VWHH PK0VWHH ; 
      15 * char(1) ; 
      15 PK0VWMI PK0VWMI ; 
      15 * char(1) ; 
      15 PK0VWSS PK0VWSS ; 
    10 PK0VWTI PK0VWTI ; 
      15 PK0VWTHH PK0VWTHH ; 
      15 PK0VWTMM PK0VWTMM ; 
    10 * char(1) ; 
    10 PK0VWCOT PK0VWCOT ; 
    10 PK0VWAOT PK0VWAOT ; 
    10 PK0VWSAV PK0VWSAV ; 
      15 XOTCD XOTCD [124] ; 
      15 XOTABRV XOTABRV [124] ; 
      15 PKUSQNBR PKUSQNBR [124] ; 
      15 PKUOTUNT PKUOTUNT [124] ; 
      15 PK0VWUCT PK0VWUCT [124] ; 
      15 * char(1) ; 
      15 PKRMIUNT PKRMIUNT [3] ; 
      15 PKRMCSCD PKRMCSCD [3] ; 
      15 PK0VWRCT PK0VWRCT [3] ; 
end // end PK0VW01

//*** RECORD=PK0VW02 ****
// ;********************** pk0mw02 ****************************
// ;
// ;         initialize area for pk0mw01 record
// ;
// ;***********************************************************
// ***********************
Record PK0VW02 type basicRecord
  10 PK0VWSAV PK0VWSAV ; 
    15 XOTCD XOTCD [124] ; 
    15 XOTABRV XOTABRV [124] ; 
    15 PKUSQNBR PKUSQNBR [124] ; 
    15 PKUOTUNT PKUOTUNT [124] ; 
    15 PK0VWUCT PK0VWUCT [124] ; 
    15 * char(1) ; 
    15 PKRMIUNT PKRMIUNT [3] ; 
    15 PKRMCSCD PKRMCSCD [3] ; 
    15 PK0VWRCT PK0VWRCT [3] ; 
end // end PK0VW02

// passed order type abrev
DataItem PK0VWAOT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bottom of screen in w.s.array
DataItem PK0VWBOT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// passed order type code
DataItem PK0VWCOT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current date -yyyymmdd
DataItem PK0VWCTD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PK0VWDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group date
DataItem PK0VWDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// o.t. sel update request-flag
DataItem PK0VWED1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rps/ups update request-flag
DataItem PK0VWED2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end position relative to map
DataItem PK0VWEND num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem PK0VWFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yymmdd
DataItem PK0VWFDA num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PK0VWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date in yyyymmdd
DataItem PK0VWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// enternal table overflow flag
DataItem PK0VWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for warning message
DataItem PK0VWFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PK0VWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem PK0VWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level
DataItem PK0VWGR1 char(2096)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hours
DataItem PK0VWHH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total # of valid o. t. rows
DataItem PK0VWMAX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// min.
DataItem PK0VWMI char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PK0VWMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data modified flag
DataItem PK0VWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// subscript - ws.loc of sb2
DataItem PK0VWNDX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// subscript - position on map
DataItem PK0VWNX2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// subscript - gen.purpose
DataItem PK0VWNX3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// subscript - for warehouse tbl
DataItem PK0VWNX4 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change count - pkrrec
DataItem PK0VWRCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data base save area
DataItem PK0VWSAV char(2006)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data selected for trans- flag
DataItem PK0VWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sec.
DataItem PK0VWSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hours
DataItem PK0VWTHH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// time
DataItem PK0VWTI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group time
DataItem PK0VWTIM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minutes
DataItem PK0VWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// top of screen in w.s.array
DataItem PK0VWTOP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// change count
DataItem PK0VWUCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// database updated flag
DataItem PK0VWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PK0VWYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

