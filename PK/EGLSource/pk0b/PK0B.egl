package pk0b;
import az.common.*;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ep.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import os.common.*;
import pc.common.*;
import pk.common.*;
import pw.common.*;
import sl.common.*;
import sm.common.*;
import sp.common.*;
import sr.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ti.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PK0B ****
// This application displays the Order Inquiry screen.
// 
// There are three ways that this application may be entered:
// 1) From a menu, PF key or FAST PATH with no initial key.
// 2) From a menu with one initial key.
// 3) From another application with an array of order keys.
// 
// The display is formatted with the first order, if one was
// provided.  Otherwise, the Order Header screen (map 2) is
// provided as an initial display to enter the order number.
// 
// If a schedule number is not entered by the user or if the
// order to be displayed was not selected from a list, both the
// Picking Order Pool and the Ship/Rec Order Table are searched
// for orders that match the entered order number.
// 
// If only one order is found, the order is displayed.  If more
// than one order is found, the orders are merged and stored
// in Temporary Storage, one display page per queue record.
// The list of orders is displayed to the user for selection.
// The user may page forward and backward to view the list.
// 
// When order information is displayed to the user, up to three
// display screens may be provided.  This depends on whether
// special handling, labels or instructions are present.
// 
// Order header information is the initial data that is
// displayed, using map 2.  If no special information is
// associated with the order, this is the only display.
// 
// If any special information does exist, the user is allowed
// access to the Order Handling screen, map 3.  There may be no
// data on this map, if only special instructions exist.  In
// this case, map 3 is used to "pass through" to the next map.
// 
// If special instructions exist, the user is allowed to access
// the Order Instructions screen, map 4.
// 
// The user may page forward and backward through any of the
// displays that are provided for the order.
// 
// If an array of order keys was provided, the next order is
// displayed when the ENTER key is pressed.  When the user
// exits this application via PF3, control is returned to the
// application that provided the array of order keys.
// 
// The user may exit to any allowed application via PF key or
// FAST PATH, at any time.
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          06/22/87  SPOPA   New application.
//          12/11/87  SPOPA   Obtain address for stock transfer
//                            orders via customer lookup.
//          02/05/88  SPOPA   Don't obtain a temporary storage
//                            page to display unless pages were
//                            successfully formatted.
// FIX      09/12/88  SPOPA   Reset temporary storage indicator
//                            whenever storage is purged.
//                            Upgrade HELP facility processing.
// sr#48    10/31/88  mblail  added alternate address lookup at
//                            pk0b533.
// pk104a   11/11/88  ryonke  added pick priority code to maps
//          12/06/88  jwood   added noncsp option to calls
//          12/06/88  jwood   added xssegtr logic
//          12/12/88  rhetr   added plan date to sched, pick,
//                            ship, or alloc date location.
//          07/21/89  jcampb  changed pk0i to pk09(menu)
//                            also added pwirec for io1720
//          08/02/89  jcampb  fix linkage from pk0c etc back to
//                            this app
//          08/22/89  jcampb  add cubic feet and convert to mtr
//          08/29/89  jcampb  change "volume" to "cubic" on map
//                            pk0bm002.
//  a0001   11/16/89  mwalto  Took out old key lookup using
//                            SR4REC op1cuoid, op1norid,
//                            pk1pksch & op1ntmal on IO0820
//                            for DB2 table changes.
//  ?????   11/20/91  DPETTI  PF3 NOW EXITS TO PK0J
// ColeHaan 08/18/92  SHENDE  Add invoice with shipment flag
//                            and advance ship notice flag.
// ColeHaan 08/26/92  SHENDE  Do not error with sqlcode = 100
//                            for dcust.veditp01.
// ColeHaan 09/02/92  smacmi  removed the '80' prefix from
//                            Cole-Haan customer display
// BugFix   12/01/92  mwilso  Get 'self' dept# from dcust.vdept
//                            if has not been found on pk4rec
//                            or sr2rec.  Chgs made to pk0bw02,
//                            pk0b211, pk0b500 added new module
//                            has been added (pk0b575) and
//                            added 'self' store & dept to map.
// Fed-X    03/18/93  mwilso  add pk-carr-spf-cd '40' to pk0bt.
// bug fx   03/25/93  mwilso  Fix temporay storage call error.
//                            Was giving msg 'no data' (ezemno
//                            11) when order had exactly 16
//                            diff schedules, which is the page
//                            max.  Added line to chk if page
//                            was written to TS in PK0B120,
//                            between"if pk0bw01.pk0bwixm GT 1"
//                            and "if pk0bw01.pk0bwswp eq y".
// PK#324   06/02/93  OVAZQU  Add Shipping charges, Bol#, and
//                            P/L# to map (PK0BM002).
// bug fx   08/25/93  PANDER  Modified PK0B500 to correctly
//                            display message.
// tblchg   03/03/94  mpluth  table changes.  changed xxxaddr
//                            fields to xxx-addr.
// pk00     12/27/94  hkempe  Changed to use shiprec batch stat
//                            in determining shipped orders -
//                            PK0B123 and PK0B530.
// CANADA   08/11/95  CBRINE  Added XCTCD to PKWREC
//          12/2/96   dmays   added one character to packing
//                            list number and moved right
//                            column one to the left.
// TBLCHG   05/16/97  VKAKUB  The ASN decription is now derived
//                            using new DEDI database tables
// ASN      02/25/98  DKESLE  show weight shown on pk0bm002
//                            screen as expected weight if not
//                            all items shipped
// ASN      03/20/98  DKESLE  use weight and shipping charges
//                            from vspbol01 if available
// ASN      04/27/98  dmays   change error routine in pk0bs599
//                            to ezeflo instead of ezertn on
//                            an abend.
// ASN      05/12/98  CBRINE  Remove NOMAPS from calls to
//                            TA0020.
// tblchgs  06/17/98  tdaugh  Regen'd for csprec changes
//                            TA0020.
// RETROFIT 03/31/98  OVAZQU  For whse 51 use mirror pool tbls
//                            on top of the regular pool tables
// RETROFIT 11/19/98  OVAZQU  When working with Mirror Pool
//                            tbl, make sure it also checks
//                            for the order being on Pool tbl.
// RETROFIT 12/15/98  KDENNE  When displaying the Mirror Pool
//                            status, use the dcms-stat-chng-dt
//                            instead of zz-sdt for the date.
// dlvrusa  03/20/01  rnunna  modified to show if an order is
//                            Goods Issued or not.
//                            PK0BM002,PK0BW02,PK0B211,PK0B520,
//                            PK0B531 modified.
//                    **** END ****
// *********************
Program PK0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AZFREC AZFREC; // record
  COMMAREA COMMAREA ; // record
  EPAREC EPAREC; // record
  EPIREC EPIREC; // record
  KUJREC KUJREC; // record
  PK0BMW01 PK0BMW01; // record
  PK0BW01 PK0BW01; // record
  PK0BW02 PK0BW02; // record
  PK0BW03 PK0BW03; // record
  PK4REC PK4REC; // record
  PK5REC PK5REC; // record
  PK6REC PK6REC; // record
  PK7REC PK7REC; // record
  PK9REC PK9REC; // record
  PKBREC PKBREC; // record
  PKFREC PKFREC; // record
  PKMREC PKMREC; // record
  PKWREC PKWREC; // record
  PKXREC PKXREC; // record
  PKYREC PKYREC; // record
  PWIREC PWIREC; // record
  PWOREC PWOREC; // record
  PWPREC PWPREC; // record
  SP1REC SP1REC; // record
  SQLCA SQLCA; // record
  SR1REC SR1REC; // record
  SR2REC SR2REC; // record
  SR3REC SR3REC; // record
  SR4REC SR4REC; // record
  SR9REC SR9REC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TF1REC TF1REC; // record
  VAZCIT01 VAZCIT01; // record
  VAZCTN01 VAZCTN01; // record
  VAZHDR01 VAZHDR01; // record
  VEDTPR01 VEDTPR01; // record
  VETPXM01 VETPXM01; // record
  VMPOLH01 VMPOLH01; // record
  VMPOLI01 VMPOLI01; // record
  VMPOLT01 VMPOLT01; // record
  VSPBOL01 VSPBOL01; // record
  XXPKW02 XXPKW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PK0BT {deleteAfterUse = yes}; // table
  use PK0BT01 {deleteAfterUse = yes}; // table
  use XHDTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use PK0BM.PK0BM001,  // forms
      PK0BM.PK0BM002, 
      PK0BM.PK0BM003, 
      PK0BM.PK0BM004, 
      PK0BM.XXPKM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage areas.*/
     /* If this application was initiated by another application to*/
     /* display a list of customers, save the array of keys.*/
     /* ------------------------------------------------------------*/

    set PK0BW01 empty; /* Initialize working storage*/
    set PK0BW02 empty; /* Initialize display storage*/
    set PK0BW03 empty; /* Initialize temporary storage*/
    set TA5REC empty; /* Temporary storage parameters*/

    if (COMMAREA.CAFRMSYS == "PK" /* Came from within the PICKING system*/
     || COMMAREA.CAFRMSYS == "PW") /* or the Wilsonville subsystem*/
      /* continue*/
    else
      set EPAREC empty;
    end


    if (PKWREC.PKWINDEX > 0) /* Inquiry keys array exists*/
      if (PKWREC.PKWSLTYP[PKWINDEX] == "M" /* Order key from menu*/
       || PKWREC.PKWSLTYP[PKWINDEX] == "O" /* or order keys array*/
       || PKWREC.PKWSLTYP[PKWINDEX] == "S") /* or specific order key*/

        PK0BW01.PKWSLTYP = PKWREC.PKWSLTYP[PKWINDEX]; /* Selection type*/
        PKYREC.PKWARRAY = PKWREC.PKWARRAY[PKWINDEX];
                                     /* Format key array*/
        PKWREC.XWHCD = PKYREC.XWHCD; /* Inquiry warehouse code*/
        PKWREC.XWHABRV = PKYREC.XWHABRV; /* and warehouse abbreviation*/

        EPAREC.EPAARRAY = COMMAREA.CA-USER-WORKAREA-2K-B;
        if (EPAREC.PK1CUOID[1] == 0)
          if (PKWREC.PKWSLTYP[PKWINDEX] == "M") /* Order key from menu*/
            EPAREC.EPAARRAY = PKWREC.PKWARRAY[PKWINDEX];
          end
        end

        if (PKWREC.PKWSLTYP[PKWINDEX] == "M" /* Order key from menu*/
         || PKWREC.PKWSLTYP[PKWINDEX] == "S") /* or specific order key*/

          PKWREC.PKWSLECT[PKWINDEX] = " "; /* Clear inquiry selections*/
          PKWREC.PKWINDEX = PKWREC.PKWINDEX - 1; /* Decrement inquiry index*/
        end
      end
    end

    PK0BW01.XWHCD = PKWREC.XWHCD; /* Initialize warehouse code*/
    PK0BW01.XWHABRV = PKWREC.XWHABRV; /* and warehouse abbreviation*/

    PK0BW01.XXXRVNBR = "05"; /* Application revision number*/

    goto PK0B001; /* Converse Order Inquiry*/


    PK0B001: PK0B001();
    goto PK0B001; /* Converse Order Inquiry*/


  end // end main
end // end PK0B

Function PK0B-VMPOLH01-SC()
   /* ---------------------------------------------------------------------*/
   /* Select COUNT from the Picking Mirror Order Pool.*/
   /* If not found, no orders exist on the Mirror Pool Database.*/
   /* If any error, indicate a system error.*/
   /* ---------------------------------------------------------------------*/

  set EPIREC empty;
  set VMPOLH01 empty;

  VMPOLH01.XWH-WHSE-CD = PK0BW01.XWHCD;
  VMPOLH01.PK-ORD-STKTF-ID = PK0BW02.PK1CUOID;

  if (PK0BW02.PK1NORID == 0)
    VMPOLH01.PK-NIKE-ORD-ID = -1;
  else
    VMPOLH01.PK-NIKE-ORD-ID = PK0BW02.PK1NORID;
  end

  if (PK0BW02.PK1ALLNB == 0)
    VMPOLH01.PK-NBR-TIMES-ALOC = -1;
  else
    VMPOLH01.PK-NBR-TIMES-ALOC = PK0BW02.PK1ALLNB;
  end

  EPIREC.EPI-DCMS-ORD-STAT-CD1 = "A";
  EPIREC.EPI-DCMS-ORD-STAT-CD2 = "P";
  EPIREC.EPI-DCMS-ORD-STAT-CD3 = "R";
  EPIREC.EPI-DCMS-ORD-STAT-CD4 = "S";

  EPIREC.EPI-IO-TASK = "T1";
  try
    call "VMPOLH01" (EPIREC, SQLCA, VMPOLH01) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call Successful*/

    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100) /* No order header was found*/

      if (SQLCA.VAGen_SQLCODE == 100) /* No order header was found*/
        EPIREC.EPI-PK-ORD-CNT = 0;
      end

      return;
    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/

  if (sysVar.errorCode == "00000000" /* Call Successful*/
   && SQLCA.VAGen_SQLCODE == -911)  

    converseLib.validationFailed(28);
    TA1REC.TA1FUNC = "POST";

  else

    converseLib.validationFailed(29);
    TA1REC.TA1FUNC = "RETN";

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNM = "PK0B-VMPOLH01-SC";
  TA1REC.TA1LOC = "SELECT COUNT FROM MIRROR POOL";
  TA1REC.TA1MAP = "PK0BM001";
  TA1REC.TA1DBASE = "DPICK";
  TA1REC.TA1TBLVU = "VMPOLH01";
  TA1REC.TA1TBLKE = VMPOLH01-KEY;

  call "TA0020" (TA1REC, SQLCA) {isExternal = yes};

  PK0BM001.XXXERRID = "PK0B100";

  return;

end // end PK0B-VMPOLH01-SC

// PICKING Order Inquiry
Function PK0B001()
   /* ------------------------------------------------------------*/
   /* Format and display the specified map.*/
   /* If no map is to be displayed, determine whether an order*/
   /* number has been entered and the map to be displayed.*/
   /* ------------------------------------------------------------*/

  if (PK0BW01.PK0BWSWM == "1") /* Map 1 to be displayed*/
    PK0B100(); /* Format selection list*/
  else
    if (PK0BW01.PK0BWSWM == "2") /* Map 2 to be displayed*/
      PK0B200(); /* Format order header*/
    else
      if (PK0BW01.PK0BWSWM == "3") /* Map 3 to be displayed*/
        PK0B300(); /* Format packaging instructions*/
      else
        if (PK0BW01.PK0BWSWM == "4") /* Map 4 to be displayed*/
          PK0B400(); /* Format distribution instructions*/
        else
          PK0B500(); /* Determine map to be displayed*/
        end
      end
    end
  end


end // end PK0B001

// Display order selection list
Function PK0B100()
   /* ------------------------------------------------------------*/
   /* If an order number was entered, but, not formatted, search*/
   /* for orders in picking and shipping that match the entered*/
   /* order number.  If no orders are found, exit to display the*/
   /* error message.  If only one order is found, exit to obtain*/
   /* the data to display.  If more than one order is found,*/
   /* clear the map output area and format the map fields.*/
   /* Display the map that was formatted.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process input request if not a cancel and no errors found.*/
   /* ------------------------------------------------------------*/

  PK0BW01.PK0BW-DCMS-SEL-FL = "N";
  if (PK0BW01.XWHCD == "51")
    PK0B-VMPOLH01-SC();

    if (EPIREC.EPI-PK-ORD-CNT > 0)
      PK0BW01.PK0BW-DCMS-SEL-FL = "Y";
    end
  end


  if (PK0BW01.PK0BWSWF == "Y") /* Order entered not formatted*/

    PK0BW01.PK1CUOID = PK0BW02.PK1CUOID; /* Order*/
    PK0BW01.PK1NORID = PK0BW02.PK1NORID; /* Sub-order*/
    PK0BW01.PK1ALLNB = PK0BW02.PK1ALLNB; /* Aloc nbr*/
    PK0BW01.XPPCD = PK0BW02.XPPCD; /* priority*/
    PK0BW01.PK1PKSCH = PK0BW02.PK1PKSCH; /* Schedule*/

    PK0B110(); /* Select order sets*/

    if (converseVar.validationMsgNum == 0) /* No errors were found*/
      set PK0BW03 empty; /* Clear temporary storage record*/
      PK0BW01.PK0BWIXM = 1; /* Reset display line number*/
      PK0BW01.PK0BWTSP = 1; /* Reset current page number*/
      PK0BW01.TA5TSQIX = 0; /* Reset highest page number*/
      PK0BW01.PK0BWSWP = " "; /* Initialize picking orders eof*/
      PK0BW01.PK0BWSWQ = " "; /* Initialize picking order read*/
      PK0BW01.PK0BWSWS = " "; /* Initialize shipping orders eof*/
      PK0BW01.PK0BWSWT = " "; /* Initialize shipping orders read*/
      PK0BW01.PK0BWSWU = " "; /* Initialize mirror pool orders eof*/
      PK0BW01.PK0BWSWV = " "; /* Initialize mirror pool order read*/

      while (PK0BW01.PK0BWSWP == " " /* Until picking orders eof*/
       || PK0BW01.PK0BWSWS == " " /* and shipping orders eof*/
       || PK0BW01.PK0BWSWU == " ") /* and mirror pool orders eof*/
        PK0B120(); /* Merge order sets and save*/
      end
    end

    if (converseVar.validationMsgNum == 0) /* No errors were found*/
      PK0B130(); /* Close order sets*/
    end

    if (converseVar.validationMsgNum == 0) /* No errors were found*/
      if (PK0BW01.PKWSLTYP == " ") /* No order was found*/
        set PK0BM002.PK1CUOID cursor, modified, bold; /* Highlight order*/
        set PK0BM002.PK1NORID modified, bold; /* Highlight sub-order*/
        converseLib.validationFailed(11); /* Indicate order not found*/
        PK0BM002.XXXERRID = "PK0B100 "; /* Error location*/
        PK0BW01.PK0BWSWM = "2"; /* Map to be displayed*/

        exit stack; /* Exit to display map*/
      end

      if (PK0BW01.PKWSLTYP == "S") /* Single order was found*/
        set PKYREC empty; /* Initialize array*/
        set EPAREC empty; /* Initialize Mirror pool array*/
        PKYREC.PKYORACT[1] = "S"; /* Indicate order selected*/
        PKYREC.PK1CUOID[1] = PK0BW02.PK1CUOID; /* Order*/
        PKYREC.PK1NORID[1] = PK0BW02.PK1NORID; /* Sub-order*/
        PKYREC.PK1PKSCH[1] = PK0BW02.PK1PKSCH; /* Schedule*/

        if (PK0BW01.PK0BW-DCMS-SEL-FL == "Y")
          EPAREC.EPAORACT[1] = "S"; /* Indicate order selected*/
          EPAREC.PK1CUOID[1] = PK0BW02.PK1CUOID; /* Order*/
          EPAREC.PK1NORID[1] = PK0BW02.PK1NORID; /* Sub-order*/
          EPAREC.PK1ALLNB[1] = PK0BW02.PK1ALLNB; /* Aloc-nbr*/
          EPAREC.PK1PKSCH[1] = PK0BW02.PK1PKSCH; /* Schedule*/
        end
        PK0BW01.PK0BWSWM = " "; /* Indicate obtain data*/

        exit stack; /* Exit to obtain data*/
      end
    end

    if (converseVar.validationMsgNum == 0) /* No errors were found*/
      PK0BW01.PK0BWSWF = "F"; /* Indicate display formatted*/
      TA5REC.TA5TSQIX = 0; /* Reset page in storage index*/
    end
  end


  if (PK0BW01.PK0BWMAP != "M001" /* Not the current display*/
   || PK0BW01.PK0BWTSP != TA5REC.TA5TSQIX) /* or not the current page*/
    PK0B140(); /* Format map output area*/
  end


  PK0B150(); /* Display the formatted map*/

  PK0B160(); /* Check attention identifier*/

  PK0B170(); /* Reset fields to normal intensity*/

  PK0B180(); /* Verify the entered data*/


  if (converseVar.eventKey not pa2 /* Not a cancel request*/
   && converseVar.validationMsgNum == 0) /* and no errors were found*/
    PK0B190(); /* Process valid input request*/
  end


end // end PK0B100

// Select order sets
Function PK0B110()
   /* ------------------------------------------------------------*/
   /* Select the orders to be displayed from the Picking Order*/
   /* Pool Header Table.  If no errors, select the orders to be*/
   /* displayed from the Shipping/Receiving Order Table.*/
   /* ------------------------------------------------------------*/

  PK0B111(); /* Select picking orders set*/

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    PK0B112(); /* Select shipped orders set*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    if (PK0BW01.PK0BW-DCMS-SEL-FL == "Y")
      PK0B113(); /* Select mirror pool orders set*/
    end
  end


end // end PK0B110

// Select picking order set
Function PK0B111()
   /* ------------------------------------------------------------*/
   /* Select the set of orders for the specified order number*/
   /* and warehouse from the Picking Order Pool Header Table.*/
   /* If sub-order number was not entered, a negative one (-1)*/
   /* is moved to that field to indicate to the I/O module that*/
   /* all sub-orders for the given order are to be selected.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  PK4REC.XWHCD = PK0BW01.XWHCD; /* Warehouse code*/
  PK4REC.PK1CUOID = PK0BW02.PK1CUOID; /* Order number*/
  if (PK0BW02.PK1NORID == 0) /* Sub-order not entered*/
    PK4REC.PK1NORID = -1; /* Indicate all sub-orders*/
  else
    PK4REC.PK1NORID = PK0BW02.PK1NORID; /* Sub-order number*/
  end

  PWIREC.PWIFUNC = "S3";
  call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B111 "; /* Process name*/
    TA1REC.TA1LOC = "SELECT ORDER POOL HEADER SET";
    TA1REC.TA1MAP = "PK0BM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
    TA1REC.TA1TBLKE = PK4REC.PK4GROUP; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM001.XXXERRID = "PK0B111 "; /* Error location*/
    return; /* Return to previous process*/
  end


end // end PK0B111

// Select shipping order set
Function PK0B112()
   /* ------------------------------------------------------------*/
   /* Select the set of orders for the specified order number*/
   /* and warehouse from the Shipping/Receiving Order Table.*/
   /* If sub-order number was not entered, a negative one (-1)*/
   /* is moved to that field to indicate to the I/O module that*/
   /* all sub-orders for the given order are to be selected.*/
   /* A negative one (-1) is arbitrarily moved to schedule and*/
   /* number of times allocated to indicate to the I/O module*/
   /* that all schedules and allocations are to be selected.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  SR2REC.XWHCD = PK0BW01.XWHCD; /* Warehouse code*/
  SR2REC.OP1CUOID = PK0BW02.PK1CUOID; /* Order number*/

  if (PK0BW02.PK1NORID == 0) /* Sub-order not entered*/

    SR2REC.OP1NORID = -1; /* Indicate all sub-orders*/
  else
    SR2REC.OP1NORID = PK0BW02.PK1NORID; /* Sub-order number*/

  end

  SR2REC.PK1PKSCH = -1; /* Indicate all schedule numbers*/
  SR2REC.OP1NTMAL = -1; /* Indicate all allocations*/

  call "IO0800" ("SS", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B112 "; /* Process name*/
    TA1REC.TA1LOC = "SELECT SHIP/REC ORDERS SET";
    TA1REC.TA1MAP = "PK0BM001"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
    TA1REC.TA1TBLKE = SR2REC.SR2GRP; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM001.XXXERRID = "PK0B112 "; /* Error location*/
    return; /* Return to previous process*/

  end


end // end PK0B112

// Select mirror pool order set
Function PK0B113()
   /* ------------------------------------------------------------*/
   /* Select the set of orders for the specified order number*/
   /* and warehouse from the Picking Mirror Pool Header Table.*/
   /* If sub-order number was not entered, a negative one (-1)*/
   /* is moved to that field to indicate to the I/O module that*/
   /* all sub-orders for the given order are to be selected.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  VMPOLH01.XWH-WHSE-CD = PK0BW01.XWHCD; /* Warehouse code*/
  VMPOLH01.PK-ORD-STKTF-ID = PK0BW02.PK1CUOID; /* Order number*/
  if (PK0BW02.PK1NORID == 0) /* Sub-order not entered*/
    VMPOLH01.PK-NIKE-ORD-ID = -1; /* Indicate all sub-orders*/
  else
    VMPOLH01.PK-NIKE-ORD-ID = PK0BW02.PK1NORID; /* Sub-order nbr*/
  end
  if (PK0BW02.PK1ALLNB == 0) /* Aloc-nbr not entered*/
    VMPOLH01.PK-NBR-TIMES-ALOC = -1; /* Indicate all aloc-nbrs*/
  else
    VMPOLH01.PK-NBR-TIMES-ALOC = PK0BW02.PK1ALLNB; /* Aloc-nbr*/
  end

  EPIREC.EPI-IO-TASK = "S1";
  call "VMPOLH01" (EPIREC, SQLCA, VMPOLH01) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B113 "; /* Process name*/
    TA1REC.TA1LOC = "SELECT MIRROR POOL HEADER SET";
    TA1REC.TA1MAP = "PK0BM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VMPOLH01"; /* Table view name*/
    TA1REC.TA1TBLKE = VMPOLH01.VMPOLH01-KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM001.XXXERRID = "PK0B113 "; /* Error location*/
    return; /* Return to previous process*/
  end


end // end PK0B113

// Merge order sets
Function PK0B120()
   /* ------------------------------------------------------------*/
   /* Merge the selected picking and shipping order sets.*/
   /* ------------------------------------------------------------*/

  if (PK0BW01.PK0BWSWP == " " /* Not picking orders eof*/
   && PK0BW01.PK0BWSWQ == " ") /* and no picking order was read*/
    PK0B121(); /* Fetch next picking order*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    if (PK0BW01.PK0BW-DCMS-SEL-FL == "Y")
      if (PK0BW01.PK0BWSWU == " " /* Not mirror orders eof*/
       && PK0BW01.PK0BWSWV == " ") /* and no mirror order was read*/
        PK0B126(); /* Fetch next mirror order*/
      end
    else
      PK0BW01.PK0BWSWU = "Y"; /* No DCMS process, assume e-o-f*/
    end
  end

  if (converseVar.validationMsgNum == 0 /* No errors were found*/
   && PK0BW01.PK0BWSWS == " "           /* and not shipping orders eof*/
   && PK0BW01.PK0BWSWT == " ")          /* and no shipping order was read*/
    PK0B122(); /* Fetch next shipping order*/
  end


  if (converseVar.validationMsgNum != 0) /* Force exit if error was found*/
    PK0BW01.PK0BWSWP = "Y"; /* Indicate picking orders eof*/
    PK0BW01.PK0BWSWS = "Y"; /* Indicate shipping orders eof*/
    PK0BW01.PK0BWSWU = "Y"; /* Indicate mirror pool orders eof*/

    return; /* get back*/
  end



  PK0BW-MTCH-PK1NORID = 0;
  if (PK0BW01.PK0BWSWV == "Y") /* Mirror pool order was read*/
    PK0BW01.PK0BW-MTCH-PK1NORID = VMPOLH01.PK-NIKE-ORD-ID;
  end
  if (PK0BW01.PK0BWSWQ == "Y") /* Picking order was read*/
    if (PK0BW01.PK0BW-MTCH-PK1NORID == 0
     || PK4REC.PK1NORID < PK0BW01.PK0BW-MTCH-PK1NORID)
      PK0BW01.PK0BW-MTCH-PK1NORID = PK4REC.PK1NORID;
    end
  end
  if (PK0BW01.PK0BWSWT == "Y") /* Shipping order was read*/
    if (PK0BW01.PK0BW-MTCH-PK1NORID == 0
     || SR2REC.OP1NORID < PK0BW01.PK0BW-MTCH-PK1NORID)
      PK0BW01.PK0BW-MTCH-PK1NORID = SR2REC.OP1NORID;
    end
  end

  if (PK0BW01.PK0BWSWT == "Y" /* Shipping order was read*/
   && SR2REC.OP1NORID == PK0BW01.PK0BW-MTCH-PK1NORID)
    PK0B123(); /* Move Shipping order to display*/
  else
    if (PK0BW01.PK0BWSWQ == "Y" /* Picking order was read*/
     && PK4REC.PK1NORID == PK0BW01.PK0BW-MTCH-PK1NORID)
      PK0B124(); /* Move Picking order to display*/
    else
      if (PK0BW01.PK0BWSWV == "Y" /* Mirror pool order was read*/
       && VMPOLH01.PK-NIKE-ORD-ID == PK0BW01.PK0BW-MTCH-PK1NORID)
        PK0B127(); /* Move Mirror pool order to display*/
      end
    end
  end



  if (PK0BW01.PK0BWIXM > 16) /* Page is full*/
    PK0B125(); /* Add page to temporary storage*/
  else
    if (PK0BW01.PK0BWIXM > 1 /* current detail line index*/
     || PK0BW01.TA5TSQIX >= 1) /* Temporary storage page nbr*/

      if (PK0BW01.PK0BWSWP == "Y" /* and end of picking orders*/
       && PK0BW01.PK0BWSWS == "Y" /* and end of shipping orders*/
       && PK0BW01.PK0BWSWU == "Y") /* and end of mirror pool orders*/

        if (PK0BW01.TA5TSQIX > 0 /* Temporary storage page was written*/
         || PK0BW01.PK0BWIXM > 2) /* or more than one order found*/

          PK0BW01.PKWSLTYP = "I"; /* Indicate multiple orders*/
          PK0B125(); /* Add page to temporary storage*/
        else
          PK0BW01.PKWSLTYP = "S"; /* Indicate single order found*/
          PK0BW02.PK1CUOID = PK0BW03.PK1CUOID[1]; /* Order number*/
          PK0BW02.PK1NORID = PK0BW03.PK1NORID[1]; /* Sub-order*/
          PK0BW02.PK1ALLNB = PK0BW03.PK1ALLNB[1]; /* Aloc-nbr*/
          PK0BW02.XPPCD = PK0BW03.XPPCD[1]; /* priority*/
          PK0BW02.PK1PKSCH = PK0BW03.PK1PKSCH[1]; /* Schedule number*/
        end
      end
    end
  end


  if (converseVar.validationMsgNum != 0) /* Force exit if error was found*/
    PK0BW01.PK0BWSWP = "Y"; /* Indicate picking orders eof*/
    PK0BW01.PK0BWSWS = "Y"; /* Indicate shipping orders eof*/
    PK0BW01.PK0BWSWU = "Y"; /* Indicate mirror pool orders eof*/
  end


end // end PK0B120

// Fetch selected picking order
Function PK0B121()
   /* ------------------------------------------------------------*/
   /* Fetch the next order from the selected picking orders set.*/
   /* If end of file, set picking orders eof switch.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  PWIREC.PWIFUNC = "N3";
  call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    PK0BW01.PK0BWSWP = "Y"; /* Indicate end of file*/
    return; /* Return to previous process*/
  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* DB conflict*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B121 "; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT ORDER POOL HEADER";
    TA1REC.TA1MAP = "PK0BM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
    TA1REC.TA1TBLKE = PK4REC.PK4GROUP; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM001.XXXERRID = "PK0B121 "; /* Error location*/

    return; /* Return to previous process*/
  end

  PK0BW01.PK0BWSWQ = "Y"; /* Indicate picking order read*/


end // end PK0B121

// Fetch selected shipping order
Function PK0B122()
   /* ------------------------------------------------------------*/
   /* Fetch the next order from the selected shipping orders set.*/
   /* If end of file, set shipping orders eof switch.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "IO0800" ("SN", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

    PK0BW01.PK0BWSWS = "Y"; /* Indicate end of file*/
    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B122 "; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT SHIP/REC ORDER";
    TA1REC.TA1MAP = "PK0BM001"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM001.XXXERRID = "PK0B122 "; /* Error location*/
    return; /* Return to previous process*/

  end

  PK0BW01.PK0BWSWT = "Y"; /* Indicate shipping order read*/


end // end PK0B122

// Save shipping order data
Function PK0B123()
   /* ------------------------------------------------------------*/
   /* Obtain the shipping header record for the schedule.*/
   /* Move the fields from the shipping records to the temporary*/
   /* storage display line.*/
   /* ------------------------------------------------------------*/

  SR1REC.XWHCD = PK0BW01.XWHCD; /* Warehouse code*/
  SR1REC.PK1PKSCH = SR2REC.PK1PKSCH; /* Schedule*/

  call "IO0790" ("S ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B123 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN SHIP/REC HEADER TABLE ROW";
    TA1REC.TA1MAP = "PK0BM001"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRHDR01"; /* Table view name*/
    TA1REC.TA1TBLKE = SR1REC.SR1KEYS; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM001.XXXERRID = "PK0B123"; /* Error location*/
    return; /* Return to previous process*/
  end

  PK0BW03.PK1CUOID[PK0BWIXM] = SR2REC.OP1CUOID;
  PK0BW03.PK1NORID[PK0BWIXM] = SR2REC.OP1NORID;
  PK0BW03.XPPCD[PK0BWIXM] = SR2REC.XPPCD;
  PK0BW03.PK1PKSCH[PK0BWIXM] = SR2REC.PK1PKSCH;
  PK0BW03.SR2TOTCF[PK0BWIXM] = SR2REC.SR2TOTCF;

  if (SR2REC.SR1PKSFL == "N" /* Order not picked*/
   && SR1REC.SR1PKSFL == "Y" /* but schedule is picked*/
   && SR1REC.SR1PKAFL == "Y") /* and has not been processed*/

    SR2REC.SR1PKSFL = "Y"; /* Indicate order picked*/
    SR2REC.SR1PKSDT = SR1REC.SR1PKSDT; /* Pick status date*/
  end

  if (SR1REC.SR1BTST == "P" /* If prepared or*/
   || SR1REC.SR1BTST == "B" /* balanced or*/
   || SR1REC.SR1BTST == "R") /* released*/
    PK0BW03.PK0BMDTL[PK0BWIXM] = "SHIPPED   ";
    PK0BW03.SR1PKSDT[PK0BWIXM] = SR1REC.SR1SHPDT;

    /* Batch status is 'B'alanced, but voided in DCMS*/

    if (PK0BW01.XWHCD == "51"
     && SR1REC.TF1CARNM == "DCMS"
     && SR2REC.SR-STOP-ORD-SHP-FL == "Y")
      PK0BW03.PK0BMDTL[PK0BWIXM] = "VOIDED    ";
      PK0BW03.SR1PKSDT[PK0BWIXM] = SR1REC.SR1PKSDT;
    end

  else
    if (PK0BW01.XWHCD == "51"
     && SR1REC.TF1CARNM == "DCMS") /* Order processed by DCMS*/

      PK0BW03.SR1PKSDT[PK0BWIXM] = SR1REC.SR1PKSDT;
      if (SR2REC.SR-STOP-ORD-SHP-FL == "Y")
        PK0BW03.PK0BMDTL[PK0BWIXM] = "VOIDED    ";
      else
        if (SR1REC.SR1SHPDT == 0) /* Shipped, but not Billed*/
          PK0BW03.PK0BMDTL[PK0BWIXM] = "SNB       ";
        else
          PK0BW03.PK0BMDTL[PK0BWIXM] = "SHIPPED   ";
          PK0BW03.SR1PKSDT[PK0BWIXM] = SR1REC.SR1SHPDT;
        end
      end

    else
      if (SR2REC.SR1PKSFL == "Y") /* Picked status*/
        PK0BW03.PK0BMDTL[PK0BWIXM] = "PICKED    ";
        PK0BW03.SR1PKSDT[PK0BWIXM] = SR2REC.SR1PKSDT;
      else
        PK0BW03.PK0BMDTL[PK0BWIXM] = "SCHEDULED ";
        PK0BW03.SR1PKSDT[PK0BWIXM] = SR2REC.ZZZSDT;
      end
    end
  end

  PK0BW03.PK4OTUNT[PK0BWIXM] = SR2REC.SR2QTYSH;
  PK0BW03.PK4OTWGT[PK0BWIXM] = SR2REC.PK1WT;
  PK0BW03.SR2TOTCF[PK0BWIXM] = SR2REC.SR2TOTCF;

  PK0BW01.PK0BWSWT = " "; /* Reset for next shipping record*/

  PK0BW01.PK0BWIXM = PK0BW01.PK0BWIXM + 1; /* Increment line index*/


end // end PK0B123

// Save picking order data
Function PK0B124()
   /* ------------------------------------------------------------*/
   /* Move the fields from the picking record to the temporary*/
   /* storage display line.*/
   /* ------------------------------------------------------------*/

  PK0BW03.PK1CUOID[PK0BWIXM] = PK4REC.PK1CUOID;
  PK0BW03.PK1NORID[PK0BWIXM] = PK4REC.PK1NORID;
  PK0BW03.XPPCD[PK0BWIXM] = PK4REC.XPPCD;

  if (PK4REC.PK4PLNDT == 0)
    PK0BW03.PK0BMDTL[PK0BWIXM] = "ALLOCATED ";
    PK0BW03.SR1PKSDT[PK0BWIXM] = PK4REC.ZZZSDT;
  else
    PK0BW03.PK0BMDTL[PK0BWIXM] = "PLANNED   ";
    PK0BW03.SR1PKSDT[PK0BWIXM] = PK4REC.PK4PLNDT;
  end
  PK0BW03.PK4OTUNT[PK0BWIXM] = PK4REC.PK4OTUNT;
  PK0BW03.PK4OTWGT[PK0BWIXM] = PK4REC.PK4OTWGT;

  PK0BW01.PK0BWSWQ = " "; /* Reset for next picking record*/
  PK0BW01.PK0BWIXM = PK0BW01.PK0BWIXM + 1; /* Increment line index*/


end // end PK0B124

// Add page to temporary storage
Function PK0B125()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PK0BW03.PK0BWLEN = 692; /* Temporary storage length*/
  TA5REC.TA5APPID = "PK0B"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (PK0BW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B125 "; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PK0BM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM001.XXXERRID = "PK0B125 "; /* Error location*/
    return; /* Return to previous process*/
  end

  PK0BW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

  set PK0BW03 empty; /* Clear temporary storage record*/
  PK0BW01.PK0BWIXM = 1; /* Reset display line number*/


end // end PK0B125

// Fetch selected mirror pool ord
Function PK0B126()
   /* ------------------------------------------------------------*/
   /* Fetch the next order from the selected mirror pool orders set.*/
   /* If end of file, set picking orders eof switch.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  EPIREC.EPI-IO-TASK = "N1";
  call "VMPOLH01" (EPIREC, SQLCA, VMPOLH01) {isNoRefresh = yes, isExternal = yes}; /* Fetch next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    PK0BW01.PK0BWSWU = "Y"; /* Indicate end of file*/
    return; /* Return to previous process*/
  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* DB conflict*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B126 "; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT MIRROR POOL HEADER";
    TA1REC.TA1MAP = "PK0BM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VMPOLH01"; /* Table view name*/
    TA1REC.TA1TBLKE = VMPOLH01.VMPOLH01-KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM001.XXXERRID = "PK0B126 "; /* Error location*/

    return; /* Return to previous process*/
  end

  PK0BW01.PK0BWSWV = "Y"; /* Indicate picking order read*/


end // end PK0B126

// Save mirror pool order data
Function PK0B127()
   /* ------------------------------------------------------------*/
   /* Move the fields from the mirror record to the temporary*/
   /* storage display line.*/
   /* ------------------------------------------------------------*/

  PK0BW03.PK1CUOID[PK0BWIXM] = VMPOLH01.PK-ORD-STKTF-ID;
  PK0BW03.PK1NORID[PK0BWIXM] = VMPOLH01.PK-NIKE-ORD-ID;
  PK0BW03.PK1ALLNB[PK0BWIXM] = VMPOLH01.PK-NBR-TIMES-ALOC;
  PK0BW03.XPPCD[PK0BWIXM] = VMPOLH01.XPP-PICK-PRTY-CD;
  PK0BW03.DCMS-ERROR-FL[PK0BWIXM] = VMPOLH01.DCMS-ERROR-FL;
  PK0BW03.SR1PKSDT[PK0BWIXM] = VMPOLH01.DCMS-STAT-CHNG-DT;

  if (VMPOLH01.DCMS-ORD-STAT-CD == "A")
    PK0BW03.PK0BMDTL[PK0BWIXM] = "PASSED     ";
  else
    if (VMPOLH01.DCMS-ORD-STAT-CD == "R")
      PK0BW03.PK0BMDTL[PK0BWIXM] = "RELEASED   ";
    else
      if (VMPOLH01.DCMS-ORD-STAT-CD == "S")
        PK0BW03.PK0BMDTL[PK0BWIXM] = "SELECTED   ";
      else
        if (VMPOLH01.DCMS-ORD-STAT-CD == "P")
          PK0BW03.PK0BMDTL[PK0BWIXM] = "PACK&HOLD";
        else
          if (VMPOLH01.DCMS-ORD-STAT-CD == "D")
            PK0BW03.PK0BMDTL[PK0BWIXM] = "DEALLOCATD";
          else
            if (VMPOLH01.DCMS-ERROR-FL == "Y")
              PK0BW03.PK0BMDTL[PK0BWIXM] = "IN REVIEW  ";
            else
              PK0BW03.PK0BMDTL[PK0BWIXM] = "IN PROCESS ";
            end
          end
        end
      end
    end
  end

  PK0BW03.PK4OTUNT[PK0BWIXM] = VMPOLH01.PK-TOT-ORD-QTY;
  PK0BW03.PK4OTWGT[PK0BWIXM] = VMPOLH01.PK-TOT-ORD-WT;

  PK0BW01.PK0BWSWV = " "; /* Reset for next picking record*/
  PK0BW01.PK0BWIXM = PK0BW01.PK0BWIXM + 1; /* Increment line index*/


end // end PK0B127

// Close order sets
Function PK0B130()
   /* ------------------------------------------------------------*/
   /* Close the selected orders sets.*/
   /* ------------------------------------------------------------*/

  PK0B131(); /* Close picking orders set*/

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    PK0B132(); /* Close shipped orders set*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    if (PK0BW01.PK0BW-DCMS-SEL-FL == "Y")
      PK0B133(); /* Close Mirror Pool orders set*/
    end
  end


end // end PK0B130

// Close picking order set
Function PK0B131()
   /* ------------------------------------------------------------*/
   /* Close the selected Picking Order Pool Header set.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  PWIREC.PWIFUNC = "C3";
  call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* Close tbl set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* Indicate system error*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B131 "; /* Process name*/
    TA1REC.TA1LOC = "CLOSE ORDER POOL HEADER SET";
    TA1REC.TA1MAP = "PK0BM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM001.XXXERRID = "PK0B131 "; /* Error location*/
    return; /* Return to previous process*/
  end


end // end PK0B131

// Close shipping order set
Function PK0B132()
   /* ------------------------------------------------------------*/
   /* Close the selected Shipping/Receiving Order set.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "IO0800" ("CS", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B132 "; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SHIP/REC ORDERS SET";
    TA1REC.TA1MAP = "PK0BM001"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM001.XXXERRID = "PK0B132 "; /* Error location*/
    return; /* Return to previous process*/

  end


end // end PK0B132

// Close Mirror Pool order set
Function PK0B133()
   /* ------------------------------------------------------------*/
   /* Close the selected Picking Mirror Pool Header set.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  EPIREC.EPI-IO-TASK = "C1";
  call "VMPOLH01" (EPIREC, SQLCA, VMPOLH01) {isNoRefresh = yes, isExternal = yes}; /* Close tbl set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* Indicate system error*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B133 "; /* Process name*/
    TA1REC.TA1LOC = "CLOSE MIRROR POOL HEADER SET";
    TA1REC.TA1MAP = "PK0BM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VMPOLH01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM001.XXXERRID = "PK0B133 "; /* Error location*/
    return; /* Return to previous process*/
  end


end // end PK0B133

// Format the map
Function PK0B140()
   /* ------------------------------------------------------------*/
   /* Format the map heading area.*/
   /* If pages have been formatted in temporary storage, format*/
   /* the data lines of the current page to be displayed.*/
   /* ------------------------------------------------------------*/

  PK0BW01.PK0BWMAP = "M001"; /* Indicate current display*/

  set PK0BM001 initial; /* Clear map storage area*/
  if (PK0BW01.XWHCD == "51"
   || COMMAREA.XWHCD == "51")
    PK0BM001.PK0BM-SCHED-ID-LIT = " MANIFEST ID";
  else
    PK0BM001.PK0BM-SCHED-ID-LIT = "  SCHEDULE  ";
  end

  PK0BM001.XXXRVNBR = PK0BW01.XXXRVNBR; /* Application revision*/
  PK0BM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PK0BM001.XWHCD = PK0BW01.XWHCD; /* Warehouse code*/
  PK0BM001.XWHABRV = PK0BW01.XWHABRV; /* Warehouse abbreviation*/

  if (PK0BW01.PK0BWSWF != "Y") /* Requested data was formatted*/
    if (PK0BW01.PK0BWTSP != TA5REC.TA5TSQIX) /* Page in storage not current*/
      if (TA5REC.TA5TSQIX != 0) /* There is a page in storage*/
        PK0B141(); /* Save current displayed page*/
      end
      PK0B142(); /* Obtain next page to display*/
    end

    PK0BM001.PK0BWTSP = PK0BW01.PK0BWTSP; /* Current page*/
    PK0BM001.TA5TSQIX = PK0BW01.TA5TSQIX; /* Highest page*/

    PK0BW01.PK0BWIXM = 1; /* Initialize map index*/

    while (PK0BW01.PK0BWIXM <= 16 /* Until output display is full*/
     && PK0BW03.PK1CUOID[PK0BWIXM] != 0) /* or all lines are formatted*/
      PK0B143(); /* Format selection line*/
    end
  end


end // end PK0B140

// Update temporary storage page
Function PK0B141()
   /* ------------------------------------------------------------*/
   /* Update the page of orders in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Update page in temporary storage*/

  call "TA0050" (PK0BW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B141 "; /* Process name*/
    TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PK0BM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM001.XXXERRID = "PK0B141 "; /* Error location*/
    return; /* Return to previous process*/

  end


end // end PK0B141

// Read temporary storage page
Function PK0B142()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of orders to display.*/
   /* ------------------------------------------------------------*/

  PK0BW03.PK0BWLEN = 692; /* Temporary storage length*/
  TA5REC.TA5APPID = "PK0B"; /* Application identification*/
  TA5REC.TA5TSQIX = PK0BW01.PK0BWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (PK0BW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B142 "; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PK0BM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM001.XXXERRID = "PK0B142 "; /* Error location*/
    return; /* Return to previous process*/
  end


end // end PK0B142

// Format selection line
Function PK0B143()
   /* ------------------------------------------------------------*/
   /* Format the fields from the temporary storage record line to*/
   /* the output display line.*/
   /* ------------------------------------------------------------*/

  set PK0BM001.PK0BMDTL[PK0BWIXM] initialAttributes;
  if (PK0BW03.DCMS-ERROR-FL[PK0BWIXM] == "Y")
    set PK0BM001.PK0BMDTL[PK0BWIXM] skip, red;
  end

  PK0BM001.PK0BMSEL[PK0BWIXM] = PK0BW03.PK0BMSEL[PK0BWIXM];

  set PK0BM001.PK0BMALP[PK0BWIXM] initialAttributes; /* set dark aloc-nbr dot*/
  set PK0BM001.PK1ALLNB[PK0BWIXM] initialAttributes; /* set dark aloc-nbr*/

  if (PK0BW01.XWHCD == "51")
    set PK0BM001.PK0BMALP[PK0BWIXM] skip; /* Aloc-nbr dot*/
    set PK0BM001.PK1ALLNB[PK0BWIXM] skip; /* Aloc-nbr*/
  end

  if (PK0BW01.PK0BWIXM == 1) /* First selection line*/
    set PK0BM001.PK0BMSEL[PK0BWIXM] cursor, normal; /* Cursor and unprotect*/
    set PK0BM001.PK1CUOID[PK0BWIXM] normal; /* Unprotect order*/
    set PK0BM001.PK1NORID[PK0BWIXM] normal; /* Unprotect sub-order*/
    set PK0BM001.PK1PKSCH[PK0BWIXM] normal; /* Unprotect schedule*/
    if (PK0BW01.XWHCD == "51")
      set PK0BM001.PK1ALLNB[PK0BWIXM] normal; /* Aloc-nbr*/
    end
  else
    set PK0BM001.PK0BMSEL[PK0BWIXM] normal; /* Unprotect selection tag*/
    set PK0BM001.PK1CUOID[PK0BWIXM] skip; /* Autoskip order*/
    set PK0BM001.PK1NORID[PK0BWIXM] skip; /* Autoskip sub-order*/
    set PK0BM001.PK1PKSCH[PK0BWIXM] skip; /* Autoskip schedule*/
  end

  if (PK0BW03.PK0BMSEL[PK0BWIXM] == "S") /* Order selected not viewed*/
    set PK0BM001.PK0BMSEL[PK0BWIXM] modified; /* Set modified data tag*/
    PK0BW03.PK0BMSEL[PK0BWIXM] = " "; /* Clear select tag in storage*/
  end

  PK0BM001.PK1CUOID[PK0BWIXM] = PK0BW03.PK1CUOID[PK0BWIXM];
  set PK0BM001.PK0BMONP[PK0BWIXM] skip; /* Order number punctuation*/
  PK0BM001.PK1NORID[PK0BWIXM] = PK0BW03.PK1NORID[PK0BWIXM];
  if (PK0BW03.PK1ALLNB[PK0BWIXM] != 0)
    PK0BM001.PK1ALLNB[PK0BWIXM] = PK0BW03.PK1ALLNB[PK0BWIXM];
  end
  PK0BM001.XPPCD[PK0BWIXM] = PK0BW03.XPPCD[PK0BWIXM];

  if (PK0BW03.PK1PKSCH[PK0BWIXM] != 0) /* Schedule number exists*/
    PK0BM001.PK1PKSCH[PK0BWIXM] = PK0BW03.PK1PKSCH[PK0BWIXM];
  end

  PK0BM001.PK0BMDTL[PK0BWIXM] = PK0BW03.PK0BMDTL[PK0BWIXM];
  PK0BM001.SR1PKSDT[PK0BWIXM] = PK0BW03.SR1PKSDT[PK0BWIXM];
  PK0BM001.PK4OTUNT[PK0BWIXM] = PK0BW03.PK4OTUNT[PK0BWIXM];

  PK0BW01.PK0BWIXM = PK0BW01.PK0BWIXM + 1; /* Increment line index*/


end // end PK0B143

// Display the formatted map
Function PK0B150()
   /* ------------------------------------------------------------*/
   /* Highlight warehouse code if warehouse not valid.*/
   /* Indicate sound audible alarm for any error message.*/
   /* Display the map that was formatted.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/

    if (PKWREC.XWHABRV == " ") /* Warehouse missing or invalid*/

      set PK0BM001.XWHCD cursor, modified, bold; /* Highlight warehouse*/
      PK0BM001.XXXERRID = "PK0B150 "; /* Error location*/

    end

    set PK0BM001 alarm; /* Indicate sound alarm*/

  end

  converse PK0BM001 ;


end // end PK0B150

// Check attention identifier
Function PK0B160()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PK0BM001 initial; /* Clear the map storage area*/

    PK0BW01.PK0BWMAP = " "; /* Clear current display indicator*/

    PKWREC.XWHCD = PK0BW01.XWHCD; /* Restore warehouse code*/
    PKWREC.XWHABRV = PK0BW01.XWHABRV; /* and abbreviation*/

    return; /* Return to previous process*/

  end

  if (PK0BM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PK0B161(); /* Execute FAST PATH request*/

    else

      set PK0BM001.CATOAP cursor, modified, bold; /* Highlight application*/
      converseLib.validationFailed(13); /* Indicate PF key not valid*/
      PK0BM001.XXXERRID = "PK0B160 "; /* Error location*/

      exit stack; /* Exit to redisplay map*/

    end

  end

  if (converseVar.eventKey is pf3  /* PF3 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14 was pressed*/
   || converseVar.eventKey is pf15 /* or PF15 was pressed*/
   || converseVar.eventKey is pf16 /* or PF16 was pressed*/
   || converseVar.eventKey is pf18 /* or PF18 was pressed*/
   || converseVar.eventKey is pf19 /* or PF19 was pressed*/
   || converseVar.eventKey is pf20) /* or PF20 was pressed*/

    PK0B163(); /* Transfer to another application*/

  end

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/

    PK0B162(); /* Purge any temporary storage*/

    COMMAREA.CATOAP = "GD01"; /* Help application*/
    COMMAREA.CAITEM = "PK0B100"; /* Application find code*/

    XSEXIT(); /* Exit to the HELP facility*/

    PK0BW01.PK0BWSWM = "2"; /* Indicate display map 2*/

    PK0BS02(); /* Format map heading areas*/

    PK0BM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/
    PK0BM002.XXXERRID = "PK0B160 "; /* Error location*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/

    PK0B162(); /* Purge any temporary storage*/

    XSPF4(); /* Exit to system main menu*/

    PK0BW01.PK0BWSWM = "2"; /* Indicate display map 2*/

    PK0BS02(); /* Format map heading areas*/

    PK0BM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/
    PK0BM002.XXXERRID = "PK0B160 "; /* Error location*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0BM001.XXXERRID = "PK0B160 "; /* Error location*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0B160

// Execute FAST PATH request
Function PK0B161()
   /* ------------------------------------------------------------*/
   /* Transfer to requested application via FAST PATH.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (PK0BM001.CATOAP == COMMAREA.CACURRAP)
                                   /* TO application same as current*/

    set PK0BM001.CATOAP cursor, modified, bold; /* Highlight TO application*/
    converseLib.validationFailed(1); /* Indicate invalid request*/
    PK0BM001.XXXERRID = "PK0B161 "; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  PK0B162(); /* Purge any temporary storage*/

  PKWREC.XWHCD = PK0BM001.XWHCD; /* Save warehouse code*/

  COMMAREA.CATOAP = PK0BM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PK0BM001.CAITEM; /* Application data*/

  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* Application user area*/

  XSEXIT(); /* Transfer to requested application*/

  PK0BW01.PK0BWSWM = "2"; /* Indicate display map 2*/

  PK0BS02(); /* Format map heading areas*/

  PK0BM002.CATOAP = COMMAREA.CATOAP; /* To application*/

  set PK0BM002.CATOAP cursor, modified, bold; /* Highlight TO application*/

  PK0BM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
  converseLib.validationFailed(); /* Force alarm to sound*/
  PK0BM002.XXXERRID = "PK0B161 "; /* Process name*/

  COMMAREA.CATOAP = " "; /* Clear TO application*/

  exit stack; /* Exit to redisplay map*/


end // end PK0B161

// Purge any temporary storage
Function PK0B162()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PK0B"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (PK0BW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B162 "; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PK0BM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/
  end

  set PK0BW02 empty; /* Initialize display storage*/
  set PK0BW03 empty; /* Initialize temporary storage*/

  PK0BW01.PK0BWTSP = 1; /* Reset current page number*/
  PK0BW01.TA5TSQIX = 0; /* Reset temporary storage index*/
  PK0BW01.PK0BWSWF = " "; /* Reset format switch*/
  PK0BW01.PK0BWSWO = " "; /* Reset orders selected switch*/

  if (PK0BW01.PKWSLTYP != "O") /* Not an order array*/
    PK0BW01.PKWSLTYP = " "; /* Reset selection type indicator*/
  end

  COMMAREA.CA-USER-WORKAREA-2K-B = EPAREC.EPAARRAY;


end // end PK0B162

// Exit to another application
Function PK0B163()
   /* ------------------------------------------------------------*/
   /* Set the "TO" application according to the PF key pressed.*/
   /* If warehouse code was modified, save in common work area.*/
   /* Transfer to the application.  Display any returned error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    if (PKWREC.PKWINDEX > 0) /* Previous application exists*/
      COMMAREA.CATOAP = PKWREC.PKWFRMAP[PKWINDEX];
    else
      COMMAREA.CATOAP = "PK0J"; /* INQUIRY SUB MENU*/
    end
  end

  if (converseVar.eventKey is pf14) /* PF14 was pressed*/
    COMMAREA.CATOAP = "PK0C"; /* PICKING Line Item Inquiry*/
    PKWREC.PKWINDEX = 1;
    PKWREC.PKWSLTYP[PKWINDEX] = "M"; /* Inquiry selection type*/
    PKWREC.PKWFRMAP[PKWINDEX] = "PK0B"; /* Previous application*/

    set PKYREC empty; /* Clear order key array*/
    PKYREC.XWHCD = PK0BW01.XWHCD; /* Save warehouse code*/
    PKYREC.XWHABRV = PK0BW01.XWHABRV; /* and warehouse abbreviation*/
    PKYREC.PK1CUOID[1] = PK0BW01.PK1CUOID; /* Order*/
    PKYREC.PK1NORID[1] = PK0BW01.PK1NORID; /* Sub-order*/
    PKYREC.PK1PKSCH[1] = PK0BW01.PK1PKSCH; /* Schedule*/
    PKWREC.PKWARRAY[PKWINDEX] = PKYREC.PKWARRAY; /* Inquiry keys array*/

    set EPAREC empty; /* Clear order key array*/
    EPAREC.XWHCD = PK0BW01.XWHCD; /* Save warehouse code*/
    EPAREC.XWHABRV = PK0BW01.XWHABRV; /* and warehouse abbreviation*/
    EPAREC.PK1CUOID[1] = PK0BW01.PK1CUOID; /* Order*/
    EPAREC.PK1NORID[1] = PK0BW01.PK1NORID; /* Sub-order*/
    EPAREC.PK1ALLNB[1] = PK0BW01.PK1ALLNB; /* Aloc-nbr*/
    EPAREC.PK1PKSCH[1] = PK0BW01.PK1PKSCH; /* Schedule*/
    COMMAREA.CA-USER-WORKAREA-2K-B = EPAREC.EPAARRAY;
  end

  if (converseVar.eventKey is pf15) /* PF15 was pressed*/
    COMMAREA.CATOAP = "PK0D"; /* PICKING Customer Inquiry*/
  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CATOAP = "PK0Z"; /* PICKING Sales Pgm/Prod Inquiry*/
  end

  if (converseVar.eventKey is pf18) /* PF18 was pressed*/
    COMMAREA.CATOAP = "PK0I"; /* PICKING Hold/Release*/
  end

  if (converseVar.eventKey is pf19) /* PF19 was pressed*/
    COMMAREA.CATOAP = "PK0S"; /* PICK PLANNING Menu*/
  end

  if (converseVar.eventKey is pf20) /* PF20 was pressed*/
    COMMAREA.CATOAP = "PK07"; /* PICK SELECTION Menu*/
  end

  PK0B162(); /* Purge any temporary storage*/

  PKWREC.XWHCD = PK0BM001.XWHCD; /* Save warehouse code*/

  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* COMMAREA user area*/

  XSEXIT(); /* Invoke selected application*/

  PK0BW01.PK0BWSWM = "2"; /* Indicate display map 2*/

  PK0BS02(); /* Format map heading areas*/

  PK0BM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
  converseLib.validationFailed(); /* Force alarm to sound*/
  PK0BM002.XXXERRID = "PK0B163 "; /* Error location*/

  exit stack; /* Exit to redisplay map*/


end // end PK0B163

// Reset highlighted fields
Function PK0B170()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0BM001.XWHCD initialAttributes; /* Warehouse code*/

  PK0BW01.PK0BWIXM = 1; /* Initialize index*/

  while (PK0BW01.PK0BWIXM <= 16) /* Until all lines are reset*/
    PK0B171(); /* Reset attributes in each line*/
  end

  set PK0BM001.CATOAP initialAttributes; /* FAST PATH application*/
  set PK0BM001.CAITEM initialAttributes; /* Application data*/


end // end PK0B170

// Reset highlights on each line
Function PK0B171()
   /* ------------------------------------------------------------*/
   /* Reset input field attributes on the line.*/
   /* ------------------------------------------------------------*/

  if (PK0BM001.PK1CUOID[PK0BWIXM] != 0) /* Order line formatted*/
    set PK0BM001.PK0BMSEL[PK0BWIXM] normal; /* Reset select tag*/

    set PK0BM001.PK0BMALP[PK0BWIXM] initialAttributes; /* Dark aloc-nbr dot*/
    set PK0BM001.PK1ALLNB[PK0BWIXM] initialAttributes; /* Dark aloc-nbr*/

    if (PK0BW01.XWHCD == "51")
      set PK0BM001.PK0BMALP[PK0BWIXM] skip; /* Reset aloc-nbr dot*/
      set PK0BM001.PK1ALLNB[PK0BWIXM] skip; /* Reset aloc-nbr*/
    end

    if (PK0BW01.PK0BWIXM == 1) /* First selection line*/
      set PK0BM001.PK1CUOID[PK0BWIXM] normal; /* Reset order*/
      set PK0BM001.PK1NORID[PK0BWIXM] normal; /* Reset sub-order*/
      set PK0BM001.PK1PKSCH[PK0BWIXM] normal; /* Reset schedule*/
      if (PK0BW01.XWHCD == "51")
        set PK0BM001.PK1ALLNB[PK0BWIXM] normal; /* Reset aloc-nbr*/
      end
    end
  end

  PK0BW01.PK0BWIXM = PK0BW01.PK0BWIXM + 1; /* Increment line index*/


end // end PK0B171

// Verify the entered data
Function PK0B180()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether any orders were selected.*/
   /* Ensure that order number is present.*/
   /* Check for proper select tag.*/
   /* Save warehouse code, if changed.  Verify warehouse code.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (PK0BM001.CAITEM > " ") /* Application data was entered*/
    set PK0BM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/
    PK0BM001.XXXERRID = "PK0B180 "; /* Error location*/
  end

  if (converseVar.eventKey not pa2) /* Not a cancel request*/
    PK0BW01.PK0BWSWO = "N"; /* Order selected switch*/

    PK0BW01.PK0BWIXM = 1; /* Initialize map line index*/
    while (PK0BW01.PK0BWIXM <= 16 /* Until end of array*/
     && PK0BW01.PK0BWSWO == "N") /* or selected order found*/
      PK0B181(); /* Search for selected order*/
    end

    PK0BW01.PK0BWIXM = 16; /* Initialize map line index*/
    while (PK0BW01.PK0BWIXM > 0) /* Until all lines are verified*/
      PK0B182(); /* Validate any select tags*/
    end

    if (PK0BM001.XWHCD != PK0BW01.XWHCD             /* Warehouse changed*/
     || PK0BM001.PK1CUOID[1] != PK0BW03.PK1CUOID[1] /* or order*/
     || PK0BM001.PK1NORID[1] != PK0BW03.PK1NORID[1] /* or sub-order*/
     || PK0BM001.PK1PKSCH[1] != PK0BW03.PK1PKSCH[1]) /* or schedule*/

      if (PK0BW01.PK0BWSWO == "Y") /* Order was selected*/

        if (PK0BM001.PK1PKSCH[1] != PK0BW03.PK1PKSCH[1])
          set PK0BM001.PK1PKSCH[1] cursor, modified, bold; /* Highlight*/
          PK0BM001.XXXERRID = "PK0B180 "; /* Error location*/
          converseLib.validationFailed(40); /* Modify not allowed with select*/
        end

        if (PK0BM001.PK1NORID[1] != PK0BW03.PK1NORID[1])
          set PK0BM001.PK1NORID[1] cursor, modified, bold; /* Highlight*/
          PK0BM001.XXXERRID = "PK0B180 "; /* Error location*/
          converseLib.validationFailed(40); /* Modify not allowed with select*/
        end

        if (PK0BM001.PK1CUOID[1] != PK0BW03.PK1CUOID[1])
          set PK0BM001.PK1CUOID[1] cursor, modified, bold; /* Highlight*/
          PK0BM001.XXXERRID = "PK0B180 "; /* Error location*/
          converseLib.validationFailed(40); /* Modify not allowed with select*/
        end

        if (PK0BM001.XWHCD != PK0BW01.XWHCD)
          set PK0BM001.XWHCD cursor, modified, bold; /* Highlight*/
          PK0BM001.XXXERRID = "PK0B180 "; /* Error location*/
          converseLib.validationFailed(40); /* Modify not allowed with select*/
        end

      else

        if (PK0BM001.PK1CUOID[1] != 0 /* Order was entered*/
         || PK0BM001.PK1NORID[1] != 0 /* or sub-order was entered*/
         || PK0BM001.PK1PKSCH[1] != 0) /* or schedule was entered*/

          if (PK0BM001.PK1CUOID[1] <= 0) /* Order missing or invalid*/
            set PK0BM001.PK1CUOID[1] cursor, modified, bold; /* Highlight*/
            converseLib.validationFailed(26); /* Indicate order missing*/
            PK0BM001.XXXERRID = "PK0B180 "; /* Error location*/
          end

        end
      end
    end
    PKWREC.XWHCD = PK0BM001.XWHCD; /* Save warehouse code*/
  end

  XPPK002(); /* Verify warehouse code*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PK0B183(); /* Verify scroll request*/
  end


end // end PK0B180

// Search for selected orders
Function PK0B181()
   /* ------------------------------------------------------------*/
   /* Search for selected orders.*/
   /* ------------------------------------------------------------*/

  if (PK0BM001.PK0BMSEL[PK0BWIXM] == "S") /* Line was selected*/
    PK0BW01.PK0BWSWO = "Y"; /* Indicate order selected*/
  end

  PK0BW01.PK0BWIXM = PK0BW01.PK0BWIXM + 1; /* Increment line number*/


end // end PK0B181

// Verify selection tags
Function PK0B182()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the line was not selected properly.*/
   /* ------------------------------------------------------------*/

  if (PK0BM001.PK0BMSEL[PK0BWIXM] != PK0BW03.PK0BMSEL[PK0BWIXM]
   && PK0BM001.PK0BMSEL[PK0BWIXM] != " " /* Line was selected*/
   && PK0BM001.PK0BMSEL[PK0BWIXM] != "S") /* and not with an "S"*/

    set PK0BM001.PK0BMSEL[PK0BWIXM] cursor, modified, bold; /* Highlight*/
    PK0BM001.XXXERRID = "PK0B182 "; /* Error location*/
    converseLib.validationFailed(14); /* Only "S" is valid for tag*/

  end

  PK0BW01.PK0BWIXM = PK0BW01.PK0BWIXM - 1; /* Decrement line number*/


end // end PK0B182

// Verify scroll request
Function PK0B183()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any lines that were selected.*/
   /* Indicate an error for any other data that was changed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PK0BW01.PK0BWTSP < 2)       /* and no previous pages*/

    PK0BM001.XXXERRID = "PK0B183 "; /* Error location*/
    converseLib.validationFailed(37); /* No previous page to display*/

  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PK0BW01.PK0BWTSP >= PK0BW01.TA5TSQIX) /* and no more pages*/

    PK0BM001.XXXERRID = "PK0B183 "; /* Error location*/
    converseLib.validationFailed(38); /* No more pages to display*/

  end

  PK0BW01.PK0BWIXM = 16; /* Initialize map line index*/

  while (PK0BW01.PK0BWIXM > 0) /* Until all lines are verified*/
    PK0B184(); /* See if any lines were selected*/
  end

  if (PK0BM001.XWHCD != PK0BW01.XWHCD) /* Warehouse changed*/

    set PK0BM001.XWHCD cursor, modified, bold; /* Highlight*/
    PK0BM001.XXXERRID = "PK0B183 "; /* Error location*/
    converseLib.validationFailed(39); /* Modify not allowed with scroll*/

  end


end // end PK0B183

// Highlight any selected lines
Function PK0B184()
   /* ------------------------------------------------------------*/
   /* If the first line, indicate error if order number changed.*/
   /* Indicate an error if the line was selected.*/
   /* ------------------------------------------------------------*/

  if (PK0BW01.PK0BWIXM == 1) /* First line*/

    if (PK0BM001.PK1PKSCH[PK0BWIXM] != PK0BW03.PK1PKSCH[PK0BWIXM])

      set PK0BM001.PK1PKSCH[PK0BWIXM] cursor, modified, bold; /* Highlight*/
      PK0BM001.XXXERRID = "PK0B184 "; /* Error location*/
      converseLib.validationFailed(39); /* Modify not allowed with scroll*/

    end

    if (PK0BM001.PK1NORID[PK0BWIXM] != PK0BW03.PK1NORID[PK0BWIXM])

      set PK0BM001.PK1NORID[PK0BWIXM] cursor, modified, bold; /* Highlight*/
      PK0BM001.XXXERRID = "PK0B184 "; /* Error location*/
      converseLib.validationFailed(39); /* Modify not allowed with scroll*/

    end

    if (PK0BM001.PK1CUOID[PK0BWIXM] != PK0BW03.PK1CUOID[PK0BWIXM])

      set PK0BM001.PK1CUOID[PK0BWIXM] cursor, modified, bold; /* Highlight*/
      PK0BM001.XXXERRID = "PK0B184 "; /* Error location*/
      converseLib.validationFailed(39); /* Modify not allowed with scroll*/

    end

  end

  if (PK0BM001.PK0BMSEL[PK0BWIXM] != PK0BW03.PK0BMSEL[PK0BWIXM]
   && PK0BM001.PK0BMSEL[PK0BWIXM] != " ") /* Line was selected*/

    set PK0BM001.PK0BMSEL[PK0BWIXM] cursor, modified, bold; /* Highlight*/
    PK0BM001.XXXERRID = "PK0B184 "; /* Error location*/
    converseLib.validationFailed(52); /* Select not allowed with scroll*/

  end

  PK0BW01.PK0BWIXM = PK0BW01.PK0BWIXM - 1; /* Decrement line number*/


end // end PK0B184

// Process valid input request
Function PK0B190()
   /* ------------------------------------------------------------*/
   /* If warehouse code, order or schedule was changed, purge any*/
   /* temporary storage, reset the display controls, clear the*/
   /* previous data and save the new warehouse and order data.*/
   /* If orders were selected for inquiry, indicate exit to*/
   /* display the selected orders.*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* ------------------------------------------------------------*/

  if (PK0BM001.XWHCD != PK0BW01.XWHCD             /* Warehouse changed*/
   || PK0BM001.PK1CUOID[1] != PK0BW03.PK1CUOID[1] /* or order*/
   || PK0BM001.PK1NORID[1] != PK0BW03.PK1NORID[1] /* or sub-order*/
   || PK0BM001.PK1PKSCH[1] != PK0BW03.PK1PKSCH[1]) /* or schedule*/

    PK0B162(); /* Purge any temporary storage*/

    PK0BW01.PK0BWSWM = " "; /* Indicate obtain order data*/

    PK0BW01.XWHCD = PKWREC.XWHCD; /* Warehouse code*/
    PK0BW01.XWHABRV = PKWREC.XWHABRV; /* Warehouse abbreviation*/

    if (PK0BM001.PK1CUOID[1] != 0 /* Order entered*/
     || PK0BM001.PK1NORID[1] != 0 /* or sub-order entered*/
     || PK0BM001.PK1PKSCH[1] != 0) /* or schedule entered*/

      PK0BW02.PK1CUOID = PK0BM001.PK1CUOID[1]; /* Order*/
      PK0BW02.PK1NORID = PK0BM001.PK1NORID[1]; /* Sub-order*/
      PK0BW02.XPPCD = PK0BM001.XPPCD[1]; /* priority*/
      PK0BW02.PK1PKSCH = PK0BM001.PK1PKSCH[1]; /* Schedule*/
      PK0BW02.PK1ALLNB = 0; /* Aloc-nbr*/

      PK0BW01.PK0BWSWF = "Y"; /* Set display format switch*/
    end
  else
    PK0BW01.PK0BWIXM = 1; /* Initialize line index*/

    while (PK0BW01.PK0BWIXM <= 16) /* Until end of array*/
      PK0B191(); /* Save any changed select tags*/
    end

    if (PK0BW01.PK0BWSWO == "Y") /* Order selected for display*/
      PK0BW01.PK0BWSWM = " "; /* Indicate obtain data*/
    end
  end


  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    PK0BW01.PK0BWTSP = PK0BW01.PK0BWTSP - 1; /* Decrement page number*/
  end

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    PK0BW01.PK0BWTSP = PK0BW01.PK0BWTSP + 1; /* Increment page number*/
  end


end // end PK0B190

// Save changed select tags
Function PK0B191()
   /* ------------------------------------------------------------*/
   /* Save changed selection tag.*/
   /* ------------------------------------------------------------*/

  if (PK0BM001.PK0BMSEL[PK0BWIXM] != PK0BW03.PK0BMSEL[PK0BWIXM])
    PK0BW03.PK0BMSEL[PK0BWIXM] = PK0BM001.PK0BMSEL[PK0BWIXM];
  end

  PK0BW01.PK0BWIXM = PK0BW01.PK0BWIXM + 1; /* Increment line number*/


end // end PK0B191

// Display order header
Function PK0B200()
   /* ------------------------------------------------------------*/
   /* Clear the map output area and format the map fields.*/
   /* Display the map that was formatted.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process input request if not a cancel and no errors found.*/
   /* ------------------------------------------------------------*/

  if (PK0BW01.PK0BWMAP != "M002") /* Not the current display*/
    PK0B210(); /* Format map output area*/
  end

  PK0B220(); /* Display the formatted map*/

  PK0B230(); /* Check attention identifier*/

  PK0B240(); /* Reset fields to normal intensity*/

  PK0B250(); /* Verify the entered data*/

  if (converseVar.eventKey not pa2 /* Not a cancel request*/
   && converseVar.validationMsgNum == 0) /* and no errors were found*/
    PK0B260(); /* Process valid input request*/
  end


end // end PK0B200

// Format the map
Function PK0B210()
   /* ------------------------------------------------------------*/
   /* Format the map output area.*/
   /* ------------------------------------------------------------*/

  PK0BS02(); /* Format the map heading areas*/

  if (PK0BW01.PK0BWSWF != " ") /* Order number was entered*/
    PK0B211(); /* Format order header*/
  end


end // end PK0B210

// Format order data
Function PK0B211()
   /* ------------------------------------------------------------*/
   /* Format the order header data in the map output area.*/
   /* ------------------------------------------------------------*/

  if (PK0BW01.XWHCD == "51")
    set PK0BM002.PK0BMALP skip; /* Aloc-nbr dot*/
    set PK0BM002.PK1ALLNB normal; /* Aloc-nbr*/
    PK0BM002.PK1ALLNB = PK0BW02.PK1ALLNB;
  else
    set PK0BM002.PK0BMALP initialAttributes; /* Aloc-nbr dot*/
    set PK0BM002.PK1ALLNB initialAttributes; /* Aloc-nbr*/
    set PK0BM002.PK1ALLNB noHighLight;
  end
  set PK0BM002.PK0BMDTL initialAttributes;

  PK0BM002.PK1CUOID = PK0BW02.PK1CUOID; /* Order number*/
  PK0BM002.PK1NORID = PK0BW02.PK1NORID; /* Sub-order number*/

  PK0BM002.PK1PKSCH = PK0BW02.PK1PKSCH; /* Schedule number*/

  if (PK0BW02.SR1PKSDT != 0) /* Status date exists*/
    PK0BM002.PK0BMDTL = PK0BW02.PK0BMDTL; /* Type of date*/
    PK0BM002.SR1PKSDT = PK0BW02.SR1PKSDT; /* Status date*/
    if (PK0BW02.DCMS-ERROR-FL == "Y")
      set PK0BM002.PK0BMDTL skip, red;
    end
  end

  if (PK0BW02.KUCCOID != 0) /* Company identification exists*/
    PK0BM002.KUCCOID = PK0BW02.KUCCOID; /* Company identification*/
    PK0BM002.KUMSTRID = PK0BW02.KUMSTRID; /* Store identification*/
    PK0BM002.XNXCD = PK0BW02.XNXCD; /* Department code*/
  end

  PK0BM002.KUMSTRNM = PK0BW02.KUMSTRNM; /* Store name*/
  PK0BM002.OP1CUPO = PK0BW02.OP1CUPO; /* Customer purchase order*/
  PK0BM002.XOTCD = PK0BW02.XOTCD; /* Order type code*/
  PK0BM002.XOTABRV = PK0BW02.XOTABRV; /* Order type abbreviation*/

  if (PK0BW02.PK-IVC-REQ-FL == " ")
    PK0BM002.PK-IVC-REQ-FL = "N";
  else
    PK0BM002.PK-IVC-REQ-FL = PK0BW02.PK-IVC-REQ-FL;
  end

  PK0BM002.PK0BT-ASN-DESC = PK0BW02.PK0BT-ASN-DESC;
  PK0BM002.PK0BWPSF = PK0BW02.PK0BWPSF; /* PSST flag*/

  if (PK0BW02.OP1CUNDT != 0) /* Customer need date exists*/
    PK0BM002.OP1CUNDT = PK0BW02.OP1CUNDT; /* Customer need date*/
  end

  if (PK0BW02.OP1DSBDT != 0) /* Don't ship before date exists*/
    PK0BM002.OP1DSBDT = PK0BW02.OP1DSBDT; /* Don't ship before date*/
  end

  if (PK0BW02.OP1DSADT != 0) /* Don't ship after date exists*/
    PK0BM002.OP1DSADT = PK0BW02.OP1DSADT; /* Don't ship after date*/
  end

  PK0BM002.PK4CARSP = PK0BW02.PK4CARSP; /* Carrier determination*/
  PK0BM002.PK0BMCSD = PK0BW02.PK0BMCSD; /* Specified description*/
  PK0BM002.TF1CARCD = PK0BW02.TF1CARCD; /* Carrier code*/
  PK0BM002.TF1CARNM = PK0BW02.TF1CARNM; /* Carrier name*/

  PK0BM002.SP1ID = PK0BW02.SP1ID; /* Sales program identification*/
  PK0BM002.SP1NM = PK0BW02.SP1NM; /* Sales program name*/

  PK0BM002.OP1SPHDF = PK0BW02.OP1SPHDF; /* Special handling flag*/
  PK0BM002.XPACD = PK0BW02.XPACD; /* Special packing code*/
  PK0BM002.TF2PRONO = PK0BW02.TF2PRONO; /* Pro number*/
  PK0BM002.XPPCD = PK0BW02.XPPCD; /* Picking priority code*/
  PK0BM002.PK4ORHLD = PK0BW02.PK4ORHLD; /* Order hold indicator*/
  PK0BM002.PK4CUHLD = PK0BW02.PK4CUHLD; /* customer hold indicator*/

  if (PK0BW02.PKBRELDT != 0) /* if date not zero*/
    PK0BM002.PKBRELDT = PK0BW02.PKBRELDT; /* Order release date*/
  end

  if (PK0BW02.PK9RELDT != 0) /* if date not zero*/
    PK0BM002.PK9RELDT = PK0BW02.PK9RELDT; /* Customer release date*/
  end

  PK0BM002.OP11TMSF = PK0BW02.OP11TMSF; /* Onetime ship flag*/
  PK0BM002.PK4STKTF = PK0BW02.PK4STKTF; /* Stock transfer flag*/
  PK0BM002.XPKCD = PK0BW02.XPKCD; /* Picking code*/

  PK0BM002.OP5ALTNM = PK0BW02.OP5ALTNM; /* Ship-to name*/
  PK0BM002.XXXADDR1 = PK0BW02.XXXADDR1; /* Address line 1*/
  PK0BM002.XXXADDR2 = PK0BW02.XXXADDR2; /* Address line 2*/
  PK0BM002.XXXADDR3 = PK0BW02.XXXADDR3; /* Address line 3*/
  PK0BM002.XXXCITY = PK0BW02.XXXCITY; /* City*/
  PK0BM002.XSTSTCD = PK0BW02.XSTSTCD; /* State code*/
  PK0BM002.XXXZIP = PK0BW02.XXXZIP; /* Zip code*/

  PK0BM002.PK4OTUNT = PK0BW02.PK4OTUNT; /* Total order quantity*/
  PK0BM002.PK4OTWGT[1] = PK0BW02.PK4OTWGT; /* total weight lbs*/
  PK0BM002.PK4OTWGT[2] = mathLib.round(PK0BW02.PK4OTWGT / 2.2046, -mathLib.decimals(PK0BM002.PK4OTWGT[2])); /* kg's*/

  PK0BM002.SR2TOTCF[1] = PK0BW02.SR2TOTCF; /* total cubic feet*/
  PK0BM002.SR2TOTCF[2] = mathLib.round(PK0BW02.SR2TOTCF * .0280, -mathLib.decimals(PK0BM002.SR2TOTCF[2])); /* cubic meters*/

  if (PK0BW02.OP1EXPDF == "Y") /* IF traffic alert*/
    set PK0BM002.PK0BMEXM skip, bold; /* show literal*/
  end

  if (PK0BW02.CU-STOR-SELF-ID != " ") /* customers 'self' store id*/
    PK0BM002.CU-STOR-SELF-ID-LIT = "STORE:";
    PK0BM002.CU-STOR-SELF-ID = PK0BW02.CU-STOR-SELF-ID;
  end

  if (PK0BW02.CU-DEPT-SELF-ID != " ") /* customers 'self' department id*/
    PK0BM002.CU-DEPT-SELF-ID-LIT = "DEPT:";
    PK0BM002.CU-DEPT-SELF-ID = PK0BW02.CU-DEPT-SELF-ID;
  end

  PK0BM002.PK1BLLAD = PK0BW02.PK1BLLAD; /* Bol#*/
  PK0BM002.PK-BOL-SUB-NBR = PK0BW02.PK-BOL-SUB-NBR; /* Bol Sub #*/
  PK0BM002.TSIPLNBR = PK0BW02.TSIPLNBR; /* Packing list#*/
  PK0BM002.SR2SHPCG = PK0BW02.SR2SHPCG; /* Shipping charges*/

  PK0BM002.GOODS-ISS-FL = PK0BW02.GOODS-ISS-FL;

end // end PK0B211

// Display the formatted map
Function PK0B220()
   /* ------------------------------------------------------------*/
   /* Do not allow key to change if from another application.*/
   /* Highlight warehouse code if warehouse not valid.*/
   /* Indicate sound audible alarm for any error message.*/
   /* Display the map that was formatted.*/
   /* ------------------------------------------------------------*/

  if (PK0BW01.XWHCD == "51")
    set PK0BM002.PK0BMALP skip; /* Aloc-nbr dot*/
    set PK0BM002.PK1ALLNB normal; /* Aloc-nbr*/
  else
    set PK0BM002.PK0BMALP initialAttributes; /* set dark aloc-nbr dot*/
    set PK0BM002.PK1ALLNB initialAttributes; /* set dark aloc-nbr*/
    set PK0BM002.PK1ALLNB skip, noHighLight;
  end


  if (PK0BM002.KUCCOID > 7999999 /* Cole-Haan customer ?*/
   && PK0BM002.KUCCOID < 9000000) /**/
    PK0BM002.KUCCOID = PK0BM002.KUCCOID - 8000000;
  end /* truncate the '80'*/


  if (PK0BW01.PKWSLTYP == "O") /* Inquiry from another application*/
    set PK0BM002.XWHCD skip; /* Cannot change warehouse*/
    set PK0BM002.PK1CUOID skip; /* and order*/
    set PK0BM002.PK1NORID skip; /* and sub-order*/
    set PK0BM002.PK1PKSCH skip; /* and schedule*/
    if (PK0BW01.XWHCD == "51")
      set PK0BM002.PK1ALLNB skip; /* Aloc-nbr*/
    else
      set PK0BM002.PK1ALLNB skip, noHighLight; /* Aloc-nbr*/
    end
  end

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    if (PKWREC.XWHABRV == " ") /* Warehouse missing or invalid*/
      set PK0BM002.XWHCD cursor, modified, bold; /* Highlight warehouse*/
      PK0BM002.XWHABRV = " "; /* Clear abbreviation*/
      PK0BM002.XXXERRID = "PK0B220 "; /* Error location*/
    end
    set PK0BM002 alarm; /* Indicate sound alarm*/
  end

  if (converseVar.validationMsgNum == 0)
    if (PK0BW02.OP1SPHDF == "Y"
     || PK0BW02.OP1SPLBF == "Y"
     || PK0BW02.OP1SPINF == "Y")
      PK0BM002.VAGen_EZEMSG = PK0BW01.PK0BW2NB;
    end
  end

  converse PK0BM002 ;
  /* ** if customer was Cole-Haan, restore '80' prefix for processing ****/
  PK0BW02.PK0BW-KUCCOID-COMPARE = PK0BM002.KUCCOID + 8000000;
  if (PK0BW02.KUCCOID == PK0BW02.PK0BW-KUCCOID-COMPARE)
    PK0BM002.KUCCOID = PK0BW02.KUCCOID; /* restore '80'*/
  end

end // end PK0B220

// Check attention identifier
Function PK0B230()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PK0BW01.PK0BWSWM = " "; /* Reset map to be displayed switch*/

    PKWREC.XWHCD = PK0BW01.XWHCD; /* Restore warehouse code*/
    PKWREC.XWHABRV = PK0BW01.XWHABRV; /* and warehouse abbreviation*/

    if (PK0BW02.PK1CUOID == 0 /* No previous order*/
     && PK0BW02.PK1NORID == 0 /* and no previous sub-order*/
     && PK0BW02.PK1PKSCH == 0) /* and no previous schedule*/

      PK0BW01.PK0BWSWF = " "; /* Reset display format switch*/

    end

    return; /* Return to previous process*/

  end

  if (PK0BM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PK0B231(); /* Execute FAST PATH request*/

    else

      set PK0BM002.CATOAP cursor, modified, bold; /* Highlight application*/
      converseLib.validationFailed(13); /* Indicate PF key not valid*/
      PK0BM002.XXXERRID = "PK0B230 "; /* Error location*/

      exit stack; /* Exit to redisplay map*/

    end

  end

  if (converseVar.eventKey is pf3  /* PF3 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14 was pressed*/
   || converseVar.eventKey is pf15 /* or PF15 was pressed*/
   || converseVar.eventKey is pf16 /* or PF16 was pressed*/
   || converseVar.eventKey is pf18 /* or PF18 was pressed*/
   || converseVar.eventKey is pf19 /* or PF19 was pressed*/
   || converseVar.eventKey is pf20) /* or PF20 was pressed*/

    PK0B232(); /* Transfer to another application*/

  end

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/

    PK0B162(); /* Purge any temporary storage*/

    COMMAREA.CATOAP = "GD01"; /* Help application*/
    COMMAREA.CAITEM = "PK0B100"; /* Application find code*/

    XSEXIT(); /* Exit to the HELP facility*/

    PK0BW01.PK0BWSWM = "2"; /* Indicate display map 2*/

    PK0BS02(); /* Format map heading areas*/

    PK0BM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/
    PK0BM002.XXXERRID = "PK0B230 "; /* Error location*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/

    XSPF4(); /* Exit to system main menu*/

    PK0BW01.PK0BWSWM = "2"; /* Indicate display map 2*/

    PK0BS02(); /* Format map heading areas*/

    PK0BM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/
    PK0BM002.XXXERRID = "PK0B230 "; /* Error location*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0BM002.XXXERRID = "PK0B230 "; /* Error location*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0B230

// Execute FAST PATH request
Function PK0B231()
   /* ------------------------------------------------------------*/
   /* Transfer to requested application via FAST PATH.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (PK0BM002.CATOAP == COMMAREA.CACURRAP)
                                   /* TO application same as current*/

    set PK0BM002.CATOAP cursor, modified, bold; /* Highlight TO application*/
    converseLib.validationFailed(1); /* Indicate invalid request*/
    PK0BM002.XXXERRID = "PK0B231 "; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  PK0B162(); /* Purge any temporary storage*/

  PKWREC.XWHCD = PK0BM002.XWHCD; /* Save warehouse code*/

  COMMAREA.CATOAP = PK0BM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PK0BM002.CAITEM; /* Application data*/

  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* Application user area*/

  XSEXIT(); /* Transfer to requested application*/

  PK0BW01.PK0BWSWM = "2"; /* Indicate display map 2*/

  PK0BS02(); /* Format map heading areas*/

  PK0BM002.CATOAP = COMMAREA.CATOAP; /* TO application*/

  set PK0BM002.CATOAP cursor, modified, bold; /* Highlight TO application*/

  PK0BM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
  converseLib.validationFailed(); /* Force alarm to sound*/
  PK0BM002.XXXERRID = "PK0B231 "; /* Process name*/

  COMMAREA.CATOAP = " "; /* Clear TO application*/

  exit stack; /* Exit to redisplay map*/


end // end PK0B231

// Exit to another application
Function PK0B232()
   /* ------------------------------------------------------------*/
   /* Set the "TO" application according to the PF key pressed.*/
   /* If warehouse code was modified, save in common work area.*/
   /* Transfer to the application.  Display any returned error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    if (PK0BW01.PKWSLTYP == "I") /* Internal key array*/

      PK0BW01.PK0BWSWM = "1"; /* Map to be displayed*/
      exit stack; /* Exit to redisplay map*/

    else

      if (PKWREC.PKWINDEX > 0) /* Previous application exists*/
        COMMAREA.CATOAP = PKWREC.PKWFRMAP[PKWINDEX];
      else
        COMMAREA.CATOAP = "PK0J"; /* PICKING INQUIRY SUB MENU*/
      end

    end

  end

  if (converseVar.eventKey is pf14) /* PF14 was pressed*/
    COMMAREA.CATOAP = "PK0C"; /* PICKING Line Item Inquiry*/
    PK0BS01(); /* Format inquiry key array*/
  end

  if (converseVar.eventKey is pf15) /* PF15 was pressed*/
    COMMAREA.CATOAP = "PK0D"; /* PICKING Customer Inquiry*/
    PK0BS03(); /* Format inquiry key array*/
  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CATOAP = "PK0Z";
                                   /* PICKING Sales Pgm/Prod Inquiry*/
  end

  if (converseVar.eventKey is pf18) /* PF18 was pressed*/
    COMMAREA.CATOAP = "PK0I"; /* PICKING Hold/Release*/
  end

  if (converseVar.eventKey is pf19) /* PF19 was pressed*/
    COMMAREA.CATOAP = "PK0S"; /* PICK PLANNING Menu*/
  end

  if (converseVar.eventKey is pf20) /* PF20 was pressed*/
    COMMAREA.CATOAP = "PK07"; /* PICK SELECTION Menu*/
  end

  PK0B162(); /* Purge any temporary storage*/

  PKWREC.XWHCD = PK0BM002.XWHCD; /* Save warehouse code*/

  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* COMMAREA user area*/

  XSEXIT(); /* Invoke selected application*/

  PK0BW01.PK0BWSWM = "2"; /* Indicate display map 2*/

  PK0BS02(); /* Format map heading areas*/

  PK0BM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
  converseLib.validationFailed(); /* Force alarm to sound*/
  PK0BM002.XXXERRID = "PK0B232 "; /* Error location*/

  exit stack; /* Exit to redisplay map*/


end // end PK0B232

// Reset highlighted fields
Function PK0B240()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0BM002.XWHCD initialAttributes; /* Warehouse code*/

  set PK0BM002.PK1CUOID initialAttributes; /* Order number*/
  set PK0BM002.PK1NORID initialAttributes; /* Sub-order number*/
  if (PK0BW01.XWHCD == "51")
    set PK0BM002.PK0BMALP skip; /* Aloc-nbr dot*/
    set PK0BM002.PK1ALLNB normal; /* Aloc-nbr*/
  else
    set PK0BM002.PK0BMALP initialAttributes; /* set dark aloc-nbr dot*/
    set PK0BM002.PK1ALLNB initialAttributes; /* set dark aloc-nbr*/
    set PK0BM002.PK1ALLNB skip, noHighLight;
  end
  set PK0BM002.PK1PKSCH initialAttributes; /* Schedule number*/

  set PK0BM002.CATOAP initialAttributes; /* FAST PATH application*/
  set PK0BM002.CAITEM initialAttributes; /* Application data*/


end // end PK0B240

// Verify the entered data
Function PK0B250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Ensure that order number is present.*/
   /* Save warehouse code, if changed.  Verify warehouse code.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (PK0BM002.CAITEM > " ") /* Application data was entered*/
    set PK0BM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/
    PK0BM002.XXXERRID = "PK0B250 "; /* Error location*/
  end

  if (converseVar.eventKey not pa2) /* Not a cancel request*/
    if (PK0BM002.XWHCD != PK0BW01.XWHCD       /* Warehouse was changed*/
     || PK0BM002.PK1CUOID != PK0BW02.PK1CUOID /* or order was changed*/
     || PK0BM002.PK1NORID != PK0BW02.PK1NORID /* or sub-order was changed*/
     || PK0BM002.PK1PKSCH != PK0BW02.PK1PKSCH) /* or schedule was changed*/

      PK0BW02.PK1ALLNB = 0;

      if (PK0BM002.PK1CUOID != 0 /* Order was entered*/
       || PK0BM002.PK1NORID != 0 /* or sub-order was entered*/
       || PK0BM002.PK1PKSCH != 0) /* or schedule was entered*/

        if (PK0BM002.PK1CUOID <= 0) /* Order missing or invalid*/
          set PK0BM002.PK1CUOID cursor, modified, bold; /* Highlight order*/
          converseLib.validationFailed(26); /* Indicate order missing*/
          PK0BM002.XXXERRID = "PK0B250 "; /* Error location*/
        end

      end
    end
    PKWREC.XWHCD = PK0BM002.XWHCD; /* Save warehouse code*/
  end

  XPPK002(); /* Verify warehouse code*/

  if (converseVar.eventKey is pf8) /* Scroll forward request*/
    PK0B251(); /* Verify scroll request*/
  end


end // end PK0B250

// Verify scroll request
Function PK0B251()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward request*/

    if (PK0BW02.OP1SPHDF != "Y" /* No special handling*/
     && PK0BW02.OP1SPLBF != "Y" /* and no special label*/
     && PK0BW02.OP1SPINF != "Y") /* and no special instructions*/

      converseLib.validationFailed(38); /* No more pages to display*/
      PK0BM002.XXXERRID = "PK0B251 "; /* Error location*/

    end

  end

  if (PK0BM002.PK1PKSCH != PK0BW02.PK1PKSCH) /* Schedule was changed*/

    set PK0BM002.PK1PKSCH cursor, modified, bold; /* Highlight schedule*/
    PK0BM002.XXXERRID = "PK0B251 "; /* Error location*/
    converseLib.validationFailed(39); /* Modifications not allowed*/

  end

  if (PK0BM002.PK1NORID != PK0BW02.PK1NORID) /* Sub-order was changed*/

    set PK0BM002.PK1NORID cursor, modified, bold; /* Highlight sub-order*/
    PK0BM002.XXXERRID = "PK0B251 "; /* Error location*/
    converseLib.validationFailed(39); /* Modifications not allowed*/

  end

  if (PK0BM002.PK1CUOID != PK0BW02.PK1CUOID) /* Order was changed*/

    set PK0BM002.PK1CUOID cursor, modified, bold; /* Highlight order*/
    PK0BM002.XXXERRID = "PK0B251 "; /* Error location*/
    converseLib.validationFailed(39); /* Modifications not allowed*/

  end

  if (PK0BM002.XWHCD != PK0BW01.XWHCD) /* Warehouse was changed*/

    set PK0BM002.XWHCD cursor, modified, bold; /* Highlight department*/
    PK0BM002.XXXERRID = "PK0B251 "; /* Error location*/
    converseLib.validationFailed(39); /* Modifications not allowed*/

  end


end // end PK0B251

// Process valid input request
Function PK0B260()
   /* ------------------------------------------------------------*/
   /* If warehouse code, order or schedule was changed, purge any*/
   /* temporary storage, reset the display controls, clear the*/
   /* previous data and save the new warehouse and order data.*/
   /* If the ENTER key was pressed and an order key array exists,*/
   /* indicate that the next order is to be displayed.*/
   /* If a scroll request, indicate the next map to be displayed.*/
   /* ------------------------------------------------------------*/

  if (PK0BW01.PK0BWSWF == "Y"               /* Order entered not formatted*/
   || PK0BM002.XWHCD != PK0BW01.XWHCD       /* or warehouse changed*/
   || PK0BM002.PK1CUOID != PK0BW02.PK1CUOID /* or order changed*/
   || PK0BM002.PK1NORID != PK0BW02.PK1NORID /* or sub-order changed*/
   || PK0BM002.PK1PKSCH != PK0BW02.PK1PKSCH) /* or schedule changed*/

    PK0B162(); /* Purge any temporary storage*/

    PK0BW02.PK1ALLNB = 0; /* Reset aloc-nbr*/
    PK0BW01.PKWSLTYP = " "; /* Reset selection type*/
    PK0BW01.PK0BWSWM = " "; /* Indicate obtain order data*/

    PK0BW01.XWHCD = PKWREC.XWHCD; /* Warehouse code*/
    PK0BW01.XWHABRV = PKWREC.XWHABRV; /* Warehouse abbreviation*/

    if (PK0BM002.PK1CUOID != 0 /* Order entered*/
     || PK0BM002.PK1NORID != 0 /* or sub-order entered*/
     || PK0BM002.PK1PKSCH != 0) /* or schedule entered*/

      PK0BW02.PK1CUOID = PK0BM002.PK1CUOID; /* Order*/
      PK0BW02.PK1NORID = PK0BM002.PK1NORID; /* Sub-order*/
      PK0BW02.XPPCD = PK0BM002.XPPCD; /* priority*/
      PK0BW02.PK1PKSCH = PK0BM002.PK1PKSCH; /* Schedule*/

      PK0BW01.PK0BWSWF = "Y"; /* Set display format switch*/
    end
  end

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    if (PK0BW01.PKWSLTYP == "O" /* Order key array exists*/
     || PK0BW01.PKWSLTYP == "I") /* or internal key array exists*/
      PK0BW01.PK0BWSWM = " "; /* Obtain next key to display*/
    end
  end

  if (converseVar.eventKey is pf8) /* Scroll forward was requested*/
    PK0BW01.PK0BWSWM = "3"; /* Map to be displayed*/
  end


end // end PK0B260

// Display packaging instructions
Function PK0B300()
   /* ------------------------------------------------------------*/
   /* Clear the map output area and format the map fields.*/
   /* Display the map that was formatted.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process input request if not a cancel and no errors found.*/
   /* ------------------------------------------------------------*/

  if (PK0BW01.PK0BWMAP != "M003") /* Not the current display*/
    PK0B310(); /* Format map output area*/
  end

  PK0B320(); /* Display the formatted map*/

  PK0B330(); /* Check attention identifier*/

  PK0B340(); /* Reset fields to normal intensity*/

  PK0B350(); /* Verify the entered data*/

  if (converseVar.eventKey not pa2 /* Not a cancel request*/
   && converseVar.validationMsgNum == 0) /* and no errors were found*/
    PK0B360(); /* Process valid input request*/
  end


end // end PK0B300

// Format the map
Function PK0B310()
   /* ------------------------------------------------------------*/
   /* Format the map output area.*/
   /* ------------------------------------------------------------*/

  PK0BW01.PK0BWMAP = "M003"; /* Indicate current display*/

  set PK0BM003 initial; /* Clear map storage area*/
  if (PK0BW01.XWHCD == "51"
   || COMMAREA.XWHCD == "51")
    PK0BM003.PK0BM-SCHED-ID-LIT = "MANIFEST ID:";
  else
    PK0BM003.PK0BM-SCHED-ID-LIT = "   SCHEDULE:";
  end

  PK0BM003.XXXRVNBR = PK0BW01.XXXRVNBR; /* Application revision*/
  PK0BM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PK0BM003.XWHCD = PK0BW01.XWHCD; /* Warehouse code*/
  PK0BM003.XWHABRV = PK0BW01.XWHABRV; /* Warehouse abbreviation*/

  PK0B311(); /* Format the order data*/


end // end PK0B310

// Format order data
Function PK0B311()
   /* ------------------------------------------------------------*/
   /* Format the order data in the map output area.*/
   /* ------------------------------------------------------------*/

  if (PK0BW01.XWHCD == "51")
    set PK0BM003.PK0BMALP skip;
    set PK0BM003.PK1ALLNB normal;
    PK0BM003.PK1ALLNB = PK0BW02.PK1ALLNB;
    if (PK0BW02.DCMS-ERROR-FL == "Y")
      set PK0BM003.PK0BMDTL skip, red;
    end
  else
    set PK0BM003.PK0BMALP initialAttributes;
    set PK0BM003.PK1ALLNB initialAttributes;
    set PK0BM003.PK0BMDTL initialAttributes;
    set PK0BM003.PK1ALLNB skip, noHighLight;
  end


  PK0BM003.PK1CUOID = PK0BW02.PK1CUOID; /* Order number*/
  PK0BM003.PK1NORID = PK0BW02.PK1NORID; /* Sub-order number*/
  PK0BM003.XPPCD = PK0BW02.XPPCD; /* priority*/

  if (PK0BW02.PK1PKSCH != 0) /* Schedule number exists*/
    PK0BM003.PK1PKSCH = PK0BW02.PK1PKSCH; /* Schedule number*/
  end

  PK0BM003.PK0BMDTL = PK0BW02.PK0BMDTL; /* Type of date*/
  PK0BM003.SR1PKSDT = PK0BW02.SR1PKSDT; /* Status date*/

  if (PK0BW02.KUCCOID != 0) /* Company identification exists*/
    PK0BM003.KUCCOID = PK0BW02.KUCCOID; /* Company identification*/
    PK0BM003.KUMSTRID = PK0BW02.KUMSTRID; /* Store identification*/
    PK0BM003.XNXCD = PK0BW02.XNXCD; /* Department code*/
  end

  PK0BM003.KUMSTRNM = PK0BW02.KUMSTRNM; /* Store name*/
  PK0BM003.OP1CUPO = PK0BW02.OP1CUPO; /* Customer purchase order*/
  PK0BM003.XOTCD = PK0BW02.XOTCD; /* Order type code*/
  PK0BM003.XOTABRV = PK0BW02.XOTABRV; /* Order type abbreviation*/

  if (PK0BW02.OP1SPHDF == "Y") /* Special handling*/
    PK0BM003.XHDCD[1] = PK0BW02.XHDCD[1]; /* Handling code 1*/
    PK0BM003.XHDDESC[1] = PK0BW02.XHDDESC[1]; /* and description*/
    PK0BM003.XHDCD[2] = PK0BW02.XHDCD[2]; /* Handling code 2*/
    PK0BM003.XHDDESC[2] = PK0BW02.XHDDESC[2]; /* and description*/
    PK0BM003.XHDCD[3] = PK0BW02.XHDCD[3]; /* Handling code 3*/
    PK0BM003.XHDDESC[3] = PK0BW02.XHDDESC[3]; /* and description*/
    PK0BM003.XHDCD[4] = PK0BW02.XHDCD[4]; /* Handling code 4*/
    PK0BM003.XHDDESC[4] = PK0BW02.XHDDESC[4]; /* and description*/
    PK0BM003.XHDCD[5] = PK0BW02.XHDCD[5]; /* Handling code 5*/
    PK0BM003.XHDDESC[5] = PK0BW02.XHDDESC[5]; /* and description*/
  end

  if (PK0BW02.OP1SPLBF == "Y") /* Special labels*/
    PK0BM003.OP4TXT[1] = PK0BW02.OP4TXT[11]; /* Special label 1*/
    PK0BM003.OP4TXT[2] = PK0BW02.OP4TXT[12]; /* Special label 2*/
  end

  if (PK0BW02.OP1SPINF == "Y") /* Special instructions*/
    set PK0BM003.PK0BM3NP skip; /* Display next page message*/
  end


end // end PK0B311

// Display the formatted map
Function PK0B320()
   /* ------------------------------------------------------------*/
   /* Do not allow key to change if from another application.*/
   /* Highlight warehouse code if warehouse not valid.*/
   /* Indicate sound audible alarm for any error message.*/
   /* Display the map that was formatted.*/
   /* ------------------------------------------------------------*/

  if (PK0BM003.KUCCOID > 7999999 /* Cole-Haan customer ?*/
   && PK0BM003.KUCCOID < 9000000) /**/
    PK0BM003.KUCCOID = PK0BM003.KUCCOID - 8000000;
  end /* truncate the '80'*/


  if (PK0BW01.XWHCD == "51")
    set PK0BM003.PK0BMALP skip; /* aloc-nbr dot*/
    set PK0BM003.PK1ALLNB normal; /* aloc-nbr*/
  else
    set PK0BM003.PK0BMALP initialAttributes; /* set dark aloc-nbr dot*/
    set PK0BM003.PK1ALLNB initialAttributes; /* set dark aloc-nbr*/
    set PK0BM003.PK1ALLNB skip, noHighLight;
  end

  if (PK0BW01.PKWSLTYP == "O") /* Inquiry from another application*/
    set PK0BM003.XWHCD skip; /* Cannot change warehouse*/
    set PK0BM003.PK1CUOID skip; /* and order*/
    set PK0BM003.PK1NORID skip; /* and sub-order*/
    set PK0BM003.PK1PKSCH skip; /* and schedule*/
    if (PK0BW01.XWHCD == "51")
      set PK0BM003.PK1ALLNB skip; /* aloc-nbr*/
    end
  end

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    if (PKWREC.XWHABRV == " ") /* Warehouse missing or invalid*/
      set PK0BM003.XWHCD cursor, modified, bold; /* Highlight warehouse*/
      PK0BM003.XWHABRV = " "; /* Clear abbreviation*/
      PK0BM003.XXXERRID = "PK0B320 "; /* Error location*/
    end
    set PK0BM003 alarm; /* Indicate sound alarm*/
  end

  converse PK0BM003 ;


  /* ** if customer was Cole-Haan, restore '80' prefix for processing ****/
  PK0BW02.PK0BW-KUCCOID-COMPARE = PK0BM003.KUCCOID + 8000000;
  if (PK0BW02.KUCCOID == PK0BW02.PK0BW-KUCCOID-COMPARE)
    PK0BM003.KUCCOID = PK0BW02.KUCCOID; /* restore '80'*/
  end


end // end PK0B320

// Check attention identifier
Function PK0B330()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PK0BM003 initial; /* Clear the map storage area*/

    PK0BW01.PK0BWMAP = " "; /* Indicate map not formatted*/

    PKWREC.XWHCD = PK0BW01.XWHCD; /* Restore warehouse code*/
    PKWREC.XWHABRV = PK0BW01.XWHABRV; /* and warehouse abbreviation*/

    return; /* Return to previous process*/

  end

  if (PK0BM003.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PK0B331(); /* Execute FAST PATH request*/

    else

      set PK0BM003.CATOAP cursor, modified, bold; /* Highlight application*/
      converseLib.validationFailed(13); /* Indicate PF key not valid*/
      PK0BM003.XXXERRID = "PK0B330 "; /* Error location*/

      exit stack; /* Exit to redisplay map*/

    end

  end

  if (converseVar.eventKey is pf3  /* PF3 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14 was pressed*/
   || converseVar.eventKey is pf15 /* or PF15 was pressed*/
   || converseVar.eventKey is pf16 /* or PF16 was pressed*/
   || converseVar.eventKey is pf18 /* or PF18 was pressed*/
   || converseVar.eventKey is pf19 /* or PF19 was pressed*/
   || converseVar.eventKey is pf20) /* or PF20 was pressed*/

    PK0B332(); /* Transfer to another application*/

  end

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/

    PK0B162(); /* Purge any temporary storage*/

    COMMAREA.CATOAP = "GD01"; /* Help application*/
    COMMAREA.CAITEM = "PK0B100"; /* Application find code*/

    XSEXIT(); /* Exit to the HELP facility*/

    PK0BW01.PK0BWSWM = "2"; /* Indicate display map 2*/

    PK0BS02(); /* Format map heading areas*/

    PK0BM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/
    PK0BM002.XXXERRID = "PK0B330 "; /* Error location*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/

    PK0B162(); /* Purge any temporary storage*/

    COMMAREA.CATOAP = "GD01"; /* Help application*/
    COMMAREA.CAITEM = "PK0B100"; /* Application find code*/

    XSPF4(); /* Exit to system main menu*/

    PK0BW01.PK0BWSWM = "2"; /* Indicate display map 2*/

    PK0BS02(); /* Format map heading areas*/

    PK0BM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/
    PK0BM002.XXXERRID = "PK0B330 "; /* Error location*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0BM003.XXXERRID = "PK0B330 "; /* Error location*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0B330

// Execute FAST PATH request
Function PK0B331()
   /* ------------------------------------------------------------*/
   /* Transfer to requested application via FAST PATH.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (PK0BM003.CATOAP == COMMAREA.CACURRAP)
                                   /* TO application same as current*/

    set PK0BM003.CATOAP cursor, modified, bold; /* Highlight TO application*/
    converseLib.validationFailed(1); /* Indicate invalid request*/
    PK0BM003.XXXERRID = "PK0B331 "; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  PK0B162(); /* Purge any temporary storage*/

  PKWREC.XWHCD = PK0BM003.XWHCD; /* Save warehouse code*/

  COMMAREA.CATOAP = PK0BM003.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PK0BM003.CAITEM; /* Application data*/

  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* Application user area*/

  XSEXIT(); /* Transfer to requested application*/

  PK0BW01.PK0BWSWM = "2"; /* Indicate display map 2*/

  PK0BS02(); /* Format map heading areas*/

  PK0BM002.CATOAP = COMMAREA.CATOAP; /* TO application*/

  set PK0BM002.CATOAP cursor, modified, bold; /* Highlight TO application*/

  PK0BM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
  converseLib.validationFailed(); /* Force alarm to sound*/
  PK0BM002.XXXERRID = "PK0B331 "; /* Process name*/

  COMMAREA.CATOAP = " "; /* Clear TO application*/

  exit stack; /* Exit to redisplay map*/


end // end PK0B331

// Exit to another application
Function PK0B332()
   /* ------------------------------------------------------------*/
   /* Set the "TO" application according to the PF key pressed.*/
   /* If warehouse code was modified, save in common work area.*/
   /* Transfer to the application.  Display any returned error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    if (PK0BW01.PKWSLTYP == "I") /* Internal key array*/

      PK0BW01.PK0BWSWM = "1"; /* Map to be displayed*/
      exit stack; /* Exit to redisplay map*/

    else

      if (PKWREC.PKWINDEX > 0) /* Previous application exists*/
        COMMAREA.CATOAP = PKWREC.PKWFRMAP[PKWINDEX];
      else
        COMMAREA.CATOAP = "PK0J"; /* PICKING INQUIRY SUBMENU*/
      end

    end

  end

  if (converseVar.eventKey is pf14) /* PF14 was pressed*/
    COMMAREA.CATOAP = "PK0C"; /* PICKING Line Item Inquiry*/
    PK0BS01(); /* Format inquiry key array*/
  end

  if (converseVar.eventKey is pf15) /* PF15 was pressed*/
    COMMAREA.CATOAP = "PK0D"; /* PICKING Customer Inquiry*/
    PK0BS04(); /* Format cust inquiry key array*/
  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CATOAP = "PK0Z";
                                   /* PICKING Sales Pgm/Prod Inquiry*/
  end

  if (converseVar.eventKey is pf18) /* PF18 was pressed*/
    COMMAREA.CATOAP = "PK0I"; /* PICKING Hold/Release*/
  end

  if (converseVar.eventKey is pf19) /* PF19 was pressed*/
    COMMAREA.CATOAP = "PK0S"; /* PICK PLANNING Menu*/
  end

  if (converseVar.eventKey is pf20) /* PF20 was pressed*/
    COMMAREA.CATOAP = "PK07"; /* PICK SELECTION Menu*/
  end

  PK0B162(); /* Purge any temporary storage*/

  PKWREC.XWHCD = PK0BM003.XWHCD; /* Save warehouse code*/

  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* COMMAREA user area*/

  XSEXIT(); /* Invoke selected application*/

  PK0BW01.PK0BWSWM = "2"; /* Indicate display map 2*/

  PK0BS02(); /* Format map heading areas*/

  PK0BM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
  converseLib.validationFailed(); /* Force alarm to sound*/
  PK0BM002.XXXERRID = "PK0B332 "; /* Error location*/

  exit stack; /* Exit to redisplay map*/


end // end PK0B332

// Reset highlighted fields
Function PK0B340()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0BM003.XWHCD initialAttributes; /* Warehouse code*/
  set PK0BM003.PK1CUOID initialAttributes; /* Order number*/
  set PK0BM003.PK1NORID initialAttributes; /* Sub-order number*/
  set PK0BM003.PK1PKSCH initialAttributes; /* Schedule number*/
  if (PK0BW01.XWHCD == "51")
    set PK0BM003.PK0BMALP skip; /* Aloc-nbr dot*/
    set PK0BM003.PK1ALLNB normal; /* Aloc-nbr*/
  else
    set PK0BM003.PK0BMALP initialAttributes; /* set dark aloc-nbr dot*/
    set PK0BM003.PK1ALLNB initialAttributes; /* set dark aloc-nbr*/
    set PK0BM003.PK1ALLNB skip, noHighLight;
  end

  set PK0BM003.CATOAP initialAttributes; /* FAST PATH application*/
  set PK0BM003.CAITEM initialAttributes; /* Application data*/


end // end PK0B340

// Verify the entered data
Function PK0B350()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Ensure that order number is present.*/
   /* Save warehouse code, if changed.  Verify warehouse code.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (PK0BM003.CAITEM > " ") /* Application data was entered*/
    set PK0BM003.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/
    PK0BM003.XXXERRID = "PK0B350 "; /* Error location*/
  end

  if (converseVar.eventKey not pa2) /* Not a cancel request*/
    if (PK0BM003.XWHCD != PK0BW01.XWHCD       /* Warehouse was changed*/
     || PK0BM003.PK1CUOID != PK0BW02.PK1CUOID /* or order was changed*/
     || PK0BM003.PK1NORID != PK0BW02.PK1NORID /* or sub-order was changed*/
     || PK0BM003.PK1PKSCH != PK0BW02.PK1PKSCH) /* or schedule was changed*/

      PK0BW02.PK1ALLNB = 0; /* Reset aloc-nbr*/

      if (PK0BM003.PK1CUOID != 0 /* Order was entered*/
       || PK0BM003.PK1NORID != 0 /* or sub-order was entered*/
       || PK0BM003.PK1PKSCH != 0) /* or schedule was entered*/

        if (PK0BM003.PK1CUOID <= 0) /* Order missing or invalid*/
          set PK0BM003.PK1CUOID cursor, modified, bold; /* Highlight order*/
          converseLib.validationFailed(26); /* Indicate order missing*/
          PK0BM003.XXXERRID = "PK0B350 "; /* Error location*/
        end

      end
    end
    PKWREC.XWHCD = PK0BM003.XWHCD; /* Save warehouse code*/
  end

  XPPK002(); /* Verify warehouse code*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    PK0B351(); /* Verify scroll request*/
  end


end // end PK0B350

// Verify scroll request
Function PK0B351()
   /* ------------------------------------------------------------*/
   /* Ensure that a page exists to scroll forward.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward request*/

    if (PK0BW02.OP1SPINF != "Y") /* No special instructions*/

      PK0BM003.XXXERRID = "PK0B351 "; /* Error location*/
      converseLib.validationFailed(38); /* No more pages to display*/

    end

  end

  if (PK0BM003.PK1PKSCH != PK0BW02.PK1PKSCH) /* Schedule was changed*/

    set PK0BM003.PK1PKSCH cursor, modified, bold; /* Highlight schedule*/
    PK0BM003.XXXERRID = "PK0B351 "; /* Error location*/
    converseLib.validationFailed(39); /* Modifications not allowed*/

  end

  if (PK0BM003.PK1NORID != PK0BW02.PK1NORID) /* Sub-order was changed*/

    set PK0BM003.PK1NORID cursor, modified, bold; /* Highlight sub-order*/
    PK0BM003.XXXERRID = "PK0B351 "; /* Error location*/
    converseLib.validationFailed(39); /* Modifications not allowed*/

  end

  if (PK0BM003.PK1CUOID != PK0BW02.PK1CUOID) /* Order was changed*/

    set PK0BM003.PK1CUOID cursor, modified, bold; /* Highlight order*/
    PK0BM003.XXXERRID = "PK0B351 "; /* Error location*/
    converseLib.validationFailed(39); /* Modifications not allowed*/

  end

  if (PK0BM003.XWHCD != PK0BW01.XWHCD) /* Warehouse was changed*/

    set PK0BM003.XWHCD cursor, modified, bold; /* Highlight department*/
    PK0BM003.XXXERRID = "PK0B351 "; /* Error location*/
    converseLib.validationFailed(39); /* Modifications not allowed*/

  end


end // end PK0B351

// Process valid input request
Function PK0B360()
   /* ------------------------------------------------------------*/
   /* If warehouse code, order or schedule was changed, purge any*/
   /* temporary storage, reset the display controls, clear the*/
   /* previous data and save the new warehouse and order data.*/
   /* If the ENTER key was pressed and an order key array exists,*/
   /* indicate that the next order is to be displayed.*/
   /* If a scroll request, indicate the next map to be displayed.*/
   /* ------------------------------------------------------------*/

  if (PK0BM003.XWHCD != PK0BW01.XWHCD       /* Warehouse changed*/
   || PK0BM003.PK1CUOID != PK0BW02.PK1CUOID /* or order changed*/
   || PK0BM003.PK1NORID != PK0BW02.PK1NORID /* or sub-order changed*/
   || PK0BM003.PK1PKSCH != PK0BW02.PK1PKSCH) /* or schedule changed*/

    PK0B162(); /* Purge any temporary storage*/

    PK0BW02.PK1ALLNB = 0; /* Reset aloc-nbr*/
    PK0BW01.PKWSLTYP = " "; /* Reset selection type*/
    PK0BW01.PK0BWSWM = " "; /* Indicate obtain order data*/

    PK0BW01.XWHCD = PKWREC.XWHCD; /* Warehouse code*/
    PK0BW01.XWHABRV = PKWREC.XWHABRV; /* Warehouse abbreviation*/

    if (PK0BM003.PK1CUOID != 0 /* Order entered*/
     || PK0BM003.PK1NORID != 0 /* or sub-order entered*/
     || PK0BM003.PK1PKSCH != 0) /* or schedule entered*/

      PK0BW02.PK1CUOID = PK0BM003.PK1CUOID; /* Order*/
      PK0BW02.PK1NORID = PK0BM003.PK1NORID; /* Sub-order*/
      PK0BW02.XPPCD = PK0BM003.XPPCD; /* priority*/
      PK0BW02.PK1PKSCH = PK0BM003.PK1PKSCH; /* Schedule*/

      PK0BW01.PK0BWSWF = "Y"; /* Set display format switch*/
    end
  end

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    if (PK0BW01.PKWSLTYP == "O" /* Order key array exists*/
     || PK0BW01.PKWSLTYP == "I") /* or internal key array exists*/
      PK0BW01.PK0BWSWM = " "; /* Obtain next key to display*/
    end
  end

  if (converseVar.eventKey is pf7) /* Scroll back was requested*/
    PK0BW01.PK0BWSWM = "2"; /* Map to be displayed*/
  end

  if (converseVar.eventKey is pf8) /* Scroll forward was requested*/
    PK0BW01.PK0BWSWM = "4"; /* Map to be displayed*/
  end


end // end PK0B360

// Display distribution text
Function PK0B400()
   /* ------------------------------------------------------------*/
   /* Clear the map output area and format the map fields.*/
   /* Display the map that was formatted.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process input request if not a cancel and no errors found.*/
   /* ------------------------------------------------------------*/

  if (PK0BW01.PK0BWMAP != "M004") /* Not the current display*/
    PK0B410(); /* Format map output area*/
  end

  PK0B420(); /* Display the formatted map*/

  PK0B430(); /* Check attention identifier*/

  PK0B440(); /* Reset fields to normal intensity*/

  PK0B450(); /* Verify the entered data*/

  if (converseVar.eventKey not pa2 /* Not a cancel request*/
   && converseVar.validationMsgNum == 0) /* and no errors were found*/
    PK0B460(); /* Process valid input request*/
  end


end // end PK0B400

// Format the map
Function PK0B410()
   /* ------------------------------------------------------------*/
   /* Format the map output area.*/
   /* ------------------------------------------------------------*/

  PK0BW01.PK0BWMAP = "M004"; /* Indicate current display*/

  set PK0BM004 initial; /* Clear map storage area*/
  if (PK0BW01.XWHCD == "51"
   || COMMAREA.XWHCD == "51")
    PK0BM004.PK0BM-SCHED-ID-LIT = "MANIFEST ID:";
  else
    PK0BM004.PK0BM-SCHED-ID-LIT = "   SCHEDULE:";
  end

  PK0BM004.XXXRVNBR = PK0BW01.XXXRVNBR; /* Application revision*/
  PK0BM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PK0BM004.XWHCD = PK0BW01.XWHCD; /* Warehouse code*/
  PK0BM004.XWHABRV = PK0BW01.XWHABRV; /* Warehouse abbreviation*/

  PK0B411(); /* Format the order data*/


end // end PK0B410

// Format order data
Function PK0B411()
   /* ------------------------------------------------------------*/
   /* Format the order data in the map output area.*/
   /* ------------------------------------------------------------*/

  if (PK0BW01.XWHCD == "51")
    set PK0BM004.PK0BMALP skip;
    set PK0BM004.PK1ALLNB normal;
    PK0BM004.PK1ALLNB = PK0BW02.PK1ALLNB;
    if (PK0BW02.DCMS-ERROR-FL == "Y")
      set PK0BM004.PK0BMDTL skip, red;
    end
  else
    set PK0BM004.PK0BMALP initialAttributes;
    set PK0BM004.PK1ALLNB initialAttributes;
    set PK0BM004.PK0BMDTL initialAttributes;
    set PK0BM004.PK1ALLNB skip, noHighLight;
  end

  PK0BM004.PK1CUOID = PK0BW02.PK1CUOID; /* Order number*/
  PK0BM004.PK1NORID = PK0BW02.PK1NORID; /* Sub-order number*/
  PK0BM004.XPPCD = PK0BW02.XPPCD; /* priority*/

  if (PK0BW02.PK1PKSCH != 0) /* Schedule number exists*/
    PK0BM004.PK1PKSCH = PK0BW02.PK1PKSCH; /* Schedule number*/
  end

  PK0BM004.PK0BMDTL = PK0BW02.PK0BMDTL; /* Type of date*/
  PK0BM004.SR1PKSDT = PK0BW02.SR1PKSDT; /* Status date*/

  if (PK0BW02.KUCCOID != 0) /* Company identification exists*/
    PK0BM004.KUCCOID = PK0BW02.KUCCOID; /* Company identification*/
    PK0BM004.KUMSTRID = PK0BW02.KUMSTRID; /* Store identification*/
    PK0BM004.XNXCD = PK0BW02.XNXCD; /* Department code*/
  end

  PK0BM004.KUMSTRNM = PK0BW02.KUMSTRNM; /* Store name*/
  PK0BM004.OP1CUPO = PK0BW02.OP1CUPO; /* Customer purchase order*/
  PK0BM004.XOTCD = PK0BW02.XOTCD; /* Order type code*/
  PK0BM004.XOTABRV = PK0BW02.XOTABRV; /* Order type abbreviation*/

  if (PK0BW02.OP1SPINF == "Y") /* Special instructions*/
    PK0BW01.PK0BWIXM = 1; /* Initialize map index*/

    while (PK0BW01.PK0BWIXM <= 10) /* Until all lines are moved*/
      PK0BM004.XNDCD[PK0BWIXM] = PK0BW02.XNDCD[PK0BWIXM];
      PK0BM004.OP4TXT[PK0BWIXM] = PK0BW02.OP4TXT[PK0BWIXM];

      PK0BW01.PK0BWIXM = PK0BW01.PK0BWIXM + 1; /* Increment map index*/
    end
  end


end // end PK0B411

// Display the formatted map
Function PK0B420()
   /* ------------------------------------------------------------*/
   /* Do not allow key to change if from another application.*/
   /* Highlight warehouse code if warehouse not valid.*/
   /* Indicate sound audible alarm for any error message.*/
   /* Display the map that was formatted.*/
   /* ------------------------------------------------------------*/

  if (PK0BM004.KUCCOID > 7999999 /* Cole-Haan customer ?*/
   && PK0BM004.KUCCOID < 9000000) /**/
    PK0BM004.KUCCOID = PK0BM004.KUCCOID - 8000000;
  end /* truncate the '80'*/


  if (PK0BW01.PKWSLTYP == "O") /* Inquiry from another application*/
    set PK0BM004.XWHCD skip; /* Cannot change warehouse*/
    set PK0BM004.PK1CUOID skip; /* and order*/
    set PK0BM004.PK1NORID skip; /* and sub-order*/
    set PK0BM004.PK1PKSCH skip; /* and schedule*/
    if (PK0BW01.XWHCD == "51")
      set PK0BM004.PK1ALLNB skip;
    end
  end

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    if (PKWREC.XWHABRV == " ") /* Warehouse missing or invalid*/
      set PK0BM004.XWHCD cursor, modified, bold; /* Highlight warehouse*/
      PK0BM004.XWHABRV = " "; /* Clear abbreviation*/
      PK0BM004.XXXERRID = "PK0B420 "; /* Error location*/
    end
    set PK0BM004 alarm; /* Indicate sound alarm*/
  end


  converse PK0BM004 ;


  /* ** if customer was Cole-Haan, restore '80' prefix for processing ****/
  PK0BW02.PK0BW-KUCCOID-COMPARE = PK0BM004.KUCCOID + 8000000;
  if (PK0BW02.KUCCOID == PK0BW02.PK0BW-KUCCOID-COMPARE)
    PK0BM004.KUCCOID = PK0BW02.KUCCOID; /* restore '80'*/
  end


end // end PK0B420

// Check attention identifier
Function PK0B430()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PK0BM004 initial; /* Clear the map storage area*/

    PK0BW01.PK0BWMAP = " "; /* Indicate map not formatted*/

    PKWREC.XWHCD = PK0BW01.XWHCD; /* Restore warehouse code*/
    PKWREC.XWHABRV = PK0BW01.XWHABRV; /* and warehouse abbreviation*/

    return; /* Return to previous process*/

  end

  if (PK0BM004.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PK0B431(); /* Execute FAST PATH request*/

    else

      set PK0BM004.CATOAP cursor, modified, bold; /* Highlight application*/
      converseLib.validationFailed(13); /* Indicate PF key not valid*/
      PK0BM004.XXXERRID = "PK0B430 "; /* Error location*/

      exit stack; /* Exit to redisplay map*/

    end

  end

  if (converseVar.eventKey is pf3  /* PF3 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14 was pressed*/
   || converseVar.eventKey is pf15 /* or PF15 was pressed*/
   || converseVar.eventKey is pf16 /* or PF16 was pressed*/
   || converseVar.eventKey is pf18 /* or PF18 was pressed*/
   || converseVar.eventKey is pf19 /* or PF19 was pressed*/
   || converseVar.eventKey is pf20) /* or PF20 was pressed*/

    PK0B432(); /* Transfer to another application*/

  end

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/

    PK0B162(); /* Purge any temporary storage*/

    COMMAREA.CATOAP = "GD01"; /* Help application*/
    COMMAREA.CAITEM = "PK0B100"; /* Application find code*/

    XSEXIT(); /* Exit to the HELP facility*/

    PK0BW01.PK0BWSWM = "2"; /* Indicate display map 2*/

    PK0BS02(); /* Format map heading areas*/

    PK0BM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/
    PK0BM002.XXXERRID = "PK0B430 "; /* Error location*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/

    PK0B162(); /* Purge any temporary storage*/

    COMMAREA.CATOAP = "GD01"; /* Help application*/
    COMMAREA.CAITEM = "PK0B100"; /* Application find code*/

    XSPF4(); /* Exit to system main menu*/

    PK0BW01.PK0BWSWM = "2"; /* Indicate display map 2*/

    PK0BS02(); /* Format map heading areas*/

    PK0BM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/
    PK0BM002.XXXERRID = "PK0B430 "; /* Error location*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7)  /* and PF7 was not pressed*/

    converseLib.validationFailed(12); /* Indicate invalid attention key*/
    PK0BM004.XXXERRID = "PK0B430 "; /* Error location*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PK0B430

// Execute FAST PATH request
Function PK0B431()
   /* ------------------------------------------------------------*/
   /* Transfer to requested application via FAST PATH.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (PK0BM004.CATOAP == COMMAREA.CACURRAP)
                                   /* TO application same as current*/

    set PK0BM004.CATOAP cursor, modified, bold; /* Highlight TO application*/
    converseLib.validationFailed(1); /* Indicate invalid request*/
    PK0BM004.XXXERRID = "PK0B431 "; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  PK0B162(); /* Purge any temporary storage*/

  PKWREC.XWHCD = PK0BM004.XWHCD; /* Save warehouse code*/

  COMMAREA.CATOAP = PK0BM004.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PK0BM004.CAITEM; /* Application data*/

  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* Application user area*/

  XSEXIT(); /* Transfer to requested application*/

  PK0BW01.PK0BWSWM = "2"; /* Indicate display map 2*/

  PK0BS02(); /* Format map heading areas*/

  PK0BM002.CATOAP = COMMAREA.CATOAP; /* TO application*/

  set PK0BM002.CATOAP cursor, modified, bold; /* Highlight TO application*/

  PK0BM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
  converseLib.validationFailed(); /* Force alarm to sound*/
  PK0BM002.XXXERRID = "PK0B431 "; /* Process name*/

  COMMAREA.CATOAP = " "; /* Clear TO application*/

  exit stack; /* Exit to redisplay map*/


end // end PK0B431

// Exit to another application
Function PK0B432()
   /* ------------------------------------------------------------*/
   /* Set the "TO" application according to the PF key pressed.*/
   /* If warehouse code was modified, save in common work area.*/
   /* Transfer to the application.  Display any returned error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    if (PK0BW01.PKWSLTYP == "I") /* Internal key array*/

      PK0BW01.PK0BWSWM = "1"; /* Map to be displayed*/
      exit stack; /* Exit to redisplay map*/

    else

      if (PKWREC.PKWINDEX > 0) /* Previous application exists*/
        COMMAREA.CATOAP = PKWREC.PKWFRMAP[PKWINDEX];
      else
        COMMAREA.CATOAP = "PK0J"; /* PICKING INQUIRY SUBMENU*/
      end

    end

  end

  if (converseVar.eventKey is pf14) /* PF14 was pressed*/
    COMMAREA.CATOAP = "PK0C"; /* PICKING Line Item Inquiry*/
    PK0BS01(); /* Format inquiry key array*/
  end

  if (converseVar.eventKey is pf15) /* PF15 was pressed*/
    COMMAREA.CATOAP = "PK0D"; /* PICKING Customer Inquiry*/
    PK0BS05(); /* Format cust inquiry key array*/
  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CATOAP = "PK0Z";
                                   /* PICKING Sales Pgm/Prod Inquiry*/
  end

  if (converseVar.eventKey is pf18) /* PF18 was pressed*/
    COMMAREA.CATOAP = "PK09"; /* PICKING Hold/Release*/
  end

  if (converseVar.eventKey is pf19) /* PF19 was pressed*/
    COMMAREA.CATOAP = "PK0S"; /* PICK PLANNING Menu*/
  end

  if (converseVar.eventKey is pf20) /* PF20 was pressed*/
    COMMAREA.CATOAP = "PK07"; /* PICK SELECTION Menu*/
  end

  PK0B162(); /* Purge any temporary storage*/

  PKWREC.XWHCD = PK0BM004.XWHCD; /* Save warehouse code*/

  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* COMMAREA user area*/

  XSEXIT(); /* Invoke selected application*/

  PK0BW01.PK0BWSWM = "2"; /* Indicate display map 2*/

  PK0BS02(); /* Format map heading areas*/

  PK0BM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
  converseLib.validationFailed(); /* Force alarm to sound*/
  PK0BM002.XXXERRID = "PK0B432 "; /* Error location*/

  exit stack; /* Exit to redisplay map*/


end // end PK0B432

// Reset highlighted fields
Function PK0B440()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PK0BM004.XWHCD initialAttributes; /* Warehouse code*/
  set PK0BM004.PK1CUOID initialAttributes; /* Order number*/
  set PK0BM004.PK1NORID initialAttributes; /* Sub-order number*/
  set PK0BM004.PK1PKSCH initialAttributes; /* Schedule number*/

  if (PK0BW01.XWHCD == "51")
    set PK0BM004.PK0BMALP skip;
    set PK0BM004.PK1ALLNB normal;
  else
    set PK0BM004.PK0BMALP initialAttributes; /* set dark*/
    set PK0BM004.PK1ALLNB initialAttributes;
    set PK0BM004.PK1ALLNB skip, noHighLight;
  end

  set PK0BM004.CATOAP initialAttributes; /* FAST PATH application*/
  set PK0BM004.CAITEM initialAttributes; /* Application data*/


end // end PK0B440

// Verify the entered data
Function PK0B450()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Ensure that order number is present.*/
   /* Save warehouse code, if changed.  Verify warehouse code.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (PK0BM004.CAITEM > " ") /* Application data was entered*/
    set PK0BM004.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/
    PK0BM004.XXXERRID = "PK0B450 "; /* Error location*/
  end

  if (converseVar.eventKey not pa2) /* Not a cancel request*/
    if (PK0BM004.XWHCD != PK0BW01.XWHCD       /* Warehouse was changed*/
     || PK0BM004.PK1CUOID != PK0BW02.PK1CUOID /* or order was changed*/
     || PK0BM004.PK1NORID != PK0BW02.PK1NORID /* or sub-order was changed*/
     || PK0BM004.PK1PKSCH != PK0BW02.PK1PKSCH) /* or schedule was changed*/

      PK0BW02.PK1ALLNB = 0; /* Reset aloc-nbr*/

      if (PK0BM004.PK1CUOID != 0 /* Order was entered*/
       || PK0BM004.PK1NORID != 0 /* or sub-order was entered*/
       || PK0BM004.PK1PKSCH != 0) /* or schedule was entered*/

        if (PK0BM004.PK1CUOID <= 0) /* Order missing or invalid*/
          set PK0BM004.PK1CUOID cursor, modified, bold; /* Highlight order*/
          converseLib.validationFailed(26); /* Indicate order missing*/
          PK0BM004.XXXERRID = "PK0B450 "; /* Error location*/
        end

      end
    end

    PKWREC.XWHCD = PK0BM004.XWHCD; /* Save warehouse code*/
  end

  XPPK002(); /* Verify warehouse code*/

  if (converseVar.eventKey is pf7) /* Scroll back request*/
    PK0B451(); /* Verify scroll request*/
  end


end // end PK0B450

// Verify scroll request
Function PK0B451()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (PK0BM004.PK1PKSCH != PK0BW02.PK1PKSCH) /* Schedule was changed*/

    set PK0BM004.PK1PKSCH cursor, modified, bold; /* Highlight schedule*/
    PK0BM004.XXXERRID = "PK0B451 "; /* Error location*/
    converseLib.validationFailed(39); /* Modifications not allowed*/

  end

  if (PK0BM004.PK1NORID != PK0BW02.PK1NORID) /* Sub-order was changed*/

    set PK0BM004.PK1NORID cursor, modified, bold; /* Highlight sub-order*/
    PK0BM004.XXXERRID = "PK0B451 "; /* Error location*/
    converseLib.validationFailed(39); /* Modifications not allowed*/

  end

  if (PK0BM004.PK1CUOID != PK0BW02.PK1CUOID) /* Order was changed*/

    set PK0BM004.PK1CUOID cursor, modified, bold; /* Highlight order*/
    PK0BM004.XXXERRID = "PK0B451 "; /* Error location*/
    converseLib.validationFailed(39); /* Modifications not allowed*/

  end

  if (PK0BM004.XWHCD != PK0BW01.XWHCD) /* Warehouse was changed*/

    set PK0BM004.XWHCD cursor, modified, bold; /* Highlight department*/
    PK0BM004.XXXERRID = "PK0B451 "; /* Error location*/
    converseLib.validationFailed(39); /* Modifications not allowed*/

  end


end // end PK0B451

// Process valid input request
Function PK0B460()
   /* ------------------------------------------------------------*/
   /* If warehouse code, order or schedule was changed, purge any*/
   /* temporary storage, reset the display controls, clear the*/
   /* previous data and save the new warehouse and order data.*/
   /* If the ENTER key was pressed and an order key array exists,*/
   /* indicate that the next order is to be displayed.*/
   /* If a scroll request, indicate the next map to be displayed.*/
   /* ------------------------------------------------------------*/

  if (PK0BM004.XWHCD != PK0BW01.XWHCD       /* Warehouse changed*/
   || PK0BM004.PK1CUOID != PK0BW02.PK1CUOID /* or order changed*/
   || PK0BM004.PK1NORID != PK0BW02.PK1NORID /* or sub-order changed*/
   || PK0BM004.PK1PKSCH != PK0BW02.PK1PKSCH) /* or schedule changed*/

    PK0B162(); /* Purge any temporary storage*/

    PK0BW01.PK1ALLNB = 0; /* Reset aloc-nbr*/
    PK0BW01.PKWSLTYP = " "; /* Reset selection type*/
    PK0BW01.PK0BWSWM = " "; /* Indicate obtain order data*/

    PK0BW01.XWHCD = PKWREC.XWHCD; /* Warehouse code*/
    PK0BW01.XWHABRV = PKWREC.XWHABRV; /* Warehouse abbreviation*/

    if (PK0BM004.PK1CUOID != 0 /* Order entered*/
     || PK0BM004.PK1NORID != 0 /* or sub-order entered*/
     || PK0BM004.PK1PKSCH != 0) /* or schedule entered*/

      PK0BW02.PK1CUOID = PK0BM004.PK1CUOID; /* Order*/
      PK0BW02.PK1NORID = PK0BM004.PK1NORID; /* Sub-order*/
      PK0BW02.XPPCD = PK0BM004.XPPCD; /* priority*/
      PK0BW02.PK1PKSCH = PK0BM004.PK1PKSCH; /* Schedule*/

      PK0BW01.PK0BWSWF = "Y"; /* Set display format switch*/
    end
  end

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    if (PK0BW01.PKWSLTYP == "O" /* Order key array exists*/
     || PK0BW01.PKWSLTYP == "I") /* or internal key array exists*/
      PK0BW01.PK0BWSWM = " "; /* Indicate obtain next key*/
    end
  end

  if (converseVar.eventKey is pf7) /* Scroll back was requested*/
    PK0BW01.PK0BWSWM = "3"; /* Map to be displayed*/
  end


end // end PK0B460

// Determine map to be displayed
Function PK0B500()
   /* ------------------------------------------------------------*/
   /* If an order key array was provided, search for the next*/
   /* order number to process.*/
   /* If an order number was entered, obtain the order header,*/
   /* instructions and customer data for display.*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* Pool header record*/
  set PK5REC empty; /* Pool item record*/
  set PK6REC empty; /* Customer store record*/
  set PK7REC empty; /* Customer address record*/
  set PKFREC empty; /* Pool text record*/
  set SP1REC empty; /* Sales program record*/
  set SR2REC empty; /* Ship/Rec order record*/
  set SR3REC empty; /* Ship/Rec item record*/
  set SR4REC empty; /* Ship/Rec header record*/
  set SR9REC empty; /* Ship/Rec text record*/
  set VEDTPR01 empty; /* Edi trading partner record*/
  set VETPXM01 empty; /* Edi trading partner record*/
  set EPIREC empty;
  set VMPOLH01 empty;
  set VMPOLI01 empty;
  set VMPOLT01 empty;
  set SQLCA empty; /* SQL communication area*/
  set TA1REC empty; /* Error diagnosis parameters*/

  PK0BW01.PK0BW2N1 = "       PICKING, SPECIAL LABEL AND DISTRI";
  PK0BW01.PK0BW2N2 = "BUTION INSTRUCTIONS ON NEXT PAGE";

  set PK0BM002 initial; /* Clear map output area*/

  PK0BW01.PK0BWSWM = "2"; /* Default map to be displayed*/
  PK0BW01.PK0BWMAP = " "; /* Reset current display indicator*/


  if (converseVar.eventKey not pa2) /* Not a cancel request*/
    if (PK0BW01.PKWSLTYP == "M" /* Order key from menu*/
     || PK0BW01.PKWSLTYP == "O" /* or order key array*/
     || PK0BW01.PKWSLTYP == "I" /* or internal key array*/
     || PK0BW01.PKWSLTYP == "S") /* or single key array*/

      PK0B510(); /* Search for next order key*/
    end
  end


  if (PK0BW01.PK0BWSWF != "Y") /* No data to format display*/

    return; /* return to previous routine*/
  end


  if (PK0BW02.PK1CUOID <= 0) /* Order missing or invalid*/
    set PK0BM002.PK1CUOID cursor, modified, bold;
    converseLib.validationFailed(26);
    PK0BM002.XXXERRID = "PK0B500";

    return; /* return to previous routine*/
  end


  PK0BW01.PK0BW-DCMS-SEL-FL = "N";
  if (PK0BW01.XWHCD == "51")
    if (PK0BW02.PK1PKSCH == 0) /* No schedule was specified*/
      PK0B-VMPOLH01-SC(); /* see if ordr is in Mirror pool*/
      if (EPIREC.EPI-PK-ORD-CNT > 0)
        PK0BW01.PK0BW-DCMS-SEL-FL = "Y";
      end
    end
  end


  if (PK0BW02.PK1PKSCH == 0) /* No schedule was specified*/
    if (PK0BW01.PKWSLTYP == " ") /* Not selected from a list*/
      PK0BW01.PK0BWSWM = "1"; /* Map to be displayed*/

      exit stack; /* Exit to display map*/
    else
      if (PK0BW01.XWHCD == "51")
        PK0B515(); /* Obtain MIRROR POOL order*/
        if (PK0BW01.PK0BW-DCMS-SEL-FL == "N") /* no Order found*/
          PK0B520(); /* Obtain PICKING order*/
        end
      else
        PK0B520(); /* Obtain PICKING order*/
      end
    end
  else
    PK0B530(); /* Obtain SHIPPING order*/
  end


  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    PK0B540(); /* Obtain customer name*/
  end


  if (converseVar.validationMsgNum == 0 /* No errors were found*/
   && PK0BW02.TF1CARCD != " ")          /* and carrier is specified*/
    PK0B550(); /* Obtain carrier name*/
  end


  if (converseVar.validationMsgNum == 0 /* No errors were found*/
   && PK0BW02.SP1ID != " ")             /* and special program exists*/
    PK0B560(); /* Obtain special program name*/
  end


      /* prm  (11/06/87)  prevent address lookup*/
      /* if address override in shipping*/
  if (converseVar.validationMsgNum == 0 /* No errors were found*/
   && PK0BW02.OP11TMSF != "Y")          /* and not one-time ship-to*/
    if (PK0BW02.PK1PKSCH == 0 /* A schedule was specified*/
     || SR2REC.SR2SHPCD != "2") /* if address override in shipping*/
      PK0B570(); /* Obtain ship-to address*/
    end
  end


  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    return;
  end


      /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **/
      /* check for 'self' store and department numbers**/
      /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **/

  if (PK4REC.KUMSLFID != " " /* pick pool store self id*/
   || VMPOLH01.CU-STOR-SELF-ID != " ")
    PK0BW02.CU-STOR-SELF-ID = PK4REC.KUMSLFID;
    if (VMPOLH01.CU-STOR-SELF-ID != " ")
      PK0BW02.CU-STOR-SELF-ID = VMPOLH01.CU-STOR-SELF-ID;
    end
  else
    if (SR2REC.KUMSLFID != " ") /* ship rec store self id*/
      PK0BW02.CU-STOR-SELF-ID = SR2REC.KUMSLFID;
    end
  end


  if (PK4REC.KUJSLFID != " " /* pick pool dept self id*/
   || VMPOLH01.CU-DEPT-SELF-ID != " ")
    PK0BW02.CU-DEPT-SELF-ID = PK4REC.KUJSLFID;
    if (VMPOLH01.CU-DEPT-SELF-ID != " ")
      PK0BW02.CU-DEPT-SELF-ID = VMPOLH01.CU-DEPT-SELF-ID;
    end
  else
    if (SR2REC.KUJSLFID != " ") /* ship rec dept self id*/
      PK0BW02.CU-DEPT-SELF-ID = SR2REC.KUJSLFID;
    end
  end


  if (PK0BW02.CU-DEPT-SELF-ID == " "
   && PK0BW02.XNXCD > 0    /**/
   && PK4REC.XBCCD != "08" /**/
   && SR2REC.XBCCD != "08" 
   && VMPOLH01.XBC-BRAND-CD != "08")
    PK0B575(); /* Lookup for 'self' dept nbr*/
  end

      /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **/

  if (converseVar.validationMsgNum == 0 /* No errors were found*/
   && PK0BW02.OP1SPHDF == "Y")          /* and special handling*/
    PK0B580(); /* Obtain packing/handling*/
  end


  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    if (PK0BW02.OP1SPLBF == "Y" /* Special labels*/
     || PK0BW02.OP1SPINF == "Y") /* or special instructions*/
      PK0B590(); /* Obtain labels and instructions*/
    end
  end


  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    PK0B597(); /* determine advance shp notc status*/
  end


  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    PK0BW01.PK0BWSWF = "F"; /* Indicate display formatted*/
    if (PK0BW01.PKWSLTYP == "S") /* Single order was found*/
      PK0BW01.PKWSLTYP = " "; /* Reset selection type*/
    end
  end


end // end PK0B500

// Search for next order number
Function PK0B510()
   /* ------------------------------------------------------------*/
   /* Search for the next order number to display.*/
   /* If no orders remain to be displayed, return control to the*/
   /* selecting application.*/
   /* ------------------------------------------------------------*/

  if (PK0BW01.PKWSLTYP == "M") /* Order key from menu*/
    PK0BW01.PKWSLTYP = " "; /* Reset selection type*/
  end

  set PK0BW02 empty; /* Initialize display storage*/

  PK0BW01.PK0BWSWF = " "; /* Reset found switch*/
  PK0BW01.PK0BWIXA = 1; /* Initialize array index*/

  while (PK0BW01.PK0BWSWF == " " /* Until order number found*/
   && PK0BW01.PK0BWIXA <= 30) /* or all entries searched*/
    PK0B511(); /* Search for next order number*/
  end

  if (PK0BW01.PKWSLTYP == "O") /* Order key array*/
    PKWREC.PKWARRAY[PKWINDEX] = PKYREC.PKWARRAY; /* Update array*/
  end

  if (PK0BW01.PK0BWSWF == " ") /* End of selected orders*/

    if (PK0BW01.PKWSLTYP == "O") /* Order key array*/
      COMMAREA.CATOAP = PKWREC.PKWFRMAP[PKWINDEX]; /* FROM application*/
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* COMMAREA user area*/
      COMMAREA.CA-USER-WORKAREA-2K-B = EPAREC.EPAARRAY;

      XSEXIT(); /* Return to selecting application*/

      PK0BM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
      converseLib.validationFailed(); /* Force alarm to sound*/
      PK0BM002.XXXERRID = "PK0B510 "; /* Error location*/
    else
      PK0BW01.PK0BWSWM = "1"; /* Map to be displayed*/
    end

    exit stack; /* Exit to redisplay map*/
  end


end // end PK0B510

// Search order key array
Function PK0B511()
   /* ------------------------------------------------------------*/
   /* Search the order key array until a selected key is found*/
   /* or all entries have been processed.  When a selected entry*/
   /* is found, set the action indicator to indicated "viewed".*/
   /* ------------------------------------------------------------*/

  if (PK0BW01.PKWSLTYP == "I") /* Internal key array exists*/
    if (PK0BW01.PK0BWIXA <= 16 /* Until all entries are processed*/
     && PK0BW03.PK0BMSEL[PK0BWIXA] == "S") /* and flag indicates selected*/
      PK0BW01.PK0BWSWF = "Y"; /* Indicate order number found*/
      PK0BW02.PK1CUOID = PK0BW03.PK1CUOID[PK0BWIXA]; /* Order*/
      PK0BW02.PK1NORID = PK0BW03.PK1NORID[PK0BWIXA]; /* Sub-order*/
      PK0BW02.PK1ALLNB = PK0BW03.PK1ALLNB[PK0BWIXA]; /* Aloc-nbr*/
      PK0BW02.XPPCD = PK0BW03.XPPCD[PK0BWIXA]; /* priority*/
      PK0BW02.PK1PKSCH = PK0BW03.PK1PKSCH[PK0BWIXA]; /* Schedule*/
      PK0BW03.PK0BMSEL[PK0BWIXA] = "V"; /* Indicate entry viewed*/
    end
  else
    if (PKYREC.PKYORACT[PK0BWIXA] != "S" /* Flag indicates selected*/
     && PKYREC.PKYORACT[PK0BWIXA] != "V")
       /* next sentence*/
    else
      if (PKYREC.PKYORACT[PK0BWIXA] == "V"
       && PKWREC.PKWFRMAP != " ")
         /* next sentence*/
      else
        PK0BW01.PK0BWSWF = "Y"; /* Indicate order number found*/
        PK0BW02.PK1CUOID = PKYREC.PK1CUOID[PK0BWIXA]; /* Order*/
        PK0BW02.PK1NORID = PKYREC.PK1NORID[PK0BWIXA]; /* Sub-order*/
        PK0BW02.PK1PKSCH = PKYREC.PK1PKSCH[PK0BWIXA]; /* Schedule*/
        if (PKYREC.PKYORACT[PK0BWIXA] == "V")
          PKYREC.PKYORACT[PK0BWIXA] = " "; /* Indicate entry viewed*/
        else
          PKYREC.PKYORACT[PK0BWIXA] = "V"; /* Indicate entry viewed*/
        end
      end
    end

    if (EPAREC.PK1CUOID[PK0BWIXA] > 0)
      if (EPAREC.EPAORACT[PK0BWIXA] != "S"
       && EPAREC.EPAORACT[PK0BWIXA] != "V")
             /* next sentence*/
      else
        if (EPAREC.EPAORACT[PK0BWIXA] == "V"
         && PKWREC.PKWFRMAP != " ")
                   /* next sentence*/
        else
          PK0BW01.PK0BWSWF = "Y"; /* Indicate order number found*/
          PK0BW02.PK1CUOID = EPAREC.PK1CUOID[PK0BWIXA];
          PK0BW02.PK1NORID = EPAREC.PK1NORID[PK0BWIXA];
          PK0BW02.PK1ALLNB = EPAREC.PK1ALLNB[PK0BWIXA];
          PK0BW02.PK1PKSCH = EPAREC.PK1PKSCH[PK0BWIXA];
          if (EPAREC.EPAORACT[PK0BWIXA] == "V")
            EPAREC.EPAORACT[PK0BWIXA] = "  ";
          else
            EPAREC.EPAORACT[PK0BWIXA] = "V";
          end
        end
      end
    end
  end

  PK0BW01.PK0BWIXA = PK0BW01.PK0BWIXA + 1; /* Increment array index*/


end // end PK0B511

Function PK0B515()
   /* --------------------------------------------------------------*/
   /* Select the specified order from the Picking Mirror Order Pool*/
   /* If not found, indicate not on file to the user.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* Save the data that was obtained to format the display.*/
   /* --------------------------------------------------------------*/

  PK0BW01.PK0BW-DCMS-SEL-FL = "N";

  VMPOLH01.XWH-WHSE-CD = PK0BW01.XWHCD;
  VMPOLH01.PK-ORD-STKTF-ID = PK0BW02.PK1CUOID;
  VMPOLH01.PK-NIKE-ORD-ID = PK0BW02.PK1NORID;
  VMPOLH01.PK-NBR-TIMES-ALOC = PK0BW02.PK1ALLNB;

  EPIREC.EPI-IO-TASK = "S  ";
  call "VMPOLH01" (EPIREC, SQLCA, VMPOLH01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 100) /* No order header was found*/
    PK0BW01.PK0BWSWF = "N";

      /* COMMENT OUT THE FOLLOWING UNTIL FULL CONVERSION*/

      /* SET PK0BM002.PK1CUOID CURSOR,MODIFIED,BRIGHT;*/
      /* SET PK0BM002.PK1NORID MODIFIED,BRIGHT;*/
      /* MOVE 11 TO EZEMNO;*/
      /* MOVE 'pK0B515'  TO PK0BM002.XXXERRID;*/

    return;
  end

  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28);
      TA1REC.TA1FUNC = "POST";
    else
      converseLib.validationFailed(29);
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1PGMNM = "PK0B515";
    TA1REC.TA1LOC = "OBTAIN MIRROR POOL HEADER";
    TA1REC.TA1MAP = "PK0BM002";
    TA1REC.TA1DBASE = "DPICK";
    TA1REC.TA1TBLVU = "VMPOLH01";
    TA1REC.TA1TBLKE = VMPOLH01.VMPOLH01-KEY;

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};

    PK0BM002.XXXERRID = "PK0B515";

    return;
  end

  PK0BW01.PK0BW-DCMS-SEL-FL = "Y";

  PK0BW02.KUCCOID = VMPOLH01.CU-CO-ID; /* Company Id*/
  PK0BW02.KUMSTRID = VMPOLH01.CU-STOR-ID; /* Store*/
  PK0BW02.OP1CUPO = VMPOLH01.OP-CUST-PO; /* Cust PO*/
  PK0BW02.XNXCD = VMPOLH01.XNX-DEPT-ID-XREF; /* Dept. Id*/
  PK0BW02.PK-IVC-REQ-FL = VMPOLH01.PK-IVC-REQ-FL;
  PK0BW02.DCMS-ERROR-FL = VMPOLH01.DCMS-ERROR-FL;
  PK0BW02.SR1PKSDT = VMPOLH01.DCMS-STAT-CHNG-DT;

  if (VMPOLH01.DCMS-ORD-STAT-CD == "A")
    PK0BW02.PK0BMDTL = "PASSED ";
  else
    if (VMPOLH01.DCMS-ORD-STAT-CD == "R")
      PK0BW02.PK0BMDTL = "RELEASED";
    else
      if (VMPOLH01.DCMS-ORD-STAT-CD == "S")
        PK0BW02.PK0BMDTL = "SELECTED ";
      else
        if (VMPOLH01.DCMS-ORD-STAT-CD == "P")
          PK0BW02.PK0BMDTL = "PACK&HOLD";
        else
          if (VMPOLH01.DCMS-ORD-STAT-CD == "D")
            PK0BW02.PK0BMDTL = "DEALLOCATD";
          else
            if (VMPOLH01.DCMS-ERROR-FL == "Y")
              PK0BW02.PK0BMDTL = "IN REVIEW   ";
            else
              PK0BW02.PK0BMDTL = "IN PROCESS";
            end
          end
        end
      end
    end
  end

  PK0BW02.XOTCD = VMPOLH01.XOT-ORD-TYP-CD;
  if (VMPOLH01.XOT-ORD-TYP-CD in XOTTBL.XOTCD)
    PK0BW02.XOTABRV = XOTTBL.XOTABRV[sysVar.arrayIndex];
  end
  PK0BW02.OP1CUNDT = VMPOLH01.OP-CUST-NEED-DT;
  PK0BW02.OP1DSBDT = VMPOLH01.OP-DNT-SHIP-BFR-DT;
  PK0BW02.OP1DSADT = VMPOLH01.OP-DNT-SHIP-AFT-DT;
  PK0BW02.TF1CARCD = VMPOLH01.TF-CARR-CD;
  PK0BW02.SP1ID = VMPOLH01.SP-SPGM-ID;
  PK0BW02.PK4CARSP = VMPOLH01.PK-CARR-SPF-CD;
  if (VMPOLH01.PK-CARR-SPF-CD in PK0BT.PK4CARSP)
    PK0BW02.PK0BMCSD = PK0BT.PK0BMCSD[sysVar.arrayIndex];
  end
  PK0BW02.XPPCD = VMPOLH01.XPP-PICK-PRTY-CD;
  PK0BW02.PK4ORHLD = " ";
  PK0BW02.PK4CUHLD = " ";
  PK0BW02.PK0BWPSF = " ";
  PK0BW02.PKBRELDT = 0;
  PK0BW02.PK9RELDT = 0;
  PK0BW02.OP11TMSF = VMPOLH01.OP-ONETIME-SHIP-FL;
  PK0BW02.PK4STKTF = VMPOLH01.PK-STKTF-FL;
  PK0BW02.XPKCD = VMPOLH01.XPK-PICK-CD;
  PK0BW02.XPACD = VMPOLH01.XPA-CUST-PACK-CD;

  if (VMPOLH01.OP-ONETIME-SHIP-FL == "Y")
    PK0BW02.OP5ALTNM = VMPOLH01.OP-ALT-NM;
    PK0BW02.XXXADDR1 = VMPOLH01.XXX-ADDR1;
    PK0BW02.XXXADDR2 = VMPOLH01.XXX-ADDR2;
    PK0BW02.XXXADDR3 = VMPOLH01.XXX-ADDR3;
    PK0BW02.XXXCITY = VMPOLH01.XXX-CITY;
    PK0BW02.XSTSTCD = VMPOLH01.XST-ST-CD;
    PK0BW02.XXXZIP = VMPOLH01.XXX-ZIP;
  else
    if (VMPOLH01.PK-STKTF-FL == "Y")
      PK6REC.KUCCOID = VMPOLH01.CU-CO-ID;
      PK6REC.KUMSTRID = VMPOLH01.CU-STOR-ID;

      PK0B534();
    else
      PK7REC.KUCCOID = VMPOLH01.CU-CO-ID;
      PK7REC.KULAAID = VMPOLH01.CU-SHGRP-ADDR-ID;
    end
  end

  PK0BW02.OP1SPHDF = VMPOLH01.OP-SPCL-HNDL-FL;
  PK0BW02.OP1SPLBF = VMPOLH01.OP-SPCL-LABL-FL;
  PK0BW02.OP1SPINF = VMPOLH01.OP-SPCL-INST-FL;
  PK0BW02.OP1EXPDF = VMPOLH01.OP-EXPD-FL;
  PK0BW02.PK4OTUNT = VMPOLH01.PK-TOT-ORD-QTY;
   /* MOVE VMPOLH01.PK-TOT-ORD-WT TO PK0BW02.PK4OTWGT;*/
  PK0BW02.PK4OTWGT = 0;

  PK0BW02.PK1BLLAD = 0;
  PK0BW02.PK-BOL-SUB-NBR = 0;
  PK0BW02.TSIPLNBR = 0;
  PK0BW02.SR2SHPCG = 0;


end // end PK0B515

// Obtain picking order
Function PK0B520()
   /* ------------------------------------------------------------*/
   /* Select the specified order from the Picking Order Pool.*/
   /* If not found, indicate not on file to the user.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* Save the data that was obtained to format the display.*/
   /* ------------------------------------------------------------*/

  PK4REC.XWHCD = PK0BW01.XWHCD; /* Warehouse code*/
  PK4REC.PK1CUOID = PK0BW02.PK1CUOID; /* Order number*/
  PK4REC.PK1NORID = PK0BW02.PK1NORID; /* Sub-order number*/

   /* dlvrusa*/

  PK0BW02.GOODS-ISS-FL = "N";

   /* dlvrusa*/

  PWIREC.PWIFUNC = "S ";
  call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 100) /* No order header was found*/

    set PK0BM002.PK1CUOID cursor, modified, bold; /* Highlight order*/
    set PK0BM002.PK1NORID modified, bold; /* Highlight sub-order*/

    PK0BW01.PK0BWSWF = "N"; /* Reset format switch*/

    converseLib.validationFailed(11); /* Indicate order not found*/
    PK0BM002.XXXERRID = "PK0B520 "; /* Error location*/
    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B520 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN ORDER POOL HEADER";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
    TA1REC.TA1TBLKE = PK4REC.PK4GROUP; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B520 "; /* Error location*/
    return; /* Return to previous process*/

  end

  PK0BW02.KUCCOID = PK4REC.KUCCOID; /* Company identification*/
  PK0BW02.KUMSTRID = PK4REC.KUMSTRID; /* Store identification*/
  PK0BW02.OP1CUPO = PK4REC.OP1CUPO; /* Customer purchase order*/
  PK0BW02.XNXCD = PK4REC.XNXCD; /* Department id*/
  PK0BW02.PK-IVC-REQ-FL = PK4REC.PK-IVC-REQ-FL; /* Invoice w/ship*/

  if (PK4REC.PK4PLNDT == 0)
    PK0BW02.PK0BMDTL = "ALLOCATED:"; /* Type of date*/
    PK0BW02.SR1PKSDT = PK4REC.ZZZSDT; /* Status date*/
  else
    PK0BW02.PK0BMDTL = "PLANNED:  "; /* Type of date*/
    PK0BW02.SR1PKSDT = PK4REC.PK4PLNDT; /* Status date*/
  end

  PK0BW02.XOTCD = PK4REC.XOTCD; /* Order type code*/

  if (PK4REC.XOTCD in XOTTBL.XOTCD)
    PK0BW02.XOTABRV = XOTTBL.XOTABRV[sysVar.arrayIndex];
  end

  PK0BW02.OP1CUNDT = PK4REC.OP1CUNDT; /* Customer need date*/
  PK0BW02.OP1DSBDT = PK4REC.OP1DSBDT; /* Don't ship before date*/
  PK0BW02.OP1DSADT = PK4REC.OP1DSADT; /* Don't ship after date*/

  PK0BW02.TF1CARCD = PK4REC.TF1CARCD; /* Carrier code*/
  PK0BW02.SP1ID = PK4REC.SP1ID; /* Sales program identification*/

  PK0BW02.PK4CARSP = PK4REC.PK4CARSP; /* carrier determination*/
  if (PK4REC.PK4CARSP in PK0BT.PK4CARSP)
    PK0BW02.PK0BMCSD = PK0BT.PK0BMCSD[sysVar.arrayIndex];
  end

  PK0BW02.XPPCD = PK4REC.XPPCD; /* Picking priority*/
  PK0BW02.PK4ORHLD = PK4REC.PK4ORHLD; /* order hold flag*/
  PK0BW02.PK4CUHLD = PK4REC.PK4CUHLD; /* customer hold flag*/

  if (PK4REC.PK4ORHLD == "Y") /* if order on hold*/
    PK0B521(); /* Get release date for order*/
  end

  if (PK4REC.PK4CUHLD == "Y") /* or customer on hold*/
    PK0B522(); /* Get release date for customer*/
  end

  PK0BW02.OP11TMSF = PK4REC.OP11TMSF; /* One-time ship-to flag*/
  PK0BW02.PK4STKTF = PK4REC.PK4STKTF; /* Stock transfer flag*/
  PK0BW02.XPKCD = PK4REC.XPKCD; /* Picking code*/
  PK0BW02.XPACD = PK4REC.XPACD; /* Special Packing code*/

  if (PK4REC.OP11TMSF == "Y") /* One-time ship-to address*/

    PK0BW02.OP5ALTNM = PK4REC.OP5ALTNM; /* Ship-to name*/
    PK0BW02.XXXADDR1 = PK4REC.XXX-ADDR1; /* Ship-to address line 1*/
    PK0BW02.XXXADDR2 = PK4REC.XXX-ADDR2; /* Ship-to address line 2*/
    PK0BW02.XXXADDR3 = PK4REC.XXX-ADDR3; /* Ship-to address line 3*/
    PK0BW02.XXXCITY = PK4REC.XXXCITY; /* Ship-to city*/
    PK0BW02.XSTSTCD = PK4REC.XSTSTCD; /* Ship-to state code*/
    PK0BW02.XXXZIP = PK4REC.XXXZIP; /* Ship-to zip code*/

  else

    if (PK4REC.PK4STKTF == "Y") /* Stock transfer*/

      PK6REC.KUCCOID = PK4REC.KUCCOID; /* Company identification*/
      PK6REC.KUMSTRID = PK4REC.KUMSTRID; /* Store identification*/

      PK0B534(); /* Obtain address identification*/

    else

      PK7REC.KUCCOID = PK4REC.KUCCOID; /* Company identification*/
      PK7REC.KULAAID = PK4REC.KUMSHAID; /* Address identification*/

    end

  end

  PK0BW02.OP1SPHDF = PK4REC.OP1SPHDF; /* Special handling*/
  PK0BW02.OP1SPLBF = PK4REC.OP1SPLBF; /* Special labels*/
  PK0BW02.OP1SPINF = PK4REC.OP1SPINF; /* Special instructions*/
  PK0BW02.OP1EXPDF = PK4REC.OP1EXPDF; /* Expedite flag*/

  PK0BW02.PK4OTUNT = PK4REC.PK4OTUNT; /* Total units*/
  PK0BW02.PK4OTWGT = PK4REC.PK4OTWGT; /* total weight*/

  PK0BW02.PK1BLLAD = 0; /* Bol#*/
  PK0BW02.PK-BOL-SUB-NBR = 0; /* Bol Sub#*/
  PK0BW02.TSIPLNBR = 0; /* Packing list#*/
  PK0BW02.SR2SHPCG = 0; /* Shipping charges*/


end // end PK0B520

// Check order hold data
Function PK0B521()
   /* ------------------------------------------------------------*/
   /* Set cursor - Dpick.Vorhld01*/
   /* ------------------------------------------------------------*/

  PK0BS10(); /* Set cursor*/

  PK0BW01.PK0BWSC2 = " "; /* clear cursor switch*/

   /* ------------------------------------------------------------*/
   /* Fetch next row and validate the release date*/
   /* ------------------------------------------------------------*/

  while (PK0BW01.PK0BWSC2 == " ") /* Until end of cursor*/

    PK0BS11(); /* Check order hold data*/

  end

   /* ------------------------------------------------------------*/
   /* Close cursor*/
   /* ------------------------------------------------------------*/

  PK0BS12(); /* Close cursor*/


end // end PK0B521

// Select the Dpick.Vcuhld01 row
Function PK0B522()
   /* ------------------------------------------------------------*/
   /* Set the cursor - Dpick.Vcuhld01*/
   /* ------------------------------------------------------------*/

  PK0BS20(); /* Set cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch next row and check dates til end of cursor.*/
   /* ------------------------------------------------------------*/

  PK0BW01.PK0BWSC2 = " "; /* Clear cursor switch*/

  while (PK0BW01.PK0BWSC2 == " ") /* Til end of cursor*/

    PK0BS21(); /* fetch next row*/

  end

   /* ------------------------------------------------------------*/
   /* Close cursor*/
   /* ------------------------------------------------------------*/

  PK0BS22(); /* Close cursor*/


end // end PK0B522

// Obtain shipping order
Function PK0B530()
   /* ------------------------------------------------------------*/
   /* Obtain the order data from Shipping/Receiving Orders.*/
   /* Obtain the schedule data from Shipping/Receiving Header.*/
   /* Save the data that was obtained to format the display.*/
   /* ------------------------------------------------------------*/

  PK0B531(); /* Obtain order header*/
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    return; /* Return to previous process*/
  end

  PK0B532(); /* Obtain schedule header*/
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    return; /* Return to previous process*/
  end

  PK0BW02.TF2PRONO = SR2REC.TF2PRONO; /* Save pro number*/

  if (SR2REC.SR1PKSFL == "N" /* Order not picked*/
   && SR1REC.SR1PKSFL == "Y" /* but schedule is picked*/
   && SR1REC.SR1PKAFL == "Y") /* and has not been processed*/
    SR2REC.SR1PKSFL = "Y"; /* Indicate order picked*/
    SR2REC.SR1PKSDT = SR1REC.SR1PKSDT; /* Pick status date*/
  end


  if (SR1REC.SR1BTST == "P" /* If prepared or*/
   || SR1REC.SR1BTST == "B" /* balanced or*/
   || SR1REC.SR1BTST == "R") /* released*/
    PK0BW02.PK0BMDTL = "  SHIPPED:"; /* Type of status*/
    PK0BW02.SR1PKSDT = SR1REC.SR1SHPDT; /* Ship date*/

    /* Batch status is 'B'alanced, but voided in DCMS*/

    if (PK0BW01.XWHCD == "51"
     && SR1REC.TF1CARNM == "DCMS"
     && SR2REC.SR-STOP-ORD-SHP-FL == "Y")
      PK0BW02.PK0BMDTL = "   VOIDED:"; /* Type of status*/
      PK0BW02.SR1PKSDT = SR1REC.SR1PKSDT; /* pick date*/
    end

  else
    if (PK0BW01.XWHCD == "51"
     && SR1REC.TF1CARNM == "DCMS") /* Order processed by DCMS*/

      PK0BW02.SR1PKSDT = SR1REC.SR1PKSDT; /* pick date*/
      if (SR2REC.SR-STOP-ORD-SHP-FL == "Y")
        PK0BW02.PK0BMDTL = "   VOIDED:"; /* Type of status*/
      else
        if (SR1REC.SR1SHPDT == 0) /* Shipped, but not Billed*/
          PK0BW02.PK0BMDTL = "      SNB:"; /* Type of status*/
        else
          PK0BW02.PK0BMDTL = "  SHIPPED:"; /* Type of status*/
          PK0BW02.SR1PKSDT = SR1REC.SR1SHPDT; /* Ship date*/
        end
      end

    else
      if (SR2REC.SR1PKSFL == "Y") /* Picked status*/
        PK0BW02.PK0BMDTL = "   PICKED:"; /* Type of date*/
        PK0BW02.SR1PKSDT = SR2REC.SR1PKSDT; /* Status date*/
      else
        PK0BW02.PK0BMDTL = "SCHEDULED:"; /* Type of date*/
        PK0BW02.SR1PKSDT = SR2REC.ZZZSDT; /* Setup date*/
      end
    end
  end

  PK0BW02.KUCCOID = SR2REC.KUCCOID; /* Company identification*/
  PK0BW02.KUMSTRID = SR2REC.KUMSTRID; /* Store identification*/
  PK0BW02.XNXCD = SR2REC.XNXCD; /* Department id*/
  PK0BW02.OP1CUPO = SR2REC.OP1CUPO; /* Customer purchase order*/
  PK0BW02.XOTCD = SR2REC.XOTCD; /* Order type code*/
  if (SR2REC.XOTCD in XOTTBL.XOTCD)
    PK0BW02.XOTABRV = XOTTBL.XOTABRV[sysVar.arrayIndex];
  end

  PK0BW02.OP1CUNDT = SR2REC.OP1CUNDT; /* Customer need date*/
  PK0BW02.OP1DSBDT = SR2REC.OP1DSBDT; /* Don't ship before date*/
  PK0BW02.OP1DSADT = SR2REC.OP1DSADT; /* Don't ship after date*/
  PK0BW02.TF1CARCD = SR2REC.TF1CARCD; /* Carrier code*/
  PK0BW02.SP1ID = SR2REC.SP1ID; /* Sales program identification*/
  PK0BW02.PK4CARSP = SR2REC.PK4CARSP; /* carrier determination*/
  if (SR2REC.PK4CARSP in PK0BT.PK4CARSP)
    PK0BW02.PK0BMCSD = PK0BT.PK0BMCSD[sysVar.arrayIndex];
  end

  PK0BW02.XPPCD = SR2REC.XPPCD; /* Picking priority*/
  PK0BW02.OP11TMSF = SR2REC.OP11TMSF; /* One-time ship-to flag*/
  PK0BW02.PK4STKTF = SR2REC.SR2STKTF; /* Stock transfer flag*/
  PK0BW02.SR2TOTCF = SR2REC.SR2TOTCF; /* total cubic feet for ord*/

         /* PRM (11/11/87) add code to use shiprec address id*/
                        /* to get address from picking when*/
                        /* group ship address code ne '1'*/
                        /* and group ship address code ne '2'*/
                        /* and not One-time ship-to address*/
                            /* get address id from pk store tbl.*/

  if (SR2REC.OP11TMSF == "Y" /* One-time ship-to address*/
   || SR2REC.SR2SHPCD == "2") /* or address override in shipping*/
    if (SR2REC.SR2BLLSU != 99) /* Not split BOL*/

      PK0B533(); /* Obtain shipping address*/
    end
  else

    if (SR2REC.SR2SHPCD == "1")
      PK7REC.KUCCOID = SR2REC.KUCCOID; /* Company identification*/
      PK7REC.KULAAID = SR2REC.KUMSHAID; /* Address identification*/
    else
      PK6REC.KUCCOID = SR2REC.KUCCOID; /* Company identification*/
      PK6REC.KUMSTRID = SR2REC.KUMSTRID; /* Store identification*/

      PK0B534(); /* Get address id from pk store tbl*/
    end
  end

  PK0BW02.OP1SPHDF = SR2REC.OP1SPHDF; /* Special handling*/
  PK0BW02.OP1SPLBF = SR2REC.OP1SPLBF; /* Special labels*/
  PK0BW02.OP1SPINF = SR2REC.OP1SPINF; /* Special instructions*/
  PK0BW02.PK4OTUNT = SR2REC.SR2QTYSH; /* Quantity shipped*/
  PK0BW02.PK4OTWGT = SR2REC.PK1WT;
  PK0BW02.SR2TOTCF = SR2REC.SR2TOTCF;
  PK0BW02.PK1BLLAD = SR2REC.PK1BLLAD; /* Bol#*/
  PK0BW02.PK-BOL-SUB-NBR = SR2REC.SR2BLLSU; /* Bol#*/
  PK0BW02.TSIPLNBR = SR2REC.TSIPLNBR; /* Packing list#*/


  if (PK0BW01.XWHCD == "51"
   && SR1REC.TF1CARNM == "DCMS")
    PK0BW02.SR2SHPCG = SR2REC.SR2SHPCG; /* Shipping charges*/
  else
    if (PK0BW01.XWHCD in XWHTBL.XWHCD)
      if (XWHTBL.XWTCD[sysVar.arrayIndex] == "01"
       && XWHTBL.XWHSTKLF[sysVar.arrayIndex] == "Y")
        PK0BS604(); /* select azcit & get azhdr*/
        if (SR2REC.SR2BLLSU == 99)
          PK0B606(); /* pop-up menu to select bol-sub*/
                        /* and move values to azhdr for select*/
          PK0BS602(); /* select new VAZHDR01*/
        end

        PK0BS608(); /* get sums on VAZCTN01*/
        PK0BS611(); /* read first carton to get packing list*/
                                   /* number*/
        PK0BW02.TSIPLNBR = VAZCTN01.TS-NIKE-PL-NBR; /* Packing List*/
        PK0BW02.PK-BOL-SUB-NBR = VAZHDR01.PK-BOL-SUB-NBR;
        PK0BW02.TF1CARCD = VAZHDR01.TF-CARR-CD;
        PK0BW02.TF2PRONO = VAZHDR01.TF-PRO-NBR; /* Save pro number*/
        PK0BW02.PK4CARSP = VAZHDR01.PK-CARR-SPF-CD; /* carrier determ*/
        PK0BW02.SR2SHPCG = AZFREC.PK-CRTN-CHARGE-AMT;
        PK0BW02.PK4OTUNT = AZFREC.IO-TOT-PK-CRTN-UNIT-QTY;

        if ((SR2REC.OP11TMSF == "Y" /* One-time ship-to address*/
         || SR2REC.SR2SHPCD == "2") /* or address override in shipping*/
         && SR2REC.SR2BLLSU == 99) 

          PK0BS610(); /* get co nm from dpick.vsplhd01*/
          if (SQLCA.VAGen_SQLCODE == 0)
            PK0BW02.OP5ALTNM = PWOREC.KUCCONM; /* Ship-to name*/
          else
            PK0BW02.OP5ALTNM = " ";
          end
          PK0BW02.XXXADDR1 = VAZHDR01.XXX-ADDR1; /* Ship-to addr line 1*/
          PK0BW02.XXXADDR2 = VAZHDR01.XXX-ADDR2; /* Ship-to addr line 2*/
          PK0BW02.XXXADDR3 = VAZHDR01.XXX-ADDR3; /* Ship-to addr line 3*/
          PK0BW02.XXXCITY = VAZHDR01.XXX-CITY; /* Ship-to city*/
          PK0BW02.XSTSTCD = VAZHDR01.XST-ST-CD; /* Ship-to state code*/
          PK0BW02.XXXZIP = VAZHDR01.XXX-ZIP; /* Ship-to zip code*/
        end

        PK0B607(); /* get vspbol01 row*/
        if (SQLCA.VAGen_SQLCODE == 0
         && VSPBOL01.PK-WEIGHT > 0
         && VSPBOL01.SR-SHP-CHG > 0)
          PK0BW02.PK4OTWGT = VSPBOL01.PK-WEIGHT;
          PK0BW02.SR2SHPCG = VSPBOL01.SR-SHP-CHG;
        else
          if (VAZHDR01.AZ-ASN-STAT-CD == "NS")
            PK0B535();
            PK0BW02.PK4OTWGT = PK0BW01.PK0BW-EXPC-TOT-ORD-WT;
          else
            PK0BW02.PK4OTWGT = AZFREC.IO-TOT-PK-ACTL-CRTN-WT;
          end
          PK0BW02.SR2SHPCG = SR2REC.SR2SHPCG; /* Shipping charges*/
        end
      end
    end
  end


end // end PK0B530

// Obtain order header
Function PK0B531()
   /* ------------------------------------------------------------*/
   /* Select the specified order from Shipping/Receiving Orders.*/
   /* If not found, indicate not on file to the user.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  SR2REC.XWHCD = PK0BW01.XWHCD; /* Warehouse code*/
  SR2REC.OP1CUOID = PK0BW02.PK1CUOID; /* Order number*/
  SR2REC.OP1NORID = PK0BW02.PK1NORID; /* Sub-order number*/
  SR2REC.PK1PKSCH = PK0BW02.PK1PKSCH; /* Schedule number*/

  call "IO0800" ("S ", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 100) /* No order header was found*/

    set PK0BM002.PK1CUOID cursor, modified, bold; /* Highlight order*/
    set PK0BM002.PK1NORID modified, bold; /* Highlight sub-order*/
    set PK0BM002.PK1PKSCH modified, bold; /* Highlight schedule*/

    converseLib.validationFailed(11); /* Indicate order not found*/
    PK0BM002.XXXERRID = "PK0B531 "; /* Error location*/
    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B531 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN SHIP/REC ORDER";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
    TA1REC.TA1TBLKE = SR2REC.SR2KEYS; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B531 "; /* Error location*/
    return; /* Return to previous process*/

  end
   /* dlvrusa*/

  PK0BW02.GOODS-ISS-FL = SR2REC.SR2UIVCF;

   /* dlvrusa*/



end // end PK0B531

// Obtain shipping header
Function PK0B532()
   /* ------------------------------------------------------------*/
   /* Obtain the shipping header record for the schedule.*/
   /* ------------------------------------------------------------*/

  SR1REC.XWHCD = PK0BW01.XWHCD; /* Warehouse code*/
  SR1REC.PK1PKSCH = PK0BW02.PK1PKSCH; /* Schedule*/

  call "IO0790" ("S ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B532 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN SHIP/REC HEADER TABLE ROW";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRHDR01"; /* Table view name*/
    TA1REC.TA1TBLKE = SR1REC.SR1KEYS; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B532"; /* Error location*/
    return; /* Return to previous process*/

  end


end // end PK0B532

// Obtain shipping address
Function PK0B533()
   /* ------------------------------------------------------------*/
   /* Obtain the order address from Shipping/Receiving Address.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  SR4REC.XWHCD = SR2REC.XWHCD; /* Warehouse code*/
  SR4REC.PK1BLLAD = SR2REC.PK1BLLAD; /* bill of lading*/
  SR4REC.SR2BLLSU = SR2REC.SR2BLLSU; /* bill of lading sub*/

  call "IO0820" ("S ", SQLCA, SR4REC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B533 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN ADDRESS NEW WAY ";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRADD01"; /* Table view name*/
    TA1REC.TA1TBLKE = SR4REC.SR4KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B533 "; /* Error location*/
    return; /* Return to previous process*/

  end

  PK0BW02.OP5ALTNM = SR4REC.OP5ALTNM; /* Ship-to name*/
  PK0BW02.XXXADDR1 = SR4REC.XXX-ADDR[1]; /* Ship-to address line 1*/
  PK0BW02.XXXADDR2 = SR4REC.XXX-ADDR[2]; /* Ship-to address line 2*/
  PK0BW02.XXXADDR3 = SR4REC.XXX-ADDR[3]; /* Ship-to address line 3*/
  PK0BW02.XXXCITY = SR4REC.XXXCITY; /* Ship-to city*/
  PK0BW02.XSTSTCD = SR4REC.XSTCD; /* Ship-to state code*/
  PK0BW02.XXXZIP = SR4REC.XXXZIP; /* Ship-to zip code*/


end // end PK0B533

// Obtain address identification
Function PK0B534()
   /* ------------------------------------------------------------*/
   /* Obtain the order address identification from the*/
   /* picking store table (VPKCUS01).*/
   /* ------------------------------------------------------------*/

  call "IO1830" ("S ", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
      
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B534 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN STORE ADDRESS ID";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPKCUS01"; /* Table view name*/
    TA1REC.TA1TBLKE = PK6REC.PK6GROUP; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B534 "; /* Error location*/
    return; /* Return to previous process*/

  end

  PK7REC.KUCCOID = PK6REC.KUCCOID; /* Company identification*/
  PK7REC.KULAAID = PK6REC.KUMSHAID; /* Address identification*/


end // end PK0B534

// calculate expected weight
Function PK0B535()
  PK0BS615(); /* declare vsplit01 cursor*/
  PK0BW01.PK0BW-EXPC-TOT-ORD-WT = 0;
  PK0BW01.PK0BW-PREV-CRTN-NBR = 0;
  PK0BS616(); /* fetch first vsplit01 row*/

  while (SQLCA.VAGen_SQLCODE == 0)
    if (PWPREC.PKDNCSQN == PK0BW01.PK0BW-PREV-CRTN-NBR)

    else
      PK0BW01.PK0BW-EXPC-TOT-ORD-WT = PK0BW01.PK0BW-EXPC-TOT-ORD-WT                    + PWPREC.PK-EXPC-CRTN-WT;
      PK0BW01.PK0BW-PREV-CRTN-NBR = PWPREC.PKDNCSQN;
    end
    PK0BS616(); /* fetch next vsplit01 row*/
  end

  PK0BS617(); /* close vsplit01 cursor*/

end // end PK0B535

// Obtain customer store name
Function PK0B540()
   /* ------------------------------------------------------------*/
   /* Obtain the Customer Store Table row for the specified*/
   /* customer number.  If not available, return an error message*/
   /* message to the user.  If any other error, indicate a system*/
   /* error.  Format the store name field in the map.*/
   /* Determine whether order is for a PSST customer.*/
   /* ------------------------------------------------------------*/

  PK6REC.KUCCOID = PK0BW02.KUCCOID; /* Company identification*/
  PK6REC.KUMSTRID = PK0BW02.KUMSTRID; /* Store identification*/

  call "IO1830" ("S ", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B540 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN CUSTOMER STORE TABLE ROW";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPKCUS01"; /* Table view name*/
    TA1REC.TA1TBLKE = PK6REC.PK6GROUP; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B540"; /* Error location*/

    return; /* Return to previous process*/
  end

  PK0BW02.KUMSTRNM = PK6REC.KUMSTRNM; /* Store name*/

  if (PK0BW01.XWHCD == "51")
    PK0BW02.PK0BWPSF = " ";
  else
    PK0B541(); /* Determine whether a PSST*/
  end


end // end PK0B540

// Determine whether a PSST
Function PK0B541()
   /* ------------------------------------------------------------*/
   /* Obtain the Customer PSST Table row for the specified*/
   /* customer number.  If not available, return an error message*/
   /* message to the user.  If any other error, indicate a system*/
   /* error.  Set the PSST indicator flag.*/
   /* ------------------------------------------------------------*/

  PK0BW02.PK0BWPSF = "N"; /* Initialize PSST flag*/

  PKMREC.XWHCD = PK0BW01.XWHCD; /* Warehouse code*/
  PKMREC.KUCCOID = PK0BW02.KUCCOID; /* Company identification*/
  PKMREC.KUMSTRID = PK0BW02.KUMSTRID; /* Store identification*/

  call "IO1850" ("S ", SQLCA, PKMREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Not in table*/
    return; /* Return to previous process*/
  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B541 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN CUSTOMER PSST TABLE ROW";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPKPST01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKMREC.PKMKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B541"; /* Error location*/
    return; /* Return to previous process*/

  end

  if (PKMREC.XXXSTAT == "A") /* Active PSST customer*/
    PK0BW02.PK0BWPSF = "Y"; /* Indicate PSST*/
  end


end // end PK0B541

// Obtain carrier name
Function PK0B550()
   /* ------------------------------------------------------------*/
   /* Obtain the Picking Carrier Table row for the specified*/
   /* carrier code.  If not available, return an error message*/
   /* to the user.  If any other error, indicate a system error.*/
   /* Format the carrier name field in the map.*/
   /* ------------------------------------------------------------*/

  TF1REC.TF1CARCD = PK0BW02.TF1CARCD; /* Carrier code*/

  call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B550 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN CARRIER TABLE ROW";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCARR001"; /* Table view name*/
    TA1REC.TA1TBLKE = TF1REC.TF1KEYS; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B550"; /* Error location*/
    return; /* Return to previous process*/

  end

  PK0BW02.TF1CARNM = TF1REC.TF1CARNM; /* Carrier name*/


end // end PK0B550

// Obtain program description
Function PK0B560()
   /* ------------------------------------------------------------*/
   /* Obtain the Sales Program Description Table row for the*/
   /* specified program number.  If not available, return an*/
   /* error message to the user.  If any other error, indicate*/
   /* a system error.  Format the description in the map.*/
   /* ------------------------------------------------------------*/

  SP1REC.SP1ID = PK0BW02.SP1ID; /* Program identification*/

  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B560 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN SALES PROGRAM TABLE ROW";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DSPGM   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSPGM001"; /* Table view name*/
    TA1REC.TA1TBLKE = SP1REC.SP1KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B560"; /* Error location*/
    return; /* Return to previous process*/

  end

  PK0BW02.SP1NM = SP1REC.SP1NM; /* Program description*/


end // end PK0B560

// Obtain ship-to address
Function PK0B570()
   /* ------------------------------------------------------------*/
   /* Obtain the Customer Address Table row for the specified*/
   /* customer and address identification.  If not available,*/
   /* return an error message to the user.  If any other error,*/
   /* indicate system error.  Format address fields in the map.*/
   /* ------------------------------------------------------------*/

  call "IO2000" ("S ", SQLCA, PK7REC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B570 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN CUSTOMER ADDRESS ROW";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPKADR01"; /* Table view name*/
    TA1REC.TA1TBLKE = PK7REC.PK7GROUP; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B570"; /* Error location*/
    return; /* Return to previous process*/

  end

  PK0BW02.OP5ALTNM = PK0BW02.KUMSTRNM; /* Ship-to name*/
  PK0BW02.XXXADDR1 = PK7REC.XXX-ADDR1; /* Address line 1*/
  PK0BW02.XXXADDR2 = PK7REC.XXX-ADDR2; /* Address line 2*/
  PK0BW02.XXXADDR3 = PK7REC.XXX-ADDR3; /* Address line 3*/
  PK0BW02.XXXCITY = PK7REC.XXXCITY; /* City*/
  PK0BW02.XSTSTCD = PK7REC.XSTSTCD; /* State code*/
  PK0BW02.XXXZIP = PK7REC.XXXZIP; /* Zip code*/


end // end PK0B570

// Lookup for cust 'self' dept #
Function PK0B575()
   /* ------------------------------------------------------------*/
   /* This module was called because the 'self' store and/or dept*/
   /* fields are still blank after calls to the pool or shiprec*/
   /* (depending on where the order was found).*/
   /*  */
   /* It will look at dcust.vdept001 hoping to find a customer's*/
   /* 'self' department number.  The customer's 'self' store*/
   /* number is not found on this table, and will not get formatted*/
   /* at this point if it hasn't already been found.*/
   /* ------------------------------------------------------------*/

  set KUJREC empty;
  KUJREC.KUCCOID = PK0BW02.KUCCOID; /* customer company number*/
  KUJREC.XNXCD = PK0BW02.XNXCD; /* customer department nbr*/

  call "IO0290" ("S ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 100) /* No order header was found*/

    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B575 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN CUST -SELF- DEPT#";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DCUST   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VDEPT001"; /* Table view name*/
    TA1REC.TA1TBLKE = KUJREC.KUJGRP; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B575 "; /* Error location*/
    return; /* Return to previous process*/

  end

  if (KUJREC.KUJSLFID != " ") /* 'self' dept id found*/
    PK0BW02.CU-DEPT-SELF-ID = KUJREC.KUJSLFID;
  end

end // end PK0B575

// Obtain packing/handling
Function PK0B580()
   /* ------------------------------------------------------------*/
   /* Select the set of order line items for the current order.*/
   /* Fetch until all packing/handling instruction codes are*/
   /* non-blank or end of line items.  Close the selected set.*/
   /* Obtain the descriptions for the packing/handling codes.*/
   /* ------------------------------------------------------------*/

  if (PK0BW02.PK1PKSCH == 0) /* No schedule number*/

    PK0B581(); /* Select picking line items*/

    if (converseVar.validationMsgNum == 0) /* No errors were found*/

      while (SQLCA.VAGen_SQLCODE == 0 /* Until any non-zero sqlcode*/
       && PK0BW02.XHDCD[1] == " ") /* or handling code found*/
        PK0B582(); /* Fetch picking line items*/
      end

    end

    if (converseVar.validationMsgNum == 0) /* No errors were found*/
      PK0B583(); /* Close picking items set*/
    end

  else

    PK0B584(); /* Select shipping line items*/

    if (converseVar.validationMsgNum == 0) /* No errors were found*/

      while (SQLCA.VAGen_SQLCODE == 0 /* Until any non-zero sqlcode*/
       && PK0BW02.XHDCD[1] == " ") /* or handling code found*/
        PK0B585(); /* Fetch shipping line items*/
      end

    end

    if (converseVar.validationMsgNum == 0) /* No errors were found*/
      PK0B586(); /* Close shipping items set*/
    end

  end

  if (converseVar.validationMsgNum == 0) /* No errors were found*/

    if (PK0BW02.XHDCD[1] != " ") /* Packing/handling code 1*/
      if (PK0BW02.XHDKEY[1] in XHDTBL.XHDKEY)
        PK0BW02.XHDDESC[1] = XHDTBL.XHDDESC[sysVar.arrayIndex];
      end
    end

    if (PK0BW02.XHDCD[2] != " ") /* Packing/handling code 2*/
      if (PK0BW02.XHDKEY[2] in XHDTBL.XHDKEY)
        PK0BW02.XHDDESC[2] = XHDTBL.XHDDESC[sysVar.arrayIndex];
      end
    end

    if (PK0BW02.XHDCD[3] != " ") /* Packing/handling code 3*/
      if (PK0BW02.XHDKEY[3] in XHDTBL.XHDKEY)
        PK0BW02.XHDDESC[3] = XHDTBL.XHDDESC[sysVar.arrayIndex];
      end
    end

    if (PK0BW02.XHDCD[4] != " ") /* Packing/handling code 4*/
      if (PK0BW02.XHDKEY[4] in XHDTBL.XHDKEY)
        PK0BW02.XHDDESC[4] = XHDTBL.XHDDESC[sysVar.arrayIndex];
      end
    end

    if (PK0BW02.XHDCD[5] != " ") /* Packing/handling code 5*/
      if (PK0BW02.XHDKEY[5] in XHDTBL.XHDKEY)
        PK0BW02.XHDDESC[5] = XHDTBL.XHDDESC[sysVar.arrayIndex];
      end
    end

  end


end // end PK0B580

// Select picking line items
Function PK0B581()
   /* ------------------------------------------------------------*/
   /* Select the set of line items for the specified order number*/
   /* and warehouse from the Picking Order Pool Item Table.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  if (PK0BW01.PK0BW-DCMS-SEL-FL == "Y")
    VMPOLI01.XWH-WHSE-CD = PK0BW01.XWHCD;
    VMPOLI01.PK-ORD-STKTF-ID = PK0BW02.PK1CUOID;
    VMPOLI01.PK-NIKE-ORD-ID = PK0BW02.PK1NORID;
    VMPOLI01.PK-NBR-TIMES-ALOC = PK0BW02.PK1ALLNB;

    call "VMPOLI01" ("S1", SQLCA, VMPOLI01) {isNoRefresh = yes, isExternal = yes};
  else
    PK5REC.XWHCD = PK0BW01.XWHCD; /* Warehouse code*/
    PK5REC.PK1CUOID = PK0BW02.PK1CUOID; /* Order number*/
    PK5REC.PK1NORID = PK0BW02.PK1NORID; /* Sub-order number*/

    call "IO1990" ("S1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/
  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B581 "; /* Process name*/
    TA1REC.TA1LOC = "SELECT ORDER POOL ITEM SET";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    if (PK0BW01.PK0BW-DCMS-SEL-FL == "Y")
      TA1REC.TA1TBLVU = "VMPOLI01"; /* Table view name*/
      TA1REC.TA1TBLKE = VMPOLI01.VMPOLI01-KEY; /* Table key*/
    else
      TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/
      TA1REC.TA1TBLKE = PK5REC.PK5KEY; /* Table key*/
    end

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B581 "; /* Error location*/

    return; /* Return to previous process*/
  end


end // end PK0B581

// Fetch selected picking items
Function PK0B582()
   /* ------------------------------------------------------------*/
   /* Fetch the next item from the selected order items set.*/
   /* If end of file, return to previous process.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  if (PK0BW01.PK0BW-DCMS-SEL-FL == "Y")

    call "VMPOLI01" ("N1", SQLCA, VMPOLI01) {isNoRefresh = yes, isExternal = yes};

  else

    call "IO1990" ("N1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  end

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    return; /* Return to previous process*/
  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B582 "; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT ORDER POOL ITEM";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    if (PK0BW01.PK0BW-DCMS-SEL-FL == "Y")
      TA1REC.TA1TBLVU = "VMPOLI01";
      TA1REC.TA1TBLKE = VMPOLI01.VMPOLI01-KEY;
    else
      TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/
      TA1REC.TA1TBLKE = PK5REC.PK5KEY;
    end

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B582 "; /* Error location*/

    return; /* Return to previous process*/
  end

  if (PK0BW01.PK0BW-DCMS-SEL-FL == "Y")
    PK0BW02.XGPCD[1] = VMPOLI01.XGP-GPC-CD;
    PK0BW02.XHDCD[1] = VMPOLI01.XHD-HNDL-CD[1];
    PK0BW02.XGPCD[2] = VMPOLI01.XGP-GPC-CD;
    PK0BW02.XHDCD[2] = VMPOLI01.XHD-HNDL-CD[2];
    PK0BW02.XGPCD[3] = VMPOLI01.XGP-GPC-CD;
    PK0BW02.XHDCD[3] = VMPOLI01.XHD-HNDL-CD[3];
    PK0BW02.XGPCD[4] = VMPOLI01.XGP-GPC-CD;
    PK0BW02.XHDCD[4] = VMPOLI01.XHD-HNDL-CD[4];
    PK0BW02.XGPCD[5] = VMPOLI01.XGP-GPC-CD;
    PK0BW02.XHDCD[5] = VMPOLI01.XHD-HNDL-CD[5];
  else
    PK0BW02.XGPCD[1] = PK5REC.XGPCD; /* gpc code 1*/
    PK0BW02.XHDCD[1] = PK5REC.XHDCD[1]; /* Handling code 1*/
    PK0BW02.XGPCD[2] = PK5REC.XGPCD; /* gpc code 2*/
    PK0BW02.XHDCD[2] = PK5REC.XHDCD[2]; /* Handling code 2*/
    PK0BW02.XGPCD[3] = PK5REC.XGPCD; /* gpc code 3*/
    PK0BW02.XHDCD[3] = PK5REC.XHDCD[3]; /* Handling code 3*/
    PK0BW02.XGPCD[4] = PK5REC.XGPCD; /* gpc code 4*/
    PK0BW02.XHDCD[4] = PK5REC.XHDCD[4]; /* Handling code 4*/
    PK0BW02.XGPCD[5] = PK5REC.XGPCD; /* gpc code 5*/
    PK0BW02.XHDCD[5] = PK5REC.XHDCD[5]; /* Handling code 5*/
  end


end // end PK0B582

// Close picking line items set
Function PK0B583()
   /* ------------------------------------------------------------*/
   /* Close the selected Picking Order Pool Items set.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  if (PK0BW01.PK0BW-DCMS-SEL-FL == "Y")

    call "VMPOLI01" ("C1", SQLCA, VMPOLI01) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/
  else

    call "IO1990" ("C1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/
  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B583 "; /* Process name*/
    TA1REC.TA1LOC = "CLOSE ORDER POOL ITEM SET";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    if (PK0BW01.PK0BW-DCMS-SEL-FL == "Y")
      TA1REC.TA1TBLVU = "VMPOLI01"; /* Table view name*/
    else
      TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/
    end

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B583 "; /* Error location*/

    return; /* Return to previous process*/
  end


end // end PK0B583

// Select shipping line items
Function PK0B584()
   /* ------------------------------------------------------------*/
   /* Select the set of line items for the specified order number*/
   /* and warehouse from the Shipping/Receiving Item Table.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  SR3REC.XWHCD = PK0BW01.XWHCD; /* Warehouse code*/
  SR3REC.OP1CUOID = PK0BW02.PK1CUOID; /* Order number*/
  SR3REC.OP1NORID = PK0BW02.PK1NORID; /* Sub-order number*/
  SR3REC.PK1PKSCH = PK0BW02.PK1PKSCH; /* Schedule number*/

  call "SR1100" ("SS", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B584 "; /* Process name*/
    TA1REC.TA1LOC = "SELECT SHIPPING ITEM SET";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRITM01"; /* Table view name*/
    TA1REC.TA1TBLKE = SR3REC.SR3KEYS; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B584 "; /* Error location*/
    return; /* Return to previous process*/

  end


end // end PK0B584

// Fetch selected shipping items
Function PK0B585()
   /* ------------------------------------------------------------*/
   /* Fetch the next item from the selected shipping items set.*/
   /* If end of file, return to previous process.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "SR1100" ("SN", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    return; /* Return to previous process*/
  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B585 "; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT SHIPPING ITEM";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRITM01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B585 "; /* Error location*/
    return; /* Return to previous process*/

  end

  PK0BW02.XHDCD[1] = SR3REC.XHDCD[1]; /* Handling code 1*/
  PK0BW02.XHDCD[2] = SR3REC.XHDCD[2]; /* Handling code 2*/
  PK0BW02.XHDCD[3] = SR3REC.XHDCD[3]; /* Handling code 3*/
  PK0BW02.XHDCD[4] = SR3REC.XHDCD[4]; /* Handling code 4*/
  PK0BW02.XHDCD[5] = SR3REC.XHDCD[5]; /* Handling code 5*/


end // end PK0B585

// Close shipping line items set
Function PK0B586()
   /* ------------------------------------------------------------*/
   /* Close the selected Shipping/Receiving Items set.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "SR1100" ("CS", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B586 "; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SHIPPING ITEM SET";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRITM01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B586 "; /* Error location*/
    return; /* Return to previous process*/

  end


end // end PK0B586

// Obtain labels and instructions
Function PK0B590()
   /* ------------------------------------------------------------*/
   /* Select the set of order text for the current order.*/
   /* Fetch until all instruction lines are filled or end of*/
   /* selected order text.  Close the selected set.*/
   /* ------------------------------------------------------------*/

  PK0BW01.PK0BWIXM = 1; /* Initialize map index*/

  if (PK0BW02.PK1PKSCH == 0) /* No schedule number*/

    PK0B591(); /* Select picking text*/

    if (converseVar.validationMsgNum == 0) /* No errors were found*/

      while (SQLCA.VAGen_SQLCODE == 0) /* Until any non-zero sqlcode*/
        PK0B592(); /* Fetch picking text*/
      end

    end

    if (converseVar.validationMsgNum == 0) /* No errors were found*/
      PK0B593(); /* Close picking text set*/
    end

  else

    PK0B594(); /* Select shipping text*/

    if (converseVar.validationMsgNum == 0) /* No errors were found*/

      while (SQLCA.VAGen_SQLCODE == 0) /* Until any non-zero sqlcode*/
        PK0B595(); /* Fetch shipping text*/
      end

    end

    if (converseVar.validationMsgNum == 0) /* No errors were found*/
      PK0B596(); /* Close shipping text set*/
    end

  end


end // end PK0B590

// Select picking text
Function PK0B591()
   /* ------------------------------------------------------------*/
   /* Select the set of text for the specified order number and*/
   /* warehouse from the Picking Order Pool Text Table.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  if (PK0BW01.PK0BW-DCMS-SEL-FL == "Y")
    VMPOLT01.XWH-WHSE-CD = PK0BW01.XWHCD;
    VMPOLT01.PK-ORD-STKTF-ID = PK0BW02.PK1CUOID;
    VMPOLT01.PK-NIKE-ORD-ID = PK0BW02.PK1NORID;
    VMPOLT01.PK-NBR-TIMES-ALOC = PK0BW02.PK1ALLNB;
    VMPOLT01.OP-TXT-REC-TYP = "*";
    VMPOLT01.XND-NIKE-DEPT-ID = "*";

    call "VMPOLT01" ("S1", SQLCA, VMPOLT01) {isNoRefresh = yes, isExternal = yes};
  else
    PKFREC.XWHCD = PK0BW01.XWHCD; /* Warehouse code*/
    PKFREC.PK1CUOID = PK0BW02.PK1CUOID; /* Order number*/
    PKFREC.PK1NORID = PK0BW02.PK1NORID; /* Sub-order number*/
    PKFREC.OP4TRTYP = "*"; /* Text record type*/
    PKFREC.XNDCD = "*"; /* NIKE department identification*/

    call "IO2010" ("S1", SQLCA, PKFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/
  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B591 "; /* Process name*/
    TA1REC.TA1LOC = "SELECT ORDER POOL TEXT SET";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    if (PK0BW01.PK0BW-DCMS-SEL-FL == "Y")
      TA1REC.TA1TBLVU = "VMPOLT01";
      TA1REC.TA1TBLKE = VMPOLT01.VMPOLT01-KEY;
    else
      TA1REC.TA1TBLVU = "VPOOLT01"; /* Table view name*/
      TA1REC.TA1TBLKE = PKFREC.PKFKEY; /* Table key*/
    end

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B591 "; /* Error location*/

    return; /* Return to previous process*/
  end


end // end PK0B591

// Fetch selected picking text
Function PK0B592()
   /* ------------------------------------------------------------*/
   /* Fetch the next text from the selected order text set.*/
   /* If end of file, return to previous process.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  if (PK0BW01.PK0BW-DCMS-SEL-FL == "Y")

    call "VMPOLT01" ("N1", SQLCA, VMPOLT01) {isNoRefresh = yes, isExternal = yes};
  else

    call "IO2010" ("N1", SQLCA, PKFREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    return; /* Return to previous process*/
  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B592 "; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT ORDER POOL TEXT";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    if (PK0BW01.PK0BW-DCMS-SEL-FL == "Y")
      TA1REC.TA1TBLVU = "VMPOLT01";
      TA1REC.TA1TBLKE = VMPOLT01.VMPOLT01-KEY;
    else
      TA1REC.TA1TBLVU = "VPOOLT01"; /* Table view name*/
      TA1REC.TA1TBLKE = PKFREC.PKFKEY;
    end

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B592 "; /* Error location*/

    return; /* Return to previous process*/
  end


  if (PK0BW01.PK0BW-DCMS-SEL-FL == "Y")

    if (VMPOLT01.OP-TXT-REC-TYP == "L")
      if (PK0BW02.OP4TXT[11] == " ")
        PK0BW02.OP4TXT[11] = VMPOLT01.OP-TXT;
      else
        PK0BW02.OP4TXT[12] = VMPOLT01.OP-TXT;
      end
    else
      if (PK0BW01.PK0BWIXM <= 10)
        PK0BW02.XNDCD[PK0BWIXM] = VMPOLT01.XND-NIKE-DEPT-ID;
        PK0BW02.OP4TXT[PK0BWIXM] = VMPOLT01.OP-TXT;
        PK0BW01.PK0BWIXM = PK0BW01.PK0BWIXM + 1;
      end
    end
  else
    if (PKFREC.OP4TRTYP == "L") /* Special label*/
      if (PK0BW02.OP4TXT[11] == " ") /* First label is blank*/
        PK0BW02.OP4TXT[11] = PKFREC.OP4TXT; /* Save label 1 text*/
      else
        PK0BW02.OP4TXT[12] = PKFREC.OP4TXT; /* Save label 2 text*/
      end
    else
      if (PK0BW01.PK0BWIXM <= 10) /* Display lines not exceeded*/
        PK0BW02.XNDCD[PK0BWIXM] = PKFREC.XNDCD; /* Department code*/
        PK0BW02.OP4TXT[PK0BWIXM] = PKFREC.OP4TXT; /* Special instr*/
        PK0BW01.PK0BWIXM = PK0BW01.PK0BWIXM + 1; /* Increment map index*/
      end
    end
  end


end // end PK0B592

// Close picking text set
Function PK0B593()
   /* ------------------------------------------------------------*/
   /* Close the selected Picking Order Pool Text set.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  if (PK0BW01.PK0BW-DCMS-SEL-FL == "Y")

    call "VMPOLT01" ("C1", SQLCA, VMPOLT01) {isNoRefresh = yes, isExternal = yes};
  else

    call "IO2010" ("C1", SQLCA, PKFREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/
  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B593 "; /* Process name*/
    TA1REC.TA1LOC = "CLOSE ORDER POOL TEXT SET";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    if (PK0BW01.PK0BW-DCMS-SEL-FL == "Y")
      TA1REC.TA1TBLVU = "VMPOLT01";
      TA1REC.TA1TBLKE = VMPOLT01.VMPOLT01-KEY;
    else
      TA1REC.TA1TBLVU = "VPOOLT01"; /* Table view name*/
      TA1REC.TA1TBLKE = PKFREC.PKFKEY; /* Table key*/
    end

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B593 "; /* Error location*/

    return; /* Return to previous process*/
  end


end // end PK0B593

// Select shipping text
Function PK0B594()
   /* ------------------------------------------------------------*/
   /* Select the set of text for the specified order number and*/
   /* warehouse from the Shipping/Receiving Text Table.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  SR9REC.XWHCD = PK0BW01.XWHCD; /* Warehouse code*/
  SR9REC.OP1CUOID = PK0BW02.PK1CUOID; /* Order number*/
  SR9REC.OP1NORID = PK0BW02.PK1NORID; /* Sub-order number*/
  SR9REC.PK1PKSCH = PK0BW02.PK1PKSCH; /* Schedule number*/
  SR9REC.OP4TRTYP = "*"; /* Text record type*/
  SR9REC.XNDCD = "*"; /* NIKE department identification*/

  call "IO2040" ("S1", SQLCA, SR9REC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B594 "; /* Process name*/
    TA1REC.TA1LOC = "SELECT SHIPPING TEXT SET";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRTXT01"; /* Table view name*/
    TA1REC.TA1TBLKE = SR9REC.SR9KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B594 "; /* Error location*/
    return; /* Return to previous process*/

  end


end // end PK0B594

// Fetch selected shipping text
Function PK0B595()
   /* ------------------------------------------------------------*/
   /* Fetch the next item from the selected shipping text set.*/
   /* If end of file, return to previous process.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "IO2040" ("N1", SQLCA, SR9REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    return; /* Return to previous process*/
  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B595 "; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT SHIPPING TEXT";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRTXT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B595 "; /* Error location*/
    return; /* Return to previous process*/

  end

  if (SR9REC.OP4TRTYP == "L") /* Special label*/

    if (PK0BW02.OP4TXT[11] == " ") /* First label is blank*/

      PK0BW02.OP4TXT[11] = SR9REC.OP4TXT; /* Save label 1 text*/
    else
      PK0BW02.OP4TXT[12] = SR9REC.OP4TXT; /* Save label 2 text*/

    end

  else

    if (PK0BW01.PK0BWIXM <= 10) /* Display lines not exceeded*/

      PK0BW02.XNDCD[PK0BWIXM] = SR9REC.XNDCD; /* Department code*/
      PK0BW02.OP4TXT[PK0BWIXM] = SR9REC.OP4TXT;
                                   /* Special instruction*/

      PK0BW01.PK0BWIXM = PK0BW01.PK0BWIXM + 1; /* Increment map index*/

    end

  end


end // end PK0B595

// Close shipping text set
Function PK0B596()
   /* ------------------------------------------------------------*/
   /* Close the selected Shipping/Receiving Text set.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "IO2040" ("C1", SQLCA, SR9REC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B596 "; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SHIPPING TEXT SET";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRTXT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B596 "; /* Error location*/
    return; /* Return to previous process*/

  end


end // end PK0B596

// Determine Asn status
Function PK0B597()
   /* ------------------------------------------------------------*/
   /* Select row from dedi.vedtpr01 and dedi.vetpxm01 table*/
   /* for edi trading partner.*/
   /* ------------------------------------------------------------*/

  PK0B5972(); /* fetch first row only*/

  if (converseVar.validationMsgNum != 0)
    return;
  end

end // end PK0B597

// Determine Asn status
Function PK0B5972()
   /* ------------------------------------------------------------*/
   /* select EDI trading partner from dedi.vedtpr01 and dedi.vetpxm01*/
   /* ------------------------------------------------------------*/

  VETPXM01.EDI-TRN-CD = "02";
  VETPXM01.EDI-TRN-BOUND-CD = "S";
  VEDTPR01.CU-CO-ID = PK0BW02.KUCCOID;

  call "ED1000" ("S ", SQLCA, VETPXM01, VEDTPR01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B5972"; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN ASN STATUS ";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DEDI    "; /* Data base name*/
    TA1REC.TA1TBLVU = "VEDTPR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B5972"; /* Error location*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Display abrv. description of the advance ship notice status*/
   /* ------------------------------------------------------------*/
  if (SQLCA.VAGen_SQLCODE == 0)
    if (VETPXM01.EDI-TRN-STAT-CD == "01" || 
    VETPXM01.EDI-TRN-STAT-CD == "02" || 
    VETPXM01.EDI-TRN-STAT-CD == "03" || 
    VETPXM01.EDI-TRN-STAT-CD == "04" || 
    VETPXM01.EDI-TRN-STAT-CD == "05")

      if (VETPXM01.EDI-TRN-STAT-CD in PK0BT01.EDI-TRN-STAT-CD)
        PK0BW02.PK0BT-ASN-DESC = PK0BT01.PK0BT-ASN-DESC[sysVar.arrayIndex];
      end
    end
  else
    PK0BW02.PK0BT-ASN-DESC = " ";
  end

end // end PK0B5972

// Check for ? by User
Function PK0B606()
   /* ------------------------------------------------------------*/

              /* CHECK FOR BOL SUB 99 then display the screen*/

     /* 1) If the BOL had 99 as sub display the popup window*/
        /* with BOL ans BOL subs and allow him to choose one of*/
        /* them for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (SR2REC.SR2BLLSU == 99) /* if 99 in bol sub code field*/
    XPPK008(); /* perform pop-up window initialize*/

    while (XXPKW02.XXPKWEND == "N") /* until user hits enter*/
      XPPKP01(); /* perform Status code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the GPC        **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

  /* IF XXPKW02.XXPKWPIX GT 0;       /* if user selected a code*/
  /* MOVE PK0BMW01.PK-BOL-SUB-NBR(XXPKWPIX) TO PK0BM002.PK1BLSUB;*/
  /* ELSE;*/
  /* MOVE SR2REC.SR2BLLSU TO PK0BM002.PK1BLSUB; /* clear fields*/
  /* END;*/

    converseLib.clearScreen();
     /* restore the original map*/
    set PK0BM002.PK1CUOID cursor, bold;
  end

end // end PK0B606

// check for vspbol01 row
Function PK0B607()

  VSPBOL01.XWH-WHSE-CD = SR2REC.XWHCD;
  VSPBOL01.PK-PICK-SCHED-NBR = SR2REC.PK1PKSCH;
  VSPBOL01.OP-CUST-ORD-ID = SR2REC.OP1CUOID;
  VSPBOL01.OP-NIKE-ORD-ID = SR2REC.OP1NORID;
  VSPBOL01.PK-BILL-OF-LADING = SR2REC.PK1BLLAD;
  VSPBOL01.PK-BOL-SUB-NBR = PK0BW02.PK-BOL-SUB-NBR;

  call "VSPBOL01" ("S ", SQLCA, VSPBOL01) {isNoRefresh = yes, isExternal = yes}; /* Select table*/

  if (SQLCA.VAGen_SQLCODE == 0 /* row exists*/
   || SQLCA.VAGen_SQLCODE == 100) /* no row exists*/
    return; /* Return to previous process*/
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PK0B607 "; /* Process name*/
  TA1REC.TA1LOC = "GET VSPBOL01 ROW";
  TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRADD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR4REC.SR4KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

  PK0BM002.XXXERRID = "PK0B607 "; /* Error location*/

end // end PK0B607

// Format ord inq key array
Function PK0BS01()
   /* ------------------------------------------------------------*/
   /* Format the array with the key of the displayed order.*/
   /* ------------------------------------------------------------*/

  set PKYREC empty; /* Clear order key array*/
  if (PK0BW02.PK1CUOID == 0)
    PKWREC.PKWINDEX = 0;
    PKWREC.PKWARRAY[1] = PKYREC.PKWARRAY;
    return;
  end
  PKWREC.PKWINDEX = 1;

  PKWREC.PKWSLTYP[PKWINDEX] = "S"; /* Inquiry selection type*/
  PKWREC.PKWFRMAP[PKWINDEX] = "PK0B"; /* Previous application*/

  PKYREC.XWHCD = PK0BW01.XWHCD; /* Save warehouse code*/
  PKYREC.XWHABRV = PK0BW01.XWHABRV; /* and warehouse abbreviation*/
  PKYREC.PKYORACT[1] = "S"; /* Indicate selected*/
  PKYREC.PK1CUOID[1] = PK0BW02.PK1CUOID; /* Order*/
  PKYREC.PK1NORID[1] = PK0BW02.PK1NORID; /* Sub-order*/
  PKYREC.PK1PKSCH[1] = PK0BW02.PK1PKSCH; /* Schedule*/

  PKWREC.PKWARRAY[PKWINDEX] = PKYREC.PKWARRAY; /* Inquiry keys array*/


  set EPAREC empty; /* Reset Mirror pool*/
  EPAREC.XWHCD = PK0BW01.XWHCD; /* Save warehouse code*/
  EPAREC.XWHABRV = PK0BW01.XWHABRV; /* and warehouse abbreviation*/
  EPAREC.EPAORACT[1] = "S"; /* Indicate selected*/
  EPAREC.PK1CUOID[1] = PK0BW02.PK1CUOID; /* Order*/
  EPAREC.PK1NORID[1] = PK0BW02.PK1NORID; /* Sub-order*/
  EPAREC.PK1ALLNB[1] = PK0BW02.PK1ALLNB; /* Aloc-nbr*/
  EPAREC.PK1PKSCH[1] = PK0BW02.PK1PKSCH; /* Schedule*/

  COMMAREA.CA-USER-WORKAREA-2K-B = EPAREC.EPAARRAY;


end // end PK0BS01

// Format the map heading areas
Function PK0BS02()
   /* ------------------------------------------------------------*/
   /* Format the map heading areas.*/
   /* ------------------------------------------------------------*/

  PK0BW01.PK0BWMAP = "M002"; /* Indicate current display*/

  if (converseVar.validationMsgNum == 0) /* No errors to display*/
    set PK0BM002 initial; /* Clear map storage area*/
  end

  if (PK0BW01.XWHCD == "51"
   || COMMAREA.XWHCD == "51")
    set PK0BM002.PK0BMALP skip;
    set PK0BM002.PK1ALLNB normal;
    PK0BM002.PK0BM-SCHED-ID-LIT = "MANIFEST ID:";
  else
    set PK0BM002.PK0BMALP skip, noHighLight;
    set PK0BM002.PK1ALLNB skip, noHighLight;
    PK0BM002.PK0BM-SCHED-ID-LIT = "   SCHEDULE:";
  end

  PK0BM002.XXXRVNBR = PK0BW01.XXXRVNBR; /* Application revision*/
  PK0BM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PK0BM002.XWHCD = PK0BW01.XWHCD; /* Warehouse code*/
  PK0BM002.XWHABRV = PK0BW01.XWHABRV; /* Warehouse abbreviation*/

  if (COMMAREA.CAITEM > " ") /* Application data exists*/
    PK0BM002.CAITEM = COMMAREA.CAITEM; /* Application data*/
    set PK0BM002.CAITEM modified; /* Set MDT on*/
    COMMAREA.CAITEM = " "; /* Clear application data*/
  end


end // end PK0BS02

// format cust inq key array
Function PK0BS03()
   /* ------------------------------------------------------------*/
   /* Format the array with the key of the displayed customer*/
   /* ------------------------------------------------------------*/

  set EPAREC empty; /* Clear mirror order key array*/
  set PKYREC empty; /* Clear order key array*/
  if (PK0BM002.KUCCOID == 0)
    PKWREC.PKWARRAY[1] = PKXREC.PKWARRAY;
    PKWREC.PKWINDEX = 0;
    return;
  end

  PKWREC.PKWINDEX = 1;

  PKWREC.PKWSLTYP[PKWINDEX] = "M"; /* Inquiry selection type*/
  PKWREC.PKWFRMAP[PKWINDEX] = "PK0C"; /* Previous application*/

  PKXREC.XWHCD = PK0BM002.XWHCD; /* Save warehouse code*/
  PKXREC.XWHABRV = PK0BM002.XWHABRV; /* and warehouse abbreviation*/

  PKXREC.PKXKUACT[1] = "S"; /* Indicate selected*/

  PKXREC.KUCCOID[1] = PK0BM002.KUCCOID; /* customer id*/
  PKXREC.KUMSTRID[1] = PK0BM002.KUMSTRID; /* store id*/
  PKXREC.XNXCD[1] = PK0BM002.XNXCD; /* dept code*/

  PKWREC.PKWARRAY[PKWINDEX] = PKXREC.PKWARRAY; /* Inquiry keys array*/


end // end PK0BS03

// format cust inq key array
Function PK0BS04()
   /* ------------------------------------------------------------*/
   /* Format the array with the key of the displayed customer*/
   /* ------------------------------------------------------------*/

  set EPAREC empty; /* Clear mirror order key array*/
  set PKYREC empty; /* Clear order key array*/
  if (PK0BM003.KUCCOID == 0)
    PKWREC.PKWARRAY[1] = PKXREC.PKWARRAY;
    PKWREC.PKWINDEX = 0;
    return;
  end

  PKWREC.PKWINDEX = 1;

  PKWREC.PKWSLTYP[PKWINDEX] = "M"; /* Inquiry selection type*/
  PKWREC.PKWFRMAP[PKWINDEX] = "PK0C"; /* Previous application*/

  set PKYREC empty; /* Clear order key array*/

  PKXREC.XWHCD = PK0BM003.XWHCD; /* Save warehouse code*/
  PKXREC.XWHABRV = PK0BM003.XWHABRV; /* and warehouse abbreviation*/

  PKXREC.PKXKUACT[1] = "S"; /* Indicate selected*/

  PKXREC.KUCCOID[1] = PK0BM003.KUCCOID; /* customer id*/
  PKXREC.KUMSTRID[1] = PK0BM003.KUMSTRID; /* store id*/
  PKXREC.XNXCD[1] = PK0BM003.XNXCD; /* dept code*/

  PKWREC.PKWARRAY[PKWINDEX] = PKXREC.PKWARRAY; /* Inquiry keys array*/


end // end PK0BS04

// format cust inq key array
Function PK0BS05()

  set EPAREC empty; /* Clear mirror order key array*/
  set PKYREC empty; /* Clear order key array*/
  if (PK0BM004.KUCCOID == 0)
    PKWREC.PKWARRAY[1] = PKXREC.PKWARRAY;
    PKWREC.PKWINDEX = 0;
    return;
  end

   /* ------------------------------------------------------------*/
   /* Format the array with the key of the displayed customer*/
   /* ------------------------------------------------------------*/

  PKWREC.PKWINDEX = 1;

  PKWREC.PKWSLTYP[PKWINDEX] = "M"; /* Inquiry selection type*/
  PKWREC.PKWFRMAP[PKWINDEX] = "PK0C"; /* Previous application*/

  PKXREC.XWHCD = PK0BM004.XWHCD; /* Save warehouse code*/
  PKXREC.XWHABRV = PK0BM004.XWHABRV; /* and warehouse abbreviation*/

  PKXREC.PKXKUACT[1] = "S"; /* Indicate selected*/

  PKXREC.KUCCOID[1] = PK0BM004.KUCCOID; /* customer id*/
  PKXREC.KUMSTRID[1] = PK0BM004.KUMSTRID; /* store id*/
  PKXREC.XNXCD[1] = PK0BM004.XNXCD; /* dept code*/

  PKWREC.PKWARRAY[PKWINDEX] = PKXREC.PKWARRAY; /* Inquiry keys array*/


end // end PK0BS05

// set cursor - Dpick.vorhld01
Function PK0BS10()
   /* ------------------------------------------------------------*/
   /* Set cursor - Dpick.Vorhld01*/
   /* ------------------------------------------------------------*/

  set PKBREC empty; /* Row storage area*/

  PKBREC.XWHCD = PK0BW01.XWHCD; /* Warehouse code*/
  PKBREC.PK1CUOID = PK0BW02.PK1CUOID; /* Order number*/
  PKBREC.PK1NORID = PK0BW02.PK1NORID; /* Nike order number*/

  try
    call "IO1770" ("S1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* okay too*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PK0BS10"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PK0BS10

// Fetch next Dpick.Vorhld01
Function PK0BS11()
   /* ------------------------------------------------------------*/
   /* Fetch the next row and check rlrse dates-Dpick.Vorhld01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("N1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (PKBREC.PKBRELDT > PK0BW02.PKBRELDT) /* rlse date gt saved rlse dt*/

        PK0BW02.PKBRELDT = PKBREC.PKBRELDT; /* save this date*/
        return;

      else

        return;

      end

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      PK0BW01.PK0BWSC2 = "Y"; /* end of cursor switch*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PK0BS11"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PK0BS11

// Close cursor - Dpick.Vorhld01
Function PK0BS12()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("C1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/

  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PK0BS12"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PK0BS12

// Set cursor - Dpick.Vcuhld01
Function PK0BS20()
   /* ------------------------------------------------------------*/
   /* Set cursor - Dpick.Vcuhld01*/
   /* ------------------------------------------------------------*/

  set PK9REC empty; /* Row storage area*/

  PK9REC.XWHCD = PK0BW01.XWHCD; /* Warehouse code*/
  PK9REC.KUCCOID = PK0BW02.KUCCOID;
  PK9REC.KUMSTRID = PK0BW02.KUMSTRID;
  PK9REC.XNXCD = PK0BW02.XNXCD;

  try
    call "IO1790" ("S1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* okay too*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PK0BS20"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PK0BS20

// Fetch next - Dpick.Vcuhld01
Function PK0BS21()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to check rlse date-Dpick.Vcuhld01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("N1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (PK9REC.PK9RELDT > PK0BW02.PK9RELDT) /* rlse date gt saved rlse dt*/

        PK0BW02.PK9RELDT = PK9REC.PK9RELDT; /* save this date*/
        return;

      else
        return;
      end

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      PK0BW01.PK0BWSC2 = "Y"; /* end of cursor*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PK0BS21"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PK0BS21

// Close cursor - Dpick.Vcuhld01
Function PK0BS22()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("C1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/

  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PK0BS22"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PK0BS22

// Declare Cursor for VAZCIT01
Function PK0BS598()
   /* get all the ASNs for the criteria specified*/

  set SQLCA empty;

  call "VAZCIT01" ("S4", SQLCA, VAZCIT01) {isNoRefresh = yes, isExternal = yes}; /* select scan*/

   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B598 "; /* Process name*/
    TA1REC.TA1LOC = "DECLARE CURSOR FOR VAZORD01 TABLE";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAZCIT01"; /* Table view name*/
    TA1REC.TA1TBLKE = VAZCIT01.VAZCIT01-KEY;

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B598"; /* Error location*/
    return; /* Return to previous process*/
  end
   /* *************************************************************/
end // end PK0BS598

// Fetch Cursor for VAZCIT01
Function PK0BS599()

  set SQLCA empty;

  call "VAZCIT01" ("N4", SQLCA, VAZCIT01) {isNoRefresh = yes, isExternal = yes}; /* select next*/

      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(28); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(29); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PK0BS599"; /* Process name*/
      TA1REC.TA1LOC = "OBTAIN AZREC ORDER TABLE ROW";
      TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
      TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VAZCIT01"; /* Table view name*/
      TA1REC.TA1TBLKE = VAZCIT01.VAZCIT01-KEY; /* Table key*/

      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

      PK0BM002.XXXERRID = "PK0BS599"; /* Error location*/
      if (TA1REC.TA1FUNC == "RETN") /* Termination function*/
        exit stack; /* Exit to display map*/
      else
        return; /* Return to previous process*/
      end
    end
  end

end // end PK0BS599

// Close Cursor for VAZCIT01
Function PK0BS600()

  set SQLCA empty;

  call "VAZCIT01" ("C4", SQLCA, VAZCIT01) {isNoRefresh = yes, isExternal = yes}; /* select next*/

      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B600 "; /* Process name*/
    TA1REC.TA1LOC = "CLOSE CURSOR OF VAZORD01 TAB";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAZCIT01"; /* Table view name*/
    TA1REC.TA1TBLKE = VAZCIT01.VAZCIT01-KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B600"; /* Error location*/
    return; /* Return to previous process*/
  end

end // end PK0BS600

Function PK0BS601()

  set SQLCA empty;

  PK0BS599();

  if (SQLCA.VAGen_SQLCODE == 100) /* no ASNs selected*/
    PK0BS600();
    PK0BW01.PK0BW-AZCIT-EOF = "Y";
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* while there are ASN selected*/
      set VAZHDR01 empty;
      VAZHDR01.XWH-WHSE-CD = VAZCIT01.XWH-WHSE-CD;
      VAZHDR01.PK-BILL-OF-LADING = VAZCIT01.PK-BILL-OF-LADING;
      VAZHDR01.PK-BOL-SUB-NBR = VAZCIT01.PK-BOL-SUB-NBR;
      PK0BS602();
      PK0BS609();
      if (SQLCA.VAGen_SQLCODE == 0) /* while there are ASN selected*/
        PK0BS603();
      end
    end
  end

end // end PK0BS601

// Select DSHIP.VAZHDR01
Function PK0BS602()
  set SQLCA empty;

  call "VAZHDR01" ("S ", SQLCA, VAZHDR01) {isNoRefresh = yes, isExternal = yes}; /* select scan*/

   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B602 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN AZ HEADER TABLE ROW";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAZHDR01"; /* Table view name*/
    TA1REC.TA1TBLKE = SR1REC.SR1KEYS; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B602"; /* Error location*/
    return; /* Return to previous process*/
  end

end // end PK0BS602

Function PK0BS603()
  PK0BMW01.PK-BILL-OF-LADING[XXPKWCT2] = VAZCIT01.PK-BILL-OF-LADING;
  PK0BMW01.PK-BOL-SUB-NBR[XXPKWCT2] = VAZCIT01.PK-BOL-SUB-NBR;
  PK0BMW01.AZ-TOT-ORD-CARTONS[XXPKWCT2] = AZFREC.AZF-AZ-CRTN-CNT;
  PK0BMW01.TF-CARR-CD[XXPKWCT2] = VAZHDR01.TF-CARR-CD;

end // end PK0BS603

Function PK0BS604()
  set SQLCA empty;
  set VAZCIT01 empty;
  PK0BS605(); /* Initialize the working storage table.*/

  VAZCIT01.XWH-WHSE-CD = SR2REC.XWHCD;
  VAZCIT01.OP-CUST-ORD-ID = SR2REC.OP1CUOID;
  VAZCIT01.OP-NIKE-ORD-ID = SR2REC.OP1NORID;
  VAZCIT01.PK-BILL-OF-LADING = SR2REC.PK1BLLAD;
  VAZCIT01.PK-PICK-SCHED-NBR = PK0BW02.PK1PKSCH;
  VAZCIT01.PK-BOL-SUB-NBR = -1;
  VAZCIT01.OP-LINE-ITEM-NBR = -1;

  PK0BS598(); /* Declare the Cursor for VAZCIT01*/

  PK0BW01.PK0BW-AZCIT-EOF = "N";

  XXPKW02.XXPKWCT2 = 1;

  while (PK0BW01.PK0BW-AZCIT-EOF != "Y")
    PK0BS601();
    XXPKW02.XXPKWCT2 = XXPKW02.XXPKWCT2 + 1;
  end
end // end PK0BS604

Function PK0BS605()
  XXPKW02.XXPKWCT2 = 10;

  while (XXPKW02.XXPKWCT2 >= 1)
    PK0BMW01.PK-BILL-OF-LADING[XXPKWCT2] = 0;
    PK0BMW01.PK-BOL-SUB-NBR[XXPKWCT2] = 0;
    PK0BMW01.AZ-TOT-ORD-CARTONS[XXPKWCT2] = 0;
    PK0BMW01.TF-CARR-CD[XXPKWCT2] = " ";
    XXPKW02.XXPKWCT2 = XXPKW02.XXPKWCT2 - 1;
  end

end // end PK0BS605

// Get sums from DSHIP.VAZCTN01
Function PK0BS608()
   /* get all the ASNs for the criteria specified*/

  set SQLCA empty;
  set VAZCTN01 empty;
  set AZFREC empty;
  VAZCTN01.XWH-WHSE-CD = VAZHDR01.XWH-WHSE-CD;
  VAZCTN01.PK-BILL-OF-LADING = VAZHDR01.PK-BILL-OF-LADING;
  VAZCTN01.PK-BOL-SUB-NBR = VAZHDR01.PK-BOL-SUB-NBR;
  VAZCTN01.OP-CUST-ORD-ID = VAZCIT01.OP-CUST-ORD-ID;
  VAZCTN01.OP-NIKE-ORD-ID = VAZCIT01.OP-NIKE-ORD-ID;
  VAZCTN01.PK-PICK-SCHED-NBR = SR2REC.PK1PKSCH;
  VAZCTN01.PK-CRTN-SEQ-NBR = -1;
  AZFREC.AZFTASK = "SA";

  call "VAZCTN01" (AZFREC, SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes}; /* select scan*/

   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B608 "; /* Process name*/
    TA1REC.TA1LOC = "DECLARE CURSOR FOR VAZORD01 TABLE";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
    TA1REC.TA1TBLKE = VAZCTN01.VAZCTN01-KEY;

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B608"; /* Error location*/
    return; /* Return to previous process*/
  end
   /* *************************************************************/
end // end PK0BS608

// Get counts from DSHOP.VAZCTN01
Function PK0BS609()
   /* get all the ASNs for the criteria specified*/

  set SQLCA empty;
  set VAZCTN01 empty;
  set AZFREC empty;
  VAZCTN01.XWH-WHSE-CD = VAZCIT01.XWH-WHSE-CD;
  VAZCTN01.PK-BILL-OF-LADING = VAZCIT01.PK-BILL-OF-LADING;
  VAZCTN01.PK-BOL-SUB-NBR = VAZCIT01.PK-BOL-SUB-NBR;
  VAZCTN01.OP-CUST-ORD-ID = VAZCIT01.OP-CUST-ORD-ID;
  VAZCTN01.OP-NIKE-ORD-ID = VAZCIT01.OP-NIKE-ORD-ID;
  VAZCTN01.PK-PICK-SCHED-NBR = PK0BW02.PK1PKSCH;
  VAZCTN01.PK-MOVERS-STAT-CD = "*";
  AZFREC.AZFTASK = "C";

  call "VAZCTN01" (AZFREC, SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes}; /* select scan*/

   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B608 "; /* Process name*/
    TA1REC.TA1LOC = "DECLARE CURSOR FOR VAZORD01 TABLE";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
    TA1REC.TA1TBLKE = VAZCTN01.VAZCTN01-KEY;

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B609"; /* Error location*/
    return; /* Return to previous process*/
  end

end // end PK0BS609

// Select Dpick.Vsplhd01
Function PK0BS610()
   /* get company name for alternate address*/

  set PWOREC empty;
  PWOREC.XWHCD = VAZCTN01.XWH-WHSE-CD;
  PK0BW01.PK0BW-CUST-ORD-ID = VAZCTN01.OP-CUST-ORD-ID;
  PWOREC.OP1PARTN = PK0BW01.PK0BW-CUST-ORD-DIGIT[9];
  PWOREC.OP1CUOID = VAZCTN01.OP-CUST-ORD-ID;
  PWOREC.OP1NORID = VAZCTN01.OP-NIKE-ORD-ID;
  PWOREC.TSIPLNBR = VAZCTN01.TS-NIKE-PL-NBR; /* Packing List*/


  call "IO5770" ("S ", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes}; /* select Dpick.Vsplhd01*/

   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B610 "; /* Process name*/
    TA1REC.TA1LOC = "SELECT CO NM FROM DPICK.VSPLHD01";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
    TA1REC.TA1TBLKE = PWOREC.PWOKEY;

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B610"; /* Error location*/
  end

end // end PK0BS610

// Get packing list number
Function PK0BS611()
  set SQLCA empty;
  set VAZCTN01 empty;

  VAZCTN01.XWH-WHSE-CD = SR2REC.XWHCD;
  VAZCTN01.OP-CUST-ORD-ID = SR2REC.OP1CUOID;
  VAZCTN01.OP-NIKE-ORD-ID = SR2REC.OP1NORID;
  VAZCTN01.PK-BILL-OF-LADING = SR2REC.PK1BLLAD;
  VAZCTN01.PK-PICK-SCHED-NBR = PK0BW02.PK1PKSCH;
  VAZCTN01.PK-BOL-SUB-NBR = VAZHDR01.PK-BOL-SUB-NBR;

  PK0BS612(); /* Declare the Cursor for VAZCTN01*/

  PK0BS613(); /* Get first record*/

  PK0BS614(); /* Close cursor for VAZCTN01*/

end // end PK0BS611

// Declare Cursor for VAZCTN01
Function PK0BS612()
   /* get the first carton for criteria specified*/

  set SQLCA empty;

  call "VAZCTN01" ("S6", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes}; /* select scan*/

   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B612 "; /* Process name*/
    TA1REC.TA1LOC = "DECLARE CURSOR FOR VAZCTN01 TABLE";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
    TA1REC.TA1TBLKE = VAZCTN01.VAZCTN01-KEY;

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B612"; /* Error location*/
    return; /* Return to previous process*/
  end
   /* *************************************************************/
end // end PK0BS612

// Fetch Cursor for VAZCTN01
Function PK0BS613()

  set SQLCA empty;

  call "VAZCTN01" ("N6", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes}; /* select next*/

      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(28); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(29); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PK0B613 "; /* Process name*/
      TA1REC.TA1LOC = "OBTAIN AZREC CARTON TABLE ROW";
      TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
      TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
      TA1REC.TA1TBLKE = VAZCTN01.VAZCTN01-KEY; /* Table key*/

      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

      PK0BM002.XXXERRID = "PK0B613"; /* Error location*/
      return; /* Return to previous process*/
    end
  end

end // end PK0BS613

// Close Cursor for VAZCTN01
Function PK0BS614()

  set SQLCA empty;

  call "VAZCTN01" ("C6", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes}; /* select next*/

      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B614 "; /* Process name*/
    TA1REC.TA1LOC = "CLOSE CURSOR OF VAZCTN01 TAB";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
    TA1REC.TA1TBLKE = VAZCTN01.VAZCTN01-KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B614"; /* Error location*/
    return; /* Return to previous process*/
  end

end // end PK0BS614

// Declare Cursor for Vsplit01
Function PK0BS615()
  set SQLCA empty;
  set PWPREC empty;

  PWPREC.XWHCD = PK0BW01.XWHCD;
  PWPREC.TSIPLNBR = VAZCTN01.TS-NIKE-PL-NBR;
  PK0BW01.PK0BW-CUST-ORD-ID = PK0BW02.PK1CUOID;
  PWPREC.OP1PARTN = PK0BW01.PK0BW-CUST-ORD-DIGIT[9];
  PWPREC.OP1CUOID = PK0BW02.PK1CUOID;
  PWPREC.OP1NORID = PK0BW02.PK1NORID;

  call "IO5760" ("SB", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes}; /* select scan*/

   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B615 "; /* Process name*/
    TA1REC.TA1LOC = "DECLARE CURSOR FOR VSPLIT01 TABLE";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
    TA1REC.TA1TBLKE = PWPREC.PWPKEY;

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B615"; /* Error location*/
    return; /* Return to previous process*/
  end
   /* *************************************************************/
end // end PK0BS615

// Fetch row of Vsplit01
Function PK0BS616()

  set SQLCA empty;

  call "IO5760" ("NB", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes}; /* select next*/

      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B616 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN SPLIT ITEM TABLE ROW";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
    TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B616"; /* Error location*/
    return; /* Return to previous process*/
  end

end // end PK0BS616

// Close Cursor for VSPLIT01
Function PK0BS617()

  set SQLCA empty;

  call "IO5760" ("CB", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes}; /* select next*/

      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0B617 "; /* Process name*/
    TA1REC.TA1LOC = "CLOSE CURSOR OF VSPLIT01 TAB";
    TA1REC.TA1MAP = "PK0BM002"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
    TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0BM002.XXXERRID = "PK0B617"; /* Error location*/
    return; /* Return to previous process*/
  end

end // end PK0BS617

// Initialization - pop up window
Function XPPK008()
  set XXPKM001 initial; /* Clear the map area*/
  set XXPKW02 empty; /* clear working storage*/
  XXPKW02.XXPKWCT1 = 1; /* Table index*/
  XXPKW02.XXPKWCT2 = 1; /* Screen index*/
  XXPKW02.XXPKWSIX = 0; /* End of first page save index*/
  XXPKW02.XXPKWPIX = 0; /* Initialize pass index to zero*/
  XXPKW02.XXPKWFFL = "Y"; /* first time thru flag*/
  XXPKW02.XXPKWERR = "N"; /* Scroll error flag to no*/
  XXPKW02.XXPKWEND = "N"; /* End of pop up window session flag*/

end // end XPPK008

// converse pop up window
Function XPPKP01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XXPKW02.XXPKWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XXPKW02.XXPKWFFL == "N") /* if not the first time through*/
      XXPKW02.XXPKWCT1 = XXPKW02.XXPKWINX[7] + 1; /* set up scroll pf8*/
    end

    set XXPKM001 initial; /* Clear map output area*/
    XXPKM001.OP-CUST-ORD-ID = PK0BW02.PK1CUOID;
    XXPKM001.PK-PICK-SCHED-NBR = PK0BW02.PK1PKSCH;
    XXPKM001.XXPKMHDR = "             LIST OF BOLS "; /* heading*/
    XXPKM001.XXPKMTR1 = "              SELECT & ENTER          ";
    XXPKM001.XXPKMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XXPKW02.XXPKWFFL == "Y")    /* Or it is the first time thru*/
      XXPKW02.XXPKWCT2 = 1; /* Set up screen index*/
      while (XXPKW02.XXPKWCT2 <= 7 &&  /* Until end of screen lines*/
      XXPKW02.XXPKWCT1 <= 10) /* Working storage limit*/
        if (PK0BMW01.PK-BILL-OF-LADING[XXPKWCT1] != 0)
          XXPKM001.XXPKMBOL[XXPKWCT2] = PK0BMW01.PK-BILL-OF-LADING[XXPKWCT1];
          XXPKM001.XXPKMSUB[XXPKWCT2] = PK0BMW01.PK-BOL-SUB-NBR[XXPKWCT1];
          XXPKM001.XXPKMCRT[XXPKWCT2] = PK0BMW01.AZ-TOT-ORD-CARTONS[XXPKWCT1];
          XXPKM001.XXPKMCARR[XXPKWCT2] = PK0BMW01.TF-CARR-CD[XXPKWCT1];
                                   /* Save array*/
          if (XXPKW02.XXPKWFFL == "Y") /* If first time thru*/
            XXPKW02.XXPKWSIX = XXPKW02.XXPKWCT1; /* Save last index*/
          end
          set XXPKM001.XXPKMSEL[XXPKWCT2] normal; /* Set selects to normal*/
          XXPKW02.XXPKWCT2 = XXPKW02.XXPKWCT2 + 1;
                                   /* Increment screen index*/
        end
        XXPKW02.XXPKWCT1 = XXPKW02.XXPKWCT1 + 1; /* Increment table index*/
      end
      XXPKW02.XXPKWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XXPKW02.XXPKWCT1 = XXPKW02.XXPKWINX[1] - 1; /* Set up table index*/
      XXPKW02.XXPKWCT2 = 10; /* Set up screen index*/
      while (XXPKW02.XXPKWCT2 >= 1) /* Load from the bottom up*/

        if (PK0BMW01.PK-BILL-OF-LADING[XXPKWCT1] != 0)
          XXPKM001.XXPKMBOL[XXPKWCT2] = PK0BMW01.PK-BILL-OF-LADING[XXPKWCT1];
          XXPKM001.XXPKMSUB[XXPKWCT2] = PK0BMW01.PK-BOL-SUB-NBR[XXPKWCT1];
          XXPKM001.XXPKMCRT[XXPKWCT2] = PK0BMW01.AZ-TOT-ORD-CARTONS[XXPKWCT1];
          XXPKM001.XXPKMCARR[XXPKWCT2] = PK0BMW01.TF-CARR-CD[XXPKWCT1];
                                   /* Save array*/
          set XXPKM001.XXPKMSEL[XXPKWCT2] normal; /* Set select visible*/
          XXPKW02.XXPKWCT2 = XXPKW02.XXPKWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XXPKW02.XXPKWCT1 = XXPKW02.XXPKWCT1 - 1; /* Decrement table index*/
      end
      if (XXPKW02.XXPKWCT1 < 1) /* If the table index was decremented*/
        XXPKW02.XXPKWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XXPKM001 ;

  XXPKW02.XXPKWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XXPKW02.XXPKWCT2 = 1; /* Screen index*/
  while (XXPKW02.XXPKWCT2 <= 7 /* Set all fields with data to normal*/
   && XXPKM001.XXPKMBOL[XXPKWCT2] != 0)
    set XXPKM001.XXPKMSEL[XXPKWCT2] normal;
    XXPKW02.XXPKWCT2 = XXPKW02.XXPKWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && PK0BMW01.PK-BILL-OF-LADING[XXPKWCT1] == 0)
    XXPKW02.XXPKWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XXPKW02.XXPKWINX[1] <= XXPKW02.XXPKWSIX)
      XXPKW02.XXPKWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XXPKW02.XXPKWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XXPKW02.XXPKWCT2 = 1; /* Screen index*/
        while (XXPKW02.XXPKWCT2 <= 7) /* Until end of screen data*/
          if (XXPKM001.XXPKMSEL[XXPKWCT2] == "S") /* Check for selection*/
            XXPKW02.XXPKWPIX = XXPKW02.XXPKWINX[XXPKWCT2];
            VAZHDR01.PK-BILL-OF-LADING = XXPKM001.XXPKMBOL[XXPKWCT2];
            VAZHDR01.PK-BOL-SUB-NBR = XXPKM001.XXPKMSUB[XXPKWCT2];
            XXPKW02.XXPKWCT2 = 11; /* End loop*/
          end
          XXPKW02.XXPKWCT2 = XXPKW02.XXPKWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XXPKW02.XXPKWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPPKP01

Record PK0BMW01 type basicRecord
  10 PK0B-GROUP PK0B-GROUP ; 
    15 PK-BILL-OF-LADING PK-BILL-OF-LADING [10] ; 
    15 PK-BOL-SUB-NBR PK-BOL-SUB-NBR [10] ; 
    15 AZ-TOT-ORD-CARTONS AZ-TOT-ORD-CARTONS [10] ; 
    15 TF-CARR-CD TF-CARR-CD [10] ; 
end // end PK0BMW01

//*** RECORD=PK0BW01 ****
// Working storage for PK0B - PICKING Order Inquiry.
// ***********************
Record PK0BW01 type basicRecord
  10 XXXRVNBR XXXRVNBR ; 
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 PK1CUOID PK1CUOID ; 
  10 PK1NORID PK1NORID ; 
  10 PK1ALLNB PK1ALLNB ; 
  10 XPPCD XPPCD ; 
  10 PK1PKSCH PK1PKSCH ; 
  10 PK0BW-MTCH-PK1NORID PK0BW-MTCH-PK1NORID ; 
  10 PK0BWIXM PK0BWIXM ; 
  10 PK0BWIXA PK0BWIXA ; 
  10 PK0BWMAP PK0BWMAP ; 
  10 PK0BWSWF PK0BWSWF ; 
  10 PK0BWSWM PK0BWSWM ; 
  10 PK0BWSWO PK0BWSWO ; 
  10 PK0BWSC2 PK0BWSC2 ; 
  10 PK0BWSWP PK0BWSWP ; 
  10 PK0BWSWQ PK0BWSWQ ; 
  10 PK0BWSWS PK0BWSWS ; 
  10 PK0BWSWT PK0BWSWT ; 
  10 PK0BWSWU PK0BWSWU ; 
  10 PK0BWSWV PK0BWSWV ; 
  10 PK0BWTSP PK0BWTSP ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 PKWSLTYP PKWSLTYP ; 
  10 PK0BW-AZCIT-EOF PK0BW-AZCIT-EOF ; 
  10 PK0BW-CUST-ORD-ID PK0BW-CUST-ORD-ID ; 
    15 PK0BW-CUST-ORD-DIGIT PK0BW-CUST-ORD-DIGIT [9] ; 
  10 PK0BW2NB PK0BW2NB ; 
    15 PK0BW2N1 PK0BW2N1 ; 
    15 PK0BW2N2 PK0BW2N2 ; 
  10 PK0BW-EXPC-TOT-ORD-WT PK0BW-EXPC-TOT-ORD-WT ; 
  10 PK0BW-PREV-CRTN-NBR PK0BW-PREV-CRTN-NBR ; 
  10 PK0BW-DCMS-SEL-FL PK0BW-DCMS-SEL-FL ; 
end // end PK0BW01

//*** RECORD=PK0BW02 ****
// Display storage for PK0B - PICKING Order Inquiry
// ***********************
Record PK0BW02 type basicRecord
  10 PK1CUOID PK1CUOID ; 
  10 PK1NORID PK1NORID ; 
  10 PK1PKSCH PK1PKSCH ; 
  10 PK0BMDTL PK0BMDTL ; 
  10 SR1PKSDT SR1PKSDT ; 
  10 KUCCOID KUCCOID ; 
  10 KUMSTRID KUMSTRID ; 
  10 XNXCD XNXCD ; 
  10 PK0BW-KUCCOID-COMPARE PK0BW-KUCCOID-COMPARE ; 
  10 KUMSTRNM KUMSTRNM ; 
  10 OP1CUPO OP1CUPO ; 
  10 XOTCD XOTCD ; 
  10 XOTABRV XOTABRV ; 
  10 OP1CUNDT OP1CUNDT ; 
  10 OP1DSADT OP1DSADT ; 
  10 OP1DSBDT OP1DSBDT ; 
  10 TF1CARCD TF1CARCD ; 
  10 PK4CARSP PK4CARSP ; 
  10 PK0BMCSD PK0BMCSD ; 
  10 TF1CARNM TF1CARNM ; 
  10 SP1ID SP1ID ; 
  10 SP1NM SP1NM ; 
  10 XPACD XPACD ; 
  10 TF2PRONO TF2PRONO ; 
  10 XPPCD XPPCD ; 
  10 PK4ORHLD PK4ORHLD ; 
  10 PK4CUHLD PK4CUHLD ; 
  10 PKBRELDT PKBRELDT ; 
  10 PK9RELDT PK9RELDT ; 
  10 OP11TMSF OP11TMSF ; 
  10 PK4STKTF PK4STKTF ; 
  10 XPKCD XPKCD ; 
  10 OP5ALTNM OP5ALTNM ; 
  10 XXXADDR1 XXXADDR1 ; 
  10 XXXADDR2 XXXADDR2 ; 
  10 XXXADDR3 XXXADDR3 ; 
  10 XXXCITY XXXCITY ; 
  10 XSTSTCD XSTSTCD ; 
  10 XXXZIP XXXZIP ; 
  10 PK4OTUNT PK4OTUNT ; 
  10 PK4OTWGT PK4OTWGT ; 
  10 SR2TOTCF SR2TOTCF ; 
  10 PK0BWPSF PK0BWPSF ; 
  10 PK-IVC-REQ-FL PK-IVC-REQ-FL ; 
  10 PK0BT-ASN-DESC PK0BT-ASN-DESC ; 
  10 OP1EXPDF OP1EXPDF ; 
  10 OP1SPHDF OP1SPHDF ; 
  10 OP1SPLBF OP1SPLBF ; 
  10 OP1SPINF OP1SPINF ; 
  10 XHDKEY XHDKEY [5] ; 
    15 XHDCD XHDCD ; 
    15 XGPCD XGPCD ; 
  10 XHDDESC XHDDESC [5] ; 
  10 XNDCD XNDCD [10] ; 
  10 OP4TXT OP4TXT [12] ; 
  10 CU-STOR-SELF-ID CU-STOR-SELF-ID ; 
  10 CU-DEPT-SELF-ID CU-DEPT-SELF-ID ; 
  10 PK1BLLAD PK1BLLAD ; 
  10 PK-BOL-SUB-NBR PK-BOL-SUB-NBR ; 
  10 TSIPLNBR TSIPLNBR ; 
  10 SR2SHPCG SR2SHPCG ; 
  10 PK1ALLNB PK1ALLNB ; 
  10 DCMS-ERROR-FL DCMS-ERROR-FL ; 
  10 GOODS-ISS-FL GOODS-ISS-FL ; 
end // end PK0BW02

//*** RECORD=PK0BW03 ****
// Temporary storage record for PK0B - PICKING Order Inquiry
// ***********************
Record PK0BW03 type basicRecord
  5 PK0BW-GROUP char(692) ; 
    10 PK0BWLEN PK0BWLEN ; 
    10 PK0BMSEL PK0BMSEL [16] ; 
    10 PK1CUOID PK1CUOID [16] ; 
    10 PK1NORID PK1NORID [16] ; 
    10 PK1ALLNB PK1ALLNB [16] ; 
    10 XPPCD XPPCD [16] ; 
    10 PK1PKSCH PK1PKSCH [16] ; 
    10 PK0BMDTL PK0BMDTL [16] ; 
    10 SR1PKSDT SR1PKSDT [16] ; 
    10 PK4OTUNT PK4OTUNT [16] ; 
    10 PK4OTWGT PK4OTWGT [16] ; 
    10 SR2TOTCF SR2TOTCF [16] ; 
    10 DCMS-ERROR-FL DCMS-ERROR-FL [16] ; 
end // end PK0BW03

//*** RECORD=XXPKW02 ****
// ************************************************************
// 
//         ***** POP UP WINDOW WORKING RECORD *****
// 
// ************************************************************
// 
// Overview :
//            This record is the working record used by
//            the CSP pop up window processes - xpxx001
//            and xp???01. ( Where ??? is the table name
//            associated with the pop-up window process.)
// 
// Maintenance History :
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          03-25-88  CEPPLE  Created
//          03-30-89  jvande  replaced xtvcd with xgpcd.
//          07-25-89  mchris  added xwhcd.
//          08/01/89  SPOPA   Added YPGFFFL field.
// ************************************************************
// ***********************
Record XXPKW02 type basicRecord
  10 XXPKWCT1 XXPKWCT1 ; 
  10 XXPKWCT2 XXPKWCT2 ; 
  10 XXPKWSIX XXPKWSIX ; 
  10 XXPKWPIX XXPKWPIX ; 
  10 XXPKWINX XXPKWINX [10] ; 
  10 XXPKWEND XXPKWEND ; 
  10 XXPKWFFL XXPKWFFL ; 
  10 XXPKWERR XXPKWERR ; 
  10 XXPKWHDR XXPKWHDR ; 
  10 XSTCD XSTCD ; 
  10 XXPKWNUM XXPKWNUM ; 
    15 XXPKWCHA XXPKWCHA ; 
end // end XXPKW02

// Bill of Lading Number
DataItem PK0B-GROUP char(170)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Type of date literal
DataItem PK0BMDTL char(10)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// Selection tag
DataItem PK0BMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inquiry selection type
DataItem PK0BW-AZCIT-EOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inquiry selection type
DataItem PK0BW-CUST-ORD-DIGIT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Inquiry selection type
DataItem PK0BW-CUST-ORD-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0BW-DCMS-SEL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next page msg part2
DataItem PK0BW-EXPC-TOT-ORD-WT decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CU_CO_ID compare field
DataItem PK0BW-KUCCOID-COMPARE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// pk-nike-ord-id for compares
DataItem PK0BW-MTCH-PK1NORID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// next page msg part2
DataItem PK0BW-PREV-CRTN-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// next page msg part1
DataItem PK0BW2N1 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next page msg part2
DataItem PK0BW2N2 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next page message
DataItem PK0BW2NB char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for array fields
DataItem PK0BWIXA smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PK0BWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem PK0BWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current map displayed
DataItem PK0BWMAP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PSST Yes/No flag
DataItem PK0BWPSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor switch
DataItem PK0BWSC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Display format switch
DataItem PK0BWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of map to display
DataItem PK0BWSWM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Orders selected switch
DataItem PK0BWSWO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Picking orders eof switch
DataItem PK0BWSWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Picking order read switch
DataItem PK0BWSWQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Shipping orders eof switch
DataItem PK0BWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Shipping order read switch
DataItem PK0BWSWT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Mirror pool orders eof switch
DataItem PK0BWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Mirror pool order read switch
DataItem PK0BWSWV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current temporary storage page
DataItem PK0BWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// num-to-cha conversion
DataItem XXPKWCHA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table counter
DataItem XXPKWCT1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// screen counter
DataItem XXPKWCT2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// flag
DataItem XXPKWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// scroll error flag
DataItem XXPKWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time thru flag
DataItem XXPKWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen header
DataItem XXPKWHDR char(39)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

// counter link screen/table
DataItem XXPKWINX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// bin-to-num conversion
DataItem XXPKWNUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// passed index table location
DataItem XXPKWPIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// end of first page save index
DataItem XXPKWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

