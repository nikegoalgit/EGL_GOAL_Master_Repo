package pk0r;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PK0R ****
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      07/24/96  DHUFFM  New application.
// DCSPLIT  12/11/96  PSHARM  PK-LVL-FLG CAN BE 'N', 'C' OR ' '
//                            PK0R-15001, PK0R-15002,
//                            PK0R-15201, PK0R-15202.
// *********************
Program PK0R type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK0RW00 PK0RW00; // record
  PK0RW01 PK0RW01; // record
  PK4REC PK4REC; // record
  PKWREC PKWREC; // record
  PKYREC PKYREC; // record
  PWLREC PWLREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VPOOLH03 VPOOLH03; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use PK0RM.PK0RM001,  // forms
      PK0RM.PK0RM002, 
      PK0RM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PK0R-00000: PK0R-00000();
    PK0R-00001: PK0R-00001();
    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/

    goto PK0R-00001; /* Converse the main process*/

  end // end main
end // end PK0R

// Main process to display a map
Function PK0R-00000()
   /* *********************************************************/
   /* * this process controls entire program process control **/
   /* * transfer to other applications occurs in converse    **/
   /* *********************************************************/

  set PKYREC empty;

  if (COMMAREA.CAFROMAP == "PW0V" /* From allowed application*/
   || COMMAREA.CAFROMAP == "PW0W" 
   || COMMAREA.CAFROMAP == "PW0R" 
   || COMMAREA.CAFROMAP == "PW0N" 
   || COMMAREA.CAFROMAP == "PW0P" 
   || COMMAREA.CAFROMAP == "PW0X" 
   || COMMAREA.CAFROMAP == "PW0J" 
   || COMMAREA.CAFROMAP == "PW06" 
   || COMMAREA.CAFROMAP == "PW08" 
   || COMMAREA.CAFROMAP == "GD00")

    PKWREC.PKWFRMAP = COMMAREA.CACURRAP; /* save curr application*/

  else
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    XSNOWAY();
  end

  XPPK001(); /* check picking security*/

  if (PKWREC.PKWARRAY == " ")
    /* next sentence;*/
  else
    PKYREC.PKWARRAY = PKWREC.PKWARRAY;
  end

  if (PKWREC.PKWSELSW == "PK")
    PK0RM001.XWHCD = PKWREC.XWHCD;
    PK0RW01.PK0RW-WHSE-CD = PK0RM001.XWHCD;
   /* get description*/
    if (PK0RW01.PK0RW-WHSE-CD in XWHTBL.XWHCD)
      PK0RM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    end
  else
    PK0RM002.XWHCD = PKWREC.XWHCD;
    PK0RW01.PK0RW-WHSE-CD = PK0RM002.XWHCD;
   /* get description*/
    if (PK0RW01.PK0RW-WHSE-CD in XWHTBL.XWHCD)
      PK0RM002.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    end
  end

  PK0RW00.PK0RW-SWD = "1";

   /* **********************************************************/
end // end PK0R-00000

// Main process to display a map
Function PK0R-00001()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) If specified, display the first map.*/
  /* 2) Otherwise, if specified, display the second map, depending*/
  /* on function = add or change*/
  /* 3) Otherwise, indicate error and exit to Application Menu.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  if (PK0RW00.PK0RW-SWD == "1") /* Map 1 was requested*/

    PK0R-10000(); /* Display map 1*/

  else

    /* ------------------------------------------------------------*/
    /* Write the error to the Error Diagnosis Reporting Facility.*/
    /* ------------------------------------------------------------*/

    PKWREC.PKWFRMAP = "00001"; /* Module identification*/
    converseLib.validationFailed(29); /* Unexpected error occurred*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
    TA1REC.TA1MAPNO = PK0RW00.PK0RW-SWD; /* Map number*/
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PKWREC.PKWFRMAP; /* Program number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    /* ------------------------------------------------------------*/
    /* Exit to display the application system menu.*/
    /* ------------------------------------------------------------*/

    COMMAREA.CATOAP = "PK0A"; /* TO application*/

    XSEXIT(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
    /* Abnormally terminate the transaction if the exit failed.*/
    /* ------------------------------------------------------------*/

    TA1REC.TA1FUNC = "ABND"; /* Termination function*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end

end // end PK0R-00001

// List the rows in the table
Function PK0R-10000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  PK0R-11000(); /* Obtain the data to display*/

  if (PKWREC.PKWSELSW == "PK")
    PK0R-12001(); /* Format and display the map*/
    PK0R-13001(); /* Check attention identifier*/
    PK0R-14001(); /* Reset fields to normal intensity*/
    PK0R-15001(); /* Verify the entered data*/
    PK0R-16001(); /* Process valid input request*/

  else
    PK0R-12002(); /* Format and display the map*/
    PK0R-13002(); /* Check attention identifier*/
    PK0R-14002(); /* Reset fields to normal intensity*/
    PK0R-15002(); /* Verify the entered data*/
    PK0R-16002(); /* Process valid input request*/

  end

end // end PK0R-10000

// Obtain the data to display
Function PK0R-11000()
  /* ------------------------------------------------------------*/
  /* If data was not requested or an error was found, return to*/
  /* the previous process.*/
  /* ------------------------------------------------------------*/

  if (PK0RW00.PK0RW-SWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Establish the temporary storage queue page length.*/
  /* ------------------------------------------------------------*/

  PK0RW00.XXXTSLEN = 727; /* temp storage page length*/

  /* ------------------------------------------------------------*/
  /* If no message to display, reset the page number to display.*/
  /* ------------------------------------------------------------*/

  if (PK0RW00.XXXTSPAG == 0) /* no pages established*/
    PK0RW00.XXXTSPAG = 1; /* Page number to display*/
  end

  /* ------------------------------------------------------------*/
  /* Purge any pages from temporary storage and save key fields.*/
  /* ------------------------------------------------------------*/

  PK0R-11100(); /* Purge any temporary storage*/

  if (PKWREC.PKWSELSW == "PK")
    PK0RW01.PK0RW-WHSE-CD = PK0RM001.XWHCD; /* whse code*/
    PK0RW01.PK0RW-MIN-UNITS = PK0RM001.PK0RM-MIN-UNITS; /* min unit*/
    PK0RW01.PK0RW-MAX-UNITS = PK0RM001.PK0RM-MAX-UNITS; /* max unit*/
    PK0RW01.PK0RW-MSTR-LVL-FL = PK0RM001.PK0RM-MSTR-LVL-FL; /**/
    PK0RW01.PK0RW-MSTR-SCHED-QTY = PK0RM001.PK0RM-MSTR-SCHED-QTY;
    PK0RW01.PK0RW-MIN-TIME = PK0RM001.PK0RM-MIN-TIME; /* min time*/
    PK0RW01.PK0RW-MAX-TIME = PK0RM001.PK0RM-MAX-TIME; /* max time*/
    PK0RW01.PK0RW-KUCCOID = PK0RM001.PK0RM-KUCCOID; /* Cust id select*/
    PK0RW01.PK0RW-KUMSTRID = PK0RM001.PK0RM-KUMSTRID; /* Cust store*/
    PK0RW01.PK0RW-PK1CUOID = PK0RM001.PK0RM-PK1CUOID;
    PK0RW01.PK0RW-PK1NORID = PK0RM001.PK0RM-PK1NORID;
  else
    PK0RW01.PK0RW-WHSE-CD = PK0RM002.XWHCD; /* whse code*/
    PK0RW01.PK0RW-MIN-UNITS = PK0RM002.PK0RM-MIN-UNITS; /* min unit*/
    PK0RW01.PK0RW-MAX-UNITS = PK0RM002.PK0RM-MAX-UNITS; /* max unit*/
    PK0RW01.PK0RW-MSTR-LVL-FL = PK0RM002.PK0RM-MSTR-LVL-FL; /**/
    PK0RW01.PK0RW-MSTR-SCHED-QTY = PK0RM002.PK0RM-MSTR-SCHED-QTY;
    PK0RW01.PK0RW-MIN-TIME = PK0RM002.PK0RM-MIN-TIME; /* min time*/
    PK0RW01.PK0RW-MAX-TIME = PK0RM002.PK0RM-MAX-TIME; /* max time*/
    PK0RW01.PK0RW-KUCCOID = PK0RM002.PK0RM-KUCCOID; /* Cust id select*/
    PK0RW01.PK0RW-KUMSTRID = PK0RM002.PK0RM-KUMSTRID; /* Cust store*/
    PK0RW01.PK0RW-PK1CUOID = PK0RM002.PK0RM-PK1CUOID;
    PK0RW01.PK0RW-PK1NORID = PK0RM002.PK0RM-PK1NORID;
  end

  /* ------------------------------------------------------------*/
  /* Select and open the cursor for the set to be formatted.*/
  /* ------------------------------------------------------------*/

  PK0R-11200();

  /* ------------------------------------------------------------*/
  /* Fetch and format the data into pages until end of cursor.*/
  /* ------------------------------------------------------------*/

  PK0RW00.PK0RW-IXM = 1; /* Display line index*/
  PK0RW00.PK0RW-SWC = "N"; /* End of cursor switch*/
  if (PWLREC.PWLFUNC == "S1")
    PWLREC.PWLFUNC = "N1";
  else
    if (PWLREC.PWLFUNC == "S2")
      PWLREC.PWLFUNC = "N2";
    else
      if (PWLREC.PWLFUNC == "S3")
        PWLREC.PWLFUNC = "N3";
      else
        if (PWLREC.PWLFUNC == "S4")
          PWLREC.PWLFUNC = "N4";
        end
      end
    end
  end

  while (PK0RW00.PK0RW-SWC == "N") /* Until end of cursor*/

    PK0R-11300(); /* Fetch next row in the cursor*/

    /* ------------------------------------------------------------*/
    /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/

    if (PK0RW00.PK0RW-SWC == "N") /* Not end of cursor*/
      PK0R-11400(); /* Save data in display storage*/
    end

    if (PK0RW00.PK0RW-IXM > 10) /* Page is full*/
      PK0R-11500(); /* Add page to temporary storage*/
      PK0RW00.PK0RW-IXM = 1; /* Display line index*/
    end

  end

  /* ------------------------------------------------------------*/
  /* If the page was formatted add the page to temp storage queue.*/
  /* ------------------------------------------------------------*/

  if (PK0RW00.PK0RW-IXM > 1) /* If page was formatted*/
    if (PKWREC.PKWSELSW == "PK")
      PK0RW01.PK0RW-WHSE-CD = PK0RM001.XWHCD; /* whse code*/
      PK0RW01.PK0RW-MIN-UNITS = PK0RM001.PK0RM-MIN-UNITS; /* min unit*/
      PK0RW01.PK0RW-MAX-UNITS = PK0RM001.PK0RM-MAX-UNITS; /* max unit*/
      PK0RW01.PK0RW-MSTR-LVL-FL = PK0RM001.PK0RM-MSTR-LVL-FL; /**/
      PK0RW01.PK0RW-MSTR-SCHED-QTY = PK0RM001.PK0RM-MSTR-SCHED-QTY;
      PK0RW01.PK0RW-MIN-TIME = PK0RM001.PK0RM-MIN-TIME; /* min time*/
      PK0RW01.PK0RW-MAX-TIME = PK0RM001.PK0RM-MAX-TIME; /* max time*/
      PK0RW01.PK0RW-KUCCOID = PK0RM001.PK0RM-KUCCOID; /* Cust id*/
      PK0RW01.PK0RW-KUMSTRID = PK0RM001.PK0RM-KUMSTRID; /* Cust store*/
      PK0RW01.PK0RW-PK1CUOID = PK0RM001.PK0RM-PK1CUOID;
      PK0RW01.PK0RW-PK1NORID = PK0RM001.PK0RM-PK1NORID;
    else
      PK0RW01.PK0RW-WHSE-CD = PK0RM002.XWHCD; /* whse code*/
      PK0RW01.PK0RW-MIN-UNITS = PK0RM002.PK0RM-MIN-UNITS; /* min unit*/
      PK0RW01.PK0RW-MAX-UNITS = PK0RM002.PK0RM-MAX-UNITS; /* max unit*/
      PK0RW01.PK0RW-MSTR-LVL-FL = PK0RM002.PK0RM-MSTR-LVL-FL; /**/
      PK0RW01.PK0RW-MSTR-SCHED-QTY = PK0RM002.PK0RM-MSTR-SCHED-QTY;
      PK0RW01.PK0RW-MIN-TIME = PK0RM002.PK0RM-MIN-TIME; /* min time*/
      PK0RW01.PK0RW-MAX-TIME = PK0RM002.PK0RM-MAX-TIME; /* max time*/
      PK0RW01.PK0RW-KUCCOID = PK0RM002.PK0RM-KUCCOID; /* Cust id*/
      PK0RW01.PK0RW-KUMSTRID = PK0RM002.PK0RM-KUMSTRID; /* Cust store*/
      PK0RW01.PK0RW-PK1CUOID = PK0RM002.PK0RM-PK1CUOID;
      PK0RW01.PK0RW-PK1NORID = PK0RM002.PK0RM-PK1NORID;
    end

    PK0R-11500(); /* Add page to temporary storage*/

  end

  /* ------------------------------------------------------------*/
  /* Close the cursor for the selected set.*/
  /* ------------------------------------------------------------*/

  if (PWLREC.PWLFUNC == "N1")
    PWLREC.PWLFUNC = "C1";
  else
    if (PWLREC.PWLFUNC == "N2")
      PWLREC.PWLFUNC = "C2";
    else
      if (PWLREC.PWLFUNC == "N3")
        PWLREC.PWLFUNC = "C3";
      else
        if (PWLREC.PWLFUNC == "N4")
          PWLREC.PWLFUNC = "C4";
        end
      end
    end
  end
  PK0R-11600(); /* Close the selected set cursor*/

  /* ------------------------------------------------------------*/
  /* If no pages were formatted, indicate no data to display.*/
  /* ------------------------------------------------------------*/

  if (PK0RW00.TA5TSQIX == 0) /* No pages formatted*/

    PKWREC.PKWFRMAP = "11000"; /* Module identification*/
    converseLib.validationFailed(31); /* No data was found to display*/
    if (PKWREC.PKWSELSW == "PK")
      set PK0RM001.PK0RM-MIN-UNITS cursor; /* cursor*/
    else
      set PK0RM002.PK0RM-MIN-UNITS cursor; /* cursor*/
    end

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Indicate that the request for data is complete.*/
  /* ------------------------------------------------------------*/

  PK0RW00.PK0RW-SWR = "N"; /* Request for data switch*/

end // end PK0R-11000

// Purge any temporary storage
Function PK0R-11100()
  /* ------------------------------------------------------------*/
  /* Initialize the storage areas and indicators to be used.*/
  /* ------------------------------------------------------------*/

  set PK0RW01 empty; /* M001 display storage*/

  PK0RW00.PK0RW-SWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PK0RW00.TA5TSQIX = 0; /* Highest page number*/

  /* ------------------------------------------------------------*/
  /* Purge any temporary storage for this application.*/
  /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PK0RW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  /* ------------------------------------------------------------*/
  /* If successful, return to previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PKWREC.PKWFRMAP = "11100"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PKWREC.PKWFRMAP; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  if (PKWREC.PKWSELSW == "PK")
    TA1REC.TA1MAPNO = "M001"; /* Map number*/
  else
    TA1REC.TA1MAPNO = "M002"; /* Map number*/
  end

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PK0R-11100

// Select set and open cursor
Function PK0R-11200()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/

  set VPOOLH03 empty; /* Clear row storage area*/
  set PWLREC empty; /* Clear row storage area*/

  /* Use values entered on map to select the data*/

  if (PKWREC.PKWSELSW == "PK")
    VPOOLH03.XWHCD = PK0RM001.XWHCD;
    if (PK0RM001.PK0RM-KUCCOID > 0)
      PWLREC.PWLFUNC = "S4";
      VPOOLH03.KUCCOID = PK0RM001.PK0RM-KUCCOID;
      VPOOLH03.XNXCD = -1;
      VPOOLH03.OP1CUPO = "*";
      if (PK0RM001.PK0RM-KUMSTRID > 0)
        PK0RW01.PK0RW-KUMSTRID-CHA = PK0RM001.PK0RM-KUMSTRID;
        VPOOLH03.KUMSTRID = PK0RW01.PK0RW-KUMSTRID;
      else
        VPOOLH03.KUMSTRID = -1;
      end
    else
      if (PK0RM001.PK0RM-PK1CUOID > 0)
        PWLREC.PWLFUNC = "S3";
        VPOOLH03.PK1CUOID = PK0RM001.PK0RM-PK1CUOID;
        if (PK0RM001.PK0RM-PK1NORID > 0)
          VPOOLH03.PK1NORID = PK0RM001.PK0RM-PK1NORID;
        else
          VPOOLH03.PK1NORID = -1;
        end
      else
        if (PK0RM001.PK0RM-MIN-UNITS > 0)
          PWLREC.PWLFUNC = "S2";
          PWLREC.PWLFRMDT = PK0RM001.PK0RM-MIN-UNITS;
          PWLREC.PWLTODT = PK0RM001.PK0RM-MAX-UNITS;
        else
          PWLREC.PWLFUNC = "S1";
          PWLREC.PWLFRMDT = PK0RM001.PK0RM-MIN-TIME;
          PWLREC.PWLTODT = PK0RM001.PK0RM-MAX-TIME;
        end
      end
    end
  else
    VPOOLH03.XWHCD = PK0RM002.XWHCD;
    if (PK0RM002.PK0RM-KUCCOID > 0)
      PWLREC.PWLFUNC = "S4";
      VPOOLH03.KUCCOID = PK0RM002.PK0RM-KUCCOID;
      VPOOLH03.XNXCD = -1;
      VPOOLH03.OP1CUPO = "*";
      if (PK0RM002.PK0RM-KUMSTRID > " ")
        PK0RW01.PK0RW-KUMSTRID-CHA = PK0RM002.PK0RM-KUMSTRID;
        VPOOLH03.KUMSTRID = PK0RW01.PK0RW-KUMSTRID;
      else
        VPOOLH03.KUMSTRID = -1;
      end
    else
      if (PK0RM002.PK0RM-PK1CUOID > 0)
        PWLREC.PWLFUNC = "S3";
        VPOOLH03.PK1CUOID = PK0RM002.PK0RM-PK1CUOID;
        if (PK0RM002.PK0RM-PK1NORID > 0)
          VPOOLH03.PK1NORID = PK0RM002.PK0RM-PK1NORID;
        else
          VPOOLH03.PK1NORID = -1;
        end
      else
        if (PK0RM002.PK0RM-MIN-UNITS > 0)
          PWLREC.PWLFUNC = "S2";
          PWLREC.PWLFRMDT = PK0RM002.PK0RM-MIN-UNITS;
          PWLREC.PWLTODT = PK0RM002.PK0RM-MAX-UNITS;
        else
          PWLREC.PWLFUNC = "S1";
          PWLREC.PWLFRMDT = PK0RM002.PK0RM-MIN-TIME;
          PWLREC.PWLTODT = PK0RM002.PK0RM-MAX-TIME;
        end
      end
    end
  end

  try
    call "VPOOLH03" (PWLREC, SQLCA, VPOOLH03) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PKWREC.PKWFRMAP = "11200"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    if (PKWREC.PKWSELSW == "PK")
      converseLib.clearScreen();
       /* Clear screen before display*/
    else
      
      // VAGen Info - map = PK0RM002
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PKWREC.PKWFRMAP; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOOLH03.VPOOLH03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PK0R-11200

// Fetch next row in the cursor
Function PK0R-11300()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/

  try
    call "VPOOLH03" (PWLREC, SQLCA, VPOOLH03) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PK0RW00.PK0RW-SWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PKWREC.PKWFRMAP = "11300"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    if (PKWREC.PKWSELSW == "PK")
      converseLib.clearScreen();
       /* Clear screen before display*/
    else
      
      // VAGen Info - map = PK0RM002
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PKWREC.PKWFRMAP; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOOLH03.VPOOLH03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PK0R-11300

// Save data in display storage
Function PK0R-11400()
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/

  PK0RW01.PK0RW-XPPCD[PK0RW-IXM] = VPOOLH03.XPPCD;
  PK0RW01.PK0RW-DTL-KUCCOID[PK0RW-IXM] = VPOOLH03.KUCCOID;
  PK0RW01.PK0RW-DTL-KUMSTRID[PK0RW-IXM] = VPOOLH03.KUMSTRID;
  PK0RW01.PK0RW-DTL-PK1CUOID[PK0RW-IXM] = VPOOLH03.PK1CUOID;
  PK0RW01.PK0RW-DTL-PK1NORID[PK0RW-IXM] = VPOOLH03.PK1NORID;
  PK0RW01.PK0RW-OP1SPHDF[PK0RW-IXM] = VPOOLH03.OP1SPHDF;
  PK0RW01.PK0RW-LVL-FL[PK0RW-IXM] = VPOOLH03.PK-LVL-FL;
  PK0RW01.PK0RW-LVL-SCHED-QTY[PK0RW-IXM] = VPOOLH03.PK-LVL-SCHED-QTY;
  PK0RW01.PK0RW-TF1CARCD[PK0RW-IXM] = VPOOLH03.TF1CARCD;
  PK0RW01.PK0RW-PK4ORDFC-NUM[PK0RW-IXM] = VPOOLH03.PK4ORDFC;
  PK0RW01.PK0RW-PK4ORDRP[PK0RW-IXM] = VPOOLH03.PK4ORDRP;
  PK0RW01.PK0RW-PK4ORDTM-NUM[PK0RW-IXM] = VPOOLH03.PK4ORDTM;

  PK0RW00.PK0RW-IXM = PK0RW00.PK0RW-IXM + 1; /* Increment line index*/

end // end PK0R-11400

// Add  page to temporary storage
Function PK0R-11500()
  /* ------------------------------------------------------------*/
  /* Add the next page to temporary storage.*/
  /* ------------------------------------------------------------*/

  PK0RW01.XXXTSLEN = PK0RW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PK0RW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the storage area and indicators*/
  /* to be used.  Return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PK0RW01 empty; /* M001 display storage*/

    if (PKWREC.PKWSELSW == "PK")
      PK0RW01.PK0RW-WHSE-CD = PK0RM001.XWHCD; /* whse code*/
      PK0RW01.PK0RW-MIN-UNITS = PK0RM001.PK0RM-MIN-UNITS; /* min unit*/
      PK0RW01.PK0RW-MAX-UNITS = PK0RM001.PK0RM-MAX-UNITS; /* max unit*/
      PK0RW01.PK0RW-MSTR-LVL-FL = PK0RM001.PK0RM-MSTR-LVL-FL; /**/
      PK0RW01.PK0RW-MSTR-SCHED-QTY = PK0RM001.PK0RM-MSTR-SCHED-QTY;
      PK0RW01.PK0RW-MIN-TIME = PK0RM001.PK0RM-MIN-TIME; /* min time*/
      PK0RW01.PK0RW-MAX-TIME = PK0RM001.PK0RM-MAX-TIME; /* max time*/
      PK0RW01.PK0RW-KUCCOID = PK0RM001.PK0RM-KUCCOID; /* Cust id*/
      PK0RW01.PK0RW-KUMSTRID = PK0RM001.PK0RM-KUMSTRID; /* Cust store*/
      PK0RW01.PK0RW-PK1CUOID = PK0RM001.PK0RM-PK1CUOID; /* Cust order*/
      PK0RW01.PK0RW-PK1NORID = PK0RM001.PK0RM-PK1NORID; /* Sub order*/
    else
      PK0RW01.PK0RW-WHSE-CD = PK0RM002.XWHCD; /* whse code*/
      PK0RW01.PK0RW-MIN-UNITS = PK0RM002.PK0RM-MIN-UNITS; /* min unit*/
      PK0RW01.PK0RW-MAX-UNITS = PK0RM002.PK0RM-MAX-UNITS; /* max unit*/
      PK0RW01.PK0RW-MSTR-LVL-FL = PK0RM002.PK0RM-MSTR-LVL-FL; /**/
      PK0RW01.PK0RW-MSTR-SCHED-QTY = PK0RM002.PK0RM-MSTR-SCHED-QTY;
      PK0RW01.PK0RW-MIN-TIME = PK0RM002.PK0RM-MIN-TIME; /* min time*/
      PK0RW01.PK0RW-MAX-TIME = PK0RM002.PK0RM-MAX-TIME; /* max time*/
      PK0RW01.PK0RW-KUCCOID = PK0RM002.PK0RM-KUCCOID; /* Cust id*/
      PK0RW01.PK0RW-KUMSTRID = PK0RM002.PK0RM-KUMSTRID; /* Cust store*/
      PK0RW01.PK0RW-PK1CUOID = PK0RM002.PK0RM-PK1CUOID; /* Cust order*/
      PK0RW01.PK0RW-PK1NORID = PK0RM002.PK0RM-PK1NORID; /* Sub order*/
    end

    PK0RW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PKWREC.PKWFRMAP = "11500"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PKWREC.PKWFRMAP; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PK0R-11500

// Close selected set cursor
Function PK0R-11600()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/

  try
    call "VPOOLH03" (PWLREC, SQLCA, VPOOLH03) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PKWREC.PKWFRMAP = "11600"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PKWREC.PKWFRMAP; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH03"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PK0R-11600

// Format and converse the map
Function PK0R-12001()
  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/

  if (PK0RW00.PK0RW-SWR == "Y"           /* Obtain data failed*/
   || converseVar.validationMsgNum == 0  /* or no error found*/
   || converseVar.validationMsgNum == 24 /* or table is full error*/
   || converseVar.validationMsgNum == 32 /* or table update successful*/
   || converseVar.validationMsgNum == 504) /* or edit/enter message*/

    if (PK0RW00.PK0RW-SWF == "Y"
     || converseVar.validationMsgNum == 32) /* or table update successful*/
  /* Save header info in working storage*/
      PK0RW01.PK0RW-WHSE-CD = PK0RM001.XWHCD; /* whse code*/
      PK0RW01.PK0RW-MIN-UNITS = PK0RM001.PK0RM-MIN-UNITS; /* min unit*/
      PK0RW01.PK0RW-MAX-UNITS = PK0RM001.PK0RM-MAX-UNITS; /* max unit*/
      PK0RW01.PK0RW-MSTR-LVL-FL = PK0RM001.PK0RM-MSTR-LVL-FL; /**/
      PK0RW01.PK0RW-MSTR-SCHED-QTY = PK0RM001.PK0RM-MSTR-SCHED-QTY;
      PK0RW01.PK0RW-MIN-TIME = PK0RM001.PK0RM-MIN-TIME; /* min time*/
      PK0RW01.PK0RW-MAX-TIME = PK0RM001.PK0RM-MAX-TIME; /* max time*/
      PK0RW01.PK0RW-KUCCOID = PK0RM001.PK0RM-KUCCOID; /* Cust id*/
      PK0RW01.PK0RW-KUMSTRID = PK0RM001.PK0RM-KUMSTRID; /* Cust store*/
      PK0RW01.PK0RW-PK1CUOID = PK0RM001.PK0RM-PK1CUOID; /* Cust order*/
      PK0RW01.PK0RW-PK1NORID = PK0RM001.PK0RM-PK1NORID; /* Nike sub*/
      if (PK0RW00.XXXTSPAG == 0)
        PK0RW00.XXXTSPAG = 1;
      end
      PK0R-12101(); /* Format the data on the map*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/

  PK0RM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PK0RM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PK0RM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ")            /* or message text*/

    if (converseVar.validationMsgNum != 0) /* Message to display*/
      /* CONTINUE;*/
    else
      PK0RM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    /* MOVE PKWREC.PKWFRMAP TO PK0RM001.XXXPRCNM;/* Module identification*/

    set PK0RM001 alarm; /* Indicate sound alarm*/

  end

  converse PK0RM001 ;

  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/

  PKWREC.PKWFRMAP = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/
  PK0RW00.PK0RW-SFN = " "; /* reset function switch*/
   /* reset saved page*/
  PK0RW00.PK0RW-SAVE-PAGE = 0000;
  COMMAREA.CATOAP = PK0RM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PK0RM001.CAITEM; /* Application data*/
end // end PK0R-12001

// Format and converse the map
Function PK0R-12002()
  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/

  if (PK0RW00.PK0RW-SWR == "Y"           /* Obtain data failed*/
   || converseVar.validationMsgNum == 0  /* or no error found*/
   || converseVar.validationMsgNum == 24 /* or table is full error*/
   || converseVar.validationMsgNum == 32 /* or table update successful*/
   || converseVar.validationMsgNum == 504) /* or edit/enter message*/

    if (PK0RW00.PK0RW-SWF == "Y" /* Map must be formatted*/
     || converseVar.validationMsgNum == 32) /* or table update successful*/
  /* Save header info in working storage*/
      PK0RW01.PK0RW-WHSE-CD = PK0RM002.XWHCD; /* whse code*/
      PK0RW01.PK0RW-MIN-UNITS = PK0RM002.PK0RM-MIN-UNITS; /* min unit*/
      PK0RW01.PK0RW-MAX-UNITS = PK0RM002.PK0RM-MAX-UNITS; /* max unit*/
      PK0RW01.PK0RW-MSTR-LVL-FL = PK0RM002.PK0RM-MSTR-LVL-FL; /**/
      PK0RW01.PK0RW-MSTR-SCHED-QTY = PK0RM002.PK0RM-MSTR-SCHED-QTY;
      PK0RW01.PK0RW-MIN-TIME = PK0RM002.PK0RM-MIN-TIME; /* min time*/
      PK0RW01.PK0RW-MAX-TIME = PK0RM002.PK0RM-MAX-TIME; /* max time*/
      PK0RW01.PK0RW-KUCCOID = PK0RM002.PK0RM-KUCCOID; /* Cust id*/
      PK0RW01.PK0RW-KUMSTRID = PK0RM002.PK0RM-KUMSTRID; /* Cust store*/
      PK0RW01.PK0RW-PK1CUOID = PK0RM002.PK0RM-PK1CUOID;
      PK0RW01.PK0RW-PK1NORID = PK0RM002.PK0RM-PK1NORID;
      if (PK0RW00.XXXTSPAG == 0)
        PK0RW00.XXXTSPAG = 1;
      end
      PK0R-12102(); /* Format the data on the map*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/

  PK0RM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PK0RM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PK0RM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ")            /* or message text*/

    if (converseVar.validationMsgNum != 0) /* Message to display*/
      /* CONTINUE;*/
    else
      PK0RM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    /* MOVE PKWREC.PKWFRMAP TO PK0Rm002.XXXPRCNM;/* Module identification*/

    set PK0RM002 alarm; /* Indicate sound alarm*/

  end

  converse PK0RM002 ;

  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/

  PKWREC.PKWFRMAP = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/
  PK0RW00.PK0RW-SFN = " "; /* reset function switch*/
   /* reset saved page*/
  PK0RW00.PK0RW-SAVE-PAGE = 0000;
  COMMAREA.CATOAP = PK0RM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PK0RM002.CAITEM; /* Application data*/
end // end PK0R-12002

// Format the display data
Function PK0R-12101()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/

  set PK0RM001 initial; /* M001 input/output area*/

  PK0RW00.PK0RW-SWF = "N"; /* Format the map switch*/

  /* ------------------------------------------------------------*/
  /* If audit changes exist, get the page from temp storage that the*/
  /* record's on and display it.*/
  /* ------------------------------------------------------------*/

  if (PK0RW00.PK0RW-SAVE-PAGE != 0) /* if page saved off*/

    PK0RW00.XXXTSPAG = PK0RW-SAVE-PAGE; /* use saved page*/

    PK0R-12200(); /* Obtain temporary storage page*/

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set PK0RM001.XXXLITPG skip; /* "PAGE" literal*/
    PK0RM001.XXXTSPAG = PK0RW00.XXXTSPAG; /* Current page*/
    set PK0RM001.XXXLITOF skip; /* "OF" literal*/
    PK0RM001.TA5TSQIX = PK0RW00.TA5TSQIX; /* Highest page*/
    set PK0RM001.PK0RM-ACT[1] cursor;

  /* ------------------------------------------------------------*/
  /* If the page in storage is not the page to be displayed,*/
  /* obtain the desired page from temporary storage.*/
  /* ------------------------------------------------------------*/

  else
    if (PK0RW00.TA5TSQIX > 0) /* Pages were formatted*/

      if (PK0RW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

        /* ------------------------------------------------------------*/
        /* If the current page has been changed, update the page in*/
        /* storage before obtaining the next one to display.*/
        /* ------------------------------------------------------------*/

        if (PK0RW00.PK0RW-SWU == "Y") /* Current page was changed*/

          PK0R-12300(); /* Update temporary storage page*/

          PK0RW00.PK0RW-SWU = "N"; /* Storage update switch*/

        end

        /* ------------------------------------------------------------*/
        /* If the desired page number is greater than the highest page*/
        /* in storage, default to the highest page number.*/
        /* ------------------------------------------------------------*/

        if (PK0RW00.XXXTSPAG > PK0RW00.TA5TSQIX) /* Desired greater highest*/
          PK0RW00.XXXTSPAG = PK0RW00.TA5TSQIX; /* Default to highest*/
        end

        if (PK0RW00.XXXTSPAG > 0)
          PK0R-12200(); /* Obtain temporary storage page*/
        end
        set PK0RM001.PK0RM-ACT[1] cursor;

      end

      /* ------------------------------------------------------------*/
      /* Display the page information on the screen.*/
      /* ------------------------------------------------------------*/

      set PK0RM001.XXXLITPG skip; /* "PAGE" literal*/
      PK0RM001.XXXTSPAG = PK0RW00.XXXTSPAG; /* Current page*/
      set PK0RM001.XXXLITOF skip; /* "OF" literal*/
      PK0RM001.TA5TSQIX = PK0RW00.TA5TSQIX; /* Highest page*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
                /* WHSE and WHSE description in the header*/
  PK0RM001.XWHCD = PK0RW01.PK0RW-WHSE-CD;
   /* get description*/
  if (PK0RW01.PK0RW-WHSE-CD in XWHTBL.XWHCD)
    PK0RM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end

  PK0RM001.PK0RM-MIN-UNITS = PK0RW01.PK0RW-MIN-UNITS;
  PK0RM001.PK0RM-MAX-UNITS = PK0RW01.PK0RW-MAX-UNITS;
  PK0RM001.PK0RM-MSTR-LVL-FL = PK0RW01.PK0RW-MSTR-LVL-FL;
  PK0RM001.PK0RM-MSTR-SCHED-QTY = PK0RW01.PK0RW-MSTR-SCHED-QTY;
  PK0RM001.PK0RM-MIN-TIME = PK0RW01.PK0RW-MIN-TIME;
  PK0RM001.PK0RM-MAX-TIME = PK0RW01.PK0RW-MAX-TIME;
  PK0RM001.PK0RM-KUCCOID = PK0RW01.PK0RW-KUCCOID;
  if (PK0RW01.PK0RW-KUMSTRID == "0000")
    PK0RM001.PK0RM-KUMSTRID = " ";
  else
    PK0RM001.PK0RM-KUMSTRID = PK0RW01.PK0RW-KUMSTRID;
  end
  PK0RM001.PK0RM-PK1CUOID = PK0RW01.PK0RW-PK1CUOID;
  PK0RM001.PK0RM-PK1NORID = PK0RW01.PK0RW-PK1NORID;
  if (PK0RW01.PK0RW-WHSE-CD == "51"
   || PK0RW01.PK0RW-WHSE-CD == "42")
    PK0RM001.PK0RM-HDR1-FIRST = "ORDER ";
    PK0RM001.PK0RM-HDR1-SCND = " TIME ";
    PK0RM001.PK0RM-HDR2-FIRST = "      ";
    PK0RM001.PK0RM-HDR2-SCND = "       ";
  else
    PK0RM001.PK0RM-HDR1-FIRST = "ORDER ";
    PK0RM001.PK0RM-HDR1-SCND = "FC QTY";
    PK0RM001.PK0RM-HDR2-FIRST = "ORDER ";
    PK0RM001.PK0RM-HDR2-SCND = "RPK QTY";
  end

  PK0RW00.PK0RW-IXM = 1; /* Initialize map index*/
  while (PK0RW00.PK0RW-IXM <= 10) /* Until screen is full*/

    PK0RM001.PK0RM-ACT[PK0RW-IXM] = PK0RW01.PK0RW-ACT[PK0RW-IXM];
    PK0RM001.TF1CARCD[PK0RW-IXM] = PK0RW01.PK0RW-TF1CARCD[PK0RW-IXM];
    PK0RM001.XPPCD[PK0RW-IXM] = PK0RW01.PK0RW-XPPCD[PK0RW-IXM];
    PK0RM001.PK1CUOID[PK0RW-IXM] = PK0RW01.PK0RW-DTL-PK1CUOID[PK0RW-IXM];
    PK0RM001.PK1NORID[PK0RW-IXM] = PK0RW01.PK0RW-DTL-PK1NORID[PK0RW-IXM];
    PK0RM001.OP1SPHDF[PK0RW-IXM] = PK0RW01.PK0RW-OP1SPHDF[PK0RW-IXM];
    PK0RM001.PK0RM-LVL-FL[PK0RW-IXM] = PK0RW01.PK0RW-LVL-FL[PK0RW-IXM];
    PK0RM001.PK0RM-LVL-SCHED-QTY[PK0RW-IXM] = PK0RW01.PK0RW-LVL-SCHED-QTY[PK0RW-IXM];
    PK0RM001.KUCCOID[PK0RW-IXM] = PK0RW01.PK0RW-DTL-KUCCOID[PK0RW-IXM];
    if (PK0RW01.PK0RW-DTL-KUMSTRID[PK0RW-IXM] == "0000")
      PK0RM001.KUMSTRID[PK0RW-IXM] = " ";
    else
      PK0RM001.KUMSTRID[PK0RW-IXM] = PK0RW01.PK0RW-DTL-KUMSTRID[PK0RW-IXM];
    end
    if (PK0RW01.PK0RW-WHSE-CD == "51"
     || PK0RW01.PK0RW-WHSE-CD == "42")
      PK0R-12110(); /* format order time*/
     /* MOVE PK0RW01.PK0RW-PK4ORDTM(PK0RW-IXM) TO*/
       /* PK0RM001.PK0RM-COL1(PK0RW-IXM);*/
      PK0RM001.PK0RM-COL1[PK0RW-IXM] = PK0RW00.PK0RW-FORMAT2;
    else
      PK0R-12120(); /* format FC quantity*/
      PK0RM001.PK0RM-COL1[PK0RW-IXM] = PK0RW01.PK0RW-PK4ORDFC[PK0RW-IXM];
      PK0RM001.PK0RM-COL2[PK0RW-IXM] = PK0RW01.PK0RW-PK4ORDRP[PK0RW-IXM];
    end
    PK0RW00.PK0RW-IXM = PK0RW00.PK0RW-IXM + 1;
                                   /* Increment map index*/
  end

end // end PK0R-12101

// Format the display data
Function PK0R-12102()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/

  set PK0RM002 initial; /* m002 input/output area*/

  PK0RW00.PK0RW-SWF = "N"; /* Format the map switch*/

  /* ------------------------------------------------------------*/
  /* If audit changes exist, get the page from temp storage that the*/
  /* record's on and display it.*/
  /* ------------------------------------------------------------*/

  if (PK0RW00.PK0RW-SAVE-PAGE != 0) /* if page saved off*/

    PK0RW00.XXXTSPAG = PK0RW-SAVE-PAGE; /* use saved page*/

    PK0R-12200(); /* Obtain temporary storage page*/

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set PK0RM002.XXXLITPG skip; /* "PAGE" literal*/
    PK0RM002.XXXTSPAG = PK0RW00.XXXTSPAG; /* Current page*/
    set PK0RM002.XXXLITOF skip; /* "OF" literal*/
    PK0RM002.TA5TSQIX = PK0RW00.TA5TSQIX; /* Highest page*/
    set PK0RM002.PK0RM-ACT[1] cursor;

  /* ------------------------------------------------------------*/
  /* If the page in storage is not the page to be displayed,*/
  /* obtain the desired page from temporary storage.*/
  /* ------------------------------------------------------------*/

  else
    if (PK0RW00.TA5TSQIX > 0) /* Pages were formatted*/

      if (PK0RW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

        /* ------------------------------------------------------------*/
        /* If the current page has been changed, update the page in*/
        /* storage before obtaining the next one to display.*/
        /* ------------------------------------------------------------*/

        if (PK0RW00.PK0RW-SWU == "Y") /* Current page was changed*/

          PK0R-12300(); /* Update temporary storage page*/

          PK0RW00.PK0RW-SWU = "N"; /* Storage update switch*/

        end

        /* ------------------------------------------------------------*/
        /* If the desired page number is greater than the highest page*/
        /* in storage, default to the highest page number.*/
        /* ------------------------------------------------------------*/

        if (PK0RW00.XXXTSPAG > PK0RW00.TA5TSQIX) /* Desired greater highest*/
          PK0RW00.XXXTSPAG = PK0RW00.TA5TSQIX; /* Default to highest*/
        end

        if (PK0RW00.XXXTSPAG > 0)
          PK0R-12200(); /* Obtain temporary storage page*/
        end
        set PK0RM002.PK0RM-ACT[1] cursor;

      end

      /* ------------------------------------------------------------*/
      /* Display the page information on the screen.*/
      /* ------------------------------------------------------------*/

      set PK0RM002.XXXLITPG skip; /* "PAGE" literal*/
      PK0RM002.XXXTSPAG = PK0RW00.XXXTSPAG; /* Current page*/
      set PK0RM002.XXXLITOF skip; /* "OF" literal*/
      PK0RM002.TA5TSQIX = PK0RW00.TA5TSQIX; /* Highest page*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
                /* WHSE and WHSE description in the header*/
  PK0RM002.XWHCD = PK0RW01.PK0RW-WHSE-CD;
   /* get description*/
  if (PK0RW01.PK0RW-WHSE-CD in XWHTBL.XWHCD)
    PK0RM002.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end

  PK0RM002.PK0RM-MIN-UNITS = PK0RW01.PK0RW-MIN-UNITS;
  PK0RM002.PK0RM-MAX-UNITS = PK0RW01.PK0RW-MAX-UNITS;
  PK0RM002.PK0RM-MSTR-LVL-FL = PK0RW01.PK0RW-MSTR-LVL-FL;
  PK0RM002.PK0RM-MSTR-SCHED-QTY = PK0RW01.PK0RW-MSTR-SCHED-QTY;
  PK0RM002.PK0RM-MIN-TIME = PK0RW01.PK0RW-MIN-TIME;
  PK0RM002.PK0RM-MAX-TIME = PK0RW01.PK0RW-MAX-TIME;
  PK0RM002.PK0RM-KUCCOID = PK0RW01.PK0RW-KUCCOID;
  if (PK0RW01.PK0RW-KUMSTRID == "0000")
    PK0RM002.PK0RM-KUMSTRID = " ";
  else
    PK0RM002.PK0RM-KUMSTRID = PK0RW01.PK0RW-KUMSTRID;
  end
  PK0RM002.PK0RM-PK1CUOID = PK0RW01.PK0RW-PK1CUOID;
  PK0RM002.PK0RM-PK1NORID = PK0RW01.PK0RW-PK1NORID;
  if (PK0RW01.PK0RW-WHSE-CD == "51"
   || PK0RW01.PK0RW-WHSE-CD == "42")
    PK0RM002.PK0RM-HDR1-FIRST = "ORDER ";
    PK0RM002.PK0RM-HDR1-SCND = " TIME ";
    PK0RM002.PK0RM-HDR2-FIRST = "      ";
    PK0RM002.PK0RM-HDR2-SCND = "       ";
  else
    PK0RM002.PK0RM-HDR1-FIRST = "ORDER ";
    PK0RM002.PK0RM-HDR1-SCND = "FC QTY";
    PK0RM002.PK0RM-HDR2-FIRST = "ORDER ";
    PK0RM002.PK0RM-HDR2-SCND = "RPK QTY";
  end

  PK0RW00.PK0RW-IXM = 1; /* Initialize map index*/
  while (PK0RW00.PK0RW-IXM <= 10) /* Until screen is full*/

    PK0RM002.PK0RM-ACT[PK0RW-IXM] = PK0RW01.PK0RW-ACT[PK0RW-IXM];
    PK0RM002.TF1CARCD[PK0RW-IXM] = PK0RW01.PK0RW-TF1CARCD[PK0RW-IXM];
    PK0RM002.XPPCD[PK0RW-IXM] = PK0RW01.PK0RW-XPPCD[PK0RW-IXM];
    PK0RM002.PK1CUOID[PK0RW-IXM] = PK0RW01.PK0RW-DTL-PK1CUOID[PK0RW-IXM];
    PK0RM002.PK1NORID[PK0RW-IXM] = PK0RW01.PK0RW-DTL-PK1NORID[PK0RW-IXM];
    PK0RM002.OP1SPHDF[PK0RW-IXM] = PK0RW01.PK0RW-OP1SPHDF[PK0RW-IXM];
    PK0RM002.PK0RM-LVL-FL[PK0RW-IXM] = PK0RW01.PK0RW-LVL-FL[PK0RW-IXM];
    PK0RM002.PK0RM-LVL-SCHED-QTY[PK0RW-IXM] = PK0RW01.PK0RW-LVL-SCHED-QTY[PK0RW-IXM];
    PK0RM002.KUCCOID[PK0RW-IXM] = PK0RW01.PK0RW-DTL-KUCCOID[PK0RW-IXM];
    if (PK0RW01.PK0RW-DTL-KUMSTRID[PK0RW-IXM] == "0000")
      PK0RM002.KUMSTRID[PK0RW-IXM] = " ";
    else
      PK0RM002.KUMSTRID[PK0RW-IXM] = PK0RW01.PK0RW-DTL-KUMSTRID[PK0RW-IXM];
    end
    if (PK0RW01.PK0RW-WHSE-CD == "51"
     || PK0RW01.PK0RW-WHSE-CD == "42")
      PK0R-12110(); /* format order time*/
     /* MOVE PK0RW01.PK0RW-PK4ORDTM(PK0RW-IXM) TO*/
       /* PK0RM002.PK0RM-COL1(PK0RW-IXM);*/
      PK0RM002.PK0RM-COL1[PK0RW-IXM] = PK0RW00.PK0RW-FORMAT2;
    else
      PK0R-12120(); /* format FC quantity*/
      PK0RM002.PK0RM-COL1[PK0RW-IXM] = PK0RW01.PK0RW-PK4ORDFC[PK0RW-IXM];
      PK0RM002.PK0RM-COL2[PK0RW-IXM] = PK0RW01.PK0RW-PK4ORDRP[PK0RW-IXM];
    end
    PK0RW00.PK0RW-IXM = PK0RW00.PK0RW-IXM + 1;
                                   /* Increment map index*/
  end

end // end PK0R-12102

// Format the display data
Function PK0R-12110()
  /* ------------------------------------------------------------*/
  /* format the order time into a character field to eliminate*/
  /* leading zeros.*/
  /* ------------------------------------------------------------*/

  PK0RW00.PK0RW-IX1 = 1;
  PK0RW00.PK0RW-FORMAT = PK0RW01.PK0RW-PK4ORDTM[PK0RW-IXM];
  while (PK0RW-IX1 <= 10)
    if (PK0RW00.PK0RW-CHAR[PK0RW-IX1] == "0")
      PK0RW00.PK0RW-CHAR[PK0RW-IX1] = " ";
    else
      PK0RW00.PK0RW-IX1 = 10;
    end
    PK0RW00.PK0RW-IX1 = PK0RW00.PK0RW-IX1 + 1;
  end

  PK0RW00.PK0RW-IX1 = 10;
  PK0RW00.PK0RW-IX2 = 7;
  PK0RW00.PK0RW-FORMAT2 = "   ";
  while (PK0RW-IX2 >= 1)
    if (PK0RW-IX1 == 8
     && PK0RW00.PK0RW-CHAR[8] != ".")
      if (PK0RW00.PK0RW-CHAR[9] > " ")
        PK0RW00.PK0RW-CHAR2[PK0RW-IX2] = ".";
        PK0RW00.PK0RW-IX2 = PK0RW00.PK0RW-IX2 - 1;
      else
        if (PK0RW00.PK0RW-CHAR[9] == " "
         && PK0RW00.PK0RW-CHAR[10] > " ")
          PK0RW00.PK0RW-CHAR2[6] = "0";
          PK0RW00.PK0RW-CHAR2[PK0RW-IX2] = ".";
          PK0RW00.PK0RW-IX2 = PK0RW00.PK0RW-IX2 - 1;
        end
      end
    end

    PK0RW00.PK0RW-CHAR2[PK0RW-IX2] = PK0RW00.PK0RW-CHAR[PK0RW-IX1];
    PK0RW00.PK0RW-IX1 = PK0RW00.PK0RW-IX1 - 1;
    PK0RW00.PK0RW-IX2 = PK0RW00.PK0RW-IX2 - 1;
  end

   /* MOVE PK0RW00.PK0RW-FORMAT2 TO*/
    /* PK0RW01.PK0RW-PK4ORDTM(PK0RW-IXM);*/

end // end PK0R-12110

// Format the display data
Function PK0R-12120()
  /* ------------------------------------------------------------*/
  /* format the FC quantity into a character field to eliminate*/
  /* leading zeros.*/
  /* ------------------------------------------------------------*/

  PK0RW00.PK0RW-IX1 = 1;
  PK0RW00.PK0RW-FORMAT = PK0RW01.PK0RW-PK4ORDFC[PK0RW-IXM];
  while (PK0RW-IX1 <= 10)
    if (PK0RW00.PK0RW-CHAR[PK0RW-IX1] == "0")
      PK0RW00.PK0RW-CHAR[PK0RW-IX1] = " ";
    else
      PK0RW00.PK0RW-IX1 = 10;
    end
    PK0RW00.PK0RW-IX1 = PK0RW00.PK0RW-IX1 + 1;
  end

  PK0RW00.PK0RW-IX1 = 10;
  PK0RW00.PK0RW-IX2 = 7;
  PK0RW00.PK0RW-FORMAT2 = "   ";
  while (PK0RW-IX2 >= 1)
    PK0RW00.PK0RW-CHAR2[PK0RW-IX2] = PK0RW00.PK0RW-CHAR[PK0RW-IX1];
    PK0RW00.PK0RW-IX1 = PK0RW00.PK0RW-IX1 - 1;
    PK0RW00.PK0RW-IX2 = PK0RW00.PK0RW-IX2 - 1;
  end

  PK0RW01.PK0RW-PK4ORDFC[PK0RW-IXM] = PK0RW00.PK0RW-FORMAT2;

end // end PK0R-12120

// Read temporary storage page
Function PK0R-12200()
  /* ------------------------------------------------------------*/
  /* Obtain the next page of data to display.*/
  /* ------------------------------------------------------------*/

  PK0RW01.XXXTSLEN = PK0RW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PK0RW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PK0RW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PKWREC.PKWFRMAP = "12200"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PKWREC.PKWFRMAP; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PK0R-12200

// Update temporary storage page
Function PK0R-12300()
  /* ------------------------------------------------------------*/
  /* Update the page in temporary storage.*/
  /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK")
    PK0R-12311();
  else
    PK0R-12312();
  end

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PK0RW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PKWREC.PKWFRMAP = "12300"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PKWREC.PKWFRMAP; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PK0R-12300

// Save data in display storage
Function PK0R-12311()
  /* ------------------------------------------------------------*/
  /* Save the data from the map row in display storage.*/
  /* ------------------------------------------------------------*/

  PK0RW00.PK0RW-IXM = 1;
  while (PK0RW00.PK0RW-IXM <= 10)

    PK0RW01.PK0RW-TF1CARCD[PK0RW-IXM] = PK0RM001.TF1CARCD[PK0RW-IXM];
    PK0RW01.PK0RW-XPPCD[PK0RW-IXM] = PK0RM001.XPPCD[PK0RW-IXM];
    PK0RW01.PK0RW-DTL-PK1CUOID[PK0RW-IXM] = PK0RM001.PK1CUOID[PK0RW-IXM];
    PK0RW01.PK0RW-DTL-PK1NORID[PK0RW-IXM] = PK0RM001.PK1NORID[PK0RW-IXM];
    PK0RW01.PK0RW-OP1SPHDF[PK0RW-IXM] = PK0RM001.OP1SPHDF[PK0RW-IXM];
    PK0RW01.PK0RW-LVL-FL[PK0RW-IXM] = PK0RM001.PK0RM-LVL-FL[PK0RW-IXM];
    PK0RW01.PK0RW-LVL-SCHED-QTY[PK0RW-IXM] = PK0RM001.PK0RM-LVL-SCHED-QTY[PK0RW-IXM];
    PK0RW01.PK0RW-DTL-KUCCOID[PK0RW-IXM] = PK0RM001.KUCCOID[PK0RW-IXM];
    PK0RW01.PK0RW-DTL-KUMSTRID[PK0RW-IXM] = PK0RM001.KUMSTRID[PK0RW-IXM];

    PK0RW00.PK0RW-IXM = PK0RW00.PK0RW-IXM + 1; /* Increment line index*/
  end

end // end PK0R-12311

// Save data in display storage
Function PK0R-12312()
  /* ------------------------------------------------------------*/
  /* Save the data from the map row in display storage.*/
  /* ------------------------------------------------------------*/

  PK0RW00.PK0RW-IXM = 1;
  while (PK0RW00.PK0RW-IXM <= 10)

    PK0RW01.PK0RW-TF1CARCD[PK0RW-IXM] = PK0RM002.TF1CARCD[PK0RW-IXM];
    PK0RW01.PK0RW-XPPCD[PK0RW-IXM] = PK0RM002.XPPCD[PK0RW-IXM];
    PK0RW01.PK0RW-DTL-PK1CUOID[PK0RW-IXM] = PK0RM002.PK1CUOID[PK0RW-IXM];
    PK0RW01.PK0RW-DTL-PK1NORID[PK0RW-IXM] = PK0RM002.PK1NORID[PK0RW-IXM];
    PK0RW01.PK0RW-OP1SPHDF[PK0RW-IXM] = PK0RM002.OP1SPHDF[PK0RW-IXM];
    PK0RW01.PK0RW-LVL-FL[PK0RW-IXM] = PK0RM002.PK0RM-LVL-FL[PK0RW-IXM];
    PK0RW01.PK0RW-LVL-SCHED-QTY[PK0RW-IXM] = PK0RM002.PK0RM-LVL-SCHED-QTY[PK0RW-IXM];
    PK0RW01.PK0RW-DTL-KUCCOID[PK0RW-IXM] = PK0RM002.KUCCOID[PK0RW-IXM];
    PK0RW01.PK0RW-DTL-KUMSTRID[PK0RW-IXM] = PK0RM002.KUMSTRID[PK0RW-IXM];

    PK0RW00.PK0RW-IXM = PK0RW00.PK0RW-IXM + 1; /* Increment line index*/
  end

end // end PK0R-12312

// Check attention identifier
Function PK0R-13001()
  /* -------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PK0RW00.PK0RW-SWR == "Y") /* Request for data*/
      set PK0RW01 empty; /* M001 display storage*/
    end

    PK0RW00.PK0RW-SWF = "Y"; /* Format the map switch*/
    PK0RW00.PK0RW-SWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/

  if (PK0RM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PK0R-11100(); /* Purge temporary storage*/

      COMMAREA.CATOAP = PK0RM001.CATOAP;
      XSEXIT(); /* Exit to another application*/

      set PK0RM001.CATOAP cursor, bold; /* Highlight*/

    else

      PKWREC.PKWFRMAP = "13001"; /* Module identification*/
      converseLib.validationFailed(12); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf20) /* or PF20 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD0G";
      COMMAREA.CAITEM = "PK0RM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3 /* PF3 was pressed*/
     || converseVar.eventKey is pf20) /* PF20 was pressed*/
      COMMAREA.XWHCD = PK0RM001.XWHCD;
      COMMAREA.CATOAP = "PW0V"; /* TO application*/
    end

    if (converseVar.eventKey is pf4) /* PF1 was pressed*/
      COMMAREA.CATOAP = "MN0M";
    end

    PK0R-11100(); /* Purge temporary storage*/

    XSEXIT(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf12  /* and PF12 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14) /* and PF14 was not pressed*/

    PKWREC.PKWFRMAP = "13001"; /* Module identification*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end
  /* ------------------------------------------------------------*/
  /* If search key changed, get new data*/
  /* ------------------------------------------------------------*/

  if (PK0RW01.PK0RW-WHSE-CD != PK0RM001.XWHCD
   || PK0RW01.PK0RW-MIN-UNITS != PK0RM001.PK0RM-MIN-UNITS
   || PK0RW01.PK0RW-MAX-UNITS != PK0RM001.PK0RM-MAX-UNITS
   || PK0RW01.PK0RW-MSTR-LVL-FL != PK0RM001.PK0RM-MSTR-LVL-FL
   || PK0RW01.PK0RW-MSTR-SCHED-QTY != PK0RM001.PK0RM-MSTR-SCHED-QTY
   || PK0RW01.PK0RW-MIN-TIME != PK0RM001.PK0RM-MIN-TIME
   || PK0RW01.PK0RW-MAX-TIME != PK0RM001.PK0RM-MAX-TIME
   || PK0RW01.PK0RW-KUCCOID != PK0RM001.PK0RM-KUCCOID
   || PK0RW01.PK0RW-KUMSTRID != PK0RM001.PK0RM-KUMSTRID
   || PK0RW01.PK0RW-PK1CUOID != PK0RM001.PK0RM-PK1CUOID
   || PK0RW01.PK0RW-PK1NORID != PK0RM001.PK0RM-PK1NORID)
    PK0RW00.PK0RW-SWR = "Y"; /* Request for data switch*/
    return; /* return to previous process*/
  end

end // end PK0R-13001

// Check attention identifier
Function PK0R-13002()
  /* -------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PK0RW00.PK0RW-SWR == "Y") /* Request for data*/
      set PK0RW01 empty; /* m002 display storage*/
    end

    PK0RW00.PK0RW-SWF = "Y"; /* Format the map switch*/
    PK0RW00.PK0RW-SWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/

  if (PK0RM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PK0R-11100(); /* Purge temporary storage*/

      COMMAREA.CATOAP = PK0RM002.CATOAP;
      XSEXIT(); /* Exit to another application*/

      set PK0RM002.CATOAP cursor, bold; /* Highlight*/

    else

      PKWREC.PKWFRMAP = "13002"; /* Module identification*/
      converseLib.validationFailed(12); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf20) /* or PF20 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD0G";
      COMMAREA.CAITEM = "PK0RM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.XWHCD = PK0RM002.XWHCD;
      COMMAREA.CATOAP = "PW0W"; /* TO application*/
    end

    if (converseVar.eventKey is pf20) /* PF20 was pressed*/
      COMMAREA.XWHCD = PK0RM002.XWHCD;
      COMMAREA.CATOAP = "PK0A"; /* TO application*/
    end

    if (converseVar.eventKey is pf4) /* PF1 was pressed*/
      COMMAREA.CATOAP = "MN0M";
    end

    PK0R-11100(); /* Purge temporary storage*/

    XSEXIT(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf12  /* and PF12 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14) /* and PF14 was not pressed*/

    PKWREC.PKWFRMAP = "13002"; /* Module identification*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      
      // VAGen Info - map = PK0RM002
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end
  /* ------------------------------------------------------------*/
  /* If search key changed, get new data*/
  /* ------------------------------------------------------------*/

  if (PK0RW01.PK0RW-WHSE-CD != PK0RM002.XWHCD
   || PK0RW01.PK0RW-MIN-UNITS != PK0RM002.PK0RM-MIN-UNITS
   || PK0RW01.PK0RW-MAX-UNITS != PK0RM002.PK0RM-MAX-UNITS
   || PK0RW01.PK0RW-MSTR-LVL-FL != PK0RM002.PK0RM-MSTR-LVL-FL
   || PK0RW01.PK0RW-MSTR-SCHED-QTY != PK0RM002.PK0RM-MSTR-SCHED-QTY
   || PK0RW01.PK0RW-MIN-TIME != PK0RM002.PK0RM-MIN-TIME
   || PK0RW01.PK0RW-MAX-TIME != PK0RM002.PK0RM-MAX-TIME
   || PK0RW01.PK0RW-KUCCOID != PK0RM002.PK0RM-KUCCOID
   || PK0RW01.PK0RW-KUMSTRID != PK0RM002.PK0RM-KUMSTRID
   || PK0RW01.PK0RW-PK1CUOID != PK0RM002.PK0RM-PK1CUOID
   || PK0RW01.PK0RW-PK1NORID != PK0RM002.PK0RM-PK1NORID)
    PK0RW00.PK0RW-SWR = "Y"; /* Request for data switch*/
    return; /* return to previous process*/
  end

end // end PK0R-13002

// Reset highlighted fields
Function PK0R-14001()
  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

  set PK0RM001.XWHCD normal; /* reset whse cd*/
  set PK0RM001.PK0RM-MIN-UNITS normal; /* reset min units*/
  set PK0RM001.PK0RM-MAX-UNITS normal; /* reset max units*/
  set PK0RM001.PK0RM-MSTR-LVL-FL normal; /* reset master cntrl flag*/
  set PK0RM001.PK0RM-MSTR-SCHED-QTY normal;
  set PK0RM001.PK0RM-MIN-TIME normal; /* reset min time*/
  set PK0RM001.PK0RM-MAX-TIME normal; /* reset max time*/
  set PK0RM001.PK0RM-KUCCOID normal; /* reset cust id*/
  set PK0RM001.PK0RM-KUMSTRID normal;
  set PK0RM001.PK0RM-PK1CUOID normal; /* reset order*/
  set PK0RM001.PK0RM-PK1NORID normal;

  PK0RW00.PK0RW-IXM = 1;
  while (PK0RW00.PK0RW-IXM <= 10)
    set PK0RM001.PK0RM-ACT[PK0RW-IXM] normal;
    set PK0RM001.PK0RM-LVL-FL[PK0RW-IXM] normal;
    set PK0RM001.PK0RM-LVL-SCHED-QTY[PK0RW-IXM] normal;

    PK0RW00.PK0RW-IXM = PK0RW00.PK0RW-IXM + 1;
  end

  set PK0RM001.CATOAP initialAttributes; /* TO application*/
  set PK0RM001.CAITEM initialAttributes; /* Application data*/

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (PK0RM001.XWHCD == "?") /* if any ? entered*/

    if (PK0RM001.XWHCD == "?") /* if ? entered in whse*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "              WAREHOUSE      "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXWH01(); /* perform whse window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  code and description to the map.                     **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PK0RM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX];
       /* MOVE XWHTBL.XWHCD(XX0XWPIX) TO PK0RW01.PK0RW-WHSE-CD;*/
        PK0RM001.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX];
        set PK0RM001.XWHCD cursor; /* put cursor on whse cd*/
      else
        PK0RM001.XWHCD = " "; /* clear fields*/
        set PK0RM001.XWHCD cursor; /* put cursor on whse cd*/
        PK0RM001.XWHABRV = " "; /* clear description*/
      end

    end

    converseLib.clearScreen();
     /* restore the original map*/

    PK0RW00.PK0RW-SWR = "N"; /* no to request for data*/
    PK0RW00.PK0RW-SWF = "N"; /* no to format map*/

    exit stack; /* go display map*/

  end

end // end PK0R-14001

// Reset highlighted fields
Function PK0R-14002()
  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

  set PK0RM002.XWHCD normal; /* reset whse cd*/
  set PK0RM002.PK0RM-MIN-UNITS normal; /* reset min units*/
  set PK0RM002.PK0RM-MAX-UNITS normal; /* reset max units*/
  set PK0RM002.PK0RM-MSTR-LVL-FL normal; /* reset master cntrl flag*/
  set PK0RM002.PK0RM-MSTR-SCHED-QTY normal;
  set PK0RM002.PK0RM-MIN-TIME normal; /* reset min time*/
  set PK0RM002.PK0RM-MAX-TIME normal; /* reset max time*/
  set PK0RM002.PK0RM-KUCCOID normal; /* reset cust id*/
  set PK0RM002.PK0RM-KUMSTRID normal;
  set PK0RM002.PK0RM-PK1CUOID normal;
  set PK0RM002.PK0RM-PK1NORID normal;

  PK0RW00.PK0RW-IXM = 1;
  while (PK0RW00.PK0RW-IXM <= 10)
    set PK0RM002.PK0RM-ACT[PK0RW-IXM] normal;
    set PK0RM002.PK0RM-LVL-FL[PK0RW-IXM] normal;
    set PK0RM002.PK0RM-LVL-SCHED-QTY[PK0RW-IXM] normal;

    PK0RW00.PK0RW-IXM = PK0RW00.PK0RW-IXM + 1;
  end

  set PK0RM002.CATOAP initialAttributes; /* TO application*/
  set PK0RM002.CAITEM initialAttributes; /* Application data*/

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (PK0RM002.XWHCD == "?") /* if any ? entered*/

    if (PK0RM002.XWHCD == "?") /* if ? entered in whse*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "              WAREHOUSE      "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXWH01(); /* perform whse window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  code and description to the map.                     **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PK0RM002.XWHCD = XWHTBL.XWHCD[XX0XWPIX];
       /* MOVE XWHTBL.XWHCD(XX0XWPIX) TO PK0RW01.PK0RW-WHSE-CD;*/
        PK0RM002.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX];
        set PK0RM002.XWHCD cursor; /* put cursor on whse cd*/
      else
        PK0RM002.XWHCD = " "; /* clear fields*/
        set PK0RM002.XWHCD cursor; /* put cursor on whse cd*/
        PK0RM002.XWHABRV = " "; /* clear description*/
      end

    end

    // VAGen Info - map = PK0RM002
    converseLib.clearScreen();
     /* restore the original map*/

    PK0RW00.PK0RW-SWR = "N"; /* no to request for data*/
    PK0RW00.PK0RW-SWF = "N"; /* no to format map*/

    exit stack; /* go display map*/

  end

end // end PK0R-14002

// Verify data that was entered
Function PK0R-15001()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/

  if (PK0RM001.CAITEM > " ") /* Application data was entered*/

    PKWREC.PKWFRMAP = "15001"; /* Module identification*/
    set PK0RM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/

  end

  if (PK0RM001.XWHCD == "51"
   || PK0RM001.XWHCD == "42")
    if (PK0RM001.PK0RM-MIN-TIME <= 0
     && PK0RM001.PK0RM-MAX-TIME <= 0
     && PK0RM001.PK0RM-KUCCOID <= 0
     && PK0RM001.PK0RM-PK1CUOID <= 0)
      PKWREC.PKWFRMAP = "15001"; /* Module identification*/
      set PK0RM001.PK0RM-MIN-TIME cursor, bold;
      set PK0RM001.PK0RM-MAX-TIME bold;
      set PK0RM001.PK0RM-KUCCOID bold;
      set PK0RM001.PK0RM-PK1CUOID bold;
      converseLib.validationFailed(499); /* either min/max units or time is*/
                                   /* required*/
      exit stack;
    else
      if (PK0RM001.PK0RM-MIN-UNITS > 0
       || PK0RM001.PK0RM-MAX-UNITS > 0)
        PKWREC.PKWFRMAP = "15001"; /* Module identification*/
        set PK0RM001.PK0RM-MIN-UNITS cursor, bold;
        set PK0RM001.PK0RM-MAX-UNITS bold;
        converseLib.validationFailed(182); /* units invalid with whse*/
        exit stack;
      else
        if (PK0RM001.PK0RM-MAX-TIME > 0)
          if (PK0RM001.PK0RM-KUCCOID > 0
           || PK0RM001.PK0RM-PK1CUOID > 0)
            PKWREC.PKWFRMAP = "15001"; /* Module identification*/
            set PK0RM001.PK0RM-MIN-TIME cursor, bold;
            set PK0RM001.PK0RM-MAX-TIME bold;
            set PK0RM001.PK0RM-KUCCOID bold;
            set PK0RM001.PK0RM-PK1CUOID bold;
            converseLib.validationFailed(65); /* time invalid with cust/ord*/
            exit stack;
          end
        end
      end
    end
  else
    if (PK0RM001.PK0RM-MIN-UNITS <= 0
     && PK0RM001.PK0RM-MAX-UNITS <= 0
     && PK0RM001.PK0RM-KUCCOID <= 0
     && PK0RM001.PK0RM-PK1CUOID <= 0)
      PKWREC.PKWFRMAP = "15001"; /* Module identification*/
      set PK0RM001.PK0RM-MIN-UNITS cursor, bold;
      set PK0RM001.PK0RM-MAX-UNITS bold;
      set PK0RM001.PK0RM-KUCCOID bold;
      set PK0RM001.PK0RM-PK1CUOID bold;
      converseLib.validationFailed(499); /* either min/max units or time is*/
                                   /* required*/
      exit stack;
    else
      if (PK0RM001.PK0RM-MIN-TIME > 0
       || PK0RM001.PK0RM-MAX-TIME > 0)
        PKWREC.PKWFRMAP = "15001"; /* Module identification*/
        set PK0RM001.PK0RM-MIN-TIME cursor, bold;
        set PK0RM001.PK0RM-MAX-TIME bold;
        converseLib.validationFailed(182); /* time invalid with whse*/
        exit stack;
      else
        if (PK0RM001.PK0RM-MAX-UNITS > 0)
          if (PK0RM001.PK0RM-KUCCOID > 0
           || PK0RM001.PK0RM-PK1CUOID > 0)
            PKWREC.PKWFRMAP = "15001"; /* Module identification*/
            set PK0RM001.PK0RM-MIN-UNITS cursor, bold;
            set PK0RM001.PK0RM-MAX-UNITS bold;
            set PK0RM001.PK0RM-KUCCOID bold;
            set PK0RM001.PK0RM-PK1CUOID bold;
            converseLib.validationFailed(65); /* units invalid with cust/ord*/
            exit stack;
          end
        end
      end
    end
  end

  if (PK0RM001.PK0RM-MIN-UNITS > PK0RM001.PK0RM-MAX-UNITS)
    PKWREC.PKWFRMAP = "15001"; /* Module identification*/
    set PK0RM001.PK0RM-MIN-UNITS cursor, bold;
    set PK0RM001.PK0RM-MAX-UNITS bold;
    converseLib.validationFailed(145); /* invalid unit values*/
    exit stack;
  else
    if (PK0RM001.PK0RM-MIN-TIME > PK0RM001.PK0RM-MAX-TIME)
      PKWREC.PKWFRMAP = "15001"; /* Module identification*/
      set PK0RM001.PK0RM-MIN-TIME cursor, bold;
      set PK0RM001.PK0RM-MAX-TIME bold;
      converseLib.validationFailed(145); /* invalid time values*/
      exit stack;
    end
  end

  if (PK0RM001.PK0RM-MSTR-SCHED-QTY > 0
   && PK0RM001.PK0RM-MSTR-SCHED-QTY > 30)
    set PK0RM001.PK0RM-MSTR-SCHED-QTY cursor, bold;
    converseLib.validationFailed(342); /* qty must be between 1 and 30*/
    exit stack;
  else
    if (PK0RM001.PK0RM-MSTR-SCHED-QTY > 0
     || PK0RM001.PK0RM-MSTR-LVL-FL > " ")
      PK0RW00.PK0RW-MSTR-UPD = "Y";
      /* IF PK0RM001.PK0RM-MSTR-LVL-FL NE 'Y';*/
        /* MOVE 'Y' TO PK0RM001.PK0RM-MSTR-LVL-FL;*/
      /* END;*/
    else
      PK0RW00.PK0RW-MSTR-UPD = "N";
    end
  end

  if (PK0RM001.PK0RM-MSTR-LVL-FL != " "
   /* AND PK0RM001.PK0RM-MSTR-LVL-FL NE 'Y'   done on 12/11/96 psharm*/
   && PK0RM001.PK0RM-MSTR-LVL-FL != "C"
   && PK0RM001.PK0RM-MSTR-LVL-FL != "N")
    set PK0RM001.PK0RM-MSTR-LVL-FL cursor, bold;
    converseLib.validationFailed(511); /* invalid value*/
    exit stack;
  /* ELSE;  12/11/196*/
  /* IF PK0RM001.PK0RM-MSTR-LVL-FL EQ 'Y'*/
  /* AND PK0RM001.PK0RM-MSTR-SCHED-QTY EQ 0;*/
  /* SET PK0RM001.PK0RM-MSTR-SCHED-QTY CURSOR,BRIGHT;*/
  /* MOVE 119 TO EZEMNO;          /* quantity has not changed*/
  /* END;*/
  end

  if (PK0RM001.XWHCD == " ")
    PKWREC.PKWFRMAP = "15001"; /* Module identification*/
    set PK0RM001.XWHCD cursor, bold;
    converseLib.validationFailed(4); /* whse cd required*/
    exit stack;
  end

  if (PK0RW00.PK0RW-MSTR-UPD == "Y"
   && converseVar.eventKey is enter)
    PK0R-15301();
    converseLib.validationFailed(504); /* press pf12 to update*/
  end

  /* ------------------------------------------------------------*/
  /* Determine whether a valid request to scroll was entered.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PK0R-15100(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
    /* Otherwise, verify data in the line.*/
    /* ------------------------------------------------------------*/

    PK0R-15201(); /* Verify data in the line*/

  end

   /* IF EZEAID IS PF12;*/
    /* MOVE 'Y' TO PK0RW00.PK0RW-EDIT-FL;*/
   /* ELSE;*/
    /* MOVE 'N' TO PK0RW00.PK0RW-EDIT-FL;*/
   /* END;*/

  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0 /* Errors were found*/
   && converseVar.validationMsgNum != 504) /* just a warning*/
    exit stack; /* Exit to display map*/
  end

end // end PK0R-15001

// Verify data that was entered
Function PK0R-15002()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/

  if (PK0RM002.CAITEM > " ") /* Application data was entered*/

    PKWREC.PKWFRMAP = "15002"; /* Module identification*/
    set PK0RM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/

  end

  if (PK0RM002.XWHCD == "51"
   || PK0RM002.XWHCD == "42")
    if (PK0RM002.PK0RM-MIN-TIME <= 0
     && PK0RM002.PK0RM-MAX-TIME <= 0
     && PK0RM002.PK0RM-KUCCOID <= 0
     && PK0RM002.PK0RM-PK1CUOID <= 0)
      PKWREC.PKWFRMAP = "15002"; /* Module identification*/
      set PK0RM002.PK0RM-MIN-TIME cursor, bold;
      set PK0RM002.PK0RM-MAX-TIME bold;
      set PK0RM002.PK0RM-KUCCOID bold;
      set PK0RM002.PK0RM-PK1CUOID bold;
      converseLib.validationFailed(499); /* either min/max units or time is*/
                                   /* required*/
      exit stack;
    else
      if (PK0RM002.PK0RM-MIN-UNITS > 0
       && PK0RM002.PK0RM-MAX-UNITS > 0)
        PKWREC.PKWFRMAP = "15002"; /* Module identification*/
        set PK0RM002.PK0RM-MIN-UNITS cursor, bold;
        set PK0RM002.PK0RM-MAX-UNITS bold;
        converseLib.validationFailed(182); /* units are invalid for whse*/
        exit stack;
      else
        if (PK0RM002.PK0RM-MAX-TIME > 0)
          if (PK0RM002.PK0RM-KUCCOID > 0
           || PK0RM002.PK0RM-PK1CUOID > 0)
            PKWREC.PKWFRMAP = "15002"; /* Module identification*/
            set PK0RM002.PK0RM-MIN-TIME cursor, bold;
            set PK0RM002.PK0RM-MAX-TIME bold;
            set PK0RM002.PK0RM-KUCCOID bold;
            set PK0RM002.PK0RM-PK1CUOID bold;
            converseLib.validationFailed(65); /* time is invalid with cust/ord*/
            exit stack;
          end
        end
      end
    end
  else
    if (PK0RM002.PK0RM-MIN-UNITS <= 0
     && PK0RM002.PK0RM-MAX-UNITS <= 0
     && PK0RM002.PK0RM-KUCCOID <= 0
     && PK0RM002.PK0RM-PK1CUOID <= 0)
      PKWREC.PKWFRMAP = "15002"; /* Module identification*/
      set PK0RM002.PK0RM-MIN-UNITS cursor, bold;
      set PK0RM002.PK0RM-MAX-UNITS bold;
      set PK0RM002.PK0RM-KUCCOID bold;
      set PK0RM002.PK0RM-PK1CUOID bold;
      converseLib.validationFailed(499); /* either min/max units or time is*/
                                   /* required*/
      exit stack;
    else
      if (PK0RM002.PK0RM-MIN-TIME > 0
       && PK0RM002.PK0RM-MAX-TIME > 0)
        PKWREC.PKWFRMAP = "15002"; /* Module identification*/
        set PK0RM002.PK0RM-MIN-TIME cursor, bold;
        set PK0RM002.PK0RM-MAX-TIME bold;
        converseLib.validationFailed(182); /* times are invalid for whse*/
        exit stack;
      else
        if (PK0RM002.PK0RM-MAX-UNITS > 0)
          if (PK0RM002.PK0RM-KUCCOID > 0
           || PK0RM002.PK0RM-PK1CUOID > 0)
            PKWREC.PKWFRMAP = "15002"; /* Module identification*/
            set PK0RM002.PK0RM-MIN-UNITS cursor, bold;
            set PK0RM002.PK0RM-MAX-UNITS bold;
            set PK0RM002.PK0RM-KUCCOID bold;
            set PK0RM002.PK0RM-PK1CUOID bold;
            converseLib.validationFailed(65); /* units are invalid with cust/ord*/
            exit stack;
          end
        end
      end
    end
  end

  if (PK0RM002.PK0RM-MIN-UNITS > PK0RM002.PK0RM-MAX-UNITS)
    PKWREC.PKWFRMAP = "15002"; /* Module identification*/
    set PK0RM002.PK0RM-MIN-UNITS cursor, bold;
    set PK0RM002.PK0RM-MAX-UNITS bold;
    converseLib.validationFailed(145); /* invalid unit values*/
    exit stack;
  else
    if (PK0RM002.PK0RM-MIN-TIME > PK0RM002.PK0RM-MAX-TIME)
      PKWREC.PKWFRMAP = "15002"; /* Module identification*/
      set PK0RM002.PK0RM-MIN-TIME cursor, bold;
      set PK0RM002.PK0RM-MAX-TIME bold;
      converseLib.validationFailed(145); /* invalid time values*/
      exit stack;
    end
  end

  if (PK0RM002.PK0RM-MSTR-SCHED-QTY > 0
   && PK0RM002.PK0RM-MSTR-SCHED-QTY > 30)
    set PK0RM002.PK0RM-MSTR-SCHED-QTY cursor, bold;
    converseLib.validationFailed(342); /* qty must be between 1 and 30*/
    exit stack;
  else
    if (PK0RM002.PK0RM-MSTR-SCHED-QTY > 0
     || PK0RM002.PK0RM-MSTR-LVL-FL > " ")
      PK0RW00.PK0RW-MSTR-UPD = "Y";
      /* IF PK0RM002.PK0RM-MSTR-LVL-FL NE 'Y';*/
        /* MOVE 'Y' TO PK0RM002.PK0RM-MSTR-LVL-FL;*/
      /* END;*/
    else
      PK0RW00.PK0RW-MSTR-UPD = "N";
    end
  end

  if (PK0RM002.PK0RM-MSTR-LVL-FL != " "
   /* AND PK0RM002.PK0RM-MSTR-LVL-FL NE 'Y'   done on 12/11/96 psharm*/
   && PK0RM002.PK0RM-MSTR-LVL-FL != "C"
   && PK0RM002.PK0RM-MSTR-LVL-FL != "N")
    set PK0RM002.PK0RM-MSTR-LVL-FL cursor, bold;
    converseLib.validationFailed(511); /* invalid value*/
    exit stack;
  /* ELSE;  12/11/96*/
  /* IF PK0RM002.PK0RM-MSTR-LVL-FL EQ 'Y'*/
  /* AND PK0RM002.PK0RM-MSTR-SCHED-QTY EQ 0;*/
  /* SET PK0RM002.PK0RM-MSTR-SCHED-QTY CURSOR,BRIGHT;*/
  /* MOVE 119 TO EZEMNO;          /* quantity has not changed*/
  /* END;*/
  end

  if (PK0RM002.XWHCD == " ")
    PKWREC.PKWFRMAP = "15002"; /* Module identification*/
    set PK0RM002.XWHCD cursor, bold;
    converseLib.validationFailed(4); /* whse cd required*/
    exit stack;
  end

  if (PK0RW00.PK0RW-MSTR-UPD == "Y"
   && converseVar.eventKey is enter)
    PK0R-15302();
    converseLib.validationFailed(504); /* press pf12 to update*/
  end

  /* ------------------------------------------------------------*/
  /* Determine whether a valid request to scroll was entered.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PK0R-15100(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
    /* Otherwise, verify data in the line.*/
    /* ------------------------------------------------------------*/

    PK0R-15202(); /* Verify data in the line*/

  end

  if (converseVar.eventKey is pf12)
    PK0RW00.PK0RW-EDIT-FL = "Y";
  else
    PK0RW00.PK0RW-EDIT-FL = "N";
  end

  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0 /* Errors were found*/
   && converseVar.validationMsgNum != 504) /* just a warning*/
    exit stack; /* Exit to display map*/
  end

end // end PK0R-15002

// Verify scroll request
Function PK0R-15100()
  /* ------------------------------------------------------------*/
  /* If scroll back was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PK0RW00.XXXTSPAG < 2)       /* and no previous pages*/

    PKWREC.PKWFRMAP = "15100"; /* Module identification*/
    converseLib.validationFailed(37); /* No previous page to display*/

  end

  /* ------------------------------------------------------------*/
  /* If scroll forward was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PK0RW00.XXXTSPAG >= PK0RW00.TA5TSQIX) /* and no more pages*/

    PKWREC.PKWFRMAP = "15100"; /* Module identification*/
    converseLib.validationFailed(38); /* No more pages to display*/

  end

end // end PK0R-15100

// Verify data in the line
Function PK0R-15201()
  PK0RW00.PK0RW-IXM = 10; /* initialize index*/

  while (PK0RW00.PK0RW-IXM > 0) /* until end of lines*/

  /* ------------------------------------------------------------*/
  /* Level control must be N, C or blank*/
  /* ------------------------------------------------------------*/

  /* IF PK0RM001.PK0RM-LVL-FL(PK0RW-IXM) NE 'Y'/* active status 12/11/96psha*/
    if (PK0RM001.PK0RM-LVL-FL[PK0RW-IXM] != "N" /* normal status*/
     && PK0RM001.PK0RM-LVL-FL[PK0RW-IXM] != "C" /* carryover status*/
     && PK0RM001.PK0RM-LVL-FL[PK0RW-IXM] != " ") /* blank status*/

      PKWREC.PKWFRMAP = "15201"; /* Module identification*/
      set PK0RM001.PK0RM-LVL-FL[PK0RW-IXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(511); /* status invalid*/
      /* ELSE;*/
      /* IF PK0RM001.PK0RM-LVL-FL(PK0RW-IXM) EQ ' ';*/
       /* IF PK0RM001.PK0RM-LVL-SCHED-QTY(PK0RW-IXM) NE*/
         /* PK0RW01.PK0RW-LVL-SCHED-QTY(PK0RW-IXM);*/
         /* MOVE 'Y' TO PK0RW01.PK0RW-LVL-FL(PK0RW-IXM);*/
         /* MOVE 'Y' TO PK0RM001.PK0RM-LVL-FL(PK0RW-IXM);*/
       /* END;*/
      /* END;*/
    end

  /* ------------------------------------------------------------*/
  /* Schedule quantity must be numeric or blank*/
  /* ------------------------------------------------------------*/

    if (PK0RM001.PK0RM-LVL-SCHED-QTY[PK0RW-IXM] != 
    PK0RW01.PK0RW-LVL-SCHED-QTY[PK0RW-IXM])
      /* IF PK0RM001.PK0RM-LVL-SCHED-QTY(PK0RW-IXM) = 0;*/
       /* MOVE ' ' TO PK0RW01.PK0RW-LVL-FL(PK0RW-IXM);*/
       /* MOVE ' ' TO PK0RM001.PK0RM-LVL-FL(PK0RW-IXM);*/
      /* ELSE;*/
      if (PK0RM001.PK0RM-LVL-SCHED-QTY[PK0RW-IXM] >= 0
       && PK0RM001.PK0RM-LVL-SCHED-QTY[PK0RW-IXM] <= 30)
         /* MOVE 'Y' TO PK0RW01.PK0RW-LVL-FL(PK0RW-IXM);*/
         /* MOVE 'Y' TO PK0RM001.PK0RM-LVL-FL(PK0RW-IXM);*/
      else
        PKWREC.PKWFRMAP = "15201"; /* Module identification*/
        set PK0RM001.PK0RM-LVL-SCHED-QTY[PK0RW-IXM] cursor, bold;
        converseLib.validationFailed(342); /* schedule quantity must be numeric*/

      end
        /* END;*/
    end

  /* ------------------------------------------------------------*/
  /* If selection was entered and is not an "S", indicate that*/
  /* only "S" may be entered to select a line.*/
  /* ------------------------------------------------------------*/

    if (PK0RM001.PK0RM-ACT[PK0RW-IXM] != PK0RW01.PK0RW-ACT[PK0RW-IXM]
     && PK0RM001.PK0RM-ACT[PK0RW-IXM] != "S") /* and is not a "S"*/

      PKWREC.PKWFRMAP = "15201"; /* Module identification*/
      set PK0RM001.PK0RM-ACT[PK0RW-IXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Only "S" may be entered*/
    else
      if (PK0RM001.PK0RM-ACT[PK0RW-IXM] == " ")
        if (PK0RM001.PK0RM-LVL-FL[PK0RW-IXM] != 
        PK0RW01.PK0RW-LVL-FL[PK0RW-IXM]
         || PK0RM001.PK0RM-LVL-SCHED-QTY[PK0RW-IXM] != 
        PK0RW01.PK0RW-LVL-SCHED-QTY[PK0RW-IXM])
          PKWREC.PKWFRMAP = "15201"; /* Module identification*/
          set PK0RM001.PK0RM-ACT[PK0RW-IXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(14); /* must be 'S' when changes*/
        end
      else
        if (PK0RM001.PK0RM-ACT[PK0RW-IXM] == "S")
          if (PK0RM001.PK0RM-LVL-FL[PK0RW-IXM] == 
          PK0RW01.PK0RW-LVL-FL[PK0RW-IXM]
           && PK0RM001.PK0RM-LVL-SCHED-QTY[PK0RW-IXM] == 
          PK0RW01.PK0RW-LVL-SCHED-QTY[PK0RW-IXM]
           && PK0RW00.PK0RW-MSTR-UPD != "Y")
            PKWREC.PKWFRMAP = "15201"; /* Module identification*/
            set PK0RM001.PK0RM-ACT[PK0RW-IXM] cursor, bold; /* Highlight*/
            converseLib.validationFailed(119); /* 'S' only when changes*/
          end
        end

      end
    end

    PK0RW00.PK0RW-IXM = PK0RW00.PK0RW-IXM - 1; /* decrement line number*/

  end

end // end PK0R-15201

// Verify data in the line
Function PK0R-15202()
  PK0RW00.PK0RW-IXM = 10; /* initialize index*/

  while (PK0RW00.PK0RW-IXM > 0) /* until end of lines*/

  /* ------------------------------------------------------------*/
  /* Level control must be N, C or blank*/
  /* ------------------------------------------------------------*/

  /* IF PK0RM002.PK0RM-LVL-FL(PK0RW-IXM) NE 'Y'/* active status 12/11/96 psh*/
    if (PK0RM002.PK0RM-LVL-FL[PK0RW-IXM] != "N" /* normal status 12/11/96*/
     && PK0RM002.PK0RM-LVL-FL[PK0RW-IXM] != "C" /* carryover status*/
     && PK0RM002.PK0RM-LVL-FL[PK0RW-IXM] != " ") /* blank status*/

      PKWREC.PKWFRMAP = "15202"; /* Module identification*/
      set PK0RM002.PK0RM-LVL-FL[PK0RW-IXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(511); /* status invalid*/
      /* ELSE;*/
      /* IF PK0RM002.PK0RM-LVL-FL(PK0RW-IXM) EQ ' ';*/
       /* IF PK0RM002.PK0RM-LVL-SCHED-QTY(PK0RW-IXM) NE*/
         /* PK0RW01.PK0RW-LVL-SCHED-QTY(PK0RW-IXM);*/
         /* MOVE 'Y' TO PK0RW01.PK0RW-LVL-FL(PK0RW-IXM);*/
         /* MOVE 'Y' TO PK0RM002.PK0RM-LVL-FL(PK0RW-IXM);*/
       /* END;*/
      /* END;*/
    end

  /* ------------------------------------------------------------*/
  /* Schedule quantity must be numeric or blank*/
  /* ------------------------------------------------------------*/

    if (PK0RM002.PK0RM-LVL-SCHED-QTY[PK0RW-IXM] != 
    PK0RW01.PK0RW-LVL-SCHED-QTY[PK0RW-IXM])
      /* IF PK0RM002.PK0RM-LVL-SCHED-QTY(PK0RW-IXM) = 0;*/
       /* MOVE ' ' TO PK0RW01.PK0RW-LVL-FL(PK0RW-IXM);*/
       /* MOVE ' ' TO PK0RM002.PK0RM-LVL-FL(PK0RW-IXM);*/
      /* ELSE;*/
      if (PK0RM002.PK0RM-LVL-SCHED-QTY[PK0RW-IXM] >= 0
       && PK0RM002.PK0RM-LVL-SCHED-QTY[PK0RW-IXM] <= 30)
         /* MOVE 'Y' TO PK0RW01.PK0RW-LVL-FL(PK0RW-IXM);*/
         /* MOVE 'Y' TO PK0RM002.PK0RM-LVL-FL(PK0RW-IXM);*/
      else
        PKWREC.PKWFRMAP = "15202"; /* Module identification*/
        set PK0RM002.PK0RM-LVL-SCHED-QTY[PK0RW-IXM] cursor, bold;
        converseLib.validationFailed(342); /* schedule quantity must be numeric*/

      end
      /* END;*/
    end

  /* ------------------------------------------------------------*/
  /* If selection was entered and is not an "S", indicate that*/
  /* only "S" may be entered to select a line.*/
  /* ------------------------------------------------------------*/

    if (PK0RM002.PK0RM-ACT[PK0RW-IXM] != PK0RW01.PK0RW-ACT[PK0RW-IXM]
     && PK0RM002.PK0RM-ACT[PK0RW-IXM] != "S") /* and is not a "S"*/

      PKWREC.PKWFRMAP = "15202"; /* Module identification*/
      set PK0RM002.PK0RM-ACT[PK0RW-IXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Only "S" may be entered*/
    else
      if (PK0RM002.PK0RM-ACT[PK0RW-IXM] == " ")
        if (PK0RM002.PK0RM-LVL-FL[PK0RW-IXM] != 
        PK0RW01.PK0RW-LVL-FL[PK0RW-IXM]
         || PK0RM002.PK0RM-LVL-SCHED-QTY[PK0RW-IXM] != 
        PK0RW01.PK0RW-LVL-SCHED-QTY[PK0RW-IXM])
          PKWREC.PKWFRMAP = "15202"; /* Module identification*/
          set PK0RM002.PK0RM-ACT[PK0RW-IXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(14); /* must be 'S' when changes*/
        end
      else
        if (PK0RM002.PK0RM-ACT[PK0RW-IXM] == "S")
          if (PK0RM002.PK0RM-LVL-FL[PK0RW-IXM] == 
          PK0RW01.PK0RW-LVL-FL[PK0RW-IXM]
           && PK0RM002.PK0RM-LVL-SCHED-QTY[PK0RW-IXM] == 
          PK0RW01.PK0RW-LVL-SCHED-QTY[PK0RW-IXM]
           && PK0RW00.PK0RW-MSTR-UPD != "Y")
            PKWREC.PKWFRMAP = "15202"; /* Module identification*/
            set PK0RM002.PK0RM-ACT[PK0RW-IXM] cursor, bold; /* Highlight*/
            converseLib.validationFailed(119); /* 'S' only when changes*/
          end
        end

      end
    end

    PK0RW00.PK0RW-IXM = PK0RW00.PK0RW-IXM - 1; /* decrement line number*/

  end

end // end PK0R-15202

// Format the display data
Function PK0R-15301()
  /* ------------------------------------------------------------*/
  /* Set the map to reflect master schedule change.*/
  /* ------------------------------------------------------------*/

  PK0RW00.PK0RW-IXM = 1;

  PK0RW01.PK0RW-MSTR-LVL-FL = PK0RM001.PK0RM-MSTR-LVL-FL;
  PK0RW01.PK0RW-MSTR-SCHED-QTY = PK0RM001.PK0RM-MSTR-SCHED-QTY;

  while (PK0RW-IXM <= 10)

    if (PK0RW01.PK0RW-DTL-PK1CUOID[PK0RW-IXM] > 0
     && PK0RM001.PK0RM-ACT[PK0RW-IXM] != "S"
     && PK0RW01.PK0RW-LVL-SCHED-QTY[PK0RW-IXM] == 0
     && PK0RW01.PK0RW-LVL-FL[PK0RW-IXM] == " ")
      PK0RW01.PK0RW-ACT[PK0RW-IXM] = "S";
      PK0RM001.PK0RM-ACT[PK0RW-IXM] = "S";
      PK0RM001.PK0RM-LVL-FL[PK0RW-IXM] = PK0RM001.PK0RM-MSTR-LVL-FL;
      PK0RW01.PK0RW-LVL-FL[PK0RW-IXM] = PK0RM001.PK0RM-MSTR-LVL-FL;
      PK0RM001.PK0RM-LVL-SCHED-QTY[PK0RW-IXM] = PK0RM001.PK0RM-MSTR-SCHED-QTY;
      PK0RW01.PK0RW-LVL-SCHED-QTY[PK0RW-IXM] = PK0RM001.PK0RM-MSTR-SCHED-QTY;
    end

    PK0RW00.PK0RW-IXM = PK0RW00.PK0RW-IXM + 1;
  end

end // end PK0R-15301

// Format the display data
Function PK0R-15302()
  /* ------------------------------------------------------------*/
  /* Set the map to reflect master schedule change.*/
  /* ------------------------------------------------------------*/

  PK0RW00.PK0RW-IXM = 1;

  PK0RW01.PK0RW-MSTR-LVL-FL = PK0RM002.PK0RM-MSTR-LVL-FL;
  PK0RW01.PK0RW-MSTR-SCHED-QTY = PK0RM002.PK0RM-MSTR-SCHED-QTY;

  while (PK0RW-IXM <= 10)

    if (PK0RW01.PK0RW-DTL-PK1CUOID[PK0RW-IXM] > 0
     && PK0RM002.PK0RM-ACT[PK0RW-IXM] != "S"
     && PK0RW01.PK0RW-LVL-SCHED-QTY[PK0RW-IXM] == 0
     && PK0RW01.PK0RW-LVL-FL[PK0RW-IXM] == " ")
      PK0RW01.PK0RW-ACT[PK0RW-IXM] = "S";
      PK0RM002.PK0RM-ACT[PK0RW-IXM] = "S";
      PK0RM002.PK0RM-LVL-FL[PK0RW-IXM] = PK0RM002.PK0RM-MSTR-LVL-FL;
      PK0RW01.PK0RW-LVL-FL[PK0RW-IXM] = PK0RM002.PK0RM-MSTR-LVL-FL;
      PK0RM002.PK0RM-LVL-SCHED-QTY[PK0RW-IXM] = PK0RM002.PK0RM-MSTR-SCHED-QTY;
      PK0RW01.PK0RW-LVL-SCHED-QTY[PK0RW-IXM] = PK0RM002.PK0RM-MSTR-SCHED-QTY;
    end

    PK0RW00.PK0RW-IXM = PK0RW00.PK0RW-IXM + 1;
  end

end // end PK0R-15302

// Process valid input request
Function PK0R-16001()
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display*/
  /* ------------------------------------------------------------*/

  PK0RW00.PK0RW-SWF = "Y"; /* format the map switch*/

  /* ------------------------------------------------------------*/
  /* If a scroll backward was requested, decrement the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PK0RW00.XXXTSPAG = PK0RW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If a scroll forward was requested, increment the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PK0RW00.XXXTSPAG = PK0RW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If search key changed, get new data*/
  /* ------------------------------------------------------------*/

  if (PK0RW01.PK0RW-WHSE-CD != PK0RM001.XWHCD
   || PK0RW01.PK0RW-MIN-UNITS != PK0RM001.PK0RM-MIN-UNITS
   || PK0RW01.PK0RW-MAX-UNITS != PK0RM001.PK0RM-MAX-UNITS
   || PK0RW01.PK0RW-MSTR-LVL-FL != PK0RM001.PK0RM-MSTR-LVL-FL
   || PK0RW01.PK0RW-MSTR-SCHED-QTY != PK0RM001.PK0RM-MSTR-SCHED-QTY
   || PK0RW01.PK0RW-MIN-TIME != PK0RM001.PK0RM-MIN-TIME
   || PK0RW01.PK0RW-MAX-TIME != PK0RM001.PK0RM-MAX-TIME
   || PK0RW01.PK0RW-KUCCOID != PK0RM001.PK0RM-KUCCOID
   || PK0RW01.PK0RW-PK1CUOID != PK0RM001.PK0RM-PK1CUOID
   || PK0RW01.PK0RW-PK1NORID != PK0RM001.PK0RM-PK1NORID)
    PK0RW00.PK0RW-SWR = "Y"; /* request for data switch*/
    PK0RW00.XXXTSPAG = 0; /* zero out temp storage*/
  /* move map input to working storage*/
    PK0RW01.PK0RW-WHSE-CD = PK0RM001.XWHCD;
    PK0RW01.PK0RW-MIN-UNITS = PK0RM001.PK0RM-MIN-UNITS;
    PK0RW01.PK0RW-MAX-UNITS = PK0RM001.PK0RM-MAX-UNITS;
    PK0RW01.PK0RW-MSTR-LVL-FL = PK0RM001.PK0RM-MSTR-LVL-FL;
    PK0RW01.PK0RW-MSTR-SCHED-QTY = PK0RM001.PK0RM-MSTR-SCHED-QTY;
    PK0RW01.PK0RW-MIN-TIME = PK0RM001.PK0RM-MIN-TIME;
    PK0RW01.PK0RW-MAX-TIME = PK0RM001.PK0RM-MAX-TIME;
    PK0RW01.PK0RW-KUCCOID = PK0RM001.PK0RM-KUCCOID;
    PK0RW01.PK0RW-KUMSTRID = PK0RM001.PK0RM-KUMSTRID;
    PK0RW01.PK0RW-PK1CUOID = PK0RM001.PK0RM-PK1CUOID;
    PK0RW01.PK0RW-PK1NORID = PK0RM001.PK0RM-PK1NORID;
    return;
  else
    if (PK0RW01.PK0RW-KUMSTRID != PK0RM001.PK0RM-KUMSTRID)
      if (PK0RM001.PK0RM-KUMSTRID == "    "
       && PK0RW01.PK0RW-KUMSTRID == 0)

      else
        PK0RW00.PK0RW-SWR = "Y"; /* request for data switch*/
        PK0RW00.XXXTSPAG = 0; /* zero out temp storage*/
  /* move map input to working storage*/
        PK0RW01.PK0RW-WHSE-CD = PK0RM001.XWHCD;
        PK0RW01.PK0RW-MIN-UNITS = PK0RM001.PK0RM-MIN-UNITS;
        PK0RW01.PK0RW-MAX-UNITS = PK0RM001.PK0RM-MAX-UNITS;
        PK0RW01.PK0RW-MSTR-LVL-FL = PK0RM001.PK0RM-MSTR-LVL-FL;
        PK0RW01.PK0RW-MSTR-SCHED-QTY = PK0RM001.PK0RM-MSTR-SCHED-QTY;
        PK0RW01.PK0RW-MIN-TIME = PK0RM001.PK0RM-MIN-TIME;
        PK0RW01.PK0RW-MAX-TIME = PK0RM001.PK0RM-MAX-TIME;
        PK0RW01.PK0RW-KUCCOID = PK0RM001.PK0RM-KUCCOID;
        PK0RW01.PK0RW-KUMSTRID = PK0RM001.PK0RM-KUMSTRID;
        PK0RW01.PK0RW-PK1CUOID = PK0RM001.PK0RM-PK1CUOID;
        PK0RW01.PK0RW-PK1NORID = PK0RM001.PK0RM-PK1NORID;
        return;
      end
    end
  end

  if (PK0RW00.PK0RW-MSTR-UPD == "Y"
   && PK0RW00.PK0RW-WARN-FL != "Y")
    converseLib.validationFailed(504);
    PK0RW00.PK0RW-WARN-FL = "Y";
    set PK0RM001.PK0RM-ACT[1] cursor;
    return;
  end

  /* ------------------------------------------------------------*/
  /* Save the select fields and clear the map input/output area.*/
  /* ------------------------------------------------------------*/

  PK0RW00.PK0RW-UPDATE-SW = "N"; /* turn off updated switch*/

  XX0XS01(); /* get date and time*/

  if (converseVar.eventKey is enter /* enter pressed*/
   && PK0RW00.PK0RW-MSTR-UPD != "Y")
    PK0RW00.PK0RW-IXM = 1; /* Initialize line index*/
    PK0RW00.PK0RW-SWU = "N"; /* reset switch*/

    while (PK0RW00.PK0RW-IXM <= 10 /* Until end of lines*/
     && PK0RW00.PK0RW-SWU != "Y") /* or 'S' is found*/

      if (PK0RM001.PK0RM-ACT[PK0RW-IXM] != PK0RW01.PK0RW-ACT[PK0RW-IXM])

        PK0RW00.PK0RW-SWF = "Y"; /* yes format map*/
        PK0RW00.PK0RW-UPDATE-SW = "Y"; /* turn on updated switch*/
        PK0R-16100(); /* select record*/
        PK0R-16201(); /* update record*/

      end

      PK0RW00.PK0RW-IXM = PK0RW00.PK0RW-IXM + 1; /* Increment line index*/

    end
    PK0R-12300(); /* update temp storage with changes*/
  else
    if (converseVar.eventKey is pf12 /* PF12 pressed*/
     && PK0RW00.PK0RW-MSTR-UPD == "Y")
      PK0RW00.PK0RW-SWU = "N"; /* reset switch*/
      PK0RW00.PK0RW-WARN-FL = "N";
      PK0RW00.PK0RW-SAVE-PAGE = PK0RM001.XXXTSPAG;
      PK0R-16301(); /* process all pages for update*/

    else
      if (converseVar.eventKey is pf13) /* PF13 pressed*/
        PK0RW00.PK0RW-SWR = "Y"; /* request for data switch*/
        PK0RW00.PK0RW-SWF = "Y"; /* yes format map*/
        PK0RW00.PK0RW-UPDATE-SW = "Y"; /* turn on updated switch*/
        PK0RW00.PK0RW-MSTR-UPD = "N";
        PK0RW00.PK0RW-SWU = "N"; /* reset switch*/
        PK0RW00.PK0RW-WARN-FL = "N";
        PK0RW00.XXXTSPAG = 0; /* zero out temp storage*/
      else
        if (converseVar.eventKey is pf14) /* PF14 pressed*/
          PK0RW00.PK0RW-IXM = 1; /* Initialize line index*/
          PK0RW00.PK0RW-SWU = "N"; /* reset switch*/
          PK0RW00.PK0RW-WARN-FL = "N";
          PK0RW00.PK0RW-SAVE-PAGE = PK0RM001.XXXTSPAG;
          PK0R-16401(); /* process all pages for cancel*/

        end
      end
    end
  end

end // end PK0R-16001

// Process valid input request
Function PK0R-16002()
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display*/
  /* ------------------------------------------------------------*/

  PK0RW00.PK0RW-SWF = "Y"; /* format the map switch*/

  /* ------------------------------------------------------------*/
  /* If a scroll backward was requested, decrement the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PK0RW00.XXXTSPAG = PK0RW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If a scroll forward was requested, increment the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PK0RW00.XXXTSPAG = PK0RW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If search key changed, get new data*/
  /* ------------------------------------------------------------*/

  if (PK0RW01.PK0RW-WHSE-CD != PK0RM002.XWHCD
   || PK0RW01.PK0RW-MIN-UNITS != PK0RM002.PK0RM-MIN-UNITS
   || PK0RW01.PK0RW-MAX-UNITS != PK0RM002.PK0RM-MAX-UNITS
   || PK0RW01.PK0RW-MSTR-LVL-FL != PK0RM002.PK0RM-MSTR-LVL-FL
   || PK0RW01.PK0RW-MSTR-SCHED-QTY != PK0RM002.PK0RM-MSTR-SCHED-QTY
   || PK0RW01.PK0RW-MIN-TIME != PK0RM002.PK0RM-MIN-TIME
   || PK0RW01.PK0RW-MAX-TIME != PK0RM002.PK0RM-MAX-TIME
   || PK0RW01.PK0RW-KUCCOID != PK0RM002.PK0RM-KUCCOID
   || PK0RW01.PK0RW-PK1CUOID != PK0RM002.PK0RM-PK1CUOID
   || PK0RW01.PK0RW-PK1NORID != PK0RM002.PK0RM-PK1NORID)
    PK0RW00.PK0RW-SWR = "Y"; /* request for data switch*/
    PK0RW00.XXXTSPAG = 0; /* zero out temp storage*/
  /* move map input to working storage*/
    PK0RW01.PK0RW-WHSE-CD = PK0RM002.XWHCD;
    PK0RW01.PK0RW-MIN-UNITS = PK0RM002.PK0RM-MIN-UNITS;
    PK0RW01.PK0RW-MAX-UNITS = PK0RM002.PK0RM-MAX-UNITS;
    PK0RW01.PK0RW-MSTR-LVL-FL = PK0RM002.PK0RM-MSTR-LVL-FL;
    PK0RW01.PK0RW-MSTR-SCHED-QTY = PK0RM002.PK0RM-MSTR-SCHED-QTY;
    PK0RW01.PK0RW-MIN-TIME = PK0RM002.PK0RM-MIN-TIME;
    PK0RW01.PK0RW-MAX-TIME = PK0RM002.PK0RM-MAX-TIME;
    PK0RW01.PK0RW-KUCCOID = PK0RM002.PK0RM-KUCCOID;
    PK0RW01.PK0RW-KUMSTRID = PK0RM002.PK0RM-KUMSTRID;
    PK0RW01.PK0RW-PK1CUOID = PK0RM002.PK0RM-PK1CUOID;
    PK0RW01.PK0RW-PK1NORID = PK0RM002.PK0RM-PK1NORID;
    return;
  else
    if (PK0RW01.PK0RW-KUMSTRID != PK0RM002.PK0RM-KUMSTRID)
      if (PK0RM002.PK0RM-KUMSTRID == "    "
       && PK0RW01.PK0RW-KUMSTRID == 0)

      else
        PK0RW00.PK0RW-SWR = "Y"; /* request for data switch*/
        PK0RW00.XXXTSPAG = 0; /* zero out temp storage*/
  /* move map input to working storage*/
        PK0RW01.PK0RW-WHSE-CD = PK0RM002.XWHCD;
        PK0RW01.PK0RW-MIN-UNITS = PK0RM002.PK0RM-MIN-UNITS;
        PK0RW01.PK0RW-MAX-UNITS = PK0RM002.PK0RM-MAX-UNITS;
        PK0RW01.PK0RW-MSTR-LVL-FL = PK0RM002.PK0RM-MSTR-LVL-FL;
        PK0RW01.PK0RW-MSTR-SCHED-QTY = PK0RM002.PK0RM-MSTR-SCHED-QTY;
        PK0RW01.PK0RW-MIN-TIME = PK0RM002.PK0RM-MIN-TIME;
        PK0RW01.PK0RW-MAX-TIME = PK0RM002.PK0RM-MAX-TIME;
        PK0RW01.PK0RW-KUCCOID = PK0RM002.PK0RM-KUCCOID;
        PK0RW01.PK0RW-KUMSTRID = PK0RM002.PK0RM-KUMSTRID;
        PK0RW01.PK0RW-PK1CUOID = PK0RM002.PK0RM-PK1CUOID;
        PK0RW01.PK0RW-PK1NORID = PK0RM002.PK0RM-PK1NORID;
        return;
      end
    end
  end

  if (PK0RW00.PK0RW-MSTR-UPD == "Y"
   && PK0RW00.PK0RW-WARN-FL != "Y")
    converseLib.validationFailed(504);
    PK0RW00.PK0RW-WARN-FL = "Y";
    set PK0RM002.PK0RM-ACT[1] cursor;
    return;
  end

  /* ------------------------------------------------------------*/
  /* Save the select fields and clear the map input/output area.*/
  /* ------------------------------------------------------------*/

  PK0RW00.PK0RW-UPDATE-SW = "N"; /* turn off updated switch*/

  XX0XS01(); /* get date and time*/

  if (converseVar.eventKey is enter /* enter pressed*/
   && PK0RW00.PK0RW-MSTR-UPD != "Y")
    PK0RW00.PK0RW-IXM = 1; /* Initialize line index*/
    PK0RW00.PK0RW-SWU = "N"; /* reset switch*/

    while (PK0RW00.PK0RW-IXM <= 10 /* Until end of lines*/
     && PK0RW00.PK0RW-SWU != "Y") /* or 'S' is found*/

      if (PK0RM002.PK0RM-ACT[PK0RW-IXM] != PK0RW01.PK0RW-ACT[PK0RW-IXM])

        PK0RW00.PK0RW-SWF = "Y"; /* yes format map*/
        PK0RW00.PK0RW-UPDATE-SW = "Y"; /* turn on updated switch*/
        PK0R-16100(); /* select record*/
        PK0R-16202(); /* update record*/

      end

      PK0RW00.PK0RW-IXM = PK0RW00.PK0RW-IXM + 1; /* Increment line index*/

    end
    PK0R-12300(); /* update temp storage page*/
  else
    if (converseVar.eventKey is pf12 /* PF12 pressed*/
     && PK0RW00.PK0RW-MSTR-UPD == "Y")
      PK0RW00.PK0RW-IXM = 1; /* Initialize line index*/
      PK0RW00.PK0RW-SWU = "N"; /* reset switch*/
      PK0RW00.PK0RW-WARN-FL = "N";
      PK0RW00.PK0RW-SAVE-PAGE = PK0RM002.XXXTSPAG;
      PK0R-16302(); /* process all pages for update*/

    else
      if (converseVar.eventKey is pf13) /* PF13 pressed*/
        PK0RW00.PK0RW-SWR = "Y"; /* request for data switch*/
        PK0RW00.PK0RW-SWF = "Y"; /* yes format map*/
        PK0RW00.PK0RW-UPDATE-SW = "Y"; /* turn on updated switch*/
        PK0RW00.PK0RW-MSTR-UPD = "N";
        PK0RW00.PK0RW-SWU = "N"; /* reset switch*/
        PK0RW00.PK0RW-WARN-FL = "N";
        PK0RW00.XXXTSPAG = 0; /* zero out temp storage*/
      else
        if (converseVar.eventKey is pf14) /* PF14 pressed*/
          PK0RW00.PK0RW-IXM = 1; /* Initialize line index*/
          PK0RW00.PK0RW-SWU = "N"; /* reset switch*/
          PK0RW00.PK0RW-WARN-FL = "N";
          PK0RW00.PK0RW-SAVE-PAGE = PK0RM002.XXXTSPAG;
          PK0R-16402(); /* process all pages for cancel*/

        end
      end
    end
  end

end // end PK0R-16002

// Process all updates
Function PK0R-16100()
  /* ------------------------------------------------------------*/
  /* Process update of DPICK.VPOOLH01 records.*/
  /* ------------------------------------------------------------*/

  VPOOLH03.XWHCD = PK0RW01.PK0RW-WHSE-CD;
  VPOOLH03.PK1CUOID = PK0RW01.PK0RW-DTL-PK1CUOID[PK0RW-IXM];
  VPOOLH03.PK1NORID = PK0RW01.PK0RW-DTL-PK1NORID[PK0RW-IXM];

  try
    call "VPOOLH03" ("S ", SQLCA, VPOOLH03) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PKWREC.PKWFRMAP = "16100"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    if (PKWREC.PKWSELSW == "PK")
      converseLib.clearScreen();
       /* Clear screen before display*/
    else
      
      // VAGen Info - map = PK0RM002
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PKWREC.PKWFRMAP; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOOLH03.VPOOLH03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PK0R-16100

// Process all updates
Function PK0R-16201()
  /* ------------------------------------------------------------*/
  /* Process update of DPICK.VPOOLH03 records.*/
  /* ------------------------------------------------------------*/

  VPOOLH03.PK-LVL-FL = PK0RM001.PK0RM-LVL-FL[PK0RW-IXM];
   /* MOVE PK0RW01.PK0RW-LVL-FL(PK0RW-IXM) TO VPOOLH03.PK-LVL-FL;*/

  VPOOLH03.PK-LVL-SCHED-QTY = PK0RM001.PK0RM-LVL-SCHED-QTY[PK0RW-IXM];
  VPOOLH03.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move date*/
  VPOOLH03.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move time*/

  try
    call "VPOOLH03" ("U ", SQLCA, VPOOLH03) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PK0RM001.PK0RM-ACT[PK0RW-IXM] = " "; /* clear selection*/
    PK0RW01.PK0RW-ACT[PK0RW-IXM] = " "; /* clear selection*/
    converseLib.validationFailed(32); /* update successful*/
    set PK0RM001.PK0RM-ACT[1] cursor;
    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PKWREC.PKWFRMAP = "16201"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PKWREC.PKWFRMAP; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOOLH03.VPOOLH03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PK0R-16201

// Process all updates
Function PK0R-16202()
  /* ------------------------------------------------------------*/
  /* Process update of DPICK.VPOOLH03 records.*/
  /* ------------------------------------------------------------*/

  VPOOLH03.PK-LVL-FL = PK0RM002.PK0RM-LVL-FL[PK0RW-IXM];
   /* MOVE PK0RW01.PK0RW-LVL-FL(PK0RW-IXM) TO VPOOLH03.PK-LVL-FL;*/

  VPOOLH03.PK-LVL-SCHED-QTY = PK0RM002.PK0RM-LVL-SCHED-QTY[PK0RW-IXM];
  VPOOLH03.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move date*/
  VPOOLH03.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move time*/

  try
    call "VPOOLH03" ("U ", SQLCA, VPOOLH03) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PK0RM002.PK0RM-ACT[PK0RW-IXM] = " "; /* clear selection*/
    PK0RW01.PK0RW-ACT[PK0RW-IXM] = " "; /* clear selection*/
    converseLib.validationFailed(32); /* update successful*/
    set PK0RM002.PK0RM-ACT[1] cursor;
    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PKWREC.PKWFRMAP = "16202"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    // VAGen Info - map = PK0RM002
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PKWREC.PKWFRMAP; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOOLH03.VPOOLH03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PK0R-16202

// Format the display data
Function PK0R-16301()

  PK0RW00.PK0RW-PAGE-NBR = 1;
  PK0RW00.PK0RW-IXM = 1;

  while (PK0RW00.PK0RW-IXM <= 10) /* Until end of lines*/
    if (PK0RW01.PK0RW-DTL-PK1CUOID[PK0RW-IXM] > 0)

      PK0RW00.PK0RW-SWF = "Y"; /* yes format map*/
      PK0RW00.PK0RW-UPDATE-SW = "Y"; /* turn on updated switch*/
      PK0R-16100(); /* select record*/
      PK0R-16201(); /* update record*/
    end

    PK0RW00.PK0RW-IXM = PK0RW00.PK0RW-IXM + 1; /* Increment line index*/

  end
  PK0RW01.PK0RW-MSTR-LVL-FL = " ";
  PK0RW01.PK0RW-MSTR-SCHED-QTY = 0;
  PK0R-12300(); /* Update temp storage record*/

  while (PK0RW00.PK0RW-PAGE-NBR <= PK0RW00.TA5TSQIX)

    PK0RW00.XXXTSPAG = PK0RW00.PK0RW-PAGE-NBR;
    if (PK0RW00.XXXTSPAG != PK0RW00.PK0RW-SAVE-PAGE)
      PK0R-12200(); /* Obtain temporary storage page*/
      PK0RW01.PK0RW-MSTR-LVL-FL = PK0RM001.PK0RM-MSTR-LVL-FL;
      PK0RW01.PK0RW-MSTR-SCHED-QTY = PK0RM001.PK0RM-MSTR-SCHED-QTY;
      PK0R-15301(); /* change all values*/
      PK0RW00.PK0RW-IXM = 1;
      while (PK0RW00.PK0RW-IXM <= 10) /* Until end of lines*/

        if (PK0RW01.PK0RW-DTL-PK1CUOID[PK0RW-IXM] > 0
         && PK0RW01.PK0RW-ACT[PK0RW-IXM] == "S")
          PK0RW00.PK0RW-SWF = "Y"; /* yes format map*/
          PK0RW00.PK0RW-UPDATE-SW = "Y"; /* turn on updated switch*/
          PK0R-16100(); /* select record*/
          PK0R-16201(); /* update record*/
        end

        PK0RW00.PK0RW-IXM = PK0RW00.PK0RW-IXM + 1; /* Increment line index*/

      end

    end

    PK0RW00.PK0RW-PAGE-NBR = PK0RW00.PK0RW-PAGE-NBR + 1;
  end

  PK0RW00.XXXTSPAG = PK0RW00.PK0RW-SAVE-PAGE;
  converseLib.validationFailed(32);

end // end PK0R-16301

// Format the display data
Function PK0R-16302()

  PK0RW00.PK0RW-PAGE-NBR = 1;
  PK0RW00.PK0RW-IXM = 1;

  while (PK0RW00.PK0RW-IXM <= 10) /* Until end of lines*/

    if (PK0RW01.PK0RW-DTL-PK1CUOID[PK0RW-IXM] > 0)
      PK0RW00.PK0RW-SWF = "Y"; /* yes format map*/
      PK0RW00.PK0RW-UPDATE-SW = "Y"; /* turn on updated switch*/
      PK0R-16100(); /* select record*/
      PK0R-16202(); /* update record*/
    end

    PK0RW00.PK0RW-IXM = PK0RW00.PK0RW-IXM + 1; /* Increment line index*/

  end
  PK0RW01.PK0RW-MSTR-LVL-FL = " ";
  PK0RW01.PK0RW-MSTR-SCHED-QTY = 0;
  PK0R-12300(); /* Update temp storage record*/

  while (PK0RW00.PK0RW-PAGE-NBR <= PK0RW00.TA5TSQIX)

    PK0RW00.XXXTSPAG = PK0RW00.PK0RW-PAGE-NBR;
    if (PK0RW00.XXXTSPAG != PK0RW00.PK0RW-SAVE-PAGE)
      PK0R-12200(); /* Obtain temporary storage page*/
      PK0RW01.PK0RW-MSTR-LVL-FL = PK0RM002.PK0RM-MSTR-LVL-FL;
      PK0RW01.PK0RW-MSTR-SCHED-QTY = PK0RM002.PK0RM-MSTR-SCHED-QTY;
      PK0R-15302(); /* change all values*/
      PK0RW00.PK0RW-IXM = 1;
      while (PK0RW00.PK0RW-IXM <= 10) /* Until end of lines*/

        if (PK0RW01.PK0RW-DTL-PK1CUOID[PK0RW-IXM] > 0
         && PK0RW01.PK0RW-ACT[PK0RW-IXM] == "S")
          PK0RW00.PK0RW-SWF = "Y"; /* yes format map*/
          PK0RW00.PK0RW-UPDATE-SW = "Y"; /* turn on updated switch*/
          PK0R-16100(); /* select record*/
          PK0R-16202(); /* update record*/
        end

        PK0RW00.PK0RW-IXM = PK0RW00.PK0RW-IXM + 1; /* Increment line index*/

      end

    end

    PK0RW00.PK0RW-PAGE-NBR = PK0RW00.PK0RW-PAGE-NBR + 1;
  end

  PK0RW00.XXXTSPAG = PK0RW00.PK0RW-SAVE-PAGE;
  converseLib.validationFailed(32);

end // end PK0R-16302

// Format the display data
Function PK0R-16401()

  PK0RW00.PK0RW-PAGE-NBR = 1;
  PK0RW00.PK0RW-IXM = 1;

  while (PK0RW00.PK0RW-IXM <= 10) /* Until end of lines*/

    if (PK0RW01.PK0RW-DTL-PK1CUOID[PK0RW-IXM] > 0)
      PK0RW00.PK0RW-SWF = "Y"; /* yes format map*/
      PK0RW00.PK0RW-UPDATE-SW = "Y"; /* turn on updated switch*/
      PK0R-16100(); /* select record*/
      PK0RW01.PK0RW-LVL-FL[PK0RW-IXM] = " ";
      PK0RM001.PK0RM-LVL-FL[PK0RW-IXM] = " ";
      PK0RM001.PK0RM-LVL-SCHED-QTY[PK0RW-IXM] = 0;
      PK0R-16201(); /* update record*/
    end

    PK0RW00.PK0RW-IXM = PK0RW00.PK0RW-IXM + 1; /* Increment line index*/

  end
  PK0RW01.PK0RW-MSTR-LVL-FL = " ";
  PK0RW01.PK0RW-MSTR-SCHED-QTY = 0;
  PK0R-12300(); /* Update temp storage record*/

  while (PK0RW00.PK0RW-PAGE-NBR <= PK0RW00.TA5TSQIX)

    PK0RW00.XXXTSPAG = PK0RW00.PK0RW-PAGE-NBR;
    if (PK0RW00.XXXTSPAG != PK0RW00.PK0RW-SAVE-PAGE)
      PK0R-12200(); /* Obtain temporary storage page*/
      PK0RW00.PK0RW-IXM = 1;
      while (PK0RW00.PK0RW-IXM <= 10) /* Until end of lines*/

        if (PK0RW01.PK0RW-DTL-PK1CUOID[PK0RW-IXM] > 0)
          PK0RW00.PK0RW-SWF = "Y"; /* yes format map*/
          PK0RW00.PK0RW-UPDATE-SW = "Y"; /* turn on updated switch*/
          PK0R-16100(); /* select record*/
          PK0RW01.PK0RW-LVL-FL[PK0RW-IXM] = " ";
          PK0RM001.PK0RM-LVL-FL[PK0RW-IXM] = " ";
          PK0RM001.PK0RM-LVL-SCHED-QTY[PK0RW-IXM] = 0;
          PK0R-16201(); /* update record*/
        end

        PK0RW00.PK0RW-IXM = PK0RW00.PK0RW-IXM + 1; /* Increment line index*/

      end

    end

    PK0RW00.PK0RW-PAGE-NBR = PK0RW00.PK0RW-PAGE-NBR + 1;
  end

  PK0RW00.XXXTSPAG = PK0RW00.PK0RW-SAVE-PAGE;
  converseLib.validationFailed(32);

end // end PK0R-16401

// Format the display data
Function PK0R-16402()

  PK0RW00.PK0RW-PAGE-NBR = 1;
  PK0RW00.PK0RW-IXM = 1;

  while (PK0RW00.PK0RW-IXM <= 10) /* Until end of lines*/

    if (PK0RW01.PK0RW-DTL-PK1CUOID[PK0RW-IXM] > 0)
      PK0RW00.PK0RW-SWF = "Y"; /* yes format map*/
      PK0RW00.PK0RW-UPDATE-SW = "Y"; /* turn on updated switch*/
      PK0R-16100(); /* select record*/
      PK0RW01.PK0RW-LVL-FL[PK0RW-IXM] = " ";
      PK0RM002.PK0RM-LVL-FL[PK0RW-IXM] = " ";
      PK0RM002.PK0RM-LVL-SCHED-QTY[PK0RW-IXM] = 0;
      PK0R-16202(); /* update record*/
    end

    PK0RW00.PK0RW-IXM = PK0RW00.PK0RW-IXM + 1; /* Increment line index*/

  end
  PK0RW01.PK0RW-MSTR-LVL-FL = " ";
  PK0RW01.PK0RW-MSTR-SCHED-QTY = 0;
  PK0R-12300(); /* Update temp storage record*/

  while (PK0RW00.PK0RW-PAGE-NBR <= PK0RW00.TA5TSQIX)

    PK0RW00.XXXTSPAG = PK0RW00.PK0RW-PAGE-NBR;
    if (PK0RW00.XXXTSPAG != PK0RW00.PK0RW-SAVE-PAGE)
      PK0R-12200(); /* Obtain temporary storage page*/
      PK0RW00.PK0RW-IXM = 1;
      while (PK0RW00.PK0RW-IXM <= 10) /* Until end of lines*/

        if (PK0RW01.PK0RW-DTL-PK1CUOID[PK0RW-IXM] > 0)
          PK0RW00.PK0RW-SWF = "Y"; /* yes format map*/
          PK0RW00.PK0RW-UPDATE-SW = "Y"; /* turn on updated switch*/
          PK0R-16100(); /* select record*/
          PK0RW01.PK0RW-LVL-FL[PK0RW-IXM] = " ";
          PK0RM002.PK0RM-LVL-FL[PK0RW-IXM] = " ";
          PK0RM002.PK0RM-LVL-SCHED-QTY[PK0RW-IXM] = 0;
          PK0R-16202(); /* update record*/
        end

        PK0RW00.PK0RW-IXM = PK0RW00.PK0RW-IXM + 1; /* Increment line index*/

      end

    end

    PK0RW00.PK0RW-PAGE-NBR = PK0RW00.PK0RW-PAGE-NBR + 1;
  end

  PK0RW00.XXXTSPAG = PK0RW00.PK0RW-SAVE-PAGE;
  converseLib.validationFailed(32);

end // end PK0R-16402

//*** RECORD=PK0RW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PK0RW00 type basicRecord
  10 PK0RW-IXM PK0RW-IXM ; 
  10 PK0RW-IX1 PK0RW-IX1 ; 
  10 PK0RW-IX2 PK0RW-IX2 ; 
  10 PK0RW-IX3 PK0RW-IX3 ; 
  10 PK0RW-IX4 PK0RW-IX4 ; 
  10 PK0RW-IX5 PK0RW-IX5 ; 
  10 PK0RW-IXX PK0RW-IXX ; 
  10 PK0RW-SWC PK0RW-SWC ; 
  10 PK0RW-SWD PK0RW-SWD ; 
  10 PK0RW-SWF PK0RW-SWF ; 
  10 PK0RW-SWR PK0RW-SWR ; 
  10 PK0RW-SWU PK0RW-SWU ; 
  10 PK0RW-SFN PK0RW-SFN ; 
  10 PK0RW-UPDATE-SW PK0RW-UPDATE-SW ; 
  10 PK0RW-EDIT-FL PK0RW-EDIT-FL ; 
  10 PK0RW-WARN-FL PK0RW-WARN-FL ; 
  10 PK0RW-PAGE-NBR PK0RW-PAGE-NBR ; 
  10 PK0RW-COUNTER PK0RW-COUNTER ; 
  10 PK0RW-CHECK PK0RW-CHECK ; 
  10 PK0RW-EDIT-FLAG PK0RW-EDIT-FLAG ; 
  10 PK0RW-MSTR-UPD PK0RW-MSTR-UPD ; 
  10 PK0RW-WHSE-CD PK0RW-WHSE-CD ; 
  10 PK0RW-MIN-UNITS PK0RW-MIN-UNITS ; 
  10 PK0RW-MAX-UNITS PK0RW-MAX-UNITS ; 
  10 PK0RW-MSTR-LVL-FL PK0RW-MSTR-LVL-FL ; 
  10 PK0RW-MSTR-SCHED-QTY PK0RW-MSTR-SCHED-QTY ; 
  10 PK0RW-MIN-TIME PK0RW-MIN-TIME ; 
  10 PK0RW-MAX-TIME PK0RW-MAX-TIME ; 
  10 PK0RW-SAVE-PAGE PK0RW-SAVE-PAGE ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 PK0RW-FULLDATE PK0RW-FULLDATE ; 
    15 PK0RW-FULLCC PK0RW-FULLCC ; 
    15 PK0RW-FULLYY PK0RW-FULLYY ; 
    15 PK0RW-FULLMM PK0RW-FULLMM ; 
    15 PK0RW-FULLDD PK0RW-FULLDD ; 
  10 PK0RW-FORMDATE PK0RW-FORMDATE ; 
    15 PK0RW-FORMMM PK0RW-FORMMM ; 
    15 PK0RW-FORMDD PK0RW-FORMDD ; 
    15 PK0RW-FORMYY PK0RW-FORMYY ; 
  10 PK0RW-DTL-LINE PK0RW-DTL-LINE ; 
  10 PK0RW-FORMAT PK0RW-FORMAT ; 
    15 PK0RW-CHAR PK0RW-CHAR [10] ; 
  10 PK0RW-FORMAT2 PK0RW-FORMAT2 ; 
    15 PK0RW-CHAR2 PK0RW-CHAR2 [8] ; 
end // end PK0RW00

//*** RECORD=PK0RW01 ****
// /*
// /*      application working storage for map1
// /*
// ***********************
Record PK0RW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(727) ; // Temporary storage page length
    10 PK0RW-WHSE-CD PK0RW-WHSE-CD ; 
    10 PK0RW-MIN-UNITS PK0RW-MIN-UNITS ; 
    10 PK0RW-MAX-UNITS PK0RW-MAX-UNITS ; 
    10 PK0RW-MSTR-LVL-FL PK0RW-MSTR-LVL-FL ; 
    10 PK0RW-MSTR-SCHED-QTY PK0RW-MSTR-SCHED-QTY ; 
    10 PK0RW-MIN-TIME PK0RW-MIN-TIME ; 
    10 PK0RW-MAX-TIME PK0RW-MAX-TIME ; 
    10 PK0RW-KUCCOID PK0RW-KUCCOID ; 
    10 PK0RW-KUMSTRID-CHA PK0RW-KUMSTRID-CHA ; 
      15 PK0RW-KUMSTRID PK0RW-KUMSTRID ; 
    10 PK0RW-PK1CUOID PK0RW-PK1CUOID ; 
    10 PK0RW-PK1NORID PK0RW-PK1NORID ; 
    10 PK0RW-DTL-LINE PK0RW-DTL-LINE [10] ; 
      15 PK0RW-ACT PK0RW-ACT ; 
      15 PK0RW-DTL-KUCCOID PK0RW-DTL-KUCCOID ; 
      15 PK0RW-DTL-KUMSTRID PK0RW-DTL-KUMSTRID ; 
      15 PK0RW-DTL-PK1CUOID PK0RW-DTL-PK1CUOID ; 
      15 PK0RW-DTL-PK1NORID PK0RW-DTL-PK1NORID ; 
      15 PK0RW-TF1CARCD PK0RW-TF1CARCD ; 
      15 PK0RW-XPPCD PK0RW-XPPCD ; 
      15 PK0RW-OP1SPHDF PK0RW-OP1SPHDF ; 
      15 PK0RW-LVL-FL PK0RW-LVL-FL ; 
      15 PK0RW-LVL-SCHED-QTY PK0RW-LVL-SCHED-QTY ; 
      15 PK0RW-PK4ORDFC PK0RW-PK4ORDFC ; 
        20 PK0RW-PK4ORDFC-NUM PK0RW-PK4ORDFC-NUM ; 
      15 PK0RW-PK4ORDRP PK0RW-PK4ORDRP ; 
      15 PK0RW-PK4ORDTM PK0RW-PK4ORDTM ; 
        20 PK0RW-PK4ORDTM-NUM PK0RW-PK4ORDTM-NUM ; 
end // end PK0RW01

//*** RECORD=VPOOLH03 ****
// ************* PICKING ORDER POOL HEADER TABLE **************
// 
// DB2 TABLE VIEW:      DPICK.VPOOLH01
// 
// COPYLIB MEMBER:      DCL00279
// 
// I/O MODULE:          IO1720
// 
// KEY TO DB2 TABLE:    XWHCD
//                      PK1PRTN
//                      PK1CUOID
//                      PK1NORID
// 
// DATE CREATED:        05/22/87
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 05/22/87   SHP       New record definition.
// 04/02/90  mchow      Added XBCCD to record; deleted IN7SPINS
//                      IN7STINS from record.
// 05/07/90  jcampb     added xsocd, xobcd, sm1acyid, xdscd,
//                      and op1ftind to record(struct change)
// 10/02/90  JWOOD      added PK4CUHLD, PK4PVSEL
// 02/05/91  MWALTO     added KUFMIXBL, KUCMXYNT, KUCUNTCS,
//                      XHDLPIND, XPACD AND RENAMED PK4PVSEL TO
//                      PK4SLIND for table changes.
// 03/04/91  SBEAUC     added PK4ORDFC, PK4ORDRP, PK4ORFT3,
//                      PK4ORDTM and deleted KUCMXYNT for table
//                      changes.
// 06/18/92  shende     Add kufmixbl, kucuntcs, pk-hndl-lvl-fl,
//                      pk-ivc-req-fl, kumslfid, kujslfid,
//                      pk-ord-dclr-val for table changes
// 02/21/94  MPLUTH     Changed XXXADDR1 - 3 to XXX-ADDR1 - 3.
//                      Added XXX_ADDR4 - 6.
// ************************
Record VPOOLH03 type basicRecord
  5 VPOOLH03-GROUP VPOOLH03-GROUP ; 
    10 VPOOLH03-KEY VPOOLH03-KEY ; 
      15 XWHCD XWHCD ; 
      15 PK1PRTN PK1PRTN ; 
      15 PK1CUOID PK1CUOID ; 
      15 PK1NORID PK1NORID ; 
    10 PK4STKTF PK4STKTF ; 
    10 PK1ALLNB PK1ALLNB ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 XGPCD XGPCD ; 
    10 XDVCD XDVCD ; 
    10 XBCCD XBCCD ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1TBREP OP1TBREP ; 
    10 OP11TMSF OP11TMSF ; 
    10 OP1SPHDF OP1SPHDF ; 
    10 OP1SPLBF OP1SPLBF ; 
    10 OP1SPINF OP1SPINF ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 OP1DSADT OP1DSADT ; 
    10 OP1DSBDT OP1DSBDT ; 
    10 XPACD XPACD ; 
    10 PK-HNDL-LVL-FL PK-HNDL-LVL-FL ; 
    10 XPKCD XPKCD ; 
    10 XPPCD XPPCD ; 
    10 XSOCD XSOCD ; 
    10 XOTCD XOTCD ; 
    10 XOBCD XOBCD ; 
    10 XOCCD XOCCD ; 
    10 SP1ID SP1ID ; 
    10 SM1AGYID SM1AGYID ; 
    10 XDSCD XDSCD ; 
    10 OP1FTIND OP1FTIND ; 
    10 OP1SGPAO OP1SGPAO ; 
    10 KUMSHAID KUMSHAID ; 
    10 IN7STFOW IN7STFOW ; 
    10 IN7STQDT IN7STQDT ; 
    10 IN7STLDT IN7STLDT ; 
    10 IN7STTWH IN7STTWH ; 
    10 TF1CARCD TF1CARCD ; 
    10 TF2DSTCD TF2DSTCD ; 
    10 PK4CARSP PK4CARSP ; 
    10 PK-IVC-REQ-FL PK-IVC-REQ-FL ; 
    10 OP5ALTNM OP5ALTNM ; 
    10 KUMSLFID KUMSLFID ; 
    10 KUJSLFID KUJSLFID ; 
    10 XXX-ADDR1 XXX-ADDR1 ; 
    10 XXX-ADDR2 XXX-ADDR2 ; 
    10 XXX-ADDR3 XXX-ADDR3 ; 
    10 XXX-ADDR4 XXX-ADDR4 ; 
    10 XXX-ADDR5 XXX-ADDR5 ; 
    10 XXX-ADDR6 XXX-ADDR6 ; 
    10 XXXCITY XXXCITY ; 
    10 XSTSTCD XSTSTCD ; 
    10 XXXZIP XXXZIP ; 
    10 XCTCD XCTCD ; 
    10 PK4PLNDT PK4PLNDT ; 
    10 PK4OTWGT PK4OTWGT ; 
    10 PK4OTUNT PK4OTUNT ; 
    10 PK4ORDFC PK4ORDFC ; 
    10 PK4ORDRP PK4ORDRP ; 
    10 PK-ORD-DCLR-VAL PK-ORD-DCLR-VAL ; 
    10 PK4ORFT3 PK4ORFT3 ; 
    10 PK4ORDTM PK4ORDTM ; 
    10 PK4ITEMS PK4ITEMS ; 
    10 OP1EXPDF OP1EXPDF ; 
    10 PK4ORHLD PK4ORHLD ; 
    10 PK4CUHLD PK4CUHLD ; 
    10 PK4SLIND PK4SLIND ; 
    10 PK-LVL-FL PK-LVL-FL ; 
    10 PK-LVL-SCHED-QTY PK-LVL-SCHED-QTY ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VPOOLH03

// PK_LVL_FL
DataItem PK-LVL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_LVL_SCHED_QTY
DataItem PK-LVL-SCHED-QTY smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0RW-ACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0RW-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0RW-CHAR2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage Check number
DataItem PK0RW-CHECK num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working storage counter
DataItem PK0RW-COUNTER num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CU_CO_ID
DataItem PK0RW-DTL-KUCCOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// CU_STOR_ID
DataItem PK0RW-DTL-KUMSTRID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Group level
DataItem PK0RW-DTL-LINE char(66)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-ord-stktf-id
DataItem PK0RW-DTL-PK1CUOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pk-nike-ord-id
DataItem PK0RW-DTL-PK1NORID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// edit only flag
DataItem PK0RW-EDIT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Edit Flag
DataItem PK0RW-EDIT-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0RW-FORMAT char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0RW-FORMAT2 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format Date
DataItem PK0RW-FORMDATE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format Date dd
DataItem PK0RW-FORMDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format Date mm
DataItem PK0RW-FORMMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format Date yy
DataItem PK0RW-FORMYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work Full Date cc
DataItem PK0RW-FULLCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work Full Date
DataItem PK0RW-FULLDATE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work Full Date dd
DataItem PK0RW-FULLDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work Full Date mm
DataItem PK0RW-FULLMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work Full Date yy
DataItem PK0RW-FULLYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PK0RW-IX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PK0RW-IX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PK0RW-IX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PK0RW-IX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PK0RW-IX5 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PK0RW-IXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PK0RW-IXX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0RW-KUCCOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0RW-KUMSTRID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0RW-KUMSTRID-CHA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0RW-LVL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0RW-LVL-SCHED-QTY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0RW-MAX-TIME num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0RW-MAX-UNITS num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0RW-MIN-TIME num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0RW-MIN-UNITS num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0RW-MSTR-LVL-FL char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0RW-MSTR-SCHED-QTY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Master Update Switch
DataItem PK0RW-MSTR-UPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0RW-OP1SPHDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage page number
DataItem PK0RW-PAGE-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0RW-PK1CUOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0RW-PK1NORID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk-ord-ful-cs-qty
DataItem PK0RW-PK4ORDFC char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0RW-PK4ORDFC-NUM num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk-ord-repk-qty
DataItem PK0RW-PK4ORDRP num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk-tot-ord-tm
DataItem PK0RW-PK4ORDTM char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-tot-ord-tm
DataItem PK0RW-PK4ORDTM-NUM num(10,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page save field
DataItem PK0RW-SAVE-PAGE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// function switch
DataItem PK0RW-SFN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem PK0RW-SWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem PK0RW-SWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem PK0RW-SWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PK0RW-SWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem PK0RW-SWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-carr-cd
DataItem PK0RW-TF1CARCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update switch
DataItem PK0RW-UPDATE-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning flag
DataItem PK0RW-WARN-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0RW-WHSE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0RW-XPPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem VPOOLH03-GROUP char(496)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem VPOOLH03-KEY char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

