package pk0w;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PK0W ****
// ------------------------------------------------------------
// ------------------------------------------------------------
// ------------------------------------------------------------
// ----- pk0w  -  PLANNING RELEASE SCREEN.                -----
// -----          THIS APPLICATION GIVES THE USER THE     -----
// -----          ABILITY TO RELEASE CUSTOMERS, CARRIERS, -----
// -----          ORDERS FOR THE PICK PLANNING RUN.       -----
// -----          (THE CUSTOMER,ORDER,CARRIER WILL STILL  -----
// -----          BE ON HOLD FOR THE PICKING RUNS.)       -----
// -----          WHEN A CUSTOMER,ORDER,CARRIER IS ON     -----
// -----          HOLD, THIS MEANS IT WILL NOT GET        -----
// -----          SHIPPED UNTIL IT IS TAKEN OFF HOLD OR   -----
// -----          THE RELEASE DATE HAS EXPIRED.           -----
// -----                                                  -----
// -----          THE PROGRAM SUPPORTS SELECTING AN ORDER,-----
// -----          JUMPING TO ORDER INQUIRY AND RETURNING  -----
// -----          WITH THAT ORDER SHOWN AS BEING VIEWED.  -----
// -----          (shown with a 'v' in the action field)  -----
// -----                                                  -----
// -----          SELECTION FOR CUSTOMER INQUIRY WORKS    -----
// -----          THE SAME WAY.                           -----
// ------------------------------------------------------------
// ------------------------------------------------------------
// ------------------------------------------------------------
// ----- MAINTENANCE LOG:                                 -----
// -----                                                  -----
// ----- NAME   DATE       DESCRIPTION                    -----
// ----- PRM    07/27/87   created                        -----
// ----- JBW    11/29/88   ADDED NONCSP OPTION TO CALLS   -----
// ----- JBW    11/29/88   ADDED XSSEGTR LOGIC            -----
// ----- MKM    02/22/89   ADDED CARRIER RELEASE LOGIC    -----
// ------jbc    07/21/89   changed xfer from pk0i to pk09 -----
// -----SBEAUC  03/05/91   Change references from PKA-    -----
// -----                   to XHR-items/also use corp tbl -----
// -----                   for hold reason codes-tbl chgs.-----
// -----Shende  06/22/92   Table changes                  -----
// -----CBRINE  08/11/95   CANADA Added XCTCD to PKWREC   -----
// 
// ------------------------------------------------------------
// -----NGANGO  02/05/98   Y2K MODIFICATION - Map PK0WM010 is
//                         changed to remove zero suppressions
//                         from year fields and also Process
//                         Pk0W251,PK0W254,Pk0W255,PK0W257,
//                         Pk0W400,PK0W410.
// ------------------------------------------------------------
// *********************
Program PK0W type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK0WW01 PK0WW01; // record
  PK4REC PK4REC; // record
  PK6REC PK6REC; // record
  PK9REC PK9REC; // record
  PKBREC PKBREC; // record
  PKWREC PKWREC; // record
  PKXREC PKXREC; // record
  PKYREC PKYREC; // record
  PKZREC PKZREC; // record
  PWFREC PWFREC; // record
  PWGREC PWGREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA9REC TA9REC; // record
  TF1REC TF1REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use XHRTBL; // table
  use PK0WM.PK0WM010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PK0W005: PK0W005();
  end // end main
end // end PK0W

// planning release main process
Function PK0W005()

   /* ---------------  PLANNING RELEASE SCREEN                ----*/
   /* ---------------          main process  pk0w005          ----*/

  XSENTRY();

  XSSEGTR(); /* SET SEGMENTED TRANS ID*/

  PK0W100(); /* initialization*/

  while (converseVar.eventKey not pf3)
    PK0W200(); /* converse map until done*/
  end

   /* -------------  end process pk0w005  --------------------*/
end // end PK0W005

// initialization routine
Function PK0W100()

   /* ---------------  pk0w100 initialization  -------------------*/

   /* ---- clear records and*/
   /* ---- set up map header information*/
  set PK0WM010 initial; /* initially clear the map*/
  set PK0WW01 empty; /* initially clear working storage*/
  PK0WW01.PK0WWFL8 = "Y"; /* first time thru flag*/
  PK0WM010.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  PK0WM010.XXXRVNBR = 01; /* revision number*/
  PK0WM010.XXXERRID = "PK0W100"; /* REVISION NUMBER*/
  converseVar.segmentedMode = 1; /* run in segmented mode*/
  VGVar.handleHardIOErrors = 1; /* to trap hard errors in program*/
  converseVar.commitOnConverse = 1; /* auto commit on every map converse*/
  PK0WW01.PK0WWBAS = 1; /* beginning piont of reason code array*/
  PK0WW01.PK0WWEND = 10; /* ending piont of reason code array*/

  PKWREC.PKWGRPLV = COMMAREA.CAUSERA;

        /* if returning from inquiry*/
            /* next sentence*/
        /* else*/
            /* if transfer was from inside picking*/
            /* and warehouse changed from commarea.xwhcd*/
            /* and security allows warehouse change*/
                /* get whse abreviation using pkwrec.xwhcd*/
            /* else*/
                /* get whse abreviation using commarea.xwhcd*/
  if (PKWREC.PKWINDEX > 0
   && PKWREC.PKWFRMAP[1] == COMMAREA.CACURRAP)
     /* next sentence*/
  else
    PK0WW01.PK0WWFRM = COMMAREA.CAFROMAP;
    if (PK0WW01.PK0WWFRM != "PK0"
     && PK0WW01.PK0WWFRM != "PW0")
      set PKWREC empty; /* initially clear the shared work rec*/
      PKWREC.XWHCD = COMMAREA.XWHCD;
      PK0WM010.XWHCD = COMMAREA.XWHCD;
      PK0W110(); /* get warehouse abbreviation*/
    else
      if (PKWREC.XWHCD != COMMAREA.XWHCD)
        /* and commarea.calvl(1) eq 'y'*/
        PK0WM010.XWHCD = PKWREC.XWHCD;
        PK0W110(); /* get warehouse abbreviation*/
      else
        PKWREC.XWHCD = COMMAREA.XWHCD;
        PK0WM010.XWHCD = COMMAREA.XWHCD;
        PK0W110(); /* get warehouse abbreviation*/
      end
    end
  end

   /* ----- initially load the valid reason codes*/
  PK0W120();

   /* if warehouse lookup was not successful, exit*/
  if (PK0WW01.PK0WWFL3 == "N")
    return;
  end

   /* ----- if returning from inquiry*/
   /* ----- or from main menu with customer key*/
   /* -----     redisplay the row that was viewed*/
  if (PKWREC.PKWINDEX > 0)
    if (PKWREC.PKWFRMAP[1] == COMMAREA.CACURRAP
     || PKWREC.PKWFRMAP[1] == "PK0A")
      PK0W130();
      if (PK0WM010.PK0WMKUA == "S")
        PK0WM010.PK0WMKUA = " ";
      end
    end
  end

   /* ---- unconditionally clear the key areas*/
  PKWREC.PKWINDEX = 0;
  PKWREC.PKWCNTRL = " ";

   /* -------------  end process pk0w100  --------------------*/
end // end PK0W100

// get warehouse abbreviation
Function PK0W110()

   /* ---------------  pk0w110 get warehouse abbreviation --------*/

  PK0WW01.PK0WWFL3 = "Y"; /* whse lookup successful flag*/
  if (PKWREC.XWHCD in XWHTBL.XWHCD)
    PK0WM010.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end

  if (sysVar.arrayIndex == 0) /* Table entry not found*/
    converseLib.validationFailed(2); /* Indicate invalid warehouse*/
    PK0WM010.XWHABRV = " ";
    PK0WW01.PK0WWFL3 = "N"; /* whse lookup successful flag*/
    set PK0WM010.XWHCD cursor, bold;
    return; /* Return to caller*/
  end

  if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not active warehouse status*/
    converseLib.validationFailed(3); /* Indicate inactive warehouse*/
    PK0WM010.XWHABRV = " ";
    PK0WW01.PK0WWFL3 = "N"; /* whse lookup successful flag*/
    set PK0WM010.XWHCD cursor, bold;
    return; /* Return to caller*/
  end

  PKWREC.XWHABRV = PK0WM010.XWHABRV;

   /* -------------  end process pk0w110  --------------------*/
end // end PK0W110

// load valid reason codes
Function PK0W120()

   /* ---------------  pk0w120   ---------------------------------*/
       /* load map and working storage with valid reason codes*/

  PK0WM010.XXXERRID = "PK0W120";

   /* ----- if table overflow has occured (pk0qwfl4 = 'y')*/
   /* ----- from a previous execution of this module*/
   /* -----     set ezemno and get out.*/
  if (PK0WW01.PK0WWFL4 == "Y")
    converseLib.validationFailed(24);
    return;
  end

       /* load map until end of reason code table*/
  PK0WW01.PK0WWNDX = 1;
  PK0WW01.PK0WWNX2 = 1;
  PK0WW01.PK0WWNX3 = 1;
  PK0WW01.PK0WWFL1 = "Y";
  while (PK0WW01.PK0WWFL1 == "Y")
    PK0W125();
  end

   /* -------------  end process pk0w120  --------------------*/
end // end PK0W120

// select next reason code
Function PK0W125()
   /* ---------------  pk0w125   ---------------------------------*/
       /* select next reason code*/
       /* load working storage*/

  PK0WM010.XXXERRID = "PK0W125";

   /* ---------------  load valid reason codes          ----------*/

  if (PK0WW01.PK0WWNDX < 191)
    if (XHRTBL.XHRCD[PK0WWNDX] != "99") /* not end of table*/
      PK0WW01.XHRCD[PK0WWNDX] = XHRTBL.XHRCD[PK0WWNDX];
      PK0WW01.XHRDESC[PK0WWNDX] = XHRTBL.XHRDESC[PK0WWNDX];
      PK0WW01.XHRABRV[PK0WWNDX] = XHRTBL.XHRABRV[PK0WWNDX];
    else
      PK0WW01.PK0WWFL1 = "N"; /* end of table*/
      PK0WW01.PK0WWTRR = PK0WW01.PK0WWNDX; /* count of entries*/
      PK0WW01.PK0WWTRR = PK0WW01.PK0WWTRR - 1; /* dont count '99' entry*/
    end
  else
    PK0WW01.PK0WWFL1 = "N";
    PK0WW01.PK0WWFL4 = "Y"; /* table overflow flag*/
    converseLib.validationFailed(24); /* table overflow*/
    return;
  end

  if (PK0WW01.PK0WWNDX <= 10)
    PK0WM010.XHRCD[PK0WWNX2] = XHRTBL.XHRCD[PK0WWNDX];
    PK0WM010.XHRDESC[PK0WWNX2] = XHRTBL.XHRDESC[PK0WWNDX];
    PK0WW01.PK0WWNX2 = PK0WW01.PK0WWNX2 + 1; /* increment index*/
  end

  PK0WW01.PK0WWNDX = PK0WW01.PK0WWNDX + 1; /* increment index*/

   /* -------------  end process pk0w125  --------------------*/
end // end PK0W125

// returned from inquiry
Function PK0W130()
   /* ---------------  pk0w130   ---------------------------------*/
   /* ----- returned from inquiry*/

  PK0WM010.XXXERRID = "PK0W130";

   /* ----- if returning from customer inquiry*/
   /* ----- or from main menu with customer key*/
   /* -----     get customer hold row(s) and*/
   /* -----     get customer description*/
  if (PKWREC.PKWSLTYP[1] == "C"
   || PKWREC.PKWSLTYP[1] == "M")
    PK0WW01.PK0WWFL7 = "C"; /* processing customers/orders fl*/
    PKXREC.PKWARRAY = PKWREC.PKWARRAY[1];
    set PKWREC empty;
    set PK9REC empty;
    PK0WM010.XWHCD = PKXREC.XWHCD;
    PKWREC.XWHCD = PKXREC.XWHCD;
    PK0WM010.XWHABRV = PKXREC.XWHABRV;
    PKWREC.XWHABRV = PKXREC.XWHABRV;
    PK0WM010.PK0WMKUA = PKXREC.PKXKUACT[1];
    PK0WM010.KUCCOID = PKXREC.KUCCOID[1];
    PK0WM010.KUMSTRID = PKXREC.KUMSTRID[1];
    PK0WM010.XNXCD = PKXREC.XNXCD[1];
                                    /* protect order fields*/
    set PK0WM010.PK0WMORA protect;
    set PK0WM010.PK1CUOID protect;
    set PK0WM010.PK1NORID protect;
    set PK0WM010.PK0WMORR protect;
    set PK0WM010.PK0WMOMM protect;
    set PK0WM010.PK0WMODD protect;
    set PK0WM010.PK0WMOYY protect;
                                    /* protect carrier fields*/
    set PK0WM010.PK0WMCAA protect;
    set PK0WM010.TF1CARCD protect;
    set PK0WM010.PK0WMCAR protect;
    set PK0WM010.PK0WMCMM protect;
    set PK0WM010.PK0WMCDD protect;
    set PK0WM010.PK0WMCYY protect;
    PK0W135(); /* get customer name*/
    if (SQLCA.VAGen_SQLCODE != 0)
      return;
    end

    PK9REC.XWHCD = PKXREC.XWHCD;
    PK9REC.KUCCOID = PKXREC.KUCCOID[1];
    PK9REC.KUMSTRID = PKXREC.KUMSTRID[1];
    PK9REC.XNXCD = PKXREC.XNXCD[1];
    PK9REC.XHRCD = "*";
    PKZREC.PKZFUNC = "S ";
    call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
                                   /* sel unique on customer*/
                                   /* hold table using wildcard '*'*/
                                   /* for reason code*/
    if (SQLCA.VAGen_SQLCODE == 0) /* 1 row was found*/
      PK0WW01.PK0WWFDT = PK9REC.PK9RELDT;
      PK0WM010.PK0WMKYY = PK0WW01.PK0WWFYY;
      PK0WM010.PK0WMKMM = PK0WW01.PK0WWFMM;
      PK0WM010.PK0WMKDD = PK0WW01.PK0WWFDD;
      PK0WM010.PK0WMKUR = PK9REC.XHRCD;
      PK0WW01.PK0WWRSN = PK9REC.XHRCD;
      PK0WW01.PK0WWNDX = 1;
      PK0WW01.PK0WWFL6 = "N";
      while (PK0WW01.PK0WWNDX <= PK0WW01.PK0WWTRR
       && PK0WW01.PK0WWFL6 == "N")
        PK0W252();
      end
      if (PK0WW01.PK0WWFL6 == "Y")
        PK0WM010.PK0WMKUD = PK0WW01.XHRABRV[PK0WWNDX];
      else
        PK0WM010.PK0WMKUD = "UNKNWN";
      end
    else
      if (SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
        set PK9REC empty;
        set PK0WM010.PK0WMKUR protect;
        set PK0WM010.PK0WMKUA protect;
        set PK0WM010.PK0WMKMM protect;
        set PK0WM010.PK0WMKDD protect;
        set PK0WM010.PK0WMKYY protect;
        PK9REC.XWHCD = PKXREC.XWHCD;
        PK9REC.KUCCOID = PKXREC.KUCCOID[1];
        PK9REC.KUMSTRID = PKXREC.KUMSTRID[1];
        PK9REC.XNXCD = PKXREC.XNXCD[1];
        call "IO1790" ("S1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
        PK0WW01.PK0WWNX3 = 1;
        while (PK0WW01.PK0WWNX3 <= 10)
          PK0W137(); /* load customer hold line items*/
        end
        set PK0WM010.PK0WMACT[1] cursor;
        PKZREC.PKZFUNC = "C1";
        call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes}; /* close set*/
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(28); /* contention for data base resorce*/
          return;
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* no records found,*/
            converseLib.validationFailed(71);
            return; /* no need to load the map/ws*/
          else
            converseLib.validationFailed(29); /* fatal error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0W130 "; /* Process name*/
            TA1REC.TA1LOC = "SELECT SET               ";
            TA1REC.TA1MAP = "PK0WM010"; /* Map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
            TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

            return;
          end
        end
      end
    end
  end

   /* ----- if returning from order inquiry*/
   /* -----     get order hold row(s)*/
  if (PKWREC.PKWSLTYP[1] == "O")
    PK0WW01.PK0WWFL7 = "O"; /* processing customers/orders fl*/
    PKYREC.PKWARRAY = PKWREC.PKWARRAY[1];
    set PKWREC empty;
    set PKBREC empty;
    PK0WM010.XWHCD = PKYREC.XWHCD;
    PKWREC.XWHCD = PKYREC.XWHCD;
    PK0WM010.XWHABRV = PKYREC.XWHABRV;
    PKWREC.XWHABRV = PKYREC.XWHABRV;
    PK0WM010.PK0WMORA = PKYREC.PKYORACT[1];
    PK0WM010.PK1CUOID = PKYREC.PK1CUOID[1];
    PK0WM010.PK1NORID = PKYREC.PK1NORID[1];
                                   /* protect customer fields*/
    set PK0WM010.PK0WMKUA protect;
    set PK0WM010.KUCCOID protect;
    set PK0WM010.KUMSTRID protect;
    set PK0WM010.XNXCD protect;
    set PK0WM010.PK0WMKUR protect;
    set PK0WM010.PK0WMKMM protect;
    set PK0WM010.PK0WMKDD protect;
    set PK0WM010.PK0WMKYY protect;
                                   /* protect carrier fields*/
    set PK0WM010.PK0WMCAA protect;
    set PK0WM010.TF1CARCD protect;
    set PK0WM010.PK0WMCAR protect;
    set PK0WM010.PK0WMCMM protect;
    set PK0WM010.PK0WMCDD protect;
    set PK0WM010.PK0WMCYY protect;

    PKBREC.XWHCD = PKYREC.XWHCD;
    PKBREC.PK1CUOID = PKYREC.PK1CUOID[1];
    PKBREC.PK1NORID = PKYREC.PK1NORID[1];
    PKBREC.XHRCD = "*";
    PKZREC.PKZFUNC = "S ";
    call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
                                   /* select unique on order*/
                                   /* hold table using wildcard '*'*/
                                   /* for reason code*/
    if (SQLCA.VAGen_SQLCODE == 0) /* 1 row was found*/
      PK0WW01.PK0WWFDT = PKBREC.PKBRELDT;
      PK0WM010.PK0WMOYY = PK0WW01.PK0WWFYY;
      PK0WM010.PK0WMOMM = PK0WW01.PK0WWFMM;
      PK0WM010.PK0WMODD = PK0WW01.PK0WWFDD;
      PK0WM010.PK0WMORR = PKBREC.XHRCD;
      PK0WW01.PK0WWRSN = PKBREC.XHRCD;
      PK0WW01.PK0WWNDX = 1;
      PK0WW01.PK0WWFL6 = "N";
      while (PK0WW01.PK0WWNDX <= PK0WW01.PK0WWTRR
       && PK0WW01.PK0WWFL6 == "N")
        PK0W252();
      end
      if (PK0WW01.PK0WWFL6 == "Y")
        PK0WM010.PK0WMORD = PK0WW01.XHRABRV[PK0WWNDX];
      else
        PK0WM010.PK0WMORD = "UNKNWN";
      end
      set PK0WM010.PK0WMORA cursor;
    else
      if (SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
        set PKBREC empty;
        set PK0WM010.PK0WMORR protect;
        set PK0WM010.PK0WMORA protect;
        set PK0WM010.PK0WMOMM protect;
        set PK0WM010.PK0WMODD protect;
        set PK0WM010.PK0WMOYY protect;
        PKBREC.XWHCD = PKYREC.XWHCD;
        PKBREC.PK1CUOID = PKYREC.PK1CUOID[1];
        PKBREC.PK1NORID = PKYREC.PK1NORID[1];
        call "IO1770" ("S1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
        PK0WW01.PK0WWNX3 = 1;
        while (PK0WW01.PK0WWNX3 <= 10)
          PK0W138(); /* load order hold line items*/
        end
        set PK0WM010.PK0WMACT[1] cursor;
        PKZREC.PKZFUNC = "C1";
        call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes}; /* close set*/
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(28); /* contention for data base resorce*/
          return;
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* no records found,*/
            converseLib.validationFailed(72);
            return; /* no need to load the map/ws*/
          else
            converseLib.validationFailed(29); /* fatal error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0W130 "; /* Process name*/
            TA1REC.TA1LOC = "SELECT SET               ";
            TA1REC.TA1MAP = "PK0WM010"; /* Map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
            TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

            return;
          end
        end
      end
    end
  end

   /* ----- if returning from carrier inquiry*/
   /* -----     get carrier hold row(s)*/
  if (PKWREC.PKWSLTYP[1] == "R")
    PK0WW01.PK0WWFL7 = "R"; /* processing carrier flag*/
    PWGREC.PKWARRAY = PKWREC.PKWARRAY[1];
    set PKWREC empty;
    set PWFREC empty;
    PK0WM010.XWHCD = PWGREC.XWHCD;
    PKWREC.XWHCD = PWGREC.XWHCD;
    PK0WM010.XWHABRV = PWGREC.XWHABRV;
    PKWREC.XWHABRV = PWGREC.XWHABRV;
    PK0WM010.PK0WMCAA = PWGREC.PWGCAACT[1];
    PK0WM010.TF1CARCD = PWGREC.TF1CARCD[1];
                                    /* protect customer fields*/
    set PK0WM010.PK0WMKUA protect;
    set PK0WM010.KUCCOID protect;
    set PK0WM010.KUMSTRID protect;
    set PK0WM010.XNXCD protect;
    set PK0WM010.PK0WMKUR protect;
    set PK0WM010.PK0WMKMM protect;
    set PK0WM010.PK0WMKDD protect;
    set PK0WM010.PK0WMKYY protect;
                                    /* protect order fields*/
                                    /* protect order fields*/
    set PK0WM010.PK0WMORA protect;
    set PK0WM010.PK1CUOID protect;
    set PK0WM010.PK1NORID protect;
    set PK0WM010.PK0WMORR protect;
    set PK0WM010.PK0WMOMM protect;
    set PK0WM010.PK0WMODD protect;
    set PK0WM010.PK0WMOYY protect;
    PK0W134(); /* get carrier abrv*/
    if (SQLCA.VAGen_SQLCODE != 0)
      return;
    end

    PWFREC.XWHCD = PWGREC.XWHCD;
    PWFREC.TF1CARCD = PWGREC.TF1CARCD[1];
    PWFREC.XHRCD = "*";
    PKZREC.PKZFUNC = "S ";
    call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes}; /* select unique carrier*/
                                   /* hold table using wildcard '*'*/
                                   /* for reason code*/
    if (SQLCA.VAGen_SQLCODE == 0) /* 1 row was found*/
      PK0WW01.PK0WWFDT = PWFREC.PKBRELDT;
      PK0WM010.PK0WMCYY = PK0WW01.PK0WWFYY;
      PK0WM010.PK0WMCMM = PK0WW01.PK0WWFMM;
      PK0WM010.PK0WMCDD = PK0WW01.PK0WWFDD;
      PK0WM010.PK0WMCAR = PWFREC.XHRCD;
      PK0WW01.PK0WWRSN = PWFREC.XHRCD;
      PK0WW01.PK0WWNDX = 1;
      PK0WW01.PK0WWFL6 = "N";
      while (PK0WW01.PK0WWNDX <= PK0WW01.PK0WWTRR
       && PK0WW01.PK0WWFL6 == "N")
        PK0W252();
      end
      if (PK0WW01.PK0WWFL6 == "Y")
        PK0WM010.PK0WMCAD = PK0WW01.XHRABRV[PK0WWNDX];
      else
        PK0WM010.PK0WMCAD = "UNKNWN";
      end
      set PK0WM010.PK0WMCAA cursor;
    else
      if (SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
        set PWFREC empty;
        set PK0WM010.PK0WMCAR protect;
        set PK0WM010.PK0WMCAA protect;
        set PK0WM010.PK0WMCMM protect;
        set PK0WM010.PK0WMCDD protect;
        set PK0WM010.PK0WMCYY protect;
        PWFREC.XWHCD = PWGREC.XWHCD;
        PWFREC.TF1CARCD = PWGREC.TF1CARCD[1];
        call "IO3190" ("S1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
        PK0WW01.PK0WWNX3 = 1;
        while (PK0WW01.PK0WWNX3 <= 10)
          PK0W139(); /* load carrier hold line items*/
        end
        set PK0WM010.PK0WMACT[1] cursor;
        PKZREC.PKZFUNC = "C1";
        call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes}; /* close set*/
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(28); /* contention for data base resorce*/
          return;
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* no records found,*/
            converseLib.validationFailed(277);
            return; /* no need to load the map/ws*/
          else
            converseLib.validationFailed(29); /* fatal error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0W130 "; /* Process name*/
            TA1REC.TA1LOC = "SELECT SET               ";
            TA1REC.TA1MAP = "PK0WM010"; /* Map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
            TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

            return;
          end
        end
      end
    end
  end

   /* -------------  end process pk0w130  --------------------*/
end // end PK0W130

// get carrier abbreviation
Function PK0W134()
   /* ---------------  pk0w134   ---------------------------------*/
   /* ----- get carrier abbreviation*/

  PK0WM010.XXXERRID = "PK0W134";

  set TF1REC empty;
  TF1REC.TF1CARCD = PK0WM010.TF1CARCD;

  call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes}; /* select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == -811)
    PK0WM010.TF1ABRV = TF1REC.TF1ABRV;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      PK0WW01.PK0WWFLE = "Y"; /* carrier had errors flag*/
      converseLib.validationFailed(28); /* in use*/
      return;

    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(77); /* not found*/
        set PK0WM010.TF1CARCD cursor, bold;
        PK0WW01.PK0WWFLE = "Y"; /* carrier had errors flag*/
        return;

      else
        converseLib.validationFailed(29); /* fatal error*/
        PK0WW01.PK0WWFLE = "Y"; /* carrier had errors flag*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0W134 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT UNIQUE            ";
        TA1REC.TA1MAP = "PK0WM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCARR001"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        return;
      end
    end
  end

   /* -------------  end process pk0w134  --------------------*/
end // end PK0W134

// get customer name
Function PK0W135()
   /* ---------------  pk0w135   ---------------------------------*/
   /* ----- get customer name*/

  PK0WM010.XXXERRID = "PK0W135";

  set PK6REC empty;
  PK6REC.KUCCOID = PK0WM010.KUCCOID;
  PK6REC.KUMSTRID = PK0WM010.KUMSTRID;

  call "IO1830" ("S ", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes}; /* select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == -811)
    PK0WM010.KUMSTRNM = PK6REC.KUMSTRNM;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      PK0WW01.PK0WWFL9 = "Y"; /* customer had errors flag*/
      converseLib.validationFailed(28); /* in use*/
      return;

    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(34); /* not found*/
        set PK0WM010.KUCCOID cursor, bold;
        set PK0WM010.KUMSTRID bold;
        PK0WW01.PK0WWFL9 = "Y"; /* customer had errors flag*/
        return;

      else
        converseLib.validationFailed(29); /* fatal error*/
        PK0WW01.PK0WWFL9 = "Y"; /* customer had errors flag*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I135 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT UNIQUE            ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VPKCUS01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        return;
      end
    end
  end

   /* -------------  end process pk0w135  --------------------*/
end // end PK0W135

// load customer hold rows
Function PK0W137()
   /* -----  pk0w137   ---------------------------------*/
   /* -----  load customer hold line items*/

  PK0WM010.XXXERRID = "PK0W137";

  PKZREC.PKZFUNC = "N1";
  call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes}; /* select next customer*/
                                         /* hold record*/

  if (SQLCA.VAGen_SQLCODE == 0)
    PK0WW01.ZZZCHGCT[PK0WWNX3] = PK9REC.ZZZCHGCT;
    PK0WW01.PK0WWREL[PK0WWNX3] = PK9REC.PK9RELDT;
    PK0WW01.PK0WWFDT = PK9REC.PK9RELDT;
    PK0WM010.PK0WMYY[PK0WWNX3] = PK0WW01.PK0WWFYY;
    PK0WM010.PK0WMMM[PK0WWNX3] = PK0WW01.PK0WWFMM;
    PK0WM010.PK0WMDD[PK0WWNX3] = PK0WW01.PK0WWFDD;
    PK0WW01.PK0WWFDT = PK9REC.PK9PLRDT;
    PK0WM010.PK0WMPYY[PK0WWNX3] = PK0WW01.PK0WWFYY;
    PK0WM010.PK0WMPMM[PK0WWNX3] = PK0WW01.PK0WWFMM;
    PK0WM010.PK0WMPDD[PK0WWNX3] = PK0WW01.PK0WWFDD;
    PK0WM010.PK0WMRES[PK0WWNX3] = PK9REC.XHRCD;
    set PK0WM010.PK0WMRES[PK0WWNX3] protect;
    PK0WW01.PK0WWRSN = PK9REC.XHRCD;
    PK0WW01.PK0WWNDX = 1;
    PK0WW01.PK0WWFL6 = "N";
    while (PK0WW01.PK0WWNDX <= PK0WW01.PK0WWTRR
     && PK0WW01.PK0WWFL6 == "N")
      PK0W252(); /* to get reason code abbreviation*/
    end
    if (PK0WW01.PK0WWFL6 == "N")
      PK0WM010.XHRABRV[PK0WWNX3] = "UNKNWN";
    else
      PK0WM010.XHRABRV[PK0WWNX3] = PK0WW01.XHRABRV[PK0WWNDX];
    end

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* end of set*/
      PK0WW01.PK0WWNX3 = 11; /* set index above maximum*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(21); /* contention for data base resorce*/
        PK0WW01.PK0WWNX3 = 11;
        return;
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I137 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT NEXT              ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        PK0WW01.PK0WWNX3 = 11;
        return;
      end
    end
  end

  PK0WW01.PK0WWNX3 = PK0WW01.PK0WWNX3 + 1; /* increment index*/

   /* -------------  end process pk0w137  --------------------*/
end // end PK0W137

// load order hold rows
Function PK0W138()
   /* -----  pk0w138   ---------------------------------*/
   /* -----  load order hold line items*/

  PK0WM010.XXXERRID = "PK0W138";

  PKZREC.PKZFUNC = "N1";
  call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes}; /* select next customer*/
                                         /* hold record*/

  if (SQLCA.VAGen_SQLCODE == 0)
    PK0WW01.ZZZCHGCT[PK0WWNX3] = PKBREC.ZZZCHGCT;
    PK0WW01.PK0WWREL[PK0WWNX3] = PKBREC.PKBRELDT;
    PK0WW01.PK0WWFDT = PKBREC.PKBRELDT;
    PK0WM010.PK0WMYY[PK0WWNX3] = PK0WW01.PK0WWFYY;
    PK0WM010.PK0WMMM[PK0WWNX3] = PK0WW01.PK0WWFMM;
    PK0WM010.PK0WMDD[PK0WWNX3] = PK0WW01.PK0WWFDD;
    PK0WW01.PK0WWFDT = PKBREC.PKBPLRDT;
    PK0WM010.PK0WMPYY[PK0WWNX3] = PK0WW01.PK0WWFYY;
    PK0WM010.PK0WMPMM[PK0WWNX3] = PK0WW01.PK0WWFMM;
    PK0WM010.PK0WMPDD[PK0WWNX3] = PK0WW01.PK0WWFDD;
    PK0WM010.PK0WMRES[PK0WWNX3] = PKBREC.XHRCD;
    set PK0WM010.PK0WMRES[PK0WWNX3] protect;
    PK0WW01.PK0WWRSN = PKBREC.XHRCD;
    PK0WW01.PK0WWNDX = 1;
    PK0WW01.PK0WWFL6 = "N";
    while (PK0WW01.PK0WWNDX <= PK0WW01.PK0WWTRR
     && PK0WW01.PK0WWFL6 == "N")
      PK0W252(); /* to get reason code abbreviation*/
    end
    if (PK0WW01.PK0WWFL6 == "N")
      PK0WM010.XHRABRV[PK0WWNX3] = "UNKNWN";
    else
      PK0WM010.XHRABRV[PK0WWNX3] = PK0WW01.XHRABRV[PK0WWNDX];
    end

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* end of set*/
      PK0WW01.PK0WWNX3 = 11; /* set index above maximum*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(21); /* contention for data base resorce*/
        PK0WW01.PK0WWNX3 = 11;
        return;
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0I138 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT NEXT              ";
        TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        PK0WW01.PK0WWNX3 = 11;
        return;
      end
    end
  end

  PK0WW01.PK0WWNX3 = PK0WW01.PK0WWNX3 + 1; /* increment index*/

   /* -------------  end process pk0w138  --------------------*/
end // end PK0W138

// load carrier hold rows
Function PK0W139()
   /* -----  pk0w139   ---------------------------------*/
   /* -----  load carrier hold line items*/

  PK0WM010.XXXERRID = "PK0W139";

  PKZREC.PKZFUNC = "N1";
  call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes}; /* select next carrier*/
                                         /* hold record*/

  if (SQLCA.VAGen_SQLCODE == 0)
    PK0WW01.ZZZCHGCT[PK0WWNX3] = PWFREC.ZZZCHGCT;
    PK0WW01.PK0WWREL[PK0WWNX3] = PWFREC.PKBRELDT;
    PK0WW01.PK0WWFDT = PWFREC.PKBRELDT;
    PK0WM010.PK0WMYY[PK0WWNX3] = PK0WW01.PK0WWFYY;
    PK0WM010.PK0WMMM[PK0WWNX3] = PK0WW01.PK0WWFMM;
    PK0WM010.PK0WMDD[PK0WWNX3] = PK0WW01.PK0WWFDD;
    PK0WW01.PK0WWFDT = PWFREC.PKBPLRDT;
    PK0WM010.PK0WMPYY[PK0WWNX3] = PK0WW01.PK0WWFYY;
    PK0WM010.PK0WMPMM[PK0WWNX3] = PK0WW01.PK0WWFMM;
    PK0WM010.PK0WMPDD[PK0WWNX3] = PK0WW01.PK0WWFDD;
    PK0WM010.PK0WMRES[PK0WWNX3] = PWFREC.XHRCD;
    set PK0WM010.PK0WMRES[PK0WWNX3] protect;
    PK0WW01.PK0WWRSN = PWFREC.XHRCD;
    PK0WW01.PK0WWNDX = 1;
    PK0WW01.PK0WWFL6 = "N";
    while (PK0WW01.PK0WWNDX <= PK0WW01.PK0WWTRR
     && PK0WW01.PK0WWFL6 == "N")
      PK0W252(); /* to get reason code abbreviation*/
    end
    if (PK0WW01.PK0WWFL6 == "N")
      PK0WM010.XHRABRV[PK0WWNX3] = "UNKNWN";
    else
      PK0WM010.XHRABRV[PK0WWNX3] = PK0WW01.XHRABRV[PK0WWNDX];
    end

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* end of set*/
      PK0WW01.PK0WWNX3 = 11; /* set index above maximum*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(28); /* contention for data base resorce*/
        PK0WW01.PK0WWNX3 = 11;
        return;
      else
        converseLib.validationFailed(29); /* fatal error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "PK0W139 "; /* Process name*/
        TA1REC.TA1LOC = "SELECT NEXT              ";
        TA1REC.TA1MAP = "PK0WM010"; /* Map name*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        PK0WW01.PK0WWNX3 = 11;
        return;
      end
    end
  end

  PK0WW01.PK0WWNX3 = PK0WW01.PK0WWNX3 + 1; /* increment index*/

   /* -------------  end process pk0w139  --------------------*/
end // end PK0W139

// converse map until done
Function PK0W200()

  converse PK0WM010 ;
   /* ----- pk0w200 - converse map until done*/

   /* ----- if table overflow*/
   /* -----     go back to main menu.*/
  if (PK0WW01.PK0WWFL4 == "Y")
    set PKWREC empty;
    PKWREC.XWHCD = PK0WM010.XWHCD;
    PKWREC.XWHABRV = PK0WM010.XWHABRV;
    COMMAREA.CATOAP = "PK0A";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to pick master menu*/
    PK0WM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  end

   /* ---------------  if warehouse is not modified         ------*/
   /* ---------------      check pf keys                    ------*/
  if (PK0WM010.XWHCD is modified)
    /* next sentence*/
  else
    PK0W210();
  end

   /* ---------------  if error condition occured*/
   /* ---------------      get out.  the screen will be     ------*/
   /* ---------------      conversed again.                 ------*/
  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* ---------------  if warehouse has been modified*/
   /* ---------------  and security allows warehouse changes*/
   /* ---------------      get warehouse abbreviation*/
   /* ---------------      and reload map and working storage*/
   /* ---------------      with new set of records*/
  if (PK0WM010.XWHCD is modified)
     /* AND COMMAREA.CACLVL(1) EQ 'Y';*/
    PKWREC.XWHCD = PK0WM010.XWHCD;
     /* ----- clear screen line items*/
    PK0WW01.PK0WWNX3 = 10;
    while (PK0WW01.PK0WWNX3 >= 1)
      PK0W217();
    end
    PK0W110(); /* change warehouses*/
  end

   /* ---------------  if warehouse could not be resolved   ------*/
   /* ---------------      get out.  the screen will be     ------*/
   /* ---------------      conversed again.                 ------*/
  if (PK0WW01.PK0WWFL3 == "N")
    converseLib.validationFailed(2);
    set PK0WM010.XWHCD cursor, bold;
    return;
  else
    if (PK0WM010.XWHCD is modified)
      set PK0WM010.XWHCD normal;
      set PK0WM010.PK0WMKUA cursor;
    end
  end

   /* ----- edit user input fields*/
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
    PK0W250();
  end

   /* ----- if no errors have occured*/
   /* ----- and selection for inquiry was requested*/
   /* ----- and warehouse was not modified*/
   /* -----     transfer to the appropriate inquiry application*/
  if (converseVar.validationMsgNum == 0
   && PK0WW01.PK0WWFL5 == "Y"
   && PK0WM010.XWHCD not modified)
    PK0W300();
  end

   /* ----- if no errors have occured*/
   /* ----- and edit only flag is no*/
   /* -----     perform update of the hold tables*/
  if (converseVar.validationMsgNum == 0
   && converseVar.eventKey is enter)
    PK0W400();
  end

  if (converseVar.validationMsgNum == 0
   && converseVar.eventKey is pf12)
    if (PK0WW01.PK0WWFL8 == "Y") /* line items were modified*/
      set PK0WM010.PK0WMACT[1] modified;
    else
      if (PK0WW01.PK0WWFL7 == "C" /* processing customers/orders*/
       && PK0WM010.PK0WMKUA != " ")
        set PK0WM010.KUCCOID cursor, modified;
      else
        if (PK0WW01.PK0WWFL7 == "O" /* processing customers/orders*/
         && PK0WM010.PK0WMORA != " ")
          set PK0WM010.PK1CUOID cursor, modified;
        end
      end
    end
  end

   /* ------------------- end pk0w200 -------------------------*/
end // end PK0W200

// check pf keys
Function PK0W210()
   /* ---------------  pk0w210    --------------------------------*/
   /* ---------------  check pf keys                        ------*/

  PK0WM010.XXXERRID = "PK0W210"; /* Process name*/

   /* -----  check for valid pf keys                        ------*/
  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf20
   || converseVar.eventKey is enter)
    /* next sentence*/
  else
    converseLib.validationFailed(12); /* invalid pf key*/
    return; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1)
    COMMAREA.CAFROMAP = "PK0W";
    XSPF1(); /* go to help application*/
    PK0WM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  end

       /* re-load the customer forced location table*/
       /* into the map and working storage*/
  if (converseVar.eventKey is pa2) /* cancel*/
    PK0W215();
    return;
  end

  if (converseVar.eventKey is pf3)
    set PKWREC empty;
    PKWREC.XWHCD = PK0WM010.XWHCD;
    PKWREC.XWHABRV = PK0WM010.XWHABRV;
    COMMAREA.CAFROMAP = "PK0W";
    COMMAREA.CATOAP = "PK0S";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to pick planning menu*/
    PK0WM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  end

     /* moves common to all transferrs*/

  PKWREC.XWHCD = PK0WM010.XWHCD;
  COMMAREA.CAFROMAP = "PK0W";

  if (converseVar.eventKey is pf4)
    set PKWREC empty;
    PKWREC.XWHCD = PK0WM010.XWHCD;
    PKWREC.XWHABRV = PK0WM010.XWHABRV;
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSPF4(); /* go to master menu*/
    PK0WM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end

  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "PK0B";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to picking order inquiry*/
    PK0WM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end

  if (converseVar.eventKey is pf14)
    COMMAREA.CATOAP = "PK0C";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to picking line item inquiry*/
    PK0WM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end

  if (converseVar.eventKey is pf15)
    COMMAREA.CATOAP = "PK0D";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to picking customer inquiry*/
    PK0WM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end

  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "PK0Z";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* sales program/product inquiry*/
    PK0WM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end

  if (converseVar.eventKey is pf18)
    COMMAREA.CATOAP = "PK09";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* planning menu*/
    PK0WM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end

  if (converseVar.eventKey is pf20)
    COMMAREA.CATOAP = "PK07";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSEXIT(); /* go to selection menu*/
    PK0WM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end

       /* check for paging forward (pf8) and backward (pf7) thru*/
       /* the 100 element array in pk0ww01 record.*/
       /* if the user pages backward or forward*/
       /* but all records read in will fit on a single map*/
         /* do nothing, paging is meaningless*/
       /* else*/
         /* if user pages forward*/
         /* and the end of the total*/
         /* records read has not been reached*/
           /* set the beginning and ending indexes up by 10*/
         /* else*/
           /* if user pages backward*/
           /* and the we are not*/
             /* already positioned at the beginning of the array*/
             /* set the beginning and ending indexes down by 10.*/
             /* (or to the initial position)*/
  if (converseVar.eventKey is pf7 /* (back)*/
   && PK0WW01.PK0WWBAS == 1)     
    converseLib.validationFailed(37);
  end

  if (converseVar.eventKey is pf8 /* (frwd)*/
   && PK0WW01.PK0WWEND >= PK0WW01.PK0WWTRR)
    converseLib.validationFailed(38);
  end

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    if (PK0WW01.PK0WWTRR < 11)
       /* next sentence*/
    else
      if (converseVar.eventKey is pf8 /* (frwd)*/
       && PK0WW01.PK0WWEND < PK0WW01.PK0WWTRR)
        PK0WW01.PK0WWEND = PK0WW01.PK0WWEND + 10;
        PK0WW01.PK0WWBAS = PK0WW01.PK0WWBAS + 10;
        PK0WW01.PK0WWNDX = 1;
        PK0WW01.PK0WWNX2 = 1;
        PK0WW01.PK0WWFL6 = "N";
        while (PK0WW01.PK0WWFL6 == "N")
          PK0W220();
        end
      else
        if (converseVar.eventKey is pf7 /* (back)*/
         && PK0WW01.PK0WWBAS > 1)      
          PK0WW01.PK0WWEND = PK0WW01.PK0WWEND - 10;
          PK0WW01.PK0WWBAS = PK0WW01.PK0WWBAS - 10;
          if (PK0WW01.PK0WWBAS < 1)
            PK0WW01.PK0WWEND = 10;
            PK0WW01.PK0WWNDX = 1;
            PK0WW01.PK0WWNX2 = 1;
            PK0WW01.PK0WWBAS = 1;
            PK0WW01.PK0WWFL6 = "N";
            while (PK0WW01.PK0WWFL6 == "N")
              PK0W220();
            end
          else
            PK0WW01.PK0WWNDX = 1;
            PK0WW01.PK0WWNX2 = 1;
            PK0WW01.PK0WWFL6 = "N";
            while (PK0WW01.PK0WWFL6 == "N")
              PK0W220();
            end
          end
        end
      end
    end
  end

   /* ------------------- end pk0w210 -------------------------*/
end // end PK0W210

// clear screen
Function PK0W215()
   /* ----- pk0w215*/
   /* ----- clear screen*/

  PK0WM010.XWHCD = PKWREC.XWHCD;

  PK0WW01.PK0WWFL7 = " "; /* processing customer / order flag*/

  PK0WM010.PK0WMKUA = " ";
  PK0WM010.PK0WMKUR = " ";
  PK0WM010.PK0WMKUD = " ";
  PK0WM010.KUMSTRNM = " ";

  PK0WM010.KUCCOID = 0;
  PK0WM010.KUMSTRID = 0;
  PK0WM010.XNXCD = 0;
  PK0WM010.PK0WMKMM = 0;
  PK0WM010.PK0WMKDD = 0;
  PK0WM010.PK0WMKYY = 0;

  PK0WM010.PK0WMORA = " ";
  PK0WM010.PK0WMORR = " ";
  PK0WM010.PK0WMORD = " ";

  PK0WM010.PK1CUOID = 0;
  PK0WM010.PK1NORID = 0;
  PK0WM010.PK0WMOMM = 0;
  PK0WM010.PK0WMODD = 0;
  PK0WM010.PK0WMOYY = 0;

  PK0WM010.PK0WMCAA = " ";
  PK0WM010.PK0WMCAR = " ";
  PK0WM010.PK0WMCAD = " ";
  PK0WM010.TF1ABRV = " ";

  PK0WM010.TF1CARCD = 0;
  PK0WM010.PK0WMCMM = 0;
  PK0WM010.PK0WMCDD = 0;
  PK0WM010.PK0WMCYY = 0;

  set PK0WM010.XWHCD normal;

  set PK0WM010.PK0WMKUA cursor, normal;
  set PK0WM010.PK0WMKUR normal;

  set PK0WM010.KUCCOID normal;
  set PK0WM010.KUMSTRID normal;
  set PK0WM010.XNXCD normal;

  set PK0WM010.PK0WMKMM normal;
  set PK0WM010.PK0WMKDD normal;
  set PK0WM010.PK0WMKYY normal;

  set PK0WM010.PK0WMORA normal;
  set PK0WM010.PK0WMORR normal;

  set PK0WM010.PK1CUOID normal;
  set PK0WM010.PK1NORID normal;

  set PK0WM010.PK0WMOMM normal;
  set PK0WM010.PK0WMODD normal;
  set PK0WM010.PK0WMOYY normal;

  set PK0WM010.PK0WMCAA normal;
  set PK0WM010.PK0WMCAR normal;

  set PK0WM010.TF1CARCD normal;

  set PK0WM010.PK0WMCMM normal;
  set PK0WM010.PK0WMCDD normal;
  set PK0WM010.PK0WMCYY normal;

   /* ----- clear screen line items*/
  PK0WW01.PK0WWNX3 = 10;
  while (PK0WW01.PK0WWNX3 >= 1)
    PK0W217();
  end

   /* ----- end pk0w215*/
end // end PK0W215

// clear screen line items
Function PK0W217()
   /* ----- pk0w217*/
   /* ----- clear screen line items*/

  PK0WM010.PK0WMACT[PK0WWNX3] = " ";
  PK0WM010.PK0WMRES[PK0WWNX3] = " ";
  PK0WM010.XHRABRV[PK0WWNX3] = " ";
  PK0WM010.PK0WMMM[PK0WWNX3] = 0;
  PK0WM010.PK0WMDD[PK0WWNX3] = 0;
  PK0WM010.PK0WMYY[PK0WWNX3] = 0;
  PK0WM010.PK0WMPMM[PK0WWNX3] = 0;
  PK0WM010.PK0WMPDD[PK0WWNX3] = 0;
  PK0WM010.PK0WMPYY[PK0WWNX3] = 0;

  set PK0WM010.PK0WMACT[PK0WWNX3] normal;
  set PK0WM010.PK0WMRES[PK0WWNX3] normal;
  set PK0WM010.PK0WMPMM[PK0WWNX3] normal;
  set PK0WM010.PK0WMPDD[PK0WWNX3] normal;
  set PK0WM010.PK0WMPYY[PK0WWNX3] normal;

  PK0WW01.PK0WWNX3 = PK0WW01.PK0WWNX3 - 1; /* decrement index*/

   /* ----- end pk0w217*/
end // end PK0W217

// page forward or backwards
Function PK0W220()

   /* ---------------  pk0w220   ---------------------------------*/
       /* page forwards or backwards*/

  if (PK0WW01.PK0WWNDX > PK0WW01.PK0WWEND)
    PK0WW01.PK0WWFL6 = "Y";
  else
    if (PK0WW01.PK0WWNDX >= PK0WW01.PK0WWBAS)
      PK0WM010.XHRCD[PK0WWNX2] = PK0WW01.XHRCD[PK0WWNDX];
      PK0WM010.XHRDESC[PK0WWNX2] = PK0WW01.XHRDESC[PK0WWNDX];
      PK0WW01.PK0WWNX2 = PK0WW01.PK0WWNX2 + 1; /* increment index*/
    end
  end

  PK0WW01.PK0WWNDX = PK0WW01.PK0WWNDX + 1; /* increment index*/

   /* -------------  end process pk0w220  --------------------*/
end // end PK0W220

// edit user input
Function PK0W250()

   /* ----- pk0w250*/
   /* ----- edit user input*/

   /* ----- set selection for inquiry flag to 'n'*/
   /* ----- set line items modified flag to 'n'*/
  PK0WW01.PK0WWFL5 = "N";
  PK0WW01.PK0WWFL8 = "N";
  PK0WW01.PK0WWFL9 = "N";
  PK0WW01.PK0WWFLD = "N";
  PK0WW01.PK0WWFLE = "N";

   /* ----- check to see if line items were modified*/
  PK0WW01.PK0WWNX3 = 10;
  while (PK0WW01.PK0WWNX3 >= 1)
    PK0W253();
  end

   /* ----- if order data was entered*/
   /* ----- and line items were entered*/
   /* -----     it is an error*/
   /* -----     clear the screen, get out*/
  if (PK0WM010.PK0WMORA is modified
   || PK0WM010.PK0WMORR is modified
   || PK0WM010.PK1CUOID is modified
   || PK0WM010.PK1NORID is modified
   || PK0WM010.PK0WMOMM is modified
   || PK0WM010.PK0WMODD is modified
   || PK0WM010.PK0WMOYY is modified)
    if (PK0WW01.PK0WWFL8 == "Y") /* line items were modified flag*/
      PK0WW01.PK0WWNX3 = 10;
      while (PK0WW01.PK0WWNX3 >= 1)
        PK0W217();
      end
      set PK0WM010.PK0WMORA cursor, modified, bold;
      converseLib.validationFailed(54);
      return;
    else
      PK0WW01.PK0WWFL7 = "O";
                                   /* processing customer/order flag*/
    end
  end

   /* ----- if heading customer information was entered*/
   /* ----- and line items were entered*/
   /* -----     it is an error*/
  if (PK0WM010.PK0WMKUA is modified
   || PK0WM010.PK0WMKUR is modified
   || PK0WM010.KUCCOID is modified
   || PK0WM010.KUMSTRID is modified
   || PK0WM010.XNXCD is modified
   || PK0WM010.PK0WMKMM is modified
   || PK0WM010.PK0WMKDD is modified
   || PK0WM010.PK0WMKYY is modified)
    if (PK0WW01.PK0WWFL8 == "Y")
      PK0WW01.PK0WWFLA = "Y";
      PK0WW01.PK0WWNX3 = 10;
      while (PK0WW01.PK0WWNX3 >= 1)
        PK0W217();
      end
      set PK0WM010.PK0WMKUA cursor, modified, bold;
      converseLib.validationFailed(54);
      return;
    else
      PK0WW01.PK0WWFL7 = "C";
                                   /* processing customer/order flag*/
    end
  end

   /* ----- if carrier data was entered*/
   /* ----- and line items were entered*/
   /* -----     it is an error*/
   /* -----     clear the screen, get out*/
  if (PK0WM010.PK0WMCAA is modified
   || PK0WM010.PK0WMCAR is modified
   || PK0WM010.TF1CARCD is modified
   || PK0WM010.PK0WMCMM is modified
   || PK0WM010.PK0WMCDD is modified
   || PK0WM010.PK0WMCYY is modified)
    if (PK0WW01.PK0WWFL8 == "Y") /* line items were modified flag*/
      PK0WW01.PK0WWNX3 = 10;
      while (PK0WW01.PK0WWNX3 >= 1)
        PK0W217();
      end
      set PK0WM010.PK0WMCAA cursor, modified, bold;
      converseLib.validationFailed(54);
      return;
    else
      PK0WW01.PK0WWFL7 = "R"; /* processing carrier*/
    end
  end

   /* ----- if heading customer information was entered*/
   /* ----- and heading carrier information was entered*/
   /* ----- and heading order information was entered*/
   /* -----     it is an error*/
  if (PK0WM010.PK0WMKUA is modified
   || PK0WM010.PK0WMKUR is modified
   || PK0WM010.KUCCOID is modified
   || PK0WM010.KUMSTRID is modified
   || PK0WM010.XNXCD is modified
   || PK0WM010.PK0WMKMM is modified
   || PK0WM010.PK0WMKDD is modified
   || PK0WM010.PK0WMKYY is modified)
    if (PK0WM010.PK0WMORA is modified
     || PK0WM010.PK0WMORR is modified
     || PK0WM010.PK1CUOID is modified
     || PK0WM010.PK1NORID is modified
     || PK0WM010.PK0WMOMM is modified
     || PK0WM010.PK0WMODD is modified
     || PK0WM010.PK0WMOYY is modified)
      if (PK0WM010.PK0WMCAA is modified
       || PK0WM010.PK0WMCAR is modified
       || PK0WM010.TF1CARCD is modified
       || PK0WM010.PK0WMCMM is modified
       || PK0WM010.PK0WMCDD is modified
       || PK0WM010.PK0WMCYY is modified)
        set PK0WM010.PK0WMKUA cursor, bold;
        set PK0WM010.PK0WMKUR bold;
        set PK0WM010.KUCCOID bold;
        set PK0WM010.KUMSTRID bold;
        set PK0WM010.XNXCD bold;
        set PK0WM010.PK0WMKMM bold;
        set PK0WM010.PK0WMKDD bold;
        set PK0WM010.PK0WMKYY bold;

        set PK0WM010.PK0WMORA bold;
        set PK0WM010.PK0WMORR bold;
        set PK0WM010.PK1CUOID bold;
        set PK0WM010.PK1NORID bold;
        set PK0WM010.PK0WMOMM bold;
        set PK0WM010.PK0WMODD bold;
        set PK0WM010.PK0WMOYY bold;

        set PK0WM010.PK0WMCAA bold;
        set PK0WM010.PK0WMCAR bold;
        set PK0WM010.TF1CARCD bold;
        set PK0WM010.PK0WMCMM bold;
        set PK0WM010.PK0WMCDD bold;
        set PK0WM010.PK0WMCYY bold;
        converseLib.validationFailed(65);
        return;
      end
    end
  end

   /* ----- if heading customer information was entered*/
   /* ----- and heading order information was entered*/
   /* -----     it is an error*/
  if (PK0WM010.PK0WMKUA is modified
   || PK0WM010.PK0WMKUR is modified
   || PK0WM010.KUCCOID is modified
   || PK0WM010.KUMSTRID is modified
   || PK0WM010.XNXCD is modified
   || PK0WM010.PK0WMKMM is modified
   || PK0WM010.PK0WMKDD is modified
   || PK0WM010.PK0WMKYY is modified)
    if (PK0WM010.PK0WMORA is modified
     || PK0WM010.PK0WMORR is modified
     || PK0WM010.PK1CUOID is modified
     || PK0WM010.PK1NORID is modified
     || PK0WM010.PK0WMOMM is modified
     || PK0WM010.PK0WMODD is modified
     || PK0WM010.PK0WMOYY is modified)
      set PK0WM010.PK0WMKUA cursor, bold;
      set PK0WM010.PK0WMKUR bold;
      set PK0WM010.KUCCOID bold;
      set PK0WM010.KUMSTRID bold;
      set PK0WM010.XNXCD bold;
      set PK0WM010.PK0WMKMM bold;
      set PK0WM010.PK0WMKDD bold;
      set PK0WM010.PK0WMKYY bold;

      set PK0WM010.PK0WMORA bold;
      set PK0WM010.PK0WMORR bold;
      set PK0WM010.PK1CUOID bold;
      set PK0WM010.PK1NORID bold;
      set PK0WM010.PK0WMOMM bold;
      set PK0WM010.PK0WMODD bold;
      set PK0WM010.PK0WMOYY bold;
      converseLib.validationFailed(65);
      return;
    end
  end

   /* ----- if heading customer information was entered*/
   /* ----- and heading carrier information was entered*/
   /* -----     it is an error*/
  if (PK0WM010.PK0WMKUA is modified
   || PK0WM010.PK0WMKUR is modified
   || PK0WM010.KUCCOID is modified
   || PK0WM010.KUMSTRID is modified
   || PK0WM010.XNXCD is modified
   || PK0WM010.PK0WMKMM is modified
   || PK0WM010.PK0WMKDD is modified
   || PK0WM010.PK0WMKYY is modified)
    if (PK0WM010.PK0WMCAA is modified
     || PK0WM010.PK0WMCAR is modified
     || PK0WM010.TF1CARCD is modified
     || PK0WM010.PK0WMCMM is modified
     || PK0WM010.PK0WMCDD is modified
     || PK0WM010.PK0WMCYY is modified)
      set PK0WM010.PK0WMKUA cursor, bold;
      set PK0WM010.PK0WMKUR bold;
      set PK0WM010.KUCCOID bold;
      set PK0WM010.KUMSTRID bold;
      set PK0WM010.XNXCD bold;
      set PK0WM010.PK0WMKMM bold;
      set PK0WM010.PK0WMKDD bold;
      set PK0WM010.PK0WMKYY bold;

      set PK0WM010.PK0WMCAA bold;
      set PK0WM010.PK0WMCAR bold;
      set PK0WM010.TF1CARCD bold;
      set PK0WM010.PK0WMCMM bold;
      set PK0WM010.PK0WMCDD bold;
      set PK0WM010.PK0WMCYY bold;
      converseLib.validationFailed(65);
      return;
    end
  end

   /* ----- if  heading order information was entered*/
   /* ----- and heading carrier information was entered*/
   /* -----     it is an error*/
  if (PK0WM010.PK0WMORA is modified
   || PK0WM010.PK0WMORR is modified
   || PK0WM010.PK1CUOID is modified
   || PK0WM010.PK1NORID is modified
   || PK0WM010.PK0WMOMM is modified
   || PK0WM010.PK0WMODD is modified
   || PK0WM010.PK0WMOYY is modified)
    if (PK0WM010.PK0WMCAA is modified
     || PK0WM010.PK0WMCAR is modified
     || PK0WM010.TF1CARCD is modified
     || PK0WM010.PK0WMCMM is modified
     || PK0WM010.PK0WMCDD is modified
     || PK0WM010.PK0WMCYY is modified)
      set PK0WM010.PK0WMORA cursor, bold;
      set PK0WM010.PK0WMORR bold;
      set PK0WM010.PK1CUOID bold;
      set PK0WM010.PK1NORID bold;
      set PK0WM010.PK0WMOMM bold;
      set PK0WM010.PK0WMODD bold;
      set PK0WM010.PK0WMOYY bold;

      set PK0WM010.PK0WMCAA bold;
      set PK0WM010.PK0WMCAR bold;
      set PK0WM010.TF1CARCD bold;
      set PK0WM010.PK0WMCMM bold;
      set PK0WM010.PK0WMCDD bold;
      set PK0WM010.PK0WMCYY bold;
      converseLib.validationFailed(65);
      return;
    end
  end

  if (PK0WW01.PK0WWFL7 == "O"
   && PK0WW01.PK0WWFL8 == "N") /* line items were modified flag*/
    PK0WM010.PK0WMKMM = 0;
    PK0WM010.PK0WMKDD = 0;
    PK0WM010.PK0WMKYY = 0;
    PK0WM010.PK0WMKUR = " ";
    PK0WM010.KUCCOID = 0;
    PK0WM010.KUMSTRID = 0;
    PK0WM010.XNXCD = 0;
    PK0WM010.PK0WMKUA = " ";
    PK0WM010.PK0WMCMM = 0;
    PK0WM010.PK0WMCDD = 0;
    PK0WM010.PK0WMCYY = 0;
    PK0WM010.PK0WMCAR = " ";
    PK0WM010.TF1CARCD = 0;
    PK0WM010.PK0WMCAA = " ";
    set PK0WM010.KUCCOID protect;
    set PK0WM010.KUMSTRID protect;
    set PK0WM010.XNXCD protect;
    set PK0WM010.PK0WMKUR protect;
    set PK0WM010.PK0WMKUA protect;
    set PK0WM010.PK0WMKMM protect;
    set PK0WM010.PK0WMKDD protect;
    set PK0WM010.PK0WMKYY protect;
    set PK0WM010.TF1CARCD protect;
    set PK0WM010.PK0WMCAR protect;
    set PK0WM010.PK0WMCAA protect;
    set PK0WM010.PK0WMCMM protect;
    set PK0WM010.PK0WMCDD protect;
    set PK0WM010.PK0WMCYY protect;
    set PK0WM010.PK1CUOID normal;
    set PK0WM010.PK1NORID normal;
    set PK0WM010.PK0WMORR normal;
    set PK0WM010.PK0WMORA normal;
    set PK0WM010.PK0WMOMM normal;
    set PK0WM010.PK0WMODD normal;
    set PK0WM010.PK0WMOYY normal;
  end

  if (PK0WW01.PK0WWFL7 == "C"
   && PK0WW01.PK0WWFL8 == "N") /* line items were modified flag*/
    PK0WM010.PK0WMOMM = 0;
    PK0WM010.PK0WMODD = 0;
    PK0WM010.PK0WMOYY = 0;
    PK0WM010.PK0WMORR = " ";
    PK0WM010.PK1CUOID = 0;
    PK0WM010.PK1NORID = 0;
    PK0WM010.PK0WMORA = " ";
    PK0WM010.PK0WMCMM = 0;
    PK0WM010.PK0WMCDD = 0;
    PK0WM010.PK0WMCYY = 0;
    PK0WM010.PK0WMCAR = " ";
    PK0WM010.TF1CARCD = 0;
    PK0WM010.PK0WMCAA = " ";
    set PK0WM010.PK1CUOID protect;
    set PK0WM010.PK1NORID protect;
    set PK0WM010.PK0WMORR protect;
    set PK0WM010.PK0WMORA protect;
    set PK0WM010.PK0WMOMM protect;
    set PK0WM010.PK0WMODD protect;
    set PK0WM010.PK0WMOYY protect;
    set PK0WM010.TF1CARCD protect;
    set PK0WM010.PK0WMCAR protect;
    set PK0WM010.PK0WMCAA protect;
    set PK0WM010.PK0WMCMM protect;
    set PK0WM010.PK0WMCDD protect;
    set PK0WM010.PK0WMCYY protect;
    set PK0WM010.KUCCOID normal;
    set PK0WM010.KUMSTRID normal;
    set PK0WM010.XNXCD normal;
    set PK0WM010.PK0WMKUR normal;
    set PK0WM010.PK0WMKUA normal;
    set PK0WM010.PK0WMKMM normal;
    set PK0WM010.PK0WMKDD normal;
    set PK0WM010.PK0WMKYY normal;
  end

  if (PK0WW01.PK0WWFL7 == "R"
   && PK0WW01.PK0WWFL8 == "N") /* line items were modified flag*/
    PK0WM010.PK0WMKMM = 0;
    PK0WM010.PK0WMKDD = 0;
    PK0WM010.PK0WMKYY = 0;
    PK0WM010.PK0WMKUR = " ";
    PK0WM010.KUCCOID = 0;
    PK0WM010.KUMSTRID = 0;
    PK0WM010.XNXCD = 0;
    PK0WM010.PK0WMKUA = " ";
    PK0WM010.PK0WMOMM = 0;
    PK0WM010.PK0WMODD = 0;
    PK0WM010.PK0WMOYY = 0;
    PK0WM010.PK0WMORR = " ";
    PK0WM010.PK1CUOID = 0;
    PK0WM010.PK1NORID = 0;
    PK0WM010.PK0WMORA = " ";
    set PK0WM010.KUCCOID protect;
    set PK0WM010.KUMSTRID protect;
    set PK0WM010.XNXCD protect;
    set PK0WM010.PK0WMKUR protect;
    set PK0WM010.PK0WMKUA protect;
    set PK0WM010.PK0WMKMM protect;
    set PK0WM010.PK0WMKDD protect;
    set PK0WM010.PK0WMKYY protect;
    set PK0WM010.PK1CUOID protect;
    set PK0WM010.PK1NORID protect;
    set PK0WM010.PK0WMORR protect;
    set PK0WM010.PK0WMORA protect;
    set PK0WM010.PK0WMOMM protect;
    set PK0WM010.PK0WMODD protect;
    set PK0WM010.PK0WMOYY protect;
    set PK0WM010.TF1CARCD normal;
    set PK0WM010.PK0WMCAR normal;
    set PK0WM010.PK0WMCAA normal;
    set PK0WM010.PK0WMCMM normal;
    set PK0WM010.PK0WMCDD normal;
    set PK0WM010.PK0WMCYY normal;
  end

   /* ----- if line items were modified*/
   /* -----     edit line items*/
  if (PK0WW01.PK0WWFL8 == "Y")
    PK0WW01.PK0WWNX3 = 10;
    while (PK0WW01.PK0WWNX3 >= 1)
      PK0W251();
    end
  end

   /* ----- if heading order information was entered*/
   /* -----     validate heading - order information*/
  if (PK0WW01.PK0WWFL7 == "O"
   && PK0WW01.PK0WWFL8 == "N")
    PK0W255();
  end

   /* ----- if heading customer information was entered*/
   /* -----     validate heading - customer information*/
  if (PK0WW01.PK0WWFL7 == "C"
   && PK0WW01.PK0WWFL8 == "N")
    PK0W257();
  end

   /* ----- if heading carrier information was entered*/
   /* -----     validate heading - carrier information*/
  if (PK0WW01.PK0WWFL7 == "R"
   && PK0WW01.PK0WWFL8 == "N")
    PK0W254();
  end

   /* ----- end pk0w250*/
end // end PK0W250

// edit line items
Function PK0W251()

   /* ----- pk0w251*/
   /* ----- edit line items*/

   /* ----- initialize field error flags*/
  PK0WW01.PK0WWFLA = "N";
  PK0WW01.PK0WWFLB = "N";
  PK0WW01.PK0WWFLC = "N";

   /* ----- edit line item release dates*/

   /* ----- if action code is 'r'*/
   /* -----     get todays date or the next working day*/
  if (PK0WM010.PK0WMACT[PK0WWNX3] == "R")
    set TA9REC empty;
    PK0WW01.PK0WWFDA = VGVar.currentShortGregorianDate;
    TA9REC.TA9BEGMM = PK0WW01.PK0WWFMM;
    TA9REC.TA9BEGDD = PK0WW01.PK0WWFDD;
    TA9REC.TA9BEGYY = PK0WW01.PK0WWFYY;
    /*  */
    /* -------------- y2k out begin ---------------*/
    /*  */
    /* MOVE 19 TO TA9REC.TA9BEGCC;*/
    /*  */
    /* -------------- y2k out end -----------------*/
    /*  */
    /*  */
    /* -------------- y2k in  begin ---------------*/
    /*  */
    if (PK0WW01.PK0WWFYY > 60)
      TA9REC.TA9BEGCC = 19;
    else
      TA9REC.TA9BEGCC = 20;
    end
    /*  */
    /* -------------- y2k in  end -----------------*/
    /*  */
    call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* to nearest working day*/
    if (TA9REC.TA9RTNFL == 0) /* good return code*/
      PK0WM010.PK0WMPMM[PK0WWNX3] = PK0WW01.PK0WWFMM;
      PK0WM010.PK0WMPDD[PK0WWNX3] = PK0WW01.PK0WWFDD;
      PK0WM010.PK0WMPYY[PK0WWNX3] = PK0WW01.PK0WWFYY;
    else
      set TA9REC empty;
      PK0WW01.PK0WWFDA = VGVar.currentShortGregorianDate;
      TA9REC.TA9BEGMM = PK0WW01.PK0WWFMM;
      TA9REC.TA9BEGDD = PK0WW01.PK0WWFDD;
      TA9REC.TA9BEGYY = PK0WW01.PK0WWFYY;
      /*  */
      /* -------------- y2k out begin ---------------*/
      /*  */
      /* MOVE 19 TO TA9REC.TA9BEGCC;*/
      /*  */
      /* -------------- y2k out end -----------------*/
      /*  */
      /*  */
      /* -------------- y2k in  begin ---------------*/
      /*  */
      if (PK0WW01.PK0WWFYY > 60)
        TA9REC.TA9BEGCC = 19;
      else
        TA9REC.TA9BEGCC = 20;
      end
      /*  */
      /* -------------- y2k in  end -----------------*/
      /*  */
      TA9REC.TA9OFSET = 1;
      call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* to nearest working day*/
      if (TA9REC.TA9RTNFL == 0) /* good return code*/
        PK0WM010.PK0WMPMM[PK0WWNX3] = TA9REC.TA9RTNMM;
        PK0WM010.PK0WMPDD[PK0WWNX3] = TA9REC.TA9RTNDD;
        PK0WM010.PK0WMPYY[PK0WWNX3] = TA9REC.TA9RTNYY;
      else
        set PK0WM010.PK0WMPMM[PK0WWNX3] cursor, modified, bold;
        set PK0WM010.PK0WMPDD[PK0WWNX3] modified, bold;
        set PK0WM010.PK0WMPYY[PK0WWNX3] modified, bold;
        PK0WW01.PK0WWFLC = "Y"; /* release date error flag*/
        converseLib.validationFailed(56);
      end
    end
  end

   /* ----- if action code is 'r'*/
   /* ----- or action code is 'c'*/
   /* -----     planning release date must be prior to*/
   /* -----     picking release date. (if not, it's an error)*/
  if (PK0WM010.PK0WMACT[PK0WWNX3] == "R"
   || PK0WM010.PK0WMACT[PK0WWNX3] == "C")
    /*  */
    /* -------------- y2k out begin ---------------*/
    /*  */
    /* MOVE 19 TO PK0WW01.PK0WWFCT;*/
    /*  */
    /* -------------- y2k out end -----------------*/
    /*  */
    PK0WW01.PK0WWFYY = PK0WM010.PK0WMPYY[PK0WWNX3];
    PK0WW01.PK0WWFMM = PK0WM010.PK0WMPMM[PK0WWNX3];
    PK0WW01.PK0WWFDD = PK0WM010.PK0WMPDD[PK0WWNX3];
    /*  */
    /* -------------- y2k in begin ---------*/
    /*  */
    if (PK0WW01.PK0WWFYY > 60)
      PK0WW01.PK0WWFCT = 19;
    else
      PK0WW01.PK0WWFCT = 20;
    end
    /*  */
    /* -------------- y2k in end -----------*/
    /*  */
    PKBREC.PKBPLRDT = PK0WW01.PK0WWFDT;
    if (PKBREC.PKBPLRDT < PK0WW01.PK0WWREL[PK0WWNX3])
      /* next sentence*/
    else
      set PK0WM010.PK0WMPMM[PK0WWNX3] cursor, modified, bold;
      set PK0WM010.PK0WMPDD[PK0WWNX3] modified, bold;
      set PK0WM010.PK0WMPYY[PK0WWNX3] modified, bold;
      PK0WW01.PK0WWFLC = "Y"; /* release date error flag*/
      converseLib.validationFailed(75);
    end
  end

   /* ----- if release date is entered*/
   /* ----- and it's older than todays date*/
   /* -----     it is an error*/
  if (PK0WM010.PK0WMACT[PK0WWNX3] == "C")
    if (PK0WM010.PK0WMPMM[PK0WWNX3] != 0
     || PK0WM010.PK0WMPDD[PK0WWNX3] != 0)
      /*  */
      /* -------------- y2k out begin -----------------*/
      /*  */
      /* OR PK0WM010.PK0WMPYY(PK0WWNX3) NE 0;*/
      /*  */
      /* -------------- y2k out end -------------------*/
      /*  */
      PK0WWFDA = VGVar.currentShortGregorianDate;
      /*  */
      /* ----------------- y2k in begin ----------*/
      /*  */
      PK0WW01.PK0WWCMP-YY1 = PK0WM010.PK0WMPYY[PK0WWNX3];
      if (PK0WW01.PK0WWCMP-YY1 > 60)
        PK0WW01.PK0WWCMP-CC1 = 19;
      else
        PK0WW01.PK0WWCMP-CC1 = 20;
      end
      PK0WW01.PK0WWCMP-YY2 = PK0WW01.PK0WWFYY;
      if (PK0WW01.PK0WWCMP-YY2 > 60)
        PK0WW01.PK0WWCMP-CC2 = 19;
      else
        PK0WW01.PK0WWCMP-CC2 = 20;
      end
      /*  */
      /* ----------------- y2k in end ------------*/
      /*  */
      /*  */
      /* -------------- y2k out begin ---------------*/
      /*  */
      /* IF PK0WM010.PK0WMPYY(PK0WWNX3) LT PK0WW01.PK0WWFYY;*/
      /*  */
      /* ----------------- y2k out end ---------------*/
      /*  */
      /*  */
      /* ----------------- y2k in begin --------------*/
      /*  */
      if (PK0WW01.PK0WWCMP-CCYY1 < PK0WW01.PK0WWCMP-CCYY2)
        /*  */
        /* ----------------- y2k in  end ---------------*/
        /*  */
        set PK0WM010.PK0WMPMM[PK0WWNX3] cursor, modified, bold;
        set PK0WM010.PK0WMPDD[PK0WWNX3] modified, bold;
        set PK0WM010.PK0WMPYY[PK0WWNX3] modified, bold;
        PK0WW01.PK0WWFLC = "Y"; /* release date had errors*/
        converseLib.validationFailed(55);
      end
      if (PK0WM010.PK0WMPYY[PK0WWNX3] == PK0WW01.PK0WWFYY
       && PK0WM010.PK0WMPMM[PK0WWNX3] < PK0WW01.PK0WWFMM)
        set PK0WM010.PK0WMPMM[PK0WWNX3] cursor, modified, bold;
        set PK0WM010.PK0WMPDD[PK0WWNX3] modified, bold;
        set PK0WM010.PK0WMPYY[PK0WWNX3] modified, bold;
        PK0WW01.PK0WWFLC = "Y"; /* release date had errors*/
        converseLib.validationFailed(55);
      end
      if (PK0WM010.PK0WMPYY[PK0WWNX3] == PK0WW01.PK0WWFYY
       && PK0WM010.PK0WMPMM[PK0WWNX3] == PK0WW01.PK0WWFMM
       && PK0WM010.PK0WMPDD[PK0WWNX3] < PK0WW01.PK0WWFDD)
        set PK0WM010.PK0WMPMM[PK0WWNX3] cursor, modified, bold;
        set PK0WM010.PK0WMPDD[PK0WWNX3] modified, bold;
        set PK0WM010.PK0WMPYY[PK0WWNX3] modified, bold;
        PK0WW01.PK0WWFLC = "Y"; /* release date had errors*/
        converseLib.validationFailed(55);
      end
    end
  end

   /* ----- if action field is 'c'*/
   /* ----- and release date is not entered*/
   /* -----     it is an error*/
  if (PK0WM010.PK0WMPMM[PK0WWNX3] == 0
   && PK0WM010.PK0WMPDD[PK0WWNX3] == 0)
    /*  */
    /* -------------- y2k out begin -----------------*/
    /*  */
    /* AND PK0WM010.PK0WMPYY(PK0WWNX3) EQ 0;*/
    /*  */
    /* -------------- y2k out end -------------------*/
    /*  */
    if (PK0WM010.PK0WMACT[PK0WWNX3] == "C")
      set PK0WM010.PK0WMPMM[PK0WWNX3] cursor, modified, bold;
      set PK0WM010.PK0WMPDD[PK0WWNX3] modified, bold;
      set PK0WM010.PK0WMPYY[PK0WWNX3] modified, bold;
      PK0WW01.PK0WWFLC = "Y"; /* release date had errors*/
      converseLib.validationFailed(61);
    end
  end

   /* ----- validate release date is on a working day*/
  if (PK0WM010.PK0WMACT[PK0WWNX3] == "C")
    if (PK0WM010.PK0WMPMM[PK0WWNX3] != 0
     || PK0WM010.PK0WMPDD[PK0WWNX3] != 0)
      /*  */
      /* -------------- y2k out begin -----------------*/
      /*  */
      /* OR PK0WM010.PK0WMPYY(PK0WWNX3) NE 0;*/
      /*  */
      /* -------------- y2k out end -------------------*/
      /*  */
      if (PK0WM010.PK0WMPMM[PK0WWNX3] != 99
       || PK0WM010.PK0WMPDD[PK0WWNX3] != 99)
        /*  */
        /* -------------- y2k out begin -----------------*/
        /*  */
        /* OR PK0WM010.PK0WMPYY(PK0WWNX3) NE 99;*/
        /*  */
        /* -------------- y2k out end -------------------*/
        /*  */
        set TA9REC empty;
        TA9REC.TA9BEGMM = PK0WM010.PK0WMPMM[PK0WWNX3];
        TA9REC.TA9BEGDD = PK0WM010.PK0WMPDD[PK0WWNX3];
        TA9REC.TA9BEGYY = PK0WM010.PK0WMPYY[PK0WWNX3];
        /*  */
        /* -------------- y2k in  begin -----------------*/
        /*  */
        if (PK0WM010.PK0WMPYY[PK0WWNX3] > 60)
          TA9REC.TA9BEGCC = 19;
        else
          TA9REC.TA9BEGCC = 20;
        end
        /*  */
        /* -------------- y2k in  end -------------------*/
        /*  */
        /*  */
        /* -------------- y2k out begin -----------------*/
        /*  */
        /* MOVE 19 TO TA9REC.TA9BEGCC;*/
        /*  */
        /* -------------- y2k out end -------------------*/
        /*  */
        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
        if (TA9REC.TA9RTNFL == 0)
           /* next sentence*/
        else
          set PK0WM010.PK0WMPMM[PK0WWNX3] cursor, modified, bold;
          set PK0WM010.PK0WMPDD[PK0WWNX3] modified, bold;
          set PK0WM010.PK0WMPYY[PK0WWNX3] modified, bold;
          PK0WW01.PK0WWFLC = "Y"; /* release date had errors*/
          converseLib.validationFailed(56);
        end
      end
    end
  end

   /* ----- validate reason code*/
  if (PK0WM010.PK0WMRES[PK0WWNX3] != " ")
    PK0WW01.PK0WWRSN = PK0WM010.PK0WMRES[PK0WWNX3];
    PK0WW01.PK0WWNDX = 1;
    PK0WW01.PK0WWFL6 = "N";
    while (PK0WW01.PK0WWNDX <= PK0WW01.PK0WWTRR
     && PK0WW01.PK0WWFL6 == "N")
      PK0W252();
    end

    if (PK0WW01.PK0WWFL6 == "N")
      set PK0WM010.PK0WMRES[PK0WWNX3] cursor, modified, bold;
      PK0WW01.PK0WWFLB = "Y"; /* reason code had errors*/
      converseLib.validationFailed(57);
    else
      PK0WM010.XHRABRV[PK0WWNX3] = PK0WW01.XHRABRV[PK0WWNDX];
    end
  end

   /* ----- if action field is 'r' or 'c'*/
   /* ----- and reason code is not entered*/
   /* -----     it is an error*/
  if (PK0WM010.PK0WMRES[PK0WWNX3] == " ")
    if (PK0WM010.PK0WMACT[PK0WWNX3] == "R"
     || PK0WM010.PK0WMACT[PK0WWNX3] == "C")
      set PK0WM010.PK0WMRES[PK0WWNX3] cursor, modified, bold;
      PK0WW01.PK0WWFLB = "Y"; /* reason code had errors*/
      converseLib.validationFailed(60);
    end
  end

   /* ----- validate line item action field*/
  if (PK0WM010.PK0WMACT[PK0WWNX3] == " "
   || PK0WM010.PK0WMACT[PK0WWNX3] == "S"
   || PK0WM010.PK0WMACT[PK0WWNX3] == "R"
   || PK0WM010.PK0WMACT[PK0WWNX3] == "C")
     /* next sentence*/
  else
    set PK0WM010.PK0WMACT[PK0WWNX3] cursor, modified, bold;
    PK0WW01.PK0WWFLA = "Y"; /* action field had errors*/
    converseLib.validationFailed(35);
  end

   /* ----- if selected for inquiry*/
   /* -----     set selection for inquiry flag*/
   /* -----     depending on customer or order entry*/
  if (PK0WM010.PK0WMACT[PK0WWNX3] == "S")
    PK0WW01.PK0WWFL5 = "Y"; /* select for customer inquiry*/
  end

   /* ----- reset fields*/
  if (PK0WW01.PK0WWFLB == "N"
   && PK0WM010.PK0WMRES[PK0WWNX3] == " ")
    set PK0WM010.PK0WMRES[PK0WWNX3] normal;
  end
  if (PK0WW01.PK0WWFLB == "N"
   && PK0WM010.PK0WMRES[PK0WWNX3] != " ")
    set PK0WM010.PK0WMRES[PK0WWNX3] protect;
  end

  if (PK0WW01.PK0WWFLA == "N")
    set PK0WM010.PK0WMACT[PK0WWNX3] normal;
  end

  if (PK0WW01.PK0WWFLC == "N")
    set PK0WM010.PK0WMPMM[PK0WWNX3] normal;
    set PK0WM010.PK0WMPDD[PK0WWNX3] normal;
    set PK0WM010.PK0WMPYY[PK0WWNX3] normal;
  end

  PK0WW01.PK0WWNX3 = PK0WW01.PK0WWNX3 - 1; /* decrement index*/

   /* ----- end pk0w251*/
end // end PK0W251

// validate reason code
Function PK0W252()

   /* ----- pk0w252*/

   /* ----- validate reason code*/
  if (PK0WW01.PK0WWRSN == PK0WW01.XHRCD[PK0WWNDX])
    PK0WW01.PK0WWFL6 = "Y";
    return;
  end

  PK0WW01.PK0WWNDX = PK0WW01.PK0WWNDX + 1; /* increment index*/

   /* ----- end pk0w252*/
end // end PK0W252

// check if line items modified
Function PK0W253()

   /* ----- pk0w253*/
   /* ----- check to see if line items were modified*/

  if (PK0WM010.PK0WMPMM[PK0WWNX3] is modified
   || PK0WM010.PK0WMPDD[PK0WWNX3] is modified
   || PK0WM010.PK0WMPYY[PK0WWNX3] is modified
   || PK0WM010.PK0WMRES[PK0WWNX3] is modified
   || PK0WM010.PK0WMACT[PK0WWNX3] is modified)
    PK0WW01.PK0WWFL8 = "Y"; /* line items modified flag*/
  end

  PK0WW01.PK0WWNX3 = PK0WW01.PK0WWNX3 - 1; /* decrement index*/

   /* ----- end pk0w253*/
end // end PK0W253

// validate header - carrier
Function PK0W254()
   /* ----- pk0w254*/
   /* -----*/
   /* ----- validate header - carrier data*/

  PK0WM010.XXXERRID = "PK0W254";

   /* ----- initialize field error flags*/
  PK0WW01.PK0WWFLA = "N"; /* action field error flag*/
  PK0WW01.PK0WWFLB = "N"; /* reason code error flag*/
  PK0WW01.PK0WWFLC = "N"; /* release date error flag*/
  PK0WW01.PK0WWFLE = "N"; /* carrier error flag*/

   /* ----- validate carrier - get carrier abbreviation*/
  PK0W134();
  if (SQLCA.VAGen_SQLCODE != 0)
    return;
  end

   /* ----- if action field is ' '*/
   /* -----     if only 1 reason exixts*/
   /* -----         get reason description*/
   /* -----     else*/
   /* -----          load line items*/
  if (PK0WM010.PK0WMCAA == " ")
    set PWFREC empty;
    PWFREC.XWHCD = PKWREC.XWHCD;
    PWFREC.TF1CARCD = PK0WM010.TF1CARCD;
    PWFREC.XHRCD = "*";
    PKZREC.PKZFUNC = "S ";
    call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes}; /* sel unique on carrier*/
                                  /* hold table using wildcard '*'*/
                                  /* for reason code*/
    if (SQLCA.VAGen_SQLCODE == 0) /* 1 row was found*/
      PK0WW01.ZZZCHGCT[1] = PWFREC.ZZZCHGCT;
      PK0WW01.PK0WWREL[1] = PWFREC.PKBRELDT;
      PK0WW01.PK0WWFDT = PWFREC.PKBPLRDT;
      PK0WM010.PK0WMCYY = PK0WW01.PK0WWFYY;
      PK0WM010.PK0WMCMM = PK0WW01.PK0WWFMM;
      PK0WM010.PK0WMCDD = PK0WW01.PK0WWFDD;
      PK0WM010.PK0WMCAR = PWFREC.XHRCD;
      set PK0WM010.PK0WMCAA cursor;
       /* ----- clear screen line items*/
      PK0WW01.PK0WWNX3 = 10;
      while (PK0WW01.PK0WWNX3 >= 1)
        PK0W217();
      end
      PK0WW01.PK0WWRSN = PWFREC.XHRCD;
      PK0WW01.PK0WWNDX = 1;
      PK0WW01.PK0WWFL6 = "N";
      while (PK0WW01.PK0WWNDX <= PK0WW01.PK0WWTRR
       && PK0WW01.PK0WWFL6 == "N")
        PK0W252();
      end
      if (PK0WW01.PK0WWFL6 == "Y")
        PK0WM010.PK0WMCAD = PK0WW01.XHRABRV[PK0WWNDX];
      else
        PK0WM010.PK0WMCAD = "UNKNWN";
      end
    else
      if (SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
        PK0WM010.PK0WMCAR = " ";
        PK0WM010.PK0WMCAD = " ";
        PK0WM010.PK0WMCMM = 0;
        PK0WM010.PK0WMCDD = 0;
        PK0WM010.PK0WMCYY = 0;

        PK0WM010.PK0WMKUA = " ";
        PK0WM010.PK0WMKUR = " ";
        PK0WM010.PK0WMKUD = " ";
        PK0WM010.KUCCOID = 0;
        PK0WM010.KUMSTRID = 0;
        PK0WM010.XNXCD = 0;
        PK0WM010.PK0WMKMM = 0;
        PK0WM010.PK0WMKDD = 0;
        PK0WM010.PK0WMKYY = 0;

        PK0WM010.PK0WMORA = " ";
        PK0WM010.PK0WMORR = " ";
        PK0WM010.PK0WMORD = " ";
        PK0WM010.PK1CUOID = 0;
        PK0WM010.PK1NORID = 0;
        PK0WM010.PK0WMOMM = 0;
        PK0WM010.PK0WMODD = 0;
        PK0WM010.PK0WMOYY = 0;
        set PK0WM010.PK0WMORA protect;
        set PK0WM010.PK0WMORR protect;
        set PK0WM010.PK1CUOID protect;
        set PK0WM010.PK1NORID protect;
        set PK0WM010.PK0WMOMM protect;
        set PK0WM010.PK0WMODD protect;
        set PK0WM010.PK0WMOYY protect;

        set PK0WM010.PK0WMKUA protect;
        set PK0WM010.PK0WMKUR protect;
        set PK0WM010.KUCCOID protect;
        set PK0WM010.KUMSTRID protect;
        set PK0WM010.XNXCD protect;
        set PK0WM010.PK0WMKMM protect;
        set PK0WM010.PK0WMKDD protect;
        set PK0WM010.PK0WMKYY protect;

        set PK0WM010.PK0WMCAA protect;
        set PK0WM010.PK0WMCAR protect;
        set PK0WM010.PK0WMCMM protect;
        set PK0WM010.PK0WMCDD protect;
        set PK0WM010.PK0WMCYY protect;
         /* ----- clear screen line items*/
        PK0WW01.PK0WWNX3 = 10;
        while (PK0WW01.PK0WWNX3 >= 1)
          PK0W217();
        end
        set PK0WM010.PK0WMACT[1] cursor;
        set PWFREC empty;
        PWFREC.XWHCD = PKWREC.XWHCD;
        PWFREC.TF1CARCD = PK0WM010.TF1CARCD;
        PKZREC.PKZFUNC = "S1";
        call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
        PK0WW01.PK0WWNX3 = 1;
        while (PK0WW01.PK0WWNX3 <= 10)
          PK0W139(); /* load carrier hold line items*/
        end
        PKZREC.PKZFUNC = "C1";
        call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
        return;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(28); /* contention for data base resorce*/
          return;
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* no records found,*/
            PK0WW01.PK0WWFLE = "Y";
            PK0WM010.PK0WMCMM = 0;
            PK0WM010.PK0WMCDD = 0;
            PK0WM010.PK0WMCYY = 0;
            PK0WM010.PK0WMCAD = " ";
            PK0WM010.PK0WMCAR = " ";
            set PK0WM010.TF1CARCD cursor, modified, bold;
            converseLib.validationFailed(277);
            return; /* no need to load the map/ws*/
          else
            converseLib.validationFailed(29); /* fatal error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0I254 "; /* Process name*/
            TA1REC.TA1LOC = "SELECT UNIQUE            ";
            TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
            TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

            return;
          end
        end
      end
    end
  end

   /* if change or release*/
     /* get carrier hold release date*/

  if (PK0WM010.PK0WMCAA == "R"
   || PK0WM010.PK0WMCAA == "C")
    set PWFREC empty;
    PWFREC.XWHCD = PKWREC.XWHCD;
    PWFREC.TF1CARCD = PK0WM010.TF1CARCD;
    PWFREC.XHRCD = PK0WM010.PK0WMCAR;
    PKZREC.PKZFUNC = "S ";
    call "IO1790" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
                                   /* sel unique on customer*/
                                  /* hold table using reason code*/
    if (SQLCA.VAGen_SQLCODE == 0) /* 1 row was found*/
      PK0WW01.ZZZCHGCT[1] = PWFREC.ZZZCHGCT;
      PK0WW01.PK0WWREL[1] = PWFREC.PKBRELDT;
       /* ----- clear screen line items*/
      PK0WW01.PK0WWNX3 = 10;
      while (PK0WW01.PK0WWNX3 >= 1)
        PK0W217();
      end
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(28); /* contention for data base resorce*/
        return;
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* no records found,*/
          PK0WW01.PK0WWFLE = "Y";
          PK0WM010.PK0WMCMM = 0;
          PK0WM010.PK0WMCDD = 0;
          PK0WM010.PK0WMCYY = 0;
          PK0WM010.PK0WMCAD = " ";
          PK0WM010.PK0WMCAR = " ";
          set PK0WM010.TF1CARCD cursor, modified, bold;
          converseLib.validationFailed(277);
          return; /* no need to load the map/ws*/
        else
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0I254 "; /* Process name*/
          TA1REC.TA1LOC = "SELECT UNIQUE            ";
          TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

          return;
        end
      end
    end
  end

   /* ----- validate realease dates.*/

   /* ----- if action code is 'r'*/
   /* -----     get todays date or the next working day*/
  if (PK0WM010.PK0WMCAA == "R")
    set TA9REC empty;
    PK0WW01.PK0WWFDA = VGVar.currentShortGregorianDate;
    TA9REC.TA9BEGMM = PK0WW01.PK0WWFMM;
    TA9REC.TA9BEGDD = PK0WW01.PK0WWFDD;
    TA9REC.TA9BEGYY = PK0WW01.PK0WWFYY;
    /*  */
    /* ------------- y2k in begin ----------------*/
    /*  */
    if (PK0WW01.PK0WWFYY > 60)
      TA9REC.TA9BEGCC = 19;
    else
      TA9REC.TA9BEGCC = 20;
    end
    /*  */
    /* ------------- y2k in end ------------------*/
    /*  */
    /*  */
    /* ------------- y2k out begin ----------------*/
    /*  */
    /* MOVE 19 TO TA9REC.TA9BEGCC;*/
    /*  */
    /* ------------- y2k out end ------------------*/
    /*  */
    call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* to nearest working day*/
    if (TA9REC.TA9RTNFL == 0) /* good return code*/
      PK0WM010.PK0WMCMM = PK0WW01.PK0WWFMM;
      PK0WM010.PK0WMCDD = PK0WW01.PK0WWFDD;
      PK0WM010.PK0WMCYY = PK0WW01.PK0WWFYY;
    else
      set TA9REC empty;
      PK0WW01.PK0WWFDA = VGVar.currentShortGregorianDate;
      TA9REC.TA9BEGMM = PK0WW01.PK0WWFMM;
      TA9REC.TA9BEGDD = PK0WW01.PK0WWFDD;
      TA9REC.TA9BEGYY = PK0WW01.PK0WWFYY;
      /*  */
      /* ------------- y2k in begin ----------------*/
      /*  */
      if (PK0WW01.PK0WWFYY > 60)
        TA9REC.TA9BEGCC = 19;
      else
        TA9REC.TA9BEGCC = 20;
      end
      /*  */
      /* ------------- y2k in end ------------------*/
      /*  */
      /*  */
      /* ------------- y2k out begin ------------------*/
      /*  */
      /* MOVE 19 TO TA9REC.TA9BEGCC;*/
      /*  */
      /* ------------- y2k out end ------------------*/
      /*  */
      TA9REC.TA9OFSET = 1;
      call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* move to nearest working day*/
      if (TA9REC.TA9RTNFL == 0) /* good return code*/
        PK0WM010.PK0WMCMM = TA9REC.TA9RTNMM;
        PK0WM010.PK0WMCDD = TA9REC.TA9RTNDD;
        PK0WM010.PK0WMCYY = TA9REC.TA9RTNYY;
      else
        set PK0WM010.PK0WMCMM cursor, modified, bold;
        set PK0WM010.PK0WMCDD modified, bold;
        set PK0WM010.PK0WMCYY modified, bold;
        PK0WW01.PK0WWFLC = "Y"; /* release date error flag*/
        converseLib.validationFailed(56);
      end
    end
  end

   /* ----- if action code is 'r'*/
   /* ----- or action code is 'c'*/
   /* -----     planning release date must be prior to*/
   /* -----     picking release date. (if not, it's an error)*/
  if (PK0WM010.PK0WMCAA == "R"
   || PK0WM010.PK0WMCAA == "C")
      /*  */
      /* ------------- y2k out begin ----------------*/
      /*  */
    /* MOVE 19 TO PK0WW01.PK0WWFCT;*/
      /*  */
      /* ------------- y2k out end ------------------*/
      /*  */
    PK0WW01.PK0WWFYY = PK0WM010.PK0WMCYY;
    PK0WW01.PK0WWFMM = PK0WM010.PK0WMCMM;
    PK0WW01.PK0WWFDD = PK0WM010.PK0WMCDD;
      /*  */
      /* ------------- y2k in begin ----------------*/
      /*  */
    if (PK0WM010.PK0WMCYY > 60)
      PK0WW01.PK0WWFCT = 19;
    else
      PK0WW01.PK0WWFCT = 20;
    end
      /*  */
      /* ------------- y2k in end ------------------*/
      /*  */
    PWFREC.PKBPLRDT = PK0WW01.PK0WWFDT;
    if (PWFREC.PKBPLRDT < PK0WW01.PK0WWREL[1])
      /* next sentence*/
    else
      set PK0WM010.PK0WMCMM cursor, modified, bold;
      set PK0WM010.PK0WMCDD modified, bold;
      set PK0WM010.PK0WMCYY modified, bold;
      PK0WW01.PK0WWFLC = "Y"; /* release date error flag*/
      converseLib.validationFailed(75);
    end
  end

   /* ----- if carrier release date is entered*/
   /* ----- and it's older than todays date*/
   /* -----     it is an error*/
  if (PK0WM010.PK0WMCAA == "C")
    if (PK0WM010.PK0WMCMM != 0
     || PK0WM010.PK0WMCDD != 0)
      /*  */
      /* ------------- y2k out begin ----------------*/
      /*  */
      /* OR PK0WM010.PK0WMCYY NE 0;*/
      /*  */
      /* ------------- y2k out end ------------------*/
      /*  */
      PK0WWFDA = VGVar.currentShortGregorianDate;
      /*  */
      /* ----------------- y2k in  begin ----------------*/
      /*  */
      PK0WW01.PK0WWCMP-YY1 = PK0WM010.PK0WMCYY;
      if (PK0WW01.PK0WWCMP-YY1 > 60)
        PK0WW01.PK0WWCMP-CC1 = 19;
      else
        PK0WW01.PK0WWCMP-CC1 = 20;
      end
      PK0WW01.PK0WWCMP-YY2 = PK0WW01.PK0WWFYY;
      if (PK0WW01.PK0WWCMP-YY2 > 60)
        PK0WW01.PK0WWCMP-CC2 = 19;
      else
        PK0WW01.PK0WWCMP-CC2 = 20;
      end
      /*  */
      /* ----------------- y2k in  begin ----------------*/
      /*  */
      if (PK0WW01.PK0WWCMP-CCYY1 < PK0WW01.PK0WWCMP-CCYY2)
        /*  */
        /* ----------------- y2k in  end ------------------*/
        /*  */
        /*  */
        /* ----------------- y2k out begin ----------------*/
        /*  */
        /* IF PK0WM010.PK0WMCYY LT PK0WW01.PK0WWFYY;*/
        /*  */
        /* ----------------- y2k out end ------------------*/
        /*  */
        set PK0WM010.PK0WMCMM cursor, modified, bold;
        set PK0WM010.PK0WMCDD modified, bold;
        set PK0WM010.PK0WMCYY modified, bold;
        PK0WW01.PK0WWFLC = "Y"; /* release date error flag*/
        converseLib.validationFailed(55);
      end
      if (PK0WM010.PK0WMCYY == PK0WW01.PK0WWFYY
       && PK0WM010.PK0WMCMM < PK0WW01.PK0WWFMM)
        set PK0WM010.PK0WMCMM cursor, modified, bold;
        set PK0WM010.PK0WMCDD modified, bold;
        set PK0WM010.PK0WMCYY modified, bold;
        PK0WW01.PK0WWFLC = "Y"; /* release date error flag*/
        converseLib.validationFailed(55);
      end
      if (PK0WM010.PK0WMCYY == PK0WW01.PK0WWFYY
       && PK0WM010.PK0WMCMM == PK0WW01.PK0WWFMM
       && PK0WM010.PK0WMCDD < PK0WW01.PK0WWFDD)
        set PK0WM010.PK0WMCMM cursor, modified, bold;
        set PK0WM010.PK0WMCDD modified, bold;
        set PK0WM010.PK0WMCYY modified, bold;
        PK0WW01.PK0WWFLC = "Y"; /* release date error flag*/
        converseLib.validationFailed(55);
      end
    end
  end

   /* ----- if action is change*/
   /* ----- and date is not entered*/
   /* -----     it is an error*/
  if (PK0WM010.PK0WMCAA == "C")
      /*  */
      /* ------------- y2k out begin ----------------*/
      /*  */
    /* IF PK0WM010.PK0WMCYY EQ 0*/
      /*  */
      /* ------------- y2k out end ------------------*/
      /*  */
    if (PK0WM010.PK0WMCMM == 0
     && PK0WM010.PK0WMCDD == 0)
      set PK0WM010.PK0WMCMM cursor, modified, bold;
      set PK0WM010.PK0WMCDD modified, bold;
      set PK0WM010.PK0WMCYY modified, bold;
      PK0WW01.PK0WWFLC = "Y"; /* release date error flag*/
      converseLib.validationFailed(66);
    end
  end

   /* ----- if customer release date is entered*/
   /* ----- and it's not all 9's*/
   /* -----     check to see if falls on a working day*/
  if (PK0WM010.PK0WMCAA != "R")
    if (PK0WM010.PK0WMCMM != 0
     || PK0WM010.PK0WMCDD != 0)
      /*  */
      /* ------------- y2k out begin ----------------*/
      /*  */
      /* OR PK0WM010.PK0WMCYY NE 0;*/
      /*  */
      /* ------------- y2k out end ------------------*/
      /*  */
      if (PK0WM010.PK0WMCMM != 99
       || PK0WM010.PK0WMCDD != 99)
        /*  */
        /* ------------- y2k out begin ----------------*/
        /*  */
        /* OR PK0WM010.PK0WMCYY NE 99;*/
        /*  */
        /* ------------- y2k out end ------------------*/
        /*  */
        set TA9REC empty;
        TA9REC.TA9BEGMM = PK0WM010.PK0WMCMM;
        TA9REC.TA9BEGDD = PK0WM010.PK0WMCDD;
        TA9REC.TA9BEGYY = PK0WM010.PK0WMCYY;
        /*  */
        /* ------------- y2k in  begin ----------------*/
        /*  */
        if (PK0WM010.PK0WMCYY > 60)
          TA9REC.TA9BEGCC = 19;
        else
          TA9REC.TA9BEGCC = 20;
        end
        /*  */
        /* ------------- y2k in end -- ----------------*/
        /*  */
        /*  */
        /* ------------- y2k out begin ----------------*/
        /*  */
        /* MOVE 19 TO TA9REC.TA9BEGCC;*/
        /*  */
        /* ------------- y2k out end ------------------*/
        /*  */
        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* move to nearest working day*/
        if (TA9REC.TA9RTNFL == 0) /* good return code*/
           /* next sentence*/
        else
          set PK0WM010.PK0WMCMM cursor, modified, bold;
          set PK0WM010.PK0WMCDD modified, bold;
          set PK0WM010.PK0WMCYY modified, bold;
          PK0WW01.PK0WWFLC = "Y"; /* release date error flag*/
          converseLib.validationFailed(56);
        end
      end
    end
  end

   /* ----- validate reason code*/

  if (PK0WM010.PK0WMCAA != "R"
   && PK0WM010.PK0WMCAA != " "
   && PK0WM010.PK0WMCAA != "S"
   && PK0WM010.PK0WMCAA != "V")
    PK0WW01.PK0WWRSN = PK0WM010.PK0WMCAR;
    PK0WW01.PK0WWNDX = 1;
    PK0WW01.PK0WWFL6 = "N";
    while (PK0WW01.PK0WWNDX <= PK0WW01.PK0WWTRR
     && PK0WW01.PK0WWFL6 == "N")
      PK0W252();
    end

    if (PK0WW01.PK0WWFL6 == "N")
      set PK0WM010.PK0WMCAR cursor, modified, bold;
      PK0WW01.PK0WWFLB = "Y"; /* reason code error flag*/
      converseLib.validationFailed(57);
    else
      PK0WM010.PK0WMCAD = PK0WW01.XHRABRV[PK0WWNDX];
    end
  end

   /* ----- if action is change or release*/
   /* ----- and reason code is not entered*/
   /* -----     it is an error*/
  if (PK0WM010.PK0WMCAA == "C"
   || PK0WM010.PK0WMCAA == "R")
    if (PK0WM010.PK0WMCAR == " ")
      set PK0WM010.PK0WMCAR cursor, modified, bold;
      PK0WW01.PK0WWFLB = "Y"; /* reason code error flag*/
      converseLib.validationFailed(67);
    end
  end

   /* ----- validate action field*/

  if (PK0WM010.PK0WMCAA == " "
   || PK0WM010.PK0WMCAA == "V"
   || PK0WM010.PK0WMCAA == "S"
   || PK0WM010.PK0WMCAA == "R"
   || PK0WM010.PK0WMCAA == "C")
     /* next sentence*/
  else
    set PK0WM010.PK0WMCAA cursor, modified, bold;
    PK0WW01.PK0WWFLA = "Y"; /* action field error flag*/
    converseLib.validationFailed(35);
  end

   /* ----- if action field is 's'*/
   /* -----     set selection for inquiry flag to 'y'*/
  if (PK0WM010.PK0WMCAA == "S")
    PK0WW01.PK0WWFL5 = "Y";
  end

   /* ----- reset fields*/
  if (PK0WW01.PK0WWFLB == "N")
    set PK0WM010.PK0WMCAR normal;
  end

  if (PK0WW01.PK0WWFLA == "N")
    set PK0WM010.PK0WMCAA normal;
  end

  if (PK0WW01.PK0WWFLC == "N")
    set PK0WM010.PK0WMCMM normal;
    set PK0WM010.PK0WMCDD normal;
    set PK0WM010.PK0WMCYY normal;
  end

  if (PK0WW01.PK0WWFLE == "N")
    set PK0WM010.TF1CARCD normal;
  end

   /* ----- end pk0w254*/
end // end PK0W254

// validate header - order data
Function PK0W255()

   /* ----- pk0w255*/
   /* -----*/
   /* ----- validate header - order data*/

  PK0WM010.XXXERRID = "PK0W255";

   /* ----- initialize field error flags*/
  PK0WW01.PK0WWFLA = "N"; /* action field error flag*/
  PK0WW01.PK0WWFLB = "N"; /* reason code error flag*/
  PK0WW01.PK0WWFLC = "N"; /* release date error flag*/
  PK0WW01.PK0WWFLD = "N"; /* order had errors flag*/

   /* ----- if action field is ' '*/
   /* -----     if only 1 reason exists*/
   /* -----         get reason description*/
   /* -----     else*/
   /* -----          load line items*/
  if (PK0WM010.PK0WMORA == " ")
    set PKBREC empty;
    PKBREC.XWHCD = PKWREC.XWHCD;
    PKBREC.PK1CUOID = PK0WM010.PK1CUOID;
    PKBREC.PK1NORID = PK0WM010.PK1NORID;
    PKBREC.XHRCD = "*";
    PKZREC.PKZFUNC = "S ";
    call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
                                   /* select unique on order*/
                                  /* hold table using wildcard '*'*/
                                  /* for reason code*/
    if (SQLCA.VAGen_SQLCODE == 0) /* 1 row was found*/
      PK0WW01.ZZZCHGCT[1] = PKBREC.ZZZCHGCT;
      PK0WW01.PK0WWREL[1] = PKBREC.PKBRELDT;
      PK0WW01.PK0WWFDT = PKBREC.PKBPLRDT;
      PK0WM010.PK0WMOYY = PK0WW01.PK0WWFYY;
      PK0WM010.PK0WMOMM = PK0WW01.PK0WWFMM;
      PK0WM010.PK0WMODD = PK0WW01.PK0WWFDD;
      set PK0WM010.PK0WMORA cursor;
      PK0WM010.PK0WMORR = PKBREC.XHRCD;
       /* ----- clear screen line items*/
      PK0WW01.PK0WWNX3 = 10;
      while (PK0WW01.PK0WWNX3 >= 1)
        PK0W217();
      end
      PK0WW01.PK0WWRSN = PKBREC.XHRCD;
      PK0WW01.PK0WWNDX = 1;
      PK0WW01.PK0WWFL6 = "N";
      while (PK0WW01.PK0WWNDX <= PK0WW01.PK0WWTRR
       && PK0WW01.PK0WWFL6 == "N")
        PK0W252();
      end
      if (PK0WW01.PK0WWFL6 == "Y")
        PK0WM010.PK0WMORD = PK0WW01.XHRABRV[PK0WWNDX];
      else
        PK0WM010.PK0WMORD = "UNKNWN";
      end
    else
      if (SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
        PK0WM010.PK0WMORR = " ";
        PK0WM010.PK0WMORD = " ";
        PK0WM010.PK0WMOMM = 0;
        PK0WM010.PK0WMODD = 0;
        PK0WM010.PK0WMOYY = 0;

        PK0WM010.PK0WMKUR = " ";
        PK0WM010.PK0WMKUD = " ";
        PK0WM010.KUCCOID = 0;
        PK0WM010.KUMSTRID = 0;
        PK0WM010.XNXCD = 0;
        PK0WM010.PK0WMKMM = 0;
        PK0WM010.PK0WMKDD = 0;
        PK0WM010.PK0WMKYY = 0;

        PK0WM010.PK0WMCAR = " ";
        PK0WM010.PK0WMCAD = " ";
        PK0WM010.TF1CARCD = 0;
        PK0WM010.PK0WMCMM = 0;
        PK0WM010.PK0WMCDD = 0;
        PK0WM010.PK0WMCYY = 0;

        set PK0WM010.PK0WMKUA protect;
        set PK0WM010.PK0WMKUR protect;
        set PK0WM010.KUCCOID protect;
        set PK0WM010.KUMSTRID protect;
        set PK0WM010.XNXCD protect;
        set PK0WM010.PK0WMKMM protect;
        set PK0WM010.PK0WMKDD protect;
        set PK0WM010.PK0WMKYY protect;

        set PK0WM010.PK0WMCAA protect;
        set PK0WM010.PK0WMCAR protect;
        set PK0WM010.TF1CARCD protect;
        set PK0WM010.PK0WMCMM protect;
        set PK0WM010.PK0WMCDD protect;
        set PK0WM010.PK0WMCYY protect;

        set PK0WM010.PK0WMORA protect;
        set PK0WM010.PK0WMORR protect;
        set PK0WM010.PK0WMOMM protect;
        set PK0WM010.PK0WMODD protect;
        set PK0WM010.PK0WMOYY protect;
         /* ----- clear screen line items*/
        PK0WW01.PK0WWNX3 = 10;
        while (PK0WW01.PK0WWNX3 >= 1)
          PK0W217();
        end
        set PK0WM010.PK0WMACT[1] cursor;
        set PKBREC empty;
        PKBREC.XWHCD = PKWREC.XWHCD;
        PKBREC.PK1CUOID = PK0WM010.PK1CUOID;
        PKBREC.PK1NORID = PK0WM010.PK1NORID;
        PKZREC.PKZFUNC = "S1";
        call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
        PK0WW01.PK0WWNX3 = 1;
        while (PK0WW01.PK0WWNX3 <= 10)
          PK0W138(); /* load order hold line items*/
        end
        PKZREC.PKZFUNC = "C1";
        call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes}; /* close set*/
        return;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(21); /* contention for data base resorce*/
          return;
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* no records found,*/
            PK0WW01.PK0WWFLD = "Y"; /* order had errors flag*/
            PK0WM010.PK0WMORR = " ";
            PK0WM010.PK0WMORD = " ";
            PK0WM010.PK0WMOMM = 0;
            PK0WM010.PK0WMODD = 0;
            PK0WM010.PK0WMOYY = 0;
            set PK0WM010.PK1CUOID cursor, modified, bold;
            set PK0WM010.PK1NORID modified, bold;
            converseLib.validationFailed(72);
            return; /* no need to load the map/ws*/
          else
            converseLib.validationFailed(29); /* fatal error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0I255 "; /* Process name*/
            TA1REC.TA1LOC = "SELECT UNIQUE            ";
            TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
            TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

            return;
          end
        end
      end
    end
  end

    /* if change or release*/
      /* get order hold release date*/

  if (PK0WM010.PK0WMORA == "R"
   || PK0WM010.PK0WMORA == "C")
    set PKBREC empty;
    PKBREC.XWHCD = PKWREC.XWHCD;
    PKBREC.PK1CUOID = PK0WM010.PK1CUOID;
    PKBREC.PK1NORID = PK0WM010.PK1NORID;
    PKBREC.XHRCD = PK0WM010.PK0WMORR;
    PKZREC.PKZFUNC = "S ";
    call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
                                   /* select unique on order*/
                                  /* hold table using reason code*/
    if (SQLCA.VAGen_SQLCODE == 0) /* 1 row was found*/
      PK0WW01.ZZZCHGCT[1] = PKBREC.ZZZCHGCT;
      PK0WW01.PK0WWREL[1] = PKBREC.PKBRELDT;
       /* ----- clear screen line items*/
      PK0WW01.PK0WWNX3 = 10;
      while (PK0WW01.PK0WWNX3 >= 1)
        PK0W217();
      end
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(21); /* contention for data base resorce*/
        return;
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* no records found,*/
          PK0WW01.PK0WWFLD = "Y"; /* order had errors flag*/
          PK0WM010.PK0WMORR = " ";
          PK0WM010.PK0WMORD = " ";
          PK0WM010.PK0WMOMM = 0;
          PK0WM010.PK0WMODD = 0;
          PK0WM010.PK0WMOYY = 0;
          set PK0WM010.PK1CUOID cursor, modified, bold;
          set PK0WM010.PK1NORID modified, bold;
          converseLib.validationFailed(72);
          return; /* no need to load the map/ws*/
        else
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0I255 "; /* Process name*/
          TA1REC.TA1LOC = "SELECT UNIQUE            ";
          TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

          return;
        end
      end
    end
  end

   /* ----- validate release dates.*/

   /* ----- if action code is 'r'*/
   /* -----     get todays date or the next working day*/
  if (PK0WM010.PK0WMORA == "R")
    set TA9REC empty;
    PK0WW01.PK0WWFDA = VGVar.currentShortGregorianDate;
    TA9REC.TA9BEGMM = PK0WW01.PK0WWFMM;
    TA9REC.TA9BEGDD = PK0WW01.PK0WWFDD;
    TA9REC.TA9BEGYY = PK0WW01.PK0WWFYY;
    /*  */
    /* ----------------- y2k in  begin -------------*/
    /*  */
    if (PK0WW01.PK0WWFYY > 60)
      TA9REC.TA9BEGCC = 19;
    else
      TA9REC.TA9BEGCC = 20;
    end
    /*  */
    /* ----------------- y2k in  end ---------------*/
    /*  */
    /*  */
    /* ----------------- y2k out begin -------------*/
    /*  */
    /* MOVE 19 TO TA9REC.TA9BEGCC;*/
    /*  */
    /* ----------------- y2k out end ---------------*/
    /*  */
    call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* to nearest working day*/
    if (TA9REC.TA9RTNFL == 0) /* good return code*/
      PK0WM010.PK0WMOMM = PK0WW01.PK0WWFMM;
      PK0WM010.PK0WMODD = PK0WW01.PK0WWFDD;
      PK0WM010.PK0WMOYY = PK0WW01.PK0WWFYY;
    else
      set TA9REC empty;
      PK0WW01.PK0WWFDA = VGVar.currentShortGregorianDate;
      TA9REC.TA9BEGMM = PK0WW01.PK0WWFMM;
      TA9REC.TA9BEGDD = PK0WW01.PK0WWFDD;
      TA9REC.TA9BEGYY = PK0WW01.PK0WWFYY;
      /*  */
      /* ----------------- y2k in  begin -------------*/
      /*  */
      if (PK0WW01.PK0WWFYY > 60)
        TA9REC.TA9BEGCC = 19;
      else
        TA9REC.TA9BEGCC = 20;
      end
      /*  */
      /* ----------------- y2k in  end ---------------*/
      /*  */
      /*  */
      /* ----------------- y2k out begin -------------*/
      /*  */
      /* MOVE 19 TO TA9REC.TA9BEGCC;*/
      /*  */
      /* ----------------- y2k out end ---------------*/
      /*  */
      TA9REC.TA9OFSET = 1;
      call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* move to nearest working day*/
      if (TA9REC.TA9RTNFL == 0) /* good return code*/
        PK0WM010.PK0WMOMM = TA9REC.TA9RTNMM;
        PK0WM010.PK0WMODD = TA9REC.TA9RTNDD;
        PK0WM010.PK0WMOYY = TA9REC.TA9RTNYY;
      else
        set PK0WM010.PK0WMOMM cursor, modified, bold;
        set PK0WM010.PK0WMODD modified, bold;
        set PK0WM010.PK0WMOYY modified, bold;
        PK0WW01.PK0WWFLC = "Y"; /* release date error flag*/
        converseLib.validationFailed(56);
      end
    end
  end

   /* ----- if action code is 'c'*/
   /* ----- or action code is 'r'*/
   /* -----     planning release date must be prior to*/
   /* -----     picking release date. (if not, it's an error)*/
  if (PK0WM010.PK0WMORA == "C"
   || PK0WM010.PK0WMORA == "R")
      /*  */
      /* ----------------- y2k out begin -------------*/
      /*  */
    /* MOVE 19 TO PK0WW01.PK0WWFCT;*/
      /*  */
      /* ----------------- y2k out end ---------------*/
      /*  */
    PK0WW01.PK0WWFYY = PK0WM010.PK0WMOYY;
    PK0WW01.PK0WWFMM = PK0WM010.PK0WMOMM;
    PK0WW01.PK0WWFDD = PK0WM010.PK0WMODD;
      /*  */
      /* ----------------- y2k in begin --------------*/
      /*  */
    if (PK0WM010.PK0WMOYY > 60)
      PK0WW01.PK0WWFCT = 19;
    else
      PK0WW01.PK0WWFCT = 20;
    end
      /*  */
      /* ----------------- y2k in  end ---------------*/
      /*  */
    PKBREC.PKBPLRDT = PK0WW01.PK0WWFDT;
    if (PKBREC.PKBPLRDT < PK0WW01.PK0WWREL[1])
      /* next sentence*/
    else
      set PK0WM010.PK0WMOMM cursor, modified, bold;
      set PK0WM010.PK0WMODD modified, bold;
      set PK0WM010.PK0WMOYY modified, bold;
      PK0WW01.PK0WWFLC = "Y"; /* release date error flag*/
      converseLib.validationFailed(75);
    end
  end

   /* ----- if order release date is entered*/
   /* ----- and it's older than todays date*/
   /* -----     it is an error*/
  if (PK0WM010.PK0WMORA == "C")
    if (PK0WM010.PK0WMOMM != 0
     || PK0WM010.PK0WMODD != 0)
      /*  */
      /* ----------------- y2k out begin --------------*/
      /*  */
      /* OR PK0WM010.PK0WMOYY NE 0;*/
      /*  */
      /* ----------------- y2k out end ----------------*/
      /*  */
      PK0WWFDA = VGVar.currentShortGregorianDate;
      /*  */
      /* ----------------- y2k in begin ---------------*/
      /*  */
      PK0WW01.PK0WWCMP-YY1 = PK0WM010.PK0WMOYY;
      if (PK0WW01.PK0WWCMP-YY1 > 60)
        PK0WW01.PK0WWCMP-CC1 = 19;
      else
        PK0WW01.PK0WWCMP-CC1 = 20;
      end
      PK0WW01.PK0WWCMP-YY2 = PK0WW01.PK0WWFYY;
      if (PK0WW01.PK0WWCMP-YY2 > 60)
        PK0WW01.PK0WWCMP-CC2 = 19;
      else
        PK0WW01.PK0WWCMP-CC2 = 20;
      end
      if (PK0WW01.PK0WWCMP-CCYY1 < PK0WW01.PK0WWCMP-CCYY2)
        /*  */
        /* ----------------- y2k in end -----------------*/
        /*  */
        /*  */
        /* ----------------- y2k out begin --------------*/
        /*  */
        /* IF PK0WM010.PK0WMOYY LT PK0WW01.PK0WWFYY;*/
        /*  */
        /* ----------------- y2k out end ----------------*/
        /*  */
        set PK0WM010.PK0WMOMM cursor, modified, bold;
        set PK0WM010.PK0WMODD modified, bold;
        set PK0WM010.PK0WMOYY modified, bold;
        PK0WW01.PK0WWFLC = "Y"; /* release date error flag*/
        converseLib.validationFailed(55);
      end
      if (PK0WM010.PK0WMOYY == PK0WW01.PK0WWFYY
       && PK0WM010.PK0WMOMM < PK0WW01.PK0WWFMM)
        set PK0WM010.PK0WMOMM cursor, modified, bold;
        set PK0WM010.PK0WMODD modified, bold;
        set PK0WM010.PK0WMOYY modified, bold;
        PK0WW01.PK0WWFLC = "Y"; /* release date error flag*/
        converseLib.validationFailed(55);
      end
      if (PK0WM010.PK0WMOYY == PK0WW01.PK0WWFYY
       && PK0WM010.PK0WMOMM == PK0WW01.PK0WWFMM
       && PK0WM010.PK0WMODD < PK0WW01.PK0WWFDD)
        set PK0WM010.PK0WMOMM cursor, modified, bold;
        set PK0WM010.PK0WMODD modified, bold;
        set PK0WM010.PK0WMOYY modified, bold;
        PK0WW01.PK0WWFLC = "Y"; /* release date error flag*/
        converseLib.validationFailed(55);
      end
    end
  end

   /* ----- if action is change*/
   /* ----- and date is not entered*/
   /* -----     it is an error*/
  if (PK0WM010.PK0WMORA == "C")
      /*  */
      /* ----------------- y2k out begin  ----------------*/
      /*  */
    /* IF PK0WM010.PK0WMOYY EQ 0*/
      /*  */
      /* ----------------- y2k out end ----------------*/
      /*  */
    if (PK0WM010.PK0WMOMM == 0
     && PK0WM010.PK0WMODD == 0)
      set PK0WM010.PK0WMOMM cursor, modified, bold;
      set PK0WM010.PK0WMODD modified, bold;
      set PK0WM010.PK0WMOYY modified, bold;
      PK0WW01.PK0WWFLC = "Y"; /* release date error flag*/
      converseLib.validationFailed(66);
    end
  end

   /* ----- if customer release date is entered*/
   /* ----- and it's not all 9's*/
   /* -----     check to see if falls on a working day*/
  if (PK0WM010.PK0WMORA != "R")
    if (PK0WM010.PK0WMOMM != 0
     || PK0WM010.PK0WMODD != 0)
      /*  */
      /* ----------------- y2k out begin --------------*/
      /*  */
      /* OR PK0WM010.PK0WMOYY NE 0;*/
      /*  */
      /* ----------------- y2k out end ----------------*/
      /*  */
      if (PK0WM010.PK0WMOMM != 99
       || PK0WM010.PK0WMODD != 99)
        /*  */
        /* ----------------- y2k out begin --------------*/
        /*  */
        /* OR PK0WM010.PK0WMOYY NE 99;*/
        /*  */
        /* ----------------- y2k out end ----------------*/
        /*  */
        set TA9REC empty;
        TA9REC.TA9BEGMM = PK0WM010.PK0WMOMM;
        TA9REC.TA9BEGDD = PK0WM010.PK0WMODD;
        TA9REC.TA9BEGYY = PK0WM010.PK0WMOYY;
        /*  */
        /* ----------------- y2k in begin ---------------*/
        /*  */
        if (PK0WM010.PK0WMOYY > 60)
          TA9REC.TA9BEGCC = 19;
        else
          TA9REC.TA9BEGCC = 20;
        end
        /*  */
        /* ----------------- y2k in end -----------------*/
        /*  */
        /*  */
        /* ----------------- y2k out begin --------------*/
        /*  */
        /* MOVE 19 TO TA9REC.TA9BEGCC;*/
        /*  */
        /* ----------------- y2k out end ----------------*/
        /*  */
        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* move to nearest working day*/
        if (TA9REC.TA9RTNFL == 0) /* good return code*/
           /* next sentence*/
        else
          set PK0WM010.PK0WMOMM cursor, modified, bold;
          set PK0WM010.PK0WMODD modified, bold;
          set PK0WM010.PK0WMOYY modified, bold;
          PK0WW01.PK0WWFLC = "Y"; /* release date error flag*/
          converseLib.validationFailed(56);
        end
      end
    end
  end

   /* ----- validate reason code*/

  if (PK0WM010.PK0WMORA != "R"
   && PK0WM010.PK0WMORA != " "
   && PK0WM010.PK0WMORA != "S"
   && PK0WM010.PK0WMORA != "V")
    PK0WW01.PK0WWRSN = PK0WM010.PK0WMORR;
    PK0WW01.PK0WWNDX = 1;
    PK0WW01.PK0WWFL6 = "N";
    while (PK0WW01.PK0WWNDX <= PK0WW01.PK0WWTRR
     && PK0WW01.PK0WWFL6 == "N")
      PK0W252();
    end

    if (PK0WW01.PK0WWFL6 == "N")
      set PK0WM010.PK0WMORR cursor, modified, bold;
      PK0WW01.PK0WWFLB = "Y"; /* reason code error flag*/
      converseLib.validationFailed(57);
    else
      PK0WM010.PK0WMORD = PK0WW01.XHRABRV[PK0WWNDX];
    end
  end

   /* ----- if action is change or release*/
   /* ----- and reason code is not entered*/
   /* -----     it is an error*/
  if (PK0WM010.PK0WMORA == "C"
   || PK0WM010.PK0WMORA == "R")
    if (PK0WM010.PK0WMORR == " ")
      set PK0WM010.PK0WMORR cursor, modified, bold;
      PK0WW01.PK0WWFLB = "Y"; /* reason code error flag*/
      converseLib.validationFailed(67);
    end
  end

   /* ----- validate action field*/

  if (PK0WM010.PK0WMORA == " "
   || PK0WM010.PK0WMORA == "V"
   || PK0WM010.PK0WMORA == "S"
   || PK0WM010.PK0WMORA == "R"
   || PK0WM010.PK0WMORA == "C")
     /* next sentence*/
  else
    set PK0WM010.PK0WMORA cursor, modified, bold;
    PK0WW01.PK0WWFLA = "Y"; /* action field error flag*/
    converseLib.validationFailed(35);
  end

   /* ----- if action field is 's'*/
   /* -----     set selection for inquiry flag to 'y'*/
  if (PK0WM010.PK0WMORA == "S")
    PK0WW01.PK0WWFL5 = "Y";
  end

   /* ----- reset fields*/
  if (PK0WW01.PK0WWFLB == "N")
    set PK0WM010.PK0WMORR normal;
  end

  if (PK0WW01.PK0WWFLA == "N")
    set PK0WM010.PK0WMORA normal;
  end

  if (PK0WW01.PK0WWFLC == "N")
    set PK0WM010.PK0WMOMM normal;
    set PK0WM010.PK0WMODD normal;
    set PK0WM010.PK0WMOYY normal;
  end

  if (PK0WW01.PK0WWFLD == "N")
    set PK0WM010.PK1CUOID normal;
    set PK0WM010.PK1NORID normal;
  end

   /* ----- end pk0w255*/
end // end PK0W255

// validate header - customer
Function PK0W257()
   /* ----- pk0w257*/
   /* -----*/
   /* ----- validate header - customer data*/

  PK0WM010.XXXERRID = "PK0W257";

   /* ----- initialize field error flags*/
  PK0WW01.PK0WWFLA = "N"; /* action field error flag*/
  PK0WW01.PK0WWFLB = "N"; /* reason code error flag*/
  PK0WW01.PK0WWFLC = "N"; /* release date error flag*/
  PK0WW01.PK0WWFL9 = "N"; /* customer error flag*/

   /* ----- validate customer - get customer name*/
  PK0W135();
  if (SQLCA.VAGen_SQLCODE != 0)
    return;
  end

   /* ----- if action field is ' '*/
   /* -----     if only 1 reason exixts*/
   /* -----         get reason description*/
   /* -----     else*/
   /* -----          load line items*/
  if (PK0WM010.PK0WMKUA == " ")
    set PK9REC empty;
    PK9REC.XWHCD = PKWREC.XWHCD;
    PK9REC.KUCCOID = PK0WM010.KUCCOID;
    PK9REC.KUMSTRID = PK0WM010.KUMSTRID;
    PK9REC.XNXCD = PK0WM010.XNXCD;
    PK9REC.XHRCD = "*";
    PKZREC.PKZFUNC = "S ";
    call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
                                   /* sel unique on customer*/
                                  /* hold table using wildcard '*'*/
                                  /* for reason code*/
    if (SQLCA.VAGen_SQLCODE == 0) /* 1 row was found*/
      PK0WW01.ZZZCHGCT[1] = PK9REC.ZZZCHGCT;
      PK0WW01.PK0WWREL[1] = PK9REC.PK9RELDT;
      PK0WW01.PK0WWFDT = PK9REC.PK9PLRDT;
      PK0WM010.PK0WMKYY = PK0WW01.PK0WWFYY;
      PK0WM010.PK0WMKMM = PK0WW01.PK0WWFMM;
      PK0WM010.PK0WMKDD = PK0WW01.PK0WWFDD;
      PK0WM010.PK0WMKUR = PK9REC.XHRCD;
      set PK0WM010.PK0WMKUA cursor;
       /* ----- clear screen line items*/
      PK0WW01.PK0WWNX3 = 10;
      while (PK0WW01.PK0WWNX3 >= 1)
        PK0W217();
      end
      PK0WW01.PK0WWRSN = PK9REC.XHRCD;
      PK0WW01.PK0WWNDX = 1;
      PK0WW01.PK0WWFL6 = "N";
      while (PK0WW01.PK0WWNDX <= PK0WW01.PK0WWTRR
       && PK0WW01.PK0WWFL6 == "N")
        PK0W252();
      end
      if (PK0WW01.PK0WWFL6 == "Y")
        PK0WM010.PK0WMKUD = PK0WW01.XHRABRV[PK0WWNDX];
      else
        PK0WM010.PK0WMKUD = "UNKNWN";
      end
    else
      if (SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
        PK0WM010.PK0WMKUR = " ";
        PK0WM010.PK0WMKUD = " ";
        PK0WM010.PK0WMKMM = 0;
        PK0WM010.PK0WMKDD = 0;
        PK0WM010.PK0WMKYY = 0;

        PK0WM010.PK0WMORA = " ";
        PK0WM010.PK0WMORR = " ";
        PK0WM010.PK0WMORD = " ";
        PK0WM010.PK1CUOID = 0;
        PK0WM010.PK1NORID = 0;
        PK0WM010.PK0WMOMM = 0;
        PK0WM010.PK0WMODD = 0;
        PK0WM010.PK0WMOYY = 0;

        PK0WM010.PK0WMCAA = " ";
        PK0WM010.PK0WMCAR = " ";
        PK0WM010.PK0WMCAD = " ";
        PK0WM010.TF1CARCD = 0;
        PK0WM010.PK0WMCMM = 0;
        PK0WM010.PK0WMCDD = 0;
        PK0WM010.PK0WMCYY = 0;

        set PK0WM010.PK0WMORA protect;
        set PK0WM010.PK0WMORR protect;
        set PK0WM010.PK1CUOID protect;
        set PK0WM010.PK1NORID protect;
        set PK0WM010.PK0WMOMM protect;
        set PK0WM010.PK0WMODD protect;
        set PK0WM010.PK0WMOYY protect;

        set PK0WM010.PK0WMKUA protect;
        set PK0WM010.PK0WMKUR protect;
        set PK0WM010.PK0WMKMM protect;
        set PK0WM010.PK0WMKDD protect;
        set PK0WM010.PK0WMKYY protect;
         /* ----- clear screen line items*/
        PK0WW01.PK0WWNX3 = 10;
        while (PK0WW01.PK0WWNX3 >= 1)
          PK0W217();
        end
        set PK0WM010.PK0WMACT[1] cursor;
        set PK9REC empty;
        PK9REC.XWHCD = PKWREC.XWHCD;
        PK9REC.KUCCOID = PK0WM010.KUCCOID;
        PK9REC.KUMSTRID = PK0WM010.KUMSTRID;
        PK9REC.XNXCD = PK0WM010.XNXCD;
        PKZREC.PKZFUNC = "S1";
        call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
        PK0WW01.PK0WWNX3 = 1;
        while (PK0WW01.PK0WWNX3 <= 10)
          PK0W137(); /* load customer hold line items*/
        end
        PKZREC.PKZFUNC = "C1";
        call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
        return;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(21); /* contention for data base resorce*/
          return;
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* no records found,*/
            PK0WW01.PK0WWFL9 = "Y";
            PK0WM010.PK0WMKMM = 0;
            PK0WM010.PK0WMKDD = 0;
            PK0WM010.PK0WMKYY = 0;
            PK0WM010.PK0WMKUD = " ";
            PK0WM010.PK0WMKUR = " ";
            set PK0WM010.KUCCOID cursor, modified, bold;
            set PK0WM010.KUMSTRID modified, bold;
            set PK0WM010.XNXCD modified, bold;
            converseLib.validationFailed(71);
            return; /* no need to load the map/ws*/
          else
            converseLib.validationFailed(29); /* fatal error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0I257 "; /* Process name*/
            TA1REC.TA1LOC = "SELECT UNIQUE            ";
            TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
            TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

            return;
          end
        end
      end
    end
  end

    /* if change or release*/
      /* get customer hold release date*/

  if (PK0WM010.PK0WMKUA == "R"
   || PK0WM010.PK0WMKUA == "C")
    set PK9REC empty;
    PK9REC.XWHCD = PKWREC.XWHCD;
    PK9REC.KUCCOID = PK0WM010.KUCCOID;
    PK9REC.KUMSTRID = PK0WM010.KUMSTRID;
    PK9REC.XNXCD = PK0WM010.XNXCD;
    PK9REC.XHRCD = PK0WM010.PK0WMKUR;
    PKZREC.PKZFUNC = "S ";
    call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
                                   /* sel unique on customer*/
                                  /* hold table using wildcard '*'*/
                                  /* for reason code*/
    if (SQLCA.VAGen_SQLCODE == 0) /* 1 row was found*/
      PK0WW01.ZZZCHGCT[1] = PK9REC.ZZZCHGCT;
      PK0WW01.PK0WWREL[1] = PK9REC.PK9RELDT;
       /* ----- clear screen line items*/
      PK0WW01.PK0WWNX3 = 10;
      while (PK0WW01.PK0WWNX3 >= 1)
        PK0W217();
      end
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(21); /* contention for data base resorce*/
        return;
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* no records found,*/
          PK0WW01.PK0WWFL9 = "Y";
          PK0WM010.PK0WMKMM = 0;
          PK0WM010.PK0WMKDD = 0;
          PK0WM010.PK0WMKYY = 0;
          PK0WM010.PK0WMKUD = " ";
          PK0WM010.PK0WMKUR = " ";
          set PK0WM010.KUCCOID cursor, modified, bold;
          set PK0WM010.KUMSTRID modified, bold;
          set PK0WM010.XNXCD modified, bold;
          converseLib.validationFailed(71);
          return; /* no need to load the map/ws*/
        else
          converseLib.validationFailed(29); /* fatal error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0I257 "; /* Process name*/
          TA1REC.TA1LOC = "SELECT UNIQUE            ";
          TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
          TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

          return;
        end
      end
    end
  end

   /* ----- validate realease dates.*/

   /* ----- if action code is 'r'*/
   /* -----     get todays date or the next working day*/
  if (PK0WM010.PK0WMKUA == "R")
    set TA9REC empty;
    PK0WW01.PK0WWFDA = VGVar.currentShortGregorianDate;
    TA9REC.TA9BEGMM = PK0WW01.PK0WWFMM;
    TA9REC.TA9BEGDD = PK0WW01.PK0WWFDD;
    TA9REC.TA9BEGYY = PK0WW01.PK0WWFYY;
    /*  */
    /* ---------------- Y2K OUT BEGIN ----------------*/
    /*  */
    /* MOVE 19 TO TA9REC.TA9BEGCC;*/
    /*  */
    /* ---------------- Y2K OUT END ------------------*/
    /*  */
    /*  */
    /* ---------------- Y2K IN BEGIN -----------------*/
    /*  */
    if (PK0WW01.PK0WWFYY > 60)
      TA9REC.TA9BEGCC = 19;
    else
      TA9REC.TA9BEGCC = 20;
    end
    /*  */
    /* ---------------- Y2K IN END -------------------*/
    /*  */
    call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* to nearest working day*/
    if (TA9REC.TA9RTNFL == 0) /* good return code*/
      PK0WM010.PK0WMKMM = PK0WW01.PK0WWFMM;
      PK0WM010.PK0WMKDD = PK0WW01.PK0WWFDD;
      PK0WM010.PK0WMKYY = PK0WW01.PK0WWFYY;
    else
      set TA9REC empty;
      PK0WW01.PK0WWFDA = VGVar.currentShortGregorianDate;
      TA9REC.TA9BEGMM = PK0WW01.PK0WWFMM;
      TA9REC.TA9BEGDD = PK0WW01.PK0WWFDD;
      TA9REC.TA9BEGYY = PK0WW01.PK0WWFYY;
      /*  */
      /* ----------------- Y2K OUT BEGIN ----------------*/
      /*  */
      /* MOVE 19 TO TA9REC.TA9BEGCC;*/
      /*  */
      /* ----------------- Y2K OUT END ------------------*/
      /*  */
      /*  */
      /* ----------------- Y2K IN BEGIN -----------------*/
      /*  */
      if (PK0WW01.PK0WWFYY > 60)
        TA9REC.TA9BEGCC = 19;
      else
        TA9REC.TA9BEGCC = 20;
      end
      /*  */
      /* ----------------- Y2K IN  END ------------------*/
      /*  */
      TA9REC.TA9OFSET = 1;
      call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* move to nearest working day*/
      if (TA9REC.TA9RTNFL == 0) /* good return code*/
        PK0WM010.PK0WMKMM = TA9REC.TA9RTNMM;
        PK0WM010.PK0WMKDD = TA9REC.TA9RTNDD;
        PK0WM010.PK0WMKYY = TA9REC.TA9RTNYY;
      else
        set PK0WM010.PK0WMKMM cursor, modified, bold;
        set PK0WM010.PK0WMKDD modified, bold;
        set PK0WM010.PK0WMKYY modified, bold;
        PK0WW01.PK0WWFLC = "Y"; /* release date error flag*/
        converseLib.validationFailed(56);
      end
    end
  end

   /* ----- if action code is 'r'*/
   /* ----- or action code is 'c'*/
   /* -----     planning release date must be prior to*/
   /* -----     picking release date. (if not, it's an error)*/
  if (PK0WM010.PK0WMKUA == "R"
   || PK0WM010.PK0WMKUA == "C")
    /*  */
    /* ----------- Y2K OUT BEGIN ----------*/
    /*  */
    /* MOVE 19 TO PK0WW01.PK0WWFCT;*/
    /*  */
    /* ----------- Y2K OUT END ------------*/
    /*  */
    PK0WW01.PK0WWFYY = PK0WM010.PK0WMKYY;
    PK0WW01.PK0WWFMM = PK0WM010.PK0WMKMM;
    PK0WW01.PK0WWFDD = PK0WM010.PK0WMKDD;
    /*  */
    /* ----------- Y2K IN BEGIN ------------*/
    /*  */
    if (PK0WM010.PK0WMKYY > 60)
      PK0WW01.PK0WWFCT = 19;
    else
      PK0WW01.PK0WWFCT = 20;
    end
    /*  */
    /* ----------- Y2K IN END ------------*/
    /*  */
    PKBREC.PKBPLRDT = PK0WW01.PK0WWFDT;
    if (PKBREC.PKBPLRDT < PK0WW01.PK0WWREL[1])
      /* next sentence*/
    else
      set PK0WM010.PK0WMKMM cursor, modified, bold;
      set PK0WM010.PK0WMKDD modified, bold;
      set PK0WM010.PK0WMKYY modified, bold;
      PK0WW01.PK0WWFLC = "Y"; /* release date error flag*/
      converseLib.validationFailed(75);
    end
  end

   /* ----- if customer release date is entered*/
   /* ----- and it's older than todays date*/
   /* -----     it is an error*/
  if (PK0WM010.PK0WMKUA == "C")
    if (PK0WM010.PK0WMKMM != 0
     || PK0WM010.PK0WMKDD != 0)
      /*  */
      /* ------------------- y2k out begin ----------------*/
      /*  */
      /* OR PK0WM010.PK0WMKYY NE 0;*/
      /*  */
      /* ------------------- y2k out end ------------------*/
      /*  */
      PK0WWFDA = VGVar.currentShortGregorianDate;
      /*  */
      /* ------------------- y2k in begin -----------------*/
      /*  */
      PK0WW01.PK0WWCMP-YY1 = PK0WM010.PK0WMKYY;
      if (PK0WW01.PK0WWCMP-YY1 > 60)
        PK0WW01.PK0WWCMP-CC1 = 19;
      else
        PK0WW01.PK0WWCMP-CC1 = 20;
      end
      PK0WW01.PK0WWCMP-YY2 = PK0WW01.PK0WWFYY;
      if (PK0WW01.PK0WWCMP-YY2 > 60)
        PK0WW01.PK0WWCMP-CC2 = 19;
      else
        PK0WW01.PK0WWCMP-CC2 = 20;
      end
      if (PK0WW01.PK0WWCMP-CCYY1 < PK0WW01.PK0WWCMP-CCYY2)
        /*  */
        /* ------------------- y2k in end -------------------*/
        /*  */
        /*  */
        /* ------------------- y2k out begin ----------------*/
        /*  */
        /* IF PK0WM010.PK0WMKYY LT PK0WW01.PK0WWFYY;*/
        /*  */
        /* ------------------- y2k out end ------------------*/
        /*  */
        set PK0WM010.PK0WMKMM cursor, modified, bold;
        set PK0WM010.PK0WMKDD modified, bold;
        set PK0WM010.PK0WMKYY modified, bold;
        PK0WW01.PK0WWFLC = "Y"; /* release date error flag*/
        converseLib.validationFailed(55);
      end
      if (PK0WM010.PK0WMKYY == PK0WW01.PK0WWFYY
       && PK0WM010.PK0WMKMM < PK0WW01.PK0WWFMM)
        set PK0WM010.PK0WMKMM cursor, modified, bold;
        set PK0WM010.PK0WMKDD modified, bold;
        set PK0WM010.PK0WMKYY modified, bold;
        PK0WW01.PK0WWFLC = "Y"; /* release date error flag*/
        converseLib.validationFailed(55);
      end
      if (PK0WM010.PK0WMKYY == PK0WW01.PK0WWFYY
       && PK0WM010.PK0WMKMM == PK0WW01.PK0WWFMM
       && PK0WM010.PK0WMKDD < PK0WW01.PK0WWFDD)
        set PK0WM010.PK0WMKMM cursor, modified, bold;
        set PK0WM010.PK0WMKDD modified, bold;
        set PK0WM010.PK0WMKYY modified, bold;
        PK0WW01.PK0WWFLC = "Y"; /* release date error flag*/
        converseLib.validationFailed(55);
      end
    end
  end

   /* ----- if action is change*/
   /* ----- and date is not entered*/
   /* -----     it is an error*/
  if (PK0WM010.PK0WMKUA == "C")
    /*  */
    /* -------------------- y2k out begin ---------------*/
    /*  */
    /* IF PK0WM010.PK0WMKYY EQ 0*/
    /*  */
    /* -------------------- y2k out end ---------------*/
    /*  */
    if (PK0WM010.PK0WMKMM == 0
     && PK0WM010.PK0WMKDD == 0)
      set PK0WM010.PK0WMKMM cursor, modified, bold;
      set PK0WM010.PK0WMKDD modified, bold;
      set PK0WM010.PK0WMKYY modified, bold;
      PK0WW01.PK0WWFLC = "Y"; /* release date error flag*/
      converseLib.validationFailed(66);
    end
  end

   /* ----- if customer release date is entered*/
   /* ----- and it's not all 9's*/
   /* -----     check to see if falls on a working day*/
  if (PK0WM010.PK0WMKUA != "R")
    if (PK0WM010.PK0WMKMM != 0
     || PK0WM010.PK0WMKDD != 0)
      /*  */
      /* -------------------- y2k out begin ---------------*/
      /*  */
      /* OR PK0WM010.PK0WMKYY NE 0;*/
      /*  */
      /* -------------------- y2k out end -----------------*/
      /*  */
      if (PK0WM010.PK0WMKMM != 99
       || PK0WM010.PK0WMKDD != 99)
        /*  */
        /* -------------------- y2k out begin -----------------*/
        /*  */
        /* OR PK0WM010.PK0WMKYY NE 99;*/
        /*  */
        /* -------------------- y2k out end -----------------*/
        /*  */
        set TA9REC empty;
        TA9REC.TA9BEGMM = PK0WM010.PK0WMKMM;
        TA9REC.TA9BEGDD = PK0WM010.PK0WMKDD;
        TA9REC.TA9BEGYY = PK0WM010.PK0WMKYY;
        /*  */
        /* ----------------- Y2K OUT BEGIN --------------------*/
        /*  */
        /* MOVE 19 TO TA9REC.TA9BEGCC;*/
        /*  */
        /* ----------------- Y2K OUT END ----------------------*/
        /*  */
        /*  */
        /* ----------------- Y2K IN BEGIN ---------------------*/
        /*  */
        if (PK0WM010.PK0WMKYY > 60)
          TA9REC.TA9BEGCC = 19;
        else
          TA9REC.TA9BEGCC = 20;
        end
        /*  */
        /* ----------------- Y2K IN END -----------------------*/
        /*  */
        call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* move to nearest working day*/
        if (TA9REC.TA9RTNFL == 0) /* good return code*/
           /* next sentence*/
        else
          set PK0WM010.PK0WMKMM cursor, modified, bold;
          set PK0WM010.PK0WMKDD modified, bold;
          set PK0WM010.PK0WMKYY modified, bold;
          PK0WW01.PK0WWFLC = "Y"; /* release date error flag*/
          converseLib.validationFailed(56);
        end
      end
    end
  end

   /* ----- validate reason code*/

  if (PK0WM010.PK0WMKUA != "R"
   && PK0WM010.PK0WMKUA != " "
   && PK0WM010.PK0WMKUA != "S"
   && PK0WM010.PK0WMKUA != "V")
    PK0WW01.PK0WWRSN = PK0WM010.PK0WMKUR;
    PK0WW01.PK0WWNDX = 1;
    PK0WW01.PK0WWFL6 = "N";
    while (PK0WW01.PK0WWNDX <= PK0WW01.PK0WWTRR
     && PK0WW01.PK0WWFL6 == "N")
      PK0W252();
    end

    if (PK0WW01.PK0WWFL6 == "N")
      set PK0WM010.PK0WMKUR cursor, modified, bold;
      PK0WW01.PK0WWFLB = "Y"; /* reason code error flag*/
      converseLib.validationFailed(57);
    else
      PK0WM010.PK0WMKUD = PK0WW01.XHRABRV[PK0WWNDX];
    end
  end

   /* ----- if action is change or release*/
   /* ----- and reason code is not entered*/
   /* -----     it is an error*/
  if (PK0WM010.PK0WMKUA == "C"
   || PK0WM010.PK0WMKUA == "R")
    if (PK0WM010.PK0WMKUR == " ")
      set PK0WM010.PK0WMKUR cursor, modified, bold;
      PK0WW01.PK0WWFLB = "Y"; /* reason code error flag*/
      converseLib.validationFailed(67);
    end
  end

   /* ----- validate action field*/

  if (PK0WM010.PK0WMKUA == " "
   || PK0WM010.PK0WMKUA == "V"
   || PK0WM010.PK0WMKUA == "S"
   || PK0WM010.PK0WMKUA == "R"
   || PK0WM010.PK0WMKUA == "C")
     /* next sentence*/
  else
    set PK0WM010.PK0WMKUA cursor, modified, bold;
    PK0WW01.PK0WWFLA = "Y"; /* action field error flag*/
    converseLib.validationFailed(35);
  end

   /* ----- if action field is 's'*/
   /* -----     set selection for inquiry flag to 'y'*/
  if (PK0WM010.PK0WMKUA == "S")
    PK0WW01.PK0WWFL5 = "Y";
  end

   /* ----- reset fields*/
  if (PK0WW01.PK0WWFLB == "N")
    set PK0WM010.PK0WMKUR normal;
  end

  if (PK0WW01.PK0WWFLA == "N")
    set PK0WM010.PK0WMKUA normal;
  end

  if (PK0WW01.PK0WWFLC == "N")
    set PK0WM010.PK0WMKMM normal;
    set PK0WM010.PK0WMKDD normal;
    set PK0WM010.PK0WMKYY normal;
  end

  if (PK0WW01.PK0WWFL9 == "N")
    set PK0WM010.KUCCOID normal;
    set PK0WM010.KUMSTRID normal;
    set PK0WM010.XNXCD normal;
  end

   /* ----- end pk0w257*/
end // end PK0W257

// transfer to inquiry
Function PK0W300()
   /* -----  pk0w300*/
   /* -----  transfer to appropriate inquiry application*/

  PKWREC.PKWINDEX = PKWREC.PKWINDEX + 1;

   /* -----   if customer inquiry was selected*/
   /* -----      load customer into pkwrec*/
   /* -----      set the inquiry selection type to 'c' for cust.*/
   /* -----      transfer control to pk0d - customer inquiry*/
  if (PK0WW01.PK0WWFL7 == "C")
    set PKXREC empty;
    PKXREC.KUCCOID[1] = PK0WM010.KUCCOID;
    PKXREC.KUMSTRID[1] = PK0WM010.KUMSTRID;
    PKXREC.XNXCD[1] = PK0WM010.XNXCD;
    PKXREC.PKXKUACT[1] = "S";
    PKXREC.XWHCD = PKWREC.XWHCD;
    PKXREC.XWHABRV = PKWREC.XWHABRV;
    PKWREC.PKWARRAY[PKWINDEX] = PKXREC.PKWARRAY;
    PKWREC.PKWFRMAP[PKWINDEX] = COMMAREA.CACURRAP;
    PKWREC.PKWSLTYP[PKWINDEX] = "C";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    COMMAREA.CATOAP = "PK0D";
    XSEXIT();
    PK0WM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end

   /* -----   if order inquiry was selected*/
   /* -----      load order number into pkwrec*/
   /* -----      set the inquiry selection type to 'o' for order.*/
   /* -----      transfer control to pk0b - order inquiry*/
  if (PK0WW01.PK0WWFL7 == "O")
    set PKYREC empty;
    PKYREC.PK1CUOID[1] = PK0WM010.PK1CUOID;
    PKYREC.PK1NORID[1] = PK0WM010.PK1NORID;
    PKYREC.PKYORACT[1] = "S";
    PKYREC.XWHCD = PKWREC.XWHCD;
    PKYREC.XWHABRV = PKWREC.XWHABRV;
    PKWREC.PKWARRAY[PKWINDEX] = PKYREC.PKWARRAY;
    PKWREC.PKWFRMAP[PKWINDEX] = COMMAREA.CACURRAP;
    PKWREC.PKWSLTYP[PKWINDEX] = "O";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    COMMAREA.CATOAP = "PK0B";
    XSEXIT();
    PK0WM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end

   /* -----   if carrier inquiry was selected*/
   /* -----      load carrier code into pkwrec*/
   /* -----      set the inquiry selection type to 'o' for carrier*/
   /* -----      transfer control to tf0e - carrier inquiry*/
  if (PK0WW01.PK0WWFL7 == "R")
    set PWGREC empty;
    PWGREC.TF1CARCD[1] = PK0WM010.TF1CARCD;
    PWGREC.PWGCAACT[1] = "S";
    PWGREC.XWHCD = PKWREC.XWHCD;
    PWGREC.XWHABRV = PKWREC.XWHABRV;
    PKWREC.PKWARRAY[PKWINDEX] = PWGREC.PKWARRAY;
    PKWREC.PKWFRMAP[PKWINDEX] = COMMAREA.CACURRAP;
    PKWREC.PKWSLTYP[PKWINDEX] = "?";
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    COMMAREA.CATOAP = "TF0E";
    XSEXIT();
    PK0WM010.VAGen_EZEMSG = COMMAREA.CAMSG;
  end

   /* ------------------- end pk0w300 -------------------------*/
end // end PK0W300

// update hold tables
Function PK0W400()

   /* ----- pk0w400*/
   /* ----- update hold tables*/

  PK0WM010.XXXERRID = "PK0W400";

   /* ----- if line items were entered*/
   /* -----     perform update line items*/
   /* -----     varying index from 10 to 1 by -1*/
  if (PK0WW01.PK0WWFL8 == "Y")
    PK0WW01.PK0WWNX3 = 10;
    while (PK0WW01.PK0WWNX3 >= 1)
      PK0W410();
    end
  end

   /* ----- if line items were entered*/
   /* -----     if customers were being processed*/
   /* -----     and no customer errors*/
   /* -----         set customer normal*/
   /* -----     else*/
   /* -----             set cursor at customer number*/
  if (PK0WW01.PK0WWFL8 == "Y")
    if (PK0WW01.PK0WWFL7 == "C"
     && PK0WW01.PK0WWFL9 == "N")
      set PK0WM010.KUCCOID cursor, normal;
      set PK0WM010.KUMSTRID normal;
      set PK0WM010.XNXCD normal;
    else
      if (PK0WW01.PK0WWFL7 == "O"
       && PK0WW01.PK0WWFLD == "N")
        set PK0WM010.PK1CUOID cursor, normal;
        set PK0WM010.PK1NORID normal;
      end
    end
  end

   /* ----- if line items were entered*/
   /* -----     then get out, bypass the logic below*/
  if (PK0WW01.PK0WWFL8 == "Y")
    return;
  end

                /* C U S T O M E R*/
                /* | | | | | | | |*/
                /* V V V V V V V V*/

  if (PK0WW01.PK0WWFL7 == "C") /* customer being processed*/
    if (PK0WM010.PK0WMKUA == "C" /* change release date*/
     || PK0WM010.PK0WMKUA == "R") /* release*/
      set PK9REC empty;
      PK9REC.XWHCD = PKWREC.XWHCD; /* warehouse code*/
      PK9REC.XBCCD = PKWREC.XBCCD; /* brand code*/
      PK9REC.KUCCOID = PK0WM010.KUCCOID;
      PK9REC.KUMSTRID = PK0WM010.KUMSTRID;
      PK9REC.XNXCD = PK0WM010.XNXCD;
      PK9REC.XGPCD = "00";
      PK9REC.XHRCD = PK0WM010.PK0WMKUR;
      PK9REC.ZZZCHGCT = PK0WW01.ZZZCHGCT[1];
      /*  */
      /* ------------------- Y2K OUT BEGIN -------------------*/
      /*  */
      /* MOVE 19 TO PK0WW01.PK0WWFCT;*/
      /* MOVE EZEDTE TO PK0WW01.PK0WWFDA;*/
      /*  */
      /* ------------------- Y2K OUT END ---------------------*/
      /*  */
      /*  */
      /* ------------------- Y2K IN BEGIN -------------------*/
      /*  */
      PK0WW01.PK0WWFDT = VGVar.currentGregorianDate;
      /*  */
      /* ------------------- Y2K IN END ---------------------*/
      /*  */
      PK9REC.ZZZCHGDT = PK0WW01.PK0WWFDT; /* change date*/
      PK9REC.XXXUSRID = COMMAREA.CAUSERID;
      PK0WW01.PK0WWTIM = VGVar.currentFormattedTime;
      PK0WW01.PK0WWTHH = PK0WW01.PK0WWHH;
      PK0WW01.PK0WWTMM = PK0WW01.PK0WWMI;
      PK9REC.ZZZCHGTM = PK0WW01.PK0WWTI; /* change time*/
      PK0WW01.PK0WWFYY = PK0WM010.PK0WMKYY;
      PK0WW01.PK0WWFMM = PK0WM010.PK0WMKMM;
      PK0WW01.PK0WWFDD = PK0WM010.PK0WMKDD;
      /*  */
      /* ------------ y2k in begin ------------------*/
      /*  */
      if (PK0WW01.PK0WWFYY > 60)
        PK0WW01.PK0WWFCT = 19;
      else
        PK0WW01.PK0WWFCT = 20;
      end
      /*  */
      /* ------------ y2k in end --------------------*/
      /*  */
      PK9REC.PK9PLRDT = PK0WW01.PK0WWFDT;
      PK9REC.PK9RELDT = PK0WW01.PK0WWREL[1];
      PKZREC.PKZFUNC = "U ";
      call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
                                   /* update cust hold row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
        converseLib.validationFailed(32);
        PK0WW01.ZZZCHGCT[1] = PK0WW01.ZZZCHGCT[1] + 1;
        set PK0WM010.KUCCOID cursor;
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          converseLib.validationFailed(71); /* row not found for change*/
          set PK0WM010.KUCCOID cursor, modified, bold;
          set PK0WM010.KUMSTRID modified, bold;
          set PK0WM010.XNXCD modified, bold;
          return;
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            converseLib.validationFailed(21); /* contention for data base resorce*/
            set PK0WM010.KUCCOID cursor, modified, bold;
            set PK0WM010.KUMSTRID modified, bold;
            set PK0WM010.XNXCD modified, bold;
            return;
          else
            converseLib.validationFailed(29); /* fatal error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0I400 "; /* Process name*/
            TA1REC.TA1LOC = "UPDATE                   ";
            TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
            TA1REC.TA1TBLVU = "VCUHLD01"; /* Table viEw name*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

            return;
          end
        end
      end
    end
  end

                       /* o r d e r*/

                       /* | | | | |*/
                       /* v v v v v*/

  if (PK0WW01.PK0WWFL7 == "O") /* order being processed*/
    if (PK0WM010.PK0WMORA == "C" /* change release date*/
     || PK0WM010.PK0WMORA == "R") /* release*/
      set PKBREC empty;
      PKBREC.XWHCD = PKWREC.XWHCD;
      PKBREC.PK1CUOID = PK0WM010.PK1CUOID;
      PKBREC.PK1NORID = PK0WM010.PK1NORID;
      PKBREC.XHRCD = PK0WM010.PK0WMORR;
      /*  */
      /* ---------------- y2k out begin ------------*/
      /*  */
      /* MOVE 19 TO PK0WW01.PK0WWFCT;*/
      /* MOVE EZEDTE TO PK0WW01.PK0WWFDA;*/
      /*  */
      /* ---------------- y2k out end --------------*/
      /*  */
      /*  */
      /* ---------------- y2k in begin -------------*/
      /*  */
      PK0WW01.PK0WWFDT = VGVar.currentGregorianDate;
      /*  */
      /* ---------------- y2k in end --------------*/
      /*  */
      PKBREC.ZZZCHGCT = PK0WW01.ZZZCHGCT[1]; /* change count*/
      PKBREC.ZZZCHGDT = PK0WW01.PK0WWFDT; /* change date*/
      PKBREC.XXXUSRID = COMMAREA.CAUSERID;
      PK0WW01.PK0WWTIM = VGVar.currentFormattedTime;
      PK0WW01.PK0WWTHH = PK0WW01.PK0WWHH;
      PK0WW01.PK0WWTMM = PK0WW01.PK0WWMI;
      PKBREC.ZZZCHGTM = PK0WW01.PK0WWTI; /* change time*/
      PK0WW01.PK0WWFYY = PK0WM010.PK0WMOYY;
      PK0WW01.PK0WWFMM = PK0WM010.PK0WMOMM;
      PK0WW01.PK0WWFDD = PK0WM010.PK0WMODD;
      /*  */
      /* ------------ y2k in begin ------------------*/
      /*  */
      if (PK0WW01.PK0WWFYY > 60)
        PK0WW01.PK0WWFCT = 19;
      else
        PK0WW01.PK0WWFCT = 20;
      end
      /*  */
      /* ------------ y2k in end --------------------*/
      /*  */
      PKBREC.PKBPLRDT = PK0WW01.PK0WWFDT;
      PKBREC.PKBRELDT = PK0WW01.PK0WWREL[1];
      PKZREC.PKZFUNC = "U ";
      call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
                                   /* update order hold row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
        converseLib.validationFailed(32);
        PK0WW01.ZZZCHGCT[1] = PK0WW01.ZZZCHGCT[1] + 1;
        set PK0WM010.PK1CUOID cursor;
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          converseLib.validationFailed(72); /* row not found for delete*/
          set PK0WM010.PK1CUOID cursor, modified, bold;
          set PK0WM010.PK1NORID modified, bold;
          set PK0WM010.PK0WMORR modified, bold;
          return;
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            converseLib.validationFailed(21); /* contention for data base resorce*/
            set PK0WM010.PK1CUOID cursor, modified, bold;
            set PK0WM010.PK1NORID modified, bold;
            return;
          else
            converseLib.validationFailed(29); /* fatal error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0I400 "; /* Process name*/
            TA1REC.TA1LOC = "SELECT UNIQUE            ";
            TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
            TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/
            set PK0WM010.PK1CUOID cursor, modified, bold;
            set PK0WM010.PK1NORID modified, bold;

            return;
          end
        end
      end
    end
  end

                     /* C A R R I E R*/
                     /* | | | | | | |*/
                     /* V V V V V V V*/

  if (PK0WW01.PK0WWFL7 == "R") /* carrier being processed*/
    if (PK0WM010.PK0WMCAA == "C" /* change release date*/
     || PK0WM010.PK0WMCAA == "R") /* release*/
      set PWFREC empty;
      PWFREC.XWHCD = PKWREC.XWHCD;
      PWFREC.TF1CARCD = PK0WM010.TF1CARCD;
      PWFREC.XHRCD = PK0WM010.PK0WMCAR;
      /*  */
      /* ---------------- y2k out begin ---------------------*/
      /*  */
      /* MOVE 19 TO PK0WW01.PK0WWFCT;*/
      /* MOVE EZEDTE TO PK0WW01.PK0WWFDA;*/
      /*  */
      /* ---------------- y2k out end -----------------------*/
      /*  */
      /*  */
      /* ---------------- y2k in begin ----------------------*/
      /*  */
      PK0WW01.PK0WWFDT = VGVar.currentGregorianDate;
      /*  */
      /* ---------------- y2k in  end -----------------------*/
      /*  */
      PWFREC.ZZZCHGCT = PK0WW01.ZZZCHGCT[1]; /* change count*/
      PWFREC.ZZZCHGDT = PK0WW01.PK0WWFDT; /* change date*/
      PWFREC.XXXUSRID = COMMAREA.CAUSERID;
      PK0WW01.PK0WWTIM = VGVar.currentFormattedTime;
      PK0WW01.PK0WWTHH = PK0WW01.PK0WWHH;
      PK0WW01.PK0WWTMM = PK0WW01.PK0WWMI;
      PWFREC.ZZZCHGTM = PK0WW01.PK0WWTI; /* change time*/
      PK0WW01.PK0WWFYY = PK0WM010.PK0WMCYY;
      PK0WW01.PK0WWFMM = PK0WM010.PK0WMCMM;
      PK0WW01.PK0WWFDD = PK0WM010.PK0WMCDD;
      /*  */
      /* ------------ y2k in begin ------------------*/
      /*  */
      if (PK0WW01.PK0WWFYY > 60)
        PK0WW01.PK0WWFCT = 19;
      else
        PK0WW01.PK0WWFCT = 20;
      end
      /*  */
      /* ------------ y2k in end --------------------*/
      /*  */
      PWFREC.PKBPLRDT = PK0WW01.PK0WWFDT;
      PWFREC.PKBRELDT = PK0WW01.PK0WWREL[1];
      PKZREC.PKZFUNC = "U ";
      call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
                                   /* update carrier hold row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
        converseLib.validationFailed(32);
        PK0WW01.ZZZCHGCT[1] = PK0WW01.ZZZCHGCT[1] + 1;
        set PK0WM010.TF1CARCD cursor;
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          converseLib.validationFailed(277); /* row not found for delete*/
          set PK0WM010.TF1CARCD cursor, modified, bold;
          set PK0WM010.PK0WMCAR modified, bold;
          return;
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            converseLib.validationFailed(28); /* contention for data base resorce*/
            set PK0WM010.TF1CARCD cursor, modified, bold;
            return;
          else
            converseLib.validationFailed(29); /* fatal error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0I400 "; /* Process name*/
            TA1REC.TA1LOC = "SELECT UNIQUE            ";
            TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
            TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/
            set PK0WM010.PK1CUOID cursor, modified, bold;
            set PK0WM010.PK1NORID modified, bold;

            return;
          end
        end
      end
    end
  end

   /* ----- end pk0w400*/
end // end PK0W400

// line item update hold tables
Function PK0W410()

   /* ----- pk0w410*/
   /* ----- line item update hold tables*/

  PK0WM010.XXXERRID = "PK0W410";

                 /* C U S T O M E R*/
                 /* | | | | | | | |*/
                 /* V V V V V V V V*/

  if (PK0WW01.PK0WWFL7 == "C") /* customer being processed*/
    if (PK0WM010.PK0WMACT[PK0WWNX3] == "C" /* change release date*/
     || PK0WM010.PK0WMACT[PK0WWNX3] == "R") /* release*/
      set PK9REC empty;
      PK9REC.XWHCD = PKWREC.XWHCD; /* warehouse code*/
      PK9REC.XBCCD = PKWREC.XBCCD; /* brand code*/
      PK9REC.KUCCOID = PK0WM010.KUCCOID;
      PK9REC.KUMSTRID = PK0WM010.KUMSTRID;
      PK9REC.XNXCD = PK0WM010.XNXCD;
      PK9REC.XGPCD = "00";
      PK9REC.XHRCD = PK0WM010.PK0WMRES[PK0WWNX3];
      /*  */
      /* ------------- y2k out begin -------------------*/
      /*  */
      /* MOVE 19 TO PK0WW01.PK0WWFCT;*/
      /* MOVE EZEDTE TO PK0WW01.PK0WWFDA;*/
      /*  */
      /* ------------ y2k out end ----------------------*/
      /*  */
      /*  */
      /* ------------ y2k in begin ------------------------*/
      /*  */
      PK0WW01.PK0WWFDT = VGVar.currentGregorianDate;
      /*  */
      /* ------------ y2k in end  ----------------------*/
      /*  */
      PK9REC.ZZZCHGCT = PK0WW01.ZZZCHGCT[PK0WWNX3]; /* change count*/
      PK9REC.ZZZCHGDT = PK0WW01.PK0WWFDT; /* change date*/
      PK9REC.XXXUSRID = COMMAREA.CAUSERID;
      PK0WW01.PK0WWTIM = VGVar.currentFormattedTime;
      PK0WW01.PK0WWTHH = PK0WW01.PK0WWHH;
      PK0WW01.PK0WWTMM = PK0WW01.PK0WWMI;
      PK9REC.ZZZCHGTM = PK0WW01.PK0WWTI; /* change time*/
      PK0WW01.PK0WWFYY = PK0WM010.PK0WMPYY[PK0WWNX3];
      PK0WW01.PK0WWFMM = PK0WM010.PK0WMPMM[PK0WWNX3];
      PK0WW01.PK0WWFDD = PK0WM010.PK0WMPDD[PK0WWNX3];
      /*  */
      /* ------------ y2k in begin ---------------------*/
      /*  */
      if (PK0WW01.PK0WWFYY > 60)
        PK0WW01.PK0WWFCT = 19;
      else
        PK0WW01.PK0WWFCT = 20;
      end
      /*  */
      /* ------------ y2k in end  ----------------------*/
      /*  */
      PK9REC.PK9PLRDT = PK0WW01.PK0WWFDT;
      PK9REC.PK9RELDT = PK0WW01.PK0WWREL[PK0WWNX3];
      PKZREC.PKZFUNC = "U ";
      call "IO1790" (PKZREC, SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes}; /* update customer hold row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
        converseLib.validationFailed(32);
        PK0WW01.ZZZCHGCT[PK0WWNX3] = PK0WW01.ZZZCHGCT[PK0WWNX3] + 1;
        PK0WM010.PK0WMACT[PK0WWNX3] = " ";
        set PK0WM010.KUCCOID cursor;
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          converseLib.validationFailed(68); /* row not found for change*/
          PK0WW01.PK0WWFL9 = "Y"; /* cusrtomer error flag*/
          set PK0WM010.KUCCOID cursor, bold;
          set PK0WM010.KUMSTRID bold;
          set PK0WM010.XNXCD bold;
          set PK0WM010.PK0WMRES[PK0WWNX3] bold;
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            converseLib.validationFailed(21); /* contention for data base resorce*/
            set PK0WM010.KUCCOID cursor, bold;
            set PK0WM010.KUMSTRID bold;
            set PK0WM010.XNXCD bold;
            set PK0WM010.PK0WMRES[PK0WWNX3] bold;
          else
            converseLib.validationFailed(29); /* fatal error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0I410 "; /* Process name*/
            TA1REC.TA1LOC = "SELECT UNIQUE            ";
            TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
            TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

          end
        end
      end
    end
  end

                    /* O R D E R*/
                    /* | | | | |*/
                    /* V V V V V*/

  if (PK0WW01.PK0WWFL7 == "O") /* order being processed*/
    if (PK0WM010.PK0WMACT[PK0WWNX3] == "C" /* change release date*/
     || PK0WM010.PK0WMACT[PK0WWNX3] == "R") /* release*/
      set PKBREC empty;
      PKBREC.XWHCD = PKWREC.XWHCD;
      PKBREC.PK1CUOID = PK0WM010.PK1CUOID;
      PKBREC.PK1NORID = PK0WM010.PK1NORID;
      PKBREC.XHRCD = PK0WM010.PK0WMRES[PK0WWNX3];
      PKBREC.ZZZCHGCT = PK0WW01.ZZZCHGCT[PK0WWNX3]; /* change count*/
      /*  */
      /* ------------ y2k out begin  ----------------------*/
      /*  */
      /* MOVE 19 TO PK0WW01.PK0WWFCT;*/
      /* MOVE EZEDTE TO PK0WW01.PK0WWFDA;*/
      /*  */
      /* ------------ y2k out end ----------------------*/
      /*  */
      /*  */
      /* ------------ y2k in begin ---------------------*/
      /*  */
      PK0WW01.PK0WWFDT = VGVar.currentGregorianDate;
      /*  */
      /* ------------ y2k in end ----------------------*/
      /*  */
      PKBREC.ZZZCHGDT = PK0WW01.PK0WWFDT; /* change date*/
      PKBREC.XXXUSRID = COMMAREA.CAUSERID;
      PK0WW01.PK0WWTIM = VGVar.currentFormattedTime;
      PK0WW01.PK0WWTHH = PK0WW01.PK0WWHH;
      PK0WW01.PK0WWTMM = PK0WW01.PK0WWMI;
      PKBREC.ZZZCHGTM = PK0WW01.PK0WWTI; /* change time*/
      PK0WW01.PK0WWFYY = PK0WM010.PK0WMPYY[PK0WWNX3];
      PK0WW01.PK0WWFMM = PK0WM010.PK0WMPMM[PK0WWNX3];
      PK0WW01.PK0WWFDD = PK0WM010.PK0WMPDD[PK0WWNX3];
      /*  */
      /* ------------ y2k in begin ---------------------*/
      /*  */
      if (PK0WW01.PK0WWFYY > 60)
        PK0WW01.PK0WWFCT = 19;
      else
        PK0WW01.PK0WWFCT = 20;
      end
      /*  */
      /* ------------ y2k in end  ----------------------*/
      /*  */
      PKBREC.PKBPLRDT = PK0WW01.PK0WWFDT;
      PKBREC.PKBRELDT = PK0WW01.PK0WWREL[PK0WWNX3];
      PKZREC.PKZFUNC = "U ";
      call "IO1770" (PKZREC, SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
                                   /* update order hold row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
        converseLib.validationFailed(32);
        PK0WW01.ZZZCHGCT[PK0WWNX3] = PK0WW01.ZZZCHGCT[PK0WWNX3] + 1;
        PK0WM010.PK0WMACT[PK0WWNX3] = " ";
        set PK0WM010.PK1CUOID cursor;
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          converseLib.validationFailed(69); /* row not found for change*/
          PK0WW01.PK0WWFLD = "Y"; /* order error flag*/
          set PK0WM010.PK1CUOID cursor, bold;
          set PK0WM010.PK1NORID bold;
          set PK0WM010.PK0WMRES[PK0WWNX3] bold;
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            converseLib.validationFailed(21); /* contention for data base resorce*/
            set PK0WM010.PK1CUOID cursor, bold;
            set PK0WM010.PK1NORID bold;
            set PK0WM010.PK0WMRES[PK0WWNX3] bold;
          else
            converseLib.validationFailed(29); /* fatal error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0I410 "; /* Process name*/
            TA1REC.TA1LOC = "SELECT UNIQUE            ";
            TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
            TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

            set PK0WM010.PK1CUOID cursor, bold;
            set PK0WM010.PK1NORID bold;
            set PK0WM010.PK0WMRES[PK0WWNX3] bold;
          end
        end
      end
    end
  end

                    /* C A R R I E R*/
                    /* | | | | | | |*/
                    /* V V V V V V V*/

  if (PK0WW01.PK0WWFL7 == "R") /* carrier being processed*/
    if (PK0WM010.PK0WMACT[PK0WWNX3] == "C" /* change release date*/
     || PK0WM010.PK0WMACT[PK0WWNX3] == "R") /* release*/
      set PWFREC empty;
      PWFREC.XWHCD = PKWREC.XWHCD;
      PWFREC.TF1CARCD = PK0WM010.TF1CARCD;
      PWFREC.XHRCD = PK0WM010.PK0WMRES[PK0WWNX3];
      PWFREC.ZZZCHGCT = PK0WW01.ZZZCHGCT[PK0WWNX3]; /* change count*/
      /*  */
      /* ------------ y2k out begin --------------------*/
      /*  */
      /* MOVE 19 TO PK0WW01.PK0WWFCT;*/
      /* MOVE EZEDTE TO PK0WW01.PK0WWFDA;*/
      /*  */
      /* ------------ y2k out end ----------------------*/
      /*  */
      /*  */
      /* ------------ y2k in begin ---------------------*/
      /*  */
      PK0WW01.PK0WWFDT = VGVar.currentGregorianDate;
      /*  */
      /* ------------ y2k in end ----------------------*/
      /*  */
      PWFREC.ZZZCHGDT = PK0WW01.PK0WWFDT; /* change date*/
      PWFREC.XXXUSRID = COMMAREA.CAUSERID;
      PK0WW01.PK0WWTIM = VGVar.currentFormattedTime;
      PK0WW01.PK0WWTHH = PK0WW01.PK0WWHH;
      PK0WW01.PK0WWTMM = PK0WW01.PK0WWMI;
      PWFREC.ZZZCHGTM = PK0WW01.PK0WWTI; /* change time*/
      PK0WW01.PK0WWFYY = PK0WM010.PK0WMPYY[PK0WWNX3];
      PK0WW01.PK0WWFMM = PK0WM010.PK0WMPMM[PK0WWNX3];
      PK0WW01.PK0WWFDD = PK0WM010.PK0WMPDD[PK0WWNX3];
      /*  */
      /* ------------ y2k in begin ---------------------*/
      /*  */
      if (PK0WW01.PK0WWFYY > 60)
        PK0WW01.PK0WWFCT = 19;
      else
        PK0WW01.PK0WWFCT = 20;
      end
      /*  */
      /* ------------ y2k in end  ----------------------*/
      /*  */
      PWFREC.PKBPLRDT = PK0WW01.PK0WWFDT;
      PWFREC.PKBRELDT = PK0WW01.PK0WWREL[PK0WWNX3];
      PKZREC.PKZFUNC = "U ";
      call "IO3190" (PKZREC, SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
                                   /* update carrier hold row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
        converseLib.validationFailed(32);
        PK0WW01.ZZZCHGCT[PK0WWNX3] = PK0WW01.ZZZCHGCT[PK0WWNX3] + 1;
        PK0WM010.PK0WMACT[PK0WWNX3] = " ";
        set PK0WM010.TF1CARCD cursor;
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          converseLib.validationFailed(279); /* row not found for change*/
          PK0WW01.PK0WWFLE = "Y"; /* carrier error flag*/
          set PK0WM010.TF1CARCD cursor, bold;
          set PK0WM010.PK0WMRES[PK0WWNX3] bold;
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            converseLib.validationFailed(28); /* contention for data base resorce*/
            set PK0WM010.TF1CARCD cursor, bold;
            set PK0WM010.PK0WMRES[PK0WWNX3] bold;
          else
            converseLib.validationFailed(29); /* fatal error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "PK0I410 "; /* Process name*/
            TA1REC.TA1LOC = "SELECT UNIQUE            ";
            TA1REC.TA1MAP = "PK0IM010"; /* Map name*/
            TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
            TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

            set PK0WM010.TF1CARCD cursor, bold;
            set PK0WM010.PK0WMRES[PK0WWNX3] bold;
          end
        end
      end
    end
  end

  PK0WW01.PK0WWNX3 = PK0WW01.PK0WWNX3 - 1; /* decrement index*/

   /* ----- end pk0w410*/
end // end PK0W410

Record PK0WW01 type basicRecord
  3 PK0WWGRP PK0WWGRP ; 
    5 PK0WWCMP-CCYY1 PK0WWCMP-CCYY1 ; 
      10 PK0WWCMP-CC1 PK0WWCMP-CC1 ; 
      10 PK0WWCMP-YY1 PK0WWCMP-YY1 ; 
    5 PK0WWCMP-CCYY2 PK0WWCMP-CCYY2 ; 
      10 PK0WWCMP-CC2 PK0WWCMP-CC2 ; 
      10 PK0WWCMP-YY2 PK0WWCMP-YY2 ; 
    5 PK0WWFL1 PK0WWFL1 ; 
    5 PK0WWFL2 PK0WWFL2 ; 
    5 PK0WWFL3 PK0WWFL3 ; 
    5 PK0WWFL4 PK0WWFL4 ; 
    5 PK0WWFL5 PK0WWFL5 ; 
    5 PK0WWFL6 PK0WWFL6 ; 
    5 PK0WWFL7 PK0WWFL7 ; 
    5 PK0WWFL8 PK0WWFL8 ; 
    5 PK0WWFL9 PK0WWFL9 ; 
    5 PK0WWFLA PK0WWFLA ; 
    5 PK0WWFLB PK0WWFLB ; 
    5 PK0WWFLC PK0WWFLC ; 
    5 PK0WWFLD PK0WWFLD ; 
    5 PK0WWFLE PK0WWFLE ; 
    5 PK0WWFRM PK0WWFRM ; 
    5 PK0WWTRR PK0WWTRR ; 
    5 PK0WWNDX PK0WWNDX ; 
    5 PK0WWNX2 PK0WWNX2 ; 
    5 PK0WWNX3 PK0WWNX3 ; 
    5 PK0WWRSN PK0WWRSN ; 
    5 PK0WWBAS PK0WWBAS ; 
    5 PK0WWEND PK0WWEND ; 
    5 PK0WWDT PK0WWDT ; 
      10 PK0WWMM PK0WWMM ; 
      10 PK0WWDD PK0WWDD ; 
      10 PK0WWYY PK0WWYY ; 
    5 PK0WWFDT PK0WWFDT ; 
      10 PK0WWFCT PK0WWFCT ; 
      10 PK0WWFDA PK0WWFDA ; 
        15 PK0WWFYY PK0WWFYY ; 
        15 PK0WWFMM PK0WWFMM ; 
        15 PK0WWFDD PK0WWFDD ; 
    5 PK0WWTIM PK0WWTIM ; 
      10 PK0WWHH PK0WWHH ; 
      10 * char(1) ; 
      10 PK0WWMI PK0WWMI ; 
      10 * char(1) ; 
      10 PK0WWSS PK0WWSS ; 
    5 PK0WWTI PK0WWTI ; 
      10 PK0WWTHH PK0WWTHH ; 
      10 PK0WWTMM PK0WWTMM ; 
    5 PK0WWREL PK0WWREL [10] ; 
    5 ZZZCHGCT ZZZCHGCT [10] ; 
    5 XHRCD XHRCD [200] ; 
    5 XHRABRV XHRABRV [200] ; 
    5 XHRDESC XHRDESC [200] ; 
end // end PK0WW01

// base index (used for paging)
DataItem PK0WWBAS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp var cc-1 for comparison
DataItem PK0WWCMP-CC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp var cc-2 for comparison
DataItem PK0WWCMP-CC2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ccyy temp vari for comparison
DataItem PK0WWCMP-CCYY1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp var ccyy-2 for comparison
DataItem PK0WWCMP-CCYY2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp var yy-1 for comparison
DataItem PK0WWCMP-YY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp var yy-2 for comparison
DataItem PK0WWCMP-YY2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PK0WWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group date
DataItem PK0WWDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end index (used for paging)
DataItem PK0WWEND smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem PK0WWFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group yymmdd
DataItem PK0WWFDA num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PK0WWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group yyyymmdd
DataItem PK0WWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of vholdr01 tbl flag
DataItem PK0WWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// edit only flag
DataItem PK0WWFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// whse lookup successful flag
DataItem PK0WWFL3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table overflow flag
DataItem PK0WWFL4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selected for inquiry flag
DataItem PK0WWFL5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// valid reason code flag
DataItem PK0WWFL6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// processing customers/orders
DataItem PK0WWFL7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line items modified
DataItem PK0WWFL8 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer error flag
DataItem PK0WWFL9 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// action field error flag
DataItem PK0WWFLA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reason code error flag
DataItem PK0WWFLB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// release date error flag
DataItem PK0WWFLC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order error flag
DataItem PK0WWFLD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// carrier error flag
DataItem PK0WWFLE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PK0WWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 1st 3 bytes of cafromap
DataItem PK0WWFRM char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PK0WWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0WWGRP char(5725)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hours
DataItem PK0WWHH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minutes
DataItem PK0WWMI char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PK0WWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// general index
DataItem PK0WWNDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// second general index
DataItem PK0WWNX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// third general index
DataItem PK0WWNX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// release date
DataItem PK0WWREL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// passed reason code
DataItem PK0WWRSN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// seconds
DataItem PK0WWSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hours
DataItem PK0WWTHH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// time
DataItem PK0WWTI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group time
DataItem PK0WWTIM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minutes
DataItem PK0WWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total records read
DataItem PK0WWTRR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem PK0WWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end