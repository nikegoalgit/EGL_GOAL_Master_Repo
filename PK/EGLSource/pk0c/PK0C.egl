package pk0c;
import az.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ep.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import os.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sl.common.*;
import sm.common.*;
import sp.common.*;
import sr.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=PK0C ****
// ************************************************************
// product inquiry
// 
// overview:  this is the product inquiry screen for the
//            picking system
// 
// maintence history:
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          08/30/87  lholco  create application
//  SR#26   06/30/88  mblail  increased subscript check in
//                            pk0cs42 from 50 to 350 to match
//                            occurs in sr3rec.
//  pk104a  11/11/88  ryonke  added priority code to all maps
//          12/06/88  JWOOD   ADDED NONCSP OPTION TO CALLS
//          12/06/88  JWOOD   ADDED XSSEGTR LOGIC
//          06/02/89  jcampb  increased size of price fields in
//                            pk0cw02 and pk0cw05
//          06/13/89  jcampb  decrease run time by changing the
//                            way sr1100 array is processed
//          07/21/89  jcampb  change pk0i to pk09 for pf18 m001
//                            add pwirec for iomod io1720
//          08/01/89  jcampb  clear commarea if not xfer to
//                            this appl thru pkwrec
//          08/04/89  jcampb  fix xfer format logic
//          08/22/89  jcampb  add total cubic ft
//          08/29/89  jcampb  change "volume" to cubic on m005
//          08/02/90  esmith  increase line itm tbl
//                            occurs to 500, change limits
//                            on idxs to correspond
//          10/02/90  fwalke  change logic in pk0c921 to
//                            only update the pk4otunt field
//                            when the corresponding
//                            ordr/sched/cust number is
//                            present. (i.r pk 1107)
//          10/02/90  fwalke  change logic in pk0c050 to allow
//                            transfer for fast path.
//                                    (i.r pk 1173)
//  E#0     10/09/90  spopa   Replace XSDCD with PC2INSEG.
//          03/06/91  SBEAUC  Change SY2PRDES to SY1SSTNM on
//                            PKNREC for table change.
//          03/19/91  BGOFF   Add xeg-enfr-diff-cd, op-spcl-
//                            hndl-fl & op-spcl-labl-fl to map.
//          04/03/91  BGOFF   Add pf21 to go to a new map -
//                            pk0cm015 that displays special
//                            handling and label information.
//          06/11/91  sjohns  Table change - ylbcd to pwrlbcd.
//          08/27/91  shende  Initialized SR1REC in PK0C923.
//          08/28/91  shende  PK0CM005 wasn't allowing users
//                            users edit order number in header
//                            causing a loop.  Moved fields
//                            from map to PKYREC in PK0C230.
//          10/10/91  jcampb  table changes
//          11/20/91  DPETTI  PF3 NOW EXITS TO PK0J
//          02/20/92  GRAY    Remove YLBTBL and install PWRREC.
//  FIX     03/18/92  SHENDE  Rename reference to SY2PRDES to
//                            SY1SSTNM, which is the value that
//                            is being moved into the field.
//  pk0000  06/25/92  sjohns  table changes.
//  pk0000  03/03/94  mpluth  table changes. increased the size
//                            of op-avg-unit-price in pk0cw02.
//  pk0000  05/11/94  hchapm  increase # line items to 900
//  CANADA  08/11/95  CBRINE  modified to call SY2000 (PK0C924)
//                            Added XCTCD TO PKWREC.  Added
//                            currency code to map.
//  CANADA  04/04/96  PJAMES  Correction for Canada SY2000.
//                            Move warehouse table xctcd to
//                            pkwrec.
//  asn     02/26/98  dkesle  show expected weight on screen
//                            when pick-stat-fl NE 'y'
//  retroft 06/08/98  dtayl5  updates to show allocation nbr
//                            when warehouse = 51
//  retroft 12/01/98  OVAZQU  for whse 51 show orders from
//                            both Order Pool & Mirror Pool
//  retroft 12/14/98  KDENNE  When displaying the Mirror pool
//                            status, use the dcms-stat-chng-dt
//                            instead of zz-sdt for date.
//  tt10590 02/27/01 snara2  size index increased to 80.
//  dlvrusa 03/20/01  rnunna  modified to show if an order is
//                            Goods Issued or not.
//                            PK0CM005,PK0CW05,PK0C101,PK0C202
// ************************************************************
// *********************
Program PK0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AZWREC AZWREC; // record
  COMMAREA COMMAREA ; // record
  EPAREC EPAREC; // record
  EPIREC EPIREC; // record
  ERRSQLCA ERRSQLCA; // record
  PK0CW01 PK0CW01; // record
  PK0CW02 PK0CW02; // record
  PK0CW04 PK0CW04; // record
  PK0CW05 PK0CW05; // record
  PK4REC PK4REC; // record
  PK5REC PK5REC; // record
  PK6REC PK6REC; // record
  PKFREC PKFREC; // record
  PKIREC PKIREC; // record
  PKNREC PKNREC; // record
  PKWREC PKWREC; // record
  PKXREC PKXREC; // record
  PKYREC PKYREC; // record
  PWIREC PWIREC; // record
  PWPREC PWPREC; // record
  PWRREC PWRREC; // record
  SQLCA SQLCA; // record
  SR1REC SR1REC; // record
  SR2REC SR2REC; // record
  SR3REC SR3REC; // record
  SY1REC SY1REC; // record
  SY4REC SY4REC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  VMPOLH01 VMPOLH01; // record
  VMPOLI01 VMPOLI01; // record
  WSY2000 WSY2000; // record
  XSPKW01 XSPKW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XHDTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use PK0CM.PK0CM001,  // forms
      PK0CM.PK0CM005, 
      PK0CM.PK0CM010, 
      PK0CM.PK0CM015
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PK0C000: PK0C000();
    exit program;
  end // end main
end // end PK0C

// Select count from Mirror Pool
Function PK0C-VMPOLH01-SC()
   /* -----------------------------------------------------------------*/
   /* Select COUNT from the Picking Mirror Order Pool. If not found,*/
   /* no orders exist on the Mirror Pool Database. If any error,*/
   /* indicate a system error.*/
   /* -----------------------------------------------------------------*/

  set EPIREC empty;
  set VMPOLH01 empty;

  VMPOLH01.XWH-WHSE-CD = PK0CW01.XWHCD;
  VMPOLH01.PK-ORD-STKTF-ID = PK0CW01.PK1CUOID;

  if (PK0CW01.PK1NORID == 0)
    VMPOLH01.PK-NIKE-ORD-ID = -1;
  else
    VMPOLH01.PK-NIKE-ORD-ID = PK0CW01.PK1NORID;
  end

  if (PK0CW01.PK1ALLNB == 0)
    VMPOLH01.PK-NBR-TIMES-ALOC = -1;
  else
    VMPOLH01.PK-NBR-TIMES-ALOC = PK0CW01.PK1ALLNB;
  end

  EPI-DCMS-ORD-STAT-CD1 = "A";
  EPI-DCMS-ORD-STAT-CD2 = "P";
  EPI-DCMS-ORD-STAT-CD3 = "R";
  EPI-DCMS-ORD-STAT-CD4 = "S";

  EPIREC.EPI-IO-TASK = "T1";
  call "VMPOLH01" (EPIREC, SQLCA, VMPOLH01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 100) /* No order header was found*/

    EPIREC.EPI-PK-ORD-CNT = 0;
    return;

  end

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)

      converseLib.validationFailed(28);
      TA1REC.TA1FUNC = "POST";

    else

      converseLib.validationFailed(29);
      TA1REC.TA1FUNC = "RETN";

    end

    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1PGMNM = "PK0C-VMPOLH01-SC";
    TA1REC.TA1LOC = "SELECT COUNT FROM MIRROR POOL";
    TA1REC.TA1MAP = "PK0CM001";
    TA1REC.TA1DBASE = "DPICK  ";
    TA1REC.TA1TBLVU = "VMPOLH01";
    TA1REC.TA1TBLKE = VMPOLH01-KEY;

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};

    PK0CM001.XXXERRID = "PK0C101";
    return;

  end

end // end PK0C-VMPOLH01-SC
// application main logic
Function PK0C000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   xsentry checks to ensure that this application was    **/
   /* *         entered from another csp application.           **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  COMMAREA.CACURRAP = "PK0C";

  PK0C001(); /* initilize the application*/

  PK0CW01.PK0CWEOA = "N";
   /* set end-of-application flag to 'no'*/

  while (PK0CW01.PK0CWEOA == "N") /* while not end-of-aplication*/
    PK0C050(); /* process the application screen(s)*/
  end

  PK0C060(); /* exit this application*/
end // end PK0C000

// initialize application
Function PK0C001()
   /* ************************************************************/
   /* *      initialize the application working storage         **/
   /* *                                                         **/
   /* ************************************************************/

   /* ------------------------------------------------------------*/
   /* initialize working storage areas.*/
   /* ------------------------------------------------------------*/
  set PK0CM005 initial;
  set SQLCA empty;
  set PK0CW01 empty; /* clear out storage for pk0c*/
  set PK0CW02 empty;
                                   /* clear out storage for layout of array*/
  set PK0CW04 empty; /* clear out storage for quantities*/
  set PK0CW05 empty;
  set PKYREC empty;
  set PKWREC empty;
  set EPAREC empty;
  PK0CW01.PK0CWSFM = "N"; /* don't show first map*/
  PK0CW01.PK0CWFST = "Y"; /* first time thru flag*/

  XSENTRY(); /* Application entry validation*/

  XSSEGTR(); /* SET SEGMENTED TRANS ID*/

  if (COMMAREA.CAFROMAP != COMMAREA.CACURRAP) /* Application has changed*/

    if (COMMAREA.CAFRMSYS == "PK" /* Came from within the PICKING system*/
     || COMMAREA.CAFRMSYS == "PW" /* or the Wilsonville subsystem*/
    )                            
      PKWREC.PKWGRPLV = COMMAREA.CAUSERA; /* Restore work record*/
      EPAREC.EPAARRAY = COMMAREA.CA-USER-WORKAREA-2K-B;
      PK0CW01.PK0CW05X = 1; /* index for orders array*/

    else

      if (COMMAREA.CAFROMAP == "AZ0K")

        AZWREC.AZWGROUP = COMMAREA.CAUSERA; /* Restore work record*/
        PK0CW01.PK0CW05X = AZWREC.AZWSELXN;
        PKWREC.PKWGRPLV = COMMAREA.CA-USER-WORKAREA-2K-B;
        PK0CW05.PK0CW5RC = COMMAREA.CA-USER-WORKAREA-2K-C;
        PK0CW01.PK0CWFST = "N";
        PK0CWYIX = 1;
        while (PK0CWYIX <= 30)
          PK0CW05.PK0CWTPR[PK0CWYIX] = 0;
          PK0CWYIX = PK0CWYIX + 1;
        end

      else

        set EPAREC empty;
        set PKWREC empty; /* Clear work record area*/
        PKWREC.XWHCD = COMMAREA.XWHCD; /* Set initial warehouse code*/
        PK0CW01.PK0CW05X = 1; /* index for orders array*/

      end

    end

    VGVar.handleHardIOErrors = 1;
    converseVar.commitOnConverse = 1;

  end

   /* ------------------------------------------------------------*/
   /* if an inquiry keys array exists, see if it was orders from*/
   /* this application that were selected for inquiry.  save the*/
   /* information so that the display may be reestablished.*/
   /* ------------------------------------------------------------*/

  PK0CW01.PK0CWCT1 = 1;
  PK0CW01.PK0CWYCT = 1;
  if (PKWREC.PKWINDEX > 0)
    PKWINDEX = 1; /* limit inquiry to 30 orders*/
    if (PKWREC.PKWSLTYP[PKWINDEX] == "M" /* have key from menu*/
     || PKWREC.PKWSLTYP[PKWINDEX] == "S" /* have key from somewhere else*/
     || PKWREC.PKWFRMAP == "PK0C")      
       /* format key array*/
      PKYREC.PKWARRAY = PKWREC.PKWARRAY[PKWINDEX];
      EPAREC.EPAARRAY = COMMAREA.CA-USER-WORKAREA-2K-B;
      PK0CW05.PK0CWTPR[1] = 0;
      if (PKYREC.PK1CUOID[1] != 0 /* if data in array*/
       || EPAREC.PK1CUOID[1] != 0)
        PK0CW01.PK0CWFST = "N"; /* no really first time thru*/
        PK0CW01.PK0CWSFM = "N"; /* don't show first map*/
        if (EPAREC.PK1CUOID[1] != 0)
          while (PK0CW01.PK0CWYCT <= 30
           && EPAREC.PK1CUOID[PK0CWYCT] != 0)
            PK0CW01.PK0CWYCT = PK0CW01.PK0CWYCT + 1;
          end
        else
          while (PK0CW01.PK0CWYCT <= 30 /* count entries*/
           && PKYREC.PK1CUOID[PK0CWYCT] != 0)
            PK0CW01.PK0CWYCT = PK0CW01.PK0CWYCT + 1;

          end
        end
      end
    else
      PKWREC.PKWINDEX = 0;
      PKWREC.PKWCNTRL = " ";
    end
    if (PKWREC.PKWFRMAP == "PK0C")
      PKWREC.PKWINDEX = 0; /* pkwrec initiated in this pgm*/
      set PKYREC empty;
      set EPAREC empty;
    end
  end

  PK0CW01.PK0CWYIX = 1;
  PK0CW01.PK0CWYCT = PK0CW01.PK0CWYCT - 1;
  if (PK0CW01.PK0CWYCT == 0)
    PK0CW01.PK0CWYIX = 0;
  end

  PK0CWHDR = " "; /* set header sw off*/
  PK0CW01.XWHCD = PKWREC.XWHCD; /* inital warehouse code*/
  PK0CW01.XWHABRV = PKWREC.XWHABRV; /* and warehouse abbreviation*/

   /* ------------------------------------------------------------*/
         /* the following seven lines refer to data held*/
         /* for one screen*/

   /* initialize the screen names*/
   /* set maximum lines on a screen*/
    /* for loading the db information*/
   /* set maximum size for array*/
   /* last filled row in array*/
   /* set need-to-build-screen to yes*/
   /* set need-to-build-array to yes*/
   /* ------------------------------------------------------------*/

  PK0CW01.PK0CWSCN[1] = "PK0CM001";
  PK0CW01.PK0CWMXL[1] = 16;
  PK0CW01.PK0CWA1X[1] = 1;
  PK0CW01.PK0CWMAR[1] = 48;
  PK0CW01.PK0CWLSX[1] = 0;
  PK0CW01.PK0CWBLS[1] = "Y";
  PK0CW01.PK0CWBLA[1] = "Y";

  PK0CW01.PK0CWSCN[2] = "PK0CM005";
  PK0CW01.PK0CWMXL[2] = 11;
  PK0CW01.PK0CWA1X[2] = 1;
  PK0CW01.PK0CWMAR[2] = 900;
  PK0CW01.PK0CWLSX[2] = 0;
  PK0CW01.PK0CWBLS[2] = "Y";
  PK0CW01.PK0CWBLA[2] = "Y";

  PK0CW01.PK0CWSCN[3] = "PK0CM010";
  PK0CW01.PK0CWMXL[3] = 10;
  PK0CW01.PK0CWA1X[3] = 1;
  PK0CW01.PK0CWMAR[3] = 40;
  PK0CW01.PK0CWLSX[3] = 0;
  PK0CW01.PK0CWBLS[3] = "Y";
  PK0CW01.PK0CWBLA[3] = "Y";

  PK0CW01.PK0CWSCN[4] = "PK0CM015";
  PK0CW01.PK0CWMXL[4] = 10;
  PK0CW01.PK0CWA1X[4] = 1;
  PK0CW01.PK0CWMAR[4] = 40;
  PK0CW01.PK0CWLSX[4] = 0;
  PK0CW01.PK0CWBLS[4] = "Y";
  PK0CW01.PK0CWBLA[4] = "Y";

  PK0CW01.PK0CWARX = 1; /* generic array index*/
  PK0CW01.PK0CWLNX = 1; /* generic screen-lineindex*/

  PK0CW01.PK0CWERR = "N"; /* init error flag to 'no'*/

end // end PK0C001

// obtain header info
Function PK0C003()
   /* *************************************************************/
   /* * THIS PROCESS OBTAINS HEADER INFORMATION FOR MAP PK0CM005*/
   /* * THAT WAS NOT PASSED TO THIS PROGRAM FROM ANOTHER PROGRAM*/
   /* *************************************************************/

  PK0CW01.PK1ALLNB = PK0CW05.PK1ALLNB[PK0CW05X];

  PK0CW01.PK0CW-DCMS-SEL-FL = "N";
  if (PK0CW01.XWHCD == "51")
    PK0C-VMPOLH01-SC();
    if (EPIREC.EPI-PK-ORD-CNT > 0)
      PK0CW01.PK0CW-DCMS-SEL-FL = "Y";
    end
  end

  PK0CW01.PK1CUOID = PK0CW05.PK1CUOID[PK0CW05X];
  PK0CW01.PK1NORID = PK0CW05.PK1NORID[PK0CW05X];
  PK0CW01.PK1PKSCH = PK0CW05.PK1PKSCH[PK0CW05X];
  PK0CW01.XWHCD = PK0CW05.XWHCD[PK0CW05X];
  PK0CWHDR = "Y"; /* set header sw on*/

      /* read picking data for header information*/

  PK0C917(); /* select set from picking*/

  if (converseVar.validationMsgNum == 0) /* no errors found*/
    while (SQLCA.VAGen_SQLCODE == 0)
      PK0C918(); /* fetch the next row*/
    end
  end

  PK0C919(); /* close set*/

  if (converseVar.validationMsgNum != 0)
    return;
  end

      /* read picking data for Mirror Pool header information*/

  if (PK0CW01.PK0CW-DCMS-SEL-FL == "Y")

    PK0C917-MP(); /* select set from Mirror Pool*/

    if (converseVar.validationMsgNum == 0) /* no errors found*/
      while (SQLCA.VAGen_SQLCODE == 0)
        PK0C918-MP(); /* fetch*/
      end
    end

    PK0C919-MP(); /* close set*/

    if (converseVar.validationMsgNum != 0)
      return;
    end
  end

   /* read shiprec data for header information*/

  PK0C920(); /* select set from shiprec*/

  if (converseVar.validationMsgNum == 0) /* no errors found*/
    while (SQLCA.VAGen_SQLCODE == 0)
      PK0C921(); /* fetch the next row*/
    end
  end

  PK0C922(); /* close set*/

end // end PK0C003

// main pk0c branch control
Function PK0C050()
   /* ************************************************************/
   /* *    process the application screen(s)                    **/
   /* *                                                         **/
   /* *  note that this process being performed in a            **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/

  if (PK0CW01.PK0CWYIX <= PK0CW01.PK0CWYCT)
    PK0CS50();
    PK0CW01.PK0CWYIX = PK0CW01.PK0CWYIX + 1;
  end

  PK0CS55(); /* set up for screen*/
  if (PK0CW01.PK0CWSCX == 1) /* if screen pk0cm001*/
    while (PK0CW01.PK0CWEOS == "N") /* while not end-of-screen*/
      PK0C100(); /* process screen pk0cm001*/
    end
  end

  PK0CS55(); /* set up for screen*/
  if (PK0CW01.PK0CWSCX == 2) /* if screen pk0cm005*/
    while (PK0CW01.PK0CWEOS == "N") /* while not end-of-screen*/
      PK0C200(); /* process screen pk0cm005*/
    end
  end

  PK0CS55(); /* set up for screen*/
  if (PK0CW01.PK0CWSCX == 3) /* if screen pk0cm010*/
    while (PK0CW01.PK0CWEOS == "N") /* while not end-of-screen*/
      PK0C300(); /* process screen pk0cm010*/
    end
  end

  PK0CS55(); /* set up for screen*/
  if (PK0CW01.PK0CWSCX == 4) /* if screen pk0cm015*/
    while (PK0CW01.PK0CWEOS == "N") /* while not end-of-screen*/
      PK0C400(); /* process screen pk0cm015*/
    end
  end

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf3)
    if (PKWREC.PKWINDEX > 0)
      if (converseVar.eventKey is pf3)
        PKWREC.PKWARRAY = PKYREC.PKWARRAY;
        COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
        COMMAREA.CA-USER-WORKAREA-2K-B = EPAREC.EPAARRAY;
        COMMAREA.CATOAP = PKWREC.PKWFRMAP;
        XSEXIT();
      end
      if (PK0CW01.PK0CWYIX > PK0CW01.PK0CWYCT)
        if (PKWREC.PKWSLTYP[PKWINDEX] == "S")
          PKWREC.PKWARRAY = PKYREC.PKWARRAY;
          COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
          COMMAREA.CA-USER-WORKAREA-2K-B = EPAREC.EPAARRAY;
          XSEXIT();
        else
          PKWREC.PKWINDEX = 0;
          PKWREC.PKWSLTYP = " ";
        end
      end
    end
  end

   /* at this point;*/
       /* if the end-of-application flag (pk0cweoa) = 'n'*/
           /* we go back to the top of pk0%050...*/
       /* if the end-of-application flag (pk0cweoa) = 'y'*/
           /* we return to pk0%000.*/

end // end PK0C050

// exit pk0c
Function PK0C060()
   /* ************************************************************/
   /* *    exit application*/
   /* *                                                         **/
   /* ************************************************************/

  if (COMMAREA.CATOAP == "AZ0K")
    AZWREC.AZWSELXN = PK0CW01.PK0CW05X;
    COMMAREA.CAUSERA = AZWREC.AZWGROUP;
    COMMAREA.CA-USER-WORKAREA-2K-B = PKWREC.PKWGRPLV;
    COMMAREA.CA-USER-WORKAREA-2K-C = PK0CW05.PK0CW5RC;
  else
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* commarea user area*/
    COMMAREA.CA-USER-WORKAREA-2K-B = EPAREC.EPAARRAY;
  end

  XSEXIT();

  PK0CM005.VAGen_EZEMSG = COMMAREA.CAMSG; /* returned error message*/

  converseLib.validationFailed(); /* force alarm to sound*/
  PK0CM005.XXXERRID = "PK0C060"; /* error location*/

  PK0C200(); /* display screen to show error*/

end // end PK0C060

// converse screen m001
Function PK0C100()
   /* ************************************************************/
   /* *    process screen pk0cm001                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from pk0c050 until the end-of-screen   **/
   /* *     flag (pk0cweos) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/

  if (PK0CW01.PK0CWBLA[PK0CWSCX] == "Y") /* need to build array*/
    PK0C101(); /* build array*/
    PK0CW01.PK0CWBLA[PK0CWSCX] = "N";
  end

  if (PK0CW01.PK0CWEOS == "Y") /* don't show this screen*/
    return;
  end

  if (converseVar.validationMsgNum == 0
   && PK0CW01.PK0CWBLS[PK0CWSCX] == "Y")
                                   /* screen has no data in its body*/
    PK0C105(); /* fill it with data*/
    PK0CW01.PK0CWBLS[PK0CWSCX] = "N";
  end

   /* ***********************************************************/
  converse PK0CM001 ;
   /* ***********************************************************/

  PK0CW01.PK0CWERR = "N"; /* reset error flag*/

  PK0C110(); /* handle any special entries*/
       /* may exit appl from this process*/

  PK0CW01.PK0CWLNX = 16;
  while (PK0CW01.PK0CWLNX > 0) /* edit from line 16 to line 1*/
    PK0C120(); /* go process screen entries*/
    PK0CW01.PK0CWLNX = PK0CW01.PK0CWLNX - 1;
  end

  if (PK0CW01.PK0CWERR == "N")
    PK0CW01.PK0CWSFM = "Y"; /* it's okay to show first map on pf3/enter*/
    PK0CW01.PK0CWLNX = 1;
    PK0CW01.PK0CWARX = PK0CW01.PK0CWA1X[PK0CWSCX];
    while (PK0CW01.PK0CWLNX <= PK0CW01.PK0CWMXL[PK0CWSCX])
                                  /* LOOK AT LINES ON SCREEN*/
      if (PK0CM001.PK0CMSEL[PK0CWLNX] == "S") /* select order*/
        PK0CW01.PK0CWCSC = "PK0CM005"; /* go to product screen*/
        PK0CW05.PK0CMSEL[PK0CWARX] = "S";
      end
      PK0CW01.PK0CWLNX = PK0CW01.PK0CWLNX + 1; /* increment counter*/
      PK0CW01.PK0CWARX = PK0CW01.PK0CWARX + 1; /* increment counter*/
    end
  end

    /* process pf keys*/

  if (PK0CW01.PK0CWERR == "N") /* if there were no map errors*/
    PK0C115(); /* process pfkeys*/
  end

   /* at this point;*/
     /* if the end-of-screen flag (pk0cweos) is 'n'*/
        /* we go back to top of process pk0%100.*/
     /* if the end-of-screen flag (pk0cweos) is 'y'*/
        /* we return to pk0%050.*/

end // end PK0C100

// build array for pk0cm001
Function PK0C101()
   /* ************************************************************/
   /* *      this process builds the array for screen pk0cm001*/
   /* ************************************************************/

  if (PK0CW01.PK0CWFST == "Y") /* if first time thru*/
    PK0CW01.PK0CWFST = "N";
  end

    /* move passed data to hold area*/
  PK0CW01.XWHCD = PK0CW05.XWHCD[1];
  PK0CW01.PK1CUOID = PK0CW05.PK1CUOID[1];
  PK0CW01.PK1NORID = PK0CW05.PK1NORID[1];
  PK0CW01.XPPCD = PK0CW05.XPPCD[1];
  PK0CW01.PK1PKSCH = PK0CW05.PK1PKSCH[1];
  PK0CW01.PK1ALLNB = PK0CW05.PK1ALLNB[1];
  set PK0CW05 empty;

  PK0CW01.PK0CW-DCMS-SEL-FL = "N";
  if (PK0CW01.XWHCD == "51")
    PK0C-VMPOLH01-SC();
    if (EPIREC.EPI-PK-ORD-CNT > 0)
      PK0CW01.PK0CW-DCMS-SEL-FL = "Y";
    end
  end

  PK0CW01.PK0CW05X = 0;

       /* read picking data for array*/

  PK0C917(); /* select set from picking*/

  if (converseVar.validationMsgNum == 0) /* no errors so far*/
    while (SQLCA.VAGen_SQLCODE == 0
     && PK0CW01.PK0CW05X < 30)

      PK0CW01.PK0CW05X = PK0CW01.PK0CW05X + 1; /* increment array index*/
      /* dlvrusa start*/

      PK0CW05.GOODS-ISS-FL[PK0CW05X] = "N";

      /* dlvrusa end*/

      PK0C918(); /* select set from picking*/
      if (SQLCA.VAGen_SQLCODE == 100) /* found e-o-f*/
        PK0CW01.PK0CW05X = PK0CW01.PK0CW05X - 1; /* index is too large*/
      end
    end
  end

  PK0C919(); /* close set*/

  if (converseVar.validationMsgNum != 0) /* errors found*/
    return;
  end

       /* read Mirror Pool data for array*/

  if (PK0CW01.PK0CW-DCMS-SEL-FL == "Y")

    PK0C917-MP(); /* select set from Mirror Pool*/

    if (converseVar.validationMsgNum == 0) /* no errors so far*/
      while (SQLCA.VAGen_SQLCODE == 0
       && PK0CW01.PK0CW05X < 30)

        PK0CW01.PK0CW05X = PK0CW01.PK0CW05X + 1; /* increment array index*/
        PK0C918-MP(); /* select set from Mirror Pool*/
        if (SQLCA.VAGen_SQLCODE == 100) /* found e-o-f*/
          PK0CW01.PK0CW05X = PK0CW01.PK0CW05X - 1; /* index is too large*/
        end
      end
    end

    PK0C919-MP(); /* close set*/

    if (converseVar.validationMsgNum != 0) /* errors found*/
      return;
    end
  end

       /* read shiprec data for array*/

  PK0C920(); /* select set from shiprec*/

  if (converseVar.validationMsgNum == 0) /* no errors so far*/
    while (SQLCA.VAGen_SQLCODE == 0
     && PK0CW01.PK0CW05X < 30)

      PK0CW01.PK0CW05X = PK0CW01.PK0CW05X + 1; /* increment array index*/
      PK0C921(); /* select set from shiprec*/
      /* dlvrusa start*/

      if (SQLCA.VAGen_SQLCODE == 0) /* NO ERRORS*/
        PK0CW05.GOODS-ISS-FL[PK0CW05X] = SR2REC.SR2UIVCF;
      end

      /* dlvrusa end*/
      if (SQLCA.VAGen_SQLCODE == 100) /* found e-o-f*/
        PK0CW01.PK0CW05X = PK0CW01.PK0CW05X - 1; /* index is too large*/
      end
    end
  end

  PK0C922(); /* close set*/

  if (converseVar.validationMsgNum != 0) /* errors found*/
    return;
  end

   /* if no orders were found, show error message on pk0cm005*/
   /* if one order was found, go to pk0cm005*/
   /* if many orders were found, show pk0cm001*/

  if (PK0CW01.PK0CW05X == 0)
    converseLib.validationFailed(11); /* no data was found for this order nbr*/
    set PK0CM005 empty;
    PK0CM005.XWHCD = PK0CW01.XWHCD; /* move key fields back onto map*/
    PK0CM005.XWHABRV = PK0CW01.XWHABRV;
    PK0CM005.PK1CUOID = PK0CW01.PK1CUOID;
    PK0CM005.PK1NORID = PK0CW01.PK1NORID;
    PK0CM005.PK1PKSCH = PK0CW01.PK1PKSCH;
    PK0CM005.PK1ALLNB = PK0CW01.PK1ALLNB;
    PK0CM005.XXXCURDT = VGVar.currentShortGregorianDate;
    PK0CM005.XXXERRID = "PK0C101";
    set PK0CM005.PK1CUOID cursor, bold;
    set PK0CM005.PK1NORID bold;
    PK0CW01.PK0CWCSC = "PK0CM005";
    PK0CW01.PK0CWEOS = "Y"; /* it is end of this screen*/
  else
    if (PK0CW01.PK0CW05X == 1)
      PK0CW01.PK0CWCSC = "PK0CM005";
      PK0CW01.PK0CWEOS = "Y"; /* it is end of this screen*/
    end
  end

  PK0CW01.PK0CWLSX[PK0CWSCX] = PK0CW01.PK0CW05X;

end // end PK0C101

// build screen pk0cm001
Function PK0C105()
   /* ************************************************************/
   /* *      this process builds headings*/
   /* ************************************************************/

  set PK0CM001 initial;

  if (PK0CW01.XWHCD == "51")
    PK0CM001.PK0CM-SCHED-ID-LIT = "MANIFEST ID";
  else
    PK0CM001.PK0CM-SCHED-ID-LIT = "SCHEDULE";
  end

  if (PK0CM001.XXXERRID == " ")
    PK0CM001.XXXERRID = "PK0CM";
  end
  PK0CM001.XXXCURDT = VGVar.currentShortGregorianDate;
  PK0CM001.XXXRVNBR = "00";

  if (PK0CW05.XWHCD[1] != PK0CW01.XWHCD) /* if warehouse code changed*/
    PK0CW01.XWHCD = PK0CW05.XWHCD[PK0CW05X];
  end
  PK0CM001.XWHCD = PK0CW01.XWHCD;

  if (PK0CW01.XWHABRV == " ") /* if no abreviation*/
    if (PK0CM001.XWHCD in XWHTBL.XWHCD /* if code is in the table*/
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and it is active*/
      PK0CW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      PK0CM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      PK0CM001.XWHABRV = " ";
    end
  end
  PK0CM001.XWHABRV = PK0CW01.XWHABRV;

  PK0CW01.PK0CWLNX = 1;
  PK0CW01.PK0CWARX = PK0CW01.PK0CWA1X[PK0CWSCX];

  while (PK0CW01.PK0CWLNX <= PK0CW01.PK0CWMXL[PK0CWSCX])
    PK0C107(); /* clear each screen line*/
    PK0CW01.PK0CWLNX = PK0CW01.PK0CWLNX + 1;
    PK0CW01.PK0CWARX = PK0CW01.PK0CWARX + 1;
  end

  PK0CW01.PK0CWLNX = 1;
  PK0CW01.PK0CWARX = PK0CW01.PK0CWA1X[PK0CWSCX];

  while (PK0CW01.PK0CWLNX <= PK0CW01.PK0CWMXL[PK0CWSCX])
    PK0C106(); /* build each screen line*/
    PK0CW01.PK0CWLNX = PK0CW01.PK0CWLNX + 1;
    PK0CW01.PK0CWARX = PK0CW01.PK0CWARX + 1;
  end

end // end PK0C105

// build screen lines for m001
Function PK0C106()
   /* ************************************************************/
   /* *                                                         **/
   /* *   take data from the database array and place           **/
   /* *   onto the screen one line at a time.                   **/
   /* ************************************************************/

  if (PK0CW01.PK0CWARX <= PK0CW01.PK0CWLSX[PK0CWSCX])
    PK0CM001.PK0CMSEL[PK0CWLNX] = PK0CW05.PK0CMSEL[PK0CWARX];
    PK0CM001.PK1CUOID[PK0CWLNX] = PK0CW05.PK1CUOID[PK0CWARX];
    PK0CM001.PK1NORID[PK0CWLNX] = PK0CW05.PK1NORID[PK0CWARX];
    PK0CM001.XPPCD[PK0CWLNX] = PK0CW05.XPPCD[PK0CWARX];
    PK0CM001.PK1PKSCH[PK0CWLNX] = PK0CW05.PK1PKSCH[PK0CWARX];
    PK0CM001.PK0CMDTL[PK0CWLNX] = PK0CW05.PK0CMDTL[PK0CWARX];
    PK0CM001.SR1PKSDT[PK0CWLNX] = PK0CW05.SR1PKSDT[PK0CWARX];
    PK0CM001.PK4OTUNT[PK0CWLNX] = PK0CW05.PK4OTUNT[PK0CWARX];
    set PK0CM001.PK0CMONP[PK0CWLNX] skip;
    if (PK0CW01.PK0CWLNX == 1)
      set PK0CM001.PK0CMSEL[PK0CWLNX] cursor, normal;
    else
      set PK0CM001.PK0CMSEL[PK0CWLNX] normal;
    end
    if (PK0CW05.PK1ALLNB[PK0CWARX] != 0)
      PK0CM001.PK1ALLNB[PK0CWLNX] = PK0CW05.PK1ALLNB[PK0CWARX];
    end

    set PK0CM001.PK1ALLNB[PK0CWLNX] initialAttributes;
    set PK0CM001.PK0CMORP[PK0CWLNX] initialAttributes;
    set PK0CM001.PK0CMDTL[PK0CWARX] initialAttributes;

    if (PK0CW01.XWHCD == "51")
      set PK0CM001.PK1ALLNB[PK0CWLNX] skip;
      set PK0CM001.PK0CMORP[PK0CWLNX] skip;
    end

    if (PK0CW05.DCMS-ERROR-FL[PK0CWARX] == "Y")
      set PK0CM001.PK0CMDTL[PK0CWARX] skip, red;
    end
  end

end // end PK0C106

// clear screen lines for m001
Function PK0C107()
   /* ************************************************************/
   /* *   clear each screen line*/
   /* ************************************************************/

  set PK0CM001.PK1ALLNB[PK0CWLNX] initialAttributes;
  set PK0CM001.PK0CMORP[PK0CWLNX] initialAttributes;
  set PK0CM001.PK0CMDTL[PK0CWLNX] initialAttributes;

  if (PK0CW01.PK0CWARX <= PK0CW01.PK0CWLSX[PK0CWSCX])
    PK0CM001.PK0CMSEL[PK0CWLNX] = " ";
    PK0CM001.PK1CUOID[PK0CWLNX] = 0;
    PK0CM001.PK1NORID[PK0CWLNX] = 0;
    PK0CM001.XPPCD[PK0CWLNX] = " ";
    PK0CM001.PK1PKSCH[PK0CWLNX] = 0;
    PK0CM001.PK0CMDTL[PK0CWLNX] = " ";
    PK0CM001.SR1PKSDT[PK0CWLNX] = 0;
    PK0CM001.PK4OTUNT[PK0CWLNX] = 0;
    set PK0CM001.PK0CMSEL[PK0CWLNX] initialAttributes;
    set PK0CM001.PK0CMONP[PK0CWLNX] initialAttributes;
  else
    PK0CM001.PK0CMSEL[PK0CWLNX] = " ";
    PK0CM001.PK0CMDTL[PK0CWLNX] = " ";
    PK0CM001.SR1PKSDT[PK0CWLNX] = 0;
    PK0CM001.PK4OTUNT[PK0CWLNX] = 0;
    set PK0CM001.PK0CMSEL[PK0CWLNX] initialAttributes;
    set PK0CM001.PK0CMONP[PK0CWLNX] initialAttributes;
  end

end // end PK0C107

// handle screen m001 pfkeys
Function PK0C110()
   /* ***********************************************************/
   /* *  check pf keys entry, or Option/item entry.            **/
   /* ***********************************************************/

  PK0CW01.PK0CWKEY = " "; /* init flag that tells to build array*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    return;
  end

  if (PKWREC.PKWINDEX > 0)
    if (converseVar.eventKey is pf3)
      PKWREC.PKWARRAY = PKYREC.PKWARRAY;
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
      COMMAREA.CATOAP = PKWREC.PKWFRMAP;
      PK0CW01.PK0CWERR = "Y";
      PK0CW01.PK0CWEOS = "Y";
      PK0CW01.PK0CWEOA = "Y";
      COMMAREA.CA-USER-WORKAREA-2K-B = EPAREC.EPAARRAY;
      return;
    end
  end

  if (converseVar.eventKey is pf1)
    XSPF1();
    return;
  end

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "PK0J";
    PK0CW01.PK0CWERR = "Y";
    PK0CW01.PK0CWEOS = "Y";
    PK0CW01.PK0CWEOA = "Y";
    return;
  end

  if (converseVar.eventKey is pf4)
    XSPF4();
    return;
  end

  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "PK0B";
    PK0CW01.PK0CWERR = "Y";
    PK0CW01.PK0CWEOS = "Y";
    PK0CW01.PK0CWEOA = "Y";
    PK0CS60(); /* format inquiry key array*/
    return;
  end

  if (converseVar.eventKey is pf15)
    COMMAREA.CATOAP = "PK0D";
    PK0CW01.PK0CWERR = "Y";
    PK0CW01.PK0CWEOS = "Y";
    PK0CW01.PK0CWEOA = "Y";
    return;
  end

  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "PK0Z";
    PK0CW01.PK0CWERR = "Y";
    PK0CW01.PK0CWEOS = "Y";
    PK0CW01.PK0CWEOA = "Y";
    return;
  end

  if (converseVar.eventKey is pf18)
    COMMAREA.CATOAP = "PK09";
    PK0CW01.PK0CWERR = "Y";
    PK0CW01.PK0CWEOS = "Y";
    PK0CW01.PK0CWEOA = "Y";
    return;
  end

  if (converseVar.eventKey is pf19)
    COMMAREA.CATOAP = "PK0S";
    PK0CW01.PK0CWERR = "Y";
    PK0CW01.PK0CWEOS = "Y";
    PK0CW01.PK0CWEOA = "Y";
    return;
  end

  if (converseVar.eventKey is pf20)
    COMMAREA.CATOAP = "PK07";
    PK0CW01.PK0CWERR = "Y";
    PK0CW01.PK0CWEOS = "Y";
    PK0CW01.PK0CWEOA = "Y";
    return;
  end

  if (converseVar.eventKey is pa2) /* clear anything entered in selection fields*/
    PK0CW01.PK0CWERR = "Y";
    PK0CM001.CATOAP = " ";
    PK0CM001.CAITEM = " ";
    PK0CW01.PK0CWCT1 = 1;
    while (PK0CW01.PK0CWCT1 <= PK0CW01.PK0CWMXL[PK0CWSCX])
      PK0CM001.PK0CMSEL[PK0CWCT1] = " ";
      PK0CW01.PK0CWCT1 = PK0CW01.PK0CWCT1 + 1;
    end
    return;
  end

    /* ************************  fast path out ************/
  if (converseVar.eventKey is enter)
    if (PK0CM001.CATOAP == " "
     && PK0CM001.CAITEM == " ")
      return;
    else
      if (PK0CM001.CATOAP != " ")
        COMMAREA.CATOAP = PK0CM001.CATOAP;
        COMMAREA.CAITEM = PK0CM001.CAITEM;
        PK0CW01.PK0CWERR = "Y";
        PK0CW01.PK0CWEOS = "Y";
        PK0CW01.PK0CWEOA = "Y";
        if (PK0CM001.CATOAP == "PK0C")
          COMMAREA.CACURAPP = "  ";
          set PKWREC empty;
          set PKYREC empty;
          set EPAREC empty;
          COMMAREA.CA-USER-WORKAREA-2K-B = EPAREC.EPAARRAY;
          PKWREC.PKWINDEX = 1;
          PKWREC.PKWSLTYP[1] = "M";
          PKYREC.PKYORACT[1] = "S";
          PKYREC.PK1CUOID[1] = 0;
          PKYREC.PK1NORID[1] = 0;
          PKYREC.PK1PKSCH[1] = 0;
          PKYREC.XWHCD = PK0CW01.XWHCD;
          PKWREC.XWHCD = PK0CW01.XWHCD;
          PKWREC.PKWXWHCD = PK0CW01.XWHCD;
          PKWREC.XWHABRV = PK0CW01.XWHABRV;
          PKYREC.XWHABRV = PK0CW01.XWHABRV;
          PKWREC.PKWARRAY[1] = PKYREC.PKWARRAY;
        end
        return;
      else
        if (PK0CM001.CATOAP == " "
         && PK0CM001.CAITEM != " ")
          converseLib.validationFailed(15); /* enter option field*/
          PK0CW01.PK0CWERR = "Y"; /* there are errors in*/
          return;
            /* ******************************************************/
        end
      end
    end
  end

   /* if no other condition was met, show message*/

  converseLib.validationFailed(12); /* invalid pfkey*/
  PK0CW01.PK0CWERR = "Y";

end // end PK0C110

// handle pfkeys for pk0cm001
Function PK0C115()
   /* ************************************************************/
   /* *                                                         **/
   /* *   check pf keys and 'enter' for next action.  since     **/
   /* *   most keys and fast path were already acted upon,after  **/
   /* *   the converse, we only have to take care of the rest.  **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    PK0CS07(); /* handle pfkey 7*/
    return;
  end

  if (converseVar.eventKey is pf8)
    PK0CS08(); /* handle pfkey 8*/
    return;
  end

  if (converseVar.eventKey is enter)
    if (PK0CW01.PK0CWCSC == "PK0CM001")
      PK0CW01.PK0CWBLS[PK0CWSCX] = "Y"; /* rebuild screen*/
    else
      if (PK0CW01.PK0CWCSC == "PK0CM005")
        PK0CW01.PK0CW05X = 1;
        while (PK0CW05.PK0CMSEL[PK0CW05X] != "S" /* find first order that*/
         && PK0CW01.PK0CW05X < 30)
          PK0CW01.PK0CW05X = PK0CW01.PK0CW05X + 1; /* was selected*/
        end

        /* if no orders were selected that haven't been viewed show msg*/

        if (PK0CW01.PK0CW05X == 30
         && PK0CW05.PK0CMSEL[PK0CW05X] != "S")
          converseLib.validationFailed(64); /* no more orders were selected for inquiry*/
          return;
        else
          PK0CWEOS = "Y"; /* end of this screen*/
          PK0CW05.PK0CMSEL[PK0CW05X] = "V";
        end
      end
    end
  end
end // end PK0C115

// edit screen m001 entries
Function PK0C120()
   /* ************************************************************/
   /* *     this process handles all edits of screen fields,    **/
   /* ************************************************************/

  if (PK0CM001.PK0CMSEL[PK0CWLNX] == "S"
   || PK0CM001.PK0CMSEL[PK0CWLNX] == " "
   || PK0CM001.PK0CMSEL[PK0CWLNX] == "V")
     /* next sentence*/
  else
    set PK0CM001.PK0CMSEL[PK0CWLNX] cursor, modified, bold;
    PK0CW01.PK0CWERR = "Y";
    converseLib.validationFailed(14); /* only 's' is valid in this field*/
  end

end // end PK0C120

// converse screen m005
Function PK0C200()
   /* ************************************************************/
   /* *    process screen pk0cm001                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from pk0c050 until the end-of-screen   **/
   /* *     flag (pk0cweos) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/

       /* build array if first time thru or new order number*/
  if (converseVar.validationMsgNum == 0 /* may have error from xsexit in*/
   /* pk0cm050*/
   && PK0CW01.PK0CWBLA[PK0CWSCX] == "Y")
    PK0CS30();
    PK0CW01.PK0CWBLA[PK0CWSCX] = "N";
  end

  if (converseVar.validationMsgNum == 0
   && PK0CW01.PK0CWBLS[PK0CWSCX] == "Y")
     /* screen has no data in its body*/
    PK0C201(); /* fill it with data*/
    PK0CW01.PK0CWBLS[PK0CWSCX] = "N";
  end

   /* ***********************************************************/
  converse PK0CM005 ;
   /* ***********************************************************/

  PK0CW01.PK0CWERR = "N"; /* init error flag*/

  if (PK0CW01.PK0CW05X == 0) /* no orders to display*/
    PK0CW01.PK0CW05X = 1; /* can't have index of 01*/
  end

  PK0CW05.PK0CMSEL[PK0CW05X] = "V"; /* order was viewed*/

  PK0C210(); /* handle any special entries*/
       /* may exit appl from this process*/

  if (PK0CW01.PK0CWERR == "N") /* if pa2 wasn't hit*/
    PK0C220(); /* edit screen entries*/
  end

  if (PK0CW01.PK0CWERR == "N") /* if there were no map errors*/
    PK0C230(); /* process selection field*/
  end

    /* process pf keys*/

   /* if don't want to transfer to another screen*/
   /* and there were no map errors*/
  if (PK0CW01.PK0CWEOS == "N"
   && PK0CW01.PK0CWERR == "N")
    PK0C215(); /* process pfkeys*/
  end

   /* at this point;*/
     /* if the end-of-screen flag (pk0cweos) is 'n'*/
        /* we go back to top of process pk0%100.*/
     /* if the end-of-screen flag (pk0cweos) is 'y'*/
        /* we return to pk0%050.*/

end // end PK0C200

// build screen pk0cm005
Function PK0C201()
   /* ************************************************************/
   /* *      this process builds screen pk0cm005                **/
   /* ************************************************************/

  set PK0CM005 initial;
  PK0C003();
  PK0CWHDR = " ";
  PK0C202(); /* move headings to screen*/

  PK0CW01.PK0CWLNX = 1;
  PK0CW01.PK0CWARX = PK0CW01.PK0CWA1X[PK0CWSCX];

  while (PK0CW01.PK0CWLNX <= PK0CW01.PK0CWMXL[PK0CWSCX])
    PK0CS26(); /* clear each screen line*/
    PK0CW01.PK0CWLNX = PK0CW01.PK0CWLNX + 1;
  end

  if (converseVar.eventKey is pa2) /* pk0cs25 places cursor in wrong position*/
    return;
  end

  PK0CW01.PK0CWLNX = 1;

  while (PK0CW01.PK0CWLNX <= PK0CW01.PK0CWMXL[PK0CWSCX])
    PK0CS25(); /* build each screen line*/
    PK0CW01.PK0CWLNX = PK0CW01.PK0CWLNX + 1;
    PK0CW01.PK0CWARX = PK0CW01.PK0CWARX + 1;
  end
  PK0CM005.PK0CMTPR = PK0CW05.PK0CWTPR[PK0CW05X];
                                   /* move total to map*/

  PK0CW01.PK0CWBLS = "N"; /* screen body has data in it*/

end // end PK0C201

// move header data to pk0cm005
Function PK0C202()
   /* ************************************************************/
   /* *      this process builds headings*/
   /* ************************************************************/

  PK0CM005.XXXCURDT = VGVar.currentShortGregorianDate;
  PK0CM005.XXXRVNBR = "00";
  if (PK0CM005.XXXERRID == " ")
    PK0CM005.XXXERRID = "PK0CM";
  end
  PK0CM005.XWHCD = PK0CW01.XWHCD;
  PKWREC.XWHCD = PK0CW01.XWHCD;
  PK0CM005.XWHABRV = PK0CW01.XWHABRV;
  PKWREC.XWHABRV = PK0CW01.XWHABRV;
  set PK0CM005.XWHABRV skip;
   /* DLVRUSA START*/

  PK0CM005.GOODS-ISS-FL = PK0CW05.GOODS-ISS-FL[PK0CW05X];

   /* DLVRUSA END*/
  /* added for canada -- september 28, 1995 --*/

  if (PK0CW01.XWHCD == "42")
    PK0CM005.PK0CM-CURR-LIT = "CURRENCY CODE:";
    PK0CM005.ZFCCD = "CAD";
  else
    PK0CM005.ZFCCD = " ";
    PK0CM005.PK0CM-CURR-LIT = " ";
  end

  set PK0CM005.PK1ALLNB initialAttributes;
  set PK0CM005.PK0CMORP initialAttributes;

  if (PK0CW01.XWHCD == "51")
    set PK0CM005.PK0CMORP skip;
    PK0CM005.PK0CM-SCHED-ID-LIT = "MANIFEST ID:";
  else
    set PK0CM005.PK1ALLNB skip, noHighLight;
    PK0CM005.PK0CM-SCHED-ID-LIT = "SCHEDULE NBR:";
  end

  if (PK0CW05.PK1CUOID[PK0CW05X] == 0)
     /* next sentence*/
  else
    PK0CM005.PK1ALLNB = PK0CW05.PK1ALLNB[PK0CW05X];
    PK0CM005.PK1CUOID = PK0CW05.PK1CUOID[PK0CW05X];
    PK0CM005.PK1NORID = PK0CW05.PK1NORID[PK0CW05X];
    PK0CM005.XPPCD = PK0CW05.XPPCD[PK0CW05X];
    if (PK0CW05.KUCCOID[PK0CW05X] > 0)
      PK0CM005.KUCCOID = PK0CW05.KUCCOID[PK0CW05X];
      PK0CM005.KUMSTRID = PK0CW05.KUMSTRID[PK0CW05X];
      PK0CM005.XNXCD = PK0CW05.XNXCD[PK0CW05X];
    end
  end
  PK0CM005.PK1PKSCH = PK0CW05.PK1PKSCH[PK0CW05X];
  PK0CM005.SR2QTYSH = PK0CW05.PK4OTUNT[PK0CW05X];
  PK0CM005.PK1WT = PK0CW05.PK1WT[PK0CW05X];
  PK0CM005.PK1WT[2] = mathLib.round(PK0CW05.PK1WT[PK0CW05X] / 2.2046, -mathLib.decimals(PK0CM005.PK1WT[2]));
  PK0CM005.PK0CMTCF = PK0CW05.SR2TOTCF[PK0CW05X];
  PK0CM005.PK0CMTM = mathLib.round(PK0CW05.SR2TOTCF * .0280, -mathLib.decimals(PK0CM005.PK0CMTM));

  set PK6REC empty;
  PK6REC.KUCCOID = PK0CW05.KUCCOID[PK0CW05X];
  PK6REC.KUMSTRID = PK0CW05.KUMSTRID[PK0CW05X];

  PK0C931(); /* fetch unique from customer record*/

  if (converseVar.validationMsgNum != 0)
    PK0CM005.KUMSTRNM = " ";
  else
    PK0CM005.KUMSTRNM = PK6REC.KUMSTRNM;
  end

end // end PK0C202

// handle pfkeys for pk0cm005
Function PK0C210()
   /* ***********************************************************/
   /* *  check pf keys entry, or Option/item entry.            **/
   /* ***********************************************************/

  PK0CW01.PK0CWKEY = " "; /* init flag*/

  if (converseVar.eventKey is pf1)
    XSPF1();
    return;
  end

  if (PKWREC.PKWINDEX > 0)
    if (converseVar.eventKey is pf3)
      PKWREC.PKWARRAY = PKYREC.PKWARRAY;
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
      COMMAREA.CATOAP = PKWREC.PKWFRMAP;
      PK0CW01.PK0CWERR = "Y";
      PK0CW01.PK0CWEOS = "Y";
      PK0CW01.PK0CWEOA = "Y";
      COMMAREA.CA-USER-WORKAREA-2K-B = EPAREC.EPAARRAY;
      return;
    end
  end

  if (converseVar.eventKey is pf3)
    if (PK0CW01.PK0CWSFM == "N") /* if not supposed to show first map*/
      COMMAREA.CATOAP = "PK0J";
      PK0CW01.PK0CWERR = "Y";
      PK0CW01.PK0CWEOS = "Y";
      PK0CW01.PK0CWEOA = "Y";
      return;
    else
      PK0CW01.PK0CWCSC = "PK0CM001";
      PK0CW01.PK0CWKEY = "PF3"; /* used in pk0c050*/
      set PK0CW02 empty; /* clear line item array*/
      PK0CW01.PK0CWERR = "Y";
      PK0CW01.PK0CWEOS = "Y";
      return;
    end
  end

  if (converseVar.eventKey is pf4)
    XSPF4();
    return;
  end

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    return;
  end

  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "PK0B";
    PK0CW01.PK0CWERR = "Y";
    PK0CW01.PK0CWEOS = "Y";
    PK0CW01.PK0CWEOA = "Y";
    PK0CS61(); /* format line inquiry array*/
    return;
  end

  if (converseVar.eventKey is pf14)
    if (PK0CW01.XWHCD in XWHTBL.XWHCD)
      if (XWHTBL.XWTCD[sysVar.arrayIndex] == "01"
       && XWHTBL.XWHSTKLF[sysVar.arrayIndex] == "Y")

      else /* can't press pf14 to get*/
        converseLib.validationFailed(514); /* carton detail if this is a*/
        PK0CW01.PK0CWERR = "Y"; /* non-movers warehouse*/
      end
    end
    if (PK0CM005.PK1PKSCH == 0) /* can't press pf14 to get*/
      converseLib.validationFailed(514); /* carton detail if order came from*/
      PK0CW01.PK0CWERR = "Y"; /* pk data (sched will be zero)*/
    end
    return;
  end

  if (converseVar.eventKey is pf15)
    COMMAREA.CATOAP = "PK0D";
    PK0CW01.PK0CWERR = "Y";
    PK0CW01.PK0CWEOS = "Y";
    PK0CW01.PK0CWEOA = "Y";
    PK0CS62(); /* format cust inquiry array*/
    return;
  end

  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "PK0Z";
    PK0CW01.PK0CWERR = "Y";
    PK0CW01.PK0CWEOS = "Y";
    PK0CW01.PK0CWEOA = "Y";
    return;
  end

  if (converseVar.eventKey is pf19)
    COMMAREA.CATOAP = "PK0S";
    PK0CW01.PK0CWERR = "Y";
    PK0CW01.PK0CWEOS = "Y";
    PK0CW01.PK0CWEOA = "Y";
    return;
  end

  if (converseVar.eventKey is pf20)
    COMMAREA.CATOAP = "PK07";
    PK0CW01.PK0CWERR = "Y";
    PK0CW01.PK0CWEOS = "Y";
    PK0CW01.PK0CWEOA = "Y";
    return;
  end

  if (converseVar.eventKey is pf21)
    return;
  end

  if (converseVar.eventKey is pa2) /* rebuild screen*/
    PK0CW01.PK0CWERR = "Y";
    PK0CM005.CATOAP = " ";
    PK0CM005.CAITEM = " ";
    set PK0CW02 empty;
    set PK0CW05 empty;
    PK0CW01.PK0CW05X = 1;
    PK0CW01.PK0CW02X = 1;
    PK0CW01.PK0CWLSX[1] = 0; /* no entries in order array*/
    PK0CW01.PK0CWLSX[2] = 0; /* no entries in line item array*/
    PK0CW01.PK0CWFST = "Y"; /* act as if first time thru*/
    PK0CW01.PK0CWBLS[PK0CWSCX] = "Y"; /* need to rebuild screen*/
    PK0CW01.PK0CWBLA[PK0CWSCX] = "Y"; /* need to rebuild array*/
    return;
  end

    /* ************************  fast path out ************/
  if (converseVar.eventKey is enter)
    if (PK0CM005.CATOAP == " "
     && PK0CM005.CAITEM == " ")
      return;
    else
      if (PK0CM005.CATOAP != " ")
        if (PK0CM005.CATOAP == "AZ0K")
          converseLib.validationFailed(1);
          PK0CW01.PK0CWERR = "Y"; /* there are errors in*/
          return;
        end
        COMMAREA.CATOAP = PK0CM005.CATOAP;
        COMMAREA.CAITEM = PK0CM005.CAITEM;
        PK0CW01.PK0CWERR = "Y";
        PK0CW01.PK0CWEOS = "Y";
        PK0CW01.PK0CWEOA = "Y";
        if (COMMAREA.CATOAP == "PK0C")
          COMMAREA.CACURAPP = "  ";
          return;
        else
          return;
        end
      else
        if (PK0CM005.CATOAP == " "
         && PK0CM005.CAITEM != " ")
          converseLib.validationFailed(15); /* enter option field*/
          PK0CW01.PK0CWERR = "Y"; /* there are errors in*/
          return;
            /* ******************************************************/
        end
      end
    end
  end

   /* if no other condition was met, show message*/

  converseLib.validationFailed(12); /* invalid pfkey*/
  PK0CW01.PK0CWERR = "Y";

end // end PK0C210

// handle pfkeys for pk0cm005
Function PK0C215()
   /* ************************************************************/
   /* *                                                         **/
   /* *   check pf keys and 'enter' for next action.  since     **/
   /* *   most keys and fast path were already acted upon,after  **/
   /* *   the converse, we only have to take care of the rest.  **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    PK0CS07(); /* handle pfkey 7*/
    return;
  end

  if (converseVar.eventKey is pf8)
    PK0CS08(); /* handle pfkey 8*/
    return;
  end

  if (converseVar.eventKey is pf14)
    set AZWREC empty;
    PK0CW01.PK0CWLNX = 11;
    while (PK0CW01.PK0CWLNX > 0
     && PK0CW01.PK0CWERR == "N")
      PK0CS63();
      PK0CW01.PK0CWLNX = PK0CW01.PK0CWLNX - 1;
    end
    if (PK0CW01.PK0CWERR == "Y")
      /* next sentence*/
    else
      if (AZWREC.XWHCD == " ")
        converseLib.validationFailed(513);
      else
        COMMAREA.CATOAP = "AZ0K";
        COMMAREA.CAUSERA = AZWREC.AZWGROUP;
        PK0CW01.PK0CWERR = "Y";
        PK0CW01.PK0CWEOS = "Y";
        PK0CW01.PK0CWEOA = "Y";
      end
    end
    return;
  end

  if (converseVar.eventKey is enter)
    if (PK0CW01.PK0CWCSC == "PK0CM005")
      PK0CW01.PK0CWIDX = PK0CW01.PK0CW05X;
      PK0CW01.PK0CW05X = PK0CW01.PK0CW05X + 1;

       /* find next array entry that should be shown*/

      while (PK0CW05.PK0CMSEL[PK0CW05X] != "S"
       && PK0CW01.PK0CW05X < 30)
        PK0CW01.PK0CW05X = PK0CW01.PK0CW05X + 1;
      end

       /* if shown all entries in array, enter key takes user back*/
       /* to previous screen unless user changed data on screen*/

      if (PK0CW01.PK0CW05X > PK0CW01.PK0CWLSX[1])
        if (PKWREC.PKWINDEX > 0)
          PK0CW01.PK0CWEOS = "Y";
          return;
        end
        if (PK0CW01.PK0CWSFM == "N") /* if not supposed to show first map*/
          PK0CW01.PK0CWBLS[PK0CWSCX] = "Y";
          PK0CW01.PK0CW05X = PK0CW01.PK0CWIDX;
          return;
        end
        PK0CW01.PK0CWCSC = "PK0CM001";
        PK0CW01.PK0CWEOS = "Y";
        PK0CW01.PK0CWKEY = "PF3"; /* used in pk0c050*/
        return;
      end
      PK0CW01.PK0CWBLA[PK0CWSCX] = "Y";
      PK0CW01.PK0CWBLS[PK0CWSCX] = "Y";
    end
  end

   /* if supposed to transfer to third screen*/

  if (PK0CW01.PK0CWCSC == "PK0CM010"
   || PK0CW01.PK0CWCSC == "PK0CM015")
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf21)

      PK0CW01.PK0CW02X = 1; /* index for line item  array*/
      while (PK0CW02.PK0CMSEL[PK0CW02X] != "S" /* find first ln item that*/
       && PK0CW01.PK0CW02X < 900)
        PK0CW01.PK0CW02X = PK0CW01.PK0CW02X + 1; /* was selected*/
      end

      /* if no ln items were selected that haven't been viewed*/
      /* return*/

      if (PK0CW01.PK0CW02X == 900
       && PK0CW02.PK0CMSEL[PK0CW05X] != "S")
        return;
      else
        PK0CWEOS = "Y"; /* end of this screen*/
      end
    end
  end

end // end PK0C215

// edit screen m005 entries
Function PK0C220()
   /* ************************************************************/
   /* *     this process handles all edits of screen fields,    **/
   /* ************************************************************/

  if (PK0CM005.PK1CUOID == 0) /* must have order nbr*/
    set PK0CM005.PK1CUOID cursor, bold;
    converseLib.validationFailed(63); /* please enter order number*/
    PK0C202(); /* move headings to screen*/
  else
    set PK0CM005.PK1CUOID normal;
  end

  if (PK0CM005.XWHCD == " ") /* must have warehouse code*/
    set PK0CM005.XWHCD cursor, bold;
    converseLib.validationFailed(4); /* warehouse code required*/
  else
    set PK0CM005.XWHCD normal;
  end

  if (converseVar.validationMsgNum != 0)
    PK0CW01.PK0CWERR = "Y"; /* there was an error on the screen*/
    return;
  end

  if (PK0CM005.XWHCD != PK0CW01.XWHCD) /* if warehouse code changed*/
    if (PK0CM005.XWHCD in XWHTBL.XWHCD /* if code is in the table*/
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and it is active*/
      PK0CW01.XWHCD = PK0CM005.XWHCD;
      PK0CW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      PK0CM005.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      converseLib.validationFailed(2); /* invalid warehouse*/
      PK0CW01.PK0CWERR = "Y"; /* there was an error on the screen*/
    end
  end

    /* look at multiple lines on screen*/

  if (PK0CW01.PK0CWEOS == "N")
    PK0CW01.PK0CWLNX = PK0CW01.PK0CWMXL[PK0CWSCX];
    while (PK0CW01.PK0CWLNX > 0) /* edit from line 12 to 1*/
      PK0C221(); /* process multiple lines on screen*/
      PK0CW01.PK0CWLNX = PK0CW01.PK0CWLNX - 1;
    end
  end

end // end PK0C220

// edit lines on  m005
Function PK0C221()
   /* ************************************************************/
   /* *     this process handles all edits of screen fields,    **/
   /* ************************************************************/

  if (PK0CM005.PK0CMSEL[PK0CWLNX] == "S"
   || PK0CM005.PK0CMSEL[PK0CWLNX] == " "
   || PK0CM005.PK0CMSEL[PK0CWLNX] == "V"
   || PK0CM005.PK0CMSEL[PK0CWLNX] == "*")
    /* SET PK0CM005.PK0CMSEL(PK0CWLNX) DEFINED;*/
  else
    set PK0CM005.PK0CMSEL[PK0CWLNX] cursor, modified, bold;
    PK0CW01.PK0CWERR = "Y";
    converseLib.validationFailed(14); /* only 's' is valid in this field*/
  end

   /* -----------------------------------------------------------*/
   /* set pf21 switch,(can only transfer to pk0cm015 if 'y'.*/
   /* -----------------------------------------------------------*/

  if (converseVar.eventKey is pf21)
    if (PK0CM005.PK0CMSEL[PK0CWLNX] == "S")
      if (PK0CM005.OP1SPHDF[PK0CWLNX] == "Y" /* spec handling*/
       || PK0CM005.OP1SPLBF[PK0CWLNX] == "Y") /* or labling*/

         /* next sentence*/
      else

        PK0CW01.PK0CWERR = "Y";
        converseLib.validationFailed(374);
        set PK0CM005.PK0CMSEL[PK0CWLNX] cursor, modified, bold;

      end
    end
  end

end // end PK0C221

// process screen m005 entries
Function PK0C230()
   /* ************************************************************/
   /* *     this process handles looking at individual products **/
   /* *     on the order.*/
   /* ************************************************************/

    /* if any key fields were changed*/

  if (PK0CM005.XWHCD != PK0CW05.XWHCD[PK0CW05X]
   || PK0CM005.PK1CUOID != PK0CW05.PK1CUOID[PK0CW05X]
   || PK0CM005.PK1NORID != PK0CW05.PK1NORID[PK0CW05X]
   || PK0CM005.PK1PKSCH != PK0CW05.PK1PKSCH[PK0CW05X])

    PK0CW01.PK0CWSFM = "N"; /* can't pf3 to first map*/
    PK0CW01.PK0CW05X = 1; /* init array index*/
    PK0CW01.PK0CWLSX[1] = 1; /* one entry in array*/
    set PK0CW05 empty; /* clear out orders array*/
    set PK0CW02 empty; /* clear out products array*/
    PK0CW05.XWHCD[PK0CW05X] = PK0CM005.XWHCD;
    PK0CW01.XWHCD = PK0CM005.XWHCD;
    PK0CW05.PK1CUOID[PK0CW05X] = PK0CM005.PK1CUOID;
    PKYREC.PK1CUOID[PK0CWYIX] = PK0CM005.PK1CUOID;
    PK0CW05.PK1NORID[PK0CW05X] = PK0CM005.PK1NORID;
    PKYREC.PK1NORID[PK0CWYIX] = PK0CM005.PK1NORID;
    PK0CW05.XPPCD[PK0CW05X] = PK0CM005.XPPCD;
    PK0CW05.PK1PKSCH[PK0CW05X] = PK0CM005.PK1PKSCH;
    PKYREC.PK1PKSCH[PK0CWYIX] = PK0CM005.PK1PKSCH;
    PK0CW01.PK0CWBLA[PK0CWSCX] = "Y"; /* need to build array*/
    PK0CW01.PK0CWBLS[PK0CWSCX] = "Y"; /* need to build screen*/
    PK0CW01.PK0CWERR = "Y"; /* don't want to process screen*/
    PK0CS50(); /* decide where application should transfer to*/
    if (PK0CW01.PK0CWCSC == "PK0CM005") /* if staying on same screen*/
      PK0C231(); /* find total wieght and units to put on screen*/
    end
    return;
  end

   /* look at selection field to see if a transfer to*/
   /* detail is needed, also move sel. field into array*/

  PK0CW01.PK0CWLNX = 1;
  PK0CW01.PK0CWARX = PK0CW01.PK0CWA1X[PK0CWSCX];
  while (PK0CW01.PK0CWLNX <= PK0CW01.PK0CWMXL[PK0CWSCX])
                                /* LOOK AT LINES ON SCREEN*/
    if (PK0CM005.PK0CMSEL[PK0CWLNX] == "S") /* to see if prod was selected*/
      if (converseVar.eventKey is enter)
        PK0CW01.PK0CWCSC = "PK0CM010"; /* go to detail screen*/
      end
      if (converseVar.eventKey is pf21)
        PK0CW01.PK0CWCSC = "PK0CM015"; /* GO TO DETAIL SCREEN*/
      end
      PK0CW02.PK0CMSEL[PK0CWARX] = "S"; /* move sel. into array*/
    end
    PK0CW01.PK0CWARX = PK0CW01.PK0CWARX + 1; /* increment counter*/
    PK0CW01.PK0CWLNX = PK0CW01.PK0CWLNX + 1; /* increment counter*/
  end
end // end PK0C230

// find total units and weight
Function PK0C231()
   /* ************************************************************/
   /* *  look up total weight and units to go on pk0cm005*/
   /* ************************************************************/

  if (PK0CW05.PK0CWRFR[PK0CW05X] == "M")
    VMPOLH01.XWH-WHSE-CD = PK0CW05.XWHCD[PK0CW05X];
    VMPOLH01.PK-ORD-STKTF-ID = PK0CW05.PK1CUOID[PK0CW05X];
    VMPOLH01.PK-NIKE-ORD-ID = PK0CW05.PK1NORID[PK0CW05X];
    VMPOLH01.PK-NBR-TIMES-ALOC = PK0CW05.PK1ALLNB[PK0CW05X];

    PK0C929M();
    if (SQLCA.VAGen_SQLCODE == 0)
      PK0CW05.PK4OTUNT[PK0CW05X] = VMPOLH01.PK-TOT-ORD-QTY;
      PK0CW05.PK1WT[PK0CW05X] = VMPOLH01.PK-TOT-ORD-WT;
    end
  else

    if (PK0CW05.PK0CWRFR[PK0CW05X] == "P")
      PK4REC.XWHCD = PK0CW05.XWHCD[PK0CW05X];
      PK4REC.PK1CUOID = PK0CW05.PK1CUOID[PK0CW05X];
      PK4REC.PK1NORID = PK0CW05.PK1NORID[PK0CW05X];

      PK0C929(); /* fetch pk4rec*/
      if (SQLCA.VAGen_SQLCODE == 0)
        PK0CW05.PK4OTUNT[PK0CW05X] = PK4REC.PK4OTUNT;
        PK0CW05.PK1WT[PK0CW05X] = PK4REC.PK4OTWGT;
      end
    else
      if (PK0CW05.PK0CWRFR[PK0CW05X] == "S")
        SR2REC.XWHCD = PK0CW05.XWHCD[PK0CW05X];
        SR2REC.PK1PKSCH = PK0CW05.PK1PKSCH[PK0CW05X];
        SR2REC.OP1CUOID = PK0CW05.PK1CUOID[PK0CW05X];
        SR2REC.OP1NORID = PK0CW05.PK1NORID[PK0CW05X];
        SR2REC.OP1NTMAL = 1;
        PK0C930(); /* fetch sr2rec*/
        if (SQLCA.VAGen_SQLCODE == 0)
          PK0CW05.PK4OTUNT[PK0CW05X] = SR2REC.SR2QTYSH;
          if (PK0CW01.XWHCD == "51"
           && SR1REC.TF1CARNM == "DCMS")
            PK0CW05.PK1WT[PK0CW05X] = SR2REC.PK1WT;
          else
            if (SR2REC.SR1PKSFL == "Y")
              PK0CW05.PK1WT[PK0CW05X] = SR2REC.PK1WT;
            else
              PK0C933();
              PK0CW05.PK1WT[PK0CW05X] = PK0CW-EXPC-TOT-ORD-WT;
            end
          end
        end
      end
    end
  end
end // end PK0C231

// converse screen pk0cm010
Function PK0C300()
   /* ************************************************************/
   /* *    process screen pk0cm010                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from pk0c050 until the end-of-screen   **/
   /* *     flag (pk0cweos) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/

  if (PK0CW01.PK0CWBLS[PK0CWSCX] == "Y")
                                   /* screen has no data in its body*/
    PK0C301(); /* fill it with data*/
    PK0CW01.PK0CWBLS[PK0CWSCX] = "N";
  end

   /* ***********************************************************/
  converse PK0CM010 ;
   /* ***********************************************************/

  PK0CW01.PK0CWERR = "N"; /* init error flag*/

  PK0C310(); /* handle any special entries*/
       /* may exit appl from this process*/

  if (PK0CW01.PK0CWERR == "N"
   && PK0CW01.PK0CWEOS == "N")
    PK0C320(); /* validate entries*/
  end

  if (PK0CW01.PK0CWERR == "N" /* if no errors on the screen*/
   && PK0CW01.PK0CWEOS == "N")
    if (PK0CW02.XWHCD[PK0CW02X] != PK0CM010.XWHCD /* if screen was changed*/
     || PK0CW02.PK1CUOID[PK0CW02X] != PK0CM010.PK1CUOID
     || PK0CW02.PK1NORID[PK0CW02X] != PK0CM010.PK1NORID
     || PK0CW02.PK1PKSCH[PK0CW02X] != PK0CM010.PK1PKSCH)
      PK0C330(); /* process screen*/
    end
  end

  if (PK0CW01.PK0CWERR == "N" /* if no errors on the screen*/
   && PK0CW01.PK0CWEOS == "N")
    PK0C315();
  end

  PK0CW02.PK0CMSEL[1] = PK0CW02.PK0CMSEL[1]; /* test only*/

   /* at this point;*/
     /* if the end-of-screen flag (pk0cweos) is 'n'*/
        /* we go back to top of process pk0%000.*/
     /* if the end-of-screen flag (pk0cweos) is 'y'*/
        /* we return to pk0%050.*/

end // end PK0C300

// build screen pk0cm001
Function PK0C301()
   /* ************************************************************/
   /* *  move header data to screen*/
   /* *  load sizes into array with existing quantities*/
   /* * szx - product size counter*/
   /* * lnz - screen line counter*/
   /* ************************************************************/

  set PK0CM010 initial; /* clear map of old data*/
  PK0CM010.XXXCURDT = VGVar.currentShortGregorianDate;
  PK0CM010.XXXERRID = "PK0CM";
  PK0CM010.XXXRVNBR = "00";
  PK0CM010.XWHCD = PK0CW01.XWHCD;
  PK0CM010.XWHABRV = PK0CW01.XWHABRV;

  set PK0CM010.PK1ALLNB initialAttributes;
  set PK0CM010.PK0CMORP initialAttributes;

  if (PK0CW01.XWHCD == "51")
    set PK0CM010.PK0CMORP normal;
    PK0CM010.PK0CM-SCHED-ID-LIT = "MANIFEST ID:";
  else
    set PK0CM010.PK1ALLNB skip, noHighLight;
    PK0CM010.PK0CM-SCHED-ID-LIT = "SCHEDULE NBR:";
  end

  if (PK0CW02.PK1CUOID[PK0CW02X] == 0)
     /* next sentence - haven't viewed any line items*/
  else
    PK0CW02.PK0CMSEL[PK0CW02X] = "V";
    PK0CM010.PK1CUOID = PK0CW02.PK1CUOID[PK0CW02X];
    PK0CM010.PK1NORID = PK0CW02.PK1NORID[PK0CW02X];
    PK0CM010.XPPCD = PK0CW02.XPPCD[PK0CW02X];
    if (PK0CW01.XWHCD == "51")
      PK0CM010.PK1ALLNB = PK0CW02.PK1ALLNB[PK0CW02X];
    end
  end

  PK0CM010.XGPCD = PK0CW02.XGPCD[PK0CW02X];
  PK0CM010.PK1PKSCH = PK0CW02.PK1PKSCH[PK0CW02X];
  PK0CM010.SY1STNBR = PK0CW02.SY1STNBR[PK0CW02X];
  PK0CM010.SY1SSTNM = PK0CW02.SY1SSTNM[PK0CW02X];
  PK0CM010.SY2CLRID = PK0CW02.SY2CLRID[PK0CW02X];
  PK0CM010.XDMCD = PK0CW02.XDMCD[PK0CW02X];
  PK0CM010.XLCCD = PK0CW02.XLCCD[PK0CW02X];
  PK0CM010.XQACD = PK0CW02.XQACD[PK0CW02X];
  PK0CM010.PC2INSEG = PK0CW02.PC2INSEG[PK0CW02X];
  PK0CM010.XEGCD = PK0CW02.XEGCD[PK0CW02X];
  PK0CM010.XPGCD = PK0CW02.XPGCD[PK0CW02X];
  PK0CM010.XUMCD = PK0CW02.XUMCD[PK0CW02X];
  PK0CM010.PK5TIQTY = PK0CW02.PK5TIQTY[PK0CW02X];

  PK0CW01.PK0CWCT1 = 1;
  PK0CW01.PK0CWSZX = 1;

   /* fetch size data to be shown on map*/

  set SYPREC empty;
  SYPREC.SYPFC = "PC"; /* product code*/
  SYPREC.SYPCMPSW = "N"; /* compressed data*/
  SYPREC.XGPCD = PK0CW02.XGPCD[PK0CW02X];
  SYPREC.SY1STNBR = PK0CW02.SY1STNBR[PK0CW02X];
  SYPREC.SY2CLRID = PK0CW02.SY2CLRID[PK0CW02X];
  SYPREC.XDMCD = PK0CW02.XDMCD[PK0CW02X];
  SYPREC.XQACD = PK0CW02.XQACD[PK0CW02X];

  PK0C925(); /* select size desc from sy1190*/
  if (converseVar.validationMsgNum != 0
   || converseVar.eventKey is pa2)
    return;
  end

  if (PK0CW05.PK0CWRFR[PK0CW05X] == "M")
    PK0C303M();
  else
   /* fetch quantity data to be shown on map*/
    if (PK0CW05.PK0CWRFR[PK0CW05X] == "P")
      PK0C303(); /* fetch quantities from picking and place on map*/
    else
      if (PK0CW05.PK0CWRFR[PK0CW05X] == "S")
        PK0C304(); /* fetch quantities from shiprec and place on map*/
      end
    end
  end
end // end PK0C301

// move packing info to screen
Function PK0C302()
   /* ************************************************************/
   /* *  move packing and handling instructions to screen*/
   /* ************************************************************/

   /* move in packing and handling info*/

  PK0CW01.PK0CWCT1 = 1;
  PK0CW01.XGPCD = PK0CW02.XGPCD[PK0CW02X];

  if (PK0CW02.PK0CWHC1[PK0CW02X] != " ")
    PK0CW01.XHDCD = PK0CW02.PK0CWHC1[PK0CW02X];
    if (PK0CW01.XHDKEY in XHDTBL.XHDKEY)
      PK0CM010.XHDCD[PK0CWCT1] = XHDTBL.XHDCD[sysVar.arrayIndex];
      PK0CM010.XHDDESC[PK0CWCT1] = XHDTBL.XHDDESC[sysVar.arrayIndex];
      PK0CW01.PK0CWCT1 = PK0CW01.PK0CWCT1 + 1;
    end
  end

  if (PK0CW02.PK0CWHC2[PK0CW02X] != " ")
    PK0CW01.XHDCD = PK0CW02.PK0CWHC2[PK0CW02X];
    if (PK0CW01.XHDKEY in XHDTBL.XHDKEY)
      PK0CM010.XHDCD[PK0CWCT1] = XHDTBL.XHDCD[sysVar.arrayIndex];
      PK0CM010.XHDDESC[PK0CWCT1] = XHDTBL.XHDDESC[sysVar.arrayIndex];
      PK0CW01.PK0CWCT1 = PK0CW01.PK0CWCT1 + 1;
    end
  end

  if (PK0CW02.PK0CWHC3[PK0CW02X] != " ")
    PK0CW01.XHDCD = PK0CW02.PK0CWHC3[PK0CW02X];
    if (PK0CW01.XHDKEY in XHDTBL.XHDKEY)
      PK0CM010.XHDCD[PK0CWCT1] = XHDTBL.XHDCD[sysVar.arrayIndex];
      PK0CM010.XHDDESC[PK0CWCT1] = XHDTBL.XHDDESC[sysVar.arrayIndex];
      PK0CW01.PK0CWCT1 = PK0CW01.PK0CWCT1 + 1;
    end
  end

  if (PK0CW02.PK0CWHC4[PK0CW02X] != " ")
    PK0CW01.XHDCD = PK0CW02.PK0CWHC4[PK0CW02X];
    if (PK0CW01.XHDKEY in XHDTBL.XHDKEY)
      PK0CM010.XHDCD[PK0CWCT1] = XHDTBL.XHDCD[sysVar.arrayIndex];
      PK0CM010.XHDDESC[PK0CWCT1] = XHDTBL.XHDDESC[sysVar.arrayIndex];
      PK0CW01.PK0CWCT1 = PK0CW01.PK0CWCT1 + 1;
    end
  end

  if (PK0CW02.PK0CWHC5[PK0CW02X] != " ")
    PK0CW01.XHDCD = PK0CW02.PK0CWHC5[PK0CW02X];
    if (PK0CW01.XHDKEY in XHDTBL.XHDKEY)
      PK0CM010.XHDCD[PK0CWCT1] = XHDTBL.XHDCD[sysVar.arrayIndex];
      PK0CM010.XHDDESC[PK0CWCT1] = XHDTBL.XHDDESC[sysVar.arrayIndex];
      PK0CW01.PK0CWCT1 = PK0CW01.PK0CWCT1 + 1;
    end
  end

end // end PK0C302

// move pk quantities to map
Function PK0C303()
   /* ************************************************************/
   /* *  fetch quantity data from picking and move to screen*/
   /* ************************************************************/

  PK0C302();
                                   /* move packing and handling info to map*/

  PK5REC.XWHCD = PK0CW02.XWHCD[PK0CW02X];
  PK5REC.PK1CUOID = PK0CW02.PK1CUOID[PK0CW02X];
  PK5REC.PK1NORID = PK0CW02.PK1NORID[PK0CW02X];
  PK5REC.PK1LNINB = PK0CW02.PK1LNINB[PK0CW02X];

  PK0C927(); /* fetch row from pk5rec*/
  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
   /* if quantity is greater than 0, move size description*/
   /* and quantity to the screen*/

  PK0CW01.PK0CWSZX = 1;
  PK0CW01.PK0CWLNZ = 1;

  while (PK0CW01.PK0CWSZX <= 40)
    if (PK5REC.PK1QTY[PK0CWSZX] > 0)
      PK0CM010.SY3FRGUT[PK0CWLNZ] = SYPREC.SY4IDDSC[PK0CWSZX];
      PK0CM010.PK1QTY[PK0CWLNZ] = PK5REC.PK1QTY[PK0CWSZX];
      PK0CW01.PK0CWLNZ = PK0CW01.PK0CWLNZ + 1;
    end
    PK0CW01.PK0CWSZX = PK0CW01.PK0CWSZX + 1;
  end

end // end PK0C303

// Fetch qty data frm Mirror Pool
Function PK0C303M()
   /* ------------------------------------------------------------------*/
   /* Fetch quantity data from mirror pool picking and move to screen.*/
   /* ------------------------------------------------------------------*/

  PK0C302(); /* Move packing & handling info to map*/

  VMPOLI01.XWH-WHSE-CD = PK0CW02.XWHCD[PK0CW02X];
  VMPOLI01.PK-ORD-STKTF-ID = PK0CW02.PK1CUOID[PK0CW02X];
  VMPOLI01.PK-NIKE-ORD-ID = PK0CW02.PK1NORID[PK0CW02X];
  VMPOLI01.PK-NBR-TIMES-ALOC = PK0CW02.PK1ALLNB[PK0CW02X];
  VMPOLI01.PK-LINE-ITEM-NBR = PK0CW02.PK1LNINB[PK0CW02X];

  PK0C927M(); /* Fetch row from vmpoli01*/

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* ------------------------------------------------------------------*/
   /* If quantity is greater than 0, move size description and*/
   /* quantity to the screen.*/
   /* ------------------------------------------------------------------*/

  PK0CW01.PK0CWSZX = 1;
  PK0CW01.PK0CWLNZ = 1;

  while (PK0CW01.PK0CWSZX <= 40)
    if (VMPOLI01.PK-ALOC-PICK-QTY1[PK0CWSZX] > 0)
      PK0CM010.SY3FRGUT[PK0CWLNZ] = SYPREC.SY4IDDSC[PK0CWSZX];
      PK0CM010.PK1QTY[PK0CWLNZ] = VMPOLI01.PK-ALOC-PICK-QTY1[PK0CWSZX];
      PK0CW01.PK0CWLNZ = PK0CW01.PK0CWLNZ + 1;
    end
    PK0CW01.PK0CWSZX = PK0CW01.PK0CWSZX + 1;
  end

end // end PK0C303M

// move sr quantities to map
Function PK0C304()
   /* ************************************************************/
   /* *  fetch quantity data from shiprec and move to screen*/
   /* ************************************************************/

  SR3REC.XWHCD = PK0CW02.XWHCD[PK0CW02X];
  SR3REC.OP1CUOID = PK0CW02.PK1CUOID[PK0CW02X];
  SR3REC.OP1NORID = PK0CW02.PK1NORID[PK0CW02X];
  SR3REC.OP2LNINB = PK0CW02.PK1LNINB[PK0CW02X];

  PK0C928(); /* fetch quantities into sr3rec*/
  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
   /* if quantity is greater than 0, move size description*/
   /* and quantity to the screen*/

  PK0CW01.PK0CWSZX = 1;
  PK0CW01.PK0CWLNZ = 1;

  while (PK0CW01.PK0CWSZX <= 80)
    if (SR3REC.SR3QTYSH[PK0CWSZX] > 0)

       /* ----- if two consecutive buckets have the*/
       /* ----- same size id, sum them into the current bucket*/
       /* ----- and zero out the next bucket.*/
      PK0CW01.PK0CWSX2 = PK0CW01.PK0CWSZX + 1;
      if (PK0CW01.PK0CWSX2 <= 80
       && SR3REC.SY5SZID[PK0CWSZX] == SR3REC.SY5SZID[PK0CWSX2]
       && SR3REC.SR3QTYSH[PK0CWSX2] != 0)
        PK0CW01.PK0CWHD1 = SR3REC.SR3QTYSH[PK0CWSZX];
        PK0CW01.PK0CWHD2 = SR3REC.SR3QTYSH[PK0CWSX2];
        SR3REC.SR3QTYSH[PK0CWSZX] = PK0CW01.PK0CWHD1 + PK0CW01.PK0CWHD2;
        SR3REC.SR3QTYSH[PK0CWSX2] = 0;
      end

      PK0CW01.PK0CWIDX = SR3REC.SY5SZID[PK0CWSZX];
      PK0CM010.PK1QTY[PK0CWLNZ] = SR3REC.SR3QTYSH[PK0CWSZX];
      PK0CM010.SY3FRGUT[PK0CWLNZ] = SYPREC.SY4IDDSC[PK0CWIDX];
      PK0CW01.PK0CWLNZ = PK0CW01.PK0CWLNZ + 1;
    end
    PK0CW01.PK0CWSZX = PK0CW01.PK0CWSZX + 1;
  end

end // end PK0C304

// handle pfkeys for screen m010
Function PK0C310()
   /* ***********************************************************/
   /* *  check pf keys entry, or Option/item entry.            **/
   /* ***********************************************************/

  PK0CW01.PK0CWKEY = " "; /* init flag*/

  if (PKWREC.PKWINDEX == 0)
    if (converseVar.eventKey is pf1)
      XSPF1();
      return;
    end
  end

  if (converseVar.eventKey is pf3)
    PK0CW01.PK0CWCSC = "PK0CM005";
    PK0CW01.PK0CWERR = "N";
    PK0CW01.PK0CWEOS = "Y";
    if (PK0CW01.PK0CWKEY == "PA2") /* need to rebuild array*/
       /* next sentence*/
    else
      PK0CW01.PK0CWKEY = "PF3"; /* used in pk0c050*/
    end
    return;
  end

  if (converseVar.eventKey is pf4)
    XSPF4();
    return;
  end

  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "PK0B";
    PK0CW01.PK0CWERR = "Y";
    PK0CW01.PK0CWEOS = "Y";
    PK0CW01.PK0CWEOA = "Y";
    PK0CS61(); /* format line inquiry array*/
    return;
  end

  if (converseVar.eventKey is pf15)
    COMMAREA.CATOAP = "PK0D";
    PK0CW01.PK0CWERR = "Y";
    PK0CW01.PK0CWEOS = "Y";
    PK0CW01.PK0CWEOA = "Y";
    PK0CS62(); /* format cust inquiry array*/
    return;
  end

  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "PK0Z";
    PK0CW01.PK0CWERR = "Y";
    PK0CW01.PK0CWEOS = "Y";
    PK0CW01.PK0CWEOA = "Y";
    return;
  end

  if (converseVar.eventKey is pf19)
    COMMAREA.CATOAP = "PK0S";
    PK0CW01.PK0CWERR = "Y";
    PK0CW01.PK0CWEOS = "Y";
    PK0CW01.PK0CWEOA = "Y";
    return;
  end

  if (converseVar.eventKey is pf20)
    COMMAREA.CATOAP = "PK07";
    PK0CW01.PK0CWERR = "Y";
    PK0CW01.PK0CWEOS = "Y";
    PK0CW01.PK0CWEOA = "Y";
    return;
  end

  if (converseVar.eventKey is pa2) /* rebuild screen*/
    PK0CW01.PK0CWKEY = "PA2"; /* used if pf3 is done*/
    set PK0CM010.PK1CUOID cursor;
    PK0CM010.XWHCD = PK0CW01.XWHCD;
    PK0CW01.PK0CWERR = "Y";
    PK0CM005.CATOAP = " ";
    PK0CM005.CAITEM = " ";
    set PK0CW02 empty;
    set PK0CW05 empty;
    PK0CW01.PK0CW05X = 1;
    PK0CW01.PK0CW02X = 1;
    PK0CW01.PK0CWLSX[1] = 0; /* no entries in order array*/
    PK0CW01.PK0CWLSX[2] = 0; /* no entries in line item array*/
    PK0CW01.PK0CWFST = "Y"; /* act as if first time thru*/
    PK0CW01.PK0CWBLS[PK0CWSCX] = "Y"; /* need to rebuild screen*/
    return;
  end

    /* ************************  fast path out ************/
  if (converseVar.eventKey is enter)
    if (PK0CM010.CATOAP == " "
     && PK0CM010.CAITEM == " ")
      return;
    else
      if (PK0CM010.CATOAP != " ")
        COMMAREA.CATOAP = PK0CM010.CATOAP;
        COMMAREA.CAITEM = PK0CM010.CAITEM;
        PK0CW01.PK0CWERR = "Y"; /* screen contained errors*/
        PK0CW01.PK0CWEOS = "Y"; /* end of screen*/
        PK0CW01.PK0CWEOA = "Y"; /* end of application*/
        if (COMMAREA.CATOAP == "PK0C")
          COMMAREA.CACURAPP = "  ";
          return;
        else
          return;
        end
      else
        if (PK0CM010.CATOAP == " "
         && PK0CM010.CAITEM != " ")
          converseLib.validationFailed(01); /* enter option field*/
          PK0CW01.PK0CWERR = "Y"; /* there are errors in*/
          return;
            /* ******************************************************/
        end
      end
    end
  end

   /* if no other condition was met, show message*/

  converseLib.validationFailed(12); /* invalid pfkey*/
  PK0CW01.PK0CWERR = "Y";
end // end PK0C310

// handle pfkeys for screen m010
Function PK0C315()
   /* ************************************************************/
   /* *                                                         **/
   /* *   check pf keys and 'enter' for next action.  since     **/
   /* *   most keys and fast path were already acted upon,after  **/
   /* *   the converse, we only have to take care of the rest.  **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    if (PK0CW01.PK0CWCSC == "PK0CM010")
      PK0CW01.PK0CW02X = PK0CW01.PK0CW02X + 1;

       /* find next array entry that should be shown*/

      while (PK0CW02.PK0CMSEL[PK0CW02X] != "S"
       && PK0CW01.PK0CW02X <= PK0CW01.PK0CWLSX[2])
        PK0CW01.PK0CW02X = PK0CW01.PK0CW02X + 1;
      end

       /* if shown all entries in screen, enter key takes*/
       /* user to previous screen*/

      if (PK0CW01.PK0CW02X > PK0CW01.PK0CWLSX[2])
        PK0CW01.PK0CWCSC = "PK0CM005";
        PK0CW01.PK0CWEOS = "Y";
        PK0CW01.PK0CWKEY = "PF3"; /* used in pk0c050*/
      else
        PK0CW01.PK0CWBLS[PK0CWSCX] = "Y";
      end
    else
      return;
    end
  end
end // end PK0C315

// edit screen m010 entries
Function PK0C320()
   /* ************************************************************/
   /* *     this process handles all edits of screen fields,    **/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    return;
  end

  if (PK0CM010.PK1CUOID == 0
   || (PK0CM010.XWHCD == "51" && PK0CM010.PK1NORID == 0))
    set PK0CM010.PK1CUOID cursor, bold;
    set PK0CM010.PK1NORID bold;
    converseLib.validationFailed(63); /* please enter order number*/
  else
    set PK0CM010.PK1CUOID normal;
    set PK0CM010.PK1CUOID normal;
  end

  if (PK0CM010.XWHCD == " ")
    set PK0CM010.XWHCD bold;
    converseLib.validationFailed(4); /* warehouse code required*/
  else
    set PK0CM010.XWHCD normal;
  end

  if (converseVar.validationMsgNum != 0)
    PK0CW01.PK0CWERR = "Y"; /* there was an error on the screen*/
    return;
  end

  if (PK0CM010.XWHCD == PK0CW02.XWHCD[PK0CW02X])
                                   /* if no change to warehouse*/
    return;
  end

  if (PK0CM010.XWHCD in XWHTBL.XWHCD /* if code is in the table*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and it is active*/
    PK0CW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  else
    converseLib.validationFailed(2); /* invalid warehouse*/
    return;
  end

  PK0CW01.XWHCD = PK0CM010.XWHCD;
  PK0CW01.XWHABRV = PK0CM010.XWHABRV;

end // end PK0C320

// process entries on screen m010
Function PK0C330()
   /* ***********************************************************/
   /* *  process entries on screen*/
   /* ***********************************************************/

  PK0CW01.PK0CWSFM = "N"; /* can't pf3 to first map*/
  PK0CW01.PK0CW05X = 1; /* init array counter*/
  PK0CW01.PK0CWLSX[1] = 1; /* init size of orders array*/
  PK0CW01.PK0CWLSX[2] = 1; /* init size of line item array*/
  set PK0CW05 empty; /* clear out orders array*/
  set PK0CW02 empty; /* clear out products array*/
  PK0CW05.XWHCD[PK0CW05X] = PK0CM010.XWHCD;
  PK0CW01.XWHCD = PK0CM010.XWHCD;
  PK0CW05.PK1CUOID[PK0CW05X] = PK0CM010.PK1CUOID;
  PK0CW05.PK1NORID[PK0CW05X] = PK0CM010.PK1NORID;
  PK0CW05.XPPCD[PK0CW05X] = PK0CM010.XPPCD;
  PK0CW05.PK1PKSCH[PK0CW05X] = PK0CM010.PK1PKSCH;
  PK0CW05.PK1ALLNB[PK0CW05X] = 0;
  PK0CS50(); /* decide which screen to show*/
  if (PK0CW01.PK0CWCSC == "PK0CM005")
    PK0C231(); /* fetch total weight and units from sr2rec*/
  end
  PK0CW01.PK0CWEOS = "Y";

end // end PK0C330

// converse screen pk0cm015
Function PK0C400()
   /* ************************************************************/
   /* *    process screen pk0cm015                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from pk0c050 until the end-of-screen   **/
   /* *     flag (pk0cweos) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/

  if (PK0CW01.PK0CWBLS[PK0CWSCX] == "Y")
                                   /* screen has no data in its body*/
    PK0C401(); /* fill it with data*/
    PK0CW01.PK0CWBLS[PK0CWSCX] = "N";
  end

   /* ***********************************************************/
  converse PK0CM015 ;
   /* ***********************************************************/

  PK0CW01.PK0CWERR = "N"; /* init error flag*/

  PK0C410(); /* handle any special entries*/
       /* may exit appl from this process*/

  if (PK0CW01.PK0CWERR == "N" /* if no errors on the screen*/
   && PK0CW01.PK0CWEOS == "N")
    PK0C415();
  end

  PK0CW02.PK0CMSEL[1] = PK0CW02.PK0CMSEL[1]; /* test only*/

   /* at this point;*/
     /* if the end-of-screen flag (pk0cweos) is 'n'*/
        /* we go back to top of process pk0%000.*/
     /* if the end-of-screen flag (pk0cweos) is 'y'*/
        /* we return to pk0%050.*/

end // end PK0C400

// format header info
Function PK0C401()
   /* ************************************************************/
   /* *  move header data to screen*/
   /* * hdx - handle code counter*/
   /* * lbz - label code counter*/
   /* ************************************************************/

  set PK0CM015 initial; /* clear map of old data*/
  PK0CM010.XXXCURDT = VGVar.currentShortGregorianDate;
  PK0CM010.XXXERRID = "PK0CM";
  PK0CM010.XXXRVNBR = "00";
  PK0CM015.XWHCD = PK0CW01.XWHCD;
  PK0CM015.XWHABRV = PK0CW01.XWHABRV;

  set PK0CM015.PK0CMORP initialAttributes;
  set PK0CM015.PK1ALLNB initialAttributes;

  if (PK0CW01.XWHCD == "51")
    PK0CM015.PK0CM-SCHED-ID-LIT = "MANIFEST ID:";
    set PK0CM015.PK0CMORP normal;
  else
    PK0CM015.PK0CM-SCHED-ID-LIT = "SCHEDULE NBR:";
  end

  if (PK0CW02.PK1CUOID[PK0CW02X] == 0)
     /* next sentence - haven't viewed any line items*/
  else
    PK0CW02.PK0CMSEL[PK0CW02X] = "V";
    PK0CM015.PK1CUOID = PK0CW02.PK1CUOID[PK0CW02X];
    PK0CM015.PK1NORID = PK0CW02.PK1NORID[PK0CW02X];
    PK0CM015.XPPCD = PK0CW02.XPPCD[PK0CW02X];
    if (PK0CW01.XWHCD == "51")
      PK0CM015.PK1ALLNB = PK0CW02.PK1ALLNB[PK0CW02X];
    end
  end

  PK0CM015.XGPCD = PK0CW02.XGPCD[PK0CW02X];
  PK0CM015.PK1PKSCH = PK0CW02.PK1PKSCH[PK0CW02X];
  PK0CM015.SY1STNBR = PK0CW02.SY1STNBR[PK0CW02X];
  PK0CM015.SY1SSTNM = PK0CW02.SY1SSTNM[PK0CW02X];
  PK0CM015.SY2CLRID = PK0CW02.SY2CLRID[PK0CW02X];
  PK0CM015.XDMCD = PK0CW02.XDMCD[PK0CW02X];
  PK0CM015.XLCCD = PK0CW02.XLCCD[PK0CW02X];
  PK0CM015.XQACD = PK0CW02.XQACD[PK0CW02X];
  PK0CM015.PC2INSEG = PK0CW02.PC2INSEG[PK0CW02X];
  PK0CM015.XEGCD = PK0CW02.XEGCD[PK0CW02X];
  PK0CM015.XPGCD = PK0CW02.XPGCD[PK0CW02X];
  PK0CM015.XUMCD = PK0CW02.XUMCD[PK0CW02X];
  PK0CM015.PK5TIQTY = PK0CW02.PK5TIQTY[PK0CW02X];

  PK0CW01.PK0CWCT1 = 1;
  PK0CW01.PK0CWSZX = 1;

  if (converseVar.validationMsgNum != 0
   || converseVar.eventKey is pa2)
    return;
  end

  PK0C402(); /* move handling code to map*/

end // end PK0C401

// format handling and label info
Function PK0C402()
   /* ************************************************************/
   /* *  move packing and handling instructions to screen*/
   /* ************************************************************/

   /* move in packing and handling info*/

  PK0CW01.PK0CWCT1 = 1;
  PK0CW01.XGPCD = PK0CW02.XGPCD[PK0CW02X];

  if (PK0CW02.PK0CWHC1[PK0CW02X] != " ")
    PK0CW01.XHDCD = PK0CW02.PK0CWHC1[PK0CW02X];
    if (PK0CW01.XHDKEY in XHDTBL.XHDKEY)
      PK0CM015.XHDCD[PK0CWCT1] = XHDTBL.XHDCD[sysVar.arrayIndex];
      PK0CM015.XHDDESC[PK0CWCT1] = XHDTBL.XHDDESC[sysVar.arrayIndex];
      PK0CW01.PK0CWCT1 = PK0CW01.PK0CWCT1 + 1;
    end
  end

  if (PK0CW02.PK0CWHC2[PK0CW02X] != " ")
    PK0CW01.XHDCD = PK0CW02.PK0CWHC2[PK0CW02X];
    if (PK0CW01.XHDKEY in XHDTBL.XHDKEY)
      PK0CM015.XHDCD[PK0CWCT1] = XHDTBL.XHDCD[sysVar.arrayIndex];
      PK0CM015.XHDDESC[PK0CWCT1] = XHDTBL.XHDDESC[sysVar.arrayIndex];
      PK0CW01.PK0CWCT1 = PK0CW01.PK0CWCT1 + 1;
    end
  end

  if (PK0CW02.PK0CWHC3[PK0CW02X] != " ")
    PK0CW01.XHDCD = PK0CW02.PK0CWHC3[PK0CW02X];
    if (PK0CW01.XHDKEY in XHDTBL.XHDKEY)
      PK0CM015.XHDCD[PK0CWCT1] = XHDTBL.XHDCD[sysVar.arrayIndex];
      PK0CM015.XHDDESC[PK0CWCT1] = XHDTBL.XHDDESC[sysVar.arrayIndex];
      PK0CW01.PK0CWCT1 = PK0CW01.PK0CWCT1 + 1;
    end
  end

  if (PK0CW02.PK0CWHC4[PK0CW02X] != " ")
    PK0CW01.XHDCD = PK0CW02.PK0CWHC4[PK0CW02X];
    if (PK0CW01.XHDKEY in XHDTBL.XHDKEY)
      PK0CM015.XHDCD[PK0CWCT1] = XHDTBL.XHDCD[sysVar.arrayIndex];
      PK0CM015.XHDDESC[PK0CWCT1] = XHDTBL.XHDDESC[sysVar.arrayIndex];
      PK0CW01.PK0CWCT1 = PK0CW01.PK0CWCT1 + 1;
    end
  end

  if (PK0CW02.PK0CWHC5[PK0CW02X] != " ")
    PK0CW01.XHDCD = PK0CW02.PK0CWHC5[PK0CW02X];
    if (PK0CW01.XHDKEY in XHDTBL.XHDKEY)
      PK0CM015.XHDCD[PK0CWCT1] = XHDTBL.XHDCD[sysVar.arrayIndex];
      PK0CM015.XHDDESC[PK0CWCT1] = XHDTBL.XHDDESC[sysVar.arrayIndex];
      PK0CW01.PK0CWCT1 = PK0CW01.PK0CWCT1 + 1;
    end
  end

   /* move lable info to map*/

  PK0CW01.PK0CWCT1 = 1;

  if (PK0CW02.PK0CWLC1[PK0CW02X] != " ")
    PWRREC.PWRLBCD = PK0CW02.PK0CWLC1[PK0CW02X];
    PK0C932(); /* GET LABEL DESC.*/
    PK0CM015.PWRLBCD[PK0CWCT1] = PWRREC.PWRLBCD;
    PK0CM015.PWRLBABR[PK0CWCT1] = PWRREC.PWRLBABR;
    PK0CW01.PK0CWCT1 = PK0CW01.PK0CWCT1 + 1;
  end

  if (PK0CW02.PK0CWLC2[PK0CW02X] != " ")
    PWRREC.PWRLBCD = PK0CW02.PK0CWLC2[PK0CW02X];
    PK0C932(); /* GET LABEL DESC.*/
    PK0CM015.PWRLBCD[PK0CWCT1] = PWRREC.PWRLBCD;
    PK0CM015.PWRLBABR[PK0CWCT1] = PWRREC.PWRLBABR;
    PK0CW01.PK0CWCT1 = PK0CW01.PK0CWCT1 + 1;
  end

end // end PK0C402

// check pfkeys
Function PK0C410()
   /* ***********************************************************/
   /* *  check pf keys entry, or Option/item entry.            **/
   /* ***********************************************************/

  PK0CW01.PK0CWKEY = " "; /* init flag*/

  if (PKWREC.PKWINDEX == 0)
    if (converseVar.eventKey is pf1)
      XSPF1();
      return;
    end
  end

  if (converseVar.eventKey is pf3)
    PK0CW01.PK0CWCSC = "PK0CM005";
    PK0CW01.PK0CWERR = "N";
    PK0CW01.PK0CWEOS = "Y";
    if (PK0CW01.PK0CWKEY == "PA2") /* need to rebuild array*/
       /* next sentence*/
    else
      PK0CW01.PK0CWKEY = "PF3"; /* used in pk0c050*/
    end
    return;
  end

  if (converseVar.eventKey is pf4)
    XSPF4();
    return;
  end

  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "PK0B";
    PK0CW01.PK0CWERR = "Y";
    PK0CW01.PK0CWEOS = "Y";
    PK0CW01.PK0CWEOA = "Y";
    PK0CS61(); /* format line inquiry array*/
    return;
  end

  if (converseVar.eventKey is pf15)
    COMMAREA.CATOAP = "PK0D";
    PK0CW01.PK0CWERR = "Y";
    PK0CW01.PK0CWEOS = "Y";
    PK0CW01.PK0CWEOA = "Y";
    PK0CS62(); /* format cust inquiry array*/
    return;
  end

  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "PK0Z";
    PK0CW01.PK0CWERR = "Y";
    PK0CW01.PK0CWEOS = "Y";
    PK0CW01.PK0CWEOA = "Y";
    return;
  end

  if (converseVar.eventKey is pf19)
    COMMAREA.CATOAP = "PK0S";
    PK0CW01.PK0CWERR = "Y";
    PK0CW01.PK0CWEOS = "Y";
    PK0CW01.PK0CWEOA = "Y";
    return;
  end

  if (converseVar.eventKey is pf20)
    COMMAREA.CATOAP = "PK07";
    PK0CW01.PK0CWERR = "Y";
    PK0CW01.PK0CWEOS = "Y";
    PK0CW01.PK0CWEOA = "Y";
    return;
  end

  if (converseVar.eventKey is pa2) /* rebuild screen*/
    PK0CW01.PK0CWKEY = "PA2"; /* used if pf3 is done*/
    set PK0CM015.PK1CUOID cursor;
    PK0CM015.XWHCD = PK0CW01.XWHCD;
    PK0CW01.PK0CWERR = "Y";
    PK0CM005.CATOAP = " ";
    PK0CM005.CAITEM = " ";
    PK0CW01.PK0CW05X = 1;
    PK0CW01.PK0CW02X = 1;
    PK0CW01.PK0CWFST = "Y"; /* act as if first time thru*/
    PK0CW01.PK0CWBLS[PK0CWSCX] = "Y"; /* need to rebuild screen*/
    return;
  end

    /* ************************  fast path out ************/
  if (converseVar.eventKey is enter)
    if (PK0CM015.CATOAP == " "
     && PK0CM015.CAITEM == " ")
      return;
    else
      if (PK0CM015.CATOAP != " ")
        COMMAREA.CATOAP = PK0CM015.CATOAP;
        COMMAREA.CAITEM = PK0CM015.CAITEM;
        PK0CW01.PK0CWERR = "Y"; /* screen contained errors*/
        PK0CW01.PK0CWEOS = "Y"; /* end of screen*/
        PK0CW01.PK0CWEOA = "Y"; /* end of application*/
        if (COMMAREA.CATOAP == "PK0C")
          COMMAREA.CACURAPP = "  ";
          return;
        else
          return;
        end
      else
        if (PK0CM015.CATOAP == " "
         && PK0CM015.CAITEM != " ")
          converseLib.validationFailed(01); /* enter option field*/
          PK0CW01.PK0CWERR = "Y"; /* there are errors in*/
          return;
            /* ******************************************************/
        end
      end
    end
  end

   /* if no other condition was met, show message*/

  converseLib.validationFailed(12); /* invalid pfkey*/
  PK0CW01.PK0CWERR = "Y";
end // end PK0C410

Function PK0C415()
   /* ************************************************************/
   /* *                                                         **/
   /* *   check pf keys and 'enter' for next action.  since     **/
   /* *   most keys and fast path were already acted upon,after  **/
   /* *   the converse, we only have to take care of the rest.  **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    if (PK0CW01.PK0CWCSC == "PK0CM015")
      PK0CW01.PK0CW02X = PK0CW01.PK0CW02X + 1;

       /* find next array entry that should be shown*/

      while (PK0CW02.PK0CMSEL[PK0CW02X] != "S"
       && PK0CW01.PK0CW02X <= PK0CW01.PK0CWLSX[2])
        PK0CW01.PK0CW02X = PK0CW01.PK0CW02X + 1;
      end

       /* if shown all entries in screen, enter key takes*/
       /* user to previous screen*/

      if (PK0CW01.PK0CW02X > PK0CW01.PK0CWLSX[2])
        PK0CW01.PK0CWCSC = "PK0CM005";
        PK0CW01.PK0CWEOS = "Y";
        PK0CW01.PK0CWKEY = "PF3"; /* used in pk0c050*/
      else
        PK0CW01.PK0CWBLS[PK0CWSCX] = "Y";
      end
    else
      return;
    end
  end
end // end PK0C415

// select set for picking hdr
Function PK0C910()
   /* ************************************************************/
   /* *   select set on pk5rec*/
   /* ************************************************************/

  if (PK0CW01.PK0CW-DCMS-SEL-FL == "Y")
    TA1REC.TA1TBLVU = "VMPOLI01";
    TA1REC.TA1TBLKE = VMPOLI01.VMPOLI01-KEY;
    call "VMPOLI01" ("S1", SQLCA, VMPOLI01) {isNoRefresh = yes, isExternal = yes};
  else
    TA1REC.TA1TBLVU = "VPOOLI01";
    TA1REC.TA1TBLKE = PK5REC.PK5KEY;
    call "IO1990" ("S1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/
  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      PK0CW01.PK0CWERR = "Y"; /* there was an error*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C910 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN PRODUCTS FOR ORDERS";
    TA1REC.TA1MAP = "PK0CM005"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0CM005.XXXERRID = "PK0C910"; /* Error location*/
    return; /* Return to previous process*/

  end

end // end PK0C910

// select next for picking hdr
Function PK0C911()
   /* ************************************************************/
   /* *   fetch next record on pk5rec*/
   /* ************************************************************/

  if (PK0CW01.PK0CW-DCMS-SEL-FL == "Y")
    TA1REC.TA1TBLVU = "VMPOLI01";
    TA1REC.TA1TBLKE = VMPOLI01.VMPOLI01-KEY;
    call "VMPOLI01" ("N1", SQLCA, VMPOLI01) {isNoRefresh = yes, isExternal = yes};
  else
    TA1REC.TA1TBLVU = "VPOOLI01";
    TA1REC.TA1TBLKE = PK5REC.PK5KEY;
    call "IO1990" ("N1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes}; /* fetch next row*/
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C911 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN PRODUCTS FOR ORDERS";
    TA1REC.TA1MAP = "PK0CM005"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0CM005.XXXERRID = "PK0C911"; /* Error location*/
    return; /* Return to previous process*/

  end

end // end PK0C911

// close set for picking header
Function PK0C912()
   /* ************************************************************/
   /* *   close cursor for pk5rec*/
   /* ************************************************************/

  if (PK0CW01.PK0CW-DCMS-SEL-FL == "Y")
    TA1REC.TA1TBLVU = "VMPOLI01";
    TA1REC.TA1TBLKE = VMPOLI01.VMPOLI01-KEY;
    call "VMPOLI01" ("C1", SQLCA, VMPOLI01) {isNoRefresh = yes, isExternal = yes};
  else
    TA1REC.TA1TBLVU = "VPOOLI01";
    TA1REC.TA1TBLKE = PK5REC.PK5KEY;
    call "IO1990" ("C1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes}; /* close table set*/
  end

  if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C912 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN PRODUCTS FOR ORDERS";
    TA1REC.TA1MAP = "PK0CM005"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0CM005.XXXERRID = "PK0C912"; /* Error location*/
    return; /* Return to previous process*/

  end
end // end PK0C912

// select set for shiprec items
Function PK0C913()
   /* ************************************************************/
   /* *   select set from sr3rec*/
   /* ************************************************************/

  call "SR1100" ("SS", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes};
                                   /* ss dship.vsritm01 formtd vw*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      PK0CW01.PK0CWERR = "Y"; /* there was an error on the screen*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C913 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN PRODUCTS FOR ORDERS";
    TA1REC.TA1MAP = "PK0CM005"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRITM01"; /* Table view name*/
    TA1REC.TA1TBLKE = SR3REC.SR3KEYS; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0CM005.XXXERRID = "PK0C913"; /* Error location*/
    return; /* Return to previous process*/

  end

end // end PK0C913

// select next for shiprec items
Function PK0C914()
   /* *************************************************************/
   /* Fetch the next order from the selected shiprec orders set.*/
   /* *************************************************************/

  call "SR1100" ("SN", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C914 "; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT PRODUCT BY ORDER";
    TA1REC.TA1MAP = "PK0CM005"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRITM01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0CM005.XXXERRID = "PK0C914 "; /* Error location*/
    return; /* Return to previous process*/

  end

end // end PK0C914

// close set for shiprec items
Function PK0C915()
   /* ************************************************************/
   /* *   close set*/
   /* ************************************************************/

  call "SR1100" ("CS", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes}; /* close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C915 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN PRODUCTS FOR ORDERS";
    TA1REC.TA1MAP = "PK0CM005"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRITM01"; /* Table view name*/
    TA1REC.TA1TBLKE = PK5REC.PK5KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0CM005.XXXERRID = "PK0C915"; /* Error location*/
    return; /* Return to previous process*/

  end

end // end PK0C915

// select set from picking hdr
Function PK0C917()
   /* *************************************************************/
   /* select a set of orders from picking*/
   /* If end of file, get out*/
   /* If any error, indicate a system error.*/
   /* *************************************************************/

  PK4REC.XWHCD = PK0CW01.XWHCD;
  PK4REC.PK1CUOID = PK0CW01.PK1CUOID;
  if (PK0CW01.PK1NORID == 0)
    PK4REC.PK1NORID = -1;
  else
    PK4REC.PK1NORID = PK0CW01.PK1NORID;
  end

  PWIREC.PWIFUNC = "S3";
  call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C917 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN ORDERS FROM PICKING";
    TA1REC.TA1MAP = "PK0CM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOOLH01";
    TA1REC.TA1TBLKE = PK4REC.PK4GROUP;

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0CM001.XXXERRID = "PK0C917"; /* Error location*/

    return; /* Return to previous process*/
  end

end // end PK0C917

// select set from Mirror Pool hd
Function PK0C917-MP()
   /* *************************************************************/
   /* select a set of orders from Mirror Pool*/
   /* If end of file, get out*/
   /* If any error, indicate a system error.*/
   /* *************************************************************/

  set VMPOLH01 empty;
  set EPIREC empty;

  VMPOLH01.XWH-WHSE-CD = PK0CW01.XWHCD;
  VMPOLH01.PK-ORD-STKTF-ID = PK0CW01.PK1CUOID;

  if (PK0CW01.PK1NORID == 0) /* Sub-order not entered*/
    VMPOLH01.PK-NIKE-ORD-ID = -1;
  else
    VMPOLH01.PK-NIKE-ORD-ID = PK0CW01.PK1NORID;
  end

  if (PK0CW01.PK1ALLNB == 0)
    VMPOLH01.PK-NBR-TIMES-ALOC = -1;
  else
    VMPOLH01.PK-NBR-TIMES-ALOC = PK0CW01.PK1ALLNB;
  end

  EPIREC.EPI-IO-TASK = "S1";
  call "VMPOLH01" (EPIREC, SQLCA, VMPOLH01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C917MP"; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN ORDERS FROM MIRROR POOL";
    TA1REC.TA1MAP = "PK0CM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VMPOLH01";
    TA1REC.TA1TBLKE = VMPOLH01.VMPOLH01-KEY;

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0CM001.XXXERRID = "PK0C917MP"; /* Error location*/

    return; /* Return to previous process*/
  end

end // end PK0C917-MP

// select next from picking hdr
Function PK0C918()
   /* *************************************************************/
   /* Fetch the next order from the selected picking orders set.*/
   /* If end of file, get out*/
   /* If any error, indicate a system error.*/
   /* *************************************************************/

  PWIREC.PWIFUNC = "N3";
  call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

    return; /* Return to previous process*/
  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C918 "; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT ORDER FROM PICKING";
    TA1REC.TA1MAP = "PK0CM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOOLH01";
    TA1REC.TA1TBLKE = PK4REC.PK4GROUP;

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0CM001.XXXERRID = "PK0C918 "; /* Error location*/

    return; /* Return to previous process*/
  end

  if (PK0CWHDR != "Y")
     /* there are orders from picking to be read*/
    PK0CW05.PK0CWRFR[PK0CW05X] = "P";
    PK0CW05.XWHCD[PK0CW05X] = PK0CW01.XWHCD;
    PK0CW05.PK1CUOID[PK0CW05X] = PK4REC.PK1CUOID;
    PK0CW05.PK1NORID[PK0CW05X] = PK4REC.PK1NORID;
    PK0CW05.XPPCD[PK0CW05X] = PK4REC.XPPCD;
    PK0CW05.KUCCOID[PK0CW05X] = PK4REC.KUCCOID;
    PK0CW05.KUMSTRID[PK0CW05X] = PK4REC.KUMSTRID;
    PK0CW05.XNXCD[PK0CW05X] = PK4REC.XNXCD;
    PK0CW05.PK4OTUNT[PK0CW05X] = PK4REC.PK4OTUNT;
    PK0CW05.PK1WT[PK0CW05X] = PK4REC.PK4OTWGT;
    PK0CW05.PK1PKSCH[PK0CW05X] = 0;
    PK0CW05.PK0CMDTL[PK0CW05X] = " ";
    PK0CW05.SR1PKSDT[PK0CW05X] = 0;
  else
    if (PK4REC.PK1CUOID == PK0CW01.PK1CUOID /* if order nbr match*/
     && PK4REC.PK1NORID == PK0CW01.PK1NORID) /* and order id match*/
      PK0CW05.XPPCD[PK0CW05X] = PK4REC.XPPCD;
      PK0CW05.KUCCOID[PK0CW05X] = PK4REC.KUCCOID;
      PK0CW05.KUMSTRID[PK0CW05X] = PK4REC.KUMSTRID;
      PK0CW05.XNXCD[PK0CW05X] = PK4REC.XNXCD;
      PK0CW05.PK4OTUNT[PK0CW05X] = PK4REC.PK4OTUNT;
      PK0CW05.PK1WT[PK0CW05X] = PK4REC.PK4OTWGT;
    end
    return;
  end

  PK0CW05.PK0CMDTL[PK0CW05X] = "ALLOCATED";
  PK0CW05.SR1PKSDT[PK0CW05X] = PK4REC.ZZZSDT;

end // end PK0C918

// select next from Mirror Pool
Function PK0C918-MP()
   /* *************************************************************/
   /* Fetch the next order from the selected Mirror Pool set.*/
   /* If end of file, get out*/
   /* If any error, indicate a system error.*/
   /* *************************************************************/

  EPIREC.EPI-IO-TASK = "N1";
  call "VMPOLH01" (EPIREC, SQLCA, VMPOLH01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

    return; /* Return to previous process*/
  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C918MP"; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT ORDER FROM MIRROR POOL";
    TA1REC.TA1MAP = "PK0CM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VMPOLH01";
    TA1REC.TA1TBLKE = VMPOLH01.VMPOLH01-KEY;

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0CM001.XXXERRID = "PK0C918MP"; /* Error location*/

    return; /* Return to previous process*/
  end

  if (PK0CWHDR != "Y")
     /* there are orders from picking to be read*/
    PK0CW05.PK0CWRFR[PK0CW05X] = "M";
    PK0CW05.XWHCD[PK0CW05X] = PK0CW01.XWHCD;
    PK0CW05.PK1CUOID[PK0CW05X] = VMPOLH01.PK-ORD-STKTF-ID;
    PK0CW05.PK1NORID[PK0CW05X] = VMPOLH01.PK-NIKE-ORD-ID;
    PK0CW05.PK1ALLNB[PK0CW05X] = VMPOLH01.PK-NBR-TIMES-ALOC;
    PK0CW05.XPPCD[PK0CW05X] = VMPOLH01.XPP-PICK-PRTY-CD;
    PK0CW05.KUCCOID[PK0CW05X] = VMPOLH01.CU-CO-ID;
    PK0CW05.KUMSTRID[PK0CW05X] = VMPOLH01.CU-STOR-ID;
    PK0CW05.XNXCD[PK0CW05X] = VMPOLH01.XNX-DEPT-ID-XREF;
    PK0CW05.PK4OTUNT[PK0CW05X] = VMPOLH01.PK-TOT-ORD-QTY;
    PK0CW05.PK1WT[PK0CW05X] = VMPOLH01.PK-TOT-ORD-WT;
    PK0CW05.DCMS-ERROR-FL[PK0CW05X] = VMPOLH01.DCMS-ERROR-FL;
    PK0CW05.PK1PKSCH[PK0CW05X] = 0;
    PK0CW05.PK0CMDTL[PK0CW05X] = " ";
    PK0CW05.SR1PKSDT[PK0CW05X] = 0;
  else
    if (VMPOLH01.PK-ORD-STKTF-ID == PK0CW01.PK1CUOID
     && VMPOLH01.PK-NIKE-ORD-ID == PK0CW01.PK1NORID)
      PK0CW05.XPPCD[PK0CW05X] = VMPOLH01.XPP-PICK-PRTY-CD;
      PK0CW05.KUCCOID[PK0CW05X] = VMPOLH01.CU-CO-ID;
      PK0CW05.KUMSTRID[PK0CW05X] = VMPOLH01.CU-STOR-ID;
      PK0CW05.XNXCD[PK0CW05X] = VMPOLH01.XNX-DEPT-ID-XREF;
      PK0CW05.PK4OTUNT[PK0CW05X] = VMPOLH01.PK-TOT-ORD-QTY;
      PK0CW05.PK1WT[PK0CW05X] = VMPOLH01.PK-TOT-ORD-WT;
    end
    return;
  end

  PK0CW05.SR1PKSDT[PK0CW05X] = VMPOLH01.DCMS-STAT-CHNG-DT;
  if (VMPOLH01.DCMS-ORD-STAT-CD == "A")
    PK0CW05.PK0CMDTL[PK0CW05X] = "PASSED  ";
  else
    if (VMPOLH01.DCMS-ORD-STAT-CD == "R")
      PK0CW05.PK0CMDTL[PK0CW05X] = "RELEASED";
    else
      if (VMPOLH01.DCMS-ORD-STAT-CD == "S")
        PK0CW05.PK0CMDTL[PK0CW05X] = "SELECTED";
      else
        if (VMPOLH01.DCMS-ORD-STAT-CD == "P")
          PK0CW05.PK0CMDTL[PK0CW05X] = "PACK&HOLD";
        else
          if (VMPOLH01.DCMS-ORD-STAT-CD == "D")
            PK0CW05.PK0CMDTL[PK0CW05X] = "DEALLOCATD";
          else
            if (VMPOLH01.DCMS-ERROR-FL == "Y")
              PK0CW05.PK0CMDTL[PK0CW05X] = "IN REVIEW";
            else
              PK0CW05.PK0CMDTL[PK0CW05X] = "IN PROCESS";
            end
          end
        end
      end
    end
  end

end // end PK0C918-MP

// close cursor for picking hdr
Function PK0C919()
   /* ************************************************************/
   /* *   close cursor for pk4rec*/
   /* ************************************************************/

  PWIREC.PWIFUNC = "C3";
  call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C919 "; /* Process name*/
    TA1REC.TA1LOC = "CLOSE CURSOR FOR PICKING";
    TA1REC.TA1MAP = "PK0CM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
    TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0CM001.XXXERRID = "PK0C919"; /* Error location*/

    return; /* Return to previous process*/
  end

end // end PK0C919

// close cursor for Mirror Pool
Function PK0C919-MP()
   /* ************************************************************/
   /* *   close cursor for vmpolh01*/
   /* ************************************************************/

  EPIREC.EPI-IO-TASK = "C1";
  call "VMPOLH01" (EPIREC, SQLCA, VMPOLH01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C919MP"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE CURSOR FOR MIRROR POOL";
    TA1REC.TA1MAP = "PK0CM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VMPOLH01";
    TA1REC.TA1TBLKE = VMPOLH01.VMPOLH01-KEY;

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0CM001.XXXERRID = "PK0C919MP"; /* Error location*/

    return; /* Return to previous process*/
  end

end // end PK0C919-MP

// select set from shiprec order
Function PK0C920()
   /* *************************************************************/
   /* select a set of orders from shiprec*/
   /* If end of file, get out*/
   /* If any error, indicate a system error.*/
   /* *************************************************************/

  SR2REC.XWHCD = PK0CW01.XWHCD;
  SR2REC.OP1CUOID = PK0CW01.PK1CUOID;
  if (PK0CW01.PK1NORID == 0)
    SR2REC.OP1NORID = -1;
  else
    SR2REC.OP1NORID = PK0CW01.PK1NORID;
  end
  if (PK0CW01.PK1PKSCH == 0)
    SR2REC.PK1PKSCH = -1;
  else
    SR2REC.PK1PKSCH = PK0CW01.PK1PKSCH;
  end
  SR2REC.OP1NTMAL = -1;

  call "IO0800" ("SS", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C920 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN ORDERS FROM SHIPREC";
    TA1REC.TA1MAP = "PK0CM001"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
    TA1REC.TA1TBLKE = SR2REC.SR2KEYS; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0CM001.XXXERRID = "PK0C920"; /* Error location*/
    return; /* Return to previous process*/

  end
end // end PK0C920

// select next from shiprec order
Function PK0C921()
   /* *************************************************************/
   /* Fetch the next order from the selected shiprec orders set.*/
   /* If end of file, get out*/
   /* If any error, indicate a system error.*/
   /* *************************************************************/

  call "IO0800" ("SN", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

    return; /* Return to previous process*/
  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C921 "; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT ORDER FROM SHIPREC";
    TA1REC.TA1MAP = "PK0CM001"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    PK0CM001.XXXERRID = "PK0C921 "; /* Error location*/

    return; /* Return to previous process*/
  end

  if (PK0CW05.PK0CMDTL[PK0CW05X] == "ALLOCATED"
   || PK0CW05.PK0CMDTL[PK0CW05X] == "PASSED"
   || PK0CW05.PK0CMDTL[PK0CW05X] == "RELEASED"
   || PK0CW05.PK0CMDTL[PK0CW05X] == "SELECTED"
   || PK0CW05.PK0CMDTL[PK0CW05X] == "PACK&HOLD"
   || PK0CW05.PK0CMDTL[PK0CW05X] == "IN PROCESS"
   || PK0CW05.PK0CMDTL[PK0CW05X] == "IN REVIEW"
   || PK0CW05.PK0CMDTL[PK0CW05X] == "DEALLOCATD")
    return; /* Return to previous process*/
  end

  PK0C923(); /* find unique sr1rec*/

  if (PK0CW01.PK0CWHDR != "Y")
     /* there are orders from shiprec to be read*/
    PK0CW05.PK0CWRFR[PK0CW05X] = "S";
    PK0CW05.XWHCD[PK0CW05X] = PK0CW01.XWHCD;
    PK0CW05.PK1CUOID[PK0CW05X] = SR2REC.OP1CUOID;
    PK0CW05.PK1NORID[PK0CW05X] = SR2REC.OP1NORID;
    PK0CW05.XPPCD[PK0CW05X] = SR2REC.XPPCD;
    PK0CW05.PK1PKSCH[PK0CW05X] = SR2REC.PK1PKSCH;
    PK0CW05.KUCCOID[PK0CW05X] = SR2REC.KUCCOID;
    PK0CW05.KUMSTRID[PK0CW05X] = SR2REC.KUMSTRID;
    PK0CW05.XNXCD[PK0CW05X] = SR2REC.XNXCD;
    PK0CW05.PK1ALLNB[PK0CW05X] = SR2REC.OP1NTMAL;
  else
    if (SR2REC.OP1CUOID == PK0CW01.PK1CUOID /* if order nbr match*/
     && SR2REC.OP1NORID == PK0CW01.PK1NORID /* and order id match*/
     && SR2REC.PK1PKSCH == PK0CW01.PK1PKSCH) /* and sched nbr match*/
      PK0CW05.XPPCD[PK0CW05X] = SR2REC.XPPCD;
      PK0CW05.KUCCOID[PK0CW05X] = SR2REC.KUCCOID;
      PK0CW05.KUMSTRID[PK0CW05X] = SR2REC.KUMSTRID;
      PK0CW05.XNXCD[PK0CW05X] = SR2REC.XNXCD;
      PK0CW05.PK4OTUNT[PK0CW05X] = SR2REC.SR2QTYSH;
      PK0CW05.PK1ALLNB[PK0CW05X] = SR2REC.OP1NTMAL;
      if (PK0CW01.XWHCD == "51"
       && SR1REC.TF1CARNM == "DCMS")
        PK0CW05.PK1WT[PK0CW05X] = SR2REC.PK1WT;
      else
        if (SR2REC.SR1PKSFL == "Y")
          PK0CW05.PK1WT[PK0CW05X] = SR2REC.PK1WT;
        else
          PK0C933();
          PK0CW05.PK1WT[PK0CW05X] = PK0CW-EXPC-TOT-ORD-WT;
        end
      end
      PK0CW05.SR2TOTCF[PK0CW05X] = SR2REC.SR2TOTCF;

      return;
    end
  end

  if (SR2REC.SR1PKSFL == "N" /* order not picked*/
   && SR1REC.SR1PKSFL == "Y" /* but schedule is picked*/
   && SR1REC.SR1PKAFL == "Y") /* and has not been processed*/

    SR2REC.SR1PKSFL = "Y"; /* indicate order picked*/
    SR2REC.SR1PKSDT = SR1REC.SR1PKSDT; /* pick status date*/
  end

  if (SR1REC.SR1SHPDT == 0 /* NOT SHIPPED*/
   || SR2REC.SR1PKSFL != "Y") /* or not picked  (pm 10/30/87)*/

    if (PK0CW01.XWHCD == "51"
     && SR1REC.TF1CARNM == "DCMS") /* Order processed by DCMS*/

      PK0CW05.SR1PKSDT[PK0CW05X] = SR1REC.SR1PKSDT;
      if (SR2REC.SR-STOP-ORD-SHP-FL == "Y")
        PK0CW05.PK0CMDTL[PK0CW05X] = "VOIDED  ";
      else
        if (SR1REC.SR1SHPDT == 0)
          PK0CW05.PK0CMDTL[PK0CW05X] = "SNB     "; /* Shpd not billd*/
        else
          PK0CW05.PK0CMDTL[PK0CW05X] = "SHIPPED ";
          PK0CW05.SR1PKSDT[PK0CW05X] = SR1REC.SR1SHPDT;
        end
      end
    else
      if (SR2REC.SR1PKSFL == "Y") /* picked status*/
        PK0CW05.PK0CMDTL[PK0CW05X] = "PICKED    ";
        PK0CW05.SR1PKSDT[PK0CW05X] = SR2REC.SR1PKSDT;
      else
        PK0CW05.PK0CMDTL[PK0CW05X] = "SCHEDULED ";
        PK0CW05.SR1PKSDT[PK0CW05X] = SR2REC.ZZZSDT;
      end
    end
  else
    PK0CW05.PK0CMDTL[PK0CW05X] = "SHIPPED   ";
    PK0CW05.SR1PKSDT[PK0CW05X] = SR1REC.SR1SHPDT;

    if (PK0CW01.XWHCD == "51"
     && SR1REC.TF1CARNM == "DCMS"
     && SR2REC.SR-STOP-ORD-SHP-FL == "Y") /* Order processed by DCMS*/
      PK0CW05.PK0CMDTL[PK0CW05X] = "VOIDED  ";
    end
  end

  if (SR2REC.OP1CUOID == PK0CW05.PK1CUOID[PK0CW05X]
   && SR2REC.OP1NORID == PK0CW05.PK1NORID[PK0CW05X]
   && SR2REC.XPPCD == PK0CW05.XPPCD[PK0CW05X]
   && SR2REC.PK1PKSCH == PK0CW05.PK1PKSCH[PK0CW05X])

    PK0CW05.PK4OTUNT[PK0CW05X] = SR2REC.SR2QTYSH;
    if (PK0CW01.XWHCD == "51"
     && SR1REC.TF1CARNM == "DCMS")
      PK0CW05.PK1WT[PK0CW05X] = SR2REC.PK1WT;
    else
      if (SR2REC.SR1PKSFL == "Y")
        PK0CW05.PK1WT[PK0CW05X] = SR2REC.PK1WT;
      else
        PK0C933();
        PK0CW05.PK1WT[PK0CW05X] = PK0CW-EXPC-TOT-ORD-WT;
      end
    end
    PK0CW05.SR2TOTCF[PK0CW05X] = SR2REC.SR2TOTCF;
  end

end // end PK0C921

// close cursor for shiprec order
Function PK0C922()
   /* ************************************************************/
   /* *   close cursor for sr2rec*/
   /* ************************************************************/

  call "IO0800" ("CS", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes}; /* close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C922 "; /* Process name*/
    TA1REC.TA1LOC = "CLOSE CURSOR FOR SHIPREC";
    TA1REC.TA1MAP = "PK0CM001"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
    TA1REC.TA1TBLKE = SR2REC.SR2KEYS; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0CM001.XXXERRID = "PK0C922"; /* Error location*/
    return; /* Return to previous process*/

  end
end // end PK0C922

// select batch status from sr hd
Function PK0C923()
   /* *************************************************************/
   /* select data from from shiprec*/
   /* If end of file, get out*/
   /* If any error, indicate a system error.*/
   /* *************************************************************/

  set SR1REC empty;
  SR1REC.XWHCD = SR2REC.XWHCD;
  SR1REC.PK1PKSCH = SR2REC.PK1PKSCH;

  call "IO0790" ("S ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C923 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN BATCH STATUS FOR ORDERS";
    TA1REC.TA1MAP = "PK0CM001"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRHDR01"; /* Table view name*/
    TA1REC.TA1TBLKE = SR1REC.SR1KEYS; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0CM001.XXXERRID = "PK0C923"; /* Error location*/
    return; /* Return to previous process*/

  end
end // end PK0C923

// select unique from pk style
Function PK0C924()
   /* *************************************************************/
   /* Get the selected record from picking for total weight*/
   /* If end of file, get out*/
   /* If any error, indicate a system error.*/
   /* *************************************************************/

  PKNREC.XGPCD = PK0CW02.XGPCD[PK0CWARX];
  PKNREC.SY1STNBR = PK0CW02.SY1STNBR[PK0CWARX];
  PKNREC.SY2CLRID = PK0CW02.SY2CLRID[PK0CWARX];
  PKNREC.XDMCD = PK0CW02.XDMCD[PK0CWARX];

  call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes}; /* Select style/color*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Good return*/

    /* CANADA 08/11/95*/

    if (PK0CW01.XWHCD == "42")

      /* format ta1rec in case of bad return code from call to SY2000*/

      TA1REC.TA1PGMNM = "PK0C"; /* CANA program name*/
      TA1REC.TA1LOC = "PK0C924"; /* CANA sgrp name*/

      XSPK-CALL-SY2000(); /* CANA call SY2000 to get*/
                                /* product region record*/
      if (WSY2000.WSY2000-RETURN-CODE == 0) /* CANA row found*/
        return;
      else
        if (WSY2000.WSY2000-RETURN-CODE == 02) /* CANA row not found*/
          PK0CW02.SY1SSTNM[PK0CWARX] = " ";
          PK0CW02.XLCCD[PK0CWARX] = " ";
          return;
        else
          if (WSY2000.WSY2000-RETURN-CODE == 98) /* CANA database busy*/
            converseLib.validationFailed(28); /* data was in use by another appl*/
            TA1REC.TA1FUNC = "POST"; /* Termination function*/
          else
            converseLib.validationFailed(29); /* Indicate system error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          end

          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "PK0C924 "; /* Process name*/
          TA1REC.TA1LOC = "SELECT SY2000 REGIONAL DATA";
          TA1REC.TA1MAP = "PK0CM005"; /* Map name*/
          TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VSYREG02"; /* Table view name*/
          TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* table key*/

                                             /* Error diagnosis routine*/
          call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

          PK0CM005.XXXERRID = "PK0C924 "; /* Error location*/
          return; /* Return to previous process*/

        end
      end
    end
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/

    PK0CW02.SY1SSTNM[PK0CWARX] = " ";
    PK0CW02.XLCCD[PK0CWARX] = " ";
    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(28); /* data was in use by another appl*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C924 "; /* Process name*/
    TA1REC.TA1LOC = "SELECT WEIGHT AND DESCRIPTION";
    TA1REC.TA1MAP = "PK0CM005"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPKSTY01"; /* Table view name*/
    TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0CM005.XXXERRID = "PK0C924 "; /* Error location*/
    return; /* Return to previous process*/

  end
end // end PK0C924

// select sizes with sy1190
Function PK0C925()
   /* *************************************************************/
   /* select valid sizes using dpick.vpkscl01 and dpick.vpksty01*/
   /* If end of file, get out*/
   /* If any error, indicate a system error.*/
   /* *************************************************************/

  call "SY1190" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes}; /* select the available sizes*/

  if (SYPREC.SYPRC == 10 /* size row not found*/
   || SYPREC.SYPRC == 11 /* style row not found*/
   || SYPREC.SYPRC == 16) /* scale row not found*/
    if (converseVar.eventKey is pa2) /* dont want to show message*/
       /* NEXT SENTENCE*/
    else
      converseLib.validationFailed(45); /* no data was found for this product*/
                                   /* nbr*/
    end
    PK0CM010.XXXERRID = "PK0C925";
    return;
  end

  if (SYPREC.SYPRC == 9 /* signify db2 problems*/
   || SYPREC.SYPRC == 99)

    if (SYPREC.SYPRC == 9) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else
      if (SYPREC.SYPRC == 99) /* Unexpected return code*/

        converseLib.validationFailed(29); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      end
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C925 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN SIZE SCALE FOR PRODUCTS";
    TA1REC.TA1MAP = "PK0CM010"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPKSTY01"; /* Table view name*/
    TA1REC.TA1TBLKE = SYPREC.SYPDATA; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0CM010.XXXERRID = "PK0C925"; /* Error location*/
    return; /* Return to previous process*/

  end

end // end PK0C925

// select unique from pick item
Function PK0C927()
   /* ************************************************************/
   /* *   select unique on pk5rec for quantities*/
   /* ************************************************************/

  call "IO1990" ("S ", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes}; /* fetch next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/

      converseLib.validationFailed(28); /* indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C927 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN QUANTITES FOR PRODUCTS";
    TA1REC.TA1MAP = "PK0CM010"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/
    TA1REC.TA1TBLKE = PK5REC.PK5KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0CM010.XXXERRID = "PK0C927"; /* Error location*/
    return; /* Return to previous process*/

  end

end // end PK0C927

// Select quantities frm vmpoli01
Function PK0C927M()
   /* ------------------------------------------------------------------*/
   /* Select unique on vmpoli01 for quantities.*/
   /* ------------------------------------------------------------------*/

  call "VMPOLI01" ("S ", SQLCA, VMPOLI01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not avialable*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system*/
      TA1REC.TA1FUNC = "RETN";

    end

    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1PGMNM = "PK0C927M";
    TA1REC.TA1LOC = "OBTAIN QUANTITIES FOR PRODUCTS";
    TA1REC.TA1MAP = "PKOCM010";
    TA1REC.TA1DBASE = "DPICK  ";
    TA1REC.TA1TBLVU = "VMPOLI01";
    TA1REC.TA1TBLKE = VMPOLI01.VMPOLI01-KEY;

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};

    PK0CM010.XXXERRID = "PK0C927M";
    return;

  end
end // end PK0C927M

// select unique from shiprec itm
Function PK0C928()
   /* ************************************************************/
   /* *   select unique on sr3rec for quantities*/
   /* ************************************************************/

  call "SR1100" ("S ", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes}; /* fetch next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911)

      converseLib.validationFailed(28); /* resource not available*/
      TA1REC.TA1FUNC = "POST"; /* termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C928 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN QUANTITES FOR PRODUCTS";
    TA1REC.TA1MAP = "PK0CM010"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRITM01"; /* Table view name*/
    TA1REC.TA1TBLKE = SR3REC.SR3KEYS; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0CM010.XXXERRID = "PK0C928"; /* Error location*/
    return; /* Return to previous process*/

  end

end // end PK0C928

// select unique from pick hdr
Function PK0C929()
   /* *************************************************************/
   /* select a unique order from picking*/
   /* If end of file, get out*/
   /* If any error, indicate a system error.*/
   /* *************************************************************/

  PWIREC.PWIFUNC = "S ";
  call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100)

    PK0CW05.PK4OTUNT[PK0CW05X] = 0;
    PK0CW05.PK1WT[PK0CW05X] = 0;
    return;

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C929 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN ORDER FROM PICKING";
    TA1REC.TA1MAP = "PK0CM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
    TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0CM001.XXXERRID = "PK0C929"; /* Error location*/
    return; /* Return to previous process*/

  end
end // end PK0C929

// Select Order from Mirror Pool
Function PK0C929M()
   /* -------------------------------------------------------------------*/
   /* Select a unique order from the Pikcing Mirror Order Pool. If not*/
   /* found, get out. If any error, indicate a system error.*/
   /* -------------------------------------------------------------------*/

  EPIREC.EPI-IO-TASK = "S";
  call "VMPOLH01" (EPIREC, SQLCA, VMPOLH01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 100) /* No order header was found*/

    PK0CW05.PK4OTUNT[PK0CW05X] = 0;
    PK0CW05.PK1WT[PK0CW05X] = 0;
    return;

  end

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)

      converseLib.validationFailed(28);
      TA1REC.TA1FUNC = "POST";

    else

      converseLib.validationFailed(29);
      TA1REC.TA1FUNC = "RETN";

    end

    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1PGMNM = "PK0C929M";
    TA1REC.TA1LOC = "OBTAIN ORDER FROM MIRROR POOL";
    TA1REC.TA1MAP = "PK0CM001";
    TA1REC.TA1DBASE = "DPICK  ";
    TA1REC.TA1TBLVU = "VMPOLH01";
    TA1REC.TA1TBLKE = VMPOLH01-KEY;

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};

    PK0CM001.XXXERRID = "PK0C929M";
    return;

  end

end // end PK0C929M

// select unique from shiprec itm
Function PK0C930()
   /* *************************************************************/
   /* select a unique order from shiprec*/
   /* If end of file, get out*/
   /* If any error, indicate a system error.*/
   /* *************************************************************/

  call "IO0800" ("S ", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100)

    PK0CW05.PK4OTUNT[PK0CW05X] = 0;
    PK0CW05.PK1WT[PK0CW05X] = 0;
    return;

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C930 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN ORDER FROM SHIPREC";
    TA1REC.TA1MAP = "PK0CM001"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
    TA1REC.TA1TBLKE = SR2REC.SR2KEYS; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0CM001.XXXERRID = "PK0C930"; /* Error location*/
    return; /* Return to previous process*/

  end
end // end PK0C930

// select cust nbr from pick cust
Function PK0C931()
   /* *************************************************************/
   /* select data from picking customer table*/
   /* If end of file, get out*/
   /* If any error, indicate a system error.*/
   /* *************************************************************/

  call "IO1830" ("S ", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

    return;

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0C931 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN CUST NBR FROM PICK CUST";
    TA1REC.TA1MAP = "PK0CM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPKCUS01"; /* Table view name*/
    TA1REC.TA1TBLKE = PK6REC.PK6GROUP; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0CM001.XXXERRID = "PK0C931"; /* Error location*/
    return; /* Return to previous process*/

  end
end // end PK0C931

// select label code abbreviation
Function PK0C932()
   /* *************************************************************/
   /* select data from DPICK.VZLABL01*/
   /* If end of file, get out*/
   /* If any error, indicate a system error.*/
   /* *************************************************************/

  call "IO5750" ("S ", SQLCA, PWRREC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
    PWRREC.PWRLBABR = "XXXXXX";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
    return;
  end
                                  /* Unexpected return codes*/

  if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PK0C932 "; /* Process name*/
  TA1REC.TA1LOC = "OBTAIN LABEL CODE ABBRV ";
  TA1REC.TA1MAP = "PK0CM015"; /* Map name*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VZLABL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWRREC.PWRLBCD; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PK0CM015.XXXERRID = "PK0C932"; /* Error location*/
  return; /* Return to previous process*/
end // end PK0C932

// calculate expected weight
Function PK0C933()
  PK0CS65(); /* declare vsplit01 cursor*/
  PK0CW01.PK0CW-EXPC-TOT-ORD-WT = 0;
  PK0CW01.PK0CW-PREV-CRTN-NBR = 0;
  PK0CS66(); /* fetch first vsplit01 row*/

  while (SQLCA.VAGen_SQLCODE == 0)
    if (PWPREC.PKDNCSQN == PK0CW01.PK0CW-PREV-CRTN-NBR)

    else
      PK0CW01.PK0CW-EXPC-TOT-ORD-WT = PK0CW01.PK0CW-EXPC-TOT-ORD-WT                    + PWPREC.PK-EXPC-CRTN-WT;
      PK0CW01.PK0CW-PREV-CRTN-NBR = PWPREC.PKDNCSQN;
    end
    PK0CS66(); /* fetch next vsplit01 row*/
  end

  PK0CS67(); /* close vsplit01 cursor*/

end // end PK0C933

// page backward
Function PK0CS07()
   /* ************************************************************/
   /* *    this process handles the entry of pf key 7           **/
   /* *             (paging backward)                           **/
   /* ************************************************************/

  PK0CW01.PK0CWARX = PK0CW01.PK0CWA1X[PK0CWSCX]; /* set array index*/

  if (PK0CW01.PK0CWMXL[PK0CWSCX] >= PK0CW01.PK0CWARX)
    converseLib.validationFailed(37); /* no previous page to display*/
    PK0CW01.PK0CWARX = 1;
  else
    PK0CW01.PK0CWARX = PK0CW01.PK0CWARX - PK0CW01.PK0CWMXL[PK0CWSCX];
  end

  PK0CW01.PK0CWA1X[PK0CWSCX] = PK0CW01.PK0CWARX;

  PK0CW01.PK0CWBLS[PK0CWSCX] = "Y";
   /* need to rebuild screen to show new data*/
  PK0CW01.PK0CWBLA[PK0CWSCX] = "N";
   /* don't need to rebuild array, already have data*/

end // end PK0CS07

// page forward
Function PK0CS08()
   /* ************************************************************/
   /* *   this process handles the entry of pf key 8            **/
   /* *                                                         **/
   /* ************************************************************/

  PK0CW01.PK0CWARX = PK0CW01.PK0CWA1X[PK0CWSCX];

  PK0CW01.PK0CWARX = PK0CW01.PK0CWARX + PK0CW01.PK0CWMXL[PK0CWSCX];

  PK0CW01.PK0CWBLS[PK0CWSCX] = "Y";
   /* need to rebuild screen to show new data*/
  PK0CW01.PK0CWBLA[PK0CWSCX] = "N";
   /* don't need to rebuild array, already have data*/

  if (PK0CW01.PK0CWARX > PK0CW01.PK0CWLSX[PK0CWSCX])
    converseLib.validationFailed(38); /* no more pages to display*/
    return;
  end

  PK0CW01.PK0CWA1X[PK0CWSCX] = PK0CW01.PK0CWARX;

end // end PK0CS08

// build screen lines for m005
Function PK0CS25()
   /* ************************************************************/
   /* *                                                         **/
   /* *   take data from the database array and place           **/
   /* *   onto the screen on line at a time.                    **/
   /* ************************************************************/

   /* if index LE last bucket in array*/
  if (PK0CW01.PK0CWARX <= PK0CW01.PK0CWLSX[PK0CWSCX])
    PK0CM005.PK0CMSEL[PK0CWLNX] = PK0CW02.PK0CMSEL[PK0CWARX];
    PK0CM005.XGPCD[PK0CWLNX] = PK0CW02.XGPCD[PK0CWARX];
    PK0CM005.SY1STNBR[PK0CWLNX] = PK0CW02.SY1STNBR[PK0CWARX];
    PK0CM005.SY2CLRID[PK0CWLNX] = PK0CW02.SY2CLRID[PK0CWARX];
    PK0CM005.XDMCD[PK0CWLNX] = PK0CW02.XDMCD[PK0CWARX];
    PK0CM005.XLCCD[PK0CWLNX] = PK0CW02.XLCCD[PK0CWARX];
    PK0CM005.XQACD[PK0CWLNX] = PK0CW02.XQACD[PK0CWARX];
    PK0CM005.PC2INSEG[PK0CWLNX] = PK0CW02.PC2INSEG[PK0CWARX];
    PK0CM005.XEGCD[PK0CWLNX] = PK0CW02.XEGCD[PK0CWARX];
    PK0CM005.XPGCD[PK0CWLNX] = PK0CW02.XPGCD[PK0CWARX];
    PK0CM005.XUMCD[PK0CWLNX] = PK0CW02.XUMCD[PK0CWARX];
    PK0CM005.XOWCD[PK0CWLNX] = PK0CW02.XOWCD[PK0CWARX];
    PK0CM005.SY1SSTNM[PK0CWLNX] = PK0CW02.SY1SSTNM[PK0CWARX];
    PK0CM005.PK5TIQTY[PK0CWLNX] = PK0CW02.PK5TIQTY[PK0CWARX];
    PK0CWWA1 = PK0CW02.OP2AUPRC[PK0CWARX];
    PK0CW02.PK0CWUPR[PK0CWARX] = PK0CW02.PK5TIQTY[PK0CWARX] * PK0CWWA1;
    PK0CM005.PK0CMUPR[PK0CWLNX] = PK0CW02.PK0CWUPR[PK0CWARX];
    if (PK0CW02.PK0CWHC1[PK0CWARX] == " " /* handling code*/
     && PK0CW02.PK0CWHC2[PK0CWARX] == " " /* handling code*/
     && PK0CW02.PK0CWHC3[PK0CWARX] == " " /* handling code*/
     && PK0CW02.PK0CWHC4[PK0CWARX] == " " /* handling code*/
     && PK0CW02.PK0CWHC5[PK0CWARX] == " ") /* handling code*/

      PK0CM005.OP1SPHDF[PK0CWLNX] = "N";

    else

      PK0CM005.OP1SPHDF[PK0CWLNX] = "Y";

    end

    if (PK0CW02.PK0CWLC1 == " " /* label code*/
     && PK0CW02.PK0CWLC2 == " ") /* label code*/

      PK0CM005.OP1SPLBF[PK0CWLNX] = "N";

    else

      PK0CM005.OP1SPLBF[PK0CWLNX] = "Y";

    end

    if (PK0CW02.SR3DALFL[PK0CWARX] == "Y")
      PK0CM005.PK0CMSEL[PK0CWLNX] = "*";
      if (PK0CWLNX == 1)
        set PK0CM005.PK0CMSEL[PK0CWLNX] cursor, bold;
      else
        set PK0CM005.PK0CMSEL[PK0CWLNX] bold;
      end
      converseLib.validationFailed(321); /* warning deallocated item*/
    else
      if (PK0CWLNX == 1)
        set PK0CM005.PK0CMSEL[PK0CWLNX] cursor, normal;
      else
        set PK0CM005.PK0CMSEL[PK0CWLNX] normal;
      end
    end
  end

end // end PK0CS25

// clear screen lines for m005
Function PK0CS26()
   /* ************************************************************/
   /* *   clear lines on screen*/
   /* ************************************************************/

  PK0CM005.PK0CMSEL[PK0CWLNX] = " ";
  PK0CM005.XGPCD[PK0CWLNX] = " ";
  PK0CM005.SY1STNBR[PK0CWLNX] = " ";
  PK0CM005.SY2CLRID[PK0CWLNX] = " ";
  PK0CM005.XDMCD[PK0CWLNX] = " ";
  PK0CM005.XLCCD[PK0CWLNX] = " ";
  PK0CM005.XQACD[PK0CWLNX] = " ";
  PK0CM005.PC2INSEG[PK0CWLNX] = " ";
  PK0CM005.XEGCD[PK0CWLNX] = " ";
  PK0CM005.XPGCD[PK0CWLNX] = " ";
  PK0CM005.XUMCD[PK0CWLNX] = " ";
  PK0CM005.XOWCD[PK0CWLNX] = " ";
  PK0CM005.SY1SSTNM[PK0CWLNX] = " ";
  PK0CM005.PK5TIQTY[PK0CWLNX] = 0;
  PK0CM005.PK0CMUPR[PK0CWLNX] = 0;
  PK0CM005.OP1SPHDF[PK0CWLNX] = " ";
  PK0CM005.OP1SPLBF[PK0CWLNX] = " ";
  set PK0CM005.PK0CMSEL[PK0CWLNX] initialAttributes;

end // end PK0CS26

// handle array processing
Function PK0CS30()
   /* ************************************************************/
   /* *   load products into working storage array*/
   /* ************************************************************/

  set PK0CM005 initial; /* clear map of old data*/
  if (PK0CW05.XWHCD[PK0CW05X] == " ")
    PK0CW05.XWHCD[PK0CW05X] = PK0CW01.XWHCD;
  end
  PK0CM005.XWHCD = PK0CW05.XWHCD[PK0CW05X];
  PK0CM005.XWHABRV = PK0CW01.XWHABRV;

  set PK0CM005.PK0CMORP initialAttributes;
  set PK0CM005.PK1ALLNB initialAttributes;

  if (PK0CM005.XWHCD == "51")
    set PK0CM005.PK0CMORP skip;
    PK0CM005.PK0CM-SCHED-ID-LIT = "MANIFEST ID:";
  else
    set PK0CM005.PK1ALLNB skip, noHighLight;
    PK0CM005.PK0CM-SCHED-ID-LIT = "SCHEDULE NBR:";
  end

  if (PK0CW05.PK1CUOID[PK0CW05X] == 0)
     /* next sentence*/
  else
    PK0CM005.PK1CUOID = PK0CW05.PK1CUOID[PK0CW05X];
    PK0CM005.PK1NORID = PK0CW05.PK1NORID[PK0CW05X];
    PK0CM005.XPPCD = PK0CW05.XPPCD[PK0CW05X];
    PK0CM005.PK1PKSCH = PK0CW05.PK1PKSCH[PK0CW05X];
    PK0CM005.PK1ALLNB = PK0CW05.PK1ALLNB[PK0CW05X];
  end

  PK0CS38(); /* check validity of headings*/

  if (converseVar.validationMsgNum != 0
   || PK0CW01.PK0CWFST == "Y") /* first time thru*/
    PK0CW01.PK0CWFST = "N";
    return;
  end

  if (PK0CW05.PK0CWRFR[PK0CW05X] == "P"
   || PK0CW05.PK0CWRFR[PK0CW05X] == "M")
    PK0CS31(); /* build array from picking tables*/
  else
    if (PK0CW05.PK0CWRFR[PK0CW05X] == "S")
      PK0CS41(); /* build array from shiprec tables*/
    else
      PK0CW01.PK0CWERR = "Y"; /* have error on screen*/
      PK0CM005.XXXERRID = "PK0CS30";
      PK0CM005.PK0CMMSG = "WHERE SHOULD ORDER BE READ FROM";
    end
  end

end // end PK0CS30

// read dpick.vpooli into array
Function PK0CS31()
   /* ************************************************************/
   /* *   load products into working storage array*/
   /* ************************************************************/

  set PK5REC empty;
  PK5REC.PK1CUOID = PK0CM005.PK1CUOID;
  PK5REC.PK1NORID = PK0CM005.PK1NORID;
  PK5REC.XWHCD = PK0CM005.XWHCD;

  set VMPOLI01 empty;
  VMPOLI01.PK-ORD-STKTF-ID = PK0CM005.PK1CUOID;
  VMPOLI01.PK-NIKE-ORD-ID = PK0CM005.PK1NORID;
  VMPOLI01.XWH-WHSE-CD = PK0CM005.XWHCD;
  VMPOLI01.PK-NBR-TIMES-ALOC = PK0CM005.PK1ALLNB;

  if (PK0CW05.PK0CWRFR[PK0CW05X] == "M")
    PK0CW01.PK0CW-DCMS-SEL-FL = "Y";
  else
    PK0CW01.PK0CW-DCMS-SEL-FL = "N";
  end

  PK0C910(); /* Select table set*/
  if (converseVar.validationMsgNum != 0)
    PK0C912(); /* close table set*/
    return;
  end

  PK0CW01.PK0CWARX = 1;

  PK0C911(); /* select first record*/
  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(11); /* no data was found for this order number*/
    PK0CW01.PK0CWERR = "Y";
    set PK0CM005.XWHCD cursor, modified, bold;
    set PK0CM005.PK1CUOID modified, bold;
    set PK0CM005.PK1NORID modified, bold;
    set PK0CM005.XWHABRV modified, bold;
    PK0CM005.XXXERRID = "PK0CS31 "; /* Error location*/
    PK0C912(); /* close table set*/
    PK0C202(); /* move headings to screen*/
    return;
  else
    if (converseVar.validationMsgNum != 0)
      PK0C912(); /* close table set*/
      return;
    end
  end

  while (SQLCA.VAGen_SQLCODE == 0)
    PK0CS32(); /* read db and load into array*/
  end

  PK0C912(); /* close table set*/
  if (converseVar.validationMsgNum != 0)
    return;
  end

  PK0CW01.PK0CWLSX[PK0CWSCX] = PK0CW01.PK0CWARX - 1;
end // end PK0CS31

// store data in array
Function PK0CS32()
   /* ***********************************************/
   /* move data into array then fetch the*/
   /* next order from the selected picking orders set.*/
   /* ***********************************************/

  PK0CW02.XWHCD[PK0CWARX] = PK0CM005.XWHCD;
  PK0CW02.PK1CUOID[PK0CWARX] = PK0CM005.PK1CUOID;
  PK0CW02.PK1NORID[PK0CWARX] = PK0CM005.PK1NORID;
  PK0CW02.PK1ALLNB[PK0CWARX] = PK0CM005.PK1ALLNB;
  PK0CW02.XPPCD[PK0CWARX] = PK0CM005.XPPCD;
  PK0CW02.PK1PKSCH[PK0CWARX] = PK0CM005.PK1PKSCH;
  PK0CW02.PK0CMSEL[PK0CWARX] = " ";

  if (PK0CW01.PK0CW-DCMS-SEL-FL == "Y")
    PK0CW02.PK1LNINB[PK0CWARX] = VMPOLI01.PK-LINE-ITEM-NBR;
    PK0CW02.XGPCD[PK0CWARX] = VMPOLI01.XGP-GPC-CD;
    PK0CW02.SY1STNBR[PK0CWARX] = VMPOLI01.SY-STY-NBR;
    PK0CW02.SY2CLRID[PK0CWARX] = VMPOLI01.SY-COLR-CD-ID;
    PK0CW02.XDMCD[PK0CWARX] = VMPOLI01.XDM-DIM-CD;
    /* Life cycle is in pk0cs37*/
    PK0CW02.XQACD[PK0CWARX] = VMPOLI01.XQA-QUAL-CD;
    PK0CW02.PC2INSEG[PK0CWARX] = VMPOLI01.PC-CU-IN-SEG-CD;
    PK0CW02.XUMCD[PK0CWARX] = VMPOLI01.XEG-ENGR-DIFF-CD;
    PK0CW02.XPGCD[PK0CWARX] = VMPOLI01.XPG-PKG-TYP-CD;
    PK0CW02.XUMCD[PK0CWARX] = VMPOLI01.XUM-UOM-CD;
    PK0CW02.XOWCD[PK0CWARX] = VMPOLI01.XOW-OWN-GRP-CD;
    PK0CW02.PK0CWHC1[PK0CWARX] = VMPOLI01.XHD-HNDL-CD[1];
    PK0CW02.PK0CWHC2[PK0CWARX] = VMPOLI01.XHD-HNDL-CD[2];
    PK0CW02.PK0CWHC3[PK0CWARX] = VMPOLI01.XHD-HNDL-CD[3];
    PK0CW02.PK0CWHC4[PK0CWARX] = VMPOLI01.XHD-HNDL-CD[4];
    PK0CW02.PK0CWHC5[PK0CWARX] = VMPOLI01.XHD-HNDL-CD[5];
    PK0CW02.PK0CWLC1[PK0CWARX] = VMPOLI01.PK-LABL-CD[1];
    PK0CW02.PK0CWLC2[PK0CWARX] = VMPOLI01.PK-LABL-CD[2];
    /* Desc is in pk0cs37*/
    PK0CW02.PK-TOT-ITEM-WT[PK0CWARX] = VMPOLI01.PK-TOT-ITEM-WT;
    PK0CW02.PK5TIQTY[PK0CWARX] = VMPOLI01.PK-TOT-ITEM-QTY;
    PK0CW02.OP2AUPRC[PK0CWARX] = VMPOLI01.OP-AVG-UNIT-PRC;
    PK0CWWA1 = VMPOLI01.OP-AVG-UNIT-PRC;
    PK0CW02.PK0CWUPR[PK0CWARX] = PK0CW02.PK5TIQTY[PK0CWARX] * PK0CWWA1;
    PK0CWTPR[PK0CW05X] = PK0CWTPR[PK0CW05X] + PK0CW02.PK0CWUPR[PK0CWARX];
  else
    PK0CW02.PK1LNINB[PK0CWARX] = PK5REC.PK1LNINB;
    PK0CW02.XGPCD[PK0CWARX] = PK5REC.XGPCD;
    PK0CW02.SY1STNBR[PK0CWARX] = PK5REC.SY1STNBR;
    PK0CW02.SY2CLRID[PK0CWARX] = PK5REC.SY2CLRID;
    PK0CW02.XDMCD[PK0CWARX] = PK5REC.XDMCD;
     /* life cycle is in pk0cs37*/
    PK0CW02.XQACD[PK0CWARX] = PK5REC.XQACD;
    PK0CW02.PC2INSEG[PK0CWARX] = PK5REC.PC2INSEG;
    PK0CW02.XEGCD[PK0CWARX] = PK5REC.XEGCD;
    PK0CW02.XPGCD[PK0CWARX] = PK5REC.XPGCD;
    PK0CW02.XUMCD[PK0CWARX] = PK5REC.XUMCD;
    PK0CW02.XGPCD[PK0CWARX] = PK5REC.XGPCD;
    PK0CW02.XOWCD[PK0CWARX] = PK5REC.XOWCD;
    PK0CW02.PK0CWHC1[PK0CWARX] = PK5REC.XHDCD[1];
    PK0CW02.PK0CWHC2[PK0CWARX] = PK5REC.XHDCD[2];
    PK0CW02.PK0CWHC3[PK0CWARX] = PK5REC.XHDCD[3];
    PK0CW02.PK0CWHC4[PK0CWARX] = PK5REC.XHDCD[4];
    PK0CW02.PK0CWHC5[PK0CWARX] = PK5REC.XHDCD[5];
    PK0CW02.PK0CWLC1[PK0CWARX] = PK5REC.PWRLBCD[1];
    PK0CW02.PK0CWLC2[PK0CWARX] = PK5REC.PWRLBCD[2];
     /* desc is in pk0cs37*/
    PK0CW02.PK-TOT-ITEM-WT[PK0CWARX] = PK5REC.PK-TOT-ITEM-WT;
    PK0CW02.PK5TIQTY[PK0CWARX] = PK5REC.PK5TIQTY;
    PK0CW02.OP2AUPRC[PK0CWARX] = PK5REC.OP2AUPRC;
    PK0CWWA1 = PK5REC.OP2AUPRC;
    PK0CW02.PK0CWUPR[PK0CWARX] = PK0CW02.PK5TIQTY[PK0CWARX] * PK0CWWA1;
    PK0CWTPR[PK0CW05X] = PK0CWTPR[PK0CW05X] + PK0CW02.PK0CWUPR[PK0CWARX];
  end

  PK0CS37(); /* fetch life cycle and description*/

  PK0C911(); /* fetch the next row*/
  if (converseVar.validationMsgNum == 0)
    PK0CW01.PK0CWARX = PK0CW01.PK0CWARX + 1;
  end
end // end PK0CS32

// fill database array
Function PK0CS37()
   /* *************************************************************/
   /* Fetch description and life cycle*/
   /* If any error, indicate a system error.*/
   /* *************************************************************/

  PK0C924(); /* inquire on row*/

    /* move data to working storage*/
  PK0CW02.SY1SSTNM[PK0CWARX] = PKNREC.SY1SSTNM;

   /* find correct life cycle code*/
   /* there will be up to four life cycle codes. to get the*/
   /* current one, look at sy2cedt1-4. find the date that is*/
   /* the closest to current date without going into the*/
   /* future. use the related xlccd1-4*/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  TA2GRTYP = "G";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* common date routine*/
  if (TA2REC.TA2RTNCD == 0)
     /* valid date in ta2rec.ta2grggn*/
  else
    TA2REC.TA2GRGGN = 0;
  end

   /* find date that is not in the future*/
  if (PKNREC.SY2CEDT1 <= TA2REC.TA2GRGGN)
    PK0CW01.PK0CWEDT = PKNREC.SY2CEDT1;
    PK0CW02.XLCCD[PK0CWARX] = PKNREC.XLCCD1;
  else
    if (PKNREC.SY2CEDT2 <= TA2REC.TA2GRGGN)
      PK0CW01.PK0CWEDT = PKNREC.SY2CEDT2;
      PK0CW02.XLCCD[PK0CWARX] = PKNREC.XLCCD2;
    else
      if (PKNREC.SY2CEDT3 <= TA2REC.TA2GRGGN)
        PK0CW01.PK0CWEDT = PKNREC.SY2CEDT3;
        PK0CW02.XLCCD[PK0CWARX] = PKNREC.XLCCD3;
      else
        if (PKNREC.SY2CEDT4 <= TA2REC.TA2GRGGN)
          PK0CW01.PK0CWEDT = PKNREC.SY2CEDT4;
          PK0CW02.XLCCD[PK0CWARX] = PKNREC.XLCCD4;
        end
      end
    end
  end

    /* see if other dates are closer to the current date*/

  if (PKNREC.SY2CEDT2 <= TA2REC.TA2GRGGN
   && PKNREC.SY2CEDT2 > PKNREC.SY2CEDT1)
    PK0CW01.PK0CWEDT = PKNREC.SY2CEDT2;
    PK0CW02.XLCCD[PK0CWARX] = PKNREC.XLCCD2;
  end

  if (PKNREC.SY2CEDT3 <= TA2REC.TA2GRGGN
   && PKNREC.SY2CEDT3 > PKNREC.SY2CEDT1)
    PK0CW01.PK0CWEDT = PKNREC.SY2CEDT3;
    PK0CW02.XLCCD[PK0CWARX] = PKNREC.XLCCD3;
  end

  if (PKNREC.SY2CEDT4 <= TA2REC.TA2GRGGN
   && PKNREC.SY2CEDT4 > PKNREC.SY2CEDT1)
    PK0CW01.PK0CWEDT = PKNREC.SY2CEDT4;
    PK0CW02.XLCCD[PK0CWARX] = PKNREC.XLCCD4;
  end
end // end PK0CS37

// check validity of headings
Function PK0CS38()
   /* ************************************************************/
   /* * check validity of headings*/
   /* ************************************************************/

  if (PK0CW01.PK0CWFST == "Y") /* if first time thru*/
    set PK0CM005.PK1CUOID cursor;
  else
    if (PK0CW05.PK1CUOID[PK0CW05X] != 0)
      set PK0CM005.PK1CUOID normal;
      set PK0CM005.PK1NORID normal;
      set PK0CM005.XWHCD normal;
      set PK0CM005.PK1PKSCH normal;
    else
      set PK0CM005.PK1CUOID cursor, bold;
      set PK0CM005.PK1NORID bold;
      converseLib.validationFailed(63); /* please enter order number*/
      PK0CM005.XXXERRID = "PK0CS38";
      PK0C202(); /* move headings to screen*/
      return;
    end
  end

  if (PK0CW05.XWHCD[PK0CW05X] == " ")
    set PK0CM005.XWHCD cursor, bold;
    converseLib.validationFailed(4); /* warehouse code required*/
    return;
  else
    set PK0CM005.XWHCD normal;
  end

  if (PK0CW05.XWHCD[PK0CW05X] != PK0CW01.XWHCD) /* if warehouse code changed*/
    PK0CW01.XWHCD = PK0CW05.XWHCD[PK0CW05X];
  end

  if (PK0CW01.XWHABRV == " ") /* if no abreviation*/
    if (PK0CM005.XWHCD in XWHTBL.XWHCD /* if code is in the table*/
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and it is active*/
      PK0CW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      PK0CM005.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      PK0CW01.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA country code*/
    else
      converseLib.validationFailed(2); /* invalid warehouse*/
    end
  end

end // end PK0CS38

// read dship.vsritm01 into array
Function PK0CS41()
   /* ************************************************************/
   /* *   load products into working storage array*/
   /* ************************************************************/

    /* select set of shiprec items*/

  set SR3REC empty;
  SR3REC.XWHCD = PK0CM005.XWHCD;
  SR3REC.PK1PKSCH = PK0CM005.PK1PKSCH; /* original schedule*/
  SR3REC.OP1CUOID = PK0CM005.PK1CUOID;
  SR3REC.OP1NORID = PK0CM005.PK1NORID;
  SR3REC.OP1NTMAL = 0; /* change to 0 when db is changed*/

  PK0C913(); /* ss dship.vsritm01 formatted view*/
  if (converseVar.validationMsgNum != 0)
    return;
  end

  PK0C914();
  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(11); /* no data was found for this order number*/
    PK0CW01.PK0CWERR = "Y";
    set PK0CM005.XWHCD cursor, modified, bold;
    set PK0CM005.XWHABRV modified, bold;
    set PK0CM005.PK1CUOID modified, bold;
    set PK0CM005.PK1NORID modified, bold;
    set PK0CM005.PK1PKSCH modified, bold;
    PK0CM005.XXXERRID = "PK0CS41 "; /* Error location*/
    PK0C915(); /* close table set*/
    PK0C202(); /* move headings to screen*/
    return;
  else
    if (converseVar.validationMsgNum != 0)
      PK0C915(); /* close table set*/
      return;
    end
  end

  PK0CW01.PK0CWARX = 1;

  while (SQLCA.VAGen_SQLCODE == 0
   && PK0CW01.PK0CWARX <= 900)
    PK0CS42(); /* load db array*/
  end

  PK0C915(); /* close table set*/
  if (converseVar.validationMsgNum != 0)
    return;
  end

  PK0CW01.PK0CWLSX[PK0CWSCX] = PK0CW01.PK0CWARX - 1;
end // end PK0CS41

// fill database array
Function PK0CS42()
   /* *************************************************************/
   /* move data into array then*/
   /* fetch the next order from the selected shiprec orders set.*/
   /* *************************************************************/

    /* move data to working storage*/

  PK0CW02.XWHCD[PK0CWARX] = PK0CM005.XWHCD;
  PK0CW02.PK1CUOID[PK0CWARX] = PK0CM005.PK1CUOID;
  PK0CW02.PK1NORID[PK0CWARX] = PK0CM005.PK1NORID;
  PK0CW02.XPPCD[PK0CWARX] = PK0CM005.XPPCD;
  PK0CW02.PK1PKSCH[PK0CWARX] = PK0CM005.PK1PKSCH;
  PK0CW02.PK1LNINB[PK0CWARX] = SR3REC.OP2LNINB;
  PK0CW02.PK0CMSEL[PK0CWARX] = " ";
  PK0CW02.XGPCD[PK0CWARX] = SR3REC.XGPCD;
  PK0CW02.SY1STNBR[PK0CWARX] = SR3REC.SY1STNBR;
  PK0CW02.SY2CLRID[PK0CWARX] = SR3REC.SY2CLRID;
  PK0CW02.XDMCD[PK0CWARX] = SR3REC.XDMCD;
   /* life cycle is in pk0cs37*/
  PK0CW02.XQACD[PK0CWARX] = SR3REC.XQACD;
  PK0CW02.PC2INSEG[PK0CWARX] = SR3REC.PC2INSEG;
  PK0CW02.XEGCD[PK0CWARX] = SR3REC.XEGCD;
  PK0CW02.XPGCD[PK0CWARX] = SR3REC.XPGCD;
  PK0CW02.XUMCD[PK0CWARX] = SR3REC.XUMCD;
  PK0CW02.XOWCD[PK0CWARX] = SR3REC.XOWCD;
  PK0CW02.PK0CWHC1[PK0CWARX] = SR3REC.XHDCD[1];
  PK0CW02.PK0CWHC2[PK0CWARX] = SR3REC.XHDCD[2];
  PK0CW02.PK0CWHC3[PK0CWARX] = SR3REC.XHDCD[3];
  PK0CW02.PK0CWHC4[PK0CWARX] = SR3REC.XHDCD[4];
  PK0CW02.PK0CWHC5[PK0CWARX] = SR3REC.XHDCD[5];
  PK0CW02.PK0CWLC1[PK0CWARX] = SR3REC.PWRLBCD[1];
  PK0CW02.PK0CWLC2[PK0CWARX] = SR3REC.PWRLBCD[2];
   /* desc is in pk0cs37*/
  PK0CW02.PK5TIQTY[PK0CWARX] = SR3REC.SR3TQTSH;
  PK0CW02.SR3DALFL[PK0CWARX] = SR3REC.SR3DALFL;
  PK0CW02.OP2AUPRC[PK0CWARX] = SR3REC.OP2AUPRC;
  PK0CWWA1 = SR3REC.OP2AUPRC;
  PK0CW02.PK0CWUPR[PK0CWARX] = PK0CW02.PK5TIQTY[PK0CWARX] * PK0CWWA1;
  PK0CWTPR[PK0CW05X] = PK0CWTPR[PK0CW05X] + PK0CW02.PK0CWUPR[PK0CWARX];
   /* weight is in pk0c924*/

  PK0CS37(); /* move description and life cycle into*/
                                   /* array*/
                      /* also the quantities are read into pknrec*/

    /* move total weight for line item into array*/

  PK0CW01.PK0CWSZX = 1;
  PK0CW02.PK-TOT-ITEM-WT[PK0CWARX] = 0;
                                   /* initialize total wieght bucket*/

  if (converseVar.validationMsgNum == 0)
     /* accumulate total weight for all sizes.*/
     /* total weight = shipped-qty x weight-per-product*/
    PK0CW01.PK0CWSX2 = 1;
    while (PK0CW01.PK0CWSX2 <= 350
     && SR3REC.SY5SZID[PK0CWSX2] > 0)
      PK0CW01.PK0CWSZX = SR3REC.SY5SZID[PK0CWSX2];
      PK0CW01.PK0CWWT = PKNREC.SYGSZWT[PK0CWSZX]; /* (wt = weight)*/
      if (SR3REC.SR3QTYSH[PK0CWSX2] > 0)
        PK0CW01.SYGSZWT = SR3REC.SR3QTYSH[PK0CWSX2] * PK0CW01.PK0CWWT;
        PK0CW02.PK-TOT-ITEM-WT[PK0CWARX] = PK0CW02.PK-TOT-ITEM-WT[PK0CWARX] + PK0CW01.SYGSZWT;
      end
      PK0CW01.PK0CWSX2 = PK0CW01.PK0CWSX2 + 1;
    end
  end

  PK0C914(); /* Fetch the next row*/

  if (converseVar.validationMsgNum == 0)
    PK0CW01.PK0CWARX = PK0CW01.PK0CWARX + 1;
  end
end // end PK0CS42

// chose map to be displayed
Function PK0CS50()
   /* ************************************************************/
   /* *   decide which screen to display*/
   /* *   if no order number was passed, show header screen*/
   /* *     and let user enter order number*/
   /* *   if no sub order number was passed, go to schedule screen*/
   /* *     and let user enter order number*/
   /* *   if order nbr and schedule were passed, show header*/
   /* *     screen and read from ship rec*/
   /* *   (go to processing for pk0cm001, there could be multiple*/
   /* *    sub orders and/or schedules)*/
   /* **/
   /* *   if order nbr with no schedules, show header screen*/
   /* *     and read from picking*/
   /* *   if order nbr with 1 schedule, show header screen*/
   /* *     and read from shiprec*/
   /* *   if order nbr with many schedules, show schedule*/
   /* *     screen to let user pick desired schedule*/
   /* **/
   /* ************************************************************/

  if (PKWREC.PKWINDEX > 0) /* INQUIRY KEYS ARRAY PROVIDED*/
    if (PKWREC.PKWSLTYP[PKWINDEX] == "S" /* called application*/
     || PKWREC.PKWSLTYP[PKWINDEX] == "M") /* from menu*/
       /* format key array*/
      PKYREC.PKYORACT[PK0CWYIX] = "V";
      PK0CW05.XWHCD[1] = PKYREC.XWHCD;
      PK0CW05.PK1CUOID[1] = PKYREC.PK1CUOID[PK0CWYIX];
      PK0CW05.PK1NORID[1] = PKYREC.PK1NORID[PK0CWYIX];
      PK0CW05.PK1PKSCH[1] = PKYREC.PK1PKSCH[PK0CWYIX];
      if (PKWREC.XWHCD == "51"
       && EPAREC.PK1CUOID[PK0CWYIX] != 0)
        EPAREC.EPAORACT[PK0CWYIX] = "V";
        PK0CW05.XWHCD[1] = EPAREC.XWHCD;
        PK0CW05.PK1CUOID[1] = EPAREC.PK1CUOID[PK0CWYIX];
        PK0CW05.PK1NORID[1] = EPAREC.PK1NORID[PK0CWYIX];
        PK0CW05.PK1PKSCH[1] = EPAREC.PK1PKSCH[PK0CWYIX];
        PK0CW05.PK1ALLNB[1] = EPAREC.PK1ALLNB[PK0CWYIX];
      end
      PK0CWHDR = " "; /* set header sw off*/
      PK0CW01.XWHCD = PKWREC.XWHCD; /* inital warehouse code*/
      PK0CW01.XWHABRV = PKWREC.XWHABRV; /* and warehouse abbreviation*/
      PK0CW01.PK0CW05X = 1; /* index for orders array*/
      PK0CW01.PK0CWERR = "N"; /* init error flag to 'no'*/
    end
  end

  if (PK0CW05.PK1CUOID[PK0CW05X] == 0)
    PK0CW01.PK0CWCSC = "PK0CM005";
    PK0CW01.PK0CWEOS = "Y";
    return;
  else
    if (PK0CW05.PK1CUOID[PK0CW05X] != 0
     && PK0CW05.PK1NORID[PK0CW05X] == 0)
      PK0CW01.PK0CWCSC = "PK0CM001";
      PK0CW01.PK0CWEOS = "Y";
      return;
    else
      if (PK0CW05.PK1PKSCH[PK0CW05X] > 0) /* schedule number was passed*/
        PK0CW01.PK0CWCSC = "PK0CM005";
        PK0CW05.PK0CWRFR[PK0CW05X] = "S";
        return;
      else
        PK0CW01.PK0CWCSC = "PK0CM001";
        PK0CW01.PK0CWEOS = "Y";
      end
    end
  end

end // end PK0CS50

// setup new for new screen
Function PK0CS55()
   /* ************************************************************/
   /* *    setup for new screen*/

  if (PK0CW01.PK0CWCSC in PK0CW01.PK0CWSCN from 1) /* if screen in array*/
    PK0CW01.PK0CWSCX = sysVar.arrayIndex;
  else
    PK0CW01.PK0CWSCX = 1;
  end

  PK0CW01.PK0CWEOS = "N"; /* set end-of-screen flag to 'no'*/
  if (PK0CW01.PK0CWKEY == "PF3") /* if returning from screen*/
    PK0CW01.PK0CWBLA[PK0CWSCX] = "N"; /* already have array to use*/
  else
    PK0CW01.PK0CWBLA[PK0CWSCX] = "Y"; /* need to build array*/
  end
  PK0CW01.PK0CWBLS[PK0CWSCX] = "Y"; /* need to build screen*/

end // end PK0CS55

// Format inquiry key array
Function PK0CS60()
   /* ------------------------------------------------------------*/
   /* Format the array with the key of the displayed order.*/
   /* ------------------------------------------------------------*/

  PKWREC.PKWINDEX = 1;

  PKWREC.PKWSLTYP[PKWINDEX] = "M"; /* Inquiry selection type*/
  PKWREC.PKWFRMAP[PKWINDEX] = "PK0C"; /* Previous application*/

  set PKYREC empty; /* Clear order key array*/
  set EPAREC empty;

  if (PK0CW01.PK0CW-DCMS-SEL-FL == "Y")
    EPAREC.XWHCD = PK0CW01.XWHCD;
    EPAREC.XWHABRV = PK0CW01.XWHABRV;

    EPAREC.EPAORACT[1] = "S";

    EPAREC.PK1CUOID[1] = PK0CW01.PK1CUOID;
    EPAREC.PK1NORID[1] = PK0CW01.PK1NORID;
    EPAREC.PK1ALLNB[1] = PK0CW01.PK1ALLNB;
    EPAREC.PK1PKSCH[1] = PK0CW01.PK1PKSCH;

    COMMAREA.CA-USER-WORKAREA-2K-B = EPAREC.EPAARRAY;

  end

  PKYREC.XWHCD = PK0CW01.XWHCD; /* Save warehouse code*/
  PKYREC.XWHABRV = PK0CW01.XWHABRV; /* and warehouse abbreviation*/

  PKYREC.PKYORACT[1] = "S"; /* Indicate selected*/

  PKYREC.PK1CUOID[1] = PK0CW01.PK1CUOID; /* Order*/
  PKYREC.PK1NORID[1] = PK0CW01.PK1NORID; /* Sub-order*/
  PKYREC.PK1PKSCH[1] = PK0CW01.PK1PKSCH; /* Schedule*/

  PKWREC.PKWARRAY[PKWINDEX] = PKYREC.PKWARRAY; /* Inquiry keys array*/
end // end PK0CS60

// Format inquiry key array
Function PK0CS61()
   /* ------------------------------------------------------------*/
   /* Format the array with the key of the displayed order.*/
   /* ------------------------------------------------------------*/

  PKWREC.PKWINDEX = 1;

  PKWREC.PKWSLTYP[PKWINDEX] = "M"; /* Inquiry selection type*/
  PKWREC.PKWFRMAP[PKWINDEX] = "PK0C"; /* Previous application*/

  set PKYREC empty; /* Clear order key array*/
  set EPAREC empty;

  if (PK0CW01.PK0CW-DCMS-SEL-FL == "Y")
    EPAREC.XWHCD = PK0CW01.XWHCD;
    EPAREC.XWHABRV = PK0CW01.XWHABRV;

    EPAREC.EPAORACT[1] = "S";

    EPAREC.PK1CUOID[1] = PK0CW02.PK1CUOID[1];
    EPAREC.PK1NORID[1] = PK0CW02.PK1NORID[1];
    EPAREC.PK1ALLNB[1] = PK0CW02.PK1ALLNB[1];
    EPAREC.PK1PKSCH[1] = PK0CW02.PK1PKSCH[1];

    COMMAREA.CA-USER-WORKAREA-2K-B = EPAREC.EPAARRAY;

  end

  PKYREC.XWHCD = PK0CW01.XWHCD; /* Save warehouse code*/
  PKYREC.XWHABRV = PK0CW01.XWHABRV; /* and warehouse abbreviation*/

  PKYREC.PKYORACT[1] = "S"; /* Indicate selected*/

  PKYREC.PK1CUOID[1] = PK0CW02.PK1CUOID[1]; /* Order*/
  PKYREC.PK1NORID[1] = PK0CW02.PK1NORID[1]; /* Sub-order*/
  PKYREC.PK1PKSCH[1] = PK0CW02.PK1PKSCH[1]; /* Schedule*/

  PKWREC.PKWARRAY[PKWINDEX] = PKYREC.PKWARRAY; /* Inquiry keys array*/
end // end PK0CS61

// format cust inq key array
Function PK0CS62()
   /* ------------------------------------------------------------*/
   /* Format the array with the key of the displayed customer*/
   /* ------------------------------------------------------------*/

  PKWREC.PKWINDEX = 1;

  PKWREC.PKWSLTYP[PKWINDEX] = "M"; /* Inquiry selection type*/
  PKWREC.PKWFRMAP[PKWINDEX] = "PK0C"; /* Previous application*/

  set PKYREC empty; /* Clear order key array*/
  set EPAREC empty;

  PKXREC.XWHCD = PK0CW01.XWHCD; /* Save warehouse code*/
  PKXREC.XWHABRV = PK0CW01.XWHABRV; /* and warehouse abbreviation*/

  PKXREC.PKXKUACT[1] = "S"; /* Indicate selected*/

  PKXREC.KUCCOID[1] = PK0CM005.KUCCOID; /* customer id*/
  PKXREC.KUMSTRID[1] = PK0CM005.KUMSTRID; /* store id*/
  PKXREC.XNXCD[1] = PK0CM005.XNXCD; /* dept code*/

  PKWREC.PKWARRAY[PKWINDEX] = PKXREC.PKWARRAY; /* Inquiry keys array*/
end // end PK0CS62

// format cust inq key array
Function PK0CS63()
   /* ------------------------------------------------------------*/
   /* Format the array with the key of the displayed customer*/
   /* ------------------------------------------------------------*/

  if (PK0CM005.PK0CMSEL[PK0CWLNX] == "S"
   && AZWREC.XWHCD != " ")
    set PK0CM005.PK0CMSEL[PK0CWLNX] cursor, modified, bold;
    PK0CW01.PK0CWERR = "Y";
    converseLib.validationFailed(513); /* only one 's' may be entered*/
    return;
  end

  if (PK0CM005.PK0CMSEL[PK0CWLNX] == "S")

    AZWREC.XWHCD = PK0CW01.XWHCD;
    AZWREC.XWHABRV = PK0CW01.XWHABRV;
    AZWREC.XGP-GPC-CD = PK0CW02.XGPCD[PK0CWLNX];
    AZWREC.SY-STY-NBR = PK0CW02.SY1STNBR[PK0CWLNX];
    AZWREC.SY-COLR-CD-ID = PK0CW02.SY2CLRID[PK0CWLNX];
    AZWREC.XDM-DIM-CD = PK0CW02.XDMCD[PK0CWLNX];
    AZWREC.OP-LINE-ITEM-NBR = PK0CW02.PK1LNINB[PK0CWLNX];
    AZWREC.PK-PICK-SCHED-NBR = PK0CM005.PK1PKSCH;
    AZWREC.OP-CUST-ORD-ID = PK0CM005.PK1CUOID;
    AZWREC.OP-NIKE-ORD-ID = PK0CM005.PK1NORID;
    AZWREC.CU-CO-ID = PK0CM005.KUCCOID;
    AZWREC.CU-STOR-ID = PK0CM005.KUMSTRID;

  end
end // end PK0CS63

// Declare Cursor for Vsplit01
Function PK0CS65()
  set SQLCA empty;
  set PWPREC empty;

  PWPREC.XWHCD = PK0CW01.XWHCD;
  PWPREC.TSIPLNBR = SR2REC.TSIPLNBR;
  PK0CW01.PK0CW-CUST-ORD-ID = SR2REC.OP1CUOID;
  PWPREC.OP1PARTN = PK0CW01.PK0CW-CUST-ORD-DIGIT[9];
  PWPREC.OP1CUOID = SR2REC.OP1CUOID;
  PWPREC.OP1NORID = SR2REC.OP1NORID;

  call "IO5760" ("SB", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes}; /* select scan*/

   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0CS65 "; /* Process name*/
    TA1REC.TA1LOC = "DECLARE CURSOR FOR VSPLIT01 TABLE";
    TA1REC.TA1MAP = "PK0CM005"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
    TA1REC.TA1TBLKE = PWPREC.PWPKEY;

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0CM005.XXXERRID = "PK0CS65"; /* Error location*/
    return; /* Return to previous process*/
  end
   /* *************************************************************/
end // end PK0CS65

// Fetch row of Vsplit01
Function PK0CS66()

  set SQLCA empty;

  call "IO5760" ("NB", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes}; /* select next*/

      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0CS66 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN SPLIT ITEM TABLE ROW";
    TA1REC.TA1MAP = "PK0CM005"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
    TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0CM005.XXXERRID = "PK0CS66"; /* Error location*/
    return; /* Return to previous process*/
  end

end // end PK0CS66

// Close Cursor for VSPLIT01
Function PK0CS67()

  set SQLCA empty;

  call "IO5760" ("CB", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes}; /* select next*/

      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PK0CS67 "; /* Process name*/
    TA1REC.TA1LOC = "CLOSE CURSOR OF VSPLIT01 TAB";
    TA1REC.TA1MAP = "PK0CM005"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
    TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PK0CM005.XXXERRID = "PK0CS67"; /* Error location*/
    return; /* Return to previous process*/
  end

end // end PK0CS67

//*** RECORD=PK0CW01 ****
// flags and such used in the program
// ***********************
Record PK0CW01 type basicRecord
  10 PK0CWEDT PK0CWEDT ; 
  10 PK0CWCT1 PK0CWCT1 ; 
  10 PK0CWYCT PK0CWYCT ; 
  10 PK0CWYIX PK0CWYIX ; 
  10 XWHCD XWHCD ; 
  10 XCTCD XCTCD ; 
  10 XWHABRV XWHABRV ; 
  10 PK1CUOID PK1CUOID ; 
  10 PK1NORID PK1NORID ; 
  10 PK1ALLNB PK1ALLNB ; 
  10 PK1PKSCH PK1PKSCH ; 
  10 XPPCD XPPCD ; 
  10 SYGSZWT SYGSZWT ; 
  10 PK0CWFST PK0CWFST ; 
  10 PK0CWEOA PK0CWEOA ; 
  10 PK0CWEOS PK0CWEOS ; 
  10 PK0CWKEY PK0CWKEY ; 
  10 PK0CWERR PK0CWERR ; 
  10 PK0CWSFM PK0CWSFM ; 
  10 PK0CWSCI PK0CWSCI ; 
    15 PK0CWMAR PK0CWMAR [4] ; 
    15 PK0CWSCN PK0CWSCN [4] ; 
    15 PK0CWA1X PK0CWA1X [4] ; 
    15 PK0CWMXL PK0CWMXL [4] ; 
    15 PK0CWLSX PK0CWLSX [4] ; 
    15 PK0CWBLS PK0CWBLS [4] ; 
    15 PK0CWBLA PK0CWBLA [4] ; 
  10 PK0CWCSC PK0CWCSC ; 
  10 PK0CWARX PK0CWARX ; 
  10 PK0CWLNZ PK0CWLNZ ; 
  10 PK0CWLNX PK0CWLNX ; 
  10 PK0CW05X PK0CW05X ; 
  10 PK0CW02X PK0CW02X ; 
  10 PK0CWSZX PK0CWSZX ; 
  10 PK0CWIDX PK0CWIDX ; 
  10 PK0CWSCX PK0CWSCX ; 
  10 PK0CWSX2 PK0CWSX2 ; 
  10 PK0CWHD1 PK0CWHD1 ; 
  10 PK0CWHD2 PK0CWHD2 ; 
  10 PK0CWWT PK0CWWT ; 
  10 PK0CWHDR PK0CWHDR ; 
  10 PK0CWWA1 PK0CWWA1 ; 
  10 XHDKEY XHDKEY ; 
    15 XHDCD XHDCD ; 
    15 XGPCD XGPCD ; 
  10 PK0CW-PREV-CRTN-NBR PK0CW-PREV-CRTN-NBR ; 
  10 PK0CW-EXPC-TOT-ORD-WT PK0CW-EXPC-TOT-ORD-WT ; 
  10 PK0CW-CUST-ORD-ID PK0CW-CUST-ORD-ID ; 
    15 PK0CW-CUST-ORD-DIGIT PK0CW-CUST-ORD-DIGIT [9] ; 
  10 PK0CW-DCMS-SEL-FL PK0CW-DCMS-SEL-FL ; 
end // end PK0CW01

//*** RECORD=PK0CW02 ****
// hold all the products for one order-------------------------
// ***********************
Record PK0CW02 type basicRecord
  5 PK0CW2GR PK0CW2GR [900] ; 
    10 PK0CWKY2 PK0CWKY2 ; 
      15 XWHCD XWHCD ; 
      15 PK1PRTN PK1PRTN ; 
      15 PK1CUOID PK1CUOID ; 
      15 PK1NORID PK1NORID ; 
    10 PK1ALLNB PK1ALLNB ; 
    10 XPPCD XPPCD ; 
    10 PK1PKSCH PK1PKSCH ; 
    10 PK0CWGRP PK0CWGRP ; 
      15 PK1LNINB PK1LNINB ; 
      15 PK0CMSEL PK0CMSEL ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XLCCD XLCCD ; 
      15 XQACD XQACD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XEGCD XEGCD ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 XOWCD XOWCD ; 
    10 PK0CWHC1 PK0CWHC1 ; 
    10 PK0CWHC2 PK0CWHC2 ; 
    10 PK0CWHC3 PK0CWHC3 ; 
    10 PK0CWHC4 PK0CWHC4 ; 
    10 PK0CWHC5 PK0CWHC5 ; 
    10 PK0CWLC1 PK0CWLC1 ; 
    10 PK0CWLC2 PK0CWLC2 ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 PK5TIQTY PK5TIQTY ; 
    10 OP2AUPRC OP2AUPRC ; 
    10 PK0CWUPR PK0CWUPR ; 
    10 PK-TOT-ITEM-WT PK-TOT-ITEM-WT ; 
    10 SY3FRGUT SY3FRGUT ; 
    10 SR3DALFL SR3DALFL ; 
end // end PK0CW02

//*** RECORD=PK0CW04 ****
// change quantities from packed array to character array with
// group level
// ***********************
Record PK0CW04 type basicRecord
  5 PK0CW4GR PK0CW4GR [50] ; 
    10 SR3QTYSH SR3QTYSH ; 
end // end PK0CW04

//*** RECORD=PK0CW05 ****
// hold data in array used for pk0cm001
// ***********************
Record PK0CW05 type basicRecord
  5 PK0CW5RC PK0CW5RC ; 
    10 PK0CW5GR PK0CW5GR [30] ; 
      15 XWHCD XWHCD ; 
      15 PK0CMSEL PK0CMSEL ; 
      15 PK1CUOID PK1CUOID ; 
      15 PK1NORID PK1NORID ; 
      15 PK1ALLNB PK1ALLNB ; 
      15 PK1PKSCH PK1PKSCH ; 
      15 XPPCD XPPCD ; 
      15 KUCCOID KUCCOID ; 
      15 KUMSTRID KUMSTRID ; 
      15 XNXCD XNXCD ; 
      15 PK0CMDTL PK0CMDTL ; 
      15 SR1PKSDT SR1PKSDT ; 
      15 PK0CWTPR PK0CWTPR ; 
      15 PK4OTUNT PK4OTUNT ; 
      15 PK1WT PK1WT ; 
      15 SR2TOTCF SR2TOTCF ; 
      15 PK0CWRFR PK0CWRFR ; 
      15 DCMS-ERROR-FL DCMS-ERROR-FL ; 
      15 GOODS-ISS-FL GOODS-ISS-FL ; 
end // end PK0CW05
// type of data literal
DataItem PK0CMDTL char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection field
DataItem PK0CMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0CW-CUST-ORD-DIGIT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0CW-CUST-ORD-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record selected for dcms flag
DataItem PK0CW-DCMS-SEL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK0CW-EXPC-TOT-ORD-WT decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK0CW-PREV-CRTN-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// second screen line index
DataItem PK0CW02X num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first screen line index
DataItem PK0CW05X num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level for pk0cw02
DataItem PK0CW2GR char(103)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level
DataItem PK0CW4GR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level for pk0cw05
DataItem PK0CW5GR char(59)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level for pk0cw05
DataItem PK0CW5RC char(1770)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st array row for assoc map
DataItem PK0CWA1X smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// array index
DataItem PK0CWARX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// build array from database (y/n
DataItem PK0CWBLA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// build screen (y/n)
DataItem PK0CWBLS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// name of current screen
DataItem PK0CWCSC char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// counter
DataItem PK0CWCT1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// life cycle date
DataItem PK0CWEDT int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// end-of-application flag (y/n)
DataItem PK0CWEOA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end-of-screen flag (y/n)
DataItem PK0CWEOS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// have map error (y/n)
DataItem PK0CWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time thru flag (y/n)
DataItem PK0CWFST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold group for m010
DataItem PK0CWGRP char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// handling code
DataItem PK0CWHC1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// handling code
DataItem PK0CWHC2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// handling code
DataItem PK0CWHC3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// handling code
DataItem PK0CWHC4 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// handling code
DataItem PK0CWHC5 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// compute hold field 1
DataItem PK0CWHD1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// compute hold field 2
DataItem PK0CWHD2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// build header information (y/n)
DataItem PK0CWHDR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Scale index
DataItem PK0CWIDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// which pf key was used
DataItem PK0CWKEY char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pkfrec key
DataItem PK0CWKY2 char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// label code
DataItem PK0CWLC1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// label code
DataItem PK0CWLC2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// schedule screen line index
DataItem PK0CWLNX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen line index
DataItem PK0CWLNZ num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last filled array row
DataItem PK0CWLSX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max size for array
DataItem PK0CWMAR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// maximum number of lines
DataItem PK0CWMXL num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// where to read from pick-ship
DataItem PK0CWRFR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen-information-array
DataItem PK0CWSCI char(76)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen name
DataItem PK0CWSCN char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen pointer
DataItem PK0CWSCX num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// whether to show first map y/n
DataItem PK0CWSFM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd size index
DataItem PK0CWSX2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size index
DataItem PK0CWSZX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total units price
DataItem PK0CWTPR decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// units price
DataItem PK0CWUPR decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// multiply work area 1
DataItem PK0CWWA1 decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// compute wieght field
DataItem PK0CWWT decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// count of pkyrec entries
DataItem PK0CWYCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pkyrec entry index
DataItem PK0CWYIX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end