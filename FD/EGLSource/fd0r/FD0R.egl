package fd0r;

import corpcom2.XPCREC;
import corpcom2.XPLREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFD001;
import corpcom3.XPTA0P;
import corpcom3.XPXDM01;
import corpcom3.XPXGA01;
import corpcom3.XPXPC01;
import corpcom3.XPXPL01;
import corpcom3.XPXSU01;
import corpcom3.XPXX001;
import corpcom4.XSFD001;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXSTAT;
import corpx1.XBTCD;
import corpx1.XDMCD;
import corpx1.XDMTBL;
import corpx1.XGAABRV;
import corpx1.XGACD;
import corpx1.XGADESC;
import corpx1.XGAKEY;
import corpx1.XGATBL;
import corpx1.XGCCD;
import corpx1.XGPCD;
import corpx1.XLCCD;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx1.XSUTBL;
import corpx2.XPCCD;
import corpx2.XPLCD;
import corpx2.XQACD;
import corpx2.XSUABRV;
import corpx2.XSUCD;
import corpx2.XSUDESC;
import corpx2.XSUKEY;
import corpx2.XTVCD;
import corpy2.YPFCD;
import corpy2.YPGCD;
import corpy2.YSMSUMCD;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import fd.common.*;
import ff.common.FF1REC;
import ff.common.FF2REC;
import pg.common.PG2REC;
import sp.common.SP1ABRV;
import sp.common.SP1ID;
import sp.common.SP1REC;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import sy.common.SYBREC;
import sy.common.SYBSTGNB;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARJCL;
import ta.common.TARTYPE;
//*** PROGRAM=FD0R ****
// This application displays the Submit Job Request Menu screen
// and subordinate job submission screens.
// 
// The menu is displayed for the user to select the jobs to be
// submitted.  Another available selection allows the user to
// view the available printers and change the printed output
// destination.
// 
// Job Control Language statements are formatted and submitted
// through the Internal Reader Transient Data Queue (INTR).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TARTYPE).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed.
// 
// The data in working storage is substituted and the statement
// is written to the internal reader.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the menu, only.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          03/26/90  rgilli  New application.
// fh101    07/17/90  jalle1  misc. edit changes to all maps.
//                            add billing cutoff date (used
//                            for edits on maps m009 and m011).
//                            cutoff date taken from dfcast.
//                            vffctl01 -1 day.
// e#fh017  08/24/90  mwalke  inv anal rept screen--entered min
//                            qty selection to screen
// e#fh023  09/19/90  mwalke  set eoj message switch to yes,
//                            ta6rec.ta6msgsw, for all rept req
//          09/24/90  jalle1  chnge jcl tables, code to allow
//                            submits of shipments reports.
// fh#10    12/27/90  msmit2  include optional ytd from select-
//                            ion and include b-grade/closeout
//                            under product group.
// e#fh-11  03/15/91  mwalke  added fd2433--demand by sty grp
//                            rpt
// fh-0     03/18/91  mwalke  chg fd0rw6a to handle chg from
//                            fh#10
// e#fh-56  04/19/91  mwalke  chg edit criteria
//                            - use one '*' instead of filling
//                              the field--effects all screens
// fix      05/07/91  mwalke  deleted ck for futures Inline &
//                            Makeup only in summary & detail
//                            comparison
// fh#0     06/13/91  mwalke  regen for table changes
// fix      06/27/91  mwalke  adj edit logic for detl comp rept
//                            to allow a valid range, fd0r054
// e#fh-89  04/27/92  mwalke  chg prop bookings repts to submit
//                            one job stream for need month rpt
//                            and one job stream for top 20
//                            and/or top 3 rept
// fix      05/06/92  mwalke  reverse future comp repts fd2081
//                            fd2071.
// ff394    03/29/93  kstokk  archive reports to bundl.
// ff394    03/30/93  kstokk  chg name of fd2301t to fd2301.
// fix      06/29/93  mwalke  delete fiscal year edit criteria
//                            in module fd0r104.
//          08/31/93  mwalke  csp 4 conversion
//                            added check to test which environ
//                            executing in
// e#fh-143 10/28/93  mwalke  added actual receipt rept
// FF425    12/03/96  dpack   add selection of product division
// FF175    12/12/96  dsmith  changed the date range fill
//                            characters to '0' - also changed
//                            date edit routines to include
//                            century in 024, 034, 044, 054,
//                            064, 074, 084, and 134.
//          02/03/97  cwhit1  add selection of product division
// FF175B   05/14/98  BMUSTI  added  fiscal year edit criteria
//                    tcs     in module fd0r104.
// FF175B   06/08/98  BMUSTI  added  fiscal year edit criteria
//                    tcs     in module fd0r124.
// ffmaint  11/27/01  ldavi4  temporary change in module
//                            fd0r064 for invoice cutoff date
//                            check.
// *********************
Program FD0R type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FD00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FD0RW00 FD0RW00; // record
  FD0RW01 FD0RW01; // record
  FD0RW02 FD0RW02; // record
  FD0RW03 FD0RW03; // record
  FD0RW04 FD0RW04; // record
  FD0RW05 FD0RW05; // record
  FD0RW10 FD0RW10; // record
  FD0RW11 FD0RW11; // record
  FD0RW12 FD0RW12; // record
  FD0RW51 FD0RW51; // record
  FD0RW53 FD0RW53; // record
  FD0RW55 FD0RW55; // record
  FD0RW57 FD0RW57; // record
  FD0RW58 FD0RW58; // record
  FD0RW59 FD0RW59; // record
  FD0RW5O FD0RW5O; // record
  FD0RW61 FD0RW61; // record
  FD0RW62 FD0RW62; // record
  FD0RW63 FD0RW63; // record
  FD0RW64 FD0RW64; // record
  FD0RW65 FD0RW65; // record
  FD0RW6A FD0RW6A; // record
  FD0RW6B FD0RW6B; // record
  FD0RW7A FD0RW7A; // record
  FD0RW7B FD0RW7B; // record
  FD0RW8A FD0RW8A; // record
  FD0RW8B FD0RW8B; // record
  FD0RW97 FD0RW97; // record
  FD0RW98 FD0RW98; // record
  FD0RW99 FD0RW99; // record
  FD0RW9N FD0RW9N; // record
  FD0RW9T FD0RW9T; // record
  FDWREC FDWREC; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  PG2REC PG2REC; // record
  SP1REC SP1REC; // record
  SQLCA SQLCA; // record
  SYBREC SYBREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XGAREC XGAREC; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XSUREC XSUREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FD0RT02; // table
  use FD0RT5O {deleteAfterUse = yes}; // table
  use FD0RT3F; // table
  use FD0RT51 {deleteAfterUse = yes}; // table
  use FD0RT3S; // table
  use FD0RT52 {deleteAfterUse = yes}; // table
  use FD0RT4F; // table
  use FD0RT53 {deleteAfterUse = yes}; // table
  use FD0RT4S; // table
  use FD0RT54 {deleteAfterUse = yes}; // table
  use FD0RT5F; // table
  use FD0RT55 {deleteAfterUse = yes}; // table
  use FD0RT5S; // table
  use FD0RT56 {deleteAfterUse = yes}; // table
  use FD0RT06; // table
  use FD0RT57 {deleteAfterUse = yes}; // table
  use FD0RT07; // table
  use FD0RT58 {deleteAfterUse = yes}; // table
  use FD0RT08; // table
  use FD0RT59 {deleteAfterUse = yes}; // table
  use FD0RT9N {deleteAfterUse = yes}; // table
  use FD0RT61 {deleteAfterUse = yes}; // table
  use FD0RT9T {deleteAfterUse = yes}; // table
  use FD0RT62 {deleteAfterUse = yes}; // table
  use FD0RT1O; // table
  use FD0RT63 {deleteAfterUse = yes}; // table
  use FD0RT11; // table
  use FD0RT64 {deleteAfterUse = yes}; // table
  use FD0RT12 {deleteAfterUse = yes}; // table
  use FD0RT65 {deleteAfterUse = yes}; // table
  use XPLTBL; // table
  use XPCTBL; // table
  use XSUTBL; // table
  use XGATBL; // table
  use XDMTBL; // table
  use FD0RM.FD0RM002,  // forms
      FD0RM.FD0RM003, 
      FD0RM.FD0RM004, 
      FD0RM.FD0RM005, 
      FD0RM.FD0RM006, 
      FD0RM.FD0RM007, 
      FD0RM.FD0RM008, 
      FD0RM.FD0RM009, 
      FD0RM.FD0RM010, 
      FD0RM.FD0RM011, 
      FD0RM.FD0RM012, 
      FD0RM.FD0RM099,
      FD0RM.TA0PM001,
      FD0RM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFD001: XPFD001();
     /* ------------------------------------------------------------*/
     /* Initialize the working storage areas and variables.*/
     /* ------------------------------------------------------------*/

    set TA0PM001 initial; /* TA0P input/output link*/
    set FD0RM002 initial; /* M002 input/output*/
    set FD0RM003 initial; /* M003 input/output*/
    set FD0RM004 initial; /* M004 input/output*/
    set FD0RM005 initial; /* M005 input/output*/
    set FD0RM006 initial; /* M006 input/output*/
    set FD0RM007 initial; /* M007 input/output*/
    set FD0RM008 initial; /* M008 input/output*/
    set FD0RM009 initial; /* M009 input/output*/
    set FD0RM010 initial; /* M010 input/output*/
    set FD0RM011 initial; /* M011 input/output*/
    set FD0RM012 initial; /* M012 input/output*/
    set FD0RM099 initial; /* M099 input/output - main map*/
    set FD0RW00 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine parameters*/
    set TA6REC empty; /* Background job subroutine parameters*/
    set XX0XW01 empty; /* current date and time fields*/

     /* ------------------------------------------------------------*/
     /* set default values*/
     /* ------------------------------------------------------------*/

    COMMAREA.XGPCD = "02";
    XPCREC.XGPCD = "02"; /* used in xpctbl key data*/
    XPLREC.XGPCD = "02"; /* used in xpltbl key data*/
    XSUREC.XGPCD = "02"; /* used in xsutbl key data*/
    XGAREC.XGPCD = "02"; /* used in xgatbl key data*/

     /* ------------------------------------------------------------*/
     /* Indicate that the output destination must be obtained.*/
     /* ------------------------------------------------------------*/

    TA6REC.TA6SUBSW = "I"; /* Indicate obtain information*/

     /* ------------------------------------------------------------*/
     /* Indicate the number of selection lines on the menu.*/
     /* ------------------------------------------------------------*/

    FD0RW00.FD0RWIXL = 12; /* Number of selection lines*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FD0R001; /* Converse the main process*/


    FD0R001: FD0R001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FD0R001; /* Converse the main process*/


  end // end main
end // end FD0R

// Process valid input request
Function FD0R-02501()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6ROW = " "; /* Clear JCL array rows*/

  FD0RW00.FD0RWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FD0RT02.TARTYPE[FD0RWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FD0RW02 empty;

      FD0RW02.FD0RWPGM = "FD3101"; /* program name*/
      FD0RW02.FD0RWRUN = "R"; /* run type parm*/
      FD0RW02.FD0RWFDT = FD0RW00.FD0RWFCD; /* from date ccyymm*/
      FD0RW02.FD0RWTDT = FD0RW00.FD0RWTCD; /* to date ccyymm*/
      FD0RW00.FD0RWIDX = 1; /* load product type groups*/
      while (FD0RW00.FD0RWIDX <= 4)
        if (FD0RM002.FD0RMYPG[FD0RWIDX] == "S")
          FD0RW02.YPGCD[FD0RWIDX] = FD0RW00.FD0RWIDX;
        end
        FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
      end
      if (FD0RM002.FD0RMYPG[1] == "S" /* product type grp inline*/
       || FD0RM002.FD0RMYPG[2] == "S") /* product type grp makeup*/
        FD0RW02.XQACD[1] = "01";
        FD0RW02.XQACD[2] = "01";
        FD0RW02.XLCCD[1] = "10";
        FD0RW02.XLCCD[2] = "10";
        if (FD0RM002.FD0RMYPG[3] == "S") /* product type grp b-grade*/
          FD0RW02.XQACD[2] = "02";
          FD0RW02.XLCCD[2] = "20";
        end
        if (FD0RM002.FD0RMYPG[4] == "S") /* product type grp close out*/
          FD0RW02.XLCCD[2] = "20";
        end
      else
        if (FD0RM002.FD0RMYPG[3] == "S") /* product type grp b-grade*/
          FD0RW02.XQACD[1] = "02";
          FD0RW02.XQACD[2] = "02";
          FD0RW02.XLCCD[1] = "10";
          FD0RW02.XLCCD[2] = "20";
          if (FD0RM002.FD0RMYPG[4] == "S") /* product type grp close out*/
            FD0RW02.XQACD[1] = "01";
          end
        else
          if (FD0RM002.FD0RMYPG[4] == "S") /* product type grp close out*/
            FD0RW02.XQACD[1] = "01";
            FD0RW02.XQACD[2] = "01";
            FD0RW02.XLCCD[1] = "20";
            FD0RW02.XLCCD[2] = "20";
          end
        end
      end
      if (FD0RM002.XPLCD == "*")
        FD0RW02.XPLCD = " "; /* all product line requested*/
      else
        FD0RW02.XPLCD = FD0RM002.XPLCD; /* Product line*/
      end
      if (FD0RM002.XPCCD == "*")
        FD0RW02.XPCCD = " "; /* all product cats requested*/
      else
        FD0RW02.XPCCD = FD0RM002.XPCCD; /* Product category*/
      end
      if (FD0RM002.SYBSTGNB == "*")
        FD0RW02.SYBSTGNB = " "; /* all style groups requested*/
      else
        FD0RW02.SYBSTGNB = FD0RM002.SYBSTGNB;
      end
      if (FD0RM002.SY1STNBR == "*") /* all styles/colors/dims requested*/
        FD0RW02.SY1STNBR = " ";
        FD0RW02.SY2CLRID = " ";
        FD0RW02.XDMCD = " ";
      else
        FD0RW02.SY1STNBR = FD0RM002.SY1STNBR;
        FD0RW02.SY2CLRID = FD0RM002.SY2CLRID;
        FD0RW02.XDMCD = FD0RM002.XDMCD;
      end

      FD0RW02.FD0RWUID = TA6REC.XURUSRID;

      TA6REC.TARJCL[TA6INDEX] = FD0RW02.TARJCL; /* Parameters*/

    else

      if (FD0RT02.TARTYPE[FD0RWIXT] != " ")

        FD0RW01.TARJCL = FD0RT02.TARJCL[FD0RWIXT];

        if (FD0RT02.TARTYPE[FD0RWIXT] == "1" /* Report fd311d cond code*/
         && FD0RM002.FD0RMRPT[1] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE),         ";
        end
        if (FD0RT02.TARTYPE[FD0RWIXT] == "2" /* Report fd311d cond code*/
         && FD0RM002.FD0RMRPT[1] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT02.TARTYPE[FD0RWIXT] == "3" /* Report fd312d cond code*/
         && FD0RM002.FD0RMRPT[2] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE),         ";
        end
        if (FD0RT02.TARTYPE[FD0RWIXT] == "4" /* Report fd312d cond code*/
         && FD0RM002.FD0RMRPT[2] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT02.TARTYPE[FD0RWIXT] == "5" /* Report fd313d cond code*/
         && FD0RM002.FD0RMRPT[3] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE),         ";
        end
        if (FD0RT02.TARTYPE[FD0RWIXT] == "6" /* Report fd313d cond code*/
         && FD0RM002.FD0RMRPT[3] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
        TA6REC.TARTYPE[TA6INDEX] = FD0RT02.TARTYPE[FD0RWIXT]; /* Type*/

      else

        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FD0RT02.TARJCL[FD0RWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FD0RT02.TARTYPE[FD0RWIXT]; /* Type*/

      end

    end


    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FD0RT02.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMODID = "251"; /* Module identification*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FD0RW00.FD0RMSEL[2] = "*"; /* Indicate function completed*/
    FDWREC.XXXMSGNO = 18; /* register report job submitted*/

    set FD0RM002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FD0R-02501

// Process valid input request
Function FD0R-02502()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FD0RW00.FD0RWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FD0RT5O.TARTYPE[FD0RWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FD0RW5O empty;

      FD0RW5O.FD0RWPGM = "FD3101"; /* program name*/
      FD0RW5O.FD0RWRUN = "R"; /* run type parm*/
      FD0RW5O.FD0RWFDT = FD0RW00.FD0RWFCD; /* from date ccyymm*/
      FD0RW5O.FD0RWTDT = FD0RW00.FD0RWTCD; /* to date ccyymm*/
      FD0RW00.FD0RWIDX = 1; /* load product type groups*/
      while (FD0RW00.FD0RWIDX <= 4)
        if (FD0RM002.FD0RMYPG[FD0RWIDX] == "S")
          FD0RW5O.YPGCD[FD0RWIDX] = FD0RW00.FD0RWIDX;
        end
        FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
      end
      if (FD0RM002.FD0RMYPG[1] == "S" /* product type grp inline*/
       || FD0RM002.FD0RMYPG[2] == "S") /* product type grp makeup*/
        FD0RW5O.XQACD[1] = "01";
        FD0RW5O.XQACD[2] = "01";
        FD0RW5O.XLCCD[1] = "10";
        FD0RW5O.XLCCD[2] = "10";
        if (FD0RM002.FD0RMYPG[3] == "S") /* product type grp b-grade*/
          FD0RW5O.XQACD[2] = "02";
          FD0RW5O.XLCCD[2] = "20";
        end
        if (FD0RM002.FD0RMYPG[4] == "S") /* product type grp close out*/
          FD0RW5O.XLCCD[2] = "20";
        end
      else
        if (FD0RM002.FD0RMYPG[3] == "S") /* product type grp b-grade*/
          FD0RW5O.XQACD[1] = "02";
          FD0RW5O.XQACD[2] = "02";
          FD0RW5O.XLCCD[1] = "10";
          FD0RW5O.XLCCD[2] = "20";
          if (FD0RM002.FD0RMYPG[4] == "S") /* product type grp close out*/
            FD0RW5O.XQACD[1] = "01";
          end
        else
          if (FD0RM002.FD0RMYPG[4] == "S") /* product type grp close out*/
            FD0RW5O.XQACD[1] = "01";
            FD0RW5O.XQACD[2] = "01";
            FD0RW5O.XLCCD[1] = "20";
            FD0RW5O.XLCCD[2] = "20";
          end
        end
      end
      if (FD0RM002.XPLCD == "*")
        FD0RW5O.XPLCD = " "; /* all product line requested*/
      else
        FD0RW5O.XPLCD = FD0RM002.XPLCD; /* Product line*/
      end
      if (FD0RM002.XPCCD == "*")
        FD0RW5O.XPCCD = " "; /* all product cats requested*/
      else
        FD0RW5O.XPCCD = FD0RM002.XPCCD; /* Product category*/
      end
      if (FD0RM002.SYBSTGNB == "*")
        FD0RW5O.SYBSTGNB = " "; /* all style groups requested*/
      else
        FD0RW5O.SYBSTGNB = FD0RM002.SYBSTGNB;
      end
      if (FD0RM002.SY1STNBR == "*") /* all styles/colors/dims requested*/
        FD0RW5O.SY1STNBR = " ";
        FD0RW5O.SY2CLRID = " ";
        FD0RW5O.XDMCD = " ";
      else
        FD0RW5O.SY1STNBR = FD0RM002.SY1STNBR;
        FD0RW5O.SY2CLRID = FD0RM002.SY2CLRID;
        FD0RW5O.XDMCD = FD0RM002.XDMCD;
      end

      FD0RW5O.FD0RWUID = TA6REC.XURUSRID;

      TA6REC.TARJCL[TA6INDEX] = FD0RW5O.TARJCL; /* Parameters*/

    else

      if (FD0RT5O.TARTYPE[FD0RWIXT] != " ")

        FD0RW01.TARJCL = FD0RT5O.TARJCL[FD0RWIXT];

        if (FD0RT5O.TARTYPE[FD0RWIXT] == "1" /* Report fd311d cond code*/
         && FD0RM002.FD0RMRPT[1] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE),         ";
        end
        if (FD0RT5O.TARTYPE[FD0RWIXT] == "2" /* Report fd311d cond code*/
         && FD0RM002.FD0RMRPT[1] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT5O.TARTYPE[FD0RWIXT] == "3" /* Report fd312d cond code*/
         && FD0RM002.FD0RMRPT[2] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE),         ";
        end
        if (FD0RT5O.TARTYPE[FD0RWIXT] == "4" /* Report fd312d cond code*/
         && FD0RM002.FD0RMRPT[2] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT5O.TARTYPE[FD0RWIXT] == "5" /* Report fd313d cond code*/
         && FD0RM002.FD0RMRPT[3] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE),         ";
        end
        if (FD0RT5O.TARTYPE[FD0RWIXT] == "6" /* Report fd313d cond code*/
         && FD0RM002.FD0RMRPT[3] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
        TA6REC.TARTYPE[TA6INDEX] = FD0RT5O.TARTYPE[FD0RWIXT]; /* Type*/

      else

        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FD0RT5O.TARJCL[FD0RWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FD0RT5O.TARTYPE[FD0RWIXT]; /* Type*/

      end

    end


    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FD0RT5O.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMODID = "252"; /* Module identification*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FD0RW00.FD0RMSEL[2] = "*"; /* Indicate function completed*/
    FDWREC.XXXMSGNO = 18; /* register report job submitted*/

    set FD0RM002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FD0R-02502

// Process valid input request
Function FD0R-03501()
   /* ------------------------------------------------------------*/
   /* format passing parameter fd0rw03*/
   /* ------------------------------------------------------------*/

  set FD0RW03 empty;

  FD0RW03.FD0RWRUN = "R"; /* run type parm*/
  FD0RW03.FD0RWTFS = FD0RM003.FD0RMFSF;
  FD0RW03.FD0RWTUD = "B";
  FD0RW03.FD0RWCDT = FD0RW00.FD0RWCMC; /* from date ccyymm*/
  FD0RW03.FD0RWFDT = FD0RW00.FD0RWFCD; /* ytd from date ccyymm*/
  FD0RW03.FD0RWTDT = FD0RW00.FD0RWTCD; /* ytd to date ccyymm*/
  FD0RW00.FD0RWIDX = 1; /* load product type groups*/

  while (FD0RW00.FD0RWIDX <= 4)
    if (FD0RM003.FD0RMYPG[FD0RWIDX] == "S")
      FD0RW03.YPGCD[FD0RWIDX] = FD0RW00.FD0RWIDX;
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end

  if (FD0RM003.XPLCD == "*")
    FD0RW03.XPLCD = " "; /* all Product lines requested*/
  else
    FD0RW03.XPLCD = FD0RM003.XPLCD; /* Product line*/
  end

  if (FD0RM003.XPCCD == "*")
    FD0RW03.XPCCD = " "; /* all Product categories requested*/
  else
    FD0RW03.XPCCD = FD0RM003.XPCCD; /* Product category*/
  end

  if (FD0RM003.XDMCD == "*")
    FD0RW03.XDMCD = " "; /* all dimension codes requested*/
  else
    FD0RW03.XDMCD = FD0RM003.XDMCD; /* dimension code*/
  end

  if (FD0RM003.XGACD == "*")
    FD0RW03.XGACD = " "; /* all gender/age codes requested*/
  else
    FD0RW03.XGACD = FD0RM003.XGACD; /* gender/age code*/
  end

  if (FD0RM003.XSUCD == "*")
    FD0RW03.XSUCD = " "; /* all silhouette codes requested*/
  else
    FD0RW03.XSUCD = FD0RM003.XSUCD; /* silhouette code*/
  end

  if (FD0RM003.FD0RMYPG[1] == "S" /* determine quality code*/
   || FD0RM003.FD0RMYPG[2] == "S" 
   || FD0RM003.FD0RMYPG[4] == "S")
    FD0RW03.XQACD[1] = "01";
    FD0RW03.XQACD[2] = "01";
    if (FD0RM003.FD0RMYPG[3] == "S")
      FD0RW03.XQACD[2] = "02";
    end
  else
    if (FD0RM003.FD0RMYPG[3] == "S")
      FD0RW03.XQACD[1] = "02";
      FD0RW03.XQACD[2] = "02";
    end
  end

  FD0RW03.FD0RWUID = TA6REC.XURUSRID;

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FD0RW00.FD0RWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format futures jcl and parameters into the subroutine*/
   /* work area*/
   /* ------------------------------------------------------------*/

  if (FD0RM003.FD0RMFSF == "F") /* futures jcl*/

    while (TA6REC.TA6INDEX > 0) /* Until end of table*/

      /* ------------------------------------------------------------*/
      /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      if (FD0RT3F.TARTYPE[FD0RWIXT] == "P") /* Parameters statement*/
        TA6REC.TARJCL[TA6INDEX] = FD0RW03.TARJCL; /* Parameters*/
      else
        if (FD0RT3F.TARTYPE[FD0RWIXT] != " ")

          FD0RW01.TARJCL = FD0RT3F.TARJCL[FD0RWIXT];

          if (FD0RT3F.TARTYPE[FD0RWIXT] == "1" /* Report fd207d cond code*/
           && FD0RM003.FD0RMRPT[2] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT3F.TARTYPE[FD0RWIXT] == "2" /* Report fd207d cond code*/
           && FD0RM003.FD0RMRPT[2] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          if (FD0RT3F.TARTYPE[FD0RWIXT] == "3" /* Report fd208d cond code*/
           && FD0RM003.FD0RMRPT[1] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT3F.TARTYPE[FD0RWIXT] == "4" /* Report fd208d cond code*/
           && FD0RM003.FD0RMRPT[1] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
          TA6REC.TARTYPE[TA6INDEX] = FD0RT3F.TARTYPE[FD0RWIXT];

        else
          /* ------------------------------------------------------------*/
          /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = FD0RT3F.TARJCL[FD0RWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FD0RT3F.TARTYPE[FD0RWIXT];

        end
      end

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

      /* ------------------------------------------------------------*/
      /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (FD0RT3F.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/
        TA6REC.TA6INDEX = 0; /* Indicate end of table*/
      else
        FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/
      end
    end
  else
    /* -------------------------------------------------------------*/
    /* Format sales jcl and parameters into the subroutine work area*/
    /* -------------------------------------------------------------*/

    while (TA6REC.TA6INDEX > 0) /* Until end of table*/

        /* ------------------------------------------------------------*/
        /* Format the variable parameters entered by the user.*/
        /* ------------------------------------------------------------*/
      if (FD0RT3S.TARTYPE[FD0RWIXT] == "P") /* Parameters statement*/
        TA6REC.TARJCL[TA6INDEX] = FD0RW03.TARJCL; /* Parameters*/
      else

        if (FD0RT3S.TARTYPE[FD0RWIXT] != " ")
          FD0RW01.TARJCL = FD0RT3S.TARJCL[FD0RWIXT];

          if (FD0RT3S.TARTYPE[FD0RWIXT] == "1" /* Report fd207d cond code*/
           && FD0RM003.FD0RMRPT[2] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT3S.TARTYPE[FD0RWIXT] == "2" /* Report fd207d cond code*/
           && FD0RM003.FD0RMRPT[2] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          if (FD0RT3S.TARTYPE[FD0RWIXT] == "3" /* Report fd208d cond code*/
           && FD0RM003.FD0RMRPT[1] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT3S.TARTYPE[FD0RWIXT] == "4" /* Report fd208d cond code*/
           && FD0RM003.FD0RMRPT[1] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
          TA6REC.TARTYPE[TA6INDEX] = FD0RT3S.TARTYPE[FD0RWIXT];

        else
          /* ------------------------------------------------------------*/
          /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = FD0RT3S.TARJCL[FD0RWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FD0RT3S.TARTYPE[FD0RWIXT];

        end
      end

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

      /* ------------------------------------------------------------*/
      /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (FD0RT3S.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/
        TA6REC.TA6INDEX = 0; /* Indicate end of table*/
      else
        FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* ** Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMODID = "351"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FD0RW00.FD0RMSEL[3] = "*"; /* Indicate function completed*/
    FDWREC.XXXMSGNO = 19; /* comparison report job submitted*/

    set FD0RM003 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FD0R-03501

// Process valid input request
Function FD0R-03502()
   /* ------------------------------------------------------------*/
   /* format passing parameter fd0rw51*/
   /* ------------------------------------------------------------*/

  set FD0RW51 empty;

  FD0RW51.FD0RWRUN = "R"; /* run type parm*/
  FD0RW51.FD0RWTFS = FD0RM003.FD0RMFSF;
  FD0RW51.FD0RWTUD = "B";
  FD0RW51.FD0RWCDT = FD0RW00.FD0RWCMC; /* from date ccyymm*/
  FD0RW51.FD0RWFDT = FD0RW00.FD0RWFCD; /* ytd from date ccyymm*/
  FD0RW51.FD0RWTDT = FD0RW00.FD0RWTCD; /* ytd to date ccyymm*/
  FD0RW00.FD0RWIDX = 1; /* load product type groups*/

  while (FD0RW00.FD0RWIDX <= 4)
    if (FD0RM003.FD0RMYPG[FD0RWIDX] == "S")
      FD0RW51.YPGCD[FD0RWIDX] = FD0RW00.FD0RWIDX;
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end

  if (FD0RM003.XPLCD == "*")
    FD0RW51.XPLCD = " "; /* all Product lines requested*/
  else
    FD0RW51.XPLCD = FD0RM003.XPLCD; /* Product line*/
  end

  if (FD0RM003.XPCCD == "*")
    FD0RW51.XPCCD = " "; /* all Product categories requested*/
  else
    FD0RW51.XPCCD = FD0RM003.XPCCD; /* Product category*/
  end

  if (FD0RM003.XDMCD == "*")
    FD0RW51.XDMCD = " "; /* all dimension codes requested*/
  else
    FD0RW51.XDMCD = FD0RM003.XDMCD; /* dimension code*/
  end

  if (FD0RM003.XGACD == "*")
    FD0RW51.XGACD = " "; /* all gender/age codes requested*/
  else
    FD0RW51.XGACD = FD0RM003.XGACD; /* gender/age code*/
  end

  if (FD0RM003.XSUCD == "*")
    FD0RW51.XSUCD = " "; /* all silhouette codes requested*/
  else
    FD0RW51.XSUCD = FD0RM003.XSUCD; /* silhouette code*/
  end

  if (FD0RM003.FD0RMYPG[1] == "S" /* determine quality code*/
   || FD0RM003.FD0RMYPG[2] == "S" 
   || FD0RM003.FD0RMYPG[4] == "S")
    FD0RW51.XQACD[1] = "01";
    FD0RW51.XQACD[2] = "01";
    if (FD0RM003.FD0RMYPG[3] == "S")
      FD0RW51.XQACD[2] = "02";
    end
  else
    if (FD0RM003.FD0RMYPG[3] == "S")
      FD0RW51.XQACD[1] = "02";
      FD0RW51.XQACD[2] = "02";
    end
  end

  FD0RW51.FD0RWUID = TA6REC.XURUSRID;

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FD0RW00.FD0RWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format futures jcl and parameters into the subroutine*/
   /* work area*/
   /* ------------------------------------------------------------*/

  if (FD0RM003.FD0RMFSF == "F") /* futures jcl*/

    while (TA6REC.TA6INDEX > 0) /* Until end of table*/

      /* ------------------------------------------------------------*/
      /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      if (FD0RT51.TARTYPE[FD0RWIXT] == "P") /* Parameters statement*/
        TA6REC.TARJCL[TA6INDEX] = FD0RW51.TARJCL; /* Parameters*/
      else
        if (FD0RT51.TARTYPE[FD0RWIXT] != " ")

          FD0RW01.TARJCL = FD0RT51.TARJCL[FD0RWIXT];

          if (FD0RT51.TARTYPE[FD0RWIXT] == "1" /* Report fd207d cond code*/
           && FD0RM003.FD0RMRPT[2] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT51.TARTYPE[FD0RWIXT] == "2" /* Report fd207d cond code*/
           && FD0RM003.FD0RMRPT[2] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          if (FD0RT51.TARTYPE[FD0RWIXT] == "3" /* Report fd208d cond code*/
           && FD0RM003.FD0RMRPT[1] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT51.TARTYPE[FD0RWIXT] == "4" /* Report fd208d cond code*/
           && FD0RM003.FD0RMRPT[1] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
          TA6REC.TARTYPE[TA6INDEX] = FD0RT51.TARTYPE[FD0RWIXT];

        else
          /* ------------------------------------------------------------*/
          /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = FD0RT51.TARJCL[FD0RWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FD0RT51.TARTYPE[FD0RWIXT];

        end
      end

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

      /* ------------------------------------------------------------*/
      /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (FD0RT51.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/
        TA6REC.TA6INDEX = 0; /* Indicate end of table*/
      else
        FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/
      end
    end
  else
    /* -------------------------------------------------------------*/
    /* Format sales jcl and parameters into the subroutine work area*/
    /* -------------------------------------------------------------*/

    while (TA6REC.TA6INDEX > 0) /* Until end of table*/

        /* ------------------------------------------------------------*/
        /* Format the variable parameters entered by the user.*/
        /* ------------------------------------------------------------*/
      if (FD0RT52.TARTYPE[FD0RWIXT] == "P") /* Parameters statement*/
        TA6REC.TARJCL[TA6INDEX] = FD0RW51.TARJCL; /* Parameters*/
      else

        if (FD0RT52.TARTYPE[FD0RWIXT] != " ")
          FD0RW01.TARJCL = FD0RT52.TARJCL[FD0RWIXT];

          if (FD0RT52.TARTYPE[FD0RWIXT] == "1" /* Report fd207d cond code*/
           && FD0RM003.FD0RMRPT[2] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT52.TARTYPE[FD0RWIXT] == "2" /* Report fd207d cond code*/
           && FD0RM003.FD0RMRPT[2] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          if (FD0RT52.TARTYPE[FD0RWIXT] == "3" /* Report fd208d cond code*/
           && FD0RM003.FD0RMRPT[1] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT52.TARTYPE[FD0RWIXT] == "4" /* Report fd208d cond code*/
           && FD0RM003.FD0RMRPT[1] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
          TA6REC.TARTYPE[TA6INDEX] = FD0RT52.TARTYPE[FD0RWIXT];

        else
          /* ------------------------------------------------------------*/
          /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = FD0RT52.TARJCL[FD0RWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FD0RT52.TARTYPE[FD0RWIXT];

        end
      end

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

      /* ------------------------------------------------------------*/
      /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (FD0RT52.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/
        TA6REC.TA6INDEX = 0; /* Indicate end of table*/
      else
        FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* ** Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMODID = "352"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FD0RW00.FD0RMSEL[3] = "*"; /* Indicate function completed*/
    FDWREC.XXXMSGNO = 19; /* comparison report job submitted*/

    set FD0RM003 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FD0R-03502

// Process valid input request
Function FD0R-04501()
   /* ------------------------------------------------------------*/
   /* format passing parameter fd0rw04*/
   /* ------------------------------------------------------------*/

  set FD0RW04 empty;

  FD0RW04.FD0RWRUN = "R"; /* run type parm*/
  FD0RW04.FD0RWTFS = FD0RM004.FD0RMFSF;
  FD0RW04.FD0RWCDT = FD0RW00.FD0RWCMC; /* from date ccyymm*/
  FD0RW04.FD0RWFDT = FD0RW00.FD0RWFCD; /* ytd from date ccyymm*/
  FD0RW04.FD0RWTDT = FD0RW00.FD0RWTCD; /* ytd to date ccyymm*/
  FD0RW00.FD0RWIDX = 1; /* load product type groups*/
  while (FD0RW00.FD0RWIDX <= 4)
    if (FD0RM004.FD0RMYPG[FD0RWIDX] == "S")
      FD0RW04.YPGCD[FD0RWIDX] = FD0RW00.FD0RWIDX;
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end
  if (FD0RM004.XPLCD == "*")
    FD0RW04.XPLCD = " "; /* all Product lines requested*/
  else
    FD0RW04.XPLCD = FD0RM004.XPLCD; /* Product line*/
  end
  if (FD0RM004.XPCCD == "*")
    FD0RW04.XPCCD = " "; /* all Product categories requested*/
  else
    FD0RW04.XPCCD = FD0RM004.XPCCD; /* Product category*/
  end
  if (FD0RM004.XSUCD == "*")
    FD0RW04.XSUCD = " "; /* all silhouette codes requested*/
  else
    FD0RW04.XSUCD = FD0RM004.XSUCD; /* silhouette code*/
  end
  if (FD0RM004.FD0RMYPG[1] == "S" /* determine quality code*/
   || FD0RM004.FD0RMYPG[2] == "S" 
   || FD0RM004.FD0RMYPG[4] == "S")
    FD0RW04.XQACD[1] = "01";
    FD0RW04.XQACD[2] = "01";
    if (FD0RM004.FD0RMYPG[3] == "S")
      FD0RW04.XQACD[2] = "02";
    end
  else
    if (FD0RM004.FD0RMYPG[3] == "S")
      FD0RW04.XQACD[1] = "02";
      FD0RW04.XQACD[2] = "02";
    end
  end

  FD0RW04.FD0RWUID = TA6REC.XURUSRID;

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FD0RW00.FD0RWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format futures jcl and parameters into the subroutine*/
   /* work area*/
   /* ------------------------------------------------------------*/

  if (FD0RM004.FD0RMFSF == "F") /* futures jcl*/

    while (TA6REC.TA6INDEX > 0) /* Until end of table*/

      if (FD0RT4F.TARTYPE[FD0RWIXT] == "B" /* extract program*/
       || FD0RT4F.TARTYPE[FD0RWIXT] == "U" /* unit report*/
       || FD0RT4F.TARTYPE[FD0RWIXT] == "D") /* dollar report*/

        if (FD0RT4F.TARTYPE[FD0RWIXT] == "B")
          FD0RW04.FD0RWTUD = "B";
        end

        if (FD0RT4F.TARTYPE[FD0RWIXT] == "U")
          FD0RW04.FD0RWTUD = "U";
        end

        if (FD0RT4F.TARTYPE[FD0RWIXT] == "D")
          FD0RW04.FD0RWTUD = "D";
        end

        /* ------------------------------------------------------------*/
         /* Format the variable parameters entered by the user.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FD0RW04.TARJCL; /* Parameters*/

      else

        if (FD0RT4F.TARTYPE[FD0RWIXT] != " ")

          FD0RW01.TARJCL = FD0RT4F.TARJCL[FD0RWIXT];

          if (FD0RT4F.TARTYPE[FD0RWIXT] == "1" /* units report cond code*/
           && FD0RM004.FD0RMRPT[1] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT4F.TARTYPE[FD0RWIXT] == "2" /* units report cond code*/
           && FD0RM004.FD0RMRPT[1] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          if (FD0RT4F.TARTYPE[FD0RWIXT] == "3" /* dollar report cond code*/
           && FD0RM004.FD0RMRPT[2] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT4F.TARTYPE[FD0RWIXT] == "4" /* dollar report cond code*/
           && FD0RM004.FD0RMRPT[2] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
          TA6REC.TARTYPE[TA6INDEX] = FD0RT4F.TARTYPE[FD0RWIXT];

        else

          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = FD0RT4F.TARJCL[FD0RWIXT];
          TA6REC.TARTYPE[TA6INDEX] = FD0RT4F.TARTYPE[FD0RWIXT];

        end
      end

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (FD0RT4F.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/
        TA6REC.TA6INDEX = 0; /* Indicate end of table*/
      else
        FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/
      end
    end
  else

    /* ------------------------------------------------------------*/
     /* Format sales jcl and parameters into the subroutine*/
     /* work area*/
    /* ------------------------------------------------------------*/

    while (TA6REC.TA6INDEX > 0) /* Until end of table*/

      if (FD0RT4S.TARTYPE[FD0RWIXT] == "B" /* unit/dollar extract*/
       || FD0RT4S.TARTYPE[FD0RWIXT] == "U" /* unit report*/
       || FD0RT4S.TARTYPE[FD0RWIXT] == "D") /* dollar report*/

        if (FD0RT4S.TARTYPE[FD0RWIXT] == "B")
          FD0RW04.FD0RWTUD = "B";
        end

        if (FD0RT4S.TARTYPE[FD0RWIXT] == "U")
          FD0RW04.FD0RWTUD = "U";
        end

        if (FD0RT4S.TARTYPE[FD0RWIXT] == "D")
          FD0RW04.FD0RWTUD = "D";
        end

        /* ------------------------------------------------------------*/
         /* Format the variable parameters entered by the user.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FD0RW04.TARJCL; /* Parameters*/

      else

        if (FD0RT4S.TARTYPE[FD0RWIXT] != " ")

          FD0RW01.TARJCL = FD0RT4S.TARJCL[FD0RWIXT];

          if (FD0RT4S.TARTYPE[FD0RWIXT] == "1" /* unit report cond code*/
           && FD0RM004.FD0RMRPT[1] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT4S.TARTYPE[FD0RWIXT] == "2" /* unit report cond code*/
           && FD0RM004.FD0RMRPT[1] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          if (FD0RT4S.TARTYPE[FD0RWIXT] == "3" /* dollar report cond code*/
           && FD0RM004.FD0RMRPT[2] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT4S.TARTYPE[FD0RWIXT] == "4" /* dollar report cond code*/
           && FD0RM004.FD0RMRPT[2] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
          TA6REC.TARTYPE[TA6INDEX] = FD0RT4S.TARTYPE[FD0RWIXT]; /* Type*/

        else

          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = FD0RT4S.TARJCL[FD0RWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FD0RT4S.TARTYPE[FD0RWIXT]; /* Type*/

        end
      end

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (FD0RT4S.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/
        TA6REC.TA6INDEX = 0; /* Indicate end of table*/
      else
        FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/


  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMODID = "451"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FD0RW00.FD0RMSEL[4] = "*"; /* Indicate function completed*/
    FDWREC.XXXMSGNO = 24; /* top 20 job submitted*/

    set FD0RM004 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FD0R-04501

// Process valid input request
Function FD0R-04502()
   /* ------------------------------------------------------------*/
   /* format passing parameter fd0rw53*/
   /* ------------------------------------------------------------*/

  set FD0RW53 empty;

  FD0RW53.FD0RWRUN = "R"; /* run type parm*/
  FD0RW53.FD0RWTFS = FD0RM004.FD0RMFSF;
  FD0RW53.FD0RWCDT = FD0RW00.FD0RWCMC; /* from date ccyymm*/
  FD0RW53.FD0RWFDT = FD0RW00.FD0RWFCD; /* ytd from date ccyymm*/
  FD0RW53.FD0RWTDT = FD0RW00.FD0RWTCD; /* ytd to date ccyymm*/
  FD0RW00.FD0RWIDX = 1; /* load product type groups*/
  while (FD0RW00.FD0RWIDX <= 4)
    if (FD0RM004.FD0RMYPG[FD0RWIDX] == "S")
      FD0RW53.YPGCD[FD0RWIDX] = FD0RW00.FD0RWIDX;
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end
  if (FD0RM004.XPLCD == "*")
    FD0RW53.XPLCD = " "; /* all Product lines requested*/
  else
    FD0RW53.XPLCD = FD0RM004.XPLCD; /* Product line*/
  end
  if (FD0RM004.XPCCD == "*")
    FD0RW53.XPCCD = " "; /* all Product categories requested*/
  else
    FD0RW53.XPCCD = FD0RM004.XPCCD; /* Product category*/
  end
  if (FD0RM004.XSUCD == "*")
    FD0RW53.XSUCD = " "; /* all silhouette codes requested*/
  else
    FD0RW53.XSUCD = FD0RM004.XSUCD; /* silhouette code*/
  end
  if (FD0RM004.FD0RMYPG[1] == "S" /* determine quality code*/
   || FD0RM004.FD0RMYPG[2] == "S" 
   || FD0RM004.FD0RMYPG[4] == "S")
    FD0RW53.XQACD[1] = "01";
    FD0RW53.XQACD[2] = "01";
    if (FD0RM004.FD0RMYPG[3] == "S")
      FD0RW53.XQACD[2] = "02";
    end
  else
    if (FD0RM004.FD0RMYPG[3] == "S")
      FD0RW53.XQACD[1] = "02";
      FD0RW53.XQACD[2] = "02";
    end
  end

  FD0RW53.FD0RWUID = TA6REC.XURUSRID;

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FD0RW00.FD0RWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format futures jcl and parameters into the subroutine*/
   /* work area*/
   /* ------------------------------------------------------------*/

  if (FD0RM004.FD0RMFSF == "F") /* futures jcl*/

    while (TA6REC.TA6INDEX > 0) /* Until end of table*/

      if (FD0RT53.TARTYPE[FD0RWIXT] == "B" /* extract program*/
       || FD0RT53.TARTYPE[FD0RWIXT] == "U" /* unit report*/
       || FD0RT53.TARTYPE[FD0RWIXT] == "D") /* dollar report*/

        if (FD0RT53.TARTYPE[FD0RWIXT] == "B")
          FD0RW53.FD0RWTUD = "B";
        end

        if (FD0RT53.TARTYPE[FD0RWIXT] == "U")
          FD0RW53.FD0RWTUD = "U";
        end

        if (FD0RT53.TARTYPE[FD0RWIXT] == "D")
          FD0RW53.FD0RWTUD = "D";
        end

        /* ------------------------------------------------------------*/
        /* Format the variable parameters entered by the user.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FD0RW53.TARJCL; /* Parameters*/

      else

        if (FD0RT53.TARTYPE[FD0RWIXT] != " ")

          FD0RW01.TARJCL = FD0RT53.TARJCL[FD0RWIXT];

          if (FD0RT53.TARTYPE[FD0RWIXT] == "1" /* units report cond code*/
           && FD0RM004.FD0RMRPT[1] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT53.TARTYPE[FD0RWIXT] == "2" /* units report cond code*/
           && FD0RM004.FD0RMRPT[1] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          if (FD0RT53.TARTYPE[FD0RWIXT] == "3" /* dollar report cond code*/
           && FD0RM004.FD0RMRPT[2] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT53.TARTYPE[FD0RWIXT] == "4" /* dollar report cond code*/
           && FD0RM004.FD0RMRPT[2] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
          TA6REC.TARTYPE[TA6INDEX] = FD0RT53.TARTYPE[FD0RWIXT];

        else

          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = FD0RT53.TARJCL[FD0RWIXT];
          TA6REC.TARTYPE[TA6INDEX] = FD0RT53.TARTYPE[FD0RWIXT];

        end
      end

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (FD0RT53.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/
        TA6REC.TA6INDEX = 0; /* Indicate end of table*/
      else
        FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/
      end
    end
  else

    /* ------------------------------------------------------------*/
    /* Format sales jcl and parameters into the subroutine*/
    /* work area*/
    /* ------------------------------------------------------------*/

    while (TA6REC.TA6INDEX > 0) /* Until end of table*/

      if (FD0RT54.TARTYPE[FD0RWIXT] == "B" /* unit/dollar extract*/
       || FD0RT54.TARTYPE[FD0RWIXT] == "U" /* unit report*/
       || FD0RT54.TARTYPE[FD0RWIXT] == "D") /* dollar report*/

        if (FD0RT54.TARTYPE[FD0RWIXT] == "B")
          FD0RW53.FD0RWTUD = "B";
        end

        if (FD0RT54.TARTYPE[FD0RWIXT] == "U")
          FD0RW53.FD0RWTUD = "U";
        end

        if (FD0RT54.TARTYPE[FD0RWIXT] == "D")
          FD0RW53.FD0RWTUD = "D";
        end

        /* ------------------------------------------------------------*/
         /* Format the variable parameters entered by the user.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FD0RW53.TARJCL; /* Parameters*/

      else

        if (FD0RT54.TARTYPE[FD0RWIXT] != " ")

          FD0RW01.TARJCL = FD0RT54.TARJCL[FD0RWIXT];

          if (FD0RT54.TARTYPE[FD0RWIXT] == "1" /* unit report cond code*/
           && FD0RM004.FD0RMRPT[1] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT54.TARTYPE[FD0RWIXT] == "2" /* unit report cond code*/
           && FD0RM004.FD0RMRPT[1] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          if (FD0RT54.TARTYPE[FD0RWIXT] == "3" /* dollar report cond code*/
           && FD0RM004.FD0RMRPT[2] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT54.TARTYPE[FD0RWIXT] == "4" /* dollar report cond code*/
           && FD0RM004.FD0RMRPT[2] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
          TA6REC.TARTYPE[TA6INDEX] = FD0RT54.TARTYPE[FD0RWIXT];

        else

          /* ------------------------------------------------------------*/
          /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = FD0RT54.TARJCL[FD0RWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FD0RT54.TARTYPE[FD0RWIXT]; /* Type*/

        end
      end

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (FD0RT54.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/
        TA6REC.TA6INDEX = 0; /* Indicate end of table*/
      else
        FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/


  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMODID = "452"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FD0RW00.FD0RMSEL[4] = "*"; /* Indicate function completed*/
    FDWREC.XXXMSGNO = 24; /* top 20 job submitted*/

    set FD0RM004 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FD0R-04502

// Process valid input request
Function FD0R-05501()
   /* ------------------------------------------------------------*/
   /* format passing parameter fd0rw05*/
   /* ------------------------------------------------------------*/

  set FD0RW05 empty;

  FD0RW05.FD0RWRUN = "R"; /* run type parm*/
  FD0RW05.FD0RWTFS = FD0RM005.FD0RMFSF;
  FD0RW05.FD0RWCDT = FD0RW00.FD0RWCMC; /* comparison date ccyymm*/
  FD0RW05.FD0RWFDT = FD0RW00.FD0RWFCD; /* from date ccyymm*/
  FD0RW05.FD0RWTDT = FD0RW00.FD0RWTCD; /* to date ccyymm*/
  FD0RW00.FD0RWIDX = 1; /* load product type groups*/
  while (FD0RW00.FD0RWIDX <= 4)
    if (FD0RM005.FD0RMYPG[FD0RWIDX] == "S")
      FD0RW05.YPGCD[FD0RWIDX] = FD0RW00.FD0RWIDX;
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end
  if (FD0RM005.XPLCD == "*")
    FD0RW05.XPLCD = " "; /* all Product lines requested*/
  else
    FD0RW05.XPLCD = FD0RM005.XPLCD; /* Product line*/
  end
  if (FD0RM005.XPCCD == "*")
    FD0RW05.XPCCD = " "; /* all Product category requested*/
  else
    FD0RW05.XPCCD = FD0RM005.XPCCD; /* Product category*/
  end
  if (FD0RM005.SYBSTGNB == "*")
    FD0RW05.SYBSTGNB = " "; /* all style group nbrs requested*/
  else
    FD0RW05.SYBSTGNB = FD0RM005.SYBSTGNB; /* style group nbr*/
  end
  if (FD0RM005.XDMCD == "*")
    FD0RW05.XDMCD = " "; /* all dimension codes requested*/
  else
    FD0RW05.XDMCD = FD0RM005.XDMCD; /* dimension code*/
  end
  if (FD0RM005.XGACD == "*")
    FD0RW05.XGACD = " "; /* all gender/age codes requested*/
  else
    FD0RW05.XGACD = FD0RM005.XGACD; /* gender/age code*/
  end
  if (FD0RM005.XSUCD == "*")
    FD0RW05.XSUCD = " "; /* all silhouette codes requested*/
  else
    FD0RW05.XSUCD = FD0RM005.XSUCD; /* silhouette code*/
  end
  if (FD0RM005.FD0RMYPG[1] == "S" /* determine quality code*/
   || FD0RM005.FD0RMYPG[2] == "S" 
   || FD0RM005.FD0RMYPG[4] == "S")
    FD0RW05.XQACD[1] = "01";
    FD0RW05.XQACD[2] = "01";
    if (FD0RM005.FD0RMYPG[3] == "S")
      FD0RW05.XQACD[2] = "02";
    end
  else
    if (FD0RM005.FD0RMYPG[3] == "S")
      FD0RW05.XQACD[1] = "02";
      FD0RW05.XQACD[2] = "02";
    end
  end

  FD0RW05.FD0RWUID = TA6REC.XURUSRID;

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FD0RW00.FD0RWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format futures jcl and parameters into the subroutine*/
   /* work area*/
   /* ------------------------------------------------------------*/

  if (FD0RM005.FD0RMFSF == "F") /* futures jcl*/

    while (TA6REC.TA6INDEX > 0) /* Until end of table*/

      if (FD0RT5F.TARTYPE[FD0RWIXT] == "B" /* unit/dollar extract*/
       || FD0RT5F.TARTYPE[FD0RWIXT] == "U" /* unit report*/
       || FD0RT5F.TARTYPE[FD0RWIXT] == "D") /* dollar report*/

        if (FD0RT5F.TARTYPE[FD0RWIXT] == "B")
          FD0RW05.FD0RWTUD = "B";
        end

        if (FD0RT5F.TARTYPE[FD0RWIXT] == "U")
          FD0RW05.FD0RWTUD = "U";
        end

        if (FD0RT5F.TARTYPE[FD0RWIXT] == "D")
          FD0RW05.FD0RWTUD = "D";
        end
        /* ------------------------------------------------------------*/
         /* Format the variable parameters entered by the user.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FD0RW05.TARJCL; /* Parameters*/

      else

        if (FD0RT5F.TARTYPE[FD0RWIXT] != " ")

          FD0RW01.TARJCL = FD0RT5F.TARJCL[FD0RWIXT];

          if (FD0RT5F.TARTYPE[FD0RWIXT] == "1" /* style/color unit rpt*/
           && FD0RM005.FD0RMRPT[1] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT5F.TARTYPE[FD0RWIXT] == "2" /* style/color unit rpt*/
           && FD0RM005.FD0RMRPT[1] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          if (FD0RT5F.TARTYPE[FD0RWIXT] == "3" /* style/color dollar rpt*/
           && FD0RM005.FD0RMRPT[2] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT5F.TARTYPE[FD0RWIXT] == "4" /* style/color dollar rpt*/
           && FD0RM005.FD0RMRPT[2] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          if (FD0RT5F.TARTYPE[FD0RWIXT] == "5" /* style grp units rpt*/
           && FD0RM005.FD0RMRPT[3] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT5F.TARTYPE[FD0RWIXT] == "6" /* style grp units rpt*/
           && FD0RM005.FD0RMRPT[3] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          if (FD0RT5F.TARTYPE[FD0RWIXT] == "7" /* style grp dollar rpt*/
           && FD0RM005.FD0RMRPT[4] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT5F.TARTYPE[FD0RWIXT] == "8" /* style grp dollar rpt*/
           && FD0RM005.FD0RMRPT[4] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
          TA6REC.TARTYPE[TA6INDEX] = FD0RT5F.TARTYPE[FD0RWIXT]; /* Type*/

        else

          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = FD0RT5F.TARJCL[FD0RWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FD0RT5F.TARTYPE[FD0RWIXT]; /* Type*/

        end
      end

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (FD0RT5F.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/
        TA6REC.TA6INDEX = 0; /* Indicate end of table*/
      else
        FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/
      end
    end
  else

    /* ------------------------------------------------------------*/
     /* Format sales jcl and parameters into the subroutine*/
     /* work area*/
    /* ------------------------------------------------------------*/

    while (TA6REC.TA6INDEX > 0) /* Until end of table*/

      if (FD0RT5S.TARTYPE[FD0RWIXT] == "B" /* Parameters statement*/
       || FD0RT5S.TARTYPE[FD0RWIXT] == "U" /* unit report*/
       || FD0RT5S.TARTYPE[FD0RWIXT] == "D") /* dollar report*/

        if (FD0RT5S.TARTYPE[FD0RWIXT] == "B")
          FD0RW05.FD0RWTUD = "B";
        end

        if (FD0RT5S.TARTYPE[FD0RWIXT] == "U")
          FD0RW05.FD0RWTUD = "U";
        end

        if (FD0RT5S.TARTYPE[FD0RWIXT] == "D")
          FD0RW05.FD0RWTUD = "D";
        end

        /* ------------------------------------------------------------*/
         /* Format the variable parameters entered by the user.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FD0RW05.TARJCL; /* Parameters*/

      else

        if (FD0RT5S.TARTYPE[FD0RWIXT] != " ")

          FD0RW01.TARJCL = FD0RT5S.TARJCL[FD0RWIXT];

          if (FD0RT5S.TARTYPE[FD0RWIXT] == "1" /* style/color unit rpt*/
           && FD0RM005.FD0RMRPT[1] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT5S.TARTYPE[FD0RWIXT] == "2" /* style/color unit rpt*/
           && FD0RM005.FD0RMRPT[1] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          if (FD0RT5S.TARTYPE[FD0RWIXT] == "3" /* style/color dollar rpt*/
           && FD0RM005.FD0RMRPT[2] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT5S.TARTYPE[FD0RWIXT] == "4" /* style/color dollar rpt*/
           && FD0RM005.FD0RMRPT[2] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          if (FD0RT5S.TARTYPE[FD0RWIXT] == "5" /* style grp units rpt*/
           && FD0RM005.FD0RMRPT[3] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT5S.TARTYPE[FD0RWIXT] == "6" /* style grp units rpt*/
           && FD0RM005.FD0RMRPT[3] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          if (FD0RT5S.TARTYPE[FD0RWIXT] == "7" /* style grp dollar rpt*/
           && FD0RM005.FD0RMRPT[4] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT5S.TARTYPE[FD0RWIXT] == "8" /* style grp dollar rpt*/
           && FD0RM005.FD0RMRPT[4] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
          TA6REC.TARTYPE[TA6INDEX] = FD0RT5S.TARTYPE[FD0RWIXT]; /* Type*/

        else

          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = FD0RT5S.TARJCL[FD0RWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FD0RT5S.TARTYPE[FD0RWIXT]; /* Type*/

        end
      end

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (FD0RT5S.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/
        TA6REC.TA6INDEX = 0; /* Indicate end of table*/
      else
        FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/


  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMODID = "551"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FD0RW00.FD0RMSEL[5] = "*"; /* Indicate function completed*/
    FDWREC.XXXMSGNO = 45; /* detail comparison job submitted*/

    set FD0RM005 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FD0R-05501

// Process valid input request
Function FD0R-05502()
   /* ------------------------------------------------------------*/
   /* format passing parameter fd0rw55*/
   /* ------------------------------------------------------------*/

  set FD0RW55 empty;

  FD0RW55.FD0RWRUN = "R"; /* run type parm*/
  FD0RW55.FD0RWTFS = FD0RM005.FD0RMFSF;
  FD0RW55.FD0RWCDT = FD0RW00.FD0RWCMC; /* comparison date ccyymm*/
  FD0RW55.FD0RWFDT = FD0RW00.FD0RWFCD; /* from date ccyymm*/
  FD0RW55.FD0RWTDT = FD0RW00.FD0RWTCD; /* to date ccyymm*/
  FD0RW00.FD0RWIDX = 1; /* load product type groups*/
  while (FD0RW00.FD0RWIDX <= 4)
    if (FD0RM005.FD0RMYPG[FD0RWIDX] == "S")
      FD0RW55.YPGCD[FD0RWIDX] = FD0RW00.FD0RWIDX;
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end
  if (FD0RM005.XPLCD == "*")
    FD0RW55.XPLCD = " "; /* all Product lines requested*/
  else
    FD0RW55.XPLCD = FD0RM005.XPLCD; /* Product line*/
  end
  if (FD0RM005.XPCCD == "*")
    FD0RW55.XPCCD = " "; /* all Product category requested*/
  else
    FD0RW55.XPCCD = FD0RM005.XPCCD; /* Product category*/
  end
  if (FD0RM005.SYBSTGNB == "*")
    FD0RW55.SYBSTGNB = " "; /* all style group nbrs requested*/
  else
    FD0RW55.SYBSTGNB = FD0RM005.SYBSTGNB; /* style group nbr*/
  end
  if (FD0RM005.XDMCD == "*")
    FD0RW55.XDMCD = " "; /* all dimension codes requested*/
  else
    FD0RW55.XDMCD = FD0RM005.XDMCD; /* dimension code*/
  end
  if (FD0RM005.XGACD == "*")
    FD0RW55.XGACD = " "; /* all gender/age codes requested*/
  else
    FD0RW55.XGACD = FD0RM005.XGACD; /* gender/age code*/
  end
  if (FD0RM005.XSUCD == "*")
    FD0RW55.XSUCD = " "; /* all silhouette codes requested*/
  else
    FD0RW55.XSUCD = FD0RM005.XSUCD; /* silhouette code*/
  end
  if (FD0RM005.FD0RMYPG[1] == "S" /* determine quality code*/
   || FD0RM005.FD0RMYPG[2] == "S" 
   || FD0RM005.FD0RMYPG[4] == "S")
    FD0RW55.XQACD[1] = "01";
    FD0RW55.XQACD[2] = "01";
    if (FD0RM005.FD0RMYPG[3] == "S")
      FD0RW55.XQACD[2] = "02";
    end
  else
    if (FD0RM005.FD0RMYPG[3] == "S")
      FD0RW55.XQACD[1] = "02";
      FD0RW55.XQACD[2] = "02";
    end
  end

  FD0RW55.FD0RWUID = TA6REC.XURUSRID;

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FD0RW00.FD0RWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format futures jcl and parameters into the subroutine*/
   /* work area*/
   /* ------------------------------------------------------------*/

  if (FD0RM005.FD0RMFSF == "F") /* futures jcl*/

    while (TA6REC.TA6INDEX > 0) /* Until end of table*/

      if (FD0RT55.TARTYPE[FD0RWIXT] == "B" /* unit/dollar extract*/
       || FD0RT55.TARTYPE[FD0RWIXT] == "U" /* unit report*/
       || FD0RT55.TARTYPE[FD0RWIXT] == "D") /* dollar report*/

        if (FD0RT55.TARTYPE[FD0RWIXT] == "B")
          FD0RW55.FD0RWTUD = "B";
        end

        if (FD0RT55.TARTYPE[FD0RWIXT] == "U")
          FD0RW55.FD0RWTUD = "U";
        end

        if (FD0RT55.TARTYPE[FD0RWIXT] == "D")
          FD0RW55.FD0RWTUD = "D";
        end
        /* ------------------------------------------------------------*/
         /* Format the variable parameters entered by the user.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FD0RW55.TARJCL; /* Parameters*/

      else

        if (FD0RT55.TARTYPE[FD0RWIXT] != " ")

          FD0RW01.TARJCL = FD0RT55.TARJCL[FD0RWIXT];

          if (FD0RT55.TARTYPE[FD0RWIXT] == "1" /* style/color unit rpt*/
           && FD0RM005.FD0RMRPT[1] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT55.TARTYPE[FD0RWIXT] == "2" /* style/color unit rpt*/
           && FD0RM005.FD0RMRPT[1] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          if (FD0RT55.TARTYPE[FD0RWIXT] == "3" /* style/color dollar rpt*/
           && FD0RM005.FD0RMRPT[2] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT55.TARTYPE[FD0RWIXT] == "4" /* style/color dollar rpt*/
           && FD0RM005.FD0RMRPT[2] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          if (FD0RT55.TARTYPE[FD0RWIXT] == "5" /* style grp units rpt*/
           && FD0RM005.FD0RMRPT[3] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT55.TARTYPE[FD0RWIXT] == "6" /* style grp units rpt*/
           && FD0RM005.FD0RMRPT[3] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          if (FD0RT55.TARTYPE[FD0RWIXT] == "7" /* style grp dollar rpt*/
           && FD0RM005.FD0RMRPT[4] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT55.TARTYPE[FD0RWIXT] == "8" /* style grp dollar rpt*/
           && FD0RM005.FD0RMRPT[4] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
          TA6REC.TARTYPE[TA6INDEX] = FD0RT55.TARTYPE[FD0RWIXT]; /* Type*/

        else

          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = FD0RT55.TARJCL[FD0RWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FD0RT55.TARTYPE[FD0RWIXT]; /* Type*/

        end
      end

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (FD0RT55.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/
        TA6REC.TA6INDEX = 0; /* Indicate end of table*/
      else
        FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/
      end
    end
  else

    /* ------------------------------------------------------------*/
     /* Format sales jcl and parameters into the subroutine*/
     /* work area*/
    /* ------------------------------------------------------------*/

    while (TA6REC.TA6INDEX > 0) /* Until end of table*/

      if (FD0RT56.TARTYPE[FD0RWIXT] == "B" /* Parameters statement*/
       || FD0RT56.TARTYPE[FD0RWIXT] == "U" /* unit report*/
       || FD0RT56.TARTYPE[FD0RWIXT] == "D") /* dollar report*/

        if (FD0RT56.TARTYPE[FD0RWIXT] == "B")
          FD0RW55.FD0RWTUD = "B";
        end

        if (FD0RT56.TARTYPE[FD0RWIXT] == "U")
          FD0RW55.FD0RWTUD = "U";
        end

        if (FD0RT56.TARTYPE[FD0RWIXT] == "D")
          FD0RW55.FD0RWTUD = "D";
        end

        /* ------------------------------------------------------------*/
         /* Format the variable parameters entered by the user.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FD0RW55.TARJCL; /* Parameters*/

      else

        if (FD0RT56.TARTYPE[FD0RWIXT] != " ")

          FD0RW01.TARJCL = FD0RT56.TARJCL[FD0RWIXT];

          if (FD0RT56.TARTYPE[FD0RWIXT] == "1" /* style/color unit rpt*/
           && FD0RM005.FD0RMRPT[1] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT56.TARTYPE[FD0RWIXT] == "2" /* style/color unit rpt*/
           && FD0RM005.FD0RMRPT[1] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          if (FD0RT56.TARTYPE[FD0RWIXT] == "3" /* style/color dollar rpt*/
           && FD0RM005.FD0RMRPT[2] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT56.TARTYPE[FD0RWIXT] == "4" /* style/color dollar rpt*/
           && FD0RM005.FD0RMRPT[2] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          if (FD0RT56.TARTYPE[FD0RWIXT] == "5" /* style grp units rpt*/
           && FD0RM005.FD0RMRPT[3] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT56.TARTYPE[FD0RWIXT] == "6" /* style grp units rpt*/
           && FD0RM005.FD0RMRPT[3] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          if (FD0RT56.TARTYPE[FD0RWIXT] == "7" /* style grp dollar rpt*/
           && FD0RM005.FD0RMRPT[4] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
          if (FD0RT56.TARTYPE[FD0RWIXT] == "8" /* style grp dollar rpt*/
           && FD0RM005.FD0RMRPT[4] == "S")    
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end

          TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
          TA6REC.TARTYPE[TA6INDEX] = FD0RT56.TARTYPE[FD0RWIXT];

        else

          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = FD0RT56.TARJCL[FD0RWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FD0RT56.TARTYPE[FD0RWIXT]; /* Type*/

        end
      end

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (FD0RT56.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/
        TA6REC.TA6INDEX = 0; /* Indicate end of table*/
      else
        FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMODID = "552"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FD0RW00.FD0RMSEL[5] = "*"; /* Indicate function completed*/
    FDWREC.XXXMSGNO = 45; /* detail comparison job submitted*/

    set FD0RM005 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FD0R-05502

// Process valid input request
Function FD0R-06501()
   /* ------------------------------------------------------------*/
   /* format passing parameter WFDSFPRM*/
   /* ------------------------------------------------------------*/

  set FD0RW6A empty;

  FD0RW6A.FD0RWRUN = "R"; /* run type parm*/
  FD0RW6A.FD0RWTFS = "S";
  FD0RW6A.FD0RWTUD = "U";
  FD0RW6A.FD0RWCDT = FD0RW00.FD0RWCMC; /* comp date ccyymm*/
  FD0RW6A.FD0RWFDT = 0; /* from date ccyymm*/
  FD0RW6A.FD0RWTDT = 0; /* to date ccyymm*/
  FD0RW00.FD0RWIDX = 1; /* load product type groups*/
  while (FD0RW00.FD0RWIDX <= 4)
    if (FD0RM006.FD0RMYPG[FD0RWIDX] == "S")
      FD0RW6A.YPGCD[FD0RWIDX] = FD0RW00.FD0RWIDX;
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end
  FD0RW00.FD0RWIDX = 1; /* load product divisions*/
  if (FD0RM006.FD0RMXDV[1] != " ")
    FD0RW6A.FD0RWXDV[FD0RWIDX] = "01";
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end
  if (FD0RM006.FD0RMXDV[2] != " ")
    FD0RW6A.FD0RWXDV[FD0RWIDX] = "02";
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end
  if (FD0RM006.FD0RMXDV[3] != " ")
    FD0RW6A.FD0RWXDV[FD0RWIDX] = "03";
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end
  if (FD0RM006.XPLCD == "*")
    FD0RW6A.XPLCD = " "; /* all Product lines requested*/
  else
    FD0RW6A.XPLCD = FD0RM006.XPLCD; /* Product line*/
  end
  if (FD0RM006.XPCCD == "*")
    FD0RW6A.XPCCD = " "; /* all Product categories requested*/
  else
    FD0RW6A.XPCCD = FD0RM006.XPCCD; /* Product category*/
  end
  if (FD0RM006.SYBSTGNB == "*")
    FD0RW6A.SYBSTGNB = " "; /* all style group nbrs requested*/
  else
    FD0RW6A.SYBSTGNB = FD0RM006.SYBSTGNB; /* style group nbr*/
  end
  if (FD0RM006.FD0RMYPG[1] == "S" /* determine quality code*/
   || FD0RM006.FD0RMYPG[2] == "S" 
   || FD0RM006.FD0RMYPG[4] == "S")
    FD0RW6A.XQACD[1] = "01";
    FD0RW6A.XQACD[2] = "01";
    if (FD0RM006.FD0RMYPG[3] == "S")
      FD0RW6A.XQACD[2] = "02";
    end
  else
    if (FD0RM006.FD0RMYPG[3] == "S")
      FD0RW6A.XQACD[1] = "02";
      FD0RW6A.XQACD[2] = "02";
    end
  end

  FD0RW6A.FD0RWUID = TA6REC.XURUSRID;

   /* ------------------------------------------------------------*/
   /* format passing parameter WFDinan*/
   /* ------------------------------------------------------------*/

  set FD0RW6B empty;

  FD0RW6B.FD0RWRUN = "R"; /* run type parm*/
  FD0RW6B.FD0RWCDT = FD0RW00.FD0RWCMC; /* to date ccyymm*/
  FD0RW6B.FD0RMUNT = FD0RM006.FD0RMUNT; /* min inv qty*/
  FD0RW6B.FD0RMSAL = FD0RM006.FD0RMSAL; /* min sales qty*/
  FD0RW00.FD0RWIDX = 1; /* load product type groups*/
  while (FD0RW00.FD0RWIDX <= 4)
    if (FD0RM006.FD0RMYPG[FD0RWIDX] == "S")
      FD0RW6B.YPGCD[FD0RWIDX] = FD0RW00.FD0RWIDX;
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end
  FD0RW00.FD0RWIDX = 1; /* load product divisions*/
  if (FD0RM006.FD0RMXDV[1] != " ")
    FD0RW6B.FD0RWXDV[FD0RWIDX] = "01";
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end
  if (FD0RM006.FD0RMXDV[2] != " ")
    FD0RW6B.FD0RWXDV[FD0RWIDX] = "02";
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end
  if (FD0RM006.FD0RMXDV[3] != " ")
    FD0RW6B.FD0RWXDV[FD0RWIDX] = "03";
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end
  if (FD0RM006.FD0RMYPG[1] == "S" /* product type grp inline*/
   || FD0RM006.FD0RMYPG[2] == "S" /* product type grp makeup*/
   || FD0RM006.FD0RMYPG[4] == "S") /* product type grp close out*/
    FD0RW6B.XQACD[1] = "01";
    FD0RW6B.XQACD[2] = "01";
    if (FD0RM006.FD0RMYPG[3] == "S" /* product type grp b-grade*/
     || FD0RM006.FD0RMYPG[4] == "S") /* product type grp b-grade*/
      FD0RW6B.XQACD[2] = "02";
    end
  else
    if (FD0RM006.FD0RMYPG[3] == "S") /* product type grp close out*/
      FD0RW6B.XQACD[1] = "02";
      FD0RW6B.XQACD[2] = "02";
    end
  end
  if (FD0RM006.XPLCD == "*")
    FD0RW6B.XPLCD = " "; /* all Product lines requested*/
  else
    FD0RW6B.XPLCD = FD0RM006.XPLCD; /* Product line*/
  end
  if (FD0RM006.XPCCD == "*")
    FD0RW6B.XPCCD = " "; /* all Product categories requested*/
  else
    FD0RW6B.XPCCD = FD0RM006.XPCCD; /* Product category*/
  end
  if (FD0RM006.SYBSTGNB == "*")
    FD0RW6B.SYBSTGNB = " "; /* all style group nbrs requested*/
  else
    FD0RW6B.SYBSTGNB = FD0RM006.SYBSTGNB; /* style group nbr*/
  end

  FD0RW6B.FD0RWUID = TA6REC.XURUSRID;

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FD0RW00.FD0RWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FD0RT06.TARTYPE[FD0RWIXT] == "A" /* Parameters statement*/
     || FD0RT06.TARTYPE[FD0RWIXT] == "B") /* Parameters statement*/

      if (FD0RT06.TARTYPE[FD0RWIXT] == "A")
        TA6REC.TARJCL[TA6INDEX] = FD0RW6A.TARJCL; /* Parameters*/
      else
        TA6REC.TARJCL[TA6INDEX] = FD0RW6B.TARJCL; /* Parameters*/
      end

    else

      if (FD0RT06.TARTYPE[FD0RWIXT] != " ")

        FD0RW01.TARJCL = FD0RT06.TARJCL[FD0RWIXT];

        if (FD0RT06.TARTYPE[FD0RWIXT] == "1" /* Report fd213d cond code*/
         && FD0RM006.FD0RMRPT[1] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE),         ";
        end
        if (FD0RT06.TARTYPE[FD0RWIXT] == "2" /* Report fd213d cond code*/
         && FD0RM006.FD0RMRPT[1] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT06.TARTYPE[FD0RWIXT] == "3" /* Report fd214d cond code*/
         && FD0RM006.FD0RMRPT[2] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE),         ";
        end
        if (FD0RT06.TARTYPE[FD0RWIXT] == "4" /* Report fd214d cond code*/
         && FD0RM006.FD0RMRPT[2] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT06.TARTYPE[FD0RWIXT] == "5" /* Report fd315d cond code*/
         && FD0RM006.FD0RMRPT[3] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE),         ";
        end
        if (FD0RT06.TARTYPE[FD0RWIXT] == "6" /* Report fd315d cond code*/
         && FD0RM006.FD0RMRPT[3] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT06.TARTYPE[FD0RWIXT] == "7" /* Report fd316d cond code*/
         && FD0RM006.FD0RMRPT[4] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE),         ";
        end
        if (FD0RT06.TARTYPE[FD0RWIXT] == "8" /* Report fd316d cond code*/
         && FD0RM006.FD0RMRPT[4] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
        TA6REC.TARTYPE[TA6INDEX] = FD0RT06.TARTYPE[FD0RWIXT]; /* Type*/

      else

        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FD0RT06.TARJCL[FD0RWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FD0RT06.TARTYPE[FD0RWIXT]; /* Type*/

      end

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FD0RT06.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/


  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMODID = "651"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FD0RW00.FD0RMSEL[6] = "*"; /* Indicate function completed*/
    FDWREC.XXXMSGNO = 20; /* inventory analysis job submitted*/

    set FD0RM006 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/



end // end FD0R-06501

// Process valid input request
Function FD0R-06502()
   /* ------------------------------------------------------------*/
   /* format passing parameter WFDSFPRM*/
   /* ------------------------------------------------------------*/

  set FD0RW57 empty;

  FD0RW57.FD0RWRUN = "R"; /* run type parm*/
  FD0RW57.FD0RWTFS = "S";
  FD0RW57.FD0RWTUD = "U";
  FD0RW57.FD0RWCDT = FD0RW00.FD0RWCMC; /* comp date ccyymm*/
  FD0RW57.FD0RWFDT = 0; /* from date ccyymm*/
  FD0RW57.FD0RWTDT = 0; /* to date ccyymm*/
  FD0RW00.FD0RWIDX = 1; /* load product type groups*/
  while (FD0RW00.FD0RWIDX <= 4)
    if (FD0RM006.FD0RMYPG[FD0RWIDX] == "S")
      FD0RW57.YPGCD[FD0RWIDX] = FD0RW00.FD0RWIDX;
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end
  FD0RW00.FD0RWIDX = 1; /* load product divisions*/
  if (FD0RM006.FD0RMXDV[1] != " ")
    FD0RW57.FD0RWXDV[FD0RWIDX] = "01";
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end
  if (FD0RM006.FD0RMXDV[2] != " ")
    FD0RW57.FD0RWXDV[FD0RWIDX] = "02";
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end
  if (FD0RM006.FD0RMXDV[3] != " ")
    FD0RW57.FD0RWXDV[FD0RWIDX] = "03";
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end
  if (FD0RM006.XPLCD == "*")
    FD0RW57.XPLCD = " "; /* all Product lines requested*/
  else
    FD0RW57.XPLCD = FD0RM006.XPLCD; /* Product line*/
  end
  if (FD0RM006.XPCCD == "*")
    FD0RW57.XPCCD = " "; /* all Product categories requested*/
  else
    FD0RW57.XPCCD = FD0RM006.XPCCD; /* Product category*/
  end
  if (FD0RM006.SYBSTGNB == "*")
    FD0RW57.SYBSTGNB = " "; /* all style group nbrs requested*/
  else
    FD0RW57.SYBSTGNB = FD0RM006.SYBSTGNB; /* style group nbr*/
  end
  if (FD0RM006.FD0RMYPG[1] == "S" /* determine quality code*/
   || FD0RM006.FD0RMYPG[2] == "S" 
   || FD0RM006.FD0RMYPG[4] == "S")
    FD0RW57.XQACD[1] = "01";
    FD0RW57.XQACD[2] = "01";
    if (FD0RM006.FD0RMYPG[3] == "S")
      FD0RW57.XQACD[2] = "02";
    end
  else
    if (FD0RM006.FD0RMYPG[3] == "S")
      FD0RW57.XQACD[1] = "02";
      FD0RW57.XQACD[2] = "02";
    end
  end

  FD0RW57.FD0RWUID = TA6REC.XURUSRID;

   /* ------------------------------------------------------------*/
   /* format passing parameter WFDinan*/
   /* ------------------------------------------------------------*/

  set FD0RW99 empty;

  FD0RW99.FD0RWRUN = "R"; /* run type parm*/
  FD0RW99.FD0RWCDT = FD0RW00.FD0RWCMC; /* to date ccyymm*/
  FD0RW99.FD0RMUNT = FD0RM006.FD0RMUNT; /* min inv qty*/
  FD0RW99.FD0RMSAL = FD0RM006.FD0RMSAL; /* min sales qty*/
  FD0RW00.FD0RWIDX = 1; /* load product type groups*/
  while (FD0RW00.FD0RWIDX <= 4)
    if (FD0RM006.FD0RMYPG[FD0RWIDX] == "S")
      FD0RW99.YPGCD[FD0RWIDX] = FD0RW00.FD0RWIDX;
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end
  FD0RW00.FD0RWIDX = 1; /* load product divisions*/
  if (FD0RM006.FD0RMXDV[1] != " ")
    FD0RW99.FD0RWXDV[FD0RWIDX] = "01";
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end
  if (FD0RM006.FD0RMXDV[2] != " ")
    FD0RW99.FD0RWXDV[FD0RWIDX] = "02";
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end
  if (FD0RM006.FD0RMXDV[3] != " ")
    FD0RW99.FD0RWXDV[FD0RWIDX] = "03";
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end
  if (FD0RM006.FD0RMYPG[1] == "S" /* product type grp inline*/
   || FD0RM006.FD0RMYPG[2] == "S" /* product type grp makeup*/
   || FD0RM006.FD0RMYPG[4] == "S") /* product type grp close out*/
    FD0RW99.XQACD[1] = "01";
    FD0RW99.XQACD[2] = "01";
    if (FD0RM006.FD0RMYPG[3] == "S" /* product type grp b-grade*/
     || FD0RM006.FD0RMYPG[4] == "S") /* product type grp b-grade*/
      FD0RW99.XQACD[2] = "02";
    end
  else
    if (FD0RM006.FD0RMYPG[3] == "S") /* product type grp close out*/
      FD0RW99.XQACD[1] = "02";
      FD0RW99.XQACD[2] = "02";
    end
  end
  if (FD0RM006.XPLCD == "*")
    FD0RW99.XPLCD = " "; /* all Product lines requested*/
  else
    FD0RW99.XPLCD = FD0RM006.XPLCD; /* Product line*/
  end
  if (FD0RM006.XPCCD == "*")
    FD0RW99.XPCCD = " "; /* all Product categories requested*/
  else
    FD0RW99.XPCCD = FD0RM006.XPCCD; /* Product category*/
  end
  if (FD0RM006.SYBSTGNB == "*")
    FD0RW99.SYBSTGNB = " "; /* all style group nbrs requested*/
  else
    FD0RW99.SYBSTGNB = FD0RM006.SYBSTGNB; /* style group nbr*/
  end

  FD0RW99.FD0RWUID = TA6REC.XURUSRID;

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FD0RW00.FD0RWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FD0RT57.TARTYPE[FD0RWIXT] == "A" /* Parameters statement*/
     || FD0RT57.TARTYPE[FD0RWIXT] == "B") /* Parameters statement*/

      if (FD0RT57.TARTYPE[FD0RWIXT] == "A")
        TA6REC.TARJCL[TA6INDEX] = FD0RW57.TARJCL; /* Parameters*/
      else
        TA6REC.TARJCL[TA6INDEX] = FD0RW99.TARJCL; /* Parameters*/
      end

    else

      if (FD0RT57.TARTYPE[FD0RWIXT] != " ")

        FD0RW01.TARJCL = FD0RT57.TARJCL[FD0RWIXT];

        if (FD0RT57.TARTYPE[FD0RWIXT] == "1" /* Report fd213d cond code*/
         && FD0RM006.FD0RMRPT[1] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE),         ";
        end
        if (FD0RT57.TARTYPE[FD0RWIXT] == "2" /* Report fd213d cond code*/
         && FD0RM006.FD0RMRPT[1] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT57.TARTYPE[FD0RWIXT] == "3" /* Report fd214d cond code*/
         && FD0RM006.FD0RMRPT[2] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE),         ";
        end
        if (FD0RT57.TARTYPE[FD0RWIXT] == "4" /* Report fd214d cond code*/
         && FD0RM006.FD0RMRPT[2] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT57.TARTYPE[FD0RWIXT] == "5" /* Report fd315d cond code*/
         && FD0RM006.FD0RMRPT[3] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE),         ";
        end
        if (FD0RT57.TARTYPE[FD0RWIXT] == "6" /* Report fd315d cond code*/
         && FD0RM006.FD0RMRPT[3] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT57.TARTYPE[FD0RWIXT] == "7" /* Report fd316d cond code*/
         && FD0RM006.FD0RMRPT[4] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE),         ";
        end
        if (FD0RT57.TARTYPE[FD0RWIXT] == "8" /* Report fd316d cond code*/
         && FD0RM006.FD0RMRPT[4] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
        TA6REC.TARTYPE[TA6INDEX] = FD0RT57.TARTYPE[FD0RWIXT]; /* Type*/

      else

        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FD0RT57.TARJCL[FD0RWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FD0RT57.TARTYPE[FD0RWIXT]; /* Type*/

      end

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FD0RT57.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/


  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMODID = "652"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FD0RW00.FD0RMSEL[6] = "*"; /* Indicate function completed*/
    FDWREC.XXXMSGNO = 20; /* inventory analysis job submitted*/

    set FD0RM006 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/



end // end FD0R-06502

// Process valid input request
Function FD0R-07501()
   /* ------------------------------------------------------------*/
   /* format passing parameter WFD2401*/
   /* ------------------------------------------------------------*/

  set FD0RW7A empty;

  FD0RW7A.FD0RWFDT = FD0RW00.FD0RWFCD; /* from date ccyymm*/
  FD0RW7A.FD0RWTDT = FD0RW00.FD0RWTCD; /* to date ccyymm*/
  FD0RW00.FD0RWIDX = 1; /* load product type groups*/
  while (FD0RW00.FD0RWIDX <= 6)
    if (FD0RM007.SP1ID[FD0RWIDX] != " "
     && FD0RM007.SP1ID[FD0RWIDX] != "*")

      FD0RW7A.SP1ID[FD0RWIDX] = FD0RM007.SP1ID[FD0RWIDX];
      FD0RW7A.SP1ABRV[FD0RWIDX] = FD0RW00.SP1ABRV[FD0RWIDX];

    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end

   /* ------------------------------------------------------------*/
   /* format passing parameter WFD2402*/
   /* ------------------------------------------------------------*/

  set FD0RW7B empty;

  FD0RW7B.FD0RWRUN = "R"; /* run type parm*/

  move "N" to FD0RW7B.FD0RWRPT[1] for all; /* default table values to 'n'*/
  FD0RW00.FD0RWIDX = 1; /* load reports selected*/
  while (FD0RW00.FD0RWIDX <= 2)
    if (FD0RM007.FD0RMRPT[FD0RWIDX] == "S")
      FD0RW7B.FD0RWRPT[FD0RWIDX] = "Y";
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end
  FD0RW00.FD0RWIDX = 1; /* load reports selected*/
  while (FD0RW00.FD0RWIDX <= 4) /* load product type group*/
    if (FD0RM007.FD0RMYPG[FD0RWIDX] == "S")
      FD0RW7B.YPGCD[FD0RWIDX] = FD0RW00.FD0RWIDX;
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end
  if (FD0RM007.XPLCD == "*")
    FD0RW7B.XPLCD = " "; /* all Product lines requested*/
  else
    FD0RW7B.XPLCD = FD0RM007.XPLCD; /* Product line*/
  end
  if (FD0RM007.XPCCD == "*")
    FD0RW7B.XPCCD = " "; /* all Product categories requested*/
  else
    FD0RW7B.XPCCD = FD0RM007.XPCCD; /* Product category*/
  end
  if (FD0RM007.SYBSTGNB == "*")
    FD0RW7B.SYBSTGNB = " "; /* all style group nbrs requested*/
  else
    FD0RW7B.SYBSTGNB = FD0RM007.SYBSTGNB; /* style group nbr*/
  end
  if (FD0RM007.FD0RMPFC == "P")
    FD0RW7B.YSMSUMCD[1] = "PR";
    FD0RW7B.YSMSUMCD[2] = "PR";
  end
  if (FD0RM007.FD0RMPFC == "F")
    FD0RW7B.YSMSUMCD[1] = "FT";
    FD0RW7B.YSMSUMCD[2] = "FT";
  end
  if (FD0RM007.FD0RMPFC == "C")
    FD0RW7B.YSMSUMCD[1] = "PR";
    FD0RW7B.YSMSUMCD[2] = "FT";
  end
  if (FD0RM007.FD0RMYPG[1] == "S" /* product type grp inline*/
   || FD0RM007.FD0RMYPG[2] == "S") /* product type grp makeup*/
    FD0RW7B.XQACD[1] = "01";
    FD0RW7B.XQACD[2] = "01";
    FD0RW7B.XLCCD[1] = "10";
    FD0RW7B.XLCCD[2] = "10";
    if (FD0RM007.FD0RMYPG[3] == "S") /* product type grp b-grade*/
      FD0RW7B.XQACD[2] = "02";
      FD0RW7B.XLCCD[2] = "20";
    end
    if (FD0RM007.FD0RMYPG[4] == "S") /* product type grp close out*/
      FD0RW7B.XLCCD[2] = "20";
    end
  else
    if (FD0RM007.FD0RMYPG[3] == "S") /* product type grp b-grade*/
      FD0RW7B.XQACD[1] = "02";
      FD0RW7B.XQACD[2] = "02";
      FD0RW7B.XLCCD[1] = "10";
      FD0RW7B.XLCCD[2] = "20";
      if (FD0RM007.FD0RMYPG[4] == "S") /* product type grp close out*/
        FD0RW7B.XQACD[1] = "01";
      end
    else
      if (FD0RM007.FD0RMYPG[4] == "S") /* product type grp close out*/
        FD0RW7B.XQACD[1] = "01";
        FD0RW7B.XQACD[2] = "01";
        FD0RW7B.XLCCD[1] = "20";
        FD0RW7B.XLCCD[2] = "20";
      end
    end
  end

  FD0RW7B.FD0RWUID = TA6REC.XURUSRID;

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FD0RW00.FD0RWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FD0RT07.TARTYPE[FD0RWIXT] == "A" /* Parameters statement*/
     || FD0RT07.TARTYPE[FD0RWIXT] == "B") /* Parameters statement*/

      if (FD0RT07.TARTYPE[FD0RWIXT] == "A")
        TA6REC.TARJCL[TA6INDEX] = FD0RW7A.TARJCL; /* Parameters*/
      else
        TA6REC.TARJCL[TA6INDEX] = FD0RW7B.TARJCL; /* Parameters*/
      end

    else
      if (FD0RT07.TARTYPE[FD0RWIXT] != " ")
        FD0RW01.TARJCL = FD0RT07.TARJCL[FD0RWIXT];
        if (FD0RT07.TARTYPE[FD0RWIXT] == "1")
          if (FD0RM007.FD0RMRPT[1] == "S")
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end
        end
        if (FD0RT07.TARTYPE[FD0RWIXT] == "2")
          if (FD0RM007.FD0RMRPT[2] == "S")
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end
        end

        TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FD0RT07.TARTYPE[FD0RWIXT]; /* Type*/

      else

        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FD0RT07.TARJCL[FD0RWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FD0RT07.TARTYPE[FD0RWIXT]; /* Type*/
      end

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FD0RT07.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/


  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMODID = "751"; /* Module identification*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FD0RW00.FD0RMSEL[7] = "*"; /* Indicate function completed*/
    FDWREC.XXXMSGNO = 21; /* demand report job submitted*/

    set FD0RM007 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FD0R-07501

// Process valid input request
Function FD0R-07502()
   /* ------------------------------------------------------------*/
   /* format passing parameter WFD2401*/
   /* ------------------------------------------------------------*/

  set FD0RW58 empty;

  FD0RW58.FD0RWFDT = FD0RW00.FD0RWFCD; /* from date ccyymm*/
  FD0RW58.FD0RWTDT = FD0RW00.FD0RWTCD; /* to date ccyymm*/
  FD0RW00.FD0RWIDX = 1; /* load product type groups*/
  while (FD0RW00.FD0RWIDX <= 6)
    if (FD0RM007.SP1ID[FD0RWIDX] != " "
     && FD0RM007.SP1ID[FD0RWIDX] != "*")

      FD0RW58.SP1ID[FD0RWIDX] = FD0RM007.SP1ID[FD0RWIDX];
      FD0RW58.SP1ABRV[FD0RWIDX] = FD0RW00.SP1ABRV[FD0RWIDX];

    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end

   /* ------------------------------------------------------------*/
   /* format passing parameter WFD2402*/
   /* ------------------------------------------------------------*/

  set FD0RW98 empty;

  FD0RW98.FD0RWRUN = "R"; /* run type parm*/

  move "N" to FD0RW98.FD0RWRPT[1] for all; /* default table values to 'n'*/
  FD0RW00.FD0RWIDX = 1; /* load reports selected*/
  while (FD0RW00.FD0RWIDX <= 2)
    if (FD0RM007.FD0RMRPT[FD0RWIDX] == "S")
      FD0RW98.FD0RWRPT[FD0RWIDX] = "Y";
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end
  FD0RW00.FD0RWIDX = 1; /* load reports selected*/
  while (FD0RW00.FD0RWIDX <= 4) /* load product type group*/
    if (FD0RM007.FD0RMYPG[FD0RWIDX] == "S")
      FD0RW98.YPGCD[FD0RWIDX] = FD0RW00.FD0RWIDX;
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end
  if (FD0RM007.XPLCD == "*")
    FD0RW98.XPLCD = " "; /* all Product lines requested*/
  else
    FD0RW98.XPLCD = FD0RM007.XPLCD; /* Product line*/
  end
  if (FD0RM007.XPCCD == "*")
    FD0RW98.XPCCD = " "; /* all Product categories requested*/
  else
    FD0RW98.XPCCD = FD0RM007.XPCCD; /* Product category*/
  end
  if (FD0RM007.SYBSTGNB == "*")
    FD0RW98.SYBSTGNB = " "; /* all style group nbrs requested*/
  else
    FD0RW98.SYBSTGNB = FD0RM007.SYBSTGNB; /* style group nbr*/
  end
  if (FD0RM007.FD0RMPFC == "P")
    FD0RW98.YSMSUMCD[1] = "PR";
    FD0RW98.YSMSUMCD[2] = "PR";
  end
  if (FD0RM007.FD0RMPFC == "F")
    FD0RW98.YSMSUMCD[1] = "FT";
    FD0RW98.YSMSUMCD[2] = "FT";
  end
  if (FD0RM007.FD0RMPFC == "C")
    FD0RW98.YSMSUMCD[1] = "PR";
    FD0RW98.YSMSUMCD[2] = "FT";
  end
  if (FD0RM007.FD0RMYPG[1] == "S" /* product type grp inline*/
   || FD0RM007.FD0RMYPG[2] == "S") /* product type grp makeup*/
    FD0RW98.XQACD[1] = "01";
    FD0RW98.XQACD[2] = "01";
    FD0RW98.XLCCD[1] = "10";
    FD0RW98.XLCCD[2] = "10";
    if (FD0RM007.FD0RMYPG[3] == "S") /* product type grp b-grade*/
      FD0RW98.XQACD[2] = "02";
      FD0RW98.XLCCD[2] = "20";
    end
    if (FD0RM007.FD0RMYPG[4] == "S") /* product type grp close out*/
      FD0RW98.XLCCD[2] = "20";
    end
  else
    if (FD0RM007.FD0RMYPG[3] == "S") /* product type grp b-grade*/
      FD0RW98.XQACD[1] = "02";
      FD0RW98.XQACD[2] = "02";
      FD0RW98.XLCCD[1] = "10";
      FD0RW98.XLCCD[2] = "20";
      if (FD0RM007.FD0RMYPG[4] == "S") /* product type grp close out*/
        FD0RW98.XQACD[1] = "01";
      end
    else
      if (FD0RM007.FD0RMYPG[4] == "S") /* product type grp close out*/
        FD0RW98.XQACD[1] = "01";
        FD0RW98.XQACD[2] = "01";
        FD0RW98.XLCCD[1] = "20";
        FD0RW98.XLCCD[2] = "20";
      end
    end
  end

  FD0RW98.FD0RWUID = TA6REC.XURUSRID;

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FD0RW00.FD0RWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FD0RT58.TARTYPE[FD0RWIXT] == "A" /* Parameters statement*/
     || FD0RT58.TARTYPE[FD0RWIXT] == "B") /* Parameters statement*/

      if (FD0RT58.TARTYPE[FD0RWIXT] == "A")
        TA6REC.TARJCL[TA6INDEX] = FD0RW58.TARJCL; /* Parameters*/
      else
        TA6REC.TARJCL[TA6INDEX] = FD0RW98.TARJCL; /* Parameters*/
      end

    else
      if (FD0RT58.TARTYPE[FD0RWIXT] != " ")
        FD0RW01.TARJCL = FD0RT58.TARJCL[FD0RWIXT];
        if (FD0RT58.TARTYPE[FD0RWIXT] == "1")
          if (FD0RM007.FD0RMRPT[1] == "S")
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end
        end
        if (FD0RT58.TARTYPE[FD0RWIXT] == "2")
          if (FD0RM007.FD0RMRPT[2] == "S")
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end
        end

        TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FD0RT58.TARTYPE[FD0RWIXT]; /* Type*/

      else

        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FD0RT58.TARJCL[FD0RWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FD0RT58.TARTYPE[FD0RWIXT]; /* Type*/
      end

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FD0RT58.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/


  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMODID = "752"; /* Module identification*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FD0RW00.FD0RMSEL[7] = "*"; /* Indicate function completed*/
    FDWREC.XXXMSGNO = 21; /* demand report job submitted*/

    set FD0RM007 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FD0R-07502

// Process valid input request
Function FD0R-08501()
   /* ------------------------------------------------------------*/
   /* format passing parameter WFD2401*/
   /* ------------------------------------------------------------*/

  set FD0RW8A empty;

  FD0RW8A.FD0RWFDT = FD0RW00.FD0RWFCD; /* from date ccyymm*/
  FD0RW8A.FD0RWTDT = FD0RW00.FD0RWTCD; /* to date ccyymm*/
  FD0RW00.FD0RWIDX = 1; /* load product type groups*/
  while (FD0RW00.FD0RWIDX <= 6)
    if (FD0RM008.SP1ID[FD0RWIDX] != " ")
      if (FD0RM008.SP1ID[FD0RWIDX] != "*")

        FD0RW8A.SP1ID[FD0RWIDX] = FD0RM008.SP1ID[FD0RWIDX];
        FD0RW8A.SP1ABRV[FD0RWIDX] = FD0RW00.SP1ABRV[FD0RWIDX];

      end
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end

   /* ------------------------------------------------------------*/
   /* format passing parameter WFD2402*/
   /* ------------------------------------------------------------*/

  set FD0RW8B empty;

  FD0RW8B.FD0RWRUN = "R"; /* run type parm*/

   /* ------------------------------------------------------------*/
   /* format for report selection(s)*/
   /* ------------------------------------------------------------*/

  move "N" to FD0RW8B.FD0RWRPT[1] for all; /* default table values to 'n'*/
  if (FD0RM008.FD0RMRPT[1] == "S") /* type/line sum*/
    FD0RW8B.FD0RWRPT[6] = "Y";
  end
  if (FD0RM008.FD0RMRPT[2] == "S") /* type/line/cat sum*/
    FD0RW8B.FD0RWRPT[4] = "Y";
  end
  if (FD0RM008.FD0RMRPT[3] == "S") /* type/line/cat/style group sum*/
    FD0RW8B.FD0RWRPT[3] = "Y";
  end
  if (FD0RM008.FD0RMRPT[4] == "S") /* line/type sum*/
    FD0RW8B.FD0RWRPT[5] = "Y";
  end

   /* ------------------------------------------------------------*/
   /* format for product type group selection(s)*/
   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWIDX = 1; /* load product type groups*/
  while (FD0RW00.FD0RWIDX <= 4) /* load product type group*/
    if (FD0RM008.FD0RMYPG[FD0RWIDX] == "S")
      FD0RW8B.YPGCD[FD0RWIDX] = FD0RW00.FD0RWIDX;
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end

   /* ------------------------------------------------------------*/
   /* format for product line code selection*/
   /* ------------------------------------------------------------*/

  if (FD0RM008.XPLCD == "*")
    FD0RW8B.XPLCD = " "; /* all Product lines requested*/
  else
    FD0RW8B.XPLCD = FD0RM008.XPLCD; /* Product line*/
  end

   /* ------------------------------------------------------------*/
   /* format for product category code selection*/
   /* ------------------------------------------------------------*/

  if (FD0RM008.XPCCD == "*")
    FD0RW8B.XPCCD = " "; /* all Product categories requested*/
  else
    FD0RW8B.XPCCD = FD0RM008.XPCCD; /* Product category*/
  end

   /* ------------------------------------------------------------*/
   /* format for futures, prop, or fut/prop report selection*/
   /* ------------------------------------------------------------*/

  if (FD0RM008.FD0RMPFC == "P")
    FD0RW8B.YSMSUMCD[1] = "PR";
    FD0RW8B.YSMSUMCD[2] = "PR";
  end
  if (FD0RM008.FD0RMPFC == "F")
    FD0RW8B.YSMSUMCD[1] = "FT";
    FD0RW8B.YSMSUMCD[2] = "FT";
  end
  if (FD0RM008.FD0RMPFC == "C")
    FD0RW8B.YSMSUMCD[1] = "PR";
    FD0RW8B.YSMSUMCD[2] = "FT";
  end

   /* ------------------------------------------------------------*/
   /* format quality and life cycle codes based on product type*/
   /* group selection(s)*/
   /* ------------------------------------------------------------*/

  if (FD0RM008.FD0RMYPG[1] == "S" /* product type grp inline*/
   || FD0RM008.FD0RMYPG[2] == "S") /* product type grp makeup*/
    FD0RW8B.XQACD[1] = "01";
    FD0RW8B.XQACD[2] = "01";
    FD0RW8B.XLCCD[1] = "10";
    FD0RW8B.XLCCD[2] = "10";
    if (FD0RM008.FD0RMYPG[3] == "S") /* product type grp b-grade*/
      FD0RW8B.XQACD[2] = "02";
      FD0RW8B.XLCCD[2] = "20";
    end
    if (FD0RM008.FD0RMYPG[4] == "S") /* product type grp close out*/
      FD0RW8B.XLCCD[2] = "20";
    end
  else
    if (FD0RM008.FD0RMYPG[3] == "S") /* product type grp b-grade*/
      FD0RW8B.XQACD[1] = "02";
      FD0RW8B.XQACD[2] = "02";
      FD0RW8B.XLCCD[1] = "10";
      FD0RW8B.XLCCD[2] = "20";
      if (FD0RM008.FD0RMYPG[4] == "S") /* product type grp close out*/
        FD0RW8B.XQACD[1] = "01";
      end
    else
      if (FD0RM008.FD0RMYPG[4] == "S") /* product type grp b-grade*/
        FD0RW8B.XQACD[1] = "01";
        FD0RW8B.XQACD[2] = "01";
        FD0RW8B.XLCCD[1] = "20";
        FD0RW8B.XLCCD[2] = "20";
      end
    end
  end

  FD0RW8B.FD0RWUID = TA6REC.XURUSRID;

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FD0RW00.FD0RWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FD0RT08.TARTYPE[FD0RWIXT] == "A" /* Parameters statement*/
     || FD0RT08.TARTYPE[FD0RWIXT] == "B") /* Parameters statement*/

      if (FD0RT08.TARTYPE[FD0RWIXT] == "A")
        TA6REC.TARJCL[TA6INDEX] = FD0RW8A.TARJCL; /* Parameters*/
      else
        TA6REC.TARJCL[TA6INDEX] = FD0RW8B.TARJCL; /* Parameters*/
      end

    else

      if (FD0RT08.TARTYPE[FD0RWIXT] != " ")

        FD0RW01.TARJCL = FD0RT08.TARJCL[FD0RWIXT];

        if (FD0RT08.TARTYPE[FD0RWIXT] == "1") /* Report fd243d cond code*/
          if (FD0RM008.FD0RMRPT[1] == "S"
           || FD0RM008.FD0RMRPT[2] == "S"
           || FD0RM008.FD0RMRPT[3] == "S")
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
        end
        if (FD0RT08.TARTYPE[FD0RWIXT] == "2") /* Report fd243d cond code*/
          if (FD0RM008.FD0RMRPT[1] == "S"
           || FD0RM008.FD0RMRPT[2] == "S"
           || FD0RM008.FD0RMRPT[3] == "S")
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end
        end

        if (FD0RT08.TARTYPE[FD0RWIXT] == "4" /* Report fd243d cond code*/
         && FD0RM008.FD0RMRPT[1] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end
        if (FD0RT08.TARTYPE[FD0RWIXT] == "3" /* Report fd243d cond code*/
         && FD0RM008.FD0RMRPT[2] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end
        if (FD0RT08.TARTYPE[FD0RWIXT] == "5" /* Report fd243d cond code*/
         && FD0RM008.FD0RMRPT[3] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end
        if (FD0RT08.TARTYPE[FD0RWIXT] == "6" /* Report fd244d cond code*/
         && FD0RM008.FD0RMRPT[4] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE),         ";
        end
        if (FD0RT08.TARTYPE[FD0RWIXT] == "7" /* Report fd244d cond code*/
         && FD0RM008.FD0RMRPT[4] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
        TA6REC.TARTYPE[TA6INDEX] = FD0RT08.TARTYPE[FD0RWIXT]; /* Type*/

      else

        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FD0RT08.TARJCL[FD0RWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FD0RT08.TARTYPE[FD0RWIXT]; /* Type*/

      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FD0RT08.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/


  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMODID = "851"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FD0RW00.FD0RMSEL[8] = "*"; /* Indicate function completed*/
    FDWREC.XXXMSGNO = 21;

    set FD0RM008 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FD0R-08501

// Process valid input request
Function FD0R-08502()
   /* ------------------------------------------------------------*/
   /* format passing parameter WFD2401*/
   /* ------------------------------------------------------------*/

  set FD0RW59 empty;

  FD0RW59.FD0RWFDT = FD0RW00.FD0RWFCD; /* from date ccyymm*/
  FD0RW59.FD0RWTDT = FD0RW00.FD0RWTCD; /* to date ccyymm*/
  FD0RW00.FD0RWIDX = 1; /* load product type groups*/
  while (FD0RW00.FD0RWIDX <= 6)
    if (FD0RM008.SP1ID[FD0RWIDX] != " ")
      if (FD0RM008.SP1ID[FD0RWIDX] != "*")

        FD0RW59.SP1ID[FD0RWIDX] = FD0RM008.SP1ID[FD0RWIDX];
        FD0RW59.SP1ABRV[FD0RWIDX] = FD0RW00.SP1ABRV[FD0RWIDX];

      end
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end

   /* ------------------------------------------------------------*/
   /* format passing parameter WFD2402*/
   /* ------------------------------------------------------------*/

  set FD0RW97 empty;

  FD0RW97.FD0RWRUN = "R"; /* run type parm*/

   /* ------------------------------------------------------------*/
   /* format for report selection(s)*/
   /* ------------------------------------------------------------*/

  move "N" to FD0RW97.FD0RWRPT[1] for all; /* default table values to 'n'*/
  if (FD0RM008.FD0RMRPT[1] == "S") /* type/line sum*/
    FD0RW97.FD0RWRPT[6] = "Y";
  end
  if (FD0RM008.FD0RMRPT[2] == "S") /* type/line/cat sum*/
    FD0RW97.FD0RWRPT[4] = "Y";
  end
  if (FD0RM008.FD0RMRPT[3] == "S") /* type/line/cat/style group sum*/
    FD0RW97.FD0RWRPT[3] = "Y";
  end
  if (FD0RM008.FD0RMRPT[4] == "S") /* line/type sum*/
    FD0RW97.FD0RWRPT[5] = "Y";
  end

   /* ------------------------------------------------------------*/
   /* format for product type group selection(s)*/
   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWIDX = 1; /* load product type groups*/
  while (FD0RW00.FD0RWIDX <= 4) /* load product type group*/
    if (FD0RM008.FD0RMYPG[FD0RWIDX] == "S")
      FD0RW97.YPGCD[FD0RWIDX] = FD0RW00.FD0RWIDX;
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
  end

   /* ------------------------------------------------------------*/
   /* format for product line code selection*/
   /* ------------------------------------------------------------*/

  if (FD0RM008.XPLCD == "*")
    FD0RW97.XPLCD = " "; /* all Product lines requested*/
  else
    FD0RW97.XPLCD = FD0RM008.XPLCD; /* Product line*/
  end

   /* ------------------------------------------------------------*/
   /* format for product category code selection*/
   /* ------------------------------------------------------------*/

  if (FD0RM008.XPCCD == "*")
    FD0RW97.XPCCD = " "; /* all Product categories requested*/
  else
    FD0RW97.XPCCD = FD0RM008.XPCCD; /* Product category*/
  end

   /* ------------------------------------------------------------*/
   /* format for futures, prop, or fut/prop report selection*/
   /* ------------------------------------------------------------*/

  if (FD0RM008.FD0RMPFC == "P")
    FD0RW97.YSMSUMCD[1] = "PR";
    FD0RW97.YSMSUMCD[2] = "PR";
  end
  if (FD0RM008.FD0RMPFC == "F")
    FD0RW97.YSMSUMCD[1] = "FT";
    FD0RW97.YSMSUMCD[2] = "FT";
  end
  if (FD0RM008.FD0RMPFC == "C")
    FD0RW97.YSMSUMCD[1] = "PR";
    FD0RW97.YSMSUMCD[2] = "FT";
  end

   /* ------------------------------------------------------------*/
   /* format quality and life cycle codes based on product type*/
   /* group selection(s)*/
   /* ------------------------------------------------------------*/

  if (FD0RM008.FD0RMYPG[1] == "S" /* product type grp inline*/
   || FD0RM008.FD0RMYPG[2] == "S") /* product type grp makeup*/
    FD0RW97.XQACD[1] = "01";
    FD0RW97.XQACD[2] = "01";
    FD0RW97.XLCCD[1] = "10";
    FD0RW97.XLCCD[2] = "10";
    if (FD0RM008.FD0RMYPG[3] == "S") /* product type grp b-grade*/
      FD0RW97.XQACD[2] = "02";
      FD0RW97.XLCCD[2] = "20";
    end
    if (FD0RM008.FD0RMYPG[4] == "S") /* product type grp close out*/
      FD0RW97.XLCCD[2] = "20";
    end
  else
    if (FD0RM008.FD0RMYPG[3] == "S") /* product type grp b-grade*/
      FD0RW97.XQACD[1] = "02";
      FD0RW97.XQACD[2] = "02";
      FD0RW97.XLCCD[1] = "10";
      FD0RW97.XLCCD[2] = "20";
      if (FD0RM008.FD0RMYPG[4] == "S") /* product type grp close out*/
        FD0RW97.XQACD[1] = "01";
      end
    else
      if (FD0RM008.FD0RMYPG[4] == "S") /* product type grp b-grade*/
        FD0RW97.XQACD[1] = "01";
        FD0RW97.XQACD[2] = "01";
        FD0RW97.XLCCD[1] = "20";
        FD0RW97.XLCCD[2] = "20";
      end
    end
  end

  FD0RW97.FD0RWUID = TA6REC.XURUSRID;

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FD0RW00.FD0RWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FD0RT59.TARTYPE[FD0RWIXT] == "A" /* Parameters statement*/
     || FD0RT59.TARTYPE[FD0RWIXT] == "B") /* Parameters statement*/

      if (FD0RT59.TARTYPE[FD0RWIXT] == "A")
        TA6REC.TARJCL[TA6INDEX] = FD0RW59.TARJCL; /* Parameters*/
      else
        TA6REC.TARJCL[TA6INDEX] = FD0RW97.TARJCL; /* Parameters*/
      end

    else

      if (FD0RT59.TARTYPE[FD0RWIXT] != " ")

        FD0RW01.TARJCL = FD0RT59.TARJCL[FD0RWIXT];

        if (FD0RT59.TARTYPE[FD0RWIXT] == "1") /* Report fd243d cond code*/
          if (FD0RM008.FD0RMRPT[1] == "S"
           || FD0RM008.FD0RMRPT[2] == "S"
           || FD0RM008.FD0RMRPT[3] == "S")
            FD0RW01.FD0RWCCD = "(0,NE),         ";
          end
        end
        if (FD0RT59.TARTYPE[FD0RWIXT] == "2") /* Report fd243d cond code*/
          if (FD0RM008.FD0RMRPT[1] == "S"
           || FD0RM008.FD0RMRPT[2] == "S"
           || FD0RM008.FD0RMRPT[3] == "S")
            FD0RW01.FD0RWCCD = "(0,NE)          ";
          end
        end

        if (FD0RT59.TARTYPE[FD0RWIXT] == "4" /* Report fd243d cond code*/
         && FD0RM008.FD0RMRPT[1] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end
        if (FD0RT59.TARTYPE[FD0RWIXT] == "3" /* Report fd243d cond code*/
         && FD0RM008.FD0RMRPT[2] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end
        if (FD0RT59.TARTYPE[FD0RWIXT] == "5" /* Report fd243d cond code*/
         && FD0RM008.FD0RMRPT[3] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end
        if (FD0RT59.TARTYPE[FD0RWIXT] == "6" /* Report fd244d cond code*/
         && FD0RM008.FD0RMRPT[4] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE),         ";
        end
        if (FD0RT59.TARTYPE[FD0RWIXT] == "7" /* Report fd244d cond code*/
         && FD0RM008.FD0RMRPT[4] == "S")    
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
        TA6REC.TARTYPE[TA6INDEX] = FD0RT59.TARTYPE[FD0RWIXT]; /* Type*/

      else

        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FD0RT59.TARJCL[FD0RWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FD0RT59.TARTYPE[FD0RWIXT]; /* Type*/

      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FD0RT59.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/


  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMODID = "852"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FD0RW00.FD0RMSEL[8] = "*"; /* Indicate function completed*/
    FDWREC.XXXMSGNO = 21;

    set FD0RM008 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/



end // end FD0R-08502

// Process valid input request
Function FD0R-09501()
   /* ------------------------------------------------------------*/
   /* If a prop bookings by need month was requested*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  if (FD0RM009.FD0RMRPT[1] == "S" /* need month rpt requested*/
  )                              
    move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

    FD0RW00.FD0RWIXT = 1; /* Input table index*/
    TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

    while (TA6REC.TA6INDEX > 0) /* Until end of table*/

      if (FD0RT9N.TARTYPE[FD0RWIXT] == "P") /* Parameters statement*/

       /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
       /* ------------------------------------------------------------*/

        set FD0RW9N empty;

        FD0RW9N.FD0RWRUN = "R"; /* run type parm*/
        FD0RW9N.FD0RWFOD = FD0RW00.FD0RWFOD; /* from date ccyymmdd*/
        FD0RW9N.FD0RWTOD = FD0RW00.FD0RWTOD; /* to date ccyymmdd*/
        move "N" to FD0RW9N.FD0RWRPT[1] for all;
        FD0RW9N.FD0RWRPT[1] = "Y";

        FD0RW9N.FD0RWUID = TA6REC.XURUSRID;

        TA6REC.TARJCL[TA6INDEX] = FD0RW9N.TARJCL; /* Parameters*/

      else

        if (FD0RT9N.TARTYPE[FD0RWIXT] != " ")

          FD0RW01.TARJCL = FD0RT9N.TARJCL[FD0RWIXT];
          TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
          TA6REC.TARTYPE[TA6INDEX] = FD0RT9N.TARTYPE[FD0RWIXT];

        else

          TA6REC.TARJCL[TA6INDEX] = FD0RT9N.TARJCL[FD0RWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FD0RT9N.TARTYPE[FD0RWIXT]; /* Ty*/

        end

      end

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

     /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
     /* ------------------------------------------------------------*/

      if (FD0RT9N.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/
        TA6REC.TA6INDEX = 0; /* Indicate end of table*/
      else
        FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/
      end

    end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

    TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
    TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/


    XPTA0P(); /* Submit JCL for background job*/

  end

   /* ------------------------------------------------------------*/
   /* If submit was successful, then return to the previous process*/
   /* or check if top 20 or top 3 report was requested.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMODID = "951"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FD0RW00.FD0RMSEL[9] = "*"; /* Indicate function completed*/
    FDWREC.XXXMSGNO = 23; /* prop bookings job submitted*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used for a*/
   /* prop bookings report by top 20 report and/or top 3 report.*/
   /* ------------------------------------------------------------*/

    if (FD0RM009.FD0RMRPT[2] == "S" /* top 20 rpt requested*/
     || FD0RM009.FD0RMRPT[3] == "S") /* top 3 rpt requested*/

      move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

      FD0RW00.FD0RWIXT = 1; /* Input table index*/
      TA6REC.TA6INDEX = 1; /* Output array index*/

      /* --------------------------------------------------------*/
      /* Format JCL and parameters into the subroutine work area.*/
      /* --------------------------------------------------------*/

      while (TA6REC.TA6INDEX > 0) /* Until end of table*/

        if (FD0RT9T.TARTYPE[FD0RWIXT] == "P") /* Parameters statement*/

          /* ---------------------------------------------------*/
          /* Format the variable parameters entered by the user.*/
          /* ---------------------------------------------------*/

          set FD0RW9T empty;

          FD0RW9T.FD0RWRUN = "R"; /* run type parm*/
          FD0RW9T.FD0RWFOD = FD0RW00.FD0RWFOD; /* from date ccyymmdd*/
          FD0RW9T.FD0RWTOD = FD0RW00.FD0RWTOD; /* to date ccyymmdd*/
          move "N" to FD0RW9T.FD0RWRPT[1] for all;

          if (FD0RM009.FD0RMRPT[2] == "S") /* top 20 rpt requested*/
            FD0RW9T.FD0RWRPT[2] = "Y";
          end

          if (FD0RM009.FD0RMRPT[3] == "S") /* top 3 rpt requested*/
            FD0RW9T.FD0RWRPT[3] = "Y";
          end

          FD0RW9T.FD0RWUID = TA6REC.XURUSRID;

          TA6REC.TARJCL[TA6INDEX] = FD0RW9T.TARJCL; /* Parameters*/

        else

          if (FD0RT9T.TARTYPE[FD0RWIXT] != " ")

            FD0RW01.TARJCL = FD0RT9T.TARJCL[FD0RWIXT];

            if (FD0RT9T.TARTYPE[FD0RWIXT] == "4" /* Report fd246d cond*/
             && FD0RM009.FD0RMRPT[2] == "S")    
              FD0RW01.FD0RWCCD = "(0,NE),         ";
            end

            if (FD0RT9T.TARTYPE[FD0RWIXT] == "5" /* Report fd246d cond*/
             && FD0RM009.FD0RMRPT[2] == "S")    
              FD0RW01.FD0RWCCD = "(0,NE)          ";
            end

            if (FD0RT9T.TARTYPE[FD0RWIXT] == "6" /* Report fd247d cond*/
             && FD0RM009.FD0RMRPT[3] == "S")    
              FD0RW01.FD0RWCCD = "(0,NE),         ";
            end

            if (FD0RT9T.TARTYPE[FD0RWIXT] == "7" /* Report fd247d cond*/
             && FD0RM009.FD0RMRPT[3] == "S")    
              FD0RW01.FD0RWCCD = "(0,NE)          ";
            end

            TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
            TA6REC.TARTYPE[TA6INDEX] = FD0RT9T.TARTYPE[FD0RWIXT];

          else

         /* ------------------------------------------------------------*/
          /* Format the Job Control Language statement from the table.*/
         /* ------------------------------------------------------------*/

            TA6REC.TARJCL[TA6INDEX] = FD0RT9T.TARJCL[FD0RWIXT];
            TA6REC.TARTYPE[TA6INDEX] = FD0RT9T.TARTYPE[FD0RWIXT];

          end

        end

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        /* ------------------------------------------------*/
        /* If not end of table, increment the table index.*/
        /* ------------------------------------------------*/

        if (FD0RT9T.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/
          TA6REC.TA6INDEX = 0; /* Indicate end of table*/
        else
          FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/
        end

      end

      /* ---------------------------------------------------*/
      /* Submit the JCL and parameters for batch execution.*/
      /* ---------------------------------------------------*/

      TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
      TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

      XPTA0P(); /* Submit JCL for background job*/

      /* ---------------------------------------------------------*/
      /* If submit was successful, return to the previous process.*/
      /* ---------------------------------------------------------*/

      FDWREC.XXXMODID = "951"; /* Module identification*/

      if (sysVar.errorCode == "00000000" /* Call successful*/
       && TA6REC.TA6RTNCD == "0")        /* and normal return*/

        FD0RW00.FD0RMSEL[9] = "*"; /* Indicate function completed*/
        FDWREC.XXXMSGNO = 23; /* prop bookings job submitted*/

        set FD0RM009 initial; /* Clear map output area*/

        return; /* Return to previous process*/

      end

      /* -------------------------------------------------------*/
      /* Otherwise, indicate that an unexpected error occurred.*/
      /* -------------------------------------------------------*/

      if (sysVar.errorCode != "00000000" /* Call not successful*/
       || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

        converseLib.validationFailed(10); /* Unexpected error occurred*/

      end

      exit stack; /* Exit to display map*/


    else
    /* ----------------------------------------------------------*/
    /* Otherwise, if the top 20 or top 3 report was not requested*/
    /* set the map clear and return to the previous process.*/
    /* ----------------------------------------------------------*/

      set FD0RM009 initial; /* Clear map output area*/

      return; /* Return to previous process*/

    end
  else

    /* ---------------------------------------------------------*/
    /* Otherwise, indicate that an unexpected error has occurred*/
    /* from the submit of the prop bookings by need month rept.*/
    /* ---------------------------------------------------------*/

    if (sysVar.errorCode != "00000000" /* Call not successful*/
     || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

      converseLib.validationFailed(10); /* Unexpected error occurred*/

    end

    exit stack; /* Exit to display map*/

  end


end // end FD0R-09501

// Process valid input request
Function FD0R-09502()
   /* ------------------------------------------------------------*/
   /* If a prop bookings by need month was requested*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  if (FD0RM009.FD0RMRPT[1] == "S" /* need month rpt requested*/
  )                              
    move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

    FD0RW00.FD0RWIXT = 1; /* Input table index*/
    TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

    while (TA6REC.TA6INDEX > 0) /* Until end of table*/

      if (FD0RT61.TARTYPE[FD0RWIXT] == "P") /* Parameters statement*/

       /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
       /* ------------------------------------------------------------*/

        set FD0RW61 empty;

        FD0RW61.FD0RWRUN = "R"; /* run type parm*/
        FD0RW61.FD0RWFOD = FD0RW00.FD0RWFOD; /* from date ccyymmdd*/
        FD0RW61.FD0RWTOD = FD0RW00.FD0RWTOD; /* to date ccyymmdd*/
        move "N" to FD0RW61.FD0RWRPT[1] for all;
        FD0RW61.FD0RWRPT[1] = "Y";

        FD0RW61.FD0RWUID = TA6REC.XURUSRID;

        TA6REC.TARJCL[TA6INDEX] = FD0RW61.TARJCL; /* Parameters*/

      else

        if (FD0RT61.TARTYPE[FD0RWIXT] != " ")

          FD0RW01.TARJCL = FD0RT61.TARJCL[FD0RWIXT];
          TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
          TA6REC.TARTYPE[TA6INDEX] = FD0RT61.TARTYPE[FD0RWIXT];

        else

          TA6REC.TARJCL[TA6INDEX] = FD0RT61.TARJCL[FD0RWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FD0RT61.TARTYPE[FD0RWIXT]; /* Ty*/

        end

      end

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

     /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
     /* ------------------------------------------------------------*/

      if (FD0RT61.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/
        TA6REC.TA6INDEX = 0; /* Indicate end of table*/
      else
        FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/
      end

    end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

    TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
    TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/


    XPTA0P(); /* Submit JCL for background job*/

  end

   /* ------------------------------------------------------------*/
   /* If submit was successful, then return to the previous process*/
   /* or check if top 20 or top 3 report was requested.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMODID = "952"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FD0RW00.FD0RMSEL[9] = "*"; /* Indicate function completed*/
    FDWREC.XXXMSGNO = 23; /* prop bookings job submitted*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used for a*/
   /* prop bookings report by top 20 report and/or top 3 report.*/
   /* ------------------------------------------------------------*/

    if (FD0RM009.FD0RMRPT[2] == "S" /* top 20 rpt requested*/
     || FD0RM009.FD0RMRPT[3] == "S") /* top 3 rpt requested*/

      move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

      FD0RW00.FD0RWIXT = 1; /* Input table index*/
      TA6REC.TA6INDEX = 1; /* Output array index*/

      /* --------------------------------------------------------*/
      /* Format JCL and parameters into the subroutine work area.*/
      /* --------------------------------------------------------*/

      while (TA6REC.TA6INDEX > 0) /* Until end of table*/

        if (FD0RT62.TARTYPE[FD0RWIXT] == "P") /* Parameters statement*/

          /* ---------------------------------------------------*/
          /* Format the variable parameters entered by the user.*/
          /* ---------------------------------------------------*/

          set FD0RW62 empty;

          FD0RW62.FD0RWRUN = "R"; /* run type parm*/
          FD0RW62.FD0RWFOD = FD0RW00.FD0RWFOD; /* from date ccyymmdd*/
          FD0RW62.FD0RWTOD = FD0RW00.FD0RWTOD; /* to date ccyymmdd*/
          move "N" to FD0RW62.FD0RWRPT[1] for all;

          if (FD0RM009.FD0RMRPT[2] == "S") /* top 20 rpt requested*/
            FD0RW62.FD0RWRPT[2] = "Y";
          end

          if (FD0RM009.FD0RMRPT[3] == "S") /* top 3 rpt requested*/
            FD0RW62.FD0RWRPT[3] = "Y";
          end

          FD0RW62.FD0RWUID = TA6REC.XURUSRID;

          TA6REC.TARJCL[TA6INDEX] = FD0RW62.TARJCL; /* Parameters*/

        else

          if (FD0RT62.TARTYPE[FD0RWIXT] != " ")

            FD0RW01.TARJCL = FD0RT62.TARJCL[FD0RWIXT];

            if (FD0RT62.TARTYPE[FD0RWIXT] == "4" /* Report fd246d cond*/
             && FD0RM009.FD0RMRPT[2] == "S")    
              FD0RW01.FD0RWCCD = "(0,NE),         ";
            end

            if (FD0RT62.TARTYPE[FD0RWIXT] == "5" /* Report fd246d cond*/
             && FD0RM009.FD0RMRPT[2] == "S")    
              FD0RW01.FD0RWCCD = "(0,NE)          ";
            end

            if (FD0RT62.TARTYPE[FD0RWIXT] == "6" /* Report fd247d cond*/
             && FD0RM009.FD0RMRPT[3] == "S")    
              FD0RW01.FD0RWCCD = "(0,NE),         ";
            end

            if (FD0RT62.TARTYPE[FD0RWIXT] == "7" /* Report fd247d cond*/
             && FD0RM009.FD0RMRPT[3] == "S")    
              FD0RW01.FD0RWCCD = "(0,NE)          ";
            end

            TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
            TA6REC.TARTYPE[TA6INDEX] = FD0RT62.TARTYPE[FD0RWIXT];

          else

         /* ------------------------------------------------------------*/
          /* Format the Job Control Language statement from the table.*/
         /* ------------------------------------------------------------*/

            TA6REC.TARJCL[TA6INDEX] = FD0RT62.TARJCL[FD0RWIXT];
            TA6REC.TARTYPE[TA6INDEX] = FD0RT62.TARTYPE[FD0RWIXT];

          end

        end

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        /* ------------------------------------------------*/
        /* If not end of table, increment the table index.*/
        /* ------------------------------------------------*/

        if (FD0RT62.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/
          TA6REC.TA6INDEX = 0; /* Indicate end of table*/
        else
          FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/
        end

      end

      /* ---------------------------------------------------*/
      /* Submit the JCL and parameters for batch execution.*/
      /* ---------------------------------------------------*/

      TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
      TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

      XPTA0P(); /* Submit JCL for background job*/

      /* ---------------------------------------------------------*/
      /* If submit was successful, return to the previous process.*/
      /* ---------------------------------------------------------*/

      FDWREC.XXXMODID = "952"; /* Module identification*/

      if (sysVar.errorCode == "00000000" /* Call successful*/
       && TA6REC.TA6RTNCD == "0")        /* and normal return*/

        FD0RW00.FD0RMSEL[9] = "*"; /* Indicate function completed*/
        FDWREC.XXXMSGNO = 23; /* prop bookings job submitted*/

        set FD0RM009 initial; /* Clear map output area*/

        return; /* Return to previous process*/

      end

      /* -------------------------------------------------------*/
      /* Otherwise, indicate that an unexpected error occurred.*/
      /* -------------------------------------------------------*/

      if (sysVar.errorCode != "00000000" /* Call not successful*/
       || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

        converseLib.validationFailed(10); /* Unexpected error occurred*/

      end

      exit stack; /* Exit to display map*/


    else
    /* ----------------------------------------------------------*/
    /* Otherwise, if the top 20 or top 3 report was not requested*/
    /* set the map clear and return to the previous process.*/
    /* ----------------------------------------------------------*/

      set FD0RM009 initial; /* Clear map output area*/

      return; /* Return to previous process*/

    end
  else

    /* ---------------------------------------------------------*/
    /* Otherwise, indicate that an unexpected error has occurred*/
    /* from the submit of the prop bookings by need month rept.*/
    /* ---------------------------------------------------------*/

    if (sysVar.errorCode != "00000000" /* Call not successful*/
     || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

      converseLib.validationFailed(10); /* Unexpected error occurred*/

    end

    exit stack; /* Exit to display map*/

  end


end // end FD0R-09502

// Process valid input request
Function FD0R-10501()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FD0RW00.FD0RWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FD0RT1O.TARTYPE[FD0RWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FD0RW10 empty;

      if (FD0RM010.FD0RMXDV[1] != " ")
        FD0RW10.FD0RWXDV[1] = "01";
      end
      if (FD0RM010.FD0RMXDV[2] != " ")
        FD0RW10.FD0RWXDV[2] = "02";
      end
      if (FD0RM010.FD0RMXDV[3] != " ")
        FD0RW10.FD0RWXDV[3] = "03";
      end

      FD0RW10.FD0RWRUN = "R";
      if (FD0RM010.FD0RMRPT[1] == "S")
        FD0RW10.FD0RWRPT[3] = "Y";
      else
        FD0RW10.FD0RWRPT[3] = "N";
      end
      if (FD0RM010.FD0RMRPT[2] == "S")
        FD0RW10.FD0RWRPT[2] = "Y";
      else
        FD0RW10.FD0RWRPT[2] = "N";
      end
      if (FD0RM010.FD0RMRPT[3] == "S")
        FD0RW10.FD0RWRPT[1] = "Y";
      else
        FD0RW10.FD0RWRPT[1] = "N";
      end
      if (FD0RM010.FD0RMRPT[4] == "S")
        FD0RW10.FD0RWRPT[4] = "Y";
      else
        FD0RW10.FD0RWRPT[4] = "N";
      end
      if (FD0RM010.FD0RMRPT[5] == "S")
        FD0RW10.FD0RWRPT[5] = "Y";
      else
        FD0RW10.FD0RWRPT[5] = "N";
      end
      if (FD0RM010.FD0RMPFC == "P")
        FD0RW10.YSMSUMCD[1] = "PR";
        FD0RW10.YSMSUMCD[2] = "PR";
      end
      if (FD0RM010.FD0RMPFC == "F")
        FD0RW10.YSMSUMCD[1] = "FT";
        FD0RW10.YSMSUMCD[2] = "FT";
      end
      if (FD0RM010.FD0RMPFC == "C")
        FD0RW10.YSMSUMCD[1] = "PR";
        FD0RW10.YSMSUMCD[2] = "FT";
      end
      FD0RW10.FD0RWFDT = FD0RW00.FD0RWFCD; /* from date ccyymm*/
      FD0RW10.FD0RWTDT = FD0RW00.FD0RWTCD; /* to date ccyymm*/
      FD0RW00.FD0RWIDX = 1; /* load product type groups*/
      while (FD0RW00.FD0RWIDX <= 4)
        if (FD0RM010.FD0RMYPG[FD0RWIDX] == "S")
          FD0RW10.YPGCD[FD0RWIDX] = FD0RW00.FD0RWIDX;
        end
        FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
      end
      if (FD0RM010.FD0RMYPG[1] == "S" /* product type grp inline*/
       || FD0RM010.FD0RMYPG[2] == "S") /* product type grp makeup*/
        FD0RW10.XQACD[1] = "01";
        FD0RW10.XQACD[2] = "01";
        FD0RW10.XLCCD[1] = "10";
        FD0RW10.XLCCD[2] = "10";
        if (FD0RM010.FD0RMYPG[3] == "S") /* product type grp b-grade*/
          FD0RW10.XQACD[2] = "02";
          FD0RW10.XLCCD[2] = "20";
        end
        if (FD0RM010.FD0RMYPG[4] == "S") /* product type grp close out*/
          FD0RW10.XLCCD[2] = "20";
        end
      else
        if (FD0RM010.FD0RMYPG[3] == "S") /* product type grp b-grade*/
          FD0RW10.XQACD[1] = "02";
          FD0RW10.XQACD[2] = "02";
          FD0RW10.XLCCD[1] = "10";
          FD0RW10.XLCCD[2] = "20";
          if (FD0RM010.FD0RMYPG[4] == "S") /* product type grp close out*/
            FD0RW10.XQACD[1] = "01";
          end
        else
          if (FD0RM010.FD0RMYPG[4] == "S") /* product type grp close out*/
            FD0RW10.XQACD[1] = "01";
            FD0RW10.XQACD[2] = "01";
            FD0RW10.XLCCD[1] = "20";
            FD0RW10.XLCCD[2] = "20";
          end
        end
      end
      if (FD0RM010.XPLCD == "*")
        FD0RW10.XPLCD = " "; /* all Product lines requested*/
      else
        FD0RW10.XPLCD = FD0RM010.XPLCD; /* Product line*/
      end
      if (FD0RM010.XPCCD == "*")
        FD0RW10.XPCCD = " "; /* all Product categories requested*/
      else
        FD0RW10.XPCCD = FD0RM010.XPCCD; /* Product category*/
      end
      if (FD0RM010.SYBSTGNB == "*")
        FD0RW10.SYBSTGNB = " "; /* all sty grp nbr requested*/
      else
        FD0RW10.SYBSTGNB = FD0RM010.SYBSTGNB; /* sty grp nbr*/
      end
      if (FD0RM010.SY1STNBR == "*")
        FD0RW10.SY1STNBR = " "; /* all sty nbr requested*/
        FD0RW10.SY2CLRID = " "; /* all colors requested*/
        FD0RW10.XDMCD = " "; /* all dim requested*/
      else
        FD0RW10.SY1STNBR = FD0RM010.SY1STNBR; /* sty nbr*/
        FD0RW10.SY2CLRID = FD0RM010.SY2CLRID; /* color cd*/
        FD0RW10.XDMCD = FD0RM010.XDMCD; /* dim cd*/
      end

      FD0RW10.FD0RWUID = TA6REC.XURUSRID;

      TA6REC.TARJCL[TA6INDEX] = FD0RW10.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FD0RT1O.TARTYPE[FD0RWIXT]; /* Type*/

    else

      if (FD0RT1O.TARTYPE[FD0RWIXT] == "1" /* condition statement*/
       || FD0RT1O.TARTYPE[FD0RWIXT] == "2" /* condition statement*/
       || FD0RT1O.TARTYPE[FD0RWIXT] == "3" /* condition statement*/
       || FD0RT1O.TARTYPE[FD0RWIXT] == "4" /* condition statement*/
       || FD0RT1O.TARTYPE[FD0RWIXT] == "5") /* condition statement*/

        FD0RW01.TARJCL = FD0RT1O.TARJCL[FD0RWIXT];
        FD0RW01.TARTYPE = FD0RT1O.TARTYPE[FD0RWIXT];

        if (FD0RT1O.TARTYPE[FD0RWIXT] == "1"
         && FD0RM010.FD0RMRPT[3] == "S") /* rpt by catg selected*/
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT1O.TARTYPE[FD0RWIXT] == "2"
         && FD0RM010.FD0RMRPT[2] == "S") /* rpt by line selected*/
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT1O.TARTYPE[FD0RWIXT] == "3"
         && FD0RM010.FD0RMRPT[1] == "S") /* rpt by type selected*/
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT1O.TARTYPE[FD0RWIXT] == "4"
         && FD0RM010.FD0RMRPT[4] == "S") /* stygrp rpt selected*/
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT1O.TARTYPE[FD0RWIXT] == "5"
         && FD0RM010.FD0RMRPT[5] == "S") /* styclr rpt selected*/
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
        TA6REC.TARTYPE[TA6INDEX] = FD0RT1O.TARTYPE[FD0RWIXT]; /* type*/
      else

        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FD0RT1O.TARJCL[FD0RWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FD0RT1O.TARTYPE[FD0RWIXT]; /* Type*/

      end

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FD0RT1O.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMODID = "151"; /* Module identification*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FD0RW00.FD0RMSEL[10] = "*"; /* Indicate function completed*/
    FDWREC.XXXMSGNO = 42; /* summary shipment job submitted*/

    set FD0RM010 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/

end // end FD0R-10501

// Process valid input request
Function FD0R-10502()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FD0RW00.FD0RWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FD0RT63.TARTYPE[FD0RWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FD0RW63 empty;

      if (FD0RM010.FD0RMXDV[1] != " ")
        FD0RW63.FD0RWXDV[1] = "01";
      end
      if (FD0RM010.FD0RMXDV[2] != " ")
        FD0RW63.FD0RWXDV[2] = "02";
      end
      if (FD0RM010.FD0RMXDV[3] != " ")
        FD0RW63.FD0RWXDV[3] = "03";
      end

      FD0RW63.FD0RWRUN = "R";
      if (FD0RM010.FD0RMRPT[1] == "S")
        FD0RW63.FD0RWRPT[3] = "Y";
      else
        FD0RW63.FD0RWRPT[3] = "N";
      end
      if (FD0RM010.FD0RMRPT[2] == "S")
        FD0RW63.FD0RWRPT[2] = "Y";
      else
        FD0RW63.FD0RWRPT[2] = "N";
      end
      if (FD0RM010.FD0RMRPT[3] == "S")
        FD0RW63.FD0RWRPT[1] = "Y";
      else
        FD0RW63.FD0RWRPT[1] = "N";
      end
      if (FD0RM010.FD0RMRPT[4] == "S")
        FD0RW63.FD0RWRPT[4] = "Y";
      else
        FD0RW63.FD0RWRPT[4] = "N";
      end
      if (FD0RM010.FD0RMRPT[5] == "S")
        FD0RW63.FD0RWRPT[5] = "Y";
      else
        FD0RW63.FD0RWRPT[5] = "N";
      end
      if (FD0RM010.FD0RMPFC == "P")
        FD0RW63.YSMSUMCD[1] = "PR";
        FD0RW63.YSMSUMCD[2] = "PR";
      end
      if (FD0RM010.FD0RMPFC == "F")
        FD0RW63.YSMSUMCD[1] = "FT";
        FD0RW63.YSMSUMCD[2] = "FT";
      end
      if (FD0RM010.FD0RMPFC == "C")
        FD0RW63.YSMSUMCD[1] = "PR";
        FD0RW63.YSMSUMCD[2] = "FT";
      end
      FD0RW63.FD0RWFDT = FD0RW00.FD0RWFCD; /* from date ccyymm*/
      FD0RW63.FD0RWTDT = FD0RW00.FD0RWTCD; /* to date ccyymm*/
      FD0RW00.FD0RWIDX = 1; /* load product type groups*/
      while (FD0RW00.FD0RWIDX <= 4)
        if (FD0RM010.FD0RMYPG[FD0RWIDX] == "S")
          FD0RW63.YPGCD[FD0RWIDX] = FD0RW00.FD0RWIDX;
        end
        FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
      end
      if (FD0RM010.FD0RMYPG[1] == "S" /* product type grp inline*/
       || FD0RM010.FD0RMYPG[2] == "S") /* product type grp makeup*/
        FD0RW63.XQACD[1] = "01";
        FD0RW63.XQACD[2] = "01";
        FD0RW63.XLCCD[1] = "10";
        FD0RW63.XLCCD[2] = "10";
        if (FD0RM010.FD0RMYPG[3] == "S") /* product type grp b-grade*/
          FD0RW63.XQACD[2] = "02";
          FD0RW63.XLCCD[2] = "20";
        end
        if (FD0RM010.FD0RMYPG[4] == "S") /* product type grp close out*/
          FD0RW63.XLCCD[2] = "20";
        end
      else
        if (FD0RM010.FD0RMYPG[3] == "S") /* product type grp b-grade*/
          FD0RW63.XQACD[1] = "02";
          FD0RW63.XQACD[2] = "02";
          FD0RW63.XLCCD[1] = "10";
          FD0RW63.XLCCD[2] = "20";
          if (FD0RM010.FD0RMYPG[4] == "S") /* product type grp close out*/
            FD0RW63.XQACD[1] = "01";
          end
        else
          if (FD0RM010.FD0RMYPG[4] == "S") /* product type grp close out*/
            FD0RW63.XQACD[1] = "01";
            FD0RW63.XQACD[2] = "01";
            FD0RW63.XLCCD[1] = "20";
            FD0RW63.XLCCD[2] = "20";
          end
        end
      end
      if (FD0RM010.XPLCD == "*")
        FD0RW63.XPLCD = " "; /* all Product lines requested*/
      else
        FD0RW63.XPLCD = FD0RM010.XPLCD; /* Product line*/
      end
      if (FD0RM010.XPCCD == "*")
        FD0RW63.XPCCD = " "; /* all Product categories requested*/
      else
        FD0RW63.XPCCD = FD0RM010.XPCCD; /* Product category*/
      end
      if (FD0RM010.SYBSTGNB == "*")
        FD0RW63.SYBSTGNB = " "; /* all sty grp nbr requested*/
      else
        FD0RW63.SYBSTGNB = FD0RM010.SYBSTGNB; /* sty grp nbr*/
      end
      if (FD0RM010.SY1STNBR == "*")
        FD0RW63.SY1STNBR = " "; /* all sty nbr requested*/
        FD0RW63.SY2CLRID = " "; /* all colors requested*/
        FD0RW63.XDMCD = " "; /* all dim requested*/
      else
        FD0RW63.SY1STNBR = FD0RM010.SY1STNBR; /* sty nbr*/
        FD0RW63.SY2CLRID = FD0RM010.SY2CLRID; /* color cd*/
        FD0RW63.XDMCD = FD0RM010.XDMCD; /* dim cd*/
      end

      FD0RW63.FD0RWUID = TA6REC.XURUSRID;

      TA6REC.TARJCL[TA6INDEX] = FD0RW63.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FD0RT63.TARTYPE[FD0RWIXT]; /* Type*/

    else

      if (FD0RT63.TARTYPE[FD0RWIXT] == "1" /* condition statement*/
       || FD0RT63.TARTYPE[FD0RWIXT] == "2" /* condition statement*/
       || FD0RT63.TARTYPE[FD0RWIXT] == "3" /* condition statement*/
       || FD0RT63.TARTYPE[FD0RWIXT] == "4" /* condition statement*/
       || FD0RT63.TARTYPE[FD0RWIXT] == "5") /* condition statement*/

        FD0RW01.TARJCL = FD0RT63.TARJCL[FD0RWIXT];
        FD0RW01.TARTYPE = FD0RT63.TARTYPE[FD0RWIXT];

        if (FD0RT63.TARTYPE[FD0RWIXT] == "1"
         && FD0RM010.FD0RMRPT[3] == "S") /* rpt by catg selected*/
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT63.TARTYPE[FD0RWIXT] == "2"
         && FD0RM010.FD0RMRPT[2] == "S") /* rpt by line selected*/
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT63.TARTYPE[FD0RWIXT] == "3"
         && FD0RM010.FD0RMRPT[1] == "S") /* rpt by type selected*/
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT63.TARTYPE[FD0RWIXT] == "4"
         && FD0RM010.FD0RMRPT[4] == "S") /* stygrp rpt selected*/
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT63.TARTYPE[FD0RWIXT] == "5"
         && FD0RM010.FD0RMRPT[5] == "S") /* styclr rpt selected*/
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
        TA6REC.TARTYPE[TA6INDEX] = FD0RT63.TARTYPE[FD0RWIXT]; /* type*/
      else

        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FD0RT63.TARJCL[FD0RWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FD0RT63.TARTYPE[FD0RWIXT]; /* Type*/

      end

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FD0RT63.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMODID = "152"; /* Module identification*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FD0RW00.FD0RMSEL[10] = "*"; /* Indicate function completed*/
    FDWREC.XXXMSGNO = 42; /* summary shipment job submitted*/

    set FD0RM010 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/

end // end FD0R-10502

// Process valid input request
Function FD0R-11501()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FD0RW00.FD0RWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FD0RT11.TARTYPE[FD0RWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FD0RW11 empty;

      if (FD0RM011.FD0RMPFC == "P")
        FD0RW11.YSMSUMCD[1] = "PR";
        FD0RW11.YSMSUMCD[2] = "PR";
      end
      if (FD0RM011.FD0RMPFC == "F")
        FD0RW11.YSMSUMCD[1] = "FT";
        FD0RW11.YSMSUMCD[2] = "FT";
      end
      if (FD0RM011.FD0RMPFC == "C")
        FD0RW11.YSMSUMCD[1] = "PR";
        FD0RW11.YSMSUMCD[2] = "FT";
      end
      FD0RW11.FD0RWFDT = FD0RW00.FD0RWFCD; /* from date ccyymm*/
      FD0RW11.FD0RWTDT = FD0RW00.FD0RWTCD; /* to date ccyymm*/
      FD0RW00.FD0RWIDX = 1;
      while (FD0RW00.FD0RWIDX <= 4)
        if (FD0RM011.FD0RMYPG[FD0RWIDX] == "S")
          FD0RW11.YPGCD[FD0RWIDX] = FD0RW00.FD0RWIDX;
        end
        FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
      end

      FD0RW11.FD0RWUID = TA6REC.XURUSRID;

      TA6REC.TARJCL[TA6INDEX] = FD0RW11.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FD0RT11.TARTYPE[FD0RWIXT]; /* Type*/

    else

      /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FD0RT11.TARJCL[FD0RWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FD0RT11.TARTYPE[FD0RWIXT]; /* Type*/

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FD0RT11.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/


  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMODID = "151"; /* Module identification*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FD0RW00.FD0RMSEL[11] = "*"; /* Indicate function completed*/
    FDWREC.XXXMSGNO = 27;

    set FD0RM011 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/

end // end FD0R-11501

// Process valid input request
Function FD0R-11502()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FD0RW00.FD0RWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FD0RT64.TARTYPE[FD0RWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
      /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FD0RW64 empty;

      if (FD0RM011.FD0RMPFC == "P")
        FD0RW64.YSMSUMCD[1] = "PR";
        FD0RW64.YSMSUMCD[2] = "PR";
      end
      if (FD0RM011.FD0RMPFC == "F")
        FD0RW64.YSMSUMCD[1] = "FT";
        FD0RW64.YSMSUMCD[2] = "FT";
      end
      if (FD0RM011.FD0RMPFC == "C")
        FD0RW64.YSMSUMCD[1] = "PR";
        FD0RW64.YSMSUMCD[2] = "FT";
      end
      FD0RW64.FD0RWFDT = FD0RW00.FD0RWFCD; /* from date ccyymm*/
      FD0RW64.FD0RWTDT = FD0RW00.FD0RWTCD; /* to date ccyymm*/
      FD0RW00.FD0RWIDX = 1;
      while (FD0RW00.FD0RWIDX <= 4)
        if (FD0RM011.FD0RMYPG[FD0RWIDX] == "S")
          FD0RW64.YPGCD[FD0RWIDX] = FD0RW00.FD0RWIDX;
        end
        FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
      end

      FD0RW64.FD0RWUID = TA6REC.XURUSRID;

      TA6REC.TARJCL[TA6INDEX] = FD0RW64.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FD0RT64.TARTYPE[FD0RWIXT]; /* Type*/

    else

      /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FD0RT64.TARJCL[FD0RWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FD0RT64.TARTYPE[FD0RWIXT]; /* Type*/

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FD0RT64.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/


  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMODID = "152"; /* Module identification*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FD0RW00.FD0RMSEL[11] = "*"; /* Indicate function completed*/
    FDWREC.XXXMSGNO = 27;

    set FD0RM011 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/

end // end FD0R-11502

// Process valid input request
Function FD0R-12501()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FD0RW00.FD0RWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FD0RT12.TARTYPE[FD0RWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FD0RW12 empty;

      if (FD0RM012.FD0RMXDV[1] != " ")
        FD0RW12.FD0RWXDV[1] = "01";
      end
      if (FD0RM012.FD0RMXDV[2] != " ")
        FD0RW12.FD0RWXDV[2] = "02";
      end
      if (FD0RM012.FD0RMXDV[3] != " ")
        FD0RW12.FD0RWXDV[3] = "03";
      end

      FD0RW12.FD0RWRUN = "R";
      FD0RW12.FD0RWTDT = FD0RW00.FD0RWTCD; /* to date ccyymm*/
      FD0RW00.FD0RWIDX = 1; /* load product type groups*/
      while (FD0RW00.FD0RWIDX <= 4)
        if (FD0RM012.FD0RMYPG[FD0RWIDX] == "S")
          FD0RW12.YPGCD[FD0RWIDX] = FD0RW00.FD0RWIDX;
        end
        FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
      end
      if (FD0RM012.FD0RMYPG[1] == "S" /* product type grp inline*/
       || FD0RM012.FD0RMYPG[2] == "S") /* product type grp makeup*/
        FD0RW12.XQACD[1] = "01";
        FD0RW12.XQACD[2] = "01";
        if (FD0RM012.FD0RMYPG[3] == "S") /* product type grp b-grade*/
          FD0RW12.XQACD[2] = "02";
        end
      else
        if (FD0RM012.FD0RMYPG[3] == "S") /* product type grp b-grade*/
          FD0RW12.XQACD[1] = "02";
          FD0RW12.XQACD[2] = "02";
          if (FD0RM012.FD0RMYPG[4] == "S") /* product type grp close out*/
            FD0RW12.XQACD[1] = "01";
          end
        else
          if (FD0RM012.FD0RMYPG[4] == "S") /* product type grp close out*/
            FD0RW12.XQACD[1] = "01";
            FD0RW12.XQACD[2] = "01";
          end
        end
      end
      if (FD0RM012.XPLCD == "*")
        FD0RW12.XPLCD = " "; /* all Product lines requested*/
      else
        FD0RW12.XPLCD = FD0RM012.XPLCD; /* Product line*/
      end
      if (FD0RM012.XPCCD == "*")
        FD0RW12.XPCCD = " "; /* all Product categories requested*/
      else
        FD0RW12.XPCCD = FD0RM012.XPCCD; /* Product category*/
      end
      if (FD0RM012.SYBSTGNB == "*")
        FD0RW12.SYBSTGNB = " "; /* all sty grp nbr requested*/
      else
        FD0RW12.SYBSTGNB = FD0RM012.SYBSTGNB; /* sty grp nbr*/
      end
      if (FD0RM012.SY1STNBR == "*")
        FD0RW12.SY1STNBR = " "; /* all sty nbr requested*/
        FD0RW12.SY2CLRID = " "; /* all colors requested*/
        FD0RW12.XDMCD = " "; /* all dim requested*/
      else
        FD0RW12.SY1STNBR = FD0RM012.SY1STNBR; /* sty nbr*/
        FD0RW12.SY2CLRID = FD0RM012.SY2CLRID; /* color cd*/
        FD0RW12.XDMCD = FD0RM012.XDMCD; /* dim cd*/
      end

      FD0RW12.FD0RWUID = TA6REC.XURUSRID;

      TA6REC.TARJCL[TA6INDEX] = FD0RW12.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FD0RT12.TARTYPE[FD0RWIXT]; /* Type*/

    else

      if (FD0RT12.TARTYPE[FD0RWIXT] == "1" /* condition statement*/
       || FD0RT12.TARTYPE[FD0RWIXT] == "2" /* condition statement*/
       || FD0RT12.TARTYPE[FD0RWIXT] == "3" /* condition statement*/
       || FD0RT12.TARTYPE[FD0RWIXT] == "4" /* condition statement*/
       || FD0RT12.TARTYPE[FD0RWIXT] == "5") /* condition statement*/

        FD0RW01.TARJCL = FD0RT12.TARJCL[FD0RWIXT];
        FD0RW01.TARTYPE = FD0RT12.TARTYPE[FD0RWIXT];

        if (FD0RT12.TARTYPE[FD0RWIXT] == "1"
         && FD0RM012.FD0RMRPT[3] == "S") /* rpt by catg selected*/
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT12.TARTYPE[FD0RWIXT] == "2"
         && FD0RM012.FD0RMRPT[2] == "S") /* rpt by line selected*/
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT12.TARTYPE[FD0RWIXT] == "3"
         && FD0RM012.FD0RMRPT[1] == "S") /* rpt by type selected*/
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT12.TARTYPE[FD0RWIXT] == "4"
         && FD0RM012.FD0RMRPT[4] == "S") /* stygrp rpt selected*/
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT12.TARTYPE[FD0RWIXT] == "5"
         && FD0RM012.FD0RMRPT[5] == "S") /* styclr rpt selected*/
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
        TA6REC.TARTYPE[TA6INDEX] = FD0RT12.TARTYPE[FD0RWIXT]; /* type*/
      else

        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FD0RT12.TARJCL[FD0RWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FD0RT12.TARTYPE[FD0RWIXT]; /* Type*/

      end

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FD0RT12.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMODID = "125"; /* Module identification*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FD0RW00.FD0RMSEL[12] = "*"; /* Indicate function completed*/
    FDWREC.XXXMSGNO = 64; /* actl rcpt job submitted*/

    set FD0RM012 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/

end // end FD0R-12501

// Process valid input request
Function FD0R-12502()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FD0RW00.FD0RWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FD0RT65.TARTYPE[FD0RWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FD0RW65 empty;

      if (FD0RM012.FD0RMXDV[1] != " ")
        FD0RW65.FD0RWXDV[1] = "01";
      end
      if (FD0RM012.FD0RMXDV[2] != " ")
        FD0RW65.FD0RWXDV[2] = "02";
      end
      if (FD0RM012.FD0RMXDV[3] != " ")
        FD0RW65.FD0RWXDV[3] = "03";
      end

      FD0RW65.FD0RWRUN = "R";
      FD0RW65.FD0RWTDT = FD0RW00.FD0RWTCD; /* to date ccyymm*/
      FD0RW00.FD0RWIDX = 1; /* load product type groups*/
      while (FD0RW00.FD0RWIDX <= 4)
        if (FD0RM012.FD0RMYPG[FD0RWIDX] == "S")
          FD0RW65.YPGCD[FD0RWIDX] = FD0RW00.FD0RWIDX;
        end
        FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX + 1;
      end
      if (FD0RM012.FD0RMYPG[1] == "S" /* product type grp inline*/
       || FD0RM012.FD0RMYPG[2] == "S") /* product type grp makeup*/
        FD0RW65.XQACD[1] = "01";
        FD0RW65.XQACD[2] = "01";
        if (FD0RM012.FD0RMYPG[3] == "S") /* product type grp b-grade*/
          FD0RW65.XQACD[2] = "02";
        end
      else
        if (FD0RM012.FD0RMYPG[3] == "S") /* product type grp b-grade*/
          FD0RW65.XQACD[1] = "02";
          FD0RW65.XQACD[2] = "02";
          if (FD0RM012.FD0RMYPG[4] == "S") /* product type grp close out*/
            FD0RW65.XQACD[1] = "01";
          end
        else
          if (FD0RM012.FD0RMYPG[4] == "S") /* product type grp close out*/
            FD0RW65.XQACD[1] = "01";
            FD0RW65.XQACD[2] = "01";
          end
        end
      end
      if (FD0RM012.XPLCD == "*")
        FD0RW65.XPLCD = " "; /* all Product lines requested*/
      else
        FD0RW65.XPLCD = FD0RM012.XPLCD; /* Product line*/
      end
      if (FD0RM012.XPCCD == "*")
        FD0RW65.XPCCD = " "; /* all Product categories requested*/
      else
        FD0RW65.XPCCD = FD0RM012.XPCCD; /* Product category*/
      end
      if (FD0RM012.SYBSTGNB == "*")
        FD0RW65.SYBSTGNB = " "; /* all sty grp nbr requested*/
      else
        FD0RW65.SYBSTGNB = FD0RM012.SYBSTGNB; /* sty grp nbr*/
      end
      if (FD0RM012.SY1STNBR == "*")
        FD0RW65.SY1STNBR = " "; /* all sty nbr requested*/
        FD0RW65.SY2CLRID = " "; /* all colors requested*/
        FD0RW65.XDMCD = " "; /* all dim requested*/
      else
        FD0RW65.SY1STNBR = FD0RM012.SY1STNBR; /* sty nbr*/
        FD0RW65.SY2CLRID = FD0RM012.SY2CLRID; /* color cd*/
        FD0RW65.XDMCD = FD0RM012.XDMCD; /* dim cd*/
      end

      FD0RW65.FD0RWUID = TA6REC.XURUSRID;

      TA6REC.TARJCL[TA6INDEX] = FD0RW65.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FD0RT65.TARTYPE[FD0RWIXT]; /* Type*/

    else

      if (FD0RT65.TARTYPE[FD0RWIXT] == "1" /* condition statement*/
       || FD0RT65.TARTYPE[FD0RWIXT] == "2" /* condition statement*/
       || FD0RT65.TARTYPE[FD0RWIXT] == "3" /* condition statement*/
       || FD0RT65.TARTYPE[FD0RWIXT] == "4" /* condition statement*/
       || FD0RT65.TARTYPE[FD0RWIXT] == "5") /* condition statement*/

        FD0RW01.TARJCL = FD0RT65.TARJCL[FD0RWIXT];
        FD0RW01.TARTYPE = FD0RT65.TARTYPE[FD0RWIXT];

        if (FD0RT65.TARTYPE[FD0RWIXT] == "1"
         && FD0RM012.FD0RMRPT[3] == "S") /* rpt by catg selected*/
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT65.TARTYPE[FD0RWIXT] == "2"
         && FD0RM012.FD0RMRPT[2] == "S") /* rpt by line selected*/
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT65.TARTYPE[FD0RWIXT] == "3"
         && FD0RM012.FD0RMRPT[1] == "S") /* rpt by type selected*/
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT65.TARTYPE[FD0RWIXT] == "4"
         && FD0RM012.FD0RMRPT[4] == "S") /* stygrp rpt selected*/
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        if (FD0RT65.TARTYPE[FD0RWIXT] == "5"
         && FD0RM012.FD0RMRPT[5] == "S") /* styclr rpt selected*/
          FD0RW01.FD0RWCCD = "(0,NE)          ";
        end

        TA6REC.TARJCL[TA6INDEX] = FD0RW01.TARJCL;
        TA6REC.TARTYPE[TA6INDEX] = FD0RT65.TARTYPE[FD0RWIXT]; /* type*/
      else

        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FD0RT65.TARJCL[FD0RWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FD0RT65.TARTYPE[FD0RWIXT]; /* Type*/

      end

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FD0RT65.TARJCL[FD0RWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FD0RW00.FD0RWIXT = FD0RW00.FD0RWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMODID = "125"; /* Module identification*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FD0RW00.FD0RMSEL[12] = "*"; /* Indicate function completed*/
    FDWREC.XXXMSGNO = 64; /* actl rcpt job submitted*/

    set FD0RM012 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/

end // end FD0R-12502

// Main process to display a map
Function FD0R001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Invoke the process for each selection entered on menu.*/
   /* 2) After all selections are processed, display the menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (FD0RW00.FD0RWSWX != "Y") /* EXIT not requested*/

    if (FD0RW00.FD0RMSEL[1] == "S" /* Line 1 was selected*/
     || TA6REC.TA6SUBSW == "I")    /* or information requested*/

      FD0R010(); /* Specify output destination*/

    end

    if (FD0RW00.FD0RMSEL[2] == "S") /* Line 2 was selected*/
      FD0R020(); /* register detail & summary*/
    end

    if (FD0RW00.FD0RMSEL[3] == "S") /* Line 3 was selected*/
      FD0RW00.FD0RWCMC = 0; /* initialize comparison date field*/
      FD0RW00.FD0RWFCD = 0; /* initialize ytd from field*/
      FD0RW00.FD0RWTCD = 0; /* initialize ytd to field*/
      FD0R030(); /* summary comparison*/
    end

    if (FD0RW00.FD0RMSEL[4] == "S") /* Line 4 was selected*/
      FD0RW00.FD0RWCMC = 0; /* initialize comparison date field*/
      FD0RW00.FD0RWFCD = 0; /* initialize ytd from field*/
      FD0RW00.FD0RWTCD = 0; /* initialize ytd to field*/
      FD0R040(); /* top 20 comparison reports*/
    end

    if (FD0RW00.FD0RMSEL[5] == "S") /* Line 5 was selected*/
      FD0RW00.FD0RWCMC = 0; /* initialize comparison date field*/
      FD0RW00.FD0RWFCD = 0; /* initialize ytd from field*/
      FD0RW00.FD0RWTCD = 0; /* initialize ytd to field*/
      FD0R050(); /* detail comparison report*/
    end

    if (FD0RW00.FD0RMSEL[6] == "S") /* Line 6 was selected*/
      FD0R060(); /* inventory analysis report*/
    end

    if (FD0RW00.FD0RMSEL[7] == "S") /* Line 7 was selected*/
      FD0R070(); /* detail demand report*/
    end

    if (FD0RW00.FD0RMSEL[8] == "S") /* Line 8 was selected*/
      FD0R080(); /* summary demand report*/
    end

    if (FD0RW00.FD0RMSEL[9] == "S") /* Line 9 was selected*/
      FD0R090(); /* prop bookings report*/
    end

    if (FD0RW00.FD0RMSEL[10] == "S") /* Line 10 was selected*/
      FD0R100(); /* summary shipments report*/
    end

    if (FD0RW00.FD0RMSEL[11] == "S") /* Line 11 was selected*/
      FD0R110(); /* past due order report*/
    end

    if (FD0RW00.FD0RMSEL[12] == "S") /* Line 12 was selected*/
      FD0R120(); /* actual receipts report*/
    end

  end

  FD0RW00.FD0RWSWX = "N"; /* Reset exit requested switch*/

  FD0R990(); /* Report Request Menu*/


end // end FD0R001

// Specify output destination
Function FD0R010()
   /* ------------------------------------------------------------*/
   /* Obtain and/or display the output destination for the user.*/
   /* ------------------------------------------------------------*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If successful, indicate the selected function is completed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (TA6REC.TA6RTNCD == "0") /* Normal return*/

      if (TA6REC.TA6SUBSW == "I") /* Obtain information only*/

        TA6REC.TA6SUBSW = "N"; /* Indicate information obtained*/
      else
        FD0RW00.FD0RMSEL[1] = "*"; /* Indicate function completed*/

      end

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If user cancelled request, indicate function cancelled.*/
    /* ------------------------------------------------------------*/

    if (TA6REC.TA6RTNCD == "1") /* User cancelled request*/

      FD0RW00.FD0RMSEL[1] = "C"; /* Indicate function cancelled*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMODID = "010"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/


end // end FD0R010

// REGISTER DETAIL & SUMMARY
Function FD0R020()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FD0R021(); /* Format and display the map*/

  FD0R022(); /* Check attention identifier*/

  FD0R023(); /* Reset fields to normal intensity*/

  FD0R024(); /* Verify the data that was entered*/

  FD0R025(); /* Process valid input request*/


end // end FD0R020

// Format and display the map
Function FD0R021()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FDWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FD0RM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FD0RM002.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FD0RM002.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FD0RM002.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FD0RM002.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FD0RM002.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FDWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FDWREC.XXXMSGNO != 0) /* Message to display*/

      if (FDWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FDWREC.XXXMSGNO);
      end /* Message number*/
    else
      FD0RM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FD0RM002.XXXMODID = FDWREC.XXXMODID; /* Module identification*/

    set FD0RM002 alarm; /* Indicate sound alarm*/

  end

  converse FD0RM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMSGNO = 0; /* Message number*/
  FDWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end FD0R021

// Check attention identifier
Function FD0R022()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FD0RW00.FD0RMSEL[2] = "C"; /* Indicate selection cancelled*/

    set FD0RM002 initial; /* m002 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FD0RW00.FD0RWSWX = "Y"; /* Indicate exit requested*/

    FD0RW00.FD0RMSEL[2] = " "; /* Reinit selection field*/

    set FD0RM002 initial; /* m002 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FDWREC.XXXMODID = "022"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FD0R022

// Reset highlighted fields
Function FD0R023()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FD0RM002.FD0RMFDT normal; /* need from date*/
  set FD0RM002.FD0RMTDT normal; /* need to date*/

  set FD0RM002.FD0RMRPT[1] normal; /* report selection fields*/
  set FD0RM002.FD0RMRPT[2] normal;
  set FD0RM002.FD0RMRPT[3] normal;

  set FD0RM002.FD0RMYPG[1] normal; /* product group selection*/
  set FD0RM002.FD0RMYPG[2] normal;
  set FD0RM002.FD0RMYPG[3] normal;
  set FD0RM002.FD0RMYPG[4] normal;

  set FD0RM002.XPLCD normal; /* product line code*/
  set FD0RM002.XPCCD normal; /* product category code*/

  set FD0RM002.SYBSTGNB normal; /* style group nbr*/
  set FD0RM002.SY1STNBR normal; /* style nbr*/
  set FD0RM002.SY2CLRID normal; /* color id*/
  set FD0RM002.XDMCD normal; /* dimension code*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FD0RM002.XPLCD == "?" /* product line code*/
   || FD0RM002.XPCCD == "?" /* category code*/
   || FD0RM002.XDMCD == "?") /* dimension code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FDWREC.XXXMODID = "023"; /* Module identification*/
      converseLib.validationFailed(49);
                                   /* Indicate PF key not valid press enter*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM002.XPLCD == "?") /* product line cd list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT LINE CODE "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM002.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM002.XPLCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM002.XPCCD == "?") /* product category list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "CATEGORY CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM002.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM002.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of dimension codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM002.XDMCD == "?") /* product dimension list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "DIMENSION CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDM01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM002.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM002.XDMCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FDWREC.XXXMODID = "023"; /* Module identification*/
  converseLib.validationFailed(48); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FD0R023

// Verify the entered data
Function FD0R024()
   /* ------------------------------------------------------------*/
   /* validate style number - non-db2 edit*/

     /* The style number/color cd/dim cd should not be blank if a*/
     /* detail report is chosen. Specific values can be indicated*/
     /* here, or all styles requested by entering asterisks, for*/
     /* the detail report.*/
     /* If asterisks are used--use one '*' in each of the three*/
     /* fields, style, color, and dimension.*/
     /* They cannot be used for one value and not for the others.*/
     /* (ie. you cannot request all styles for a specific color*/
      /* or dimension, or all colors or dimensions for a spceific*/
      /* style.)*/

   /* ------------------------------------------------------------*/
  if (FD0RM002.FD0RMRPT[1] != " ") /* detail report requested*/

    if (FD0RM002.SY1STNBR == " "
     || FD0RM002.SY2CLRID == " "
     || FD0RM002.XDMCD == " ")
      converseLib.validationFailed(37); /* required field please enter value*/
      FDWREC.XXXMODID = "024";
      set FD0RM002.XDMCD bold;
      set FD0RM002.SY2CLRID bold;
      set FD0RM002.SY1STNBR cursor, bold;
    else
      if (FD0RM002.SY1STNBR == "*"
       || FD0RM002.SY2CLRID == "*"
       || FD0RM002.XDMCD == "*")

         /* valid entry*/

      else
        if (FD0RM002.SY1STNBR != " "
         || FD0RM002.SY2CLRID != " "
         || FD0RM002.XDMCD != " ")

          set PG2REC empty;

          PG2REC.XGPCD = COMMAREA.XGPCD;
          PG2REC.SY1STNBR = FD0RM002.SY1STNBR;
          PG2REC.SY2CLRID = FD0RM002.SY2CLRID;
          PG2REC.XDMCD = FD0RM002.XDMCD;

          FD0RS01(); /* validate style nbr*/

          if (SQLCA.VAGen_SQLCODE == 100)
            converseLib.validationFailed(35); /* invalid style/color/dim*/
            FDWREC.XXXMODID = "024";
            set FD0RM002.XDMCD bold;
            set FD0RM002.SY2CLRID bold;
            set FD0RM002.SY1STNBR cursor, bold;
          end
        end
      end
    end
  else
    if (FD0RM002.FD0RMRPT[2] != " "
     || FD0RM002.FD0RMRPT[3] != " ")
      if (FD0RM002.SY1STNBR == " "
       && FD0RM002.SY2CLRID == " "
       && FD0RM002.XDMCD == " ")

         /* valid entry*/

      else
        if (FD0RM002.SY1STNBR == "*"
         || FD0RM002.SY2CLRID == "*"
         || FD0RM002.XDMCD == "*")

           /* valid entry*/

        else
          converseLib.validationFailed(53); /* not valid w/this rept select*/
          FDWREC.XXXMODID = "024";
          set FD0RM002.XDMCD bold;
          set FD0RM002.SY2CLRID bold;
          set FD0RM002.SY1STNBR cursor, bold;
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate style group number - non-db2 edit*/

     /* The style group number should not be blank if a detail*/
     /* report is chosen.  A specific value can be indicated*/
     /* here, or all style groups requested by entering one '*'.*/

   /* ------------------------------------------------------------*/

  if (FD0RM002.FD0RMRPT[1] != " ") /* detail report requested*/

    if (FD0RM002.SYBSTGNB == " ")
      converseLib.validationFailed(37); /* required field enter valid value*/
      FDWREC.XXXMODID = "024";
      set FD0RM002.SYBSTGNB cursor, bold;
    else
      if (FD0RM002.SYBSTGNB == "*")

         /* valid entry*/

      else
        /* ------------------------------------------------------------*/
         /* validate style group number - db2 edit*/
        /* ------------------------------------------------------------*/

        if (FD0RM002.SYBSTGNB != " ")

          set SYBREC empty;

          SYBREC.SYBSTGNB = FD0RM002.SYBSTGNB;

          FD0RS02(); /* validate style grp*/

          if (SQLCA.VAGen_SQLCODE == 100)
            converseLib.validationFailed(36); /* invalid style group*/
            FDWREC.XXXMODID = "024";
            set FD0RM002.SYBSTGNB cursor, bold;
          end
        end
      end
    end
  else
    if (FD0RM002.FD0RMRPT[2] != " "
     || FD0RM002.FD0RMRPT[3] != " ")
      if (FD0RM002.SYBSTGNB == " "
       || FD0RM002.SYBSTGNB == "*")

         /* valid entry*/

      else
        converseLib.validationFailed(52); /* only valid w/detial report select*/
        FDWREC.XXXMODID = "024";
        set FD0RM002.SYBSTGNB cursor, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate style/color/dim and style group combination*/

     /* If this is a detail report, either a style group or*/
     /* style/color/dim may be specified, but not both.*/

   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* no error detected yet*/
   && FD0RM002.FD0RMRPT[1] != " ")      /* detail report selected*/

    if (FD0RM002.SYBSTGNB != "*" /* style group specified*/
     && FD0RM002.SY1STNBR != "*" /* style number specified*/
     && FD0RM002.SY2CLRID != "*" /* color specified*/
     && FD0RM002.XDMCD != "*")   /* dimension specified*/
      converseLib.validationFailed(41); /* cannot specify both*/
      FDWREC.XXXMODID = "024";
      set FD0RM002.XDMCD bold;
      set FD0RM002.SY2CLRID bold;
      set FD0RM002.SY1STNBR bold;
      set FD0RM002.SYBSTGNB cursor, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product category code - non-db2 edit*/

     /* Enter a valid value, an asterisk '*', or a space for all*/
     /* category codes.*/

   /* ------------------------------------------------------------*/

  if (FD0RM002.XPCCD == "*"
   || FD0RM002.XPCCD == " ")

     /* valid entry*/

  else
    XPCREC.XPCCD = FD0RM002.XPCCD;
    if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
      if (XPCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(32); /* status is inactive*/
        FDWREC.XXXMODID = "024";
        set FD0RM002.XPCCD cursor, bold;
      end
    else
      converseLib.validationFailed(38); /* invalid product category code*/
      FDWREC.XXXMODID = "024";
      set FD0RM002.XPCCD cursor, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product line code - non-db2 edit*/

     /* Either a valid value or asterisk, '*', must be entered*/
     /* here, regardless of which report(s) requested.*/

   /* ------------------------------------------------------------*/

  if (FD0RM002.XPLCD == " ")
    converseLib.validationFailed(37); /* required field please enter value*/
    FDWREC.XXXMODID = "024";
    set FD0RM002.XPLCD cursor, bold;
  else
    if (FD0RM002.XPLCD != "*")
      XPLREC.XPLCD = FD0RM002.XPLCD;
      if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
        if (XPLTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          converseLib.validationFailed(32); /* inactive status*/
          FDWREC.XXXMODID = "024";
          set FD0RM002.XPLCD cursor, bold;
        end
      else
        converseLib.validationFailed(39); /* invalid product line code*/
        FDWREC.XXXMODID = "024";
        set FD0RM002.XPLCD cursor, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product line code match with product category code*/
     /* -db2-edit*/

     /* They must reside in the dfcast.vffxrf01 table to be valid*/
     /* If either or both line or category code fields have*/
     /* asterisks in them, then there is no need to validate the*/
     /* cross reference between codes.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* no errors detected*/
   && FD0RM002.XPLCD != " ")           

    if (FD0RM002.XPCCD == "*"
     || FD0RM002.XPLCD == "*")

       /* valid entry*/

    else
      if (FD0RM002.XPCCD == " ")
        FD0RM002.XPCCD = "*";
      else
        set FF2REC empty; /* clear the storage row*/
        FF2REC.XPCCD = FD0RM002.XPCCD; /* category code*/
        FF2REC.XPLCD = FD0RM002.XPLCD; /* product line code*/
        FF2REC.YPGCD = "*"; /* type group code*/
        FF2REC.YSMXDV = "*"; /* division group code*/

        FD0RS10(); /* select cursor for table*/
        FD0RS11(); /* fetch row from table*/

        if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/
          converseLib.validationFailed(55);
                                   /* cat code and prod line not consistent*/
          FDWREC.XXXMODID = "024";
          set FD0RM002.XPLCD cursor, bold;
          set FD0RM002.XPCCD bold;
        end

        FD0RS12(); /* close cursor*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product type group selections - non-db2 edit*/

     /* At least one product type must be selected, regardless*/
     /* of which report(s) requested.*/

   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWERF = "N";
  FD0RW00.FD0RWSLF = "N";
  FD0RW00.FD0RWIDX = 4;
  while (FD0RW00.FD0RWIDX > 0)
    if (FD0RM002.FD0RMYPG[FD0RWIDX] != " ")
      if (FD0RM002.FD0RMYPG[FD0RWIDX] == "S")
        FD0RW00.FD0RWSLF = "Y"; /* selection made*/
      else
        FD0RW00.FD0RWERF = "Y";
        converseLib.validationFailed(13); /* only 's' may be entered to select*/
        FDWREC.XXXMODID = "024";
        set FD0RM002.FD0RMYPG[FD0RWIDX] cursor, bold;
      end
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX - 1;
  end

  if (FD0RW00.FD0RWSLF == "N" /* no product type group selection made*/
   || FD0RW00.FD0RWERF == "Y") /* an error was detected*/
    converseLib.validationFailed(31); /* product type group entry required*/
    FDWREC.XXXMODID = "024";
    set FD0RM002.FD0RMYPG[4] bold;
    set FD0RM002.FD0RMYPG[3] bold;
    set FD0RM002.FD0RMYPG[2] bold;
    set FD0RM002.FD0RMYPG[1] cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate report request selections - non-db2 edit*/

     /* At least one product type must be selected, regardless*/
     /* of which report(s) requested.*/

   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWERF = "N";
  FD0RW00.FD0RWSLF = "N";
  FD0RW00.FD0RWIDX = 3;
  while (FD0RW00.FD0RWIDX > 0)
    if (FD0RM002.FD0RMRPT[FD0RWIDX] != " ")
      if (FD0RM002.FD0RMRPT[FD0RWIDX] == "S")
        FD0RW00.FD0RWSLF = "Y"; /* selection made*/
      else
        FD0RW00.FD0RWERF = "Y";
        converseLib.validationFailed(13); /* only 's' may be entered*/
        FDWREC.XXXMODID = "024";
        set FD0RM002.FD0RMRPT[FD0RWIDX] cursor, bold;
      end
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX - 1;
  end

  if (FD0RW00.FD0RWSLF == "N" /* no report selection made*/
   || FD0RW00.FD0RWERF == "Y")
    converseLib.validationFailed(30); /* report type selection required*/
    FDWREC.XXXMODID = "024";
    set FD0RM002.FD0RMRPT[3] bold;
    set FD0RM002.FD0RMRPT[2] bold;
    set FD0RM002.FD0RMRPT[1] cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* if eighteen month date not initialized, create it.*/
   /* ------------------------------------------------------------*/

  if (FD0RW00.FD0RWEDT == 0) /* if eighteen date not initialized*/

    if (XX0XW01.XX0XWZDT == 0) /* if date has not been formatted*/
      XX0XS01(); /* get and format current date*/
    end

    FD0RW00.FD0RWEYY = XX0XW01.XX0XWZYY; /* move curr yy*/
    FD0RW00.FD0RWEMM = XX0XW01.XX0XWZMM; /* move curr mm*/
    FD0RW00.FD0RWEMM = FD0RW00.FD0RWEMM + 18; /* add 18 months*/

    while (FD0RW00.FD0RWEMM > 12) /* until valid month*/
      FD0RW00.FD0RWEMM = FD0RW00.FD0RWEMM - 12;
      if (FD0RW00.FD0RWEYY == 99) /* if turn of century*/
        FD0RW00.FD0RWEYY = 0; /* move 0 to year*/
      else
        FD0RW00.FD0RWEYY = FD0RW00.FD0RWEYY + 1; /* add 1 to year*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate to yymm date - non-db2 edit*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;

  FD0RW00.FD0RWERF = "N";
  TA2REC.TA2GRGYM = FD0RM002.FD0RMTDT;

  FD0RS03(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set FD0RM002.FD0RMTDT cursor, bold; /* Highlight*/
    FD0RW00.FD0RWERF = "Y";
    converseLib.validationFailed(34); /* Indicate missing or invalid*/
    FDWREC.XXXMODID = "024";
  else
  /* IF FD0RM002.FD0RMTDT LT '8705';*/
  /* SET FD0RM002.FD0RMTDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 33 TO EZEMNO;            /* out of range*/
  /* MOVE '024' TO FDWREC.XXXMODID;*/
  /* ;*/
  /* ELSE;                           /* verify date within 18 month range*/
  /* ;*/
  /* IF FD0RW00.FD0RWEDT LT 0107;  /* century change 18 mm limit*/
  /* IF FD0RM002.FD0RMTDT LE 9912;      /* last valid 20th cent date*/
  /* MOVE TA2REC.TA2GRCYM TO FD0RW00.FD0RWTCD;*/
  /* ELSE;*/
  /* IF FD0RM002.FD0RMTDT LE FD0RW00.FD0RWEDT;*/
  /* MOVE TA2REC.TA2GRCYM TO FD0RW00.FD0RWTCD;*/
  /* ELSE;*/
  /* SET FD0RM002.FD0RMTDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 33 TO EZEMNO;      /* out of range*/
  /* MOVE '024' TO FDWREC.XXXMODID;*/
  /* END;*/
  /* END;*/
  /* ELSE;*/
    SV-DATE = FD0RM002.FD0RMTDT;
    move SV-YY to WS-FROM-YY withV60Compat;
    move SV-MM to WS-FROM-MM withV60Compat;
    if (WS-FROM-YY < 57)
      WS-FROM-CC = 20;
    else
      WS-FROM-CC = 19;
    end

    SV-DATE = FD0RW00.FD0RWEDT;
    move SV-YY to WS-TO-YY withV60Compat;
    move SV-MM to WS-TO-MM withV60Compat;
    if (WS-TO-YY < 57)
      WS-TO-CC = 20;
    else
      WS-TO-CC = 19;
    end

    if (WS-FROM-DATE < WS-TO-DATE)
  /* IF FD0RM002.FD0RMTDT LE FD0RW00.FD0RWEDT;*/
      FD0RW00.FD0RWTCD = TA2REC.TA2GRCYM;
    else
      set FD0RM002.FD0RMTDT cursor, bold; /* Highlight*/
      converseLib.validationFailed(33); /* out of range*/
      FDWREC.XXXMODID = "024";
    end
  /* END;*/
  /* END;*/
  end

   /* ------------------------------------------------------------*/
   /* validate from yymm date - non-db2 edit*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;

  TA2REC.TA2GRGYM = FD0RM002.FD0RMFDT;

  FD0RS03(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set FD0RM002.FD0RMFDT cursor, bold; /* Highlight*/
    FD0RW00.FD0RWERF = "Y";
    converseLib.validationFailed(34); /* Indicate missing or invalid*/
    FDWREC.XXXMODID = "024";
  else
  /* IF FD0RM002.FD0RMFDT LT '8705';*/
  /* SET FD0RM002.FD0RMFDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 33 TO EZEMNO;            /* Indicate missing or invalid*/
  /* MOVE '024' TO FDWREC.XXXMODID;*/
  /* ;*/
  /* ELSE;*/
    FD0RW00.FD0RWFCD = TA2REC.TA2GRCYM;
  /* END;*/
  end

   /* ------------------------------------------------------------*/
   /* if dates are valid verify from to dates - non-db2 edit*/
   /* ------------------------------------------------------------*/
   /* dsmith -----------------------------------------------------*/
  if (FD0RW00.FD0RWERF != "Y") /* dates are valid*/
  /* IF FD0RM002.FD0RMFDT > FD0RM002.FD0RMTDT;*/
  /* SET FD0RM002.FD0RMFDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 29 TO EZEMNO;            /* from date cannot be gt the to dt*/
  /* MOVE '024' TO FDWREC.XXXMODID;*/
  /* END;*/
  /* D;*/
    SV-DATE = FD0RM002.FD0RMFDT;
    move SV-YY to WS-FROM-YY withV60Compat;
    move SV-MM to WS-FROM-MM withV60Compat;
    if (WS-FROM-YY < 57)
      WS-FROM-CC = 20;
    else
      WS-FROM-CC = 19;
    end


    SV-DATE = FD0RM002.FD0RMTDT;
    move SV-YY to WS-TO-YY withV60Compat;
    move SV-MM to WS-TO-MM withV60Compat;
    if (WS-TO-YY < 57)
      WS-TO-CC = 20;
    else
      WS-TO-CC = 19;
    end

    if (WS-FROM-DATE > WS-TO-DATE)
      set FD0RM002.FD0RMFDT cursor, bold; /* Highlight*/
      converseLib.validationFailed(29); /* from date cannot be gt the to dt*/
      FDWREC.XXXMODID = "024";
    end
  end
   /* dsmith -----------------------------------------------------*/


  if (converseVar.validationMsgNum != 0)
    exit stack;
  end


end // end FD0R024

// Process valid input request
Function FD0R025()
   /* ****************************************************************/
   /* Call sub-routine to find which environment the program is*/
   /* executing in...test or prod*/
   /* ****************************************************************/

  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FD0R-02501(); /* format prod jcl*/
    else
      FD0R-02502(); /* else format test jcl*/
    end
  else

    FDWREC.XXXMODID = "025"; /* module identification*/
    FDWREC.XXXMSGNO = 63; /* Error encountered with print request*/
    exit stack;
  end

end // end FD0R025

// SUMMARY COMPARISON REPORT
Function FD0R030()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FD0R031(); /* Format and display the map*/

  FD0R032(); /* Check attention identifier*/

  FD0R033(); /* Reset fields to normal intensity*/

  FD0R034(); /* Verify the data that was entered*/

  FD0R035(); /* Process valid input request*/


end // end FD0R030

// Format and display the map
Function FD0R031()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FDWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FD0RM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FD0RM003.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FD0RM003.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FD0RM003.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FD0RM003.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FD0RM003.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FDWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FDWREC.XXXMSGNO != 0) /* Message to display*/

      if (FDWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FDWREC.XXXMSGNO);
      end /* Message number*/
    else
      FD0RM003.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FD0RM003.XXXMODID = FDWREC.XXXMODID; /* Module identification*/

    set FD0RM003 alarm; /* Indicate sound alarm*/

  end

  converse FD0RM003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMSGNO = 0; /* Message number*/
  FDWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end FD0R031

// Check attention identifier
Function FD0R032()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FD0RW00.FD0RMSEL[3] = "C"; /* Indicate selection cancelled*/

    set FD0RM003 initial; /* m003 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FD0RW00.FD0RWSWX = "Y"; /* Indicate exit requested*/

    FD0RW00.FD0RMSEL[3] = " "; /* reinit selection field*/

    set FD0RM003 initial; /* m003 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FDWREC.XXXMODID = "032"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FD0R032

// Reset highlighted fields
Function FD0R033()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FD0RM003.FD0RMCDT normal; /* compare date*/
  set FD0RM003.FD0RMFDT normal; /* ytd from date*/
  set FD0RM003.FD0RMTDT normal; /* ytd to date*/

  set FD0RM003.FD0RMRPT[1] normal; /* report selection fields*/
  set FD0RM003.FD0RMRPT[2] normal;

  set FD0RM003.FD0RMFSF normal; /* futures/sales flag*/

  set FD0RM003.FD0RMYPG[1] normal; /* product group selection*/
  set FD0RM003.FD0RMYPG[2] normal;
  set FD0RM003.FD0RMYPG[3] normal;
  set FD0RM003.FD0RMYPG[4] normal;

  set FD0RM003.XPLCD normal; /* product line code*/
  set FD0RM003.XPCCD normal; /* product category code*/
  set FD0RM003.XDMCD normal; /* dimension code*/
  set FD0RM003.XGACD normal; /* gender/age*/
  set FD0RM003.XSUCD normal; /* silhouette code*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FD0RM003.XPLCD == "?" /* product line code*/
   || FD0RM003.XPCCD == "?" /* product category code*/
   || FD0RM003.XDMCD == "?" /* dimension code*/
   || FD0RM003.XGACD == "?" /* gender/age code*/
   || FD0RM003.XSUCD == "?") /* silhouette code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FDWREC.XXXMODID = "033"; /* Module identification*/
      converseLib.validationFailed(49); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM003.XPLCD == "?") /* product line cd list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT LINE CODE "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM003.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM003.XPLCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM003.XPCCD == "?") /* product category list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "CATEGORY CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM003.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM003.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of dimension codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM003.XDMCD == "?") /* dimension code*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "DIMENSION CODES"; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDM01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM003.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM003.XDMCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of gender/age codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM003.XGACD == "?") /* gender/age code*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "GENDER/AGE CODES"; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXGA01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM003.XGACD = XGATBL.XGACD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM003.XGACD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of silhouette codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM003.XSUCD == "?") /* product silhouette*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "SILHOUETTE CODES"; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXSU01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM003.XSUCD = XSUTBL.XSUCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM003.XSUCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FDWREC.XXXMODID = "033"; /* Module identification*/
  converseLib.validationFailed(48); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FD0R033

// Verify the entered data
Function FD0R034()
   /* ------------------------------------------------------------*/
   /* validate silhouette code*/
   /* ------------------------------------------------------------*/

  if (FD0RM003.XSUCD == " ")
    converseLib.validationFailed(37); /* required entry*/
    FDWREC.XXXMODID = "034";
    set FD0RM003.XSUCD cursor, bold;
  else
    if (FD0RM003.XSUCD != "*")
      XSUREC.XSUCD = FD0RM003.XSUCD;
      if (XSUREC.XSUKEY in XSUTBL.XSUKEY)
        if (XSUTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          converseLib.validationFailed(32); /* status is inactive*/
          FDWREC.XXXMODID = "034";
          set FD0RM003.XSUCD cursor, bold;
        end
      else
        converseLib.validationFailed(43); /* invalid silhouette code*/
        FDWREC.XXXMODID = "034";
        set FD0RM003.XSUCD cursor, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate gender/age code*/
   /* ------------------------------------------------------------*/

  if (FD0RM003.XGACD == " ")
    converseLib.validationFailed(37); /* required entry*/
    FDWREC.XXXMODID = "034";
    set FD0RM003.XGACD cursor, bold;
  else
    if (FD0RM003.XGACD != "*")
      XGAREC.XGACD = FD0RM003.XGACD;
      if (XGAREC.XGAKEY in XGATBL.XGAKEY)
        if (XGATBL.XXXSTAT[sysVar.arrayIndex] != "A")
          converseLib.validationFailed(32); /* status is inactive*/
          FDWREC.XXXMODID = "034";
          set FD0RM003.XGACD cursor, bold;
        end
      else
        converseLib.validationFailed(44); /* invalid gender/age code*/
        FDWREC.XXXMODID = "034";
        set FD0RM003.XGACD cursor, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate dimension code*/
   /* ------------------------------------------------------------*/

  if (FD0RM003.XDMCD == " ")
    converseLib.validationFailed(37); /* required entry*/
    FDWREC.XXXMODID = "034";
    set FD0RM003.XDMCD cursor, bold;
  else
    if (FD0RM003.XDMCD != "*")
      if (FD0RM003.XDMCD in XDMTBL.XDMCD)
        if (XDMTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          converseLib.validationFailed(32); /* status is inactive*/
          FDWREC.XXXMODID = "034";
          set FD0RM003.XDMCD cursor, bold;
        end
      else
        converseLib.validationFailed(50); /* invalid dimension code*/
        FDWREC.XXXMODID = "034";
        set FD0RM003.XDMCD cursor, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/

  if (FD0RM003.XPCCD == " "
   || FD0RM003.XPCCD == "*")

     /* valid entry*/

  else
    XPCREC.XPCCD = FD0RM003.XPCCD;
    if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
      if (XPCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(32); /* status is inactive*/
        FDWREC.XXXMODID = "034";
        set FD0RM003.XPCCD cursor, bold;
      end
    else
      converseLib.validationFailed(38); /* invalid product category code*/
      FDWREC.XXXMODID = "034";
      set FD0RM003.XPCCD cursor, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product line code*/
   /* ------------------------------------------------------------*/

  if (FD0RM003.XPLCD == " ")
    converseLib.validationFailed(37); /* required entry*/
    FDWREC.XXXMODID = "034";
    set FD0RM003.XPLCD cursor, bold;
  else
    if (FD0RM003.XPLCD != "*")
      XPLREC.XPLCD = FD0RM003.XPLCD;
      if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
        if (XPLTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          converseLib.validationFailed(32); /* inactive status*/
          FDWREC.XXXMODID = "034";
          set FD0RM003.XPLCD cursor, bold;
        end
      else
        converseLib.validationFailed(39); /* invalid product line code*/
        FDWREC.XXXMODID = "034";
        set FD0RM003.XPLCD cursor, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product line code and product category code*/
   /* combination.*/
   /* They must reside in the dfcast.vffxrf01 table to be valid.*/
   /* If either or both line or category code fields have*/
   /* asterisks in them, then there is no need to validate the*/
   /* cross reference between codes.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* no errors detected*/
   && FD0RM003.XPLCD != "  ")          

    if (FD0RM003.XPCCD == "*"
     || FD0RM003.XPLCD == "*")

       /* valid entry*/

    else
      if (FD0RM003.XPCCD == " ")
        FD0RM003.XPCCD = "*";
      else
        set FF2REC empty; /* clear the storage row*/
        FF2REC.XPCCD = FD0RM003.XPCCD; /* category code*/
        FF2REC.XPLCD = FD0RM003.XPLCD; /* product line code*/
        FF2REC.YPGCD = "*"; /* type group code*/
        FF2REC.YSMXDV = "*"; /* division group code*/

        FD0RS10(); /* select cursor for table*/
        FD0RS11(); /* fetch row from table*/

        if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/
          converseLib.validationFailed(55);
                                   /* cat code and prod line not consistent*/
          FDWREC.XXXMODID = "034";
          set FD0RM003.XPLCD cursor, bold;
          set FD0RM003.XPCCD bold;
        end

        FD0RS12(); /* close cursor*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product type group selections*/
   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWERF = "N";
  FD0RW00.FD0RWSLF = "N";
  FD0RW00.FD0RWIDX = 4;
  while (FD0RW00.FD0RWIDX > 0)
    if (FD0RM003.FD0RMYPG[FD0RWIDX] != " ")
      if (FD0RM003.FD0RMYPG[FD0RWIDX] == "S")
        FD0RW00.FD0RWSLF = "Y"; /* selection made*/
      else
        FD0RW00.FD0RWERF = "Y";
        converseLib.validationFailed(13); /* 's' only valid entry*/
        FDWREC.XXXMODID = "034";
        set FD0RM003.FD0RMYPG[FD0RWIDX] cursor, bold;
      end
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX - 1;
  end

  if (FD0RW00.FD0RWSLF == "N" /* no product type group selection made*/
   || FD0RW00.FD0RWERF == "Y") /* an error was detected*/
    converseLib.validationFailed(31); /* product type group entry required*/
    FDWREC.XXXMODID = "034";
    set FD0RM003.FD0RMYPG[4] bold;
    set FD0RM003.FD0RMYPG[3] bold;
    set FD0RM003.FD0RMYPG[2] bold;
    set FD0RM003.FD0RMYPG[1] cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate futures/sales flag*/
   /* ------------------------------------------------------------*/

  if (FD0RM003.FD0RMFSF != "F"
   && FD0RM003.FD0RMFSF != "S")
    converseLib.validationFailed(28); /* required data missing/invalid*/
    FDWREC.XXXMODID = "034";
    set FD0RM003.FD0RMFSF cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate report request selections*/
   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWERF = "N";
  FD0RW00.FD0RWSLF = "N";
  FD0RW00.FD0RWIDX = 2;
  while (FD0RW00.FD0RWIDX > 0)
    if (FD0RM003.FD0RMRPT[FD0RWIDX] != " ")
      if (FD0RM003.FD0RMRPT[FD0RWIDX] == "S")
        FD0RW00.FD0RWSLF = "Y"; /* selection made*/
      else
        FD0RW00.FD0RWERF = "Y";
        converseLib.validationFailed(13); /* only 's' may be entered*/
        FDWREC.XXXMODID = "034";
        set FD0RM003.FD0RMRPT[FD0RWIDX] cursor, bold;
      end
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX - 1;
  end

  if (FD0RW00.FD0RWSLF == "N" /* no report selection made*/
   || FD0RW00.FD0RWERF == "Y") /* an error was detected*/
    converseLib.validationFailed(30); /* report selection required*/
    FDWREC.XXXMODID = "034";
    set FD0RM003.FD0RMRPT[2] bold;
    set FD0RM003.FD0RMRPT[1] cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* if eighteen month date not initialized, create it.*/
   /* ------------------------------------------------------------*/

  if (FD0RW00.FD0RWEDT == 0) /* if date not initialized*/

    if (XX0XW01.XX0XWZDT == 0) /* if date not formatted*/
      XX0XS01(); /* get and format current date and time*/
    end

    FD0RW00.FD0RWEYY = XX0XW01.XX0XWZYY; /* move current yy*/
    FD0RW00.FD0RWEMM = XX0XW01.XX0XWZMM; /* move current mm*/
    FD0RW00.FD0RWEMM = FD0RW00.FD0RWEMM + 18; /* add 18 months*/

    while (FD0RW00.FD0RWEMM > 12) /* until valid month*/
      FD0RW00.FD0RWEMM = FD0RW00.FD0RWEMM - 12;
      if (FD0RW00.FD0RWEYY == 99) /* if turn of century*/
        FD0RW00.FD0RWEYY = 0; /* move 0 to year*/
      else
        FD0RW00.FD0RWEYY = FD0RW00.FD0RWEYY + 1; /* add 1 to year*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate to yymm date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;

  FD0RW00.FD0RWERF = "N";

   /* ------------------------------------------------------------*/
   /* comparison date or ytd from date can be entered, not both.*/
   /* ------------------------------------------------------------*/

  if (FD0RM003.FD0RMCDT != 0
   && FD0RM003.FD0RMFDT != 0)
    set FD0RM003.FD0RMCDT cursor, bold; /* Highlight*/
    set FD0RM003.FD0RMFDT bold; /* Highlight*/
    converseLib.validationFailed(57); /* can't entered both dates*/
    FDWREC.XXXMODID = "034";
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* no dates entered*/
   /* ------------------------------------------------------------*/

  if (FD0RM003.FD0RMCDT == 0
   && FD0RM003.FD0RMFDT == 0
   && FD0RM003.FD0RMTDT == 0)
    set FD0RM003.FD0RMCDT cursor, bold; /* Highlight*/
    set FD0RM003.FD0RMFDT bold; /* Highlight*/
    converseLib.validationFailed(34); /* invalid date entered*/
    FDWREC.XXXMODID = "034";
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* from date entered, to date not entered*/
   /* ------------------------------------------------------------*/

  if (FD0RM003.FD0RMFDT != 0 /* ytd from date entered*/
   && FD0RM003.FD0RMTDT == 0) /* ytd to date not entered*/
    set FD0RM003.FD0RMFDT cursor, bold; /* Highlight*/
    set FD0RM003.FD0RMTDT bold; /* Highlight*/
    converseLib.validationFailed(34); /* Indicate invalid date*/
    FDWREC.XXXMODID = "034";
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* to date entered, from date not entered*/
   /* ------------------------------------------------------------*/

  if (FD0RM003.FD0RMFDT == 0 /* ytd from date not entered*/
   && FD0RM003.FD0RMTDT != 0) /* ytd to date entered*/
    set FD0RM003.FD0RMFDT cursor, bold; /* Highlight*/
    set FD0RM003.FD0RMTDT bold; /* Highlight*/
    converseLib.validationFailed(34); /* Indicate invalid date*/
    FDWREC.XXXMODID = "034";
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* validate comparison date entered*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;

  if (FD0RM003.FD0RMCDT != 0)
    TA2REC.TA2GRGYM = FD0RM003.FD0RMCDT;
    FD0RS03(); /* edit date range*/
    if (TA2REC.TA2RTNCD != 0)
      set FD0RM003.FD0RMCDT cursor, bold; /* Highlight*/
      converseLib.validationFailed(34); /* Indicate missing or invalid*/
      FDWREC.XXXMODID = "034";
    else
  /* IF FD0RM003.FD0RMCDT LT '8705';*/
  /* SET FD0RM003.FD0RMCDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 33 TO EZEMNO;          /* out of range*/
  /* MOVE '034' TO FDWREC.XXXMODID;*/
  /* ELSE;*/
  /* IF FD0RW00.FD0RWEDT LT 0107;       /* century change 18 mm limit*/
  /* IF FD0RM003.FD0RMCDT LE 9912;    /* last valid 20th cc date*/
  /* MOVE TA2REC.TA2GRCYM TO FD0RW00.FD0RWCMC;*/
  /* ELSE;*/
  /* IF FD0RM003.FD0RMCDT LE FD0RW00.FD0RWEDT;*/
  /* MOVE TA2REC.TA2GRCYM TO FD0RW00.FD0RWCMC;*/
  /* ELSE;*/
  /* SET FD0RM003.FD0RMCDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 33 TO EZEMNO;    /* out of range*/
  /* MOVE '034' TO FDWREC.XXXMODID;*/
  /* END;*/
  /* END;*/
  /* ELSE;*/
      SV-DATE = FD0RM003.FD0RMCDT;
      move SV-YY to WS-FROM-YY withV60Compat;
      move SV-MM to WS-FROM-MM withV60Compat;
      if (WS-FROM-YY < 57)
        WS-FROM-CC = 20;
      else
        WS-FROM-CC = 19;
      end

      SV-DATE = FD0RW00.FD0RWEDT;
      move SV-YY to WS-TO-YY withV60Compat;
      move SV-MM to WS-TO-MM withV60Compat;
      if (WS-TO-YY < 57)
        WS-TO-CC = 20;
      else
        WS-TO-CC = 19;
      end

      if (WS-FROM-DATE < WS-TO-DATE)
  /* IF FD0RM003.FD0RMCDT LE FD0RW00.FD0RWEDT;*/
        FD0RW00.FD0RWCMC = TA2REC.TA2GRCYM;
      else
        set FD0RM003.FD0RMCDT cursor, bold; /* Highlight*/
        converseLib.validationFailed(33); /* out of range*/
        FDWREC.XXXMODID = "034";
      end
    end
  /* END;*/
  /* END;*/

    if (converseVar.validationMsgNum == 0)
      return;
    else
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate ytd from date*/
   /* ------------------------------------------------------------*/
  set TA2REC empty;

  TA2REC.TA2GRGYM = FD0RM003.FD0RMFDT;
  FD0RS03(); /* edit date range*/
  if (TA2REC.TA2RTNCD != 0)
    set FD0RM003.FD0RMFDT cursor, bold; /* Highlight*/
    converseLib.validationFailed(34); /* Indicate missing or invalid*/
    FDWREC.XXXMODID = "034";
  else
  /* IF FD0RM003.FD0RMFDT LT '8705';*/
  /* SET FD0RM003.FD0RMFDT CURSOR,BRIGHT;/* Highlight*/
  /* MOVE 33 TO EZEMNO;           /* out of range*/
  /* MOVE '034' TO FDWREC.XXXMODID;*/
  /* ELSE;*/
  /* IF FD0RW00.FD0RWEDT LT 0107; /* century change 18 mm limit*/
  /* IF FD0RM003.FD0RMFDT LE 9912;/* last valid 20th cc date*/
  /* MOVE TA2REC.TA2GRCYM TO FD0RW00.FD0RWFCD;*/
  /* ELSE;*/
  /* IF FD0RM003.FD0RMFDT LE FD0RW00.FD0RWEDT;*/
  /* MOVE TA2REC.TA2GRCYM TO FD0RW00.FD0RWFCD;*/
  /* ELSE;*/
  /* SET FD0RM003.FD0RMFDT CURSOR,BRIGHT;/* Highlight*/
  /* MOVE 33 TO EZEMNO;     /* out of range*/
  /* MOVE '034' TO FDWREC.XXXMODID;*/
  /* END;*/
  /* END;*/
  /* ELSE;*/
    SV-DATE = FD0RM003.FD0RMFDT;
    move SV-YY to WS-FROM-YY withV60Compat;
    move SV-MM to WS-FROM-MM withV60Compat;
    if (WS-FROM-YY < 57)
      WS-FROM-CC = 20;
    else
      WS-FROM-CC = 19;
    end

    SV-DATE = FD0RW00.FD0RWEDT;
    move SV-YY to WS-TO-YY withV60Compat;
    move SV-MM to WS-TO-MM withV60Compat;
    if (WS-TO-YY < 57)
      WS-TO-CC = 20;
    else
      WS-TO-CC = 19;
    end

    if (WS-FROM-DATE < WS-TO-DATE)
  /* IF FD0RM003.FD0RMFDT LE FD0RW00.FD0RWEDT;*/
      FD0RW00.FD0RWFCD = TA2REC.TA2GRCYM;
    else
      set FD0RM003.FD0RMFDT cursor, bold; /* Highlight*/
      converseLib.validationFailed(33); /* out of range*/
      FDWREC.XXXMODID = "034";
    end
  /* END;*/
  /* END;*/
  end

   /* ------------------------------------------------------------*/
   /* validate ytd to date*/
   /* ------------------------------------------------------------*/
  set TA2REC empty;

  TA2REC.TA2GRGYM = FD0RM003.FD0RMTDT;
  FD0RS03(); /* edit date range*/
  if (TA2REC.TA2RTNCD != 0)
    set FD0RM003.FD0RMTDT cursor, bold; /* Highlight*/
    converseLib.validationFailed(34); /* Indicate missing or invalid*/
    FDWREC.XXXMODID = "034";
  else
  /* IF FD0RM003.FD0RMTDT LT '8705';*/
  /* SET FD0RM003.FD0RMTDT CURSOR,BRIGHT;/* Highlight*/
  /* MOVE 33 TO EZEMNO;           /* out of range*/
  /* MOVE '034' TO FDWREC.XXXMODID;*/
  /* ELSE;*/
  /* IF FD0RW00.FD0RWEDT LT 0107; /* century change 18 mm limit*/
  /* IF FD0RM003.FD0RMTDT LE 9912;/* last valid 20th cc date*/
  /* MOVE TA2REC.TA2GRCYM TO FD0RW00.FD0RWTCD;*/
  /* ELSE;*/
  /* IF FD0RM003.FD0RMTDT LE FD0RW00.FD0RWEDT;*/
  /* MOVE TA2REC.TA2GRCYM TO FD0RW00.FD0RWTCD;*/
  /* ELSE;*/
  /* SET FD0RM003.FD0RMTDT CURSOR,BRIGHT;/* Highlight*/
  /* MOVE 33 TO EZEMNO;     /* out of range*/
  /* MOVE '034' TO FDWREC.XXXMODID;*/
  /* END;*/
  /* END;*/
  /* ELSE;*/
    SV-DATE = FD0RM003.FD0RMTDT;
    move SV-YY to WS-FROM-YY withV60Compat;
    move SV-MM to WS-FROM-MM withV60Compat;
    if (WS-FROM-YY < 57)
      WS-FROM-CC = 20;
    else
      WS-FROM-CC = 19;
    end

    SV-DATE = FD0RW00.FD0RWEDT;
    move SV-YY to WS-TO-YY withV60Compat;
    move SV-MM to WS-TO-MM withV60Compat;
    if (WS-TO-YY < 57)
      WS-TO-CC = 20;
    else
      WS-TO-CC = 19;
    end

    if (WS-FROM-DATE < WS-TO-DATE)
  /* IF FD0RM003.FD0RMTDT LE FD0RW00.FD0RWEDT;*/
      FD0RW00.FD0RWTCD = TA2REC.TA2GRCYM;
    else
      set FD0RM003.FD0RMTDT cursor, bold; /* Highlight*/
      converseLib.validationFailed(33); /* out of range*/
      FDWREC.XXXMODID = "034";
    end
  /* END;*/
  /* END;*/
  end

   /* ------------------------------------------------------------*/
   /* from date should be less than the to date*/
   /* ------------------------------------------------------------*/
   /* dsmith -----------------------------------------------------*/
  /* IF FD0RM003.FD0RMFDT GT FD0RM003.FD0RMTDT;*/
  /* SET FD0RM003.FD0RMFDT CURSOR,BRIGHT;/* Highlight*/
  /* SET FD0RM003.FD0RMTDT CURSOR,BRIGHT;/* Highlight*/
  /* MOVE 29 TO EZEMNO;             /* from dt can't be gt to dt*/
  /* MOVE '034' TO FDWREC.XXXMODID;*/
  /* END;*/

  SV-DATE = FD0RM003.FD0RMFDT;
  move SV-YY to WS-FROM-YY withV60Compat;
  move SV-MM to WS-FROM-MM withV60Compat;
  if (WS-FROM-YY < 57)
    WS-FROM-CC = 20;
  else
    WS-FROM-CC = 19;
  end

  SV-DATE = FD0RM003.FD0RMTDT;
  move SV-YY to WS-TO-YY withV60Compat;
  move SV-MM to WS-TO-MM withV60Compat;
  if (WS-TO-YY < 57)
    WS-TO-CC = 20;
  else
    WS-TO-CC = 19;
  end

  if (WS-FROM-DATE > WS-TO-DATE)
    set FD0RM003.FD0RMFDT cursor, bold; /* Highlight*/
    set FD0RM003.FD0RMTDT cursor, bold; /* Highlight*/
    converseLib.validationFailed(29); /* from dt can't be gt to dt*/
    FDWREC.XXXMODID = "034";
  end
   /* dsmith -----------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* validate from and to dates are within a 12 month range*/
   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWFYM = FD0RM003.FD0RMFDT;
  FD0RW00.FD0RWDMM = 11 + FD0RW00.FD0RWFMM;
  if (FD0RW00.FD0RWDMM > 12)
    FD0RW00.FD0RWDYY = 1 + FD0RW00.FD0RWFYY;
    FD0RW00.FD0RWDMM = FD0RW00.FD0RWDMM - 12;
  else
    FD0RW00.FD0RWDYY = FD0RW00.FD0RWFYY;
  end

  if (FD0RM003.FD0RMTDT > FD0RW00.FD0RWDYM)
    set FD0RM003.FD0RMFDT cursor, bold; /* Highlight*/
    set FD0RM003.FD0RMTDT cursor, bold; /* Highlight*/
    converseLib.validationFailed(56); /* dt must be w/i a 12 month range*/
    FDWREC.XXXMODID = "034";
    FD0RW00.FD0RWDYM = 0;
  end


  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
end // end FD0R034

// Process valid input request
Function FD0R035()
   /* ****************************************************************/
   /* Call sub-routine to find which environment the program is*/
   /* executing in...test or prod*/
   /* ****************************************************************/

  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FD0R-03501(); /* format prod jcl*/
    else
      FD0R-03502(); /* else format test jcl*/
    end
  else

    FDWREC.XXXMODID = "035"; /* module identification*/
    FDWREC.XXXMSGNO = 63; /* Error encountered with print request*/
    exit stack;
  end

end // end FD0R035

// TOP 20 COMPARISON REPORT
Function FD0R040()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FD0R041(); /* Format and display the map*/

  FD0R042(); /* Check attention identifier*/

  FD0R043(); /* Reset fields to normal intensity*/

  FD0R044(); /* Verify the data that was entered*/

  FD0R045(); /* Process valid input request*/


end // end FD0R040

// Format and display the map
Function FD0R041()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FDWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FD0RM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FD0RM004.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FD0RM004.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FD0RM004.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FD0RM004.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FD0RM004.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FDWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FDWREC.XXXMSGNO != 0) /* Message to display*/

      if (FDWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FDWREC.XXXMSGNO);
      end /* Message number*/
    else
      FD0RM004.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FD0RM004.XXXMODID = FDWREC.XXXMODID; /* Module identification*/

    set FD0RM004 alarm; /* Indicate sound alarm*/

  end

  converse FD0RM004 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMSGNO = 0; /* Message number*/
  FDWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end FD0R041

// Check attention identifier
Function FD0R042()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FD0RW00.FD0RMSEL[4] = "C"; /* Indicate selection cancelled*/

    set FD0RM004 initial; /* m004 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FD0RW00.FD0RWSWX = "Y"; /* Indicate exit requested*/

    FD0RW00.FD0RMSEL[4] = " "; /* Reinit selection field*/

    set FD0RM004 initial; /* m004 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FDWREC.XXXMODID = "042"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FD0R042

// Reset highlighted fields
Function FD0R043()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FD0RM004.FD0RMCDT normal; /* compare date*/
  set FD0RM004.FD0RMFDT normal; /* ytd from date*/
  set FD0RM004.FD0RMTDT normal; /* ytd to date*/

  set FD0RM004.FD0RMRPT[1] normal; /* report selection fields*/
  set FD0RM004.FD0RMRPT[2] normal;

  set FD0RM004.FD0RMFSF normal; /* futures/sales flag*/

  set FD0RM004.FD0RMYPG[1] normal; /* product group selection*/
  set FD0RM004.FD0RMYPG[2] normal;

  set FD0RM004.XPLCD normal; /* product line code*/
  set FD0RM004.XPCCD normal; /* product category code*/
  set FD0RM004.XSUCD normal; /* silhouette code*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FD0RM004.XPLCD == "?" /* product line code*/
   || FD0RM004.XPCCD == "?" /* product category code*/
   || FD0RM004.XSUCD == "?") /* silhouette code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FDWREC.XXXMODID = "043"; /* Module identification*/
      converseLib.validationFailed(49); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM004.XPLCD == "?") /* product line cd list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT LINE CODE "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM004.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM004.XPLCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM004.XPCCD == "?") /* product category list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "CATEGORY CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM004.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM004.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of silhouette codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM004.XSUCD == "?") /* product silhouette*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "SILHOUETTE CODES"; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXSU01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM004.XSUCD = XSUTBL.XSUCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM004.XSUCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FDWREC.XXXMODID = "043"; /* Module identification*/
  converseLib.validationFailed(48); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FD0R043

// Verify the entered data
Function FD0R044()
   /* ------------------------------------------------------------*/
   /* validate silhouette code*/
   /* ------------------------------------------------------------*/

  if (FD0RM004.XSUCD == " ")
    converseLib.validationFailed(37); /* required entry*/
    FDWREC.XXXMODID = "044";
    set FD0RM004.XSUCD cursor, bold;
  else
    if (FD0RM004.XSUCD != "*")
      XSUREC.XSUCD = FD0RM004.XSUCD;
      if (XSUREC.XSUKEY in XSUTBL.XSUKEY)
        if (XSUTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          converseLib.validationFailed(32); /* status is inactive*/
          FDWREC.XXXMODID = "044";
          set FD0RM004.XSUCD cursor, bold;
        end
      else
        converseLib.validationFailed(43); /* invalid silhouette code*/
        FDWREC.XXXMODID = "044";
        set FD0RM004.XSUCD cursor, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/

  if (FD0RM004.XPCCD == "*"
   || FD0RM004.XPCCD == " ")

      /* valid entry*/

  else
    XPCREC.XPCCD = FD0RM004.XPCCD;
    if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
      if (XPCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(32); /* status is inactive*/
        FDWREC.XXXMODID = "044";
        set FD0RM004.XPCCD cursor, bold;
      end
    else
      converseLib.validationFailed(38); /* invalid product category code*/
      FDWREC.XXXMODID = "044";
      set FD0RM004.XPCCD cursor, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product line code*/
   /* ------------------------------------------------------------*/

  if (FD0RM004.XPLCD == " ")
    converseLib.validationFailed(37); /* required entry*/
    FDWREC.XXXMODID = "044";
    set FD0RM004.XPLCD cursor, bold;
  else
    if (FD0RM004.XPLCD != "*")
      XPLREC.XPLCD = FD0RM004.XPLCD;
      if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
        if (XPLTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          converseLib.validationFailed(32); /* inactive status*/
          FDWREC.XXXMODID = "044";
          set FD0RM004.XPLCD cursor, bold;
        end
      else
        converseLib.validationFailed(39); /* invalid product line code*/
        FDWREC.XXXMODID = "044";
        set FD0RM004.XPLCD cursor, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product line code and category code combination*/
    /* -db2-edit*/

   /* They must reside in the dfcast.vffxrf01 table to be valid.*/
   /* If either or both line or category code fields have*/
   /* asterisks in them, then there is no need to validate the*/
   /* cross reference between codes.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0
   && FD0RM004.XPLCD != " ")

    if (FD0RM004.XPCCD == "*"
     || FD0RM004.XPLCD == "*")

         /* valid entry*/

    else
      if (FD0RM004.XPCCD == " ")
        FD0RM004.XPCCD = "*";
      else
        set FF2REC empty; /* clear the storage row*/
        FF2REC.XPCCD = FD0RM004.XPCCD; /* category code*/
        FF2REC.XPLCD = FD0RM004.XPLCD; /* product line code*/
        FF2REC.YPGCD = "*"; /* type group code*/
        FF2REC.YSMXDV = "*"; /* division group code*/

        FD0RS10(); /* select cursor for table*/
        FD0RS11(); /* fetch row from table*/

        if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/
          converseLib.validationFailed(55);
          FDWREC.XXXMODID = "044";
          set FD0RM004.XPLCD cursor, bold;
          set FD0RM004.XPCCD bold;
        end

        FD0RS12(); /* close cursor*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product type group selections*/
   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWERF = "N";
  FD0RW00.FD0RWSLF = "N";
  FD0RW00.FD0RWIDX = 4;
  while (FD0RW00.FD0RWIDX > 0)
    if (FD0RM004.FD0RMYPG[FD0RWIDX] != " ")
      if (FD0RM004.FD0RMYPG[FD0RWIDX] == "S")
        FD0RW00.FD0RWSLF = "Y"; /* selection made*/
      else
        FD0RW00.FD0RWERF = "Y";
        converseLib.validationFailed(13); /* 's' is the only valid entry*/
        FDWREC.XXXMODID = "044";
        set FD0RM004.FD0RMYPG[FD0RWIDX] cursor, bold;
      end
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX - 1;
  end

  if (FD0RW00.FD0RWSLF == "N" /* no product type group selection made*/
   || FD0RW00.FD0RWERF == "Y") /* an error was detected*/
    converseLib.validationFailed(31);
                                   /* product type group selection required*/
    FDWREC.XXXMODID = "044";
    set FD0RM004.FD0RMYPG[4] bold;
    set FD0RM004.FD0RMYPG[3] bold;
    set FD0RM004.FD0RMYPG[2] bold;
    set FD0RM004.FD0RMYPG[1] cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate futures/sales flag*/
   /* ------------------------------------------------------------*/

  if (FD0RM004.FD0RMFSF != "F"
   && FD0RM004.FD0RMFSF != "S")
    converseLib.validationFailed(28); /* required data missing/invalid*/
    FDWREC.XXXMODID = "044";
    set FD0RM004.FD0RMFSF cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate report request selections*/
   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWERF = "N";
  FD0RW00.FD0RWSLF = "N";
  FD0RW00.FD0RWIDX = 2;
  while (FD0RW00.FD0RWIDX > 0)
    if (FD0RM004.FD0RMRPT[FD0RWIDX] != " ")
      if (FD0RM004.FD0RMRPT[FD0RWIDX] == "S")
        FD0RW00.FD0RWSLF = "Y"; /* selection made*/
      else
        FD0RW00.FD0RWERF = "Y";
        converseLib.validationFailed(13); /* 's' is only valid entry*/
        FDWREC.XXXMODID = "044";
        set FD0RM004.FD0RMRPT[FD0RWIDX] cursor, bold;
      end
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX - 1;
  end

  if (FD0RW00.FD0RWSLF == "N" /* no report selection made*/
   || FD0RW00.FD0RWERF == "Y") /* an error was detected*/
    converseLib.validationFailed(30); /* report type selection required*/
    FDWREC.XXXMODID = "044";
    set FD0RM004.FD0RMRPT[2] bold;
    set FD0RM004.FD0RMRPT[1] cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* if eighteen month date not initialized, create it.*/
   /* ------------------------------------------------------------*/

  if (FD0RW00.FD0RWEDT == 0) /* if eighteen date not initialized*/

    if (XX0XW01.XX0XWZDT == 0) /* if date not formatted*/
      XX0XS01(); /* get and format date and time*/
    end

    FD0RW00.FD0RWEYY = XX0XW01.XX0XWZYY; /* move curr yy*/
    FD0RW00.FD0RWEMM = XX0XW01.XX0XWZMM; /* move curr mm*/
    FD0RW00.FD0RWEMM = FD0RW00.FD0RWEMM + 18; /* add 18 months*/

    while (FD0RW00.FD0RWEMM > 12) /* until valid month*/
      FD0RW00.FD0RWEMM = FD0RW00.FD0RWEMM - 12;
      if (FD0RW00.FD0RWEYY == 99) /* if turn of century*/
        FD0RW00.FD0RWEYY = 0; /* move 0 to year*/
      else
        FD0RW00.FD0RWEYY = FD0RW00.FD0RWEYY + 1; /* add 1 to year*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate to yymm date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;

  FD0RW00.FD0RWERF = "N";

   /* ------------------------------------------------------------*/
   /* comparison month or ytd month can be entered, not both*/
   /* ------------------------------------------------------------*/

  if (FD0RM004.FD0RMCDT != 0
   && FD0RM004.FD0RMFDT != 0)
    set FD0RM004.FD0RMCDT cursor, bold; /* highlight*/
    set FD0RM004.FD0RMFDT bold; /* highlight*/
    converseLib.validationFailed(57); /* can't entered both dates*/
    FDWREC.XXXMODID = "044";
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* no dates entered*/
   /* ------------------------------------------------------------*/

  if (FD0RM004.FD0RMCDT == 0
   && FD0RM004.FD0RMFDT == 0
   && FD0RM004.FD0RMTDT == 0)
    set FD0RM004.FD0RMCDT cursor, bold; /* highlight*/
    set FD0RM004.FD0RMFDT bold; /* highlight*/
    converseLib.validationFailed(34); /* indicate invalid date entered*/
    FDWREC.XXXMODID = "044";
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* from date entered, to date not entered*/
   /* ------------------------------------------------------------*/

  if (FD0RM004.FD0RMFDT != 0 /* ytd from date entered*/
   && FD0RM004.FD0RMTDT == 0) /* ytd to date not entered*/
    set FD0RM004.FD0RMFDT cursor, bold; /* highlight*/
    set FD0RM004.FD0RMTDT bold; /* highlight*/
    converseLib.validationFailed(34); /* invalid date entered*/
    FDWREC.XXXMODID = "044";
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* from date not entered, to date entered*/
   /* ------------------------------------------------------------*/

  if (FD0RM004.FD0RMFDT == 0 /* ytd from date not entered*/
   && FD0RM004.FD0RMTDT != 0) /* ytd to date entered*/
    set FD0RM004.FD0RMFDT cursor, bold; /* highlight*/
    set FD0RM004.FD0RMTDT bold; /* highlight*/
    converseLib.validationFailed(34); /* indicated invalid date entered*/
    FDWREC.XXXMODID = "044";
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* validate comparison date entered*/
   /* ------------------------------------------------------------*/
  set TA2REC empty;

  if (FD0RM004.FD0RMCDT != 0)
    TA2REC.TA2GRGYM = FD0RM004.FD0RMCDT;
    FD0RS03(); /* edit date range*/
    if (TA2REC.TA2RTNCD != 0)
      set FD0RM004.FD0RMCDT cursor, bold; /* Highlight*/
      converseLib.validationFailed(34); /* Indicate missing or invalid*/
      FDWREC.XXXMODID = "044";
    else
  /* IF FD0RM004.FD0RMCDT LT '8705';*/
  /* SET FD0RM004.FD0RMCDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 33 TO EZEMNO;          /* out of range*/
  /* MOVE '044' TO FDWREC.XXXMODID;*/
  /* ELSE;                         /* verify date is within 18 months*/
  /* IF FD0RW00.FD0RWEDT LT 0107;       /* century change 18 mm limit*/
  /* IF FD0RM004.FD0RMCDT LE 9912;    /* last valid 20th cc date*/
  /* MOVE TA2REC.TA2GRCYM TO FD0RW00.FD0RWCMC;*/
  /* ELSE;*/
  /* IF FD0RM004.FD0RMCDT LE FD0RW00.FD0RWEDT;*/
  /* MOVE TA2REC.TA2GRCYM TO FD0RW00.FD0RWCMC;*/
  /* ELSE;*/
  /* SET FD0RM004.FD0RMCDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 33 TO EZEMNO;    /* out of range*/
  /* MOVE '044' TO FDWREC.XXXMODID;*/
  /* END;*/
  /* END;*/
  /* ELSE;*/
      SV-DATE = FD0RM004.FD0RMCDT;
      move SV-YY to WS-FROM-YY withV60Compat;
      move SV-MM to WS-FROM-MM withV60Compat;
      if (WS-FROM-YY < 57)
        WS-FROM-CC = 20;
      else
        WS-FROM-CC = 19;
      end

      SV-DATE = FD0RW00.FD0RWEDT;
      move SV-YY to WS-TO-YY withV60Compat;
      move SV-MM to WS-TO-MM withV60Compat;
      if (WS-TO-YY < 57)
        WS-TO-CC = 20;
      else
        WS-TO-CC = 19;
      end

      if (WS-FROM-DATE < WS-TO-DATE)
  /* IF FD0RM004.FD0RMCDT LE FD0RW00.FD0RWEDT;*/
        FD0RW00.FD0RWCMC = TA2REC.TA2GRCYM;
      else
        set FD0RM004.FD0RMCDT cursor, bold; /* Highlight*/
        converseLib.validationFailed(33); /* out of range*/
        FDWREC.XXXMODID = "044";
      end
    end
  /* END;*/
  /* END;*/

    if (converseVar.validationMsgNum == 0)
      return;
    else
      exit stack;
    end

  end

   /* ------------------------------------------------------------*/
   /* validate ytd from date*/
   /* ------------------------------------------------------------*/
  set TA2REC empty;

  TA2REC.TA2GRGYM = FD0RM004.FD0RMFDT;
  FD0RS03(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set FD0RM004.FD0RMFDT cursor, bold; /* Highlight*/
    converseLib.validationFailed(34); /* Indicate missing or invalid*/
    FDWREC.XXXMODID = "044";
  else
  /* IF FD0RM004.FD0RMFDT LT '8705';*/
  /* SET FD0RM004.FD0RMFDT CURSOR,BRIGHT;/* Highlight*/
  /* MOVE 33 TO EZEMNO;           /* out of range*/
  /* MOVE '044' TO FDWREC.XXXMODID;*/
  /* ELSE;                          /* verify date is within 18 months*/
  /* IF FD0RW00.FD0RWEDT LT 0107; /* century change 18 mm limit*/
  /* IF FD0RM004.FD0RMFDT LE 9912;/* last valid 20th cc date*/
  /* MOVE TA2REC.TA2GRCYM TO FD0RW00.FD0RWFCD;*/
  /* ELSE;*/
  /* IF FD0RM004.FD0RMFDT LE FD0RW00.FD0RWEDT;*/
  /* MOVE TA2REC.TA2GRCYM TO FD0RW00.FD0RWFCD;*/
  /* ELSE;*/
  /* SET FD0RM004.FD0RMFDT CURSOR,BRIGHT;/* Highlight*/
  /* MOVE 33 TO EZEMNO;     /* out of range*/
  /* MOVE '044' TO FDWREC.XXXMODID;*/
  /* END;*/
  /* END;*/
  /* ELSE;*/
    SV-DATE = FD0RM004.FD0RMFDT;
    move SV-YY to WS-FROM-YY withV60Compat;
    move SV-MM to WS-FROM-MM withV60Compat;
    if (WS-FROM-YY < 57)
      WS-FROM-CC = 20;
    else
      WS-FROM-CC = 19;
    end

    SV-DATE = FD0RW00.FD0RWEDT;
    move SV-YY to WS-TO-YY withV60Compat;
    move SV-MM to WS-TO-MM withV60Compat;
    if (WS-TO-YY < 57)
      WS-TO-CC = 20;
    else
      WS-TO-CC = 19;
    end

    if (WS-FROM-DATE < WS-TO-DATE)
  /* IF FD0RM004.FD0RMFDT LE FD0RW00.FD0RWEDT;*/
      FD0RW00.FD0RWFCD = TA2REC.TA2GRCYM;
    else
      set FD0RM004.FD0RMFDT cursor, bold; /* Highlight*/
      converseLib.validationFailed(33); /* out of range*/
      FDWREC.XXXMODID = "044";
    end
  /* END;*/
  /* END;*/
  end

   /* ------------------------------------------------------------*/
   /* validate ytd to date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;

  TA2REC.TA2GRGYM = FD0RM004.FD0RMTDT;
  FD0RS03(); /* edit date range*/
  if (TA2REC.TA2RTNCD != 0)
    set FD0RM004.FD0RMTDT cursor, bold; /* Highlight*/
    converseLib.validationFailed(34); /* Indicate missing or invalid*/
    FDWREC.XXXMODID = "044";
  else
  /* IF FD0RM004.FD0RMTDT LT '8705';*/
  /* SET FD0RM004.FD0RMTDT CURSOR,BRIGHT;/* Highlight*/
  /* MOVE 33 TO EZEMNO;           /* out of range*/
  /* MOVE '044' TO FDWREC.XXXMODID;*/
  /* ELSE;                          /* verify date is within 18 months*/
  /* IF FD0RW00.FD0RWEDT LT 0107; /* century change 18 mm limit*/
  /* IF FD0RM004.FD0RMTDT LE 9912;/* last valid 20th cc date*/
  /* MOVE TA2REC.TA2GRCYM TO FD0RW00.FD0RWTCD;*/
  /* ELSE;*/
  /* IF FD0RM004.FD0RMTDT LE FD0RW00.FD0RWEDT;*/
  /* MOVE TA2REC.TA2GRCYM TO FD0RW00.FD0RWTCD;*/
  /* ELSE;*/
  /* SET FD0RM004.FD0RMTDT CURSOR,BRIGHT;/* Highlight*/
  /* MOVE 33 TO EZEMNO;     /* out of range*/
  /* MOVE '044' TO FDWREC.XXXMODID;*/
  /* END;*/
  /* END;*/
  /* ELSE;*/
    SV-DATE = FD0RM004.FD0RMTDT;
    move SV-YY to WS-FROM-YY withV60Compat;
    move SV-MM to WS-FROM-MM withV60Compat;
    if (WS-FROM-YY < 57)
      WS-FROM-CC = 20;
    else
      WS-FROM-CC = 19;
    end

    SV-DATE = FD0RW00.FD0RWEDT;
    move SV-YY to WS-TO-YY withV60Compat;
    move SV-MM to WS-TO-MM withV60Compat;
    if (WS-TO-YY < 57)
      WS-TO-CC = 20;
    else
      WS-TO-CC = 19;
    end

    if (WS-FROM-DATE < WS-TO-DATE)
  /* IF FD0RM004.FD0RMTDT LE FD0RW00.FD0RWEDT;*/
      FD0RW00.FD0RWTCD = TA2REC.TA2GRCYM;
    else
      set FD0RM004.FD0RMTDT cursor, bold; /* Highlight*/
      converseLib.validationFailed(33); /* out of range*/
      FDWREC.XXXMODID = "044";
    end
  /* END;*/
  /* END;*/
  end

   /* ------------------------------------------------------------*/
   /* from date should be less than or equal to the to date*/
   /* ------------------------------------------------------------*/
   /* dsmith -----------------------------------------------------*/
  /* IF FD0RM004.FD0RMFDT GT FD0RM004.FD0RMTDT;*/
  /* SET FD0RM004.FD0RMFDT CURSOR,BRIGHT;/* Highlight*/
  /* SET FD0RM004.FD0RMTDT CURSOR,BRIGHT;/* Highlight*/
  /* MOVE 29 TO EZEMNO;             /* from dt can't be gt to dt*/
  /* MOVE '034' TO FDWREC.XXXMODID;*/
  /* END;*/

  SV-DATE = FD0RM004.FD0RMFDT;
  move SV-YY to WS-FROM-YY withV60Compat;
  move SV-MM to WS-FROM-MM withV60Compat;
  if (WS-FROM-YY < 57)
    WS-FROM-CC = 20;
  else
    WS-FROM-CC = 19;
  end

  SV-DATE = FD0RM004.FD0RMTDT;
  move SV-YY to WS-TO-YY withV60Compat;
  move SV-MM to WS-TO-MM withV60Compat;
  if (WS-TO-YY < 57)
    WS-TO-CC = 20;
  else
    WS-TO-CC = 19;
  end

  if (WS-FROM-DATE > WS-TO-DATE)
    set FD0RM004.FD0RMFDT cursor, bold; /* Highlight*/
    set FD0RM004.FD0RMTDT cursor, bold; /* Highlight*/
    converseLib.validationFailed(29); /* from dt can't be gt to dt*/
    FDWREC.XXXMODID = "034";
  end
  /* dsmith ------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* validate from and to dates are within a 12 month range*/
   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWFYM = FD0RM004.FD0RMFDT;
  FD0RW00.FD0RWDMM = 11 + FD0RW00.FD0RWFMM;
  if (FD0RW00.FD0RWDMM > 12)
    FD0RW00.FD0RWDYY = 1 + FD0RW00.FD0RWFYY;
    FD0RW00.FD0RWDMM = FD0RW00.FD0RWDMM - 12;
  else
    FD0RW00.FD0RWDYY = FD0RW00.FD0RWFYY;
  end

  if (FD0RM004.FD0RMTDT > FD0RW00.FD0RWDYM)
    set FD0RM004.FD0RMFDT cursor, bold; /* Highlight*/
    set FD0RM004.FD0RMTDT cursor, bold; /* Highlight*/
    converseLib.validationFailed(56); /* dt must be w/i a 12 month range*/
    FDWREC.XXXMODID = "034";
    FD0RW00.FD0RWDYM = 0;
  end


  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
end // end FD0R044

// Process valid input request
Function FD0R045()
   /* ****************************************************************/
   /* Call sub-routine to find which environment the program is*/
   /* executing in...test or prod*/
   /* ****************************************************************/

  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FD0R-04501(); /* format prod jcl*/
    else
      FD0R-04502(); /* else format test jcl*/
    end
  else

    FDWREC.XXXMODID = "045"; /* module identification*/
    FDWREC.XXXMSGNO = 63; /* Error encountered with print request*/
    exit stack;
  end

end // end FD0R045

// DETAIL COMPARISON REPORT
Function FD0R050()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FD0R051(); /* Format and display the map*/

  FD0R052(); /* Check attention identifier*/

  FD0R053(); /* Reset fields to normal intensity*/

  FD0R054(); /* Verify the data that was entered*/

  FD0R055(); /* Process valid input request*/


end // end FD0R050

// Format and display the map
Function FD0R051()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FDWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FD0RM005.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FD0RM005.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FD0RM005.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FD0RM005.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FD0RM005.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FD0RM005.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FDWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FDWREC.XXXMSGNO != 0) /* Message to display*/

      if (FDWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FDWREC.XXXMSGNO);
      end /* Message number*/
    else
      FD0RM005.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FD0RM005.XXXMODID = FDWREC.XXXMODID; /* Module identification*/

    set FD0RM005 alarm; /* Indicate sound alarm*/

  end

  converse FD0RM005 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMSGNO = 0; /* Message number*/
  FDWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end FD0R051

// Check attention identifier
Function FD0R052()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FD0RW00.FD0RMSEL[5] = "C"; /* Indicate selection cancelled*/

    set FD0RM005 initial; /* m005 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FD0RW00.FD0RWSWX = "Y"; /* Indicate exit requested*/

    FD0RW00.FD0RMSEL[5] = " "; /* Reinit selection field*/

    set FD0RM005 initial; /* m005 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FDWREC.XXXMODID = "052"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FD0R052

// Reset highlighted fields
Function FD0R053()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FD0RM005.FD0RMCDT normal; /* compare date*/
  set FD0RM005.FD0RMFDT normal; /* ytd from date*/
  set FD0RM005.FD0RMTDT normal; /* ytd to date*/

  set FD0RM005.FD0RMRPT[1] normal; /* report selection fields*/
  set FD0RM005.FD0RMRPT[2] normal;
  set FD0RM005.FD0RMRPT[3] normal;
  set FD0RM005.FD0RMRPT[4] normal;

  set FD0RM005.FD0RMFSF normal; /* futures/sales flag*/

  set FD0RM005.FD0RMYPG[1] normal; /* product group selection*/
  set FD0RM005.FD0RMYPG[2] normal;
  set FD0RM005.FD0RMYPG[3] normal;
  set FD0RM005.FD0RMYPG[4] normal;

  set FD0RM005.XPLCD normal; /* product line code*/
  set FD0RM005.XPCCD normal; /* product category code*/
  set FD0RM005.SYBSTGNB normal; /* style group nbr*/
  set FD0RM005.XDMCD normal; /* dimension code*/
  set FD0RM005.XGACD normal; /* gender/age*/
  set FD0RM005.XSUCD normal; /* silhouette code*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FD0RM005.XPLCD == "?" /* product line code*/
   || FD0RM005.XPCCD == "?" /* product category code*/
   || FD0RM005.XDMCD == "?" /* dimension code*/
   || FD0RM005.XGACD == "?" /* gender/age code*/
   || FD0RM005.XSUCD == "?") /* silhouette code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FDWREC.XXXMODID = "053"; /* Module identification*/
      converseLib.validationFailed(49); /* Indicate PF key invalid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM005.XPLCD == "?") /* product line cd list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT LINE CODE "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM005.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM005.XPLCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM005.XPCCD == "?") /* product category list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "CATEGORY CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM005.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM005.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of dimension codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM005.XDMCD == "?") /* dimension code*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "DIMENSION CODES"; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDM01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM005.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM005.XDMCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of gender/age codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM005.XGACD == "?") /* gender/age code*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "GENDER/AGE CODES"; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXGA01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM005.XGACD = XGATBL.XGACD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM005.XGACD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of silhouette codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM005.XSUCD == "?") /* product silhouette*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "SILHOUETTE CODES"; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXSU01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM005.XSUCD = XSUTBL.XSUCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM005.XSUCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FDWREC.XXXMODID = "053"; /* Module identification*/
  converseLib.validationFailed(48); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FD0R053

// Verify the entered data
Function FD0R054()
   /* ------------------------------------------------------------*/
   /* validate silhouette code*/
   /* ------------------------------------------------------------*/

  if (FD0RM005.XSUCD == " ")
    converseLib.validationFailed(37); /* required entry*/
    FDWREC.XXXMODID = "054";
    set FD0RM005.XSUCD cursor, bold;
  else
    if (FD0RM005.XSUCD != "*")
      XSUREC.XSUCD = FD0RM005.XSUCD;
      if (XSUREC.XSUKEY in XSUTBL.XSUKEY)
        if (XSUTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          converseLib.validationFailed(32); /* status is inactive*/
          FDWREC.XXXMODID = "054";
          set FD0RM005.XSUCD cursor, bold;
        end
      else
        converseLib.validationFailed(43); /* invalid silhouette code*/
        FDWREC.XXXMODID = "054";
        set FD0RM005.XSUCD cursor, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate gender/age code*/
   /* ------------------------------------------------------------*/

  if (FD0RM005.XGACD == " ")
    converseLib.validationFailed(37); /* required entry*/
    FDWREC.XXXMODID = "054";
    set FD0RM005.XGACD cursor, bold;
  else
    if (FD0RM005.XGACD != "*")
      XGAREC.XGACD = FD0RM005.XGACD;
      if (XGAREC.XGAKEY in XGATBL.XGAKEY)
        if (XGATBL.XXXSTAT[sysVar.arrayIndex] != "A")
          converseLib.validationFailed(32); /* status is inactive*/
          FDWREC.XXXMODID = "054";
          set FD0RM005.XGACD cursor, bold;
        end
      else
        converseLib.validationFailed(44); /* invalid gender/age code*/
        FDWREC.XXXMODID = "054";
        set FD0RM005.XGACD cursor, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate dimension code*/
   /* ------------------------------------------------------------*/

  if (FD0RM005.XDMCD == " ")
    converseLib.validationFailed(37); /* required entry*/
    FDWREC.XXXMODID = "054";
    set FD0RM005.XDMCD cursor, bold;
  else
    if (FD0RM005.XDMCD != "*")
      if (FD0RM005.XDMCD in XDMTBL.XDMCD)
        if (XDMTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          converseLib.validationFailed(32); /* status is inactive*/
          FDWREC.XXXMODID = "054";
          set FD0RM005.XDMCD cursor, bold;
        end
      else
        converseLib.validationFailed(50); /* invalid dimension code*/
        FDWREC.XXXMODID = "054";
        set FD0RM005.XDMCD cursor, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate style group number - non-db2 edit*/
   /* ------------------------------------------------------------*/

  if (FD0RM005.SYBSTGNB == " ")
    converseLib.validationFailed(37); /* required entry*/
    FDWREC.XXXMODID = "054";
    set FD0RM005.SYBSTGNB cursor, bold;
  else
    if (FD0RM005.SYBSTGNB == "*")

       /* valid entry*/

    else
      set SYBREC empty;
      SYBREC.SYBSTGNB = FD0RM005.SYBSTGNB;

      FD0RS02(); /* validate style grp*/

      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(36); /* invalid style grp nbr*/
        FDWREC.XXXMODID = "054";
        set FD0RM005.SYBSTGNB cursor, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/

  if (FD0RM005.XPCCD == "*"
   || FD0RM005.XPCCD == " ")

     /* valid entry*/

  else
    XPCREC.XPCCD = FD0RM005.XPCCD;
    if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
      if (XPCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(32); /* status is inactive*/
        FDWREC.XXXMODID = "054";
        set FD0RM005.XPCCD cursor, bold;
      end
    else
      converseLib.validationFailed(38); /* invalid product category code*/
      FDWREC.XXXMODID = "054";
      set FD0RM005.XPCCD cursor, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product line code*/
   /* ------------------------------------------------------------*/

  if (FD0RM005.XPLCD == " ")
    converseLib.validationFailed(37); /* required entry*/
    FDWREC.XXXMODID = "054";
    set FD0RM005.XPLCD cursor, bold;
  else
    if (FD0RM005.XPLCD != "*")
      XPLREC.XPLCD = FD0RM005.XPLCD;
      if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
        if (XPLTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          converseLib.validationFailed(32); /* inactive status*/
          FDWREC.XXXMODID = "054";
          set FD0RM005.XPLCD cursor, bold;
        end
      else
        converseLib.validationFailed(39); /* invalid product line code*/
        FDWREC.XXXMODID = "054";
        set FD0RM005.XPLCD cursor, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product line code and product category code*/
    /* -db2-edit*/

   /* They must reside in the dfcast.vffxrf01 table to be valid.*/
   /* If either or both line or category code fields have*/
   /* asterisks in them, then there is no need to validate the*/
   /* cross reference between codes.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0
   && FD0RM005.XPLCD != " ")

    if (FD0RM005.XPCCD == "*"
     || FD0RM005.XPLCD == "*")

       /* valid entry*/

    else
      if (FD0RM005.XPCCD == " ")
        FD0RM002.XPCCD = "*";
      else
        set FF2REC empty; /* clear the storage row*/
        FF2REC.XPCCD = FD0RM005.XPCCD; /* category code*/
        FF2REC.XPLCD = FD0RM005.XPLCD; /* product line code*/
        FF2REC.YPGCD = "*"; /* type group code*/
        FF2REC.YSMXDV = "*"; /* division group code*/

        FD0RS10(); /* select cursor for table*/
        FD0RS11(); /* fetch row in table*/

        if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/
          converseLib.validationFailed(55);
                                   /* cat code and prod line not consistent*/
          FDWREC.XXXMODID = "054";
          set FD0RM005.XPLCD cursor, bold;
          set FD0RM005.XPCCD bold;
        end

        FD0RS12(); /* close cursor*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate style group number/prod category/prod line combo*/
   /* ------------------------------------------------------------*/
  if (FD0RM005.SYBSTGNB != " "
   && FD0RM005.SYBSTGNB != "*")
    if (FD0RM005.XPCCD != " "
     && FD0RM005.XPCCD != "*")
      converseLib.validationFailed(51); /* invalid combination*/
      FDWREC.XXXMODID = "054";
      set FD0RM005.XPCCD cursor, bold;
      set FD0RM005.SYBSTGNB bold;
    end
    if (FD0RM005.XPLCD != " "
     && FD0RM005.XPLCD != "*")
      converseLib.validationFailed(51); /* invalid combination*/
      FDWREC.XXXMODID = "054";
      set FD0RM005.XPLCD cursor, bold;
      set FD0RM005.SYBSTGNB bold;
    end
  end
   /* ------------------------------------------------------------*/
   /* validate product type group selections*/
   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWERF = "N";
  FD0RW00.FD0RWSLF = "N";
  FD0RW00.FD0RWIDX = 4;
  while (FD0RW00.FD0RWIDX > 0)
    if (FD0RM005.FD0RMYPG[FD0RWIDX] != " ")
      if (FD0RM005.FD0RMYPG[FD0RWIDX] == "S")
        FD0RW00.FD0RWSLF = "Y"; /* selection made*/
      else
        FD0RW00.FD0RWERF = "Y";
        converseLib.validationFailed(13); /* 's' only valid entry*/
        FDWREC.XXXMODID = "054";
        set FD0RM005.FD0RMYPG[FD0RWIDX] cursor, bold;
      end
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX - 1;
  end

  if (FD0RW00.FD0RWSLF == "N" /* no product type group selection made*/
   || FD0RW00.FD0RWERF == "Y") /* an error was detected*/
    converseLib.validationFailed(31); /* product type group selection required*/
    FDWREC.XXXMODID = "054";
    set FD0RM005.FD0RMYPG[4] bold;
    set FD0RM005.FD0RMYPG[3] bold;
    set FD0RM005.FD0RMYPG[2] bold;
    set FD0RM005.FD0RMYPG[1] cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate futures/sales flag*/
   /* ------------------------------------------------------------*/

  if (FD0RM005.FD0RMFSF != "F"
   && FD0RM005.FD0RMFSF != "S")
    converseLib.validationFailed(28); /* required data missing/invalid*/
    FDWREC.XXXMODID = "054";
    set FD0RM005.FD0RMFSF cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate report request selections*/
   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWERF = "N";
  FD0RW00.FD0RWSLF = "N";
  FD0RW00.FD0RWIDX = 4;
  while (FD0RW00.FD0RWIDX > 0)
    if (FD0RM005.FD0RMRPT[FD0RWIDX] != " ")
      if (FD0RM005.FD0RMRPT[FD0RWIDX] == "S")
        FD0RW00.FD0RWSLF = "Y"; /* selection made*/
      else
        FD0RW00.FD0RWERF = "Y";
        converseLib.validationFailed(13); /* 's' only valid entry*/
        FDWREC.XXXMODID = "054";
        set FD0RM005.FD0RMRPT[FD0RWIDX] cursor, bold;
      end
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX - 1;
  end

  if (FD0RW00.FD0RWSLF == "N" /* no report selection made*/
   || FD0RW00.FD0RWERF == "Y") /* an error was detected*/
    converseLib.validationFailed(30);
    FDWREC.XXXMODID = "054";
    set FD0RM005.FD0RMRPT[4] bold;
    set FD0RM005.FD0RMRPT[3] bold;
    set FD0RM005.FD0RMRPT[2] bold;
    set FD0RM005.FD0RMRPT[1] cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* if eighteen month date not initialized, create it.*/
   /* ------------------------------------------------------------*/

  if (FD0RW00.FD0RWEDT == 0) /* if eighteen month not initialized*/

    if (XX0XW01.XX0XWZDT == 0) /* if date not formatted*/
      XX0XS01(); /* get and format current date and time*/
    end

    FD0RW00.FD0RWEYY = XX0XW01.XX0XWZYY; /* move curr yy*/
    FD0RW00.FD0RWEMM = XX0XW01.XX0XWZMM; /* move curr mm*/
    FD0RW00.FD0RWEMM = FD0RW00.FD0RWEMM + 18; /* add 18 months*/

    while (FD0RW00.FD0RWEMM > 12) /* until valid month*/
      FD0RW00.FD0RWEMM = FD0RW00.FD0RWEMM - 12;
      if (FD0RW00.FD0RWEYY == 99) /* if turn of century*/
        FD0RW00.FD0RWEYY = 0; /* move 0 to year*/
      else
        FD0RW00.FD0RWEYY = FD0RW00.FD0RWEYY + 1; /* add 1 to year*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate to yymm date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;

  FD0RW00.FD0RWERF = "N";

   /* ------------------------------------------------------------*/
   /* comparison month or ytd month can be netered, not both*/
   /* ------------------------------------------------------------*/

  if (FD0RM005.FD0RMCDT != 0
   && FD0RM005.FD0RMFDT != 0)
    set FD0RM005.FD0RMCDT cursor, bold; /* highlight*/
    set FD0RM005.FD0RMFDT bold; /* highlight*/
    converseLib.validationFailed(57); /* can't enter both dates*/
    FDWREC.XXXMODID = "054";
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* no dates entered*/
   /* ------------------------------------------------------------*/

  if (FD0RM005.FD0RMCDT == 0
   && FD0RM005.FD0RMFDT == 0
   && FD0RM005.FD0RMTDT == 0)
    set FD0RM005.FD0RMCDT cursor, bold; /* highlight*/
    set FD0RM005.FD0RMFDT bold; /* highlight*/
    converseLib.validationFailed(34); /* invalid date entered*/
    FDWREC.XXXMODID = "054";
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* from date entered, to date not entered*/
   /* ------------------------------------------------------------*/

  if (FD0RM005.FD0RMFDT != 0 /* ytd from date entered*/
   && FD0RM005.FD0RMTDT == 0) /* ytd to date not entered*/
    set FD0RM005.FD0RMFDT cursor, bold; /* highlight*/
    set FD0RM005.FD0RMTDT bold; /* highlight*/
    converseLib.validationFailed(34); /* invalid date entered*/
    FDWREC.XXXMODID = "054";
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* from date not entered, to date entered*/
   /* ------------------------------------------------------------*/

  if (FD0RM005.FD0RMFDT == 0 /* ytd from date not entered*/
   && FD0RM005.FD0RMTDT != 0) /* ytd to date entered*/
    set FD0RM005.FD0RMFDT cursor, bold; /* highlight*/
    set FD0RM005.FD0RMTDT bold; /* highlight*/
    converseLib.validationFailed(34); /* invalid date entered*/
    FDWREC.XXXMODID = "054";
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* validate comparison date entered*/
   /* ------------------------------------------------------------*/
  set TA2REC empty;

  if (FD0RM005.FD0RMCDT != 0)
    TA2REC.TA2GRGYM = FD0RM005.FD0RMCDT;
    FD0RS03(); /* edit date range*/
    if (TA2REC.TA2RTNCD != 0)
      set FD0RM005.FD0RMCDT cursor, bold; /* Highlight*/
      FD0RW00.FD0RWERF = "Y";
      converseLib.validationFailed(34); /* Indicate missing or invalid*/
      FDWREC.XXXMODID = "054";
    else
  /* IF FD0RM005.FD0RMCDT LT '8705';*/
  /* SET FD0RM005.FD0RMCDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 33 TO EZEMNO;          /* out of range*/
  /* MOVE '054' TO FDWREC.XXXMODID;*/
  /* ELSE;                         /* verify date within 18 month range*/
  /* IF FD0RW00.FD0RWEDT LT 0107;       /* century change 18 mm limit*/
  /* IF FD0RM005.FD0RMCDT LE 9912;    /* last valid 20th cent date*/
  /* MOVE TA2REC.TA2GRCYM TO FD0RW00.FD0RWCMC;*/
  /* ELSE;*/
  /* IF FD0RM005.FD0RMCDT LE FD0RW00.FD0RWEDT;*/
  /* MOVE TA2REC.TA2GRCYM TO FD0RW00.FD0RWCMC;*/
  /* ELSE;*/
  /* SET FD0RM005.FD0RMCDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 33 TO EZEMNO;    /* out of range*/
  /* MOVE '054' TO FDWREC.XXXMODID;*/
  /* END;*/
  /* END;*/
  /* ELSE;*/
  /* IF FD0RM005.FD0RMCDT LE FD0RW00.FD0RWEDT;*/

      SV-DATE = FD0RM005.FD0RMCDT;
      move SV-YY to WS-FROM-YY withV60Compat;
      move SV-MM to WS-FROM-MM withV60Compat;
      if (WS-FROM-YY < 57)
        WS-FROM-CC = 20;
      else
        WS-FROM-CC = 19;
      end

      SV-DATE = FD0RW00.FD0RWEDT;
      move SV-YY to WS-TO-YY withV60Compat;
      move SV-MM to WS-TO-MM withV60Compat;
      if (WS-TO-YY < 57)
        WS-TO-CC = 20;
      else
        WS-TO-CC = 19;
      end

      if (WS-FROM-DATE < WS-TO-DATE)
        FD0RW00.FD0RWCMC = TA2REC.TA2GRCYM;
      else
        set FD0RM005.FD0RMCDT cursor, bold; /* highlight*/
        converseLib.validationFailed(33); /* out of range*/
        FDWREC.XXXMODID = "054";
      end
  /* END;*/
  /* END;*/
    end

    if (converseVar.validationMsgNum == 0)
      return;
    else
      exit stack;
    end

  end

   /* ------------------------------------------------------------*/
   /* validate ytd from date*/
   /* ------------------------------------------------------------*/
  set TA2REC empty;

  TA2REC.TA2GRGYM = FD0RM005.FD0RMFDT;
  FD0RS03(); /* edit date range*/
  if (TA2REC.TA2RTNCD != 0)
    set FD0RM005.FD0RMFDT cursor, bold; /* Highlight*/
    FD0RW00.FD0RWERF = "Y";
    converseLib.validationFailed(34); /* Indicate missing or invalid*/
    FDWREC.XXXMODID = "054";
  else
  /* IF FD0RM005.FD0RMFDT LT '8705';*/
  /* SET FD0RM005.FD0RMFDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 33 TO EZEMNO;            /* out of range*/
  /* MOVE '054' TO FDWREC.XXXMODID;*/
  /* ELSE;                           /* verify date within 18 month range*/
  /* IF FD0RW00.FD0RWEDT LT 0107;  /* century change 18 mm limit*/
  /* IF FD0RM005.FD0RMFDT LE 9912;      /* last valid 20th cent date*/
  /* MOVE TA2REC.TA2GRCYM TO FD0RW00.FD0RWFCD;*/
  /* ELSE;*/
  /* IF FD0RM005.FD0RMFDT LE FD0RW00.FD0RWEDT;*/
  /* MOVE TA2REC.TA2GRCYM TO FD0RW00.FD0RWFCD;*/
  /* ELSE;*/
  /* SET FD0RM005.FD0RMFDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 33 TO EZEMNO;      /* out of range*/
  /* MOVE '054' TO FDWREC.XXXMODID;*/
  /* END;*/
  /* END;*/
  /* ELSE;*/
  /* IF FD0RM005.FD0RMFDT LE FD0RW00.FD0RWEDT;*/

    SV-DATE = FD0RM005.FD0RMFDT;
    move SV-YY to WS-FROM-YY withV60Compat;
    move SV-MM to WS-FROM-MM withV60Compat;
    if (WS-FROM-YY < 57)
      WS-FROM-CC = 20;
    else
      WS-FROM-CC = 19;
    end

    SV-DATE = FD0RW00.FD0RWEDT;
    move SV-YY to WS-TO-YY withV60Compat;
    move SV-MM to WS-TO-MM withV60Compat;
    if (WS-TO-YY < 57)
      WS-TO-CC = 20;
    else
      WS-TO-CC = 19;
    end

    if (WS-FROM-DATE < WS-TO-DATE)
      FD0RW00.FD0RWFCD = TA2REC.TA2GRCYM;
    else
      set FD0RM005.FD0RMFDT cursor, bold; /* highlight*/
      converseLib.validationFailed(33); /* out of range*/
      FDWREC.XXXMODID = "054";
    end
  /* END;*/
  /* END;*/
  end

   /* ------------------------------------------------------------*/
   /* validate ytd from date*/
   /* ------------------------------------------------------------*/
  set TA2REC empty;

  TA2REC.TA2GRGYM = FD0RM005.FD0RMTDT;
  FD0RS03(); /* edit date range*/
  if (TA2REC.TA2RTNCD != 0)
    set FD0RM005.FD0RMTDT cursor, bold; /* Highlight*/
    FD0RW00.FD0RWERF = "Y";
    converseLib.validationFailed(34); /* Indicate missing or invalid*/
    FDWREC.XXXMODID = "054";
  else
  /* IF FD0RM005.FD0RMTDT LT '8705';*/
  /* SET FD0RM005.FD0RMTDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 33 TO EZEMNO;            /* out of range*/
  /* MOVE '054' TO FDWREC.XXXMODID;*/
  /* ELSE;                           /* verify date within 18 month range*/
  /* IF FD0RW00.FD0RWEDT LT 0107;  /* century change 18 mm limit*/
  /* IF FD0RM005.FD0RMTDT LE 9912;      /* last valid 20th cent date*/
  /* MOVE TA2REC.TA2GRCYM TO FD0RW00.FD0RWTCD;*/
  /* ELSE;*/
  /* IF FD0RM005.FD0RMTDT LE FD0RW00.FD0RWEDT;*/
  /* MOVE TA2REC.TA2GRCYM TO FD0RW00.FD0RWTCD;*/
  /* ELSE;*/
  /* SET FD0RM005.FD0RMTDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 33 TO EZEMNO;      /* out of range*/
  /* MOVE '054' TO FDWREC.XXXMODID;*/
  /* END;*/
  /* END;*/
  /* ELSE;*/
  /* IF FD0RM005.FD0RMTDT LE FD0RW00.FD0RWEDT;*/

    SV-DATE = FD0RM005.FD0RMTDT;
    move SV-YY to WS-FROM-YY withV60Compat;
    move SV-MM to WS-FROM-MM withV60Compat;
    if (WS-FROM-YY < 57)
      WS-FROM-CC = 20;
    else
      WS-FROM-CC = 19;
    end

    SV-DATE = FD0RW00.FD0RWEDT;
    move SV-YY to WS-TO-YY withV60Compat;
    move SV-MM to WS-TO-MM withV60Compat;
    if (WS-TO-YY < 57)
      WS-TO-CC = 20;
    else
      WS-TO-CC = 19;
    end

    if (WS-FROM-DATE < WS-TO-DATE)
      FD0RW00.FD0RWTCD = TA2REC.TA2GRCYM;
    else
      set FD0RM005.FD0RMTDT cursor, bold; /* highlight*/
      converseLib.validationFailed(33); /* out of range*/
      FDWREC.XXXMODID = "054";
    end
  /* END;*/
  /* END;*/
  end

   /* ------------------------------------------------------------*/
   /* from date should be less than or equal to the to date*/
   /* ------------------------------------------------------------*/
   /* dsmith -----------------------------------------------------*/
  /* IF FD0RM005.FD0RMFDT GT FD0RM005.FD0RMTDT;*/
  /* SET FD0RM005.FD0RMFDT CURSOR,BRIGHT;   /* Highlight*/
  /* SET FD0RM005.FD0RMTDT CURSOR,BRIGHT;   /* Highlight*/
  /* MOVE 29 TO EZEMNO;              /* from dt can't be gt to dt*/
  /* MOVE '034' TO FDWREC.XXXMODID;*/
  /* END;*/

  SV-DATE = FD0RM005.FD0RMFDT;
  move SV-YY to WS-FROM-YY withV60Compat;
  move SV-MM to WS-FROM-MM withV60Compat;
  if (WS-FROM-YY < 57)
    WS-FROM-CC = 20;
  else
    WS-FROM-CC = 19;
  end

  SV-DATE = FD0RM005.FD0RMTDT;
  move SV-YY to WS-TO-YY withV60Compat;
  move SV-MM to WS-TO-MM withV60Compat;
  if (WS-TO-YY < 57)
    WS-TO-CC = 20;
  else
    WS-TO-CC = 19;
  end

  if (WS-FROM-DATE > WS-TO-DATE)
    set FD0RM005.FD0RMFDT cursor, bold; /* Highlight*/
    set FD0RM005.FD0RMTDT cursor, bold; /* Highlight*/
    converseLib.validationFailed(29); /* from dt can't be gt to dt*/
    FDWREC.XXXMODID = "034";
  end
  /* dsmith ------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* validate from and to dates within 12 month range*/
   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWFYM = FD0RM005.FD0RMFDT;
  FD0RW00.FD0RWDMM = 11 + FD0RW00.FD0RWFMM;
  if (FD0RW00.FD0RWDMM > 12)
    FD0RW00.FD0RWDYY = 1 + FD0RW00.FD0RWFYY;
    FD0RW00.FD0RWDMM = FD0RW00.FD0RWDMM - 12;
  else
    FD0RW00.FD0RWDYY = FD0RW00.FD0RWFYY;
  end

  if (FD0RM005.FD0RMTDT > FD0RW00.FD0RWDYM)
    set FD0RM005.FD0RMFDT cursor, bold; /* Highlight*/
    set FD0RM005.FD0RMTDT cursor, bold; /* Highlight*/
    converseLib.validationFailed(56); /* dt must be w/i a 12 month range*/
    FDWREC.XXXMODID = "034";
    FD0RW00.FD0RWDYM = 0;
  end


  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
end // end FD0R054

// Process valid input request
Function FD0R055()
   /* ****************************************************************/
   /* Call sub-routine to find which environment the program is*/
   /* executing in...test or prod*/
   /* ****************************************************************/

  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FD0R-05501(); /* format prod jcl*/
    else
      FD0R-05502(); /* else format test jcl*/
    end
  else

    FDWREC.XXXMODID = "055"; /* module identification*/
    FDWREC.XXXMSGNO = 63; /* Error encountered with print request*/
    exit stack;
  end

end // end FD0R055

// INVENTORY ANALYSIS REPORT
Function FD0R060()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FD0R061(); /* Format and display the map*/

  FD0R062(); /* Check attention identifier*/

  FD0R063(); /* Reset fields to normal intensity*/

  FD0R064(); /* Verify the data that was entered*/

  FD0R065(); /* Process valid input request*/


end // end FD0R060

// Format and display the map
Function FD0R061()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FDWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FD0RM006.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FD0RM006.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FD0RM006.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FD0RM006.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FD0RM006.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FD0RM006.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* Set default selections.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No messages to display*/
    FD0RM006.FD0RMXDV[1] = "S"; /* Select Domestic*/
    FD0RM006.FD0RMXDV[2] = "S"; /* Select International*/
    FD0RM006.FD0RMXDV[3] = "S"; /* Select Promo*/
  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FDWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FDWREC.XXXMSGNO != 0) /* Message to display*/

      if (FDWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FDWREC.XXXMSGNO);
      end /* Message number*/
    else
      FD0RM006.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FD0RM006.XXXMODID = FDWREC.XXXMODID; /* Module identification*/

    set FD0RM006 alarm; /* Indicate sound alarm*/

  end

  converse FD0RM006 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMSGNO = 0; /* Message number*/
  FDWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end FD0R061

// Check attention identifier
Function FD0R062()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FD0RW00.FD0RMSEL[6] = "C"; /* Indicate selection cancelled*/

    set FD0RM006 initial; /* m006 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FD0RW00.FD0RWSWX = "Y"; /* Indicate exit requested*/

    FD0RW00.FD0RMSEL[6] = " "; /* Reinit selection field*/

    set FD0RM006 initial; /* m006 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FDWREC.XXXMODID = "062"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FD0R062

// Reset highlighted fields
Function FD0R063()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FD0RM006.FD0RMCDT normal; /* compare date*/

  set FD0RM006.FD0RMRPT[1] normal; /* report selection fields*/
  set FD0RM006.FD0RMRPT[2] normal;
  set FD0RM006.FD0RMRPT[3] normal;
  set FD0RM006.FD0RMRPT[4] normal;

  set FD0RM006.FD0RMUNT normal; /* min inv qty selection*/
  set FD0RM006.FD0RMSAL normal; /* min sales qty selection*/

  set FD0RM006.FD0RMYPG[1] normal; /* product group selection*/
  set FD0RM006.FD0RMYPG[2] normal;
  set FD0RM006.FD0RMYPG[3] normal;
  set FD0RM006.FD0RMYPG[4] normal;

  set FD0RM006.FD0RMXDV[1] normal; /* product division*/
  set FD0RM006.FD0RMXDV[2] normal; /* product division*/
  set FD0RM006.FD0RMXDV[3] normal; /* product division*/
  set FD0RM006.XPLCD normal; /* product line code*/
  set FD0RM006.XPCCD normal; /* product category code*/
  set FD0RM006.SYBSTGNB normal; /* style group nbr*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FD0RM006.XPLCD == "?" /* product line code*/
   || FD0RM006.XPCCD == "?") /* category code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FDWREC.XXXMODID = "063"; /* Module identification*/
      converseLib.validationFailed(49); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM006.XPLCD == "?") /* product line cd list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT LINE CODE "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM006.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM006.XPLCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM006.XPCCD == "?") /* product category list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "CATEGORY CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM006.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM006.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FDWREC.XXXMODID = "063"; /* Module identification*/
  converseLib.validationFailed(48); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FD0R063

// Verify the entered data
Function FD0R064()
   /* ------------------------------------------------------------*/
   /* validate style group number - non-db2 edit*/
   /* ------------------------------------------------------------*/

  if (FD0RM006.FD0RMRPT[1] != " "
   || FD0RM006.FD0RMRPT[2] != " ")

    if (FD0RM006.SYBSTGNB == " ")
      converseLib.validationFailed(37); /* required entry*/
      FDWREC.XXXMODID = "064";
      set FD0RM006.SYBSTGNB cursor, bold;
    else
      if (FD0RM006.SYBSTGNB == "*")

         /* valid entry*/

      else
        /* ------------------------------------------------------------*/
         /* validate style group number - db2 edit*/
        /* ------------------------------------------------------------*/

        set SYBREC empty;
        SYBREC.SYBSTGNB = FD0RM006.SYBSTGNB;

        FD0RS02(); /* validate style grp*/

        if (SQLCA.VAGen_SQLCODE == 100)
          converseLib.validationFailed(36);
          FDWREC.XXXMODID = "064";
          set FD0RM006.SYBSTGNB cursor, bold;
        end
      end
    end
  else
    if (FD0RM006.FD0RMRPT[3] != " "
     || FD0RM006.FD0RMRPT[4] != " ")
      if (FD0RM006.SYBSTGNB == " "
       || FD0RM006.SYBSTGNB == "*")

         /* valid entry*/

      else
        converseLib.validationFailed(52); /* style grp nbr invalid w/reports*/
        FDWREC.XXXMODID = "064";
        set FD0RM006.SYBSTGNB cursor, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/

  if (FD0RM006.XPCCD != " "
   || FD0RM006.XPCCD != "*")

     /* valid entry*/

  else
    XPCREC.XPCCD = FD0RM006.XPCCD;
    if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
      if (XPCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(32); /* status is inactive*/
        FDWREC.XXXMODID = "064";
        set FD0RM006.XPCCD cursor, bold;
      end
    else
      converseLib.validationFailed(38); /* invalid product category code*/
      FDWREC.XXXMODID = "064";
      set FD0RM006.XPCCD cursor, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product line code*/
   /* ------------------------------------------------------------*/

  if (FD0RM006.XPLCD == " ")
    converseLib.validationFailed(37); /* required entry*/
    FDWREC.XXXMODID = "064";
    set FD0RM006.XPLCD cursor, bold;
  else
    if (FD0RM006.XPLCD != "*")
      XPLREC.XPLCD = FD0RM006.XPLCD;
      if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
        if (XPLTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          converseLib.validationFailed(32); /* inactive status*/
          FDWREC.XXXMODID = "064";
          set FD0RM006.XPLCD cursor, bold;
        end
      else
        converseLib.validationFailed(39); /* invalid product line code*/
        FDWREC.XXXMODID = "064";
        set FD0RM006.XPLCD cursor, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product line code and product category combination*/
    /* -db2-edit*/

   /* They must reside in the dfcast.vffxrf01 table to be valid.*/
   /* If either or both line or category code fields have*/
   /* asterisks in them, then there is no need to validate the*/
   /* cross reference between codes.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0
   && FD0RM006.XPLCD != " ")

    if (FD0RM006.XPCCD == "*"
     || FD0RM006.XPLCD == "*")

       /* valid entry*/

    else
      if (FD0RM006.XPCCD == " ")
        FD0RM006.XPCCD = "*";
      else
        set FF2REC empty; /* clear the storage row*/
        FF2REC.XPCCD = FD0RM006.XPCCD; /* category code*/
        FF2REC.XPLCD = FD0RM006.XPLCD; /* product line code*/
        FF2REC.YPGCD = "*"; /* type group code*/
        FF2REC.YSMXDV = "*"; /* division group code*/

        FD0RS10(); /* select cursor for table*/
        FD0RS11(); /* fetch row in cursor*/

        if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/
          converseLib.validationFailed(55);
                                   /* cat code and prod line not consistent*/
          FDWREC.XXXMODID = "064";
          set FD0RM006.XPLCD cursor, bold;
          set FD0RM006.XPCCD bold;
        end

        FD0RS12(); /* close cursor*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate style group number/prod category/prod line combo*/
   /* ------------------------------------------------------------*/

  if (FD0RM006.FD0RMRPT[1] != " "
   || FD0RM006.FD0RMRPT[2] != " ")

    if (FD0RM006.SYBSTGNB != " "
     && FD0RM006.SYBSTGNB != "*")
      if (FD0RM006.XPCCD != " "
       && FD0RM006.XPCCD != "*")
        converseLib.validationFailed(51); /* invalid combination*/
        FDWREC.XXXMODID = "064";
        set FD0RM006.SYBSTGNB bold;
        set FD0RM006.XPCCD cursor, bold;
      end
      if (FD0RM006.XPLCD != " "
       && FD0RM006.XPLCD != "*")
        converseLib.validationFailed(51); /* invalid combination*/
        FDWREC.XXXMODID = "064";
        set FD0RM006.SYBSTGNB bold;
        set FD0RM006.XPLCD cursor, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product type group selections*/
   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWERF = "N";
  FD0RW00.FD0RWSLF = "N";
  FD0RW00.FD0RWIDX = 4;
  while (FD0RW00.FD0RWIDX > 0)
    if (FD0RM006.FD0RMYPG[FD0RWIDX] != " ")
      if (FD0RM006.FD0RMYPG[FD0RWIDX] == "S")
        FD0RW00.FD0RWSLF = "Y"; /* selection made*/
      else
        FD0RW00.FD0RWERF = "Y";
        converseLib.validationFailed(13); /* 's' only valid entry*/
        FDWREC.XXXMODID = "064";
        set FD0RM006.FD0RMYPG[FD0RWIDX] cursor, bold;
      end
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX - 1;
  end

  if (FD0RW00.FD0RWSLF == "N" /* no product type group selection made*/
   || FD0RW00.FD0RWERF == "Y") /* an error was detected*/
    converseLib.validationFailed(31);
                                   /* product type group selection required*/
    FDWREC.XXXMODID = "064";
    set FD0RM006.FD0RMYPG[4] bold;
    set FD0RM006.FD0RMYPG[3] bold;
    set FD0RM006.FD0RMYPG[2] bold;
    set FD0RM006.FD0RMYPG[1] cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate product division selections*/
   /* ------------------------------------------------------------*/

  if (FD0RM006.FD0RMXDV[1] == " "
   && FD0RM006.FD0RMXDV[2] == " "
   && FD0RM006.FD0RMXDV[3] == " ") /* At least one must be selected*/
    converseLib.validationFailed(37);
    FDWREC.XXXMODID = "064";
    set FD0RM006.FD0RMXDV[1] cursor, bold;
    set FD0RM006.FD0RMXDV[2] bold;
    set FD0RM006.FD0RMXDV[3] bold;
  end

   /* ------------------------------------------------------------*/
   /* validate report request selections*/
   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWERF = "N";
  FD0RW00.FD0RWSLF = "N";
  FD0RW00.FD0RWIDX = 4;
  while (FD0RW00.FD0RWIDX > 0)
    if (FD0RM006.FD0RMRPT[FD0RWIDX] != " ")
      if (FD0RM006.FD0RMRPT[FD0RWIDX] == "S")
        FD0RW00.FD0RWSLF = "Y"; /* selection made*/
      else
        FD0RW00.FD0RWERF = "Y";
        converseLib.validationFailed(13); /* 's' only valid selection*/
        FDWREC.XXXMODID = "064";
        set FD0RM006.FD0RMRPT[FD0RWIDX] cursor, bold;
      end
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX - 1;
  end

  if (FD0RW00.FD0RWSLF == "N" /* no report selection made*/
   || FD0RW00.FD0RWERF == "Y") /* an error was detected*/
    converseLib.validationFailed(30); /* REPORT SELECTION REQUIRED*/
    FDWREC.XXXMODID = "064";
    set FD0RM006.FD0RMRPT[4] bold;
    set FD0RM006.FD0RMRPT[3] bold;
    set FD0RM006.FD0RMRPT[2] bold;
    set FD0RM006.FD0RMRPT[1] cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate to yymm date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;

  FD0RW00.FD0RWERF = "N";
  TA2REC.TA2GRGYM = FD0RM006.FD0RMCDT;

  FD0RS03(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set FD0RM006.FD0RMCDT cursor, bold; /* Highlight*/
    converseLib.validationFailed(34); /* Indicate missing or invalid*/
    FDWREC.XXXMODID = "064";
  else
  /* IF FD0RM006.FD0RMCDT LT '8705';*/
  /* SET FD0RM006.FD0RMCDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 33 TO EZEMNO;            /* out of range*/
  /* MOVE '064' TO FDWREC.XXXMODID;*/
  /* ELSE;*/

    if (FD0RW00.FD0RWBCO == 0)
                                   /* if billing cutoff not yet initialized*/
      FD0RS20(); /* get billing cutoff*/
    end

    FD0RW00.FD0RWMMM = FD0RW00.FD0RWBCM; /* work month*/
    FD0RW00.FD0RWYYY = FD0RW00.FD0RWBCY; /* work year*/

  /* changed date from 26th to 20st due to NSC early monthend*/
    if (FD0RW00.FD0RWBCD <= 20) /* if 26th or before*/
      FD0RW00.FD0RWMMM = FD0RW00.FD0RWMMM - 1; /* subtract 1 month*/
      if (FD0RW00.FD0RWMMM == 0) /* if year wraparound*/
        FD0RW00.FD0RWMMM = 12;
        if (FD0RW00.FD0RWYYY == 0) /* first 20th cent yy*/
          FD0RW00.FD0RWYYY = 99;
        else
          FD0RW00.FD0RWYYY = FD0RW00.FD0RWYYY - 1;
        end
      end
    end

  /* dsmith*/
    SV-DATE = FD0RM006.FD0RMCDT;
    move SV-YY to WS-FROM-YY withV60Compat;
    move SV-MM to WS-FROM-MM withV60Compat;
    if (WS-FROM-YY < 57)
      WS-FROM-CC = 20;
    else
      WS-FROM-CC = 19;
    end

    SV-DATE = FD0RW00.FD0RWWYM;
    move SV-YY to WS-TO-YY withV60Compat;
    move SV-MM to WS-TO-MM withV60Compat;
    if (WS-TO-YY < 57)
      WS-TO-CC = 20;
    else
      WS-TO-CC = 19;
    end

    if (WS-FROM-DATE > WS-TO-DATE)
  /* IF FD0RM006.FD0RMCDT GT FD0RW00.FD0RWWYM;/* if date entered larger*/

      set FD0RM006.FD0RMCDT cursor, bold; /* Highlight*/
      converseLib.validationFailed(34); /* Indicate missing or invalid*/
      FDWREC.XXXMODID = "064";

    else

      FD0RW00.FD0RWCMC = TA2REC.TA2GRCYM;
    end
  /* END;*/
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

end // end FD0R064

// Process valid input request
Function FD0R065()
   /* ****************************************************************/
   /* Call sub-routine to find which environment the program is*/
   /* executing in...test or prod*/
   /* ****************************************************************/

  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FD0R-06501(); /* format prod jcl*/
    else
      FD0R-06502(); /* else format test jcl*/
    end
  else

    FDWREC.XXXMODID = "065"; /* module identification*/
    FDWREC.XXXMSGNO = 63; /* Error encountered with print request*/
    exit stack;
  end

end // end FD0R065

// DETAIL DEMAND REPORT
Function FD0R070()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FD0R071(); /* Format and display the map*/

  FD0R072(); /* Check attention identifier*/

  FD0R073(); /* Reset fields to normal intensity*/

  FD0R074(); /* Verify the data that was entered*/

  FD0R075(); /* Process valid input request*/


end // end FD0R070

// Format and display the map
Function FD0R071()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FDWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FD0RM007.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FD0RM007.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FD0RM007.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FD0RM007.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FD0RM007.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FD0RM007.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FDWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FDWREC.XXXMSGNO != 0) /* Message to display*/

      if (FDWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FDWREC.XXXMSGNO);
      end /* Message number*/
    else
      FD0RM007.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FD0RM007.XXXMODID = FDWREC.XXXMODID; /* Module identification*/

    set FD0RM007 alarm; /* Indicate sound alarm*/

  end

  converse FD0RM007 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMSGNO = 0; /* Message number*/
  FDWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end FD0R071

// Check attention identifier
Function FD0R072()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FD0RW00.FD0RMSEL[7] = "C"; /* Indicate selection cancelled*/

    set FD0RM007 initial; /* m007 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FD0RW00.FD0RWSWX = "Y"; /* Indicate exit requested*/

    FD0RW00.FD0RMSEL[7] = " "; /* Reinit selection field*/

    set FD0RM007 initial; /* m007 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FDWREC.XXXMODID = "072"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FD0R072

// Reset highlighted fields
Function FD0R073()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FD0RM007.FD0RMFDT normal; /* need from date*/
  set FD0RM007.FD0RMTDT normal; /* need to date*/

  set FD0RM007.FD0RMRPT[1] normal; /* report selection fields*/
  set FD0RM007.FD0RMRPT[2] normal;

  set FD0RM007.FD0RMPFC normal; /* prop/futurec/combined flag*/

  set FD0RM007.SP1ID[1] normal; /* program ids*/
  set FD0RM007.SP1ID[2] normal;
  set FD0RM007.SP1ID[3] normal;
  set FD0RM007.SP1ID[4] normal;
  set FD0RM007.SP1ID[5] normal;
  set FD0RM007.SP1ID[6] normal;

  set FD0RM007.FD0RMYPG[1] normal; /* product group selection*/
  set FD0RM007.FD0RMYPG[2] normal;
  set FD0RM007.FD0RMYPG[3] normal;
  set FD0RM007.FD0RMYPG[4] normal;

  set FD0RM007.XPLCD normal; /* product line code*/
  set FD0RM007.XPCCD normal; /* product category code*/

  set FD0RM007.SYBSTGNB normal; /* style group nbr*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FD0RM007.XPLCD == "?" /* product line code*/
   || FD0RM007.XPCCD == "?") /* category code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FDWREC.XXXMODID = "073"; /* Module identification*/
      converseLib.validationFailed(49); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM007.XPLCD == "?") /* product line cd list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT LINE CODE "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM007.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM007.XPLCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM007.XPCCD == "?") /* product category list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "CATEGORY CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM007.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM007.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FDWREC.XXXMODID = "073"; /* Module identification*/
  converseLib.validationFailed(48); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FD0R073

// Verify the entered data
Function FD0R074()
   /* ------------------------------------------------------------*/
   /* validate style group number - non-db2 edit*/
   /* ------------------------------------------------------------*/

  if (FD0RM007.SYBSTGNB == " ")
    converseLib.validationFailed(28); /* invalid or missing data*/
    FDWREC.XXXMODID = "074";
    set FD0RM007.SYBSTGNB cursor, bold;
  else
    if (FD0RM007.SYBSTGNB == "*")

      /* valid entry*/

    else
      /* ------------------------------------------------------------*/
       /* validate style group number - db2 edit*/
      /* ------------------------------------------------------------*/

      set SYBREC empty;
      SYBREC.SYBSTGNB = FD0RM007.SYBSTGNB;

      FD0RS02(); /* validate style grp*/

      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(36); /* invalid style group nbr entered*/
        FDWREC.XXXMODID = "074";
        set FD0RM007.SYBSTGNB cursor, bold;
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/

  if (FD0RM007.XPCCD == "*"
   || FD0RM007.XPCCD == " ")

     /* valid entry*/

  else
    XPCREC.XPCCD = FD0RM007.XPCCD;
    if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
      if (XPCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(32); /* status is inactive*/
        FDWREC.XXXMODID = "074";
        set FD0RM007.XPCCD cursor, bold;
      end
    else
      converseLib.validationFailed(38); /* invalid product category code*/
      FDWREC.XXXMODID = "074";
      set FD0RM007.XPCCD cursor, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product line code*/
   /* ------------------------------------------------------------*/

  if (FD0RM007.XPLCD == " ")
    converseLib.validationFailed(28); /* invalid or missing data*/
    FDWREC.XXXMODID = "074";
    set FD0RM007.XPLCD cursor, bold;
  else
    if (FD0RM007.XPLCD != "*")
      XPLREC.XPLCD = FD0RM007.XPLCD;
      if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
        if (XPLTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          converseLib.validationFailed(32); /* inactive status*/
          FDWREC.XXXMODID = "074";
          set FD0RM007.XPLCD cursor, bold;
        end
      else
        converseLib.validationFailed(39); /* invalid product line code;*/
        FDWREC.XXXMODID = "074";
        set FD0RM007.XPLCD cursor, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product line code and category code combination*/
    /* -db2-edit*/

   /* They must reside in the dfcast.vffxrf01 table to be valid.*/
   /* If either or both line or category code fields have*/
   /* asterisks in them, then there is no need to validate the*/
   /* cross reference between codes.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0
   && FD0RM007.XPLCD != " ")

    if (FD0RM007.XPCCD == "*"
     || FD0RM007.XPLCD == "*")

       /* valid entry*/

    else
      if (FD0RM007.XPCCD == " ")
        FD0RM007.XPCCD = "*";
      else
        set FF2REC empty; /* clear the storage row*/
        FF2REC.XPCCD = FD0RM007.XPCCD; /* category code*/
        FF2REC.XPLCD = FD0RM007.XPLCD; /* product line code*/
        FF2REC.YPGCD = "*"; /* type group code*/
        FF2REC.YSMXDV = "*"; /* division group code*/

        FD0RS10(); /* select cursor for table*/
        FD0RS11(); /* fetch row in cursor*/

        if (SQLCA.VAGen_SQLCODE == +100)
          converseLib.validationFailed(55);
          FDWREC.XXXMODID = "074";
          set FD0RM007.XPLCD cursor, bold;
          set FD0RM007.XPCCD bold;
        end

        FD0RS12();

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate style group nbr/prod category/prod line combo*/
   /* ------------------------------------------------------------*/

  if (FD0RM007.SYBSTGNB != " "
   && FD0RM007.SYBSTGNB != "*")
    if (FD0RM007.XPCCD != " "
     && FD0RM007.XPCCD != "*")
      converseLib.validationFailed(52); /* invalid combo*/
      FDWREC.XXXMODID = "074";
      set FD0RM007.SYBSTGNB bold;
      set FD0RM007.XPCCD cursor, bold;
    end
    if (FD0RM007.XPLCD != " "
     && FD0RM007.XPLCD != "*")
      converseLib.validationFailed(52); /* invalid combo*/
      FDWREC.XXXMODID = "074";
      set FD0RM007.SYBSTGNB bold;
      set FD0RM007.XPLCD cursor, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product type group selections*/
   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWERF = "N";
  FD0RW00.FD0RWSLF = "N";
  FD0RW00.FD0RWIDX = 4;
  while (FD0RW00.FD0RWIDX > 0)
    if (FD0RM007.FD0RMYPG[FD0RWIDX] != " ")
      if (FD0RM007.FD0RMYPG[FD0RWIDX] == "S")
        FD0RW00.FD0RWSLF = "Y"; /* selection made*/
      else
        FD0RW00.FD0RWERF = "Y";
        converseLib.validationFailed(13); /* 's' only valid entry*/
        FDWREC.XXXMODID = "074";
        set FD0RM007.FD0RMYPG[FD0RWIDX] cursor, bold;
      end
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX - 1;
  end

  if (FD0RW00.FD0RWSLF == "N" /* no product type group selection made*/
   || FD0RW00.FD0RWERF == "Y") /* an error was detected*/
    converseLib.validationFailed(31);
                                   /* product type group selection required*/
    FDWREC.XXXMODID = "074";
    set FD0RM007.FD0RMYPG[4] bold;
    set FD0RM007.FD0RMYPG[3] bold;
    set FD0RM007.FD0RMYPG[2] bold;
    set FD0RM007.FD0RMYPG[1] cursor, bold;
  end


   /* ------------------------------------------------------------*/
   /* validate program ids - db2 edit*/
   /* ------------------------------------------------------------*/

  if (FD0RM007.SP1ID[1] == " " /* if first id blank*/
   && FD0RM007.SP1ID[2] == " " /* and second blank*/
   && FD0RM007.SP1ID[3] == " " /* and third  blank*/
   && FD0RM007.SP1ID[4] == " " /* and fourth blank*/
   && FD0RM007.SP1ID[5] == " " /* and fifth  blank*/
   && FD0RM007.SP1ID[6] == " ") /* and sixth  blank*/

    converseLib.validationFailed(37); /* required field, please enter*/
    FDWREC.XXXMODID = "074";
    set FD0RM007.SP1ID[1] cursor, bold; /* highlight*/
    set FD0RM007.SP1ID[2] bold; /* highlight*/
    set FD0RM007.SP1ID[3] bold; /* highlight*/
    set FD0RM007.SP1ID[4] bold; /* highlight*/
    set FD0RM007.SP1ID[5] bold; /* highlight*/
    set FD0RM007.SP1ID[6] bold; /* highlight*/
  end
  move " " to FD0RW00.SP1ABRV[1] for all; /* init the field*/

  if (converseVar.validationMsgNum == 0) /* no errors yet*/
    FD0RW00.FD0RWIDX = 6;
    while (FD0RW00.FD0RWIDX > 0)
      if (FD0RM007.SP1ID[FD0RWIDX] != " "
       && FD0RM007.SP1ID[FD0RWIDX] != "*")

        set SP1REC empty;
        SP1REC.SP1ID = FD0RM007.SP1ID[FD0RWIDX];

        FD0RS04(); /* select dspgm.vspgm001*/

        if (SQLCA.VAGen_SQLCODE == 0)
          FD0RW00.SP1ABRV[FD0RWIDX] = SP1REC.SP1ABRV;
        else
          converseLib.validationFailed(46); /* program id missing/invalid*/
          FDWREC.XXXMODID = "074";
          set FD0RM007.SP1ID[FD0RWIDX] cursor, bold;
        end
      end
      FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX - 1;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate prop/futures/combined flag*/
   /* ------------------------------------------------------------*/

  if (FD0RM007.FD0RMPFC != "P"
   && FD0RM007.FD0RMPFC != "F"
   && FD0RM007.FD0RMPFC != "C")
    converseLib.validationFailed(28); /* required data missing/invalid*/
    FDWREC.XXXMODID = "074";
    set FD0RM007.FD0RMPFC cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate futures/product type combination*/
   /* ------------------------------------------------------------*/

  if (FD0RM007.FD0RMPFC == "F") /* futures selected*/
    if (FD0RM007.FD0RMYPG[3] == "S"
     || FD0RM007.FD0RMYPG[4] == "S")
      if (FD0RM007.FD0RMYPG[3] == "S")
        set FD0RM007.FD0RMYPG[3] bold;
      end
      if (FD0RM007.FD0RMYPG[4] == "S")
        set FD0RM007.FD0RMYPG[4] bold;
      end
      converseLib.validationFailed(47); /* only inline or makeup valid*/
      FDWREC.XXXMODID = "074";
      set FD0RM007.FD0RMPFC cursor, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate report request selections*/
   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWERF = "N";
  FD0RW00.FD0RWSLF = "N";
  FD0RW00.FD0RWIDX = 2;
  while (FD0RW00.FD0RWIDX > 0)
    if (FD0RM007.FD0RMRPT[FD0RWIDX] != " ")
      if (FD0RM007.FD0RMRPT[FD0RWIDX] == "S")
        FD0RW00.FD0RWSLF = "Y"; /* selection made*/
      else
        FD0RW00.FD0RWERF = "Y";
        converseLib.validationFailed(13); /* 's' only valid selection*/
        FDWREC.XXXMODID = "074";
        set FD0RM007.FD0RMRPT[FD0RWIDX] cursor, bold;
      end
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX - 1;
  end

  if (FD0RW00.FD0RWSLF == "N" /* no report selection made*/
   || FD0RW00.FD0RWERF == "Y") /* an error was detected*/
    converseLib.validationFailed(30); /* report selection required*/
    FDWREC.XXXMODID = "074";
    set FD0RM007.FD0RMRPT[2] bold;
    set FD0RM007.FD0RMRPT[1] cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* if eighteen month date not initialized, create it.*/
   /* ------------------------------------------------------------*/

  if (FD0RW00.FD0RWEDT == 0) /* if eighteen date not initialized*/

    if (XX0XW01.XX0XWZDT == 0) /* if date not formatted*/
      XX0XS01(); /* get and format current date and time*/
    end

    FD0RW00.FD0RWEYY = XX0XW01.XX0XWZYY; /* curr year*/
    FD0RW00.FD0RWEMM = XX0XW01.XX0XWZMM; /* curr month*/
    FD0RW00.FD0RWEMM = FD0RW00.FD0RWEMM + 18; /* add 18 months*/

    while (FD0RW00.FD0RWEMM > 12) /* until valid month*/
      FD0RW00.FD0RWEMM = FD0RW00.FD0RWEMM - 12;
      if (FD0RW00.FD0RWEYY == 99) /* if century change*/
        FD0RW00.FD0RWEYY = 0; /* move 0 to year*/
      else
        FD0RW00.FD0RWEYY = FD0RW00.FD0RWEYY + 1; /* add 1 to year*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate to yymm date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;

  FD0RW00.FD0RWERF = "N";
  TA2REC.TA2GRGYM = FD0RM007.FD0RMTDT;

  FD0RS03(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set FD0RM007.FD0RMTDT cursor, bold; /* Highlight*/
    FD0RW00.FD0RWERF = "Y";
    converseLib.validationFailed(34); /* Indicate missing or invalid*/
    FDWREC.XXXMODID = "074";
  else
  /* IF FD0RM007.FD0RMTDT LT '8705';*/
  /* SET FD0RM007.FD0RMTDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 33 TO EZEMNO;            /* out of range*/
  /* MOVE '074' TO FDWREC.XXXMODID;*/
  /* ;*/
  /* ELSE;                           /* verify date within 18 month limit*/
  /* ;*/
  /* IF FD0RW00.FD0RWEDT LT 0107;  /* century change 18 mm limit*/
  /* IF FD0RM007.FD0RMTDT LE 9912;      /* last valid 20th century date*/
  /* MOVE TA2REC.TA2GRCYM TO FD0RW00.FD0RWTCD;*/
  /* ELSE;*/
  /* IF FD0RM007.FD0RMTDT LE FD0RW00.FD0RWEDT;*/
  /* MOVE TA2REC.TA2GRCYM TO FD0RW00.FD0RWTCD;*/
  /* ELSE;*/
  /* SET FD0RM007.FD0RMTDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 33 TO EZEMNO;      /* out of range*/
  /* MOVE '074' TO FDWREC.XXXMODID;*/
  /* END;*/
  /* END;*/
  /* ELSE;*/
    SV-DATE = FD0RM007.FD0RMTDT;
    move SV-YY to WS-FROM-YY withV60Compat;
    move SV-MM to WS-FROM-MM withV60Compat;
    if (WS-FROM-YY < 57)
      WS-FROM-CC = 20;
    else
      WS-FROM-CC = 19;
    end

    SV-DATE = FD0RW00.FD0RWEDT;
    move SV-YY to WS-TO-YY withV60Compat;
    move SV-MM to WS-TO-MM withV60Compat;
    if (WS-TO-YY < 57)
      WS-TO-CC = 20;
    else
      WS-TO-CC = 19;
    end

    if (WS-FROM-DATE < WS-TO-DATE)
  /* IF FD0RM007.FD0RMTDT LE FD0RW00.FD0RWEDT;*/
      FD0RW00.FD0RWTCD = TA2REC.TA2GRCYM;
    else
      set FD0RM007.FD0RMTDT cursor, bold; /* Highlight*/
      converseLib.validationFailed(33); /* out of range*/
      FDWREC.XXXMODID = "074";
    end
  /* END;*/
  /* END;*/
  end

   /* ------------------------------------------------------------*/
   /* validate from yymm date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;

  TA2REC.TA2GRGYM = FD0RM007.FD0RMFDT;

  FD0RS03(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set FD0RM007.FD0RMFDT cursor, bold; /* Highlight*/
    FD0RW00.FD0RWERF = "Y";
    converseLib.validationFailed(34); /* Indicate missing or invalid*/
    FDWREC.XXXMODID = "074";
  else
  /* IF FD0RM007.FD0RMFDT LT '8705';*/
  /* SET FD0RM007.FD0RMFDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 33 TO EZEMNO;            /* Indicate missing or invalid*/
  /* MOVE '074' TO FDWREC.XXXMODID;*/
  /* ELSE;*/
    FD0RW00.FD0RWFCD = TA2REC.TA2GRCYM;
  /* END;*/
  end

   /* ------------------------------------------------------------*/
   /* if date are valid verify from to dates*/
   /* ------------------------------------------------------------*/
   /* dsmith -----------------------------------------------------*/
  if (FD0RW00.FD0RWERF != "Y") /* dates are valid*/
  /* IF FD0RM007.FD0RMFDT > FD0RM007.FD0RMTDT;*/
  /* SET FD0RM007.FD0RMFDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 29 TO EZEMNO;            /* from date cannot be gt the to dt*/
  /* MOVE '074' TO FDWREC.XXXMODID;*/
  /* END;*/
  /* D;*/

    SV-DATE = FD0RM007.FD0RMFDT;
    move SV-YY to WS-FROM-YY withV60Compat;
    move SV-MM to WS-FROM-MM withV60Compat;
    if (WS-FROM-YY < 57)
      WS-FROM-CC = 20;
    else
      WS-FROM-CC = 19;
    end

    SV-DATE = FD0RM007.FD0RMTDT;
    move SV-YY to WS-TO-YY withV60Compat;
    move SV-MM to WS-TO-MM withV60Compat;
    if (WS-TO-YY < 57)
      WS-TO-CC = 20;
    else
      WS-TO-CC = 19;
    end

    if (WS-FROM-DATE > WS-TO-DATE)
      set FD0RM007.FD0RMFDT cursor, bold; /* Highlight*/
      converseLib.validationFailed(29); /* from date cannot be gt the to dt*/
      FDWREC.XXXMODID = "074";
    end
  end
  /* dsmith --------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

end // end FD0R074

// Process valid input request
Function FD0R075()
   /* ****************************************************************/
   /* Call sub-routine to find which environment the program is*/
   /* executing in...test or prod*/
   /* ****************************************************************/

  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FD0R-07501(); /* format prod jcl*/
    else
      FD0R-07502(); /* else format test jcl*/
    end
  else

    FDWREC.XXXMODID = "075"; /* module identification*/
    FDWREC.XXXMSGNO = 63; /* Error encountered with print request*/
    exit stack;
  end

end // end FD0R075

// SUMMARY DEMAND REPORT
Function FD0R080()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FD0R081(); /* Format and display the map*/

  FD0R082(); /* Check attention identifier*/

  FD0R083(); /* Reset fields to normal intensity*/

  FD0R084(); /* Verify the data that was entered*/

  FD0R085(); /* Process valid input request*/


end // end FD0R080

// Format and display the map
Function FD0R081()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FDWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FD0RM008.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FD0RM008.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FD0RM008.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FD0RM008.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FD0RM008.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FD0RM008.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FDWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FDWREC.XXXMSGNO != 0) /* Message to display*/

      if (FDWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FDWREC.XXXMSGNO);
      end /* Message number*/
    else
      FD0RM008.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FD0RM008.XXXMODID = FDWREC.XXXMODID; /* Module identification*/

    set FD0RM008 alarm; /* Indicate sound alarm*/

  end

  converse FD0RM008 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMSGNO = 0; /* Message number*/
  FDWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end FD0R081

// Check attention identifier
Function FD0R082()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FD0RW00.FD0RMSEL[8] = "C"; /* Indicate selection cancelled*/

    set FD0RM008 initial; /* m008 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FD0RW00.FD0RWSWX = "Y"; /* Indicate exit requested*/

    FD0RW00.FD0RMSEL[8] = " "; /* Reinit selection field*/

    set FD0RM008 initial; /* m008 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FDWREC.XXXMODID = "082"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FD0R082

// Reset highlighted fields
Function FD0R083()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FD0RM008.FD0RMFDT normal; /* need from date*/
  set FD0RM008.FD0RMTDT normal; /* need to date*/

  set FD0RM008.FD0RMRPT[1] normal; /* report selection fields*/
  set FD0RM008.FD0RMRPT[2] normal;
  set FD0RM008.FD0RMRPT[3] normal;
  set FD0RM008.FD0RMRPT[4] normal;

  set FD0RM008.FD0RMPFC normal; /* prop/futurec/combined flag*/

  set FD0RM008.SP1ID[1] normal; /* program ids*/
  set FD0RM008.SP1ID[2] normal;
  set FD0RM008.SP1ID[3] normal;
  set FD0RM008.SP1ID[4] normal;
  set FD0RM008.SP1ID[5] normal;
  set FD0RM008.SP1ID[6] normal;

  set FD0RM008.FD0RMYPG[1] normal; /* product group selection*/
  set FD0RM008.FD0RMYPG[2] normal;
  set FD0RM008.FD0RMYPG[3] normal;
  set FD0RM008.FD0RMYPG[4] normal;

  set FD0RM008.XPLCD normal; /* product line code*/
  set FD0RM008.XPCCD normal; /* product category code*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FD0RM008.XPLCD == "?" /* product line code*/
   || FD0RM008.XPCCD == "?") /* category code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FDWREC.XXXMODID = "083"; /* Module identification*/
      converseLib.validationFailed(49); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM008.XPLCD == "?") /* product line cd list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT LINE CODE "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM008.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM008.XPLCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM008.XPCCD == "?") /* product category list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "CATEGORY CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM008.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM008.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FDWREC.XXXMODID = "083"; /* Module identification*/
  converseLib.validationFailed(48); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FD0R083

// Verify the entered data
Function FD0R084()
   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/

  if (FD0RM008.XPCCD == " "
   || FD0RM008.XPCCD == "*")

     /* valid entry*/

  else
    XPCREC.XPCCD = FD0RM008.XPCCD;
    if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
      if (XPCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(32); /* status is inactive*/
        FDWREC.XXXMODID = "084";
        set FD0RM008.XPCCD cursor, bold;
      end
    else
      converseLib.validationFailed(38); /* invalid product category code*/
      FDWREC.XXXMODID = "084";
      set FD0RM008.XPCCD cursor, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product line code*/
   /* ------------------------------------------------------------*/

  if (FD0RM008.XPLCD == " ")
    converseLib.validationFailed(28); /* invalid or required data*/
    FDWREC.XXXMODID = "084";
    set FD0RM008.XPLCD cursor, bold;
  else
    if (FD0RM008.XPLCD != "*")
      XPLREC.XPLCD = FD0RM008.XPLCD;
      if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
        if (XPLTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          converseLib.validationFailed(32); /* inactive status*/
          FDWREC.XXXMODID = "084";
          set FD0RM008.XPLCD cursor, bold;
        end
      else
        converseLib.validationFailed(39);
        FDWREC.XXXMODID = "084";
        set FD0RM008.XPLCD cursor, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product line code and category code combination*/
    /* -db2-edit*/

   /* They must reside in the dfcast.vffxrf01 table to be valid.*/
   /* If either or both line or category code fields have*/
   /* asterisks in them, then there is no need to validate the*/
   /* cross reference between codes.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0
   && FD0RM008.XPLCD != "  ")

    if (FD0RM008.XPCCD == "*"
     || FD0RM008.XPLCD == "*")

       /* valid entry*/

    else
      if (FD0RM008.XPCCD == " ")
        FD0RM008.XPCCD = "*";
      else
        set FF2REC empty; /* clear the storage row*/
        FF2REC.XPCCD = FD0RM008.XPCCD; /* category code*/
        FF2REC.XPLCD = FD0RM008.XPLCD; /* product line code*/
        FF2REC.YPGCD = "*"; /* type group code*/
        FF2REC.YSMXDV = "*"; /* division group code*/

        FD0RS10(); /* select cursor for table*/
        FD0RS11(); /* fetch next row in cursor*/

        if (SQLCA.VAGen_SQLCODE == +100)
          converseLib.validationFailed(55);
                                   /* cat code and prod line not consistent*/
          FDWREC.XXXMODID = "084";
          set FD0RM008.XPLCD cursor, bold;
          set FD0RM008.XPCCD bold;
        end

        FD0RS12();

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product type group selections*/
   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWERF = "N";
  FD0RW00.FD0RWSLF = "N";
  FD0RW00.FD0RWIDX = 4;
  while (FD0RW00.FD0RWIDX > 0)
    if (FD0RM008.FD0RMYPG[FD0RWIDX] != " ")
      if (FD0RM008.FD0RMYPG[FD0RWIDX] == "S")
        FD0RW00.FD0RWSLF = "Y"; /* selection made*/
      else
        FD0RW00.FD0RWERF = "Y";
        converseLib.validationFailed(13); /* 's' only valid entry*/
        FDWREC.XXXMODID = "084";
        set FD0RM008.FD0RMYPG[FD0RWIDX] cursor, bold;
      end
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX - 1;
  end

  if (FD0RW00.FD0RWSLF == "N" /* no product type group selection made*/
   || FD0RW00.FD0RWERF == "Y") /* an error was detected*/
    converseLib.validationFailed(31); /* product type group entry required*/
    FDWREC.XXXMODID = "084";
    set FD0RM008.FD0RMYPG[4] bold;
    set FD0RM008.FD0RMYPG[3] bold;
    set FD0RM008.FD0RMYPG[2] bold;
    set FD0RM008.FD0RMYPG[1] cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate prop/futures/combined flag*/
   /* ------------------------------------------------------------*/

  if (FD0RM008.FD0RMPFC != "P"
   && FD0RM008.FD0RMPFC != "F"
   && FD0RM008.FD0RMPFC != "C")
    converseLib.validationFailed(28); /* required data missing/invalid*/
    FDWREC.XXXMODID = "084";
    set FD0RM008.FD0RMPFC cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate futures/product type group combination*/
   /* ------------------------------------------------------------*/

  if (FD0RM008.FD0RMPFC == "F")
    if (FD0RM008.FD0RMYPG[3] == "S"
     || FD0RM008.FD0RMYPG[4] == "S")
      if (FD0RM008.FD0RMYPG[3] == "S")
        set FD0RM008.FD0RMYPG[3] bold;
      end
      if (FD0RM008.FD0RMYPG[4] == "S")
        set FD0RM008.FD0RMYPG[4] bold;
      end
      converseLib.validationFailed(47); /* only inline or makeup valid*/
      FDWREC.XXXMODID = "084";
      set FD0RM008.FD0RMPFC cursor, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate report request selections*/
   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWERF = "N";
  FD0RW00.FD0RWSLF = "N";
  FD0RW00.FD0RWIDX = 4;
  while (FD0RW00.FD0RWIDX > 0)
    if (FD0RM008.FD0RMRPT[FD0RWIDX] != " ")
      if (FD0RM008.FD0RMRPT[FD0RWIDX] == "S")
        FD0RW00.FD0RWSLF = "Y"; /* selection made*/
      else
        FD0RW00.FD0RWERF = "Y";
        converseLib.validationFailed(13); /* 's' only valid entry*/
        FDWREC.XXXMODID = "084";
        set FD0RM008.FD0RMRPT[FD0RWIDX] cursor, bold;
      end
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX - 1;
  end

  if (FD0RW00.FD0RWSLF == "N" /* no report selection made*/
   || FD0RW00.FD0RWERF == "Y") /* an error was detected*/
    converseLib.validationFailed(30); /* report selection required*/
    FDWREC.XXXMODID = "084";
    set FD0RM008.FD0RMRPT[4] bold;
    set FD0RM008.FD0RMRPT[3] bold;
    set FD0RM008.FD0RMRPT[2] bold;
    set FD0RM008.FD0RMRPT[1] cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* if eighteen month date not initialized, create it.*/
   /* ------------------------------------------------------------*/

  if (FD0RW00.FD0RWEDT == 0) /* if eighteen month date not*/
                                   /* initialized*/

    if (XX0XW01.XX0XWZDT == 0) /* if date not formatted*/
      XX0XS01(); /* get and format current date and time*/
    end

    FD0RW00.FD0RWEYY = XX0XW01.XX0XWZYY; /* curr yy*/
    FD0RW00.FD0RWEMM = XX0XW01.XX0XWZMM; /* curr mm*/
    FD0RW00.FD0RWEMM = FD0RW00.FD0RWEMM + 18; /* add 18 months*/

    while (FD0RW00.FD0RWEMM > 12) /* until valid month*/
      FD0RW00.FD0RWEMM = FD0RW00.FD0RWEMM - 12;
      if (FD0RW00.FD0RWEYY == 99) /* if century change*/
        FD0RW00.FD0RWEYY = 0; /* move 0 to year*/
      else
        FD0RW00.FD0RWEYY = FD0RW00.FD0RWEYY + 1; /* add 1 to yy*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate to yymm date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;

  FD0RW00.FD0RWERF = "N";
  TA2REC.TA2GRGYM = FD0RM008.FD0RMTDT;

  FD0RS03(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set FD0RM008.FD0RMTDT cursor, bold; /* Highlight*/
    FD0RW00.FD0RWERF = "Y";
    converseLib.validationFailed(34); /* Indicate missing or invalid*/
    FDWREC.XXXMODID = "084";
  else
  /* IF FD0RM008.FD0RMTDT LT '8705';*/
  /* SET FD0RM008.FD0RMTDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 33 TO EZEMNO;            /* out of range*/
  /* MOVE '084' TO FDWREC.XXXMODID;*/
  /* ;*/
  /* ELSE;                           /* verify date within 18 month range*/
  /* ;*/
  /* IF FD0RW00.FD0RWEDT LT 0107;  /* century change 18 mm limit*/
  /* IF FD0RM008.FD0RMTDT LE 9912;      /* last valid 20th cent date*/
  /* MOVE TA2REC.TA2GRCYM TO FD0RW00.FD0RWTCD;*/
  /* ELSE;*/
  /* IF FD0RM008.FD0RMTDT LE FD0RW00.FD0RWEDT;*/
  /* MOVE TA2REC.TA2GRCYM TO FD0RW00.FD0RWTCD;*/
  /* ELSE;*/
  /* SET FD0RM008.FD0RMTDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 33 TO EZEMNO;      /* out of range*/
  /* MOVE '084' TO FDWREC.XXXMODID;*/
  /* END;*/
  /* END;*/
  /* ELSE;*/
    SV-DATE = FD0RM008.FD0RMTDT;
    move SV-YY to WS-FROM-YY withV60Compat;
    move SV-MM to WS-FROM-MM withV60Compat;
    if (WS-FROM-YY < 57)
      WS-FROM-CC = 20;
    else
      WS-FROM-CC = 19;
    end

    SV-DATE = FD0RW00.FD0RWEDT;
    move SV-YY to WS-TO-YY withV60Compat;
    move SV-MM to WS-TO-MM withV60Compat;
    if (WS-TO-YY < 57)
      WS-TO-CC = 20;
    else
      WS-TO-CC = 19;
    end

    if (WS-FROM-DATE < WS-TO-DATE)
  /* IF FD0RM008.FD0RMTDT LE FD0RW00.FD0RWEDT;*/
      FD0RW00.FD0RWTCD = TA2REC.TA2GRCYM;
    else
      set FD0RM008.FD0RMTDT cursor, bold; /* Highlight*/
      converseLib.validationFailed(33); /* out of range*/
      FDWREC.XXXMODID = "084";
    end
  /* END;*/
  /* END;*/
  end

   /* ------------------------------------------------------------*/
   /* validate from yymm date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;

  TA2REC.TA2GRGYM = FD0RM008.FD0RMFDT;

  FD0RS03(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set FD0RM008.FD0RMFDT cursor, bold; /* Highlight*/
    FD0RW00.FD0RWERF = "Y";
    converseLib.validationFailed(34); /* Indicate missing or invalid*/
    FDWREC.XXXMODID = "084";
  else
  /* IF FD0RM008.FD0RMFDT LT '8705';*/
  /* SET FD0RM008.FD0RMFDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 33 TO EZEMNO;            /* Indicate missing or invalid*/
  /* MOVE '084' TO FDWREC.XXXMODID;*/
  /* ELSE;*/
    FD0RW00.FD0RWFCD = TA2REC.TA2GRCYM;
  /* END;*/
  end

   /* ------------------------------------------------------------*/
   /* if date are valid verify from to dates*/
   /* ------------------------------------------------------------*/
   /* dsmith --------------------------------------------------------*/
  if (FD0RW00.FD0RWERF != "Y") /* dates are valid*/
  /* IF FD0RM008.FD0RMFDT > FD0RM008.FD0RMTDT;*/
  /* SET FD0RM008.FD0RMFDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 29 TO EZEMNO;            /* from date cannot be gt the to dt*/
  /* MOVE '084' TO FDWREC.XXXMODID;*/
  /* END;*/
    SV-DATE = FD0RM008.FD0RMFDT;
    move SV-YY to WS-FROM-YY withV60Compat;
    move SV-MM to WS-FROM-MM withV60Compat;
    if (WS-FROM-YY < 57)
      WS-FROM-CC = 20;
    else
      WS-FROM-CC = 19;
    end

    SV-DATE = FD0RM008.FD0RMTDT;
    move SV-YY to WS-TO-YY withV60Compat;
    move SV-MM to WS-TO-MM withV60Compat;
    if (WS-TO-YY < 57)
      WS-TO-CC = 20;
    else
      WS-TO-CC = 19;
    end

    if (WS-FROM-DATE > WS-TO-DATE)
      set FD0RM008.FD0RMFDT cursor, bold; /* Highlight*/
      converseLib.validationFailed(29); /* from date cannot be gt the to dt*/
      FDWREC.XXXMODID = "084";
    end
  end
   /* dsmith -----------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* validate program ids - db2 edit*/
   /* ------------------------------------------------------------*/

  if (FD0RM008.SP1ID[1] == " " /* if first id blank*/
   && FD0RM008.SP1ID[2] == " " /* and second blank*/
   && FD0RM008.SP1ID[3] == " " /* and third  blank*/
   && FD0RM008.SP1ID[4] == " " /* and fourth blank*/
   && FD0RM008.SP1ID[5] == " " /* and fifth  blank*/
   && FD0RM008.SP1ID[6] == " ") /* and sixth  blank*/

    converseLib.validationFailed(37); /* required field, please enter*/
    FDWREC.XXXMODID = "084";
    set FD0RM008.SP1ID[1] cursor, bold; /* highlight*/
    set FD0RM008.SP1ID[2] bold; /* highlight*/
    set FD0RM008.SP1ID[3] bold; /* highlight*/
    set FD0RM008.SP1ID[4] bold; /* highlight*/
    set FD0RM008.SP1ID[5] bold; /* highlight*/
    set FD0RM008.SP1ID[6] bold; /* highlight*/
  end
  if (converseVar.validationMsgNum == 0) /* no errors yet*/
    FD0RW00.FD0RWIDX = 6;
    while (FD0RW00.FD0RWIDX > 0)
      if (FD0RM008.SP1ID[FD0RWIDX] != " "
       && FD0RM008.SP1ID[FD0RWIDX] != "*")

        set SP1REC empty;
        SP1REC.SP1ID = FD0RM008.SP1ID[FD0RWIDX];

        FD0RS04(); /* select dspgm.vspgm001*/

        if (SQLCA.VAGen_SQLCODE == 0)
          FD0RW00.SP1ABRV[FD0RWIDX] = SP1REC.SP1ABRV;
        else
          converseLib.validationFailed(46); /* invalid program id entered*/
          FDWREC.XXXMODID = "084";
          set FD0RM008.SP1ID[FD0RWIDX] cursor, bold;
        end
      end
      FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX - 1;
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end


end // end FD0R084

// Process valid input request
Function FD0R085()
   /* ****************************************************************/
   /* Call sub-routine to find which environment the program is*/
   /* executing in...test or prod*/
   /* ****************************************************************/

  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FD0R-08501(); /* format prod jcl*/
    else
      FD0R-08502(); /* else format test jcl*/
    end
  else

    FDWREC.XXXMODID = "085"; /* module identification*/
    FDWREC.XXXMSGNO = 63; /* Error encountered with print request*/
    exit stack;
  end

end // end FD0R085

// PROP BOOKINGS REPORT
Function FD0R090()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FD0R091(); /* Format and display the map*/

  FD0R092(); /* Check attention identifier*/

  FD0R093(); /* Reset fields to normal intensity*/

  FD0R094(); /* Verify the data that was entered*/

  FD0R095(); /* Process valid input request*/


end // end FD0R090

// Format and display the map
Function FD0R091()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FDWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FD0RM009.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FD0RM009.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FD0RM009.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FD0RM009.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FD0RM009.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FD0RM009.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FDWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FDWREC.XXXMSGNO != 0) /* Message to display*/

      if (FDWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FDWREC.XXXMSGNO);
      end /* Message number*/
    else
      FD0RM009.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FD0RM009.XXXMODID = FDWREC.XXXMODID; /* Module identification*/

    set FD0RM009 alarm; /* Indicate sound alarm*/

  end

  converse FD0RM009 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMSGNO = 0; /* Message number*/
  FDWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end FD0R091

// Check attention identifier
Function FD0R092()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FD0RW00.FD0RMSEL[9] = "C"; /* Indicate selection cancelled*/

    set FD0RM009 initial; /* m009 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FD0RW00.FD0RWSWX = "Y"; /* Indicate exit requested*/

    FD0RW00.FD0RMSEL[9] = " "; /* Reinit selection field*/

    set FD0RM009 initial; /* m009 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FDWREC.XXXMODID = "092"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FD0R092

// Reset highlighted fields
Function FD0R093()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FD0RM009.FD0RMFDT normal; /* need from date*/
  set FD0RM009.FD0RMTDT normal; /* need to date*/

  set FD0RM009.FD0RMRPT[1] normal; /* report selection fields*/
  set FD0RM009.FD0RMRPT[2] normal;
  set FD0RM009.FD0RMRPT[3] normal;


end // end FD0R093

// Verify the entered data
Function FD0R094()

   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* validate report request selections*/
   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWERF = "N";
  FD0RW00.FD0RWSLF = "N";
  FD0RW00.FD0RWIDX = 3;
  while (FD0RW00.FD0RWIDX > 0)
    if (FD0RM009.FD0RMRPT[FD0RWIDX] != " ")
      if (FD0RM009.FD0RMRPT[FD0RWIDX] == "S")
        FD0RW00.FD0RWSLF = "Y"; /* selection made*/
      else
        FD0RW00.FD0RWERF = "Y";
        converseLib.validationFailed(13); /* 's' only valid entry*/
        FDWREC.XXXMODID = "094";
        set FD0RM009.FD0RMRPT[FD0RWIDX] cursor, bold;
      end
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX - 1;
  end

  if (FD0RW00.FD0RWSLF == "N" /* no report selection made*/
   || FD0RW00.FD0RWERF == "Y") /* an error was detected*/
    converseLib.validationFailed(30); /* report selection required*/
    FDWREC.XXXMODID = "094";
    set FD0RM009.FD0RMRPT[3] bold;
    set FD0RM009.FD0RMRPT[2] bold;
    set FD0RM009.FD0RMRPT[1] cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate to mmddyy date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;

  FD0RW00.FD0RWERF = "N";
  TA2REC.TA2GRGA = FD0RM009.FD0RMTDT;
  FD0RW00.FD0RWWDT = FD0RM009.FD0RMTDT; /* work date mmddyy*/
  FD0RW00.FD0RWYYY = FD0RW00.FD0RWWYY; /* work date yymm*/
  FD0RW00.FD0RWMMM = FD0RW00.FD0RWWMM; /* work date yymm*/

  FD0RS05(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set FD0RM009.FD0RMTDT cursor, bold; /* Highlight*/
    FD0RW00.FD0RWERF = "Y";
    converseLib.validationFailed(34); /* Indicate missing or invalid*/
    FDWREC.XXXMODID = "094";
  else
  /* IF FD0RW00.FD0RWWYM LT '9004';*/
  /* SET FD0RM009.FD0RMTDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 33 TO EZEMNO;            /* out of range*/
  /* MOVE '094' TO FDWREC.XXXMODID;*/
  /* ELSE;*/
    FD0RW00.FD0RWTOD = TA2REC.TA2GRGGN;
  /* END;*/
  end

   /* get previous day's date -- to date cannot be*/
   /* greater than previous day's date.*/

  if (XX0XW01.XX0XWZDT == 0) /* if date not formatted*/
    XX0XS01(); /* get and format current date*/
  end

  /* FD0RW00.FD0RWPDT = 0;          /* if previous date not created*/
                           /* create it*/
  set TA2REC empty;

  FD0RW00.FD0RWPMM = XX0XW01.XX0XWZMM; /* move month*/
  FD0RW00.FD0RWPDD = XX0XW01.XX0XWZDD; /* move day*/
  FD0RW00.FD0RWPYY = XX0XW01.XX0XWZYY; /* move year*/
  TA2REC.TA2GRGE = FD0RW00.FD0RWPDT; /* greg date*/
  TA2REC.TA2GRTYP = "E"; /* yymmdd type*/
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2DYAOD = -1;

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0) /* successful call*/
    FD0RW00.FD0RWFOD = TA2REC.TA2GRGGN;
  /* MOVE TA2REC.TA2GRGE TO FD0RW00.FD0RWPDT; /* move previous date*/
  else
    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

    TA1REC.TA1FUNC = "RETN"; /* termination function*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1LOC = "FD0R094";

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnostics routine*/

    FDWREC.XXXMODID = "094"; /* module identification*/
    converseLib.validationFailed(10);

    exit stack;

  end
  /* D;*/

  FD0RW00.FD0RWHDT = FD0RM009.FD0RMTDT; /* move dt to hold date*/
  FD0RW00.FD0RWKYY = FD0RW00.FD0RWHYY; /* move to work yy*/
  FD0RW00.FD0RWKMM = FD0RW00.FD0RWHMM; /* move to work mm*/
  FD0RW00.FD0RWKDD = FD0RW00.FD0RWHDD; /* move to work dd*/

  /* FD0RW00.FD0RWKDT GT FD0RW00.FD0RWPDT; /* date > prev date*/
  if (FD0RW00.FD0RWTOD > FD0RW00.FD0RWFOD) /* date > prev date*/
    set FD0RM009.FD0RMTDT cursor, bold; /* Highlight*/
    converseLib.validationFailed(34); /* invalid date entered*/
    FDWREC.XXXMODID = "094";
  end

   /* ------------------------------------------------------------*/
   /* validate from mmddyy date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;

  TA2REC.TA2GRGA = FD0RM009.FD0RMFDT;
  FD0RW00.FD0RWWDT = FD0RM009.FD0RMFDT; /* work date mmddyy*/
  FD0RW00.FD0RWYYY = FD0RW00.FD0RWWYY; /* work date yymm*/
  FD0RW00.FD0RWMMM = FD0RW00.FD0RWWMM; /* work date yymm*/

  FD0RS05(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set FD0RM009.FD0RMFDT cursor, bold; /* Highlight*/
    FD0RW00.FD0RWERF = "Y";
    converseLib.validationFailed(34); /* Indicate missing or invalid*/
    FDWREC.XXXMODID = "094";
  else
  /* IF FD0RW00.FD0RWWYM LT '9004';*/
  /* SET FD0RM009.FD0RMFDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 33 TO EZEMNO;            /* Indicate missing or invalid*/
  /* MOVE '094' TO FDWREC.XXXMODID;*/
  /* ELSE;*/
    FD0RW00.FD0RWFOD = TA2REC.TA2GRGGN;
  /* END;*/
  end

   /* ------------------------------------------------------------*/
   /* if date are valid verify from to dates*/
   /* ------------------------------------------------------------*/

  if (FD0RW00.FD0RWERF != "Y") /* dates are valid*/
    if (FD0RW00.FD0RWFOD > FD0RW00.FD0RWTOD)
      set FD0RM009.FD0RMFDT cursor, bold; /* Highlight*/
      converseLib.validationFailed(29); /* from date cannot be gt the to dt*/
      FDWREC.XXXMODID = "094";
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end


end // end FD0R094

// Process valid input request
Function FD0R095()
   /* ****************************************************************/
   /* Call sub-routine to find which environment the program is*/
   /* executing in...test or prod*/
   /* ****************************************************************/

  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FD0R-09501(); /* format prod jcl*/
    else
      FD0R-09502(); /* else format test jcl*/
    end
  else

    FDWREC.XXXMODID = "095"; /* module identification*/
    FDWREC.XXXMSGNO = 63; /* Error encountered with print request*/
    exit stack;
  end

end // end FD0R095

// SUMMARY SHIPMENTS REPORT
Function FD0R100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FD0R101(); /* Format and display the map*/

  FD0R102(); /* Check attention identifier*/

  FD0R103(); /* Reset fields to normal intensity*/

  FD0R104(); /* Verify the data that was entered*/

  FD0R105(); /* Process valid input request*/


end // end FD0R100

// Format and display the map
Function FD0R101()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FDWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    FD0RM010.FD0RMXDV[1] = "S"; /* Select Domestic*/
    FD0RM010.FD0RMXDV[2] = "S"; /* Select Nil*/
    FD0RM010.FD0RMXDV[3] = "S"; /* Select Promo*/
  end

  FD0RM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FD0RM010.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FD0RM010.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FD0RM010.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FD0RM010.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FD0RM010.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FDWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FDWREC.XXXMSGNO != 0) /* Message to display*/

      if (FDWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FDWREC.XXXMSGNO);
      end /* Message number*/
    else
      FD0RM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FD0RM010.XXXMODID = FDWREC.XXXMODID; /* Module identification*/

    set FD0RM010 alarm; /* Indicate sound alarm*/

  end

  converse FD0RM010 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMSGNO = 0; /* Message number*/
  FDWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end FD0R101

// Check attention identifier
Function FD0R102()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FD0RW00.FD0RMSEL[10] = "C"; /* Indicate selection cancelled*/

    set FD0RM010 initial; /* m010 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    /* bgn tcs*/

    FD0RW00.FD0RWID2 = 0; /**/

    /* end tcs*/

    FD0RW00.FD0RWSWX = "Y"; /* Indicate exit requested*/

    FD0RW00.FD0RMSEL[10] = " "; /* Reinit selection field*/

    set FD0RM010 initial; /* m010 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FDWREC.XXXMODID = "102"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FD0R102

// Reset highlighted fields
Function FD0R103()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FD0RM010.FD0RMFYY normal; /* fiscal year*/

  set FD0RM010.FD0RMRPT[1] normal; /* report selection fields*/
  set FD0RM010.FD0RMRPT[2] normal;
  set FD0RM010.FD0RMRPT[3] normal;
  set FD0RM010.FD0RMRPT[4] normal;
  set FD0RM010.FD0RMRPT[5] normal;

  set FD0RM010.FD0RMPFC normal; /* report type prop/futures/combined*/

  set FD0RM010.FD0RMYPG[1] normal; /* product group selection*/
  set FD0RM010.FD0RMYPG[2] normal;
  set FD0RM010.FD0RMYPG[3] normal;
  set FD0RM010.FD0RMYPG[4] normal;

  set FD0RM010.FD0RMXDV[1] normal;
  set FD0RM010.FD0RMXDV[2] normal;
  set FD0RM010.FD0RMXDV[3] normal;

  set FD0RM010.XPLCD normal; /* product line code*/
  set FD0RM010.XPCCD normal; /* product category code*/
  set FD0RM010.SYBSTGNB normal; /* style group number*/
  set FD0RM010.SY1STNBR normal; /* style number*/
  set FD0RM010.SY2CLRID normal; /* color code id*/
  set FD0RM010.XDMCD normal; /* dimension code*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FD0RM010.XPLCD == "?" /* product line code*/
   || FD0RM010.XPCCD == "?" /* category code*/
   || FD0RM010.XDMCD == "?") /* dimension code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FDWREC.XXXMODID = "103"; /* Module identification*/
      converseLib.validationFailed(49); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM010.XPLCD == "?") /* product line cd list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT LINE CODE "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM010.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM010.XPLCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM010.XPCCD == "?") /* product category list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "CATEGORY CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM010.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM010.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of dimension codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM010.XDMCD == "?") /* product category list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "DIMENSION CODES"; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDM01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM010.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM010.XDMCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FDWREC.XXXMODID = "103"; /* Module identification*/
  converseLib.validationFailed(48); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FD0R103

// Verify the entered data
Function FD0R104()
    /* ------------------------------------------------------------*/
    /* verify that atleast one selection was made to the add'l data*/
    /* selection fields.*/
    /* ------------------------------------------------------------*/

  if (FD0RM010.SY1STNBR == " "
   && FD0RM010.SYBSTGNB == " "
   && FD0RM010.XPLCD == " "
   && FD0RM010.XPCCD == " ")
    converseLib.validationFailed(37); /* required entry*/
    FDWREC.XXXMODID = "104";
    set FD0RM010.XPLCD cursor, bold;
    set FD0RM010.XPCCD bold;
    set FD0RM010.SYBSTGNB bold;
    set FD0RM010.SY1STNBR bold;
    set FD0RM010.SY2CLRID bold;
    set FD0RM010.XDMCD bold;
  end
    /* ------------------------------------------------------------*/
    /* validate style-color-dim codes*/
    /* ------------------------------------------------------------*/

  if (FD0RM010.SY1STNBR == "*"
   || FD0RM010.SY1STNBR == " ")
      /* valid entry*/
  else
    set PG2REC empty;
    PG2REC.XGPCD = COMMAREA.XGPCD;
    PG2REC.SY1STNBR = FD0RM010.SY1STNBR;
    PG2REC.SY2CLRID = FD0RM010.SY2CLRID;
    PG2REC.XDMCD = FD0RM010.XDMCD;
    FD0RS01(); /* validate product number*/
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(35); /* invalid product number*/
      FDWREC.XXXMODID = "104";
      set FD0RM010.SY1STNBR cursor, bold;
      set FD0RM010.SY2CLRID bold;
      set FD0RM010.XDMCD bold;
    end
  end

    /* ------------------------------------------------------------*/
    /* validate style group number*/
    /* ------------------------------------------------------------*/

  if (FD0RM010.SYBSTGNB == "*"
   || FD0RM010.SYBSTGNB == " ")
      /* valid entry*/
  else
    set SYBREC empty;
    SYBREC.SYBSTGNB = FD0RM010.SYBSTGNB;
    FD0RS02(); /* validate style group number*/
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(36); /* invalid style group number*/
      FDWREC.XXXMODID = "104";
      set FD0RM010.SYBSTGNB cursor, bold;
    end
  end

    /* ------------------------------------------------------------*/
    /* validate product category code*/
    /* ------------------------------------------------------------*/

  if (FD0RM010.XPCCD == "*"
   || FD0RM010.XPCCD == " ")
      /* valid entry*/
  else
    XPCREC.XPCCD = FD0RM010.XPCCD;
    if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
      if (XPCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(32); /* status is inactive*/
        FDWREC.XXXMODID = "104";
        set FD0RM010.XPCCD cursor, bold;
      end
    else
      converseLib.validationFailed(38); /* invalid product category code*/
      FDWREC.XXXMODID = "104";
      set FD0RM010.XPCCD cursor, bold;
    end
  end

    /* ------------------------------------------------------------*/
    /* validate product line code*/
    /* ------------------------------------------------------------*/

  if (FD0RM010.XPLCD == "*"
   || FD0RM010.XPLCD == " ")
    /* valid entry*/
  else
    XPLREC.XPLCD = FD0RM010.XPLCD;
    if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
      if (XPLTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(32); /* inactive status*/
        FDWREC.XXXMODID = "104";
        set FD0RM010.XPLCD cursor, bold;
      end
    else
      converseLib.validationFailed(39); /* invalid product line code*/
      FDWREC.XXXMODID = "104";
      set FD0RM010.XPLCD cursor, bold;
    end
  end

    /* ------------------------------------------------------------*/
    /* validate product line code and category code combination*/
    /* -db2-edit*/
    /* They must reside in the dfcast.vffxrf01 table to be valid.*/
    /* If either or both line or category code fields have*/
    /* asterisks in them, then there is no need to validate the*/
    /* cross reference between codes.*/
    /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0
   && FD0RM010.XPLCD != "  ")

    if (FD0RM010.XPCCD == "*"
     || FD0RM010.XPLCD == "*")
        /* valid entry*/
    else
      if (FD0RM010.XPCCD == " ")
        FD0RM010.XPCCD = "*";
      else
        set FF2REC empty; /* clear the storage row*/
        FF2REC.XPCCD = FD0RM010.XPCCD; /* category code*/
        FF2REC.XPLCD = FD0RM010.XPLCD; /* product line code*/
        FF2REC.YPGCD = "*"; /* type group code*/
        FF2REC.YSMXDV = "*"; /* division group code*/

        FD0RS10(); /* select cursor for table*/
        FD0RS11(); /* fetch row in cursor*/

        if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/
          converseLib.validationFailed(55);
                                   /* cat code and prod line not consistent*/
          FDWREC.XXXMODID = "104";
          set FD0RM010.XPLCD cursor, bold;
          set FD0RM010.XPCCD bold;
        end

        FD0RS12(); /* close cursor*/

      end
    end
  end

    /* ------------------------------------------------------------*/
    /* validate product type group selections*/
    /* ------------------------------------------------------------*/

  FD0RW00.FD0RWERF = "N";
  FD0RW00.FD0RWSLF = "N";
  FD0RW00.FD0RWIDX = 4;
  while (FD0RW00.FD0RWIDX > 0)
    if (FD0RM010.FD0RMYPG[FD0RWIDX] != " ")
      if (FD0RM010.FD0RMYPG[FD0RWIDX] == "S")
        FD0RW00.FD0RWSLF = "Y"; /* selection made*/
      else
        FD0RW00.FD0RWERF = "Y";
        converseLib.validationFailed(13); /* 's' only valid entry*/
        FDWREC.XXXMODID = "104";
        set FD0RM010.FD0RMYPG[FD0RWIDX] cursor, bold;
      end
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX - 1;
  end

  if (FD0RW00.FD0RWSLF == "N" /* no product type group selection made*/
   || FD0RW00.FD0RWERF == "Y") /* an error was detected*/
    converseLib.validationFailed(31);
                                   /* product type group selection required*/
    FDWREC.XXXMODID = "104";
    set FD0RM010.FD0RMYPG[4] bold;
    set FD0RM010.FD0RMYPG[3] bold;
    set FD0RM010.FD0RMYPG[2] bold;
    set FD0RM010.FD0RMYPG[1] cursor, bold;
  end

    /* ------------------------------------------------------------*/
    /* validate product division selections*/
    /* ------------------------------------------------------------*/

  if (FD0RM010.FD0RMXDV[1] == " "
   && FD0RM010.FD0RMXDV[2] == " "
   && FD0RM010.FD0RMXDV[3] == " ") /* AT LEAST ONE MUST BE ENTERED*/
    converseLib.validationFailed(37);
    FDWREC.XXXMODID = "104";
    set FD0RM010.FD0RMXDV[1] cursor, bold;
    set FD0RM010.FD0RMXDV[2] bold;
    set FD0RM010.FD0RMXDV[3] bold;
  end

    /* ------------------------------------------------------------*/
    /* validate prop/futures/combined report flag*/
    /* ------------------------------------------------------------*/

  if (FD0RM010.FD0RMPFC != "P"
   && FD0RM010.FD0RMPFC != "F"
   && FD0RM010.FD0RMPFC != "C")
    converseLib.validationFailed(28); /* required data missing/invalid*/
    FDWREC.XXXMODID = "104";
    set FD0RM010.FD0RMPFC cursor, bold;
  end

    /* ------------------------------------------------------------*/
    /* validate futures flag/product type group combination*/
    /* ------------------------------------------------------------*/

  if (FD0RM010.FD0RMPFC == "F")
    if (FD0RM010.FD0RMYPG[3] == "S"
     || FD0RM010.FD0RMYPG[4] == "S")
      if (FD0RM010.FD0RMYPG[3] == "S")
        set FD0RM010.FD0RMYPG[3] bold;
      end
      if (FD0RM010.FD0RMYPG[4] == "S")
        set FD0RM010.FD0RMYPG[4] bold;
      end
      converseLib.validationFailed(47); /* required data missing/invalid*/
      FDWREC.XXXMODID = "104";
      set FD0RM010.FD0RMPFC cursor, bold;
    end
  end

    /* ------------------------------------------------------------*/
    /* validate report request selections*/
    /* ------------------------------------------------------------*/

  FD0RW00.FD0RWERF = "N";
  FD0RW00.FD0RWSLF = "N";
  FD0RW00.FD0RWIDX = 5;
  while (FD0RW00.FD0RWIDX > 0)
    if (FD0RM010.FD0RMRPT[FD0RWIDX] != " ")
      if (FD0RM010.FD0RMRPT[FD0RWIDX] == "S")
        FD0RW00.FD0RWSLF = "Y"; /* selection made*/
      else
        FD0RW00.FD0RWERF = "Y";
        converseLib.validationFailed(13); /* 's' only valid entry*/
        FDWREC.XXXMODID = "104";
        set FD0RM010.FD0RMRPT[FD0RWIDX] cursor, bold;
      end
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX - 1;
  end

    /* bgn tcs*/
  if (FD0RM010.FD0RMFYY not modified
   && FD0RW00.FD0RWID2 == 0)
    set FD0RM010.FD0RMFYY cursor, bold;
    converseLib.validationFailed(65);
    FDWREC.XXXMODID = "104";
  else
    FD0RW00.FD0RWID2 = FD0RW00.FD0RWID2 + 1;
    if (FD0RW00.FD0RWSLF == "N" /* no report selection made*/
     || FD0RW00.FD0RWERF == "Y") /* an error was detected*/
      converseLib.validationFailed(30); /* report selection required*/
      FDWREC.XXXMODID = "104";
      set FD0RM010.FD0RMRPT[5] bold;
      set FD0RM010.FD0RMRPT[4] bold;
      set FD0RM010.FD0RMRPT[3] bold;
      set FD0RM010.FD0RMRPT[2] bold;
      set FD0RM010.FD0RMRPT[1] cursor, bold;
    end
  end
   /* end tcs*/
    /* ------------------------------------------------------------*/
    /* validate relationship between report selection and additional*/
    /* data selections.*/
    /* ------------------------------------------------------------*/

  if (FD0RM010.FD0RMRPT[1] == "S") /* type rept selected*/
    if (FD0RM010.XPLCD == " ")
        /* valid entry*/
    else
      if (FD0RM010.XPLCD == "*")
        /* valid entry*/
      else
        converseLib.validationFailed(60); /* inconsistent relationship*/
        FDWREC.XXXMODID = "104";
        set FD0RM010.FD0RMRPT[1] cursor, bold;
        set FD0RM010.XPLCD bold;
      end
    end

    if (FD0RM010.XPCCD == " ")
      /* valid entry*/
    else
      if (FD0RM010.XPCCD == "*")
        /* valid entry*/
      else
        converseLib.validationFailed(60); /* inconsistent relationship*/
        FDWREC.XXXMODID = "104";
        set FD0RM010.FD0RMRPT[1] cursor, bold;
        set FD0RM010.XPCCD bold;
      end
    end

    if (FD0RM010.SYBSTGNB == " ") /* style grp nbr*/
      /* valid entry*/
    else
      if (FD0RM010.SYBSTGNB == "*") /* style grp nbr*/
        /* valid entry*/
      else
        converseLib.validationFailed(60); /* inconsistent relationship*/
        FDWREC.XXXMODID = "104";
        set FD0RM010.FD0RMRPT[1] cursor, bold;
        set FD0RM010.SYBSTGNB bold;
      end
    end

    if (FD0RM010.SY1STNBR == " ") /* style nbr*/
      /* valid entry*/
    else
      if (FD0RM010.SY1STNBR == "*") /* style nbr*/
        /* valid entry*/
      else
        converseLib.validationFailed(60); /* inconsistent relationship*/
        FDWREC.XXXMODID = "104";
        set FD0RM010.FD0RMRPT[1] cursor, bold;
        set FD0RM010.SY1STNBR bold;
        set FD0RM010.SY2CLRID bold;
        set FD0RM010.XDMCD bold;
      end
    end
  end


  if (FD0RM010.FD0RMRPT[2] == "S") /* line rept selected*/
    if (FD0RM010.XPCCD == " ")
      /* valid entry*/
    else
      if (FD0RM010.XPCCD == "*")
        /* valid entry*/
      else
        converseLib.validationFailed(60); /* inconsistent relationship*/
        FDWREC.XXXMODID = "104";
        set FD0RM010.FD0RMRPT[2] cursor, bold;
        set FD0RM010.XPCCD bold;
      end
    end

    if (FD0RM010.SYBSTGNB == " ") /* style grp nbr*/
      /* valid entry*/
    else
      if (FD0RM010.SYBSTGNB == "*") /* style grp nbr*/
        /* valid entry*/
      else
        converseLib.validationFailed(60); /* inconsistent relationship*/
        FDWREC.XXXMODID = "104";
        set FD0RM010.FD0RMRPT[2] cursor, bold;
        set FD0RM010.SYBSTGNB bold;
      end
    end

    if (FD0RM010.SY1STNBR == " ") /* style nbr*/
      /* valid entry*/
    else
      if (FD0RM010.SY1STNBR == "*") /* style nbr*/
        /* valid entry*/
      else
        converseLib.validationFailed(60); /* inconsistent relationship*/
        FDWREC.XXXMODID = "104";
        set FD0RM010.FD0RMRPT[2] cursor, bold;
        set FD0RM010.SY1STNBR bold;
        set FD0RM010.SY2CLRID bold;
        set FD0RM010.XDMCD bold;
      end
    end
  end


  if (FD0RM010.FD0RMRPT[3] == "S") /* catg rept selected*/
    if (FD0RM010.SYBSTGNB == " ") /* style grp nbr*/
      /* valid entry*/
    else
      if (FD0RM010.SYBSTGNB == "*") /* style grp nbr*/
        /* valid entry*/
      else
        converseLib.validationFailed(60); /* inconsistent relationship*/
        FDWREC.XXXMODID = "104";
        set FD0RM010.FD0RMRPT[3] cursor, bold;
        set FD0RM010.SYBSTGNB bold;
      end
    end

    if (FD0RM010.SY1STNBR == " ") /* style nbr*/
      /* valid entry*/
    else
      if (FD0RM010.SY1STNBR == "*") /* style nbr*/
        /* valid entry*/
      else
        converseLib.validationFailed(60); /* inconsistent relationship*/
        FDWREC.XXXMODID = "104";
        set FD0RM010.FD0RMRPT[3] cursor, bold;
        set FD0RM010.SY1STNBR bold;
        set FD0RM010.SY2CLRID bold;
        set FD0RM010.XDMCD bold;
      end
    end
  end


  if (FD0RM010.FD0RMRPT[4] == "S") /* sty grp rept selected*/
    if (FD0RM010.SY1STNBR == " ") /* style nbr*/
      /* valid entry*/
    else
      if (FD0RM010.SY1STNBR == "*") /* style nbr*/
        /* valid entry*/
      else
        converseLib.validationFailed(60); /* inconsistent relationship*/
        FDWREC.XXXMODID = "104";
        set FD0RM010.FD0RMRPT[4] cursor, bold;
        set FD0RM010.SY1STNBR bold;
        set FD0RM010.SY2CLRID bold;
        set FD0RM010.XDMCD bold;
      end
    end
  end

    /* ------------------------------------------------------------*/
    /* Determine report beginning and ending dates.  The report*/
    /* dates are fixed, the beginning date will always be March and*/
    /* the ending date will be August.  The report displays a fiscal*/
    /* year plus or minus 3 months.*/
    /* ------------------------------------------------------------*/

  set TA2REC empty;

  FD0RW00.FD0RWFMM = 03; /* fiscal start month 'june'*/
  FD0RW00.FD0RWFYY = FD0RM010.FD0RMFYY;
  if (FD0RW00.FD0RWFYY == 00)
    FD0RW00.FD0RWFYY = 99;
  else
    FD0RW00.FD0RWFYY = FD0RM010.FD0RMFYY - 1;
  end

  TA2REC.TA2GRGYM = FD0RW00.FD0RWFYM;

  FD0RS03(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set FD0RM010.FD0RMFYY cursor, bold;
    converseLib.validationFailed(34); /* Indicate missing or invalid*/
    FDWREC.XXXMODID = "104";
  else
    FD0RW00.FD0RWFCD = TA2REC.TA2GRCYM;
  end


  set TA2REC empty;

  FD0RW00.FD0RWTMM = 08; /* fiscal end month 'may'*/
  FD0RW00.FD0RWTYY = FD0RM010.FD0RMFYY;
  TA2REC.TA2GRGYM = FD0RW00.FD0RWTYM;

  FD0RS03(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set FD0RM010.FD0RMFYY cursor, bold; /* Highlight*/
    converseLib.validationFailed(34); /* Indicate missing or invalid*/
    FDWREC.XXXMODID = "104";
  else
    FD0RW00.FD0RWTCD = TA2REC.TA2GRCYM;
  end


  if (converseVar.validationMsgNum != 0)
    exit stack;
  end


end // end FD0R104

// Process valid input request
Function FD0R105()
   /* ****************************************************************/
   /* Call sub-routine to find which environment the program is*/
   /* executing in...test or prod*/
   /* ****************************************************************/

  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FD0R-10501(); /* format prod jcl*/
    else
      FD0R-10502(); /* else format test jcl*/
    end
  else

    FDWREC.XXXMODID = "105"; /* module identification*/
    FDWREC.XXXMSGNO = 63; /* Error encountered with print request*/
    exit stack;
  end
   /* bgn tcs*/

  FD0RW00.FD0RWID2 = 0; /**/

   /* end tcs*/

end // end FD0R105

// PAST DUE ORDER REPORT
Function FD0R110()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FD0R111(); /* Format and display the map*/

  FD0R112(); /* Check attention identifier*/

  FD0R113(); /* Reset fields to normal intensity*/

  FD0R114(); /* Verify the data that was entered*/

  FD0R115(); /* Process valid input request*/


end // end FD0R110

// Format and display the map
Function FD0R111()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FDWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FD0RM011.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FD0RM011.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FD0RM011.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FD0RM011.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FD0RM011.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FD0RM011.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FDWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FDWREC.XXXMSGNO != 0) /* Message to display*/

      if (FDWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FDWREC.XXXMSGNO);
      end /* Message number*/
    else
      FD0RM011.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FD0RM011.XXXMODID = FDWREC.XXXMODID; /* Module identification*/

    set FD0RM011 alarm; /* Indicate sound alarm*/

  end

  converse FD0RM011 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMSGNO = 0; /* Message number*/
  FDWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end FD0R111

// Check attention identifier
Function FD0R112()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FD0RW00.FD0RMSEL[11] = "C"; /* Indicate selection cancelled*/

    set FD0RM011 initial; /* m011 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FD0RW00.FD0RWSWX = "Y"; /* Indicate exit requested*/

    FD0RW00.FD0RMSEL[11] = " "; /* Reinit selection field*/

    set FD0RM011 initial; /* m011 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FDWREC.XXXMODID = "112"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FD0R112

// Reset highlighted fields
Function FD0R113()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FD0RM011.FD0RMFDT normal; /* need from date*/
  set FD0RM011.FD0RMTDT normal; /* need to date*/

  set FD0RM011.FD0RMPFC normal; /* prop/futures/combined flag*/

  set FD0RM011.FD0RMYPG[1] normal; /* product group selection*/
  set FD0RM011.FD0RMYPG[2] normal;
  set FD0RM011.FD0RMYPG[3] normal;
  set FD0RM011.FD0RMYPG[4] normal;


end // end FD0R113

// Verify the entered data
Function FD0R114()

   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* validate product type group selections*/
   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWERF = "N";
  FD0RW00.FD0RWSLF = "N";
  FD0RW00.FD0RWIDX = 4;
  while (FD0RW00.FD0RWIDX > 0)
    if (FD0RM011.FD0RMYPG[FD0RWIDX] != " ")
      if (FD0RM011.FD0RMYPG[FD0RWIDX] == "S")
        FD0RW00.FD0RWSLF = "Y"; /* selection made*/
      else
        FD0RW00.FD0RWERF = "Y";
        converseLib.validationFailed(13); /* 's' only valid entry*/
        FDWREC.XXXMODID = "114";
        set FD0RM011.FD0RMYPG[FD0RWIDX] cursor, bold;
      end
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX - 1;
  end

  if (FD0RW00.FD0RWSLF != "Y" /* no product type group selection made*/
   && FD0RW00.FD0RWERF != "Y")
    converseLib.validationFailed(31);
    FDWREC.XXXMODID = "114";
    set FD0RM011.FD0RMYPG[4] bold;
    set FD0RM011.FD0RMYPG[3] bold;
    set FD0RM011.FD0RMYPG[2] bold;
    set FD0RM011.FD0RMYPG[1] cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate prop/futures/combined  flag*/
   /* ------------------------------------------------------------*/

  if (FD0RM011.FD0RMPFC != "P"
   && FD0RM011.FD0RMPFC != "F"
   && FD0RM011.FD0RMPFC != "C")
    converseLib.validationFailed(28); /* required data missing/invalid*/
    FDWREC.XXXMODID = "114";
    set FD0RM011.FD0RMPFC cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate futures flag/product type group combination*/
   /* ------------------------------------------------------------*/

  if (FD0RM011.FD0RMPFC == "F")
    if (FD0RM011.FD0RMYPG[3] == "S"
     || FD0RM011.FD0RMYPG[4] == "S")
      if (FD0RM011.FD0RMYPG[3] == "S")
        set FD0RM011.FD0RMYPG[3] bold;
      end
      if (FD0RM011.FD0RMYPG[4] == "S")
        set FD0RM011.FD0RMYPG[4] bold;
      end
      converseLib.validationFailed(47); /* only inline ot makeup valid*/
      FDWREC.XXXMODID = "114";
      set FD0RM011.FD0RMPFC cursor, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate to yymm date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;

  FD0RW00.FD0RWERF = "N";
  TA2REC.TA2GRGYM = FD0RM011.FD0RMTDT;

  FD0RS03(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set FD0RM011.FD0RMTDT cursor, bold; /* Highlight*/
    FD0RW00.FD0RWERF = "Y";
    converseLib.validationFailed(34); /* Indicate missing or invalid*/
    FDWREC.XXXMODID = "114";
  else
  /* IF FD0RM011.FD0RMTDT LT '8705';*/
  /* SET FD0RM011.FD0RMTDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 33 TO EZEMNO;            /* out of range*/
  /* MOVE '114' TO FDWREC.XXXMODID;*/
  /* ELSE;*/
    if (FD0RW00.FD0RWBCO == 0) /* if billing cutoff not initialized*/
      FD0RS20(); /* get billing cutoff;*/
    end

    FD0RW00.FD0RWMMM = FD0RW00.FD0RWBCM; /* work month*/
    FD0RW00.FD0RWYYY = FD0RW00.FD0RWBCY; /* work year*/

    if (FD0RW00.FD0RWBCD <= 26) /* if 26th or before*/
      FD0RW00.FD0RWMMM = FD0RW00.FD0RWMMM - 1; /* subtract 1 month*/
      if (FD0RW00.FD0RWMMM == 0) /* if year wraparound*/
        FD0RW00.FD0RWMMM = 12;
        if (FD0RW00.FD0RWYYY == 0) /* first 20th cc year*/
          FD0RW00.FD0RWYYY = 99;
        else
          FD0RW00.FD0RWYYY = FD0RW00.FD0RWYYY - 1;
        end
      end
    end

    if (FD0RM011.FD0RMTDT > FD0RW00.FD0RWWYM) /* if date entered larger*/

      set FD0RM011.FD0RMTDT cursor, bold; /* highlight*/
      converseLib.validationFailed(34);
      FDWREC.XXXMODID = "114";

    else

      FD0RW00.FD0RWTCD = TA2REC.TA2GRCYM;

  /* END;*/
    end
  end

   /* ------------------------------------------------------------*/
   /* validate from yymm date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty;

  TA2REC.TA2GRGYM = FD0RM011.FD0RMFDT;

  FD0RS03(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set FD0RM011.FD0RMFDT cursor, bold; /* Highlight*/
    FD0RW00.FD0RWERF = "Y";
    converseLib.validationFailed(34); /* Indicate missing or invalid*/
    FDWREC.XXXMODID = "114";
  else
  /* IF FD0RM011.FD0RMFDT LT '8705';*/
  /* SET FD0RM011.FD0RMFDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 33 TO EZEMNO;            /* Indicate missing or invalid*/
  /* MOVE '114' TO FDWREC.XXXMODID;*/
  /* ELSE;*/
    FD0RW00.FD0RWFCD = TA2REC.TA2GRCYM;
  /* END;*/
  end

   /* ------------------------------------------------------------*/
   /* if date are valid verify from to dates*/
   /* ------------------------------------------------------------*/
   /* dsmith -------------------------------------------------------*/
  if (FD0RW00.FD0RWERF != "Y") /* dates are valid*/
  /* IF FD0RM011.FD0RMFDT > FD0RM011.FD0RMTDT;*/
  /* SET FD0RM011.FD0RMFDT CURSOR,BRIGHT; /* Highlight*/
  /* MOVE 29 TO EZEMNO;            /* from date cannot be gt the to dt*/
  /* MOVE '114' TO FDWREC.XXXMODID;*/
  /* END;*/
    SV-DATE = FD0RM011.FD0RMFDT;
    move SV-YY to WS-FROM-YY withV60Compat;
    move SV-MM to WS-FROM-MM withV60Compat;
    if (WS-FROM-YY < 57)
      WS-FROM-CC = 20;
    else
      WS-FROM-CC = 19;
    end

    SV-DATE = FD0RM011.FD0RMTDT;
    move SV-YY to WS-TO-YY withV60Compat;
    move SV-MM to WS-TO-MM withV60Compat;
    if (WS-TO-YY < 57)
      WS-TO-CC = 20;
    else
      WS-TO-CC = 19;
    end

    if (WS-FROM-DATE > WS-TO-DATE)
      set FD0RM011.FD0RMFDT cursor, bold; /* Highlight*/
      converseLib.validationFailed(29); /* from date cannot be gt the to dt*/
      FDWREC.XXXMODID = "114";
    end
  end
  /* dsmith -----------------------------------------------------*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end


end // end FD0R114

// Process valid input request
Function FD0R115()
   /* ****************************************************************/
   /* Call sub-routine to find which environment the program is*/
   /* executing in...test or prod*/
   /* ****************************************************************/

  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FD0R-11501(); /* format prod jcl*/
    else
      FD0R-11502(); /* else format test jcl*/
    end
  else

    FDWREC.XXXMODID = "115"; /* module identification*/
    FDWREC.XXXMSGNO = 63; /* Error encountered with print request*/
    exit stack;
  end

end // end FD0R115

// actual receipts REPORTs
Function FD0R120()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FD0R121(); /* Format and display the map*/

  FD0R122(); /* Check attention identifier*/

  FD0R123(); /* Reset fields to normal intensity*/

  FD0R124(); /* Verify the data that was entered*/

  FD0R125(); /* Process valid input request*/


end // end FD0R120

// Format and display the map
Function FD0R121()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FDWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FD0RM012.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FD0RM012.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FD0RM012.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FD0RM012.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FD0RM012.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FD0RM012.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* Reset default selections.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    FD0RM012.FD0RMXDV[1] = "S";
    FD0RM012.FD0RMXDV[2] = "S";
    FD0RM012.FD0RMXDV[3] = "S";
  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FDWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FDWREC.XXXMSGNO != 0) /* Message to display*/

      if (FDWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FDWREC.XXXMSGNO);
      end /* Message number*/
    else
      FD0RM012.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FD0RM010.XXXMODID = FDWREC.XXXMODID; /* Module identification*/

    set FD0RM012 alarm; /* Indicate sound alarm*/

  end

  converse FD0RM012 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMSGNO = 0; /* Message number*/
  FDWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end FD0R121

// Check attention identifier
Function FD0R122()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FD0RW00.FD0RMSEL[12] = "C"; /* Indicate selection cancelled*/

    set FD0RM012 initial; /* m012 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    /* bgn tcs*/

    FD0RW00.FD0RWID2 = 0;

    /* end tcs                  X;   /* Indicate exit requested*/

    FD0RW00.FD0RMSEL[12] = " "; /* Reinit selection field*/

    set FD0RM012 initial; /* m010 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FDWREC.XXXMODID = "122"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FD0R122

// Reset highlighted fields
Function FD0R123()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FD0RM012.FD0RMFYY normal; /* fiscal year*/

  set FD0RM012.FD0RMRPT[1] normal; /* report selection fields*/
  set FD0RM012.FD0RMRPT[2] normal;
  set FD0RM012.FD0RMRPT[3] normal;
  set FD0RM012.FD0RMRPT[4] normal;
  set FD0RM012.FD0RMRPT[5] normal;

  set FD0RM012.FD0RMYPG[1] normal; /* product group selection*/
  set FD0RM012.FD0RMYPG[2] normal;
  set FD0RM012.FD0RMYPG[3] normal;
  set FD0RM012.FD0RMYPG[4] normal;

  set FD0RM012.FD0RMXDV[1] normal;
  set FD0RM012.FD0RMXDV[2] normal;
  set FD0RM012.FD0RMXDV[3] normal;

  set FD0RM012.XPLCD normal; /* product line code*/
  set FD0RM012.XPCCD normal; /* product category code*/
  set FD0RM012.SYBSTGNB normal; /* style group number*/
  set FD0RM012.SY1STNBR normal; /* style number*/
  set FD0RM012.SY2CLRID normal; /* color code id*/
  set FD0RM012.XDMCD normal; /* dimension code*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FD0RM012.XPLCD == "?" /* product line code*/
   || FD0RM012.XPCCD == "?" /* category code*/
   || FD0RM012.XDMCD == "?") /* dimension code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FDWREC.XXXMODID = "123"; /* Module identification*/
      converseLib.validationFailed(49); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM012.XPLCD == "?") /* product line cd list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT LINE CODE "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM012.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM012.XPLCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM012.XPCCD == "?") /* product category list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "CATEGORY CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM012.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM012.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of dimension codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM012.XDMCD == "?") /* product category list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "DIMENSION CODES"; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDM01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      FD0RM012.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/

    end

    set FD0RM012.XDMCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FDWREC.XXXMODID = "123"; /* Module identification*/
  converseLib.validationFailed(48); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FD0R123

// Verify the entered data
Function FD0R124()
   /* ------------------------------------------------------------*/
   /* verify that atleast one selection was made to the add'l data*/
   /* selection fields.*/
   /* ------------------------------------------------------------*/

  if (FD0RM012.SY1STNBR == " "
   && FD0RM012.SYBSTGNB == " "
   && FD0RM012.XPLCD == " "
   && FD0RM012.XPCCD == " ")
    converseLib.validationFailed(37); /* required entry*/
    FDWREC.XXXMODID = "124";
    set FD0RM012.XPLCD cursor, bold;
    set FD0RM012.XPCCD bold;
    set FD0RM012.SYBSTGNB bold;
    set FD0RM012.SY1STNBR bold;
    set FD0RM012.SY2CLRID bold;
    set FD0RM012.XDMCD bold;
  end
   /* ------------------------------------------------------------*/
   /* validate style-color-dim codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM012.SY1STNBR == "*"
   || FD0RM012.SY1STNBR == " ")
     /* valid entry*/
  else
    set PG2REC empty;
    PG2REC.XGPCD = COMMAREA.XGPCD;
    PG2REC.SY1STNBR = FD0RM012.SY1STNBR;
    PG2REC.SY2CLRID = FD0RM012.SY2CLRID;
    PG2REC.XDMCD = FD0RM012.XDMCD;
    FD0RS01(); /* validate product number*/
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(35); /* invalid product number*/
      FDWREC.XXXMODID = "124";
      set FD0RM012.SY1STNBR cursor, bold;
      set FD0RM012.SY2CLRID bold;
      set FD0RM012.XDMCD bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate style group number*/
   /* ------------------------------------------------------------*/

  if (FD0RM012.SYBSTGNB == "*"
   || FD0RM012.SYBSTGNB == " ")
     /* valid entry*/
  else
    set SYBREC empty;
    SYBREC.SYBSTGNB = FD0RM012.SYBSTGNB;
    FD0RS02(); /* validate style group number*/
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(36); /* invalid style group number*/
      FDWREC.XXXMODID = "124";
      set FD0RM012.SYBSTGNB cursor, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/

  if (FD0RM012.XPCCD == "*"
   || FD0RM012.XPCCD == " ")
     /* valid entry*/
  else
    XPCREC.XPCCD = FD0RM012.XPCCD;
    if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
      if (XPCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(32); /* status is inactive*/
        FDWREC.XXXMODID = "124";
        set FD0RM012.XPCCD cursor, bold;
      end
    else
      converseLib.validationFailed(38); /* invalid product category code*/
      FDWREC.XXXMODID = "124";
      set FD0RM012.XPCCD cursor, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product line code*/
   /* ------------------------------------------------------------*/

  if (FD0RM012.XPLCD == "*"
   || FD0RM012.XPLCD == " ")
    /* valid entry*/
  else
    XPLREC.XPLCD = FD0RM012.XPLCD;
    if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
      if (XPLTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(32); /* inactive status*/
        FDWREC.XXXMODID = "124";
        set FD0RM012.XPLCD cursor, bold;
      end
    else
      converseLib.validationFailed(39); /* invalid product line code*/
      FDWREC.XXXMODID = "124";
      set FD0RM012.XPLCD cursor, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product line code and category code combination*/
   /* -db2-edit*/
   /* They must reside in the dfcast.vffxrf01 table to be valid.*/
   /* If either or both line or category code fields have*/
   /* asterisks in them, then there is no need to validate the*/
   /* cross reference between codes.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0
   && FD0RM012.XPLCD != "  ")

    if (FD0RM012.XPCCD == "*"
     || FD0RM012.XPLCD == "*")
       /* valid entry*/
    else
      if (FD0RM012.XPCCD == " ")
        FD0RM012.XPCCD = "*";
      else
        set FF2REC empty; /* clear the storage row*/
        FF2REC.XPCCD = FD0RM012.XPCCD; /* category code*/
        FF2REC.XPLCD = FD0RM012.XPLCD; /* product line code*/
        FF2REC.YPGCD = "*"; /* type group code*/
        FF2REC.YSMXDV = "*"; /* division group code*/

        FD0RS10(); /* select cursor for table*/
        FD0RS11(); /* fetch row in cursor*/

        if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/
          converseLib.validationFailed(55);
                                   /* cat code and prod line not consistent*/
          FDWREC.XXXMODID = "124";
          set FD0RM012.XPLCD cursor, bold;
          set FD0RM012.XPCCD bold;
        end

        FD0RS12(); /* close cursor*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product type group selections*/
   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWERF = "N";
  FD0RW00.FD0RWSLF = "N";
  FD0RW00.FD0RWIDX = 4;
  while (FD0RW00.FD0RWIDX > 0)
    if (FD0RM012.FD0RMYPG[FD0RWIDX] != " ")
      if (FD0RM012.FD0RMYPG[FD0RWIDX] == "S")
        FD0RW00.FD0RWSLF = "Y"; /* selection made*/
      else
        FD0RW00.FD0RWERF = "Y";
        converseLib.validationFailed(13); /* 's' only valid entry*/
        FDWREC.XXXMODID = "124";
        set FD0RM012.FD0RMYPG[FD0RWIDX] cursor, bold;
      end
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX - 1;
  end

  if (FD0RW00.FD0RWSLF == "N" /* no product type group selection made*/
   || FD0RW00.FD0RWERF == "Y") /* an error was detected*/
    converseLib.validationFailed(31);
                                   /* product type group selection required*/
    FDWREC.XXXMODID = "124";
    set FD0RM012.FD0RMYPG[4] bold;
    set FD0RM012.FD0RMYPG[3] bold;
    set FD0RM012.FD0RMYPG[2] bold;
    set FD0RM012.FD0RMYPG[1] cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate product division codes*/
   /* ------------------------------------------------------------*/

  if (FD0RM012.FD0RMXDV[1] == " "
   && FD0RM012.FD0RMXDV[2] == " "
   && FD0RM012.FD0RMXDV[3] == " ") /* AT LEAST ONE MUST BE ENTERED*/
    converseLib.validationFailed(37);
    FDWREC.XXXMODID = "124";
    set FD0RM012.FD0RMXDV[1] cursor, bold;
    set FD0RM012.FD0RMXDV[2] bold;
    set FD0RM012.FD0RMXDV[3] bold;
  end

   /* ------------------------------------------------------------*/
   /* validate report request selections*/
   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWERF = "N";
  FD0RW00.FD0RWSLF = "N";
  FD0RW00.FD0RWIDX = 5;
  while (FD0RW00.FD0RWIDX > 0)
    if (FD0RM012.FD0RMRPT[FD0RWIDX] != " ")
      if (FD0RM012.FD0RMRPT[FD0RWIDX] == "S")
        FD0RW00.FD0RWSLF = "Y"; /* selection made*/
      else
        FD0RW00.FD0RWERF = "Y";
        converseLib.validationFailed(13); /* 's' only valid entry*/
        FDWREC.XXXMODID = "104";
        set FD0RM012.FD0RMRPT[FD0RWIDX] cursor, bold;
      end
    end
    FD0RW00.FD0RWIDX = FD0RW00.FD0RWIDX - 1;
  end

    /* bgn tcs*/
  if (FD0RM012.FD0RMFYY not modified
   && FD0RW00.FD0RWID2 == 0)
    set FD0RM012.FD0RMFYY cursor, bold;
    converseLib.validationFailed(65);
    FDWREC.XXXMODID = "124";
  else
    FD0RW00.FD0RWID2 = FD0RW00.FD0RWID2 + 1;
    if (FD0RW00.FD0RWSLF == "N" /* no report selection made*/
     || FD0RW00.FD0RWERF == "Y") /* an error was detected*/
      converseLib.validationFailed(30); /* report selection required*/
      FDWREC.XXXMODID = "124";
      set FD0RM012.FD0RMRPT[5] bold;
      set FD0RM012.FD0RMRPT[4] bold;
      set FD0RM012.FD0RMRPT[3] bold;
      set FD0RM012.FD0RMRPT[2] bold;
      set FD0RM012.FD0RMRPT[1] cursor, bold;
    end
  end
   /* end tcs*/

   /* ------------------------------------------------------------*/
   /* validate relationship between report selection and additional*/
   /* data selections.*/
   /* ------------------------------------------------------------*/

  if (FD0RM012.FD0RMRPT[1] == "S") /* type rept selected*/
    if (FD0RM012.XPLCD == " ")
        /* valid entry*/
    else
      if (FD0RM012.XPLCD == "*")
        /* valid entry*/
      else
        converseLib.validationFailed(60); /* inconsistent relationship*/
        FDWREC.XXXMODID = "124";
        set FD0RM012.FD0RMRPT[1] cursor, bold;
        set FD0RM012.XPLCD bold;
      end
    end

    if (FD0RM012.XPCCD == " ")
      /* valid entry*/
    else
      if (FD0RM012.XPCCD == "*")
        /* valid entry*/
      else
        converseLib.validationFailed(60); /* inconsistent relationship*/
        FDWREC.XXXMODID = "124";
        set FD0RM012.FD0RMRPT[1] cursor, bold;
        set FD0RM012.XPCCD bold;
      end
    end

    if (FD0RM012.SYBSTGNB == " ") /* style grp nbr*/
      /* valid entry*/
    else
      if (FD0RM012.SYBSTGNB == "*") /* style grp nbr*/
        /* valid entry*/
      else
        converseLib.validationFailed(60); /* inconsistent relationship*/
        FDWREC.XXXMODID = "124";
        set FD0RM012.FD0RMRPT[1] cursor, bold;
        set FD0RM012.SYBSTGNB bold;
      end
    end

    if (FD0RM012.SY1STNBR == " ") /* style nbr*/
      /* valid entry*/
    else
      if (FD0RM012.SY1STNBR == "*") /* style nbr*/
        /* valid entry*/
      else
        converseLib.validationFailed(60); /* inconsistent relationship*/
        FDWREC.XXXMODID = "124";
        set FD0RM012.FD0RMRPT[1] cursor, bold;
        set FD0RM012.SY1STNBR bold;
        set FD0RM012.SY2CLRID bold;
        set FD0RM012.XDMCD bold;
      end
    end
  end


  if (FD0RM012.FD0RMRPT[2] == "S") /* line rept selected*/
    if (FD0RM012.XPCCD == " ")
      /* valid entry*/
    else
      if (FD0RM012.XPCCD == "*")
        /* valid entry*/
      else
        converseLib.validationFailed(60); /* inconsistent relationship*/
        FDWREC.XXXMODID = "124";
        set FD0RM012.FD0RMRPT[2] cursor, bold;
        set FD0RM012.XPCCD bold;
      end
    end

    if (FD0RM012.SYBSTGNB == " ") /* style grp nbr*/
      /* valid entry*/
    else
      if (FD0RM012.SYBSTGNB == "*") /* style grp nbr*/
        /* valid entry*/
      else
        converseLib.validationFailed(60); /* inconsistent relationship*/
        FDWREC.XXXMODID = "124";
        set FD0RM012.FD0RMRPT[2] cursor, bold;
        set FD0RM012.SYBSTGNB bold;
      end
    end

    if (FD0RM012.SY1STNBR == " ") /* style nbr*/
      /* valid entry*/
    else
      if (FD0RM012.SY1STNBR == "*") /* style nbr*/
        /* valid entry*/
      else
        converseLib.validationFailed(60); /* inconsistent relationship*/
        FDWREC.XXXMODID = "124";
        set FD0RM012.FD0RMRPT[2] cursor, bold;
        set FD0RM012.SY1STNBR bold;
        set FD0RM012.SY2CLRID bold;
        set FD0RM012.XDMCD bold;
      end
    end
  end


  if (FD0RM012.FD0RMRPT[3] == "S") /* catg rept selected*/
    if (FD0RM012.SYBSTGNB == " ") /* style grp nbr*/
      /* valid entry*/
    else
      if (FD0RM012.SYBSTGNB == "*") /* style grp nbr*/
        /* valid entry*/
      else
        converseLib.validationFailed(60); /* inconsistent relationship*/
        FDWREC.XXXMODID = "124";
        set FD0RM012.FD0RMRPT[3] cursor, bold;
        set FD0RM012.SYBSTGNB bold;
      end
    end

    if (FD0RM012.SY1STNBR == " ") /* style nbr*/
      /* valid entry*/
    else
      if (FD0RM012.SY1STNBR == "*") /* style nbr*/
        /* valid entry*/
      else
        converseLib.validationFailed(60); /* inconsistent relationship*/
        FDWREC.XXXMODID = "124";
        set FD0RM012.FD0RMRPT[3] cursor, bold;
        set FD0RM012.SY1STNBR bold;
        set FD0RM012.SY2CLRID bold;
        set FD0RM012.XDMCD bold;
      end
    end
  end


  if (FD0RM012.FD0RMRPT[4] == "S") /* sty grp rept selected*/
    if (FD0RM012.SY1STNBR == " ") /* style nbr*/
      /* valid entry*/
    else
      if (FD0RM012.SY1STNBR == "*") /* style nbr*/
        /* valid entry*/
      else
        converseLib.validationFailed(60); /* inconsistent relationship*/
        FDWREC.XXXMODID = "124";
        set FD0RM012.FD0RMRPT[4] cursor, bold;
        set FD0RM012.SY1STNBR bold;
        set FD0RM012.SY2CLRID bold;
        set FD0RM012.XDMCD bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Determine report ending date.  The report ending date will*/
   /* always be August.  The report displays a fiscal year plus or*/
   /* minus 3 months.*/
   /* ------------------------------------------------------------*/

  /* IF FD0RM012.FD0RMFYY GT 0;*/

  set TA2REC empty;

  FD0RW00.FD0RWTMM = 08; /* fiscal end month 'may'*/
  FD0RW00.FD0RWTYY = FD0RM012.FD0RMFYY;
  TA2REC.TA2GRGYM = FD0RW00.FD0RWTYM;

  FD0RS03(); /* edit date range*/

  if (TA2REC.TA2RTNCD != 0)
    set FD0RM012.FD0RMFYY cursor, bold; /* Highlight*/
    converseLib.validationFailed(34); /* Indicate missing or invalid*/
    FDWREC.XXXMODID = "124";
  else
    FD0RW00.FD0RWTCD = TA2REC.TA2GRCYM;
  end

  /* ELSE;*/
  /* MOVE 37 TO EZEMNO;             /* requeired entry*/
  /* MOVE '124' TO FDWREC.XXXMODID;*/
  /* SET FD0RM012.FD0RMFYY CURSOR,BRIGHT;*/
  /* end;*/


  if (converseVar.validationMsgNum != 0)
    exit stack;
  end


end // end FD0R124

// Process valid input request
Function FD0R125()
   /* ****************************************************************/
   /* Call sub-routine to find which environment the program is*/
   /* executing in...test or prod*/
   /* ****************************************************************/

  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FD0R-12501(); /* format prod jcl*/
    else
      FD0R-12502(); /* else format test jcl*/
    end
  else

    FDWREC.XXXMODID = "125"; /* module identification*/
    FDWREC.XXXMSGNO = 63; /* Error encountered with print request*/
    exit stack;
  end
    /* bgn tcs*/

  FD0RW00.FD0RWID2 = 0;

    /* end tcs*/
end // end FD0R125

// Report Request Menu
Function FD0R990()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FD0R991(); /* Format and display the map*/

  FD0R992(); /* Check attention identifier*/

  FD0R993(); /* Reset fields to normal intensity*/

  FD0R994(); /* Verify the data that was entered*/

  FD0R995(); /* Process valid input request*/


end // end FD0R990

// Format and display the map
Function FD0R991()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    FDWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, format the map output area.*/
    /* ------------------------------------------------------------*/

    set FD0RM099 initial; /* M099 input/output*/

    FD0RW00.FD0RWIXM = 1; /* Initialize map index*/

    while (FD0RW00.FD0RWIXM <= FD0RW00.FD0RWIXL) /* Until end of array*/

      FD0RM099.FD0RMSEL[FD0RWIXM] = FD0RW00.FD0RMSEL[FD0RWIXM];

      FD0RW00.FD0RWIXM = FD0RW00.FD0RWIXM + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FD0RM099.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FD0RM099.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FD0RM099.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FDWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FDWREC.XXXMSGNO != 0) /* Message to display*/

      if (FDWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FDWREC.XXXMSGNO);
      end /* Message number*/
    else
      FD0RM099.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FD0RM099.XXXMODID = FDWREC.XXXMODID; /* Module identification*/

    set FD0RM099 alarm; /* Indicate sound alarm*/

  end

  converse FD0RM099 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FDWREC.XXXMSGNO = 0; /* Message number*/
  FDWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FD0RM099.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FD0RM099.CAITEM; /* Application data*/


end // end FD0R991

// Check attention identifier
Function FD0R992()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set FD0RM099 initial; /* M099 input/output*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    FD0RS99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFD001(); /* Exit to another application*/

      set FD0RM099.CATOAP cursor, bold; /* Highlight*/

    else

      FDWREC.XXXMODID = "992"; /* Module identification*/
      converseLib.validationFailed(05); /* Indicate PF key not valid*/

    end

    FD0RS99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to Production*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FD0RM099"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end

    XSFD001(); /* Exit to another application*/

    COMMAREA.CATOAP = " "; /* Clear TO application*/

    FD0RS99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FDWREC.XXXMODID = "992"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    FD0RS99(); /* Exit to display map*/

  end


end // end FD0R992

// Reset highlighted fields
Function FD0R993()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWIXM = 1; /* Initialize index*/

  while (FD0RW00.FD0RWIXM <= FD0RW00.FD0RWIXL) /* Until all lines are reset*/

    set FD0RM099.FD0RMSEL[FD0RWIXM] initialAttributes; /* Reset select field*/

    FD0RW00.FD0RWIXM = FD0RW00.FD0RWIXM + 1; /* Increment line index*/

  end

  set FD0RM099.CATOAP initialAttributes; /* TO application*/
  set FD0RM099.CAITEM initialAttributes; /* Application data*/


end // end FD0R993

// Verify the entered data
Function FD0R994()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    FDWREC.XXXMODID = "994"; /* Module identification*/
    set FD0RM099.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Check for proper select tag.*/
   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWIXM = FD0RW00.FD0RWIXL; /* Initialize line index*/

  while (FD0RW00.FD0RWIXM > 0) /* Until all lines are verified*/

    /* ------------------------------------------------------------*/
     /* Indicate an error if the line was not selected properly.*/
    /* ------------------------------------------------------------*/

    if (FD0RM099.FD0RMSEL[FD0RWIXM] != FD0RW00.FD0RMSEL[FD0RWIXM]
     && FD0RM099.FD0RMSEL[FD0RWIXM] != " " /* Line was selected*/
     && FD0RM099.FD0RMSEL[FD0RWIXM] != "S") /* and not with an "S"*/

      FDWREC.XXXMODID = "994"; /* Module identification*/
      set FD0RM099.FD0RMSEL[FD0RWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(13); /* Only "S" is valid*/

    end

    FD0RW00.FD0RWIXM = FD0RW00.FD0RWIXM - 1; /* Decrement line number*/

  end


   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FD0RS99(); /* Exit to display map*/
  end


end // end FD0R994

// Process valid input request
Function FD0R995()
   /* ------------------------------------------------------------*/
   /* Save the selections in the working storage array.*/
   /* ------------------------------------------------------------*/

  move FD0RM099.FD0RMSEL to FD0RW00.FD0RMSEL[1] for all; /* Menu selections*/

   /* ------------------------------------------------------------*/
   /* If specify destination selected, indicate to subroutine to*/
   /* display output destination, but, do not submit any JCL.*/
   /* ------------------------------------------------------------*/

  if (FD0RW00.FD0RMSEL[1] == "S") /* Specify destination selected*/
    TA6REC.TA6SUBSW = "N"; /* Indicate do not submit JCL*/
  end


end // end FD0R995

// select 's' dprodg.vsyclr01
Function FD0RS01()
   /* ------------------------------------------------------------*/
   /* obtain style number dprodg.vsyclr01*/
   /* ------------------------------------------------------------*/

  PG2REC.XGPCD = COMMAREA.XGPCD;

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FDWREC.XXXMODID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DPRODG.VSYCLR01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FDWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FD0RS01

// select 's' dprod.vsygrp01
Function FD0RS02()
   /* ------------------------------------------------------------*/
   /* obtain style group nbr dprodg.vsygrp01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3150" ("S ", SQLCA, SYBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FDWREC.XXXMODID = "S02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DPRODG.VSYGRP01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FDWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = SYBREC.SYBDATA; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FD0RS02

// date validation yymm
Function FD0RS03()

   /* ------------------------------------------------------------*/
   /* validate/format from YYMM to CCYYMM.*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* option*/

  TA2REC.TA2GRTYP = "E"; /* type*/
  TA2REC.TA2GRGDD = 01; /* dd to be validated*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call successful*/
   || TA2REC.TA2RTNCD >= 888)        /* and subroutine completed*/

    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "FD0RS03 DATE EDIT YYMM";

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    FDWREC.XXXMODID = "S03"; /* Module identification*/
    converseLib.validationFailed(10); /* System error occurred*/

    exit stack; /* exit to display map*/

  end


end // end FD0RS03

// select 's' dspgm.vspgm001
Function FD0RS04()
   /* ------------------------------------------------------------*/
   /* verify program id dspgm.vspgm001*/
   /* ------------------------------------------------------------*/

  try
    call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FDWREC.XXXMODID = "S04"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DSPGM.VSPGM001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FDWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DSPGM  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPGM001"; /* Table view name*/
  TA1REC.TA1TBLKE = SP1REC.SP1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FD0RS04

// date validation mmddyy
Function FD0RS05()

   /* ------------------------------------------------------------*/
   /* validate/format from mmddYY to CCYYMMdd.*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* option*/

  TA2REC.TA2GRTYP = "A"; /* type*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call successful*/
   || TA2REC.TA2RTNCD >= 888)        /* and subroutine completed*/

    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "FD0RS05 DATE EDIT MMDDYY";

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    FDWREC.XXXMODID = "S05"; /* Module identification*/
    converseLib.validationFailed(10); /* System error occurred*/

    exit stack; /* exit to display map*/

  end


end // end FD0RS05

// Select & open in VFFXRF01
Function FD0RS10()

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FDWREC.XXXMODID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(8); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FDWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FD0RS10

// Fetch row in VFFXRF01
Function FD0RS11()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* end of select set*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FDWREC.XXXMODID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(8); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FDWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FD0RS11

// Close the cursor in VFFXRF01
Function FD0RS12()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FDWREC.XXXMODID = "S12"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FDWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FD0RS12

// select 's' DFCAST.VFFCTL01
Function FD0RS20()
  set FF1REC empty;

   /* ------------------------------------------------------------*/
   /* get invoice cutoff date.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful , convert invoice cutoff date to billing*/
   /* cutoff date by subtracting 1 day.*/
   /* Code is included to handle month, year, and century*/
   /* wraparound.*/

   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FD0RW00.FD0RWBCO = FF1REC.FF1IVCDT;
      FD0RW00.FD0RWBCD = FD0RW00.FD0RWBCD - 1; /* subtract a day*/

      if (FD0RW00.FD0RWBCD == 0) /* if month wraparound*/

        FD0RW00.FD0RWBCM = FD0RW00.FD0RWBCM - 1; /* subtract a month*/
        if (FD0RW00.FD0RWBCM == 0) /* if year wraparound*/

          if (FD0RW00.FD0RWBCY == 0) /* if yr 2000*/
            FD0RW00.FD0RWBCY = 99; /* move 99 to year*/
            FD0RW00.FD0RWBCC = 19; /* move 19 to century*/
          else
            FD0RW00.FD0RWBCY = FD0RW00.FD0RWBCY - 1; /* subtract a year*/
          end
        end

        set TA2REC empty;
        TA2REC.TA2DTOPT = "LASTDAY ";
        TA2REC.TA2GRTYP = "A";
        FD0RW00.FD0RWHYY = FD0RW00.FD0RWBCY; /* hold year*/
        FD0RW00.FD0RWHMM = FD0RW00.FD0RWBCM; /* hold month*/
        FD0RW00.FD0RWHDD = 0; /* hold day*/
        TA2REC.TA2GRGAN = FD0RW00.FD0RWHDT; /* greg date*/

        try
          call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
        end /* get lastday*/

        if (sysVar.errorCode != "00000000" /* call successful*/
         || TA2REC.TA2RTNCD != 0)          /* subroutine error*/

          TAEREC.TAEDESC1 = sysVar.errorCode;
          TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

          TA1REC.TA1FUNC = "RETN"; /* termination function*/
          TA1REC.TA1TYPE = "APPL"; /* type of error*/
          TA1REC.TA1LOC = "ERROR GETTING LASTDAY";

          call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnostics routine*/

          FDWREC.XXXMODID = "S20"; /* module identificaiton*/
          converseLib.validationFailed(10); /* system error occurred*/

          exit stack;

        else

          FD0RW00.FD0RWHDT = TA2REC.TA2GRGAN; /* hold date w/ day*/
          FD0RW00.FD0RWBCD = FD0RW00.FD0RWHDD; /* final day*/
        end

      end

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FDWREC.XXXMODID = "S20"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VFFCTL01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FDWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FD0RS20

// Clear selections and exit
Function FD0RS99()
   /* ------------------------------------------------------------*/
   /* Reset any pending selections in working storage.*/
   /* ------------------------------------------------------------*/

  FD0RW00.FD0RWIXM = 1; /* Initialize map index*/

  while (FD0RW00.FD0RWIXM <= FD0RW00.FD0RWIXL) /* Until end of array*/

    if (FD0RW00.FD0RMSEL[FD0RWIXM] == "S") /* Entry is selected*/
      FD0RW00.FD0RMSEL[FD0RWIXM] = " "; /* Reset entry*/
    end

    FD0RW00.FD0RWIXM = FD0RW00.FD0RWIXM + 1; /* Increment index*/

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the selection menu map.*/
   /* ------------------------------------------------------------*/

  exit stack; /* Exit to display map*/


end // end FD0RS99

//*** RECORD=FD0RW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FD0RW00 type basicRecord
  10 FD0RWFOR FD0RWFOR ; 
  10 FD0RWJOB FD0RWJOB ; 
  10 FD0RMSEL FD0RMSEL [12] ; 
  10 FD0RWIXL FD0RWIXL ; 
  10 FD0RWIXM FD0RWIXM ; 
  10 FD0RWIX2 FD0RWIX2 ; 
  10 FD0RWIXT FD0RWIXT ; 
  10 FD0RWSWX FD0RWSWX ; 
  10 FD0RWIDX FD0RWIDX ; 
  10 FD0RWID2 FD0RWID2 ; 
  10 FD0RWSLF FD0RWSLF ; 
  10 FD0RWERF FD0RWERF ; 
  10 FD0RWFOD FD0RWFOD ; 
  10 FD0RWTOD FD0RWTOD ; 
  10 FD0RWCMC FD0RWCMC ; 
    15 * num(3) ; // filler
    15 FD0RWCCC FD0RWCCC ; 
    15 FD0RWCYM FD0RWCYM ; 
      20 FD0RWCYY FD0RWCYY ; 
      20 FD0RWCMM FD0RWCMM ; 
  10 FD0RWFCD FD0RWFCD ; 
    15 * num(3) ; 
    15 FD0RWFCC FD0RWFCC ; 
    15 FD0RWFYM FD0RWFYM ; 
      20 FD0RWFYY FD0RWFYY ; 
      20 FD0RWFMM FD0RWFMM ; 
  10 FD0RWTCD FD0RWTCD ; 
    15 * num(3) ; 
    15 FD0RWTCC FD0RWTCC ; 
    15 FD0RWTYM FD0RWTYM ; 
      20 FD0RWTYY FD0RWTYY ; 
      20 FD0RWTMM FD0RWTMM ; 
  10 FD0RWWDT FD0RWWDT ; 
    15 FD0RWWMM FD0RWWMM ; 
    15 FD0RWWDD FD0RWWDD ; 
    15 FD0RWWYY FD0RWWYY ; 
  10 FD0RWWYM FD0RWWYM ; 
    15 FD0RWYYY FD0RWYYY ; 
    15 FD0RWMMM FD0RWMMM ; 
  10 FD0RWEDT FD0RWEDT ; 
    15 FD0RWEYY FD0RWEYY ; 
    15 FD0RWEMM FD0RWEMM ; 
  10 FD0RWPDT FD0RWPDT ; 
    15 FD0RWPYY FD0RWPYY ; 
    15 FD0RWPMM FD0RWPMM ; 
    15 FD0RWPDD FD0RWPDD ; 
  10 FD0RWHDT FD0RWHDT ; 
    15 FD0RWHMM FD0RWHMM ; 
    15 FD0RWHDD FD0RWHDD ; 
    15 FD0RWHYY FD0RWHYY ; 
  10 FD0RWKDT FD0RWKDT ; 
    15 FD0RWKYY FD0RWKYY ; 
    15 FD0RWKMM FD0RWKMM ; 
    15 FD0RWKDD FD0RWKDD ; 
  10 SP1ABRV SP1ABRV [6] ; 
  10 FD0RWKYR FD0RWKYR ; 
  10 FD0RWBCO FD0RWBCO ; 
    15 FD0RWBCZ FD0RWBCZ ; 
    15 FD0RWBCC FD0RWBCC ; 
    15 FD0RWBCY FD0RWBCY ; 
    15 FD0RWBCM FD0RWBCM ; 
    15 FD0RWBCD FD0RWBCD ; 
  10 FD0RWDYM FD0RWDYM ; 
    15 FD0RWDYY FD0RWDYY ; 
    15 FD0RWDMM FD0RWDMM ; 
  10 WS-FROM-DATE WS-FROM-DATE ; 
    15 WS-FROM-CC WS-FROM-CC ; 
    15 WS-FROM-YY WS-FROM-YY ; 
    15 WS-FROM-MM WS-FROM-MM ; 
  10 WS-TO-DATE WS-TO-DATE ; 
    15 WS-TO-CC WS-TO-CC ; 
    15 WS-TO-YY WS-TO-YY ; 
    15 WS-TO-MM WS-TO-MM ; 
  10 SV-DATE SV-DATE ; 
    15 SV-YY SV-YY ; 
    15 SV-MM SV-MM ; 
end // end FD0RW00

//*** RECORD=FD0RW01 ****
// ------------------------------------------------------------
// Job and form identification variables in the JCL statements.
// ------------------------------------------------------------
// ***********************
Record FD0RW01 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(26) ; 
    10 FD0RWCCD FD0RWCCD ; 
    10 * char(38) ; 
  5 TARTYPE TARTYPE ; 
end // end FD0RW01

//*** RECORD=FD0RW02 ****
// ------------------------------------------------------------
// Parameters for FD3100 - Register extract
// ------------------------------------------------------------
// ***********************
Record FD0RW02 type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWPGM FD0RWPGM ; 
    10 FD0RWRUN FD0RWRUN ; 
    10 YPGCD YPGCD [4] ; 
    10 FD0RWFDT FD0RWFDT ; 
    10 FD0RWTDT FD0RWTDT ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XLCCD XLCCD [2] ; 
    10 XQACD XQACD [2] ; 
    10 FD0RWUID FD0RWUID ; 
    10 * char(10) ; 
end // end FD0RW02

//*** RECORD=FD0RW03 ****
// ------------------------------------------------------------
// Parameters for FD2030 - summary comparison extract
//                FD2070 - summary comparison type/line/cat rpt
//                FD2080 - summary comparison line/type/cat rpt
// ------------------------------------------------------------
// ***********************
Record FD0RW03 type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWRUN FD0RWRUN ; 
    10 FD0RWTFS FD0RWTFS ; 
    10 FD0RWTUD FD0RWTUD ; 
    10 FD0RWCDT FD0RWCDT ; 
    10 YPGCD YPGCD [4] ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XDMCD XDMCD ; 
    10 XGACD XGACD ; 
    10 XSUCD XSUCD ; 
    10 XQACD XQACD [2] ; 
    10 FD0RWUID FD0RWUID ; 
    10 FD0RWFDT FD0RWFDT ; 
    10 FD0RWTDT FD0RWTDT ; 
    10 * char(14) ; 
end // end FD0RW03

//*** RECORD=FD0RW04 ****
// ------------------------------------------------------------
// Parameters for FD2030 - comparsion sales/futures extract
// Parameters for FD2040 - top 20 summary comparsion report
// ------------------------------------------------------------
// ***********************
Record FD0RW04 type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWRUN FD0RWRUN ; 
    10 FD0RWTFS FD0RWTFS ; 
    10 FD0RWTUD FD0RWTUD ; 
    10 FD0RWCDT FD0RWCDT ; 
    10 YPGCD YPGCD [4] ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XDMCD XDMCD ; 
    10 XGACD XGACD ; 
    10 XSUCD XSUCD ; 
    10 XQACD XQACD [2] ; 
    10 FD0RWUID FD0RWUID ; 
    10 FD0RWFDT FD0RWFDT ; 
    10 FD0RWTDT FD0RWTDT ; 
    10 * char(14) ; 
end // end FD0RW04

//*** RECORD=FD0RW05 ****
// ------------------------------------------------------------
// Parameters for FD2030 - comparsion sales/futures extract
// Parameters for FD2040 - top 20 summary comparsion report
// ------------------------------------------------------------
// ***********************
Record FD0RW05 type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWRUN FD0RWRUN ; 
    10 FD0RWTFS FD0RWTFS ; 
    10 FD0RWTUD FD0RWTUD ; 
    10 FD0RWCDT FD0RWCDT ; 
    10 YPGCD YPGCD [4] ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XDMCD XDMCD ; 
    10 XGACD XGACD ; 
    10 XSUCD XSUCD ; 
    10 XQACD XQACD [2] ; 
    10 FD0RWUID FD0RWUID ; 
    10 FD0RWFDT FD0RWFDT ; 
    10 FD0RWTDT FD0RWTDT ; 
    10 * char(14) ; 
end // end FD0RW05

//*** RECORD=FD0RW10 ****
// ------------------------------------------------------------
// Parameters for FD???? - Register Report.
// ------------------------------------------------------------
// ***********************
Record FD0RW10 type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWRUN FD0RWRUN ; 
    10 FD0RWRPT FD0RWRPT [5] ; 
    10 YSMSUMCD YSMSUMCD [2] ; 
    10 FD0RWFDT FD0RWFDT ; 
    10 FD0RWTDT FD0RWTDT ; 
    10 YPGCD YPGCD [4] ; 
    10 XLCCD XLCCD [2] ; 
    10 XQACD XQACD [2] ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 FD0RWUID FD0RWUID ; 
    10 FD0RWXDV FD0RWXDV [3] ; 
    10 * char(1) ; 
end // end FD0RW10

//*** RECORD=FD0RW11 ****
// ------------------------------------------------------------
// Parameters for FD???? - summary comparison report
// ------------------------------------------------------------
// ***********************
Record FD0RW11 type basicRecord
  5 TARJCL TARJCL ; 
    10 YSMSUMCD YSMSUMCD [2] ; 
    10 FD0RWFDT FD0RWFDT ; 
    10 FD0RWTDT FD0RWTDT ; 
    10 YPGCD YPGCD [4] ; 
    10 FD0RWUID FD0RWUID ; 
    10 * char(42) ; 
end // end FD0RW11

//*** RECORD=FD0RW12 ****
// ------------------------------------------------------------
// Parameters for Actual Receipts Reports
// fd2521  category level report
// fd2522  line level report
// fd2523  type level report
// fd2524  style group level report
// fd2525  style color level report
// ------------------------------------------------------------
// ***********************
Record FD0RW12 type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWRUN FD0RWRUN ; 
    10 FD0RWTDT FD0RWTDT ; 
    10 YPGCD YPGCD [4] ; 
    10 XQACD XQACD [2] ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 FD0RWUID FD0RWUID ; 
    10 FD0RWXDV FD0RWXDV [3] ; 
    10 * char(23) ; 
end // end FD0RW12

//*** RECORD=FD0RW51 ****
// ------------------------------------------------------------
// Parameters for FD2030 - summary comparison extract
//                FD2070 - summary comparison type/line/cat rpt
//                FD2080 - summary comparison line/type/cat rpt
// test version
// ------------------------------------------------------------
// ***********************
Record FD0RW51 type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWRUN FD0RWRUN ; 
    10 FD0RWTFS FD0RWTFS ; 
    10 FD0RWTUD FD0RWTUD ; 
    10 FD0RWCDT FD0RWCDT ; 
    10 YPGCD YPGCD [4] ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XDMCD XDMCD ; 
    10 XGACD XGACD ; 
    10 XSUCD XSUCD ; 
    10 XQACD XQACD [2] ; 
    10 FD0RWUID FD0RWUID ; 
    10 FD0RWFDT FD0RWFDT ; 
    10 FD0RWTDT FD0RWTDT ; 
    10 * char(14) ; 
end // end FD0RW51

//*** RECORD=FD0RW53 ****
// ------------------------------------------------------------
// Parameters for FD2030 - comparsion sales/futures extract
// Parameters for FD2040 - top 20 summary comparsion report
// test version
// ------------------------------------------------------------
// ***********************
Record FD0RW53 type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWRUN FD0RWRUN ; 
    10 FD0RWTFS FD0RWTFS ; 
    10 FD0RWTUD FD0RWTUD ; 
    10 FD0RWCDT FD0RWCDT ; 
    10 YPGCD YPGCD [4] ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XDMCD XDMCD ; 
    10 XGACD XGACD ; 
    10 XSUCD XSUCD ; 
    10 XQACD XQACD [2] ; 
    10 FD0RWUID FD0RWUID ; 
    10 FD0RWFDT FD0RWFDT ; 
    10 FD0RWTDT FD0RWTDT ; 
    10 * char(14) ; 
end // end FD0RW53

//*** RECORD=FD0RW55 ****
// ------------------------------------------------------------
// Parameters for FD2030 - comparsion sales/futures extract
// Parameters for FD2040 - top 20 summary comparsion report
// test version
// ------------------------------------------------------------
// ***********************
Record FD0RW55 type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWRUN FD0RWRUN ; 
    10 FD0RWTFS FD0RWTFS ; 
    10 FD0RWTUD FD0RWTUD ; 
    10 FD0RWCDT FD0RWCDT ; 
    10 YPGCD YPGCD [4] ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XDMCD XDMCD ; 
    10 XGACD XGACD ; 
    10 XSUCD XSUCD ; 
    10 XQACD XQACD [2] ; 
    10 FD0RWUID FD0RWUID ; 
    10 FD0RWFDT FD0RWFDT ; 
    10 FD0RWTDT FD0RWTDT ; 
    10 * char(14) ; 
end // end FD0RW55

//*** RECORD=FD0RW57 ****
// ------------------------------------------------------------
// Parameters for FD2030 - inventory analysis extract
// test version
// ------------------------------------------------------------
// ***********************
Record FD0RW57 type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWRUN FD0RWRUN ; 
    10 FD0RWTFS FD0RWTFS ; 
    10 FD0RWTUD FD0RWTUD ; 
    10 FD0RWCDT FD0RWCDT ; 
    10 YPGCD YPGCD [4] ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XDMCD XDMCD ; 
    10 XGACD XGACD ; 
    10 XSUCD XSUCD ; 
    10 XQACD XQACD [2] ; 
    10 FD0RWUID FD0RWUID ; 
    10 FD0RWFDT FD0RWFDT ; 
    10 FD0RWTDT FD0RWTDT ; 
    10 FD0RWXDV FD0RWXDV [3] ; 
    10 * char(8) ; 
end // end FD0RW57

//*** RECORD=FD0RW58 ****
// ------------------------------------------------------------
// Parameters for FD???? - Register Report.
// test version
// ------------------------------------------------------------
// ***********************
Record FD0RW58 type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWFDT FD0RWFDT ; 
    10 FD0RWTDT FD0RWTDT ; 
    10 FD0RWKEY FD0RWKEY [6] ; 
      15 SP1ID SP1ID ; 
      15 SP1ABRV SP1ABRV ; 
    10 * char(2) ; 
end // end FD0RW58

//*** RECORD=FD0RW59 ****
// ------------------------------------------------------------
// Parameters for FD2401 - summary demand extract
// Parameters for FD2431 - type/line summary demand report
//                         line/type summary demand report
// Parameters for FD2441 - type/line/category demand report
// test version
// ------------------------------------------------------------
// ***********************
Record FD0RW59 type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWFDT FD0RWFDT ; 
    10 FD0RWTDT FD0RWTDT ; 
    10 FD0RWKEY FD0RWKEY [6] ; 
      15 SP1ID SP1ID ; 
      15 SP1ABRV SP1ABRV ; 
    10 * char(2) ; 
end // end FD0RW59

//*** RECORD=FD0RW5O ****
// ------------------------------------------------------------
// Parameters for FD3100 - Register extract
// test version
// ------------------------------------------------------------
// ***********************
Record FD0RW5O type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWPGM FD0RWPGM ; 
    10 FD0RWRUN FD0RWRUN ; 
    10 YPGCD YPGCD [4] ; 
    10 FD0RWFDT FD0RWFDT ; 
    10 FD0RWTDT FD0RWTDT ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XLCCD XLCCD [2] ; 
    10 XQACD XQACD [2] ; 
    10 FD0RWUID FD0RWUID ; 
    10 * char(10) ; 
end // end FD0RW5O

//*** RECORD=FD0RW61 ****
// ------------------------------------------------------------
// Parameters for FD241d - prop bookings extract
// Parameters for FD245d - prop bookings by region rpt
// test version
// ------------------------------------------------------------
// ***********************
Record FD0RW61 type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWRUN FD0RWRUN ; 
    10 FD0RWFOD FD0RWFOD ; 
    10 FD0RWTOD FD0RWTOD ; 
    10 FD0RWRPT FD0RWRPT [3] ; 
    10 FD0RWUID FD0RWUID ; 
    10 * char(50) ; 
end // end FD0RW61

//*** RECORD=FD0RW62 ****
// ------------------------------------------------------------
// Parameters for FD241d - prop bookings extract
// Parameters for FD246d - top 20 style/color rpt
// Parameters for FD247d - top 3 styles per category
// test version
// ------------------------------------------------------------
// ***********************
Record FD0RW62 type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWRUN FD0RWRUN ; 
    10 FD0RWFOD FD0RWFOD ; 
    10 FD0RWTOD FD0RWTOD ; 
    10 FD0RWRPT FD0RWRPT [3] ; 
    10 FD0RWUID FD0RWUID ; 
    10 * char(50) ; 
end // end FD0RW62

//*** RECORD=FD0RW63 ****
// ------------------------------------------------------------
// Parameters for FD2301 - shipment by need month report
// test version
// ------------------------------------------------------------
// ***********************
Record FD0RW63 type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWRUN FD0RWRUN ; 
    10 FD0RWRPT FD0RWRPT [5] ; 
    10 YSMSUMCD YSMSUMCD [2] ; 
    10 FD0RWFDT FD0RWFDT ; 
    10 FD0RWTDT FD0RWTDT ; 
    10 YPGCD YPGCD [4] ; 
    10 XLCCD XLCCD [2] ; 
    10 XQACD XQACD [2] ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 FD0RWUID FD0RWUID ; 
    10 FD0RWXDV FD0RWXDV [3] ; 
    10 * char(1) ; 
end // end FD0RW63

//*** RECORD=FD0RW64 ****
// ------------------------------------------------------------
// Parameters for FD2201 - past due report
// test version
// ------------------------------------------------------------
// ***********************
Record FD0RW64 type basicRecord
  5 TARJCL TARJCL ; 
    10 YSMSUMCD YSMSUMCD [2] ; 
    10 FD0RWFDT FD0RWFDT ; 
    10 FD0RWTDT FD0RWTDT ; 
    10 YPGCD YPGCD [4] ; 
    10 FD0RWUID FD0RWUID ; 
    10 * char(42) ; 
end // end FD0RW64

//*** RECORD=FD0RW65 ****
// ------------------------------------------------------------
// Parameters for Actual Receipts Reports
// test version
// fd2521  category level report
// fd2522  line level report
// fd2523  type level report
// fd2524  style group level report
// fd2525  style color level report
// ------------------------------------------------------------
// ***********************
Record FD0RW65 type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWRUN FD0RWRUN ; 
    10 FD0RWTDT FD0RWTDT ; 
    10 YPGCD YPGCD [4] ; 
    10 XQACD XQACD [2] ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 FD0RWUID FD0RWUID ; 
    10 FD0RWXDV FD0RWXDV [3] ; 
    10 * char(23) ; 
end // end FD0RW65

//*** RECORD=FD0RW6A ****
// ------------------------------------------------------------
// Parameters for FD2030 - inventory analysis extract
// ------------------------------------------------------------
// ***********************
Record FD0RW6A type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWRUN FD0RWRUN ; 
    10 FD0RWTFS FD0RWTFS ; 
    10 FD0RWTUD FD0RWTUD ; 
    10 FD0RWCDT FD0RWCDT ; 
    10 YPGCD YPGCD [4] ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XDMCD XDMCD ; 
    10 XGACD XGACD ; 
    10 XSUCD XSUCD ; 
    10 XQACD XQACD [2] ; 
    10 FD0RWUID FD0RWUID ; 
    10 FD0RWFDT FD0RWFDT ; 
    10 FD0RWTDT FD0RWTDT ; 
    10 FD0RWXDV FD0RWXDV [3] ; 
    10 * char(8) ; 
end // end FD0RW6A

//*** RECORD=FD0RW6B ****
// ------------------------------------------------------------
// Parameters for FD2110 - inventory analysis extract
// Parameters for FD2120 - inventory analysis extract
// Parameters for FD2130 - inventory analysis style/color rpt
// Parameters for FD2140 - inventory analysis style grp rpt
// Parameters for FD2150 - inventory analysis type/line rpt
// Parameters for FD2160 - inventory analysis line/type rpt
// ------------------------------------------------------------
// ***********************
Record FD0RW6B type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWRUN FD0RWRUN ; 
    10 FD0RWCDT FD0RWCDT ; 
    10 YPGCD YPGCD [4] ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XQACD XQACD [2] ; 
    10 FD0RWUID FD0RWUID ; 
    10 FD0RMUNT FD0RMUNT ; 
    10 FD0RMSAL FD0RMSAL ; 
    10 FD0RWXDV FD0RWXDV [3] ; 
    10 * char(28) ; 
end // end FD0RW6B

//*** RECORD=FD0RW7A ****
// ------------------------------------------------------------
// Parameters for FD???? - Register Report.
// ------------------------------------------------------------
// ***********************
Record FD0RW7A type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWFDT FD0RWFDT ; 
    10 FD0RWTDT FD0RWTDT ; 
    10 FD0RWKEY FD0RWKEY [6] ; 
      15 SP1ID SP1ID ; 
      15 SP1ABRV SP1ABRV ; 
    10 * char(2) ; 
end // end FD0RW7A

//*** RECORD=FD0RW7B ****
// ------------------------------------------------------------
// Parameters for FD2110 - inventory analysis extract
// Parameters for FD2120 - inventory analysis extract
// Parameters for FD2130 - inventory analysis style/color rpt
// Parameters for FD2140 - inventory analysis style grp rpt
// Parameters for FD2150 - inventory analysis type/line rpt
// Parameters for FD2160 - inventory analysis line/type rpt
// ------------------------------------------------------------
// ***********************
Record FD0RW7B type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWRUN FD0RWRUN ; 
    10 FD0RWRPT FD0RWRPT [6] ; 
    10 YPGCD YPGCD [4] ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 YSMSUMCD YSMSUMCD [2] ; 
    10 XLCCD XLCCD [2] ; 
    10 XQACD XQACD [2] ; 
    10 FD0RWUID FD0RWUID ; 
    10 * char(35) ; 
end // end FD0RW7B

//*** RECORD=FD0RW8A ****
// ------------------------------------------------------------
// Parameters for FD2401 - summary demand extract
// Parameters for FD2431 - type/line summary demand report
//                         line/type summary demand report
// Parameters for FD2441 - type/line/category demand report
// ------------------------------------------------------------
// ***********************
Record FD0RW8A type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWFDT FD0RWFDT ; 
    10 FD0RWTDT FD0RWTDT ; 
    10 FD0RWKEY FD0RWKEY [6] ; 
      15 SP1ID SP1ID ; 
      15 SP1ABRV SP1ABRV ; 
    10 * char(2) ; 
end // end FD0RW8A

//*** RECORD=FD0RW8B ****
// ------------------------------------------------------------
// Parameters for FD2400 - summary demand extract
// Parameters for FD2430 - type/line summary demand report
//                         line/type summary demand report
// Parameters for FD2440 - type/line/category summary demand
// ------------------------------------------------------------
// ***********************
Record FD0RW8B type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWRUN FD0RWRUN ; 
    10 FD0RWRPT FD0RWRPT [6] ; 
    10 YPGCD YPGCD [4] ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 YSMSUMCD YSMSUMCD [2] ; 
    10 XLCCD XLCCD [2] ; 
    10 XQACD XQACD [2] ; 
    10 FD0RWUID FD0RWUID ; 
    10 * char(35) ; 
end // end FD0RW8B

//*** RECORD=FD0RW97 ****
// ------------------------------------------------------------
// Parameters for FD2400 - summary demand extract
// Parameters for FD2430 - type/line summary demand report
//                         line/type summary demand report
// Parameters for FD2440 - type/line/category summary demand
// test version
// ------------------------------------------------------------
// ***********************
Record FD0RW97 type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWRUN FD0RWRUN ; 
    10 FD0RWRPT FD0RWRPT [6] ; 
    10 YPGCD YPGCD [4] ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 YSMSUMCD YSMSUMCD [2] ; 
    10 XLCCD XLCCD [2] ; 
    10 XQACD XQACD [2] ; 
    10 FD0RWUID FD0RWUID ; 
    10 * char(35) ; 
end // end FD0RW97

//*** RECORD=FD0RW98 ****
// ------------------------------------------------------------
// Parameters for FD2110 - inventory analysis extract
// Parameters for FD2120 - inventory analysis extract
// Parameters for FD2130 - inventory analysis style/color rpt
// Parameters for FD2140 - inventory analysis style grp rpt
// Parameters for FD2150 - inventory analysis type/line rpt
// Parameters for FD2160 - inventory analysis line/type rpt
// test version
// ------------------------------------------------------------
// ***********************
Record FD0RW98 type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWRUN FD0RWRUN ; 
    10 FD0RWRPT FD0RWRPT [6] ; 
    10 YPGCD YPGCD [4] ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 YSMSUMCD YSMSUMCD [2] ; 
    10 XLCCD XLCCD [2] ; 
    10 XQACD XQACD [2] ; 
    10 FD0RWUID FD0RWUID ; 
    10 * char(35) ; 
end // end FD0RW98

//*** RECORD=FD0RW99 ****
// ------------------------------------------------------------
// Parameters for FD2110 - inventory analysis extract
// Parameters for FD2120 - inventory analysis extract
// Parameters for FD2130 - inventory analysis style/color rpt
// Parameters for FD2140 - inventory analysis style grp rpt
// Parameters for FD2150 - inventory analysis type/line rpt
// Parameters for FD2160 - inventory analysis line/type rpt
// test version
// ------------------------------------------------------------
// ***********************
Record FD0RW99 type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWRUN FD0RWRUN ; 
    10 FD0RWCDT FD0RWCDT ; 
    10 YPGCD YPGCD [4] ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XQACD XQACD [2] ; 
    10 FD0RWUID FD0RWUID ; 
    10 FD0RMUNT FD0RMUNT ; 
    10 FD0RMSAL FD0RMSAL ; 
    10 FD0RWXDV FD0RWXDV [3] ; 
    10 * char(28) ; 
end // end FD0RW99

//*** RECORD=FD0RW9N ****
// ------------------------------------------------------------
// Parameters for FD241d - prop bookings extract
// Parameters for FD245d - prop bookings by region rpt
// ------------------------------------------------------------
// ***********************
Record FD0RW9N type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWRUN FD0RWRUN ; 
    10 FD0RWFOD FD0RWFOD ; 
    10 FD0RWTOD FD0RWTOD ; 
    10 FD0RWRPT FD0RWRPT [3] ; 
    10 FD0RWUID FD0RWUID ; 
    10 * char(50) ; 
end // end FD0RW9N

//*** RECORD=FD0RW9T ****
// ------------------------------------------------------------
// Parameters for FD241d - prop bookings extract
// Parameters for FD246d - top 20 style/color rpt
// Parameters for FD247d - top 3 styles per category
// ------------------------------------------------------------
// ***********************
Record FD0RW9T type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0RWRUN FD0RWRUN ; 
    10 FD0RWFOD FD0RWFOD ; 
    10 FD0RWTOD FD0RWTOD ; 
    10 FD0RWRPT FD0RWRPT [3] ; 
    10 FD0RWUID FD0RWUID ; 
    10 * char(50) ; 
end // end FD0RW9T

//*** RECORD=XGAREC ****
// ****************** GENDER AGE CODE TABLE *******************
// 
// DB2 TABLE VIEW:       DCORP.VXGA0001
// 
// DCLGEN MEMBER:        DCL00146
// 
// CSP TABLE NAME:       XGATBL
// 
// KEY TO TABLE:          DB2          CSP
//                       -----        ------
//                       XGACD        XGAKEY
//                       XGPCD
// 
// MAINTENANCE HISTORY:
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          06/01/89  SPOPA   New record.
// **********************
Record XGAREC type basicRecord
  10 XGAKEY XGAKEY ; 
    15 XGACD XGACD ; 
    15 XGPCD XGPCD ; 
  10 XGCCD XGCCD ; 
  10 XTVCD XTVCD ; 
  10 XGADESC XGADESC ; 
  10 XGAABRV XGAABRV ; 
  10 XXXSTAT XXXSTAT ; 
  10 ZZZSDT ZZZSDT ; 
  10 ZZZCHGDT ZZZCHGDT ; 
  10 ZZZCHGTM ZZZCHGTM ; 
  10 ZZZCHGCT ZZZCHGCT ; 
end // end XGAREC

//*** RECORD=XSUREC ****
// ****************** SILHOUETTE CODE TABLE *******************
// 
// DB2 TABLE VIEW:       DCORP.VXSU0001
// 
// DCLGEN MEMBER:        DCL00363
// 
// CSP TABLE NAME:       XSUTBL
// 
// KEY TO TABLE:          DB2          CSP
//                       -----        ------
//                       XSUCD        XSUKEY
//                       XGPCD
// 
// MAINTENANCE HISTORY:
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          06/01/89  SPOPA   New record.
// **********************
Record XSUREC type basicRecord
  10 XSUKEY XSUKEY ; 
    15 XSUCD XSUCD ; 
    15 XGPCD XGPCD ; 
  10 XBTCD XBTCD ; 
  10 YPFCD YPFCD ; 
  10 XSUDESC XSUDESC ; 
  10 XSUABRV XSUABRV ; 
  10 XSUNCSDF XSUNCSDF ; 
  10 XXXSTAT XXXSTAT ; 
  10 ZZZSDT ZZZSDT ; 
  10 ZZZCHGDT ZZZCHGDT ; 
  10 ZZZCHGTM ZZZCHGTM ; 
  10 ZZZCHGCT ZZZCHGCT ; 
end // end XSUREC

// minimum sales qty selection
DataItem FD0RMSAL num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// selection field
DataItem FD0RMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minimum quantity selection
DataItem FD0RMUNT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// billing cutoff cc
DataItem FD0RWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// billing cutoff dd
DataItem FD0RWBCD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// billing cutoff mm
DataItem FD0RWBCM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// billing cutoff date
DataItem FD0RWBCO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// billing cutoff yy
DataItem FD0RWBCY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// billing cutoff leading 0
DataItem FD0RWBCZ num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// compare cc
DataItem FD0RWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cond code
DataItem FD0RWCCD char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comparison date ccyymm
DataItem FD0RWCDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// compare date ccyymm
DataItem FD0RWCMC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// compare mm
DataItem FD0RWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// compare yymm
DataItem FD0RWCYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// compare yy
DataItem FD0RWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// diff between from mm & to MM
DataItem FD0RWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// diff between from dt & to dt
DataItem FD0RWDYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// diff between from yy & to yy
DataItem FD0RWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yymm date-18 mm from curr mm
DataItem FD0RWEDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date-18 mm
DataItem FD0RWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error flag
DataItem FD0RWERF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date-18 yy
DataItem FD0RWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from cc
DataItem FD0RWFCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from date ccyymm
DataItem FD0RWFCD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need date low
DataItem FD0RWFDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from mm
DataItem FD0RWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from order date ccyymmdd
DataItem FD0RWFOD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Forms code
DataItem FD0RWFOR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from yymm
DataItem FD0RWFYM char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from yy
DataItem FD0RWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold dd
DataItem FD0RWHDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold date mmddyy
DataItem FD0RWHDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold mm
DataItem FD0RWHMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold yy
DataItem FD0RWHYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index
DataItem FD0RWID2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index
DataItem FD0RWIDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Secondary index for map fields
DataItem FD0RWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// limit for map fields index
DataItem FD0RWIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map fields
DataItem FD0RWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for table fields
DataItem FD0RWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Job identification
DataItem FD0RWJOB char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work dd
DataItem FD0RWKDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date -- yymmdd
DataItem FD0RWKDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prgm id and abrv key
DataItem FD0RWKEY char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work mm
DataItem FD0RWKMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year 2
DataItem FD0RWKYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work yy
DataItem FD0RWKYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mm
DataItem FD0RWMMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// previous dd
DataItem FD0RWPDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// previous date-yymmdd
DataItem FD0RWPDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// program id
DataItem FD0RWPGM char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous mm
DataItem FD0RWPMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// previous yy
DataItem FD0RWPYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// report requested
DataItem FD0RWRPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// run type request/monthly
DataItem FD0RWRUN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection flag
DataItem FD0RWSLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// exit requested switch
DataItem FD0RWSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to cc
DataItem FD0RWTCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to date ccyymm
DataItem FD0RWTCD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need date high
DataItem FD0RWTDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// report type future/sale
DataItem FD0RWTFS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to mm
DataItem FD0RWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to order date ccyymmdd
DataItem FD0RWTOD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// report type unit/dollar
DataItem FD0RWTUD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to yymm
DataItem FD0RWTYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to yy
DataItem FD0RWTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nike user id
DataItem FD0RWUID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dd
DataItem FD0RWWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date mmddyy
DataItem FD0RWWDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mm
DataItem FD0RWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date yymm
DataItem FD0RWWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy
DataItem FD0RWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XDV_DIV_CD
DataItem FD0RWXDV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// yy
DataItem FD0RWYYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date -- yymmdd
DataItem SV-DATE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work mm
DataItem SV-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work yy
DataItem SV-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work yy
DataItem WS-FROM-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date -- yymmdd
DataItem WS-FROM-DATE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work dd
DataItem WS-FROM-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work mm
DataItem WS-FROM-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work yy
DataItem WS-TO-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date -- yymmdd
DataItem WS-TO-DATE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work dd
DataItem WS-TO-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work mm
DataItem WS-TO-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSU_UNT_CS_DFLT
DataItem XSUNCSDF smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

