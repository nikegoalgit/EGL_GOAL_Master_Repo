package fd0n;

import corpcom2.XCTREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFD001;
import corpcom3.XPTA0P;
import corpcom3.XPXCT01;
import corpcom3.XPXX001;
import corpcom4.XSFD001;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XCTCD;
import corpx1.XCTTBL;
import fd.common.FDWREC;
import ku.common.KUCCOID;
import ku.common.KUMREC;
import ku.common.KUMSTRID;
import pc.common.PC2CUXID;
import pc.common.PC2REC;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARJCL;
import ta.common.TARTYPE;
//*** PROGRAM=FD0N ****
// This application displays the Submit Job Request Menu screen
// and subordinate job submission screens.
// 
// The menu is displayed for the user to select the jobs to be
// submitted.  Another available selection allows the user to
// view the available printers and change the printed output
// destination.
// 
// Job Control Language statements are formatted and submitted
// through the Internal Reader Transient Data Queue (INTR).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TARTYPE).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed.
// 
// The data in working storage is substituted and the statement
// is written to the internal reader.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the menu, only.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// e#fh-113 11/20/92  mwalke  New application.
//          08/31/93  mwalke  csp 4.1 conversion.
//                            added check to see which environ
//                            jcl is being submitted from.
// FF175    12/19/96  DSMITH  Regenerated for year 2000.
// *********************
Program FD0N type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FD00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FD0NW00 FD0NW00; // record
  FD0NW01 FD0NW01; // record
  FD0NW02 FD0NW02; // record
  FD0NW5O FD0NW5O; // record
  FDWREC FDWREC; // record
  KUMREC KUMREC; // record
  PC2REC PC2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XCTREC XCTREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FD0NT02; // table
  use FD0NT5O {deleteAfterUse = yes}; // table
  use XCTTBL; // table
  use FD0NM.FD0NM002,  // forms
      FD0NM.FD0NM099,
      FD0NM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFD001: XPFD001();
     /* ------------------------------------------------------------*/
     /* Initialize the working storage areas and variables.*/
     /* ------------------------------------------------------------*/
    ;
    set TA0PM001 initial; /* TA0P input/output link*/
    set FD0NM002 initial; /* M002 input/output*/
    set FD0NM099 initial; /* M099 input/output - main map*/
    set FD0NW00 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA6REC empty; /* Background job subroutine parameters*/
    set XX0XW01 empty; /* current date and time fields*/
    ;
     /* ------------------------------------------------------------*/
     /* set default values*/
     /* ------------------------------------------------------------*/
    ;
    COMMAREA.XGPCD = "02";
    ;
     /* ------------------------------------------------------------*/
     /* Indicate that the output destination must be obtained.*/
     /* ------------------------------------------------------------*/
    ;
    TA6REC.TA6SUBSW = "I"; /* Indicate obtain information*/
    ;
     /* ------------------------------------------------------------*/
     /* Indicate the number of selection lines on the menu.*/
     /* ------------------------------------------------------------*/
    ;
    FD0NW00.FD0NWIXL = 2; /* Number of selection lines*/
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FD0N001; /* Converse the main process*/
    ;
    ;
    FD0N001: FD0N001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FD0N001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FD0N

// Proc valid input request-prod
Function FD0N-02501()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  FD0NW00.FD0NWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FD0NT02.TARTYPE[FD0NWIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      set FD0NW02 empty;
      ;
      FD0NW02.FD0NWRUN = "R"; /* run type parm*/
      FD0NW02.FD0NWRBDT = FD0NW00.FD0NWBDT; /* req beg dt*/
      FD0NW02.FD0NWREDT = FD0NW00.FD0NWEDT; /* req end dt*/
      if (FD0NM002.XCTCD == "*")
        FD0NW02.XCTCD = " "; /* no country code requested*/
      else
        FD0NW02.XCTCD = FD0NM002.XCTCD; /* country code req*/
      end
      if (FD0NM002.KUCCOID == " ")
        FD0NW02.KUCCOID = 0; /* no cust and store id req*/
        FD0NW02.KUMSTRID = 0;
      else
        FD0NW02.KUCCOID = FD0NM002.KUCCOID; /* cust id*/
        FD0NW02.KUMSTRID = FD0NM002.KUMSTRID; /* store id*/
      end
      if (FD0NM002.PC2CUXID == " ")
        FD0NW02.PC2CUXID = " "; /* no cust xfer nbr requested*/
      else
        FD0NW02.PC2CUXID = FD0NM002.PC2CUXID;
      end
      ;
      FD0NW02.FD0NWUID = TA6REC.XURUSRID;
      ;
      TA6REC.TARJCL[TA6INDEX] = FD0NW02.TARJCL; /* Parameters*/
      ;
    else
      ;
      if (FD0NT02.TARTYPE[FD0NWIXT] != " ")
        ;
        FD0NW01.TARJCL = FD0NT02.TARJCL[FD0NWIXT];
        ;
        TA6REC.TARJCL[TA6INDEX] = FD0NW01.TARJCL;
        TA6REC.TARTYPE[TA6INDEX] = FD0NT02.TARTYPE[FD0NWIXT]; /* Type*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FD0NT02.TARJCL[FD0NWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FD0NT02.TARTYPE[FD0NWIXT]; /* Type*/
        ;
      end
      ;
    end
    ;
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FD0NT02.TARJCL[FD0NWIXT] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FD0NW00.FD0NWIXT = FD0NW00.FD0NWIXT + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FDWREC.XXXMODID = "251"; /* Module identification*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    FD0NW00.FD0NMSEL[2] = "*"; /* Indicate function completed*/
    FDWREC.XXXMSGNO = 59; /* export fut by cust run job submitted*/
    ;
    set FD0NM002 initial; /* Clear map output area*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FD0N-02501

Function FD0N-02502()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  FD0NW00.FD0NWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FD0NT5O.TARTYPE[FD0NWIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      set FD0NW5O empty;
      ;
      FD0NW5O.FD0NWRUN = "R"; /* run type parm*/
      FD0NW5O.FD0NWRBDT = FD0NW00.FD0NWBDT; /* req beg dt*/
      FD0NW5O.FD0NWREDT = FD0NW00.FD0NWEDT; /* req end dt*/
      if (FD0NM002.XCTCD == "*")
        FD0NW5O.XCTCD = " "; /* no country code requested*/
      else
        FD0NW5O.XCTCD = FD0NM002.XCTCD; /* country code req*/
      end
      if (FD0NM002.KUCCOID == " ")
        FD0NW5O.KUCCOID = 0; /* no cust and store id req*/
        FD0NW5O.KUMSTRID = 0;
      else
        FD0NW5O.KUCCOID = FD0NM002.KUCCOID; /* cust id*/
        FD0NW5O.KUMSTRID = FD0NM002.KUMSTRID; /* store id*/
      end
      if (FD0NM002.PC2CUXID == " ")
        FD0NW5O.PC2CUXID = " "; /* no cust xfer nbr requested*/
      else
        FD0NW5O.PC2CUXID = FD0NM002.PC2CUXID;
      end
      ;
      FD0NW5O.FD0NWUID = TA6REC.XURUSRID;
      ;
      TA6REC.TARJCL[TA6INDEX] = FD0NW5O.TARJCL; /* Parameters*/
      ;
    else
      ;
      if (FD0NT5O.TARTYPE[FD0NWIXT] != " ")
        ;
        FD0NW01.TARJCL = FD0NT5O.TARJCL[FD0NWIXT];
        ;
        TA6REC.TARJCL[TA6INDEX] = FD0NW01.TARJCL;
        TA6REC.TARTYPE[TA6INDEX] = FD0NT5O.TARTYPE[FD0NWIXT]; /* Type*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FD0NT5O.TARJCL[FD0NWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FD0NT5O.TARTYPE[FD0NWIXT]; /* Type*/
        ;
      end
      ;
    end
    ;
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FD0NT5O.TARJCL[FD0NWIXT] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FD0NW00.FD0NWIXT = FD0NW00.FD0NWIXT + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FDWREC.XXXMODID = "252"; /* Module identification*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    FD0NW00.FD0NMSEL[2] = "*"; /* Indicate function completed*/
    FDWREC.XXXMSGNO = 59; /* export fut by cust run job submitted*/
    ;
    set FD0NM002 initial; /* Clear map output area*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FD0N-02502

// Main process to display a map
Function FD0N001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Invoke the process for each selection entered on menu.*/
   /* 2) After all selections are processed, display the menu.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  if (FD0NW00.FD0NWSWX != "Y") /* EXIT not requested*/
    ;
    if (FD0NW00.FD0NMSEL[1] == "S" /* Line 1 was selected*/
     || TA6REC.TA6SUBSW == "I")    /* or information requested*/
      FD0N010(); /* Specify output destination*/
    end
    ;
    if (FD0NW00.FD0NMSEL[2] == "S") /* Line 2 was selected*/
      FD0N020(); /* nil export rept*/
    end
    ;
  end
  ;
  FD0NW00.FD0NWSWX = "N"; /* Reset exit requested switch*/
  ;
  FD0N990(); /* Report Request Menu*/
  ;
  ;
end // end FD0N001

// Specify output destination
Function FD0N010()
   /* ------------------------------------------------------------*/
   /* Obtain and/or display the output destination for the user.*/
   /* ------------------------------------------------------------*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, indicate the selected function is completed.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (TA6REC.TA6RTNCD == "0") /* Normal return*/
      ;
      if (TA6REC.TA6SUBSW == "I") /* Obtain information only*/
        ;
        TA6REC.TA6SUBSW = "N"; /* Indicate information obtained*/
      else
        FD0NW00.FD0NMSEL[1] = "*"; /* Indicate function completed*/
        ;
      end
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
    /* If user cancelled request, indicate function cancelled.*/
    /* ------------------------------------------------------------*/
    ;
    if (TA6REC.TA6RTNCD == "1") /* User cancelled request*/
      ;
      FD0NW00.FD0NMSEL[1] = "C"; /* Indicate function cancelled*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FDWREC.XXXMODID = "010"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  ;
end // end FD0N010

// nil export report
Function FD0N020()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FD0N021(); /* Format and display the map*/
  ;
  FD0N022(); /* Check attention identifier*/
  ;
  FD0N023(); /* Reset fields to normal intensity*/
  ;
  FD0N024(); /* Verify input fields*/
  ;
  FD0N025(); /* Process valid input request*/
  ;
  ;
end // end FD0N020

// Format and display the map
Function FD0N021()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FDWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/
  ;
  FD0NM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FD0NM002.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FD0NM002.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FD0NM002.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FD0NM002.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FD0NM002.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FDWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (FDWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FDWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FDWREC.XXXMSGNO);
      end /* Message number*/
    else
      FD0NM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FD0NM002.XXXMODID = FDWREC.XXXMODID; /* Module identification*/
    ;
    set FD0NM002 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FD0NM002 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/
  ;
  FDWREC.XXXMSGNO = 0; /* Message number*/
  FDWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  ;
end // end FD0N021

// Check attention identifier
Function FD0N022()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    FD0NW00.FD0NMSEL[2] = "C"; /* Indicate selection cancelled*/
    ;
    set FD0NM002 initial; /* m002 input/output*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    ;
    FD0NW00.FD0NWSWX = "Y"; /* Indicate exit requested*/
    ;
    FD0NW00.FD0NMSEL[2] = " "; /* Reinit selection field*/
    ;
    set FD0NM002 initial; /* m002 input/output*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    ;
    FDWREC.XXXMODID = "022"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FD0N022

// Reset highlighted fields
Function FD0N023()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FD0NM002.PC3POIDT normal; /* po month range*/
  ;
  set FD0NM002.XCTCD normal; /* country code selection*/
  ;
  set FD0NM002.KUCCOID normal; /* customer id*/
  set FD0NM002.KUMSTRID normal; /* store id*/
  ;
  set FD0NM002.PC2CUXID normal; /* cust xfer nbr*/
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FD0NM002.XCTCD == "?") /* product line code*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FDWREC.XXXMODID = "023"; /* Module identification*/
      converseLib.validationFailed(49); /* Indicate PF key not valid, press enter*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FD0NM002.XCTCD == "?") /* country cd list*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "COUNTRY CODE "; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/
      ;
      FD0NM002.XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FD0NM002.XCTCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FDWREC.XXXMODID = "023"; /* Module identification*/
  converseLib.validationFailed(48); /* Indicate press ENTER*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FD0N023

// validate input fields
Function FD0N024()
   /* ------------------------------------------------------------*/
   /* One of the additional data selection fields must be entered.*/
   /* Verify that atleast one of the fields contains a value.*/
   /* ------------------------------------------------------------*/
  if (FD0NM002.PC2CUXID == " " /* cust xfer nbr*/
   && FD0NM002.KUMSTRID == 0   /* cu-stor-id*/
   && FD0NM002.KUCCOID == 0    /* cu-co-id*/
   && FD0NM002.XCTCD == " ")   /* xct-ctry-cd*/
    set FD0NM002.XCTCD cursor, bold;
    set FD0NM002.KUMSTRID bold;
    set FD0NM002.KUCCOID bold;
    set FD0NM002.PC2CUXID bold;
    converseLib.validationFailed(37); /* required field-enter valid data*/
    FDWREC.XXXMODID = "024";
  end
  ;
   /* ------------------------------------------------------------*/
   /* The po date range fields must contain a value.*/
   /* ------------------------------------------------------------*/
  if (FD0NM002.PC3POIDT == 0) /* po date range*/
    set FD0NM002.PC3POIDT cursor, bold;
    converseLib.validationFailed(37); /* required field-enter valid data*/
    FDWREC.XXXMODID = "024";
  end
  ;
   /* ------------------------------------------------------------*/
   /* Validate customer cross reference number if one was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0)
    if (FD0NM002.PC2CUXID == "*") /* cust xfer nbr*/
      set FD0NM002.PC2CUXID cursor, bold;
      converseLib.validationFailed(28); /* required data is missing or inval*/
      FDWREC.XXXMODID = "024";
    else
      if (FD0NM002.PC2CUXID != " ") /* cust xfer nbr*/
        set PC2REC empty;
        PC2REC.XGPCD = "02";
        PC2REC.PC2CUXID = FD0NM002.PC2CUXID;
        FD0NS01(); /* fetch valid customer xref nbr*/
        if (VAGen_SQLCODE == 0)
          FD0NM002.KUCCOID = PC2REC.KUCCOID;
          FD0NM002.KUMSTRID = PC2REC.KUMSTRID;
        end
        if (VAGen_SQLCODE == 100)
          converseLib.validationFailed(62); /* no rec found*/
          FDWREC.XXXMODID = "024";
          set FD0NM002.PC2CUXID cursor, bold;
        end
      end
    end
    ;
    ;
   /* ------------------------------------------------------------*/
   /* Validate customer and store number if entered.*/
   /* ------------------------------------------------------------*/
    ;
    if (FD0NM002.KUCCOID != 0) /* cu-co-id*/
      set KUMREC empty;
      KUMREC.KUCCOID = FD0NM002.KUCCOID;
      KUMREC.KUMSTRID = FD0NM002.KUMSTRID;
      FD0NS02(); /* fetch valid customer and store id*/
      if (VAGen_SQLCODE == 100)
        converseLib.validationFailed(61); /* no rec found*/
        FDWREC.XXXMODID = "024";
        set FD0NM002.KUCCOID cursor, bold;
        set FD0NM002.KUMSTRID bold;
      end
    end
    ;
    if (FD0NM002.KUMSTRID != 0) /* cu-stor-id*/
      if (FD0NM002.KUCCOID == 0) /* cu-co-id*/
        converseLib.validationFailed(28); /* required field*/
        FDWREC.XXXMODID = "024";
        set FD0NM002.KUCCOID cursor, bold;
      end
    end
    ;
   /* ------------------------------------------------------------*/
   /* Enter a valid value, an asterisk '*', or a space for all*/
   /* country code.*/
   /* ------------------------------------------------------------*/
    ;
    if (FD0NM002.XCTCD != "*"
     && FD0NM002.XCTCD != " ")
      XCTREC.XCTCD = FD0NM002.XCTCD;
      if (XCTREC.XCTCD in XCTTBL.XCTCD)
        if (XCTTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          converseLib.validationFailed(32); /* status is inactive*/
          FDWREC.XXXMODID = "024";
          set FD0NM002.XCTCD cursor, bold;
        end
      else
        converseLib.validationFailed(58); /* invalid country code*/
        FDWREC.XXXMODID = "024";
        set FD0NM002.XCTCD cursor, bold;
      end
    end
    ;
  /* ------------------------------------------------------------*/
  /* Validate and format entered po date range.*/
  /* ------------------------------------------------------------*/
    ;
    FD0NW00.FD0NWPODT = FD0NM002.PC3POIDT;
    if (FD0NW00.FD0NWPOCY > 90)
      FD0NW00.FD0NWPOCY = 1900 + FD0NWPOCY;
    else
      FD0NW00.FD0NWPOCY = 2000 + FD0NWPOCY;
    end
    if (FD0NW00.FD0NWPOPM >= 1 /* verify prod mo between 1-12*/
     && FD0NW00.FD0NWPOPM <= 12)
      if (FD0NW00.FD0NWPODM >= 1 /* verify delivery mo between 1-12*/
       && FD0NW00.FD0NWPODM <= 12)
        FD0NW00.FD0NWBDD = 01;
        FD0NW00.FD0NWEDD = 31;
        FD0NW00.FD0NWBMM = FD0NW00.FD0NWPODM;
        FD0NW00.FD0NWEMM = FD0NW00.FD0NWPODM;
        if (FD0NW00.FD0NWPODM < FD0NW00.FD0NWPOPM)
          FD0NW00.FD0NWBCY = 1 + FD0NW00.FD0NWPOCY;
          FD0NW00.FD0NWECY = 1 + FD0NW00.FD0NWPOCY;
        else
          FD0NW00.FD0NWBCY = FD0NW00.FD0NWPOCY;
          FD0NW00.FD0NWECY = FD0NW00.FD0NWPOCY;
        end
      else
        converseLib.validationFailed(34); /* invalid date entered*/
        FDWREC.XXXMODID = "024";
        set FD0NM002.PC3POIDT cursor, bold;
      end
    else
      converseLib.validationFailed(34); /* invalid date entered*/
      FDWREC.XXXMODID = "024";
      set FD0NM002.PC3POIDT cursor, bold;
    end
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
end // end FD0N024

// Process valid input request
Function FD0N025()
   /* ****************************************************************/
   /* Call sub-routine to find which environment the program is*/
   /* executing in...test or prod*/
   /* ****************************************************************/
  ;
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FD0N-02501(); /* format prod jcl*/
    else
      FD0N-02502(); /* else format test jcl*/
    end
  else
    ;
    FDWREC.XXXMODID = "025"; /* module identification*/
    FDWREC.XXXMSGNO = 63; /* Error encountered with print request*/
    exit stack;
  end
  ;
end // end FD0N025

// Report Request Menu
Function FD0N990()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FD0N991(); /* Format and display the map*/
  ;
  FD0N992(); /* Check attention identifier*/
  ;
  FD0N993(); /* Reset fields to normal intensity*/
  ;
  FD0N994(); /* Verify the data that was entered*/
  ;
  FD0N995(); /* Process valid input request*/
  ;
  ;
end // end FD0N990

// Format and display the map
Function FD0N991()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    ;
    FDWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* Otherwise, format the map output area.*/
    /* ------------------------------------------------------------*/
    ;
    set FD0NM099 initial; /* M099 input/output*/
    ;
    FD0NW00.FD0NWIXM = 1; /* Initialize map index*/
    ;
    while (FD0NW00.FD0NWIXM <= FD0NW00.FD0NWIXL) /* Until end of array*/
      ;
      FD0NM099.FD0NMSEL[FD0NWIXM] = FD0NW00.FD0NMSEL[FD0NWIXM];
      ;
      FD0NW00.FD0NWIXM = FD0NW00.FD0NWIXM + 1; /* Increment index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FD0NM099.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FD0NM099.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FD0NM099.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FDWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (FDWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FDWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FDWREC.XXXMSGNO);
      end /* Message number*/
    else
      FD0NM099.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FD0NM099.XXXMODID = FDWREC.XXXMODID; /* Module identification*/
    ;
    set FD0NM099 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FD0NM099 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FDWREC.XXXMSGNO = 0; /* Message number*/
  FDWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FD0NM099.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FD0NM099.CAITEM; /* Application data*/
  ;
  ;
end // end FD0N991

// Check attention identifier
Function FD0N992()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set FD0NM099 initial; /* M099 input/output*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    FD0NS99(); /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSFD001(); /* Exit to another application*/
      ;
      set FD0NM099.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FDWREC.XXXMODID = "992"; /* Module identification*/
      converseLib.validationFailed(05); /* Indicate PF key not valid*/
      ;
    end
    ;
    FD0NS99(); /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to Production*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FD0NM099"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end
    ;
    XSFD001(); /* Exit to another application*/
    ;
    COMMAREA.CATOAP = " "; /* Clear TO application*/
    ;
    FD0NS99(); /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    ;
    FDWREC.XXXMODID = "992"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    FD0NS99(); /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FD0N992

// Reset highlighted fields
Function FD0N993()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  FD0NW00.FD0NWIXM = 1; /* Initialize index*/
  ;
  while (FD0NW00.FD0NWIXM <= FD0NW00.FD0NWIXL) /* Until all lines are reset*/
    ;
    set FD0NM099.FD0NMSEL[FD0NWIXM] initialAttributes; /* Reset select field*/
    ;
    FD0NW00.FD0NWIXM = FD0NW00.FD0NWIXM + 1; /* Increment line index*/
    ;
  end
  ;
  set FD0NM099.CATOAP initialAttributes; /* TO application*/
  set FD0NM099.CAITEM initialAttributes; /* Application data*/
  ;
  ;
end // end FD0N993

// Verify the entered data
Function FD0N994()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    FDWREC.XXXMODID = "994"; /* Module identification*/
    set FD0NM099.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Check for proper select tag.*/
   /* ------------------------------------------------------------*/
  ;
  FD0NW00.FD0NWIXM = FD0NW00.FD0NWIXL; /* Initialize line index*/
  ;
  while (FD0NW00.FD0NWIXM > 0) /* Until all lines are verified*/
    ;
    /* ------------------------------------------------------------*/
     /* Indicate an error if the line was not selected properly.*/
    /* ------------------------------------------------------------*/
    ;
    if (FD0NM099.FD0NMSEL[FD0NWIXM] != FD0NW00.FD0NMSEL[FD0NWIXM]
     && FD0NM099.FD0NMSEL[FD0NWIXM] != " " /* Line was selected*/
     && FD0NM099.FD0NMSEL[FD0NWIXM] != "S") /* and not with an "S"*/
      ;
      FDWREC.XXXMODID = "994"; /* Module identification*/
      set FD0NM099.FD0NMSEL[FD0NWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(13); /* Only "S" is valid*/
      ;
    end
    ;
    FD0NW00.FD0NWIXM = FD0NW00.FD0NWIXM - 1; /* Decrement line number*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FD0NS99(); /* Exit to display map*/
  end
  ;
  ;
end // end FD0N994

// Process valid input request
Function FD0N995()
   /* ------------------------------------------------------------*/
   /* Save the selections in the working storage array.*/
   /* ------------------------------------------------------------*/
  ;
  move FD0NM099.FD0NMSEL to FD0NW00.FD0NMSEL[1] for all; /* Menu selections*/
  ;
   /* ------------------------------------------------------------*/
   /* If specify destination selected, indicate to subroutine to*/
   /* display output destination, but, do not submit any JCL.*/
   /* ------------------------------------------------------------*/
  ;
  if (FD0NW00.FD0NMSEL[1] == "S") /* Specify destination selected*/
    TA6REC.TA6SUBSW = "N"; /* Indicate do not submit JCL*/
  end
  ;
  ;
end // end FD0N995

// fetch dprodc.vprdcu01 row
Function FD0NS01()
   /* ------------------------------------------------------------*/
   /* fetch customer cross reference number from dprodc.vprdcu01*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FDWREC.XXXMODID = "S01"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DPRODC.VPRDCU01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FDWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FD0NS01

// fetch dcust.vcmpny01 row
Function FD0NS02()
   /* ------------------------------------------------------------*/
   /* fetch customer id & store id from dcust.vstore01*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FDWREC.XXXMODID = "S02"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DCUST.VSTORE01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FDWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCUST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTORE01"; /* Table view name*/
  TA1REC.TA1TBLKE = KUMREC.KUMGRP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FD0NS02

// reset pending selections
Function FD0NS99()
   /* ------------------------------------------------------------*/
   /* Reset any pending selections in working storage.*/
   /* ------------------------------------------------------------*/
  ;
  FD0NW00.FD0NWIXM = 1; /* Initialize map index*/
  ;
  while (FD0NW00.FD0NWIXM <= FD0NW00.FD0NWIXL) /* Until end of array*/
    ;
    if (FD0NW00.FD0NMSEL[FD0NWIXM] == "S") /* Entry is selected*/
      FD0NW00.FD0NMSEL[FD0NWIXM] = " "; /* Reset entry*/
    end
    ;
    FD0NW00.FD0NWIXM = FD0NW00.FD0NWIXM + 1; /* Increment index*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Exit to display the selection menu map.*/
   /* ------------------------------------------------------------*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FD0NS99

//*** RECORD=FD0NW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FD0NW00 type basicRecord
  10 FD0NWFOR FD0NWFOR ; 
  10 FD0NWJOB FD0NWJOB ; 
  10 FD0NMSEL FD0NMSEL [2] ; 
  10 FD0NWIXL FD0NWIXL ; 
  10 FD0NWIXM FD0NWIXM ; 
  10 FD0NWIX2 FD0NWIX2 ; 
  10 FD0NWIXT FD0NWIXT ; 
  10 FD0NWSWX FD0NWSWX ; 
  10 FD0NWIDX FD0NWIDX ; 
  10 FD0NWSLF FD0NWSLF ; 
  10 FD0NWERF FD0NWERF ; 
  10 FD0NWPODT FD0NWPODT ; 
    15 FD0NWPOCY num(5) ; // pc-po-id ccyy
    15 FD0NWPOPM num(2) ; // pc-po-id production month
    15 FD0NWPODM FD0NWPODM ; 
  10 FD0NWBDT FD0NWBDT ; 
    15 FD0NWBCY num(5) ; // requested ccyy
    15 FD0NWBMM FD0NWBMM ; 
    15 FD0NWBDD FD0NWBDD ; 
  10 FD0NWEDT FD0NWEDT ; 
    15 FD0NWECY num(5) ; // requested ccyy
    15 FD0NWEMM FD0NWEMM ; 
    15 FD0NWEDD FD0NWEDD ; 
end // end FD0NW00

//*** RECORD=FD0NW01 ****
// ------------------------------------------------------------
// Job and form identification variables in the JCL statements.
// ------------------------------------------------------------
// ***********************
Record FD0NW01 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(26) ; 
    10 FD0NWCCD FD0NWCCD ; 
    10 * char(38) ; 
  5 TARTYPE TARTYPE ; 
end // end FD0NW01

//*** RECORD=FD0NW02 ****
// ------------------------------------------------------------
// Parameters for FD3200 - nil export report
// ------------------------------------------------------------
// ***********************
Record FD0NW02 type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0NWRUN FD0NWRUN ; 
    10 FD0NWRBDT FD0NWRBDT ; 
    10 FD0NWREDT FD0NWREDT ; 
    10 XCTCD XCTCD ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 PC2CUXID PC2CUXID ; 
    10 FD0NWUID FD0NWUID ; 
    10 * char(38) ; 
end // end FD0NW02

//*** RECORD=FD0NW5O ****
// ------------------------------------------------------------
// Parameters for FD3200 - nil export report
// test version
// ------------------------------------------------------------
// ***********************
Record FD0NW5O type basicRecord
  5 TARJCL TARJCL ; 
    10 FD0NWRUN FD0NWRUN ; 
    10 FD0NWRBDT FD0NWRBDT ; 
    10 FD0NWREDT FD0NWREDT ; 
    10 XCTCD XCTCD ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 PC2CUXID PC2CUXID ; 
    10 FD0NWUID FD0NWUID ; 
    10 * char(38) ; 
end // end FD0NW5O

// selection field
DataItem FD0NMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// requested dd
DataItem FD0NWBDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// requested beg date
DataItem FD0NWBDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// requested mm
DataItem FD0NWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cond code
DataItem FD0NWCCD char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// requested dd
DataItem FD0NWEDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// requested end date
DataItem FD0NWEDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// requested mm
DataItem FD0NWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error flag
DataItem FD0NWERF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forms code
DataItem FD0NWFOR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work index
DataItem FD0NWIDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Secondary index for map fields
DataItem FD0NWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// limit for map fields index
DataItem FD0NWIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map fields
DataItem FD0NWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for table fields
DataItem FD0NWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Job identification
DataItem FD0NWJOB char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pc-po-id delivery month
DataItem FD0NWPODM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pc-po-id-mo-rng
DataItem FD0NWPODT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// requested beg date
DataItem FD0NWRBDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// requested end date
DataItem FD0NWREDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// run type
DataItem FD0NWRUN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection flag
DataItem FD0NWSLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// exit requested switch
DataItem FD0NWSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nike user id
DataItem FD0NWUID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

