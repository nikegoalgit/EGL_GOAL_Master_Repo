package pw05;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import pk.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PW05 ****
// This application allows a user to enter picking messages
// for a specific whse.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          05/14/91  sjohns  new program
// FED-X    02/19/93  MWILSO  ADD NEW MESSAGE TYPE CODES
//          03/19/93  MWILSO  truncate the msg typ desc on the
//                            map so users can't enter the full
//                            40 char msg because only 36 chars
//                            fit on the 81/2 X 11 packing list
//                            when printing double wide magnum.
// csp4.1  09/24/93  kande1   record pw05w03 added and logic
//                            changed to handle problem with
//                            the call to io5910 which occurred
//                            during csp conversion
// ------------------------------------------------------------
// *********************
Program PW05 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PKWREC PKWREC; // record
  PW05W00 PW05W00; // record
  PW05W01 PW05W01; // record
  PW05W02 PW05W02; // record
  PW05W03 PW05W03; // record
  PWTREC PWTREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PW05T01; // table
  use XWHTBL; // table
  use PW05M.PW05M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set PW05M001 initial; /* M001 input/output*/
    set PW05W00 empty; /* Working storage*/
    set PW05W01 empty; /* M001 display storage*/
    set PW05W02 empty; /* M001 temporary storage*/
    set PW05W03 empty; /* select option record*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA5REC empty; /* temporary storage area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/
    PW05W00.XXXTSLEN = 1000;

    PW05W00.PW05WSWR = "N"; /* Request for data switch*/
    PW05W00.PW05WSWF = "Y"; /* format screen data switch*/

    PW05W01.XWHCD = PKWREC.XWHCD;
    PW05W01.XWHABRV = PKWREC.XWHABRV;

    PW05W01.PWTPKMTP = "PL";
    if (PW05W01.PWTPKMTP in PW05T01.PWTPKMTP)
      PW05W01.PW05WMTD = PW05T01.PW05WMTD[sysVar.arrayIndex];
    end

     /* ------------------------------------------------------------*/
     /* Flow to mainline processing*/
     /* ------------------------------------------------------------*/

    goto PW05001;

    PW05001: PW05001();
    goto PW05001;
  end // end main
end // end PW05

// Inquire/maintainance m001
Function PW05001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW05100(); /* Obtain the data to display*/

  PW05200(); /* Format and display the map*/

  PW05300(); /* Check attention identifier*/

  PW05400(); /* Reset fields to normal intensity*/

  PW05500(); /* Verify the entered data*/

  PW05600(); /* Process valid input request*/

end // end PW05001

// Obtain the data to display
Function PW05100()

   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PW05W00.PW05WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* purge temporary storage*/
   /* ------------------------------------------------------------*/

  PW05S01(); /* purge temporary storage*/

   /* ------------------------------------------------------------*/
   /* get all picking messages*/
   /* ------------------------------------------------------------*/

  PW05S02(); /* 's1' dpick.vpkmsg01*/

  PW05S03(); /* 'n1' dpick.vpkmsg01*/

  if (SQLCA.VAGen_SQLCODE == 100
   && PW05W00.PW05WMSG == 0)
    if ("A" in PW05M001.PW05MACT)
      converseLib.validationFailed(106); /* hit enter to process changes*/
    else
      converseLib.validationFailed(360); /* not found, a to add*/
    end
    PW05W00.XXXLOCID = "100";
    set PW05M001.PW05MACT[1] cursor;
  end

  PW05W00.PW05WTMS = 0;

  PW05W00.PW05WIDX = 1;
  while (SQLCA.VAGen_SQLCODE == 0)

    /* ------------------------------------------------------*/
     /* load message data into t/s*/
    /* ------------------------------------------------------*/

    PW05W02.PWTPKMSG[PW05WIDX] = PWTREC.PWTPKMSG;
    PW05W02.PWTPKMNO[PW05WIDX] = PWTREC.PWTPKMNO;

    PW05W00.PW05WTMS = PW05W00.PW05WTMS + 1;

    PW05S03(); /* 'n1' dpick.vpkmsg01*/

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (PW05W00.PW05WIDX == 15) /* Page is full*/

      PW05W02.PW05WNLD = PW05W00.PW05WIDX; /* nbr of lines loaded*/
      PW05S05(); /* Add page to temp storage*/
    else
      PW05W00.PW05WIDX = PW05W00.PW05WIDX + 1;
    end
  end

  PW05S04(); /* ; 'c1' dpick.vsplsz01*/

   /* ------------------------------------------------------------*/
   /* Add any partially filled page to the storage queue.*/
   /* ------------------------------------------------------------*/

  if (PW05W00.PW05WIDX > 1) /* Page is full*/

    PW05W02.PW05WNLD = PW05W00.PW05WIDX - 1;
    PW05S05(); /* Add page to temp storage*/
  end

   /* ------------------------------------------------------------*/
   /* now add a blank page for adds*/
   /* ------------------------------------------------------------*/

  PW05W02.PW05WNLD = 0;
  PW05S05(); /* Add page to temp storage*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW05W00.XXXTSPAG = 1;
  PW05W00.PW05WSWR = "N"; /* Request for data switch*/
  PW05W01.CACHGFL = "Y"; /* data is available for change*/

end // end PW05100

// Format and converse the map
Function PW05200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PW05W00.PW05WMSG = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PW05W00.PW05WSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PW05W00.PW05WSWF == "Y") /* Map must be formatted*/
      PW05210(); /* Format the data on the map*/
    end

  end

  PW05M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PW05M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW05M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PW05W00.PW05WMSG != 0) /* Message to display*/
    if (PW05W00.PW05WMSG == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PW05W00.PW05WMSG);
    end /* error message number*/
    PW05M001.XXXLOCID = PW05W00.XXXLOCID; /* Module identification*/
    set PW05M001 alarm; /* Indicate sound alarm*/
  end

  converse PW05M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW05W00.XXXLOCID = " "; /* Module identification*/
  PW05W00.PW05WMSG = 0;

  COMMAREA.CATOAP = PW05M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW05M001.CAITEM; /* Application data*/


end // end PW05200

// Format display data
Function PW05210()

   /* ------------------------------------------------------------*/
   /* init map pw05m001*/
   /* ------------------------------------------------------------*/

  set PW05M001 initial; /* m001 input/ouput area*/

  PW05W00.PW05WSWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* Format pw05m001 using key data from w01*/
   /* ------------------------------------------------------------*/

  PW05M001.XWHCD = PW05W01.XWHCD; /* warehouse code*/
  PW05M001.XWHABRV = PW05W01.XWHABRV; /* warehous abrv desc*/

  PW05M001.PW05MMTP = PW05W01.PWTPKMTP;
  PW05M001.PW05MMTD = PW05W01.PW05WMTD; /* type desc*/

  if (PW05W01.XWHCD == " ")
    set PW05M001.XWHCD cursor;
  else
    if (PW05W01.PWTPKMTP == " ")
      set PW05M001.PW05MMTP cursor;
    else
      if (converseVar.validationMsgNum == 0)
        set PW05M001.PW05MACT[1] cursor;
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* if data has not been loaded bypass load map fields*/
   /* ------------------------------------------------------------*/

  if (PW05W01.CACHGFL != "Y")
    return;
  end


   /* ------------------------------------------------------------*/
   /* load "current" and "new" product information from t/s*/
   /* ------------------------------------------------------------*/

  PW05S06(); /* read temporary storage*/

  PW05W00.PW05WIDX = 1;
  while (PW05W00.PW05WIDX <= PW05W02.PW05WNLD) /* process t/s*/

    PW05M001.PW05MMNO[PW05WIDX] = PW05W02.PWTPKMNO[PW05WIDX];
    PW05M001.PW05MMSG[PW05WIDX] = PW05W02.PWTPKMSG[PW05WIDX];

    if (PW05M001.PW05MMSG[PW05WIDX] == " ")
      PW05M001.PW05MACT[PW05WIDX] = "C";
      set PW05M001.PW05MMSG[PW05WIDX] cursor;
    else
      PW05M001.PW05MACT[PW05WIDX] = " ";
    end

    PW05W00.PW05WIDX = PW05W00.PW05WIDX + 1;

  end

end // end PW05210

// Check attention ident
Function PW05300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh map*/
    set PW05W01 empty; /* header data*/

    PW05W01.XWHCD = PKWREC.XWHCD;
    PW05W01.XWHABRV = PKWREC.XWHABRV;

    PW05W00.PW05WSWR = "N"; /* request for data*/
    PW05W00.PW05WSWF = "Y"; /* format screen m001*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PW05M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PW05S01(); /* purge temp storage*/

      XSPKS01(); /* Exit to another application*/

      PW05W00.PW05WSWR = "N"; /* request for data*/
      PW05W00.PW05WSWF = "Y"; /* format screen m001*/

      set PW05M001.CATOAP cursor, bold; /* Highlight*/

    else

      PW05W00.XXXLOCID = "300"; /* Module identification*/
      converseLib.validationFailed(12); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PW05M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PK0A"; /* Application find code*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0C"; /* Application find code*/
    end


    XSPKS01(); /* Exit to another application*/

    PW05W00.PW05WSWR = "N"; /* request for data*/
    PW05W00.PW05WSWF = "Y"; /* format screen m001*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   
   && converseVar.eventKey not pf8) 

    PW05W00.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(12); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PW05300

// Reset highlighted fields
Function PW05400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PW05M001.XWHCD initialAttributes; /* warehouse code*/
  set PW05M001.PW05MMTP initialAttributes;

  PW05W00.PW05WIDX = 1;

  while (PW05W00.PW05WIDX <= 15)

    set PW05M001.PW05MACT[PW05WIDX] initialAttributes;
    set PW05M001.PW05MMNO[PW05WIDX] initialAttributes;
    set PW05M001.PW05MMSG[PW05WIDX] initialAttributes;

    PW05W00.PW05WIDX = PW05W00.PW05WIDX + 1; /* increment load index*/
  end

  set PW05M001.CATOAP initialAttributes;
  set PW05M001.CAITEM initialAttributes;


end // end PW05400

// Verify the entered data
Function PW05500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PW05W00.XXXLOCID = "500"; /* Module identification*/
    set PW05M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* verify request to page forward(pf7) or backwards(pf8), and*/
   /* check all modifiable fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)

    PW05520(); /* check key fields*/

    PW05530(); /* check detail fields*/

    if (converseVar.validationMsgNum != 0)
      exit stack; /* display error message*/
    end

    PW05510(); /* verify scroll request*/

    if (converseVar.validationMsgNum != 0)
      exit stack; /* display error message*/
    end

    return;

  end

   /* ------------------------------------------------------------*/
   /* on enter, validate all fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    /* ------------------------------------------------------------*/
     /* if key fields change, it is an error if any detail field*/
     /* is changed.*/
    /* ------------------------------------------------------------*/

    if (PW05M001.XWHCD != PW05W01.XWHCD
     || PW05M001.XWHCD == " "
     || PW05M001.PW05MMTP != PW05W01.PWTPKMTP
     || PW05M001.PW05MMTP == " ")

      PW05540(); /* validate key fields*/

      if (converseVar.validationMsgNum == 0)
        PW05W00.PW05WSWR = "Y"; /* request data switch*/
      end
    else
      PW05560(); /* check detail for change*/
      if (PW05W00.PW05WSWR != "Y")
        PW05550(); /* validate detail fields*/
      end
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end

end // end PW05500

// verify scroll request
Function PW05510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PW05W00.XXXTSPAG < 2)       /* and no previous pages*/

    PW05W00.XXXLOCID = "510"; /* Module identification*/
    converseLib.validationFailed(37); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PW05W00.XXXTSPAG >= PW05W00.TA5TSQIX) /* and no more pages*/

    PW05W00.XXXLOCID = "510"; /* Module identification*/
    converseLib.validationFailed(38); /* No more pages to display*/

  end


end // end PW05510

// check key fields
Function PW05520()
   /* -----------------------------------------------------*/
   /* if a key field has changed, error*/
   /* -----------------------------------------------------*/

  if (PW05W01.PWTPKMTP != PW05M001.PW05MMTP)
    set PW05M001.PW05MMTP cursor, bold;
    converseLib.validationFailed(379);
    PW05W00.XXXLOCID = "520";
  end

  if (PW05W01.XWHCD != PW05M001.XWHCD) /* whse code*/
    set PW05M001.XWHCD cursor, bold;
    converseLib.validationFailed(379);
    PW05W00.XXXLOCID = "520";
  end

end // end PW05520

// check detail fields
Function PW05530()
   /* -----------------------------------------------------*/
   /* if detail fields has changed, error*/
   /* -----------------------------------------------------*/

  PW05W00.PW05WIDX = PW05W02.PW05WNLD; /* nbr of lines loaded*/

  while (PW05W00.PW05WIDX > 0) /* process temp storage*/

    if (PW05W02.PWTPKMSG[PW05WIDX] != PW05M001.PW05MMSG[PW05WIDX])
      set PW05M001.PW05MMSG[PW05WIDX] cursor, bold;
      converseLib.validationFailed(379);
      PW05W00.XXXLOCID = "530";
    end

    if (PW05W02.PWTPKMNO[PW05WIDX] != PW05M001.PW05MMNO[PW05WIDX])
      set PW05M001.PW05MMNO[PW05WIDX] cursor, bold;
      converseLib.validationFailed(379);
      PW05W00.XXXLOCID = "530";
    end

    if (PW05M001.PW05MACT[PW05WIDX] != " ")
      set PW05M001.PW05MACT[PW05WIDX] cursor, bold;
      converseLib.validationFailed(379);
      PW05W00.XXXLOCID = "530";
    end

    PW05W00.PW05WIDX = PW05W00.PW05WIDX - 1;
  end

end // end PW05530

// validate key fields
Function PW05540()
   /* ------------------------------------------------------------*/
   /* Edit the key fields starting at the bottom*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* message type*/
   /* ------------------------------------------------------------*/

  if (PW05M001.PW05MMTP != " ")
    if (PW05M001.PW05MMTP in PW05T01.PWTPKMTP)
       /* next sentence*/
    else
      set PW05M001.PW05MMTP cursor, bold;
      converseLib.validationFailed(342); /* invalid code*/
      PW05W00.XXXLOCID = "540";
    end
  else
    set PW05M001.PW05MMTP cursor, bold;
    converseLib.validationFailed(4); /* required field*/
    PW05W00.XXXLOCID = "540";
  end

   /* ------------------------------------------------------------*/
   /* warehouse code*/
   /* ------------------------------------------------------------*/

  if (PW05M001.XWHCD != " ")
    if (PW05M001.XWHCD in XWHTBL.XWHCD)
       /* next sentence*/
    else
      set PW05M001.XWHCD cursor, bold;
      converseLib.validationFailed(2); /* invalid warehouse*/
      PW05W00.XXXLOCID = "540";
    end
  else
    set PW05M001.XWHCD cursor, bold;
    converseLib.validationFailed(341); /* warehouse is required*/
    PW05W00.XXXLOCID = "540";
  end

end // end PW05540

// validate detail data
Function PW05550()
   /* ------------------------------------------------------------*/
   /* Edit the detail fields starting at the bottom*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* if an add is involved,*/
   /* calculate the next sequence number in case it is needed*/
   /* ------------------------------------------------------------*/

  if ("A" in PW05M001.PW05MACT)
    PW05S14(); /* get highest sequence nbr*/
    if (SQLCA.VAGen_SQLCODE == 0)
      PW05W00.PWTPKMNO = PWTREC.PWTPKMNO;
    else
      PW05W00.PWTPKMNO = 0;
    end
  end

  PW05W00.PW05WTAD = 0; /* number of adds*/
  PW05W00.PW05WIDX = 15;
  while (PW05W00.PW05WIDX > 0)

    /* ------------------------------------------------------------*/
     /* Only need to edit the line if something has changed*/
    /* ------------------------------------------------------------*/

    if (PW05M001.PW05MACT[PW05WIDX] != " "
     || PW05M001.PW05MMNO[PW05WIDX] != PW05W02.PWTPKMNO[PW05WIDX]
     || PW05M001.PW05MMSG[PW05WIDX] != PW05W02.PWTPKMSG[PW05WIDX])

      /* ------------------------------------------------------------*/
       /* if add, accumulate total adds and move calculated seq nbr*/
       /* to screen so we can edit it.*/
      /* ------------------------------------------------------------*/
      if (PW05M001.PW05MACT[PW05WIDX] == "A")
        PW05W00.PW05WTAD = PW05W00.PW05WTAD + 1;
        if (PW05M001.PW05MMNO[PW05WIDX] == 0)
          PW05W00.PWTPKMNO = PW05W00.PWTPKMNO + 1;
          PW05M001.PW05MMNO[PW05WIDX] = PW05W00.PWTPKMNO;
        end
      end

      /* ------------------------------------------------------------*/
       /* action code*/
      /* ------------------------------------------------------------*/
      if (PW05M001.PW05MACT[PW05WIDX] == "A"
       || PW05M001.PW05MACT[PW05WIDX] == "C"
       || PW05M001.PW05MACT[PW05WIDX] == "D"
       || PW05M001.PW05MACT[PW05WIDX] == "I")
         /* next sentence*/
      else
        set PW05M001.PW05MACT[PW05WIDX] cursor, bold;
        converseLib.validationFailed(35); /* invalid action code*/
        PW05W00.XXXLOCID = "550";
      end
      /* ------------------------------------------------------------*/
       /* message number*/
      /* ------------------------------------------------------------*/
      if (PW05M001.PW05MMNO[PW05WIDX] != PW05W02.PWTPKMNO[PW05WIDX])
        if (PW05M001.PW05MMNO[PW05WIDX] < 0)
          set PW05M001.PW05MMNO[PW05WIDX] cursor, bold;
          converseLib.validationFailed(342); /* invalid field*/
          PW05W00.XXXLOCID = "550";
        end
      end

      /* ------------------------------------------------------------*/
       /* cross field edits*/
      /* ------------------------------------------------------------*/
      /* ***** if action field is blank, msg and msg nbr cannot chng*/
      if (PW05M001.PW05MACT[PW05WIDX] == " ")
        if (PW05M001.PW05MMNO[PW05WIDX] != 0
         || PW05M001.PW05MMSG[PW05WIDX] != " ")
          set PW05M001.PW05MACT[PW05WIDX] cursor, bold;
          converseLib.validationFailed(43); /* requred field*/
          PW05W00.XXXLOCID = "550";
        end
      end

      /* ***** if a, message is required*/
      if (PW05M001.PW05MACT[PW05WIDX] == "A")
        if (PW05M001.PW05MMSG[PW05WIDX] == " ")
          set PW05M001.PW05MMSG[PW05WIDX] cursor, bold;
          converseLib.validationFailed(341); /* requred field*/
          PW05W00.XXXLOCID = "550";
        end
      end

      /* ***** if c, message and msg nbr are required*/
      if (PW05M001.PW05MACT[PW05WIDX] == "C")
        if (PW05M001.PW05MMSG[PW05WIDX] == " ")
          set PW05M001.PW05MMSG[PW05WIDX] cursor, bold;
          converseLib.validationFailed(341); /* requred field*/
          PW05W00.XXXLOCID = "550";
        end
        if (PW05M001.PW05MMNO[PW05WIDX] == 0)
          set PW05M001.PW05MMNO[PW05WIDX] cursor, bold;
          converseLib.validationFailed(341); /* requred field*/
          PW05W00.XXXLOCID = "550";
        end
      end

      /* ***** if d or i, detail cannot be changed*/
      if (PW05M001.PW05MACT[PW05WIDX] == "I"
       || PW05M001.PW05MACT[PW05WIDX] == "D")
        if (PW05M001.PW05MMSG[PW05WIDX] != PW05W02.PWTPKMSG[PW05WIDX])
          set PW05M001.PW05MMSG[PW05WIDX] cursor, bold;
          converseLib.validationFailed(379); /* cannot change data*/
          PW05W00.XXXLOCID = "550";
        end
        if (PW05M001.PW05MMNO[PW05WIDX] != PW05W02.PWTPKMNO[PW05WIDX])
          set PW05M001.PW05MMNO[PW05WIDX] cursor, bold;
          converseLib.validationFailed(379); /* cannot change data*/
          PW05W00.XXXLOCID = "550";
        end
      end

      /* ***** if c, d or i, previous detail must be in w02*/
      if (PW05M001.PW05MACT[PW05WIDX] == "I"
       || PW05M001.PW05MACT[PW05WIDX] == "D"
       || PW05M001.PW05MACT[PW05WIDX] == "C")
        if (PW05W02.PWTPKMNO[PW05WIDX] == 0)
          set PW05M001.PW05MACT[PW05WIDX] cursor, bold;
          converseLib.validationFailed(191); /* add only on this line*/
          PW05W00.XXXLOCID = "550";
        end
      end
      /* ------------------------------------------------------------*/
      /* ***** if add check for duplicate*/
      if (PW05M001.PW05MACT[PW05WIDX] == "A")
        if (PW05W02.PWTPKMNO[PW05WIDX] != 0)
          if (PW05M001.PW05MMNO[PW05WIDX] == PW05W02.PWTPKMNO[PW05WIDX])
            set PW05M001.PW05MACT[PW05WIDX] cursor, bold;
            converseLib.validationFailed(161); /* can not add duplicate*/
            PW05W00.XXXLOCID = "550";
          end
        end
      end
      /* ------------------------------------------------------------*/
       /* if message number has changed, check for duplicates*/
      /* ------------------------------------------------------------*/
      if (PW05M001.PW05MMNO[PW05WIDX] != PW05W02.PWTPKMNO[PW05WIDX]
       && PW05M001.PW05MMNO[PW05WIDX] != 0
       && converseVar.validationMsgNum == 0)

        PW05551(); /* check for duplicates*/

      end
    end

    PW05W00.PW05WIDX = PW05W00.PW05WIDX - 1;

  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* ------------------------------------------------------------*/
   /* if any action is i, no other actions allowed (including i)*/
   /* ------------------------------------------------------------*/

  if ("I" in PW05M001.PW05MACT)

    PW05W00.PW05WIDX = 15;
    while (PW05W00.PW05WIDX > 0)

      if (PW05M001.PW05MACT[PW05WIDX] != " ")
        if (PW05M001.PW05MACT[PW05WIDX] == "I"
         && PW05W00.PW05WIDX == sysVar.arrayIndex) /* first i on screen*/
           /* next sentence*/
        else
          set PW05M001.PW05MACT[PW05WIDX] cursor, bold;
          converseLib.validationFailed(35); /* invalid action code*/
          PW05W00.XXXLOCID = "550";
        end
      end
      PW05W00.PW05WIDX = PW05W00.PW05WIDX - 1;
    end
  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* ------------------------------------------------------------*/
   /* only 20 messages are allowed*/
   /* ------------------------------------------------------------*/

  if ("I" in PW05M001.PW05MACT
   && PW05W00.PW05WTMS > 19)
    set PW05M001.PW05MACT[sysVar.arrayIndex] cursor, bold;
    converseLib.validationFailed(388); /* only 20 messages allowed*/
    PW05W00.XXXLOCID = "550";
  end

  if ("A" in PW05M001.PW05MACT)
    PW05W00.PW05WTMA = PW05W00.PW05WTMS + PW05W00.PW05WTAD;
    if (PW05W00.PW05WTMA > 20)
      PW05W00.PW05WIDX = 15;
      while (PW05W00.PW05WIDX > 0)

        if (PW05M001.PW05MACT[PW05WIDX] == "A")
          set PW05M001.PW05MACT[PW05WIDX] cursor, bold;
          converseLib.validationFailed(388); /* only 20 messages allowed*/
          PW05W00.XXXLOCID = "550";
        end
        PW05W00.PW05WIDX = PW05W00.PW05WIDX - 1;
      end
    end
  end



end // end PW05550

// check for duplicates
Function PW05551()
   /* ------------------------------------------------------------*/
   /* Check the current detail (widx) for duplicates on the scrn*/
   /* ------------------------------------------------------------*/

  PW05W00.PW05WIX2 = 15;
  while (PW05W00.PW05WIX2 > 0)

    if (PW05M001.PW05MMNO[PW05WIX2] == PW05M001.PW05MMNO[PW05WIDX]
     && PW05WIX2 != PW05WIDX)

      set PW05M001.PW05MMNO[PW05WIDX] cursor, bold;
      converseLib.validationFailed(161);
      PW05W00.XXXLOCID = "551";

    end

    PW05W00.PW05WIX2 = PW05W00.PW05WIX2 - 1;

  end

   /* ------------------------------------------------------------*/
   /* Check for duplicates on database*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0
   && PW05M001.PW05MMNO[PW05WIDX] in PW05W02.PWTPKMNO
   && PW05M001.PW05MACT[PW05WIDX] == "C")
     /* next sentence*/

  else

    PW05S20(); /* 's' dpick.vpkmsg01- map*/

    if (SQLCA.VAGen_SQLCODE == 0)

      set PW05M001.PW05MMNO[PW05WIDX] cursor, bold;
      converseLib.validationFailed(161);
      PW05W00.XXXLOCID = "551";

    end
  end

end // end PW05551

// check detail for change
Function PW05560()
   /* ------------------------------------------------------------*/
   /* Edit the detail fields starting at the bottom*/
   /* ------------------------------------------------------------*/

  PW05W00.PW05WIDX = 1;
  while (PW05W00.PW05WIDX <= 15)

    if (PW05M001.PW05MACT[PW05WIDX] != " "
     || PW05M001.PW05MMNO[PW05WIDX] != PW05W02.PWTPKMNO[PW05WIDX]
     || PW05M001.PW05MMSG[PW05WIDX] != PW05W02.PWTPKMSG[PW05WIDX])

      PW05W00.PW05WNDS = "Y";
      return;

    end

    PW05W00.PW05WIDX = PW05W00.PW05WIDX + 1;

  end

  PW05W00.PW05WSWR = "Y"; /* request for data*/

end // end PW05560

// Process valid input request
Function PW05600()

   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/

  PW05W00.PW05WSWF = "Y"; /* set format map switch*/

   /* ------------------------------------------------------------*/
   /* update w01 with new keys*/
   /* ------------------------------------------------------------*/

  PW05W01.XWHCD = PW05M001.XWHCD;
  if (PW05W01.XWHCD in XWHTBL.XWHCD)
    PW05W01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end
  PW05W01.PWTPKMTP = PW05M001.PW05MMTP;
  if (PW05W01.PWTPKMTP in PW05T01.PWTPKMTP)
    PW05W01.PW05WMTD = PW05T01.PW05WMTD[sysVar.arrayIndex];
  end

  if (PW05W00.PW05WSWR == "Y") /* KEY DATA MODIFIED*/
    return;
  end

   /* --------------------------------------------------------*/
   /* request to scroll backwards*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf7)
    PW05W00.XXXTSPAG = PW05W00.XXXTSPAG - 1;
    return;
  end

   /* --------------------------------------------------------*/
   /* request to scroll forward*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf8)
    PW05W00.XXXTSPAG = PW05W00.XXXTSPAG + 1;
    return;
  end

   /* ------------------------------------------------------------*/
   /* if detail data was changed, do updates.*/
   /* ------------------------------------------------------------*/

  if (PW05W00.PW05WNDS == "Y") /* detail data changed*/

    PW05610(); /* update all databases*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();

    PW05W00.PW05WMSG = 32; /* updates successful*/
    PW05W00.XXXLOCID = "600";

    PW05W00.PW05WSWR = "Y"; /* data requested*/

  end

end // end PW05600

// update databases
Function PW05610()
   /* ------------------------------------------------------------*/
   /* update databases*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get date and time*/

   /* ------------------------------------------------------------*/
   /* if insert, insert a blank row and adjust all other seq*/
     /* numbers up by 1.*/
   /* ------------------------------------------------------------*/

  if ("I" in PW05M001.PW05MACT)

    PW05611(); /* insert processing*/

    return;
  end

   /* ------------------------------------------------------------*/
   /* delete all messages whose action is 'c' and whose sequence*/
   /* number has changed. Also delete action 'd'.*/
   /* ------------------------------------------------------------*/

  if ("C" in PW05M001.PW05MACT
   || "D" in PW05M001.PW05MACT)

    PW05W00.PW05WIDX = 1; /* set index*/

    while (PW05W00.PW05WIDX <= 15) /* more on the screen*/

      if (PW05M001.PW05MACT[PW05WIDX] == "C"
       && PW05M001.PW05MMNO[PW05WIDX] != PW05W02.PWTPKMNO[PW05WIDX])
        PW05S07(); /* 'd' dpick.vpkmsg01*/
      end

      if (PW05M001.PW05MACT[PW05WIDX] == "D")
        PW05S07(); /* 'd' dpick.vpkmsg01*/
      end
      PW05W00.PW05WIDX = PW05W00.PW05WIDX + 1;
    end
  end

   /* ------------------------------------------------------------*/
   /* update picking messages that have changed or been added*/
   /* ------------------------------------------------------------*/

  PW05W00.PW05WIDX = 1; /* set index*/

  while (PW05W00.PW05WIDX <= 15) /* more on the screen*/

    if (PW05M001.PW05MACT[PW05WIDX] == "C")
      if (PW05M001.PW05MMNO[PW05WIDX] != PW05W02.PWTPKMNO[PW05WIDX])
        PW05S08(); /* 'a' dpick.vpkmsg01 - map values*/
      else
        PW05S11(); /* 's' dpick.vpkmsg01 - old*/
        PW05S09(); /* 'u' dpick.vpkmsg01*/
      end
    end

    if (PW05M001.PW05MACT[PW05WIDX] == "A")
         /* IF PW05M001.PW05MMNO(PW05WIDX) NE 0;*/
      PW05S08(); /* 'a' dpick.vpkmsg01 - map values*/
         /* ELSE ;*/
          /* PW05S14                   ; calc seq nbr*/
          /* PW05S12                   ; 'a' dpick.vpkmsg01 - calced*/
        /* END ;*/
    end
    PW05W00.PW05WIDX = PW05W00.PW05WIDX + 1;
  end
end // end PW05610

// insert processing
Function PW05611()
   /* ------------------------------------------------------------*/
   /* insert processing*/
     /* ezetst will point to the item to be inserted before*/
   /* ------------------------------------------------------------*/

  PW05S15(); /* 's2' dpick.vpkmsg01*/

  PW05S16(); /* 'n2' dpick.vpkmsg01*/

  while (SQLCA.VAGen_SQLCODE == 0
   && PWTREC.PWTPKMNO != PW05W02.PWTPKMNO[sysVar.arrayIndex])

    PW05S18(); /* 'd ' dpick.vpkmsg01*/

    PW05S13(); /* 'a ' dpick.vpkmsg01 seq + 1*/

    PW05S16(); /* 'n2' dpick.vpkmsg01*/

  end

  PW05S13(); /* 'a ' dpick.vpkmsg01 seq + 1*/

  PW05S19(); /* 's ' dpick.vpkmsg01 insert mode*/

  PW05S10(); /* 'u ' dpick.vpkmsg01 insert mode*/

  PW05S17(); /* 'c2' dpick.vpkmsg01*/

end // end PW05611

// purge temporary storage
Function PW05S01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PW05W02 empty; /* m001 temporary storage detail*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PW05W00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PW05W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW05W00.XXXLOCID = "S01"; /* Module identification*/
  converseLib.validationFailed(29); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW05W00.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW05S01

// 's1' dpick.vpkmsg01
Function PW05S02()
   /* ------------------------------------------------------------*/
   /* Select dpick.vpkmsl01 table row*/
   /* ------------------------------------------------------------*/

  set PWTREC empty; /* Clear row storage area*/

  PWTREC.XWHCD = PW05W01.XWHCD;
  PWTREC.PWTPKMTP = PW05W01.PWTPKMTP;

  PW05W03.PW05W-SELECT-OPTION = "S1";
  PW05W03.PW05W-IO-INDICATOR = 0;
  try
    call "IO5910" (PW05W03, SQLCA, PWTREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select s*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW05W00.XXXLOCID = "S02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 SET       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW05W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKMSG01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWTREC.PWTKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW05S02

// 'n1' dpick.vpkmsg01
Function PW05S03()
   /* ------------------------------------------------------------*/
   /* fetch dpick.vpkmsg01 table row*/
   /* ------------------------------------------------------------*/

  PW05W03.PW05W-SELECT-OPTION = "N1";
  PW05W03.PW05W-IO-INDICATOR = 0;
  try
    call "IO5910" (PW05W03, SQLCA, PWTREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW05W00.XXXLOCID = "S03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW05W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKMSG01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWTREC.PWTKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW05S03

// 'c1' dpick.vpkmsg01
Function PW05S04()
   /* ------------------------------------------------------------*/
   /* close dpick.vpkmsg01 table row*/
   /* ------------------------------------------------------------*/

  PW05W03.PW05W-SELECT-OPTION = "C1";
  PW05W03.PW05W-IO-INDICATOR = 0;
  try
    call "IO5910" (PW05W03, SQLCA, PWTREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

  PW05W00.XXXLOCID = "S04";
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 VSPLIT01   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW05W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKMSG01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWTREC.PWTKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW05S04

// add temporary storage
Function PW05S05()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PW05W02.XXXTSLEN = PW05W00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PW05W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PW05W02 empty; /* m001 display storage*/

    PW05W00.PW05WIDX = 1; /* Display line index*/

    PW05W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW05W00.XXXLOCID = "S05"; /* Module identification*/
  converseLib.validationFailed(29); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW05W00.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW05S05

// read temporary storage
Function PW05S06()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  PW05W02.XXXTSLEN = PW05W00.XXXTSLEN;
  TA5REC.TA5TSQIX = PW05W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PW05W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW05W00.XXXLOCID = "S06"; /* Module identification*/
  converseLib.validationFailed(29); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW05W00.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW05S06

// 'd' dpick.vpkmsg01
Function PW05S07()
   /* ------------------------------------------------------------*/
   /* 'd' dpick.vpkmsg01*/
   /* ------------------------------------------------------------*/

  set PWTREC empty;

  PWTREC.XWHCD = PW05W01.XWHCD;
  PWTREC.PWTPKMTP = PW05W01.PWTPKMTP;
  PWTREC.PWTPKMNO = PW05W02.PWTPKMNO[PW05WIDX];

  PW05W03.PW05W-SELECT-OPTION = "D ";
  PW05W03.PW05W-IO-INDICATOR = 0;
  try
    call "IO5910" (PW05W03, SQLCA, PWTREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW05W00.XXXLOCID = "S07"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW05W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKMSG01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWTREC.PWTKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW05S07

// 'a' dpick.vpkmsg01
Function PW05S08()
   /* ------------------------------------------------------------*/
   /* 'a' dpick.vpkmsg01 with map values*/
   /* ------------------------------------------------------------*/

  set PWTREC empty;

  PWTREC.XWHCD = PW05W01.XWHCD;
  PWTREC.PWTPKMTP = PW05W01.PWTPKMTP;

  PWTREC.PWTPKMNO = PW05M001.PW05MMNO[PW05WIDX];
  PWTREC.PWTPKMSG = PW05M001.PW05MMSG[PW05WIDX];

  PWTREC.ZZZSDT = XX0XW01.XX0XWDAT; /* setup date*/
  PWTREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* current date*/
  PWTREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* current time*/
  PWTREC.ZZZCHGCT = 0; /* change count*/

  PW05W03.PW05W-SELECT-OPTION = "A ";
  PW05W03.PW05W-IO-INDICATOR = 0;
  try
    call "IO5910" (PW05W03, SQLCA, PWTREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW05W00.XXXLOCID = "S08"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW05W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKMSG01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWTREC.PWTKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW05S08

// 'u' dpick.vpkmsg01
Function PW05S09()
   /* ------------------------------------------------------------*/
   /* 'u' dpick.vpkmsg01 table*/
   /* ------------------------------------------------------------*/

   /* pwtrec is already formatted*/

  PWTREC.PWTPKMSG = PW05M001.PW05MMSG[PW05WIDX];

  PWTREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PWTREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW05W03.PW05W-SELECT-OPTION = "U ";
  PW05W03.PW05W-IO-INDICATOR = 0;
  try
    call "IO5910" (PW05W03, SQLCA, PWTREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      PW05W00.PW05WSWR = "Y"; /* Request for data switch*/

      PW05W00.XXXLOCID = "S09"; /* Module identification*/
      PW05W00.PW05WMSG = 143; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW05W00.XXXLOCID = "S09"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW05W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKMSG01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWTREC.PWTKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW05S09

// 'u' dpick.vpkmsg01-insert mode
Function PW05S10()
   /* ------------------------------------------------------------*/
   /* 'u' dpick.vpkmsg01 table*/
   /* ------------------------------------------------------------*/

  PWTREC.PWTPKMNO = PW05W02.PWTPKMNO[sysVar.arrayIndex];
  PWTREC.PWTPKMSG = " ";

  PWTREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PWTREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW05W03.PW05W-SELECT-OPTION = "U ";
  PW05W03.PW05W-IO-INDICATOR = 0;
  try
    call "IO5910" (PW05W03, SQLCA, PWTREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      PW05W00.PW05WSWR = "Y"; /* Request for data switch*/

      PW05W00.XXXLOCID = "S10"; /* Module identification*/
      PW05W00.PW05WMSG = 143; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW05W00.XXXLOCID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW05W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKMSG01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWTREC.PWTKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW05S10

// 's' dpick.vpkmsg01 - old
Function PW05S11()
   /* ------------------------------------------------------------*/
   /* Select dpick.vpkmsg01*/
   /* ------------------------------------------------------------*/

  set PWTREC empty; /* Clear row storage area*/

  PWTREC.XWHCD = PW05W01.XWHCD;
  PWTREC.PWTPKMTP = PW05W01.PWTPKMTP;
  PWTREC.PWTPKMNO = PW05W02.PWTPKMNO[PW05WIDX];

  PW05W03.PW05W-SELECT-OPTION = "S ";
  PW05W03.PW05W-IO-INDICATOR = 0;
  try
    call "IO5910" (PW05W03, SQLCA, PWTREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW05W00.XXXLOCID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW05W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKMSG01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWTREC.PWTKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW05S11

// 'a' dpick.vpkmsg01 - seq +1
Function PW05S13()
   /* ------------------------------------------------------------*/
   /* 'a' dpick.vpkmsg01 using old message*/
   /* ------------------------------------------------------------*/

  PWTREC.PWTPKMNO = PWTREC.PWTPKMNO + 1; /* add 1 to seq nbr*/

  PWTREC.ZZZSDT = XX0XW01.XX0XWDAT; /* setup date*/
  PWTREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* current date*/
  PWTREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* current time*/
  PWTREC.ZZZCHGCT = 0; /* change count*/

  PW05W03.PW05W-SELECT-OPTION = "A ";
  PW05W03.PW05W-IO-INDICATOR = 0;
  try
    call "IO5910" (PW05W03, SQLCA, PWTREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW05W00.XXXLOCID = "S13"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW05W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKMSG01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWTREC.PWTKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW05S13

// calc next seq nbr
Function PW05S14()
   /* ------------------------------------------------------------*/
   /* calc seq nbr*/
   /* select max sequence number from dpick.vpkmsg01*/
   /* ------------------------------------------------------------*/

  set PWTREC empty; /* Clear row storage area*/

  PWTREC.XWHCD = PW05W01.XWHCD;
  PWTREC.PWTPKMTP = PW05W01.PWTPKMTP;

  PW05W03.PW05W-SELECT-OPTION = "SM";
  PW05W03.PW05W-IO-INDICATOR = 0;
  try
    call "IO5910" (PW05W03, SQLCA, PWTREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      return;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW05W00.XXXLOCID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW05W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKMSG01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWTREC.PWTKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW05S14

// 's2' dpick.vpkmsg01
Function PW05S15()
   /* ------------------------------------------------------------*/
   /* Select dpick.vpkmsl01 table row*/
   /* ------------------------------------------------------------*/

  set PWTREC empty; /* Clear row storage area*/

  PWTREC.XWHCD = PW05W01.XWHCD;
  PWTREC.PWTPKMTP = PW05W01.PWTPKMTP;

  PW05W03.PW05W-SELECT-OPTION = "S2";
  PW05W03.PW05W-IO-INDICATOR = 0;
  try
    call "IO5910" (PW05W03, SQLCA, PWTREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW05W00.XXXLOCID = "S15"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S2 SET       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW05W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKMSG01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWTREC.PWTKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW05S15

// 'n2' dpick.vpkmsg01
Function PW05S16()
   /* ------------------------------------------------------------*/
   /* fetch dpick.vpkmsg01 table row*/
   /* ------------------------------------------------------------*/

  PW05W03.PW05W-SELECT-OPTION = "N2";
  PW05W03.PW05W-IO-INDICATOR = 0;
  try
    call "IO5910" (PW05W03, SQLCA, PWTREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW05W00.XXXLOCID = "S16"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW05W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKMSG01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWTREC.PWTKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW05S16

// 'c2' dpick.vpkmsg01
Function PW05S17()
   /* ------------------------------------------------------------*/
   /* close dpick.vpkmsg01 table row*/
   /* ------------------------------------------------------------*/

  PW05W03.PW05W-SELECT-OPTION = "C2";
  PW05W03.PW05W-IO-INDICATOR = 0;
  try
    call "IO5910" (PW05W03, SQLCA, PWTREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

  PW05W00.XXXLOCID = "S17";
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 VSPLIT01   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW05W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKMSG01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWTREC.PWTKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW05S17

// 'd' dpick.vpkmsg01-insert mode
Function PW05S18()
   /* ------------------------------------------------------------*/
   /* 'd' dpick.vpkmsg01*/
   /* ------------------------------------------------------------*/

   /* pwtrec already has record*/

  PW05W03.PW05W-SELECT-OPTION = "D ";
  PW05W03.PW05W-IO-INDICATOR = 0;
  try
    call "IO5910" (PW05W03, SQLCA, PWTREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW05W00.XXXLOCID = "S18"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW05W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKMSG01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWTREC.PWTKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW05S18

// 's' dpick.vpkmsg01-insert mode
Function PW05S19()
   /* ------------------------------------------------------------*/
   /* Select dpick.vpkmsg01*/
   /* ------------------------------------------------------------*/

  set PWTREC empty; /* Clear row storage area*/

  PWTREC.XWHCD = PW05W01.XWHCD;
  PWTREC.PWTPKMTP = PW05W01.PWTPKMTP;
  PWTREC.PWTPKMNO = PW05W02.PWTPKMNO[sysVar.arrayIndex];

  PW05W03.PW05W-SELECT-OPTION = "S ";
  PW05W03.PW05W-IO-INDICATOR = 0;
  try
    call "IO5910" (PW05W03, SQLCA, PWTREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW05W00.XXXLOCID = "S19"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW05W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKMSG01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWTREC.PWTKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW05S19

// 's' dpick.vpkmsg01 - map
Function PW05S20()
   /* ------------------------------------------------------------*/
   /* Select dpick.vpkmsg01 - map values*/
   /* ------------------------------------------------------------*/

  set PWTREC empty; /* Clear row storage area*/

  PWTREC.XWHCD = PW05W01.XWHCD;
  PWTREC.PWTPKMTP = PW05W01.PWTPKMTP;
  PWTREC.PWTPKMNO = PW05M001.PW05MMNO[PW05WIDX];

  PW05W03.PW05W-SELECT-OPTION = "S ";
  PW05W03.PW05W-IO-INDICATOR = 0;
  try
    call "IO5910" (PW05W03, SQLCA, PWTREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW05W00.XXXLOCID = "S20"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW05W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKMSG01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWTREC.PWTKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW05S20

//*** RECORD=PW05W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 
// ***********************
Record PW05W00 type basicRecord
  10 PW05WSWR PW05WSWR ; 
  10 PW05WPLS PW05WPLS ; 
  10 PW05WSWF PW05WSWF ; 
  10 PW05WSWD PW05WSWD ; 
  10 PW05WNDS PW05WNDS ; 
  10 PWTPKMNO PWTPKMNO ; 
  10 PW05WTMS PW05WTMS ; 
  10 PW05WTMA PW05WTMA ; 
  10 PW05WTAD PW05WTAD ; 
  10 XXXLOCID XXXLOCID ; 
  10 PW05WMSG PW05WMSG ; 
  10 PW05WIDX PW05WIDX ; 
  10 PW05WIX2 PW05WIX2 ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
end // end PW05W00

//*** RECORD=PW05W01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// 
// 10/4/90  ML D'Angelo - added FG0HWHPS array to hold the
// history percents displayed on the screen so that we can
// determine if they have been changed or not.  FF1029
// ***********************
Record PW05W01 type basicRecord
  5 XWHCD XWHCD ; 
  5 XWHABRV XWHABRV ; 
  5 PWTPKMTP PWTPKMTP ; 
  5 PW05WMTD PW05WMTD ; 
  5 CACHGFL CACHGFL ; 
end // end PW05W01

//*** RECORD=PW05W02 ****
// ------------------------
// Map 001 display storage
// ------------------------
// 
// 10/4/90  ML D'Angelo - added FG0HWHPS array to hold the
// history percents displayed on the screen so that we can
// determine if they have been changed or not.  FF1029
// ***********************
Record PW05W02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(634) ; 
    10 PW05WNLD PW05WNLD ; 
    10 PWTPKMNO PWTPKMNO [15] ; 
    10 PWTPKMSG PWTPKMSG [15] ; 
end // end PW05W02

//*** RECORD=PW05W03 ****
// 9/24/93  kande1  This record was created to hold the
// selection option information for the call to io mod io5910.
// Putting the selection option into a record was neccessary to
// solve a problem with the calling logic discovery during the
// csp4.1 conversion project.
// ***********************
Record PW05W03 type basicRecord
  10 PW05W-SELECT-OPTION PW05W-SELECT-OPTION ; 
  10 PW05W-IO-INDICATOR PW05W-IO-INDICATOR ; 
end // end PW05W03

//*** RECORD=PWTREC ****
// ********* PICKING SHIP PACKING LIST TABLE HEADER ***********
// 
// DB2 TABLE VIEW:      DPICK.VPKMSG01
// 
// COPYLIB MEMBER:      DCL00957
// 
// I/O MODULE:          IO5910
// 
// KEY TO DB2 TABLE:    XWHCD
//                      PK_MSG_TYP
//                      PK_MSG_NBR
// 
// DATE CREATED:        05/15/91
// 
// MAINTENANCE LOG:
// 
// DATE       NAME     COMMENT
// --------   ------   ---------------------------------------
// 05/15/91   SJOHNS   New record definition.
// **********************
Record PWTREC type basicRecord
  5 PWTGROUP PWTGROUP ; 
    10 PWTKEY PWTKEY ; 
      15 XWHCD XWHCD ; 
      15 PWTPKMTP PWTPKMTP ; 
      15 PWTPKMNO PWTPKMNO ; 
      15 PWTPKMSG PWTPKMSG ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PWTREC

DataItem PW05W-IO-INDICATOR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW05W-SELECT-OPTION char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work index
DataItem PW05WIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// work index
DataItem PW05WIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// save msg no
DataItem PW05WMSG smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// new detail switch
DataItem PW05WNDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nbr of lines per page
DataItem PW05WNLD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Request for data switch
DataItem PW05WPLS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map request switch
DataItem PW05WSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem PW05WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PW05WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total messages added
DataItem PW05WTAD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total messages add & dis
DataItem PW05WTMA smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total messages displayed
DataItem PW05WTMS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Record group level
DataItem PWTGROUP char(58)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record key level
DataItem PWTKEY char(46)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk_msg_nbr
DataItem PWTPKMNO smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk_msg
DataItem PWTPKMSG char(40)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

