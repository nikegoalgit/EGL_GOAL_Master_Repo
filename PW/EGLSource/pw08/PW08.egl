package pw08;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PW08 ****
// DESCRIPTION
//  This program shows order numbers with their DNSB, DNSA, and
//  ETA dates; full case and repack quantities; and selection
//  and hold flags.
// 
// USER INPUT
//  The user is required to enter a date range ('to' date and
//  'from' date) and selection type ('A'll, 'N'ot selected to
//  pick, or 'S'elected to pick).
// 
//  A date range is needed in order to obtain data for the
//  screen.  The 'to' date is required.  If the 'from' date is
//  blank, zeros will be assumed.
// 
//  The selection field will default to 'A'.  The user has the
//  option of changing this field, but only 'A', 'N', and 'S'
//  are allowed.
// 
// Once the user has entered the required data, the screen
// information will be displayed and the user may either
// inquiry, select an order to pick, de-select an order,
// or put an order on hold.
// 
// INQUIRY
//  Enter an 'I' in the action field to go the an inquiry
//  screen with order detail (PW0I).
// 
// SELECT
//  Enter an 'S' in the action field to select an order to
//  be picked.  A pick priority is required in the PK PR
//  field (10 = sameday, 20 = rush, 30 = normal). When an
//  order is selected, it is added to DPICK.VSELOR01 table.
// 
// DE-SELECT
//  Enter an 'D' in the action field to de-select an order that
//  was to be picked.  When an order is de-selected, it is
//  deleted from DPICK.VSELOR01 table.
// 
// HOLD
//  Enter an 'H' in the action field to transfer to the order
//  hold screen.  A hold code and release date are required.
//  When an order is put on hold, it is added/updated in the
//  DPICK.VORHLD01 table.  To see the available hold codes,
//  enter a '?' in the hold code field.
// 
// The user may exit to menu, cancel, scroll up/down,
// transfer to help, or transfer to other screens by using the
// standard PF keys.
// 
// ;/*========================================================
// ;/* Date      Userid   Description
// ;/*--------------------------------------------------------
// ;/* 07/20/92  SHENDE   Display brand code.  Also, allow (*)
//                        wild card for brand cd only.
// ;/* 10/14/93  kande1   rename new procs for standards create
// ;/*                    by rcream but not documented
// ;/* 10/25/95  PSTROE   Pick-up new version of XPPK003
// ;/*                    CANADA
// ;/* 01/19/96  OVAZQU   Include carrier code on screen
// ;/* 04/15/97  PANDER   Do not include Basics orders -
// ;/*                    XOTCD = 'FV'.
// Y2KFIX 02/16/98 DKENNY Y2K MODIFICATIONS MADE TO:
//                         PW08-15301, PW08-15303, PW08-162,
//                         PW08-260, PW08M001, PW08M002,
//                         PW08M003, PW08M004
// ;/*********************************************************
// *********************
Program PW08 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK4REC PK4REC; // record
  PK9REC PK9REC; // record
  PKBREC PKBREC; // record
  PKHREC PKHREC; // record
  PKWREC PKWREC; // record
  PW08W00 PW08W00; // record
  PW08W01 PW08W01; // record
  PW08W02 PW08W02; // record
  PWFREC PWFREC; // record
  PWJREC PWJREC; // record
  PWKREC PWKREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA9REC TA9REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use XHRTBL; // table
  use XBCTBL; // table
  use PW08M.PW08M001,  // forms
      PW08M.PW08M002, 
      PW08M.PW08M003, 
      PW08M.PW08M004, 
      PW08M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
     /* ------------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* ------------------------------------------------------------------*/

    set PW08W00 empty; /* Initialize working storage*/
    set PW08W01 empty; /* Initialize m001 display storage*/
    set PW08W02 empty; /* Initialize m002 display storage*/
    set XX0XW01 empty; /* Initialize display storage*/
    set XX0XW02 empty; /* Initialize display storage*/
    set PW08M001 initial; /* Initialize map output area*/
    set PW08M002 initial; /* Initialize map output area*/
    set PW08M003 initial; /* Initialize map output area*/
    set PW08M004 initial; /* Initialize map output area*/
    set PK4REC empty; /* Initialize dpick.vpoolh01*/
    set PWFREC empty; /* Initialize dpick.vcahld01*/
    set PKBREC empty; /* Initialize dpick.vorhld01*/
    set PK9REC empty; /* Initialize dpick.vcuhld01*/
    set PKHREC empty; /* Initialize dpick.vselor01*/
    set PWKREC empty; /* Initialize picking dnsb array*/
    set PWJREC empty; /* Initialize picking order array*/
    set TA1REC empty; /* Initialize error diagnostic record*/
    set TA5REC empty; /* Initialize temp. storage parameters*/
    set TAEREC empty; /* Initialize error diagnostic info*/
    set TA9REC empty; /* Initialize date rec*/
    set SQLCA empty; /* Initialize SQL comm. area*/

     /* ------------------------------------------------------------------*/
     /* Initialize switches and flags*/
     /* ------------------------------------------------------------------*/

    PW08W00.PW08W-REQST-DATA-SW = "N";
    PW08W00.PW08W-STOR-UPDATE-SW = "N";
    PW08W00.PW08W-SCREEN-MDFY-SW = "N";
    PW08W00.PW08W-FRMT-MAP-SW = "Y";
    PW08W00.PW08W-MODIFY-SW = "N";
    PW08W00.PW08W-POOLH-CSR-SW = "N";
    PW08W00.PW08W-CAHLD-CSR-SW = "N";
    PW08W00.PW08W-CUHLD-CSR-SW = "N";
    PW08W00.PW08W-ORHLD-CSR-SW = "N";
    PW08W00.PW08W-PROCESS-SW = "Y"; /* default valid order*/
    PW08W00.PW08W-DISPLAY-SW = "1"; /* default to first map (M001)*/
    PW08W00.PW08W-MAP-IDX = 1;
    PW08W00.PW08W-HOLD-IDX = 1;
    PW08W00.PW08W-ORD-INQ-IDX = 1;
    PKWREC.PKWINDEX = 1;

     /* ------------------------------------------------------------------*/
     /* Get information from common picking area*/
     /* ------------------------------------------------------------------*/

    PWKREC.PWKARRAY = PKWREC.PKWARRAY[PKWINDEX];

    if (PKWREC.PKWSELSW == "PP") /* pick planning*/
      PW08W00.PW08W-RUN-MODE = "P";
    else /* picking*/
      PW08W00.PW08W-RUN-MODE = " ";
    end

     /* ------------------------------------------------------------------*/
     /* Format century in the DNSB date*/
     /* ------------------------------------------------------------------*/

    PW08W00.PW08W-FROM-DT = PKWREC.PKWFRMDT[PKWINDEX];
    PW08W00.PW08W-TO-DT = PKWREC.PKWTODT[PKWINDEX];

     /* ------ format 'from' century ------------*/
    if (PW08W00.PW08W-FROM-DT != 0)

      if (PW08W00.PW08W-FROM-YY > 50
       && PW08W00.PW08W-FROM-YY <= 99)

        PW08W00.PW08W-FROM-CC = 19;
      else
        PW08W00.PW08W-FROM-CC = 20;
      end
    end

    /* ------ format 'to' century --------------*/
    if (PW08W00.PW08W-TO-DT != 0)

      PW08W00.PW08W-REQST-DATA-SW = "Y";
      if (PW08W00.PW08W-TO-YY > 50
       && PW08W00.PW08W-TO-YY <= 99)

        PW08W00.PW08W-TO-CC = 19;
      else
        PW08W00.PW08W-TO-CC = 20;
      end
    end

     /* ---------------------------------------------------------------*/
     /* Build map heading area*/
     /* ---------------------------------------------------------------*/

     /* --- move to display storage (W01) ----------------------------*/
    PW08W01.PW08W-SELECTION = "A";
    PW08W01.XWHCD = PKWREC.XWHCD;
    PW08W01.XWHABRV = PKWREC.XWHABRV;
    PW08W01.XBCCD = PKWREC.XBCCD[1];
    PW08W01.PW08W-FROM-MM = PW08W00.PW08W-FROM-MM;
    PW08W01.PW08W-FROM-DD = PW08W00.PW08W-FROM-DD;
    PW08W01.PW08W-FROM-YY = PW08W00.PW08W-FROM-YY;
    PW08W01.PW08W-TO-MM = PW08W00.PW08W-TO-MM;
    PW08W01.PW08W-TO-DD = PW08W00.PW08W-TO-DD;
    PW08W01.PW08W-TO-YY = PW08W00.PW08W-TO-YY;

    if (PKWREC.PKWSELSW == "PK") /* picking*/

     /* --- move to the map (M003) -----------------------------------*/
      PW08M003.PW08M-SELECTION = "A";
      PW08M003.XWHCD = PKWREC.XWHCD;
      PW08M003.XBCCD = PKWREC.XBCCD[1];
      PW08M003.XDVCD = "01";
      PW08M003.PW08M-FROM-MM = PW08W00.PW08W-FROM-MM;
      PW08M003.PW08M-FROM-DD = PW08W00.PW08W-FROM-DD;
      PW08M003.PW08M-FROM-YY = PW08W00.PW08W-FROM-YY;
      PW08M003.PW08M-TO-MM = PW08W00.PW08W-TO-MM;
      PW08M003.PW08M-TO-DD = PW08W00.PW08W-TO-DD;
      PW08M003.PW08M-TO-YY = PW08W00.PW08W-TO-YY;
    else
     /* --- move to the map (M001) -----------------------------------*/
      PW08M001.PW08M-SELECTION = "A";
      PW08M001.XWHCD = PKWREC.XWHCD;
      PW08M001.XBCCD = PKWREC.XBCCD[1];
      PW08M001.XDVCD = "01";
      PW08M001.PW08M-FROM-MM = PW08W00.PW08W-FROM-MM;
      PW08M001.PW08M-FROM-DD = PW08W00.PW08W-FROM-DD;
      PW08M001.PW08M-FROM-YY = PW08W00.PW08W-FROM-YY;
      PW08M001.PW08M-TO-MM = PW08W00.PW08W-TO-MM;
      PW08M001.PW08M-TO-DD = PW08W00.PW08W-TO-DD;
      PW08M001.PW08M-TO-YY = PW08W00.PW08W-TO-YY;

    end
     /* ---------------------------------------------------------------*/
     /* Convert current date to CCYYMMDD format.*/
     /* ---------------------------------------------------------------*/

    PW08W00.PW08W-CURR-YYMMDD = VGVar.currentShortGregorianDate;

    if (PW08W00.PW08W-CURR-YY > 80)
      PW08W00.PW08W-CURR-CC = 19;
    else
      PW08W00.PW08W-CURR-CC = 20;
    end

     /* ---------------------------------------------------------------*/
     /* Validate entry*/
     /* ---------------------------------------------------------------*/

    goto PW08-000;
    PW08-000: PW08-000();
     /* ------------------------------------------------------------------*/
     /* Converse to mins process*/
     /* ------------------------------------------------------------------*/

    goto PW08-001;
    PW08-001: PW08-001();
     /* ----------------------------------------------------------*/
     /* Converse to main process*/
     /* ----------------------------------------------------------*/

    goto PW08-001;
  end // end main
end // end PW08

// Validate entry
Function PW08-000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP != "PW0I" /* From allowed application*/
   && COMMAREA.CAFROMAP != "PW0V" 
   && COMMAREA.CAFROMAP != "PW0W" 
   && COMMAREA.CAFROMAP != "GD00")

   /* ------------------------------------------------------------*/
    /* Indicate invalid transfer and return to FROM application.*/
   /* ------------------------------------------------------------*/

    COMMAREA.CATOAPP = COMMAREA.CAFROMAP;

    XSNOWAY(); /* Invalid transfer was attempted*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether passed warehouse is valid...*/
   /* ------------------------------------------------------------*/

  XPPK003(); /* Validate warehouse*/


end // end PW08-000

// Main Process
Function PW08-001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PW08W00.PW08W-DISPLAY-SW == "1") /* Map 1 was requested*/

    PW08-100(); /* Display map 1*/

  else

    if (PW08W00.PW08W-DISPLAY-SW == "2") /* Map 2 was requested*/

      PW08-200(); /* Display map 2*/

    else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/

      PW08W00.XXXMODID = "001"; /* Module identification*/
      PW08W00.XXXMSGNO = 29; /* Unexpected error occurred*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = PW08W00.PW08W-DISPLAY-SW; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = PW08W00.XXXMODID; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "PK0A"; /* TO application*/

      XSPKS01(); /* Exit to another application*/

      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

      TA1REC.TA1FUNC = "ABND"; /* Termination function*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

  end


end // end PW08-001

// Main process to display 1 map
Function PW08-100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW08-110(); /* Obtain the data to display*/

  PW08-120(); /* Format and display the map*/

  PW08-130(); /* Check attention identifier*/

  PW08-140(); /* Reset fields to normal intensity*/

  PW08-150(); /* Verify the entered data*/

  PW08-160(); /* Process valid input request*/


end // end PW08-100

// Obtain data to display M001
Function PW08-110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PW08W00.PW08W-REQST-DATA-SW != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  PW08W00.XXXTSLEN = 499; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (PW08W00.XXXMSGNO == 0) /* No message to display*/
    PW08W00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  PW08S-P-TEMP-STOR();

  if (PKWREC.PKWSELSW == "PK") /* picking*/

    PW08W01.XWHCD = PW08M003.XWHCD; /* warehouse code*/
   /* OVE PW08M001.XWHABRV TO PW08W01.XWHABRV;/* warehouse desc*/
    PW08W01.XBCCD = PW08M003.XBCCD; /* brand code*/

   /* ----- move key map fields to working storage -------------*/
    PW08W01.PW08W-TO-MM = PW08M003.PW08M-TO-MM;
    PW08W01.PW08W-TO-DD = PW08M003.PW08M-TO-DD;
    PW08W01.PW08W-TO-YY = PW08M003.PW08M-TO-YY;
    PW08W01.PW08W-FROM-MM = PW08M003.PW08M-FROM-MM;
    PW08W01.PW08W-FROM-DD = PW08M003.PW08M-FROM-DD;
    PW08W01.PW08W-FROM-YY = PW08M003.PW08M-FROM-YY;

    PW08W01.PW08W-SELECTION = PW08M003.PW08M-SELECTION;
  else

    PW08W01.XWHCD = PW08M001.XWHCD; /* warehouse code*/
   /* OVE PW08M001.XWHABRV TO PW08W01.XWHABRV;/* warehouse desc*/
    PW08W01.XBCCD = PW08M001.XBCCD; /* brand code*/

   /* ----- move key map fields to working storage -------------*/
    PW08W01.PW08W-TO-MM = PW08M001.PW08M-TO-MM;
    PW08W01.PW08W-TO-DD = PW08M001.PW08M-TO-DD;
    PW08W01.PW08W-TO-YY = PW08M001.PW08M-TO-YY;
    PW08W01.PW08W-FROM-MM = PW08M001.PW08M-FROM-MM;
    PW08W01.PW08W-FROM-DD = PW08M001.PW08M-FROM-DD;
    PW08W01.PW08W-FROM-YY = PW08M001.PW08M-FROM-YY;

    PW08W01.PW08W-SELECTION = PW08M001.PW08M-SELECTION;

  end

   /* ----- zero total fields ----------------------------------*/
  PW08W00.PW08W-FC-TOT = 0;
  PW08W00.PW08W-RP-TOT = 0;
  PW08W00.PW08W-TOTAL = 0;

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  PW08-112(); /* DPICK.VPOOLH01*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  PW08W00.PW08W-MAP-IDX = 1; /* Display line index*/
  PW08W00.PW08W-POOLH-CSR-SW = "N"; /* End of cursor switch*/

  while (PW08W00.PW08W-POOLH-CSR-SW == "N") /* Until end of cursor*/

    PW08-113(); /* Fetch next row in the cursor*/

    /* ------------------------------------------------------------*/
    /* If not end of cursor, retrieve corresponding data from*/
    /* pool header and carrier hold tables.*/
    /* ------------------------------------------------------------*/

    if (PW08W00.PW08W-POOLH-CSR-SW == "N") /* Not end of cursor*/
      PW08W00.PW08W-PROCESS-SW = "Y"; /* clear process switch*/

      PW08-114(); /* determine if order if ok to process*/

      /* ------------------------------------------------------------*/
      /* If order qualifies, save the data in display storage.*/
      /* ------------------------------------------------------------*/

      if (PW08W00.PW08W-PROCESS-SW == "Y") /* okay to process order*/
        PW08-115(); /* Save data in display storage*/

        /* ------------------------------------------------------------*/
        /* If the page is full, add the page to the storage queue.*/
        /* ------------------------------------------------------------*/

        if (PW08W00.PW08W-MAP-IDX > 10) /* Page is full*/

          PW08S-A-TEMP-STOR();

          set PW08W01 empty; /* clear display storage*/
          PW08W00.PW08W-MAP-IDX = 1; /* Display line index*/

        end
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PW08W00.PW08W-MAP-IDX > 1) /* Page was formatted*/
    PW08S-A-TEMP-STOR();
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set - DPICK.VPOOLH01*/
   /* ------------------------------------------------------------*/

  PW08-117(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  PW08W00.PW08W-FRMT-MAP-SW = "Y"; /* format screen*/
  if (PW08W00.TA5TSQIX == 0) /* No pages formatted*/

    PW08W00.XXXMODID = "100"; /* Module identification*/
    PW08W00.XXXMSGNO = 31; /* No data was found to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW08W00.PW08W-REQST-DATA-SW = "N"; /* Request for data switch*/


end // end PW08-110

// Select 'S7' DPICK.VPOOLH01
Function PW08-112()
   /* ------------------------------------------------------------*/
   /* Select set on DPICK.VPOOLH01*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* Clear row storage area*/

  PK4REC.XWHCD = PKWREC.XWHCD; /* warehouse*/
  PK4REC.XBCCD = PW08W01.XBCCD; /* brand code*/
  PK4REC.XDVCD = "01"; /* division code*/
  PK4REC.XGPCD = "01"; /* in-store promo product class*/
  PK4REC.OP1DSBDT = -1; /* don't ship before date*/
  PK4REC.PK4ORHLD = "*"; /* order hold*/
  PK4REC.PK4CUHLD = "*"; /* customer hold*/
  PK4REC.TF1CARCD = "*"; /* carrier code*/
  PK4REC.OP1SPHDF = "*"; /* spec handle flag*/


  if (PKWREC.PKWSELSW == "PK") /* picking*/

    if (PW08M003.PW08M-SELECTION == "S") /* selection code was 's'*/
      PK4REC.PK4SLIND = "S";
    else
      PK4REC.PK4SLIND = "*"; /* else wildcard it*/
    end

  else

    if (PW08M001.PW08M-SELECTION == "S") /* selection code was 's'*/
      PK4REC.PK4SLIND = "P";
    else
      PK4REC.PK4SLIND = "*"; /* else wildcard it*/
    end
  end

  try
    call "IO1720" ("S6", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW08W00.XXXMODID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "PW08"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW08-112

// Fetch DPICK.VPOOLH01
Function PW08-113()
   /* ------------------------------------------------------------*/
   /* fetch next DPICK.VPOOLH01*/
   /* ------------------------------------------------------------*/


  try
    call "IO1720" ("N6", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* end of set*/
      PW08W00.PW08W-POOLH-CSR-SW = "Y"; /* end of cursor*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW08W00.XXXMODID = "113"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "PW08"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW08-113

// Determine if order is valid
Function PW08-114()
   /* ------------------------------------------------------------*/
   /* Determine if order is okay to process.*/
   /* - Correct gpc code*/
   /* - DNSB date is within date range specified*/
   /* - Selection type and PK-SEL-IND are correct*/
   /* - Order is not a stock transfer*/
   /* - Order is not a basics order*/
   /* - Order is not ColeHaan*/
   /* - Order is not on hold*/
   /* - Customer is not on hold*/
   /* - Carrier is not on hold*/
   /* If order is not valid, You don't need to look any*/
   /* farther.  EZERTN to previous process.*/
   /* ------------------------------------------------------------*/

   /* ---- GPC code is not In-stock Promo Product Class -----------*/
  if (PK4REC.XGPCD != "01")

    PW08W00.PW08W-PROCESS-SW = "N"; /* don't process this order*/
    return;

  end

   /* ---- DNSB date is within date range specified ---------------*/
  if (PK4REC.OP1DSBDT > PW08W00.PW08W-TO-DT
   || PK4REC.OP1DSBDT < PW08W00.PW08W-FROM-DT)

    PW08W00.PW08W-PROCESS-SW = "N"; /* don't process this order*/
    return;

  end

   /* ---- Order is not a stock transfer --------------------------*/
  if (PK4REC.PK4STKTF == "Y")

    PW08W00.PW08W-PROCESS-SW = "N"; /* don't process order*/
    return;

  end

   /* ----- Order is not a Basics order ---------------------------*/
  if (PK4REC.XOTCD == "FV")

    PW08W00.PW08W-PROCESS-SW = "N"; /* don't process order*/
    return;

  end

   /* ---- Order is not ColeHaan ----------------------------------*/
  if (PW08W01.XBCCD == "*"
   && PK4REC.XBCCD == "08")

    PW08W00.PW08W-PROCESS-SW = "N"; /* don't process order*/
    return;

  end


   /* ---- Selection type and PK-SEL-IND are correct --------------*/

   /* ---- picking -----------------------------------------------*/
  if (PW08W00.PW08W-RUN-MODE == " ")

    if (PW08M003.PW08M-SELECTION == "A")
      if (PK4REC.PK4SLIND != " "
       && PK4REC.PK4SLIND != "S")
        PW08W00.PW08W-PROCESS-SW = "N"; /* don't process order*/
        return;
      end
    else
      if (PW08M003.PW08M-SELECTION == "S")
        if (PK4REC.PK4SLIND != "S")
          PW08W00.PW08W-PROCESS-SW = "N"; /* don't process order*/
          return;
        end
      else
        if (PK4REC.PK4SLIND != " ")
          PW08W00.PW08W-PROCESS-SW = "N"; /* don't process order*/
          return;
        end
      end
    end

    /* ---- pick planning -----------------------------------------------*/
  else
    if (PW08M001.PW08M-SELECTION == "A")

      if (PK4REC.PK4SLIND != " " /* valid status for selection criteria*/
       && PK4REC.PK4SLIND != "P")

        PW08W00.PW08W-PROCESS-SW = "N"; /* don't process order*/
        return;
      end

    else
      if (PW08M001.PW08M-SELECTION == "S")

        if (PK4REC.PK4SLIND != "P")

          PW08W00.PW08W-PROCESS-SW = "N"; /* don't process order*/
          return;
        end

      else
        if (PW08M001.PW08M-SELECTION == "N")

          if (PK4REC.PK4SLIND != " ")
            PW08W00.PW08W-PROCESS-SW = "N"; /* don't process order*/
            return;
          end

        end
      end
    end
  end


   /* ---- Carrier is not on hold --------------------------------*/

  PW08S-CHECK-CAHLD();

  if (PW08W00.PW08W-PROCESS-SW == "N")
    return;
  end


   /* ---- Order is not on hold ----------------------------------*/
  if (PK4REC.PK4ORHLD == "Y")

    /* -- Check if release date > current date ------------------*/
    PW08S-CHECK-ORHLD();

    if (PW08W00.PW08W-PROCESS-SW == "N")
      return;
    end

  end


   /* ---- Customer is not on hold --------------------------------*/
  if (PK4REC.PK4CUHLD == "Y")

    /* -- Check if release date > current date ------------------*/
    PW08S-CHECK-CUHLD();

    if (PW08W00.PW08W-PROCESS-SW == "N")
      return;
    end

  end


end // end PW08-114

// Save Data in Display Storage
Function PW08-115()
   /* ------------------------------------------------------------*/
   /* If first line on subsequent page, save heading information.*/
   /* ------------------------------------------------------------*/

  if (PW08W00.PW08W-MAP-IDX == 1)

    if (PKWREC.PKWSELSW == "PK") /* picking*/
     /* ----- warehouse cd / abrv ---------------------------*/
      PW08W01.XWHCD = PW08M003.XWHCD;
      PW08W01.XBCCD = PW08M003.XBCCD;
     /* OVE PW08M001.XWHABRV TO PW08W01.XWHABRV;*/
      PW08W01.PW08W-SELECTION = PW08M003.PW08M-SELECTION;
     /* ----- 'from' and 'to' date --------------------------*/
      PW08W01.PW08W-FROM-MM = PW08M003.PW08M-FROM-MM;
      PW08W01.PW08W-FROM-DD = PW08M003.PW08M-FROM-DD;
      PW08W01.PW08W-FROM-YY = PW08M003.PW08M-FROM-YY;
      PW08W01.PW08W-TO-MM = PW08M003.PW08M-TO-MM;
      PW08W01.PW08W-TO-DD = PW08M003.PW08M-TO-DD;
      PW08W01.PW08W-TO-YY = PW08M003.PW08M-TO-YY;
    else
     /* ----- warehouse cd / abrv ---------------------------*/
      PW08W01.XWHCD = PW08M001.XWHCD;
      PW08W01.XBCCD = PW08M001.XBCCD;
     /* OVE PW08M001.XWHABRV TO PW08W01.XWHABRV;*/
      PW08W01.PW08W-SELECTION = PW08M001.PW08M-SELECTION;
     /* ----- 'from' and 'to' date --------------------------*/
      PW08W01.PW08W-FROM-MM = PW08M001.PW08M-FROM-MM;
      PW08W01.PW08W-FROM-DD = PW08M001.PW08M-FROM-DD;
      PW08W01.PW08W-FROM-YY = PW08M001.PW08M-FROM-YY;
      PW08W01.PW08W-TO-MM = PW08M001.PW08M-TO-MM;
      PW08W01.PW08W-TO-DD = PW08M001.PW08M-TO-DD;
      PW08W01.PW08W-TO-YY = PW08M001.PW08M-TO-YY;

    end
  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  PW08W01.PW08W-ACTION[PW08W-MAP-IDX] = " ";
  PW08W01.XPPCD[PW08W-MAP-IDX] = PK4REC.XPPCD;
  PW08W01.PK1CUOID[PW08W-MAP-IDX] = PK4REC.PK1CUOID;
  PW08W01.PK1NORID[PW08W-MAP-IDX] = PK4REC.PK1NORID;
  PW08W01.TF1CARCD[PW08W-MAP-IDX] = PK4REC.TF1CARCD;
   /* ------- DNSB date -------------------------------------*/
  PW08W00.PW08W-HOLD-DT = PK4REC.OP1DSBDT;
  PW08W01.PW08W-DNSB-MM[PW08W-MAP-IDX] = PW08W00.PW08W-HOLD-MM;
  PW08W01.PW08W-DNSB-DD[PW08W-MAP-IDX] = PW08W00.PW08W-HOLD-DD;
  PW08W01.PW08W-DNSB-YY[PW08W-MAP-IDX] = PW08W00.PW08W-HOLD-YY;
   /* ------- DNSA date -------------------------------------*/
  PW08W00.PW08W-HOLD-DT = PK4REC.OP1DSADT;
  PW08W01.PW08W-DNSA-MM[PW08W-MAP-IDX] = PW08W00.PW08W-HOLD-MM;
  PW08W01.PW08W-DNSA-DD[PW08W-MAP-IDX] = PW08W00.PW08W-HOLD-DD;
  PW08W01.PW08W-DNSA-YY[PW08W-MAP-IDX] = PW08W00.PW08W-HOLD-YY;
   /* ------- ETA date --------------------------------------*/
  PW08W00.PW08W-HOLD-DT = PK4REC.IN7STQDT;
  PW08W01.PW08W-ETA-MM[PW08W-MAP-IDX] = PW08W00.PW08W-HOLD-MM;
  PW08W01.PW08W-ETA-DD[PW08W-MAP-IDX] = PW08W00.PW08W-HOLD-DD;
  PW08W01.PW08W-ETA-YY[PW08W-MAP-IDX] = PW08W00.PW08W-HOLD-YY;
   /* ------- quantities ------------------------------------*/
  PW08W01.PK4ORDFC[PW08W-MAP-IDX] = PK4REC.PK4ORDFC;
  PW08W01.PK4ORDRP[PW08W-MAP-IDX] = PK4REC.PK4ORDRP;
  PW08W01.PW08W-TOT-QTY[PW08W-MAP-IDX] = PK4REC.PK4ORDFC + PK4REC.PK4ORDRP;

  PW08W01.PK4ORHLD[PW08W-MAP-IDX] = PK4REC.PK4ORHLD;

   /* ------------------------------------------------------------*/
   /* hold flag is 'Y' or 'N' for display*/
   /* ------------------------------------------------------------*/

  if (PK4REC.PK4ORHLD == " ") /* hold flag*/
    PW08W01.PK4ORHLD[PW08W-MAP-IDX] = "N";
  end

   /* ------------------------------------------------------------*/
   /* selction indicator is 'Y' or 'N' for display*/
   /* ------------------------------------------------------------*/

  if (PK4REC.PK4SLIND == "S" /* status is selected*/
   || PK4REC.PK4SLIND == "P")

    PW08W01.PK4SLIND[PW08W-MAP-IDX] = "Y";
  else
    PW08W01.PK4SLIND[PW08W-MAP-IDX] = "N";
  end

   /* ------------------------------------------------------------*/
   /* calculate totals.*/
   /* ------------------------------------------------------------*/

  PW08W00.PW08W-FC-TOT = PW08W00.PW08W-FC-TOT + PK4REC.PK4ORDFC;
  PW08W00.PW08W-RP-TOT = PW08W00.PW08W-RP-TOT + PK4REC.PK4ORDRP;
  PW08W00.PW08W-TOTAL = PW08W00.PW08W-FC-TOT + PW08W00.PW08W-RP-TOT;

   /* ----- increment line index ---------------------------------*/
  PW08W00.PW08W-MAP-IDX = PW08W00.PW08W-MAP-IDX + 1;


end // end PW08-115

// Close DPICK.VPOOLH01
Function PW08-117()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1720" ("C6", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW08W00.XXXMODID = "117"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW08W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW08-117

// Format and display map
Function PW08-120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PW08W00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PW08W00.PW08W-REQST-DATA-SW == "Y"
   || converseVar.validationMsgNum == 0)

    if (PW08W00.PW08W-FRMT-MAP-SW == "Y")
      if (PKWREC.PKWSELSW == "PK") /* picking*/
        PW08-12103();
      else
        PW08-12101();
      end
    end

  end

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW08-12003();
  else
    PW08-12001();
  end

end // end PW08-120

// Format and display map
Function PW08-12001()
   /* ------------------------------------------------------------*/
   /* Note: Apply the same changes to pw08-12003.*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW08M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PW08M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW08M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PW08W00.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PW08W00.XXXMSGNO != 0) /* Message to display*/
      if (PW08W00.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PW08W00.XXXMSGNO);
      end /* Message number*/
    else
      PW08M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
    end

    PW08M001.XXXMODID = PW08W00.XXXMODID; /* Module identification*/
    set PW08M001 alarm; /* Indicate sound alarm*/

  end

  converse PW08M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW08W00.XXXMODID = " "; /* Module identification*/
  PW08W00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PW08M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW08M001.CAITEM; /* Application data*/
end // end PW08-12001

// Format and display map
Function PW08-12003()
   /* ------------------------------------------------------------*/
   /* Note: Apply the same changes to pw08-12001.*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW08M003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PW08M003.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW08M003.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PW08W00.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PW08W00.XXXMSGNO != 0) /* Message to display*/
      if (PW08W00.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PW08W00.XXXMSGNO);
      end /* Message number*/
    else
      PW08M003.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
    end

    PW08M003.XXXMODID = PW08W00.XXXMODID; /* Module identification*/
    set PW08M003 alarm; /* Indicate sound alarm*/

  end

  converse PW08M003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW08W00.XXXMODID = " "; /* Module identification*/
  PW08W00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PW08M003.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW08M003.CAITEM; /* Application data*/
end // end PW08-12003

// Format the display data
Function PW08-12101()
   /* ------------------------------------------------------------*/
   /* Note: Apply the same changes to pw08-12103.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW08M001 initial; /* M001 input/output area*/
  set PW08M001.PW08M-FROM-MM cursor; /* set cursor*/

  PW08W00.PW08W-FRMT-MAP-SW = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW08W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW08W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PW08W00.PW08W-MODIFY-SW == "Y")

        PW08S-U-TEMP-STOR(); /* Update temporary storage page*/
        PW08W00.PW08W-MODIFY-SW = "N";

      end

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW08W00.XXXTSPAG > PW08W00.TA5TSQIX) /* Desired greater highest*/
        PW08W00.XXXTSPAG = PW08W00.TA5TSQIX; /* Default to highest*/
      end

      PW08S-R-TEMP-STOR(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set PW08M001.XXXLITPG skip; /* "PAGE" literal*/
    PW08M001.XXXTSPAG = PW08W00.XXXTSPAG; /* Current page*/
    set PW08M001.XXXLITOF skip; /* "OF" literal*/
    PW08M001.TA5TSQIX = PW08W00.TA5TSQIX; /* Highest page*/
    PW08W00.PW08W-MAP-IDX = 1; /* Initialize line index*/

    /* ----- move detail lines to map -------------------------*/
    while (PW08W00.PW08W-MAP-IDX <= 10 /* Until screen is full*/
     && PW08W01.PK1CUOID[PW08W-MAP-IDX] > 0) /* or end of data*/

      if (PW08W00.PW08W-MAP-IDX == 1) /* First select field*/
        set PW08M001.PW08M-ACTION[PW08W-MAP-IDX] cursor, normal;
      else
        set PW08M001.PW08M-ACTION[PW08W-MAP-IDX] normal;
      end

      PW08M001.PW08M-ACTION[PW08W-MAP-IDX] = PW08W01.PW08W-ACTION[PW08W-MAP-IDX];
      PW08M001.XPPCD[PW08W-MAP-IDX] = PW08W01.XPPCD[PW08W-MAP-IDX];
      PW08M001.PK1CUOID[PW08W-MAP-IDX] = PW08W01.PK1CUOID[PW08W-MAP-IDX];
      PW08M001.PK1NORID[PW08W-MAP-IDX] = PW08W01.PK1NORID[PW08W-MAP-IDX];
      PW08M001.TF1CARCD[PW08W-MAP-IDX] = PW08W01.TF1CARCD[PW08W-MAP-IDX];

      /* ----- DNSB dates ---------------------------------------*/
      PW08M001.PW08M-DNSB-MM[PW08W-MAP-IDX] = PW08W01.PW08W-DNSB-MM[PW08W-MAP-IDX];
      PW08M001.PW08M-DNSB-DD[PW08W-MAP-IDX] = PW08W01.PW08W-DNSB-DD[PW08W-MAP-IDX];
      PW08M001.PW08M-DNSB-YY[PW08W-MAP-IDX] = PW08W01.PW08W-DNSB-YY[PW08W-MAP-IDX];

      /* ----- DNSA dates ---------------------------------------*/
      PW08M001.PW08M-DNSA-MM[PW08W-MAP-IDX] = PW08W01.PW08W-DNSA-MM[PW08W-MAP-IDX];
      PW08M001.PW08M-DNSA-DD[PW08W-MAP-IDX] = PW08W01.PW08W-DNSA-DD[PW08W-MAP-IDX];
      PW08M001.PW08M-DNSA-YY[PW08W-MAP-IDX] = PW08W01.PW08W-DNSA-YY[PW08W-MAP-IDX];

      /* ----- ETA dates ----------------------------------------*/
      PW08M001.PW08M-ETA-MM[PW08W-MAP-IDX] = PW08W01.PW08W-ETA-MM[PW08W-MAP-IDX];
      PW08M001.PW08M-ETA-DD[PW08W-MAP-IDX] = PW08W01.PW08W-ETA-DD[PW08W-MAP-IDX];
      PW08M001.PW08M-ETA-YY[PW08W-MAP-IDX] = PW08W01.PW08W-ETA-YY[PW08W-MAP-IDX];

      /* ----- quantities ---------------------------------------*/
      PW08M001.PK4ORDFC[PW08W-MAP-IDX] = PW08W01.PK4ORDFC[PW08W-MAP-IDX];
      PW08M001.PK4ORDRP[PW08W-MAP-IDX] = PW08W01.PK4ORDRP[PW08W-MAP-IDX];
      PW08M001.PW08M-TOT-QTY[PW08W-MAP-IDX] = PW08W01.PW08W-TOT-QTY[PW08W-MAP-IDX];
      PW08M001.PK4SLIND[PW08W-MAP-IDX] = PW08W01.PK4SLIND[PW08W-MAP-IDX];
      PW08M001.PK4ORHLD[PW08W-MAP-IDX] = PW08W01.PK4ORHLD[PW08W-MAP-IDX];

      set PW08M001.XPPCD[PW08W-MAP-IDX] normal;
      set PW08M001.PW08M-DOT[PW08W-MAP-IDX] skip;

      /* --- increment line index -------------------------------*/
      PW08W00.PW08W-MAP-IDX = PW08W00.PW08W-MAP-IDX + 1;

    end
  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PW08M001.XDVCD = "01"; /* -Division code*/
  PW08M001.XBCCD = PW08W01.XBCCD; /* -Brand code*/
  PW08M001.XWHCD = PW08W01.XWHCD; /* -Warehouse code*/
   /* OVE PW08W01.XWHABRV TO PW08M001.XWHABRV;/* -Warehouse desc*/

   /* ------ 'from' and 'to' date range ---------------------------*/
  PW08M001.PW08M-FROM-MM = PW08W01.PW08W-FROM-MM;
  PW08M001.PW08M-FROM-DD = PW08W01.PW08W-FROM-DD;
  PW08M001.PW08M-FROM-YY = PW08W01.PW08W-FROM-YY;
  PW08M001.PW08M-TO-MM = PW08W01.PW08W-TO-MM;
  PW08M001.PW08M-TO-DD = PW08W01.PW08W-TO-DD;
  PW08M001.PW08M-TO-YY = PW08W01.PW08W-TO-YY;

  PW08M001.PW08M-SELECTION = PW08W01.PW08W-SELECTION;
  PW08M001.PW08M-FC-TOT = PW08W00.PW08W-FC-TOT;
  PW08M001.PW08M-RP-TOT = PW08W00.PW08W-RP-TOT;
  PW08M001.PW08M-TOTAL = PW08W00.PW08W-TOTAL;

  PW08M001.CATOAP = " ";
  PW08M001.CAITEM = " ";


end // end PW08-12101

// Format the display data
Function PW08-12103()
   /* ------------------------------------------------------------*/
   /* Note: Apply the same changes to pw08-12101.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW08M003 initial; /* M003 input/output area*/
  set PW08M003.PW08M-FROM-MM cursor; /* set cursor*/

  PW08W00.PW08W-FRMT-MAP-SW = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW08W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW08W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PW08W00.PW08W-MODIFY-SW == "Y")

        PW08S-U-TEMP-STOR(); /* Update temporary storage page*/
        PW08W00.PW08W-MODIFY-SW = "N";

      end

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW08W00.XXXTSPAG > PW08W00.TA5TSQIX) /* Desired greater highest*/
        PW08W00.XXXTSPAG = PW08W00.TA5TSQIX; /* Default to highest*/
      end

      PW08S-R-TEMP-STOR(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set PW08M003.XXXLITPG skip; /* "PAGE" literal*/
    PW08M003.XXXTSPAG = PW08W00.XXXTSPAG; /* Current page*/
    set PW08M003.XXXLITOF skip; /* "OF" literal*/
    PW08M003.TA5TSQIX = PW08W00.TA5TSQIX; /* Highest page*/
    PW08W00.PW08W-MAP-IDX = 1; /* Initialize line index*/

    /* ----- move detail lines to map -------------------------*/
    while (PW08W00.PW08W-MAP-IDX <= 10 /* Until screen is full*/
     && PW08W01.PK1CUOID[PW08W-MAP-IDX] > 0) /* or end of data*/

      if (PW08W00.PW08W-MAP-IDX == 1) /* First select field*/
        set PW08M003.PW08M-ACTION[PW08W-MAP-IDX] cursor, normal;
      else
        set PW08M003.PW08M-ACTION[PW08W-MAP-IDX] normal;
      end

      PW08M003.PW08M-ACTION[PW08W-MAP-IDX] = PW08W01.PW08W-ACTION[PW08W-MAP-IDX];
      PW08M003.XPPCD[PW08W-MAP-IDX] = PW08W01.XPPCD[PW08W-MAP-IDX];
      PW08M003.PK1CUOID[PW08W-MAP-IDX] = PW08W01.PK1CUOID[PW08W-MAP-IDX];
      PW08M003.PK1NORID[PW08W-MAP-IDX] = PW08W01.PK1NORID[PW08W-MAP-IDX];
      PW08M003.TF1CARCD[PW08W-MAP-IDX] = PW08W01.TF1CARCD[PW08W-MAP-IDX];

      /* ----- DNSB dates ---------------------------------------*/
      PW08M003.PW08M-DNSB-MM[PW08W-MAP-IDX] = PW08W01.PW08W-DNSB-MM[PW08W-MAP-IDX];
      PW08M003.PW08M-DNSB-DD[PW08W-MAP-IDX] = PW08W01.PW08W-DNSB-DD[PW08W-MAP-IDX];
      PW08M003.PW08M-DNSB-YY[PW08W-MAP-IDX] = PW08W01.PW08W-DNSB-YY[PW08W-MAP-IDX];

      /* ----- DNSA dates ---------------------------------------*/
      PW08M003.PW08M-DNSA-MM[PW08W-MAP-IDX] = PW08W01.PW08W-DNSA-MM[PW08W-MAP-IDX];
      PW08M003.PW08M-DNSA-DD[PW08W-MAP-IDX] = PW08W01.PW08W-DNSA-DD[PW08W-MAP-IDX];
      PW08M003.PW08M-DNSA-YY[PW08W-MAP-IDX] = PW08W01.PW08W-DNSA-YY[PW08W-MAP-IDX];

      /* ----- ETA dates ----------------------------------------*/
      PW08M003.PW08M-ETA-MM[PW08W-MAP-IDX] = PW08W01.PW08W-ETA-MM[PW08W-MAP-IDX];
      PW08M003.PW08M-ETA-DD[PW08W-MAP-IDX] = PW08W01.PW08W-ETA-DD[PW08W-MAP-IDX];
      PW08M003.PW08M-ETA-YY[PW08W-MAP-IDX] = PW08W01.PW08W-ETA-YY[PW08W-MAP-IDX];

      /* ----- quantities ---------------------------------------*/
      PW08M003.PK4ORDFC[PW08W-MAP-IDX] = PW08W01.PK4ORDFC[PW08W-MAP-IDX];
      PW08M003.PK4ORDRP[PW08W-MAP-IDX] = PW08W01.PK4ORDRP[PW08W-MAP-IDX];
      PW08M003.PW08M-TOT-QTY[PW08W-MAP-IDX] = PW08W01.PW08W-TOT-QTY[PW08W-MAP-IDX];
      PW08M003.PK4SLIND[PW08W-MAP-IDX] = PW08W01.PK4SLIND[PW08W-MAP-IDX];
      PW08M003.PK4ORHLD[PW08W-MAP-IDX] = PW08W01.PK4ORHLD[PW08W-MAP-IDX];

      set PW08M003.XPPCD[PW08W-MAP-IDX] normal;
      set PW08M003.PW08M-DOT[PW08W-MAP-IDX] skip;

      /* --- increment line index -------------------------------*/
      PW08W00.PW08W-MAP-IDX = PW08W00.PW08W-MAP-IDX + 1;

    end
  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PW08M003.XDVCD = "01"; /* -Division code*/
  PW08M003.XBCCD = PW08W01.XBCCD; /* -Brand code*/
  PW08M003.XWHCD = PW08W01.XWHCD; /* -Warehouse code*/
   /* OVE PW08W01.XWHABRV TO PW08M003.XWHABRV;/* -Warehouse desc*/

   /* ------ 'from' and 'to' date range ---------------------------*/
  PW08M003.PW08M-FROM-MM = PW08W01.PW08W-FROM-MM;
  PW08M003.PW08M-FROM-DD = PW08W01.PW08W-FROM-DD;
  PW08M003.PW08M-FROM-YY = PW08W01.PW08W-FROM-YY;
  PW08M003.PW08M-TO-MM = PW08W01.PW08W-TO-MM;
  PW08M003.PW08M-TO-DD = PW08W01.PW08W-TO-DD;
  PW08M003.PW08M-TO-YY = PW08W01.PW08W-TO-YY;

  PW08M003.PW08M-SELECTION = PW08W01.PW08W-SELECTION;
  PW08M003.PW08M-FC-TOT = PW08W00.PW08W-FC-TOT;
  PW08M003.PW08M-RP-TOT = PW08W00.PW08W-RP-TOT;
  PW08M003.PW08M-TOTAL = PW08W00.PW08W-TOTAL;

  PW08M003.CATOAP = " ";
  PW08M003.CAITEM = " ";


end // end PW08-12103

// Check attention identifier
Function PW08-130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PW08W00.PW08W-REQST-DATA-SW == "Y")
      set PW08W01 empty; /* M001 display storage*/
    end

    PW08W00.PW08W-FRMT-MAP-SW = "Y";
    PW08W00.PW08W-REQST-DATA-SW = "N";

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/

    if (PW08M003.CATOAP > " ") /* FAST PATH was requested*/
      if (converseVar.eventKey is enter) /* ENTER was pressed*/
        if (PW08M003.CATOAP == "PW08") /* FAST PATH TO SELF*/
          converseLib.validationFailed(1); /* INVALID FAST PATH OPTION*/
          set PW08M003.CATOAP cursor, bold; /* HIGHLIGHT*/
          exit stack;
        end
        PW08S-P-TEMP-STOR();
        XSPKS01(); /* Exit to another application*/
        set PW08M003.CATOAP cursor, bold; /* Highlight*/
        PW08W00.PW08W-REQST-DATA-SW = "Y";
        PW08W00.PW08W-FRMT-MAP-SW = "Y";
      else
        PW08W00.XXXMODID = "130"; /* Module identification*/
        converseLib.validationFailed(13); /* PA/PF key may not be used*/
      end
      exit stack; /* Exit to display map*/
    end
  else

    if (PW08M001.CATOAP > " ") /* FAST PATH was requested*/
      if (converseVar.eventKey is enter) /* ENTER was pressed*/
        if (PW08M001.CATOAP == "PW08") /* FAST PATH TO SELF*/
          converseLib.validationFailed(1); /* INVALID FAST PATH OPTION*/
          set PW08M001.CATOAP cursor, bold; /* HIGHLIGHT*/
          exit stack;
        end
        PW08S-P-TEMP-STOR();
        XSPKS01(); /* Exit to another application*/
        set PW08M001.CATOAP cursor, bold; /* Highlight*/
        PW08W00.PW08W-REQST-DATA-SW = "Y";
        PW08W00.PW08W-FRMT-MAP-SW = "Y";
      else
        PW08W00.XXXMODID = "130"; /* Module identification*/
        converseLib.validationFailed(13); /* PA/PF key may not be used*/
      end
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1  - help*/
   || converseVar.eventKey is pf3  /* PF3  - exit*/
   || converseVar.eventKey is pf4  /* PF4  - mstr menu*/
   || converseVar.eventKey is pf5  /* PF5  - PW0R*/
   || converseVar.eventKey is pf13 /* PF13 - PW0J*/
   || converseVar.eventKey is pf14 /* PF14 - PK0T or PK0K*/
   || converseVar.eventKey is pf15 /* PF15 - PK0U or PK0L*/
   || converseVar.eventKey is pf16 /* PF16 - PW0M*/
   || converseVar.eventKey is pf17 /* PF17 - PW0P*/
   || converseVar.eventKey is pf18 /* PF18 - PW0X*/
   || converseVar.eventKey is pf19) /* PF19 - PW06*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      if (PKWREC.PKWSELSW == "PK") /* picking*/
        COMMAREA.CAITEM = "PW08M003"; /* Application find code*/
      else
        COMMAREA.CAITEM = "PW08M001"; /* Application find code*/
      end
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      if (PKWREC.PKWSELSW == "PP") /* pick planning*/
        COMMAREA.CATOAP = "PW0W"; /* TO application*/
      else
        if (PKWREC.PKWSELSW == "PK") /* picking*/
          COMMAREA.CATOAP = "PW0V"; /* TO application*/
        else
          COMMAREA.CATOAP = "PW0W"; /* TO application*/
        end
      end
      PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "PW0R"; /* TO application*/
      PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "PW0J"; /* TO application*/
      PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      if (PKWREC.PKWSELSW == "PK") /* picking*/
        COMMAREA.CATOAP = "PK0K"; /* TO application*/
        PKWREC.PKWARRAY = PWKREC.PWKARRAY;
      else
        COMMAREA.CATOAP = "PK0T"; /* TO application*/
        PKWREC.PKWARRAY = PWKREC.PWKARRAY;
      end
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      if (PKWREC.PKWSELSW == "PK") /* picking*/
        COMMAREA.CATOAP = "PK0L"; /* TO application*/
        PKWREC.PKWARRAY = PWKREC.PWKARRAY;
      else
        COMMAREA.CATOAP = "PKOU"; /* TO application*/
        PKWREC.PKWARRAY = PWKREC.PWKARRAY;
      end
    end

    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "PW0M"; /* TO application*/
      PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "PW0P"; /* TO application*/
      PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    end

    if (converseVar.eventKey is pf18) /* PF18 was pressed*/
      COMMAREA.CATOAP = "PW0X"; /* TO application*/
      PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    end

    if (converseVar.eventKey is pf19) /* PF19 was pressed*/
      COMMAREA.CATOAP = "PW06"; /* TO application*/
      PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    end

    PW08S-P-TEMP-STOR();

    XSPKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    PW08W00.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PW08-130

// Reset highlighted fields
Function PW08-140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
   /* ----- 'from' and 'to' date range ----------------------------*/
    set PW08M003.PW08M-FROM-MM initialAttributes;
    set PW08M003.PW08M-FROM-DD initialAttributes;
    set PW08M003.PW08M-FROM-YY initialAttributes;
    set PW08M003.PW08M-TO-MM initialAttributes;
    set PW08M003.PW08M-TO-DD initialAttributes;
    set PW08M003.PW08M-TO-YY initialAttributes;

    set PW08M003.PW08M-SELECTION initialAttributes;
    set PW08M003.XBCCD initialAttributes;

    PW08W00.PW08W-MAP-IDX = 1; /* Initialize line index*/

    while (PW08W00.PW08W-MAP-IDX <= 10 /* Until end of lines*/
     && PW08M003.PK1CUOID[PW08W-MAP-IDX] > 0) /* or end of display*/

      set PW08M003.PW08M-ACTION[PW08W-MAP-IDX] normal;
      set PW08M003.XPPCD[PW08W-MAP-IDX] normal;

     /* ---- increment map index ------------------------------------*/
      PW08W00.PW08W-MAP-IDX = PW08W00.PW08W-MAP-IDX + 1;

    end

    set PW08M003.CATOAP initialAttributes; /* TO application*/
    set PW08M003.CAITEM initialAttributes; /* Application data*/

  else
   /* ----- 'from' and 'to' date range ----------------------------*/
    set PW08M001.PW08M-FROM-MM initialAttributes;
    set PW08M001.PW08M-FROM-DD initialAttributes;
    set PW08M001.PW08M-FROM-YY initialAttributes;
    set PW08M001.PW08M-TO-MM initialAttributes;
    set PW08M001.PW08M-TO-DD initialAttributes;
    set PW08M001.PW08M-TO-YY initialAttributes;

    set PW08M001.PW08M-SELECTION initialAttributes;
    set PW08M001.XBCCD initialAttributes;

    PW08W00.PW08W-MAP-IDX = 1; /* Initialize line index*/

    while (PW08W00.PW08W-MAP-IDX <= 10 /* Until end of lines*/
     && PW08M001.PK1CUOID[PW08W-MAP-IDX] > 0) /* or end of display*/

      set PW08M001.PW08M-ACTION[PW08W-MAP-IDX] normal;
      set PW08M001.XPPCD[PW08W-MAP-IDX] normal;

     /* ---- increment map index ------------------------------------*/
      PW08W00.PW08W-MAP-IDX = PW08W00.PW08W-MAP-IDX + 1;

    end

    set PW08M001.CATOAP initialAttributes; /* TO application*/
    set PW08M001.CAITEM initialAttributes; /* Application data*/

  end


end // end PW08-140

// Verify data entered
Function PW08-150()
   /* ------------------------------------------------------------*/
   /* Select which edit routine to process.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW08-15003();
  else
    PW08-15001();
  end


end // end PW08-150

// Verify data entered
Function PW08-15001()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw08-15003 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PW08M001.CAITEM > " ") /* Application data was entered*/

    PW08W00.XXXMODID = "150"; /* Module identification*/
    set PW08M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* Check if key fields in the heading line and detail lines.*/
   /* If the key has changed, set request new data switch.*/
   /* If the detail lines have changed, set screen modified*/
   /* switch to process specified action.*/
   /* ------------------------------------------------------------*/

   /* -------------------------------------------------------------*/
   /* Brand code*/
   /* -------------------------------------------------------------*/

  if (PW08M001.XBCCD != PW08W01.XBCCD)

    if (PW08M001.XBCCD != "*")
      if (PW08M001.XBCCD in XBCTBL.XBCCD)
        if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          converseLib.validationFailed(414); /* INACTIVE BRAND CODE*/
          set PW08M001.XBCCD cursor, bold;
          TA1REC.TA1LOC = "150";
          exit stack;
        else
          PW08W01.XBCCD = PW08M001.XBCCD;
          PKWREC.XBCCD[1] = PW08M001.XBCCD;
          PW08W00.PW08W-REQST-DATA-SW = "Y";
        end
      else
        converseLib.validationFailed(413); /* INVALID BRAND CODE*/
        set PW08M001.XBCCD cursor, bold;
        TA1REC.TA1LOC = "150";
        exit stack;
      end
    else
      PW08W00.XXXMSGNO = 421;
      PW08W01.XBCCD = PW08M001.XBCCD;
      PKWREC.XBCCD[1] = PW08M001.XBCCD;
    end
  end

   /* -------------------------------------------------------------*/
   /* Selection code*/
   /* -------------------------------------------------------------*/

  if (PW08M001.PW08M-SELECTION != PW08W01.PW08W-SELECTION)

    /* ----- selection code must be 'A' , 'N' or 'S' -------------*/
    if (PW08M001.PW08M-SELECTION == "A"
     || PW08M001.PW08M-SELECTION == "N"
     || PW08M001.PW08M-SELECTION == "S")

      PW08W00.PW08W-REQST-DATA-SW = "Y";

    else
      converseLib.validationFailed(322); /* only a,n or s allowed*/
      set PW08M001.PW08M-SELECTION cursor, bold; /* highlight*/
      exit stack;
    end

  end

  PW08-15301(); /* check date range*/


   /* ------------------------------------------------------------*/
   /* Check if data has changed in the detail lines*/
   /* ------------------------------------------------------------*/

   /* ----- Detail lines ------------------------------------------*/
  if (PW08W00.TA5TSQIX > 0) /* Page was formatted*/

    PW08W00.PW08W-MAP-IDX = 10; /* Initialize line index*/

    while (PW08W00.PW08W-MAP-IDX > 0) /* Until end of lines*/

      /* ----- check if data has changed -------------------------*/
      if (PW08M001.PK1CUOID[PW08W-MAP-IDX] != 0)

        if (PW08M001.PW08M-ACTION[PW08W-MAP-IDX] != 
        PW08W01.PW08W-ACTION[PW08W-MAP-IDX]
         || PW08M001.XPPCD[PW08W-MAP-IDX] != PW08W01.XPPCD[PW08W-MAP-IDX])

          PW08-15201(); /* Verify data in the line*/

        end
      end

      /* ---- decrement map index --------------------------------*/
      PW08W00.PW08W-MAP-IDX = PW08W00.PW08W-MAP-IDX - 1;

    end
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PW08-151(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end PW08-15001

// Verify data entered
Function PW08-15003()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw08-15001 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PW08M003.CAITEM > " ") /* Application data was entered*/

    PW08W00.XXXMODID = "150"; /* Module identification*/
    set PW08M003.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* Check if key fields in the heading line and detail lines.*/
   /* If the key has changed, set request new data switch.*/
   /* If the detail lines have changed, set screen modified*/
   /* switch to process specified action.*/
   /* ------------------------------------------------------------*/

   /* -------------------------------------------------------------*/
   /* Brand code*/
   /* -------------------------------------------------------------*/

  if (PW08M003.XBCCD != PW08W01.XBCCD)

    if (PW08M003.XBCCD != "*")
      if (PW08M003.XBCCD in XBCTBL.XBCCD)
        if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          converseLib.validationFailed(414); /* INACTIVE BRAND CODE*/
          set PW08M003.XBCCD cursor, bold;
          TA1REC.TA1LOC = "150";
          exit stack;
        else
          PW08W01.XBCCD = PW08M003.XBCCD;
          PKWREC.XBCCD[1] = PW08M003.XBCCD;
          PW08W00.PW08W-REQST-DATA-SW = "Y";
        end
      else
        converseLib.validationFailed(413); /* INVALID BRAND CODE*/
        set PW08M003.XBCCD cursor, bold;
        TA1REC.TA1LOC = "150";
        exit stack;
      end
    else
      PW08W00.XXXMSGNO = 421;
      PW08W01.XBCCD = PW08M003.XBCCD;
      PKWREC.XBCCD[1] = PW08M003.XBCCD;
    end
  end

   /* -------------------------------------------------------------*/
   /* Selection code*/
   /* -------------------------------------------------------------*/

  if (PW08M003.PW08M-SELECTION != PW08W01.PW08W-SELECTION)

    /* ----- selection code must be 'A' , 'N' or 'S' -------------*/
    if (PW08M003.PW08M-SELECTION == "A"
     || PW08M003.PW08M-SELECTION == "N"
     || PW08M003.PW08M-SELECTION == "S")

      PW08W00.PW08W-REQST-DATA-SW = "Y";

    else
      converseLib.validationFailed(322); /* only a,n or s allowed*/
      set PW08M003.PW08M-SELECTION cursor, bold; /* highlight*/
      exit stack;
    end

  end

  PW08-15303(); /* check date range*/


   /* ------------------------------------------------------------*/
   /* Check if data has changed in the detail lines*/
   /* ------------------------------------------------------------*/

   /* ----- Detail lines ------------------------------------------*/
  if (PW08W00.TA5TSQIX > 0) /* Page was formatted*/

    PW08W00.PW08W-MAP-IDX = 10; /* Initialize line index*/

    while (PW08W00.PW08W-MAP-IDX > 0) /* Until end of lines*/

      /* ----- check if data has changed -------------------------*/
      if (PW08M003.PK1CUOID[PW08W-MAP-IDX] != 0)

        if (PW08M003.PW08M-ACTION[PW08W-MAP-IDX] != 
        PW08W01.PW08W-ACTION[PW08W-MAP-IDX]
         || PW08M003.XPPCD[PW08W-MAP-IDX] != PW08W01.XPPCD[PW08W-MAP-IDX])

          PW08-15203(); /* Verify data in the line*/

        end
      end

      /* ---- decrement map index --------------------------------*/
      PW08W00.PW08W-MAP-IDX = PW08W00.PW08W-MAP-IDX - 1;

    end
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PW08-151(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end PW08-15003

// Verify scroll request
Function PW08-151()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PW08W00.XXXTSPAG < 2)       /* and no previous pages*/

    PW08W00.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(37); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PW08W00.XXXTSPAG >= PW08W00.TA5TSQIX) /* and no more pages*/

    PW08W00.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(38); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if selection was changed.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/

    if (PW08M003.PW08M-SELECTION != PW08W01.PW08W-SELECTION)

      PW08W00.XXXMODID = "151"; /* Module identification*/
      set PW08M003.PW08M-SELECTION cursor, bold; /* Highlight*/
      converseLib.validationFailed(39); /* Field may not change*/

    end
  else

    if (PW08M001.PW08M-SELECTION != PW08W01.PW08W-SELECTION)

      PW08W00.XXXMODID = "151"; /* Module identification*/
      set PW08M001.PW08M-SELECTION cursor, bold; /* Highlight*/
      converseLib.validationFailed(39); /* Field may not change*/

    end
  end


end // end PW08-151

// Verify data in line
Function PW08-15201()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw08-15203 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If action was entered and is not a "s", "d", "i", "h", " ",*/
   /* error*/
   /* ------------------------------------------------------------*/

  if (PW08M001.PW08M-ACTION[PW08W-MAP-IDX] != 
  PW08W01.PW08W-ACTION[PW08W-MAP-IDX]
   && PW08M001.PW08M-ACTION[PW08W-MAP-IDX] != "S"
   && PW08M001.PW08M-ACTION[PW08W-MAP-IDX] != "D"
   && PW08M001.PW08M-ACTION[PW08W-MAP-IDX] != "I"
   && PW08M001.PW08M-ACTION[PW08W-MAP-IDX] != "H"
   && PW08M001.PW08M-ACTION[PW08W-MAP-IDX] != " ")

    PW08W00.XXXMODID = "152"; /* Module identification*/
    set PW08M001.PW08M-ACTION[PW08W-MAP-IDX] cursor, bold; /* Highlight*/
    converseLib.validationFailed(35); /* Only valid codes may be entered*/
    return; /* done with this line*/

  end

   /* ------------------------------------------------------------*/
   /* Now that action is valid, check corresponding data.*/
   /* ------------------------------------------------------------*/

   /* ----------- select to pick ---------------------------*/
  if (PW08M001.PW08M-ACTION[PW08W-MAP-IDX] == "S")

    /* --- default if pick priority is blank --------------*/
    if (PW08M001.XPPCD[PW08W-MAP-IDX] == "  ")
      PW08M001.XPPCD[PW08W-MAP-IDX] = "30";
    else
      if (PW08M001.XPPCD[PW08W-MAP-IDX] != "10"
       && PW08M001.XPPCD[PW08W-MAP-IDX] != "20"
       && PW08M001.XPPCD[PW08W-MAP-IDX] != "30")

        PW08W00.XXXMODID = "152"; /* Module id*/
        converseLib.validationFailed(342); /* invalid field*/
        set PW08M001.XPPCD[PW08W-MAP-IDX] cursor, bold; /* highlight*/
      end
    end

  end

  if (PW08M001.PW08M-ACTION[PW08W-MAP-IDX] == " "
   && PW08M001.XPPCD[PW08W-MAP-IDX] != PW08W01.XPPCD[PW08W-MAP-IDX])

    PW08W00.XXXMODID = "152"; /* Module identification*/
    set PW08M001.PW08M-ACTION[PW08W-MAP-IDX] cursor, bold; /* Highlight*/
    converseLib.validationFailed(35); /* Only valid codes may be entered*/

  end

  if (converseVar.validationMsgNum != 0 /* there are errors*/
   || PW08M001.PW08M-ACTION[PW08W-MAP-IDX] == " ") /* un-selecting action*/

    return;
  end

  PW08W00.PW08W-SCREEN-MDFY-SW = "Y";
  PW08W00.PW08W-STOR-UPDATE-SW = "Y";


end // end PW08-15201

// Verify data in line
Function PW08-15203()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw08-15201 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If action was entered and is not a "s", "d", "i", "h", " ",*/
   /* error*/
   /* ------------------------------------------------------------*/

  if (PW08M003.PW08M-ACTION[PW08W-MAP-IDX] != 
  PW08W01.PW08W-ACTION[PW08W-MAP-IDX]
   && PW08M003.PW08M-ACTION[PW08W-MAP-IDX] != "S"
   && PW08M003.PW08M-ACTION[PW08W-MAP-IDX] != "D"
   && PW08M003.PW08M-ACTION[PW08W-MAP-IDX] != "I"
   && PW08M003.PW08M-ACTION[PW08W-MAP-IDX] != "H"
   && PW08M003.PW08M-ACTION[PW08W-MAP-IDX] != " ")

    PW08W00.XXXMODID = "152"; /* Module identification*/
    set PW08M003.PW08M-ACTION[PW08W-MAP-IDX] cursor, bold; /* Highlight*/
    converseLib.validationFailed(35); /* Only valid codes may be entered*/
    return; /* done with this line*/

  end

   /* ------------------------------------------------------------*/
   /* Now that action is valid, check corresponding data.*/
   /* ------------------------------------------------------------*/

   /* ----------- select to pick ---------------------------*/
  if (PW08M003.PW08M-ACTION[PW08W-MAP-IDX] == "S")

    /* --- default if pick priority is blank --------------*/
    if (PW08M003.XPPCD[PW08W-MAP-IDX] == "  ")
      PW08M003.XPPCD[PW08W-MAP-IDX] = "30";
    else
      if (PW08M003.XPPCD[PW08W-MAP-IDX] != "10"
       && PW08M003.XPPCD[PW08W-MAP-IDX] != "20"
       && PW08M003.XPPCD[PW08W-MAP-IDX] != "30")

        PW08W00.XXXMODID = "152"; /* Module id*/
        converseLib.validationFailed(342); /* invalid field*/
        set PW08M003.XPPCD[PW08W-MAP-IDX] cursor, bold; /* highlight*/
      end
    end

  end

  if (PW08M003.PW08M-ACTION[PW08W-MAP-IDX] == " "
   && PW08M003.XPPCD[PW08W-MAP-IDX] != PW08W01.XPPCD[PW08W-MAP-IDX])

    PW08W00.XXXMODID = "152"; /* Module identification*/
    set PW08M003.PW08M-ACTION[PW08W-MAP-IDX] cursor, bold; /* Highlight*/
    converseLib.validationFailed(35); /* Only valid codes may be entered*/

  end

  if (converseVar.validationMsgNum != 0 /* there are errors*/
   || PW08M003.PW08M-ACTION[PW08W-MAP-IDX] == " ") /* un-selecting action*/

    return;
  end

  PW08W00.PW08W-SCREEN-MDFY-SW = "Y";
  PW08W00.PW08W-STOR-UPDATE-SW = "Y";


end // end PW08-15203

// Verify date range
Function PW08-15301()
   /* -----------------------------------------------------------*/
   /* Note: Apply all changes to pw08-15303.*/
   /* -----------------------------------------------------------*/
   /* -----------------------------------------------------------*/
   /* verify "to" and "from" date ranges.*/
   /* -----------------------------------------------------------*/

   /* ----- 'to' date must be greater than zero ------------------*/
  if (PW08M001.PW08M-TO-MM == 0
   && PW08M001.PW08M-TO-DD == 0
   && PW08M001.PW08M-TO-YY == 0)

    converseLib.validationFailed(158);
    PW08W00.XXXMODID = "153";
    set PW08M001.PW08M-TO-MM cursor, bold;
    set PW08M001.PW08M-TO-DD bold;
    set PW08M001.PW08M-TO-YY bold;
    return;
  end

   /* -------- move map fields to w/s -------------------------*/
  PW08W00.PW08W-TO-MM = PW08M001.PW08M-TO-MM;
  PW08W00.PW08W-TO-DD = PW08M001.PW08M-TO-DD;
  PW08W00.PW08W-TO-YY = PW08M001.PW08M-TO-YY;
  PW08W00.PW08W-TO-CC = 0;
  PW08W00.PW08W-FROM-MM = PW08M001.PW08M-FROM-MM;
  PW08W00.PW08W-FROM-DD = PW08M001.PW08M-FROM-DD;
  PW08W00.PW08W-FROM-YY = PW08M001.PW08M-FROM-YY;
  PW08W00.PW08W-FROM-CC = 0;

   /* ------- convert TO date to yyyymmdd ----------------------*/
  if (PW08W00.PW08W-TO-YY > 50
   && PW08W00.PW08W-TO-YY <= 99)

    PW08W00.PW08W-TO-CC = 19;
  else
    PW08W00.PW08W-TO-CC = 20;
  end

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = PW08W00.PW08W-TO-DT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD != 0)
    set PW08M001.PW08M-TO-MM cursor, bold;
    set PW08M001.PW08M-TO-DD bold;
    set PW08M001.PW08M-TO-YY bold;
    PW08W00.XXXMODID = "153";
    converseLib.validationFailed(158); /* invalid date*/
  end

   /* ------ convert from date to yyyymmdd -------------------*/

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF PW08M001.PW08M-FROM-MM GT 0*/
  /* AND PW08M001.PW08M-FROM-DD GT 0*/
  /* AND PW08M001.PW08M-FROM-YY GT 0;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
  if (PW08M001.PW08M-FROM-MM > 0
   && PW08M001.PW08M-FROM-DD > 0)
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

    if (PW08W00.PW08W-FROM-YY > 50
     && PW08W00.PW08W-FROM-YY <= 99)

      PW08W00.PW08W-FROM-CC = 19;
    else
      PW08W00.PW08W-FROM-CC = 20;
    end

    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = PW08W00.PW08W-FROM-DT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD != 0)
      set PW08M001.PW08M-FROM-MM cursor, bold;
      set PW08M001.PW08M-FROM-DD bold;
      set PW08M001.PW08M-FROM-YY bold;
      PW08W00.XXXMODID = "153";
      converseLib.validationFailed(158); /* invalid date*/
    end
  else
    PW08W00.PW08W-FROM-DT = 0;
  end


   /* ------- 'to' date must be greater than 'from' date -------*/
  if (PW08W00.PW08W-TO-DT < PW08W00.PW08W-FROM-DT)
    set PW08M001.PW08M-TO-MM cursor, bold;
    set PW08M001.PW08M-TO-DD bold;
    set PW08M001.PW08M-TO-YY bold;
    PW08W00.XXXMODID = "153";
    converseLib.validationFailed(286); /* invalid date*/
  end

end // end PW08-15301

// Verify date range
Function PW08-15303()
   /* -----------------------------------------------------------*/
   /* Note: Apply changes to pw08-15301 also.*/
   /* -----------------------------------------------------------*/
   /* -----------------------------------------------------------*/
   /* verify "to" and "from" date ranges.*/
   /* -----------------------------------------------------------*/

   /* ----- 'to' date must be greater than zero ------------------*/
  if (PW08M003.PW08M-TO-MM == 0
   && PW08M003.PW08M-TO-DD == 0
   && PW08M003.PW08M-TO-YY == 0)

    converseLib.validationFailed(158);
    PW08W00.XXXMODID = "153";
    set PW08M003.PW08M-TO-MM cursor, bold;
    set PW08M003.PW08M-TO-DD bold;
    set PW08M003.PW08M-TO-YY bold;
    return;
  end

   /* -------- move map fields to w/s -------------------------*/
  PW08W00.PW08W-TO-MM = PW08M003.PW08M-TO-MM;
  PW08W00.PW08W-TO-DD = PW08M003.PW08M-TO-DD;
  PW08W00.PW08W-TO-YY = PW08M003.PW08M-TO-YY;
  PW08W00.PW08W-TO-CC = 0;
  PW08W00.PW08W-FROM-MM = PW08M003.PW08M-FROM-MM;
  PW08W00.PW08W-FROM-DD = PW08M003.PW08M-FROM-DD;
  PW08W00.PW08W-FROM-YY = PW08M003.PW08M-FROM-YY;
  PW08W00.PW08W-FROM-CC = 0;

   /* ------- convert TO date to yyyymmdd ----------------------*/
  if (PW08W00.PW08W-TO-YY > 50
   && PW08W00.PW08W-TO-YY <= 99)

    PW08W00.PW08W-TO-CC = 19;
  else
    PW08W00.PW08W-TO-CC = 20;
  end

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = PW08W00.PW08W-TO-DT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD != 0)
    set PW08M003.PW08M-TO-MM cursor, bold;
    set PW08M003.PW08M-TO-DD bold;
    set PW08M003.PW08M-TO-YY bold;
    PW08W00.XXXMODID = "153";
    converseLib.validationFailed(158); /* invalid date*/
  end

   /* ------ convert from date to yyyymmdd -------------------*/

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF PW08M003.PW08M-FROM-MM GT 0*/
  /* AND PW08M003.PW08M-FROM-DD GT 0*/
  /* AND PW08M003.PW08M-FROM-YY GT 0;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
  if (PW08M003.PW08M-FROM-MM > 0
   && PW08M003.PW08M-FROM-DD > 0)
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

    if (PW08W00.PW08W-FROM-YY > 50
     && PW08W00.PW08W-FROM-YY <= 99)

      PW08W00.PW08W-FROM-CC = 19;
    else
      PW08W00.PW08W-FROM-CC = 20;
    end

    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = PW08W00.PW08W-FROM-DT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD != 0)
      set PW08M003.PW08M-FROM-MM cursor, bold;
      set PW08M003.PW08M-FROM-DD bold;
      set PW08M003.PW08M-FROM-YY bold;
      PW08W00.XXXMODID = "153";
      converseLib.validationFailed(158); /* invalid date*/
    end
  else
    PW08W00.PW08W-FROM-DT = 0;
  end


   /* ------- 'to' date must be greater than 'from' date -------*/
  if (PW08W00.PW08W-TO-DT < PW08W00.PW08W-FROM-DT)
    set PW08M003.PW08M-TO-MM cursor, bold;
    set PW08M003.PW08M-TO-DD bold;
    set PW08M003.PW08M-TO-YY bold;
    PW08W00.XXXMODID = "153";
    converseLib.validationFailed(286); /* invalid date*/
  end

end // end PW08-15303

// Process data entered
Function PW08-160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PW08W00.PW08W-FRMT-MAP-SW = "Y"; /* Format the map switch*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW08-16003();
  else
    PW08-16001();
  end

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* enter was pressed*/

    if (PKWREC.PKWSELSW == "PK") /* picking*/

      if (PW08M003.PW08M-SELECTION != PW08W01.PW08W-SELECTION)
        PW08W00.PW08W-REQST-DATA-SW = "Y"; /* Request for data switch*/
        return; /* Return to previous process*/
      else

        if (PW08W00.PW08W-STOR-UPDATE-SW != "Y")
          return; /* Return to previous process*/
        else
          XX0XS01(); /* get system date and time*/
          PW08-161(); /* perform updates*/
          PW08W00.PW08W-STOR-UPDATE-SW = "N";

          VGVar.handleSysLibraryErrors = 0;
          sysLib.commit(); /* commit all changes*/

         /* ---------------------------------------------------------*/
         /* If action is 'H'old, display map 2 (PW08M002)*/
         /* If action is 'I'nquiry, transfer to PW0I*/
         /* ---------------------------------------------------------*/

          if (PW08W00.PW08W-HOLD-IDX > 1 /* orders to put on hold*/
           || PW08W00.PW08W-ORD-INQ-IDX > 1) /* orders to inquire on*/

            if (PW08W00.PW08W-HOLD-IDX > 1) /* there were orders to hold*/
              PW08W00.PW08W-DISPLAY-SW = "2"; /* display PW08M002*/
              PW08W00.PW08W-REQST-DATA-SW = "Y";
              return;
            end

            if (PW08W00.PW08W-ORD-INQ-IDX > 1) /* orders to inquire on*/
              PWJREC.XWHCD = PKWREC.XWHCD;
              PWJREC.XWHABRV = PKWREC.XWHABRV;
              PW08-166(); /* xfer to PW0I*/
            end
          else
            PW08W00.XXXTSPAG = 1; /* force display to first page*/
          end

        end
      end
    else

      if (PW08M001.PW08M-SELECTION != PW08W01.PW08W-SELECTION)
        PW08W00.PW08W-REQST-DATA-SW = "Y"; /* Request for data switch*/
        return; /* Return to previous process*/
      else

        if (PW08W00.PW08W-STOR-UPDATE-SW != "Y")
          return; /* Return to previous process*/
        else
          XX0XS01(); /* get system date and time*/
          PW08-161(); /* perform updates*/
          PW08W00.PW08W-STOR-UPDATE-SW = "N";

          VGVar.handleSysLibraryErrors = 0;
          sysLib.commit(); /* commit all changes*/

         /* ---------------------------------------------------------*/
         /* If action is 'H'old, display map 2 (PW08M002)*/
         /* If action is 'I'nquiry, transfer to PW0I*/
         /* ---------------------------------------------------------*/

          if (PW08W00.PW08W-HOLD-IDX > 1 /* orders to put on hold*/
           || PW08W00.PW08W-ORD-INQ-IDX > 1) /* orders to inquire on*/

            if (PW08W00.PW08W-HOLD-IDX > 1) /* there were orders to hold*/
              PW08W00.PW08W-DISPLAY-SW = "2"; /* display PW08M002*/
              PW08W00.PW08W-REQST-DATA-SW = "Y";
              return;
            end

            if (PW08W00.PW08W-ORD-INQ-IDX > 1) /* orders to inquire on*/
              PWJREC.XWHCD = PKWREC.XWHCD;
              PWJREC.XWHABRV = PKWREC.XWHABRV;
              PW08-166(); /* xfer to PW0I*/
            end
          else
            PW08W00.XXXTSPAG = 1; /* force display to first page*/
          end

        end
      end

    end
  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    PW08W00.XXXTSPAG = PW08W00.XXXTSPAG - 1; /* Decrement page number*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    PW08W00.XXXTSPAG = PW08W00.XXXTSPAG + 1; /* Increment page number*/
    return; /* Return to previous process*/
  end



end // end PW08-160

// Process data entered
Function PW08-16001()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw08-16003 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If a search key was entered, request the data to display.*/
   /* and set up date ranges for comparisons in processing*/
   /* ------------------------------------------------------------*/

  if (PW08M001.PW08M-FROM-MM != PW08W01.PW08W-FROM-MM
   || PW08M001.PW08M-FROM-DD != PW08W01.PW08W-FROM-DD
   || PW08M001.PW08M-FROM-YY != PW08W01.PW08W-FROM-YY
   || PW08M001.PW08M-TO-MM != PW08W01.PW08W-TO-MM
   || PW08M001.PW08M-TO-DD != PW08W01.PW08W-TO-DD
   || PW08M001.PW08M-TO-YY != PW08W01.PW08W-TO-YY
   || PW08M001.PW08M-SELECTION != PW08W01.PW08W-SELECTION)

    PW08W00.PW08W-REQST-DATA-SW = "Y";

    /* ----- 'from' date --------------------------------------*/
    PW08W01.PW08W-FROM-DD = PW08M001.PW08M-FROM-DD;
    PW08W01.PW08W-FROM-MM = PW08M001.PW08M-FROM-MM;
    PW08W01.PW08W-FROM-YY = PW08M001.PW08M-FROM-YY;
    /* ----- 'to' date ----------------------------------------*/
    PW08W01.PW08W-TO-DD = PW08M001.PW08M-TO-DD;
    PW08W01.PW08W-TO-MM = PW08M001.PW08M-TO-MM;
    PW08W01.PW08W-TO-YY = PW08M001.PW08M-TO-YY;

    /* -------------------------------------------------------*/
    /* move data to pkwrec.*/
    /* -------------------------------------------------------*/

    PKWREC.XWHCD = PW08M001.XWHCD;
    PKWREC.PKWFRMDT[1] = PW08W00.PW08W-FROM-DT;
    PKWREC.PKWTODT[1] = PW08W00.PW08W-TO-DT;
    PKWREC.PKWXWHCD = " ";
    PKWREC.PKWFRMAP[1] = "PW08";
    PKWREC.PKWSLTYP[1] = " ";

    return;
  end

   /* ------------------------------------------------------------*/
   /* If any data lines were changed, save and update t/s.*/
   /* ------------------------------------------------------------*/

  if (PW08W00.PW08W-SCREEN-MDFY-SW == "Y")

    PW08W00.PW08W-MAP-IDX = 1;

    /* ------ continue for all detail lines and data exists -------------*/
    while (PW08W00.PW08W-MAP-IDX <= 10
     && PW08M001.PK1CUOID[PW08W-MAP-IDX] != 0)

      PW08W01.PW08W-ACTION[PW08W-MAP-IDX] = PW08M001.PW08M-ACTION[PW08W-MAP-IDX];
      PW08W01.XPPCD[PW08W-MAP-IDX] = PW08M001.XPPCD[PW08W-MAP-IDX];

      PW08W00.PW08W-MAP-IDX = PW08W00.PW08W-MAP-IDX + 1;

    end

    TA5REC.TA5TSQIX = PW08W00.XXXTSPAG; /* which page to update*/
    PW08S-U-TEMP-STOR();

  end


end // end PW08-16001

// Process data entered
Function PW08-16003()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw08-16001 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If a search key was entered, request the data to display.*/
   /* and set up date ranges for comparisons in processing*/
   /* ------------------------------------------------------------*/

  if (PW08M003.PW08M-FROM-MM != PW08W01.PW08W-FROM-MM
   || PW08M003.PW08M-FROM-DD != PW08W01.PW08W-FROM-DD
   || PW08M003.PW08M-FROM-YY != PW08W01.PW08W-FROM-YY
   || PW08M003.PW08M-TO-MM != PW08W01.PW08W-TO-MM
   || PW08M003.PW08M-TO-DD != PW08W01.PW08W-TO-DD
   || PW08M003.PW08M-TO-YY != PW08W01.PW08W-TO-YY
   || PW08M003.PW08M-SELECTION != PW08W01.PW08W-SELECTION)

    PW08W00.PW08W-REQST-DATA-SW = "Y";

    /* ----- 'from' date --------------------------------------*/
    PW08W01.PW08W-FROM-DD = PW08M003.PW08M-FROM-DD;
    PW08W01.PW08W-FROM-MM = PW08M003.PW08M-FROM-MM;
    PW08W01.PW08W-FROM-YY = PW08M003.PW08M-FROM-YY;
    /* ----- 'to' date ----------------------------------------*/
    PW08W01.PW08W-TO-DD = PW08M003.PW08M-TO-DD;
    PW08W01.PW08W-TO-MM = PW08M003.PW08M-TO-MM;
    PW08W01.PW08W-TO-YY = PW08M003.PW08M-TO-YY;

    /* -------------------------------------------------------*/
    /* move data to pkwrec.*/
    /* -------------------------------------------------------*/

    PKWREC.XWHCD = PW08M003.XWHCD;
    PKWREC.PKWFRMDT[1] = PW08W00.PW08W-FROM-DT;
    PKWREC.PKWTODT[1] = PW08W00.PW08W-TO-DT;
    PKWREC.PKWXWHCD = " ";
    PKWREC.PKWFRMAP[1] = "PW08";
    PKWREC.PKWSLTYP[1] = " ";

    return;
  end

   /* ------------------------------------------------------------*/
   /* If any data lines were changed, save and update t/s.*/
   /* ------------------------------------------------------------*/

  if (PW08W00.PW08W-SCREEN-MDFY-SW == "Y")

    PW08W00.PW08W-MAP-IDX = 1;

    /* ------ continue for all detail lines and data exists -------------*/
    while (PW08W00.PW08W-MAP-IDX <= 10
     && PW08M003.PK1CUOID[PW08W-MAP-IDX] != 0)

      PW08W01.PW08W-ACTION[PW08W-MAP-IDX] = PW08M003.PW08M-ACTION[PW08W-MAP-IDX];
      PW08W01.XPPCD[PW08W-MAP-IDX] = PW08M003.XPPCD[PW08W-MAP-IDX];

      PW08W00.PW08W-MAP-IDX = PW08W00.PW08W-MAP-IDX + 1;

    end

    TA5REC.TA5TSQIX = PW08W00.XXXTSPAG; /* which page to update*/
    PW08S-U-TEMP-STOR();

  end


end // end PW08-16003

// Process action field
Function PW08-161()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Process data*/
   /* ------------------------------------------------------------*/

  PW08W00.PW08W-MAP-IDX = 1; /* initialize index*/
  PW08W00.PW08W-HOLD-IDX = 1; /* initialize index for hold array*/
  PW08W00.PW08W-ORD-INQ-IDX = 1; /* initialize order inquiry index*/
  PW08W00.XXXTSPAG = 1; /* start at first page of t/s*/
  TA5REC.TA5TSQIX = PW08W00.XXXTSPAG; /* tell it which page to get*/

  PW08S-R-TEMP-STOR();

  while (PW08W00.XXXTSPAG <= PW08W00.TA5TSQIX) /* while there is still data*/

    if (PW08W01.PK1CUOID[PW08W-MAP-IDX] != 0)

      if (PW08W01.PW08W-ACTION[PW08W-MAP-IDX] == "S") /* select to pick*/
        PW08-162(); /* select to pick routine*/
      end

      if (PW08W01.PW08W-ACTION[PW08W-MAP-IDX] == "D") /* deselect order*/
        PW08-163(); /* deselect routine*/
      end

      if (PW08W01.PW08W-ACTION[PW08W-MAP-IDX] == "H") /* place order on hold*/
        PW08-164(); /* hold order routine*/
      end

      if (PW08W01.PW08W-ACTION[PW08W-MAP-IDX] == "I") /* inquire on order*/
        PW08-165(); /* order inquiry routine*/
      end

    end

    PW08W00.PW08W-MAP-IDX = PW08W00.PW08W-MAP-IDX + 1;
    if (PW08W00.PW08W-MAP-IDX > 10) /* if index > 10*/

      PW08S-U-TEMP-STOR();
      PW08W00.XXXTSPAG = PW08W00.XXXTSPAG + 1; /* increment t/s page number*/

      if (PW08W00.XXXTSPAG <= PW08W00.TA5TSQIX) /* still have more t/s pages*/

        VGVar.handleSysLibraryErrors = 0;
        sysLib.commit(); /* commit db updates for prior page data*/
        TA5REC.TA5TSQIX = PW08W00.XXXTSPAG; /* tell it which page to get*/
        PW08S-R-TEMP-STOR();
        PW08W00.PW08W-MAP-IDX = 1; /* reset index*/

      end
    end
  end


end // end PW08-161

// Select order for picking
Function PW08-162()
   /* ------------------------------------------------------------*/
   /* Select order for picking*/
   /* ------------------------------------------------------------*/

   /* ---- set status in pool header ------------------------------*/

  set PK4REC empty; /* Clear row storage area*/

  PK4REC.XWHCD = PW08W01.XWHCD;
  PK4REC.PK1CUOID = PW08W01.PK1CUOID[PW08W-MAP-IDX];
  PK4REC.PK1NORID = PW08W01.PK1NORID[PW08W-MAP-IDX];

  PW08S-SELECT-POOLH();

  if (PW08W00.PW08W-RUN-MODE == " ") /* if run mode is picking*/
    PK4REC.PK4SLIND = "S";
  else /* if run mode is pick planning*/
    PK4REC.PK4SLIND = "P";
  end

  PK4REC.XPPCD = PW08W01.XPPCD[PW08W-MAP-IDX];
  PK4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PK4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW08S-UPDATE-POOLH();

  PW08W01.PK4SLIND[PW08W-MAP-IDX] = "Y";
  PW08W01.PW08W-ACTION[PW08W-MAP-IDX] = "*";

   /* ------------------------------------------------------------*/
   /* See if row already exists in Dpick.Vselor01*/
   /* ------------------------------------------------------------*/

  set PKHREC empty;
  PKHREC.XWHCD = PW08W01.XWHCD;
  PKHREC.PK1CUOID = PW08W01.PK1CUOID[PW08W-MAP-IDX];
  PKHREC.PK1NORID = PW08W01.PK1NORID[PW08W-MAP-IDX];
  PKHREC.PKURUNMD = PW08W00.PW08W-RUN-MODE;

  PW08S-SELECT-SELOR();

  if (SQLCA.VAGen_SQLCODE == 0) /* row already exists*/

    if (PW08W00.XXXMSGNO == 0) /* if no other warning msgs*/
      PW08W00.XXXMSGNO = 44; /* warning msg*/
      PW08W00.XXXMODID = "162"; /* module id*/
      exit stack;
    end

    return;

  end

   /* ------------------------------------------------------------*/
   /* Now, insert row into Dpick.Vselor01*/
   /* ------------------------------------------------------------*/

  set PKHREC empty; /* clear record*/
  PKHREC.XWHCD = PW08W01.XWHCD;
  PKHREC.XDVCD = PK4REC.XDVCD;
  PKHREC.XBCCD = PK4REC.XBCCD;
  PKHREC.PK1CUOID = PW08W01.PK1CUOID[PW08W-MAP-IDX];
  PKHREC.PK1NORID = PW08W01.PK1NORID[PW08W-MAP-IDX];
  PW08W00.PW08W-HOLD-MM = PW08W01.PW08W-DNSB-MM[PW08W-MAP-IDX];
  PW08W00.PW08W-HOLD-DD = PW08W01.PW08W-DNSB-DD[PW08W-MAP-IDX];
  PW08W00.PW08W-HOLD-YY = PW08W01.PW08W-DNSB-YY[PW08W-MAP-IDX];

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE PW08W00.PW08W-CURR-CC TO PW08W00.PW08W-HOLD-CC;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
  if (PW08W00.PW08W-HOLD-MM > 0)
    if (PW08W00.PW08W-HOLD-YY > 60)
      PW08W00.PW08W-HOLD-CC = 19;
    else
      PW08W00.PW08W-HOLD-CC = 20;
    end
  else
    PW08W00.PW08W-HOLD-CC = 0;
  end
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

  PKHREC.OP1DSBDT = PW08W00.PW08W-HOLD-DT;
  PKHREC.TF1CARCD = PK4REC.TF1CARCD;
  PKHREC.PK1PRTN = PK4REC.PK1PRTN;
  PKHREC.XPPCD = PW08W01.XPPCD[PW08W-MAP-IDX];
  PKHREC.PKURUNMD = PW08W00.PW08W-RUN-MODE;
  PKHREC.PKHPVSFC = PW08W01.PK4ORDFC[PW08W-MAP-IDX];
  PKHREC.PKHPVSRP = PW08W01.PK4ORDRP[PW08W-MAP-IDX];

  if (PK4REC.OP1SPHDF == "Y")
    PKHREC.PK-SEL-TYP-CD = "14";
  else
    PKHREC.PK-SEL-TYP-CD = "15";
  end

  PKHREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PKHREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  PKHREC.ZZZCHGCT = 0;

  PW08S-INSERT-SELOR();


end // end PW08-162

// De-select order
Function PW08-163()
   /* ------------------------------------------------------------*/
   /* De-select order*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* Clear row storage area*/

  PK4REC.XWHCD = PW08W01.XWHCD;
  PK4REC.PK1CUOID = PW08W01.PK1CUOID[PW08W-MAP-IDX];
  PK4REC.PK1NORID = PW08W01.PK1NORID[PW08W-MAP-IDX];

  PW08S-SELECT-POOLH();

  PK4REC.PK4SLIND = " ";
  PW08W01.PK4SLIND[PW08W-MAP-IDX] = "N";
  PW08W01.PW08W-ACTION[PW08W-MAP-IDX] = "*";
  PK4REC.XPPCD = "30";

  PK4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PK4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW08S-UPDATE-POOLH();

   /* ------------------------------------------------------------*/
   /* Now, delete row from Dpick.Vselor01*/
   /* ------------------------------------------------------------*/

  set PKHREC empty; /* clear record*/
  PKHREC.XWHCD = PW08W01.XWHCD;
  PKHREC.PK1CUOID = PW08W01.PK1CUOID[PW08W-MAP-IDX];
  PKHREC.PK1NORID = PW08W01.PK1NORID[PW08W-MAP-IDX];

  if (PKWREC.PKWSELSW == "PP") /* if pick planning mode*/
    PKHREC.PKURUNMD = "P"; /* set run mode accordingly*/
  end

  PW08S-DELETE-SELOR();


end // end PW08-163

// Put order on hold
Function PW08-164()
   /* ------------------------------------------------------------*/
   /* To put order on hold move fields to working storage*/
   /* ------------------------------------------------------------*/

  if (PW08W00.PW08W-HOLD-IDX == 1) /* first line*/
    set PW08W02 empty; /* clear record*/
    PW08W02.XWHCD = PW08W01.XWHCD;
    PW08W02.XWHABRV = PW08W01.XWHABRV;
  end

  PW08W01.PW08W-ACTION[PW08W-MAP-IDX] = "*";
  PW08W01.PK4ORHLD[PW08W-MAP-IDX] = "Y";
  PW08W02.PK1CUOID[PW08W-HOLD-IDX] = PW08W01.PK1CUOID[PW08W-MAP-IDX];
  PW08W02.PK1NORID[PW08W-HOLD-IDX] = PW08W01.PK1NORID[PW08W-MAP-IDX];
  PW08W02.TF1CARCD[PW08W-HOLD-IDX] = PW08W01.TF1CARCD[PW08W-MAP-IDX];

  PW08W00.PW08W-HOLD-IDX = PW08W00.PW08W-HOLD-IDX + 1; /* increment index*/



end // end PW08-164

// Process order for inquiry
Function PW08-165()
   /* ------------------------------------------------------------*/
   /* Order was requested for inquiry - add to pkyrec array*/
   /* ------------------------------------------------------------*/

  if (PW08W00.PW08W-ORD-INQ-IDX > 65)
    PW08W00.XXXMSGNO = 346;
    return;
  end

  PWJREC.PWJORACT[PW08W-ORD-INQ-IDX] = "I"; /* flag for inquiry*/
  PWJREC.PK1CUOID[PW08W-ORD-INQ-IDX] = PW08W01.PK1CUOID[PW08W-MAP-IDX];
  PWJREC.PK1NORID[PW08W-ORD-INQ-IDX] = PW08W01.PK1NORID[PW08W-MAP-IDX];
  PWJREC.PWJARMAX = PW08W00.PW08W-ORD-INQ-IDX; /* nbr occurances*/

  PW08W00.PW08W-ORD-INQ-IDX = PW08W00.PW08W-ORD-INQ-IDX + 1;


end // end PW08-165

// Transfer to PW0I
Function PW08-166()
   /* ------------------------------------------------------------*/
   /* Orders are in PWJREC for inquiry, xfer to PW0I.*/
   /* ------------------------------------------------------------*/

  PW08S-P-TEMP-STOR();

  COMMAREA.CATOAP = "PW0I"; /* set target application*/
  PKWREC.PKWUSERB = PWJREC.PKWUSERB; /* store array for pw0i*/
  XSPKS01(); /* Exit to another application*/

  set PW08M001.CATOAP cursor, bold; /* Highlight*/
  set PW08M003.CATOAP cursor, bold; /* Highlight*/

  exit stack; /* Exit to display map*/


end // end PW08-166

// Main process for display 2 map
Function PW08-200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW08-210(); /* Obtain the data to display*/

  PW08-220(); /* Format and display the map*/

  PW08-230(); /* Check attention identifier*/

  PW08-240(); /* Reset fields to normal intensity*/

  PW08-250(); /* Verify the entered data*/

  PW08-260(); /* Process valid input request*/


end // end PW08-200

// Obtain data to display M002
Function PW08-210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PW08W00.PW08W-REQST-DATA-SW != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

  PW08W02.XX1 = 1; /* init array index*/
  PW08W02.XXXTSPAG = 1; /* page num*/
  PW08W02.TA5TSQIX = PW08W00.PW08W-HOLD-IDX / 15; /* highest page*/
  PW08W02.ZZAMT = PW08W02.TA5TSQIX * 15; /* lines*/
  if (PW08W02.ZZAMT != PW08W00.PW08W-HOLD-IDX) /* lines don't equal*/
    PW08W02.TA5TSQIX = PW08W02.TA5TSQIX + 1; /* add remaining page*/
  end
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW08W00.PW08W-REQST-DATA-SW = "N"; /* Request for data switch*/


end // end PW08-210

// Format and display map
Function PW08-220()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PW08W00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PW08W00.PW08W-REQST-DATA-SW == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PW08W00.PW08W-FRMT-MAP-SW == "Y") /* Map must be formatted*/

      if (PKWREC.PKWSELSW == "PK") /* picking*/
        PW08-22104(); /* Format the data on the map*/
      else
        PW08-22102(); /* Format the data on the map*/
      end
    end

  end

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW08-22004();
  else
    PW08-22002();
  end


end // end PW08-220

// Format and display map
Function PW08-22002()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw08-22004 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW08M002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PW08W00.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PW08W00.XXXMSGNO != 0) /* Message to display*/

      if (PW08W00.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PW08W00.XXXMSGNO);
      end /* Message number*/
    else
      PW08M002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PW08M002.XXXMODID = PW08W00.XXXMODID; /* Module identification*/

    set PW08M002 alarm; /* Indicate sound alarm*/

  end

  converse PW08M002 ;

   /* ----------------------------------------------------------------*/
   /* Clear the message fields and save FASTPATH information*/
   /* ----------------------------------------------------------------*/

  PW08W00.XXXMODID = " "; /* Module identification*/
  PW08W00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PW08-22002

// Format and display map
Function PW08-22004()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw08-22002 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW08M004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PW08W00.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PW08W00.XXXMSGNO != 0) /* Message to display*/

      if (PW08W00.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PW08W00.XXXMSGNO);
      end /* Message number*/
    else
      PW08M004.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PW08M004.XXXMODID = PW08W00.XXXMODID; /* Module identification*/

    set PW08M004 alarm; /* Indicate sound alarm*/

  end

  converse PW08M004 ;

   /* ----------------------------------------------------------------*/
   /* Clear the message fields and save FASTPATH information*/
   /* ----------------------------------------------------------------*/

  PW08W00.XXXMODID = " "; /* Module identification*/
  PW08W00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PW08-22004

// Format data to display
Function PW08-22102()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw08-22104 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW08M002 initial; /* M002 input/output area*/

  PW08W00.PW08W-FRMT-MAP-SW = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW08W02.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW08W02.XXXTSPAG != PW08W02.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW08W02.XXXTSPAG > PW08W02.TA5TSQIX) /* Desired greater highest*/
        PW08W02.XXXTSPAG = PW08W02.TA5TSQIX; /* Default to highest*/
      end

      PW08W02.XX1 = PW08W02.XXXTSPAG * 15; /* set end of page in array*/
      PW08W02.XX1 = PW08W02.XX1 - 14; /* set start of page in array*/

    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set PW08M002.XXXLITPG skip; /* "PAGE" literal*/
    PW08M002.XXXTSPAG = PW08W02.XXXTSPAG; /* Current page*/
    set PW08M002.XXXLITOF skip; /* "OF" literal*/
    PW08M002.TA5TSQIX = PW08W02.TA5TSQIX; /* Highest page*/

    PW08W02.PW08W-M002-IDX = 1; /* Initialize line index*/

    while (PW08W02.PW08W-M002-IDX <= 15 /* Until screen is full*/
     && PW08W02.PK1CUOID[XX1] > 0) /* or end of data*/

      if (PW08W02.PW08W-M002-IDX == 1) /* First select field*/
        set PW08M002.XHRCD[PW08W-M002-IDX] cursor, normal; /* Position cursor*/
      else
        set PW08M002.XHRCD[PW08W-M002-IDX] normal; /* Unprotect*/
      end

      PW08M002.XHRCD[PW08W-M002-IDX] = PW08W02.XHRCD[XX1];
      PW08M002.PK1CUOID[PW08W-M002-IDX] = PW08W02.PK1CUOID[XX1];
      PW08M002.PK1NORID[PW08W-M002-IDX] = PW08W02.PK1NORID[XX1];
      PW08M002.TF1CARCD[PW08W-M002-IDX] = PW08W02.TF1CARCD[XX1];

      PW08M002.PW08M-REL-MM[PW08W-M002-IDX] = PW08W02.PW08W-REL-MM[XX1];
      PW08M002.PW08M-REL-DD[PW08W-M002-IDX] = PW08W02.PW08W-REL-DD[XX1];
      PW08M002.PW08M-REL-YY[PW08W-M002-IDX] = PW08W02.PW08W-REL-YY[XX1];

      set PW08M002.PW08M-REL-MM[PW08W-M002-IDX] normal;
      set PW08M002.PW08M-REL-DD[PW08W-M002-IDX] normal;
      set PW08M002.PW08M-REL-YY[PW08W-M002-IDX] normal;
      set PW08M002.PW08M-DOT[PW08W-M002-IDX] skip; /* dot*/

      PW08W02.PW08W-M002-IDX = PW08W02.PW08W-M002-IDX + 1;
      PW08W02.XX1 = PW08W02.XX1 + 1; /* increment array index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PW08M002.XWHCD = PW08W02.XWHCD; /* Warehouse code*/
  PW08M002.XWHABRV = PW08W02.XWHABRV; /* Warehouse desc*/



end // end PW08-22102

// Format data to display
Function PW08-22104()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw08-22102 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW08M004 initial; /* M004 input/output area*/

  PW08W00.PW08W-FRMT-MAP-SW = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW08W02.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW08W02.XXXTSPAG != PW08W02.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW08W02.XXXTSPAG > PW08W02.TA5TSQIX) /* Desired greater highest*/
        PW08W02.XXXTSPAG = PW08W02.TA5TSQIX; /* Default to highest*/
      end

      PW08W02.XX1 = PW08W02.XXXTSPAG * 15; /* set end of page in array*/
      PW08W02.XX1 = PW08W02.XX1 - 14; /* set start of page in array*/

    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set PW08M004.XXXLITPG skip; /* "PAGE" literal*/
    PW08M004.XXXTSPAG = PW08W02.XXXTSPAG; /* Current page*/
    set PW08M004.XXXLITOF skip; /* "OF" literal*/
    PW08M004.TA5TSQIX = PW08W02.TA5TSQIX; /* Highest page*/

    PW08W02.PW08W-M002-IDX = 1; /* Initialize line index*/

    while (PW08W02.PW08W-M002-IDX <= 15 /* Until screen is full*/
     && PW08W02.PK1CUOID[XX1] > 0) /* or end of data*/

      if (PW08W02.PW08W-M002-IDX == 1) /* First select field*/
        set PW08M004.XHRCD[PW08W-M002-IDX] cursor, normal; /* Position cursor*/
      else
        set PW08M004.XHRCD[PW08W-M002-IDX] normal; /* Unprotect*/
      end

      PW08M004.XHRCD[PW08W-M002-IDX] = PW08W02.XHRCD[XX1];
      PW08M004.PK1CUOID[PW08W-M002-IDX] = PW08W02.PK1CUOID[XX1];
      PW08M004.PK1NORID[PW08W-M002-IDX] = PW08W02.PK1NORID[XX1];
      PW08M004.TF1CARCD[PW08W-M002-IDX] = PW08W02.TF1CARCD[XX1];

      PW08M004.PW08M-REL-MM[PW08W-M002-IDX] = PW08W02.PW08W-REL-MM[XX1];
      PW08M004.PW08M-REL-DD[PW08W-M002-IDX] = PW08W02.PW08W-REL-DD[XX1];
      PW08M004.PW08M-REL-YY[PW08W-M002-IDX] = PW08W02.PW08W-REL-YY[XX1];

      set PW08M004.PW08M-REL-MM[PW08W-M002-IDX] normal;
      set PW08M004.PW08M-REL-DD[PW08W-M002-IDX] normal;
      set PW08M004.PW08M-REL-YY[PW08W-M002-IDX] normal;
      set PW08M004.PW08M-DOT[PW08W-M002-IDX] skip; /* dot*/

      PW08W02.PW08W-M002-IDX = PW08W02.PW08W-M002-IDX + 1;
      PW08W02.XX1 = PW08W02.XX1 + 1; /* increment array index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PW08M004.XWHCD = PW08W02.XWHCD; /* Warehouse code*/
  PW08M004.XWHABRV = PW08W02.XWHABRV; /* Warehouse desc*/



end // end PW08-22104

// Check attention identifier
Function PW08-230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PW08W00.PW08W-REQST-DATA-SW == "Y") /* Request for data*/
      set PW08W02 empty; /* M002 display storage*/
    end

    PW08W00.PW08W-FRMT-MAP-SW = "Y"; /* Format the map switch*/
    PW08W00.PW08W-REQST-DATA-SW = "N"; /* Request for data switch*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3) /* or PF3 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/

      if (PKWREC.PKWSELSW == "PK") /* picking*/

        COMMAREA.CAITEM = "PW08M004"; /* Application find code*/
        PW08S-P-TEMP-STOR();
        XSPKS01(); /* Exit to another application*/
        PW08W00.PW08W-DISPLAY-SW = "1"; /* display map 1*/

      else

        COMMAREA.CAITEM = "PW08M002"; /* Application find code*/
        PW08S-P-TEMP-STOR();
        XSPKS01(); /* Exit to another application*/
        PW08W00.PW08W-DISPLAY-SW = "1"; /* display map 1*/

      end
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      PW08W00.PW08W-DISPLAY-SW = "1"; /* display map 1*/
      PW08W00.PW08W-FRMT-MAP-SW = "Y"; /* format the map*/

      if (PW08W00.PW08W-ORD-INQ-IDX > 1) /* inquiry to view*/
        PW08W00.PW08W-REQST-DATA-SW = "N";
      else
        PW08W00.PW08W-REQST-DATA-SW = "Y";
      end
    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    PW08W00.XXXMODID = "230"; /* Module identification*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PW08-230

// Reset highlighted fields
Function PW08-240()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  PW08W02.PW08W-M002-IDX = 1; /* Initialize line index*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/

    while (PW08W02.PW08W-M002-IDX <= 15 /* Until end of lines*/
     && PW08M004.PK1CUOID[PW08W-M002-IDX] > 0) /* or end of display*/

      set PW08M004.XHRCD[PW08W-M002-IDX] normal; /* Reset hold reason code*/
      set PW08M004.PW08M-REL-MM[PW08W-M002-IDX] normal; /* month*/
      set PW08M004.PW08M-REL-DD[PW08W-M002-IDX] normal; /* day*/
      set PW08M004.PW08M-REL-YY[PW08W-M002-IDX] normal; /* year*/

      PW08W02.PW08W-M002-IDX = PW08W02.PW08W-M002-IDX + 1;

    end

  else
    while (PW08W02.PW08W-M002-IDX <= 15 /* Until end of lines*/
     && PW08M002.PK1CUOID[PW08W-M002-IDX] > 0) /* or end of display*/

      set PW08M002.XHRCD[PW08W-M002-IDX] normal; /* Reset hold reason code*/
      set PW08M002.PW08M-REL-MM[PW08W-M002-IDX] normal; /* month*/
      set PW08M002.PW08M-REL-DD[PW08W-M002-IDX] normal; /* day*/
      set PW08M002.PW08M-REL-YY[PW08W-M002-IDX] normal; /* year*/

      PW08W02.PW08W-M002-IDX = PW08W02.PW08W-M002-IDX + 1;
    end
  end

   /* ------------------------------------------------------------*/
   /* pop-up window if requested.*/
   /* ------------------------------------------------------------*/

  if ("?" in PW08M002.XHRCD /* if a '?' in any of the hold codes*/
   || "?" in PW08M004.XHRCD) /* if a '?' in any of the hold codes*/

    if (converseVar.eventKey not enter) /* enter not pressed*/
      PW08W00.XXXMODID = "240"; /* Module id*/
      converseLib.validationFailed(320); /* Not valid without enter key*/
      exit stack; /* exit to display map*/
    else
      PW08W02.PW08W-M002-IDX = sysVar.arrayIndex; /* set index*/
      PW08-241(); /* display pop-up window*/
    end

  else

    return;
  end

  converseLib.clearScreen();
  
  converseLib.clearScreen();
  
  PW08W00.XXXMODID = "240"; /* Module id*/


end // end PW08-240

// Display pop-up window
Function PW08-241()
   /* ------------------------------------------------------------*/
   /* Display pop-up window for hold codes.*/
   /* ------------------------------------------------------------*/

  XPXX001(); /* pop-up window initialization*/

  XX0XW02.XX0XWHDR = "        HOLD REASON CODES"; /* set window title*/

  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/

    XPXHR01(); /* display the list*/

  end
  if (XX0XW02.XX0XWPIX == 0) /* no selection made*/

    PW08W02.XX1 = PW08W02.XXXTSPAG * 15; /* bottom of page*/
    PW08W02.XX1 = PW08W02.XX1 - 15; /* bottom of previous page*/
    PW08W02.XX1 = PW08W02.XX1 + PW08W02.PW08W-M002-IDX; /* same line*/

    if (PKWREC.PKWSELSW == "PK") /* picking*/
      PW08M004.XHRCD[PW08W-M002-IDX] = PW08W02.XHRCD[XX1];
                                   /* restore previous*/
    else
      PW08M002.XHRCD[PW08W-M002-IDX] = PW08W02.XHRCD[XX1];
                                   /* restore previous*/
    end

  else

    if (PKWREC.PKWSELSW == "PK") /* picking*/
      PW08M004.XHRCD[PW08W-M002-IDX] = XHRTBL.XHRCD[XX0XWPIX];
    else
      PW08M002.XHRCD[PW08W-M002-IDX] = XHRTBL.XHRCD[XX0XWPIX];
    end

  end


end // end PW08-241

// Verify data entered
Function PW08-250()
   /* ------------------------------------------------------------*/
   /* if page was formatted, verify data in the line.*/
   /* ------------------------------------------------------------*/

  if (PW08W02.TA5TSQIX > 0) /* Page was formatted*/

    PW08W02.PW08W-M002-IDX = 15; /* Initialize line index*/

    while (PW08W02.PW08W-M002-IDX > 0) /* Until end of lines*/

      if (PKWREC.PKWSELSW == "PK") /* picking*/
        if (PW08M004.PK1CUOID[PW08W-M002-IDX] != 0) /* there is data on line*/
          PW08-25204(); /* Verify data in the line*/
        end
      else
        if (PW08M002.PK1CUOID[PW08W-M002-IDX] != 0) /* there is data on line*/
          PW08-25202(); /* Verify data in the line*/
        end
      end
      PW08W02.PW08W-M002-IDX = PW08W02.PW08W-M002-IDX - 1;
    end
  end

   /* ------------------------------------------------------------*/
   /* if enter is pressed then all lines xhrcd's and release date*/
   /* must be entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* only if other edits pass*/
    if (converseVar.eventKey is enter) /* enter pressed*/
      PW08-253(); /* check that all data is entered*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PW08-251(); /* Verify scroll request*/

  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end PW08-250

// Verify scroll request
Function PW08-251()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PW08W02.XXXTSPAG < 2)       /* and no previous pages*/

    PW08W00.XXXMODID = "251"; /* Module identification*/
    converseLib.validationFailed(37); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PW08W02.XXXTSPAG >= PW08W02.TA5TSQIX) /* and no more pages*/

    PW08W00.XXXMODID = "251"; /* Module identification*/
    converseLib.validationFailed(38); /* No more pages to display*/

  end


end // end PW08-251

// Verify data in line
Function PW08-25202()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw08-25204 also*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* verify data entered in the line*/
   /* ------------------------------------------------------------*/

  if (PW08M002.PW08M-REL-MM[PW08W-M002-IDX] == 0
   && PW08M002.PW08M-REL-DD[PW08W-M002-IDX] == 0
   && PW08M002.PW08M-REL-YY[PW08W-M002-IDX] == 0)

    set PW08M002.PW08M-REL-YY[PW08W-M002-IDX] bold;
    set PW08M002.PW08M-REL-DD[PW08W-M002-IDX] bold;
    set PW08M002.PW08M-REL-MM[PW08W-M002-IDX] cursor, bold;
    PW08W00.XXXMODID = "252"; /* module id*/
    converseLib.validationFailed(341); /* required field*/

  else
    /* ------------------------------------------------------------*/
    /* Validate a keyed release date.*/
    /* Is date valid and fall on a work day?*/
    /* ------------------------------------------------------------*/

    set TA9REC empty; /* clear date routine record*/
    TA9REC.TA9BEGMM = PW08M002.PW08M-REL-MM[PW08W-M002-IDX];
    TA9REC.TA9BEGDD = PW08M002.PW08M-REL-DD[PW08W-M002-IDX];
    TA9REC.TA9BEGYY = PW08M002.PW08M-REL-YY[PW08W-M002-IDX];

    /* ----- format the century ----------------------------------*/
    if (PW08M002.PW08M-REL-YY[PW08W-M002-IDX] > 80)
      TA9REC.TA9BEGCC = 19;
    else
      TA9REC.TA9BEGCC = 20;
    end

    call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation routine*/

    if (sysVar.errorCode == "00000000") /* successful call*/

      if (TA9REC.TA9RTNFL != 0) /* bad return code*/

        if (TA9REC.TA9RTNFL == 6) /* invalid date*/
          converseLib.validationFailed(158); /* invalid date msg*/
          PW08W00.XXXMODID = "252"; /* Module id*/
          set PW08M002.PW08M-REL-MM[PW08W-M002-IDX] cursor, bold;
          set PW08M002.PW08M-REL-DD[PW08W-M002-IDX] bold;
          set PW08M002.PW08M-REL-YY[PW08W-M002-IDX] bold;
        else
          if (TA9REC.TA9RTNFL == 3) /* invalid work date*/
            converseLib.validationFailed(56); /* not work date msg*/
            PW08W00.XXXMODID = "252"; /* Module id*/
            set PW08M002.PW08M-REL-MM[PW08W-M002-IDX] cursor, bold;
            set PW08M002.PW08M-REL-DD[PW08W-M002-IDX] bold;
            set PW08M002.PW08M-REL-YY[PW08W-M002-IDX] bold;
          else
            converseLib.validationFailed(29); /* unexpected error*/
            PW08W00.XXXMODID = "252"; /* Module id*/
            set PW08M002.PW08M-REL-MM[PW08W-M002-IDX] cursor, bold;
            set PW08M002.PW08M-REL-DD[PW08W-M002-IDX] bold;
            set PW08M002.PW08M-REL-YY[PW08W-M002-IDX] bold;
          end
        end
      end

      if (TA9REC.TA9RTNFL == 0) /* no date routine error*/
        if (TA9REC.TA9BEGDT < PW08W00.PW08W-CURR-DT)

          converseLib.validationFailed(55); /* date in past msg*/
          PW08W00.XXXMODID = "252"; /* Module id*/
          set PW08M002.PW08M-REL-MM[PW08W-M002-IDX] cursor, bold;
          set PW08M002.PW08M-REL-DD[PW08W-M002-IDX] bold;
          set PW08M002.PW08M-REL-YY[PW08W-M002-IDX] bold;

        end
      end

    else
      /* ------ call unsuccessful --------------------------------*/
      converseLib.validationFailed(29); /* unexpected error*/
      PW08W00.XXXMODID = "252"; /* Module id*/
      set PW08M002.PW08M-REL-MM[PW08W-M002-IDX] cursor, bold; /* highlight*/
      set PW08M002.PW08M-REL-DD[PW08W-M002-IDX] bold; /* highlight*/
      set PW08M002.PW08M-REL-YY[PW08W-M002-IDX] bold; /* highlight*/
      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* validate hold release code.*/
   /* ------------------------------------------------------------*/

  if (PW08M002.XHRCD[PW08W-M002-IDX] == " ") /* data not entered*/

    set PW08M002.XHRCD[PW08W-M002-IDX] cursor, bold; /* highlight*/
    PW08W00.XXXMODID = "252"; /* module id*/
    converseLib.validationFailed(341); /* required field*/

  else

    if (PW08M002.XHRCD[PW08W-M002-IDX] in XHRTBL.XHRCD /* valid code*/
     && XHRTBL.XXXSTAT[sysVar.arrayIndex] == "A")      /* and active*/
       /* next sentence*/
    else

      converseLib.validationFailed(57);
      set PW08M002.XHRCD[PW08W-M002-IDX] cursor, bold; /* highlight*/
      PW08W00.XXXMODID = "252"; /* module id*/

    end
  end


end // end PW08-25202

// Verify data in line
Function PW08-25204()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw08-25202 also*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* verify data entered in the line*/
   /* ------------------------------------------------------------*/

  if (PW08M004.PW08M-REL-MM[PW08W-M002-IDX] == 0
   && PW08M004.PW08M-REL-DD[PW08W-M002-IDX] == 0
   && PW08M004.PW08M-REL-YY[PW08W-M002-IDX] == 0)

    set PW08M004.PW08M-REL-YY[PW08W-M002-IDX] bold;
    set PW08M004.PW08M-REL-DD[PW08W-M002-IDX] bold;
    set PW08M004.PW08M-REL-MM[PW08W-M002-IDX] cursor, bold;
    PW08W00.XXXMODID = "252"; /* module id*/
    converseLib.validationFailed(341); /* required field*/

  else
    /* ------------------------------------------------------------*/
    /* Validate a keyed release date.*/
    /* Is date valid and fall on a work day?*/
    /* ------------------------------------------------------------*/

    set TA9REC empty; /* clear date routine record*/
    TA9REC.TA9BEGMM = PW08M004.PW08M-REL-MM[PW08W-M002-IDX];
    TA9REC.TA9BEGDD = PW08M004.PW08M-REL-DD[PW08W-M002-IDX];
    TA9REC.TA9BEGYY = PW08M004.PW08M-REL-YY[PW08W-M002-IDX];

    /* ----- format the century ----------------------------------*/
    if (PW08M004.PW08M-REL-YY[PW08W-M002-IDX] > 80)
      TA9REC.TA9BEGCC = 19;
    else
      TA9REC.TA9BEGCC = 20;
    end

    call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation routine*/

    if (sysVar.errorCode == "00000000") /* successful call*/

      if (TA9REC.TA9RTNFL != 0) /* bad return code*/

        if (TA9REC.TA9RTNFL == 6) /* invalid date*/
          converseLib.validationFailed(158); /* invalid date msg*/
          PW08W00.XXXMODID = "252"; /* Module id*/
          set PW08M004.PW08M-REL-MM[PW08W-M002-IDX] cursor, bold;
          set PW08M004.PW08M-REL-DD[PW08W-M002-IDX] bold;
          set PW08M004.PW08M-REL-YY[PW08W-M002-IDX] bold;
        else
          if (TA9REC.TA9RTNFL == 3) /* invalid work date*/
            converseLib.validationFailed(56); /* not work date msg*/
            PW08W00.XXXMODID = "252"; /* Module id*/
            set PW08M004.PW08M-REL-MM[PW08W-M002-IDX] cursor, bold;
            set PW08M004.PW08M-REL-DD[PW08W-M002-IDX] bold;
            set PW08M004.PW08M-REL-YY[PW08W-M002-IDX] bold;
          else
            converseLib.validationFailed(29); /* unexpected error*/
            PW08W00.XXXMODID = "252"; /* Module id*/
            set PW08M004.PW08M-REL-MM[PW08W-M002-IDX] cursor, bold;
            set PW08M004.PW08M-REL-DD[PW08W-M002-IDX] bold;
            set PW08M004.PW08M-REL-YY[PW08W-M002-IDX] bold;
          end
        end
      end

      if (TA9REC.TA9RTNFL == 0) /* no date routine error*/
        if (TA9REC.TA9BEGDT < PW08W00.PW08W-CURR-DT)

          converseLib.validationFailed(55); /* date in past msg*/
          PW08W00.XXXMODID = "252"; /* Module id*/
          set PW08M004.PW08M-REL-MM[PW08W-M002-IDX] cursor, bold;
          set PW08M004.PW08M-REL-DD[PW08W-M002-IDX] bold;
          set PW08M004.PW08M-REL-YY[PW08W-M002-IDX] bold;

        end
      end

    else
      /* ------ call unsuccessful --------------------------------*/
      converseLib.validationFailed(29); /* unexpected error*/
      PW08W00.XXXMODID = "252"; /* Module id*/
      set PW08M004.PW08M-REL-MM[PW08W-M002-IDX] cursor, bold; /* highlight*/
      set PW08M004.PW08M-REL-DD[PW08W-M002-IDX] bold; /* highlight*/
      set PW08M004.PW08M-REL-YY[PW08W-M002-IDX] bold; /* highlight*/
      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* validate hold release code.*/
   /* ------------------------------------------------------------*/

  if (PW08M004.XHRCD[PW08W-M002-IDX] == " ") /* data not entered*/

    set PW08M004.XHRCD[PW08W-M002-IDX] cursor, bold; /* highlight*/
    PW08W00.XXXMODID = "252"; /* module id*/
    converseLib.validationFailed(341); /* required field*/

  else

    if (PW08M004.XHRCD[PW08W-M002-IDX] in XHRTBL.XHRCD /* valid code*/
     && XHRTBL.XXXSTAT[sysVar.arrayIndex] == "A")      /* and active*/
       /* next sentence*/
    else

      converseLib.validationFailed(57);
      set PW08M004.XHRCD[PW08W-M002-IDX] cursor, bold; /* highlight*/
      PW08W00.XXXMODID = "252"; /* module id*/

    end
  end


end // end PW08-25204

// Verify all data entered
Function PW08-253()
   /* ---------------------------------------------------------------*/
   /* Verify all data entered*/
   /* ---------------------------------------------------------------*/

  if (PW08W02.XXXTSPAG < PW08W02.TA5TSQIX) /* - current < high page*/
    PW08W02.XX1 = PW08W02.XXXTSPAG * 15; /* - bottom of current*/
    PW08W02.XX1 = PW08W02.XX1 + 1; /* - top of next page*/
    PW08W02.XXXTSPAG = PW08W02.XX1 / 15; /* - next page*/
  else
    return;
  end

  PW08W02.PW08W-M002-IDX = 15; /* init screen index*/

  while (PW08W02.PW08W-M002-IDX >= 1) /* until end*/

    if (PKWREC.PKWSELSW == "PK") /* picking*/

      set PW08M004.XHRCD[PW08W-M002-IDX] cursor, bold;
      set PW08M004.PW08M-REL-MM[PW08W-M002-IDX] bold;
      set PW08M004.PW08M-REL-DD[PW08W-M002-IDX] bold;
      set PW08M004.PW08M-REL-YY[PW08W-M002-IDX] bold;
      converseLib.validationFailed(341); /* required field*/
      PW08W00.XXXMODID = "253"; /* module id*/

      PW08W02.PW08W-M002-IDX = PW08W02.PW08W-M002-IDX - 1;
                                   /* decrement index*/
    else
      set PW08M002.XHRCD[PW08W-M002-IDX] cursor, bold;
      set PW08M002.PW08M-REL-MM[PW08W-M002-IDX] bold;
      set PW08M002.PW08M-REL-DD[PW08W-M002-IDX] bold;
      set PW08M002.PW08M-REL-YY[PW08W-M002-IDX] bold;
      converseLib.validationFailed(341); /* required field*/
      PW08W00.XXXMODID = "253"; /* module id*/

      PW08W02.PW08W-M002-IDX = PW08W02.PW08W-M002-IDX - 1;
                                   /* decrement index*/
    end
  end


end // end PW08-253

// Process data entered
Function PW08-260()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PW08W00.PW08W-FRMT-MAP-SW = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Save field in working storage.*/
   /* ------------------------------------------------------------*/

  PW08W02.PW08W-M002-IDX = 1; /* init screen index*/

  PW08W02.XX1 = PW08W02.XXXTSPAG * 15; /* bottom of page*/
  PW08W02.XX1 = PW08W02.XX1 - 14; /* top of page*/

  while (PW08W02.PW08W-M002-IDX <= 15) /* until end of lines*/

    if (PKWREC.PKWSELSW == "PK") /* picking*/
      PW08W02.XHRCD[XX1] = PW08M004.XHRCD[PW08W-M002-IDX];
      PW08W02.PW08W-REL-MM[XX1] = PW08M004.PW08M-REL-MM[PW08W-M002-IDX];
      PW08W02.PW08W-REL-DD[XX1] = PW08M004.PW08M-REL-DD[PW08W-M002-IDX];
      PW08W02.PW08W-REL-YY[XX1] = PW08M004.PW08M-REL-YY[PW08W-M002-IDX];
    else
      PW08W02.XHRCD[XX1] = PW08M002.XHRCD[PW08W-M002-IDX];
      PW08W02.PW08W-REL-MM[XX1] = PW08M002.PW08M-REL-MM[PW08W-M002-IDX];
      PW08W02.PW08W-REL-DD[XX1] = PW08M002.PW08M-REL-DD[PW08W-M002-IDX];
      PW08W02.PW08W-REL-YY[XX1] = PW08M002.PW08M-REL-YY[PW08W-M002-IDX];
    end

    PW08W02.PW08W-M002-IDX = PW08W02.PW08W-M002-IDX + 1; /* increment index*/
    PW08W02.XX1 = PW08W02.XX1 + 1; /* increment index*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    PW08W02.XXXTSPAG = PW08W02.XXXTSPAG - 1; /* Decrement page number*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    PW08W02.XXXTSPAG = PW08W02.XXXTSPAG + 1; /* Increment page number*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Insert or update record in DPICK.VORHLD01, then update*/
   /* DPICK.VPOOLH01 (setting hold flag to 'Y')*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get current date and time*/

  PW08W02.XX1 = 1; /* init index*/

  while (PW08W02.XX1 <= 150 /* until end of array*/
   && PW08W02.PK1CUOID[XX1] > 0) /* or end of data*/

    /* ----------------------------------------------------------*/
    /* Retrieve pool header, update order-hold-flag*/
    /* ----------------------------------------------------------*/

    set PK4REC empty; /* Clear row storage area*/

    PK4REC.XWHCD = PW08W02.XWHCD; /* Warehouse code*/
    PK4REC.PK1CUOID = PW08W02.PK1CUOID[XX1]; /* Customer order number*/
    PK4REC.PK1NORID = PW08W02.PK1NORID[XX1]; /* Nike order number*/

    PW08S-SELECT-POOLH();

    PK4REC.PK4ORHLD = "Y"; /* set order hold flag to yes*/

    PK4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    PK4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PW08S-UPDATE-POOLH();

    /* ----------------------------------------------------------*/
    /* If row present in Dpick.Vorhld01, update row.*/
    /* Otherwise, insert row.*/
    /* ----------------------------------------------------------*/

    PKBREC.XWHCD = PW08W02.XWHCD;
    PKBREC.PK1CUOID = PW08W02.PK1CUOID[XX1];
    PKBREC.PK1NORID = PW08W02.PK1NORID[XX1];
    PKBREC.XHRCD = PW08W02.XHRCD[XX1];

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE PW08W00.PW08W-CURR-CC TO PW08W02.PW08W-REL-CC(XX1);/* century*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
    if (PW08W02.PW08W-REL-MM[XX1] > 0)
      if (PW08W02.PW08W-REL-YY[XX1] > 60)
        PW08W02.PW08W-REL-CC[XX1] = 19;
      else
        PW08W02.PW08W-REL-CC[XX1] = 20;
      end
    else
      PW08W02.PW08W-REL-CC[XX1] = 0;
    end
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

    PW08S-SELECT-ORHLD();

    if (PW08W00.PW08W-RUN-MODE == " ") /* if run mode is picking*/
      PKBREC.PKBRELDT = PW08W02.PW08W-REL-DT[XX1]; /* release date*/
    else
      PKBREC.PKBPLRDT = PW08W02.PW08W-REL-DT[XX1];
    end

    PKBREC.XXXUSRID = COMMAREA.CAUSERID;
    PKBREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    PKBREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    if (SQLCA.VAGen_SQLCODE == 0) /* record found on order hold file*/

      PW08S-UPDATE-ORHLD();

    else

      PKBREC.PK1PRTN = PK4REC.PK1PRTN;
      PKBREC.ZZZCHGCT = 0;
      PW08S-INSERT-ORHLD();

    end

    PW08W02.XX1 = PW08W02.XX1 + 1; /* increment index*/

  end

   /* ------------------------------------------------------------*/
   /* commit updates, then go to map 1*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit();

  PW08W00.PW08W-DISPLAY-SW = "1"; /* display map 1*/
  PW08W00.XXXTSPAG = 1;

  if (PW08W00.PW08W-ORD-INQ-IDX > 1) /* if inquiries left*/
    PW08W00.PW08W-REQST-DATA-SW = "N";
  end


end // end PW08-260

// Add to temporary storage
Function PW08S-A-TEMP-STOR()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PW08W01.XXXTSLEN = PW08W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PW08W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    PW08W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0;

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW08W00.XXXMODID = "   "; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PW08S-A-TEMP-STOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW08W00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW08S-A-TEMP-STOR

// Verify carrier
Function PW08S-CHECK-CAHLD()
   /* ------------------------------------------------------------*/
   /* open cursor - DPICK.VCAHLD01*/
   /* ------------------------------------------------------------*/

  PW08S-OPEN-CAHLD();

  PW08W00.PW08W-CAHLD-CSR-SW = "N";

   /* ------------------------------------------------------------*/
   /* Fetch next row and check release date until no more rows.*/
   /* ------------------------------------------------------------*/

  while (PW08W00.PW08W-CAHLD-CSR-SW == "N" /* Until no more rows*/
   && PW08W00.PW08W-PROCESS-SW == "Y") /* okay to process*/

    PW08S-FETCH-CAHLD();

    if (PW08W00.PW08W-CAHLD-CSR-SW == "N") /* not end of cursor*/

      /* ---------------------------------------------------------*/
      /* Validate the appropriate carrier hold release date, based*/
      /* on whether user is in 'picking' or 'pick planning' mode.*/
      /* ---------------------------------------------------------*/

      /* ----- picking ---------------------------------------------*/
      if (PW08W00.PW08W-RUN-MODE == " ")

        if (PWFREC.PKBRELDT > PW08W00.PW08W-CURR-DT)
          PW08W00.PW08W-PROCESS-SW = "N"; /* do no process order*/

        else
          PW08W00.PW08W-CAHLD-CSR-SW = "Y";

        end

      else /* --- pick planning -------------------------------------*/
        if (PWFREC.PKBPLRDT > PW08W00.PW08W-CURR-DT)
          PW08W00.PW08W-PROCESS-SW = "N"; /* do not process order*/

        end
      end

    end
  end

   /* ------------------------------------------------------------*/
   /* Close cursor - DPICK.VCAHLD01*/
   /* ------------------------------------------------------------*/

  PW08S-CLOSE-CAHLD();


end // end PW08S-CHECK-CAHLD

// Verify DPICK.VCUHLD01
Function PW08S-CHECK-CUHLD()
   /* ------------------------------------------------------------*/
   /* Open cursor in  DPICK.VCUHLD01*/
   /* ------------------------------------------------------------*/

  PW08S-OPEN-CUHLD();

   /* ------------------------------------------------------------*/
   /* Fetch next row and check dates til end of cursor.*/
   /* ------------------------------------------------------------*/

  PW08W00.PW08W-CUHLD-CSR-SW = "N"; /* Clear cursor switch*/

  while (PW08W00.PW08W-CUHLD-CSR-SW == "N" /* Til end of cursor*/
   && PW08W00.PW08W-PROCESS-SW == "Y") /* or order is rejected*/

    PW08S-FETCH-CUHLD();

  end

   /* ------------------------------------------------------------*/
   /* Close cursor*/
   /* ------------------------------------------------------------*/

  PW08S-CLOSE-CUHLD();


end // end PW08S-CHECK-CUHLD

// Verify DPICK.VORHLD01
Function PW08S-CHECK-ORHLD()
   /* ------------------------------------------------------------*/
   /* Open cursor - DPICK.VORHLD01*/
   /* ------------------------------------------------------------*/

  PW08S-OPEN-ORHLD();

  PW08W00.PW08W-ORHLD-CSR-SW = "N"; /* clear cursor switch*/

   /* ------------------------------------------------------------*/
   /* Fetch next row and validate the release date*/
   /* ------------------------------------------------------------*/

  while (PW08W00.PW08W-ORHLD-CSR-SW == "N" /* Until end of cursor*/
   && PW08W00.PW08W-PROCESS-SW == "Y") /* process order*/

    PW08S-FETCH-ORHLD();

  end

   /* ------------------------------------------------------------*/
   /* Close cursor in DPICK.VORHLD01*/
   /* ------------------------------------------------------------*/

  PW08S-CLOSE-ORHLD();


end // end PW08S-CHECK-ORHLD

// Close DPICK.VCAHLD01
Function PW08S-CLOSE-CAHLD()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("C1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW08W00.XXXMODID = "   "; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW08S-CLOSE-CAHLD";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW08W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW08S-CLOSE-CAHLD

// Close DPICK.VCUHLD01
Function PW08S-CLOSE-CUHLD()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("C1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW08W00.XXXMODID = "   "; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW08S-CLOSE-CUHLD";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW08W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW08S-CLOSE-CUHLD

// Close DPICK.VORHLD01
Function PW08S-CLOSE-ORHLD()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("C1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW08W00.XXXMODID = "   "; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW08S-CLOSE-ORHLD";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW08W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW08S-CLOSE-ORHLD

// Delete DPICK.VSELOR01
Function PW08S-DELETE-SELOR()
   /* ------------------------------------------------------------*/
   /* Delete the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("D ", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PW08W00.XXXMSGNO = 32; /* update successful*/
      PW08W01.PW08W-ACTION[PW08W-MAP-IDX] = "*";
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      PW08W00.XXXMSGNO = 201; /* warning msg*/
      PW08W00.XXXMODID = "   "; /* Module id*/
      PW08W01.PW08W-ACTION[PW08W-MAP-IDX] = " ";
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW08W00.XXXMODID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW08S-DELETE-SELOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW08W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW08S-DELETE-SELOR

// Fetch DPICK.VCAHLD01
Function PW08S-FETCH-CAHLD()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("N1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW08W00.PW08W-CAHLD-CSR-SW = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW08W00.XXXMODID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW08S-FETCH-CAHLD";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW08W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW08S-FETCH-CAHLD

// Fetch DPICK.VCUHLD01
Function PW08S-FETCH-CUHLD()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to check rlrse dates-Dpick.Vcuhld01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("N1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (PW08W00.PW08W-RUN-MODE == " ") /* run mode is picking*/

        if (PK9REC.PK9RELDT > PW08W00.PW08W-CURR-DT)
          PW08W00.PW08W-PROCESS-SW = "N";
          return;

        else
          return;
        end

      else

        if (PK9REC.PK9PLRDT > PW08W00.PW08W-CURR-DT)
          PW08W00.PW08W-PROCESS-SW = "N";
          return;

        else
          return;
        end
      end

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      PW08W00.PW08W-CUHLD-CSR-SW = "Y"; /* end of cursor*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW08W00.XXXMODID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW08S-FETCH-CUHLD";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW08W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW08S-FETCH-CUHLD

// Fetch DPICK.VORHLD01
Function PW08S-FETCH-ORHLD()
   /* ------------------------------------------------------------*/
   /* Fetch the next row and check rlrse dates-Dpick.Vorhld01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("N1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (PW08W00.PW08W-RUN-MODE == " ") /* run mode is picking*/

        if (PKBREC.PKBRELDT > PW08W00.PW08W-CURR-DT)
          PW08W00.PW08W-PROCESS-SW = "N";
          return;
        else
          return;
        end

      else

        if (PKBREC.PKBPLRDT > PW08W00.PW08W-CURR-DT)
          PW08W00.PW08W-PROCESS-SW = "N";
          return;
        else
          return;
        end
      end

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      PW08W00.PW08W-ORHLD-CSR-SW = "Y"; /* end of cursor switch*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW08W00.XXXMODID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW08S-FETCH-ORHLD";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW08W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW08S-FETCH-ORHLD

// Insert DPICK.VORHLD01
Function PW08S-INSERT-ORHLD()
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("A ", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      PW08W00.XXXMSGNO = 32; /* update successful*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  PW08W00.PW08W-DISPLAY-SW = "1";
  PW08W00.PW08W-REQST-DATA-SW = "Y";

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW08W00.XXXMODID = "263"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW08W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW08S-INSERT-ORHLD

// Insert DPICK.VSELOR01
Function PW08S-INSERT-SELOR()
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("A ", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PW08W00.XXXMSGNO = 32; /* table update successful*/
      PW08W01.PW08W-ACTION[PW08W-MAP-IDX] = "*";
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == -803) /* Row already exists*/
      PW08W00.XXXMSGNO = 44; /* Warning msg*/
      PW08W00.XXXMODID = "   "; /* module id*/
      PW08W01.PW08W-ACTION[PW08W-MAP-IDX] = " ";
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW08W00.XXXMODID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW08S-INSERT-SELOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW08W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW08S-INSERT-SELOR

// Open DPICK.VCAHLD01
Function PW08S-OPEN-CAHLD()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table-Dpick.Vcahld01*/
   /* ------------------------------------------------------------*/

  set PWFREC empty; /* Row storage area*/

  PWFREC.XWHCD = PW08W01.XWHCD; /* Warehouse code*/
  PWFREC.TF1CARCD = PK4REC.TF1CARCD; /* Carrier code*/

  try
    call "IO3190" ("S1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* okay too*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW08W00.XXXMODID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW08S-OPEN-CAHLD";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW08W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW08S-OPEN-CAHLD

// Open DPICK.VCUHLD01
Function PW08S-OPEN-CUHLD()
   /* ------------------------------------------------------------*/
   /* Set cursor - Dpick.Vcuhld01*/
   /* ------------------------------------------------------------*/

  set PK9REC empty; /* Row storage area*/

  PK9REC.XWHCD = PW08W01.XWHCD; /* Warehouse code*/
  PK9REC.KUCCOID = PK4REC.KUCCOID;
  PK9REC.KUMSTRID = PK4REC.KUMSTRID;
  PK9REC.XNXCD = PK4REC.XNXCD;

  try
    call "IO1790" ("S1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* okay too*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW08W00.XXXMODID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW08S-OPEN-CUHLD";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW08W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW08S-OPEN-CUHLD

// Open DPICK.VORHLD01
Function PW08S-OPEN-ORHLD()
   /* ------------------------------------------------------------*/
   /* Set cursor - Dpick.Vorhld01*/
   /* ------------------------------------------------------------*/

  set PKBREC empty; /* Row storage area*/

  PKBREC.XWHCD = PW08W01.XWHCD; /* Warehouse code*/
  PKBREC.PK1CUOID = PK4REC.PK1CUOID; /* Order number*/
  PKBREC.PK1NORID = PK4REC.PK1NORID; /* Nike order number*/

  try
    call "IO1770" ("S1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* okay too*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW08W00.XXXMODID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW08S-OPEN-ORHLD";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW08W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW08S-OPEN-ORHLD

// Purge temporary storage
Function PW08S-P-TEMP-STOR()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PW08W01 empty; /* M001 display storage*/

  PW08W00.PW08W-MODIFY-SW = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PW08W00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PW08W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW08W00.XXXMODID = "   "; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PW08S-P-TEMP-STOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW08W00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW08S-P-TEMP-STOR

// Read temporary storage page
Function PW08S-R-TEMP-STOR()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PW08W01.XXXTSLEN = PW08W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PW08W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PW08W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW08W00.XXXMODID = "   "; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PW08S-R-TEMP-STOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW08W00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW08S-R-TEMP-STOR

// Select unique - DPICK.VORHLD01
Function PW08S-SELECT-ORHLD()
   /* ------------------------------------------------------------*/
   /* Select the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("S ", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  PW08W00.PW08W-DISPLAY-SW = "1";
  PW08W00.PW08W-REQST-DATA-SW = "Y";

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW08W00.XXXMODID = "261"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW08W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW08S-SELECT-ORHLD

// select unique - DPICK.VPOOLH01
Function PW08S-SELECT-POOLH()
   /* ------------------------------------------------------------*/
   /* Select unique for Dpick.Vpoolh01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1720" ("S ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, exit.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  PW08W00.PW08W-DISPLAY-SW = "1"; /* display map 1*/
  PW08W00.PW08W-REQST-DATA-SW = "Y"; /* request for data*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW08W00.XXXMODID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(29); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(28); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW08S-SELECT-POOLH";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW08W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback changes*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW08S-SELECT-POOLH

// Select DPICK.VSELOR01
Function PW08S-SELECT-SELOR()
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("S ", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found is good!!*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW08W00.XXXMODID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW08S-SELECT-SELOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW08W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW08S-SELECT-SELOR

// Update temporary storage page
Function PW08S-U-TEMP-STOR()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PW08W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW08W00.XXXMODID = "   "; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PW08S-U-TEMP-STOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW08W00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW08S-U-TEMP-STOR

// Update DPICK.VORHLD01
Function PW08S-UPDATE-ORHLD()
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("U ", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  PW08W00.PW08W-DISPLAY-SW = "1";
  PW08W00.PW08W-REQST-DATA-SW = "Y";

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW08W00.XXXMODID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW08S-UPDATE-ORHLD";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW08W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW08S-UPDATE-ORHLD

// Update DPICK.VPOOLH01
Function PW08S-UPDATE-POOLH()
   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1720" ("U ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      PW08W00.PW08W-REQST-DATA-SW = "Y";
      PW08W00.XXXMODID = "   "; /* Module identification*/
      PW08W00.XXXMSGNO = 29; /* Data was updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  PW08W00.PW08W-DISPLAY-SW = "1";
  PW08W00.PW08W-REQST-DATA-SW = "Y";

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW08W00.XXXMODID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(105); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW08S-UPDATE-POOLH";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW08W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW08S-UPDATE-POOLH

//*** RECORD=PW08W00 ****
// Working storage for PW0X
// ***********************
Record PW08W00 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 PW08W-REQST-DATA-SW PW08W-REQST-DATA-SW ; 
  10 PW08W-SCREEN-MDFY-SW PW08W-SCREEN-MDFY-SW ; 
  10 PW08W-STOR-UPDATE-SW PW08W-STOR-UPDATE-SW ; 
  10 PW08W-DISPLAY-SW PW08W-DISPLAY-SW ; 
  10 PW08W-FRMT-MAP-SW PW08W-FRMT-MAP-SW ; 
  10 PW08W-MODIFY-SW PW08W-MODIFY-SW ; 
  10 PW08W-PROCESS-SW PW08W-PROCESS-SW ; 
  10 PW08W-POOLH-CSR-SW PW08W-POOLH-CSR-SW ; 
  10 PW08W-ORHLD-CSR-SW PW08W-ORHLD-CSR-SW ; 
  10 PW08W-CAHLD-CSR-SW PW08W-CAHLD-CSR-SW ; 
  10 PW08W-CUHLD-CSR-SW PW08W-CUHLD-CSR-SW ; 
  10 PW08W-RUN-MODE PW08W-RUN-MODE ; 
  10 PW08W-MAP-IDX PW08W-MAP-IDX ; 
  10 PW08W-ORD-INQ-IDX PW08W-ORD-INQ-IDX ; 
  10 PW08W-HOLD-IDX PW08W-HOLD-IDX ; 
  10 * char(1) ; 
  10 PW08W-CURR-DT PW08W-CURR-DT ; 
    15 PW08W-CURR-CC PW08W-CURR-CC ; 
    15 PW08W-CURR-YYMMDD PW08W-CURR-YYMMDD ; 
      20 PW08W-CURR-YY PW08W-CURR-YY ; 
      20 * num(4) ; 
  10 PW08W-HOLD-DT PW08W-HOLD-DT ; 
    15 PW08W-HOLD-CC PW08W-HOLD-CC ; 
    15 PW08W-HOLD-YY PW08W-HOLD-YY ; 
    15 PW08W-HOLD-MM PW08W-HOLD-MM ; 
    15 PW08W-HOLD-DD PW08W-HOLD-DD ; 
  10 PW08W-FROM-DT PW08W-FROM-DT ; 
    15 PW08W-FROM-CC PW08W-FROM-CC ; 
    15 PW08W-FROM-YY PW08W-FROM-YY ; 
    15 PW08W-FROM-MM PW08W-FROM-MM ; 
    15 PW08W-FROM-DD PW08W-FROM-DD ; 
  10 PW08W-TO-DT PW08W-TO-DT ; 
    15 PW08W-TO-CC PW08W-TO-CC ; 
    15 PW08W-TO-YY PW08W-TO-YY ; 
    15 PW08W-TO-MM PW08W-TO-MM ; 
    15 PW08W-TO-DD PW08W-TO-DD ; 
  10 PW08W-FC-TOT PW08W-FC-TOT ; 
  10 PW08W-RP-TOT PW08W-RP-TOT ; 
  10 PW08W-TOTAL PW08W-TOTAL ; 
  10 XXXMODID XXXMODID ; 
  10 XXXMSGNO XXXMSGNO ; 
end // end PW08W00

//*** RECORD=PW08W01 ****
// Map working storage for PW0XM001
// ***********************
Record PW08W01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(499) ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 XBCCD XBCCD ; 
    10 PW08W-FROM-MM PW08W-FROM-MM ; 
    10 PW08W-FROM-DD PW08W-FROM-DD ; 
    10 PW08W-FROM-YY PW08W-FROM-YY ; 
    10 PW08W-TO-MM PW08W-TO-MM ; 
    10 PW08W-TO-DD PW08W-TO-DD ; 
    10 PW08W-TO-YY PW08W-TO-YY ; 
    10 PW08W-SELECTION PW08W-SELECTION ; 
    10 * char(47) [10] ; 
      15 PW08W-ACTION PW08W-ACTION ; 
      15 XPPCD XPPCD ; 
      15 PK1CUOID PK1CUOID ; 
      15 PK1NORID PK1NORID ; 
      15 PW08W-DNSB-MM PW08W-DNSB-MM ; 
      15 PW08W-DNSB-DD PW08W-DNSB-DD ; 
      15 PW08W-DNSB-YY PW08W-DNSB-YY ; 
      15 TF1CARCD TF1CARCD ; 
      15 PW08W-DNSA-MM PW08W-DNSA-MM ; 
      15 PW08W-DNSA-DD PW08W-DNSA-DD ; 
      15 PW08W-DNSA-YY PW08W-DNSA-YY ; 
      15 PW08W-ETA-MM PW08W-ETA-MM ; 
      15 PW08W-ETA-DD PW08W-ETA-DD ; 
      15 PW08W-ETA-YY PW08W-ETA-YY ; 
      15 PK4ORDFC PK4ORDFC ; 
      15 PK4ORDRP PK4ORDRP ; 
      15 PW08W-TOT-QTY PW08W-TOT-QTY ; 
      15 PK4SLIND PK4SLIND ; 
      15 PK4ORHLD PK4ORHLD ; 
end // end PW08W01

//*** RECORD=PW08W02 ****
// Map working storage for PW0XM001
// ***********************
Record PW08W02 type basicRecord
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 PW08W-M002-IDX PW08W-M002-IDX ; 
  10 XX1 XX1 ; 
  10 ZZAMT ZZAMT ; 
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 * char(20) [150] ; 
    15 XHRCD XHRCD ; 
    15 PW08W-REL-DT PW08W-REL-DT ; 
      20 PW08W-REL-CC PW08W-REL-CC ; 
      20 PW08W-REL-YY PW08W-REL-YY ; 
      20 PW08W-REL-MM PW08W-REL-MM ; 
      20 PW08W-REL-DD PW08W-REL-DD ; 
    15 PK1CUOID PK1CUOID ; 
    15 PK1NORID PK1NORID ; 
    15 TF1CARCD TF1CARCD ; 
end // end PW08W02

// action indicator
DataItem PW08W-ACTION char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cursor for dpick.vcahld01
DataItem PW08W-CAHLD-CSR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cursor for dpick.vcuhld01
DataItem PW08W-CUHLD-CSR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current date CC
DataItem PW08W-CURR-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current date for comparison
DataItem PW08W-CURR-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current date YY
DataItem PW08W-CURR-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// EZEDTE date YYMMDD
DataItem PW08W-CURR-YYMMDD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map display switch
DataItem PW08W-DISPLAY-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dnsa day
DataItem PW08W-DNSA-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dnsa month
DataItem PW08W-DNSA-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dnsa year
DataItem PW08W-DNSA-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dnsb day
DataItem PW08W-DNSB-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dsnb month
DataItem PW08W-DNSB-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dnsb year
DataItem PW08W-DNSB-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// eta day
DataItem PW08W-ETA-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// eta month
DataItem PW08W-ETA-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// eta year
DataItem PW08W-ETA-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// full case total
DataItem PW08W-FC-TOT num(5)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Format screen switch
DataItem PW08W-FRMT-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from date cc
DataItem PW08W-FROM-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from date dd
DataItem PW08W-FROM-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// from date
DataItem PW08W-FROM-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from date mm
DataItem PW08W-FROM-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// from date yy
DataItem PW08W-FROM-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// hold century
DataItem PW08W-HOLD-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold day
DataItem PW08W-HOLD-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold date
DataItem PW08W-HOLD-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold Work index
DataItem PW08W-HOLD-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold month
DataItem PW08W-HOLD-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold year
DataItem PW08W-HOLD-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Screen index
DataItem PW08W-M002-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Screen index
DataItem PW08W-MAP-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current screen modified
DataItem PW08W-MODIFY-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inquiry Work index
DataItem PW08W-ORD-INQ-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cursor for dpick.vorhld01
DataItem PW08W-ORHLD-CSR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cursor for dpick.vpoolh01
DataItem PW08W-POOLH-CSR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Okay to process switch
DataItem PW08W-PROCESS-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// release century
DataItem PW08W-REL-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// release day
DataItem PW08W-REL-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// release date
DataItem PW08W-REL-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// release month
DataItem PW08W-REL-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// release year
DataItem PW08W-REL-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PW08W-REQST-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// repack total
DataItem PW08W-RP-TOT num(5)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Run mode
DataItem PW08W-RUN-MODE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map screen fields modified
DataItem PW08W-SCREEN-MDFY-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk_sel_ind
DataItem PW08W-SELECTION char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage update switch
DataItem PW08W-STOR-UPDATE-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to date cc
DataItem PW08W-TO-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to date dd
DataItem PW08W-TO-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// to date
DataItem PW08W-TO-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to date mm
DataItem PW08W-TO-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// to date yy
DataItem PW08W-TO-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// order tot of fc and rp
DataItem PW08W-TOT-QTY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// grand total
DataItem PW08W-TOTAL num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

