package pw0n;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PW0N ****
// This program shows specific order numbers with their special
// handling and regular quantities. It displays a flag (sel
// flag) that lets the user know if this order has been
// previously selected for picking or not. This screen allows
// the user to select an order for picking, de-select an order,
// put an order on hold (there will be a pop-up window to
// display valid hold codes), or select for product inquiry.
// 
// The user can transfer out of this application by using one
// of the PF keys displayed at the bottom of the map, or by
// entering fast-path information (also at the bottom of the
// map).
// 
// CONTROL#    DATE      ID             COMMENTS
// --------  --------  ------  ------------------------------
// N/A       01/15/91  SBEAUC  New application.
// PK4020    05/08/91  KHEINA  Move part char to selected order
//                             table when adding table row.
//           09/25/91  SHENDE  Set pick plan release date and
//                             picking release date.
//           10/08/91  jcampb  table changes
//           10/16/91  SHENDE  1. Allow access to whse '07'
//                             2. Display division code in the
//                             header ...
//                             3. Check for B-Grade/Closeouts,
//                             don't process these orders.
//           03/05/92  SHENDE  Add xbc-brand-code(xbccd) for
//                             March table changes.
//           04/22/92  SHENDE  Re-init page field ta5tsqix
//           04/23/92  SCLEME  Omit processing in-store promo.
// TBLCHGS   06/25/92  MWALTO  Move div cd before calling iomod
//                             in pw0n120.
// ColeHan   07/20/92  SHENDE  Display brand code
//           09/14/92  SHENDE  Move count of inquiries to idx
//                             field instead of line #(pw0n650)
//           10/13/93  kande1  renaming procs for standard
//                             by rcream but not documented
// CANADA    10/25/95  pstroe  Pick-up new version of XPPK003
// APRLPRJ   01/04/96  pander  Do not display picking selected
//                             orders if in pick planning.
// BASICS    04/18/97  pander  Do not display basics orders.
// y2kfix    02/09/98  pharwo  y2k changes to pw0nmdyy,pw0nmhyy
//                             ,pw0nmryy and pw0n120, pw0n640.
// *********************
Program PW0N type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK4REC PK4REC; // record
  PK5REC PK5REC; // record
  PK9REC PK9REC; // record
  PKBREC PKBREC; // record
  PKHREC PKHREC; // record
  PKWREC PKWREC; // record
  PW0NW00 PW0NW00; // record
  PW0NW01 PW0NW01; // record
  PWFREC PWFREC; // record
  PWJREC PWJREC; // record
  PWKREC PWKREC; // record
  PWNREC PWNREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TA9REC TA9REC; // record
  TAEREC TAEREC; // record
  TF1REC TF1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use XHRTBL; // table
  use XHDTBL; // table
  use XDVTBL; // table
  use XOTTBL; // table
  use XBCTBL; // table
  use PW0NM.PW0NM001,  // forms
      PW0NM.PW0NM002, 
      PW0NM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* ------------------------------------------------------------*/

    set PW0NW00 empty; /* Initialize working storage*/
    set PW0NW01 empty; /* Initialize map working storage*/
    set PW0NM001 initial; /* Initialize map output area*/
    set PW0NM002 initial; /* Initialize map output area*/
    set PWJREC empty; /* Initialize pk array record*/
    set PWKREC empty; /* Initialize pk work record*/
    set PKBREC empty; /* Initialize io record*/
    set PKHREC empty; /* Initialize io record*/
    set PWFREC empty; /* Initialize io record*/
    set PWNREC empty; /* Initialize io record*/
    set PK4REC empty; /* Initialize io record*/
    set TAEREC empty; /* Initialize io record*/
    set TA5REC empty; /* Initialize io record*/
    set TA9REC empty; /* Initialize io record*/
    set SQLCA empty; /* Initialize io record*/

    PWKREC.PWKARRAY = PKWREC.PKWARRAY;
    PKWREC.PKWINDEX = 1; /* set index to 1*/

    if (PKWREC.PKWSELSW == "PP") /* if pick planning run mode*/

      PW0NW00.PW0NWRUN = "P"; /* set run mode to 'p'*/

    end

    PW0NW01.PW0NWSEL = "A"; /* set selection to 'a'*/
    PW0NM001.PW0NMSEL = "A"; /* set selection to 'a'*/
    PW0NM002.PW0NMSEL = "A"; /* set selection to 'a'*/

     /* move 'Do Not Ship Before' date from first occurrance to*/
     /* convert for map*/

    PW0NW00.PW0NWNDT = PWKREC.OP1DSBDT[PKWINDEX]; /* move to num date*/
    PW0NW01.PW0NWDMM = PW0NW00.PW0NWNMM;
    PW0NM001.PW0NMDMM = PW0NW00.PW0NWNMM;
    PW0NM002.PW0NMDMM = PW0NW00.PW0NWNMM;

    PW0NW01.PW0NWDDD = PW0NW00.PW0NWNDD;
    PW0NM001.PW0NMDDD = PW0NW00.PW0NWNDD;
    PW0NM002.PW0NMDDD = PW0NW00.PW0NWNDD;

    PW0NW01.PW0NWDYY = PW0NW00.PW0NWNYY;
    PW0NM001.PW0NMDYY = PW0NW00.PW0NWNYY;
    PW0NM002.PW0NMDYY = PW0NW00.PW0NWNYY;

    if (PWKREC.XWHCD != "  ")

      PW0NW01.XWHCD = PWKREC.XWHCD; /* store passed whse code*/
      PW0NM001.XWHCD = PWKREC.XWHCD; /* store passed whse code*/
      PW0NM002.XWHCD = PWKREC.XWHCD; /* store passed whse code*/
      PW0NW01.XWHABRV = PWKREC.XWHABRV; /* store passed whse abrv*/
      PW0NM001.XWHABRV = PWKREC.XWHABRV; /* store passed whse abrv*/
      PW0NM002.XWHABRV = PWKREC.XWHABRV; /* store passed whse abrv*/

    end

     /* -----------------------------------------------------------*/
      /* Convert current date to CCYYMMDD format for comparison*/
      /* purposes later in program.*/
     /* -----------------------------------------------------------*/

    PW0NW00.PW0NWEDT = VGVar.currentShortGregorianDate; /* get system date MM/DD/YY*/
    if (PW0NW00.PW0NWCYY > 80) /* if year gt 80*/

      PW0NW00.PW0NWCCC = 19; /* set century to 19*/

    else

      PW0NW00.PW0NWCCC = 20; /* otherwise, set century to 20*/

    end
    PW0NW00.PW0NWSWF = "Y"; /* format screen*/
    PW0NW00.PW0NWSWR = "Y"; /* request data*/

    goto PW0N000; /* Check for valid entry*/


    PW0N000: PW0N000();
    goto PW0N001; /* Converse main process*/
    PW0N001: PW0N001();
     /* -----------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* -----------------------------------------------------------*/

    goto PW0N001; /* Converse the main process*/


  end // end main
end // end PW0N

// Format and converse the map
Function PW0N-20001()
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  if (PW0NW00.TA5TSQIX == 0) /* if no pages were formatted*/
    set PW0NM001.PW0NMSEL cursor; /* set cursor on selection field*/
  end

  PW0NM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PW0NM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW0NM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)

    if (PW0NW00.XXXMSGNO != 0 /* Message to display*/
     || COMMAREA.CAMSG != " ") /* or message text*/

      if (PW0NW00.XXXMSGNO != 0) /* Message to display*/

        if (PW0NW00.XXXTSPAG == 1) /* First page*/
          if (PW0NW00.XXXMSGNO == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(PW0NW00.XXXMSGNO);
          end /* Message number*/
          PW0NM001.XXXMODID = PW0NW00.XXXMODID; /* Module id*/
          set PW0NM001 alarm; /* Indicate sound alarm*/
        end
      else
        PW0NM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
        PW0NM001.XXXMODID = PW0NW00.XXXMODID; /* Module id*/
        set PW0NM001 alarm; /* Indicate sound alarm*/
      end

    end
  else
    PW0NM001.XXXMODID = PW0NW00.XXXMODID; /* Module identification*/
    set PW0NM001 alarm; /* Indicate sound alarm*/
  end

  converse PW0NM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW0NW00.XXXMODID = " "; /* Module identification*/
  PW0NW00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PW0NM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW0NM001.CAITEM; /* Application data*/


end // end PW0N-20001

// Format and converse the map
Function PW0N-20002()

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  if (PW0NW00.TA5TSQIX == 0) /* if no pages were formatted*/
    set PW0NM002.PW0NMSEL cursor; /* set cursor on selection field*/
  end

  PW0NM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PW0NM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW0NM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)

    if (PW0NW00.XXXMSGNO != 0 /* Message to display*/
     || COMMAREA.CAMSG != " ") /* or message text*/

      if (PW0NW00.XXXMSGNO != 0) /* Message to display*/

        if (PW0NW00.XXXTSPAG == 1) /* First page*/
          if (PW0NW00.XXXMSGNO == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(PW0NW00.XXXMSGNO);
          end /* Message number*/
          PW0NM002.XXXMODID = PW0NW00.XXXMODID; /* Module id*/
          set PW0NM002 alarm; /* Indicate sound alarm*/
        end
      else
        PW0NM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
        PW0NM002.XXXMODID = PW0NW00.XXXMODID; /* Module id*/
        set PW0NM002 alarm; /* Indicate sound alarm*/
      end

    end
  else
    PW0NM001.XXXMODID = PW0NW00.XXXMODID; /* Module identification*/
    set PW0NM002 alarm; /* Indicate sound alarm*/
  end

  converse PW0NM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW0NW00.XXXMODID = " "; /* Module identification*/
  PW0NW00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PW0NM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW0NM002.CAITEM; /* Application data*/

end // end PW0N-20002

// Format the display data
Function PW0N-21001()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0n-21002 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW0NM001 initial; /* M001 input/output area*/

  PW0NW00.PW0NWSWF = "N"; /* Format the map switch*/

  set PW0NM001.PW0NMSEL cursor; /* Position cursor*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW0NW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW0NW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PW0NW00.PW0NWCUR == "Y") /* Current page was changed*/

        PW0NS01(); /* Update temporary storage page*/

        PW0NW00.PW0NWCUR = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW0NW00.XXXTSPAG > PW0NW00.TA5TSQIX) /* Desired greater highest*/
        PW0NW00.XXXTSPAG = PW0NW00.TA5TSQIX; /* Default to highest*/
      end

      PW0NS02(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set PW0NM001.XXXLITPG skip; /* "PAGE" literal*/
    PW0NM001.XXXTSPAG = PW0NW00.XXXTSPAG; /* Current page*/
    set PW0NM001.XXXLITOF skip; /* "OF" literal*/
    PW0NM001.XXXTSQIX = PW0NW00.TA5TSQIX; /* Highest page*/
    PW0NW00.PW0NWIXM = 1; /* Initialize line index*/

    while (PW0NW00.PW0NWIXM <= 10 /* Until screen is full*/
     && PW0NW01.PK1CUOID[PW0NWIXM] > 0) /* or end of data*/

      if (PW0NW00.PW0NWIXM == 1) /* First select field*/

        set PW0NM001.PW0NMACT[PW0NWIXM] cursor, normal; /* Position cursor*/
      else
        set PW0NM001.PW0NMACT[PW0NWIXM] normal; /* Unprotect*/

      end

      PW0NM001.PW0NMACT[PW0NWIXM] = PW0NW01.PW0NWACT[PW0NWIXM];
      PW0NM001.PK1CUOID[PW0NWIXM] = PW0NW01.PK1CUOID[PW0NWIXM];
      PW0NM001.PW0NMDOT[PW0NWIXM] = ".";
      PW0NM001.PK1NORID[PW0NWIXM] = PW0NW01.PK1NORID[PW0NWIXM];
      PW0NM001.TF2DSTCD[PW0NWIXM] = PW0NW01.TF2DSTCD[PW0NWIXM];
      PW0NM001.PW0NMSHQ[PW0NWIXM] = PW0NW01.PW0NWSHQ[PW0NWIXM];
      PW0NM001.PW0NMNHF[PW0NWIXM] = PW0NW01.PW0NWNHF[PW0NWIXM];
      PW0NM001.PW0NMNHR[PW0NWIXM] = PW0NW01.PW0NWNHR[PW0NWIXM];
      PW0NM001.PK4SLIND[PW0NWIXM] = PW0NW01.PK4SLIND[PW0NWIXM];
      PW0NM001.XHRCD[PW0NWIXM] = PW0NW01.XHRCD[PW0NWIXM];
      PW0NM001.PW0NMRMM[PW0NWIXM] = PW0NW01.PW0NWRMM[PW0NWIXM];
      PW0NM001.PW0NMRDD[PW0NWIXM] = PW0NW01.PW0NWRDD[PW0NWIXM];
      PW0NM001.PW0NMRYY[PW0NWIXM] = PW0NW01.PW0NWRYY[PW0NWIXM];
      set PW0NM001.PW0NMACT[PW0NWIXM] normal;
                                   /* open action field for input*/
      set PW0NM001.XHRCD[PW0NWIXM] normal;
                                   /* open hold code field for input*/
      set PW0NM001.PW0NMRMM[PW0NWIXM] normal; /* open month field for input*/
      set PW0NM001.PW0NMRDD[PW0NWIXM] normal; /* open day field for input*/
      set PW0NM001.PW0NMRYY[PW0NWIXM] normal; /* open year field for input*/

      PW0NW00.PW0NWIXM = PW0NW00.PW0NWIXM + 1; /* Increment line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PW0NM001.XDVCD = PKWREC.XDVCD[1]; /* Division code*/
  if (PKWREC.XDVCD[1] == "*")
    PW0NM001.XDVDESC = "ALL DIVISIONS";
  else
    if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
      PW0NM001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
    end
  end

  PW0NM001.XBCCD = PKWREC.XBCCD[1]; /* Brand code*/
  if (PKWREC.XBCCD[1] == "*")
    PW0NM001.XBCABRV = " ";
    if (PW0NW00.XXXMSGNO == 0) /* no other msg to display*/
      PW0NW00.XXXMSGNO = 421;
    end
  else
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      PW0NM001.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
    end
  end

  PW0NM001.XWHCD = PW0NW01.XWHCD; /* Warehouse code*/
  PW0NM001.XWHABRV = PW0NW01.XWHABRV; /* Warehouse abrv*/
  PW0NM001.XHDCD = PW0NW01.XHDCD; /* special handling code*/
  PW0NM001.PW0NMDMM = PW0NW01.PW0NWDMM; /* 'Do not ship before' date-mm*/
  PW0NM001.PW0NMDDD = PW0NW01.PW0NWDDD; /* 'Do not ship before' date-dd*/
  PW0NM001.PW0NMDYY = PW0NW01.PW0NWDYY; /* 'Do not ship before' date-yy*/
  PW0NM001.TF1CARCD = PW0NW00.TF1CARCD; /* carrier code*/
  PW0NM001.TF1ABRV = PW0NW00.TF1ABRV; /* carrier abrv*/
  PW0NM001.PW0NMHCD = PW0NW00.XHRCD; /* Hold reason code*/
  PW0NM001.PW0NMHMM = PW0NW00.PW0NWHMM; /* Hold rlse date-mm*/
  PW0NM001.PW0NMHDD = PW0NW00.PW0NWHDD; /* Hold rlse date-dd*/
  PW0NM001.PW0NMHYY = PW0NW00.PW0NWHYY; /* Hold rlse date-yy*/
  PW0NM001.PW0NMSEL = PW0NW01.PW0NWSEL; /* Selection criteria*/
  PW0NM001.CATOAP = " ";
  PW0NM001.CAITEM = " ";


end // end PW0N-21001

// Format the display data
Function PW0N-21002()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0n-21001 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW0NM002 initial; /* M002 input/output area*/

  PW0NW00.PW0NWSWF = "N"; /* Format the map switch*/

  set PW0NM002.PW0NMSEL cursor; /* Position cursor*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW0NW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW0NW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PW0NW00.PW0NWCUR == "Y") /* Current page was changed*/

        PW0NS01(); /* Update temporary storage page*/

        PW0NW00.PW0NWCUR = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW0NW00.XXXTSPAG > PW0NW00.TA5TSQIX) /* Desired greater highest*/
        PW0NW00.XXXTSPAG = PW0NW00.TA5TSQIX; /* Default to highest*/
      end

      PW0NS02(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set PW0NM002.XXXLITPG skip; /* "PAGE" literal*/
    PW0NM002.XXXTSPAG = PW0NW00.XXXTSPAG; /* Current page*/
    set PW0NM002.XXXLITOF skip; /* "OF" literal*/
    PW0NM002.XXXTSQIX = PW0NW00.TA5TSQIX; /* Highest page*/
    PW0NW00.PW0NWIXM = 1; /* Initialize line index*/

    while (PW0NW00.PW0NWIXM <= 10 /* Until screen is full*/
     && PW0NW01.PK1CUOID[PW0NWIXM] > 0) /* or end of data*/

      if (PW0NW00.PW0NWIXM == 1) /* First select field*/

        set PW0NM002.PW0NMACT[PW0NWIXM] cursor, normal; /* Position cursor*/
      else
        set PW0NM002.PW0NMACT[PW0NWIXM] normal; /* Unprotect*/

      end

      PW0NM002.PW0NMACT[PW0NWIXM] = PW0NW01.PW0NWACT[PW0NWIXM];
      PW0NM002.PK1CUOID[PW0NWIXM] = PW0NW01.PK1CUOID[PW0NWIXM];
      PW0NM002.PW0NMDOT[PW0NWIXM] = ".";
      PW0NM002.PK1NORID[PW0NWIXM] = PW0NW01.PK1NORID[PW0NWIXM];
      PW0NM002.TF2DSTCD[PW0NWIXM] = PW0NW01.TF2DSTCD[PW0NWIXM];
      PW0NM002.PW0NMSHQ[PW0NWIXM] = PW0NW01.PW0NWSHQ[PW0NWIXM];
      PW0NM002.PW0NMNHF[PW0NWIXM] = PW0NW01.PW0NWNHF[PW0NWIXM];
      PW0NM002.PW0NMNHR[PW0NWIXM] = PW0NW01.PW0NWNHR[PW0NWIXM];
      PW0NM002.PK4SLIND[PW0NWIXM] = PW0NW01.PK4SLIND[PW0NWIXM];
      PW0NM002.XHRCD[PW0NWIXM] = PW0NW01.XHRCD[PW0NWIXM];
      PW0NM002.PW0NMRMM[PW0NWIXM] = PW0NW01.PW0NWRMM[PW0NWIXM];
      PW0NM002.PW0NMRDD[PW0NWIXM] = PW0NW01.PW0NWRDD[PW0NWIXM];
      PW0NM002.PW0NMRYY[PW0NWIXM] = PW0NW01.PW0NWRYY[PW0NWIXM];
      set PW0NM002.PW0NMACT[PW0NWIXM] normal;
                                   /* open action field for input*/
      set PW0NM002.XHRCD[PW0NWIXM] normal;
                                   /* open hold code field for input*/
      set PW0NM002.PW0NMRMM[PW0NWIXM] normal; /* open month field for input*/
      set PW0NM002.PW0NMRDD[PW0NWIXM] normal; /* open day field for input*/
      set PW0NM002.PW0NMRYY[PW0NWIXM] normal; /* open year field for input*/

      PW0NW00.PW0NWIXM = PW0NW00.PW0NWIXM + 1; /* Increment line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PW0NM002.XDVCD = PKWREC.XDVCD[1]; /* Division code*/
  if (PKWREC.XDVCD[1] == "*")
    PW0NM002.XDVDESC = "ALL DIVISIONS";
  else
    if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
      PW0NM002.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
    end
  end

  PW0NM002.XBCCD = PKWREC.XBCCD[1]; /* Brand code*/
  if (PKWREC.XBCCD[1] == "*")
    PW0NM002.XBCABRV = " ";
    if (PW0NW00.XXXMSGNO == 0) /* no other msg to display*/
      PW0NW00.XXXMSGNO = 421;
    end
  else
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      PW0NM002.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
    end
  end

  PW0NM002.XWHCD = PW0NW01.XWHCD; /* Warehouse code*/
  PW0NM002.XWHABRV = PW0NW01.XWHABRV; /* Warehouse abrv*/
  PW0NM002.XHDCD = PW0NW01.XHDCD; /* special handling code*/
  PW0NM002.PW0NMDMM = PW0NW01.PW0NWDMM; /* 'Do not ship before' date-mm*/
  PW0NM002.PW0NMDDD = PW0NW01.PW0NWDDD; /* 'Do not ship before' date-dd*/
  PW0NM002.PW0NMDYY = PW0NW01.PW0NWDYY; /* 'Do not ship before' date-yy*/
  PW0NM002.TF1CARCD = PW0NW00.TF1CARCD; /* carrier code*/
  PW0NM002.TF1ABRV = PW0NW00.TF1ABRV; /* carrier abrv*/
  PW0NM002.PW0NMHCD = PW0NW00.XHRCD; /* Hold reason code*/
  PW0NM002.PW0NMHMM = PW0NW00.PW0NWHMM; /* Hold rlse date-mm*/
  PW0NM002.PW0NMHDD = PW0NW00.PW0NWHDD; /* Hold rlse date-dd*/
  PW0NM002.PW0NMHYY = PW0NW00.PW0NWHYY; /* Hold rlse date-yy*/
  PW0NM002.PW0NMSEL = PW0NW01.PW0NWSEL; /* Selection criteria*/
  PW0NM002.CATOAP = " ";
  PW0NM002.CAITEM = " ";


end // end PW0N-21002

// Verify data that was entered
Function PW0N-50001()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0n-50002 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PW0NM001.CAITEM > " ") /* Application data was entered*/

    PW0NW00.XXXMODID = "500"; /* Module identification*/
    set PW0NM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, if page was formatted, verify data in the line.*/
   /* ------------------------------------------------------------*/

  if (PW0NW00.TA5TSQIX > 0) /* Page was formatted*/

    PW0NW00.PW0NWIXM = 10; /* Initialize line index*/

    while (PW0NW00.PW0NWIXM > 0) /* Until end of lines*/

      if (PW0NM001.PK1CUOID[PW0NWIXM] != 0) /* there is data on line*/
        if (PW0NM001.PW0NMACT[PW0NWIXM] != PW0NW01.PW0NWACT[PW0NWIXM]
         || PW0NM001.XHRCD[PW0NWIXM] != PW0NW01.XHRCD[PW0NWIXM]
         || PW0NM001.PW0NMRMM[PW0NWIXM] != PW0NW01.PW0NWRMM[PW0NWIXM]
         || PW0NM001.PW0NMRDD[PW0NWIXM] != PW0NW01.PW0NWRDD[PW0NWIXM]
         || PW0NM001.PW0NMRYY[PW0NWIXM] != PW0NW01.PW0NWRYY[PW0NWIXM])

          PW0N-52001(); /* Verify data in the line*/

        end
      end

      PW0NW00.PW0NWIXM = PW0NW00.PW0NWIXM - 1; /* Decrement line number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PW0N510(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the Carrier hold code and hold/release date*/
   /* ------------------------------------------------------------*/

  if (PW0NM001.PW0NMHCD != PW0NW00.XHRCD    /* Hold reason code changed*/
   || PW0NM001.PW0NMHMM != PW0NW00.PW0NWHMM /* hold/release month chgd*/
   || PW0NM001.PW0NMHDD != PW0NW00.PW0NWHDD /* hold/release day chgd*/
   || PW0NM001.PW0NMHYY != PW0NW00.PW0NWHYY) /* hold/release year chgd*/

    if (PW0NM001.PW0NMHCD == "  " /* hold reason code removed*/
     && PW0NM001.PW0NMHMM == 0    /* hold reason month zeroed*/
     && PW0NM001.PW0NMHDD == 0    /* hold reason day zeroed*/
     && PW0NM001.PW0NMHYY == 0)   /* hold reason year zeroed*/

       /* next sentence*/

    else

      PW0NW00.PW0NWSWU = "Y"; /* data updated*/
      PW0NW00.PW0NWCUR = "Y"; /* data updated*/
      PW0N-50201(); /* validate release date*/

      if (PW0NM001.PW0NMHCD in XHRTBL.XHRCD /* if valid reason code*/
       && XHRTBL.XXXSTAT == "A")            /* and active*/
         /* next sentence*/
      else

        converseLib.validationFailed(57);
        set PW0NM001.PW0NMHCD cursor, bold; /* highlight*/

      end

    end

  end


   /* ------------------------------------------------------------*/
   /* Verify the Selection code.*/
   /* ------------------------------------------------------------*/

  if (PW0NM001.PW0NMSEL != PW0NW01.PW0NWSEL) /* Selection code changed*/

    if (PW0NM001.PW0NMSEL != "A" /* selection code must be 'a'*/
     && PW0NM001.PW0NMSEL != "N" /* or 'n'*/
     && PW0NM001.PW0NMSEL != "S") /* or 's'*/

      converseLib.validationFailed(322); /* only a,n or s allowed*/
      set PW0NM001.PW0NMSEL cursor, bold; /* highlight*/

    end

  end

  if (converseVar.eventKey is enter /* enter was pressed*/
   && PW0NW00.PW0NWSWA == "Y")      /* already hit end of data*/

    converseLib.validationFailed(339);
    exit stack;

  end
  if (converseVar.eventKey is enter         /* enter was pressed*/
   && PW0NM001.PW0NMSEL == PW0NW01.PW0NWSEL /* no chg to criteria*/
   && PW0NW00.PW0NWSWU == "N"               /* no data was changed*/
   && converseVar.validationMsgNum == 0)    /* no pending changes*/

    PKWREC.PKWINDEX = PKWREC.PKWINDEX + 1; /* set a work index to new value*/
    if (PKWREC.PKWINDEX > 25) /* already showing last in array*/

      if (PW0NW00.PW0NWAIX > 3) /* already showing last array*/

        converseLib.validationFailed(339); /* no more data to display*/
        PW0NW00.PW0NWSWA = "Y"; /* set end of array data*/

      else

        PW0NW00.PW0NWAIX = PW0NW00.PW0NWAIX + 1;
        PWKREC.PWKARRAY = PKWREC.PKWARRAY[PW0NWAIX]; /* GET NEXT 25*/
        PKWREC.PKWINDEX = 1; /* start at first entry*/
        if (PKWREC.PKWINDEX > PWKREC.PWKARMAX) /* no more entries in array*/

          converseLib.validationFailed(339); /* no more data*/
          PW0NW00.PW0NWSWA = "Y"; /* set end of array data*/

        end
      end
    else

      if (PKWREC.PKWINDEX > PWKREC.PWKARMAX) /* if exceeds entries in array*/

        converseLib.validationFailed(339); /* no more data*/
        PW0NW00.PW0NWSWA = "Y"; /* set end of array data*/

      end

    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end PW0N-50001

// Verify data that was entered
Function PW0N-50002()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0n-50001 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PW0NM002.CAITEM > " ") /* Application data was entered*/

    PW0NW00.XXXMODID = "500"; /* Module identification*/
    set PW0NM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, if page was formatted, verify data in the line.*/
   /* ------------------------------------------------------------*/

  if (PW0NW00.TA5TSQIX > 0) /* Page was formatted*/

    PW0NW00.PW0NWIXM = 10; /* Initialize line index*/

    while (PW0NW00.PW0NWIXM > 0) /* Until end of lines*/

      if (PW0NM002.PK1CUOID[PW0NWIXM] != 0) /* there is data on line*/
        if (PW0NM002.PW0NMACT[PW0NWIXM] != PW0NW01.PW0NWACT[PW0NWIXM]
         || PW0NM002.XHRCD[PW0NWIXM] != PW0NW01.XHRCD[PW0NWIXM]
         || PW0NM002.PW0NMRMM[PW0NWIXM] != PW0NW01.PW0NWRMM[PW0NWIXM]
         || PW0NM002.PW0NMRDD[PW0NWIXM] != PW0NW01.PW0NWRDD[PW0NWIXM]
         || PW0NM002.PW0NMRYY[PW0NWIXM] != PW0NW01.PW0NWRYY[PW0NWIXM])

          PW0N-52002(); /* Verify data in the line*/

        end
      end

      PW0NW00.PW0NWIXM = PW0NW00.PW0NWIXM - 1; /* Decrement line number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PW0N510(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the Carrier hold code and hold/release date*/
   /* ------------------------------------------------------------*/

  if (PW0NM002.PW0NMHCD != PW0NW00.XHRCD    /* Hold reason code changed*/
   || PW0NM002.PW0NMHMM != PW0NW00.PW0NWHMM /* hold/release month chgd*/
   || PW0NM002.PW0NMHDD != PW0NW00.PW0NWHDD /* hold/release day chgd*/
   || PW0NM002.PW0NMHYY != PW0NW00.PW0NWHYY) /* hold/release year chgd*/

    if (PW0NM002.PW0NMHCD == "  " /* hold reason code removed*/
     && PW0NM002.PW0NMHMM == 0    /* hold reason month zeroed*/
     && PW0NM002.PW0NMHDD == 0    /* hold reason day zeroed*/
     && PW0NM002.PW0NMHYY == 0)   /* hold reason year zeroed*/

       /* next sentence*/

    else

      PW0NW00.PW0NWSWU = "Y"; /* data updated*/
      PW0NW00.PW0NWCUR = "Y"; /* data updated*/
      PW0N-50202(); /* validate release date*/

      if (PW0NM002.PW0NMHCD in XHRTBL.XHRCD /* if valid reason code*/
       && XHRTBL.XXXSTAT == "A")            /* and active*/
         /* next sentence*/
      else

        converseLib.validationFailed(57);
        set PW0NM002.PW0NMHCD cursor, bold; /* highlight*/

      end

    end

  end


   /* ------------------------------------------------------------*/
   /* Verify the Selection code.*/
   /* ------------------------------------------------------------*/

  if (PW0NM002.PW0NMSEL != PW0NW01.PW0NWSEL) /* Selection code changed*/

    if (PW0NM002.PW0NMSEL != "A" /* selection code must be 'a'*/
     && PW0NM002.PW0NMSEL != "N" /* or 'n'*/
     && PW0NM002.PW0NMSEL != "S") /* or 's'*/

      converseLib.validationFailed(322); /* only a,n or s allowed*/
      set PW0NM002.PW0NMSEL cursor, bold; /* highlight*/

    end

  end

  if (converseVar.eventKey is enter /* enter was pressed*/
   && PW0NW00.PW0NWSWA == "Y")      /* already hit end of data*/

    converseLib.validationFailed(339);
    exit stack;

  end
  if (converseVar.eventKey is enter         /* enter was pressed*/
   && PW0NM002.PW0NMSEL == PW0NW01.PW0NWSEL /* no chg to criteria*/
   && PW0NW00.PW0NWSWU == "N"               /* no data was changed*/
   && converseVar.validationMsgNum == 0)    /* no pending changes*/

    PKWREC.PKWINDEX = PKWREC.PKWINDEX + 1; /* set a work index to new value*/
    if (PKWREC.PKWINDEX > 25) /* already showing last in array*/

      if (PW0NW00.PW0NWAIX > 3) /* already showing last array*/

        converseLib.validationFailed(339); /* no more data to display*/
        PW0NW00.PW0NWSWA = "Y"; /* set end of array data*/

      else

        PW0NW00.PW0NWAIX = PW0NW00.PW0NWAIX + 1;
        PWKREC.PWKARRAY = PKWREC.PKWARRAY[PW0NWAIX]; /* GET NEXT 25*/
        PKWREC.PKWINDEX = 1; /* start at first entry*/
        if (PKWREC.PKWINDEX > PWKREC.PWKARMAX) /* no more entries in array*/

          converseLib.validationFailed(339); /* no more data*/
          PW0NW00.PW0NWSWA = "Y"; /* set end of array data*/

        end
      end
    else

      if (PKWREC.PKWINDEX > PWKREC.PWKARMAX) /* if exceeds entries in array*/

        converseLib.validationFailed(339); /* no more data*/
        PW0NW00.PW0NWSWA = "Y"; /* set end of array data*/

      end

    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end PW0N-50002

// Validate carrier hold rlse dt
Function PW0N-50201()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0n-50202 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Validate a keyed release date.*/
   /* ------------------------------------------------------------*/

  if (PW0NM001.PW0NMHMM == 0 /* if release month is zero*/
   && PW0NM001.PW0NMHDD == 0 /* and release day is zero*/
   && PW0NM001.PW0NMHYY == 0) /* and release year is zero*/

    converseLib.validationFailed(61); /* release date is required msg*/
    PW0NW00.XXXMODID = "502";
    set PW0NM001.PW0NMHMM cursor, bold; /* highlight*/
    set PW0NM001.PW0NMHDD bold; /* highlight*/
    set PW0NM001.PW0NMHYY bold; /* highlight*/
    return;

  end

   /* Is date valid and fall on a work day?*/

  set TA9REC empty; /* clear date routine record*/
  TA9REC.TA9BEGMM = PW0NM001.PW0NMHMM;
  TA9REC.TA9BEGDD = PW0NM001.PW0NMHDD;
  TA9REC.TA9BEGYY = PW0NM001.PW0NMHYY;
  if (PW0NM001.PW0NMHYY > 80)

    TA9REC.TA9BEGCC = 19; /* set century to 19*/

  else

    TA9REC.TA9BEGCC = 20; /* otherwise set century to 20*/

  end

  call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation routine*/

  if (sysVar.errorCode != "00000000") /* unsuccessful call*/

    converseLib.validationFailed(29); /* unexpected error*/
    PW0NW00.XXXMODID = "502"; /* Module id*/
    set PW0NM001.PW0NMHMM cursor, bold; /* highlight*/
    set PW0NM001.PW0NMHDD bold; /* highlight*/
    set PW0NM001.PW0NMHYY bold; /* highlight*/
    return;

  end

  if (TA9REC.TA9RTNFL != 0) /* bad return code*/

    if (TA9REC.TA9RTNFL == 6) /* invalid date*/

      converseLib.validationFailed(158); /* invalid date msg*/
      PW0NW00.XXXMODID = "502"; /* Module id*/
      set PW0NM001.PW0NMHMM cursor, bold; /* highlight*/
      set PW0NM001.PW0NMHDD bold; /* highlight*/
      set PW0NM001.PW0NMHYY bold; /* highlight*/

    else
      if (TA9REC.TA9RTNFL == 3) /* invalid work date*/

        converseLib.validationFailed(56); /* not work date msg*/
        PW0NW00.XXXMODID = "502"; /* Module id*/
        set PW0NM001.PW0NMHMM cursor, bold; /* highlight*/
        set PW0NM001.PW0NMHDD bold; /* highlight*/
        set PW0NM001.PW0NMHYY bold; /* highlight*/

      else

        converseLib.validationFailed(29); /* unexpected error*/
        PW0NW00.XXXMODID = "502"; /* Module id*/
        set PW0NM001.PW0NMHMM cursor, bold; /* highlight*/
        set PW0NM001.PW0NMHDD bold; /* highlight*/
        set PW0NM001.PW0NMHYY bold; /* highlight*/

      end
    end
  end

  if (TA9REC.TA9RTNFL == 0) /* no date routine error*/

    if (TA9REC.TA9BEGDT < PW0NW00.PW0NWCDT) /* release dt before today*/

      converseLib.validationFailed(55); /* date in past msg*/
      PW0NW00.XXXMODID = "502"; /* Module id*/
      set PW0NM001.PW0NMHMM cursor, bold; /* highlight*/
      set PW0NM001.PW0NMHDD bold; /* highlight*/
      set PW0NM001.PW0NMHYY bold; /* highlight*/

    end
  end


end // end PW0N-50201

// Validate carrier hold rlse dt
Function PW0N-50202()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0n-50201 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Validate a keyed release date.*/
   /* ------------------------------------------------------------*/

  if (PW0NM002.PW0NMHMM == 0 /* if release month is zero*/
   && PW0NM002.PW0NMHDD == 0 /* and release day is zero*/
   && PW0NM002.PW0NMHYY == 0) /* and release year is zero*/

    converseLib.validationFailed(61); /* release date is required msg*/
    PW0NW00.XXXMODID = "502";
    set PW0NM002.PW0NMHMM cursor, bold; /* highlight*/
    set PW0NM002.PW0NMHDD bold; /* highlight*/
    set PW0NM002.PW0NMHYY bold; /* highlight*/
    return;

  end

   /* Is date valid and fall on a work day?*/

  set TA9REC empty; /* clear date routine record*/
  TA9REC.TA9BEGMM = PW0NM002.PW0NMHMM;
  TA9REC.TA9BEGDD = PW0NM002.PW0NMHDD;
  TA9REC.TA9BEGYY = PW0NM002.PW0NMHYY;
  if (PW0NM002.PW0NMHYY > 80)

    TA9REC.TA9BEGCC = 19; /* set century to 19*/

  else

    TA9REC.TA9BEGCC = 20; /* otherwise set century to 20*/

  end

  call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation routine*/

  if (sysVar.errorCode != "00000000") /* unsuccessful call*/

    converseLib.validationFailed(29); /* unexpected error*/
    PW0NW00.XXXMODID = "502"; /* Module id*/
    set PW0NM002.PW0NMHMM cursor, bold; /* highlight*/
    set PW0NM002.PW0NMHDD bold; /* highlight*/
    set PW0NM002.PW0NMHYY bold; /* highlight*/
    return;

  end

  if (TA9REC.TA9RTNFL != 0) /* bad return code*/

    if (TA9REC.TA9RTNFL == 6) /* invalid date*/

      converseLib.validationFailed(158); /* invalid date msg*/
      PW0NW00.XXXMODID = "502"; /* Module id*/
      set PW0NM002.PW0NMHMM cursor, bold; /* highlight*/
      set PW0NM002.PW0NMHDD bold; /* highlight*/
      set PW0NM002.PW0NMHYY bold; /* highlight*/

    else
      if (TA9REC.TA9RTNFL == 3) /* invalid work date*/

        converseLib.validationFailed(56); /* not work date msg*/
        PW0NW00.XXXMODID = "502"; /* Module id*/
        set PW0NM002.PW0NMHMM cursor, bold; /* highlight*/
        set PW0NM002.PW0NMHDD bold; /* highlight*/
        set PW0NM002.PW0NMHYY bold; /* highlight*/

      else

        converseLib.validationFailed(29); /* unexpected error*/
        PW0NW00.XXXMODID = "502"; /* Module id*/
        set PW0NM002.PW0NMHMM cursor, bold; /* highlight*/
        set PW0NM002.PW0NMHDD bold; /* highlight*/
        set PW0NM002.PW0NMHYY bold; /* highlight*/

      end
    end
  end

  if (TA9REC.TA9RTNFL == 0) /* no date routine error*/

    if (TA9REC.TA9BEGDT < PW0NW00.PW0NWCDT) /* release dt before today*/

      converseLib.validationFailed(55); /* date in past msg*/
      PW0NW00.XXXMODID = "502"; /* Module id*/
      set PW0NM002.PW0NMHMM cursor, bold; /* highlight*/
      set PW0NM002.PW0NMHDD bold; /* highlight*/
      set PW0NM002.PW0NMHYY bold; /* highlight*/

    end
  end


end // end PW0N-50202

// Verify data in the line
Function PW0N-52001()
   /* ------------------------------------------------------------*/
    /* Note: Apply changes to pw0n-52002 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If action was entered and is not a "s", "d", "i", "h", " ",*/
    /* error*/
   /* ------------------------------------------------------------*/

  if (PW0NM001.PW0NMACT[PW0NWIXM] != PW0NW01.PW0NWACT[PW0NWIXM]
   && PW0NM001.PW0NMACT[PW0NWIXM] != "S" /* and is not a "s"*/
   && PW0NM001.PW0NMACT[PW0NWIXM] != "D" /* and is not a "d"*/
   && PW0NM001.PW0NMACT[PW0NWIXM] != "I" /* and is not a "i"*/
   && PW0NM001.PW0NMACT[PW0NWIXM] != "H" /* and is not a "h"*/
   && PW0NM001.PW0NMACT[PW0NWIXM] != " ") /* and is not a " "*/

    PW0NW00.XXXMODID = "520"; /* Module identification*/
    set PW0NM001.PW0NMACT[PW0NWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(35); /* Only valid codes may be entered*/
    return; /* done with this line*/

  end

   /* ------------------------------------------------------------*/
   /* If changes were entered for an order that was already put*/
   /* on hold, error...*/
   /* ------------------------------------------------------------*/

  if (PW0NW01.PW0NWSWH[PW0NWIXM] == "Y") /* order already on hold*/

    converseLib.validationFailed(169);
    set PW0NM001.PK1CUOID[PW0NWIXM] bold;
    set PW0NM001.PK1NORID[PW0NWIXM] bold;
    PW0NM001.PW0NMACT[PW0NWIXM] = PW0NW01.PW0NWACT[PW0NWIXM];
    PW0NM001.XHRCD[PW0NWIXM] = PW0NW01.XHRCD[PW0NWIXM];
    PW0NM001.PW0NMRMM[PW0NWIXM] = PW0NW01.PW0NWRMM[PW0NWIXM];
    PW0NM001.PW0NMRDD[PW0NWIXM] = PW0NW01.PW0NWRDD[PW0NWIXM];
    PW0NM001.PW0NMRYY[PW0NWIXM] = PW0NW01.PW0NWRYY[PW0NWIXM];
    return;

  end

   /* ------------------------------------------------------------*/
   /* Now that action is valid, check corresponding data.*/
   /* ------------------------------------------------------------*/

  if (PW0NM001.PW0NMACT[PW0NWIXM] == "S"
   || PW0NM001.PW0NMACT[PW0NWIXM] == "D"
   || PW0NM001.PW0NMACT[PW0NWIXM] == "I"
   || PW0NM001.PW0NMACT[PW0NWIXM] == "*"
   || PW0NM001.PW0NMACT[PW0NWIXM] == "V"
   || PW0NM001.PW0NMACT[PW0NWIXM] == " ")

    if (PW0NM001.XHRCD[PW0NWIXM] != "  ") /* hold code must be blank*/

      PW0NW00.XXXMODID = "520"; /* Module id*/
      converseLib.validationFailed(331); /* error msg*/
      set PW0NM001.XHRCD[PW0NWIXM] cursor, bold; /* highlight*/

    end
    if (PW0NM001.PW0NMRMM[PW0NWIXM] != 0 /* release month not blank*/
     || PW0NM001.PW0NMRDD[PW0NWIXM] != 0 /* release day not blank*/
     || PW0NM001.PW0NMRYY[PW0NWIXM] != 0) /* release year not blank*/

      PW0NW00.XXXMODID = "520"; /* Module id*/
      converseLib.validationFailed(331); /* error msg*/
      set PW0NM001.PW0NMRMM[PW0NWIXM] cursor, bold; /* highlight*/
      set PW0NM001.PW0NMRDD[PW0NWIXM] bold; /* highlight*/
      set PW0NM001.PW0NMRYY[PW0NWIXM] bold; /* highlight*/

    end

  else

    if (PW0NM001.PW0NMACT[PW0NWIXM] == "H")

      PW0N-52201(); /* validate release date*/
      if (PW0NM001.XHRCD[PW0NWIXM] == "  ") /* hold code blank*/

        converseLib.validationFailed(60); /* reason code is required field*/
        PW0NW00.XXXMODID = "520"; /* Module id*/
        set PW0NM001.XHRCD[PW0NWIXM] cursor, bold; /* highlight*/

      else
        if (PW0NM001.XHRCD[PW0NWIXM] in XHRTBL.XHRCD /* valid reason code*/
         && XHRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/
           /* next sentence*/
        else

          converseLib.validationFailed(57); /* invalid msg*/
          PW0NW00.XXXMODID = "520"; /* Module id*/
          set PW0NM001.XHRCD[PW0NWIXM] cursor, bold;

        end

      end

    end
  end
  if (converseVar.validationMsgNum != 0 /* there are errors*/
   || PW0NM001.PW0NMACT[PW0NWIXM] == " ") /* or 'un' selecting*/

    return;

  end
  PW0NW00.PW0NWSWU = "Y"; /* data has been updated*/
  PW0NW00.PW0NWCUR = "Y"; /* screen has been updated*/


end // end PW0N-52001

// Verify data in the line
Function PW0N-52002()
   /* ------------------------------------------------------------*/
    /* Note: Apply changes to pw0n-52001 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If action was entered and is not a "s", "d", "i", "h", " ",*/
    /* error*/
   /* ------------------------------------------------------------*/

  if (PW0NM002.PW0NMACT[PW0NWIXM] != PW0NW01.PW0NWACT[PW0NWIXM]
   && PW0NM002.PW0NMACT[PW0NWIXM] != "S" /* and is not a "s"*/
   && PW0NM002.PW0NMACT[PW0NWIXM] != "D" /* and is not a "d"*/
   && PW0NM002.PW0NMACT[PW0NWIXM] != "I" /* and is not a "i"*/
   && PW0NM002.PW0NMACT[PW0NWIXM] != "H" /* and is not a "h"*/
   && PW0NM002.PW0NMACT[PW0NWIXM] != " ") /* and is not a " "*/

    PW0NW00.XXXMODID = "520"; /* Module identification*/
    set PW0NM002.PW0NMACT[PW0NWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(35); /* Only valid codes may be entered*/
    return; /* done with this line*/

  end

   /* ------------------------------------------------------------*/
   /* If changes were entered for an order that was already put*/
   /* on hold, error...*/
   /* ------------------------------------------------------------*/

  if (PW0NW01.PW0NWSWH[PW0NWIXM] == "Y") /* order already on hold*/

    converseLib.validationFailed(169);
    set PW0NM002.PK1CUOID[PW0NWIXM] bold;
    set PW0NM002.PK1NORID[PW0NWIXM] bold;
    PW0NM002.PW0NMACT[PW0NWIXM] = PW0NW01.PW0NWACT[PW0NWIXM];
    PW0NM002.XHRCD[PW0NWIXM] = PW0NW01.XHRCD[PW0NWIXM];
    PW0NM002.PW0NMRMM[PW0NWIXM] = PW0NW01.PW0NWRMM[PW0NWIXM];
    PW0NM002.PW0NMRDD[PW0NWIXM] = PW0NW01.PW0NWRDD[PW0NWIXM];
    PW0NM002.PW0NMRYY[PW0NWIXM] = PW0NW01.PW0NWRYY[PW0NWIXM];
    return;

  end

   /* ------------------------------------------------------------*/
   /* Now that action is valid, check corresponding data.*/
   /* ------------------------------------------------------------*/

  if (PW0NM002.PW0NMACT[PW0NWIXM] == "S"
   || PW0NM002.PW0NMACT[PW0NWIXM] == "D"
   || PW0NM002.PW0NMACT[PW0NWIXM] == "I"
   || PW0NM002.PW0NMACT[PW0NWIXM] == "*"
   || PW0NM002.PW0NMACT[PW0NWIXM] == "V"
   || PW0NM002.PW0NMACT[PW0NWIXM] == " ")

    if (PW0NM002.XHRCD[PW0NWIXM] != "  ") /* hold code must be blank*/

      PW0NW00.XXXMODID = "520"; /* Module id*/
      converseLib.validationFailed(331); /* error msg*/
      set PW0NM002.XHRCD[PW0NWIXM] cursor, bold; /* highlight*/

    end
    if (PW0NM002.PW0NMRMM[PW0NWIXM] != 0 /* release month not blank*/
     || PW0NM002.PW0NMRDD[PW0NWIXM] != 0 /* release day not blank*/
     || PW0NM002.PW0NMRYY[PW0NWIXM] != 0) /* release year not blank*/

      PW0NW00.XXXMODID = "520"; /* Module id*/
      converseLib.validationFailed(331); /* error msg*/
      set PW0NM002.PW0NMRMM[PW0NWIXM] cursor, bold; /* highlight*/
      set PW0NM002.PW0NMRDD[PW0NWIXM] bold; /* highlight*/
      set PW0NM002.PW0NMRYY[PW0NWIXM] bold; /* highlight*/

    end

  else

    if (PW0NM002.PW0NMACT[PW0NWIXM] == "H")

      PW0N-52202(); /* validate release date*/
      if (PW0NM002.XHRCD[PW0NWIXM] == "  ") /* hold code blank*/

        converseLib.validationFailed(60); /* reason code is required field*/
        PW0NW00.XXXMODID = "520"; /* Module id*/
        set PW0NM002.XHRCD[PW0NWIXM] cursor, bold; /* highlight*/

      else
        if (PW0NM002.XHRCD[PW0NWIXM] in XHRTBL.XHRCD /* valid reason code*/
         && XHRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/
           /* next sentence*/
        else

          converseLib.validationFailed(57); /* invalid msg*/
          PW0NW00.XXXMODID = "520"; /* Module id*/
          set PW0NM002.XHRCD[PW0NWIXM] cursor, bold;

        end

      end

    end
  end
  if (converseVar.validationMsgNum != 0 /* there are errors*/
   || PW0NM002.PW0NMACT[PW0NWIXM] == " ") /* or 'un' selecting*/

    return;

  end
  PW0NW00.PW0NWSWU = "Y"; /* data has been updated*/
  PW0NW00.PW0NWCUR = "Y"; /* screen has been updated*/


end // end PW0N-52002

// Validate order hold release dt
Function PW0N-52201()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0n-52202 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Validate a keyed release date.*/
   /* ------------------------------------------------------------*/

  if (PW0NM001.PW0NMRMM[PW0NWIXM] == 0 /* if release month is zero*/
   && PW0NM001.PW0NMRDD[PW0NWIXM] == 0 /* and release day is zero*/
   && PW0NM001.PW0NMRYY[PW0NWIXM] == 0) /* and release year is zero*/

    converseLib.validationFailed(61); /* release date is required msg*/
    PW0NW00.XXXMODID = "522";
    set PW0NM001.PW0NMRMM[PW0NWIXM] cursor, bold; /* highlight*/
    set PW0NM001.PW0NMRDD[PW0NWIXM] bold; /* highlight*/
    set PW0NM001.PW0NMRYY[PW0NWIXM] bold; /* highlight*/
    return;

  end

   /* Is date valid and fall on a work day?*/

  set TA9REC empty; /* clear date routine record*/
  TA9REC.TA9BEGMM = PW0NM001.PW0NMRMM[PW0NWIXM];
  TA9REC.TA9BEGDD = PW0NM001.PW0NMRDD[PW0NWIXM];
  TA9REC.TA9BEGYY = PW0NM001.PW0NMRYY[PW0NWIXM];
  if (PW0NM001.PW0NMRYY[PW0NWIXM] > 80)

    TA9REC.TA9BEGCC = 19; /* set century to 19*/

  else

    TA9REC.TA9BEGCC = 20; /* otherwise set century to 20*/

  end

  call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation routine*/

  if (sysVar.errorCode != "00000000") /* unsuccessful call*/

    converseLib.validationFailed(29); /* unexpected error*/
    PW0NW00.XXXMODID = "522"; /* Module id*/
    set PW0NM001.PW0NMRMM[PW0NWIXM] cursor, bold; /* highlight*/
    set PW0NM001.PW0NMRDD[PW0NWIXM] bold; /* highlight*/
    set PW0NM001.PW0NMRYY[PW0NWIXM] bold; /* highlight*/
    return;

  end

  if (TA9REC.TA9RTNFL != 0) /* bad return code*/

    if (TA9REC.TA9RTNFL == 6) /* invalid date*/

      converseLib.validationFailed(158); /* invalid date msg*/
      PW0NW00.XXXMODID = "522"; /* Module id*/
      set PW0NM001.PW0NMRMM[PW0NWIXM] cursor, bold; /* highlight*/
      set PW0NM001.PW0NMRDD[PW0NWIXM] bold; /* highlight*/
      set PW0NM001.PW0NMRYY[PW0NWIXM] bold; /* highlight*/

    else
      if (TA9REC.TA9RTNFL == 3) /* invalid work date*/

        converseLib.validationFailed(56); /* not work date msg*/
        PW0NW00.XXXMODID = "522"; /* Module id*/
        set PW0NM001.PW0NMRMM[PW0NWIXM] cursor, bold; /* highlight*/
        set PW0NM001.PW0NMRDD[PW0NWIXM] bold; /* highlight*/
        set PW0NM001.PW0NMRYY[PW0NWIXM] bold; /* highlight*/

      else

        converseLib.validationFailed(29); /* unexpected error*/
        PW0NW00.XXXMODID = "522"; /* Module id*/
        set PW0NM001.PW0NMRMM[PW0NWIXM] cursor, bold; /* highlight*/
        set PW0NM001.PW0NMRDD[PW0NWIXM] bold; /* highlight*/
        set PW0NM001.PW0NMRYY[PW0NWIXM] bold; /* highlight*/

      end
    end
  end

  if (TA9REC.TA9RTNFL == 0) /* no date routine error*/

    if (TA9REC.TA9BEGDT < PW0NW00.PW0NWCDT) /* release dt before today*/

      converseLib.validationFailed(55); /* date in past msg*/
      PW0NW00.XXXMODID = "522"; /* Module id*/
      set PW0NM001.PW0NMRMM[PW0NWIXM] cursor, bold; /* highlight*/
      set PW0NM001.PW0NMRDD[PW0NWIXM] bold; /* highlight*/
      set PW0NM001.PW0NMRYY[PW0NWIXM] bold; /* highlight*/

    end
  end


end // end PW0N-52201

// Validate order hold release dt
Function PW0N-52202()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0n-52201 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Validate a keyed release date.*/
   /* ------------------------------------------------------------*/

  if (PW0NM002.PW0NMRMM[PW0NWIXM] == 0 /* if release month is zero*/
   && PW0NM002.PW0NMRDD[PW0NWIXM] == 0 /* and release day is zero*/
   && PW0NM002.PW0NMRYY[PW0NWIXM] == 0) /* and release year is zero*/

    converseLib.validationFailed(61); /* release date is required msg*/
    PW0NW00.XXXMODID = "522";
    set PW0NM002.PW0NMRMM[PW0NWIXM] cursor, bold; /* highlight*/
    set PW0NM002.PW0NMRDD[PW0NWIXM] bold; /* highlight*/
    set PW0NM002.PW0NMRYY[PW0NWIXM] bold; /* highlight*/
    return;

  end

   /* Is date valid and fall on a work day?*/

  set TA9REC empty; /* clear date routine record*/
  TA9REC.TA9BEGMM = PW0NM002.PW0NMRMM[PW0NWIXM];
  TA9REC.TA9BEGDD = PW0NM002.PW0NMRDD[PW0NWIXM];
  TA9REC.TA9BEGYY = PW0NM002.PW0NMRYY[PW0NWIXM];
  if (PW0NM002.PW0NMRYY[PW0NWIXM] > 80)

    TA9REC.TA9BEGCC = 19; /* set century to 19*/

  else

    TA9REC.TA9BEGCC = 20; /* otherwise set century to 20*/

  end

  call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation routine*/

  if (sysVar.errorCode != "00000000") /* unsuccessful call*/

    converseLib.validationFailed(29); /* unexpected error*/
    PW0NW00.XXXMODID = "522"; /* Module id*/
    set PW0NM002.PW0NMRMM[PW0NWIXM] cursor, bold; /* highlight*/
    set PW0NM002.PW0NMRDD[PW0NWIXM] bold; /* highlight*/
    set PW0NM002.PW0NMRYY[PW0NWIXM] bold; /* highlight*/
    return;

  end

  if (TA9REC.TA9RTNFL != 0) /* bad return code*/

    if (TA9REC.TA9RTNFL == 6) /* invalid date*/

      converseLib.validationFailed(158); /* invalid date msg*/
      PW0NW00.XXXMODID = "522"; /* Module id*/
      set PW0NM002.PW0NMRMM[PW0NWIXM] cursor, bold; /* highlight*/
      set PW0NM002.PW0NMRDD[PW0NWIXM] bold; /* highlight*/
      set PW0NM002.PW0NMRYY[PW0NWIXM] bold; /* highlight*/

    else
      if (TA9REC.TA9RTNFL == 3) /* invalid work date*/

        converseLib.validationFailed(56); /* not work date msg*/
        PW0NW00.XXXMODID = "522"; /* Module id*/
        set PW0NM002.PW0NMRMM[PW0NWIXM] cursor, bold; /* highlight*/
        set PW0NM002.PW0NMRDD[PW0NWIXM] bold; /* highlight*/
        set PW0NM002.PW0NMRYY[PW0NWIXM] bold; /* highlight*/

      else

        converseLib.validationFailed(29); /* unexpected error*/
        PW0NW00.XXXMODID = "522"; /* Module id*/
        set PW0NM002.PW0NMRMM[PW0NWIXM] cursor, bold; /* highlight*/
        set PW0NM002.PW0NMRDD[PW0NWIXM] bold; /* highlight*/
        set PW0NM002.PW0NMRYY[PW0NWIXM] bold; /* highlight*/

      end
    end
  end

  if (TA9REC.TA9RTNFL == 0) /* no date routine error*/

    if (TA9REC.TA9BEGDT < PW0NW00.PW0NWCDT) /* release dt before today*/

      converseLib.validationFailed(55); /* date in past msg*/
      PW0NW00.XXXMODID = "522"; /* Module id*/
      set PW0NM002.PW0NMRMM[PW0NWIXM] cursor, bold; /* highlight*/
      set PW0NM002.PW0NMRDD[PW0NWIXM] bold; /* highlight*/
      set PW0NM002.PW0NMRYY[PW0NWIXM] bold; /* highlight*/

    end
  end


end // end PW0N-52202

// Reject due to invalid entry
Function PW0N000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP != "PW0M" /* From allowed application*/
   && COMMAREA.CAFROMAP != "PW0O" 
   && COMMAREA.CAFROMAP != "PW0R" 
   && COMMAREA.CAFROMAP != "PW0N" 
   && COMMAREA.CAFROMAP != "GD00")

    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/

    COMMAREA.CATOAPP = COMMAREA.CAFROMAP;

    XSNOWAY(); /* Invalid transfer was attempted*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether whse code is valid...*/
   /* ------------------------------------------------------------*/

  XPPK003(); /* Validate whse code*/


end // end PW0N000

// Main process
Function PW0N001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW0N100(); /* Obtain the data to display*/

  PW0N200(); /* Format and display the map*/

  PW0N300(); /* Check attention identifier*/

  PW0N400(); /* Reset fields to normal intensity*/

  PW0N500(); /* Verify the entered data*/

  PW0N600(); /* Process valid input request*/


end // end PW0N001

// Obtain the data to display
Function PW0N100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PW0NW00.PW0NWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  PW0NW00.XXXTSLEN = 594; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (PW0NW00.XXXMSGNO == 0) /* No message to display*/
    PW0NW00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  PW0N110(); /* Purge any temporary storage*/

  PW0NW00.PW0NWSWV = " "; /* set valid carrier switch to no*/
  PW0NW00.PW0NWSWA = "N"; /* set valid carrier switch to no*/

  while (PW0NW00.PW0NWSWV != "Y" /* while invalid carrier (on hold)*/
   && PW0NW00.PW0NWSWA != "Y") /* and not at end of arrays*/

    set PWFREC empty; /* clear io record*/
    PWFREC.XWHCD = PWKREC.XWHCD; /* warehouse code*/
    PWFREC.TF1CARCD = PWKREC.TF1CARCD[PKWINDEX]; /* carr cd*/
    PWFREC.XHRCD = "*"; /* Wildcard hold reason code*/
    PW0N111(); /* select unique carrier hold table*/

    if (PW0NW00.PW0NWSWV == "N") /* not a valid carrier*/

      PKWREC.PKWINDEX = PKWREC.PKWINDEX + 1; /* increment counter*/
      if (PKWREC.PKWINDEX > 25) /* past array*/

        if (PW0NW00.PW0NWAIX >= 3) /* last array*/
          converseLib.validationFailed(339); /* no more data*/
          PW0NW00.PW0NWSWA = "Y"; /* end of array switch*/
        else
          PW0NW00.PW0NWAIX = PW0NW00.PW0NWAIX + 1; /* increment array index*/
          PWKREC.PWKARRAY = PKWREC.PKWARRAY[PW0NWAIX]; /* get next 25*/
          PKWREC.PKWINDEX = 1; /* start at first entry*/

          if (PKWREC.PKWINDEX > PWKREC.PWKARMAX) /* max entries in array*/
            converseLib.validationFailed(339); /* no more data*/
            PW0NW00.PW0NWSWA = "Y"; /* end of array switch*/
          end

        end
      else

        if (PKWREC.PKWINDEX > PWKREC.PWKARMAX) /* if exceeds entries*/
          converseLib.validationFailed(339); /* no more data*/
          PW0NW00.PW0NWSWA = "Y"; /* end of array switch*/
        end

      end

    end

  end

  if (PW0NW00.PW0NWSWV == "N" /* no more valid carriers*/
   || PW0NW00.PW0NWSWA == "Y") /* no more valid entries*/

    PW0NW00.XXXMODID = "100"; /* Module identification*/
    PW0NW00.XXXMSGNO = 31; /* No data was found to display*/
    return; /* leave process*/
  end

  PW0NW01.XWHCD = PWKREC.XWHCD; /* warehouse code*/
  PW0NW01.XWHABRV = PWKREC.XWHABRV; /* warehouse abrv*/
  PW0NW00.TF1CARCD = PWKREC.TF1CARCD[PKWINDEX]; /* carr cd*/
  PW0NW00.PW0NWNDT = PWKREC.OP1DSBDT[PKWINDEX]; /* convert dnsb date*/
  PW0NW01.PW0NWDMM = PW0NW00.PW0NWNMM; /* move dnsb month*/
  PW0NW01.PW0NWDDD = PW0NW00.PW0NWNDD; /* move dnsb day*/
  PW0NW01.PW0NWDYY = PW0NW00.PW0NWNYY; /* move dnsb year*/

  PW0NW01.XHDCD = PWKREC.XHDCD[PKWINDEX]; /* special handling code*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW0NW01.PW0NWSEL = PW0NM002.PW0NMSEL; /* Selection code*/
  else
    PW0NW01.PW0NWSEL = PW0NM001.PW0NMSEL; /* Selection code*/
  end


   /* ------------------------------------------------------------*/
   /* Select the information to display in the map heading.*/
   /* Get the carrier name field (abrv) - Dpick.Vcarr001*/
   /* ------------------------------------------------------------*/

  PW0N170(); /* Select unique carrier*/

  if (SQLCA.VAGen_SQLCODE == 100) /* if carrier not found*/
    PW0NW00.XXXMSGNO = 323; /* warning - not found*/
    PW0NW00.TF1ABRV = "* NOT FOUND";
  else
    PW0NW00.TF1ABRV = TF1REC.TF1ABRV;
  end


   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  PW0N120(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  PW0NW00.PW0NWIXM = 1; /* Display line index*/
  PW0NW00.PW0NWSWC = "N"; /* End of cursor switch*/

  while (PW0NW00.PW0NWSWC == "N") /* Until end of cursor*/

    PW0N121(); /* Fetch next row in the cursor*/

    /* ------------------------------------------------------------*/
    /* If not end of cursor, retrieve corresponding data from*/
    /* pool header and carrier hold tables.*/
    /* ------------------------------------------------------------*/

    if (PW0NW00.PW0NWSWC == "N") /* Not end of cursor*/
      PW0NW00.PW0NWSWP = "N"; /* clear process switch*/
      PW0N130(); /* select order header and detail*/

      /* ------------------------------------------------------------*/
      /* If order qualifies, save the data in display storage.*/
      /* ------------------------------------------------------------*/

      if (PW0NW00.PW0NWSWP == "Y") /* okay to process order*/
        PW0N140(); /* Save data in display storage*/

        /* ------------------------------------------------------------*/
        /* If the page is full, add the page to the storage queue.*/
        /* ------------------------------------------------------------*/

        if (PW0NW00.PW0NWIXM > 10) /* Page is full*/

          PW0N150(); /* Add page to temporary storage*/

          set PW0NW01 empty; /* clear display storage*/
          PW0NW00.PW0NWIXM = 1; /* Display line index*/

        end
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PW0NW00.PW0NWIXM > 1) /* Page was formatted*/
    PW0N150(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set - Dpick.Vphdit01*/
   /* ------------------------------------------------------------*/

  PW0N160(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (PW0NW00.TA5TSQIX == 0) /* No pages formatted*/

    PW0NW00.XXXMODID = "100"; /* Module identification*/
    PW0NW00.XXXMSGNO = 31; /* No data was found to display*/

    return; /* Return to previous process*/

  else

    PW0NW00.PW0NWSWF = "Y"; /* format screen*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW0NW00.PW0NWSWR = "N"; /* Request for data switch*/


end // end PW0N100

// Purge temporary storage
Function PW0N110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PW0NW01 empty; /* M001 display storage*/

  PW0NW00.PW0NWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PW0NW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PW0NW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0NW00.XXXMODID = "110"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0N110

// Select the requested table row
Function PW0N111()
   /* ------------------------------------------------------------*/
   /* Set cursor - Dpick.Vcahld01*/
   /* ------------------------------------------------------------*/

  PW0NS20(); /* set cursor carrier hold*/

  PW0NW00.PW0NWSC2 = " "; /* clear cursor switch*/
  PW0NW00.PW0NWSWV = " "; /* clear valid carrier switch*/

   /* ------------------------------------------------------------*/
   /* Fetch next row to validate dates-Dpick.Vcahld01*/
   /* ------------------------------------------------------------*/

  while (PW0NW00.PW0NWSC2 == " " /* until no more rows*/
   && PW0NW00.PW0NWSWV == " ") /* and invalid carrier*/

    PW0NS21(); /* fetch next*/

    if (PW0NW00.PW0NWSC2 == " ") /* if not end of cursor*/

      PW0N112(); /* validate release date*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Close cursor*/
   /* ------------------------------------------------------------*/

  PW0NS22(); /* Close cursor*/

  if (PW0NW00.PW0NWSWV == "N") /* If invalid carrier*/

    return;

  else

    PW0NW00.PW0NWSWV = "Y"; /* Valid carrier*/

  end


end // end PW0N111

// Validate carrier hold rlse dt
Function PW0N112()
   /* ------------------------------------------------------------*/
   /* Validate the appropriate carrier hold release date, based*/
   /* on whether user is in 'picking' or 'pick planning' mode.*/
   /* ------------------------------------------------------------*/

  if (PW0NW00.PW0NWRUN == " ") /* if run mode is picking*/

    if (PWFREC.PKBRELDT <= PW0NW00.PW0NWCDT) /* rlse date le current date*/

      PW0NW00.PW0NWSWV = "Y"; /* valid carrier (not on hold)*/

    else

      return;

    end

  else

    if (PWFREC.PKBPLRDT <= PW0NW00.PW0NWCDT) /* rlse date le current date*/

      PW0NW00.PW0NWSWV = "Y"; /* valid carrier (not on hold)*/

    end

  end


end // end PW0N112

// Open cursor-Dpick.vphdit01
Function PW0N120()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set PWNREC empty; /* Clear row storage area*/

  PWNREC.XWHCD = PW0NW01.XWHCD; /* Warehouse code*/
  PWNREC.XDVCD = PKWREC.XDVCD[1]; /* Division code*/
  PWNREC.XBCCD = PKWREC.XBCCD[1]; /* Brand code*/
  PW0NW00.PW0NWNMM = PW0NW01.PW0NWDMM; /* move month for conversion*/
  PW0NW00.PW0NWNDD = PW0NW01.PW0NWDDD; /* move day for conversion*/
  PW0NW00.PW0NWNYY = PW0NW01.PW0NWDYY; /* move year for conversion*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (PW0NW00.PW0NWNDT > 0)
    if (PW0NW00.PW0NWNYY > 60)
      PW0NW00.PW0NWNCC = 19;
    else
      PW0NW00.PW0NWNCC = 20;
    end
  else
    PW0NW00.PW0NWNCC = 0;
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
  PWNREC.OP1DSBDT = PW0NW00.PW0NWNDT; /* move converted dnsb date*/
  PWNREC.XHDCD = PWKREC.XHDCD[PKWINDEX]; /* move sp hdlg code*/
  PWNREC.TF1CARCD = PWKREC.TF1CARCD[PKWINDEX]; /* carrier code*/
  PWNREC.XGPCD = "*"; /* product code*/

  try
    call "IO5490" ("S1", SQLCA, PWNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0NW00.XXXMODID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPHDIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWNREC.PWNGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0N120

// Fetch next row in the cursor
Function PW0N121()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5490" ("N1", SQLCA, PWNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0NW00.PW0NWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0NW00.XXXMODID = "121"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPHDIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWNREC.PWNGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0N121

// Select set and open cursor
Function PW0N130()
   /* ------------------------------------------------------------*/
   /* Select unique for Dpick.Vpoolh01*/
   /* ------------------------------------------------------------*/

  PW0NW00.PW0NWSWP = " "; /* clear process flag*/

  PW0N131(); /* Select unique - pool header*/

  if (SQLCA.VAGen_SQLCODE == 100)
    PW0NW00.PW0NWSWP = "N"; /* dont process this order*/
    return;
  end

   /* ------ In-store promotion ----------------------------------*/
  if (PK4REC.XGPCD == "01"
   && PK4REC.XDVCD == "01")

    PW0NW00.PW0NWSWP = "N"; /* don't process order*/
    return;
  end

   /* ------ ColeHaan ---------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW0NM002.XBCCD == "*"
     && PK4REC.XBCCD == "08")

      PW0NW00.PW0NWSWP = "N"; /* don't process order*/
      return;
    end
  else
    if (PW0NM001.XBCCD == "*"
     && PK4REC.XBCCD == "08")

      PW0NW00.PW0NWSWP = "N"; /* don't process order*/
      return;
    end
  end

   /* ------ Stock transfer ---------------------------------------*/

  if (PK4REC.PK4STKTF == "Y")
    PW0NW00.PW0NWSWP = "N"; /* don't process order*/
    return;
  end

   /* ------- Basics order ----------------------------------------*/

  if (PK4REC.XOTCD == "FV")
    PW0NW00.PW0NWSWP = "N"; /* don't process order*/
    return;
  end

   /* ------ Determine b-grade and closeout -----------------------*/
  XPPK005();

  if (PKWREC.PKW-ORDER-TYP-IND == "B" /* B-Grade*/
   || PKWREC.PKW-ORDER-TYP-IND == "C") /* Closeout*/

    PW0NW00.PW0NWSWP = "N"; /* do not process*/
  end


  if (PW0NW00.PW0NWSWP == "N") /* if do not process*/
    return;
  end


  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW0NM002.PW0NMSEL == "A") /* selection criteria was 'a'll*/
      if (PW0NW00.PW0NWRUN == " ") /* picking run mode*/
        if (PK4REC.PK4SLIND != " " /* valid status for selection criteria*/
         && PK4REC.PK4SLIND != "S") /* ditto*/
          PW0NW00.PW0NWSWP = "N"; /* don't process order*/
          return; /* return to process next Vphdit01*/
        end
      else /* run mode is plan picking*/
        if (PK4REC.PK4SLIND != " " /* valid status for selection criteria*/
         && PK4REC.PK4SLIND != "P") /* valid status too*/
          PW0NW00.PW0NWSWP = "N"; /* don't process order*/
          return; /* return to process next Vphdit01*/
        end
      end
    end
  else
    if (PW0NM001.PW0NMSEL == "A") /* selection criteria was 'a'll*/
      if (PW0NW00.PW0NWRUN == " ") /* picking run mode*/
        if (PK4REC.PK4SLIND != " " /* valid status for selection criteria*/
         && PK4REC.PK4SLIND != "S") /* ditto*/
          PW0NW00.PW0NWSWP = "N"; /* don't process order*/
          return; /* return to process next Vphdit01*/
        end
      else /* run mode is plan picking*/
        if (PK4REC.PK4SLIND != " " /* valid status for selection criteria*/
         && PK4REC.PK4SLIND != "P") /* valid status too*/
          PW0NW00.PW0NWSWP = "N"; /* don't process order*/
          return; /* return to process next Vphdit01*/
        end
      end
    end
  end

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW0NM002.PW0NMSEL == "S" /* selection criteria was 's'elected*/
     && PW0NW00.PW0NWRUN == "P") /* planning run mode*/
      if (PK4REC.PK4SLIND != "S" /* valid status for selection criteria*/
       && PK4REC.PK4SLIND != "P") /* ditto*/
        PW0NW00.PW0NWSWP = "N"; /* don't process order*/
        return; /* return to process next Vphdit01*/
      end
    end
  else
    if (PW0NM001.PW0NMSEL == "S" /* selection criteria was 's'elected*/
     && PW0NW00.PW0NWRUN == "P") /* planning run mode*/
      if (PK4REC.PK4SLIND != "P") /* valid status for selection criteria*/
        PW0NW00.PW0NWSWP = "N"; /* don't process order*/
        return; /* return to process next Vphdit01*/
      end
    end
  end

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW0NM002.PW0NMSEL == "N")
                                   /* selection criteria was 'n'ot selected*/

      if (PK4REC.PK4SLIND != " ") /* valid status*/

        PW0NW00.PW0NWSWP = "N"; /* don't process order*/
        return; /* return to process next Vphdit01*/
      end
    end
  else
    if (PW0NM001.PW0NMSEL == "N")
                                   /* selection criteria was 'n'ot selected*/

      if (PK4REC.PK4SLIND != " ") /* valid status*/

        PW0NW00.PW0NWSWP = "N"; /* don't process order*/
        return; /* return to process next Vphdit01*/
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* If order hold flag is yes, check for any order hold records*/
   /* to check their release dates.*/
   /* ------------------------------------------------------------*/

  if (PK4REC.PK4ORHLD == "Y") /* order hold flag is yes*/

    PW0N138(); /* scan table & check dates*/

    if (PW0NW00.PW0NWSWP == "N") /* if order not okay to process*/

      return; /* return to process next Vphdit01*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If customer hold flag is yes, check for any customer hold*/
   /* records to check their release dates.*/
   /* ------------------------------------------------------------*/

  if (PK4REC.PK4CUHLD == "Y") /* customer hold flag is yes*/

    PW0N139(); /* scan table & check dates*/

    if (PW0NW00.PW0NWSWP == "N") /* if order not okay to process*/

      return; /* return to process next Vphdit01*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If still here, it's ok to process, accumulate FC and RP*/
   /* qtys by reading the item file for the order.*/
   /* ------------------------------------------------------------*/

  PW0NW00.PW0NWSWP = "Y"; /* okay to process order*/
  PW0NW00.PW0NWSC2 = "N"; /* Set item table cursor flag to no*/
  PW0N132(); /* Set item table cursor*/
  PW0NW00.PW0NWSHQ = 0; /* clear total spec hdlg qty field*/
  PW0NW00.PW0NWSHF = 0; /* clear spec hdlg fc field*/
  PW0NW00.PW0NWSHR = 0; /* clear spec hdlg repack field*/
  PW0NW00.PW0NWNHF = 0; /* clear non-spec hdlg fc field*/
  PW0NW00.PW0NWNHR = 0; /* clear non-spec hdlg repack field*/

  PW0N134(); /* Fetch next item row*/
  while (PW0NW00.PW0NWSC2 == "N") /* Until at end of cursor*/

    PW0NW00.PW0NWNUM = 0; /* clear work field*/
    PW0NW00.PW0NWDFC = 0; /* clear detail fc field*/
    PW0NW00.PW0NWDRP = 0; /* clear detail repack field*/
    PW0NW00.PW0NWTFC = 0; /* clear total fc field*/
    PW0NW00.PW0NWTRP = 0; /* clear total repack field*/
    PW0N133(); /* Calculate FC and RP qtys*/
    PW0N134(); /* Fetch next item row*/

  end
  PW0NW00.PW0NWSHQ = PW0NW00.PW0NWSHF + PW0NW00.PW0NWSHR;
                                   /* total spec hdlg*/

  PW0N135(); /* Close item table cursor*/


end // end PW0N130

// select unique-Dpick.Vpoolhd01
Function PW0N131()
   /* ------------------------------------------------------------*/
   /* Select unique for Dpick.Vpoolh01*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* Clear row storage area*/

  PK4REC.XWHCD = PWKREC.XWHCD; /* Warehouse code*/
  PK4REC.XDVCD = PKWREC.XDVCD; /* Division code*/
  PK4REC.PK1CUOID = PWNREC.PK1CUOID; /* Customer order number*/
  PK4REC.PK1NORID = PWNREC.PK1NORID; /* Nike order number*/
  PK4REC.PK4ORHLD = "*"; /* order hold flag*/
  PK4REC.PK4CUHLD = "*"; /* customer hold flag*/
  PK4REC.OP1SPHDF = "Y"; /* special handling flag*/
  PK4REC.TF1CARCD = PWNREC.TF1CARCD; /* carrier code*/


  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW0NM002.PW0NMSEL == "S") /* if selection code was 's'*/
      if (PW0NW00.PW0NWRUN == " ") /* if run mode is picking*/
        PK4REC.PK4SLIND = "S"; /* set to 's'*/
      else
        PK4REC.PK4SLIND = "*"; /* set to wildcard*/
      end
    else

      PK4REC.PK4SLIND = "*"; /* else, wildcard it*/

    end
  else
    if (PW0NM001.PW0NMSEL == "S") /* if selection code was 's'*/
      if (PW0NW00.PW0NWRUN == " ") /* if run mode is picking*/
        PK4REC.PK4SLIND = "S"; /* set to 's'*/
      else
        PK4REC.PK4SLIND = "*"; /* set to wildcard*/
      end
    else

      PK4REC.PK4SLIND = "*"; /* else, wildcard it*/

    end
  end


  try
    call "IO1720" ("SA", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, exit.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0NW00.XXXMODID = "131"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE (SA)";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0N131

// Set cursor - Dpick.Vpooli01
Function PW0N132()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set PK5REC empty; /* Clear row storage area*/

  PK5REC.XWHCD = PK4REC.XWHCD; /* Warehouse code*/
  PK5REC.PK1CUOID = PK4REC.PK1CUOID; /* Customer order number*/
  PK5REC.PK1NORID = PK4REC.PK1NORID; /* Nike order number*/

  try
    call "IO1990" ("S1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0NW00.XXXMODID = "132"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK5REC.PK5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0N132

// Calculate FC and RP qtys
Function PW0N133()
   /* ------------------------------------------------------------*/
   /* Accumulate full case, repack, spcl handling quantity*/
   /* ------------------------------------------------------------*/

  PW0NW00.PW0NWTFC = PK5REC.PK5ITMFC;
  PW0NW00.PW0NWTRP = PK5REC.PK5ITMRP;

  if (PK5REC.XHDCD[1] == "   " /* if spc hdlg code (1) is blank*/
   && PK5REC.XHDCD[2] == "   " /* and spec hdlg code(2) is blank*/
   && PK5REC.XHDCD[3] == "   " /* and spec hdlg code(3) is blank*/
   && PK5REC.XHDCD[4] == "   " /* and spec hdlg code(4) is blank*/
   && PK5REC.XHDCD[5] == "   ") /* and spec hdlg code(5) is blank*/

    PW0NW00.PW0NWNHF = PW0NW00.PW0NWNHF + PW0NW00.PW0NWTFC; /* add tot fc*/
    PW0NW00.PW0NWNHR = PW0NW00.PW0NWNHR + PW0NW00.PW0NWTRP; /* add tot rp*/

  else

    PW0NW00.PW0NWSHF = PW0NW00.PW0NWSHF + PW0NW00.PW0NWTFC; /* add tot fc*/
    PW0NW00.PW0NWSHR = PW0NW00.PW0NWSHR + PW0NW00.PW0NWTRP; /* add tot rp*/

  end


end // end PW0N133

// Fetch next-Dpick.Vpooli01
Function PW0N134()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1990" ("N1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0NW00.PW0NWSC2 = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0NW00.XXXMODID = "134"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK5REC.PK5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0N134

// Close cursor-Dpick.Vpooli01
Function PW0N135()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1990" ("C1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0NW00.XXXMODID = "135"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0N135

// Check order hold data
Function PW0N138()
   /* ------------------------------------------------------------*/
   /* Set cursor - Dpick.Vorhld01*/
   /* ------------------------------------------------------------*/

  PW0NS30(); /* Set cursor*/

  PW0NW00.PW0NWSC2 = " "; /* clear cursor switch*/

   /* ------------------------------------------------------------*/
   /* Fetch next row and validate the release date*/
   /* ------------------------------------------------------------*/

  while (PW0NW00.PW0NWSC2 == " " /* Until end of cursor*/
   && PW0NW00.PW0NWSWP == " ") /* or order is rejected*/

    PW0NS31(); /* Check order hold data*/

  end

   /* ------------------------------------------------------------*/
   /* Close cursor*/
   /* ------------------------------------------------------------*/

  PW0NS32(); /* Close cursor*/


end // end PW0N138

// Select the Dpick.Vcuhld01 row
Function PW0N139()
   /* ------------------------------------------------------------*/
   /* Set the cursor - Dpick.Vcuhld01*/
   /* ------------------------------------------------------------*/

  PW0NS40(); /* Set cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch next row and check dates til end of cursor.*/
   /* ------------------------------------------------------------*/

  PW0NW00.PW0NWSC2 = " "; /* Clear cursor switch*/

  while (PW0NW00.PW0NWSC2 == " " /* Til end of cursor*/
   && PW0NW00.PW0NWSWP == " ") /* or order is rejected*/

    PW0NS41(); /* fetch next row*/

  end

   /* ------------------------------------------------------------*/
   /* Close cursor*/
   /* ------------------------------------------------------------*/

  PW0NS42(); /* Close cursor*/


end // end PW0N139

// Save data in display storage
Function PW0N140()
   /* ------------------------------------------------------------*/
   /* If first line on subsequent page, save heading information.*/
   /* ------------------------------------------------------------*/

  if (PW0NW00.PW0NWIXM == 1) /* and first line on page*/

    PW0NW01.XWHCD = PWKREC.XWHCD; /* Warehouse code*/
    PW0NW01.XWHABRV = PWKREC.XWHABRV; /* Warehouse abrv*/
    PW0NW01.XHDCD = PWKREC.XHDCD[PKWINDEX]; /* spec hdlg code*/
    PW0NW01.PW0NWDMM = PW0NW00.PW0NWNMM; /* DNSB date - MM*/
    PW0NW01.PW0NWDDD = PW0NW00.PW0NWNDD; /* DNSB date - dd*/
    PW0NW01.PW0NWDYY = PW0NW00.PW0NWNYY; /* DNSB date - yy*/

    if (PKWREC.PKWSELSW == "PK") /* picking*/
      PW0NW01.PW0NWSEL = PW0NM002.PW0NMSEL; /* Selection code*/
      PW0NW00.XHRCD = PW0NM002.PW0NMHCD; /* reason hold code*/
      PW0NW00.PW0NWHMM = PW0NM002.PW0NMHMM; /* hold release date-mm*/
      PW0NW00.PW0NWHDD = PW0NM002.PW0NMHDD; /* hold release date-dd*/
      PW0NW00.PW0NWHYY = PW0NM002.PW0NMHYY; /* hold release date-yy*/
    else
      PW0NW01.PW0NWSEL = PW0NM001.PW0NMSEL; /* Selection code*/
      PW0NW00.XHRCD = PW0NM001.PW0NMHCD; /* reason hold code*/
      PW0NW00.PW0NWHMM = PW0NM001.PW0NMHMM; /* hold release date-mm*/
      PW0NW00.PW0NWHDD = PW0NM001.PW0NMHDD; /* hold release date-dd*/
      PW0NW00.PW0NWHYY = PW0NM001.PW0NMHYY; /* hold release date-yy*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  PW0NW01.PW0NWACT[PW0NWIXM] = " "; /* Action code*/
  PW0NW01.PK1CUOID[PW0NWIXM] = PK4REC.PK1CUOID; /* Customer order number*/
  PW0NW01.PK1NORID[PW0NWIXM] = PK4REC.PK1NORID; /* Nike order number*/
  PW0NW01.TF2DSTCD[PW0NWIXM] = PK4REC.TF2DSTCD; /* destination code*/
  PW0NW00.PW0NWSHQ = PW0NW00.PW0NWSHF + PW0NW00.PW0NWSHR; /* total qty*/
  PW0NW01.PW0NWSHQ[PW0NWIXM] = PW0NW00.PW0NWSHQ; /* spec hdlg qty*/
  PW0NW01.PW0NWSHF[PW0NWIXM] = PW0NW00.PW0NWSHF; /* spec hdlg fc*/
  PW0NW01.PW0NWSHR[PW0NWIXM] = PW0NW00.PW0NWSHR; /* spec hdlg rp*/
  PW0NW01.PW0NWNHF[PW0NWIXM] = PW0NW00.PW0NWNHF; /* full case*/
  PW0NW01.PW0NWNHR[PW0NWIXM] = PW0NW00.PW0NWNHR; /* repack*/

  if (PK4REC.PK4SLIND == "S" /* status is 's'*/
   || PK4REC.PK4SLIND == "P") /* status is 'p' (selected for pp)*/

    PW0NW01.PK4SLIND[PW0NWIXM] = "Y"; /* Selection code*/

  else

    PW0NW01.PK4SLIND[PW0NWIXM] = "N"; /* set selection code to 'n'*/

  end

  PW0NW00.PW0NWIXM = PW0NW00.PW0NWIXM + 1; /* Increment line index*/


end // end PW0N140

// Add page to temporary storage
Function PW0N150()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PW0NW01.XXXTSLEN = PW0NW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PW0NW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    PW0NW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0;

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0NW00.XXXMODID = "150"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0N150

// Close selected set cursor
Function PW0N160()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5490" ("C1", SQLCA, PWNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0NW00.XXXMODID = "160"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPHDIT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0N160

// select unique-Dpick.Vcarr001
Function PW0N170()
   /* ------------------------------------------------------------*/
   /* Select unique for Dpick.Vcarr001*/
   /* ------------------------------------------------------------*/

  set TF1REC empty; /* Clear row storage area*/

  TF1REC.TF1CARCD = PW0NW00.TF1CARCD; /* carrier code*/

  try
    call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, exit.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0NW00.XXXMODID = "170"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCARR001"; /* Table view name*/
  TA1REC.TA1TBLKE = TF1REC.TF1KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0N170

// Format and converse the map
Function PW0N200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PW0NW00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PW0NW00.PW0NWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PW0NW00.PW0NWSWF == "Y") /* Map must be formatted*/

      if (PKWREC.PKWSELSW == "PK") /* picking*/
        PW0N-21002(); /* Format the data on the map*/
      else
        PW0N-21001(); /* Format the data on the map*/
      end

    end
  end


  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW0N-20002();
  else
    PW0N-20001(); /* pick planning*/
  end

end // end PW0N200

// Check attention identifier
Function PW0N300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PW0NW00.PW0NWSWR == "Y") /* Request for data*/
      set PW0NW01 empty; /* M001 display storage*/
    end

    PW0NW00.PW0NWSWF = "Y"; /* Format the map switch*/
    PW0NW00.PW0NWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW0NM002.CATOAP > " ") /* FAST PATH was requested*/
      if (converseVar.eventKey is enter) /* ENTER was pressed*/
        if (PW0NM002.CATOAP == COMMAREA.CACURRAP) /* same appl*/
          converseLib.validationFailed(1); /* invalid fast path option*/
          set PW0NM002.CATOAP cursor, bold; /* highlight*/
          exit stack;
        end
        PW0N110(); /* Purge temporary storage*/
        XSPKS01(); /* Exit to another application*/
        set PW0NM002.CATOAP cursor, bold; /* Highlight*/
        PW0NW00.PW0NWSWR = "Y"; /* request data*/
        PW0NW00.PW0NWSWF = "Y"; /* format data on screen*/
      else

        PW0NW00.XXXMODID = "300"; /* Module identification*/
        converseLib.validationFailed(13); /* PA/PF key may not be used*/
      end
      exit stack; /* Exit to display map*/
    end
  else
    if (PW0NM001.CATOAP > " ") /* FAST PATH was requested*/
      if (converseVar.eventKey is enter) /* ENTER was pressed*/
        if (PW0NM001.CATOAP == COMMAREA.CACURRAP) /* same appl*/
          converseLib.validationFailed(1); /* invalid fast path option*/
          set PW0NM001.CATOAP cursor, bold; /* highlight*/
          exit stack;
        end
        PW0N110(); /* Purge temporary storage*/
        XSPKS01(); /* Exit to another application*/
        set PW0NM001.CATOAP cursor, bold; /* Highlight*/
        PW0NW00.PW0NWSWR = "Y"; /* request data*/
        PW0NW00.PW0NWSWF = "Y"; /* format data on screen*/
      else

        PW0NW00.XXXMODID = "300"; /* Module identification*/
        converseLib.validationFailed(13); /* PA/PF key may not be used*/
      end
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PW0NM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PW0M"; /* TO application*/
      PKWREC.PKWARRAY = PWKREC.PWKARRAY; /* save array*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "PW0R"; /* TO application*/
      PKWREC.PKWARRAY = PWKREC.PWKARRAY; /* save array*/
    end

    PW0N110(); /* Purge temporary storage*/

    XSPKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    PW0NW00.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PW0N300

// Reset highlighted fields
Function PW0N400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    set PW0NM002.PW0NMSEL initialAttributes; /* Selection*/
    set PW0NM002.XHRCD initialAttributes; /* carrier hold reason code*/
    set PW0NM002.PW0NMHMM initialAttributes; /* carrier release date-month*/
    set PW0NM002.PW0NMHDD initialAttributes; /* carrier release date-day*/
    set PW0NM002.PW0NMHYY initialAttributes; /* carrier release date-year*/
  else
    set PW0NM001.PW0NMSEL initialAttributes; /* Selection*/
    set PW0NM001.XHRCD initialAttributes; /* carrier hold reason code*/
    set PW0NM001.PW0NMHMM initialAttributes; /* carrier release date-month*/
    set PW0NM001.PW0NMHDD initialAttributes; /* carrier release date-day*/
    set PW0NM001.PW0NMHYY initialAttributes; /* carrier release date-year*/
  end

  PW0NW00.PW0NWIXM = 1; /* Initialize line index*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    while (PW0NW00.PW0NWIXM <= 10 /* Until end of lines*/
     && PW0NM002.PK1CUOID[PW0NWIXM] > 0) /* or end of display*/

      set PW0NM002.PW0NMACT[PW0NWIXM] normal; /* Reset select flag*/
      set PW0NM002.XHRCD[PW0NWIXM] normal; /* Reset hold reason code*/
      set PW0NM002.PW0NMRMM[PW0NWIXM] normal; /* Reset release date - month*/
      set PW0NM002.PW0NMRDD[PW0NWIXM] normal; /* Reset release date - day*/
      set PW0NM002.PW0NMRYY[PW0NWIXM] normal; /* Reset release date - year*/

      PW0NW00.PW0NWIXM = PW0NW00.PW0NWIXM + 1; /* Increment line index*/

    end

    set PW0NM002.CATOAP initialAttributes; /* TO application*/
    set PW0NM002.CAITEM initialAttributes; /* Application data*/
  else
    while (PW0NW00.PW0NWIXM <= 10 /* Until end of lines*/
     && PW0NM001.PK1CUOID[PW0NWIXM] > 0) /* or end of display*/

      set PW0NM001.PW0NMACT[PW0NWIXM] normal; /* Reset select flag*/
      set PW0NM001.XHRCD[PW0NWIXM] normal; /* Reset hold reason code*/
      set PW0NM001.PW0NMRMM[PW0NWIXM] normal; /* Reset release date - month*/
      set PW0NM001.PW0NMRDD[PW0NWIXM] normal; /* Reset release date - day*/
      set PW0NM001.PW0NMRYY[PW0NWIXM] normal; /* Reset release date - year*/

      PW0NW00.PW0NWIXM = PW0NW00.PW0NWIXM + 1; /* Increment line index*/

    end

    set PW0NM001.CATOAP initialAttributes; /* TO application*/
    set PW0NM001.CAITEM initialAttributes; /* Application data*/
  end


   /* ------------------------------------------------------------*/
   /* If a '?' found in any of the hold code fields, open a pop-*/
   /* up window for selection, then move the selected value to*/
   /* the original field holding the '?'.*/
   /* ------------------------------------------------------------*/

  if ("?" in PW0NM001.XHRCD /* if a '?' in any of the hold codes*/
   || "?" in PW0NM002.XHRCD)

    if (converseVar.eventKey not enter) /* enter not pressed*/

      PW0NW00.XXXMODID = "400"; /* Module id*/
      converseLib.validationFailed(320); /* Not valid without enter key*/

      exit stack; /* exit to display map*/

    else

      PW0NW00.PW0NWIXM = sysVar.arrayIndex; /* set index*/

    end

  else

    return;

  end

   /* ------------------------------------------------------------*/
   /* Display pop-up window for hold codes.*/
   /* ------------------------------------------------------------*/

  XPXX001(); /* pop-up window initialization*/

  XX0XW02.XX0XWHDR = "        HOLD REASON CODES"; /* set window title*/

  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/

    XPXHR01(); /* display the list*/

  end

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (XX0XW02.XX0XWPIX == 0) /* no selection made*/
      PW0NM002.XHRCD[PW0NWIXM] = PW0NW01.XHRCD[PW0NWIXM];
    else
      PW0NM002.XHRCD[PW0NWIXM] = XHRTBL.XHRCD[XX0XWPIX];
    end
  else
    if (XX0XW02.XX0XWPIX == 0) /* no selection made*/
      PW0NM001.XHRCD[PW0NWIXM] = PW0NW01.XHRCD[PW0NWIXM];
    else
      PW0NM001.XHRCD[PW0NWIXM] = XHRTBL.XHRCD[XX0XWPIX];
    end
  end


  converseLib.clearScreen();
  
  converseLib.clearScreen();
  
  PW0NW00.XXXMODID = "400"; /* Module id*/


end // end PW0N400

// Verify data that was entered
Function PW0N500()

  if (PKWREC.PKWSELSW == "PK") /* picking*/

    PW0N-50002();
  else
    PW0N-50001();

  end


end // end PW0N500

// Verify scroll request
Function PW0N510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PW0NW00.XXXTSPAG < 2)       /* and no previous pages*/

    PW0NW00.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(37); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PW0NW00.XXXTSPAG >= PW0NW00.TA5TSQIX) /* and no more pages*/

    PW0NW00.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(38); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if selection was changed.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW0NM002.PW0NMSEL != PW0NW01.PW0NWSEL) /* Selection changed*/

      PW0NW00.XXXMODID = "510"; /* Module identification*/
      set PW0NM002.PW0NMSEL cursor, bold; /* Highlight*/
      converseLib.validationFailed(39); /* Field may not change*/

    end
  else
    if (PW0NM001.PW0NMSEL != PW0NW01.PW0NWSEL) /* Selection changed*/

      PW0NW00.XXXMODID = "510"; /* Module identification*/
      set PW0NM001.PW0NMSEL cursor, bold; /* Highlight*/
      converseLib.validationFailed(39); /* Field may not change*/

    end
  end

end // end PW0N510

// Process valid input request
Function PW0N600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PW0NW00.PW0NWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If any data lines were changed, save and update t/s.*/
   /* ------------------------------------------------------------*/

  if (PW0NW00.PW0NWCUR == "Y") /* data changed this screen*/

    PW0NW00.PW0NWIXM = 1; /* initialize index*/

    if (PKWREC.PKWSELSW == "PK") /* PICKING*/
      while (PW0NW00.PW0NWIXM <= 10 /* till all lines moved*/
       && PW0NM002.PK1CUOID[PW0NWIXM] != 0) /* and data exists*/

        PW0NW01.PW0NWACT[PW0NWIXM] = PW0NM002.PW0NMACT[PW0NWIXM];
        PW0NW01.XHRCD[PW0NWIXM] = PW0NM002.XHRCD[PW0NWIXM];
        PW0NW01.PK4SLIND[PW0NWIXM] = PW0NM002.PK4SLIND[PW0NWIXM];
        PW0NW01.PW0NWRMM[PW0NWIXM] = PW0NM002.PW0NMRMM[PW0NWIXM];
        PW0NW01.PW0NWRDD[PW0NWIXM] = PW0NM002.PW0NMRDD[PW0NWIXM];
        PW0NW01.PW0NWRYY[PW0NWIXM] = PW0NM002.PW0NMRYY[PW0NWIXM];

        PW0NW00.PW0NWIXM = PW0NW00.PW0NWIXM + 1;

      end
    else
      while (PW0NW00.PW0NWIXM <= 10 /* till all lines moved*/
       && PW0NM001.PK1CUOID[PW0NWIXM] != 0) /* and data exists*/

        PW0NW01.PW0NWACT[PW0NWIXM] = PW0NM001.PW0NMACT[PW0NWIXM];
        PW0NW01.XHRCD[PW0NWIXM] = PW0NM001.XHRCD[PW0NWIXM];
        PW0NW01.PK4SLIND[PW0NWIXM] = PW0NM001.PK4SLIND[PW0NWIXM];
        PW0NW01.PW0NWRMM[PW0NWIXM] = PW0NM001.PW0NMRMM[PW0NWIXM];
        PW0NW01.PW0NWRDD[PW0NWIXM] = PW0NM001.PW0NMRDD[PW0NWIXM];
        PW0NW01.PW0NWRYY[PW0NWIXM] = PW0NM001.PW0NMRYY[PW0NWIXM];

        PW0NW00.PW0NWIXM = PW0NW00.PW0NWIXM + 1;

      end
    end


    TA5REC.TA5TSQIX = PW0NW00.XXXTSPAG; /* which page to update*/
    PW0NS01(); /* update t/s page*/
    PW0NW00.PW0NWCUR = "N"; /* clear current screen change flag*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PW0NW00.XXXTSPAG = PW0NW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PW0NW00.XXXTSPAG = PW0NW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If the carrier hold fields changed, warning msg sent.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW0NM002.PW0NMHCD != PW0NW00.XHRCD    /* chgd carr hold rsn code*/
     || PW0NM002.PW0NMHMM != PW0NW00.PW0NWHMM /* chgd hold rlse mm*/
     || PW0NM002.PW0NMHDD != PW0NW00.PW0NWHDD /* chgd hold rlse dd*/
     || PW0NM002.PW0NMHYY != PW0NW00.PW0NWHYY) /* chgd hold rlse yy*/

      PW0NW00.XHRCD = PW0NM002.PW0NMHCD; /* carrier reason code*/
      PW0NW00.PW0NWHMM = PW0NM002.PW0NMHMM; /* carrier rlse month*/
      PW0NW00.PW0NWHDD = PW0NM002.PW0NMHDD; /* carrier rlse day*/
      PW0NW00.PW0NWHYY = PW0NM002.PW0NMHYY; /* carrier rlse year*/
      PW0NW00.XXXMSGNO = 324; /* warning - all orders on hold msg*/
      return;

    end
  else
    if (PW0NM001.PW0NMHCD != PW0NW00.XHRCD    /* chgd carr hold rsn code*/
     || PW0NM001.PW0NMHMM != PW0NW00.PW0NWHMM /* chgd hold rlse mm*/
     || PW0NM001.PW0NMHDD != PW0NW00.PW0NWHDD /* chgd hold rlse dd*/
     || PW0NM001.PW0NMHYY != PW0NW00.PW0NWHYY) /* chgd hold rlse yy*/

      PW0NW00.XHRCD = PW0NM001.PW0NMHCD; /* carrier reason code*/
      PW0NW00.PW0NWHMM = PW0NM001.PW0NMHMM; /* carrier rlse month*/
      PW0NW00.PW0NWHDD = PW0NM001.PW0NMHDD; /* carrier rlse day*/
      PW0NW00.PW0NWHYY = PW0NM001.PW0NMHYY; /* carrier rlse year*/
      PW0NW00.XXXMSGNO = 324; /* warning - all orders on hold msg*/
      return;

    end
  end


   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* enter was pressed*/

    if (PKWREC.PKWSELSW == "PK") /* picking*/
      if (PW0NM002.PW0NMSEL != PW0NW01.PW0NWSEL) /* Selection changed*/

        PW0NW00.PW0NWSWR = "Y"; /* Request for data switch*/
        return; /* Return to previous process*/
      end
    else
      if (PW0NM001.PW0NMSEL != PW0NW01.PW0NWSEL) /* Selection changed*/

        PW0NW00.PW0NWSWR = "Y"; /* Request for data switch*/
        return; /* Return to previous process*/
      end
    end


    if (PW0NW00.PW0NWSWU != "Y") /* no updates for current data*/

      PW0NW00.PW0NWSWR = "Y"; /* Request for data switch*/

      return; /* Return to previous process*/

    else

      XX0XS01(); /* get system date and time*/

      PW0N610(); /* perform updates*/

      PW0NW00.PW0NWSWU = "N"; /* clear change switch*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* commit all changes*/
      if (PW0NW00.PW0NWIDX > 1) /* there were orders to inquire on*/

        PWJREC.XWHCD = PKWREC.XWHCD;
        PWJREC.XWHABRV = PKWREC.XWHABRV;
        PW0N660(); /* xfer to PW0I*/

      else

        PW0NW00.XXXTSPAG = 1; /* force display to first page*/

      end

    end

  end


end // end PW0N600

// Process lines of data
Function PW0N610()
   /* ------------------------------------------------------------*/
   /* Process data*/
   /*  */
   /* If carrier (header area) hold reason code and release date*/
   /* not blank, insert a carrier hold record, and put all orders*/
   /* on hold with same hold reason code and release date...*/
   /* ------------------------------------------------------------*/

  PW0NW00.PW0NWIDX = 1; /* initialize index for inquiry array*/

  if (PW0NW00.XHRCD != "  ") /* there is a carrier hold reason cd*/

    PW0N670(); /* put all orders on hold*/
    PW0NW00.XXXMSGNO = 32; /* update successful*/
    return;

  end

  PW0NW00.PW0NWIXM = 1; /* initialize index*/
  PW0NW00.XXXTSPAG = 1; /* start at first page of t/s*/
  TA5REC.TA5TSQIX = PW0NW00.XXXTSPAG; /* tell it which page to get*/
  PW0NS02(); /* read first t/s page*/

  while (PW0NW00.XXXTSPAG <= PW0NW00.TA5TSQIX) /* while there is still data*/

    if (PW0NW01.PK1CUOID[PW0NWIXM] != 0) /* if there is data on this line*/

      if (PW0NW01.PW0NWACT[PW0NWIXM] == "S") /* select to pick*/
        PW0N620(); /* select to pick routine*/
      end

      if (PW0NW01.PW0NWACT[PW0NWIXM] == "D") /* deselect order*/
        PW0N630(); /* deselect routine*/
      end

      if (PW0NW01.PW0NWACT[PW0NWIXM] == "H") /* place order on hold*/
        PW0N640(); /* hold order routine*/
      end

      if (PW0NW01.PW0NWACT[PW0NWIXM] == "I") /* inquire on order*/
        PW0N650(); /* order inquiry routine*/
      end

    end
    PW0NW00.PW0NWIXM = PW0NW00.PW0NWIXM + 1;

    if (PW0NW00.PW0NWIXM > 10) /* if index > 10*/

      PW0NS01(); /* update current t/s page*/
      PW0NW00.XXXTSPAG = PW0NW00.XXXTSPAG + 1; /* increment t/s page number*/

      if (PW0NW00.XXXTSPAG <= PW0NW00.TA5TSQIX) /* still have more t/s pages*/

        VGVar.handleSysLibraryErrors = 0;
        sysLib.commit();
                                   /* commit db updates for prior page data*/
        TA5REC.TA5TSQIX = PW0NW00.XXXTSPAG; /* tell it which pg*/
        PW0NS02(); /* get next t/s page*/
        PW0NW00.PW0NWIXM = 1; /* reset index*/

      end
    end
  end


end // end PW0N610

// Select order for picking
Function PW0N620()
   /* ------------------------------------------------------------*/
   /* Select order for picking*/
   /* ------------------------------------------------------------*/

  PW0NS10(); /* select unique pool header*/

  if (PW0NW00.PW0NWRUN == " ") /* if run mode is picking*/
    PK4REC.PK4SLIND = "S"; /* set status to 's'*/
  else
    PK4REC.PK4SLIND = "P"; /* otherwise, set to 'p'*/
  end

  PW0NW01.PK4SLIND[PW0NWIXM] = "Y";

  PK4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PK4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW0NS11(); /* update pool header*/

   /* ------------------------------------------------------------*/
   /* See if row already exists in Dpick.Vselor01*/
   /* ------------------------------------------------------------*/

  set PKHREC empty; /* clear record*/
  PKHREC.XWHCD = PW0NW01.XWHCD;
  PKHREC.PK1CUOID = PW0NW01.PK1CUOID[PW0NWIXM];
  PKHREC.PK1NORID = PW0NW01.PK1NORID[PW0NWIXM];
  PKHREC.PK1PRTN = PK4REC.PK1PRTN;
  PKHREC.PKURUNMD = PW0NW00.PW0NWRUN;

  PW0N621(); /* select unique Dpick.Vselor01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* row already exists*/

    if (PW0NW00.XXXMSGNO == 0) /* if no other warning msgs*/

      PW0NW00.XXXMSGNO = 44; /* warning msg*/
      PW0NW00.XXXMODID = "620"; /* module id*/

    end

    PW0NW01.PW0NWACT[PW0NWIXM] = " "; /* clear action code*/
    return; /* return to calling process, dont need to add record*/

  end

   /* ------------------------------------------------------------*/
   /* Now, insert row into Dpick.Vselor01*/
   /* ------------------------------------------------------------*/

  set PKHREC empty; /* clear record*/

  PKHREC.XWHCD = PW0NW01.XWHCD;
  PKHREC.XBCCD = PK4REC.XBCCD;
  PKHREC.XDVCD = PK4REC.XDVCD;
  PKHREC.PK1CUOID = PW0NW01.PK1CUOID[PW0NWIXM]; /* ord stktf id*/
  PKHREC.PK1NORID = PW0NW01.PK1NORID[PW0NWIXM]; /* nike ord id*/
  PKHREC.PK1PRTN = PK4REC.PK1PRTN; /* part char*/
  PKHREC.OP1DSBDT = PWKREC.OP1DSBDT[PKWINDEX]; /* dnsb date*/
  PKHREC.TF1CARCD = PK4REC.TF1CARCD; /* carrier*/
  PKHREC.XPPCD = PK4REC.XPPCD; /* pick prior*/
  PKHREC.PKURUNMD = PW0NW00.PW0NWRUN; /* run mode*/
  PKHREC.PK-SEL-TYP-CD = " 5";

  PKHREC.PKHPVSFC = PW0NW01.PW0NWSHF[PW0NWIXM];
  PKHREC.PKHPVSFC = PKHREC.PKHPVSFC + PW0NW01.PW0NWNHF[PW0NWIXM];
  PKHREC.PKHPVSRP = PW0NW01.PW0NWSHR[PW0NWIXM];
  PKHREC.PKHPVSRP = PKHREC.PKHPVSRP + PW0NW01.PW0NWNHR[PW0NWIXM];

  PW0N622(); /* calculate special handling minutes*/

  PKHREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PKHREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  PKHREC.ZZZCHGCT = 0;

  PW0N623(); /* insert Dpick.Vselor01*/


end // end PW0N620

// Insert Dpick.Vselor01
Function PW0N621()
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("S ", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found is good!!*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0NW00.XXXMODID = "621"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0N621

// Calculate sphdlg minutes
Function PW0N622()
   /* ------------------------------------------------------------*/
   /* Set cursor for vpooli01*/
   /* Fetch each item record for the current order*/

   /* For each line item with total qty > 0:*/
    /* 1) Loop through the 5 occurrances of special handling code*/
       /* and retrieve the minutes-per-unit from the sphdlg table*/
    /* 2) Multiply the total qty by the minutes-per-unit*/
   /* ------------------------------------------------------------*/

  PW0N132(); /* set cursor vpooli01*/

  PW0NW00.PW0NWSC2 = "N"; /* clear cursor switch*/
  PKHREC.PKHPVSMM = 0; /* clear minutes field*/

  while (PW0NW00.PW0NWSC2 == "N") /* til no more line items for order*/

    PW0NW00.PW0NWIDX = 1; /* reset index*/
    PW0N134(); /* fetch next vpooli01*/
    PW0NW00.XGPCD = PK5REC.XGPCD; /* set up part of xhd key*/

    while (PW0NW00.PW0NWIDX <= 5   /* til all occurrances are checked*/
     && PW0NW00.PW0NWSC2 == "N" /* and have a line item row*/
     && PK5REC.PK5TIQTY != 0) /* and have a non-zero qty*/

      PW0NW00.XHDCD = PK5REC.XHDCD[PW0NWIDX];
      if (PK5REC.XHDCD[PW0NWIDX] != "   " /* non-blank code*/
       && PW0NW00.XHDKEY in XHDTBL.XHDKEY) /* find in table*/

        PW0NW00.PKHPVSMM = mathLib.round(XHDTBL.XHDSHMM[sysVar.arrayIndex] * PK5REC.PK5TIQTY, -mathLib.decimals(PW0NW00.PKHPVSMM));
        PKHREC.PKHPVSMM = PKHREC.PKHPVSMM + PW0NW00.PKHPVSMM;

      end

      PW0NW00.PW0NWIDX = PW0NW00.PW0NWIDX + 1; /* increment index*/

    end

  end

  PW0N135(); /* close cursor - vpooli01*/


end // end PW0N622

// Insert Dpick.Vselor01
Function PW0N623()
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("A ", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0NW00.XXXMSGNO = 32; /* table update successful msg*/
      PW0NW01.PW0NWACT[PW0NWIXM] = "*"; /* flag as processed*/
      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == -803) /* Row already exists*/

      PW0NW00.XXXMSGNO = 44; /* Warning msg*/
      PW0NW00.XXXMODID = "623"; /* module id*/
      PW0NW01.PW0NWACT[PW0NWIXM] = " "; /* clear action code*/
      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0NW00.XXXMODID = "623"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0N623

// De-select order
Function PW0N630()
   /* ------------------------------------------------------------*/
    /* De-select order*/
   /* ------------------------------------------------------------*/

   /* ----- first, clear status in pool header (select unique,*/
   /* ----- then update it)*/

  PW0NS10(); /* select unique pool header*/

  PK4REC.PK4SLIND = " "; /* clear status*/
  PW0NW01.PK4SLIND[PW0NWIXM] = "N"; /* set sel flag to no*/

  PK4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PK4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW0NS11(); /* update pool header*/

   /* ------------------------------------------------------------*/
    /* Now, delete row from Dpick.Vselor01*/
   /* ------------------------------------------------------------*/

  set PKHREC empty; /* clear record*/
  PKHREC.XWHCD = PW0NW01.XWHCD;
  PKHREC.PK1CUOID = PW0NW01.PK1CUOID[PW0NWIXM];
  PKHREC.PK1NORID = PW0NW01.PK1NORID[PW0NWIXM];
  if (PKWREC.PKWSELSW == "PP") /* if pick planning mode*/

    PKHREC.PKURUNMD = "P"; /* set run mode accordingly*/

  end

  PW0N631(); /* delete Dpick.Vselor01*/


end // end PW0N630

// Delete Dpick.Vselor01 row
Function PW0N631()
   /* ------------------------------------------------------------*/
   /* Delete the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("D ", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0NW00.XXXMSGNO = 32; /* update successful msg*/
      PW0NW01.PW0NWACT[PW0NWIXM] = "*"; /* flag as processed*/
      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PW0NW00.XXXMSGNO = 201; /* warning msg*/
      PW0NW00.XXXMODID = "631"; /* Module id*/
      PW0NW01.PW0NWACT[PW0NWIXM] = " "; /* clear action code*/
      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0NW00.XXXMODID = "631"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0N631

// Put order on hold
Function PW0N640()
   /* ------------------------------------------------------------*/
          /* Put order on hold*/
   /* ------------------------------------------------------------*/
    /* Insert row into Dpick.Vorhld01*/
   /* ------------------------------------------------------------*/

  set PKBREC empty; /* clear record*/
  PKBREC.XWHCD = PW0NW01.XWHCD;
  PKBREC.PK1CUOID = PW0NW01.PK1CUOID[PW0NWIXM];
  PKBREC.PK1NORID = PW0NW01.PK1NORID[PW0NWIXM];
  PKBREC.XHRCD = PW0NW01.XHRCD[PW0NWIXM]; /* hold reason code*/

   /* ----- convert release date to CCYYMMDD format*/

  PW0NW00.PW0NWNMM = PW0NW01.PW0NWRMM[PW0NWIXM];
  PW0NW00.PW0NWNDD = PW0NW01.PW0NWRDD[PW0NWIXM];
  PW0NW00.PW0NWNYY = PW0NW01.PW0NWRYY[PW0NWIXM];
  if (PW0NW00.PW0NWNYY > 80) /* if year > 80*/

    PW0NW00.PW0NWNCC = 19; /* set century to 19*/

  else

    PW0NW00.PW0NWNCC = 20; /* else, set to 20*/

  end

  PW0N641(); /* select Dpick.Vorhld01*/

  PKBREC.PKBRELDT = PW0NW00.PW0NWNDT; /* store as release date*/

   /* ------------------------------------------------------------------*/
   /* If release date is not '999999', subtract 1 from release date*/
    /* and move t othe plan release date.*/
   /* ------------------------------------------------------------------*/

  if (PW0NW00.PW0NWNMM != 99
   || PW0NW00.PW0NWNDD != 99
   || PW0NW00.PW0NWNYY != 99)

    set TA9REC empty;
    TA9REC.TA9BEGDT = PW0NW00.PW0NWNDT;
    TA9REC.TA9OFSET = -1;

    try
      call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
    end /* subtract 1 from date*/

    /* -----------------------------------------------------------------*/
     /* If successful, move date and continue through process*/
    /* -----------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* call successful*/
     && TA9REC.TA9RTNFL == 0)          /* and normal return code*/

      PKBREC.PKBPLRDT = TA9REC.TA9RTNDT;

    else

      /* ---------------------------------------------------------------*/
       /* otherwise, indicate that a system has occurred*/
      /* ---------------------------------------------------------------*/

      TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return codes*/
      TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* subroutine parameters*/
      converseLib.validationFailed(29); /* fatal error*/
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
      TA1REC.TA1TYPE = "APPL"; /* type of error*/
      TA1REC.TA1LOC = "UPDATE PLAN RELEASE DATE";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program appl*/
      TA1REC.TA1PGMNO = "640"; /* program number*/
      TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* map appl*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis*/

      exit stack; /* exit to display map*/

    end

  else

    PKBREC.PKBPLRDT = PW0NW00.PW0NWNDT;

  end

   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* IF PKBREC.PKBRELDT GT 19991231;*/
   /* MOVE 999999999 TO PKBREC.PKBRELDT;*/
   /* MOVE 999999999 TO PKBREC.PKBPLRDT;*/
   /* END;*/
   /* ;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (PKBREC.PKBRELDT > 20431231)
    PKBREC.PKBRELDT = 999999999;
    PKBREC.PKBPLRDT = 999999999;
  end

   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
  PKBREC.XXXUSRID = COMMAREA.CAUSERID;

  PKBREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PKBREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  if (SQLCA.VAGen_SQLCODE == 0) /* if record was on file*/

    PW0N642(); /* update Dpick.Vorhld01*/

  else

    PKBREC.ZZZCHGCT = 0;
    PW0N643(); /* insert Dpick.Vorhld01*/

  end

   /* ----- Retrieve pool header, update order-hold-flag,*/
   /* ----- then update it)*/

  PW0NS10(); /* select unique pool header*/

  PK4REC.PK4ORHLD = "Y"; /* set order hold flag to yes*/

  PK4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PK4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW0NS11(); /* update pool header*/
  PW0NW01.PW0NWSWH[PW0NWIXM] = "Y"; /* set hold flag to yes*/


end // end PW0N640

// Select unique Dpick.vorhld01
Function PW0N641()
   /* ------------------------------------------------------------*/
   /* Select the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("S ", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0NW00.XXXMODID = "641"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0N641

// Update row Dpick.vorhld01
Function PW0N642()
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("U ", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0NW01.PW0NWACT[PW0NWIXM] = "*"; /* flag as processed*/
      PW0NW01.PW0NWSWH[PW0NWIXM] = "Y"; /* hold flag set*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0NW00.XXXMODID = "642"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0N642

// Insert row Dpick.vorhld01
Function PW0N643()
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("A ", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      PW0NW00.XXXMSGNO = 32; /* update successful msg*/
      PW0NW01.PW0NWACT[PW0NWIXM] = "*"; /* flag as processed*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0NW00.XXXMODID = "643"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0N643

// Process order for inquiry
Function PW0N650()
   /* ------------------------------------------------------------*/
   /* Order was requested for inquiry - add to pwjrec array*/
   /* ------------------------------------------------------------*/

  if (PW0NW00.PW0NWIDX > 65)

    PW0NW00.XXXMSGNO = 346;
    return;

  end

  PWJREC.PWJORACT[PW0NWIDX] = "I"; /* flag for inquiry*/
  PWJREC.PK1CUOID[PW0NWIDX] = PW0NW01.PK1CUOID[PW0NWIXM];
  PWJREC.PK1NORID[PW0NWIDX] = PW0NW01.PK1NORID[PW0NWIXM];
  PWJREC.PWJARMAX = PW0NW00.PW0NWIDX; /* occ's in array*/

  PW0NW00.PW0NWIDX = PW0NW00.PW0NWIDX + 1;


end // end PW0N650

// Transfer control to PW0I
Function PW0N660()
   /* ------------------------------------------------------------*/
   /* Orders are in PKYREC for inquiry, xfer to PW0I.*/
   /* ------------------------------------------------------------*/

  PW0N110(); /* Purge temporary storage*/

  COMMAREA.CATOAP = "PW0O"; /* set target application*/
  PKWREC.PKWUSERB = PWJREC.PKWUSERB; /* store array for pw0i*/
  XSPKS01(); /* Exit to another application*/

  if (PKWREC.PKWSELSW == "PK")
    set PW0NM002.CATOAP cursor, bold; /* Highlight*/
  else
    set PW0NM001.CATOAP cursor, bold; /* Highlight*/
  end

  exit stack; /* Exit to display map*/


end // end PW0N660

// Process lines of data
Function PW0N670()
   /* ------------------------------------------------------------*/
   /* Process data*/
   /*  */
   /* If carrier (header area) hold reason code and release date*/
   /* not blank, insert a carrier hold record, and put all orders*/
   /* on hold with same hold reason code and release date...*/
   /* ------------------------------------------------------------*/

  PW0N671(); /* Insert/update carrier hold record*/

  PW0NW00.PW0NWIXM = 1; /* initialize index*/
  PW0NW00.XXXTSPAG = 1; /* start at first page of t/s*/
  TA5REC.TA5TSQIX = PW0NW00.XXXTSPAG; /* tell it which page to get*/
  PW0NS02(); /* read first t/s page*/

  while (PW0NW00.XXXTSPAG <= PW0NW00.TA5TSQIX) /* while there is still data*/

    if (PW0NW01.PK1CUOID[PW0NWIXM] != 0) /* if there is data on this line*/
      PW0N672(); /* hold order routine*/
    end

    PW0NW00.PW0NWIXM = PW0NW00.PW0NWIXM + 1;
    if (PW0NW00.PW0NWIXM > 10) /* if index > 10*/

      PW0NS01(); /* update current t/s page*/
      PW0NW00.XXXTSPAG = PW0NW00.XXXTSPAG + 1; /* increment t/s page number*/

      if (PW0NW00.XXXTSPAG <= PW0NW00.TA5TSQIX) /* still have more t/s pages*/

        VGVar.handleSysLibraryErrors = 0;
        sysLib.commit();
                                   /* commit db updates for prior page data*/
        TA5REC.TA5TSQIX = PW0NW00.XXXTSPAG; /* tell it which page*/
        PW0NS02(); /* get next t/s page*/
        PW0NW00.PW0NWIXM = 1; /* reset index*/

      end
    end
  end


end // end PW0N670

// Insert/Update Dpick.Vcahld01
Function PW0N671()
   /* ------------------------------------------------------------*/
   /* Select unique for carrier hold record (in case there is*/
   /* one already).*/
   /* ------------------------------------------------------------*/

  PW0NS23(); /* select unique Dpick.Vcahld01*/

  PW0NW00.PW0NWNMM = PW0NW00.PW0NWHMM; /* move rlse date to convert*/
  PW0NW00.PW0NWNDD = PW0NW00.PW0NWHDD; /* move rlse day to convert*/
  PW0NW00.PW0NWNYY = PW0NW00.PW0NWHYY; /* move rlse year to convert*/
  if (PW0NW00.PW0NWHYY > 80) /* if year is greater than 80*/

    PW0NW00.PW0NWNCC = 19; /* set century to 19*/

  else

    PW0NW00.PW0NWNCC = 20; /* set century to 20*/

  end

   /* Move rlse date to appropriate date field in pwfrec*/

  if (PW0NW00.PW0NWRUN == " ") /* picking run mode*/

    PWFREC.PKBRELDT = PW0NW00.PW0NWNDT; /* Picking rlse date*/

  else

    PWFREC.PKBPLRDT = PW0NW00.PW0NWNDT; /* Plan picking rlse dt*/

  end

  PWFREC.XXXUSRID = COMMAREA.CAUSERID;
  PWFREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PWFREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* ------------------------------------------------------------*/
   /* If successful retrieval, update the record, else insert.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If record was found*/

    PW0NS24(); /* Update the record*/

  else

    PWFREC.ZZZCHGCT = 0;
    PW0NS25(); /* Insert the record*/

  end


end // end PW0N671

// Put order on hold
Function PW0N672()
   /* ------------------------------------------------------------*/
   /* Put order on hold*/
   /* Insert row into Dpick.Vorhld01*/
   /* ------------------------------------------------------------*/

  set PKBREC empty; /* clear record*/
  PKBREC.XWHCD = PW0NW01.XWHCD;
  PKBREC.PK1CUOID = PW0NW01.PK1CUOID[PW0NWIXM];
  PKBREC.PK1NORID = PW0NW01.PK1NORID[PW0NWIXM];
  PKBREC.XHRCD = PW0NW00.XHRCD; /* use hold reason code from carrier*/

  PW0N641(); /* select Dpick.Vorhld01*/

  if (PW0NW00.PW0NWRUN == " ") /* if run mode is picking*/
    PKBREC.PKBRELDT = PW0NW00.PW0NWNDT; /* store as release date*/
  else
    PKBREC.PKBPLRDT = PW0NW00.PW0NWNDT; /* else, planned rlse date*/
  end

  PKBREC.XXXUSRID = COMMAREA.CAUSERID;

  PKBREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PKBREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  if (SQLCA.VAGen_SQLCODE == 0) /* if record was on file*/
    PW0N642(); /* update Dpick.Vorhld01*/
  else
    PKBREC.ZZZCHGCT = 0;
    PW0N643(); /* insert Dpick.Vorhld01*/
  end

   /* ----- Retrieve pool header, update order-hold-flag,*/
   /* ----- then update it)*/

  PW0NS10(); /* select unique pool header*/

  PK4REC.PK4ORHLD = "Y"; /* set order hold flag to yes*/

  PK4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PK4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW0NS11(); /* update pool header*/

  PW0NW01.PW0NWSWH[PW0NWIXM] = "Y"; /* set hold flag to yes*/
  PW0NW01.XHRCD[PW0NWIXM] = PW0NW00.XHRCD; /* save reason code*/
  PW0NW01.PW0NWRMM[PW0NWIXM] = PW0NW00.PW0NWHMM; /* save rlse month*/
  PW0NW01.PW0NWRDD[PW0NWIXM] = PW0NW00.PW0NWHDD; /* save rlse day*/
  PW0NW01.PW0NWRYY[PW0NWIXM] = PW0NW00.PW0NWHYY; /* save rlse year*/


end // end PW0N672

// Update t/s page
Function PW0NS01()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PW0NW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0NW00.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0NS01

// Read t/s page
Function PW0NS02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PW0NW01.XXXTSLEN = PW0NW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PW0NW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PW0NW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0NW00.XXXMODID = "S02"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0NS02

// Select unique Dpick.Vpoolh01
Function PW0NS10()
   /* ------------------------------------------------------------*/
   /* Select unique for Dpick.Vpoolh01*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* Clear row storage area*/

  PK4REC.XWHCD = PW0NW01.XWHCD; /* Warehouse code*/
  PK4REC.PK1CUOID = PW0NW01.PK1CUOID[PW0NWIXM]; /* Customer order number*/
  PK4REC.PK1NORID = PW0NW01.PK1NORID[PW0NWIXM]; /* Nike order number*/

  try
    call "IO1720" ("S ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, exit.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0NW00.XXXMODID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(29); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(28); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback changes*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0NS10

// Update Dpick.Vpoolh01
Function PW0NS11()
   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1720" ("U ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      PW0NW00.PW0NWSWR = "Y"; /* Request for data switch*/

      PW0NW00.XXXMODID = "S11"; /* Module identification*/
      PW0NW00.XXXMSGNO = 29; /* Data was updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0NW00.XXXMODID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0NS11

// Set cursor - Dpick.Vcahld01
Function PW0NS20()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table-Dpick.Vcahld01*/
   /* ------------------------------------------------------------*/

  set PWFREC empty; /* Row storage area*/

  PWFREC.XWHCD = PW0NW01.XWHCD; /* Warehouse code*/
  PWFREC.TF1CARCD = PK4REC.TF1CARCD; /* Carrier code*/

  try
    call "IO3190" ("S1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* okay too*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PW0NW00.XXXMODID = "S20"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0NS20

// Fetch next - Dpick.Vcahld01
Function PW0NS21()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("N1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0NW00.PW0NWSC2 = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0NW00.XXXMODID = "S21"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0NS21

// Close cursor - Dpick.Vcahld01
Function PW0NS22()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("C1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0NW00.XXXMODID = "S22"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0NS22

// Set cursor - Dpick.Vcahld01
Function PW0NS23()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table-Dpick.Vcahld01*/
   /* ------------------------------------------------------------*/

  set PWFREC empty; /* Row storage area*/

  PWFREC.XWHCD = PW0NW01.XWHCD; /* Warehouse code*/
  PWFREC.TF1CARCD = PK4REC.TF1CARCD; /* Carrier code*/
  PWFREC.XHRCD = PW0NW00.XHRCD; /* set hold reason code*/

  try
    call "IO3190" ("S ", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* okay too*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PW0NW00.XXXMODID = "S23"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0NS23

// Update Dpick.Vcahld01
Function PW0NS24()
   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("U ", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      PW0NW00.PW0NWSWR = "Y"; /* Request for data switch*/

      PW0NW00.XXXMODID = "S24"; /* Module identification*/
      PW0NW00.XXXMSGNO = 29; /* Data was updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0NW00.XXXMODID = "S24"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0NS24

// Insert carrier hold record
Function PW0NS25()
  set PWFREC empty;
  PWFREC.XWHCD = PW0NW01.XWHCD;
  PWFREC.TF1CARCD = PW0NW00.TF1CARCD;
  PWFREC.XHRCD = PW0NW00.XHRCD;
  PW0NW00.PW0NWNMM = PW0NW00.PW0NWHMM; /* move rlse date to convert*/
  PW0NW00.PW0NWNDD = PW0NW00.PW0NWHDD; /* move rlse day to convert*/
  PW0NW00.PW0NWNYY = PW0NW00.PW0NWHYY; /* move rlse year to convert*/
  if (PW0NW00.PW0NWHYY > 80) /* if year is greater than 80*/

    PW0NW00.PW0NWNCC = 19; /* set century to 19*/

  else

    PW0NW00.PW0NWNCC = 20; /* set century to 20*/

  end

   /* Move rlse date to appropriate date field in pwfrec*/

  if (PW0NW00.PW0NWRUN == " ") /* picking run mode*/

    PWFREC.PKBRELDT = PW0NW00.PW0NWNDT; /* Picking rlse date*/

  else

    PWFREC.PKBPLRDT = PW0NW00.PW0NWNDT; /* Plan picking rlse dt*/

  end

  PWFREC.XXXUSRID = COMMAREA.CAUSERID;
  PWFREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PWFREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  PWFREC.ZZZCHGCT = 0;

   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("A ", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0NW00.XXXMODID = "S25"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0NS25

// set cursor - Dpick.vorhld01
Function PW0NS30()
   /* ------------------------------------------------------------*/
   /* Set cursor - Dpick.Vorhld01*/
   /* ------------------------------------------------------------*/

  set PKBREC empty; /* Row storage area*/

  PKBREC.XWHCD = PW0NW01.XWHCD; /* Warehouse code*/
  PKBREC.PK1CUOID = PK4REC.PK1CUOID; /* Order number*/
  PKBREC.PK1NORID = PK4REC.PK1NORID; /* Nike order number*/

  try
    call "IO1770" ("S1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* okay too*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PW0NW00.XXXMODID = "S30"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0NS30

// Fetch next Dpick.Vorhld01
Function PW0NS31()
   /* ------------------------------------------------------------*/
   /* Fetch the next row and check rlrse dates-Dpick.Vorhld01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("N1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (PW0NW00.PW0NWRUN == " ") /* run mode is picking*/

        if (PKBREC.PKBRELDT > PW0NW00.PW0NWCDT) /* rlse date gt current dt*/

          PW0NW00.PW0NWSWP = "N";
          return;

        else
          return;
        end

      else

        if (PKBREC.PKBPLRDT > PW0NW00.PW0NWCDT) /* rlse date gt current dt*/

          PW0NW00.PW0NWSWP = "N";
          return;

        else
          return;
        end
      end

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      PW0NW00.PW0NWSC2 = "Y"; /* end of cursor switch*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PW0NW00.XXXMODID = "S31"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0NS31

// Close cursor - Dpick.Vorhld01
Function PW0NS32()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("C1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0NW00.XXXMODID = "S32"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0NS32

// Set cursor - Dpick.Vcuhld01
Function PW0NS40()
   /* ------------------------------------------------------------*/
   /* Set cursor - Dpick.Vorhld01*/
   /* ------------------------------------------------------------*/

  set PK9REC empty; /* Row storage area*/

  PK9REC.XWHCD = PW0NW01.XWHCD; /* Warehouse code*/
  PK9REC.KUCCOID = PK4REC.KUCCOID;
  PK9REC.KUMSTRID = PK4REC.KUMSTRID;
  PK9REC.XNXCD = PK4REC.XNXCD;

  try
    call "IO1790" ("S1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* okay too*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PW0NW00.XXXMODID = "S40"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0NS40

// Fetch next - Dpick.Vcuhld01
Function PW0NS41()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to check rlrse dates-Dpick.Vcuhld01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("N1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (PW0NW00.PW0NWRUN == " ") /* run mode is picking*/

        if (PK9REC.PK9RELDT > PW0NW00.PW0NWCDT) /* rlse date gt current dt*/

          PW0NW00.PW0NWSWP = "N";
          return;

        else
          return;
        end

      else

        if (PK9REC.PK9PLRDT > PW0NW00.PW0NWCDT) /* rlse date gt current dt*/

          PW0NW00.PW0NWSWP = "N";
          return;

        else
          return;
        end
      end

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      PW0NW00.PW0NWSC2 = "Y"; /* end of cursor*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0NW00.XXXMODID = "S41"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0NS41

// Close cursor - Dpick.Vcuhld01
Function PW0NS42()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("C1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0NW00.XXXMODID = "S42"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0NW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0NS42

//*** RECORD=PW0NW00 ****
// Working storage for PW0H
// ***********************
Record PW0NW00 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 PW0NWSWR PW0NWSWR ; 
  10 PW0NWSWA PW0NWSWA ; 
  10 PW0NWSWF PW0NWSWF ; 
  10 PW0NWSWU PW0NWSWU ; 
  10 PW0NWSWV PW0NWSWV ; 
  10 PW0NWCUR PW0NWCUR ; 
  10 PW0NWSWP PW0NWSWP ; 
  10 PW0NWSWC PW0NWSWC ; 
  10 PW0NWSC2 PW0NWSC2 ; 
  10 PW0NWRUN PW0NWRUN ; 
  10 PW0NWIXM PW0NWIXM ; 
  10 PW0NWIDX PW0NWIDX ; 
  10 PW0NWAIX PW0NWAIX ; 
  10 * char(1) ; 
  10 PW0NWCDT PW0NWCDT ; 
    15 PW0NWCCC PW0NWCCC ; 
    15 PW0NWEDT PW0NWEDT ; 
      20 PW0NWCYY PW0NWCYY ; 
      20 * num(4) ; 
  10 PW0NWNDT PW0NWNDT ; 
    15 PW0NWNCC PW0NWNCC ; 
    15 PW0NWNYY PW0NWNYY ; 
    15 PW0NWNMM PW0NWNMM ; 
    15 PW0NWNDD PW0NWNDD ; 
  10 XXXMODID XXXMODID ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 PW0NWNUM PW0NWNUM ; 
  10 PW0NWSHQ PW0NWSHQ ; 
  10 PW0NWSHF PW0NWSHF ; 
  10 PW0NWSHR PW0NWSHR ; 
  10 PW0NWNHF PW0NWNHF ; 
  10 PW0NWNHR PW0NWNHR ; 
  10 PW0NWDFC PW0NWDFC ; 
  10 PW0NWDRP PW0NWDRP ; 
  10 PW0NWTFC PW0NWTFC ; 
  10 PW0NWTRP PW0NWTRP ; 
  10 XHRCD XHRCD ; 
  10 PW0NWHMM PW0NWHMM ; 
  10 PW0NWHDD PW0NWHDD ; 
  10 PW0NWHYY PW0NWHYY ; 
  10 TF1CARCD TF1CARCD ; 
  10 TF1ABRV TF1ABRV ; 
  10 PKHPVSMM PKHPVSMM ; 
  10 XHDKEY XHDKEY ; 
    15 XHDCD XHDCD ; 
    15 XGPCD XGPCD ; 
end // end PW0NW00

//*** RECORD=PW0NW01 ****
// Map working storage for PW0HM001
// ***********************
Record PW0NW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(594) ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 XHDCD XHDCD ; 
    10 PW0NWDMM PW0NWDMM ; 
    10 PW0NWDDD PW0NWDDD ; 
    10 PW0NWDYY PW0NWDYY ; 
    10 PW0NWSEL PW0NWSEL ; 
    10 * char(57) [10] ; 
      15 PW0NWACT PW0NWACT ; 
      15 PK1CUOID PK1CUOID ; 
      15 PK1NORID PK1NORID ; 
      15 TF2DSTCD TF2DSTCD ; 
      15 PW0NWSHQ PW0NWSHQ ; 
      15 PW0NWSHF PW0NWSHF ; 
      15 PW0NWSHR PW0NWSHR ; 
      15 PW0NWNHF PW0NWNHF ; 
      15 PW0NWNHR PW0NWNHR ; 
      15 PK4SLIND PK4SLIND ; 
      15 XHRCD XHRCD ; 
      15 PW0NWRMM PW0NWRMM ; 
      15 PW0NWRDD PW0NWRDD ; 
      15 PW0NWRYY PW0NWRYY ; 
      15 PW0NWSWH PW0NWSWH ; 
end // end PW0NW01

// Action
DataItem PW0NWACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Array index
DataItem PW0NWAIX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current date CC
DataItem PW0NWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current date for comparison
DataItem PW0NWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current screen chgd
DataItem PW0NWCUR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current date YY
DataItem PW0NWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map DNSB date - DD
DataItem PW0NWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Detail full case qty
DataItem PW0NWDFC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map DNSB date - MM
DataItem PW0NWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Detail repack qty
DataItem PW0NWDRP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map DNSB date - YY
DataItem PW0NWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// EZEDTE date YYMMDD
DataItem PW0NWEDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold rlse date - DD
DataItem PW0NWHDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold rlse date - MM
DataItem PW0NWHMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold rlse date - YY
DataItem PW0NWHYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work index
DataItem PW0NWIDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Screen index
DataItem PW0NWIXM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Conversion date century
DataItem PW0NWNCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Conversion date day
DataItem PW0NWNDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Numeric field to convert date
DataItem PW0NWNDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Non-special handling-full case
DataItem PW0NWNHF num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Non-special handling-repack
DataItem PW0NWNHR num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Conversion date month
DataItem PW0NWNMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work number field
DataItem PW0NWNUM num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Conversion date year
DataItem PW0NWNYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Release date - day
DataItem PW0NWRDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Release date - month
DataItem PW0NWRMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Run mode
DataItem PW0NWRUN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Release date - year
DataItem PW0NWRYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor switch for Vpoolh01
DataItem PW0NWSC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection criteria
DataItem PW0NWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Special handling-full case
DataItem PW0NWSHF num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Special handling total qty
DataItem PW0NWSHQ num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Special handling-repack
DataItem PW0NWSHR num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of arrays switch
DataItem PW0NWSWA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor switch for Vphdit01
DataItem PW0NWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format screen switch
DataItem PW0NWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hold flag
DataItem PW0NWSWH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Okay to process switch
DataItem PW0NWSWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PW0NWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data chgd switch (all pgs)
DataItem PW0NWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Valid carrier switch
DataItem PW0NWSWV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Total full case qty
DataItem PW0NWTFC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total repack qty
DataItem PW0NWTRP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

