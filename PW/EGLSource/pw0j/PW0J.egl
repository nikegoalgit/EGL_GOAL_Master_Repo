package pw0j;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import gd00.GD00M;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PW0J ****
// This application allows users to select Special Handling
// quantities by Do Not Ship Before (DNSB) date.  The DNSB date
// range must be entered before the detail line data can be
// formatted.  Once the date range is entered, and verified,
// the map will display quantities sorted by DNSB.  The dates
// in the date range that are non-pack and hold dates will be
// qrouped into DNSB date of zeros (display as spaces).  The
// pack and hold dates will be broken out and displayed by DNSB
// date.  There will be a maximun of 10 pages displayed.
// 
// If the user selects quantities by DNSB date the quantity
// will not be selected by specific order numbers or spcl handl
// codes.  The user can select quantities by order by placing a
// 's' next to a specific DNSB date.  This will take the user
// to a different program where they can select specific orders
// for picking.  If the date is zero (non-pack and hold) the
// user will be transferred to 'PW0H' (special handling order
// selection).  If the date is a pack and hold date, the user
// will be transfered to 'PW0N' (pack and hold special handling
// order selection).
// 
// The user can also transfer out of this application by using
// one of the PF keys or fast-path information displayed at the
// bottom of the map.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      01/31/91  MKRAUS  New application.
//          04/18/91  jcarey  Changed the headings to take out
//                            the word 'prev' (previous).
//          10/21/91  shende  1. Allow access to whse '07'.
//                            2. Display division code in the
//                               header that cannot be modified
//                            3. Display data where orders are
//                               not b-grade or closeouts.
//          03/04/92  SHENDE  Add xbc-brand-code (xbccd) for
//                            March table changes.
//          04/23/92  SCLEME  Omit processing in-store promo.
//                            Move validation logic for B-grade
//                            Closeout to validation proc.
//          06/22/92  SHENDE  Table changes
//          07/08/92  SHENDE  Display brand cd as either a (*)
//                            or specific value.  Also, change
//                            division cd to allow (*).
//          08/02/93  RCREAM  Add a second map to Picking to be
//                            pink. Changed logic in all
//                            processes but J111,J121, J122,
//                            J130, J123, & J510.
//                            Also changed all SGRPS with map2
//                            logic. Added new processes: 200-
//                            conv-map1 & map2, 210-data-map1 &
//                            map2, 500-edit-map1 & map2, 530-
//                            date-map1 &map2.
//          10/12/93  kande1  rename new procs for standards
// Canada   10/25/95  PSTROE  Pick-up new version of XPPK003
// BASICS   04/15/97  PANDER  Do not include Basics orders -
//                            XOTCD = 'FV'.
// y2kfix   02/09/98  pharwo  y2k changes to pw0jmfyy, pw0jntyy
//                            on map001 & map002 and pw0j-53001
//                            ,pw0j-53002, pw0j600.
// *********************
Program PW0J type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK4REC PK4REC; // record
  PK5REC PK5REC; // record
  PK9REC PK9REC; // record
  PKBREC PKBREC; // record
  PKHREC PKHREC; // record
  PKWREC PKWREC; // record
  PW0JW00 PW0JW00; // record
  PW0JW01 PW0JW01; // record
  PW0JW02 PW0JW02; // record
  PWFREC PWFREC; // record
  PWIREC PWIREC; // record
  PWKREC PWKREC; // record
  PWMREC PWMREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use XOTTBL; // table
  use XDVTBL; // table
  use XBCTBL; // table
  use PW0JM.PW0JM001,  // forms
      PW0JM.PW0JM002
   {
    pfKeyEquate = no
  };
  use GD00M {
    helpGroup = yes,
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set PW0JM001 initial; /* M001 input/output*/
    set PW0JM002 initial; /* M001 input/output*/
    set PW0JW00 empty; /* Working storage*/
    set PW0JW01 empty; /* M001 display storage*/
    set PW0JW02 empty; /* Selected order array*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine*/
    set PK4REC empty; /* dpick.vpoolh01*/
    set PKHREC empty; /* dpick.vselor01*/
    set PWIREC empty; /* picking rec. to pass low/hi values*/
    set PWFREC empty; /* dpick.vcahld01*/
    set PWKREC empty; /* picking DNSB data array*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    PW0JW00.PW0JWSWF = "Y"; /* Format map switch*/
    PW0JW00.PW0JWSWR = "N"; /* Request for data switch*/
    PW0JW00.PW0JWSWQ = "N"; /* Quantities selected switch*/
    PW0JW00.PW0JWSWO = "N"; /* Request order inquiry switch*/
    PW0JW00.PW0JWSWP = "N"; /* Request pick and hold switch*/

     /* ------------------------------------------------------------*/
     /* check to see if authorized to access this application.*/
     /* ------------------------------------------------------------*/

    goto PW0J000; /* Converse security check*/

    PW0J000: PW0J000();
     /* ------------------------------------------------------------*/
     /* security check ok continue with main process to converse map*/
     /* ------------------------------------------------------------*/

    goto PW0J001;

    PW0J001: PW0J001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PW0J001; /* Converse the main process*/


  end // end main
end // end PW0J

// List the rows in the table
Function PW0J-10001()
   /* -----------------------------------------------------*/
   /* Note: Apply the same changes to pw0j-10002 also.*/
   /* -----------------------------------------------------*/

  PW0JW00.XX1 = 0; /* initialize index*/
  set PW0JW02 empty;
  PW0JW00.XX5 = 0; /* initialize index*/
  PW0JW01.XWHCD = PW0JM001.XWHCD; /* save key*/

   /* ------ obtain division code ----------------*/
  if (PW0JM001.XDVCD == " ")
    converseLib.validationFailed(393);
    set PW0JM001.XDVCD cursor, bold;
    PW0JW00.XXXMODID = "100"; /* Module identification*/
    exit stack;
  end

  PKWREC.XDVCD[1] = PW0JM001.XDVCD;

  if (PW0JM001.XDVCD != "*")
    XPPK004(); /* verify division code*/

    if (converseVar.validationMsgNum == 0)
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW0JW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end

      PW0JW01.XDVCD = PKWREC.XDVCD[1];
    else
      converseLib.validationFailed(393);
      set PW0JM001.XDVCD cursor, bold;
      PW0JW00.XXXMODID = "100"; /* Module identification*/
      exit stack;
    end
  else
    PW0JW01.XDVCD = PKWREC.XDVCD[1];
    PW0JW01.XDVDESC = "ALL DIVISIONS";
  end


   /* ------ obtain brand code -------------------*/
  if (PW0JM001.XBCCD == " ")
    converseLib.validationFailed(413);
    set PW0JM001.XBCCD cursor, bold;
    PW0JW00.XXXMODID = "100"; /* Module identification*/
    exit stack;
  end

  PKWREC.XBCCD[1] = PW0JM001.XBCCD;

  if (PW0JM001.XBCCD != "*")
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(414);
        set PW0JM001.XBCCD cursor, bold;
        PW0JW00.XXXMODID = "100";
        exit stack;
      else
        if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
          PW0JW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
        end
        PW0JW01.XBCCD = PKWREC.XBCCD[1];
      end
    else
      converseLib.validationFailed(413);
      set PW0JM001.XBCCD cursor, bold;
      PW0JW00.XXXMODID = "100";
      exit stack;
    end

  else
    PW0JW01.XBCCD = PKWREC.XBCCD[1];
    PW0JW01.XBCABRV = " ";
    PW0JW00.XXXMSGNO = 421;
  end


end // end PW0J-10001

// List the rows in the table
Function PW0J-10002()

   /* -------------------------------------------------------*/
   /* Note: Apply the same changes to pw0j-10001 also.*/
   /* -------------------------------------------------------*/
  PW0JW00.XX1 = 0; /* initialize index*/
  set PW0JW02 empty;
  PW0JW00.XX5 = 0; /* initialize index*/
  PW0JW01.XWHCD = PW0JM002.XWHCD; /* save key*/

   /* ------ obtain division code ----------------*/
  if (PW0JM002.XDVCD == " ")
    converseLib.validationFailed(393);
    set PW0JM002.XDVCD cursor, bold;
    PW0JW00.XXXMODID = "100"; /* Module identification*/
    exit stack;
  end

  PKWREC.XDVCD[1] = PW0JM002.XDVCD;

  if (PW0JM002.XDVCD != "*")
    XPPK004(); /* verify division code*/

    if (converseVar.validationMsgNum == 0)
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW0JW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end

      PW0JW01.XDVCD = PKWREC.XDVCD[1];
    else
      converseLib.validationFailed(393);
      set PW0JM002.XDVCD cursor, bold;
      PW0JW00.XXXMODID = "100"; /* Module identification*/
      exit stack;
    end
  else
    PW0JW01.XDVCD = PKWREC.XDVCD[1];
    PW0JW01.XDVDESC = "ALL DIVISIONS";
  end


   /* ------ obtain brand code -------------------*/
  if (PW0JM002.XBCCD == " ")
    converseLib.validationFailed(413);
    set PW0JM002.XBCCD cursor, bold;
    PW0JW00.XXXMODID = "100"; /* Module identification*/
    exit stack;
  end

  PKWREC.XBCCD[1] = PW0JM002.XBCCD;

  if (PW0JM002.XBCCD != "*")
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(414);
        set PW0JM002.XBCCD cursor, bold;
        PW0JW00.XXXMODID = "100";
        exit stack;
      else
        if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
          PW0JW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
        end
        PW0JW01.XBCCD = PKWREC.XBCCD[1];
      end
    else
      converseLib.validationFailed(413);
      set PW0JM002.XBCCD cursor, bold;
      PW0JW00.XXXMODID = "100";
      exit stack;
    end

  else
    PW0JW01.XBCCD = PKWREC.XBCCD[1];
    PW0JW01.XBCABRV = " ";
    PW0JW00.XXXMSGNO = 421;
  end


end // end PW0J-10002

// Format and converse the map
Function PW0J-20001()

   /* ------------------------------------------------------------*/
   /* Note: Apply the same changes to pw0j-20002 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW0JM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PW0JM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW0JM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PW0JW00.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PW0JW00.XXXMSGNO != 0) /* Message to display*/

      if (PW0JW00.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PW0JW00.XXXMSGNO);
      end /* Message nunber*/
    else
      PW0JM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end


    set PW0JM001 alarm; /* Indicate sound alarm*/

  end

  PW0JM001.XXXMODID = PW0JW00.XXXMODID; /* Module identification*/

  converse PW0JM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW0JW00.XXXMODID = " "; /* Module identification*/
  PW0JW00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PW0JM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW0JM001.CAITEM; /* Application data*/


end // end PW0J-20001

// Format and converse the map
Function PW0J-20002()
   /* ------------------------------------------------------------*/
   /* Note: Apply the same changes to pw0j-20001 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW0JM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PW0JM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW0JM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PW0JW00.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PW0JW00.XXXMSGNO != 0) /* Message to display*/

      if (PW0JW00.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PW0JW00.XXXMSGNO);
      end /* Message nunber*/
    else
      PW0JM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    set PW0JM002 alarm; /* Indicate sound alarm*/

  end

  PW0JM002.XXXMODID = PW0JW00.XXXMODID; /* Module identification*/

  converse PW0JM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW0JW00.XXXMODID = " "; /* Module identification*/
  PW0JW00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PW0JM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW0JM002.CAITEM; /* Application data*/


end // end PW0J-20002

// Format the display data
Function PW0J-21001()
   /* ------------------------------------------------------------*/
   /* Note: Apply the same changes to pw0j-21002 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW0JM001 initial; /* M001 input/output area*/

  PW0JW00.PW0JWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW0JW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW0JW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW0JW00.XXXTSPAG > PW0JW00.TA5TSQIX) /* Desired greater highest*/
        PW0JW00.XXXTSPAG = PW0JW00.TA5TSQIX; /* Default to highest*/
      end

      PW0JW00.PW0JWIXM = PW0JW00.XXXTSPAG * 10; /* set end of page*/
      PW0JW00.PW0JWIXM = PW0JW00.PW0JWIXM - 9; /* set start of page*/

    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    set PW0JM001.XXXLITPG skip;
    PW0JM001.XXXLITPG = "PAGE";
    set PW0JM001.XXXLITOF skip;
    PW0JM001.XXXLITOF = "OF";
    PW0JM001.XXXTSPAG = PW0JW00.XXXTSPAG; /* Current page*/
    PW0JM001.TA5TSQIX = PW0JW00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  PW0JM001.XWHCD = PW0JW01.XWHCD; /* warehouse cd*/
  PW0JM001.XWHABRV = PW0JW01.XWHABRV; /* warehouse abrv*/
  PW0JM001.XBCCD = PW0JW01.XBCCD; /* brand code*/
  PW0JM001.XBCABRV = PW0JW01.XBCABRV; /* brand abrv*/
  PW0JM001.XDVCD = PW0JW01.XDVCD; /* division code*/
  PW0JM001.XDVDESC = PW0JW01.XDVDESC; /* division desc*/
  PW0JM001.PW0JMFMM = PW0JW01.PW0JWFMM; /* from month*/
  PW0JM001.PW0JMFDD = PW0JW01.PW0JWFDD; /* from day*/
  PW0JM001.PW0JMFYY = PW0JW01.PW0JWFYY; /* from year*/
  PW0JM001.PW0JMTMM = PW0JW01.PW0JWTMM; /* to month*/
  PW0JM001.PW0JMTDD = PW0JW01.PW0JWTDD; /* to day*/
  PW0JM001.PW0JMTYY = PW0JW01.PW0JWTYY; /* to year*/

  if (PW0JW02.PW0JWCT2 > 0)
    PW0JW00.XX1 = 1;

    while (PW0JW00.XX1 <= 10) /* Until screen is full*/
      if (PW0JW00.PW0JWIXM <= PW0JW02.PW0JWCT2) /* or idx > cnt of rows*/

        PW0JM001.OP1DSBDT[XX1] = PW0JW02.OP1DSBDT[PW0JWIXM];
        PW0JM001.PW0JMSHF[XX1] = PW0JW02.PW0JWSHF[PW0JWIXM];
        PW0JM001.PW0JMSHR[XX1] = PW0JW02.PW0JWSHR[PW0JWIXM];
        PW0JM001.PW0JMNHF[XX1] = PW0JW02.PW0JWNHF[PW0JWIXM];
        PW0JM001.PW0JMNHR[XX1] = PW0JW02.PW0JWNHR[PW0JWIXM];

        /* ---------------------------------------------------------*/
        /* Divide minutes by 60 to get hours and minutes*/
        /* ---------------------------------------------------------*/
        PW0JW00.PW0JWHHH = PW0JW02.PW0JWHRW[PW0JWIXM] / 60;
        PW0JW00.PW0JWHMM = PW0JW02.PW0JWHRW[PW0JWIXM] % 60;

        if (PW0JW00.PW0JWHHH == 0
         && PW0JW00.PW0JWHMM == 0)
          PW0JM001.PW0JMHRW[XX1] = " ";
        else
          PW0JM001.PW0JMHRW[XX1] = PW0JW00.PW0JWHWK;
        end

        /* ---------------------------------------------------------*/
        /* Divide minutes by 60 to get hours and minutes*/
        /* ---------------------------------------------------------*/
        PW0JM001.PW0JMSTD[XX1] = PW0JW02.PW0JWSTD[PW0JWIXM];
        PW0JM001.PW0JMSQT[XX1] = PW0JW02.PW0JWSQT[PW0JWIXM];
        PW0JW00.PW0JWHHH = PW0JW02.PW0JWHRS[PW0JWIXM] / 60;
        PW0JW00.PW0JWHMM = PW0JW02.PW0JWHRS[PW0JWIXM] % 60;

        if (PW0JW00.PW0JWHHH == 0
         && PW0JW00.PW0JWHMM == 0)
          PW0JM001.PW0JMHRS[XX1] = " ";
        else
          PW0JM001.PW0JMHRS[XX1] = PW0JW00.PW0JWHWK;
        end

        PW0JW00.XX1 = PW0JW00.XX1 + 1;
        PW0JW00.PW0JWIXM = PW0JW00.PW0JWIXM + 1; /* Increment line index*/
      else
        PW0JW00.XX1 = 11;

      end
    end
  end


end // end PW0J-21001

// Format the display data
Function PW0J-21002()
   /* ------------------------------------------------------------*/
   /* Note: Apply the same changes to pw0j-21001 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW0JM002 initial; /* M002 input/output area*/

  PW0JW00.PW0JWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW0JW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW0JW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW0JW00.XXXTSPAG > PW0JW00.TA5TSQIX) /* Desired greater highest*/
        PW0JW00.XXXTSPAG = PW0JW00.TA5TSQIX; /* Default to highest*/
      end

      PW0JW00.PW0JWIXM = PW0JW00.XXXTSPAG * 10; /* set end of page*/
      PW0JW00.PW0JWIXM = PW0JW00.PW0JWIXM - 9; /* set start of page*/

    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    set PW0JM002.XXXLITPG skip;
    PW0JM002.XXXLITPG = "PAGE";
    set PW0JM002.XXXLITOF skip;
    PW0JM002.XXXLITOF = "OF";
    PW0JM002.XXXTSPAG = PW0JW00.XXXTSPAG; /* Current page*/
    PW0JM002.TA5TSQIX = PW0JW00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  PW0JM002.XWHCD = PW0JW01.XWHCD; /* warehouse cd*/
  PW0JM002.XWHABRV = PW0JW01.XWHABRV; /* warehouse abrv*/
  PW0JM002.XBCCD = PW0JW01.XBCCD; /* brand code*/
  PW0JM002.XBCABRV = PW0JW01.XBCABRV; /* brand abrv*/
  PW0JM002.XDVCD = PW0JW01.XDVCD; /* division code*/
  PW0JM002.XDVDESC = PW0JW01.XDVDESC; /* division desc*/
  PW0JM002.PW0JMFMM = PW0JW01.PW0JWFMM; /* from month*/
  PW0JM002.PW0JMFDD = PW0JW01.PW0JWFDD; /* from day*/
  PW0JM002.PW0JMFYY = PW0JW01.PW0JWFYY; /* from year*/
  PW0JM002.PW0JMTMM = PW0JW01.PW0JWTMM; /* to month*/
  PW0JM002.PW0JMTDD = PW0JW01.PW0JWTDD; /* to day*/
  PW0JM002.PW0JMTYY = PW0JW01.PW0JWTYY; /* to year*/

  if (PW0JW02.PW0JWCT2 > 0)
    PW0JW00.XX1 = 1;

    while (PW0JW00.XX1 <= 10) /* Until screen is full*/
      if (PW0JW00.PW0JWIXM <= PW0JW02.PW0JWCT2) /* or idx > cnt of rows*/

        PW0JM002.OP1DSBDT[XX1] = PW0JW02.OP1DSBDT[PW0JWIXM];
        PW0JM002.PW0JMSHF[XX1] = PW0JW02.PW0JWSHF[PW0JWIXM];
        PW0JM002.PW0JMSHR[XX1] = PW0JW02.PW0JWSHR[PW0JWIXM];
        PW0JM002.PW0JMNHF[XX1] = PW0JW02.PW0JWNHF[PW0JWIXM];
        PW0JM002.PW0JMNHR[XX1] = PW0JW02.PW0JWNHR[PW0JWIXM];

        /* ---------------------------------------------------------*/
        /* Divide minutes by 60 to get hours and minutes*/
        /* ---------------------------------------------------------*/
        PW0JW00.PW0JWHHH = PW0JW02.PW0JWHRW[PW0JWIXM] / 60;
        PW0JW00.PW0JWHMM = PW0JW02.PW0JWHRW[PW0JWIXM] % 60;

        if (PW0JW00.PW0JWHHH == 0
         && PW0JW00.PW0JWHMM == 0)
          PW0JM002.PW0JMHRW[XX1] = " ";
        else
          PW0JM002.PW0JMHRW[XX1] = PW0JW00.PW0JWHWK;
        end

        /* ---------------------------------------------------------*/
        /* Divide minutes by 60 to get hours and minutes*/
        /* ---------------------------------------------------------*/
        PW0JM002.PW0JMSTD[XX1] = PW0JW02.PW0JWSTD[PW0JWIXM];
        PW0JM002.PW0JMSQT[XX1] = PW0JW02.PW0JWSQT[PW0JWIXM];
        PW0JW00.PW0JWHHH = PW0JW02.PW0JWHRS[PW0JWIXM] / 60;
        PW0JW00.PW0JWHMM = PW0JW02.PW0JWHRS[PW0JWIXM] % 60;

        if (PW0JW00.PW0JWHHH == 0
         && PW0JW00.PW0JWHMM == 0)
          PW0JM002.PW0JMHRS[XX1] = " ";
        else
          PW0JM002.PW0JMHRS[XX1] = PW0JW00.PW0JWHWK;
        end

        PW0JW00.XX1 = PW0JW00.XX1 + 1;
        PW0JW00.PW0JWIXM = PW0JW00.PW0JWIXM + 1; /* Increment line index*/
      else
        PW0JW00.XX1 = 11;

      end
    end
  end


end // end PW0J-21002

// Verify data that was entered
Function PW0J-50001()
   /* ------------------------------------------------------------*/
   /* Note: Apply the same changes to pw0j-50002 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PW0JM001.CAITEM > " ") /* Application data was entered*/

    PW0JW00.XXXMODID = "500"; /* Module identification*/
    set PW0JM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(1); /* Invalid FAST PATH option*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PW0J510(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Verify dates if entered*/
   /* ------------------------------------------------------------*/

  PW0J-53001();

   /* ---------------------------------------------------------------*/
   /* Verify division code entered (either (*) or character is valid)*/
   /* ---------------------------------------------------------------*/

  if (PW0JM001.XDVCD != PW0JW01.XDVCD)

    PW0JW00.PW0JWSWR = "Y"; /* request data switch*/
    if (PW0JM001.XDVCD == " ")
      converseLib.validationFailed(393);
      set PW0JM001.XDVCD cursor, bold;
      PW0JW00.XXXMODID = "500"; /* Module identification*/
      exit stack;
    end
  end

  PKWREC.XDVCD[1] = PW0JM001.XDVCD;

  if (PW0JM001.XDVCD != "*")
    XPPK004();

    if (converseVar.validationMsgNum == 0)
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW0JW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end

      PW0JW01.XDVCD = PKWREC.XDVCD[1];
    else
      converseLib.validationFailed(393);
      set PW0JM001.XDVCD cursor, bold;
      PW0JW00.XXXMODID = "500"; /* Module identification*/
      exit stack;
    end
  else
    PW0JW01.XDVCD = PKWREC.XDVCD[1];
    PW0JW01.XDVDESC = "ALL DIVISIONS";
  end


   /* ------------------------------------------------------------*/
   /* Verify brand code entered*/
   /* ------------------------------------------------------------*/

   /* ------- check if brand has changed ------------------------*/
  if (PW0JM001.XBCCD != PW0JW01.XBCCD)
    PW0JW00.PW0JWSWR = "Y"; /* request data switch*/
    if (PW0JM001.XBCCD == " ")
      converseLib.validationFailed(413);
      set PW0JM001.XBCCD cursor, bold;
      PW0JW00.XXXMODID = "500"; /* Module identification*/
      exit stack;
    end
  end

  PKWREC.XBCCD[1] = PW0JM001.XBCCD;

   /* ------- check if brand is valid ---------------------------*/
  if (PW0JM001.XBCCD != "*")

    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(414);
        set PW0JM001.XBCCD cursor, bold;
        PW0JW00.XXXMODID = "500"; /* Module identification*/
        exit stack;
      else
        if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
          PW0JW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
        end
        PW0JW01.XBCCD = PKWREC.XBCCD[1];
      end
    else
      converseLib.validationFailed(413);
      set PW0JM001.XBCCD cursor, bold;
      PW0JW00.XXXMODID = "500"; /* Module identification*/
      exit stack;
    end

  else
    PW0JW01.XBCCD = PKWREC.XBCCD[1];
    PW0JW01.XBCABRV = " ";
    PW0JW00.XXXMSGNO = 421;
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end PW0J-50001

// Verify data that was entered
Function PW0J-50002()
   /* ------------------------------------------------------------*/
   /* Note: Apply the same changes to pw0j-50001 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PW0JM002.CAITEM > " ") /* Application data was entered*/

    PW0JW00.XXXMODID = "500"; /* Module identification*/
    set PW0JM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(1); /* Invalid FAST PATH option*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PW0J510(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Verify dates if entered*/
   /* ------------------------------------------------------------*/

  PW0J-53002();

   /* ---------------------------------------------------------------*/
   /* Verify division code entered (either (*) or character is valid)*/
   /* ---------------------------------------------------------------*/

  if (PW0JM002.XDVCD != PW0JW01.XDVCD)

    PW0JW00.PW0JWSWR = "Y"; /* request data switch*/
    if (PW0JM002.XDVCD == " ")
      converseLib.validationFailed(393);
      set PW0JM002.XDVCD cursor, bold;
      PW0JW00.XXXMODID = "500"; /* Module identification*/
      exit stack;
    end
  end

  PKWREC.XDVCD[1] = PW0JM002.XDVCD;

  if (PW0JM002.XDVCD != "*")
    XPPK004();

    if (converseVar.validationMsgNum == 0)
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW0JW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end

      PW0JW01.XDVCD = PKWREC.XDVCD[1];
    else
      converseLib.validationFailed(393);
      set PW0JM002.XDVCD cursor, bold;
      PW0JW00.XXXMODID = "500"; /* Module identification*/
      exit stack;
    end
  else
    PW0JW01.XDVCD = PKWREC.XDVCD[1];
    PW0JW01.XDVDESC = "ALL DIVISIONS";
  end


   /* ------------------------------------------------------------*/
   /* Verify brand code entered*/
   /* ------------------------------------------------------------*/

   /* ------- check if brand has changed ------------------------*/
  if (PW0JM002.XBCCD != PW0JW01.XBCCD)
    PW0JW00.PW0JWSWR = "Y"; /* request data switch*/
    if (PW0JM002.XBCCD == " ")
      converseLib.validationFailed(413);
      set PW0JM002.XBCCD cursor, bold;
      PW0JW00.XXXMODID = "500"; /* Module identification*/
      exit stack;
    end
  end

  PKWREC.XBCCD[1] = PW0JM002.XBCCD;

   /* ------- check if brand is valid ---------------------------*/
  if (PW0JM002.XBCCD != "*")

    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(414);
        set PW0JM002.XBCCD cursor, bold;
        PW0JW00.XXXMODID = "500"; /* Module identification*/
        exit stack;
      else
        if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
          PW0JW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
        end
        PW0JW01.XBCCD = PKWREC.XBCCD[1];
      end
    else
      converseLib.validationFailed(413);
      set PW0JM002.XBCCD cursor, bold;
      PW0JW00.XXXMODID = "500"; /* Module identification*/
      exit stack;
    end

  else
    PW0JW01.XBCCD = PKWREC.XBCCD[1];
    PW0JW01.XBCABRV = " ";
    PW0JW00.XXXMSGNO = 421;
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end PW0J-50002

// verify dates entered
Function PW0J-53001()
   /* -----------------------------------------------------------*/
   /* Note: Apply the same changes to pw0j-53002 alsp.*/
   /* -----------------------------------------------------------*/
   /* -----------------------------------------------------------*/
   /* verify dates*/
   /* -----------------------------------------------------------*/

   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* IF PW0JM001.PW0JMTMM EQ 0        /* check 'to' date range*/
   /* OR PW0JM001.PW0JMTDD EQ 0*/
   /* OR PW0JM001.PW0JMTYY EQ 0;*/
   /* ;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (PW0JM001.PW0JMTMM == 0 /* check 'to' date range*/
   || PW0JM001.PW0JMTDD == 0)

    /*  */
    /* ------------------------  Y2K IN END  --------------------------*/
    converseLib.validationFailed(158);
    PW0JW00.XXXMODID = "530";
    set PW0JM001.PW0JMTMM cursor, bold;
    set PW0JM001.PW0JMTDD bold;
    set PW0JM001.PW0JMTYY bold;
    exit stack;
  end

   /* -----------------------------------------------------------*/
   /* check for changes to the TO and FROM dates*/
   /* -----------------------------------------------------------*/

  if (PW0JM001.PW0JMTMM != PW0JW01.PW0JWTMM
   || PW0JM001.PW0JMTDD != PW0JW01.PW0JWTDD
   || PW0JM001.PW0JMTYY != PW0JW01.PW0JWTYY
   || PW0JM001.PW0JMFMM != PW0JW01.PW0JWFMM
   || PW0JM001.PW0JMFDD != PW0JW01.PW0JWFDD
   || PW0JM001.PW0JMFYY != PW0JW01.PW0JWFYY)

    PW0JW00.PW0JWSWR = "Y"; /* request data switch*/

    /* -------------------------------------------------------------*/
    /* convert TO date to yyyymmdd*/
    /* -------------------------------------------------------------*/

    XX0XW01.XX0XWMM = PW0JM001.PW0JMTMM;
    XX0XW01.XX0XWDD = PW0JM001.PW0JMTDD;
    XX0XW01.XX0XWYY = PW0JM001.PW0JMTYY;

    if (XX0XW01.XX0XWYY > 70)
      XX0XW01.XX0XW19 = 19;
    else
      XX0XW01.XX0XW19 = 20;
    end

    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = XX0XW01.XX0XWDAT;

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      PW0JW00.PW0JWEDT = TA2REC.TA2GRGGN;
      PW0JW01.PW0JWTDT = TA2REC.TA2GRGGN;
    else
      set PW0JM001.PW0JMTMM cursor, bold;
      set PW0JM001.PW0JMTDD bold;
      set PW0JM001.PW0JMTYY bold;
      PW0JW00.XXXMODID = "530";
      converseLib.validationFailed(158); /* invalid date*/
      exit stack;
    end

    /* ----------------------------------------------------------------*/
    /* convert from date to yyyymmdd*/
    /* ----------------------------------------------------------------*/

    /* -----------------------  Y2K OUT BEGIN  ------------------------*/
    /*  */
    /* IF PW0JM001.PW0JMFMM GT 0      /* check 'to' date range*/
    /* OR PW0JM001.PW0JMFDD GT 0*/
    /* OR PW0JM001.PW0JMFYY GT 0;*/
    /* ;*/
    /*  */
    /* ------------------------  Y2K OUT END  -------------------------*/
    /* -----------------------  Y2K IN BEGIN  -------------------------*/
    /*  */
    if (PW0JM001.PW0JMFMM > 0 /* check 'to' date range*/
     || PW0JM001.PW0JMFDD > 0)

      /*  */
      /* ------------------------  Y2K IN END  --------------------------*/
      XX0XW01.XX0XWMM = PW0JM001.PW0JMFMM;
      XX0XW01.XX0XWDD = PW0JM001.PW0JMFDD;
      XX0XW01.XX0XWYY = PW0JM001.PW0JMFYY;

      if (XX0XW01.XX0XWYY > 70)
        XX0XW01.XX0XW19 = 19;
      else
        XX0XW01.XX0XW19 = 20;
      end

      set TA2REC empty;
      TA2REC.TA2DTOPT = "GREGGREG";
      TA2REC.TA2GRTYP = "G";
      TA2REC.TA2GRGGN = XX0XW01.XX0XWDAT;

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

      if (TA2REC.TA2RTNCD == 0)
        PW0JW00.PW0JWSDT = TA2REC.TA2GRGGN;
        PW0JW01.PW0JWFDT = TA2REC.TA2GRGGN;
      else
        set PW0JM001.PW0JMFMM cursor, bold;
        set PW0JM001.PW0JMFDD bold;
        set PW0JM001.PW0JMFYY bold;
        PW0JW00.XXXMODID = "530";
        converseLib.validationFailed(158); /* invalid date*/
        exit stack;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* check if TO date is less than FROM date*/
   /* ------------------------------------------------------------*/

  if (PW0JW00.PW0JWEDT < PW0JW00.PW0JWSDT) /* to less than from date*/
    set PW0JM001.PW0JMTMM cursor, bold;
    set PW0JM001.PW0JMTDD bold;
    set PW0JM001.PW0JMTYY bold;
    PW0JW00.XXXMODID = "530";
    converseLib.validationFailed(286); /* invalid date*/
    exit stack;
  end


end // end PW0J-53001

// verify dates entered
Function PW0J-53002()
   /* -----------------------------------------------------------*/
   /* Note: Apply the same changes to pw0j-53001 also.*/
   /* -----------------------------------------------------------*/
   /* -----------------------------------------------------------*/
   /* verify dates*/
   /* -----------------------------------------------------------*/

   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* IF PW0JM002.PW0JMTMM EQ 0        /* check 'to' date range*/
   /* OR PW0JM002.PW0JMTDD EQ 0*/
   /* OR PW0JM002.PW0JMTYY EQ 0;*/
   /* ;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (PW0JM002.PW0JMTMM == 0 /* check 'to' date range*/
   || PW0JM002.PW0JMTDD == 0)

    /*  */
    /* ------------------------  Y2K IN END  --------------------------*/
    converseLib.validationFailed(158);
    PW0JW00.XXXMODID = "530";
    set PW0JM002.PW0JMTMM cursor, bold;
    set PW0JM002.PW0JMTDD bold;
    set PW0JM002.PW0JMTYY bold;
    exit stack;
  end

   /* -----------------------------------------------------------*/
   /* check for changes to the TO and FROM dates*/
   /* -----------------------------------------------------------*/

  if (PW0JM002.PW0JMTMM != PW0JW01.PW0JWTMM
   || PW0JM002.PW0JMTDD != PW0JW01.PW0JWTDD
   || PW0JM002.PW0JMTYY != PW0JW01.PW0JWTYY
   || PW0JM002.PW0JMFMM != PW0JW01.PW0JWFMM
   || PW0JM002.PW0JMFDD != PW0JW01.PW0JWFDD
   || PW0JM002.PW0JMFYY != PW0JW01.PW0JWFYY)

    PW0JW00.PW0JWSWR = "Y"; /* request data switch*/

    /* -------------------------------------------------------------*/
    /* convert TO date to yyyymmdd*/
    /* -------------------------------------------------------------*/

    XX0XW01.XX0XWMM = PW0JM002.PW0JMTMM;
    XX0XW01.XX0XWDD = PW0JM002.PW0JMTDD;
    XX0XW01.XX0XWYY = PW0JM002.PW0JMTYY;

    if (XX0XW01.XX0XWYY > 70)
      XX0XW01.XX0XW19 = 19;
    else
      XX0XW01.XX0XW19 = 20;
    end

    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = XX0XW01.XX0XWDAT;

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      PW0JW00.PW0JWEDT = TA2REC.TA2GRGGN;
      PW0JW01.PW0JWTDT = TA2REC.TA2GRGGN;
    else
      set PW0JM002.PW0JMTMM cursor, bold;
      set PW0JM002.PW0JMTDD bold;
      set PW0JM002.PW0JMTYY bold;
      PW0JW00.XXXMODID = "530";
      converseLib.validationFailed(158); /* invalid date*/
      exit stack;
    end

    /* ----------------------------------------------------------------*/
    /* convert from date to yyyymmdd*/
    /* ----------------------------------------------------------------*/

    /* -----------------------  Y2K OUT BEGIN  ------------------------*/
    /*  */
    /* IF PW0JM002.PW0JMFMM GT 0      /* check 'to' date range*/
    /* OR PW0JM002.PW0JMFDD GT 0*/
    /* OR PW0JM002.PW0JMFYY GT 0;*/
    /* ;*/
    /*  */
    /* ------------------------  Y2K OUT END  -------------------------*/
    /* -----------------------  Y2K IN BEGIN  -------------------------*/
    /*  */
    if (PW0JM002.PW0JMFMM > 0 /* check 'to' date range*/
     || PW0JM002.PW0JMFDD > 0)

      /*  */
      /* ------------------------  Y2K IN END  --------------------------*/
      XX0XW01.XX0XWMM = PW0JM002.PW0JMFMM;
      XX0XW01.XX0XWDD = PW0JM002.PW0JMFDD;
      XX0XW01.XX0XWYY = PW0JM002.PW0JMFYY;

      if (XX0XW01.XX0XWYY > 70)
        XX0XW01.XX0XW19 = 19;
      else
        XX0XW01.XX0XW19 = 20;
      end

      set TA2REC empty;
      TA2REC.TA2DTOPT = "GREGGREG";
      TA2REC.TA2GRTYP = "G";
      TA2REC.TA2GRGGN = XX0XW01.XX0XWDAT;

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

      if (TA2REC.TA2RTNCD == 0)
        PW0JW00.PW0JWSDT = TA2REC.TA2GRGGN;
        PW0JW01.PW0JWFDT = TA2REC.TA2GRGGN;
      else
        set PW0JM002.PW0JMFMM cursor, bold;
        set PW0JM002.PW0JMFDD bold;
        set PW0JM002.PW0JMFYY bold;
        PW0JW00.XXXMODID = "530";
        converseLib.validationFailed(158); /* invalid date*/
        exit stack;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* check if TO date is less than FROM date*/
   /* ------------------------------------------------------------*/

  if (PW0JW00.PW0JWEDT < PW0JW00.PW0JWSDT) /* to less than from date*/
    set PW0JM002.PW0JMTMM cursor, bold;
    set PW0JM002.PW0JMTDD bold;
    set PW0JM002.PW0JMTYY bold;
    PW0JW00.XXXMODID = "530";
    converseLib.validationFailed(286); /* invalid date*/
    exit stack;
  end


end // end PW0J-53002

// security check
Function PW0J000()
   /* ------------------------------------------------------------*/
   /* See if from approved application*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "PW0J"
   || COMMAREA.CAFROMAP == "PW0M"
   || COMMAREA.CAFROMAP == "PW0N"
   || COMMAREA.CAFROMAP == "PW0P"
   || COMMAREA.CAFROMAP == "PW0R"
   || COMMAREA.CAFROMAP == "PW0V"
   || COMMAREA.CAFROMAP == "PW0W"
   || COMMAREA.CAFROMAP == "PW0X"
   || COMMAREA.CAFROMAP == "GD00")

    PKWREC.PKWFRMAP = COMMAREA.CACURRAP; /* save curr application*/

  else

    COMMAREA.CATOAPP = COMMAREA.CAFROMAP;
    XSNOWAY(); /* invalid app id for this app.*/
  end /* exit back to calling pgm*/
   /* -------- verfify warehouse ----------------------------------*/
  XPPK003();

   /* -------- verfify division code ------------------------------*/
  if (PKWREC.XDVCD[1] != "*")
    XPPK004(); /* verify division code*/

    if (converseVar.validationMsgNum == 0)
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW0JW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
        PW0JM001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
        PW0JM002.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end

      PW0JW01.XDVCD = PKWREC.XDVCD[1];
      PW0JM001.XDVCD = PKWREC.XDVCD[1];
      PW0JM002.XDVCD = PKWREC.XDVCD[1];
    end
  else
    PW0JW01.XDVDESC = "ALL DIVISIONS";
    PW0JM001.XDVDESC = "ALL DIVISIONS";
    PW0JM002.XDVDESC = "ALL DIVISIONS";
    PW0JW01.XDVCD = PKWREC.XDVCD[1];
    PW0JM001.XDVCD = PKWREC.XDVCD[1];
    PW0JM002.XDVCD = PKWREC.XDVCD[1];
  end

   /* -------- verfify brand code ---------------------------------*/
  if (PKWREC.XBCCD[1] != "*")
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(414);
        set PW0JM001.XBCCD cursor, bold;
        set PW0JM002.XBCCD cursor, bold;
        PW0JW00.XXXMODID = "000";
        exit stack;
      end
    else
      converseLib.validationFailed(413);
      set PW0JM001.XBCCD cursor, bold;
      set PW0JM002.XBCCD cursor, bold;
      PW0JW00.XXXMODID = "000";
      exit stack;
    end

    if (converseVar.validationMsgNum == 0)
      if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
        PW0JW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
        PW0JM001.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
        PW0JM002.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
      end
      PW0JW01.XBCCD = PKWREC.XBCCD[1];
      PW0JM001.XBCCD = PKWREC.XBCCD[1];
      PW0JM002.XBCCD = PKWREC.XBCCD[1];
    end
  else
    PW0JW00.XXXMSGNO = 421;
    PW0JW01.XBCABRV = " ";
    PW0JM001.XBCABRV = " ";
    PW0JM002.XBCABRV = " ";
    PW0JW01.XBCCD = PKWREC.XBCCD[1];
    PW0JM001.XBCCD = PKWREC.XBCCD[1];
    PW0JM002.XBCCD = PKWREC.XBCCD[1];
  end


  if (COMMAREA.CAFROMAP == "PW0V")
    PKWREC.PKWSELSW = "PK";
    PW0JW00.PW0JWRMD = " ";
  else
    if (COMMAREA.CAFROMAP == "PW0W")
      PKWREC.PKWSELSW = "PP";
      PW0JW00.PW0JWRMD = "P";
    end
  end

  if (PKWREC.PKWSELSW != "PK"
   && PKWREC.PKWSELSW != "PP")

    PKWREC.PKWSELSW = "PK"; /* default to picking*/
    PW0JW00.PW0JWRMD = " ";
  end
   /* ------------------------------------------------------------*/
   /* Initializations first time through*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Determine minimum pack and hold date*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK")
    TA2REC.TA2DYAOD = TA2REC.TA2DYAOD + 2; /* days to add*/
  else
    if (PKWREC.PKWSELSW == "PP")
      TA2REC.TA2DYAOD = TA2REC.TA2DYAOD + 3; /* days to add*/
    end
  end

  XX0XS01(); /* set current date and time*/
  PW0JW00.PW0JWCUD = XX0XW01.XX0XWDAT;

  TA2REC.TA2DTOPT = "GETDATE";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGEN = XX0XW01.XX0XWDAT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    PW0JW00.PW0JWPHD = TA2REC.TA2GRGGN;
  else
    PW0JW00.XXXMODID = "001";
    converseLib.validationFailed(158); /* invalid date*/
  end

  PW0JW00.PW0JWHCL = ":";


  PW0JW01.PW0JWFDT = PKWREC.PKWFRMDT[1]; /* from date*/
  PW0JW01.PW0JWTDT = PKWREC.PKWTODT[1]; /* to date*/

   /* ----- format "from" century --------*/
  if (PW0JW01.PW0JWFDT != 0)
    if (PW0JW01.PW0JWFYY > 50
     && PW0JW01.PW0JWFYY <= 99)

      PW0JW01.PW0JWFCC = 19;
    else
      PW0JW01.PW0JWFCC = 20;
    end
  end

   /* ----- format "to" century ----------*/
  if (PW0JW01.PW0JWTDT != 0)
    if (PW0JW01.PW0JWTYY > 50
     && PW0JW01.PW0JWTYY <= 99)

      PW0JW01.PW0JWTCC = 19;
    else
      PW0JW01.PW0JWTCC = 20;
    end
  end

  if (PW0JW01.PW0JWFCC == 19 /* from century*/
   || PW0JW01.PW0JWFCC == 20 
   || PW0JW01.PW0JWFCC == 0)

    if (PW0JW01.PW0JWTCC == 19 /* from century*/
     || PW0JW01.PW0JWTCC == 20)

      PW0JW00.PW0JWSWR = "Y"; /* request for data*/

    end
  end

  if (PW0JW00.PW0JWSWR != "Y") /* Not a good passed date*/

    PKWREC.PKWFRMDT = 0; /* Reinit pkwrec*/
    PKWREC.PKWTODT = 0; /* Reinit pkwrec*/
    PW0JW01.PW0JWFDT = 0; /* Reinit from date*/
    PW0JW01.PW0JWTDT = 0; /* Reinit to date*/

  end

  PW0JW00.XWHCD = PKWREC.XWHCD;
  PW0JW01.XWHCD = PKWREC.XWHCD;
  PW0JW01.XWHABRV = PKWREC.XWHABRV;
  PW0JM001.XWHCD = PKWREC.XWHCD;
  PW0JM002.XWHCD = PKWREC.XWHCD;
  PW0JM001.XWHABRV = PKWREC.XWHABRV;
  PW0JM002.XWHABRV = PKWREC.XWHABRV;


end // end PW0J000

// Main process to display a map
Function PW0J001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW0J100(); /* Obtain the data to display*/

  PW0J200(); /* Format and display the map*/

  PW0J300(); /* Check attention identifier*/

  PW0J400(); /* Reset fields to normal intensity*/

  PW0J500(); /* Verify the entered data*/

  PW0J600(); /* Process valid input request*/


end // end PW0J001

// List the rows in the table
Function PW0J100()

   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process*/
   /* ------------------------------------------------------------*/

  if (PW0JW00.PW0JWSWR != "Y" /* if no data to display*/
   || converseVar.validationMsgNum != 0) /* or message to display*/
    return; /* return to previous process*/
  end

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW0J-10002();
  else
    PW0J-10001(); /* planning*/
  end

   /* ------------------------------------------------------------*/
   /* Process selected by order.*/
   /* ------------------------------------------------------------*/

  PW0J110(); /* Process selected by order*/

   /* ------------------------------------------------------------*/
   /* Process selected by quantity*/
   /* ------------------------------------------------------------*/

  PW0J120(); /* Process selected by quantity*/

   /* ------------------------------------------------------------*/
   /* Process non-selected quantity*/
   /* ------------------------------------------------------------*/

  PW0J130(); /* Process selected by quantity*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* else calculate number of pages for display*/
   /* ------------------------------------------------------------*/

  if (PW0JW02.PW0JWCT2 == 0)
    PW0JW00.TA5TSQIX = 0;
    PW0JW00.XXXMODID = "100"; /* Module identification*/
    converseLib.validationFailed(8); /* No data was found to display*/
    return; /* Return to previous process*/
  else
    PW0JW00.XXXTSPAG = 1;
    PW0JW00.TA5TSQIX = PW0JW02.PW0JWCT2 / 10;
    ZZAMT = PW0JW00.TA5TSQIX * 10;
    if (ZZAMT != PW0JW02.PW0JWCT2)
      PW0JW00.TA5TSQIX = PW0JW00.TA5TSQIX + 1;
    end
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW0JW00.PW0JWSWR = "N"; /* Request for data switch*/


end // end PW0J100

// Process Select by Order
Function PW0J110()
   /* ------------------------------------------------------------*/
   /* Process selected by order.*/
   /* ------------------------------------------------------------*/
   /* Init - Select set on DPICK.VSERLOR01 table*/
   /* ------------------------------------------------------------*/
  PW0JW00.PW0JWEOO = "N"; /* not end of cursor*/
  PW0JS01(); /* Select set*/
  PW0JS02(); /* Fetch cursor*/

  while (PW0JW00.PW0JWEOO != "Y") /* until end of cursor*/
    if (PKHREC.OP1DSBDT > PW0JW01.PW0JWTDT)
      PW0JW00.PW0JWEOO = "Y"; /* indicate end of cursor*/
    else
      if (PKHREC.PK-SEL-TYP-CD < "10")
        if (PKHREC.PK-SEL-TYP-CD == " 5") /* special handling*/
          PW0J111(); /* check holds/process status*/

          if (PW0JW00.PW0JWSWH == "N") /* no holds/okay to process*/
            PW0J112(); /* check index setting*/

            PW0JW02.OP1DSBDT[XX1] = PKHREC.OP1DSBDT;
            PW0JWHRS[XX1] = PW0JWHRS[XX1] + PKHREC.PKHPVSMM;
            PW0JWSTD[XX1] = PW0JWSTD[XX1] + PKHREC.PKHPVSFC;
            PW0JWSTD[XX1] = PW0JWSTD[XX1] + PKHREC.PKHPVSRP;
          end
        end
        /* ---------------------------------------------------*/
        /* Fetch next cursor*/
        /* ---------------------------------------------------*/
        PW0JS02(); /* Fetch next cursor*/
      else
        PW0JS02();
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* Close select order cursor.*/
   /* ------------------------------------------------------------*/
  if (SQLCA.VAGen_SQLCODE != -911)
    PW0JS14(); /* Close cursor*/
  end


end // end PW0J110

// Check holds and process status
Function PW0J111()
   /* ------------------------------------------------------------*/
   /* Do not process holds or colehann*/
   /* ------------------------------------------------------------*/
  PW0JW00.PW0JWSWH = "N"; /* set hold switch to 'n'*/

  if (PKHREC.OP1DSBDT < PW0JW01.PW0JWFDT /* LT start date*/
   && PKHREC.OP1DSBDT > PW0JW01.PW0JWTDT) /* GT end date*/

    PW0JW00.PW0JWSWH = "Y"; /* do not process*/
  end

  if (PW0JW01.XBCCD == "*" /* ColeHaan*/
   && PKHREC.XBCCD == "08")

    PW0JW00.PW0JWSWH = "Y"; /* do not process*/
  end

  if (PKHREC.TF1CARCD != " ")
    /* ------------------------------------------------------------*/
    /* Check carrier for hold status.*/
    /* ------------------------------------------------------------*/
    set PWFREC empty; /* clear rec and move keys*/
    PWFREC.XWHCD = PKHREC.XWHCD;
    PWFREC.TF1CARCD = PKHREC.TF1CARCD;

    PW0JS03(); /* select set dpick.vcahld01*/

    if (SQLCA.VAGen_SQLCODE == 0)
      PW0JS04(); /* fetch next dpick.vcahld01*/
      while (SQLCA.VAGen_SQLCODE == 0
       && PW0JW00.PW0JWSWH == "N")
        if (PW0JW00.PW0JWCUD < PWFREC.PKBRELDT)
          PW0JW00.PW0JWSWH = "Y"; /* set hold switch to 'y'*/
        end
        PW0JS04(); /* fetch next dpick.vcahld01*/
      end
    end

    if (SQLCA.VAGen_SQLCODE != -911)
      PW0JS05(); /* close set dpick.vcahld01*/
    end

    if (PW0JW00.PW0JWSWH == "Y") /* if hold found*/
      return; /* return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Check customer for hold status.*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* clear rec and move keys*/
  PK4REC.XWHCD = PKHREC.XWHCD;
  PK4REC.PK1CUOID = PKHREC.PK1CUOID;
  PK4REC.PK1NORID = PKHREC.PK1NORID;
  PW0JS06(); /* select unique dpick.vpoolh01*/

  set PK9REC empty; /* clear rec and move keys*/
  PK9REC.XWHCD = PK4REC.XWHCD;
  PK9REC.KUCCOID = PK4REC.KUCCOID;
  PK9REC.KUMSTRID = PK4REC.KUMSTRID;
  PK9REC.XNXCD = PK4REC.XNXCD;
  PW0JS08(); /* select set dpick.vcuhld01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    PW0JS09(); /* fetch next dpick.vcuhld01*/
    while (SQLCA.VAGen_SQLCODE == 0
     && PW0JW00.PW0JWSWH == "N")
      if (PW0JW00.PW0JWCUD <= PK9REC.PK9RELDT)
        PW0JW00.PW0JWSWH = "N";
      end
      PW0JS09(); /* fetch next dpick.vcuhld01*/
    end
  end

  if (SQLCA.VAGen_SQLCODE != -911)
    PW0JS10(); /* close set dpick.vcuhld01*/
  end

  if (PW0JW00.PW0JWSWH == "Y") /* if hold found/do not process*/
    return; /* return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Check order for hold status.*/
   /* ------------------------------------------------------------*/

  set PKBREC empty; /* clear rec and move keys*/
  PKBREC.XWHCD = PKHREC.XWHCD;
  PKBREC.PK1CUOID = PKHREC.PK1CUOID;
  PKBREC.PK1NORID = PKHREC.PK1NORID;

  PW0JS11(); /* select set dpick.vorhld01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    PW0JS12(); /* fetch next dpick.vorhld01*/
    while (SQLCA.VAGen_SQLCODE == 0
     && PW0JW00.PW0JWSWH == "N")
      if (PW0JW00.PW0JWCUD <= PKBREC.PKBRELDT)
        PW0JW00.PW0JWSWH = "N";
      end
      PW0JS12(); /* fetch next dpick.vorhld01*/
    end
  end

  if (SQLCA.VAGen_SQLCODE != -911)
    PW0JS13(); /* close set dpick.vorhld01*/
  end

end // end PW0J111

// Set the new array position
Function PW0J112()
  if (PW0JW02.PW0JWCT2 == 0)
    sysVar.arrayIndex = 0;
  else
    if (PKHREC.OP1DSBDT in PW0JW02.OP1DSBDT from 1)
      PW0JW00.XX1 = sysVar.arrayIndex;
    end

    if (PKHREC.OP1DSBDT == 0
     && sysVar.arrayIndex != 1)
      sysVar.arrayIndex = 0;
    end

  end

  if (sysVar.arrayIndex == 0)
     /* find out where it belongs and put it there.*/
    if (PW0JW02.PW0JWCT2 == 0
     || PKHREC.OP1DSBDT > PW0JW02.OP1DSBDT[PW0JWCT2])
      PW0JW02.PW0JWCT2 = PW0JW02.PW0JWCT2 + 1;
      PW0JW00.XX1 = PW0JW02.PW0JWCT2;
    else
      PW0JW00.XX2 = 1;
      while (PW0JW00.XX2 <= PW0JW02.PW0JWCT2)
        if (PKHREC.OP1DSBDT < PW0JW02.OP1DSBDT[XX2])
           /* this is where it belongs - move the rest down and*/
           /* set the index to this position.*/
          PW0JW00.XX1 = PW0JW00.XX2; /* save it*/
          if (PW0JW02.PW0JWCT2 <= 220)
            PW0JW02.PW0JWCT2 = PW0JW02.PW0JWCT2 + 1;
          end
          PW0JW00.XX3 = PW0JW02.PW0JWCT2;
          while (PW0JW00.XX3 > PW0JW00.XX2)
            PW0JW00.XX4 = PW0JW00.XX3 - 1;
            PW0JW02.PW0JWGR2[XX3] = PW0JW02.PW0JWGR2[XX4];
            PW0JW00.XX3 = PW0JW00.XX3 - 1;
          end
          PW0JW00.XX2 = PW0JW02.PW0JWCT2;
          PW0JW02.PW0JWSEL[XX1] = " ";
          PW0JW02.PW0JWSHF[XX1] = 0;
          PW0JW02.PW0JWSHR[XX1] = 0;
          PW0JW02.PW0JWNHF[XX1] = 0;
          PW0JW02.PW0JWNHR[XX1] = 0;
          PW0JW02.PW0JWHRW[XX1] = 0;
          PW0JW02.PW0JWSTD[XX1] = 0;
          PW0JW02.PW0JWSQT[XX1] = 0;
          PW0JW02.PW0JWHRS[XX1] = 0;
        end
        PW0JW00.XX2 = PW0JW00.XX2 + 1;
      end
    end
  end
end // end PW0J112

// Process selected by quantity
Function PW0J120()
   /* ------------------------------------------------------------*/
   /* Process selected by quantity.*/
   /* Init - Select set on DPICK.VSELQT01 table*/
   /* ------------------------------------------------------------*/

  PW0JW00.XX1 = 1; /* init index*/
  PW0JW00.XX5 = 1;
  PW0JW00.PW0JWEOO = "N"; /* set no eof*/
  PW0JS21(); /* Select set*/
  PW0JS22(); /* Fetch first row*/

   /* ------------------------------------------------------------*/
   /* Process quantities until PW0JW00.PW0JWEOO EQ 'Y'*/
   /* ------------------------------------------------------------*/

  while (PW0JW00.PW0JWEOO != "Y") /* until end of file*/

    if (PWMREC.OP1DSBDT > PW0JW01.PW0JWTDT)
      PW0JW00.PW0JWEOO = "Y"; /* end of wanted data*/

    else
      if (PWMREC.PK-SEL-TYP-CD < "10")

        PW0J121(); /* check holds and process status*/
        /* -----------------------------------------------------*/
        /* If no holds and okay to process*/
        /* -----------------------------------------------------*/
        if (PW0JW00.PW0JWSWH == "N") /* okay to process*/
          if (PWMREC.PK-SEL-TYP-CD == " 1" /* special handling*/
           || PWMREC.PK-SEL-TYP-CD == " 3") /* special handling*/

            PW0JW00.OP1DSBDT = PWMREC.OP1DSBDT;
            PW0J122(); /* set ix1*/
            PW0JW02.OP1DSBDT[XX1] = PW0JW00.OP1DSBDT;

            if (PWMREC.PK-SEL-TYP-CD != " 1") /* spcl handl sel by ord*/
              PW0JWSTD[XX1] = PW0JWSTD[XX1] + PWMREC.PKHPVSFC;
              PW0JWSTD[XX1] = PW0JWSTD[XX1] + PWMREC.PKHPVSRP;
             /* PW0JWHRW(XX1) = PW0JWHRW(XX1) + PWMREC.PKHPVSMM;*/
              PW0JWHRS[XX1] = PW0JWHRS[XX1] + PWMREC.PKHPVSMM;
            else
              PW0JWSQT[XX1] = PW0JWSQT[XX1] + PWMREC.PKHPVSFC;
              PW0JWSQT[XX1] = PW0JWSQT[XX1] + PWMREC.PKHPVSRP;
              PW0JWHRS[XX1] = PW0JWHRS[XX1] + PWMREC.PKHPVSMM;
            end
          end
        end
        /* ---------------------------------------------------*/
        /* Fetch next select quantity cursor.*/
        /* ---------------------------------------------------*/
        PW0JS22(); /* Fetch next cursor*/
      else
        PW0JS22(); /* Fetch next cursor*/
      end
    end
  end
   /* ---------------------------------------------------------*/
   /* Close select order cursor.*/
   /* ---------------------------------------------------------*/
  PW0JS23(); /* Close cursor*/

end // end PW0J120

// Check holds and process status
Function PW0J121()
   /* ------------------------------------------------------------*/
   /* Check for holds, in-store promo, and ColeHaan*/
   /* ------------------------------------------------------------*/

  PW0JW00.PW0JWSWH = "N"; /* set hold switch to 'n'*/

  if (PWMREC.OP1DSBDT < PW0JW01.PW0JWFDT
   && PWMREC.OP1DSBDT > PW0JW01.PW0JWTDT)

    PW0JW00.PW0JWSWH = "Y"; /* do not process*/
  end

  if (PW0JW01.XBCCD == "*" /* ColeHaan*/
   && PWMREC.XBCCD == "08")

    PW0JW00.PW0JWSWH = "Y"; /* do not process*/
  end

  if (PWMREC.XDVCD == "01" /* In-store promo*/
   && PWMREC.XGPCD == "01")

    PW0JW00.PW0JWSWH = "Y"; /* do not process*/
  end

  if (PWFREC.TF1CARCD != " ")
    /* ------------------------------------------------------------*/
    /* Check carrier for hold status.*/
    /* ------------------------------------------------------------*/

    set PWMREC empty; /* clear rec and move key.*/
    PWFREC.XWHCD = PWMREC.XWHCD;
    PWFREC.TF1CARCD = PWMREC.TF1CARCD;

    PW0JS03(); /* select set dpick.vcahld01*/

    if (SQLCA.VAGen_SQLCODE == 0)
      PW0JS04(); /* fetch next dpick.vcahld01*/
      while (SQLCA.VAGen_SQLCODE == 0
       && PW0JW00.PW0JWSWH == "N")
        if (PW0JW00.PW0JWCUD < PWFREC.PKBRELDT)
          PW0JW00.PW0JWSWH = "Y"; /* set hold switch to 'y'*/
        end
        PW0JS04(); /* fetch next dpick.vcahld01*/
      end
    end

    if (SQLCA.VAGen_SQLCODE != -911)
      PW0JS05(); /* close set dpick.vcahld01*/
    end

  end
end // end PW0J121

// Increment Index and save
Function PW0J122()
  if (PW0JW02.PW0JWCT2 == 0)
    sysVar.arrayIndex = 0;
  else
    if (PW0JW00.OP1DSBDT in PW0JW02.OP1DSBDT from 1)
      PW0JW00.XX1 = sysVar.arrayIndex;
    end

    if (PW0JW00.OP1DSBDT == 0
     && sysVar.arrayIndex != 1)
      sysVar.arrayIndex = 0;
    end

  end

  if (sysVar.arrayIndex == 0)
     /* find out where it belongs and put it there.*/
    if (PW0JW02.PW0JWCT2 == 0
     || PW0JW00.OP1DSBDT > PW0JW02.OP1DSBDT[PW0JWCT2])
      PW0JW02.PW0JWCT2 = PW0JW02.PW0JWCT2 + 1;
      PW0JW00.XX1 = PW0JW02.PW0JWCT2;
    else
      PW0JW00.XX2 = 1;
      while (PW0JW00.XX2 <= PW0JW02.PW0JWCT2)
        if (PW0JW00.OP1DSBDT < PW0JW02.OP1DSBDT[XX2])
           /* this is where it belongs - move the rest down and*/
           /* set the index to this position.*/
          PW0JW00.XX1 = PW0JW00.XX2; /* save it*/
          if (PW0JW02.PW0JWCT2 <= 220)
            PW0JW02.PW0JWCT2 = PW0JW02.PW0JWCT2 + 1;
          end
          PW0JW00.XX3 = PW0JW02.PW0JWCT2;
          while (PW0JW00.XX3 > PW0JW00.XX2)
            PW0JW00.XX4 = PW0JW00.XX3 - 1;
            PW0JW02.PW0JWGR2[XX3] = PW0JW02.PW0JWGR2[XX4];
            PW0JW00.XX3 = PW0JW00.XX3 - 1;
          end
          PW0JW00.XX2 = PW0JW02.PW0JWCT2;
          PW0JW02.PW0JWSEL[XX1] = " ";
          PW0JW02.PW0JWSHF[XX1] = 0;
          PW0JW02.PW0JWSHR[XX1] = 0;
          PW0JW02.PW0JWNHF[XX1] = 0;
          PW0JW02.PW0JWNHR[XX1] = 0;
          PW0JW02.PW0JWHRW[XX1] = 0;
          PW0JW02.PW0JWSTD[XX1] = 0;
          PW0JW02.PW0JWSQT[XX1] = 0;
          PW0JW02.PW0JWHRS[XX1] = 0;
        end
        PW0JW00.XX2 = PW0JW00.XX2 + 1;
      end
    end
  end
end // end PW0J122

// Process non-selected quantity
Function PW0J130()
   /* ------------------------------------------------------------*/
   /* Process non-selected quantities.*/
   /* Select set on pool table*/
   /* ------------------------------------------------------------*/

  PW0JW00.PW0JWEOO = "N"; /* not end of cursor*/
  XX1 = 0;

  PW0JS31(); /* Select set*/
  PW0JS32(); /* Fetch cursor*/

  while (PW0JW00.PW0JWEOO != "Y") /* until end of cursor*/

    if (PK4REC.OP1DSBDT > PW0JW01.PW0JWTDT)
      PW0JW00.PW0JWEOO = "Y";

    else
      if (PK4REC.OP1DSBDT >= PW0JW01.PW0JWFDT /* or ge start date*/
       && PK4REC.OP1DSBDT <= PW0JW01.PW0JWTDT) /* AND le to date*/

        PW0J131(); /* check if process*/

        if (PW0JW00.PW0JWSWH == "N") /* process order*/

          PW0J132(); /* set ix1*/

          PW0JW02.OP1DSBDT[XX1] = PK4REC.OP1DSBDT;
          PW0J133(); /* open cursor in DPICK.VPOOLI01*/
          PW0JW00.PW0JWEPI = "N";

          while (PW0JW00.PW0JWEPI == "N") /* not end of cursor*/
            PW0J134(); /* fetch row in DPICK.POOLI01*/
            if (PW0JW00.PW0JWEPI == "N") /* not end*/
              if (PK4REC.PK4SLIND == "S")
                if (PK5REC.XHDCD != " ") /* special handling*/
                  PW0JWSTD[XX1] = PW0JWSTD[XX1] + PK5REC.PK5ITMFC;
                  PW0JWSTD[XX1] = PW0JWSTD[XX1] + PK5REC.PK5ITMRP;
                  PW0JWHRS[XX1] = PW0JWHRS[XX1] + PK5REC.PK5ITMTM;
                end
              else
                if (PK5REC.XHDCD != " ") /* special handling*/
                  PW0JWSHF[XX1] = PW0JWSHF[XX1] + PK5REC.PK5ITMFC;
                  PW0JWSHR[XX1] = PW0JWSHR[XX1] + PK5REC.PK5ITMRP;
                  PW0JWHRW[XX1] = PW0JWHRW[XX1] + PK5REC.PK5ITMTM;
                else
                  PW0JWNHF[XX1] = PW0JWNHF[XX1] + PK5REC.PK5ITMFC;
                  PW0JWNHR[XX1] = PW0JWNHR[XX1] + PK5REC.PK5ITMRP;
                end
              end
            end
          end
          PW0J135(); /* close cursor in DPICK.VPOOLI01*/
        end
      end
    end
    PW0JS32(); /* Fetch next cursor*/
  end


   /* ------------------------------------------------------------*/
   /* Close select order cursor.*/
   /* ------------------------------------------------------------*/
  if (SQLCA.VAGen_SQLCODE != -911)
    PW0JS33(); /* Close cursor*/
  end

end // end PW0J130

// Validate process
Function PW0J131()
  PW0JW00.PW0JWSWH = "N"; /* set hold switch to 'n'*/

   /* --------------------------------------------------------*/
   /* In-store promo*/
   /* --------------------------------------------------------*/
  if (PK4REC.XGPCD == "01"
   && PK4REC.XDVCD == "01")

    PW0JW00.PW0JWSWH = "Y"; /* do not process*/
  end

   /* --------------------------------------------------------*/
   /* Basics order*/
   /* --------------------------------------------------------*/
  if (PK4REC.XOTCD == "FV")

    PW0JW00.PW0JWSWH = "Y"; /* do not process*/
  end

   /* --------------------------------------------------------*/
   /* ColeHaan*/
   /* --------------------------------------------------------*/
  if (PW0JW01.XBCCD == "*"
   && PK4REC.XBCCD == "08")

    PW0JW00.PW0JWSWH = "Y"; /* do not process*/
  end

   /* --------------------------------------------------------*/
   /* B-grade and Closeouts*/
   /* --------------------------------------------------------*/
  XPPK005();

  if (PKWREC.PKW-ORDER-TYP-IND == "B" /* b-grade*/
   || PKWREC.PKW-ORDER-TYP-IND == "C") /* closeout*/

    PW0JW00.PW0JWSWH = "Y"; /* do not process*/
  end

   /* --------------------------------------------------------*/
   /* proper run mode and sel indicator*/
   /* --------------------------------------------------------*/
  if (PW0JW00.PW0JWRMD == "P") /* run mode is pick planning*/
    if (PK4REC.PK4SLIND == "S"
     || PK4REC.PK4SLIND == "P"
     || PK4REC.PK4SLIND == " ")
      /* next sentence*/
    else
      PW0JW00.PW0JWSWH = "Y";
      return;
    end
  end

  if (PW0JW00.PW0JWRMD == " ") /* run mode is picking selection*/
    if (PK4REC.PK4SLIND == "S"
     || PK4REC.PK4SLIND == " ")
      /* next sentence*/
    else
      PW0JW00.PW0JWSWH = "Y";
      return;
    end
  end

  if (PK4REC.TF1CARCD != " ")
    /* ------------------------------------------------------------*/
     /* Check carrier for hold status.*/
    /* ------------------------------------------------------------*/
    set PWFREC empty; /* clear rec and move keys*/
    PWFREC.XWHCD = PK4REC.XWHCD;
    PWFREC.TF1CARCD = PK4REC.TF1CARCD;

    PW0JS03(); /* select set dpick.vcahld01*/

    if (SQLCA.VAGen_SQLCODE == 0)
      PW0JS04(); /* fetch next dpick.vcahld01*/
      while (SQLCA.VAGen_SQLCODE == 0
       && PW0JW00.PW0JWSWH == "N")

        if (PW0JW00.PW0JWRMD == " ") /* picking mode*/
          if (PWFREC.PKBRELDT > PW0JW00.PW0JWCUD)
            PW0JW00.PW0JWSWH = "Y";
          end
        end

        if (PW0JW00.PW0JWRMD == "P") /* planning mode*/
          if (PWFREC.PKBPLRDT > PW0JW00.PW0JWCUD)
            PW0JW00.PW0JWSWH = "Y";
          end
        end

        PW0JS04(); /* fetch next dpick.vcahld01*/
      end
    end

    if (SQLCA.VAGen_SQLCODE != -911)
      PW0JS05(); /* close set dpick.vcahld01*/
    end

    if (PW0JW00.PW0JWSWH == "Y") /* if hold found*/
      return; /* return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Check customer for hold status.*/
   /* ------------------------------------------------------------*/


  set PK9REC empty; /* clear rec and move keys*/
  PK9REC.XWHCD = PK4REC.XWHCD;
  PK9REC.KUCCOID = PK4REC.KUCCOID;
  PK9REC.KUMSTRID = PK4REC.KUMSTRID;
  PK9REC.XNXCD = PK4REC.XNXCD;
  PW0JS08(); /* select set dpick.vcuhld01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    PW0JS09(); /* fetch next dpick.vcuhld01*/
    while (SQLCA.VAGen_SQLCODE == 0
     && PW0JW00.PW0JWSWH == "N")

      if (PW0JW00.PW0JWRMD == " ") /* picking mode*/
        if (PK9REC.PK9RELDT > PW0JW00.PW0JWCUD)
          PW0JW00.PW0JWSWH = "Y"; /* reject*/
        end
      end

      if (PW0JW00.PW0JWRMD == "P") /* planning mode*/
        if (PK9REC.PK9PLRDT > PW0JW00.PW0JWCUD)
          PW0JW00.PW0JWSWH = "Y"; /* reject*/
        end
      end

      PW0JS09(); /* fetch next dpick.vcuhld01*/
    end
  end

  if (SQLCA.VAGen_SQLCODE != -911)
    PW0JS10(); /* close set dpick.vcuhld01*/
  end

  if (PW0JW00.PW0JWSWH == "Y") /* if hold found*/
    return; /* return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Check order for hold status.*/
   /* ------------------------------------------------------------*/

  set PKBREC empty; /* clear rec and move keys*/
  PKBREC.XWHCD = PK4REC.XWHCD;
  PKBREC.PK1CUOID = PK4REC.PK1CUOID;
  PKBREC.PK1NORID = PK4REC.PK1NORID;

  PW0JS11(); /* select set dpick.vorhld01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    PW0JS12(); /* fetch next dpick.vorhld01*/
    while (SQLCA.VAGen_SQLCODE == 0
     && PW0JW00.PW0JWSWH == "N")

      if (PW0JW00.PW0JWRMD == " ") /* picking mode*/
        if (PKBREC.PKBRELDT > PW0JW00.PW0JWCUD)
          PW0JW00.PW0JWSWH = "Y";
        end
      end

      if (PW0JW00.PW0JWRMD == "P") /* planning mode*/
        if (PKBREC.PKBPLRDT > PW0JW00.PW0JWCUD)
          PW0JW00.PW0JWSWH = "Y";
        end
      end

      PW0JS12(); /* fetch next dpick.vorhld01*/
    end
  end

  if (SQLCA.VAGen_SQLCODE != -911)
    PW0JS13(); /* close set dpick.vorhld01*/
  end

end // end PW0J131

// Increment Index and save
Function PW0J132()
  if (PW0JW02.PW0JWCT2 == 0)
    sysVar.arrayIndex = 0;
  else
    if (PK4REC.OP1DSBDT in PW0JW02.OP1DSBDT from 1)
      PW0JW00.XX1 = sysVar.arrayIndex;
    end

    if (PK4REC.OP1DSBDT == 0
     && sysVar.arrayIndex != 1)
      sysVar.arrayIndex = 0;
    end

  end

  if (sysVar.arrayIndex == 0)
     /* find out where it belongs and put it there.*/
    if (PW0JW02.PW0JWCT2 == 0
     || PK4REC.OP1DSBDT > PW0JW02.OP1DSBDT[PW0JWCT2])
      PW0JW02.PW0JWCT2 = PW0JW02.PW0JWCT2 + 1;
      PW0JW00.XX1 = PW0JW02.PW0JWCT2;
    else
      PW0JW00.XX2 = 1;
      while (PW0JW00.XX2 <= PW0JW02.PW0JWCT2)
        if (PK4REC.OP1DSBDT < PW0JW02.OP1DSBDT[XX2])
           /* this is where it belongs - move the rest down and*/
           /* set the index to this position.*/
          PW0JW00.XX1 = PW0JW00.XX2; /* save it*/
          if (PW0JW02.PW0JWCT2 <= 221)
            PW0JW02.PW0JWCT2 = PW0JW02.PW0JWCT2 + 1;
          end
          PW0JW00.XX3 = PW0JW02.PW0JWCT2;
          while (PW0JW00.XX3 > PW0JW00.XX2)
            PW0JW00.XX4 = PW0JW00.XX3 - 1;
            PW0JW02.PW0JWGR2[XX3] = PW0JW02.PW0JWGR2[XX4];
            PW0JW00.XX3 = PW0JW00.XX3 - 1;
          end
          PW0JW00.XX2 = PW0JW02.PW0JWCT2;
          PW0JW02.PW0JWSEL[XX1] = " ";
          PW0JW02.PW0JWSHF[XX1] = 0;
          PW0JW02.PW0JWSHR[XX1] = 0;
          PW0JW02.PW0JWNHF[XX1] = 0;
          PW0JW02.PW0JWNHR[XX1] = 0;
          PW0JW02.PW0JWHRW[XX1] = 0;
          PW0JW02.PW0JWSTD[XX1] = 0;
          PW0JW02.PW0JWSQT[XX1] = 0;
          PW0JW02.PW0JWHRS[XX1] = 0;
        end
        PW0JW00.XX2 = PW0JW00.XX2 + 1;
      end
    end
  end
end // end PW0J132

// Select set DPICK.VPOOLI01
Function PW0J133()
   /* ------------------------------------------------------------*/
   /* Select set on DPICK.VPOOLI01*/
   /* ------------------------------------------------------------*/

  set PK5REC empty; /* Clear row storage area*/
  PK5REC.XWHCD = PW0JW01.XWHCD; /* warehouse*/
  PK5REC.PK1CUOID = PK4REC.PK1CUOID; /* order number*/
  PK5REC.PK1NORID = PK4REC.PK1NORID;

  try
    call "IO1990" ("S1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0JW00.XXXMODID = "S31"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "PW0J"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK5REC.PK5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0J133

// Fetch next DPICK.VPOOLI01
Function PW0J134()
   /* ------------------------------------------------------------*/
   /* fetch next DPICK.VPOOLI01*/
   /* ------------------------------------------------------------*/


  try
    call "IO1990" ("N1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* end of set*/
      PW0JW00.PW0JWEPI = "Y"; /* set eof flag*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0JW00.XXXMODID = "134"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "PW0J"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK5REC.PK5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0J134

// close  set DPICK.VPOOLI01
Function PW0J135()
   /* ------------------------------------------------------------*/
   /* Close  set DPICK.VPOOLI01*/
   /* ------------------------------------------------------------*/


  try
    call "IO1990" ("C1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0JW00.XXXMODID = "135"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "PW0J"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE  SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK5REC.PK5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0J135

// Format and converse the map
Function PW0J200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PW0JW00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PW0JW00.PW0JWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PW0JW00.PW0JWSWF == "Y") /* Map must be formatted*/
      if (PKWREC.PKWSELSW == "PK") /* picking*/
        PW0J-21002(); /* Format the data on map2*/
      else
        PW0J-21001(); /* Format the data on map1*/
      end
    end

  end

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW0J-20002();
  else
    PW0J-20001(); /* pick planning*/
  end

end // end PW0J200

// Check attention identifier
Function PW0J300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PW0JW00.PW0JWSWR == "Y") /* Request for data*/
      set PW0JW01 empty; /* M001 display storage*/
    end

    PW0JW00.PW0JWSWF = "Y"; /* Format the map switch*/
    PW0JW00.PW0JWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested - invalid fast-path option.*/
   /* ------------------------------------------------------------*/

  if (PW0JM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      if (PW0JM001.CATOAP == "PW0J") /* same appl*/
        PW0JW00.XXXMODID = "300"; /* Module identification*/
        converseLib.validationFailed(1); /* Invalid Fast Path option*/
      else
        XSPKS01(); /* Exit to another application*/
        set PW0JM001.CATOAP cursor, bold; /* Highlight*/
      end
    else
      PW0JW00.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(13); /* Invalid Fast Path option*/
    end
    exit stack; /* Exit to display map*/
  else
    if (PW0JM002.CATOAP > " ") /* FAST PATH was requested*/
      if (converseVar.eventKey is enter) /* ENTER was pressed*/
        if (PW0JM002.CATOAP == "PW0J") /* same appl*/
          PW0JW00.XXXMODID = "300"; /* Module identification*/
          converseLib.validationFailed(1); /* Invalid Fast Path option*/
        else
          XSPKS01(); /* Exit to another application*/
          set PW0JM002.CATOAP cursor, bold; /* Highlight*/
        end
      else
        PW0JW00.XXXMODID = "300"; /* Module identification*/
        converseLib.validationFailed(13); /* Invalid Fast Path option*/
      end
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14 was pressed*/
   || converseVar.eventKey is pf15 /* or PF15 was pressed*/
   || converseVar.eventKey is pf16 /* or PF16 was pressed*/
   || converseVar.eventKey is pf17 /* or PF17 was pressed*/
   || converseVar.eventKey is pf18 /* or PF18 was pressed*/
   || converseVar.eventKey is pf19 /* or PF19 was pressed*/
   || converseVar.eventKey is pf20) /* or PF20 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD00"; /* TO application*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
      if (PKWREC.PKWSELSW == "PK")
        COMMAREA.CATOAP = "PW0V"; /* TO application*/
      else
        if (PKWREC.PKWSELSW == "PP")
          COMMAREA.CATOAP = "PW0W"; /* TO application*/
        end
      end
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "PW0R"; /* TO application*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      if (PKWREC.PKWSELSW == "PK") /* picking*/
        COMMAREA.CATOAP = "PK0K"; /* TO application*/
      else
        COMMAREA.CATOAP = "PK0T"; /* TO application*/
      end
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      if (PKWREC.PKWSELSW == "PK") /* picking*/
        COMMAREA.CATOAP = "PK0L"; /* TO application*/
      else
        COMMAREA.CATOAP = "PK0U"; /* TO application*/
      end
    end

    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "PW0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "PW0P"; /* TO application*/
    end

    if (converseVar.eventKey is pf18) /* PF18 was pressed*/
      COMMAREA.CATOAP = "PW0X"; /* TO application*/
    end

    if (converseVar.eventKey is pf19) /* PF19 was pressed*/
      COMMAREA.CATOAP = "PW06"; /* TO application*/
    end

    if (converseVar.eventKey is pf20) /* PF20 was pressed*/
      COMMAREA.CATOAP = "PW08"; /* TO application*/
    end

    PKWREC.XWHCD = PW0JM001.XWHCD;
    PKWREC.XWHCD = PW0JM002.XWHCD;
    PKWREC.XDVCD[1] = PW0JW01.XDVCD;
    PKWREC.XBCCD[1] = PW0JW01.XBCCD;
    PKWREC.PKWFRMDT[1] = PW0JW01.PW0JWFDT;
    PKWREC.PKWTODT[1] = PW0JW01.PW0JWTDT;
    PKWREC.PKWXWHCD = " ";
    PKWREC.PKWFRMAP[1] = "PW0J";
    PKWREC.PKWSLTYP[1] = " ";

    XSPKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    PW0JW00.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(12); /* Invalid PF key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PW0J300

// Reset highlighted fields
Function PW0J400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/


  PW0JW00.XX1 = 1;
  if (PKWREC.PKWSELSW == "PK") /* picking*/

    set PW0JM002.XDVCD initialAttributes; /* division code*/
    set PW0JM002.XBCCD initialAttributes; /* brand code*/

    set PW0JM002.PW0JMFMM initialAttributes; /* from date range*/
    set PW0JM002.PW0JMFDD initialAttributes;
    set PW0JM002.PW0JMFYY initialAttributes;

    set PW0JM002.PW0JMTMM initialAttributes; /* to date range*/
    set PW0JM002.PW0JMTDD initialAttributes;
    set PW0JM002.PW0JMTYY initialAttributes;

    set PW0JM002.CATOAP initialAttributes; /* TO application*/
    set PW0JM002.CAITEM initialAttributes; /* Application data*/

  else

    set PW0JM001.XDVCD initialAttributes; /* division code*/
    set PW0JM001.XBCCD initialAttributes; /* brand code*/

    set PW0JM001.PW0JMFMM initialAttributes; /* from date range*/
    set PW0JM001.PW0JMFDD initialAttributes;
    set PW0JM001.PW0JMFYY initialAttributes;

    set PW0JM001.PW0JMTMM initialAttributes; /* to date range*/
    set PW0JM001.PW0JMTDD initialAttributes;
    set PW0JM001.PW0JMTYY initialAttributes;

    set PW0JM001.CATOAP initialAttributes; /* TO application*/
    set PW0JM001.CAITEM initialAttributes; /* Application data*/

  end


end // end PW0J400

// Verify data that was entered
Function PW0J500()
   /* ------------------------------------------------------------*/
   /* Determine which map logic to excute.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW0J-50002();
  else
    PW0J-50001();
  end


end // end PW0J500

// Verify scroll request
Function PW0J510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PW0JW00.XXXTSPAG < 2)       /* and no previous pages*/

    PW0JW00.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(37); /* No previous page to display*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PW0JW00.XXXTSPAG >= PW0JW00.TA5TSQIX) /* and no more pages*/

    PW0JW00.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(38); /* No more pages to display*/
    exit stack;

  end

end // end PW0J510

// Process valid input request
Function PW0J600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PW0JW00.PW0JWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If a search key was entered, request the data to display.*/
   /* Otherwise, purge any existing pages from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW0JW00.PW0JWSWR == "Y")
    return;
  end

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW0JM002.PW0JMFMM != PW0JW01.PW0JWFMM /* from month*/
     || PW0JM002.PW0JMFDD != PW0JW01.PW0JWFDD /* from month*/
     || PW0JM002.PW0JMFYY != PW0JW01.PW0JWFYY /* from month*/
     || PW0JM002.PW0JMTMM != PW0JW01.PW0JWTMM /* from month*/
     || PW0JM002.PW0JMTDD != PW0JW01.PW0JWTDD /* from month*/
     || PW0JM002.PW0JMTYY != PW0JW01.PW0JWTYY) /* from month*/
      PW0JW00.PW0JWSWR = "Y"; /* Request for data switch*/
      PW0JW01.PW0JWFMM = PW0JM002.PW0JMFMM; /* from month*/
      PW0JW01.PW0JWFDD = PW0JM002.PW0JMFDD; /* from day*/
      PW0JW01.PW0JWFYY = PW0JM002.PW0JMFYY; /* from year*/
      PW0JW01.PW0JWTMM = PW0JM002.PW0JMTMM; /* to month*/
      PW0JW01.PW0JWTDD = PW0JM002.PW0JMTDD; /* to day*/
      PW0JW01.PW0JWTYY = PW0JM002.PW0JMTYY; /* to year*/
      /* -----------------------  Y2K OUT BEGIN  ------------------------*/
      /*  */
      /* MOVE XX0XW01.XX0XW19 TO PW0JW01.PW0JWTCC;/* cent*/
      /* IF PW0JW01.PW0JWFMM GT 0;*/
      /* MOVE XX0XW01.XX0XW19 TO PW0JW01.PW0JWFCC;/* cent*/
      /* ELSE;*/
      /* MOVE 0 TO PW0JW01.PW0JWFCC;*/
      /* END;*/
      /*  */
      /* ------------------------  Y2K OUT END  -------------------------*/
      /* -----------------------  Y2K IN BEGIN  -------------------------*/
      /*  */
      if (PW0JW01.PW0JWFMM > 0)
        if (PW0JW01.PW0JWFYY > 60)
          PW0JW01.PW0JWFCC = 19; /* cent*/
        else
          PW0JW01.PW0JWFCC = 20;
        end
      else
        PW0JW01.PW0JWFCC = 0;
      end
      if (PW0JW01.PW0JWTMM > 0)
        if (PW0JW01.PW0JWTYY > 60)
          PW0JW01.PW0JWTCC = 19; /* cent*/
        else
          PW0JW01.PW0JWTCC = 20;
        end
      else
        PW0JW01.PW0JWTCC = 0;
      end
      /*  */
      /* ------------------------  Y2K IN END  --------------------------*/
      return;
    end

  else
    if (PW0JM001.PW0JMFMM != PW0JW01.PW0JWFMM /* from month*/
     || PW0JM001.PW0JMFDD != PW0JW01.PW0JWFDD /* from month*/
     || PW0JM001.PW0JMFYY != PW0JW01.PW0JWFYY /* from month*/
     || PW0JM001.PW0JMTMM != PW0JW01.PW0JWTMM /* from month*/
     || PW0JM001.PW0JMTDD != PW0JW01.PW0JWTDD /* from month*/
     || PW0JM001.PW0JMTYY != PW0JW01.PW0JWTYY) /* from month*/
      PW0JW00.PW0JWSWR = "Y"; /* Request for data switch*/
      PW0JW01.PW0JWFMM = PW0JM001.PW0JMFMM; /* from month*/
      PW0JW01.PW0JWFDD = PW0JM001.PW0JMFDD; /* from day*/
      PW0JW01.PW0JWFYY = PW0JM001.PW0JMFYY; /* from year*/
      PW0JW01.PW0JWTMM = PW0JM001.PW0JMTMM; /* to month*/
      PW0JW01.PW0JWTDD = PW0JM001.PW0JMTDD; /* to day*/
      PW0JW01.PW0JWTYY = PW0JM001.PW0JMTYY; /* to year*/
      /* -----------------------  Y2K OUT BEGIN  ------------------------*/
      /*  */
      /* MOVE XX0XW01.XX0XW19 TO PW0JW01.PW0JWTCC;/* cent*/
      /* IF PW0JW01.PW0JWFMM GT 0;*/
      /* MOVE XX0XW01.XX0XW19 TO PW0JW01.PW0JWFCC;/* cent*/
      /* ELSE;*/
      /* MOVE 0 TO PW0JW01.PW0JWFCC;*/
      /* END;*/
      /*  */
      /* ------------------------  Y2K OUT END  -------------------------*/
      /* -----------------------  Y2K IN BEGIN  -------------------------*/
      /*  */
      if (PW0JW01.PW0JWFMM > 0)
        if (PW0JW01.PW0JWFYY > 60)
          PW0JW01.PW0JWFCC = 19; /* cent*/
        else
          PW0JW01.PW0JWFCC = 20;
        end
      else
        PW0JW01.PW0JWFCC = 0;
      end
      if (PW0JW01.PW0JWTMM > 0)
        if (PW0JW01.PW0JWTYY > 60)
          PW0JW01.PW0JWTCC = 19; /* cent*/
        else
          PW0JW01.PW0JWTCC = 20;
        end
      else
        PW0JW01.PW0JWTCC = 0;
      end
      /*  */
      /* ------------------------  Y2K IN END  --------------------------*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PW0JW00.XXXTSPAG = PW0JW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PW0JW00.XXXTSPAG = PW0JW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Save fields in pkwrec AND commarea*/
   /* ------------------------------------------------------------*/

  PKWREC.XDVCD[1] = PW0JW01.XDVCD;
  PKWREC.XBCCD[1] = PW0JW01.XBCCD;
  PKWREC.XWHCD = PW0JM001.XWHCD;
  PKWREC.PKWFRMDT[1] = PW0JW01.PW0JWFDT;
  PKWREC.PKWTODT[1] = PW0JW01.PW0JWTDT;
  PKWREC.PKWXWHCD = " ";
  PKWREC.PKWFRMAP[1] = "PW0J";
  PKWREC.PKWSLTYP[1] = " ";


end // end PW0J600

// select set DPICK.VSELOR01
Function PW0JS01()
   /* ------------------------------------------------------------*/
   /* Init - select set on DPICK.VSELOR01 table*/
   /* ------------------------------------------------------------*/

  set PKHREC empty; /* Clear row storage area*/
  PKHREC.XWHCD = PW0JW01.XWHCD; /* warehouse*/
  PKHREC.XBCCD = PW0JW01.XBCCD; /* brand code*/
  PKHREC.XDVCD = PKWREC.XDVCD; /* division code*/
  PKHREC.PKURUNMD = PW0JW00.PW0JWRMD; /* run mode*/
  PKHREC.OP1DSBDT = -1; /* don't ship before date*/
  PKHREC.PK-SEL-TYP-CD = "*"; /* select type code*/

  try
    call "IO1740" ("S2", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0JW00.XXXMODID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "PW0J"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PW0JW01.XWHCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0JS01

// fetch next DPICK.VSELOR01
Function PW0JS02()
   /* ------------------------------------------------------------*/
   /* Fetch next select order cursor*/
   /* ------------------------------------------------------------*/
  try
    call "IO1740" ("N2", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      PW0JW00.PW0JWEOO = "Y"; /* Indicate end of cursor*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0JW00.XXXMODID = "S02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1PGMNO = "PW0J"; /* pgm identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0JS02

// Select set DPICK.VCAHLD01
Function PW0JS03()
   /* ------------------------------------------------------------*/
   /* select set dpick.vcahld01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("S1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0JW00.XXXMODID = "PW0J"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "PW0J"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0JS03

// Fetch next DPICK.VCAHLD01
Function PW0JS04()
   /* ------------------------------------------------------------*/
   /* select next dpick.vcahld01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("N1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* if normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or end of set*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0JW00.XXXMODID = "S06"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "PW0J"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0JS04

// Close  set DPICK.VCAHLD01
Function PW0JS05()
   /* ------------------------------------------------------------*/
   /* close  set dpick.vcahld01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("C1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0JW00.XXXMODID = "S07"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "PW0J"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0JS05

// Select Unq DPICK.VPOOLH01
Function PW0JS06()
   /* ------------------------------------------------------------*/
   /* select unique  dpick.vpoolh01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1720" ("S ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0JW00.XXXMODID = "S06"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "PW0J"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE POOL HDR ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0JS06

// Select set DPICK.VCUHLD01
Function PW0JS08()
   /* ------------------------------------------------------------*/
   /* select set dpick.vcuhld01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("S1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0JW00.XXXMODID = "S08"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "PW0J"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = " "; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0JS08

// Fetch next DPICK.VCUHLD01
Function PW0JS09()
   /* ------------------------------------------------------------*/
   /* fetch next dpick.vcuhld01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("N1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or end of set*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0JW00.XXXMODID = "S09"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "PW0J"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0JS09

// Close  set DPICK.VCUHLD01
Function PW0JS10()
   /* ------------------------------------------------------------*/
   /* close  set dpick.vcuhld01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("C1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0JW00.XXXMODID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "PW0J"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE  SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0JS10

// Select set DPICK.VORHLD01
Function PW0JS11()
   /* ------------------------------------------------------------*/
   /* select set dpick.vorhld01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("S1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0JW00.XXXMODID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "PW0J"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0JS11

// Fetch next DPICK.VORHLD01
Function PW0JS12()
   /* ------------------------------------------------------------*/
   /* fetch next dpick.vorhld01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("N1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or end of set*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0JW00.XXXMODID = "S12"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "PW0J"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0JS12

// Close  set DPICK.VORHLD01
Function PW0JS13()
   /* ------------------------------------------------------------*/
   /* close  set dpick.vorhld01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("C1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0JW00.XXXMODID = "S13"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "PW0J"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE  SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0JS13

// Close  set DPICK.VSELOR01
Function PW0JS14()
   /* ------------------------------------------------------------*/
   /* Close select order cursor*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("C2", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  PW0JW00.XXXMODID = "S12"; /* Module identification*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "PW0J"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0JS14

// Select set DPICK.VSELQT01
Function PW0JS21()
   /* ------------------------------------------------------------*/
   /* Init - select set on DPICK.VSELQT01 table*/
   /* ------------------------------------------------------------*/


  set PWMREC empty; /* Clear row storage area*/
  PWMREC.XWHCD = PW0JW01.XWHCD; /* warehouse*/
  PWMREC.XBCCD = PW0JW01.XBCCD; /* brand code*/
  PWMREC.XDVCD = PKWREC.XDVCD; /* division code*/
  PWMREC.PKURUNMD = PW0JW00.PW0JWRMD; /* run mode*/
  PWMREC.OP1DSBDT = -1; /* don't ship before date*/
  PWMREC.XHDCD = "*"; /* handle code*/
  PWMREC.PK-SEL-TYP-CD = "*"; /* select type code*/
  PWMREC.TF1CARCD = "*"; /* carrier code*/
  PWMREC.XGPCD = "*"; /* general product code*/

  try
    call "IO5500" ("S1", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0JW00.XXXMODID = "S21"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "PW0J"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PW0JW01.XWHCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0JS21

// Fetch next DPICK.VSELQT01
Function PW0JS22()
   /* ------------------------------------------------------------*/
   /* Fetch next select order cursor*/
   /* ------------------------------------------------------------*/
  try
    call "IO5500" ("N1", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      PW0JW00.PW0JWEOO = "Y"; /* Indicate end of cursor*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0JW00.XXXMODID = "S22"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1PGMNO = "PW0J"; /* pgm identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWMREC.PWMGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0JS22

// Close  set DPICK.VSELQT01
Function PW0JS23()
   /* ------------------------------------------------------------*/
   /* Close select order cursor*/
   /* ------------------------------------------------------------*/

  try
    call "IO5500" ("C1", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  PW0JW00.XXXMODID = "S23"; /* Module identification*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "PW0J"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/
  TA1REC.TA1TBLKE = " "; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0JS23

// Select set DPICK.VPOOLH01
Function PW0JS31()
   /* ------------------------------------------------------------*/
   /* Select set on new pool table*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* Clear row storage area*/
  PK4REC.XWHCD = PW0JW01.XWHCD; /* warehouse*/
  PK4REC.XBCCD = PW0JW01.XBCCD; /* brand code*/
  PK4REC.XDVCD = PKWREC.XDVCD; /* division code*/
  PK4REC.OP1DSBDT = -1; /* don't ship before date*/
  PK4REC.PK4ORHLD = "*"; /* order hold*/
  PK4REC.PK4CUHLD = "*"; /* customer hold*/
  PK4REC.TF1CARCD = "*"; /* carrier code*/
  PK4REC.PK4SLIND = "*"; /* sel ind*/
  PK4REC.OP1SPHDF = "Y"; /* spec handle flag*/

  try
    call "IO1720" ("S6", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0JW00.XXXMODID = "S31"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "PW0J"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0JS31

// Fetch next DPICK.VPOOLH01
Function PW0JS32()
   /* ------------------------------------------------------------*/
   /* fetch next DPICK.VPHDIT01*/
   /* ------------------------------------------------------------*/


  try
    call "IO1720" ("N6", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* end of set*/
      PW0JW00.PW0JWEOO = "Y"; /* set eof flag*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0JW00.XXXMODID = "S32"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "PW0J"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0JS32

// Close  set DPICK.VPOOLH01
Function PW0JS33()
   /* ------------------------------------------------------------*/
   /* Close set DPICK.VPOOLH01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1720" ("C6", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0JW00.XXXMODID = "S33"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "PW0J"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE  SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0JS33

//*** RECORD=PW0JW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PW0JW00 type basicRecord
  10 PW0JWEOO PW0JWEOO ; 
  10 PW0JWEPI PW0JWEPI ; 
  10 PW0JWORR PW0JWORR ; 
  10 PW0JWPHR PW0JWPHR ; 
  10 PW0JWIXM PW0JWIXM ; 
  10 PW0JWIMX PW0JWIMX ; 
  10 XX1 XX1 ; 
  10 XX2 XX2 ; 
  10 XX3 XX3 ; 
  10 XX4 XX4 ; 
  10 XX5 XX5 ; 
  10 XX6 XX6 ; 
  10 XX7 XX7 ; 
  10 XX8 XX8 ; 
  10 XX9 XX9 ; 
  10 ZZAMT ZZAMT ; 
  10 ZZAMT1 ZZAMT1 ; 
  10 ZZAMT2 ZZAMT2 ; 
  10 PW0JWRMD PW0JWRMD ; 
  10 PW0JWSWF PW0JWSWF ; 
  10 PW0JWSWH PW0JWSWH ; 
  10 PW0JWSWO PW0JWSWO ; 
  10 PW0JWSWP PW0JWSWP ; 
  10 PW0JWSWQ PW0JWSWQ ; 
  10 PW0JWSWR PW0JWSWR ; 
  10 PW0JWCUD PW0JWCUD ; 
  10 PW0JWPHD PW0JWPHD ; 
  10 PW0JWEDT PW0JWEDT ; 
  10 PW0JWSDT PW0JWSDT ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 PW0JWAPL PW0JWAPL ; 
  10 OP1DSBDT OP1DSBDT ; 
  10 XWHCD XWHCD ; 
  10 XXXMODID XXXMODID ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 PW0JWHWK PW0JWHWK ; 
    15 PW0JWHHH PW0JWHHH ; 
    15 PW0JWHCL PW0JWHCL ; 
    15 PW0JWHMM PW0JWHMM ; 
end // end PW0JW00

//*** RECORD=PW0JW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record PW0JW01 type basicRecord
  10 XXXMODID XXXMODID ; 
  10 PW0JWAPL PW0JWAPL ; 
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 XDVCD XDVCD ; 
  10 XDVDESC XDVDESC ; 
  10 XBCCD XBCCD ; 
  10 XBCABRV XBCABRV ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 PW0JWFDT PW0JWFDT ; 
    15 PW0JWFCC PW0JWFCC ; 
    15 PW0JWFYY PW0JWFYY ; 
    15 PW0JWFMM PW0JWFMM ; 
    15 PW0JWFDD PW0JWFDD ; 
  10 PW0JWTDT PW0JWTDT ; 
    15 PW0JWTCC PW0JWTCC ; 
    15 PW0JWTYY PW0JWTYY ; 
    15 PW0JWTMM PW0JWTMM ; 
    15 PW0JWTDD PW0JWTDD ; 
end // end PW0JW01

//*** RECORD=PW0JW02 ****
// ----------------------------
// Selected order array.
// ----------------------------
// ***********************
Record PW0JW02 type basicRecord
  5 PW0JWCT2 PW0JWCT2 ; 
  5 PW0JWGR2 PW0JWGR2 [221] ; 
    10 PW0JWSEL PW0JWSEL ; 
    10 OP1DSBDT OP1DSBDT ; 
    10 PW0JWSHF PW0JWSHF ; 
    10 PW0JWSHR PW0JWSHR ; 
    10 PW0JWNHF PW0JWNHF ; 
    10 PW0JWNHR PW0JWNHR ; 
    10 PW0JWHRW PW0JWHRW ; 
    10 PW0JWSTD PW0JWSTD ; 
    10 PW0JWSQT PW0JWSQT ; 
    10 PW0JWHRS PW0JWHRS ; 
end // end PW0JW02

// application heading
DataItem PW0JWAPL char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pw0jw02 entry count
DataItem PW0JWCT2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Current date
DataItem PW0JWCUD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date-range end date
DataItem PW0JWEDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of cursor selected order
DataItem PW0JWEOO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor pool item
DataItem PW0JWEPI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dnsb  cc
DataItem PW0JWFCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dnsb' day
DataItem PW0JWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dnsb 'from' date
DataItem PW0JWFDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dnsb  month
DataItem PW0JWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dnsb  year
DataItem PW0JWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0JWGR2 char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// value will be ":"
DataItem PW0JWHCL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display spec hndl hh
DataItem PW0JWHHH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display spec hndl mm
DataItem PW0JWHMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hours work selected in min
DataItem PW0JWHRS bin(18,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// hours work in min
DataItem PW0JWHRW bin(18,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// display spec hndl hh:mm
DataItem PW0JWHWK char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PW0JWIMX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PW0JWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// non spcl hndl full case qty
DataItem PW0JWNHF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// non spec hndl repack qty
DataItem PW0JWNHR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// request order switch
DataItem PW0JWORR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pack and hold date
DataItem PW0JWPHD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// p & h selection switch
DataItem PW0JWPHR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pk-run-mode
DataItem PW0JWRMD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date-range start date
DataItem PW0JWSDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection area
DataItem PW0JWSEL char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// special handling full case
DataItem PW0JWSHF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// special handling repack
DataItem PW0JWSHR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// quantity selected
DataItem PW0JWSQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// previously selected qty
DataItem PW0JWSTD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem PW0JWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// On hold switch
DataItem PW0JWSWH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request order inquiry flag
DataItem PW0JWSWO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request pick and hold flag
DataItem PW0JWSWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Quantity selected flag
DataItem PW0JWSWQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PW0JWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dnsb cc
DataItem PW0JWTCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dnsb day
DataItem PW0JWTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dnsb 'to' date
DataItem PW0JWTDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dnsb month
DataItem PW0JWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dsnb year
DataItem PW0JWTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

