package pw0q;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PW0Q ****
// This application shows specific order numbers with pack and
// hold regular quantities.  it displays a flag (sel flg)
// that lets the user know if this order has been previously
// selected for picking or not.
// This screen allows the user to select an order for picking,
// deselect an order, put an order on hold (there will be a
// pop-up window to display valid hold codes), or select for
// product inquiry.
// 
// The user can transfer out of this application by using one
// of the pf keys displayed at the bottom of the map, or by
// entering fast-path information (also at the bottom of the
// map).
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      02/01/91  ovazqu  New application.
// PK4020   05/08/91  KHEINA  Move part char to selected order
//                            table when adding row to table.
//          09/25/91  SHENDE  Set pick plan release date and
//                            picking release date.
//          10/08/91  jcampb  table changes
//          10/16/91  shende  1. Allow access to whse '07'.
//                            2. Display division code in the
//                            header which CANNOT be modified.
//                            3. Check for B-Grade / Closeouts,
//                            don't process these orders.
//          12/07/91  SHENDE  Fixed qty calculation
//          03/05/92  SHENDE  Added xbc-brand-cd (xbccd) for
//                            March table changes.
//          04/20/92  SHENDE  Do not display in-store promo
//                            orders and add xgpcd to'S7'query
// colehaan 08/14/92  SHENDE  Display brand code and allow a
//                            wildcard for division and brand
//          10/13/93  KANDE1  rename procs for standards by
//                            rcream but not documented
// Canada   10/25/95  PSTROE  Pick-up new version of XPPK003
// BASICS   04/18/97  PANDER  Do not display Basics orders.
// y2kfix   02/09/98  pharwo  zero fill pw0qmdyy, pw0qmcyy,
//                            pw0qmryy and y2k changes to
//                            pw0q640.
//                            change maps to display 00 year.
// *********************
Program PW0Q type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK4REC PK4REC; // record
  PK5REC PK5REC; // record
  PK9REC PK9REC; // record
  PKBREC PKBREC; // record
  PKHREC PKHREC; // record
  PKWREC PKWREC; // record
  PW0QW00 PW0QW00; // record
  PW0QW01 PW0QW01; // record
  PWFREC PWFREC; // record
  PWJREC PWJREC; // record
  PWKREC PWKREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TA9REC TA9REC; // record
  TAEREC TAEREC; // record
  TF1REC TF1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use XHRTBL; // table
  use XOTTBL; // table
  use XDVTBL; // table
  use XBCTBL; // table
  use PW0QM.PW0QM001,  // forms
      PW0QM.PW0QM002, 
      PW0QM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set PW0QM001 initial; /* M001 input/output*/
    set PW0QM002 initial; /* M002 input/output*/
    set PW0QW00 empty; /* Working storage*/
    set PW0QW01 empty; /* M001 display storage*/
    set PWJREC empty; /* Inquiry order array*/
    set PK4REC empty; /* DPICK.VPOOLH01 record*/
    set PK5REC empty; /* DPICK.VPOOLI01 record*/
    set PK9REC empty; /* DPICK.VCUHLD01 record*/
    set PKBREC empty; /* DPICK.VORHLD01 record*/
    set PKHREC empty; /* DPICK.VSELOR01 record*/
    set PWFREC empty; /* DPICK.VCAHLD01 record*/
    set TF1REC empty; /* DPICK.VCARR001 record*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set TA9REC empty; /* Date validation parameters*/
    set XX0XW01 empty; /* Date format parameter*/

    TF1REC.TF1CARCD = "~"; /* Initialize carrier cd to non-blank*/
    PKWREC.PKWUSERB = PWJREC.PKWUSERB; /* Initialize Inquiry array*/

     /* ------------------------------------------------------------*/
     /* Initialize work areas*/
     /* ------------------------------------------------------------*/

    PW0QW00.PW0QWSWF = "Y"; /* Format the map switch*/
    PW0QW00.PW0QWSWR = "N"; /* Request for data switch*/
    PW0QW00.PW0QWSWU = "N"; /* Updates requested switch*/
    PW0QW00.PW0QWSWM = "N"; /* Screen modified switch*/
    PW0QW00.PW0QWSWZ = "N"; /* All dnsb dts processed switch*/
    PW0QW00.PW0QWIXM = 1; /* Map line index*/
    PW0QW00.PW0QWIXD = 1; /* Dnsbd index (pwkrec)*/
    PW0QW00.PW0QWIXO = 1; /* Inquiry orders index*/
    PW0QW00.PW0QMSEL = "A"; /* Default "select all'*/

     /* ------------------------------------------------------------*/
     /* Get DNSBD array from commarea.*/
     /* ------------------------------------------------------------*/

    PKWREC.PKWINDEX = 1; /* Dnsbd array index (pkwrec)*/
    PWKREC.PWKARRAY = PKWREC.PKWARRAY[PKWINDEX];

     /* ------------------------------------------------------------*/
     /* See if data was passed to this program.*/
     /* ------------------------------------------------------------*/

    if (PWKREC.PWKARMAX > 0 /* Found data to process*/
     && PWKREC.PWKARMAX <= 25)

       /* NEXT SENTENCE*/

    else

      PKWREC.PKWINDEX = 2; /* Dnsbd array index (pkwrec)*/
      PWKREC.PWKARRAY = PKWREC.PKWARRAY[PKWINDEX];

      if (PWKREC.PWKARMAX > 0 /* Found data to process*/
       && PWKREC.PWKARMAX <= 25)

         /* NEXT SENTENCE*/

      else

        PKWREC.PKWINDEX = 3; /* Dnsbd array index (pkwrec)*/
        PWKREC.PWKARRAY = PKWREC.PKWARRAY[PKWINDEX];

      end

    end

    if (PWKREC.PWKARMAX > 0 /* Found data to process*/
     && PWKREC.PWKARMAX <= 25)

      PW0QW00.PW0QWSWR = "Y"; /* Request data*/

    else

      PW0QW00.PW0QWSWZ = "Y"; /* No DNSB Dates found*/
      PWKREC.OP1DSBDT[PW0QWIXD] = 0;
      PWKREC.TF1CARCD[PW0QWIXD] = " ";
      PW0QW00.XXXMODID = "XPPK001"; /* Module Id*/
      converseLib.validationFailed(339); /* No DNSB Dates found*/

    end

     /* ------------------------------------------------------------*/
     /* Build map heading area.*/
     /* ------------------------------------------------------------*/

    if (PKWREC.PKWSELSW == "PK") /* picking*/
      PW0QM002.PW0QMSEL = "A"; /* Selection code*/
      PW0QM002.XDVCD = PKWREC.XDVCD; /* Division code*/
      PW0QM002.XBCCD = PKWREC.XBCCD; /* Brand code*/
      PW0QM002.XWHCD = PKWREC.XWHCD; /* Warehouse code*/
      PW0QM002.TF1CARCD = PWKREC.TF1CARCD[PW0QWIXD];

    else
      PW0QM001.PW0QMSEL = "A"; /* Selection code*/
      PW0QM001.XDVCD = PKWREC.XDVCD; /* Division code*/
      PW0QM001.XBCCD = PKWREC.XBCCD; /* Brand code*/
      PW0QM001.XWHCD = PKWREC.XWHCD; /* Warehouse code*/
      PW0QM001.TF1CARCD = PWKREC.TF1CARCD[PW0QWIXD];
    end

    PW0QW00.PW0QWPCR = PWKREC.TF1CARCD[PW0QWIXD]; /* Save carrier cd*/

     /* ------------------------------------------------------------*/
     /* Set run-mode based on picking selection code.*/
     /* ------------------------------------------------------------*/

    if (PKWREC.PKWSELSW == "PP") /* pick planning*/
      PW0QW00.PKURUNMD = "P";
    else
      PW0QW00.PKURUNMD = " ";
    end

     /* ------------------------------------------------------------*/
     /* Save first carrier code & DNSB date.*/
     /* Convert DNSB Date to be displayed on map.*/
     /* ------------------------------------------------------------*/

    PW0QW00.PW0QWPDT = PWKREC.OP1DSBDT[PW0QWIXD]; /* Save dnsbd*/
    PW0QW00.PW0QWWDT = PWKREC.OP1DSBDT[PW0QWIXD]; /* Convert dnsbd*/

    if (PKWREC.PKWSELSW == "PK") /* picking*/
      PW0QM002.PW0QMDMM = PW0QW00.PW0QWWMM;
      PW0QM002.PW0QMDDD = PW0QW00.PW0QWWDD;
      PW0QM002.PW0QMDYY = PW0QW00.PW0QWWYY;
    else
      PW0QM001.PW0QMDMM = PW0QW00.PW0QWWMM;
      PW0QM001.PW0QMDDD = PW0QW00.PW0QWWDD;
      PW0QM001.PW0QMDYY = PW0QW00.PW0QWWYY;
    end


     /* ------------------------------------------------------------*/
     /* Convert current date to CCYYMMDD format for comparison*/
     /* purposes later in the program.*/
     /* ------------------------------------------------------------*/

    PW0QW00.PW0QWWDT = VGVar.currentShortGregorianDate; /* Get system date yy/mm/dd*/

    if (PW0QW00.PW0QWWYY > 80) /* If year greater 80*/

      PW0QW00.PW0QWWCC = 19; /* century = 19*/

    else

      PW0QW00.PW0QWWCC = 20; /* otherwise, century = 20*/

    end

    PW0QW00.PW0QWCDT = PW0QWWDT; /* Save Current date*/

     /* ------------------------------------------------------------*/
     /* Flow to see if the "from" application is valid.*/
     /* ------------------------------------------------------------*/

    goto PW0Q000; /* Check "from" application*/


    PW0Q000: PW0Q000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PW0Q001; /* Converse the main process*/


    PW0Q001: PW0Q001();
     /* -----------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* -----------------------------------------------------------*/

    goto PW0Q001; /* Converse the main process*/

  end // end main
end // end PW0Q

// Format and converse the map
Function PW0Q-20001()
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  if (PW0QW00.TA5TSQIX == 0) /* If no pages were formatted*/

    set PW0QM001.PW0QMCHC skip, invisible; /* Protect carrier hold data*/
    set PW0QM001.PW0QMCMM skip, invisible;
    set PW0QM001.PW0QMCDD skip, invisible;
    set PW0QM001.PW0QMCYY skip, invisible;

    if (PWKARMAX > 0) /* At least one DNSB Date exists*/
      set PW0QM001.PW0QMSEL cursor; /* Set cursor on selection cd*/
    else
      set PW0QM001.PW0QMSEL cursor, skip, invisible; /* No entry allowed*/
    end

  end

  PW0QM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PW0QM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW0QM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)

    if (PW0QW00.XXXMSGNO != 0 /* Message to display*/
     || COMMAREA.CAMSG != " ") /* or message text*/

      if (PW0QW00.XXXMSGNO != 0) /* Message to display*/
        if (PW0QW00.XXXTSPAG == 1) /* First page*/
          if (PW0QW00.XXXMSGNO == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(PW0QW00.XXXMSGNO);
          end /* Message number*/
          PW0QM001.XXXMODID = PW0QW00.XXXMODID; /* Module id*/
          set PW0QM001 alarm; /* Indicate sound alarm*/
        end

      else
        PW0QM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
        PW0QM001.XXXMODID = PW0QW00.XXXMODID; /* Module id*/
        set PW0QM001 alarm; /* Indicate sound alarm*/
      end

      if (PW0QM001.CATOAP > " " /* Fast Path was requested*/
       && PW0QW00.PW0QWSWB == "Y") /* but was in error*/

        set PW0QM001.CATOAP cursor, bold; /* Highlight*/
      end

    end
  else
    PW0QM001.XXXMODID = PW0QW00.XXXMODID; /* Module id*/
    set PW0QM001 alarm; /* Indicate sound alarm*/
  end

  converse PW0QM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(0); /* Message number*/
  PW0QW00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  PW0QW00.XXXMODID = " "; /* Module identification*/
  PW0QW00.PW0QWSWB = "N"; /* Reset bad Fast Path switch*/

  COMMAREA.CATOAP = PW0QM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW0QM001.CAITEM; /* Application data*/


end // end PW0Q-20001

// Format and converse the map
Function PW0Q-20002()

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  if (PW0QW00.TA5TSQIX == 0) /* If no pages were formatted*/

    set PW0QM002.PW0QMCHC skip, invisible; /* Protect carrier hold data*/
    set PW0QM002.PW0QMCMM skip, invisible;
    set PW0QM002.PW0QMCDD skip, invisible;
    set PW0QM002.PW0QMCYY skip, invisible;

    if (PWKARMAX > 0) /* At least one DNSB Date exists*/
      set PW0QM002.PW0QMSEL cursor; /* Set cursor on selection cd*/
    else
      set PW0QM002.PW0QMSEL cursor, skip, invisible; /* No entry allowed*/
    end

  end

  PW0QM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PW0QM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW0QM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)

    if (PW0QW00.XXXMSGNO != 0 /* Message to display*/
     || COMMAREA.CAMSG != " ") /* or message text*/

      if (PW0QW00.XXXMSGNO != 0) /* Message to display*/
        if (PW0QW00.XXXTSPAG == 1) /* First page*/
          if (PW0QW00.XXXMSGNO == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(PW0QW00.XXXMSGNO);
          end /* Message number*/
          PW0QM002.XXXMODID = PW0QW00.XXXMODID; /* Module id*/
          set PW0QM002 alarm; /* Indicate sound alarm*/
        end

      else
        PW0QM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
        PW0QM002.XXXMODID = PW0QW00.XXXMODID; /* Module id*/
        set PW0QM002 alarm; /* Indicate sound alarm*/
      end

      if (PW0QM002.CATOAP > " " /* Fast Path was requested*/
       && PW0QW00.PW0QWSWB == "Y") /* but was in error*/

        set PW0QM002.CATOAP cursor, bold; /* Highlight*/
      end

    end
  else
    PW0QM002.XXXMODID = PW0QW00.XXXMODID; /* Module id*/
    set PW0QM002 alarm; /* Indicate sound alarm*/
  end

  converse PW0QM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(0); /* Message number*/
  PW0QW00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  PW0QW00.XXXMODID = " "; /* Module identification*/
  PW0QW00.PW0QWSWB = "N"; /* Reset bad Fast Path switch*/

  COMMAREA.CATOAP = PW0QM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW0QM002.CAITEM; /* Application data*/


end // end PW0Q-20002

// Format the display data
Function PW0Q-21001()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0q-21002 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW0QM001 initial; /* M001 input/output area*/

  PW0QW00.PW0QWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW0QW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW0QW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PW0QW00.PW0QWSWM == "Y") /* Current page was modified*/

        PW0QS01(); /* Update temporary storage page*/

        PW0QW00.PW0QWSWM = "N"; /* Reset switch*/

      end

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW0QW00.XXXTSPAG > PW0QW00.TA5TSQIX) /* Desired greater highest*/

        PW0QW00.XXXTSPAG = PW0QW00.TA5TSQIX; /* Default to highest*/

      end

      PW0QS02(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    PW0QM001.XXXLITPG = "FROM"; /* "from" constant*/
    PW0QM001.XXXLITOF = "OF"; /* "of" constant*/
    PW0QM001.XXXTSPAG = PW0QW00.XXXTSPAG; /* Current page*/
    PW0QM001.XXXTSQIX = PW0QW00.TA5TSQIX; /* Highest page*/

    PW0QW00.PW0QWIXM = 1; /* Initialize line index*/

    while (PW0QW00.PW0QWIXM <= 10 /* Until screen is full*/
     && PW0QW01.PK1CUOID[PW0QWIXM] != 0) /* and data exists*/

      PW0QM001.PW0QMACT[PW0QWIXM] = PW0QW01.PW0QMACT[PW0QWIXM];
      PW0QM001.PK1CUOID[PW0QWIXM] = PW0QW01.PK1CUOID[PW0QWIXM];
      PW0QM001.PW0QMDOT[PW0QWIXM] = ".";
      PW0QM001.PK1NORID[PW0QWIXM] = PW0QW01.PK1NORID[PW0QWIXM];
      PW0QM001.TF2DSTCD[PW0QWIXM] = PW0QW01.TF2DSTCD[PW0QWIXM];
      PW0QM001.PW0QMRFC[PW0QWIXM] = PW0QW01.PW0QMRFC[PW0QWIXM];
      PW0QM001.PW0QMRRP[PW0QWIXM] = PW0QW01.PW0QMRRP[PW0QWIXM];
      PW0QM001.PK4SLIND[PW0QWIXM] = PW0QW01.PK4SLIND[PW0QWIXM];
      PW0QM001.XHRCD[PW0QWIXM] = PW0QW01.XHRCD[PW0QWIXM];
      PW0QM001.PW0QMRMM[PW0QWIXM] = PW0QW01.PW0QMRMM[PW0QWIXM];
      PW0QM001.PW0QMRDD[PW0QWIXM] = PW0QW01.PW0QMRDD[PW0QWIXM];
      PW0QM001.PW0QMRYY[PW0QWIXM] = PW0QW01.PW0QMRYY[PW0QWIXM];

      if (PW0QW00.PW0QWIXM == 1) /* First select field*/

        set PW0QM001.PW0QMACT[PW0QWIXM] cursor, normal; /* Position cursor*/

      else

        set PW0QM001.PW0QMACT[PW0QWIXM] normal; /* Unprotect*/

      end

      set PW0QM001.XHRCD[PW0QWIXM] normal; /* Open up entry in fields*/
      set PW0QM001.PW0QMRMM[PW0QWIXM] normal;
      set PW0QM001.PW0QMRDD[PW0QWIXM] normal;
      set PW0QM001.PW0QMRYY[PW0QWIXM] normal;

      PW0QW00.PW0QWIXM = PW0QW00.PW0QWIXM + 1; /* Increment line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PW0QM001.XDVCD = PKWREC.XDVCD[1]; /* Division code*/
  if (PKWREC.XDVCD[1] == "*")
    PW0QM001.XDVDESC = "ALL DIVISIONS";
  else
    if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
      PW0QM001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
    end
  end

  PW0QM001.XBCCD = PKWREC.XBCCD[1]; /* Brand code*/
  if (PKWREC.XBCCD[1] == "*")
    PW0QM001.XBCABRV = " ";
    if (PW0QW00.XXXMSGNO == 0) /* no other msg to display*/
      PW0QW00.XXXMSGNO = 421;
    end
  else
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      PW0QM001.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
    end
  end

  PW0QM001.XWHCD = PKWREC.XWHCD; /* Whse code*/
  PW0QM001.XWHABRV = PKWREC.XWHABRV;
  PW0QW00.PW0QWWDT = PWKREC.OP1DSBDT[PW0QWIXD]; /* Convert dnsb*/
  PW0QM001.PW0QMDMM = PW0QW00.PW0QWWMM; /* DNSB mm*/
  PW0QM001.PW0QMDDD = PW0QW00.PW0QWWDD; /* DNSB dd*/
  PW0QM001.PW0QMDYY = PW0QW00.PW0QWWYY; /* DNSB yy*/
  PW0QM001.TF1CARCD = PWKREC.TF1CARCD[PW0QWIXD]; /* Carrier code*/
  PW0QM001.TF1ABRV = TF1REC.TF1ABRV; /* Carrier desc*/
  PW0QM001.PW0QMCHC = PW0QW00.PW0QMCHC; /* Carrier hold cd*/
  PW0QM001.PW0QMCMM = PW0QW00.PW0QMCMM; /* Carrier hold relse dt*/
  PW0QM001.PW0QMCDD = PW0QW00.PW0QMCDD;
  PW0QM001.PW0QMCYY = PW0QW00.PW0QMCYY;
  PW0QM001.PW0QMSEL = PW0QW00.PW0QMSEL; /* Selection cd*/

  if (PW0QW00.PW0QMSEL <= " ") /* Selection code not present*/

    set PW0QM001.PW0QMSEL cursor; /* Position cursor*/

  end


end // end PW0Q-21001

// Format the display data
Function PW0Q-21002()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0q-21001 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW0QM002 initial; /* M002 input/output area*/

  PW0QW00.PW0QWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW0QW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW0QW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PW0QW00.PW0QWSWM == "Y") /* Current page was modified*/

        PW0QS01(); /* Update temporary storage page*/

        PW0QW00.PW0QWSWM = "N"; /* Reset switch*/

      end

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW0QW00.XXXTSPAG > PW0QW00.TA5TSQIX) /* Desired greater highest*/

        PW0QW00.XXXTSPAG = PW0QW00.TA5TSQIX; /* Default to highest*/

      end

      PW0QS02(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    PW0QM002.XXXLITPG = "FROM"; /* "from" constant*/
    PW0QM002.XXXLITOF = "OF"; /* "of" constant*/
    PW0QM002.XXXTSPAG = PW0QW00.XXXTSPAG; /* Current page*/
    PW0QM002.XXXTSQIX = PW0QW00.TA5TSQIX; /* Highest page*/

    PW0QW00.PW0QWIXM = 1; /* Initialize line index*/

    while (PW0QW00.PW0QWIXM <= 10 /* Until screen is full*/
     && PW0QW01.PK1CUOID[PW0QWIXM] != 0) /* and data exists*/

      PW0QM002.PW0QMACT[PW0QWIXM] = PW0QW01.PW0QMACT[PW0QWIXM];
      PW0QM002.PK1CUOID[PW0QWIXM] = PW0QW01.PK1CUOID[PW0QWIXM];
      PW0QM002.PW0QMDOT[PW0QWIXM] = ".";
      PW0QM002.PK1NORID[PW0QWIXM] = PW0QW01.PK1NORID[PW0QWIXM];
      PW0QM002.TF2DSTCD[PW0QWIXM] = PW0QW01.TF2DSTCD[PW0QWIXM];
      PW0QM002.PW0QMRFC[PW0QWIXM] = PW0QW01.PW0QMRFC[PW0QWIXM];
      PW0QM002.PW0QMRRP[PW0QWIXM] = PW0QW01.PW0QMRRP[PW0QWIXM];
      PW0QM002.PK4SLIND[PW0QWIXM] = PW0QW01.PK4SLIND[PW0QWIXM];
      PW0QM002.XHRCD[PW0QWIXM] = PW0QW01.XHRCD[PW0QWIXM];
      PW0QM002.PW0QMRMM[PW0QWIXM] = PW0QW01.PW0QMRMM[PW0QWIXM];
      PW0QM002.PW0QMRDD[PW0QWIXM] = PW0QW01.PW0QMRDD[PW0QWIXM];
      PW0QM002.PW0QMRYY[PW0QWIXM] = PW0QW01.PW0QMRYY[PW0QWIXM];

      if (PW0QW00.PW0QWIXM == 1) /* First select field*/

        set PW0QM002.PW0QMACT[PW0QWIXM] cursor, normal; /* Position cursor*/

      else

        set PW0QM002.PW0QMACT[PW0QWIXM] normal; /* Unprotect*/

      end

      set PW0QM002.XHRCD[PW0QWIXM] normal; /* Open up entry in fields*/
      set PW0QM002.PW0QMRMM[PW0QWIXM] normal;
      set PW0QM002.PW0QMRDD[PW0QWIXM] normal;
      set PW0QM002.PW0QMRYY[PW0QWIXM] normal;

      PW0QW00.PW0QWIXM = PW0QW00.PW0QWIXM + 1; /* Increment line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PW0QM002.XDVCD = PKWREC.XDVCD[1]; /* Division code*/
  if (PKWREC.XDVCD[1] == "*")
    PW0QM002.XDVDESC = "ALL DIVISIONS";
  else
    if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
      PW0QM002.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
    end
  end

  PW0QM002.XBCCD = PKWREC.XBCCD[1]; /* Brand code*/
  if (PKWREC.XBCCD[1] == "*")
    PW0QM002.XBCABRV = " ";
    if (PW0QW00.XXXMSGNO == 0) /* no other msg to display*/
      PW0QW00.XXXMSGNO = 421;
    end
  else
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      PW0QM002.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
    end
  end

  PW0QM002.XWHCD = PKWREC.XWHCD; /* Whse code*/
  PW0QM002.XWHABRV = PKWREC.XWHABRV;
  PW0QW00.PW0QWWDT = PWKREC.OP1DSBDT[PW0QWIXD]; /* Convert dnsb*/
  PW0QM002.PW0QMDMM = PW0QW00.PW0QWWMM; /* DNSB mm*/
  PW0QM002.PW0QMDDD = PW0QW00.PW0QWWDD; /* DNSB dd*/
  PW0QM002.PW0QMDYY = PW0QW00.PW0QWWYY; /* DNSB yy*/
  PW0QM002.TF1CARCD = PWKREC.TF1CARCD[PW0QWIXD]; /* Carrier code*/
  PW0QM002.TF1ABRV = TF1REC.TF1ABRV; /* Carrier desc*/
  PW0QM002.PW0QMCHC = PW0QW00.PW0QMCHC; /* Carrier hold cd*/
  PW0QM002.PW0QMCMM = PW0QW00.PW0QMCMM; /* Carrier hold relse dt*/
  PW0QM002.PW0QMCDD = PW0QW00.PW0QMCDD;
  PW0QM002.PW0QMCYY = PW0QW00.PW0QMCYY;
  PW0QM002.PW0QMSEL = PW0QW00.PW0QMSEL; /* Selection cd*/

  if (PW0QW00.PW0QMSEL <= " ") /* Selection code not present*/

    set PW0QM002.PW0QMSEL cursor; /* Position cursor*/

  end


end // end PW0Q-21002

// Verify data that was entered
Function PW0Q-50001()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0q-50002 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Check for item in fast path*/
   /* ------------------------------------------------------------*/

  if (PW0QM001.CAITEM > " ") /* Application data was entered*/

    PW0QW00.XXXMODID = "500"; /* Module identification*/
    set PW0QM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Item invalid w/o FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PW0Q510(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* If page was formatted, verify data in the line.*/
   /* ------------------------------------------------------------*/

  if (PW0QW00.TA5TSQIX > 0) /* Page was formatted*/

    PW0QW00.PW0QWIXM = 10; /* Initialize line index*/

    while (PW0QW00.PW0QWIXM > 0) /* Until end of lines*/

      if (PW0QM001.PK1CUOID[PW0QWIXM] > 0) /* Data on line*/

        if (PW0QM001.PW0QMACT[PW0QWIXM] != PW0QW01.PW0QMACT[PW0QWIXM]
         || PW0QM001.XHRCD[PW0QWIXM] != PW0QW01.XHRCD[PW0QWIXM]
         || PW0QM001.PW0QMRMM[PW0QWIXM] != PW0QW01.PW0QMRMM[PW0QWIXM]
         || PW0QM001.PW0QMRDD[PW0QWIXM] != PW0QW01.PW0QMRDD[PW0QWIXM]
         || PW0QM001.PW0QMRYY[PW0QWIXM] != PW0QW01.PW0QMRYY[PW0QWIXM])

          PW0Q-52001(); /* Verify data in the line*/

        end

      end

      PW0QW00.PW0QWIXM = PW0QW00.PW0QWIXM - 1; /* Decrement line number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If new carrier hold data was entered, edit it.*/
   /* ------------------------------------------------------------*/

  if (PW0QM001.PW0QMCHC > " "
   || PW0QM001.PW0QMCMM > 0
   || PW0QM001.PW0QMCDD > 0
   || PW0QM001.PW0QMCYY > 0)

    if (PW0QM001.PW0QMCHC != PW0QW00.PW0QMCHC
     || PW0QM001.PW0QMCMM != PW0QW00.PW0QMCMM
     || PW0QM001.PW0QMCDD != PW0QW00.PW0QMCDD
     || PW0QM001.PW0QMCYY != PW0QW00.PW0QMCYY)

      PW0Q-53001(); /* Verify carrier hold data*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If selection code was entered validate it.*/
   /* ------------------------------------------------------------*/

  if (PW0QM001.PW0QMSEL != PW0QW00.PW0QMSEL)

    if (PW0QW00.PW0QWSWU == "N") /* No updates requested*/

      if (PW0QM001.PW0QMSEL == "A"
       || PW0QM001.PW0QMSEL == "N"
       || PW0QM001.PW0QMSEL == "S")

         /* NEXT SENTENCE*/

      else

        set PW0QM001.PW0QMSEL cursor, bold; /* Highlight*/
        PW0QW00.XXXMODID = "500"; /* Module identification*/
        converseLib.validationFailed(322); /* Invalid selection code*/

      end

    else /* Updates requested*/

      set PW0QM001.PW0QMSEL cursor, bold; /* Highlight*/
      PW0QW00.XXXMODID = "500"; /* Module identification*/
      converseLib.validationFailed(107); /* Invalid change of sel cd*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If no enter key was hit, get out of here.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter key was hit*/

     /* NEXT SENTENCE*/

  else

    return; /* Get out of this routine*/

  end

   /* ------------------------------------------------------------*/
   /* ENTER key was hit.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If any changes, get out of this routine.*/
   /* ------------------------------------------------------------*/

  if (PW0QM001.PW0QMSEL != PW0QW00.PW0QMSEL /* New selection cd*/
   || PW0QW00.PW0QWSWU == "Y")              /* or updates were requested*/

    return; /* Get out of this routine*/

  end

   /* ------------------------------------------------------------*/
   /* A new DNSB Date is needed, look for it.*/
   /* ------------------------------------------------------------*/

  PW0QW00.PW0QWSWZ = "N"; /* Assume no end of DNSB Dates*/

  while (PW0QW00.PW0QWSWZ == "N"                       /* Not at end of DNSB Dates*/
   && PWKREC.OP1DSBDT[PW0QWIXD] == PW0QW00.PW0QWPDT /* and same date*/
   && PWKREC.TF1CARCD[PW0QWIXD] == PW0QW00.PW0QWPCR) /* and same carrier*/

    PW0QW00.PW0QWIXD = PW0QW00.PW0QWIXD + 1; /* Point to next entry*/

    if (PW0QW00.PW0QWIXD > PWKREC.PWKARMAX) /* No more in current array*/

      if (PW0QW00.PW0QWIXD > 25 /* Array was full*/
       && PKWREC.PKWINDEX < 3)  /* but there are other arrays*/

        PKWREC.PKWINDEX = PKWREC.PKWINDEX + 1;
        PWKREC.PWKARRAY = PKWREC.PKWARRAY[PKWINDEX]; /* Get next 25*/
        PW0QW00.PW0QWIXD = 1;

        if (PW0QW00.PW0QWIXD > PWKREC.PWKARMAX)

          PW0QW00.PW0QWSWZ = "Y"; /* No more dates*/

        end

      else

        PW0QW00.PW0QWSWZ = "Y"; /* No more dates*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* See if new DNSB Date was found.*/
   /* ------------------------------------------------------------*/

  if (PW0QW00.PW0QWSWZ == "N") /* No end of DNSB Dates array*/

    PW0QW00.PW0QWPDT = PWKREC.OP1DSBDT[PW0QWIXD]; /* Save new dnsbd*/
    PW0QW00.PW0QWPCR = PWKREC.TF1CARCD[PW0QWIXD]; /* & new carrier*/

    return; /* Get out of this routine*/

  end

   /* ------------------------------------------------------------*/
   /* No more DNSB Dates found.*/
   /* ------------------------------------------------------------*/

  set PW0QM001 initial;

  PW0QM001.XWHCD = PKWREC.XWHCD; /* Warehouse cd to map*/
  set PW0QM001.PW0QMCHC skip, invisible; /* Do not allow entry*/
  set PW0QM001.PW0QMCMM skip, invisible; /* "*/
  set PW0QM001.PW0QMCDD skip, invisible; /* "*/
  set PW0QM001.PW0QMCYY skip, invisible; /* "*/
  set PW0QM001.PW0QMSEL cursor, skip, invisible; /* "*/
  PW0QW00.PW0QWSWR = "N"; /* Reset request data switch*/
  PW0QW00.XXXMODID = "500"; /* Module identification*/
  converseLib.validationFailed(339); /* No more dnsb dates*/

  exit stack; /* Exit to display map*/


end // end PW0Q-50001

// Verify data that was entered
Function PW0Q-50002()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0q-50001 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Check for item in fast path*/
   /* ------------------------------------------------------------*/

  if (PW0QM002.CAITEM > " ") /* Application data was entered*/

    PW0QW00.XXXMODID = "500"; /* Module identification*/
    set PW0QM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Item invalid w/o FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PW0Q510(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* If page was formatted, verify data in the line.*/
   /* ------------------------------------------------------------*/

  if (PW0QW00.TA5TSQIX > 0) /* Page was formatted*/

    PW0QW00.PW0QWIXM = 10; /* Initialize line index*/

    while (PW0QW00.PW0QWIXM > 0) /* Until end of lines*/

      if (PW0QM002.PK1CUOID[PW0QWIXM] > 0) /* Data on line*/

        if (PW0QM002.PW0QMACT[PW0QWIXM] != PW0QW01.PW0QMACT[PW0QWIXM]
         || PW0QM002.XHRCD[PW0QWIXM] != PW0QW01.XHRCD[PW0QWIXM]
         || PW0QM002.PW0QMRMM[PW0QWIXM] != PW0QW01.PW0QMRMM[PW0QWIXM]
         || PW0QM002.PW0QMRDD[PW0QWIXM] != PW0QW01.PW0QMRDD[PW0QWIXM]
         || PW0QM002.PW0QMRYY[PW0QWIXM] != PW0QW01.PW0QMRYY[PW0QWIXM])

          PW0Q-52002(); /* Verify data in the line*/

        end

      end

      PW0QW00.PW0QWIXM = PW0QW00.PW0QWIXM - 1; /* Decrement line number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If new carrier hold data was entered, edit it.*/
   /* ------------------------------------------------------------*/

  if (PW0QM002.PW0QMCHC > " "
   || PW0QM002.PW0QMCMM > 0
   || PW0QM002.PW0QMCDD > 0
   || PW0QM002.PW0QMCYY > 0)

    if (PW0QM002.PW0QMCHC != PW0QW00.PW0QMCHC
     || PW0QM002.PW0QMCMM != PW0QW00.PW0QMCMM
     || PW0QM002.PW0QMCDD != PW0QW00.PW0QMCDD
     || PW0QM002.PW0QMCYY != PW0QW00.PW0QMCYY)

      PW0Q-53002(); /* Verify carrier hold data*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If selection code was entered validate it.*/
   /* ------------------------------------------------------------*/

  if (PW0QM002.PW0QMSEL != PW0QW00.PW0QMSEL)

    if (PW0QW00.PW0QWSWU == "N") /* No updates requested*/

      if (PW0QM002.PW0QMSEL == "A"
       || PW0QM002.PW0QMSEL == "N"
       || PW0QM002.PW0QMSEL == "S")

         /* NEXT SENTENCE*/

      else

        set PW0QM002.PW0QMSEL cursor, bold; /* Highlight*/
        PW0QW00.XXXMODID = "500"; /* Module identification*/
        converseLib.validationFailed(322); /* Invalid selection code*/

      end

    else /* Updates requested*/

      set PW0QM002.PW0QMSEL cursor, bold; /* Highlight*/
      PW0QW00.XXXMODID = "500"; /* Module identification*/
      converseLib.validationFailed(107); /* Invalid change of sel cd*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If no enter key was hit, get out of here.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter key was hit*/

     /* NEXT SENTENCE*/

  else

    return; /* Get out of this routine*/

  end

   /* ------------------------------------------------------------*/
   /* ENTER key was hit.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If any changes, get out of this routine.*/
   /* ------------------------------------------------------------*/

  if (PW0QM002.PW0QMSEL != PW0QW00.PW0QMSEL /* New selection cd*/
   || PW0QW00.PW0QWSWU == "Y")              /* or updates were requested*/

    return; /* Get out of this routine*/

  end

   /* ------------------------------------------------------------*/
   /* A new DNSB Date is needed, look for it.*/
   /* ------------------------------------------------------------*/

  PW0QW00.PW0QWSWZ = "N"; /* Assume no end of DNSB Dates*/

  while (PW0QW00.PW0QWSWZ == "N"                       /* Not at end of DNSB Dates*/
   && PWKREC.OP1DSBDT[PW0QWIXD] == PW0QW00.PW0QWPDT /* and same date*/
   && PWKREC.TF1CARCD[PW0QWIXD] == PW0QW00.PW0QWPCR) /* and same carrier*/

    PW0QW00.PW0QWIXD = PW0QW00.PW0QWIXD + 1; /* Point to next entry*/

    if (PW0QW00.PW0QWIXD > PWKREC.PWKARMAX) /* No more in current array*/

      if (PW0QW00.PW0QWIXD > 25 /* Array was full*/
       && PKWREC.PKWINDEX < 3)  /* but there are other arrays*/

        PKWREC.PKWINDEX = PKWREC.PKWINDEX + 1;
        PWKREC.PWKARRAY = PKWREC.PKWARRAY[PKWINDEX]; /* Get next 25*/
        PW0QW00.PW0QWIXD = 1;

        if (PW0QW00.PW0QWIXD > PWKREC.PWKARMAX)

          PW0QW00.PW0QWSWZ = "Y"; /* No more dates*/

        end

      else

        PW0QW00.PW0QWSWZ = "Y"; /* No more dates*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* See if new DNSB Date was found.*/
   /* ------------------------------------------------------------*/

  if (PW0QW00.PW0QWSWZ == "N") /* No end of DNSB Dates array*/

    PW0QW00.PW0QWPDT = PWKREC.OP1DSBDT[PW0QWIXD]; /* Save new dnsbd*/
    PW0QW00.PW0QWPCR = PWKREC.TF1CARCD[PW0QWIXD]; /* & new carrier*/

    return; /* Get out of this routine*/

  end

   /* ------------------------------------------------------------*/
   /* No more DNSB Dates found.*/
   /* ------------------------------------------------------------*/

  set PW0QM002 initial;

  PW0QM002.XWHCD = PKWREC.XWHCD; /* Warehouse cd to map*/
  set PW0QM002.PW0QMCHC skip, invisible; /* Do not allow entry*/
  set PW0QM002.PW0QMCMM skip, invisible; /* "*/
  set PW0QM002.PW0QMCDD skip, invisible; /* "*/
  set PW0QM002.PW0QMCYY skip, invisible; /* "*/
  set PW0QM002.PW0QMSEL cursor, skip, invisible; /* "*/
  PW0QW00.PW0QWSWR = "N"; /* Reset request data switch*/
  PW0QW00.XXXMODID = "500"; /* Module identification*/
  converseLib.validationFailed(339); /* No more dnsb dates*/

  exit stack; /* Exit to display map*/


end // end PW0Q-50002

// Verify data in the line
Function PW0Q-52001()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0q-52002 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If action code enterted, edit it.*/
   /* ------------------------------------------------------------*/

  if (PW0QM001.PW0QMACT[PW0QWIXM] != PW0QW01.PW0QMACT[PW0QWIXM]
   && PW0QM001.PW0QMACT[PW0QWIXM] != "S" /* and is not a "s"*/
   && PW0QM001.PW0QMACT[PW0QWIXM] != "D" /* and is not a "d"*/
   && PW0QM001.PW0QMACT[PW0QWIXM] != "I" /* and is not a "i"*/
   && PW0QM001.PW0QMACT[PW0QWIXM] != "H" /* and is not a "h"*/
   && PW0QM001.PW0QMACT[PW0QWIXM] != " ") /* and is not a " "*/

    set PW0QM001.PW0QMACT[PW0QWIXM] cursor, bold; /* Highlight*/
    PW0QW00.XXXMODID = "520"; /* Module identification*/
    converseLib.validationFailed(35); /* Only valid codes may be entered*/

    return; /* Go back to previous routine*/

  end

   /* ------------------------------------------------------------*/
   /* If order has previously been put on hold, no more changes*/
   /* are allowed.*/
   /* ------------------------------------------------------------*/

  if (PW0QM001.PW0QMACT[PW0QWIXM] != PW0QW01.PW0QMACT[PW0QWIXM]
   || PW0QM001.XHRCD[PW0QWIXM] != PW0QW01.XHRCD[PW0QWIXM]
   || PW0QM001.PW0QMRMM[PW0QWIXM] != PW0QW01.PW0QMRMM[PW0QWIXM]
   || PW0QM001.PW0QMRDD[PW0QWIXM] != PW0QW01.PW0QMRDD[PW0QWIXM]
   || PW0QM001.PW0QMRYY[PW0QWIXM] != PW0QW01.PW0QMRYY[PW0QWIXM])

    if (PW0QW01.PW0QWSWH[PW0QWIXM] == "Y") /* Order has been put on hold*/

      PW0QM001.PW0QMACT[PW0QWIXM] = PW0QW01.PW0QMACT[PW0QWIXM];
      PW0QM001.XHRCD[PW0QWIXM] = PW0QW01.XHRCD[PW0QWIXM];
      PW0QM001.PW0QMRMM[PW0QWIXM] = PW0QW01.PW0QMRMM[PW0QWIXM];
      PW0QM001.PW0QMRDD[PW0QWIXM] = PW0QW01.PW0QMRDD[PW0QWIXM];
      PW0QM001.PW0QMRYY[PW0QWIXM] = PW0QW01.PW0QMRYY[PW0QWIXM];
      set PW0QM001.PK1CUOID[PW0QWIXM] bold;
      set PW0QM001.PK1NORID[PW0QWIXM] bold;
      converseLib.validationFailed(169); /* no more chgs allowed - order on hold*/

      return; /* Go back to previous routine*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Validate rest of data entered based on action code.*/
   /* ------------------------------------------------------------*/

  if (PW0QM001.PW0QMACT[PW0QWIXM] == " " /* action cd = 'no action'*/
   || PW0QM001.PW0QMACT[PW0QWIXM] == "S" /* or = 'select'*/
   || PW0QM001.PW0QMACT[PW0QWIXM] == "D" /* or = 'deselect'*/
   || PW0QM001.PW0QMACT[PW0QWIXM] == "I") /* or = 'inquiry'*/

    if (PW0QM001.XHRCD[PW0QWIXM] > " "  /* If reason hold cd*/
     || PW0QM001.PW0QMRMM[PW0QWIXM] > 0 /* or release dt found*/
     || PW0QM001.PW0QMRDD[PW0QWIXM] > 0 
     || PW0QM001.PW0QMRYY[PW0QWIXM] > 0)

      set PW0QM001.PW0QMACT[PW0QWIXM] cursor, bold; /* Highlight*/
      set PW0QM001.XHRCD[PW0QWIXM] bold;
      set PW0QM001.PW0QMRMM[PW0QWIXM] bold;
      set PW0QM001.PW0QMRDD[PW0QWIXM] bold;
      set PW0QM001.PW0QMRYY[PW0QWIXM] bold;
      PW0QW00.XXXMODID = "520"; /* Module identification*/
      converseLib.validationFailed(331); /* Invalid action code*/

    end

  else

    if (PW0QM001.PW0QMACT[PW0QWIXM] == "H") /* Action cd = 'hold'*/

      PW0Q-52101(); /* Edit hold date*/
      PW0Q-52201(); /* Edit hold reason code*/

    end

  end

  if (converseVar.validationMsgNum > 0) /* Errors found*/

    return; /* Go back to previous routine*/

  end

  PW0QW00.PW0QWSWM = "Y"; /* Data entered on screen*/
  PW0QW00.PW0QWSWU = "Y"; /* Update requested*/


end // end PW0Q-52001

// Verify data in the line
Function PW0Q-52002()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0q-52001 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If action code enterted, edit it.*/
   /* ------------------------------------------------------------*/

  if (PW0QM002.PW0QMACT[PW0QWIXM] != PW0QW01.PW0QMACT[PW0QWIXM]
   && PW0QM002.PW0QMACT[PW0QWIXM] != "S" /* and is not a "s"*/
   && PW0QM002.PW0QMACT[PW0QWIXM] != "D" /* and is not a "d"*/
   && PW0QM002.PW0QMACT[PW0QWIXM] != "I" /* and is not a "i"*/
   && PW0QM002.PW0QMACT[PW0QWIXM] != "H" /* and is not a "h"*/
   && PW0QM002.PW0QMACT[PW0QWIXM] != " ") /* and is not a " "*/

    set PW0QM002.PW0QMACT[PW0QWIXM] cursor, bold; /* Highlight*/
    PW0QW00.XXXMODID = "520"; /* Module identification*/
    converseLib.validationFailed(35); /* Only valid codes may be entered*/

    return; /* Go back to previous routine*/

  end

   /* ------------------------------------------------------------*/
   /* If order has previously been put on hold, no more changes*/
   /* are allowed.*/
   /* ------------------------------------------------------------*/

  if (PW0QM002.PW0QMACT[PW0QWIXM] != PW0QW01.PW0QMACT[PW0QWIXM]
   || PW0QM002.XHRCD[PW0QWIXM] != PW0QW01.XHRCD[PW0QWIXM]
   || PW0QM002.PW0QMRMM[PW0QWIXM] != PW0QW01.PW0QMRMM[PW0QWIXM]
   || PW0QM002.PW0QMRDD[PW0QWIXM] != PW0QW01.PW0QMRDD[PW0QWIXM]
   || PW0QM002.PW0QMRYY[PW0QWIXM] != PW0QW01.PW0QMRYY[PW0QWIXM])

    if (PW0QW01.PW0QWSWH[PW0QWIXM] == "Y") /* Order has been put on hold*/

      PW0QM002.PW0QMACT[PW0QWIXM] = PW0QW01.PW0QMACT[PW0QWIXM];
      PW0QM002.XHRCD[PW0QWIXM] = PW0QW01.XHRCD[PW0QWIXM];
      PW0QM002.PW0QMRMM[PW0QWIXM] = PW0QW01.PW0QMRMM[PW0QWIXM];
      PW0QM002.PW0QMRDD[PW0QWIXM] = PW0QW01.PW0QMRDD[PW0QWIXM];
      PW0QM002.PW0QMRYY[PW0QWIXM] = PW0QW01.PW0QMRYY[PW0QWIXM];
      set PW0QM002.PK1CUOID[PW0QWIXM] bold;
      set PW0QM002.PK1NORID[PW0QWIXM] bold;
      converseLib.validationFailed(169); /* no more chgs allowed - order on hold*/

      return; /* Go back to previous routine*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Validate rest of data entered based on action code.*/
   /* ------------------------------------------------------------*/

  if (PW0QM002.PW0QMACT[PW0QWIXM] == " " /* action cd = 'no action'*/
   || PW0QM002.PW0QMACT[PW0QWIXM] == "S" /* or = 'select'*/
   || PW0QM002.PW0QMACT[PW0QWIXM] == "D" /* or = 'deselect'*/
   || PW0QM002.PW0QMACT[PW0QWIXM] == "I") /* or = 'inquiry'*/

    if (PW0QM002.XHRCD[PW0QWIXM] > " "  /* If reason hold cd*/
     || PW0QM002.PW0QMRMM[PW0QWIXM] > 0 /* or release dt found*/
     || PW0QM002.PW0QMRDD[PW0QWIXM] > 0 
     || PW0QM002.PW0QMRYY[PW0QWIXM] > 0)

      set PW0QM002.PW0QMACT[PW0QWIXM] cursor, bold; /* Highlight*/
      set PW0QM002.XHRCD[PW0QWIXM] bold;
      set PW0QM002.PW0QMRMM[PW0QWIXM] bold;
      set PW0QM002.PW0QMRDD[PW0QWIXM] bold;
      set PW0QM002.PW0QMRYY[PW0QWIXM] bold;
      PW0QW00.XXXMODID = "520"; /* Module identification*/
      converseLib.validationFailed(331); /* Invalid action code*/

    end

  else

    if (PW0QM002.PW0QMACT[PW0QWIXM] == "H") /* Action cd = 'hold'*/

      PW0Q-52102(); /* Edit hold date*/
      PW0Q-52202(); /* Edit hold reason code*/

    end

  end

  if (converseVar.validationMsgNum > 0) /* Errors found*/

    return; /* Go back to previous routine*/

  end

  PW0QW00.PW0QWSWM = "Y"; /* Data entered on screen*/
  PW0QW00.PW0QWSWU = "Y"; /* Update requested*/


end // end PW0Q-52002

// Edit order hold release date
Function PW0Q-52101()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0q-52102 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* See if release date was entered.*/
   /* ------------------------------------------------------------*/

  if (PW0QM001.PW0QMRMM[PW0QWIXM] > 0 /* If release date exists*/
   || PW0QM001.PW0QMRDD[PW0QWIXM] > 0 
   || PW0QM001.PW0QMRYY[PW0QWIXM] > 0)

     /* NEXT SENTENCE*/

  else

    converseLib.validationFailed(61); /* Release date is required msg*/
    PW0QW00.XXXMODID = "521";
    set PW0QM001.PW0QMRMM[PW0QWIXM] cursor, bold; /* Highlight*/
    set PW0QM001.PW0QMRDD[PW0QWIXM] bold;
    set PW0QM001.PW0QMRYY[PW0QWIXM] bold;

    return;

  end

   /* ------------------------------------------------------------*/
   /* Validate a keyed release date.*/
   /* ------------------------------------------------------------*/

  set TA9REC empty; /* clear date routine record*/
  TA9REC.TA9BEGMM = PW0QM001.PW0QMRMM[PW0QWIXM];
  TA9REC.TA9BEGDD = PW0QM001.PW0QMRDD[PW0QWIXM];
  TA9REC.TA9BEGYY = PW0QM001.PW0QMRYY[PW0QWIXM];

  if (PW0QM001.PW0QMRYY[PW0QWIXM] > 80)

    TA9REC.TA9BEGCC = 19; /* Set century to 19*/

  else

    TA9REC.TA9BEGCC = 20; /* Otherwise set century to 20*/

  end

  call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation routine*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (TA9REC.TA9RTNFL == 0) /* If date routine ok*/

      if (TA9REC.TA9BEGDT < PW0QW00.PW0QWCDT) /* release dt before today*/

        converseLib.validationFailed(55); /* Date in past msg*/
        PW0QW00.XXXMODID = "521"; /* Module id*/
        set PW0QM001.PW0QMRMM[PW0QWIXM] cursor, bold; /* highlight*/
        set PW0QM001.PW0QMRDD[PW0QWIXM] bold; /* highlight*/
        set PW0QM001.PW0QMRYY[PW0QWIXM] bold; /* highlight*/

      end

    else /* Routine error*/

      PW0QW00.XXXMODID = "521"; /* Module id*/
      set PW0QM001.PW0QMRMM[PW0QWIXM] cursor, bold; /* highlight*/
      set PW0QM001.PW0QMRDD[PW0QWIXM] bold; /* highlight*/
      set PW0QM001.PW0QMRYY[PW0QWIXM] bold; /* highlight*/

      if (TA9REC.TA9RTNFL == 3) /* Invalid work date*/

        converseLib.validationFailed(56); /* Not work date msg*/

      else

        converseLib.validationFailed(158); /* Invalid date msg*/

      end

    end

    return;

  end

   /* ------------------------------------------------------------*/
   /* Unsuccessful call.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* Subroutine parameters*/

  PW0QW00.XXXMODID = "521"; /* Module id*/
  converseLib.validationFailed(29); /* Unexpected error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "VERIFY RELEASE DATE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


end // end PW0Q-52101

// Edit order hold release date
Function PW0Q-52102()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0q-52101 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* See if release date was entered.*/
   /* ------------------------------------------------------------*/

  if (PW0QM002.PW0QMRMM[PW0QWIXM] > 0 /* If release date exists*/
   || PW0QM002.PW0QMRDD[PW0QWIXM] > 0 
   || PW0QM002.PW0QMRYY[PW0QWIXM] > 0)

     /* NEXT SENTENCE*/

  else

    converseLib.validationFailed(61); /* Release date is required msg*/
    PW0QW00.XXXMODID = "521";
    set PW0QM002.PW0QMRMM[PW0QWIXM] cursor, bold; /* Highlight*/
    set PW0QM002.PW0QMRDD[PW0QWIXM] bold;
    set PW0QM002.PW0QMRYY[PW0QWIXM] bold;

    return;

  end

   /* ------------------------------------------------------------*/
   /* Validate a keyed release date.*/
   /* ------------------------------------------------------------*/

  set TA9REC empty; /* clear date routine record*/
  TA9REC.TA9BEGMM = PW0QM002.PW0QMRMM[PW0QWIXM];
  TA9REC.TA9BEGDD = PW0QM002.PW0QMRDD[PW0QWIXM];
  TA9REC.TA9BEGYY = PW0QM002.PW0QMRYY[PW0QWIXM];

  if (PW0QM002.PW0QMRYY[PW0QWIXM] > 80)

    TA9REC.TA9BEGCC = 19; /* Set century to 19*/

  else

    TA9REC.TA9BEGCC = 20; /* Otherwise set century to 20*/

  end

  call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation routine*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (TA9REC.TA9RTNFL == 0) /* If date routine ok*/

      if (TA9REC.TA9BEGDT < PW0QW00.PW0QWCDT) /* release dt before today*/

        converseLib.validationFailed(55); /* Date in past msg*/
        PW0QW00.XXXMODID = "521"; /* Module id*/
        set PW0QM002.PW0QMRMM[PW0QWIXM] cursor, bold; /* highlight*/
        set PW0QM002.PW0QMRDD[PW0QWIXM] bold; /* highlight*/
        set PW0QM002.PW0QMRYY[PW0QWIXM] bold; /* highlight*/

      end

    else /* Routine error*/

      PW0QW00.XXXMODID = "521"; /* Module id*/
      set PW0QM002.PW0QMRMM[PW0QWIXM] cursor, bold; /* highlight*/
      set PW0QM002.PW0QMRDD[PW0QWIXM] bold; /* highlight*/
      set PW0QM002.PW0QMRYY[PW0QWIXM] bold; /* highlight*/

      if (TA9REC.TA9RTNFL == 3) /* Invalid work date*/

        converseLib.validationFailed(56); /* Not work date msg*/

      else

        converseLib.validationFailed(158); /* Invalid date msg*/

      end

    end

    return;

  end

   /* ------------------------------------------------------------*/
   /* Unsuccessful call.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* Subroutine parameters*/

  PW0QW00.XXXMODID = "521"; /* Module id*/
  converseLib.validationFailed(29); /* Unexpected error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "VERIFY RELEASE DATE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


end // end PW0Q-52102

// Edit order hold reason code
Function PW0Q-52201()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0q-52202 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Edit the hold reason code entered.*/
   /* ------------------------------------------------------------*/

  if (PW0QM001.XHRCD[PW0QWIXM] <= " ") /* No hold reason cd entered*/

    set PW0QM001.XHRCD[PW0QWIXM] cursor, bold; /* Highlight*/
    PW0QW00.XXXMODID = "522"; /* Module identification*/
    converseLib.validationFailed(60); /* Reason code required*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Check the hold reason code corporate table.*/
   /* ------------------------------------------------------------*/

   /* MOVE PW0QM001.XHRCD(PW0QWIXM) TO PKAREC.XHRCD;*/

  if (PW0QM001.XHRCD[PW0QWIXM] in XHRTBL.XHRCD /* if reason code on table*/
   && XHRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and is active*/

     /* next sentence*/

  else

    set PW0QM001.XHRCD[PW0QWIXM] cursor, bold; /* Highlight*/
    PW0QW00.XXXMODID = "522"; /* Module identification*/
    converseLib.validationFailed(57); /* Invalid reason code*/

  end



end // end PW0Q-52201

// Edit order hold reason code
Function PW0Q-52202()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0q-52201 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Edit the hold reason code entered.*/
   /* ------------------------------------------------------------*/

  if (PW0QM002.XHRCD[PW0QWIXM] <= " ") /* No hold reason cd entered*/

    set PW0QM002.XHRCD[PW0QWIXM] cursor, bold; /* Highlight*/
    PW0QW00.XXXMODID = "522"; /* Module identification*/
    converseLib.validationFailed(60); /* Reason code required*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Check the hold reason code corporate table.*/
   /* ------------------------------------------------------------*/

   /* MOVE PW0QM002.XHRCD(PW0QWIXM) TO PKAREC.XHRCD;*/

  if (PW0QM002.XHRCD[PW0QWIXM] in XHRTBL.XHRCD /* if reason code on table*/
   && XHRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and is active*/

     /* next sentence*/

  else

    set PW0QM002.XHRCD[PW0QWIXM] cursor, bold; /* Highlight*/
    PW0QW00.XXXMODID = "522"; /* Module identification*/
    converseLib.validationFailed(57); /* Invalid reason code*/

  end



end // end PW0Q-52202

// Edit carrier hold data
Function PW0Q-53001()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0q-53002 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Make sure new data is greater than spaces/zeros.*/
   /* ------------------------------------------------------------*/

  if (PW0QM001.PW0QMCHC > " " /* Carrier hold data exists*/
   || PW0QM001.PW0QMCMM > 0   
   || PW0QM001.PW0QMCDD > 0   
   || PW0QM001.PW0QMCYY > 0) 

     /* NEXT SENTENCE*/

  else

    return; /* Go back to previous routine*/

  end

   /* ------------------------------------------------------------*/
   /* Edit carrier hold data entered.*/
   /* ------------------------------------------------------------*/

  PW0Q-53101(); /* Edit hold date*/

  PW0Q-53201(); /* Edit hold reason code*/

  if (converseVar.validationMsgNum > 0) /* Errors found*/

    return; /* Go back to previous routine*/

  end

  PW0QW00.PW0QWSWM = "Y"; /* Data entered on screen*/
  PW0QW00.PW0QWSWU = "Y"; /* Update requested*/


end // end PW0Q-53001

// Edit carrier hold data
Function PW0Q-53002()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0q-53001 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Make sure new data is greater than spaces/zeros.*/
   /* ------------------------------------------------------------*/

  if (PW0QM002.PW0QMCHC > " " /* Carrier hold data exists*/
   || PW0QM002.PW0QMCMM > 0   
   || PW0QM002.PW0QMCDD > 0   
   || PW0QM002.PW0QMCYY > 0) 

     /* NEXT SENTENCE*/

  else

    return; /* Go back to previous routine*/

  end

   /* ------------------------------------------------------------*/
   /* Edit carrier hold data entered.*/
   /* ------------------------------------------------------------*/

  PW0Q-53102(); /* Edit hold date*/

  PW0Q-53202(); /* Edit hold reason code*/

  if (converseVar.validationMsgNum > 0) /* Errors found*/

    return; /* Go back to previous routine*/

  end

  PW0QW00.PW0QWSWM = "Y"; /* Data entered on screen*/
  PW0QW00.PW0QWSWU = "Y"; /* Update requested*/


end // end PW0Q-53002

// Edit carrier hold release date
Function PW0Q-53101()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0q-53102 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* See if release date was entered.*/
   /* ------------------------------------------------------------*/

  if (PW0QM001.PW0QMCMM > 0 /* If release date exists*/
   || PW0QM001.PW0QMCDD > 0 
   || PW0QM001.PW0QMCYY > 0)

     /* NEXT SENTENCE*/

  else

    converseLib.validationFailed(61); /* Release date is required msg*/
    PW0QW00.XXXMODID = "531";
    set PW0QM001.PW0QMCMM cursor, bold; /* Highlight*/
    set PW0QM001.PW0QMCDD bold;
    set PW0QM001.PW0QMCYY bold;

    return;

  end

   /* ------------------------------------------------------------*/
   /* Validate a keyed release date.*/
   /* ------------------------------------------------------------*/

  set TA9REC empty; /* clear date routine record*/
  TA9REC.TA9BEGMM = PW0QM001.PW0QMCMM;
  TA9REC.TA9BEGDD = PW0QM001.PW0QMCDD;
  TA9REC.TA9BEGYY = PW0QM001.PW0QMCYY;

  if (PW0QM001.PW0QMCYY > 80)

    TA9REC.TA9BEGCC = 19; /* Set century to 19*/

  else

    TA9REC.TA9BEGCC = 20; /* Otherwise set century to 20*/

  end

  call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation routine*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (TA9REC.TA9RTNFL == 0) /* If date routine ok*/

      if (TA9REC.TA9BEGDT < PW0QW00.PW0QWCDT) /* release dt before today*/

        converseLib.validationFailed(55); /* Date in past msg*/
        PW0QW00.XXXMODID = "531"; /* Module id*/
        set PW0QM001.PW0QMCMM cursor, bold; /* highlight*/
        set PW0QM001.PW0QMCDD bold; /* highlight*/
        set PW0QM001.PW0QMCYY bold; /* highlight*/

      end

    else /* Routine error*/

      PW0QW00.XXXMODID = "531"; /* Module id*/
      set PW0QM001.PW0QMCMM cursor, bold; /* highlight*/
      set PW0QM001.PW0QMCDD bold; /* highlight*/
      set PW0QM001.PW0QMCYY bold; /* highlight*/

      if (TA9REC.TA9RTNFL == 3) /* Invalid work date*/

        converseLib.validationFailed(56); /* Not work date msg*/

      else

        converseLib.validationFailed(158); /* Invalid date msg*/

      end

    end

    return;

  end

   /* ------------------------------------------------------------*/
   /* Unsuccessful call.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* Subroutine parameters*/

  PW0QW00.XXXMODID = "531"; /* Module id*/
  converseLib.validationFailed(29); /* Unexpected error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "VERIFY RELEASE DATE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


end // end PW0Q-53101

// Edit carrier hold release date
Function PW0Q-53102()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0q-53101 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* See if release date was entered.*/
   /* ------------------------------------------------------------*/

  if (PW0QM002.PW0QMCMM > 0 /* If release date exists*/
   || PW0QM002.PW0QMCDD > 0 
   || PW0QM002.PW0QMCYY > 0)

     /* NEXT SENTENCE*/

  else

    converseLib.validationFailed(61); /* Release date is required msg*/
    PW0QW00.XXXMODID = "531";
    set PW0QM002.PW0QMCMM cursor, bold; /* Highlight*/
    set PW0QM002.PW0QMCDD bold;
    set PW0QM002.PW0QMCYY bold;

    return;

  end

   /* ------------------------------------------------------------*/
   /* Validate a keyed release date.*/
   /* ------------------------------------------------------------*/

  set TA9REC empty; /* clear date routine record*/
  TA9REC.TA9BEGMM = PW0QM002.PW0QMCMM;
  TA9REC.TA9BEGDD = PW0QM002.PW0QMCDD;
  TA9REC.TA9BEGYY = PW0QM002.PW0QMCYY;

  if (PW0QM002.PW0QMCYY > 80)

    TA9REC.TA9BEGCC = 19; /* Set century to 19*/

  else

    TA9REC.TA9BEGCC = 20; /* Otherwise set century to 20*/

  end

  call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation routine*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (TA9REC.TA9RTNFL == 0) /* If date routine ok*/

      if (TA9REC.TA9BEGDT < PW0QW00.PW0QWCDT) /* release dt before today*/

        converseLib.validationFailed(55); /* Date in past msg*/
        PW0QW00.XXXMODID = "531"; /* Module id*/
        set PW0QM002.PW0QMCMM cursor, bold; /* highlight*/
        set PW0QM002.PW0QMCDD bold; /* highlight*/
        set PW0QM002.PW0QMCYY bold; /* highlight*/

      end

    else /* Routine error*/

      PW0QW00.XXXMODID = "531"; /* Module id*/
      set PW0QM002.PW0QMCMM cursor, bold; /* highlight*/
      set PW0QM002.PW0QMCDD bold; /* highlight*/
      set PW0QM002.PW0QMCYY bold; /* highlight*/

      if (TA9REC.TA9RTNFL == 3) /* Invalid work date*/

        converseLib.validationFailed(56); /* Not work date msg*/

      else

        converseLib.validationFailed(158); /* Invalid date msg*/

      end

    end

    return;

  end

   /* ------------------------------------------------------------*/
   /* Unsuccessful call.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* Subroutine parameters*/

  PW0QW00.XXXMODID = "531"; /* Module id*/
  converseLib.validationFailed(29); /* Unexpected error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "VERIFY RELEASE DATE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


end // end PW0Q-53102

// Edit carrier hold reason cd
Function PW0Q-53201()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0q-53202 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Edit the hold reason code entered.*/
   /* ------------------------------------------------------------*/

  if (PW0QM001.PW0QMCHC <= " ") /* No hold reason cd entered*/

    set PW0QM001.PW0QMCHC cursor, bold; /* Highlight*/
    PW0QW00.XXXMODID = "532"; /* Module identification*/
    converseLib.validationFailed(60); /* Reason code required*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Check the hold reason code corporate table.*/
   /* ------------------------------------------------------------*/

   /* VE PW0QM001.PW0QMCHC TO PKAREC.XHRCD;*/

  if (PW0QM001.PW0QMCHC in XHRTBL.XHRCD /* if reason code on table*/
   && XHRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and is active*/

     /* next sentence*/

  else

    set PW0QM001.PW0QMCHC cursor, bold; /* Highlight*/
    PW0QW00.XXXMODID = "532"; /* Module identification*/
    converseLib.validationFailed(57); /* Invalid reason code*/

  end


end // end PW0Q-53201

// Edit carrier hold reason cd
Function PW0Q-53202()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0q-53201 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Edit the hold reason code entered.*/
   /* ------------------------------------------------------------*/

  if (PW0QM002.PW0QMCHC <= " ") /* No hold reason cd entered*/

    set PW0QM002.PW0QMCHC cursor, bold; /* Highlight*/
    PW0QW00.XXXMODID = "532"; /* Module identification*/
    converseLib.validationFailed(60); /* Reason code required*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Check the hold reason code corporate table.*/
   /* ------------------------------------------------------------*/

   /* VE PW0QM002.PW0QMCHC TO PKAREC.XHRCD;*/

  if (PW0QM002.PW0QMCHC in XHRTBL.XHRCD /* if reason code on table*/
   && XHRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and is active*/

     /* next sentence*/

  else

    set PW0QM002.PW0QMCHC cursor, bold; /* Highlight*/
    PW0QW00.XXXMODID = "532"; /* Module identification*/
    converseLib.validationFailed(57); /* Invalid reason code*/

  end


end // end PW0Q-53202

// Check the FROM application
Function PW0Q000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "PW0P" /* From allowed application*/
   || COMMAREA.CAFROMAP == "PW0R" 
   || COMMAREA.CAFROMAP == "PW0O" 
   || COMMAREA.CAFROMAP == "GD00")

    COMMAREA.CAFROMAP = COMMAREA.CACURRAP; /* save curr application*/

    XPPK003(); /* Validate passed warehouse*/

  else

    COMMAREA.CATOAPP = COMMAREA.CAFROMAP;

    XSNOWAY(); /* Invalid transfer was attempted*/

  end


end // end PW0Q000

// Main process to display a map
Function PW0Q001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW0Q100(); /* Obtain the data to display*/

  PW0Q200(); /* Format and display the map*/

  PW0Q300(); /* Check attention identifier*/

  PW0Q400(); /* Reset fields to normal intensity*/

  PW0Q500(); /* Verify the entered data*/

  PW0Q600(); /* Process valid input request*/


end // end PW0Q001

// Obtain the data to display
Function PW0Q100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PW0QW00.PW0QWSWR == "N" /* Data was not requested*/
   || converseVar.validationMsgNum > 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  PW0QW00.XXXTSLEN = 360; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (PW0QW00.XXXMSGNO == 0) /* No message to display*/

    PW0QW00.XXXTSPAG = 1; /* Page number to display*/

  end

   /* ------------------------------------------------------------*/
   /* Get carrier description.*/
   /* ------------------------------------------------------------*/

  PW0Q105(); /* Get carrier description*/

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  PW0Q110(); /* Purge any temporary storage*/


  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW0QW00.PW0QMSEL = PW0QM002.PW0QMSEL; /* Selection cd*/
    PW0QW00.PW0QMCHC = PW0QM002.PW0QMCHC; /* Carrier hold cd*/
    PW0QW00.PW0QMCMM = PW0QM002.PW0QMCMM; /* Carrier hold date*/
    PW0QW00.PW0QMCDD = PW0QM002.PW0QMCDD;
    PW0QW00.PW0QMCYY = PW0QM002.PW0QMCYY;
  else
    PW0QW00.PW0QMSEL = PW0QM001.PW0QMSEL; /* Selection cd*/
    PW0QW00.PW0QMCHC = PW0QM001.PW0QMCHC; /* Carrier hold cd*/
    PW0QW00.PW0QMCMM = PW0QM001.PW0QMCMM; /* Carrier hold date*/
    PW0QW00.PW0QMCDD = PW0QM001.PW0QMCDD;
    PW0QW00.PW0QMCYY = PW0QM001.PW0QMCYY;
  end


   /* ------------------------------------------------------------*/
   /* See if carrier's release date is ok.*/
   /* ------------------------------------------------------------*/

  PW0QW00.PW0QWSWP = "Y"; /* Assume process order = yes*/

  PW0Q130(); /* See if carrier is on hold*/

  if (PW0QW00.PW0QWSWP == "N") /* Carrier is on hold*/

    PW0QW00.XXXMODID = "100"; /* Module identification*/
    PW0QW00.XXXMSGNO = 31; /* No data was found to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  PW0Q120(); /* Select set and open order cursor*/

  PW0QW00.PW0QWIXM = 1; /* Display line index*/
  PW0QW00.PW0QWSWC = "N"; /* End of cursor switch*/

   /* ------------------------------------------------------------*/
   /* Fetch row & format data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (PW0QW00.PW0QWSWC == "N") /* Until end of cursor*/

    PW0QW00.PW0QWSWP = "Y"; /* Assume process order = yes*/

    PW0Q121(); /* Fetch row in the cursor*/

    /* ------------------------------------------------------------*/
     /* See if it is ok to process the order*/
    /* ------------------------------------------------------------*/

    if (PW0QW00.PW0QWSWC == "N" /* If row found*/
     && PW0QW00.PW0QWSWP == "Y") /* and ok to process*/

      /* ------------------------------------------------------------*/
       /* If pick planning - exclude orders that have been picked*/
      /* ------------------------------------------------------------*/
      if (PKWREC.PKWSELSW == "PP" /* if pick planning*/
       && PK4REC.PK4SLIND == "S") /* and order already selected*/
         /* next sentence*/
      else
        /* ------------------------------------------------------------*/
        /* If order hold, check order hold release date.*/
        /* ------------------------------------------------------------*/

        PW0Q140(); /* Check release dt in ord hold tbl*/

        /* ------------------------------------------------------------*/
        /* If customer hold, check customer hold release date.*/
        /* ------------------------------------------------------------*/

        PW0Q150(); /* Check release dt in cust hold tbl*/

        /* ------------------------------------------------------------*/
        /* See if it is still ok to process the order.*/
        /* ------------------------------------------------------------*/

        if (PW0QW00.PW0QWSWP == "Y") /* If still ok to process order*/

          /* ------------------------------------------------------------*/
          /* Get and summarize all items for the order.*/
          /* ------------------------------------------------------------*/

          PW0Q160(); /* Get order items data*/

          /* ------------------------------------------------------------*/
          /* Save the data in display storage.*/
          /* ------------------------------------------------------------*/

          PW0Q170(); /* Save data in display storage*/

          /* ------------------------------------------------------------*/
          /* If the page is full, add the page to the storage queue.*/
          /* ------------------------------------------------------------*/

          if (PW0QW00.PW0QWIXM > 10) /* Page is full*/

            PW0Q180(); /* Add page to temporary storage*/

            PW0QW00.PW0QWIXM = 1; /* Display line index*/

          end

        end

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PW0QW00.PW0QWIXM > 1) /* Page was formatted*/

    PW0Q180(); /* Add page to temporary storage*/

  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PW0Q123(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (PW0QW00.TA5TSQIX > 0) /* Pages formatted*/

    PW0QW00.PW0QWSWF = "Y"; /* Format screen*/

  else

    PW0QW00.XXXMODID = "100"; /* Module identification*/
    PW0QW00.XXXMSGNO = 31; /* No data was found to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW0QW00.PW0QWSWR = "N"; /* Request for data switch*/


end // end PW0Q100

// Get carrier description
Function PW0Q105()
   /* ------------------------------------------------------------*/
   /* See if carrier code same as last time.*/
   /* ------------------------------------------------------------*/

  if (PWKREC.TF1CARCD[PW0QWIXD] == TF1REC.TF1CARCD) /* Same carrier code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Call the carrier module io module.*/
   /* ------------------------------------------------------------*/

  set TF1REC empty; /* Clear hold reason cd row*/

  TF1REC.TF1CARCD = PWKREC.TF1CARCD[PW0QWIXD]; /* Carrier cd*/

  try
    call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select tbl set*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      TF1REC.TF1ABRV = "UNKWOWN CARR";
      PW0QW00.XXXMODID = "105"; /* Module identification*/
      PW0QW00.XXXMSGNO = 323; /* Carrier desc not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  PW0QW00.XXXMODID = "105"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT CARRIER TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCARR001"; /* Table view name*/
  TA1REC.TA1TBLKE = TF1REC.TF1KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q105

// Purge any temporary storage
Function PW0Q110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PW0QW01 empty; /* M001 display storage*/

  PW0QW00.PW0QWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PW0QW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PW0QW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0QW00.XXXMODID = "110"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q110

// VPOOLH01 select set & open crs
Function PW0Q120()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* Clear row storage area*/

  PK4REC.XWHCD = PKWREC.XWHCD; /* whse*/
  PK4REC.XDVCD = PKWREC.XDVCD[1]; /* division code*/
  PK4REC.XBCCD = PKWREC.XBCCD[1]; /* brand code*/
  PK4REC.OP1DSBDT = PWKREC.OP1DSBDT[PW0QWIXD];
  PK4REC.TF1CARCD = PWKREC.TF1CARCD[PW0QWIXD];
  PK4REC.PK4ORHLD = "*";
  PK4REC.PK4CUHLD = "*";
  PK4REC.OP1SPHDF = "N";
  PK4REC.XGPCD = "*";

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW0QM002.PW0QMSEL == "A") /* Select all orders*/
      PK4REC.PK4SLIND = "*";
    else

      if (PW0QM002.PW0QMSEL == "S") /* Select only "selected" orders*/

        if (PW0QW00.PKURUNMD == " ") /* Run mode = "picking"*/
          PK4REC.PK4SLIND = "S";
        else
          PK4REC.PK4SLIND = "*";
        end

      else /* Only "not selected"*/
        PK4REC.PK4SLIND = " ";
      end

    end
  else
    if (PW0QM001.PW0QMSEL == "A") /* Select all orders*/
      PK4REC.PK4SLIND = "*";
    else

      if (PW0QM001.PW0QMSEL == "S") /* Select only "selected" orders*/

        if (PW0QW00.PKURUNMD == " ") /* Run mode = "picking"*/
          PK4REC.PK4SLIND = "S";
        else
          PK4REC.PK4SLIND = "*";
        end

      else /* Only "not selected"*/
        PK4REC.PK4SLIND = " ";
      end

    end
  end


  try
    call "IO1720" ("S7", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, go back to previous routine.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0QW00.XXXMODID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q120

// Fetch next row in the cursor
Function PW0Q121()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1720" ("N7", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0Q122(); /* See if ok to proccess order*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0QW00.PW0QWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0QW00.XXXMODID = "121"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q121

// See if ok to process order
Function PW0Q122()
   /* ------------------------------------------------------------*/
   /* See if ok to process this order.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW0QM002.XBCCD == "*" /* ColeHaan*/
     && PK4REC.XBCCD == "08")

      PW0QW00.PW0QWSWP = "N"; /* Do not process this order*/
      return; /* Return to previous process*/
    end
  else
    if (PW0QM001.XBCCD == "*" /* ColeHaan*/
     && PK4REC.XBCCD == "08")

      PW0QW00.PW0QWSWP = "N"; /* Do not process this order*/
      return; /* Return to previous process*/
    end
  end

  if (PK4REC.XDVCD == "01" /* If In-store promo order*/
   && PK4REC.XGPCD == "01")

    PW0QW00.PW0QWSWP = "N"; /* Do not process this order*/
    return; /* Return to previous process*/
  end

  if (PK4REC.PK4STKTF == "Y") /* If "stock transfer"*/
    PW0QW00.PW0QWSWP = "N"; /* Do not process this order*/
    return; /* Return to previous process*/
  end

  if (PK4REC.XOTCD == "FV") /* If "basics order"*/
    PW0QW00.PW0QWSWP = "N"; /* Do not process this order*/
    return; /* Return to previous process*/
  end

  PW0Q125(); /* Check for B-Grades and Closeouts*/

  if (PW0QW00.PW0QWSWP == "N") /* If do not process*/
    return; /* Return to previous process*/
  end

  if (PW0QW00.PKURUNMD == " ") /* Run mode = "picking"*/

    if (PW0QM002.PW0QMSEL == "A") /* All orders to be processed*/

      if (PK4REC.PK4SLIND != " "
       && PK4REC.PK4SLIND != "S")

        PW0QW00.PW0QWSWP = "N"; /* Do not process this order*/
      end
    else

      if (PW0QM002.PW0QMSEL == "S") /* Selected orders to be processed*/

        if (PK4REC.PK4SLIND != "S")
          PW0QW00.PW0QWSWP = "N"; /* Do not process this order*/
        end

      else /* Non-selected orders to be processed*/

        if (PK4REC.PK4SLIND != " ")
          PW0QW00.PW0QWSWP = "N"; /* Do not process this order*/
        end
      end
    end

  else /* Run mode = "pick planning"*/

    if (PW0QM001.PW0QMSEL == "A") /* All orders to be processed*/

      if (PK4REC.PK4SLIND != " "
       && PK4REC.PK4SLIND != "S"
       && PK4REC.PK4SLIND != "P")

        PW0QW00.PW0QWSWP = "N"; /* Do not process this order*/
      end
    else

      if (PW0QM001.PW0QMSEL == "S") /* Selected orders to be processed*/

        if (PK4REC.PK4SLIND != "S"
         && PK4REC.PK4SLIND != "P")

          PW0QW00.PW0QWSWP = "N"; /* Do not process this order*/
        end
      else /* Non-selected orders to be processed*/
        if (PK4REC.PK4SLIND != " ")
          PW0QW00.PW0QWSWP = "N"; /* Do not process this order*/
        end
      end
    end
  end

end // end PW0Q122

// Close selected set cursor
Function PW0Q123()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1720" ("C7", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0QW00.XXXMODID = "123"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q123

// Verify B-Grades and Closeouts
Function PW0Q125()
   /* -----------------------------------------------------------------*/
   /* This process determines whether the order is b-grade or*/
   /* closeout and a flag is set NOT to process those orders.*/
   /*  */
   /* XPPK005 passes a return code in PKW-ORDER-TYP-IND field.*/
   /* 'B' for b-grade*/
   /* 'C' for closeout*/
   /* ' ' for regular order*/
   /*  */
   /* The order type is found from the sales office number (XSOCD) and*/
   /* base order type code (XOBCD).*/
   /* -------------------------------------------------------------------*/


  XPPK005();

  if (PKWREC.PKW-ORDER-TYP-IND == "B"
   || PKWREC.PKW-ORDER-TYP-IND == "C")

    PW0QW00.PW0QWSWP = "N"; /* do not process*/

  end


end // end PW0Q125

// Check carrier on hold rlse dt
Function PW0Q130()
   /* ------------------------------------------------------------*/
   /* Open and fetch carrier hold table cursor.*/
   /* ------------------------------------------------------------*/

  PW0QW00.PW0QWSWW = "N"; /* Set work cursor flag to no*/

  PW0Q131(); /* Set table cursor*/

  while (PW0QW00.PW0QWSWW == "N" /* Until at end of cursor*/
   && PW0QW00.PW0QWSWP == "Y") /* and still ok to process*/

    PW0Q132(); /* Fetch row & verify rlse date*/

  end

  PW0Q134(); /* Close table cursor*/


end // end PW0Q130

// Dpick.Vcahld01 - open cursor
Function PW0Q131()
   /* ------------------------------------------------------------*/
   /* Open table cursor.*/
   /* ------------------------------------------------------------*/

  set PWFREC empty; /* Row storage area*/

  PWFREC.XWHCD = PKWREC.XWHCD; /* Warehouse code*/
  PWFREC.TF1CARCD = PK4REC.TF1CARCD; /* Carrier code*/
  PWFREC.XHRCD = "*"; /* Wildcard hold reason code*/

  try
    call "IO3190" ("S1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0QW00.XXXMODID = "131"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q131

// Fetch next Dpick.vcahld01 row
Function PW0Q132()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("N1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* See if successful return.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0Q133(); /* validate release date*/

      return;

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PW0QWSWW = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PW0QW00.XXXMODID = "132"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q132

// Validate carrier hold rlse dt
Function PW0Q133()
   /* ------------------------------------------------------------*/
   /* Validate the appropriate carrier hold release date, based*/
   /* on whether user is in 'picking' or 'pick planning' mode.*/
   /* ------------------------------------------------------------*/

  if (PW0QW00.PKURUNMD == " ") /* If run mode is Picking*/

    if (PWFREC.PKBRELDT > PW0QW00.PW0QWCDT) /* Rlse dt gt current dt*/

      PW0QW00.PW0QWSWP = "N"; /* Not ok to process order*/

    end

  else /* Run mode is Planning*/

    if (PWFREC.PKBPLRDT > PW0QW00.PW0QWCDT) /* Plan date le current dt*/

      PW0QW00.PW0QWSWP = "N"; /* Not ok to process order*/

    end

  end


end // end PW0Q133

// Dpick.Vcahld01 - close cursor
Function PW0Q134()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("C1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0QW00.XXXMODID = "134"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q134

// Check order on hold rlse date
Function PW0Q140()
   /* ------------------------------------------------------------*/
   /* If order is not okay to process, get out of this routine.*/
   /* ------------------------------------------------------------*/

  if (PW0QWSWP == "N" /* if not okay to process*/
   || PK4REC.PK4ORHLD == "N") /* or not order hold*/

    return; /* return*/

  end

   /* ------------------------------------------------------------*/
   /* Open and fetch order hold table cursor.*/
   /* ------------------------------------------------------------*/

  PW0QW00.PW0QWSWW = "N"; /* Set work cursor flag to no*/

  PW0Q141(); /* Set table cursor*/

  while (PW0QW00.PW0QWSWW == "N" /* Until at end of cursor*/
   && PW0QW00.PW0QWSWP == "Y") /* and still ok to process*/

    PW0Q142(); /* Fetch row & verify rlse date*/

  end

  PW0Q144(); /* Close table cursor*/


end // end PW0Q140

// Dpick.Vorhld01 - open cursor
Function PW0Q141()
   /* ------------------------------------------------------------*/
   /* Open table cursor.*/
   /* ------------------------------------------------------------*/

  set PKBREC empty; /* Row storage area*/

  PKBREC.XWHCD = PKWREC.XWHCD; /* Warehouse code*/
  PKBREC.PK1CUOID = PK4REC.PK1CUOID; /* Order number*/
  PKBREC.PK1NORID = PK4REC.PK1NORID; /* Nike order number*/

  try
    call "IO1770" ("S1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0QW00.XXXMODID = "141"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q141

// Fetch next-Dpick.Vorhld01
Function PW0Q142()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("N1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* See if successful return.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0Q143(); /* validate release date*/

      return;

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PW0QWSWW = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0QW00.XXXMODID = "142"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q142

// Validate customer hold rlse dt
Function PW0Q143()
   /* ------------------------------------------------------------*/
   /* Validate the appropriate order hold release date, based*/
   /* on whether user is in 'picking' or 'pick planning' mode.*/
   /* ------------------------------------------------------------*/

  if (PW0QW00.PKURUNMD == " ") /* If run mode is Picking*/

    if (PKBREC.PKBRELDT > PW0QW00.PW0QWCDT) /* Rlse dt gt current dt*/

      PW0QW00.PW0QWSWP = "N"; /* Not ok to process order*/

    end

  else /* Run mode is Planning*/

    if (PKBREC.PKBPLRDT > PW0QW00.PW0QWCDT) /* Plan date le current dt*/

      PW0QW00.PW0QWSWP = "N"; /* Not ok to process order*/

    end

  end


end // end PW0Q143

// Dpick.Vorhld01 - close cursor
Function PW0Q144()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("C1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0QW00.XXXMODID = "144"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q144

// Check customer on hold rlse dt
Function PW0Q150()
   /* ------------------------------------------------------------*/
   /* If order is not okay to process, get out of this routine.*/
   /* ------------------------------------------------------------*/

  if (PW0QWSWP == "N" /* if not okay to process*/
   || PK4REC.PK4CUHLD == "N") /* or not customer hold*/

    return; /* return*/

  end

   /* ------------------------------------------------------------*/
   /* Open and fetch customer hold table cursor.*/
   /* ------------------------------------------------------------*/

  PW0QW00.PW0QWSWW = "N"; /* Set work cursor flag to no*/

  PW0Q151(); /* Set table cursor*/

  while (PW0QW00.PW0QWSWW == "N" /* Until at end of cursor*/
   && PW0QW00.PW0QWSWP == "Y") /* and still ok to process*/

    PW0Q152(); /* Fetch row & verify rlse date*/

  end

  PW0Q154(); /* Close table cursor*/


end // end PW0Q150

// Dpick.Vcuhld01 - open cursor
Function PW0Q151()
   /* ------------------------------------------------------------*/
   /* Open table cursor.*/
   /* ------------------------------------------------------------*/

  set PK9REC empty; /* Row storage area*/

  PK9REC.XWHCD = PKWREC.XWHCD; /* Warehouse code*/
  PK9REC.KUCCOID = PK4REC.KUCCOID;
  PK9REC.KUMSTRID = PK4REC.KUMSTRID;
  PK9REC.XNXCD = PK4REC.XNXCD;

  try
    call "IO1790" ("S1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0QW00.XXXMODID = "151"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q151

// Fetch next-Dpick.Vcuhld01
Function PW0Q152()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("N1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* See if successful return.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0Q153(); /* validate release date*/

      return;

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PW0QWSWW = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0QW00.XXXMODID = "152"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q152

// Validate order hold rlse date
Function PW0Q153()
   /* ------------------------------------------------------------*/
   /* Validate the appropriate customer hold release date, based*/
   /* on whether user is in 'picking' or 'pick planning' mode.*/
   /* ------------------------------------------------------------*/

  if (PW0QW00.PKURUNMD == " ") /* If run mode is Picking*/

    if (PK9REC.PK9RELDT > PW0QW00.PW0QWCDT) /* Rlse dt gt current dt*/

      PW0QW00.PW0QWSWP = "N"; /* Not ok to process order*/

    end

  else /* Run mode is Planning*/

    if (PK9REC.PK9PLRDT > PW0QW00.PW0QWCDT) /* Plan date le current dt*/

      PW0QW00.PW0QWSWP = "N"; /* Not ok to process order*/

    end

  end


end // end PW0Q153

// Dpick.Vcuhld01 - close cursor
Function PW0Q154()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("C1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0QW00.XXXMODID = "154"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q154

// Get & summarize items for ordr
Function PW0Q160()
   /* ------------------------------------------------------------*/
   /* Process and sumarize all items for the order.*/
   /* ------------------------------------------------------------*/

  PW0QW00.PW0QWNUM = 0; /* clear work field*/
  PW0QW00.PW0QWDFC = 0; /* clear detail fc field*/
  PW0QW00.PW0QWDRP = 0; /* clear detail repack field*/
  PW0QW00.PW0QWTFC = 0; /* clear total fc field*/
  PW0QW00.PW0QWTRP = 0; /* clear total repack field*/

  PW0QW00.PW0QWSWW = "N"; /* Set work cursor flag to no*/

  PW0Q161(); /* Set item table cursor*/

  while (PW0QW00.PW0QWSWW == "N") /* Until at end of cursor*/

    PW0Q162(); /* Fetch next item row*/

  end

  PW0Q164(); /* Close item table cursor*/


end // end PW0Q160

// Dpick.Vpooli01 - open cursor
Function PW0Q161()
   /* ------------------------------------------------------------*/
   /* Open table cursor.*/
   /* ------------------------------------------------------------*/

  set PK5REC empty; /* Clear row storage area*/

  PK5REC.XWHCD = PKWREC.XWHCD; /* Warehouse code*/
  PK5REC.PK1CUOID = PK4REC.PK1CUOID; /* Customer order number*/
  PK5REC.PK1NORID = PK4REC.PK1NORID; /* Nike order number*/

  try
    call "IO1990" ("S1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0QW00.XXXMODID = "161"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK5REC.PK5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q161

// Fetch next-Dpick.Vpooli01
Function PW0Q162()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1990" ("N1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* See if successful return.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0QW00.PW0QWTFC = PW0QW00.PW0QWTFC + PK5REC.PK5ITMFC;
      PW0QW00.PW0QWTRP = PW0QW00.PW0QWTRP + PK5REC.PK5ITMRP;

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0QW00.PW0QWSWW = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0QW00.XXXMODID = "162"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK5REC.PK5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q162

// Dpick.Vpooli01 - close cursor
Function PW0Q164()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1990" ("C1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0QW00.XXXMODID = "164"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q164

// Save data in display storage
Function PW0Q170()
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  PW0QW01.PW0QMACT[PW0QWIXM] = " ";
  PW0QW01.PK1CUOID[PW0QWIXM] = PK4REC.PK1CUOID;
  PW0QW01.PK1NORID[PW0QWIXM] = PK4REC.PK1NORID;
  PW0QW01.TF2DSTCD[PW0QWIXM] = PK4REC.TF2DSTCD;
  PW0QW01.PW0QMRFC[PW0QWIXM] = PW0QW00.PW0QWTFC;
  PW0QW01.PW0QMRRP[PW0QWIXM] = PW0QW00.PW0QWTRP;

  if (PK4REC.PK4SLIND == "S" /* If order has been selected*/
   || PK4REC.PK4SLIND == "P")

    PW0QW01.PK4SLIND[PW0QWIXM] = "Y";

  else

    PW0QW01.PK4SLIND[PW0QWIXM] = "N";

  end

  PW0QW00.PW0QWIXM = PW0QW00.PW0QWIXM + 1; /* Increment line index*/


end // end PW0Q170

// Add page to temporary storage
Function PW0Q180()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PW0QW01.XXXTSLEN = PW0QW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PW0QW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  set PW0QW01 empty; /* M001 display storage*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    PW0QW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0QW00.XXXMODID = "180"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q180

// Format and converse the map
Function PW0Q200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    PW0QW00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PW0QW00.PW0QWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PW0QW00.PW0QWSWF == "Y") /* Map must be formatted*/

      if (PKWREC.PKWSELSW == "PK") /* picking*/

        PW0Q-21002(); /* Format the data on the map*/
      else
        PW0Q-21001(); /* Format the data on the map*/
      end
    end
  end


  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW0Q-20002();
  else
    PW0Q-20001(); /* pick planning*/
  end

end // end PW0Q200

// Check attention identifier
Function PW0Q300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PW0QW00.PW0QWSWR == "Y") /* Request for data*/

      set PW0QW01 empty; /* maps display storage*/

    end

    PW0QW00.PW0QWSWF = "Y"; /* Format the map switch on*/
    PW0QW00.PW0QWSWR = "N"; /* Request for data switch off*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, this is an error.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW0QM002.CATOAP > " ") /* FAST PATH was requested*/
      if (converseVar.eventKey is enter) /* ENTER was pressed*/
        if (PW0QM002.CATOAP != "PW0Q") /* FAST PATH not to itself*/
          PW0Q110(); /* Purge temporary storage*/
          XSPKS01(); /* Exit to another application*/
          PW0QW00.PW0QWSWR = "Y"; /* Need to recreate t/s*/
          PW0QW00.PW0QWSWF = "Y"; /* Need to reformat screen*/
          PW0QW00.PW0QWSWB = "Y"; /* Bad Fast Path switch on*/
        else
          converseLib.validationFailed(1); /* Invalid FAST PATH option*/
        end
      else
        converseLib.validationFailed(13); /* PA/PF key may not be used*/
      end
      set PW0QM002.CATOAP cursor, bold; /* Highlight*/
      PW0QW00.XXXMODID = "300"; /* Module identification*/
      exit stack; /* Exit to display map*/
    end
  else
    if (PW0QM001.CATOAP > " ") /* FAST PATH was requested*/
      if (converseVar.eventKey is enter) /* ENTER was pressed*/
        if (PW0QM001.CATOAP != "PW0Q") /* FAST PATH not to itself*/
          PW0Q110(); /* Purge temporary storage*/
          XSPKS01(); /* Exit to another application*/
          PW0QW00.PW0QWSWR = "Y"; /* Need to recreate t/s*/
          PW0QW00.PW0QWSWF = "Y"; /* Need to reformat screen*/
          PW0QW00.PW0QWSWB = "Y"; /* Bad Fast Path switch on*/
        else
          converseLib.validationFailed(1); /* Invalid FAST PATH option*/
        end
      else
        converseLib.validationFailed(13); /* PA/PF key may not be used*/
      end
      set PW0QM001.CATOAP cursor, bold; /* Highlight*/
      PW0QW00.XXXMODID = "300"; /* Module identification*/
      exit stack; /* Exit to display map*/
    end
  end


   /* ------------------------------------------------------------*/
   /* If PF1, PF3, PF4, or PF5 exit to another application.*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/

      if (PKWREC.PKWSELSW == "PK") /* picking*/
        COMMAREA.CAITEM = "PW0QM002"; /* Application find code*/
      else
        COMMAREA.CAITEM = "PW0QM001"; /* Application find code*/
      end

    else

      if (converseVar.eventKey is pf3) /* PF3 was pressed*/

        COMMAREA.CATOAP = "PW0P"; /* TO application*/

      else

        if (converseVar.eventKey is pf5) /* PF5 was pressed*/

          COMMAREA.CATOAP = "PW0R"; /* TO application*/

        end

      end

    end

    PW0Q110(); /* Purge temporary storage*/

    PKWREC.PKWARRAY[PKWINDEX] = PWKREC.PWKARRAY;

    XSPKS01(); /* Exit to another application*/

    PW0QW00.XXXMODID = "300"; /* Module identification*/
    PW0QW00.PW0QWSWR = "Y"; /* Need to recreate t/s*/
    PW0QW00.PW0QWSWF = "Y"; /* Need to reformat screen*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    PW0QW00.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If no more DNSB Dates, do not allow ENTER, PF7, or PF8.*/
   /* ------------------------------------------------------------*/

  if (PW0QW00.PW0QWSWZ == "Y") /* No more dnsb dates*/

    PW0QW00.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(339); /* No more dnsbd to display*/

    exit stack; /* Exit to display map*/

  end


end // end PW0Q300

// Reset highlighted fields
Function PW0Q400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/

    set PW0QM002.PW0QMCHC initialAttributes; /* Carrier hold cd*/
    set PW0QM002.PW0QMCMM initialAttributes; /* Carrier hold rlse dt*/
    set PW0QM002.PW0QMCDD initialAttributes;
    set PW0QM002.PW0QMCYY initialAttributes;
    set PW0QM002.PW0QMSEL initialAttributes; /* Select code*/

    PW0QW00.PW0QWIXM = 1; /* Initialize line index*/

    while (PW0QW00.PW0QWIXM <= 10 /* Until end of lines*/
     && PW0QM002.PK1CUOID[PW0QWIXM] > 0) /* or no more data in map*/

      set PW0QM002.PW0QMACT[PW0QWIXM] normal; /* Reset attributes*/
      set PW0QM002.XHRCD[PW0QWIXM] normal;
      set PW0QM002.PW0QMRMM[PW0QWIXM] normal;
      set PW0QM002.PW0QMRDD[PW0QWIXM] normal;
      set PW0QM002.PW0QMRYY[PW0QWIXM] normal;

      PW0QW00.PW0QWIXM = PW0QW00.PW0QWIXM + 1; /* Increment line index*/

    end

    set PW0QM002.CATOAP initialAttributes; /* TO application*/
    set PW0QM001.CAITEM initialAttributes; /* Application data*/

  else
    set PW0QM001.PW0QMCHC initialAttributes; /* Carrier hold cd*/
    set PW0QM001.PW0QMCMM initialAttributes; /* Carrier hold rlse dt*/
    set PW0QM001.PW0QMCDD initialAttributes;
    set PW0QM001.PW0QMCYY initialAttributes;
    set PW0QM001.PW0QMSEL initialAttributes; /* Select code*/

    PW0QW00.PW0QWIXM = 1; /* Initialize line index*/

    while (PW0QW00.PW0QWIXM <= 10 /* Until end of lines*/
     && PW0QM001.PK1CUOID[PW0QWIXM] > 0) /* or no more data in map*/

      set PW0QM001.PW0QMACT[PW0QWIXM] normal; /* Reset attributes*/
      set PW0QM001.XHRCD[PW0QWIXM] normal;
      set PW0QM001.PW0QMRMM[PW0QWIXM] normal;
      set PW0QM001.PW0QMRDD[PW0QWIXM] normal;
      set PW0QM001.PW0QMRYY[PW0QWIXM] normal;

      PW0QW00.PW0QWIXM = PW0QW00.PW0QWIXM + 1; /* Increment line index*/

    end

    set PW0QM001.CATOAP initialAttributes; /* TO application*/
    set PW0QM001.CAITEM initialAttributes; /* Application data*/

  end

   /* ------------------------------------------------------------*/
   /* If any '?' found in hold cd, display pop-up window for cds*/
   /* ------------------------------------------------------------*/

  if ("?" in PW0QM001.XHRCD /* If a '?' in any of the hold codes*/
   || "?" in PW0QM002.XHRCD) /* If a '?' in any of the hold codes*/

    if (converseVar.eventKey is enter)

      PW0QW00.PW0QWIXM = sysVar.arrayIndex; /* set index*/

      PW0Q410(); /* Display pop-up window*/

    else
      if (PKWREC.PKWSELSW == "PK") /* picking*/
        set PW0QM002.XHRCD[PW0QWIXM] bold; /* Highlight*/
      else
        set PW0QM001.XHRCD[PW0QWIXM] bold; /* Highlight*/
      end

      PW0QW00.XXXMODID = "400"; /* Module id*/
      converseLib.validationFailed(320); /* Option only valid w/enter*/

      exit stack; /* Exit to display map*/

    end

  end


end // end PW0Q400

// Display pop-up window for hold
Function PW0Q410()
   /* ------------------------------------------------------------*/
   /* Display pop-up window for hold codes.*/
   /* ------------------------------------------------------------*/

  XPXX001(); /* pop-up window initialization*/

  XX0XW02.XX0XWHDR = "        HOLD REASON CODES"; /* set window title*/

  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/

    XPXHR01(); /* display the list*/

  end

  if (PKWREC.PKWSELSW == "PK") /* picking*/

    if (XX0XW02.XX0XWPIX == 0) /* no selection made*/
      PW0QM002.XHRCD[PW0QWIXM] = PW0QW01.XHRCD[PW0QWIXM];
    else
      PW0QM002.XHRCD[PW0QWIXM] = XHRTBL.XHRCD[XX0XWPIX];
    end
  else
    if (XX0XW02.XX0XWPIX == 0) /* no selection made*/
      PW0QM001.XHRCD[PW0QWIXM] = PW0QW01.XHRCD[PW0QWIXM];
    else
      PW0QM001.XHRCD[PW0QWIXM] = XHRTBL.XHRCD[XX0XWPIX];
    end
  end


  converseLib.clearScreen();
  
  converseLib.clearScreen();
  
  PW0QW00.XXXMODID = "410"; /* Module id*/


end // end PW0Q410

// Verify data that was entered
Function PW0Q500()

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW0Q-50002();
  else
    PW0Q-50001();
  end


end // end PW0Q500

// Verify scroll request
Function PW0Q510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PW0QW00.XXXTSPAG < 2)       /* and no previous pages*/

    PW0QW00.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(37); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PW0QW00.XXXTSPAG >= PW0QW00.TA5TSQIX) /* and no more pages*/

    PW0QW00.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(38); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if selection cd was changed.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW0QM002.PW0QMSEL != PW0QW00.PW0QMSEL) /* Selection cd changed*/

      set PW0QM002.PW0QMSEL cursor, bold; /* Highlight*/
      PW0QW00.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(39); /* No change allowed when scrolling*/

    end
  else
    if (PW0QM001.PW0QMSEL != PW0QW00.PW0QMSEL) /* Selection cd changed*/

      set PW0QM001.PW0QMSEL cursor, bold; /* Highlight*/
      PW0QW00.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(39); /* No change allowed when scrolling*/

    end
  end


   /* ------------------------------------------------------------*/
   /* If any errors, go to display map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum > 0)

    exit stack; /* Exit to display map*/

  end


end // end PW0Q510

// Process valid input request
Function PW0Q600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PW0QW00.PW0QWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Save the entered data, save and update t/s.*/
   /* ------------------------------------------------------------*/

  if (PW0QW00.PW0QWSWM == "Y") /* Screen modified*/

    PW0QW00.PW0QWSWM = "N"; /* Reset switch*/
    PW0QW00.PW0QWIXM = 1; /* Initialize line index*/

    if (PKWREC.PKWSELSW == "PK") /* picking*/
      while (PW0QW00.PW0QWIXM <= 10 /* Until end of lines*/
       && PW0QM002.PK1CUOID[PW0QWIXM] > 0) /* and data exists*/

        PW0QW01.PW0QMACT[PW0QWIXM] = PW0QM002.PW0QMACT[PW0QWIXM];
        PW0QW01.XHRCD[PW0QWIXM] = PW0QM002.XHRCD[PW0QWIXM];
        PW0QW01.PW0QMRMM[PW0QWIXM] = PW0QM002.PW0QMRMM[PW0QWIXM];
        PW0QW01.PW0QMRDD[PW0QWIXM] = PW0QM002.PW0QMRDD[PW0QWIXM];
        PW0QW01.PW0QMRYY[PW0QWIXM] = PW0QM002.PW0QMRYY[PW0QWIXM];

        PW0QW00.PW0QWIXM = PW0QW00.PW0QWIXM + 1; /* Increment line index*/

      end
    else
      while (PW0QW00.PW0QWIXM <= 10 /* Until end of lines*/
       && PW0QM001.PK1CUOID[PW0QWIXM] > 0) /* and data exists*/

        PW0QW01.PW0QMACT[PW0QWIXM] = PW0QM001.PW0QMACT[PW0QWIXM];
        PW0QW01.XHRCD[PW0QWIXM] = PW0QM001.XHRCD[PW0QWIXM];
        PW0QW01.PW0QMRMM[PW0QWIXM] = PW0QM001.PW0QMRMM[PW0QWIXM];
        PW0QW01.PW0QMRDD[PW0QWIXM] = PW0QM001.PW0QMRDD[PW0QWIXM];
        PW0QW01.PW0QMRYY[PW0QWIXM] = PW0QM001.PW0QMRYY[PW0QWIXM];

        PW0QW00.PW0QWIXM = PW0QW00.PW0QWIXM + 1; /* Increment line index*/

      end
    end

    TA5REC.TA5TSQIX = PW0QW00.XXXTSPAG; /* Page# to update*/

    PW0QS01(); /* Update t/s page*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PW0QW00.XXXTSPAG = PW0QW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PW0QW00.XXXTSPAG = PW0QW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If carrier hold data was changed, display warning msg.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW0QM002.PW0QMCHC != PW0QW00.PW0QMCHC
     || PW0QM002.PW0QMCMM != PW0QW00.PW0QMCMM
     || PW0QM002.PW0QMCDD != PW0QW00.PW0QMCDD
     || PW0QM002.PW0QMCYY != PW0QW00.PW0QMCYY)

      PW0QW00.PW0QMCHC = PW0QM002.PW0QMCHC; /* Carrier hold cd*/
      PW0QW00.PW0QMCMM = PW0QM002.PW0QMCMM; /* Carrier hold rlse dt*/
      PW0QW00.PW0QMCDD = PW0QM002.PW0QMCDD;
      PW0QW00.PW0QMCYY = PW0QM002.PW0QMCYY;

      if (PW0QM002.PW0QMCHC > " "
       || PW0QM002.PW0QMCMM > 0
       || PW0QM002.PW0QMCDD > 0
       || PW0QM002.PW0QMCYY > 0)

        PW0QW00.XXXMSGNO = 324;
                                   /* Warning - will hold all orders*/
        PW0QW00.XXXMODID = "600"; /* Module identification*/

      end

      return; /* Return to previous process*/

    end
  else
    if (PW0QM001.PW0QMCHC != PW0QW00.PW0QMCHC
     || PW0QM001.PW0QMCMM != PW0QW00.PW0QMCMM
     || PW0QM001.PW0QMCDD != PW0QW00.PW0QMCDD
     || PW0QM001.PW0QMCYY != PW0QW00.PW0QMCYY)

      PW0QW00.PW0QMCHC = PW0QM001.PW0QMCHC; /* Carrier hold cd*/
      PW0QW00.PW0QMCMM = PW0QM001.PW0QMCMM; /* Carrier hold rlse dt*/
      PW0QW00.PW0QMCDD = PW0QM001.PW0QMCDD;
      PW0QW00.PW0QMCYY = PW0QM001.PW0QMCYY;

      if (PW0QM001.PW0QMCHC > " "
       || PW0QM001.PW0QMCMM > 0
       || PW0QM001.PW0QMCDD > 0
       || PW0QM001.PW0QMCYY > 0)

        PW0QW00.XXXMSGNO = 324;
                                   /* Warning - will hold all orders*/
        PW0QW00.XXXMODID = "600"; /* Module identification*/

      end

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If the selection cd was changed, go back to rebuild data.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW0QM002.PW0QMSEL != PW0QW00.PW0QMSEL) /* Selection changed*/

      PW0QW00.PW0QWSWR = "Y"; /* Request for data switch*/

      return; /* Return to previous process*/

    end
  else
    if (PW0QM001.PW0QMSEL != PW0QW00.PW0QMSEL) /* Selection changed*/

      PW0QW00.PW0QWSWR = "Y"; /* Request for data switch*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If updates requested, perform them.*/
   /* ------------------------------------------------------------*/

  if (PW0QW00.PW0QWSWU == "Y") /* Data updates found*/

    XX0XS01(); /* Get system date and time*/

    PW0QW00.PW0QWSWS = "N"; /* Clear successful updates switch*/

    PW0Q610(); /* Perform updates*/

    PW0QW00.PW0QWSWU = "N"; /* Clear updates requested switch*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/

    if (PW0QW00.PW0QWSWS == "Y") /* Successful updates*/

      if (PW0QW00.XXXMSGNO == 0) /* If no warnings*/

        PW0QW00.XXXMSGNO = 32; /* Updates successful*/
        PW0QW00.XXXMODID = "600"; /* Module identification*/

      end

    end

    if (PW0QW00.PW0QWIXO > 1) /* There were orders to inquire on*/

      PW0Q670(); /* Xfer to PW0O*/

    else

      PW0QW00.XXXTSPAG = 1; /* Force display to first page*/

    end

    return; /* Go back to previous routine*/

  end

   /* ------------------------------------------------------------*/
   /* ***** Done with current DNSB Date/carrier code ******/

   /* Go get the next one*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW0QM002.PW0QMCHC = " "; /* Reset carrier hold data*/
    PW0QM002.PW0QMCMM = 0;
    PW0QM002.PW0QMCDD = 0;
    PW0QM002.PW0QMCYY = 0;
    PW0QW00.PW0QWSWR = "Y"; /* Request for data switch*/
  else
    PW0QM001.PW0QMCHC = " "; /* Reset carrier hold data*/
    PW0QM001.PW0QMCMM = 0;
    PW0QM001.PW0QMCDD = 0;
    PW0QM001.PW0QMCYY = 0;
    PW0QW00.PW0QWSWR = "Y"; /* Request for data switch*/
  end


end // end PW0Q600

// Process lines of data
Function PW0Q610()
   /* ------------------------------------------------------------*/
   /* Process data*/
   /* ------------------------------------------------------------*/

  PW0QW00.PW0QWIXM = 1; /* Initialize map index*/
  PW0QW00.PW0QWIXO = 1; /* Initialize order inquiry array index*/
  PW0QW00.XXXTSPAG = 1; /* Start at first page of t/s*/

  PW0QS02(); /* Read first t/s page*/

  while (PW0QW00.XXXTSPAG <= PW0QW00.TA5TSQIX) /* While there is still data*/

    if (PW0QW01.PK1CUOID[PW0QWIXM] > 0) /* If there is data on this line*/

      if (PW0QW01.PW0QMACT[PW0QWIXM] == "S") /* Select to pick*/

        PW0Q620(); /* Select to pick routine*/

        PW0QWSWS = "Y"; /* Successful update*/

      end

      if (PW0QW01.PW0QMACT[PW0QWIXM] == "D") /* Deselect order*/

        PW0Q630(); /* Deselect routine*/

        PW0QWSWS = "Y"; /* Successful update*/

      end

      if (PKWREC.PKWSELSW == "PK") /* picking*/
        if (PW0QW01.PW0QMACT[PW0QWIXM] == "H" /* Place order on hold*/
         || PW0QM002.PW0QMCHC > " ")          /* Carrier has been put on hold*/
          PW0Q640(); /* Hold order routine*/

          PW0QWSWS = "Y"; /* Successful update*/
        end
      else
        if (PW0QW01.PW0QMACT[PW0QWIXM] == "H" /* Place order on hold*/
         || PW0QM001.PW0QMCHC > " ")          /* Carrier has been put on hold*/
          PW0Q640(); /* Hold order routine*/

          PW0QWSWS = "Y"; /* Successful update*/
        end
      end

      if (PW0QW01.PW0QMACT[PW0QWIXM] == "I") /* Inquire on order*/

        PW0Q650(); /* Order inquiry routine*/

        PW0QWSWS = "Y"; /* Successful update*/

      end

    end

    PW0QW00.PW0QWIXM = PW0QW00.PW0QWIXM + 1; /* Increment index*/

    /* ------------------------------------------------------------*/
     /* If t/s page processed, update & get next page.*/
    /* ------------------------------------------------------------*/

    if (PW0QW00.PW0QWIXM > 10) /* If index > 10*/

      PW0QS01(); /* Update current t/s page*/

      PW0QW00.XXXTSPAG = PW0QW00.XXXTSPAG + 1; /* Increment t/s page number*/

      if (PW0QW00.XXXTSPAG <= PW0QW00.TA5TSQIX) /* Still have more t/s pages*/

        VGVar.handleSysLibraryErrors = 0;
        sysLib.commit();
                                   /* Commit db updates for prior page data*/

        PW0QS02(); /* Get next t/s page*/

        PW0QW00.PW0QWIXM = 1; /* Reset index*/

      end

    end

  end

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW0QM002.PW0QMCHC > " ") /* Carrier has been put on hold*/
      PW0Q660(); /* Insert carrier on hold row*/
      PW0QWSWS = "Y"; /* Successful update*/
    end
  else
    if (PW0QM001.PW0QMCHC > " ") /* Carrier has been put on hold*/
      PW0Q660(); /* Insert carrier on hold row*/
      PW0QWSWS = "Y"; /* Successful update*/
    end
  end


end // end PW0Q610

// Select order for picking
Function PW0Q620()
   /* ------------------------------------------------------------*/
   /* Select order for picking*/
   /* ------------------------------------------------------------*/

  PW0QS10(); /* select unique pool header*/

  if (PW0QW00.PKURUNMD == " ") /* if run mode is picking*/
    PK4REC.PK4SLIND = "S"; /* set status to 's'*/
  else
    PK4REC.PK4SLIND = "P"; /* otherwise, set to 'p'*/
  end

  PW0QW01.PK4SLIND[PW0QWIXM] = "Y";

  PK4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PK4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW0QS11(); /* update pool header*/

   /* ------------------------------------------------------------*/
   /* See if row already exists in Dpick.Vselor01*/
   /* ------------------------------------------------------------*/

  set PKHREC empty; /* clear record*/
  PKHREC.XWHCD = PKWREC.XWHCD;
  PKHREC.PK1CUOID = PW0QW01.PK1CUOID[PW0QWIXM];
  PKHREC.PK1NORID = PW0QW01.PK1NORID[PW0QWIXM];
  PKHREC.PK1PRTN = PK4REC.PK1PRTN;
  PKHREC.PKURUNMD = PW0QW00.PKURUNMD;

  PW0Q621(); /* select unique Dpick.Vselor01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* row already exists*/

    if (PW0QW00.XXXMSGNO == 0) /* if no other warning msgs*/
      PW0QW00.XXXMSGNO = 44; /* warning msg*/
      PW0QW00.XXXMODID = "620"; /* module id*/
    end

    PW0QW01.PW0QMACT[PW0QWIXM] = " "; /* clear action code*/

    return; /* return to prev process, don't need to add rec*/

  end

   /* ------------------------------------------------------------*/
   /* Insert row into Dpick.Vselor01*/
   /* ------------------------------------------------------------*/

  set PKHREC empty; /* clear record*/

  PKHREC.XWHCD = PKWREC.XWHCD;
  PKHREC.XDVCD = PK4REC.XDVCD;
  PKHREC.XBCCD = PK4REC.XBCCD;
  PKHREC.PK1CUOID = PW0QW01.PK1CUOID[PW0QWIXM]; /* stktf id*/
  PKHREC.PK1NORID = PW0QW01.PK1NORID[PW0QWIXM]; /* nike ord id*/
  PKHREC.PK1PRTN = PK4REC.PK1PRTN; /* part char*/
  PKHREC.PKHPVSFC = PW0QW01.PW0QMRFC[PW0QWIXM]; /* full case qty*/
  PKHREC.PKHPVSRP = PW0QW01.PW0QMRRP[PW0QWIXM]; /* repack qty*/
  PKHREC.OP1DSBDT = PWKREC.OP1DSBDT[PW0QWIXD]; /* dnsb date*/
  PKHREC.TF1CARCD = PWKREC.TF1CARCD[PW0QWIXD]; /* carrier code*/
  PKHREC.XPPCD = PK4REC.XPPCD; /* pick prior*/
  PKHREC.PKURUNMD = PW0QW00.PKURUNMD; /* run mode*/
  PKHREC.PK-SEL-TYP-CD = " 6"; /* ("p&h non-spcl hndl")*/
  PKHREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PKHREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  PKHREC.ZZZCHGCT = 0;

  PW0Q622(); /* insert Dpick.Vselor01*/


end // end PW0Q620

// Select Dpick.Vselor01
Function PW0Q621()
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("S ", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found is good!!*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0QW00.XXXMODID = "621"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q621

// Insert Dpick.Vselor01
Function PW0Q622()
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("A ", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0QW01.PW0QMACT[PW0QWIXM] = "*"; /* flag as processed*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == -803) /* Row already exists*/

      PW0QW00.XXXMSGNO = 44; /* Warning msg*/
      PW0QW00.XXXMODID = "622"; /* module id*/
      PW0QW01.PW0QMACT[PW0QWIXM] = " "; /* clear action code*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0QW00.XXXMODID = "622"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q622

// De-select order
Function PW0Q630()
   /* ------------------------------------------------------------*/
    /* De-select order*/
   /* ------------------------------------------------------------*/

  PW0QS10(); /* Select unique pool header*/

  PK4REC.PK4SLIND = " "; /* Set status to 'deselected'*/
  PW0QW01.PK4SLIND[PW0QWIXM] = "N";

  PK4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PK4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW0QS11(); /* Update pool header*/

   /* ------------------------------------------------------------*/
    /* Delete row from Dpick.Vselor01*/
   /* ------------------------------------------------------------*/

  set PKHREC empty; /* Clear record*/
  PKHREC.XWHCD = PKWREC.XWHCD;
  PKHREC.PK1CUOID = PW0QW01.PK1CUOID[PW0QWIXM];
  PKHREC.PK1NORID = PW0QW01.PK1NORID[PW0QWIXM];
  PKHREC.PKURUNMD = PW0QW00.PKURUNMD;

  PW0Q631(); /* Delete Dpick.Vselor01*/


end // end PW0Q630

// Delete Dpick.Vselor01 row
Function PW0Q631()
   /* ------------------------------------------------------------*/
   /* Delete the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("D ", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0QW01.PW0QMACT[PW0QWIXM] = "*"; /* flag as processed*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PW0QW00.XXXMSGNO = 201; /* Row to be deleted not found*/
      PW0QW00.XXXMODID = "631"; /* Module identification*/
      PW0QW01.PW0QMACT[PW0QWIXM] = " "; /* flag as processed*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0QW00.XXXMODID = "631"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q631

// Put order on hold
Function PW0Q640()
   /* ------------------------------------------------------------*/
    /* Get order from Dpick.Vorhld01 table*/
   /* ------------------------------------------------------------*/

  set PKBREC empty; /* Clear record*/
  PKBREC.XWHCD = PKWREC.XWHCD;
  PKBREC.PK1CUOID = PW0QW01.PK1CUOID[PW0QWIXM];
  PKBREC.PK1NORID = PW0QW01.PK1NORID[PW0QWIXM];

  if (PW0QW01.PW0QMACT[PW0QWIXM] == "H") /* If hold order requested*/

    PKBREC.XHRCD = PW0QW01.XHRCD[PW0QWIXM];

  else /* Carrier hold requested*/

    if (PKWREC.PKWSELSW == "PK") /* picking*/
      PKBREC.XHRCD = PW0QM002.PW0QMCHC;
    else
      PKBREC.XHRCD = PW0QM001.PW0QMCHC;
    end

  end

  PW0Q641(); /* Select unique Dpick.Vorhld01*/

   /* ------------------------------------------------------------*/
    /* Prepare release order from map to be moved into pkbrec.*/
   /* ------------------------------------------------------------*/

  if (PW0QW01.PW0QMACT[PW0QWIXM] == "H") /* If hold order requested*/

    PW0QW00.PW0QWWMM = PW0QW01.PW0QMRMM[PW0QWIXM];
    PW0QW00.PW0QWWDD = PW0QW01.PW0QMRDD[PW0QWIXM];
    PW0QW00.PW0QWWYY = PW0QW01.PW0QMRYY[PW0QWIXM];

  else /* Carrier hold requested*/

    if (PKWREC.PKWSELSW == "PK") /* picking*/
      PW0QW00.PW0QWWMM = PW0QM002.PW0QMCMM;
      PW0QW00.PW0QWWDD = PW0QM002.PW0QMCDD;
      PW0QW00.PW0QWWYY = PW0QM002.PW0QMCYY;
    else
      PW0QW00.PW0QWWMM = PW0QM001.PW0QMCMM;
      PW0QW00.PW0QWWDD = PW0QM001.PW0QMCDD;
      PW0QW00.PW0QWWYY = PW0QM001.PW0QMCYY;
    end

  end

  if (PW0QW00.PW0QWWYY > 80) /* If year > 80*/

    PW0QW00.PW0QWWCC = 19; /* set century to 19*/

  else

    PW0QW00.PW0QWWCC = 20; /* else, set to 20*/

  end

  PKBREC.PKBRELDT = PW0QW00.PW0QWWDT; /* store as release date*/

  if (PW0QW00.PW0QWWMM != 99
   || PW0QW00.PW0QWWDD != 99
   || PW0QW00.PW0QWWYY != 99)

    set TA9REC empty;
    TA9REC.TA9BEGDT = PW0QW00.PW0QWWDT;
    TA9REC.TA9OFSET = -1;

    try
      call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
    end /* subtract 1 from date*/

    /* ------------------------------------------------------------------*/
     /* If successful, move date and continue through process*/
    /* ------------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* call successful*/
     && TA9REC.TA9RTNFL == 0)          /* and normal return code*/

      PKBREC.PKBPLRDT = TA9REC.TA9RTNDT;

    else

      /* -----------------------------------------------------------*/
       /* otherwise, indicate that a system error has occurred*/
      /* -----------------------------------------------------------*/

      TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
      TAEREC.TAEDESC1 = TA9REC.TA9GRP; /* subroutine parameters*/
      converseLib.validationFailed(29); /* fatal error*/
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
      TA1REC.TA1TYPE = "APPL"; /* type of error*/
      TA1REC.TA1LOC = "UPDATE PLAN RELEASE DATE";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program appl*/
      TA1REC.TA1PGMNO = "640"; /* program number*/
      TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* map appl*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis*/

      exit stack; /* exit to display map*/

    end

  else

    PKBREC.PKBPLRDT = PW0QW00.PW0QWWDT;

  end

   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* IF PKBREC.PKBPLRDT GT 19991231;*/
   /* MOVE 999999999 TO PKBREC.PKBRELDT;*/
   /* MOVE 999999999 TO PKBREC.PKBPLRDT;*/
   /* END;*/
   /* ;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (PKBREC.PKBPLRDT > 20431231)
    PKBREC.PKBRELDT = 999999999;
    PKBREC.PKBPLRDT = 999999999;
  end

   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
   /* ------------------------------------------------------------*/
    /* If order hold row found, update it, otherwise, add it.*/
   /* ------------------------------------------------------------*/

  PKBREC.XXXUSRID = COMMAREA.CAUSERID;
  PKBREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PKBREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  if (SQLCA.VAGen_SQLCODE == 0) /* Row was found*/

    PW0Q642(); /* Update Dpick.Vorhld01 row*/

  else

    PKBREC.ZZZCHGCT = 0;

    PW0Q643(); /* Insert Dpick.Vorhld01 row*/

  end

   /* ------------------------------------------------------------*/
   /* Flag order, and if a carrier hold was requested,*/
   /* then, move carrier hold data to map detail line.*/
   /* ------------------------------------------------------------*/

  PW0QW01.PW0QMACT[PW0QWIXM] = "*"; /* flag as processed*/
  PW0QW01.PW0QWSWH[PW0QWIXM] = "Y"; /* flag as on hold*/

  if (PW0QW01.PW0QMACT[PW0QWIXM] != "H") /* Carrier hold requested*/

    if (PKWREC.PKWSELSW == "PK") /* picking*/
      PW0QW01.XHRCD[PW0QWIXM] = PW0QM002.PW0QMCHC;
      PW0QW01.PW0QMRMM[PW0QWIXM] = PW0QM002.PW0QMCMM;
      PW0QW01.PW0QMRDD[PW0QWIXM] = PW0QM002.PW0QMCDD;
      PW0QW01.PW0QMRYY[PW0QWIXM] = PW0QM002.PW0QMCYY;
    else
      PW0QW01.XHRCD[PW0QWIXM] = PW0QM001.PW0QMCHC;
      PW0QW01.PW0QMRMM[PW0QWIXM] = PW0QM001.PW0QMCMM;
      PW0QW01.PW0QMRDD[PW0QWIXM] = PW0QM001.PW0QMCDD;
      PW0QW01.PW0QMRYY[PW0QWIXM] = PW0QM001.PW0QMCYY;
    end

  end


   /* ------------------------------------------------------------*/
    /* Update pool header row.*/
   /* ------------------------------------------------------------*/

  PW0QS10(); /* Select unique pool header*/

  PK4REC.PK4ORHLD = "Y"; /* Set order hold flag to yes*/
  PK4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PK4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW0QS11(); /* Update pool header*/


end // end PW0Q640

// Select unique Dpick.Vorhld01
Function PW0Q641()
   /* ------------------------------------------------------------*/
   /* Select the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("S ", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0QW00.XXXMODID = "641"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q641

// Update row in Dpick.Vorhld01
Function PW0Q642()
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("U ", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0QW00.XXXMODID = "642"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q642

// Insert row in Dpick.Vorhld01
Function PW0Q643()
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("A ", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0QW00.XXXMODID = "643"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q643

// Process order for inquiry
Function PW0Q650()
   /* ------------------------------------------------------------*/
   /* Order was requested for inquiry - add to pwjrec array*/
   /* ------------------------------------------------------------*/

  if (PW0QW00.PW0QWIXO > 65)

    PW0QW00.XXXMSGNO = 346;

    return;

  end

  PWJREC.PWJORACT[PW0QWIXO] = "I"; /* flag for inquiry*/
  PWJREC.PK1CUOID[PW0QWIXO] = PW0QW01.PK1CUOID[PW0QWIXM];
  PWJREC.PK1NORID[PW0QWIXO] = PW0QW01.PK1NORID[PW0QWIXM];

  PW0QW00.PW0QWIXO = PW0QW00.PW0QWIXO + 1;


end // end PW0Q650

// Insert carrier-on-hold row
Function PW0Q660()
   /* ------------------------------------------------------------*/
    /* Get order from Dpick.Vcahld01 table*/
   /* ------------------------------------------------------------*/

  set PWFREC empty; /* Row storage area*/

  PWFREC.XWHCD = PKWREC.XWHCD; /* Warehouse code*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PWFREC.TF1CARCD = PW0QM002.TF1CARCD; /* Carrier code*/
    PWFREC.XHRCD = PW0QM002.PW0QMCHC; /* Reason code*/
  else
    PWFREC.TF1CARCD = PW0QM001.TF1CARCD; /* Carrier code*/
    PWFREC.XHRCD = PW0QM001.PW0QMCHC; /* Reason code*/
  end

  try
    call "IO3190" ("A ", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  PW0Q661(); /* Select unique Dpick.Vcahld01*/

   /* ------------------------------------------------------------*/
    /* Prepare release order from map to be moved into pwfrec.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW0QW00.PW0QWWMM = PW0QM002.PW0QMCMM;
    PW0QW00.PW0QWWDD = PW0QM002.PW0QMCDD;
    PW0QW00.PW0QWWYY = PW0QM002.PW0QMCYY;
  else
    PW0QW00.PW0QWWMM = PW0QM001.PW0QMCMM;
    PW0QW00.PW0QWWDD = PW0QM001.PW0QMCDD;
    PW0QW00.PW0QWWYY = PW0QM001.PW0QMCYY;
  end

  if (PW0QW00.PW0QWWYY > 80) /* if year > 80*/

    PW0QW00.PW0QWWCC = 19; /* set century to 19*/

  else

    PW0QW00.PW0QWWCC = 20; /* else, set to 20*/

  end

  if (PW0QW00.PKURUNMD == " ") /* if run mode is picking*/

    PWFREC.PKBRELDT = PW0QW00.PW0QWWDT; /* store as release date*/

  else

    PWFREC.PKBPLRDT = PW0QW00.PW0QWWDT; /* else, planned rlse date*/

  end

   /* ------------------------------------------------------------*/
    /* If carrier hold row found, update it, otherwise, add it.*/
   /* ------------------------------------------------------------*/

  PWFREC.XXXUSRID = COMMAREA.CAUSERID;
  PWFREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PWFREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  if (SQLCA.VAGen_SQLCODE == 0) /* Row was found*/

    PW0Q662(); /* Update Dpick.Vcahld01 row*/

  else

    PWFREC.ZZZCHGCT = 0;

    PW0Q663(); /* Insert Dpick.Vcahld01*/

  end


end // end PW0Q660

// Select unique Dpick.Vcahld01
Function PW0Q661()
   /* ------------------------------------------------------------*/
   /* Select the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("S ", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0QW00.XXXMODID = "661"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q661

// Update row in Dpick.Vcahld01
Function PW0Q662()
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("U ", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/


      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0QW00.XXXMODID = "662"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q662

// Insert row in Dpick.Vcahld01
Function PW0Q663()
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("A ", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/


      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0QW00.XXXMODID = "663"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0Q663

// Transfer control to PW0O
Function PW0Q670()
   /* ------------------------------------------------------------*/
   /* Orders are in pwjREC for inquiry, xfer to PW0O.*/
   /* ------------------------------------------------------------*/

  PW0Q110(); /* Purge temporary storage*/

  COMMAREA.CATOAP = "PW0O"; /* Set target application*/
  PWJREC.XWHCD = PKWREC.XWHCD; /* Move whse cd*/
  PWJREC.XWHABRV = PKWREC.XWHABRV; /* Move whse abrv*/
  PW0QW00.PW0QWIXO = PW0QW00.PW0QWIXO - 1; /* Set correct # of orders*/
  PWJREC.PWJARMAX = PW0QW00.PW0QWIXO; /* move to array max*/
  PKWREC.PKWUSERB = PWJREC.PKWUSERB; /* Store array for pw0o*/

  XSPKS01(); /* Exit to another application*/

  set PW0QM001.CATOAP cursor, bold; /* Highlight*/
  set PW0QM002.CATOAP cursor, bold; /* Highlight*/

  exit stack; /* Exit to display map*/


end // end PW0Q670

// Update temporary storage page
Function PW0QS01()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PW0QW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0QW00.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0QS01

// Read temporary storage page
Function PW0QS02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PW0QW01.XXXTSLEN = PW0QW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PW0QW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PW0QW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0QW00.XXXMODID = "S02"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0QS02

// Select unique Dpick.Vpoolh01
Function PW0QS10()
   /* ------------------------------------------------------------*/
   /* Select unique for Dpick.Vpoolh01*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* Clear row storage area*/

  PK4REC.XWHCD = PKWREC.XWHCD; /* Warehouse code*/
  PK4REC.PK1CUOID = PW0QW01.PK1CUOID[PW0QWIXM]; /* Customer order number*/
  PK4REC.PK1NORID = PW0QW01.PK1NORID[PW0QWIXM]; /* Nike order number*/

  try
    call "IO1720" ("S ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, exit.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0QW00.XXXMODID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback changes*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0QS10

// Update Dpick.Vpoolh01
Function PW0QS11()
   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1720" ("U ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      PW0QW00.PW0QWSWR = "Y"; /* Request for data switch*/

      PW0QW00.XXXMODID = "S11"; /* Module identification*/
      PW0QW00.XXXMSGNO = 105; /* Data was updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0QW00.XXXMODID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0QW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0QS11

//*** RECORD=PW0QW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PW0QW00 type basicRecord
  5 PW0QWIXD PW0QWIXD ; 
  5 PW0QWIXI PW0QWIXI ; 
  5 PW0QWIXM PW0QWIXM ; 
  5 PW0QWIXO PW0QWIXO ; 
  5 PW0QWSWB PW0QWSWB ; 
  5 PW0QWSWC PW0QWSWC ; 
  5 PW0QWSWF PW0QWSWF ; 
  5 PW0QWSWM PW0QWSWM ; 
  5 PW0QWSWP PW0QWSWP ; 
  5 PW0QWSWR PW0QWSWR ; 
  5 PW0QWSWS PW0QWSWS ; 
  5 PW0QWSWU PW0QWSWU ; 
  5 PW0QWSWW PW0QWSWW ; 
  5 PW0QWSWZ PW0QWSWZ ; 
  5 PW0QMCHC PW0QMCHC ; 
  5 PW0QMCMM PW0QMCMM ; 
  5 PW0QMCDD PW0QMCDD ; 
  5 PW0QMCYY PW0QMCYY ; 
  5 PW0QMSEL PW0QMSEL ; 
  5 PKURUNMD PKURUNMD ; 
  5 PW0QWPDT PW0QWPDT ; 
  5 PW0QWPCR PW0QWPCR ; 
  5 PW0QWCDT PW0QWCDT ; 
  5 PW0QWWDT PW0QWWDT ; 
    10 PW0QWWCC PW0QWWCC ; 
    10 PW0QWWYY PW0QWWYY ; 
    10 PW0QWWMM PW0QWWMM ; 
    10 PW0QWWDD PW0QWWDD ; 
  5 PW0QWNUM PW0QWNUM ; 
  5 PW0QWDFC PW0QWDFC ; 
  5 PW0QWDRP PW0QWDRP ; 
  5 PW0QWTFC PW0QWTFC ; 
  5 PW0QWTRP PW0QWTRP ; 
  5 XXXTSLEN XXXTSLEN ; 
  5 XXXTSPAG XXXTSPAG ; 
  5 XXXMODID XXXMODID ; 
  5 XXXMSGNO XXXMSGNO ; 
  5 TA5TSQIX TA5TSQIX ; 
end // end PW0QW00

//*** RECORD=PW0QW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record PW0QW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(360) ; 
    10 * char(36) [10] ; 
      15 PW0QMACT PW0QMACT ; 
      15 PK1CUOID PK1CUOID ; 
      15 PK1NORID PK1NORID ; 
      15 TF2DSTCD TF2DSTCD ; 
      15 PW0QMRFC PW0QMRFC ; 
      15 PW0QMRRP PW0QMRRP ; 
      15 PK4SLIND PK4SLIND ; 
      15 XHRCD XHRCD ; 
      15 PW0QMRMM PW0QMRMM ; 
      15 PW0QMRDD PW0QMRDD ; 
      15 PW0QMRYY PW0QMRYY ; 
      15 PW0QWSWH PW0QWSWH ; 
end // end PW0QW01

// Action code
DataItem PW0QMACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Carrier hold release dt - day
DataItem PW0QMCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Carrier reason on hold code
DataItem PW0QMCHC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Carrier hold release dt - mnth
DataItem PW0QMCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Carrier hold release dt - year
DataItem PW0QMCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

//                dd
DataItem PW0QMRDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Regular FC
DataItem PW0QMRFC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold release - mm
DataItem PW0QMRMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Regular RP
DataItem PW0QMRRP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//                yy
DataItem PW0QMRYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Selected,non-sel,all flag
DataItem PW0QMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current date (ccyymmdd)
DataItem PW0QWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Detail full case qty
DataItem PW0QWDFC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Detail repack qty
DataItem PW0QWDRP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Dnsbd index
DataItem PW0QWIXD num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Item index
DataItem PW0QWIXI num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map line index
DataItem PW0QWIXM num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order inquiry index
DataItem PW0QWIXO num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work order number
DataItem PW0QWNUM num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Previous carrier code
DataItem PW0QWPCR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Previous no-ship-before-date
DataItem PW0QWPDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Bad Fast Path switch
DataItem PW0QWSWB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Ordr cursor end of file switch
DataItem PW0QWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem PW0QWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order on hold switch
DataItem PW0QWSWH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen modified switch
DataItem PW0QWSWM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Ok to process order switch
DataItem PW0QWSWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PW0QWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update successful switch
DataItem PW0QWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem PW0QWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work cursor end of file switch
DataItem PW0QWSWW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// No more dnsb dats switch
DataItem PW0QWSWZ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Total full case qty
DataItem PW0QWTFC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total repack qty
DataItem PW0QWTRP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   cc
DataItem PW0QWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   dd
DataItem PW0QWWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date work area (ccyymmdd)
DataItem PW0QWWDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   mm
DataItem PW0QWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   yy
DataItem PW0QWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

