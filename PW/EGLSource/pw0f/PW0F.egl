package pw0f;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import pk.common.*;
import pw.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PW0F ****
// ************************************************************
// * applid:    pw0f    wilsonville zone summary planning
// *                              inquiry
// ************************************************************
// * maint log
// *  when      who     what
// *-------- -------- -----------------------------------------
// *09/20/87  bnaber  program written
// *12/07/88  jwood   added NONCSP option on calls
// *12/07/88  jwood   added XSSEGTR logic
// *04/07/89  jcampb  add codes 14,15,16 to first condition(if)
// *                  and code 13 to second  in pw0fso3
// *04/28/89  jcampb  increase field sizes and make beautiful
// *07-21-89  jcampb  changed xfer from pk0i to pk09
// *11-20-91  DPETTI  PF3 NOW EXITS TO PK0J
// ************************************************************
// *********************
Program PW0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PKWREC PKWREC; // record
  PW0FW01 PW0FW01; // record
  PW0FW02 PW0FW02; // record
  PW0FW03 PW0FW03; // record
  PW0FW04 PW0FW04; // record
  PW0FW05 PW0FW05; // record
  PWBREC PWBREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use PW0FM.PW0FM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PW0F010: PW0F010();
  end // end main
end // end PW0F

// program control
Function PW0F010()



      /* *********************************************************/
      /* * this process controls entire program process control **/
      /* * transfer to other applications occurs in converse    **/
      /* *********************************************************/


  XPPK001(); /* check picking security*/

  PW0FM001.VAGen_EZEMSG = COMMAREA.CAFROMAP;
  PW0FM001.XWHCD = PKWREC.XWHCD;
  COMMAREA.CAFROMAP = COMMAREA.CATOAP;

  PW0F100(); /* init pgm areas*/



      /* control pgm converse*/

  PW0FW01.PW0FWFL1 = "N";

  while (PW0FW01.PW0FWFL1 == "N")
    PW0F200();
  end



   /* ************************************************************/
end // end PW0F010

// program initialization
Function PW0F100()



      /* *********************************************************/
      /* * init program areas                                   **/
      /* *********************************************************/



  set PWBREC empty;
  set TA1REC empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  TA1REC.TA1MAP = "PW0FM001";

      /* init map*/

  if (converseVar.validationMsgNum > 0)
    set PW0FM001.XWHCD cursor, bold;
    PW0FM001.XXXCURDT = VGVar.currentShortGregorianDate;
    PW0FW01.PW0FWFLG = "NO RECORDS FOUND";
  else
    PW0FSO1();
                                   /* fill up screen for first time thru*/
  end



   /* ************************************************************/
end // end PW0F100

// process map
Function PW0F200()



      /* *********************************************************/
      /* * this process controls the converse for the map and   **/
      /* * the processing of the map                            **/
      /* *********************************************************/



   /* ************************************************************/
  converse PW0FM001 ;
   /* ************************************************************/



  PW0FSA0(); /* process conversed screen pk0km001*/


   /* ************************************************************/
end // end PW0F200

// check pf keys
Function PW0FSA0()



   /* stop indiscriminate button pressing......*/




  if (converseVar.eventKey is pf3  /* send to pk0a menu*/
   || converseVar.eventKey is pf4  /* send to mn0m menu*/
   || converseVar.eventKey is pf13 /* pk0b 'ord inq' transfer*/
   || converseVar.eventKey is pf14 /* pk0c 'ln inq' transfer*/
   || converseVar.eventKey is pf15 /* pk0d 'cust inq' transfer*/
   || converseVar.eventKey is pf16 /* pk0z 'sp&p' transfer*/
   || converseVar.eventKey is pf18 /* pk09 'pick hold/rlse'trans*/
   || converseVar.eventKey is pf19 /* pk0s 'plan' transfer*/
   || converseVar.eventKey is pf20) /* pk07 'select' transfer*/

    PW0FSA1(); /* purge temporary storage*/
    PW0FST0(); /* Transfer to another application*/

  else

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      PW0FSA1(); /* purge temporary storage*/
      XSPF1(); /* Exit to the HELP facility*/

      PW0FM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
      converseLib.validationFailed(); /* Force error*/
    else
      if (converseVar.eventKey is pa2) /* PA2 was pressed*/
        PW0FSA1(); /* purge temporary storage*/
        PKWREC.XWHCD = PW0FM001.XWHCD;
        COMMAREA.XWHCD = PW0FM001.XWHCD;
        COMMAREA.CACURRAP = " ";
        COMMAREA.CATOAP = "PW0F";
        COMMAREA.CAFRMSYS = "PW";
        COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
        XSEXIT();
        PW0FM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        COMMAREA.CATOAP = " ";
      else
        if (converseVar.eventKey is pf7 /* scroll backwards*/
         || converseVar.eventKey is pf8 /* scroll forward*/
         || converseVar.eventKey is enter) /* edit warehouse*/
           /* their choice of buttons was valid*/
          PW0FSI0(); /* edit screen and check pfkeys*/
        else
          converseLib.validationFailed(12);
           /* invalid pfkey*/
        end
      end
    end
  end



end // end PW0FSA0

// purge temporary storage queue
Function PW0FSA1()




         /* purge stemporary storage*/


   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PW0E"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (PW0FW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "PW0ESA1 "; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PW0EM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    XSEXIT();

  end


end // end PW0FSA1

// pf7, pf8 ,pf12 and enter
Function PW0FSI0()


         /* pf7 and pf8*/



  if (PW0FM001.XWHCD != PW0FW01.XWHCD)
    PW0FSO1(); /* get new warehouse zone summary*/
    return;
  end

  if (PW0FW01.PW0FWFLG == "NO RECORDS FOUND")
    converseLib.validationFailed(110);
       /* no records found*/
    return;
  end

  if (converseVar.eventKey is pf7)
    PW0FW01.PW0FWSB1 = PW0FW01.PW0FWSB1 - 1;
    PW0FW01.PW0FWPG2 = PW0FW01.PW0FWPG2 - 1;
    if (PW0FW01.PW0FWSB1 < 1)
      converseLib.validationFailed(37);
         /* no more scrolling backward possible*/
      PW0FW01.PW0FWSB1 = 1;
      PW0FW01.PW0FWPG2 = 1;
      return;
    end
  end

  if (converseVar.eventKey is pf8
   && PW0FW01.PW0FWPG < PW0FW01.PW0FWPG2)
    converseLib.validationFailed(38);
       /* no more scrolling forward possible*/
    return;
  else
    if (converseVar.eventKey is pf8)
      PW0FW01.PW0FWSB1 = PW0FW01.PW0FWSB1 + 1;
      PW0FW01.PW0FWPG2 = PW0FW01.PW0FWPG2 + 1;
    end
  end

  PW0FSO4(); /* set up new screen*/



end // end PW0FSI0

// set tsque for zone summary
Function PW0FSO1()


         /* set up tsque for inquiry on zone summary*/




  set PW0FM001.XWHCD normal;
  PW0FM001.XXXCURDT = VGVar.currentShortGregorianDate;

  if (PW0FM001.XWHCD <= " "
   || PW0FM001.XWHCD == "99")
    converseLib.validationFailed(02);
      /* invalid warehouse code entered <please re-enter>*/
    PW0FM001.XWHABRV = " ";
    PW0FW01.XWHCD = " ";
    set PW0FM001.XWHCD cursor, bold;
  else
    if (PW0FM001.XWHCD in XWHTBL.XWHCD)
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        converseLib.validationFailed(03);
          /* invalid warehouse code entered <please re-enter>*/
        PW0FM001.XWHABRV = " ";
        PW0FW01.XWHCD = " ";
        set PW0FM001.XWHCD cursor, bold;
      else
        PW0FW01.XWHCD = PW0FM001.XWHCD;

        converseLib.clearScreen();
        set PW0FM001 initial;

        PW0FM001.XXXCURDT = VGVar.currentShortGregorianDate;
        PW0FM001.XXXRVNBR = "01";
        PW0FM001.XWHCD = PW0FW01.XWHCD;
        PKWREC.XWHCD = PW0FW01.XWHCD;

        PW0FM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];

        PW0FSO2(); /* set up scrolling table ;*/

        if (converseVar.validationMsgNum > 0)
            /* next sentence*/
        else
          PW0FW01.PW0FWSB1 = 1;
          PW0FSO4(); /* set up screen*/

        end

      end

    else
      converseLib.validationFailed(02);
        /* invalid warehouse code entered <please re-enter>*/
      PW0FM001.XWHABRV = " ";
      PW0FW01.XWHCD = " ";
      set PW0FM001.XWHCD cursor, bold;
    end
  end



end // end PW0FSO1

// set up scrolling table tsque
Function PW0FSO2()


         /* set up scrolling table using tsque*/



  set PW0FW02 empty;
  set PW0FW03 empty;
  set PW0FW04 empty;
  TA1REC.TA1LOCAT[2] = "PW0FSO2";
  PWBREC.XWHCD = PW0FM001.XWHCD;
  PWBREC.PKURUNMD = " ";
  PW0FW01.PW0FWFLG = " ";

  XSPWBS1(); /* select set and select next pkhrec*/

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(028); /* data base in use*/
    /* data base contention <try again>*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      XSPWBC1(); /* close set*/
      converseLib.validationFailed(110);
         /* no records found*/
      PW0FW01.PW0FWFLG = "NO RECORDS FOUND";
    else
      PW0FSO3(); /* set up scrolling table*/
      XSPWBC1(); /* close set*/
    end
  end



end // end PW0FSO2

// set up tsque for scrolling
Function PW0FSO3()


         /* set up tsque for scrolling*/



  TA1REC.TA1LOCAT[2] = "PW0FSO3";
  PW0FW01.PW0FWSB1 = 1;
  PW0FW01.PW0FWPG2 = 1; /* current page number*/
  PW0FW01.PKVSSNBR = PWBREC.PKVSSNBR;
  PW0FW02.PKVSSNBR[1] = PWBREC.PKVSSNBR;

  while (SQLCA.VAGen_SQLCODE == 0)

    if (PWBREC.PKVSSNBR != PW0FW01.PKVSSNBR)
      PW0FW01.PKVSSNBR = PWBREC.PKVSSNBR;
      if (PW0FW01.PW0FWSB1 >= 6)
        PW0FSO5(); /* write page to tsque*/
        set PW0FW02 empty;
        set PW0FW03 empty;
        set PW0FW04 empty;
        PW0FW01.PW0FWSB1 = 0;
        PW0FW01.PW0FWPG = PW0FW01.PW0FWPG + 1; /* add 1 to number of pages*/
      end
      PW0FW01.PW0FWSB1 = PW0FW01.PW0FWSB1 + 1;
    end

    if (PWBREC.YLTCD == "11"
     || PWBREC.YLTCD == "14"
     || PWBREC.YLTCD == "15"
     || PWBREC.YLTCD == "16")
      PW0FW03.PKVSSNBR[PW0FWSB1] = PWBREC.PKVSSNBR;
      PW0FW03.PW0FWUNT[PW0FWSB1] = PW0FW03.PW0FWUNT[PW0FWSB1] + PWBREC.PWBSLUNT;
      PW0FW03.PW0FWCRT[PW0FWSB1] = PW0FW03.PW0FWCRT[PW0FWSB1] + PWBREC.PWBSLCRT;
      PW0FW03.PW0FWPRD[PW0FWSB1] = PW0FW03.PW0FWPRD[PW0FWSB1] + PWBREC.PWBSLPRD;
      PW0FW03.PW0FWORD[PW0FWSB1] = PW0FW03.PW0FWORD[PW0FWSB1] + PWBREC.PWBSLORD;
      PW0FW03.PW0FWLBR[PW0FWSB1] = PW0FW03.PW0FWLBR[PW0FWSB1] + PWBREC.PWBSLLBR;
      PW0FM001.PW0FMUNT[2] = PW0FM001.PW0FMUNT[2] + PWBREC.PWBSLUNT;
      PW0FM001.PW0FMCRT[2] = PW0FM001.PW0FMCRT[2] + PWBREC.PWBSLCRT;
    else
      if (PWBREC.YLTCD == "12"
       || PWBREC.YLTCD == "13")
        PW0FW04.PKVSSNBR[PW0FWSB1] = PWBREC.PKVSSNBR;
        PW0FW04.PW0FWUNT[PW0FWSB1] = PW0FW04.PW0FWUNT[PW0FWSB1] + PWBREC.PWBSLUNT;
        PW0FW04.PW0FWCRT[PW0FWSB1] = PW0FW04.PW0FWCRT[PW0FWSB1] + PWBREC.PWBSLCRT;
        PW0FW04.PW0FWPRD[PW0FWSB1] = PW0FW04.PW0FWPRD[PW0FWSB1] + PWBREC.PWBSLPRD;
        PW0FW04.PW0FWORD[PW0FWSB1] = PW0FW04.PW0FWORD[PW0FWSB1] + PWBREC.PWBSLORD;
        PW0FW04.PW0FWLBR[PW0FWSB1] = PW0FW04.PW0FWLBR[PW0FWSB1] + PWBREC.PWBSLLBR;
        PW0FM001.PW0FMUNT[3] = PW0FM001.PW0FMUNT[3] + PWBREC.PWBSLUNT;
        PW0FM001.PW0FMCRT[3] = PW0FM001.PW0FMCRT[3] + PWBREC.PWBSLCRT;
      else
        PW0FW02.PKVSSNBR[PW0FWSB1] = PWBREC.PKVSSNBR;
        PW0FW02.PW0FWUNT[PW0FWSB1] = PW0FW02.PW0FWUNT[PW0FWSB1] + PWBREC.PWBSLUNT;
        PW0FW02.PW0FWCRT[PW0FWSB1] = PW0FW02.PW0FWCRT[PW0FWSB1] + PWBREC.PWBSLCRT;
        PW0FW02.PW0FWPRD[PW0FWSB1] = PW0FW02.PW0FWPRD[PW0FWSB1] + PWBREC.PWBSLPRD;
        PW0FW02.PW0FWORD[PW0FWSB1] = PW0FW02.PW0FWORD[PW0FWSB1] + PWBREC.PWBSLORD;
        PW0FW02.PW0FWLBR[PW0FWSB1] = PW0FW02.PW0FWLBR[PW0FWSB1] + PWBREC.PWBSLLBR;
        PW0FM001.PW0FMUNT[1] = PW0FM001.PW0FMUNT[1] + PWBREC.PWBSLUNT;
        PW0FM001.PW0FMCRT[1] = PW0FM001.PW0FMCRT[1] + PWBREC.PWBSLCRT;

      end
    end


    XSPWBF1(); /* select next pwbrec record*/

  end

  PW0FSO5(); /* write last page to tsque*/

  PW0FW01.PW0FWHIX = PW0FW01.PW0FWSB1;




end // end PW0FSO3

// set up online screen
Function PW0FSO4()


         /* set up online screen*/



  PW0FSO6(); /* read temporary storage*/

  PW0FW01.PW0FWSB2 = 1;

  while (PW0FW01.PW0FWSB2 <= 6)

    PW0FM001.PKVSSNBR[PW0FWSB2] = 0;

    PW0FW01.PW0FWSB2 = PW0FW01.PW0FWSB2 + 1;

  end

  PW0FW01.PW0FWSB2 = 1;
  PW0FW01.PW0FWSB3 = 1;


  while (PW0FW01.PW0FWSB2 <= 18)

    if (PW0FW01.PW0FWSB2 == 1)
      PW0FW02.PW0FW02G = PW0FW05.PW0FW02G[1];
      PW0FW01.PW0FWSB3 = 1;
    else
      if (PW0FW01.PW0FWSB2 == 7)
        PW0FW02.PW0FW02G = PW0FW05.PW0FW02G[2];
        PW0FW01.PW0FWSB3 = 1;
      else
        if (PW0FW01.PW0FWSB2 == 13)
          PW0FW02.PW0FW02G = PW0FW05.PW0FW02G[3];
          PW0FW01.PW0FWSB3 = 1;
        end
      end
    end

    if (PW0FW02.PKVSSNBR[PW0FWSB3] == 0)
        /* next sentence*/
    else
      PW0FM001.PKVSSNBR[PW0FWSB3] = PW0FW02.PKVSSNBR[PW0FWSB3];
    end

    PW0FM001.PWBSLUNT[PW0FWSB2] = PW0FW02.PW0FWUNT[PW0FWSB3];
    PW0FM001.PWBSLCRT[PW0FWSB2] = PW0FW02.PW0FWCRT[PW0FWSB3];
    PW0FM001.PWBSLPRD[PW0FWSB2] = PW0FW02.PW0FWPRD[PW0FWSB3];
    PW0FM001.PWBSLORD[PW0FWSB2] = PW0FW02.PW0FWORD[PW0FWSB3];
    PW0FM001.PWBSLLBR[PW0FWSB2] = PW0FW02.PW0FWLBR[PW0FWSB3];

    PW0FW01.PW0FWSB2 = PW0FW01.PW0FWSB2 + 1;
    PW0FW01.PW0FWSB3 = PW0FW01.PW0FWSB3 + 1;


  end



end // end PW0FSO4

// write record to tsque
Function PW0FSO5()



         /* write record that full screen of information to tsque*/


  PW0FW05.PW0FW02G[1] = PW0FW02.PW0FW02G;
  PW0FW05.PW0FW02G[2] = PW0FW03.PW0FW02G;
  PW0FW05.PW0FW02G[3] = PW0FW04.PW0FW02G;

   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PW0FW05.PW0FWLEN = 500; /* Temporary storage length*/
  TA5REC.TA5APPID = "PW0E"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (PW0FW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "PW0ESO5 "; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PW0EM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    XSPF4(); /* exit to main menu*/

  end


end // end PW0FSO5

// read temporary storage page
Function PW0FSO6()



   /* read temporary storage page*/

   /* ------------------------------------------------------------*/
   /* Obtain the next page of orders to display.*/
   /* ------------------------------------------------------------*/

  PW0FW05.PW0FWLEN = 500; /* Temporary storage length*/
  TA5REC.TA5APPID = "PW0E"; /* Application identification*/
  TA5REC.TA5TSQIX = PW0FW01.PW0FWSB1; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (PW0FW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "PW0ESO6 "; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PW0EM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    XSPF4(); /* exit to main menu*/

  end


end // end PW0FSO6

// transfer to requested appl
Function PW0FST0()




   /* Set the "TO" application according to the PF key pressed.*/




  PKWREC.XWHCD = PW0FM001.XWHCD;

  if (converseVar.eventKey is pf3) /* ; PF3 was pressed*/
    COMMAREA.CATOAP = "PK0J"; /* PICKING INQUIRY SUBMENU*/
  else
    if (converseVar.eventKey is pf4) /* ; PF4 was pressed*/
      XSPF4(); /* ; master menu*/
    else
      if (converseVar.eventKey is pf13) /* ; PF13 was pressed*/
        COMMAREA.CATOAP = "PK0B"; /* PICKING Order Inquiry*/
      else
        if (converseVar.eventKey is pf14) /* ; PF14 was pressed*/
          COMMAREA.CATOAP = "PK0C"; /* PICKING Line Item Inquiry*/
        else
          if (converseVar.eventKey is pf15) /* ; PF15 was pressed*/
            COMMAREA.CATOAP = "PK0D"; /* PICKING Customer Inquiry*/
          else
            if (converseVar.eventKey is pf16) /* ; PF16 was pressed*/
              COMMAREA.CATOAP = "PK0Z"; /* sp & p*/
            else
              if (converseVar.eventKey is pf18) /* ; PF18 was pressed*/
                COMMAREA.CATOAP = "PK09"; /* PICK hold/rlse inq.*/
              else
                if (converseVar.eventKey is pf19) /* ; PF19 was pressed*/
                  COMMAREA.CATOAP = "PK0S"; /* PICK PLANNING Menu*/
                else
                  if (converseVar.eventKey is pf20) /* ; PF20 was pressed*/
                    COMMAREA.CATOAP = "PK07"; /* PICKING SELECT Menu*/
                  end
                end
              end
            end
          end
        end
      end
    end
  end

  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* COMMAREA user area*/

  XSEXIT(); /* Invoke selected application*/

  PW0FM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/




end // end PW0FST0

//*** RECORD=PW0FW01 ****
// allocation working storage.
// this area is the working storage unique to
// application AL0A for rule set selection for batch processing
// ***********************
Record PW0FW01 type basicRecord
  5 PW0FW01G PW0FW01G ; 
    10 PW0FWFL1 PW0FWFL1 ; 
    10 PW0FWFLG PW0FWFLG ; 
    10 PW0FWSB1 PW0FWSB1 ; 
    10 PW0FWSB2 PW0FWSB2 ; 
    10 PW0FWSB3 PW0FWSB3 ; 
    10 PW0FWPG PW0FWPG ; 
    10 PW0FWPG2 PW0FWPG2 ; 
    10 PW0FWHIX PW0FWHIX ; 
    10 PKVSSNBR PKVSSNBR ; 
    10 XWHCD XWHCD ; 
end // end PW0FW01

//*** RECORD=PW0FW02 ****
// ****** table for all location types except 11 and 12 *******
// 
// internal working storage array for all location type
// except 11 and 12
// 
// DATE CREATED:        09/08/87
// 
// MAINTENANCE LOG:
// 
// DATE       NAME     COMMENT
// --------   ------   ---------------------------------------
// 09/08/87   BNABER   New record definition.
// ***********************
Record PW0FW02 type basicRecord
  5 PW0FW02G PW0FW02G ; 
    10 PKVSSNBR PKVSSNBR [6] ; 
    10 PW0FWUNT PW0FWUNT [6] ; 
    10 PW0FWCRT PW0FWCRT [6] ; 
    10 PW0FWORD PW0FWORD [6] ; 
    10 PW0FWPRD PW0FWPRD [6] ; 
    10 PW0FWLBR PW0FWLBR [6] ; 
end // end PW0FW02

//*** RECORD=PW0FW03 ****
// ********** table for location type 11 only ****************
// 
// internal working storage array for location type 11
// 
// 
// DATE CREATED:        09/08/87
// 
// MAINTENANCE LOG:
// 
// DATE       NAME     COMMENT
// --------   ------   ---------------------------------------
// 09/08/87   BNABER   New record definition.
// ***********************
Record PW0FW03 type basicRecord
  5 PW0FW02G PW0FW02G ; 
    10 PKVSSNBR PKVSSNBR [6] ; 
    10 PW0FWUNT PW0FWUNT [6] ; 
    10 PW0FWCRT PW0FWCRT [6] ; 
    10 PW0FWORD PW0FWORD [6] ; 
    10 PW0FWPRD PW0FWPRD [6] ; 
    10 PW0FWLBR PW0FWLBR [6] ; 
end // end PW0FW03

//*** RECORD=PW0FW04 ****
// ********** table for location type 12 only ****************
// 
// internal working storage array for location type 12
// 
// 
// DATE CREATED:        09/08/87
// 
// MAINTENANCE LOG:
// 
// DATE       NAME     COMMENT
// --------   ------   ---------------------------------------
// 09/08/87   BNABER   New record definition.
// ***********************
Record PW0FW04 type basicRecord
  5 PW0FW02G PW0FW02G ; 
    10 PKVSSNBR PKVSSNBR [6] ; 
    10 PW0FWUNT PW0FWUNT [6] ; 
    10 PW0FWCRT PW0FWCRT [6] ; 
    10 PW0FWORD PW0FWORD [6] ; 
    10 PW0FWPRD PW0FWPRD [6] ; 
    10 PW0FWLBR PW0FWLBR [6] ; 
end // end PW0FW04

//*** RECORD=PW0FW05 ****
// ****** table for all location types except 11 and 12 *******
// 
// internal working storage array for all location type
// except 11 and 12
// 
// DATE CREATED:        09/08/87
// 
// MAINTENANCE LOG:
// 
// DATE       NAME     COMMENT
// --------   ------   ---------------------------------------
// 09/08/87   BNABER   New record definition.
// ***********************
Record PW0FW05 type basicRecord
  5 PW0FW05G PW0FW05G ; 
    10 PW0FWLEN PW0FWLEN ; 
    10 PW0FW02G PW0FW02G [3] ; 
end // end PW0FW05

// Group Level of Record
DataItem PW0FW01G char(33)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group Level of Record
DataItem PW0FW02G char(150)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group Level of Record
DataItem PW0FW05G char(454)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-sched-loc-crtn
DataItem PW0FWCRT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// y or n type flag
DataItem PW0FWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// no records found flag
DataItem PW0FWFLG char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold highest index number
DataItem PW0FWHIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk-sched-loc-lbr
DataItem PW0FWLBR num(7,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temporary storage length
DataItem PW0FWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk-sched-loc-ord
DataItem PW0FWORD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of pages
DataItem PW0FWPG smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// current page number
DataItem PW0FWPG2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pk-sched-loc-prod
DataItem PW0FWPRD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work subscript 1
DataItem PW0FWSB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work subscript 2
DataItem PW0FWSB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work subscript 3
DataItem PW0FWSB3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pk-sched-loc-unt
DataItem PW0FWUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

