package pw0i;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PW0I ****
// This application allows users to view the Product
// Information for orders selected for inquiry from the Order
// Selection Screens.
// 
// It can be called from two different programs, the 'Special
// Handling Order Selection', and the 'Non-Special Handling
// Order Selection'.
// 
// The map allows users to view the product information,
// fullcase and repack quantities, customer number and name,
// and the do not ship before date.
// .
// The user can also transfer out of this application by using
// one of th PF keys displayed at the bottom of the map, or
// by entering fast-path information ( also at the bottom of
// the map).
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW       1/14/91  RCREAM  New application.
//          09/24/91  SHENDE  Added PW0X to full case and repk
//                            calculations.
//          10/25/91  SHENDE  Display division code on map
//                            header.
//          12/03/91  SHENDE  Use itm qty in PK5REC rather than
//                            calculating qty.
//          03/03/92  SHENDE  Add xbc-brand-cd(xbccd) for March
//                            table changes.
//          04/30/92  SHENDE  Allow PW08 access.
//          06/01/92  gray    put carrier code in screen header
//          07/08/92  SHENDE  Display brand code in header
//          08/21/92  SHENDE  Display customer for cole haan in
//                            a 5-digit format.
//          07/29/93  RCREAM  added a second map for picking
//                            screen to be display as pink.
//                            Changed logic in the following
//                            processes 110,120,130,132,135,137
//                            200,210,300.400,500. Also added
//                            the processes 210-conv-map1,
//                            210-conv-map2, 210-data-map1, and
//                            210-data-map2.
//           10/12/93  kande1 renamed new procs for standards
// Canada    10/25/95  PSTROE Pick-up new version of XPPK003
// y2kfix    02/06/98  pharwo y2k changes to pw0imdyy on both
//                            maps.
// *********************
Program PW0I type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK4REC PK4REC; // record
  PK5REC PK5REC; // record
  PK6REC PK6REC; // record
  PKWREC PKWREC; // record
  PW0IW00 PW0IW00; // record
  PW0IW01 PW0IW01; // record
  PWJREC PWJREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XP0FW01 XP0FW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use XDVTBL; // table
  use XBCTBL; // table
  use PW0IM.PW0IM001,  // forms
      PW0IM.PW0IM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();

     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set PW0IM001 initial; /* M001 input/output*/
    set PW0IM002 initial; /* M002 input/output*/
    set PW0IW00 empty; /* Working storage*/
    set PW0IW01 empty; /* M001 display storage*/
    set PWJREC empty;
    set PK4REC empty;
    set PK5REC empty;
    set PK6REC empty;

    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* temporary storage parameters*/

     /* ------------------------------------------------------------*/
     /* ensure that a valid transfer from program*/
     /* ------------------------------------------------------------*/


    PKWREC.PKWGRPLV = COMMAREA.CAUSERA;
    PWJREC.PKWUSERB = PKWREC.PKWUSERB;


    PW0IW00.PW0IWSWF = "Y"; /* Format the map switch*/
    PW0IW00.PW0IWSWR = "Y"; /* Request for data switch*/

    PKWREC.PKWINDEX = 1;

    if (PKWREC.PKWSELSW == "PK") /* picking*/
      PW0IW00.PW0IWAPL = "   PICKING   ";
    else
      PW0IW00.PW0IWAPL = "PICK PLANNING";
    end

    if (COMMAREA.CAFROMAP == "PW08") /* in-store promo order selection*/

      /* ----- Format application name -------------------*/
      PW0IW00.PW0IWNAM = " IN-STORE PROMO ORDER SELECTION  ";
      PW0IW00.PW0IWCOL = "                ";

    end


    if (COMMAREA.CAFROMAP == "PW0X") /* stock transfer order selection*/

      /* ----- Format application name -------------------*/
      PW0IW00.PW0IWNAM = "   STOCK TRANSFER ORDER DETAIL   ";
      PW0IW00.PW0IWCOL = "                ";

    end

    if (COMMAREA.CAFROMAP == "PW07") /* pick planning*/

      /* ----- Format application name -------------------*/
      if (PKWREC.PKW-ORDER-TYP-IND == "B")
        PW0IW00.PW0IWNAM = "      B-GRADE ORDER DETAIL       ";
      else
        if (PKWREC.PKW-ORDER-TYP-IND == "C")
          PW0IW00.PW0IWNAM = "      CLOSEOUT ORDER DETAIL      ";
        end
      end

      PW0IW00.PW0IWCOL = "    REGULAR    ";

    end
     /* ***/
    if (COMMAREA.CAFROMAP == "PW03") /* pick planning*/
      if (PKWREC.PKW-ORD-GRP-SW == "FT")
        PW0IW00.PW0IWNAM = "      FOOTWEAR ORDER DETAIL     ";
      else
        if (PKWREC.PKW-ORD-GRP-SW == "AP")
          PW0IW00.PW0IWNAM = "       APPAREL ORDER DETAIL      ";
        else
          if (PKWREC.PKW-ORD-GRP-SW == "EQ")
            PW0IW00.PW0IWNAM = "     EQUIPMENT ORDER DETAIL      ";
          else
            if (PKWREC.PKW-ORD-GRP-SW == "FC")
              PW0IW00.PW0IWNAM = "   FOOTWEAR CLOSEOUT ORDER DETAIL";
            else
              if (PKWREC.PKW-ORD-GRP-SW == "AC")
                PW0IW00.PW0IWNAM = "   APPAREL CLOSEOUT ORDER DETAIL";
              else
                if (PKWREC.PKW-ORD-GRP-SW == "FS")
                  PW0IW00.PW0IWNAM = "   FOOTWEAR SAMPLES ORDER DETAIL";
                else
                  if (PKWREC.PKW-ORD-GRP-SW == "AS")
                    PW0IW00.PW0IWNAM = "   APPAREL SAMPLES ORDER DETAIL";
                  else
                    if (PKWREC.PKW-ORD-GRP-SW == "ES")
                      PW0IW00.PW0IWNAM = " EQUIPMENT SAMPLES ORDER DETAIL";
                    else
                      if (PKWREC.PKW-ORD-GRP-SW == "EC")
                        PW0IW00.PW0IWNAM = " EQUIPMENT CLOSEOUTORDER DETAIL";
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
     /* **/
    if (PWJREC.PWJARMAX == 0) /* no orders*/

      PW0IW00.PW0IWSWR = "N"; /* request for data switch*/
      converseLib.validationFailed(31);

    end

     /* ------------------------------------------------------------*/
      /* Process to validate from application.*/
     /* ------------------------------------------------------------*/

     /* ===******======******======******=====******===========*/
     /* MOVE 99999 TO PW0IW01.PK1CUOID;*/
     /* MOVE PW0IW01.PK1CUOID TO PW0IW01.PK1NORID;*/
     /* MOVE PW0IW01.PK1CUOID TO PW0IM001.PK1CUOID;*/
     /* MOVE PW0IW01.PK1NORID TO PW0IM001.PK1NORID;*/
     /* ===******======******======******=====******===========*/
     /* PW0I000                         ; Converse the main process*/


    PW0I000: PW0I000();
     /* ------------------------------------------------------------*/
      /* Flow to converse the main process*/
     /* ------------------------------------------------------------*/

    goto PW0I001; /* converse the main process*/

    PW0I001: PW0I001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PW0I001; /* Converse the main process*/


  end // end main
end // end PW0I

// format and display the map
Function PW0I-20001()

   /* ----- ---------------------------------------------------*/
   /* Note: apply the same changes to pw0i-20002.*/
   /* ----------------------------------------------------------*/
   /* ---------------------------------------------------------*/
   /* format date and heading fields*/
   /* ----------------------------------------------------------*/

  PW0IM001.XXXCURDT = VGVar.currentShortGregorianDate;

  PW0IM001.PW0IMAPL = PW0IW00.PW0IWAPL;
  PW0IM001.PW0IMNAM = PW0IW00.PW0IWNAM;
  PW0IM001.PW0IMCOL = PW0IW00.PW0IWCOL;

  PW0IM001.XWHCD = PKWREC.XWHCD;
  PW0IM001.XWHABRV = PKWREC.XWHABRV;

  PW0IM001.XDVCD = PW0IW01.XDVCD;
  if (PW0IW01.XDVCD in XDVTBL.XDVCD)
    PW0IM001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
  end

  PW0IM001.XBCCD = PW0IW01.XBCCD;
  if (PW0IW01.XBCCD in XBCTBL.XBCCD)
    PW0IM001.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
  end

  PW0IM001.CATOAP = COMMAREA.CATOAP; /* to application*/
  PW0IM001.CAITEM = COMMAREA.CAITEM; /* application data*/

   /* ----------------------------------------------------------*/
   /* If message to display, indicate sound*/
   /* ----------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (PW0IW00.XXXMSGNO != 0 /* message to display*/
     || COMMAREA.CAMSG != " ") /* or message text*/

      if (PW0IW00.XXXMSGNO != 0) /* message to display*/

        if (PW0IW00.XXXTSPAG == 1) /* First page*/
          if (PW0IW00.XXXMSGNO == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(PW0IW00.XXXMSGNO);
          end /* message number*/
          PW0IM001.XXXMODID = PW0IW00.XXXMODID;
          set PW0IM001 alarm; /* indicate sound alarm*/
        end

      else
        PW0IM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* message text*/
        PW0IM001.XXXMODID = PW0IW00.XXXMODID;
        set PW0IM001 alarm; /* indicate sound alarm*/
      end
    end
  else
    PW0IM001.XXXMODID = PW0IW00.XXXMODID;
    set PW0IM001 alarm; /* indicate sound alarm*/
  end


  converse PW0IM001 ;

   /* -----------------------------------------------------------*/
   /* clear the message fields and save fast path information*/
   /* -----------------------------------------------------------*/

  PW0IW00.XXXMODID = " "; /* module identification*/
  PW0IW00.XXXMSGNO = 0; /* message number*/
  COMMAREA.CAMSG = " "; /* message text*/

  COMMAREA.CATOAP = PW0IM001.CATOAP; /* to application*/
  COMMAREA.CAITEM = PW0IM001.CAITEM; /* application data*/

end // end PW0I-20001

// format and display the map
Function PW0I-20002()

   /* ----- ---------------------------------------------------*/
   /* Note: apply the same changes to pw0i-20001.*/
   /* ----------------------------------------------------------*/
   /* ---------------------------------------------------------*/
   /* format date and heading fields*/
   /* ----------------------------------------------------------*/

  PW0IM002.XXXCURDT = VGVar.currentShortGregorianDate;

  PW0IM002.PW0IMAPL = PW0IW00.PW0IWAPL;
  PW0IM002.PW0IMNAM = PW0IW00.PW0IWNAM;
  PW0IM002.PW0IMCOL = PW0IW00.PW0IWCOL;

  PW0IM002.XWHCD = PKWREC.XWHCD;
  PW0IM002.XWHABRV = PKWREC.XWHABRV;

  PW0IM002.XDVCD = PW0IW01.XDVCD;
  if (PW0IW01.XDVCD in XDVTBL.XDVCD)
    PW0IM002.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
  end

  PW0IM002.XBCCD = PW0IW01.XBCCD;
  if (PW0IW01.XBCCD in XBCTBL.XBCCD)
    PW0IM002.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
  end

  PW0IM002.CATOAP = COMMAREA.CATOAP; /* to application*/
  PW0IM002.CAITEM = COMMAREA.CAITEM; /* application data*/

   /* ----------------------------------------------------------*/
   /* If message to display, indicate sound*/
   /* ----------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (PW0IW00.XXXMSGNO != 0 /* message to display*/
     || COMMAREA.CAMSG != " ") /* or message text*/

      if (PW0IW00.XXXMSGNO != 0) /* message to display*/

        if (PW0IW00.XXXTSPAG == 1) /* First page*/
          if (PW0IW00.XXXMSGNO == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(PW0IW00.XXXMSGNO);
          end /* message number*/
          PW0IM002.XXXMODID = PW0IW00.XXXMODID;
          set PW0IM002 alarm; /* indicate sound alarm*/
        end

      else
        PW0IM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* message text*/
        PW0IM002.XXXMODID = PW0IW00.XXXMODID;
        set PW0IM002 alarm; /* indicate sound alarm*/
      end
    end
  else
    PW0IM002.XXXMODID = PW0IW00.XXXMODID;
    set PW0IM002 alarm; /* indicate sound alarm*/
  end


  converse PW0IM002 ;

   /* -----------------------------------------------------------*/
   /* clear the message fields and save fast path information*/
   /* -----------------------------------------------------------*/

  PW0IW00.XXXMODID = " "; /* module identification*/
  PW0IW00.XXXMSGNO = 0; /* message number*/
  COMMAREA.CAMSG = " "; /* message text*/

  COMMAREA.CATOAP = PW0IM002.CATOAP; /* to application*/
  COMMAREA.CAITEM = PW0IM002.CAITEM; /* application data*/

end // end PW0I-20002

// format the display data
Function PW0I-21001()

   /* ------------------------------------------------------------*/
   /* Note: Ap|ply the same changes to pw0i-21002.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW0IM001 initial; /* M001 input/output area*/

  PW0IW00.PW0IWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW0IW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW0IW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PW0IW00.PW0IWSWU == "Y") /* Current page was changed*/

        PW0IS01(); /* Update temporary storage page*/

        PW0IW00.PW0IWSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW0IW00.XXXTSPAG > PW0IW00.TA5TSQIX) /* Desired greater highest*/
        PW0IW00.XXXTSPAG = PW0IW00.TA5TSQIX; /* Default to highest*/
      end

      PW0IS02(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set PW0IM001.XXXLITPG skip; /* "PAGE" literal*/
    PW0IM001.XXXLITPG = "PAGE"; /* "PAGE constant"*/
    set PW0IM001.XXXLITOF skip; /* "OF" literal*/
    PW0IM001.XXXLITOF = "OF"; /* "OF constant"*/
    PW0IM001.XXXTSPAG = PW0IW00.XXXTSPAG; /* Current page*/
    PW0IM001.TA5TSQIX = PW0IW00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PW0IM001.XWHCD = PW0IW01.XWHCD;
  PW0IM001.XWHABRV = PW0IW01.XWHABRV;

  PW0IM001.PK1CUOID = PW0IW01.PK1CUOID;
  PW0IM001.PK1NORID = PW0IW01.PK1NORID;

  if (PW0IW01.XBCCD == "08")
    XP0FW01.XBCCD = PW0IW01.XBCCD;
    XP0FW01.KUCCOID = PW0IW01.KUCCOID;
    XP0FS01();
    PW0IM001.KUCCOID = XP0FW01.XP0FW01-EXTERNAL;
  else
    PW0IM001.KUCCOID = PW0IW01.KUCCOID;
  end

  PW0IM001.KUMSTRID = PW0IW01.KUMSTRID;
  PW0IM001.XNXCD = PW0IW01.XNXCD;

  PW0IM001.KUCCONM = PW0IW01.KUCCONM;

  PW0IM001.TF1CARCD = PW0IW01.TF1CARCD; /* CARRIER CODE*/

  PW0IM001.PW0IMDMM = PW0IW01.PW0IWMM;
  PW0IM001.PW0IMDDD = PW0IW01.PW0IWDD;
  PW0IM001.PW0IMDYY = PW0IW01.PW0IWYY;

  PW0IM001.PK4SLIND = PW0IW01.PK4SLIND;


  PW0IW00.PW0IWIXM = 1; /* initialize line index*/


  while (PW0IW00.PW0IWIXM <= 12)

    PW0IM001.XGPCD[PW0IWIXM] = PW0IW01.XGPCD[PW0IWIXM];
    PW0IM001.SY1STNBR[PW0IWIXM] = PW0IW01.SY1STNBR[PW0IWIXM];
    PW0IM001.SY2CLRID[PW0IWIXM] = PW0IW01.SY2CLRID[PW0IWIXM];
    PW0IM001.XDMCD[PW0IWIXM] = PW0IW01.XDMCD[PW0IWIXM];
    PW0IM001.XQACD[PW0IWIXM] = PW0IW01.XQACD[PW0IWIXM];
    PW0IM001.PC2INSEG[PW0IWIXM] = PW0IW01.PC2INSEG[PW0IWIXM];
    PW0IM001.XEGCD[PW0IWIXM] = PW0IW01.XEGCD[PW0IWIXM];
    PW0IM001.XPGCD[PW0IWIXM] = PW0IW01.XPGCD[PW0IWIXM];
    PW0IM001.XUMCD[PW0IWIXM] = PW0IW01.XUMCD[PW0IWIXM];
    PW0IM001.XOWCD[PW0IWIXM] = PW0IW01.XOWCD[PW0IWIXM];
    PW0IM001.PW0IMFCQ[PW0IWIXM] = PW0IW01.PW0IWFCQ[PW0IWIXM];
    PW0IM001.PW0IMRPQ[PW0IWIXM] = PW0IW01.PW0IWRPQ[PW0IWIXM];
    PW0IM001.PW0IMTOT[PW0IWIXM] = PW0IW01.PW0IWTOT[PW0IWIXM];

    PW0IW00.PW0IWIXM = PW0IW00.PW0IWIXM + 1;


  end
end // end PW0I-21001

// format the display data
Function PW0I-21002()
   /* ------------------------------------------------------------*/
   /* Note: Apply the same changes to pw0i-21001.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW0IM002 initial; /* M002 input/output area*/

  PW0IW00.PW0IWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW0IW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW0IW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PW0IW00.PW0IWSWU == "Y") /* Current page was changed*/

        PW0IS01(); /* Update temporary storage page*/

        PW0IW00.PW0IWSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW0IW00.XXXTSPAG > PW0IW00.TA5TSQIX) /* Desired greater highest*/
        PW0IW00.XXXTSPAG = PW0IW00.TA5TSQIX; /* Default to highest*/
      end

      PW0IS02(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set PW0IM002.XXXLITPG skip; /* "PAGE" literal*/
    PW0IM002.XXXLITPG = "PAGE"; /* "PAGE constant"*/
    set PW0IM002.XXXLITOF skip; /* "OF" literal*/
    PW0IM002.XXXLITOF = "OF"; /* "OF constant"*/
    PW0IM002.XXXTSPAG = PW0IW00.XXXTSPAG; /* Current page*/
    PW0IM002.TA5TSQIX = PW0IW00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PW0IM002.XWHCD = PW0IW01.XWHCD;
  PW0IM002.XWHABRV = PW0IW01.XWHABRV;

  PW0IM002.PK1CUOID = PW0IW01.PK1CUOID;
  PW0IM002.PK1NORID = PW0IW01.PK1NORID;

  if (PW0IW01.XBCCD == "08")
    XP0FW01.XBCCD = PW0IW01.XBCCD;
    XP0FW01.KUCCOID = PW0IW01.KUCCOID;
    XP0FS01();
    PW0IM002.KUCCOID = XP0FW01.XP0FW01-EXTERNAL;
  else
    PW0IM002.KUCCOID = PW0IW01.KUCCOID;
  end

  PW0IM002.KUMSTRID = PW0IW01.KUMSTRID;
  PW0IM002.XNXCD = PW0IW01.XNXCD;

  PW0IM002.KUCCONM = PW0IW01.KUCCONM;

  PW0IM002.TF1CARCD = PW0IW01.TF1CARCD; /* CARRIER CODE*/

  PW0IM002.PW0IMDMM = PW0IW01.PW0IWMM;
  PW0IM002.PW0IMDDD = PW0IW01.PW0IWDD;
  PW0IM002.PW0IMDYY = PW0IW01.PW0IWYY;

  PW0IM002.PK4SLIND = PW0IW01.PK4SLIND;


  PW0IW00.PW0IWIXM = 1; /* initialize line index*/


  while (PW0IW00.PW0IWIXM <= 12)

    PW0IM002.XGPCD[PW0IWIXM] = PW0IW01.XGPCD[PW0IWIXM];
    PW0IM002.SY1STNBR[PW0IWIXM] = PW0IW01.SY1STNBR[PW0IWIXM];
    PW0IM002.SY2CLRID[PW0IWIXM] = PW0IW01.SY2CLRID[PW0IWIXM];
    PW0IM002.XDMCD[PW0IWIXM] = PW0IW01.XDMCD[PW0IWIXM];
    PW0IM002.XQACD[PW0IWIXM] = PW0IW01.XQACD[PW0IWIXM];
    PW0IM002.PC2INSEG[PW0IWIXM] = PW0IW01.PC2INSEG[PW0IWIXM];
    PW0IM002.XEGCD[PW0IWIXM] = PW0IW01.XEGCD[PW0IWIXM];
    PW0IM002.XPGCD[PW0IWIXM] = PW0IW01.XPGCD[PW0IWIXM];
    PW0IM002.XUMCD[PW0IWIXM] = PW0IW01.XUMCD[PW0IWIXM];
    PW0IM002.XOWCD[PW0IWIXM] = PW0IW01.XOWCD[PW0IWIXM];
    PW0IM002.PW0IMFCQ[PW0IWIXM] = PW0IW01.PW0IWFCQ[PW0IWIXM];
    PW0IM002.PW0IMRPQ[PW0IWIXM] = PW0IW01.PW0IWRPQ[PW0IWIXM];
    PW0IM002.PW0IMTOT[PW0IWIXM] = PW0IW01.PW0IWTOT[PW0IWIXM];

    PW0IW00.PW0IWIXM = PW0IW00.PW0IWIXM + 1;


  end
end // end PW0I-21002

// validate from application
Function PW0I000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP != "PW0H" /* From allowed application*/
   && COMMAREA.CAFROMAP != "PW0L" 
   && COMMAREA.CAFROMAP != "PW0R" 
   && COMMAREA.CAFROMAP != "PW0X" 
   && COMMAREA.CAFROMAP != "PW07" 
   && COMMAREA.CAFROMAP != "PW08" 
   && COMMAREA.CAFROMAP != "PW03" 
   && COMMAREA.CAFROMAP != "GD00")


    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/

    COMMAREA.CATOAPP = COMMAREA.CAFROMAP;

    XSNOWAY(); /* Invalid transfer was attempted*/


  end

   /* ------------------------------------------------------------*/
    /* determine whether a valid warehouse was passed*/
   /* ------------------------------------------------------------*/

  XPPK003(); /* warehouse validation*/

end // end PW0I000

// inquire/maintain a table row
Function PW0I001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process the valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW0I100(); /* Obtain the data to display*/

  PW0I200(); /* Format and display the map*/

  PW0I300(); /* Check attention identifier*/

  PW0I400(); /* Reset fields to normal intensity*/

  PW0I500(); /* Verify the entered data*/

  PW0I600(); /* Process valid input request*/

end // end PW0I001

// obtain the data to display
Function PW0I100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PW0IW00.PW0IWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length*/
   /* ------------------------------------------------------------*/

  PW0IW00.XXXTSLEN = 725; /* temporary storage page length*/


   /* ------------------------------------------------------------*/
    /* if no message to display, reset the page number*/
   /* ------------------------------------------------------------*/

  if (PW0IW00.XXXMSGNO == 0)
    PW0IW00.XXXTSPAG = 1; /* page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields*/
   /* ------------------------------------------------------------*/

  PW0I105(); /* purge any temporary storage*/

  PW0IW01.XWHCD = PKWREC.XWHCD; /* warehouse code*/
  PW0IW01.XWHABRV = PKWREC.XWHABRV; /* warehouse desc*/

   /* ------------------------------------------------------------*/
   /* Obtain the data from the tables.*/
   /* ------------------------------------------------------------*/

  PW0I108(); /* Obtain data from tables*/


   /* ------------------------------------------------------------*/
    /* indicate taht the request for data is complete*/
   /* ------------------------------------------------------------*/

  PW0IW00.PW0IWSWR = "N"; /* Request for data switch*/


end // end PW0I100

// purge any temporary storage
Function PW0I105()

  set PW0IW01 empty; /* m001 display storage*/

  PW0IW00.PW0IWSWU = "N"; /* storage update switch*/

  TA5REC.TA5TSQIX = 0; /* current page number*/
  PW0IW00.TA5TSQIX = 0; /* highest page number*/

   /* ------------------------------------------------------------*/
   /* purge any temporary storage for this application*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* application ident*/
  TA5REC.TA5FNCCD = "P"; /* function code*/

  try
    call "TA0050" (PW0IW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* if successful, return to prev process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && TA5REC.TA5RTNCD == 0)         

    return;

  end

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA;
  PW0IW00.XXXMODID = "105";
  converseLib.validationFailed(10);
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1TYPE = "APPL";
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = PW0IW00.XXXMODID;
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP;
  TA1REC.TA1MAPNO = "M001";

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};

  exit stack;


end // end PW0I105

// obtain Data from the tables
Function PW0I108()

  if (PWJREC.PWJORACT[PKWINDEX] == "I") /* action code from pkyrec*/

    PW0I110(); /* select the heading information*/

    PW0IW01.PK1CUOID = PWJREC.PK1CUOID[PKWINDEX];
    PW0IW01.PK1NORID = PWJREC.PK1NORID[PKWINDEX];

    PW0IW01.XBCCD = PK4REC.XBCCD;
    PW0IW01.XDVCD = PK4REC.XDVCD;
    PW0IW01.KUCCOID = PK4REC.KUCCOID;
    PW0IW01.KUMSTRID = PK4REC.KUMSTRID;
    PW0IW01.XNXCD = PK4REC.XNXCD;
    PW0IW01.TF1CARCD = PK4REC.TF1CARCD;
    PW0IW00.PW0IWDT = PK4REC.OP1DSBDT;
    PW0IW01.PW0IWMM = PW0IW00.PW0IWMM;
    PW0IW01.PW0IWDD = PW0IW00.PW0IWDD;
    PW0IW01.PW0IWYY = PW0IW00.PW0IWYY;

    PW0IW01.PK4SLIND = PK4REC.PK4SLIND;


    PW0I120(); /* select customer information*/

    PW0IW01.KUCCONM = PW0IW00.KUCCONM; /* customer name*/

    /* --------------------------------------------------------*/
      /* fetch and format data until end of cursor*/
    /* --------------------------------------------------------*/


    PW0I130(); /* select item information*/

    PW0IW00.PW0IWIXM = 1; /* item index*/
    PW0IW00.PW0IWWC2 = "N";

    while (PW0IW00.PW0IWWC2 == "N")

      PW0I132(); /* fetch item row*/

      if (PW0IW00.PW0IWWC2 == "N") /* not end of cursor*/
        PW0I135(); /* save to display storage*/
        PW0IW00.PW0IWIXM = PW0IW00.PW0IWIXM + 1; /* line index*/
      end

      /* ------------------------------------------------------*/
        /* if the page is full, add the page to the storage queue*/
      /* ------------------------------------------------------*/
      if (PW0IW00.PW0IWIXM > 12) /* page is full*/
        PW0I112(); /* add page to temp storage*/
        PW0IW00.PW0IWIXM = 1; /* display line index*/
      end
    end

    /* --------------------------------------------------------*/
      /* add any partially formatted pages*/
    /* --------------------------------------------------------*/

    if (PW0IW00.PW0IWIXM > 1) /* page was formatted*/
      PW0I112(); /* add page to temp storage*/
    end

    /* --------------------------------------------------------*/
      /* close the cursor for the selected set*/
    /* --------------------------------------------------------*/

    PW0I137(); /* close cursor*/

    /* --------------------------------------------------------*/
      /* if no pages were formatted, indicate no data to display*/
    /* --------------------------------------------------------*/

    if (PW0IW00.TA5TSQIX == 0) /* no pages were formatted*/
      PW0IW00.XXXMODID = "108"; /* module id*/
      PW0IW00.XXXMSGNO = 11; /* no data was found to display*/

      return;

    end

  else

    converseLib.validationFailed(31); /* no more orders to display*/

  end


end // end PW0I108

// select header table row
Function PW0I110()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* clear row storage area*/

  if (PWJREC.XWHCD > "  ")
    PK4REC.XWHCD = PWJREC.XWHCD;
  else
    PK4REC.XWHCD = PKWREC.XWHCD;
  end


  PK4REC.PK1CUOID = PWJREC.PK1CUOID[PKWINDEX]; /* cust order id*/
  PK4REC.PK1NORID = PWJREC.PK1NORID[PKWINDEX]; /* cust order id*/

  try
    call "IO1720" ("S ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0IW00.XXXMODID = "110"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0IW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0I110

// add page to temporary storage
Function PW0I112()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PW0IW01.XXXTSLEN = PW0IW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PW0IW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PW0IW01 empty; /* M001 display storage*/

    PW0IW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0IW00.XXXMODID = "112"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0IW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0I112

// Select and open cursor
Function PW0I120()
   /* ------------------------------------------------------------*/
   /* Select the set of requested rows from the table.*/
   /* ------------------------------------------------------------*/

  set PK6REC empty; /* clear row storage area*/

  PK6REC.KUCCOID = PK4REC.KUCCOID; /* cust id*/
  PK6REC.KUMSTRID = PK4REC.KUMSTRID; /* store id*/

  try
    call "IO1830" ("S ", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0IW00.KUCCONM = PK6REC.KUCCONM;

      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* normal return code*/
        PW0IW00.XXXMSGNO = 163;
        PW0IW00.KUCCONM = "CUSTOMER NOT HERE  ";

        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0IW00.XXXMODID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0IW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKCUS01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK6REC.PK6GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0I120

// select header table row
Function PW0I130()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set PK5REC empty; /* Clear row storage area*/

  PK5REC.XWHCD = PW0IW01.XWHCD;
  PK5REC.PK1CUOID = PK4REC.PK1CUOID;
  PK5REC.PK1NORID = PK4REC.PK1NORID;

  try
    call "IO1990" ("S1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0IW00.XXXMODID = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0IW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK5REC.PK5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0I130

// fetch next row in the cursor
Function PW0I132()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1990" ("N1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0IW00.PW0IWWC2 = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0IW00.XXXMODID = "132"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0IW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK5REC.PK5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0I132

// Save detail table row
Function PW0I135()
   /* ------------------------------------------------------------*/
    /* if first line on subsequent page, save heading information*/
   /* ------------------------------------------------------------*/

  if (PW0IW00.PW0IWIXM == 1) /* first line on page*/

    PW0IW01.PW0IWAPL = PW0IW00.PW0IWAPL; /* appl heading*/
    PW0IW01.PW0IWNAM = PW0IW00.PW0IWNAM; /* map name*/
    PW0IW01.PW0IWCOL = PW0IW00.PW0IWCOL; /* col heading*/

    PW0IW01.XWHCD = PK4REC.XWHCD;
    PW0IW01.XWHABRV = PKWREC.XWHABRV;

    PW0IW01.XBCCD = PK4REC.XBCCD;
    PW0IW01.XDVCD = PK4REC.XDVCD;

    PW0IW01.PK1CUOID = PK4REC.PK1CUOID; /* cust nbr*/
    PW0IW01.PK1NORID = PK4REC.PK1NORID; /* order id*/

    PW0IW01.KUCCOID = PK4REC.KUCCOID; /* customer id*/
    PW0IW01.KUMSTRID = PK4REC.KUMSTRID; /* store id*/
    PW0IW01.XNXCD = PK4REC.XNXCD; /* dept code*/

    PW0IW01.KUCCONM = PW0IW00.KUCCONM; /* customer name*/
    PW0IW01.TF1CARCD = PK4REC.TF1CARCD; /* CARRIER CODE*/

    PW0IW00.PW0IWDT = PK4REC.OP1DSBDT; /* dnsb date*/

    PW0IW01.PW0IWMM = PW0IW00.PW0IWMM;
    PW0IW01.PW0IWDD = PW0IW00.PW0IWDD;
    PW0IW01.PW0IWYY = PW0IW00.PW0IWYY;

    PW0IW01.PK4SLIND = PK4REC.PK4SLIND; /* prev select flag*/

  end

   /* ------------------------------------------------------------*/
   /* save data from the table row*/
   /* ------------------------------------------------------------*/

  PW0IW01.XGPCD[PW0IWIXM] = PK5REC.XGPCD;
  PW0IW01.SY1STNBR[PW0IWIXM] = PK5REC.SY1STNBR;
  PW0IW01.SY2CLRID[PW0IWIXM] = PK5REC.SY2CLRID;
  PW0IW01.XDMCD[PW0IWIXM] = PK5REC.XDMCD;
  PW0IW01.XQACD[PW0IWIXM] = PK5REC.XQACD;
  PW0IW01.PC2INSEG[PW0IWIXM] = PK5REC.PC2INSEG;
  PW0IW01.XEGCD[PW0IWIXM] = PK5REC.XEGCD;
  PW0IW01.XPGCD[PW0IWIXM] = PK5REC.XPGCD;
  PW0IW01.XUMCD[PW0IWIXM] = PK5REC.XUMCD;
  PW0IW01.XOWCD[PW0IWIXM] = PK5REC.XOWCD;


   /* ----------------------------------------------------------*/
   /* Obtain fullcase and repack qunatities*/
   /* - Return to previous process if item isn't:*/
   /* -Stock transfer*/
   /* -Spcl & Non-spcl handling*/
   /* -B-grade/closeout*/
   /* -----------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* Determine stock transfer items*/
   /* ----------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "PW0X")
    if (PK5REC.PK1NORID == 0) /* stock transfer*/
      PW0IW01.PW0IWFCQ[PW0IWIXM] = PK5REC.PK5ITMFC;
      PW0IW01.PW0IWRPQ[PW0IWIXM] = PK5REC.PK5ITMRP;
      PW0IW01.PW0IWTOT[PW0IWIXM] = PK5REC.PK5TIQTY;
    else
      return; /* return to previous process*/
    end
  end


   /* ----------------------------------------------------------*/
   /* Determine special handling items*/
   /* ----------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "PW0H")
    if (PK5REC.XHDCD[1] > "   " /* special handling code*/
     || PK5REC.XHDCD[2] > "   " 
     || PK5REC.XHDCD[3] > "   " 
     || PK5REC.XHDCD[4] > "   " 
     || PK5REC.XHDCD[5] > "   ")

      PW0IW01.PW0IWFCQ[PW0IWIXM] = PK5REC.PK5ITMFC;
      PW0IW01.PW0IWRPQ[PW0IWIXM] = PK5REC.PK5ITMRP;
      PW0IW01.PW0IWTOT[PW0IWIXM] = PK5REC.PK5TIQTY;
    else
      PW0IW00.XXXMSGNO = 317;
      return; /* return to previous process*/
    end
  end

   /* ----------------------------------------------------------*/
   /* Determine non-special handling items*/
   /* ----------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "PW0L")
    if (PK5REC.XHDCD[1] == "  " /* no special handling code*/
     && PK5REC.XHDCD[2] == "   "
     && PK5REC.XHDCD[3] == "   "
     && PK5REC.XHDCD[4] == "   "
     && PK5REC.XHDCD[5] == "   ")

      PW0IW01.PW0IWFCQ[PW0IWIXM] = PK5REC.PK5ITMFC;
      PW0IW01.PW0IWRPQ[PW0IWIXM] = PK5REC.PK5ITMRP;
      PW0IW01.PW0IWTOT[PW0IWIXM] = PK5REC.PK5TIQTY;
    else
      return; /* return to previous process*/
    end
  end

   /* ----------------------------------------------------------*/
   /* Determine b-grade/closeouts*/
   /* ----------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "PW07")

    PW0IW01.PW0IWFCQ[PW0IWIXM] = PK5REC.PK5ITMFC;
    PW0IW01.PW0IWRPQ[PW0IWIXM] = PK5REC.PK5ITMRP;
    PW0IW01.PW0IWTOT[PW0IWIXM] = PK5REC.PK5TIQTY;

  end

   /* ----------------------------------------------------------*/
   /* In-store promo orders*/
   /* ----------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "PW08")

    PW0IW01.PW0IWFCQ[PW0IWIXM] = PK5REC.PK5ITMFC;
    PW0IW01.PW0IWRPQ[PW0IWIXM] = PK5REC.PK5ITMRP;
    PW0IW01.PW0IWTOT[PW0IWIXM] = PK5REC.PK5TIQTY;

  end


end // end PW0I135

// close selected set cursor
Function PW0I137()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1990" ("C1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0IW00.XXXMODID = "137"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0IW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0I137

// Format and display the map
Function PW0I200()

  if (converseVar.validationMsgNum != 0) /* error was found*/
    PW0IW00.XXXMSGNO = converseVar.validationMsgNum; /* message number*/
  end

  if (PW0IW00.PW0IWSWR == "Y" /* obtain data failed*/
   || converseVar.validationMsgNum == 0) /* no error*/

    if (PW0IW00.PW0IWSWF == "Y") /* map must be formatted*/
      if (PKWREC.PKWSELSW == "PK") /* picking*/
        PW0I-21002();
      else
        PW0I-21001();
      end
    end
  end


  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW0I-20002();
  else
    PW0I-20001(); /* pick planning*/
  end

end // end PW0I200

// Check attention identifier
Function PW0I300()
   /* ------------------------------------------------------------*/
   /* if CANCEL was requested, clear the map fields and exit*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* pa2 was pressed*/

    if (PW0IW00.PW0IWSWR == "Y") /* request for data pending*/
      set PW0IW01 empty; /* m001 display storage*/
    end

    PW0IW00.PW0IWSWF = "Y"; /* format the map switch*/
    PW0IW00.PW0IWSWR = "N"; /* request for data switch*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* application data*/

    exit stack; /* exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* if FAST PATH was requested, transfer to that application.*/
   /* ------------------------------------------------------------*/

  if (PW0IM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* enter was pressed*/
      if (PW0IM001.CATOAP == COMMAREA.CACURRAP)
        converseLib.validationFailed(1);
        set PW0IM001.CATOAP cursor, bold;
        exit stack;
      end
      PW0I105(); /* purge temporary storage*/
      XSPKS01(); /* exit to another application*/
      set PW0IM001.CATOAP cursor, bold; /* highlight*/
    else
      PW0IW00.XXXMODID = "300"; /* module identification*/
      converseLib.validationFailed(001); /* invalid FAST PATH msg*/
    end
    exit stack; /* exit to display map*/
  else
    if (PW0IM002.CATOAP > " ") /* FAST PATH was requested*/
      if (converseVar.eventKey is enter) /* enter was pressed*/
        if (PW0IM002.CATOAP == COMMAREA.CACURRAP)
          converseLib.validationFailed(1);
          set PW0IM002.CATOAP cursor, bold;
          exit stack;
        end
        PW0I105(); /* purge temporary storage*/
        XSPKS01(); /* exit to another application*/
        set PW0IM002.CATOAP cursor, bold; /* highlight*/
      else
        PW0IW00.XXXMODID = "300"; /* module identification*/
        converseLib.validationFailed(001); /* invalid FAST PATH msg*/
      end
      exit stack; /* exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the master*/
   /* Menuwas requested, exit to another appllication.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* pf1 was pressed*/
   || converseVar.eventKey is pf3 /* pf3 was pressed*/
   || converseVar.eventKey is pf4 /* pf4 was pressed*/
   || converseVar.eventKey is pf5) /* pf5 was pressed*/

    if (converseVar.eventKey is pf1)
      COMMAREA.CATOAP = "GD00"; /* to application*/
      COMMAREA.CAITEM = "PW0IM001";
      COMMAREA.CAITEM = "PW0IM002";
    end

    if (converseVar.eventKey is pf3)
      COMMAREA.CATOAP = COMMAREA.CAFROMAP;
      PKWREC.PKWUSERB = PWJREC.PKWUSERB;
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    end

    if (converseVar.eventKey is pf4)
      COMMAREA.CATOAP = "MN0N";
      PKWREC.PKWUSERB = PWJREC.PKWUSERB;
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    end

    if (converseVar.eventKey is pf5)
      COMMAREA.CATOAP = "PW0R";
      PKWREC.PKWUSERB = PWJREC.PKWUSERB;
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    end

    PW0I105(); /* purge temporary storage*/

    XSPKS01(); /* exit to another application*/

    exit stack; /* exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter
   && converseVar.eventKey not pf7
   && converseVar.eventKey not pf8)

    PW0IW00.XXXMODID = "300"; /* module identification*/
    converseLib.validationFailed(12); /* invalid key pressed*/

    if (converseVar.eventKey is pakey)
      converseLib.clearScreen();
      
      converseLib.clearScreen();
      
    end

    exit stack; /* exit to display map*/

  end

end // end PW0I300

// reset highlighted fields
Function PW0I400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PW0IM001.CATOAP initialAttributes; /* TO application*/
  set PW0IM002.CATOAP initialAttributes; /* TO application*/
  set PW0IM001.CAITEM initialAttributes; /* Application data*/
  set PW0IM002.CAITEM initialAttributes; /* Application data*/

  converseLib.validationFailed(0); /* ; reset message field*/

end // end PW0I400

// verify data that was entered
Function PW0I500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PW0IM001.CAITEM > " ") /* Application data was entered*/

    PW0IW00.XXXMODID = "500"; /* Module identification*/
    set PW0IM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/

    exit stack;

  else
    if (PW0IM002.CAITEM > " ") /* Application data was entered*/

      PW0IW00.XXXMODID = "500"; /* Module identification*/
      set PW0IM002.CAITEM cursor, bold; /* Highlight*/
      converseLib.validationFailed(15); /* Enter only with FAST PATH*/

      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, if page was formatted, get next order*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* enter was pressed*/

    if (PKWREC.PKWINDEX >= PWJREC.PWJARMAX) /* last order in array*/
      converseLib.validationFailed(64); /* no more orders*/
    end

  end

   /* ------------------------------------------------------------*/
    /* determine whether a valid scroll request was entered*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)

    if (converseVar.eventKey is pf7)

      if (PW0IW00.XXXTSPAG < 2)
        PW0IW00.XXXMODID = "300";
        converseLib.validationFailed(37); /* no previous page to display*/
      end
    end

    if (converseVar.eventKey is pf8)

      if (PW0IW00.XXXTSPAG >= PW0IW00.TA5TSQIX)
        PW0IW00.XXXMODID = "300";
        converseLib.validationFailed(38); /* no more pages to display*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* if any errors were found, exit to display map*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end PW0I500

// process valid input request
Function PW0I600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PW0IW00.PW0IWSWF = "Y"; /* Format the map switch*/


   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PW0IW00.XXXTSPAG = PW0IW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PW0IW00.XXXTSPAG = PW0IW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is enter)

    PKWREC.PKWINDEX = PKWREC.PKWINDEX + 1; /* get next order*/

    PW0IW00.PW0IWSWR = "Y"; /* Request for data switch*/

  end


end // end PW0I600

// update temporary storage page
Function PW0IS01()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PW0IW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0IW00.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0IW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0IS01

// read temporary storage page
Function PW0IS02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PW0IW01.XXXTSLEN = PW0IW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PW0IW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PW0IW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0IW00.XXXMODID = "S02"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0IW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0IS02

//*** RECORD=PW0IW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PW0IW00 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 PW0IWIDX PW0IWIDX ; 
  10 PW0IWIXM PW0IWIXM ; 
  10 PW0IWSWF PW0IWSWF ; 
  10 PW0IWSWR PW0IWSWR ; 
  10 PW0IWSWU PW0IWSWU ; 
  10 PW0IWWC2 PW0IWWC2 ; 
  10 XXXMODID XXXMODID ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 PW0IWAPL PW0IWAPL ; 
  10 PW0IWNAM PW0IWNAM ; 
  10 PW0IWCOL PW0IWCOL ; 
  10 KUCCOID KUCCOID ; 
  10 KUMSTRID KUMSTRID ; 
  10 KUCCONM KUCCONM ; 
  10 PW0IWDT PW0IWDT ; 
    15 PW0IWCC PW0IWCC ; 
    15 PW0IWYY PW0IWYY ; 
    15 PW0IWMM PW0IWMM ; 
    15 PW0IWDD PW0IWDD ; 
  10 PW0IWDFC PW0IWDFC ; 
  10 PW0IWFCQ PW0IWFCQ ; 
  10 PW0IWRPQ PW0IWRPQ ; 
  10 PW0IWTFC PW0IWTFC ; 
  10 PW0IWTRP PW0IWTRP ; 
  10 PW0IWTOT PW0IWTOT ; 
end // end PW0IW00

//*** RECORD=PW0IW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record PW0IW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(725) ; 
    10 PW0IWAPL PW0IWAPL ; 
    10 PW0IWNAM PW0IWNAM ; 
    10 PW0IWCOL PW0IWCOL ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 XBCCD XBCCD ; 
    10 XDVCD XDVCD ; 
    10 PK1CUOID PK1CUOID ; 
    10 PK1NORID PK1NORID ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 KUCCONM KUCCONM ; 
    10 TF1CARCD TF1CARCD ; 
    10 PW0IWMM PW0IWMM ; 
    10 PW0IWDD PW0IWDD ; 
    10 PW0IWYY PW0IWYY ; 
    10 PK4SLIND PK4SLIND ; 
    10 XGPCD XGPCD [12] ; 
    10 SY1STNBR SY1STNBR [12] ; 
    10 SY2CLRID SY2CLRID [12] ; 
    10 XDMCD XDMCD [12] ; 
    10 XQACD XQACD [12] ; 
    10 PC2INSEG PC2INSEG [12] ; 
    10 XEGCD XEGCD [12] ; 
    10 XPGCD XPGCD [12] ; 
    10 XUMCD XUMCD [12] ; 
    10 XOWCD XOWCD [12] ; 
    10 PW0IWFCQ PW0IWFCQ [12] ; 
    10 PW0IWRPQ PW0IWRPQ [12] ; 
    10 PW0IWTOT PW0IWTOT [12] ; 
end // end PW0IW01

// map application name
DataItem PW0IWAPL char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// convert century
DataItem PW0IWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// col heading
DataItem PW0IWCOL char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// convert day
DataItem PW0IWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work area for fullcase
DataItem PW0IWDFC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// convert date field
DataItem PW0IWDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fullcase field
DataItem PW0IWFCQ num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// item qty index
DataItem PW0IWIDX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// scrolling lines index
DataItem PW0IWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// convert month
DataItem PW0IWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map heading name
DataItem PW0IWNAM char(47)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// repack field
DataItem PW0IWRPQ num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format the map switch
DataItem PW0IWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PW0IWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// storage page update switch
DataItem PW0IWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fullcase accum
DataItem PW0IWTFC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total for map field
DataItem PW0IWTOT num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// repack   accum
DataItem PW0IWTRP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cursor switch for pk5rec
DataItem PW0IWWC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// convert year
DataItem PW0IWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

