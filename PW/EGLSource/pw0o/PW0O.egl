package pw0o;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PW0O ****
// This application allows users to view the Product
// Information for orders selected for inquiry from the Pack
// and Hold Order Selection Screens.
// 
// It can be called from two different programs, the 'Pack &
// Hold Special Handling Order Selection ' and the 'Pack &
// Hold Non-Special Handling Order Selection'.
// 
// The map allows users to view the product information,
// fullcase and repack quantities, customer number and name,
// and the do not ship before date.
// 
// The user can transfer out of this application by using one
// of the pf keys displayed at the bottom of the map, or by
// entering fast-path information.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW       1/28/91  RCREAM  New application.
//          10/25/91  SHENDE  Display division code on the map
//                            header which is not modifiable.
//          01/02/92  SHENDE  Use itm qty from PK5REC rather
//                            than calculating the quantities.
//          03/03/92  SHENDE  Add xbc-brand-cd (xbccd) for
//                            March table changes.
//          07/09/92  SHENDE  Display brand code in header
//          08/21/92  SHENDE  Display cole haan customer number
//                            in a 5-digit format.
//          07/29/93  RCREAM  added a second map for picking
//                            sceen to be pink. changed the
//                            logic in the following processes:
//                            110,120,130,132,200,210,300,400,
//                            and 500. Also added 210-conv-map1
//                            & 210-conv-map2, 210-data-map1,
//                            & 210-data-map2.
//          10/13/93 kande1   renamed new procs for standards
// Canada   10/25/95 PSTROE   Pick-up new version of XPPK003
// y2kfix   02/09/98 pharwo   y2k changes to pw0omdyy on map001
//                            and map002,also regen for xx0xs01
// *********************
Program PW0O type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK4REC PK4REC; // record
  PK5REC PK5REC; // record
  PK6REC PK6REC; // record
  PK9REC PK9REC; // record
  PKBREC PKBREC; // record
  PKWREC PKWREC; // record
  PW0OW00 PW0OW00; // record
  PW0OW01 PW0OW01; // record
  PWJREC PWJREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XP0FW01 XP0FW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use XDVTBL; // table
  use XBCTBL; // table
  use PW0OM.PW0OM001,  // forms
      PW0OM.PW0OM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();

     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set PW0OM001 initial; /* M001 input/output*/
    set PW0OM002 initial; /* M002 input/output*/
    set PW0OW00 empty; /* Working storage*/
    set PW0OW01 empty; /* M001 display storage*/
    set PWJREC empty;
    set PK4REC empty;
    set PK5REC empty;
    set PK6REC empty;

    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* temporary storage parameters*/

    PKWREC.PKWGRPLV = COMMAREA.CAUSERA;
    PWJREC.PKWUSERB = PKWREC.PKWUSERB;


    PW0OW00.PW0OWSWF = "Y"; /* Format the map switch*/
    PW0OW00.PW0OWSWR = "Y"; /* Request for data switch*/

    PKWREC.PKWINDEX = 1;


    if (COMMAREA.CAFROMAP == "PW0N") /* picking*/
      PW0OW00.PW0OWNM2 = "SPECIAL HANDLING ORDER DETAIL";
      PW0OW00.PW0OWCOL = "SPECIAL HANDLING";
      PW0OW00.PW0OWNM1 = "    PACK AND HOLD ";

      if (PKWREC.PKWSELSW == "PK")

        PW0OW00.PW0OWAPL = "   PICKING   ";
      else

        if (PKWREC.PKWSELSW == "PP")
          PW0OW00.PW0OWAPL = "PICK PLANNING";
        end
      end
    else
      if (COMMAREA.CAFROMAP == "PW0Q") /* pick planning*/
        PW0OW00.PW0OWNM1 = "PACK AND HOLD NON-";
        PW0OW00.PW0OWNM2 = "SPECIAL HANDLING ORDER DETAIL";
        PW0OW00.PW0OWCOL = "    REGULAR    ";

        if (PKWREC.PKWSELSW == "PP")

          PW0OW00.PW0OWAPL = "PICK PLANNING";
        else
          if (PKWREC.PKWSELSW == "PK")

            PW0OW00.PW0OWAPL = "   PICKING   ";
          end
        end
      end
    end


    if (PWJREC.PWJARMAX == 0) /* no orders*/

      PW0OW00.PW0OWSWR = "N";
      converseLib.validationFailed(31);

    end


     /* ------------------------------------------------------------*/
      /* process to validate from application*/
     /* ------------------------------------------------------------*/

    goto PW0O000; /* validate from application*/

    PW0O000: PW0O000();

     /* ------------------------------------------------------------*/
      /* flow to converse the main process used to display map*/
     /* ------------------------------------------------------------*/

    goto PW0O001; /* converse the main process*/

    PW0O001: PW0O001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PW0O001; /* Converse the main process*/


  end // end main
end // end PW0O

// format and display the map
Function PW0O-20001()

   /* ---------------------------------------------------------*/
   /* Note: when changing this module also make*/
   /* changes to  pw0o-20002*/
   /* ---------------------------------------------------------*/

   /* ---------------------------------------------------------*/
   /* format date and heading fields*/
   /* ----------------------------------------------------------*/

  PW0OM001.XXXCURDT = VGVar.currentShortGregorianDate;

  PW0OM001.PW0OMAPL = PW0OW00.PW0OWAPL;
  PW0OM001.PW0OMNAM = PW0OW00.PW0OWNAM;
  PW0OM001.PW0OMCOL = PW0OW00.PW0OWCOL;

  PW0OM001.XWHCD = PKWREC.XWHCD;
  PW0OM001.XWHABRV = PKWREC.XWHABRV;

  PW0OM001.XDVCD = PW0OW01.XDVCD;
  if (PW0OW01.XDVCD in XDVTBL.XDVCD)
    PW0OM001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
  end

  PW0OM001.XBCCD = PW0OW01.XBCCD;
  if (PW0OW01.XBCCD in XBCTBL.XBCCD)
    PW0OM001.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
  end

  PW0OM001.CATOAP = COMMAREA.CATOAP; /* to application*/
  PW0OM001.CAITEM = COMMAREA.CAITEM; /* application data*/

   /* -----------------------------------------------------------*/
   /* If message to display, indicate sound*/
   /* -----------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)

    if (PW0OW00.XXXMSGNO != 0 /* message to display*/
     || COMMAREA.CAMSG != " ") /* or message text*/

      if (PW0OW00.XXXMSGNO != 0) /* message to display*/

        if (PW0OW00.XXXTSPAG == 1) /* First page*/
          if (PW0OW00.XXXMSGNO == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(PW0OW00.XXXMSGNO);
          end /* message number*/
          PW0OM001.XXXMODID = PW0OW00.XXXMODID;
          set PW0OM001 alarm; /* indicate sound alarm*/
        end
      else
        PW0OM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* message text*/
        PW0OM001.XXXMODID = PW0OW00.XXXMODID;
        set PW0OM001 alarm; /* indicate sound alarm*/
      end

    end
  else
    PW0OM001.XXXMODID = PW0OW00.XXXMODID;
    set PW0OM001 alarm; /* indicate sound alarm*/
  end


  converse PW0OM001 ;

   /* -----------------------------------------------------------*/
   /* clear the message fields and save fast path information*/
   /* -----------------------------------------------------------*/

  PW0OW00.XXXMODID = " "; /* module identification*/
  PW0OW00.XXXMSGNO = 0; /* message number*/
  COMMAREA.CAMSG = " "; /* message text*/

  COMMAREA.CATOAP = PW0OM001.CATOAP; /* to application*/
  COMMAREA.CAITEM = PW0OM001.CAITEM; /* application data*/

end // end PW0O-20001

// format and display the map
Function PW0O-20002()

   /* ---------------------------------------------------------*/
   /* Note: when making changes to this module also*/
   /* make   changes pw0o-20001*/
   /* ----------------------------------------------------------*/

   /* ---------------------------------------------------------*/
   /* format date and heading fields*/
   /* ----------------------------------------------------------*/

  PW0OM002.XXXCURDT = VGVar.currentShortGregorianDate;

  PW0OM002.PW0OMAPL = PW0OW00.PW0OWAPL;
  PW0OM002.PW0OMNAM = PW0OW00.PW0OWNAM;
  PW0OM002.PW0OMCOL = PW0OW00.PW0OWCOL;

  PW0OM002.XWHCD = PKWREC.XWHCD;
  PW0OM002.XWHABRV = PKWREC.XWHABRV;

  PW0OM002.XDVCD = PW0OW01.XDVCD;
  if (PW0OW01.XDVCD in XDVTBL.XDVCD)
    PW0OM002.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
  end

  PW0OM002.XBCCD = PW0OW01.XBCCD;
  if (PW0OW01.XBCCD in XBCTBL.XBCCD)
    PW0OM002.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
  end

  PW0OM002.CATOAP = COMMAREA.CATOAP; /* to application*/
  PW0OM002.CAITEM = COMMAREA.CAITEM; /* application data*/

   /* -----------------------------------------------------------*/
   /* If message to display, indicate sound*/
   /* -----------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)

    if (PW0OW00.XXXMSGNO != 0 /* message to display*/
     || COMMAREA.CAMSG != " ") /* or message text*/

      if (PW0OW00.XXXMSGNO != 0) /* message to display*/

        if (PW0OW00.XXXTSPAG == 1) /* First page*/
          if (PW0OW00.XXXMSGNO == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(PW0OW00.XXXMSGNO);
          end /* message number*/
          PW0OM002.XXXMODID = PW0OW00.XXXMODID;
          set PW0OM002 alarm; /* indicate sound alarm*/
        end
      else
        PW0OM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* message text*/
        PW0OM002.XXXMODID = PW0OW00.XXXMODID;
        set PW0OM002 alarm; /* indicate sound alarm*/
      end

    end
  else
    PW0OM002.XXXMODID = PW0OW00.XXXMODID;
    set PW0OM002 alarm; /* indicate sound alarm*/
  end


  converse PW0OM002 ;

   /* -----------------------------------------------------------*/
   /* clear the message fields and save fast path information*/
   /* -----------------------------------------------------------*/

  PW0OW00.XXXMODID = " "; /* module identification*/
  PW0OW00.XXXMSGNO = 0; /* message number*/
  COMMAREA.CAMSG = " "; /* message text*/

  COMMAREA.CATOAP = PW0OM002.CATOAP; /* to application*/
  COMMAREA.CAITEM = PW0OM002.CAITEM; /* application data*/

end // end PW0O-20002

// Format the display data
Function PW0O-21001()
   /* ------------------------------------------------------------*/
   /* Note: when making changes to this module be sure to apply*/
   /* them to the pw0o-21002 module also.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW0OM001 initial; /* M001 input/output area*/

  PW0OW00.PW0OWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW0OW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW0OW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PW0OW00.PW0OWSWU == "Y") /* Current page was changed*/

        PW0OS01(); /* Update temporary storage page*/

        PW0OW00.PW0OWSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW0OW00.XXXTSPAG > PW0OW00.TA5TSQIX) /* Desired greater highest*/
        PW0OW00.XXXTSPAG = PW0OW00.TA5TSQIX; /* Default to highest*/
      end

      PW0OS02(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set PW0OM001.XXXLITPG skip; /* "PAGE" literal*/
    PW0OM001.XXXLITPG = "PAGE";
    set PW0OM001.XXXLITOF skip; /* "OF" literal*/
    PW0OM001.XXXLITOF = "OF";
    PW0OM001.XXXTSPAG = PW0OW00.XXXTSPAG; /* Current page*/
    PW0OM001.TA5TSQIX = PW0OW00.TA5TSQIX; /* Highest page*/
  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PW0OM001.XWHCD = PW0OW01.XWHCD;
  PW0OM001.XWHABRV = PW0OW01.XWHABRV;

  PW0OM001.PK1CUOID = PW0OW01.PK1CUOID;
  PW0OM001.PK1NORID = PW0OW01.PK1NORID;

  if (PW0OW01.XBCCD == "08")
    XP0FW01.KUCCOID = PW0OW01.KUCCOID;
    XP0FW01.XBCCD = PW0OW01.XBCCD;
    XP0FS01();
    PW0OM001.KUCCOID = XP0FW01.XP0FW01-EXTERNAL;
  else
    PW0OM001.KUCCOID = PW0OW01.KUCCOID;
  end

  PW0OM001.KUMSTRID = PW0OW01.KUMSTRID;
  PW0OM001.XNXCD = PW0OW01.XNXCD;

  PW0OM001.KUCCONM = PW0OW01.KUCCONM;

  PW0OM001.TF2DSTCD = PW0OW01.TF2DSTCD;

  PW0OM001.PW0OMDMM = PW0OW01.PW0OWMM;
  PW0OM001.PW0OMDDD = PW0OW01.PW0OWDD;
  PW0OM001.PW0OMDYY = PW0OW01.PW0OWYY;

  PW0OM001.PK4SLIND = PW0OW01.PK4SLIND;


  PW0OW00.PW0OWIXM = 1; /* initialize line index*/


  while (PW0OW00.PW0OWIXM <= 12)

    PW0OM001.XGPCD[PW0OWIXM] = PW0OW01.XGPCD[PW0OWIXM];
    PW0OM001.SY1STNBR[PW0OWIXM] = PW0OW01.SY1STNBR[PW0OWIXM];
    PW0OM001.SY2CLRID[PW0OWIXM] = PW0OW01.SY2CLRID[PW0OWIXM];
    PW0OM001.XDMCD[PW0OWIXM] = PW0OW01.XDMCD[PW0OWIXM];
    PW0OM001.XQACD[PW0OWIXM] = PW0OW01.XQACD[PW0OWIXM];
    PW0OM001.PC2INSEG[PW0OWIXM] = PW0OW01.PC2INSEG[PW0OWIXM];
    PW0OM001.XEGCD[PW0OWIXM] = PW0OW01.XEGCD[PW0OWIXM];
    PW0OM001.XPGCD[PW0OWIXM] = PW0OW01.XPGCD[PW0OWIXM];
    PW0OM001.XUMCD[PW0OWIXM] = PW0OW01.XUMCD[PW0OWIXM];
    PW0OM001.XOWCD[PW0OWIXM] = PW0OW01.XOWCD[PW0OWIXM];
    PW0OM001.PW0OMFCQ[PW0OWIXM] = PW0OW01.PW0OWFCQ[PW0OWIXM];
    PW0OM001.PW0OMRPQ[PW0OWIXM] = PW0OW01.PW0OWRPQ[PW0OWIXM];
    PW0OM001.PW0OMTOT[PW0OWIXM] = PW0OW01.PW0OWTOT[PW0OWIXM];

    PW0OW00.PW0OWIXM = PW0OW00.PW0OWIXM + 1;


  end
end // end PW0O-21001

// Format the display data
Function PW0O-21002()
   /* ------------------------------------------------------------*/
   /* Note: When making changes to this module, be sure to apply*/
   /* them to the pw0o-21001 module also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW0OM002 initial; /* M002 input/output area*/

  PW0OW00.PW0OWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW0OW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW0OW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PW0OW00.PW0OWSWU == "Y") /* Current page was changed*/

        PW0OS01(); /* Update temporary storage page*/

        PW0OW00.PW0OWSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW0OW00.XXXTSPAG > PW0OW00.TA5TSQIX) /* Desired greater highest*/
        PW0OW00.XXXTSPAG = PW0OW00.TA5TSQIX; /* Default to highest*/
      end

      PW0OS02(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set PW0OM002.XXXLITPG skip; /* "PAGE" literal*/
    PW0OM002.XXXLITPG = "PAGE";
    set PW0OM002.XXXLITOF skip; /* "OF" literal*/
    PW0OM002.XXXLITOF = "OF";
    PW0OM002.XXXTSPAG = PW0OW00.XXXTSPAG; /* Current page*/
    PW0OM002.TA5TSQIX = PW0OW00.TA5TSQIX; /* Highest page*/
  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PW0OM002.XWHCD = PW0OW01.XWHCD;
  PW0OM002.XWHABRV = PW0OW01.XWHABRV;

  PW0OM002.PK1CUOID = PW0OW01.PK1CUOID;
  PW0OM002.PK1NORID = PW0OW01.PK1NORID;

  if (PW0OW01.XBCCD == "08")
    XP0FW01.KUCCOID = PW0OW01.KUCCOID;
    XP0FW01.XBCCD = PW0OW01.XBCCD;
    XP0FS01();
    PW0OM002.KUCCOID = XP0FW01.XP0FW01-EXTERNAL;
  else
    PW0OM002.KUCCOID = PW0OW01.KUCCOID;
  end

  PW0OM002.KUMSTRID = PW0OW01.KUMSTRID;
  PW0OM002.XNXCD = PW0OW01.XNXCD;

  PW0OM002.KUCCONM = PW0OW01.KUCCONM;

  PW0OM002.TF2DSTCD = PW0OW01.TF2DSTCD;

  PW0OM002.PW0OMDMM = PW0OW01.PW0OWMM;
  PW0OM002.PW0OMDDD = PW0OW01.PW0OWDD;
  PW0OM002.PW0OMDYY = PW0OW01.PW0OWYY;

  PW0OM002.PK4SLIND = PW0OW01.PK4SLIND;


  PW0OW00.PW0OWIXM = 1; /* initialize line index*/


  while (PW0OW00.PW0OWIXM <= 12)

    PW0OM002.XGPCD[PW0OWIXM] = PW0OW01.XGPCD[PW0OWIXM];
    PW0OM002.SY1STNBR[PW0OWIXM] = PW0OW01.SY1STNBR[PW0OWIXM];
    PW0OM002.SY2CLRID[PW0OWIXM] = PW0OW01.SY2CLRID[PW0OWIXM];
    PW0OM002.XDMCD[PW0OWIXM] = PW0OW01.XDMCD[PW0OWIXM];
    PW0OM002.XQACD[PW0OWIXM] = PW0OW01.XQACD[PW0OWIXM];
    PW0OM002.PC2INSEG[PW0OWIXM] = PW0OW01.PC2INSEG[PW0OWIXM];
    PW0OM002.XEGCD[PW0OWIXM] = PW0OW01.XEGCD[PW0OWIXM];
    PW0OM002.XPGCD[PW0OWIXM] = PW0OW01.XPGCD[PW0OWIXM];
    PW0OM002.XUMCD[PW0OWIXM] = PW0OW01.XUMCD[PW0OWIXM];
    PW0OM002.XOWCD[PW0OWIXM] = PW0OW01.XOWCD[PW0OWIXM];
    PW0OM002.PW0OMFCQ[PW0OWIXM] = PW0OW01.PW0OWFCQ[PW0OWIXM];
    PW0OM002.PW0OMRPQ[PW0OWIXM] = PW0OW01.PW0OWRPQ[PW0OWIXM];
    PW0OM002.PW0OMTOT[PW0OWIXM] = PW0OW01.PW0OWTOT[PW0OWIXM];

    PW0OW00.PW0OWIXM = PW0OW00.PW0OWIXM + 1;


  end
end // end PW0O-21002

// validate from application
Function PW0O000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP != "PW0N" /* From allowed application*/
   && COMMAREA.CAFROMAP != "PW0Q" 
   && COMMAREA.CAFROMAP != "PW0R" 
   && COMMAREA.CAFROMAP != "GD00")

    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/

    COMMAREA.CATOAPP = COMMAREA.CAFROMAP;

    XSNOWAY(); /* Invalid transfer was attempted*/

  end

   /* ------------------------------------------------------------*/
    /* determine whether a valid warehouse was passed*/
   /* ------------------------------------------------------------*/

  XPPK003(); /* warehouse validation*/

end // end PW0O000

// Inquire/maintain a table row
Function PW0O001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW0O100(); /* Obtain the data to display*/

  PW0O200(); /* Format and display the map*/

  PW0O300(); /* Check attention identifier*/

  PW0O400(); /* Reset fields to normal intensity*/

  PW0O500(); /* Verify the entered data*/

  PW0O600(); /* Process valid input request*/

end // end PW0O001

// Obtain the data to display
Function PW0O100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PW0OW00.PW0OWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length*/
   /* ------------------------------------------------------------*/

  PW0OW00.XXXTSLEN = 726; /* temporary storage page length*/


   /* ------------------------------------------------------------*/
    /* if no message to display, reset the page number*/
   /* ------------------------------------------------------------*/

  if (PW0OW00.XXXMSGNO == 0)
    PW0OW00.XXXTSPAG = 1; /* page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields*/
   /* ------------------------------------------------------------*/

  PW0O105(); /* purge any temporary storage*/

  PW0OW01.XWHCD = PKWREC.XWHCD; /* warehouse code*/
  PW0OW01.XWHABRV = PKWREC.XWHABRV; /* warehouse desc*/


   /* ------------------------------------------------------------*/
   /* Obtain the data from the tables.*/
   /* ------------------------------------------------------------*/

  PW0O108(); /* Obtain data from tables*/

   /* ------------------------------------------------------------*/
   /* indicate that the request for data is complete*/
   /* ------------------------------------------------------------*/

  PW0OW00.PW0OWSWR = "N"; /* Request for data switch*/


end // end PW0O100

// Purge any temporary storage
Function PW0O105()

  set PW0OW01 empty; /* m001 display storage*/

  PW0OW00.PW0OWSWU = "N"; /* storage update switch*/

  TA5REC.TA5TSQIX = 0; /* current page number*/
  PW0OW00.TA5TSQIX = 0; /* highest page number*/

   /* ------------------------------------------------------------*/
   /* purge any temporary storage for this application*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* application ident*/
  TA5REC.TA5FNCCD = "P"; /* function code*/

  try
    call "TA0050" (PW0OW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* if successful, return to prev process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && TA5REC.TA5RTNCD == 0)         

    return;

  end

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA;
  PW0OW00.XXXMODID = "105";
  converseLib.validationFailed(10);
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1TYPE = "APPL";
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = PW0OW00.XXXMODID;
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP;
  TA1REC.TA1MAPNO = "M001";

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};

  exit stack;


end // end PW0O105

// obtain data from the tables
Function PW0O108()

  if (PWJREC.PWJORACT[PKWINDEX] == "I") /* action code from pwjrec*/

    PW0O110(); /* select the heading information*/

    PW0OW01.PK1CUOID = PWJREC.PK1CUOID[PKWINDEX];
    PW0OW01.PK1NORID = PWJREC.PK1NORID[PKWINDEX];

    PW0OW01.XDVCD = PK4REC.XDVCD;
    PW0OW01.XBCCD = PK4REC.XBCCD;

    PW0OW01.KUCCOID = PK4REC.KUCCOID;
    PW0OW01.KUMSTRID = PK4REC.KUMSTRID;
    PW0OW01.XNXCD = PK4REC.XNXCD;

    PW0OW01.TF2DSTCD = PK4REC.TF2DSTCD;

    PW0OW00.PW0OWDT = PK4REC.OP1DSBDT;
    PW0OW01.PW0OWMM = PW0OW00.PW0OWMM;
    PW0OW01.PW0OWDD = PW0OW00.PW0OWDD;
    PW0OW01.PW0OWYY = PW0OW00.PW0OWYY;

    PW0OW01.PK4SLIND = PK4REC.PK4SLIND;


    PW0O120(); /* select customer information*/

    PW0OW01.KUCCONM = PW0OW00.KUCCONM;


    /* --------------------------------------------------------*/
      /* fetch and format data until end of cursor*/
    /* --------------------------------------------------------*/


    PW0O130(); /* select item information*/

    PW0OW00.PW0OWIXM = 1; /* line index*/
    PW0OW00.PW0OWWC2 = "N";

    while (PW0OW00.PW0OWWC2 == "N")

      PW0O132(); /* fetch item row*/

      if (PW0OW00.PW0OWWC2 == "N") /* not end of cursor*/
        PW0O135(); /* save to display storage*/
        PW0OW00.PW0OWIXM = PW0OW00.PW0OWIXM + 1; /* increment line*/
      end

      /* ------------------------------------------------------*/
        /* if the page is full, add the page to the storage queue*/
      /* ------------------------------------------------------*/
      if (PW0OW00.PW0OWIXM > 12) /* page is full*/
        PW0O112(); /* add page to temp storage*/
        PW0OW00.PW0OWIXM = 1; /* display line index*/
      end
    end

    /* --------------------------------------------------------*/
      /* add any partially formatted pages*/
    /* --------------------------------------------------------*/

    if (PW0OW00.PW0OWIXM > 1) /* page was formatted*/
      PW0O112(); /* add page to temp storage*/
    end

    /* --------------------------------------------------------*/
      /* close the cursor for the selected set*/
    /* --------------------------------------------------------*/

    PW0O137(); /* close cursor*/

    /* --------------------------------------------------------*/
      /* if no pages were formatted, indicate no data to display*/
    /* --------------------------------------------------------*/

    if (PW0OW00.TA5TSQIX == 0) /* no pages were formatted*/
      PW0OW00.XXXMODID = "108"; /* module id*/
      PW0OW00.XXXMSGNO = 11; /* no data was found to display*/

      return;

    end

  else

    converseLib.validationFailed(31); /* no orders found to display*/

  end


end // end PW0O108

// Select pool header table row
Function PW0O110()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* clear row storage area*/


   /* ------------------------------------------------------------*/
    /* check to make sure a xwhse-cd was passed*/
   /* ------------------------------------------------------------*/

  if (PWJREC.XWHCD > "  ")
    PK4REC.XWHCD = PWJREC.XWHCD; /* xwhcd from pkyrec*/
  else
    PK4REC.XWHCD = PKWREC.XWHCD; /* xwhcd from pkwrec*/
  end

  PK4REC.PK1CUOID = PWJREC.PK1CUOID[PKWINDEX]; /* cust order id*/
  PK4REC.PK1NORID = PWJREC.PK1NORID[PKWINDEX]; /* cust order id*/

  try
    call "IO1720" ("S ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0OW00.XXXMODID = "110"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0OW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0O110

// Add page to temporary storage
Function PW0O112()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PW0OW01.XXXTSLEN = PW0OW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PW0OW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PW0OW01 empty; /* M001 display storage*/

    PW0OW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0OW00.XXXMODID = "112"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0OW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0O112

// select and open cursor
Function PW0O120()
   /* ------------------------------------------------------------*/
   /* Select the set of requested rows from the table.*/
   /* ------------------------------------------------------------*/

  set PK6REC empty; /* clear row storage area*/

  PK6REC.KUCCOID = PK4REC.KUCCOID; /* cust id*/
  PK6REC.KUMSTRID = PK4REC.KUMSTRID; /* store id*/

  try
    call "IO1830" ("S ", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0OW00.KUCCONM = PK6REC.KUCCONM;

      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/
        PW0OW00.XXXMSGNO = 163;
        PW0OW00.KUCCONM = "CUSTOMER NOT HERE ";

        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0OW00.XXXMODID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0OW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKCUS01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK6REC.PK6GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0O120

// Select customer store table
Function PW0O130()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set PK5REC empty; /* Clear row storage area*/

  PK5REC.XWHCD = PW0OW01.XWHCD;
  PK5REC.PK1CUOID = PK4REC.PK1CUOID;
  PK5REC.PK1NORID = PK4REC.PK1NORID;

  try
    call "IO1990" ("S1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0OW00.XXXMODID = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0OW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK5REC.PK5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0O130

// Fetch next row in the cursor
Function PW0O132()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1990" ("N1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0OW00.PW0OWWC2 = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0OW00.XXXMODID = "132"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0OW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK5REC.PK5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0O132

// save detail table row
Function PW0O135()
   /* ------------------------------------------------------------*/
    /* if first line on subsequent page, save heading information*/
   /* ------------------------------------------------------------*/

  if (PW0OW00.PW0OWIXM == 1) /* and first line on page*/

    PW0OW01.PW0OWAPL = PW0OW00.PW0OWAPL; /* appl heading*/
    PW0OW01.PW0OWNAM = PW0OW00.PW0OWNAM; /* map name*/
    PW0OW01.PW0OWCOL = PW0OW00.PW0OWCOL; /* col heading*/

    PW0OW01.XWHCD = PK4REC.XWHCD;
    PW0OW01.XWHABRV = PKWREC.XWHABRV;

    PW0OW01.XDVCD = PK4REC.XDVCD;
    PW0OW01.XBCCD = PK4REC.XBCCD;

    PW0OW01.PK1CUOID = PK4REC.PK1CUOID; /* cust nbr*/
    PW0OW01.PK1NORID = PK4REC.PK1NORID; /* order id*/

    PW0OW01.KUCCOID = PK4REC.KUCCOID; /* customer id*/
    PW0OW01.KUMSTRID = PK4REC.KUMSTRID; /* store id*/
    PW0OW01.XNXCD = PK4REC.XNXCD; /* dept code*/

    PW0OW01.KUCCONM = PW0OW00.KUCCONM; /* customer name*/

    PW0OW01.TF2DSTCD = PK4REC.TF2DSTCD; /* dest code*/

    PW0OW00.PW0OWDT = PK4REC.OP1DSBDT; /* dnsb date*/
    PW0OW01.PW0OWMM = PW0OW00.PW0OWMM; /* dsnb date*/
    PW0OW01.PW0OWDD = PW0OW00.PW0OWDD; /* dsnb date*/
    PW0OW01.PW0OWYY = PW0OW00.PW0OWYY; /* dnsb date*/

    PW0OW01.PK4SLIND = PK4REC.PK4SLIND; /* prev select flag*/

  end

   /* ------------------------------------------------------------*/
   /* save data from the table row*/
   /* ------------------------------------------------------------*/

  PW0OW01.XGPCD[PW0OWIXM] = PK5REC.XGPCD;
  PW0OW01.SY1STNBR[PW0OWIXM] = PK5REC.SY1STNBR;
  PW0OW01.SY2CLRID[PW0OWIXM] = PK5REC.SY2CLRID;
  PW0OW01.XDMCD[PW0OWIXM] = PK5REC.XDMCD;
  PW0OW01.XQACD[PW0OWIXM] = PK5REC.XQACD;
  PW0OW01.PC2INSEG[PW0OWIXM] = PK5REC.PC2INSEG;
  PW0OW01.XEGCD[PW0OWIXM] = PK5REC.XEGCD;
  PW0OW01.XPGCD[PW0OWIXM] = PK5REC.XPGCD;
  PW0OW01.XUMCD[PW0OWIXM] = PK5REC.XUMCD;
  PW0OW01.XOWCD[PW0OWIXM] = PK5REC.XOWCD;

   /* ------------------------------------------------------------*/
    /* calculate total product for fullcase and repack quantities*/
   /* ------------------------------------------------------------*/

  PW0OW00.PW0OWTOT = 0;
  PW0OW00.PW0OWTFC = 0;
  PW0OW00.PW0OWTRP = 0;

  if (COMMAREA.CAFROMAP == "PW0N") /* special handling*/

    PW0OW00.PW0OWTOT = PW0OW00.PW0OWTOT + PK5REC.PK5TIQTY;

    if (PK5REC.XHDCD[1] > "   " /* special handling code*/
     || PK5REC.XHDCD[2] > "   " 
     || PK5REC.XHDCD[3] > "   " 
     || PK5REC.XHDCD[4] > "   " 
     || PK5REC.XHDCD[5] > "   ")

      PW0OW00.PW0OWTFC = PW0OW00.PW0OWTFC + PK5REC.PK5ITMFC;
      PW0OW00.PW0OWTRP = PW0OW00.PW0OWTRP + PK5REC.PK5ITMRP;

    else
      PW0OW00.XXXMSGNO = 317;
    end

    PW0OW01.PW0OWFCQ[PW0OWIXM] = PW0OW00.PW0OWTFC;
    PW0OW01.PW0OWRPQ[PW0OWIXM] = PW0OW00.PW0OWTRP;
    PW0OW01.PW0OWTOT[PW0OWIXM] = PW0OW00.PW0OWTOT;

  else
    if (COMMAREA.CAFROMAP == "PW0Q") /* non-special handling*/

      PW0OW00.PW0OWTOT = PW0OW00.PW0OWTOT + PK5REC.PK5TIQTY;

      if (PK5REC.XHDCD[1] == "   " /* no special handling code*/
       && PK5REC.XHDCD[2] == "   " 
       && PK5REC.XHDCD[3] == "   " 
       && PK5REC.XHDCD[4] == "   " 
       && PK5REC.XHDCD[5] == "   ")

        PW0OW00.PW0OWTFC = PW0OW00.PW0OWTFC + PK5REC.PK5ITMFC;
        PW0OW00.PW0OWTRP = PW0OW00.PW0OWTRP + PK5REC.PK5ITMRP;

      end

      PW0OW01.PW0OWFCQ[PW0OWIXM] = PW0OW00.PW0OWTFC;
      PW0OW01.PW0OWRPQ[PW0OWIXM] = PW0OW00.PW0OWTRP;
      PW0OW01.PW0OWTOT[PW0OWIXM] = PW0OW00.PW0OWTOT;

    end
  end


end // end PW0O135

// Close selected set cursor
Function PW0O137()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1990" ("C1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0OW00.XXXMODID = "137"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0OW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0O137

// format and display the map
Function PW0O200()

  if (converseVar.validationMsgNum != 0) /* error was found*/
    PW0OW00.XXXMSGNO = converseVar.validationMsgNum; /* message number*/
  end

  if (PW0OW00.PW0OWSWR == "Y" /* obtain data failed*/
   || converseVar.validationMsgNum == 0) /* no error*/

    if (PW0OW00.PW0OWSWF == "Y") /* map must be formatted*/
      if (PKWREC.PKWSELSW == "PK") /* picking*/
        PW0O-21002();
      else
        PW0O-21001();
      end
    end
  end


  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW0O-20002();
  else
    PW0O-20001(); /* pick planning*/
  end

end // end PW0O200

// check attention identifier
Function PW0O300()
   /* ------------------------------------------------------------*/
   /* if CANCEL was requested, clear the map fields and exit*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* pa2 was pressed*/

    if (PW0OW00.PW0OWSWR == "Y") /* request for data pending*/
      set PW0OW01 empty; /* m001 display storage*/
    end

    PW0OW00.PW0OWSWF = "Y"; /* format the map switch*/
    PW0OW00.PW0OWSWR = "N"; /* request for data switch*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* application data*/

    exit stack; /* exit to display map*/

  end

   /* ------------------------------------------------------------*/
    /* if FAST PATH was requested, transfer to that application.*/
   /* ------------------------------------------------------------*/

  if (PW0OM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* enter was pressed*/
      if (PW0OM001.CATOAP == COMMAREA.CACURRAP)
        converseLib.validationFailed(1);
        set PW0OM001.CATOAP cursor, bold;
        exit stack;
      end
      PW0O105(); /* purge temporary storage*/
      XSPKS01(); /* exit to another application*/
      set PW0OM001.CATOAP cursor, bold; /* highlight*/
    else
      PW0OW00.XXXMODID = "300"; /* module identification*/
      converseLib.validationFailed(001); /* invalid FAST PATH msg*/
    end
    exit stack; /* exit to display map*/
  else
    if (PW0OM002.CATOAP > " ") /* FAST PATH was requested*/
      if (converseVar.eventKey is enter) /* enter was pressed*/
        if (PW0OM002.CATOAP == COMMAREA.CACURRAP)
          converseLib.validationFailed(1);
          set PW0OM002.CATOAP cursor, bold;
          exit stack;
        end
        PW0O105(); /* purge temporary storage*/
        XSPKS01(); /* exit to another application*/
        set PW0OM002.CATOAP cursor, bold; /* highlight*/
      else
        PW0OW00.XXXMODID = "300"; /* module identification*/
        converseLib.validationFailed(001); /* invalid FAST PATH msg*/
      end
      exit stack; /* exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
    /* If HELP, exit to the previous level or exit to the master*/
    /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* pf1 was pressed*/
   || converseVar.eventKey is pf3 /* pf3 was pressed*/
   || converseVar.eventKey is pf4 /* pf4 was pressed*/
   || converseVar.eventKey is pf5) /* pf5 was pressed*/

    if (converseVar.eventKey is pf1)
      COMMAREA.CATOAP = "GD00"; /* to application*/
      COMMAREA.CAITEM = "PW0OM001";
      COMMAREA.CAITEM = "PW0OM002";
    end

    if (converseVar.eventKey is pf3)
      COMMAREA.CATOAP = COMMAREA.CAFROMAP;
      PKWREC.PKWUSERB = PWJREC.PKWUSERB;
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    end

    if (converseVar.eventKey is pf4)
      COMMAREA.CATOAP = "MN0N";
      PKWREC.PKWUSERB = PWJREC.PKWUSERB;
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    end

    if (converseVar.eventKey is pf5)
      COMMAREA.CATOAP = "PW0R";
      PKWREC.PKWUSERB = PWJREC.PKWUSERB;
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    end

    PW0O105(); /* purge temporary storage*/

    XSPKS01(); /* exit to another application*/

    exit stack; /* exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter
   && converseVar.eventKey not pf7
   && converseVar.eventKey not pf8)

    PW0OW00.XXXMODID = "300"; /* module identification*/
    converseLib.validationFailed(12); /* invalid key pressed*/

    if (converseVar.eventKey is pakey)
      converseLib.clearScreen();
      
      converseLib.clearScreen();
      
    end

    exit stack; /* exit to display map*/

  end

end // end PW0O300

// Reset highlighted fields
Function PW0O400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PW0OM001.CATOAP initialAttributes; /* TO application*/
  set PW0OM002.CATOAP initialAttributes; /* TO application*/
  set PW0OM001.CAITEM initialAttributes; /* Application data*/
  set PW0OM002.CAITEM initialAttributes; /* Application data*/

  converseLib.validationFailed(0); /* ; reset message field*/

end // end PW0O400

// Verify data that was entered
Function PW0O500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PW0OM001.CAITEM > " ") /* Application data was entered*/

    PW0OW00.XXXMODID = "500"; /* Module identification*/
    set PW0OM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/

    exit stack;
  else
    if (PW0OM002.CAITEM > " ") /* Application data was entered*/

      PW0OW00.XXXMODID = "500"; /* Module identification*/
      set PW0OM002.CAITEM cursor, bold; /* Highlight*/
      converseLib.validationFailed(15); /* Enter only with FAST PATH*/

      exit stack;

    end
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, if page was formatted, get next order*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* enter was pressed*/

    if (PKWREC.PKWINDEX >= PWJREC.PWJARMAX) /* last order in array*/
      converseLib.validationFailed(64); /* no more orders*/
    end

  end

   /* ------------------------------------------------------------*/
    /* determine whether a valid scroll request was entered*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)

    if (converseVar.eventKey is pf7)

      if (PW0OW00.XXXTSPAG < 2)
        PW0OW00.XXXMODID = "300";
        converseLib.validationFailed(37); /* no previous page to display*/
      end
    end

    if (converseVar.eventKey is pf8)

      if (PW0OW00.XXXTSPAG >= PW0OW00.TA5TSQIX)
        PW0OW00.XXXMODID = "300";
        converseLib.validationFailed(38); /* no more pages to display*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* if any errors were found, exit to display map*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end PW0O500

// Process valid input request
Function PW0O600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PW0OW00.PW0OWSWF = "Y"; /* Format the map switch*/


   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PW0OW00.XXXTSPAG = PW0OW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PW0OW00.XXXTSPAG = PW0OW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is enter)

    PKWREC.PKWINDEX = PKWREC.PKWINDEX + 1; /* get next order*/

    PW0OW00.PW0OWSWR = "Y"; /* Request for data switch*/

  end


end // end PW0O600

// Update temporary storage page
Function PW0OS01()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PW0OW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0OW00.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0OW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0OS01

// read temporary storage page
Function PW0OS02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PW0OW01.XXXTSLEN = PW0OW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PW0OW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PW0OW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0OW00.XXXMODID = "S02"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0OW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0OS02

//*** RECORD=PW0OW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PW0OW00 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 PW0OWIDX PW0OWIDX ; 
  10 PW0OWIXM PW0OWIXM ; 
  10 PW0OWSWF PW0OWSWF ; 
  10 PW0OWSWR PW0OWSWR ; 
  10 PW0OWSWU PW0OWSWU ; 
  10 PW0OWWC2 PW0OWWC2 ; 
  10 XXXMODID XXXMODID ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 PW0OWAPL PW0OWAPL ; 
  10 PW0OWNAM PW0OWNAM ; 
    15 PW0OWNM1 PW0OWNM1 ; 
    15 PW0OWNM2 PW0OWNM2 ; 
  10 TF2DSTCD TF2DSTCD ; 
  10 PW0OWCOL PW0OWCOL ; 
  10 KUCCOID KUCCOID ; 
  10 KUMSTRID KUMSTRID ; 
  10 KUCCONM KUCCONM ; 
  10 PW0OWDT PW0OWDT ; 
    15 * num(2) ; 
    15 PW0OWYY PW0OWYY ; 
    15 PW0OWMM PW0OWMM ; 
    15 PW0OWDD PW0OWDD ; 
  10 PW0OWDFC PW0OWDFC ; 
  10 PW0OWFCQ PW0OWFCQ ; 
  10 PW0OWRPQ PW0OWRPQ ; 
  10 PW0OWTFC PW0OWTFC ; 
  10 PW0OWTRP PW0OWTRP ; 
  10 PW0OWTOT PW0OWTOT ; 
end // end PW0OW00

//*** RECORD=PW0OW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record PW0OW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(726) ; 
    10 PW0OWAPL PW0OWAPL ; 
    10 PW0OWNAM PW0OWNAM ; 
    10 PW0OWCOL PW0OWCOL ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 XBCCD XBCCD ; 
    10 XDVCD XDVCD ; 
    10 PK1CUOID PK1CUOID ; 
    10 PK1NORID PK1NORID ; 
    10 XNXCD XNXCD ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 KUCCONM KUCCONM ; 
    10 TF2DSTCD TF2DSTCD ; 
    10 PW0OWMM PW0OWMM ; 
    10 PW0OWDD PW0OWDD ; 
    10 PW0OWYY PW0OWYY ; 
    10 PK4SLIND PK4SLIND ; 
    10 XGPCD XGPCD [12] ; 
    10 SY1STNBR SY1STNBR [12] ; 
    10 SY2CLRID SY2CLRID [12] ; 
    10 XDMCD XDMCD [12] ; 
    10 XQACD XQACD [12] ; 
    10 PC2INSEG PC2INSEG [12] ; 
    10 XEGCD XEGCD [12] ; 
    10 XPGCD XPGCD [12] ; 
    10 XUMCD XUMCD [12] ; 
    10 XOWCD XOWCD [12] ; 
    10 PW0OWFCQ PW0OWFCQ [12] ; 
    10 PW0OWRPQ PW0OWRPQ [12] ; 
    10 PW0OWTOT PW0OWTOT [12] ; 
end // end PW0OW01

// map application name
DataItem PW0OWAPL char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// col heading
DataItem PW0OWCOL char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// convert day
DataItem PW0OWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// detail for full case
DataItem PW0OWDFC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// convert date field
DataItem PW0OWDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// full case field
DataItem PW0OWFCQ num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// item qty index
DataItem PW0OWIDX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// scrolling lines index
DataItem PW0OWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// convert month
DataItem PW0OWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map heading name
DataItem PW0OWNAM char(47)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first half of heading literal
DataItem PW0OWNM1 char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// second half heading literal
DataItem PW0OWNM2 char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// repack field
DataItem PW0OWRPQ num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format the map switch
DataItem PW0OWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PW0OWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// storage page update switch
DataItem PW0OWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fullcase accum
DataItem PW0OWTFC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total for map field
DataItem PW0OWTOT num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// repack accum
DataItem PW0OWTRP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cursor switch for pk5rec
DataItem PW0OWWC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// convert year
DataItem PW0OWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

