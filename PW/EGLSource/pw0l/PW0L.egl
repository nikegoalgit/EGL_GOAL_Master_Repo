package pw0l;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PW0L ****
// This application shows specific order numbers with their
// regular quantities.  it displays a flag (sel flg) that lets
// the user know if this order has been previously selected for
// picking or not.
// This screen allows the user to select an order for picking,
// deselect an order, put an order on hold (there will be a
// pop-up window to display valid hold codes), or select for
// product inquiry.
// 
// The user can transfer out of this application by using one
// of the pf keys displayed at the bottom of the map, or by
// entering fast-path information (also at the bottom of the
// map).
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      01/16/91  ovazqu  New application.
// pk4020   05/08/91  KHEINA  Move part char to selected qty
//                            table when inserting a new row.
//          09/24/91  SHENDE  Set pick plan release date and
//                            picking release date.
//          10/08/91  jcampb  table changes
//          10/16/91  SHENDE  1. Allow access to whse '07'.
//                            2. Display division code on the
//                            header which CANNOT be modified.
//                            3. Check for B-Grade / Closeouts,
//                            don't process these orders.
//          12/05/91  SHENDE  Fixed typo in PW0L210.  If stmt
//                            was checking for 'M' not 'Y'.
//          03/03/92  SHENDE  Added xbc-brand-cd(xbccd) for
//                            March table changes.
//          04/23/92  SCLEME  Omit processing in-store promo.
//                            Format GPC for 'S7' IO1720.
//          07/17/92  SHENDE  Display brand code.
// Canada   10/25/95  PSTROE  Pick-up new version of XPPK003
// y2kfix   02/06/98  pharwo  y2k changes to pw0lmryy, pw0l521,
//                            pw0l640.
// *********************
Program PW0L type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK4REC PK4REC; // record
  PK5REC PK5REC; // record
  PK9REC PK9REC; // record
  PKBREC PKBREC; // record
  PKHREC PKHREC; // record
  PKWREC PKWREC; // record
  PW0LW00 PW0LW00; // record
  PW0LW01 PW0LW01; // record
  PWFREC PWFREC; // record
  PWJREC PWJREC; // record
  PWKREC PWKREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TA9REC TA9REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use XHRTBL; // table
  use XOTTBL; // table
  use XDVTBL; // table
  use XBCTBL; // table
  use PW0LM.PW0LM001,  // forms
      PW0LM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set PW0LM001 initial; /* M001 input/output*/
    set PW0LW00 empty; /* Working storage*/
    set PW0LW01 empty; /* M001 display storage*/
    set PWJREC empty; /* Inquiry order array*/
    set PK4REC empty; /* DPICK.VPOOLH01 record*/
    set PK5REC empty; /* DPICK.VPOOLI01 record*/
    set PK9REC empty; /* DPICK.VCUHLD01 record*/
    set PKBREC empty; /* DPICK.VORHLD01 record*/
    set PKHREC empty; /* DPICK.VSELOR01 record*/
    set PWFREC empty; /* DPICK.VCAHLD01 record*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set TA9REC empty; /* Date validation parameters*/
    set XX0XW01 empty; /* Date format parameter*/

    PKWREC.PKWUSERB = PWJREC.PKWUSERB; /* Initialize inquiry array*/

     /* ------------------------------------------------------------*/
     /* Initialize work areas*/
     /* ------------------------------------------------------------*/

    PW0LW00.PW0LWSWF = "Y"; /* Format the map switch*/
    PW0LW00.PW0LWSWR = "N"; /* Request for data switch*/
    PW0LW00.PW0LWSWU = "N"; /* Updates requested switch*/
    PW0LW00.PW0LWSWM = "N"; /* Screen modified switch*/
    PW0LW00.PW0LWSWZ = "N"; /* All dnsb dts processed switch*/
    PW0LW00.PW0LWIXM = 1; /* Map line index*/
    PW0LW00.PW0LWIXD = 1; /* Dnsbd index (pwkrec)*/
    PW0LW00.PW0LWIXO = 1; /* Inquiry orders index*/
    PW0LW00.PW0LMSEL = "A"; /* Default "select all'*/

     /* ------------------------------------------------------------*/
     /* Get DNSBD array from commarea.*/
     /* ------------------------------------------------------------*/

    PKWREC.PKWINDEX = 1; /* Dnsbd array index (pkwrec)*/
    PWKREC.PWKARRAY = PKWREC.PKWARRAY[PKWINDEX];

     /* ------------------------------------------------------------*/
     /* See if data was passed to this program.*/
     /* ------------------------------------------------------------*/

    if (PWKREC.PWKARMAX > 0 /* Found data to process*/
     && PWKREC.PWKARMAX <= 25)
      /* NEXT SENTENCE*/

    else

      PKWREC.PKWINDEX = 2; /* Dnsbd array index (pkwrec)*/
      PWKREC.PWKARRAY = PKWREC.PKWARRAY[PKWINDEX];

      if (PWKREC.PWKARMAX > 0 /* Found data to process*/
       && PWKREC.PWKARMAX <= 25)
        /* NEXT SENTENCE*/

      else

        PKWREC.PKWINDEX = 3; /* Dnsbd array index (pkwrec)*/
        PWKREC.PWKARRAY = PKWREC.PKWARRAY[PKWINDEX];

      end

    end

    if (PWKREC.PWKARMAX > 0 /* Found data to process*/
     && PWKREC.PWKARMAX <= 25)

      PW0LW00.PW0LWSWR = "Y"; /* Request data*/
    else
      PW0LW00.PW0LWSWZ = "Y"; /* No DNSB Dates to process*/
      PWKREC.OP1DSBDT[PW0LWIXD] = 0;
      PW0LW00.XXXMODID = "XPPK001"; /* Module Id*/
      converseLib.validationFailed(339); /* No DNSB Dates to process*/
    end

     /* ------------------------------------------------------------*/
     /* Build map heading area.*/
     /* ------------------------------------------------------------*/

    PW0LM001.PW0LMSEL = "A"; /* Selection code*/
    PW0LM001.XWHCD = PKWREC.XWHCD; /* Warehouse code*/
    PW0LM001.XWHABRV = PKWREC.XWHABRV; /* Warehouse abrv*/

    PW0LM001.XDVCD = PKWREC.XDVCD[1]; /* Division code*/
    if (PKWREC.XDVCD[1] == "*")
      PW0LM001.XDVDESC = "ALL DIVISIONS";
    else
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW0LM001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end
    end

    PW0LM001.XBCCD = PKWREC.XBCCD[1]; /* Brand code*/
    if (PKWREC.XBCCD[1] == "*")
      PW0LM001.XBCABRV = " ";
    else
      if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
        PW0LM001.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
      end
    end

     /* ------------------------------------------------------------*/
     /* Set run-mode based on picking selection code.*/
     /* ------------------------------------------------------------*/

    if (PKWREC.PKWSELSW == "PP") /* pick planning*/
      PW0LW00.PKURUNMD = "P";
      PW0LM001.PW0LMAPL = "PICK PLANNING";
    else
      PW0LW00.PKURUNMD = " ";
      PW0LM001.PW0LMAPL = "   PICKING   ";
    end

     /* ------------------------------------------------------------*/
     /* Save & convert first DNSB date to be displayed on map.*/
     /* ------------------------------------------------------------*/

    PW0LW00.PW0LWPDT = PWKREC.OP1DSBDT[PW0LWIXD]; /* save dnsbd*/
    PW0LW00.PW0LWWDT = PWKREC.OP1DSBDT[PW0LWIXD]; /* convert dnsbd*/
    PW0LM001.PW0LMDMM = PW0LW00.PW0LWWMM;
    PW0LM001.PW0LMDDD = PW0LW00.PW0LWWDD;
    PW0LM001.PW0LMDYY = PW0LW00.PW0LWWYY;

     /* ------------------------------------------------------------*/
     /* Convert current date to CCYYMMDD format for comparison*/
     /* purposes later in the program.*/
     /* ------------------------------------------------------------*/

    PW0LW00.PW0LWWDT = VGVar.currentShortGregorianDate; /* Get system date yy/mm/dd*/

    if (PW0LW00.PW0LWWYY > 80) /* If year greater 80*/
      PW0LW00.PW0LWWCC = 19; /* century = 19*/
    else
      PW0LW00.PW0LWWCC = 20; /* otherwise, century = 20*/
    end

    PW0LW00.PW0LWCDT = PW0LWWDT; /* Save Current date*/

     /* ------------------------------------------------------------*/
     /* Flow to see if the "from" application is valid.*/
     /* ------------------------------------------------------------*/

    goto PW0L000; /* Check "from" application*/


    PW0L000: PW0L000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PW0L001; /* Converse the main process*/


    PW0L001: PW0L001();
     /* -----------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* -----------------------------------------------------------*/

    goto PW0L001; /* Converse the main process*/

  end // end main
end // end PW0L

// Check the FROM application
Function PW0L000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "PW0K" /* From allowed application*/
   || COMMAREA.CAFROMAP == "PW0I" 
   || COMMAREA.CAFROMAP == "PW0R" 
   || COMMAREA.CAFROMAP == "GD00")

    COMMAREA.CAFROMAP = COMMAREA.CACURRAP; /* save curr application*/

    XPPK003(); /* Validate passed warehouse*/

  else

    COMMAREA.CATOAPP = COMMAREA.CAFROMAP;

    XSNOWAY(); /* Invalid transfer was attempted*/

  end


end // end PW0L000

// Main process to display a map
Function PW0L001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW0L100(); /* Obtain the data to display*/

  PW0L200(); /* Format and display the map*/

  PW0L300(); /* Check attention identifier*/

  PW0L400(); /* Reset fields to normal intensity*/

  PW0L500(); /* Verify the entered data*/

  PW0L600(); /* Process valid input request*/


end // end PW0L001

// Obtain the data to display
Function PW0L100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PW0LW00.PW0LWSWR == "N" /* Data was not requested*/
   || converseVar.validationMsgNum > 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  PW0LW00.XXXTSLEN = 310; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (PW0LW00.XXXMSGNO == 0) /* No message to display*/

    PW0LW00.XXXTSPAG = 1; /* Page number to display*/

  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  PW0L110(); /* Purge any temporary storage*/

  PW0LW00.PW0LMSEL = PW0LM001.PW0LMSEL; /* Selection cd*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  PW0L120(); /* Select set and open order cursor*/

  PW0LW00.PW0LWIXM = 1; /* Display line index*/
  PW0LW00.PW0LWSWC = "N"; /* End of cursor switch*/

   /* ------------------------------------------------------------*/
   /* Fetch row & format data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (PW0LW00.PW0LWSWC == "N") /* Until end of cursor*/

    PW0LW00.PW0LWSWP = "Y"; /* Assume process order = yes*/

    PW0L121(); /* Fetch row in the cursor*/

    /* ------------------------------------------------------------*/
     /* See if it is ok to process the order*/
    /* ------------------------------------------------------------*/

    if (PW0LW00.PW0LWSWC == "N" /* Row found*/
     && PW0LW00.PW0LWSWP == "Y") /* and ok to process*/

      /* ------------------------------------------------------------*/
       /* See if carrier's release date is ok.*/
      /* ------------------------------------------------------------*/

      PW0L130(); /* Select order w/ carrier not on hold*/

      /* ------------------------------------------------------------*/
       /* If order hold, check order hold release date.*/
      /* ------------------------------------------------------------*/

      PW0L140(); /* Check release dt in ord hold tbl*/

      /* ------------------------------------------------------------*/
       /* If customer hold, check customer hold release date.*/
      /* ------------------------------------------------------------*/

      PW0L150(); /* Check release dt in cust hold tbl*/

      /* ------------------------------------------------------------*/
       /* See if it is still ok to process the order*/
      /* ------------------------------------------------------------*/

      if (PW0LW00.PW0LWSWP == "Y") /* If still ok to process order*/

        /* ------------------------------------------------------------*/
         /* Get and summarize all items for the order.*/
        /* ------------------------------------------------------------*/

        PW0L160(); /* Get order items data*/

        /* ------------------------------------------------------------*/
         /* Save the data in display storage.*/
        /* ------------------------------------------------------------*/

        PW0L170(); /* Save data in display storage*/

        /* ------------------------------------------------------------*/
         /* If the page is full, add the page to the storage queue.*/
        /* ------------------------------------------------------------*/

        if (PW0LW00.PW0LWIXM > 10) /* Page is full*/

          PW0L180(); /* Add page to temporary storage*/

          PW0LW00.PW0LWIXM = 1; /* Display line index*/

        end

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PW0LW00.PW0LWIXM > 1) /* Page was formatted*/

    PW0L180(); /* Add page to temporary storage*/

  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PW0L123(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (PW0LW00.TA5TSQIX > 0) /* Pages formatted*/

    PW0LW00.PW0LWSWF = "Y"; /* Format screen*/

  else

    PW0LW00.XXXMODID = "100"; /* Module identification*/
    PW0LW00.XXXMSGNO = 31; /* No data was found to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW0LW00.PW0LWSWR = "N"; /* Request for data switch*/


end // end PW0L100

// Purge any temporary storage
Function PW0L110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PW0LW01 empty; /* M001 display storage*/

  PW0LW00.PW0LWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PW0LW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PW0LW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0LW00.XXXMODID = "110"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0L110

// VPOOLH01 select set & open crs
Function PW0L120()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* Clear row storage area*/

  PK4REC.XWHCD = PKWREC.XWHCD; /* key*/
  PK4REC.XDVCD = PKWREC.XDVCD[1]; /* division code*/
  PK4REC.XBCCD = PKWREC.XBCCD[1]; /* brand code*/
  PK4REC.OP1DSBDT = PWKREC.OP1DSBDT[PW0LWIXD]; /* don't ship before*/
  PK4REC.PK4ORHLD = "*"; /* order hold*/
  PK4REC.PK4CUHLD = "*"; /* customer hold*/
  PK4REC.TF1CARCD = "*"; /* carrier code*/
  PK4REC.OP1SPHDF = "N"; /* spec handle flag*/
  PK4REC.XGPCD = "*"; /* general product code*/

  if (PW0LM001.PW0LMSEL == "A") /* Select all orders*/
    PK4REC.PK4SLIND = "*";
  else

    if (PW0LM001.PW0LMSEL == "S") /* Select only "selected" orders*/

      if (PW0LW00.PKURUNMD == " ") /* Run mode = "picking"*/
        PK4REC.PK4SLIND = "S";
      else /* Run mode = "planning"*/
        PK4REC.PK4SLIND = "*";
      end

    else /* Only "not selected"*/
      PK4REC.PK4SLIND = " ";
    end

  end

  try
    call "IO1720" ("S7", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, go back to previous routine.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0LW00.XXXMODID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0L120

// Fetch next row in the cursor
Function PW0L121()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1720" ("N7", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0L122(); /* See if ok to process order*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0LW00.PW0LWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0LW00.XXXMODID = "121"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0L121

// See if ok to process order
Function PW0L122()
   /* ------------------------------------------------------------*/
   /* See if ok to process this order.*/
   /* ------------------------------------------------------------*/

  if (PK4REC.PK4STKTF == "Y") /* If "stock transfer"*/
    PW0LW00.PW0LWSWP = "N"; /* Do not process this order*/
    return; /* Return to previous process*/
  end

   /* ----- ColeHaan -------------------------------------------*/
  if (PW0LM001.XBCCD == "*"
   && PK4REC.XBCCD == "08")

    PW0LW00.PW0LWSWP = "N"; /* Do not process this order*/
    return; /* Return to previous process*/
  end

   /* ----- In-store promo -------------------------------------*/
  if (PK4REC.XGPCD == "01"
   && PK4REC.XDVCD == "01")

    PW0LW00.PW0LWSWP = "N"; /* Do not process this order*/
    return; /* Return to previous process*/
  end

   /* ------ Determine b-grade and closeout ----------------------*/
  XPPK005();

  if (PKWREC.PKW-ORDER-TYP-IND == "B" /* B-Grade*/
   || PKWREC.PKW-ORDER-TYP-IND == "C") /* Closeout*/

    PW0LW00.PW0LWSWP = "N"; /* Do not process*/
  end


  if (PW0LW00.PW0LWSWP == "N") /* If do not process*/
    return; /* Return to previous process*/
  end

  if (PW0LW00.PKURUNMD == " ") /* Run mode = "picking"*/

    if (PW0LM001.PW0LMSEL == "A") /* All orders to be processed*/
      if (PK4REC.PK4SLIND != " "
       && PK4REC.PK4SLIND != "S")

        PW0LW00.PW0LWSWP = "N"; /* Do not process this order*/
      end
    else
      if (PW0LM001.PW0LMSEL == "S") /* Selected orders to be processed*/

        if (PK4REC.PK4SLIND != "S")
          PW0LW00.PW0LWSWP = "N"; /* Do not process this order*/
        end

      else /* Non-selected orders to be processed*/

        if (PK4REC.PK4SLIND != " ")
          PW0LW00.PW0LWSWP = "N"; /* Do not process this order*/
        end

      end
    end

  else /* Run mode = "pick planning"*/

    if (PW0LM001.PW0LMSEL == "A") /* All orders to be processed*/

      if (PK4REC.PK4SLIND != " "
       && PK4REC.PK4SLIND != "S"
       && PK4REC.PK4SLIND != "P")

        PW0LW00.PW0LWSWP = "N"; /* Do not process this order*/
      end

    else

      if (PW0LM001.PW0LMSEL == "S") /* Selected orders to be processed*/

        if (PK4REC.PK4SLIND != "S"
         && PK4REC.PK4SLIND != "P")

          PW0LW00.PW0LWSWP = "N"; /* Do not process this order*/
        end

      else /* Non-selected orders to be processed*/

        if (PK4REC.PK4SLIND != " ")
          PW0LW00.PW0LWSWP = "N"; /* Do not process this order*/
        end

      end
    end
  end


end // end PW0L122

// Close selected set cursor
Function PW0L123()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1720" ("C7", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0LW00.XXXMODID = "123"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0L123

// Check carrier on hold rlse dt
Function PW0L130()
   /* ------------------------------------------------------------*/
   /* Open and fetch carrier hold table cursor.*/
   /* ------------------------------------------------------------*/

  PW0LW00.PW0LWSWW = "N"; /* Set work cursor flag to no*/

  PW0L131(); /* Set table cursor*/

  while (PW0LW00.PW0LWSWW == "N" /* Until at end of cursor*/
   && PW0LW00.PW0LWSWP == "Y") /* and still ok to process*/

    PW0L132(); /* Fetch row & verify rlse date*/

  end

  PW0L134(); /* Close table cursor*/


end // end PW0L130

// Dpick.Vcahld01 - open cursor
Function PW0L131()
   /* ------------------------------------------------------------*/
   /* Open table cursor.*/
   /* ------------------------------------------------------------*/

  set PWFREC empty; /* Row storage area*/

  PWFREC.XWHCD = PKWREC.XWHCD; /* Warehouse code*/
  PWFREC.TF1CARCD = PK4REC.TF1CARCD; /* Carrier code*/
  PWFREC.XHRCD = "*"; /* Wildcard hold reason code*/

  try
    call "IO3190" ("S1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0LW00.XXXMODID = "131"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0L131

// Fetch next Dpick.vcahld01 row
Function PW0L132()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("N1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* See if successful return.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0L133(); /* validate release date*/

      return;

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PW0LWSWW = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PW0LW00.XXXMODID = "132"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0L132

// Validate carrier hold rlse dt
Function PW0L133()
   /* ------------------------------------------------------------*/
   /* Validate the appropriate carrier hold release date, based*/
   /* on whether user is in 'picking' or 'pick planning' mode.*/
   /* ------------------------------------------------------------*/

  if (PW0LW00.PKURUNMD == " ") /* If run mode is Picking*/

    if (PWFREC.PKBRELDT > PW0LW00.PW0LWCDT) /* Rlse dt gt current dt*/

      PW0LW00.PW0LWSWP = "N"; /* Not ok to process order*/

    end

  else /* Run mode is Planning*/

    if (PWFREC.PKBPLRDT > PW0LW00.PW0LWCDT) /* Plan date le current dt*/

      PW0LW00.PW0LWSWP = "N"; /* Not ok to process order*/

    end

  end


end // end PW0L133

// Dpick.Vcahld01 - close cursor
Function PW0L134()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("C1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0LW00.XXXMODID = "134"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0L134

// Check order on hold rlse date
Function PW0L140()
   /* ------------------------------------------------------------*/
   /* If order is not okay to process, get out of this routine.*/
   /* ------------------------------------------------------------*/

  if (PW0LWSWP == "N" /* if not okay to process*/
   || PK4REC.PK4ORHLD == "N") /* or not order hold*/

    return; /* return*/

  end

   /* ------------------------------------------------------------*/
   /* Open and fetch order hold table cursor.*/
   /* ------------------------------------------------------------*/

  PW0LW00.PW0LWSWW = "N"; /* Set work cursor flag to no*/

  PW0L141(); /* Set table cursor*/

  while (PW0LW00.PW0LWSWW == "N" /* Until at end of cursor*/
   && PW0LW00.PW0LWSWP == "Y") /* and still ok to process*/

    PW0L142(); /* Fetch row & verify rlse date*/

  end

  PW0L144(); /* Close table cursor*/


end // end PW0L140

// Dpick.Vorhld01 - open cursor
Function PW0L141()
   /* ------------------------------------------------------------*/
   /* Open table cursor.*/
   /* ------------------------------------------------------------*/

  set PKBREC empty; /* Row storage area*/

  PKBREC.XWHCD = PKWREC.XWHCD; /* Warehouse code*/
  PKBREC.PK1CUOID = PK4REC.PK1CUOID; /* Order number*/
  PKBREC.PK1NORID = PK4REC.PK1NORID; /* Nike order number*/

  try
    call "IO1770" ("S1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0LW00.XXXMODID = "141"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0L141

// Fetch next-Dpick.Vorhld01
Function PW0L142()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("N1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* See if successful return.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0L143(); /* validate release date*/

      return;

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PW0LWSWW = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0LW00.XXXMODID = "142"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0L142

// Validate customer hold rlse dt
Function PW0L143()
   /* ------------------------------------------------------------*/
   /* Validate the appropriate order hold release date, based*/
   /* on whether user is in 'picking' or 'pick planning' mode.*/
   /* ------------------------------------------------------------*/

  if (PW0LW00.PKURUNMD == " ") /* If run mode is Picking*/

    if (PKBREC.PKBRELDT > PW0LW00.PW0LWCDT) /* Rlse dt gt current dt*/

      PW0LW00.PW0LWSWP = "N"; /* Not ok to process order*/

    end

  else /* Run mode is Planning*/

    if (PKBREC.PKBPLRDT > PW0LW00.PW0LWCDT) /* Plan date le current dt*/

      PW0LW00.PW0LWSWP = "N"; /* Not ok to process order*/

    end

  end


end // end PW0L143

// Dpick.Vorhld01 - close cursor
Function PW0L144()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("C1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0LW00.XXXMODID = "144"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0L144

// Check customer on hold rlse dt
Function PW0L150()
   /* ------------------------------------------------------------*/
   /* If order is not okay to process, get out of this routine.*/
   /* ------------------------------------------------------------*/

  if (PW0LWSWP == "N" /* if not okay to process*/
   || PK4REC.PK4CUHLD == "N") /* or not customer hold*/

    return; /* return*/

  end

   /* ------------------------------------------------------------*/
   /* Open and fetch customer hold table cursor.*/
   /* ------------------------------------------------------------*/

  PW0LW00.PW0LWSWW = "N"; /* Set work cursor flag to no*/

  PW0L151(); /* Set table cursor*/

  while (PW0LW00.PW0LWSWW == "N" /* Until at end of cursor*/
   && PW0LW00.PW0LWSWP == "Y") /* and still ok to process*/

    PW0L152(); /* Fetch row & verify rlse date*/

  end

  PW0L154(); /* Close table cursor*/


end // end PW0L150

// Dpick.Vcuhld01 - open cursor
Function PW0L151()
   /* ------------------------------------------------------------*/
   /* Open table cursor.*/
   /* ------------------------------------------------------------*/

  set PK9REC empty; /* Row storage area*/

  PK9REC.XWHCD = PKWREC.XWHCD; /* Warehouse code*/
  PK9REC.KUCCOID = PK4REC.KUCCOID;
  PK9REC.KUMSTRID = PK4REC.KUMSTRID;
  PK9REC.XNXCD = PK4REC.XNXCD;

  try
    call "IO1790" ("S1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0LW00.XXXMODID = "151"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0L151

// Fetch next-Dpick.Vcuhld01
Function PW0L152()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("N1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* See if successful return.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0L153(); /* validate release date*/

      return;

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PW0LWSWW = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0LW00.XXXMODID = "152"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0L152

// Validate order hold rlse date
Function PW0L153()
   /* ------------------------------------------------------------*/
   /* Validate the appropriate customer hold release date, based*/
   /* on whether user is in 'picking' or 'pick planning' mode.*/
   /* ------------------------------------------------------------*/

  if (PW0LW00.PKURUNMD == " ") /* If run mode is Picking*/

    if (PK9REC.PK9RELDT > PW0LW00.PW0LWCDT) /* Rlse dt gt current dt*/

      PW0LW00.PW0LWSWP = "N"; /* Not ok to process order*/

    end

  else /* Run mode is Planning*/

    if (PK9REC.PK9PLRDT > PW0LW00.PW0LWCDT) /* Plan date le current dt*/

      PW0LW00.PW0LWSWP = "N"; /* Not ok to process order*/

    end

  end


end // end PW0L153

// Dpick.Vcuhld01 - close cursor
Function PW0L154()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("C1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0LW00.XXXMODID = "154"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0L154

// Get & summarize items for ordr
Function PW0L160()
   /* ------------------------------------------------------------*/
   /* Process and sumarize all items for the order.*/
   /* ------------------------------------------------------------*/

  PW0LW00.PW0LWNUM = 0; /* clear work field*/
  PW0LW00.PW0LWDFC = 0; /* clear detail fc field*/
  PW0LW00.PW0LWDRP = 0; /* clear detail repack field*/
  PW0LW00.PW0LWTFC = 0; /* clear total fc field*/
  PW0LW00.PW0LWTRP = 0; /* clear total repack field*/

  PW0LW00.PW0LWSWW = "N"; /* Set work cursor flag to no*/

  PW0L161(); /* Set item table cursor*/

  while (PW0LW00.PW0LWSWW == "N") /* Until at end of cursor*/

    PW0L162(); /* Fetch next item row*/

  end

  PW0L164(); /* Close item table cursor*/


end // end PW0L160

// Dpick.Vpooli01 - open cursor
Function PW0L161()
   /* ------------------------------------------------------------*/
   /* Open table cursor.*/
   /* ------------------------------------------------------------*/

  set PK5REC empty; /* Clear row storage area*/

  PK5REC.XWHCD = PKWREC.XWHCD; /* Warehouse code*/
  PK5REC.PK1CUOID = PK4REC.PK1CUOID; /* Customer order number*/
  PK5REC.PK1NORID = PK4REC.PK1NORID; /* Nike order number*/

  try
    call "IO1990" ("S1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0LW00.XXXMODID = "161"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK5REC.PK5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0L161

// Fetch next-Dpick.Vpooli01
Function PW0L162()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1990" ("N1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* See if successful return.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0LW00.PW0LWTFC = PW0LW00.PW0LWTFC + PK5REC.PK5ITMFC;
      PW0LW00.PW0LWTRP = PW0LW00.PW0LWTRP + PK5REC.PK5ITMRP;

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0LW00.PW0LWSWW = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0LW00.XXXMODID = "162"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK5REC.PK5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0L162

// Dpick.Vpooli01 - close cursor
Function PW0L164()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1990" ("C1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0LW00.XXXMODID = "164"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0L164

// Save data in display storage
Function PW0L170()
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  PW0LW01.PW0LMACT[PW0LWIXM] = " ";
  PW0LW01.PK1CUOID[PW0LWIXM] = PK4REC.PK1CUOID;
  PW0LW01.PK1NORID[PW0LWIXM] = PK4REC.PK1NORID;
  PW0LW01.PW0LMRFC[PW0LWIXM] = PW0LW00.PW0LWTFC;
  PW0LW01.PW0LMRRP[PW0LWIXM] = PW0LW00.PW0LWTRP;

  if (PK4REC.PK4SLIND == "S" /* If order has been selected*/
   || PK4REC.PK4SLIND == "P")

    PW0LW01.PK4SLIND[PW0LWIXM] = "Y";

  else

    PW0LW01.PK4SLIND[PW0LWIXM] = "N";

  end

  PW0LW00.PW0LWIXM = PW0LW00.PW0LWIXM + 1; /* Increment line index*/


end // end PW0L170

// Add page to temporary storage
Function PW0L180()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PW0LW01.XXXTSLEN = PW0LW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PW0LW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  set PW0LW01 empty; /* M001 display storage*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    PW0LW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0LW00.XXXMODID = "180"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0L180

// Format and converse the map
Function PW0L200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    PW0LW00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PW0LW00.PW0LWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PW0LW00.PW0LWSWF == "Y") /* Map must be formatted*/

      PW0L210(); /* Format the data on the map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Set cursor, if needed*/
   /* ------------------------------------------------------------*/

  if (PW0LW00.TA5TSQIX == 0) /* If no pages were formatted*/

    if (PWKREC.PWKARMAX > 0) /* At least one dnsbd existed*/

      set PW0LM001.PW0LMSEL cursor; /* Set cursor on selection cd*/

    else

      set PW0LM001.PW0LMSEL cursor, skip, invisible; /* No entry allowed*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW0LM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PW0LM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW0LM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (PW0LW00.XXXMSGNO != 0 /* Message to display*/
     || COMMAREA.CAMSG != " ") /* or message text*/

      if (PW0LW00.XXXMSGNO != 0) /* Message to display*/

        if (PW0LW00.XXXTSPAG == 1) /* First page*/
          if (PW0LW00.XXXMSGNO == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(PW0LW00.XXXMSGNO);
          end /* Message number*/
          PW0LM001.XXXMODID = PW0LW00.XXXMODID; /* Module id*/
          set PW0LM001 alarm; /* Indicate sound alarm*/
        end

      else
        PW0LM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
        PW0LM001.XXXMODID = PW0LW00.XXXMODID; /* Module id*/
        set PW0LM001 alarm; /* Indicate sound alarm*/
      end

      if (PW0LM001.CATOAP > " " /* Fast Path entered*/
       && PW0LW00.PW0LWSWB == "Y") /* but was in error*/

        set PW0LM001.CATOAP cursor, bold; /* Highlight*/
      end

    end
  else
    PW0LM001.XXXMODID = PW0LW00.XXXMODID; /* Module id*/
    set PW0LM001 alarm; /* Indicate sound alarm*/
  end

  converse PW0LM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(0); /* Message number*/
  PW0LW00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  PW0LW00.XXXMODID = " "; /* Module identification*/
  PW0LW00.PW0LWSWB = "N"; /* Reset bad Fast Path switch*/

  COMMAREA.CATOAP = PW0LM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW0LM001.CAITEM; /* Application data*/


end // end PW0L200

// Format the display data
Function PW0L210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW0LM001 initial; /* M001 input/output area*/

  PW0LW00.PW0LWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW0LW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW0LW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PW0LW00.PW0LWSWU == "Y") /* Current page was modified*/

        PW0LS01(); /* Update temporary storage page*/

        PW0LW00.PW0LWSWU = "N"; /* Reset switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW0LW00.XXXTSPAG > PW0LW00.TA5TSQIX) /* Desired greater highest*/

        PW0LW00.XXXTSPAG = PW0LW00.TA5TSQIX; /* Default to highest*/

      end

      PW0LS02(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    PW0LM001.XXXLITPG = "FROM"; /* "page" constant*/
    PW0LM001.XXXLITOF = "OF"; /* "of" constant*/
    PW0LM001.XXXTSPAG = PW0LW00.XXXTSPAG; /* Current page*/
    PW0LM001.XXXTSQIX = PW0LW00.TA5TSQIX; /* Highest page*/

    PW0LW00.PW0LWIXM = 1; /* Initialize line index*/

    while (PW0LW00.PW0LWIXM <= 10 /* Until screen is full*/
     && PW0LW01.PK1CUOID[PW0LWIXM] != 0) /* and data exists*/

      PW0LM001.PW0LMACT[PW0LWIXM] = PW0LW01.PW0LMACT[PW0LWIXM];
      PW0LM001.PK1CUOID[PW0LWIXM] = PW0LW01.PK1CUOID[PW0LWIXM];
      PW0LM001.PW0LMDOT[PW0LWIXM] = ".";
      PW0LM001.PK1NORID[PW0LWIXM] = PW0LW01.PK1NORID[PW0LWIXM];
      PW0LM001.PW0LMRFC[PW0LWIXM] = PW0LW01.PW0LMRFC[PW0LWIXM];
      PW0LM001.PW0LMRRP[PW0LWIXM] = PW0LW01.PW0LMRRP[PW0LWIXM];
      PW0LM001.PK4SLIND[PW0LWIXM] = PW0LW01.PK4SLIND[PW0LWIXM];
      PW0LM001.XHRCD[PW0LWIXM] = PW0LW01.XHRCD[PW0LWIXM];
      PW0LM001.PW0LMRMM[PW0LWIXM] = PW0LW01.PW0LMRMM[PW0LWIXM];
      PW0LM001.PW0LMRDD[PW0LWIXM] = PW0LW01.PW0LMRDD[PW0LWIXM];
      PW0LM001.PW0LMRYY[PW0LWIXM] = PW0LW01.PW0LMRYY[PW0LWIXM];

      if (PW0LW00.PW0LWIXM == 1) /* First select field*/

        set PW0LM001.PW0LMACT[PW0LWIXM] cursor, normal; /* Position cursor*/

      else

        set PW0LM001.PW0LMACT[PW0LWIXM] normal; /* Unprotect*/

      end

      set PW0LM001.XHRCD[PW0LWIXM] normal; /* Open up entry in fields*/
      set PW0LM001.PW0LMRMM[PW0LWIXM] normal;
      set PW0LM001.PW0LMRDD[PW0LWIXM] normal;
      set PW0LM001.PW0LMRYY[PW0LWIXM] normal;

      PW0LW00.PW0LWIXM = PW0LW00.PW0LWIXM + 1; /* Increment line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  if (PW0LW00.PKURUNMD == "P")
    PW0LM001.PW0LMAPL = "PICK PLANNING";
  else
    PW0LM001.PW0LMAPL = "   PICKING   ";
  end

  PW0LM001.XWHCD = PKWREC.XWHCD; /* Whse cd*/
  PW0LM001.XWHABRV = PKWREC.XWHABRV; /* Whse abrv*/

  PW0LM001.XDVCD = PKWREC.XDVCD[1]; /* Division code*/
  if (PKWREC.XDVCD[1] == "*")
    PW0LM001.XDVDESC = "ALL DIVISIONS";
  else
    if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
      PW0LM001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
    end
  end

  PW0LM001.XBCCD = PKWREC.XBCCD[1]; /* Brand code*/
  if (PKWREC.XBCCD[1] == "*")
    PW0LM001.XBCABRV = " ";
    if (PW0LW00.XXXMSGNO == 0) /* display msg only if no other*/
      PW0LW00.XXXMSGNO = 421;
    end
  else
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      PW0LM001.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
    end
  end

  PW0LW00.PW0LWWDT = PWKREC.OP1DSBDT[PW0LWIXD]; /* Convert dnsbt*/
  PW0LM001.PW0LMDMM = PW0LW00.PW0LWWMM; /* Dnsb mm*/
  PW0LM001.PW0LMDDD = PW0LW00.PW0LWWDD; /* dd*/
  PW0LM001.PW0LMDYY = PW0LW00.PW0LWWYY; /* yy*/
  PW0LM001.PW0LMSEL = PW0LW00.PW0LMSEL; /* Selection cd*/

  if (PW0LW00.PW0LMSEL <= " ") /* Selection code not present*/

    set PW0LM001.PW0LMSEL cursor; /* Position cursor*/

  end


end // end PW0L210

// Check attention identifier
Function PW0L300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PW0LW00.PW0LWSWR == "Y") /* Request for data*/

      set PW0LW01 empty; /* M001 display storage*/

    end

    PW0LW00.PW0LWSWF = "Y"; /* Format the map switch on*/
    PW0LW00.PW0LWSWR = "N"; /* Request for data switch off*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, this is an error.*/
   /* ------------------------------------------------------------*/

  if (PW0LM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (PW0LM001.CATOAP != "PW0L") /* FAST PATH not to itself*/

        PW0L110(); /* Purge temporary storage*/

        XSPKS01(); /* Exit to another application*/

        PW0LW00.PW0LWSWR = "Y"; /* Need to recreate t/s*/
        PW0LW00.PW0LWSWF = "Y"; /* Need to reformat screen*/
        PW0LW00.PW0LWSWB = "Y"; /* Bad Fast Path switch on*/

      end

      converseLib.validationFailed(1); /* Invalid FAST PATH*/

    else

      converseLib.validationFailed(13); /* PA/PF key may not be used*/

    end

    PW0LW00.XXXMODID = "300"; /* Module identification*/
    set PW0LM001.CATOAP cursor, bold; /* Highlight*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF1, PF3, PF4, or PF5 exit to another application*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/

      COMMAREA.CAITEM = "PW0LM001"; /* Application find code*/

    else

      if (converseVar.eventKey is pf3) /* PF3 was pressed*/

        COMMAREA.CATOAP = "PW0K"; /* TO application*/

      else

        if (converseVar.eventKey is pf5) /* PF5 was pressed*/

          COMMAREA.CATOAP = "PW0R"; /* TO application*/

        end

      end

    end

    PW0L110(); /* Purge temporary storage*/

    PKWREC.PKWARRAY[PKWINDEX] = PWKREC.PWKARRAY;

    XSPKS01(); /* Exit to another application*/


    PW0LW00.XXXMODID = "300"; /* Module identification*/
    PW0LW00.PW0LWSWR = "Y"; /* Need to recreate t/s*/
    PW0LW00.PW0LWSWF = "Y"; /* Need to reformat screen*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    PW0LW00.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If no more DNSB Dates, do not allow ENTER, PF7, or PF8.*/
   /* ------------------------------------------------------------*/

  if (PW0LW00.PW0LWSWZ == "Y") /* No more dnsb dates*/

    PW0LW00.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(339); /* No more dnsbd to display*/

    exit stack; /* Exit to display map*/

  end


end // end PW0L300

// Reset highlighted fields
Function PW0L400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PW0LM001.PW0LMSEL initialAttributes; /* select code*/

  PW0LW00.PW0LWIXM = 1; /* Initialize line index*/

  while (PW0LW00.PW0LWIXM <= 10 /* Until end of lines*/
   && PW0LM001.PK1CUOID[PW0LWIXM] > 0) /* or no more data in map*/

    set PW0LM001.PW0LMACT[PW0LWIXM] normal; /* Reset attributes*/
    set PW0LM001.XHRCD[PW0LWIXM] normal;
    set PW0LM001.PW0LMRMM[PW0LWIXM] normal;
    set PW0LM001.PW0LMRDD[PW0LWIXM] normal;
    set PW0LM001.PW0LMRYY[PW0LWIXM] normal;

    PW0LW00.PW0LWIXM = PW0LW00.PW0LWIXM + 1; /* Increment line index*/

  end

  set PW0LM001.CATOAP initialAttributes; /* TO application*/
  set PW0LM001.CAITEM initialAttributes; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If any '?' found in hold cd, display pop-up window for cds*/
   /* ------------------------------------------------------------*/

  if ("?" in PW0LM001.XHRCD) /* If a '?' in any of the hold codes*/

    if (converseVar.eventKey is enter)

      PW0LW00.PW0LWIXM = sysVar.arrayIndex; /* set index*/

      PW0L410(); /* Display pop-up window*/

    else

      set PW0LM001.XHRCD[PW0LWIXM] bold; /* Highlight*/
      PW0LW00.XXXMODID = "400"; /* Module id*/
      converseLib.validationFailed(320); /* Option only valid w/enter*/

      exit stack; /* Exit to display map*/

    end

  end


end // end PW0L400

// Display pop-up window for hold
Function PW0L410()
   /* ------------------------------------------------------------*/
   /* Display pop-up window for hold codes.*/
   /* ------------------------------------------------------------*/

  XPXX001(); /* pop-up window initialization*/

  XX0XW02.XX0XWHDR = "        HOLD REASON CODES"; /* set window title*/

  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/

    XPXHR01(); /* display the list*/

  end

  if (XX0XW02.XX0XWPIX == 0) /* no selection made*/

    PW0LM001.XHRCD[PW0LWIXM] = PW0LW01.XHRCD[PW0LWIXM];

  else

    PW0LM001.XHRCD[PW0LWIXM] = XHRTBL.XHRCD[XX0XWPIX];

  end

  converseLib.clearScreen();
  
  PW0LW00.XXXMODID = "410"; /* Module id*/


end // end PW0L410

// Verify data that was entered
Function PW0L500()
   /* ------------------------------------------------------------*/
   /* Check for item in fast path*/
   /* ------------------------------------------------------------*/

  if (PW0LM001.CAITEM > " ") /* Application data was entered*/

    PW0LW00.XXXMODID = "500"; /* Module identification*/
    set PW0LM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Item invalid w/o FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PW0L510(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* If page was formatted, verify data in the line.*/
   /* ------------------------------------------------------------*/

  if (PW0LW00.TA5TSQIX > 0) /* Page was formatted*/

    PW0LW00.PW0LWIXM = 10; /* Initialize line index*/

    while (PW0LW00.PW0LWIXM > 0) /* Until end of lines*/

      if (PW0LM001.PK1CUOID[PW0LWIXM] > 0) /* Data on line*/

        if (PW0LM001.PW0LMACT[PW0LWIXM] != PW0LW01.PW0LMACT[PW0LWIXM]
         || PW0LM001.XHRCD[PW0LWIXM] != PW0LW01.XHRCD[PW0LWIXM]
         || PW0LM001.PW0LMRMM[PW0LWIXM] != PW0LW01.PW0LMRMM[PW0LWIXM]
         || PW0LM001.PW0LMRDD[PW0LWIXM] != PW0LW01.PW0LMRDD[PW0LWIXM]
         || PW0LM001.PW0LMRYY[PW0LWIXM] != PW0LW01.PW0LMRYY[PW0LWIXM])

          PW0L520(); /* Verify data in the line*/

        end

      end

      PW0LW00.PW0LWIXM = PW0LW00.PW0LWIXM - 1; /* Decrement line number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If selection code was entered validate it.*/
   /* ------------------------------------------------------------*/

  if (PW0LM001.PW0LMSEL != PW0LW00.PW0LMSEL)

    if (PW0LW00.PW0LWSWU == "N") /* No updates requested*/

      if (PW0LM001.PW0LMSEL == "A"
       || PW0LM001.PW0LMSEL == "N"
       || PW0LM001.PW0LMSEL == "S")
        /* NEXT SENTENCE*/
      else
        set PW0LM001.PW0LMSEL cursor, bold; /* Highlight*/
        PW0LW00.XXXMODID = "500"; /* Module id*/
        converseLib.validationFailed(322); /* Invalid sel code*/
      end

    else /* Updates requested*/

      set PW0LM001.PW0LMSEL cursor, bold; /* Highlight*/
      PW0LW00.XXXMODID = "500"; /* Module id*/
      converseLib.validationFailed(107); /* Invalid change of sel cd*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If no enter key was hit, get out of here.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter key was hit*/
    /* NEXT SENTENCE*/

  else
    return; /* Get out of this routine*/
  end

   /* ------------------------------------------------------------*/
   /* ENTER key was hit.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If any changes, get out of this routine.*/
   /* ------------------------------------------------------------*/

  if (PW0LM001.PW0LMSEL != PW0LW00.PW0LMSEL /* New selection cd*/
   || PW0LW00.PW0LWSWU == "Y")              /* or updates were requested*/

    return; /* Get out of this routine*/

  end

   /* ------------------------------------------------------------*/
   /* A new DNSB Date is needed, look for it.*/
   /* ------------------------------------------------------------*/

  PW0LW00.PW0LWSWZ = "N"; /* Assume no end of DNSB Dates*/

  while (PW0LW00.PW0LWSWZ == "N" /* Not at end of DNSB Dates*/
   && PWKREC.OP1DSBDT[PW0LWIXD] == PW0LW00.PW0LWPDT) /* and same date*/

    PW0LW00.PW0LWIXD = PW0LW00.PW0LWIXD + 1; /* Point to next entry*/

    if (PW0LW00.PW0LWIXD > PWKREC.PWKARMAX) /* No more in current array*/

      if (PW0LW00.PW0LWIXD > 25 /* Array was full,*/
       && PKWREC.PKWINDEX < 3)  /* but there are other arrays*/

        PKWREC.PKWINDEX = PKWREC.PKWINDEX + 1;
        PWKREC.PWKARRAY = PKWREC.PKWARRAY[PKWINDEX]; /* Get next 25*/
        PW0LW00.PW0LWIXD = 1;

        if (PW0LW00.PW0LWIXD > PWKREC.PWKARMAX)
          PW0LW00.PW0LWSWZ = "Y"; /* No more dates*/

        end
      else
        PW0LW00.PW0LWSWZ = "Y"; /* No more dates*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* See if new DNSB Date was found.*/
   /* ------------------------------------------------------------*/

  if (PW0LW00.PW0LWSWZ == "N") /* No end of DNSB Dates array*/

    PW0LW00.PW0LWPDT = PWKREC.OP1DSBDT[PW0LWIXD]; /* Save new dnsbd*/

    return; /* Get out of this routine*/

  end

   /* ------------------------------------------------------------*/
   /* No more DNSB Dates found.*/
   /* ------------------------------------------------------------*/

  set PW0LM001 initial;

  if (PW0LW00.PKURUNMD == "P")
    PW0LM001.PW0LMAPL = "PICK PLANNING";
  else
    PW0LM001.PW0LMAPL = "   PICKING   ";
  end

  PW0LM001.XWHCD = PKWREC.XWHCD; /* Warehouse cd to map*/
  PW0LM001.XWHABRV = PKWREC.XWHABRV; /* Warehouse abrv*/

  PW0LM001.XDVCD = PKWREC.XDVCD[1]; /* Division code*/
  if (PKWREC.XDVCD[1] == "*")
    PW0LM001.XDVDESC = "ALL DIVISIONS";
  else
    if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
      PW0LM001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
    end
  end

  PW0LM001.XBCCD = PKWREC.XBCCD[1]; /* Brand code*/
  if (PKWREC.XBCCD[1] == "*")
    PW0LW00.XXXMSGNO = 421;
    PW0LM001.XBCABRV = " ";
  else
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      PW0LM001.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
    end
  end

  set PW0LM001.PW0LMSEL cursor, skip, invisible; /* "*/
  PW0LW00.PW0LWSWR = "N"; /* Reset request data switch*/
  PW0LW00.XXXMODID = "500"; /* Module identification*/
  converseLib.validationFailed(339); /* No more dnsb dates*/

  exit stack; /* Exit to display map*/


end // end PW0L500

// Verify scroll request
Function PW0L510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PW0LW00.XXXTSPAG < 2)       /* and no previous pages*/

    PW0LW00.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(37); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PW0LW00.XXXTSPAG >= PW0LW00.TA5TSQIX) /* and no more pages*/

    PW0LW00.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(38); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if selection cd was changed.*/
   /* ------------------------------------------------------------*/

  if (PW0LM001.PW0LMSEL != PW0LW00.PW0LMSEL) /* Selection cd changed*/

    set PW0LM001.PW0LMSEL cursor, bold; /* Highlight*/
    PW0LW00.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(39); /* No change allowed when scrolling*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors, go to display map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum > 0)

    exit stack; /* Exit to display map*/

  end


end // end PW0L510

// Verify data in the line
Function PW0L520()
   /* ------------------------------------------------------------*/
   /* If action code enterted, edit it.*/
   /* ------------------------------------------------------------*/

  if (PW0LM001.PW0LMACT[PW0LWIXM] != PW0LW01.PW0LMACT[PW0LWIXM]
   && PW0LM001.PW0LMACT[PW0LWIXM] != "S" /* and is not a "s"*/
   && PW0LM001.PW0LMACT[PW0LWIXM] != "D" /* and is not a "d"*/
   && PW0LM001.PW0LMACT[PW0LWIXM] != "I" /* and is not a "i"*/
   && PW0LM001.PW0LMACT[PW0LWIXM] != "H" /* and is not a "h"*/
   && PW0LM001.PW0LMACT[PW0LWIXM] != " ") /* and is not a " "*/

    set PW0LM001.PW0LMACT[PW0LWIXM] cursor, bold; /* Highlight*/
    PW0LW00.XXXMODID = "520"; /* Module identification*/
    converseLib.validationFailed(35); /* Only valid codes may be entered*/

    return; /* Go back to previous routine*/

  end

   /* ------------------------------------------------------------*/
   /* If order has previously been put on hold, no more changes*/
   /* are allowed.*/
   /* ------------------------------------------------------------*/

  if (PW0LM001.PW0LMACT[PW0LWIXM] != PW0LW01.PW0LMACT[PW0LWIXM]
   || PW0LM001.XHRCD[PW0LWIXM] != PW0LW01.XHRCD[PW0LWIXM]
   || PW0LM001.PW0LMRMM[PW0LWIXM] != PW0LW01.PW0LMRMM[PW0LWIXM]
   || PW0LM001.PW0LMRDD[PW0LWIXM] != PW0LW01.PW0LMRDD[PW0LWIXM]
   || PW0LM001.PW0LMRYY[PW0LWIXM] != PW0LW01.PW0LMRYY[PW0LWIXM])

    if (PW0LW01.PW0LWSWH[PW0LWIXM] == "Y") /* Order has been put on hold*/

      PW0LM001.PW0LMACT[PW0LWIXM] = PW0LW01.PW0LMACT[PW0LWIXM];
      PW0LM001.XHRCD[PW0LWIXM] = PW0LW01.XHRCD[PW0LWIXM];
      PW0LM001.PW0LMRMM[PW0LWIXM] = PW0LW01.PW0LMRMM[PW0LWIXM];
      PW0LM001.PW0LMRDD[PW0LWIXM] = PW0LW01.PW0LMRDD[PW0LWIXM];
      PW0LM001.PW0LMRYY[PW0LWIXM] = PW0LW01.PW0LMRYY[PW0LWIXM];
      set PW0LM001.PK1CUOID[PW0LWIXM] bold;
      set PW0LM001.PK1NORID[PW0LWIXM] bold;
      converseLib.validationFailed(169); /* no more chgs allowed - order on hold*/

      return; /* Go back to previous routine*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Validate rest of data entered based on action code.*/
   /* ------------------------------------------------------------*/

  if (PW0LM001.PW0LMACT[PW0LWIXM] == " " /* action cd = 'no action'*/
   || PW0LM001.PW0LMACT[PW0LWIXM] == "S" /* or = 'select'*/
   || PW0LM001.PW0LMACT[PW0LWIXM] == "D" /* or = 'deselect'*/
   || PW0LM001.PW0LMACT[PW0LWIXM] == "I") /* or = 'inquiry'*/

    if (PW0LM001.XHRCD[PW0LWIXM] > " "  /* If reason hold cd*/
     || PW0LM001.PW0LMRMM[PW0LWIXM] > 0 /* or release dt found*/
     || PW0LM001.PW0LMRDD[PW0LWIXM] > 0 
     || PW0LM001.PW0LMRYY[PW0LWIXM] > 0)

      set PW0LM001.PW0LMACT[PW0LWIXM] cursor, bold; /* Highlight*/
      set PW0LM001.XHRCD[PW0LWIXM] bold;
      set PW0LM001.PW0LMRMM[PW0LWIXM] bold;
      set PW0LM001.PW0LMRDD[PW0LWIXM] bold;
      set PW0LM001.PW0LMRYY[PW0LWIXM] bold;
      PW0LW00.XXXMODID = "520"; /* Module identification*/
      converseLib.validationFailed(331); /* Invalid action code*/

    end

  else

    if (PW0LM001.PW0LMACT[PW0LWIXM] == "H") /* Action cd = 'hold'*/

      PW0L521(); /* Edit hold date*/
      PW0L522(); /* Edit hold reason code*/

    end

  end

  if (converseVar.validationMsgNum > 0) /* Errors found*/

    return; /* Go back to previous routine*/

  end

  PW0LW00.PW0LWSWM = "Y"; /* Data entered on screen*/
  PW0LW00.PW0LWSWU = "Y"; /* Update requested*/


end // end PW0L520

// Edit release date
Function PW0L521()
   /* ------------------------------------------------------------*/
   /* See if release date was entered.*/
   /* ------------------------------------------------------------*/

   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* IF PW0LM001.PW0LMRMM(PW0LWIXM) GT 0/* If release date exixts*/
   /* OR PW0LM001.PW0LMRDD(PW0LWIXM) GT 0*/
   /* OR PW0LM001.PW0LMRYY(PW0LWIXM) GT 0;*/
   /* ;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (PW0LM001.PW0LMRMM[PW0LWIXM] > 0 /* If release date exixts*/
   || PW0LM001.PW0LMRDD[PW0LWIXM] > 0 
  )                                  
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
     /* NEXT SENTENCE*/

  else

    converseLib.validationFailed(61); /* Release date is required msg*/
    PW0LW00.XXXMODID = "521";
    set PW0LM001.PW0LMRMM[PW0LWIXM] cursor, bold; /* Highlight*/
    set PW0LM001.PW0LMRDD[PW0LWIXM] bold;
    set PW0LM001.PW0LMRYY[PW0LWIXM] bold;

    return;

  end

   /* ------------------------------------------------------------*/
   /* Validate a keyed release date.*/
   /* ------------------------------------------------------------*/

  set TA9REC empty; /* clear date routine record*/
  TA9REC.TA9BEGMM = PW0LM001.PW0LMRMM[PW0LWIXM];
  TA9REC.TA9BEGDD = PW0LM001.PW0LMRDD[PW0LWIXM];
  TA9REC.TA9BEGYY = PW0LM001.PW0LMRYY[PW0LWIXM];

  if (PW0LM001.PW0LMRYY[PW0LWIXM] > 80)

    TA9REC.TA9BEGCC = 19; /* Set century to 19*/

  else

    TA9REC.TA9BEGCC = 20; /* Otherwise set century to 20*/

  end

  call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation routine*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (TA9REC.TA9RTNFL == 0) /* If date routine ok*/

      if (TA9REC.TA9BEGDT < PW0LW00.PW0LWCDT) /* release dt before today*/

        converseLib.validationFailed(55); /* Date in past msg*/
        PW0LW00.XXXMODID = "521"; /* Module id*/
        set PW0LM001.PW0LMRMM[PW0LWIXM] cursor, bold; /* highlight*/
        set PW0LM001.PW0LMRDD[PW0LWIXM] bold; /* highlight*/
        set PW0LM001.PW0LMRYY[PW0LWIXM] bold; /* highlight*/

      end

    else /* Routine error*/

      PW0LW00.XXXMODID = "521"; /* Module id*/
      set PW0LM001.PW0LMRMM[PW0LWIXM] cursor, bold; /* highlight*/
      set PW0LM001.PW0LMRDD[PW0LWIXM] bold; /* highlight*/
      set PW0LM001.PW0LMRYY[PW0LWIXM] bold; /* highlight*/

      if (TA9REC.TA9RTNFL == 3) /* Invalid work date*/

        converseLib.validationFailed(56); /* Not work date msg*/

      else

        converseLib.validationFailed(158); /* Invalid date msg*/

      end

    end

    return;

  end

   /* ------------------------------------------------------------*/
   /* Unsuccessful call.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* Subroutine parameters*/

  PW0LW00.XXXMODID = "521"; /* Module id*/
  converseLib.validationFailed(29); /* Unexpected error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "VERIFY RELEASE DATE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


end // end PW0L521

// Edit hold reason code
Function PW0L522()
   /* ------------------------------------------------------------*/
   /* Edit the hold reason code entered.*/
   /* ------------------------------------------------------------*/

  if (PW0LM001.XHRCD[PW0LWIXM] <= " ") /* No hold reason cd entered*/

    set PW0LM001.XHRCD[PW0LWIXM] cursor, bold; /* Highlight*/
    PW0LW00.XXXMODID = "522"; /* Module identification*/
    converseLib.validationFailed(60); /* Reason code required*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Check the hold reason code corporate table.*/
   /* ------------------------------------------------------------*/


  if (PW0LM001.XHRCD[PW0LWIXM] in XHRTBL.XHRCD /* if reason code exists*/
   && XHRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and is active*/

    /* next sentence*/

  else

    set PW0LM001.XHRCD[PW0LWIXM] cursor, bold; /* Highlight*/
    PW0LW00.XXXMODID = "522"; /* Module identification*/
    converseLib.validationFailed(57); /* Invalid reason code*/

  end


end // end PW0L522

// Process valid input request
Function PW0L600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PW0LW00.PW0LWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Save the entered data, save and update t/s.*/
   /* ------------------------------------------------------------*/

  if (PW0LW00.PW0LWSWM == "Y") /* Screen modified*/

    PW0LW00.PW0LWSWM = "N"; /* Reset switch*/
    PW0LW00.PW0LWIXM = 1; /* Initialize line index*/

    while (PW0LW00.PW0LWIXM <= 10 /* Until end of lines*/
     && PW0LM001.PK1CUOID[PW0LWIXM] > 0) /* and data exists*/

      PW0LW01.PW0LMACT[PW0LWIXM] = PW0LM001.PW0LMACT[PW0LWIXM];
      PW0LW01.XHRCD[PW0LWIXM] = PW0LM001.XHRCD[PW0LWIXM];
      PW0LW01.PW0LMRMM[PW0LWIXM] = PW0LM001.PW0LMRMM[PW0LWIXM];
      PW0LW01.PW0LMRDD[PW0LWIXM] = PW0LM001.PW0LMRDD[PW0LWIXM];
      PW0LW01.PW0LMRYY[PW0LWIXM] = PW0LM001.PW0LMRYY[PW0LWIXM];

      PW0LW00.PW0LWIXM = PW0LW00.PW0LWIXM + 1; /* Increment line index*/

    end

    TA5REC.TA5TSQIX = PW0LW00.XXXTSPAG; /* Page# to update*/

    PW0LS01(); /* Update t/s page*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PW0LW00.XXXTSPAG = PW0LW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PW0LW00.XXXTSPAG = PW0LW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If the selection cd was changed, go back to rebuild data.*/
   /* ------------------------------------------------------------*/

  if (PW0LM001.PW0LMSEL != PW0LW00.PW0LMSEL) /* Selection changed*/

    PW0LW00.PW0LWSWR = "Y"; /* Request for data switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If updates requested, perform them.*/
   /* ------------------------------------------------------------*/

  if (PW0LW00.PW0LWSWU == "Y") /* Data updates found*/

    XX0XS01(); /* Get system date and time*/

    PW0LW00.PW0LWSWS = "N"; /* Clear successful updates switch*/

    PW0L610(); /* Perform updates*/

    PW0LW00.PW0LWSWU = "N"; /* Clear updates requested switch*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/

    if (PW0LW00.PW0LWSWS == "Y") /* Successful updates*/

      if (PW0LW00.XXXMSGNO == 0) /* If no warnings*/

        PW0LW00.XXXMSGNO = 32; /* Updates successful*/
        PW0LW00.XXXMODID = "600"; /* Module identification*/

      end

    end

    if (PW0LW00.PW0LWIXO > 1) /* There were orders to inquire on*/

      PW0L670(); /* Xfer to PW0I*/

    else

      PW0LW00.XXXTSPAG = 1; /* Force display to first page*/

    end

    return; /* Go back to previous routine*/

  end

   /* ------------------------------------------------------------*/
   /* ***** Done with current DNSB Date ******/

   /* Go get the next one*/
   /* ------------------------------------------------------------*/

  PW0LW00.PW0LWSWR = "Y"; /* Request for data switch*/


end // end PW0L600
// Process lines of data
Function PW0L610()
   /* ------------------------------------------------------------*/
   /* Process data*/
   /* ------------------------------------------------------------*/

  PW0LW00.PW0LWIXM = 1; /* Initialize map index*/
  PW0LW00.PW0LWIXO = 1; /* Initialize order inquiry array index*/
  PW0LW00.XXXTSPAG = 1; /* Start at first page of t/s*/

  PW0LS02(); /* Read first t/s page*/

  while (PW0LW00.XXXTSPAG <= PW0LW00.TA5TSQIX) /* While there is still data*/

    if (PW0LW01.PK1CUOID[PW0LWIXM] > 0) /* If there is data on this line*/

      if (PW0LW01.PW0LMACT[PW0LWIXM] == "S") /* Select to pick*/

        PW0L620(); /* Select to pick routine*/

        PW0LW00.PW0LWSWS = "Y"; /* Successful update*/

      end

      if (PW0LW01.PW0LMACT[PW0LWIXM] == "D") /* Deselect order*/

        PW0L630(); /* Deselect routine*/

        PW0LW00.PW0LWSWS = "Y"; /* Successful update*/

      end

      if (PW0LW01.PW0LMACT[PW0LWIXM] == "H") /* Place order on hold*/

        PW0L640(); /* Hold order routine*/

        PW0LW00.PW0LWSWS = "Y"; /* Successful update*/

      end

      if (PW0LW01.PW0LMACT[PW0LWIXM] == "I") /* Inquire on order*/

        PW0L650(); /* Order inquiry routine*/

        PW0LW00.PW0LWSWS = "Y"; /* Successful update*/

      end

    end

    PW0LW00.PW0LWIXM = PW0LW00.PW0LWIXM + 1; /* Increment index*/

    /* ------------------------------------------------------------*/
     /* If t/s page processed, update & get next page.*/
    /* ------------------------------------------------------------*/

    if (PW0LW00.PW0LWIXM > 10) /* If index > 10*/

      PW0LS01(); /* Update current t/s page*/

      PW0LW00.XXXTSPAG = PW0LW00.XXXTSPAG + 1; /* Increment t/s page number*/

      if (PW0LW00.XXXTSPAG <= PW0LW00.TA5TSQIX) /* Still have more t/s pages*/

        VGVar.handleSysLibraryErrors = 0;
        sysLib.commit();
                                   /* Commit db updates for prior page data*/

        PW0LS02(); /* Get next t/s page*/

        PW0LW00.PW0LWIXM = 1; /* Reset index*/

      end

    end

  end


end // end PW0L610

// Select order for picking
Function PW0L620()
   /* ------------------------------------------------------------*/
   /* Select order for picking*/
   /* ------------------------------------------------------------*/

  PW0LS10(); /* select unique pool header*/

  if (PW0LW00.PKURUNMD == " ") /* if run mode is picking*/
    PK4REC.PK4SLIND = "S"; /* set status to 's'*/
  else
    PK4REC.PK4SLIND = "P"; /* otherwise, set to 'p'*/
  end

  PW0LW01.PK4SLIND[PW0LWIXM] = "Y";

  PK4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PK4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW0LS11(); /* update pool header*/

   /* ------------------------------------------------------------*/
   /* See if row already exists in Dpick.Vselor01*/
   /* ------------------------------------------------------------*/

  set PKHREC empty; /* clear record*/
  PKHREC.XWHCD = PKWREC.XWHCD;
  PKHREC.PK1CUOID = PW0LW01.PK1CUOID[PW0LWIXM];
  PKHREC.PK1NORID = PW0LW01.PK1NORID[PW0LWIXM];
  PKHREC.PK1PRTN = PK4REC.PK1PRTN;
  PKHREC.PKURUNMD = PW0LW00.PKURUNMD;

  PW0L621(); /* select unique Dpick.Vselor01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* row already exists*/

    if (PW0LW00.XXXMSGNO == 0) /* if no other warning msgs*/
      PW0LW00.XXXMSGNO = 44; /* warning msg*/
      PW0LW00.XXXMODID = "620"; /* module id*/
    end

    PW0LW01.PW0LMACT[PW0LWIXM] = " "; /* clear action code*/

    return; /* return to prev process, don't need to add rec*/

  end

   /* ------------------------------------------------------------*/
   /* Insert row into Dpick.Vselor01*/
   /* ------------------------------------------------------------*/

  set PKHREC empty; /* clear record*/

  PKHREC.XWHCD = PKWREC.XWHCD;
  PKHREC.XDVCD = PK4REC.XDVCD;
  PKHREC.XBCCD = PK4REC.XBCCD;
  PKHREC.PK1CUOID = PW0LW01.PK1CUOID[PW0LWIXM]; /* stktf id*/
  PKHREC.PK1NORID = PW0LW01.PK1NORID[PW0LWIXM]; /* nike ord id*/
  PKHREC.PK1PRTN = PK4REC.PK1PRTN; /* part char*/
  PKHREC.PKHPVSFC = PW0LW01.PW0LMRFC[PW0LWIXM]; /* full case qty*/
  PKHREC.PKHPVSRP = PW0LW01.PW0LMRRP[PW0LWIXM]; /* repack qty*/
  PKHREC.OP1DSBDT = PWKREC.OP1DSBDT[PW0LWIXD]; /* dnsb date*/
  PKHREC.TF1CARCD = PK4REC.TF1CARCD; /* carrier cd*/
  PKHREC.XPPCD = PK4REC.XPPCD; /* pick prior cd*/
  PKHREC.PKURUNMD = PW0LW00.PKURUNMD; /* run mode*/
  PKHREC.PK-SEL-TYP-CD = " 6"; /* ("Non-spcl hndl")*/
  PKHREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PKHREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  PKHREC.ZZZCHGCT = 0;

  PW0L622(); /* insert Dpick.Vselor01*/


end // end PW0L620

// Select Dpick.Vselor01
Function PW0L621()
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("S ", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found is good!!*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0LW00.XXXMODID = "621"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0L621

// Insert Dpick.Vselor01
Function PW0L622()
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("A ", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0LW01.PW0LMACT[PW0LWIXM] = "*"; /* flag as processed*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == -803) /* Row already exists*/

      PW0LW00.XXXMSGNO = 44; /* Warning msg*/
      PW0LW00.XXXMODID = "622"; /* module id*/
      PW0LW01.PW0LMACT[PW0LWIXM] = " "; /* clear action code*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0LW00.XXXMODID = "622"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0L622

// De-select order
Function PW0L630()
   /* ------------------------------------------------------------*/
    /* De-select order*/
   /* ------------------------------------------------------------*/

  PW0LS10(); /* Select unique pool header*/

  PK4REC.PK4SLIND = " "; /* Set status to 'deselected'*/
  PW0LW01.PK4SLIND[PW0LWIXM] = "N";

  PK4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PK4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW0LS11(); /* Update pool header*/

   /* ------------------------------------------------------------*/
    /* Delete row from Dpick.Vselor01*/
   /* ------------------------------------------------------------*/

  set PKHREC empty; /* Clear record*/
  PKHREC.XWHCD = PKWREC.XWHCD;
  PKHREC.PK1CUOID = PW0LW01.PK1CUOID[PW0LWIXM];
  PKHREC.PK1NORID = PW0LW01.PK1NORID[PW0LWIXM];
  PKHREC.PKURUNMD = PW0LW00.PKURUNMD;

  PW0L631(); /* Delete Dpick.Vselor01*/


end // end PW0L630

// Delete Dpick.Vselor01 row
Function PW0L631()
   /* ------------------------------------------------------------*/
   /* Delete the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("D ", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0LW01.PW0LMACT[PW0LWIXM] = "*"; /* flag as processed*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PW0LW00.XXXMSGNO = 201; /* Row to be deleted not found*/
      PW0LW00.XXXMODID = "631"; /* Module identification*/
      PW0LW01.PW0LMACT[PW0LWIXM] = " "; /* flag as processed*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0LW00.XXXMODID = "631"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0L631

// Put order on hold
Function PW0L640()
   /* ------------------------------------------------------------*/
    /* Get order from Dpick.Vorhld01 table*/
   /* ------------------------------------------------------------*/

  set PKBREC empty; /* Clear record*/
  PKBREC.XWHCD = PKWREC.XWHCD;
  PKBREC.PK1CUOID = PW0LW01.PK1CUOID[PW0LWIXM];
  PKBREC.PK1NORID = PW0LW01.PK1NORID[PW0LWIXM];
  PKBREC.XHRCD = PW0LW01.XHRCD[PW0LWIXM];

  PW0L641(); /* Select unique Dpick.Vorhld01*/

   /* ------------------------------------------------------------*/
    /* Prepare release order from map to be moved into pkbrec.*/
   /* ------------------------------------------------------------*/

  PW0LW00.PW0LWWMM = PW0LW01.PW0LMRMM[PW0LWIXM];
  PW0LW00.PW0LWWDD = PW0LW01.PW0LMRDD[PW0LWIXM];
  PW0LW00.PW0LWWYY = PW0LW01.PW0LMRYY[PW0LWIXM];

  if (PW0LW00.PW0LWWYY > 80) /* If year > 80*/

    PW0LW00.PW0LWWCC = 19; /* set century to 19*/

  else

    PW0LW00.PW0LWWCC = 20; /* else, set to 20*/

  end

  PKBREC.PKBRELDT = PW0LW00.PW0LWWDT; /* store as release date*/

   /* ---------------------------------------------------------------*/
   /* If release date is not '999999', subtract 1 from release date*/
    /* and move to the plan release date.*/
   /* ---------------------------------------------------------------*/

   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* IF PW0LW00.PW0LWWMM NE 99*/
   /* OR PW0LW00.PW0LWWDD NE 99*/
   /* OR PW0LW00.PW0LWWYY NE 99;*/
   /* ;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (PW0LW00.PW0LWWMM != 99
   || PW0LW00.PW0LWWDD != 99)

   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
    set TA9REC empty;
    TA9REC.TA9BEGDT = PW0LW00.PW0LWWDT;
    TA9REC.TA9OFSET = -1;

    try
      call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
    end /* subract 1 from date*/

    /* -----------------------------------------------------------------*/
     /* if successful, move date and continue through process*/
    /* -----------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* call successful*/
     && TA9REC.TA9RTNFL == 0)          /* and normal return code*/

      PKBREC.PKBPLRDT = TA9REC.TA9RTNDT;

    else

      /* ---------------------------------------------------------------*/
       /* otherwise, indicate that a system error has occurred*/
      /* ---------------------------------------------------------------*/

      TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
      TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* subroutine parameters*/
      converseLib.validationFailed(29); /* fatal error*/
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
      TA1REC.TA1TYPE = "APPL"; /* type of error*/
      TA1REC.TA1LOC = "UPDATE PLAN RELEASE DATE";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program appl*/
      TA1REC.TA1PGMNO = "640"; /* program number*/
      TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* map appl*/

   /* error diagnosis routine*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      exit stack; /* exit to display map*/

    end

  else

    PKBREC.PKBPLRDT = PW0LW00.PW0LWWDT;

  end

   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* IF PKBREC.PKBRELDT GT 19991231;*/
   /* MOVE 99999999 TO PKBREC.PKBRELDT;*/
   /* MOVE 99999999 TO PKBREC.PKBRELDT;*/
   /* END;*/
   /* ;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (PKBREC.PKBRELDT > 20431231)
    PKBREC.PKBRELDT = 99999999;
    PKBREC.PKBRELDT = 99999999;
  end

   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
   /* ------------------------------------------------------------*/
    /* If order hold row found, update it, otherwise, add it.*/
   /* ------------------------------------------------------------*/

  PKBREC.XXXUSRID = COMMAREA.CAUSERID;
  PKBREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PKBREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  if (SQLCA.VAGen_SQLCODE == 0) /* Row was found*/

    PW0L642(); /* Update Dpick.Vorhld01 row*/

  else

    PKBREC.ZZZCHGCT = 0;

    PW0L643(); /* Insert Dpick.Vorhld01 row*/

  end

   /* ------------------------------------------------------------*/
    /* Update pool header row.*/
   /* ------------------------------------------------------------*/

  PW0LS10(); /* Select unique pool header*/

  PK4REC.PK4ORHLD = "Y"; /* Set order hold flag to yes*/
  PK4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PK4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW0LS11(); /* Update pool header*/


end // end PW0L640

// Select unique Dpick.Vorhld01
Function PW0L641()
   /* ------------------------------------------------------------*/
   /* Select the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("S ", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0LW00.XXXMODID = "641"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0L641

// Update row in Dpick.Vorhld01
Function PW0L642()
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("U ", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0LW01.PW0LMACT[PW0LWIXM] = "*"; /* flag as processed*/
      PW0LW01.PW0LWSWH[PW0LWIXM] = "Y"; /* flag as on hold*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0LW00.XXXMODID = "642"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0L642

// Insert row in Dpick.Vorhld01
Function PW0L643()
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("A ", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0LW01.PW0LMACT[PW0LWIXM] = "*"; /* flag as processed*/
      PW0LW01.PW0LWSWH[PW0LWIXM] = "Y"; /* flag as on hold*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0LW00.XXXMODID = "643"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0L643

// Process order for inquiry
Function PW0L650()
   /* ------------------------------------------------------------*/
   /* Order was requested for inquiry - add to pwjrec array*/
   /* ------------------------------------------------------------*/

  if (PW0LW00.PW0LWIXO > 65)

    PW0LW00.XXXMSGNO = 346;

    return;

  end

  PWJREC.PWJORACT[PW0LWIXO] = "I"; /* flag for inquiry*/
  PWJREC.PK1CUOID[PW0LWIXO] = PW0LW01.PK1CUOID[PW0LWIXM];
  PWJREC.PK1NORID[PW0LWIXO] = PW0LW01.PK1NORID[PW0LWIXM];

  PW0LW00.PW0LWIXO = PW0LW00.PW0LWIXO + 1;


end // end PW0L650

// Transfer control to PW0I
Function PW0L670()
   /* ------------------------------------------------------------*/
   /* Orders are in pwjREC for inquiry, xfer to PW0I.*/
   /* ------------------------------------------------------------*/

  PW0L110(); /* Purge temporary storage*/

  COMMAREA.CATOAP = "PW0I"; /* Set target application*/
  PWJREC.XWHCD = PKWREC.XWHCD; /* Move whse cd*/
  PWJREC.XWHABRV = PKWREC.XWHABRV; /* Move whse abrv*/
  PW0LW00.PW0LWIXO = PW0LW00.PW0LWIXO - 1; /* Set correct # of orders*/
  PWJREC.PWJARMAX = PW0LW00.PW0LWIXO; /* move to array max*/
  PKWREC.PKWUSERB = PWJREC.PKWUSERB; /* Store array for pw0i*/

  XSPKS01(); /* Exit to another application*/

  set PW0LM001.CATOAP cursor, bold; /* Highlight*/

  exit stack; /* Exit to display map*/


end // end PW0L670

// Update temporary storage page
Function PW0LS01()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PW0LW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0LW00.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0LS01

// Read temporary storage page
Function PW0LS02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PW0LW01.XXXTSLEN = PW0LW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PW0LW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PW0LW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0LW00.XXXMODID = "S02"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0LS02

// Select unique Dpick.Vpoolh01
Function PW0LS10()
   /* ------------------------------------------------------------*/
   /* Select unique for Dpick.Vpoolh01*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* Clear row storage area*/

  PK4REC.XWHCD = PKWREC.XWHCD; /* Warehouse code*/
  PK4REC.PK1CUOID = PW0LW01.PK1CUOID[PW0LWIXM]; /* Customer order number*/
  PK4REC.PK1NORID = PW0LW01.PK1NORID[PW0LWIXM]; /* Nike order number*/

  try
    call "IO1720" ("S ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, exit.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0LW00.XXXMODID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback changes*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0LS10

// Update Dpick.Vpoolh01
Function PW0LS11()
   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1720" ("U ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      PW0LW00.PW0LWSWR = "Y"; /* Request for data switch*/

      PW0LW00.XXXMODID = "S11"; /* Module identification*/
      PW0LW00.XXXMSGNO = 105; /* Data was updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0LW00.XXXMODID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0LW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0LS11

//*** RECORD=PW0LW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PW0LW00 type basicRecord
  5 PW0LWIXD PW0LWIXD ; 
  5 PW0LWIXI PW0LWIXI ; 
  5 PW0LWIXM PW0LWIXM ; 
  5 PW0LWIXO PW0LWIXO ; 
  5 PW0LWSWB PW0LWSWB ; 
  5 PW0LWSWC PW0LWSWC ; 
  5 PW0LWSWF PW0LWSWF ; 
  5 PW0LWSWM PW0LWSWM ; 
  5 PW0LWSWP PW0LWSWP ; 
  5 PW0LWSWR PW0LWSWR ; 
  5 PW0LWSWS PW0LWSWS ; 
  5 PW0LWSWU PW0LWSWU ; 
  5 PW0LWSWW PW0LWSWW ; 
  5 PW0LWSWZ PW0LWSWZ ; 
  5 PW0LMSEL PW0LMSEL ; 
  5 PKURUNMD PKURUNMD ; 
  5 PW0LWPDT PW0LWPDT ; 
  5 PW0LWCDT PW0LWCDT ; 
  5 PW0LWWDT PW0LWWDT ; 
    10 PW0LWWCC PW0LWWCC ; 
    10 PW0LWWYY PW0LWWYY ; 
    10 PW0LWWMM PW0LWWMM ; 
    10 PW0LWWDD PW0LWWDD ; 
  5 PW0LWNUM PW0LWNUM ; 
  5 PW0LWDFC PW0LWDFC ; 
  5 PW0LWDRP PW0LWDRP ; 
  5 PW0LWTFC PW0LWTFC ; 
  5 PW0LWTRP PW0LWTRP ; 
  5 XXXTSLEN XXXTSLEN ; 
  5 XXXTSPAG XXXTSPAG ; 
  5 XXXMODID XXXMODID ; 
  5 XXXMSGNO XXXMSGNO ; 
  5 TA5TSQIX TA5TSQIX ; 
end // end PW0LW00

//*** RECORD=PW0LW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record PW0LW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(310) ; 
    10 * char(31) [10] ; 
      15 PW0LMACT PW0LMACT ; 
      15 PK1CUOID PK1CUOID ; 
      15 PK1NORID PK1NORID ; 
      15 PW0LMRFC PW0LMRFC ; 
      15 PW0LMRRP PW0LMRRP ; 
      15 PK4SLIND PK4SLIND ; 
      15 XHRCD XHRCD ; 
      15 PW0LMRMM PW0LMRMM ; 
      15 PW0LMRDD PW0LMRDD ; 
      15 PW0LMRYY PW0LMRYY ; 
      15 PW0LWSWH PW0LWSWH ; 
end // end PW0LW01

// Action code
DataItem PW0LMACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//                dd
DataItem PW0LMRDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Regular FC
DataItem PW0LMRFC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold release - mm
DataItem PW0LMRMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Regular RP
DataItem PW0LMRRP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//                yy
DataItem PW0LMRYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selected,non-sel,all flag
DataItem PW0LMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current date (ccyymmdd)
DataItem PW0LWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Detail full case qty
DataItem PW0LWDFC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Detail repack qty
DataItem PW0LWDRP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Dnsbd index
DataItem PW0LWIXD num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Item index
DataItem PW0LWIXI num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map line index
DataItem PW0LWIXM num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order inquiry index
DataItem PW0LWIXO num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work order number
DataItem PW0LWNUM num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Previous no-ship-before-date
DataItem PW0LWPDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Bad Fast Path switch
DataItem PW0LWSWB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Ordr cursor end of file switch
DataItem PW0LWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem PW0LWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order on hold switch
DataItem PW0LWSWH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen modified switch
DataItem PW0LWSWM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Ok to process order switch
DataItem PW0LWSWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PW0LWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update successful switch
DataItem PW0LWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem PW0LWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work cursor end of file switch
DataItem PW0LWSWW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// No more dnsb dats switch
DataItem PW0LWSWZ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Total full case qty
DataItem PW0LWTFC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total repack qty
DataItem PW0LWTRP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   cc
DataItem PW0LWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   dd
DataItem PW0LWWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date work area (ccyymmdd)
DataItem PW0LWWDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   mm
DataItem PW0LWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   yy
DataItem PW0LWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

