package pw0y;
import al.common.*;
import az.common.*;
import corpcom1.*;
import corpcom1.CACHGFL;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import iv.common.*;
import ku.common.*;
import op.common.*;
import os.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sl.common.*;
import sm.common.*;
import sp.common.*;
import sr.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=PW0Y ****
// This application allows a user to enter picking exceptions
// for a specific whse, tote or carton sequence number.
// It will update picking, shiprec and asn databases.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          11/16/98  MGoel   New Program
//          01/12/99  MGoel   Added processing to calculate the
//                            number of Products in the ctn and
//                            passing this to Application PW01.
//          05/24/99  snaidu  Commented the FTP process for the
//                            whse 42 in the fol. procs :
//                            1. PW0Y-70010
//                            2. PW0Y-71010
//                            Look for comments -
//                            /* Deactivate MOVERS for Canada.
//          07/18/00 LPATTN   Added the new field Sub BOL no
//                            to the screen PW0YM001 and logic
//                            to populate the field.
// GDS/NSC  05/15/00  MARBUC  Change call DB1000 to perform
//                             XX0XS-SELECT-ITM-SZ.  (Calls
//                             io1660 for Canada and DB1000 for
//                             all others)
//                            Add XX0XW03 and OPIREC to
//                             Record/Table list
// DLVRUSA  04/04/01  APHIL2  Rename Statement Group name from
//                             XX0XS-SELECT-ITM-SZ to
//                             XSPKS-SELECT-ITM-SZ
//                            Also, Change the Process PW0Y100
//                            to allow NIL Processing.
//  KIN#58226  05/02/03 SNARAS    modified to support PICKING 
//                                  EXCEPTION on export orders
// KIN77296  01/23/04 rathal changed the server name in
//                           PW0Y-70010, PW0Y-71010 from
//  SCARBORO-SVR-08
//                           to SCARBORO-SVR-34 for Canda(42)
//  whse scan code
//                           server change.
// 
// *********************
Program PW0Y type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  OP3REC OP3REC; // record
  OP8REC OP8REC; // record
  OPBREC OPBREC; // record
  OPIREC OPIREC; // record
  PC2REC PC2REC; // record
  PKDREC PKDREC; // record
  PKNREC PKNREC; // record
  PKWREC PKWREC; // record
  PW0YREC PW0YREC; // record
  PW0YW00 PW0YW00; // record
  PW0YW01 PW0YW01; // record
  PW0YW02 PW0YW02; // record
  PW0YW04 PW0YW04; // record
  PW0YW05 PW0YW05; // record
  PW0YW06 PW0YW06; // record
  PW0YW07 PW0YW07; // record
  PW0YW09 PW0YW09; // record
  PW0YW11 PW0YW11; // record
  PW0YW12 PW0YW12; // record
  PW0YW99 PW0YW99; // record
  PWHREC PWHREC; // record
  PWOREC PWOREC; // record
  PWPREC PWPREC; // record
  SL5REC SL5REC; // record
  SQLCA SQLCA; // record
  SR1REC SR1REC; // record
  SR2REC SR2REC; // record
  SR3REC SR3REC; // record
  SR5REC SR5REC; // record
  SYPREC SYPREC; // record
  SYUREC SYUREC; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VAZCIT01 VAZCIT01; // record
  VAZCSZ01 VAZCSZ01; // record
  VAZCTN01 VAZCTN01; // record
  VAZHDR01 VAZHDR01; // record
  VAZORD01 VAZORD01; // record
  VSPLSZ02 VSPLSZ02; // record
  WSY2000 WSY2000; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  XX0XW03 XX0XW03; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PW0YTT1 {deleteAfterUse = yes}; // table
  use PW0YTT2 {deleteAfterUse = yes}; // table
  use PW0YTP1 {deleteAfterUse = yes}; // table
  use PW0YTP2 {deleteAfterUse = yes}; // table
  use XDMTBL; // table
  use XEGTBL; // table
  use XGPTBL; // table
  use XHDTBL; // table
  use XOWTBL; // table
  use XPGTBL; // table
  use XQATBL; // table
  use XUMTBL; // table
  use XWHTBL; // table
  use PW0YM.PW0YM001,  // forms
      PW0YM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PW0Y000: PW0Y000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set PW0YM001 initial; /* M001 input/output*/
    set PW0YW00 empty; /* Working storage*/
    set PW0YW01 empty; /* M001 display storage*/
    set PW0YW02 empty; /* M001 temporary storage*/
    set PW0YW04 empty; /**/
    set PW0YW05 empty; /* PWPREC rows for table updates*/
    set PW0YW06 empty; /* PWQREC rows for table updates*/
    set PW0YW07 empty; /* PWOREC rows for table updates*/
    set PW0YW12 empty; /**/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* temporary storage area*/
    set TA6REC empty; /* job request subprogram parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/
    PW0YW00.XXXTSLEN = 374;

    PW0YW00.PW0YWSWR = "N"; /* Request for data switch*/
    PW0YW00.PW0YWSWF = "Y"; /* format screen data switch*/

    PW0YW01.XWHCD = PKWREC.XWHCD;
    PW0YW01.XWHABRV = PKWREC.XWHABRV;
     /* * LPATTN*/
    set PW0YM001.SR2BLLSU skip, invisible;
     /* * LAPATTN*/

    set PW0YREC empty;
    PW0YREC.PW0Y-COMMON-REC = COMMAREA.CA-USER-WORKAREA-4K;

    if (PW0YREC.PW0YW-RETURN-IND == "Y")
      PW0YM001.XWHCD = PW0YREC.XWH-WHSE-CD;
      PW0YM001.PW0YMCTN = PW0YREC.PK-CRTN-SEQ-NBR;
      PW0YW01.PKDNCSQN = PW0YREC.PK-CRTN-SEQ-NBR;
      PW0YW01.PW0YWCTN = PW0YREC.PK-CRTN-SEQ-NBR;

      if (PW0YREC.PW0YW-TOTE-NBR-IND == "Y")
        PW0YM001.PW0YMTOT = PW0YREC.PK-TOTE-SEQ-NBR;
        PW0YW01.PWPTOSQN = PW0YREC.PK-TOTE-SEQ-NBR;
        PW0YW01.PW0YWTOT = PW0YREC.PK-TOTE-SEQ-NBR;
      end

      PW0YW00.PW0YWSWR = "Y"; /* Request for data switch*/
      PW0YW00.PW0YWNKS = "Y"; /* new key*/
    else
      set PW0YM001 initial; /* M001 input/output*/
      set PW0YW01 empty; /* M001 display storage*/
      PW0YW01.XWHCD = PKWREC.XWHCD;
      PW0YW01.XWHABRV = PKWREC.XWHABRV;
      PW0YW00.PW0YWSWR = "N"; /* Request for data switch*/
      PW0YW00.PW0YWSWF = "Y"; /* format screen data switch*/
    end

     /* ------------------------------------------------------------*/
     /* Flow to mainline processing*/
     /* ------------------------------------------------------------*/

    goto PW0Y001;

    PW0Y001: PW0Y001();
    goto PW0Y001;
  end // end main
end // end PW0Y

// Submit PROD ASN JCL
Function PW0Y-70010()
   /* ------------------------------------------------------------*/
   /* Create and Submit PROD MOVERS Download JCL.*/
   /* ------------------------------------------------------------*/

   /* --- Initialize the work areas and indexes to be used ---*/

  set TA6REC empty; /* Subroutine work area*/
  set PW0YW11 empty; /* Initialize JCL work area*/

  TA6REC.TA6INDEX = 1; /* Initialize jcl table index*/
  PW0YW11.PW0YWIDX2 = 1; /* Initialize ws index*/

   /* --- Format JCL and parameters into the subroutine work area ---*/

  while (PW0YTP1.TARJCL[PW0YWIDX2] != "/*EOF") /* Until end of table*/

    if (PW0YTP1.TARTYPE[PW0YWIDX2] == "J") /* Jobcard*/
      PW0YW11.PW0YW-JOB-CARD = PW0YTP1.TARJCL[PW0YWIDX2];
      PW0YW11.PW0YW-XWHCDJ = PW0YW01.XWHCD;
      TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-JOB-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    if (PW0YTP1.TARTYPE[PW0YWIDX2] == "1") /* Parameters statement*/
      if (PW0YW01.XWHCD == "02"
       || PW0YW01.XWHCD == "04"
       || PW0YW01.XWHCD == "07"
       || PW0YW01.XWHCD == "42") /* Deactivate Movers for Canada*/
      else
        PW0YW11.PW0YW-OUTPUT-CARD = PW0YTP1.TARJCL[PW0YWIDX2];
        if (PW0YW-OUTPUT-LIT == "OUTPUT")
   /* IF PW0YW01.XWHCD EQ '42';    /* Deactivate Movers for Canada*/
   /* MOVE '230' TO PW0YW11.PW0YW-OUTPUT-RMT;*/
   /* END;*/
          if (PW0YW01.XWHCD == "51")
            PW0YW11.PW0YW-OUTPUT-RMT = "123";
          end
        end
        TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-OUTPUT-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (PW0YTP1.TARTYPE[PW0YWIDX2] == "W") /* whse field*/
      PW0YW11.PW0YW-WHSE-CARD = PW0YTP1.TARJCL[PW0YWIDX2];
      PW0YW11.PW0YW-XWHCDW = PW0YW01.XWHCD;
      TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-WHSE-CARD; /* JCL*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    if (PW0YTP1.TARTYPE[PW0YWIDX2] == "Q")
      PW0YW11.PW0YW-AZ153D-PARM-CARD = " ";
      PW0YW11.PW0YW-AZ153D-PARM-TRAN-ID = "PW0Y";
      PW0YW11.PW0YW-AZ153D-PARM-WHSE-CD = PW0YW01.XWHCD;
      PW0YW11.PW0YW-AZ153D-PARM-BILL-OF-LADING = PW0YW01.PK1BLLAD;
      PW0YW11.PW0YW-AZ153D-PARM-BOL-SUB-NBR = PW0YW01.SR2BLLSU;
      PW0YW11.PW0YW-AZ153D-PARM-MOVERS-STAT-CD = "03";
      TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-AZ153D-PARM-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    if (PW0YTP1.TARTYPE[PW0YWIDX2] == "F") /* FTP statements*/
      if (PW0YW01.XWHCD == "02"
       || PW0YW01.XWHCD == "04"
       || PW0YW01.XWHCD == "07"
       || PW0YW01.XWHCD == "42")
        PW0YW11.PW0YW-FTP-CARD = PW0YTP1.TARJCL[PW0YWIDX2];
        if (PW0YW11.PW0YW-FTP-LIT == "TARGET")
          if (PW0YW01.XWHCD == "02")
            PW0YW11.PW0YW-FTP-TARGET = "grsun1";
          end
          if (PW0YW01.XWHCD == "04")
            PW0YW11.PW0YW-FTP-TARGET = "memfware";
          end
          if (PW0YW01.XWHCD == "07")
            PW0YW11.PW0YW-FTP-TARGET = "wilfware";
          end
          if (PW0YW01.XWHCD == "42")
            PW0YW11.PW0YW-FTP-TARGET = "SCARBORO-SVR-34";
          end
        end
        if (PW0YW11.PW0YW-FTP-LIT == "FTPPAR")
          PW0YW11.PW0YW-FTPPARMS-WHSE-CD = PW0YW01.XWHCD;
        end
        TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-FTP-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (PW0YTP1.TARTYPE[PW0YWIDX2] == "S") /* RSH statements*/
      if (PW0YW01.XWHCD == "02"
       || PW0YW01.XWHCD == "04"
       || PW0YW01.XWHCD == "07")
        PW0YW11.PW0YW-RSH-CARD = PW0YTP1.TARJCL[PW0YWIDX2];
        if (PW0YW11.PW0YW-RSH-LIT == "TAR")
          if (PW0YW01.XWHCD == "02")
            PW0YW11.PW0YW-RSH-TARGET = "grsun1";
          end
          if (PW0YW01.XWHCD == "04")
            PW0YW11.PW0YW-RSH-TARGET = "memfware";
          end
          if (PW0YW01.XWHCD == "07")
            PW0YW11.PW0YW-RSH-TARGET = "wilfware";
          end
        end
        if (PW0YW11.PW0YW-RSH-LIT == "CMD")
          PW0YW11.PW0YW-RSH-CMD-WHSE-CD = PW0YW01.XWHCD;
        end
        TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-RSH-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (PW0YTP1.TARTYPE[PW0YWIDX2] == " ") /* no tartype*/
      TA6REC.TARJCL[TA6INDEX] = PW0YTP1.TARJCL[PW0YWIDX2];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    PW0YW11.PW0YWIDX2 = PW0YW11.PW0YWIDX2 + 1;

  end

  TA6REC.TARJCL[TA6INDEX] = PW0YTP1.TARJCL[PW0YWIDX2];

   /* --- Submit the JCL and parameters for batch execution ---*/

  PW0YS-70011();

end // end PW0Y-70010

// Submit TEST ASN JCL
Function PW0Y-70020()
   /* ------------------------------------------------------------*/
   /* Create and Submit TEST MOVERS Download JCL.*/
   /* ------------------------------------------------------------*/

   /* --- Initialize the work areas and indexes to be used ---*/

  set TA6REC empty; /* Subroutine work area*/
  set PW0YW11 empty; /* Initialize JCL work area*/

  PW0YW11.TA3APLID = TA3REC.TA3APLID;
  TA6REC.TA6INDEX = 1; /* Initialize jcl table index*/
  PW0YW11.PW0YWIDX2 = 1; /* Initialize ws index*/

   /* --- Format JCL and parameters into the subroutine work area ---*/

  while (PW0YTT1.TARJCL[PW0YWIDX2] != "/*EOF") /* Until end of table*/

    if (PW0YTT1.TARTYPE[PW0YWIDX2] == "J")
      PW0YW11.PW0YW-JOB-CARD = PW0YTT1.TARJCL[PW0YWIDX2];
      PW0YW11.PW0YW-XWHCDJ = PW0YW01.XWHCD;
      TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-JOB-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    if (PW0YTT1.TARTYPE[PW0YWIDX2] == "N")
      TA6REC.TARJCL[TA6INDEX] = PW0YTT1.TARJCL[PW0YWIDX2];
      TA6REC.TARTYPE[TA6INDEX] = "N";
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    if (PW0YTT1.TARTYPE[PW0YWIDX2] == "1")
      if (PW0YW01.XWHCD == "02"
       || PW0YW01.XWHCD == "04"
       || PW0YW01.XWHCD == "07")
      else
        PW0YW11.PW0YW-OUTPUT-CARD = PW0YTT1.TARJCL[PW0YWIDX2];
        if (PW0YW-OUTPUT-LIT == "OUTPUT")
          PW0YW11.PW0YW-OUTPUT-RMT = "950";
        end
        TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-OUTPUT-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (PW0YTT1.TARTYPE[PW0YWIDX2] == "W")
      PW0YW11.PW0YW-WHSE-CARD = PW0YTT1.TARJCL[PW0YWIDX2];
      PW0YW11.PW0YW-XWHCDW = PW0YW01.XWHCD;
      TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-WHSE-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    if (PW0YTT1.TARTYPE[PW0YWIDX2] == "R")
      PW0YW11.PW0YW-SYSTSIN-CARD = PW0YTT1.TARJCL[PW0YWIDX2];
      if (TA3REC.TA3RGNID == "04" /* MVSDEVL*/
       || TA3REC.TA3RGNID == "08")
        PW0YW11.PW0YW-DSN-VALUE = "T"; /* DSNT Region*/
      else
        if (TA3REC.TA3RGNID == "02")
          PW0YW11.PW0YW-DSN-VALUE = "D"; /* DSND Region*/
        else
          if (TA3REC.TA3RGNID == "05")
            PW0YW11.PW0YW-DSN-VALUE = "F"; /* DSNF Region*/
          else
            if (TA3REC.TA3RGNID == "06")
              PW0YW11.PW0YW-DSN-VALUE = "Y"; /* DSNY Region*/
            else
              PW0YW11.PW0YW-DSN-VALUE = "T"; /* DSNT Region default*/
            end
          end
        end
      end
      TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-SYSTSIN-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    if (PW0YTT1.TARTYPE[PW0YWIDX2] == "T")
      PW0YW11.PW0YW-TYPE-CARD = PW0YTT1.TARJCL[PW0YWIDX2];
      if (TA3REC.TA3RGNID == "04" /* MVSDEVL*/
       || TA3REC.TA3RGNID == "08")
        PW0YW11.PW0YW-TYPE-VALUE = "T"; /* DSNT Region*/
      else
        if (TA3REC.TA3RGNID == "02")
          PW0YW11.PW0YW-TYPE-VALUE = "D"; /* DSND Region*/
        else
          if (TA3REC.TA3RGNID == "05")
            PW0YW11.PW0YW-TYPE-VALUE = "T"; /* DSNF Region*/
          else
            if (TA3REC.TA3RGNID == "06")
              PW0YW11.PW0YW-TYPE-VALUE = "Y"; /* DSNY Region*/
            else
              PW0YW11.PW0YW-TYPE-VALUE = "T"; /* DSNT Region default*/
            end
          end
        end
      end
      TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-TYPE-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    if (PW0YTT1.TARTYPE[PW0YWIDX2] == "Q")
      PW0YW11.PW0YW-AZ153D-PARM-CARD = PW0YTT1.TARJCL[PW0YWIDX2];
      PW0YW11.PW0YW-AZ153D-PARM-TRAN-ID = "PW0Y";
      PW0YW11.PW0YW-AZ153D-PARM-WHSE-CD = PW0YW01.XWHCD;
      PW0YW11.PW0YW-AZ153D-PARM-BILL-OF-LADING = PW0YW01.PK1BLLAD;
      PW0YW11.PW0YW-AZ153D-PARM-BOL-SUB-NBR = PW0YW01.SR2BLLSU;
      PW0YW11.PW0YW-AZ153D-PARM-MOVERS-STAT-CD = "03";
      TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-AZ153D-PARM-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    if (PW0YTT1.TARTYPE[PW0YWIDX2] == "F")
      if (PW0YW01.XWHCD == "02"
       || PW0YW01.XWHCD == "04"
       || PW0YW01.XWHCD == "07"
       || PW0YW01.XWHCD == "42")
        PW0YW11.PW0YW-FTP-CARD = PW0YTT1.TARJCL[PW0YWIDX2];
        if (PW0YW11.PW0YW-FTP-LIT == "TARGET")
          if (PW0YW01.XWHCD == "02"
           || PW0YW01.XWHCD == "04"
           || PW0YW01.XWHCD == "07")
            PW0YW11.PW0YW-FTP-TARGET = "camware";
          end
          if (PW0YW01.XWHCD == "42")
            PW0YW11.PW0YW-FTP-TARGET = "SCARBORO-SVR-16";
          end
        end
        if (PW0YW11.PW0YW-FTP-LIT == "FTPPAR")
          PW0YW11.PW0YW-FTPPARMS-WHSE-CD = PW0YW01.XWHCD;
        end
        TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-FTP-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end
    if (PW0YTT1.TARTYPE[PW0YWIDX2] == "S") /* RSH statements*/
      if (PW0YW01.XWHCD == "02"
       || PW0YW01.XWHCD == "04"
       || PW0YW01.XWHCD == "07")
        PW0YW11.PW0YW-RSH-CARD = PW0YTT1.TARJCL[PW0YWIDX2];
        if (PW0YW11.PW0YW-RSH-LIT == "TAR")
          PW0YW11.PW0YW-RSH-TARGET = "camware";
        end
        if (PW0YW11.PW0YW-RSH-LIT == "CMD")
          PW0YW11.PW0YW-RSH-CMD-WHSE-CD = PW0YW01.XWHCD;
        end
        TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-RSH-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (PW0YTT1.TARTYPE[PW0YWIDX2] == " ") /* no tartype*/
      TA6REC.TARJCL[TA6INDEX] = PW0YTT1.TARJCL[PW0YWIDX2];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    PW0YW11.PW0YWIDX2 = PW0YW11.PW0YWIDX2 + 1;

  end

  TA6REC.TARJCL[TA6INDEX] = PW0YTT1.TARJCL[PW0YWIDX2];

   /* --- Submit the JCL and parameters for batch execution ---*/

  PW0YS-70011();

end // end PW0Y-70020

// Submit PROD ASN JCL
Function PW0Y-71010()
   /* ------------------------------------------------------------*/
   /* Clear JCL array rows*/
   /* ------------------------------------------------------------*/
  move " " to TA6REC.TA6ROW[1] for all;

   /* ------------------------------------------------------------*/
   /* Initialize index*/
   /* ------------------------------------------------------------*/
  TA6REC.TA6INDEX = 1;
  PW0YW11.PW0YWIDX2 = 1;

   /* ------------------------------------------------------------*/
   /* Build download record*/
   /* ------------------------------------------------------------*/

  PW0YW99.PW0YW-RECD-TYPE-A = "A";

  PW0YW99.XWHCD = PW0YW01.XWHCD;
  PW0YW99.PW0YW-ORIG-CRTN = PW0YW01.PKDNCSQN;
  PW0YW99.PW0YW-NEW-CRTN = PW0YW01.PKDNCSQN;
  PW0YW99.PW0YW-NEW-CRTN-WT = PW0YW00.PW0YW-NEW-CRTN-WT;
  PW0YW99.PW0YW-OP1CUOID = PW0YW01.OP1CUOID;
  PW0YW99.PW0YW-OP1NORID = PW0YW01.OP1NORID;
  PW0YW99.PW0YW-TSIPLNBR = PW0YW01.TSIPLNBR;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* (moving each line of JCL into TA6REC working storage)*/
   /* ------------------------------------------------------------*/

  while (PW0YTP2.TARJCL[PW0YWIDX2] != "/*EOF") /* Until end of table*/

    if (PW0YTP2.TARTYPE[PW0YWIDX2] == "J") /* Jobcard*/
      PW0YW11.PW0YW-JOB-CARD = PW0YTP2.TARJCL[PW0YWIDX2];
      PW0YW11.PW0YW-XWHCDJ = PW0YW01.XWHCD;
      TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-JOB-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (PW0YTP2.TARTYPE[PW0YWIDX2] == "1") /* output statement*/
      if (PW0YW01.XWHCD == "02"
       || PW0YW01.XWHCD == "04"
       || PW0YW01.XWHCD == "07"
       || PW0YW01.XWHCD == "42") /* Deactivate Movers for Canada*/
      else
        PW0YW11.PW0YW-OUTPUT-CARD = PW0YTP2.TARJCL[PW0YWIDX2];
        if (PW0YW-OUTPUT-LIT == "OUTPUT")
   /* IF PW0YW01.XWHCD EQ '42'; /* Deactivate Movers for Canada*/
   /* MOVE '230' TO PW0YW11.PW0YW-OUTPUT-RMT;*/
   /* END;*/
          if (PW0YW01.XWHCD == "51")
            PW0YW11.PW0YW-OUTPUT-RMT = "123";
          end
        end
        TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-OUTPUT-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (PW0YTP2.TARTYPE[PW0YWIDX2] == "W") /* whse field*/
      PW0YW11.PW0YW-WHSE-CARD = PW0YTP2.TARJCL[PW0YWIDX2];
      PW0YW11.PW0YW-XWHCDW = PW0YW01.XWHCD;
      TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-WHSE-CARD; /* JCL*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (PW0YTP2.TARTYPE[PW0YWIDX2] == "P") /* pk1770 parm statement*/
      TA6REC.TARJCL[TA6INDEX] = PW0YW99.PW0YW-PK1770-PARM-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (PW0YTP2.TARTYPE[PW0YWIDX2] == "Q") /* az153d parm statement*/
      PW0YW11.PW0YW-AZ153D-PARM-CARD = " ";
      PW0YW11.PW0YW-AZ153D-PARM-TRAN-ID = "PW0Y";
      PW0YW11.PW0YW-AZ153D-PARM-WHSE-CD = PW0YW01.XWHCD;
      PW0YW11.PW0YW-AZ153D-PARM-BILL-OF-LADING = PW0YW01.PK1BLLAD;
      PW0YW11.PW0YW-AZ153D-PARM-BOL-SUB-NBR = PW0YW01.SR2BLLSU;
      PW0YW11.PW0YW-AZ153D-PARM-MOVERS-STAT-CD = "01";
      TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-AZ153D-PARM-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (PW0YTP2.TARTYPE[PW0YWIDX2] == "F") /* ftp statements*/
      if (PW0YW01.XWHCD == "02"
       || PW0YW01.XWHCD == "04"
       || PW0YW01.XWHCD == "07"
       || PW0YW01.XWHCD == "42")

        PW0YW11.PW0YW-FTP-CARD = PW0YTP2.TARJCL[PW0YWIDX2];

        if (PW0YW11.PW0YW-FTP-LIT == "TARGET")
          if (PW0YW01.XWHCD == "02")
            PW0YW11.PW0YW-FTP-TARGET = "grsun1";
          end
          if (PW0YW01.XWHCD == "04")
            PW0YW11.PW0YW-FTP-TARGET = "memfware";
          end
          if (PW0YW01.XWHCD == "07")
            PW0YW11.PW0YW-FTP-TARGET = "wilfware";
          end
          if (PW0YW01.XWHCD == "42")
            PW0YW11.PW0YW-FTP-TARGET = "SCARBORO-SVR-34";
          end
        end

        if (PW0YW11.PW0YW-FTP-LIT == "FTPPAR")
          PW0YW11.PW0YW-FTPPARMS-WHSE-CD = PW0YW01.XWHCD;
        end

        TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-FTP-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (PW0YTP2.TARTYPE[PW0YWIDX2] == "S") /* RSH statements*/
      if (PW0YW01.XWHCD == "02"
       || PW0YW01.XWHCD == "04"
       || PW0YW01.XWHCD == "07")

        PW0YW11.PW0YW-RSH-CARD = PW0YTP2.TARJCL[PW0YWIDX2];
        if (PW0YW11.PW0YW-RSH-LIT == "TAR")
          if (PW0YW01.XWHCD == "02")
            PW0YW11.PW0YW-RSH-TARGET = "grsun1";
          end
          if (PW0YW01.XWHCD == "04")
            PW0YW11.PW0YW-RSH-TARGET = "memfware";
          end
          if (PW0YW01.XWHCD == "07")
            PW0YW11.PW0YW-RSH-TARGET = "wilfware";
          end
        end

        if (PW0YW11.PW0YW-RSH-LIT == "CMD")
          PW0YW11.PW0YW-RSH-CMD-WHSE-CD = PW0YW01.XWHCD;
        end
        TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-RSH-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (PW0YTP2.TARTYPE[PW0YWIDX2] == " ")
      TA6REC.TARJCL[TA6INDEX] = PW0YTP2.TARJCL[PW0YWIDX2]; /* JCL*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    PW0YW11.PW0YWIDX2 = PW0YW11.PW0YWIDX2 + 1;

  end

  TA6REC.TARJCL[TA6INDEX] = PW0YTP2.TARJCL[PW0YWIDX2]; /* JCL*/

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution*/
   /* using TA0P subprogram.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PW0YW00.XXXLOCID = "320"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PW0YW00.PW0YW-JOB-SUB-SW = "Y";

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
  end

  return; /* Exit to display map*/

end // end PW0Y-71010

// Submit TEST ASN JCL
Function PW0Y-71020()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

   /* --- Show module identification ---*/

  PW0YW00.XXXLOCID = "710"; /* Module identification*/

   /* ------------------------------------------------------------*/
   /* Clear JCL array rows*/
   /* ------------------------------------------------------------*/
  move " " to TA6REC.TA6ROW[1] for all;

   /* ------------------------------------------------------------*/
   /* Initialize index*/
   /* ------------------------------------------------------------*/
  TA6REC.TA6INDEX = 1;
  PW0YW11.PW0YWIDX2 = 1;

   /* ------------------------------------------------------------*/
   /* Build download record*/
   /* ------------------------------------------------------------*/

  PW0YW99.PW0YW-RECD-TYPE-A = "A";

  PW0YW99.XWHCD = PW0YW01.XWHCD;
  PW0YW99.PW0YW-ORIG-CRTN = PW0YW01.PKDNCSQN;
  PW0YW99.PW0YW-NEW-CRTN = PW0YW01.PKDNCSQN;
  PW0YW99.PW0YW-NEW-CRTN-WT = PW0YW00.PW0YW-NEW-CRTN-WT;
  PW0YW99.PW0YW-OP1CUOID = PW0YW01.OP1CUOID;
  PW0YW99.PW0YW-OP1NORID = PW0YW01.OP1NORID;
  PW0YW99.PW0YW-TSIPLNBR = PW0YW01.TSIPLNBR;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* (moving each line of JCL into TA6REC working storage)*/
   /* ------------------------------------------------------------*/

  while (PW0YTT2.TARJCL[PW0YWIDX2] != "/*EOF") /* Until end of table*/

    if (PW0YTT2.TARTYPE[PW0YWIDX2] == "J") /* whse field*/
      PW0YW11.PW0YW-JOB-CARD = PW0YTT2.TARJCL[PW0YWIDX2];
      PW0YW11.PW0YW-XWHCDJ = PW0YW01.XWHCD;
      TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-JOB-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    if (PW0YTT2.TARTYPE[PW0YWIDX2] == "N")
      TA6REC.TARJCL[TA6INDEX] = PW0YTT2.TARJCL[PW0YWIDX2]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = "N";
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (PW0YTT2.TARTYPE[PW0YWIDX2] == "W") /* whse field*/
      PW0YW11.PW0YW-WHSE-CARD = PW0YTT2.TARJCL[PW0YWIDX2];
      PW0YW11.PW0YW-XWHCDW = PW0YW01.XWHCD;
      TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-WHSE-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    if (PW0YTT2.TARTYPE[PW0YWIDX2] == "P") /* dwnld record*/
      TA6REC.TARJCL[TA6INDEX] = PW0YW99.PW0YW-PK1770-PARM-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    if (PW0YTT2.TARTYPE[PW0YWIDX2] == "1") /* Parameters statement*/
      if (PW0YW01.XWHCD == "02"
       || PW0YW01.XWHCD == "04"
       || PW0YW01.XWHCD == "07")
      else
        PW0YW11.PW0YW-OUTPUT-CARD = PW0YTT2.TARJCL[PW0YWIDX2];

        if (PW0YW-OUTPUT-LIT == "OUTPUT")
          PW0YW11.PW0YW-OUTPUT-RMT = "950";
        end

        TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-OUTPUT-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (PW0YTT2.TARTYPE[PW0YWIDX2] == "Q")
      PW0YW11.PW0YW-AZ153D-PARM-CARD = " ";
      PW0YW11.PW0YW-AZ153D-PARM-TRAN-ID = "PW0Y";
      PW0YW11.PW0YW-AZ153D-PARM-WHSE-CD = PW0YW01.XWHCD;
      PW0YW11.PW0YW-AZ153D-PARM-BILL-OF-LADING = PW0YW01.PK1BLLAD;
      PW0YW11.PW0YW-AZ153D-PARM-BOL-SUB-NBR = PW0YW01.SR2BLLSU;
      PW0YW11.PW0YW-AZ153D-PARM-MOVERS-STAT-CD = "01";
      TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-AZ153D-PARM-CARD;

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    if (PW0YTT2.TARTYPE[PW0YWIDX2] == "T")
      PW0YW11.PW0YW-TYPE-CARD = PW0YTT2.TARJCL[PW0YWIDX2];
      if (TA3REC.TA3RGNID == "04" /* MVSDEVL*/
       || TA3REC.TA3RGNID == "08")
        PW0YW11.PW0YW-TYPE-VALUE = "T";
      else
        if (TA3REC.TA3RGNID == "02")
          PW0YW11.PW0YW-TYPE-VALUE = "D";
        else
          if (TA3REC.TA3RGNID == "05")
            PW0YW11.PW0YW-TYPE-VALUE = "T";
          else
            if (TA3REC.TA3RGNID == "06")
              PW0YW11.PW0YW-TYPE-VALUE = "Y";
            else
              PW0YW11.PW0YW-TYPE-VALUE = "T";
            end
          end
        end
      end

      TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-TYPE-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    if (PW0YTT2.TARTYPE[PW0YWIDX2] == "R")
      PW0YW11.PW0YW-SYSTSIN-CARD = PW0YTT2.TARJCL[PW0YWIDX2];
      if (TA3REC.TA3RGNID == "04" /* MVSDEVL*/
       || TA3REC.TA3RGNID == "08")
        PW0YW11.PW0YW-DSN-VALUE = "T";
      else
        if (TA3REC.TA3RGNID == "02")
          PW0YW11.PW0YW-DSN-VALUE = "D";
        else
          if (TA3REC.TA3RGNID == "05")
            PW0YW11.PW0YW-DSN-VALUE = "F";
          else
            if (TA3REC.TA3RGNID == "06")
              PW0YW11.PW0YW-DSN-VALUE = "Y";
            else
              PW0YW11.PW0YW-DSN-VALUE = "T";
            end
          end
        end
      end

      TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-SYSTSIN-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    if (PW0YTT2.TARTYPE[PW0YWIDX2] == "F") /* FTP statements*/
      if (PW0YW01.XWHCD == "02"
       || PW0YW01.XWHCD == "04"
       || PW0YW01.XWHCD == "07"
       || PW0YW01.XWHCD == "42")

        PW0YW11.PW0YW-FTP-CARD = PW0YTT2.TARJCL[PW0YWIDX2];
        if (PW0YW11.PW0YW-FTP-LIT == "TARGET")
          if (PW0YW01.XWHCD == "02"
           || PW0YW01.XWHCD == "04"
           || PW0YW01.XWHCD == "07")

            PW0YW11.PW0YW-FTP-TARGET = "camware";
          end

          if (PW0YW01.XWHCD == "42")
            PW0YW11.PW0YW-FTP-TARGET = "SCARBORO-SVR-16";
          end
        end

        if (PW0YW11.PW0YW-FTP-LIT == "FTPPAR")
          PW0YW11.PW0YW-FTPPARMS-WHSE-CD = PW0YW01.XWHCD;
        end
        TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-FTP-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (PW0YTT2.TARTYPE[PW0YWIDX2] == "S") /* RSH statements*/
      if (PW0YW01.XWHCD == "02"
       || PW0YW01.XWHCD == "04"
       || PW0YW01.XWHCD == "07")

        PW0YW11.PW0YW-RSH-CARD = PW0YTT2.TARJCL[PW0YWIDX2];
        if (PW0YW11.PW0YW-RSH-LIT == "TAR")
          PW0YW11.PW0YW-RSH-TARGET = "camware";
        end
        if (PW0YW11.PW0YW-RSH-LIT == "CMD")
          PW0YW11.PW0YW-RSH-CMD-WHSE-CD = PW0YW01.XWHCD;
        end
        TA6REC.TARJCL[TA6INDEX] = PW0YW11.PW0YW-RSH-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (PW0YTT2.TARTYPE[PW0YWIDX2] == " ")
      TA6REC.TARJCL[TA6INDEX] = PW0YTT2.TARJCL[PW0YWIDX2]; /* JCL*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    PW0YW11.PW0YWIDX2 = PW0YW11.PW0YWIDX2 + 1;

  end

  TA6REC.TARJCL[TA6INDEX] = PW0YTT2.TARJCL[PW0YWIDX2]; /* JCL*/

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution*/
   /* using TA0P subprogram.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  PW0YW00.XXXLOCID = "330"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PW0YW00.PW0YW-JOB-SUB-SW = "Y";
  end

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
  end

  return; /* Return to previous process*/

end // end PW0Y-71020

// application initialization
Function PW0Y000()
   /* ------------------------------------------------------------*/
   /* This procedure is intended to be performed as the first*/
   /* statement in an application.  It determines whether the*/
   /* application was entered via the menu system.  The PICKING*/
   /* work record is formatted upon initial application entry.*/
   /* Warehouse code is validated and the warehouse abbreviation*/
   /* is obtained.  SQL system control fields are initialized.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

  XSSEGTR(); /* SET SEGMENTED TRANS ID*/

  if (COMMAREA.CAFROMAP != COMMAREA.CACURRAP) /* Application has changed*/

    if (COMMAREA.CAFRMSYS == "PK" /* Came from within the PICKING system*/
     || COMMAREA.CAFRMSYS == "PW") /* or the Wilsonville subsystem*/

      PKWREC.PKWGRPLV = COMMAREA.CAUSERA; /* Restore work record*/

    else

      set PKWREC empty; /* Clear work record area*/
      PKWREC.XWHCD = COMMAREA.XWHCD; /* Set initial warehouse code*/

    end

    VGVar.handleHardIOErrors = 1; /* Return all file errors*/
    converseVar.commitOnConverse = 1; /* Commit on every converse*/

  end

  XPPK002(); /* Obtain warehouse abbreviation*/

end // end PW0Y000

// Main Process
Function PW0Y001()
   /* ------------------------------------------------------------*/
   /* This is the main process of the application PW0Y.*/
   /* Processing always returns to the top of this process and*/
   /* falls through subordinate processes until an error is*/
   /* found or a valid request is processed. The processing*/
   /* sequence is as follows:*/

   /* 1) Retrieve the data to be displayed.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit and*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW0Y100(); /* Retrieve data to be displayed*/

  PW0Y200(); /* Format and display the map*/

  PW0Y300(); /* Check attention identifier*/

  PW0Y400(); /* Reset fields to normal intensity*/

  PW0Y500(); /* Verify the entered data*/

  PW0Y600(); /* Process valid input request*/

end // end PW0Y001

// Retrieve Data to be displayed
Function PW0Y100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PW0YW00.PW0YWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

  if (PW0YW00.PW0YWNKS == "Y") /* new key*/

    if (PW0YW00.PW0YWNDS == "Y") /* maintenance has been done*/
                                  /* display modified record*/
    else
                                  /* display modified record*/
      PW0YS-NEW-VSPLIT01(); /* retrieve new packing list item recs*/

    end

  end

  if (PW0YW00.PW0YWPLS == "N") /* packing list item not found*/

    return; /* return to flow*/

  end

   /* ------------------------------------------------------------*/
   /* Purge temporary storage once next product is found.*/
   /* ------------------------------------------------------------*/

  PW0YS01(); /* purge temporary storage*/

   /* ------------------------------------------------------------*/
   /* A packing list item row was found and so set up the keys*/
   /* in the working storage record pw0yW01.*/
   /* ------------------------------------------------------------*/

  PW0YS-MV-PWPREC-01(); /* set up the keys in w01*/

   /* ------------------------------------------------------------*/
   /* Get the packing list header record.*/
   /* ------------------------------------------------------------*/

  set PWOREC empty; /* initialise database rows*/
  set SR1REC empty;
  set SR2REC empty;
  set VAZHDR01 empty;
  set VAZORD01 empty;
  set VAZCTN01 empty;
  set VAZCIT01 empty;
  set VAZCSZ01 empty;

  PWOREC.XWHCD = PW0YW01.XWHCD; /* whse cd*/
  PWOREC.TSIPLNBR = PW0YW01.TSIPLNBR; /* packing list nbr*/
  PWOREC.OP1PARTN = PW0YW01.OP1PARTN; /* order part char*/
  PWOREC.OP1CUOID = PW0YW01.OP1CUOID; /* customer order id*/
  PWOREC.OP1NORID = PW0YW01.OP1NORID; /* nike ord id*/

  PW0YS-VSPLHD01-S(); /* get packing list hdr row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* packing list hdr found*/

                                  /* store BOL details in w/s*/
    PW0YW01.PK1BLLAD = PWOREC.PK1BLLAD; /* BOL nbr*/
    PW0YW01.SR2BLLSU = PWOREC.SR2BLLSU; /* BOL sub nbr*/

                                               /* save key values*/
    VAZORD01.PK-BILL-OF-LADING = PWOREC.PK1BLLAD;
    VAZORD01.PK-BOL-SUB-NBR = PWOREC.SR2BLLSU;

    VAZCTN01.PK-BILL-OF-LADING = PWOREC.PK1BLLAD;
    VAZCTN01.PK-BOL-SUB-NBR = PWOREC.SR2BLLSU;

    VAZCIT01.PK-BILL-OF-LADING = PWOREC.PK1BLLAD;
    VAZCIT01.PK-BOL-SUB-NBR = PWOREC.SR2BLLSU;

    VAZCSZ01.PK-BILL-OF-LADING = PWOREC.PK1BLLAD;
    VAZCSZ01.PK-BOL-SUB-NBR = PWOREC.SR2BLLSU;

   /* ******** KIN#58226 CHANGES START*/

  /*  IF PWOREC.XDVCD EQ '02';       /* nil*/
  /*    MOVE 451 TO EZEMNO;          /* Make exception in TS07*/
  /*    MOVE '100 ' TO PW0YW00.XXXLOCID;*/
  /*    MOVE 'N' TO PW0YW01.CACHGFL;*/
  /*    SET PW0YW01 EMPTY;*/
  /*    MOVE PW0YM001.XWHCD TO PW0YW01.XWHCD;*/
  /*    MOVE PW0YM001.PW0YMCTN TO PW0YW01.PW0YWCTN;*/
  /*    MOVE PW0YM001.PW0YMTOT TO PW0YW01.PW0YWTOT;*/
  /*    EZERTN();*/
  /*  END;*/

   /* ******** KIN#58226 CHANGES END*/

                                  /* populate asn header keys*/
    VAZHDR01.XWH-WHSE-CD = PW0YW01.XWHCD; /* whse cd*/
    VAZHDR01.PK-BILL-OF-LADING = PWOREC.PK1BLLAD; /* BOL nbr*/
    VAZHDR01.PK-BOL-SUB-NBR = PWOREC.SR2BLLSU; /* BOL sub nbr*/

    PW0YS-VAZHDR01-S(); /* get asn header record*/

    /* ------------------------------------------------------------*/
    /* If the advance ship notice has been sent, indicate an error.*/
    /* ------------------------------------------------------------*/

    if (PW0YW00.PW0YWMSG != 518)
      if (VAZHDR01.AZ-ASN-STAT-CD == "ST"
       || VAZHDR01.AZ-ASN-STAT-CD == "RL"
       || VAZHDR01.AZ-ASN-STAT-CD == "XL")

        PW0YW00.XXXLOCID = "100 "; /* Error location*/
        converseLib.validationFailed(389); /* Advance ship notice was sent*/
        PW0YW01.CACHGFL = "N";
        return;

      end
    end

                                   /* populate ship rec hdr keys*/
    SR1REC.XWHCD = PW0YW01.XWHCD; /* whse cd*/
    SR1REC.PK1PKSCH = PW0YW01.PK1PKSCH; /* picking schedule*/

    PW0YS-VSRHDR01-S(); /* get ship rec batch sched hdr*/

    /* ------------------------------------------------------------*/
    /* if the ship rec batch status is not E, P, or H, then error*/
    /* ------------------------------------------------------------*/

    if (SR1REC.SR1BTST == "R"
     || SR1REC.SR1BTST == "B")
      converseLib.validationFailed(382); /* invalid schedule status*/
      PW0YW00.XXXLOCID = "100 ";
      PW0YW01.CACHGFL = "N";
      return;
    end

  else
                                  /* packing list hdr not found*/
    converseLib.validationFailed(375); /* no data for display*/
    PW0YW00.XXXLOCID = "100 ";
    return;
  end

                                  /* populate ship rec order key*/
  SR2REC.XWHCD = PW0YW01.XWHCD; /* whse cd*/
  SR2REC.PK1PKSCH = PW0YW01.PK1PKSCH; /* pick schedule nbr*/
  SR2REC.OP1CUOID = PW0YW01.OP1CUOID; /* customer order id*/
  SR2REC.OP1NORID = PW0YW01.OP1NORID; /* nike order id*/

  SR2REC.OP1NTMAL = 0; /* nbr of times alloc*/

  PW0YS-VSRORD01-S(); /* get the ship rec order*/

  if (SQLCA.VAGen_SQLCODE == 0)

    if (SR2REC.SR-STOP-ORD-SHP-FL == "Y") /* stop ship*/

      converseLib.validationFailed(464); /* Stop ship cannot be changed*/
      PW0YW00.XXXLOCID = "100 ";
      PW0YW01.CACHGFL = "N";
      set PW0YW01 empty;
      PW0YW01.XWHCD = PW0YM001.XWHCD;
      PW0YW01.PW0YWCTN = PW0YM001.PW0YMCTN;
      PW0YW01.PW0YWTOT = PW0YM001.PW0YMTOT;
      return;
    end
  end

  PW0YS-LOAD-SIZE-TS(); /* Load size data to temp storage*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW0YW00.XXXTSPAG = 1;
  PW0YW00.PW0YWSWR = "N"; /* Request for data switch*/
  PW0YW01.CACHGFL = "Y"; /* data is available for change*/

end // end PW0Y100

// Format and converse the map
Function PW0Y200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PW0YW00.PW0YWMSG = converseVar.validationMsgNum; /* Message number*/
  else
    if (PW0YW00.PW0YW-INFO-MSG != 0)
      PW0YW00.PW0YWMSG = PW0YW00.PW0YW-INFO-MSG;
    end
  end

  if (PW0YREC.PW0YW-RETURN-IND == "Y") /* Returning from PW01*/
    if (PW0YREC.PW0YW-PW0YWMSG == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PW0YREC.PW0YW-PW0YWMSG);
    end
    PW0YW00.PW0YWMSG = converseVar.validationMsgNum; /* Message number*/

    PW0YREC.PW0YW-PW0YWMSG = 0;
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PW0YW00.PW0YWSWR == "Y"           /* Obtain data failed*/
   || converseVar.validationMsgNum == 0 /* or no error found*/
   || PW0YREC.PW0YW-RETURN-IND == "Y")  /* returned from PW01*/

    if (PW0YREC.PW0YW-RETURN-IND == "Y")
      PW0YREC.PW0Y-PW-PASS-GRP = " ";
      COMMAREA.CA-USER-WORKAREA-4K = PW0YREC.PW0Y-COMMON-REC;
    end

    if (PW0YW00.PW0YWSWF == "Y") /* Map must be formatted*/

      PW0Y210(); /* Format the data on the map*/

    else
      PW0YW00.PW0YWSWF = "Y";

    end

  end

   /* ------------------------------------------------------------*/
   /* Format tote number fields.*/
   /* ------------------------------------------------------------*/

  if (PW0YM001.XWHCD == "51"
   || PW0YM001.XWHCD == "42") /* Apparel warehouse*/
    PW0YM001.PW0YM-STUB = "TOTE: ";
    set PW0YM001.PW0YM-STUB initialAttributes;
    if (converseVar.validationMsgNum == 0)
      set PW0YM001.PW0YMTOT initialAttributes;
    end
  else /* Do not display tote*/
    PW0YM001.PW0YM-STUB = " ";
    set PW0YM001.PW0YM-STUB skip, invisible;
    set PW0YM001.PW0YMTOT skip, invisible;
  end

   /* --- set up Map Date and Commarea fields ---*/
  PW0YM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PW0YM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW0YM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  if (PW0YW00.PW0YWMSG != 0) /* Message to display*/
    if (PW0YW00.PW0YWMSG == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PW0YW00.PW0YWMSG);
    end /* error message number*/
    PW0YM001.XXXLOCID = PW0YW00.XXXLOCID; /* Module identification*/
    set PW0YM001 alarm; /* Indicate sound alarm*/
  end

  converse PW0YM001 ;

   /* --- Reset Detail Record Changed Indicator ---*/
  PW0YW00.PW0YWNDS = "N";

   /* --- Clear the message fields ---*/
  PW0YW00.XXXLOCID = " "; /* Module identification*/
  PW0YW00.PW0YWMSG = 0;
  PW0YW00.PW0YW-INFO-MSG = 0;

   /* --- Save the FAST PATH information ---*/
  COMMAREA.CATOAP = PW0YM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW0YM001.CAITEM; /* Application data*/

end // end PW0Y200

// Format Map Display Data
Function PW0Y210()
   /* ------------------------------------------------------------*/
   /* Initialise Map PW0YM001*/
   /* ------------------------------------------------------------*/

  set PW0YM001 initial; /* M001 input/ouput area*/

   /* ------------------------------------------------------------*/
   /* Format PW0YM001 using key data from PW0YMW01*/
   /* ------------------------------------------------------------*/

  PW0YM001.XWHCD = PW0YW01.XWHCD; /* warehouse code*/
  PW0YM001.XWHABRV = PW0YW01.XWHABRV; /* warehous abrv desc*/

   /* --- Tote number ---*/
  if (PW0YW01.PWPTOSQN == 0)
    PW0YM001.PW0YMTOT = PW0YW01.PW0YWTOT;
  else
    PW0YM001.PW0YMTOT = PW0YW01.PWPTOSQN;
  end

   /* --- Carton number ---*/
  if (PW0YW01.PKDNCSQN == 0)
    PW0YM001.PW0YMCTN = PW0YW01.PW0YWCTN;
  else
    PW0YM001.PW0YMCTN = PW0YW01.PKDNCSQN;
  end

   /* --- Packing List number ---*/
  PW0YM001.PW0YMPLN = PW0YW01.TSIPLNBR;

   /* --- One of One flag ---*/
  if (PW0YW01.PWP1OF1F == "Y")
    PW0YM001.PW0YM1O1 = "1 OF 1";
  else
    PW0YM001.PW0YM1O1 = " ";
  end

   /* --- Set up PF Key Definitions ---*/
  set PW0YM001.PW0YM-PFKEY07 initialAttributes;
  set PW0YM001.PW0YM-PFKEY08 initialAttributes;

  PW0YM001.PW0YM-TITLE = "MAINTENANCE MODE";

  set PW0YM001.PW0YM-PFKEY11 initialAttributes;
  set PW0YM001.PW0YM-PFKEY13 initialAttributes;
  set PW0YM001.PW0YM-PFKEY15 initialAttributes;

  PW0YM001.PW0YMSCH = PW0YW01.PK1PKSCH;
  PW0YM001.PW0YMPKS = PW0YW01.SWCLNENB;
  PW0YM001.PW0YMORD = PW0YW01.OP1CUOID;
  PW0YM001.PW0YMSUB = PW0YW01.OP1NORID;
  PW0YM001.PW0YMPRT = PW0YW01.PW0YWPRT;
  PW0YM001.PK1BLLAD = PW0YW01.PK1BLLAD;
   /* lpattn changes starts*/
  PW0YM001.SR2BLLSU = PW0YW01.SR2BLLSU;
  if (PW0YW01.PK1BLLAD == 0)
    set PW0YM001.SR2BLLSU invisible, skip;
  else
    set PW0YM001.SR2BLLSU skip;
  end
   /* lpattn changes ends*/

  if (PW0YW01.XGPCD == " ")
    PW0YM001.XGPCD = PW0YW01.PW0YWGPC;
  else
    PW0YM001.XGPCD = PW0YW01.XGPCD; /* gpc code*/
  end

  if (PW0YW01.SY1STNBR == " ")
    PW0YM001.SY1STNBR = PW0YW01.PW0YWSTY;
  else
    PW0YM001.SY1STNBR = PW0YW01.SY1STNBR;
  end

  if (PW0YW01.SY2CLRID == " ")
    PW0YM001.SY2CLRID = PW0YW01.PW0YWCLR; /* color id*/
  else
    PW0YM001.SY2CLRID = PW0YW01.SY2CLRID; /* color id*/
  end

  if (PW0YW01.XDMCD == " ")
    PW0YM001.XDMCD = PW0YW01.PW0YWDIM; /* dimension code*/
  else
    PW0YM001.XDMCD = PW0YW01.XDMCD; /* dimension code*/
  end

  PW0YM001.SY1SSTNM = PW0YW01.SY1SSTNM;

  if (PW0YW01.XQACD == " ")
    PW0YM001.XQACD = PW0YW01.PW0YWQUA; /* quality code*/
  else
    PW0YM001.XQACD = PW0YW01.XQACD; /* quality code*/
  end

  if (PW0YW01.PC2INSEG == " ")
    PW0YM001.PC2INSEG = PW0YW01.PW0YWISG;
  else
    PW0YM001.PC2INSEG = PW0YW01.PC2INSEG;
  end

  if (PW0YW01.XEGCD == " ")
    PW0YM001.XEGCD = PW0YW01.PW0YWEDF;
  else
    PW0YM001.XEGCD = PW0YW01.XEGCD;
  end

  if (PW0YW01.XPGCD == " ")
    PW0YM001.XPGCD = PW0YW01.PW0YWPKG;
  else
    PW0YM001.XPGCD = PW0YW01.XPGCD;
  end

  if (PW0YW01.XUMCD == " ")
    PW0YM001.XUMCD = PW0YW01.PW0YWUOM;
  else
    PW0YM001.XUMCD = PW0YW01.XUMCD;
  end

  if (PW0YW01.XUMCD == " ")
    PW0YM001.XOWCD = PW0YW01.PW0YWOGC;
  else
    PW0YM001.XOWCD = PW0YW01.XOWCD;
  end

   /* ----------------------------------------------------------------*/
   /* Determine where the cursor should be located*/
   /* ----------------------------------------------------------------*/
  if (PW0YW01.XWHCD == "51"
   || PW0YW01.XWHCD == "42")
    set PW0YM001.PW0YMTOT cursor;
  else
    set PW0YM001.PW0YMCTN cursor;
  end

   /* ------------------------------------------------------------*/
   /* If data has not been loaded bypass load map fields*/
   /* ------------------------------------------------------------*/

  if (PW0YW01.CACHGFL != "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* load "current" and "new" product information from t/s*/
   /* ------------------------------------------------------------*/

  PW0YS14(); /* read temporary storage*/

   /* ----------------------------------------------------------------*/
   /* fill detail lines for the data which exists*/
   /* ----------------------------------------------------------------*/
  PW0YW00.PW0YWIDX = 1;
  while (PW0YW00.PW0YWIDX <= PW0YW02.PW0YWNLD) /* process t/s*/

    PW0YM001.SY4IDDSC[PW0YWIDX] = PW0YW02.SY4IDDSC[PW0YWIDX];
    PW0YM001.PW0YMARZ[PW0YWIDX] = PW0YW02.PW0YWARZ[PW0YWIDX];
    PW0YM001.SL5LOCTN[PW0YWIDX] = PW0YW02.SL5LOCTN[PW0YWIDX];
    PW0YM001.PW0YMQPK[PW0YWIDX] = PW0YW02.PK1QTY[PW0YWIDX];
    PW0YM001.PW0YMQAL[PW0YWIDX] = PW0YW02.ALCQTY[PW0YWIDX];
    PW0YM001.PW0YMADJ[PW0YWIDX] = PW0YW02.PW0YWADJ[PW0YWIDX];

    set PW0YM001.SY4IDDSC[PW0YWIDX] skip;
    set PW0YM001.PW0YMARZ[PW0YWIDX] skip;
    set PW0YM001.SL5LOCTN[PW0YWIDX] skip;

    PW0YW00.PW0YWIDX = PW0YW00.PW0YWIDX + 1;

  end

end // end PW0Y210

// Check attention identifier
Function PW0Y300()
   /* ------------------------------------------------------------*/
   /* This process will check the Attention Identifier.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
                                   /* Clear all enterable fields*/
                                   /* and redisplay map*/
    converseLib.clearScreen();
     /* refresh map*/
    set PW0YW01 empty; /* header data*/

    PW0YW01.XWHCD = PKWREC.XWHCD;
    PW0YW01.XWHABRV = PKWREC.XWHABRV;

    PW0YW00.PW0YWSWR = "N"; /* request for data*/
    PW0YW00.PW0YWSWF = "Y"; /* format screen m001*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end
   /* -------------------------------------------------------------*/
   /* Check if warehouse code was modified.*/
   /* -------------------------------------------------------------*/

  if (PW0YM001.XWHCD is modified)
    PKWREC.XWHCD = PW0YM001.XWHCD;
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PW0YM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PW0YS01(); /* purge temp storage*/

      XSPKS01(); /* Exit to another application*/

      PW0YW00.PW0YWSWR = "N"; /* request for data*/
      PW0YW00.PW0YWSWF = "Y"; /* format screen m001*/

      set PW0YM001.CATOAP cursor, bold; /* Highlight*/

    else

      PW0YW00.XXXLOCID = "300"; /* Module identification*/
      converseLib.validationFailed(12); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PW0YM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PK0A"; /* Application find code*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0C"; /* Application find code*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "PK0C"; /* Application find code*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "PK0P"; /* Application find code*/
    end

    XSPKS01(); /* Exit to another application*/

    PW0YW00.PW0YWSWR = "N"; /* request for data*/
    PW0YW00.PW0YWSWF = "Y"; /* format screen m001*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5   
   && converseVar.eventKey not pf6   
   && converseVar.eventKey not pf7   
   && converseVar.eventKey not pf8   
   && converseVar.eventKey not pf11)

    PW0YW00.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(12); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

end // end PW0Y300

// Reset highlighted fields
Function PW0Y400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  set PW0YM001.XWHCD initialAttributes; /* warehouse code*/

  set PW0YM001.PW0YM-PFKEY07 initialAttributes;
  set PW0YM001.PW0YM-PFKEY08 initialAttributes;
  set PW0YM001.PW0YM-PFKEY11 initialAttributes;
  set PW0YM001.PW0YM-PFKEY13 initialAttributes;
  set PW0YM001.PW0YM-PFKEY15 initialAttributes;

  set PW0YM001.PW0YMCTN initialAttributes; /* carton nbr*/
  set PW0YM001.XGPCD initialAttributes; /* gpc code*/
  set PW0YM001.SY1STNBR initialAttributes; /* style nbr*/
  set PW0YM001.SY2CLRID initialAttributes; /* color id*/
  set PW0YM001.XDMCD initialAttributes; /* dimension code*/
  set PW0YM001.XQACD initialAttributes; /* quality code*/
  set PW0YM001.PC2INSEG initialAttributes;
  set PW0YM001.XEGCD initialAttributes;
  set PW0YM001.XPGCD initialAttributes;
  set PW0YM001.XUMCD initialAttributes;
  set PW0YM001.XOWCD initialAttributes;

  PW0YW00.PW0YWIDX = 1;

  while (PW0YW00.PW0YWIDX <= 10) /* process temp storage*/

    set PW0YM001.PW0YMARZ[PW0YWIDX] normal;
    set PW0YM001.SL5LOCTN[PW0YWIDX] normal;
    set PW0YM001.SY4IDDSC[PW0YWIDX] normal;
    set PW0YM001.PW0YMADJ[PW0YWIDX] normal;

    PW0YW00.PW0YWIDX = PW0YW00.PW0YWIDX + 1; /* increment load index*/
  end

  set PW0YM001.CATOAP initialAttributes;
  set PW0YM001.CAITEM initialAttributes;

end // end PW0Y400

// Verify the Entered Data
Function PW0Y500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PW0YW00.XXXLOCID = "500"; /* Module identification*/
    set PW0YM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Verify User request to page by Product - either backwards*/
   /* (PF5) or forwards (PF6), or to page by Size - either*/
   /* backwards (PF7) or forwards (PF8).*/
   /* Check all modifiable fields except FCST Target.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5
   || converseVar.eventKey is pf6
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)

    PW0Y520(); /* check key fields*/
    PW0Y530(); /* check detail fields*/

    if (converseVar.validationMsgNum != 0)
      exit stack; /* display error message*/
    end

    PW0Y510(); /* verify scroll request*/

    if (converseVar.validationMsgNum != 0)
      exit stack; /* display error message*/
    end

    return;

  end

   /* ------------------------------------------------------------*/
   /* ADD/SPLIT Requested (PF11)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11)

    PW0Y540(); /* validate key fields*/

    if (converseVar.validationMsgNum == 0)
      PW0Y520(); /* check key fields*/
      PW0Y530(); /* check detail fields*/
    end

    if (converseVar.validationMsgNum != 0)
      exit stack; /* display error message*/
    end

    /* --- check whether sameday is running ---*/
    set PWHREC empty; /* initialise database row*/

    PWHREC.XWHCD = PW0YW01.XWHCD;
    PWHREC.XXXPGMNO = "PK121S";

    PW0YS-VPKPGM01-S(); /* 's ' dpick.vpkpgm01*/

    if (PWHREC.XXXCMTCT != 0)
      /* --- sameday is running so function is not available ---*/
      converseLib.validationFailed(450);
      exit stack;
    end

    return;
  end

   /* ------------------------------------------------------------*/
   /* On enter, validate all fields*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter)

    /* ------------------------------------------------------------*/
    /* If there are key field changes, then it is an error if*/
    /* any detail fields have been chnaged.*/
    /* ------------------------------------------------------------*/
    if (PW0YM001.XWHCD != PW0YW01.XWHCD
     || PW0YM001.PW0YMTOT != PW0YW01.PWPTOSQN
     || PW0YM001.PW0YMCTN != PW0YW01.PKDNCSQN
     || PW0YM001.PW0YMCTN == 0
     || PW0YM001.XGPCD != PW0YW01.XGPCD
     || PW0YM001.SY1STNBR != PW0YW01.SY1STNBR
     || PW0YM001.SY2CLRID != PW0YW01.SY2CLRID
     || PW0YM001.XDMCD != PW0YW01.XDMCD
     || PW0YM001.XQACD != PW0YW01.XQACD
     || PW0YM001.PC2INSEG != PW0YW01.PC2INSEG
     || PW0YM001.XEGCD != PW0YW01.XEGCD
     || PW0YM001.XPGCD != PW0YW01.XPGCD
     || PW0YM001.XUMCD != PW0YW01.XUMCD
     || PW0YM001.XOWCD != PW0YW01.XOWCD)

      PW0YW00.PW0YWNKS = "Y"; /* new key switch*/
      PW0Y540(); /* validate key fields*/
      if (converseVar.validationMsgNum == 0)
        PW0YW00.PW0YWSWR = "Y"; /* request data switch*/
      end

    else
      PW0YW00.PW0YWNKS = "N"; /* no key switch*/

      /* --- Check for change in detail line ---*/
      PW0Y560();

      if (PW0YW00.PW0YWNDS == "Y") /* detail line changed*/

        if (PW0YW00.PW0YWSWR != "Y")
          PW0Y550(); /* validate detail fields*/
        end
      else /* no change in detail line*/

        if (PW0YW00.PW0YW-FIRST-TIME-SW == "N")
          PW0YW00.PW0YWSWR = "Y"; /* request data*/
        end

      end
    end
  end

  if (PW0YW00.PW0YW-FIRST-TIME-SW == "Y")
    PW0YW-FIRST-TIME-SW = "N";
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end

end // end PW0Y500

// Verify Scroll Request
Function PW0Y510()
   /* ------------------------------------------------------------*/
   /* If Product scroll back was requested (PF5 pressed), ensure*/
   /* that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5 /* Product scroll back request*/
   && PW0YW00.PW0YW-IT-INDEX < 2) /* and no previous pages*/

    PW0YW00.XXXLOCID = "510"; /* Module identification*/
    converseLib.validationFailed(37); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If Size scroll back was requested (PF7 pressed), ensure*/
   /* that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Size scroll back request*/
   && PW0YW00.XXXTSPAG < 2)       /* and no previous pages*/

    PW0YW00.XXXLOCID = "510"; /* Module identification*/
    converseLib.validationFailed(37); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If Size scroll forward was requested (PF8 pressed), ensure*/
   /* that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Size scroll forward request*/
   && PW0YW00.XXXTSPAG >= PW0YW00.TA5TSQIX) /* and no more pages*/

    PW0YW00.XXXLOCID = "510"; /* Module identification*/
    converseLib.validationFailed(38); /* No more pages to display*/

  end

end // end PW0Y510

// Check Key Fields
Function PW0Y520()
   /* -----------------------------------------------------*/
   /* If a key field has changed, error*/
   /* -----------------------------------------------------*/

  if (PW0YW01.XOWCD != PW0YM001.XOWCD) /* own grp cd*/
    set PW0YM001.XOWCD cursor, bold;
    converseLib.validationFailed(379);
    PW0YW00.XXXLOCID = "520";
  end

  if (PW0YW01.XUMCD != PW0YM001.XUMCD) /* unit of measure*/
    set PW0YM001.XUMCD cursor, bold;
    converseLib.validationFailed(379);
    PW0YW00.XXXLOCID = "520";
  end

  if (PW0YW01.XPGCD != PW0YM001.XPGCD) /* package type code*/
    set PW0YM001.XPGCD cursor, bold;
    converseLib.validationFailed(379);
    PW0YW00.XXXLOCID = "520";
  end

  if (PW0YW01.XEGCD != PW0YM001.XEGCD) /* engineering difference*/
    set PW0YM001.XEGCD cursor, bold;
    converseLib.validationFailed(379);
    PW0YW00.XXXLOCID = "520";
  end

  if (PW0YW01.PC2INSEG != PW0YM001.PC2INSEG) /* engineer df cd*/
    set PW0YM001.PC2INSEG cursor, bold;
    converseLib.validationFailed(379);
    PW0YW00.XXXLOCID = "520";
  end

  if (PW0YW01.XQACD != PW0YM001.XQACD) /* quality code*/
    set PW0YM001.XQACD cursor, bold;
    converseLib.validationFailed(379);
    PW0YW00.XXXLOCID = "520";
  end

  if (PW0YW01.XDMCD != PW0YM001.XDMCD) /* dimension code*/
    set PW0YM001.XDMCD cursor, bold;
    converseLib.validationFailed(379);
    PW0YW00.XXXLOCID = "520";
  end

  if (PW0YW01.SY2CLRID != PW0YM001.SY2CLRID) /* color code*/
    set PW0YM001.SY2CLRID cursor, bold;
    converseLib.validationFailed(379);
    PW0YW00.XXXLOCID = "520";
  end

  if (PW0YW01.SY1STNBR != PW0YM001.SY1STNBR) /* style*/
    set PW0YM001.SY1STNBR cursor, bold;
    converseLib.validationFailed(379);
    PW0YW00.XXXLOCID = "520";
  end

  if (PW0YW01.XGPCD != PW0YM001.XGPCD) /* gpc code*/
    set PW0YM001.XGPCD cursor, bold;
    converseLib.validationFailed(379);
    PW0YW00.XXXLOCID = "520";
  end

  if (PW0YW01.PWPTOSQN != PW0YM001.PW0YMTOT) /* tote seq nbr*/
    set PW0YM001.PW0YMTOT cursor, bold;
    converseLib.validationFailed(379);
    PW0YW00.XXXLOCID = "520";
  end

  if (PW0YW01.PKDNCSQN != PW0YM001.PW0YMCTN) /* carton seq nbr*/
    set PW0YM001.PW0YMCTN cursor, bold;
    converseLib.validationFailed(379);
    PW0YW00.XXXLOCID = "520";
  end

  if (PW0YW01.XWHCD != PW0YM001.XWHCD) /* whse code*/
    set PW0YM001.XWHCD cursor, bold;
    converseLib.validationFailed(379);
    PW0YW00.XXXLOCID = "520";
  end

end // end PW0Y520

// check detail fields
Function PW0Y530()
   /* -----------------------------------------------------*/
   /* if detail fields has changed, error*/
   /* -----------------------------------------------------*/

  PW0YW00.PW0YWIDX = PW0YW02.PW0YWNLD; /* nbr of lines loaded*/

  while (PW0YW00.PW0YWIDX > 0) /* process temp storage*/

    if (PW0YW02.PW0YWADJ[PW0YWIDX] != PW0YM001.PW0YMADJ[PW0YWIDX])
      set PW0YM001.PW0YMADJ[PW0YWIDX] cursor, bold;
      converseLib.validationFailed(379);
      PW0YW00.XXXLOCID = "530";
    end

    if (PW0YW02.SY4IDDSC[PW0YWIDX] != PW0YM001.SY4IDDSC[PW0YWIDX])
      set PW0YM001.SY4IDDSC[PW0YWIDX] cursor, bold;
      converseLib.validationFailed(379);
      PW0YW00.XXXLOCID = "530";
    end

    if (PW0YW02.SL5LOCTN[PW0YWIDX] != PW0YM001.SL5LOCTN[PW0YWIDX])
      set PW0YM001.SL5LOCTN[PW0YWIDX] cursor, bold;
      converseLib.validationFailed(379);
      PW0YW00.XXXLOCID = "530";
    end

    if (PW0YW02.PW0YWARZ[PW0YWIDX] != PW0YM001.PW0YMARZ[PW0YWIDX])
      set PW0YM001.PW0YMARZ[PW0YWIDX] cursor, bold;
      converseLib.validationFailed(379);
      PW0YW00.XXXLOCID = "530";
    end
    PW0YW00.PW0YWIDX = PW0YW00.PW0YWIDX - 1;
  end

end // end PW0Y530

// Validate Key Fields
Function PW0Y540()
   /* -------------------------------------------------------------*/
   /* Edit the key fields starting at the bottom*/
   /* -------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Edit the own group code*/
   /* ------------------------------------------------------------*/
  if (PW0YM001.XOWCD != " ")
    if (PW0YM001.XOWCD in XOWTBL.XOWCD
     && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    else
      set PW0YM001.XOWCD cursor, bold;
      converseLib.validationFailed(342); /* invalid code*/
      PW0YW00.XXXLOCID = "540";
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the unit of measure code*/
   /* ------------------------------------------------------------*/
  if (PW0YM001.XUMCD != " ")
    if (PW0YM001.XUMCD in XUMTBL.XUMCD
     && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    else
      set PW0YM001.XUMCD cursor, bold;
      converseLib.validationFailed(342); /* invalid code*/
      PW0YW00.XXXLOCID = "540";
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the pkg type code*/
   /* ------------------------------------------------------------*/
  if (PW0YM001.XPGCD != " ")
    if (PW0YM001.XPGCD in XPGTBL.XPGCD
     && XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    else
      set PW0YM001.XPGCD cursor, bold;
      converseLib.validationFailed(342); /* invalid code*/
      PW0YW00.XXXLOCID = "540";
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the edf code*/
   /* ------------------------------------------------------------*/
  if (PW0YM001.XEGCD != " ")
    if (PW0YM001.XEGCD in XEGTBL.XEGCD
     && XEGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    else
      set PW0YM001.XEGCD cursor, bold;
      converseLib.validationFailed(342); /* invalid code*/
      PW0YW00.XXXLOCID = "540";
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the iseg code*/
   /* ------------------------------------------------------------*/
  if (PW0YM001.PC2INSEG != " "
   && PW0YM001.XGPCD != " ")

    PW0YS33(); /* get customer product x-ref*/

    if (SQLCA.VAGen_SQLCODE != 0)
      set PW0YM001.PC2INSEG cursor, bold;
      converseLib.validationFailed(342); /* invalid code*/
      PW0YW00.XXXLOCID = "540";
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the quality code*/
   /* ------------------------------------------------------------*/
  if (PW0YM001.XQACD != " ")
    if (PW0YM001.XQACD in XQATBL.XQACD
     && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
    else
      set PW0YM001.XQACD cursor, bold;
      converseLib.validationFailed(342); /* invalid code*/
      PW0YW00.XXXLOCID = "540";
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the dimension code*/
   /* ------------------------------------------------------------*/
  if (PW0YM001.XDMCD != " ")
    if (PW0YM001.XDMCD in XDMTBL.XDMCD
     && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    else
      set PW0YM001.XDMCD cursor, bold;
      converseLib.validationFailed(342); /* invalid code*/
      PW0YW00.XXXLOCID = "540";
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the gpc code*/
   /* ------------------------------------------------------------*/
  if (PW0YM001.XGPCD != " ")
    if (PW0YM001.XGPCD in XGPTBL.XGPCD
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    else
      set PW0YM001.XGPCD cursor, bold;
      converseLib.validationFailed(342); /* invalid code*/
      PW0YW00.XXXLOCID = "540";
    end
  end

   /* ------------------------------------------------------------*/
   /* either tote or carton seq nbr must be entered*/
   /* ------------------------------------------------------------*/

  if (PW0YM001.XWHCD == "51"
   || PW0YM001.XWHCD == "42")
    if (PW0YW01.XWHCD != "42"
     && PW0YW01.XWHCD != "51")
      PW0YM001.PW0YMTOT = 0;
    end
    if (PW0YM001.PW0YMTOT == 0
     && PW0YM001.PW0YMCTN == 0)
      set PW0YM001.PW0YMTOT cursor, bold;
      converseLib.validationFailed(380); /* tote or carton is required*/
      PW0YW00.XXXLOCID = "540";
    end
  else
    if (PW0YM001.PW0YMCTN == 0)
      set PW0YM001.PW0YMCTN cursor, bold;
      converseLib.validationFailed(380); /* carton is required*/
      PW0YW00.XXXLOCID = "540";
    end
  end

end // end PW0Y540

// Validate Detail DataFields
Function PW0Y550()
   /* ------------------------------------------------------------*/
   /* Edit the detail fields starting at the bottom*/
   /* ------------------------------------------------------------*/

  PW0YW00.PW0YWIDX = 10;
  while (PW0YW00.PW0YWIDX > 0)

    /* ------------------------------------------------------------*/
    /* Only need to edit the line if something has changed*/
    /* ------------------------------------------------------------*/
    if (PW0YM001.PW0YMARZ[PW0YWIDX] != PW0YW02.PW0YWARZ[PW0YWIDX]
     || PW0YM001.SL5LOCTN[PW0YWIDX] != PW0YW02.SL5LOCTN[PW0YWIDX]
     || PW0YM001.SY4IDDSC[PW0YWIDX] != PW0YW02.SY4IDDSC[PW0YWIDX]
     || PW0YM001.PW0YMADJ[PW0YWIDX] != 0)

      /* ----------------------------------------------------------*/
      /* adjustment quantity*/
      /* ----------------------------------------------------------*/
      if (PW0YM001.PW0YMADJ[PW0YWIDX] == 0)
        if (PW0YW00.PW0YWIDX > PW0YW02.PW0YWNLD) /* lines on page*/
          set PW0YM001.PW0YMADJ[PW0YWIDX] cursor, bold;
          converseLib.validationFailed(341); /* requred field*/
          PW0YW00.XXXLOCID = "550";
        end
      else
        PW0YW00.PW0YWQTY = PW0YW02.PK1QTY[PW0YWIDX] + PW0YM001.PW0YMADJ[PW0YWIDX];
        if (PW0YW00.PW0YWQTY < 0)
          set PW0YM001.PW0YMADJ[PW0YWIDX] cursor, bold;
          converseLib.validationFailed(381); /* cannot be less than 0*/
          PW0YW00.XXXLOCID = "550";
        end
      end

      /* ----------------------------------------------------------*/
      /* size*/
      /* ----------------------------------------------------------*/
      if (PW0YM001.SY4IDDSC[PW0YWIDX] == " ")
        set PW0YM001.SY4IDDSC[PW0YWIDX] cursor, bold;
        converseLib.validationFailed(341); /* requred field*/
        PW0YW00.XXXLOCID = "550";
      else
        if (PW0YM001.SY4IDDSC[PW0YWIDX] in SYPREC.SY4IDDSC)
          PW0YW02.PW0YWSIZ[PW0YWIDX] = SYPREC.SY5SZID[sysVar.arrayIndex];
        else
          set PW0YM001.SY4IDDSC[PW0YWIDX] cursor, bold;
          converseLib.validationFailed(342); /* invalid field*/
          PW0YW00.XXXLOCID = "550";
        end
      end

      /* ----------------------------------------------------------*/
      /* location*/
      /* ----------------------------------------------------------*/
      if (PW0YM001.SL5LOCTN[PW0YWIDX] == " ")
        set PW0YM001.SL5LOCTN[PW0YWIDX] cursor, bold;
        converseLib.validationFailed(341); /* requred field*/
        PW0YW00.XXXLOCID = "550";
      end

      /* ----------------------------------------------------------*/
      /* area/zone*/
      /* ----------------------------------------------------------*/
      if (PW0YM001.PW0YMARZ[PW0YWIDX] == " ")
        set PW0YM001.PW0YMARZ[PW0YWIDX] cursor, bold;
        converseLib.validationFailed(341); /* required field*/
        PW0YW00.XXXLOCID = "550";
      end

      /* ----------------------------------------------------------*/
      /* area/zone/location*/
      /* ----------------------------------------------------------*/
      if (PW0YM001.PW0YMARZ[PW0YWIDX] != " "
       && PW0YM001.SL5LOCTN[PW0YWIDX] != " ")

        PW0YS40(); /* 's' dstloc.vlocat01*/

        if (SQLCA.VAGen_SQLCODE != 0)
          set PW0YM001.PW0YMARZ[PW0YWIDX] cursor, bold;
          set PW0YM001.SL5LOCTN[PW0YWIDX] bold;
          converseLib.validationFailed(238); /* invalid area/zone/loc*/
          PW0YW00.XXXLOCID = "557";
        end
      end

      /* ----------------------------------------------------------*/
      /* cant be duplicates on screen or database*/
      /* ----------------------------------------------------------*/
      if (PW0YM001.PW0YMARZ[PW0YWIDX] != PW0YW02.PW0YWARZ[PW0YWIDX]
       || PW0YM001.SL5LOCTN[PW0YWIDX] != PW0YW02.SL5LOCTN[PW0YWIDX]
       || PW0YM001.SY4IDDSC[PW0YWIDX] != PW0YW02.SY4IDDSC[PW0YWIDX])

        PW0Y551(); /* check for dups on scrn*/

        PW0YS41(); /* new packing list size*/

        if (SQLCA.VAGen_SQLCODE == 0) /* duplicate on database*/
          set PW0YM001.PW0YMARZ[PW0YWIDX] cursor, bold;
          set PW0YM001.SL5LOCTN[PW0YWIDX] bold;
          set PW0YM001.SY4IDDSC[PW0YWIDX] bold;
          converseLib.validationFailed(140); /* duplicate*/
          PW0YW00.XXXLOCID = "558";
        end

      end
    end

    PW0YW00.PW0YWIDX = PW0YW00.PW0YWIDX - 1;

  end

end // end PW0Y550

// Check for Duplicates on Screen
Function PW0Y551()
   /* ------------------------------------------------------------*/
   /* Check the current detail (widx) for duplicates on the scrn*/
   /* ------------------------------------------------------------*/

  PW0YW00.PW0YWIX2 = 10;
  while (PW0YW00.PW0YWIX2 > 0)

    if (PW0YM001.PW0YMARZ[PW0YWIX2] == PW0YM001.PW0YMARZ[PW0YWIDX]
     && PW0YM001.SL5LOCTN[PW0YWIX2] == PW0YM001.SL5LOCTN[PW0YWIDX]
     && PW0YM001.SY4IDDSC[PW0YWIX2] == PW0YM001.SY4IDDSC[PW0YWIDX]
     && PW0YWIX2 != PW0YWIDX)

      set PW0YM001.PW0YMARZ[PW0YWIDX] cursor, bold;
      set PW0YM001.SL5LOCTN[PW0YWIDX] bold;
      set PW0YM001.SY4IDDSC[PW0YWIDX] bold;
      converseLib.validationFailed(140);
      PW0YW00.XXXLOCID = "551";

    end

    PW0YW00.PW0YWIX2 = PW0YW00.PW0YWIX2 - 1;

  end

end // end PW0Y551

// Check Map Detail line changes
Function PW0Y560()
   /* ------------------------------------------------------------*/
   /* Edit the detail fields starting at the bottom*/
   /* ------------------------------------------------------------*/

  PW0YW00.PW0YWNDS = "N";
  PW0YW00.PW0YWIDX = 10;

  while (PW0YW00.PW0YWIDX > 0)

    if (PW0YM001.PW0YMARZ[PW0YWIDX] != PW0YW02.PW0YWARZ[PW0YWIDX]
     || PW0YM001.SL5LOCTN[PW0YWIDX] != PW0YW02.SL5LOCTN[PW0YWIDX]
     || PW0YM001.SY4IDDSC[PW0YWIDX] != PW0YW02.SY4IDDSC[PW0YWIDX]
     || PW0YM001.PW0YMADJ[PW0YWIDX] != PW0YW02.PW0YWADJ[PW0YWIDX]
    )
      PW0YW00.PW0YWNDS = "Y";
      return;
    end

    PW0YW00.PW0YWIDX = PW0YW00.PW0YWIDX - 1;

  end

end // end PW0Y560

// Process Valid Input Request
Function PW0Y600()
   /* ------------------------------------------------------------*/
   /* Indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/

  PW0YW00.PW0YWSWF = "Y"; /* set format map switch*/

   /* --------------------------------------------------------*/
   /* Create new carton for split or add*/
   /* --------------------------------------------------------*/
  if (converseVar.eventKey is pf11)

    if (SR1REC.SR1PKSFL == "Y")
      converseLib.validationFailed(515); /* order already picked*/
      PW0YW00.XXXLOCID = "600 ";
      PW0YW01.CACHGFL = "N";
      return;
    else /* --- Transfer to PW01 Add/Split Ctn Application ---*/
      COMMAREA.CATOAP = "PW01"; /* Application find code*/

      /* --- calculate nbr of Products in ctn before transfer*/
                                      /* ASN Carton*/
      VAZCTN01.XWH-WHSE-CD = PW0YW01.XWHCD; /* whse cd*/
      VAZCTN01.OP-CUST-ORD-ID = PW0YW01.OP1CUOID; /* cust id*/
      VAZCTN01.OP-NIKE-ORD-ID = PW0YW01.OP1NORID; /* nike ord*/
      VAZCTN01.PK-CRTN-SEQ-NBR = PW0YW01.PKDNCSQN; /* ctn seq #*/

      PW0YS-VAZCTN01-S(); /* 's ' dship.vazctn01*/

      /* --- move key data to common record ---*/
      set PW0YREC empty; /* initialise common record*/

      PW0YREC.XWH-WHSE-CD = PW0YW01.XWHCD; /* whse cd*/
      PW0YREC.PK-CRTN-SEQ-NBR = PW0YW01.PKDNCSQN; /* ctn nbr*/
      PW0YREC.PK-TOTE-SEQ-NBR = PW0YW01.PWPTOSQN; /* tote nbr*/

      PW0YREC.PK-CRTN-UNIT-QTY = VAZCTN01.PK-CRTN-UNIT-QTY; /* ctn qty*/

      PW0YREC.PW0YW-PF11ACT-IND = "Y"; /* PF11 request ind*/

      COMMAREA.CA-USER-WORKAREA-4K = PW0YREC.PW0Y-COMMON-REC;
      XSPKS01(); /* Exit to another application*/

      PW0YW00.PW0YWSWR = "N"; /* request for data*/
      PW0YW00.PW0YWSWF = "Y"; /* format screen m001*/

      exit stack;

    end
  end

   /* ------------------------------------------------------------*/
   /* Update w01 with new keys*/
   /* ------------------------------------------------------------*/

  PW0Y620(); /* update key data*/

  if (PW0YW00.PW0YWSWR == "Y") /* key data modified*/
    return;
  end

   /* --------------------------------------------------------*/
   /* request to product scroll backwards*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf5)
    PW0Y616();
    return;
  end

   /* --------------------------------------------------------*/
   /* request to product scroll forward*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf6)
    PW0Y617();
    return;
  end

   /* --------------------------------------------------------*/
   /* request to size scroll backwards*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf7)
    PW0YW00.XXXTSPAG = PW0YW00.XXXTSPAG - 1;
    return;
  end

   /* --------------------------------------------------------*/
   /* request to size scroll forward*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf8)
    PW0YW00.XXXTSPAG = PW0YW00.XXXTSPAG + 1;
    return;
  end

   /* ------------------------------------------------------------*/
   /* if detail data was changed, do updates.*/
   /* ------------------------------------------------------------*/

  if (PW0YW00.PW0YWNDS == "Y") /* detail data changed*/

    PW0Y610(); /* update all databases*/

    if (PW0YW00.PW0YW-LAST-CTN-DEL-SW == "Y")
      PW0YW00.PW0YWMSG = 518;
    else

      if (PW0YW00.PW0YW-JOB-SUB-SW == "Y")
        PW0YW00.PW0YWMSG = 516;
        PW0YW00.PW0YW-JOB-SUB-SW = " ";
      else

        PW0YW00.PW0YWMSG = 32; /* updates successful*/
      end
    end

    PW0YW00.XXXLOCID = "600";

    PW0YW01.PW0YWCTN = PW0YW01.PKDNCSQN;
    if (PW0YW01.XWHCD == "51"
     || PW0YW01.XWHCD == "42") /* move tote number for apparel*/
      PW0YW01.PW0YWTOT = PW0YW01.PWPTOSQN;
    else /* initialize tote number for others*/
      PW0YW01.PW0YWTOT = 0;
    end

    PW0YW00.PW0YWNKS = "Y"; /* new key*/
    PW0YW00.PW0YWSWR = "Y"; /* data requested*/

  end

end // end PW0Y600

// Update Databases
Function PW0Y610()
   /* ------------------------------------------------------------*/
   /* Update DB2 tables with User's changes.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get date and time*/

   /* ------------------------------------------------------------*/
   /* Get database rows that are needed for updates*/
   /* ------------------------------------------------------------*/

  PW0Y611();

   /* ------------------------------------------------------------*/
   /* Check for consolidated cartons*/
   /* ------------------------------------------------------------*/

  PW0Y612();

   /* --- Get ASN carton row---*/

  PW0YS-VAZCTN01-S(); /* 's' dship.vazctn01*/

  if (VAZCTN01.PK-CRTN-UNIT-QTY == 0)
    /* --- carton is being reinstated ---*/
    PW0YW00.PW0YW-CTN-REINSTATE-FL = "Y";
    PW0YW00.PW0YW-REINSTATE-CTN = VAZCTN01.PK-CRTN-SEQ-NBR;
  else
    PW0YW00.PW0YW-CTN-REINSTATE-FL = "N";
  end

   /* ------------------------------------------------------------*/
   /* Update packing list item sizes and ASN item sizes that*/
   /* have been changed or added.*/
   /* ------------------------------------------------------------*/

  PW0Y614();

   /* ------------------------------------------------------------*/
   /* Update the ship rec item rows*/
   /* ------------------------------------------------------------*/

  PW0Y615(); /* check if ship rec item*/
                                  /* already exists*/

  if (PW0YW00.PW0YWSRS == "Y")
    /* --- shiprec item was found so update row ---*/

    SR3REC.XXXUSRID = COMMAREA.CAUSERID;
    SR3REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    SR3REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PW0YS-VSRITM01-U(); /* 'u ' dship.vsritm01*/
  end

   /* --- get ASN Header row ---*/
  VAZHDR01.XWH-WHSE-CD = PW0YW01.XWHCD; /* whse cd*/
  VAZHDR01.PK-BILL-OF-LADING = PWOREC.PK1BLLAD; /* BOL nbr*/
  VAZHDR01.PK-BOL-SUB-NBR = PWOREC.SR2BLLSU; /* BOL sub nbr*/

  PW0YS-VAZHDR01-S(); /* 's ' dship.vazhdr01*/

  if (VAZCTN01.PK-CRTN-UNIT-QTY == 0)

    PW0YW00.PW0YW-CARTON-ZEROED-FL = "Y";
    VAZHDR01.SR-TOT-NBR-CARTONS = VAZHDR01.SR-TOT-NBR-CARTONS - 1;
    VAZORD01.AZ-TOT-ORD-CARTONS = VAZORD01.AZ-TOT-ORD-CARTONS - 1;
  else
    PW0YW00.PW0YW-CARTON-ZEROED-FL = "N";
  end

  if (VAZHDR01.SR-TOT-NBR-CARTONS == 0)
    VAZHDR01.AZ-ASN-STAT-CD = "XL";
  end

   /* --- check if carton is being reinstated ---*/
  if (PW0YW00.PW0YW-CTN-REINSTATE-FL == "Y")

    VAZHDR01.SR-TOT-NBR-CARTONS = VAZHDR01.SR-TOT-NBR-CARTONS + 1;

    if (VAZHDR01.AZ-ASN-STAT-CD == "HD"
    ) /* leave ASN Header status as 'HD'*/
    else /* ASN Header status is 'XL', 'RE' or 'NS'*/
      VAZHDR01.AZ-ASN-STAT-CD = "NS";
    end

    VAZORD01.AZ-TOT-ORD-CARTONS = VAZORD01.AZ-TOT-ORD-CARTONS + 1;
  end

   /* --- Update the ASN Header row ---*/
  VAZHDR01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
  VAZHDR01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;

  PW0YS-VAZHDR01-U(); /* 'u' dship.vazhdr01*/

   /* --- Update the ASN Order row ---*/
  VAZORD01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
  VAZORD01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;

  PW0YS-VAZORD01-U(); /* 'u' dship.vazord01*/

  PW0YW00.PW0YW-LAST-CTN-DEL-SW = "N";

   /* --- Update the ASN Carton row ---*/
  if (PW0YW00.PW0YW-CARTON-ZEROED-FL == "Y")
    VAZCTN01.PK-MOVERS-STAT-CD = "03";
  end

  if (PW0YW00.PW0YW-CTN-REINSTATE-FL == "Y")
    VAZCTN01.PK-MOVERS-STAT-CD = "01";
  end

  VAZCTN01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
  VAZCTN01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;

  PW0YS-VAZCTN01-U(); /* 'u' dship.vazctn01*/

  if (PW0YW00.PW0YW-CARTON-ZEROED-FL == "Y")
    PW0Y700();
  end

  if (PW0YW00.PW0YW-CTN-REINSTATE-FL == "Y")
    PW0Y710();
  end

   /* ------------------------------------------------------------*/
   /* Format and Write the Picking Exception Audit Record.*/
   /* ------------------------------------------------------------*/

  PW0Y613();

   /* --- recalculate carton repack time ---*/
  PW0Y619();

  PW0YW00.PW0YWPTM = PW0YW00.PW0YWPTM * PW0YW00.PW0YWTAD;
  PWPREC.PWPCPKTM = PWPREC.PWPCPKTM + PW0YW00.PW0YWPTM;

  PWPREC.PK-EXPC-CRTN-WT = PWPREC.PK-EXPC-CRTN-WT + PW0YW00.PW0YW-NEW-CRTN-WT;

  PWPREC.PK-PICK-XCEP-CD = "01";

  PW0YS-CRTN-DEL();

   /* ------------------------------------------------------------*/
   /* Update the Ship rec header and order rows.*/
   /* ------------------------------------------------------------*/

   /* --- get the shiprec batch schedule header ---*/
  PW0YS-VSRHDR01-S(); /* 's' dship.vsrhdr01*/

  if (SQLCA.VAGen_SQLCODE == 0)

    /* --- update the shiprec batch schedule hdr ---*/
    SR1REC.SR1QTYSH = SR1REC.SR1QTYSH + PW0YW00.PW0YWTQY;
    SR1REC.SR1DLRAM = SR1REC.SR1DLRAM + PW0YW00.PW0YWTDL;

    SR1REC.XXXUSRID = COMMAREA.CAUSERID;
    SR1REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    SR1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PW0YS-VSRHDR01-U(); /* 'u' dship.vsrhdr01*/
  end

   /* --- get the shiprec order row ---*/
  PW0YS-VSRORD01-S(); /* 's' dship.vsrhdr01*/

  if (SQLCA.VAGen_SQLCODE == 0)

    if (PW0YW00.PW0YW-CTN-REINSTATE-FL == "Y")
      SR2REC.PK1NBCTN = SR2REC.PK1NBCTN + 1;

      /* --- add 1 to nbr of cartons per bill of lading ---*/
      SR2REC.SR2TNBCT = SR2REC.SR2TNBCT + 1;
    end

    /* --- Update the shiprec order row ---*/
    SR2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    SR2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PW0YS-VSRORD01-U(); /* 'u' dship.vsrord01*/
  end

   /* --- update the packing list item row ---*/
                                  /* set pkg xcep cd to show qty adj*/
  PWPREC.PK-PICK-XCEP-CD = "01";

  if (PW0YW00.PW0YW-CTN-REINSTATE-FL == "Y"
   || PWPREC.PKDNCSQN == PW0YW00.PW0YW-REINSTATE-CTN)

    if (PWPREC.PK-NEW-CRTN-FL == "Y")
      PWPREC.PK-NEW-CRTN-FL = "M";
    else
      PWPREC.PK-NEW-CRTN-FL = "R";
    end
  end

  PWPREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PWPREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  PWPREC.XXXUSRID = COMMAREA.CAUSERID;

  PW0YS-VSPLIT01-U(); /* 'u' dpick.vsplit01*/

end // end PW0Y610

// Retrieve Database rows
Function PW0Y611()
   /* ------------------------------------------------------------*/
   /* Get all database rows that are needed for the updates.*/
   /* ------------------------------------------------------------*/

   /* --- get packing list item row ---*/
  set PWPREC empty; /* initialise packing list item*/

  PWPREC.XWHCD = PW0YW01.XWHCD; /* whse cd*/
  PWPREC.TSIPLNBR = PW0YW01.TSIPLNBR; /* packing list nbr*/
  PWPREC.OP1PARTN = PW0YW01.OP1PARTN; /* order part char*/
  PWPREC.OP1CUOID = PW0YW01.OP1CUOID; /* cust order id*/
  PWPREC.OP1NORID = PW0YW01.OP1NORID; /* nike ord id*/
  PWPREC.OP2LNINB = PW0YW01.OP2LNINB; /* line item nbr*/
  PWPREC.PWPTOSQN = PW0YW01.PWPTOSQN; /* tote seq nbr*/
  PWPREC.PKDNCSQN = PW0YW01.PKDNCSQN; /* carton seq nbr*/

  PW0YS-VSPLIT01-S(); /* get packing list item*/

   /* --- get packing list header*/
  PW0YS-VSPLHD01-S(); /* 's' dpick.vsplhd01*/

   /* --- get ASN Order row ---*/
  VAZORD01.XWH-WHSE-CD = PW0YW01.XWHCD; /* whse cd*/
  VAZORD01.OP-CUST-ORD-ID = PW0YW01.OP1CUOID; /* cust ord id*/
  VAZORD01.OP-NIKE-ORD-ID = PW0YW01.OP1NORID; /* nike Ord id*/

  PW0YS-VAZORD01-S(); /* get ASN Orders*/

   /* --- move key values to database records---*/
                                  /* ASN Carton*/
  VAZCTN01.XWH-WHSE-CD = PW0YW01.XWHCD; /* whse cd*/
  VAZCTN01.OP-CUST-ORD-ID = PW0YW01.OP1CUOID; /* cust ord id*/
  VAZCTN01.OP-NIKE-ORD-ID = PW0YW01.OP1NORID; /* nike ord id*/
  VAZCTN01.PK-CRTN-SEQ-NBR = PW0YW01.PKDNCSQN; /* crtn seq nbr*/

                                  /* ASN Items*/
  VAZCIT01.XWH-WHSE-CD = PW0YW01.XWHCD; /* whse cd*/
  VAZCIT01.OP-CUST-ORD-ID = PW0YW01.OP1CUOID; /* cust ord id*/
  VAZCIT01.OP-NIKE-ORD-ID = PW0YW01.OP1NORID; /* nike ord id*/
  VAZCIT01.OP-LINE-ITEM-NBR = PW0YW01.OP2LNINB; /* line item nbr*/
  VAZCIT01.PK-CRTN-SEQ-NBR = PW0YW01.PKDNCSQN; /* crtn seq nbr*/

end // end PW0Y611

// Consolidated Carton Process
Function PW0Y612()
   /* ------------------------------------------------------------*/
   /* Processing for consolidated cartons*/
   /* ------------------------------------------------------------*/

  if (PWPREC.PK-CNSLD-FL == "Y"
   && PWPREC.PK-MSTR-CRTN-FL == "N")

    PWPREC.PK-MSTR-CRTN-FL = "Y";

    PW0YS-VSPLIT01-SU(); /* retrieve master carton number*/

    VAZCTN01.PK-CRTN-SEQ-NBR = PWPREC.PKDNCSQN;
    VAZCIT01.PK-CRTN-SEQ-NBR = PWPREC.PKDNCSQN;
    VAZCSZ01.PK-CRTN-SEQ-NBR = PWPREC.PKDNCSQN;
  end

  if (PWPREC.PK-CNSLD-FL == "N"
   && PWPREC.PK-ZONE-CNSLD-FL == "Y"
   && PWPREC.PK-ZN-CNSLD-MSTRFL == "N")
    PWPREC.PK-ZN-CNSLD-MSTRFL = "Y";

    PW0YS-VSPLIT01-SQ(); /* retrieve master carton number*/

    VAZCTN01.PK-CRTN-SEQ-NBR = PWPREC.PKDNCSQN;
    VAZCIT01.PK-CRTN-SEQ-NBR = PWPREC.PKDNCSQN;
    VAZCSZ01.PK-CRTN-SEQ-NBR = PWPREC.PKDNCSQN;
  end

end // end PW0Y612

// Output Exception Audit Record
Function PW0Y613()
   /* ------------------------------------------------------------*/
   /* Format and Write the Picking Exception Audit Record.*/
   /*  */
   /* Note: Add to the exception table only when there is a*/
   /* change in the overall qty.*/
   /* Add Correct product audit record (unless direct ship).*/
   /* ------------------------------------------------------------*/

   /* --- set up the audit record ---*/
  PW0YS-PW0Y6131();

   /* --- build and write record for each modified size ---*/
  PW0YWIDX = 1; /* active size index*/
  while (PW0YWIDX <= 10) /* for each active size*/

    if (PW0YM001.PW0YMARZ[PW0YWIDX] != PW0YW02.PW0YWARZ[PW0YWIDX]
     || PW0YM001.SL5LOCTN[PW0YWIDX] != PW0YW02.SL5LOCTN[PW0YWIDX]
     || PW0YM001.SY4IDDSC[PW0YWIDX] != PW0YW02.SY4IDDSC[PW0YWIDX]
     || PW0YM001.PW0YMADJ[PW0YWIDX] != PW0YW02.PW0YWADJ[PW0YWIDX])

      /* If direct ship order, bypass write*/
      if (SR2REC.XDSCD == "1")
        /* next sentence*/
      else
        /* --- format size data to exception table ---*/
        SR5REC.SY5SZID = PW0YW02.PW0YWSIZ[PW0YWIDX]; /* size id*/
        SR5REC.SR3ARZN = PW0YM001.PW0YMARZ[PW0YWIDX]; /* area zone*/
        SR5REC.SL5LOCTN = PW0YM001.SL5LOCTN[PW0YWIDX]; /* location*/
        SR5REC.SR3QTYAL = PW0YW02.SR3QTYAL[PW0YWIDX]; /* alloc qty*/
        SR5REC.SR3QTYSH = PW0YW02.SR3QTYSH[PW0YWIDX]; /* ship qty*/
        SR5REC.SR5QTYXC = PW0YM001.PW0YMADJ[PW0YWIDX]; /* xcpt qty*/

        /* --- insert a shiprec picking exception record ---*/
        SR5REC.XXXUSRID = COMMAREA.CAUSERID;
        SR5REC.ZZZSDT = XX0XW01.XX0XWDAT; /* setup date*/
        SR5REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* current date*/
        SR5REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* current time*/
        SR5REC.ZZZCHGCT = 0; /* change count*/

        PW0YS-VSRXCP01-A(); /* 'a' dship.vsrxcp01*/

      end
    end

    PW0YWIDX = PW0YWIDX + 1;

  end

end // end PW0Y613

// Update Packing List Items
Function PW0Y614()
   /* ------------------------------------------------------------*/
   /* Update the shipping packing list items that have been*/
   /* changed or been added.*/
   /* ------------------------------------------------------------*/

  PW0YW00.PW0YW-NEW-CRTN-WT = 0;
  PW0YW00.PW0YWTQY = 0; /* total adjustment qty*/
  PW0YW00.PW0YWTAD = 0; /* total adjustment qty*/
  PW0YW00.PW0YWTDL = 0; /* total adjustment dollar*/
  PW0YW00.PW0YWIDX = 1; /* set index*/

  while (PW0YW00.PW0YWIDX <= 10) /* more rows on the screen*/

    if (PW0YM001.PW0YMARZ[PW0YWIDX] != PW0YW02.PW0YWARZ[PW0YWIDX]
     || PW0YM001.SL5LOCTN[PW0YWIDX] != PW0YW02.SL5LOCTN[PW0YWIDX]
     || PW0YM001.SY4IDDSC[PW0YWIDX] != PW0YW02.SY4IDDSC[PW0YWIDX]
     || PW0YM001.PW0YMADJ[PW0YWIDX] != PW0YW02.PW0YWADJ[PW0YWIDX])

      /* ------------------------------------------------------------*/
      /* If the ar/zn/loc/sz have changed, then delete and add the*/
      /* packing list item. Otherwise just adjust the picking qty.*/
      /* ------------------------------------------------------------*/

      /* --- move key values to VSPLSZ02 and VAZCSZ01 ---*/
      PW0YS-PW0Y6141();

      /* --- Calculate new Carton weight ---*/
      PW0YS-NEW-CRTNWT();

      PW0YW00.PW0YW-NEW-CRTN-WT = PW0YW00.PW0YW-NEW-CRTN-WT + PW0YW00.PW0YW-NEW-SIZE-WT;

      if (PW0YM001.PW0YMARZ[PW0YWIDX] != PW0YW02.PW0YWARZ[PW0YWIDX]
       || PW0YM001.SL5LOCTN[PW0YWIDX] != PW0YW02.SL5LOCTN[PW0YWIDX]
       || PW0YM001.SY4IDDSC[PW0YWIDX] != PW0YW02.SY4IDDSC[PW0YWIDX])

        PW0YS-PW0Y6142(); /* update the packing list item*/
                                  /* size and ASN item size rows*/
      else
        /* --- only the adjustment quantity has changed ---*/

        PW0YS-PW0Y6143(); /* update the adjustment quantity*/
                                  /* on the packing list item and*/
                                  /* ASN item size rows*/
      end
      PW0YW00.PW0YWTAD = PW0YW00.PW0YWTAD + PW0YM001.PW0YMADJ[PW0YWIDX];

    end
    PW0YW00.PW0YWIDX = PW0YW00.PW0YWIDX + 1;

  end

end // end PW0Y614

// Update Shiprec Item records
Function PW0Y615()
   /* ------------------------------------------------------------*/
   /* Update Shiprec Item rows. (dship.vsritm01)*/
   /* ------------------------------------------------------------*/

  set SR3REC empty; /* Clear row storage area*/

  SR3REC.XWHCD = PW0YW01.XWHCD; /* whse code*/
  SR3REC.PK1PKSCH = PW0YW01.PK1PKSCH; /* picking schedule nbr*/
  SR3REC.XGPCD = PW0YW01.XGPCD; /* group code*/
  SR3REC.SY1STNBR = PW0YW01.SY1STNBR; /* style nbr*/
  SR3REC.SY2CLRID = PW0YW01.SY2CLRID; /* colour code*/
  SR3REC.XDMCD = PW0YW01.XDMCD; /* dimension code*/
  SR3REC.XQACD = PW0YW01.XQACD; /* quality code*/
  SR3REC.PC2INSEG = PW0YW01.PC2INSEG;
  SR3REC.XEGCD = PW0YW01.XEGCD;
  SR3REC.XPGCD = PW0YW01.XPGCD;
  SR3REC.XUMCD = PW0YW01.XUMCD;
  SR3REC.XOWCD = PW0YW01.XOWCD;

   /* select ship rec item rows*/
  PW0YS-VSRITM01-SS();

  PW0YW00.PW0YWSRS = "N"; /* shiprec found switch*/

   /* --- fetch shiprec item row ---*/
  PW0YS-VSRITM01-SN(); /* 'sn' dship.vsritm01*/

  while (PW0YW00.PW0YWSRS == "N"
   && SQLCA.VAGen_SQLCODE == 0)

    if (SR3REC.PK1PKSCH == PW0YW01.PK1PKSCH
     && SR3REC.OP1CUOID == PW0YW01.OP1CUOID
     && SR3REC.OP1NORID == PW0YW01.OP1NORID
     && SR3REC.OP2LNINB == PW0YW01.OP2LNINB)
      PW0YW00.PW0YWSRS = "Y"; /* shiprec found switch*/
    else

      /* --- fetch shiprec item row ---*/
      PW0YS-VSRITM01-SN(); /* 'sn' dship.vsritm01*/
    end
  end

   /* close the shiprec item cursor*/
  PW0YS-VSRITM01-CS(); /* 'cs' dhsip.vsritm01*/

  if (PW0YW00.PW0YWSRS != "Y") /* shiprec item found*/

    return;
  end

   /* ------------------------------------------------------------*/
   /* Get all shiprec item size/bin locations*/
   /* ------------------------------------------------------------*/

  PW0YS-VSRITM01-S(); /* 's' dship.vsritm01*/
                                   /* SR1100*/

   /* ------------------------------------------------------------*/
   /* Go through all screen and temporary storage items*/
   /* ------------------------------------------------------------*/

  PW0YW00.PW0YWIDX = 1; /* initialise index*/

  while (PW0YW00.PW0YWIDX <= 10)

    if (PW0YM001.PW0YMARZ[PW0YWIDX] != PW0YW02.PW0YWARZ[PW0YWIDX]
     || PW0YM001.SL5LOCTN[PW0YWIDX] != PW0YW02.SL5LOCTN[PW0YWIDX]
     || PW0YM001.SY4IDDSC[PW0YWIDX] != PW0YW02.SY4IDDSC[PW0YWIDX]
     || PW0YM001.PW0YMADJ[PW0YWIDX] != PW0YW02.PW0YWADJ[PW0YWIDX])

      PW0Y618(); /* process Shiprec changes*/

    end
    PW0YW00.PW0YWIDX = PW0YW00.PW0YWIDX + 1;
  end

end // end PW0Y615

// Process Product Page Back -PF5
Function PW0Y616()
   /* ------------------------------------------------------------*/
   /* Read the previous packing list item record. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW0YW00.PW0YW-IT-INDEX = PW0YW00.PW0YW-IT-INDEX - 1;

  PW0YS-CRS-VSPLIT01(); /* set up crsr for packing list item*/

  PW0YW00.PW0YWPLS = "N";

  while (SQLCA.VAGen_SQLCODE == 0
   && PW0YW00.PW0YWPLS != "Y")

    PW0YS-NXT-VSPLIT01();

    if (PWPREC.XWHCD == PW0YW00.XWH-WHSE-CD[PW0YW-IT-INDEX]
     && PWPREC.PKDNCSQN == PW0YW00.PK-CRTN-SEQ-NBR[PW0YW-IT-INDEX]
     && PWPREC.PWPTOSQN == PW0YW00.PK-TOTE-SEQ-NBR[PW0YW-IT-INDEX])
      PW0YW00.PW0YWPLS = "Y"; /* Previous item record*/
    end
  end

  PW0YS35(); /* Check packing list item*/

   /* ------------------------------------------------------------*/
   /* Purge temporary storage once next product is found*/
   /* ------------------------------------------------------------*/

  PW0YS01(); /* Purge temporary storage*/

   /* ------------------------------------------------------------*/
   /* A packing list item row was found and so set up the*/
   /* keys in w01.*/
   /* ------------------------------------------------------------*/

  PW0YS-MV-PWPREC-01(); /* Set up the keys in w01*/

  PW0YS-LOAD-SIZE-TS(); /* Load temporary storage*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW0YW00.XXXTSPAG = 1;
  PW0YW00.PW0YWSWR = "N"; /* Request for data switch*/
  PW0YW01.CACHGFL = "Y"; /* Data is available for change*/

end // end PW0Y616

// Process Product Page Fwd (PF6)
Function PW0Y617()
   /* ------------------------------------------------------------*/
   /* Get the next packing list item record. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW0YS-CRS-VSPLIT01();

  PW0YW00.PW0YWPLS = "N";

  while (SQLCA.VAGen_SQLCODE == 0
   && PW0YW00.PW0YWPLS != "Y")
    PW0YS-NXT-VSPLIT01();
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(375); /* No more carton/tote data*/
      PW0YW00.XXXLOCID = "617";

      PW0YS-CLS-VSPLIT01();
      return;
    else

      PW0YS-CMPARE-SPLIT(); /* Check fields for new item*/
    end
  end

  if (PW0YW00.PW0YWPLS == "Y") /* New item found*/
    PW0YS-LOAD-ITEMS(); /* Load key fields for new item*/
  end

  PW0YS35(); /* Check the packing list item*/

   /* ------------------------------------------------------------*/
   /* Purge temporary storage once next product is found*/
   /* ------------------------------------------------------------*/

  PW0YS01(); /* Purge temporary storage*/

   /* ------------------------------------------------------------*/
   /* A packing list item row (dpick.vsplit01) was found so set*/
   /* up the keys in w01.*/
   /* ------------------------------------------------------------*/

  PW0YS-MV-PWPREC-01(); /* Set up the keys in w01*/

  PW0YS-LOAD-SIZE-TS(); /* Load temporary storage*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW0YW00.XXXTSPAG = 1;
  PW0YW00.PW0YWSWR = "N"; /* Request for data switch*/
  PW0YW01.CACHGFL = "Y"; /* Data is available for change*/

end // end PW0Y617

// Process shiprec items
Function PW0Y618()
   /* ------------------------------------------------------------*/
   /* Process Shiprec Item*/
   /* ------------------------------------------------------------*/

  PW0YW00.PW0YWNEW = "N";
  PW0YW00.PW0YWIX2 = 1;

   /* ------------------------------------------------------------*/
   /* Go through all Items selected looking for the old and new*/
   /* ------------------------------------------------------------*/

  while (PW0YW00.PW0YWIX2 <= 350
   && SR3REC.SY5SZID[PW0YWIX2] != 0)

    /* --------- if old is found --------------------------------*/
    if (PW0YW02.XARCD[PW0YWIDX] == SR3REC.XARCD[PW0YWIX2]
     && PW0YW02.SL4ZONE[PW0YWIDX] == SR3REC.SL4ZONE[PW0YWIX2]
     && PW0YW02.SL5LOCTN[PW0YWIDX] == SR3REC.SL5LOCTN[PW0YWIX2]
     && PW0YW02.SY5SZID[PW0YWIDX] == SR3REC.SY5SZID[PW0YWIX2])

      /* --------- if key change --------------------------------*/
      if (PW0YM001.PW0YMARZ[PW0YWIDX] != PW0YW02.PW0YWARZ[PW0YWIDX]
       || PW0YM001.SL5LOCTN[PW0YWIDX] != PW0YW02.SL5LOCTN[PW0YWIDX]
       || PW0YM001.SY4IDDSC[PW0YWIDX] != PW0YW02.SY4IDDSC[PW0YWIDX])

        PW0YW00.PW0YWADJ = PW0YW02.PK1QTY[PW0YWIDX];

        SR3REC.SR3QTYSH[PW0YWIX2] = SR3REC.SR3QTYSH[PW0YWIX2] - PW0YW00.PW0YWADJ;

        if (SR3REC.SR3QTYSH[PW0YWIX2] < 0)
          PW0YS99(); /* cause abend*/
        end
      end
    end

    /* --------- if new is found --------------------------------*/
    PW0YW00.PW0YWARZ = PW0YM001.PW0YMARZ[PW0YWIDX];

    if (PW0YW00.XARCD == SR3REC.XARCD[PW0YWIX2]
     && PW0YW00.SL4ZONE == SR3REC.SL4ZONE[PW0YWIX2]
     && PW0YM001.SL5LOCTN[PW0YWIDX] == SR3REC.SL5LOCTN[PW0YWIX2]
     && PW0YW02.PW0YWSIZ[PW0YWIDX] == SR3REC.SY5SZID[PW0YWIX2])

      PW0YW00.PW0YWNEW = "Y";
      /* --------- if key change -------------------------------*/
      if (PW0YM001.PW0YMARZ[PW0YWIDX] != PW0YW02.PW0YWARZ[PW0YWIDX]
       || PW0YM001.SL5LOCTN[PW0YWIDX] != PW0YW02.SL5LOCTN[PW0YWIDX]
       || PW0YM001.SY4IDDSC[PW0YWIDX] != PW0YW02.SY4IDDSC[PW0YWIDX])

        PW0YW00.PW0YWADJ = PW0YW02.PK1QTY[PW0YWIDX] + PW0YM001.PW0YMADJ[PW0YWIDX];

        SR3REC.SR3QTYSH[PW0YWIX2] = SR3REC.SR3QTYSH[PW0YWIX2] + PW0YW00.PW0YWADJ;

        if (SR3REC.SR3QTYSH[PW0YWIX2] < 0)
          PW0YS99(); /* cause abend*/
        end

      else
        /* ---------- no key change -----------------------------*/
        PW0YW00.PW0YWADJ = PW0YM001.PW0YMADJ[PW0YWIDX];

        SR3REC.SR3QTYSH[PW0YWIX2] = SR3REC.SR3QTYSH[PW0YWIX2] + PW0YW00.PW0YWADJ;

        if (SR3REC.SR3QTYSH[PW0YWIX2] < 0)
          PW0YS99(); /* cause abend*/
        end
      end

      PW0YW02.SR3QTYAL[PW0YWIDX] = SR3REC.SR3QTYAL[PW0YWIX2];
      PW0YW02.SR3QTYSH[PW0YWIDX] = SR3REC.SR3QTYSH[PW0YWIX2];
    end
    PW0YW00.PW0YWIX2 = PW0YW00.PW0YWIX2 + 1;

  end

   /* ------------------------------------------------------------*/
   /* If the item was not found, add the item to the end.*/
   /* ------------------------------------------------------------*/

  if (PW0YW00.PW0YWNEW == "N") /* new key was not found*/

    PW0YW00.PW0YWARZ = PW0YM001.PW0YMARZ;
    SR3REC.XARCD[PW0YWIX2] = PW0YW00.XARCD;
    SR3REC.SL4ZONE[PW0YWIX2] = PW0YW00.SL4ZONE;
    SR3REC.SL5LOCTN[PW0YWIX2] = PW0YM001.SL5LOCTN;

    if (PW0YW02.PW0YWSIZ[PW0YWIDX] > 0)
      SR3REC.SY5SZID[PW0YWIX2] = PW0YW02.PW0YWSIZ[PW0YWIDX];
    else
      SR3REC.SY5SZID[PW0YWIX2] = PW0YW02.SY5SZID[PW0YWIDX];
    end

    PW0YW00.PW0YWADJ = PW0YW02.PK1QTY[PW0YWIDX] + PW0YM001.PW0YMADJ[PW0YWIDX];

    SR3REC.SR3QTYSH[PW0YWIX2] = PW0YW00.PW0YWADJ;
    PW0YW02.SR3QTYSH[PW0YWIDX] = SR3REC.SR3QTYSH[PW0YWIX2];
  end

   /* --- add adjustment qty to carton total quantities ---*/

  PW0YW00.PW0YWADJ = PW0YM001.PW0YMADJ[PW0YWIDX];

  PW0YW00.PW0YWTQY = PW0YW00.PW0YWTQY + PW0YW00.PW0YWADJ; /* total quantity*/

   /* --- ship rec order row ---*/
  SR2REC.SR2QTYSH = SR2REC.SR2QTYSH + PW0YW00.PW0YWADJ; /* total ship qty*/

  VAZCTN01.PK-CRTN-UNIT-QTY = VAZCTN01.PK-CRTN-UNIT-QTY + PW0YW00.PW0YWADJ; /* total quantity*/

  VAZORD01.OP-ORD-TOT-UNITS = VAZORD01.OP-ORD-TOT-UNITS + PW0YW00.PW0YWADJ; /* total quantity*/

  PW0YW00.PW0YWDOL = PW0YW00.PW0YWADJ * SR3REC.OP2AUPRC; /* adj dollar*/

  PW0YW00.PW0YWTDL = PW0YW00.PW0YWTDL + PW0YW00.PW0YWDOL; /* total dollar*/

end // end PW0Y618

// Calculate Crtn Repack time
Function PW0Y619()
   /* ------------------------------------------------------------*/
   /* Calculate pack time for original and new carton*/
   /* ------------------------------------------------------------*/

  PW0YW00.PW0YWPTM = 0;

  if (PWPREC.PWPPKTCD == "FC") /* full case*/
    return;
  end

  set PKDREC empty; /* Clear database row*/
  PKDREC.XWHCD = PW0YW01.XWHCD;

  PW0YS-VPKCTL01-S(); /* 's' dpick.vpkctl01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    PW0YW00.PW0YWPTM = PKDREC.PKDDHDPM;
  end

  PW0YW00.XGPCD = PWPREC.XGPCD;
  if (PWPREC.XHDCD[1] > " ")
    PW0YW00.XHDCD = PWPREC.XHDCD[1];
    if (PW0YW00.XHDKEY in XHDTBL.XHDKEY)
      PW0YW00.PW0YWPTM = PW0YW00.PW0YWPTM + XHDTBL.XHDSHMM[sysVar.arrayIndex];
    end
  end

  if (PWPREC.XHDCD[2] > " ")
    PW0YW00.XHDCD = PWPREC.XHDCD[2];
    if (PW0YW00.XHDKEY in XHDTBL.XHDKEY)
      PW0YW00.PW0YWPTM = PW0YW00.PW0YWPTM + XHDTBL.XHDSHMM[sysVar.arrayIndex];
    end
  end

  if (PWPREC.XHDCD[3] > " ")
    PW0YW00.XHDCD = PWPREC.XHDCD[3];
    if (PW0YW00.XHDKEY in XHDTBL.XHDKEY)
      PW0YW00.PW0YWPTM = PW0YW00.PW0YWPTM + XHDTBL.XHDSHMM[sysVar.arrayIndex];
    end
  end

  if (PWPREC.XHDCD[4] > " ")
    PW0YW00.XHDCD = PWPREC.XHDCD[4];
    if (PW0YW00.XHDKEY in XHDTBL.XHDKEY)
      PW0YW00.PW0YWPTM = PW0YW00.PW0YWPTM + XHDTBL.XHDSHMM[sysVar.arrayIndex];
    end
  end

  if (PWPREC.XHDCD[5] > " ")
    PW0YW00.XHDCD = PWPREC.XHDCD[5];
    if (PW0YW00.XHDKEY in XHDTBL.XHDKEY)
      PW0YW00.PW0YWPTM = PW0YW00.PW0YWPTM + XHDTBL.XHDSHMM[sysVar.arrayIndex];
    end
  end
end // end PW0Y619

// Format Lookup Keys
Function PW0Y620()
   /* ------------------------------------------------------------*/
   /* Update the key data.*/
   /* If new key entered, use the tote and carton number.*/
   /* If gpc cd, style, clr, or dim is changed, use all fields*/
   /* ------------------------------------------------------------*/

  if (PW0YW00.PW0YWNKS == "Y") /* new key entered*/

    PW0YW01.PW0YWLUK = " "; /* lookup keys*/

    /* ----- use new tote if is has been changed ---------*/
    if (PW0YW01.XWHCD == "51"
     || PW0YW01.XWHCD == "42")
      PW0YW01.PW0YWTOT = PW0YM001.PW0YMTOT;
    else
      PW0YW01.PW0YWTOT = 0;
    end

    PW0YW01.PW0YWCTN = PW0YM001.PW0YMCTN; /* carton nbr*/
    PW0YW01.XWHCD = PW0YM001.XWHCD; /* warehouse*/
    if (PW0YW01.XWHCD in XWHTBL.XWHCD)
      PW0YW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    end
    PW0YW01.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country code*/

    if (PW0YM001.XGPCD != PW0YW01.XGPCD
     || PW0YM001.SY1STNBR != PW0YW01.SY1STNBR
     || PW0YM001.SY2CLRID != PW0YW01.SY2CLRID
     || PW0YM001.XDMCD != PW0YW01.XDMCD)

      PW0YW01.PW0YWGPC = PW0YM001.XGPCD;
      PW0YW01.PW0YWSTY = PW0YM001.SY1STNBR;
      PW0YW01.PW0YWCLR = PW0YM001.SY2CLRID;
      PW0YW01.PW0YWDIM = PW0YM001.XDMCD;
      PW0YW01.PW0YWTOT = 0;

    end

    if (PW0YM001.XQACD != PW0YW01.XQACD
     || PW0YM001.PC2INSEG != PW0YW01.PC2INSEG
     || PW0YM001.XEGCD != PW0YW01.XEGCD
     || PW0YM001.XPGCD != PW0YW01.XPGCD
     || PW0YM001.XUMCD != PW0YW01.XUMCD
     || PW0YM001.XOWCD != PW0YW01.XOWCD)

      PW0YW01.PW0YWQUA = PW0YM001.XQACD;
      PW0YW01.PW0YWISG = PW0YM001.PC2INSEG;
      PW0YW01.PW0YWEDF = PW0YM001.XEGCD;
      PW0YW01.PW0YWPKG = PW0YM001.XPGCD;
      PW0YW01.PW0YWUOM = PW0YM001.XUMCD;
      PW0YW01.PW0YWOGC = PW0YM001.XOWCD;
      PW0YW01.PW0YWTOT = 0;

    end
  end

end // end PW0Y620

// ASN Send/Resend Process
Function PW0Y700()
  /* -----------------------------------------------------------*/
  /* This process creates the MOVERS DOWNLOAD JOB.*/
  /* -----------------------------------------------------------*/

  PW0YS-70001(); /* check for CICS region*/

  if (TA3REC.TA3RGNID == "03") /* PROD Region*/
    PW0Y-70010(); /* format Production JCL ASN Create*/
  else
    PW0Y-70020(); /* format Development JCL ASN Create*/
  end

end // end PW0Y700

// Carton Reinstate Process
Function PW0Y710()
  /* -----------------------------------------------------------*/
  /* This process creates the MOVERS DOWNLOAD JOB.*/
  /* -----------------------------------------------------------*/

  PW0YS-70001(); /* check for CICS region*/

  if (TA3REC.TA3RGNID == "03") /* PROD Region*/
    PW0Y-71010(); /* format Production JCL ASN Create*/
  else
    PW0Y-71020(); /* format Development JCL ASN Create*/
  end

end // end PW0Y710

// Determine CICS Region
Function PW0YS-70001()
   /* -------------------------------------------------------------*/
   /* Find out the environment in which the current program is*/
   /* running.*/
   /*  */
   /* If the Program is running in Production Region, the*/
   /* Production JCL will be executed.*/
   /* If the Progam is running in the Test Region, the JCL will be*/
   /* executed using DSNT, DSND or DNSF.*/
   /*  */
   /* Note: All versions of JCL are found in TS09T01*/
   /*  */
   /* -------------------------------------------------------------*/

  set TA3REC empty;

  TA3REC.TA3OPTN = "ASSIGN";

  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)         

    return;
  end

end // end PW0YS-70001

// Submit JCL TO Internal Reader
Function PW0YS-70011()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PW0YW00.PW0YW-JOB-SUB-SW = "Y";
    return;
  end

end // end PW0YS-70011

// get apparel packing list item
Function PW0YS-APPRL-VSPLIT()
   /* -----------------------------------------------------------*/
   /* If tote and carton number are entered, use s7.*/
   /* If only tote is entered, use s2.*/
   /* If only carton number is entered, use s1.*/
   /* -----------------------------------------------------------*/

  if (PW0YM001.PW0YMTOT != 0) /* tote entered*/
    if (PW0YM001.PW0YMCTN != 0) /* carton nbr entered*/
      PW0YS-VSPLIT01-S7(); /* 's7' dpick.vsplit01*/
    else
      PW0YS-VSPLIT01-S2(); /* 's2' dpick.vsplit01*/
    end
  else /* only carton nbr entered*/
    set PWPREC empty; /* clear record storage area*/
    PWPREC.XWHCD = PW0YM001.XWHCD;
    PWPREC.PKDNCSQN = PW0YM001.PW0YMCTN;
    PW0YS-VSPLIT01-S1(); /* 's1' dpick.vsplit01*/
  end

end // end PW0YS-APPRL-VSPLIT

// Check for carton consolidation
Function PW0YS-CHK-CNSLD()
   /* -----------------------------------------------------------*/
   /* Determine if data is consolidated/zone consolidated*/
   /* -----------------------------------------------------------*/

  if (PW0YW01.XWHCD == "51" /* No consolidation at Memphis Apparel*/
   || PW0YW01.XWHCD == "42") /* No consolidation at Canada Apparel*/
    PW0YS-RTV-APPAREL(); /* Retrieve all totes*/

  else
    if (PWPREC.PK-CNSLD-FL == "N" /* No consolidation*/
     && PWPREC.PK-ZONE-CNSLD-FL == "N") /* No zone consolidation*/

    else
      if (PWPREC.PK-CNSLD-FL == "Y") /* Consolidation*/
        PW0YW00.PW0YW-CNSLD-TYPE-IND = "1";
      else /* Zone consolidation*/
        PW0YW00.PW0YW-CNSLD-TYPE-IND = "2";
      end
      PW0YS-CLS-VSPLIT01(); /* Close 'old' packing list item cursor*/
      PW0YS-VSPLIT01-S6(); /* Declare 'new' packing list item cursor*/
      PW0YS-NXT-VSPLIT01(); /* Retrieve first packing list item rec*/
    end
  end

end // end PW0YS-CHK-CNSLD

// Check for correct carton/tote
Function PW0YS-CHK-TOTE()
   /* -----------------------------------------------------------*/
   /* Check for correct carton/tote*/
   /* -----------------------------------------------------------*/

  if (PW0YM001.PW0YMCTN == PWPREC.PKDNCSQN /* Correct carton*/
   && PW0YM001.PW0YMTOT == PWPREC.PWPTOSQN) /* Correct tote*/

  else
    while (SQLCA.VAGen_SQLCODE == 0
     && PW0YM001.PW0YMCTN != PWPREC.PKDNCSQN
     && PW0YM001.PW0YMTOT != PWPREC.PWPTOSQN)
      PW0YS-NXT-VSPLIT01(); /* Fetch next item*/
    end
  end

end // end PW0YS-CHK-TOTE

// Close Packing List Item cursor
Function PW0YS-CLS-VSPLIT01()
   /* -----------------------------------------------------------*/
   /* Close cursor for packing list item. (dpick.vsplit01)*/
   /* -----------------------------------------------------------*/

  if (PW0YW00.PW0YW-SPLIT-CSR-IND == "1")
    PW0YS-VSPLIT01-C1(); /* close carton only csr*/
  else
    if (PW0YW00.PW0YW-SPLIT-CSR-IND == "2")
      PW0YS-VSPLIT01-C2(); /* close tote only csr*/
    else
      if (PW0YW00.PW0YW-SPLIT-CSR-IND == "6")
        PW0YS-VSPLIT01-C6(); /* close consolidated crtncsr*/
      else
        PW0YS-VSPLIT01-C7(); /* close tote and carton csr*/
      end
    end
  end

end // end PW0YS-CLS-VSPLIT01

// Check for new consolidated itm
Function PW0YS-CMPARE-CNSLD()
   /* ------------------------------------------------------------*/
   /* Check for new consolidated item.*/
   /* ------------------------------------------------------------*/

  if (PWPREC.XGPCD > PW0YW00.XGP-GPC-CD[PW0YW-IT-INDEX]
   || PWPREC.SY1STNBR > PW0YW00.SY-STY-NBR[PW0YW-IT-INDEX])
    PW0YW00.PW0YWPLS = "Y";
  else
    if (PWPREC.XGPCD == PW0YW00.XGP-GPC-CD[PW0YW-IT-INDEX]
     && PWPREC.SY1STNBR == PW0YW00.SY-STY-NBR[PW0YW-IT-INDEX])
      if (PWPREC.SY2CLRID > PW0YW00.SY-COLR-CD-ID[PW0YW-IT-INDEX])
        PW0YW00.PW0YWPLS = "Y";
      else
        if (PWPREC.SY2CLRID == PW0YW00.SY-COLR-CD-ID[PW0YW-IT-INDEX])
          if (PWPREC.XDMCD > PW0YW00.XDM-DIM-CD[PW0YW-IT-INDEX]
           || PWPREC.XQACD > PW0YW00.XQA-QUAL-CD[PW0YW-IT-INDEX]
           || PWPREC.XOWCD > PW0YW00.XOW-OWN-GRP-CD[PW0YW-IT-INDEX]
           || PWPREC.PC2INSEG > PW0YW00.PC-CU-IN-SEG-CD[PW0YW-IT-INDEX]
           || PWPREC.XEGCD > PW0YW00.XEG-ENGR-DIFF-CD[PW0YW-IT-INDEX]
           || PWPREC.XPGCD > PW0YW00.XPG-PKG-TYP-CD[PW0YW-IT-INDEX]
           || PWPREC.XUMCD > PW0YW00.XUM-UOM-CD[PW0YW-IT-INDEX]
           || PWPREC.PKDNCSQN > PW0YW00.PK-CRTN-SEQ-NBR[PW0YW-IT-INDEX]
           || PWPREC.PWPTOSQN > PW0YW00.PK-TOTE-SEQ-NBR[PW0YW-IT-INDEX])
            PW0YW00.PW0YWPLS = "Y";
          end
        end
      end
    end
  end

end // end PW0YS-CMPARE-CNSLD

// Check for New Item
Function PW0YS-CMPARE-SPLIT()
   /* ------------------------------------------------------------*/
   /* Check Packing List Item key fields for new item.*/
   /* (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  if (PW0YW00.PW0YW-SPLIT-CSR-IND == "6") /* Consolidated Carton*/
    PW0YS-CMPARE-CNSLD(); /* check for item*/
  else /* Non-consolidated Carton*/
    if (PWPREC.PKDNCSQN > PW0YW00.PK-CRTN-SEQ-NBR[PW0YW-IT-INDEX]
     || PWPREC.PWPTOSQN > PW0YW00.PK-TOTE-SEQ-NBR[PW0YW-IT-INDEX])
      PW0YW00.PW0YWPLS = "Y";
    end
  end

end // end PW0YS-CMPARE-SPLIT

// Declare cursor for vsplit01
Function PW0YS-CRS-VSPLIT01()
   /* -----------------------------------------------------------*/
   /* Set up a cursor on the packing list item table.*/
   /* (dpick.vsplit01)*/
   /* -----------------------------------------------------------*/

  if (converseVar.eventKey not pf11)
    PW0YW12.SAVE-SPLIT-CSR-IND = PW0YW00.PW0YW-SPLIT-CSR-IND;
  end

  if (PW0YW00.PW0YW-SPLIT-CSR-IND == "1")
    PW0YS-VSPLIT01-S1(); /* build csr with carton nbr*/
  else
    if (PW0YW00.PW0YW-SPLIT-CSR-IND == "2")
      PW0YS-VSPLIT01-S2(); /* build csr with tote nbr*/
    else
      if (PW0YW00.PW0YW-SPLIT-CSR-IND == "6")
        PW0YS-VSPLIT01-S6(); /* build consolidated crtn csr*/
      else
        PW0YS-VSPLIT01-S7(); /* build crsr with tote & crtn*/
      end
    end
  end

end // end PW0YS-CRS-VSPLIT01

// Ship Rec Chgs for Deleted Crtn
Function PW0YS-CRTN-DEL()
   /* ------------------------------------------------------------*/
   /* Update the Ship rec order table. (dship.vsrord01)*/
   /*  */
   /* Note: Update the number of cartons in the Order for the*/
   /* the schedule (pk-nbr-og-cartons).*/
   /* Update the number of cartons in the Bill of Lading*/
   /* (sr-tot-nbr-crtn)*/
   /* ------------------------------------------------------------*/

  PW0YW00.PW0YW-W05-IDX = 1; /* initialise index*/
  PW0YW00.PW0YW-SRORD-UPD-SW = "N";

   /* --- Build csr on the Ship Rec Order Table ---*/
  set SR2REC empty; /* initialise database row*/

  SR2REC.XWHCD = PW0YW01.XWHCD;
  SR2REC.PK1BLLAD = PW0YW01.PK1BLLAD;
  SR2REC.SR2BLLSU = PW0YW01.SR2BLLSU;

  PW0YS-VSRORD01-S3(); /* 's3' dship.vsrord01*/

   /* --- Fetch first ship rec order row ---*/
  PW0YS-VSRORD01-N3(); /* 'f3' dship.vsrord01*/

  while (SQLCA.VAGen_SQLCODE == 0)

    if (PW0YW01.PK1PKSCH == SR2REC.PK1PKSCH
     && PW0YW01.OP1CUOID == SR2REC.OP1CUOID
     && PW0YW01.OP1NORID == SR2REC.OP1NORID
     && SR3REC.OP1NTMAL == SR2REC.OP1NTMAL)

      if (PW0YW00.PW0YW-SRORD-UPD-SW == "N")
        SR2REC.SR2QTYSH = SR2REC.SR2QTYSH + PW0YW00.PW0YWTQY;
        SR2REC.SR2DLRAM = SR2REC.SR2DLRAM + PW0YW00.PW0YWTDL;

        SR2REC.SR-EST-PK-WT = SR2REC.SR-EST-PK-WT + PW0YW00.PW0YW-NEW-SIZE-WT;

        if (PW0YW-CARTON-ZEROED-FL == "Y")

          SR2REC.SR-EST-PK-WT = SR2REC.SR-EST-PK-WT - PWPREC.PK-EXPC-CRTN-WT;

          PWOREC.PK-EXPC-TOT-PL-WT = PWOREC.PK-EXPC-TOT-PL-WT + PW0YW00.PW0YW-NEW-SIZE-WT;

          PWOREC.PK-EXPC-TOT-PL-WT = PWOREC.PK-EXPC-TOT-PL-WT - PWPREC.PK-EXPC-CRTN-WT;

          PWPREC.PK-EXPC-CRTN-WT = 0;
        end

        PW0YW00.PW0YW-SRORD-UPD-SW = "Y";
        PW0YW00.OP1TBREP = SR2REC.OP1TBREP;

        if (PW0YW-CARTON-ZEROED-FL == "Y")
          SR2REC.PK1NBCTN = SR2REC.PK1NBCTN - 1;

          PW0YS-VAZCTN01-SQ();

          if (SQLCA.VAGen_SQLCODE == 100)
            VAZCTN01.PK-CRTN-SEQ-NBR = VAZCIT01.PK-CRTN-SEQ-NBR;
            SR2REC.SR1PKAFL = "Y";
            SR2REC.SR1PKSFL = "Y";
            SR2REC.SR1PKSDT = XX0XW01.XX0XWDAT;

            PW0YS-VAZCTN01-SU();

            if (SQLCA.VAGen_SQLCODE == 100)
              PW0YW00.PW0YW-LAST-CTN-DEL-SW = "Y";
            end
          end
        end
      end
    end

     /* --- nbr of cartons per bill of lading ---*/

    if (PW0YW-CARTON-ZEROED-FL == "Y")
      SR2REC.SR2TNBCT = SR2REC.SR2TNBCT - 1;
    end

    /* --- Update Ship Rec Order row ---*/
    SR2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    SR2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PW0YS-VSRORD01-U(); /* 'u' dship.vsrord01*/

    /* --- fetch next Ship Rec Order row ---*/
    PW0YS-VSRORD01-N3(); /* 'f3' dship.vsrord01*/
  end

   /* --- close ship rec order csr ---*/
  PW0YS-VSRORD01-C3(); /* 'c3' dship.vsrord01*/

end // end PW0YS-CRTN-DEL

// Load packing list items to tbl
Function PW0YS-LOAD-ITEMS()
   /* ------------------------------------------------------------*/
   /* Increment packing list item index*/
   /* ------------------------------------------------------------*/

  PW0YW00.PW0YW-IT-INDEX = PW0YW00.PW0YW-IT-INDEX + 1;

   /* ------------------------------------------------------------*/
   /* Load packing list items into table*/
   /* ------------------------------------------------------------*/

  PW0YW00.XWH-WHSE-CD[PW0YW-IT-INDEX] = PWPREC.XWHCD;
  PW0YW00.PK-CRTN-SEQ-NBR[PW0YW-IT-INDEX] = PWPREC.PKDNCSQN;
  PW0YW00.PK-TOTE-SEQ-NBR[PW0YW-IT-INDEX] = PWPREC.PWPTOSQN;
  PW0YW00.XGP-GPC-CD[PW0YW-IT-INDEX] = PWPREC.XGPCD;
  PW0YW00.SY-STY-NBR[PW0YW-IT-INDEX] = PWPREC.SY1STNBR;
  PW0YW00.SY-COLR-CD-ID[PW0YW-IT-INDEX] = PWPREC.SY2CLRID;
  PW0YW00.XDM-DIM-CD[PW0YW-IT-INDEX] = PWPREC.XDMCD;
  PW0YW00.XQA-QUAL-CD[PW0YW-IT-INDEX] = PWPREC.XQACD;
  PW0YW00.XOW-OWN-GRP-CD[PW0YW-IT-INDEX] = PWPREC.XOWCD;
  PW0YW00.PC-CU-IN-SEG-CD[PW0YW-IT-INDEX] = PWPREC.PC2INSEG;
  PW0YW00.XEG-ENGR-DIFF-CD[PW0YW-IT-INDEX] = PWPREC.XEGCD;
  PW0YW00.XPG-PKG-TYP-CD[PW0YW-IT-INDEX] = PWPREC.XPGCD;
  PW0YW00.XUM-UOM-CD[PW0YW-IT-INDEX] = PWPREC.XUMCD;

end // end PW0YS-LOAD-ITEMS

// Load Size Data to Temp Storage
Function PW0YS-LOAD-SIZE-TS()
   /* ------------------------------------------------------------*/
   /* Get the style description*/
   /* ------------------------------------------------------------*/

  set PKNREC empty;

  PKNREC.XGPCD = PWPREC.XGPCD; /* group code*/
  PKNREC.SY1STNBR = PWPREC.SY1STNBR; /* style nbr*/
  PKNREC.SY2CLRID = PWPREC.SY2CLRID; /* colour id*/
  PKNREC.XDMCD = PWPREC.XDMCD; /* dimension code*/

  PW0YS-VPKSTY01-S();

   /* ------------------------------------------------------------*/
   /* Move the rest of the keys*/
   /* ------------------------------------------------------------*/

  PW0YW01.SWCLNENB = PWPREC.SWCLNENB;
  PW0YW01.SY1SSTNM = PKNREC.SY1SSTNM;
  PW0YW01.PW0YWPRT = 0;

   /* ------------------------------------------------------------*/
   /* Get the size scale*/
   /* ------------------------------------------------------------*/

  PW0YS34();

   /* ------------------------------------------------------------*/
   /* Get all sizes and load into temp storage*/
   /* ------------------------------------------------------------*/

  set VSPLSZ02 empty; /* Clear database record*/

  VSPLSZ02.XWHCD = PW0YW01.XWHCD; /* whse cd*/
  VSPLSZ02.TSIPLNBR = PW0YW01.TSIPLNBR; /* packing list nbr*/
  VSPLSZ02.OP1PARTN = PW0YW01.OP1PARTN; /* order part char*/
  VSPLSZ02.OP1CUOID = PW0YW01.OP1CUOID; /* customer order nbr*/
  VSPLSZ02.OP1NORID = PW0YW01.OP1NORID; /* nike ord id*/
  VSPLSZ02.OP2LNINB = PW0YW01.OP2LNINB; /* line item nbr*/
  VSPLSZ02.PWPTOSQN = PW0YW01.PWPTOSQN; /* tote number*/
  VSPLSZ02.PKDNCSQN = PW0YW01.PKDNCSQN; /* carton seq nbr*/

  PW0YS-VSPLSZ01-S1(); /* build packing list size crsr*/

  PW0YW00.PW0YW-NBR-DETAIL-LN = 0;
  PW0YW00.PW0YW-NBR-DETAIL-SV = 0;

  PW0YS-VSPLSZ01-N1(); /* fetch packing list size row*/

  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(375); /* no more data*/
    PW0YW00.XXXLOCID = "100 ";
    PW0YW01.CACHGFL = "N";
    return;
  end

  PW0YW00.PW0YWIDX = 1;
  while (SQLCA.VAGen_SQLCODE == 0)

    /* -----------------------------------------------------*/
    /* load size data into temporary storage*/
    /* -----------------------------------------------------*/

    PW0YW00.PW0YW-NBR-DETAIL-LN = PW0YW00.PW0YW-NBR-DETAIL-LN + 1;
    PW0YW00.PW0YW-NBR-DETAIL-SV = PW0YW00.PW0YW-NBR-DETAIL-SV + 1;
    PW0YW02.SY5SZID[PW0YWIDX] = VSPLSZ02.SY5SZID;
    PW0YW02.PW0YWSIZ[PW0YWIDX] = VSPLSZ02.SY5SZID;

    if (VSPLSZ02.SY5SZID in SYPREC.SY5SZID)
      PW0YW02.SY4IDDSC[PW0YWIDX] = SYPREC.SY4IDDSC[sysVar.arrayIndex];
    end

    PW0YW02.XARCD[PW0YWIDX] = VSPLSZ02.XARCD;
    PW0YW02.SL4ZONE[PW0YWIDX] = VSPLSZ02.SL4ZONE;
    PW0YW02.SL5LOCTN[PW0YWIDX] = VSPLSZ02.SL5LOCTN;
    PW0YW02.PK1QTY[PW0YWIDX] = VSPLSZ02.PK1QTY;
    PW0YW02.ALCQTY[PW0YWIDX] = VSPLSZ02.ALCQTY;
    PW0YW02.ZZZCHGCT[PW0YWIDX] = VSPLSZ02.ZZZCHGCT;

    PW0YW01.PW0YWPRT = PW0YW01.PW0YWPRT + VSPLSZ02.PK1QTY;
    PW0YW02.PW0YWADJ[PW0YWIDX] = 0;

    PW0YS-VSPLSZ01-N1(); /* 'n1' dpick.vsplsz01*/

    /* -----------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* (after translating all sizes on the page)*/
    /* -----------------------------------------------------------*/

    if (PW0YW00.PW0YWIDX == 10) /* Page is full*/

      PW0YW02.PW0YWNLD = PW0YW00.PW0YWIDX;
                                   /* Nbr of lines loaded*/
      PW0YS13(); /* Add page to temp storage*/
    else
      PW0YW00.PW0YWIDX = PW0YW00.PW0YWIDX + 1;
    end
  end

  PW0YS-VSPLSZ01-C1(); /* close packing list size crsr*/

   /* -----------------------------------------------------------*/
   /* Add any partially filled page to the storage queue.*/
   /* -----------------------------------------------------------*/

  if (PW0YW00.PW0YWIDX > 1) /* Page is partially full*/

    PW0YW02.PW0YWNLD = PW0YW00.PW0YWIDX - 1;
    PW0YS13(); /* Add page to temp storage*/
  end

   /* -----------------------------------------------------------*/
   /* Now add a blank page for adds*/
   /* -----------------------------------------------------------*/

  PW0YW02.PW0YWNLD = 0;
  PW0YS13(); /* Add page to temp storage;*/

end // end PW0YS-LOAD-SIZE-TS

// Move PWPREC Data to PW0YW01
Function PW0YS-MV-PWPREC-01()
   /* -----------------------------------------------------------*/
   /* Set up the keys in the pw0yW01 w/s record with the*/
   /* packing list item data.*/
   /* -----------------------------------------------------------*/

  PW0YW01.TSIPLNBR = PWPREC.TSIPLNBR;
  PW0YW01.OP1PARTN = PWPREC.OP1PARTN;
  PW0YW01.OP1CUOID = PWPREC.OP1CUOID;
  PW0YW01.OP1NORID = PWPREC.OP1NORID;
  PW0YW01.OP2LNINB = PWPREC.OP2LNINB;
  PW0YW01.PKDNCSQN = PWPREC.PKDNCSQN;
  PW0YW01.PW0YWCTN = PWPREC.PKDNCSQN; /* this will help paging*/
  PW0YW01.PWPTOSQN = PWPREC.PWPTOSQN;
  PW0YW01.PK1PKSCH = PWPREC.PK1PKSCH;
  PW0YW01.XGPCD = PWPREC.XGPCD;
  PW0YW01.SY1STNBR = PWPREC.SY1STNBR;
  PW0YW01.SY2CLRID = PWPREC.SY2CLRID;
  PW0YW01.XDMCD = PWPREC.XDMCD;
  PW0YW01.XQACD = PWPREC.XQACD;
  PW0YW01.XOWCD = PWPREC.XOWCD;
  PW0YW01.PC2INSEG = PWPREC.PC2INSEG;
  PW0YW01.XEGCD = PWPREC.XEGCD;
  PW0YW01.XPGCD = PWPREC.XPGCD;
  PW0YW01.XUMCD = PWPREC.XUMCD;
  PW0YW01.YNTCD = PWPREC.YNTCD;
  PW0YW01.PWP1OF1F = PWPREC.PWP1OF1F;
  PW0YW01.PWPPKTCD = PWPREC.PWPPKTCD;
  PW0YW01.TSOCRTNB = PWPREC.TSOCRTNB;
  PW0YW01.ZZZCHGCT = PWPREC.ZZZCHGCT;

end // end PW0YS-MV-PWPREC-01

// Calculate Expected Weight
Function PW0YS-NEW-CRTNWT()
   /* ------------------------------------------------------------*/
   /* Calculate expected weight for new carton*/
   /* ------------------------------------------------------------*/

  set PKNREC empty;

  PKNREC.XGPCD = PW0YW01.XGPCD; /* group code*/
  PKNREC.SY1STNBR = PW0YW01.SY1STNBR; /* style nbr*/
  PKNREC.SY2CLRID = PW0YW01.SY2CLRID; /* colour id*/
  PKNREC.XDMCD = PW0YW01.XDMCD; /* dimension code*/

  PW0YS-VPKSTY01-S(); /* 's ' dpick.vpksty01*/

  set PKDREC empty;

  PKDREC.XWHCD = PW0YW01.XWHCD;

  PW0YS-VPKCTL01-S(); /* 's ' dpick.vpkctl01*/

  PW0YW00.PW0YW-NEW-SIZE-WT = 0;

  if (PW0YM001.SY4IDDSC[PW0YWIDX] in SYPREC.SY4IDDSC)

    PW0YW02.SY5SZID[PW0YWIDX] = SYPREC.SY5SZID[sysVar.arrayIndex];

  end

  PW0YW00.PW0YW-SZ-INDEX = PW0YW02.SY5SZID[PW0YWIDX];

  if (PKNREC.SYGSZWT[PW0YW-SZ-INDEX] > 0) /* size weight available*/

     /* ----- calc using size weight ----------------------*/
    PW0YW00.PW0YW-NEW-SIZE-WT = PKNREC.SYGSZWT[PW0YW-SZ-INDEX]      * PW0YM001.PW0YMADJ[PW0YWIDX];

  else /* size weight not available*/

    if (PKNREC.SY1AVEWT > 0) /* average weight available*/

       /* ----- calc using average weight for product -------*/
      PW0YW00.PW0YW-NEW-SIZE-WT = PKNREC.SY1AVEWT        * PW0YM001.PW0YMADJ[PW0YWIDX];

    else /* average weight not available*/

       /* ----- calc using default weight ------------------*/
      PW0YW00.PW0YW-NEW-SIZE-WT = PKDREC.PKDDFWPU        * PW0YM001.PW0YMADJ[PW0YWIDX];

    end
  end

end // end PW0YS-NEW-CRTNWT

// Get new packing list item
Function PW0YS-NEW-VSPLIT01()
   /* -----------------------------------------------------------*/
   /* Get new packing list item record (dpick.vsplit01)*/
   /* -----------------------------------------------------------*/

  PW0YW00.PW0YW-IT-INDEX = 0;

  if (PW0YM001.XWHCD == "51"
   || PW0YM001.XWHCD == "42") /* apparel warehouses*/
    PW0YS-APPRL-VSPLIT();
  else /* footwear warehouse*/
    set PWPREC empty; /* clear record storage area*/
    PWPREC.XWHCD = PW0YM001.XWHCD;
    PWPREC.PKDNCSQN = PW0YM001.PW0YMCTN;
    PW0YS-VSPLIT01-S1(); /* 's1' dpick.vsplit01*/
  end

  PW0YW00.PW0YWPLS = "N"; /* request for data switch*/

   /* -----------------------------------------------------------*/
   /* Get the first packing list item record*/
   /* -----------------------------------------------------------*/

  while (SQLCA.VAGen_SQLCODE == 0
   && PW0YW00.PW0YWPLS == "N")

    PW0YS-NXT-VSPLIT01();

    if (SQLCA.VAGen_SQLCODE == 0 /* items found*/
     && PW0YM001.XWHCD == "51"   /* apparel warehouse*/
     && PW0YM001.PW0YMTOT != 0   /* tote entered*/
     && PW0YM001.PW0YMCTN != 0)  /* carton entered*/
      PW0YS-CHK-TOTE(); /* verify correct carton found*/
    end
    if (SQLCA.VAGen_SQLCODE == 0 /* items found*/
     && PW0YM001.XWHCD == "42"   /* apparel warehouse*/
     && PW0YM001.PW0YMTOT != 0   /* tote entered*/
     && PW0YM001.PW0YMCTN != 0)  /* carton entered*/
      PW0YS-CHK-TOTE(); /* verify correct carton found*/
    end

    if (SQLCA.VAGen_SQLCODE == 0) /* items found*/
      PW0YW00.PW0YWPLS = "Y";
      PW0YS-CHK-CNSLD(); /* check for consolidation*/
      PW0YS-LOAD-ITEMS(); /* load key fields for new item*/

    else /* no items to display*/
      converseLib.validationFailed(8); /* no data to display*/
      PW0YS39(); /* clear w/s db keys*/
      PW0YW01.CACHGFL = "N";
      PW0YW00.XXXLOCID = "100";
      PW0YS-CLS-VSPLIT01();
      return;
    end
    PW0YS35(); /* check dpick.vsplit01*/
  end

end // end PW0YS-NEW-VSPLIT01

// Fetch next packing list item
Function PW0YS-NXT-VSPLIT01()
   /* -----------------------------------------------------------*/
   /* Fetch the next packing list item record. (dpick.vsplit01)*/
   /* -----------------------------------------------------------*/

  if (converseVar.eventKey not pf11)
    PW0YW12.SAVE-SPLIT-CSR-IND = PW0YW00.PW0YW-SPLIT-CSR-IND;
  end

  if (PW0YW00.PW0YW-SPLIT-CSR-IND == "1") /* carton nbr only entered*/
    PW0YS-VSPLIT01-N1(); /* 'n1' dpick.vsplit01*/
  else
    if (PW0YW00.PW0YW-SPLIT-CSR-IND == "2") /* tote nbr only entered*/
      PW0YS-VSPLIT01-N2(); /* 'n2' dpick.vsplit01*/
    else
      if (PW0YW00.PW0YW-SPLIT-CSR-IND == "6")
                                          /* consolidated cartons*/
        PW0YS-VSPLIT01-N6(); /* 'n6' dpick.vsplit01*/
      else
                                          /* tote & carton entered*/
        PW0YS-VSPLIT01-N7(); /* 'n7' dpick.vsplit01*/
      end
    end
  end

end // end PW0YS-NXT-VSPLIT01

// Setup new Audit record values
Function PW0YS-PW0Y6131()
   /* --- set up the new Audit record ---*/

  set SR5REC empty; /* initialise database record*/

  SR5REC.XWHCD = SR1REC.XWHCD; /* warehouse*/
  SR5REC.PK1PKSCH = SR1REC.PK1PKSCH; /* schedule number*/
  SR5REC.OP1CUOID = SR3REC.OP1CUOID; /* cust order nbr*/
  SR5REC.OP1NORID = SR3REC.OP1NORID; /* nike order nbr*/
  SR5REC.OP1NTMAL = SR3REC.OP1NTMAL; /* times allocated*/
  SR5REC.OP2LNINB = SR3REC.OP2LNINB; /* line item nbr*/
  SR5REC.XOWCD = SR3REC.XOWCD; /* owner code*/
  SR5REC.XGPCD = SR3REC.XGPCD; /* gpc code*/
  SR5REC.SY1STNBR = SR3REC.SY1STNBR; /* stylenbr*/
  SR5REC.SY2CLRID = SR3REC.SY2CLRID; /* colour code*/
  SR5REC.XDMCD = SR3REC.XDMCD; /* dimensioncode*/
  SR5REC.XQACD = SR3REC.XQACD; /* quality code*/
  SR5REC.PC2INSEG = SR3REC.PC2INSEG; /* spec diff.*/
  SR5REC.XEGCD = SR3REC.XEGCD; /* shade*/
  SR5REC.XPGCD = SR3REC.XPGCD; /* package type*/
  SR5REC.XUMCD = SR3REC.XUMCD; /* unit of measure*/
  SR5REC.XBCCD = SR3REC.XBCCD; /* brand code*/
  SR5REC.XOBCD = SR2REC.XOBCD; /* base order type*/
  SR5REC.XOTCD = SR2REC.XOTCD; /* order type*/
  SR5REC.OP1TBREP = SR2REC.OP1TBREP; /* service rep*/
  SR5REC.ZZZSDT = XX0XW01.XX0XWDAT; /* setup date*/

end // end PW0YS-PW0Y6131

// move key values to size rows
Function PW0YS-PW0Y6141()
   /* --- initialise the database records ---*/
  set VSPLSZ02 empty; /* packing list size*/
  set VAZCSZ01 empty; /* ASN size*/

   /* --- move key values to the database records ---*/
                                    /* packing list sizes*/
  VSPLSZ02.XWHCD = PW0YW01.XWHCD; /* whse cd*/
  VSPLSZ02.TSIPLNBR = PW0YW01.TSIPLNBR; /* packing list #*/
  VSPLSZ02.OP1PARTN = PW0YW01.OP1PARTN; /* order part char*/
  VSPLSZ02.OP1CUOID = PW0YW01.OP1CUOID; /* cust order id*/
  VSPLSZ02.OP1NORID = PW0YW01.OP1NORID; /* nike ord id*/
  VSPLSZ02.OP2LNINB = PW0YW01.OP2LNINB; /* line item nbr*/
  VSPLSZ02.PWPTOSQN = PW0YW01.PWPTOSQN; /* tote seq nbr*/
  VSPLSZ02.PKDNCSQN = PW0YW01.PKDNCSQN; /* carton seq nbr*/
                                    /* ASN sizes*/
  VAZCSZ01.XWH-WHSE-CD = PW0YW01.XWHCD; /* whse cd*/
  VAZCSZ01.PK-BILL-OF-LADING = PW0YW01.PK1BLLAD; /* BOL nbr*/
  VAZCSZ01.PK-BOL-SUB-NBR = PW0YW01.SR2BLLSU; /* BOL sub nbr*/
  VAZCSZ01.OP-CUST-ORD-ID = PW0YW01.OP1CUOID; /* cust ord id*/
  VAZCSZ01.OP-NIKE-ORD-ID = PW0YW01.OP1NORID; /* nike ord id*/
  VAZCSZ01.PK-CRTN-SEQ-NBR = PW0YW01.PKDNCSQN; /* crtn seq nbr*/
  VAZCSZ01.OP-LINE-ITEM-NBR = PW0YW01.OP2LNINB; /* line item nbr*/

  PW0YW00.PW0YWARZ = PW0YM001.PW0YMARZ[PW0YWIDX];
                                    /* packing list sizes*/
  VSPLSZ02.XARCD = PW0YW00.XARCD;
  VSPLSZ02.SL4ZONE = PW0YW00.SL4ZONE;
  VSPLSZ02.SL5LOCTN = PW0YM001.SL5LOCTN[PW0YWIDX];

  if (PW0YM001.SY4IDDSC[PW0YWIDX] in SYPREC.SY4IDDSC)
    VSPLSZ02.SY5SZID = SYPREC.SY5SZID[sysVar.arrayIndex];
    VAZCSZ01.SY-SZ-ID = SYPREC.SY5SZID[sysVar.arrayIndex];
  end

end // end PW0YS-PW0Y6141

// Create Pack List and ASN sizes
Function PW0YS-PW0Y6142()
   /* --------------------------------------------------------------*/
   /* The area/zone/location/size values have changed and so it is*/
   /* necessary to delete and re-insert the packing list item size*/
   /* ASN item size rows.*/
   /* --------------------------------------------------------------*/

  if (PW0YW00.PW0YWIDX <= PW0YW02.PW0YWNLD) /* old entry*/
    PW0YS-VSPLSZ01-S(); /* get packing list size row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      /* --- packing list row is found, so delete the row ---*/

      PW0YS-VSPLSZ01-D(); /* 'd' dpick.vsplsz01*/
    end

  else /* new entry*/
    /* --- set allocated pick qty to zero ---*/
    VSPLSZ02.PK1QTY = 0;
    VAZCSZ01.PK-ALOC-PICK-QTY = 0;

  end

   /* --- format packing list size and ASN size records ---*/
  PW0YW00.PW0YWARZ = PW0YM001.PW0YMARZ[PW0YWIDX];

  VSPLSZ02.XARCD = PW0YW00.XARCD;
  VSPLSZ02.SL4ZONE = PW0YW00.SL4ZONE;
  VSPLSZ02.SL5LOCTN = PW0YM001.SL5LOCTN[PW0YWIDX];

  if (PW0YM001.SY4IDDSC[PW0YWIDX] in SYPREC.SY4IDDSC)
    VSPLSZ02.SY5SZID = SYPREC.SY5SZID[sysVar.arrayIndex]; /* new size*/
    VAZCSZ01.SY-SZ-ID = SYPREC.SY5SZID[sysVar.arrayIndex];
    VAZCSZ01.SY-SZ-ID-DESC = PW0YM001.SY4IDDSC[PW0YWIDX];
  end

  VSPLSZ02.PK1QTY = VSPLSZ02.PK1QTY + PW0YM001.PW0YMADJ[PW0YWIDX];

  VAZCSZ01.PK-ALOC-PICK-QTY = VAZCSZ01.PK-ALOC-PICK-QTY + PW0YM001.PW0YMADJ[PW0YWIDX];

   /* --- the zzz-sdt needs to be from the original crtn ---*/
  VSPLSZ02.ZZZSDT = PWOREC.ZZZSDT; /* zzzsdt from header*/
  VSPLSZ02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* current date*/
  VSPLSZ02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* current time*/
  VSPLSZ02.ZZZCHGCT = 0; /* change count*/

   /* --- add new packing list item row ---*/

  PW0YS-VSPLSZ01-A(); /* 'a' dpick.vsplsz01 new*/

  set SQLCA empty;
  set OP3REC empty;

  OP3REC.OP1PARTN = PW0YW01.OP1PARTN;
  OP3REC.OP1CUOID = PW0YM001.PW0YMORD;
  OP3REC.OP1NORID = PW0YW01.OP1NORID;
  OP3REC.OP2LNINB = PW0YW01.OP2LNINB;

  set OP8REC empty;

  OP8REC.OP8TASK = "S ";
  OP8REC.OP8LOCAT[1] = "PW0Y614     ";
  OP8REC.OP8LOCAT[2] = "         ";
  OP8REC.OP8LOCAT[3] = "        ";

  OP8REC.OP8LOCAT[4] = "01      ";
  OPBREC.OPBSZRC = +911; /* inform DB1000 not to abend*/

   /* !!!!!! DLVRUSA CHANGES Starts !!!!!!!!*/

  XX0XW03.XWHCD = PW0YM001.XWHCD;
  XSPKS-SELCT-ITM-SZ(); /* SELECT OTP ITEM-SIZE FOR SAP WHSES*/
                                   /* /OTHERs will call db1000*/

  if (PW0YM001.XWHCD == "04" || 
  PW0YM001.XWHCD == "07" || 
  PW0YM001.XWHCD == "09" || 
  PW0YM001.XWHCD == "42" || 
  PW0YM001.XWHCD == "51")
    if (sysVar.errorCode == "00000000") /* Check for good Return*/
      OPBREC.OPBSZRC = SQLCA.VAGen_SQLCODE;
    end
  end
    /* !!!!!! DLVRUSA CHANGES Ends   !!!!!!!!*/

  if (OPBREC.OPBSZRC == 0) /* check for good return*/
    PW0YW00.PW0YW-WAZ-IDX = VAZCSZ01.SY-SZ-ID;
    if (OP3REC.OP3SZAFL[PW0YW-WAZ-IDX] == "Y")
      VAZCSZ01.SY-PRC-PER-UNIT = OP3REC.SY5PRCUN[PW0YW-WAZ-IDX];
    else
      PW0YW00.PW0YW-WAZ-IDX = 1;

      while (VAZCSZ01.SY-PRC-PER-UNIT == 0
       && PW0YW00.PW0YW-WAZ-IDX <= 40)

        if (OP3REC.OP3SZAFL[PW0YW-WAZ-IDX] == "Y")
          VAZCSZ01.SY-PRC-PER-UNIT = OP3REC.SY5PRCUN[PW0YW-WAZ-IDX];
        else
          PW0YW00.PW0YW-WAZ-IDX = PW0YW00.PW0YW-WAZ-IDX + 1;
        end
      end
    end
  end

   /* --- get UPC code ---*/
  set SYUREC empty;

  SYUREC.SY1STNBR = PW0YM001.SY1STNBR; /* style nbr*/
  SYUREC.SY2CLRID = PW0YM001.SY2CLRID; /* colour id*/
  SYUREC.XGPCD = PW0YM001.XGPCD; /* group code*/
  SYUREC.XDMCD = PW0YM001.XDMCD; /* dimension code*/
  SYUREC.XQACD = "01"; /* quality code*/
  SYUREC.SYUPCFCD = "D"; /* display option*/
  SYUREC.SYUPCDFN = "K"; /* search by key*/

  call "SY1280" (SYUREC) {isNoRefresh = yes, isExternal = yes};
  if (SYUREC.SYUPCRCD == 0) /* upc data found*/

    PW0YW00.PW0YW-WAZ-IDX = VAZCSZ01.SY-SZ-ID;
    VAZCSZ01.SY-UPC-SYS-NBR = SYUREC.SYUPCSNB[PW0YW-WAZ-IDX];
    VAZCSZ01.SY-UPC-MFG-ID-NBR = SYUREC.SYUPCMID[PW0YW-WAZ-IDX];
    VAZCSZ01.SY-UPC-ITM-NBR = SYUREC.SYUPCIMN[PW0YW-WAZ-IDX];
    VAZCSZ01.SY-UPC-CK-DGIT = SYUREC.SYUPCCKD[PW0YW-WAZ-IDX];

  end

  VAZCSZ01.ZZ-SDT = XX0XW01.XX0XWDAT;
  VAZCSZ01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;

   /* --- get ASN size row ---*/
  PW0YS-VAZCSZ01-S();

  if (SQLCA.VAGen_SQLCODE == 0) /* ASN size rows does exist*/

    /* --- update ASN size row ---*/
    VAZCSZ01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
    VAZCSZ01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
    VAZCSZ01.ZZ-CHNG-CNT = VAZCSZ01.ZZ-CHNG-CNT + 1;
    PW0YS-VAZCSZ01-U(); /* 'u' dship.vazcsz01*/

  else /* ASN size row does not exist*/

    /* --- insert new ASN size row ---*/
    VAZCSZ01.ZZ-SDT = XX0XW01.XX0XWDAT;
    VAZCSZ01.ZZ-SETUP-HHMM = XX0XW01.XX0XWTIM;
    VAZCSZ01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
    VAZCSZ01.ZZ-CHNG-CNT = 0;

    PW0YS-VAZCSZ01-A(); /* 'a' dship.vazcsz01*/
  end

end // end PW0YS-PW0Y6142

// Update Pack List and ASN sizes
Function PW0YS-PW0Y6143()
   /* --------------------------------------------------------------*/
   /* The area/zone/location/size values remained the same and only*/
   /* the adjustment changed. Therefore update the packing list*/
   /* item size and ASN item size rows.*/
   /* --------------------------------------------------------------*/

   /* --- get the old packing list size row*/
  PW0YS-VSPLSZ01-S(); /* 's' dpick.vsplsz01*/

  if (SQLCA.VAGen_SQLCODE == 0)

    /* --- update the packing list size row*/
    VSPLSZ02.PK1QTY = VSPLSZ02.PK1QTY + PW0YM001.PW0YMADJ[PW0YWIDX];

    VSPLSZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VSPLSZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PW0YS-VSPLSZ01-U(); /* 'u' dpick.vsplsz01*/

    PW0YW02.ZZZCHGCT[PW0YWIDX] = VSPLSZ02.ZZZCHGCT;
    PW0YM001.PW0YMQPK[PW0YWIDX] = VSPLSZ02.PK1QTY;
    PW0YM001.PW0YMQAL[PW0YWIDX] = VSPLSZ02.ALCQTY;

  end

  VAZCSZ01.PK-BILL-OF-LADING = PW0YM001.PK1BLLAD;
  VAZCSZ01.PK-BOL-SUB-NBR = PWOREC.SR2BLLSU;

   /* --- check if consolidated carton ---*/
  if (PWPREC.PK-CNSLD-FL == "Y")
    VAZCSZ01.PK-CRTN-SEQ-NBR = PWPREC.PKDNCSQN;
  end

   /* --- get the ASN item size row ---*/
  PW0YS-VAZCSZ01-S(); /* 's' dship.vazcsz01*/

  if (SQLCA.VAGen_SQLCODE == 0)

    /* --- update the ASN item size row ---*/
    VAZCSZ01.PK-ALOC-PICK-QTY = VAZCSZ01.PK-ALOC-PICK-QTY + PW0YM001.PW0YMADJ[PW0YWIDX];

    VAZCSZ01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
    VAZCSZ01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;

    PW0YS-VAZCSZ01-U(); /* 'u' dship.vazcsz01*/
  end

end // end PW0YS-PW0Y6143

// Retrieve all totes for apparel
Function PW0YS-RTV-APPAREL()
   /* -----------------------------------------------------------*/
   /* Retrieve all totes and position at requested tote.*/
   /* -----------------------------------------------------------*/

  PW0YS-CLS-VSPLIT01(); /* Close 'old' cursor*/

  PWPREC.PWPTOSQN = 0; /* tote number*/
  PW0YS-VSPLIT01-S1(); /* Select all totes*/
  PW0YS-NXT-VSPLIT01(); /* Fetch next item*/

  if (PW0YM001.PW0YMTOT == 0) /* No tote entered*/
                                          /* Accept first tote found*/
  else /* Tote entered*/
    while (PWPREC.PWPTOSQN != PW0YM001.PW0YMTOT
     && SQLCA.VAGen_SQLCODE == 0) /* Position at entered tote*/
      PW0YS-LOAD-ITEMS();
      PW0YS-NXT-VSPLIT01(); /* Fetch next item*/

    end
  end

end // end PW0YS-RTV-APPAREL

// Select Dprod.Vsyreg01
Function PW0YS-SEL-SY2000()

   /* This statement group added for Canada -- August, 1995 --*/

     /* get the product/region record*/

  set SQLCA empty;
  set WSY2000 empty;
  WSY2000.XGP-GPC-CD = PKNREC.XGPCD;
  WSY2000.SY-STY-NBR = PKNREC.SY1STNBR;
  WSY2000.SY-COLR-CD-ID = PKNREC.SY2CLRID;
  WSY2000.XDM-DIM-CD = PKNREC.XDMCD;
  WSY2000.XDR-PROD-REG-CD = "05";
  WSY2000.WSY2000-OPTION-CODE = "S ";
  WSY2000.WSY2000-SUB-OPTION-CODE = "O";

  call "SY2000" (WSY2000) {isNoRefresh = yes, isExternal = yes};

  if (WSY2000.WSY2000-RETURN-CODE == "00")
    PKNREC.XPRCD = WSY2000.XPR-PROD-TYP-CD;
    PKNREC.XLCCD1 = WSY2000.XLC-LIFE-CYC-CD[1];
    PKNREC.XLCCD2 = WSY2000.XLC-LIFE-CYC-CD[2];
    PKNREC.XLCCD3 = WSY2000.XLC-LIFE-CYC-CD[3];
    PKNREC.XLCCD4 = WSY2000.XLC-LIFE-CYC-CD[4];
    PKNREC.SY2CEDT1 = WSY2000.SY-LIFE-CYC-EDT[1];
    PKNREC.SY2CEDT2 = WSY2000.SY-LIFE-CYC-EDT[2];
    PKNREC.SY2CEDT3 = WSY2000.SY-LIFE-CYC-EDT[3];
    PKNREC.SY2CEDT4 = WSY2000.SY-LIFE-CYC-EDT[4];
  else
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "PW0Y";
    TA1REC.TA1LOC = "PW0YS-SEL-SY2000";
    PW0YW09.PW0YW-WSY2000-GPC-CD = PKNREC.XGPCD;
    PW0YW09.PW0YW-WSY2000-STY-NBR = PKNREC.SY1STNBR;
    PW0YW09.PW0YW-WSY2000-COLR-CD = PKNREC.SY2CLRID;
    PW0YW09.PW0YW-WSY2000-DIM-CD = PKNREC.XDMCD;
    PW0YW09.PW0YW-WSY2000-PROD-REG-CD = WSY2000.XDR-PROD-REG-CD;
    PW0YW09.PW0YW-WSY2000-RETURN-CD = WSY2000.WSY2000-RETURN-CODE;
    TAEREC.TAEDESC1 = PW0YW09.PW0YW-WSY2000-POST-1;
    TAEREC.TAEDESC2 = "RETURN FROM CALL TO SY2000 - BAD RETURN CODE";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "SYREG02";
    TA1REC.TA1MAP = "PW0YM001";
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end
  end

end // end PW0YS-SEL-SY2000

// 'a ' dship.vazcsz01
Function PW0YS-VAZCSZ01-A()
   /* ------------------------------------------------------------*/
   /* Add ASN size row. (dship.vazcsz01)*/
   /* ------------------------------------------------------------*/

  try
    call "VAZCSZ01" ("A ", SQLCA, VAZCSZ01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(29); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VAZCSZ01-A        "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCSZ01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end PW0YS-VAZCSZ01-A

// 's' dship.vazcsz01
Function PW0YS-VAZCSZ01-S()
   /* ------------------------------------------------------------*/
   /* Get unique ASN item size row. (dship.vazcsz01)*/
   /* ------------------------------------------------------------*/

  try
    call "VAZCSZ01" ("S ", SQLCA, VAZCSZ01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && (SQLCA.VAGen_SQLCODE == 0      /* Normal return code*/
   || SQLCA.VAGen_SQLCODE == +100))  /* Not found*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VAZCSZ01-S    "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCSZ01"; /* Table view name*/
   /* Table key*/
  TA1REC.TA1TBLKE = VAZCSZ01.VAZCSZ01-KEY;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end PW0YS-VAZCSZ01-S

// 'u' dship.vazcsz01
Function PW0YS-VAZCSZ01-U()
   /* ------------------------------------------------------------*/
   /* Update the unique ASN size row. (dship.vazcsz01)*/
   /* ------------------------------------------------------------*/

  try
    call "VAZCSZ01" ("U ", SQLCA, VAZCSZ01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1LOC = "PW0YS-VAZCSZ01-U    "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCSZ01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end PW0YS-VAZCSZ01-U

// 's ' dship.vazctn01
Function PW0YS-VAZCTN01-S()
   /* ------------------------------------------------------------*/
   /* Get unique ASN carton row. (dship.vazctn01)*/
   /* ------------------------------------------------------------*/

  try
    call "VAZCTN01" ("S ", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end
                                                  /* verify BOL*/
  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VAZCTN01-S  "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
  /* MOVE VAZCTN01.VAZCTN01-KEY1 TO TA1REC.TA1TBLKE;  /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end PW0YS-VAZCTN01-S

// 'sq' dship.vazctn01
Function PW0YS-VAZCTN01-SQ()
   /* -------------------------------------------------------------*/
   /* Get unique ASN Carton row. (dship.vazctn01)*/
   /* -------------------------------------------------------------*/
  try
    call "VAZCTN01" ("SQ", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end /**/

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0    /* If found*/
     || SQLCA.VAGen_SQLCODE == +100 /* or not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* or duplicates*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VAZCTN01-SQ "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
  /* MOVE VAZCTN01.VAZCTN01-KEY1 TO TA1REC.TA1TBLKE; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end PW0YS-VAZCTN01-SQ

// 'su' dship.vazctn01
Function PW0YS-VAZCTN01-SU()
   /* -------------------------------------------------------------*/
   /* Get unique ASN Carton row. (dship.vazctn01)*/
   /* -------------------------------------------------------------*/
  try
    call "VAZCTN01" ("SU", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0    /* If found*/
     || SQLCA.VAGen_SQLCODE == +100 /* or not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* or duplicates*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VAZCTN01-SU "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
  /* MOVE VAZCTN01.VAZCTN01-KEY1 TO TA1REC.TA1TBLKE; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end PW0YS-VAZCTN01-SU

// 'u' dship.vazctn01
Function PW0YS-VAZCTN01-U()
   /* ------------------------------------------------------------*/
   /* Update the ASN Carton row. (dship.vazctn01)*/
   /* ------------------------------------------------------------*/

  try
    call "VAZCTN01" ("U ", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1LOC = "PW0YS-VAZCTN01-U    "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end PW0YS-VAZCTN01-U

// 's' dship.vazhdr01
Function PW0YS-VAZHDR01-S()
   /* ------------------------------------------------------------*/
   /* Select the unique ASN header row. (dship.vazhdr01)*/
   /* ------------------------------------------------------------*/

  try
    call "VAZHDR01" ("S ", SQLCA, VAZHDR01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1LOC = "PW0YS-VAZHDR01-S    "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZHDR01"; /* Table view name*/
   /* Table key*/
  TA1REC.TA1TBLKE = VAZHDR01.VAZHDR01-KEY;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end PW0YS-VAZHDR01-S

// 'u' dship.vazhdr01
Function PW0YS-VAZHDR01-U()
   /* ------------------------------------------------------------*/
   /* Update the ASN Header row. (dship.vazhdr01)*/
   /* ------------------------------------------------------------*/

  try
    call "VAZHDR01" ("U ", SQLCA, VAZHDR01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1LOC = "PW0YS-VAZHDR01-U    "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end PW0YS-VAZHDR01-U

// 's' dship.vazord01
Function PW0YS-VAZORD01-S()
   /* ------------------------------------------------------------*/
   /* Select ASN order rows. (dship.vazord01)*/
   /* ------------------------------------------------------------*/

  try
    call "VAZORD01" ("S ", SQLCA, VAZORD01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)     

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1LOC = "PW0YS-VAZORD01-S    "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZORD01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end PW0YS-VAZORD01-S

// 'u' dship.vazord01
Function PW0YS-VAZORD01-U()
   /* ------------------------------------------------------------*/
   /* Update the ASN Order row. (dship.vazord01)*/
   /* ------------------------------------------------------------*/

  try
    call "VAZORD01" ("U ", SQLCA, VAZORD01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(29); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1LOC = "UPDATE ON VSPLHD01"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZORD01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end PW0YS-VAZORD01-U

// 's' dpick.vpkctl01
Function PW0YS-VPKCTL01-S()
   /* ------------------------------------------------------------*/
   /* Get the Picking control row for the whse. (dpick.vpkctl01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO1890" ("S ", SQLCA, PKDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VPKCTL01-S    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VPKCTL01-S

// 's' dpick.vpkpgm01
Function PW0YS-VPKPGM01-S()
   /* ------------------------------------------------------------*/
   /* Select Pickings Program Tracking Table row. (dpick.vpkpgm01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO4240" ("S ", SQLCA, PWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-CHK-SAMEDAY   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKPGM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWHREC.PWHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VPKPGM01-S

// 's ' dpick.vpksty01
Function PW0YS-VPKSTY01-S()
   /* ------------------------------------------------------------*/
   /* Select the picking style/colour/size row. (dpick.vpksty01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (PW0YW01.XCTCD == "CANA") /* CANA Canadian country code*/
        PW0YS-SEL-SY2000(); /* CANA call SY2000*/
        if (WSY2000-RETURN-CODE == "00"
         || WSY2000-RETURN-CODE == "02")
          return;
        else
          converseLib.clearScreen();
           /* Clear screen before display*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1LOC = "PW0YS-VPKSTY01-S  ";
          TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program appl*/
          TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
          TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
          TA1REC.TA1TBLVU = "VPKSTY01"; /* Table view name*/
          TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/

                                            /* Error diagnosis routine*/
          call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

          exit stack; /* Exit to display map*/
        end
      end
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

        return;

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VPKSTY01-S  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VPKSTY01-S

// 's' dpick.vsplhd01
Function PW0YS-VSPLHD01-S()
   /* ------------------------------------------------------------*/
   /* Get packing list header row. (dpick.vsplhd01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO5770" ("S ", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSPLHD01-S    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSPLHD01-S

// 'c1' dpick.vsplit01
Function PW0YS-VSPLIT01-C1()
   /* ------------------------------------------------------------*/
   /* Close the packing list item cursor built when only the*/
   /* Carton number has been entered. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW0YW04.PW0YW-IO-TASK = "C1";

  try
    call "IO5760" (PW0YW04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSPLIT01-C1   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSPLIT01-C1

// 'c2' dpick.vsplit01
Function PW0YS-VSPLIT01-C2()
   /* ------------------------------------------------------------*/
   /* Close the packing list item cursor built when only the*/
   /* Tote number has been entered. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW0YW04.PW0YW-IO-TASK = "C2";

  try
    call "IO5760" (PW0YW04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSPLIT01-C2   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSPLIT01-C2

// 'c6' dpick.vsplit01
Function PW0YS-VSPLIT01-C6()
   /* ------------------------------------------------------------*/
   /* Close the packing list item csr (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW0YW04.PW0YW-IO-TASK = "C6";

  try
    call "IO5760" (PW0YW04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

  PW0YW00.XXXLOCID = "   ";
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSPLIT01-C6   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSPLIT01-C6

// 'c7' dpick.vsplit01
Function PW0YS-VSPLIT01-C7()
   /* ------------------------------------------------------------*/
   /* Close the packing list item cursor built when the tote*/
   /* number and the carton number have been entered.*/
   /* (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW0YW04.PW0YW-IO-TASK = "C7";

  try
    call "IO5760" (PW0YW04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSPLIT01-C7   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSPLIT01-C7

// 'n1' dpick.vsplit01
Function PW0YS-VSPLIT01-N1()
   /* ------------------------------------------------------------*/
   /* Fetch the next packing list item row from the cursor built*/
   /* when only the carton nbr has been entered. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW0YW04.PW0YW-IO-TASK = "N1";

  try
    call "IO5760" (PW0YW04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSPLIT01-N1   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSPLIT01-N1

// 'n2' dpick.vsplit01
Function PW0YS-VSPLIT01-N2()
   /* ------------------------------------------------------------*/
   /* Fetch the next packing list item row from the cursor built*/
   /* when only the tote number has been entered. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW0YW04.PW0YW-IO-TASK = "N2";

  try
    call "IO5760" (PW0YW04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSPLIT01-N2   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSPLIT01-N2

// 'n6' dpick.vsplit01
Function PW0YS-VSPLIT01-N6()
   /* ------------------------------------------------------------*/
   /* fetch the next packing list item (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW0YW04.PW0YW-IO-TASK = "N6";

  try
    call "IO5760" (PW0YW04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSPLIT01-N6   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSPLIT01-N6

// 'n7' dpick.vsplit01
Function PW0YS-VSPLIT01-N7()
   /* ------------------------------------------------------------*/
   /* Fetch the next packing list item row from the cursor built*/
   /* when tote number and carton number have been entered.*/
   /* (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW0YW04.PW0YW-IO-TASK = "N7";

  try
    call "IO5760" (PW0YW04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSPLIT01-N7   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSPLIT01-N7

// 's' dpick.vsplit01
Function PW0YS-VSPLIT01-S()
   /* ------------------------------------------------------------*/
   /* Get packing list item row. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW0YW04.PW0YW-IO-TASK = "S ";

  try
    call "IO5760" (PW0YW04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSPLIT01-S    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSPLIT01-S

// 's1' dpick.vsplit01
Function PW0YS-VSPLIT01-S1()
   /* ------------------------------------------------------------*/
   /* The Carton number has been entered. Retrieve the packing*/
   /* list item rows for the carton number. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW0YW00.PW0YW-SPLIT-CSR-IND = "1"; /* Identify cursor used*/

  PW0YW04.PW0YW-IO-TASK = "S1";

  try
    call "IO5760" (PW0YW04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSPLIT01-S1   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSPLIT01-S1

// 's2' dpick.vsplit01
Function PW0YS-VSPLIT01-S2()
   /* ------------------------------------------------------------*/
   /* Tote number has been entered.*/
   /* Retrieve the packing list item rows for the tote number.*/
   /* (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW0YW00.PW0YW-SPLIT-CSR-IND = "2"; /* Indicate cursor used*/

  set PWPREC empty; /* Clear row storage area*/

  PWPREC.XWHCD = PW0YM001.XWHCD;
  PWPREC.PWPTOSQN = PW0YM001.PW0YMTOT;
  PWPREC.PKDNCSQN = PW0YM001.PW0YMCTN;
  PW0YW04.PW0YW-IO-TASK = "S2";

  try
    call "IO5760" (PW0YW04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSPLIT01-S2   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSPLIT01-S2

// 's6' dpick.vsplit01
Function PW0YS-VSPLIT01-S6()
   /* ------------------------------------------------------------*/
   /* Check for consolidation/zone consolidation*/
   /* ------------------------------------------------------------*/

  if (PW0YW00.PW0YW-CNSLD-TYPE-IND == "1") /* Consolidation*/
    PWPREC.PK-ZN-CNSLD-SEQNBR = -1;
  else /* Zone consolidation*/
    PWPREC.PWPPKGRP = -1;
  end

   /* ------------------------------------------------------------*/
   /* Get the packing list item rows. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW0YW00.PW0YW-SPLIT-CSR-IND = "6"; /* Indicate cursor used*/

  PW0YW04.PW0YW-IO-TASK = "S6";

  try
    call "IO5760" (PW0YW04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSPLIT01-S6   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSPLIT01-S6

// 's7' dpick.vsplit01
Function PW0YS-VSPLIT01-S7()
   /* ------------------------------------------------------------*/
   /* Tote number and Carton number have been entered.*/
   /* Retrieve the packing list item rows for the tote/carton*/
   /* number entered. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW0YW00.PW0YW-SPLIT-CSR-IND = "7"; /* Indicate cursor used*/

  set PWPREC empty; /* Clear row storage area*/

  PWPREC.XWHCD = PW0YM001.XWHCD;
  PWPREC.PWPTOSQN = PW0YM001.PW0YMTOT;
  PWPREC.PKDNCSQN = PW0YM001.PW0YMCTN;
  PW0YW04.PW0YW-IO-TASK = "S7";

  try
    call "IO5760" (PW0YW04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSPLIT01-S7   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSPLIT01-S7

// 'sq' dpick.vsplit01
Function PW0YS-VSPLIT01-SQ()
   /* ------------------------------------------------------------*/
   /* Get packing list item row. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW0YW04.PW0YW-IO-TASK = "SQ";

  try
    call "IO5760" (PW0YW04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -811) /* more than 1 mstr rec*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSPLIT01-SC   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSPLIT01-SQ

// 'su' dpick.vsplit01
Function PW0YS-VSPLIT01-SU()
   /* ------------------------------------------------------------*/
   /* Select dpick.vsplit01 table row*/
   /* ------------------------------------------------------------*/

  PW0YW04.PW0YW-IO-TASK = "SU";

  try
    call "IO5760" (PW0YW04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -811) /* more than 1 mstr rec*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSPLIT01-SU   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSPLIT01-SU

// 'u' dpick.vsplit01
Function PW0YS-VSPLIT01-U()
   /* ------------------------------------------------------------*/
   /* Update the packing list item row. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW0YW04.PW0YW-IO-TASK = "U ";

  try
    call "IO5760" (PW0YW04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSPLIT01-U       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSPLIT01-U

// 'a' dpick.vsplsz01
Function PW0YS-VSPLSZ01-A()
   /* ------------------------------------------------------------*/
   /* Add a packing list size row using the 'new' key.*/
   /* (dpick.vsplsz01)*/
   /* ------------------------------------------------------------*/

  try
    call "VSPLSZ02" ("A ", SQLCA, VSPLSZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Add*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "S18"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DPICK.VSPLSZ01  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLSZ01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPLSZ02.VSPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSPLSZ01-A

// 'c1' dpick.vsplsz01
Function PW0YS-VSPLSZ01-C1()
   /* ------------------------------------------------------------*/
   /* close packing list size cursor. (dpick.vsplsz01)*/
   /* ------------------------------------------------------------*/

  try
    call "VSPLSZ02" ("C1", SQLCA, VSPLSZ02) {isNoRefresh = yes, isExternal = yes};
  end /* close csr*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

  PW0YW00.XXXLOCID = "   ";
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSPLSZ01-C1   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLSZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPLSZ02.VSPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSPLSZ01-C1

// 'd' dpick.vsplsz01
Function PW0YS-VSPLSZ01-D()
   /* ------------------------------------------------------------*/
   /* Delete the old packing list size row. (dpick.vsplsz01)*/
   /* Note: record is already in io area.*/
   /* ------------------------------------------------------------*/

  try
    call "VSPLSZ02" ("D ", SQLCA, VSPLSZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "S16"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLSZ01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPLSZ02.VSPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSPLSZ01-D

// 'n1' dpick.vsplsz01
Function PW0YS-VSPLSZ01-N1()
   /* ------------------------------------------------------------*/
   /* fetch packing list size row. (dpick.vsplsz01)*/
   /* ------------------------------------------------------------*/

  try
    call "VSPLSZ02" ("N1", SQLCA, VSPLSZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSPLSZ01-N1   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLSZ01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPLSZ02.VSPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSPLSZ01-N1

// 's' dpick.vsplsz01 - old
Function PW0YS-VSPLSZ01-S()
   /* ------------------------------------------------------------*/
   /* Select old packing list size row. (dpick.vsplsz01)*/
   /* ------------------------------------------------------------*/

  try
    call "VSPLSZ02" ("S ", SQLCA, VSPLSZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "S15"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLSZ01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPLSZ02.VSPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSPLSZ01-S

// 's1' dpick.vsplsz01
Function PW0YS-VSPLSZ01-S1()
   /* ------------------------------------------------------------*/
   /* get the packing sizes. (dpick.vsplsz01)*/
   /* ------------------------------------------------------------*/

  try
    call "VSPLSZ02" ("S1", SQLCA, VSPLSZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSPLSZ01-S1   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLSZ01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPLSZ02.VSPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSPLSZ01-S1

// 'u' dpick.vsplsz01
Function PW0YS-VSPLSZ01-U()
   /* ------------------------------------------------------------*/
   /* Update the packing list item row. (dpick.vsplsz01)*/
   /* ------------------------------------------------------------*/

  try
    call "VSPLSZ02" ("U ", SQLCA, VSPLSZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Update*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      PW0YW00.PW0YWSWR = "Y"; /* Request for data switch*/

      PW0YW00.XXXLOCID = "S17"; /* Module identification*/
      PW0YW00.PW0YWMSG = 143; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "S17"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DPICK.VSPLSZ01 ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLSZ01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPLSZ02.VSPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSPLSZ01-U

// 's' dship.vsrhdr01
Function PW0YS-VSRHDR01-S()
   /* ------------------------------------------------------------*/
   /* Get the ship rec batch schedule hdr row. (dship.vsrhdr01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO0790" ("S ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSRHDR01-S    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR1REC.SR1KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSRHDR01-S

// 'u' dship.vsrhdr01
Function PW0YS-VSRHDR01-U()
   /* ------------------------------------------------------------*/
   /* Update the shiprec batch schedule hdr row. (dship.vsrhdr01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO0790" ("U ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      PW0YW00.PW0YWSWR = "Y"; /* Request for data switch*/

      PW0YW00.XXXLOCID = "   "; /* Module identification*/
      PW0YW00.PW0YWMSG = 143; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSRHDR01-U       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR1REC.SR1KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSRHDR01-U

// 'cs' dship.vsritm01
Function PW0YS-VSRITM01-CS()
   /* ------------------------------------------------------------*/
   /* Close shiprec item cursor. (dship.vsritm01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO2520" ("CS", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close csr*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-CLS-VSRITM01  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR3REC.SR3KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSRITM01-CS

// 's' dship.vsritm01
Function PW0YS-VSRITM01-S()
   /* ------------------------------------------------------------*/
   /* Select ship rec item rows. (dship.vsritm01)*/
   /* ------------------------------------------------------------*/

  try
    call "SR1100" ("S ", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "S42"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S UNIQUE     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR3REC.SR3KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSRITM01-S

// 'sn' dship.vsritm01
Function PW0YS-VSRITM01-SN()
   /* ------------------------------------------------------------*/
   /* fetch shiprec item row. (dship.vsritm01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO2520" ("SN", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "S20"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR3REC.SR3KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSRITM01-SN

// 'ss' dship.vsritm01
Function PW0YS-VSRITM01-SS()
   /* ------------------------------------------------------------*/
   /* Create ship rec items cursor. (dship.vsritm01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO2520" ("SS", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "S19"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SS SET       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR3REC.SR3KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSRITM01-SS

// 'u' dship.vsritm01
Function PW0YS-VSRITM01-U()
   /* ------------------------------------------------------------*/
   /* Update shiprec item row. (dship.vsritm01)*/
   /* ------------------------------------------------------------*/

  try
    call "SR1100" ("U ", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      PW0YW00.PW0YWSWR = "Y"; /* Request for data switch*/

      PW0YW00.XXXLOCID = "   "; /* Module identification*/
      PW0YW00.PW0YWMSG = 143; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSRITM01-U       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR3REC.SR3KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSRITM01-U

// 'c3' dship.vsrord01
Function PW0YS-VSRORD01-C3()
   /* ------------------------------------------------------------*/
   /* Close Ship Rec Order cursor. (dship.vsrord01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO0800" ("C3", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close Csr*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSRORD01-C3   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSRORD01-C3

// 'f3' dship.vsrord01
Function PW0YS-VSRORD01-N3()
   /* ------------------------------------------------------------*/
   /* Fetch Ship Rec Order row. (dship.vsrord01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO0800" ("N3", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSRORD01-N3   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSRORD01-N3

// 's' dship.vsrord01
Function PW0YS-VSRORD01-S()
   /* ------------------------------------------------------------*/
   /* get the ship rec order row. (dship.vsrord01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO0800" ("S ", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSRORD01-S    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSRORD01-S

// 's3' dship.vsrord01
Function PW0YS-VSRORD01-S3()
   /* ------------------------------------------------------------*/
   /* Build a cursor on the Ship Rec Order Table. (dship.vsrord01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO0800" ("S3", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Build Csr*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSRORD01-S3   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSRORD01-S3

// 'u' dship.vsrord01
Function PW0YS-VSRORD01-U()
   /* ------------------------------------------------------------*/
   /* Update the Ship rec order row. (dship.vsrord01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO0800" ("U ", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      PW0YW00.PW0YWSWR = "Y"; /* Request for data switch*/

      PW0YW00.XXXLOCID = "   "; /* Module identification*/
      PW0YW00.PW0YWMSG = 143; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW0YS-VSRORD01-U      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSRORD01-U

// 'a' dship.vsrxcp01
Function PW0YS-VSRXCP01-A()
   /* ------------------------------------------------------------*/
   /* Add Shiprec Picking Exceptions row. (dship.vsrxcp01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO0830" ("A ", SQLCA, SR5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "S43"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRXCP01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS-VSRXCP01-A

// Purge Temporary Storage
Function PW0YS01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PW0YW02 empty; /* M001 temporary storage detail*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PW0YW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PW0YW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0YW00.XXXLOCID = "S01"; /* Module identification*/
  converseLib.validationFailed(29); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS01

// Add Page to Temporary Storage
Function PW0YS13()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PW0YW02.XXXTSLEN = PW0YW00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PW0YW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PW0YW02 empty; /* m001 display storage*/

    PW0YW00.PW0YWIDX = 1; /* Display line index*/

    PW0YW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0YW00.XXXLOCID = "S13"; /* Module identification*/
  converseLib.validationFailed(29); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS13

// Read Temporary Storage
Function PW0YS14()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  PW0YW02.XXXTSLEN = PW0YW00.XXXTSLEN;
  TA5REC.TA5TSQIX = PW0YW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PW0YW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0YW00.XXXLOCID = "S14"; /* Module identification*/
  converseLib.validationFailed(29); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS14

// 's' dprodc.vprdcu01
Function PW0YS33()
   /* ------------------------------------------------------------*/
   /* get customer cross reference row. (dprodc.vprdcu01)*/
   /* ------------------------------------------------------------*/

  set PC2REC empty;

  PC2REC.XGPCD = PW0YM001.XGPCD;
  PC2REC.PC2INSEG = PW0YM001.PC2INSEG;

  try
    call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "S33"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS33

// Get the Size Scale
Function PW0YS34()
   /* *************************************************************/
   /* select valid sizes using dpick.vpkscl01 and dpick.vpksty01*/
   /* If end of file, end processing.*/
   /* If any error, indicate a system error.*/
   /* *************************************************************/

  set SYPREC empty;
  SYPREC.SYPFC = "PC"; /* product code*/
  SYPREC.SYPCMPSW = "N"; /* compressed data*/
  SYPREC.XGPCD = PW0YW01.XGPCD;
  SYPREC.SY1STNBR = PW0YW01.SY1STNBR;
  SYPREC.SY2CLRID = PW0YW01.SY2CLRID;
  SYPREC.XDMCD = PW0YW01.XDMCD;
  SYPREC.XQACD = "**";

  call "SY1190" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes}; /* select the available sizes*/

  if (SYPREC.SYPRC < 9)
    return;
  end

  if (SYPREC.SYPRC == 9) /* Resource not available*/
    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PW0YS34 "; /* Process name*/
  TA1REC.TA1LOC = "OBTAIN SIZE SCALE FOR PRODUCTS";
  TA1REC.TA1MAP = "PW0YM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = SYPREC.SYPDATA; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PW0YM001.XXXLOCID = "PW0YS34"; /* Error location*/
  exit stack; /* Return to previous process*/

end // end PW0YS34

// check the packing list item
Function PW0YS35()
   /* ------------------------------------------------------------*/
   /* Check the packing list item row to see if the entered keys*/
   /* match. On finding the first key that does not match and*/
   /* is not spaces, perform ezertn. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  if (PW0YW01.PW0YWTOT == PWPREC.PWPTOSQN
   || PW0YW01.PW0YWTOT == 0)
    /* next sentence*/
  else
    return;
  end

  if (PW0YW01.PW0YWCTN == PWPREC.PKDNCSQN
   || PW0YW01.PW0YWCTN == 0)
    /* next sentence*/
  else
    return;
  end

  if (PW0YW01.PW0YWGPC == PWPREC.XGPCD
   || PW0YW01.PW0YWGPC == " ")
    /* next sentence*/
  else
    return;
  end

  if (PW0YW01.PW0YWSTY == PWPREC.SY1STNBR
   || PW0YW01.PW0YWSTY == " ")
    /* next sentence*/
  else
    return;
  end

  if (PW0YW01.PW0YWCLR == PWPREC.SY2CLRID
   || PW0YW01.PW0YWCLR == " ")
    /* next sentence*/
  else
    return;
  end

  if (PW0YW01.PW0YWQUA == PWPREC.XQACD
   || PW0YW01.PW0YWQUA == " ")
    /* next sentence*/
  else
    return;
  end

  if (PW0YW01.PW0YWISG == PWPREC.PC2INSEG
   || PW0YW01.PW0YWISG == " ")
    /* next sentence*/
  else
    return;
  end

  if (PW0YW01.PW0YWEDF == PWPREC.XEGCD
   || PW0YW01.PW0YWEDF == " ")
    /* next sentence*/
  else
    return;
  end

  if (PW0YW01.PW0YWDIM == PWPREC.XDMCD
   || PW0YW01.PW0YWDIM == " ")
    /* next sentence*/
  else
    return;
  end

  if (PW0YW01.PW0YWUOM == PWPREC.XUMCD
   || PW0YW01.PW0YWUOM == " ")
    /* next sentence*/
  else
    return;
  end

  if (PW0YW01.PW0YWOGC == PWPREC.XOWCD
   || PW0YW01.PW0YWOGC == " ")
    /* next sentence*/
  else
    return;
  end

  if (PW0YW01.PW0YWPKG == PWPREC.XPGCD
   || PW0YW01.PW0YWPKG == " ")
    /* next sentence*/
  else
    return;
  end

   /* ------------------------------------------------------------*/
   /* Packing list item is found.*/
   /* ------------------------------------------------------------*/

  PW0YW00.PW0YWPLS = "Y";

end // end PW0YS35

// Clear working storage DB keys
Function PW0YS39()
   /* ------------------------------------------------------------*/
   /* Clear working storage db keys*/
   /* ------------------------------------------------------------*/

  PW0YW01.PWPTOSQN = 0;
  PW0YW01.PKDNCSQN = 0;
  PW0YW01.TSIPLNBR = 0;
  PW0YW01.TSVPLNBR = 0;
  PW0YW01.PWP1OF1F = " ";
  PW0YW01.PK1PKSCH = 0;
  PW0YW01.SWCLNENB = 0;
  PW0YW01.OP1CUOID = 0;
  PW0YW01.OP1NORID = 0;
  PW0YW01.PW0YWPRT = 0;
  PW0YW01.XGPCD = " ";
  PW0YW01.SY1STNBR = " ";
  PW0YW01.SY1SSTNM = " ";
  PW0YW01.SY2CLRID = " ";
  PW0YW01.XDMCD = " ";
  PW0YW01.XQACD = " ";
  PW0YW01.PC2INSEG = " ";
  PW0YW01.XEGCD = " ";
  PW0YW01.XPGCD = " ";
  PW0YW01.XOWCD = " ";
  PW0YW01.XUMCD = " ";
  PW0YW01.TSOCRTNB = 0;
  PW0YW01.OP2LNINB = 0;
  PW0YW01.OP1PARTN = " ";

end // end PW0YS39

// 's' dstloc.vlocat01
Function PW0YS40()
   /* ------------------------------------------------------------*/
   /* Get Stock Locate Location. (dstloc.vlocat01)*/
   /* ------------------------------------------------------------*/

  set SL5REC empty; /* Clear row storage area*/

  SL5REC.XWHCD = PW0YW01.XWHCD;
  PW0YW00.PW0YWARZ = PW0YM001.PW0YMARZ[PW0YWIDX];
  SL5REC.XARCD = PW0YW00.XARCD;
  SL5REC.SL4ZONE = PW0YW00.SL4ZONE;

  SL5REC.SL5LOCTN = PW0YM001.SL5LOCTN[PW0YWIDX];

  try
    call "IO1490" ("S ", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "S40"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLOCAT01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL5REC.SL5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS40

// 's' dpick.vsplsz01 - new
Function PW0YS41()
   /* ------------------------------------------------------------*/
   /* Get new packing list size row. (dstloc.vsplsz01)*/
   /* ------------------------------------------------------------*/

  set VSPLSZ02 empty; /* Clear row storage area*/

  VSPLSZ02.XWHCD = PW0YW01.XWHCD;
  VSPLSZ02.TSIPLNBR = PW0YW01.TSIPLNBR; /* packing list nbr*/
  VSPLSZ02.OP1PARTN = PW0YW01.OP1PARTN; /* order part char*/
  VSPLSZ02.OP1CUOID = PW0YW01.OP1CUOID; /* cust order id*/
  VSPLSZ02.OP1NORID = PW0YW01.OP1NORID; /* nike ord id*/
  VSPLSZ02.OP2LNINB = PW0YW01.OP2LNINB; /* line item nbr*/
  VSPLSZ02.PWPTOSQN = PW0YW01.PWPTOSQN; /* tote seq nbr*/
  VSPLSZ02.PKDNCSQN = PW0YW01.PKDNCSQN; /* carton seq nbr*/

  PW0YW00.PW0YWARZ = PW0YM001.PW0YMARZ[PW0YWIDX];

  VSPLSZ02.XARCD = PW0YW00.XARCD;
  VSPLSZ02.SL4ZONE = PW0YW00.SL4ZONE;
  VSPLSZ02.SL5LOCTN = PW0YM001.SL5LOCTN[PW0YWIDX];

  if (PW0YM001.SY4IDDSC[PW0YWIDX] in SYPREC.SY4IDDSC)
    VSPLSZ02.SY5SZID = SYPREC.SY5SZID[sysVar.arrayIndex];
  end

  try
    call "VSPLSZ02" ("S ", SQLCA, VSPLSZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0YW00.XXXLOCID = "S41"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0YW00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLSZ01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPLSZ02.VSPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS41

// Abend Routine
Function PW0YS99()
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  converseLib.validationFailed(29); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  converseLib.clearScreen();
   /* Clear screen before display*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "SHIPREC DOES NOT MATCH PICKING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "612"; /* Program number*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0YS99

//*** RECORD=PW0YREC ****
// /* --- Record passed between PW0Y and PW01 ---
// ***********************
Record PW0YREC type basicRecord
  5 PW0Y-COMMON-REC PW0Y-COMMON-REC ; 
    10 PW0Y-SYS-GRP PW0Y-SYS-GRP ; 
      15 PW0Y-INIT PW0Y-INIT ; 
      15 PW0Y-SYS-FILLER PW0Y-SYS-FILLER ; 
    10 PW0Y-PW-PASS-GRP PW0Y-PW-PASS-GRP ; 
      15 XWH-WHSE-CD XWH-WHSE-CD ; 
      15 PK-CRTN-SEQ-NBR PK-CRTN-SEQ-NBR ; 
      15 PK-TOTE-SEQ-NBR PK-TOTE-SEQ-NBR ; 
      15 PK-CRTN-UNIT-QTY PK-CRTN-UNIT-QTY ; 
      15 PW0YW-TOTE-NBR-IND PW0YW-TOTE-NBR-IND ; 
      15 PW0YW-PF11ACT-IND PW0YW-PF11ACT-IND ; 
      15 PW0YW-PW0YWMSG PW0YW-PW0YWMSG ; 
      15 PW0YW-RETURN-IND PW0YW-RETURN-IND ; 
end // end PW0YREC

//*** RECORD=PW0YW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 
// ***********************
Record PW0YW00 type basicRecord
  10 PW0YWNKS PW0YWNKS ; 
  10 PW0YWNDS PW0YWNDS ; 
  10 PW0YWSRS PW0YWSRS ; 
  10 PW0YW-IT-INDEX PW0YW-IT-INDEX ; 
  10 PW0YW-SZ-INDEX PW0YW-SZ-INDEX ; 
  10 PW0YW-WAZ-IDX PW0YW-WAZ-IDX ; 
  10 PW0YW-W05-IDX PW0YW-W05-IDX ; 
  10 PW0YW-SPLIT-CSR-IND PW0YW-SPLIT-CSR-IND ; 
  10 PW0YW-SRORD-UPD-SW PW0YW-SRORD-UPD-SW ; 
  10 PW0YW-CARTON-ZEROED-FL PW0YW-CARTON-ZEROED-FL ; 
  10 PW0YW-CTN-REINSTATE-FL PW0YW-CTN-REINSTATE-FL ; 
  10 PW0YW-REINSTATE-CTN PW0YW-REINSTATE-CTN ; 
  10 XXXLOCID XXXLOCID ; 
  10 PW0YWPLS PW0YWPLS ; 
  10 XWH-WHSE-CD XWH-WHSE-CD [50] ; 
  10 PK-CRTN-SEQ-NBR PK-CRTN-SEQ-NBR [50] ; 
  10 PK-TOTE-SEQ-NBR PK-TOTE-SEQ-NBR [50] ; 
  10 XGP-GPC-CD XGP-GPC-CD [50] ; 
  10 SY-STY-NBR SY-STY-NBR [50] ; 
  10 SY-COLR-CD-ID SY-COLR-CD-ID [50] ; 
  10 XDM-DIM-CD XDM-DIM-CD [50] ; 
  10 XQA-QUAL-CD XQA-QUAL-CD [50] ; 
  10 XOW-OWN-GRP-CD XOW-OWN-GRP-CD [50] ; 
  10 PC-CU-IN-SEG-CD PC-CU-IN-SEG-CD [50] ; 
  10 XEG-ENGR-DIFF-CD XEG-ENGR-DIFF-CD [50] ; 
  10 XPG-PKG-TYP-CD XPG-PKG-TYP-CD [50] ; 
  10 XUM-UOM-CD XUM-UOM-CD [50] ; 
  10 PW0YW-CNSLD-TYPE-IND PW0YW-CNSLD-TYPE-IND ; 
  10 XHDKEY XHDKEY ; 
    15 XHDCD XHDCD ; 
    15 XGPCD XGPCD ; 
  10 OP1TBREP OP1TBREP ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 PW0YWMSG PW0YWMSG ; 
  10 PW0YWNEW PW0YWNEW ; 
  10 PW0YWSWR PW0YWSWR ; 
  10 PW0YWTQY PW0YWTQY ; 
  10 PW0YWDOL PW0YWDOL ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 PW0YW-NBR-DETAIL-LN PW0YW-NBR-DETAIL-LN ; 
  10 PW0YW-NBR-DETAIL-SV PW0YW-NBR-DETAIL-SV ; 
  10 PW0YWIDX PW0YWIDX ; 
  10 PW0YWIX2 PW0YWIX2 ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 PW0YW-INFO-MSG PW0YW-INFO-MSG ; 
  10 PW0YWSWF PW0YWSWF ; 
  10 PW0YW-FIRST-TIME-SW PW0YW-FIRST-TIME-SW ; 
  10 PW0YW-LAST-CTN-DEL-SW PW0YW-LAST-CTN-DEL-SW ; 
  10 PW0YW-JOB-SUB-SW PW0YW-JOB-SUB-SW ; 
  10 PW0YW-NEW-CRTN-WT PW0YW-NEW-CRTN-WT ; 
  10 PW0YW-NEW-SIZE-WT PW0YW-NEW-SIZE-WT ; 
  10 PW0YWARZ PW0YWARZ ; 
    15 XARCD XARCD ; 
    15 SL4ZONE SL4ZONE ; 
  10 PW0YWQTY PW0YWQTY ; 
  10 PW0YWTAD PW0YWTAD ; 
  10 PW0YWPTM PW0YWPTM ; 
  10 PW0YWADJ PW0YWADJ ; 
  10 PW0YWTDL PW0YWTDL ; 
end // end PW0YW00

//*** RECORD=PW0YW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// 
// ***********************
Record PW0YW01 type basicRecord
  5 PW0YW01G PW0YW01G ; 
    10 PW0YWDBK PW0YWDBK ; 
      15 XWHCD XWHCD ; 
      15 XWHABRV XWHABRV ; 
      15 PWPTOSQN PWPTOSQN ; 
      15 PKDNCSQN PKDNCSQN ; 
      15 TSIPLNBR TSIPLNBR ; 
      15 TSVPLNBR TSVPLNBR ; 
      15 PWP1OF1F PWP1OF1F ; 
      15 PK1PKSCH PK1PKSCH ; 
      15 SWCLNENB SWCLNENB ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
      15 PW0YWPRT PW0YWPRT ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY1SSTNM SY1SSTNM ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XEGCD XEGCD ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 XOWCD XOWCD ; 
      15 TSOCRTNB TSOCRTNB ; 
      15 OP2LNINB OP2LNINB ; 
      15 OP1PARTN OP1PARTN ; 
    10 PW0YWLUK PW0YWLUK ; 
      15 PW0YWTOT PW0YWTOT ; 
      15 PW0YWCTN PW0YWCTN ; 
      15 PW0YWGPC PW0YWGPC ; 
      15 PW0YWSTY PW0YWSTY ; 
      15 PW0YWCLR PW0YWCLR ; 
      15 PW0YWDIM PW0YWDIM ; 
      15 PW0YWQUA PW0YWQUA ; 
      15 PW0YWISG PW0YWISG ; 
      15 PW0YWEDF PW0YWEDF ; 
      15 PW0YWPKG PW0YWPKG ; 
      15 PW0YWUOM PW0YWUOM ; 
      15 PW0YWOGC PW0YWOGC ; 
    10 CACHGFL CACHGFL ; 
    10 PK1BLLAD PK1BLLAD ; 
    10 SR2BLLSU SR2BLLSU ; 
    10 XCTCD XCTCD ; 
    10 YNTCD YNTCD ; 
    10 PWPPKTCD PWPPKTCD ; 
    10 ZZZCHGCT ZZZCHGCT ; 
    10 PW0YW-TITLE PW0YW-TITLE ; 
    10 PW0YW-NEW-CRTN PW0YW-NEW-CRTN ; 
      15 PW0YW-JUL-DT PW0YW-JUL-DT ; 
      15 PW0YW-CRTN-SEQNBR PW0YW-CRTN-SEQNBR ; 
end // end PW0YW01

//*** RECORD=PW0YW02 ****
// --------------------------------------
// Map PW0YM001 temporary storage detail.
// --------------------------------------
// 
// ***********************
Record PW0YW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(404) ; 
    10 PW0YWNLD PW0YWNLD ; 
    10 SY5SZID SY5SZID [10] ; 
    10 SY4IDDSC SY4IDDSC [10] ; 
    10 PW0YWARZ PW0YWARZ [10] ; 
      15 XARCD XARCD ; 
      15 SL4ZONE SL4ZONE ; 
    10 SL5LOCTN SL5LOCTN [10] ; 
    10 PK1QTY PK1QTY [10] ; 
    10 ALCQTY ALCQTY [10] ; 
    10 PW0YWADJ PW0YWADJ [10] ; 
    10 PW0YWSIZ PW0YWSIZ [10] ; 
    10 SR3QTYAL SR3QTYAL [10] ; 
    10 SR3QTYSH SR3QTYSH [10] ; 
    10 ZZZCHGCT ZZZCHGCT [10] ; 
    10 PW0YW-NEW-LINE PW0YW-NEW-LINE [10] ; 
end // end PW0YW02

//*** RECORD=PW0YW04 ****
// -------------------------------------------------
// Working Storage record passed when calling IO5760
// -------------------------------------------------
// ***********************
Record PW0YW04 type basicRecord
  10 PW0YW-IO-TASK PW0YW-IO-TASK ; 
  10 PW0YW-IO-COUNT PW0YW-IO-COUNT ; 
end // end PW0YW04

//*** RECORD=PW0YW05 ****
// ********** PICKING SHIP PACKING LIST ITEM TABLE ************
// 
// DB2 TABLE VIEW:      DPICK.VSPLIT01
// 
// COPYLIB MEMBER:      DCL00938
// 
// I/O MODULE:          IO5760
// 
// KEY TO DB2 TABLE:    XWHCD
//                      TS_NIKE_PL_NBR
//                      OP_ORD_PART_CHAR
//                      OP_CUST_ORD_ID
//                      OP_NIKE_ORD_ID
//                      OP_LINE_ITEM_NBR
// 
// DATE CREATED:        03/18/91
// 
// MAINTENANCE LOG:
// 
// DATE       NAME     COMMENT
// --------   ------   ---------------------------------------
// 03/18/91   SJOHNS   New record definition.
// 09/23/91   MWALTO   Added pk-cnsld-fl & pk-mstr-crtn-fl and
//                     renamed label codes for Oct. tbl chgs
// 10-03-91   jbruce   Correct desc pk-cnsld-fl,
//                     pk-mstr-crtn-fl.
// 06-18-92   shende   Add fields for table changes
// 10-02-92   mwalto   Add fields for table changes
// 08-09-93   pander   Add fields for table changes
// ***********************
Record PW0YW05 type basicRecord
  10 PW0YW-IO-FUNCTION PW0YW-IO-FUNCTION [100] ; 
  10 PW0YW-XCP-FL PW0YW-XCP-FL [100] ; 
  10 XWHCD XWHCD [100] ; 
  10 TSIPLNBR TSIPLNBR [100] ; 
  10 OP1PARTN OP1PARTN [100] ; 
  10 OP1CUOID OP1CUOID [100] ; 
  10 OP1NORID OP1NORID [100] ; 
  10 OP2LNINB OP2LNINB [100] ; 
  10 PKDNCSQN PKDNCSQN [100] ; 
  10 PW0YW-NEW-CRTN PW0YW-NEW-CRTN [100] ; 
  10 PWPTOSQN PWPTOSQN [100] ; 
  10 PK1PKSCH PK1PKSCH [100] ; 
  10 OP2CPLNB OP2CPLNB [100] ; 
  10 OSNPKGNB OSNPKGNB [100] ; 
  10 XGPCD XGPCD [100] ; 
  10 SY1STNBR SY1STNBR [100] ; 
  10 SY2CLRID SY2CLRID [100] ; 
  10 XDMCD XDMCD [100] ; 
  10 XQACD XQACD [100] ; 
  10 XOWCD XOWCD [100] ; 
  10 PC2INSEG PC2INSEG [100] ; 
  10 XEGCD XEGCD [100] ; 
  10 XPGCD XPGCD [100] ; 
  10 XUMCD XUMCD [100] ; 
  10 XBCCD XBCCD [100] ; 
  10 PW0YW-XHDCD1 PW0YW-XHDCD1 [100] ; 
  10 PW0YW-XHDCD2 PW0YW-XHDCD2 [100] ; 
  10 PW0YW-XHDCD3 PW0YW-XHDCD3 [100] ; 
  10 PW0YW-XHDCD4 PW0YW-XHDCD4 [100] ; 
  10 PW0YW-XHDCD5 PW0YW-XHDCD5 [100] ; 
  10 YNTCD YNTCD [100] ; 
  10 PW0YW-PWRLBCD1 PW0YW-PWRLBCD1 [100] ; 
  10 PW0YW-PWRLBCD2 PW0YW-PWRLBCD2 [100] ; 
  10 PW0YW-YLACD1 PW0YW-YLACD1 [100] ; 
  10 PW0YW-YLACD2 PW0YW-YLACD2 [100] ; 
  10 PWP1OF1F PWP1OF1F [100] ; 
  10 PWPPKTCD PWPPKTCD [100] ; 
  10 PWPNBRTO PWPNBRTO [100] ; 
  10 PWPCPKTM PWPCPKTM [100] ; 
  10 PWPTPKTM PWPTPKTM [100] ; 
  10 SWCLNENB SWCLNENB [100] ; 
  10 PKVSSPNB PKVSSPNB [100] ; 
  10 PWCTLNBR PWCTLNBR [100] ; 
  10 TSOCRTNB TSOCRTNB [100] ; 
  10 PK-CRTN-INNER-NBR PK-CRTN-INNER-NBR [100] ; 
  10 PK-INNER-CRTN-QTY PK-INNER-CRTN-QTY [100] ; 
  10 PK-CRTN-CNT-NBR PK-CRTN-CNT-NBR [100] ; 
  10 PK-OUTER-SEQ-NBR PK-OUTER-SEQ-NBR [100] ; 
  10 PK-EXPC-CRTN-WT PK-EXPC-CRTN-WT [100] ; 
  10 PK-ACTL-CRTN-WT PK-ACTL-CRTN-WT [100] ; 
  10 PK-CNSLD-FL PK-CNSLD-FL [100] ; 
  10 PK-UPS-CNSLD-CRTN PK-UPS-CNSLD-CRTN [100] ; 
  10 PK-MSTR-CRTN-FL PK-MSTR-CRTN-FL [100] ; 
  10 PWPPKGRP PWPPKGRP [100] ; 
  10 PK-ZONE-CNSLD-FL PK-ZONE-CNSLD-FL [100] ; 
  10 PK-ZN-CNSLD-MSTRFL PK-ZN-CNSLD-MSTRFL [100] ; 
  10 PK-ZN-CNSLD-SEQNBR PK-ZN-CNSLD-SEQNBR [100] ; 
  10 PK-ZONE-CNSLD-CRTN PK-ZONE-CNSLD-CRTN [100] ; 
  10 PK-COMB-CNSLD-CD PK-COMB-CNSLD-CD [100] ; 
  10 PK-CRTN-PSOV-FL PK-CRTN-PSOV-FL [100] ; 
  10 PK-OBND-QUAL-FL PK-OBND-QUAL-FL [100] ; 
  10 PK-PICK-XCEP-CD PK-PICK-XCEP-CD [100] ; 
  10 PK-NEW-CRTN-FL PK-NEW-CRTN-FL [100] ; 
  10 XXXUSRID XXXUSRID [100] ; 
  10 ZZZSDT ZZZSDT [100] ; 
  10 ZZZCHGCT ZZZCHGCT [100] ; 
end // end PW0YW05

//*** RECORD=PW0YW06 ****
// ************************************************************
// working storage for dpick.vsplsz01 table changes
// ************************************************************
// ***********************
Record PW0YW06 type basicRecord
  10 PW0YW-IO-FUNCTION PW0YW-IO-FUNCTION [900] ; 
  10 PW0YW-XCP-FL PW0YW-XCP-FL [900] ; 
  10 XWHCD XWHCD [900] ; 
  10 TSIPLNBR TSIPLNBR [900] ; 
  10 OP1PARTN OP1PARTN [900] ; 
  10 OP1CUOID OP1CUOID [900] ; 
  10 OP1NORID OP1NORID [900] ; 
  10 OP2LNINB OP2LNINB [900] ; 
  10 PWPTOSQN PWPTOSQN [900] ; 
  10 PKDNCSQN PKDNCSQN [900] ; 
  10 PW0YW-NEW-CRTN PW0YW-NEW-CRTN [900] ; 
  10 SY5SZID SY5SZID [900] ; 
  10 SY4IDDSC SY4IDDSC [900] ; 
  10 XARCD XARCD [900] ; 
  10 SL4ZONE SL4ZONE [900] ; 
  10 SL5LOCTN SL5LOCTN [900] ; 
  10 PK1QTY PK1QTY [900] ; 
  10 ZZZCHGCT ZZZCHGCT [900] ; 
  10 ZZZSDT ZZZSDT [900] ; 
  10 PW0YW-ADJ-QTY PW0YW-ADJ-QTY [900] ; 
  10 SR3QTYSH SR3QTYSH [900] ; 
  10 SR3QTYAL SR3QTYAL [900] ; 
  10 SR5QTYXC SR5QTYXC [900] ; 
end // end PW0YW06

//*** RECORD=PW0YW07 ****
// ************************************************************
// Working storage for dpick.vsplhd01 table updates
// ************************************************************
// ***********************
Record PW0YW07 type basicRecord
  10 PW0YW-IO-FUNCTION PW0YW-IO-FUNCTION [100] ; 
  10 XWHCD XWHCD [100] ; 
  10 TSIPLNBR TSIPLNBR [100] ; 
  10 OP1PARTN OP1PARTN [100] ; 
  10 OP1CUOID OP1CUOID [100] ; 
  10 OP1NORID OP1NORID [100] ; 
  10 PK1NBCTN PK1NBCTN [100] ; 
  10 PWONCTNO PWONCTNO [100] ; 
  10 PK-OUTER-ORD-QTY PK-OUTER-ORD-QTY [100] ; 
  10 PK-OUTER-CRTN-QTY PK-OUTER-CRTN-QTY [100] ; 
  10 PK-COMB-CNSLD-CD PK-COMB-CNSLD-CD [100] ; 
  10 ZZZSDT ZZZSDT [100] ; 
  10 ZZZCHGCT ZZZCHGCT [100] ; 
end // end PW0YW07

//*** RECORD=PW0YW09 ****
// Working Storage to format application posting information
// on a bad return from a call to SY2000.
// 
// 08/11/95  CBRINE  Initial setup.
// ***********************
Record PW0YW09 type basicRecord
  10 PW0YW-WSY2000-POST-1 PW0YW-WSY2000-POST-1 ; 
    15 PW0YW-WSY2000-GPC-CD PW0YW-WSY2000-GPC-CD ; 
    15 PW0YW-WSY2000-DASH-1 PW0YW-WSY2000-DASH-1 ; 
    15 PW0YW-WSY2000-STY-NBR PW0YW-WSY2000-STY-NBR ; 
    15 PW0YW-WSY2000-DASH-2 PW0YW-WSY2000-DASH-2 ; 
    15 PW0YW-WSY2000-COLR-CD PW0YW-WSY2000-COLR-CD ; 
    15 PW0YW-WSY2000-DASH-3 PW0YW-WSY2000-DASH-3 ; 
    15 PW0YW-WSY2000-DIM-CD PW0YW-WSY2000-DIM-CD ; 
    15 PW0YW-WSY2000-DASH-4 PW0YW-WSY2000-DASH-4 ; 
    15 PW0YW-WSY2000-PROD-REG-CD PW0YW-WSY2000-PROD-REG-CD ; 
    15 PW0YW-WSY2000-DASH-5 PW0YW-WSY2000-DASH-5 ; 
    15 PW0YW-WSY2000-RETURN-CD PW0YW-WSY2000-RETURN-CD ; 
end // end PW0YW09

//*** RECORD=PW0YW11 ****
// JCL variable card overrides for TARJCL table
// ***********************
Record PW0YW11 type basicRecord
  10 PW0YWIDX2 PW0YWIDX2 ; 
  10 TA3APLID TA3APLID ; 
    15 PW0YW-CICS-LIT PW0YW-CICS-LIT ; 
    15 PW0YW-CICS-VALUE PW0YW-CICS-VALUE ; 
    15 * char(1) ; 
  10 PW0YW-JOB-CARD char(80) ; // JCL Job card
    15 * char(4) ; 
    15 PW0YW-XWHCDJ PW0YW-XWHCDJ ; 
    15 * char(74) ; 
  10 PW0YW-OUTPUT-CARD char(80) ; // OUTPUT Warehouse code
    15 * char(2) ; 
    15 PW0YW-OUTPUT-LIT char(6) ; 
    15 * char(15) ; 
    15 PW0YW-OUTPUT-RMT char(3) ; 
    15 * char(54) ; 
  10 PW0YW-SYSTSIN-CARD char(80) ; // JCL Systsin card
    15 * char(14) ; 
    15 PW0YW-DSN-VALUE char(1) ; // T,D,F,Y value
    15 * char(65) ; 
  10 PW0YW-TYPE-CARD char(80) ; // JCL Systsin card
    15 * char(21) ; 
    15 PW0YW-TYPE-VALUE char(1) ; // T,D,F,Y value
    15 * char(58) ; 
  10 PW0YW-WHSE-CARD char(80) ; // JCL Warehouse card
    15 * char(20) ; 
    15 PW0YW-XWHCDW char(2) ; // warehouse code
    15 * char(58) ; 
  10 PW0YW-AZ153D-PARM-CARD char(80) ; // JCL Parm Card
    15 PW0YW-AZ153D-PARM-TRAN-ID char(4) ; // whse code only
    15 PW0YW-AZ153D-PARM-WHSE-CD char(2) ; // whse code only
    15 PW0YW-AZ153D-PARM-BILL-OF-LADING decimal(13) ; // whse code only
    15 PW0YW-AZ153D-PARM-BOL-SUB-NBR smallint ; // whse code only
    15 PW0YW-AZ153D-PARM-MOVERS-STAT-CD char(2) ; // whse code only
    15 * char(63) ; 
  10 PW0YW-FTP-CARD char(80) ; // JCL Parm Card
    15 * char(15) ; 
    15 PW0YW-FTP-LIT char(6) ; // whse code only
    15 * char(2) ; 
    15 PW0YW-FTP-TARGET char(20) ; // whse code only
      20 * char(4) ; 
      20 PW0YW-FTPPARMS-WHSE-CD char(2) ; // whse code only
      20 * char(14) ; 
    15 * char(37) ; 
  10 PW0YW-RSH-CARD char(80) ; // JCL Parm Card
    15 * char(15) ; 
    15 PW0YW-RSH-LIT char(3) ; // whse code only
    15 * char(5) ; 
    15 PW0YW-RSH-TARGET char(20) ; // whse code only
      20 * char(11) ; 
      20 PW0YW-RSH-CMD-WHSE-CD char(2) ; // whse code only
      20 * char(7) ; 
    15 * char(37) ; 
end // end PW0YW11

//*** RECORD=PW0YW12 ****
// --------------------------------------------------
// Working Storage record for the vsplit01 indicator.
// --------------------------------------------------
// ***********************
Record PW0YW12 type basicRecord
  10 SAVE-SPLIT-CSR-IND char(1) ; // saved vsplit01 csr indicator
end // end PW0YW12

Record PW0YW99 type basicRecord
  10 PW0YW-PK1770-PARM-CARD PW0YW-PK1770-PARM-CARD ; 
    15 PW0YW-RECD-TYPE-A PW0YW-RECD-TYPE-A ; 
    15 XWHCD XWHCD ; 
    15 PW0YW-NEW-CRTN PW0YW-NEW-CRTN ; 
    15 PW0YW-NEW-CRTN-WT PW0YW-NEW-CRTN-WT ; 
    15 PW0YW-ORIG-CRTN PW0YW-ORIG-CRTN ; 
    15 PW0YW-ORIG-CRTN-WT PW0YW-ORIG-CRTN-WT ; 
    15 PW0YW-TSIPLNBR PW0YW-TSIPLNBR ; 
    15 PW0YW-OP1CUOID PW0YW-OP1CUOID ; 
    15 PW0YW-OP1NORID PW0YW-OP1NORID ; 
    15 PW0YW-FILLER-24 PW0YW-FILLER-24 ; 
end // end PW0YW99

// OP/OM TO AB COMMON PASS RECORD
DataItem PW0Y-COMMON-REC char(3774)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OP0,OM0 INIT
DataItem PW0Y-INIT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OP/OM TO AB SPECIFIC DATA
DataItem PW0Y-PW-PASS-GRP char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// REMAINDER OF SYSTEM REC
DataItem PW0Y-SYS-FILLER char(3754)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SYSTEM REC (OPWREC OR OMWREC)
DataItem PW0Y-SYS-GRP char(3757)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// adjusted qty for detail line
DataItem PW0YW-ADJ-QTY decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XUM-UOM-CD
DataItem PW0YW-CARTON-ZEROED-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CICS Region literal (CICSD,T)
DataItem PW0YW-CICS-LIT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CICS Region Id
DataItem PW0YW-CICS-VALUE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Consolidation type indicator
DataItem PW0YW-CNSLD-TYPE-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new crtn sequence number
DataItem PW0YW-CRTN-SEQNBR num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XUM-UOM-CD
DataItem PW0YW-CTN-REINSTATE-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler length char(22)
DataItem PW0YW-FILLER-24 char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First time thru map (A/S mode)
DataItem PW0YW-FIRST-TIME-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// information message to display
DataItem PW0YW-INFO-MSG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max ts-crtn-nbr passed IO mod
DataItem PW0YW-IO-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// IOmod function
DataItem PW0YW-IO-FUNCTION char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// function passed in IO module
DataItem PW0YW-IO-TASK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Item index (1-10)
DataItem PW0YW-IT-INDEX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// determine if sz is zero'd out
DataItem PW0YW-JOB-SUB-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// julian date
DataItem PW0YW-JUL-DT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// determine if sz is zero'd out
DataItem PW0YW-LAST-CTN-DEL-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nbr of detail lines filled
DataItem PW0YW-NBR-DETAIL-LN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nbr of detail lines (save)
DataItem PW0YW-NBR-DETAIL-SV num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// New crtn (pk-nxt-crtn-seqnbr)
DataItem PW0YW-NEW-CRTN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// expected weight
DataItem PW0YW-NEW-CRTN-WT num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0YW-NEW-LINE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// expected weight
DataItem PW0YW-NEW-SIZE-WT num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-cust-ord-id
DataItem PW0YW-OP1CUOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-nike-ord-id
DataItem PW0YW-OP1NORID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0YW-ORIG-CRTN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// expected weight
DataItem PW0YW-ORIG-CRTN-WT num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ADD/SPLIT request flag
DataItem PW0YW-PF11ACT-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// carton data
DataItem PW0YW-PK1770-PARM-CARD char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save msg no
DataItem PW0YW-PW0YWMSG smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// pk_LABL_CD
DataItem PW0YW-PWRLBCD1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk_LABL_CD
DataItem PW0YW-PWRLBCD2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record type A
DataItem PW0YW-RECD-TYPE-A char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk_nxt_crtn_seqnbr
DataItem PW0YW-REINSTATE-CTN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// action indicator 'A'dd-'S'plit
DataItem PW0YW-RETURN-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First time through map
DataItem PW0YW-SPLIT-CSR-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// switch to determine if updated
DataItem PW0YW-SRORD-UPD-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size index (1-40)
DataItem PW0YW-SZ-INDEX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map title
DataItem PW0YW-TITLE char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// action indicator 'A'dd-'S'plit
DataItem PW0YW-TOTE-NBR-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_NIKE_PL_NBR
DataItem PW0YW-TSIPLNBR num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage index
DataItem PW0YW-W05-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage index
DataItem PW0YW-WAZ-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0YW-WSY2000-COLR-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0YW-WSY2000-DASH-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0YW-WSY2000-DASH-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0YW-WSY2000-DASH-3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0YW-WSY2000-DASH-4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0YW-WSY2000-DASH-5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0YW-WSY2000-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0YW-WSY2000-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0YW-WSY2000-POST-1 char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0YW-WSY2000-PROD-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0YW-WSY2000-RETURN-CD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0YW-WSY2000-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// exception flag (Y/N)
DataItem PW0YW-XCP-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XHD_HNDL_CD
DataItem PW0YW-XHDCD1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XHD_HNDL_CD
DataItem PW0YW-XHDCD2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XHD_HNDL_CD
DataItem PW0YW-XHDCD3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XHD_HNDL_CD
DataItem PW0YW-XHDCD4 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XHD_HNDL_CD
DataItem PW0YW-XHDCD5 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH_WHSE_CD (proc symbolic)
DataItem PW0YW-XWHCDJ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YLA_LABL_ATCH_CD
DataItem PW0YW-YLACD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YLA_LABL_ATCH_CD
DataItem PW0YW-YLACD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pw0yw03 group level
DataItem PW0YW01G char(169)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// adjustment
DataItem PW0YWADJ smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// area zone combination
DataItem PW0YWARZ char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem PW0YWCLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk_nxt_crtn_seqnbr
DataItem PW0YWCTN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// db keys
DataItem PW0YWDBK char(89)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDM_DIM_CD
DataItem PW0YWDIM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// adjustment dollar
DataItem PW0YWDOL num(4,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// xeg-engr-diff-cd
DataItem PW0YWEDF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem PW0YWGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work index
DataItem PW0YWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// Index for JCL Table
DataItem PW0YWIDX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC_CU_IN_SEG_CD
DataItem PW0YWISG char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work index
DataItem PW0YWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// lookup keys
DataItem PW0YWLUK char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save msg no
DataItem PW0YWMSG smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// New Detail Switch
DataItem PW0YWNDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new item found switch
DataItem PW0YWNEW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// New key Switch
DataItem PW0YWNKS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nbr of lines per page
DataItem PW0YWNLD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XOW_OWN_GRP_CD
DataItem PW0YWOGC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XPG_PKG_TYP_CD
DataItem PW0YWPKG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PW0YWPLS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product total on scrn
DataItem PW0YWPRT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pack time adjustment
DataItem PW0YWPTM decimal(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work quantity field
DataItem PW0YWQTY smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// XQA_QUAL_CD
DataItem PW0YWQUA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new scrn SY_SZ_ID
DataItem PW0YWSIZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// shiprec found switch
DataItem PW0YWSRS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NBR
DataItem PW0YWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem PW0YWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PW0YWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total adj qty for orig crtn
DataItem PW0YWTAD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total dollar adjustment
DataItem PW0YWTDL num(4,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pk_tote_seq_nbr
DataItem PW0YWTOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total quantity adjustment
DataItem PW0YWTQY smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// XUM_UOM_CD
DataItem PW0YWUOM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end