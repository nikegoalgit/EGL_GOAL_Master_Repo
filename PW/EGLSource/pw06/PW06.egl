package pw06;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PW06 ****
// This program shows pick pool quantities, full case and repac
// repack, spec hndl or non. Also shows order quantites, fc or
// rp, spcl hndl or non. Also shows selection quantites, fc or
// rp, spcl hndl or non.
// The user must enter a date range ( to date is
// required ). The data will then be displayed and the user may
// inquire on the order.
// *
// By putting an 'I' in the action field and will be transfered
// to PW07 -
// *
// Selection quanties may be added by entering an 'A' in action
// field. They may enter selection quantities to add or allow
// it to default, it would then add pick pool fc & rp under
// spcl hndl columns and add it under proper selection
// quantities column.
// *
// Selection quantities may be changed by entering a 'c' in
// action field. The columns under selection quanties would
// need to be entered to be changed to.
// *
// Selection quantities may be deleted by entering a 'd' in
// action field. The selection quantities would be deleted.
// *
// The user can transfer out of this application by using one
// of the PF keys displayed at the bottom of the map, or by
// entering fast-path information (also at the bottom of the
// map).
// 
// CONTROL#    DATE      ID             COMMENTS
// --------  --------  ------  ------------------------------
// new       10/18/91  jlucas  New application.
//           12/30/91  SHENDE  Cleared qty fields so that the
//                             quantities in line 1 and 2 don't
//                             combine.
//           03/09/92  SHENDE  Added xbc-brand-cd (xbccd) for
//                             March table changes.
//           04/27/92  SHENDE  Changed process flag to allow
//                             order validation.
//           04/28/92  SHENDE  Allow access to PW08 and do not
//                             display in-store promo qtys
//           05/11/92  SHENDE  Move division code to PWMREC.
//           06/22/92  SHENDE  Table changes
//           07/16/92  SHENDE  Display brand code.  Also, allow
//                             wild card (*) for xdvcd & xbccd
//           09/14/92  SHENDE  Move '*' instead of blank for
//                             wildcard value to pkhrec.
//           08/05/93  RCREAM  Added a second map for Picking
//                             that is displayed in pink.
//                             Changed the logic in: 000, 110,
//                             112, 113, 114, 115, 120, 130,
//                             140, 150, 151, 160, 162, 163,
//                             164,165, 166, s-add-ord-qty,
//                             s-change-row, s-decl-carr,
//                             s-decl-cust, s-decl-ord, s-decl-
//                             selord, s-declare-sel, s-delete-
//                             row, s-fetch-carr, s-fetch-cust,
//                             s-fetch-ord, s-fetch-sel,
//                             s-fetch-selord, s-sel-sel-qty.
//                             Updated pw06w01. Removed select
//                             field from maps. Added processes
//                             120-conv-map1 & map2, 121-data-
//                             map1 & map2, 150-edit-map1 &
//                             map2, 152-detl-map1 & map2, 153-
//                             date-map1 & map2, 160-vald-map1
//                             & map2.  Added  SGRPS s-edt-add-
//                             map1 & map2, s-edt-chg-map1 &
//                             map2, s-edt-del-map1 & map2.
//           10/13/93  kande1  renamed new procs for standards
//  pk349    11/04/93  kande1  the validate of the selection
//                             had been removed. It is being
//                             added back and modified so the
//                             show will show only non-selected
//                             orders from the pool
//  Canada   12/04/95  Ryonke  Pick up new version of XPPK003.
//  PK#000   12/15/95  Ovazqu  Include carrier code break on
//                             map & program logic.
//                             Also, when doing "planning", do
//                             not include order/qty units
//                             already selected when doing
//                             "picking".
//  BG@QD    12/06/96  Ovazqu  For whse 51, do not select B-grd
//                             orders unless they are "normal".
//           08/20/97  Dgerlt  Recompiled to pick up the new
//                             XPPK005 which fixes a b-grade/
//                             close out problem.
//  Y2KFIX   02/16/98  DKENNY  Y2K MODIFICATIONS MADE TO:
//                             PW06-15301, PW06-15302, PW06-
//                             16001, PW06-16002, PW06-162,
//                             PW06-163, PW06-164, PW06M001,
//                             PW06M002, PW06S-ADD-SEL-QTY &
//                             PW06S-PROCESS-POOL
// *********************
Program PW06 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK4REC PK4REC; // record
  PK9REC PK9REC; // record
  PKBREC PKBREC; // record
  PKHREC PKHREC; // record
  PKWREC PKWREC; // record
  PW06W00 PW06W00; // record
  PW06W01 PW06W01; // record
  PWFREC PWFREC; // record
  PWKREC PWKREC; // record
  PWMREC PWMREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA9REC TA9REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XBCTBL; // table
  use PW06M.PW06M001,  // forms
      PW06M.PW06M002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* ------------------------------------------------------------*/

    set PW06W00 empty; /* Initialize working storage*/
    set PW06W01 empty; /* Initialize map working storage*/
    set PW06M001 initial; /* Initialize map output area*/
    set PW06M002 initial; /* Initialize map output area*/
    set PWKREC empty; /* Initialize pk work record*/
    set PKBREC empty; /* Initialize io record*/
    set PKHREC empty; /* Initialize io record*/
    set PWFREC empty; /* Initialize io record*/
    set TAEREC empty; /* Initialize io record*/
    set TA5REC empty; /* Initialize io record*/
    set TA9REC empty; /* Initialize io record*/
    set SQLCA empty; /* Initialize io record*/

    PW06W00.PW06W-REQUEST-DATA = "N"; /* request for data*/
    PW06W00.PW06W-FORMAT-SCR = "Y"; /* format the map*/

    PWKREC.PWKARRAY = PKWREC.PKWARRAY;
    PKWREC.PKWINDEX = 1; /* set index to 1*/

    if (PKWREC.PKWSELSW == "PP") /* if pick planning run mode*/

      PW06W00.PW06W-RUN-MODE = "P"; /* set run mode to 'p'*/

    end

     /* move 'Do Not Ship Before' date from first occurrance to*/
     /* convert for map*/

    PW06W00.PW06W-FROM-DATE = PKWREC.PKWFRMDT[1]; /* move to num date*/
    PW06W00.PW06W-TO-DATE = PKWREC.PKWTODT[1]; /* move to num date*/

     /* ----format to century--------*/
    if (PW06W00.PW06W-FROM-DATE != 0)

      if (PW06W00.PW06W-TO-YY > 50
       && PW06W00.PW06W-TO-YY <= 99)

        PW06W00.PW06W-TO-CC = 19;
      else

        PW06W00.PW06W-TO-CC = 20;
      end

     /* ----format from century-------*/
      if (PW06W00.PW06W-FROM-YY > 50
       && PW06W00.PW06W-FROM-YY <= 99)

        PW06W00.PW06W-FROM-CC = 19;
      else

        PW06W00.PW06W-FROM-CC = 20;
      end
    end

    PW06W01.PW06W-DNSB-FROM-MM = PW06W00.PW06W-FROM-MM;
    PW06M001.PW06M-DNSB-FROM-MM = PW06W00.PW06W-FROM-MM;
    PW06M002.PW06M-DNSB-FROM-MM = PW06W00.PW06W-FROM-MM;
    PW06W01.PW06W-DNSB-FROM-DD = PW06W00.PW06W-FROM-DD;
    PW06M001.PW06M-DNSB-FROM-DD = PW06W00.PW06W-FROM-DD;
    PW06M002.PW06M-DNSB-FROM-DD = PW06W00.PW06W-FROM-DD;
    PW06W01.PW06W-DNSB-FROM-YY = PW06W00.PW06W-FROM-YY;
    PW06M001.PW06M-DNSB-FROM-YY = PW06W00.PW06W-FROM-YY;
    PW06M002.PW06M-DNSB-FROM-YY = PW06W00.PW06W-FROM-YY;

    PW06W01.PW06W-DNSB-TO-MM = PW06W00.PW06W-TO-MM;
    PW06M001.PW06M-DNSB-TO-MM = PW06W00.PW06W-TO-MM;
    PW06M002.PW06M-DNSB-TO-MM = PW06W00.PW06W-TO-MM;
    PW06W01.PW06W-DNSB-TO-DD = PW06W00.PW06W-TO-DD;
    PW06M001.PW06M-DNSB-TO-DD = PW06W00.PW06W-TO-DD;
    PW06M002.PW06M-DNSB-TO-DD = PW06W00.PW06W-TO-DD;
    PW06W01.PW06W-DNSB-TO-YY = PW06W00.PW06W-TO-YY;
    PW06M001.PW06M-DNSB-TO-YY = PW06W00.PW06W-TO-YY;
    PW06M002.PW06M-DNSB-TO-YY = PW06W00.PW06W-TO-YY;

    if (PKWREC.XWHCD != "  ")

      PW06W01.XWHCD = PKWREC.XWHCD; /* store passed whse code*/
      PW06M001.XWHCD = PKWREC.XWHCD; /* store passed whse code*/
      PW06M002.XWHCD = PKWREC.XWHCD; /* store passed whse code*/
      PW06W01.XWHABRV = PKWREC.XWHABRV; /* store passed whse desc*/
      PW06M001.XWHABRV = PKWREC.XWHABRV; /* store passed whse desc*/
      PW06M002.XWHABRV = PKWREC.XWHABRV; /* store passed whse desc*/

    end

    if (PKWREC.XDVCD[1] != "  ")
      PW06W01.XDVCD = PKWREC.XDVCD[1]; /* passed division code*/
    end

    if (PKWREC.XBCCD[1] != "  ")
      PW06W01.XBCCD = PKWREC.XBCCD[1]; /* passed brand code*/
    end

     /* -----------------------------------------------------------*/
      /* Convert current date to CCYYMMDD format for comparison*/
      /* purposes later in program.*/
     /* -----------------------------------------------------------*/

    PW06W00.PW06W-EZEDTE = VGVar.currentShortGregorianDate; /* get system date MM/DD/YY*/
    if (PW06W00.PW06W-CURR-YY > 80) /* if year gt 80*/

      PW06W00.PW06W-CURR-CC = 19; /* set century to 19*/

    else

      PW06W00.PW06W-CURR-CC = 20; /* otherwise, set century to 20*/

    end

    goto PW06-000; /* Validate entry*/


    PW06-000: PW06-000();
    goto PW06-001; /* converse main process*/
    PW06-001: PW06-001();
     /* -----------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* -----------------------------------------------------------*/

    goto PW06-001; /* Converse the main process*/


  end // end main
end // end PW06

// Validate entry
Function PW06-000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP != "PW0I" /* From allowed application*/
   && COMMAREA.CAFROMAP != "PW0J" 
   && COMMAREA.CAFROMAP != "PW0M" 
   && COMMAREA.CAFROMAP != "PW0N" 
   && COMMAREA.CAFROMAP != "PW0O" 
   && COMMAREA.CAFROMAP != "PW0Q" 
   && COMMAREA.CAFROMAP != "PW0R" 
   && COMMAREA.CAFROMAP != "PW0S" 
   && COMMAREA.CAFROMAP != "PW0T" 
   && COMMAREA.CAFROMAP != "PW0U" 
   && COMMAREA.CAFROMAP != "PW0V" 
   && COMMAREA.CAFROMAP != "PW0P" 
   && COMMAREA.CAFROMAP != "PW0W" 
   && COMMAREA.CAFROMAP != "PW0X" 
   && COMMAREA.CAFROMAP != "PW07" 
   && COMMAREA.CAFROMAP != "PW08" 
   && COMMAREA.CAFROMAP != "GD00")

    /* ------------------------------------------------------------*/
    /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/
    COMMAREA.CATOAPP = COMMAREA.CAFROMAP;

    XSNOWAY(); /* Invalid transfer was attempted*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether passed warehouse is valid...*/
   /* ------------------------------------------------------------*/
  XPPK003(); /* Validate warehouse*/

  if (PKWREC.XDVCD[1] != "*")
    XPPK004(); /* Validate division code*/

    if (converseVar.validationMsgNum == 0)
      PW06M001.XDVCD = PKWREC.XDVCD[1];
      PW06M002.XDVCD = PKWREC.XDVCD[1];
      PW06W01.XDVCD = PKWREC.XDVCD[1];
      PW06W01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      PW06M001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      PW06M002.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
    end
  else
    PW06M001.XDVCD = PKWREC.XDVCD[1];
    PW06M002.XDVCD = PKWREC.XDVCD[1];
    PW06W01.XDVCD = PKWREC.XDVCD[1];
    PW06W01.XDVDESC = "ALL DIVISIONS";
    PW06M001.XDVDESC = "ALL DIVISIONS";
    PW06M002.XDVDESC = "ALL DIVISIONS";
  end

   /* --------- validate brand code ---------------------------------*/
  if (PKWREC.XBCCD[1] != "*")
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(414);
        set PW06M001.XBCCD cursor, bold;
        set PW06M002.XBCCD cursor, bold;
        PW06W00.XXXMODID = "000";
        exit stack;
      else
        PW06M001.XBCCD = PKWREC.XBCCD[1];
        PW06M002.XBCCD = PKWREC.XBCCD[1];
        PW06W01.XBCCD = PKWREC.XBCCD[1];
        PW06W01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
        PW06M001.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
        PW06M002.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
      end
    else
      converseLib.validationFailed(413);
      set PW06M001.XBCCD cursor, bold;
      set PW06M002.XBCCD cursor, bold;
      PW06W00.XXXMODID = "000";
      exit stack;
    end
  else
    PW06M001.XBCCD = PKWREC.XBCCD[1];
    PW06M002.XBCCD = PKWREC.XBCCD[1];
    PW06W01.XBCCD = PKWREC.XBCCD[1];
    PW06W01.XBCABRV = " ";
    PW06M001.XBCABRV = " ";
    PW06M002.XBCABRV = " ";
  end


  if (COMMAREA.CAFROMAP == "PW07")
    if (PKWREC.PKWSELSW == "PK") /* picking*/
      PW06M002.PW06M-BGR-CLS-SW = PKWREC.PKW-ORDER-TYP-IND[1];
      PW06W00.PW06W-REQUEST-DATA = "Y";
    else
      PW06M001.PW06M-BGR-CLS-SW = PKWREC.PKW-ORDER-TYP-IND[1];
      PW06W00.PW06W-REQUEST-DATA = "Y";
    end
  end


end // end PW06-000

// Main process
Function PW06-001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Display map.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW06-100(); /* Display map*/


end // end PW06-001

// Main process to display map 1
Function PW06-100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW06-110(); /* Obtain the data to display*/

  PW06-120(); /* Format and display the map*/

  PW06-130(); /* Check attention identifier*/

  PW06-140(); /* Reset fields to normal intensity*/

  PW06-150(); /* Verify the entered data*/

  PW06-160(); /* Process valid input request*/


end // end PW06-100

// Obtain data to display
Function PW06-110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  if (PW06W00.PW06W-REQUEST-DATA != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/
  PW06W00.XXXTSLEN = 742; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/
  if (PW06W00.XXXMSGNO == 0) /* No message to display*/
    PW06W00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/
  PW06-111(); /* Purge any temporary storage*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW06W01.XWHCD = PW06M002.XWHCD; /* warehouse code*/
    PW06W01.XWHABRV = PW06M002.XWHABRV; /* warehouse desc*/
  else
    PW06W01.XWHCD = PW06M001.XWHCD; /* warehouse code*/
    PW06W01.XWHABRV = PW06M001.XWHABRV; /* warehouse desc*/
  end

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW06W01.XDVCD = PW06M002.XDVCD; /* division code*/
    if (PW06M002.XDVCD == "*")
      PW06W01.XDVDESC = "ALL DIVISIONS";
    else
      PW06W01.XDVDESC = PW06M002.XDVDESC;
    end
  else
    PW06W01.XDVCD = PW06M001.XDVCD; /* division code*/
    if (PW06M001.XDVCD == "*")
      PW06W01.XDVDESC = "ALL DIVISIONS";
    else
      PW06W01.XDVDESC = PW06M001.XDVDESC;
    end
  end

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW06W01.XBCCD = PW06M002.XBCCD; /* brand code*/
    if (PW06M002.XBCCD == "*")
      PW06W01.XBCABRV = " ";
    else
      PW06W01.XBCABRV = PW06M002.XBCABRV;
    end
  else
    PW06W01.XBCCD = PW06M001.XBCCD; /* brand code*/
    if (PW06M001.XBCCD == "*")
      PW06W01.XBCABRV = " ";
    else
      PW06W01.XBCABRV = PW06M001.XBCABRV;
    end
  end

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW06W01.PW06W-DNSB-TO-MM = PW06M002.PW06M-DNSB-TO-MM;
                                   /* dnsb month*/
    PW06W01.PW06W-DNSB-TO-DD = PW06M002.PW06M-DNSB-TO-DD; /* dnsb day*/
    PW06W01.PW06W-DNSB-TO-YY = PW06M002.PW06M-DNSB-TO-YY; /* dnsb year*/
    PW06W01.PW06W-DNSB-FROM-MM = PW06M002.PW06M-DNSB-FROM-MM;
                                   /* dnsb mm*/
    PW06W01.PW06W-DNSB-FROM-DD = PW06M002.PW06M-DNSB-FROM-DD;
                                   /* dnsb dd*/
    PW06W01.PW06W-DNSB-FROM-YY = PW06M002.PW06M-DNSB-FROM-YY;
                                   /* dnsb yy*/
    PW06W01.PW06W-BGR-CLS-SW = PW06M002.PW06M-BGR-CLS-SW;
  else
    PW06W01.PW06W-DNSB-TO-MM = PW06M001.PW06M-DNSB-TO-MM;
                                   /* dnsb month*/
    PW06W01.PW06W-DNSB-TO-DD = PW06M001.PW06M-DNSB-TO-DD; /* dnsb day*/
    PW06W01.PW06W-DNSB-TO-YY = PW06M001.PW06M-DNSB-TO-YY; /* dnsb year*/
    PW06W01.PW06W-DNSB-FROM-MM = PW06M001.PW06M-DNSB-FROM-MM;
                                   /* dnsb mm*/
    PW06W01.PW06W-DNSB-FROM-DD = PW06M001.PW06M-DNSB-FROM-DD;
                                   /* dnsb dd*/
    PW06W01.PW06W-DNSB-FROM-YY = PW06M001.PW06M-DNSB-FROM-YY;
                                   /* dnsb yy*/
    PW06W01.PW06W-BGR-CLS-SW = PW06M001.PW06M-BGR-CLS-SW;
  end

  PW06W00.PW06W-TOT-ORD-SP-HNDL = 0; /* zero out totals*/
  PW06W00.PW06W-TOT-ORD-NSP-HNDL = 0; /* zero out totals*/
  PW06W00.PW06W-TOT-QTY-SP-HNDL = 0; /* zero out totals*/
  PW06W00.PW06W-TOT-QTY-NSP-HNDL = 0; /* zero out totals*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/
  PW06-112(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/
  PW06W00.PW06W-POOL-SP-FC = 0; /* zero out full case ws*/
  PW06W00.PW06W-POOL-NSP-FC = 0; /* zero out full case ws*/
  PW06W00.PW06W-POOL-SP-RP = 0; /* zero out repack ws*/
  PW06W00.PW06W-POOL-NSP-RP = 0; /* zero out repack ws*/
  PW06W00.PW06W-SEL-EXIST-SW = "Y";
  PW06W00.PW06W-HOLD-TF1CARCD = " "; /* reset carrier code*/
  PW06W00.PW06W-LAST-TF1CARCD = " "; /* move ' ' to last carrier*/
  PW06W00.PW06W-LAST-DNSB = 0; /* move 0 to last dnsb*/
  PW06W00.PW06W-HOLD-DATE = 0; /* move 0 to date hold*/
  PW06W00.PW06W-IDX = 1; /* Display line index*/
  PW06W00.PW06W-CURSOR-POOL-SW = "N"; /* End of cursor switch*/
  PW06W00.PW06W-READ-POOL-SW = "Y"; /* move y to read pool*/

  while (PW06W00.PW06W-CURSOR-POOL-SW == "N") /* Until end of cursor*/

    if (PW06W00.PW06W-READ-POOL-SW == "Y")
      PW06-113(); /* Fetch next row in the cursor*/
    end

    /* ------------------------------------------------------------*/
    /* If not end of cursor, retrieve corresponding data from*/
    /* pool header and carrier hold tables.*/
    /* ------------------------------------------------------------*/
    if (PW06W00.PW06W-CURSOR-POOL-SW == "N") /* Not end of cursor*/

      PW06-114(); /* verify order*/

      /* ------------------------------------------------------------*/
      /* If order qualifies, save the data in display storage.*/
      /* ------------------------------------------------------------*/
      if (PW06W00.PW06W-PROCESS == "Y") /* okay to process order*/

        PW06-115(); /* Process Valid Order*/

        /* ------------------------------------------------------------*/
        /* If the page is full, add the page to the storage queue.*/
        /* ------------------------------------------------------------*/
        if (PW06W00.PW06W-IDX > 10) /* Page is full*/

          PW06-116(); /* Add page to temporary storage*/

          set PW06W01 empty; /* clear display storage*/
          PW06W00.PW06W-IDX = 1; /* Display line index*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Check here if no pool records to process and still sel qty*/
   /* records to process*/
   /* ------------------------------------------------------------*/
  PK4REC.OP1DSBDT = 99999999; /* when complete processing pool records*/
  PK4REC.TF1CARCD = "9999";

   /* ------------------------------------------------------------*/
   /* if values in pool, move y to data exist switch*/
   /* ------------------------------------------------------------*/
  if (PW06W01.PW06W-DNSB-DATE[PW06W-IDX] > 0
   || PW06W01.TF1CARCD[PW06W-IDX] > " "
   || PW06W01.PW06W-POOL-SP-FC[PW06W-IDX] > 0
   || PW06W01.PW06W-POOL-SP-RP[PW06W-IDX] > 0
   || PW06W01.PW06W-POOL-NSP-FC[PW06W-IDX] > 0
   || PW06W01.PW06W-POOL-NSP-RP[PW06W-IDX] > 0)

    PW06W00.PW06W-DATA-EXIST-SW = "Y";
  else

    PW06W00.PW06W-DATA-EXIST-SW = "N";
  end

   /* ------------------------------------------------------------*/
   /* if sel qty dnsb le to date and not end of sel qtys and data*/
   /* exist sw eq y, accum row by 1;*/
   /* ------------------------------------------------------------*/
  while (PWMREC.OP1DSBDT <= PW06W00.PW06W-TO-DATE
   && PW06W00.PW06W-CURSOR-SEL-SW != "Y")

    if (PW06W00.PW06W-DATA-EXIST-SW == "Y")
      PW06W00.PW06W-IDX = PW06W00.PW06W-IDX + 1;
    end

    /* ------ Page is full -----------------------*/
    if (PW06W00.PW06W-IDX > 10)
      PW06-116(); /* Add page to temporary storage*/
      set PW06W01 empty; /* clear display storage*/
      PW06W00.PW06W-IDX = 1; /* Display line index*/
      PW06-115(); /* save values in w01 record*/
    end

    PW06S-ADD-SEL-QTY(); /* accumlate sel qtys*/

    if (PW06W00.PW06W-DATA-EXIST-SW == "N")
      /* ------ If sel qty GT 0 ----------------*/
      if (PW06W01.PW06W-SEL-SP[PW06W-IDX] > 0
       || PW06W01.PW06W-SEL-NSP[PW06W-IDX] > 0)

        PW06W-DATA-EXIST-SW = "Y"; /* move y to data exist*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PW06W00.PW06W-DATA-EXIST-SW == "Y")
    if (PW06W00.PW06W-IDX > 1 /* Page was formatted*/
     || PW06W01.PW06W-DNSB-MM[1] >= 0)

      PW06-116(); /* Add page to temporary storage*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected sets*/
   /* ------------------------------------------------------------*/

  PW06-117(); /* Close dpick.vpoolh01*/
  PW06S-CLOSE-SELORD(); /* Close dpick.vselor01*/
  PW06S-CLOSE-SEL(); /* Close dpick.vselqt01*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  PW06W00.PW06W-FORMAT-SCR = "Y"; /* format screen*/
  if (PW06W00.TA5TSQIX == 0) /* No pages formatted*/

    PW06W00.XXXMODID = "110"; /* Module identification*/
    PW06W00.XXXMSGNO = 31; /* No data was found to display*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  PW06W00.PW06W-REQUEST-DATA = "N"; /* Request for data switch*/


end // end PW06-110

// Purge temporary storage
Function PW06-111()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  set PW06W01 empty; /* M001 display storage*/
  PW06W00.PW06W-DATA-CHGD-SW = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PW06W00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PW06W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW06W00.XXXMODID = "111"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW06W00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06-111

// Open cursor in DPICK.VPOOLH01
Function PW06-112()
   /* ------------------------------------------------------------*/
   /* Select set on DPICK.VPOOLH01*/
   /* ------------------------------------------------------------*/
  set PK4REC empty; /* Clear row storage area*/
  PK4REC.XWHCD = PW06W01.XWHCD; /* warehouse*/
  PK4REC.XDVCD = PW06W01.XDVCD; /* division code*/
  PK4REC.XBCCD = PW06W01.XBCCD; /* brand code*/
  PK4REC.OP1DSBDT = -1; /* don't ship before date*/
  PK4REC.PK4ORHLD = "*"; /* order hold*/
  PK4REC.PK4CUHLD = "*"; /* customer hold*/
  PK4REC.TF1CARCD = "*"; /* carrier code*/
  PK4REC.OP1SPHDF = "*"; /* spec handle flag*/
  PK4REC.PK4SLIND = "*"; /* select indicator*/


  try
    call "IO1720" ("S6", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* Also only declare and fetch dpick.vselor01 if successful.*/
   /* Also declare and fetch dpick.vselqt01 until lt from date or*/
   /* no more records to fetch*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PW06S-DECL-SELORD(); /* select set from dpick.vselor01*/
    PW06W00.PW06W-CURSOR-ORD-SW = " ";
    PW06S-FETCH-SELORD(); /* Fetch from dpick.vselor01*/

    PW06S-DECLARE-SEL(); /* select set from dpick.vselqt01*/
    PW06W00.PW06W-CURSOR-SEL-SW = " ";
    PW06S-FETCH-SEL(); /* Fetch from dpick.vselqt01*/

    while (PWMREC.OP1DSBDT < PW06W00.PW06W-FROM-DATE
     && PW06W00.PW06W-CURSOR-SEL-SW == " ")
      PW06S-FETCH-SEL(); /* Fetch from dpick.vselqt01*/
    end

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW06W00.XXXMODID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "PW06"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06-112

// Fetch row in DPICK.VPOOLH01
Function PW06-113()
   /* ------------------------------------------------------------*/
   /* fetch next DPICK.VPOOLH01*/
   /* ------------------------------------------------------------*/
  try
    call "IO1720" ("N6", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* end of set*/
      PW06W00.PW06W-CURSOR-POOL-SW = "Y"; /* end of cursor*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW06W00.XXXMODID = "113"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "PW06"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06-113

// Verify order
Function PW06-114()
   /* ------------------------------------------------------------*/
   /* Set process flag to YES.*/
   /* ------------------------------------------------------------*/
  PW06W00.PW06W-PROCESS = "Y";


   /* ------------------------------------------------------------*/
   /* Process only those orders which are either B-grade or*/
   /* Closeout.  If order is both, process as closeout.*/
   /*  */
   /* B-grade has to be "normal", no "sameday" or anything else.*/
   /* ------------------------------------------------------------*/
  XPPK005();

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW06M002.PW06M-BGR-CLS-SW != PKWREC.PKW-ORDER-TYP-IND)
      PW06W00.PW06W-PROCESS = "N"; /* don't process this order*/
      return;
    end
  else
    if (PW06M001.PW06M-BGR-CLS-SW != PKWREC.PKW-ORDER-TYP-IND)
      PW06W00.PW06W-PROCESS = "N"; /* don't process this order*/
      return;
    end
  end

  if (PKWREC.XWHCD == "51"
   && PKWREC.PKW-ORDER-TYP-IND == "B")

    if (PK4REC.XPPCD == "30" /* B-grade has to be "normal"*/
     || PK4REC.XPPCD == "  ")
        /* NEXT SENTENCE*/
    else
      PW06W00.PW06W-PROCESS = "N"; /* don't process this order*/
      return;
    end
  end


   /* ------------------------------------------------------------*/
   /* Check DNSB date.*/
   /* ------------------------------------------------------------*/
  if (PK4REC.OP1DSBDT > PW06W00.PW06W-TO-DATE) /* "to" date*/
    PW06W00.PW06W-PROCESS = "N"; /* don't process this order*/
    return;
  else
    if (PK4REC.OP1DSBDT < PW06W00.PW06W-FROM-DATE) /* "from" date*/
      PW06W00.PW06W-PROCESS = "N"; /* don't process this order*/
      return;
    end
  end


   /* --------------------------------------------------------------*/
   /* Valid if order is NOT in-store promo. (xdvcd = 01 & xgpcd = 01*/
   /* --------------------------------------------------------------*/
  if (PK4REC.XDVCD == "01"
   && PK4REC.XGPCD == "01")
    PW06W00.PW06W-PROCESS = "N"; /* don't process this order*/
    return;
  end


   /* --------------------------------------------------------------*/
   /* Valid if order is NOT ColeHaan*/
   /* --------------------------------------------------------------*/
  if (PW06W01.XBCCD == "*"
   && PK4REC.XBCCD == "08")
    PW06W00.PW06W-PROCESS = "N"; /* don't process this order*/
    return;
  end


   /* ------------------------------------------------------------*/
   /* Check stock transfer flag.  Valid if order is NOT stock*/
   /* transfer.  (pk-stktf-fl NE 'Y').*/
   /* ------------------------------------------------------------*/
  if (PK4REC.PK4STKTF == "Y")
    PW06W00.PW06W-PROCESS = "N"; /* don't process this order*/
    return;
  end


   /* ------------------------------------------------------------*/
   /* Check for valid selection indicator (PK-SEL-IND)*/
   /* ------------------------------------------------------------*/
  PW06S-VALIDAT-SEL();

  if (PW06W00.PW06W-PROCESS == "N")
    return;
  end


   /* --------------------------------------------------------*/
   /* Check carrier hold record.*/
   /* --------------------------------------------------------*/
  PW06S-SEL-CARR-HLD();

  if (PW06W00.PW06W-PROCESS == "N")
    return;
  end


   /* --------------------------------------------------------*/
   /* Check if order hold flag is 'y'.*/
   /* If so, spin thru order hold file to see if there are any*/
   /* records for order with a rlse date > todays date.*/
   /* --------------------------------------------------------*/
  if (PK4REC.PK4ORHLD == "Y")

    PW06S-SEL-ORD-HLD(); /* check rlse date*/

    if (PW06W00.PW06W-PROCESS == "N")
      return;
    end
  end


   /* ------------------------------------------------------------*/
   /* Check if cust hold flag is 'y'.*/
   /* If so, spin thru customer hold file to see if there are any*/
   /* records for order with a rlse date > todays date.*/
   /* ------------------------------------------------------------*/
  if (PK4REC.PK4CUHLD == "Y")

    PW06S-SEL-CUST-HLD(); /* check rlse date*/

    if (PW06W00.PW06W-PROCESS == "N")
      return;
    end
  end


end // end PW06-114

// Process Valid Order
Function PW06-115()
   /* ------------------------------------------------------------*/
   /* If first line on subsequent page, save heading information.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/

    if (PW06W00.PW06W-IDX == 1) /* and first line on page*/
      PW06W01.XWHCD = PW06M002.XWHCD; /* Warehouse code*/
      PW06W01.XWHABRV = PW06M002.XWHABRV; /* Warehouse abrv*/
      PW06W01.XDVCD = PW06M002.XDVCD; /* division code*/
      if (PW06M002.XDVCD == "*")
        PW06W01.XDVDESC = "ALL DIVISIONS";
      else
        PW06W01.XDVDESC = PW06M002.XDVDESC;
      end
      PW06W01.XBCCD = PW06M002.XBCCD; /* brand code*/
      if (PW06M002.XBCCD == "*")
        PW06W01.XBCABRV = " ";
      else
        PW06W01.XBCABRV = PW06M002.XBCABRV;
      end
      PW06W01.PW06W-DNSB-FROM-MM = PW06M002.PW06M-DNSB-FROM-MM;
                                   /* dnsb m*/
      PW06W01.PW06W-DNSB-FROM-DD = PW06M002.PW06M-DNSB-FROM-DD;
                                   /* dnsb d*/
      PW06W01.PW06W-DNSB-FROM-YY = PW06M002.PW06M-DNSB-FROM-YY;
                                   /* dnsb y*/
      PW06W01.PW06W-DNSB-TO-MM = PW06M002.PW06M-DNSB-TO-MM; /* dnsb mm*/
      PW06W01.PW06W-DNSB-TO-DD = PW06M002.PW06M-DNSB-TO-DD; /* dnsb dd*/
      PW06W01.PW06W-DNSB-TO-YY = PW06M002.PW06M-DNSB-TO-YY; /* dnsb yy*/
      PW06W01.PW06W-BGR-CLS-SW = PW06M002.PW06M-BGR-CLS-SW;
    end

  else

    if (PW06W00.PW06W-IDX == 1) /* and first line on page*/
      PW06W01.XWHCD = PW06M001.XWHCD; /* Warehouse code*/
      PW06W01.XWHABRV = PW06M001.XWHABRV; /* Warehouse abrv*/
      PW06W01.XDVCD = PW06M001.XDVCD; /* division code*/
      if (PW06M001.XDVCD == "*")
        PW06W01.XDVDESC = "ALL DIVISIONS";
      else
        PW06W01.XDVDESC = PW06M001.XDVDESC;
      end
      PW06W01.XBCCD = PW06M001.XBCCD; /* brand code*/
      if (PW06M001.XBCCD == "*")
        PW06W01.XBCABRV = " ";
      else
        PW06W01.XBCABRV = PW06M001.XBCABRV;
      end
      PW06W01.PW06W-DNSB-FROM-MM = PW06M001.PW06M-DNSB-FROM-MM;
                                   /* dnsb m*/
      PW06W01.PW06W-DNSB-FROM-DD = PW06M001.PW06M-DNSB-FROM-DD;
                                   /* dnsb d*/
      PW06W01.PW06W-DNSB-FROM-YY = PW06M001.PW06M-DNSB-FROM-YY;
                                   /* dnsb y*/
      PW06W01.PW06W-DNSB-TO-MM = PW06M001.PW06M-DNSB-TO-MM; /* dnsb mm*/
      PW06W01.PW06W-DNSB-TO-DD = PW06M001.PW06M-DNSB-TO-DD; /* dnsb dd*/
      PW06W01.PW06W-DNSB-TO-YY = PW06M001.PW06M-DNSB-TO-YY; /* dnsb yy*/
      PW06W01.PW06W-BGR-CLS-SW = PW06M001.PW06M-BGR-CLS-SW;
    end

  end


  if (PW06W00.PW06W-CURSOR-POOL-SW == "Y") /* if END OF VPOOLH01*/
    return; /* return*/
  end


   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  PW06W00.PW06W-READ-POOL-SW = "Y"; /* read next pool record*/
  PW06W01.PW06W-ACTION[PW06W-IDX] = " "; /* Action code*/

  PW06W01.PW06W-DNSB-FROM-MM = PW06W00.PW06W-FROM-MM; /* dnsb mm*/
  PW06W01.PW06W-DNSB-FROM-DD = PW06W00.PW06W-FROM-DD; /* dnsb dd*/
  PW06W01.PW06W-DNSB-FROM-YY = PW06W00.PW06W-FROM-YY; /* dnsb yy*/
  PW06W01.PW06W-DNSB-TO-MM = PW06W00.PW06W-TO-MM; /* dnsb mm*/
  PW06W01.PW06W-DNSB-TO-DD = PW06W00.PW06W-TO-DD; /* dnsb dd*/
  PW06W01.PW06W-DNSB-TO-YY = PW06W00.PW06W-TO-YY; /* dnsb yy*/


   /* ------------------------------------------------------------*/
   /* If DNSB date has changed ( or is not equal to the hold date)*/
   /* Or carrier code changed ( or is not equal to the hold carr-cd),*/
   /* - Save date to W01 and set working storage qtys to zero.*/
   /* - Check if the current line on the map contains*/
   /* DNSB date of 00 00 00 and qtys > 0.*/
   /* ------------------------------------------------------------*/

  if (PK4REC.OP1DSBDT != PW06W00.PW06W-HOLD-DATE
   || PK4REC.TF1CARCD != PW06W00.PW06W-HOLD-TF1CARCD)

    PW06S-FORMAT-W01(); /* save w/s to W01 and set W00 to zero*/


    if (PW06W00.PW06W-HOLD-TF1CARCD == " " /* First time*/
     && PW06W00.PW06W-IDX == 1)           
      PW06W00.PW06W-HOLD-TF1CARCD = PK4REC.TF1CARCD;
    end

      /* ------------------------------------------------------------*/
      /* If new carrier code, go to next line*/
      /* ------------------------------------------------------------*/
    if (PK4REC.TF1CARCD != PW06W00.PW06W-HOLD-TF1CARCD)

      PW06W00.PW06W-HOLD-TF1CARCD = PK4REC.TF1CARCD;
      PW06W00.PW06W-IDX = PW06W00.PW06W-IDX + 1; /* Increment line index*/

    else

        /* -------------------------------------------------------*/
        /* DNSB date 00 00 00 and QTYs > 0,  move date/qtys to*/
        /* index of one and increment so next date/qty goes to the*/
        /* next line.  If date > 00 00 00, stay on current line.*/
        /* -------------------------------------------------------*/
      if (PW06W00.PW06W-HOLD-DATE == 0
       && PW06W-IDX == 1
       && PW06W01.PW06W-DNSB-MM[PW06W-IDX] == 0)

        if (PW06W01.PW06W-POOL-SP-FC[PW06W-IDX] > 0
         || PW06W01.PW06W-POOL-SP-RP[PW06W-IDX] > 0
         || PW06W01.PW06W-POOL-NSP-FC[PW06W-IDX] > 0
         || PW06W01.PW06W-POOL-NSP-RP[PW06W-IDX] > 0)

          PW06W00.PW06W-IDX = PW06W-IDX + 1;
        end

      else

        if (PW06W00.PW06W-HOLD-DATE != 0
         && PW06W01.PW06W-DNSB-MM[PW06W-IDX] > 0)

          PW06W00.PW06W-IDX = PW06W00.PW06W-IDX + 1;
        end
      end
    end

      /* ---------------------------------------------------------*/
      /* See if page is full.*/
      /* ---------------------------------------------------------*/

    if (PW06W00.PW06W-IDX > 10)
      PW06W00.PW06W-READ-POOL-SW = "N"; /* don't read next pool*/

      return;

    end

    /* ---------------------------------------------------------*/
    /* Move pool DNSB to hold DNSB if sel qty DNSB GE pool DNSB.*/
    /* ---------------------------------------------------------*/
    if (PWMREC.OP1DSBDT > PK4REC.OP1DSBDT
     || (PWMREC.OP1DSBDT == PK4REC.OP1DSBDT
     && PWMREC.TF1CARCD >= PK4REC.TF1CARCD)
     || PWMREC.OP1DSBDT == -1 /* no qtys to read*/
     || PW06W00.PW06W-CURSOR-SEL-SW == "Y")

      PW06W00.PW06W-HOLD-DATE = PK4REC.OP1DSBDT; /* date hold*/
      PW06W00.PW06W-HOLD-TF1CARCD = PK4REC.TF1CARCD; /* carr hold*/
    end

  end

   /* -----------------------------------------------------------*/
   /* PROCESS  - Accumulate pool quantities*/
   /* POOL  - Check for SELOR01 quantities*/
   /* - Check for SELQT01 quantities*/
   /* - Move data to display storage (W01)*/
   /* -----------------------------------------------------------*/

  PW06S-PROCESS-POOL();


end // end PW06-115

// Add page to temporary storage
Function PW06-116()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

   /* ---------------------------------------------------------*/
   /* If this is pick planning, subtract from the pool*/
   /* quantities any SELQT01 quantities selected on the normal*/
   /* picking this morning for dnsb dates/carrier code on page*/
   /* ---------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PP") /* Planning run*/

    PW06W00.PW06W-SAVE-IDX = PW06W00.PW06W-IDX; /* save idx*/
    PW06W00.PW06W-IDX = 1;

    while (PW06W00.PW06W-IDX <= 10)

      if (PW06W01.PW06W-POOL-SP-FC[PW06W-IDX] > 0
       || PW06W01.PW06W-POOL-SP-RP[PW06W-IDX] > 0
       || PW06W01.PW06W-POOL-NSP-FC[PW06W-IDX] > 0
       || PW06W01.PW06W-POOL-NSP-RP[PW06W-IDX] > 0)

        PW06S-SUBT-PKSELQT(); /* get picking order selected units*/
      end

      PW06W00.PW06W-IDX = PW06W00.PW06W-IDX + 1;
    end

    PW06W00.PW06W-IDX = PW06W00.PW06W-SAVE-IDX; /* restore idx*/
  end


  PW06W01.XXXTSLEN = PW06W00.XXXTSLEN; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PW06W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    PW06W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW06W00.XXXMODID = "116"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW06W00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06-116

// Close cursor in DPICK.VPOOLH01
Function PW06-117()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  try
    call "IO1720" ("C6", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW06W00.XXXMODID = "117"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW06W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06-117

// Format and display map
Function PW06-120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PW06W00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PW06W00.PW06W-REQUEST-DATA == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PW06W00.PW06W-FORMAT-SCR == "Y") /* Map must be formatted*/
      if (PKWREC.PKWSELSW == "PK") /* picking*/
        PW06-12102(); /* Format the data on the map*/
      else
        PW06-12101(); /* Format the data on the map*/
      end
    end
  end


  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW06-12002();
  else
    PW06-12001();
  end


end // end PW06-120

// Format and display map
Function PW06-12001()
   /* ------------------------------------------------------------*/
   /* Note: Apply the same changes to pw06-12002 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW06M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (PW06M001.PW06M-BGR-CLS-SW == "B") /* set heading title*/
    PW06M001.PW06M-TITLE-TWO = "  BGRADE";
  else
    if (PW06M001.PW06M-BGR-CLS-SW == "C")
      PW06M001.PW06M-TITLE-TWO = "CLOSEOUT";
    end
  end

  PW06M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW06M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No fatal error*/
    if (PW06W00.XXXMSGNO != 0 /* Message to display*/
     || COMMAREA.CAMSG != " ") /* or message text*/

      if (PW06W00.XXXMSGNO != 0) /* Message display*/
        if (PW06W00.XXXTSPAG == 1) /* First page*/
          if (PW06W00.XXXMSGNO == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(PW06W00.XXXMSGNO);
          end /* Message number*/
          PW06M001.XXXMODID = PW06W00.XXXMODID; /* Module id*/
          set PW06M001 alarm; /* Sound alarm*/
        end
      else
        PW06M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
        PW06M001.XXXMODID = PW06W00.XXXMODID; /* Module id*/
        set PW06M001 alarm; /* Sound alarm*/
      end
    end
  else
    PW06M001.XXXMODID = PW06W00.XXXMODID; /* Module id*/
    set PW06M001 alarm; /* Sound alarm*/
  end

  converse PW06M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW06W00.XXXMODID = " "; /* Module identification*/
  PW06W00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PW06M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW06M001.CAITEM; /* Application data*/


end // end PW06-12001

// Format and display map
Function PW06-12002()
   /* ------------------------------------------------------------*/
   /* Note: Apply the same changes to pw06-12001 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW06M002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (PW06M002.PW06M-BGR-CLS-SW == "B") /* set heading title*/
    PW06M002.PW06M-TITLE-TWO = "  BGRADE";
  else
    if (PW06M002.PW06M-BGR-CLS-SW == "C")
      PW06M002.PW06M-TITLE-TWO = "CLOSEOUT";
    end
  end

  PW06M002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW06M002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No fatal error*/
    if (PW06W00.XXXMSGNO != 0 /* Message to display*/
     || COMMAREA.CAMSG != " ") /* or message text*/

      if (PW06W00.XXXMSGNO != 0) /* Message display*/
        if (PW06W00.XXXTSPAG == 1) /* First page*/
          if (PW06W00.XXXMSGNO == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(PW06W00.XXXMSGNO);
          end /* Message number*/
          PW06M002.XXXMODID = PW06W00.XXXMODID; /* Module id*/
          set PW06M002 alarm; /* Sound alarm*/
        end
      else
        PW06M002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
        PW06M002.XXXMODID = PW06W00.XXXMODID; /* Module id*/
        set PW06M002 alarm; /* Sound alarm*/
      end
    end
  else
    PW06M002.XXXMODID = PW06W00.XXXMODID; /* Module id*/
    set PW06M002 alarm; /* Sound alarm*/
  end

  converse PW06M002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW06W00.XXXMODID = " "; /* Module identification*/
  PW06W00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PW06M002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW06M002.CAITEM; /* Application data*/


end // end PW06-12002

// Format the display data
Function PW06-12101()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW06M001 initial; /* M001 input/output area*/
  PW06W00.PW06W-FORMAT-SCR = "N"; /* Format the map switch*/
  set PW06M001.PW06M-BGR-CLS-SW cursor; /* set cursor*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  if (PW06W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW06W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/
      if (PW06W00.PW06W-CURR-SCR-CHG == "Y") /* Current page was changed*/

        PW06S-UPD-T-STOR(); /* Update temporary storage page*/
        PW06W00.PW06W-CURR-SCR-CHG = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      if (PW06W00.XXXTSPAG > PW06W00.TA5TSQIX) /* Desired greater highest*/
        PW06W00.XXXTSPAG = PW06W00.TA5TSQIX; /* Default to highest*/
      end

      PW06S-READ-T-STOR(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    set PW06M001.XXXLITPG skip; /* "PAGE" literal*/
    PW06M001.XXXTSPAG = PW06W00.XXXTSPAG; /* Current page*/
    set PW06M001.XXXLITOF skip; /* "OF" literal*/
    PW06M001.TA5TSQIX = PW06W00.TA5TSQIX; /* Highest page*/
    PW06W00.PW06W-IDX = 1; /* Initialize line index*/

    while (PW06W00.PW06W-IDX <= 10) /* Until screen is full*/

      if (PW06W01.PW06W-POOL-SP-FC[PW06W-IDX] > 0
       || PW06W01.PW06W-POOL-SP-RP[PW06W-IDX] > 0
       || PW06W01.PW06W-POOL-NSP-FC[PW06W-IDX] > 0
       || PW06W01.PW06W-POOL-NSP-RP[PW06W-IDX] > 0
       || PW06W01.PW06W-SEL-SP[PW06W-IDX] > 0
       || PW06W01.PW06W-SEL-NSP[PW06W-IDX] > 0)

        set PW06M001.PW06M-ACTION[PW06W-IDX] normal;
        set PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] normal;
        set PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] normal;
      else
        set PW06M001.PW06M-ACTION[PW06W-IDX] initialAttributes;
        set PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] initialAttributes;
        set PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] initialAttributes;
      end

      if (PW06W00.PW06W-IDX == 1) /* First select field*/
        set PW06M001.PW06M-ACTION[PW06W-IDX] cursor, normal; /* Position curso*/
      end

      PW06M001.PW06M-ACTION[PW06W-IDX] = PW06W01.PW06W-ACTION[PW06W-IDX];

      PW06M001.PW06M-DNSB-MM[PW06W-IDX] = PW06W01.PW06W-DNSB-MM[PW06W-IDX];
      PW06M001.PW06M-DNSB-DD[PW06W-IDX] = PW06W01.PW06W-DNSB-DD[PW06W-IDX];
      PW06M001.PW06M-DNSB-YY[PW06W-IDX] = PW06W01.PW06W-DNSB-YY[PW06W-IDX];
      PW06M001.TF1CARCD[PW06W-IDX] = PW06W01.TF1CARCD[PW06W-IDX];

      PW06M001.PW06M-POOL-SP-HNDL-FC[PW06W-IDX] = PW06W01.PW06W-POOL-SP-FC[PW06W-IDX];
      PW06M001.PW06M-POOL-SP-HNDL-RP[PW06W-IDX] = PW06W01.PW06W-POOL-SP-RP[PW06W-IDX];
      PW06M001.PW06M-POOL-NSP-HNDL-FC[PW06W-IDX] = PW06W01.PW06W-POOL-NSP-FC[PW06W-IDX];
      PW06M001.PW06M-POOL-NSP-HNDL-RP[PW06W-IDX] = PW06W01.PW06W-POOL-NSP-RP[PW06W-IDX];

      PW06M001.PW06M-ORD-SP-HNDL[PW06W-IDX] = PW06W01.PW06W-ORD-SP[PW06W-IDX];
      PW06M001.PW06M-ORD-NSP-HNDL[PW06W-IDX] = PW06W01.PW06W-ORD-NSP[PW06W-IDX];

      PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] = PW06W01.PW06W-SEL-SP[PW06W-IDX];
      PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] = PW06W01.PW06W-SEL-NSP[PW06W-IDX];

      PW06W00.PW06W-IDX = PW06W00.PW06W-IDX + 1; /* Increment line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PW06M001.XWHCD = PW06W01.XWHCD; /* Warehouse code*/
  PW06M001.XWHABRV = PW06W01.XWHABRV; /* Warehouse desc*/

  PW06M001.XDVCD = PW06W01.XDVCD; /* division code*/
  if (PW06W01.XDVCD == "*")
    PW06M001.XDVDESC = "ALL DIVISIONS";
  else
    if (PW06W01.XDVCD in XDVTBL.XDVCD)
      PW06M001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
    end
  end

  PW06M001.XBCCD = PW06W01.XBCCD; /* brand code*/
  if (PW06W01.XBCCD == "*")
    PW06W00.XXXMSGNO = 421;
    PW06M001.XBCABRV = " ";
  else
    if (PW06W01.XBCCD in XBCTBL.XBCCD)
      PW06M001.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
    end
  end

  PW06M001.PW06M-DNSB-FROM-MM = PW06W01.PW06W-DNSB-FROM-MM;
  PW06M001.PW06M-DNSB-FROM-DD = PW06W01.PW06W-DNSB-FROM-DD;
  PW06M001.PW06M-DNSB-FROM-YY = PW06W01.PW06W-DNSB-FROM-YY;

  PW06M001.PW06M-DNSB-TO-MM = PW06W01.PW06W-DNSB-TO-MM;
  PW06M001.PW06M-DNSB-TO-DD = PW06W01.PW06W-DNSB-TO-DD;
  PW06M001.PW06M-DNSB-TO-YY = PW06W01.PW06W-DNSB-TO-YY;

  PW06M001.PW06M-BGR-CLS-SW = PW06W01.PW06W-BGR-CLS-SW;

  PW06M001.PW06M-TOT-ORD-SP-HNDL = PW06W00.PW06W-TOT-ORD-SP-HNDL;
  PW06M001.PW06M-TOT-ORD-NSP-HNDL = PW06W00.PW06W-TOT-ORD-NSP-HNDL;
  PW06M001.PW06M-TOT-QTY-SP-HNDL = PW06W00.PW06W-TOT-QTY-SP-HNDL;
  PW06M001.PW06M-TOT-QTY-NSP-HNDL = PW06W00.PW06W-TOT-QTY-NSP-HNDL;

  PW06M001.CATOAP = " ";
  PW06M001.CAITEM = " ";


end // end PW06-12101

// Format the display data
Function PW06-12102()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW06M002 initial; /* M002 input/output area*/
  PW06W00.PW06W-FORMAT-SCR = "N"; /* Format the map switch*/
  set PW06M002.PW06M-BGR-CLS-SW cursor; /* set cursor*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  if (PW06W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW06W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/
      if (PW06W00.PW06W-CURR-SCR-CHG == "Y") /* Current page was changed*/

        PW06S-UPD-T-STOR(); /* Update temporary storage page*/
        PW06W00.PW06W-CURR-SCR-CHG = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      if (PW06W00.XXXTSPAG > PW06W00.TA5TSQIX) /* Desired greater highest*/
        PW06W00.XXXTSPAG = PW06W00.TA5TSQIX; /* Default to highest*/
      end

      PW06S-READ-T-STOR(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    set PW06M002.XXXLITPG skip; /* "PAGE" literal*/
    PW06M002.XXXTSPAG = PW06W00.XXXTSPAG; /* Current page*/
    set PW06M002.XXXLITOF skip; /* "OF" literal*/
    PW06M002.TA5TSQIX = PW06W00.TA5TSQIX; /* Highest page*/
    PW06W00.PW06W-IDX = 1; /* Initialize line index*/

    while (PW06W00.PW06W-IDX <= 10) /* Until screen is full*/

      if (PW06W01.PW06W-POOL-SP-FC[PW06W-IDX] > 0
       || PW06W01.PW06W-POOL-SP-RP[PW06W-IDX] > 0
       || PW06W01.PW06W-POOL-NSP-FC[PW06W-IDX] > 0
       || PW06W01.PW06W-POOL-NSP-RP[PW06W-IDX] > 0
       || PW06W01.PW06W-SEL-SP[PW06W-IDX] > 0
       || PW06W01.PW06W-SEL-NSP[PW06W-IDX] > 0)

        set PW06M002.PW06M-ACTION[PW06W-IDX] normal;
        set PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] normal;
        set PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] normal;
      else
        set PW06M002.PW06M-ACTION[PW06W-IDX] initialAttributes;
        set PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] initialAttributes;
        set PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] initialAttributes;
      end

      if (PW06W00.PW06W-IDX == 1) /* First select field*/
        set PW06M002.PW06M-ACTION[PW06W-IDX] cursor, normal; /* Position curso*/
      end

      PW06M002.PW06M-ACTION[PW06W-IDX] = PW06W01.PW06W-ACTION[PW06W-IDX];

      PW06M002.PW06M-DNSB-MM[PW06W-IDX] = PW06W01.PW06W-DNSB-MM[PW06W-IDX];
      PW06M002.PW06M-DNSB-DD[PW06W-IDX] = PW06W01.PW06W-DNSB-DD[PW06W-IDX];
      PW06M002.PW06M-DNSB-YY[PW06W-IDX] = PW06W01.PW06W-DNSB-YY[PW06W-IDX];
      PW06M002.TF1CARCD[PW06W-IDX] = PW06W01.TF1CARCD[PW06W-IDX];

      PW06M002.PW06M-POOL-SP-HNDL-FC[PW06W-IDX] = PW06W01.PW06W-POOL-SP-FC[PW06W-IDX];
      PW06M002.PW06M-POOL-SP-HNDL-RP[PW06W-IDX] = PW06W01.PW06W-POOL-SP-RP[PW06W-IDX];
      PW06M002.PW06M-POOL-NSP-HNDL-FC[PW06W-IDX] = PW06W01.PW06W-POOL-NSP-FC[PW06W-IDX];
      PW06M002.PW06M-POOL-NSP-HNDL-RP[PW06W-IDX] = PW06W01.PW06W-POOL-NSP-RP[PW06W-IDX];

      PW06M002.PW06M-ORD-SP-HNDL[PW06W-IDX] = PW06W01.PW06W-ORD-SP[PW06W-IDX];
      PW06M002.PW06M-ORD-NSP-HNDL[PW06W-IDX] = PW06W01.PW06W-ORD-NSP[PW06W-IDX];

      PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] = PW06W01.PW06W-SEL-SP[PW06W-IDX];
      PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] = PW06W01.PW06W-SEL-NSP[PW06W-IDX];

      PW06W00.PW06W-IDX = PW06W00.PW06W-IDX + 1; /* Increment line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PW06M002.XWHCD = PW06W01.XWHCD; /* Warehouse code*/
  PW06M002.XWHABRV = PW06W01.XWHABRV; /* Warehouse desc*/

  PW06M002.XDVCD = PW06W01.XDVCD; /* division code*/
  if (PW06W01.XDVCD == "*")
    PW06M002.XDVDESC = "ALL DIVISIONS";
  else
    if (PW06W01.XDVCD in XDVTBL.XDVCD)
      PW06M002.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
    end
  end

  PW06M002.XBCCD = PW06W01.XBCCD; /* brand code*/
  if (PW06W01.XBCCD == "*")
    PW06W00.XXXMSGNO = 421;
    PW06M002.XBCABRV = " ";
  else
    if (PW06W01.XBCCD in XBCTBL.XBCCD)
      PW06M002.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
    end
  end

  PW06M002.PW06M-DNSB-FROM-MM = PW06W01.PW06W-DNSB-FROM-MM;
  PW06M002.PW06M-DNSB-FROM-DD = PW06W01.PW06W-DNSB-FROM-DD;
  PW06M002.PW06M-DNSB-FROM-YY = PW06W01.PW06W-DNSB-FROM-YY;

  PW06M002.PW06M-DNSB-TO-MM = PW06W01.PW06W-DNSB-TO-MM;
  PW06M002.PW06M-DNSB-TO-DD = PW06W01.PW06W-DNSB-TO-DD;
  PW06M002.PW06M-DNSB-TO-YY = PW06W01.PW06W-DNSB-TO-YY;

  PW06M002.PW06M-BGR-CLS-SW = PW06W01.PW06W-BGR-CLS-SW;

  PW06M002.PW06M-TOT-ORD-SP-HNDL = PW06W00.PW06W-TOT-ORD-SP-HNDL;
  PW06M002.PW06M-TOT-ORD-NSP-HNDL = PW06W00.PW06W-TOT-ORD-NSP-HNDL;
  PW06M002.PW06M-TOT-QTY-SP-HNDL = PW06W00.PW06W-TOT-QTY-SP-HNDL;
  PW06M002.PW06M-TOT-QTY-NSP-HNDL = PW06W00.PW06W-TOT-QTY-NSP-HNDL;

  PW06M002.CATOAP = " ";
  PW06M002.CAITEM = " ";


end // end PW06-12102

// Check attention identifier
Function PW06-130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    if (PW06W00.PW06W-REQUEST-DATA == "Y") /* Request for data*/
      set PW06W01 empty; /* M001 display storage*/
    end

    PW06W00.PW06W-FORMAT-SCR = "Y"; /* Format the map switch*/
    PW06W00.PW06W-REQUEST-DATA = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PW06M001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      if (PW06M001.CATOAP == "PW06") /* FAST PATH TO SELF*/
        converseLib.validationFailed(1); /* INVALID FAST PATH OPTION*/
        set PW06M001.CATOAP cursor, bold; /* HIGHLIGHT*/
        exit stack;
      end
      PW06-111(); /* Purge temporary storage*/
      XSPKS01(); /* Exit to another application*/
      set PW06M001.CATOAP cursor, bold; /* Highlight*/
      PW06W00.PW06W-REQUEST-DATA = "Y";
      PW06W00.PW06W-FORMAT-SCR = "Y";
    else
      PW06W00.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(13); /* PA/PF key may not be used*/
    end
    exit stack; /* Exit to display map*/
  else /* picking*/

    if (PW06M002.CATOAP > " ") /* FAST PATH was requested*/
      if (converseVar.eventKey is enter) /* ENTER was pressed*/
        if (PW06M002.CATOAP == "PW06") /* FAST PATH TO SELF*/
          converseLib.validationFailed(1); /* INVALID FAST PATH OPTION*/
          set PW06M002.CATOAP cursor, bold; /* HIGHLIGHT*/
          exit stack;
        end
        PW06-111(); /* Purge temporary storage*/
        XSPKS01(); /* Exit to another application*/
        set PW06M002.CATOAP cursor, bold; /* Highlight*/
        PW06W00.PW06W-REQUEST-DATA = "Y";
        PW06W00.PW06W-FORMAT-SCR = "Y";
      else
        PW06W00.XXXMODID = "130"; /* Module identification*/
        converseLib.validationFailed(13); /* PA/PF key may not be used*/
      end
      exit stack; /* Exit to display map*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14 was pressed*/
   || converseVar.eventKey is pf15 /* or PF15 was pressed*/
   || converseVar.eventKey is pf16 /* or PF16 was pressed*/
   || converseVar.eventKey is pf17 /* or PF17 was pressed*/
   || converseVar.eventKey is pf18 /* or PF18 was pressed*/
   || converseVar.eventKey is pf20) /* or PF20 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      if (PKWREC.PKWSELSW == "PK") /* picking*/
        COMMAREA.CAITEM = "PW06M002"; /* Application find code*/
      else
        COMMAREA.CAITEM = "PW06M001"; /* Application find code*/
      end
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      if (PKWREC.PKWSELSW == "PP") /* pick planning*/
        COMMAREA.CATOAP = "PW0W"; /* TO application*/
      else
        if (PKWREC.PKWSELSW == "PK") /* picking*/
          COMMAREA.CATOAP = "PW0V"; /* TO application*/
        else
          COMMAREA.CATOAP = "PW0W"; /* TO application*/
        end
      end
      PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "PW0R"; /* TO application*/
      PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "PW0J"; /* TO application*/
      PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      if (PKWREC.PKWSELSW == "PK") /* picking*/
        COMMAREA.CATOAP = "PK0K"; /* TO application*/
      else
        COMMAREA.CATOAP = "PK0T"; /* TO application*/
      end
      PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      if (PKWREC.PKWSELSW == "PK") /* picking*/
        COMMAREA.CATOAP = "PK0L"; /* TO application*/
      else
        COMMAREA.CATOAP = "PK0U"; /* TO application*/
      end
      PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    end

    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "PW0M"; /* TO application*/
      PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "PW0P"; /* TO application*/
      PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    end

    if (converseVar.eventKey is pf18) /* PF18 was pressed*/
      COMMAREA.CATOAP = "PW0X"; /* TO application*/
      PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    end

    if (converseVar.eventKey is pf20) /* PF20 was pressed*/
      COMMAREA.CATOAP = "PW08"; /* TO application*/
      PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    end


    PW06-111(); /* Purge temporary storage*/
    XSPKS01(); /* Exit to another application*/
    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    PW06W00.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PW06-130

// Reset highlighted fields
Function PW06-140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/

    set PW06M002.PW06M-DNSB-FROM-MM initialAttributes; /* "from" mm*/
    set PW06M002.PW06M-DNSB-FROM-DD initialAttributes; /* "from" dd*/
    set PW06M002.PW06M-DNSB-FROM-YY initialAttributes; /* "from" yy*/
    set PW06M002.PW06M-DNSB-TO-MM initialAttributes; /* "to" mm*/
    set PW06M002.PW06M-DNSB-TO-DD initialAttributes; /* "to" dd*/
    set PW06M002.PW06M-DNSB-TO-YY initialAttributes; /* "to" yy*/
    set PW06M002.PW06M-BGR-CLS-SW initialAttributes; /* BGRADE/CLOSEOUT SWITCH*/
    set PW06M002.XDVCD initialAttributes; /* Division code*/
    set PW06M002.XBCCD initialAttributes; /* Brand code*/

    PW06W00.PW06W-IDX = 1; /* Initialize line index*/

    while (PW06W00.PW06W-IDX <= 10) /* Until end of lines*/

      if (PW06M002.PW06M-POOL-SP-HNDL-FC[PW06W-IDX] > 0
       || PW06M002.PW06M-POOL-SP-HNDL-RP[PW06W-IDX] > 0
       || PW06M002.PW06M-POOL-NSP-HNDL-FC[PW06W-IDX] > 0
       || PW06M002.PW06M-POOL-NSP-HNDL-RP[PW06W-IDX] > 0
       || PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] > 0
       || PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] > 0)
        set PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] normal;
        set PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] normal;
        set PW06M002.PW06M-ACTION[PW06W-IDX] normal;
      else
        set PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] initialAttributes;
        set PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] initialAttributes;
        set PW06M002.PW06M-ACTION[PW06W-IDX] initialAttributes;
      end

      PW06W00.PW06W-IDX = PW06W00.PW06W-IDX + 1; /* Increment line index*/

    end

    set PW06M002.CATOAP initialAttributes; /* TO application*/
    set PW06M002.CAITEM initialAttributes; /* Application data*/

  else

    set PW06M001.PW06M-DNSB-FROM-MM initialAttributes; /* "from" mm*/
    set PW06M001.PW06M-DNSB-FROM-DD initialAttributes; /* "from" dd*/
    set PW06M001.PW06M-DNSB-FROM-YY initialAttributes; /* "from" yy*/
    set PW06M001.PW06M-DNSB-TO-MM initialAttributes; /* "to" mm*/
    set PW06M001.PW06M-DNSB-TO-DD initialAttributes; /* "to" dd*/
    set PW06M001.PW06M-DNSB-TO-YY initialAttributes; /* "to" yy*/
    set PW06M001.PW06M-BGR-CLS-SW initialAttributes; /* BGRADE/CLOSEOUT SWITCH*/
    set PW06M001.XDVCD initialAttributes; /* Division code*/
    set PW06M001.XBCCD initialAttributes; /* Brand code*/

    PW06W00.PW06W-IDX = 1; /* Initialize line index*/

    while (PW06W00.PW06W-IDX <= 10) /* Until end of lines*/

      if (PW06M001.PW06M-POOL-SP-HNDL-FC[PW06W-IDX] > 0
       || PW06M001.PW06M-POOL-SP-HNDL-RP[PW06W-IDX] > 0
       || PW06M001.PW06M-POOL-NSP-HNDL-FC[PW06W-IDX] > 0
       || PW06M001.PW06M-POOL-NSP-HNDL-RP[PW06W-IDX] > 0
       || PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] > 0
       || PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] > 0)
        set PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] normal;
        set PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] normal;
        set PW06M001.PW06M-ACTION[PW06W-IDX] normal;
      else
        set PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] initialAttributes;
        set PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] initialAttributes;
        set PW06M001.PW06M-ACTION[PW06W-IDX] initialAttributes;
      end

      PW06W00.PW06W-IDX = PW06W00.PW06W-IDX + 1; /* Increment line index*/

    end

    set PW06M001.CATOAP initialAttributes; /* TO application*/
    set PW06M001.CAITEM initialAttributes; /* Application data*/

  end


end // end PW06-140

// Verify entered data
Function PW06-150()
   /* ------------------------------------------------------------*/
   /* Determine which map data to verify.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW06-15002();
  else
    PW06-15001();
  end


end // end PW06-150

// Verify entered data
Function PW06-15001()
   /* ------------------------------------------------------------*/
   /* Note: Apply the same changes to pw06-15002 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PW06M001.CAITEM > " ") /* Application data was entered*/

    PW06W00.XXXMODID = "150"; /* Module identification*/
    set PW06M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, if page was formatted, verify data in the line.*/
   /* ------------------------------------------------------------*/

  if (PW06W00.TA5TSQIX > 0) /* Page was formatted*/

    PW06W00.PW06W-IDX = 10; /* Initialize line index*/

    while (PW06W00.PW06W-IDX > 0) /* Until end of lines*/

      PW06W00.PW06W-SEL-SP[PW06W-IDX] = 0;
      PW06W00.PW06W-SEL-NSP[PW06W-IDX] = 0;

      /* --------------------------------------------------------*/
      /* If action code or sel qtys were changed. Verify data*/
      /* --------------------------------------------------------*/
      if (PW06M001.PW06M-ACTION[PW06W-IDX] != 
      PW06W01.PW06W-ACTION[PW06W-IDX]
       || PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] != 
      PW06W01.PW06W-SEL-SP[PW06W-IDX]
       || PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] != 
      PW06W01.PW06W-SEL-NSP[PW06W-IDX])

        PW06-15201(); /* Verify data in the line*/

      end

      PW06W00.PW06W-IDX = PW06W00.PW06W-IDX - 1; /* Decrement line number*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PW06-151(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Verify that bgrade closeout switch entered*/
   /* ------------------------------------------------------------*/
  if (PW06M001.PW06M-BGR-CLS-SW == " ")

    converseLib.validationFailed(341);
    set PW06M001.PW06M-BGR-CLS-SW cursor, bold;
    PW06W00.XXXMODID = "150"; /* Module identification*/
    exit stack;

  else
    /* ---------------------------------------------------------*/
    /* Verify that bgrade closeout switch is a 'B' or 'C'*/
    /* ---------------------------------------------------------*/
    if (PW06M001.PW06M-BGR-CLS-SW != "B"
     && PW06M001.PW06M-BGR-CLS-SW != "C")

      converseLib.validationFailed(342);
      set PW06M001.PW06M-BGR-CLS-SW cursor, bold;
      PW06W00.XXXMODID = "150"; /* Module identification*/
      exit stack;

    end
  end

   /* ------------------------------------------------------------*/
   /* Verify the DIVISION CODE*/
   /* ------------------------------------------------------------*/
  if (PW06M001.XDVCD != PW06W01.XDVCD) /* division code was changed*/

    if (PW06M001.XDVCD == " ")
      converseLib.validationFailed(393);
      set PW06M001.XDVCD cursor, bold;
      PW06W00.XXXMODID = "150"; /* Module identification*/
      exit stack;
    else

      PKWREC.XDVCD[1] = PW06M001.XDVCD;

      if (PKWREC.XDVCD[1] != "*")
        XPPK004(); /* validate division code*/

        if (converseVar.validationMsgNum == 0) /* no errors, move div. cd*/
          PW06M001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
        else
          converseLib.validationFailed(393);
          set PW06M001.XDVCD cursor, bold;
          PW06W00.XXXMODID = "150"; /* Module identification*/
          exit stack;
        end
      else
        PW06M001.XDVDESC = "ALL DIVISIONS";
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify the BRAND CODE*/
   /* ------------------------------------------------------------*/
  if (PW06M001.XBCCD == " ")
    converseLib.validationFailed(413);
    set PW06M001.XBCCD cursor, bold;
    PW06W00.XXXMODID = "150"; /* Module identification*/
    exit stack;
  else

    PKWREC.XBCCD[1] = PW06M001.XBCCD;

    if (PKWREC.XBCCD[1] != "*")
      if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
        if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          converseLib.validationFailed(414);
          set PW06M001.XBCCD cursor, bold;
          PW06W00.XXXMODID = "150";
          exit stack;
        else
          PW06M001.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
        end
      else
        converseLib.validationFailed(413);
        set PW06M001.XBCCD cursor, bold;
        PW06W00.XXXMODID = "150"; /* Module identification*/
        exit stack;
      end
    else
      PW06M001.XBCABRV = " ";
    end
  end

   /* ------------------------------------------------------------*/
   /* verify entered date range.*/
   /* ------------------------------------------------------------*/
  PW06-15301(); /* check date range*/

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end PW06-15001

// Verify entered data
Function PW06-15002()
   /* ------------------------------------------------------------*/
   /* Note: Apply the same changes to pw06-15001 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PW06M002.CAITEM > " ") /* Application data was entered*/

    PW06W00.XXXMODID = "150"; /* Module identification*/
    set PW06M002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, if page was formatted, verify data in the line.*/
   /* ------------------------------------------------------------*/

  if (PW06W00.TA5TSQIX > 0) /* Page was formatted*/

    PW06W00.PW06W-IDX = 10; /* Initialize line index*/

    while (PW06W00.PW06W-IDX > 0) /* Until end of lines*/

      PW06W00.PW06W-SEL-SP[PW06W-IDX] = 0;
      PW06W00.PW06W-SEL-NSP[PW06W-IDX] = 0;

      /* --------------------------------------------------------*/
      /* If action code or sel qtys were changed. Verify data*/
      /* --------------------------------------------------------*/
      if (PW06M002.PW06M-ACTION[PW06W-IDX] != 
      PW06W01.PW06W-ACTION[PW06W-IDX]
       || PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] != 
      PW06W01.PW06W-SEL-SP[PW06W-IDX]
       || PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] != 
      PW06W01.PW06W-SEL-NSP[PW06W-IDX])

        PW06-15202(); /* Verify data in the line*/

      end

      PW06W00.PW06W-IDX = PW06W00.PW06W-IDX - 1; /* Decrement line number*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PW06-151(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Verify that bgrade closeout switch entered*/
   /* ------------------------------------------------------------*/
  if (PW06M002.PW06M-BGR-CLS-SW == " ")

    converseLib.validationFailed(341);
    set PW06M002.PW06M-BGR-CLS-SW cursor, bold;
    PW06W00.XXXMODID = "150"; /* Module identification*/
    exit stack;

  else
    /* ---------------------------------------------------------*/
    /* Verify that bgrade closeout switch is a 'B' or 'C'*/
    /* ---------------------------------------------------------*/
    if (PW06M002.PW06M-BGR-CLS-SW != "B"
     && PW06M002.PW06M-BGR-CLS-SW != "C")

      converseLib.validationFailed(342);
      set PW06M002.PW06M-BGR-CLS-SW cursor, bold;
      PW06W00.XXXMODID = "150"; /* Module identification*/
      exit stack;

    end
  end

   /* ------------------------------------------------------------*/
   /* Verify the DIVISION CODE*/
   /* ------------------------------------------------------------*/
  if (PW06M002.XDVCD != PW06W01.XDVCD) /* division code was changed*/

    if (PW06M002.XDVCD == " ")
      converseLib.validationFailed(393);
      set PW06M002.XDVCD cursor, bold;
      PW06W00.XXXMODID = "150"; /* Module identification*/
      exit stack;
    else

      PKWREC.XDVCD[1] = PW06M002.XDVCD;

      if (PKWREC.XDVCD[1] != "*")
        XPPK004(); /* validate division code*/

        if (converseVar.validationMsgNum == 0) /* no errors, move div. cd*/
          PW06M002.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
        else
          converseLib.validationFailed(393);
          set PW06M002.XDVCD cursor, bold;
          PW06W00.XXXMODID = "150"; /* Module identification*/
          exit stack;
        end
      else
        PW06M002.XDVDESC = "ALL DIVISIONS";
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify the BRAND CODE*/
   /* ------------------------------------------------------------*/
  if (PW06M002.XBCCD == " ")
    converseLib.validationFailed(413);
    set PW06M002.XBCCD cursor, bold;
    PW06W00.XXXMODID = "150"; /* Module identification*/
    exit stack;
  else

    PKWREC.XBCCD[1] = PW06M002.XBCCD;

    if (PKWREC.XBCCD[1] != "*")
      if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
        if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          converseLib.validationFailed(414);
          set PW06M002.XBCCD cursor, bold;
          PW06W00.XXXMODID = "150";
          exit stack;
        else
          PW06M002.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
        end
      else
        converseLib.validationFailed(413);
        set PW06M002.XBCCD cursor, bold;
        PW06W00.XXXMODID = "150"; /* Module identification*/
        exit stack;
      end
    else
      PW06M002.XBCABRV = " ";
    end
  end

   /* ------------------------------------------------------------*/
   /* verify entered date range.*/
   /* ------------------------------------------------------------*/
  PW06-15302(); /* check date range*/

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end PW06-15002

// Verify scroll request
Function PW06-151()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PW06W00.XXXTSPAG < 2)       /* and no previous pages*/

    PW06W00.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(37); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PW06W00.XXXTSPAG >= PW06W00.TA5TSQIX) /* and no more pages*/

    PW06W00.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(38); /* No more pages to display*/

  end


end // end PW06-151

// Verify data in line
Function PW06-15201()
   /* ------------------------------------------------------------*/
   /* Note: Apply the same changes topw06-15202 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If action was entered and is not a "a", "d", "i", "c", " ",*/
   /* error*/
   /* ------------------------------------------------------------*/
  if (PW06M001.PW06M-ACTION[PW06W-IDX] != PW06W01.PW06W-ACTION[PW06W-IDX]
   && PW06M001.PW06M-ACTION[PW06W-IDX] != "A" /* and is not a "a"*/
   && PW06M001.PW06M-ACTION[PW06W-IDX] != "C" /* and is not a "c"*/
   && PW06M001.PW06M-ACTION[PW06W-IDX] != "I" /* and is not a "i"*/
   && PW06M001.PW06M-ACTION[PW06W-IDX] != "D" /* and is not a "d"*/
   && PW06M001.PW06M-ACTION[PW06W-IDX] != " ") /* and is not a " "*/

    PW06W00.XXXMODID = "152"; /* Module identification*/
    set PW06M001.PW06M-ACTION[PW06W-IDX] cursor, bold; /* Highlight*/
    converseLib.validationFailed(35); /* Only valid codes may be entered*/
    return; /* done with this line*/

  end

   /* ------------------------------------------------------------*/
   /* Now that action is valid, check corresponding data.*/
   /* ------------------------------------------------------------*/
  if (PW06M001.PW06M-ACTION[PW06W-IDX] == "A"
   || PW06M001.PW06M-ACTION[PW06W-IDX] == "D"
   || PW06M001.PW06M-ACTION[PW06W-IDX] == "I"
   || PW06M001.PW06M-ACTION[PW06W-IDX] == "C"
   || PW06M001.PW06M-ACTION[PW06W-IDX] == " ")

    PW06W00.PW06W-ADD-SP-HNDL-SW[PW06W-IDX] = "N";
    PW06W00.PW06W-ADD-NSP-HNDL-SW[PW06W-IDX] = "N";
    PW06W00.PW06W-CHG-SP-HNDL-SW[PW06W-IDX] = "N";
    PW06W00.PW06W-CHG-NSP-HNDL-SW[PW06W-IDX] = "N";
    PW06W00.PW06W-DEL-SP-HNDL-SW[PW06W-IDX] = "N";
    PW06W00.PW06W-DEL-NSP-HNDL-SW[PW06W-IDX] = "N";

   /* ----------------------------------------------------------------*/
   /* edit values when action code is 'a' add*/
   /* ----------------------------------------------------------------*/
    if (PW06M001.PW06M-ACTION[PW06W-IDX] == "A")

      PW06S-EDT-ADD-MAP1(); /* edit add fields*/
      if (converseVar.validationMsgNum != 0) /* if ezemno ne 0*/
        return; /* return*/
      end

    end

   /* ----------------------------------------------------------------*/
   /* edit values when action code is 'c' change*/
   /* ----------------------------------------------------------------*/
    if (PW06M001.PW06M-ACTION[PW06W-IDX] == "C")

      PW06S-EDT-CHG-MAP1(); /* edit change fields*/
      if (converseVar.validationMsgNum != 0) /* if ezeno ne 0*/
        return; /* return*/
      end

    end

   /* ----------------------------------------------------------------*/
   /* edit values when action code is 'd' delete*/
   /* ----------------------------------------------------------------*/
    if (PW06M001.PW06M-ACTION[PW06W-IDX] == "D")

      PW06S-EDT-DEL-MAP1(); /* edit delete fields*/
      if (converseVar.validationMsgNum != 0) /* if ezemno ne 0*/
        return; /* return*/
      end

    end

    if (PW06M001.PW06M-ACTION[PW06W-IDX] == " ")

      PW06W00.XXXMODID = "152"; /* Module identification*/
      set PW06M001.PW06M-ACTION[PW06W-IDX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(35); /* Only valid codes may be entered*/

    end
  end

  if (converseVar.validationMsgNum != 0 /* there are errors*/
   || PW06M001.PW06M-ACTION[PW06W-IDX] == " ") /* un-selecting action*/
    return;
  end

  PW06W00.PW06W-DATA-CHGD-SW = "Y"; /* data has been updated*/
  PW06W00.PW06W-CURR-SCR-CHG = "Y"; /* screen has been updated*/


end // end PW06-15201

// Verify data in line
Function PW06-15202()
   /* ------------------------------------------------------------*/
   /* Note: Apply the same changes to pw06-15201 also.*/
   /* ------------------------------------------------------------*/
   /* If action was entered and is not a "a", "d", "i", "c", " ",*/
   /* error*/
   /* ------------------------------------------------------------*/
  if (PW06M002.PW06M-ACTION[PW06W-IDX] != PW06W01.PW06W-ACTION[PW06W-IDX]
   && PW06M002.PW06M-ACTION[PW06W-IDX] != "A" /* and is not a "a"*/
   && PW06M002.PW06M-ACTION[PW06W-IDX] != "C" /* and is not a "c"*/
   && PW06M002.PW06M-ACTION[PW06W-IDX] != "I" /* and is not a "i"*/
   && PW06M002.PW06M-ACTION[PW06W-IDX] != "D" /* and is not a "d"*/
   && PW06M002.PW06M-ACTION[PW06W-IDX] != " ") /* and is not a " "*/

    PW06W00.XXXMODID = "152"; /* Module identification*/
    set PW06M002.PW06M-ACTION[PW06W-IDX] cursor, bold; /* Highlight*/
    converseLib.validationFailed(35); /* Only valid codes may be entered*/
    return; /* done with this line*/

  end

   /* ------------------------------------------------------------*/
   /* Now that action is valid, check corresponding data.*/
   /* ------------------------------------------------------------*/
  if (PW06M002.PW06M-ACTION[PW06W-IDX] == "A"
   || PW06M002.PW06M-ACTION[PW06W-IDX] == "D"
   || PW06M002.PW06M-ACTION[PW06W-IDX] == "I"
   || PW06M002.PW06M-ACTION[PW06W-IDX] == "C"
   || PW06M002.PW06M-ACTION[PW06W-IDX] == " ")

    PW06W00.PW06W-ADD-SP-HNDL-SW[PW06W-IDX] = "N";
    PW06W00.PW06W-ADD-NSP-HNDL-SW[PW06W-IDX] = "N";
    PW06W00.PW06W-CHG-SP-HNDL-SW[PW06W-IDX] = "N";
    PW06W00.PW06W-CHG-NSP-HNDL-SW[PW06W-IDX] = "N";
    PW06W00.PW06W-DEL-SP-HNDL-SW[PW06W-IDX] = "N";
    PW06W00.PW06W-DEL-NSP-HNDL-SW[PW06W-IDX] = "N";

   /* ----------------------------------------------------------------*/
   /* edit values when action code is 'a' add*/
   /* ----------------------------------------------------------------*/
    if (PW06M002.PW06M-ACTION[PW06W-IDX] == "A")

      PW06S-EDT-ADD-MAP2(); /* edit add fields*/
      if (converseVar.validationMsgNum != 0) /* if ezemno ne 0*/
        return; /* return*/
      end

    end

   /* ----------------------------------------------------------------*/
   /* edit values when action code is 'c' change*/
   /* ----------------------------------------------------------------*/
    if (PW06M002.PW06M-ACTION[PW06W-IDX] == "C")

      PW06S-EDT-CHG-MAP2(); /* edit change fields*/
      if (converseVar.validationMsgNum != 0) /* if ezeno ne 0*/
        return; /* return*/
      end

    end

   /* ----------------------------------------------------------------*/
   /* edit values when action code is 'd' delete*/
   /* ----------------------------------------------------------------*/
    if (PW06M002.PW06M-ACTION[PW06W-IDX] == "D")

      PW06S-EDT-DEL-MAP2(); /* edit delete fields*/
      if (converseVar.validationMsgNum != 0) /* if ezemno ne 0*/
        return; /* return*/
      end

    end

    if (PW06M002.PW06M-ACTION[PW06W-IDX] == " ")

      PW06W00.XXXMODID = "152"; /* Module identification*/
      set PW06M002.PW06M-ACTION[PW06W-IDX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(35); /* Only valid codes may be entered*/

    end
  end

  if (converseVar.validationMsgNum != 0 /* there are errors*/
   || PW06M002.PW06M-ACTION[PW06W-IDX] == " ") /* un-selecting action*/
    return;
  end

  PW06W00.PW06W-DATA-CHGD-SW = "Y"; /* data has been updated*/
  PW06W00.PW06W-CURR-SCR-CHG = "Y"; /* screen has been updated*/


end // end PW06-15202

// Verify date range
Function PW06-15301()
   /* -----------------------------------------------------------*/
   /* Note: Apply the same changes to pw06-15302 also.*/
   /* -----------------------------------------------------------*/
   /* -----------------------------------------------------------*/
   /* verify "to" and "from" date ranges.*/
   /* -----------------------------------------------------------*/
  if (PW06M001.PW06M-DNSB-FROM-MM == 0
   && PW06M001.PW06M-DNSB-FROM-DD == 0
   && PW06M001.PW06M-DNSB-FROM-YY == 0
   && PW06M001.PW06M-DNSB-TO-MM == 0
   && PW06M001.PW06M-DNSB-TO-DD == 0
   && PW06M001.PW06M-DNSB-TO-YY == 0)

    converseLib.validationFailed(158);
    PW06W00.XXXMODID = "153";
    set PW06M001.PW06M-DNSB-FROM-MM cursor, bold;
    set PW06M001.PW06M-DNSB-FROM-DD bold;
    set PW06M001.PW06M-DNSB-FROM-YY bold;
    return;
  end


  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF PW06M001.PW06M-DNSB-TO-MM EQ 0         /* check 'to' date range*/
  /* OR PW06M001.PW06M-DNSB-TO-DD EQ 0*/
  /* OR PW06M001.PW06M-DNSB-TO-YY EQ 0;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
  if (PW06M001.PW06M-DNSB-TO-MM == 0 /* check 'to' date range*/
   || PW06M001.PW06M-DNSB-TO-DD == 0)
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

    converseLib.validationFailed(158);
    PW06W00.XXXMODID = "153";
    set PW06M001.PW06M-DNSB-TO-MM cursor, bold;
    set PW06M001.PW06M-DNSB-TO-DD bold;
    set PW06M001.PW06M-DNSB-TO-YY bold;
    return;
  end

  if (PW06W00.PW06W-TO-DATE < PW06W00.PW06W-FROM-DATE) /* to lt from date*/
    set PW06M001.PW06M-DNSB-TO-MM cursor, bold;
    set PW06M001.PW06M-DNSB-TO-DD bold;
    set PW06M001.PW06M-DNSB-TO-YY bold;
    PW06W00.XXXMODID = "153";
    converseLib.validationFailed(286); /* invalid date*/
  end

   /* convert TO date to yyyymmdd*/

  XX0XW01.XX0XWMM = PW06M001.PW06M-DNSB-TO-MM;
  XX0XW01.XX0XWDD = PW06M001.PW06M-DNSB-TO-DD;
  XX0XW01.XX0XWYY = PW06M001.PW06M-DNSB-TO-YY;
  if (XX0XW01.XX0XWYY > 70)
    XX0XW01.XX0XW19 = 19;
  else
    XX0XW01.XX0XW19 = 20;
  end

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = XX0XW01.XX0XWDAT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    PW06W00.PW06W-TO-DATE = TA2REC.TA2GRGGN;
  else
    set PW06M001.PW06M-DNSB-TO-MM cursor, bold;
    set PW06M001.PW06M-DNSB-TO-DD bold;
    set PW06M001.PW06M-DNSB-TO-YY bold;
    PW06W00.XXXMODID = "153";
    converseLib.validationFailed(158); /* invalid date*/
  end

   /* convert from date to yyyymmdd*/

  if (PW06M001.PW06M-DNSB-FROM-MM > 0 /* check 'to' date range*/
   || PW06M001.PW06M-DNSB-FROM-DD > 0 
   || PW06M001.PW06M-DNSB-FROM-YY > 0)
    XX0XW01.XX0XWMM = PW06M001.PW06M-DNSB-FROM-MM;
    XX0XW01.XX0XWDD = PW06M001.PW06M-DNSB-FROM-DD;
    XX0XW01.XX0XWYY = PW06M001.PW06M-DNSB-FROM-YY;
    if (XX0XW01.XX0XWYY > 70)
      XX0XW01.XX0XW19 = 19;
    else
      XX0XW01.XX0XW19 = 20;
    end

    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = XX0XW01.XX0XWDAT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    if (TA2REC.TA2RTNCD == 0)
      PW06W00.PW06W-FROM-DATE = TA2REC.TA2GRGGN;
    else
      set PW06M001.PW06M-DNSB-FROM-MM cursor, bold;
      set PW06M001.PW06M-DNSB-FROM-DD bold;
      set PW06M001.PW06M-DNSB-FROM-YY bold;
      PW06W00.XXXMODID = "153";
      converseLib.validationFailed(158); /* invalid date*/
    end
  else
    PW06W00.PW06W-FROM-DATE = 0;
  end


end // end PW06-15301

// Verify date range
Function PW06-15302()
   /* -----------------------------------------------------------*/
   /* Note: Apply the same changes to pw06-15301 also.*/
   /* -----------------------------------------------------------*/
   /* -----------------------------------------------------------*/
   /* verify "to" and "from" date ranges.*/
   /* -----------------------------------------------------------*/
  if (PW06M002.PW06M-DNSB-FROM-MM == 0
   && PW06M002.PW06M-DNSB-FROM-DD == 0
   && PW06M002.PW06M-DNSB-FROM-YY == 0
   && PW06M002.PW06M-DNSB-TO-MM == 0
   && PW06M002.PW06M-DNSB-TO-DD == 0
   && PW06M002.PW06M-DNSB-TO-YY == 0)

    converseLib.validationFailed(158);
    PW06W00.XXXMODID = "153";
    set PW06M002.PW06M-DNSB-FROM-MM cursor, bold;
    set PW06M002.PW06M-DNSB-FROM-DD bold;
    set PW06M002.PW06M-DNSB-FROM-YY bold;
    return;
  end

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF PW06M002.PW06M-DNSB-TO-MM EQ 0         /* check 'to' date range*/
  /* OR PW06M002.PW06M-DNSB-TO-DD EQ 0*/
  /* OR PW06M002.PW06M-DNSB-TO-YY EQ 0;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
  if (PW06M002.PW06M-DNSB-TO-MM == 0 /* check 'to' date range*/
   || PW06M002.PW06M-DNSB-TO-DD == 0)
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

    converseLib.validationFailed(158);
    PW06W00.XXXMODID = "153";
    set PW06M002.PW06M-DNSB-TO-MM cursor, bold;
    set PW06M002.PW06M-DNSB-TO-DD bold;
    set PW06M002.PW06M-DNSB-TO-YY bold;
    return;
  end

  if (PW06W00.PW06W-TO-DATE < PW06W00.PW06W-FROM-DATE) /* to lt from date*/
    set PW06M002.PW06M-DNSB-TO-MM cursor, bold;
    set PW06M002.PW06M-DNSB-TO-DD bold;
    set PW06M002.PW06M-DNSB-TO-YY bold;
    PW06W00.XXXMODID = "153";
    converseLib.validationFailed(286); /* invalid date*/
  end

   /* convert TO date to yyyymmdd*/

  XX0XW01.XX0XWMM = PW06M002.PW06M-DNSB-TO-MM;
  XX0XW01.XX0XWDD = PW06M002.PW06M-DNSB-TO-DD;
  XX0XW01.XX0XWYY = PW06M002.PW06M-DNSB-TO-YY;
  if (XX0XW01.XX0XWYY > 70)
    XX0XW01.XX0XW19 = 19;
  else
    XX0XW01.XX0XW19 = 20;
  end

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = XX0XW01.XX0XWDAT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    PW06W00.PW06W-TO-DATE = TA2REC.TA2GRGGN;
  else
    set PW06M002.PW06M-DNSB-TO-MM cursor, bold;
    set PW06M002.PW06M-DNSB-TO-DD bold;
    set PW06M002.PW06M-DNSB-TO-YY bold;
    PW06W00.XXXMODID = "153";
    converseLib.validationFailed(158); /* invalid date*/
  end

   /* convert from date to yyyymmdd*/

  if (PW06M002.PW06M-DNSB-FROM-MM > 0 /* check 'to' date range*/
   || PW06M002.PW06M-DNSB-FROM-DD > 0 
   || PW06M002.PW06M-DNSB-FROM-YY > 0)
    XX0XW01.XX0XWMM = PW06M002.PW06M-DNSB-FROM-MM;
    XX0XW01.XX0XWDD = PW06M002.PW06M-DNSB-FROM-DD;
    XX0XW01.XX0XWYY = PW06M002.PW06M-DNSB-FROM-YY;
    if (XX0XW01.XX0XWYY > 70)
      XX0XW01.XX0XW19 = 19;
    else
      XX0XW01.XX0XW19 = 20;
    end

    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = XX0XW01.XX0XWDAT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    if (TA2REC.TA2RTNCD == 0)
      PW06W00.PW06W-FROM-DATE = TA2REC.TA2GRGGN;
    else
      set PW06M002.PW06M-DNSB-FROM-MM cursor, bold;
      set PW06M002.PW06M-DNSB-FROM-DD bold;
      set PW06M002.PW06M-DNSB-FROM-YY bold;
      PW06W00.XXXMODID = "153";
      converseLib.validationFailed(158); /* invalid date*/
    end
  else
    PW06W00.PW06W-FROM-DATE = 0;
  end


end // end PW06-15302

// Process valid request
Function PW06-160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  PW06W00.PW06W-FORMAT-SCR = "Y"; /* Format the map switch*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW06-16002();
  else
    PW06-16001();
  end


   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter) /* enter was pressed*/

    if (PW06W00.PW06W-DATA-CHGD-SW != "Y") /* no updates for current data*/
      return; /* Return to previous process*/
    else
      XX0XS01(); /* get system date and time*/
      PW06-161(); /* perform updates*/
      PW06W00.PW06W-DATA-CHGD-SW = "N"; /* clear change switch*/
    end

    if (PW06W00.PW06W-INQ-IDX > 1) /* there were orders to inquire on*/
      PW06-166(); /* xfer to PW07*/
    end

    PW06W00.XXXTSPAG = 1; /* force display to first page*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PW06W00.XXXTSPAG = PW06W00.XXXTSPAG - 1; /* Decrement page number*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PW06W00.XXXTSPAG = PW06W00.XXXTSPAG + 1; /* Increment page number*/
    return; /* Return to previous process*/

  end


end // end PW06-160

// Process valid request
Function PW06-16001()
   /* ------------------------------------------------------------*/
   /* Note: Apply the same changes to pw06-16002 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If a search key was entered, request the data to display.*/
   /* and set up date ranges for comparisons in processing*/
   /* ------------------------------------------------------------*/
  if (PW06M001.PW06M-DNSB-FROM-MM != PW06W01.PW06W-DNSB-FROM-MM
   || PW06M001.PW06M-DNSB-FROM-DD != PW06W01.PW06W-DNSB-FROM-DD
   || PW06M001.PW06M-DNSB-FROM-YY != PW06W01.PW06W-DNSB-FROM-YY
   || PW06M001.PW06M-DNSB-TO-MM != PW06W01.PW06W-DNSB-TO-MM /* to month*/
   || PW06M001.PW06M-DNSB-TO-DD != PW06W01.PW06W-DNSB-TO-DD /* to day*/
   || PW06M001.PW06M-DNSB-TO-YY != PW06W01.PW06W-DNSB-TO-YY /* to year*/
   || PW06M001.PW06M-BGR-CLS-SW != PW06W01.PW06W-BGR-CLS-SW 
   || PW06M001.XDVCD != PW06W01.XDVCD                       
   || PW06M001.XBCCD != PW06W01.XBCCD)                     

    PW06W00.PW06W-REQUEST-DATA = "Y"; /* Request for data switch*/
    PW06W00.PW06W-FROM-DD = PW06M001.PW06M-DNSB-FROM-DD; /* from day*/
    PW06W01.PW06W-DNSB-FROM-DD = PW06M001.PW06M-DNSB-FROM-DD;
    PW06W00.PW06W-FROM-MM = PW06M001.PW06M-DNSB-FROM-MM;
    PW06W01.PW06W-DNSB-FROM-MM = PW06M001.PW06M-DNSB-FROM-MM;
    PW06W00.PW06W-FROM-YY = PW06M001.PW06M-DNSB-FROM-YY; /* from year*/
    PW06W01.PW06W-DNSB-FROM-YY = PW06M001.PW06M-DNSB-FROM-YY;
    if (PW06W00.PW06W-FROM-DATE > 0)

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE PW06W00.PW06W-CURR-CC TO PW06W00.PW06W-FROM-CC;/* from century*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
      if (PW06W00.PW06W-FROM-YY > 60)
        PW06W00.PW06W-FROM-CC = 19;
      else
        PW06W00.PW06W-FROM-CC = 20;
      end
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

    end
    PW06W00.PW06W-TO-DD = PW06M001.PW06M-DNSB-TO-DD; /* to day*/
    PW06W01.PW06W-DNSB-TO-DD = PW06M001.PW06M-DNSB-TO-DD; /* to day*/
    PW06W00.PW06W-TO-MM = PW06M001.PW06M-DNSB-TO-MM; /* to month*/
    PW06W01.PW06W-DNSB-TO-MM = PW06M001.PW06M-DNSB-TO-MM; /* to month*/
    PW06W00.PW06W-TO-YY = PW06M001.PW06M-DNSB-TO-YY; /* to year*/
    PW06W01.PW06W-DNSB-TO-YY = PW06M001.PW06M-DNSB-TO-YY; /* to year*/

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE PW06W00.PW06W-CURR-CC TO PW06W00.PW06W-TO-CC;/* to century*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
    if (PW06W00.PW06W-TO-DATE > 0)
      if (PW06W00.PW06W-TO-YY > 60)
        PW06W00.PW06W-TO-CC = 19;
      else
        PW06W00.PW06W-TO-CC = 20;
      end
    end
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

   /* ------------------------------------------------------------*/
   /* move data to pkwrec*/
   /* ------------------------------------------------------------*/
    PKWREC.XWHCD = PW06M001.XWHCD;
    PKWREC.XBCCD[1] = PW06M001.XBCCD;
    PKWREC.XDVCD[1] = PW06M001.XDVCD;
    PKWREC.PKWFRMDT[1] = PW06W00.PW06W-FROM-DATE;
    PKWREC.PKWTODT[1] = PW06W00.PW06W-TO-DATE;
    PKWREC.PKWXWHCD = " ";
    PKWREC.PKWFRMAP[1] = "PW06";
    return;

  end

   /* ------------------------------------------------------------*/
   /* If any data lines were changed, save and update t/s.*/
   /* ------------------------------------------------------------*/
  if (PW06W00.PW06W-CURR-SCR-CHG == "Y") /* data changed this screen*/

    PW06W00.PW06W-IDX = 1; /* initialize index*/
    while (PW06W00.PW06W-IDX <= 10) /* till all lines moved*/

      if (PW06M001.PW06M-ACTION[PW06W-IDX] == "*")
        PW06M001.PW06M-ACTION[PW06W-IDX] = " ";
      end

      PW06W01.PW06W-ACTION[PW06W-IDX] = PW06M001.PW06M-ACTION[PW06W-IDX];
      if (PW06W00.PW06W-SEL-SP[PW06W-IDX] > 0)
        PW06W01.PW06W-SEL-SP[PW06W-IDX] = PW06W00.PW06W-SEL-SP[PW06W-IDX];
      end
      if (PW06W00.PW06W-SEL-NSP[PW06W-IDX] > 0)
        PW06W01.PW06W-SEL-NSP[PW06W-IDX] = PW06W00.PW06W-SEL-NSP[PW06W-IDX];
      end

      PW06W00.PW06W-IDX = PW06W00.PW06W-IDX + 1;

    end

    TA5REC.TA5TSQIX = PW06W00.XXXTSPAG; /* which page to update*/
    PW06S-UPD-T-STOR(); /* update t/s page*/

  end


end // end PW06-16001

// Process valid request
Function PW06-16002()
   /* ------------------------------------------------------------*/
   /* Note: Apply the same changes to pw06-16001 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If a search key was entered, request the data to display.*/
   /* and set up date ranges for comparisons in processing*/
   /* ------------------------------------------------------------*/
  if (PW06M002.PW06M-DNSB-FROM-MM != PW06W01.PW06W-DNSB-FROM-MM
   || PW06M002.PW06M-DNSB-FROM-DD != PW06W01.PW06W-DNSB-FROM-DD
   || PW06M002.PW06M-DNSB-FROM-YY != PW06W01.PW06W-DNSB-FROM-YY
   || PW06M002.PW06M-DNSB-TO-MM != PW06W01.PW06W-DNSB-TO-MM /* to month*/
   || PW06M002.PW06M-DNSB-TO-DD != PW06W01.PW06W-DNSB-TO-DD /* to day*/
   || PW06M002.PW06M-DNSB-TO-YY != PW06W01.PW06W-DNSB-TO-YY /* to year*/
   || PW06M002.PW06M-BGR-CLS-SW != PW06W01.PW06W-BGR-CLS-SW 
   || PW06M002.XDVCD != PW06W01.XDVCD                       
   || PW06M002.XBCCD != PW06W01.XBCCD)                     

    PW06W00.PW06W-REQUEST-DATA = "Y"; /* Request for data switch*/
    PW06W00.PW06W-FROM-DD = PW06M002.PW06M-DNSB-FROM-DD; /* from day*/
    PW06W01.PW06W-DNSB-FROM-DD = PW06M002.PW06M-DNSB-FROM-DD;
    PW06W00.PW06W-FROM-MM = PW06M002.PW06M-DNSB-FROM-MM;
    PW06W01.PW06W-DNSB-FROM-MM = PW06M002.PW06M-DNSB-FROM-MM;
    PW06W00.PW06W-FROM-YY = PW06M002.PW06M-DNSB-FROM-YY; /* from year*/
    PW06W01.PW06W-DNSB-FROM-YY = PW06M002.PW06M-DNSB-FROM-YY;
    if (PW06W00.PW06W-FROM-DATE > 0)

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE PW06W00.PW06W-CURR-CC TO PW06W00.PW06W-FROM-CC;/* from century*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
      if (PW06W00.PW06W-FROM-YY > 60)
        PW06W00.PW06W-FROM-CC = 19;
      else
        PW06W00.PW06W-FROM-CC = 20;
      end
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

    end
    PW06W00.PW06W-TO-DD = PW06M002.PW06M-DNSB-TO-DD; /* to day*/
    PW06W01.PW06W-DNSB-TO-DD = PW06M002.PW06M-DNSB-TO-DD; /* to day*/
    PW06W00.PW06W-TO-MM = PW06M002.PW06M-DNSB-TO-MM; /* to month*/
    PW06W01.PW06W-DNSB-TO-MM = PW06M002.PW06M-DNSB-TO-MM; /* to month*/
    PW06W00.PW06W-TO-YY = PW06M002.PW06M-DNSB-TO-YY; /* to year*/
    PW06W01.PW06W-DNSB-TO-YY = PW06M002.PW06M-DNSB-TO-YY; /* to year*/

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE PW06W00.PW06W-CURR-CC TO PW06W00.PW06W-TO-CC;/* to century*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
    if (PW06W00.PW06W-TO-DATE > 0)
      if (PW06W00.PW06W-TO-YY > 60)
        PW06W00.PW06W-TO-CC = 19;
      else
        PW06W00.PW06W-TO-CC = 20;
      end
    end
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

   /* ------------------------------------------------------------*/
   /* move data to pkwrec*/
   /* ------------------------------------------------------------*/
    PKWREC.XWHCD = PW06M002.XWHCD;
    PKWREC.XBCCD[1] = PW06M002.XBCCD;
    PKWREC.XDVCD[1] = PW06M002.XDVCD;
    PKWREC.PKWFRMDT[1] = PW06W00.PW06W-FROM-DATE;
    PKWREC.PKWTODT[1] = PW06W00.PW06W-TO-DATE;
    PKWREC.PKWXWHCD = " ";
    PKWREC.PKWFRMAP[1] = "PW06";
    return;

  end

   /* ------------------------------------------------------------*/
   /* If any data lines were changed, save and update t/s.*/
   /* ------------------------------------------------------------*/
  if (PW06W00.PW06W-CURR-SCR-CHG == "Y") /* data changed this screen*/

    PW06W00.PW06W-IDX = 1; /* initialize index*/
    while (PW06W00.PW06W-IDX <= 10) /* till all lines moved*/

      if (PW06M002.PW06M-ACTION[PW06W-IDX] == "*")
        PW06M002.PW06M-ACTION[PW06W-IDX] = " ";
      end

      PW06W01.PW06W-ACTION[PW06W-IDX] = PW06M002.PW06M-ACTION[PW06W-IDX];
      if (PW06W00.PW06W-SEL-SP[PW06W-IDX] > 0)
        PW06W01.PW06W-SEL-SP[PW06W-IDX] = PW06W00.PW06W-SEL-SP[PW06W-IDX];
      end
      if (PW06W00.PW06W-SEL-NSP[PW06W-IDX] > 0)
        PW06W01.PW06W-SEL-NSP[PW06W-IDX] = PW06W00.PW06W-SEL-NSP[PW06W-IDX];
      end

      PW06W00.PW06W-IDX = PW06W00.PW06W-IDX + 1;

    end

    TA5REC.TA5TSQIX = PW06W00.XXXTSPAG; /* which page to update*/
    PW06S-UPD-T-STOR(); /* update t/s page*/

  end


end // end PW06-16002

// Process lines of data
Function PW06-161()
   /* ------------------------------------------------------------*/
   /* Process data*/
   /* ------------------------------------------------------------*/
  PW06W00.PW06W-IDX = 1; /* initialize index*/
  PW06W00.PW06W-INQ-IDX = 1; /* initialize index for inquiry array*/
  PW06W00.XXXTSPAG = 1; /* start at first page of t/s*/
  TA5REC.TA5TSQIX = PW06W00.XXXTSPAG; /* tell it which page to get*/
  PW06S-READ-T-STOR(); /* read first t/s page*/

  while (PW06W00.XXXTSPAG <= PW06W00.TA5TSQIX) /* while there is still data*/

    if (PW06W01.PW06W-ACTION[PW06W-IDX] == "A") /* add sel quantities*/
      if (PW06W00.PW06W-ADD-SP-HNDL-SW[PW06W-IDX] == "Y")
        PW06-162(); /* add sel quantities*/
      end

      if (PW06W00.PW06W-ADD-NSP-HNDL-SW[PW06W-IDX] == "Y")
        PW06-162(); /* add sel quantities*/
      end
    end

    if (PW06W01.PW06W-ACTION[PW06W-IDX] == "D") /* delete sel quant*/
      if (PW06W00.PW06W-DEL-SP-HNDL-SW[PW06W-IDX] == "Y")
        PW06-163(); /* delete sel quantities*/
      end

      if (PW06W00.PW06W-DEL-NSP-HNDL-SW[PW06W-IDX] == "Y")
        PW06-163(); /* delete sel quantities*/
      end
    end

    if (PW06W01.PW06W-ACTION[PW06W-IDX] == "C")
                                                   /* change sel quantities*/
      if (PW06W00.PW06W-CHG-SP-HNDL-SW[PW06W-IDX] == "Y")
        PW06-164(); /* change sel quantities*/
      end

      if (PW06W00.PW06W-CHG-NSP-HNDL-SW[PW06W-IDX] == "Y")
        PW06-164(); /* change sel quantities*/
      end
    end

    if (PW06W01.PW06W-ACTION[PW06W-IDX] == "I") /* inquire on order*/
      PW06-165(); /* order inquiry routine*/
    end

    PW06W00.PW06W-IDX = PW06W00.PW06W-IDX + 1;

    if (PW06W00.PW06W-IDX > 10) /* if index > 10*/

      PW06S-UPD-T-STOR(); /* update current t/s page*/
      PW06W00.XXXTSPAG = PW06W00.XXXTSPAG + 1; /* increment t/s page number*/

      if (PW06W00.XXXTSPAG <= PW06W00.TA5TSQIX) /* still have more t/s pages*/
        TA5REC.TA5TSQIX = PW06W00.XXXTSPAG; /* tell it which page to get*/
        PW06S-READ-T-STOR(); /* get next t/s page*/
        PW06W00.PW06W-IDX = 1; /* reset index*/

      end
    end
  end


end // end PW06-161

// Select order for picking
Function PW06-162()
   /* ------------------------------------------------------------*/
   /* Add selection quantities - DPICK.VSELQT01*/
   /* See if row already exists in DPICK.VSELQT01*/
   /* ------------------------------------------------------------*/
  set PWMREC empty; /* clear record*/
  PWMREC.XWHCD = PW06W01.XWHCD; /* whse code*/
  PWMREC.XGPCD = COMMAREA.XGPCD; /* general product code*/
  PWMREC.PKURUNMD = PW06W00.PW06W-RUN-MODE; /* run mode*/

  if (PW06W01.XDVCD == "*") /* division code*/
    PWMREC.XDVCD = " ";
  else
    PWMREC.XDVCD = PW06W01.XDVCD;
  end

  if (PW06W01.XBCCD == "*") /* brand code*/
    PWMREC.XBCCD = " ";
  else
    PWMREC.XBCCD = PW06W01.XBCCD;
  end

  PW06W00.PW06W-HOLD-MM = PW06W01.PW06W-DNSB-MM[PW06W-IDX]; /* dnsb mm*/
  PW06W00.PW06W-HOLD-DD = PW06W01.PW06W-DNSB-DD[PW06W-IDX]; /* dnsb dd*/
  PW06W00.PW06W-HOLD-YY = PW06W01.PW06W-DNSB-YY[PW06W-IDX]; /* dnsb yy*/
   /* ------------------------------------------------------------*/
   /* if dnsb date eq 0, move 0 to century*/
   /* ------------------------------------------------------------*/
  if (PW06W01.PW06W-DNSB-MM[PW06W-IDX] != 0)

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE PW06W00.PW06W-CURR-CC TO PW06W00.PW06W-HOLD-CC;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
    if (PW06W00.PW06W-HOLD-YY > 60)
      PW06W00.PW06W-HOLD-CC = 19;
    else
      PW06W00.PW06W-HOLD-CC = 20;
    end
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

  else
    PW06W00.PW06W-HOLD-CC = 0;
  end
  PWMREC.OP1DSBDT = PW06W00.PW06W-HOLD-DATE;

  PW06W00.PW06W-HOLD-TF1CARCD = PW06W01.TF1CARCD[PW06W-IDX];
  PWMREC.TF1CARCD = PW06W01.TF1CARCD[PW06W-IDX]; /* carrier cd*/
  PWMREC.XHDCD = " "; /* spec hndl code*/


  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW06M002.PW06M-BGR-CLS-SW == "B") /* if bgrade*/
      if (PW06W00.PW06W-ADD-SP-HNDL-SW[PW06W-IDX] == "Y") /* spec hndl*/
        PWMREC.PKHPVSFC = PW06W01.PW06W-SEL-SP[PW06W-IDX];
        PW06W00.PW06W-TOT-QTY-SP-HNDL = PW06W00.PW06W-TOT-QTY-SP-HNDL +         PW06W01.PW06W-SEL-SP[PW06W-IDX]; /* adjust tot qty on page*/
        PW06W00.PW06W-ADD-SP-HNDL-SW[PW06W-IDX] = "N";
        PWMREC.PK-SEL-TYP-CD = "10"; /* selection type code*/
      else /* non spec hndl*/
        if (PW06W00.PW06W-ADD-NSP-HNDL-SW[PW06W-IDX] == "Y")
          PWMREC.PKHPVSFC = PW06W01.PW06W-SEL-NSP[PW06W-IDX];
          PW06W00.PW06W-TOT-QTY-NSP-HNDL = PW06W00.PW06W-TOT-QTY-NSP-HNDL +           PW06W01.PW06W-SEL-NSP[PW06W-IDX]; /* adjust tot qty on page*/
          PWMREC.PK-SEL-TYP-CD = "11"; /* selection type code*/
        end
      end
    else /* else closeout*/
      if (PW06W00.PW06W-ADD-SP-HNDL-SW[PW06W-IDX] == "Y") /* spec hndl*/
        PWMREC.PKHPVSFC = PW06W01.PW06W-SEL-SP[PW06W-IDX];
        PW06W00.PW06W-TOT-QTY-SP-HNDL = PW06W00.PW06W-TOT-QTY-SP-HNDL +         PW06W01.PW06W-SEL-SP[PW06W-IDX]; /* adjust tot qty on page*/
        PW06W00.PW06W-ADD-SP-HNDL-SW[PW06W-IDX] = "N";
        PWMREC.PK-SEL-TYP-CD = "12"; /* selection type code*/
      else /* non spec hndl*/
        if (PW06W00.PW06W-ADD-NSP-HNDL-SW[PW06W-IDX] == "Y")
          PWMREC.PKHPVSFC = PW06W01.PW06W-SEL-NSP[PW06W-IDX];
          PW06W00.PW06W-TOT-QTY-NSP-HNDL = PW06W00.PW06W-TOT-QTY-NSP-HNDL +           PW06W01.PW06W-SEL-NSP[PW06W-IDX]; /* adjust tot qty on page*/
          PWMREC.PK-SEL-TYP-CD = "13"; /* selection type code*/
        end
      end
    end
  else
    if (PW06M001.PW06M-BGR-CLS-SW == "B") /* if bgrade*/
      if (PW06W00.PW06W-ADD-SP-HNDL-SW[PW06W-IDX] == "Y") /* spec hndl*/
        PWMREC.PKHPVSFC = PW06W01.PW06W-SEL-SP[PW06W-IDX];
        PW06W00.PW06W-TOT-QTY-SP-HNDL = PW06W00.PW06W-TOT-QTY-SP-HNDL +         PW06W01.PW06W-SEL-SP[PW06W-IDX]; /* adjust tot qty on page*/
        PW06W00.PW06W-ADD-SP-HNDL-SW[PW06W-IDX] = "N";
        PWMREC.PK-SEL-TYP-CD = "10"; /* selection type code*/
      else /* non spec hndl*/
        if (PW06W00.PW06W-ADD-NSP-HNDL-SW[PW06W-IDX] == "Y")
          PWMREC.PKHPVSFC = PW06W01.PW06W-SEL-NSP[PW06W-IDX];
          PW06W00.PW06W-TOT-QTY-NSP-HNDL = PW06W00.PW06W-TOT-QTY-NSP-HNDL +           PW06W01.PW06W-SEL-NSP[PW06W-IDX]; /* adjust tot qty on page*/
          PWMREC.PK-SEL-TYP-CD = "11"; /* selection type code*/
        end
      end
    else /* else closeout*/
      if (PW06W00.PW06W-ADD-SP-HNDL-SW[PW06W-IDX] == "Y") /* spec hndl*/
        PWMREC.PKHPVSFC = PW06W01.PW06W-SEL-SP[PW06W-IDX];
        PW06W00.PW06W-TOT-QTY-SP-HNDL = PW06W00.PW06W-TOT-QTY-SP-HNDL +         PW06W01.PW06W-SEL-SP[PW06W-IDX]; /* adjust tot qty on page*/
        PW06W00.PW06W-ADD-SP-HNDL-SW[PW06W-IDX] = "N";
        PWMREC.PK-SEL-TYP-CD = "12"; /* selection type code*/
      else /* non spec hndl*/
        if (PW06W00.PW06W-ADD-NSP-HNDL-SW[PW06W-IDX] == "Y")
          PWMREC.PKHPVSFC = PW06W01.PW06W-SEL-NSP[PW06W-IDX];
          PW06W00.PW06W-TOT-QTY-NSP-HNDL = PW06W00.PW06W-TOT-QTY-NSP-HNDL +           PW06W01.PW06W-SEL-NSP[PW06W-IDX]; /* adjust tot qty on page*/
          PWMREC.PK-SEL-TYP-CD = "13"; /* selection type code*/
        end
      end
    end
  end


  PW06S-SEL-UNIQ-QTY(); /* select unique Dpick.Vselqt01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* row already exists*/

    if (PW06W00.XXXMSGNO == 0) /* if no other warning msgs*/
      PW06W00.XXXMSGNO = 44; /* warning msg*/
      PW06W00.XXXMODID = "162"; /* module id*/
    end
    PW06W01.PW06W-ACTION[PW06W-IDX] = " "; /* clear action code*/

    return; /* return to calling process, dont need*/
                                   /* to add record*/
  end

   /* ------------------------------------------------------------*/
   /* Now, Add row to DPICK.VSELQT01*/
   /* ------------------------------------------------------------*/
  PWMREC.PKHPVSMM = 0;
  PWMREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PWMREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  PWMREC.ZZZCHGCT = 0;

  PW06S-ADD-ROW(); /* insert row in dpick.vselqt01*/


end // end PW06-162

// Delete selection quantities
Function PW06-163()
   /* ------------------------------------------------------------*/
   /* Delete selection qtys    - DPICK.VSELQT01*/
   /* ------------------------------------------------------------*/
  set PWMREC empty; /* clear record*/
  PWMREC.XWHCD = PW06W01.XWHCD; /* whse code*/
  PWMREC.XGPCD = COMMAREA.XGPCD; /* general product code*/
  PWMREC.PKURUNMD = PW06W00.PW06W-RUN-MODE; /* run mode*/

  if (PW06W01.XDVCD == "*") /* division code*/
    PWMREC.XDVCD = " ";
  else
    PWMREC.XDVCD = PW06W01.XDVCD;
  end

  if (PW06W01.XBCCD == "*") /* brand code*/
    PWMREC.XBCCD = " ";
  else
    PWMREC.XBCCD = PW06W01.XBCCD;
  end

  PW06W00.PW06W-HOLD-MM = PW06W01.PW06W-DNSB-MM[PW06W-IDX]; /* dnsb mm*/
  PW06W00.PW06W-HOLD-DD = PW06W01.PW06W-DNSB-DD[PW06W-IDX]; /* dnsb dd*/
  PW06W00.PW06W-HOLD-YY = PW06W01.PW06W-DNSB-YY[PW06W-IDX]; /* dnsb yy*/

   /* ------------------------------------------------------------*/
   /* If dnsb eq 0, move 0 to century*/
   /* ------------------------------------------------------------*/
  if (PW06W01.PW06W-DNSB-MM[PW06W-IDX] != 0)

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE PW06W00.PW06W-CURR-CC TO PW06W00.PW06W-HOLD-CC;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
    if (PW06W00.PW06W-HOLD-YY > 60)
      PW06W00.PW06W-HOLD-CC = 19;
    else
      PW06W00.PW06W-HOLD-CC = 20;
    end
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

  else
    PW06W00.PW06W-HOLD-CC = 0;
  end

  PWMREC.OP1DSBDT = PW06W00.PW06W-HOLD-DATE; /* dnsb*/

  PW06W00.PW06W-HOLD-TF1CARCD = PW06W01.TF1CARCD[PW06W-IDX];
  PWMREC.TF1CARCD = PW06W01.TF1CARCD[PW06W-IDX];
  PWMREC.XHDCD = " "; /* spec hndl code*/


  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW06M002.PW06M-BGR-CLS-SW == "B") /* if bgrade*/
      if (PW06W00.PW06W-DEL-SP-HNDL-SW[PW06W-IDX] == "Y") /* spec hndl*/
        PWMREC.PK-SEL-TYP-CD = "10"; /* selection typ cd*/
        PW06W00.PW06W-TOT-QTY-SP-HNDL = PW06W00.PW06W-TOT-QTY-SP-HNDL -         PW06W01.PW06W-SEL-SP[PW06W-IDX]; /* adjust tot qty*/
      else /* non spec hndl*/
        if (PW06W00.PW06W-DEL-NSP-HNDL-SW[PW06W-IDX] == "Y")
          PWMREC.PK-SEL-TYP-CD = "11"; /* selection typ cd*/
          PW06W00.PW06W-TOT-QTY-NSP-HNDL = PW06W00.PW06W-TOT-QTY-NSP-HNDL -           PW06W01.PW06W-SEL-NSP[PW06W-IDX]; /* adjust tot qty*/
        end
      end
    else /* else closeout*/
      if (PW06W00.PW06W-DEL-SP-HNDL-SW[PW06W-IDX] == "Y") /* spec hndl*/
        PWMREC.PK-SEL-TYP-CD = "12"; /* selection typ cd*/
        PW06W00.PW06W-TOT-QTY-SP-HNDL = PW06W00.PW06W-TOT-QTY-SP-HNDL -         PW06W01.PW06W-SEL-SP[PW06W-IDX]; /* adjust tot qty*/
      else /* non spec hndl*/
        if (PW06W00.PW06W-DEL-NSP-HNDL-SW[PW06W-IDX] == "Y")
          PWMREC.PK-SEL-TYP-CD = "13"; /* selection typ cd*/
          PW06W00.PW06W-TOT-QTY-NSP-HNDL = PW06W00.PW06W-TOT-QTY-NSP-HNDL -           PW06W01.PW06W-SEL-NSP[PW06W-IDX]; /* adjust tot qty*/
        end
      end
    end
  else
    if (PW06M001.PW06M-BGR-CLS-SW == "B") /* if bgrade*/
      if (PW06W00.PW06W-DEL-SP-HNDL-SW[PW06W-IDX] == "Y") /* spec hndl*/
        PWMREC.PK-SEL-TYP-CD = "10"; /* selection typ cd*/
        PW06W00.PW06W-TOT-QTY-SP-HNDL = PW06W00.PW06W-TOT-QTY-SP-HNDL -         PW06W01.PW06W-SEL-SP[PW06W-IDX]; /* adjust tot qty*/
      else /* non spec hndl*/
        if (PW06W00.PW06W-DEL-NSP-HNDL-SW[PW06W-IDX] == "Y")
          PWMREC.PK-SEL-TYP-CD = "11"; /* selection typ cd*/
          PW06W00.PW06W-TOT-QTY-NSP-HNDL = PW06W00.PW06W-TOT-QTY-NSP-HNDL -           PW06W01.PW06W-SEL-NSP[PW06W-IDX]; /* adjust tot qty*/
        end
      end
    else /* else closeout*/
      if (PW06W00.PW06W-DEL-SP-HNDL-SW[PW06W-IDX] == "Y") /* spec hndl*/
        PWMREC.PK-SEL-TYP-CD = "12"; /* selection typ cd*/
        PW06W00.PW06W-TOT-QTY-SP-HNDL = PW06W00.PW06W-TOT-QTY-SP-HNDL -         PW06W01.PW06W-SEL-SP[PW06W-IDX]; /* adjust tot qty*/
      else /* non spec hndl*/
        if (PW06W00.PW06W-DEL-NSP-HNDL-SW[PW06W-IDX] == "Y")
          PWMREC.PK-SEL-TYP-CD = "13"; /* selection typ cd*/
          PW06W00.PW06W-TOT-QTY-NSP-HNDL = PW06W00.PW06W-TOT-QTY-NSP-HNDL -           PW06W01.PW06W-SEL-NSP[PW06W-IDX]; /* adjust tot qty*/
        end
      end
    end

  end


  PW06S-SEL-UNIQ-QTY(); /* select unique dpick.vselqt01*/

  if (SQLCA.VAGen_SQLCODE == 100)
    if (PW06W00.XXXMSGNO == 0)
      converseLib.validationFailed(361);
    end
    PW06W01.PW06W-ACTION[PW06W-IDX] = " ";

    return;

  end

   /* ------------------------------------------------------------*/
   /* Delete row in   DPICK.VSELQT01*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW06M002.PW06M-BGR-CLS-SW == "B") /* if bgrade*/
      if (PW06W00.PW06W-DEL-SP-HNDL-SW[PW06W-IDX] == "Y") /* spec hndl*/
        PW06W01.PW06W-SEL-SP[PW06W-IDX] = 0; /* 0 qty*/
        PW06W00.PW06W-DEL-SP-HNDL-SW[PW06W-IDX] = "N";
      else /* non spec hndl*/
        if (PW06W00.PW06W-DEL-NSP-HNDL-SW[PW06W-IDX] == "Y")
          PW06W01.PW06W-SEL-NSP[PW06W-IDX] = 0; /* 0 qty*/
        end
      end
    else /* else closeout*/
      if (PW06W00.PW06W-DEL-SP-HNDL-SW[PW06W-IDX] == "Y") /* spec hndl*/
        PW06W01.PW06W-SEL-SP[PW06W-IDX] = 0; /* 0 qty*/
        PW06W00.PW06W-DEL-SP-HNDL-SW[PW06W-IDX] = "N";
      else /* non spec hndl*/
        if (PW06W00.PW06W-DEL-NSP-HNDL-SW[PW06W-IDX] == "Y")
          PW06W01.PW06W-SEL-NSP[PW06W-IDX] = 0; /* 0 qty*/
        end
      end
    end
  else
    if (PW06M001.PW06M-BGR-CLS-SW == "B") /* if bgrade*/
      if (PW06W00.PW06W-DEL-SP-HNDL-SW[PW06W-IDX] == "Y") /* spec hndl*/
        PW06W01.PW06W-SEL-SP[PW06W-IDX] = 0; /* 0 qty*/
        PW06W00.PW06W-DEL-SP-HNDL-SW[PW06W-IDX] = "N";
      else /* non spec hndl*/
        if (PW06W00.PW06W-DEL-NSP-HNDL-SW[PW06W-IDX] == "Y")
          PW06W01.PW06W-SEL-NSP[PW06W-IDX] = 0; /* 0 qty*/
        end
      end
    else /* else closeout*/
      if (PW06W00.PW06W-DEL-SP-HNDL-SW[PW06W-IDX] == "Y") /* spec hndl*/
        PW06W01.PW06W-SEL-SP[PW06W-IDX] = 0; /* 0 qty*/
        PW06W00.PW06W-DEL-SP-HNDL-SW[PW06W-IDX] = "N";
      else /* non spec hndl*/
        if (PW06W00.PW06W-DEL-NSP-HNDL-SW[PW06W-IDX] == "Y")
          PW06W01.PW06W-SEL-NSP[PW06W-IDX] = 0; /* 0 qty*/
        end
      end
    end

  end

  PWMREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PWMREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW06S-DELETE-ROW(); /* delete row in dpick.vselqt01*/


end // end PW06-163

// Change selection quantities
Function PW06-164()
   /* ------------------------------------------------------------*/
   /* Change selection qtys    - DPICK.VSELQT01*/
   /* ------------------------------------------------------------*/
  set PWMREC empty; /* clear record*/
  PWMREC.XWHCD = PW06W01.XWHCD; /* warehouse code*/
  PWMREC.XBCCD = PW06W01.XBCCD; /* brand code*/
  PWMREC.XGPCD = COMMAREA.XGPCD; /* general product code*/
  PWMREC.PKURUNMD = PW06W00.PW06W-RUN-MODE;

  if (PW06W01.XDVCD == "*") /* division code*/
    PWMREC.XDVCD = " ";
  else
    PWMREC.XDVCD = PW06W01.XDVCD;
  end

  if (PW06W01.XBCCD == "*") /* brand code*/
    PWMREC.XBCCD = " ";
  else
    PWMREC.XBCCD = PW06W01.XBCCD;
  end

  PW06W00.PW06W-HOLD-MM = PW06W01.PW06W-DNSB-MM[PW06W-IDX]; /* dnsb mm*/
  PW06W00.PW06W-HOLD-DD = PW06W01.PW06W-DNSB-DD[PW06W-IDX]; /* dnsb dd*/
  PW06W00.PW06W-HOLD-YY = PW06W01.PW06W-DNSB-YY[PW06W-IDX]; /* dnsb yy*/
   /* ------------------------------------------------------------*/
   /* if dnsb eq 0, move 0 to century*/
   /* ------------------------------------------------------------*/
  if (PW06W01.PW06W-DNSB-MM[PW06W-IDX] != 0)

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE PW06W00.PW06W-CURR-CC TO PW06W00.PW06W-HOLD-CC;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
    if (PW06W00.PW06W-HOLD-YY > 60)
      PW06W00.PW06W-HOLD-CC = 19;
    else
      PW06W00.PW06W-HOLD-CC = 20;
    end
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

  else
    PW06W00.PW06W-HOLD-CC = 0;
  end
  PWMREC.OP1DSBDT = PW06W00.PW06W-HOLD-DATE;

  PW06W00.PW06W-HOLD-TF1CARCD = PW06W01.TF1CARCD[PW06W-IDX];
  PWMREC.TF1CARCD = PW06W01.TF1CARCD[PW06W-IDX];
  PWMREC.XHDCD = " "; /* spec hndl code*/


  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW06M002.PW06M-BGR-CLS-SW == "B") /* if bgrade*/
      if (PW06W00.PW06W-CHG-SP-HNDL-SW[PW06W-IDX] == "Y") /* spec hndl*/
        PWMREC.PK-SEL-TYP-CD = "10"; /* selection type code*/
      else /* non spec hndl*/
        if (PW06W00.PW06W-CHG-NSP-HNDL-SW[PW06W-IDX] == "Y")
          PWMREC.PK-SEL-TYP-CD = "11"; /* selection type code*/
        end
      end
    else /* else closeout*/
      if (PW06W00.PW06W-CHG-SP-HNDL-SW[PW06W-IDX] == "Y") /* spec hndl*/
        PWMREC.PK-SEL-TYP-CD = "12"; /* selection type code*/
      else /* non spec hndl*/
        if (PW06W00.PW06W-CHG-NSP-HNDL-SW[PW06W-IDX] == "Y")
          PWMREC.PK-SEL-TYP-CD = "13"; /* selection type code*/
        end
      end
    end
  else
    if (PW06M001.PW06M-BGR-CLS-SW == "B") /* if bgrade*/
      if (PW06W00.PW06W-CHG-SP-HNDL-SW[PW06W-IDX] == "Y") /* spec hndl*/
        PWMREC.PK-SEL-TYP-CD = "10"; /* selection type code*/
      else /* non spec hndl*/
        if (PW06W00.PW06W-CHG-NSP-HNDL-SW[PW06W-IDX] == "Y")
          PWMREC.PK-SEL-TYP-CD = "11"; /* selection type code*/
        end
      end
    else /* else closeout*/
      if (PW06W00.PW06W-CHG-SP-HNDL-SW[PW06W-IDX] == "Y") /* spec hndl*/
        PWMREC.PK-SEL-TYP-CD = "12"; /* selection type code*/
      else /* non spec hndl*/
        if (PW06W00.PW06W-CHG-NSP-HNDL-SW[PW06W-IDX] == "Y")
          PWMREC.PK-SEL-TYP-CD = "13"; /* selection type code*/
        end
      end
    end
  end


  PW06S-SEL-UNIQ-QTY(); /* Select unique row dpick.vselqt01*/

  if (SQLCA.VAGen_SQLCODE == 100)
    if (PW06W00.XXXMSGNO == 0)
      converseLib.validationFailed(360);
    end
    PW06W01.PW06W-ACTION[PW06W-IDX] = " ";

    return;

  end

   /* ------------------------------------------------------------*/
   /* Change row in   DPICK.VSELQT01*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW06M002.PW06M-BGR-CLS-SW == "B") /* if bgrade*/
      if (PW06W00.PW06W-CHG-SP-HNDL-SW[PW06W-IDX] == "Y") /* spec hndl*/
        PW06W00.PW06W-TOT-QTY-SP-HNDL = PW06W00.PW06W-TOT-QTY-SP-HNDL -         PWMREC.PKHPVSFC + PW06W01.PW06W-SEL-SP[PW06W-IDX];
                                   /* adjust tot qty*/
        PWMREC.PKHPVSFC = PW06W01.PW06W-SEL-SP[PW06W-IDX];
        PW06W00.PW06W-CHG-SP-HNDL-SW[PW06W-IDX] = "N";
      else /* non spec hndl*/
        if (PW06W00.PW06W-CHG-NSP-HNDL-SW[PW06W-IDX] == "Y")
          PW06W00.PW06W-TOT-QTY-NSP-HNDL = PW06W00.PW06W-TOT-QTY-NSP-HNDL -           PWMREC.PKHPVSFC + PW06W01.PW06W-SEL-NSP[PW06W-IDX];
                                   /* adjust tot*/
          PWMREC.PKHPVSFC = PW06W01.PW06W-SEL-NSP[PW06W-IDX];
        end
      end
    else /* else closeout*/
      if (PW06W00.PW06W-CHG-SP-HNDL-SW[PW06W-IDX] == "Y") /* spec hndl*/
        PW06W00.PW06W-TOT-QTY-SP-HNDL = PW06W00.PW06W-TOT-QTY-SP-HNDL -         PWMREC.PKHPVSFC + PW06W01.PW06W-SEL-SP[PW06W-IDX]; /* adjust tot*/
        PWMREC.PKHPVSFC = PW06W01.PW06W-SEL-SP[PW06W-IDX];
        PW06W00.PW06W-CHG-SP-HNDL-SW[PW06W-IDX] = "N";
      else /* non spec hndl*/
        if (PW06W00.PW06W-CHG-NSP-HNDL-SW[PW06W-IDX] == "Y")
          PW06W00.PW06W-TOT-QTY-NSP-HNDL = PW06W00.PW06W-TOT-QTY-NSP-HNDL -           PWMREC.PKHPVSFC + PW06W01.PW06W-SEL-NSP[PW06W-IDX];
                                   /* adjust tot*/
          PWMREC.PKHPVSFC = PW06W01.PW06W-SEL-NSP[PW06W-IDX];
        end
      end
    end
  else
    if (PW06M001.PW06M-BGR-CLS-SW == "B") /* if bgrade*/
      if (PW06W00.PW06W-CHG-SP-HNDL-SW[PW06W-IDX] == "Y") /* spec hndl*/
        PW06W00.PW06W-TOT-QTY-SP-HNDL = PW06W00.PW06W-TOT-QTY-SP-HNDL -         PWMREC.PKHPVSFC + PW06W01.PW06W-SEL-SP[PW06W-IDX];
                                   /* adjust tot qty*/
        PWMREC.PKHPVSFC = PW06W01.PW06W-SEL-SP[PW06W-IDX];
        PW06W00.PW06W-CHG-SP-HNDL-SW[PW06W-IDX] = "N";
      else /* non spec hndl*/
        if (PW06W00.PW06W-CHG-NSP-HNDL-SW[PW06W-IDX] == "Y")
          PW06W00.PW06W-TOT-QTY-NSP-HNDL = PW06W00.PW06W-TOT-QTY-NSP-HNDL -           PWMREC.PKHPVSFC + PW06W01.PW06W-SEL-NSP[PW06W-IDX];
                                   /* adjust tot*/
          PWMREC.PKHPVSFC = PW06W01.PW06W-SEL-NSP[PW06W-IDX];
        end
      end
    else /* else closeout*/
      if (PW06W00.PW06W-CHG-SP-HNDL-SW[PW06W-IDX] == "Y") /* spec hndl*/
        PW06W00.PW06W-TOT-QTY-SP-HNDL = PW06W00.PW06W-TOT-QTY-SP-HNDL -         PWMREC.PKHPVSFC + PW06W01.PW06W-SEL-SP[PW06W-IDX]; /* adjust tot*/
        PWMREC.PKHPVSFC = PW06W01.PW06W-SEL-SP[PW06W-IDX];
        PW06W00.PW06W-CHG-SP-HNDL-SW[PW06W-IDX] = "N";
      else /* non spec hndl*/
        if (PW06W00.PW06W-CHG-NSP-HNDL-SW[PW06W-IDX] == "Y")
          PW06W00.PW06W-TOT-QTY-NSP-HNDL = PW06W00.PW06W-TOT-QTY-NSP-HNDL -           PWMREC.PKHPVSFC + PW06W01.PW06W-SEL-NSP[PW06W-IDX];
                                   /* adjust tot*/
          PWMREC.PKHPVSFC = PW06W01.PW06W-SEL-NSP[PW06W-IDX];
        end
      end
    end
  end


  PWMREC.PKHPVSMM = 0;
  PWMREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PWMREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW06S-CHANGE-ROW(); /* change row in dpick.vselqt01*/


end // end PW06-164

// Process order for inquiry
Function PW06-165()
   /* ------------------------------------------------------------*/
   /* Order was requested for inquiry - add to pkwrec array*/
   /* ------------------------------------------------------------*/
  if (PW06W00.PW06W-INQ-IDX > 25)

    PW06W00.XXXMSGNO = 346;
    return;

  end

  if (PW06W01.PW06W-DNSB-DATE[PW06W-IDX] != 0)
    if (PW06W01.PW06W-DNSB-YY[PW06W-IDX] > 50
     && PW06W01.PW06W-DNSB-YY[PW06W-IDX] <= 99)
      PW06W01.PW06W-DNSB-CC[PW06W-IDX] = 19;
    else
      PW06W01.PW06W-DNSB-CC[PW06W-IDX] = 20;
    end
  end

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PKWREC.PKW-ORDER-TYP-IND[1] = PW06M002.PW06M-BGR-CLS-SW;
  else
    PKWREC.PKW-ORDER-TYP-IND[1] = PW06M001.PW06M-BGR-CLS-SW;
  end

  PWKREC.PWKORACT[PW06W-INQ-IDX] = "I"; /* flag for inquiry*/
  PWKREC.OP1DSBDT[PW06W-INQ-IDX] = PW06W01.PW06W-DNSB-DATE[PW06W-IDX];
  PWKREC.TF1CARCD[PW06W-INQ-IDX] = PW06W01.TF1CARCD[PW06W-IDX];
  PWKREC.PWKARMAX = PW06W00.PW06W-INQ-IDX; /* set # occ's in array*/

  PW06W00.PW06W-INQ-IDX = PW06W00.PW06W-INQ-IDX + 1;


end // end PW06-165

// Transfer control to PW07
Function PW06-166()
   /* ------------------------------------------------------------*/
   /* xfer to PW07.*/
   /* ------------------------------------------------------------*/
  PW06-111(); /* Purge temporary storage*/

  COMMAREA.CATOAP = "PW07"; /* set target application*/
  PKWREC.PKWARRAY = PWKREC.PWKARRAY; /* store array for pw07*/
  XSPKS01(); /* Exit to another application*/

  set PW06M001.CATOAP cursor, bold; /* Highlight*/
  set PW06M002.CATOAP cursor, bold; /* Highlight*/

  exit stack; /* Exit to display map*/


end // end PW06-166

// Fetch row in DPICK.VCUHLD01
Function PW06S-ADD-ORD-QTY()
   /* ------------------------------------------------------------*/
   /* sum ord quantitys for distinctive dnsb dates*/
   /* ------------------------------------------------------------*/
  PW06W00.PW06W-ORD-SP-FC = 0; /* 0 out ord spec hndl fc*/
  PW06W00.PW06W-ORD-NSP-FC = 0; /* 0 out ord non spec hndl fc*/
  PW06W00.PW06W-ORD-SP-RP = 0; /* 0 out ord spec hndl rp*/
  PW06W00.PW06W-ORD-NSP-RP = 0; /* 0 out ord non spec hndl rp*/

  while ((PK4REC.OP1DSBDT > PKHREC.OP1DSBDT   /* while pool dnsb gt ord dnsb*/
   || (PK4REC.OP1DSBDT == PKHREC.OP1DSBDT  /* or (pool dsnb eq ord dnsb*/
   && PK4REC.TF1CARCD >= PKHREC.TF1CARCD)) /* and pool carr ge ord carr)*/
   && PW06W00.PW06W-CURSOR-ORD-SW == " ") /* and not end of cursor ord*/

    if (PK4REC.OP1DSBDT == PKHREC.OP1DSBDT /* pool dsnb eq ord dnsb*/
     && PK4REC.TF1CARCD == PKHREC.TF1CARCD) /* and pool carr eq ord carr*/

      if (PKWREC.PKWSELSW == "PK") /* picking*/
        PW06S-SUM-ORD-MAP2(); /* sum order qtys*/
      else
        PW06S-SUM-ORD-MAP1(); /* sum order qtys*/
      end

      PW06W01.PW06W-ORD-SP[PW06W-IDX] = PW06W00.PW06W-ORD-SP-FC +       PW06W00.PW06W-ORD-SP-RP; /* sum ord qty*/
      PW06W01.PW06W-ORD-NSP[PW06W-IDX] = PW06W00.PW06W-ORD-NSP-FC +       PW06W00.PW06W-ORD-NSP-RP; /* sum ord q*/

    end

    PW06S-FETCH-SELORD(); /* Fetch order qtys*/

  end


end // end PW06S-ADD-ORD-QTY

// Insert into DPICK.VSELQT01
Function PW06S-ADD-ROW()
   /* ------------------------------------------------------------*/
   /* Insert the row into DPICK.VSELQT01*/
   /* ------------------------------------------------------------*/
  try
    call "IO5500" ("A ", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* commit table updates*/
      PW06W00.XXXMSGNO = 32; /* table update successful*/
      PW06W01.PW06W-ACTION[PW06W-IDX] = "*";
      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == -803) /* Row already exists*/

      PW06W00.XXXMSGNO = 44; /* Warning msg*/
      PW06W01.PW06W-ACTION[PW06W-IDX] = " "; /* clear action code*/
      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW06W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWMREC.PWMKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06S-ADD-ROW

// add sel qty in dpick.vselqt01
Function PW06S-ADD-SEL-QTY()
   /* ------------------------------------------------------------*/
   /* sum sel quantitys for distinctive dnsb dates*/
   /* ------------------------------------------------------------*/
  PW06W00.PW06W-SEL-SP-FC = 0; /* move 0 to sel qty spec hndl fc*/
  PW06W00.PW06W-SEL-NSP-FC = 0; /* move 0 to sel qty nospec hndl fc*/
  PW06W00.PW06W-SEL-SP-RP = 0; /* move 0 to sel qty spec hndl rp*/
  PW06W00.PW06W-SEL-NSP-RP = 0; /* move 0 to sel qty nospec hndl rp*/

  PW06W00.PW06W-LAST-DNSB = PWMREC.OP1DSBDT;
  PW06W00.PW06W-LAST-TF1CARCD = PWMREC.TF1CARCD;
  PW06W00.PW06W-SEL-BGR-CLS-SW = "N"; /* bgrade closeout sw*/

  if (PK4REC.OP1DSBDT < PWMREC.OP1DSBDT   /* pool dnsb lt qty dnsb*/
   || (PK4REC.OP1DSBDT == PWMREC.OP1DSBDT /* or (pool dnsb eq qty dnsb*/
   && PK4REC.TF1CARCD < PWMREC.TF1CARCD)) /* and pool carr lt qty carr)*/
    PW06W00.PW06W-SEL-EXIST-SW = "Y"; /* selection exists*/
  else
    PW06W00.PW06W-SEL-EXIST-SW = "N";
  end

  while ((PWMREC.OP1DSBDT < PK4REC.OP1DSBDT         /* while qty dnsb lt pool dnsb*/
   || (PWMREC.OP1DSBDT == PK4REC.OP1DSBDT        /* or (qty dnsb eq pool dnsb*/
   && PWMREC.TF1CARCD <= PK4REC.TF1CARCD))       /* and qty carr lt pool carr)*/
   && PW06W00.PW06W-CURSOR-SEL-SW == " "         /* and not end of sel cursor*/
   && PWMREC.OP1DSBDT == PW06W00.PW06W-LAST-DNSB /* sel dnsb eq last dnsb*/
   && PWMREC.TF1CARCD == PW06W00.PW06W-LAST-TF1CARCD) /* sel carr = last*/

    if (PK4REC.OP1DSBDT == PWMREC.OP1DSBDT /* if pool dnsb eq sel dnsb*/
     && PK4REC.TF1CARCD == PWMREC.TF1CARCD) /* and pool carr eq qty carr*/
      PW06W00.PW06W-SEL-EXIST-SW = "Y"; /* selection exist*/
    end

    PW06S-SUM-SEL-QTY(); /* sum selection qty*/

    PW06W00.PW06W-LAST-DNSB = PWMREC.OP1DSBDT;
                                  /* move sel dnsb to pool dnsb*/
    PW06W00.PW06W-LAST-TF1CARCD = PWMREC.TF1CARCD;

    PW06S-FETCH-SEL(); /* Fetch next dpick.vselqt01*/

    PW06W01.PW06W-SEL-SP[PW06W-IDX] = PW06W00.PW06W-SEL-SP-FC +     PW06W00.PW06W-SEL-SP-RP; /* accum sel*/
    PW06W01.PW06W-SEL-NSP[PW06W-IDX] = PW06W00.PW06W-SEL-NSP-FC +     PW06W00.PW06W-SEL-NSP-RP; /* accum sel*/

    /* ------------------------------------------------------------*/
    /* if selection qtys eq 0 move current dnsb to last dnsb.*/
    /* Will read next record(Selection qty).*/
    /* ------------------------------------------------------------*/
    if (PW06W01.PW06W-SEL-SP[PW06W-IDX] == 0
     && PW06W01.PW06W-SEL-NSP[PW06W-IDX] == 0)
      PW06W00.PW06W-LAST-DNSB = PWMREC.OP1DSBDT;
      PW06W00.PW06W-LAST-TF1CARCD = PWMREC.TF1CARCD;
    end

  end /* End while*/

   /* ------------------------------------------------------------*/
   /* If not bgr cls and sel exist will continue. Else will move dnsb*/
   /* to ws dnsb to print out row that only exist for selection qty*/
   /* not for pick pool. Then do not read next pick pool record.*/
   /* ------------------------------------------------------------*/
  if (PW06W00.PW06W-SEL-EXIST-SW == "Y"
   || PW06W00.PW06W-SEL-BGR-CLS-SW == "N")
    /* next sentence*/
  else
    PW06W00.PW06W-HOLD-DATE = PW06W00.PW06W-LAST-DNSB;
    PW06W00.PW06W-HOLD-SEL-DNSB = PW06W00.PW06W-LAST-DNSB;

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE PW06W00.PW06W-HOLD-SEL-MM TO PW06W01.PW06W-DNSB-MM(PW06W-IDX);*/
  /* MOVE PW06W00.PW06W-HOLD-SEL-DD TO PW06W01.PW06W-DNSB-DD(PW06W-IDX);*/
  /* MOVE PW06W00.PW06W-HOLD-SEL-YY TO PW06W01.PW06W-DNSB-YY(PW06W-IDX);*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
    PW06W01.PW06W-DNSB-DATE[PW06W-IDX] = PW06W00.PW06W-HOLD-SEL-DNSB;
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

    PW06W00.PW06W-HOLD-TF1CARCD = PW06W00.PW06W-LAST-TF1CARCD;
    PW06W01.TF1CARCD[PW06W-IDX] = PW06W00.PW06W-LAST-TF1CARCD;
    PW06W00.PW06W-READ-POOL-SW = "N";
  end


end // end PW06S-ADD-SEL-QTY

// Change row in DPICK.VSELQT01
Function PW06S-CHANGE-ROW()
   /* ------------------------------------------------------------*/
   /* Change  row in DPICK.VSELQT01*/
   /* ------------------------------------------------------------*/
  try
    call "IO5500" ("U ", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* commit table updates*/
      PW06W00.XXXMSGNO = 32; /* table update successful*/
      PW06W01.PW06W-ACTION[PW06W-IDX] = "*"; /* flag as processed*/
      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == -803) /* Row already exists*/

      PW06W00.XXXMSGNO = 44; /* Warning msg*/
      PW06W01.PW06W-ACTION[PW06W-IDX] = " "; /* clear action code*/
      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CHANGE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW06W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWMREC.PWMKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06S-CHANGE-ROW

// Close cursor in DPICK.VCAHLD01
Function PW06S-CLOSE-CARR()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  try
    call "IO3190" ("C1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW06W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06S-CLOSE-CARR

// Close cursor in DPICK.VCUHLD01
Function PW06S-CLOSE-CUST()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  try
    call "IO1790" ("C1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW06W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06S-CLOSE-CUST

// Close cursor in DPICK.VORHLD01
Function PW06S-CLOSE-ORD()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  try
    call "IO1770" ("C1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW06W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06S-CLOSE-ORD

// Close cursor in DPICK.vselqt01
Function PW06S-CLOSE-SEL()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  try
    call "IO5500" ("C1", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW06W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06S-CLOSE-SEL

// Close cursor in DPICK.VSELOR01
Function PW06S-CLOSE-SELORD()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  try
    call "IO1740" ("C2", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW06W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06S-CLOSE-SELORD

// Open cursor in DPICK.VCAHLD01
Function PW06S-DECL-CARR()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table-Dpick.Vcahld01*/
   /* ------------------------------------------------------------*/
  set PWFREC empty; /* Row storage area*/

  PWFREC.XWHCD = PW06W01.XWHCD; /* Warehouse code*/
  PWFREC.TF1CARCD = PK4REC.TF1CARCD; /* Carrier code*/

  try
    call "IO3190" ("S1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* okay too*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW06W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06S-DECL-CARR

// Open cursor in DPICK.VCUHLD01
Function PW06S-DECL-CUST()
   /* ------------------------------------------------------------*/
   /* Set cursor - Dpick.Vcuhld01*/
   /* ------------------------------------------------------------*/
  set PK9REC empty; /* Row storage area*/

  PK9REC.XWHCD = PW06W01.XWHCD; /* Warehouse code*/
  PK9REC.KUCCOID = PK4REC.KUCCOID;
  PK9REC.KUMSTRID = PK4REC.KUMSTRID;
  PK9REC.XNXCD = PK4REC.XNXCD;

  try
    call "IO1790" ("S1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* okay too*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW06W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06S-DECL-CUST

// Open cursor in DPICK.VORHLD01
Function PW06S-DECL-ORD()
   /* ------------------------------------------------------------*/
   /* Set cursor - Dpick.Vorhld01*/
   /* ------------------------------------------------------------*/
  set PKBREC empty; /* Row storage area*/

  PKBREC.XWHCD = PW06W01.XWHCD; /* Warehouse code*/
  PKBREC.PK1CUOID = PK4REC.PK1CUOID; /* Order number*/
  PKBREC.PK1NORID = PK4REC.PK1NORID; /* Nike order number*/

  try
    call "IO1770" ("S1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* okay too*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW06W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06S-DECL-ORD

// Open cursor in DPICK.Vselor01
Function PW06S-DECL-SELORD()
   /* ------------------------------------------------------------*/
   /* Set cursor - Dpick.vselor01*/
   /* ------------------------------------------------------------*/
  set PKHREC empty; /* Row storage area*/
  PW06W00.PW06W-ORD-SP-FC = 0; /* move 0 to ord spec hndl fc*/
  PW06W00.PW06W-ORD-NSP-FC = 0; /* move 0 to ord nospec hndl fc*/
  PW06W00.PW06W-ORD-SP-RP = 0; /* move 0 to ord spec hndl rp*/
  PW06W00.PW06W-ORD-NSP-RP = 0; /* move 0 to ord nospec hndl fc*/

  PKHREC.XWHCD = PW06W01.XWHCD; /* Warehouse code*/
  PKHREC.XDVCD = PW06W01.XDVCD; /* Division code*/
  PKHREC.XBCCD = PW06W01.XBCCD; /* Brand code*/
  PKHREC.PKURUNMD = PW06W00.PW06W-RUN-MODE; /* run mode*/
  PKHREC.OP1DSBDT = -1; /* dnsb date*/
  PKHREC.PK-SEL-TYP-CD = "*"; /* selection type code*/

  try
    call "IO1740" ("S2", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* okay too*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW06W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06S-DECL-SELORD

// Open cursor in DPICK.Vselqt01
Function PW06S-DECLARE-SEL()
   /* ------------------------------------------------------------*/
   /* Set cursor - Dpick.vselqt01*/
   /* ------------------------------------------------------------*/
  set PWMREC empty; /* Row storage area*/
  PW06W00.PW06W-SEL-SP-FC = 0; /* move 0 to qty spec hndl fc*/
  PW06W00.PW06W-SEL-NSP-FC = 0; /* move 0 to qty nospec hndl fc*/
  PW06W00.PW06W-SEL-SP-RP = 0; /* move 0 to qty spec hndl rp*/
  PW06W00.PW06W-SEL-NSP-RP = 0; /* move 0 to qty nospec hndl rp*/

  PWMREC.XWHCD = PW06W01.XWHCD; /* Warehouse code*/
  PWMREC.PKURUNMD = PW06W00.PW06W-RUN-MODE; /* run mode*/
  PWMREC.OP1DSBDT = -1; /* dnsb date*/
  PWMREC.PK-SEL-TYP-CD = "*"; /* selection type code*/
  PWMREC.TF1CARCD = "*"; /* carrier code*/
  PWMREC.XHDCD = "*"; /* spec hndl code*/
  PWMREC.XGPCD = "*"; /* general product code*/

  if (PW06W01.XDVCD == "*") /* division code*/
    PWMREC.XDVCD = " ";
  else
    PWMREC.XDVCD = PW06W01.XDVCD;
  end

  if (PW06W01.XBCCD == "*") /* brand code*/
    PWMREC.XBCCD = " ";
  else
    PWMREC.XBCCD = PW06W01.XBCCD;
  end

  try
    call "IO5500" ("S1", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* okay too*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW06W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWMREC.PWMKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06S-DECLARE-SEL

// Delete row in DPICK.VSELQT01
Function PW06S-DELETE-ROW()
   /* ------------------------------------------------------------*/
   /* Change  row in DPICK.VSELQT01*/
   /* ------------------------------------------------------------*/
  try
    call "IO5500" ("D ", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* commit table updates*/
      PW06W00.XXXMSGNO = 32; /* table update successful*/
      PW06W01.PW06W-ACTION[PW06W-IDX] = "*"; /* flag as processed*/
      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == -803) /* Row already exists*/

      PW06W00.XXXMSGNO = 44; /* Warning msg*/
      PW06W01.PW06W-ACTION[PW06W-IDX] = " "; /* clear action code*/
      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW06W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWMREC.PWMKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06S-DELETE-ROW

// Edit records for add
Function PW06S-EDT-ADD-MAP1()
   /* ----------------------------------------------------------*/
   /* Note: Apply the same changes to s-edit-add-map2 also.*/
   /* ----------------------------------------------------------*/
   /* ----------------------------------------------------------*/
   /* Edit records where action eq 'a' add*/
   /* ----------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* spec hndl eq 0 and non spec hndl eq 0*/
   /* ----------------------------------------------------------*/
  if (PW06W01.PW06W-SEL-SP[PW06W-IDX] == 0
   && PW06W01.PW06W-SEL-NSP[PW06W-IDX] == 0)

    if (PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] > 0)
      PW06W00.PW06W-SEL-SP[PW06W-IDX] = PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX];
      PW06W00.PW06W-ADD-SP-HNDL-SW[PW06W-IDX] = "Y";
    end

    if (PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] > 0)
      PW06W00.PW06W-SEL-NSP[PW06W-IDX] = PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX];
      PW06W00.PW06W-ADD-NSP-HNDL-SW[PW06W-IDX] = "Y";
    end

    if (PW06W00.PW06W-ADD-SP-HNDL-SW[PW06W-IDX] == "Y"
     || PW06W00.PW06W-ADD-NSP-HNDL-SW[PW06W-IDX] == "Y")
   /* next sentence*/
    else
      if (PW06W01.PW06W-POOL-SP-FC[PW06W-IDX] > 0
       || PW06W01.PW06W-POOL-SP-RP[PW06W-IDX] > 0)
        PW06W00.PW06W-SEL-SP[PW06W-IDX] = PW06W01.PW06W-POOL-SP-FC[PW06W-IDX] +         PW06W01.PW06W-POOL-SP-RP[PW06W-IDX];
        PW06W00.PW06W-ADD-SP-HNDL-SW[PW06W-IDX] = "Y";
      end

      if (PW06W01.PW06W-POOL-NSP-FC[PW06W-IDX] > 0
       || PW06W01.PW06W-POOL-NSP-RP[PW06W-IDX] > 0)
        PW06W00.PW06W-SEL-NSP[PW06W-IDX] = PW06W01.PW06W-POOL-NSP-FC[PW06W-IDX] +         PW06W01.PW06W-POOL-NSP-RP[PW06W-IDX];
        PW06W00.PW06W-ADD-NSP-HNDL-SW[PW06W-IDX] = "Y";
      end
    end

  else
   /* ----------------------------------------------------------*/
   /* spec hndl eq 0 and non spec hndl gt 0*/
   /* ----------------------------------------------------------*/

    if (PW06W01.PW06W-SEL-SP[PW06W-IDX] == 0
     && PW06W01.PW06W-SEL-NSP[PW06W-IDX] > 0)

      if (PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] > 0)
        PW06W00.PW06W-SEL-SP[PW06W-IDX] = PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX];
        PW06W00.PW06W-ADD-SP-HNDL-SW[PW06W-IDX] = "Y";
        if (PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] > 0
         && PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] != 0
         && PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] != 
        PW06W01.PW06W-SEL-NSP[PW06W-IDX])
          set PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] cursor, bold;
          converseLib.validationFailed(395);
          return;
        end
      else
        if (PW06W01.PW06W-POOL-SP-FC[PW06W-IDX] > 0
         || PW06W01.PW06W-POOL-SP-RP[PW06W-IDX] > 0)
          PW06W00.PW06W-SEL-SP[PW06W-IDX] = PW06W01.PW06W-POOL-SP-FC[PW06W-IDX] +         PW06W01.PW06W-POOL-SP-RP[PW06W-IDX];
          PW06W00.PW06W-ADD-SP-HNDL-SW[PW06W-IDX] = "Y";
        else
          set PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
          converseLib.validationFailed(366);
          return;
        end
      end

    else

   /* ----------------------------------------------------------*/
   /* spec hndl gt 0 and non spec hndl eq 0*/
   /* ----------------------------------------------------------*/

      if (PW06W01.PW06W-SEL-SP[PW06W-IDX] > 0
       && PW06W01.PW06W-SEL-NSP[PW06W-IDX] == 0)

        if (PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] > 0)
          PW06W00.PW06W-SEL-NSP[PW06W-IDX] = PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX];
          PW06W00.PW06W-ADD-NSP-HNDL-SW[PW06W-IDX] = "Y";
          if (PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] > 0
           && PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] != 0
           && PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] != 
          PW06W01.PW06W-SEL-SP[PW06W-IDX])
            set PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
            converseLib.validationFailed(395);
            return;
          end
        else
          if (PW06W01.PW06W-POOL-NSP-FC[PW06W-IDX] > 0
           || PW06W01.PW06W-POOL-NSP-RP[PW06W-IDX] > 0)
            PW06W00.PW06W-SEL-NSP[PW06W-IDX] = PW06W01.PW06W-POOL-NSP-FC[PW06W-IDX] +         PW06W01.PW06W-POOL-NSP-RP[PW06W-IDX];
            PW06W00.PW06W-ADD-NSP-HNDL-SW[PW06W-IDX] = "Y";
          else
            set PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] cursor, bold;
            converseLib.validationFailed(366);
            return;
          end
        end

      else

   /* ----------------------------------------------------------*/
   /* spec hndl gt 0 and non spec hndl gt 0*/
   /* ----------------------------------------------------------*/

        if (PW06W01.PW06W-SEL-SP[PW06W-IDX] > 0
         && PW06W01.PW06W-SEL-NSP[PW06W-IDX] > 0)
          set PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
          set PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] bold;
          converseLib.validationFailed(355);
        end
      end
    end
  end


end // end PW06S-EDT-ADD-MAP1

// Edit records for add
Function PW06S-EDT-ADD-MAP2()
   /* ----------------------------------------------------------*/
   /* Note: Apply the same changes to s-edit-add-map1 also.*/
   /* ----------------------------------------------------------*/
   /* ----------------------------------------------------------*/
   /* Edit records where action eq 'a' add*/
   /* ----------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* spec hndl eq 0 and non spec hndl eq 0*/
   /* ----------------------------------------------------------*/
  if (PW06W01.PW06W-SEL-SP[PW06W-IDX] == 0
   && PW06W01.PW06W-SEL-NSP[PW06W-IDX] == 0)

    if (PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] > 0)
      PW06W00.PW06W-SEL-SP[PW06W-IDX] = PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX];
      PW06W00.PW06W-ADD-SP-HNDL-SW[PW06W-IDX] = "Y";
    end

    if (PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] > 0)
      PW06W00.PW06W-SEL-NSP[PW06W-IDX] = PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX];
      PW06W00.PW06W-ADD-NSP-HNDL-SW[PW06W-IDX] = "Y";
    end

    if (PW06W00.PW06W-ADD-SP-HNDL-SW[PW06W-IDX] == "Y"
     || PW06W00.PW06W-ADD-NSP-HNDL-SW[PW06W-IDX] == "Y")
   /* next sentence*/
    else
      if (PW06W01.PW06W-POOL-SP-FC[PW06W-IDX] > 0
       || PW06W01.PW06W-POOL-SP-RP[PW06W-IDX] > 0)
        PW06W00.PW06W-SEL-SP[PW06W-IDX] = PW06W01.PW06W-POOL-SP-FC[PW06W-IDX] +         PW06W01.PW06W-POOL-SP-RP[PW06W-IDX];
        PW06W00.PW06W-ADD-SP-HNDL-SW[PW06W-IDX] = "Y";
      end

      if (PW06W01.PW06W-POOL-NSP-FC[PW06W-IDX] > 0
       || PW06W01.PW06W-POOL-NSP-RP[PW06W-IDX] > 0)
        PW06W00.PW06W-SEL-NSP[PW06W-IDX] = PW06W01.PW06W-POOL-NSP-FC[PW06W-IDX] +         PW06W01.PW06W-POOL-NSP-RP[PW06W-IDX];
        PW06W00.PW06W-ADD-NSP-HNDL-SW[PW06W-IDX] = "Y";
      end
    end

  else
   /* ----------------------------------------------------------*/
   /* spec hndl eq 0 and non spec hndl gt 0*/
   /* ----------------------------------------------------------*/

    if (PW06W01.PW06W-SEL-SP[PW06W-IDX] == 0
     && PW06W01.PW06W-SEL-NSP[PW06W-IDX] > 0)

      if (PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] > 0)
        PW06W00.PW06W-SEL-SP[PW06W-IDX] = PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX];
        PW06W00.PW06W-ADD-SP-HNDL-SW[PW06W-IDX] = "Y";
        if (PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] > 0
         && PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] != 0
         && PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] != 
        PW06W01.PW06W-SEL-NSP[PW06W-IDX])
          set PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] cursor, bold;
          converseLib.validationFailed(395);
          return;
        end
      else
        if (PW06W01.PW06W-POOL-SP-FC[PW06W-IDX] > 0
         || PW06W01.PW06W-POOL-SP-RP[PW06W-IDX] > 0)
          PW06W00.PW06W-SEL-SP[PW06W-IDX] = PW06W01.PW06W-POOL-SP-FC[PW06W-IDX] +         PW06W01.PW06W-POOL-SP-RP[PW06W-IDX];
          PW06W00.PW06W-ADD-SP-HNDL-SW[PW06W-IDX] = "Y";
        else
          set PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
          converseLib.validationFailed(366);
          return;
        end
      end

    else

   /* ----------------------------------------------------------*/
   /* spec hndl gt 0 and non spec hndl eq 0*/
   /* ----------------------------------------------------------*/

      if (PW06W01.PW06W-SEL-SP[PW06W-IDX] > 0
       && PW06W01.PW06W-SEL-NSP[PW06W-IDX] == 0)

        if (PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] > 0)
          PW06W00.PW06W-SEL-NSP[PW06W-IDX] = PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX];
          PW06W00.PW06W-ADD-NSP-HNDL-SW[PW06W-IDX] = "Y";
          if (PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] > 0
           && PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] != 0
           && PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] != 
          PW06W01.PW06W-SEL-SP[PW06W-IDX])
            set PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
            converseLib.validationFailed(395);
            return;
          end
        else
          if (PW06W01.PW06W-POOL-NSP-FC[PW06W-IDX] > 0
           || PW06W01.PW06W-POOL-NSP-RP[PW06W-IDX] > 0)
            PW06W00.PW06W-SEL-NSP[PW06W-IDX] = PW06W01.PW06W-POOL-NSP-FC[PW06W-IDX] +         PW06W01.PW06W-POOL-NSP-RP[PW06W-IDX];
            PW06W00.PW06W-ADD-NSP-HNDL-SW[PW06W-IDX] = "Y";
          else
            set PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] cursor, bold;
            converseLib.validationFailed(366);
            return;
          end
        end

      else

   /* ----------------------------------------------------------*/
   /* spec hndl gt 0 and non spec hndl gt 0*/
   /* ----------------------------------------------------------*/

        if (PW06W01.PW06W-SEL-SP[PW06W-IDX] > 0
         && PW06W01.PW06W-SEL-NSP[PW06W-IDX] > 0)
          set PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
          set PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] bold;
          converseLib.validationFailed(355);
        end
      end
    end
  end


end // end PW06S-EDT-ADD-MAP2

// Edit records for change
Function PW06S-EDT-CHG-MAP1()
   /* ----------------------------------------------------------*/
   /* Note: Apply the same changes to s-edt-chg-map2 also.*/
   /* ----------------------------------------------------------*/
   /* ----------------------------------------------------------*/
   /* Edit records where action eq 'c' change*/
   /* ----------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* spec hndl eq 0 and non spec hndl eq 0*/
   /* ----------------------------------------------------------*/
  if (PW06W01.PW06W-SEL-SP[PW06W-IDX] == 0
   && PW06W01.PW06W-SEL-NSP[PW06W-IDX] == 0)

    set PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
    set PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] bold;
    converseLib.validationFailed(360);
    return;
  end

   /* ----------------------------------------------------------*/
   /* spec hndl eq 0 and non spec hndl gt 0*/
   /* ----------------------------------------------------------*/

  if (PW06W01.PW06W-SEL-SP[PW06W-IDX] == 0
   && PW06W01.PW06W-SEL-NSP[PW06W-IDX] > 0)

    if (PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] > 0
     && PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] == 
    PW06W01.PW06W-SEL-NSP[PW06W-IDX])
      set PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
      converseLib.validationFailed(360);
      return;
    end

    if (PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] > 0
     && PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] != 
    PW06W01.PW06W-SEL-NSP[PW06W-IDX])
      set PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
      set PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] bold;
      converseLib.validationFailed(395);
      return;
    end

    if (PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] == 
    PW06W01.PW06W-SEL-NSP[PW06W-IDX])
      set PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] cursor, bold;
      converseLib.validationFailed(263);
      return;
    end

    if (PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] == 0)
      set PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] cursor, bold;
      converseLib.validationFailed(342);
      return;
    end

    PW06W00.PW06W-SEL-NSP[PW06W-IDX] = PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX];
    PW06W00.PW06W-CHG-NSP-HNDL-SW[PW06W-IDX] = "Y";
  end

   /* ----------------------------------------------------------*/
   /* spec hndl gt 0 and non spec hndl eq 0*/
   /* ----------------------------------------------------------*/

  if (PW06W01.PW06W-SEL-SP[PW06W-IDX] > 0
   && PW06W01.PW06W-SEL-NSP[PW06W-IDX] == 0)

    if (PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] == 
    PW06W01.PW06W-SEL-SP[PW06W-IDX]
     && PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] > 0)
      set PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] cursor, bold;
      converseLib.validationFailed(360);
      return;
    end

    if (PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] != 
    PW06W01.PW06W-SEL-SP[PW06W-IDX]
     && PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] > 0)
      set PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
      set PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] bold;
      converseLib.validationFailed(395);
      return;
    end

    if (PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] == 
    PW06W01.PW06W-SEL-SP[PW06W-IDX])
      set PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
      converseLib.validationFailed(263);
      return;
    end

    if (PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] == 0)
      set PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
      converseLib.validationFailed(342);
      return;
    end

    PW06W00.PW06W-SEL-SP[PW06W-IDX] = PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX];
    PW06W00.PW06W-CHG-SP-HNDL-SW[PW06W-IDX] = "Y";
  end

   /* ----------------------------------------------------------*/
   /* spec hndl gt 0 and non spec hndl gt 0*/
   /* ----------------------------------------------------------*/

  if (PW06W01.PW06W-SEL-SP[PW06W-IDX] > 0
   && PW06W01.PW06W-SEL-NSP[PW06W-IDX] > 0)

    if (PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] == 
    PW06W01.PW06W-SEL-SP[PW06W-IDX]
     && PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] == 
    PW06W01.PW06W-SEL-NSP[PW06W-IDX])
      set PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
      set PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] bold;
      converseLib.validationFailed(366);
      return;
    end

    if (PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] != 
    PW06W01.PW06W-SEL-NSP[PW06W-IDX]
     && PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] == 0)
      set PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] cursor, bold;
      converseLib.validationFailed(342);
    end

    if (PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] != 
    PW06W01.PW06W-SEL-SP[PW06W-IDX]
     && PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] == 0)
      set PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
      converseLib.validationFailed(342);
    end

    if (converseVar.validationMsgNum > 0)
      return;
    end

    if (PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] != 
    PW06W01.PW06W-SEL-SP[PW06W-IDX]
     && PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] != 0)
      PW06W00.PW06W-SEL-SP[PW06W-IDX] = PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX];
      PW06W00.PW06W-CHG-SP-HNDL-SW[PW06W-IDX] = "Y";
    end

    if (PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] != 
    PW06W01.PW06W-SEL-NSP[PW06W-IDX]
     && PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] != 0)
      PW06W00.PW06W-SEL-NSP[PW06W-IDX] = PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX];
      PW06W00.PW06W-CHG-NSP-HNDL-SW[PW06W-IDX] = "Y";
    end

  end


end // end PW06S-EDT-CHG-MAP1

// Edit records for change
Function PW06S-EDT-CHG-MAP2()
   /* ----------------------------------------------------------*/
   /* Note: Apply the same changes to s-edt-chg-map1 also.*/
   /* ----------------------------------------------------------*/
   /* ----------------------------------------------------------*/
   /* Edit records where action eq 'c' change*/
   /* ----------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* spec hndl eq 0 and non spec hndl eq 0*/
   /* ----------------------------------------------------------*/
  if (PW06W01.PW06W-SEL-SP[PW06W-IDX] == 0
   && PW06W01.PW06W-SEL-NSP[PW06W-IDX] == 0)

    set PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
    set PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] bold;
    converseLib.validationFailed(360);
    return;
  end

   /* ----------------------------------------------------------*/
   /* spec hndl eq 0 and non spec hndl gt 0*/
   /* ----------------------------------------------------------*/

  if (PW06W01.PW06W-SEL-SP[PW06W-IDX] == 0
   && PW06W01.PW06W-SEL-NSP[PW06W-IDX] > 0)

    if (PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] > 0
     && PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] == 
    PW06W01.PW06W-SEL-NSP[PW06W-IDX])
      set PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
      converseLib.validationFailed(360);
      return;
    end

    if (PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] > 0
     && PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] != 
    PW06W01.PW06W-SEL-NSP[PW06W-IDX])
      set PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
      set PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] bold;
      converseLib.validationFailed(395);
      return;
    end

    if (PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] == 
    PW06W01.PW06W-SEL-NSP[PW06W-IDX])
      set PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] cursor, bold;
      converseLib.validationFailed(263);
      return;
    end

    if (PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] == 0)
      set PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] cursor, bold;
      converseLib.validationFailed(342);
      return;
    end

    PW06W00.PW06W-SEL-NSP[PW06W-IDX] = PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX];
    PW06W00.PW06W-CHG-NSP-HNDL-SW[PW06W-IDX] = "Y";
  end

   /* ----------------------------------------------------------*/
   /* spec hndl gt 0 and non spec hndl eq 0*/
   /* ----------------------------------------------------------*/

  if (PW06W01.PW06W-SEL-SP[PW06W-IDX] > 0
   && PW06W01.PW06W-SEL-NSP[PW06W-IDX] == 0)

    if (PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] == 
    PW06W01.PW06W-SEL-SP[PW06W-IDX]
     && PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] > 0)
      set PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] cursor, bold;
      converseLib.validationFailed(360);
      return;
    end

    if (PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] != 
    PW06W01.PW06W-SEL-SP[PW06W-IDX]
     && PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] > 0)
      set PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
      set PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] bold;
      converseLib.validationFailed(395);
      return;
    end

    if (PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] == 
    PW06W01.PW06W-SEL-SP[PW06W-IDX])
      set PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
      converseLib.validationFailed(263);
      return;
    end

    if (PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] == 0)
      set PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
      converseLib.validationFailed(342);
      return;
    end

    PW06W00.PW06W-SEL-SP[PW06W-IDX] = PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX];
    PW06W00.PW06W-CHG-SP-HNDL-SW[PW06W-IDX] = "Y";
  end

   /* ----------------------------------------------------------*/
   /* spec hndl gt 0 and non spec hndl gt 0*/
   /* ----------------------------------------------------------*/

  if (PW06W01.PW06W-SEL-SP[PW06W-IDX] > 0
   && PW06W01.PW06W-SEL-NSP[PW06W-IDX] > 0)

    if (PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] == 
    PW06W01.PW06W-SEL-SP[PW06W-IDX]
     && PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] == 
    PW06W01.PW06W-SEL-NSP[PW06W-IDX])
      set PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
      set PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] bold;
      converseLib.validationFailed(366);
      return;
    end

    if (PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] != 
    PW06W01.PW06W-SEL-NSP[PW06W-IDX]
     && PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] == 0)
      set PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] cursor, bold;
      converseLib.validationFailed(342);
    end

    if (PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] != 
    PW06W01.PW06W-SEL-SP[PW06W-IDX]
     && PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] == 0)
      set PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
      converseLib.validationFailed(342);
    end

    if (converseVar.validationMsgNum > 0)
      return;
    end

    if (PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] != 
    PW06W01.PW06W-SEL-SP[PW06W-IDX]
     && PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] != 0)
      PW06W00.PW06W-SEL-SP[PW06W-IDX] = PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX];
      PW06W00.PW06W-CHG-SP-HNDL-SW[PW06W-IDX] = "Y";
    end

    if (PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] != 
    PW06W01.PW06W-SEL-NSP[PW06W-IDX]
     && PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] != 0)
      PW06W00.PW06W-SEL-NSP[PW06W-IDX] = PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX];
      PW06W00.PW06W-CHG-NSP-HNDL-SW[PW06W-IDX] = "Y";
    end

  end


end // end PW06S-EDT-CHG-MAP2

// Edit records for delete
Function PW06S-EDT-DEL-MAP1()
   /* ----------------------------------------------------------*/
   /* Note: Apply the same changes to s-edt-del-map2 also.*/
   /* ----------------------------------------------------------*/
   /* ----------------------------------------------------------*/
   /* Edit records where action eq 'd' delete*/
   /* ----------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* spec hndl eq 0 and non spec hndl eq 0*/
   /* ----------------------------------------------------------*/
  if (PW06W01.PW06W-SEL-SP[PW06W-IDX] == 0
   && PW06W01.PW06W-SEL-NSP[PW06W-IDX] == 0)

    set PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
    set PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] bold;
    converseLib.validationFailed(201);
    return;
  end

  if (PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] != 
  PW06W01.PW06W-SEL-SP[PW06W-IDX]
   && PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] != 0
   && PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] == 
  PW06W01.PW06W-SEL-NSP[PW06W-IDX])
    set PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
    converseLib.validationFailed(379);
    return;
  end

  if (PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] == 
  PW06W01.PW06W-SEL-SP[PW06W-IDX]
   && PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] != 
  PW06W01.PW06W-SEL-NSP[PW06W-IDX]
   && PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] != 0)
    set PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] cursor, bold;
    converseLib.validationFailed(379);
    return;
  end

  if (PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] != 
  PW06W01.PW06W-SEL-NSP[PW06W-IDX]
   && PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] != 0)
    set PW06M001.PW06M-QTY-NSP-HNDL[PW06W-IDX] cursor, bold;
    converseLib.validationFailed(379);
  end

  if (PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] != 
  PW06W01.PW06W-SEL-SP[PW06W-IDX]
   && PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] != 0)
    set PW06M001.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
    converseLib.validationFailed(379);
  end

  if (converseVar.validationMsgNum > 0)
    return;
  end

  if (PW06W01.PW06W-SEL-SP[PW06W-IDX] > 0)
    PW06W00.PW06W-SEL-SP[PW06W-IDX] = PW06W01.PW06W-SEL-SP[PW06W-IDX];
    PW06W00.PW06W-DEL-SP-HNDL-SW[PW06W-IDX] = "Y";
    PW06W00.PW06W-SEL-SP[PW06W-IDX] = PW06W01.PW06W-SEL-SP[PW06W-IDX];
  end

  if (PW06W01.PW06W-SEL-NSP[PW06W-IDX] > 0)
    PW06W00.PW06W-SEL-NSP[PW06W-IDX] = PW06W01.PW06W-SEL-NSP[PW06W-IDX];
    PW06W00.PW06W-DEL-NSP-HNDL-SW[PW06W-IDX] = "Y";
    PW06W00.PW06W-SEL-NSP[PW06W-IDX] = PW06W01.PW06W-SEL-NSP[PW06W-IDX];
  end


end // end PW06S-EDT-DEL-MAP1

// Edit records for delete
Function PW06S-EDT-DEL-MAP2()
   /* ----------------------------------------------------------*/
   /* Note: Apply the same changes to s-edt-del-map1 also.*/
   /* ----------------------------------------------------------*/
   /* ----------------------------------------------------------*/
   /* Edit records where action eq 'd' delete*/
   /* ----------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* spec hndl eq 0 and non spec hndl eq 0*/
   /* ----------------------------------------------------------*/
  if (PW06W01.PW06W-SEL-SP[PW06W-IDX] == 0
   && PW06W01.PW06W-SEL-NSP[PW06W-IDX] == 0)

    set PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
    set PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] bold;
    converseLib.validationFailed(201);
    return;
  end

  if (PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] != 
  PW06W01.PW06W-SEL-SP[PW06W-IDX]
   && PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] != 0
   && PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] == 
  PW06W01.PW06W-SEL-NSP[PW06W-IDX])
    set PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
    converseLib.validationFailed(379);
    return;
  end

  if (PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] == 
  PW06W01.PW06W-SEL-SP[PW06W-IDX]
   && PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] != 
  PW06W01.PW06W-SEL-NSP[PW06W-IDX]
   && PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] != 0)
    set PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] cursor, bold;
    converseLib.validationFailed(379);
    return;
  end

  if (PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] != 
  PW06W01.PW06W-SEL-NSP[PW06W-IDX]
   && PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] != 0)
    set PW06M002.PW06M-QTY-NSP-HNDL[PW06W-IDX] cursor, bold;
    converseLib.validationFailed(379);
  end

  if (PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] != 
  PW06W01.PW06W-SEL-SP[PW06W-IDX]
   && PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] != 0)
    set PW06M002.PW06M-QTY-SP-HNDL[PW06W-IDX] cursor, bold;
    converseLib.validationFailed(379);
  end

  if (converseVar.validationMsgNum > 0)
    return;
  end

  if (PW06W01.PW06W-SEL-SP[PW06W-IDX] > 0)
    PW06W00.PW06W-SEL-SP[PW06W-IDX] = PW06W01.PW06W-SEL-SP[PW06W-IDX];
    PW06W00.PW06W-DEL-SP-HNDL-SW[PW06W-IDX] = "Y";
    PW06W00.PW06W-SEL-SP[PW06W-IDX] = PW06W01.PW06W-SEL-SP[PW06W-IDX];
  end

  if (PW06W01.PW06W-SEL-NSP[PW06W-IDX] > 0)
    PW06W00.PW06W-SEL-NSP[PW06W-IDX] = PW06W01.PW06W-SEL-NSP[PW06W-IDX];
    PW06W00.PW06W-DEL-NSP-HNDL-SW[PW06W-IDX] = "Y";
    PW06W00.PW06W-SEL-NSP[PW06W-IDX] = PW06W01.PW06W-SEL-NSP[PW06W-IDX];
  end


end // end PW06S-EDT-DEL-MAP2

// Fetch row in DPICK.VCAHLD01
Function PW06S-FETCH-CARR()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("N1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW06W00.PW06W-CURSOR-CARR-SW = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW06W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06S-FETCH-CARR

// Fetch row in DPICK.VCUHLD01
Function PW06S-FETCH-CUST()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to check rlrse dates-Dpick.Vcuhld01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("N1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      PW06W00.PW06W-CURSOR-CARR-SW = "Y"; /* end of cursor*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW06W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06S-FETCH-CUST

// Fetch row in DPICK.VORHLD01
Function PW06S-FETCH-ORD()
   /* ------------------------------------------------------------*/
   /* Fetch the next row and check rlrse dates-Dpick.Vorhld01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("N1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      PW06W00.PW06W-CURSOR-CARR-SW = "Y"; /* end of cursor switch*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW06W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06S-FETCH-ORD

// Fetch row in DPICK.Vselqt01
Function PW06S-FETCH-SEL()
   /* ------------------------------------------------------------*/
   /* Fetch the next row in dpick.vselqt01*/
   /* ------------------------------------------------------------*/
  try
    call "IO5500" ("N1", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* if successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

        PW06W00.PW06W-CURSOR-SEL-SW = "Y"; /* end of cursor*/
        return; /* Return to previous process*/

      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW06W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWMREC.PWMKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06S-FETCH-SEL

// Fetch row in DPICK.VSELOR01
Function PW06S-FETCH-SELORD()
   /* ------------------------------------------------------------*/
   /* Fetch the next row in dpick.vselor01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("N2", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* if successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

        PW06W00.PW06W-CURSOR-ORD-SW = "Y"; /* end of cursor*/
        return; /* Return to previous process*/

      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW06W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06S-FETCH-SELORD

// Format display storage (W01)
Function PW06S-FORMAT-W01()
   /* ------------------------------------------------------------*/
   /* Move POOL qtys to display storage to be moved to map and*/
   /* set W00 qtys to zero.*/
   /* ------------------------------------------------------------*/

  PW06W01.PW06W-POOL-SP-FC[PW06W-IDX] = PW06W00.PW06W-POOL-SP-FC;
  PW06W01.PW06W-POOL-SP-RP[PW06W-IDX] = PW06W00.PW06W-POOL-SP-RP;
  PW06W01.PW06W-POOL-NSP-FC[PW06W-IDX] = PW06W00.PW06W-POOL-NSP-FC;
  PW06W01.PW06W-POOL-NSP-RP[PW06W-IDX] = PW06W00.PW06W-POOL-NSP-RP;

   /* ---- set to zero ----------------------------------------------*/
  PW06W00.PW06W-POOL-SP-FC = 0;
  PW06W00.PW06W-POOL-SP-RP = 0;
  PW06W00.PW06W-POOL-NSP-FC = 0;
  PW06W00.PW06W-POOL-NSP-RP = 0;


end // end PW06S-FORMAT-W01

// get sum selqt from "picking"
Function PW06S-GET-SELQTSUM()

  try
    call "IO5500" ("S2", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "GET SUMMARY";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW06W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWMREC.PWMKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06S-GET-SELQTSUM

// Process pool header quantities
Function PW06S-PROCESS-POOL()
   /* ---------------------------------------------------------*/
   /* Check SELQT01 for dnsb LE the POOLH01 dnsb.*/
   /* - Read and accumulate selection qtys.*/
   /* ---------------------------------------------------------*/

  if (PWMREC.OP1DSBDT != -1 /* ne no qtys to read*/
   && PW06W00.PW06W-CURSOR-SEL-SW != "Y")

    if (PWMREC.OP1DSBDT < PK4REC.OP1DSBDT   /* qty dnsb lt pool dnsb*/
     || (PWMREC.OP1DSBDT == PK4REC.OP1DSBDT /* or (qty dnsb eq pool dnsb*/
     && PWMREC.TF1CARCD <= PK4REC.TF1CARCD)) /* and qty carr le pool carr)*/

      PW06S-ADD-SEL-QTY(); /* add sel qtys*/

      if (PW06W00.PW06W-SEL-EXIST-SW == "Y")
        /* next sentence*/
      else
        if (PW06W00.PW06W-SEL-BGR-CLS-SW == "N") /* sel qty not b or c*/
          /* next sentence*/
        else
          return; /* will return if only a sel qty exists*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* if sel qty dnsb ge pool dnsb read move pool dsnb to hold dnsb.*/
   /* This will catch if there is only one pool record to write out*/
   /* in row and sel qty record do not match conditions of bgrade or*/
   /* closeout*/
   /* ------------------------------------------------------------*/
  if (PWMREC.OP1DSBDT > PK4REC.OP1DSBDT   /* qty dnsb gt pool dnsb*/
   || (PWMREC.OP1DSBDT == PK4REC.OP1DSBDT /* or (qty dnsb eq pool dnsb*/
   && PWMREC.TF1CARCD >= PK4REC.TF1CARCD) /* qty carr ge pool carr)*/
   || PWMREC.OP1DSBDT == -1               /* no qtys to read*/
   || PW06W00.PW06W-CURSOR-SEL-SW == "Y")

    PW06W00.PW06W-HOLD-DATE = PK4REC.OP1DSBDT; /* date hold*/
    PW06W00.PW06W-HOLD-TF1CARCD = PK4REC.TF1CARCD; /* carr hold*/

  end

   /* ---------------------------------------------------------*/
   /* Accumulate pick pool qty*/
   /* ---------------------------------------------------------*/

  if (PK4REC.OP1SPHDF == "Y")
    PW06W00.PW06W-POOL-SP-FC = PW06W00.PW06W-POOL-SP-FC +     PK4REC.PK4ORDFC;
    PW06W00.PW06W-POOL-SP-RP = PW06W00.PW06W-POOL-SP-RP +     PK4REC.PK4ORDRP;
  else
    PW06W00.PW06W-POOL-NSP-FC = PW06W00.PW06W-POOL-NSP-FC +     PK4REC.PK4ORDFC;
    PW06W00.PW06W-POOL-NSP-RP = PW06W00.PW06W-POOL-NSP-RP +     PK4REC.PK4ORDRP;
  end

   /* ------------------------------------------------------------*/
   /* Move hold DNSB and POOL qtys to display storage to be*/
   /* moved to map*/
   /* ------------------------------------------------------------*/

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE PW06W00.PW06W-HOLD-MM TO PW06W01.PW06W-DNSB-MM(PW06W-IDX);*/
  /* MOVE PW06W00.PW06W-HOLD-DD TO PW06W01.PW06W-DNSB-DD(PW06W-IDX);*/
  /* MOVE PW06W00.PW06W-HOLD-YY TO PW06W01.PW06W-DNSB-YY(PW06W-IDX);*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
  PW06W01.PW06W-DNSB-DATE[PW06W-IDX] = PW06W00.PW06W-HOLD-DATE;
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

  PW06W01.TF1CARCD[PW06W-IDX] = PW06W00.PW06W-HOLD-TF1CARCD;

  PW06W01.PW06W-POOL-SP-FC[PW06W-IDX] = PW06W00.PW06W-POOL-SP-FC;
  PW06W01.PW06W-POOL-SP-RP[PW06W-IDX] = PW06W00.PW06W-POOL-SP-RP;
  PW06W01.PW06W-POOL-NSP-FC[PW06W-IDX] = PW06W00.PW06W-POOL-NSP-FC;
  PW06W01.PW06W-POOL-NSP-RP[PW06W-IDX] = PW06W00.PW06W-POOL-NSP-RP;

   /* -----------------------------------------------------------*/
   /* Check and see if any sel'd order qtys associated with*/
   /* the pool record.*/
   /* -----------------------------------------------------------*/

  PW06S-ADD-ORD-QTY();


end // end PW06S-PROCESS-POOL

// Read temporary storage page
Function PW06S-READ-T-STOR()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PW06W01.XXXTSLEN = PW06W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PW06W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PW06W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW06W00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06S-READ-T-STOR

// Check carrier hold
Function PW06S-SEL-CARR-HLD()
   /* ------------------------------------------------------------*/
   /* open cursor - DPICK.VCAHLD01*/
   /* ------------------------------------------------------------*/

  PW06S-DECL-CARR(); /* set cursor*/

  PW06W00.PW06W-CURSOR-CARR-SW = " "; /* clear cursor switch*/

   /* ------------------------------------------------------------*/
   /* Fetch next row and check release date until no more rows.*/
   /* ------------------------------------------------------------*/

  while (PW06W00.PW06W-CURSOR-CARR-SW == " " /* Until no more rows*/
   && PW06W00.PW06W-PROCESS == "Y")

    PW06S-FETCH-CARR(); /* Fetch next*/

    if (PW06W00.PW06W-CURSOR-CARR-SW == " ") /* not end of cursor*/
      PW06S-VALIDAT-CARR(); /* validate release date*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Close cursor - DPICK.VCAHLD01*/
   /* ------------------------------------------------------------*/

  PW06S-CLOSE-CARR(); /* Close cursor*/


end // end PW06S-SEL-CARR-HLD

// Check customer hold
Function PW06S-SEL-CUST-HLD()
   /* ------------------------------------------------------------*/
   /* Open cursor in  DPICK.VCUHLD01*/
   /* ------------------------------------------------------------*/

  PW06S-DECL-CUST(); /* Set cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch next row and check dates til end of cursor.*/
   /* ------------------------------------------------------------*/

  PW06W00.PW06W-CURSOR-CARR-SW = " "; /* Clear cursor switch*/

  while (PW06W00.PW06W-CURSOR-CARR-SW == " " /* Til end of cursor*/
   && PW06W00.PW06W-PROCESS == "Y")

    PW06S-FETCH-CUST(); /* fetch next row*/

    if (PW06W00.PW06W-CURSOR-CARR-SW == " ") /* not end of cursor*/
      PW06S-VALIDAT-CUST(); /* validate customer not on hold*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Close cursor*/
   /* ------------------------------------------------------------*/

  PW06S-CLOSE-CUST(); /* Close cursor*/


end // end PW06S-SEL-CUST-HLD

// Check order hold
Function PW06S-SEL-ORD-HLD()
   /* ------------------------------------------------------------*/
   /* Open cursor - DPICK.VORHLD01*/
   /* ------------------------------------------------------------*/

  PW06S-DECL-ORD(); /* Set cursor*/

  PW06W00.PW06W-CURSOR-CARR-SW = " "; /* clear cursor switch*/

   /* ------------------------------------------------------------*/
   /* Fetch next row and validate the release date*/
   /* ------------------------------------------------------------*/

  while (PW06W00.PW06W-CURSOR-CARR-SW == " " /* Until end of cursor*/
   && PW06W00.PW06W-PROCESS == "Y")

    PW06S-FETCH-ORD(); /* Fetch next row*/

    if (PW06W00.PW06W-CURSOR-CARR-SW == " ") /* not end of cursor*/
      PW06S-VALIDATE-ORD(); /* validate orders on hold*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Close cursor in DPICK.VORHLD01*/
   /* ------------------------------------------------------------*/

  PW06S-CLOSE-ORD(); /* Close cursor*/


end // end PW06S-SEL-ORD-HLD

// Sel unique row DPICK.VSELQT01
Function PW06S-SEL-UNIQ-QTY()
   /* ------------------------------------------------------------*/
   /* Select unique in DPICK.VSELQT01*/
   /* ------------------------------------------------------------*/
  try
    call "IO5500" ("S ", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found is good!!*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW06W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWMREC.PWMKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06S-SEL-UNIQ-QTY

// Subtract "picking" selqt
Function PW06S-SUBT-PKSELQT()
   /* ------------------------------------------------------------*/
   /* When doing "planning"*/
   /* Get and subtract Picking selqty from pool quantities*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* save vselqt01 row*/
   /* ------------------------------------------------------------*/
  PKWREC.PKWUSERB = PWMREC.PWMGROUP; /* save vselqty01 row*/

  set PWMREC empty; /* Row storage area*/

  PWMREC.XWHCD = PW06W01.XWHCD; /* Warehouse code*/
  if (PW06W01.PW06W-DNSB-DATE[PW06W-IDX] != 0)
    if (PW06W01.PW06W-DNSB-YY[PW06W-IDX] > 50
     && PW06W01.PW06W-DNSB-YY[PW06W-IDX] <= 99)
      PW06W01.PW06W-DNSB-CC[PW06W-IDX] = 19;
    else
      PW06W01.PW06W-DNSB-CC[PW06W-IDX] = 20;
    end
  end
  PWMREC.OP1DSBDT = PW06W01.PW06W-DNSB-DATE[PW06W-IDX]; /* dnsb dt*/
  PWMREC.TF1CARCD = PW06W01.TF1CARCD[PW06W-IDX]; /* carrier code*/
  PWMREC.PKURUNMD = " "; /* normal run mode*/
  PWMREC.XHDCD = "*"; /* spec hndl code*/
  PWMREC.XGPCD = "*"; /* general product code*/

  if (PW06W01.XDVCD == "*") /* division code*/
    PWMREC.XDVCD = " ";
  else
    PWMREC.XDVCD = PW06W01.XDVCD;
  end

  if (PW06W01.XBCCD == "*") /* brand code*/
    PWMREC.XBCCD = " ";
  else
    PWMREC.XBCCD = PW06W01.XBCCD;
  end

   /* ------------------------------------------------------------*/
   /* subtract "picking" selected qty - special hndlng*/
   /* ------------------------------------------------------------*/
  if (PW06W01.PW06W-POOL-SP-FC[PW06W-IDX] > 0
   || PW06W01.PW06W-POOL-SP-RP[PW06W-IDX] > 0)

    if (PW06W01.PW06W-BGR-CLS-SW == "B") /* b-grade?*/
      PWMREC.PK-SEL-TYP-CD = "10"; /* b-grade special handling*/
    else /* closeout*/
      PWMREC.PK-SEL-TYP-CD = "12"; /* closeout special handling*/
    end
    PWMREC.PKHPVSFC = 0;
    PWMREC.PKHPVSRP = 0;

    PW06S-GET-SELQTSUM();

    if (PWMREC.PKHPVSFC > 0)
      /* is pool fc qty ge pk selqt fc qty*/
      if (PW06W01.PW06W-POOL-SP-FC[PW06W-IDX] >= PWMREC.PKHPVSFC)
        PW06W01.PW06W-POOL-SP-FC[PW06W-IDX] = PW06W01.PW06W-POOL-SP-FC[PW06W-IDX] - PWMREC.PKHPVSFC;
      else /* pool fc qty lt pk selqt fc qty*/
        PWMREC.PKHPVSRP = PWMREC.PKHPVSRP +         (PWMREC.PKHPVSFC - PW06W01.PW06W-POOL-SP-FC[PW06W-IDX]);
        PW06W01.PW06W-POOL-SP-FC[PW06W-IDX] = 0;
      end
    end
    if (PWMREC.PKHPVSRP > 0)
      /* is pool rp qty ge pk selqt rp qty*/
      if (PW06W01.PW06W-POOL-SP-RP[PW06W-IDX] >= PWMREC.PKHPVSRP)
        PW06W01.PW06W-POOL-SP-RP[PW06W-IDX] = PW06W01.PW06W-POOL-SP-RP[PW06W-IDX] - PWMREC.PKHPVSRP;
      else /* pool fc qty lt pk selqt rp qty*/
        PW06W01.PW06W-POOL-SP-RP[PW06W-IDX] = 0;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* subtract "picking" selected qty - non special hndlng*/
   /* ------------------------------------------------------------*/
  if (PW06W01.PW06W-POOL-NSP-FC[PW06W-IDX] > 0
   || PW06W01.PW06W-POOL-NSP-RP[PW06W-IDX] > 0)

    if (PW06W01.PW06W-BGR-CLS-SW == "B") /* b-grade?*/
      PWMREC.PK-SEL-TYP-CD = "11"; /* b-grade non special handling*/
    else /* closeout*/
      PWMREC.PK-SEL-TYP-CD = "13"; /* closeout non special handling*/
    end
    PWMREC.PKHPVSFC = 0;
    PWMREC.PKHPVSRP = 0;

    PW06S-GET-SELQTSUM();

    if (PWMREC.PKHPVSFC > 0)
      /* is pool fc qty ge pk selqt fc qty*/
      if (PW06W01.PW06W-POOL-NSP-FC[PW06W-IDX] >= PWMREC.PKHPVSFC)
        PW06W01.PW06W-POOL-NSP-FC[PW06W-IDX] = PW06W01.PW06W-POOL-NSP-FC[PW06W-IDX] - PWMREC.PKHPVSFC;
      else /* pool fc qty lt pk selqt fc qty*/
        PWMREC.PKHPVSRP = PWMREC.PKHPVSRP +         (PWMREC.PKHPVSFC - PW06W01.PW06W-POOL-SP-FC[PW06W-IDX]);
        PW06W01.PW06W-POOL-NSP-FC[PW06W-IDX] = 0;
      end
    end
    if (PWMREC.PKHPVSRP > 0)
      /* is pool rp qty ge pk selqt rp qty*/
      if (PW06W01.PW06W-POOL-NSP-RP[PW06W-IDX] >= PWMREC.PKHPVSRP)
        PW06W01.PW06W-POOL-NSP-RP[PW06W-IDX] = PW06W01.PW06W-POOL-NSP-RP[PW06W-IDX] - PWMREC.PKHPVSRP;
      else /* pool fc qty lt pk selqt rp qty*/
        PW06W01.PW06W-POOL-NSP-RP[PW06W-IDX] = 0;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* restore vselqt01 row*/
   /* ------------------------------------------------------------*/
  PWMREC.PWMGROUP = PKWREC.PKWUSERB;


end // end PW06S-SUBT-PKSELQT

// Sum ord qty in dpick.vselor01
Function PW06S-SUM-ORD-MAP1()
   /* ------------------------------------------------------------*/
   /* Note: Apply the same changes to s-sum-ord-map2 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* add ord qty for matching dnsb date with pool quantitys*/
   /* check to make sure order is bgrade or closeout*/
   /* ------------------------------------------------------------*/
  if (PW06M001.PW06M-BGR-CLS-SW == "B"
   && PKHREC.PK-SEL-TYP-CD == "10")
    /* next sentence*/
  else
    if (PW06M001.PW06M-BGR-CLS-SW == "B"
     && PKHREC.PK-SEL-TYP-CD == "11")
      /* next sentence*/
    else
      if (PW06M001.PW06M-BGR-CLS-SW == "C"
       && PKHREC.PK-SEL-TYP-CD == "12")
        /* next sentence*/
      else
        if (PW06M001.PW06M-BGR-CLS-SW == "C"
         && PKHREC.PK-SEL-TYP-CD == "13")
          /* next sentence*/
        else
          return;
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* add qtys to proper spec hndl or non by looking at selection*/
   /* type code. Also add total ord qtys.*/
   /* ------------------------------------------------------------*/
  if (PKHREC.PK-SEL-TYP-CD == "10"
   || PKHREC.PK-SEL-TYP-CD == "12")
    PW06W00.PW06W-ORD-SP-FC = PW06W00.PW06W-ORD-SP-FC + PKHREC.PKHPVSFC;
    PW06W00.PW06W-ORD-SP-RP = PW06W00.PW06W-ORD-SP-RP + PKHREC.PKHPVSRP;
    PW06W00.PW06W-TOT-ORD-SP-HNDL = PW06W00.PW06W-TOT-ORD-SP-HNDL +     PKHREC.PKHPVSFC + PKHREC.PKHPVSRP;
  else
    PW06W00.PW06W-ORD-NSP-FC = PW06W00.PW06W-ORD-NSP-FC +     PKHREC.PKHPVSFC;
    PW06W00.PW06W-ORD-NSP-RP = PW06W00.PW06W-ORD-NSP-RP +     PKHREC.PKHPVSRP;
    PW06W00.PW06W-TOT-ORD-NSP-HNDL = PW06W00.PW06W-TOT-ORD-NSP-HNDL +     PKHREC.PKHPVSFC + PKHREC.PKHPVSRP;
  end


end // end PW06S-SUM-ORD-MAP1

// Sum ord qty in dpick.vselor01
Function PW06S-SUM-ORD-MAP2()
   /* ------------------------------------------------------------*/
   /* Note: Apply the same changes to s-sum-ord-map1 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* add ord qty for matching dnsb date with pool quantitys*/
   /* check to make sure order is bgrade or closeout*/
   /* ------------------------------------------------------------*/
  if (PW06M002.PW06M-BGR-CLS-SW == "B"
   && PKHREC.PK-SEL-TYP-CD == "10")
    /* next sentence*/
  else
    if (PW06M002.PW06M-BGR-CLS-SW == "B"
     && PKHREC.PK-SEL-TYP-CD == "11")
      /* next sentence*/
    else
      if (PW06M002.PW06M-BGR-CLS-SW == "C"
       && PKHREC.PK-SEL-TYP-CD == "12")
        /* next sentence*/
      else
        if (PW06M002.PW06M-BGR-CLS-SW == "C"
         && PKHREC.PK-SEL-TYP-CD == "13")
          /* next sentence*/
        else
          return;
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* add qtys to proper spec hndl or non by looking at selection*/
   /* type code. Also add total ord qtys.*/
   /* ------------------------------------------------------------*/
  if (PKHREC.PK-SEL-TYP-CD == "10"
   || PKHREC.PK-SEL-TYP-CD == "12")
    PW06W00.PW06W-ORD-SP-FC = PW06W00.PW06W-ORD-SP-FC + PKHREC.PKHPVSFC;
    PW06W00.PW06W-ORD-SP-RP = PW06W00.PW06W-ORD-SP-RP + PKHREC.PKHPVSRP;
    PW06W00.PW06W-TOT-ORD-SP-HNDL = PW06W00.PW06W-TOT-ORD-SP-HNDL +     PKHREC.PKHPVSFC + PKHREC.PKHPVSRP;
  else
    PW06W00.PW06W-ORD-NSP-FC = PW06W00.PW06W-ORD-NSP-FC +     PKHREC.PKHPVSFC;
    PW06W00.PW06W-ORD-NSP-RP = PW06W00.PW06W-ORD-NSP-RP +     PKHREC.PKHPVSRP;
    PW06W00.PW06W-TOT-ORD-NSP-HNDL = PW06W00.PW06W-TOT-ORD-NSP-HNDL +     PKHREC.PKHPVSFC + PKHREC.PKHPVSRP;
  end


end // end PW06S-SUM-ORD-MAP2

// Sum ord qty in dpick.vselor01
Function PW06S-SUM-SEL-QTY()
   /* ------------------------------------------------------------*/
   /* check to make sure sel qty dnsb between from and to dnsb*/
   /* ------------------------------------------------------------*/
  if (PWMREC.OP1DSBDT > PW06W00.PW06W-TO-DATE)
    return;

  else

    if (PWMREC.OP1DSBDT < PW06W00.PW06W-FROM-DATE)
      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* check to make sure sel qty is a bgrade or closeout*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW06M002.PW06M-BGR-CLS-SW == "B"
     && PWMREC.PK-SEL-TYP-CD == "10")
      PW06W00.PW06W-SEL-BGR-CLS-SW = "Y";
    else
      if (PW06M002.PW06M-BGR-CLS-SW == "B"
       && PWMREC.PK-SEL-TYP-CD == "11")
        PW06W00.PW06W-SEL-BGR-CLS-SW = "Y";
      else
        if (PW06M002.PW06M-BGR-CLS-SW == "C"
         && PWMREC.PK-SEL-TYP-CD == "12")
          PW06W00.PW06W-SEL-BGR-CLS-SW = "Y";
        else
          if (PW06M002.PW06M-BGR-CLS-SW == "C"
           && PWMREC.PK-SEL-TYP-CD == "13")
            PW06W00.PW06W-SEL-BGR-CLS-SW = "Y";
          else
            return;
          end
        end
      end
    end
  else
    if (PW06M001.PW06M-BGR-CLS-SW == "B"
     && PWMREC.PK-SEL-TYP-CD == "10")
      PW06W00.PW06W-SEL-BGR-CLS-SW = "Y";
    else
      if (PW06M001.PW06M-BGR-CLS-SW == "B"
       && PWMREC.PK-SEL-TYP-CD == "11")
        PW06W00.PW06W-SEL-BGR-CLS-SW = "Y";
      else
        if (PW06M001.PW06M-BGR-CLS-SW == "C"
         && PWMREC.PK-SEL-TYP-CD == "12")
          PW06W00.PW06W-SEL-BGR-CLS-SW = "Y";
        else
          if (PW06M001.PW06M-BGR-CLS-SW == "C"
           && PWMREC.PK-SEL-TYP-CD == "13")
            PW06W00.PW06W-SEL-BGR-CLS-SW = "Y";
          else
            return;
          end
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* add to proper spec hndl non spec hndl column by looking at*/
   /* selection type code. Add also total qtys on bottom of page.*/
   /* ------------------------------------------------------------*/
  if (PWMREC.PK-SEL-TYP-CD == "10"
   || PWMREC.PK-SEL-TYP-CD == "12")
    PW06W00.PW06W-SEL-SP-FC = PW06W00.PW06W-SEL-SP-FC + PWMREC.PKHPVSFC;
    PW06W00.PW06W-SEL-SP-RP = PW06W00.PW06W-SEL-SP-RP + PWMREC.PKHPVSRP;
    PW06W00.PW06W-TOT-QTY-SP-HNDL = PW06W00.PW06W-TOT-QTY-SP-HNDL +     PWMREC.PKHPVSFC + PWMREC.PKHPVSRP;
  else
    PW06W00.PW06W-SEL-NSP-FC = PW06W00.PW06W-SEL-NSP-FC +     PWMREC.PKHPVSFC;
    PW06W00.PW06W-SEL-NSP-RP = PW06W00.PW06W-SEL-NSP-RP +     PWMREC.PKHPVSRP;
    PW06W00.PW06W-TOT-QTY-NSP-HNDL = PW06W00.PW06W-TOT-QTY-NSP-HNDL +     PWMREC.PKHPVSFC + PWMREC.PKHPVSRP;
  end


end // end PW06S-SUM-SEL-QTY

// Update temporary storage page
Function PW06S-UPD-T-STOR()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PW06W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW06W00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW06S-UPD-T-STOR

// Validate hold release date
Function PW06S-VALIDAT-CARR()
   /* ------------------------------------------------------------*/
   /* Validate the appropriate carrier hold release date, based*/
   /* on whether user is in 'picking' or 'pick planning' mode.*/
   /* ------------------------------------------------------------*/

  if (PW06W00.PW06W-RUN-MODE == "  ") /* if run mode is picking*/

    if (PWFREC.PKBRELDT > PW06W00.PW06W-CURR-DATE)
                                               /* rlse date gt current date*/

      PW06W00.PW06W-PROCESS = "N"; /* reject this order*/

    else

      return;

    end

  else

    if (PWFREC.PKBPLRDT > PW06W00.PW06W-CURR-DATE)
                                               /* rlse date gt current date*/

      PW06W00.PW06W-PROCESS = "N"; /* reject this order*/

    end

  end


end // end PW06S-VALIDAT-CARR

// Validate hold release date
Function PW06S-VALIDAT-CUST()
   /* ------------------------------------------------------------*/
   /* Validate the appropriate carrier hold release date, based*/
   /* on whether user is in 'picking' or 'pick planning' mode.*/
   /* ------------------------------------------------------------*/

  if (PW06W00.PW06W-RUN-MODE == "  ") /* if run mode is picking*/

    if (PK9REC.PK9RELDT > PW06W00.PW06W-CURR-DATE)
                                   /* rlse date gt current date*/
      PW06W00.PW06W-PROCESS = "N"; /* reject this order*/

    end

  else

    if (PK9REC.PK9PLRDT > PW06W00.PW06W-CURR-DATE)
                                   /* rlse date gt current date*/
      PW06W00.PW06W-PROCESS = "N"; /* reject this order*/

    end

  end


end // end PW06S-VALIDAT-CUST

// Validate PK-SEL-IND
Function PW06S-VALIDAT-SEL()
   /* ***************************************************************/
   /* PICKING       - valid 'S' , ' '*/
   /* PICK PLANNING - valid 'P' , ' '*/
   /* ***************************************************************/

  if (PW06W00.PW06W-RUN-MODE == "P") /* PICK PLANNING*/
    if (PK4REC.PK4SLIND == " " /* valid status for selection criteria*/
     || PK4REC.PK4SLIND == "P" /* ditto*/
    )                          /* next sentence*/
    else
      PW06W00.PW06W-PROCESS = "N"; /* don't process order*/
    end

  else
    if (PW06W00.PW06W-RUN-MODE == " ") /* PICK SELECTION*/
      if (PK4REC.PK4SLIND == " " /* valid status*/
       || PK4REC.PK4SLIND == "S") /* ditto*/
          /* next sentence*/
      else
        PW06W00.PW06W-PROCESS = "N"; /* don't process order*/
      end

    else

      PW06W00.PW06W-PROCESS = "N"; /* don't process order*/

    end
  end

end // end PW06S-VALIDAT-SEL

// Validate hold release date
Function PW06S-VALIDATE-ORD()
   /* ------------------------------------------------------------*/
   /* Validate the appropriate carrier hold release date, based*/
   /* on whether user is in 'picking' or 'pick planning' mode.*/
   /* ------------------------------------------------------------*/

  if (PW06W00.PW06W-RUN-MODE == "  ") /* if run mode is picking*/

    if (PKBREC.PKBRELDT > PW06W00.PW06W-CURR-DATE)
                                   /* rlse date gt current date*/
      PW06W00.PW06W-PROCESS = "N"; /* reject this order*/

    end

  else

    if (PKBREC.PKBPLRDT > PW06W00.PW06W-CURR-DATE)
                                   /* rlse date gt current date*/
      PW06W00.PW06W-PROCESS = "N"; /* reject this order*/

    end

  end


end // end PW06S-VALIDATE-ORD

//*** RECORD=PW06W00 ****
// Working storage for PW06
// ***********************
Record PW06W00 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 PW06W-REQUEST-DATA PW06W-REQUEST-DATA ; 
  10 PW06W-FORMAT-SCR PW06W-FORMAT-SCR ; 
  10 PW06W-DATA-CHGD-SW PW06W-DATA-CHGD-SW ; 
  10 PW06W-CURR-SCR-CHG PW06W-CURR-SCR-CHG ; 
  10 PW06W-PROCESS PW06W-PROCESS ; 
  10 PW06W-CURSOR-POOL-SW PW06W-CURSOR-POOL-SW ; 
  10 PW06W-CURSOR-CARR-SW PW06W-CURSOR-CARR-SW ; 
  10 PW06W-DATA-EXIST-SW PW06W-DATA-EXIST-SW ; 
  10 PW06W-TOT-ORD-SP-HNDL PW06W-TOT-ORD-SP-HNDL ; 
  10 PW06W-TOT-ORD-NSP-HNDL PW06W-TOT-ORD-NSP-HNDL ; 
  10 PW06W-TOT-QTY-SP-HNDL PW06W-TOT-QTY-SP-HNDL ; 
  10 PW06W-TOT-QTY-NSP-HNDL PW06W-TOT-QTY-NSP-HNDL ; 
  10 PW06W-CURSOR-ORD-SW PW06W-CURSOR-ORD-SW ; 
  10 PW06W-CURSOR-SEL-SW PW06W-CURSOR-SEL-SW ; 
  10 PW06W-READ-POOL-SW PW06W-READ-POOL-SW ; 
  10 PW06W-LAST-DNSB PW06W-LAST-DNSB ; 
  10 PW06W-LAST-TF1CARCD PW06W-LAST-TF1CARCD ; 
  10 PW06W-RUN-MODE PW06W-RUN-MODE ; 
  10 PW06W-SEL-EXIST-SW PW06W-SEL-EXIST-SW ; 
  10 PW06W-SEL-BGR-CLS-SW PW06W-SEL-BGR-CLS-SW ; 
  10 PW06W-IDX PW06W-IDX ; 
  10 PW06W-SAVE-IDX PW06W-SAVE-IDX ; 
  10 PW06W-INQ-IDX PW06W-INQ-IDX ; 
  10 PW06W-HOLD-TF1CARCD PW06W-HOLD-TF1CARCD ; 
  10 * char(1) ; 
  10 PW06W-CURR-DATE PW06W-CURR-DATE ; 
    15 PW06W-CURR-CC PW06W-CURR-CC ; 
    15 PW06W-EZEDTE PW06W-EZEDTE ; 
      20 PW06W-CURR-YY PW06W-CURR-YY ; 
      20 * num(4) ; 
  10 PW06W-HOLD-DATE PW06W-HOLD-DATE ; 
    15 PW06W-HOLD-CC PW06W-HOLD-CC ; 
    15 PW06W-HOLD-YY PW06W-HOLD-YY ; 
    15 PW06W-HOLD-MM PW06W-HOLD-MM ; 
    15 PW06W-HOLD-DD PW06W-HOLD-DD ; 
  10 PW06W-FROM-DATE PW06W-FROM-DATE ; 
    15 PW06W-FROM-CC PW06W-FROM-CC ; 
    15 PW06W-FROM-YY PW06W-FROM-YY ; 
    15 PW06W-FROM-MM PW06W-FROM-MM ; 
    15 PW06W-FROM-DD PW06W-FROM-DD ; 
  10 PW06W-TO-DATE PW06W-TO-DATE ; 
    15 PW06W-TO-CC PW06W-TO-CC ; 
    15 PW06W-TO-YY PW06W-TO-YY ; 
    15 PW06W-TO-MM PW06W-TO-MM ; 
    15 PW06W-TO-DD PW06W-TO-DD ; 
  10 PW06W-HOLD-SEL-DNSB PW06W-HOLD-SEL-DNSB ; 
    15 PW06W-HOLD-SEL-CC PW06W-HOLD-SEL-CC ; 
    15 PW06W-HOLD-SEL-YY PW06W-HOLD-SEL-YY ; 
    15 PW06W-HOLD-SEL-MM PW06W-HOLD-SEL-MM ; 
    15 PW06W-HOLD-SEL-DD PW06W-HOLD-SEL-DD ; 
  10 XXXMODID XXXMODID ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 * char(1) ; 
  10 PW06W-ORD-SP-FC PW06W-ORD-SP-FC ; 
  10 PW06W-ORD-NSP-FC PW06W-ORD-NSP-FC ; 
  10 PW06W-ORD-SP-RP PW06W-ORD-SP-RP ; 
  10 PW06W-ORD-NSP-RP PW06W-ORD-NSP-RP ; 
  10 PW06W-SEL-SP-FC PW06W-SEL-SP-FC ; 
  10 PW06W-SEL-NSP-FC PW06W-SEL-NSP-FC ; 
  10 PW06W-SEL-SP-RP PW06W-SEL-SP-RP ; 
  10 PW06W-SEL-NSP-RP PW06W-SEL-NSP-RP ; 
  10 PW06W-POOL-SP-FC PW06W-POOL-SP-FC ; 
  10 PW06W-POOL-NSP-FC PW06W-POOL-NSP-FC ; 
  10 PW06W-POOL-SP-RP PW06W-POOL-SP-RP ; 
  10 PW06W-POOL-NSP-RP PW06W-POOL-NSP-RP ; 
  10 * char(200) ; 
    15 PW06W-SEL-SP PW06W-SEL-SP [10] ; 
    15 PW06W-SEL-NSP PW06W-SEL-NSP [10] ; 
    15 PW06W-ADD-SP-HNDL-SW PW06W-ADD-SP-HNDL-SW [10] ; 
    15 PW06W-ADD-NSP-HNDL-SW PW06W-ADD-NSP-HNDL-SW [10] ; 
    15 PW06W-CHG-SP-HNDL-SW PW06W-CHG-SP-HNDL-SW [10] ; 
    15 PW06W-CHG-NSP-HNDL-SW PW06W-CHG-NSP-HNDL-SW [10] ; 
    15 PW06W-DEL-SP-HNDL-SW PW06W-DEL-SP-HNDL-SW [10] ; 
    15 PW06W-DEL-NSP-HNDL-SW PW06W-DEL-NSP-HNDL-SW [10] ; 
end // end PW06W00

//*** RECORD=PW06W01 ****
// Map working storage for PW06M001
// ***********************
Record PW06W01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(742) ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 XDVCD XDVCD ; 
    10 XDVDESC XDVDESC ; 
    10 XBCCD XBCCD ; 
    10 XBCABRV XBCABRV ; 
    10 PW06W-DNSB-FROM-MM PW06W-DNSB-FROM-MM ; 
    10 PW06W-DNSB-FROM-DD PW06W-DNSB-FROM-DD ; 
    10 PW06W-DNSB-FROM-YY PW06W-DNSB-FROM-YY ; 
    10 PW06W-DNSB-TO-MM PW06W-DNSB-TO-MM ; 
    10 PW06W-DNSB-TO-DD PW06W-DNSB-TO-DD ; 
    10 PW06W-DNSB-TO-YY PW06W-DNSB-TO-YY ; 
    10 PW06W-BGR-CLS-SW PW06W-BGR-CLS-SW ; 
    10 * char(69) [10] ; 
      15 PW06W-ACTION PW06W-ACTION ; 
      15 PW06W-DNSB-DATE PW06W-DNSB-DATE ; 
        20 PW06W-DNSB-CC PW06W-DNSB-CC ; 
        20 PW06W-DNSB-YY PW06W-DNSB-YY ; 
        20 PW06W-DNSB-MM PW06W-DNSB-MM ; 
        20 PW06W-DNSB-DD PW06W-DNSB-DD ; 
      15 TF1CARCD TF1CARCD ; 
      15 PW06W-POOL-SP-FC PW06W-POOL-SP-FC ; 
      15 PW06W-POOL-NSP-FC PW06W-POOL-NSP-FC ; 
      15 PW06W-POOL-SP-RP PW06W-POOL-SP-RP ; 
      15 PW06W-POOL-NSP-RP PW06W-POOL-NSP-RP ; 
      15 PW06W-ORD-SP PW06W-ORD-SP ; 
      15 PW06W-ORD-NSP PW06W-ORD-NSP ; 
      15 PW06W-SEL-SP PW06W-SEL-SP ; 
      15 PW06W-SEL-NSP PW06W-SEL-NSP ; 
end // end PW06W01

// selection area
DataItem PW06W-ACTION char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// add non spec hndl qty sw
DataItem PW06W-ADD-NSP-HNDL-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// add spec hndl qty sw
DataItem PW06W-ADD-SP-HNDL-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// BGRADE CLOSEOUT SWITCH
DataItem PW06W-BGR-CLS-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// chg non spec hndl qty sw
DataItem PW06W-CHG-NSP-HNDL-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// chg spec hndl qty sw
DataItem PW06W-CHG-SP-HNDL-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current date CC
DataItem PW06W-CURR-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current date for comparison
DataItem PW06W-CURR-DATE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current screen chgd
DataItem PW06W-CURR-SCR-CHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current date YY
DataItem PW06W-CURR-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor switch for Vcahld01
DataItem PW06W-CURSOR-CARR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor switch for vselor01
DataItem PW06W-CURSOR-ORD-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor switch for Vpoolh01
DataItem PW06W-CURSOR-POOL-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor switch for vselqt01
DataItem PW06W-CURSOR-SEL-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data chgd switch (all pgs)
DataItem PW06W-DATA-CHGD-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data exist sw for vpoolh01
DataItem PW06W-DATA-EXIST-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// del non spec hndl qty sw
DataItem PW06W-DEL-NSP-HNDL-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// del spec hndl qty sw
DataItem PW06W-DEL-SP-HNDL-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DNSB CC
DataItem PW06W-DNSB-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dnsb date
DataItem PW06W-DNSB-DATE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DNSB DD
DataItem PW06W-DNSB-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// "from" dd
DataItem PW06W-DNSB-FROM-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// "from" mm
DataItem PW06W-DNSB-FROM-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// "from" yy
DataItem PW06W-DNSB-FROM-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// DNSB MM
DataItem PW06W-DNSB-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// "to" dd
DataItem PW06W-DNSB-TO-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// "to" mm
DataItem PW06W-DNSB-TO-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// do not ship before 'to' year
DataItem PW06W-DNSB-TO-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// DNSB YY
DataItem PW06W-DNSB-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// EZEDTE date YYMMDD
DataItem PW06W-EZEDTE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format screen switch
DataItem PW06W-FORMAT-SCR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "from" cc
DataItem PW06W-FROM-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// "from" date
DataItem PW06W-FROM-DATE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// "from" dd
DataItem PW06W-FROM-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// "from" mm
DataItem PW06W-FROM-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// "from" yy
DataItem PW06W-FROM-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// hold cc
DataItem PW06W-HOLD-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold date
DataItem PW06W-HOLD-DATE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// holddd
DataItem PW06W-HOLD-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// holdmm
DataItem PW06W-HOLD-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold selection dnsb cc
DataItem PW06W-HOLD-SEL-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold selection dnsb dd
DataItem PW06W-HOLD-SEL-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold selection dnsb
DataItem PW06W-HOLD-SEL-DNSB num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold selection dnsb mm
DataItem PW06W-HOLD-SEL-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold selection dnsb yy
DataItem PW06W-HOLD-SEL-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// carrier code
DataItem PW06W-HOLD-TF1CARCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// holdyy
DataItem PW06W-HOLD-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Screen index
DataItem PW06W-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inquiry Work index
DataItem PW06W-INQ-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Last dnsb for vselqt01
DataItem PW06W-LAST-DNSB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Last carrier code
DataItem PW06W-LAST-TF1CARCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// orders nonspec hndl fc & rp
DataItem PW06W-ORD-NSP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order nonspec hndl fc
DataItem PW06W-ORD-NSP-FC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order nonspec hndl rp
DataItem PW06W-ORD-NSP-RP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// orders spec hndl fc & rp
DataItem PW06W-ORD-SP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order spec hndl fc
DataItem PW06W-ORD-SP-FC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order spec hndl rp
DataItem PW06W-ORD-SP-RP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pool nonspec hndl fc
DataItem PW06W-POOL-NSP-FC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pool nonspec hndl rp
DataItem PW06W-POOL-NSP-RP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pool spec hndl fc
DataItem PW06W-POOL-SP-FC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pool spec hndl rp
DataItem PW06W-POOL-SP-RP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Okay to process switch
DataItem PW06W-PROCESS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Read next pool record sw
DataItem PW06W-READ-POOL-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PW06W-REQUEST-DATA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Run mode
DataItem PW06W-RUN-MODE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save creen index
DataItem PW06W-SAVE-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BGRADE CLOSEOUT SWITCH
DataItem PW06W-SEL-BGR-CLS-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection qty exist switch
DataItem PW06W-SEL-EXIST-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection nonspec hndl fc & rp
DataItem PW06W-SEL-NSP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection nonspec hndl fc
DataItem PW06W-SEL-NSP-FC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection nonspec hndl re
DataItem PW06W-SEL-NSP-RP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection spec hndl fc & rp
DataItem PW06W-SEL-SP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection spec hndl fc
DataItem PW06W-SEL-SP-FC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection spec hndl rp
DataItem PW06W-SEL-SP-RP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// "to" cc
DataItem PW06W-TO-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// "to" date
DataItem PW06W-TO-DATE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// "to" dd
DataItem PW06W-TO-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// "to" mm
DataItem PW06W-TO-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// "to" yy
DataItem PW06W-TO-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// total order non spec hndl
DataItem PW06W-TOT-ORD-NSP-HNDL num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total order sp hndl
DataItem PW06W-TOT-ORD-SP-HNDL num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total qty non spec hndl
DataItem PW06W-TOT-QTY-NSP-HNDL num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total qty spec hndl
DataItem PW06W-TOT-QTY-SP-HNDL num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

